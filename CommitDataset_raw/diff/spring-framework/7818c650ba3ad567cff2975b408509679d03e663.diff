[+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, + * <p>See @{@link Configuration}'s javadoc for usage examples., + * @author Chris Beams, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, + * <p>See @{@link Configuration}'s javadoc for usage examples., + * @author Chris Beams, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +	public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters,, +			Environment environment) {, +, +		this(registry, useDefaultFilters, environment,, +				(registry instanceof ResourceLoader ? (ResourceLoader) registry : null));, +	}, +, +	/**, +	 * Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory and, +	 * using the given {@link Environment} when evaluating bean definition profile metadata., +	 * @param registry the {@code BeanFactory} to load bean definitions into, in the form, +	 * of a {@code BeanDefinitionRegistry}, +	 * @param useDefaultFilters whether to include the default filters for the, +	 * {@link org.springframework.stereotype.Component @Component},, +	 * {@link org.springframework.stereotype.Repository @Repository},, +	 * {@link org.springframework.stereotype.Service @Service}, and, +	 * {@link org.springframework.stereotype.Controller @Controller} stereotype annotations, +	 * @param environment the Spring {@link Environment} to use when evaluating bean, +	 * definition profile metadata, +	 * @param resourceLoader the {@link ResourceLoader} to use, +	 * @since 4.3.6, +	 */, +	public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters,, +			Environment environment, ResourceLoader resourceLoader) {, +		if (useDefaultFilters) {, +			registerDefaultFilters();, +		setEnvironment(environment);, +		setResourceLoader(resourceLoader);, +		this.scopeMetadataResolver =, +				(scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver());, +					definitionHolder =, +							AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, + * <p>See @{@link Configuration}'s javadoc for usage examples., + * @author Chris Beams, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +	public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters,, +			Environment environment) {, +, +		this(registry, useDefaultFilters, environment,, +				(registry instanceof ResourceLoader ? (ResourceLoader) registry : null));, +	}, +, +	/**, +	 * Create a new {@code ClassPathBeanDefinitionScanner} for the given bean factory and, +	 * using the given {@link Environment} when evaluating bean definition profile metadata., +	 * @param registry the {@code BeanFactory} to load bean definitions into, in the form, +	 * of a {@code BeanDefinitionRegistry}, +	 * @param useDefaultFilters whether to include the default filters for the, +	 * {@link org.springframework.stereotype.Component @Component},, +	 * {@link org.springframework.stereotype.Repository @Repository},, +	 * {@link org.springframework.stereotype.Service @Service}, and, +	 * {@link org.springframework.stereotype.Controller @Controller} stereotype annotations, +	 * @param environment the Spring {@link Environment} to use when evaluating bean, +	 * definition profile metadata, +	 * @param resourceLoader the {@link ResourceLoader} to use, +	 * @since 4.3.6, +	 */, +	public ClassPathBeanDefinitionScanner(BeanDefinitionRegistry registry, boolean useDefaultFilters,, +			Environment environment, ResourceLoader resourceLoader) {, +		if (useDefaultFilters) {, +			registerDefaultFilters();, +		setEnvironment(environment);, +		setResourceLoader(resourceLoader);, +		this.scopeMetadataResolver =, +				(scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver());, +					definitionHolder =, +							AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, + * filters on an annotation/superclass that are annotated with {@link Indexed} are, +, +	private Environment environment;, +, +	private ResourcePatternResolver resourcePatternResolver;, +, +	private MetadataReaderFactory metadataReaderFactory;, +, +	private CandidateComponentsIndex componentsIndex;, +, +, +	/**, +	 * Protected constructor for flexible subclass initialization., +	 * @since 4.3.6, +	 */, +	protected ClassPathScanningCandidateComponentProvider() {, +	}, +		setEnvironment(environment);, +		setResourceLoader(null);, +	/**, +	 * Set the Environment to use when resolving placeholders and evaluating, +	 * {@link Conditional @Conditional}-annotated component classes., +	 * <p>The default is a {@link StandardEnvironment}., +	 * @param environment the Environment to use]