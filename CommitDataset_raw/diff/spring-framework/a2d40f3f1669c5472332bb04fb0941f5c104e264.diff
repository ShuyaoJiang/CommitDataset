[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +		return (this.constructorArgs != null ?, +				enhancer.create(this.constructorArgTypes, this.constructorArgs) :, +				enhancer.create());, +			// TODO: small memory optimisation here (can skip creation for methods with no advice), +		if (retVal != null && retVal == target && !RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) {, +			// Special case: it returned "this". Note that we can't help, +			// if the target sets a reference to itself in another returned object., +			throw new AopInvocationException(, +					"Null return value from advice does not match primitive return type for: " + method);, +			if (this == other) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +		return (this.constructorArgs != null ?, +				enhancer.create(this.constructorArgTypes, this.constructorArgs) :, +				enhancer.create());, +			// TODO: small memory optimisation here (can skip creation for methods with no advice), +		if (retVal != null && retVal == target && !RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) {, +			// Special case: it returned "this". Note that we can't help, +			// if the target sets a reference to itself in another returned object., +			throw new AopInvocationException(, +					"Null return value from advice does not match primitive return type for: " + method);, +			if (this == other) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ObjenesisCglibAopProxy.java, +, +			Factory factory = (Factory) this.objenesis.newInstance(enhancer.createClass());, +			// Fallback to regular proxy construction on unsupported JVMs, +				logger.debug("Unable to instantiate proxy using Objenesis, falling back to regular proxy construction", ex);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +		return (this.constructorArgs != null ?, +				enhancer.create(this.constructorArgTypes, this.constructorArgs) :, +				enhancer.create());, +			// TODO: small memory optimisation here (can skip creation for methods with no advice), +		if (retVal != null && retVal == target && !RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) {, +			// Special case: it returned "this". Note that we can't help, +			// if the target sets a reference to itself in another returned object., +			throw new AopInvocationException(, +					"Null return value from advice does not match primitive return type for: " + method);, +			if (this == other) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ObjenesisCglibAopProxy.java, +, +			Factory factory = (Factory) this.objenesis.newInstance(enhancer.createClass());, +			// Fallback to regular proxy construction on unsupported JVMs, +				logger.debug("Unable to instantiate proxy using Objenesis, falling back to regular proxy construction", ex);, +++ b/spring-aop/src/main/java/org/springframework/aop/support/AbstractRegexpMethodPointcut.java, +		setPatterns(pattern);, +	public void setPatterns(String... patterns) {, +		setExcludedPatterns(excludedPattern);, +	public void setExcludedPatterns(String... excludedPatterns) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +		return (this.constructorArgs != null ?, +				enhancer.create(this.constructorArgTypes, this.constructorArgs) :, +				enhancer.create());, +			// TODO: small memory optimisation here (can skip creation for methods with no advice), +		if (retVal != null && retVal == target && !RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) {, +			// Special case: it returned "this". Note that we can't help, +			// if the target sets a reference to itself in another returned object., +			throw new AopInvocationException(, +					"Null return value from advice does not match primitive return type for: " + method);, +			if (this == other) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ObjenesisCglibAopProxy.java, +, +			Factory factory = (Factory) this.objenesis.newInstance(enhancer.createClass());, +			// Fallback to regular proxy construction on unsupported JVMs, +				logger.debug("Unable to instantiate proxy using Objenesis, falling back to regular proxy construction", ex);, +++ b/spring-aop/src/main/java/org/springframework/aop/support/AbstractRegexpMethodPointcut.java, +		setPatterns(pattern);, +	public void setPatterns(String... patterns) {, +		setExcludedPatterns(excludedPattern);, +	public void setExcludedPatterns(String... excludedPatterns) {, +++ b/spring-aop/src/main/java/org/springframework/aop/support/ComposablePointcut.java, + * Copyright 2002-2013 the original author or authors., +		return "ComposablePointcut: " + this.classFilter + ", " +this.methodMatcher;]