[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ResponseStatusExceptionResolver.java, + * Copyright 2002-2016 the original author or authors., +import java.io.IOException;, +import org.springframework.web.server.ResponseStatusException;, + * <p>As of 5.0 this resolver also supports {@link ResponseStatusException}., + *, +			if (ex instanceof ResponseStatusException) {, +				return resolveResponseStatusException((ResponseStatusException) ex, request, response, handler);, +			}, +, +			ResponseStatus status = AnnotatedElementUtils.findMergedAnnotation(ex.getClass(), ResponseStatus.class);, +			if (status != null) {, +				return resolveResponseStatus(status, request, response, handler, ex);, +			}, +, +			if (ex.getCause() instanceof Exception) {, +				ex = (Exception) ex.getCause();, +				return doResolveException(request, response, handler, ex);, +			}, +	 * Template method that handles the {@link ResponseStatus @ResponseStatus} annotation., +	 * <p>The default implementation delegates to {@link #applyStatusAndReason}, +	 * with the status code and reason from the annotation., +	 * @param responseStatus the {@code @ResponseStatus} annotation, +	 * time of the exception, e.g. if multipart resolution failed, +	 * @param ex the exception, +	 * @return an empty ModelAndView, i.e. exception resolved, +	protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus,, +			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex), +			throws Exception {, +		return applyStatusAndReason(statusCode, reason, response);, +	}, +, +	/**, +	 * Template method that handles an {@link ResponseStatusException}., +	 * <p>The default implementation delegates to {@link #applyStatusAndReason}, +	 * with the status code and reason from the exception., +	 * @param ex the exception, +	 * @param request current HTTP request, +	 * @param response current HTTP response, +	 * @param handler the executed handler, or {@code null} if none chosen at the, +	 * time of the exception, e.g. if multipart resolution failed, +	 * @return an empty ModelAndView, i.e. exception resolved, +	 * @since 5.0, +	 */, +	protected ModelAndView resolveResponseStatusException(ResponseStatusException ex,, +			HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {, +, +		int statusCode = ex.getStatus().value();, +		String reason = ex.getReason();, +		applyStatusAndReason(statusCode, reason, response);, +		return new ModelAndView();, +	}, +, +	/**, +	 * Apply the resolved status code and reason to the response., +	 * <p>The default implementation sends a response error using, +	 * {@link HttpServletResponse#sendError(int)} or, +	 * {@link HttpServletResponse#sendError(int, String)} if there is a reason, +	 * and then returns an empty ModelAndView., +	 * @since 5.0, +	 */, +	protected ModelAndView applyStatusAndReason(int statusCode, String reason, HttpServletResponse response), +			throws IOException {, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ResponseStatusExceptionResolver.java, + * Copyright 2002-2016 the original author or authors., +import java.io.IOException;, +import org.springframework.web.server.ResponseStatusException;, + * <p>As of 5.0 this resolver also supports {@link ResponseStatusException}., + *, +			if (ex instanceof ResponseStatusException) {, +				return resolveResponseStatusException((ResponseStatusException) ex, request, response, handler);, +			}, +, +			ResponseStatus status = AnnotatedElementUtils.findMergedAnnotation(ex.getClass(), ResponseStatus.class);, +			if (status != null) {, +				return resolveResponseStatus(status, request, response, handler, ex);, +			}, +, +			if (ex.getCause() instanceof Exception) {, +				ex = (Exception) ex.getCause();, +				return doResolveException(request, response, handler, ex);, +			}, +	 * Template method that handles the {@link ResponseStatus @ResponseStatus} annotation., +	 * <p>The default implementation delegates to {@link #applyStatusAndReason}, +	 * with the status code and reason from the annotation., +	 * @param responseStatus the {@code @ResponseStatus} annotation, +	 * time of the exception, e.g. if multipart resolution failed, +	 * @param ex the exception, +	 * @return an empty ModelAndView, i.e. exception resolved, +	protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus,, +			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex), +			throws Exception {, +		return applyStatusAndReason(statusCode, reason, response);, +	}, +, +	/**, +	 * Template method that handles an {@link ResponseStatusException}., +	 * <p>The default implementation delegates to {@link #applyStatusAndReason}, +	 * with the status code and reason from the exception.]