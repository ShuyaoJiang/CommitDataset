[+++ b/src/docs/asciidoc/index.adoc, +* The Web on <<web.adoc#spring-web,Servlet>> or <<reactive-web.adoc#spring-webflux,Reactive>> stacks, +++ b/src/docs/asciidoc/index.adoc, +* The Web on <<web.adoc#spring-web,Servlet>> or <<reactive-web.adoc#spring-webflux,Reactive>> stacks, +++ b/src/docs/asciidoc/reactive-web.adoc, += Web on Reactive Stack, +This part of the documentation covers support for reactive stack, web applications built on, +http://www.reactive-streams.org/[Reactive Streams] and adapted to non-blocking runtimes, +such as Netty, Undertow, and Servlet containers via Servlet 3.1 non-blocking I/O., +Individual chapters cover <<webflux-module, Spring WebFlux>> and its, +<<webflux-fn,functional programming model>>. The previous section covers support for, +<<web.adoc#spring-web,Servlet web>> applications., +++ b/src/docs/asciidoc/index.adoc, +* The Web on <<web.adoc#spring-web,Servlet>> or <<reactive-web.adoc#spring-webflux,Reactive>> stacks, +++ b/src/docs/asciidoc/reactive-web.adoc, += Web on Reactive Stack, +This part of the documentation covers support for reactive stack, web applications built on, +http://www.reactive-streams.org/[Reactive Streams] and adapted to non-blocking runtimes, +such as Netty, Undertow, and Servlet containers via Servlet 3.1 non-blocking I/O., +Individual chapters cover <<webflux-module, Spring WebFlux>> and its, +<<webflux-fn,functional programming model>>. The previous section covers support for, +<<web.adoc#spring-web,Servlet web>> applications., +++ b/src/docs/asciidoc/web.adoc, += Web on Servlet Stack, +This part of the documentation covers support for Servlet stack, web applications built on the, +Servlet API and deployed to Servlet containers. Individual chapters include <<mvc,Spring MVC>>,, +<<mvc-view,View Technologies>>, <<mvc-cors,CORS Support>>, and <<websocket,WebSocket Support>>., +The next section covers support for <<reactive-web.adoc#spring-reactive-web,reactive web>> applications., +++ b/src/docs/asciidoc/index.adoc, +* The Web on <<web.adoc#spring-web,Servlet>> or <<reactive-web.adoc#spring-webflux,Reactive>> stacks, +++ b/src/docs/asciidoc/reactive-web.adoc, += Web on Reactive Stack, +This part of the documentation covers support for reactive stack, web applications built on, +http://www.reactive-streams.org/[Reactive Streams] and adapted to non-blocking runtimes, +such as Netty, Undertow, and Servlet containers via Servlet 3.1 non-blocking I/O., +Individual chapters cover <<webflux-module, Spring WebFlux>> and its, +<<webflux-fn,functional programming model>>. The previous section covers support for, +<<web.adoc#spring-web,Servlet web>> applications., +++ b/src/docs/asciidoc/web.adoc, += Web on Servlet Stack, +This part of the documentation covers support for Servlet stack, web applications built on the, +Servlet API and deployed to Servlet containers. Individual chapters include <<mvc,Spring MVC>>,, +<<mvc-view,View Technologies>>, <<mvc-cors,CORS Support>>, and <<websocket,WebSocket Support>>., +The next section covers support for <<reactive-web.adoc#spring-reactive-web,reactive web>> applications., +++ b/src/docs/asciidoc/web/webmvc.adoc, +Spring Web MVC is the original web framework built on the Servlet API and included, +in the Spring Framework from the very beginning. The formal name "Spring Web MVC", +comes from the name of its source module, +https://github.com/spring-projects/spring-framework/tree/master/spring-webmvc[spring-webmvc], +but it is more commonly known as "Spring MVC"., +Parallel to Spring Web MVC, Spring Framework 5.0 introduced a reactive stack, web framework, +whose name Spring WebFlux is also based on its source module, +https://github.com/spring-projects/spring-framework/tree/master/spring-webflux[spring-webflux]., +, +This section covers Spring Web MVC. The <<reactive-web.adoc#spring-reactive-web,next section>>, +covers Spring WebFlux., +pattern where a central `Servlet`, the `DispatcherServlet`, dispatches incoming, +requests to registered handlers for request processing., +`DispatcherServlet` provides a shared algorithm for request processing while, +flexible and supports diverse workflows., +The `DispatcherServlet`, as any `Servlet`, needs to be declared and mapped according, +to the Servlet specification using Java configuration or in `web.xml`., +In turn the `DispatcherServlet` uses Spring configuration to discover, +the delegate components it needs for request mapping, view resolution, exception, +handling, <<mvc-servlet-special-bean-types,and more>>., +Below is an example of the Java configuration that registers and initializes, +the `DispatcherServlet`. This class is auto-detected by the Servlet container, +(see <<mvc-container-config,Code-based, Servlet container initialization>>):, +[NOTE], +====, +In addition to using the ServletContext API directly, you can also extend, +`AbstractAnnotationConfigDispatcherServletInitializer` and override specific methods, +(see example under <<mvc-servlet-context-hierarchy,WebApplicationContext Hierarchy>>)., +====, +Below is an example of `web.xml` configuration to register and initialize the `DispatcherServlet`:, +[NOTE], +====, +Spring Boot follows a different initialization sequence. Rather than hooking into, +the lifecycle of the Servlet container, Spring Boot uses Spring configuration to, +bootstrap itself and the embedded Servlet container. `Filter` and `Servlet` declarations, +are detected in Spring configuration and registered with the Servlet container., +For more details check the, +https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-embedded-container[Spring Boot docs]., +====, +, +`DispatcherServlet` expects a `WebApplicationContext`, an extension of a plain, +`ApplicationContext`, for its own configuration. `WebApplicationContext` has a link to the, +`ServletContext` and `Servlet` it is associated with. It is also bound to the `ServletContext`, +such that applications can use static methods on `RequestContextUtils` to look up the, +`WebApplicationContext` if they need access to it., +For many applications having a single `WebApplicationContext` is simple and sufficient., +It is also possible to have a context hierarchy where one root `WebApplicationContext`, +is shared across multiple `DispatcherServlet` (or other `Servlet`) instances, each with, +its own child `WebApplicationContext` configuration., +See <<core.adoc#context-introduction,Additional Capabilities of the ApplicationContext>>, +for more on the context hierarchy feature., +The root `WebApplicationContext` typically contains infrastructure beans such as data repositories and, +business services that need to be shared across multiple `Servlet` instances. Those beans, +are effectively inherited and could be overridden (i.e. re-declared) in the Servlet-specific,, +child `WebApplicationContext` which typically contains beans local to the given `Servlet`:]