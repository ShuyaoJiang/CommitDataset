[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler.java, +	private boolean preservePublishOrder = false;, +, +	/**, +	 * Whether the client must receive messages in the order of publication., +	 * <p>By default messages sent to the {@code "clientOutboundChannel"} may, +	 * not be processed in the same order because the channel is backed by a, +	 * ThreadPoolExecutor that in turn does not guarantee processing in order., +	 * <p>When this flag is set to {@code true} messages within the same session, +	 * will be sent to the {@code "clientOutboundChannel"} one at a time in, +	 * order to preserve the order of publication. Enable this only if needed, +	 * since there is some performance overhead to keep messages in order., +	 * @param preservePublishOrder whether to publish in order, +	 * @since 5.1, +	 */, +	public void setPreservePublishOrder(boolean preservePublishOrder) {, +		OrderedMessageSender.configureOutboundChannel(this.clientOutboundChannel, preservePublishOrder);, +		this.preservePublishOrder = preservePublishOrder;, +	}, +, +	/**, +	 * Whether to ensure messages are received in the order of publication., +	 * @since 5.1, +	 */, +	public boolean isPreservePublishOrder() {, +		return this.preservePublishOrder;, +	}, +, +	/**, +	 * Get the MessageChannel to use for sending messages to clients, possibly, +	 * a per-session wrapper when {@code preservePublishOrder=true}., +	 * @since 5.1, +	 */, +	protected MessageChannel getClientOutboundChannelForSession(String sessionId) {, +		return this.preservePublishOrder ?, +				new OrderedMessageSender(getClientOutboundChannel(), logger) : getClientOutboundChannel();, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler.java, +	private boolean preservePublishOrder = false;, +, +	/**, +	 * Whether the client must receive messages in the order of publication., +	 * <p>By default messages sent to the {@code "clientOutboundChannel"} may, +	 * not be processed in the same order because the channel is backed by a, +	 * ThreadPoolExecutor that in turn does not guarantee processing in order., +	 * <p>When this flag is set to {@code true} messages within the same session, +	 * will be sent to the {@code "clientOutboundChannel"} one at a time in, +	 * order to preserve the order of publication. Enable this only if needed, +	 * since there is some performance overhead to keep messages in order., +	 * @param preservePublishOrder whether to publish in order, +	 * @since 5.1, +	 */, +	public void setPreservePublishOrder(boolean preservePublishOrder) {, +		OrderedMessageSender.configureOutboundChannel(this.clientOutboundChannel, preservePublishOrder);, +		this.preservePublishOrder = preservePublishOrder;, +	}, +, +	/**, +	 * Whether to ensure messages are received in the order of publication., +	 * @since 5.1, +	 */, +	public boolean isPreservePublishOrder() {, +		return this.preservePublishOrder;, +	}, +, +	/**, +	 * Get the MessageChannel to use for sending messages to clients, possibly, +	 * a per-session wrapper when {@code preservePublishOrder=true}., +	 * @since 5.1, +	 */, +	protected MessageChannel getClientOutboundChannelForSession(String sessionId) {, +		return this.preservePublishOrder ?, +				new OrderedMessageSender(getClientOutboundChannel(), logger) : getClientOutboundChannel();, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/OrderedMessageSender.java, +/*, + * Copyright 2002-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.messaging.simp.broker;, +, +import java.util.Queue;, +import java.util.concurrent.ConcurrentLinkedQueue;, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import org.apache.commons.logging.Log;, +]