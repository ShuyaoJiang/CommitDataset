[+++ b/src/asciidoc/index.adoc, +IoC container, with any web framework on top, but you can also use only the, +{javadoc-baseurl}/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.html[javadocs]., +interface as opposed to a Spring-specific lookup interface. Consult the javadocs of, +{javadoc-baseurl}/org/springframework/beans/factory/config/Scope.html[`Scope` javadocs],, +which explains the methods you need to implement in more detail., +destroyed or when the specified object in the scope is destroyed. Refer to the javadocs, +interface too. For further details, consult the javadocs of the `BeanPostProcessor` and, +consider implementing the `Ordered` interface too. Consult the javadocs of the, +Consult the `PropertyPlaceholderConfigurer` javadocs for more information., +`@Conditional` javadocs] for more detail., +the `LocalContainerEntityManagerFactoryBean` javadocs for more detail. For more on, +out the `ReloadableResourceBundleMessageSource` javadocs for details., +Please do consult the `ClassPathXmlApplicationContext` javadocs for details, +on the various constructors., +`ClassLoader` javadocs) exactly what sort of a URL is returned in this case. In, +at the `ValidationUtils` javadocs to see what functionality it provides besides the, +example shown previously., +methods it offers can be found in the javadocs., +online in the javadocs of, +{javadoc-baseurl}/org/springframework/validation/DefaultMessageCodesResolver.html[`DefaultMessageCodesResolver`],, +corresponding implementation ( `BeanWrapperImpl`). As quoted from the javadocs, the, +They're all described in more detail in the javadocs Spring comes with. What's important, +`PropertyEditors` in the javadocs of the `java.beans` package provided by Oracle., +| Capable of resolving Strings to `java.util.regex.Pattern` objects and vice versa., +| Capable of converting Strings (formatted using the format as defined in the javadocs, +  of the `java.util.Properties` class) to `Properties` objects. Registered by default, +  by `BeanWrapperImpl`., +default bootstrap mechanism. A JSR-303/JSR-349 provider, such as Hibernate Validator,, +is expected to be present in the classpath and will be detected automatically., +Each Bean Validation constraint consists of two parts. First, a `@Constraint` annotation, +behavior. To associate a declaration with an implementation, each `@Constraint` annotation, +By default, the `LocalValidatorFactoryBean` configures a `SpringConstraintValidatorFactory`, +that uses Spring to create ConstraintValidator instances. This allows your custom, +ConstraintValidators to benefit from dependency injection like any other Spring bean., +Shown below is an example of a custom `@Constraint` declaration, followed by an associated, +[[validation-beanvalidation-spring-method]], +===== Spring-driven Method Validation, +The method validation feature supported by Bean Validation 1.1, and as a custom, +extension also by Hibernate Validator 4.3, can be integrated into a Spring context, +through a `MethodValidationPostProcessor` bean definition:, +, +[source,xml,indent=0], +[subs="verbatim,quotes"], +----, +	<bean class="org.springframework.validation.beanvalidation.MethodValidationPostProcessor"/>, +----, +, +In order to be eligible for Spring-driven method validation, all target classes need, +to be annotated with Spring's `@Validated` annotation, optionally declaring the, +validation groups to use. Check out the `MethodValidationPostProcessor` javadocs, +for setup details with Hibernate Validator and Bean Validation 1.1 providers., +, +, +constructs, from message interpolation to traversal resolution. See the, +`LocalValidatorFactoryBean` javadocs for more information on these options., +Please do consult the javadocs for full details., +Basic usage for this class is very simple, as illustrated below. See the javadocs for, +encouraged to read the javadoc API documentation for the `java.lang.instrument` package, +the `org.aspectj.weaver.loadtime` package) class. See the class-level javadocs of the, +of the target to grow the pool as necessary. See the javadocs of, +support for new custom advice types to be added without changing the core framework., +The only constraint on a custom `Advice` type is that it must implement the, +`org.aopalliance.aop.Advice` marker interface., +Please refer to the `org.springframework.aop.framework.adapter` javadocs for further, +information., +framework. Refer to the corresponding javadocs for further information, including, +default attribute values, attribute aliases, and so on., +See <<testcontext-ctx-management>> and the `@ContextConfiguration` javadocs for, +hierarchy. See the `@WebAppConfiguration` javadocs for further details., +<<testcontext-ctx-management-ctx-hierarchies>> and the `@ContextHierarchy` javadocs, +See <<testcontext-ctx-management-env-profiles>> and the `@ActiveProfiles` javadocs, +`DirtiesContext.HierarchyMode` javadocs., +`@TestExecutionListeners` supports __inherited__ listeners by default. See the javadocs, +loading an `ApplicationContext` for a given test class. Consult the javadocs and the, +Consult the javadocs of `@Configuration` and `@Bean` for further information regarding, +implementations as specified in the `@Configuration` javadocs. In the following, +corresponding javadocs., +<<integration-testing-annotations-spring>> and the `@DirtiesContext` javadocs., +See the javadocs for full details., +| N/A (See `TransactionManagementConfigurer` javadocs), +transaction suspension. See the `JtaTransactionManager` javadocs for details., +the attendant javadocs for that., +__(See the `TransactionAwareDataSourceProxy` javadocs for more details.)__, +object in most environments. See the javadocs for more details., +See the `JdoDialect` javadocs for more details on its operations and how to use them, +See the `JpaDialect` javadocs for more details of its operations and how they are used, +integration with other web technologies, such as <<jsf,JSF>> and., +SWF integrates with existing frameworks like Spring MVC and JSF, in both Servlet and, +Portlet environments. If you have a business process (or processes) that would benefit, +from a conversational model as opposed to a purely request model, then SWF may be the, +solution., +leverage their existing investment in skills and tools, for example with JSF., +If you do not want to use Spring's Web MVC, but intend to leverage other solutions that, +Spring's respective helper method) from within any action object. No "plug-ins", +Spring's Web MVC. Spring does not compete with other web frameworks in this scenario., +It simply addresses the many areas that the pure web MVC frameworks do not, from bean, +application with a Spring middle tier and/or data access tier, even if you just want, +to use, for example, the transaction abstraction with JDBC or Hibernate., +configuration. For more information on placeholders, see the javadocs of the]