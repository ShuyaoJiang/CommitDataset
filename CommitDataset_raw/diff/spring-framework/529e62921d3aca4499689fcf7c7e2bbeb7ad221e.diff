[+++ b/build.gradle, +        compile("org.eclipse.jetty:jetty-servlet:8.1.5.v20120716") { dep ->, +            exclude group: 'org.eclipse.jetty.orbit', module: 'javax.servlet', +        }, +        compile("org.eclipse.jetty:jetty-server:8.1.5.v20120716") { dep ->, +            optional dep, +            exclude group: 'org.eclipse.jetty.orbit', module: 'javax.servlet', +++ b/build.gradle, +        compile("org.eclipse.jetty:jetty-servlet:8.1.5.v20120716") { dep ->, +            exclude group: 'org.eclipse.jetty.orbit', module: 'javax.servlet', +        }, +        compile("org.eclipse.jetty:jetty-server:8.1.5.v20120716") { dep ->, +            optional dep, +            exclude group: 'org.eclipse.jetty.orbit', module: 'javax.servlet', +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +, +import org.springframework.util.Assert;, +import org.springframework.web.context.request.async.AsyncWebUtils;, +import org.springframework.web.context.request.async.WebAsyncManager;, +import org.springframework.web.context.request.async.WebAsyncManager.AsyncThreadInitializer;, +	/**, +	 * The default value is "true" so that the filter may re-bind the opened, +	 * {@code Session} to each asynchronously dispatched thread and postpone, +	 * closing it until the very last asynchronous dispatch., +	 */, +	@Override, +	protected boolean shouldFilterAsyncDispatches() {, +		return true;, +	}, +, +		WebAsyncManager asyncManager = AsyncWebUtils.getAsyncManager(request);, +		String key = getAlreadyFilteredAttributeName();, +, +				if (!isAsyncDispatch(request) || !asyncManager.applyAsyncThreadInitializer(key)) {, +					AsyncThreadInitializer initializer = createAsyncThreadInitializer(sessionFactory, sessionHolder);, +					asyncManager.registerAsyncThreadInitializer(key, initializer);, +				}, +			Assert.state(isLastRequestThread(request), "Deferred close mode is not supported on async dispatches");, +					if (isLastRequestThread(request)) {, +				else {, +	private AsyncThreadInitializer createAsyncThreadInitializer(final SessionFactory sessionFactory,, +			final SessionHolder sessionHolder) {, +, +		return new AsyncThreadInitializer() {, +			public void initialize() {, +				TransactionSynchronizationManager.bindResource(sessionFactory, sessionHolder);, +			}, +			public void reset() {, +				TransactionSynchronizationManager.unbindResource(sessionFactory);, +			}, +		};, +	}, +, +++ b/build.gradle, +        compile("org.eclipse.jetty:jetty-servlet:8.1.5.v20120716") { dep ->, +            exclude group: 'org.eclipse.jetty.orbit', module: 'javax.servlet', +        }, +        compile("org.eclipse.jetty:jetty-server:8.1.5.v20120716") { dep ->, +            optional dep, +            exclude group: 'org.eclipse.jetty.orbit', module: 'javax.servlet', +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +, +import org.springframework.util.Assert;, +import org.springframework.web.context.request.async.AsyncWebUtils;, +import org.springframework.web.context.request.async.WebAsyncManager;, +import org.springframework.web.context.request.async.WebAsyncManager.AsyncThreadInitializer;, +	/**, +	 * The default value is "true" so that the filter may re-bind the opened, +	 * {@code Session} to each asynchronously dispatched thread and postpone, +	 * closing it until the very last asynchronous dispatch., +	 */, +	@Override, +	protected boolean shouldFilterAsyncDispatches() {, +		return true;, +	}, +, +		WebAsyncManager asyncManager = AsyncWebUtils.getAsyncManager(request);, +		String key = getAlreadyFilteredAttributeName();, +, +				if (!isAsyncDispatch(request) || !asyncManager.applyAsyncThreadInitializer(key)) {, +					AsyncThreadInitializer initializer = createAsyncThreadInitializer(sessionFactory, sessionHolder);, +					asyncManager.registerAsyncThreadInitializer(key, initializer);, +				}, +			Assert.state(isLastRequestThread(request), "Deferred close mode is not supported on async dispatches");, +					if (isLastRequestThread(request)) {, +				else {, +	private AsyncThreadInitializer createAsyncThreadInitializer(final SessionFactory sessionFactory,, +			final SessionHolder sessionHolder) {, +, +		return new AsyncThreadInitializer() {, +			public void initialize() {, +				TransactionSynchronizationManager.bindResource(sessionFactory, sessionHolder);, +			}, +			public void reset() {, +				TransactionSynchronizationManager.unbindResource(sessionFactory);, +			}, +		};, +	}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewInterceptor.java]