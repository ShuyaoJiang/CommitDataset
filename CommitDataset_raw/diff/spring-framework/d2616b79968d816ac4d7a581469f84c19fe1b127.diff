[+++ b/spring-web/src/main/kotlin/org/springframework/web/client/RestOperationsExtensions.kt, +inline fun <reified T: Any> RestOperations.patchForObject(url: String, request: Any? = null,, +														  vararg uriVariables: Any): T? =, +inline fun <reified T: Any> RestOperations.patchForObject(url: String, request: Any? = null,, +														  uriVariables: Map<String, *>): T? =, +inline fun <reified T: Any> RestOperations.patchForObject(url: URI, request: Any? = null): T? =, +inline fun <reified T: Any> RestOperations.postForObject(url: String, request: Any? = null,, +														 vararg uriVariables: Any): T? =, +inline fun <reified T: Any> RestOperations.postForObject(url: String, request: Any? = null,, +														 uriVariables: Map<String, *>): T? =, +inline fun <reified T: Any> RestOperations.postForObject(url: URI, request: Any? = null): T? =, +inline fun <reified T: Any> RestOperations.postForEntity(url: String, request: Any? = null,, +inline fun <reified T: Any> RestOperations.postForEntity(url: String, request: Any? = null,, +inline fun <reified T: Any> RestOperations.postForEntity(url: URI, request: Any? = null): ResponseEntity<T> =, +		requestEntity: HttpEntity<*>? = null, vararg uriVariables: Any): ResponseEntity<T> =, +		requestEntity: HttpEntity<*>? = null, uriVariables: Map<String, *>): ResponseEntity<T> =, +		requestEntity: HttpEntity<*>? = null): ResponseEntity<T> =, +++ b/spring-web/src/main/kotlin/org/springframework/web/client/RestOperationsExtensions.kt, +inline fun <reified T: Any> RestOperations.patchForObject(url: String, request: Any? = null,, +														  vararg uriVariables: Any): T? =, +inline fun <reified T: Any> RestOperations.patchForObject(url: String, request: Any? = null,, +														  uriVariables: Map<String, *>): T? =, +inline fun <reified T: Any> RestOperations.patchForObject(url: URI, request: Any? = null): T? =, +inline fun <reified T: Any> RestOperations.postForObject(url: String, request: Any? = null,, +														 vararg uriVariables: Any): T? =, +inline fun <reified T: Any> RestOperations.postForObject(url: String, request: Any? = null,, +														 uriVariables: Map<String, *>): T? =, +inline fun <reified T: Any> RestOperations.postForObject(url: URI, request: Any? = null): T? =, +inline fun <reified T: Any> RestOperations.postForEntity(url: String, request: Any? = null,, +inline fun <reified T: Any> RestOperations.postForEntity(url: String, request: Any? = null,, +inline fun <reified T: Any> RestOperations.postForEntity(url: URI, request: Any? = null): ResponseEntity<T> =, +		requestEntity: HttpEntity<*>? = null, vararg uriVariables: Any): ResponseEntity<T> =, +		requestEntity: HttpEntity<*>? = null, uriVariables: Map<String, *>): ResponseEntity<T> =, +		requestEntity: HttpEntity<*>? = null): ResponseEntity<T> =, +++ b/spring-web/src/test/kotlin/org/springframework/web/client/RestOperationsExtensionsTests.kt, +	fun `patchForObject with reified type parameters and String`() {, +	fun `patchForObject with reified type parameters`() {, +		val url = "https://spring.io", +		template.patchForObject<Foo>(url), +		verify(template, times(1)).patchForObject(url, null, Foo::class.java), +	}, +, +	@Test, +	fun `postForObject with reified type parameters and String`() {, +	fun `postForObject with reified type parameters`() {, +		val url = "https://spring.io", +		template.postForObject<Foo>(url), +		verify(template, times(1)).postForObject(url, null, Foo::class.java), +	}, +, +	@Test, +	fun `postForEntity with reified type parameters and String`() {, +	fun `postForEntity with reified type parameters`() {, +		val url = "https://spring.io", +		template.postForEntity<Foo>(url), +		verify(template, times(1)).postForEntity(url, null, Foo::class.java), +	}, +, +	@Test, +	fun `exchange with reified type parameters, String, HttpMethod and HttpEntity`() {, +	fun `exchange with reified type parameters, String and HttpMethod`() {, +		val url = "https://spring.io", +		val method = HttpMethod.GET, +		template.exchange<List<Foo>>(url, method), +		verify(template, times(1)).exchange(url, method, null,, +				object : ParameterizedTypeReference<List<Foo>>() {}), +	}, +, +	@Test, +	fun `exchange with reified type parameters, String and HttpEntity`() {]