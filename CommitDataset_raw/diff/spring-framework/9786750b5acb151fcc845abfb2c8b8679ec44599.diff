[+++ b/spring-web/src/test/java/org/springframework/web/method/MvcAnnotationPredicates.java, +import org.springframework.web.bind.annotation.RequestAttribute;, +	public static RequestAttributePredicate requestAttribute() {, +		return new RequestAttributePredicate();, +	}, +, +	public static class RequestAttributePredicate implements Predicate<MethodParameter> {, +, +		private String name;, +, +		private boolean required = true;, +, +, +		public RequestAttributePredicate name(String name) {, +			this.name = name;, +			return this;, +		}, +, +		public RequestAttributePredicate noName() {, +			this.name = "";, +			return this;, +		}, +, +		public RequestAttributePredicate notRequired() {, +			this.required = false;, +			return this;, +		}, +, +, +		@Override, +		public boolean test(MethodParameter parameter) {, +			RequestAttribute annotation = parameter.getParameterAnnotation(RequestAttribute.class);, +			return annotation != null &&, +					(this.name == null || annotation.name().equals(this.name)) &&, +					annotation.required() == this.required;, +		}, +	}, +, +++ b/spring-web/src/test/java/org/springframework/web/method/MvcAnnotationPredicates.java, +import org.springframework.web.bind.annotation.RequestAttribute;, +	public static RequestAttributePredicate requestAttribute() {, +		return new RequestAttributePredicate();, +	}, +, +	public static class RequestAttributePredicate implements Predicate<MethodParameter> {, +, +		private String name;, +, +		private boolean required = true;, +, +, +		public RequestAttributePredicate name(String name) {, +			this.name = name;, +			return this;, +		}, +, +		public RequestAttributePredicate noName() {, +			this.name = "";, +			return this;, +		}, +, +		public RequestAttributePredicate notRequired() {, +			this.required = false;, +			return this;, +		}, +, +, +		@Override, +		public boolean test(MethodParameter parameter) {, +			RequestAttribute annotation = parameter.getParameterAnnotation(RequestAttribute.class);, +			return annotation != null &&, +					(this.name == null || annotation.name().equals(this.name)) &&, +					annotation.required() == this.required;, +		}, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestAttributeMethodArgumentResolver.java, +import reactor.core.publisher.Mono;, +, +import org.springframework.core.ReactiveAdapter;, +		return param.hasParameterAnnotation(RequestAttribute.class);, +		Object value = exchange.getAttribute(name);, +		ReactiveAdapter toAdapter = getAdapterRegistry().getAdapter(parameter.getParameterType());, +		if (toAdapter != null) {, +			if (value == null) {, +				Assert.isTrue(toAdapter.supportsEmpty(),, +						() -> "No request attribute '" + name + "' and target type " +, +								parameter.getGenericParameterType() + " doesn't support empty values.");, +				return toAdapter.fromPublisher(Mono.empty());, +			}, +			if (parameter.getParameterType().isAssignableFrom(value.getClass())) {, +				return value;, +			}, +			ReactiveAdapter fromAdapter = getAdapterRegistry().getAdapter(value.getClass());, +			Assert.isTrue(fromAdapter != null,, +					() -> getClass().getSimpleName() + " doesn't support " +, +							"reactive type wrapper: " + parameter.getGenericParameterType());, +			return toAdapter.fromPublisher(fromAdapter.toPublisher(value));, +		}, +		return value;]