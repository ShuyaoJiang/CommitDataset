[+++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, + * <p>In addition the {@code exchange} and {@code execute} methods are generalized versions of, + * the above methods and can be used to support additional, less frequent combinations (e.g., + * HTTP PATCH, HTTP PUT with response body, etc.). Note however that the underlying HTTP, + * library used must also support the desired combination., + * <p>For each HTTP method there are 3 variants -- two accept a URI template string, + * and URI variables (array or map) while a third accepts a {@link URI}., + * Note that for URI templates it is assumed encoding is necessary, e.g., + * {@code restTemplate.getForObject("http://example.com/hotel list")} becomes, + * {@code "http://example.com/hotel%20list"}. This also means if the URI template, + * or URI variables are already encoded, double encoding will occur, e.g., + * {@code http://example.com/hotel%20list} becomes, + * {@code http://example.com/hotel%2520list}). To avoid that use a {@code URI} method, + * variant to provide (or re-use) a previously encoded URI. To prepare such an URI, + * with full control over encoding, consider using, + * {@link org.springframework.web.util.UriComponentsBuilder}., + * <p>Internally the template uses {@link HttpMessageConverter} instances to, + * convert HTTP messages to and from POJOs. Converters for the main mime types, + * are registered by default but you can also register additional converters, + * via {@link #setMessageConverters}., + * <p>This template uses a, + * {@link org.springframework.http.client.SimpleClientHttpRequestFactory} and a, + * {@link DefaultResponseErrorHandler} as default strategies for creating HTTP, + * connections or handling HTTP errors, respectively. These defaults can be overridden, + * through {@link #setRequestFactory} and {@link #setErrorHandler} respectively.]