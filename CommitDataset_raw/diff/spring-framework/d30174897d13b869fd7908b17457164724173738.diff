[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpModulus.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.asm.MethodVisitor;, +import org.springframework.expression.spel.CodeFlow;, +				if (leftNumber instanceof Double && rightNumber instanceof Double) {, +					this.exitTypeDescriptor = "D";, +				}, +				if (leftNumber instanceof Float && rightNumber instanceof Float) {, +					this.exitTypeDescriptor = "F";, +				}, +				if (leftNumber instanceof Long && rightNumber instanceof Long) {, +					this.exitTypeDescriptor = "J";, +				}, +			if (leftNumber instanceof Integer && rightNumber instanceof Integer) {, +				this.exitTypeDescriptor = "I";, +			}, +	@Override, +	public boolean isCompilable() {, +		if (!getLeftOperand().isCompilable()) {, +			return false;, +		}, +		if (this.children.length>1) {, +			 if (!getRightOperand().isCompilable()) {, +				 return false;, +			 }, +		}, +		return this.exitTypeDescriptor!=null;, +	}, +	, +	@Override, +	public void generateCode(MethodVisitor mv, CodeFlow codeflow) {, +		getLeftOperand().generateCode(mv, codeflow);, +		String leftdesc = getLeftOperand().getExitDescriptor();, +		if (!CodeFlow.isPrimitive(leftdesc)) {, +			CodeFlow.insertUnboxInsns(mv, this.exitTypeDescriptor.charAt(0), leftdesc);, +		}, +		if (this.children.length > 1) {, +			codeflow.enterCompilationScope();, +			getRightOperand().generateCode(mv, codeflow);, +			String rightdesc = getRightOperand().getExitDescriptor();, +			codeflow.exitCompilationScope();, +			if (!CodeFlow.isPrimitive(rightdesc)) {, +				CodeFlow.insertUnboxInsns(mv, this.exitTypeDescriptor.charAt(0), rightdesc);, +			}, +			switch (this.exitTypeDescriptor.charAt(0)) {, +				case 'I':, +					mv.visitInsn(IREM);, +					break;, +				case 'J':, +					mv.visitInsn(LREM);, +					break;, +				case 'F': , +					mv.visitInsn(FREM);, +					break;, +				case 'D':, +					mv.visitInsn(DREM);, +					break;				, +				default:, +					throw new IllegalStateException("Unrecognized exit descriptor: '"+this.exitTypeDescriptor+"'");			, +			}, +		}, +		codeflow.pushDescriptor(this.exitTypeDescriptor);, +	}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpModulus.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.asm.MethodVisitor;, +import org.springframework.expression.spel.CodeFlow;, +				if (leftNumber instanceof Double && rightNumber instanceof Double) {, +					this.exitTypeDescriptor = "D";, +				}, +				if (leftNumber instanceof Float && rightNumber instanceof Float) {, +					this.exitTypeDescriptor = "F";, +				}, +				if (leftNumber instanceof Long && rightNumber instanceof Long) {, +					this.exitTypeDescriptor = "J";, +				}, +			if (leftNumber instanceof Integer && rightNumber instanceof Integer) {, +				this.exitTypeDescriptor = "I";, +			}, +	@Override, +	public boolean isCompilable() {, +		if (!getLeftOperand().isCompilable()) {, +			return false;, +		}, +		if (this.children.length>1) {, +			 if (!getRightOperand().isCompilable()) {, +				 return false;, +			 }, +		}, +		return this.exitTypeDescriptor!=null;, +	}, +	, +	@Override, +	public void generateCode(MethodVisitor mv, CodeFlow codeflow) {, +		getLeftOperand().generateCode(mv, codeflow);, +		String leftdesc = getLeftOperand().getExitDescriptor();, +		if (!CodeFlow.isPrimitive(leftdesc)) {, +			CodeFlow.insertUnboxInsns(mv, this.exitTypeDescriptor.charAt(0), leftdesc);, +		}]