[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, +	 * <p>Sometimes we need to be able to avoid this happening, e.g. if it will lead to, +	 * a circular reference or if the existing target instance needs to be preserved., +	 * This implementation returns {@code false} unless the bean name indicates an, +	 * "original instance" according to {@code AutowireCapableBeanFactory} conventions., +	 * @see org.springframework.beans.factory.config.AutowireCapableBeanFactory#ORIGINAL_INSTANCE_SUFFIX, +		return AutoProxyUtils.isOriginalInstance(beanName, beanClass);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, +	 * <p>Sometimes we need to be able to avoid this happening, e.g. if it will lead to, +	 * a circular reference or if the existing target instance needs to be preserved., +	 * This implementation returns {@code false} unless the bean name indicates an, +	 * "original instance" according to {@code AutowireCapableBeanFactory} conventions., +	 * @see org.springframework.beans.factory.config.AutowireCapableBeanFactory#ORIGINAL_INSTANCE_SUFFIX, +		return AutoProxyUtils.isOriginalInstance(beanName, beanClass);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractBeanFactoryAwareAdvisingPostProcessor.java, + * Copyright 2002-2018 the original author or authors., +	@Override, +	protected boolean isEligible(Object bean, String beanName) {, +		return (!AutoProxyUtils.isOriginalInstance(beanName, bean.getClass()) &&, +				super.isEligible(bean, beanName));, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, +	 * <p>Sometimes we need to be able to avoid this happening, e.g. if it will lead to, +	 * a circular reference or if the existing target instance needs to be preserved., +	 * This implementation returns {@code false} unless the bean name indicates an, +	 * "original instance" according to {@code AutowireCapableBeanFactory} conventions., +	 * @see org.springframework.beans.factory.config.AutowireCapableBeanFactory#ORIGINAL_INSTANCE_SUFFIX, +		return AutoProxyUtils.isOriginalInstance(beanName, beanClass);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractBeanFactoryAwareAdvisingPostProcessor.java, + * Copyright 2002-2018 the original author or authors., +	@Override, +	protected boolean isEligible(Object bean, String beanName) {, +		return (!AutoProxyUtils.isOriginalInstance(beanName, bean.getClass()) &&, +				super.isEligible(bean, beanName));, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AutoProxyUtils.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.beans.factory.config.AutowireCapableBeanFactory;, +import org.springframework.util.StringUtils;, +	public static boolean shouldProxyTargetClass(, +			ConfigurableListableBeanFactory beanFactory, @Nullable String beanName) {, +, +	public static Class<?> determineTargetClass(, +			ConfigurableListableBeanFactory beanFactory, @Nullable String beanName) {, +, +	static void exposeTargetClass(, +			ConfigurableListableBeanFactory beanFactory, @Nullable String beanName, Class<?> targetClass) {, +	/**, +	 * Determine whether the given bean name indicates an "original instance", +	 * according to {@link AutowireCapableBeanFactory#ORIGINAL_INSTANCE_SUFFIX},, +	 * skipping any proxy attempts for it., +	 * @param beanName the name of the bean, +	 * @param beanClass the corresponding bean class, +	 * @since 5.1, +	 * @see AutowireCapableBeanFactory#ORIGINAL_INSTANCE_SUFFIX, +	 */, +	static boolean isOriginalInstance(String beanName, Class<?> beanClass) {, +		if (!StringUtils.hasLength(beanName) || beanName.length() !=, +				beanClass.getName().length() + AutowireCapableBeanFactory.ORIGINAL_INSTANCE_SUFFIX.length()) {, +			return false;, +		}, +		return (beanName.startsWith(beanClass.getName()) &&, +				beanName.endsWith(AutowireCapableBeanFactory.ORIGINAL_INSTANCE_SUFFIX));, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, +	 * <p>Sometimes we need to be able to avoid this happening, e.g. if it will lead to, +	 * a circular reference or if the existing target instance needs to be preserved., +	 * This implementation returns {@code false} unless the bean name indicates an, +	 * "original instance" according to {@code AutowireCapableBeanFactory} conventions., +	 * @see org.springframework.beans.factory.config.AutowireCapableBeanFactory#ORIGINAL_INSTANCE_SUFFIX, +		return AutoProxyUtils.isOriginalInstance(beanName, beanClass);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractBeanFactoryAwareAdvisingPostProcessor.java, + * Copyright 2002-2018 the original author or authors., +	@Override, +	protected boolean isEligible(Object bean, String beanName) {, +		return (!AutoProxyUtils.isOriginalInstance(beanName, bean.getClass()) &&, +				super.isEligible(bean, beanName));, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AutoProxyUtils.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.beans.factory.config.AutowireCapableBeanFactory;, +import org.springframework.util.StringUtils;, +	public static boolean shouldProxyTargetClass(, +			ConfigurableListableBeanFactory beanFactory, @Nullable String beanName) {, +, +	public static Class<?> determineTargetClass(, +			ConfigurableListableBeanFactory beanFactory, @Nullable String beanName) {, +, +	static void exposeTargetClass(, +			ConfigurableListableBeanFactory beanFactory, @Nullable String beanName, Class<?> targetClass) {, +	/**, +	 * Determine whether the given bean name indicates an "original instance", +	 * according to {@link AutowireCapableBeanFactory#ORIGINAL_INSTANCE_SUFFIX},, +	 * skipping any proxy attempts for it., +	 * @param beanName the name of the bean, +	 * @param beanClass the corresponding bean class]