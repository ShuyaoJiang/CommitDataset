[+++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractDataBufferDecoder.java, +		return DataBufferUtils.join(inputStream), +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractDataBufferDecoder.java, +		return DataBufferUtils.join(inputStream), +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferFactory.java, +	 * Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together., +	 * Depending on the implementation, the returned buffer may be a single buffer containing all, +	 * data of the provided buffers, or it may be a true composite that contains references to the, +	 * buffers., +	 * @return a buffer that is composed from the {@code dataBuffers} argument, +	 * @since 5.0.3, +	DataBuffer join(List<? extends DataBuffer> dataBuffers);, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractDataBufferDecoder.java, +		return DataBufferUtils.join(inputStream), +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferFactory.java, +	 * Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together., +	 * Depending on the implementation, the returned buffer may be a single buffer containing all, +	 * data of the provided buffers, or it may be a true composite that contains references to the, +	 * buffers., +	 * @return a buffer that is composed from the {@code dataBuffers} argument, +	 * @since 5.0.3, +	DataBuffer join(List<? extends DataBuffer> dataBuffers);, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +	 * Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together., +	 * Depending on the {@link DataBuffer} implementation, the returned buffer may be a single, +	 * buffer containing all data of the provided buffers, or it may be a true composite that, +	 * contains references to the buffers., +	 * @param dataBuffers the data buffers that are to be composed, +	 * @return a buffer that is composed from the {@code dataBuffers} argument, +	 * @since 5.0.3, +	public static Mono<DataBuffer> join(Publisher<? extends DataBuffer> dataBuffers) {, +		Assert.notNull(dataBuffers, "'dataBuffers' must not be null");, +		return Flux.from(dataBuffers), +				.collectList(), +				.filter(list -> !list.isEmpty()), +				.map(list -> {, +					DataBufferFactory bufferFactory = list.get(0).factory();, +					return bufferFactory.join(list);, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractDataBufferDecoder.java, +		return DataBufferUtils.join(inputStream), +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferFactory.java, +	 * Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together., +	 * Depending on the implementation, the returned buffer may be a single buffer containing all, +	 * data of the provided buffers, or it may be a true composite that contains references to the, +	 * buffers., +	 * @return a buffer that is composed from the {@code dataBuffers} argument, +	 * @since 5.0.3, +	DataBuffer join(List<? extends DataBuffer> dataBuffers);, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +	 * Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together., +	 * Depending on the {@link DataBuffer} implementation, the returned buffer may be a single, +	 * buffer containing all data of the provided buffers, or it may be a true composite that, +	 * contains references to the buffers., +	 * @param dataBuffers the data buffers that are to be composed, +	 * @return a buffer that is composed from the {@code dataBuffers} argument, +	 * @since 5.0.3, +	public static Mono<DataBuffer> join(Publisher<? extends DataBuffer> dataBuffers) {, +		Assert.notNull(dataBuffers, "'dataBuffers' must not be null");, +		return Flux.from(dataBuffers), +				.collectList(), +				.filter(list -> !list.isEmpty()), +				.map(list -> {, +					DataBufferFactory bufferFactory = list.get(0).factory();, +					return bufferFactory.join(list);, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBufferFactory.java, +	public DataBuffer join(List<? extends DataBuffer> dataBuffers) {, +		DataBuffer result = dataBuffers.stream(), +				.map(o -> (DataBuffer) o), +		dataBuffers.forEach(DataBufferUtils::release);, +		return result;, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractDataBufferDecoder.java, +		return DataBufferUtils.join(inputStream), +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferFactory.java, +	 * Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together., +	 * Depending on the implementation, the returned buffer may be a single buffer containing all, +	 * data of the provided buffers, or it may be a true composite that contains references to the, +	 * buffers., +	 * @return a buffer that is composed from the {@code dataBuffers} argument, +	 * @since 5.0.3, +	DataBuffer join(List<? extends DataBuffer> dataBuffers);, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +	 * Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together., +	 * Depending on the {@link DataBuffer} implementation, the returned buffer may be a single, +	 * buffer containing all data of the provided buffers, or it may be a true composite that, +	 * contains references to the buffers., +	 * @param dataBuffers the data buffers that are to be composed, +	 * @return a buffer that is composed from the {@code dataBuffers} argument, +	 * @since 5.0.3, +	public static Mono<DataBuffer> join(Publisher<? extends DataBuffer> dataBuffers) {, +		Assert.notNull(dataBuffers, "'dataBuffers' must not be null");, +		return Flux.from(dataBuffers), +				.collectList(), +				.filter(list -> !list.isEmpty()), +				.map(list -> {, +					DataBufferFactory bufferFactory = list.get(0).factory();, +					return bufferFactory.join(list);, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBufferFactory.java, +	public DataBuffer join(List<? extends DataBuffer> dataBuffers) {, +		DataBuffer result = dataBuffers.stream(), +				.map(o -> (DataBuffer) o)]