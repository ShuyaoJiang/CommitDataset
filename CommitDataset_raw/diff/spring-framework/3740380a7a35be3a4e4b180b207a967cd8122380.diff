[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/package-info.java, + * SPI to implement Converters for the type conversion system., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/package-info.java, + * SPI to implement Converters for the type conversion system., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/package-info.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/package-info.java, + * SPI to implement Converters for the type conversion system., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/package-info.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/package-info.java, + * Default implementation of the type conversion system., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/package-info.java, + * SPI to implement Converters for the type conversion system., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/package-info.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/package-info.java, + * Default implementation of the type conversion system., +++ b/org.springframework.jms/src/main/java/org/springframework/jms/support/converter/MarshallingMessageConverter.java, + * Copyright 2002-2010 the original author or authors., +		Assert.notNull(marshaller, "Marshaller must not be null");, +		Assert.notNull(marshaller, "Marshaller must not be null");, +		Assert.notNull(unmarshaller, "Unmarshaller must not be null");, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/package-info.java, + * SPI to implement Converters for the type conversion system., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/package-info.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/package-info.java, + * Default implementation of the type conversion system., +++ b/org.springframework.jms/src/main/java/org/springframework/jms/support/converter/MarshallingMessageConverter.java, + * Copyright 2002-2010 the original author or authors., +		Assert.notNull(marshaller, "Marshaller must not be null");, +		Assert.notNull(marshaller, "Marshaller must not be null");, +		Assert.notNull(unmarshaller, "Unmarshaller must not be null");, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/xml/MarshallingHttpMessageConverter.java, + * Implementation of {@link org.springframework.http.converter.HttpMessageConverter HttpMessageConverter}, + * that can read and write XML using Spring's {@link Marshaller} and {@link Unmarshaller} abstractions., + * <p>This converter requires a {@code Marshaller} and {@code Unmarshaller} before it can be used., + * These can be injected by the {@linkplain #MarshallingHttpMessageConverter(Marshaller) constructor}, + * or {@linkplain #setMarshaller(Marshaller) bean properties}., + * <p>By default, this converter supports {@code text/xml} and {@code application/xml}. This can be, + * overridden by setting the {@link #setSupportedMediaTypes(java.util.List) supportedMediaTypes} property., +	 * Construct a new {@code MarshallingHttpMessageConverter} with no {@link Marshaller} or, +	 * {@link Unmarshaller} set. The Marshaller and Unmarshaller must be set after construction, +	 * by invoking {@link #setMarshaller(Marshaller)} and {@link #setUnmarshaller(Unmarshaller)} ., +	 * Construct a new {@code MarshallingMessageConverter} with the given {@link Marshaller} set., +	 * <p>If the given {@link Marshaller} also implements the {@link Unmarshaller} interface,, +	 * it is used for both marshalling and unmarshalling. Otherwise, an exception is thrown., +	 * <p>Note that all {@code Marshaller} implementations in Spring also implement the, +		Assert.notNull(marshaller, "Marshaller must not be null");, +	 * Construct a new <code>MarshallingMessageConverter</code> with the given, +	 * {@code Marshaller} and {@code Unmarshaller}., +		Assert.notNull(marshaller, "Marshaller must not be null");, +		Assert.notNull(unmarshaller, "Unmarshaller must not be null");, +]