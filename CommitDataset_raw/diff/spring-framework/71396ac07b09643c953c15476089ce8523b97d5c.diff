[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java, + * Copyright 2002-2011 the original author or authors., + * <code>TestExecutionListener</code> that provides support for executing, + * tests within transactions by using the, + * Changes to the database during a test that is run with &#064;Transactional will be, + * database during a test that is run with &#064;NotTransactional will <strong>not</strong>, + * be run within a transaction. Test methods that are not annotated with either, + * &#064;Transactional (at the class or method level) or &#064;NotTransactional, + * will not be run within a transaction., + * When executing transactional tests, it is sometimes useful to be able to execute, +	private final Map<Method, TransactionContext> transactionContextCache = Collections.synchronizedMap(new IdentityHashMap<Method, TransactionContext>());, +, +			throw new IllegalStateException("Cannot start new transaction without ending existing transaction: ", +					+ "Invoke endTransaction() before startNewTransaction().");, +		TransactionAttribute transactionAttribute = this.attributeSource.getTransactionAttribute(testMethod,, +			testContext.getTestClass());, +, +				logger.debug("Explicit transaction definition [" + transactionDefinition + "] found for test context [", +						+ testContext + "]");, +				// Use autowire-capable factory in order to support extended, +				// qualifier matching (only exposed on the internal BeanFactory,, +				// not on the ApplicationContext)., +					logger.debug("Executing @AfterTransaction method [" + method + "] for test context [" + testContext, +							+ "]");, +				logger.error("Exception encountered while executing @AfterTransaction method [" + method, +						+ "] for test context [" + testContext + "]", targetException);, +				logger.error("Exception encountered while executing @AfterTransaction method [" + method, +						+ "] for test context [" + testContext + "]", ex);, +			logger.info("Began transaction (" + this.transactionsStarted + "): transaction manager [", +					+ txContext.transactionManager + "]; rollback [" + isRollback(testContext) + "]");, +			logger.trace("Ending transaction for test context [" + testContext + "]; transaction manager [", +					+ txContext.transactionStatus + "]; rollback [" + rollback + "]");, +			logger.info((rollback ? "Rolled back" : "Committed"), +					+ " transaction after test execution for test context [" + testContext + "]");, +				logger.warn("Caught exception while retrieving transaction manager with bean name [" + tmName, +						+ "] for test context [" + testContext + "]", ex);, +				logger.debug("Method-level @Rollback(" + rollbackOverride + ") overrides default rollback [" + rollback, +						+ "] for test context [" + testContext + "]");, +				logger.debug("No method-level @Rollback override: using default rollback [" + rollback, +						+ "] for test context [" + testContext + "]");, +			TransactionConfigurationAttributes configAttributes = new TransactionConfigurationAttributes(, +				transactionManagerName, defaultRollback);, +				logger.debug("Retrieved TransactionConfigurationAttributes [" + configAttributes + "] for class [", +						+ clazz + "]");, +, +, +		public TransactionContext(PlatformTransactionManager transactionManager,, +				TransactionDefinition transactionDefinition) {]