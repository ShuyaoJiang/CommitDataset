[+++ b/build.gradle, +		maven { url "https://repo.spring.io/snapshot" } // for reactor 2.0.1 snapshot, +		optional("io.projectreactor:reactor-core:${reactorVersion}"), +++ b/build.gradle, +		maven { url "https://repo.spring.io/snapshot" } // for reactor 2.0.1 snapshot, +		optional("io.projectreactor:reactor-core:${reactorVersion}"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/Reactor2StompCodec.java, + * Copyright 2002-2015 the original author or authors., +++ b/build.gradle, +		maven { url "https://repo.spring.io/snapshot" } // for reactor 2.0.1 snapshot, +		optional("io.projectreactor:reactor-core:${reactorVersion}"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/Reactor2StompCodec.java, + * Copyright 2002-2015 the original author or authors., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/Reactor2TcpStompClient.java, +import org.springframework.messaging.tcp.reactor.Reactor2TcpClient.TcpClientSpecFactory;, +import reactor.io.net.Spec.TcpClientSpec;, +import java.util.List;, +		ConfigurationReader reader = new StompClientDispatcherConfigReader();, +		Environment environment = new Environment(reader).assignErrorJournal();, +		StompTcpClientSpecFactory factory = new StompTcpClientSpecFactory(environment, host, port);, +		this.tcpClient = new Reactor2TcpClient<byte[]>(factory);, +			List<DispatcherConfiguration> configList = Arrays.<DispatcherConfiguration>asList(config);, +			return new ReactorConfiguration(configList, dispatcherName, new Properties());, +		}, +	}, +, +	private static class StompTcpClientSpecFactory, +			implements TcpClientSpecFactory<Message<byte[]>, Message<byte[]>> {, +, +		private final Environment environment;, +, +		private final String host;, +, +		private final int port;, +, +		public StompTcpClientSpecFactory(Environment environment, String host, int port) {, +			this.environment = environment;, +			this.host = host;, +			this.port = port;, +		}, +, +		@Override, +		public TcpClientSpec<Message<byte[]>, Message<byte[]>> apply(, +				TcpClientSpec<Message<byte[]>, Message<byte[]>> tcpClientSpec) {, +, +			return tcpClientSpec, +					.codec(new Reactor2StompCodec(new StompEncoder(), new StompDecoder())), +					.env(this.environment), +					.dispatcher(this.environment.getCachedDispatchers("StompClient").get()), +					.connect(this.host, this.port);, +++ b/build.gradle, +		maven { url "https://repo.spring.io/snapshot" } // for reactor 2.0.1 snapshot, +		optional("io.projectreactor:reactor-core:${reactorVersion}"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/Reactor2StompCodec.java, + * Copyright 2002-2015 the original author or authors., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/Reactor2TcpStompClient.java, +import org.springframework.messaging.tcp.reactor.Reactor2TcpClient.TcpClientSpecFactory;, +import reactor.io.net.Spec.TcpClientSpec;, +import java.util.List;, +		ConfigurationReader reader = new StompClientDispatcherConfigReader();, +		Environment environment = new Environment(reader).assignErrorJournal();, +		StompTcpClientSpecFactory factory = new StompTcpClientSpecFactory(environment, host, port);, +		this.tcpClient = new Reactor2TcpClient<byte[]>(factory);, +			List<DispatcherConfiguration> configList = Arrays.<DispatcherConfiguration>asList(config);, +			return new ReactorConfiguration(configList, dispatcherName, new Properties());, +		}, +	}, +, +	private static class StompTcpClientSpecFactory, +			implements TcpClientSpecFactory<Message<byte[]>, Message<byte[]>> {, +, +		private final Environment environment;, +, +		private final String host;, +, +		private final int port;, +, +		public StompTcpClientSpecFactory(Environment environment, String host, int port) {, +			this.environment = environment;, +			this.host = host;, +			this.port = port;, +		}, +, +		@Override, +		public TcpClientSpec<Message<byte[]>, Message<byte[]>> apply(, +				TcpClientSpec<Message<byte[]>, Message<byte[]>> tcpClientSpec) {, +, +			return tcpClientSpec, +					.codec(new Reactor2StompCodec(new StompEncoder(), new StompDecoder())), +					.env(this.environment), +					.dispatcher(this.environment.getCachedDispatchers("StompClient").get()), +					.connect(this.host, this.port);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/AbstractPromiseToListenableFutureAdapter.java, +				}, +				catch (Throwable t) {, +++ b/build.gradle, +		maven { url "https://repo.spring.io/snapshot" } // for reactor 2.0.1 snapshot, +		optional("io.projectreactor:reactor-core:${reactorVersion}"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/Reactor2StompCodec.java, + * Copyright 2002-2015 the original author or authors.]