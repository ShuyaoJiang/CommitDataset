[+++ b/spring-test/src/main/java/org/springframework/test/context/support/AnnotationConfigContextLoaderUtils.java, +import org.springframework.test.context.SmartContextLoader;, + * Utility methods for {@link SmartContextLoader SmartContextLoaders} that deal, + * with annotated classes (e.g., {@link Configuration @Configuration} classes)., +++ b/spring-test/src/main/java/org/springframework/test/context/support/AnnotationConfigContextLoaderUtils.java, +import org.springframework.test.context.SmartContextLoader;, + * Utility methods for {@link SmartContextLoader SmartContextLoaders} that deal, + * with annotated classes (e.g., {@link Configuration @Configuration} classes)., +++ b/spring-test/src/main/java/org/springframework/test/context/web/AbstractGenericWebContextLoader.java, +, + * Abstract, generic extension of {@link AbstractContextLoader} that loads a, + * {@link GenericWebApplicationContext}., + *, + * <p>If instances of concrete subclasses are invoked via the, + * {@link org.springframework.test.context.SmartContextLoader SmartContextLoader}, + * SPI, the context will be loaded from the {@link MergedContextConfiguration}, + * provided to {@link #loadContext(MergedContextConfiguration)}. In such cases, a, + * {@code SmartContextLoader} will decide whether to load the context from, + * <em>locations</em> or <em>annotated classes</em>. Note that {@code, + * AbstractGenericWebContextLoader} does not support the {@code, + * loadContext(String... locations)} method from the legacy, + * {@link org.springframework.test.context.ContextLoader ContextLoader} SPI., + *, + * <p>Concrete subclasses must provide an appropriate implementation of, + * {@link #loadBeanDefinitions()}., + * @see #loadContext(MergedContextConfiguration), + * @see #loadContext(String...), +	 * Load a Spring {@link WebApplicationContext} from the supplied, +	 * {@link MergedContextConfiguration}., +	 * <p>Implementation details:, +	 *, +	 * <ul>, +	 * <li>Creates a {@link GenericWebApplicationContext} instance.</li>, +	 * <li>Delegates to {@link #configureWebResources()} to create the, +	 * {@link MockServletContext} and set it in the {@code WebApplicationContext}.</li>, +	 * <li>Calls {@link #prepareContext()} to allow for customizing the context, +	 * before bean definitions are loaded.</li>, +	 * <li>Calls {@link #customizeBeanFactory()} to allow for customizing the, +	 * context's {@code DefaultListableBeanFactory}.</li>, +	 * <li>Delegates to {@link #loadBeanDefinitions()} to populate the context, +	 * from the locations or classes in the supplied {@code MergedContextConfiguration}.</li>, +	 * <li>Delegates to {@link AnnotationConfigUtils} for, +	 * {@linkplain AnnotationConfigUtils#registerAnnotationConfigProcessors registering}, +	 * annotation configuration processors.</li>, +	 * <li>Calls {@link #customizeContext()} to allow for customizing the context, +	 * before it is refreshed.</li>, +	 * <li>{@link ConfigurableApplicationContext#refresh Refreshes} the, +	 * context and registers a JVM shutdown hook for it.</li>, +	 * </ul>, +	 *, +	 * @return a new web application context, +	 * @see org.springframework.test.context.SmartContextLoader#loadContext(MergedContextConfiguration), +	 * @see GenericWebApplicationContext, +	 * Configures web resources for the supplied web application context., +	 *, +	 * <p>Implementation details:, +	 *, +	 * <ul>, +	 * <li>The resource base path is retrieved from the supplied, +	 * {@code WebMergedContextConfiguration}.</li>, +	 * <li>A {@link ResourceLoader} is instantiated for the {@link MockServletContext}:, +	 * if the resource base path is prefixed with "{@code classpath:}", a, +	 * {@link DefaultResourceLoader} will be used; otherwise, a, +	 * {@link FileSystemResourceLoader} will be used.</li>, +	 * <li>A {@code MockServletContext} will be created using the resource base, +	 * path and resource loader.</li>, +	 * <li>The supplied {@link GenericWebApplicationContext} is then stored in, +	 * the {@code MockServletContext} under the, +	 * {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} key.</li>, +	 * <li>Finally, the {@code MockServletContext} is set in the, +	 * {@code WebApplicationContext}.</li> , +	 *, +	 * @param context the web application context for which to configure the web, +	 * resources, +	 * @param webMergedConfig the merged context configuration to use to load the, +	 * web application context, +	 * Customize the internal bean factory of the {@code WebApplicationContext}, +	 * created by this context loader., +	 *, +	 * <p>The default implementation is empty but can be overridden in subclasses, +	 * to customize <code>DefaultListableBeanFactory</code>'s standard settings., +	 *, +	 * @param beanFactory the bean factory created by this context loader, +	 * @param webMergedConfig the merged context configuration to use to load the, +	 * web application context, +	 * @see #loadContext(MergedContextConfiguration), +	 * @see DefaultListableBeanFactory#setAllowBeanDefinitionOverriding, +	 * @see DefaultListableBeanFactory#setAllowEagerClassLoading, +	 * @see DefaultListableBeanFactory#setAllowCircularReferences, +	 * @see DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping, +	 * Load bean definitions into the supplied {@link GenericWebApplicationContext context}, +	 * from the locations or classes in the supplied <code>WebMergedContextConfiguration</code>., +	 *, +	 * <p>Concrete subclasses must provide an appropriate implementation., +	 *, +	 * @param context the context into which the bean definitions should be loaded, +	 * @param webMergedConfig the merged context configuration to use to load the, +	 * web application context, +	 * @see #loadContext(MergedContextConfiguration), +	 * Customize the {@link GenericWebApplicationContext} created by this context]