[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ArrayGenericConverter.java, +import java.util.Arrays;, +import java.util.Collection;, +import org.springframework.core.CollectionFactory;, +		return sourceType.isArray() || targetType.isArray();		, +		if (isArrayToArray(sourceType, targetType)) {, +			return convertArrayToArray(source, sourceType, targetType);, +		} else if (isArrayToCollection(sourceType, targetType)) {, +			return convertArrayToCollection(source, sourceType, targetType);, +		} else if (isCollectionToArray(sourceType, targetType)) {, +			return convertCollectionToArray(source, sourceType, targetType);, +		} else if (isArrayToObject(sourceType, targetType)) {, +			return convertArrayToObject(source, sourceType, targetType);			, +		} else {, +			return convertObjectToArray(source, sourceType, targetType);, +		}, +	}, +	, +	private boolean isArrayToArray(TypeDescriptor sourceType, TypeDescriptor targetType) {, +		return sourceType.isArray() && targetType.isArray();, +	}, +, +	private Object convertArrayToArray(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +		TypeDescriptor targetElementType = targetType.getElementTypeDescriptor();, +	private boolean isArrayToCollection(TypeDescriptor sourceType, TypeDescriptor targetType) {, +		return sourceType.isArray() && targetType.isCollection();, +	}, +, +	private Object convertArrayToCollection(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +		int length = Array.getLength(source);, +		Collection collection = CollectionFactory.createCollection(targetType.getType(), length);, +		TypeDescriptor targetElementType = targetType.getElementTypeDescriptor();, +		if (targetElementType == TypeDescriptor.NULL) {, +			for (int i = 0; i < length; i++) {, +				collection.add(Array.get(source, i));, +			}, +		} else {, +			TypeDescriptor sourceElementType = sourceType.getElementTypeDescriptor();, +			GenericConverter converter = conversionService.getConverter(sourceElementType, targetElementType);, +			for (int i = 0; i < length; i++) {, +				collection.add(converter.convert(Array.get(source, i), sourceElementType, targetElementType));, +			}, +		}, +		return collection;, +	}, +, +	private boolean isCollectionToArray(TypeDescriptor sourceType, TypeDescriptor targetType) {, +		return sourceType.isCollection() && targetType.isArray();, +	}, +, +	private Object convertCollectionToArray(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +		throw new UnsupportedOperationException("Not yet implemented");, +	}, +	, +	private boolean isArrayToObject(TypeDescriptor sourceType, TypeDescriptor targetType) {, +		return sourceType.isArray();, +	}, +, +	private Object convertArrayToObject(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +		throw new UnsupportedOperationException("Not yet implemented");, +	}, +, +	private Object convertObjectToArray(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +		throw new UnsupportedOperationException("Not yet implemented");, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ArrayGenericConverter.java, +import java.util.Arrays;, +import java.util.Collection;, +import org.springframework.core.CollectionFactory;, +		return sourceType.isArray() || targetType.isArray();		, +		if (isArrayToArray(sourceType, targetType)) {, +			return convertArrayToArray(source, sourceType, targetType);, +		} else if (isArrayToCollection(sourceType, targetType)) {, +			return convertArrayToCollection(source, sourceType, targetType);, +		} else if (isCollectionToArray(sourceType, targetType)) {, +			return convertCollectionToArray(source, sourceType, targetType);, +		} else if (isArrayToObject(sourceType, targetType)) {, +			return convertArrayToObject(source, sourceType, targetType);			, +		} else {, +			return convertObjectToArray(source, sourceType, targetType);, +		}, +	}, +	, +	private boolean isArrayToArray(TypeDescriptor sourceType, TypeDescriptor targetType) {, +		return sourceType.isArray() && targetType.isArray();, +	}, +, +	private Object convertArrayToArray(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +		TypeDescriptor targetElementType = targetType.getElementTypeDescriptor();, +	private boolean isArrayToCollection(TypeDescriptor sourceType, TypeDescriptor targetType) {, +		return sourceType.isArray() && targetType.isCollection();, +	}, +, +	private Object convertArrayToCollection(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +		int length = Array.getLength(source);, +		Collection collection = CollectionFactory.createCollection(targetType.getType(), length);, +		TypeDescriptor targetElementType = targetType.getElementTypeDescriptor();, +		if (targetElementType == TypeDescriptor.NULL) {, +			for (int i = 0; i < length; i++) {]