[+++ b/spring-core/src/main/java/org/springframework/util/comparator/CompoundComparator.java, + * Copyright 2002-2012 the original author or authors., +@SuppressWarnings("serial"), +	@SuppressWarnings({ "unchecked", "rawtypes" }), +	public CompoundComparator(Comparator... comparators) {, +		Assert.notNull(comparators, "Comparators must not be null");, +		for (Comparator comparator : comparators) {, +			this.addComparator(comparator);, +		for (InvertibleComparator<T> comparator : this.comparators) {, +	@SuppressWarnings("unchecked"), +		CompoundComparator<T> other = (CompoundComparator<T>) obj;, +++ b/spring-core/src/main/java/org/springframework/util/comparator/CompoundComparator.java, + * Copyright 2002-2012 the original author or authors., +@SuppressWarnings("serial"), +	@SuppressWarnings({ "unchecked", "rawtypes" }), +	public CompoundComparator(Comparator... comparators) {, +		Assert.notNull(comparators, "Comparators must not be null");, +		for (Comparator comparator : comparators) {, +			this.addComparator(comparator);, +		for (InvertibleComparator<T> comparator : this.comparators) {, +	@SuppressWarnings("unchecked"), +		CompoundComparator<T> other = (CompoundComparator<T>) obj;, +++ b/spring-core/src/main/java/org/springframework/util/comparator/InvertibleComparator.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.util.Assert;, +, +@SuppressWarnings("serial"), +		Assert.notNull(comparator, "Comparator must not be null");, +		Assert.notNull(comparator, "Comparator must not be null");, +	@SuppressWarnings("unchecked"), +		InvertibleComparator<T> other = (InvertibleComparator<T>) obj;, +++ b/spring-core/src/main/java/org/springframework/util/comparator/CompoundComparator.java, + * Copyright 2002-2012 the original author or authors., +@SuppressWarnings("serial"), +	@SuppressWarnings({ "unchecked", "rawtypes" }), +	public CompoundComparator(Comparator... comparators) {, +		Assert.notNull(comparators, "Comparators must not be null");, +		for (Comparator comparator : comparators) {, +			this.addComparator(comparator);, +		for (InvertibleComparator<T> comparator : this.comparators) {, +	@SuppressWarnings("unchecked"), +		CompoundComparator<T> other = (CompoundComparator<T>) obj;, +++ b/spring-core/src/main/java/org/springframework/util/comparator/InvertibleComparator.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.util.Assert;, +, +@SuppressWarnings("serial"), +		Assert.notNull(comparator, "Comparator must not be null");, +		Assert.notNull(comparator, "Comparator must not be null");, +	@SuppressWarnings("unchecked"), +		InvertibleComparator<T> other = (InvertibleComparator<T>) obj;, +++ b/spring-core/src/main/java/org/springframework/util/comparator/NullSafeComparator.java, + * Copyright 2002-2012 the original author or authors., +	@SuppressWarnings("rawtypes"), +	public static final NullSafeComparator NULLS_LOW = new NullSafeComparator<Object>(true);, +	@SuppressWarnings("rawtypes"), +	public static final NullSafeComparator NULLS_HIGH = new NullSafeComparator<Object>(false);, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +	@SuppressWarnings("unchecked"), +		NullSafeComparator<T> other = (NullSafeComparator<T>) obj;, +++ b/spring-core/src/main/java/org/springframework/util/comparator/CompoundComparator.java, + * Copyright 2002-2012 the original author or authors., +@SuppressWarnings("serial"), +	@SuppressWarnings({ "unchecked", "rawtypes" }), +	public CompoundComparator(Comparator... comparators) {, +		Assert.notNull(comparators, "Comparators must not be null");, +		for (Comparator comparator : comparators) {, +			this.addComparator(comparator);, +		for (InvertibleComparator<T> comparator : this.comparators) {, +	@SuppressWarnings("unchecked"), +		CompoundComparator<T> other = (CompoundComparator<T>) obj;, +++ b/spring-core/src/main/java/org/springframework/util/comparator/InvertibleComparator.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.util.Assert;, +, +@SuppressWarnings("serial"), +		Assert.notNull(comparator, "Comparator must not be null");, +		Assert.notNull(comparator, "Comparator must not be null");, +	@SuppressWarnings("unchecked"), +		InvertibleComparator<T> other = (InvertibleComparator<T>) obj;, +++ b/spring-core/src/main/java/org/springframework/util/comparator/NullSafeComparator.java, + * Copyright 2002-2012 the original author or authors., +	@SuppressWarnings("rawtypes"), +	public static final NullSafeComparator NULLS_LOW = new NullSafeComparator<Object>(true);, +	@SuppressWarnings("rawtypes"), +	public static final NullSafeComparator NULLS_HIGH = new NullSafeComparator<Object>(false);, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +	@SuppressWarnings("unchecked"), +		NullSafeComparator<T> other = (NullSafeComparator<T>) obj;, +++ b/spring-web/src/main/java/org/springframework/http/MediaType.java, +			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(, +					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR));]