[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import org.springframework.web.server.WebFilter;, +	private final List<WebFilter> filters = new ArrayList<>(4);, +, +, +	AbstractMockServerSpec() {, +		this.filters.add(this.exchangeMutatorFilter);, +	}, +, +	@Override, +	public <T extends B> T webFilter(WebFilter... filter) {, +		this.filters.addAll(Arrays.asList(filter));, +		return self();, +	}, +, +		WebHttpHandlerBuilder builder = initHttpHandlerBuilder();, +		filtersInReverse().forEach(builder::prependFilter);, +		return new DefaultWebTestClientBuilder(builder.build(), this.exchangeMutatorFilter);, +	/**, +	 * Sub-classes to create the {@code WebHttpHandlerBuilder} to use., +	 */, +	/**, +	 * Return the filters in reverse order for pre-pending., +	 */, +	private List<WebFilter> filtersInReverse() {, +		List<WebFilter> result = new ArrayList<>(this.filters);, +		Collections.reverse(result);, +		return result;, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import org.springframework.web.server.WebFilter;, +	private final List<WebFilter> filters = new ArrayList<>(4);, +, +, +	AbstractMockServerSpec() {, +		this.filters.add(this.exchangeMutatorFilter);, +	}, +, +	@Override, +	public <T extends B> T webFilter(WebFilter... filter) {, +		this.filters.addAll(Arrays.asList(filter));, +		return self();, +	}, +, +		WebHttpHandlerBuilder builder = initHttpHandlerBuilder();, +		filtersInReverse().forEach(builder::prependFilter);, +		return new DefaultWebTestClientBuilder(builder.build(), this.exchangeMutatorFilter);, +	/**, +	 * Sub-classes to create the {@code WebHttpHandlerBuilder} to use., +	 */, +	/**, +	 * Return the filters in reverse order for pre-pending., +	 */, +	private List<WebFilter> filtersInReverse() {, +		List<WebFilter> result = new ArrayList<>(this.filters);, +		Collections.reverse(result);, +		return result;, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java, +import org.springframework.web.server.WebFilter;, +		 * Configure {@link WebFilter}'s for server request processing., +		 * @param filter one or more filters, +		 */, +		<T extends B> T webFilter(WebFilter... filter);, +, +		/**, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import org.springframework.web.server.WebFilter;, +	private final List<WebFilter> filters = new ArrayList<>(4);, +, +, +	AbstractMockServerSpec() {, +		this.filters.add(this.exchangeMutatorFilter);, +	}, +, +	@Override, +	public <T extends B> T webFilter(WebFilter... filter) {, +		this.filters.addAll(Arrays.asList(filter));, +		return self();, +	}, +, +		WebHttpHandlerBuilder builder = initHttpHandlerBuilder();, +		filtersInReverse().forEach(builder::prependFilter);, +		return new DefaultWebTestClientBuilder(builder.build(), this.exchangeMutatorFilter);, +	/**, +	 * Sub-classes to create the {@code WebHttpHandlerBuilder} to use.]