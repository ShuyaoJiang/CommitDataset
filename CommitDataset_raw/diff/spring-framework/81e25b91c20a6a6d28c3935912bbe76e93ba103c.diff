[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +import org.springframework.util.Assert;, +	private final boolean imported;, +, +	/**, +	 * Create a new {@link ConfigurationClass} with the given name., +	 * @param metadataReader reader used to parse the underlying {@link Class}, +	 * @param beanName must not be {@code null}, +	 * @throws IllegalArgumentException if beanName is null (as of Spring 3.1.1), +	 * @see ConfigurationClass#ConfigurationClass(Class, boolean), +	 */, +		Assert.hasText(beanName, "bean name must not be null");, +		this.imported = false;, +	/**, +	 * Create a new {@link ConfigurationClass} representing a class that was imported, +	 * using the {@link Import} annotation or automatically processed as a nested, +	 * configuration class (if imported is {@code true})., +	 * @param metadataReader reader used to parse the underlying {@link Class}, +	 * @param beanName name of the {@code @Configuration} class bean, +	 * @since 3.1.1, +	 */, +	public ConfigurationClass(MetadataReader metadataReader, boolean imported) {, +		this.metadata = metadataReader.getAnnotationMetadata();, +		this.resource = metadataReader.getResource();, +		this.imported = imported;, +	}, +, +	/**, +	 * Create a new {@link ConfigurationClass} with the given name., +	 * @param clazz the underlying {@link Class} to represent, +	 * @param beanName name of the {@code @Configuration} class bean, +	 * @throws IllegalArgumentException if beanName is null (as of Spring 3.1.1), +	 * @see ConfigurationClass#ConfigurationClass(Class, boolean), +	 */, +		Assert.hasText(beanName, "bean name must not be null");, +		this.imported = false;, +	/**, +	 * Create a new {@link ConfigurationClass} representing a class that was imported, +	 * using the {@link Import} annotation or automatically processed as a nested, +	 * configuration class (if imported is {@code true})., +	 * @param clazz the underlying {@link Class} to represent, +	 * @param beanName name of the {@code @Configuration} class bean, +	 * @since 3.1.1, +	 */, +	public ConfigurationClass(Class<?> clazz, boolean imported) {, +		this.metadata = new StandardAnnotationMetadata(clazz);, +		this.resource = new DescriptiveResource(clazz.toString());, +		this.imported = imported;, +	}, +	/**, +	 * Return whether this configuration class was registered via @{@link Import} or, +	 * automatically registered due to being nested within another configuration class., +	 * @since 3.1.1, +	 */, +	public boolean isImported() {, +		return this.imported;, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +import org.springframework.util.Assert;, +	private final boolean imported;, +, +	/**, +	 * Create a new {@link ConfigurationClass} with the given name., +	 * @param metadataReader reader used to parse the underlying {@link Class}, +	 * @param beanName must not be {@code null}, +	 * @throws IllegalArgumentException if beanName is null (as of Spring 3.1.1), +	 * @see ConfigurationClass#ConfigurationClass(Class, boolean), +	 */, +		Assert.hasText(beanName, "bean name must not be null");, +		this.imported = false;, +	/**, +	 * Create a new {@link ConfigurationClass} representing a class that was imported, +	 * using the {@link Import} annotation or automatically processed as a nested, +	 * configuration class (if imported is {@code true})., +	 * @param metadataReader reader used to parse the underlying {@link Class}, +	 * @param beanName name of the {@code @Configuration} class bean, +	 * @since 3.1.1, +	 */, +	public ConfigurationClass(MetadataReader metadataReader, boolean imported) {, +		this.metadata = metadataReader.getAnnotationMetadata();, +		this.resource = metadataReader.getResource();, +		this.imported = imported;, +	}, +, +	/**, +	 * Create a new {@link ConfigurationClass} with the given name., +	 * @param clazz the underlying {@link Class} to represent, +	 * @param beanName name of the {@code @Configuration} class bean, +	 * @throws IllegalArgumentException if beanName is null (as of Spring 3.1.1), +	 * @see ConfigurationClass#ConfigurationClass(Class, boolean), +	 */, +		Assert.hasText(beanName, "bean name must not be null");, +		this.imported = false;, +	/**, +	 * Create a new {@link ConfigurationClass} representing a class that was imported, +	 * using the {@link Import} annotation or automatically processed as a nested, +	 * configuration class (if imported is {@code true})., +	 * @param clazz the underlying {@link Class} to represent, +	 * @param beanName name of the {@code @Configuration} class bean]