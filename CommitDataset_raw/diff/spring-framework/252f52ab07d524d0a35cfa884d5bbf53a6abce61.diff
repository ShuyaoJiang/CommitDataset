[+++ b/spring-aop/src/main/java/org/springframework/aop/IntroductionAwareMethodMatcher.java, + * Copyright 2002-2018 the original author or authors., +	 * @param targetClass the target class, +	boolean matches(Method method, Class<?> targetClass, boolean hasIntroductions);, +++ b/spring-aop/src/main/java/org/springframework/aop/IntroductionAwareMethodMatcher.java, + * Copyright 2002-2018 the original author or authors., +	 * @param targetClass the target class, +	boolean matches(Method method, Class<?> targetClass, boolean hasIntroductions);, +++ b/spring-aop/src/main/java/org/springframework/aop/MethodMatcher.java, + * Copyright 2002-2018 the original author or authors., +	 * Perform static checking whether the given method matches., +	 * <p>If this returns {@code false} or if the {@link #isRuntime()}, +	 * method returns {@code false}, no runtime check (i.e. no, +	 * {@link #matches(java.lang.reflect.Method, Class, Object[])} call), +	 * will be made., +	 * @param targetClass the target class, +	boolean matches(Method method, Class<?> targetClass);, +	 * @param targetClass the target class, +	boolean matches(Method method, Class<?> targetClass, Object... args);, +++ b/spring-aop/src/main/java/org/springframework/aop/IntroductionAwareMethodMatcher.java, + * Copyright 2002-2018 the original author or authors., +	 * @param targetClass the target class, +	boolean matches(Method method, Class<?> targetClass, boolean hasIntroductions);, +++ b/spring-aop/src/main/java/org/springframework/aop/MethodMatcher.java, + * Copyright 2002-2018 the original author or authors., +	 * Perform static checking whether the given method matches., +	 * <p>If this returns {@code false} or if the {@link #isRuntime()}, +	 * method returns {@code false}, no runtime check (i.e. no, +	 * {@link #matches(java.lang.reflect.Method, Class, Object[])} call), +	 * will be made., +	 * @param targetClass the target class, +	boolean matches(Method method, Class<?> targetClass);, +	 * @param targetClass the target class, +	boolean matches(Method method, Class<?> targetClass, Object... args);, +++ b/spring-aop/src/main/java/org/springframework/aop/TrueMethodMatcher.java, +	public boolean matches(Method method, Class<?> targetClass) {, +	public boolean matches(Method method, Class<?> targetClass, Object... args) {, +++ b/spring-aop/src/main/java/org/springframework/aop/IntroductionAwareMethodMatcher.java, + * Copyright 2002-2018 the original author or authors., +	 * @param targetClass the target class, +	boolean matches(Method method, Class<?> targetClass, boolean hasIntroductions);, +++ b/spring-aop/src/main/java/org/springframework/aop/MethodMatcher.java, + * Copyright 2002-2018 the original author or authors., +	 * Perform static checking whether the given method matches., +	 * <p>If this returns {@code false} or if the {@link #isRuntime()}, +	 * method returns {@code false}, no runtime check (i.e. no, +	 * {@link #matches(java.lang.reflect.Method, Class, Object[])} call), +	 * will be made., +	 * @param targetClass the target class, +	boolean matches(Method method, Class<?> targetClass);, +	 * @param targetClass the target class, +	boolean matches(Method method, Class<?> targetClass, Object... args);, +++ b/spring-aop/src/main/java/org/springframework/aop/TrueMethodMatcher.java, +	public boolean matches(Method method, Class<?> targetClass) {, +	public boolean matches(Method method, Class<?> targetClass, Object... args) {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, +		public boolean matches(Method method, Class<?> targetClass) {, +++ b/spring-aop/src/main/java/org/springframework/aop/IntroductionAwareMethodMatcher.java, + * Copyright 2002-2018 the original author or authors., +	 * @param targetClass the target class, +	boolean matches(Method method, Class<?> targetClass, boolean hasIntroductions);, +++ b/spring-aop/src/main/java/org/springframework/aop/MethodMatcher.java, + * Copyright 2002-2018 the original author or authors., +	 * Perform static checking whether the given method matches., +	 * <p>If this returns {@code false} or if the {@link #isRuntime()}, +	 * method returns {@code false}, no runtime check (i.e. no, +	 * {@link #matches(java.lang.reflect.Method, Class, Object[])} call), +	 * will be made., +	 * @param targetClass the target class, +	boolean matches(Method method, Class<?> targetClass);, +	 * @param targetClass the target class, +	boolean matches(Method method, Class<?> targetClass, Object... args);, +++ b/spring-aop/src/main/java/org/springframework/aop/TrueMethodMatcher.java, +	public boolean matches(Method method, Class<?> targetClass) {, +	public boolean matches(Method method, Class<?> targetClass, Object... args) {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, +		public boolean matches(Method method, Class<?> targetClass) {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +	public boolean matches(Method method, Class<?> targetClass, boolean hasIntroductions) {, +			return (!walker.testsSubtypeSensitiveVars() || walker.testTargetInstanceOfResidue(targetClass));, +	public boolean matches(Method method, Class<?> targetClass) {, +	public boolean matches(Method method, Class<?> targetClass, Object... args) {, +	private ShadowMatch getTargetShadowMatch(Method method, Class<?> targetClass) {, +		if (targetMethod.getDeclaringClass().isInterface()) {, +++ b/spring-aop/src/main/java/org/springframework/aop/IntroductionAwareMethodMatcher.java, + * Copyright 2002-2018 the original author or authors., +	 * @param targetClass the target class, +	boolean matches(Method method, Class<?> targetClass, boolean hasIntroductions);, +++ b/spring-aop/src/main/java/org/springframework/aop/MethodMatcher.java, + * Copyright 2002-2018 the original author or authors., +	 * Perform static checking whether the given method matches., +	 * <p>If this returns {@code false} or if the {@link #isRuntime()}, +	 * method returns {@code false}, no runtime check (i.e. no, +	 * {@link #matches(java.lang.reflect.Method, Class, Object[])} call), +	 * will be made., +	 * @param targetClass the target class, +	boolean matches(Method method, Class<?> targetClass);, +	 * @param targetClass the target class, +	boolean matches(Method method, Class<?> targetClass, Object... args);, +++ b/spring-aop/src/main/java/org/springframework/aop/TrueMethodMatcher.java]