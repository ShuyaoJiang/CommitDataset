[+++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathMatcher.java, +			if (dotPos1 == -1) {, +			String fileName1 = pattern1.substring(0, dotPos1);, +			String extension1 = pattern1.substring(dotPos1);, +			String fileName2;, +			String extension2;, +			int dotPos2 = pattern2.indexOf('.');, +				extension2 = "";, +			String fileName = fileName1.endsWith("*") ? fileName2 : fileName1;, +++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathMatcher.java, +			if (dotPos1 == -1) {, +			String fileName1 = pattern1.substring(0, dotPos1);, +			String extension1 = pattern1.substring(dotPos1);, +			String fileName2;, +			String extension2;, +			int dotPos2 = pattern2.indexOf('.');, +				extension2 = "";, +			String fileName = fileName1.endsWith("*") ? fileName2 : fileName1;, +++ b/org.springframework.core/src/test/java/org/springframework/util/AntPathMatcherTests.java, +		assertEquals("/hotels/{hotel}.*", pathMatcher.combine("/hotels", "{hotel}.*"));, +++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathMatcher.java, +			if (dotPos1 == -1) {, +			String fileName1 = pattern1.substring(0, dotPos1);, +			String extension1 = pattern1.substring(dotPos1);, +			String fileName2;, +			String extension2;, +			int dotPos2 = pattern2.indexOf('.');, +				extension2 = "";, +			String fileName = fileName1.endsWith("*") ? fileName2 : fileName1;, +++ b/org.springframework.core/src/test/java/org/springframework/util/AntPathMatcherTests.java, +		assertEquals("/hotels/{hotel}.*", pathMatcher.combine("/hotels", "{hotel}.*"));, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +					for (String methodLevelPattern : mappingInfo.paths) {, +						if (isPathMatch(methodLevelPattern, lookupPath)) {, +								matchedPaths.add(methodLevelPattern);, +		private boolean isPathMatch(String methodLevelPattern, String lookupPath) {, +			if (isPathMatchInternal(methodLevelPattern, lookupPath)) {, +			if (hasTypeLevelMapping()) {, +				String[] typeLevelPatterns = getTypeLevelMapping().value();, +				for (String typeLevelPattern : typeLevelPatterns) {, +					if (!typeLevelPattern.startsWith("/")) {, +						typeLevelPattern = "/" + typeLevelPattern;, +					}, +					String combinedPattern = pathMatcher.combine(typeLevelPattern, methodLevelPattern);, +					if (isPathMatchInternal(combinedPattern, lookupPath)) {, +				}, +, +			}, +			return false;, +		}, +, +		private boolean isPathMatchInternal(String pattern, String lookupPath) {, +			if (pattern.equals(lookupPath) || pathMatcher.match(pattern, lookupPath)) {, +				return true;, +			}, +			return !(pattern.indexOf('.') != -1) && pathMatcher.match(pattern + ".*", lookupPath);, +++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathMatcher.java, +			if (dotPos1 == -1) {, +			String fileName1 = pattern1.substring(0, dotPos1);, +			String extension1 = pattern1.substring(dotPos1);, +			String fileName2;, +			String extension2;, +			int dotPos2 = pattern2.indexOf('.');, +				extension2 = "";, +			String fileName = fileName1.endsWith("*") ? fileName2 : fileName1;, +++ b/org.springframework.core/src/test/java/org/springframework/util/AntPathMatcherTests.java, +		assertEquals("/hotels/{hotel}.*", pathMatcher.combine("/hotels", "{hotel}.*"));, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +					for (String methodLevelPattern : mappingInfo.paths) {, +						if (isPathMatch(methodLevelPattern, lookupPath)) {, +								matchedPaths.add(methodLevelPattern);, +		private boolean isPathMatch(String methodLevelPattern, String lookupPath) {, +			if (isPathMatchInternal(methodLevelPattern, lookupPath)) {, +			if (hasTypeLevelMapping()) {, +				String[] typeLevelPatterns = getTypeLevelMapping().value();, +				for (String typeLevelPattern : typeLevelPatterns) {, +					if (!typeLevelPattern.startsWith("/")) {, +						typeLevelPattern = "/" + typeLevelPattern;, +					}, +					String combinedPattern = pathMatcher.combine(typeLevelPattern, methodLevelPattern);, +					if (isPathMatchInternal(combinedPattern, lookupPath)) {, +				}, +, +			}, +			return false;, +		}, +, +		private boolean isPathMatchInternal(String pattern, String lookupPath) {, +			if (pattern.equals(lookupPath) || pathMatcher.match(pattern, lookupPath)) {, +				return true;, +			}, +			return !(pattern.indexOf('.') != -1) && pathMatcher.match(pattern + ".*", lookupPath);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/UriTemplateServletAnnotationControllerTests.java, +		assertEquals("list", response.getContentAsString());, +		assertEquals("create", response.getContentAsString());, +		request = new MockHttpServletRequest("GET", "/hotels/42");, +		assertEquals("show-42", response.getContentAsString());, +, +		request = new MockHttpServletRequest("PUT", "/hotels/42");, +		response = new MockHttpServletResponse();]