[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.util.CollectionUtils;, +				extractHandlerMethodUriTemplates(targetPathMatches.values().iterator().next(), lookupPath, request);, +				extractHandlerMethodUriTemplates(bestPathMatch, lookupPath, request);, +, +		@SuppressWarnings("unchecked"), +		private void extractHandlerMethodUriTemplates(String mappedPath, String lookupPath, HttpServletRequest request) {, +			Map<String, String> variables = null;, +			boolean hasSuffix = (mappedPath.indexOf('.') != -1);, +			if (!hasSuffix && pathMatcher.match(mappedPath + ".*", lookupPath)) {, +				String realPath = mappedPath + ".*";, +				if (pathMatcher.match(realPath, lookupPath)) {, +					variables = pathMatcher.extractUriTemplateVariables(realPath, lookupPath);, +				}, +			}, +			if (variables == null && !mappedPath.startsWith("/")) {, +				String realPath = "/**/" + mappedPath;, +				if (pathMatcher.match(realPath, lookupPath)) {, +					variables = pathMatcher.extractUriTemplateVariables(realPath, lookupPath);, +				} else {, +					realPath = realPath + ".*";, +					if (pathMatcher.match(realPath, lookupPath)) {, +						variables = pathMatcher.extractUriTemplateVariables(realPath, lookupPath);, +					}, +				}, +			}, +			if (!CollectionUtils.isEmpty(variables)) {, +				Map<String, String> typeVariables =, +						(Map<String, String>) request.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE);, +				if (typeVariables != null) {, +					variables.putAll(typeVariables);, +				}, +				request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, variables);, +			}, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.util.CollectionUtils;, +				extractHandlerMethodUriTemplates(targetPathMatches.values().iterator().next(), lookupPath, request);, +				extractHandlerMethodUriTemplates(bestPathMatch, lookupPath, request);, +, +		@SuppressWarnings("unchecked"), +		private void extractHandlerMethodUriTemplates(String mappedPath, String lookupPath, HttpServletRequest request) {, +			Map<String, String> variables = null;, +			boolean hasSuffix = (mappedPath.indexOf('.') != -1);, +			if (!hasSuffix && pathMatcher.match(mappedPath + ".*", lookupPath)) {, +				String realPath = mappedPath + ".*";, +				if (pathMatcher.match(realPath, lookupPath)) {, +					variables = pathMatcher.extractUriTemplateVariables(realPath, lookupPath);, +				}, +			}, +			if (variables == null && !mappedPath.startsWith("/")) {, +				String realPath = "/**/" + mappedPath;, +				if (pathMatcher.match(realPath, lookupPath)) {, +					variables = pathMatcher.extractUriTemplateVariables(realPath, lookupPath);, +				} else {, +					realPath = realPath + ".*";, +					if (pathMatcher.match(realPath, lookupPath)) {, +						variables = pathMatcher.extractUriTemplateVariables(realPath, lookupPath);, +					}, +				}, +			}, +			if (!CollectionUtils.isEmpty(variables)) {, +				Map<String, String> typeVariables =, +						(Map<String, String>) request.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE);, +				if (typeVariables != null) {, +					variables.putAll(typeVariables);, +				}, +				request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, variables);, +			}, +		}, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/UriTemplateServletAnnotationControllerTests.java, +	@Test, +	public void ambiguous() throws Exception {, +		initServlet(AmbiguousUriTemplateController.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/hotels/12345");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("specific", response.getContentAsString());, +	}, +, +	@Test, +	public void relative() throws Exception {, +		initServlet(RelativePathUriTemplateController.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/hotels/42/bookings/21");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("test-42-21", response.getContentAsString());, +	}, +, +		@RequestMapping("bookings/{booking}"), +		public void handle(@PathVariable("hotel") String hotel, @PathVariable int booking, Writer writer), +			assertEquals("Invalid path variable value", "42", hotel);, +			assertEquals("Invalid path variable value", 21, booking);, +			writer.write("test-" + hotel + "-" + booking);, +		}, +, +	}, +]