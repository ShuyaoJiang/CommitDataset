[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	 * If this method returns true, it means {@link #convert(Object, Class)} is capable of converting an instance of sourceType to targetType., +	 * Special note on collections, arrays, and maps types:, +	 * For conversion between collection, array, and map types, this method will return 'true', +	 * even though a convert invocation may still generate a {@link ConversionException} if the underlying elements are not convertible., +	 * Callers are expected to handle this exceptional case when working with collections and maps., +	 * @param sourceType the source type to convert from (may be null if source is null), +	 * The TypeDescriptors provide additional context about the source and target locations where conversion would occur, often object fields or property locations., +	 * If this method returns true, it means {@link #convert(Object, TypeDescriptor, TypeDescriptor)} is capable of converting an instance of sourceType to targetType., +	 * Special note on collections, arrays, and maps types:, +	 * For conversion between collection, array, and map types, this method will return 'true', +	 * even though a convert invocation may still generate a {@link ConversionException} if the underlying elements are not convertible., +	 * Callers are expected to handle this exceptional case when working with collections and maps., +	 * @param sourceType context about the source type to convert from (may be null if source is null), +	 * The TypeDescriptors provide additional context about the source and target locations where conversion will occur, often object fields or property locations., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	 * If this method returns true, it means {@link #convert(Object, Class)} is capable of converting an instance of sourceType to targetType., +	 * Special note on collections, arrays, and maps types:, +	 * For conversion between collection, array, and map types, this method will return 'true', +	 * even though a convert invocation may still generate a {@link ConversionException} if the underlying elements are not convertible., +	 * Callers are expected to handle this exceptional case when working with collections and maps., +	 * @param sourceType the source type to convert from (may be null if source is null), +	 * The TypeDescriptors provide additional context about the source and target locations where conversion would occur, often object fields or property locations., +	 * If this method returns true, it means {@link #convert(Object, TypeDescriptor, TypeDescriptor)} is capable of converting an instance of sourceType to targetType., +	 * Special note on collections, arrays, and maps types:, +	 * For conversion between collection, array, and map types, this method will return 'true', +	 * even though a convert invocation may still generate a {@link ConversionException} if the underlying elements are not convertible., +	 * Callers are expected to handle this exceptional case when working with collections and maps., +	 * @param sourceType context about the source type to convert from (may be null if source is null), +	 * The TypeDescriptors provide additional context about the source and target locations where conversion will occur, often object fields or property locations., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToArrayConverter.java, +import org.springframework.core.convert.converter.ConditionalGenericConverter;, + * Only matches if String.class can be converted to the target array element type., +final class StringToArrayConverter implements ConditionalGenericConverter {, +	public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {, +		return this.conversionService.canConvert(sourceType, targetType.getElementType());, +	}, +	, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	 * If this method returns true, it means {@link #convert(Object, Class)} is capable of converting an instance of sourceType to targetType., +	 * Special note on collections, arrays, and maps types:, +	 * For conversion between collection, array, and map types, this method will return 'true', +	 * even though a convert invocation may still generate a {@link ConversionException} if the underlying elements are not convertible., +	 * Callers are expected to handle this exceptional case when working with collections and maps., +	 * @param sourceType the source type to convert from (may be null if source is null), +	 * The TypeDescriptors provide additional context about the source and target locations where conversion would occur, often object fields or property locations., +	 * If this method returns true, it means {@link #convert(Object, TypeDescriptor, TypeDescriptor)} is capable of converting an instance of sourceType to targetType., +	 * Special note on collections, arrays, and maps types:, +	 * For conversion between collection, array, and map types, this method will return 'true', +	 * even though a convert invocation may still generate a {@link ConversionException} if the underlying elements are not convertible., +	 * Callers are expected to handle this exceptional case when working with collections and maps., +	 * @param sourceType context about the source type to convert from (may be null if source is null), +	 * The TypeDescriptors provide additional context about the source and target locations where conversion will occur, often object fields or property locations., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToArrayConverter.java, +import org.springframework.core.convert.converter.ConditionalGenericConverter;, + * Only matches if String.class can be converted to the target array element type., +final class StringToArrayConverter implements ConditionalGenericConverter {, +	public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {, +		return this.conversionService.canConvert(sourceType, targetType.getElementType());, +	}, +	, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToCollectionConverter.java, + * If the target collection element type is declared, only matches if String.class can be converted to it., +		if (targetType.getElementType() != null) {, +			return this.conversionService.canConvert(sourceType, targetType.getElementType());, +		} else {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	 * If this method returns true, it means {@link #convert(Object, Class)} is capable of converting an instance of sourceType to targetType., +	 * Special note on collections, arrays, and maps types:, +	 * For conversion between collection, array, and map types, this method will return 'true', +	 * even though a convert invocation may still generate a {@link ConversionException} if the underlying elements are not convertible., +	 * Callers are expected to handle this exceptional case when working with collections and maps., +	 * @param sourceType the source type to convert from (may be null if source is null), +	 * The TypeDescriptors provide additional context about the source and target locations where conversion would occur, often object fields or property locations., +	 * If this method returns true, it means {@link #convert(Object, TypeDescriptor, TypeDescriptor)} is capable of converting an instance of sourceType to targetType., +	 * Special note on collections, arrays, and maps types:, +	 * For conversion between collection, array, and map types, this method will return 'true', +	 * even though a convert invocation may still generate a {@link ConversionException} if the underlying elements are not convertible., +	 * Callers are expected to handle this exceptional case when working with collections and maps., +	 * @param sourceType context about the source type to convert from (may be null if source is null), +	 * The TypeDescriptors provide additional context about the source and target locations where conversion will occur, often object fields or property locations., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToArrayConverter.java, +import org.springframework.core.convert.converter.ConditionalGenericConverter;, + * Only matches if String.class can be converted to the target array element type., +final class StringToArrayConverter implements ConditionalGenericConverter {, +	public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {, +		return this.conversionService.canConvert(sourceType, targetType.getElementType());, +	}, +	, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToCollectionConverter.java, + * If the target collection element type is declared, only matches if String.class can be converted to it., +		if (targetType.getElementType() != null) {, +			return this.conversionService.canConvert(sourceType, targetType.getElementType());, +		} else {, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java, +	, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	 * If this method returns true, it means {@link #convert(Object, Class)} is capable of converting an instance of sourceType to targetType., +	 * Special note on collections, arrays, and maps types:, +	 * For conversion between collection, array, and map types, this method will return 'true']