[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java, +		return (hasAspectAnnotation(clazz) && !compiledByAjc(clazz));, +		return (AnnotationUtils.findAnnotation(clazz, Aspect.class) != null);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java, +		return (hasAspectAnnotation(clazz) && !compiledByAjc(clazz));, +		return (AnnotationUtils.findAnnotation(clazz, Aspect.class) != null);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/AspectMetadata.java, + * Copyright 2002-2009 the original author or authors., +	public AspectMetadata(Class<?> aspectClass, String aspectName) {, +		Class<?> currClass = aspectClass;, +		AjType ajType = null;, +		while (!currClass.equals(Object.class)) {, +			AjType ajTypeToCheck = AjTypeSystem.getAjType(currClass);, +			if (ajTypeToCheck.isAspect()) {, +				ajType = ajTypeToCheck;, +				break;, +			}, +			currClass = currClass.getSuperclass();, +		}, +		if (ajType == null) {, +		this.ajType = ajType;]