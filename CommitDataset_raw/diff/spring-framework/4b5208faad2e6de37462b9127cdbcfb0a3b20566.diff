[+++ b/org.springframework.core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +	public <T> Class<T> getPropertyAsClass(String key, Class<T> targetType) {, +		return this.propertyResolver.getPropertyAsClass(key, targetType);, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +	public <T> Class<T> getPropertyAsClass(String key, Class<T> targetType) {, +		return this.propertyResolver.getPropertyAsClass(key, targetType);, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/PropertyResolver.java, +	 * Convert the property value associated with the given key to a {@code Class}, +	 * of type {@code T} or {@code null} if the key cannot be resolved., +	 * @throws ConversionException if class specified by property value cannot be found, +	 * or loaded or if targetType is not assignable from class specified by property value, +	 * @see #getProperty(String, Class), +	 */, +	<T> Class<T> getPropertyAsClass(String key, Class<T> targetType);, +, +	/**, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +	public <T> Class<T> getPropertyAsClass(String key, Class<T> targetType) {, +		return this.propertyResolver.getPropertyAsClass(key, targetType);, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/PropertyResolver.java, +	 * Convert the property value associated with the given key to a {@code Class}, +	 * of type {@code T} or {@code null} if the key cannot be resolved., +	 * @throws ConversionException if class specified by property value cannot be found, +	 * or loaded or if targetType is not assignable from class specified by property value, +	 * @see #getProperty(String, Class), +	 */, +	<T> Class<T> getPropertyAsClass(String key, Class<T> targetType);, +, +	/**, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/PropertySourcesPropertyResolver.java, +import org.springframework.core.convert.ConversionException;, +import org.springframework.util.ClassUtils;, +, +	public <T> Class<T> getPropertyAsClass(String key, Class<T> targetValueType) {, +		boolean debugEnabled = logger.isDebugEnabled();, +		if (logger.isTraceEnabled()) {, +			logger.trace(format("getPropertyAsClass(\"%s\", %s)", key, targetValueType.getSimpleName()));, +		}, +, +		for (PropertySource<?> propertySource : this.propertySources) {, +			if (debugEnabled) {, +				logger.debug(format("Searching for key '%s' in [%s]", key, propertySource.getName()));, +			}, +			Object value;, +			if ((value = propertySource.getProperty(key)) != null) {, +				if (debugEnabled) {, +					logger.debug(, +							format("Found key '%s' in [%s] with value '%s'", key, propertySource.getName(), value));, +				}, +, +				Class<?> clazz;, +				if (value instanceof String) {, +					try {, +						clazz = ClassUtils.forName((String)value, null);, +					} catch (Exception ex) {, +						throw new ClassConversionException((String)value, targetValueType, ex);, +					}, +				}, +				else if (value instanceof Class) {, +					clazz = (Class<?>)value;, +				} else {, +					clazz = value.getClass();, +				}, +, +				if (!targetValueType.isAssignableFrom(clazz)) {, +					throw new ClassConversionException(clazz, targetValueType);, +				}, +				@SuppressWarnings("unchecked"), +				Class<T> targetClass = (Class<T>)clazz;, +				return targetClass;, +			}, +		}, +, +		if (debugEnabled) {, +			logger.debug(format("Could not find key '%s' in any property source. Returning [null]", key));, +		}, +		return null;, +	}, +, +, +	@SuppressWarnings("serial"), +	static class ClassConversionException extends ConversionException {, +		public ClassConversionException(Class<?> actual, Class<?> expected) {, +			super(String.format("Actual type %s is not assignable to expected type %s", actual.getName(), expected.getName()));, +		}, +, +		public ClassConversionException(String actual, Class<?> expected, Exception ex) {, +			super(String.format("Could not find/load class %s during attempt to convert to %s", actual, expected.getName()), ex);, +		}, +	}, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +	public <T> Class<T> getPropertyAsClass(String key, Class<T> targetType) {, +		return this.propertyResolver.getPropertyAsClass(key, targetType);, +	}]