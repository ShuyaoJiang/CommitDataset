[+++ b/spring-web/src/main/java/org/springframework/web/filter/reactive/ForwardedHeaderFilter.java, +import org.springframework.web.server.adapter.ForwardedHeaderTransformer;, + * Extract values from "Forwarded" and "X-Forwarded-*" headers to override the, + * request URI (i.e. {@link ServerHttpRequest#getURI()}) so it reflects the, + * client-originated protocol and address., + * <p>Alternatively if {@link #setRemoveOnly removeOnly} is set to "true", then, + * "Forwarded" and "X-Forwarded-*" headers are only removed, and not used., + * @deprecated as of 5.1 this filter is deprecated in favor of using, + * {@link ForwardedHeaderTransformer} which can be declared as a bean with the, + * name "forwardedHeaderTransformer" or registered explicitly in, + * {@link org.springframework.web.server.adapter.WebHttpHandlerBuilder, + * WebHttpHandlerBuilder}., +@Deprecated, +public class ForwardedHeaderFilter extends ForwardedHeaderTransformer implements WebFilter {, +		if (hasForwardedHeaders(request)) {, +			exchange = exchange.mutate().request(apply(request)).build();, +		}, +++ b/spring-web/src/main/java/org/springframework/web/filter/reactive/ForwardedHeaderFilter.java, +import org.springframework.web.server.adapter.ForwardedHeaderTransformer;, + * Extract values from "Forwarded" and "X-Forwarded-*" headers to override the, + * request URI (i.e. {@link ServerHttpRequest#getURI()}) so it reflects the, + * client-originated protocol and address., + * <p>Alternatively if {@link #setRemoveOnly removeOnly} is set to "true", then, + * "Forwarded" and "X-Forwarded-*" headers are only removed, and not used., + * @deprecated as of 5.1 this filter is deprecated in favor of using, + * {@link ForwardedHeaderTransformer} which can be declared as a bean with the, + * name "forwardedHeaderTransformer" or registered explicitly in, + * {@link org.springframework.web.server.adapter.WebHttpHandlerBuilder, + * WebHttpHandlerBuilder}., +@Deprecated, +public class ForwardedHeaderFilter extends ForwardedHeaderTransformer implements WebFilter {, +		if (hasForwardedHeaders(request)) {, +			exchange = exchange.mutate().request(apply(request)).build();, +		}, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/ForwardedHeaderTransformer.java, +/*, + * Copyright 2002-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.server.adapter;, +, +import java.net.URI;, +import java.util.LinkedHashSet;, +import java.util.Set;, +import java.util.function.Function;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.server.reactive.ServerHttpRequest;, +import org.springframework.lang.Nullable;, +import org.springframework.web.util.UriComponentsBuilder;, +, +/**, + * Extract values from "Forwarded" and "X-Forwarded-*" headers to override the, + * request URI (i.e. {@link ServerHttpRequest#getURI()}) so it reflects the, + * client-originated protocol and address., + *, + * <p>Alternatively if {@link #setRemoveOnly removeOnly} is set to "true", then, + * "Forwarded" and "X-Forwarded-*" headers are only removed, and not used., + *, + * @author Rossen Stoyanchev, + * @since 5.1, + * @see <a href="https://tools.ietf.org/html/rfc7239">https://tools.ietf.org/html/rfc7239</a>, + */, +public class ForwardedHeaderTransformer implements Function<ServerHttpRequest, ServerHttpRequest> {, +, +	static final Set<String> FORWARDED_HEADER_NAMES = new LinkedHashSet<>(5);, +, +	static {, +		FORWARDED_HEADER_NAMES.add("Forwarded");, +		FORWARDED_HEADER_NAMES.add("X-Forwarded-Host");, +		FORWARDED_HEADER_NAMES.add("X-Forwarded-Port");, +		FORWARDED_HEADER_NAMES.add("X-Forwarded-Proto");, +		FORWARDED_HEADER_NAMES.add("X-Forwarded-Prefix");, +		FORWARDED_HEADER_NAMES.add("X-Forwarded-Ssl");, +	}, +, +, +	private boolean removeOnly;, +, +, +	/**, +	 * Enables mode in which any "Forwarded" or "X-Forwarded-*" headers are, +	 * removed only and the information in them ignored., +	 * @param removeOnly whether to discard and ignore forwarded headers, +	 */, +	public void setRemoveOnly(boolean removeOnly) {, +		this.removeOnly = removeOnly;, +	}, +]