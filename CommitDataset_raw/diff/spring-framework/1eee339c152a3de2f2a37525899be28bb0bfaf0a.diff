[+++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java, + * Copyright 2002-2014 the original author or authors., + * <p>Subclasses do have access to the raw headers, however, via {@link #getRawHeaders()}., +public class MessageHeaders implements Map<String, Object>, Serializable {, +	/**, +	 * Constructs a minimal {@link MessageHeaders} with zero headers., +	 */, +	protected MessageHeaders() {, +		this.headers = new HashMap<String, Object>();, +	}, +	/**, +	 * Consructs a {@link MessageHeaders} from the headers map; adding (or, +	 * overwriting) the {@link #ID} and {@link #TIMESTAMP} headers., +	 * @param headers The map., +	 */, +	protected Map<String, Object> getRawHeaders() {, +		return this.headers;, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java, + * Copyright 2002-2014 the original author or authors., + * <p>Subclasses do have access to the raw headers, however, via {@link #getRawHeaders()}., +public class MessageHeaders implements Map<String, Object>, Serializable {, +	/**, +	 * Constructs a minimal {@link MessageHeaders} with zero headers., +	 */, +	protected MessageHeaders() {, +		this.headers = new HashMap<String, Object>();, +	}, +	/**, +	 * Consructs a {@link MessageHeaders} from the headers map; adding (or, +	 * overwriting) the {@link #ID} and {@link #TIMESTAMP} headers., +	 * @param headers The map., +	 */, +	protected Map<String, Object> getRawHeaders() {, +		return this.headers;, +	}, +++ b/spring-messaging/src/test/java/org/springframework/messaging/MessageHeadersTests.java, + * Copyright 2002-2014 the original author or authors., +import java.util.UUID;, +import java.util.concurrent.atomic.AtomicLong;, + * @author Gary Russell, +	@Test, +	public void subclass() {, +		final AtomicLong id = new AtomicLong();, +		@SuppressWarnings("serial"), +		class MyMH extends MessageHeaders {, +, +			public MyMH() {, +				this.getRawHeaders().put(ID, new UUID(0, id.incrementAndGet()));, +			}, +, +		}, +		MessageHeaders headers = new MyMH();, +		assertEquals("00000000-0000-0000-0000-000000000001", headers.getId().toString());, +		assertEquals(1, headers.size());, +	}]