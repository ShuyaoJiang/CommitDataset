[+++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationClassFilter.java, + * Copyright 2002-2013 the original author or authors., +	@Override, +	public boolean equals(Object other) {, +		if (this == other) {, +			return true;, +		}, +		if (!(other instanceof AnnotationClassFilter)) {, +			return false;, +		}, +		AnnotationClassFilter otherCf = (AnnotationClassFilter) other;, +		return (this.annotationType.equals(otherCf.annotationType) && this.checkInherited == otherCf.checkInherited);, +	}, +, +	@Override, +	public int hashCode() {, +		return this.annotationType.hashCode();, +	}, +, +	@Override, +	public String toString() {, +		return getClass().getName() + ": " + this.annotationType;, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationClassFilter.java, + * Copyright 2002-2013 the original author or authors., +	@Override, +	public boolean equals(Object other) {, +		if (this == other) {, +			return true;, +		}, +		if (!(other instanceof AnnotationClassFilter)) {, +			return false;, +		}, +		AnnotationClassFilter otherCf = (AnnotationClassFilter) other;, +		return (this.annotationType.equals(otherCf.annotationType) && this.checkInherited == otherCf.checkInherited);, +	}, +, +	@Override, +	public int hashCode() {, +		return this.annotationType.hashCode();, +	}, +, +	@Override, +	public String toString() {, +		return getClass().getName() + ": " + this.annotationType;, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationMatchingPointcut.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.util.ObjectUtils;, +	@Override, +	public boolean equals(Object other) {, +		if (this == other) {, +			return true;, +		}, +		if (!(other instanceof AnnotationMatchingPointcut)) {, +			return false;, +		}, +		AnnotationMatchingPointcut that = (AnnotationMatchingPointcut) other;, +		return ObjectUtils.nullSafeEquals(that.classFilter, this.classFilter) &&, +				ObjectUtils.nullSafeEquals(that.methodMatcher, this.methodMatcher);, +	}, +, +	@Override, +	public int hashCode() {, +		int code = 17;, +		if (this.classFilter != null) {, +			code = 37 * code + this.classFilter.hashCode();, +		}, +		if (this.methodMatcher != null) {, +			code = 37 * code + this.methodMatcher.hashCode();, +		}, +		return code;, +	}, +, +	@Override, +	public String toString() {, +		return "AnnotationMatchingPointcut: " + this.classFilter + ", " +this.methodMatcher;, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationClassFilter.java, + * Copyright 2002-2013 the original author or authors., +	@Override, +	public boolean equals(Object other) {, +		if (this == other) {, +			return true;, +		}, +		if (!(other instanceof AnnotationClassFilter)) {, +			return false;, +		}, +		AnnotationClassFilter otherCf = (AnnotationClassFilter) other;, +		return (this.annotationType.equals(otherCf.annotationType) && this.checkInherited == otherCf.checkInherited);, +	}, +, +	@Override, +	public int hashCode() {, +		return this.annotationType.hashCode();, +	}, +]