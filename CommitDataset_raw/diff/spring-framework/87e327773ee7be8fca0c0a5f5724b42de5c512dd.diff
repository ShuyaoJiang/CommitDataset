[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/AopProxyUtils.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.aop.TargetClassAware;, +import org.springframework.aop.TargetSource;, +import org.springframework.aop.target.SingletonTargetSource;, +	 * Determine the ultimate target class of the given bean instance, traversing, +	 * not only a top-level proxy but any number of nested proxies as well -, +	 * as long as possible without side effects, that is, just for singleton targets., +	 * @param candidate the instance to check (might be an AOP proxy), +	 * @return the target class (or the plain class of the given object as fallback;, +	 * never <code>null</code>), +	 * @see org.springframework.aop.TargetClassAware#getTargetClass(), +	 * @see org.springframework.aop.framework.Advised#getTargetSource(), +	 */, +	public static Class<?> ultimateTargetClass(Object candidate) {, +		Assert.notNull(candidate, "Candidate object must not be null");, +		Object current = candidate;, +		Class<?> result = null;, +		while (current instanceof TargetClassAware) {, +			result = ((TargetClassAware) current).getTargetClass();, +			Object nested = null;, +			if (current instanceof Advised) {, +				TargetSource targetSource = ((Advised) current).getTargetSource();, +				if (targetSource instanceof SingletonTargetSource) {, +					nested = ((SingletonTargetSource) targetSource).getTarget();, +				}, +			}, +			current = nested;, +		}, +		return result;, +	}, +, +	/**, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/AopProxyUtils.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.aop.TargetClassAware;, +import org.springframework.aop.TargetSource;, +import org.springframework.aop.target.SingletonTargetSource;, +	 * Determine the ultimate target class of the given bean instance, traversing, +	 * not only a top-level proxy but any number of nested proxies as well -, +	 * as long as possible without side effects, that is, just for singleton targets., +	 * @param candidate the instance to check (might be an AOP proxy), +	 * @return the target class (or the plain class of the given object as fallback;, +	 * never <code>null</code>), +	 * @see org.springframework.aop.TargetClassAware#getTargetClass(), +	 * @see org.springframework.aop.framework.Advised#getTargetSource(), +	 */, +	public static Class<?> ultimateTargetClass(Object candidate) {, +		Assert.notNull(candidate, "Candidate object must not be null");, +		Object current = candidate;, +		Class<?> result = null;, +		while (current instanceof TargetClassAware) {, +			result = ((TargetClassAware) current).getTargetClass();, +			Object nested = null;, +			if (current instanceof Advised) {, +				TargetSource targetSource = ((Advised) current).getTargetSource();, +				if (targetSource instanceof SingletonTargetSource) {, +					nested = ((SingletonTargetSource) targetSource).getTarget();, +				}, +			}, +			current = nested;, +		}, +		return result;, +	}, +, +	/**, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/support/AopUtils.java, +	 * Determine the target class of the given bean instance which might be an AOP proxy., +	 * @see org.springframework.aop.framework.AopProxyUtils#ultimateTargetClass(Object), +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/AopProxyUtils.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.aop.TargetClassAware;, +import org.springframework.aop.TargetSource;, +import org.springframework.aop.target.SingletonTargetSource;, +	 * Determine the ultimate target class of the given bean instance, traversing, +	 * not only a top-level proxy but any number of nested proxies as well -, +	 * as long as possible without side effects, that is, just for singleton targets., +	 * @param candidate the instance to check (might be an AOP proxy), +	 * @return the target class (or the plain class of the given object as fallback;, +	 * never <code>null</code>), +	 * @see org.springframework.aop.TargetClassAware#getTargetClass(), +	 * @see org.springframework.aop.framework.Advised#getTargetSource(), +	 */, +	public static Class<?> ultimateTargetClass(Object candidate) {, +		Assert.notNull(candidate, "Candidate object must not be null");, +		Object current = candidate;, +		Class<?> result = null;, +		while (current instanceof TargetClassAware) {, +			result = ((TargetClassAware) current).getTargetClass();, +			Object nested = null;, +			if (current instanceof Advised) {, +				TargetSource targetSource = ((Advised) current).getTargetSource();, +				if (targetSource instanceof SingletonTargetSource) {, +					nested = ((SingletonTargetSource) targetSource).getTarget();, +				}, +			}, +			current = nested;, +		}, +		return result;, +	}]