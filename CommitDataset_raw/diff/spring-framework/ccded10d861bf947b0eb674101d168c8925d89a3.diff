[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/lob/OracleLobHandler.java, + * Copyright 2002-2010 the original author or authors., +	 * @see org.springframework.jdbc.support.nativejdbc.OracleJdbc4NativeJdbcExtractor, +	 * <p>This implementation calls <code>BLOB.open(BLOB.MODE_READONLY)</code> or, +	 * <code>CLOB.open(CLOB.MODE_READONLY)</code> on any non-temporary LOBs if, +	 * <code>releaseResourcesAfterRead</code> property is set to <code>true</code>., +		if (this.releaseResourcesAfterRead) {, +		if (this.releaseResourcesAfterRead) {, +, +			return (nativeJdbcExtractor != null ?, +					nativeJdbcExtractor.getNativeConnectionFromStatement(ps) : ps.getConnection());, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/lob/OracleLobHandler.java, + * Copyright 2002-2010 the original author or authors., +	 * @see org.springframework.jdbc.support.nativejdbc.OracleJdbc4NativeJdbcExtractor, +	 * <p>This implementation calls <code>BLOB.open(BLOB.MODE_READONLY)</code> or, +	 * <code>CLOB.open(CLOB.MODE_READONLY)</code> on any non-temporary LOBs if, +	 * <code>releaseResourcesAfterRead</code> property is set to <code>true</code>., +		if (this.releaseResourcesAfterRead) {, +		if (this.releaseResourcesAfterRead) {, +, +			return (nativeJdbcExtractor != null ?, +					nativeJdbcExtractor.getNativeConnectionFromStatement(ps) : ps.getConnection());, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/nativejdbc/Jdbc4NativeJdbcExtractor.java, + * Copyright 2002-2010 the original author or authors., + * You will typically need to specify a vendor {@link #setConnectionType Connection type}, + * / {@link #setStatementType Statement type} / {@link #setResultSetType ResultSet type}, + * to extract, since JDBC 4.0 only actually unwraps to a given target type., + * <p>Note: Only use this when actually running against a JDBC 4.0 driver, with a, + * connection pool that supports the JDBC 4.0 API (i.e. at least accepts JDBC 4.0, + * API calls and passes them through to the underlying driver)! Other than that,, + * there is no need for connection pool specific setup. As of JDBC 4.0,, + * NativeJdbcExtractors will typically be implemented for specific drivers, + * instead of for specific pools (e.g. {@link OracleJdbc4NativeJdbcExtractor})., +	private Class<? extends Connection> connectionType = Connection.class;, +, +	private Class<? extends Statement> statementType = Statement.class;, +, +	private Class<? extends PreparedStatement> preparedStatementType = PreparedStatement.class;, +, +	private Class<? extends CallableStatement> callableStatementType = CallableStatement.class;, +, +	private Class<? extends ResultSet> resultSetType = ResultSet.class;, +, +, +	/**, +	 * Set the vendor's Connection type, e.g. <code>oracle.jdbc.OracleConnection</code>., +	 */, +	public void setConnectionType(Class<? extends Connection> connectionType) {, +		this.connectionType = connectionType;, +	}, +, +	/**, +	 * Set the vendor's Statement type, e.g. <code>oracle.jdbc.OracleStatement</code>., +	 */, +	public void setStatementType(Class<? extends Statement> statementType) {, +		this.statementType = statementType;, +	}, +, +	/**, +	 * Set the vendor's PreparedStatement type, e.g. <code>oracle.jdbc.OraclePreparedStatement</code>., +	 */, +	public void setPreparedStatementType(Class<? extends PreparedStatement> preparedStatementType) {, +		this.preparedStatementType = preparedStatementType;, +	}, +, +	/**, +	 * Set the vendor's CallableStatement type, e.g. <code>oracle.jdbc.OracleCallableStatement</code>., +	 */, +	public void setCallableStatementType(Class<? extends CallableStatement> callableStatementType) {, +		this.callableStatementType = callableStatementType;, +	}, +, +	/**, +	 * Set the vendor's ResultSet type, e.g. <code>oracle.jdbc.OracleResultSet</code>., +	 */, +	public void setResultSetType(Class<? extends ResultSet> resultSetType) {, +		this.resultSetType = resultSetType;, +	}, +, +, +		return con.unwrap(this.connectionType);, +		return stmt.unwrap(this.statementType);, +		return ps.unwrap(this.preparedStatementType);, +		return cs.unwrap(this.callableStatementType);, +		return rs.unwrap(this.resultSetType);, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/lob/OracleLobHandler.java, + * Copyright 2002-2010 the original author or authors., +	 * @see org.springframework.jdbc.support.nativejdbc.OracleJdbc4NativeJdbcExtractor, +	 * <p>This implementation calls <code>BLOB.open(BLOB.MODE_READONLY)</code> or, +	 * <code>CLOB.open(CLOB.MODE_READONLY)</code> on any non-temporary LOBs if, +	 * <code>releaseResourcesAfterRead</code> property is set to <code>true</code>., +		if (this.releaseResourcesAfterRead) {, +		if (this.releaseResourcesAfterRead) {, +, +			return (nativeJdbcExtractor != null ?, +					nativeJdbcExtractor.getNativeConnectionFromStatement(ps) : ps.getConnection());, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/nativejdbc/Jdbc4NativeJdbcExtractor.java, + * Copyright 2002-2010 the original author or authors., + * You will typically need to specify a vendor {@link #setConnectionType Connection type}, + * / {@link #setStatementType Statement type} / {@link #setResultSetType ResultSet type}]