[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +		if (resourceHandlerName == null) {, +		String order = element.getAttribute("order");, +		// use a default of near-lowest precedence, still allowing for even lower precedence in other mappings, +		handlerMappingDef.getPropertyValues().add("order", StringUtils.hasText(order) ? order : Ordered.LOWEST_PRECEDENCE - 1);, +	        return null;, +, +		resourceHandlerDef.getPropertyValues().add("locations", StringUtils.commaDelimitedListToStringArray(locationAttr));, +, +		String cacheSeconds = element.getAttribute("cache-period");, +		if (StringUtils.hasText(cacheSeconds)) {, +			resourceHandlerDef.getPropertyValues().add("cacheSeconds", cacheSeconds);, +		}, +, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +		if (resourceHandlerName == null) {, +		String order = element.getAttribute("order");, +		// use a default of near-lowest precedence, still allowing for even lower precedence in other mappings, +		handlerMappingDef.getPropertyValues().add("order", StringUtils.hasText(order) ? order : Ordered.LOWEST_PRECEDENCE - 1);, +	        return null;, +, +		resourceHandlerDef.getPropertyValues().add("locations", StringUtils.commaDelimitedListToStringArray(locationAttr));, +, +		String cacheSeconds = element.getAttribute("cache-period");, +		if (StringUtils.hasText(cacheSeconds)) {, +			resourceHandlerDef.getPropertyValues().add("cacheSeconds", cacheSeconds);, +		}, +, +, +++ b/org.springframework.web.servlet/src/main/resources/org/springframework/web/servlet/config/spring-mvc-3.0.xsd, +			<xsd:documentation source="java:org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"><![CDATA[, +					<xsd:documentation><![CDATA[, +	The URL mapping pattern, within the current Servlet context, to use for serving resources from this handler, such as "/resources/**", +					]]></xsd:documentation>, +					<xsd:documentation><![CDATA[, +	The resource location from which to serve static content, specified at a Spring Resource pattern., +	Each location must point to a valid directory. Multiple locations may be specified as a comma-separated list,, +	and the locations will be checked for a given resource in the order specified. For example, a value of, +	"/, classpath:/META-INF/public-web-resources/" will allow resources to be served both from the web app, +	root and from any JAR on the classpath  that contains a /META-INF/public-web-resources/ directory,, +	with resources in the web app root taking precedence., +					]]></xsd:documentation>, +			<xsd:attribute name="cache-period" type="xsd:string">, +				<xsd:annotation>, +					<xsd:documentation>, +						<![CDATA[, +	Specifies the cache period for the resources served by this resource handler, in seconds., +	The default is to not send any cache headers but rather to rely on last-modified timestamps only., +	Set this to 0 in order to send cache headers that prevent caching, or to a positive number of, +	seconds in order to send cache headers with the given max-age value., +					]]></xsd:documentation>, +				</xsd:annotation>, +			</xsd:attribute>, +			<xsd:attribute name="order" type="xsd:int">, +					]]></xsd:documentation>, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +		if (resourceHandlerName == null) {, +		String order = element.getAttribute("order");, +		// use a default of near-lowest precedence, still allowing for even lower precedence in other mappings, +		handlerMappingDef.getPropertyValues().add("order", StringUtils.hasText(order) ? order : Ordered.LOWEST_PRECEDENCE - 1);, +	        return null;, +, +		resourceHandlerDef.getPropertyValues().add("locations", StringUtils.commaDelimitedListToStringArray(locationAttr));, +, +		String cacheSeconds = element.getAttribute("cache-period");, +		if (StringUtils.hasText(cacheSeconds)) {, +			resourceHandlerDef.getPropertyValues().add("cacheSeconds", cacheSeconds);, +		}, +, +, +++ b/org.springframework.web.servlet/src/main/resources/org/springframework/web/servlet/config/spring-mvc-3.0.xsd, +			<xsd:documentation source="java:org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"><![CDATA[, +					<xsd:documentation><![CDATA[, +	The URL mapping pattern, within the current Servlet context, to use for serving resources from this handler, such as "/resources/**", +					]]></xsd:documentation>, +					<xsd:documentation><![CDATA[, +	The resource location from which to serve static content, specified at a Spring Resource pattern., +	Each location must point to a valid directory. Multiple locations may be specified as a comma-separated list,, +	and the locations will be checked for a given resource in the order specified. For example, a value of, +	"/, classpath:/META-INF/public-web-resources/" will allow resources to be served both from the web app, +	root and from any JAR on the classpath  that contains a /META-INF/public-web-resources/ directory,, +	with resources in the web app root taking precedence., +					]]></xsd:documentation>, +			<xsd:attribute name="cache-period" type="xsd:string">, +				<xsd:annotation>, +					<xsd:documentation>, +						<![CDATA[, +	Specifies the cache period for the resources served by this resource handler, in seconds., +	The default is to not send any cache headers but rather to rely on last-modified timestamps only., +	Set this to 0 in order to send cache headers that prevent caching, or to a positive number of, +	seconds in order to send cache headers with the given max-age value., +					]]></xsd:documentation>, +				</xsd:annotation>, +			</xsd:attribute>, +			<xsd:attribute name="order" type="xsd:int">, +					]]></xsd:documentation>, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +		if (resourceHandlerName == null) {]