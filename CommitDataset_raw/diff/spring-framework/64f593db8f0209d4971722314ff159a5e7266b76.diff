[+++ b/spring-test/src/main/java/org/springframework/test/context/ContextConfigurationAttributes.java, +import org.springframework.core.annotation.AnnotationAttributes;, +		return resolveLocations(declaringClass, contextConfiguration.locations(), contextConfiguration.value());, +	}, +, +	/**, +	 * Resolve resource locations from the supplied {@code locations} and, +	 * {@code value} arrays, which correspond to attributes of the same names in, +	 * the {@link ContextConfiguration} annotation., +	 *, +	 * @throws IllegalStateException if both the locations and value attributes have been declared, +	 */, +	private static String[] resolveLocations(Class<?> declaringClass, String[] locations, String[] value) {, +		if (!ObjectUtils.isEmpty(value) && !ObjectUtils.isEmpty(locations)) {, +				ObjectUtils.nullSafeToString(value), ObjectUtils.nullSafeToString(locations));, +		else if (!ObjectUtils.isEmpty(value)) {, +			locations = value;, +	 * supplied {@link ContextConfiguration @ContextConfiguration} annotation and, +	 * the {@linkplain Class test class} that declared it., +	 * @param declaringClass the test class that declared {@code @ContextConfiguration}, +	 * @param annAttrs the annotation attributes from which to retrieve the attributes, +	 */, +	@SuppressWarnings("unchecked"), +	public ContextConfigurationAttributes(Class<?> declaringClass, AnnotationAttributes annAttrs) {, +		this(, +			declaringClass,, +			resolveLocations(declaringClass, annAttrs.getStringArray("locations"), annAttrs.getStringArray("value")),, +			annAttrs.getClassArray("classes"),, +			annAttrs.getBoolean("inheritLocations"),, +			(Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>[]) annAttrs.getClassArray("initializers"),, +			annAttrs.getBoolean("inheritInitializers"), annAttrs.getString("name"),, +			(Class<? extends ContextLoader>) annAttrs.getClass("loader"));, +	}, +, +	/**, +	 * Construct a new {@link ContextConfigurationAttributes} instance for the, +++ b/spring-test/src/main/java/org/springframework/test/context/ContextConfigurationAttributes.java, +import org.springframework.core.annotation.AnnotationAttributes;, +		return resolveLocations(declaringClass, contextConfiguration.locations(), contextConfiguration.value());, +	}, +, +	/**, +	 * Resolve resource locations from the supplied {@code locations} and, +	 * {@code value} arrays, which correspond to attributes of the same names in, +	 * the {@link ContextConfiguration} annotation., +	 *, +	 * @throws IllegalStateException if both the locations and value attributes have been declared, +	 */, +	private static String[] resolveLocations(Class<?> declaringClass, String[] locations, String[] value) {, +		if (!ObjectUtils.isEmpty(value) && !ObjectUtils.isEmpty(locations)) {, +				ObjectUtils.nullSafeToString(value), ObjectUtils.nullSafeToString(locations));, +		else if (!ObjectUtils.isEmpty(value)) {, +			locations = value;, +	 * supplied {@link ContextConfiguration @ContextConfiguration} annotation and, +	 * the {@linkplain Class test class} that declared it., +	 * @param declaringClass the test class that declared {@code @ContextConfiguration}, +	 * @param annAttrs the annotation attributes from which to retrieve the attributes, +	 */, +	@SuppressWarnings("unchecked"), +	public ContextConfigurationAttributes(Class<?> declaringClass, AnnotationAttributes annAttrs) {, +		this(, +			declaringClass,, +			resolveLocations(declaringClass, annAttrs.getStringArray("locations"), annAttrs.getStringArray("value")),, +			annAttrs.getClassArray("classes"),, +			annAttrs.getBoolean("inheritLocations"),, +			(Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>[]) annAttrs.getClassArray("initializers"),, +			annAttrs.getBoolean("inheritInitializers"), annAttrs.getString("name"),, +			(Class<? extends ContextLoader>) annAttrs.getClass("loader"));, +	}, +, +	/**, +	 * Construct a new {@link ContextConfigurationAttributes} instance for the, +++ b/spring-test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +import org.springframework.core.annotation.AnnotationAttributes;, +	 * Convenience method for creating a {@link ContextConfigurationAttributes}, +	 * instance from the supplied {@link ContextConfiguration} annotation and, +	 * declaring class and then adding the attributes to the supplied list., +	 * Convenience method for creating a {@link ContextConfigurationAttributes}, +	 * instance from the supplied {@link AnnotationAttributes} and declaring, +	 * class and then adding the attributes to the supplied list., +	 *, +	 * @since 4.0, +	 */, +	private static void convertAnnotationAttributesToConfigAttributesAndAddToList(AnnotationAttributes annAttrs,, +			Class<?> declaringClass, final List<ContextConfigurationAttributes> attributesList) {, +		if (logger.isTraceEnabled()) {, +			logger.trace(String.format("Retrieved @ContextConfiguration attributes [%s] for declaring class [%s].",, +				annAttrs, declaringClass.getName()));, +		}, +, +		ContextConfigurationAttributes attributes = new ContextConfigurationAttributes(declaringClass, annAttrs);, +		if (logger.isTraceEnabled()) {, +			logger.trace("Resolved context configuration attributes: " + attributes);, +		}, +		attributesList.add(attributes);, +	}, +, +	/**, +	 * @throws IllegalStateException if no class in the class hierarchy declares, +	 * {@code @ContextHierarchy}.]