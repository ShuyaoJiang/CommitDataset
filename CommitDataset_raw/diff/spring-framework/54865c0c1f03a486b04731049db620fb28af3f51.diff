[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/PropertyAccessor.java, +import org.springframework.core.convert.TypeDescriptor;, +, +	 * Called to retrieve a type descriptor that describes the type of the property., +	 * @param context the evaluation context in which the access is being attempted, +	 * @param target the target object upon which the property is being accessed, +	 * @param name the name of the property being accessed, +	 * @return a type descriptor that describes the type of this property., +	 */, +	TypeDescriptor getTypeDescriptor(EvaluationContext context, Object target, String name);, +, +	/**, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/PropertyAccessor.java, +import org.springframework.core.convert.TypeDescriptor;, +, +	 * Called to retrieve a type descriptor that describes the type of the property., +	 * @param context the evaluation context in which the access is being attempted, +	 * @param target the target object upon which the property is being accessed, +	 * @param name the name of the property being accessed, +	 * @return a type descriptor that describes the type of this property., +	 */, +	TypeDescriptor getTypeDescriptor(EvaluationContext context, Object target, String name);, +, +	/**, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +import org.springframework.core.convert.TypeDescriptor;, +, +	// TODO could remove the methods where the target is Class and just keep the TypeDescriptor variants, +	 * Convert (may coerce) a value from one type to another, for example from a boolean to a string., +	 * The typeDescriptor parameter enables support for typed collections - if the caller really wishes they, +	 * can have a List<Integer> for example, rather than simply a List., +	 * @param value the value to be converted, +	 * @param typeDescriptor a type descriptor that supplies extra information about the requested result type, +	 * @return the converted value, +	 * @throws EvaluationException if conversion is not possible, +	 */, +	<T> T convertValue(Object value, TypeDescriptor typeDescriptor) throws EvaluationException;, +, +	/**, +	/**, +	 * Return true if the type converter can convert the specified type to the desired target type., +	 * @param sourceType the type to be converted from, +	 * @param typeDescriptor a type descriptor that supplies extra information about the requested result type, +	 * @return true if that conversion can be performed, +	 */, +	boolean canConvert(Class<?> sourceType, TypeDescriptor typeDescriptor);, +, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/PropertyAccessor.java, +import org.springframework.core.convert.TypeDescriptor;, +, +	 * Called to retrieve a type descriptor that describes the type of the property., +	 * @param context the evaluation context in which the access is being attempted, +	 * @param target the target object upon which the property is being accessed, +	 * @param name the name of the property being accessed, +	 * @return a type descriptor that describes the type of this property., +	 */, +	TypeDescriptor getTypeDescriptor(EvaluationContext context, Object target, String name);, +, +	/**, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +import org.springframework.core.convert.TypeDescriptor;, +, +	// TODO could remove the methods where the target is Class and just keep the TypeDescriptor variants, +	 * Convert (may coerce) a value from one type to another, for example from a boolean to a string., +	 * The typeDescriptor parameter enables support for typed collections - if the caller really wishes they, +	 * can have a List<Integer> for example, rather than simply a List., +	 * @param value the value to be converted, +	 * @param typeDescriptor a type descriptor that supplies extra information about the requested result type, +	 * @return the converted value, +	 * @throws EvaluationException if conversion is not possible, +	 */, +	<T> T convertValue(Object value, TypeDescriptor typeDescriptor) throws EvaluationException;, +, +	/**, +	/**, +	 * Return true if the type converter can convert the specified type to the desired target type., +	 * @param sourceType the type to be converted from, +	 * @param typeDescriptor a type descriptor that supplies extra information about the requested result type, +	 * @return true if that conversion can be performed, +	 */, +	boolean canConvert(Class<?> sourceType, TypeDescriptor typeDescriptor);, +, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, +import org.springframework.core.convert.TypeDescriptor;, +	public <T> T convertValue(Object value, TypeDescriptor targetTypeDescriptor) throws EvaluationException {, +		return this.relatedContext.getTypeConverter().convertValue(value, targetTypeDescriptor);, +	}, +, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/PropertyAccessor.java, +import org.springframework.core.convert.TypeDescriptor;, +, +	 * Called to retrieve a type descriptor that describes the type of the property., +	 * @param context the evaluation context in which the access is being attempted, +	 * @param target the target object upon which the property is being accessed, +	 * @param name the name of the property being accessed, +	 * @return a type descriptor that describes the type of this property., +	 */, +	TypeDescriptor getTypeDescriptor(EvaluationContext context, Object target, String name);, +, +	/**]