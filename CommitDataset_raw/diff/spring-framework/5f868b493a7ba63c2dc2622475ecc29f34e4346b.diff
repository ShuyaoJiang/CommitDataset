[+++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +	private boolean requestOnly;, +, +	/**, +	 * Enables mode in which only the HttpServletRequest is modified. This means that, +	 * {@link HttpServletResponse#sendRedirect(String)} will only work when the application is configured to use, +	 * relative redirects. This can be done with Servlet Container specific setup. For example,  using Tomcat's, +	 * <a href="https://tomcat.apache.org/tomcat-8.0-doc/config/context.html#Common_Attributes">useRelativeRedirects</a>, +	 * attribute., +	 *, +	 * @param requestOnly whether to customize the {@code HttpServletResponse} or not. Default is false (customize the, +	 * {@code HttpServletResponse}), +	 * @since 4.3.10, +	 */, +	public void setRequestOnly(boolean requestOnly) {, +		this.requestOnly = requestOnly;, +	}, +			HttpServletResponse theResponse = this.requestOnly ? response :, +					new ForwardedHeaderExtractingResponse(response, theRequest);, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +	private boolean requestOnly;, +, +	/**, +	 * Enables mode in which only the HttpServletRequest is modified. This means that, +	 * {@link HttpServletResponse#sendRedirect(String)} will only work when the application is configured to use, +	 * relative redirects. This can be done with Servlet Container specific setup. For example,  using Tomcat's, +	 * <a href="https://tomcat.apache.org/tomcat-8.0-doc/config/context.html#Common_Attributes">useRelativeRedirects</a>, +	 * attribute., +	 *, +	 * @param requestOnly whether to customize the {@code HttpServletResponse} or not. Default is false (customize the, +	 * {@code HttpServletResponse}), +	 * @since 4.3.10, +	 */, +	public void setRequestOnly(boolean requestOnly) {, +		this.requestOnly = requestOnly;, +	}, +			HttpServletResponse theResponse = this.requestOnly ? response :, +					new ForwardedHeaderExtractingResponse(response, theRequest);, +++ b/spring-web/src/test/java/org/springframework/web/filter/ForwardedHeaderFilterTests.java, +	@Test, +	public void sendRedirectWhenRequestOnlyAndXForwardedThenUsesRelativeRedirects() throws Exception {, +		this.request.addHeader(X_FORWARDED_PROTO, "https");, +		this.request.addHeader(X_FORWARDED_HOST, "example.com");, +		this.request.addHeader(X_FORWARDED_PORT, "443");, +		this.filter.setRequestOnly(true);, +, +		String location = sendRedirect("/a");, +, +		assertEquals("/a", location);, +	}, +, +	@Test, +	public void sendRedirectWhenRequestOnlyAndNoXForwardedThenUsesRelativeRedirects() throws Exception {, +		this.filter.setRequestOnly(true);, +, +		String location = sendRedirect("/a");, +, +		assertEquals("/a", location);, +	}]