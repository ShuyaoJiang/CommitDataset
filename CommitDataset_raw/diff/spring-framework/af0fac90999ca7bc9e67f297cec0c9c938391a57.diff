[+++ b/org.springframework.web/src/main/java/org/springframework/remoting/jaxws/JaxWsPortClientInterceptor.java, +import java.net.MalformedURLException;, +import java.net.URL;, +import javax.jws.WebService;, +import org.springframework.util.StringUtils;, +		Class<?> ifc = getServiceInterface();, +		if (ifc == null) {, +		WebService ann = ifc.getAnnotation(WebService.class);, +		if (ann != null) {, +			applyDefaultsFromAnnotation(ann);, +		}, +	 * Initialize this client interceptor's properties from the given WebService annotation,, +	 * if necessary and possible (i.e. if "wsdlDocumentUrl", "namespaceUri", "serviceName", +	 * and "portName" haven't been set but corresponding values are declared at the, +	 * annotation level of the specified service interface)., +	 * @param ann the WebService annotation found on the specified service interface, +	 */, +	protected void applyDefaultsFromAnnotation(WebService ann) {, +		if (getWsdlDocumentUrl() == null) {, +			String wsdl = ann.wsdlLocation();, +			if (StringUtils.hasText(wsdl)) {, +				try {, +					setWsdlDocumentUrl(new URL(wsdl));, +				}, +				catch (MalformedURLException ex) {, +					throw new IllegalStateException(, +							"Encountered invalid @Service wsdlLocation value [" + wsdl + "]", ex);, +				}, +			}, +		}, +		if (getNamespaceUri() == null) {, +			String ns = ann.targetNamespace();, +			if (StringUtils.hasText(ns)) {, +				setNamespaceUri(ns);, +			}, +		}, +		if (getServiceName() == null) {, +			String sn = ann.serviceName();, +			if (StringUtils.hasText(sn)) {, +				setServiceName(sn);, +			}, +		}, +		if (getPortName() == null) {, +			String pn = ann.portName();, +			if (StringUtils.hasText(pn)) {, +				setPortName(pn);, +			}, +			else {, +				String nm = ann.name();, +				if (StringUtils.hasText(nm)) {, +					setPortName(nm);, +				}, +			}, +		}, +	}, +, +	/**, +++ b/org.springframework.web/src/main/java/org/springframework/remoting/jaxws/JaxWsPortClientInterceptor.java, +import java.net.MalformedURLException;, +import java.net.URL;, +import javax.jws.WebService;, +import org.springframework.util.StringUtils;, +		Class<?> ifc = getServiceInterface();, +		if (ifc == null) {, +		WebService ann = ifc.getAnnotation(WebService.class);, +		if (ann != null) {, +			applyDefaultsFromAnnotation(ann);, +		}, +	 * Initialize this client interceptor's properties from the given WebService annotation,, +	 * if necessary and possible (i.e. if "wsdlDocumentUrl", "namespaceUri", "serviceName", +	 * and "portName" haven't been set but corresponding values are declared at the, +	 * annotation level of the specified service interface)., +	 * @param ann the WebService annotation found on the specified service interface, +	 */, +	protected void applyDefaultsFromAnnotation(WebService ann) {, +		if (getWsdlDocumentUrl() == null) {, +			String wsdl = ann.wsdlLocation();, +			if (StringUtils.hasText(wsdl)) {, +				try {, +					setWsdlDocumentUrl(new URL(wsdl));, +				}, +				catch (MalformedURLException ex) {, +					throw new IllegalStateException(, +							"Encountered invalid @Service wsdlLocation value [" + wsdl + "]", ex);, +				}, +			}, +		}, +		if (getNamespaceUri() == null) {, +			String ns = ann.targetNamespace();, +			if (StringUtils.hasText(ns)) {, +				setNamespaceUri(ns);, +			}, +		}, +		if (getServiceName() == null) {, +			String sn = ann.serviceName();, +			if (StringUtils.hasText(sn)) {, +				setServiceName(sn);, +			}, +		}, +		if (getPortName() == null) {]