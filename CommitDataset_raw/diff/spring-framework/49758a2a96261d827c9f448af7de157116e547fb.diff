[+++ b/spring-context-support/src/main/java/org/springframework/scheduling/commonj/WorkManagerTaskExecutor.java, + * Copyright 2002-2013 the original author or authors., +import java.util.concurrent.Callable;, + * <p>Note: On the upcoming EE 7 compliant versions of WebLogic and WebSphere, a, + * {@link org.springframework.scheduling.concurrent.DefaultManagedTaskExecutor}, + * should be preferred, following JSR-236 support in Java EE 7., +	 * <p>Alternatively, you can also specify the JNDI name of the target WorkManager., +	 * <p>This can either be a fully qualified JNDI name, or the JNDI name relative, +	 * to the current environment naming context if "resourceRef" is set to "true"., +	public WorkItem schedule(Work work) throws WorkException, IllegalArgumentException {, +	public WorkItem schedule(Work work, WorkListener workListener) throws WorkException {, +	public boolean waitForAll(Collection workItems, long timeout) throws InterruptedException {, +	public Collection waitForAny(Collection workItems, long timeout) throws InterruptedException {, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/commonj/WorkManagerTaskExecutor.java, + * Copyright 2002-2013 the original author or authors., +import java.util.concurrent.Callable;, + * <p>Note: On the upcoming EE 7 compliant versions of WebLogic and WebSphere, a, + * {@link org.springframework.scheduling.concurrent.DefaultManagedTaskExecutor}, + * should be preferred, following JSR-236 support in Java EE 7., +	 * <p>Alternatively, you can also specify the JNDI name of the target WorkManager., +	 * <p>This can either be a fully qualified JNDI name, or the JNDI name relative, +	 * to the current environment naming context if "resourceRef" is set to "true"., +	public WorkItem schedule(Work work) throws WorkException, IllegalArgumentException {, +	public WorkItem schedule(Work work, WorkListener workListener) throws WorkException {, +	public boolean waitForAll(Collection workItems, long timeout) throws InterruptedException {, +	public Collection waitForAny(Collection workItems, long timeout) throws InterruptedException {, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskExecutor.java, + * exposing a long-running hint based on {@link SchedulingAwareRunnable} and an identity, + * name based on the given Runnable/Callable's {@code toString()}. For JSR-236 style, + * lookup in a Java EE 7 environment, consider using {@link DefaultManagedTaskExecutor}., + * @see DefaultManagedTaskExecutor, +	private static Class<?> managedExecutorServiceClass;, +			managedExecutorServiceClass = ClassUtils.forName(, +			managedExecutorServiceClass = null;, +			if (managedExecutorServiceClass != null && managedExecutorServiceClass.isInstance(concurrentExecutor)) {, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/commonj/WorkManagerTaskExecutor.java, + * Copyright 2002-2013 the original author or authors., +import java.util.concurrent.Callable;, + * <p>Note: On the upcoming EE 7 compliant versions of WebLogic and WebSphere, a, + * {@link org.springframework.scheduling.concurrent.DefaultManagedTaskExecutor}, + * should be preferred, following JSR-236 support in Java EE 7., +	 * <p>Alternatively, you can also specify the JNDI name of the target WorkManager., +	 * <p>This can either be a fully qualified JNDI name, or the JNDI name relative, +	 * to the current environment naming context if "resourceRef" is set to "true"., +	public WorkItem schedule(Work work) throws WorkException, IllegalArgumentException {, +	public WorkItem schedule(Work work, WorkListener workListener) throws WorkException {, +	public boolean waitForAll(Collection workItems, long timeout) throws InterruptedException {, +	public Collection waitForAny(Collection workItems, long timeout) throws InterruptedException {, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskExecutor.java, + * exposing a long-running hint based on {@link SchedulingAwareRunnable} and an identity, + * name based on the given Runnable/Callable's {@code toString()}. For JSR-236 style, + * lookup in a Java EE 7 environment, consider using {@link DefaultManagedTaskExecutor}., + * @see DefaultManagedTaskExecutor, +	private static Class<?> managedExecutorServiceClass;, +			managedExecutorServiceClass = ClassUtils.forName(, +			managedExecutorServiceClass = null;, +			if (managedExecutorServiceClass != null && managedExecutorServiceClass.isInstance(concurrentExecutor)) {, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskScheduler.java, + * against the {@code java.util.concurrent.ScheduledExecutorService} API. For JSR-236 style, + * lookup in a Java EE 7 environment, consider using {@link DefaultManagedTaskScheduler}., + * @see DefaultManagedTaskScheduler, +	private static Class<?> managedScheduledExecutorServiceClass;, +			managedScheduledExecutorServiceClass = ClassUtils.forName(, +			managedScheduledExecutorServiceClass = null;, +			this.enterpriseConcurrentScheduler = (managedScheduledExecutorServiceClass != null &&, +					managedScheduledExecutorServiceClass.isInstance(scheduledExecutor));, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/commonj/WorkManagerTaskExecutor.java, + * Copyright 2002-2013 the original author or authors., +import java.util.concurrent.Callable;, + * <p>Note: On the upcoming EE 7 compliant versions of WebLogic and WebSphere, a, + * {@link org.springframework.scheduling.concurrent.DefaultManagedTaskExecutor}, + * should be preferred, following JSR-236 support in Java EE 7., +	 * <p>Alternatively, you can also specify the JNDI name of the target WorkManager., +	 * <p>This can either be a fully qualified JNDI name, or the JNDI name relative, +	 * to the current environment naming context if "resourceRef" is set to "true"., +	public WorkItem schedule(Work work) throws WorkException, IllegalArgumentException {, +	public WorkItem schedule(Work work, WorkListener workListener) throws WorkException {, +	public boolean waitForAll(Collection workItems, long timeout) throws InterruptedException {, +	public Collection waitForAny(Collection workItems, long timeout) throws InterruptedException {, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskExecutor.java, + * exposing a long-running hint based on {@link SchedulingAwareRunnable} and an identity, + * name based on the given Runnable/Callable's {@code toString()}. For JSR-236 style, + * lookup in a Java EE 7 environment, consider using {@link DefaultManagedTaskExecutor}., + * @see DefaultManagedTaskExecutor, +	private static Class<?> managedExecutorServiceClass;, +			managedExecutorServiceClass = ClassUtils.forName(, +			managedExecutorServiceClass = null;, +			if (managedExecutorServiceClass != null && managedExecutorServiceClass.isInstance(concurrentExecutor)) {, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskScheduler.java, + * against the {@code java.util.concurrent.ScheduledExecutorService} API. For JSR-236 style, + * lookup in a Java EE 7 environment, consider using {@link DefaultManagedTaskScheduler}., + * @see DefaultManagedTaskScheduler, +	private static Class<?> managedScheduledExecutorServiceClass;, +			managedScheduledExecutorServiceClass = ClassUtils.forName(, +			managedScheduledExecutorServiceClass = null;, +			this.enterpriseConcurrentScheduler = (managedScheduledExecutorServiceClass != null &&, +					managedScheduledExecutorServiceClass.isInstance(scheduledExecutor));, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/DefaultManagedAwareThreadFactory.java, +/*, + * Copyright 2002-2013 the original author or authors.]