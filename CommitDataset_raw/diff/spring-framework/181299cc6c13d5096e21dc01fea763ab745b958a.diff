[+++ b/spring-test/src/main/java/org/springframework/test/context/support/AbstractDelegatingSmartContextLoader.java, +			return mergedConfig.hasClasses() && !mergedConfig.hasLocations();, +			return mergedConfig.hasLocations() && !mergedConfig.hasClasses();, +			"Cannot process locations AND classes for context configuration %s: ", +					+ "configure one or the other, but not both.", configAttributes));, +					"Neither %s nor %s was able to detect defaults, and no ApplicationContextInitializers ", +							+ "were declared for context configuration %s", name(getXmlLoader()),, +					"Configuration error: both default locations AND default configuration classes ", +							+ "were detected for context configuration %s; configure one or the other, but not both.",, +		if (mergedConfig.hasLocations() && mergedConfig.hasClasses()) {, +			throw new IllegalStateException(String.format(, +				"Neither %s nor %s supports loading an ApplicationContext from %s: ", +						+ "declare either 'locations' or 'classes' but not both.", name(getXmlLoader()),, +				name(getAnnotationConfigLoader()), mergedConfig));, +		}, +, +		// else..., +		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. ", +				+ "Call processContextConfiguration(ContextConfigurationAttributes) instead.");, +		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. ", +				+ "Call loadContext(MergedContextConfiguration) instead.");, +++ b/spring-test/src/main/java/org/springframework/test/context/support/AbstractDelegatingSmartContextLoader.java, +			return mergedConfig.hasClasses() && !mergedConfig.hasLocations();, +			return mergedConfig.hasLocations() && !mergedConfig.hasClasses();, +			"Cannot process locations AND classes for context configuration %s: ", +					+ "configure one or the other, but not both.", configAttributes));, +					"Neither %s nor %s was able to detect defaults, and no ApplicationContextInitializers ", +							+ "were declared for context configuration %s", name(getXmlLoader()),, +					"Configuration error: both default locations AND default configuration classes ", +							+ "were detected for context configuration %s; configure one or the other, but not both.",, +		if (mergedConfig.hasLocations() && mergedConfig.hasClasses()) {, +			throw new IllegalStateException(String.format(, +				"Neither %s nor %s supports loading an ApplicationContext from %s: ", +						+ "declare either 'locations' or 'classes' but not both.", name(getXmlLoader()),, +				name(getAnnotationConfigLoader()), mergedConfig));, +		}, +, +		// else..., +		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. ", +				+ "Call processContextConfiguration(ContextConfigurationAttributes) instead.");, +		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. ", +				+ "Call loadContext(MergedContextConfiguration) instead.");, +++ b/spring-test/src/test/java/org/springframework/test/context/support/DelegatingSmartContextLoaderTests.java, + * Copyright 2002-2014 the original author or authors., +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +, +	@Rule, +	public ExpectedException expectedException = ExpectedException.none();, +, +	@Test, +		expectedException.expect(IllegalStateException.class);, +		expectedException.expectMessage(startsWith("Neither"));, +		expectedException.expectMessage(containsString("was able to detect defaults"));, +, +	@Test, +		expectedException.expect(IllegalStateException.class);, +		expectedException.expectMessage(containsString("both default locations AND default configuration classes were detected"));, +, +	@Test, +		expectedException.expect(IllegalStateException.class);, +		expectedException.expectMessage(startsWith("Neither"));, +		expectedException.expectMessage(containsString("was able to load an ApplicationContext from"));, +, +	/**, +	 * @since 4.1, +	 */, +	@Test, +	public void loadContextWithLocationsAndConfigurationClasses() throws Exception {, +		expectedException.expect(IllegalStateException.class);, +		expectedException.expectMessage(startsWith("Neither"));, +		expectedException.expectMessage(endsWith("declare either 'locations' or 'classes' but not both."));, +, +		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(getClass(),, +			new String[] { "test.xml" }, new Class[] { getClass() }, EMPTY_STRING_ARRAY, loader);, +		loader.loadContext(mergedConfig);, +	}, +]