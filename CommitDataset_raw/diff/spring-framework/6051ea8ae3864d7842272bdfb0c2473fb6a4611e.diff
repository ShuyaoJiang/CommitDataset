[+++ b/spring-expression/src/main/java/org/springframework/expression/TypeComparator.java, + * Instances of a type comparator should be able to compare pairs of objects for equality., + * The specification of the return value is the same as for {@link java.lang.Comparable}., + * @see java.lang.Comparable, +	 * Return {@code true} if the comparator can compare these two objects., +	 * @return {@code true} if the comparator can compare these objects, +	/**, +	 * Compare two given objects., +	 * @param firstObject the first object, +	 * @param secondObject the second object, +	 * @return 0 if they are equal, <0 if the first is smaller than the second,, +	 * or >0 if the first is larger than the second, +	 * @throws EvaluationException if a problem occurs during comparison, +	 * (or if they are not comparable in the first place), +	 */, +	int compare(Object firstObject, Object secondObject) throws EvaluationException;, +, +++ b/spring-expression/src/main/java/org/springframework/expression/TypeComparator.java, + * Instances of a type comparator should be able to compare pairs of objects for equality., + * The specification of the return value is the same as for {@link java.lang.Comparable}., + * @see java.lang.Comparable, +	 * Return {@code true} if the comparator can compare these two objects., +	 * @return {@code true} if the comparator can compare these objects, +	/**, +	 * Compare two given objects., +	 * @param firstObject the first object, +	 * @param secondObject the second object, +	 * @return 0 if they are equal, <0 if the first is smaller than the second,, +	 * or >0 if the first is larger than the second, +	 * @throws EvaluationException if a problem occurs during comparison, +	 * (or if they are not comparable in the first place), +	 */, +	int compare(Object firstObject, Object secondObject) throws EvaluationException;, +, +++ b/spring-expression/src/main/java/org/springframework/expression/TypeConverter.java, +	 * @return {@code true} if that conversion can be performed, +	 * Convert (or coerce) a value from one type to another, for example from a, +	 * {@code boolean} to a {@code String}., +	 * <p>The {@link TypeDescriptor} parameters enable support for typed collections:, +	 * A caller may prefer a {@code List&lt;Integer&gt;}, for example, rather than, +	 * simply any {@code List}., +	 * @throws EvaluationException if conversion failed or is not possible to begin with, +++ b/spring-expression/src/main/java/org/springframework/expression/TypeComparator.java, + * Instances of a type comparator should be able to compare pairs of objects for equality., + * The specification of the return value is the same as for {@link java.lang.Comparable}., + * @see java.lang.Comparable, +	 * Return {@code true} if the comparator can compare these two objects., +	 * @return {@code true} if the comparator can compare these objects, +	/**, +	 * Compare two given objects., +	 * @param firstObject the first object, +	 * @param secondObject the second object, +	 * @return 0 if they are equal, <0 if the first is smaller than the second,, +	 * or >0 if the first is larger than the second, +	 * @throws EvaluationException if a problem occurs during comparison, +	 * (or if they are not comparable in the first place), +	 */, +	int compare(Object firstObject, Object secondObject) throws EvaluationException;, +, +++ b/spring-expression/src/main/java/org/springframework/expression/TypeConverter.java, +	 * @return {@code true} if that conversion can be performed, +	 * Convert (or coerce) a value from one type to another, for example from a, +	 * {@code boolean} to a {@code String}., +	 * <p>The {@link TypeDescriptor} parameters enable support for typed collections:, +	 * A caller may prefer a {@code List&lt;Integer&gt;}, for example, rather than, +	 * simply any {@code List}., +	 * @throws EvaluationException if conversion failed or is not possible to begin with, +++ b/spring-expression/src/main/java/org/springframework/expression/TypeLocator.java, + * Implementers of this interface are expected to be able to locate types., + * They may use a custom {@link ClassLoader} and/or deal with common, + * package prefixes (e.g. {@code java.lang}) however they wish., + *, + * <p>See {@link org.springframework.expression.spel.support.StandardTypeLocator}, + * for an example implementation., +	 * Find a type by name. The name may or may not be fully qualified, +	 * (e.g. {@code String} or {@code java.lang.String})., +	 * @param typeName the type to be located, +	 * @return the {@code Class} object representing that type, +	 * @throws EvaluationException if there is a problem finding the type, +	Class<?> findType(String typeName) throws EvaluationException;, +++ b/spring-expression/src/main/java/org/springframework/expression/TypeComparator.java, + * Instances of a type comparator should be able to compare pairs of objects for equality., + * The specification of the return value is the same as for {@link java.lang.Comparable}., + * @see java.lang.Comparable, +	 * Return {@code true} if the comparator can compare these two objects., +	 * @return {@code true} if the comparator can compare these objects, +	/**, +	 * Compare two given objects., +	 * @param firstObject the first object, +	 * @param secondObject the second object, +	 * @return 0 if they are equal, <0 if the first is smaller than the second,, +	 * or >0 if the first is larger than the second, +	 * @throws EvaluationException if a problem occurs during comparison, +	 * (or if they are not comparable in the first place), +	 */, +	int compare(Object firstObject, Object secondObject) throws EvaluationException;, +, +++ b/spring-expression/src/main/java/org/springframework/expression/TypeConverter.java, +	 * @return {@code true} if that conversion can be performed, +	 * Convert (or coerce) a value from one type to another, for example from a]