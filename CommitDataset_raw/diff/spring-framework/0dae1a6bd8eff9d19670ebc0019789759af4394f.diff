[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, +		try {, +		} catch (Exception ex) {, +			if (logger.isTraceEnabled()) {, +				logger.trace(getReturnValueHandlingErrorMessage("Error handling return value", returnValue), ex);, +			}, +			throw ex;, +		}, +	}, +, +	private String getReturnValueHandlingErrorMessage(String message, Object returnValue) {, +		StringBuilder sb = new StringBuilder(message);, +		if (returnValue != null) {, +			sb.append(" [type=" + returnValue.getClass().getName() + "] ");, +		}, +		sb.append("[value=" + returnValue + "]");, +		return getDetailedErrorMessage(sb.toString());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, +		try {, +		} catch (Exception ex) {, +			if (logger.isTraceEnabled()) {, +				logger.trace(getReturnValueHandlingErrorMessage("Error handling return value", returnValue), ex);, +			}, +			throw ex;, +		}, +	}, +, +	private String getReturnValueHandlingErrorMessage(String message, Object returnValue) {, +		StringBuilder sb = new StringBuilder(message);, +		if (returnValue != null) {, +			sb.append(" [type=" + returnValue.getClass().getName() + "] ");, +		}, +		sb.append("[value=" + returnValue + "]");, +		return getDetailedErrorMessage(sb.toString());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/DefaultMethodReturnValueHandler.java, +			// should not happen.., +			Method method = returnType.getMethod();, +			String returnTypeName = returnType.getParameterType().getName();, +			throw new UnsupportedOperationException("Unknown return type: " + returnTypeName + " in method: " + method);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, +		try {, +		} catch (Exception ex) {, +			if (logger.isTraceEnabled()) {, +				logger.trace(getReturnValueHandlingErrorMessage("Error handling return value", returnValue), ex);, +			}, +			throw ex;, +		}, +	}, +, +	private String getReturnValueHandlingErrorMessage(String message, Object returnValue) {, +		StringBuilder sb = new StringBuilder(message);, +		if (returnValue != null) {, +			sb.append(" [type=" + returnValue.getClass().getName() + "] ");, +		}, +		sb.append("[value=" + returnValue + "]");, +		return getDetailedErrorMessage(sb.toString());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/DefaultMethodReturnValueHandler.java, +			// should not happen.., +			Method method = returnType.getMethod();, +			String returnTypeName = returnType.getParameterType().getName();, +			throw new UnsupportedOperationException("Unknown return type: " + returnTypeName + " in method: " + method);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/HttpEntityMethodProcessor.java, +import java.lang.reflect.Method;, +	private Class<?> getHttpEntityType(MethodParameter parameter) {, +		Assert.isAssignable(HttpEntity.class, parameter.getParameterType());, +		ParameterizedType type = (ParameterizedType) parameter.getGenericParameterType();, +		throw new IllegalArgumentException("HttpEntity parameter (" + parameter.getParameterName() + ") ", +				+ "in method " + parameter.getMethod() + "is not parameterized");, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, +		try {, +		} catch (Exception ex) {, +			if (logger.isTraceEnabled()) {, +				logger.trace(getReturnValueHandlingErrorMessage("Error handling return value", returnValue), ex);, +			}, +			throw ex;, +		}, +	}, +, +	private String getReturnValueHandlingErrorMessage(String message, Object returnValue) {, +		StringBuilder sb = new StringBuilder(message);, +		if (returnValue != null) {, +			sb.append(" [type=" + returnValue.getClass().getName() + "] ");, +		}, +		sb.append("[value=" + returnValue + "]");, +		return getDetailedErrorMessage(sb.toString());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/DefaultMethodReturnValueHandler.java, +			// should not happen.., +			Method method = returnType.getMethod();, +			String returnTypeName = returnType.getParameterType().getName();, +			throw new UnsupportedOperationException("Unknown return type: " + returnTypeName + " in method: " + method);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/HttpEntityMethodProcessor.java, +import java.lang.reflect.Method;, +	private Class<?> getHttpEntityType(MethodParameter parameter) {, +		Assert.isAssignable(HttpEntity.class, parameter.getParameterType());, +		ParameterizedType type = (ParameterizedType) parameter.getGenericParameterType();, +		throw new IllegalArgumentException("HttpEntity parameter (" + parameter.getParameterName() + ") ", +				+ "in method " + parameter.getMethod() + "is not parameterized");, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/RequestPartMethodArgumentResolver.java, +								  NativeWebRequest request, , +		ServletRequest servletRequest = request.getNativeRequest(ServletRequest.class);]