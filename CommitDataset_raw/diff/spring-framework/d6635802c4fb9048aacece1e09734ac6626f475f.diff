[+++ b/spring-beans/src/test/java/org/springframework/beans/BeanWrapperGenericsTests.java, + * Copyright 2002-2014 the original author or authors., +import static org.junit.Assert.*;, +, +	@Test, +	public void testUntypedPropertyWithMapAtRuntime() {, +		class Holder<D> {, +			private final D data;, +			public Holder(D data) {, +				this.data = data;, +			}, +			public D getData() {, +				return this.data;, +			}, +		}, +, +		Map<String, Object> data = new HashMap<String, Object>();, +		data.put("x", "y");, +		Holder<Map<String, Object>> context = new Holder<Map<String,Object>>(data);, +, +		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(context);, +		assertEquals("y", bw.getPropertyValue("data['x']"));, +, +		bw.setPropertyValue("data['message']", "it works!");, +		assertEquals(data.get("message"), "it works!");, +	}, +, +++ b/spring-beans/src/test/java/org/springframework/beans/BeanWrapperGenericsTests.java, + * Copyright 2002-2014 the original author or authors., +import static org.junit.Assert.*;, +, +	@Test, +	public void testUntypedPropertyWithMapAtRuntime() {, +		class Holder<D> {, +			private final D data;, +			public Holder(D data) {, +				this.data = data;, +			}, +			public D getData() {, +				return this.data;, +			}, +		}, +, +		Map<String, Object> data = new HashMap<String, Object>();, +		data.put("x", "y");, +		Holder<Map<String, Object>> context = new Holder<Map<String,Object>>(data);, +, +		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(context);, +		assertEquals("y", bw.getPropertyValue("data['x']"));, +, +		bw.setPropertyValue("data['message']", "it works!");, +		assertEquals(data.get("message"), "it works!");, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +			return null;, +++ b/spring-beans/src/test/java/org/springframework/beans/BeanWrapperGenericsTests.java, + * Copyright 2002-2014 the original author or authors., +import static org.junit.Assert.*;, +, +	@Test, +	public void testUntypedPropertyWithMapAtRuntime() {, +		class Holder<D> {, +			private final D data;, +			public Holder(D data) {, +				this.data = data;, +			}, +			public D getData() {, +				return this.data;, +			}, +		}, +, +		Map<String, Object> data = new HashMap<String, Object>();, +		data.put("x", "y");, +		Holder<Map<String, Object>> context = new Holder<Map<String,Object>>(data);, +, +		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(context);, +		assertEquals("y", bw.getPropertyValue("data['x']"));, +, +		bw.setPropertyValue("data['message']", "it works!");, +		assertEquals(data.get("message"), "it works!");, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +			return null;, +++ b/spring-core/src/test/java/org/springframework/core/convert/TypeDescriptorTests.java, + * Copyright 2002-2014 the original author or authors., +, +, +	@Test, +		assertNull(t1);, +	@Test, +		TypeDescriptor t1 = TypeDescriptor.nested(new MethodParameter(getClass().getMethod("test5", String.class), 0), 2);, +		assertNull(t1);, +]