[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java, + * Copyright 2002-2017 the original author or authors., +				try {, +				}, +				catch (IllegalArgumentException ex) {, +					if (request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) != null) {, +						// Error dispatch: ignore locale/timezone parse exceptions, +						if (logger.isDebugEnabled()) {, +							logger.debug("Ignoring invalid locale cookie '" + getCookieName() +, +									"' with value [" + value + "] due to error dispatch: " + ex.getMessage());, +						}, +					}, +					else {, +						throw new IllegalStateException("Invalid locale cookie '" + getCookieName() +, +								"' with value [" + value + "]: " + ex.getMessage());, +					}, +				}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java, + * Copyright 2002-2017 the original author or authors., +				try {, +				}, +				catch (IllegalArgumentException ex) {, +					if (request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) != null) {, +						// Error dispatch: ignore locale/timezone parse exceptions, +						if (logger.isDebugEnabled()) {, +							logger.debug("Ignoring invalid locale cookie '" + getCookieName() +, +									"' with value [" + value + "] due to error dispatch: " + ex.getMessage());, +						}, +					}, +					else {, +						throw new IllegalStateException("Invalid locale cookie '" + getCookieName() +, +								"' with value [" + value + "]: " + ex.getMessage());, +					}, +				}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/i18n/CookieLocaleResolverTests.java, + * Copyright 2002-2017 the original author or authors., +import javax.servlet.ServletException;, +import org.springframework.web.util.WebUtils;, +	public void testResolveLocaleContextWithInvalidLocale() {, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		Cookie cookie = new Cookie("LanguageKoekje", "n-x GMT+1");, +		request.setCookies(cookie);, +, +		CookieLocaleResolver resolver = new CookieLocaleResolver();, +		resolver.setCookieName("LanguageKoekje");, +		try {, +			resolver.resolveLocaleContext(request);, +			fail("Should have thrown IllegalStateException");, +		}, +		catch (IllegalStateException ex) {, +			assertTrue(ex.getMessage().contains("LanguageKoekje"));, +			assertTrue(ex.getMessage().contains("n-x GMT+1"));, +		}, +	}, +, +	@Test, +	public void testResolveLocaleContextWithInvalidLocaleOnErrorDispatch() {, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.addPreferredLocale(Locale.GERMAN);, +		request.setAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE, new ServletException());, +		Cookie cookie = new Cookie("LanguageKoekje", "n-x GMT+1");, +		request.setCookies(cookie);, +, +		CookieLocaleResolver resolver = new CookieLocaleResolver();, +		resolver.setDefaultTimeZone(TimeZone.getTimeZone("GMT+2"));, +		resolver.setCookieName("LanguageKoekje");, +		LocaleContext loc = resolver.resolveLocaleContext(request);, +		assertEquals(Locale.GERMAN, loc.getLocale());, +		assertTrue(loc instanceof TimeZoneAwareLocaleContext);, +		assertEquals(TimeZone.getTimeZone("GMT+2"), ((TimeZoneAwareLocaleContext) loc).getTimeZone());, +	}, +, +	@Test, +	public void testResolveLocaleContextWithInvalidTimeZone() {, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		Cookie cookie = new Cookie("LanguageKoekje", "nl X-MT");, +		request.setCookies(cookie);, +, +		CookieLocaleResolver resolver = new CookieLocaleResolver();, +		resolver.setCookieName("LanguageKoekje");, +		try {, +			resolver.resolveLocaleContext(request);, +			fail("Should have thrown IllegalStateException");, +		}, +		catch (IllegalStateException ex) {, +			assertTrue(ex.getMessage().contains("LanguageKoekje"));, +			assertTrue(ex.getMessage().contains("nl X-MT"));, +		}, +	}, +, +	@Test, +	public void testResolveLocaleContextWithInvalidTimeZoneOnErrorDispatch() {, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.setAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE, new ServletException());, +		Cookie cookie = new Cookie("LanguageKoekje", "nl X-MT");, +		request.setCookies(cookie);, +, +		CookieLocaleResolver resolver = new CookieLocaleResolver();, +		resolver.setDefaultTimeZone(TimeZone.getTimeZone("GMT+2"));, +		resolver.setCookieName("LanguageKoekje");]