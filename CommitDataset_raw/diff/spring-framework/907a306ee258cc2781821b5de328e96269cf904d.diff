[+++ b/spring-core/src/main/java/org/springframework/core/codec/StringDecoder.java, +			logger.debug("Decoded '" + value + "'");, +++ b/spring-core/src/main/java/org/springframework/core/codec/StringDecoder.java, +			logger.debug("Decoded '" + value + "'");, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java, +	public static Flux<Long> testInterval(Duration period, int count) {, +++ b/spring-core/src/main/java/org/springframework/core/codec/StringDecoder.java, +			logger.debug("Decoded '" + value + "'");, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java, +	public static Flux<Long> testInterval(Duration period, int count) {, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/FlushingIntegrationTests.java, + * Integration tests for server response flushing behavior., + * @author Rossen Stoyanchev, +				.bodyToMono(String.class);, +					.consumeNextWith(value -> assertEquals(64 * 1024, value.length())), +			switch (path) {, +				case "/write-and-flush":, +					return response.writeAndFlushWith(, +							testInterval(Duration.ofMillis(50), 2), +									.map(longValue -> wrap("data" + longValue + "\n", response)), +									.map(Flux::just), +									.mergeWith(Flux.never()));, +, +				case "/write-and-complete":, +					return response.writeWith(, +							chunks1K().take(64).map(s -> wrap(s, response)));, +, +				case "/write-and-never-complete":, +					// Reactor requires at least 50 to flush, Tomcat/Undertow 8, Jetty 1, +					return response.writeWith(, +							chunks1K().take(64).map(s -> wrap(s, response)).mergeWith(Flux.never()));, +, +				default:, +		private Flux<String> chunks1K() {, +			return Flux.generate(sink -> {, +				StringBuilder sb = new StringBuilder();, +				do {, +					for (char c : "0123456789".toCharArray()) {, +						sb.append(c);, +						if (sb.length() + 1 == 1024) {, +							sink.next(sb.append("\n").toString());, +							return;, +						}, +					}, +				} while (true);, +			});, +		}, +, +		private DataBuffer wrap(String value, ServerHttpResponse response) {, +			byte[] bytes = value.getBytes(StandardCharsets.UTF_8);, +			return response.bufferFactory().wrap(bytes);, +		}, +	}, +++ b/spring-core/src/main/java/org/springframework/core/codec/StringDecoder.java, +			logger.debug("Decoded '" + value + "'");, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java, +	public static Flux<Long> testInterval(Duration period, int count) {, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/FlushingIntegrationTests.java, + * Integration tests for server response flushing behavior., + * @author Rossen Stoyanchev, +				.bodyToMono(String.class);, +					.consumeNextWith(value -> assertEquals(64 * 1024, value.length())), +			switch (path) {, +				case "/write-and-flush":, +					return response.writeAndFlushWith(, +							testInterval(Duration.ofMillis(50), 2), +									.map(longValue -> wrap("data" + longValue + "\n", response)), +									.map(Flux::just), +									.mergeWith(Flux.never()));, +, +				case "/write-and-complete":, +					return response.writeWith(, +							chunks1K().take(64).map(s -> wrap(s, response)));, +, +				case "/write-and-never-complete":, +					// Reactor requires at least 50 to flush, Tomcat/Undertow 8, Jetty 1, +					return response.writeWith(, +							chunks1K().take(64).map(s -> wrap(s, response)).mergeWith(Flux.never()));, +, +				default:, +		private Flux<String> chunks1K() {, +			return Flux.generate(sink -> {, +				StringBuilder sb = new StringBuilder();, +				do {, +					for (char c : "0123456789".toCharArray()) {, +						sb.append(c);, +						if (sb.length() + 1 == 1024) {, +							sink.next(sb.append("\n").toString());, +							return;, +						}, +					}, +				} while (true);, +			});, +		}, +, +		private DataBuffer wrap(String value, ServerHttpResponse response) {, +			byte[] bytes = value.getBytes(StandardCharsets.UTF_8);, +			return response.bufferFactory().wrap(bytes);, +		}, +	}]