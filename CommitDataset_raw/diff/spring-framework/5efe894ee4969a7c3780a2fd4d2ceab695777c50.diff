[+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +		this.conditionEvaluator = new ConditionEvaluator(registry, environment, null);, +		this.conditionEvaluator = new ConditionEvaluator(this.registry, environment, null);, +		if (this.conditionEvaluator.shouldSkip(abd.getMetadata())) {, +, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +		this.conditionEvaluator = new ConditionEvaluator(registry, environment, null);, +		this.conditionEvaluator = new ConditionEvaluator(this.registry, environment, null);, +		if (this.conditionEvaluator.shouldSkip(abd.getMetadata())) {, +, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, +, +	 * Returns the {@link BeanDefinitionRegistry} used by this scanner, if any., +			this.conditionEvaluator = new ConditionEvaluator(getRegistry(), getEnvironment(), getResourceLoader());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +		this.conditionEvaluator = new ConditionEvaluator(registry, environment, null);, +		this.conditionEvaluator = new ConditionEvaluator(this.registry, environment, null);, +		if (this.conditionEvaluator.shouldSkip(abd.getMetadata())) {, +, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, +, +	 * Returns the {@link BeanDefinitionRegistry} used by this scanner, if any., +			this.conditionEvaluator = new ConditionEvaluator(getRegistry(), getEnvironment(), getResourceLoader());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConditionContext.java, +	 * Return the {@link BeanDefinitionRegistry} that will hold the bean definition, +	 * Return the {@link ConfigurableListableBeanFactory} that will hold the bean, +	 * definition should the condition match or {@code null} if the bean factory, +	 * is not available., +	 * Return the {@link Environment} for which the current application is running, +	 * or {@code null} if no environment is available., +	 * @return the environment or {@code null}, +	 */, +	Environment getEnvironment();, +, +	/**, +	 * Return the {@link ResourceLoader} currently being used or {@code null}, +	 * if the resource loader cannot be obtained., +	 * Return the {@link ClassLoader} that should be used to load additional, +	 * classes or {@code null} if the default classloader should be used., +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +		this.conditionEvaluator = new ConditionEvaluator(registry, environment, null);, +		this.conditionEvaluator = new ConditionEvaluator(this.registry, environment, null);, +		if (this.conditionEvaluator.shouldSkip(abd.getMetadata())) {, +, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, +, +	 * Returns the {@link BeanDefinitionRegistry} used by this scanner, if any., +			this.conditionEvaluator = new ConditionEvaluator(getRegistry(), getEnvironment(), getResourceLoader());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConditionContext.java, +	 * Return the {@link BeanDefinitionRegistry} that will hold the bean definition, +	 * Return the {@link ConfigurableListableBeanFactory} that will hold the bean, +	 * definition should the condition match or {@code null} if the bean factory, +	 * is not available., +	 * Return the {@link Environment} for which the current application is running, +	 * or {@code null} if no environment is available., +	 * @return the environment or {@code null}, +	 */, +	Environment getEnvironment();, +, +	/**, +	 * Return the {@link ResourceLoader} currently being used or {@code null}, +	 * if the resource loader cannot be obtained., +	 * Return the {@link ClassLoader} that should be used to load additional, +	 * classes or {@code null} if the default classloader should be used., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConditionEvaluator.java, +	public ConditionEvaluator(BeanDefinitionRegistry registry, Environment environment, ResourceLoader resourceLoader) {, +		this.context = new ConditionContextImpl(registry, environment, resourceLoader);, +, +		private final BeanDefinitionRegistry registry;, +		private final ConfigurableListableBeanFactory beanFactory;, +		private final Environment environment;, +		private final ResourceLoader resourceLoader;, +		public ConditionContextImpl(BeanDefinitionRegistry registry, Environment environment, ResourceLoader resourceLoader) {, +			this.environment = (environment != null ? environment : deduceEnvironment(registry));, +			this.resourceLoader = (resourceLoader != null ? resourceLoader : deduceResourceLoader(registry));, +		private ConfigurableListableBeanFactory deduceBeanFactory(BeanDefinitionRegistry source) {, +			if (source instanceof ConfigurableApplicationContext) {, +				return (((ConfigurableApplicationContext) source).getBeanFactory());, +			}, +			return null;, +		}, +, +		private Environment deduceEnvironment(BeanDefinitionRegistry source) {, +			if (source instanceof EnvironmentCapable) {, +				return ((EnvironmentCapable) source).getEnvironment();, +			}, +			return null;, +		}, +, +		private ResourceLoader deduceResourceLoader(BeanDefinitionRegistry source) {, +			if (source instanceof ResourceLoader) {, +				return (ResourceLoader) source;, +		public Environment getEnvironment() {, +			return this.environment;, +		}, +]