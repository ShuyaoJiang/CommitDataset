[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, +	public boolean configuredToDynamicallyCreateNullObjects() {, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, +	public boolean configuredToDynamicallyCreateNullObjects() {, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java, +		if (result.getValue()==null && state.configuredToDynamicallyCreateNullObjects() && nextChildIs(Indexer.class,PropertyOrFieldReference.class)) {, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, +	public boolean configuredToDynamicallyCreateNullObjects() {, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java, +		if (result.getValue()==null && state.configuredToDynamicallyCreateNullObjects() && nextChildIs(Indexer.class,PropertyOrFieldReference.class)) {, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java, +import java.util.Map;, +		ExpressionParser parser = new SpelExpressionParser(SpelExpressionParserConfiguration.CreateObjectIfAttemptToReferenceNull | SpelExpressionParserConfiguration.GrowListsOnIndexBeyondSize);, +	@Test, +	public void testCreateMapsOnAttemptToIndexNull01() throws EvaluationException, ParseException {, +		TestClass testClass = new TestClass();, +		StandardEvaluationContext ctx = new StandardEvaluationContext(testClass);, +		ExpressionParser parser = new SpelExpressionParser(SpelExpressionParserConfiguration.CreateObjectIfAttemptToReferenceNull | SpelExpressionParserConfiguration.GrowListsOnIndexBeyondSize);, +		Object o = null;, +		o = parser.parseExpression("map['a']").getValue(ctx);, +		Assert.assertNull(o);, +		o = parser.parseExpression("map").getValue(ctx);, +		Assert.assertNotNull(o);, +		, +		try {, +			o = parser.parseExpression("map2['a']").getValue(ctx);, +			// fail!, +			Assert.fail("map2 should be null, there is no setter");, +		} catch (Exception e) {, +			// success!, +		}, +	}, +, +	@Test, +	public void testCreateObjectsOnAttemptToReferenceNull() throws EvaluationException, ParseException {, +		TestClass testClass = new TestClass();, +		StandardEvaluationContext ctx = new StandardEvaluationContext(testClass);, +		ExpressionParser parser = new SpelExpressionParser(SpelExpressionParserConfiguration.CreateObjectIfAttemptToReferenceNull | SpelExpressionParserConfiguration.GrowListsOnIndexBeyondSize);, +		Object o = null;, +		o = parser.parseExpression("wibble.bar").getValue(ctx);, +		Assert.assertEquals("hello",o);, +		o = parser.parseExpression("wibble").getValue(ctx);, +		Assert.assertNotNull(o);, +		, +		try {, +			o = parser.parseExpression("wibble2.bar").getValue(ctx);, +			// fail!, +			Assert.fail("wibble2 should be null (cannot be initialized dynamically), there is no setter");, +		} catch (Exception e) {, +			// success!, +		}, +	}, +	, +		, +		public Foo wibble;, +		private Foo wibble2;, +		public Map map;, +		public Map<String,Integer> mapStringToInteger;, +		private Map map2;, +		public Map getMap2() { return this.map2; }, +		public Foo getWibble2() { return this.wibble2; }, +//		public void setMap2(Map m) { this.map2 = m; }, +	public static class Foo {, +		public Foo() {}, +		public String bar = "hello";, +	}]