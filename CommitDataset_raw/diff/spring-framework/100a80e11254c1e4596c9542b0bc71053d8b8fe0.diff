[+++ b/org.springframework.context.support/src/test/java/org/springframework/cache/ehcache/EhCacheSupportTests.java, +/*, + * Copyright 2002-2007 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.cache.ehcache;, +, +import junit.framework.TestCase;, +import net.sf.ehcache.Cache;, +import net.sf.ehcache.CacheManager;, +import net.sf.ehcache.Ehcache;, +import net.sf.ehcache.constructs.blocking.BlockingCache;, +import net.sf.ehcache.constructs.blocking.CacheEntryFactory;, +import net.sf.ehcache.constructs.blocking.SelfPopulatingCache;, +import net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;, +import net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache;, +, +import org.springframework.core.io.ClassPathResource;, +, +/**, + * @author Dmitriy Kopylenko, + * @author Juergen Hoeller, + * @since 27.09.2004, + */, +public class EhCacheSupportTests extends TestCase {, +, +	public void testLoadingBlankCacheManager() throws Exception {, +		EhCacheManagerFactoryBean cacheManagerFb = new EhCacheManagerFactoryBean();, +		assertEquals(CacheManager.class, cacheManagerFb.getObjectType());, +		assertTrue("Singleton property", cacheManagerFb.isSingleton());, +		cacheManagerFb.afterPropertiesSet();, +		try {, +			CacheManager cm = (CacheManager) cacheManagerFb.getObject();, +			assertTrue("Loaded CacheManager with no caches", cm.getCacheNames().length == 0);, +			Cache myCache1 = cm.getCache("myCache1");, +			assertTrue("No myCache1 defined", myCache1 == null);, +		}, +		finally {, +			cacheManagerFb.destroy();, +		}, +	}, +, +	public void testLoadingCacheManagerFromConfigFile() throws Exception {, +		EhCacheManagerFactoryBean cacheManagerFb = new EhCacheManagerFactoryBean();, +		cacheManagerFb.setConfigLocation(new ClassPathResource("testEhcache.xml", getClass()));, +		cacheManagerFb.setCacheManagerName("myCacheManager");, +		cacheManagerFb.afterPropertiesSet();, +		try {, +			CacheManager cm = (CacheManager) cacheManagerFb.getObject();, +			assertTrue("Correct number of caches loaded", cm.getCacheNames().length == 1);, +			Cache myCache1 = cm.getCache("myCache1");, +			assertFalse("myCache1 is not eternal", myCache1.isEternal());, +			assertTrue("myCache1.maxElements == 300", myCache1.getMaxElementsInMemory() == 300);, +		}, +		finally {, +			cacheManagerFb.destroy();, +		}, +	}, +, +	public void testEhCacheFactoryBeanWithDefaultCacheManager() throws Exception {, +		doTestEhCacheFactoryBean(false);, +	}, +, +	public void testEhCacheFactoryBeanWithExplicitCacheManager() throws Exception {, +		doTestEhCacheFactoryBean(true);, +	}, +, +	private void doTestEhCacheFactoryBean(boolean useCacheManagerFb) throws Exception {, +		Cache cache = null;, +		EhCacheManagerFactoryBean cacheManagerFb = null;, +		try {, +			EhCacheFactoryBean cacheFb = new EhCacheFactoryBean();, +			assertEquals(Ehcache.class, cacheFb.getObjectType());, +			assertTrue("Singleton property", cacheFb.isSingleton());, +			if (useCacheManagerFb) {, +				cacheManagerFb = new EhCacheManagerFactoryBean();, +				cacheManagerFb.setConfigLocation(new ClassPathResource("testEhcache.xml", getClass()));, +				cacheManagerFb.afterPropertiesSet();, +				cacheFb.setCacheManager((CacheManager) cacheManagerFb.getObject());, +			}, +, +			cacheFb.setCacheName("myCache1");, +			cacheFb.afterPropertiesSet();, +			cache = (Cache) cacheFb.getObject();, +			assertEquals("myCache1", cache.getName());, +			if (useCacheManagerFb){, +				assertEquals("myCache1.maxElements", 300, cache.getMaxElementsInMemory());, +			}]