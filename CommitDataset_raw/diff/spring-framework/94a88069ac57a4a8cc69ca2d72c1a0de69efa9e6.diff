[+++ b/CONTRIBUTING.md, + * Copyright 2002-2013 the original author or authors., +modified a file in 2013 whose header still reads, +then be sure to update it to 2013 appropriately, + * Copyright 2002-2013 the original author or authors., +++ b/CONTRIBUTING.md, + * Copyright 2002-2013 the original author or authors., +modified a file in 2013 whose header still reads, +then be sure to update it to 2013 appropriately, + * Copyright 2002-2013 the original author or authors., +++ b/build.gradle, +		optional(project(":spring-context")), +++ b/CONTRIBUTING.md, + * Copyright 2002-2013 the original author or authors., +modified a file in 2013 whose header still reads, +then be sure to update it to 2013 appropriately, + * Copyright 2002-2013 the original author or authors., +++ b/build.gradle, +		optional(project(":spring-context")), +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy, +				configuration.dependencies.each {, +					def intoCompile = project.merge.into.configurations.getByName("compile"), +					// Protect against changing a compile scope dependency (SPR-10218), +					if(!intoCompile.dependencies.contains(it)) {, +						intoConfiguration.dependencies.add(it), +					}, +				}, +++ b/CONTRIBUTING.md, + * Copyright 2002-2013 the original author or authors., +modified a file in 2013 whose header still reads, +then be sure to update it to 2013 appropriately, + * Copyright 2002-2013 the original author or authors., +++ b/build.gradle, +		optional(project(":spring-context")), +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy, +				configuration.dependencies.each {, +					def intoCompile = project.merge.into.configurations.getByName("compile"), +					// Protect against changing a compile scope dependency (SPR-10218), +					if(!intoCompile.dependencies.contains(it)) {, +						intoConfiguration.dependencies.add(it), +					}, +				}, +++ b/gradle/publish-maven.gradle, +		// sort to make pom dependencies order consistent to ease comparison of older poms, +		generatedPom.dependencies = generatedPom.dependencies.sort { dep ->, +			"$dep.scope:$dep.groupId:$dep.artifactId", +		}, +, +++ b/CONTRIBUTING.md, + * Copyright 2002-2013 the original author or authors., +modified a file in 2013 whose header still reads, +then be sure to update it to 2013 appropriately, + * Copyright 2002-2013 the original author or authors., +++ b/build.gradle, +		optional(project(":spring-context")), +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy, +				configuration.dependencies.each {, +					def intoCompile = project.merge.into.configurations.getByName("compile"), +					// Protect against changing a compile scope dependency (SPR-10218), +					if(!intoCompile.dependencies.contains(it)) {, +						intoConfiguration.dependencies.add(it), +					}, +				}, +++ b/gradle/publish-maven.gradle, +		// sort to make pom dependencies order consistent to ease comparison of older poms, +		generatedPom.dependencies = generatedPom.dependencies.sort { dep ->, +			"$dep.scope:$dep.groupId:$dep.artifactId", +		}, +, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJExpressionPointcutTests.java, +	private void assertDoesNotMatchStringClass(ClassFilter classFilter) {, +		assertFalse("Expression should not match String class", classFilter.matches(String.class));, +	}, +, +++ b/CONTRIBUTING.md, + * Copyright 2002-2013 the original author or authors., +modified a file in 2013 whose header still reads, +then be sure to update it to 2013 appropriately, + * Copyright 2002-2013 the original author or authors., +++ b/build.gradle, +		optional(project(":spring-context")), +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy, +				configuration.dependencies.each {, +					def intoCompile = project.merge.into.configurations.getByName("compile"), +					// Protect against changing a compile scope dependency (SPR-10218), +					if(!intoCompile.dependencies.contains(it)) {, +						intoConfiguration.dependencies.add(it), +					}, +				}, +++ b/gradle/publish-maven.gradle, +		// sort to make pom dependencies order consistent to ease comparison of older poms, +		generatedPom.dependencies = generatedPom.dependencies.sort { dep ->, +			"$dep.scope:$dep.groupId:$dep.artifactId", +		}, +, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJExpressionPointcutTests.java, +	private void assertDoesNotMatchStringClass(ClassFilter classFilter) {, +		assertFalse("Expression should not match String class", classFilter.matches(String.class));, +	}, +]