[+++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, + * Copyright 2002-2014 the original author or authors., +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, + * Copyright 2002-2014 the original author or authors., +++ b/spring-aop/src/main/java/org/springframework/aop/framework/JdkDynamicAopProxy.java, +			}, +			else if (retVal == null && returnType != Void.TYPE && returnType.isPrimitive()) {, +				throw new AopInvocationException(, +						"Null return value from advice does not match primitive return type for: " + method);, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, + * Copyright 2002-2014 the original author or authors., +++ b/spring-aop/src/main/java/org/springframework/aop/framework/JdkDynamicAopProxy.java, +			}, +			else if (retVal == null && returnType != Void.TYPE && returnType.isPrimitive()) {, +				throw new AopInvocationException(, +						"Null return value from advice does not match primitive return type for: " + method);, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/CustomizableTraceInterceptor.java, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, + * Copyright 2002-2014 the original author or authors., +++ b/spring-aop/src/main/java/org/springframework/aop/framework/JdkDynamicAopProxy.java, +			}, +			else if (retVal == null && returnType != Void.TYPE && returnType.isPrimitive()) {, +				throw new AopInvocationException(, +						"Null return value from advice does not match primitive return type for: " + method);, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/CustomizableTraceInterceptor.java, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractDependencyInjectionAspect.aj, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, + * Copyright 2002-2014 the original author or authors., +++ b/spring-aop/src/main/java/org/springframework/aop/framework/JdkDynamicAopProxy.java, +			}, +			else if (retVal == null && returnType != Void.TYPE && returnType.isPrimitive()) {, +				throw new AopInvocationException(, +						"Null return value from advice does not match primitive return type for: " + method);, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/CustomizableTraceInterceptor.java, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractDependencyInjectionAspect.aj, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AnnotationBeanConfigurerAspect.aj, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, + * Copyright 2002-2014 the original author or authors., +++ b/spring-aop/src/main/java/org/springframework/aop/framework/JdkDynamicAopProxy.java, +			}, +			else if (retVal == null && returnType != Void.TYPE && returnType.isPrimitive()) {, +				throw new AopInvocationException(, +						"Null return value from advice does not match primitive return type for: " + method);, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/CustomizableTraceInterceptor.java, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractDependencyInjectionAspect.aj, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AnnotationBeanConfigurerAspect.aj, +++ b/spring-aspects/src/main/java/org/springframework/cache/aspectj/JCacheCacheAspect.aj, +				}, +				catch (Throwable ex) {, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, + * Copyright 2002-2014 the original author or authors., +++ b/spring-aop/src/main/java/org/springframework/aop/framework/JdkDynamicAopProxy.java, +			}, +			else if (retVal == null && returnType != Void.TYPE && returnType.isPrimitive()) {, +				throw new AopInvocationException(, +						"Null return value from advice does not match primitive return type for: " + method);, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/CustomizableTraceInterceptor.java, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractDependencyInjectionAspect.aj, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AnnotationBeanConfigurerAspect.aj, +++ b/spring-aspects/src/main/java/org/springframework/cache/aspectj/JCacheCacheAspect.aj, +				}, +				catch (Throwable ex) {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +				}, +				else {, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, + * Copyright 2002-2014 the original author or authors., +++ b/spring-aop/src/main/java/org/springframework/aop/framework/JdkDynamicAopProxy.java, +			}, +			else if (retVal == null && returnType != Void.TYPE && returnType.isPrimitive()) {, +				throw new AopInvocationException(, +						"Null return value from advice does not match primitive return type for: " + method);, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/CustomizableTraceInterceptor.java, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractDependencyInjectionAspect.aj, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AnnotationBeanConfigurerAspect.aj, +++ b/spring-aspects/src/main/java/org/springframework/cache/aspectj/JCacheCacheAspect.aj, +				}, +				catch (Throwable ex) {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +				}, +				else {, +++ b/spring-beans/src/main/java/org/springframework/beans/DirectFieldAccessor.java, + * <p>As of Spring 4.1, this implementation supports nested field traversal., +		 * Create a new FieldAccessor instance., +		public FieldAccessor(FieldAccessor parent, String canonicalName, String actualName, Field field) {, +			return this.field;, +			catch (IllegalAccessException ex) {, +				throw new InvalidPropertyException(localTarget.getClass(), canonicalName, "Field is not accessible", ex);, +							"Cannot access indexed value of property referenced in indexed property path '" +, +									getField().getName() + "': returned null");, +			catch (Exception ex) {]