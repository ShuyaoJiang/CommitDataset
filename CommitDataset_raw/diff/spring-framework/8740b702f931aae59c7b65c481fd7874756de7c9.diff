[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/reflection/ReflectionPropertyReaderExecutor.java, +	private final String propertyName;, +		methodToAccessProperty = method;, +		fieldToAccessProperty = field;, +		if (methodToAccessProperty != null) {, +			try {, +				if (!methodToAccessProperty.isAccessible()) {, +					methodToAccessProperty.setAccessible(true);, +				}, +				return methodToAccessProperty.invoke(target);, +			} catch (IllegalArgumentException e) {, +				throw new AccessException("Unable to access property '" + propertyName + "' through getter", e);, +			} catch (IllegalAccessException e) {, +				throw new AccessException("Unable to access property '" + propertyName + "' through getter", e);, +			} catch (InvocationTargetException e) {, +				throw new AccessException("Unable to access property '" + propertyName + "' through getter", e);, +			}, +		}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/reflection/ReflectionPropertyReaderExecutor.java, +	private final String propertyName;, +		methodToAccessProperty = method;, +		fieldToAccessProperty = field;, +		if (methodToAccessProperty != null) {, +			try {, +				if (!methodToAccessProperty.isAccessible()) {, +					methodToAccessProperty.setAccessible(true);, +				}, +				return methodToAccessProperty.invoke(target);, +			} catch (IllegalArgumentException e) {, +				throw new AccessException("Unable to access property '" + propertyName + "' through getter", e);, +			} catch (IllegalAccessException e) {, +				throw new AccessException("Unable to access property '" + propertyName + "' through getter", e);, +			} catch (InvocationTargetException e) {, +				throw new AccessException("Unable to access property '" + propertyName + "' through getter", e);, +			}, +		}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/reflection/ReflectionPropertyResolver.java, +		Method m = ReflectionUtils.findGetterForProperty(propertyName, relevantClass, target instanceof Class);, +		Field field = ReflectionUtils.findField(propertyName, relevantClass, target instanceof Class);, +		if (field != null) {, +			return new ReflectionPropertyReaderExecutor(propertyName, field);, +		}, +		Method m = ReflectionUtils.findSetterForProperty((String) name, relevantClass, target instanceof Class);, +		Field field = ReflectionUtils.findField((String) name, relevantClass, target instanceof Class);, +		if (field != null) {, +			return new ReflectionPropertyWriterExecutor((String) name, field);, +		}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/reflection/ReflectionPropertyReaderExecutor.java, +	private final String propertyName;, +		methodToAccessProperty = method;, +		fieldToAccessProperty = field;, +		if (methodToAccessProperty != null) {, +			try {, +				if (!methodToAccessProperty.isAccessible()) {, +					methodToAccessProperty.setAccessible(true);, +				}, +				return methodToAccessProperty.invoke(target);, +			} catch (IllegalArgumentException e) {, +				throw new AccessException("Unable to access property '" + propertyName + "' through getter", e);, +			} catch (IllegalAccessException e) {, +				throw new AccessException("Unable to access property '" + propertyName + "' through getter", e);, +			} catch (InvocationTargetException e) {, +				throw new AccessException("Unable to access property '" + propertyName + "' through getter", e);, +			}, +		}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/reflection/ReflectionPropertyResolver.java, +		Method m = ReflectionUtils.findGetterForProperty(propertyName, relevantClass, target instanceof Class);, +		Field field = ReflectionUtils.findField(propertyName, relevantClass, target instanceof Class);, +		if (field != null) {, +			return new ReflectionPropertyReaderExecutor(propertyName, field);, +		}, +		Method m = ReflectionUtils.findSetterForProperty((String) name, relevantClass, target instanceof Class);, +		Field field = ReflectionUtils.findField((String) name, relevantClass, target instanceof Class);, +		if (field != null) {, +			return new ReflectionPropertyWriterExecutor((String) name, field);, +		}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/reflection/ReflectionPropertyWriterExecutor.java, +	private final String propertyName;, +		methodToAccessProperty = method;, +		fieldToAccessProperty = field;, +		if (fieldToAccessProperty != null) {, +			try {, +				if (!fieldToAccessProperty.isAccessible()) {, +					fieldToAccessProperty.setAccessible(true);, +				}, +				fieldToAccessProperty.set(target, newValue);, +				return;, +			} catch (IllegalArgumentException e) {, +				throw new AccessException("Unable to access field: " + propertyName, e);, +			} catch (IllegalAccessException e) {, +				throw new AccessException("Unable to access field: " + propertyName, e);, +			}, +		}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/reflection/ReflectionPropertyReaderExecutor.java, +	private final String propertyName;, +		methodToAccessProperty = method;, +		fieldToAccessProperty = field;, +		if (methodToAccessProperty != null) {, +			try {, +				if (!methodToAccessProperty.isAccessible()) {]