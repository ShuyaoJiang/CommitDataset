[+++ b/src/docs/asciidoc/testing.adoc, +* To manage <<testing-ctx-management,Spring IoC container caching>> between tests., +is much faster. In this context, the term "`test suite`" means all tests run in the same, +You can optionally use `@ContextConfiguration` to declare the `ContextLoader` strategy as, +well. Note, however, that you typically do not need to explicitly configure the loader,, +since the default loader supports `initializers` and either resource `locations` or, +annotated `classes`., +The following example uses both a location and a loader:, +configuration classes as well as context initializers that are declared by superclasses., +The following example shows how to specify a classpath resource:, +<1> Specifying a classpath resource., +<1> Get properties from `test.properties` in the root of the classpath., +<1> Dirty the context before the current test class., +<1> Dirty the context after the current test class., +<1> Dirty the context before the current test method., +<1> Dirty the context after the current test method., +The following example shows how to register two `TestExecutionListener` implementations:, +<1> Register two `TestExecutionListener` implementations., +<1> Do not roll back the result., +<1> Injecting the `ApplicationContext`., +, +		@Autowired <2>, +<1> Configuring the `WebApplicationContext`., +<2> Injecting the `WebApplicationContext`., +The following sections explain how to use Spring's `@ContextConfiguration` annotation to, +configure a test `ApplicationContext` by using XML configuration files, Groovy scripts,, +annotated classes (typically `@Configuration` classes), or context initializers., +The term "`annotated class`" can refer to any of the following:, +* A component (that is, a class annotated with `@Component`, `@Service`, `@Repository`, or other stereotype annotations)., +you can include `@Configuration` classes by using component scanning or defining them as normal, +<1> Specifying configuration by using a configuration class and an initializer., +<1> Specifying configuration by using only an initializer., +===== Context Configuration with Environment Profiles, +references a URL (for example, a path prefixed with `classpath:`, `file:`, or `http:`), +loaded by using the inlined `key1` and `key2` properties. The following example shows how, +`WebApplicationContext` and `MockServletContext` are both cached across the test suite,, +that references a URL (for example, a path prefixed with `classpath:`, `file:`, `http:`), +`@Transactional`), or within an isolated transaction, depending on the configured value, +The `MockMvc` instance is used to perform a `GET` request to `/accounts/1` and verify, +You have two main options for creating an instance of `MockMvc`., +into the test to use to build a `MockMvc` instance. The following example shows how to do so:, +The preceding properties affect every request performed through the `MockMvc` instance., +when building the `MockMvc` instance, as the following example shows:, +creating a separate `MockMvc` instance., +When setting up a `MockMvc` instance, you can register one or more Servlet `Filter` instances,, +<<spring-mvc-test-server-htmlunit-mah-advanced-builder>>., +our `MockMvc` instance without the need for a real HTTP connection. Any other URL is, +described in <<spring-mvc-test-server-htmlunit-mah-advanced-builder>>., +As an alternative, we can perform the exact same setup by configuring the `MockMvc`, +This is more verbose, but, by building the `WebClient` with a `MockMvc` instance, we have, +TIP: For additional information on creating a `MockMvc` instance, see, +our `MockMvc` instance without the need for a real HTTP connection. Any other URL is, +annotation to look up our submit button with a `css` selector (*input[type=submit]*)., +Lastly, we must not forget to close the `WebDriver` instance when the test is complete, as follows:, +possible, by building a `WebDriver` based on the `WebApplicationContext` loaded for us by, +As an alternative, we can perform the exact same setup by configuring the `MockMvc`, +This is more verbose, but, by building the `WebDriver` with a `MockMvc` instance, we have, +TIP: For additional information on creating a `MockMvc` instance, see, +our `MockMvc` instance without the need for a real HTTP connection. Any other URL is, +to bind it to a `MockMvc` instance. That allows processing requests using actual, +<1> Load the application context from `AbstractClinicTests-context.xml` and `HibernateClinicTests-context.xml`.]