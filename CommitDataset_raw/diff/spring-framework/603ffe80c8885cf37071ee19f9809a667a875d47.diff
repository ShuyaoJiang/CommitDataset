[+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binding.java, +import org.springframework.core.convert.TypeDescriptor;, +	 * The model value formatted for display in a single field in the UI., +		 * The model value type descriptor., +		 */, +		TypeDescriptor<?> getValueTypeDescriptor();		, +, +		/**, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binding.java, +import org.springframework.core.convert.TypeDescriptor;, +	 * The model value formatted for display in a single field in the UI., +		 * The model value type descriptor., +		 */, +		TypeDescriptor<?> getValueTypeDescriptor();		, +, +		/**, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/PropertyBinding.java, +import java.util.HashMap;, +	private Map<Integer, ListElementBinding> listElementBindings;, +, +	private Class<?> elementType;, +	, +		if (isList()) {, +			listElementBindings = new HashMap<Integer, ListElementBinding>();, +			elementType = GenericCollectionTypeResolver.getCollectionReturnType(property.getReadMethod());, +		}, +		return format(getValue(), getFormatter());, +				Object parsed = getFormatter().parse((String) sourceValue, getLocale());, +					sourceValue = null;, +					status = BindingStatus.DIRTY;, +			}, +		} else {, +			try {, +				buffer.setValue(coerseToValueType(sourceValue));, +			} catch (ConversionFailedException e) {, +				this.sourceValue = sourceValue;, +				invalidSourceValueCause = e;, +				status = BindingStatus.INVALID_SOURCE_VALUE;				, +			public TypeDescriptor<?> getValueTypeDescriptor() {, +				return new TypeDescriptor(new MethodParameter(property.getReadMethod(), -1));, +			}, +, +		return List.class.isAssignableFrom(getValueType());, +		ListElementBinding binding = listElementBindings.get(index);, +		if (binding == null) {, +			binding = new ListElementBinding(index);, +			listElementBindings.put(index, binding);, +		}, +		return binding;, +		return Map.class.isAssignableFrom(getValueType());, +	protected Formatter getFormatter() {, +		return bindingContext.getFormatter();, +	}, +	, +		TypeDescriptor targetType = getModel().getValueTypeDescriptor();, +	class ListElementBinding extends PropertyBinding {, +, +		private int index;, +, +		public ListElementBinding(int index) {, +			super(property, object, bindingContext);, +			this.index = index;, +			growListIfNecessary();, +		}, +, +		protected Formatter getFormatter() {, +			return bindingContext.getElementFormatter();, +		}, +			, +		public Model getModel() {, +			return new Model() {, +				public Object getValue() {, +					return getList().get(index);, +				}, +, +				public Class<?> getValueType() {, +					if (elementType != null) {, +						return elementType;, +					} else {, +						return getValue().getClass();, +					}, +				}, +				, +				public TypeDescriptor<?> getValueTypeDescriptor() {, +					return TypeDescriptor.valueOf(getValueType());, +				}, +, +				public void setValue(Object value) {, +					getList().set(index, value);, +				}, +			};, +		}, +		, +		// internal helpers, +		, +		private void growListIfNecessary() {, +			if (index >= getList().size()) {, +				for (int i = getList().size(); i <= index; i++) {, +					addValue();, +				}]