[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/TestContextManager.java, + * Copyright 2002-2010 the original author or authors., +, +	 * Constructs a new <code>TestContextManager</code> for the specified {@link Class test class}, +	 * and automatically {@link #registerTestExecutionListeners registers} the, +	 * {@link TestExecutionListener TestExecutionListeners} configured for the test class, +	 * via the {@link TestExecutionListeners &#064;TestExecutionListeners} annotation., +, +	 * Register the supplied {@link TestExecutionListener TestExecutionListeners}, +	 * by appending them to the set of listeners used by this <code>TestContextManager</code>., +				logger.trace("Registering TestExecutionListener: " + listener);, +	 * Get the current {@link TestExecutionListener TestExecutionListeners}, +	 * registered for this <code>TestContextManager</code>., +	 * <p>Allows for modifications, e.g. adding a listener to the beginning of the list., +	 * However, make sure to keep the list stable while actually executing tests., +		return this.testExecutionListeners;, +	 * Get a copy of the {@link TestExecutionListener TestExecutionListeners}, +		List<TestExecutionListener> listenersReversed =, +				new ArrayList<TestExecutionListener>(getTestExecutionListeners());, +	 * Retrieve an array of newly instantiated {@link TestExecutionListener TestExecutionListeners}, +	 * for the specified {@link Class class}. If {@link TestExecutionListeners &#064;TestExecutionListeners}, +	 * is not <em>present</em> on the supplied class, the default listeners will be returned., +	 * <p>Note that the {@link TestExecutionListeners#inheritListeners() inheritListeners} flag of, +	 * {@link TestExecutionListeners &#064;TestExecutionListeners} will be taken into consideration., +	 * Specifically, if the <code>inheritListeners</code> flag is set to <code>true</code>, listeners, +	 * defined in the annotated class will be appended to the listeners defined in superclasses., +						"Test class [%s] has been configured with @TestExecutionListeners' 'value' [%s] " +, +								"and 'listeners' [%s] attributes. Use one or the other, but not both.",, +				declaringClass = (testExecutionListeners.inheritListeners() ?, +						AnnotationUtils.findAnnotationDeclaringClass(annotationType, declaringClass.getSuperclass()) : null);, +				listeners.add(BeanUtils.instantiateClass(listenerClass));, +		Set<Class<? extends TestExecutionListener>> defaultListenerClasses =, +				new LinkedHashSet<Class<? extends TestExecutionListener>>();, +				defaultListenerClasses.add(, +						(Class<? extends TestExecutionListener>) getClass().getClassLoader().loadClass(className));, +, +	 * <p>An attempt will be made to give each registered, +	 * <p>The managed {@link TestContext} will be updated with the supplied, +	 * <p>An attempt will be made to give each registered, +	 * @param testInstance the test instance to prepare (never <code>null</code>), +	 * @throws Exception if a registered TestExecutionListener throws an exception, +	 * <p>The managed {@link TestContext} will be updated with the supplied, +	 * <p>An attempt will be made to give each registered, +	 * @throws Exception if a registered TestExecutionListener throws an exception, +	 * <p>The managed {@link TestContext} will be updated with the supplied, +	 * <p>Each registered {@link TestExecutionListener} will be given a chance to, +	 * @throws Exception if a registered TestExecutionListener throws an exception, +	 * <p>Each registered {@link TestExecutionListener} will be given a chance to, +	 * @throws Exception if a registered TestExecutionListener throws an exception]