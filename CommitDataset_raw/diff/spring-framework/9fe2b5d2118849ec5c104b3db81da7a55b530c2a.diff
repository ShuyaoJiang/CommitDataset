[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.properties, +	org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.properties, +	org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver, +++ /dev/null, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.properties, +	org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver, +++ /dev/null, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.servlet.mvc.support;, +, +import java.util.List;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.beans.TypeMismatchException;, +import org.springframework.core.Ordered;, +import org.springframework.http.MediaType;, +import org.springframework.http.converter.HttpMessageNotReadableException;, +import org.springframework.http.converter.HttpMessageNotWritableException;, +import org.springframework.util.StringUtils;, +import org.springframework.web.HttpMediaTypeNotSupportedException;, +import org.springframework.web.HttpRequestMethodNotSupportedException;, +import org.springframework.web.bind.MissingServletRequestParameterException;, +import org.springframework.web.servlet.ModelAndView;, +import org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver;, +import org.springframework.web.servlet.mvc.multiaction.NoSuchRequestHandlingMethodException;, +, +/**, + * Default implementation of the {@link org.springframework.web.servlet.HandlerExceptionResolver, + * HandlerExceptionResolver} interface that resolves standard Spring exceptions. <p>Default implementations typically, + * set the response status to a corresponding HTTP status code. <p>This exception resolver is enabled by default in the, + * {@link org.springframework.web.servlet.DispatcherServlet}., + *, + * @author Arjen Poutsma, + * @see #handleNoSuchRequestHandlingMethod, + * @see #handleHttpRequestMethodNotSupported, + * @see #handleHttpMediaTypeNotSupported, + * @see #handleMissingServletRequestParameter, + * @see #handleTypeMismatch, + * @see #handleHttpMessageNotReadable, + * @see #handleHttpMessageNotWritable, + * @since 3.0, + */, +public class DefaultHandlerExceptionResolver extends AbstractHandlerExceptionResolver {, +, +	/**, +	 * Log category to use when no mapped handler is found for a request., +	 *, +	 * @see #pageNotFoundLogger, +	 */, +	public static final String PAGE_NOT_FOUND_LOG_CATEGORY = "org.springframework.web.servlet.PageNotFound";, +, +	/**, +	 * Additional logger to use when no mapped handler is found for a request., +	 *, +	 * @see #PAGE_NOT_FOUND_LOG_CATEGORY, +	 */, +	protected static final Log pageNotFoundLogger = LogFactory.getLog(PAGE_NOT_FOUND_LOG_CATEGORY);, +, +	/** Sets the {@linkplain #setOrder(int) order} to {@link #LOWEST_PRECEDENCE}. */, +	public DefaultHandlerExceptionResolver() {, +		setOrder(Ordered.LOWEST_PRECEDENCE);, +	}, +, +	@Override, +	protected ModelAndView doResolveException(HttpServletRequest request,, +			HttpServletResponse response,, +			Object handler,, +			Exception ex) {, +		try {, +			if (ex instanceof NoSuchRequestHandlingMethodException) {, +				return handleNoSuchRequestHandlingMethod((NoSuchRequestHandlingMethodException) ex, request, response,, +						handler);, +			}, +			else if (ex instanceof HttpRequestMethodNotSupportedException) {, +				return handleHttpRequestMethodNotSupported((HttpRequestMethodNotSupportedException) ex, request,, +						response, handler);, +			}, +			else if (ex instanceof HttpMediaTypeNotSupportedException) {, +				return handleHttpMediaTypeNotSupported((HttpMediaTypeNotSupportedException) ex, request, response,]