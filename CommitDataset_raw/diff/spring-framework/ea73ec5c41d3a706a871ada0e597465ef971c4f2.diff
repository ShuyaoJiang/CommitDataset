[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java, +import org.springframework.util.StringUtils;, +, +		// Clean duplicate slashes or pathWithinPattern won't match lookupPath, +		String previous;, +		do {, +			previous = lookupPath;, +			lookupPath = StringUtils.replace(lookupPath, "//", "/");, +		} while (!lookupPath.equals(previous));, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java, +import org.springframework.util.StringUtils;, +, +		// Clean duplicate slashes or pathWithinPattern won't match lookupPath, +		String previous;, +		do {, +			previous = lookupPath;, +			lookupPath = StringUtils.replace(lookupPath, "//", "/");, +		} while (!lookupPath.equals(previous));, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/ResourceUrlProviderTests.java, +import static org.mockito.ArgumentMatchers.any;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +	@Test // SPR-16296, +	public void getForLookupPathShouldNotFailIfPathContainsDoubleSlashes() {, +		// given, +		ResourceResolver mockResourceResolver = mock(ResourceResolver.class);, +		when(mockResourceResolver.resolveUrlPath(any(), any(), any())).thenReturn("some-path");, +, +		ResourceHttpRequestHandler handler = new ResourceHttpRequestHandler();, +		handler.getResourceResolvers().add(mockResourceResolver);, +, +		ResourceUrlProvider provider = new ResourceUrlProvider();, +		provider.getHandlerMap().put("/some-pattern/**", handler);, +, +		// when, +		String lookupForPath = provider.getForLookupPath("/some-pattern/some-lib//some-resource");, +, +		// then, +		assertEquals("/some-pattern/some-path", lookupForPath);, +	}, +]