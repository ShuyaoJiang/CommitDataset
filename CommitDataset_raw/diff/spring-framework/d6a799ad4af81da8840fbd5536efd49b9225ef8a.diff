[+++ b/spring-test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java, + * Copyright 2002-2015 the original author or authors., +		TestPropertySourceUtils.addResourcePropertySourcesToEnvironment(context, mergedConfig.getPropertySourceLocations());, +		TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context, mergedConfig.getPropertySourceProperties());, +++ b/spring-test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java, + * Copyright 2002-2015 the original author or authors., +		TestPropertySourceUtils.addResourcePropertySourcesToEnvironment(context, mergedConfig.getPropertySourceLocations());, +		TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context, mergedConfig.getPropertySourceProperties());, +++ b/spring-test/src/main/java/org/springframework/test/context/support/TestPropertySourceUtils.java, + * Copyright 2002-2015 the original author or authors., +import java.io.IOException;, +import java.io.StringReader;, +import java.util.LinkedHashMap;, +import java.util.Map;, +import java.util.Properties;, +import org.springframework.context.ConfigurableApplicationContext;, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.MapPropertySource;, +import org.springframework.core.env.PropertySource;, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.support.ResourcePropertySource;, +import org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor;, +import org.springframework.util.ObjectUtils;, + * Utility methods for working with {@link TestPropertySource @TestPropertySource}, + * and adding test {@link PropertySource PropertySources} to the {@code Environment}., + *, + * <p>Primarily intended for use within the framework., +	/**, +	 * @since 4.1.5, +	 */, +	static void addResourcePropertySourcesToEnvironment(ConfigurableApplicationContext context,, +			String[] propertySourceLocations) {, +		try {, +			ConfigurableEnvironment environment = context.getEnvironment();, +			String[] locations = propertySourceLocations;, +			for (String location : locations) {, +				String resolvedLocation = environment.resolveRequiredPlaceholders(location);, +				Resource resource = context.getResource(resolvedLocation);, +				ResourcePropertySource ps = new ResourcePropertySource(resource);, +				environment.getPropertySources().addFirst(ps);, +			}, +		}, +		catch (IOException e) {, +			throw new IllegalStateException("Failed to add PropertySource to Environment", e);, +		}, +	}, +, +	/**, +	 * @since 4.1.5, +	 */, +	static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context,, +			String[] propertySourceProperties) {, +		addInlinedPropertiesToEnvironment(context.getEnvironment(), propertySourceProperties);, +	}, +, +	/**, +	 * @since 4.1.5, +	 */, +	static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String[] propertySourceProperties) {, +		if (!ObjectUtils.isEmpty(propertySourceProperties)) {, +			String name = "test properties " + ObjectUtils.nullSafeToString(propertySourceProperties);, +			MapPropertySource ps = new MapPropertySource(name, extractEnvironmentProperties(propertySourceProperties));, +			environment.getPropertySources().addFirst(ps);, +		}, +	}, +, +	/**, +	 * Extract environment properties from the supplied key/value pairs,, +	 * preserving the ordering of property names in the returned map., +	 * <p>Parsing of the key/value pairs is achieved by converting all pairs, +	 * into <em>virtual</em> properties files in memory and delegating to, +	 * {@link Properties#load(java.io.Reader)} to parse each virtual file., +	 */, +	private static Map<String, Object> extractEnvironmentProperties(String[] keyValuePairs) {, +		Map<String, Object> map = new LinkedHashMap<String, Object>();, +, +		Properties props = new Properties();, +		for (String pair : keyValuePairs) {, +			if (!StringUtils.hasText(pair)) {, +				continue;, +			}, +, +			try {, +				props.load(new StringReader(pair));, +			}, +			catch (Exception e) {, +				throw new IllegalStateException("Failed to load test environment property from [" + pair + "].", e);, +			}, +			Assert.state(props.size() == 1, "Failed to load exactly one test environment property from [" + pair + "].");, +, +			for (String name : props.stringPropertyNames()) {, +				map.put(name, props.getProperty(name));, +			}, +			props.clear();, +		}, +, +		return map;, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java]