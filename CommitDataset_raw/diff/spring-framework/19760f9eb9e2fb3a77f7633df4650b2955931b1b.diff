[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import org.springframework.beans.BeanMetadataElement;, +import org.springframework.beans.factory.config.BeanReference;, +import org.springframework.http.converter.json.GsonHttpMessageConverter;, +import org.springframework.util.StringUtils;, +import org.springframework.web.servlet.mvc.method.annotation.JsonViewResponseBodyAdvice;, + * @author Agim Emruli, +            ManagedList<BeanMetadataElement> customAndReferencedResolvers = new ManagedList<BeanMetadataElement>();, +            customAndReferencedResolvers.addAll(wrapWebArgumentResolverBeanDefs(argumentResolvers, parserContext));, +            customAndReferencedResolvers.addAll(extractBeanRefSubElements(resolversElement, parserContext));, +            return customAndReferencedResolvers;, +    private ManagedList<BeanReference> extractBeanRefSubElements(Element parentElement, ParserContext parserContext){, +        ManagedList<BeanReference> list = new ManagedList<BeanReference>();, +        list.setSource(parserContext.extractSource(parentElement));, +        for (Element refElement : DomUtils.getChildElementsByTagName(parentElement, "ref")) {, +            BeanReference reference;, +            if (StringUtils.hasText("bean")) {, +                reference = new RuntimeBeanReference(refElement.getAttribute("bean"),false);, +                list.add(reference);, +            }else if(StringUtils.hasText("parent")){, +                reference = new RuntimeBeanReference(refElement.getAttribute("parent"),true);, +                list.add(reference);, +            }else{, +                parserContext.getReaderContext().error("'bean' or 'parent' attribute is required for <ref> element",, +                        parserContext.extractSource(parentElement));, +            }, +        }, +        return list;, +    }, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import org.springframework.beans.BeanMetadataElement;, +import org.springframework.beans.factory.config.BeanReference;, +import org.springframework.http.converter.json.GsonHttpMessageConverter;, +import org.springframework.util.StringUtils;, +import org.springframework.web.servlet.mvc.method.annotation.JsonViewResponseBodyAdvice;, + * @author Agim Emruli, +            ManagedList<BeanMetadataElement> customAndReferencedResolvers = new ManagedList<BeanMetadataElement>();, +            customAndReferencedResolvers.addAll(wrapWebArgumentResolverBeanDefs(argumentResolvers, parserContext));, +            customAndReferencedResolvers.addAll(extractBeanRefSubElements(resolversElement, parserContext));, +            return customAndReferencedResolvers;, +    private ManagedList<BeanReference> extractBeanRefSubElements(Element parentElement, ParserContext parserContext){, +        ManagedList<BeanReference> list = new ManagedList<BeanReference>();, +        list.setSource(parserContext.extractSource(parentElement));, +        for (Element refElement : DomUtils.getChildElementsByTagName(parentElement, "ref")) {, +            BeanReference reference;, +            if (StringUtils.hasText("bean")) {, +                reference = new RuntimeBeanReference(refElement.getAttribute("bean"),false);, +                list.add(reference);, +            }else if(StringUtils.hasText("parent")){, +                reference = new RuntimeBeanReference(refElement.getAttribute("parent"),true);, +                list.add(reference);, +            }else{, +                parserContext.getReaderContext().error("'bean' or 'parent' attribute is required for <ref> element",, +                        parserContext.extractSource(parentElement));, +            }, +        }, +        return list;, +    }, +, +++ b/spring-webmvc/src/main/resources/org/springframework/web/servlet/config/spring-mvc-4.1.xsd, +						<xsd:choice minOccurs="1" maxOccurs="unbounded">, +							<xsd:element ref="beans:bean" minOccurs="0" maxOccurs="unbounded">, +                            <xsd:element ref="beans:ref" minOccurs="0" maxOccurs="unbounded">, +                                <xsd:annotation>, +                                    <xsd:documentation><![CDATA[, +	A reference to a HandlerMethodArgumentResolver bean definition. Expects a HandlerMethodArgumentResolver instance,, +	 WebArgumentResolver instances has to be wrapped with a ServletWebArgumentResolverAdapter, +									]]></xsd:documentation>, +                                        <xsd:appinfo>, +                                            <tool:annotation kind="ref">, +                                                <tool:expected-type type="java:org.springframework.web.method.support.HandlerMethodArgumentResolver" />, +                                            </tool:annotation>, +                                        </xsd:appinfo>, +                                </xsd:annotation>, +                            </xsd:element>, +						</xsd:choice>, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import org.springframework.beans.BeanMetadataElement;, +import org.springframework.beans.factory.config.BeanReference;, +import org.springframework.http.converter.json.GsonHttpMessageConverter;, +import org.springframework.util.StringUtils;, +import org.springframework.web.servlet.mvc.method.annotation.JsonViewResponseBodyAdvice;, + * @author Agim Emruli, +            ManagedList<BeanMetadataElement> customAndReferencedResolvers = new ManagedList<BeanMetadataElement>();, +            customAndReferencedResolvers.addAll(wrapWebArgumentResolverBeanDefs(argumentResolvers, parserContext));, +            customAndReferencedResolvers.addAll(extractBeanRefSubElements(resolversElement, parserContext));, +            return customAndReferencedResolvers;, +    private ManagedList<BeanReference> extractBeanRefSubElements(Element parentElement, ParserContext parserContext){, +        ManagedList<BeanReference> list = new ManagedList<BeanReference>();, +        list.setSource(parserContext.extractSource(parentElement));, +        for (Element refElement : DomUtils.getChildElementsByTagName(parentElement, "ref")) {, +            BeanReference reference;, +            if (StringUtils.hasText("bean")) {, +                reference = new RuntimeBeanReference(refElement.getAttribute("bean"),false);, +                list.add(reference);, +            }else if(StringUtils.hasText("parent")){, +                reference = new RuntimeBeanReference(refElement.getAttribute("parent"),true);, +                list.add(reference);, +            }else{]