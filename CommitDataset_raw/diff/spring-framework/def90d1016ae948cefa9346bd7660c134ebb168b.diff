[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import org.springframework.http.converter.ResourceHttpMessageConverter;, +import org.springframework.http.converter.feed.AtomFeedHttpMessageConverter;, +import org.springframework.http.converter.feed.RssChannelHttpMessageConverter;, +	private static boolean romePresent =, +			ClassUtils.isPresent("com.sun.syndication.feed.WireFeed", AnnotationDrivenBeanDefinitionParser.class.getClassLoader());, +		messageConverters.add(new RootBeanDefinition(ResourceHttpMessageConverter.class));, +		if (romePresent) {, +			messageConverters.add(new RootBeanDefinition(AtomFeedHttpMessageConverter.class));, +			messageConverters.add(new RootBeanDefinition(RssChannelHttpMessageConverter.class));, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import org.springframework.http.converter.ResourceHttpMessageConverter;, +import org.springframework.http.converter.feed.AtomFeedHttpMessageConverter;, +import org.springframework.http.converter.feed.RssChannelHttpMessageConverter;, +	private static boolean romePresent =, +			ClassUtils.isPresent("com.sun.syndication.feed.WireFeed", AnnotationDrivenBeanDefinitionParser.class.getClassLoader());, +		messageConverters.add(new RootBeanDefinition(ResourceHttpMessageConverter.class));, +		if (romePresent) {, +			messageConverters.add(new RootBeanDefinition(AtomFeedHttpMessageConverter.class));, +			messageConverters.add(new RootBeanDefinition(RssChannelHttpMessageConverter.class));, +		}, +++ b/org.springframework.web/src/main/java/org/springframework/http/HttpHeaders.java, +	private static final String CONTENT_DISPOSITION = "Content-Disposition";, +, +, +	 * Sets the (new) value of the {@code Content-Disposition} header for {@code form-data}., +	 * @param name the control name, +	 * @param filename the filename, may be {@code null}, +	 */, +	public void setContentDispositionFormData(String name, String filename) {, +		Assert.notNull(name, "'name' must not be null");, +		StringBuilder builder = new StringBuilder("form-data; name=\"");, +		builder.append(name).append('\"');, +		if (filename != null) {, +			builder.append("; filename=\"");, +			builder.append(filename).append('\"');, +		}, +		set(CONTENT_DISPOSITION, builder.toString());, +	}, +, +	/**, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import org.springframework.http.converter.ResourceHttpMessageConverter;, +import org.springframework.http.converter.feed.AtomFeedHttpMessageConverter;, +import org.springframework.http.converter.feed.RssChannelHttpMessageConverter;, +	private static boolean romePresent =, +			ClassUtils.isPresent("com.sun.syndication.feed.WireFeed", AnnotationDrivenBeanDefinitionParser.class.getClassLoader());, +		messageConverters.add(new RootBeanDefinition(ResourceHttpMessageConverter.class));, +		if (romePresent) {, +			messageConverters.add(new RootBeanDefinition(AtomFeedHttpMessageConverter.class));, +			messageConverters.add(new RootBeanDefinition(RssChannelHttpMessageConverter.class));, +		}, +++ b/org.springframework.web/src/main/java/org/springframework/http/HttpHeaders.java, +	private static final String CONTENT_DISPOSITION = "Content-Disposition";, +, +, +	 * Sets the (new) value of the {@code Content-Disposition} header for {@code form-data}., +	 * @param name the control name, +	 * @param filename the filename, may be {@code null}, +	 */, +	public void setContentDispositionFormData(String name, String filename) {, +		Assert.notNull(name, "'name' must not be null");, +		StringBuilder builder = new StringBuilder("form-data; name=\"");, +		builder.append(name).append('\"');, +		if (filename != null) {, +			builder.append("; filename=\"");, +			builder.append(filename).append('\"');, +		}, +		set(CONTENT_DISPOSITION, builder.toString());, +	}, +, +	/**, +++ b/org.springframework.web/src/main/java/org/springframework/http/MediaType.java, +	 * Public constant media type that includes all media ranges (i.e. <code>&#42;/&#42;</code>)., +	/**, +	 *  Public constant media type for {@code application/atom+xml}., +	 */, +	public final static MediaType APPLICATION_ATOM_XML;, +, +	/**, +	 * Public constant media type for {@code application/x-www-form-urlencoded}., +	 *  */, +	public final static MediaType APPLICATION_FORM_URLENCODED;, +, +	/**, +	 * Public constant media type for {@code application/json}., +	 * */, +	public final static MediaType APPLICATION_JSON;, +, +	/**, +	 * Public constant media type for {@code application/octet-stream}., +	 *  */, +	public final static MediaType APPLICATION_OCTET_STREAM;, +, +	/**, +	 * Public constant media type for {@code application/xhtml+xml}., +	 *  */, +	public final static MediaType APPLICATION_XHTML_XML;, +]