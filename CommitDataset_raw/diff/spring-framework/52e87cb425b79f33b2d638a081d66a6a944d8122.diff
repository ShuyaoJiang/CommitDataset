[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, + * Copyright 2002-2017 the original author or authors., + * {@link ExchangeFunction}. Instances of this interface can be created via static, + * builder methods., + * {@link WebClient} rather than using this directly., + *, +	Mono<Void> writeTo(ClientHttpRequest request, ExchangeStrategies strategies);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, + * Copyright 2002-2017 the original author or authors., + * {@link ExchangeFunction}. Instances of this interface can be created via static, + * builder methods., + * {@link WebClient} rather than using this directly., + *, +	Mono<Void> writeTo(ClientHttpRequest request, ExchangeStrategies strategies);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, + * Copyright 2002-2017 the original author or authors., + * Represents an HTTP response, as returned by the {@link ExchangeFunction}., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, + * Copyright 2002-2017 the original author or authors., + * {@link ExchangeFunction}. Instances of this interface can be created via static, + * builder methods., + * {@link WebClient} rather than using this directly., + *, +	Mono<Void> writeTo(ClientHttpRequest request, ExchangeStrategies strategies);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, + * Copyright 2002-2017 the original author or authors., + * Represents an HTTP response, as returned by the {@link ExchangeFunction}., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java, + * Copyright 2002-2017 the original author or authors., +		public Mono<Void> writeTo(ClientHttpRequest request, ExchangeStrategies strategies) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, + * Copyright 2002-2017 the original author or authors., + * {@link ExchangeFunction}. Instances of this interface can be created via static, + * builder methods., + * {@link WebClient} rather than using this directly., + *, +	Mono<Void> writeTo(ClientHttpRequest request, ExchangeStrategies strategies);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, + * Copyright 2002-2017 the original author or authors., + * Represents an HTTP response, as returned by the {@link ExchangeFunction}., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java, + * Copyright 2002-2017 the original author or authors., +		public Mono<Void> writeTo(ClientHttpRequest request, ExchangeStrategies strategies) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java, + * Copyright 2002-2017 the original author or authors., +	private final ExchangeStrategies strategies;, +	public DefaultClientResponse(ClientHttpResponse response, ExchangeStrategies strategies) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, + * Copyright 2002-2017 the original author or authors., + * {@link ExchangeFunction}. Instances of this interface can be created via static, + * builder methods., + * {@link WebClient} rather than using this directly., + *, +	Mono<Void> writeTo(ClientHttpRequest request, ExchangeStrategies strategies);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, + * Copyright 2002-2017 the original author or authors., + * Represents an HTTP response, as returned by the {@link ExchangeFunction}., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java, + * Copyright 2002-2017 the original author or authors., +		public Mono<Void> writeTo(ClientHttpRequest request, ExchangeStrategies strategies) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java, + * Copyright 2002-2017 the original author or authors., +	private final ExchangeStrategies strategies;, +	public DefaultClientResponse(ClientHttpResponse response, ExchangeStrategies strategies) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/DefaultExchangeStrategiesBuilder.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.reactive.function.client;, +, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import java.util.function.Supplier;, +import java.util.stream.Stream;, +, +import org.springframework.context.ApplicationContext;, +import org.springframework.core.codec.ByteArrayDecoder;, +import org.springframework.core.codec.ByteArrayEncoder;, +import org.springframework.core.codec.ByteBufferDecoder;, +import org.springframework.core.codec.ByteBufferEncoder;, +import org.springframework.core.codec.CharSequenceEncoder;, +import org.springframework.core.codec.Decoder;, +import org.springframework.core.codec.Encoder;, +import org.springframework.core.codec.StringDecoder;, +import org.springframework.http.codec.DecoderHttpMessageReader;, +import org.springframework.http.codec.EncoderHttpMessageWriter;]