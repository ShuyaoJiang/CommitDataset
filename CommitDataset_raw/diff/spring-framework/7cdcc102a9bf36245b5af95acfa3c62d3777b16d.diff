[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/RequestMethodsRequestCondition.java, +	private static final RequestMethodsRequestCondition GET_CONDITION =, +			new RequestMethodsRequestCondition(RequestMethod.GET);, +				return GET_CONDITION;, +		if (other.methods.size() != this.methods.size()) {, +			return other.methods.size() - this.methods.size();, +		}, +		else if (this.methods.size() == 1) {, +			if (this.methods.contains(RequestMethod.HEAD) && other.methods.contains(RequestMethod.GET)) {, +				return -1;, +			}, +			else if (this.methods.contains(RequestMethod.GET) && other.methods.contains(RequestMethod.HEAD)) {, +				return 1;, +			}, +		}, +		return 0;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/RequestMethodsRequestCondition.java, +	private static final RequestMethodsRequestCondition GET_CONDITION =, +			new RequestMethodsRequestCondition(RequestMethod.GET);, +				return GET_CONDITION;, +		if (other.methods.size() != this.methods.size()) {, +			return other.methods.size() - this.methods.size();, +		}, +		else if (this.methods.size() == 1) {, +			if (this.methods.contains(RequestMethod.HEAD) && other.methods.contains(RequestMethod.GET)) {, +				return -1;, +			}, +			else if (this.methods.contains(RequestMethod.GET) && other.methods.contains(RequestMethod.HEAD)) {, +				return 1;, +			}, +		}, +		return 0;, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/condition/RequestMethodsRequestConditionTests.java, +		testMatch(new RequestMethodsRequestCondition(GET), GET);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/RequestMethodsRequestCondition.java, +	private static final RequestMethodsRequestCondition GET_CONDITION =, +			new RequestMethodsRequestCondition(RequestMethod.GET);, +				return GET_CONDITION;, +		if (other.methods.size() != this.methods.size()) {, +			return other.methods.size() - this.methods.size();, +		}, +		else if (this.methods.size() == 1) {, +			if (this.methods.contains(RequestMethod.HEAD) && other.methods.contains(RequestMethod.GET)) {, +				return -1;, +			}, +			else if (this.methods.contains(RequestMethod.GET) && other.methods.contains(RequestMethod.HEAD)) {, +				return 1;, +			}, +		}, +		return 0;, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/condition/RequestMethodsRequestConditionTests.java, +		testMatch(new RequestMethodsRequestCondition(GET), GET);, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletAnnotationControllerHandlerMethodTests.java, +	public void httpHeadExplicit() throws ServletException, IOException {, +		initServletWithControllers(ResponseEntityController.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest("HEAD", "/stores");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		getServlet().service(request, response);, +, +		assertEquals(200, response.getStatus());, +		assertEquals("v1", response.getHeader("h1"));, +	}, +, +	@Test, +, +		@RequestMapping(path = "/stores", method = RequestMethod.HEAD), +		public ResponseEntity<Void> headResource() {, +			return ResponseEntity.ok().header("h1", "v1").build();, +		}, +, +		@RequestMapping(path = "/stores", method = RequestMethod.GET), +		public ResponseEntity<String> getResource() {, +			return ResponseEntity.ok().body("body");, +		}]