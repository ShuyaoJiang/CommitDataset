[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/AbstractMappingContentTypeResolver.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.http.MediaTypeFactory;, + * Base class for resolvers that extract a key from the request and look up a, + * mapping to a MediaType. The use case is URI-based content negotiation for, + * example based on query parameter or file extension in the request path., +public abstract class AbstractMappingContentTypeResolver implements RequestedContentTypeResolver {, +	public AbstractMappingContentTypeResolver(Map<String, MediaType> mediaTypes) {, +		mediaTypes.forEach((key, mediaType) ->, +				this.mediaTypeLookup.put(key.toLowerCase(Locale.ENGLISH), mediaType));, +	public List<MediaType> resolveMediaTypes(ServerWebExchange exchange) {, +		String key = getKey(exchange);, +				this.mediaTypeLookup.putIfAbsent(key, mediaType);, +	 * Get the key to look up a MediaType with., +	protected abstract String getKey(ServerWebExchange exchange);, +	 * Get the MediaType for the given key., +	protected MediaType getMediaType(String key) {, +		key = key.toLowerCase(Locale.ENGLISH);, +		MediaType mediaType = this.mediaTypeLookup.get(key);, +		if (mediaType == null) {, +			mediaType = MediaTypeFactory.getMediaType("filename." + key).orElse(null);, +		return mediaType;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/AbstractMappingContentTypeResolver.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.http.MediaTypeFactory;, + * Base class for resolvers that extract a key from the request and look up a, + * mapping to a MediaType. The use case is URI-based content negotiation for, + * example based on query parameter or file extension in the request path., +public abstract class AbstractMappingContentTypeResolver implements RequestedContentTypeResolver {, +	public AbstractMappingContentTypeResolver(Map<String, MediaType> mediaTypes) {, +		mediaTypes.forEach((key, mediaType) ->, +				this.mediaTypeLookup.put(key.toLowerCase(Locale.ENGLISH), mediaType));, +	public List<MediaType> resolveMediaTypes(ServerWebExchange exchange) {, +		String key = getKey(exchange);, +				this.mediaTypeLookup.putIfAbsent(key, mediaType);, +	 * Get the key to look up a MediaType with., +	protected abstract String getKey(ServerWebExchange exchange);, +	 * Get the MediaType for the given key., +	protected MediaType getMediaType(String key) {, +		key = key.toLowerCase(Locale.ENGLISH);, +		MediaType mediaType = this.mediaTypeLookup.get(key);, +		if (mediaType == null) {, +			mediaType = MediaTypeFactory.getMediaType("filename." + key).orElse(null);, +		return mediaType;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/CompositeContentTypeResolver.java, + * Copyright 2002-2017 the original author or authors., + * Contains and delegates to other {@link RequestedContentTypeResolver}., +public class CompositeContentTypeResolver implements RequestedContentTypeResolver {, +	public List<MediaType> resolveMediaTypes(ServerWebExchange exchange) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/AbstractMappingContentTypeResolver.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.http.MediaTypeFactory;, + * Base class for resolvers that extract a key from the request and look up a, + * mapping to a MediaType. The use case is URI-based content negotiation for, + * example based on query parameter or file extension in the request path., +public abstract class AbstractMappingContentTypeResolver implements RequestedContentTypeResolver {, +	public AbstractMappingContentTypeResolver(Map<String, MediaType> mediaTypes) {, +		mediaTypes.forEach((key, mediaType) ->, +				this.mediaTypeLookup.put(key.toLowerCase(Locale.ENGLISH), mediaType));, +	public List<MediaType> resolveMediaTypes(ServerWebExchange exchange) {, +		String key = getKey(exchange);, +				this.mediaTypeLookup.putIfAbsent(key, mediaType);, +	 * Get the key to look up a MediaType with., +	protected abstract String getKey(ServerWebExchange exchange);, +	 * Get the MediaType for the given key., +	protected MediaType getMediaType(String key) {, +		key = key.toLowerCase(Locale.ENGLISH);, +		MediaType mediaType = this.mediaTypeLookup.get(key);, +		if (mediaType == null) {, +			mediaType = MediaTypeFactory.getMediaType("filename." + key).orElse(null);, +		return mediaType;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/CompositeContentTypeResolver.java, + * Copyright 2002-2017 the original author or authors., + * Contains and delegates to other {@link RequestedContentTypeResolver}., +public class CompositeContentTypeResolver implements RequestedContentTypeResolver {, +	public List<MediaType> resolveMediaTypes(ServerWebExchange exchange) {, +++ /dev/null, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/AbstractMappingContentTypeResolver.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.http.MediaTypeFactory;, + * Base class for resolvers that extract a key from the request and look up a, + * mapping to a MediaType. The use case is URI-based content negotiation for, + * example based on query parameter or file extension in the request path., +public abstract class AbstractMappingContentTypeResolver implements RequestedContentTypeResolver {, +	public AbstractMappingContentTypeResolver(Map<String, MediaType> mediaTypes) {, +		mediaTypes.forEach((key, mediaType) ->, +				this.mediaTypeLookup.put(key.toLowerCase(Locale.ENGLISH), mediaType));, +	public List<MediaType> resolveMediaTypes(ServerWebExchange exchange) {, +		String key = getKey(exchange);, +				this.mediaTypeLookup.putIfAbsent(key, mediaType);, +	 * Get the key to look up a MediaType with., +	protected abstract String getKey(ServerWebExchange exchange);, +	 * Get the MediaType for the given key., +	protected MediaType getMediaType(String key) {, +		key = key.toLowerCase(Locale.ENGLISH);, +		MediaType mediaType = this.mediaTypeLookup.get(key);, +		if (mediaType == null) {, +			mediaType = MediaTypeFactory.getMediaType("filename." + key).orElse(null);, +		return mediaType;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/CompositeContentTypeResolver.java]