[+++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +		addConverter(new PrinterConverter(fieldType, formatter, this));, +		addConverter(new ParserConverter(fieldType, formatter, this));, +		addConverter(new PrinterConverter(fieldType, printer, this));, +		addConverter(new ParserConverter(fieldType, parser, this));, +			addConverter(new ConditionalGenericConverter() {, +			addConverter(new ConditionalGenericConverter() {, +++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +		addConverter(new PrinterConverter(fieldType, formatter, this));, +		addConverter(new ParserConverter(fieldType, formatter, this));, +		addConverter(new PrinterConverter(fieldType, printer, this));, +		addConverter(new ParserConverter(fieldType, parser, this));, +			addConverter(new ConditionalGenericConverter() {, +			addConverter(new ConditionalGenericConverter() {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +			}, +			else if (isMap()) {, +++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +		addConverter(new PrinterConverter(fieldType, formatter, this));, +		addConverter(new ParserConverter(fieldType, formatter, this));, +		addConverter(new PrinterConverter(fieldType, printer, this));, +		addConverter(new ParserConverter(fieldType, parser, this));, +			addConverter(new ConditionalGenericConverter() {, +			addConverter(new ConditionalGenericConverter() {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +			}, +			else if (isMap()) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/ConverterRegistry.java, + * @author Juergen Hoeller, +	 * Add a generic converter to this registry., +	 */, +	void addConverter(GenericConverter converter);, +, +	/**, +	 * Add a plain converter to this registry., +++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +		addConverter(new PrinterConverter(fieldType, formatter, this));, +		addConverter(new ParserConverter(fieldType, formatter, this));, +		addConverter(new PrinterConverter(fieldType, printer, this));, +		addConverter(new ParserConverter(fieldType, parser, this));, +			addConverter(new ConditionalGenericConverter() {, +			addConverter(new ConditionalGenericConverter() {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +			}, +			else if (isMap()) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/ConverterRegistry.java, + * @author Juergen Hoeller, +	 * Add a generic converter to this registry., +	 */, +	void addConverter(GenericConverter converter);, +, +	/**, +	 * Add a plain converter to this registry., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ArrayToCollectionConverter.java, + *, + * <p>First, creates a new Collection of the requested targetType., + * Will perform an element conversion from the source component type, + * to the collection's parameterized type if necessary., +				Object targetElement = ConversionUtils.invokeConverter(, +						converter, sourceElement, sourceElementType, targetElementType);, +++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +		addConverter(new PrinterConverter(fieldType, formatter, this));, +		addConverter(new ParserConverter(fieldType, formatter, this));, +		addConverter(new PrinterConverter(fieldType, printer, this));, +		addConverter(new ParserConverter(fieldType, parser, this));, +			addConverter(new ConditionalGenericConverter() {, +			addConverter(new ConditionalGenericConverter() {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +			}, +			else if (isMap()) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/ConverterRegistry.java, + * @author Juergen Hoeller, +	 * Add a generic converter to this registry., +	 */, +	void addConverter(GenericConverter converter);, +, +	/**, +	 * Add a plain converter to this registry., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ArrayToCollectionConverter.java, + *, + * <p>First, creates a new Collection of the requested targetType., + * Will perform an element conversion from the source component type, + * to the collection's parameterized type if necessary., +				Object targetElement = ConversionUtils.invokeConverter(, +						converter, sourceElement, sourceElementType, targetElementType);, +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +		addConverter(new PrinterConverter(fieldType, formatter, this));, +		addConverter(new ParserConverter(fieldType, formatter, this));, +		addConverter(new PrinterConverter(fieldType, printer, this));, +		addConverter(new ParserConverter(fieldType, parser, this));, +			addConverter(new ConditionalGenericConverter() {, +			addConverter(new ConditionalGenericConverter() {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +			}, +			else if (isMap()) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/ConverterRegistry.java, + * @author Juergen Hoeller, +	 * Add a generic converter to this registry., +	 */]