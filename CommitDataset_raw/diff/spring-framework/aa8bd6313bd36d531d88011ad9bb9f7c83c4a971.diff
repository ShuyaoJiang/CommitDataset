[+++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/MBeanExportOperations.java, + * Copyright 2002-2009 the original author or authors., +	/**, +	 * Remove the specified MBean from the underlying MBeanServer registry., +	 * @param objectName the {@link ObjectName} of the resource to remove, +	 */, +	void unregisterManagedResource(ObjectName objectName);, +, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/MBeanExportOperations.java, + * Copyright 2002-2009 the original author or authors., +	/**, +	 * Remove the specified MBean from the underlying MBeanServer registry., +	 * @param objectName the {@link ObjectName} of the resource to remove, +	 */, +	void unregisterManagedResource(ObjectName objectName);, +, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, + * JMX exporter that allows for exposing any <i>Spring-managed bean</i> to a, + * JMX {@link javax.management.MBeanServer}, without the need to define any, + * <p>If a bean implements one of the JMX management interfaces, MBeanExporter can, + * simply register the MBean with the server through its autodetection process., + * <p>If a bean does not implement one of the JMX management interfaces, MBeanExporter, + * will create the management information using the supplied {@link MBeanInfoAssembler}., + * <p>A list of {@link MBeanExporterListener MBeanExporterListeners} can be registered, + * via the {@link #setListeners(MBeanExporterListener[]) listeners} property, allowing, + * application code to be notified of MBean registration and unregistration events., +		ObjectName objectName;, +	public void unregisterManagedResource(ObjectName objectName) {, +		Assert.notNull(objectName, "ObjectName must not be null");, +		doUnregister(objectName);, +	}, +]