[+++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractDecoder.java, +	private final List<MimeType> decodableMimeTypes;, +		return this.decodableMimeTypes.stream().anyMatch(candidate -> candidate.isCompatibleWith(mimeType));, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractDecoder.java, +	private final List<MimeType> decodableMimeTypes;, +		return this.decodableMimeTypes.stream().anyMatch(candidate -> candidate.isCompatibleWith(mimeType));, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractEncoder.java, +	private final List<MimeType> encodableMimeTypes;, +		return this.encodableMimeTypes.stream().anyMatch(candidate -> candidate.isCompatibleWith(mimeType));, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractDecoder.java, +	private final List<MimeType> decodableMimeTypes;, +		return this.decodableMimeTypes.stream().anyMatch(candidate -> candidate.isCompatibleWith(mimeType));, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractEncoder.java, +	private final List<MimeType> encodableMimeTypes;, +		return this.encodableMimeTypes.stream().anyMatch(candidate -> candidate.isCompatibleWith(mimeType));, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractSingleValueEncoder.java, +	public final Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory,, +			ResolvableType elementType, MimeType mimeType, Object... hints) {, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractDecoder.java, +	private final List<MimeType> decodableMimeTypes;, +		return this.decodableMimeTypes.stream().anyMatch(candidate -> candidate.isCompatibleWith(mimeType));, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractEncoder.java, +	private final List<MimeType> encodableMimeTypes;, +		return this.encodableMimeTypes.stream().anyMatch(candidate -> candidate.isCompatibleWith(mimeType));, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractSingleValueEncoder.java, +	public final Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory,, +			ResolvableType elementType, MimeType mimeType, Object... hints) {, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferDecoder.java, +import org.springframework.core.io.buffer.DataBufferUtils;, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractDecoder.java, +	private final List<MimeType> decodableMimeTypes;, +		return this.decodableMimeTypes.stream().anyMatch(candidate -> candidate.isCompatibleWith(mimeType));, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractEncoder.java, +	private final List<MimeType> encodableMimeTypes;, +		return this.encodableMimeTypes.stream().anyMatch(candidate -> candidate.isCompatibleWith(mimeType));, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractSingleValueEncoder.java, +	public final Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory,, +			ResolvableType elementType, MimeType mimeType, Object... hints) {, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferDecoder.java, +import org.springframework.core.io.buffer.DataBufferUtils;, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractDecoder.java, +	private final List<MimeType> decodableMimeTypes;, +		return this.decodableMimeTypes.stream().anyMatch(candidate -> candidate.isCompatibleWith(mimeType));, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractEncoder.java, +	private final List<MimeType> encodableMimeTypes;, +		return this.encodableMimeTypes.stream().anyMatch(candidate -> candidate.isCompatibleWith(mimeType));, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractSingleValueEncoder.java, +	public final Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory,, +			ResolvableType elementType, MimeType mimeType, Object... hints) {, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferDecoder.java, +import org.springframework.core.io.buffer.DataBufferUtils;, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/CharSequenceEncoder.java, + * Encode from a {@code CharSequence} stream to a bytes stream., +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractDecoder.java, +	private final List<MimeType> decodableMimeTypes;, +		return this.decodableMimeTypes.stream().anyMatch(candidate -> candidate.isCompatibleWith(mimeType));, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractEncoder.java, +	private final List<MimeType> encodableMimeTypes;, +		return this.encodableMimeTypes.stream().anyMatch(candidate -> candidate.isCompatibleWith(mimeType));, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractSingleValueEncoder.java, +	public final Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory,, +			ResolvableType elementType, MimeType mimeType, Object... hints) {, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferDecoder.java, +import org.springframework.core.io.buffer.DataBufferUtils;, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/CharSequenceEncoder.java, + * Encode from a {@code CharSequence} stream to a bytes stream., +++ b/spring-core/src/main/java/org/springframework/core/codec/CodecException.java, + * Copyright 2002-2016 the original author or authors., +	public CodecException(String msg, Throwable cause) {, +		super(msg, cause);, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractDecoder.java, +	private final List<MimeType> decodableMimeTypes;, +		return this.decodableMimeTypes.stream().anyMatch(candidate -> candidate.isCompatibleWith(mimeType));, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractEncoder.java, +	private final List<MimeType> encodableMimeTypes;, +		return this.encodableMimeTypes.stream().anyMatch(candidate -> candidate.isCompatibleWith(mimeType));, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractSingleValueEncoder.java, +	public final Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory,, +			ResolvableType elementType, MimeType mimeType, Object... hints) {, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferDecoder.java, +import org.springframework.core.io.buffer.DataBufferUtils;, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/CharSequenceEncoder.java, + * Encode from a {@code CharSequence} stream to a bytes stream., +++ b/spring-core/src/main/java/org/springframework/core/codec/CodecException.java, + * Copyright 2002-2016 the original author or authors., +	public CodecException(String msg, Throwable cause) {, +		super(msg, cause);, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/Decoder.java, + * @param <T> the type of elements in the output stream, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractDecoder.java, +	private final List<MimeType> decodableMimeTypes;, +		return this.decodableMimeTypes.stream().anyMatch(candidate -> candidate.isCompatibleWith(mimeType));]