[+++ b/org.springframework.context/src/main/java/org/springframework/model/binder/support/AbstractBinder.java, + * @see #setMessageSource(MessageSource), +	 * Configure the fields for which values must be present in each bind attempt., +	 * @param fieldNames the required field names, +	 * @see MissingFieldException, +	 */, +	public void setRequiredFields(String[] fieldNames) {, +		this.requiredFields = fieldNames;, +	}, +, +	/**, +			results.add(bindField(fieldValue.getKey(), fieldValue.getValue()));, +	 * Default implementation simply returns the fieldValues Map unchanged. , +	 * @param fieldValues the original fieldValues Map provided by the caller, +	 * @return the filtered fieldValues Map that will be used to bind, +	 * Hook method subclasses override to perform a single field binding., +	 * @param name the field name, +	 * @param value the field value, +	protected abstract BindingResult bindField(String name, Object value);, +++ b/org.springframework.context/src/main/java/org/springframework/model/binder/support/AbstractBinder.java, + * @see #setMessageSource(MessageSource), +	 * Configure the fields for which values must be present in each bind attempt., +	 * @param fieldNames the required field names, +	 * @see MissingFieldException, +	 */, +	public void setRequiredFields(String[] fieldNames) {, +		this.requiredFields = fieldNames;, +	}, +, +	/**, +			results.add(bindField(fieldValue.getKey(), fieldValue.getValue()));, +	 * Default implementation simply returns the fieldValues Map unchanged. , +	 * @param fieldValues the original fieldValues Map provided by the caller, +	 * @return the filtered fieldValues Map that will be used to bind, +	 * Hook method subclasses override to perform a single field binding., +	 * @param name the field name, +	 * @param value the field value, +	protected abstract BindingResult bindField(String name, Object value);, +++ b/org.springframework.context/src/main/java/org/springframework/model/ui/support/PresentationModelBinder.java, +	protected BindingResult bindField(String name, Object value) {, +			field = getFieldModel(name);, +			return new FieldNotFoundResult(name, value, getMessageSource());, +			return new FieldNotEditableResult(name, value, getMessageSource());, +			return new AlertBindingResult(name, value, field.getStatusAlert());]