[+++ b/spring-expression/src/main/java/org/springframework/expression/Expression.java, +	 * Return the original string used to create this expression, unmodified., +	 * @return the original expression string, +	 */, +	String getExpressionString();, +, +	/**, +	 * Evaluate this expression against the specified root object, +	 * @param rootObject the root object against which properties/etc will be resolved, +	 * @return the evaluation result, +	 * @throws EvaluationException if there is a problem during evaluation, +	 */, +	@Nullable, +	Object getValue(Object rootObject) throws EvaluationException;, +, +	/**, +	 * @param rootObject the root object against which to evaluate the expression, +	 * @return true if the expression is writable, +	 * @throws EvaluationException if there is a problem determining if it is writable, +	 */, +	boolean isWritable(Object rootObject) throws EvaluationException;, +, +	/**, +	 * Determine if an expression can be written to, i.e. setValue() can be called., +	 * Set this expression in the provided context to the value provided., +	 * @param value the new value, +	 * @throws EvaluationException if there is a problem during evaluation, +	void setValue(Object rootObject, @Nullable Object value) throws EvaluationException;, +	void setValue(EvaluationContext context, @Nullable Object value) throws EvaluationException;, +	void setValue(EvaluationContext context, Object rootObject, @Nullable Object value) throws EvaluationException;, +++ b/spring-expression/src/main/java/org/springframework/expression/Expression.java, +	 * Return the original string used to create this expression, unmodified., +	 * @return the original expression string, +	 */, +	String getExpressionString();, +, +	/**, +	 * Evaluate this expression against the specified root object, +	 * @param rootObject the root object against which properties/etc will be resolved, +	 * @return the evaluation result, +	 * @throws EvaluationException if there is a problem during evaluation, +	 */, +	@Nullable, +	Object getValue(Object rootObject) throws EvaluationException;, +, +	/**, +	 * @param rootObject the root object against which to evaluate the expression, +	 * @return true if the expression is writable, +	 * @throws EvaluationException if there is a problem determining if it is writable, +	 */, +	boolean isWritable(Object rootObject) throws EvaluationException;, +, +	/**, +	 * Determine if an expression can be written to, i.e. setValue() can be called., +	 * Set this expression in the provided context to the value provided., +	 * @param value the new value, +	 * @throws EvaluationException if there is a problem during evaluation, +	void setValue(Object rootObject, @Nullable Object value) throws EvaluationException;, +	void setValue(EvaluationContext context, @Nullable Object value) throws EvaluationException;, +	void setValue(EvaluationContext context, Object rootObject, @Nullable Object value) throws EvaluationException;, +++ b/spring-expression/src/main/java/org/springframework/expression/common/CompositeStringExpression.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.lang.Nullable;, +	public final Expression[] getExpressions() {, +		return this.expressions;, +	}, +, +	public <T> T getValue(@Nullable Class<T> expectedResultType) throws EvaluationException {, +		Object value = getValue();, +		return ExpressionUtils.convertTypedValue(null, new TypedValue(value), expectedResultType);, +	}, +, +	@Override, +	public <T> T getValue(Object rootObject, @Nullable Class<T> desiredResultType) throws EvaluationException {, +		Object value = getValue(rootObject);, +		return ExpressionUtils.convertTypedValue(null, new TypedValue(value), desiredResultType);, +	}, +, +	@Override, +	public <T> T getValue(EvaluationContext context, @Nullable Class<T> expectedResultType), +			throws EvaluationException {, +, +		Object value = getValue(context);, +		return ExpressionUtils.convertTypedValue(context, new TypedValue(value), expectedResultType);, +	}, +, +	@Override, +	public <T> T getValue(EvaluationContext context, Object rootObject, @Nullable Class<T> desiredResultType), +			throws EvaluationException {, +, +		Object value = getValue(context,rootObject);, +		return ExpressionUtils.convertTypedValue(context, new TypedValue(value), desiredResultType);, +	public Class<?> getValueType(EvaluationContext context) {, +		return String.class;, +	public TypeDescriptor getValueTypeDescriptor() {, +		return TypeDescriptor.valueOf(String.class);, +	}, +, +	@Override, +	public TypeDescriptor getValueTypeDescriptor(EvaluationContext context) {]