[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, + * Copyright 2002-2014 the original author or authors., +				return (c1pl < c2pl ? 1 : (c1pl > c2pl ? -1 : 0));, +				return (c1pl < c2pl ? 1 : (c1pl > c2pl ? -1 : 0));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, + * Copyright 2002-2014 the original author or authors., +				return (c1pl < c2pl ? 1 : (c1pl > c2pl ? -1 : 0));, +				return (c1pl < c2pl ? 1 : (c1pl > c2pl ? -1 : 0));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveConstructorResolver.java, + * Copyright 2002-2014 the original author or authors., +	public ConstructorExecutor resolve(EvaluationContext context, String typeName, List<TypeDescriptor> argumentTypes), +			Class<?> type = context.getTypeLocator().findType(typeName);, +					return (c1pl < c2pl ? -1 : (c1pl > c2pl ? 1 : 0));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, + * Copyright 2002-2014 the original author or authors., +				return (c1pl < c2pl ? 1 : (c1pl > c2pl ? -1 : 0));, +				return (c1pl < c2pl ? 1 : (c1pl > c2pl ? -1 : 0));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveConstructorResolver.java, + * Copyright 2002-2014 the original author or authors., +	public ConstructorExecutor resolve(EvaluationContext context, String typeName, List<TypeDescriptor> argumentTypes), +			Class<?> type = context.getTypeLocator().findType(typeName);, +					return (c1pl < c2pl ? -1 : (c1pl > c2pl ? 1 : 0));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java, + * Copyright 2002-2014 the original author or authors., +						return (m1pl < m2pl ? -1 : (m1pl > m2pl ? 1 : 0));]