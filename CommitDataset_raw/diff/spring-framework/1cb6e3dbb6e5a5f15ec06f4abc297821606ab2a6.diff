[+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, +	@Override, +	protected void prepareRefresh() {, +		this.scanner.clearCache();, +		super.prepareRefresh();, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, +	@Override, +	protected void prepareRefresh() {, +		this.scanner.clearCache();, +		super.prepareRefresh();, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, +, +	private MetadataReaderFactory metadataReaderFactory =, +			new CachingMetadataReaderFactory(this.resourcePatternResolver);, +	 * Return the ResourceLoader that this component provider uses., +	 */, +	public final ResourceLoader getResourceLoader() {, +		return this.resourcePatternResolver;, +	}, +, +	/**, +	 * Set the {@link MetadataReaderFactory} to use., +	 * <p>Default is a {@link CachingMetadataReaderFactory} for the specified, +	 * {@linkplain #setResourceLoader resource loader}., +	 * <p>Call this setter method <i>after</i> {@link #setResourceLoader} in order, +	 * for the given MetadataReaderFactory to override the default factory., +	 */, +	public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {, +		this.metadataReaderFactory = metadataReaderFactory;, +	}, +, +	/**, +	 * Return the MetadataReaderFactory used by this component provider., +	 */, +	public final MetadataReaderFactory getMetadataReaderFactory() {, +		return this.metadataReaderFactory;, +	}, +, +	/**, +	public final Environment getEnvironment() {, +, +	/**, +	 * Clear the underlying metadata cache, removing all cached class metadata., +	 */, +	public void clearCache() {, +		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {, +			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache();, +		}, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, +	@Override, +	protected void prepareRefresh() {, +		this.scanner.clearCache();, +		super.prepareRefresh();, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, +, +	private MetadataReaderFactory metadataReaderFactory =, +			new CachingMetadataReaderFactory(this.resourcePatternResolver);, +	 * Return the ResourceLoader that this component provider uses., +	 */, +	public final ResourceLoader getResourceLoader() {, +		return this.resourcePatternResolver;, +	}, +, +	/**, +	 * Set the {@link MetadataReaderFactory} to use., +	 * <p>Default is a {@link CachingMetadataReaderFactory} for the specified, +	 * {@linkplain #setResourceLoader resource loader}., +	 * <p>Call this setter method <i>after</i> {@link #setResourceLoader} in order, +	 * for the given MetadataReaderFactory to override the default factory., +	 */, +	public void setMetadataReaderFactory(MetadataReaderFactory metadataReaderFactory) {, +		this.metadataReaderFactory = metadataReaderFactory;, +	}, +, +	/**, +	 * Return the MetadataReaderFactory used by this component provider., +	 */, +	public final MetadataReaderFactory getMetadataReaderFactory() {, +		return this.metadataReaderFactory;, +	}, +, +	/**, +	public final Environment getEnvironment() {, +, +	/**, +	 * Clear the underlying metadata cache, removing all cached class metadata., +	 */, +	public void clearCache() {, +		if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {, +			((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache();, +		}, +	}]