[+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionInterceptor.java, +import java.util.concurrent.CompletableFuture;, +import java.util.concurrent.CompletionException;, +import java.util.function.Supplier;, +import org.springframework.lang.UsesJava8;, +	// Java 8's CompletableFuture type present?, +	private static final boolean completableFuturePresent = ClassUtils.isPresent(, +			"java.util.concurrent.CompletableFuture", AsyncExecutionInterceptor.class.getClassLoader());, +, +, +		if (completableFuturePresent) {, +			Future<Object> result = CompletableFutureDelegate.processCompletableFuture(returnType, task, executor);, +			if (result != null) {, +				return result;, +			}, +		}, +, +	/**, +	 * Inner class to avoid a hard dependency on Java 8., +	 */, +	@UsesJava8, +	private static class CompletableFutureDelegate {, +, +		public static <T> Future<T> processCompletableFuture(Class<?> returnType, final Callable<T> task, Executor executor) {, +			if (!CompletableFuture.class.isAssignableFrom(returnType)) {, +				return null;, +			}, +			return CompletableFuture.supplyAsync(new Supplier<T>() {, +				@Override, +				public T get() {, +					try {, +						return task.call();, +					}, +					catch (Throwable ex) {, +						throw new CompletionException(ex);, +					}, +				}, +			}, executor);, +		}, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionInterceptor.java, +import java.util.concurrent.CompletableFuture;, +import java.util.concurrent.CompletionException;, +import java.util.function.Supplier;, +import org.springframework.lang.UsesJava8;, +	// Java 8's CompletableFuture type present?, +	private static final boolean completableFuturePresent = ClassUtils.isPresent(, +			"java.util.concurrent.CompletableFuture", AsyncExecutionInterceptor.class.getClassLoader());, +, +, +		if (completableFuturePresent) {, +			Future<Object> result = CompletableFutureDelegate.processCompletableFuture(returnType, task, executor);, +			if (result != null) {, +				return result;, +			}, +		}, +, +	/**, +	 * Inner class to avoid a hard dependency on Java 8., +	 */, +	@UsesJava8, +	private static class CompletableFutureDelegate {, +, +		public static <T> Future<T> processCompletableFuture(Class<?> returnType, final Callable<T> task, Executor executor) {, +			if (!CompletableFuture.class.isAssignableFrom(returnType)) {, +				return null;, +			}, +			return CompletableFuture.supplyAsync(new Supplier<T>() {, +				@Override, +				public T get() {, +					try {, +						return task.call();, +					}, +					catch (Throwable ex) {, +						throw new CompletionException(ex);, +					}, +				}, +			}, executor);, +		}, +	}, +, +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncExecutionTests.java, +import java.util.concurrent.CompletableFuture;, +		CompletableFuture<String> completableFuture = asyncTest.returnSomethingCompletable(20);, +		assertEquals("20", completableFuture.get());, +			asyncTest.returnSomething(0).get();, +			asyncTest.returnSomething(-1).get();, +, +		try {, +			asyncTest.returnSomethingListenable(0).get();, +			fail("Should have thrown ExecutionException");, +		}, +		catch (ExecutionException ex) {, +			assertTrue(ex.getCause() instanceof IllegalArgumentException);, +		}, +, +		try {, +			asyncTest.returnSomethingListenable(-1).get();, +			fail("Should have thrown ExecutionException");]