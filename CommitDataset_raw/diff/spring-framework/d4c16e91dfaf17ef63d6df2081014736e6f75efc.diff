[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java, +import java.util.Collection;, +import java.util.LinkedList;, +				String methodIdentifier = it.next().getIdentifier();, +				if (!beanDefinition.isExternallyManagedInitMethod(methodIdentifier)) {, +					beanDefinition.registerExternallyManagedInitMethod(methodIdentifier);, +				String methodIdentifier = it.next().getIdentifier();, +				if (!beanDefinition.isExternallyManagedDestroyMethod(methodIdentifier)) {, +					beanDefinition.registerExternallyManagedDestroyMethod(methodIdentifier);, +		private final LinkedList<LifecycleElement> initMethods = new LinkedList<LifecycleElement>();, +		private final LinkedList<LifecycleElement> destroyMethods = new LinkedList<LifecycleElement>();, +			LifecycleElement element = new LifecycleElement(method);, +			if (!this.initMethods.contains(element)) {, +				this.initMethods.addFirst(element);, +			}, +		public Collection<LifecycleElement> getInitMethods() {, +			LifecycleElement element = new LifecycleElement(method);, +			if (!this.destroyMethods.contains(element)) {, +				this.destroyMethods.addLast(element);, +			}, +		public Collection<LifecycleElement> getDestroyMethods() {, +		private final String identifier;, +, +			this.identifier = (Modifier.isPrivate(method.getModifiers()) ?, +					method.getDeclaringClass() + "." + method.getName() : method.getName());, +		public String getIdentifier() {, +			return this.identifier;, +		}, +, +			return (this.identifier.equals(otherElement.identifier));, +			return this.identifier.hashCode();, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java, +import java.util.Collection;, +import java.util.LinkedList;, +				String methodIdentifier = it.next().getIdentifier();, +				if (!beanDefinition.isExternallyManagedInitMethod(methodIdentifier)) {, +					beanDefinition.registerExternallyManagedInitMethod(methodIdentifier);, +				String methodIdentifier = it.next().getIdentifier();, +				if (!beanDefinition.isExternallyManagedDestroyMethod(methodIdentifier)) {, +					beanDefinition.registerExternallyManagedDestroyMethod(methodIdentifier);, +		private final LinkedList<LifecycleElement> initMethods = new LinkedList<LifecycleElement>();, +		private final LinkedList<LifecycleElement> destroyMethods = new LinkedList<LifecycleElement>();, +			LifecycleElement element = new LifecycleElement(method);, +			if (!this.initMethods.contains(element)) {, +				this.initMethods.addFirst(element);, +			}, +		public Collection<LifecycleElement> getInitMethods() {, +			LifecycleElement element = new LifecycleElement(method);, +			if (!this.destroyMethods.contains(element)) {, +				this.destroyMethods.addLast(element);, +			}, +		public Collection<LifecycleElement> getDestroyMethods() {, +		private final String identifier;, +, +			this.identifier = (Modifier.isPrivate(method.getModifiers()) ?, +					method.getDeclaringClass() + "." + method.getName() : method.getName());, +		public String getIdentifier() {, +			return this.identifier;, +		}, +, +			return (this.identifier.equals(otherElement.identifier));, +			return this.identifier.hashCode();, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessorTests.java, +import static org.junit.Assert.*;, +, +import org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;, +			if (!this.initCalled) {, +				throw new IllegalStateException("Superclass init method not called yet");, +			}, +			if (this.destroyCalled) {, +				throw new IllegalStateException("Superclass destroy called too soon");, +			}, +			if (this.destroyCalled) {, +				throw new IllegalStateException("Superclass destroy called too soon");, +			}]