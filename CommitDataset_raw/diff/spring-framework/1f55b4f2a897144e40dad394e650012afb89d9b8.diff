[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java, +	/**, +	 * Close the WebApplicationContext of this servlet., +	 * @see org.springframework.context.ConfigurableApplicationContext#close(), +	 */, +	@Override, +	public void destroy() {, +		getServletContext().log("Destroying Spring FrameworkServlet '" + getServletName() + "'");, +		if (this.webApplicationContext instanceof ConfigurableApplicationContext) {, +			((ConfigurableApplicationContext) this.webApplicationContext).close();, +		}, +	}, +, +		ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);, +		asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), new RequestBindingInterceptor());, +, +		initContextHolders(request, localeContext, requestAttributes);, +				else {, +					if (asyncManager.isConcurrentHandlingStarted()) {, +						logger.debug("Leaving response open for concurrent processing");, +, +			publishRequestHandledEvent(request, startTime, failureCause);, +	 * @return the corresponding LocaleContext, or {@code null} if none to bind, +	 * @see LocaleContextHolder#setLocaleContext, +	/**, +	 * Build ServletRequestAttributes for the given request (potentially also, +	 * holding a reference to the response), taking pre-bound attributes, +	 * (and their type) into consideration., +	 * @param request current HTTP request, +	 * @param response current HTTP response, +	 * @param previousAttributes pre-bound RequestAttributes instance, if any, +	 * @return the ServletRequestAttributes to bind, or {@code null} to preserve, +	 * the previously bound instance (or not binding any, if none bound before), +	 * @see RequestContextHolder#setRequestAttributes, +	 */, +	protected ServletRequestAttributes buildRequestAttributes(, +			HttpServletRequest request, HttpServletResponse response, RequestAttributes previousAttributes) {, +		if (previousAttributes == null || previousAttributes instanceof ServletRequestAttributes) {, +			return new ServletRequestAttributes(request);, +		}, +		else {, +			return null;  // preserve the pre-bound RequestAttributes instance, +		}, +	}, +, +	private void initContextHolders(, +			HttpServletRequest request, LocaleContext localeContext, RequestAttributes requestAttributes) {, +, +		if (localeContext != null) {, +		}, +		if (requestAttributes != null) {, +			RequestContextHolder.setRequestAttributes(requestAttributes, this.threadContextInheritable);, +	private void publishRequestHandledEvent(HttpServletRequest request, long startTime, Throwable failureCause) {, +		if (this.publishEvents) {, +			// Whether or not we succeeded, publish an event., +			long processingTime = System.currentTimeMillis() - startTime;, +			this.webApplicationContext.publishEvent(, +					new ServletRequestHandledEvent(this,, +							request.getRequestURI(), request.getRemoteAddr(),, +							request.getMethod(), getServletConfig().getServletName(),, +							WebUtils.getSessionId(request), getUsernameForRequest(request),, +							processingTime, failureCause));, +, +, +	/**, +	 * CallableProcessingInterceptor implementation that initializes and resets, +	 * FrameworkServlet's context holders, i.e. LocaleContextHolder and RequestContextHolder., +	 */, +	private class RequestBindingInterceptor extends CallableProcessingInterceptorAdapter {, +, +		@Override, +		public <T> void preProcess(NativeWebRequest webRequest, Callable<T> task) {, +			HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class);, +			if (request != null) {, +				HttpServletResponse response = webRequest.getNativeRequest(HttpServletResponse.class);, +				initContextHolders(request, buildLocaleContext(request), buildRequestAttributes(request, response, null));, +			}, +		}, +		@Override, +		public <T> void postProcess(NativeWebRequest webRequest, Callable<T> task, Object concurrentResult) {, +			HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class);, +			if (request != null) {, +				resetContextHolders(request, null, null);, +			}, +		}, +	}, +]