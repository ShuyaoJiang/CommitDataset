[+++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurerTests.java, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurerTests.java, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/xml/ProfileXmlBeanDefinitionTests.java, + * Tests various combinations of profile declarations against various profile, + * activation and profile default scenarios., + * @since 3.1, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurerTests.java, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/xml/ProfileXmlBeanDefinitionTests.java, + * Tests various combinations of profile declarations against various profile, + * activation and profile default scenarios., + * @since 3.1, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/EnumerablePropertySource.java, + * A {@link PropertySource} implementation capable of interrogating its, + * underlying source object to enumerate all possible property key/value, + * pairs. Exposes the {@link #getPropertyNames()} method to allow callers, + * to introspect available properties without having to access the underlying, + * source object. This also facilitates a more efficient implementation of, + * {@link #containsProperty(String)}, in that it can call {@link #getPropertyNames()}, + * and iterate through the returned array rather than attempting a call to, + * {@link #getProperty(String)} which may be more expensive. Implementations may, + * consider caching the result of {@link #getPropertyNames()} to fully exploit this, + * performance opportunity., + *, + * Most framework-provided {@code PropertySource} implementations are enumerable;, + * a counter-example would be {@code JndiPropertySource} where, due to the, + * nature of JNDI it is not possible to determine all possible property names at, + * any given time; rather it is only possible to try to access a property, + * (via {@link #getProperty(String)}) in order to evaluate whether it is present, + * or not., +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurerTests.java, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/xml/ProfileXmlBeanDefinitionTests.java, + * Tests various combinations of profile declarations against various profile, + * activation and profile default scenarios., + * @since 3.1, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/EnumerablePropertySource.java, + * A {@link PropertySource} implementation capable of interrogating its, + * underlying source object to enumerate all possible property key/value, + * pairs. Exposes the {@link #getPropertyNames()} method to allow callers, + * to introspect available properties without having to access the underlying, + * source object. This also facilitates a more efficient implementation of, + * {@link #containsProperty(String)}, in that it can call {@link #getPropertyNames()}, + * and iterate through the returned array rather than attempting a call to, + * {@link #getProperty(String)} which may be more expensive. Implementations may, + * consider caching the result of {@link #getPropertyNames()} to fully exploit this, + * performance opportunity., + *, + * Most framework-provided {@code PropertySource} implementations are enumerable;, + * a counter-example would be {@code JndiPropertySource} where, due to the, + * nature of JNDI it is not possible to determine all possible property names at, + * any given time; rather it is only possible to try to access a property, + * (via {@link #getProperty(String)}) in order to evaluate whether it is present, + * or not., +++ b/org.springframework.core/src/main/java/org/springframework/core/env/PropertySource.java, +		/**, +		 * Always return {@code null}., +		 */, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurerTests.java, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/xml/ProfileXmlBeanDefinitionTests.java, + * Tests various combinations of profile declarations against various profile, + * activation and profile default scenarios., + * @since 3.1, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/EnumerablePropertySource.java, + * A {@link PropertySource} implementation capable of interrogating its, + * underlying source object to enumerate all possible property key/value, + * pairs. Exposes the {@link #getPropertyNames()} method to allow callers, + * to introspect available properties without having to access the underlying, + * source object. This also facilitates a more efficient implementation of, + * {@link #containsProperty(String)}, in that it can call {@link #getPropertyNames()}, + * and iterate through the returned array rather than attempting a call to, + * {@link #getProperty(String)} which may be more expensive. Implementations may, + * consider caching the result of {@link #getPropertyNames()} to fully exploit this, + * performance opportunity., + *, + * Most framework-provided {@code PropertySource} implementations are enumerable;, + * a counter-example would be {@code JndiPropertySource} where, due to the, + * nature of JNDI it is not possible to determine all possible property names at, + * any given time; rather it is only possible to try to access a property, + * (via {@link #getProperty(String)}) in order to evaluate whether it is present, + * or not., +++ b/org.springframework.core/src/main/java/org/springframework/core/env/PropertySource.java, +		/**, +		 * Always return {@code null}., +		 */, +++ b/org.springframework.core/src/test/java/org/springframework/core/env/EnvironmentTests.java, +	public void getSystemEnvironment_withAndWithoutSecurityManager() {, +	private static Map<String, String> getModifiableSystemEnvironment() {, +		Map<String, String> env = System.getenv();, +				try {, +					Object obj = field.get(env);, +				} catch (Exception ex) {, +					throw new RuntimeException(ex);, +				}, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurerTests.java, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/xml/ProfileXmlBeanDefinitionTests.java, + * Tests various combinations of profile declarations against various profile, + * activation and profile default scenarios., + * @since 3.1, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/EnumerablePropertySource.java, + * A {@link PropertySource} implementation capable of interrogating its, + * underlying source object to enumerate all possible property key/value]