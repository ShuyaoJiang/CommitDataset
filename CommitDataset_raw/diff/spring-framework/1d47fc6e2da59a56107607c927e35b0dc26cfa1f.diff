[+++ b/spring-core/src/main/java/org/springframework/core/SerializableTypeWrapper.java, +import java.lang.reflect.InvocationTargetException;, +	private static final Class<?>[] SUPPORTED_SERIALIZABLE_TYPES = {, +			GenericArrayType.class, ParameterizedType.class, TypeVariable.class, WildcardType.class};, +	@SuppressWarnings("serial"), +	@SuppressWarnings("serial"), +	@SuppressWarnings("serial"), +		for (Class<?> type : SUPPORTED_SERIALIZABLE_TYPES) {, +		throw new IllegalArgumentException("Unsupported Type class " + provider.getType().getClass().getName());, +	@SuppressWarnings("serial"), +	private static abstract class DefaultTypeProvider implements TypeProvider {, +, +	@SuppressWarnings("serial"), +	private static class TypeProxyInvocationHandler implements InvocationHandler, Serializable {, +			try {, +			catch (InvocationTargetException ex) {, +				throw ex.getTargetException();, +		}, +	}, +	@SuppressWarnings("serial"), +		private void readObject(ObjectInputStream inputStream) throws IOException, ClassNotFoundException {, +				throw new IllegalStateException("Could not find original class structure", ex);, +	@SuppressWarnings("serial"), +		private void readObject(ObjectInputStream inputStream) throws IOException, ClassNotFoundException {, +							this.declaringClass.getDeclaredMethod(this.methodName, this.parameterTypes), this.parameterIndex);, +							this.declaringClass.getDeclaredConstructor(this.parameterTypes), this.parameterIndex);, +				throw new IllegalStateException("Could not find original class structure", ex);, +	@SuppressWarnings("serial"), +		private void readObject(ObjectInputStream inputStream) throws IOException, ClassNotFoundException {, +			Method method = ReflectionUtils.findMethod(this.provider.getType().getClass(), this.methodName);, +, +++ b/spring-core/src/main/java/org/springframework/core/SerializableTypeWrapper.java, +import java.lang.reflect.InvocationTargetException;, +	private static final Class<?>[] SUPPORTED_SERIALIZABLE_TYPES = {, +			GenericArrayType.class, ParameterizedType.class, TypeVariable.class, WildcardType.class};, +	@SuppressWarnings("serial"), +	@SuppressWarnings("serial"), +	@SuppressWarnings("serial"), +		for (Class<?> type : SUPPORTED_SERIALIZABLE_TYPES) {, +		throw new IllegalArgumentException("Unsupported Type class " + provider.getType().getClass().getName());, +	@SuppressWarnings("serial"), +	private static abstract class DefaultTypeProvider implements TypeProvider {, +, +	@SuppressWarnings("serial"), +	private static class TypeProxyInvocationHandler implements InvocationHandler, Serializable {, +			try {, +			catch (InvocationTargetException ex) {, +				throw ex.getTargetException();, +		}, +	}, +	@SuppressWarnings("serial"), +		private void readObject(ObjectInputStream inputStream) throws IOException, ClassNotFoundException {, +				throw new IllegalStateException("Could not find original class structure", ex);, +	@SuppressWarnings("serial"), +		private void readObject(ObjectInputStream inputStream) throws IOException, ClassNotFoundException {, +							this.declaringClass.getDeclaredMethod(this.methodName, this.parameterTypes), this.parameterIndex);, +							this.declaringClass.getDeclaredConstructor(this.parameterTypes), this.parameterIndex);, +				throw new IllegalStateException("Could not find original class structure", ex);, +	@SuppressWarnings("serial"), +		private void readObject(ObjectInputStream inputStream) throws IOException, ClassNotFoundException {, +			Method method = ReflectionUtils.findMethod(this.provider.getType().getClass(), this.methodName);, +, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +@SuppressWarnings("serial"), +]