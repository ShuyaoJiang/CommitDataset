[+++ b/build.gradle, +	ext.reactorVersion         = "Aluminium-BUILD-SNAPSHOT", +		maven { url "https://repo.spring.io/libs-snapshot" }, +++ b/build.gradle, +	ext.reactorVersion         = "Aluminium-BUILD-SNAPSHOT", +		maven { url "https://repo.spring.io/libs-snapshot" }, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +			emitter.onDispose(() -> closeChannel(channel));, +++ b/build.gradle, +	ext.reactorVersion         = "Aluminium-BUILD-SNAPSHOT", +		maven { url "https://repo.spring.io/libs-snapshot" }, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +			emitter.onDispose(() -> closeChannel(channel));, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/ReactiveAdapterRegistryTests.java, +import java.time.Duration;, +		assertEquals(sequence, ((Flux<Integer>) target).collectList().block(Duration.ofMillis(1000)));, +		assertEquals(new Integer(1), ((Mono<Integer>) target).block(Duration.ofMillis(1000)));, +		assertEquals(sequence, ((Flux<Integer>) target).collectList().block(Duration.ofMillis(1000)));, +		assertEquals(new Integer(1), ((Mono<Integer>) target).block(Duration.ofMillis(1000)));, +		((Mono<Void>) target).block(Duration.ofMillis(1000));, +		assertEquals(sequence, ((Flux<Integer>) target).collectList().block(Duration.ofMillis(1000)));, +		assertEquals(sequence, ((Flux<Integer>) target).collectList().block(Duration.ofMillis(1000)));, +		assertEquals(new Integer(1), ((Mono<Integer>) target).block(Duration.ofMillis(1000)));, +		((Mono<Void>) target).block(Duration.ofMillis(1000));, +		assertEquals(new Integer(1), ((Mono<Integer>) target).block(Duration.ofMillis(1000)));, +++ b/build.gradle, +	ext.reactorVersion         = "Aluminium-BUILD-SNAPSHOT", +		maven { url "https://repo.spring.io/libs-snapshot" }, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +			emitter.onDispose(() -> closeChannel(channel));, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/ReactiveAdapterRegistryTests.java, +import java.time.Duration;, +		assertEquals(sequence, ((Flux<Integer>) target).collectList().block(Duration.ofMillis(1000)));, +		assertEquals(new Integer(1), ((Mono<Integer>) target).block(Duration.ofMillis(1000)));, +		assertEquals(sequence, ((Flux<Integer>) target).collectList().block(Duration.ofMillis(1000)));, +		assertEquals(new Integer(1), ((Mono<Integer>) target).block(Duration.ofMillis(1000)));, +		((Mono<Void>) target).block(Duration.ofMillis(1000));, +		assertEquals(sequence, ((Flux<Integer>) target).collectList().block(Duration.ofMillis(1000)));, +		assertEquals(sequence, ((Flux<Integer>) target).collectList().block(Duration.ofMillis(1000)));, +		assertEquals(new Integer(1), ((Mono<Integer>) target).block(Duration.ofMillis(1000)));, +		((Mono<Void>) target).block(Duration.ofMillis(1000));, +		assertEquals(new Integer(1), ((Mono<Integer>) target).block(Duration.ofMillis(1000)));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java, +import java.time.Duration;, +				.flatMap(attempt -> Mono.delay(, +						Duration.ofMillis(reconnectStrategy.getTimeToNextAttempt(attempt))));, +++ b/build.gradle, +	ext.reactorVersion         = "Aluminium-BUILD-SNAPSHOT", +		maven { url "https://repo.spring.io/libs-snapshot" }, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +			emitter.onDispose(() -> closeChannel(channel));, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/ReactiveAdapterRegistryTests.java, +import java.time.Duration;, +		assertEquals(sequence, ((Flux<Integer>) target).collectList().block(Duration.ofMillis(1000)));, +		assertEquals(new Integer(1), ((Mono<Integer>) target).block(Duration.ofMillis(1000)));, +		assertEquals(sequence, ((Flux<Integer>) target).collectList().block(Duration.ofMillis(1000)));, +		assertEquals(new Integer(1), ((Mono<Integer>) target).block(Duration.ofMillis(1000)));, +		((Mono<Void>) target).block(Duration.ofMillis(1000));, +		assertEquals(sequence, ((Flux<Integer>) target).collectList().block(Duration.ofMillis(1000)));, +		assertEquals(sequence, ((Flux<Integer>) target).collectList().block(Duration.ofMillis(1000)));, +		assertEquals(new Integer(1), ((Mono<Integer>) target).block(Duration.ofMillis(1000)));, +		((Mono<Void>) target).block(Duration.ofMillis(1000));, +		assertEquals(new Integer(1), ((Mono<Integer>) target).block(Duration.ofMillis(1000)));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java, +import java.time.Duration;, +				.flatMap(attempt -> Mono.delay(, +						Duration.ofMillis(reconnectStrategy.getTimeToNextAttempt(attempt))));, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java, +			byte[] bytes = body.block(Duration.ZERO);, +++ b/build.gradle, +	ext.reactorVersion         = "Aluminium-BUILD-SNAPSHOT", +		maven { url "https://repo.spring.io/libs-snapshot" }, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +			emitter.onDispose(() -> closeChannel(channel));, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/ReactiveAdapterRegistryTests.java, +import java.time.Duration;, +		assertEquals(sequence, ((Flux<Integer>) target).collectList().block(Duration.ofMillis(1000)));, +		assertEquals(new Integer(1), ((Mono<Integer>) target).block(Duration.ofMillis(1000)));, +		assertEquals(sequence, ((Flux<Integer>) target).collectList().block(Duration.ofMillis(1000)));, +		assertEquals(new Integer(1), ((Mono<Integer>) target).block(Duration.ofMillis(1000)));, +		((Mono<Void>) target).block(Duration.ofMillis(1000));, +		assertEquals(sequence, ((Flux<Integer>) target).collectList().block(Duration.ofMillis(1000)));, +		assertEquals(sequence, ((Flux<Integer>) target).collectList().block(Duration.ofMillis(1000)));, +		assertEquals(new Integer(1), ((Mono<Integer>) target).block(Duration.ofMillis(1000)));, +		((Mono<Void>) target).block(Duration.ofMillis(1000));, +		assertEquals(new Integer(1), ((Mono<Integer>) target).block(Duration.ofMillis(1000)));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java, +import java.time.Duration;, +				.flatMap(attempt -> Mono.delay(, +						Duration.ofMillis(reconnectStrategy.getTimeToNextAttempt(attempt))));, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java, +			byte[] bytes = body.block(Duration.ZERO);, +++ b/spring-web/src/test/java/org/springframework/http/codec/ServerSentEventHttpMessageWriterTests.java, +				new MediaType("text", "event-stream"), outputMessage, Collections.emptyMap()).block(Duration.ofMillis(5000));, +				new MediaType("text", "event-stream"), outputMessage, Collections.emptyMap()).block(Duration.ofMillis(5000));, +				new MediaType("text", "event-stream"), outputMessage, Collections.emptyMap()).block(Duration.ofMillis(5000));, +				MediaType.TEXT_EVENT_STREAM, outputMessage, Collections.emptyMap()).block(Duration.ofMillis(5000));, +				MediaType.TEXT_EVENT_STREAM, outputMessage, Collections.emptyMap()).block(Duration.ofMillis(5000));, +++ b/build.gradle, +	ext.reactorVersion         = "Aluminium-BUILD-SNAPSHOT"]