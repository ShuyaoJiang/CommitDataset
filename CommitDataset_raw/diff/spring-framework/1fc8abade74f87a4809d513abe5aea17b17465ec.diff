[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/Expression.java, +import org.springframework.core.convert.TypeDescriptor;, +, +	 * Returns the most general type that can be passed to the {@link #setValue(EvaluationContext, Object)} method for, +	 * the given context., +	 * , +	 * @param context the context in which to evaluate the expression, +	 * @return a type descriptor for the most general type of value that can be set on this context, +	 * @throws EvaluationException if there is a problem determining the type, +	 */, +	public TypeDescriptor getValueTypeDescriptor(EvaluationContext context) throws EvaluationException;, +, +	/**, +	 * Returns the most general type that can be passed to the {@link #setValue(EvaluationContext, Object)} method using, +	 * the default context., +	 * , +	 * @return a type descriptor for the most general type of value that can be set on this context, +	 * @throws EvaluationException if there is a problem determining the type, +	 */, +	public TypeDescriptor getValueTypeDescriptor() throws EvaluationException;, +, +	, +	/**, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/Expression.java, +import org.springframework.core.convert.TypeDescriptor;, +, +	 * Returns the most general type that can be passed to the {@link #setValue(EvaluationContext, Object)} method for, +	 * the given context., +	 * , +	 * @param context the context in which to evaluate the expression, +	 * @return a type descriptor for the most general type of value that can be set on this context, +	 * @throws EvaluationException if there is a problem determining the type, +	 */, +	public TypeDescriptor getValueTypeDescriptor(EvaluationContext context) throws EvaluationException;, +, +	/**, +	 * Returns the most general type that can be passed to the {@link #setValue(EvaluationContext, Object)} method using, +	 * the default context., +	 * , +	 * @return a type descriptor for the most general type of value that can be set on this context, +	 * @throws EvaluationException if there is a problem determining the type, +	 */, +	public TypeDescriptor getValueTypeDescriptor() throws EvaluationException;, +, +	, +	/**, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/CompositeStringExpression.java, +import org.springframework.core.convert.TypeDescriptor;, +	public TypeDescriptor getValueTypeDescriptor(EvaluationContext context) {, +		return TypeDescriptor.valueOf(String.class);, +	}, +, +	public TypeDescriptor getValueTypeDescriptor() {, +		return TypeDescriptor.valueOf(String.class);, +	}, +, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/Expression.java, +import org.springframework.core.convert.TypeDescriptor;, +, +	 * Returns the most general type that can be passed to the {@link #setValue(EvaluationContext, Object)} method for, +	 * the given context., +	 * , +	 * @param context the context in which to evaluate the expression, +	 * @return a type descriptor for the most general type of value that can be set on this context, +	 * @throws EvaluationException if there is a problem determining the type, +	 */, +	public TypeDescriptor getValueTypeDescriptor(EvaluationContext context) throws EvaluationException;, +, +	/**, +	 * Returns the most general type that can be passed to the {@link #setValue(EvaluationContext, Object)} method using, +	 * the default context., +	 * , +	 * @return a type descriptor for the most general type of value that can be set on this context, +	 * @throws EvaluationException if there is a problem determining the type, +	 */, +	public TypeDescriptor getValueTypeDescriptor() throws EvaluationException;, +, +	, +	/**, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/CompositeStringExpression.java, +import org.springframework.core.convert.TypeDescriptor;, +	public TypeDescriptor getValueTypeDescriptor(EvaluationContext context) {, +		return TypeDescriptor.valueOf(String.class);, +	}, +, +	public TypeDescriptor getValueTypeDescriptor() {, +		return TypeDescriptor.valueOf(String.class);, +	}, +, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/LiteralExpression.java, +import org.springframework.core.convert.TypeDescriptor;, +	public TypeDescriptor getValueTypeDescriptor(EvaluationContext context) {, +		return TypeDescriptor.valueOf(String.class);, +	}, +, +	public TypeDescriptor getValueTypeDescriptor() {, +		return TypeDescriptor.valueOf(String.class);, +	}, +, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/Expression.java]