[+++ b/src/docs/asciidoc/web/webmvc-view.adoc, +can mix different types of views by using only one resolver, as the following example, +shows:, +`InternalResourceViewResolver` can also be used for JSPs. As a best practice, we strongly, +encourage placing your JSP files in a directory under the `'WEB-INF'` directory so there, +can be no direct access by clients., +The preceding example performs an HTTP POST, with the "`real`" DELETE method hidden behind, +a request parameter. It is picked up by the `HiddenHttpMethodFilter`, which is defined in, +In order to use Excel views, you need to add the Apache POI library to your classpath. For, +PDF generation, you need to add (preferably) the OpenPDF library., +to render the response content as XML. If the model contains multiple entries, you should, +explicitly set the object to be serialized by using the `modelKey` bean property. If the, +model contains a single entry, it is serialized automatically., +++ b/src/docs/asciidoc/web/webmvc-view.adoc, +can mix different types of views by using only one resolver, as the following example, +shows:, +`InternalResourceViewResolver` can also be used for JSPs. As a best practice, we strongly, +encourage placing your JSP files in a directory under the `'WEB-INF'` directory so there, +can be no direct access by clients., +The preceding example performs an HTTP POST, with the "`real`" DELETE method hidden behind, +a request parameter. It is picked up by the `HiddenHttpMethodFilter`, which is defined in, +In order to use Excel views, you need to add the Apache POI library to your classpath. For, +PDF generation, you need to add (preferably) the OpenPDF library., +to render the response content as XML. If the model contains multiple entries, you should, +explicitly set the object to be serialized by using the `modelKey` bean property. If the, +model contains a single entry, it is serialized automatically., +++ b/src/docs/asciidoc/web/webmvc.adoc, +Flash attribute support is always "`on`" and does not need to be enabled explicitly., +However, if not used, it never causes HTTP session creation. On each request, there is an, +"`input`" `FlashMap` with attributes passed from a previous request (if any) and an, +"`output`" `FlashMap` with attributes to save for a subsequent request. Both `FlashMap`, +instances are accessible from anywhere in Spring MVC through static methods in]