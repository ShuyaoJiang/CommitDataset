[+++ b/spring-context/src/main/java/org/springframework/cache/annotation/CacheAnnotationParser.java, + * {@link AnnotationCacheOperationSource} delegates to such parsers, + * for supporting specific annotation types such as Spring's own, + * {@link Cacheable}, {@link CachePut} and{@link CacheEvict}., + * @see AnnotationCacheOperationSource, + * @see SpringCacheAnnotationParser, +	 * Parse the cache definition for the given class,, +	 * based on an annotation type understood by this parser., +	 * <p>This essentially parses a known cache annotation into Spring's metadata, +	 * attribute class. Returns {@code null} if the class is not cacheable., +	 * @return the configured caching operation, or {@code null} if none found, +	 * Parse the cache definition for the given method,, +	 * based on an annotation type understood by this parser., +	 * <p>This essentially parses a known cache annotation into Spring's metadata, +	 * attribute class. Returns {@code null} if the method is not cacheable., +	 * @return the configured caching operation, or {@code null} if none found, +, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CacheAnnotationParser.java, + * {@link AnnotationCacheOperationSource} delegates to such parsers, + * for supporting specific annotation types such as Spring's own, + * {@link Cacheable}, {@link CachePut} and{@link CacheEvict}., + * @see AnnotationCacheOperationSource, + * @see SpringCacheAnnotationParser, +	 * Parse the cache definition for the given class,, +	 * based on an annotation type understood by this parser., +	 * <p>This essentially parses a known cache annotation into Spring's metadata, +	 * attribute class. Returns {@code null} if the class is not cacheable., +	 * @return the configured caching operation, or {@code null} if none found, +	 * Parse the cache definition for the given method,, +	 * based on an annotation type understood by this parser., +	 * <p>This essentially parses a known cache annotation into Spring's metadata, +	 * attribute class. Returns {@code null} if the method is not cacheable., +	 * @return the configured caching operation, or {@code null} if none found, +, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/AbstractFallbackCacheOperationSource.java, +	 * Subclasses need to implement this to return the caching attribute for the, +	 * given class, if any., +	 * @return all caching attribute associated with this class, or {@code null} if none, +	 * Subclasses need to implement this to return the caching attribute for the, +	 * given method, if any., +	 * @param method the method to retrieve the attribute for, +	 * @return all caching attribute associated with this method, or {@code null} if none, +	 */, +	@Nullable, +	protected abstract Collection<CacheOperation> findCacheOperations(Method method);, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CacheAnnotationParser.java, + * {@link AnnotationCacheOperationSource} delegates to such parsers, + * for supporting specific annotation types such as Spring's own, + * {@link Cacheable}, {@link CachePut} and{@link CacheEvict}., + * @see AnnotationCacheOperationSource, + * @see SpringCacheAnnotationParser, +	 * Parse the cache definition for the given class,, +	 * based on an annotation type understood by this parser., +	 * <p>This essentially parses a known cache annotation into Spring's metadata, +	 * attribute class. Returns {@code null} if the class is not cacheable., +	 * @return the configured caching operation, or {@code null} if none found, +	 * Parse the cache definition for the given method,, +	 * based on an annotation type understood by this parser., +	 * <p>This essentially parses a known cache annotation into Spring's metadata, +	 * attribute class. Returns {@code null} if the method is not cacheable., +	 * @return the configured caching operation, or {@code null} if none found, +, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/AbstractFallbackCacheOperationSource.java, +	 * Subclasses need to implement this to return the caching attribute for the, +	 * given class, if any., +	 * @return all caching attribute associated with this class, or {@code null} if none, +	 * Subclasses need to implement this to return the caching attribute for the, +	 * given method, if any., +	 * @param method the method to retrieve the attribute for, +	 * @return all caching attribute associated with this method, or {@code null} if none, +	 */, +	@Nullable, +	protected abstract Collection<CacheOperation> findCacheOperations(Method method);, +, +	/**, +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/EnableAsyncTests.java, +	@Test  // SPR-14949, +	public void findOnInterfaceWithInterfaceProxy() throws InterruptedException {, +	@Test  // SPR-14949, +	public void findOnInterfaceWithCglibProxy() throws InterruptedException {, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CacheAnnotationParser.java, + * {@link AnnotationCacheOperationSource} delegates to such parsers, + * for supporting specific annotation types such as Spring's own, + * {@link Cacheable}, {@link CachePut} and{@link CacheEvict}., + * @see AnnotationCacheOperationSource, + * @see SpringCacheAnnotationParser, +	 * Parse the cache definition for the given class,, +	 * based on an annotation type understood by this parser., +	 * <p>This essentially parses a known cache annotation into Spring's metadata, +	 * attribute class. Returns {@code null} if the class is not cacheable., +	 * @return the configured caching operation, or {@code null} if none found, +	 * Parse the cache definition for the given method,, +	 * based on an annotation type understood by this parser., +	 * <p>This essentially parses a known cache annotation into Spring's metadata, +	 * attribute class. Returns {@code null} if the method is not cacheable., +	 * @return the configured caching operation, or {@code null} if none found, +, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/AbstractFallbackCacheOperationSource.java]