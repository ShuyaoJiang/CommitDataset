[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +		this.logger.trace("I/O event onDataAvailable");, +		this.logger.trace("I/O event onAllDataRead");, +	public final void onError(Throwable ex) {, +			this.logger.trace("I/O event onError: " + ex);, +		this.state.get().onError(this, ex);, +				Subscriber<? super T> subscriber = this.subscriber;, +				Assert.state(subscriber != null, "No subscriber");, +				if (logger.isTraceEnabled()) {, +					logger.trace("Data item read, publishing..");, +				}, +				subscriber.onNext(data);, +				if (logger.isTraceEnabled()) {, +					logger.trace("No more data to read");, +				}, +		boolean result = this.state.compareAndSet(oldState, newState);, +		if (result && logger.isTraceEnabled()) {, +			logger.trace(oldState + " -> " + newState);, +		}, +		return result;, +	}, +, +	private void changeToDemandState(State oldState) {, +		if (changeState(oldState, State.DEMAND)) {, +			checkOnDataAvailable();, +		}, +				logger.trace("Signal request(" + n + ")");, +				logger.trace("Signal cancel()");, +						publisher.logger.trace("Completed before demand");, +						if (publisher.logger.isTraceEnabled()) {, +							publisher.logger.trace("Completed with error before demand: " + ex);, +						}, +					publisher.changeToDemandState(this);, +					publisher.changeToDemandState(this);, +					publisher.changeToDemandState(NO_DEMAND);, +							publisher.changeToDemandState(READING);, +								if (r > 0) {, +									publisher.changeToDemandState(NO_DEMAND);, +					publisher.changeToDemandState(NO_DEMAND);, +				Subscriber<? super T> s = publisher.subscriber;, +				if (s != null) {, +					s.onComplete();, +				Subscriber<? super T> s = publisher.subscriber;, +				if (s != null) {, +					s.onError(t);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +		this.logger.trace("I/O event onDataAvailable");, +		this.logger.trace("I/O event onAllDataRead");, +	public final void onError(Throwable ex) {, +			this.logger.trace("I/O event onError: " + ex);, +		this.state.get().onError(this, ex);, +				Subscriber<? super T> subscriber = this.subscriber;, +				Assert.state(subscriber != null, "No subscriber");, +				if (logger.isTraceEnabled()) {, +					logger.trace("Data item read, publishing..");, +				}, +				subscriber.onNext(data);, +				if (logger.isTraceEnabled()) {, +					logger.trace("No more data to read");, +				}, +		boolean result = this.state.compareAndSet(oldState, newState);, +		if (result && logger.isTraceEnabled()) {, +			logger.trace(oldState + " -> " + newState);, +		}, +		return result;, +	}, +, +	private void changeToDemandState(State oldState) {, +		if (changeState(oldState, State.DEMAND)) {, +			checkOnDataAvailable();, +		}, +				logger.trace("Signal request(" + n + ")");, +				logger.trace("Signal cancel()");, +						publisher.logger.trace("Completed before demand");, +						if (publisher.logger.isTraceEnabled()) {, +							publisher.logger.trace("Completed with error before demand: " + ex);, +						}, +					publisher.changeToDemandState(this);, +					publisher.changeToDemandState(this);, +					publisher.changeToDemandState(NO_DEMAND);, +							publisher.changeToDemandState(READING);, +								if (r > 0) {, +									publisher.changeToDemandState(NO_DEMAND);, +					publisher.changeToDemandState(NO_DEMAND);, +				Subscriber<? super T> s = publisher.subscriber;, +				if (s != null) {, +					s.onComplete();, +				Subscriber<? super T> s = publisher.subscriber;, +				if (s != null) {, +					s.onError(t);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java, +	// Subscriber methods and methods to notify of async I/O events..., +		logger.trace("Received onNext publisher");, +	/**, +	 * Notify of an error. This can come from the upstream write Publisher or, +	 * from sub-classes as a result of an I/O error., +	 */, +	public final void onError(Throwable ex) {, +			logger.trace("Received onError: " + ex);, +		this.state.get().onError(this, ex);]