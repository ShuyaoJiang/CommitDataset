[+++ b/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.util.ClassUtils;, +, +	private static final boolean standardReflectionAvailable = ClassUtils.isPresent(, +			"java.lang.reflect.Executable", DefaultParameterNameDiscoverer.class.getClassLoader());, +++ b/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.util.ClassUtils;, +, +	private static final boolean standardReflectionAvailable = ClassUtils.isPresent(, +			"java.lang.reflect.Executable", DefaultParameterNameDiscoverer.class.getClassLoader());, +++ b/spring-core/src/main/java/org/springframework/core/JdkVersion.java, + * Copyright 2002-2015 the original author or authors., + * @deprecated as of Spring 4.2.1, in favor of direct checks for the desired, + * JDK API variants via reflection, +@Deprecated, +++ b/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.util.ClassUtils;, +, +	private static final boolean standardReflectionAvailable = ClassUtils.isPresent(, +			"java.lang.reflect.Executable", DefaultParameterNameDiscoverer.class.getClassLoader());, +++ b/spring-core/src/main/java/org/springframework/core/JdkVersion.java, + * Copyright 2002-2015 the original author or authors., + * @deprecated as of Spring 4.2.1, in favor of direct checks for the desired, + * JDK API variants via reflection, +@Deprecated, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/SqlRowSetResultSetExtractor.java, + * Copyright 2002-2015 the original author or authors., + * by default, Sun's {@code com.sun.rowset.CachedRowSetImpl} class on Java 6,, + * or the {@code javax.sql.rowset.RowSetProvider} mechanism on Java 7+ / JDBC 4.1+., +		if (ClassUtils.isPresent("javax.sql.rowset.RowSetProvider",, +				SqlRowSetResultSetExtractor.class.getClassLoader())) {, +			// using JDBC 4.1 RowSetProvider, available on JDK 7+, +			// JDBC 4.1 API not available - fall back to Sun CachedRowSetImpl on JDK 6, +++ b/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.util.ClassUtils;, +, +	private static final boolean standardReflectionAvailable = ClassUtils.isPresent(, +			"java.lang.reflect.Executable", DefaultParameterNameDiscoverer.class.getClassLoader());, +++ b/spring-core/src/main/java/org/springframework/core/JdkVersion.java, + * Copyright 2002-2015 the original author or authors., + * @deprecated as of Spring 4.2.1, in favor of direct checks for the desired, + * JDK API variants via reflection, +@Deprecated, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/SqlRowSetResultSetExtractor.java, + * Copyright 2002-2015 the original author or authors., + * by default, Sun's {@code com.sun.rowset.CachedRowSetImpl} class on Java 6,, + * or the {@code javax.sql.rowset.RowSetProvider} mechanism on Java 7+ / JDBC 4.1+., +		if (ClassUtils.isPresent("javax.sql.rowset.RowSetProvider",, +				SqlRowSetResultSetExtractor.class.getClassLoader())) {, +			// using JDBC 4.1 RowSetProvider, available on JDK 7+, +			// JDBC 4.1 API not available - fall back to Sun CachedRowSetImpl on JDK 6, +++ b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java, +	@SuppressWarnings("deprecation"), +				boolean isJdk6 = (org.springframework.core.JdkVersion.getMajorJavaVersion() <= org.springframework.core.JdkVersion.JAVA_16);, +					if (isJdk6 && classArgument.isArray()) {, +					else {, +						return (classArgument.getComponentType() == Byte.TYPE);, +				}, +				else if (isJdk6 && typeArgument instanceof GenericArrayType) {, +					return (arrayType.getGenericComponentType() == Byte.TYPE);]