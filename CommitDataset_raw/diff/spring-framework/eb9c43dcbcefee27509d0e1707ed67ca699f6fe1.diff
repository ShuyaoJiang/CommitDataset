[+++ b/spring-core/src/test/java/org/springframework/core/NestedExceptionTests.java, + * Copyright 2002-2018 the original author or authors., +		assertTrue(stackTrace.contains(mesg));, +		String rootCauseMsg = "this is the obscure message of the root cause";, +		Exception rootCause = new Exception(rootCauseMsg);, +		assertTrue(nex.getMessage().contains(myMessage));, +		assertTrue(nex.getMessage().endsWith(rootCauseMsg));, +		assertTrue(stackTrace.contains(rootCause.getClass().getName()));, +		assertTrue(stackTrace.contains(rootCauseMsg));, +		assertTrue(stackTrace.contains(mesg));, +		String rootCauseMsg = "this is the obscure message of the root cause";, +		Exception rootCause = new Exception(rootCauseMsg);, +		assertTrue(nex.getMessage().contains(myMessage));, +		assertTrue(nex.getMessage().endsWith(rootCauseMsg));, +		assertTrue(stackTrace.contains(rootCause.getClass().getName()));, +		assertTrue(stackTrace.contains(rootCauseMsg));, +++ b/spring-core/src/test/java/org/springframework/core/NestedExceptionTests.java, + * Copyright 2002-2018 the original author or authors., +		assertTrue(stackTrace.contains(mesg));, +		String rootCauseMsg = "this is the obscure message of the root cause";, +		Exception rootCause = new Exception(rootCauseMsg);, +		assertTrue(nex.getMessage().contains(myMessage));, +		assertTrue(nex.getMessage().endsWith(rootCauseMsg));, +		assertTrue(stackTrace.contains(rootCause.getClass().getName()));, +		assertTrue(stackTrace.contains(rootCauseMsg));, +		assertTrue(stackTrace.contains(mesg));, +		String rootCauseMsg = "this is the obscure message of the root cause";, +		Exception rootCause = new Exception(rootCauseMsg);, +		assertTrue(nex.getMessage().contains(myMessage));, +		assertTrue(nex.getMessage().endsWith(rootCauseMsg));, +		assertTrue(stackTrace.contains(rootCause.getClass().getName()));, +		assertTrue(stackTrace.contains(rootCauseMsg));, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java, +				Throwable cause = ex.getCause();, +				if (cause instanceof HibernateException) {, +					// Rethrow a provider configuration exception (possibly with a nested cause) directly, +					throw (HibernateException) cause;, +				}, +						ex.getMessage(), cause);, +++ b/spring-core/src/test/java/org/springframework/core/NestedExceptionTests.java, + * Copyright 2002-2018 the original author or authors., +		assertTrue(stackTrace.contains(mesg));, +		String rootCauseMsg = "this is the obscure message of the root cause";, +		Exception rootCause = new Exception(rootCauseMsg);, +		assertTrue(nex.getMessage().contains(myMessage));, +		assertTrue(nex.getMessage().endsWith(rootCauseMsg));, +		assertTrue(stackTrace.contains(rootCause.getClass().getName()));, +		assertTrue(stackTrace.contains(rootCauseMsg));, +		assertTrue(stackTrace.contains(mesg));, +		String rootCauseMsg = "this is the obscure message of the root cause";, +		Exception rootCause = new Exception(rootCauseMsg);, +		assertTrue(nex.getMessage().contains(myMessage));, +		assertTrue(nex.getMessage().endsWith(rootCauseMsg));, +		assertTrue(stackTrace.contains(rootCause.getClass().getName()));, +		assertTrue(stackTrace.contains(rootCauseMsg));, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java, +				Throwable cause = ex.getCause();, +				if (cause instanceof HibernateException) {, +					// Rethrow a provider configuration exception (possibly with a nested cause) directly, +					throw (HibernateException) cause;, +				}, +						ex.getMessage(), cause);, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java, +		EntityManagerFactory emf;, +		try {, +			emf = createNativeEntityManagerFactory();, +		}, +		catch (PersistenceException ex) {, +			if (ex.getClass() == PersistenceException.class) {, +				// Plain PersistenceException wrapper for underlying exception?, +				// Make sure the nested exception message is properly exposed,, +				// along the lines of Spring's NestedRuntimeException.getMessage(), +				Throwable cause = ex.getCause();, +				if (cause != null) {, +					String message = ex.getMessage();, +					String causeString = cause.toString();, +					if (!message.endsWith(causeString)) {, +						throw new PersistenceException(message + "; nested exception is " + causeString, cause);, +					}, +				}, +			}, +			throw ex;, +		}, +, +, +, +				Throwable cause = ex.getCause();, +				if (cause instanceof PersistenceException) {, +					// Rethrow a provider configuration exception (possibly with a nested cause) directly, +					throw (PersistenceException) cause;, +				}, +						ex.getMessage(), cause);]