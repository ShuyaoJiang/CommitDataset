[+++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, +import java.text.SimpleDateFormat;, +import java.util.TimeZone;, +import org.springframework.http.HttpStatus;, +	private static final String DATE_FORMAT = "EEE, dd MMM yyyy HH:mm:ss zzz";, +, +	private static TimeZone GMT = TimeZone.getTimeZone("GMT");, +, +			if (response == null || isResponseCompatibleWithConditional(response, HEADER_LAST_MODIFIED)) {, +					response.setHeader(HEADER_LAST_MODIFIED, formatDate(lastModifiedTimestamp));, +	private boolean isResponseCompatibleWithConditional(HttpServletResponse response, String... headers) {, +		if (response != null) {, +			if (HttpStatus.valueOf(response.getStatus()).is2xxSuccessful()) {, +				for (String header : headers) {, +					if (response.containsHeader(header)) {, +						return false;, +					}, +				}, +				return true;, +			}, +		}, +		return false;, +	}, +, +			if (response == null || isResponseCompatibleWithConditional(response, HEADER_ETAG)) {, +			if (response == null || isResponseCompatibleWithConditional(response, HEADER_ETAG, HEADER_LAST_MODIFIED)) {, +					response.setHeader(HEADER_LAST_MODIFIED, formatDate(lastModifiedTimestamp));, +	private String formatDate(long date) {, +		SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT, Locale.US);, +		dateFormat.setTimeZone(GMT);, +		return dateFormat.format(new Date(date));, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, +import java.text.SimpleDateFormat;, +import java.util.TimeZone;, +import org.springframework.http.HttpStatus;, +	private static final String DATE_FORMAT = "EEE, dd MMM yyyy HH:mm:ss zzz";, +, +	private static TimeZone GMT = TimeZone.getTimeZone("GMT");, +, +			if (response == null || isResponseCompatibleWithConditional(response, HEADER_LAST_MODIFIED)) {, +					response.setHeader(HEADER_LAST_MODIFIED, formatDate(lastModifiedTimestamp));, +	private boolean isResponseCompatibleWithConditional(HttpServletResponse response, String... headers) {, +		if (response != null) {, +			if (HttpStatus.valueOf(response.getStatus()).is2xxSuccessful()) {, +				for (String header : headers) {, +					if (response.containsHeader(header)) {, +						return false;, +					}, +				}, +				return true;, +			}, +		}, +		return false;, +	}, +, +			if (response == null || isResponseCompatibleWithConditional(response, HEADER_ETAG)) {, +			if (response == null || isResponseCompatibleWithConditional(response, HEADER_ETAG, HEADER_LAST_MODIFIED)) {, +					response.setHeader(HEADER_LAST_MODIFIED, formatDate(lastModifiedTimestamp));, +	private String formatDate(long date) {, +		SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT, Locale.US);, +		dateFormat.setTimeZone(GMT);, +		return dateFormat.format(new Date(date));, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/context/request/WebRequest.java, +	 * <p>This will also transparently set the "Etag" and "Last-Modified" response headers,, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, +import java.text.SimpleDateFormat;, +import java.util.TimeZone;, +import org.springframework.http.HttpStatus;, +	private static final String DATE_FORMAT = "EEE, dd MMM yyyy HH:mm:ss zzz";, +, +	private static TimeZone GMT = TimeZone.getTimeZone("GMT");, +, +			if (response == null || isResponseCompatibleWithConditional(response, HEADER_LAST_MODIFIED)) {, +					response.setHeader(HEADER_LAST_MODIFIED, formatDate(lastModifiedTimestamp));, +	private boolean isResponseCompatibleWithConditional(HttpServletResponse response, String... headers) {, +		if (response != null) {, +			if (HttpStatus.valueOf(response.getStatus()).is2xxSuccessful()) {, +				for (String header : headers) {, +					if (response.containsHeader(header)) {, +						return false;, +					}, +				}, +				return true;, +			}, +		}, +		return false;, +	}, +, +			if (response == null || isResponseCompatibleWithConditional(response, HEADER_ETAG)) {, +			if (response == null || isResponseCompatibleWithConditional(response, HEADER_ETAG, HEADER_LAST_MODIFIED)) {, +					response.setHeader(HEADER_LAST_MODIFIED, formatDate(lastModifiedTimestamp));, +	private String formatDate(long date) {, +		SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT, Locale.US);, +		dateFormat.setTimeZone(GMT);, +		return dateFormat.format(new Date(date));, +	}]