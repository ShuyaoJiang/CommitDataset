[+++ b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpComponentsHttpInvokerRequestExecutor.java, + * Copyright 2002-2014 the original author or authors., +import org.apache.http.client.config.RequestConfig;, +import org.apache.http.config.Registry;, +import org.apache.http.config.RegistryBuilder;, +import org.apache.http.conn.socket.ConnectionSocketFactory;, +import org.apache.http.conn.socket.PlainConnectionSocketFactory;, +import org.apache.http.conn.ssl.SSLConnectionSocketFactory;, +import org.apache.http.impl.client.HttpClientBuilder;, +import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;, + * <p>As of Spring 4.1, this request executor requires Apache HttpComponents 4.3 or higher., +	private int connectionTimeout = 0;, +	private int readTimeout = DEFAULT_READ_TIMEOUT_MILLISECONDS;, +		Registry<ConnectionSocketFactory> schemeRegistry = RegistryBuilder.<ConnectionSocketFactory>create(), +				.register("http", PlainConnectionSocketFactory.getSocketFactory()), +				.register("https", SSLConnectionSocketFactory.getSocketFactory()), +				.build();, +		PoolingHttpClientConnectionManager connectionManager, +				= new PoolingHttpClientConnectionManager(schemeRegistry);, +		this.httpClient = HttpClientBuilder.create().setConnectionManager(connectionManager).build();, +		this.connectionTimeout = timeout;, +		setLegacyConnectionTimeout(getHttpClient(), timeout);, +	}, +, +	/**, +	 * Apply the specified connection timeout to deprecated {@link HttpClient}, +	 * implementations., +	 * <p>As of HttpClient 4.3, default parameters have to be exposed through a, +	 * {@link RequestConfig} instance instead of setting the parameters on the, +	 * client. Unfortunately, this behavior is not backward-compatible and older, +	 * {@link HttpClient} implementations will ignore the {@link RequestConfig}, +	 * object set in the context., +	 * <p>If the specified client is an older implementation, we set the custom, +	 * connection timeout through the deprecated API. Otherwise, we just return, +	 * as it is set through {@link RequestConfig} with newer clients., +	 * @param client the client to configure, +	 * @param timeout the custom connection timeout, +	 */, +	@SuppressWarnings("deprecation"), +	private void setLegacyConnectionTimeout(HttpClient client, int timeout) {, +		if (org.apache.http.impl.client.AbstractHttpClient.class.isInstance(client)) {, +			client.getParams().setIntParameter(, +					org.apache.http.params.CoreConnectionPNames.CONNECTION_TIMEOUT, timeout);, +		}, +		this.readTimeout = timeout;, +		setLegacySocketTimeout(getHttpClient(), timeout);, +	/**, +	 * Apply the specified socket timeout to deprecated {@link HttpClient}, +	 * implementations. See {@link #setLegacyConnectionTimeout}., +	 * @param client the client to configure, +	 * @param timeout the custom socket timeout, +	 * @see #setLegacyConnectionTimeout, +	 */, +	@SuppressWarnings("deprecation"), +	private void setLegacySocketTimeout(HttpClient client, int timeout) {, +		if (org.apache.http.impl.client.AbstractHttpClient.class.isInstance(client)) {, +			client.getParams().setIntParameter(, +					org.apache.http.params.CoreConnectionPNames.SO_TIMEOUT, timeout);, +		}, +	}, +		httpPost.setConfig(createRequestConfig(config, httpPost));, +	 * Create a {@link RequestConfig} for the given configuration and {@link HttpPost}., +	 * @param config the HTTP invoker configuration that specifies the, +	 * target service, +	 * @param httpPost the HttpPost instance, +	 * @return the RequestConfig to use for that HttpPost, +	 */, +	protected RequestConfig createRequestConfig(HttpInvokerClientConfiguration config, HttpPost httpPost) {, +		if (this.connectionTimeout > 0 || this.readTimeout > 0) {, +			return RequestConfig.custom(), +					.setConnectTimeout(this.connectionTimeout), +					.setSocketTimeout(this.readTimeout), +					.build();, +		}, +		else {, +			return RequestConfig.DEFAULT;, +		}, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpComponentsHttpInvokerRequestExecutor.java, + * Copyright 2002-2014 the original author or authors., +import org.apache.http.client.config.RequestConfig;, +import org.apache.http.config.Registry;, +import org.apache.http.config.RegistryBuilder;, +import org.apache.http.conn.socket.ConnectionSocketFactory;, +import org.apache.http.conn.socket.PlainConnectionSocketFactory;, +import org.apache.http.conn.ssl.SSLConnectionSocketFactory;, +import org.apache.http.impl.client.HttpClientBuilder;, +import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;, + * <p>As of Spring 4.1, this request executor requires Apache HttpComponents 4.3 or higher., +	private int connectionTimeout = 0;, +	private int readTimeout = DEFAULT_READ_TIMEOUT_MILLISECONDS;, +		Registry<ConnectionSocketFactory> schemeRegistry = RegistryBuilder.<ConnectionSocketFactory>create(), +				.register("http", PlainConnectionSocketFactory.getSocketFactory()), +				.register("https", SSLConnectionSocketFactory.getSocketFactory()), +				.build();, +		PoolingHttpClientConnectionManager connectionManager, +				= new PoolingHttpClientConnectionManager(schemeRegistry);, +		this.httpClient = HttpClientBuilder.create().setConnectionManager(connectionManager).build();]