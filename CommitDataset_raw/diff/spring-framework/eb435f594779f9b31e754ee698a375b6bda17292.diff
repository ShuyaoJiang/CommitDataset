[+++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +import org.springframework.core.ParameterizedTypeReference;, +	public <S> Mono<S> bodyToMono(ParameterizedTypeReference<S> typeReference) {, +		Assert.state(this.body != null, "No body");, +		return (Mono<S>) this.body;, +	}, +, +	@Override, +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +	public <S> Flux<S> bodyToFlux(ParameterizedTypeReference<S> typeReference) {, +		Assert.state(this.body != null, "No body");, +		return (Flux<S>) this.body;, +	}, +, +	@Override, +++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +import org.springframework.core.ParameterizedTypeReference;, +	public <S> Mono<S> bodyToMono(ParameterizedTypeReference<S> typeReference) {, +		Assert.state(this.body != null, "No body");, +		return (Mono<S>) this.body;, +	}, +, +	@Override, +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +	public <S> Flux<S> bodyToFlux(ParameterizedTypeReference<S> typeReference) {, +		Assert.state(this.body != null, "No body");, +		return (Flux<S>) this.body;, +	}, +, +	@Override, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +import org.springframework.core.ParameterizedTypeReference;, +		 * Set the body of the request to the given {@code Publisher} and return it., +		 * @param publisher the {@code Publisher} to write to the request, +		 * @param typeReference a type reference describing the elements contained in the publisher, +		 * @param <S> the type of the elements contained in the publisher, +		 * @param <P> the type of the {@code Publisher}, +		 * @return the built request, +		 */, +		<S, P extends Publisher<S>> Builder body(P publisher,, +				ParameterizedTypeReference<S> typeReference);, +, +		/**, +++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +import org.springframework.core.ParameterizedTypeReference;, +	public <S> Mono<S> bodyToMono(ParameterizedTypeReference<S> typeReference) {, +		Assert.state(this.body != null, "No body");, +		return (Mono<S>) this.body;, +	}, +, +	@Override, +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +	public <S> Flux<S> bodyToFlux(ParameterizedTypeReference<S> typeReference) {, +		Assert.state(this.body != null, "No body");, +		return (Flux<S>) this.body;, +	}, +, +	@Override, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +import org.springframework.core.ParameterizedTypeReference;, +		 * Set the body of the request to the given {@code Publisher} and return it., +		 * @param publisher the {@code Publisher} to write to the request, +		 * @param typeReference a type reference describing the elements contained in the publisher, +		 * @param <S> the type of the elements contained in the publisher, +		 * @param <P> the type of the {@code Publisher}, +		 * @return the built request, +		 */, +		<S, P extends Publisher<S>> Builder body(P publisher,, +				ParameterizedTypeReference<S> typeReference);, +, +		/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java, +import org.springframework.core.ParameterizedTypeReference;, +	public <S, P extends Publisher<S>> ClientRequest.Builder body(P publisher,, +			ParameterizedTypeReference<S> typeReference) {, +, +		Assert.notNull(publisher, "'publisher' must not be null");, +		Assert.notNull(typeReference, "'typeReference' must not be null");, +, +		this.inserter = BodyInserters.fromPublisher(publisher, typeReference);, +		return this;, +	}, +, +	@Override, +++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +import org.springframework.core.ParameterizedTypeReference;, +	public <S> Mono<S> bodyToMono(ParameterizedTypeReference<S> typeReference) {, +		Assert.state(this.body != null, "No body");, +		return (Mono<S>) this.body;, +	}, +, +	@Override, +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +	public <S> Flux<S> bodyToFlux(ParameterizedTypeReference<S> typeReference) {, +		Assert.state(this.body != null, "No body");, +		return (Flux<S>) this.body;]