[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, + * Copyright 2002-2012 the original author or authors., +		this.getBeanFactory().registerSingleton(, +				AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, + * Copyright 2002-2012 the original author or authors., +		this.getBeanFactory().registerSingleton(, +				AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +	 * The bean name of the internally managed BeanNameGenerator for use when processing, +	 * {@link Configuration} classes. Set by {@link AnnotationConfigApplicationContext}, +	 * and {@code AnnotationConfigWebApplicationContext} during bootstrap in order to make, +	 * any custom name generation strategy available to the underlying, +	 * {@link ConfigurationClassPostProcessor}., +	 * @since 3.1.1, +	 */, +	public static final String CONFIGURATION_BEAN_NAME_GENERATOR =, +			"org.springframework.context.annotation.internalConfigurationBeanNameGenerator";, +, +	/**, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, + * Copyright 2002-2012 the original author or authors., +		this.getBeanFactory().registerSingleton(, +				AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +	 * The bean name of the internally managed BeanNameGenerator for use when processing, +	 * {@link Configuration} classes. Set by {@link AnnotationConfigApplicationContext}, +	 * and {@code AnnotationConfigWebApplicationContext} during bootstrap in order to make, +	 * any custom name generation strategy available to the underlying, +	 * {@link ConfigurationClassPostProcessor}., +	 * @since 3.1.1, +	 */, +	public static final String CONFIGURATION_BEAN_NAME_GENERATOR =, +			"org.springframework.context.annotation.internalConfigurationBeanNameGenerator";, +, +	/**, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScan.java, + * Copyright 2002-2012 the original author or authors., +	 * <p>The default value of the {@link BeanNameGenerator} interface itself indicates, +	 * that the scanner used to process this {@code @ComponentScan} annotation should, +	 * use its inherited bean name generator, e.g. the default, +	 * {@link AnnotationBeanNameGenerator} or any custom instance supplied to the, +	 * application context at bootstrap time., +	 * @see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator), +	Class<? extends BeanNameGenerator> nameGenerator() default BeanNameGenerator.class;, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, + * Copyright 2002-2012 the original author or authors., +		this.getBeanFactory().registerSingleton(, +				AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +	 * The bean name of the internally managed BeanNameGenerator for use when processing, +	 * {@link Configuration} classes. Set by {@link AnnotationConfigApplicationContext}, +	 * and {@code AnnotationConfigWebApplicationContext} during bootstrap in order to make, +	 * any custom name generation strategy available to the underlying, +	 * {@link ConfigurationClassPostProcessor}., +	 * @since 3.1.1, +	 */, +	public static final String CONFIGURATION_BEAN_NAME_GENERATOR =, +			"org.springframework.context.annotation.internalConfigurationBeanNameGenerator";, +, +	/**, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScan.java, + * Copyright 2002-2012 the original author or authors., +	 * <p>The default value of the {@link BeanNameGenerator} interface itself indicates, +	 * that the scanner used to process this {@code @ComponentScan} annotation should, +	 * use its inherited bean name generator, e.g. the default, +	 * {@link AnnotationBeanNameGenerator} or any custom instance supplied to the, +	 * application context at bootstrap time., +	 * @see AnnotationConfigApplicationContext#setBeanNameGenerator(BeanNameGenerator), +	Class<? extends BeanNameGenerator> nameGenerator() default BeanNameGenerator.class;, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, +	private final BeanNameGenerator beanNameGenerator;, +, +			ResourceLoader resourceLoader, Environment environment,, +			BeanNameGenerator beanNameGenerator, BeanDefinitionRegistry registry) {, +, +		this.beanNameGenerator = beanNameGenerator;, +		boolean useInheritedGenerator = BeanNameGenerator.class.equals(generatorClass);, +		scanner.setBeanNameGenerator(useInheritedGenerator, +				? this.beanNameGenerator, +				: BeanUtils.instantiateClass(generatorClass));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, + * Copyright 2002-2012 the original author or authors., +		this.getBeanFactory().registerSingleton(, +				AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +	 * The bean name of the internally managed BeanNameGenerator for use when processing, +	 * {@link Configuration} classes. Set by {@link AnnotationConfigApplicationContext}, +	 * and {@code AnnotationConfigWebApplicationContext} during bootstrap in order to make, +	 * any custom name generation strategy available to the underlying, +	 * {@link ConfigurationClassPostProcessor}., +	 * @since 3.1.1, +	 */, +	public static final String CONFIGURATION_BEAN_NAME_GENERATOR =, +			"org.springframework.context.annotation.internalConfigurationBeanNameGenerator";, +, +	/**]