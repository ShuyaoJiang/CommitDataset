[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, +			}, +			catch (IllegalStateException ex) {, +						node.getStartMark(), ex.getMessage(), node.getEndMark());, +						throw new IllegalStateException("Duplicate key: " + key);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, +			}, +			catch (IllegalStateException ex) {, +						node.getStartMark(), ex.getMessage(), node.getEndMark());, +						throw new IllegalStateException("Duplicate key: " + key);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodExecutor.java, + * Copyright 2002-2015 the original author or authors., +			}, +			catch (NoSuchMethodException ex) {, +				// Continue below..., +		Class<?>[] ifcs = clazz.getInterfaces();, +		for (Class<?> ifc: ifcs) {, +			discoverPublicClass(method, ifc);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, +			}, +			catch (IllegalStateException ex) {, +						node.getStartMark(), ex.getMessage(), node.getEndMark());, +						throw new IllegalStateException("Duplicate key: " + key);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodExecutor.java, + * Copyright 2002-2015 the original author or authors., +			}, +			catch (NoSuchMethodException ex) {, +				// Continue below..., +		Class<?>[] ifcs = clazz.getInterfaces();, +		for (Class<?> ifc: ifcs) {, +			discoverPublicClass(method, ifc);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java, +	 * Configure a {@link MessageHeaderInitializer} to apply to the headers of, +	 * {@link Message}s from decoded STOMP frames., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, +			}, +			catch (IllegalStateException ex) {, +						node.getStartMark(), ex.getMessage(), node.getEndMark());, +						throw new IllegalStateException("Duplicate key: " + key);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodExecutor.java, + * Copyright 2002-2015 the original author or authors., +			}, +			catch (NoSuchMethodException ex) {, +				// Continue below..., +		Class<?>[] ifcs = clazz.getInterfaces();, +		for (Class<?> ifc: ifcs) {, +			discoverPublicClass(method, ifc);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java, +	 * Configure a {@link MessageHeaderInitializer} to apply to the headers of, +	 * {@link Message}s from decoded STOMP frames., +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletResponse.java, +		}, +		catch (ParseException ex) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, +			}, +			catch (IllegalStateException ex) {, +						node.getStartMark(), ex.getMessage(), node.getEndMark());, +						throw new IllegalStateException("Duplicate key: " + key);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodExecutor.java, + * Copyright 2002-2015 the original author or authors., +			}, +			catch (NoSuchMethodException ex) {, +				// Continue below..., +		Class<?>[] ifcs = clazz.getInterfaces();, +		for (Class<?> ifc: ifcs) {, +			discoverPublicClass(method, ifc);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java, +	 * Configure a {@link MessageHeaderInitializer} to apply to the headers of, +	 * {@link Message}s from decoded STOMP frames., +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletResponse.java, +		}, +		catch (ParseException ex) {, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/ResponseBodyTests.java, + * Copyright 2002-2015 the original author or authors., +, +			return new Person(name);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, +			}, +			catch (IllegalStateException ex) {, +						node.getStartMark(), ex.getMessage(), node.getEndMark());, +						throw new IllegalStateException("Duplicate key: " + key);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodExecutor.java, + * Copyright 2002-2015 the original author or authors., +			}, +			catch (NoSuchMethodException ex) {, +				// Continue below..., +		Class<?>[] ifcs = clazz.getInterfaces();, +		for (Class<?> ifc: ifcs) {, +			discoverPublicClass(method, ifc);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java, +	 * Configure a {@link MessageHeaderInitializer} to apply to the headers of, +	 * {@link Message}s from decoded STOMP frames., +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletResponse.java, +		}, +		catch (ParseException ex) {, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/ResponseBodyTests.java, + * Copyright 2002-2015 the original author or authors., +, +			return new Person(name);, +++ b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java]