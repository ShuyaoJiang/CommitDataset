[+++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +		endpoint.setDestination(resolve(jmsListener.destination()));, +			endpoint.setSelector(resolve(jmsListener.selector()));, +			endpoint.setSubscription(resolve(jmsListener.subscription()));, +			endpoint.setConcurrency(resolve(jmsListener.concurrency()));, +		String containerFactoryBeanName = resolve(jmsListener.containerFactory());, +			return resolve(jmsListener.id());, +	/**, +	 * Resolve the specified value if possible., +	 *, +	 * @see ConfigurableBeanFactory#resolveEmbeddedValue, +	 */, +	private String resolve(String value) {, +		if (this.beanFactory != null && this.beanFactory instanceof ConfigurableBeanFactory) {, +			return ((ConfigurableBeanFactory) this.beanFactory).resolveEmbeddedValue(value);, +		}, +		return value;, +	}, +, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +		endpoint.setDestination(resolve(jmsListener.destination()));, +			endpoint.setSelector(resolve(jmsListener.selector()));, +			endpoint.setSubscription(resolve(jmsListener.subscription()));, +			endpoint.setConcurrency(resolve(jmsListener.concurrency()));, +		String containerFactoryBeanName = resolve(jmsListener.containerFactory());, +			return resolve(jmsListener.id());, +	/**, +	 * Resolve the specified value if possible., +	 *, +	 * @see ConfigurableBeanFactory#resolveEmbeddedValue, +	 */, +	private String resolve(String value) {, +		if (this.beanFactory != null && this.beanFactory instanceof ConfigurableBeanFactory) {, +			return ((ConfigurableBeanFactory) this.beanFactory).resolveEmbeddedValue(value);, +		}, +		return value;, +	}, +, +++ b/spring-jms/src/test/java/org/springframework/jms/annotation/AbstractJmsAnnotationDrivenTests.java, +	public abstract void fullConfigurableConfiguration();, +, +	@Test, +		assertEquals("1-10", endpoint.getConcurrency());, +				selector = "mySelector", subscription = "mySubscription", concurrency = "1-10"), +		public String fullHandle(String msg) {, +			return "reply";, +		}, +	}, +, +	@Component, +	static class FullConfigurableBean {, +, +		@JmsListener(id = "${jms.listener.id}", containerFactory = "${jms.listener.containerFactory}",, +				destination = "${jms.listener.destination}", selector = "${jms.listener.selector}",, +				subscription = "${jms.listener.subscription}", concurrency = "${jms.listener.concurrency}"), +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +		endpoint.setDestination(resolve(jmsListener.destination()));, +			endpoint.setSelector(resolve(jmsListener.selector()));, +			endpoint.setSubscription(resolve(jmsListener.subscription()));, +			endpoint.setConcurrency(resolve(jmsListener.concurrency()));, +		String containerFactoryBeanName = resolve(jmsListener.containerFactory());, +			return resolve(jmsListener.id());, +	/**, +	 * Resolve the specified value if possible., +	 *, +	 * @see ConfigurableBeanFactory#resolveEmbeddedValue, +	 */, +	private String resolve(String value) {, +		if (this.beanFactory != null && this.beanFactory instanceof ConfigurableBeanFactory) {, +			return ((ConfigurableBeanFactory) this.beanFactory).resolveEmbeddedValue(value);, +		}, +		return value;, +	}, +, +++ b/spring-jms/src/test/java/org/springframework/jms/annotation/AbstractJmsAnnotationDrivenTests.java, +	public abstract void fullConfigurableConfiguration();, +, +	@Test, +		assertEquals("1-10", endpoint.getConcurrency());, +				selector = "mySelector", subscription = "mySubscription", concurrency = "1-10"), +		public String fullHandle(String msg) {, +			return "reply";, +		}, +	}, +, +	@Component, +	static class FullConfigurableBean {, +, +		@JmsListener(id = "${jms.listener.id}", containerFactory = "${jms.listener.containerFactory}",, +				destination = "${jms.listener.destination}", selector = "${jms.listener.selector}",, +				subscription = "${jms.listener.subscription}", concurrency = "${jms.listener.concurrency}"), +++ b/spring-jms/src/test/java/org/springframework/jms/annotation/AnnotationDrivenNamespaceTests.java, +	public void fullConfigurableConfiguration() {, +		ApplicationContext context = new ClassPathXmlApplicationContext(, +				"annotation-driven-full-configurable-config.xml", getClass());, +		testFullConfiguration(context);, +	}]