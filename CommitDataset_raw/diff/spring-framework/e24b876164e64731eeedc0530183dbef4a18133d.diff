[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +import org.springframework.web.servlet.resource.ResourceUrlProvider;, +import org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor;, +			registry.addInterceptor(new ResourceUrlProviderExposingInterceptor(resourceUrlPathTranslator()));, +	public ResourceUrlProvider resourceUrlPathTranslator() {, +		ResourceUrlProvider translator = new ResourceUrlProvider();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +import org.springframework.web.servlet.resource.ResourceUrlProvider;, +import org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor;, +			registry.addInterceptor(new ResourceUrlProviderExposingInterceptor(resourceUrlPathTranslator()));, +	public ResourceUrlProvider resourceUrlPathTranslator() {, +		ResourceUrlProvider translator = new ResourceUrlProvider();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AbstractResourceResolver.java, +	public String resolveUrlPath(String resourceUrlPath, List<? extends Resource> locations,, +		return resolveUrlPathInternal(resourceUrlPath, locations, chain);, +	protected abstract String resolveUrlPathInternal(String resourceUrlPath,, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +import org.springframework.web.servlet.resource.ResourceUrlProvider;, +import org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor;, +			registry.addInterceptor(new ResourceUrlProviderExposingInterceptor(resourceUrlPathTranslator()));, +	public ResourceUrlProvider resourceUrlPathTranslator() {, +		ResourceUrlProvider translator = new ResourceUrlProvider();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AbstractResourceResolver.java, +	public String resolveUrlPath(String resourceUrlPath, List<? extends Resource> locations,, +		return resolveUrlPathInternal(resourceUrlPath, locations, chain);, +	protected abstract String resolveUrlPathInternal(String resourceUrlPath,, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/DefaultResourceResolverChain.java, +	public String resolveUrlPath(String resourcePath, List<? extends Resource> locations) {, +			return resolver.resolveUrlPath(resourcePath, locations, this);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +import org.springframework.web.servlet.resource.ResourceUrlProvider;, +import org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor;, +			registry.addInterceptor(new ResourceUrlProviderExposingInterceptor(resourceUrlPathTranslator()));, +	public ResourceUrlProvider resourceUrlPathTranslator() {, +		ResourceUrlProvider translator = new ResourceUrlProvider();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AbstractResourceResolver.java, +	public String resolveUrlPath(String resourceUrlPath, List<? extends Resource> locations,, +		return resolveUrlPathInternal(resourceUrlPath, locations, chain);, +	protected abstract String resolveUrlPathInternal(String resourceUrlPath,, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/DefaultResourceResolverChain.java, +	public String resolveUrlPath(String resourcePath, List<? extends Resource> locations) {, +			return resolver.resolveUrlPath(resourcePath, locations, this);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/FingerprintResourceResolver.java, +	protected String resolveUrlPathInternal(String resourceUrlPath, List<? extends Resource> locations,, +		String baseUrl = chain.resolveUrlPath(resourceUrlPath, locations);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +import org.springframework.web.servlet.resource.ResourceUrlProvider;, +import org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor;, +			registry.addInterceptor(new ResourceUrlProviderExposingInterceptor(resourceUrlPathTranslator()));, +	public ResourceUrlProvider resourceUrlPathTranslator() {, +		ResourceUrlProvider translator = new ResourceUrlProvider();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AbstractResourceResolver.java, +	public String resolveUrlPath(String resourceUrlPath, List<? extends Resource> locations,, +		return resolveUrlPathInternal(resourceUrlPath, locations, chain);, +	protected abstract String resolveUrlPathInternal(String resourceUrlPath,, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/DefaultResourceResolverChain.java, +	public String resolveUrlPath(String resourcePath, List<? extends Resource> locations) {, +			return resolver.resolveUrlPath(resourcePath, locations, this);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/FingerprintResourceResolver.java, +	protected String resolveUrlPathInternal(String resourceUrlPath, List<? extends Resource> locations,, +		String baseUrl = chain.resolveUrlPath(resourceUrlPath, locations);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/GzipResourceResolver.java, +	protected String resolveUrlPathInternal(String resourceUrlPath, List<? extends Resource> locations,, +		return chain.resolveUrlPath(resourceUrlPath, locations);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +import org.springframework.web.servlet.resource.ResourceUrlProvider;, +import org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor;, +			registry.addInterceptor(new ResourceUrlProviderExposingInterceptor(resourceUrlPathTranslator()));, +	public ResourceUrlProvider resourceUrlPathTranslator() {, +		ResourceUrlProvider translator = new ResourceUrlProvider();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AbstractResourceResolver.java, +	public String resolveUrlPath(String resourceUrlPath, List<? extends Resource> locations,, +		return resolveUrlPathInternal(resourceUrlPath, locations, chain);, +	protected abstract String resolveUrlPathInternal(String resourceUrlPath,, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/DefaultResourceResolverChain.java, +	public String resolveUrlPath(String resourcePath, List<? extends Resource> locations) {, +			return resolver.resolveUrlPath(resourcePath, locations, this);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/FingerprintResourceResolver.java, +	protected String resolveUrlPathInternal(String resourceUrlPath, List<? extends Resource> locations,, +		String baseUrl = chain.resolveUrlPath(resourceUrlPath, locations);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/GzipResourceResolver.java, +	protected String resolveUrlPathInternal(String resourceUrlPath, List<? extends Resource> locations,, +		return chain.resolveUrlPath(resourceUrlPath, locations);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/PathResourceResolver.java, +	protected String resolveUrlPathInternal(String resourceUrlPath, List<? extends Resource> locations,, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +import org.springframework.web.servlet.resource.ResourceUrlProvider;, +import org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor;, +			registry.addInterceptor(new ResourceUrlProviderExposingInterceptor(resourceUrlPathTranslator()));, +	public ResourceUrlProvider resourceUrlPathTranslator() {, +		ResourceUrlProvider translator = new ResourceUrlProvider();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AbstractResourceResolver.java, +	public String resolveUrlPath(String resourceUrlPath, List<? extends Resource> locations,, +		return resolveUrlPathInternal(resourceUrlPath, locations, chain);, +	protected abstract String resolveUrlPathInternal(String resourceUrlPath,, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/DefaultResourceResolverChain.java, +	public String resolveUrlPath(String resourcePath, List<? extends Resource> locations) {, +			return resolver.resolveUrlPath(resourcePath, locations, this);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/FingerprintResourceResolver.java, +	protected String resolveUrlPathInternal(String resourceUrlPath, List<? extends Resource> locations,]