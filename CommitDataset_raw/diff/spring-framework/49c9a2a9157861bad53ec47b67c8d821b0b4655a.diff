[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/DatabasePopulatorUtils.java, + * Copyright 2002-2012 the original author or authors., +, +import org.springframework.jdbc.datasource.DataSourceUtils;, + * @author Oliver Gierke, +			Connection connection = DataSourceUtils.getConnection(dataSource);, +				if (connection != null) {, +					DataSourceUtils.releaseConnection(connection, dataSource);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/DatabasePopulatorUtils.java, + * Copyright 2002-2012 the original author or authors., +, +import org.springframework.jdbc.datasource.DataSourceUtils;, + * @author Oliver Gierke, +			Connection connection = DataSourceUtils.getConnection(dataSource);, +				if (connection != null) {, +					DataSourceUtils.releaseConnection(connection, dataSource);, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/init/DatabasePopulatorTests.java, + * Copyright 2002-2012 the original author or authors., +import java.sql.SQLException;, +, +import org.easymock.EasyMock;, +, +import org.springframework.jdbc.datasource.DataSourceUtils;, +import org.springframework.transaction.support.TransactionSynchronizationManager;, + * @author Oliver Gierke, +, +		if (TransactionSynchronizationManager.isSynchronizationActive()) {, +			TransactionSynchronizationManager.clear();, +			TransactionSynchronizationManager.unbindResource(db);, +		}, +, +	/**, +	 * @see SPR-9457, +	 */, +	@Test, +	public void usesBoundConnectionIfAvailable() throws SQLException {, +, +		TransactionSynchronizationManager.initSynchronization();, +		Connection connection = DataSourceUtils.getConnection(db);, +, +		DatabasePopulator populator = EasyMock.createMock(DatabasePopulator.class);, +		populator.populate(connection);, +		EasyMock.expectLastCall();, +		EasyMock.replay(populator);, +, +		DatabasePopulatorUtils.execute(populator, db);, +, +		EasyMock.verify(populator);, +	}]