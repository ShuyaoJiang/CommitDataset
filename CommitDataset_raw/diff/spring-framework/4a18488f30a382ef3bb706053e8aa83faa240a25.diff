[+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * <p>Note that Basic Authentication only supports characters in the, +	 * {@link StandardCharsets#ISO_8859_1 ISO-8859-1} character set., +	 * @throws IllegalArgumentException if either {@code user} or, +	 * {@code password} contain characters that cannot be encoded to ISO-8859-1., +	 * @param charset the charset to use to convert the credentials into an octet, +	 * sequence. Defaults to {@linkplain StandardCharsets#ISO_8859_1 ISO-8859-1}, +	 * @throws IllegalArgumentException if either {@code user} or, +	 * {@code password} contain characters that cannot be encoded to ISO-8859-1., +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * <p>Note that Basic Authentication only supports characters in the, +	 * {@link StandardCharsets#ISO_8859_1 ISO-8859-1} character set., +	 * @throws IllegalArgumentException if either {@code user} or, +	 * {@code password} contain characters that cannot be encoded to ISO-8859-1., +	 * @param charset the charset to use to convert the credentials into an octet, +	 * sequence. Defaults to {@linkplain StandardCharsets#ISO_8859_1 ISO-8859-1}, +	 * @throws IllegalArgumentException if either {@code user} or, +	 * {@code password} contain characters that cannot be encoded to ISO-8859-1., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeFilterFunctions.java, +import java.nio.charset.Charset;, +	 * Name of the request attribute with {@link Credentials} for {@link #basicAuthentication()}., +	 * @deprecated as of Spring 5.1 in favor of using, +	 * {@link HttpHeaders#setBasicAuth(String, String)} while building the request., +	/**, +	 * Return a filter that applies HTTP Basic Authentication to the request, +	 * headers via {@link HttpHeaders#setBasicAuth(String, String)}., +	 * @param user the user, +	 * @param password the password, +	 * @return the filter to add authentication headers with, +	 * @see HttpHeaders#setBasicAuth(String, String), +	 * @see HttpHeaders#setBasicAuth(String, String, Charset), +	 */, +	public static ExchangeFilterFunction basicAuthentication(String user, String password) {, +		return (request, next) ->, +				next.exchange(ClientRequest.from(request), +						.headers(headers -> headers.setBasicAuth(user, password)), +						.build());, +	}, +, +, +	/**, +	 * Variant of {@link #basicAuthentication(String, String)} that looks up, +	 * the {@link Credentials Credentials} in a, +	 * {@link #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE request attribute}., +	 * @return the filter to use, +	 * @see Credentials, +	 * @deprecated as of Spring 5.1 in favor of using, +	 * {@link HttpHeaders#setBasicAuth(String, String)} while building the request., +	 */, +	@Deprecated, +	public static ExchangeFilterFunction basicAuthentication() {, +, +		return (request, next) -> {, +			Credentials cred = (Credentials) request, +					.attribute(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE).orElse(null);, +, +			if (cred != null) {, +				return next.exchange(ClientRequest.from(request), +						.headers(headers -> headers.setBasicAuth(cred.username, cred.password)), +						.build());, +			}, +			else {, +				return next.exchange(request);, +			}, +		};, +	}, +, +	 * @deprecated as of Spring 5.1 in favor of using, +	 * {@link HttpHeaders#setBasicAuth(String, String)} while building the request., +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * <p>Note that Basic Authentication only supports characters in the, +	 * {@link StandardCharsets#ISO_8859_1 ISO-8859-1} character set., +	 * @throws IllegalArgumentException if either {@code user} or, +	 * {@code password} contain characters that cannot be encoded to ISO-8859-1., +	 * @param charset the charset to use to convert the credentials into an octet, +	 * sequence. Defaults to {@linkplain StandardCharsets#ISO_8859_1 ISO-8859-1}, +	 * @throws IllegalArgumentException if either {@code user} or, +	 * {@code password} contain characters that cannot be encoded to ISO-8859-1., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeFilterFunctions.java, +import java.nio.charset.Charset;, +	 * Name of the request attribute with {@link Credentials} for {@link #basicAuthentication()}., +	 * @deprecated as of Spring 5.1 in favor of using, +	 * {@link HttpHeaders#setBasicAuth(String, String)} while building the request., +	/**, +	 * Return a filter that applies HTTP Basic Authentication to the request, +	 * headers via {@link HttpHeaders#setBasicAuth(String, String)}., +	 * @param user the user, +	 * @param password the password, +	 * @return the filter to add authentication headers with, +	 * @see HttpHeaders#setBasicAuth(String, String), +	 * @see HttpHeaders#setBasicAuth(String, String, Charset), +	 */, +	public static ExchangeFilterFunction basicAuthentication(String user, String password) {, +		return (request, next) ->, +				next.exchange(ClientRequest.from(request), +						.headers(headers -> headers.setBasicAuth(user, password)), +						.build());, +	}, +, +]