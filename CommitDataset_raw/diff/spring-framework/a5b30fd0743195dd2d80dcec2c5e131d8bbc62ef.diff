[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/SelectedValueComparator.java, + * Copyright 2002-2010 the original author or authors., +			// Probably from a TreeSet - ignore., +			Object candidateAsValue;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/SelectedValueComparator.java, + * Copyright 2002-2010 the original author or authors., +			// Probably from a TreeSet - ignore., +			Object candidateAsValue;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, +, +				logger.debug("Requested media types is " + this.defaultContentType +, +						" (based on defaultContentType property)");, +	 * <p>The default implementation will check the {@linkplain #setMediaTypes(Map) media types}, +	 * property first for a defined mapping. If not present, and if the Java Activation Framework, +	 * can be found on the classpath, it will call {@link FileTypeMap#getContentType(String)}, +		if (mediaType == null && this.useJaf && jafPresent) {, +			if (this.useNotAcceptableStatusCode) {, +		List<View> candidateViews = new ArrayList<View>();, +, +, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/SelectedValueComparator.java, + * Copyright 2002-2010 the original author or authors., +			// Probably from a TreeSet - ignore., +			Object candidateAsValue;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, +, +				logger.debug("Requested media types is " + this.defaultContentType +, +						" (based on defaultContentType property)");, +	 * <p>The default implementation will check the {@linkplain #setMediaTypes(Map) media types}, +	 * property first for a defined mapping. If not present, and if the Java Activation Framework, +	 * can be found on the classpath, it will call {@link FileTypeMap#getContentType(String)}, +		if (mediaType == null && this.useJaf && jafPresent) {, +			if (this.useNotAcceptableStatusCode) {, +		List<View> candidateViews = new ArrayList<View>();, +, +, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/RedirectView.java, +			Iterator valueIter;, +	 * property if set, or the value of the {@link #RESPONSE_STATUS_ATTRIBUTE} attribute., +	 * If neither are set, it defaults to {@link HttpStatus#SEE_OTHER} (303)., +	 * @param response the servlet response, +	 * @param targetUrl the target URL, +	 * @return the response status, +	protected HttpStatus getHttp11StatusCode(, +			HttpServletRequest request, HttpServletResponse response, String targetUrl) {, +, +		if (this.statusCode != null) {, +			return this.statusCode;]