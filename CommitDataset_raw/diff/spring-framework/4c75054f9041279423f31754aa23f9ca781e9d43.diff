[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapper.java, + * Copyright 2002-2011 the original author or authors., +	/**, +	 * Specify a limit for array and collection auto-growing., +	 * <p>Default is unlimited on a plain BeanWrapper., +	 */, +	void setAutoGrowCollectionLimit(int autoGrowCollectionLimit);, +, +	/**, +	 * Return the limit for array and collection auto-growing., +	 */, +	int getAutoGrowCollectionLimit();, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapper.java, + * Copyright 2002-2011 the original author or authors., +	/**, +	 * Specify a limit for array and collection auto-growing., +	 * <p>Default is unlimited on a plain BeanWrapper., +	 */, +	void setAutoGrowCollectionLimit(int autoGrowCollectionLimit);, +, +	/**, +	 * Return the limit for array and collection auto-growing., +	 */, +	int getAutoGrowCollectionLimit();, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, + * Copyright 2002-2011 the original author or authors., +, +	private int autoGrowCollectionLimit = Integer.MAX_VALUE;, +, +		setAutoGrowCollectionLimit(superBw.getAutoGrowCollectionLimit());, +	 * Set whether this BeanWrapper should attempt to "auto-grow" a nested path that contains a null value., +	 * <p>If "true", a null path location will be populated with a default object value and traversed, +	 * instead of resulting in a {@link NullValueInNestedPathException}. Turning this flag on also, +	 * enables auto-growth of collection elements when accessing an out-of-bounds index., +	 * <p>Default is "false" on a plain BeanWrapper., +	 * Return whether "auto-growing" of nested paths has been activated., +	 * Specify a limit for array and collection auto-growing., +	 * <p>Default is unlimited on a plain BeanWrapper., +	 */, +	public void setAutoGrowCollectionLimit(int autoGrowCollectionLimit) {, +		this.autoGrowCollectionLimit = autoGrowCollectionLimit;, +	}, +, +	/**, +	 * Return the limit for array and collection auto-growing., +	 */, +	public int getAutoGrowCollectionLimit() {, +		return this.autoGrowCollectionLimit;, +	}, +, +	/**, +		if (index >= length && index < this.autoGrowCollectionLimit) {, +		int size = collection.size();, +		if (index >= size && index < this.autoGrowCollectionLimit) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapper.java, + * Copyright 2002-2011 the original author or authors., +	/**, +	 * Specify a limit for array and collection auto-growing., +	 * <p>Default is unlimited on a plain BeanWrapper., +	 */, +	void setAutoGrowCollectionLimit(int autoGrowCollectionLimit);, +, +	/**, +	 * Return the limit for array and collection auto-growing., +	 */, +	int getAutoGrowCollectionLimit();, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, + * Copyright 2002-2011 the original author or authors., +, +	private int autoGrowCollectionLimit = Integer.MAX_VALUE;, +, +		setAutoGrowCollectionLimit(superBw.getAutoGrowCollectionLimit());, +	 * Set whether this BeanWrapper should attempt to "auto-grow" a nested path that contains a null value., +	 * <p>If "true", a null path location will be populated with a default object value and traversed, +	 * instead of resulting in a {@link NullValueInNestedPathException}. Turning this flag on also, +	 * enables auto-growth of collection elements when accessing an out-of-bounds index., +	 * <p>Default is "false" on a plain BeanWrapper., +	 * Return whether "auto-growing" of nested paths has been activated., +	 * Specify a limit for array and collection auto-growing., +	 * <p>Default is unlimited on a plain BeanWrapper., +	 */, +	public void setAutoGrowCollectionLimit(int autoGrowCollectionLimit) {, +		this.autoGrowCollectionLimit = autoGrowCollectionLimit;, +	}, +, +	/**, +	 * Return the limit for array and collection auto-growing., +	 */, +	public int getAutoGrowCollectionLimit() {, +		return this.autoGrowCollectionLimit;, +	}, +, +	/**, +		if (index >= length && index < this.autoGrowCollectionLimit) {, +		int size = collection.size();, +		if (index >= size && index < this.autoGrowCollectionLimit) {, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/BeanWrapperAutoGrowingTests.java]