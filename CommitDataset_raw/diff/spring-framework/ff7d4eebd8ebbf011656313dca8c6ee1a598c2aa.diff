[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java, +	 * @param handler the handler to check (never {@code null})., +	 * @param request the current request., +	 * @return the CORS configuration for the handler or {@code null}., +		if (handler instanceof HandlerExecutionChain) {, +			handler = ((HandlerExecutionChain) handler).getHandler();, +		}, +		if (handler instanceof CorsConfigurationSource) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java, +	 * @param handler the handler to check (never {@code null})., +	 * @param request the current request., +	 * @return the CORS configuration for the handler or {@code null}., +		if (handler instanceof HandlerExecutionChain) {, +			handler = ((HandlerExecutionChain) handler).getHandler();, +		}, +		if (handler instanceof CorsConfigurationSource) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +	private final Map<Method, CorsConfiguration> corsMap = new LinkedHashMap<Method, CorsConfiguration>();, +		for (String name : beanNames) {, +			if (!name.startsWith(SCOPED_TARGET_NAME_PREFIX) && isHandler(getApplicationContext().getType(name))) {, +				detectHandlerMethods(name);, +		this.corsMap.put(PREFLIGHT_MULTI_MATCH_HANDLER_METHOD.getMethod(), config);, +			this.corsMap.put(method, config);, +	@Override, +	protected CorsConfiguration getCorsConfiguration(Object handler, HttpServletRequest request) {, +		if (handler instanceof HandlerMethod) {, +			this.corsMap.get(((HandlerMethod) handler).getMethod());, +		}, +		return null;, +	}, +]