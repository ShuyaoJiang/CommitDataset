[+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferFactory.java, + * Copyright 2002-2018 the original author or authors., +import java.util.List;, +	/**, +	 * Create a composite data buffer from the list of provided data buffers. Depending on the, +	 * implementation, the returned buffer may be a single buffer containing all data of the, +	 * provided buffers, or it may be a true composite that contains references to the buffers., +	 * <p>Note that the given data buffers do <strong>not</strong> have to be released, as they are, +	 * released as part of the returned composite., +	 * @param dataBuffers the data buffers to be composed, +	 * @return a buffer that composes {@code dataBuffers} into one, +	 */, +	DataBuffer compose(List<DataBuffer> dataBuffers);, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferFactory.java, + * Copyright 2002-2018 the original author or authors., +import java.util.List;, +	/**, +	 * Create a composite data buffer from the list of provided data buffers. Depending on the, +	 * implementation, the returned buffer may be a single buffer containing all data of the, +	 * provided buffers, or it may be a true composite that contains references to the buffers., +	 * <p>Note that the given data buffers do <strong>not</strong> have to be released, as they are, +	 * released as part of the returned composite., +	 * @param dataBuffers the data buffers to be composed, +	 * @return a buffer that composes {@code dataBuffers} into one, +	 */, +	DataBuffer compose(List<DataBuffer> dataBuffers);, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +import reactor.core.publisher.Mono;, +	/**, +	 * Composes the buffers in the given {@link Publisher} into a single data buffer. Depending on, +	 * the {@code DataBuffer} implementation, the returned buffer may be a single buffer containing, +	 * all data of the provided buffers, or it may be a true composite that contains references to, +	 * the buffers., +	 * @param publisher the data buffers that are to be composed, +	 * @return the composed data buffer, +	 */, +	public static Mono<DataBuffer> compose(Publisher<DataBuffer> publisher) {, +		Assert.notNull(publisher, "'publisher' must not be null");, +, +		Flux<DataBuffer> source = Flux.from(publisher);, +, +		return source.collectList(), +				.filter(dataBuffers -> !dataBuffers.isEmpty()), +				.map(dataBuffers -> {, +					DataBufferFactory bufferFactory = dataBuffers.get(0).factory();, +					return bufferFactory.compose(dataBuffers);, +				});, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferFactory.java, + * Copyright 2002-2018 the original author or authors., +import java.util.List;, +	/**, +	 * Create a composite data buffer from the list of provided data buffers. Depending on the, +	 * implementation, the returned buffer may be a single buffer containing all data of the, +	 * provided buffers, or it may be a true composite that contains references to the buffers., +	 * <p>Note that the given data buffers do <strong>not</strong> have to be released, as they are, +	 * released as part of the returned composite., +	 * @param dataBuffers the data buffers to be composed, +	 * @return a buffer that composes {@code dataBuffers} into one, +	 */, +	DataBuffer compose(List<DataBuffer> dataBuffers);, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +import reactor.core.publisher.Mono;, +	/**, +	 * Composes the buffers in the given {@link Publisher} into a single data buffer. Depending on, +	 * the {@code DataBuffer} implementation, the returned buffer may be a single buffer containing, +	 * all data of the provided buffers, or it may be a true composite that contains references to, +	 * the buffers., +	 * @param publisher the data buffers that are to be composed, +	 * @return the composed data buffer, +	 */, +	public static Mono<DataBuffer> compose(Publisher<DataBuffer> publisher) {, +		Assert.notNull(publisher, "'publisher' must not be null");, +, +		Flux<DataBuffer> source = Flux.from(publisher);, +, +		return source.collectList(), +				.filter(dataBuffers -> !dataBuffers.isEmpty()), +				.map(dataBuffers -> {, +					DataBufferFactory bufferFactory = dataBuffers.get(0).factory();, +					return bufferFactory.compose(dataBuffers);, +				});, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBufferFactory.java, + * Copyright 2002-2018 the original author or authors., +import java.util.List;, +	/**, +	 * {@inheritDoc}, +	 * <p>This implementation creates a single {@link DefaultDataBuffer} to contain the data, +	 * in {@code dataBuffers}., +	 */, +	@Override, +	public DataBuffer compose(List<DataBuffer> dataBuffers) {, +		Assert.notEmpty(dataBuffers, "'dataBuffers' must not be empty");, +, +		int capacity = dataBuffers.stream(), +				.mapToInt(DataBuffer::readableByteCount), +				.sum();]