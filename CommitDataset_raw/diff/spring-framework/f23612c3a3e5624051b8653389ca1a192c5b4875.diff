[+++ b/spring-web/src/main/java/org/springframework/http/HttpEntity.java, +import org.reactivestreams.Publisher;, +, +import org.springframework.core.ParameterizedTypeReference;, +import org.springframework.core.ResolvableType;, +import org.springframework.util.Assert;, +	@Nullable, +	private final ResolvableType bodyType;, +, +		this(body, null, headers);, +	}, +, +	private HttpEntity(@Nullable T body, @Nullable ResolvableType bodyType,, +			@Nullable MultiValueMap<String, String> headers) {, +, +		if (bodyType == null && body != null) {, +			bodyType = ResolvableType.forClass(body.getClass());, +		}, +		this.bodyType = bodyType ;, +, +	/**, +	 * Returns the type of the body., +	 */, +	@Nullable, +	public ResolvableType getBodyType() {, +		return this.bodyType;, +	}, +, +	// Static builder methods, +, +	/**, +	 * Create a new {@code HttpEntity} with the given {@link Publisher} as body, class contained in, +	 * {@code publisher}, and headers., +	 * @param publisher the publisher to use as body, +	 * @param elementClass the class of elements contained in the publisher, +	 * @param headers the entity headers, +	 * @param <S> the type of the elements contained in the publisher, +	 * @param <P> the type of the {@code Publisher}, +	 * @return the created entity, +	 */, +	public static <S, P extends Publisher<S>> HttpEntity<P> fromPublisher(P publisher,, +			Class<S> elementClass, @Nullable MultiValueMap<String, String> headers) {, +, +		Assert.notNull(publisher, "'publisher' must not be null");, +		Assert.notNull(elementClass, "'elementClass' must not be null");, +		return new HttpEntity<>(publisher, ResolvableType.forClass(elementClass), headers);, +	}, +, +	/**, +	 * Create a new {@code HttpEntity} with the given {@link Publisher} as body, type contained in, +	 * {@code publisher}, and headers., +	 * @param publisher the publisher to use as body, +	 * @param typeReference the type of elements contained in the publisher, +	 * @param headers the entity headers, +	 * @param <S> the type of the elements contained in the publisher, +	 * @param <P> the type of the {@code Publisher}, +	 * @return the created entity, +	 */, +	public static <S, P extends Publisher<S>> HttpEntity<P> fromPublisher(P publisher,, +			ParameterizedTypeReference<S> typeReference,, +			@Nullable MultiValueMap<String, String> headers) {, +, +		Assert.notNull(publisher, "'publisher' must not be null");, +		Assert.notNull(typeReference, "'typeReference' must not be null");, +		return new HttpEntity<>(publisher, ResolvableType.forType(typeReference), headers);, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/HttpEntity.java, +import org.reactivestreams.Publisher;, +, +import org.springframework.core.ParameterizedTypeReference;, +import org.springframework.core.ResolvableType;, +import org.springframework.util.Assert;, +	@Nullable, +	private final ResolvableType bodyType;, +, +		this(body, null, headers);, +	}, +, +	private HttpEntity(@Nullable T body, @Nullable ResolvableType bodyType,, +			@Nullable MultiValueMap<String, String> headers) {, +, +		if (bodyType == null && body != null) {, +			bodyType = ResolvableType.forClass(body.getClass());, +		}, +		this.bodyType = bodyType ;, +, +	/**, +	 * Returns the type of the body., +	 */, +	@Nullable, +	public ResolvableType getBodyType() {, +		return this.bodyType;, +	}, +, +	// Static builder methods, +, +	/**, +	 * Create a new {@code HttpEntity} with the given {@link Publisher} as body, class contained in, +	 * {@code publisher}, and headers.]