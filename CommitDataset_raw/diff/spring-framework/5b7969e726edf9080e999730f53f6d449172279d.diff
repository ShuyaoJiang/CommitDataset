[+++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, + * @author Phillip Webb, +		boolean rtn = true;, +		rtn &= ObjectUtils.nullSafeEquals(getScheme(), other.getScheme());, +		rtn &= ObjectUtils.nullSafeEquals(getUserInfo(), other.getUserInfo());, +		rtn &= ObjectUtils.nullSafeEquals(getHost(), other.getHost());, +		rtn &= getPort() == other.getPort();, +		rtn &= this.path.equals(other.path);, +		rtn &= this.queryParams.equals(other.queryParams);, +		rtn &= ObjectUtils.nullSafeEquals(getFragment(), other.getFragment());, +		return rtn;, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, + * @author Phillip Webb, +		boolean rtn = true;, +		rtn &= ObjectUtils.nullSafeEquals(getScheme(), other.getScheme());, +		rtn &= ObjectUtils.nullSafeEquals(getUserInfo(), other.getUserInfo());, +		rtn &= ObjectUtils.nullSafeEquals(getHost(), other.getHost());, +		rtn &= getPort() == other.getPort();, +		rtn &= this.path.equals(other.path);, +		rtn &= this.queryParams.equals(other.queryParams);, +		rtn &= ObjectUtils.nullSafeEquals(getFragment(), other.getFragment());, +		return rtn;, +++ b/spring-web/src/main/java/org/springframework/web/util/OpaqueUriComponents.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +		boolean rtn = true;, +		rtn &= ObjectUtils.nullSafeEquals(getScheme(), other.getScheme());, +		rtn &= ObjectUtils.nullSafeEquals(this.ssp, other.ssp);, +		rtn &= ObjectUtils.nullSafeEquals(getFragment(), other.getFragment());, +		return rtn;, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, + * @author Phillip Webb, +		boolean rtn = true;, +		rtn &= ObjectUtils.nullSafeEquals(getScheme(), other.getScheme());, +		rtn &= ObjectUtils.nullSafeEquals(getUserInfo(), other.getUserInfo());, +		rtn &= ObjectUtils.nullSafeEquals(getHost(), other.getHost());, +		rtn &= getPort() == other.getPort();, +		rtn &= this.path.equals(other.path);, +		rtn &= this.queryParams.equals(other.queryParams);, +		rtn &= ObjectUtils.nullSafeEquals(getFragment(), other.getFragment());, +		return rtn;, +++ b/spring-web/src/main/java/org/springframework/web/util/OpaqueUriComponents.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +		boolean rtn = true;, +		rtn &= ObjectUtils.nullSafeEquals(getScheme(), other.getScheme());, +		rtn &= ObjectUtils.nullSafeEquals(this.ssp, other.ssp);, +		rtn &= ObjectUtils.nullSafeEquals(getFragment(), other.getFragment());, +		return rtn;, +++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsTests.java, +import static org.hamcrest.Matchers.instanceOf;, +import static org.hamcrest.Matchers.not;, +/**, + * @author Arjen Poutsma, + * @author Phillip Webb, + */, +	@Test, +	public void equalsHierarchicalUriComponents() throws Exception {, +		UriComponents uriComponents1 = UriComponentsBuilder.fromUriString("http://example.com").path("/{foo}").query("bar={baz}").build();, +		UriComponents uriComponents2 = UriComponentsBuilder.fromUriString("http://example.com").path("/{foo}").query("bar={baz}").build();, +		UriComponents uriComponents3 = UriComponentsBuilder.fromUriString("http://example.com").path("/{foo}").query("bin={baz}").build();, +		assertThat(uriComponents1, instanceOf(HierarchicalUriComponents.class));, +		assertThat(uriComponents1, equalTo(uriComponents1));, +		assertThat(uriComponents1, equalTo(uriComponents2));, +		assertThat(uriComponents1, not(equalTo(uriComponents3)));, +	}, +, +	@Test, +	public void equalsOpaqueUriComponents() throws Exception {, +		UriComponents uriComponents1 = UriComponentsBuilder.fromUriString("http:example.com/foo/bar").build();, +		UriComponents uriComponents2 = UriComponentsBuilder.fromUriString("http:example.com/foo/bar").build();, +		UriComponents uriComponents3 = UriComponentsBuilder.fromUriString("http:example.com/foo/bin").build();, +		assertThat(uriComponents1, instanceOf(OpaqueUriComponents.class));, +		assertThat(uriComponents1, equalTo(uriComponents1));, +		assertThat(uriComponents1, equalTo(uriComponents2));, +		assertThat(uriComponents1, not(equalTo(uriComponents3)));, +	}, +]