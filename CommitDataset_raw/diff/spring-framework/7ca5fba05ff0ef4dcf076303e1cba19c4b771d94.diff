[+++ b/spring-core/src/main/java/org/springframework/core/io/AbstractResource.java, +import org.springframework.util.Assert;, +	 * @throws IllegalStateException if {@link #getInputStream()} returns null., +		InputStream is = this.getInputStream();, +		Assert.state(is != null, "resource input stream must not be null");, +			int read;, +			while((read = is.read(buf)) != -1) {, +++ b/spring-core/src/main/java/org/springframework/core/io/AbstractResource.java, +import org.springframework.util.Assert;, +	 * @throws IllegalStateException if {@link #getInputStream()} returns null., +		InputStream is = this.getInputStream();, +		Assert.state(is != null, "resource input stream must not be null");, +			int read;, +			while((read = is.read(buf)) != -1) {, +++ b/spring-core/src/main/java/org/springframework/core/io/Resource.java, +import java.io.InputStream;, +	/**, +	 * {@inheritDoc}, +	 * @return the input stream for the underlying resource (must not be {@code null})., +	 */, +	public InputStream getInputStream() throws IOException;, +++ b/spring-core/src/main/java/org/springframework/core/io/AbstractResource.java, +import org.springframework.util.Assert;, +	 * @throws IllegalStateException if {@link #getInputStream()} returns null., +		InputStream is = this.getInputStream();, +		Assert.state(is != null, "resource input stream must not be null");, +			int read;, +			while((read = is.read(buf)) != -1) {, +++ b/spring-core/src/main/java/org/springframework/core/io/Resource.java, +import java.io.InputStream;, +	/**, +	 * {@inheritDoc}, +	 * @return the input stream for the underlying resource (must not be {@code null})., +	 */, +	public InputStream getInputStream() throws IOException;, +++ b/spring-core/src/test/java/org/springframework/core/io/ResourceTests.java, + * Copyright 2002-2012 the original author or authors., +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +, + * @author Chris Beams, +	@Ignore @Test // this test is quite slow. TODO: re-enable with JUnit categories, +	@Test, +	public void testContentLength() throws IOException {, +		AbstractResource resource = new AbstractResource() {, +			public InputStream getInputStream() throws IOException {, +				return new ByteArrayInputStream(new byte[] { 'a', 'b', 'c' });, +			}, +			public String getDescription() {, +				return null;, +			}, +		};, +		assertThat(resource.contentLength(), is(3L));, +	}, +, +	@Test(expected=IllegalStateException.class), +	public void testContentLength_withNullInputStream() throws IOException {, +		AbstractResource resource = new AbstractResource() {, +			public InputStream getInputStream() throws IOException {, +				return null;, +			}, +			public String getDescription() {, +				return null;, +			}, +		};, +		resource.contentLength();, +	}, +]