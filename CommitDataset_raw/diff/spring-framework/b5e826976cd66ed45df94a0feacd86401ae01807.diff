[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/DefaultAnnotationHandlerMapping.java, + * Copyright 2002-2010 the original author or authors., + * Implementation of the {@link org.springframework.web.servlet.HandlerMapping}, + * interface that maps handlers based on HTTP paths expressed through the, + * {@link RequestMapping} annotation at the type or method level., + * <p>Registered by default in {@link org.springframework.web.servlet.DispatcherServlet}, + * on Java 5+. <b>NOTE:</b> If you define custom HandlerMapping beans in your, + * DispatcherServlet context, you need to add a DefaultAnnotationHandlerMapping bean, + * explicitly, since custom HandlerMapping beans replace the default mapping strategies., + * Defining a DefaultAnnotationHandlerMapping also allows for registering custom, + * interceptors:, + * <pre class="code">, + * &lt;bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"&gt;, + *   &lt;property name="interceptors"&gt;, + *     ..., + *   &lt;/property&gt;, + * &lt;/bean&gt;</pre>, + * Annotated controllers are usually marked with the {@link Controller} stereotype, + * at the type level. This is not strictly necessary when {@link RequestMapping} is, + * applied at the type level (since such a handler usually implements the, + * {@link org.springframework.web.servlet.mvc.Controller} interface). However,, + * {@link Controller} is required for detecting {@link RequestMapping} annotations, + * at the method level if {@link RequestMapping} is not present at the type level., + * <p><b>NOTE:</b> Method-level mappings are only allowed to narrow the mapping, + * expressed at the class level (if any). HTTP paths need to uniquely map onto, + * specific handler beans, with any given HTTP path only allowed to be mapped, + * onto one specific handler bean (not spread across multiple handler beans)., + * It is strongly recommended to co-locate related handler methods into the same bean., + * <p>The {@link AnnotationMethodHandlerAdapter} is responsible for processing, + * annotated handler methods, as mapped by this HandlerMapping. For, + * {@link RequestMapping} at the type level, specific HandlerAdapters such as, + * {@link org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter} apply., + * @since 2.5, +, +	 * Set whether to register paths using the default suffix pattern as well:, +	 * i.e. whether "/users" should be registered as "/users.*" and "/users/" too., +	 * <p>Default is "true". Turn this convention off if you intend to interpret, +	 * your <code>@RequestMapping</code> paths strictly., +	 * <p>Note that paths which include a ".xxx" suffix or end with "/" already will not be, +	 * transformed using the default suffix pattern in any case., +, +	 * Checks for presence of the {@link org.springframework.web.bind.annotation.RequestMapping}, +	 * annotation on the handler class and on any of its methods., +				String[] methodLevelPatterns = determineUrlsForHandlerMethods(handlerType, true);, +						}, +						else {, +				return determineUrlsForHandlerMethods(handlerType, false);, +			return determineUrlsForHandlerMethods(handlerType, false);, +	 * @param indicateEmpty whether the returned array should contain, +	 * <code>null</code> in case of an empty {@link RequestMapping} value., +	protected String[] determineUrlsForHandlerMethods(Class<?> handlerType, final boolean indicateEmpty) {, +		String[] subclassResult = determineUrlsForHandlerMethods(handlerType);, +		if (subclassResult != null) {, +			return subclassResult;, +		}, +, +						}, +						else if (indicateEmpty) {, +	 * Derive URL mappings from the handler's method-level mappings., +	 * @param handlerType the handler type to introspect, +	 * @return the array of mapped URLs, +	 */, +	protected String[] determineUrlsForHandlerMethods(Class<?> handlerType) {, +		return null;, +	}, +, +	/**, +, +	 * Validate the given type-level mapping metadata against the current request,, +	 * checking HTTP request method and parameter conditions., +			throw new ServletRequestBindingException("Header conditions \"" +, +					StringUtils.arrayToDelimitedString(mappedHeaders, ", ") +]