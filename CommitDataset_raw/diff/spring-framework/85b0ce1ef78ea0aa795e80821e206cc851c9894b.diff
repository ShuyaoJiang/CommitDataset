[+++ b/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java, +import java.time.ZoneId;, +		this.defaultEditors.put(ZoneId.class, new ZoneIdEditor());, +++ b/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java, +import java.time.ZoneId;, +		this.defaultEditors.put(ZoneId.class, new ZoneIdEditor());, +++ b/spring-context/src/main/java/org/springframework/format/support/DefaultFormattingConversionService.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.format.number.NumberFormatAnnotationFormatterFactory;, +, +, +++ b/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java, +import java.time.ZoneId;, +		this.defaultEditors.put(ZoneId.class, new ZoneIdEditor());, +++ b/spring-context/src/main/java/org/springframework/format/support/DefaultFormattingConversionService.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.format.number.NumberFormatAnnotationFormatterFactory;, +, +, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, +		converterRegistry.addConverter(new StringToTimeZoneConverter());, +		converterRegistry.addConverter(new ZoneIdToTimeZoneConverter());, +		converterRegistry.addConverter(new ZonedDateTimeToCalendarConverter());, +++ b/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java, +import java.time.ZoneId;, +		this.defaultEditors.put(ZoneId.class, new ZoneIdEditor());, +++ b/spring-context/src/main/java/org/springframework/format/support/DefaultFormattingConversionService.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.format.number.NumberFormatAnnotationFormatterFactory;, +, +, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, +		converterRegistry.addConverter(new StringToTimeZoneConverter());, +		converterRegistry.addConverter(new ZoneIdToTimeZoneConverter());, +		converterRegistry.addConverter(new ZonedDateTimeToCalendarConverter());, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, +++ b/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java, +import java.time.ZoneId;, +		this.defaultEditors.put(ZoneId.class, new ZoneIdEditor());, +++ b/spring-context/src/main/java/org/springframework/format/support/DefaultFormattingConversionService.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.format.number.NumberFormatAnnotationFormatterFactory;, +, +, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, +		converterRegistry.addConverter(new StringToTimeZoneConverter());, +		converterRegistry.addConverter(new ZoneIdToTimeZoneConverter());, +		converterRegistry.addConverter(new ZonedDateTimeToCalendarConverter());, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestMethodArgumentResolver.java, +				ZoneId.class == paramType ||, +		else if (ZoneId.class == paramType) {, +			TimeZone timeZone = RequestContextUtils.getTimeZone(request);, +			return (timeZone != null ? timeZone.toZoneId() : ZoneId.systemDefault());]