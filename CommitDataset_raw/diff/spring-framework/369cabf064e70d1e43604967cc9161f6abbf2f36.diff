[+++ b/spring-web/src/main/java/org/springframework/web/util/HtmlCharacterEntityReferences.java, + * Copyright 2002-2014 the original author or authors., +		return isMappedToReference(character, WebUtils.DEFAULT_CHARACTER_ENCODING);, +	}, +, +	/**, +	 * Return true if the given character is mapped to a supported entity reference., +	 */, +	public boolean isMappedToReference(char character, String encoding) {, +		return (convertToReference(character, encoding) != null);, +	   return convertToReference(character, WebUtils.DEFAULT_CHARACTER_ENCODING);, +	}, +, +	/**, +	 * Return the reference mapped to the given character or {@code null}., +	 */, +	public String convertToReference(char character, String encoding) {, +		if(encoding.startsWith("UTF-")){, +			switch(character){, +				case '<':, +					return "&lt;";, +				case '>':, +					return "&gt;";, +				case '"':, +					return "&quot;";, +				case '&':, +					return "&amp;";, +				case '\'':, +					return "&#39;";, +			}, +		}, +		else if (character < 1000 || (character >= 8000 && character < 10000)) {, +++ b/spring-web/src/main/java/org/springframework/web/util/HtmlCharacterEntityReferences.java, + * Copyright 2002-2014 the original author or authors., +		return isMappedToReference(character, WebUtils.DEFAULT_CHARACTER_ENCODING);, +	}, +, +	/**, +	 * Return true if the given character is mapped to a supported entity reference., +	 */, +	public boolean isMappedToReference(char character, String encoding) {, +		return (convertToReference(character, encoding) != null);, +	   return convertToReference(character, WebUtils.DEFAULT_CHARACTER_ENCODING);, +	}, +, +	/**, +	 * Return the reference mapped to the given character or {@code null}., +	 */, +	public String convertToReference(char character, String encoding) {, +		if(encoding.startsWith("UTF-")){, +			switch(character){, +				case '<':, +					return "&lt;";, +				case '>':, +					return "&gt;";, +				case '"':, +					return "&quot;";, +				case '&':, +					return "&amp;";, +				case '\'':, +					return "&#39;";, +			}, +		}, +		else if (character < 1000 || (character >= 8000 && character < 10000)) {, +++ b/spring-web/src/main/java/org/springframework/web/util/HtmlUtils.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.util.Assert;, +, +		return htmlEscape(input, WebUtils.DEFAULT_CHARACTER_ENCODING);, +	}, +, +	/**, +	 * Turn special characters into HTML character references., +	 * Handles complete character set defined in HTML 4.01 recommendation., +	 * <p>Escapes all special characters to their corresponding, +	 * entity reference (e.g. {@code &lt;}) at least as required by the, +	 * specified encoding. In other words, if a special character does, +	 * not have to be escaped for the given encoding, it may not be., +	 * <p>Reference:, +	 * <a href="http://www.w3.org/TR/html4/sgml/entities.html">, +	 * http://www.w3.org/TR/html4/sgml/entities.html, +	 * </a>, +	 * @param input the (unescaped) input string, +	 * @param encoding The name of a supported {@link java.nio.charset.Charset charset}, +	 * @return the escaped string, +	 */, +	public static String htmlEscape(String input, String encoding) {, +		Assert.notNull(encoding, "encoding is required");, +			String reference = characterEntityReferences.convertToReference(character, encoding);, +		return htmlEscapeDecimal(input, WebUtils.DEFAULT_CHARACTER_ENCODING);, +	}, +, +	/**, +	 * Turn special characters into HTML character references., +	 * Handles complete character set defined in HTML 4.01 recommendation., +	 * <p>Escapes all special characters to their corresponding numeric, +	 * reference in decimal format (&#<i>Decimal</i>;) at least as required by the, +	 * specified encoding. In other words, if a special character does, +	 * not have to be escaped for the given encoding, it may not be., +	 * <p>Reference:]