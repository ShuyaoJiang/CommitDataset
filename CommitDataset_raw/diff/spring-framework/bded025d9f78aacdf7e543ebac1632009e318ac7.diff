[+++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListener.java, + * {@code JMSReplyTO} header of the incoming message. When this value is not set, a default, + * destination can be provided by adding @{@link org.springframework.messaging.handler.annotation.SendTo, + * SendTo} to the method declaration., +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListener.java, + * {@code JMSReplyTO} header of the incoming message. When this value is not set, a default, + * destination can be provided by adding @{@link org.springframework.messaging.handler.annotation.SendTo, + * SendTo} to the method declaration., +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListener.java, + * {@code JMSReplyTO} header of the incoming message. When this value is not set, a default, + * destination can be provided by adding @{@link org.springframework.messaging.handler.annotation.SendTo, + * SendTo} to the method declaration., +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +++ b/spring-jms/src/main/java/org/springframework/jms/config/MethodJmsListenerEndpoint.java, +import java.util.Arrays;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.messaging.handler.annotation.SendTo;, +import org.springframework.util.StringUtils;, +		MessagingMessageListenerAdapter messageListener = createMessageListenerInstance();, +		String responseDestination = getDefaultResponseDestination();, +		if (StringUtils.hasText(responseDestination)) {, +	/**, +	 * Create an empty {@link MessagingMessageListenerAdapter} instance., +	 */, +	protected MessagingMessageListenerAdapter createMessageListenerInstance() {, +		return new MessagingMessageListenerAdapter();, +	}, +, +	private String getDefaultResponseDestination() {, +		SendTo ann = AnnotationUtils.getAnnotation(getMethod(), SendTo.class);, +		if (ann != null) {, +			Object[] destinations = ann.value();, +			if (destinations.length != 1) {, +				throw new IllegalStateException("Invalid @" + SendTo.class.getSimpleName() + " annotation on '", +						+ getMethod() + "' one destination must be set (got " + Arrays.toString(destinations) + ")");, +			}, +			return (String) destinations[0];, +		}, +		return null;, +	}, +, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListener.java, + * {@code JMSReplyTO} header of the incoming message. When this value is not set, a default, + * destination can be provided by adding @{@link org.springframework.messaging.handler.annotation.SendTo, + * SendTo} to the method declaration., +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +++ b/spring-jms/src/main/java/org/springframework/jms/config/MethodJmsListenerEndpoint.java, +import java.util.Arrays;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.messaging.handler.annotation.SendTo;, +import org.springframework.util.StringUtils;, +		MessagingMessageListenerAdapter messageListener = createMessageListenerInstance();, +		String responseDestination = getDefaultResponseDestination();, +		if (StringUtils.hasText(responseDestination)) {, +	/**, +	 * Create an empty {@link MessagingMessageListenerAdapter} instance., +	 */, +	protected MessagingMessageListenerAdapter createMessageListenerInstance() {, +		return new MessagingMessageListenerAdapter();, +	}, +, +	private String getDefaultResponseDestination() {, +		SendTo ann = AnnotationUtils.getAnnotation(getMethod(), SendTo.class);, +		if (ann != null) {, +			Object[] destinations = ann.value();, +			if (destinations.length != 1) {, +				throw new IllegalStateException("Invalid @" + SendTo.class.getSimpleName() + " annotation on '", +						+ getMethod() + "' one destination must be set (got " + Arrays.toString(destinations) + ")");, +			}, +			return (String) destinations[0];, +		}, +		return null;, +	}, +, +++ b/spring-jms/src/main/java/org/springframework/jms/support/JmsMessageHeaderAccessor.java, +	/**, +	 * Return the {@link JmsHeaders#CORRELATION_ID correlationId}., +	 * @see JmsHeaders#CORRELATION_ID, +	 */, +	/**, +	 * Return the {@link JmsHeaders#DESTINATION destination}., +	 * @see JmsHeaders#DESTINATION, +	 */, +	/**, +	 * Return the {@link JmsHeaders#DELIVERY_MODE delivery mode}., +	 * @see JmsHeaders#DELIVERY_MODE, +	 */, +	/**, +	 * Return the message {@link JmsHeaders#EXPIRATION expiration}., +	 * @see JmsHeaders#EXPIRATION, +	 */, +	/**, +	 * Return the {@link JmsHeaders#MESSAGE_ID message id}., +	 * @see JmsHeaders#MESSAGE_ID, +	 */, +	/**, +	 * Return the {@link JmsHeaders#PRIORITY}., +	 * @see JmsHeaders#PRIORITY, +	 */]