[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/ConditionalGenericConverter.java, +import org.springframework.core.convert.TypeDescriptor;, + * A generic converter that conditionally executes., + * Applies a rule that determines if a converter between a set of {@link #getConvertibleTypes() convertible types} matches given a client request to convert between a source field of convertible type S and a target field of convertible type T., + * Often used to selectively match custom conversion logic based on the presence of a field or class-level characteristic, such as an annotation or method., + * For example, when converting from a String field to a Date field, an implementation might return true if the target field has also been annotated with <code>@DateTimeFormat</code>., + * As another example, when converting from a String field to an Account field, an implementation might return true if the target Account class defines a public static findAccount(String) method., +public interface ConditionalGenericConverter extends GenericConverter {, +, +	/**, +	 * Should the Converter from <code>sourceType</code> to <code>targetType</code> currently under consideration be selected?, +	 * @param sourceType the type descriptor of the field we are converting from, +	 * @param targetType the type descriptor of the field we are converting to, +	 * @return true if conversion should be performed, false otherwise, +	 */, +	boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/ConditionalGenericConverter.java, +import org.springframework.core.convert.TypeDescriptor;, + * A generic converter that conditionally executes., + * Applies a rule that determines if a converter between a set of {@link #getConvertibleTypes() convertible types} matches given a client request to convert between a source field of convertible type S and a target field of convertible type T., + * Often used to selectively match custom conversion logic based on the presence of a field or class-level characteristic, such as an annotation or method., + * For example, when converting from a String field to a Date field, an implementation might return true if the target field has also been annotated with <code>@DateTimeFormat</code>., + * As another example, when converting from a String field to an Account field, an implementation might return true if the target Account class defines a public static findAccount(String) method., +public interface ConditionalGenericConverter extends GenericConverter {, +, +	/**, +	 * Should the Converter from <code>sourceType</code> to <code>targetType</code> currently under consideration be selected?, +	 * @param sourceType the type descriptor of the field we are converting from, +	 * @param targetType the type descriptor of the field we are converting to, +	 * @return true if conversion should be performed, false otherwise, +	 */, +	boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType);, +++ /dev/null, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/ConditionalGenericConverter.java, +import org.springframework.core.convert.TypeDescriptor;, + * A generic converter that conditionally executes., + * Applies a rule that determines if a converter between a set of {@link #getConvertibleTypes() convertible types} matches given a client request to convert between a source field of convertible type S and a target field of convertible type T., + * Often used to selectively match custom conversion logic based on the presence of a field or class-level characteristic, such as an annotation or method., + * For example, when converting from a String field to a Date field, an implementation might return true if the target field has also been annotated with <code>@DateTimeFormat</code>., + * As another example, when converting from a String field to an Account field, an implementation might return true if the target Account class defines a public static findAccount(String) method., +public interface ConditionalGenericConverter extends GenericConverter {, +, +	/**, +	 * Should the Converter from <code>sourceType</code> to <code>targetType</code> currently under consideration be selected?, +	 * @param sourceType the type descriptor of the field we are converting from, +	 * @param targetType the type descriptor of the field we are converting to, +	 * @return true if conversion should be performed, false otherwise, +	 */, +	boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType);, +++ /dev/null, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/GenericConverter.java, + * Generic converter interface for converting between two or more types., + * <p>, + * This is the most flexible of the Converter SPI interfaces, but also the most complex., + * It is flexible in that a GenericConverter may support converting between multiple source/target type pairs (see {@link #getConvertibleTypes()}., + * In addition, GenericConverter implementations have access to source/target {@link TypeDescriptor field context} during the type conversion process., + * This allows for resolving source and target field metadata such as annotations and generics information, which can be used influence the conversion logic., + * <p>, + * This interface should generally not be used when the simpler {@link Converter} or {@link ConverterFactory} interfaces are sufficient., + * @see TypeDescriptor, +	 * Each entry in the returned array is a convertible source-to-target type pair, also expressed as an array., +	 * For each pair, the first array element is a sourceType that can be converted from, and the second array element is a targetType that can be converted to., +	 * @param sourceType the type descriptor of the field we are converting from, +	 * @param targetType the type descriptor of the field we are converting to, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/ConditionalGenericConverter.java, +import org.springframework.core.convert.TypeDescriptor;, + * A generic converter that conditionally executes., + * Applies a rule that determines if a converter between a set of {@link #getConvertibleTypes() convertible types} matches given a client request to convert between a source field of convertible type S and a target field of convertible type T., + * Often used to selectively match custom conversion logic based on the presence of a field or class-level characteristic, such as an annotation or method., + * For example, when converting from a String field to a Date field, an implementation might return true if the target field has also been annotated with <code>@DateTimeFormat</code>., + * As another example, when converting from a String field to an Account field, an implementation might return true if the target Account class defines a public static findAccount(String) method., +public interface ConditionalGenericConverter extends GenericConverter {, +, +	/**, +	 * Should the Converter from <code>sourceType</code> to <code>targetType</code> currently under consideration be selected?, +	 * @param sourceType the type descriptor of the field we are converting from, +	 * @param targetType the type descriptor of the field we are converting to, +	 * @return true if conversion should be performed, false otherwise, +	 */, +	boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType);, +++ /dev/null, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/GenericConverter.java, + * Generic converter interface for converting between two or more types., + * <p>, + * This is the most flexible of the Converter SPI interfaces, but also the most complex., + * It is flexible in that a GenericConverter may support converting between multiple source/target type pairs (see {@link #getConvertibleTypes()}., + * In addition, GenericConverter implementations have access to source/target {@link TypeDescriptor field context} during the type conversion process., + * This allows for resolving source and target field metadata such as annotations and generics information, which can be used influence the conversion logic., + * <p>, + * This interface should generally not be used when the simpler {@link Converter} or {@link ConverterFactory} interfaces are sufficient., + * @see TypeDescriptor, +	 * Each entry in the returned array is a convertible source-to-target type pair, also expressed as an array., +	 * For each pair, the first array element is a sourceType that can be converted from, and the second array element is a targetType that can be converted to., +	 * @param sourceType the type descriptor of the field we are converting from, +	 * @param targetType the type descriptor of the field we are converting to, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +import org.springframework.core.convert.converter.ConditionalGenericConverter;, +	private final Map<Class<?>, Map<Class<?>, MatchableConverters>> converters = new HashMap<Class<?>, Map<Class<?>, MatchableConverters>>(, +			36);, +	private GenericConverter getMatchingConverterForTarget(TypeDescriptor sourceType, TypeDescriptor targetType,]