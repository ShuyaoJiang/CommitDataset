[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2012 the original author or authors., +	UNEXPECTED_ESCAPE_CHAR(Kind.ERROR,1065,"unexpected escape character.");, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2012 the original author or authors., +	UNEXPECTED_ESCAPE_CHAR(Kind.ERROR,1065,"unexpected escape character.");, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/StringLiteral.java, + * Copyright 2002-2012 the original author or authors., +		this.value = new TypedValue(value.replaceAll("''", "'").replaceAll("\"\"", "\""));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2012 the original author or authors., +	UNEXPECTED_ESCAPE_CHAR(Kind.ERROR,1065,"unexpected escape character.");, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/StringLiteral.java, + * Copyright 2002-2012 the original author or authors., +		this.value = new TypedValue(value.replaceAll("''", "'").replaceAll("\"\"", "\""));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java, +				case '\\':, +					throw new InternalParseException(new SpelParseException(expressionString,pos,SpelMessage.UNEXPECTED_ESCAPE_CHAR));, +				// may not be the end if the char after is also a ", +				if (toProcess[pos+1]=='"') {, +					pos++; // skip over that too, and continue, +				} else {, +			}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2012 the original author or authors., +	UNEXPECTED_ESCAPE_CHAR(Kind.ERROR,1065,"unexpected escape character.");, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/StringLiteral.java, + * Copyright 2002-2012 the original author or authors., +		this.value = new TypedValue(value.replaceAll("''", "'").replaceAll("\"\"", "\""));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java, +				case '\\':, +					throw new InternalParseException(new SpelParseException(expressionString,pos,SpelMessage.UNEXPECTED_ESCAPE_CHAR));, +				// may not be the end if the char after is also a ", +				if (toProcess[pos+1]=='"') {, +					pos++; // skip over that too, and continue, +				} else {, +			}, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/standard/SpelParserTests.java, +	public void testStringLiterals_DoubleQuotes_spr9620() throws Exception {, +		SpelExpression expr = new SpelExpressionParser().parseRaw("\"double quote: \"\".\"");, +		assertEquals("double quote: \".", expr.getValue());, +		expr = new SpelExpressionParser().parseRaw("\"hello \"\" world\"");, +		assertEquals("hello \" world", expr.getValue());, +	}, +, +	@Test, +	public void testStringLiterals_DoubleQuotes_spr9620_2() throws Exception {, +		try {, +			new SpelExpressionParser().parseRaw("\"double quote: \\\"\\\".\"");, +			fail("Should have failed");, +		} catch (SpelParseException spe) {, +			assertEquals(17, spe.getPosition());, +			assertEquals(SpelMessage.UNEXPECTED_ESCAPE_CHAR, spe.getMessageCode());, +		}, +	}, +, +	@Test, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2012 the original author or authors., +	UNEXPECTED_ESCAPE_CHAR(Kind.ERROR,1065,"unexpected escape character.");, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/StringLiteral.java, + * Copyright 2002-2012 the original author or authors., +		this.value = new TypedValue(value.replaceAll("''", "'").replaceAll("\"\"", "\""));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java, +				case '\\':, +					throw new InternalParseException(new SpelParseException(expressionString,pos,SpelMessage.UNEXPECTED_ESCAPE_CHAR));, +				// may not be the end if the char after is also a ", +				if (toProcess[pos+1]=='"') {, +					pos++; // skip over that too, and continue, +				} else {, +			}, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/standard/SpelParserTests.java, +	public void testStringLiterals_DoubleQuotes_spr9620() throws Exception {, +		SpelExpression expr = new SpelExpressionParser().parseRaw("\"double quote: \"\".\"");, +		assertEquals("double quote: \".", expr.getValue());, +		expr = new SpelExpressionParser().parseRaw("\"hello \"\" world\"");, +		assertEquals("hello \" world", expr.getValue());, +	}, +, +	@Test, +	public void testStringLiterals_DoubleQuotes_spr9620_2() throws Exception {, +		try {, +			new SpelExpressionParser().parseRaw("\"double quote: \\\"\\\".\"");, +			fail("Should have failed");, +		} catch (SpelParseException spe) {, +			assertEquals(17, spe.getPosition());, +			assertEquals(SpelMessage.UNEXPECTED_ESCAPE_CHAR, spe.getMessageCode());, +		}, +	}, +, +	@Test, +++ b/src/dist/changelog.txt, +* SpEL now supports nested double quotes in expressions (SPR-9620)]