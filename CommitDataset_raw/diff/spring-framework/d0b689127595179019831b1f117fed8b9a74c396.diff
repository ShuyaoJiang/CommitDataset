[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +	private String scope;, +	private boolean singleton = false;, +		if (other.getScope() != null) {, +		}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +	private String scope;, +	private boolean singleton = false;, +		if (other.getScope() != null) {, +		}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +				// Set default singleton scope, if not configured before., +				if (mbd.getScope() == null) {, +					mbd.setScope(RootBeanDefinition.SCOPE_SINGLETON);, +				}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +	private String scope;, +	private boolean singleton = false;, +		if (other.getScope() != null) {, +		}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +				// Set default singleton scope, if not configured before., +				if (mbd.getScope() == null) {, +					mbd.setScope(RootBeanDefinition.SCOPE_SINGLETON);, +				}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java, +		if (DEFAULT_VALUE.equals(lazyInit)) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +	private String scope;, +	private boolean singleton = false;, +		if (other.getScope() != null) {, +		}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +				// Set default singleton scope, if not configured before., +				if (mbd.getScope() == null) {, +					mbd.setScope(RootBeanDefinition.SCOPE_SINGLETON);, +				}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java, +		if (DEFAULT_VALUE.equals(lazyInit)) {, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +	public void testScopeInheritanceForChildBeanDefinitions() throws Exception {, +		assertEquals("Child 'scope' not inherited", "bonanza!", def.getScope());, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +	private String scope;, +	private boolean singleton = false;, +		if (other.getScope() != null) {, +		}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +				// Set default singleton scope, if not configured before., +				if (mbd.getScope() == null) {, +					mbd.setScope(RootBeanDefinition.SCOPE_SINGLETON);, +				}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java, +		if (DEFAULT_VALUE.equals(lazyInit)) {, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +	public void testScopeInheritanceForChildBeanDefinitions() throws Exception {, +		assertEquals("Child 'scope' not inherited", "bonanza!", def.getScope());, +++ b/org.springframework.context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests-parent.xml, +	<bean id="inheritedTestBean" class="org.springframework.beans.TestBean" abstract="true" scope="prototype">, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +	private String scope;, +	private boolean singleton = false;, +		if (other.getScope() != null) {, +		}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +				// Set default singleton scope, if not configured before., +				if (mbd.getScope() == null) {, +					mbd.setScope(RootBeanDefinition.SCOPE_SINGLETON);, +				}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java, +		if (DEFAULT_VALUE.equals(lazyInit)) {, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +	public void testScopeInheritanceForChildBeanDefinitions() throws Exception {, +		assertEquals("Child 'scope' not inherited", "bonanza!", def.getScope());, +++ b/org.springframework.context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests-parent.xml, +	<bean id="inheritedTestBean" class="org.springframework.beans.TestBean" abstract="true" scope="prototype">, +++ b/org.springframework.context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests.java, +	public @Test void testInheritanceFromParentFactoryPrototype() throws Exception {, +		assertFalse(inherits2 == inherits);, +		assertTrue(inherits2 != inherits);]