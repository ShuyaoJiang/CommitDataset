[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/PathResourceResolver.java, +import java.util.Arrays;, +			else if (logger.isTraceEnabled()) {, +				logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +, +						"allowed locations=" + Arrays.asList(getAllowedLocations()));, +	 * Perform additional checks on a resolved resource beyond checking whether the, +	 * resources exists and is readable. The default implementation also verifies, +	 * the resource is either under the location relative to which it was found or, +	 * is under one of the {@link #setAllowedLocations allowed locations}., +		if (resource instanceof UrlResource) {, +		else if (resource instanceof ClassPathResource) {, +			resourcePath = ((ClassPathResource) resource).getPath();, +			locationPath = ((ClassPathResource) location).getPath();, +		}, +			// Use URLDecoder (vs UriUtils) to preserve potentially decoded UTF-8 chars..., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/PathResourceResolver.java, +import java.util.Arrays;, +			else if (logger.isTraceEnabled()) {, +				logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +, +						"allowed locations=" + Arrays.asList(getAllowedLocations()));, +	 * Perform additional checks on a resolved resource beyond checking whether the, +	 * resources exists and is readable. The default implementation also verifies, +	 * the resource is either under the location relative to which it was found or, +	 * is under one of the {@link #setAllowedLocations allowed locations}., +		if (resource instanceof UrlResource) {, +		else if (resource instanceof ClassPathResource) {, +			resourcePath = ((ClassPathResource) resource).getPath();, +			locationPath = ((ClassPathResource) location).getPath();, +		}, +			// Use URLDecoder (vs UriUtils) to preserve potentially decoded UTF-8 chars..., +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/PathResourceResolverTests.java, +, +import static org.junit.Assert.*;, +, +	private final PathResourceResolver resolver = new PathResourceResolver();, +	private void testCheckResource(Resource location, String requestPath) throws IOException {, +		Resource actual = this.resolver.resolveResource(null, requestPath, Arrays.asList(location), null);, +		if (!location.createRelative(requestPath).exists() && !requestPath.contains(":")) {, +			fail(requestPath + " doesn't actually exist as a relative path");, +		}, +		assertNull(actual);, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/PathResourceResolver.java, +import java.util.Arrays;, +			else if (logger.isTraceEnabled()) {, +				logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +, +						"allowed locations=" + Arrays.asList(getAllowedLocations()));, +	 * Perform additional checks on a resolved resource beyond checking whether the, +	 * resources exists and is readable. The default implementation also verifies, +	 * the resource is either under the location relative to which it was found or, +	 * is under one of the {@link #setAllowedLocations allowed locations}., +		if (resource instanceof UrlResource) {, +		else if (resource instanceof ClassPathResource) {, +			resourcePath = ((ClassPathResource) resource).getPath();, +			locationPath = ((ClassPathResource) location).getPath();, +		}, +			// Use URLDecoder (vs UriUtils) to preserve potentially decoded UTF-8 chars..., +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/PathResourceResolverTests.java, +, +import static org.junit.Assert.*;, +, +	private final PathResourceResolver resolver = new PathResourceResolver();, +	private void testCheckResource(Resource location, String requestPath) throws IOException {, +		Resource actual = this.resolver.resolveResource(null, requestPath, Arrays.asList(location), null);, +		if (!location.createRelative(requestPath).exists() && !requestPath.contains(":")) {, +			fail(requestPath + " doesn't actually exist as a relative path");, +		}, +		assertNull(actual);, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.java, +, +import static org.junit.Assert.*;, +, +	private void testInvalidPath(Resource location, String requestPath) throws Exception {, +		this.request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, requestPath);, +		this.response = new MockHttpServletResponse();, +		this.handler.handleRequest(this.request, this.response);, +		if (!location.createRelative(requestPath).exists() && !requestPath.contains(":")) {, +			fail(requestPath + " doesn't actually exist as a relative path");, +		}, +		assertEquals(404, this.response.getStatus());, +	}, +, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/PathResourceResolver.java, +import java.util.Arrays;, +			else if (logger.isTraceEnabled()) {, +				logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +, +						"allowed locations=" + Arrays.asList(getAllowedLocations()));, +	 * Perform additional checks on a resolved resource beyond checking whether the, +	 * resources exists and is readable. The default implementation also verifies, +	 * the resource is either under the location relative to which it was found or, +	 * is under one of the {@link #setAllowedLocations allowed locations}., +		if (resource instanceof UrlResource) {, +		else if (resource instanceof ClassPathResource) {, +			resourcePath = ((ClassPathResource) resource).getPath();, +			locationPath = ((ClassPathResource) location).getPath();, +		}]