[+++ b/org.springframework.aop/src/test/java/org/springframework/aop/framework/ProxyFactoryTests.java, + * Copyright 2002-2009 the original author or authors., +import javax.swing.*;, +import javax.accessibility.Accessible;, +, +	@Test, +	public void testExclusionOfNonPublicInterfaces() {, +		JFrame frame = new JFrame();, +		ProxyFactory proxyFactory = new ProxyFactory(frame);, +		Object proxy = proxyFactory.getProxy();, +		assertTrue(proxy instanceof RootPaneContainer);, +		assertTrue(proxy instanceof Accessible);, +	}, +, +	private static class CountingBeforeAdvice extends MethodCounter implements MethodBeforeAdvice {, +	private static class TimestampIntroductionInterceptor extends DelegatingIntroductionInterceptor, +	}, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/framework/ProxyFactoryTests.java, + * Copyright 2002-2009 the original author or authors., +import javax.swing.*;, +import javax.accessibility.Accessible;, +, +	@Test, +	public void testExclusionOfNonPublicInterfaces() {, +		JFrame frame = new JFrame();, +		ProxyFactory proxyFactory = new ProxyFactory(frame);, +		Object proxy = proxyFactory.getProxy();, +		assertTrue(proxy instanceof RootPaneContainer);, +		assertTrue(proxy instanceof Accessible);, +	}, +, +	private static class CountingBeforeAdvice extends MethodCounter implements MethodBeforeAdvice {, +	private static class TimestampIntroductionInterceptor extends DelegatingIntroductionInterceptor, +	}, +++ b/org.springframework.core/src/main/java/org/springframework/util/ClassUtils.java, +				if (!interfaces.contains(ifc) && Modifier.isPublic(ifc.getModifiers()) &&, +						(classLoader == null || isVisible(ifc, classLoader))) {]