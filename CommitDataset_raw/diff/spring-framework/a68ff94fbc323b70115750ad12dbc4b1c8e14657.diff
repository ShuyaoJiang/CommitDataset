[+++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/StringDecoder.java, +, +, +, +, +			inputFlux = Flux.from(inputStream).flatMap(StringDecoder::splitOnNewline);, +		return decodeInternal(inputFlux, mimeType);, +		return decodeInternal(Flux.from(inputStream), mimeType)., +				collect(StringBuilder::new, StringBuilder::append)., +				map(StringBuilder::toString);, +		List<DataBuffer> results = new ArrayList<>();, +		int endIdx;, +	private Flux<String> decodeInternal(Flux<DataBuffer> inputFlux, MimeType mimeType) {, +		Charset charset = getCharset(mimeType);, +		return inputFlux.map(dataBuffer -> {, +			CharBuffer charBuffer = charset.decode(dataBuffer.asByteBuffer());, +			DataBufferUtils.release(dataBuffer);, +			return charBuffer.toString();, +		});, +	}, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/StringDecoder.java, +, +, +, +, +			inputFlux = Flux.from(inputStream).flatMap(StringDecoder::splitOnNewline);, +		return decodeInternal(inputFlux, mimeType);, +		return decodeInternal(Flux.from(inputStream), mimeType)., +				collect(StringBuilder::new, StringBuilder::append)., +				map(StringBuilder::toString);, +		List<DataBuffer> results = new ArrayList<>();, +		int endIdx;, +	private Flux<String> decodeInternal(Flux<DataBuffer> inputFlux, MimeType mimeType) {, +		Charset charset = getCharset(mimeType);, +		return inputFlux.map(dataBuffer -> {, +			CharBuffer charBuffer = charset.decode(dataBuffer.asByteBuffer());, +			DataBufferUtils.release(dataBuffer);, +			return charBuffer.toString();, +		});, +	}, +++ b/spring-web-reactive/src/main/java/org/springframework/http/codec/json/JacksonJsonDecoder.java, + * Decode a byte stream into JSON and convert to Object's with Jackson., + * @author Rossen Stoyanchev, + *, +	private static final MimeType[] MIME_TYPES = new MimeType[] {, +			new MimeType("application", "json", StandardCharsets.UTF_8),, +			new MimeType("application", "*+json", StandardCharsets.UTF_8), +	};, +, +, +	private final JsonObjectDecoder fluxObjectDecoder = new JsonObjectDecoder(true);, +	private final JsonObjectDecoder monoObjectDecoder = new JsonObjectDecoder(false);, +		super(MIME_TYPES);, +, +		JsonObjectDecoder objectDecoder = this.fluxObjectDecoder;, +		return decodeInternal(objectDecoder, inputStream, elementType, mimeType, hints);, +		JsonObjectDecoder objectDecoder = this.monoObjectDecoder;, +		return decodeInternal(objectDecoder, inputStream, elementType, mimeType, hints).single();, +	}, +, +	private Flux<Object> decodeInternal(JsonObjectDecoder objectDecoder, Publisher<DataBuffer> inputStream,, +			ResolvableType elementType, MimeType mimeType, Object[] hints) {, +, +, +, +		return objectDecoder.decode(inputStream, elementType, mimeType, hints), +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/StringDecoder.java, +, +, +, +, +			inputFlux = Flux.from(inputStream).flatMap(StringDecoder::splitOnNewline);, +		return decodeInternal(inputFlux, mimeType);, +		return decodeInternal(Flux.from(inputStream), mimeType)., +				collect(StringBuilder::new, StringBuilder::append)., +				map(StringBuilder::toString);, +		List<DataBuffer> results = new ArrayList<>();, +		int endIdx;, +	private Flux<String> decodeInternal(Flux<DataBuffer> inputFlux, MimeType mimeType) {, +		Charset charset = getCharset(mimeType);, +		return inputFlux.map(dataBuffer -> {, +			CharBuffer charBuffer = charset.decode(dataBuffer.asByteBuffer());, +			DataBufferUtils.release(dataBuffer);, +			return charBuffer.toString();, +		});, +	}, +++ b/spring-web-reactive/src/main/java/org/springframework/http/codec/json/JacksonJsonDecoder.java, + * Decode a byte stream into JSON and convert to Object's with Jackson., + * @author Rossen Stoyanchev, + *, +	private static final MimeType[] MIME_TYPES = new MimeType[] {, +			new MimeType("application", "json", StandardCharsets.UTF_8),, +			new MimeType("application", "*+json", StandardCharsets.UTF_8), +	};, +, +, +	private final JsonObjectDecoder fluxObjectDecoder = new JsonObjectDecoder(true);, +	private final JsonObjectDecoder monoObjectDecoder = new JsonObjectDecoder(false);, +		super(MIME_TYPES);, +]