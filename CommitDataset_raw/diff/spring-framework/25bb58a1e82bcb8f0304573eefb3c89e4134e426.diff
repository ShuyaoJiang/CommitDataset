[+++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, + * @author Tadaya Tsuyukubo, +	private final Map<Class<?>, Class<?>> mixIns = new HashMap<Class<?>, Class<?>>();, +, +	 * Add mix-in annotations to use for augmenting specified class or interface., +	 * @param mixIns Map of entries with target classes (or interface) whose annotations, +	 * to effectively override as key and mix-in classes (or interface) whose, +	 * annotations are to be "added" to target's annotations as value., +	 * @since 4.1.2, +	 * @see com.fasterxml.jackson.databind.ObjectMapper#addMixInAnnotations(Class, Class), +	 */, +	public Jackson2ObjectMapperBuilder mixIns(Map<Class<?>, Class<?>> mixIns) {, +		if (mixIns != null) {, +			this.mixIns.putAll(mixIns);, +		}, +		return this;, +	}, +, +	/**, +		for (Class<?> target : this.mixIns.keySet()) {, +			objectMapper.addMixInAnnotations(target, this.mixIns.get(target));, +		}, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, + * @author Tadaya Tsuyukubo, +	private final Map<Class<?>, Class<?>> mixIns = new HashMap<Class<?>, Class<?>>();, +, +	 * Add mix-in annotations to use for augmenting specified class or interface., +	 * @param mixIns Map of entries with target classes (or interface) whose annotations, +	 * to effectively override as key and mix-in classes (or interface) whose, +	 * annotations are to be "added" to target's annotations as value., +	 * @since 4.1.2, +	 * @see com.fasterxml.jackson.databind.ObjectMapper#addMixInAnnotations(Class, Class), +	 */, +	public Jackson2ObjectMapperBuilder mixIns(Map<Class<?>, Class<?>> mixIns) {, +		if (mixIns != null) {, +			this.mixIns.putAll(mixIns);, +		}, +		return this;, +	}, +, +	/**, +		for (Class<?> target : this.mixIns.keySet()) {, +			objectMapper.addMixInAnnotations(target, this.mixIns.get(target));, +		}, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBean.java, + * @author Tadaya Tsuyukubo, +	 * Add mix-in annotations to use for augmenting specified class or interface., +	 * @param mixIns Map of entries with target classes (or interface) whose annotations, +	 * to effectively override as key and mix-in classes (or interface) whose, +	 * annotations are to be "added" to target's annotations as value., +	 * @since 4.1.2, +	 * @see com.fasterxml.jackson.databind.ObjectMapper#addMixInAnnotations(Class, Class), +	 */, +	public void setMixIns(Map<Class<?>, Class<?>> mixIns) {, +		this.builder.mixIns(mixIns);, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, + * @author Tadaya Tsuyukubo, +	private final Map<Class<?>, Class<?>> mixIns = new HashMap<Class<?>, Class<?>>();, +, +	 * Add mix-in annotations to use for augmenting specified class or interface., +	 * @param mixIns Map of entries with target classes (or interface) whose annotations, +	 * to effectively override as key and mix-in classes (or interface) whose, +	 * annotations are to be "added" to target's annotations as value., +	 * @since 4.1.2, +	 * @see com.fasterxml.jackson.databind.ObjectMapper#addMixInAnnotations(Class, Class), +	 */, +	public Jackson2ObjectMapperBuilder mixIns(Map<Class<?>, Class<?>> mixIns) {, +		if (mixIns != null) {, +			this.mixIns.putAll(mixIns);, +		}, +		return this;, +	}, +, +	/**, +		for (Class<?> target : this.mixIns.keySet()) {, +			objectMapper.addMixInAnnotations(target, this.mixIns.get(target));, +		}, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBean.java, + * @author Tadaya Tsuyukubo, +	 * Add mix-in annotations to use for augmenting specified class or interface., +	 * @param mixIns Map of entries with target classes (or interface) whose annotations, +	 * to effectively override as key and mix-in classes (or interface) whose, +	 * annotations are to be "added" to target's annotations as value., +	 * @since 4.1.2, +	 * @see com.fasterxml.jackson.databind.ObjectMapper#addMixInAnnotations(Class, Class), +	 */, +	public void setMixIns(Map<Class<?>, Class<?>> mixIns) {, +		this.builder.mixIns(mixIns);, +	}, +, +	/**, +++ b/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilderTests.java, +	public void mixIns() {, +		Class<?> target = String.class;, +		Class<?> mixinSource = Object.class;, +		Map<Class<?>, Class<?>> mixIns = new HashMap<Class<?>, Class<?>>();, +		mixIns.put(target, mixinSource);]