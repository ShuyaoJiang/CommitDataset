[+++ b/spring-beans/src/main/java/org/springframework/beans/BeanInstantiationException.java, +		super("Failed to instantiate [" + beanClass.getName() + "]: " + msg, cause);, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanInstantiationException.java, +		super("Failed to instantiate [" + beanClass.getName() + "]: " + msg, cause);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/CglibSubclassingInstantiationStrategy.java, +	protected Object instantiateWithMethodInjection(RootBeanDefinition bd, String beanName, BeanFactory owner) {, +		return instantiateWithMethodInjection(bd, beanName, owner, null);, +	protected Object instantiateWithMethodInjection(RootBeanDefinition bd, String beanName, BeanFactory owner,, +			Constructor<?> ctor, Object... args) {, +		// Must generate CGLIB subclass..., +		return new CglibSubclassCreator(bd, owner).instantiate(ctor, args);, +		public Object instantiate(Constructor<?> ctor, Object... args) {, +					throw new BeanInstantiationException(this.beanDefinition.getBeanClass(),, +							"Failed to invoke constructor for CGLIB enhanced subclass [" + subclass.getName() + "]", ex);, +		public CglibIdentitySupport(RootBeanDefinition beanDefinition) {, +		public RootBeanDefinition getBeanDefinition() {, +		public MethodOverrideCallbackFilter(RootBeanDefinition beanDefinition) {, +		public LookupOverrideMethodInterceptor(RootBeanDefinition beanDefinition, BeanFactory owner) {, +		public ReplaceOverrideMethodInterceptor(RootBeanDefinition beanDefinition, BeanFactory owner) {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanInstantiationException.java, +		super("Failed to instantiate [" + beanClass.getName() + "]: " + msg, cause);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/CglibSubclassingInstantiationStrategy.java, +	protected Object instantiateWithMethodInjection(RootBeanDefinition bd, String beanName, BeanFactory owner) {, +		return instantiateWithMethodInjection(bd, beanName, owner, null);, +	protected Object instantiateWithMethodInjection(RootBeanDefinition bd, String beanName, BeanFactory owner,, +			Constructor<?> ctor, Object... args) {, +		// Must generate CGLIB subclass..., +		return new CglibSubclassCreator(bd, owner).instantiate(ctor, args);, +		public Object instantiate(Constructor<?> ctor, Object... args) {, +					throw new BeanInstantiationException(this.beanDefinition.getBeanClass(),, +							"Failed to invoke constructor for CGLIB enhanced subclass [" + subclass.getName() + "]", ex);, +		public CglibIdentitySupport(RootBeanDefinition beanDefinition) {, +		public RootBeanDefinition getBeanDefinition() {, +		public MethodOverrideCallbackFilter(RootBeanDefinition beanDefinition) {, +		public LookupOverrideMethodInterceptor(RootBeanDefinition beanDefinition, BeanFactory owner) {, +		public ReplaceOverrideMethodInterceptor(RootBeanDefinition beanDefinition, BeanFactory owner) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +	public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,, +			Constructor<?>[] chosenCtors, final Object[] explicitArgs) {, +			throw new BeanCreationException(mbd.getResourceDescription(), beanName,, +					"Bean instantiation via constructor failed", ex);, +				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(, +						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse);, +			throw new BeanCreationException(mbd.getResourceDescription(), beanName,, +					"Bean instantiation via factory method failed", ex);, +	 * <p>This method is also used for handling invocations of static factory methods., +	private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanInstantiationException.java, +		super("Failed to instantiate [" + beanClass.getName() + "]: " + msg, cause);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/CglibSubclassingInstantiationStrategy.java, +	protected Object instantiateWithMethodInjection(RootBeanDefinition bd, String beanName, BeanFactory owner) {, +		return instantiateWithMethodInjection(bd, beanName, owner, null);, +	protected Object instantiateWithMethodInjection(RootBeanDefinition bd, String beanName, BeanFactory owner,, +			Constructor<?> ctor, Object... args) {, +		// Must generate CGLIB subclass..., +		return new CglibSubclassCreator(bd, owner).instantiate(ctor, args);, +		public Object instantiate(Constructor<?> ctor, Object... args) {, +					throw new BeanInstantiationException(this.beanDefinition.getBeanClass(),, +							"Failed to invoke constructor for CGLIB enhanced subclass [" + subclass.getName() + "]", ex);, +		public CglibIdentitySupport(RootBeanDefinition beanDefinition) {, +		public RootBeanDefinition getBeanDefinition() {, +		public MethodOverrideCallbackFilter(RootBeanDefinition beanDefinition) {, +		public LookupOverrideMethodInterceptor(RootBeanDefinition beanDefinition, BeanFactory owner) {, +		public ReplaceOverrideMethodInterceptor(RootBeanDefinition beanDefinition, BeanFactory owner) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +	public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,, +			Constructor<?>[] chosenCtors, final Object[] explicitArgs) {, +			throw new BeanCreationException(mbd.getResourceDescription(), beanName,, +					"Bean instantiation via constructor failed", ex);, +				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(, +						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse);, +			throw new BeanCreationException(mbd.getResourceDescription(), beanName,, +					"Bean instantiation via factory method failed", ex);, +	 * <p>This method is also used for handling invocations of static factory methods., +	private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/InstantiationStrategy.java, + * Copyright 2002-2014 the original author or authors., + * @author Juergen Hoeller, +	 * @param bd the bean definition, +	 * @param beanName the name of the bean when it's created in this context., +	 * The name can be {@code null} if we're autowiring a bean which doesn't, +	 * belong to the factory., +	 * @param owner the owning BeanFactory, +	 * @throws BeansException if the instantiation attempt failed, +	Object instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner), +	 * @param bd the bean definition, +	 * @param beanName the name of the bean when it's created in this context., +	 * The name can be {@code null} if we're autowiring a bean which doesn't, +	 * belong to the factory., +	 * @param owner the owning BeanFactory, +	 * @throws BeansException if the instantiation attempt failed, +	Object instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner,, +			Constructor<?> ctor, Object... args) throws BeansException;, +	 * @param bd the bean definition, +	 * @param beanName the name of the bean when it's created in this context., +	 * The name can be {@code null} if we're autowiring a bean which doesn't, +	 * belong to the factory., +	 * @param owner the owning BeanFactory, +	 * @throws BeansException if the instantiation attempt failed, +	Object instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner,]