[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +import java.util.LinkedHashMap;, +			boolean fullyCacheable =, +					ClassUtils.isCacheSafe(beanClass, CachedIntrospectionResults.class.getClassLoader()) ||, +					isClassLoaderAccepted(beanClass.getClassLoader());, +			if (fullyCacheable || !ClassUtils.isPresent(beanClass.getName() + "BeanInfo", beanClass.getClassLoader())) {, +				results = new CachedIntrospectionResults(beanClass, fullyCacheable);, +				results = new CachedIntrospectionResults(beanClass, true);, +	private CachedIntrospectionResults(Class beanClass, boolean cacheFullMetadata) throws BeansException {, +			this.propertyDescriptorCache = new LinkedHashMap<String, PropertyDescriptor>();, +				if (Class.class.equals(beanClass) && "classLoader".equals(pd.getName())) {, +					// Ignore Class.getClassLoader() method - nobody needs to bind to that, +					continue;, +				}, +				if (cacheFullMetadata) {, +					pd = buildGenericTypeAwarePropertyDescriptor(beanClass, pd);, +				}, +			throw new FatalBeanException("Failed to obtain BeanInfo for class [" + beanClass.getName() + "]", ex);, +		return (pd == null || pd instanceof GenericTypeAwarePropertyDescriptor ? pd :, +				buildGenericTypeAwarePropertyDescriptor(getBeanClass(), pd));, +		PropertyDescriptor[] pds = new PropertyDescriptor[this.propertyDescriptorCache.size()];, +		int i = 0;, +		for (PropertyDescriptor pd : this.propertyDescriptorCache.values()) {, +			pds[i] = (pd instanceof GenericTypeAwarePropertyDescriptor ? pd :, +					buildGenericTypeAwarePropertyDescriptor(getBeanClass(), pd));, +			i++;, +		}, +		return pds;, +	}, +, +	private PropertyDescriptor buildGenericTypeAwarePropertyDescriptor(Class beanClass, PropertyDescriptor pd) {, +		try {, +			return new GenericTypeAwarePropertyDescriptor(beanClass, pd.getName(), pd.getReadMethod(),, +					pd.getWriteMethod(), pd.getPropertyEditorClass());, +		}, +		catch (IntrospectionException ex) {, +			throw new FatalBeanException("Failed to re-introspect class [" + beanClass.getName() + "]", ex);, +		}]