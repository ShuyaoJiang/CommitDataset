[+++ b/spring-context/src/main/java/org/springframework/messaging/support/MessageBuilder.java, +	private final MessageHeaderAccesssor headerAccessor;, +		this.headerAccessor = new MessageHeaderAccesssor(originalMessage);, +++ b/spring-context/src/main/java/org/springframework/messaging/support/MessageBuilder.java, +	private final MessageHeaderAccesssor headerAccessor;, +		this.headerAccessor = new MessageHeaderAccesssor(originalMessage);, +++ /dev/null, +++ b/spring-context/src/main/java/org/springframework/messaging/support/MessageBuilder.java, +	private final MessageHeaderAccesssor headerAccessor;, +		this.headerAccessor = new MessageHeaderAccesssor(originalMessage);, +++ /dev/null, +++ b/spring-context/src/main/java/org/springframework/messaging/support/MessageHeaderAccesssor.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.messaging.support;, +, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.messaging.Message;, +import org.springframework.messaging.MessageChannel;, +import org.springframework.messaging.MessageHeaders;, +import org.springframework.util.Assert;, +import org.springframework.util.ObjectUtils;, +import org.springframework.util.PatternMatchUtils;, +import org.springframework.util.StringUtils;, +, +, +/**, + * A base class for read/write access to {@link MessageHeaders}. Supports creation of new, + * headers or modification of existing message headers., + * <p>, + * Sub-classes can provide additinoal typed getters and setters for convenient access to, + * specific headers. Getters and setters should delegate to {@link #getHeader(String)} or, + * {@link #setHeader(String, Object)} respectively. At the end {@link #toMap()} can be, + * used to obtain the resulting headers., + *, + * @author Rossen Stoyanchev, + * @since 4.0, + */, +public class MessageHeaderAccesssor {, +, +	protected Log logger = LogFactory.getLog(getClass());, +, +, +	// wrapped read-only message headers, +	private final MessageHeaders originalHeaders;, +, +	// header updates, +	private final Map<String, Object> headers = new HashMap<String, Object>(4);, +, +, +	/**, +	 * A constructor for creating new message headers., +	 */, +	public MessageHeaderAccesssor() {, +		this.originalHeaders = null;, +	}, +, +	/**, +	 * A constructor for accessing and modifying existing message headers., +	 */, +	public MessageHeaderAccesssor(Message<?> message) {, +		this.originalHeaders = (message != null) ? message.getHeaders() : null;, +	}, +, +, +	/**, +	 * Return a header map including original, wrapped headers (if any) plus additional, +	 * header updates made through accessor methods., +	 */, +	public Map<String, Object> toMap() {, +		Map<String, Object> result = new HashMap<String, Object>();, +		if (this.originalHeaders != null) {, +			result.putAll(this.originalHeaders);, +		}, +		for (String key : this.headers.keySet()) {, +			Object value = this.headers.get(key);, +			if (value == null) {, +				result.remove(key);, +			}]