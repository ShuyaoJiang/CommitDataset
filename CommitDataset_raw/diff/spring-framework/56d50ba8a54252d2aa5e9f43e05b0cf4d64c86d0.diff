[+++ b/spring-framework-reference/src/mvc.xml, +    public String helloWorld(Model model) {, +        model.addAttribute("message", "Hello World!");, +        return "helloWorld";, +    method names and signatures. In this particular example the method accepts, +    a <classname>Model</classname> and returns a view name as a , +    <classname>String</classname>, but various other method parameters and , +    return values can be used as explained later in this section. , +    <interfacename>@Controller</interfacename> and , +    <interfacename>@RequestMapping</interfacename> and a number of other , +    annotations form the basis for the Spring MVC implementation. , +    This section documents these annotations and, +      ("GET", "POST", etc.) or an HTTP request parameter condition.</para>, +          customizing the data binder. See <xref linkend="mvc-ann-typeconversion"/>, +          and <xref linkend="mvc-ann-webdatabinder" />.</para>, +        , +        <para>Type conversion is applied automatically if the target method parameter , +        type is not <classname>String</classname>., +        See <xref linkend="mvc-ann-typeconversion"/>.</para>, +        <para>Type conversion is applied automatically if the target method , +        parameter type is not <classname>String</classname>., +        See <xref linkend="mvc-ann-typeconversion"/>.</para>, +, +        <para>Type conversion is applied automatically if the method parameter , +        is not <classname>String</classname>. , +        See <xref linkend="mvc-ann-typeconversion"/>.</para>, +        , +        <tip><para>Built-in support is available for converting a coma-separated , +        string into an array/collection of strings or other types known to the , +        type conversion system. For example a method parameter annotated with , +        <literal>@RequestHeader("Accept")</literal> may be of type , +        <classname>String</classname> but also <classname>String[]</classname> , +        or <classname>List&lt;String&gt;</classname>.</para></tip>, +, +      <section id="mvc-ann-typeconversion">, +        <title>Method Parameters And Type Conversion</title>, +        , +        <para>String-based values extracted from the request including, +        request parameters, path variables, request headers, and cookie values , +        may need to be converted to the target type of the method parameter or , +        field (e.g. binding a request parameter to a field in an  , +        <interfacename>@ModelAttribute</interfacename> parameter) they're bound to. , +        If the target type is not <classname>String</classname>, Spring , +        automatically converts to the appropriate type. , +        All simple types such as int, long, Date, etc. are , +        supported. You can further customize the conversion process , +        through a <classname>WebDataBinder</classname>  , +        (see <xref linkend="mvc-ann-webdatabinder" />) or by registering , +        <classname>Formatters</classname> with the , +        <classname>FormattingConversionService</classname>, +        (see <xref linkend="format" />).</para>, +      </section>, +]