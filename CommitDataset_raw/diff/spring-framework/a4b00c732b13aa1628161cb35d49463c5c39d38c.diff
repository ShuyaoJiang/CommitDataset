[+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +import org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils;, +				executor = BeanFactoryAnnotationUtils.qualifiedBeanOfType(, +						this.beanFactory, Executor.class, qualifier);, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +import org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils;, +				executor = BeanFactoryAnnotationUtils.qualifiedBeanOfType(, +						this.beanFactory, Executor.class, qualifier);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactoryUtils.java, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +import org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils;, +				executor = BeanFactoryAnnotationUtils.qualifiedBeanOfType(, +						this.beanFactory, Executor.class, qualifier);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactoryUtils.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.beans.factory.annotation;, +, +import java.lang.reflect.Method;, +, +import java.util.Map;, +, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryUtils;, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.beans.factory.support.AbstractBeanDefinition;, +import org.springframework.beans.factory.support.AutowireCandidateQualifier;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +import org.springframework.util.ObjectUtils;, +, +/**, + * Convenience methods performing bean lookups related to annotations, for example, + * Spring's {@link Qualifier @Qualifier} annotation., + *, + * @author Chris Beams, + * @since 3.2, + * @see BeanFactoryUtils, + */, +public class BeanFactoryAnnotationUtils {, +, +	/**, +	 * Obtain a bean of type {@code T} from the given {@code BeanFactory} declaring a, +	 * qualifier (e.g. via {@code <qualifier>} or {@code @Qualifier}) matching the given, +	 * qualifier, or having a bean name matching the given qualifier., +	 * @param bf the BeanFactory to get the target bean from, +	 * @param beanType the type of bean to retrieve, +	 * @param qualifier the qualifier for selecting between multiple bean matches, +	 * @return the matching bean of type {@code T} (never {@code null}), +	 * @throws IllegalStateException if no matching bean of type {@code T} found, +	 * @since 3.2, +	 */, +	public static <T> T qualifiedBeanOfType(BeanFactory beanFactory, Class<T> beanType, String qualifier) {, +		if (beanFactory instanceof ConfigurableListableBeanFactory) {, +			// Full qualifier matching supported., +			return qualifiedBeanOfType((ConfigurableListableBeanFactory) beanFactory, beanType, qualifier);, +		}, +		else if (beanFactory.containsBean(qualifier)) {, +			// Fallback: target bean at least found by bean name., +			return beanFactory.getBean(qualifier, beanType);, +		}, +		else {, +			throw new IllegalStateException("No matching " + beanType.getSimpleName() +, +					" bean found for bean name '" + qualifier +, +					"'! (Note: Qualifier matching not supported because given " +, +					"BeanFactory does not implement ConfigurableListableBeanFactory.)");, +		}, +	}, +, +	/**, +	 * Obtain a bean of type {@code T} from the given {@code BeanFactory} declaring a, +	 * qualifier (e.g. {@code <qualifier>} or {@code @Qualifier}) matching the given, +	 * qualifier, +	 * @param bf the BeanFactory to get the target bean from, +	 * @param beanType the type of bean to retrieve, +	 * @param qualifier the qualifier for selecting between multiple bean matches, +	 * @return the matching bean of type {@code T} (never {@code null}), +	 * @throws IllegalStateException if no matching bean of type {@code T} found, +	 */, +	private static <T> T qualifiedBeanOfType(ConfigurableListableBeanFactory bf, Class<T> beanType, String qualifier) {, +		Map<String, T> candidateBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(bf, beanType);, +		T matchingBean = null;, +		for (String beanName : candidateBeans.keySet()) {, +			if (isQualifierMatch(qualifier, beanName, bf)) {]