[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +import org.springframework.beans.factory.support.BeanDefinitionReader;, +	private final Map<String, String> importedResources = new LinkedHashMap<String, String>();, +	public void addImportedResource(String importedResource, String readerClassName) {, +		this.importedResources.put(importedResource, readerClassName);, +	public Map<String, String> getImportedResources() {, +		return this.importedResources;, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +import org.springframework.beans.factory.support.BeanDefinitionReader;, +	private final Map<String, String> importedResources = new LinkedHashMap<String, String>();, +	public void addImportedResource(String importedResource, String readerClassName) {, +		this.importedResources.put(importedResource, readerClassName);, +	public Map<String, String> getImportedResources() {, +		return this.importedResources;, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +import java.util.HashMap;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ReflectionUtils;, +		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources());, +	private void loadBeanDefinitionsFromImportedResources(Map<String, String> importedResources) {, +		, +		HashMap<String, BeanDefinitionReader> readerInstanceCache = new HashMap<String, BeanDefinitionReader>();, +		, +		for (String resource : importedResources.keySet()) {, +			String readerClassName = importedResources.get(resource);, +			, +			if (!readerInstanceCache.containsKey(readerClassName)) {, +				try {, +					@SuppressWarnings("unchecked"), +					Class<? extends BeanDefinitionReader> readerClass =, +						(Class<? extends BeanDefinitionReader>) ClassUtils.forName(readerClassName, ClassUtils.getDefaultClassLoader());, +					BeanDefinitionReader readerInstance = readerClass.getConstructor(BeanDefinitionRegistry.class).newInstance(this.registry);, +					readerInstanceCache.put(readerClassName, readerInstance);, +				} catch (Exception ex) {, +					ReflectionUtils.handleReflectionException(ex);, +				}, +			}, +			, +			BeanDefinitionReader reader = readerInstanceCache.get(readerClassName);, +			reader.loadBeanDefinitions(importedResources.keySet().toArray(new String[]{}));, +		}, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +import org.springframework.beans.factory.support.BeanDefinitionReader;, +	private final Map<String, String> importedResources = new LinkedHashMap<String, String>();, +	public void addImportedResource(String importedResource, String readerClassName) {, +		this.importedResources.put(importedResource, readerClassName);, +	public Map<String, String> getImportedResources() {, +		return this.importedResources;, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +import java.util.HashMap;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ReflectionUtils;, +		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources());, +	private void loadBeanDefinitionsFromImportedResources(Map<String, String> importedResources) {, +		, +		HashMap<String, BeanDefinitionReader> readerInstanceCache = new HashMap<String, BeanDefinitionReader>();, +		, +		for (String resource : importedResources.keySet()) {, +			String readerClassName = importedResources.get(resource);, +			, +			if (!readerInstanceCache.containsKey(readerClassName)) {, +				try {, +					@SuppressWarnings("unchecked"), +					Class<? extends BeanDefinitionReader> readerClass =, +						(Class<? extends BeanDefinitionReader>) ClassUtils.forName(readerClassName, ClassUtils.getDefaultClassLoader());, +					BeanDefinitionReader readerInstance = readerClass.getConstructor(BeanDefinitionRegistry.class).newInstance(this.registry);, +					readerInstanceCache.put(readerClassName, readerInstance);, +				} catch (Exception ex) {, +					ReflectionUtils.handleReflectionException(ex);, +				}, +			}, +			, +			BeanDefinitionReader reader = readerInstanceCache.get(readerClassName);, +			reader.loadBeanDefinitions(importedResources.keySet().toArray(new String[]{}));, +		}, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.beans.factory.support.BeanDefinitionReader;, +import org.springframework.util.ClassUtils;, +		if (metadata.isAnnotated(ImportResource.class.getName())) {, +			String readerClassName = (String) metadata.getAnnotationAttributes(ImportResource.class.getName()).get("reader");, +			for (String importedResource : (String[]) metadata.getAnnotationAttributes(ImportResource.class.getName()).get("value")) {, +				configClass.addImportedResource(importedResource, readerClassName);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +import org.springframework.beans.factory.support.BeanDefinitionReader;, +	private final Map<String, String> importedResources = new LinkedHashMap<String, String>();, +	public void addImportedResource(String importedResource, String readerClassName) {, +		this.importedResources.put(importedResource, readerClassName);, +	public Map<String, String> getImportedResources() {, +		return this.importedResources;, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +import java.util.HashMap;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ReflectionUtils;, +		loadBeanDefinitionsFromImportedResources(configClass.getImportedResources());, +	private void loadBeanDefinitionsFromImportedResources(Map<String, String> importedResources) {, +		, +		HashMap<String, BeanDefinitionReader> readerInstanceCache = new HashMap<String, BeanDefinitionReader>();, +		, +		for (String resource : importedResources.keySet()) {, +			String readerClassName = importedResources.get(resource);]