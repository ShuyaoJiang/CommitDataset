[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/LazyConnectionDataSourceProxy.java, +				try (Connection con = obtainTargetDataSource().getConnection()) {, +				logger.debug("Could not retrieve default auto-commit and transaction isolation settings", ex);, +				if (logger.isTraceEnabled()) {, +					logger.trace("Connecting to database for operation '" + operation.getName() + "'");, +				if (logger.isTraceEnabled()) {, +					logger.trace("Using existing database connection for operation '" + operation.getName() + "'");, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/LazyConnectionDataSourceProxy.java, +				try (Connection con = obtainTargetDataSource().getConnection()) {, +				logger.debug("Could not retrieve default auto-commit and transaction isolation settings", ex);, +				if (logger.isTraceEnabled()) {, +					logger.trace("Connecting to database for operation '" + operation.getName() + "'");, +				if (logger.isTraceEnabled()) {, +					logger.trace("Using existing database connection for operation '" + operation.getName() + "'");, +++ b/spring-web/src/test/java/org/springframework/http/codec/ServerSentEventHttpMessageReaderTests.java, + * Unit tests for {@link ServerSentEventHttpMessageReader}., + *, +		assertFalse(messageReader.canRead(ResolvableType.forClass(Object.class), new MediaType("foo", "bar")));, +		assertTrue(messageReader.canRead(ResolvableType.forClass(Object.class), new MediaType("text", "event-stream")));, +		assertTrue(messageReader.canRead(ResolvableType.forClass(ServerSentEvent.class), new MediaType("foo", "bar")));, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/LazyConnectionDataSourceProxy.java, +				try (Connection con = obtainTargetDataSource().getConnection()) {, +				logger.debug("Could not retrieve default auto-commit and transaction isolation settings", ex);, +				if (logger.isTraceEnabled()) {, +					logger.trace("Connecting to database for operation '" + operation.getName() + "'");, +				if (logger.isTraceEnabled()) {, +					logger.trace("Using existing database connection for operation '" + operation.getName() + "'");, +++ b/spring-web/src/test/java/org/springframework/http/codec/ServerSentEventHttpMessageReaderTests.java, + * Unit tests for {@link ServerSentEventHttpMessageReader}., + *, +		assertFalse(messageReader.canRead(ResolvableType.forClass(Object.class), new MediaType("foo", "bar")));, +		assertTrue(messageReader.canRead(ResolvableType.forClass(Object.class), new MediaType("text", "event-stream")));, +		assertTrue(messageReader.canRead(ResolvableType.forClass(ServerSentEvent.class), new MediaType("foo", "bar")));, +++ b/spring-web/src/test/java/org/springframework/http/codec/ServerSentEventHttpMessageWriterTests.java, + *, +	private <T> void testWrite(, +			Publisher<T> source, MediaType mediaType, MockServerHttpResponse response, Class<T> clazz) {]