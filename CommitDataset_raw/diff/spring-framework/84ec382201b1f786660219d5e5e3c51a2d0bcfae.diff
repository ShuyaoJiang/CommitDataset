[+++ b/spring-core/src/main/java/org/springframework/util/xml/AbstractXMLEventReader.java, + * Copyright 2002-2018 the original author or authors., + * @author Juergen Hoeller, +			throw new NoSuchElementException(ex.getMessage());, +	 * This implementation throws an {@code IllegalArgumentException} for any property., +	 * @throws IllegalArgumentException when called, +	 * Check if the reader is closed, and throws a {@code XMLStreamException} if so., +		if (this.closed) {, +++ b/spring-core/src/main/java/org/springframework/util/xml/AbstractXMLEventReader.java, + * Copyright 2002-2018 the original author or authors., + * @author Juergen Hoeller, +			throw new NoSuchElementException(ex.getMessage());, +	 * This implementation throws an {@code IllegalArgumentException} for any property., +	 * @throws IllegalArgumentException when called, +	 * Check if the reader is closed, and throws a {@code XMLStreamException} if so., +		if (this.closed) {, +++ b/spring-core/src/main/java/org/springframework/util/xml/ListBasedXMLEventReader.java, +import javax.xml.stream.XMLStreamConstants;, +import javax.xml.stream.XMLStreamException;, +import javax.xml.stream.events.Characters;, + * @author Juergen Hoeller, +	@Nullable, +	private XMLEvent currentEvent;, +, +		return (this.cursor < this.events.size());, +		if (hasNext()) {, +			this.currentEvent = this.events.get(this.cursor);, +			this.cursor++;, +			return this.currentEvent;, +		if (hasNext()) {, +	public String getElementText() throws XMLStreamException {, +		checkIfClosed();, +		if (this.currentEvent == null || !this.currentEvent.isStartElement()) {, +			throw new XMLStreamException("Not at START_ELEMENT: " + this.currentEvent);, +		}, +, +		StringBuilder builder = new StringBuilder();, +		while (true) {, +			XMLEvent event = nextEvent();, +			if (event.isEndElement()) {, +				break;, +			}, +			else if (!event.isCharacters()) {, +				throw new XMLStreamException("Unexpected non-text event: " + event);, +			}, +			Characters characters = event.asCharacters();, +			if (!characters.isIgnorableWhiteSpace()) {, +				builder.append(event.asCharacters().getData());, +			}, +		}, +		return builder.toString();, +	}, +, +	@Override, +	@Nullable, +	public XMLEvent nextTag() throws XMLStreamException {, +		checkIfClosed();, +, +		while (true) {, +			XMLEvent event = nextEvent();, +			switch (event.getEventType()) {, +				case XMLStreamConstants.START_ELEMENT:, +				case XMLStreamConstants.END_ELEMENT:, +					return event;, +				case XMLStreamConstants.END_DOCUMENT:, +					return null;, +				case XMLStreamConstants.SPACE:, +				case XMLStreamConstants.COMMENT:, +				case XMLStreamConstants.PROCESSING_INSTRUCTION:, +					continue;, +				case XMLStreamConstants.CDATA:, +				case XMLStreamConstants.CHARACTERS:, +					if (!event.asCharacters().isWhiteSpace()) {, +						throw new XMLStreamException(, +								"Non-ignorable whitespace CDATA or CHARACTERS event: " + event);, +					}, +					break;, +				default:, +					throw new XMLStreamException("Expected START_ELEMENT or END_ELEMENT: " + event);, +			}, +		}, +	}, +, +	@Override, +++ b/spring-core/src/main/java/org/springframework/util/xml/AbstractXMLEventReader.java, + * Copyright 2002-2018 the original author or authors., + * @author Juergen Hoeller, +			throw new NoSuchElementException(ex.getMessage());, +	 * This implementation throws an {@code IllegalArgumentException} for any property., +	 * @throws IllegalArgumentException when called, +	 * Check if the reader is closed, and throws a {@code XMLStreamException} if so., +		if (this.closed) {, +++ b/spring-core/src/main/java/org/springframework/util/xml/ListBasedXMLEventReader.java, +import javax.xml.stream.XMLStreamConstants;, +import javax.xml.stream.XMLStreamException;, +import javax.xml.stream.events.Characters;, + * @author Juergen Hoeller, +	@Nullable, +	private XMLEvent currentEvent;, +]