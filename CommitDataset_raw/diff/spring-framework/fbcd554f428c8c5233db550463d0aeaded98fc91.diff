[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java, +		// CoreSubscriber<T> methods (we're the subscriber to the write source).., +		public final void onSubscribe(Subscription s) {, +			if (Operators.validate(this.subscription, s)) {, +				this.subscription = s;, +				this.completionSubscriber.onSubscribe(this);, +				s.request(1);, +		private Subscriber<? super T> requiredWriteSubscriber() {, +			Assert.state(this.writeSubscriber != null, "No write subscriber");, +			return this.writeSubscriber;, +		public final void onError(Throwable ex) {, +			if (this.readyToWrite) {, +				requiredWriteSubscriber().onError(ex);, +				return;, +			}, +				if (this.readyToWrite) {, +					requiredWriteSubscriber().onError(ex);, +				}, +				else if (this.beforeFirstEmission) {, +					this.beforeFirstEmission = false;, +					this.completionSubscriber.onError(ex);, +					this.error = ex;, +		@Override, +		public final void onComplete() {, +			if (this.readyToWrite) {, +				return;, +			synchronized (this) {, +				if (this.readyToWrite) {, +					requiredWriteSubscriber().onComplete();, +				else if (this.beforeFirstEmission) {, +					this.completed = true;, +					this.beforeFirstEmission = false;, +					writeFunction.apply(this).subscribe(new DownstreamBridge(this.completionSubscriber));, +				}, +				else {, +					this.completed = true;, +				}, +			}, +		}, +, +		@Override, +		public Context currentContext() {, +			return this.completionSubscriber.currentContext();, +		}, +, +, +		// Subscription methods (we're the subscription to completion~ and writeSubscriber).., +		private boolean emitCachedSignals() {, +			if (this.item != null) {, +				requiredWriteSubscriber().onNext(this.item);, +			}, +			if (this.error != null) {, +				requiredWriteSubscriber().onError(this.error);, +				return true;, +			}, +			if (this.completed) {, +				requiredWriteSubscriber().onComplete();, +				return true;, +			}, +			return false;, +		}, +, +		@Override, +		public void cancel() {, +			Subscription s = this.subscription;, +			if (s != null) {, +				this.subscription = null;, +				s.cancel();, +			}, +		}, +, +, +		// Publisher<T> methods (we're the Publisher to the write subscriber)..., +, +		@Override, +		public void subscribe(Subscriber<? super T> writeSubscriber) {, +			synchronized (this) {, +				Assert.state(this.writeSubscriber == null, "Only one write subscriber supported");, +				this.writeSubscriber = writeSubscriber;, +				if (this.error != null || this.completed) {, +					this.writeSubscriber.onSubscribe(Operators.emptySubscription());, +					emitCachedSignals();, +				}, +				else {, +					this.writeSubscriber.onSubscribe(this);, +				}, +			}]