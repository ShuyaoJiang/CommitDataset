[+++ b/org.springframework.core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, + * <p>Concrete subclasses differ primarily on which {@link PropertySource} objects they, + * add by default. {@code AbstractEnvironment} adds none. Subclasses should contribute, + * property sources through the protected {@link #customizePropertySources()} hook, while, + * clients should customize using {@link ConfigurableEnvironment#getPropertySources()} and, + * working against the {@link MutablePropertySources} API. See, + * {@link ConfigurableEnvironment} Javadoc for usage examples., + *, + * @see ConfigurableEnvironment, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, + * <p>Concrete subclasses differ primarily on which {@link PropertySource} objects they, + * add by default. {@code AbstractEnvironment} adds none. Subclasses should contribute, + * property sources through the protected {@link #customizePropertySources()} hook, while, + * clients should customize using {@link ConfigurableEnvironment#getPropertySources()} and, + * working against the {@link MutablePropertySources} API. See, + * {@link ConfigurableEnvironment} Javadoc for usage examples., + *, + * @see ConfigurableEnvironment, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/ConfigurableEnvironment.java, + * Provides facilities for setting active and default profiles and manipulating underlying, + * property sources. Allows clients to set and validate required properties, customize the, + * conversion service and more through the {@link ConfigurablePropertyResolver}, + * superinterface., + *, + * <h2>Manipulating property sources</h2>, + * <p>Property sources may be removed, reordered, or replaced; and additional, + * property sources may be added using the {@link MutablePropertySources}, + * instance returned from {@link #getPropertySources()}. The following examples, + * are against the {@link StandardEnvironment} implementation of, + * {@code ConfigurableEnvironment}, but are generally applicable to any implementation,, + * though particular default property sources may differ., + *, + * <h4>Example: adding a new property source with highest search priority</h4>, + * <pre class="code">, + *   ConfigurableEnvironment environment = new StandardEnvironment();, + *   MutablePropertySources propertySources = environment.getPropertySources();, + *   Map<String, String> myMap = new HashMap<String, String>();, + *   myMap.put("xyz", "myValue");, + *   propertySources.addFirst(new MapPropertySource("MY_MAP", myMap));, + * </pre>, + *, + * <h4>Example: removing the default system properties property source</h4>, + * <pre class="code">, + *   MutablePropertySources propertySources = environment.getPropertySources();, + *   propertySources.remove(StandardEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME), + * </pre>, + *, + * <h4>Example: mocking the system environment for testing purposes</h4>, + * <pre class="code">, + *   MutablePropertySources propertySources = environment.getPropertySources();, + *   MockPropertySource mockEnvVars = new MockPropertySource().withProperty("xyz", "myValue");, + *   propertySources.replace(StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, mockEnvVars);, + * </pre>, + *, + * When an {@link Environment} is being used by an ApplicationContext, it is important, + * that any such PropertySource manipulations be performed <em>before</em> the context's, + * {@link org.springframework.context.support.AbstractApplicationContext#refresh(), + * refresh()} method is called. This ensures that all property sources are available, + * during the container bootstrap process, including use by, + * {@linkplain org.springframework.context.support.PropertySourcesPlaceholderConfigurer, + * property placeholder configurers}., + *, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, + * <p>Concrete subclasses differ primarily on which {@link PropertySource} objects they, + * add by default. {@code AbstractEnvironment} adds none. Subclasses should contribute, + * property sources through the protected {@link #customizePropertySources()} hook, while, + * clients should customize using {@link ConfigurableEnvironment#getPropertySources()} and, + * working against the {@link MutablePropertySources} API. See, + * {@link ConfigurableEnvironment} Javadoc for usage examples., + *, + * @see ConfigurableEnvironment, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/ConfigurableEnvironment.java, + * Provides facilities for setting active and default profiles and manipulating underlying, + * property sources. Allows clients to set and validate required properties, customize the, + * conversion service and more through the {@link ConfigurablePropertyResolver}, + * superinterface., + *, + * <h2>Manipulating property sources</h2>, + * <p>Property sources may be removed, reordered, or replaced; and additional, + * property sources may be added using the {@link MutablePropertySources}, + * instance returned from {@link #getPropertySources()}. The following examples, + * are against the {@link StandardEnvironment} implementation of, + * {@code ConfigurableEnvironment}, but are generally applicable to any implementation,, + * though particular default property sources may differ., + *, + * <h4>Example: adding a new property source with highest search priority</h4>, + * <pre class="code">, + *   ConfigurableEnvironment environment = new StandardEnvironment();, + *   MutablePropertySources propertySources = environment.getPropertySources();, + *   Map<String, String> myMap = new HashMap<String, String>();, + *   myMap.put("xyz", "myValue");, + *   propertySources.addFirst(new MapPropertySource("MY_MAP", myMap));, + * </pre>, + *, + * <h4>Example: removing the default system properties property source</h4>, + * <pre class="code">, + *   MutablePropertySources propertySources = environment.getPropertySources();, + *   propertySources.remove(StandardEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME), + * </pre>, + *]