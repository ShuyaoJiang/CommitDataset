[+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +			if (!StringUtils.hasText(path)) {, +				return;, +			}, +			int startIndex = path.indexOf("{/");, +			while (startIndex != -1) {, +				String pathToAdd = path.substring(0, startIndex);, +				addPathInternal(pathToAdd);, +, +				int endIndex = path.indexOf("}", startIndex);, +				String pathSegmentToAdd = "{" + path.substring(startIndex + 2, endIndex) + "}";, +				addPathSegments(pathSegmentToAdd);, +, +				path = (endIndex >= path.length()) ? "" : path.substring(endIndex + 1);, +				startIndex = path.indexOf("{/");, +			}, +			addPathInternal(path);, +		}, +, +		private void addPathInternal(String path) {, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +			if (!StringUtils.hasText(path)) {, +				return;, +			}, +			int startIndex = path.indexOf("{/");, +			while (startIndex != -1) {, +				String pathToAdd = path.substring(0, startIndex);, +				addPathInternal(pathToAdd);, +, +				int endIndex = path.indexOf("}", startIndex);, +				String pathSegmentToAdd = "{" + path.substring(startIndex + 2, endIndex) + "}";, +				addPathSegments(pathSegmentToAdd);, +, +				path = (endIndex >= path.length()) ? "" : path.substring(endIndex + 1);, +				startIndex = path.indexOf("{/");, +			}, +			addPathInternal(path);, +		}, +, +		private void addPathInternal(String path) {, +++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java, +	//SPR-12750, +, +	@Test, +	public void fromUriStringWithVariablesRfc6570() {, +		String url = "http://example.com/part1/{/part2}/{var1}/url/{/urlvar}/";, +		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(url);, +		UriComponents uriComponents = builder.build().expand("part/2", "var/1", "url/var").encode();, +		assertEquals("/part1/part%2F2/var/1/url/url%2Fvar/", uriComponents.getPath());, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +			if (!StringUtils.hasText(path)) {, +				return;, +			}, +			int startIndex = path.indexOf("{/");, +			while (startIndex != -1) {, +				String pathToAdd = path.substring(0, startIndex);, +				addPathInternal(pathToAdd);, +, +				int endIndex = path.indexOf("}", startIndex);, +				String pathSegmentToAdd = "{" + path.substring(startIndex + 2, endIndex) + "}";, +				addPathSegments(pathSegmentToAdd);, +, +				path = (endIndex >= path.length()) ? "" : path.substring(endIndex + 1);, +				startIndex = path.indexOf("{/");, +			}, +			addPathInternal(path);, +		}, +, +		private void addPathInternal(String path) {, +++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java, +	//SPR-12750, +, +	@Test, +	public void fromUriStringWithVariablesRfc6570() {, +		String url = "http://example.com/part1/{/part2}/{var1}/url/{/urlvar}/";, +		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(url);, +		UriComponents uriComponents = builder.build().expand("part/2", "var/1", "url/var").encode();, +		assertEquals("/part1/part%2F2/var/1/url/url%2Fvar/", uriComponents.getPath());, +	}, +, +++ b/spring-web/src/test/java/org/springframework/web/util/UriTemplateTests.java, + * Copyright 2002-2015 the original author or authors., +	//SPR-12750, +, +	@Test, +	public void expandMapForRFC6570() throws Exception {, +		Map<String, String> uriVariables = new HashMap<String, String>(2);, +		uriVariables.put("hotel", "1");, +		uriVariables.put("publicpath", "pics/logo.png");, +		uriVariables.put("scale", "150x150");, +		UriTemplate template = new UriTemplate("/hotels/{hotel}/pic/{/publicpath}/size/{scale}");, +		URI result = template.expand(uriVariables);, +		assertEquals("Invalid expanded template", new URI("/hotels/1/pic/pics%2Flogo.png/size/150x150"), result);, +	}, +]