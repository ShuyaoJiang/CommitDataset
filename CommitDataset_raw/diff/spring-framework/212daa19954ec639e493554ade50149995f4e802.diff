[+++ b/org.springframework.web/src/main/java/org/springframework/http/converter/json/MappingJacksonHttpMessageConverter.java, +		JavaType javaType = getJavaType(clazz);, +	/**, +	 * Returns the Jackson {@link JavaType} for the specific class., +	 *, +	 * <p>Default implementation returns {@link TypeFactory#type(java.lang.reflect.Type)}, but this can be overridden, +	 * in subclasses, to allow for custom generic collection handling. For instance:, +	 * <pre class="code">, +	 * protected JavaType getJavaType(Class&lt;?&gt; clazz) {, +	 *   if (List.class.isAssignableFrom(clazz)) {, +	 *     return TypeFactory.collectionType(ArrayList.class, MyBean.class);, +	 *   } else {, +	 *     return super.getJavaType(clazz);, +	 *   }, +	 * }, +	 * </pre>, +	 *, +	 * @param clazz the class to return the java type for, +	 * @return the java type, +	 */, +	protected JavaType getJavaType(Class<?> clazz) {, +		return TypeFactory.type(clazz);, +	}, +, +		JavaType javaType = getJavaType(clazz);, +		return this.objectMapper.readValue(inputMessage.getBody(), javaType);, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/json/MappingJacksonHttpMessageConverter.java, +		JavaType javaType = getJavaType(clazz);, +	/**, +	 * Returns the Jackson {@link JavaType} for the specific class., +	 *, +	 * <p>Default implementation returns {@link TypeFactory#type(java.lang.reflect.Type)}, but this can be overridden, +	 * in subclasses, to allow for custom generic collection handling. For instance:, +	 * <pre class="code">, +	 * protected JavaType getJavaType(Class&lt;?&gt; clazz) {, +	 *   if (List.class.isAssignableFrom(clazz)) {, +	 *     return TypeFactory.collectionType(ArrayList.class, MyBean.class);, +	 *   } else {, +	 *     return super.getJavaType(clazz);, +	 *   }, +	 * }, +	 * </pre>, +	 *, +	 * @param clazz the class to return the java type for, +	 * @return the java type, +	 */, +	protected JavaType getJavaType(Class<?> clazz) {, +		return TypeFactory.type(clazz);, +	}, +, +		JavaType javaType = getJavaType(clazz);, +		return this.objectMapper.readValue(inputMessage.getBody(), javaType);, +++ b/org.springframework.web/src/test/java/org/springframework/http/converter/json/MappingJacksonHttpMessageConverterTests.java, +import org.codehaus.jackson.map.type.TypeFactory;, +import org.codehaus.jackson.type.JavaType;, +	public void readGenerics() throws IOException {, +		converter = new MappingJacksonHttpMessageConverter() {, +			@Override, +			protected JavaType getJavaType(Class<?> clazz) {, +				if (List.class.isAssignableFrom(clazz)) {, +					return TypeFactory.collectionType(ArrayList.class, MyBean.class);, +				}, +				else {, +					return super.getJavaType(clazz);, +				}, +			}, +		};, +		String body =, +				"[{\"bytes\":\"AQI=\",\"array\":[\"Foo\",\"Bar\"],\"number\":42,\"string\":\"Foo\",\"bool\":true,\"fraction\":42.0}]";, +		MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes("UTF-8"));, +		inputMessage.getHeaders().setContentType(new MediaType("application", "json"));, +, +		List<MyBean> results = (List<MyBean>) converter.read(List.class, inputMessage);, +		assertEquals(1, results.size());, +		MyBean result = results.get(0);, +		assertEquals("Foo", result.getString());, +		assertEquals(42, result.getNumber());, +		assertEquals(42F, result.getFraction(), 0F);, +		assertArrayEquals(new String[]{"Foo", "Bar"}, result.getArray());, +		assertTrue(result.isBool());, +		assertArrayEquals(new byte[]{0x1, 0x2}, result.getBytes());, +	}, +, +	@Test, +	@SuppressWarnings("unchecked")]