[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseBodyResultHandler.java, +	 * @param conversionService for converting other reactive types (e.g., +	 * rx.Observable, rx.Single, etc.) to Flux or Mono, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseBodyResultHandler.java, +	 * @param conversionService for converting other reactive types (e.g., +	 * rx.Observable, rx.Single, etc.) to Flux or Mono, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.reactive.result.view;, +, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import java.util.Locale;, +import java.util.Optional;, +, +import reactor.core.publisher.Flux;, +import reactor.core.publisher.Mono;, +, +import org.springframework.core.Ordered;, +import org.springframework.core.ResolvableType;, +import org.springframework.core.annotation.AnnotationAwareOrderComparator;, +import org.springframework.core.convert.ConversionService;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.util.Assert;, +import org.springframework.web.reactive.HandlerResult;, +import org.springframework.web.reactive.HandlerResultHandler;, +import org.springframework.web.server.ServerWebExchange;, +, +, +/**, + * {@code HandlerResultHandler} that performs view resolution by resolving a, + * {@link View} instance first and then rendering the response with it., + * If the return value is a String, the configured {@link ViewResolver}s will, + * be consulted to resolve that to a {@link View} instance., + *, + * <p>This result handler should be ordered late relative to other result, + * handlers. See {@link #setOrder(int)} for more details., + *, + * @author Rossen Stoyanchev, + */, +public class ViewResolutionResultHandler implements HandlerResultHandler, Ordered {, +, +	private final List<ViewResolver> viewResolvers = new ArrayList<>(4);, +, +	private final ConversionService conversionService;, +, +	private int order = Ordered.LOWEST_PRECEDENCE;, +, +, +	/**, +	 * Constructor with {@code ViewResolver}s tand a {@code ConversionService}., +	 * @param resolvers the resolver to use, +	 * @param service for converting other reactive types (e.g. rx.Single) to Mono, +	 */, +	public ViewResolutionResultHandler(List<ViewResolver> resolvers, ConversionService service) {, +		Assert.notEmpty(resolvers, "At least one ViewResolver is required.");, +		Assert.notNull(service, "'conversionService' is required.");, +		this.viewResolvers.addAll(resolvers);, +		AnnotationAwareOrderComparator.sort(this.viewResolvers);, +		this.conversionService = service;, +	}, +, +, +	/**, +	 * Return a read-only list of view resolvers., +	 */, +	public List<ViewResolver> getViewResolvers() {, +		return Collections.unmodifiableList(this.viewResolvers);, +	}, +, +	/**, +	 * Set the order for this result handler relative to others., +	 * <p>By default this is set to {@link Ordered#LOWEST_PRECEDENCE} and, +	 * generally needs to be used late in the order since it interprets any, +	 * String return value as a view name while others may interpret the same, +	 * otherwise based on annotations (e.g. for {@code @ResponseBody})., +	 * @param order the order, +	 */, +	public void setOrder(int order) {, +		this.order = order;, +	}, +, +	@Override, +	public int getOrder() {, +		return this.order;]