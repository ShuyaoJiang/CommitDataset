[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJPrecedenceComparator.java, + * Copyright 2002-2013 the original author or authors., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJPrecedenceComparator.java, + * Copyright 2002-2013 the original author or authors., +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/autoproxy/AspectJPrecedenceComparatorTests.java, + * Copyright 2002-2013 the original author or authors., +, +import static org.junit.Assert.*;, +, +public class AspectJPrecedenceComparatorTests {, +		assertEquals("advisor1 and advisor2 not comparable", 1, this.comparator.compare(advisor1, advisor2));, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJPrecedenceComparator.java, + * Copyright 2002-2013 the original author or authors., +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/autoproxy/AspectJPrecedenceComparatorTests.java, + * Copyright 2002-2013 the original author or authors., +, +import static org.junit.Assert.*;, +, +public class AspectJPrecedenceComparatorTests {, +		assertEquals("advisor1 and advisor2 not comparable", 1, this.comparator.compare(advisor1, advisor2));, +++ b/spring-context/src/test/java/org/springframework/aop/framework/AbstractAopProxyTests.java, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJPrecedenceComparator.java, + * Copyright 2002-2013 the original author or authors., +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/autoproxy/AspectJPrecedenceComparatorTests.java, + * Copyright 2002-2013 the original author or authors., +, +import static org.junit.Assert.*;, +, +public class AspectJPrecedenceComparatorTests {, +		assertEquals("advisor1 and advisor2 not comparable", 1, this.comparator.compare(advisor1, advisor2));, +++ b/spring-context/src/test/java/org/springframework/aop/framework/AbstractAopProxyTests.java, +++ b/spring-context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests.java, +	public @Test void testCollectionsReferredToAsRefLocals() throws Exception {, +	public @Test void testRefToSeparatePrototypeInstances() throws Exception {, +	public @Test void testRefToSingleton() throws Exception {, +	public @Test void testInnerBeans() throws IOException {, +	public @Test void testInnerBeansWithoutDestroy() {, +	public @Test void testFailsOnInnerBean() {, +	public @Test void testInheritanceFromParentFactoryPrototype() throws Exception {, +	public @Test void testInheritanceWithDifferentClass() throws Exception {, +	public @Test void testInheritanceWithClass() throws Exception {, +	public @Test void testPrototypeInheritanceFromParentFactoryPrototype() throws Exception {, +	public @Test void testPrototypeInheritanceFromParentFactorySingleton() throws Exception {, +	public @Test void testAutowireModeNotInherited() {, +	public @Test void testAbstractParentBeans() {, +	public @Test void testDependenciesMaterializeThis() throws Exception {, +	public @Test void testChildOverridesParentBean() throws Exception {, +	public @Test void testBogusParentageFromParentFactory() throws Exception {, +	public @Test void testSingletonInheritsFromParentFactoryPrototype() throws Exception {, +	public @Test void testSingletonFromParent() {, +	public @Test void testNestedPropertyValue() {, +	public @Test void testCircularReferences() {, +	public @Test void testCircularReferenceWithFactoryBeanFirst() {, +	public @Test void testCircularReferenceWithTwoFactoryBeans() {, +	public @Test void testCircularReferencesWithNotAllowed() {, +	public @Test void testCircularReferencesWithWrapping() {, +	public @Test void testCircularReferencesWithWrappingAndRawInjectionAllowed() {, +	public @Test void testFactoryReferenceCircle() {, +	public @Test void testFactoryReferenceWithDoublePrefix() {, +	public @Test void testComplexFactoryReferenceCircle() {, +	public @Test void testNoSuchFactoryBeanMethod() {, +	public @Test void testInitMethodIsInvoked() throws Exception {, +	public @Test void testInitMethodThrowsException() {, +	public @Test void testNoSuchInitMethod() throws Exception {, +	public @Test void testInitializingBeanAndInitMethod() throws Exception {, +	public @Test void testInitializingBeanAndSameInitMethod() throws Exception {, +	public @Test void testDefaultLazyInit() throws Exception {, +	public @Test void testNoSuchXmlFile() throws Exception {, +	public @Test void testInvalidXmlFile() throws Exception {, +	public @Test void testUnsatisfiedObjectDependencyCheck() throws Exception {, +	public @Test void testUnsatisfiedSimpleDependencyCheck() throws Exception {, +	public @Test void testSatisfiedObjectDependencyCheck() throws Exception {, +	public @Test void testSatisfiedSimpleDependencyCheck() throws Exception {, +	public @Test void testUnsatisfiedAllDependencyCheck() throws Exception {, +	public @Test void testSatisfiedAllDependencyCheck() throws Exception {, +	public @Test void testAutowire() throws Exception {, +	public @Test void testAutowireWithParent() throws Exception {, +	public @Test void testAutowireWithDefault() throws Exception {, +	public @Test void testAutowireByConstructor() throws Exception {, +	public @Test void testAutowireByConstructorWithSimpleValues() throws Exception {, +	public @Test void testRelatedCausesFromConstructorResolution() {, +	public @Test void testConstructorArgResolution() {, +	public @Test void testPrototypeWithExplicitArguments() {, +	public @Test void testConstructorArgWithSingleMatch() {, +	public @Test void testThrowsExceptionOnTooManyArguments() throws Exception {, +	public @Test void testThrowsExceptionOnAmbiguousResolution() throws Exception {, +	public @Test void testDependsOn() {, +	public @Test void testDependsOnInInnerBean() {, +	public @Test void testDependenciesThroughConstructorArguments() {, +	public @Test void testDependenciesThroughConstructorArgumentAutowiring() {, +	public @Test void testDependenciesThroughConstructorArgumentsInInnerBean() {, +	public @Test void testDependenciesThroughProperties() {, +	public @Test void testDependenciesThroughPropertiesWithInTheMiddle() {, +	public @Test void testDependenciesThroughPropertyAutowiringByName() {, +	public @Test void testDependenciesThroughPropertyAutowiringByType() {, +	public @Test void testDependenciesThroughPropertiesInInnerBean() {, +	public @Test void testClassNotFoundWithDefaultBeanClassLoader() {, +	public @Test void testClassNotFoundWithNoBeanClassLoader() {, +	public @Test void testResourceAndInputStream() throws IOException {, +	public @Test void testClassPathResourceWithImport() {]