[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/StompWebSocketEndpointRegistration.java, +import org.springframework.web.socket.server.HandshakeInterceptor;, +	/**, +	 * Configure the HandshakeInterceptor's to use., +	 */, +	StompWebSocketEndpointRegistration addInterceptors(HandshakeInterceptor... interceptors);, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/StompWebSocketEndpointRegistration.java, +import org.springframework.web.socket.server.HandshakeInterceptor;, +	/**, +	 * Configure the HandshakeInterceptor's to use., +	 */, +	StompWebSocketEndpointRegistration addInterceptors(HandshakeInterceptor... interceptors);, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebMvcStompWebSocketEndpointRegistration.java, +import org.springframework.web.socket.server.HandshakeInterceptor;, +import java.util.Arrays;, +, +	private HandshakeInterceptor[] interceptors;, +, +	@Override, +	public StompWebSocketEndpointRegistration addInterceptors(HandshakeInterceptor... interceptors) {, +		this.interceptors = interceptors;, +		return this;, +	}, +, +	protected HandshakeInterceptor[] getInterceptors() {, +		return this.interceptors;, +	}, +, +		if (this.interceptors != null) {, +			this.registration.setInterceptors(this.interceptors);, +		}, +				WebSocketHttpRequestHandler handler;, +				if (this.handshakeHandler != null) {, +					handler = new WebSocketHttpRequestHandler(this.webSocketHandler, this.handshakeHandler);, +				}, +				else {, +					handler = new WebSocketHttpRequestHandler(this.webSocketHandler);, +				}, +				if (this.interceptors != null) {, +					handler.setHandshakeInterceptors(Arrays.asList(this.interceptors));, +				}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/StompWebSocketEndpointRegistration.java, +import org.springframework.web.socket.server.HandshakeInterceptor;, +	/**, +	 * Configure the HandshakeInterceptor's to use., +	 */, +	StompWebSocketEndpointRegistration addInterceptors(HandshakeInterceptor... interceptors);, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebMvcStompWebSocketEndpointRegistration.java, +import org.springframework.web.socket.server.HandshakeInterceptor;, +import java.util.Arrays;, +, +	private HandshakeInterceptor[] interceptors;, +, +	@Override, +	public StompWebSocketEndpointRegistration addInterceptors(HandshakeInterceptor... interceptors) {, +		this.interceptors = interceptors;, +		return this;, +	}, +, +	protected HandshakeInterceptor[] getInterceptors() {, +		return this.interceptors;, +	}, +, +		if (this.interceptors != null) {, +			this.registration.setInterceptors(this.interceptors);, +		}, +				WebSocketHttpRequestHandler handler;, +				if (this.handshakeHandler != null) {, +					handler = new WebSocketHttpRequestHandler(this.webSocketHandler, this.handshakeHandler);, +				}, +				else {, +					handler = new WebSocketHttpRequestHandler(this.webSocketHandler);, +				}, +				if (this.interceptors != null) {, +					handler.setHandshakeInterceptors(Arrays.asList(this.interceptors));, +				}, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/config/annotation/WebMvcStompWebSocketEndpointRegistrationTests.java, +import org.springframework.web.socket.server.HandshakeInterceptor;, +import org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor;, +import static org.junit.Assert.assertArrayEquals;, +import static org.junit.Assert.assertEquals;, +	public void handshakeHandlerAndInterceptors() {, +		HttpSessionHandshakeInterceptor interceptor = new HttpSessionHandshakeInterceptor();, +, +		registration.addInterceptors(interceptor);, +		assertEquals(Arrays.asList(interceptor), requestHandler.getHandshakeInterceptors());, +	public void handshakeHandlerAndInterceptorsWithSockJsService() {, +		HttpSessionHandshakeInterceptor interceptor = new HttpSessionHandshakeInterceptor();, +, +		registration.addInterceptors(interceptor);, +		assertEquals(Arrays.asList(interceptor), sockJsService.getHandshakeInterceptors());]