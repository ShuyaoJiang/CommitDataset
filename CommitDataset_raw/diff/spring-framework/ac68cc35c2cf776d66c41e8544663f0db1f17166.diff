[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistration.java, +import org.springframework.core.Ordered;, +public class InterceptorRegistration implements Ordered {, +	private int order = 0;, +	/**, +	 * An order position to be used, default is 0., +	 */, +	public InterceptorRegistration order(int order){, +		this.order = order;, +		return this;, +	}, +, +	@Override, +	public int getOrder() {, +		return order;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistration.java, +import org.springframework.core.Ordered;, +public class InterceptorRegistration implements Ordered {, +	private int order = 0;, +	/**, +	 * An order position to be used, default is 0., +	 */, +	public InterceptorRegistration order(int order){, +		this.order = order;, +		return this;, +	}, +, +	@Override, +	public int getOrder() {, +		return order;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistry.java, + * Copyright 2002-2017 the original author or authors., +import java.util.stream.Collectors;, +import org.springframework.core.OrderComparator;, +		return this.registrations.stream(), +				.sorted(OrderComparator.INSTANCE), +				.map(InterceptorRegistration::getInterceptor), +				.collect(Collectors.toList());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistration.java, +import org.springframework.core.Ordered;, +public class InterceptorRegistration implements Ordered {, +	private int order = 0;, +	/**, +	 * An order position to be used, default is 0., +	 */, +	public InterceptorRegistration order(int order){, +		this.order = order;, +		return this;, +	}, +, +	@Override, +	public int getOrder() {, +		return order;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistry.java, + * Copyright 2002-2017 the original author or authors., +import java.util.stream.Collectors;, +import org.springframework.core.OrderComparator;, +		return this.registrations.stream(), +				.sorted(OrderComparator.INSTANCE), +				.map(InterceptorRegistration::getInterceptor), +				.collect(Collectors.toList());, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/InterceptorRegistryTests.java, +import org.springframework.core.Ordered;, + * @author Eko Kurniawan Khannedy, +	@Test, +	public void orderedInterceptors() throws Exception {, +		registry.addInterceptor(interceptor1).order(Ordered.LOWEST_PRECEDENCE);, +		registry.addInterceptor(interceptor2).order(Ordered.HIGHEST_PRECEDENCE);, +, +		List<Object> interceptors = registry.getInterceptors();, +		assertEquals(2, interceptors.size());, +, +		assertSame(interceptor2, interceptors.get(0));, +		assertSame(interceptor1, interceptors.get(1));, +	}, +, +	@Test, +	public void nonOrderedInterceptors() throws Exception {, +		registry.addInterceptor(interceptor1).order(0);, +		registry.addInterceptor(interceptor2).order(0);, +, +		List<Object> interceptors = registry.getInterceptors();, +		assertEquals(2, interceptors.size());, +, +		assertSame(interceptor1, interceptors.get(0));, +		assertSame(interceptor2, interceptors.get(1));, +	}]