[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/MessageMapping.java, + * Annotation for mapping a {@link Message} onto message-handling methods by matching, + * to the message destination. This annotation can also be used on the type-level in, + * which case it defines a common destination prefix or pattern for all method-level, + * annotations including method-level, + * {@link org.springframework.messaging.simp.annotation.SubscribeMapping @SubscribeMapping}, + * annotations., + * <p>, + * Handler methods which are annotated with this annotation are allowed to have, + * flexible signatures. They may have arguments of the following types, in arbitrary, + * order:, + * <ul>, + * 	<li>{@link Message} to get access to the complete message being processed.</li>, + * 	<li>{@link Payload}-annotated method arguments to extract the payload of, + * 	a message and optionally convert it using a, + * 	{@link org.springframework.messaging.support.converter.MessageConverter}., + * 	The presence of the annotation is not required since it is assumed by default, + * 	for method arguments that are not annotated.</li>, + * 	<li>{@link Header}-annotated method arguments to extract a specific, + * 	header value along with type conversion with a, + * 	{@link org.springframework.core.convert.converter.Converter} if necessary.</li>, + * 	<li>{@link Headers}-annotated argument that must also be assignable to, + * 	{@link java.util.Map} for getting access to all headers.</li>, + * 	<li>{@link org.springframework.messaging.MessageHeaders} arguments for, + * 	getting access to all headers.</li>, + * 	<li>{@link org.springframework.messaging.support.MessageHeaderAccessor} or, + * 	with STOMP over WebSocket support also sub-classes such as, + * 	{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor}, + * 	for convenient access to all method arguments.</li>, + * 	<li>{@link PathVariable}-annotated arguments for access to URI variable, + * 	values extracted from the message destination (i.e. /hotels/{hotel})., + * 	Variable values will be converted to the declared method argument type.</li>, + * 	<li>{@link java.security.Principal} method arguments are supported with, + * 	STOMP over WebSocket messages. It reflects the user logged in to the, + * 	WebSocket session on which the message was received. Regular HTTP-based, + * 	authentication (e.g. Spring Security based) can be used to secure the, + * 	HTTP handshake that initiates WebSocket sessions.</li>, + * </ul>, + * <p>, + * By default the return value is wrapped as a message and sent to the destination, + * specified with an {@link SendTo} method-level annotation., + * <p>, + * STOMP over WebSocket: an {@link SendTo} annotation is not strictly required --, + * by default the message will be sent to the same destination as the incoming, + * message but with an additional prefix ("/topic" by default). It is also possible, + * to use {@link org.springframework.messaging.simp.annotation.SendToUser} to, + * have the message directed to a specific user only if connected., + * Also the return value is converted with a, + * {@link org.springframework.messaging.support.converter.MessageConverter}., +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/MessageMapping.java, + * Annotation for mapping a {@link Message} onto message-handling methods by matching, + * to the message destination. This annotation can also be used on the type-level in, + * which case it defines a common destination prefix or pattern for all method-level, + * annotations including method-level, + * {@link org.springframework.messaging.simp.annotation.SubscribeMapping @SubscribeMapping}, + * annotations., + * <p>, + * Handler methods which are annotated with this annotation are allowed to have, + * flexible signatures. They may have arguments of the following types, in arbitrary, + * order:, + * <ul>, + * 	<li>{@link Message} to get access to the complete message being processed.</li>, + * 	<li>{@link Payload}-annotated method arguments to extract the payload of, + * 	a message and optionally convert it using a, + * 	{@link org.springframework.messaging.support.converter.MessageConverter}., + * 	The presence of the annotation is not required since it is assumed by default, + * 	for method arguments that are not annotated.</li>, + * 	<li>{@link Header}-annotated method arguments to extract a specific, + * 	header value along with type conversion with a, + * 	{@link org.springframework.core.convert.converter.Converter} if necessary.</li>, + * 	<li>{@link Headers}-annotated argument that must also be assignable to, + * 	{@link java.util.Map} for getting access to all headers.</li>, + * 	<li>{@link org.springframework.messaging.MessageHeaders} arguments for, + * 	getting access to all headers.</li>, + * 	<li>{@link org.springframework.messaging.support.MessageHeaderAccessor} or, + * 	with STOMP over WebSocket support also sub-classes such as, + * 	{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor}, + * 	for convenient access to all method arguments.</li>, + * 	<li>{@link PathVariable}-annotated arguments for access to URI variable, + * 	values extracted from the message destination (i.e. /hotels/{hotel})., + * 	Variable values will be converted to the declared method argument type.</li>, + * 	<li>{@link java.security.Principal} method arguments are supported with, + * 	STOMP over WebSocket messages. It reflects the user logged in to the, + * 	WebSocket session on which the message was received. Regular HTTP-based, + * 	authentication (e.g. Spring Security based) can be used to secure the, + * 	HTTP handshake that initiates WebSocket sessions.</li>, + * </ul>, + * <p>, + * By default the return value is wrapped as a message and sent to the destination, + * specified with an {@link SendTo} method-level annotation., + * <p>, + * STOMP over WebSocket: an {@link SendTo} annotation is not strictly required --, + * by default the message will be sent to the same destination as the incoming, + * message but with an additional prefix ("/topic" by default). It is also possible, + * to use {@link org.springframework.messaging.simp.annotation.SendToUser} to, + * have the message directed to a specific user only if connected., + * Also the return value is converted with a, + * {@link org.springframework.messaging.support.converter.MessageConverter}., +++ /dev/null, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/MessageMapping.java]