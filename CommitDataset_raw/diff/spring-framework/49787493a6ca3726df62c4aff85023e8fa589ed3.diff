[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpRequest.java, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.util.function.IntPredicate;, +import org.springframework.core.io.buffer.PooledDataBuffer;, +			PooledByteBuffer pooledByteBuffer = this.byteBufferPool.allocate();, +			boolean release = true;, +			try {, +				ByteBuffer byteBuffer = pooledByteBuffer.getBuffer();, +, +					DataBuffer dataBuffer = this.bufferFactory.wrap(byteBuffer);, +					release = false;, +					return new UndertowDataBuffer(dataBuffer, pooledByteBuffer);, +			} finally {, +				if (release && pooledByteBuffer.isOpen()) {, +					pooledByteBuffer.close();, +				}, +			}, +		}, +, +	}, +, +	private static class UndertowDataBuffer implements PooledDataBuffer {, +, +		private final DataBuffer dataBuffer;, +, +		private final PooledByteBuffer pooledByteBuffer;, +, +		public UndertowDataBuffer(DataBuffer dataBuffer, PooledByteBuffer pooledByteBuffer) {, +			this.dataBuffer = dataBuffer;, +			this.pooledByteBuffer = pooledByteBuffer;, +		public PooledDataBuffer retain() {, +			return this;, +, +		@Override, +		public boolean release() {, +			this.pooledByteBuffer.close();, +			return this.pooledByteBuffer.isOpen();, +		}, +, +		@Override, +		public DataBufferFactory factory() {, +			return this.dataBuffer.factory();, +		}, +, +		@Override, +		public int indexOf(IntPredicate predicate, int fromIndex) {, +			return this.dataBuffer.indexOf(predicate, fromIndex);, +		}, +, +		@Override, +		public int lastIndexOf(IntPredicate predicate, int fromIndex) {, +			return this.dataBuffer.lastIndexOf(predicate, fromIndex);, +		}, +, +		@Override, +		public int readableByteCount() {, +			return this.dataBuffer.readableByteCount();, +		}, +, +		@Override, +		public int writableByteCount() {, +			return this.dataBuffer.writableByteCount();, +		}, +, +		@Override, +		public int readPosition() {, +			return this.dataBuffer.readPosition();, +		}, +, +		@Override, +		public DataBuffer readPosition(int readPosition) {, +			return this.dataBuffer.readPosition(readPosition);, +		}, +, +		@Override, +		public int writePosition() {, +			return this.dataBuffer.writePosition();, +		}, +, +		@Override, +		public DataBuffer writePosition(int writePosition) {, +			return this.dataBuffer.writePosition(writePosition);, +		}, +, +		@Override, +		public int capacity() {, +			return this.dataBuffer.capacity();, +		}, +, +		@Override, +		public DataBuffer capacity(int newCapacity) {, +			return this.dataBuffer.capacity(newCapacity);, +		}, +, +		@Override, +		public byte read() {, +			return this.dataBuffer.read();, +		}, +]