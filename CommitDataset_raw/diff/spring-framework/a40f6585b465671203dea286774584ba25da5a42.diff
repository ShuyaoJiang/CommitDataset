[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	 * The TypeDescriptors provide additional context about the source and target locations where conversion would occur, often object property locations., +	 * @param source the source object to convert (may be null), +	 * @param targetType the target type to convert to (required), +	 * @return the converted object, an instance of targetType, +	 * @throws ConversionException if a conversion exception occurred, +	 * @throws IllegalArgumentException if targetType is null, +	 */, +	<T> T convert(Object source, Class<T> targetType);, +	, +	/**, +	 * Convert the source to targetType., +	 * The TypeDescriptors provide additional context about the source and target locations where conversion will occur, often object property locations., +	 * @throws ConversionException if a conversion exception occurred, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	 * The TypeDescriptors provide additional context about the source and target locations where conversion would occur, often object property locations., +	 * @param source the source object to convert (may be null), +	 * @param targetType the target type to convert to (required), +	 * @return the converted object, an instance of targetType, +	 * @throws ConversionException if a conversion exception occurred, +	 * @throws IllegalArgumentException if targetType is null, +	 */, +	<T> T convert(Object source, Class<T> targetType);, +	, +	/**, +	 * Convert the source to targetType., +	 * The TypeDescriptors provide additional context about the source and target locations where conversion will occur, often object property locations., +	 * @throws ConversionException if a conversion exception occurred, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Use this constructor when a source or target conversion point is a constructor parameter, method parameter, or method return value. , +	 * Create a new type descriptor from a {@link Field}., +	 * Use this constructor when source or target conversion point is a field., +	 * Create a new type descriptor from a {@link Property}., +	 * Use this constructor when a source or target conversion point is a property on a Java class., +	 * Create a new type descriptor from the given type., +	 * Use this to instruct the conversion system to convert an object to a specific target type, when no type location such as a method parameter or field is available to provide additional conversion context., +	 * Generally prefer use of {@link #forObject(Object)} for constructing type descriptors from source objects, as it handles the null object case., +	 * Create a new type descriptor from a java.util.Collection type., +	 * Useful for converting to typed Collections., +	 * For example, a List&lt;String&gt; could be converted to a List&lt;EmailAddress&gt; by converting to a targetType built with this method., +	 * The method call to construct such a TypeDescriptor would look something like: collection(List.class, TypeDescriptor.valueOf(EmailAddress.class));, +	 * Create a new type descriptor from a java.util.Map type., +	 * Useful for Converting to typed Maps., +	 * For example, a Map&lt;String, String&gt; could be converted to a Map&lt;Id, EmailAddress&gt; by converting to a targetType built with this method:, +	 * The method call to construct such a TypeDescriptor would look something like: map(Map.class, TypeDescriptor.valueOf(Id.class), TypeDescriptor.valueOf(EmailAddress.class));, +	 * The type of the backing class, method parameter, field, or property described by this TypeDescriptor., +	 * Returns primitive types as-is., +	 * See {@link #getObjectType()} for a variation of this operation that resolves primitive types to their corresponding Object types if necessary., +	 * @return the type, or <code>null</code> if this is {@link TypeDescriptor#NULL}, +	 * @see #getObjectType(), +	 * Variation of {@link #getType()} that accounts for a primitive type by returning its object wrapper type., +	 * This is useful for conversion service implementations that wish to normalize to object-based types and not work with primitive types directly., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	 * The TypeDescriptors provide additional context about the source and target locations where conversion would occur, often object property locations., +	 * @param source the source object to convert (may be null), +	 * @param targetType the target type to convert to (required), +	 * @return the converted object, an instance of targetType, +	 * @throws ConversionException if a conversion exception occurred, +	 * @throws IllegalArgumentException if targetType is null, +	 */, +	<T> T convert(Object source, Class<T> targetType);, +	, +	/**, +	 * Convert the source to targetType., +	 * The TypeDescriptors provide additional context about the source and target locations where conversion will occur, often object property locations., +	 * @throws ConversionException if a conversion exception occurred, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Use this constructor when a source or target conversion point is a constructor parameter, method parameter, or method return value. , +	 * Create a new type descriptor from a {@link Field}., +	 * Use this constructor when source or target conversion point is a field., +	 * Create a new type descriptor from a {@link Property}., +	 * Use this constructor when a source or target conversion point is a property on a Java class., +	 * Create a new type descriptor from the given type., +	 * Use this to instruct the conversion system to convert an object to a specific target type, when no type location such as a method parameter or field is available to provide additional conversion context., +	 * Generally prefer use of {@link #forObject(Object)} for constructing type descriptors from source objects, as it handles the null object case., +	 * Create a new type descriptor from a java.util.Collection type., +	 * Useful for converting to typed Collections., +	 * For example, a List&lt;String&gt; could be converted to a List&lt;EmailAddress&gt; by converting to a targetType built with this method., +	 * The method call to construct such a TypeDescriptor would look something like: collection(List.class, TypeDescriptor.valueOf(EmailAddress.class));, +	 * Create a new type descriptor from a java.util.Map type., +	 * Useful for Converting to typed Maps., +	 * For example, a Map&lt;String, String&gt; could be converted to a Map&lt;Id, EmailAddress&gt; by converting to a targetType built with this method:, +	 * The method call to construct such a TypeDescriptor would look something like: map(Map.class, TypeDescriptor.valueOf(Id.class), TypeDescriptor.valueOf(EmailAddress.class));, +	 * The type of the backing class, method parameter, field, or property described by this TypeDescriptor., +	 * Returns primitive types as-is., +	 * See {@link #getObjectType()} for a variation of this operation that resolves primitive types to their corresponding Object types if necessary., +	 * @return the type, or <code>null</code> if this is {@link TypeDescriptor#NULL}, +	 * @see #getObjectType(), +	 * Variation of {@link #getType()} that accounts for a primitive type by returning its object wrapper type., +	 * This is useful for conversion service implementations that wish to normalize to object-based types and not work with primitive types directly., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +import org.springframework.core.convert.ConversionException;, +	@SuppressWarnings("unchecked"), +	public <T> T convert(Object source, Class<T> targetType) {, +		if (targetType == null) {, +			throw new IllegalArgumentException("The targetType to convert to cannot be null");, +		}		, +		return (T) convert(source, TypeDescriptor.forObject(source), TypeDescriptor.valueOf(targetType));, +	}, +]