[+++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, +	private void collectProjectDependencies(Set<ProjectDependency> projectDependencies, Project project) {, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, +	private void collectProjectDependencies(Set<ProjectDependency> projectDependencies, Project project) {, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractDependencyInjectionAspect.aj, + * Copyright 2002-2014 the original author or authors., +, +	private pointcut preConstructionCondition() :, +			leastSpecificSuperTypeConstruction() && preConstructionConfiguration();, +, +	private pointcut postConstructionCondition() :, +			mostSpecificSubTypeConstruction() && !preConstructionConfiguration();, +	 * Select least specific super type that is marked for DI, +	 * (so that injection occurs only once with pre-construction injection)., +	public abstract pointcut leastSpecificSuperTypeConstruction();, +	 * Select join points in beans to be configured prior to construction?, +	 * By default, use post-construction injection matching the default in the Configurable annotation., +	public pointcut preConstructionConfiguration() : if (false);, +	 * Select construction join points for objects to inject dependencies., +	public abstract pointcut beanConstruction(Object bean);, +	/**, +	 * Select deserialization join points for objects to inject dependencies., +	 */, +	public abstract pointcut beanDeserialization(Object bean);, +	/**, +	 * Select join points in a configurable bean., +	 */, +	public abstract pointcut inConfigurableBean();, +, +	/**, +	 * Configure the given bean., +	 */, +	public abstract void configureBean(Object bean);, +, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, +	private void collectProjectDependencies(Set<ProjectDependency> projectDependencies, Project project) {, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractDependencyInjectionAspect.aj, + * Copyright 2002-2014 the original author or authors., +, +	private pointcut preConstructionCondition() :, +			leastSpecificSuperTypeConstruction() && preConstructionConfiguration();, +, +	private pointcut postConstructionCondition() :, +			mostSpecificSubTypeConstruction() && !preConstructionConfiguration();, +	 * Select least specific super type that is marked for DI, +	 * (so that injection occurs only once with pre-construction injection)., +	public abstract pointcut leastSpecificSuperTypeConstruction();, +	 * Select join points in beans to be configured prior to construction?, +	 * By default, use post-construction injection matching the default in the Configurable annotation., +	public pointcut preConstructionConfiguration() : if (false);, +	 * Select construction join points for objects to inject dependencies., +	public abstract pointcut beanConstruction(Object bean);, +	/**, +	 * Select deserialization join points for objects to inject dependencies., +	 */, +	public abstract pointcut beanDeserialization(Object bean);, +	/**, +	 * Select join points in a configurable bean., +	 */, +	public abstract pointcut inConfigurableBean();, +, +	/**, +	 * Configure the given bean., +	 */, +	public abstract void configureBean(Object bean);, +, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractInterfaceDrivenDependencyInjectionAspect.aj, + * Copyright 2002-2014 the original author or authors., + * An aspect that injects dependency into any object whose type implements the, + * {@link ConfigurableObject} interface., + *, + * <p>This aspect supports injecting into domain objects when they are created, + * for the first time as well as upon deserialization. Subaspects need to simply, + * provide definition for the configureBean() method. This method may be, + * implemented without relying on Spring container if so desired., + *, + * <p>There are two cases that needs to be handled:, + * The minor collaboration needed by user classes (i.e., that the implementation of, + * {@code readResolve()}, if any, must be {@code public}) can be lifted as well if we, + * were to use an experimental feature in AspectJ - the {@code hasmethod()} PCD.</li>, + *, + * <p>While having type implement the {@link ConfigurableObject} interface is certainly, + * a valid choice, an alternative is to use a 'declare parents' statement another aspect, + * (a subaspect of this aspect would be a logical choice) that declares the classes that, + * need to be configured by supplying the {@link ConfigurableObject} interface., +			execution(Object ConfigurableDeserializationSupport+.readResolve()) && this(bean);, +, +	 * ConfigurableDeserializationSupport. This allows us to introduce the {@code readResolve()}, +	 * <pre class="code">, +	 * declare parents: ConfigurableObject+ Serializable+, +	declare parents: ConfigurableObject+ && Serializable+ implements ConfigurableDeserializationSupport;, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, +	private void collectProjectDependencies(Set<ProjectDependency> projectDependencies, Project project) {, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/AbstractDependencyInjectionAspect.aj, + * Copyright 2002-2014 the original author or authors., +, +	private pointcut preConstructionCondition() :, +			leastSpecificSuperTypeConstruction() && preConstructionConfiguration();, +, +	private pointcut postConstructionCondition() :]