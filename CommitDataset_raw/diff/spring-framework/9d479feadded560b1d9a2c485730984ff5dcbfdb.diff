[+++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, +, +	/**, +	 * Assign a name to this mapping., +	 * <p><b>Supported at the method and also at type level!</b>, +	 * When used on both levels, a combined name is derived by, +	 * concatenation with "#" as separator., +	 *, +	 * @see org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder, +	 * @see org.springframework.web.servlet.handler.HandlerMethodMappingNamingStrategy, +	 */, +	String name() default "";, +, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, +, +	/**, +	 * Assign a name to this mapping., +	 * <p><b>Supported at the method and also at type level!</b>, +	 * When used on both levels, a combined name is derived by, +	 * concatenation with "#" as separator., +	 *, +	 * @see org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder, +	 * @see org.springframework.web.servlet.handler.HandlerMethodMappingNamingStrategy, +	 */, +	String name() default "";, +, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolver.java, +	public void contributeMethodArgument(MethodParameter param, Object value,, +		Class<?> paramType = param.getParameterType();, +		RequestParam annot = param.getParameterAnnotation(RequestParam.class);, +		String name = (annot == null || StringUtils.isEmpty(annot.value()) ? param.getParameterName() : annot.value());, +				element = formatUriValue(conversionService, TypeDescriptor.nested(param, 1), element);, +			builder.queryParam(name, formatUriValue(conversionService, new TypeDescriptor(param), value));, +		if (value == null) {, +			return null;, +		}, +		else if (value instanceof String) {, +			return (String) value;, +		}, +		else if (cs != null) {, +			return (String) cs.convert(value, sourceType, STRING_TYPE_DESCRIPTOR);, +		}, +		else {, +			return value.toString();, +		}, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, +, +	/**, +	 * Assign a name to this mapping., +	 * <p><b>Supported at the method and also at type level!</b>, +	 * When used on both levels, a combined name is derived by, +	 * concatenation with "#" as separator., +	 *, +	 * @see org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder, +	 * @see org.springframework.web.servlet.handler.HandlerMethodMappingNamingStrategy, +	 */, +	String name() default "";, +, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolver.java, +	public void contributeMethodArgument(MethodParameter param, Object value,, +		Class<?> paramType = param.getParameterType();, +		RequestParam annot = param.getParameterAnnotation(RequestParam.class);, +		String name = (annot == null || StringUtils.isEmpty(annot.value()) ? param.getParameterName() : annot.value());, +				element = formatUriValue(conversionService, TypeDescriptor.nested(param, 1), element);, +			builder.queryParam(name, formatUriValue(conversionService, new TypeDescriptor(param), value));, +		if (value == null) {, +			return null;, +		}, +		else if (value instanceof String) {, +			return (String) value;, +		}, +		else if (cs != null) {, +			return (String) cs.convert(value, sourceType, STRING_TYPE_DESCRIPTOR);, +		}, +		else {, +			return value.toString();, +		}, +++ b/spring-web/src/main/java/org/springframework/web/method/support/CompositeUriComponentsContributor.java, +	private final List<Object> contributors = new LinkedList<Object>();, +	 * @param cs a ConversionService to use when method argument values, +	public CompositeUriComponentsContributor(Collection<?> contributors, ConversionService cs) {, +		this.contributors.addAll(contributors);, +		this.conversionService = (cs != null ? cs : new DefaultFormattingConversionService());, +		for (Object c : this.contributors) {, +			if (c instanceof UriComponentsContributor) {, +				UriComponentsContributor contributor = (UriComponentsContributor) c;, +			else if (c instanceof HandlerMethodArgumentResolver) {, +				if (((HandlerMethodArgumentResolver) c).supportsParameter(parameter)) {, +					return false;, +				}, +			}, +		}, +		for (Object c : this.contributors) {, +			if (c instanceof UriComponentsContributor) {, +				UriComponentsContributor contributor = (UriComponentsContributor) c;, +			else if (c instanceof HandlerMethodArgumentResolver) {, +				if (((HandlerMethodArgumentResolver) c).supportsParameter(parameter)) {, +					break;, +				}, +			}]