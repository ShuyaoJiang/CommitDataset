[+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, + * @param <M> The kind of model object this binder binds to, +public interface Binder<M> {, +	 * The model object this binder binds to., +	 * @return the model object, +	M getModel();, +	void setStrict(boolean strict);, +	Binding add(BindingConfiguration binding);, +	void add(Formatter<?> formatter, Class<?> propertyType);, +	void add(AnnotationFormatterFactory<?, ?> factory);, +	Binding getBinding(String property);, +	 * @param userValues user-entered values to bind, +	List<BindingResult> bind(List<UserValue> userValues);, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, + * @param <M> The kind of model object this binder binds to, +public interface Binder<M> {, +	 * The model object this binder binds to., +	 * @return the model object, +	M getModel();, +	void setStrict(boolean strict);, +	Binding add(BindingConfiguration binding);, +	void add(Formatter<?> formatter, Class<?> propertyType);, +	void add(AnnotationFormatterFactory<?, ?> factory);, +	Binding getBinding(String property);, +	 * @param userValues user-entered values to bind, +	List<BindingResult> bind(List<UserValue> userValues);, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/BindingConfiguration.java, +import org.springframework.ui.binding.support.GenericBinder;, + * Configuration used to create a new {@link Binding} registered with a {@link GenericBinder}., + * @see GenericBinder#add(BindingConfiguration), +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, + * @param <M> The kind of model object this binder binds to, +public interface Binder<M> {, +	 * The model object this binder binds to., +	 * @return the model object, +	M getModel();, +	void setStrict(boolean strict);, +	Binding add(BindingConfiguration binding);, +	void add(Formatter<?> formatter, Class<?> propertyType);, +	void add(AnnotationFormatterFactory<?, ?> factory);, +	Binding getBinding(String property);, +	 * @param userValues user-entered values to bind, +	List<BindingResult> bind(List<UserValue> userValues);, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/BindingConfiguration.java, +import org.springframework.ui.binding.support.GenericBinder;, + * Configuration used to create a new {@link Binding} registered with a {@link GenericBinder}., + * @see GenericBinder#add(BindingConfiguration), +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/GenericBinder.java, +/*, + * Copyright 2004-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.ui.binding.support;, +, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Array;, +import java.lang.reflect.ParameterizedType;, +import java.lang.reflect.Type;, +import java.lang.reflect.TypeVariable;, +import java.text.ParseException;, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +, +import org.springframework.context.expression.MapAccessor;, +import org.springframework.context.i18n.LocaleContextHolder;, +import org.springframework.core.GenericTypeResolver;, +import org.springframework.core.convert.TypeConverter;, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.core.convert.support.DefaultTypeConverter;, +import org.springframework.expression.EvaluationContext;, +import org.springframework.expression.EvaluationException;, +import org.springframework.expression.Expression;, +import org.springframework.expression.ExpressionException;, +import org.springframework.expression.ExpressionParser;, +import org.springframework.expression.spel.standard.SpelExpressionParser;, +import org.springframework.expression.spel.standard.SpelExpressionParserConfiguration;, +import org.springframework.expression.spel.support.StandardEvaluationContext;, +import org.springframework.expression.spel.support.StandardTypeConverter;, +import org.springframework.ui.binding.Binder;, +import org.springframework.ui.binding.Binding;, +import org.springframework.ui.binding.BindingConfiguration;, +import org.springframework.ui.binding.BindingResult;, +import org.springframework.ui.binding.UserValue;, +import org.springframework.ui.format.AnnotationFormatterFactory;, +import org.springframework.ui.format.Formatter;]