[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/ModelAndView.java, +	 * @param status an alternative status code to use for the response;, +	 * The response status is set just prior to View rendering., +	 * <p>The response status is set just prior to View rendering., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/ModelAndView.java, +	 * @param status an alternative status code to use for the response;, +	 * The response status is set just prior to View rendering., +	 * <p>The response status is set just prior to View rendering., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java, +import org.springframework.http.HttpStatus;, +import org.springframework.ui.ModelMap;, +			ModelMap model = mavContainer.getModel();, +			HttpStatus status = mavContainer.getStatus();, +			ModelAndView mav = new ModelAndView(mavContainer.getViewName(), model, status);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/ModelAndView.java, +	 * @param status an alternative status code to use for the response;, +	 * The response status is set just prior to View rendering., +	 * <p>The response status is set just prior to View rendering., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java, +import org.springframework.http.HttpStatus;, +import org.springframework.ui.ModelMap;, +			ModelMap model = mavContainer.getModel();, +			HttpStatus status = mavContainer.getStatus();, +			ModelAndView mav = new ModelAndView(mavContainer.getViewName(), model, status);, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletAnnotationControllerHandlerMethodTests.java, +	@Test // SPR-14796, +	public void modelAndViewWithStatusInExceptionHandler() throws Exception {, +		initServletWithControllers(ModelAndViewController.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/exception");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		getServlet().service(request, response);, +, +		assertEquals(422, response.getStatus());, +		assertEquals("view", response.getForwardedUrl());, +	}, +, +, +		@RequestMapping("/exception"), +		public void raiseException() throws Exception {, +			throw new TestException();, +		}, +, +		@ExceptionHandler(TestException.class), +		public ModelAndView handleException() {, +			return new ModelAndView("view", new ModelMap(), HttpStatus.UNPROCESSABLE_ENTITY);, +		}, +, +		@SuppressWarnings("serial"), +		private static class TestException extends Exception {, +		}]