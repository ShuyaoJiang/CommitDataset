[+++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +import java.nio.channels.ReadableByteChannel;, +		ReadableByteChannel channel = resource.readableChannel();, +		return DataBufferUtils.read(channel, dataBufferFactory, bufferSize);, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +import java.nio.channels.ReadableByteChannel;, +		ReadableByteChannel channel = resource.readableChannel();, +		return DataBufferUtils.read(channel, dataBufferFactory, bufferSize);, +++ b/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, +import java.io.FileInputStream;, +import java.nio.channels.ReadableByteChannel;, +	/**, +	 * This implementation returns a FileChannel for the given URI-identified, +	 * resource, provided that it refers to a file in the file system., +	 * @since 5.0, +	 * @see #getFile(URI), +	 */, +	@Override, +	public ReadableByteChannel readableChannel() throws IOException {, +		if (isFile()) {, +			return new FileInputStream(getFile()).getChannel();, +		}, +		else {, +			return super.readableChannel();, +		}, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +import java.nio.channels.ReadableByteChannel;, +		ReadableByteChannel channel = resource.readableChannel();, +		return DataBufferUtils.read(channel, dataBufferFactory, bufferSize);, +++ b/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, +import java.io.FileInputStream;, +import java.nio.channels.ReadableByteChannel;, +	/**, +	 * This implementation returns a FileChannel for the given URI-identified, +	 * resource, provided that it refers to a file in the file system., +	 * @since 5.0, +	 * @see #getFile(URI), +	 */, +	@Override, +	public ReadableByteChannel readableChannel() throws IOException {, +		if (isFile()) {, +			return new FileInputStream(getFile()).getChannel();, +		}, +		else {, +			return super.readableChannel();, +		}, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/io/AbstractResource.java, +import java.nio.channels.Channels;, +import java.nio.channels.ReadableByteChannel;, +	 * This implementation returns {@link Channels#newChannel(InputStream)} with the result of, +	 * {@link #getInputStream()}., +	 */, +	@Override, +	public ReadableByteChannel readableChannel() throws IOException {, +		return Channels.newChannel(getInputStream());, +	}, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +import java.nio.channels.ReadableByteChannel;, +		ReadableByteChannel channel = resource.readableChannel();, +		return DataBufferUtils.read(channel, dataBufferFactory, bufferSize);, +++ b/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, +import java.io.FileInputStream;, +import java.nio.channels.ReadableByteChannel;, +	/**, +	 * This implementation returns a FileChannel for the given URI-identified, +	 * resource, provided that it refers to a file in the file system., +	 * @since 5.0, +	 * @see #getFile(URI), +	 */, +	@Override, +	public ReadableByteChannel readableChannel() throws IOException {, +		if (isFile()) {, +			return new FileInputStream(getFile()).getChannel();, +		}, +		else {, +			return super.readableChannel();, +		}, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/io/AbstractResource.java, +import java.nio.channels.Channels;, +import java.nio.channels.ReadableByteChannel;, +	 * This implementation returns {@link Channels#newChannel(InputStream)} with the result of, +	 * {@link #getInputStream()}., +	 */, +	@Override, +	public ReadableByteChannel readableChannel() throws IOException {, +		return Channels.newChannel(getInputStream());, +	}, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java, +import java.nio.channels.ReadableByteChannel;, +	 * This implementation opens a FileChannel for the underlying file.]