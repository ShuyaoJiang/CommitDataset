[+++ b/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java, +				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().toClass())) {, +			if (!candidateParameter.equals(genericParameter.toClass())) {, +++ b/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java, +				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().toClass())) {, +			if (!candidateParameter.equals(genericParameter.toClass())) {, +++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +					valueClass = ResolvableType.forMethodReturnType(method).getGeneric().toClass();, +++ b/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java, +				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().toClass())) {, +			if (!candidateParameter.equals(genericParameter.toClass())) {, +++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +					valueClass = ResolvableType.forMethodReturnType(method).getGeneric().toClass();, +++ b/spring-core/src/main/java/org/springframework/core/GenericTypeResolver.java, +		return ResolvableType.forType(genericType, new TypeVariableMapVariableResolver(map)).toClass();, +++ b/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java, +				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().toClass())) {, +			if (!candidateParameter.equals(genericParameter.toClass())) {, +++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +					valueClass = ResolvableType.forMethodReturnType(method).getGeneric().toClass();, +++ b/spring-core/src/main/java/org/springframework/core/GenericTypeResolver.java, +		return ResolvableType.forType(genericType, new TypeVariableMapVariableResolver(map)).toClass();, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +	 * Return this type as a resolved {@code Class}, falling back to, +	 * {@link java.lang.Object} if no specific class can be resolved., +	 * @return the resolved {@link Class} or the {@code Object} fallback, +	 * @since 5.1, +	 * @see #getRawClass(), +	 * @see #resolve(Class), +	 */, +	public Class<?> toClass() {, +		return resolve(Object.class);, +	}, +, +	/**, +		Class<?> otherResolved = other.toClass();, +++ b/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java, +				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().toClass())) {, +			if (!candidateParameter.equals(genericParameter.toClass())) {, +++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +					valueClass = ResolvableType.forMethodReturnType(method).getGeneric().toClass();, +++ b/spring-core/src/main/java/org/springframework/core/GenericTypeResolver.java, +		return ResolvableType.forType(genericType, new TypeVariableMapVariableResolver(map)).toClass();, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +	 * Return this type as a resolved {@code Class}, falling back to, +	 * {@link java.lang.Object} if no specific class can be resolved., +	 * @return the resolved {@link Class} or the {@code Object} fallback, +	 * @since 5.1, +	 * @see #getRawClass(), +	 * @see #resolve(Class), +	 */, +	public Class<?> toClass() {, +		return resolve(Object.class);, +	}, +, +	/**, +		Class<?> otherResolved = other.toClass();, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayEncoder.java, +		Class<?> clazz = elementType.toClass();, +++ b/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java, +				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().toClass())) {, +			if (!candidateParameter.equals(genericParameter.toClass())) {, +++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +					valueClass = ResolvableType.forMethodReturnType(method).getGeneric().toClass();, +++ b/spring-core/src/main/java/org/springframework/core/GenericTypeResolver.java, +		return ResolvableType.forType(genericType, new TypeVariableMapVariableResolver(map)).toClass();, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +	 * Return this type as a resolved {@code Class}, falling back to, +	 * {@link java.lang.Object} if no specific class can be resolved., +	 * @return the resolved {@link Class} or the {@code Object} fallback, +	 * @since 5.1, +	 * @see #getRawClass(), +	 * @see #resolve(Class), +	 */, +	public Class<?> toClass() {, +		return resolve(Object.class);, +	}, +, +	/**, +		Class<?> otherResolved = other.toClass();, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayEncoder.java, +		Class<?> clazz = elementType.toClass();, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferEncoder.java, +		Class<?> clazz = elementType.toClass();, +++ b/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java, +				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().toClass())) {, +			if (!candidateParameter.equals(genericParameter.toClass())) {, +++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +					valueClass = ResolvableType.forMethodReturnType(method).getGeneric().toClass();, +++ b/spring-core/src/main/java/org/springframework/core/GenericTypeResolver.java, +		return ResolvableType.forType(genericType, new TypeVariableMapVariableResolver(map)).toClass();, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +	 * Return this type as a resolved {@code Class}, falling back to, +	 * {@link java.lang.Object} if no specific class can be resolved., +	 * @return the resolved {@link Class} or the {@code Object} fallback, +	 * @since 5.1, +	 * @see #getRawClass(), +	 * @see #resolve(Class), +	 */, +	public Class<?> toClass() {]