[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +					else if (typeDiffWeight < Integer.MAX_VALUE && typeDiffWeight == minTypeDiffWeight &&, +							!mbd.isLenientConstructorResolution()) {, +						throw new BeanCreationException(mbd.getResourceDescription(), beanName,, +								"Ambiguous factory method matches found in bean '" + beanName + "' " +, +								"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)");, +					}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +					else if (typeDiffWeight < Integer.MAX_VALUE && typeDiffWeight == minTypeDiffWeight &&, +							!mbd.isLenientConstructorResolution()) {, +						throw new BeanCreationException(mbd.getResourceDescription(), beanName,, +								"Ambiguous factory method matches found in bean '" + beanName + "' " +, +								"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)");, +					}, +++ b/org.springframework.context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests-constructorArg.xml, +	<bean id="beanWithDoubleBoolean" class="org.springframework.beans.factory.xml.XmlBeanFactoryTests$DoubleBooleanConstructorBean" autowire="constructor" scope="prototype" factory-method="create">, +	<bean id="beanWithDoubleBooleanNoTypeFactoryMethod" class="org.springframework.beans.factory.xml.XmlBeanFactoryTests$DoubleBooleanConstructorBean" scope="prototype" factory-method="create">, +		<constructor-arg index="0"><value>false</value></constructor-arg>, +		<constructor-arg index="1"><value>true</value></constructor-arg>, +	</bean>, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +					else if (typeDiffWeight < Integer.MAX_VALUE && typeDiffWeight == minTypeDiffWeight &&, +							!mbd.isLenientConstructorResolution()) {, +						throw new BeanCreationException(mbd.getResourceDescription(), beanName,, +								"Ambiguous factory method matches found in bean '" + beanName + "' " +, +								"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)");, +					}, +++ b/org.springframework.context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests-constructorArg.xml, +	<bean id="beanWithDoubleBoolean" class="org.springframework.beans.factory.xml.XmlBeanFactoryTests$DoubleBooleanConstructorBean" autowire="constructor" scope="prototype" factory-method="create">, +	<bean id="beanWithDoubleBooleanNoTypeFactoryMethod" class="org.springframework.beans.factory.xml.XmlBeanFactoryTests$DoubleBooleanConstructorBean" scope="prototype" factory-method="create">, +		<constructor-arg index="0"><value>false</value></constructor-arg>, +		<constructor-arg index="1"><value>true</value></constructor-arg>, +	</bean>, +, +++ b/org.springframework.context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests.java, +	public @Test void testDoubleBooleanNoTypeFactoryMethod() {, +		XmlBeanFactory xbf = new XmlBeanFactory(CONSTRUCTOR_ARG_CONTEXT);, +		AbstractBeanDefinition bd = (AbstractBeanDefinition) xbf.getBeanDefinition("beanWithDoubleBooleanNoTypeFactoryMethod");, +		bd.setLenientConstructorResolution(false);, +		try {, +			xbf.getBean("beanWithDoubleBooleanNoTypeFactoryMethod");, +			fail("Should have thrown BeanCreationException");, +		}, +		catch (BeanCreationException ex) {, +			// expected, +			ex.printStackTrace();, +			assertTrue(ex.getMostSpecificCause().getMessage().contains("Ambiguous"));, +		}, +	}, +, +, +		public static DoubleBooleanConstructorBean create(Boolean b1, Boolean b2) {, +			return new DoubleBooleanConstructorBean(b1, b2);, +		}, +, +		public static DoubleBooleanConstructorBean create(String s1, String s2) {, +			return new DoubleBooleanConstructorBean(s1, s2);, +		}]