[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/SockJsClient.java, +import org.springframework.web.socket.WebSocketHttpHeaders;, +import org.springframework.web.socket.client.WebSocketClient;, +import org.springframework.web.util.UriComponentsBuilder;, +public class SockJsClient implements WebSocketClient, Lifecycle {, +	public ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler handler,, +			String uriTemplate, Object... uriVars) {, +, +		Assert.notNull(uriTemplate, "uriTemplate must not be null");, +		URI uri = UriComponentsBuilder.fromUriString(uriTemplate).buildAndExpand(uriVars).encode().toUri();, +		return doHandshake(handler, null, uri);, +	public final ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler handler,, +			WebSocketHttpHeaders headers, URI url) {, +, +		Assert.notNull(handler, "'webSocketHandler' is required");, +		Assert.notNull(url, "'url' is required");, +, +		String scheme = url.getScheme();, +		Assert.isTrue(scheme != null && ("ws".equals(scheme) || "wss".equals(scheme) ||, +				"http".equals(scheme) || "https".equals(scheme)), "Invalid scheme: " + scheme);, +			createRequest(sockJsUrlInfo, headers, serverInfo).connect(handler, connectFuture);]