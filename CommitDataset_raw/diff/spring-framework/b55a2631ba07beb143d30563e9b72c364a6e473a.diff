[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java, +	 * Expose the classic Spring JdbcTemplate operations to allow invocation, +	 * of less commonly used methods., +	 * Expose the classic Spring {@link JdbcTemplate} itself, if available,, +	 * in particular for passing it on to other {@code JdbcTemplate} consumers., +	 * <p>If sufficient for the purposes at hand, {@link #getJdbcOperations()}, +	 * is recommended over this variant., +	 * @since 5.0.3, +	 */, +	public JdbcTemplate getJdbcTemplate() {, +		Assert.state(this.classicJdbcTemplate instanceof JdbcTemplate, "No JdbcTemplate available");, +		return (JdbcTemplate) this.classicJdbcTemplate;, +	}, +, +	/**, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java, +	 * Expose the classic Spring JdbcTemplate operations to allow invocation, +	 * of less commonly used methods., +	 * Expose the classic Spring {@link JdbcTemplate} itself, if available,, +	 * in particular for passing it on to other {@code JdbcTemplate} consumers., +	 * <p>If sufficient for the purposes at hand, {@link #getJdbcOperations()}, +	 * is recommended over this variant., +	 * @since 5.0.3, +	 */, +	public JdbcTemplate getJdbcTemplate() {, +		Assert.state(this.classicJdbcTemplate instanceof JdbcTemplate, "No JdbcTemplate available");, +		return (JdbcTemplate) this.classicJdbcTemplate;, +	}, +, +	/**, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplateTests.java, + * Copyright 2002-2017 the original author or authors., +, +	public void setup() throws Exception {, +, +	public void testNullDataSourceProvidedToCtor() {, +	public void testNullJdbcTemplateProvidedToCtor() {, +	public void testTemplateConfiguration() {, +		assertSame(dataSource, namedParameterTemplate.getJdbcTemplate().getDataSource());, +	}, +, +	@Test, +				(PreparedStatementCallback<Object>) ps -> {, +				(PreparedStatementCallback<Object>) ps -> {, +				(PreparedStatementCallback<Object>) ps -> {, +				rs -> {, +					Customer cust1 = new Customer();, +					cust1.setId(rs.getInt(COLUMN_NAMES[0]));, +					cust1.setForename(rs.getString(COLUMN_NAMES[1]));, +					return cust1;, +				rs -> {, +					Customer cust1 = new Customer();, +					cust1.setId(rs.getInt(COLUMN_NAMES[0]));, +					cust1.setForename(rs.getString(COLUMN_NAMES[1]));, +					return cust1;, +		namedParameterTemplate.query(SELECT_NAMED_PARAMETERS, params, rs -> {, +		namedParameterTemplate.query(SELECT_NO_PARAMETERS, rs -> {, +				(rs, rownum) -> {, +				(rs, rownum) -> {, +				(rs, rownum) -> {, +					Customer cust1 = new Customer();, +					cust1.setId(rs.getInt(COLUMN_NAMES[0]));, +					cust1.setForename(rs.getString(COLUMN_NAMES[1]));, +					return cust1;, +		assertSame(template, namedParameterTemplate.getJdbcTemplate());, +		int[] actualRowsAffected = namedParameterTemplate.batchUpdate("UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = :id", ids);, +		assertSame(template, namedParameterTemplate.getJdbcTemplate());, +		int[] actualRowsAffected = namedParameterTemplate.batchUpdate("UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = :id", ids);, +		assertSame(template, namedParameterTemplate.getJdbcTemplate());, +		int[] actualRowsAffected = namedParameterTemplate.batchUpdate("UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = :id", ids);]