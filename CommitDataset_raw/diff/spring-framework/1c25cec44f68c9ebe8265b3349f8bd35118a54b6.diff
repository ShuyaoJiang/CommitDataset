[+++ b/spring-context/src/test/java/org/springframework/aop/framework/AbstractAopProxyTests.java, +		ITestBean[] proxies = new ITestBean[howMany];, +		}, +++ b/spring-context/src/test/java/org/springframework/aop/framework/AbstractAopProxyTests.java, +		ITestBean[] proxies = new ITestBean[howMany];, +		}, +++ b/spring-context/src/test/java/org/springframework/jmx/export/NotificationPublisherTests.java, + * Copyright 2002-2018 the original author or authors., +		public Object invoke(String actionName, Object[] params, String[] signature) throws MBeanException,, +++ b/spring-context/src/test/java/org/springframework/aop/framework/AbstractAopProxyTests.java, +		ITestBean[] proxies = new ITestBean[howMany];, +		}, +++ b/spring-context/src/test/java/org/springframework/jmx/export/NotificationPublisherTests.java, + * Copyright 2002-2018 the original author or authors., +		public Object invoke(String actionName, Object[] params, String[] signature) throws MBeanException,, +++ b/spring-context/src/test/java/org/springframework/jmx/export/annotation/AnnotationTestBean.java, + * Copyright 2002-2018 the original author or authors., +		return 100L;, +++ b/spring-context/src/test/java/org/springframework/aop/framework/AbstractAopProxyTests.java, +		ITestBean[] proxies = new ITestBean[howMany];, +		}, +++ b/spring-context/src/test/java/org/springframework/jmx/export/NotificationPublisherTests.java, + * Copyright 2002-2018 the original author or authors., +		public Object invoke(String actionName, Object[] params, String[] signature) throws MBeanException,, +++ b/spring-context/src/test/java/org/springframework/jmx/export/annotation/AnnotationTestBean.java, + * Copyright 2002-2018 the original author or authors., +		return 100L;, +++ b/spring-context/src/test/java/org/springframework/jndi/JndiTemplateTests.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-context/src/test/java/org/springframework/aop/framework/AbstractAopProxyTests.java, +		ITestBean[] proxies = new ITestBean[howMany];, +		}, +++ b/spring-context/src/test/java/org/springframework/jmx/export/NotificationPublisherTests.java, + * Copyright 2002-2018 the original author or authors., +		public Object invoke(String actionName, Object[] params, String[] signature) throws MBeanException,, +++ b/spring-context/src/test/java/org/springframework/jmx/export/annotation/AnnotationTestBean.java, + * Copyright 2002-2018 the original author or authors., +		return 100L;, +++ b/spring-context/src/test/java/org/springframework/jndi/JndiTemplateTests.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-core/src/test/java/org/springframework/core/convert/support/StreamConverterTests.java, + * Copyright 2002-2018 the original author or authors., +		TypeDescriptor listOfStrings = new TypeDescriptor(Types.class.getField("listOfStrings"));, +		TypeDescriptor arrayOfLongs = new TypeDescriptor(Types.class.getField("arrayOfLongs"));, +		TypeDescriptor listOfStrings = new TypeDescriptor(Types.class.getField("rawList"));, +		TypeDescriptor arrayOfLongs = new TypeDescriptor(Types.class.getField("arrayOfLongs"));, +		TypeDescriptor streamOfInteger = new TypeDescriptor(Types.class.getField("streamOfIntegers"));, +		TypeDescriptor streamOfBoolean = new TypeDescriptor(Types.class.getField("streamOfBooleans"));, +		TypeDescriptor streamOfInteger = new TypeDescriptor(Types.class.getField("rawStream"));, +++ b/spring-context/src/test/java/org/springframework/aop/framework/AbstractAopProxyTests.java, +		ITestBean[] proxies = new ITestBean[howMany];, +		}, +++ b/spring-context/src/test/java/org/springframework/jmx/export/NotificationPublisherTests.java, + * Copyright 2002-2018 the original author or authors., +		public Object invoke(String actionName, Object[] params, String[] signature) throws MBeanException,, +++ b/spring-context/src/test/java/org/springframework/jmx/export/annotation/AnnotationTestBean.java, + * Copyright 2002-2018 the original author or authors., +		return 100L;, +++ b/spring-context/src/test/java/org/springframework/jndi/JndiTemplateTests.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-core/src/test/java/org/springframework/core/convert/support/StreamConverterTests.java, + * Copyright 2002-2018 the original author or authors., +		TypeDescriptor listOfStrings = new TypeDescriptor(Types.class.getField("listOfStrings"));, +		TypeDescriptor arrayOfLongs = new TypeDescriptor(Types.class.getField("arrayOfLongs"));, +		TypeDescriptor listOfStrings = new TypeDescriptor(Types.class.getField("rawList"));, +		TypeDescriptor arrayOfLongs = new TypeDescriptor(Types.class.getField("arrayOfLongs"));, +		TypeDescriptor streamOfInteger = new TypeDescriptor(Types.class.getField("streamOfIntegers"));, +		TypeDescriptor streamOfBoolean = new TypeDescriptor(Types.class.getField("streamOfBooleans"));, +		TypeDescriptor streamOfInteger = new TypeDescriptor(Types.class.getField("rawStream"));, +++ b/spring-core/src/test/java/org/springframework/util/ExponentialBackOffTests.java, + * Copyright 2002-2018 the original author or authors., +		assertEquals(2000L, execution.nextBackOff());, +		assertEquals(3000L, execution.nextBackOff());, +		assertEquals(4500L, execution.nextBackOff());, +		assertEquals(100L, execution.nextBackOff());, +		assertEquals(200L, execution.nextBackOff());, +		assertEquals(400L, execution.nextBackOff());, +		assertEquals(800L, execution.nextBackOff());, +		backOff.setMaxElapsedTime(300L);, +		assertEquals(100L, execution.nextBackOff());, +		assertEquals(100L, execution.nextBackOff());, +		assertEquals(100L, execution.nextBackOff());, +		assertEquals(2000L, execution.nextBackOff());, +		assertEquals(4000L, execution.nextBackOff());, +		assertEquals(4000L, execution.nextBackOff()); // max reached, +		assertEquals(4000L, execution.nextBackOff());, +		assertEquals(2000L, execution.nextBackOff());, +		assertEquals(4000L, execution.nextBackOff());, +		assertEquals(2000L, execution.nextBackOff());, +		assertEquals(2000L, execution2.nextBackOff());, +		assertEquals(4000L, execution.nextBackOff());, +		assertEquals(4000L, execution2.nextBackOff());, +++ b/spring-context/src/test/java/org/springframework/aop/framework/AbstractAopProxyTests.java, +		ITestBean[] proxies = new ITestBean[howMany];, +		}, +++ b/spring-context/src/test/java/org/springframework/jmx/export/NotificationPublisherTests.java, + * Copyright 2002-2018 the original author or authors., +		public Object invoke(String actionName, Object[] params, String[] signature) throws MBeanException,, +++ b/spring-context/src/test/java/org/springframework/jmx/export/annotation/AnnotationTestBean.java, + * Copyright 2002-2018 the original author or authors.]