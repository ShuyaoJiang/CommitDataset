[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +, +			if (this.environment instanceof ConfigurableEnvironment) {, +			else {, +				logger.warn("Ignoring @PropertySource annotation on [" + sourceClass.getMetadata().getClassName() +, +						"]. Reason: Environment must implement ConfigurableEnvironment");, +			}, +				String resolvedLocation = this.environment.resolveRequiredPlaceholders(location);, +				Resource resource = this.resourceLoader.getResource(resolvedLocation);, +				ResourcePropertySource rps = (StringUtils.hasText(name) ?, +						new ResourcePropertySource(name, resource) : new ResourcePropertySource(resource));, +				addPropertySource(rps);, +	private void addPropertySource(ResourcePropertySource propertySource) {, +				((CompositePropertySource) existing).addFirstPropertySource(propertySource.withResourceName());, +				if (existing instanceof ResourcePropertySource) {, +					existing = ((ResourcePropertySource) existing).withResourceName();, +				composite.addPropertySource(propertySource.withResourceName());, +			}, +			else {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +, +			if (this.environment instanceof ConfigurableEnvironment) {, +			else {, +				logger.warn("Ignoring @PropertySource annotation on [" + sourceClass.getMetadata().getClassName() +, +						"]. Reason: Environment must implement ConfigurableEnvironment");, +			}, +				String resolvedLocation = this.environment.resolveRequiredPlaceholders(location);, +				Resource resource = this.resourceLoader.getResource(resolvedLocation);, +				ResourcePropertySource rps = (StringUtils.hasText(name) ?, +						new ResourcePropertySource(name, resource) : new ResourcePropertySource(resource));, +				addPropertySource(rps);, +	private void addPropertySource(ResourcePropertySource propertySource) {, +				((CompositePropertySource) existing).addFirstPropertySource(propertySource.withResourceName());, +				if (existing instanceof ResourcePropertySource) {, +					existing = ((ResourcePropertySource) existing).withResourceName();, +				composite.addPropertySource(propertySource.withResourceName());, +			}, +			else {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/PropertySourceAnnotationTests.java, +, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +, +			if (this.environment instanceof ConfigurableEnvironment) {, +			else {, +				logger.warn("Ignoring @PropertySource annotation on [" + sourceClass.getMetadata().getClassName() +, +						"]. Reason: Environment must implement ConfigurableEnvironment");, +			}, +				String resolvedLocation = this.environment.resolveRequiredPlaceholders(location);, +				Resource resource = this.resourceLoader.getResource(resolvedLocation);, +				ResourcePropertySource rps = (StringUtils.hasText(name) ?, +						new ResourcePropertySource(name, resource) : new ResourcePropertySource(resource));, +				addPropertySource(rps);, +	private void addPropertySource(ResourcePropertySource propertySource) {, +				((CompositePropertySource) existing).addFirstPropertySource(propertySource.withResourceName());, +				if (existing instanceof ResourcePropertySource) {, +					existing = ((ResourcePropertySource) existing).withResourceName();, +				composite.addPropertySource(propertySource.withResourceName());, +			}, +			else {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/PropertySourceAnnotationTests.java, +, +, +++ b/spring-core/src/main/java/org/springframework/core/env/CompositePropertySource.java, +	/**, +	 * Add the given {@link PropertySource} to the end of the chain., +	 * @param propertySource the PropertySource to add, +	 */, +	/**, +	 * Add the given {@link PropertySource} to the start of the chain., +	 * @param propertySource the PropertySource to add, +	 * @since 4.1, +	 */, +		List<PropertySource<?>> existing = new ArrayList<PropertySource<?>>(this.propertySources);, +		this.propertySources.addAll(existing);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +, +			if (this.environment instanceof ConfigurableEnvironment) {, +			else {, +				logger.warn("Ignoring @PropertySource annotation on [" + sourceClass.getMetadata().getClassName() +, +						"]. Reason: Environment must implement ConfigurableEnvironment");, +			}, +				String resolvedLocation = this.environment.resolveRequiredPlaceholders(location);, +				Resource resource = this.resourceLoader.getResource(resolvedLocation);, +				ResourcePropertySource rps = (StringUtils.hasText(name) ?, +						new ResourcePropertySource(name, resource) : new ResourcePropertySource(resource));, +				addPropertySource(rps);, +	private void addPropertySource(ResourcePropertySource propertySource) {, +				((CompositePropertySource) existing).addFirstPropertySource(propertySource.withResourceName());, +				if (existing instanceof ResourcePropertySource) {, +					existing = ((ResourcePropertySource) existing).withResourceName();, +				composite.addPropertySource(propertySource.withResourceName());, +			}, +			else {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/PropertySourceAnnotationTests.java, +, +, +++ b/spring-core/src/main/java/org/springframework/core/env/CompositePropertySource.java, +	/**, +	 * Add the given {@link PropertySource} to the end of the chain.]