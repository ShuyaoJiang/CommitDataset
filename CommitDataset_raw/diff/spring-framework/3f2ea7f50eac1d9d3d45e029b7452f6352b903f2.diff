[+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/support/RequestContextTests.java, +, +import static org.junit.Assert.*;, +, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/support/RequestContextTests.java, +, +import static org.junit.Assert.*;, +, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriComponents.java, +	private final PathComponent path;, +	UriComponents(String scheme,, +						 PathComponent path,, +		this.path = path != null ? path : NULL_PATH_COMPONENT;, +		return path.getPath();, +		return path.getPathSegments();, +		PathComponent encodedPath = path.encode(encoding);, +		return new UriComponents(encodedScheme, encodedUserInfo, encodedHost, this.port, encodedPath,, +		PathComponent expandedPath = path.expand(uriVariables);, +		return new UriComponents(expandedScheme, expandedUserInfo, expandedHost, this.port, expandedPath,, +	private static String expandUriComponent(String source, Map<String, ?> uriVariables) {, +		PathComponent expandedPath = path.expand(valueIterator);, +		return new UriComponents(expandedScheme, expandedUserInfo, expandedHost, this.port, expandedPath,, +	private static String expandUriComponent(String source, Iterator<Object> valueIterator) {, +	private static String getVariableName(String match) {, +	private static String getVariableValueAsString(Object variableValue) {, +		if (StringUtils.hasLength(path)) {, +			if (uriBuilder.length() != 0 && path.charAt(0) != PATH_DELIMITER) {, +				uriBuilder.append(PATH_DELIMITER);, +			}, +				String path = getPath();, +				if (StringUtils.hasLength(path) && path.charAt(0) != PATH_DELIMITER) {, +					path = PATH_DELIMITER + path;, +				}, +				return new URI(getScheme(), getUserInfo(), getHost(), getPort(), path, getQuery(),, +			if (!path.equals(other.path)) {, +		result = 31 * result + path.hashCode();, +	/**, +	 * Defines the contract for path (segments)., +	 */, +	interface PathComponent {, +, +		String getPath();, +, +		List<String> getPathSegments();, +, +		PathComponent encode(String encoding) throws UnsupportedEncodingException;, +, +		PathComponent expand(Map<String, ?> uriVariables);, +, +		PathComponent expand(Iterator<Object> valueIterator);, +	}, +, +	/**, +	 * Represents a path backed by a string., +	 */, +	final static class FullPathComponent implements PathComponent {, +, +		private final String path;, +, +		FullPathComponent(String path) {, +			this.path = path;, +		}, +, +		public String getPath() {, +			return path;, +		}, +, +		public List<String> getPathSegments() {, +			String delimiter = new String(new char[]{PATH_DELIMITER});, +			String[] pathSegments = StringUtils.tokenizeToStringArray(path, delimiter);, +			return Collections.unmodifiableList(Arrays.asList(pathSegments));, +		}, +, +		public PathComponent encode(String encoding) throws UnsupportedEncodingException {, +			String encodedPath = encodeUriComponent(getPath(),encoding, Type.PATH);, +			return new FullPathComponent(encodedPath);, +		}, +, +		public PathComponent expand(Map<String, ?> uriVariables) {, +			String expandedPath = expandUriComponent(getPath(), uriVariables);, +			return new FullPathComponent(expandedPath);, +		}, +, +		public PathComponent expand(Iterator<Object> valueIterator) {, +			String expandedPath = expandUriComponent(getPath(), valueIterator);, +			return new FullPathComponent(expandedPath);, +		}, +, +		@Override, +		public boolean equals(Object o) {, +			if (this == o) {, +				return true;, +			} else if (o instanceof FullPathComponent) {, +				FullPathComponent other = (FullPathComponent) o;, +				return this.getPath().equals(other.getPath());, +			}, +			return false;, +		}, +, +		@Override]