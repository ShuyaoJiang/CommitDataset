[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/InitializeDatabaseBeanDefinitionParser.java, +import org.springframework.beans.factory.FactoryBean;, +	private BeanDefinition createDatabasePopulator(Element element, List<Element> scripts, ParserContext context) {, +, +		BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(ResourceDatabasePopulator.class);, +		builder.addPropertyValue("ignoreFailedDrops", element.getAttribute("ignore-failures").equals("DROPS"));, +		builder.addPropertyValue("continueOnError", element.getAttribute("ignore-failures").equals("ALL"));, +, +		List<String> locations = new ArrayList<String>();, +			locations.add(location);, +		}, +, +		// Use a factor bean for the resources so they can be given an order if a pattern is used, +		BeanDefinitionBuilder resourcesFactory = BeanDefinitionBuilder, +				.genericBeanDefinition(SortedResourcesFactoryBean.class);, +		resourcesFactory.addConstructorArgValue(context.getReaderContext().getResourceLoader());, +		resourcesFactory.addConstructorArgValue(locations);, +		builder.addPropertyValue("scripts", resourcesFactory.getBeanDefinition());, +, +		return builder.getBeanDefinition();, +, +	}, +, +	private AbstractBeanDefinition getSourcedBeanDefinition(BeanDefinitionBuilder builder, Element source,, +			ParserContext context) {, +		AbstractBeanDefinition definition = builder.getBeanDefinition();, +		definition.setSource(context.extractSource(source));, +		return definition;, +	}, +, +	public static class SortedResourcesFactoryBean implements FactoryBean<Resource[]> {, +, +		private ResourceLoader resourceLoader;, +		private List<String> locations;, +, +		public SortedResourcesFactoryBean(ResourceLoader resourceLoader, List<String> locations) {, +			super();, +			this.resourceLoader = resourceLoader;, +			this.locations = locations;, +		}, +, +		public Resource[] getObject() throws Exception {, +			List<Resource> scripts = new ArrayList<Resource>();, +			for (String location : locations) {, +					List<Resource> resources = new ArrayList<Resource>(Arrays, +							.asList(((ResourcePatternResolver) resourceLoader).getResources(location)));, +						scripts.add(resource);, +					scripts.add(resourceLoader.getResource(location));, +			return scripts.toArray(new Resource[scripts.size()]);, +		public Class<? extends Resource[]> getObjectType() {, +			// TODO Auto-generated method stub, +			return null;, +		}, +, +		public boolean isSingleton() {, +			// TODO Auto-generated method stub, +			return false;, +		}, +, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/InitializeDatabaseBeanDefinitionParser.java, +import org.springframework.beans.factory.FactoryBean;, +	private BeanDefinition createDatabasePopulator(Element element, List<Element> scripts, ParserContext context) {, +, +		BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(ResourceDatabasePopulator.class);, +		builder.addPropertyValue("ignoreFailedDrops", element.getAttribute("ignore-failures").equals("DROPS"));, +		builder.addPropertyValue("continueOnError", element.getAttribute("ignore-failures").equals("ALL"));, +, +		List<String> locations = new ArrayList<String>();, +			locations.add(location);, +		}, +, +		// Use a factor bean for the resources so they can be given an order if a pattern is used, +		BeanDefinitionBuilder resourcesFactory = BeanDefinitionBuilder, +				.genericBeanDefinition(SortedResourcesFactoryBean.class);, +		resourcesFactory.addConstructorArgValue(context.getReaderContext().getResourceLoader());, +		resourcesFactory.addConstructorArgValue(locations);, +		builder.addPropertyValue("scripts", resourcesFactory.getBeanDefinition());, +, +		return builder.getBeanDefinition();, +, +	}, +, +	private AbstractBeanDefinition getSourcedBeanDefinition(BeanDefinitionBuilder builder, Element source,, +			ParserContext context) {, +		AbstractBeanDefinition definition = builder.getBeanDefinition();, +		definition.setSource(context.extractSource(source));, +		return definition;, +	}, +, +	public static class SortedResourcesFactoryBean implements FactoryBean<Resource[]> {, +, +		private ResourceLoader resourceLoader;, +		private List<String> locations;, +, +		public SortedResourcesFactoryBean(ResourceLoader resourceLoader, List<String> locations) {, +			super();, +			this.resourceLoader = resourceLoader;, +			this.locations = locations;, +		}, +]