[+++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/Bean.java, +// TODO: test @Lazy @Bean, +// TODO: test @Primary @Bean, +// TODO: test Bean alias scenarios, +// TODO: test init/destroy method scenarios, +// TODO: test dependsOn, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/Bean.java, +// TODO: test @Lazy @Bean, +// TODO: test @Primary @Bean, +// TODO: test Bean alias scenarios, +// TODO: test init/destroy method scenarios, +// TODO: test dependsOn, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/Configuration.java, +, +// TODO: test constructor autowiring<br>, +// TODO: test private Configuration classes<br>, +// TODO: test @Lazy @Configuration<br>, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/Bean.java, +// TODO: test @Lazy @Bean, +// TODO: test @Primary @Bean, +// TODO: test Bean alias scenarios, +// TODO: test init/destroy method scenarios, +// TODO: test dependsOn, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/Configuration.java, +, +// TODO: test constructor autowiring<br>, +// TODO: test private Configuration classes<br>, +// TODO: test @Lazy @Configuration<br>, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/StandardScopes.java, +, +// TODO: move StandardScopes to appropriate package, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/Bean.java, +// TODO: test @Lazy @Bean, +// TODO: test @Primary @Bean, +// TODO: test Bean alias scenarios, +// TODO: test init/destroy method scenarios, +// TODO: test dependsOn, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/Configuration.java, +, +// TODO: test constructor autowiring<br>, +// TODO: test private Configuration classes<br>, +// TODO: test @Lazy @Configuration<br>, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/StandardScopes.java, +, +// TODO: move StandardScopes to appropriate package, +++ /dev/null, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/Bean.java, +// TODO: test @Lazy @Bean, +// TODO: test @Primary @Bean, +// TODO: test Bean alias scenarios, +// TODO: test init/destroy method scenarios, +// TODO: test dependsOn, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/Configuration.java, +, +// TODO: test constructor autowiring<br>, +// TODO: test private Configuration classes<br>, +// TODO: test @Lazy @Configuration<br>, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/StandardScopes.java, +, +// TODO: move StandardScopes to appropriate package, +++ /dev/null, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/BeanMethodInterceptor.java, + * Copyright 2002-2009 the original author or authors., +import net.sf.cglib.proxy.MethodInterceptor;, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +import org.springframework.util.Assert;, + * @author Chris Beams, + * @since 3.0, +class BeanMethodInterceptor implements BeanFactoryAware, MethodInterceptor {, +	protected final Log log = LogFactory.getLog(this.getClass());, +	protected DefaultListableBeanFactory beanFactory;, +, +	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {, +		Assert.isInstanceOf(DefaultListableBeanFactory.class, beanFactory);, +		this.beanFactory = (DefaultListableBeanFactory) beanFactory;, +	}, +		// determine the name of the bean, +		String beanName;, +		// check to see if the user has explicitly set the bean name, +		Bean bean = method.getAnnotation(Bean.class);, +		if(bean != null && bean.name().length > 1), +			beanName = bean.name()[0];, +		// if not, simply return the name of the method as the bean name, +		else, +			beanName = method.getName();, +, +		// determine whether this bean is a scoped-proxy, +		String scopedBeanName = BeanRegistrar.resolveHiddenScopedProxyBeanName(beanName);, +		// to handle the case of an inter-bean method reference, we must explicitly check the, +		// container for already cached instances, +		// actually create and return the bean]