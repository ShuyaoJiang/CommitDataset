[+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, +import java.util.concurrent.ConcurrentHashMap;, +	private final ConcurrentHashMap<String, PlatformTransactionManager> transactionManagerCache =, +			new ConcurrentHashMap<String, PlatformTransactionManager>();, +, +			PlatformTransactionManager txManager = this.transactionManagerCache.get(qualifier);, +			if (txManager == null) {, +				txManager = BeanFactoryAnnotationUtils.qualifiedBeanOfType(, +						this.beanFactory, PlatformTransactionManager.class, qualifier);, +				this.transactionManagerCache.putIfAbsent(qualifier, txManager);, +			}, +			return txManager;, +			PlatformTransactionManager txManager  = this.transactionManagerCache.get(this.transactionManagerBeanName);, +			if (txManager == null) {, +				txManager = this.beanFactory.getBean(, +						this.transactionManagerBeanName, PlatformTransactionManager.class);, +				this.transactionManagerCache.putIfAbsent(this.transactionManagerBeanName, txManager);, +			}, +			return txManager;, +			// Lookup the default transaction manager and store it for next call, +			this.transactionManager = this.beanFactory.getBean(PlatformTransactionManager.class);, +			return this.transactionManager;, +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, +import java.util.concurrent.ConcurrentHashMap;, +	private final ConcurrentHashMap<String, PlatformTransactionManager> transactionManagerCache =, +			new ConcurrentHashMap<String, PlatformTransactionManager>();, +, +			PlatformTransactionManager txManager = this.transactionManagerCache.get(qualifier);, +			if (txManager == null) {, +				txManager = BeanFactoryAnnotationUtils.qualifiedBeanOfType(, +						this.beanFactory, PlatformTransactionManager.class, qualifier);, +				this.transactionManagerCache.putIfAbsent(qualifier, txManager);, +			}, +			return txManager;, +			PlatformTransactionManager txManager  = this.transactionManagerCache.get(this.transactionManagerBeanName);, +			if (txManager == null) {, +				txManager = this.beanFactory.getBean(, +						this.transactionManagerBeanName, PlatformTransactionManager.class);, +				this.transactionManagerCache.putIfAbsent(this.transactionManagerBeanName, txManager);, +			}, +			return txManager;, +			// Lookup the default transaction manager and store it for next call, +			this.transactionManager = this.beanFactory.getBean(PlatformTransactionManager.class);, +			return this.transactionManager;, +++ b/spring-tx/src/test/java/org/springframework/transaction/interceptor/AbstractTransactionAspectTests.java, +import org.junit.Test;, +import static org.junit.Assert.*;, +public abstract class AbstractTransactionAspectTests {, +	@Test, +	public void noTransaction() throws Exception {, +	@Test, +	public void transactionShouldSucceed() throws Exception {, +	@Test, +	public void transactionShouldSucceedWithCallbackPreference() throws Exception {, +	@Test, +	public void transactionExceptionPropagatedWithCallbackPreference() throws Throwable {, +	@Test, +	public void twoTransactionsShouldSucceed() throws Exception {, +	@Test, +	public void transactionShouldSucceedWithNotNew() throws Exception {, +	@Test, +	public void enclosingTransactionWithNonTransactionMethodOnAdvisedInside() throws Throwable {, +	@Test, +	public void enclosingTransactionWithNestedTransactionOnAdvisedInside() throws Throwable {, +	@Test, +	public void rollbackOnCheckedException() throws Throwable {, +	@Test, +	public void noRollbackOnCheckedException() throws Throwable {, +	@Test, +	public void rollbackOnUncheckedException() throws Throwable {, +	@Test, +	public void noRollbackOnUncheckedException() throws Throwable {, +	@Test, +	public void rollbackOnCheckedExceptionWithRollbackException() throws Throwable {, +	@Test, +	public void noRollbackOnCheckedExceptionWithRollbackException() throws Throwable {, +	@Test, +	public void rollbackOnUncheckedExceptionWithRollbackException() throws Throwable {, +	@Test, +	public void noRollbackOnUncheckedExceptionWithRollbackException() throws Throwable {, +	@Test, +	public void programmaticRollback() throws Exception {, +	@Test, +	public void cannotCreateTransaction() throws Exception {, +	@Test, +	public void cannotCommitTransaction() throws Exception {, +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, +import java.util.concurrent.ConcurrentHashMap;, +	private final ConcurrentHashMap<String, PlatformTransactionManager> transactionManagerCache =, +			new ConcurrentHashMap<String, PlatformTransactionManager>();, +, +			PlatformTransactionManager txManager = this.transactionManagerCache.get(qualifier);, +			if (txManager == null) {, +				txManager = BeanFactoryAnnotationUtils.qualifiedBeanOfType(, +						this.beanFactory, PlatformTransactionManager.class, qualifier);, +				this.transactionManagerCache.putIfAbsent(qualifier, txManager);, +			}, +			return txManager;, +			PlatformTransactionManager txManager  = this.transactionManagerCache.get(this.transactionManagerBeanName);, +			if (txManager == null) {]