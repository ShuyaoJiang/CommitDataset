[+++ b/spring-core/src/main/java/org/springframework/core/CollectionFactory.java, + * Copyright 2002-2015 the original author or authors., + * Factory for collections that is aware of Java 5, Java 6, and Spring, + * collection types., +	 * <p><strong>Warning</strong>: Since the parameterized type {@code E} is, +	 * not bound to the type of elements contained in the supplied, +	 * {@code collection}, type safety cannot be guaranteed if the supplied, +	 * {@code collection} is an {@link EnumSet}. In such scenarios, the caller, +	 * is responsible for ensuring that the element type for the supplied, +	 * {@code collection} is an enum type matching type {@code E}. As an, +	 * alternative, the caller may wish to treat the return value as a raw, +	 * collection or collection of {@link Object}., +	 * @param collection the original collection object, potentially {@code null}, +	 * @return a new, empty collection instance, +	 * @param collectionType the desired type of the target collection; never {@code null}, +	 * @return a new collection instance, +	 * @throws IllegalArgumentException if the supplied {@code collectionType}, +	 * is {@code null} or of type {@link EnumSet}, +	 * <p><strong>Warning</strong>: Since the parameterized type {@code E} is, +	 * not bound to the supplied {@code elementType}, type safety cannot be, +	 * guaranteed if the desired {@code collectionType} is {@link EnumSet}., +	 * In such scenarios, the caller is responsible for ensuring that the, +	 * supplied {@code elementType} is an enum type matching type {@code E}., +	 * As an alternative, the caller may wish to treat the return value as a, +	 * raw collection or collection of {@link Object}., +	 * @param elementType the collection's element type, or {@code null} if unknown, +	 * @return a new collection instance, +	 * @throws IllegalArgumentException if the supplied {@code collectionType} is, +	 * {@code null}; or if the desired {@code collectionType} is {@link EnumSet} and, +	 * the supplied {@code elementType} is not a subtype of {@link Enum}, +	 * <p><strong>Warning</strong>: Since the parameterized type {@code K} is, +	 * not bound to the type of keys contained in the supplied {@code map},, +	 * type safety cannot be guaranteed if the supplied {@code map} is an, +	 * {@link EnumMap}. In such scenarios, the caller is responsible for, +	 * ensuring that the key type in the supplied {@code map} is an enum type, +	 * matching type {@code K}. As an alternative, the caller may wish to, +	 * treat the return value as a raw map or map keyed by {@link Object}., +	 * @param map the original map object, potentially {@code null}, +	 * @return a new, empty map instance, +	 * @param mapType the desired type of the target map, +	 * @return a new map instance, +	 * @throws IllegalArgumentException if the supplied {@code mapType} is, +	 * {@code null} or of type {@link EnumMap}, +	 * <p><strong>Warning</strong>: Since the parameterized type {@code K}, +	 * is not bound to the supplied {@code keyType}, type safety cannot be, +	 * guaranteed if the desired {@code mapType} is {@link EnumMap}. In such, +	 * scenarios, the caller is responsible for ensuring that the {@code keyType}, +	 * is an enum type matching type {@code K}. As an alternative, the caller, +	 * may wish to treat the return value as a raw map or map keyed by, +	 * {@link Object}. Similarly, type safety cannot be enforced if the, +	 * desired {@code mapType} is {@link MultiValueMap}., +	 * @param mapType the desired type of the target map; never {@code null}, +	 * @param keyType the map's key type, or {@code null} if unknown, +	 * @return a new map instance, +	 * @throws IllegalArgumentException if the supplied {@code mapType} is, +	 * {@code null}; or if the desired {@code mapType} is {@link EnumMap} and, +	 * the supplied {@code keyType} is not a subtype of {@link Enum}]