[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/reactive/MessageMappingMessageHandler.java, +		implements EmbeddedValueResolverAware {, +	@Nullable, +	private Predicate<Class<?>> handlerPredicate =, +			beanType -> AnnotatedElementUtils.hasAnnotation(beanType, Controller.class);, +	public MessageMappingMessageHandler() {, +	 * Manually configure handlers to check for {@code @MessageMapping} methods., +	 * <p><strong>Note:</strong> the given handlers are not required to be, +	 * annotated with {@code @Controller}. Consider also using, +	 * {@link #setAutoDetectDisabled()} if the intent is to use these handlers, +	 * instead of, and not in addition to {@code @Controller} classes. Or, +	 * alternatively use {@link #setHandlerPredicate(Predicate)} to select a, +	 * different set of beans based on a different criteria., +	 * @param handlers the handlers to register, +	 * @see #setAutoDetectDisabled(), +	 * @see #setHandlerPredicate(Predicate), +	 */, +	public void setHandlers(List<Object> handlers) {, +		for (Object handler : handlers) {, +			detectHandlerMethods(handler);, +		}, +		// Disable auto-detection.., +		this.handlerPredicate = null;, +	}, +, +	/**, +	 * Configure the predicate to use for selecting which Spring beans to check, +	 * for {@code @MessageMapping} methods. When set to {@code null},, +	 * auto-detection is turned off which is what, +	 * {@link #setAutoDetectDisabled()} does internally., +	 * <p>The predicate used by default selects {@code @Controller} classes., +	 * @see #setHandlers(List), +	 * @see #setAutoDetectDisabled(), +	 */, +	public void setHandlerPredicate(@Nullable Predicate<Class<?>> handlerPredicate) {, +		this.handlerPredicate = handlerPredicate;, +	}, +, +	/**, +	 * Return the {@link #setHandlerPredicate configured} handler predicate., +	 */, +	@Nullable, +	public Predicate<Class<?>> getHandlerPredicate() {, +		return this.handlerPredicate;, +	}, +, +	/**, +	 * Disable auto-detection of {@code @MessageMapping} methods, e.g. in, +	 * {@code @Controller}s, by setting {@link #setHandlerPredicate(Predicate), +	 * setHandlerPredicate(null)}., +	 */, +	public void setAutoDetectDisabled() {, +		this.handlerPredicate = null;, +	}, +, +	/**, +	protected Predicate<Class<?>> initHandlerPredicate() {, +		return this.handlerPredicate;, +++ /dev/null, +++ /dev/null, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/reactive/MessageMappingMessageHandler.java, +		implements EmbeddedValueResolverAware {, +	@Nullable, +	private Predicate<Class<?>> handlerPredicate =, +			beanType -> AnnotatedElementUtils.hasAnnotation(beanType, Controller.class);, +	public MessageMappingMessageHandler() {, +	 * Manually configure handlers to check for {@code @MessageMapping} methods., +	 * <p><strong>Note:</strong> the given handlers are not required to be, +	 * annotated with {@code @Controller}. Consider also using, +	 * {@link #setAutoDetectDisabled()} if the intent is to use these handlers, +	 * instead of, and not in addition to {@code @Controller} classes. Or, +	 * alternatively use {@link #setHandlerPredicate(Predicate)} to select a, +	 * different set of beans based on a different criteria., +	 * @param handlers the handlers to register, +	 * @see #setAutoDetectDisabled(), +	 * @see #setHandlerPredicate(Predicate), +	 */, +	public void setHandlers(List<Object> handlers) {, +		for (Object handler : handlers) {, +			detectHandlerMethods(handler);, +		}, +		// Disable auto-detection.., +		this.handlerPredicate = null;, +	}, +, +	/**, +	 * Configure the predicate to use for selecting which Spring beans to check, +	 * for {@code @MessageMapping} methods. When set to {@code null},, +	 * auto-detection is turned off which is what, +	 * {@link #setAutoDetectDisabled()} does internally., +	 * <p>The predicate used by default selects {@code @Controller} classes., +	 * @see #setHandlers(List), +	 * @see #setAutoDetectDisabled(), +	 */, +	public void setHandlerPredicate(@Nullable Predicate<Class<?>> handlerPredicate) {]