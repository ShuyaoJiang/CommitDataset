[+++ b/src/docs/asciidoc/languages/kotlin.adoc, +In Kotlin, with reified type parameters and `GenericApplicationContext` Kotlin extensions,, +you can instead write the following:, +		registerBean { Bar(it.getBean()) }, +	}, +----, +====, +, +If the class `Bar` has a single constructor, you can even just specify the bean class,, +the constructor parameters will be autowired by type:, +, +====, +[source,kotlin,indent=0], +----, +	val context = GenericApplicationContext().apply {, +		registerBean<Foo>(), +		registerBean<Bar>(), +	val myBeans = beans {, +		bean<Foo>(), +		bean<Bar>(), +		bean("bazBean") {, +			Baz().apply {, +				message = "Hello world", +		profile("foobar") {, +			bean { FooBar(ref("bazBean")) }, +NOTE: This DSL is programmatic, meaning it allows custom registration logic of beans, +through an `if` expression, a `for` loop, or any other Kotlin constructs., +		myBeans.initialize(this), +See https://github.com/sdeleuze/spring-kotlin-functional[spring-kotlin-functional beans declaration] for a concrete example., +NOTE: Spring Boot is based on JavaConfig and, +that lets you use the <<web-reactive#webflux-fn,WebFlux functional API>> to write clean and idiomatic Kotlin code,, +as the following example shows:, +See https://github.com/mixitconf/mixit/tree/dafd5ccc92dfab6d9c306fcb60b28921a1ccbf79/src/main/kotlin/mixit/web/routes[MiXiT project routes], +This section addresses testing with the combination of Kotlin and Spring Framework. The recommended testing framework, +is https://junit.org/junit5/[JUnit 5], as well as https://mockk.io/[Mockk] for mocking., +==== Constructor injection, +, +As described in the <<testing#testcontext-junit-jupiter-di#spring-web-reactive,dedicated section>>, JUnit 5 allows, +constructor injection of beans which is pretty useful with Kotlin in order to use `val` instead of `lateinit var `., +, +, +====, +[source], +----, +@SpringJUnitConfig(TestConfig::class), +class OrderServiceIntegrationTests(@Autowired val orderService: OrderService,, +                                   @Autowired val customerService: CustomerService) {, +, +    // tests that use the injected OrderService and CustomerService, +}, +----, +====, +, +You can also use `@Autowired` at constructor level to autowire all parameters., +, +====, +[source], +----, +@SpringJUnitConfig(TestConfig::class), +class OrderServiceIntegrationTests @Autowired constructor(, +		val orderService: OrderService,, +		val customerService: CustomerService) {, +, +    // tests that use the injected OrderService and CustomerService, +}, +----, +====, +, +The easiest way to learn how to build a Spring application with Kotlin is to follow, +https://spring.io/guides/tutorials/spring-boot-kotlin/[the dedicated tutorial]., +=== `start.spring.io`, +long-lived connections, streaming scenarios or if you want to use the web functional, +MVC and its annotation-based programming model is the recommended choice., +** https://github.com/spring-projects/spring-framework/issues/20606[Unable to use WebTestClient with mock server in Kotlin], +** https://github.com/spring-projects/spring-framework/issues/20496[Support null-safety at generics, varargs and array elements level], +** https://github.com/spring-projects/spring-framework/issues/19975[Add support for Kotlin coroutines], +** https://youtrack.jetbrains.com/issue/KT-6653[Kotlin properties do not override Java-style getters and setters], +]