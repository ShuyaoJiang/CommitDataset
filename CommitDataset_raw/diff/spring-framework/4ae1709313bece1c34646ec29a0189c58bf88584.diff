[+++ b/org.springframework.web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, + * Copyright 2002-2010 the original author or authors., + * <p>This base class adds support for setting supported {@code MediaTypes}, through the, + * {@link #setSupportedMediaTypes(List) supportedMediaTypes} bean property. It also adds, + * support for {@code Content-Type} and {@code Content-Length} when writing to output messages., + * @author Juergen Hoeller, +, +, +	/**, +	 * Set the list of {@link MediaType} objects supported by this converter., +	 */, +, +	 * <p>This implementation checks if the given class is {@linkplain #supports(Class) supported},, +	 * and if the {@linkplain #getSupportedMediaTypes() supported media types}, +	 * {@linkplain MediaType#includes(MediaType) include} the given media type., +	 * Returns true if any of the {@linkplain #setSupportedMediaTypes(List) supported media types}, +	 * include the given media type., +	 * <p>This implementation checks if the given class is {@linkplain #supports(Class) supported},, +	 * and if the {@linkplain #getSupportedMediaTypes() supported media types}, +	 * {@linkplain MediaType#includes(MediaType) include} the given media type., +	 * <p>This implementation simple delegates to {@link #readInternal(Class, HttpInputMessage)}., +	 * Future implementations might add some default behavior, however., +	public final T read(Class<? extends T> clazz, HttpInputMessage inputMessage) throws IOException {, +	 * <p>This implementation delegates to {@link #getDefaultContentType(Object)} if a content, +	 * type was not provided, calls {@link #getContentLength}, and sets the corresponding headers, +	 * on the output message. It then calls {@link #writeInternal}., +, +	 * Returns the default content type for the given type. Called when {@link #write}, +	 * is invoked without a specified content type parameter., +	 * <p>By default, this returns the first element of the, +	 * {@link #setSupportedMediaTypes(List) supportedMediaTypes} property, if any., +	 * Can be overridden in subclasses., +	 * <p>By default, this returns {@code null}, meaning that the content length is unknown., +	 * Can be overridden in subclasses., +, +	/**, +	 * Indicates whether the given class is supported by this converter., +	 * @param clazz the class to test for support, +	 * @return <code>true</code> if supported; <code>false</code> otherwise, +	 */, +	protected abstract boolean supports(Class<?> clazz);, +, +	/**, +	 * Abstract template method that reads the actualy object. Invoked from {@link #read}., +	 * @param clazz the type of object to return, +	 * @param inputMessage the HTTP input message to read from, +	 * @return the converted object, +	 * @throws IOException in case of I/O errors, +	 * @throws HttpMessageNotReadableException in case of conversion errors, +	 */, +	protected abstract T readInternal(Class<? extends T> clazz, HttpInputMessage inputMessage), +			throws IOException, HttpMessageNotReadableException;, +, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, + * Copyright 2002-2010 the original author or authors., + * <p>This base class adds support for setting supported {@code MediaTypes}, through the, + * {@link #setSupportedMediaTypes(List) supportedMediaTypes} bean property. It also adds, + * support for {@code Content-Type} and {@code Content-Length} when writing to output messages., + * @author Juergen Hoeller, +, +, +	/**, +	 * Set the list of {@link MediaType} objects supported by this converter., +	 */, +, +	 * <p>This implementation checks if the given class is {@linkplain #supports(Class) supported},, +	 * and if the {@linkplain #getSupportedMediaTypes() supported media types}, +	 * {@linkplain MediaType#includes(MediaType) include} the given media type., +	 * Returns true if any of the {@linkplain #setSupportedMediaTypes(List) supported media types}, +	 * include the given media type., +	 * <p>This implementation checks if the given class is {@linkplain #supports(Class) supported},, +	 * and if the {@linkplain #getSupportedMediaTypes() supported media types}, +	 * {@linkplain MediaType#includes(MediaType) include} the given media type., +	 * <p>This implementation simple delegates to {@link #readInternal(Class, HttpInputMessage)}., +	 * Future implementations might add some default behavior, however., +	public final T read(Class<? extends T> clazz, HttpInputMessage inputMessage) throws IOException {, +	 * <p>This implementation delegates to {@link #getDefaultContentType(Object)} if a content, +	 * type was not provided, calls {@link #getContentLength}, and sets the corresponding headers, +	 * on the output message. It then calls {@link #writeInternal}., +, +	 * Returns the default content type for the given type. Called when {@link #write}, +	 * is invoked without a specified content type parameter., +	 * <p>By default, this returns the first element of the, +	 * {@link #setSupportedMediaTypes(List) supportedMediaTypes} property, if any., +	 * Can be overridden in subclasses., +	 * <p>By default, this returns {@code null}, meaning that the content length is unknown., +	 * Can be overridden in subclasses., +, +	/**, +	 * Indicates whether the given class is supported by this converter., +	 * @param clazz the class to test for support, +	 * @return <code>true</code> if supported; <code>false</code> otherwise, +	 */, +	protected abstract boolean supports(Class<?> clazz);, +, +	/**, +	 * Abstract template method that reads the actualy object. Invoked from {@link #read}., +	 * @param clazz the type of object to return, +	 * @param inputMessage the HTTP input message to read from, +	 * @return the converted object]