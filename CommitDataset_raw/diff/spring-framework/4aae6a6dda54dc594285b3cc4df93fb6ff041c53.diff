[+++ b/spring-context/src/main/java/org/springframework/remoting/support/SimpleHttpServerFactoryBean.java, +			this.contexts.forEach((key, context) -> {, +				HttpContext httpContext = this.server.createContext(key, context);, +			});, +++ b/spring-context/src/main/java/org/springframework/remoting/support/SimpleHttpServerFactoryBean.java, +			this.contexts.forEach((key, context) -> {, +				HttpContext httpContext = this.server.createContext(key, context);, +			});, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, +		allMatches.forEach((sessionId, subIds) -> {, +			for (String subId : subIds) {, +		});, +++ b/spring-context/src/main/java/org/springframework/remoting/support/SimpleHttpServerFactoryBean.java, +			this.contexts.forEach((key, context) -> {, +				HttpContext httpContext = this.server.createContext(key, context);, +			});, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, +		allMatches.forEach((sessionId, subIds) -> {, +			for (String subId : subIds) {, +		});, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +		params.forEach((key, value) -> {, +		});, +		params.forEach((key, value) -> {, +		});, +++ b/spring-context/src/main/java/org/springframework/remoting/support/SimpleHttpServerFactoryBean.java, +			this.contexts.forEach((key, context) -> {, +				HttpContext httpContext = this.server.createContext(key, context);, +			});, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, +		allMatches.forEach((sessionId, subIds) -> {, +			for (String subId : subIds) {, +		});, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +		params.forEach((key, value) -> {, +		});, +		params.forEach((key, value) -> {, +		});, +++ b/spring-test/src/main/java/org/springframework/test/web/ModelAndViewAssert.java, +		model.forEach((modelName, mavValue) -> {, +		});, +++ b/spring-context/src/main/java/org/springframework/remoting/support/SimpleHttpServerFactoryBean.java, +			this.contexts.forEach((key, context) -> {, +				HttpContext httpContext = this.server.createContext(key, context);, +			});, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, +		allMatches.forEach((sessionId, subIds) -> {, +			for (String subId : subIds) {, +		});, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +		params.forEach((key, value) -> {, +		});, +		params.forEach((key, value) -> {, +		});, +++ b/spring-test/src/main/java/org/springframework/test/web/ModelAndViewAssert.java, +		model.forEach((modelName, mavValue) -> {, +		});, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java, +		params.forEach((name, values) -> {, +			for (String value : values) {, +		});, +		sessionAttributes.forEach(this::sessionAttr);, +		flashAttributes.forEach(this::flashAttr);, +		this.headers.forEach((name, values) -> {, +			for (Object value : values) {, +		});, +		this.parameters.forEach((name, values) -> {, +			for (String value : values) {, +		});, +		this.requestAttributes.forEach(request::setAttribute);, +		this.sessionAttributes.forEach((name, attribute) -> {, +			session.setAttribute(name, attribute);, +		});, +++ b/spring-context/src/main/java/org/springframework/remoting/support/SimpleHttpServerFactoryBean.java, +			this.contexts.forEach((key, context) -> {, +				HttpContext httpContext = this.server.createContext(key, context);, +			});, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, +		allMatches.forEach((sessionId, subIds) -> {, +			for (String subId : subIds) {, +		});, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +		params.forEach((key, value) -> {, +		});, +		params.forEach((key, value) -> {, +		});, +++ b/spring-test/src/main/java/org/springframework/test/web/ModelAndViewAssert.java, +		model.forEach((modelName, mavValue) -> {, +		});, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java, +		params.forEach((name, values) -> {, +			for (String value : values) {, +		});, +		sessionAttributes.forEach(this::sessionAttr);, +		flashAttributes.forEach(this::flashAttr);, +		this.headers.forEach((name, values) -> {, +			for (Object value : values) {, +		});, +		this.parameters.forEach((name, values) -> {, +			for (String value : values) {]