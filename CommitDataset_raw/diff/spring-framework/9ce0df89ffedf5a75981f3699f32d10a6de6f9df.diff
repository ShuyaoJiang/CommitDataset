[+++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationIntegrationTests.java, +	public void viaContextRegistration_WithComposedAnnotation() {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationIntegrationTests.java, +	public void viaContextRegistration_WithComposedAnnotation() {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +, +		beanFactory.registerBeanDefinition("unloadedConfig", new RootBeanDefinition(UnloadedConfig.class.getName(),, +			null, null));, +	public void postProcessorWorksWithComposedConfigurationUsingReflection() {, +		RootBeanDefinition beanDefinition = new RootBeanDefinition(ComposedConfigurationClass.class);, +		postProcessorWorksWithComposedConfiguration(beanDefinition);, +	public void postProcessorWorksWithComposedConfigurationUsingAsm() {, +		RootBeanDefinition beanDefinition = new RootBeanDefinition(ComposedConfigurationClass.class.getName());, +		postProcessorWorksWithComposedConfiguration(beanDefinition);, +	public void postProcessorWorksWithComposedConfigurationWithAttributeOverridesUsingReflection() {, +		RootBeanDefinition beanDefinition = new RootBeanDefinition(, +			ComposedConfigurationWithAttributeOverridesClass.class);, +		postProcessorWorksWithComposedConfigurationWithAttributeOverrides(beanDefinition);, +	}, +, +	// TODO Remove expected exception when SPR-XXXXX is resolved., +	@Test(expected = ConflictingBeanDefinitionException.class), +	public void postProcessorWorksWithComposedConfigurationWithAttributeOverridesUsingAsm() {, +		RootBeanDefinition beanDefinition = new RootBeanDefinition(, +			ComposedConfigurationWithAttributeOverridesClass.class.getName());, +		postProcessorWorksWithComposedConfigurationWithAttributeOverrides(beanDefinition);, +	public void postProcessorWorksWithComposedComposedConfigurationWithAttributeOverridesUsingReflection() {, +		RootBeanDefinition beanDefinition = new RootBeanDefinition(, +			ComposedComposedConfigurationWithAttributeOverridesClass.class);, +		postProcessorWorksWithComposedComposedConfigurationWithAttributeOverrides(beanDefinition);, +	}, +, +	// TODO Remove expected exception when SPR-XXXXX is resolved., +	@Test(expected = ConflictingBeanDefinitionException.class), +	public void postProcessorWorksWithComposedComposedConfigurationWithAttributeOverridesUsingAsm() {, +		RootBeanDefinition beanDefinition = new RootBeanDefinition(, +			ComposedComposedConfigurationWithAttributeOverridesClass.class.getName());, +		postProcessorWorksWithComposedComposedConfigurationWithAttributeOverrides(beanDefinition);, +	public void postProcessorWorksWithMetaComponentScanConfigurationWithAttributeOverridesUsingReflection() {, +		RootBeanDefinition beanDefinition = new RootBeanDefinition(, +			MetaComponentScanConfigurationWithAttributeOverridesClass.class);, +		postProcessorWorksWithMetaComponentScanConfigurationWithAttributeOverrides(beanDefinition);, +	}, +, +	// TODO Remove expected exception when SPR-XXXXX is resolved., +	@Test(expected = ConflictingBeanDefinitionException.class), +	public void postProcessorWorksWithMetaComponentScanConfigurationWithAttributeOverridesUsingAsm() {, +		RootBeanDefinition beanDefinition = new RootBeanDefinition(, +			MetaComponentScanConfigurationWithAttributeOverridesClass.class.getName());, +		postProcessorWorksWithMetaComponentScanConfigurationWithAttributeOverrides(beanDefinition);, +	}, +, +	@Test, +	public void postProcessorWorksWithMetaComponentScanConfigurationWithAttributeOverridesSubclassUsingReflection() {, +		RootBeanDefinition beanDefinition = new RootBeanDefinition(, +			SubMetaComponentScanConfigurationWithAttributeOverridesClass.class);, +		postProcessorWorksWithMetaComponentScanConfigurationWithAttributeOverridesSubclass(beanDefinition);, +	}, +, +	// TODO Remove expected exception when SPR-XXXXX is resolved., +	@Test(expected = ConflictingBeanDefinitionException.class), +	public void postProcessorWorksWithMetaComponentScanConfigurationWithAttributeOverridesSubclassUsingAsm() {, +		RootBeanDefinition beanDefinition = new RootBeanDefinition(, +			SubMetaComponentScanConfigurationWithAttributeOverridesClass.class.getName());, +		postProcessorWorksWithMetaComponentScanConfigurationWithAttributeOverridesSubclass(beanDefinition);, +		BeanDefinitionHolder proxied = ScopedProxyUtils.createScopedProxy(new BeanDefinitionHolder(rbd, "bar"),, +			beanFactory, true);, +		beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(, +			ScopedProxyRepositoryConfiguration.class));, +		beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(, +			RepositoryFactoryBeanConfiguration.class));, +		beanFactory.registerBeanDefinition("configClass",, +			new RootBeanDefinition(WildcardWithExtendsConfiguration.class));, +		beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(, +			WildcardWithGenericExtendsConfiguration.class));, +	private void postProcessorWorksWithComposedConfiguration(RootBeanDefinition beanDefinition) {, +		beanFactory.registerBeanDefinition("config", beanDefinition);, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.setEnvironment(new StandardEnvironment());, +		pp.postProcessBeanFactory(beanFactory);, +		SimpleComponent simpleComponent = beanFactory.getBean(SimpleComponent.class);, +		assertNotNull(simpleComponent);, +	}, +, +	private void postProcessorWorksWithComposedConfigurationWithAttributeOverrides(RootBeanDefinition beanDefinition) {, +		beanFactory.registerBeanDefinition("config", beanDefinition);, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.setEnvironment(new StandardEnvironment());, +		pp.postProcessBeanFactory(beanFactory);, +		SimpleComponent simpleComponent = beanFactory.getBean(SimpleComponent.class);, +		assertNotNull(simpleComponent);, +	}, +, +	private void postProcessorWorksWithComposedComposedConfigurationWithAttributeOverrides(, +			RootBeanDefinition beanDefinition) {, +		beanFactory.registerBeanDefinition("config", beanDefinition);, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.setEnvironment(new StandardEnvironment());, +		pp.postProcessBeanFactory(beanFactory);, +		SimpleComponent simpleComponent = beanFactory.getBean(SimpleComponent.class);]