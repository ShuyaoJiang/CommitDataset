[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerExceptionResolver.java, +	private Log warnLogger = LogFactory.getLog(getClass());, +	 * <p>Default is warn logging using the {@link AbstractHandlerExceptionResolver} class name derived logger., +	 * Set to {@code null} to disable warn logging., +	 * Override the {@link #logException} method for custom logging., +		this.warnLogger = (loggerName != null ? LogFactory.getLog(loggerName) : null);, +			// Log exception at debug log level, +			if (this.logger.isDebugEnabled()) {, +				this.logger.debug("Resolving exception from handler [" + handler + "]: " + ex);, +			ModelAndView mav = doResolveException(request, response, handler, ex);, +			if (mav != null) {, +				// Log exception message at warn log level, +				logException(ex, request);, +			}, +			return mav;, +	 * Log the given exception message at warn level., +			this.warnLogger.warn(buildLogMessage(ex, request));, +		String message = (ex != null ? ex.getMessage() : "null");, +		return "Handler execution resulted in exception: " + (message != null ? message : "null");, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerExceptionResolver.java, +	private Log warnLogger = LogFactory.getLog(getClass());, +	 * <p>Default is warn logging using the {@link AbstractHandlerExceptionResolver} class name derived logger., +	 * Set to {@code null} to disable warn logging., +	 * Override the {@link #logException} method for custom logging., +		this.warnLogger = (loggerName != null ? LogFactory.getLog(loggerName) : null);, +			// Log exception at debug log level, +			if (this.logger.isDebugEnabled()) {, +				this.logger.debug("Resolving exception from handler [" + handler + "]: " + ex);, +			ModelAndView mav = doResolveException(request, response, handler, ex);, +			if (mav != null) {, +				// Log exception message at warn log level, +				logException(ex, request);, +			}, +			return mav;, +	 * Log the given exception message at warn level., +			this.warnLogger.warn(buildLogMessage(ex, request));, +		String message = (ex != null ? ex.getMessage() : "null");, +		return "Handler execution resulted in exception: " + (message != null ? message : "null");, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandlerTests.java, +import org.mockito.Mockito;, +		Exception ex = Mockito.mock(MethodArgumentNotValidException.class);]