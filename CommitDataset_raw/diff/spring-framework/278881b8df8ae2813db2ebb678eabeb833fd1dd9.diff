[+++ b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageWriter.java, +		mediaType = getMediaType(mediaType);, +		Charset charset = mediaType.getCharset();, +		Assert.notNull(charset, "No charset"); // should never occur, +, +	private MediaType getMediaType(@Nullable MediaType mediaType) {, +		if (mediaType == null) {, +			return DEFAULT_FORM_DATA_MEDIA_TYPE;, +		}, +		else if (mediaType.getCharset() == null) {, +			return new MediaType(mediaType, getDefaultCharset());, +			return mediaType;, +	private String serializeForm(MultiValueMap<String, String> formData, Charset charset) {, +		formData.forEach((name, values) ->, +				values.forEach(value -> {, +						if (builder.length() != 0) {, +							builder.append('&');, +						}, +						if (value != null) {, +							builder.append(URLEncoder.encode(value, charset.name()));, +				}));, +++ b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageWriter.java, +		mediaType = getMediaType(mediaType);, +		Charset charset = mediaType.getCharset();, +		Assert.notNull(charset, "No charset"); // should never occur, +, +	private MediaType getMediaType(@Nullable MediaType mediaType) {, +		if (mediaType == null) {, +			return DEFAULT_FORM_DATA_MEDIA_TYPE;, +		}, +		else if (mediaType.getCharset() == null) {, +			return new MediaType(mediaType, getDefaultCharset());, +			return mediaType;, +	private String serializeForm(MultiValueMap<String, String> formData, Charset charset) {, +		formData.forEach((name, values) ->, +				values.forEach(value -> {, +						if (builder.length() != 0) {, +							builder.append('&');, +						}, +						if (value != null) {, +							builder.append(URLEncoder.encode(value, charset.name()));, +				}));, +++ b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, +	private void writeForm(MultiValueMap<String, String> formData, @Nullable MediaType contentType,, +		contentType = getMediaType(contentType);, +		Charset charset = contentType.getCharset();, +		Assert.notNull(charset, "No charset"); // should never occur, +, +		formData.forEach((name, values) ->, +				values.forEach(value -> {, +					try {, +						if (builder.length() != 0) {, +							builder.append('&');, +						}, +					catch (UnsupportedEncodingException ex) {, +						throw new IllegalStateException(ex);, +				}));, +, +	private MediaType getMediaType(@Nullable MediaType mediaType) {, +		if (mediaType == null) {, +			return DEFAULT_FORM_DATA_MEDIA_TYPE;, +		}, +		else if (mediaType.getCharset() == null) {, +			return new MediaType(mediaType, this.charset);, +		}, +		else {, +			return mediaType;, +		}, +	}, +]