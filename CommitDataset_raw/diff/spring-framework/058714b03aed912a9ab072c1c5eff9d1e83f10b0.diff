[+++ b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java, + * Copyright 2002-2015 the original author or authors., +, +			// Special handling of default encoding, +				// Delegate handling of "java.class" format to standard Control, +++ b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java, + * Copyright 2002-2015 the original author or authors., +, +			// Special handling of default encoding, +				// Delegate handling of "java.class" format to standard Control, +++ b/spring-core/src/main/java/org/springframework/util/AlternativeJdkIdGenerator.java, +	@Override, +++ b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java, + * Copyright 2002-2015 the original author or authors., +, +			// Special handling of default encoding, +				// Delegate handling of "java.class" format to standard Control, +++ b/spring-core/src/main/java/org/springframework/util/AlternativeJdkIdGenerator.java, +	@Override, +++ b/spring-core/src/main/java/org/springframework/util/JdkIdGenerator.java, +	@Override, +++ b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java, + * Copyright 2002-2015 the original author or authors., +, +			// Special handling of default encoding, +				// Delegate handling of "java.class" format to standard Control, +++ b/spring-core/src/main/java/org/springframework/util/AlternativeJdkIdGenerator.java, +	@Override, +++ b/spring-core/src/main/java/org/springframework/util/JdkIdGenerator.java, +	@Override, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractMethodArgumentResolutionException.java, + * Copyright 2002-2015 the original author or authors., +	 * a prepared description. Subclasses should prepend the description with, +	protected AbstractMethodArgumentResolutionException(Message<?> message, MethodParameter param, String description) {, +		this.parameter = param;, +, +	public final MethodParameter getMethodParameter() {, +, +++ b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java, + * Copyright 2002-2015 the original author or authors., +, +			// Special handling of default encoding, +				// Delegate handling of "java.class" format to standard Control, +++ b/spring-core/src/main/java/org/springframework/util/AlternativeJdkIdGenerator.java, +	@Override, +++ b/spring-core/src/main/java/org/springframework/util/JdkIdGenerator.java, +	@Override, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractMethodArgumentResolutionException.java, + * Copyright 2002-2015 the original author or authors., +	 * a prepared description. Subclasses should prepend the description with, +	protected AbstractMethodArgumentResolutionException(Message<?> message, MethodParameter param, String description) {, +		this.parameter = param;, +, +	public final MethodParameter getMethodParameter() {, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/MethodArgumentNotValidException.java, + * Copyright 2002-2015 the original author or authors., +		super(message, parameter, getMethodParamMessage(parameter) + getValidationErrorMessage(bindingResult));, +	 * Return the BindingResult if the failure is validation-related,, +	 * or {@code null} if none., +	public final BindingResult getBindingResult() {, +	private static String getValidationErrorMessage(BindingResult bindingResult) {, +++ b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java, + * Copyright 2002-2015 the original author or authors., +, +			// Special handling of default encoding, +				// Delegate handling of "java.class" format to standard Control, +++ b/spring-core/src/main/java/org/springframework/util/AlternativeJdkIdGenerator.java, +	@Override, +++ b/spring-core/src/main/java/org/springframework/util/JdkIdGenerator.java, +	@Override, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractMethodArgumentResolutionException.java, + * Copyright 2002-2015 the original author or authors., +	 * a prepared description. Subclasses should prepend the description with, +	protected AbstractMethodArgumentResolutionException(Message<?> message, MethodParameter param, String description) {, +		this.parameter = param;, +, +	public final MethodParameter getMethodParameter() {, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/MethodArgumentNotValidException.java, + * Copyright 2002-2015 the original author or authors., +		super(message, parameter, getMethodParamMessage(parameter) + getValidationErrorMessage(bindingResult));, +	 * Return the BindingResult if the failure is validation-related,, +	 * or {@code null} if none., +	public final BindingResult getBindingResult() {, +	private static String getValidationErrorMessage(BindingResult bindingResult) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/MethodArgumentTypeMismatchException.java, + * Copyright 2002-2015 the original author or authors., +	public MethodArgumentTypeMismatchException(Message<?> message, MethodParameter param, String description) {, +		super(message, param, getMethodParamMessage(param) + description);, +, +++ b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java, + * Copyright 2002-2015 the original author or authors., +, +			// Special handling of default encoding, +				// Delegate handling of "java.class" format to standard Control, +++ b/spring-core/src/main/java/org/springframework/util/AlternativeJdkIdGenerator.java, +	@Override, +++ b/spring-core/src/main/java/org/springframework/util/JdkIdGenerator.java, +	@Override]