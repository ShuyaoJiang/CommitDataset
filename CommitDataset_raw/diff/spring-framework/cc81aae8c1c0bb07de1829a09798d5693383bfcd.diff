[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/theme/CookieThemeResolver.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.util.StringUtils;, + * {@link ThemeResolver} implementation that uses a cookie sent back to the user, +		String themeName = (String) request.getAttribute(THEME_REQUEST_ATTRIBUTE_NAME);, +		if (themeName != null) {, +			return themeName;, +			String value = cookie.getValue();, +			if (StringUtils.hasText(value)) {, +				themeName = value;, +			}, +		if (themeName == null) {, +			themeName = getDefaultThemeName();, +		}, +		request.setAttribute(THEME_REQUEST_ATTRIBUTE_NAME, themeName);, +		return themeName;, +		if (StringUtils.hasText(themeName)) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/theme/CookieThemeResolver.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.util.StringUtils;, + * {@link ThemeResolver} implementation that uses a cookie sent back to the user, +		String themeName = (String) request.getAttribute(THEME_REQUEST_ATTRIBUTE_NAME);, +		if (themeName != null) {, +			return themeName;, +			String value = cookie.getValue();, +			if (StringUtils.hasText(value)) {, +				themeName = value;, +			}, +		if (themeName == null) {, +			themeName = getDefaultThemeName();, +		}, +		request.setAttribute(THEME_REQUEST_ATTRIBUTE_NAME, themeName);, +		return themeName;, +		if (StringUtils.hasText(themeName)) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/theme/SessionThemeResolver.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.util.StringUtils;, + * {@link org.springframework.web.servlet.ThemeResolver} implementation that, + * uses a theme attribute in the user's session in case of a custom setting,, + * with a fallback to the default theme. This is most appropriate if the, + * application needs user sessions anyway., +, +		String themeName = (String) WebUtils.getSessionAttribute(request, THEME_SESSION_ATTRIBUTE_NAME);, +		// A specific theme indicated, or do we need to fallback to the default?, +		return (themeName != null ? themeName : getDefaultThemeName());, +		WebUtils.setSessionAttribute(request, THEME_SESSION_ATTRIBUTE_NAME,, +				(StringUtils.hasText(themeName) ? themeName : null));]