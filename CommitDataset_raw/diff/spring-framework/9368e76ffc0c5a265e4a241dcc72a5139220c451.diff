[+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/BindingResult.java, +	 * If an error result, the error code; for example, "invalidFormat" or "propertyNotFound"., +	 * If an error, result returns a default message describing what went wrong., +	 */, +	String getErrorMessage();, +, +, +	/**, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/BindingResult.java, +	 * If an error result, the error code; for example, "invalidFormat" or "propertyNotFound"., +	 * If an error, result returns a default message describing what went wrong., +	 */, +	String getErrorMessage();, +, +, +	/**, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/GenericBinder.java, +import org.springframework.core.convert.ConversionFailedException;, +import org.springframework.core.style.StylerUtils;, +import org.springframework.expression.AccessException;, +		public String getErrorMessage() {, +			return "Failed to bind to property '" + property + "'; the user value " + StylerUtils.style(formatted) + " has an invalid format and could no be parsed";, +		}, +		, +		public String getErrorMessage() {, +		    SpelMessage spelCode = ((SpelEvaluationException) e).getMessageCode();, +		    if (spelCode == SpelMessage.EXCEPTION_DURING_PROPERTY_WRITE) {, +		    	AccessException accessException = (AccessException) e.getCause();, +		    	if (accessException.getCause() != null) {, +		    		Throwable cause = accessException.getCause();, +		    		if (cause instanceof SpelEvaluationException && ((SpelEvaluationException)cause).getMessageCode() == SpelMessage.TYPE_CONVERSION_ERROR) {, +		    			ConversionFailedException failure = (ConversionFailedException) cause.getCause();, +		    			return "Failed to bind to property '" + property + "'; user value " + StylerUtils.style(formatted) + " could not be converted to property type [" + failure.getTargetType() + "]";, +		    		}, +		    	}, +		    } else if (spelCode==SpelMessage.PROPERTY_OR_FIELD_NOT_READABLE) {, +	    		return "Failed to bind to property '" + property + "'; no such property exists on model";, +		    }, +    		return "Failed to bind to property '" + property + "'; reason = " + e.getLocalizedMessage();, +		}, +, +		public String getErrorMessage() {, +			return null;, +		}, +		, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/BindingResult.java, +	 * If an error result, the error code; for example, "invalidFormat" or "propertyNotFound"., +	 * If an error, result returns a default message describing what went wrong., +	 */, +	String getErrorMessage();, +, +, +	/**, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/GenericBinder.java, +import org.springframework.core.convert.ConversionFailedException;, +import org.springframework.core.style.StylerUtils;, +import org.springframework.expression.AccessException;, +		public String getErrorMessage() {, +			return "Failed to bind to property '" + property + "'; the user value " + StylerUtils.style(formatted) + " has an invalid format and could no be parsed";, +		}, +		, +		public String getErrorMessage() {, +		    SpelMessage spelCode = ((SpelEvaluationException) e).getMessageCode();, +		    if (spelCode == SpelMessage.EXCEPTION_DURING_PROPERTY_WRITE) {, +		    	AccessException accessException = (AccessException) e.getCause();, +		    	if (accessException.getCause() != null) {, +		    		Throwable cause = accessException.getCause();, +		    		if (cause instanceof SpelEvaluationException && ((SpelEvaluationException)cause).getMessageCode() == SpelMessage.TYPE_CONVERSION_ERROR) {, +		    			ConversionFailedException failure = (ConversionFailedException) cause.getCause();, +		    			return "Failed to bind to property '" + property + "'; user value " + StylerUtils.style(formatted) + " could not be converted to property type [" + failure.getTargetType() + "]";, +		    		}, +		    	}, +		    } else if (spelCode==SpelMessage.PROPERTY_OR_FIELD_NOT_READABLE) {, +	    		return "Failed to bind to property '" + property + "'; no such property exists on model";, +		    }, +    		return "Failed to bind to property '" + property + "'; reason = " + e.getLocalizedMessage();, +		}, +, +		public String getErrorMessage() {, +			return null;, +		}, +		, +++ b/org.springframework.context/src/main/java/org/springframework/ui/lifecycle/WebBindAndValidateLifecycle.java, +import org.springframework.ui.message.ResolvableArgument;, +import org.springframework.ui.message.Severity;, +		// TODO allow binder to be configured with bindings from @Model metadata, +		if (validator != null && validationDecider.shouldValidateAfter(bindingResults)) {, +				severity(Severity.ERROR)., +				arg("label", new ResolvableArgument(getModelProperty(result)))., +				defaultText(result.getErrorMessage())., +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/BindingResult.java, +	 * If an error result, the error code; for example, "invalidFormat" or "propertyNotFound"., +	 * If an error, result returns a default message describing what went wrong., +	 */, +	String getErrorMessage();, +, +, +	/**, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/GenericBinder.java, +import org.springframework.core.convert.ConversionFailedException;]