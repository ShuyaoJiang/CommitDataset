[+++ b/spring-web/src/test/java/org/springframework/web/method/MvcAnnotationPredicates.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.method;, +, +import java.lang.reflect.Method;, +import java.util.Arrays;, +import java.util.function.Predicate;, +, +import org.springframework.core.MethodParameter;, +import org.springframework.core.annotation.AnnotatedElementUtils;, +import org.springframework.http.HttpStatus;, +import org.springframework.web.bind.annotation.ModelAttribute;, +import org.springframework.web.bind.annotation.RequestBody;, +import org.springframework.web.bind.annotation.RequestMapping;, +import org.springframework.web.bind.annotation.RequestMethod;, +import org.springframework.web.bind.annotation.RequestParam;, +import org.springframework.web.bind.annotation.RequestPart;, +import org.springframework.web.bind.annotation.ResponseStatus;, +import org.springframework.web.bind.annotation.ValueConstants;, +, +/**, + * Predicates for {@code @MVC} annotations., + *, + * @author Rossen Stoyanchev, + * @since 5.0, + *, + * @see ResolvableMethod#annot(Predicate[]), + * @see ResolvableMethod.Builder#annot(Predicate[]), + */, +public class MvcAnnotationPredicates {, +, +, +	// Method parameter predicates, +, +	public static ModelAttributePredicate modelAttribute() {, +		return new ModelAttributePredicate();, +	}, +, +	public static RequestBodyPredicate requestBody() {, +		return new RequestBodyPredicate();, +	}, +, +	public static RequestParamPredicate requestParam() {, +		return new RequestParamPredicate();, +	}, +, +	public static RequestPartPredicate requestPart() {, +		return new RequestPartPredicate();, +	}, +, +, +	// Method predicates, +, +	public static ModelAttributeMethodPredicate modelMethod() {, +		return new ModelAttributeMethodPredicate();, +	}, +, +	public static ResponseStatusPredicate responseStatus() {, +		return new ResponseStatusPredicate();, +	}, +, +	public static ResponseStatusPredicate responseStatus(HttpStatus code) {, +		return new ResponseStatusPredicate(code);, +	}, +, +	public static RequestMappingPredicate requestMapping(String... path) {, +		return new RequestMappingPredicate(path);, +	}, +, +	public static RequestMappingPredicate getMapping(String... path) {, +		return new RequestMappingPredicate(path).method(RequestMethod.GET);, +	}, +, +	public static RequestMappingPredicate postMapping(String... path) {, +		return new RequestMappingPredicate(path).method(RequestMethod.POST);, +	}, +, +	public static RequestMappingPredicate putMapping(String... path) {, +		return new RequestMappingPredicate(path).method(RequestMethod.PUT);, +	}, +, +	public static RequestMappingPredicate deleteMapping(String... path) {, +		return new RequestMappingPredicate(path).method(RequestMethod.DELETE);, +	}, +, +	public static RequestMappingPredicate optionsMapping(String... path) {]