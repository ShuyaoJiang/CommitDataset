[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, +			for (String headerName : entityHeaders.keySet()) {, +				if(!HttpHeaders.LAST_MODIFIED.equals(headerName), +					&& !HttpHeaders.ETAG.equals(headerName)) {, +					outputMessage.getHeaders().put(headerName, entityHeaders.get(headerName));, +				}, +			}, +		else {, +			if (!entityHeaders.isEmpty()) {, +				outputMessage.getHeaders().putAll(entityHeaders);, +			}, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, +			for (String headerName : entityHeaders.keySet()) {, +				if(!HttpHeaders.LAST_MODIFIED.equals(headerName), +					&& !HttpHeaders.ETAG.equals(headerName)) {, +					outputMessage.getHeaders().put(headerName, entityHeaders.get(headerName));, +				}, +			}, +		else {, +			if (!entityHeaders.isEmpty()) {, +				outputMessage.getHeaders().putAll(entityHeaders);, +			}, +		}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessorMockTests.java, +		assertEquals(1, servletResponse.getHeaderValues(HttpHeaders.LAST_MODIFIED).size());, +		assertEquals(1, servletResponse.getHeaderValues(HttpHeaders.ETAG).size());, +		assertEquals(1, servletResponse.getHeaderValues(HttpHeaders.LAST_MODIFIED).size());, +		assertEquals(1, servletResponse.getHeaderValues(HttpHeaders.ETAG).size());, +		assertEquals(1, servletResponse.getHeaderValues(HttpHeaders.LAST_MODIFIED).size());, +		assertEquals(1, servletResponse.getHeaderValues(HttpHeaders.ETAG).size());]