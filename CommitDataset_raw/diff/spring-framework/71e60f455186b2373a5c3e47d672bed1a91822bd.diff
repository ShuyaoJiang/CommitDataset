[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ConversionUtils.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ConversionUtils.java, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java, +		List result = (List) conversionService.convert("1,2,3", new TypeDescriptor(getClass().getField("genericList")));, +		List<Integer> result = (List<Integer>) conversionService.convert(3L, new TypeDescriptor(getClass().getField("genericList")));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ConversionUtils.java, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java, +		List result = (List) conversionService.convert("1,2,3", new TypeDescriptor(getClass().getField("genericList")));, +		List<Integer> result = (List<Integer>) conversionService.convert(3L, new TypeDescriptor(getClass().getField("genericList")));, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +, +	// 3.1 additions for encapsulation of TypeDescriptor.forObject(value);, +	, +	Object convertValue(Object value, TypeDescriptor targetType);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ConversionUtils.java, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java, +		List result = (List) conversionService.convert("1,2,3", new TypeDescriptor(getClass().getField("genericList")));, +		List<Integer> result = (List<Integer>) conversionService.convert(3L, new TypeDescriptor(getClass().getField("genericList")));, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +, +	// 3.1 additions for encapsulation of TypeDescriptor.forObject(value);, +	, +	Object convertValue(Object value, TypeDescriptor targetType);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, +		return this.relatedContext.getTypeConverter().convertValue(value.getValue(), targetTypeDescriptor);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ConversionUtils.java, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java, +		List result = (List) conversionService.convert("1,2,3", new TypeDescriptor(getClass().getField("genericList")));, +		List<Integer> result = (List<Integer>) conversionService.convert(3L, new TypeDescriptor(getClass().getField("genericList")));, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +, +	// 3.1 additions for encapsulation of TypeDescriptor.forObject(value);, +	, +	Object convertValue(Object value, TypeDescriptor targetType);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, +		return this.relatedContext.getTypeConverter().convertValue(value.getValue(), targetTypeDescriptor);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, +			newObjectArray[i] = typeConverter.convertValue(arrayEntry, toTypeDescriptor);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ConversionUtils.java, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java, +		List result = (List) conversionService.convert("1,2,3", new TypeDescriptor(getClass().getField("genericList")));, +		List<Integer> result = (List<Integer>) conversionService.convert(3L, new TypeDescriptor(getClass().getField("genericList")));, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +, +	// 3.1 additions for encapsulation of TypeDescriptor.forObject(value);, +	, +	Object convertValue(Object value, TypeDescriptor targetType);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, +		return this.relatedContext.getTypeConverter().convertValue(value.getValue(), targetTypeDescriptor);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, +			newObjectArray[i] = typeConverter.convertValue(arrayEntry, toTypeDescriptor);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Projection.java, +					state.pushActiveContextObject(new TypedValue(element));, +				return new TypedValue(resultArray);, +			return new TypedValue(result);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ConversionUtils.java, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java, +		List result = (List) conversionService.convert("1,2,3", new TypeDescriptor(getClass().getField("genericList")));, +		List<Integer> result = (List<Integer>) conversionService.convert(3L, new TypeDescriptor(getClass().getField("genericList")));, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +, +	// 3.1 additions for encapsulation of TypeDescriptor.forObject(value);, +	, +	Object convertValue(Object value, TypeDescriptor targetType);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, +		return this.relatedContext.getTypeConverter().convertValue(value.getValue(), targetTypeDescriptor);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, +			newObjectArray[i] = typeConverter.convertValue(arrayEntry, toTypeDescriptor);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Projection.java, +					state.pushActiveContextObject(new TypedValue(element));, +				return new TypedValue(resultArray);, +			return new TypedValue(result);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Selection.java, +				return new TypedValue(resultMap);, +			return new TypedValue(result);, +					state.pushActiveContextObject(new TypedValue(element));, +								return new TypedValue(element);, +				return new TypedValue(result.get(result.size() - 1));, +				return new TypedValue(result);, +				return new TypedValue(resultArray);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ConversionUtils.java, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java, +		List result = (List) conversionService.convert("1,2,3", new TypeDescriptor(getClass().getField("genericList")));, +		List<Integer> result = (List<Integer>) conversionService.convert(3L, new TypeDescriptor(getClass().getField("genericList")));, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +, +	// 3.1 additions for encapsulation of TypeDescriptor.forObject(value);, +	, +	Object convertValue(Object value, TypeDescriptor targetType);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, +		return this.relatedContext.getTypeConverter().convertValue(value.getValue(), targetTypeDescriptor);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, +			newObjectArray[i] = typeConverter.convertValue(arrayEntry, toTypeDescriptor);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Projection.java, +					state.pushActiveContextObject(new TypedValue(element));, +				return new TypedValue(resultArray);, +			return new TypedValue(result);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Selection.java, +				return new TypedValue(resultMap);, +			return new TypedValue(result);]