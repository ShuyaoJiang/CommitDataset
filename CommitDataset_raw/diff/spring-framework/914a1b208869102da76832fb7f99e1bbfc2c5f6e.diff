[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, + * Copyright 2002-2012 the original author or authors., +			boolean checkMeta = true;, +			boolean fallbackToMeta = false;, +					fallbackToMeta = true;, +				}, +				else {, +					checkMeta = false;, +				}, +			}, +			if (checkMeta) {, +				boolean foundMeta = false;, +				for (Annotation metaAnn : type.getAnnotations()) {, +					Class<? extends Annotation> metaType = metaAnn.annotationType();, +					if (isQualifier(metaType)) {, +						foundMeta = true;, +						// Only accept fallback match if @Qualifier annotation has a value..., +						// Otherwise it is just a marker for a custom qualifier annotation., +						if ((fallbackToMeta && AnnotationUtils.getValue(metaAnn) == null) ||, +								!checkQualifier(bdHolder, metaAnn, typeConverter)) {, +							return false;, +						}, +					}, +				}, +				if (fallbackToMeta && !foundMeta) {, +				targetAnnotation = AnnotationUtils.getAnnotation(bd.getResolvedFactoryMethod(), type);, +						targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type);, +					targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type);, +				return extractValue(annotation);, +			}, +		}, +		for (Annotation annotation : annotationsToSearch) {, +			Annotation metaAnn = annotation.annotationType().getAnnotation(this.valueAnnotationType);, +			if (metaAnn != null) {, +				return extractValue(metaAnn);, +			}, +		}, +		return null;, +	}, +, +	/**, +	 * Extract the value attribute from the given annotation., +	 */, +	protected Object extractValue(Annotation valueAnnotation) {, +		Object value = AnnotationUtils.getValue(valueAnnotation);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, + * Copyright 2002-2012 the original author or authors., +			boolean checkMeta = true;, +			boolean fallbackToMeta = false;, +					fallbackToMeta = true;, +				}, +				else {, +					checkMeta = false;, +				}, +			}, +			if (checkMeta) {, +				boolean foundMeta = false;, +				for (Annotation metaAnn : type.getAnnotations()) {, +					Class<? extends Annotation> metaType = metaAnn.annotationType();, +					if (isQualifier(metaType)) {, +						foundMeta = true;, +						// Only accept fallback match if @Qualifier annotation has a value..., +						// Otherwise it is just a marker for a custom qualifier annotation., +						if ((fallbackToMeta && AnnotationUtils.getValue(metaAnn) == null) ||, +								!checkQualifier(bdHolder, metaAnn, typeConverter)) {, +							return false;, +						}, +					}, +				}, +				if (fallbackToMeta && !foundMeta) {, +				targetAnnotation = AnnotationUtils.getAnnotation(bd.getResolvedFactoryMethod(), type);, +						targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type);, +					targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type);, +				return extractValue(annotation);, +			}, +		}, +		for (Annotation annotation : annotationsToSearch) {, +			Annotation metaAnn = annotation.annotationType().getAnnotation(this.valueAnnotationType);, +			if (metaAnn != null) {, +				return extractValue(metaAnn);, +			}, +		}, +		return null;, +	}, +, +	/**, +	 * Extract the value attribute from the given annotation., +	 */, +	protected Object extractValue(Annotation valueAnnotation) {, +		Object value = AnnotationUtils.getValue(valueAnnotation);, +++ b/spring-context/src/test/java/org/springframework/beans/factory/support/QualifierAnnotationAutowireContextTests.java, + * Copyright 2002-2012 the original author or authors., +import static org.junit.Assert.*;, +, +	public void testAutowiredFieldResolvesMetaQualifiedCandidate() {, +		GenericApplicationContext context = new GenericApplicationContext();, +		ConstructorArgumentValues cavs1 = new ConstructorArgumentValues();, +		cavs1.addGenericArgumentValue(JUERGEN);, +		RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null);, +		person1.addQualifier(new AutowireCandidateQualifier(TestQualifier.class));]