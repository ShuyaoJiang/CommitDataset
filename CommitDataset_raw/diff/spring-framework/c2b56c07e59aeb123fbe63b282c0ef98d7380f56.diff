[+++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +		CachedIntrospectionResults cachedIntrospectionResults = getCachedIntrospectionResults();, +		PropertyDescriptor pd = cachedIntrospectionResults.getPropertyDescriptor(propertyName);, +		TypeDescriptor td = cachedIntrospectionResults.getTypeDescriptor(pd);, +		if (td == null) {, +			td = new TypeDescriptor(property(pd));, +			cachedIntrospectionResults.putTypeDescriptor(pd, td);, +		}, +		return convertForProperty(propertyName, null, value, pd, td);, +	private Object convertForProperty(String propertyName, Object oldValue, Object newValue, PropertyDescriptor pd, TypeDescriptor td), +		return convertIfNecessary(propertyName, oldValue, newValue, pd.getPropertyType(), td);, +						valueToApply = convertForProperty(propertyName, oldValue, originalValue, pd, new TypeDescriptor(property(pd)));, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +		CachedIntrospectionResults cachedIntrospectionResults = getCachedIntrospectionResults();, +		PropertyDescriptor pd = cachedIntrospectionResults.getPropertyDescriptor(propertyName);, +		TypeDescriptor td = cachedIntrospectionResults.getTypeDescriptor(pd);, +		if (td == null) {, +			td = new TypeDescriptor(property(pd));, +			cachedIntrospectionResults.putTypeDescriptor(pd, td);, +		}, +		return convertForProperty(propertyName, null, value, pd, td);, +	private Object convertForProperty(String propertyName, Object oldValue, Object newValue, PropertyDescriptor pd, TypeDescriptor td), +		return convertIfNecessary(propertyName, oldValue, newValue, pd.getPropertyType(), td);, +						valueToApply = convertForProperty(propertyName, oldValue, originalValue, pd, new TypeDescriptor(property(pd)));, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +import java.util.HashMap;, +import org.springframework.core.convert.TypeDescriptor;, +	/** TypeDescriptor objects keyed by PropertyDescriptor */, +	private final Map<PropertyDescriptor, TypeDescriptor> typeDescriptorCache;, +, +, +			this.typeDescriptorCache = new HashMap<PropertyDescriptor, TypeDescriptor>();, +	TypeDescriptor getTypeDescriptor(PropertyDescriptor pd) {, +		return this.typeDescriptorCache.get(pd);, +	}, +, +	void putTypeDescriptor(PropertyDescriptor pd, TypeDescriptor td) {, +		this.typeDescriptorCache.put(pd, td);, +	}, +]