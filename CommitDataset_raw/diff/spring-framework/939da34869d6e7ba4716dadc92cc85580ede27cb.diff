[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.jdbc.core.SqlParameter;, +		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource);, +		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters);, +		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource);, +		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters);, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.jdbc.core.SqlParameter;, +		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource);, +		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters);, +		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource);, +		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters);, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java, + * Copyright 2002-2011 the original author or authors., +import java.util.LinkedList;, +	 * Convert parameter types from an SqlParameterSource into a corresponding int array., +		List<String> paramNames = parsedSql.getParameterNames();, +			String paramName = paramNames.get(i);, +	/**, +	 * Convert parameter declarations from an SqlParameterSource to a corresponding List of SqlParameters., +	 * This is necessary in order to reuse existing methods on JdbcTemplate., +	 * The SqlParameter for a named parameter is placed in the correct position in the, +	 * resulting list based on the parsed SQL statement info., +	 * @param parsedSql the parsed SQL statement, +	 * @param paramSource the source for named parameters, +	 */, +	public static List<SqlParameter> buildSqlParameterList(ParsedSql parsedSql, SqlParameterSource paramSource) {, +		List<String> paramNames = parsedSql.getParameterNames();, +		List<SqlParameter> params = new LinkedList<SqlParameter>();, +		for (String paramName : paramNames) {, +			SqlParameter param = new SqlParameter(, +					paramName,, +					paramSource.getSqlType(paramName),, +					paramSource.getTypeName(paramName));, +			params.add(param);, +		}, +		return params;, +	}, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.jdbc.core.SqlParameter;, +		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource);, +		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters);, +		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource);, +		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters);, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java, + * Copyright 2002-2011 the original author or authors., +import java.util.LinkedList;, +	 * Convert parameter types from an SqlParameterSource into a corresponding int array., +		List<String> paramNames = parsedSql.getParameterNames();, +			String paramName = paramNames.get(i);, +	/**, +	 * Convert parameter declarations from an SqlParameterSource to a corresponding List of SqlParameters., +	 * This is necessary in order to reuse existing methods on JdbcTemplate., +	 * The SqlParameter for a named parameter is placed in the correct position in the, +	 * resulting list based on the parsed SQL statement info., +	 * @param parsedSql the parsed SQL statement, +	 * @param paramSource the source for named parameters, +	 */, +	public static List<SqlParameter> buildSqlParameterList(ParsedSql parsedSql, SqlParameterSource paramSource) {, +		List<String> paramNames = parsedSql.getParameterNames();, +		List<SqlParameter> params = new LinkedList<SqlParameter>();, +		for (String paramName : paramNames) {, +			SqlParameter param = new SqlParameter(, +					paramName,, +					paramSource.getSqlType(paramName),, +					paramSource.getTypeName(paramName));, +			params.add(param);, +		}, +		return params;, +	}, +++ b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/core/namedparam/NamedParameterUtilsTests.java, + * Copyright 2002-2011 the original author or authors., +	@Test, +	public void convertTypeMapToSqlParameterList() {, +		MapSqlParameterSource namedParams = new MapSqlParameterSource();, +		namedParams.addValue("a", "a", 1).addValue("b", "b", 2).addValue("c", "c", 3, "SQL_TYPE");, +		assertSame(3, NamedParameterUtils, +				.buildSqlParameterList(NamedParameterUtils.parseSqlStatement("xxx :a :b :c"), namedParams).size());, +		assertSame(5, NamedParameterUtils, +				.buildSqlParameterList(NamedParameterUtils.parseSqlStatement("xxx :a :b :c xx :a :b"), namedParams).size());, +		assertSame(5, NamedParameterUtils, +				.buildSqlParameterList(NamedParameterUtils.parseSqlStatement("xxx :a :a :a xx :a :a"), namedParams).size());, +		assertEquals(2, NamedParameterUtils, +				.buildSqlParameterList(NamedParameterUtils.parseSqlStatement("xxx :a :b :c xx :a :b"), namedParams).get(4).getSqlType());, +		assertEquals("SQL_TYPE", NamedParameterUtils, +				.buildSqlParameterList(NamedParameterUtils.parseSqlStatement("xxx :a :b :c"), namedParams).get(2).getTypeName());, +	}, +]