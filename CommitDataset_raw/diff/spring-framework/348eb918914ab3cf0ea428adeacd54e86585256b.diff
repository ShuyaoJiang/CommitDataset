[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java, + * Copyright 2002-2015 the original author or authors., +	 * Compare argument arrays and return information about whether they match., +	 * A supplied type converter and conversionAllowed flag allow for matches to take, +	 * into account that a type may be transformed into a different type by the converter., +	 * @param expectedArgTypes the types the method/constructor is expecting, +	 * @param suppliedArgTypes the types that are being supplied at the point of invocation, +	 * @return a MatchInfo object indicating what kind of match it was,, +	 * or {@code null} if it was not a match, +			TypeDescriptor argType = (i < argTypes.size() ? argTypes.get(i) : null);, +	 * Compare argument arrays and return information about whether they match., +	 * A supplied type converter and conversionAllowed flag allow for matches to, +	 * take into account that a type may be transformed into a different type by the, +	 * converter. This variant of compareArguments also allows for a varargs match., +	 * @param expectedArgTypes the types the method/constructor is expecting, +	 * @param suppliedArgTypes the types that are being supplied at the point of invocation, +	 * @return a MatchInfo object indicating what kind of match it was,, +	 * or {@code null} if it was not a match, +	 * @param varargsPosition the known position of the varargs argument, if any, +	 * ({@code null} if not varargs), +	 * @return {@code true} if some kind of conversion occurred on an argument, +, +	 * For example, if parameterTypes is {@code (int, String[])} because the second parameter, +	 * was declared {@code String...}, then if arguments is {@code [1,"a","b"]} then it must be, +	 * repackaged as {@code [1,new String[]{"a","b"}]} in order to match the expected types., +	 * An instance of ArgumentsMatchInfo describes what kind of match was achieved, +	 * between two sets of arguments - the set that a method/constructor is expecting, +	 * and the set that are being supplied at the point of invocation. If the kind, +	 * indicates that conversion is required for some of the arguments then the arguments, +	 * that require conversion are listed in the argsRequiringConversion array., +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java, + * Copyright 2002-2015 the original author or authors., +	 * Compare argument arrays and return information about whether they match., +	 * A supplied type converter and conversionAllowed flag allow for matches to take, +	 * into account that a type may be transformed into a different type by the converter., +	 * @param expectedArgTypes the types the method/constructor is expecting, +	 * @param suppliedArgTypes the types that are being supplied at the point of invocation, +	 * @return a MatchInfo object indicating what kind of match it was,, +	 * or {@code null} if it was not a match, +			TypeDescriptor argType = (i < argTypes.size() ? argTypes.get(i) : null);, +	 * Compare argument arrays and return information about whether they match., +	 * A supplied type converter and conversionAllowed flag allow for matches to, +	 * take into account that a type may be transformed into a different type by the, +	 * converter. This variant of compareArguments also allows for a varargs match., +	 * @param expectedArgTypes the types the method/constructor is expecting, +	 * @param suppliedArgTypes the types that are being supplied at the point of invocation, +	 * @return a MatchInfo object indicating what kind of match it was,, +	 * or {@code null} if it was not a match, +	 * @param varargsPosition the known position of the varargs argument, if any, +	 * ({@code null} if not varargs), +	 * @return {@code true} if some kind of conversion occurred on an argument, +, +	 * For example, if parameterTypes is {@code (int, String[])} because the second parameter, +	 * was declared {@code String...}, then if arguments is {@code [1,"a","b"]} then it must be, +	 * repackaged as {@code [1,new String[]{"a","b"}]} in order to match the expected types., +	 * An instance of ArgumentsMatchInfo describes what kind of match was achieved, +	 * between two sets of arguments - the set that a method/constructor is expecting, +	 * and the set that are being supplied at the point of invocation. If the kind, +	 * indicates that conversion is required for some of the arguments then the arguments, +	 * that require conversion are listed in the argsRequiringConversion array., +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java, + * Copyright 2002-2015 the original author or authors., +		this.useDistance = true;, +	 * This constructor allows the ReflectiveMethodResolver to be configured such that it, +	 * will use a distance computation to check which is the better of two close matches, +	 * (when there are multiple matches). Using the distance computation is intended to, +	 * ensure matches are more closely representative of what a Java compiler would do, +	 * when taking into account boxing/unboxing and whether the method candidates are, +	 * declared to handle a supertype of the type (of the argument) being passed in., +	 * @param useDistance {@code true} if distance computation should be used when, +	 * calculating matches; {@code false} otherwise, +							if (this.useDistance) {, +								int matchDistance = ReflectionHelper.getTypeDifferenceWeight(paramDescriptors, argumentTypes);, +								if (closeMatch == null || matchDistance < closeMatchDistance) {, +									// This is a better match..., +									closeMatchDistance = matchDistance;, +								// Take this as a close match if there isn't one already, +								if (closeMatch == null) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java, + * Copyright 2002-2015 the original author or authors., +	 * Compare argument arrays and return information about whether they match., +	 * A supplied type converter and conversionAllowed flag allow for matches to take, +	 * into account that a type may be transformed into a different type by the converter., +	 * @param expectedArgTypes the types the method/constructor is expecting, +	 * @param suppliedArgTypes the types that are being supplied at the point of invocation, +	 * @return a MatchInfo object indicating what kind of match it was,, +	 * or {@code null} if it was not a match, +			TypeDescriptor argType = (i < argTypes.size() ? argTypes.get(i) : null);, +	 * Compare argument arrays and return information about whether they match., +	 * A supplied type converter and conversionAllowed flag allow for matches to, +	 * take into account that a type may be transformed into a different type by the, +	 * converter. This variant of compareArguments also allows for a varargs match., +	 * @param expectedArgTypes the types the method/constructor is expecting, +	 * @param suppliedArgTypes the types that are being supplied at the point of invocation, +	 * @return a MatchInfo object indicating what kind of match it was,, +	 * or {@code null} if it was not a match, +	 * @param varargsPosition the known position of the varargs argument, if any, +	 * ({@code null} if not varargs), +	 * @return {@code true} if some kind of conversion occurred on an argument, +]