[+++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import static org.springframework.core.ReactiveTypeDescriptor.multiValue;, +import static org.springframework.core.ReactiveTypeDescriptor.noValue;, +import static org.springframework.core.ReactiveTypeDescriptor.singleOptionalValue;, +import static org.springframework.core.ReactiveTypeDescriptor.singleRequiredValue;, +, +					singleOptionalValue(Mono.class, Mono::empty),, +			registry.registerReactiveType(multiValue(Flux.class, Flux::empty),, +			registry.registerReactiveType(multiValue(Publisher.class, Flux::empty),, +					singleOptionalValue(CompletableFuture.class, () -> {, +					multiValue(rx.Observable.class, rx.Observable::empty),, +					singleRequiredValue(rx.Single.class),, +					noValue(rx.Completable.class, rx.Completable::complete),, +					multiValue(io.reactivex.Flowable.class, io.reactivex.Flowable::empty),, +					source -> (io.reactivex.Flowable<?>) source,, +					source-> io.reactivex.Flowable.fromPublisher(source), +					multiValue(io.reactivex.Observable.class, io.reactivex.Observable::empty),, +					source -> ((io.reactivex.Observable<?>) source).toFlowable(BackpressureStrategy.BUFFER),, +					source -> io.reactivex.Flowable.fromPublisher(source).toObservable(), +					singleRequiredValue(io.reactivex.Single.class),, +					source -> io.reactivex.Flowable.fromPublisher(source).toObservable().singleElement().toSingle(), +					singleOptionalValue(io.reactivex.Maybe.class, io.reactivex.Maybe::empty),, +					source -> ((io.reactivex.Maybe<?>) source).toFlowable(),, +					source -> io.reactivex.Flowable.fromPublisher(source).toObservable().singleElement(), +					noValue(io.reactivex.Completable.class, io.reactivex.Completable::complete),, +					source -> ((io.reactivex.Completable) source).toFlowable(),, +					source -> io.reactivex.Flowable.fromPublisher(source).toObservable().ignoreElements()]