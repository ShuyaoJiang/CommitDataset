[+++ b/spring-expression/src/main/java/org/springframework/expression/PropertyAccessor.java, + * Copyright 2002-2014 the original author or authors., + * A property accessor is able to read from (and possibly write to) an object's properties., + * This interface places no restrictions, and so implementors are free to access properties, + * directly as fields or through getters or in any other way they see as appropriate., + *, + * <p>A resolver can optionally specify an array of target classes for which it should be, + * called. However, if it returns {@code null} from {@link #getSpecificTargetClasses()},, + * it will be called for all property references and given a chance to determine if it, + * can read or write them., + *, + * <p>Property resolvers are considered to be ordered and each will be called in turn., + * in {@link #getSpecificTargetClasses()} will be called first, before the general resolvers., +	 * Return an array of classes for which this resolver should be called., +	 * <p>>Returning {@code null} indicates this is a general resolver that, +	 * can be called in an attempt to resolve a property on any type., +	 * @return an array of classes that this resolver is suitable for, +	 * (or {@code null} if a general resolver), +	 * @throws AccessException if there is any problem determining whether the property can be read, +	 * Called to read a property from a specified target object., +	 * Should only succeed if {@link #canRead} also returns {@code true}., +	 * Called to determine if a resolver instance is able to write to a specified, +	 * property on a specified target object., +	 * @throws AccessException if there is any problem determining whether the, +	 * property can be written to, +	 * Called to write to a property on a specified target object., +	 * Should only succeed if {@link #canWrite} also returns {@code true}., +++ b/spring-expression/src/main/java/org/springframework/expression/PropertyAccessor.java, + * Copyright 2002-2014 the original author or authors., + * A property accessor is able to read from (and possibly write to) an object's properties., + * This interface places no restrictions, and so implementors are free to access properties, + * directly as fields or through getters or in any other way they see as appropriate., + *, + * <p>A resolver can optionally specify an array of target classes for which it should be, + * called. However, if it returns {@code null} from {@link #getSpecificTargetClasses()},, + * it will be called for all property references and given a chance to determine if it, + * can read or write them., + *, + * <p>Property resolvers are considered to be ordered and each will be called in turn., + * in {@link #getSpecificTargetClasses()} will be called first, before the general resolvers., +	 * Return an array of classes for which this resolver should be called., +	 * <p>>Returning {@code null} indicates this is a general resolver that, +	 * can be called in an attempt to resolve a property on any type., +	 * @return an array of classes that this resolver is suitable for, +	 * (or {@code null} if a general resolver), +	 * @throws AccessException if there is any problem determining whether the property can be read, +	 * Called to read a property from a specified target object., +	 * Should only succeed if {@link #canRead} also returns {@code true}., +	 * Called to determine if a resolver instance is able to write to a specified, +	 * property on a specified target object., +	 * @throws AccessException if there is any problem determining whether the, +	 * property can be written to, +	 * Called to write to a property on a specified target object., +	 * Should only succeed if {@link #canWrite} also returns {@code true}., +++ b/spring-web/src/main/java/org/springframework/http/converter/xml/AbstractJaxb2HttpMessageConverter.java, + * @author Rossen Stoyanchev, +	 * @see #createMarshaller(Class), +	 * @see #createUnmarshaller(Class), +++ b/spring-expression/src/main/java/org/springframework/expression/PropertyAccessor.java, + * Copyright 2002-2014 the original author or authors., + * A property accessor is able to read from (and possibly write to) an object's properties., + * This interface places no restrictions, and so implementors are free to access properties, + * directly as fields or through getters or in any other way they see as appropriate., + *, + * <p>A resolver can optionally specify an array of target classes for which it should be, + * called. However, if it returns {@code null} from {@link #getSpecificTargetClasses()},, + * it will be called for all property references and given a chance to determine if it, + * can read or write them., + *, + * <p>Property resolvers are considered to be ordered and each will be called in turn., + * in {@link #getSpecificTargetClasses()} will be called first, before the general resolvers., +	 * Return an array of classes for which this resolver should be called., +	 * <p>>Returning {@code null} indicates this is a general resolver that, +	 * can be called in an attempt to resolve a property on any type., +	 * @return an array of classes that this resolver is suitable for, +	 * (or {@code null} if a general resolver), +	 * @throws AccessException if there is any problem determining whether the property can be read, +	 * Called to read a property from a specified target object., +	 * Should only succeed if {@link #canRead} also returns {@code true}., +	 * Called to determine if a resolver instance is able to write to a specified, +	 * property on a specified target object., +	 * @throws AccessException if there is any problem determining whether the, +	 * property can be written to, +	 * Called to write to a property on a specified target object., +	 * Should only succeed if {@link #canWrite} also returns {@code true}., +++ b/spring-web/src/main/java/org/springframework/http/converter/xml/AbstractJaxb2HttpMessageConverter.java, + * @author Rossen Stoyanchev, +	 * @see #createMarshaller(Class), +	 * @see #createUnmarshaller(Class), +++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java, + * Copyright 2002-2014 the original author or authors., +, +	 * <p>The intent is merely to expose what is available through the HttpServletResponse, +			Assert.isInstanceOf(String.class, key, "Key must be a String-based header name");, +++ b/spring-expression/src/main/java/org/springframework/expression/PropertyAccessor.java, + * Copyright 2002-2014 the original author or authors., + * A property accessor is able to read from (and possibly write to) an object's properties., + * This interface places no restrictions, and so implementors are free to access properties, + * directly as fields or through getters or in any other way they see as appropriate., + *]