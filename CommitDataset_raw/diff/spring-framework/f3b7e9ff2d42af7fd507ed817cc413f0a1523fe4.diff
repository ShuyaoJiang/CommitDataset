[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateConfigurer.java, +	 *, +	 * <p>This function will be called with the following parameters:, +	 * <li>{@code String template}: the template content</li>, +	 * <li>{@code Map model}: the view model</li>, +	 * <li>{@code String url}: the template url (since 4.2.2)</li>, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateConfigurer.java, +	 *, +	 * <p>This function will be called with the following parameters:, +	 * <li>{@code String template}: the template content</li>, +	 * <li>{@code Map model}: the view model</li>, +	 * <li>{@code String url}: the template url (since 4.2.2)</li>, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateView.java, +			String url = getUrl();, +			String template = getTemplate(url);, +				html = invocable.invokeMethod(thiz, this.renderFunction, template, model, url);, +				html = invocable.invokeFunction(this.renderFunction, template, model, url);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateConfigurer.java, +	 *, +	 * <p>This function will be called with the following parameters:, +	 * <li>{@code String template}: the template content</li>, +	 * <li>{@code Map model}: the view model</li>, +	 * <li>{@code String url}: the template url (since 4.2.2)</li>, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateView.java, +			String url = getUrl();, +			String template = getTemplate(url);, +				html = invocable.invokeMethod(thiz, this.renderFunction, template, model, url);, +				html = invocable.invokeFunction(this.renderFunction, template, model, url);, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/script/NashornScriptTemplateTests.java, +		MockHttpServletResponse response = renderViewWithModel("org/springframework/web/servlet/view/script/nashorn/template.html",, +				model, ScriptTemplatingConfiguration.class);, +	@Test  // SPR-13453, +	public void renderTemplateWithUrl() throws Exception {, +		MockHttpServletResponse response = renderViewWithModel("org/springframework/web/servlet/view/script/nashorn/template.html",, +				null, ScriptTemplatingWithUrlConfiguration.class);, +		assertEquals("<html><head><title>Check url parameter</title></head><body><p>org/springframework/web/servlet/view/script/nashorn/template.html</p></body></html>",, +				response.getContentAsString());, +	}, +, +	private MockHttpServletResponse renderViewWithModel(String viewUrl, Map<String, Object> model, Class<?> configuration) throws Exception {, +		ScriptTemplateView view = createViewWithUrl(viewUrl, configuration);, +	private ScriptTemplateView createViewWithUrl(String viewUrl, Class<?> configuration) throws Exception {, +		ctx.register(configuration);, +	@Configuration, +	static class ScriptTemplatingWithUrlConfiguration {, +, +		@Bean, +		public ScriptTemplateConfigurer nashornConfigurer() {, +			ScriptTemplateConfigurer configurer = new ScriptTemplateConfigurer();, +			configurer.setEngineName("nashorn");, +			configurer.setScripts("org/springframework/web/servlet/view/script/nashorn/render.js");, +			configurer.setRenderFunction("renderWithUrl");, +			return configurer;, +		}, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateConfigurer.java, +	 *, +	 * <p>This function will be called with the following parameters:, +	 * <li>{@code String template}: the template content</li>, +	 * <li>{@code Map model}: the view model</li>, +	 * <li>{@code String url}: the template url (since 4.2.2)</li>, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateView.java, +			String url = getUrl();, +			String template = getTemplate(url);, +				html = invocable.invokeMethod(thiz, this.renderFunction, template, model, url);, +				html = invocable.invokeFunction(this.renderFunction, template, model, url);, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/script/NashornScriptTemplateTests.java, +		MockHttpServletResponse response = renderViewWithModel("org/springframework/web/servlet/view/script/nashorn/template.html",, +				model, ScriptTemplatingConfiguration.class);, +	@Test  // SPR-13453, +	public void renderTemplateWithUrl() throws Exception {, +		MockHttpServletResponse response = renderViewWithModel("org/springframework/web/servlet/view/script/nashorn/template.html",, +				null, ScriptTemplatingWithUrlConfiguration.class);, +		assertEquals("<html><head><title>Check url parameter</title></head><body><p>org/springframework/web/servlet/view/script/nashorn/template.html</p></body></html>",, +				response.getContentAsString());, +	}, +, +	private MockHttpServletResponse renderViewWithModel(String viewUrl, Map<String, Object> model, Class<?> configuration) throws Exception {, +		ScriptTemplateView view = createViewWithUrl(viewUrl, configuration);, +	private ScriptTemplateView createViewWithUrl(String viewUrl, Class<?> configuration) throws Exception {, +		ctx.register(configuration);, +	@Configuration, +	static class ScriptTemplatingWithUrlConfiguration {, +, +		@Bean, +		public ScriptTemplateConfigurer nashornConfigurer() {, +			ScriptTemplateConfigurer configurer = new ScriptTemplateConfigurer();, +			configurer.setEngineName("nashorn");, +			configurer.setScripts("org/springframework/web/servlet/view/script/nashorn/render.js");, +			configurer.setRenderFunction("renderWithUrl");, +			return configurer;, +		}, +	}, +, +++ b/spring-webmvc/src/test/resources/org/springframework/web/servlet/view/script/jruby/render.rb, +def render(template, variables, url), +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateConfigurer.java, +	 *, +	 * <p>This function will be called with the following parameters:]