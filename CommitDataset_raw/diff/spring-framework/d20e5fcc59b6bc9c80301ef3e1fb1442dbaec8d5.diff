[+++ b/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java, +import java.util.Collections;, +	/**, +	 * Return a read-only list of the expectations., +	 */, +		return Collections.unmodifiableList(this.expectations);, +	/**, +	 * Return a read-only list of requests executed so far., +	 */, +		return Collections.unmodifiableList(this.requests);, +		Assert.state(this.requests.isEmpty(), "Cannot add more expectations after actual requests are made");, +		this.expectations.add(expectation);, +		List<ClientHttpRequest> requests = this.requests;, +	 * Invoked at the time of the first actual request, which effectively means, +	 * the expectations declaration phase is over., +	 * Sub-classes must implement the actual validation of the request, +	 * matching to declared expectations., +	protected abstract ClientHttpResponse validateRequestInternal(ClientHttpRequest request), +			throws IOException;, +		if (this.expectations.isEmpty()) {, +		for (RequestExpectation expectation : this.expectations) {, +		sb.append(this.requests.size()).append(" request(s) executed");, +		if (!this.requests.isEmpty()) {, +			for (ClientHttpRequest request : this.requests) {, +	 * Helper class to manage a group of remaining expectations., +			for (RequestExpectation expectation : this.expectations) {, +		/**, +		 * Invoke this for an expectation that has been matched., +		 * <p>The given expectation will either be stored if it has a remaining, +		 * count or it will be removed otherwise., +		 */, +		public void update(RequestExpectation expectation) {, +			if (expectation.hasRemainingCount()) {, +				this.expectations.add(expectation);, +			}, +			else {, +				this.expectations.remove(expectation);, +			}, +		}, +, +		/**, +		 * Collection variant of {@link #update(RequestExpectation)} that can, +		 * be used to insert expectations., +		 */, +		public void updateAll(Collection<RequestExpectation> expectations) {, +			expectations.forEach(this::update);, +		}, +, +			this.expectations.clear();, +++ b/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java, +import java.util.Collections;, +	/**, +	 * Return a read-only list of the expectations., +	 */, +		return Collections.unmodifiableList(this.expectations);, +	/**, +	 * Return a read-only list of requests executed so far., +	 */, +		return Collections.unmodifiableList(this.requests);, +		Assert.state(this.requests.isEmpty(), "Cannot add more expectations after actual requests are made");, +		this.expectations.add(expectation);, +		List<ClientHttpRequest> requests = this.requests;, +	 * Invoked at the time of the first actual request, which effectively means, +	 * the expectations declaration phase is over., +	 * Sub-classes must implement the actual validation of the request, +	 * matching to declared expectations., +	protected abstract ClientHttpResponse validateRequestInternal(ClientHttpRequest request), +			throws IOException;, +		if (this.expectations.isEmpty()) {, +		for (RequestExpectation expectation : this.expectations) {, +		sb.append(this.requests.size()).append(" request(s) executed");, +		if (!this.requests.isEmpty()) {, +			for (ClientHttpRequest request : this.requests) {, +	 * Helper class to manage a group of remaining expectations., +			for (RequestExpectation expectation : this.expectations) {, +		/**, +		 * Invoke this for an expectation that has been matched., +		 * <p>The given expectation will either be stored if it has a remaining, +		 * count or it will be removed otherwise., +		 */, +		public void update(RequestExpectation expectation) {, +			if (expectation.hasRemainingCount()) {, +				this.expectations.add(expectation);, +			}, +			else {, +				this.expectations.remove(expectation);, +			}, +		}, +, +		/**, +		 * Collection variant of {@link #update(RequestExpectation)} that can, +		 * be used to insert expectations., +		 */, +		public void updateAll(Collection<RequestExpectation> expectations) {, +			expectations.forEach(this::update);, +		}, +, +			this.expectations.clear();, +++ b/spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java, +	private class MockClientHttpRequestFactory implements ClientHttpRequestFactory,]