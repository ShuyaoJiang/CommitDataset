[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpSession.java, +		assertIsValid();, +		assertIsValid();, +		assertIsValid();, +		assertIsValid();, +		assertIsValid();, +		assertIsValid();, +		assertIsValid();, +		assertIsValid();, +	/**, +	 * Convenience method for asserting that this session has not been, +	 * {@linkplain #invalidate() invalidated}., +	 * , +	 * @throws IllegalStateException if this session has been invalidated, +	 */, +	private void assertIsValid() {, +		if (isInvalid()) {, +			throw new IllegalStateException("The session has already been invalidated");, +		}, +	}, +, +		assertIsValid();, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpSession.java, +		assertIsValid();, +		assertIsValid();, +		assertIsValid();, +		assertIsValid();, +		assertIsValid();, +		assertIsValid();, +		assertIsValid();, +		assertIsValid();, +	/**, +	 * Convenience method for asserting that this session has not been, +	 * {@linkplain #invalidate() invalidated}., +	 * , +	 * @throws IllegalStateException if this session has been invalidated, +	 */, +	private void assertIsValid() {, +		if (isInvalid()) {, +			throw new IllegalStateException("The session has already been invalidated");, +		}, +	}, +, +		assertIsValid();, +++ b/spring-test/src/test/java/org/springframework/mock/web/MockHttpSessionTests.java, + * Copyright 2002-2013 the original author or authors., +	private final MockHttpSession session = new MockHttpSession();, +	/**, +	 * @since 4.0, +	 */, +	@Test(expected = IllegalStateException.class), +	public void getCreationTimeOnInvalidatedSession() {, +		session.invalidate();, +		session.getCreationTime();, +	}, +, +	/**, +	 * @since 4.0, +	 */, +	@Test(expected = IllegalStateException.class), +	public void getLastAccessedTimeOnInvalidatedSession() {, +		session.invalidate();, +		session.getLastAccessedTime();, +	}, +, +	/**, +	 * @since 4.0, +	 */, +	@Test(expected = IllegalStateException.class), +	public void getAttributeOnInvalidatedSession() {, +		session.invalidate();, +		session.getAttribute("foo");, +	}, +, +	/**, +	 * @since 4.0, +	 */, +	@Test(expected = IllegalStateException.class), +	public void getAttributeNamesOnInvalidatedSession() {, +		session.invalidate();, +		session.getAttributeNames();, +	}, +, +	/**, +	 * @since 4.0, +	 */, +	@Test(expected = IllegalStateException.class), +	public void getValueOnInvalidatedSession() {, +		session.invalidate();, +		session.getValue("foo");, +	}, +, +	/**, +	 * @since 4.0, +	 */, +	@Test(expected = IllegalStateException.class), +	public void getValueNamesOnInvalidatedSession() {, +		session.invalidate();, +		session.getValueNames();, +	}]