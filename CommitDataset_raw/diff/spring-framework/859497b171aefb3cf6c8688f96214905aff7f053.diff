[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/ConfigurableBeanFactory.java, +	 * Resolve the given embedded value, e.g. an annotation attribute., +	 * @param value the value to resolve, +	 * @return the resolved value (may be the original value as-is), +	 */, +	String resolveEmbeddedValue(String value);, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/ConfigurableBeanFactory.java, +	 * Resolve the given embedded value, e.g. an annotation attribute., +	 * @param value the value to resolve, +	 * @return the resolved value (may be the original value as-is), +	 */, +	String resolveEmbeddedValue(String value);, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +	public String resolveEmbeddedValue(String value) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/ConfigurableBeanFactory.java, +	 * Resolve the given embedded value, e.g. an annotation attribute., +	 * @param value the value to resolve, +	 * @return the resolved value (may be the original value as-is), +	 */, +	String resolveEmbeddedValue(String value);, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +	public String resolveEmbeddedValue(String value) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.java, + * Copyright 2002-2009 the original author or authors., +		Object resource;, +		Set<String> autowiredBeanNames;, +			else if (beanFactory instanceof ConfigurableBeanFactory){, +				resourceName = ((ConfigurableBeanFactory) beanFactory).resolveEmbeddedValue(resourceName);, +			}, +			Service service;, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/ConfigurableBeanFactory.java, +	 * Resolve the given embedded value, e.g. an annotation attribute., +	 * @param value the value to resolve, +	 * @return the resolved value (may be the original value as-is), +	 */, +	String resolveEmbeddedValue(String value);, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +	public String resolveEmbeddedValue(String value) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.java, + * Copyright 2002-2009 the original author or authors., +		Object resource;, +		Set<String> autowiredBeanNames;, +			else if (beanFactory instanceof ConfigurableBeanFactory){, +				resourceName = ((ConfigurableBeanFactory) beanFactory).resolveEmbeddedValue(resourceName);, +			}, +			Service service;, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessorTests.java, +import java.util.Properties;, +, +import org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;, +		bpp.setBeanFactory(bf);, +		PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer();, +		Properties props = new Properties();, +		props.setProperty("tb", "testBean3");, +		ppc.setProperties(props);, +		ppc.postProcessBeanFactory(bf);, +, +		bpp.setBeanFactory(bf);, +		PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer();, +		Properties props = new Properties();, +		props.setProperty("tb", "testBean3");, +		ppc.setProperties(props);, +		ppc.postProcessBeanFactory(bf);, +, +		@Resource(name="${tb}", type=ITestBean.class)]