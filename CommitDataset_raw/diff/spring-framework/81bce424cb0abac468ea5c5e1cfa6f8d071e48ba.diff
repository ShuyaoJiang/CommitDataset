[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/AbstractSockJsService.java, +	private final List<String> validSockJsPrefixes = new ArrayList<String>();, +	private final Set<String> knownSockJsPrefixes = new CopyOnWriteArraySet<String>();, +		this.validSockJsPrefixes.clear();, +			this.validSockJsPrefixes.add(prefix);, +		Collections.sort(this.validSockJsPrefixes, Collections.reverseOrder(new Comparator<String>() {, +		if (!this.validSockJsPrefixes.isEmpty()) {, +			for (String prefix : this.validSockJsPrefixes) {, +					this.knownSockJsPrefixes.add(path.substring(0, index + prefix.length()));, +			this.knownSockJsPrefixes.add(path.substring(0, path.length() - "/info".length()));, +		for (String sockJsPath : this.knownSockJsPrefixes) {, +			String result = path.substring(match.length());, +			Assert.isTrue(result.charAt(0)  == '/', "Invalid SockJS path extracted from incoming path \"" +, +					path + "\". The extracted SockJS path is \"" + result +, +					"\". It was extracted from these known SockJS prefixes " + this.knownSockJsPrefixes +, +					". Consider setting 'validSockJsPrefixes' on DefaultSockJsService.");, +			return result;, +			this.knownSockJsPrefixes.add(path);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/AbstractSockJsService.java, +	private final List<String> validSockJsPrefixes = new ArrayList<String>();, +	private final Set<String> knownSockJsPrefixes = new CopyOnWriteArraySet<String>();, +		this.validSockJsPrefixes.clear();, +			this.validSockJsPrefixes.add(prefix);, +		Collections.sort(this.validSockJsPrefixes, Collections.reverseOrder(new Comparator<String>() {, +		if (!this.validSockJsPrefixes.isEmpty()) {, +			for (String prefix : this.validSockJsPrefixes) {, +					this.knownSockJsPrefixes.add(path.substring(0, index + prefix.length()));, +			this.knownSockJsPrefixes.add(path.substring(0, path.length() - "/info".length()));, +		for (String sockJsPath : this.knownSockJsPrefixes) {, +			String result = path.substring(match.length());, +			Assert.isTrue(result.charAt(0)  == '/', "Invalid SockJS path extracted from incoming path \"" +, +					path + "\". The extracted SockJS path is \"" + result +, +					"\". It was extracted from these known SockJS prefixes " + this.knownSockJsPrefixes +, +					". Consider setting 'validSockJsPrefixes' on DefaultSockJsService.");, +			return result;, +			this.knownSockJsPrefixes.add(path);, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/AbstractSockJsServiceTests.java, +, +		handleRequest("GET", "/a/server/session/xhr", HttpStatus.OK);, +, +		assertEquals("session", this.service.sessionId);, +		assertEquals(TransportType.XHR, this.service.transportType);, +		assertSame(this.handler, this.service.handler);, +, +]