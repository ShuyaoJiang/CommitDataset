[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +			TypeDescriptor targetTypeDesc = typeDescriptor.forElementType(requiredType);, +			if (conversionService.canConvert(sourceTypeDesc, targetTypeDesc)) {, +				return (T) conversionService.convert(convertedValue, sourceTypeDesc, targetTypeDesc);, +				Class elemType = GenericCollectionTypeResolver.getCollectionParameterType(typeDescriptor.getMethodParameter());, +				if (elemType != null && Enum.class.isAssignableFrom(elemType)) {, +			Object convertedElement = convertIfNecessary(, +					indexedPropertyName, null, element, elementType, typeDescriptor);, +			Object convertedKey = convertIfNecessary(keyedPropertyName, null, key, keyType, typeDescriptor);, +			Object convertedValue = convertIfNecessary(keyedPropertyName, null, value, valueType, typeDescriptor);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +			TypeDescriptor targetTypeDesc = typeDescriptor.forElementType(requiredType);, +			if (conversionService.canConvert(sourceTypeDesc, targetTypeDesc)) {, +				return (T) conversionService.convert(convertedValue, sourceTypeDesc, targetTypeDesc);, +				Class elemType = GenericCollectionTypeResolver.getCollectionParameterType(typeDescriptor.getMethodParameter());, +				if (elemType != null && Enum.class.isAssignableFrom(elemType)) {, +			Object convertedElement = convertIfNecessary(, +					indexedPropertyName, null, element, elementType, typeDescriptor);, +			Object convertedKey = convertIfNecessary(keyedPropertyName, null, key, keyType, typeDescriptor);, +			Object convertedValue = convertIfNecessary(keyedPropertyName, null, value, valueType, typeDescriptor);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	public TypeDescriptor(MethodParameter methodParameter, Class<?> type) {, +	 * Create a new type descriptor for a field., +	 * Use this constructor when a target conversion point originates from a field., +	 * @param field the field to wrap, +	 */, +	public TypeDescriptor(Field field, Class<?> type) {, +		Assert.notNull(field, "Field must not be null");, +		this.field = field;, +		this.type = type;, +	}, +, +	/**, +	 * Returns <code>null</code> if the type is neither an array or collection., +		if (isArray()) {, +			return getArrayComponentType();, +		}, +		else if (isCollection()) {, +			return getCollectionElementType();, +		}, +		else {, +			return null;, +		}, +		return TypeDescriptor.valueOf(getElementType());, +, +	/**, +	 * Create a copy of this type descriptor, preserving the context information, +	 * but exposing the specified element type (e.g. an array/collection element)., +	 * @param elementType the desired type to expose, +	 * @return the type descriptor, +	 */, +	public TypeDescriptor forElementType(Class<?> elementType) {, +		Assert.notNull(elementType, "Element type must not be null");, +		if (getType().equals(elementType)) {, +			return this;, +		}, +		else if (this.methodParameter != null) {, +			return new TypeDescriptor(this.methodParameter, elementType);, +			return new TypeDescriptor(this.field, elementType);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +			TypeDescriptor targetTypeDesc = typeDescriptor.forElementType(requiredType);, +			if (conversionService.canConvert(sourceTypeDesc, targetTypeDesc)) {, +				return (T) conversionService.convert(convertedValue, sourceTypeDesc, targetTypeDesc);, +				Class elemType = GenericCollectionTypeResolver.getCollectionParameterType(typeDescriptor.getMethodParameter());, +				if (elemType != null && Enum.class.isAssignableFrom(elemType)) {, +			Object convertedElement = convertIfNecessary(, +					indexedPropertyName, null, element, elementType, typeDescriptor);, +			Object convertedKey = convertIfNecessary(keyedPropertyName, null, key, keyType, typeDescriptor);, +			Object convertedValue = convertIfNecessary(keyedPropertyName, null, value, valueType, typeDescriptor);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	public TypeDescriptor(MethodParameter methodParameter, Class<?> type) {, +	 * Create a new type descriptor for a field., +	 * Use this constructor when a target conversion point originates from a field., +	 * @param field the field to wrap, +	 */, +	public TypeDescriptor(Field field, Class<?> type) {, +		Assert.notNull(field, "Field must not be null");, +		this.field = field;, +		this.type = type;, +	}, +, +	/**, +	 * Returns <code>null</code> if the type is neither an array or collection., +		if (isArray()) {, +			return getArrayComponentType();, +		}, +		else if (isCollection()) {, +			return getCollectionElementType();, +		}, +		else {, +			return null;, +		}, +		return TypeDescriptor.valueOf(getElementType());, +, +	/**, +	 * Create a copy of this type descriptor, preserving the context information, +	 * but exposing the specified element type (e.g. an array/collection element)., +	 * @param elementType the desired type to expose, +	 * @return the type descriptor, +	 */]