[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java, +		String mapping = getClassMapping(controllerType);, +	 * Create a {@link UriComponentsBuilder} from the mapping of a controller method, +	 * and an array of method argument values. The array of values  must match the, +	 * signature of the controller method. Values for {@code @RequestParam} and, +	 * {@code @PathVariable} are used for building the URI (via implementations of, +	 * {@link org.springframework.web.method.support.UriComponentsContributor, +	 * UriComponentsContributor}) while remaining argument values are ignored and, +	 * can be {@code null}., +	 * <p><strong>Note:</strong> This method extracts values from "Forwarded", +	 * and "X-Forwarded-*" headers if found. See class-level docs., +	 * @param controllerType the controller type, +	 * @param method the controller method, +	 * @param args argument values for the controller method, +	 * @return a UriComponentsBuilder instance, never {@code null}, +	 * @since 4.2, +	 */, +	public static UriComponentsBuilder fromMethod(Class<?> controllerType, Method method, Object... args) {, +		return fromMethodInternal(null, controllerType, method, args);, +	}, +, +	/**, +	 * An alternative to {@link #fromMethod(Class, Method, Object...)}, +	 * that accepts a {@code UriComponentsBuilder} representing the base URL., +	 * This is useful when using MvcUriComponentsBuilder outside the context of, +	 * processing a request or to apply a custom baseUrl not matching the, +	 * current request., +	 * <p><strong>Note:</strong> This method extracts values from "Forwarded", +	 * and "X-Forwarded-*" headers if found. See class-level docs., +	 * @param baseUrl the builder for the base URL; the builder will be cloned, +	 * and therefore not modified and may be re-used for further calls., +	 * @param controllerType the controller type, +	 * @param method the controller method, +	 * @param args argument values for the controller method, +	 * @return a UriComponentsBuilder instance (never {@code null}), +	 * @since 4.2, +	 */, +	public static UriComponentsBuilder fromMethod(UriComponentsBuilder baseUrl,, +			@Nullable Class<?> controllerType, Method method, Object... args) {, +, +		return fromMethodInternal(baseUrl,, +				(controllerType != null ? controllerType : method.getDeclaringClass()), method, args);, +	}, +, +	/**, +	 * @see #on(Class), +	 * @see #controller(Class), +	 * Return a "mock" controller instance. When an {@code @RequestMapping} method, +	 * on the controller is invoked, the supplied argument values are remembered, +	 * and the result can then be used to create a {@code UriComponentsBuilder}, +	 * via {@link #fromMethodCall(Object)}., +	 * <p>Note that this is a shorthand version of {@link #controller(Class)} intended, +	 * for inline use (with a static import), for example:, +	 * <pre class="code">, +	 * MvcUriComponentsBuilder.fromMethodCall(on(FooController.class).getFoo(1)).build();, +	 * </pre>, +	 * <p><strong>Note:</strong> This method extracts values from "Forwarded", +	 * and "X-Forwarded-*" headers if found. See class-level docs., +	 *, +	 * @param controllerType the target controller, +	 */, +	public static <T> T on(Class<T> controllerType) {, +		return controller(controllerType);, +	}, +, +	/**, +	 * Return a "mock" controller instance. When an {@code @RequestMapping} method, +	 * on the controller is invoked, the supplied argument values are remembered, +	 * and the result can then be used to create {@code UriComponentsBuilder} via, +	 * {@link #fromMethodCall(Object)}., +	 * <p>This is a longer version of {@link #on(Class)}. It is needed with controller, +	 * methods returning void as well for repeated invocations., +	 * <pre class="code">, +	 * FooController fooController = controller(FooController.class);, +	 *, +	 * fooController.saveFoo(1, null);, +	 * builder = MvcUriComponentsBuilder.fromMethodCall(fooController);, +	 *, +	 * fooController.saveFoo(2, null);, +	 * builder = MvcUriComponentsBuilder.fromMethodCall(fooController);, +	 * </pre>, +	 * <p><strong>Note:</strong> This method extracts values from "Forwarded", +	 * and "X-Forwarded-*" headers if found. See class-level docs., +	 * @param controllerType the target controller, +	 */, +	public static <T> T controller(Class<T> controllerType) {, +		Assert.notNull(controllerType, "'controllerType' must not be null");, +		return ControllerMethodInvocationInterceptor.initProxy(controllerType, null);, +	}, +, +	/**, +		WebApplicationContext wac = getWebApplicationContext();, +		Assert.notNull(wac, "Cannot lookup handler method mappings without WebApplicationContext");, +		RequestMappingInfoHandlerMapping mapping = wac.getBean(RequestMappingInfoHandlerMapping.class);, +		List<HandlerMethod> handlerMethods = mapping.getHandlerMethodsForMappingName(name);, +			throw new IllegalArgumentException("Mapping not found: " + name);, +		else if (handlerMethods.size() != 1) {, +			throw new IllegalArgumentException("No unique match for mapping " + name + ": " + handlerMethods);, +		else {, +	// Instance methods, relative to a base UriComponentsBuilder...]