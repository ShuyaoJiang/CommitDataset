[+++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/BeanDefinitionRegistrar.java, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/BeanDefinitionRegistrar.java, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/BeanMethod.java, +import org.springframework.config.java.ext.Bean;, +		for (Annotation annotation : annotations), +		, +		new BeanValidator().validate(this, errors);, +//	public BeanDefinitionRegistrar getRegistrar() {, +//		return getInstance(factoryAnno.registrar());, +//	}, +//	public Set<Validator> getValidators() {, +//		HashSet<Validator> validators = new HashSet<Validator>();, +//, +////		for (Class<? extends Validator> validatorType : factoryAnno.validators()), +////			validator.add(getInstance(validatorType));, +//		, +//		validators.add(IllegalB), +//, +//		return validators;, +//	}, +//	public Callback getCallback() {, +//		Class<? extends Callback> callbackType = factoryAnno.interceptor();, +//, +//		if (callbackType.equals(NoOpInterceptor.class)), +//			return NoOpInterceptor.INSTANCE;, +//, +//		return getInstance(callbackType);, +//	}, +//, +, +/**, + * Detects any user errors when declaring {@link Bean}-annotated methods., + * , + * @author Chris Beams, + */, +class BeanValidator implements Validator {, +, +	public boolean supports(Object object) {, +		return object instanceof BeanMethod;, +	}, +, +	public void validate(Object object, List<UsageError> errors) {, +		BeanMethod method = (BeanMethod) object;, +, +		// TODO: re-enable for @ScopedProxy support, +		// if (method.getAnnotation(ScopedProxy.class) == null), +		// return;, +		//        , +		// Bean bean = method.getRequiredAnnotation(Bean.class);, +		//            , +		// if (bean.scope().equals(DefaultScopes.SINGLETON), +		// || bean.scope().equals(DefaultScopes.PROTOTYPE)), +		// errors.add(new InvalidScopedProxyDeclarationError(method));, +	}, +, +}, +, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/BeanDefinitionRegistrar.java, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/BeanMethod.java, +import org.springframework.config.java.ext.Bean;, +		for (Annotation annotation : annotations), +		, +		new BeanValidator().validate(this, errors);, +//	public BeanDefinitionRegistrar getRegistrar() {, +//		return getInstance(factoryAnno.registrar());, +//	}, +//	public Set<Validator> getValidators() {, +//		HashSet<Validator> validators = new HashSet<Validator>();, +//, +////		for (Class<? extends Validator> validatorType : factoryAnno.validators()), +////			validator.add(getInstance(validatorType));, +//		, +//		validators.add(IllegalB), +//, +//		return validators;, +//	}, +//	public Callback getCallback() {, +//		Class<? extends Callback> callbackType = factoryAnno.interceptor();, +//, +//		if (callbackType.equals(NoOpInterceptor.class)), +//			return NoOpInterceptor.INSTANCE;, +//, +//		return getInstance(callbackType);, +//	}, +//, +, +/**, + * Detects any user errors when declaring {@link Bean}-annotated methods., + * , + * @author Chris Beams, + */, +class BeanValidator implements Validator {, +, +	public boolean supports(Object object) {, +		return object instanceof BeanMethod;, +	}, +, +	public void validate(Object object, List<UsageError> errors) {, +		BeanMethod method = (BeanMethod) object;, +]