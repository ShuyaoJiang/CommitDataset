[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +import java.util.Arrays;, +import org.springframework.http.HttpHeaders;, +import org.springframework.util.ObjectUtils;, +	private boolean cookieHeaderSet;, +, +			doAddHeaderValue(HttpHeaders.CONTENT_TYPE, sb.toString(), true);, +		String host = getHeader(HttpHeaders.HOST);, +		String host = getHeader(HttpHeaders.HOST);, +		if (!this.cookieHeaderSet && !ObjectUtils.isEmpty(cookies)) {, +			Arrays.stream(cookies), +					.map(c -> c.getName() + '=' + (c.getValue() == null ? "" : c.getValue())), +					.forEach(value -> doAddHeaderValue(HttpHeaders.COOKIE, value, false));, +		}, +		if (HttpHeaders.CONTENT_TYPE.equalsIgnoreCase(name) && !this.headers.containsKey(HttpHeaders.CONTENT_TYPE)) {, +			this.cookieHeaderSet = HttpHeaders.COOKIE.equalsIgnoreCase(name);, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +import java.util.Arrays;, +import org.springframework.http.HttpHeaders;, +import org.springframework.util.ObjectUtils;, +	private boolean cookieHeaderSet;, +, +			doAddHeaderValue(HttpHeaders.CONTENT_TYPE, sb.toString(), true);, +		String host = getHeader(HttpHeaders.HOST);, +		String host = getHeader(HttpHeaders.HOST);, +		if (!this.cookieHeaderSet && !ObjectUtils.isEmpty(cookies)) {, +			Arrays.stream(cookies), +					.map(c -> c.getName() + '=' + (c.getValue() == null ? "" : c.getValue())), +					.forEach(value -> doAddHeaderValue(HttpHeaders.COOKIE, value, false));, +		}, +		if (HttpHeaders.CONTENT_TYPE.equalsIgnoreCase(name) && !this.headers.containsKey(HttpHeaders.CONTENT_TYPE)) {, +			this.cookieHeaderSet = HttpHeaders.COOKIE.equalsIgnoreCase(name);, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletResponse.java, +import org.springframework.http.HttpHeaders;, +import org.springframework.util.StringUtils;, +	private boolean cookieHeaderSet;, +, +			doAddHeaderValue(HttpHeaders.CONTENT_TYPE, sb.toString(), true);, +		doAddHeaderValue(HttpHeaders.CONTENT_LENGTH, contentLength, true);, +		doAddHeaderValue(HttpHeaders.CONTENT_LENGTH, contentLength, true);, +		if (!this.cookieHeaderSet) {, +			doAddHeaderValue(HttpHeaders.SET_COOKIE, getCookieHeader(cookie), false);, +		}, +	}, +, +	private String getCookieHeader(Cookie cookie) {, +		StringBuilder buf = new StringBuilder();, +		buf.append(cookie.getName()).append('=').append(cookie.getValue() == null ? "" : cookie.getValue());, +		if (StringUtils.hasText(cookie.getPath())) {, +			buf.append(";Path=").append(cookie.getPath());, +		}, +		if (StringUtils.hasText(cookie.getDomain())) {, +			buf.append(";Domain=").append(cookie.getDomain());, +		}, +		int maxAge = cookie.getMaxAge();, +		if (maxAge >= 0) {, +			buf.append(";Max-Age=").append(maxAge);, +			buf.append(";Expires=");, +			HttpHeaders headers = new HttpHeaders();, +			headers.setExpires(maxAge > 0 ? System.currentTimeMillis() + 1000L * maxAge : 0);, +			buf.append(headers.getFirst(HttpHeaders.EXPIRES));, +		}, +, +		if (cookie.getSecure()) {, +			buf.append(";Secure");, +		}, +		if (cookie.isHttpOnly()) {, +			buf.append(";HttpOnly");, +		}, +		return buf.toString();, +		setHeader(HttpHeaders.LOCATION, url);, +		return getHeader(HttpHeaders.LOCATION);, +		this.cookieHeaderSet = HttpHeaders.SET_COOKIE.equalsIgnoreCase(name);, +		this.cookieHeaderSet = HttpHeaders.SET_COOKIE.equalsIgnoreCase(name);, +		if (HttpHeaders.CONTENT_TYPE.equalsIgnoreCase(name)) {, +		else if (HttpHeaders.CONTENT_LENGTH.equalsIgnoreCase(name)) {, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +import java.util.Arrays;, +import org.springframework.http.HttpHeaders;, +import org.springframework.util.ObjectUtils;, +	private boolean cookieHeaderSet;, +, +			doAddHeaderValue(HttpHeaders.CONTENT_TYPE, sb.toString(), true);, +		String host = getHeader(HttpHeaders.HOST);, +		String host = getHeader(HttpHeaders.HOST);, +		if (!this.cookieHeaderSet && !ObjectUtils.isEmpty(cookies)) {, +			Arrays.stream(cookies), +					.map(c -> c.getName() + '=' + (c.getValue() == null ? "" : c.getValue())), +					.forEach(value -> doAddHeaderValue(HttpHeaders.COOKIE, value, false));, +		}, +		if (HttpHeaders.CONTENT_TYPE.equalsIgnoreCase(name) && !this.headers.containsKey(HttpHeaders.CONTENT_TYPE)) {, +			this.cookieHeaderSet = HttpHeaders.COOKIE.equalsIgnoreCase(name);, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletResponse.java, +import org.springframework.http.HttpHeaders;, +import org.springframework.util.StringUtils;, +	private boolean cookieHeaderSet;, +, +			doAddHeaderValue(HttpHeaders.CONTENT_TYPE, sb.toString(), true);, +		doAddHeaderValue(HttpHeaders.CONTENT_LENGTH, contentLength, true);, +		doAddHeaderValue(HttpHeaders.CONTENT_LENGTH, contentLength, true);]