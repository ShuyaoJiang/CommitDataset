[+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java, + * @author Juergen Hoeller, +	private volatile boolean expired = false;, +		// Immediate expiration check outside of the result lock, +		if (this.expired) {, +			return;, +		}, +		Object resultToHandle;, +			// Got the lock in the meantime: double-check expiration status, +			if (this.expired) {, +				return;, +			}, +			resultToHandle = this.result;, +			if (resultToHandle == RESULT_NONE) {, +				// No result yet: store handler for processing once it comes in, +				return;, +			}, +		}, +		// If we get here, we need to process an existing result object immediately., +		// The decision is made within the result lock; just the handle call outside, +		// of it, avoiding any deadlock potential with Servlet container locks., +			resultHandler.handleResult(resultToHandle);, +			logger.debug("Failed to handle existing result", ex);, +	 * @return {@code true} if the result was set and passed on for handling;, +	 * {@code false} if the result was already set or the async request expired, +		// Immediate expiration check outside of the result lock, +		DeferredResultHandler resultHandlerToUse;, +		synchronized (this) {, +			// Got the lock in the meantime: double-check expiration status, +			if (isSetOrExpired()) {, +				return false;, +			}, +			// At this point, we got a new result to process, +			resultHandlerToUse = this.resultHandler;, +			if (resultHandlerToUse == null) {, +				// No result handler set yet -> let the setResultHandler implementation, +				// pick up the result object and invoke the result handler for it., +				return true;, +			// Result handler available -> let's clear the stored reference since, +			// we don't need it anymore., +			this.resultHandler = null;, +		// If we get here, we need to process an existing result object immediately., +		// The decision is made within the result lock; just the handle call outside, +		// of it, avoiding any deadlock potential with Servlet container locks., +		resultHandlerToUse.handleResult(result);, +	 * @return {@code true} if the result was set to the error value and passed on, +	 * for handling; {@code false} if the result was already set or the async, +	 * request expired, +				if (timeoutResult != RESULT_NONE) {]