[+++ b/spring-beans-groovy/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java, + * A Groovy-based reader for Spring bean definitions: like a Groovy builder,, + * <pre class="code">, + * import org.hibernate.SessionFactory, + * <p>You can also load resources containing beans defined in a Groovy script using, + * <pre class="code">, + * import org.hibernate.SessionFactory, +	 * Define an inner bean definition., +	 * @param type the bean type, +	 * @param args the constructors arguments and closure configurer, +	 * @return the bean definition, +	 * Define a Spring namespace definition to use., +	 * Import Spring bean definitions from either XML or Groovy sources into the, +	 * current bean builder instance., +	 * takes a class argument., +	 * When a method argument is only a closure it is a set of bean definitions., +	 * Checks whether there are any {@link RuntimeBeanReference}s inside the Map, +	 * Checks whether there are any {@link RuntimeBeanReference}s inside the List, +	 * This method overrides property retrieval in the scope of the, +	 * GroovyBeanDefinitionReader to either:, +	 * <ul>, +	 * <li>Retrieve a variable from the bean builder's binding if it exists, +	 * <li>Retrieve a RuntimeBeanReference for a specific bean if it exists, +	 * <li>Otherwise just delegate to MetaClass.getProperty which will resolve, +	 * properties from the GroovyBeanDefinitionReader itself, +	 * </ul>, +	 * This class is used to defer the adding of a property to a bean definition, +	 * until later. This is for a case where you assign a property to a list that, +	 * may not contain bean references at that point of assignment, but may later;, +	 * hence, it would need to be managed., +	 * A RuntimeBeanReference that takes care of adding new properties to runtime references., +++ b/spring-beans-groovy/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java, + * A Groovy-based reader for Spring bean definitions: like a Groovy builder,, + * <pre class="code">, + * import org.hibernate.SessionFactory, + * <p>You can also load resources containing beans defined in a Groovy script using, + * <pre class="code">, + * import org.hibernate.SessionFactory, +	 * Define an inner bean definition., +	 * @param type the bean type, +	 * @param args the constructors arguments and closure configurer, +	 * @return the bean definition, +	 * Define a Spring namespace definition to use., +	 * Import Spring bean definitions from either XML or Groovy sources into the, +	 * current bean builder instance., +	 * takes a class argument., +	 * When a method argument is only a closure it is a set of bean definitions., +	 * Checks whether there are any {@link RuntimeBeanReference}s inside the Map, +	 * Checks whether there are any {@link RuntimeBeanReference}s inside the List, +	 * This method overrides property retrieval in the scope of the, +	 * GroovyBeanDefinitionReader to either:, +	 * <ul>, +	 * <li>Retrieve a variable from the bean builder's binding if it exists, +	 * <li>Retrieve a RuntimeBeanReference for a specific bean if it exists, +	 * <li>Otherwise just delegate to MetaClass.getProperty which will resolve, +	 * properties from the GroovyBeanDefinitionReader itself, +	 * </ul>, +	 * This class is used to defer the adding of a property to a bean definition, +	 * until later. This is for a case where you assign a property to a list that, +	 * may not contain bean references at that point of assignment, but may later;, +	 * hence, it would need to be managed., +	 * A RuntimeBeanReference that takes care of adding new properties to runtime references., +++ b/spring-context/src/main/java/org/springframework/context/support/GenericGroovyApplicationContext.java, + * the context can be used with an inline bean definition closure as follows:, + * <pre class="code">, + * import org.hibernate.SessionFactory, + * context.refresh(), + * </pre>, + * <pre class="code">, + * import org.hibernate.SessionFactory, + * }, + * </pre>, + * <pre class="code">, + * GenericGroovyApplicationContext context = new GenericGroovyApplicationContext();, + * context.refresh();, + * </pre>, + * <pre class="code">, + * ApplicationContext context = new GenericGroovyApplicationContext("org/myapp/applicationContext.groovy");, + * </pre>]