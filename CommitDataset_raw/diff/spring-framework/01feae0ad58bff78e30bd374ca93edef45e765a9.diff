[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/websocket/SubProtocolWebSocketHandler.java, +import org.springframework.util.StringUtils;, +		if (!StringUtils.isEmpty(protocol)) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/websocket/SubProtocolWebSocketHandler.java, +import org.springframework.util.StringUtils;, +		if (!StringUtils.isEmpty(protocol)) {, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/websocket/SubProtocolWebSocketHandlerTests.java, +	public void nullSubProtocol() throws Exception {, +		this.webSocketHandler.setDefaultProtocolHandler(defaultHandler);, +		this.webSocketHandler.afterConnectionEstablished(session);, +, +		verify(this.defaultHandler).afterSessionStarted(session, this.channel);, +		verify(this.stompHandler, times(0)).afterSessionStarted(session, this.channel);, +		verify(this.mqttHandler, times(0)).afterSessionStarted(session, this.channel);, +	}, +, +	@Test, +	public void emptySubProtocol() throws Exception {, +		this.session.setAcceptedProtocol("");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/websocket/SubProtocolWebSocketHandler.java, +import org.springframework.util.StringUtils;, +		if (!StringUtils.isEmpty(protocol)) {, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/websocket/SubProtocolWebSocketHandlerTests.java, +	public void nullSubProtocol() throws Exception {, +		this.webSocketHandler.setDefaultProtocolHandler(defaultHandler);, +		this.webSocketHandler.afterConnectionEstablished(session);, +, +		verify(this.defaultHandler).afterSessionStarted(session, this.channel);, +		verify(this.stompHandler, times(0)).afterSessionStarted(session, this.channel);, +		verify(this.mqttHandler, times(0)).afterSessionStarted(session, this.channel);, +	}, +, +	@Test, +	public void emptySubProtocol() throws Exception {, +		this.session.setAcceptedProtocol("");, +++ b/spring-web/src/main/java/org/springframework/http/server/ServerHttpRequest.java, +import java.net.InetSocketAddress;, +	 * Return the address on which the request was received., +	InetSocketAddress getLocalAddress();, +	 * Return the address of the remote client., +	InetSocketAddress getRemoteAddress();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/websocket/SubProtocolWebSocketHandler.java, +import org.springframework.util.StringUtils;, +		if (!StringUtils.isEmpty(protocol)) {, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/websocket/SubProtocolWebSocketHandlerTests.java, +	public void nullSubProtocol() throws Exception {, +		this.webSocketHandler.setDefaultProtocolHandler(defaultHandler);, +		this.webSocketHandler.afterConnectionEstablished(session);, +, +		verify(this.defaultHandler).afterSessionStarted(session, this.channel);, +		verify(this.stompHandler, times(0)).afterSessionStarted(session, this.channel);, +		verify(this.mqttHandler, times(0)).afterSessionStarted(session, this.channel);, +	}, +, +	@Test, +	public void emptySubProtocol() throws Exception {, +		this.session.setAcceptedProtocol("");, +++ b/spring-web/src/main/java/org/springframework/http/server/ServerHttpRequest.java, +import java.net.InetSocketAddress;, +	 * Return the address on which the request was received., +	InetSocketAddress getLocalAddress();, +	 * Return the address of the remote client., +	InetSocketAddress getRemoteAddress();, +++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +import java.net.InetSocketAddress;, +	public InetSocketAddress getLocalAddress() {, +		return new InetSocketAddress(this.servletRequest.getLocalName(), this.servletRequest.getLocalPort());, +	public InetSocketAddress getRemoteAddress() {, +		return new InetSocketAddress(this.servletRequest.getRemoteHost(), this.servletRequest.getRemotePort());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/websocket/SubProtocolWebSocketHandler.java, +import org.springframework.util.StringUtils;, +		if (!StringUtils.isEmpty(protocol)) {, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/websocket/SubProtocolWebSocketHandlerTests.java, +	public void nullSubProtocol() throws Exception {, +		this.webSocketHandler.setDefaultProtocolHandler(defaultHandler);, +		this.webSocketHandler.afterConnectionEstablished(session);, +, +		verify(this.defaultHandler).afterSessionStarted(session, this.channel);, +		verify(this.stompHandler, times(0)).afterSessionStarted(session, this.channel);, +		verify(this.mqttHandler, times(0)).afterSessionStarted(session, this.channel);, +	}, +, +	@Test, +	public void emptySubProtocol() throws Exception {, +		this.session.setAcceptedProtocol("");, +++ b/spring-web/src/main/java/org/springframework/http/server/ServerHttpRequest.java, +import java.net.InetSocketAddress;, +	 * Return the address on which the request was received., +	InetSocketAddress getLocalAddress();, +	 * Return the address of the remote client., +	InetSocketAddress getRemoteAddress();, +++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +import java.net.InetSocketAddress;, +	public InetSocketAddress getLocalAddress() {, +		return new InetSocketAddress(this.servletRequest.getLocalName(), this.servletRequest.getLocalPort());, +	public InetSocketAddress getRemoteAddress() {, +		return new InetSocketAddress(this.servletRequest.getRemoteHost(), this.servletRequest.getRemotePort());, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/WebSocketSession.java, +import java.net.InetSocketAddress;, +import org.springframework.http.HttpHeaders;]