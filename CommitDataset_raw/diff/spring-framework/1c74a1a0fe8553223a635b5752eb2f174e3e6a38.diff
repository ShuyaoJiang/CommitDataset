[+++ b/spring-context-support/src/test/java/org/springframework/cache/caffeine/CaffeineCacheManagerTests.java, +++ b/spring-context-support/src/test/java/org/springframework/cache/caffeine/CaffeineCacheManagerTests.java, +++ b/spring-context-support/src/test/java/org/springframework/cache/caffeine/CaffeineCacheTests.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.cache.AbstractValueAdaptingCacheTests;, +public class CaffeineCacheTests extends AbstractValueAdaptingCacheTests<CaffeineCache> {, +	private CaffeineCache cacheNoNull;, +, +		com.github.benmanes.caffeine.cache.Cache<Object, Object> nativeCacheNoNull, +				= Caffeine.newBuilder().build();, +		cacheNoNull =  new CaffeineCache(CACHE_NAME_NO_NULL, nativeCacheNoNull, false);, +		return getCache(true);, +	}, +, +	@Override, +	protected CaffeineCache getCache(boolean allowNull) {, +		return allowNull ? this.cache : this.cacheNoNull;, +++ b/spring-context-support/src/test/java/org/springframework/cache/caffeine/CaffeineCacheManagerTests.java, +++ b/spring-context-support/src/test/java/org/springframework/cache/caffeine/CaffeineCacheTests.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.cache.AbstractValueAdaptingCacheTests;, +public class CaffeineCacheTests extends AbstractValueAdaptingCacheTests<CaffeineCache> {, +	private CaffeineCache cacheNoNull;, +, +		com.github.benmanes.caffeine.cache.Cache<Object, Object> nativeCacheNoNull, +				= Caffeine.newBuilder().build();, +		cacheNoNull =  new CaffeineCache(CACHE_NAME_NO_NULL, nativeCacheNoNull, false);, +		return getCache(true);, +	}, +, +	@Override, +	protected CaffeineCache getCache(boolean allowNull) {, +		return allowNull ? this.cache : this.cacheNoNull;, +++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/JCacheEhCacheApiTests.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.cache.AbstractValueAdaptingCacheTests;, +public class JCacheEhCacheApiTests extends AbstractValueAdaptingCacheTests<JCacheCache> {, +	private JCacheCache cacheNoNull;, +, +		this.cacheManager.createCache(CACHE_NAME_NO_NULL, new MutableConfiguration<>());, +		Cache<Object, Object> nativeCacheNoNull =, +				this.cacheManager.getCache(CACHE_NAME_NO_NULL);, +		this.cacheNoNull = new JCacheCache(nativeCacheNoNull, false);, +		return getCache(true);, +	}, +, +	@Override protected JCacheCache getCache(boolean allowNull) {, +		return allowNull ? this.cache : this.cacheNoNull;, +++ b/spring-context-support/src/test/java/org/springframework/cache/caffeine/CaffeineCacheManagerTests.java, +++ b/spring-context-support/src/test/java/org/springframework/cache/caffeine/CaffeineCacheTests.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.cache.AbstractValueAdaptingCacheTests;, +public class CaffeineCacheTests extends AbstractValueAdaptingCacheTests<CaffeineCache> {, +	private CaffeineCache cacheNoNull;, +, +		com.github.benmanes.caffeine.cache.Cache<Object, Object> nativeCacheNoNull, +				= Caffeine.newBuilder().build();, +		cacheNoNull =  new CaffeineCache(CACHE_NAME_NO_NULL, nativeCacheNoNull, false);, +		return getCache(true);, +	}, +, +	@Override, +	protected CaffeineCache getCache(boolean allowNull) {, +		return allowNull ? this.cache : this.cacheNoNull;, +++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/JCacheEhCacheApiTests.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.cache.AbstractValueAdaptingCacheTests;, +public class JCacheEhCacheApiTests extends AbstractValueAdaptingCacheTests<JCacheCache> {, +	private JCacheCache cacheNoNull;, +, +		this.cacheManager.createCache(CACHE_NAME_NO_NULL, new MutableConfiguration<>());, +		Cache<Object, Object> nativeCacheNoNull =, +				this.cacheManager.getCache(CACHE_NAME_NO_NULL);, +		this.cacheNoNull = new JCacheCache(nativeCacheNoNull, false);, +		return getCache(true);, +	}, +, +	@Override protected JCacheCache getCache(boolean allowNull) {, +		return allowNull ? this.cache : this.cacheNoNull;, +++ b/spring-context/src/main/java/org/springframework/cache/support/AbstractValueAdaptingCache.java, + * Copyright 2002-2017 the original author or authors., +		if (userValue == null) {, +			if (this.allowNullValues) {, +			throw new IllegalArgumentException(, +					String.format("Cache '%s' is configured to not allow null " +, +							"values but null was provided", getName()));, +		}, +++ b/spring-context-support/src/test/java/org/springframework/cache/caffeine/CaffeineCacheManagerTests.java, +++ b/spring-context-support/src/test/java/org/springframework/cache/caffeine/CaffeineCacheTests.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.cache.AbstractValueAdaptingCacheTests;, +public class CaffeineCacheTests extends AbstractValueAdaptingCacheTests<CaffeineCache> {, +	private CaffeineCache cacheNoNull;, +, +		com.github.benmanes.caffeine.cache.Cache<Object, Object> nativeCacheNoNull, +				= Caffeine.newBuilder().build();, +		cacheNoNull =  new CaffeineCache(CACHE_NAME_NO_NULL, nativeCacheNoNull, false);, +		return getCache(true);, +	}, +]