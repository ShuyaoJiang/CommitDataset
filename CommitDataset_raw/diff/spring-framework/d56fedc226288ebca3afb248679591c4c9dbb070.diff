[+++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +		return DataBufferUtils.read(resource, dataBufferFactory, this.bufferSize);, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +		return DataBufferUtils.read(resource, dataBufferFactory, this.bufferSize);, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceRegionEncoder.java, +		long position = region.getPosition();, +		Flux<DataBuffer> in = DataBufferUtils.read(resource, position, bufferFactory, this.bufferSize);, +		return DataBufferUtils.takeUntilByteCount(in, region.getCount());, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +		return DataBufferUtils.read(resource, dataBufferFactory, this.bufferSize);, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceRegionEncoder.java, +		long position = region.getPosition();, +		Flux<DataBuffer> in = DataBufferUtils.read(resource, position, bufferFactory, this.bufferSize);, +		return DataBufferUtils.takeUntilByteCount(in, region.getCount());, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +import java.io.File;, +import java.nio.file.StandardOpenOption;, +import org.springframework.core.io.Resource;, +	/**, +	 * Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s., +	 * <p>If the resource is a file, it is read into an, +	 * {@code AsynchronousFileChannel} and turned to {@code Flux} via, +	 * {@link #read(AsynchronousFileChannel, DataBufferFactory, int)} or else, +	 * fall back on {@link #read(InputStream, DataBufferFactory, int)} closes, +	 * the channel when the flux is terminated., +	 * @param resource the resource to read from, +	 * @param dataBufferFactory the factory to create data buffers with, +	 * @param bufferSize the maximum size of the data buffers, +	 * @return a flux of data buffers read from the given channel, +	 */, +	public static Flux<DataBuffer> read(Resource resource,, +			DataBufferFactory dataBufferFactory, int bufferSize) {, +, +		return read(resource, 0, dataBufferFactory, bufferSize);, +	}, +, +	/**, +	 * Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s, +	 * starting at the given position., +	 * <p>If the resource is a file, it is read into an, +	 * {@code AsynchronousFileChannel} and turned to {@code Flux} via, +	 * {@link #read(AsynchronousFileChannel, DataBufferFactory, int)} or else, +	 * fall back on {@link #read(InputStream, DataBufferFactory, int)}. Closes, +	 * the channel when the flux is terminated., +	 * @param resource the resource to read from, +	 * @param position the position to start reading from, +	 * @param dataBufferFactory the factory to create data buffers with, +	 * @param bufferSize the maximum size of the data buffers, +	 * @return a flux of data buffers read from the given channel, +	 */, +	public static Flux<DataBuffer> read(Resource resource, long position,, +			DataBufferFactory dataBufferFactory, int bufferSize) {, +, +		try {, +			if (resource.isFile()) {, +				File file = resource.getFile();, +				AsynchronousFileChannel channel =, +						AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ);, +				return DataBufferUtils.read(channel, position, dataBufferFactory, bufferSize);, +			}, +		}, +		catch (IOException ignore) {, +			// fallback to resource.readableChannel(), below, +		}, +, +		try {, +			ReadableByteChannel channel = resource.readableChannel();, +			Flux<DataBuffer> in = DataBufferUtils.read(channel, dataBufferFactory, bufferSize);, +			return DataBufferUtils.skipUntilByteCount(in, position);, +		}, +		catch (IOException ex) {, +			return Flux.error(ex);, +		}, +	}, +, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +		return DataBufferUtils.read(resource, dataBufferFactory, this.bufferSize);, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceRegionEncoder.java, +		long position = region.getPosition();, +		Flux<DataBuffer> in = DataBufferUtils.read(resource, position, bufferFactory, this.bufferSize);, +		return DataBufferUtils.takeUntilByteCount(in, region.getCount());, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +import java.io.File;, +import java.nio.file.StandardOpenOption;, +import org.springframework.core.io.Resource;, +	/**, +	 * Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s., +	 * <p>If the resource is a file, it is read into an, +	 * {@code AsynchronousFileChannel} and turned to {@code Flux} via, +	 * {@link #read(AsynchronousFileChannel, DataBufferFactory, int)} or else, +	 * fall back on {@link #read(InputStream, DataBufferFactory, int)} closes, +	 * the channel when the flux is terminated., +	 * @param resource the resource to read from, +	 * @param dataBufferFactory the factory to create data buffers with, +	 * @param bufferSize the maximum size of the data buffers, +	 * @return a flux of data buffers read from the given channel, +	 */, +	public static Flux<DataBuffer> read(Resource resource,, +			DataBufferFactory dataBufferFactory, int bufferSize) {]