[+++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, + * and also support access to validation results through an, + * {@link org.springframework.validation.Errors} argument., + * and support access to validation results through a, + * {@link org.springframework.validation.Errors} argument., +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, + * and also support access to validation results through an, + * {@link org.springframework.validation.Errors} argument., + * and support access to validation results through a, + * {@link org.springframework.validation.Errors} argument., +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ErrorsMethodArgumentResolver.java, +				"An Errors/BindingResult argument is expected to be declared immediately after the model attribute, " +, +				"the @RequestBody or the @RequestPart arguments to which they apply: " + parameter.getMethod());, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, + * and also support access to validation results through an, + * {@link org.springframework.validation.Errors} argument., + * and support access to validation results through a, + * {@link org.springframework.validation.Errors} argument., +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ErrorsMethodArgumentResolver.java, +				"An Errors/BindingResult argument is expected to be declared immediately after the model attribute, " +, +				"the @RequestBody or the @RequestPart arguments to which they apply: " + parameter.getMethod());, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java, +				break;, +	 * Whether to raise a {@link BindException} on validation errors., +	 * @return {@code true} if the next method argument is not of type {@link Errors}., +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, + * and also support access to validation results through an, + * {@link org.springframework.validation.Errors} argument., + * and support access to validation results through a, + * {@link org.springframework.validation.Errors} argument., +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ErrorsMethodArgumentResolver.java, +				"An Errors/BindingResult argument is expected to be declared immediately after the model attribute, " +, +				"the @RequestBody or the @RequestPart arguments to which they apply: " + parameter.getMethod());, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java, +				break;, +	 * Whether to raise a {@link BindException} on validation errors., +	 * @return {@code true} if the next method argument is not of type {@link Errors}., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java, + * A base class for resolving method argument values by reading from the body of, + * a request with {@link HttpMessageConverter}s., +	 * Return the media types supported by all provided message converters sorted, +	 * by specificity via {@link MediaType#sortBySpecificity(List)}., +	 * Creates the method argument value of the expected parameter type by, +	 * reading from the given request., +	 * Creates the method argument value of the expected parameter type by reading, +	 * from the given HttpInputMessage., +	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter methodParam,, +			Class<T> paramType) throws IOException, HttpMediaTypeNotSupportedException {, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, + * and also support access to validation results through an, + * {@link org.springframework.validation.Errors} argument., + * and support access to validation results through a, + * {@link org.springframework.validation.Errors} argument., +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ErrorsMethodArgumentResolver.java, +				"An Errors/BindingResult argument is expected to be declared immediately after the model attribute, " +, +				"the @RequestBody or the @RequestPart arguments to which they apply: " + parameter.getMethod());, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java, +				break;, +	 * Whether to raise a {@link BindException} on validation errors., +	 * @return {@code true} if the next method argument is not of type {@link Errors}., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java, + * A base class for resolving method argument values by reading from the body of, + * a request with {@link HttpMessageConverter}s., +	 * Return the media types supported by all provided message converters sorted, +	 * by specificity via {@link MediaType#sortBySpecificity(List)}., +	 * Creates the method argument value of the expected parameter type by, +	 * reading from the given request., +	 * Creates the method argument value of the expected parameter type by reading, +	 * from the given HttpInputMessage., +	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter methodParam,, +			Class<T> paramType) throws IOException, HttpMediaTypeNotSupportedException {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestPartMethodArgumentResolver.java, +import org.springframework.validation.Errors;, +				if (arg != null) {, +					validate(binder, parameter);, +				mavContainer.addAttribute(BindingResult.MODEL_KEY_PREFIX + partName, binder.getBindingResult());, +	private void validate(WebDataBinder binder, MethodParameter parameter) throws MethodArgumentNotValidException {, +, +		Annotation[] annotations = parameter.getParameterAnnotations();, +		for (Annotation annot : annotations) {, +			if (annot.annotationType().getSimpleName().startsWith("Valid")) {, +				Object hints = AnnotationUtils.getValue(annot);, +				binder.validate(hints instanceof Object[] ? (Object[]) hints : new Object[] {hints});, +				BindingResult bindingResult = binder.getBindingResult();, +				if (bindingResult.hasErrors()) {, +					if (isBindExceptionRequired(binder, parameter)) {, +						throw new MethodArgumentNotValidException(parameter, bindingResult);, +					}, +				}, +			}, +		}, +	}, +, +	/**, +	 * Whether to raise a {@link MethodArgumentNotValidException} on validation errors., +	 * @param binder the data binder used to perform data binding, +	 * @param parameter the method argument, +	 * @return {@code true} if the next method argument is not of type {@link Errors}., +	 */, +	private boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {]