[+++ b/spring-context/src/test/java/org/springframework/beans/factory/support/InjectAnnotationAutowireContextTests.java, + * Copyright 2002-2015 the original author or authors., +	public @interface TestQualifier {, +	public @interface TestQualifierWithDefaultValue {, +		String value() default "default";, +	public @interface TestQualifierWithMultipleAttributes {, +		String value() default "default";, +		int number();, +++ b/spring-context/src/test/java/org/springframework/beans/factory/support/InjectAnnotationAutowireContextTests.java, + * Copyright 2002-2015 the original author or authors., +	public @interface TestQualifier {, +	public @interface TestQualifierWithDefaultValue {, +		String value() default "default";, +	public @interface TestQualifierWithMultipleAttributes {, +		String value() default "default";, +		int number();, +++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java, +				if ((name == null || name.equals(field.getName())) &&, +						(type == null || type.equals(field.getType()))) {, +						(i < name.length() - 1) && name.charAt(i) == '$');, +		if ((!Modifier.isPublic(field.getModifiers()) ||, +				!Modifier.isPublic(field.getDeclaringClass().getModifiers()) ||, +++ b/spring-context/src/test/java/org/springframework/beans/factory/support/InjectAnnotationAutowireContextTests.java, + * Copyright 2002-2015 the original author or authors., +	public @interface TestQualifier {, +	public @interface TestQualifierWithDefaultValue {, +		String value() default "default";, +	public @interface TestQualifierWithMultipleAttributes {, +		String value() default "default";, +		int number();, +++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java, +				if ((name == null || name.equals(field.getName())) &&, +						(type == null || type.equals(field.getType()))) {, +						(i < name.length() - 1) && name.charAt(i) == '$');, +		if ((!Modifier.isPublic(field.getModifiers()) ||, +				!Modifier.isPublic(field.getDeclaringClass().getModifiers()) ||, +++ b/spring-web/src/test/java/org/springframework/web/bind/support/WebRequestDataBinderTests.java, + * Copyright 2002-2015 the original author or authors., +	public void testFieldDefaultWithNestedProperty() throws Exception {, +		TestBean target = new TestBean();, +		target.setSpouse(new TestBean());, +		WebRequestDataBinder binder = new WebRequestDataBinder(target);, +, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.addParameter("!spouse.postProcessed", "on");, +		request.addParameter("_spouse.postProcessed", "visible");, +		request.addParameter("spouse.postProcessed", "on");, +		binder.bind(new ServletWebRequest(request));, +		assertTrue(((TestBean) target.getSpouse()).isPostProcessed());, +, +		request.removeParameter("spouse.postProcessed");, +		binder.bind(new ServletWebRequest(request));, +		assertTrue(((TestBean) target.getSpouse()).isPostProcessed());, +, +		request.removeParameter("!spouse.postProcessed");, +		binder.bind(new ServletWebRequest(request));, +		assertFalse(((TestBean) target.getSpouse()).isPostProcessed());, +	}, +, +	@Test]