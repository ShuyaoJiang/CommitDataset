[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.DefaultParameterNameDiscoverer;, +	 * <p>The default implementation creates a {@link DefaultParameterNameDiscoverer}, +	 * and adds a specifically configured {@link AspectJAdviceParameterNameDiscoverer}., +		DefaultParameterNameDiscoverer discoverer = new DefaultParameterNameDiscoverer();, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.DefaultParameterNameDiscoverer;, +	 * <p>The default implementation creates a {@link DefaultParameterNameDiscoverer}, +	 * and adds a specifically configured {@link AspectJAdviceParameterNameDiscoverer}., +		DefaultParameterNameDiscoverer discoverer = new DefaultParameterNameDiscoverer();, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java, +import org.springframework.core.DefaultParameterNameDiscoverer;, +import org.springframework.core.ParameterNameDiscoverer;, +	private static final ParameterNameDiscoverer parameterNameDiscoverer = new DefaultParameterNameDiscoverer();, +, +				this.parameterNames = parameterNameDiscoverer.getParameterNames(getMethod());, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.DefaultParameterNameDiscoverer;, +	 * <p>The default implementation creates a {@link DefaultParameterNameDiscoverer}, +	 * and adds a specifically configured {@link AspectJAdviceParameterNameDiscoverer}., +		DefaultParameterNameDiscoverer discoverer = new DefaultParameterNameDiscoverer();, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java, +import org.springframework.core.DefaultParameterNameDiscoverer;, +import org.springframework.core.ParameterNameDiscoverer;, +	private static final ParameterNameDiscoverer parameterNameDiscoverer = new DefaultParameterNameDiscoverer();, +, +				this.parameterNames = parameterNameDiscoverer.getParameterNames(getMethod());, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java, + * Copyright 2002-2013 the original author or authors., +	protected final ParameterNameDiscoverer parameterNameDiscoverer = new AspectJAnnotationParameterNameDiscoverer();, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.DefaultParameterNameDiscoverer;, +	 * <p>The default implementation creates a {@link DefaultParameterNameDiscoverer}, +	 * and adds a specifically configured {@link AspectJAdviceParameterNameDiscoverer}., +		DefaultParameterNameDiscoverer discoverer = new DefaultParameterNameDiscoverer();, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java, +import org.springframework.core.DefaultParameterNameDiscoverer;, +import org.springframework.core.ParameterNameDiscoverer;, +	private static final ParameterNameDiscoverer parameterNameDiscoverer = new DefaultParameterNameDiscoverer();, +, +				this.parameterNames = parameterNameDiscoverer.getParameterNames(getMethod());, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java, + * Copyright 2002-2013 the original author or authors., +	protected final ParameterNameDiscoverer parameterNameDiscoverer = new AspectJAnnotationParameterNameDiscoverer();, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +import org.springframework.core.DefaultParameterNameDiscoverer;, +	private ParameterNameDiscoverer parameterNameDiscoverer = new DefaultParameterNameDiscoverer();, +	 * <p>Default is a {@link DefaultParameterNameDiscoverer}., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.DefaultParameterNameDiscoverer;, +	 * <p>The default implementation creates a {@link DefaultParameterNameDiscoverer}, +	 * and adds a specifically configured {@link AspectJAdviceParameterNameDiscoverer}., +		DefaultParameterNameDiscoverer discoverer = new DefaultParameterNameDiscoverer();, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java, +import org.springframework.core.DefaultParameterNameDiscoverer;, +import org.springframework.core.ParameterNameDiscoverer;, +	private static final ParameterNameDiscoverer parameterNameDiscoverer = new DefaultParameterNameDiscoverer();, +, +				this.parameterNames = parameterNameDiscoverer.getParameterNames(getMethod());, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java, + * Copyright 2002-2013 the original author or authors., +	protected final ParameterNameDiscoverer parameterNameDiscoverer = new AspectJAnnotationParameterNameDiscoverer();, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +import org.springframework.core.DefaultParameterNameDiscoverer;, +	private ParameterNameDiscoverer parameterNameDiscoverer = new DefaultParameterNameDiscoverer();, +	 * <p>Default is a {@link DefaultParameterNameDiscoverer}., +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/ExpressionEvaluator.java, +import org.springframework.core.DefaultParameterNameDiscoverer;, +	private final ParameterNameDiscoverer paramNameDiscoverer = new DefaultParameterNameDiscoverer();, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.DefaultParameterNameDiscoverer;, +	 * <p>The default implementation creates a {@link DefaultParameterNameDiscoverer}, +	 * and adds a specifically configured {@link AspectJAdviceParameterNameDiscoverer}., +		DefaultParameterNameDiscoverer discoverer = new DefaultParameterNameDiscoverer();, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java, +import org.springframework.core.DefaultParameterNameDiscoverer;, +import org.springframework.core.ParameterNameDiscoverer;, +	private static final ParameterNameDiscoverer parameterNameDiscoverer = new DefaultParameterNameDiscoverer();, +, +				this.parameterNames = parameterNameDiscoverer.getParameterNames(getMethod());, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java, + * Copyright 2002-2013 the original author or authors., +	protected final ParameterNameDiscoverer parameterNameDiscoverer = new AspectJAnnotationParameterNameDiscoverer();, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +import org.springframework.core.DefaultParameterNameDiscoverer;, +	private ParameterNameDiscoverer parameterNameDiscoverer = new DefaultParameterNameDiscoverer();, +	 * <p>Default is a {@link DefaultParameterNameDiscoverer}., +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/ExpressionEvaluator.java, +import org.springframework.core.DefaultParameterNameDiscoverer;, +	private final ParameterNameDiscoverer paramNameDiscoverer = new DefaultParameterNameDiscoverer();, +++ b/spring-context/src/main/java/org/springframework/jmx/export/assembler/AbstractReflectiveMBeanInfoAssembler.java, +import org.springframework.core.DefaultParameterNameDiscoverer;, +	private ParameterNameDiscoverer parameterNameDiscoverer = new DefaultParameterNameDiscoverer();, +	 * <p>Default is a {@link DefaultParameterNameDiscoverer}.]