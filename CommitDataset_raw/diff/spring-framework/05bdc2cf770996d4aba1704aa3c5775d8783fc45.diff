[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java, +	 * Return the configured {@code MessageHeaderInitializer}, if any., +, +	 * list of {@link Message}s. If the input buffer contains partial STOMP frame, +	 * content, or additional content with a partial STOMP frame, the buffer is, +	 * reset and {@code null} is returned., +	 * @return the decoded messages, or an empty list if none, +			Message<byte[]> message = decodeMessage(buffer, partialMessageHeaders);, +			if (message != null) {, +				messages.add(message);, +				if (payload.length > 0 && !headerAccessor.getCommand().isBodyAllowed()) {, +, +		MessageHeaderInitializer initializer = getHeaderInitializer();, +		if (initializer != null) {, +			initializer.initHeaders(headerAccessor);, +		StringBuilder sb = new StringBuilder(inString.length());, +			if (index + 1 >= inString.length()) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java, +	 * Return the configured {@code MessageHeaderInitializer}, if any., +, +	 * list of {@link Message}s. If the input buffer contains partial STOMP frame, +	 * content, or additional content with a partial STOMP frame, the buffer is, +	 * reset and {@code null} is returned., +	 * @return the decoded messages, or an empty list if none, +			Message<byte[]> message = decodeMessage(buffer, partialMessageHeaders);, +			if (message != null) {, +				messages.add(message);, +				if (payload.length > 0 && !headerAccessor.getCommand().isBodyAllowed()) {, +, +		MessageHeaderInitializer initializer = getHeaderInitializer();, +		if (initializer != null) {, +			initializer.initHeaders(headerAccessor);, +		StringBuilder sb = new StringBuilder(inString.length());, +			if (index + 1 >= inString.length()) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompEncoder.java, +, +		catch (IOException ex) {, +			throw new StompConversionException("Failed to encode STOMP frame, headers=" + headers,  ex);, +			logger.trace("Encoding STOMP " + command + ", headers=" + nativeHeaders);, +		String inputToUse = (escape ? escape(input) : input);, +		return inputToUse.getBytes(StompDecoder.UTF8_CHARSET);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java, +	 * Return the configured {@code MessageHeaderInitializer}, if any., +, +	 * list of {@link Message}s. If the input buffer contains partial STOMP frame, +	 * content, or additional content with a partial STOMP frame, the buffer is, +	 * reset and {@code null} is returned., +	 * @return the decoded messages, or an empty list if none, +			Message<byte[]> message = decodeMessage(buffer, partialMessageHeaders);, +			if (message != null) {, +				messages.add(message);, +				if (payload.length > 0 && !headerAccessor.getCommand().isBodyAllowed()) {, +, +		MessageHeaderInitializer initializer = getHeaderInitializer();, +		if (initializer != null) {, +			initializer.initHeaders(headerAccessor);, +		StringBuilder sb = new StringBuilder(inString.length());, +			if (index + 1 >= inString.length()) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompEncoder.java, +, +		catch (IOException ex) {, +			throw new StompConversionException("Failed to encode STOMP frame, headers=" + headers,  ex);, +			logger.trace("Encoding STOMP " + command + ", headers=" + nativeHeaders);, +		String inputToUse = (escape ? escape(input) : input);, +		return inputToUse.getBytes(StompDecoder.UTF8_CHARSET);, +++ b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, +	public static final Charset DEFAULT_CHARSET = Charset.forName("UTF-8");, +, +	private Charset charset = DEFAULT_CHARSET;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java, +	 * Return the configured {@code MessageHeaderInitializer}, if any., +, +	 * list of {@link Message}s. If the input buffer contains partial STOMP frame, +	 * content, or additional content with a partial STOMP frame, the buffer is, +	 * reset and {@code null} is returned., +	 * @return the decoded messages, or an empty list if none, +			Message<byte[]> message = decodeMessage(buffer, partialMessageHeaders);, +			if (message != null) {, +				messages.add(message);, +				if (payload.length > 0 && !headerAccessor.getCommand().isBodyAllowed()) {, +, +		MessageHeaderInitializer initializer = getHeaderInitializer();, +		if (initializer != null) {, +			initializer.initHeaders(headerAccessor);, +		StringBuilder sb = new StringBuilder(inString.length());, +			if (index + 1 >= inString.length()) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompEncoder.java, +, +		catch (IOException ex) {, +			throw new StompConversionException("Failed to encode STOMP frame, headers=" + headers,  ex);, +			logger.trace("Encoding STOMP " + command + ", headers=" + nativeHeaders);, +		String inputToUse = (escape ? escape(input) : input);, +		return inputToUse.getBytes(StompDecoder.UTF8_CHARSET);, +++ b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, +	public static final Charset DEFAULT_CHARSET = Charset.forName("UTF-8");, +, +	private Charset charset = DEFAULT_CHARSET;, +++ b/spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java, + * Copyright 2002-2014 the original author or authors., +]