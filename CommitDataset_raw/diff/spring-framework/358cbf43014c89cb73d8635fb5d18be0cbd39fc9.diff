[+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/EnableScheduling.java, +import java.util.concurrent.Executor;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.scheduling.Trigger;, +import org.springframework.scheduling.config.ScheduledTaskRegistrar;, + * Enables Spring's scheduled task execution capability, similar to, + * functionality found in Spring's {@code <task:*>} XML namespace. To be used, + * on @{@link Configuration} classes as follows:, + *, + * <pre class="code">, + * &#064;Configuration, + * &#064;EnableScheduling, + * public class AppConfig {, + *     // various &#064;Bean definitions, + * }</pre>, + *, + * This enables detection of @{@link Scheduled} annotations on any Spring-managed, + * bean in the container.  For example, given a class {@code MyTask}, + *, + * <pre class="code">, + * package com.myco.tasks;, + *, + * public class MyTask {, + *     &#064;Scheduled(fixedRate=1000), + *     public void work() {, + *         // task execution logic, + *     }, + * }</pre>, + *, + * the following configuration would ensure that {@code MyTask.work()} is called, + * once every 1000 ms:, + *, + * <pre class="code">, + * &#064;Configuration, + * &#064;EnableScheduling, + * public class AppConfig {, + *     &#064;Bean, + *     public MyTask task() {, + *         return new MyTask();, + *     }, + * }</pre>, + *, + * Alternatively, if {@code MyTask} were annotated with {@code @Component}, the, + * following configuration would ensure that its {@code @Scheduled} method is, + * invoked at the desired interval:, + *, + * <pre class="code">, + * &#064;Configuration, + * &#064;ComponentScan(basePackages="com.myco.tasks"), + * public class AppConfig {, + * }</pre>, + *, + * Methods annotated with {@code @Scheduled} may even be declared directly within, + * {@code @Configuration} classes:, + *, + * <pre class="code">, + * &#064;Configuration, + * &#064;EnableScheduling, + * public class AppConfig {, + *     &#064;Scheduled(fixedRate=1000), + *     public void work() {, + *         // task execution logic, + *     }, + * }</pre>, + *, + * In all of the above scenarios, a default single-threaded task executor is used., + * When more control is desired, a {@code @Configuration} class may implement, + * {@link SchedulingConfigurer}. This allows access to the underlying, + * {@link ScheduledTaskRegistrar} instance. For example, the following example, + * demonstrates how to customize the {@link Executor} used to execute scheduled, + * tasks:, + *, + * <pre class="code">, + * &#064;Configuration, + * &#064;EnableScheduling, + * public class AppConfig implements SchedulingConfigurer {, + *     &#064;Override, + *     public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {, + *         taskRegistrar.setScheduler(taskExecutor());, + *     }, + *, + *     &#064;Bean, + *     public Executor taskExecutor() {, + *         return Executors.newScheduledThreadPool(100);, + *     }, + * }</pre>, + *, + * Implementing {@code SchedulingConfigurer} also allows for fine-grained, + * control over task registration via the {@code ScheduledTaskRegistrar}., + * For example, the following configures the execution of a particular bean, + * method per a custom {@code Trigger} implementation:, + *, + * <pre class="code">, + * &#064;Configuration, + * &#064;EnableScheduling, + * public class AppConfig implements SchedulingConfigurer {, + *     &#064;Override, + *     public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {, + *         taskRegistrar.setScheduler(taskExecutor());, + *         taskRegistrar.addTriggerTask(]