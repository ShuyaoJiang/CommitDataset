[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/ChannelRegistration.java, +import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;, +	 * Configure the thread pool backing this message channel using a custom, +	 * ThreadPoolTaskExecutor., +	 */, +	public TaskExecutorRegistration taskExecutor(ThreadPoolTaskExecutor taskExecutor) {, +		if (this.registration == null) {, +			this.registration = new TaskExecutorRegistration(taskExecutor);, +		}, +		return this.registration;, +	}, +, +	/**, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/ChannelRegistration.java, +import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;, +	 * Configure the thread pool backing this message channel using a custom, +	 * ThreadPoolTaskExecutor., +	 */, +	public TaskExecutorRegistration taskExecutor(ThreadPoolTaskExecutor taskExecutor) {, +		if (this.registration == null) {, +			this.registration = new TaskExecutorRegistration(taskExecutor);, +		}, +		return this.registration;, +	}, +, +	/**, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/TaskExecutorRegistration.java, +	private ThreadPoolTaskExecutor taskExecutor;, +, +	public TaskExecutorRegistration() {, +	}, +, +	public TaskExecutorRegistration(ThreadPoolTaskExecutor taskExecutor) {, +		this.taskExecutor = taskExecutor;, +	}, +, +		ThreadPoolTaskExecutor executor = (this.taskExecutor != null ? this.taskExecutor : new ThreadPoolTaskExecutor());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/ChannelRegistration.java, +import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;, +	 * Configure the thread pool backing this message channel using a custom, +	 * ThreadPoolTaskExecutor., +	 */, +	public TaskExecutorRegistration taskExecutor(ThreadPoolTaskExecutor taskExecutor) {, +		if (this.registration == null) {, +			this.registration = new TaskExecutorRegistration(taskExecutor);, +		}, +		return this.registration;, +	}, +, +	/**, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/TaskExecutorRegistration.java, +	private ThreadPoolTaskExecutor taskExecutor;, +, +	public TaskExecutorRegistration() {, +	}, +, +	public TaskExecutorRegistration(ThreadPoolTaskExecutor taskExecutor) {, +		this.taskExecutor = taskExecutor;, +	}, +, +		ThreadPoolTaskExecutor executor = (this.taskExecutor != null ? this.taskExecutor : new ThreadPoolTaskExecutor());, +++ /dev/null, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/ChannelRegistration.java, +import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;, +	 * Configure the thread pool backing this message channel using a custom, +	 * ThreadPoolTaskExecutor., +	 */, +	public TaskExecutorRegistration taskExecutor(ThreadPoolTaskExecutor taskExecutor) {, +		if (this.registration == null) {, +			this.registration = new TaskExecutorRegistration(taskExecutor);, +		}, +		return this.registration;, +	}, +, +	/**, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/TaskExecutorRegistration.java, +	private ThreadPoolTaskExecutor taskExecutor;, +, +	public TaskExecutorRegistration() {, +	}, +, +	public TaskExecutorRegistration(ThreadPoolTaskExecutor taskExecutor) {, +		this.taskExecutor = taskExecutor;, +	}, +, +		ThreadPoolTaskExecutor executor = (this.taskExecutor != null ? this.taskExecutor : new ThreadPoolTaskExecutor());, +++ /dev/null, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/config/MessageBrokerConfigurationTests.java, +		CustomThreadPoolTaskExecutor taskExecutor = this.customContext.getBean(, +				"clientInboundChannelExecutor", CustomThreadPoolTaskExecutor.class);, +			registration.taskExecutor(new CustomThreadPoolTaskExecutor()), +					.corePoolSize(11).maxPoolSize(12).keepAliveSeconds(13).queueCapacity(14);, +	private static class CustomThreadPoolTaskExecutor extends ThreadPoolTaskExecutor {, +	}, +]