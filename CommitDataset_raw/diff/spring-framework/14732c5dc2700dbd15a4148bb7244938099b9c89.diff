[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, + * ancestry of the class, in a 'flattened-out' manner., +		return (this == other || (other instanceof ConfigurationClass &&, +				getMetadata().getClassName().equals(((ConfigurationClass) other).getMetadata().getClassName())));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, + * ancestry of the class, in a 'flattened-out' manner., +		return (this == other || (other instanceof ConfigurationClass &&, +				getMetadata().getClassName().equals(((ConfigurationClass) other).getMetadata().getClassName())));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, + * @see ConfigurationClassParser, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, + * ancestry of the class, in a 'flattened-out' manner., +		return (this == other || (other instanceof ConfigurationClass &&, +				getMetadata().getClassName().equals(((ConfigurationClass) other).getMetadata().getClassName())));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, + * @see ConfigurationClassParser, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, + * interoperate effectively with lazy class loading in a Spring ApplicationContext., + * <p>This class helps separate the concern of parsing the structure of a Configuration, + * class from the concern of registering {@link BeanDefinition} objects based on the, + * content of that model., +		if (this.model.contains(configClass) && configClass.getBeanName() != null) {, +			// Explicit bean definition found, probably replacing an import., +			// Let's remove the old one and go with the new one., +			this.model.remove(configClass);, +		}, +		this.model.add(configClass);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, + * ancestry of the class, in a 'flattened-out' manner., +		return (this == other || (other instanceof ConfigurationClass &&, +				getMetadata().getClassName().equals(((ConfigurationClass) other).getMetadata().getClassName())));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, + * @see ConfigurationClassParser, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, + * interoperate effectively with lazy class loading in a Spring ApplicationContext., + * <p>This class helps separate the concern of parsing the structure of a Configuration, + * class from the concern of registering {@link BeanDefinition} objects based on the, + * content of that model., +		if (this.model.contains(configClass) && configClass.getBeanName() != null) {, +			// Explicit bean definition found, probably replacing an import., +			// Let's remove the old one and go with the new one., +			this.model.remove(configClass);, +		}, +		this.model.add(configClass);, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/ImportTests.java, +import test.beans.ITestBean;, +import test.beans.TestBean;, +, +	@Test, +	public void testProcessImportsWithDoubleImports() {, +		int configClasses = 3;, +		int beansInClasses = 3;, +		assertBeanDefinitionCount((configClasses + beansInClasses), ConfigurationWithImportAnnotation.class, OtherConfigurationWithImportAnnotation.class);, +	}, +, +	@Test, +	public void testProcessImportsWithExplicitOverridingBefore() {, +		int configClasses = 2;, +		int beansInClasses = 2;, +		assertBeanDefinitionCount((configClasses + beansInClasses), OtherConfiguration.class, ConfigurationWithImportAnnotation.class);, +	}, +, +	@Test, +	public void testProcessImportsWithExplicitOverridingAfter() {, +		int configClasses = 2;, +		int beansInClasses = 2;, +		assertBeanDefinitionCount((configClasses + beansInClasses), ConfigurationWithImportAnnotation.class, OtherConfiguration.class);, +	}, +, +	@Import(OtherConfiguration.class), +	static class OtherConfigurationWithImportAnnotation {, +	@Configuration, +	static class OtherConfiguration {, +		@Bean, +		public ITestBean three() {, +			return new TestBean();, +		}, +	}, +]