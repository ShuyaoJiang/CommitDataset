[+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +import java.util.concurrent.Callable;, +import org.springframework.web.context.request.NativeWebRequest;, +import org.springframework.web.context.request.async.CallableProcessingInterceptor;, +import org.springframework.web.context.request.async.WebAsyncUtils;, +				if (isFirstRequest || !applySessionBindingInterceptor(asyncManager, key)) {, +					asyncManager.registerCallableInterceptor(key,, +							new SessionBindingCallableInterceptor(sessionFactory, sessionHolder));, +	private boolean applySessionBindingInterceptor(WebAsyncManager asyncManager, String key) {, +		if (asyncManager.getCallableInterceptor(key) == null) {, +			return false;, +		}, +		((SessionBindingCallableInterceptor) asyncManager.getCallableInterceptor(key)).initializeThread();, +		return true;, +	}, +, +	/**, +	 * Bind and unbind the Hibernate {@code Session} to the current thread., +	 */, +	private static class SessionBindingCallableInterceptor implements CallableProcessingInterceptor {, +, +		private final SessionFactory sessionFactory;, +, +		private final SessionHolder sessionHolder;, +, +		public SessionBindingCallableInterceptor(SessionFactory sessionFactory, SessionHolder sessionHolder) {, +			this.sessionFactory = sessionFactory;, +			this.sessionHolder = sessionHolder;, +, +		public void preProcess(NativeWebRequest request, Callable<?> task) {, +			initializeThread();, +, +		private void initializeThread() {, +			TransactionSynchronizationManager.bindResource(this.sessionFactory, this.sessionHolder);, +		}, +, +		public void postProcess(NativeWebRequest request, Callable<?> task, Object concurrentResult) {, +			TransactionSynchronizationManager.unbindResource(this.sessionFactory);, +		}, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +import java.util.concurrent.Callable;, +import org.springframework.web.context.request.NativeWebRequest;, +import org.springframework.web.context.request.async.CallableProcessingInterceptor;, +import org.springframework.web.context.request.async.WebAsyncUtils;, +				if (isFirstRequest || !applySessionBindingInterceptor(asyncManager, key)) {, +					asyncManager.registerCallableInterceptor(key,, +							new SessionBindingCallableInterceptor(sessionFactory, sessionHolder));, +	private boolean applySessionBindingInterceptor(WebAsyncManager asyncManager, String key) {, +		if (asyncManager.getCallableInterceptor(key) == null) {, +			return false;, +		}, +		((SessionBindingCallableInterceptor) asyncManager.getCallableInterceptor(key)).initializeThread();, +		return true;, +	}, +, +	/**, +	 * Bind and unbind the Hibernate {@code Session} to the current thread., +	 */, +	private static class SessionBindingCallableInterceptor implements CallableProcessingInterceptor {, +, +		private final SessionFactory sessionFactory;, +, +		private final SessionHolder sessionHolder;, +, +		public SessionBindingCallableInterceptor(SessionFactory sessionFactory, SessionHolder sessionHolder) {, +			this.sessionFactory = sessionFactory;, +			this.sessionHolder = sessionHolder;, +, +		public void preProcess(NativeWebRequest request, Callable<?> task) {, +			initializeThread();, +, +		private void initializeThread() {, +			TransactionSynchronizationManager.bindResource(this.sessionFactory, this.sessionHolder);, +		}, +, +		public void postProcess(NativeWebRequest request, Callable<?> task, Object concurrentResult) {, +			TransactionSynchronizationManager.unbindResource(this.sessionFactory);, +		}, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewInterceptor.java, +import java.util.concurrent.Callable;, +, +import org.springframework.web.context.request.NativeWebRequest;, +import org.springframework.web.context.request.async.CallableProcessingInterceptor;, +import org.springframework.web.context.request.async.WebAsyncUtils;, +			if (applySessionBindingInterceptor(asyncManager, participateAttributeName)) {, +				asyncManager.registerCallableInterceptor(participateAttributeName,, +						new SessionBindingCallableInterceptor(sessionHolder));, +	private boolean applySessionBindingInterceptor(WebAsyncManager asyncManager, String key) {, +		if (asyncManager.getCallableInterceptor(key) == null) {, +			return false;, +		((SessionBindingCallableInterceptor) asyncManager.getCallableInterceptor(key)).initializeThread();, +		return true;, +, +	/**, +	 * Bind and unbind the Hibernate {@code Session} to the current thread., +	 */, +	private class SessionBindingCallableInterceptor implements CallableProcessingInterceptor {, +, +		private final SessionHolder sessionHolder;, +]