[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfo.java, +import org.springframework.web.servlet.mvc.method.condition.PatternsRequestCondition;, + * Contains request mapping conditions to be matched to a given request., +	private final PatternsRequestCondition patternsCondition;, +	 * Creates a new {@code RequestMappingInfo} instance., +	public RequestMappingInfo(PatternsRequestCondition patternsCondition,, +		this.patternsCondition = patternsCondition != null ? patternsCondition : new PatternsRequestCondition();, +	/**, +	 * Package protected, used for testing., +	 */, +	RequestMappingInfo(String[] patterns, RequestMethod... methods) {, +		this(new PatternsRequestCondition(patterns), new RequestMethodsRequestCondition(methods), null, null, null, null);, +	public PatternsRequestCondition getPatternsCondition() {, +		return patternsCondition;, +	 * Returns the request method condition of this request mapping info., +	public RequestMethodsRequestCondition getMethodsCondition() {, +	 * Returns the request parameters condition of this request mapping info., +	public ParamsRequestCondition getParamsCondition() {, +	 * Returns the request headers condition of this request mapping info., +	public HeadersRequestCondition getHeadersCondition() {, +	 * Returns the request consumes condition of this request mapping info., +	public ConsumesRequestCondition getConsumesCondition() {, +	 * Returns the request produces condition of this request mapping info., +	public ProducesRequestCondition getProducesCondition() {, +	public RequestMappingInfo combine(RequestMappingInfo methodKey) {, +		PatternsRequestCondition patterns = this.patternsCondition.combine(methodKey.patternsCondition);, +	 * Returns a new {@code RequestMappingInfo} with conditions relevant to the current request., +	 * For example the list of URL path patterns is trimmed to contain the patterns that match the URL., +	public RequestMappingInfo getMatchingRequestMapping(HttpServletRequest request) {, +		RequestMethodsRequestCondition matchingMethod = methodsCondition.getMatchingCondition(request);, +		ParamsRequestCondition matchingParams = paramsCondition.getMatchingCondition(request);, +		HeadersRequestCondition matchingHeaders = headersCondition.getMatchingCondition(request);, +		ConsumesRequestCondition matchingConsumes = consumesCondition.getMatchingCondition(request);, +		ProducesRequestCondition matchingProduces = producesCondition.getMatchingCondition(request);, +		if (matchingMethod == null || matchingParams == null || matchingHeaders == null ||, +				matchingConsumes == null || matchingProduces == null)  {, +		, +		PatternsRequestCondition matchingPatterns = patternsCondition.getMatchingCondition(request);, +		if (matchingPatterns != null) {, +			return new RequestMappingInfo(matchingPatterns, matchingMethod,, +					matchingParams, matchingHeaders, matchingConsumes,, +					matchingProduces);, +			return (this.patternsCondition.equals(other.patternsCondition) &&, +			result = patternsCondition.hashCode();, +		builder.append(patternsCondition);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfo.java, +import org.springframework.web.servlet.mvc.method.condition.PatternsRequestCondition;, + * Contains request mapping conditions to be matched to a given request., +	private final PatternsRequestCondition patternsCondition;, +	 * Creates a new {@code RequestMappingInfo} instance., +	public RequestMappingInfo(PatternsRequestCondition patternsCondition,, +		this.patternsCondition = patternsCondition != null ? patternsCondition : new PatternsRequestCondition();, +	/**, +	 * Package protected, used for testing., +	 */, +	RequestMappingInfo(String[] patterns, RequestMethod... methods) {, +		this(new PatternsRequestCondition(patterns), new RequestMethodsRequestCondition(methods), null, null, null, null);, +	public PatternsRequestCondition getPatternsCondition() {, +		return patternsCondition;, +	 * Returns the request method condition of this request mapping info., +	public RequestMethodsRequestCondition getMethodsCondition() {, +	 * Returns the request parameters condition of this request mapping info., +	public ParamsRequestCondition getParamsCondition() {, +	 * Returns the request headers condition of this request mapping info., +	public HeadersRequestCondition getHeadersCondition() {, +	 * Returns the request consumes condition of this request mapping info., +	public ConsumesRequestCondition getConsumesCondition() {, +	 * Returns the request produces condition of this request mapping info., +	public ProducesRequestCondition getProducesCondition() {, +	public RequestMappingInfo combine(RequestMappingInfo methodKey) {, +		PatternsRequestCondition patterns = this.patternsCondition.combine(methodKey.patternsCondition);, +	 * Returns a new {@code RequestMappingInfo} with conditions relevant to the current request., +	 * For example the list of URL path patterns is trimmed to contain the patterns that match the URL., +	public RequestMappingInfo getMatchingRequestMapping(HttpServletRequest request) {, +		RequestMethodsRequestCondition matchingMethod = methodsCondition.getMatchingCondition(request);, +		ParamsRequestCondition matchingParams = paramsCondition.getMatchingCondition(request);, +		HeadersRequestCondition matchingHeaders = headersCondition.getMatchingCondition(request);, +		ConsumesRequestCondition matchingConsumes = consumesCondition.getMatchingCondition(request);, +		ProducesRequestCondition matchingProduces = producesCondition.getMatchingCondition(request);, +		if (matchingMethod == null || matchingParams == null || matchingHeaders == null ||, +				matchingConsumes == null || matchingProduces == null)  {, +		, +		PatternsRequestCondition matchingPatterns = patternsCondition.getMatchingCondition(request);, +		if (matchingPatterns != null) {, +			return new RequestMappingInfo(matchingPatterns, matchingMethod,, +					matchingParams, matchingHeaders, matchingConsumes,, +					matchingProduces);, +			return (this.patternsCondition.equals(other.patternsCondition) &&, +			result = patternsCondition.hashCode();, +		builder.append(patternsCondition);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java, +		return mapping.getPatternsCondition().getPatterns();, +		return mapping.getMatchingRequestMapping(request);, +		return new RequestMappingInfoComparator(request);, +		String pattern = info.getPatternsCondition().getPatterns().iterator().next();, +		if (!info.getProducesCondition().isEmpty()) {, +			Set<MediaType> mediaTypes = info.getProducesCondition().getMediaTypes();, +			for (String pattern : info.getPatternsCondition().getPatterns()) {, +					if (info.getMethodsCondition().getMatchingCondition(request) == null) {, +						for (RequestMethod method : info.getMethodsCondition().getMethods()) {]