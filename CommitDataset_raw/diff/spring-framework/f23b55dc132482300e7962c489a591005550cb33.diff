[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +			return "[TypeDescriptor.NULL]";, +			builder.append("[TypeDescriptor ");, +			builder.append("]");, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +			return "[TypeDescriptor.NULL]";, +			builder.append("[TypeDescriptor ");, +			builder.append("]");, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +import org.springframework.core.style.StylerUtils;, +		if (logger.isDebugEnabled()) {, +			logger.debug("Converting value " + StylerUtils.style(source) +" of " + sourceType + " to " + targetType);, +		}, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +			return "[TypeDescriptor.NULL]";, +			builder.append("[TypeDescriptor ");, +			builder.append("]");, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +import org.springframework.core.style.StylerUtils;, +		if (logger.isDebugEnabled()) {, +			logger.debug("Converting value " + StylerUtils.style(source) +" of " + sourceType + " to " + targetType);, +		}, +++ b/org.springframework.web.servlet/.classpath, +	<classpathentry combineaccessrules="false" kind="src" path="/org.springframework.expression"/>, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +			return "[TypeDescriptor.NULL]";, +			builder.append("[TypeDescriptor ");, +			builder.append("]");, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +import org.springframework.core.style.StylerUtils;, +		if (logger.isDebugEnabled()) {, +			logger.debug("Converting value " + StylerUtils.style(source) +" of " + sourceType + " to " + targetType);, +		}, +++ b/org.springframework.web.servlet/.classpath, +	<classpathentry combineaccessrules="false" kind="src" path="/org.springframework.expression"/>, +++ b/org.springframework.web.servlet/ivy.xml, +		<dependency org="org.springframework" name="org.springframework.expression" rev="latest.integration", +                    conf="compile->compile"/>, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +			return "[TypeDescriptor.NULL]";, +			builder.append("[TypeDescriptor ");, +			builder.append("]");, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +import org.springframework.core.style.StylerUtils;, +		if (logger.isDebugEnabled()) {, +			logger.debug("Converting value " + StylerUtils.style(source) +" of " + sourceType + " to " + targetType);, +		}, +++ b/org.springframework.web.servlet/.classpath, +	<classpathentry combineaccessrules="false" kind="src" path="/org.springframework.expression"/>, +++ b/org.springframework.web.servlet/ivy.xml, +		<dependency org="org.springframework" name="org.springframework.expression" rev="latest.integration", +                    conf="compile->compile"/>, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/EvalTag.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.servlet.tags;, +, +import java.io.IOException;, +, +import javax.servlet.jsp.JspException;, +import javax.servlet.jsp.PageContext;, +, +import org.springframework.beans.BeansException;, +import org.springframework.core.convert.ConversionService;, +import org.springframework.expression.AccessException;, +import org.springframework.expression.EvaluationContext;, +import org.springframework.expression.Expression;, +import org.springframework.expression.ExpressionParser;, +import org.springframework.expression.PropertyAccessor;, +import org.springframework.expression.TypedValue;, +import org.springframework.expression.spel.standard.SpelExpressionParser;, +import org.springframework.expression.spel.support.StandardEvaluationContext;, +import org.springframework.expression.spel.support.StandardTypeConverter;, +import org.springframework.web.util.ExpressionEvaluationUtils;, +import org.springframework.web.util.HtmlUtils;, +import org.springframework.web.util.JavaScriptUtils;, +import org.springframework.web.util.TagUtils;, +, +/**, + * JSP tag for evaluating expressions with the Spring Expression Language (SpEL)., + * Supports the standard JSP evaluation context consisting of implicit variables and scoped attributes., + * , + * @author Keith Donald, + * @since 3.0.1, + */, +public class EvalTag extends HtmlEscapingAwareTag {]