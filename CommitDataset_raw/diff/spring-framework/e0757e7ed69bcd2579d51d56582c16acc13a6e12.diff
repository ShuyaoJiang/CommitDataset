[+++ b/spring-web/src/main/java/org/springframework/web/method/ControllerAdviceBean.java, + * Copyright 2002-2014 the original author or authors., +, +, +import org.springframework.beans.factory.BeanFactoryUtils;, +		Assert.hasText(beanName, "Bean name must not be null");, +		Assert.notNull(beanFactory, "BeanFactory must not be null");, +				"BeanFactory [" + beanFactory + "] does not contain bean with name '" + beanName + "'");, +		Assert.notNull(bean, "Bean must not be null");, +		Class<?> beanType = bean.getClass();, +		Assert.notNull(annotation, "Bean type [" + beanType.getName() + "] is not annotated @ControllerAdvice");, +		Class<?> clazz = (this.bean instanceof String ?, +				this.beanFactory.getType((String) this.bean) : this.bean.getClass());, +		return this.bean.toString();, +	}, +, +, +	/**, +	 * Find the names of beans annotated with, +	 * {@linkplain ControllerAdvice @ControllerAdvice} in the given, +	 * ApplicationContext and wrap them as {@code ControllerAdviceBean} instances., +	 */, +	public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext) {, +		List<ControllerAdviceBean> beans = new ArrayList<ControllerAdviceBean>();, +		for (String name : BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, Object.class)) {, +			if (applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null) {, +				beans.add(new ControllerAdviceBean(name, applicationContext));, +			}, +		}, +		return beans;, +	}, +, +	private static int initOrderFromBean(Object bean) {, +		return (bean instanceof Ordered ? ((Ordered) bean).getOrder() : initOrderFromBeanType(bean.getClass()));, +	}, +, +	private static int initOrderFromBeanType(Class<?> beanType) {, +		Order ann = AnnotationUtils.findAnnotation(beanType, Order.class);, +		return (ann != null ? ann.value() : Ordered.LOWEST_PRECEDENCE);, +	}, +, +	private static List<Package> initBasePackagesFromBeanType(Class<?> beanType, ControllerAdvice annotation) {, +		List<Package> basePackages = new ArrayList<Package>();, +		List<String> basePackageNames = new ArrayList<String>();, +		basePackageNames.addAll(Arrays.asList(annotation.value()));, +		basePackageNames.addAll(Arrays.asList(annotation.basePackages()));, +		for (String pkgName : basePackageNames) {, +			if (StringUtils.hasText(pkgName)) {, +				Package pkg = Package.getPackage(pkgName);, +				if(pkg != null) {, +					basePackages.add(pkg);, +				}, +				else {, +					logger.warn("Package [" + pkgName + "] was not found, see [" + beanType.getName() + "]");, +				}, +			}, +		}, +		for (Class<?> markerClass : annotation.basePackageClasses()) {, +			Package pack = markerClass.getPackage();, +			if (pack != null) {, +				basePackages.add(pack);, +			}, +			else {, +				logger.warn("Package was not found for class [" + markerClass.getName() +, +						"], see [" + beanType.getName() + "]");, +			}, +		}, +		return basePackages;, +++ b/spring-web/src/main/java/org/springframework/web/method/ControllerAdviceBean.java, + * Copyright 2002-2014 the original author or authors., +, +, +import org.springframework.beans.factory.BeanFactoryUtils;, +		Assert.hasText(beanName, "Bean name must not be null");, +		Assert.notNull(beanFactory, "BeanFactory must not be null");, +				"BeanFactory [" + beanFactory + "] does not contain bean with name '" + beanName + "'");, +		Assert.notNull(bean, "Bean must not be null");, +		Class<?> beanType = bean.getClass();, +		Assert.notNull(annotation, "Bean type [" + beanType.getName() + "] is not annotated @ControllerAdvice");, +		Class<?> clazz = (this.bean instanceof String ?, +				this.beanFactory.getType((String) this.bean) : this.bean.getClass());, +		return this.bean.toString();, +	}, +, +, +	/**, +	 * Find the names of beans annotated with, +	 * {@linkplain ControllerAdvice @ControllerAdvice} in the given, +	 * ApplicationContext and wrap them as {@code ControllerAdviceBean} instances., +	 */, +	public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext applicationContext) {, +		List<ControllerAdviceBean> beans = new ArrayList<ControllerAdviceBean>();, +		for (String name : BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, Object.class)) {, +			if (applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != null) {, +				beans.add(new ControllerAdviceBean(name, applicationContext));, +			}, +		}, +		return beans;, +	}, +]