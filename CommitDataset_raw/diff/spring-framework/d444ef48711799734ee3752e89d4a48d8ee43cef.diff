[+++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +					event, this.targetClass, this.method, args, this.applicationContext);, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +					event, this.targetClass, this.method, args, this.applicationContext);, +++ b/spring-context/src/main/java/org/springframework/context/event/EventExpressionEvaluator.java, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.context.expression.BeanFactoryResolver;, +			Method method, Object[] args, BeanFactory beanFactory) {, +		MethodBasedEvaluationContext evaluationContext =, +				new MethodBasedEvaluationContext(root, targetMethod, args, this.paramNameDiscoverer);, +		if (beanFactory != null) {, +			evaluationContext.setBeanResolver(new BeanFactoryResolver(beanFactory));, +		}, +		return evaluationContext;, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +					event, this.targetClass, this.method, args, this.applicationContext);, +++ b/spring-context/src/main/java/org/springframework/context/event/EventExpressionEvaluator.java, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.context.expression.BeanFactoryResolver;, +			Method method, Object[] args, BeanFactory beanFactory) {, +		MethodBasedEvaluationContext evaluationContext =, +				new MethodBasedEvaluationContext(root, targetMethod, args, this.paramNameDiscoverer);, +		if (beanFactory != null) {, +			evaluationContext.setBeanResolver(new BeanFactoryResolver(beanFactory));, +		}, +		return evaluationContext;, +++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java, +, +		this.context.publishEvent(42d);, +		this.eventCollector.assertEvent(listener, event, "OK", timestamp, 42d);, +		this.eventCollector.assertTotalEventsCount(4);, +, +		this.context.publishEvent(24d);, +		this.eventCollector.assertNoEventReceived(listener);, +		this.eventCollector.assertTotalEventsCount(0);, +, +		@Bean, +		public TestConditionEvaluator conditionEvaluator() {, +			return new TestConditionEvaluator();, +		}, +, +		static class TestConditionEvaluator {, +, +			public boolean valid(Double ratio) {, +				return new Double(42).equals(ratio);, +			}, +		}, +, +		@EventListener(condition = "@conditionEvaluator.valid(#p0)"), +		public void handleRatio(Double ratio) {, +			collectEvent(ratio);, +		}]