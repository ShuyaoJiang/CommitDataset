[+++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, + * Copyright 2002-2019 the original author or authors., +, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, + * Copyright 2002-2019 the original author or authors., +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +	 * @param defaults the default settings to apply, +	 * @since 2.5, +	 * @return whether to apply lazy-init semantics ({@code false} by default), +	 * and setting of bean references will happen. Default is AUTOWIRE_NO, +	 * which means there won't be convention-based autowiring by name or type, +	 * (however, there may still be explicit annotation-driven autowiring)., +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, + * Copyright 2002-2019 the original author or authors., +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +	 * @param defaults the default settings to apply, +	 * @since 2.5, +	 * @return whether to apply lazy-init semantics ({@code false} by default), +	 * and setting of bean references will happen. Default is AUTOWIRE_NO, +	 * which means there won't be convention-based autowiring by name or type, +	 * (however, there may still be explicit annotation-driven autowiring)., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionDefaults.java, + * Copyright 2002-2019 the original author or authors., + * @author Juergen Hoeller, +	private int dependencyCheck = AbstractBeanDefinition.DEPENDENCY_CHECK_NONE;, +, +	/**, +	 * Set whether beans should be lazily initialized by default., +	 * <p>If {@code false}, the bean will get instantiated on startup by bean, +	 * factories that perform eager initialization of singletons., +	 */, +	/**, +	 * Return whether beans should be lazily initialized by default, i.e. not, +	 * eagerly instantiated on startup. Only applicable to singleton beans., +	 * @return whether to apply lazy-init semantics ({@code false} by default), +	 */, +	/**, +	 * Set the autowire mode. This determines whether any automagical detection, +	 * and setting of bean references will happen. Default is AUTOWIRE_NO, +	 * which means there won't be convention-based autowiring by name or type, +	 * (however, there may still be explicit annotation-driven autowiring)., +	 * @param autowireMode the autowire mode to set., +	 * Must be one of the constants defined in {@link AbstractBeanDefinition}., +	 */, +	/**, +	 * Return the default autowire mode., +	 */, +	/**, +	 * Set the dependency check code., +	 * @param dependencyCheck the code to set., +	 * Must be one of the constants defined in {@link AbstractBeanDefinition}., +	 */, +	public void setDependencyCheck(int dependencyCheck) {, +		this.dependencyCheck = dependencyCheck;, +	}, +, +	/**, +	 * Return the default dependency check code., +	 */, +	public int getDependencyCheck() {, +		return this.dependencyCheck;, +	}, +, +	/**, +	 * Set the name of the default initializer method., +	 */, +	/**, +	 * Return the name of the default initializer method., +	 */, +	/**, +	 * Set the name of the default destroy method., +	 */, +	/**, +	 * Return the name of the default destroy method., +	 */, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, + * Copyright 2002-2019 the original author or authors., +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +	 * @param defaults the default settings to apply, +	 * @since 2.5, +	 * @return whether to apply lazy-init semantics ({@code false} by default), +	 * and setting of bean references will happen. Default is AUTOWIRE_NO, +	 * which means there won't be convention-based autowiring by name or type, +	 * (however, there may still be explicit annotation-driven autowiring)., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionDefaults.java, + * Copyright 2002-2019 the original author or authors., + * @author Juergen Hoeller, +	private int dependencyCheck = AbstractBeanDefinition.DEPENDENCY_CHECK_NONE;, +, +	/**, +	 * Set whether beans should be lazily initialized by default., +	 * <p>If {@code false}, the bean will get instantiated on startup by bean, +	 * factories that perform eager initialization of singletons., +	 */, +	/**, +	 * Return whether beans should be lazily initialized by default, i.e. not, +	 * eagerly instantiated on startup. Only applicable to singleton beans.]