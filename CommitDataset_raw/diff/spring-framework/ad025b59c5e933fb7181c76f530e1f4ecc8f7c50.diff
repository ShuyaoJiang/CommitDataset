[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/RequestContext.java, +import org.springframework.util.StringUtils;, +	 * Delegates to the UrlPathHelper to determine the context and servlet path., +		String path = this.urlPathHelper.getOriginatingContextPath(this.request);, +		if (StringUtils.hasText(this.urlPathHelper.getPathWithinServletMapping(this.request))) {, +			path += this.urlPathHelper.getOriginatingServletPath(this.request);, +		}, +		return path;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/RequestContext.java, +import org.springframework.util.StringUtils;, +	 * Delegates to the UrlPathHelper to determine the context and servlet path., +		String path = this.urlPathHelper.getOriginatingContextPath(this.request);, +		if (StringUtils.hasText(this.urlPathHelper.getPathWithinServletMapping(this.request))) {, +			path += this.urlPathHelper.getOriginatingServletPath(this.request);, +		}, +		return path;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/FormTag.java, +import org.springframework.web.util.UrlPathHelper;, +			String pathToServlet = getRequestContext().getPathToServlet();, +			if (action.startsWith("/") && !action.startsWith(getRequestContext().getContextPath())) {, +				action = pathToServlet + action;, +			}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/RequestContext.java, +import org.springframework.util.StringUtils;, +	 * Delegates to the UrlPathHelper to determine the context and servlet path., +		String path = this.urlPathHelper.getOriginatingContextPath(this.request);, +		if (StringUtils.hasText(this.urlPathHelper.getPathWithinServletMapping(this.request))) {, +			path += this.urlPathHelper.getOriginatingServletPath(this.request);, +		}, +		return path;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/FormTag.java, +import org.springframework.web.util.UrlPathHelper;, +			String pathToServlet = getRequestContext().getPathToServlet();, +			if (action.startsWith("/") && !action.startsWith(getRequestContext().getContextPath())) {, +				action = pathToServlet + action;, +			}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/tags/form/FormTagTests.java, +	public void testPrependServletPath() throws Exception {, +, +		this.request.setContextPath("/myApp");, +		this.request.setServletPath("/main");, +		this.request.setPathInfo("/index.html");, +, +		String commandName = "myCommand";, +		String action = "/form.html";, +		String enctype = "my/enctype";, +		String method = "POST";, +		String onsubmit = "onsubmit";, +		String onreset = "onreset";, +, +		this.tag.setCommandName(commandName);, +		this.tag.setAction(action);, +		this.tag.setMethod(method);, +		this.tag.setEnctype(enctype);, +		this.tag.setOnsubmit(onsubmit);, +		this.tag.setOnreset(onreset);, +, +		int result = this.tag.doStartTag();, +		assertEquals(Tag.EVAL_BODY_INCLUDE, result);, +		assertEquals("Form attribute not exposed", commandName,, +				getPageContext().getAttribute(FormTag.MODEL_ATTRIBUTE_VARIABLE_NAME, PageContext.REQUEST_SCOPE));, +, +		result = this.tag.doEndTag();, +		assertEquals(Tag.EVAL_PAGE, result);, +, +		this.tag.doFinally();, +		assertNull("Form attribute not cleared after tag ends",, +				getPageContext().getAttribute(FormTag.MODEL_ATTRIBUTE_VARIABLE_NAME, PageContext.REQUEST_SCOPE));, +, +		String output = getOutput();, +		assertFormTagOpened(output);, +		assertFormTagClosed(output);, +, +		assertContainsAttribute(output, "action", "/myApp/main/form.html");, +		assertContainsAttribute(output, "method", method);, +		assertContainsAttribute(output, "enctype", enctype);, +		assertContainsAttribute(output, "onsubmit", onsubmit);, +		assertContainsAttribute(output, "onreset", onreset);, +		assertAttributeNotPresent(output, "name");, +	}, +]