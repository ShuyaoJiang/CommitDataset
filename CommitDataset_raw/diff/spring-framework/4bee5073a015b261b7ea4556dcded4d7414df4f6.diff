[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +			if (factoryMethodToUse == null || argsToUse == null) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +			if (factoryMethodToUse == null || argsToUse == null) {, +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/EnableAsyncTests.java, + * Copyright 2002-2019 the original author or authors., +import org.junit.Assert;, +import org.springframework.context.annotation.Import;, +import static org.hamcrest.Matchers.*;, +	 * Fails with classpath errors on trying to classload AnnotationAsyncExecutionAspect., +	public void customExecutorBean() {, +	public void customExecutorBeanConfig() {, +	public void findOnInterfaceWithInterfaceProxy() {, +	public void findOnInterfaceWithCglibProxy() {, +	@Test, +	public void exceptionThrownWithBeanNotOfRequiredTypeRootCause() {, +		try {, +			new AnnotationConfigApplicationContext(JdkProxyConfiguration.class);, +			fail("Should have thrown exception");, +		}, +		catch (Throwable ex) {, +			ex.printStackTrace();, +			while (ex.getCause() != null) {, +				ex = ex.getCause();, +			}, +			Assert.assertThat(ex, instanceOf(BeanNotOfRequiredTypeException.class));, +		}, +	}, +, +, +	@Configuration, +	@EnableAsync, +	@Import(UserConfiguration.class), +	static class JdkProxyConfiguration {, +, +		@Bean, +		public AsyncBeanWithInterface asyncBean() {, +			return new AsyncBeanWithInterface();, +		}, +	}, +, +, +	@Configuration, +	static class UserConfiguration {, +, +		@Bean, +		public AsyncBeanUser user(AsyncBeanWithInterface bean) {, +			return new AsyncBeanUser(bean);, +		}, +	}, +]