[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +					for (String mappedPattern : mappingInfo.paths) {, +						if (!hasTypeLevelMapping() && !mappedPattern.startsWith("/")) {, +							mappedPattern = "/" + mappedPattern;, +						}, +						String matchedPattern = getMatchedPattern(mappedPattern, lookupPath, request);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +					for (String mappedPattern : mappingInfo.paths) {, +						if (!hasTypeLevelMapping() && !mappedPattern.startsWith("/")) {, +							mappedPattern = "/" + mappedPattern;, +						}, +						String matchedPattern = getMatchedPattern(mappedPattern, lookupPath, request);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/DefaultAnnotationHandlerMapping.java, +	 * @param hasTypeLevelMapping whether the method-level mappings are nested, +	 * within a type-level mapping, +	protected String[] determineUrlsForHandlerMethods(Class<?> handlerType, final boolean hasTypeLevelMapping) {, +								if (!hasTypeLevelMapping && !mappedPattern.startsWith("/")) {, +									mappedPattern = "/" + mappedPattern;, +								}, +						else if (hasTypeLevelMapping) {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +					for (String mappedPattern : mappingInfo.paths) {, +						if (!hasTypeLevelMapping() && !mappedPattern.startsWith("/")) {, +							mappedPattern = "/" + mappedPattern;, +						}, +						String matchedPattern = getMatchedPattern(mappedPattern, lookupPath, request);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/DefaultAnnotationHandlerMapping.java, +	 * @param hasTypeLevelMapping whether the method-level mappings are nested, +	 * within a type-level mapping, +	protected String[] determineUrlsForHandlerMethods(Class<?> handlerType, final boolean hasTypeLevelMapping) {, +								if (!hasTypeLevelMapping && !mappedPattern.startsWith("/")) {, +									mappedPattern = "/" + mappedPattern;, +								}, +						else if (hasTypeLevelMapping) {, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +	public void relativeMethodPathDispatchingController() throws Exception {, +		initServlet(MyRelativeMethodPathDispatchingController.class);, +		servlet.init(new MockServletConfig());, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myApp/myHandle");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("myView", response.getContentAsString());, +, +		request = new MockHttpServletRequest("GET", "/yourApp/myOther");, +		response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("myOtherView", response.getContentAsString());, +, +		request = new MockHttpServletRequest("GET", "/hisApp/myLang");, +		response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("myLangView", response.getContentAsString());, +, +		request = new MockHttpServletRequest("GET", "/herApp/surprise.do");, +		response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("mySurpriseView", response.getContentAsString());, +	}, +, +	@Test, +	private static class MyRelativeMethodPathDispatchingController {, +, +		@RequestMapping("**/myHandle"), +		public void myHandle(HttpServletResponse response) throws IOException {, +			response.getWriter().write("myView");, +		}, +, +		@RequestMapping("/**/*Other"), +		public void myOtherHandle(HttpServletResponse response) throws IOException {, +			response.getWriter().write("myOtherView");, +		}, +, +		@RequestMapping("**/myLang"), +		public void myLangHandle(HttpServletResponse response) throws IOException {, +			response.getWriter().write("myLangView");, +		}, +, +		@RequestMapping("/**/surprise"), +		public void mySurpriseHandle(HttpServletResponse response) throws IOException {, +			response.getWriter().write("mySurpriseView");, +		}, +	}, +, +	@Controller]