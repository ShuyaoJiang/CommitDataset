[+++ b/src/asciidoc/core-aop.adoc, +Due to the proxy-based nature of Spring's AOP framework, calls within the target object, +are by definition __not__ intercepted. For JDK proxies, only public interface method, +calls on the proxy can be intercepted. With CGLIB, public and protected method calls on, +the proxy will be intercepted, and even package-visible methods if necessary. However,, +common interactions through proxies should always be designed through public signatures., +Note that pointcut definitions are generally matched against any intercepted method., +If a pointcut is strictly meant to be public-only, even in a CGLIB proxy scenario with, +potential non-public interactions through proxies, it needs to be defined accordingly., +, +If your interception needs include method calls or even constructors within the target, +class, consider the use of Spring-driven <<aop-aj-ltw,native AspectJ weaving>> instead, +of Spring's proxy-based AOP framework. This constitutes a different mode of AOP usage, +with different characteristics, so be sure to make yourself familiar with weaving first, +++ b/src/asciidoc/core-aop.adoc, +Due to the proxy-based nature of Spring's AOP framework, calls within the target object, +are by definition __not__ intercepted. For JDK proxies, only public interface method, +calls on the proxy can be intercepted. With CGLIB, public and protected method calls on, +the proxy will be intercepted, and even package-visible methods if necessary. However,, +common interactions through proxies should always be designed through public signatures., +Note that pointcut definitions are generally matched against any intercepted method., +If a pointcut is strictly meant to be public-only, even in a CGLIB proxy scenario with, +potential non-public interactions through proxies, it needs to be defined accordingly., +, +If your interception needs include method calls or even constructors within the target, +class, consider the use of Spring-driven <<aop-aj-ltw,native AspectJ weaving>> instead, +of Spring's proxy-based AOP framework. This constitutes a different mode of AOP usage, +with different characteristics, so be sure to make yourself familiar with weaving first, +++ b/src/asciidoc/core-beans.adoc, +event publication becomes necessary, refer to the javadoc for Spring's, +As you can see above, the method signature once again declares the event type it listens to,, +but this time with a flexible name and without implementing a specific listener interface., +The event type can also be narrowed through generics as long as the actual event type, +resolves your generic parameter in its implementation hierarchy., +		..., +Check out the javadoc of the, +javadoc) and the corresponding Spring XML bean definition file(s) (typically, +++ b/src/asciidoc/core-aop.adoc, +Due to the proxy-based nature of Spring's AOP framework, calls within the target object, +are by definition __not__ intercepted. For JDK proxies, only public interface method, +calls on the proxy can be intercepted. With CGLIB, public and protected method calls on, +the proxy will be intercepted, and even package-visible methods if necessary. However,, +common interactions through proxies should always be designed through public signatures., +Note that pointcut definitions are generally matched against any intercepted method., +If a pointcut is strictly meant to be public-only, even in a CGLIB proxy scenario with, +potential non-public interactions through proxies, it needs to be defined accordingly., +, +If your interception needs include method calls or even constructors within the target, +class, consider the use of Spring-driven <<aop-aj-ltw,native AspectJ weaving>> instead, +of Spring's proxy-based AOP framework. This constitutes a different mode of AOP usage, +with different characteristics, so be sure to make yourself familiar with weaving first, +++ b/src/asciidoc/core-beans.adoc, +event publication becomes necessary, refer to the javadoc for Spring's, +As you can see above, the method signature once again declares the event type it listens to,, +but this time with a flexible name and without implementing a specific listener interface., +The event type can also be narrowed through generics as long as the actual event type, +resolves your generic parameter in its implementation hierarchy., +		..., +Check out the javadoc of the, +javadoc) and the corresponding Spring XML bean definition file(s) (typically, +++ b/src/asciidoc/core-expressions.adoc, +evaluates expressions. Please refer to the javadoc of these classes for more details.]