[+++ b/spring-core/src/main/java/org/springframework/util/MimeType.java, + * Copyright 2002-2019 the original author or authors., +import java.util.Collection;, +	/**, +	 * Similar to {@link #equals(Object)} but based on the type and subtype, +	 * only, i.e. ignoring parameters., +	 * @param other the other mime type to compare to, +	 * @return whether the two mime types have the same type and subtype, +	 * @since 5.1.4, +	 */, +	public boolean equalsTypeAndSubtype(@Nullable MimeType other) {, +		if (other == null) {, +			return false;, +		}, +		return this.type.equalsIgnoreCase(other.type) && this.subtype.equalsIgnoreCase(other.subtype);, +	}, +, +	/**, +	 * Unlike {@link Collection#contains(Object)} which relies on, +	 * {@link MimeType#equals(Object)}, this method only checks the type and the, +	 * subtype, but otherwise ignores parameters., +	 * @param mimeTypes the list of mime types to perform the check against, +	 * @return whether the list contains the given mime type, +	 * @since 5.1.4, +	 */, +	public boolean isPresentIn(Collection<? extends MimeType> mimeTypes) {, +		for (MimeType mimeType : mimeTypes) {, +			if (mimeType.equalsTypeAndSubtype(this)) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +++ b/spring-core/src/main/java/org/springframework/util/MimeType.java, + * Copyright 2002-2019 the original author or authors., +import java.util.Collection;, +	/**, +	 * Similar to {@link #equals(Object)} but based on the type and subtype, +	 * only, i.e. ignoring parameters., +	 * @param other the other mime type to compare to, +	 * @return whether the two mime types have the same type and subtype, +	 * @since 5.1.4, +	 */, +	public boolean equalsTypeAndSubtype(@Nullable MimeType other) {, +		if (other == null) {, +			return false;, +		}, +		return this.type.equalsIgnoreCase(other.type) && this.subtype.equalsIgnoreCase(other.subtype);, +	}, +, +	/**, +	 * Unlike {@link Collection#contains(Object)} which relies on, +	 * {@link MimeType#equals(Object)}, this method only checks the type and the, +	 * subtype, but otherwise ignores parameters., +	 * @param mimeTypes the list of mime types to perform the check against, +	 * @return whether the list contains the given mime type, +	 * @since 5.1.4, +	 */, +	public boolean isPresentIn(Collection<? extends MimeType> mimeTypes) {, +		for (MimeType mimeType : mimeTypes) {, +			if (mimeType.equalsTypeAndSubtype(this)) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, + * Copyright 2002-2019 the original author or authors., +		if (mediaType == null || MediaType.ALL.equalsTypeAndSubtype(mediaType)) {, +++ b/spring-core/src/main/java/org/springframework/util/MimeType.java, + * Copyright 2002-2019 the original author or authors., +import java.util.Collection;, +	/**, +	 * Similar to {@link #equals(Object)} but based on the type and subtype, +	 * only, i.e. ignoring parameters., +	 * @param other the other mime type to compare to, +	 * @return whether the two mime types have the same type and subtype, +	 * @since 5.1.4, +	 */, +	public boolean equalsTypeAndSubtype(@Nullable MimeType other) {, +		if (other == null) {, +			return false;, +		}, +		return this.type.equalsIgnoreCase(other.type) && this.subtype.equalsIgnoreCase(other.subtype);, +	}, +, +	/**, +	 * Unlike {@link Collection#contains(Object)} which relies on, +	 * {@link MimeType#equals(Object)}, this method only checks the type and the, +	 * subtype, but otherwise ignores parameters., +	 * @param mimeTypes the list of mime types to perform the check against, +	 * @return whether the list contains the given mime type, +	 * @since 5.1.4, +	 */, +	public boolean isPresentIn(Collection<? extends MimeType> mimeTypes) {, +		for (MimeType mimeType : mimeTypes) {, +			if (mimeType.equalsTypeAndSubtype(this)) {, +				return true;]