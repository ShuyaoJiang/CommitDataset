[+++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, + * {@code HttpMessageWriter} that wraps and delegates to an {@link Encoder}., +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, + * {@code HttpMessageWriter} that wraps and delegates to an {@link Encoder}., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeStrategies.java, +	 * A mutable builder for an {@link ExchangeStrategies}., +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, + * {@code HttpMessageWriter} that wraps and delegates to an {@link Encoder}., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeStrategies.java, +	 * A mutable builder for an {@link ExchangeStrategies}., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/ProducesRequestCondition.java, +			Collections.singletonList(new ProduceMediaTypeExpression(MediaType.ALL_VALUE));, +	 * with a {@value MediaType#ALL_VALUE} expression., +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, + * {@code HttpMessageWriter} that wraps and delegates to an {@link Encoder}., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeStrategies.java, +	 * A mutable builder for an {@link ExchangeStrategies}., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/ProducesRequestCondition.java, +			Collections.singletonList(new ProduceMediaTypeExpression(MediaType.ALL_VALUE));, +	 * with a {@value MediaType#ALL_VALUE} expression., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java, +	 * flow control for receiving messages, this method should be a no-op, +	 * flow control for receiving messages, this method should be a no-op, +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, + * {@code HttpMessageWriter} that wraps and delegates to an {@link Encoder}., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeStrategies.java, +	 * A mutable builder for an {@link ExchangeStrategies}., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/ProducesRequestCondition.java, +			Collections.singletonList(new ProduceMediaTypeExpression(MediaType.ALL_VALUE));, +	 * with a {@value MediaType#ALL_VALUE} expression., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java, +	 * flow control for receiving messages, this method should be a no-op, +	 * flow control for receiving messages, this method should be a no-op, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java, + * Integration tests using an {@link ExchangeFunction} through {@link WebClient}., +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, + * {@code HttpMessageWriter} that wraps and delegates to an {@link Encoder}., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeStrategies.java, +	 * A mutable builder for an {@link ExchangeStrategies}., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/ProducesRequestCondition.java, +			Collections.singletonList(new ProduceMediaTypeExpression(MediaType.ALL_VALUE));, +	 * with a {@value MediaType#ALL_VALUE} expression., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java, +	 * flow control for receiving messages, this method should be a no-op, +	 * flow control for receiving messages, this method should be a no-op, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java, + * Integration tests using an {@link ExchangeFunction} through {@link WebClient}., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ProducesRequestCondition.java, +			Collections.singletonList(new ProduceMediaTypeExpression(MediaType.ALL_VALUE));, +	 * with a {@value MediaType#ALL_VALUE} expression.]