[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +			boolean hasSuffix = pattern.indexOf('.') != -1;, +			if (!hasSuffix && pathMatcher.match(pattern + ".*", lookupPath)) {, +				return true;, +			}, +			boolean endsWithSlash = pattern.endsWith("/");, +			if (!endsWithSlash && pathMatcher.match(pattern + "/", lookupPath)) {, +				return true;, +			}, +			return false;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +			boolean hasSuffix = pattern.indexOf('.') != -1;, +			if (!hasSuffix && pathMatcher.match(pattern + ".*", lookupPath)) {, +				return true;, +			}, +			boolean endsWithSlash = pattern.endsWith("/");, +			if (!endsWithSlash && pathMatcher.match(pattern + "/", lookupPath)) {, +				return true;, +			}, +			return false;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/DefaultAnnotationHandlerMapping.java, +	 * i.e. whether "/users" should be registered as "/users.*" and "/users/" too., +	 * <p>Note that paths which include a ".xxx" suffix or end with "/" already will not be, +		if (this.useDefaultSuffixPattern && path.indexOf('.') == -1 && !path.endsWith("/")) {, +			urls.add(path + "/");, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +			boolean hasSuffix = pattern.indexOf('.') != -1;, +			if (!hasSuffix && pathMatcher.match(pattern + ".*", lookupPath)) {, +				return true;, +			}, +			boolean endsWithSlash = pattern.endsWith("/");, +			if (!endsWithSlash && pathMatcher.match(pattern + "/", lookupPath)) {, +				return true;, +			}, +			return false;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/DefaultAnnotationHandlerMapping.java, +	 * i.e. whether "/users" should be registered as "/users.*" and "/users/" too., +	 * <p>Note that paths which include a ".xxx" suffix or end with "/" already will not be, +		if (this.useDefaultSuffixPattern && path.indexOf('.') == -1 && !path.endsWith("/")) {, +			urls.add(path + "/");, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/UriTemplateServletAnnotationControllerTests.java, +		request = new MockHttpServletRequest("GET", "/hotels/");, +		response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("list", response.getContentAsString());, +, +		request = new MockHttpServletRequest("GET", "/hotels/42/");, +		response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("show-42", response.getContentAsString());, +]