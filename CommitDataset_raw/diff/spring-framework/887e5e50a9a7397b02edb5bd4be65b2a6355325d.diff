[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelAttributeMethodArgumentResolver.java, +import java.util.Optional;, +		return Optional.ofNullable(parameter.getParameterAnnotation(ModelAttribute.class)), +				.filter(ann -> StringUtils.hasText(ann.value())), +				.map(ModelAttribute::value), +				.orElse(Conventions.getVariableNameForParameter(parameter));, +		return exchange.getRequestParams().map(requestParams -> {, +			return BeanUtils.instantiateClass(ctor, args);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelAttributeMethodArgumentResolver.java, +import java.util.Optional;, +		return Optional.ofNullable(parameter.getParameterAnnotation(ModelAttribute.class)), +				.filter(ann -> StringUtils.hasText(ann.value())), +				.map(ModelAttribute::value), +				.orElse(Conventions.getVariableNameForParameter(parameter));, +		return exchange.getRequestParams().map(requestParams -> {, +			return BeanUtils.instantiateClass(ctor, args);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelInitializer.java, +import java.util.Optional;, +	private String getAttributeName(MethodParameter param) {, +		return Optional, +				.ofNullable(AnnotatedElementUtils.findMergedAnnotation(param.getMethod(), ModelAttribute.class)), +				.filter(ann -> StringUtils.hasText(ann.value())), +				.map(ModelAttribute::value), +				.orElse(Conventions.getVariableNameForParameter(param));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelAttributeMethodArgumentResolver.java, +import java.util.Optional;, +		return Optional.ofNullable(parameter.getParameterAnnotation(ModelAttribute.class)), +				.filter(ann -> StringUtils.hasText(ann.value())), +				.map(ModelAttribute::value), +				.orElse(Conventions.getVariableNameForParameter(parameter));, +		return exchange.getRequestParams().map(requestParams -> {, +			return BeanUtils.instantiateClass(ctor, args);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelInitializer.java, +import java.util.Optional;, +	private String getAttributeName(MethodParameter param) {, +		return Optional, +				.ofNullable(AnnotatedElementUtils.findMergedAnnotation(param.getMethod(), ModelAttribute.class)), +				.filter(ann -> StringUtils.hasText(ann.value())), +				.map(ModelAttribute::value), +				.orElse(Conventions.getVariableNameForParameter(param));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +import java.util.Optional;, +		return Optional.ofNullable(returnType.getMethodAnnotation(ModelAttribute.class)), +				.filter(ann -> StringUtils.hasText(ann.value())), +				.map(ModelAttribute::value), +				.orElse(Conventions.getVariableNameForParameter(returnType));]