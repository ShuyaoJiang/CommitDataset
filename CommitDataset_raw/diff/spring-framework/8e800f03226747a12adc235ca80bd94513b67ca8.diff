[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToCollectionGenericConverter.java, +		Class targetElementType = targetType.getElementType();, +		if (targetElementType == null) {, +		Class sourceElementType = getElementType(sourceCollection);, +		if (sourceElementType == null || targetElementType.isAssignableFrom(sourceElementType)) {, +		TypeDescriptor targetElementTypeDescriptor = TypeDescriptor.valueOf(targetElementType);, +		GenericConverter elementConverter = conversionService.getConverter(sourceElementType,, +				targetElementTypeDescriptor);, +			targetCollection.add(elementConverter.convert(element, targetElementTypeDescriptor));, +	private Class getElementType(Collection collection) {, +		for (Object element : collection) {, +			if (element != null) {, +				return element.getClass();, +			}, +		}, +		return null;, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToCollectionGenericConverter.java, +		Class targetElementType = targetType.getElementType();, +		if (targetElementType == null) {, +		Class sourceElementType = getElementType(sourceCollection);, +		if (sourceElementType == null || targetElementType.isAssignableFrom(sourceElementType)) {, +		TypeDescriptor targetElementTypeDescriptor = TypeDescriptor.valueOf(targetElementType);, +		GenericConverter elementConverter = conversionService.getConverter(sourceElementType,, +				targetElementTypeDescriptor);, +			targetCollection.add(elementConverter.convert(element, targetElementTypeDescriptor));, +	private Class getElementType(Collection collection) {, +		for (Object element : collection) {, +			if (element != null) {, +				return element.getClass();, +			}, +		}, +		return null;, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +		addGenericConverter(Map.class, Map.class, new MapToMapGenericConverter(this));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToCollectionGenericConverter.java, +		Class targetElementType = targetType.getElementType();, +		if (targetElementType == null) {, +		Class sourceElementType = getElementType(sourceCollection);, +		if (sourceElementType == null || targetElementType.isAssignableFrom(sourceElementType)) {, +		TypeDescriptor targetElementTypeDescriptor = TypeDescriptor.valueOf(targetElementType);, +		GenericConverter elementConverter = conversionService.getConverter(sourceElementType,, +				targetElementTypeDescriptor);, +			targetCollection.add(elementConverter.convert(element, targetElementTypeDescriptor));, +	private Class getElementType(Collection collection) {, +		for (Object element : collection) {, +			if (element != null) {, +				return element.getClass();, +			}, +		}, +		return null;, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +		addGenericConverter(Map.class, Map.class, new MapToMapGenericConverter(this));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/MapToMapGenericConverter.java, +package org.springframework.core.convert.support;, +, +import java.util.Map;, +, +import org.springframework.core.CollectionFactory;, +import org.springframework.core.convert.TypeDescriptor;, +, +class MapToMapGenericConverter implements GenericConverter {, +, +	private GenericConversionService conversionService;, +, +	public MapToMapGenericConverter(GenericConversionService conversionService) {, +		this.conversionService = conversionService;, +	}, +, +	public Object convert(Object source, TypeDescriptor targetType) {, +		Map sourceMap = (Map) source;, +		Class targetKeyType = targetType.getMapKeyType();, +		Class targetValueType = targetType.getMapValueType();, +		if (targetKeyType == null && targetValueType == null) {, +			return compatibleMapWithoutEntryConversion(sourceMap, targetType);, +		}, +		Class[] sourceEntryTypes = getMapEntryTypes(sourceMap);, +		Class sourceKeyType = sourceEntryTypes[0];, +		Class sourceValueType = sourceEntryTypes[1];, +		if (sourceKeyType == null && sourceValueType == null) {, +			return compatibleMapWithoutEntryConversion(sourceMap, targetType);, +		}, +		boolean keysCompatible = false;, +		if (targetKeyType != null && sourceKeyType != null && targetKeyType.isAssignableFrom(sourceKeyType)) {, +			keysCompatible = true;, +		}, +		boolean valuesCompatible = false;, +		if (targetValueType != null && sourceValueType != null && targetValueType.isAssignableFrom(sourceValueType)) {, +			valuesCompatible = true;, +		}, +		if (keysCompatible && valuesCompatible) {, +			return compatibleMapWithoutEntryConversion(sourceMap, targetType);, +		}, +		Map targetMap = CollectionFactory.createMap(targetType.getType(), sourceMap.size());, +		MapEntryConverter converter = new MapEntryConverter(sourceKeyType, sourceValueType, targetKeyType, targetValueType, keysCompatible, valuesCompatible, conversionService);]