[+++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractJmsListeningContainer.java, + * Copyright 2002-2018 the original author or authors., +	private volatile boolean running = false;, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractJmsListeningContainer.java, + * Copyright 2002-2018 the original author or authors., +	private volatile boolean running = false;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java, + * Copyright 2002-2018 the original author or authors., +	private final Object lifecycleMonitor = new Object();, +, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractJmsListeningContainer.java, + * Copyright 2002-2018 the original author or authors., +	private volatile boolean running = false;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java, + * Copyright 2002-2018 the original author or authors., +	private final Object lifecycleMonitor = new Object();, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractJmsListeningContainer.java, + * Copyright 2002-2018 the original author or authors., +	private volatile boolean running = false;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java, + * Copyright 2002-2018 the original author or authors., +	private final Object lifecycleMonitor = new Object();, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserDestinationMessageHandler.java, + * Copyright 2002-2018 the original author or authors., +	private final Object lifecycleMonitor = new Object();, +, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractJmsListeningContainer.java, + * Copyright 2002-2018 the original author or authors., +	private volatile boolean running = false;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java, + * Copyright 2002-2018 the original author or authors., +	private final Object lifecycleMonitor = new Object();, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserDestinationMessageHandler.java, + * Copyright 2002-2018 the original author or authors., +	private final Object lifecycleMonitor = new Object();, +, +++ b/spring-tx/src/main/java/org/springframework/jca/endpoint/GenericMessageEndpointManager.java, + * Copyright 2002-2018 the original author or authors., +	private volatile boolean running = false;, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractJmsListeningContainer.java, + * Copyright 2002-2018 the original author or authors., +	private volatile boolean running = false;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java, + * Copyright 2002-2018 the original author or authors., +	private final Object lifecycleMonitor = new Object();, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserDestinationMessageHandler.java, + * Copyright 2002-2018 the original author or authors., +	private final Object lifecycleMonitor = new Object();, +, +++ b/spring-tx/src/main/java/org/springframework/jca/endpoint/GenericMessageEndpointManager.java, + * Copyright 2002-2018 the original author or authors., +	private volatile boolean running = false;, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/bootstrap/AbstractHttpServer.java, + * Copyright 2002-2018 the original author or authors., +	private volatile boolean running;, +		return (getHttpHandlerMap() != null ?, +				new ContextPathCompositeHandler(getHttpHandlerMap()) : getHttpHandler());, +				if (logger.isDebugEnabled()) {, +				}, +					if (logger.isDebugEnabled()) {, +				}, +	@Override, +	public boolean isRunning() {, +		return this.running;, +	}, +, +, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractJmsListeningContainer.java, + * Copyright 2002-2018 the original author or authors., +	private volatile boolean running = false;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java, + * Copyright 2002-2018 the original author or authors., +	private final Object lifecycleMonitor = new Object();, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserDestinationMessageHandler.java, + * Copyright 2002-2018 the original author or authors., +	private final Object lifecycleMonitor = new Object();, +, +++ b/spring-tx/src/main/java/org/springframework/jca/endpoint/GenericMessageEndpointManager.java, + * Copyright 2002-2018 the original author or authors., +	private volatile boolean running = false;, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/bootstrap/AbstractHttpServer.java, + * Copyright 2002-2018 the original author or authors., +	private volatile boolean running;, +		return (getHttpHandlerMap() != null ?, +				new ContextPathCompositeHandler(getHttpHandlerMap()) : getHttpHandler());]