[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelCompiler.java, +	private final static int CLASSES_DEFINED_LIMIT = 100;, +, +	private ChildClassLoader ccl;, +		return loadClass(clazzName.replaceAll("/", "."), data);, +	/**, +	 * Load a compiled expression class. Makes sure the classloaders aren't used too much, +	 * because they anchor compiled classes in memory and prevent GC.  If you have expressions, +	 * continually recompiling over time then by replacing the classloader periodically, +	 * at least some of the older variants can be garbage collected., +	 * , +	 * @param name name of the class, +	 * @param bytes bytecode for the class, +	 * @return the Class object for the compiled expression, +	 */, +	@SuppressWarnings("unchecked"), +	private Class<? extends CompiledExpression> loadClass(String name, byte[] bytes) {, +		if (this.ccl.getClassesDefinedCount() > CLASSES_DEFINED_LIMIT) {, +			this.ccl = new ChildClassLoader(this.ccl.getParent());, +		}, +		return (Class<? extends CompiledExpression>) this.ccl.defineClass(name, bytes);, +	}, +		private int classesDefinedCount = 0;, +, +		int getClassesDefinedCount() {, +			return classesDefinedCount;, +		}, +, +			Class<?> clazz = super.defineClass(name, bytes, 0, bytes.length);, +			classesDefinedCount++;, +			return clazz;, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelCompiler.java, +	private final static int CLASSES_DEFINED_LIMIT = 100;, +, +	private ChildClassLoader ccl;, +		return loadClass(clazzName.replaceAll("/", "."), data);, +	/**, +	 * Load a compiled expression class. Makes sure the classloaders aren't used too much, +	 * because they anchor compiled classes in memory and prevent GC.  If you have expressions, +	 * continually recompiling over time then by replacing the classloader periodically, +	 * at least some of the older variants can be garbage collected., +	 * , +	 * @param name name of the class, +	 * @param bytes bytecode for the class, +	 * @return the Class object for the compiled expression, +	 */, +	@SuppressWarnings("unchecked"), +	private Class<? extends CompiledExpression> loadClass(String name, byte[] bytes) {, +		if (this.ccl.getClassesDefinedCount() > CLASSES_DEFINED_LIMIT) {, +			this.ccl = new ChildClassLoader(this.ccl.getParent());, +		}, +		return (Class<? extends CompiledExpression>) this.ccl.defineClass(name, bytes);, +	}, +		private int classesDefinedCount = 0;, +, +		int getClassesDefinedCount() {, +			return classesDefinedCount;, +		}, +, +			Class<?> clazz = super.defineClass(name, bytes, 0, bytes.length);, +			classesDefinedCount++;, +			return clazz;, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelCompilationCoverageTests.java, +import java.util.HashSet;, +import java.util.Set;, +	@Test, +	public void repeatedCompilation() throws Exception {, +		// Verifying that after a number of compilations, the classloaders, +		// used to load the compiled expressions are discarded/replaced., +		// See SpelCompiler.loadClass(), +		Field f = SpelExpression.class.getDeclaredField("compiledAst");, +		Set<Object> classloadersUsed = new HashSet<>();, +		for (int i=0;i<1500;i++) { // 1500 is greater than SpelCompiler.CLASSES_DEFINED_LIMIT, +			expression = parser.parseExpression("4 + 5");, +			assertEquals(9, (int)expression.getValue(Integer.class));, +			assertCanCompile(expression);, +			f.setAccessible(true);, +			CompiledExpression cEx = (CompiledExpression)f.get(expression);, +			classloadersUsed.add(cEx.getClass().getClassLoader());, +			assertEquals(9, (int)expression.getValue(Integer.class));, +		}, +		assertTrue(classloadersUsed.size() > 1);, +	}, +]