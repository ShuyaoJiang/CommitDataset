[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java, +			// In case the map key is unqualified, we want it evaluated against the root object so , +			// temporarily push that on whilst evaluating the key, +			try {, +				state.pushActiveContextObject(state.getRootContextObject());, +			} finally {, +				state.popActiveContextObject();, +			}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java, +			// In case the map key is unqualified, we want it evaluated against the root object so , +			// temporarily push that on whilst evaluating the key, +			try {, +				state.pushActiveContextObject(state.getRootContextObject());, +			} finally {, +				state.popActiveContextObject();, +			}, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/SpringEL300Tests.java, +		// MapAccessor required for this to work, +		, +		// --- dotted property names, +, +		// lookup foo on the root, then bar on that, then use that as the key into jdbcProperties, +		expr = new SpelExpressionParser().parse("jdbcProperties[foo.bar]"); , +		eContext.addPropertyAccessor(new MapAccessor());, +		name = expr.getValue(eContext,String.class);, +		Assert.assertEquals("Dave2",name);, +, +		// key is foo.bar, +		expr = new SpelExpressionParser().parse("jdbcProperties['foo.bar']");, +		eContext.addPropertyAccessor(new MapAccessor());, +		name = expr.getValue(eContext,String.class);, +		Assert.assertEquals("Elephant",name);	, +		public Properties foo = new Properties();, +			jdbcProperties.put("alias","Dave2");, +			jdbcProperties.put("foo.bar","Elephant");, +			foo.put("bar","alias");]