[+++ b/org.springframework.beans/ivy.xml, +		<dependency org="org.springframework" name="org.springframework.core" rev="latest.integration" conf="compile->compile" />, +		<!-- optional dependencies -->, +		<dependency org="javax.el" name="com.springsource.javax.el" rev="2.1.0" conf="optional->compile" />, +		<dependency org="net.sourceforge.cglib" name="com.springsource.net.sf.cglib" rev="2.1.3" conf="optional->compile" />, +++ b/org.springframework.beans/ivy.xml, +		<dependency org="org.springframework" name="org.springframework.core" rev="latest.integration" conf="compile->compile" />, +		<!-- optional dependencies -->, +		<dependency org="javax.el" name="com.springsource.javax.el" rev="2.1.0" conf="optional->compile" />, +		<dependency org="net.sourceforge.cglib" name="com.springsource.net.sf.cglib" rev="2.1.3" conf="optional->compile" />, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/AbstractPropertyAccessor.java, +/*, + * Copyright 2002-2007 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.beans;, +, +import java.util.Arrays;, +import java.util.Iterator;, +import java.util.LinkedList;, +import java.util.List;, +import java.util.Map;, +, +/**, + * Abstract implementation of the {@link PropertyAccessor} interface., + * Provides base implementations of all convenience methods, with the, + * implementation of actual property access left to subclasses., + *, + * @author Juergen Hoeller, + * @since 2.0, + * @see #getPropertyValue, + * @see #setPropertyValue, + */, +public abstract class AbstractPropertyAccessor extends PropertyEditorRegistrySupport, +		implements ConfigurablePropertyAccessor {, +, +	private boolean extractOldValueForEditor = false;, +, +, +	public void setExtractOldValueForEditor(boolean extractOldValueForEditor) {, +		this.extractOldValueForEditor = extractOldValueForEditor;, +	}, +, +	public boolean isExtractOldValueForEditor() {, +		return this.extractOldValueForEditor;, +	}, +, +, +	public void setPropertyValue(PropertyValue pv) throws BeansException {, +		setPropertyValue(pv.getName(), pv.getValue());, +	}, +, +	public void setPropertyValues(Map map) throws BeansException {, +		setPropertyValues(new MutablePropertyValues(map));, +	}, +, +	public void setPropertyValues(PropertyValues pvs) throws BeansException {, +		setPropertyValues(pvs, false, false);, +	}, +, +	public void setPropertyValues(PropertyValues pvs, boolean ignoreUnknown) throws BeansException {, +		setPropertyValues(pvs, ignoreUnknown, false);, +	}, +, +	public void setPropertyValues(PropertyValues pvs, boolean ignoreUnknown, boolean ignoreInvalid), +			throws BeansException {, +, +		List propertyAccessExceptions = null;, +		List propertyValues = (pvs instanceof MutablePropertyValues ?, +				((MutablePropertyValues) pvs).getPropertyValueList() : Arrays.asList(pvs.getPropertyValues()));, +		for (Iterator it = propertyValues.iterator(); it.hasNext();) {, +			PropertyValue pv = (PropertyValue) it.next();, +			try {, +				// This method may throw any BeansException, which won't be caught, +				// here, if there is a critical failure such as no matching field., +				// We can attempt to deal only with less serious exceptions., +				setPropertyValue(pv);, +			}, +			catch (NotWritablePropertyException ex) {, +				if (!ignoreUnknown) {, +					throw ex;, +				}, +				// Otherwise, just ignore it and continue..., +			}, +			catch (NullValueInNestedPathException ex) {, +				if (!ignoreInvalid) {, +					throw ex;, +				}]