[+++ /dev/null, +++ /dev/null, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import org.springframework.core.convert.support.PropertyTypeDescriptor;, +					return new PropertyTypeDescriptor(pd, new MethodParameter(pd.getReadMethod(), -1), type);, +					return new PropertyTypeDescriptor(pd, BeanUtils.getWriteMethodParameter(pd), type);, +++ /dev/null, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import org.springframework.core.convert.support.PropertyTypeDescriptor;, +					return new PropertyTypeDescriptor(pd, new MethodParameter(pd.getReadMethod(), -1), type);, +					return new PropertyTypeDescriptor(pd, BeanUtils.getWriteMethodParameter(pd), type);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +import org.springframework.core.convert.support.PropertyTypeDescriptor;, +				new PropertyTypeDescriptor(descriptor, BeanUtils.getWriteMethodParameter(descriptor)));, +		if (typeDescriptor instanceof PropertyTypeDescriptor) {, +			PropertyDescriptor pd = ((PropertyTypeDescriptor) typeDescriptor).getPropertyDescriptor();, +++ /dev/null, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import org.springframework.core.convert.support.PropertyTypeDescriptor;, +					return new PropertyTypeDescriptor(pd, new MethodParameter(pd.getReadMethod(), -1), type);, +					return new PropertyTypeDescriptor(pd, BeanUtils.getWriteMethodParameter(pd), type);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +import org.springframework.core.convert.support.PropertyTypeDescriptor;, +				new PropertyTypeDescriptor(descriptor, BeanUtils.getWriteMethodParameter(descriptor)));, +		if (typeDescriptor instanceof PropertyTypeDescriptor) {, +			PropertyDescriptor pd = ((PropertyTypeDescriptor) typeDescriptor).getPropertyDescriptor();, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +			if (this.methodParameter.getParameterIndex() < 0) {, +				// The best we can do for return type metadata is to expose, +				// method-level annotations when the target is the return type..., +				return this.methodParameter.getMethodAnnotations();, +			}, +			else {, +		}, +++ /dev/null, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import org.springframework.core.convert.support.PropertyTypeDescriptor;, +					return new PropertyTypeDescriptor(pd, new MethodParameter(pd.getReadMethod(), -1), type);, +					return new PropertyTypeDescriptor(pd, BeanUtils.getWriteMethodParameter(pd), type);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +import org.springframework.core.convert.support.PropertyTypeDescriptor;, +				new PropertyTypeDescriptor(descriptor, BeanUtils.getWriteMethodParameter(descriptor)));, +		if (typeDescriptor instanceof PropertyTypeDescriptor) {, +			PropertyDescriptor pd = ((PropertyTypeDescriptor) typeDescriptor).getPropertyDescriptor();, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +			if (this.methodParameter.getParameterIndex() < 0) {, +				// The best we can do for return type metadata is to expose, +				// method-level annotations when the target is the return type..., +				return this.methodParameter.getMethodAnnotations();, +			}, +			else {, +		}, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/PropertyTypeDescriptor.java, +/*, + * Copyright 2002-2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.core.convert.support;, +, +import java.beans.PropertyDescriptor;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Field;, +import java.lang.reflect.Method;, +import java.util.LinkedHashMap;, +import java.util.Map;, +, +import org.springframework.core.MethodParameter;, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.util.ReflectionUtils;, +, +/**, + * {@link TypeDescriptor} extension that exposes additional annotations, + * as conversion metadata: namely, annotations on other accessor methods, + * (getter/setter) and on the underlying field, if found., + *, + * @author Juergen Hoeller, + * @since 3.0, + */, +public class PropertyTypeDescriptor extends TypeDescriptor {, +, +	private final PropertyDescriptor propertyDescriptor;, +, +	private Annotation[] cachedAnnotations;, +, +, +	/**, +	 * Create a new BeanTypeDescriptor for the given bean property., +	 * @param propertyDescriptor the corresponding JavaBean PropertyDescriptor]