[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistration.java, + * Copyright 2002-2012 the original author or authors., +		return pathPatterns;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistration.java, + * Copyright 2002-2012 the original author or authors., +		return pathPatterns;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistry.java, + * Copyright 2002-2012 the original author or authors., +				ResourceHttpRequestHandler requestHandler = registration.getRequestHandler();, +				requestHandler.setServletContext(servletContext);, +				requestHandler.setApplicationContext(applicationContext);, +					requestHandler.afterPropertiesSet();, +				urlMap.put(pathPattern, requestHandler);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistration.java, + * Copyright 2002-2012 the original author or authors., +		return pathPatterns;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistry.java, + * Copyright 2002-2012 the original author or authors., +				ResourceHttpRequestHandler requestHandler = registration.getRequestHandler();, +				requestHandler.setServletContext(servletContext);, +				requestHandler.setApplicationContext(applicationContext);, +					requestHandler.afterPropertiesSet();, +				urlMap.put(pathPattern, requestHandler);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, + * Copyright 2002-2012 the original author or authors., +		ResourceHandlerRegistry registry = new ResourceHandlerRegistry(applicationContext, servletContext);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistration.java, + * Copyright 2002-2012 the original author or authors., +		return pathPatterns;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistry.java, + * Copyright 2002-2012 the original author or authors., +				ResourceHttpRequestHandler requestHandler = registration.getRequestHandler();, +				requestHandler.setServletContext(servletContext);, +				requestHandler.setApplicationContext(applicationContext);, +					requestHandler.afterPropertiesSet();, +				urlMap.put(pathPattern, requestHandler);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, + * Copyright 2002-2012 the original author or authors., +		ResourceHandlerRegistry registry = new ResourceHandlerRegistry(applicationContext, servletContext);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java, +	private List<ResourceResolver> resourceResolvers = new ArrayList<ResourceResolver>();, +	private List<ResourceTransformer> resourceTransformers = new ArrayList<ResourceTransformer>();, +		this.resourceResolvers = resourceResolvers;, +		this.resourceTransformers = (transformers != null) ? transformers : new ArrayList<ResourceTransformer>();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistration.java, + * Copyright 2002-2012 the original author or authors., +		return pathPatterns;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistry.java, + * Copyright 2002-2012 the original author or authors., +				ResourceHttpRequestHandler requestHandler = registration.getRequestHandler();, +				requestHandler.setServletContext(servletContext);, +				requestHandler.setApplicationContext(applicationContext);, +					requestHandler.afterPropertiesSet();, +				urlMap.put(pathPattern, requestHandler);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, + * Copyright 2002-2012 the original author or authors., +		ResourceHandlerRegistry registry = new ResourceHandlerRegistry(applicationContext, servletContext);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java, +	private List<ResourceResolver> resourceResolvers = new ArrayList<ResourceResolver>();, +	private List<ResourceTransformer> resourceTransformers = new ArrayList<ResourceTransformer>();, +		this.resourceResolvers = resourceResolvers;, +		this.resourceTransformers = (transformers != null) ? transformers : new ArrayList<ResourceTransformer>();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlGenerator.java, +import org.springframework.web.servlet.handler.SimpleUrlHandlerMapping;, +	private final List<ResourceMapping> resourceMappings = new ArrayList<ResourceMapping>();, +	 * Configure this instance with the handler mappings used to serve resources. It is, +	 * expected that the handler mapping URL map contains handlers of type, +	 * {@link ResourceHttpRequestHandler}., +	 * @param handlerMappings resource handler mappings, +	public void setResourceHandlerMappings(List<SimpleUrlHandlerMapping> handlerMappings) {, +		this.resourceMappings.clear();, +		if (handlerMappings == null) {, +			return;, +		for (SimpleUrlHandlerMapping handlerMapping : handlerMappings) {, +			PathMatcher pathMatcher = handlerMapping.getPathMatcher();, +			for(Entry<String, ?> entry : handlerMapping.getUrlMap().entrySet()) {, +					this.resourceMappings.add(new ResourceMapping(pattern, pathMatcher, resolvers, locations));, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistration.java, + * Copyright 2002-2012 the original author or authors., +		return pathPatterns;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistry.java, + * Copyright 2002-2012 the original author or authors., +				ResourceHttpRequestHandler requestHandler = registration.getRequestHandler();, +				requestHandler.setServletContext(servletContext);, +				requestHandler.setApplicationContext(applicationContext);, +					requestHandler.afterPropertiesSet();, +				urlMap.put(pathPattern, requestHandler);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, + * Copyright 2002-2012 the original author or authors., +		ResourceHandlerRegistry registry = new ResourceHandlerRegistry(applicationContext, servletContext);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java, +	private List<ResourceResolver> resourceResolvers = new ArrayList<ResourceResolver>();, +	private List<ResourceTransformer> resourceTransformers = new ArrayList<ResourceTransformer>();, +		this.resourceResolvers = resourceResolvers;, +		this.resourceTransformers = (transformers != null) ? transformers : new ArrayList<ResourceTransformer>();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlGenerator.java, +import org.springframework.web.servlet.handler.SimpleUrlHandlerMapping;, +	private final List<ResourceMapping> resourceMappings = new ArrayList<ResourceMapping>();, +	 * Configure this instance with the handler mappings used to serve resources. It is]