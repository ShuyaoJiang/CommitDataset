[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +import org.springframework.aop.framework.autoproxy.AutoProxyUtils;, +		this.factoriesPostProcessed.add(factoryId);, +		if (!this.registriesPostProcessed.contains(factoryId)) {, +			// If a @Configuration class gets proxied, always proxy the target class, +			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE);, +				// Set enhanced subclass of the user-specified bean class, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +import org.springframework.aop.framework.autoproxy.AutoProxyUtils;, +		this.factoriesPostProcessed.add(factoryId);, +		if (!this.registriesPostProcessed.contains(factoryId)) {, +			// If a @Configuration class gets proxied, always proxy the target class, +			beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE);, +				// Set enhanced subclass of the user-specified bean class, +++ b/spring-context/src/test/java/org/springframework/context/annotation/BeanMethodPolymorphismTests.java, +import org.springframework.aop.Pointcut;, +import org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator;, +import org.springframework.aop.interceptor.SimpleTraceInterceptor;, +import org.springframework.aop.support.DefaultPointcutAdvisor;, +, +	@Test, +	public void beanMethodThroughAopProxy() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(Config.class);, +		ctx.register(AnnotationAwareAspectJAutoProxyCreator.class);, +		ctx.register(TestAdvisor.class);, +		ctx.refresh();, +		ctx.getBean("testBean", TestBean.class);, +	}, +, +, +	public static class TestAdvisor extends DefaultPointcutAdvisor {, +, +		public TestAdvisor() {, +			super(new SimpleTraceInterceptor());, +		}, +	}, +]