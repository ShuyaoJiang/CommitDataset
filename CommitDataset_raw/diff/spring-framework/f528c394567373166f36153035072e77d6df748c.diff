[+++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java, +		public static Series valueOf(int status) {, +			int seriesCode = status / 100;, +		public static Series valueOf(HttpStatus status) {, +			return valueOf(status.value);, +		}, +, +++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java, +		public static Series valueOf(int status) {, +			int seriesCode = status / 100;, +		public static Series valueOf(HttpStatus status) {, +			return valueOf(status.value);, +		}, +, +++ b/spring-web/src/main/java/org/springframework/web/client/DefaultResponseErrorHandler.java, + * @author Rossen Stoyanchev, +		return hasError(getHttpStatusCode(response));, +	private HttpStatus getHttpStatusCode(ClientHttpResponse response) throws IOException {, +			throw new UnknownHttpStatusCodeException(response.getRawStatusCode(),, +					response.getStatusText(), response.getHeaders(), getResponseBody(response), getCharset(response));, +		HttpStatus statusCode = getHttpStatusCode(response);, +				throw new HttpClientErrorException(statusCode, response.getStatusText(),, +						response.getHeaders(), getResponseBody(response), getCharset(response));, +				throw new HttpServerErrorException(statusCode, response.getStatusText(),, +						response.getHeaders(), getResponseBody(response), getCharset(response));, +	private Charset getCharset(ClientHttpResponse response) {, +		HttpHeaders headers = response.getHeaders();, +		MediaType contentType = headers.getContentType();, +		return contentType != null ? contentType.getCharSet() : null;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java, +		public static Series valueOf(int status) {, +			int seriesCode = status / 100;, +		public static Series valueOf(HttpStatus status) {, +			return valueOf(status.value);, +		}, +, +++ b/spring-web/src/main/java/org/springframework/web/client/DefaultResponseErrorHandler.java, + * @author Rossen Stoyanchev, +		return hasError(getHttpStatusCode(response));, +	private HttpStatus getHttpStatusCode(ClientHttpResponse response) throws IOException {, +			throw new UnknownHttpStatusCodeException(response.getRawStatusCode(),, +					response.getStatusText(), response.getHeaders(), getResponseBody(response), getCharset(response));, +		HttpStatus statusCode = getHttpStatusCode(response);, +				throw new HttpClientErrorException(statusCode, response.getStatusText(),, +						response.getHeaders(), getResponseBody(response), getCharset(response));, +				throw new HttpServerErrorException(statusCode, response.getStatusText(),, +						response.getHeaders(), getResponseBody(response), getCharset(response));, +	private Charset getCharset(ClientHttpResponse response) {, +		HttpHeaders headers = response.getHeaders();, +		MediaType contentType = headers.getContentType();, +		return contentType != null ? contentType.getCharSet() : null;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/client/UnknownHttpStatusCodeException.java, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.client;, +, +import java.io.UnsupportedEncodingException;, +import java.nio.charset.Charset;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpStatus;, +, +/**, + * Exception thrown when an unknown (or custom) HTTP status code is received., + *, + * @author Rossen Stoyanchev, + * @since 3.2, + */, +public class UnknownHttpStatusCodeException extends RestClientException {, +, +	private static final long serialVersionUID = 4702443689088991600L;, +, +	private static final String DEFAULT_CHARSET = "ISO-8859-1";, +, +	private final int rawStatusCode;, +, +	private final String statusText;, +, +	private final byte[] responseBody;, +, +	private final HttpHeaders responseHeaders;, +, +	private final String responseCharset;]