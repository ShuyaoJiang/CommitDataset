[+++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, + * @author Brian Clozel, +						.defaultIfEmpty(message.bufferFactory().wrap(new byte[0])), +						.flatMap(buffer -> {, +							headers.setContentLength(buffer.readableByteCount());, +							return message.writeWith(Mono.just(buffer));, +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, + * @author Brian Clozel, +						.defaultIfEmpty(message.bufferFactory().wrap(new byte[0])), +						.flatMap(buffer -> {, +							headers.setContentLength(buffer.readableByteCount());, +							return message.writeWith(Mono.just(buffer));, +++ b/spring-web/src/test/java/org/springframework/http/codec/EncoderHttpMessageWriterTests.java, +import java.nio.charset.StandardCharsets;, +import reactor.test.StepVerifier;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DefaultDataBufferFactory;, +import org.springframework.core.io.buffer.support.DataBufferTestUtils;, + * @author Brian Clozel, +	public void getWritableMediaTypes() {, +	public void canWrite() {, +	public void useNegotiatedMediaType() {, +	public void useDefaultMediaType() {, +	public void useDefaultMediaTypeCharset() {, +	public void useNegotiatedMediaTypeCharset() {, +	public void useHttpOutputMessageMediaType() {, +	@Test, +	public void setContentLengthForMonoBody() {, +, +		DefaultDataBufferFactory factory = new DefaultDataBufferFactory();, +		DataBuffer buffer = factory.wrap("body".getBytes(StandardCharsets.UTF_8));, +		HttpMessageWriter<String> writer = getWriter(Flux.just(buffer), MimeTypeUtils.TEXT_PLAIN);, +, +		writer.write(Mono.just("body"), forClass(String.class), TEXT_PLAIN, this.response, NO_HINTS).block();, +, +		assertEquals(4, this.response.getHeaders().getContentLength());, +	}, +, +	@Test // SPR-17220, +	public void emptyBodyWritten() {, +		HttpMessageWriter<String> writer = getWriter(MimeTypeUtils.TEXT_PLAIN);, +		writer.write(Mono.empty(), forClass(String.class), TEXT_PLAIN, this.response, NO_HINTS).block();, +		StepVerifier.create(this.response.getBody()).expectNextCount(1).verifyComplete();, +		assertEquals(0, this.response.getHeaders().getContentLength());, +	}, +, +		return getWriter(Flux.empty(), mimeTypes);, +	}, +, +	private HttpMessageWriter<String> getWriter(Flux<DataBuffer> encodedStream, MimeType... mimeTypes) {, +		when(this.encoder.encode(any(), any(), any(), this.mediaTypeCaptor.capture(), any())).thenReturn(encodedStream);]