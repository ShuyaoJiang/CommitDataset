[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +			AnnotationAttributes attributes = AnnotatedElementUtils.getMergedAnnotationAttributes(ao, type);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +			AnnotationAttributes attributes = AnnotatedElementUtils.getMergedAnnotationAttributes(ao, type);, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +			EventListener eventListener = AnnotatedElementUtils.findMergedAnnotation(this.method, EventListener.class);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +			AnnotationAttributes attributes = AnnotatedElementUtils.getMergedAnnotationAttributes(ao, type);, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +			EventListener eventListener = AnnotatedElementUtils.findMergedAnnotation(this.method, EventListener.class);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, + * {@code getMergedAnnotationAttributes()}, {@code getMergedAnnotation()},, + * {@code findMergedAnnotationAttributes()}, and {@code findMergedAnnotation()}, + * methods., + * or declared within the annotation hierarchy <em>above</em> the, +	 * @since 4.2, +	public static Set<String> getMetaAnnotationTypes(AnnotatedElement element, Class<? extends Annotation> annotationType) {, +	 * {@code annotationName}) on the supplied {@link AnnotatedElement}., +	 * @param annotationName the fully qualified class name of the annotation, +	public static Set<String> getMetaAnnotationTypes(AnnotatedElement element, String annotationName) {, +		Assert.hasText(annotationName, "annotationName must not be null or empty");, +			Annotation annotation = getAnnotation(element, annotationName);, +				searchWithGetSemantics(annotation.annotationType(), annotationName, new SimpleAnnotationProcessor<Object>() {, +	 * annotation of the specified {@code annotationName}., +	 * @param annotationName the fully qualified class name of the meta-annotation, +	public static boolean hasMetaAnnotationTypes(AnnotatedElement element, final String annotationName) {, +		Assert.hasText(annotationName, "annotationName must not be null or empty");, +		return Boolean.TRUE.equals(searchWithGetSemantics(element, annotationName, new SimpleAnnotationProcessor<Boolean>() {, +				boolean found = annotation.annotationType().getName().equals(annotationName);, +	 * Determine if an annotation of the specified {@code annotationName}, +	 * <p>If this method returns {@code true}, then {@link #getMergedAnnotationAttributes}, +	 * @param annotationName the fully qualified class name of the annotation, +	public static boolean isAnnotated(AnnotatedElement element, final String annotationName) {, +		Assert.hasText(annotationName, "annotationName must not be null or empty");, +		return Boolean.TRUE.equals(searchWithGetSemantics(element, annotationName, new SimpleAnnotationProcessor<Boolean>() {, +				boolean found = annotation.annotationType().getName().equals(annotationName);, +	 * <p>This method delegates to {@link #getMergedAnnotationAttributes(AnnotatedElement, Class)}, +	 * @return the merged, synthesized {@code Annotation}, or {@code null} if not found, +	 * @see #getMergedAnnotationAttributes(AnnotatedElement, Class), +	 * @see #findMergedAnnotation(AnnotatedElement, Class), +	public static <A extends Annotation> A getMergedAnnotation(AnnotatedElement element, Class<A> annotationType) {, +		AnnotationAttributes attributes = getMergedAnnotationAttributes(element, annotationType);, +	 * <p>This method delegates to {@link #getMergedAnnotationAttributes(AnnotatedElement, String)}., +	 * @see #getMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean), +	 * @see #findMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean), +	 * @see #getMergedAnnotation(AnnotatedElement, Class), +	 * @see #findMergedAnnotation(AnnotatedElement, Class), +	public static AnnotationAttributes getMergedAnnotationAttributes(AnnotatedElement element, Class<? extends Annotation> annotationType) {, +		return getMergedAnnotationAttributes(element, annotationType.getName());, +	 * @deprecated As of Spring Framework 4.2, use {@link #getMergedAnnotationAttributes(AnnotatedElement, String)} instead., +	 */, +	@Deprecated, +	public static AnnotationAttributes getAnnotationAttributes(AnnotatedElement element, String annotationName) {, +		return getMergedAnnotationAttributes(element, annotationName);, +	}, +, +	/**, +	 * Get the first annotation of the specified {@code annotationName} within, +	 * <p>This method delegates to {@link #getMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean)},, +	 * @param annotationName the fully qualified class name of the annotation, +	 * @since 4.2, +	 * @see #getMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean), +	 * @see #findMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean), +	 * @see #findMergedAnnotation(AnnotatedElement, Class), +	public static AnnotationAttributes getMergedAnnotationAttributes(AnnotatedElement element, String annotationName) {, +		return getMergedAnnotationAttributes(element, annotationName, false, false);, +	 * @deprecated As of Spring Framework 4.2, use {@link #getMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean)} instead., +	 */, +	@Deprecated, +	public static AnnotationAttributes getAnnotationAttributes(AnnotatedElement element, String annotationName,, +			boolean classValuesAsString, boolean nestedAnnotationsAsMap) {, +		return getMergedAnnotationAttributes(element, annotationName, classValuesAsString, nestedAnnotationsAsMap);, +	}, +, +	/**, +	 * Get the first annotation of the specified {@code annotationName} within, +	 * {@code annotationName} has been found. As a consequence, additional, +	 * annotations of the specified {@code annotationName} will be ignored., +	 * @param annotationName the fully qualified class name of the annotation, +	 * @since 4.2, +	 * @see #findMergedAnnotation(AnnotatedElement, Class), +	 * @see #findMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean), +	public static AnnotationAttributes getMergedAnnotationAttributes(AnnotatedElement element, String annotationName,, +		AnnotationAttributes attributes = searchWithGetSemantics(element, annotationName,, +			new MergedAnnotationAttributesProcessor(annotationName, classValuesAsString, nestedAnnotationsAsMap));, +	 * <p>This method delegates to {@link #findMergedAnnotation(AnnotatedElement, String)}., +	 * @see #findMergedAnnotation(AnnotatedElement, String), +	 * @see #findMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean), +	 * @see #getMergedAnnotationAttributes(AnnotatedElement, Class), +	public static <A extends Annotation> A findMergedAnnotation(AnnotatedElement element, Class<A> annotationType) {, +		return findMergedAnnotation(element, annotationType.getName());, +	 * Find the first annotation of the specified {@code annotationName} within, +	 * the result back into an annotation of the specified {@code annotationName}., +	 * <p>This method delegates to {@link #findMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean)}, +	 * @param annotationName the fully qualified class name of the annotation, +	 * @see #findMergedAnnotation(AnnotatedElement, Class), +	 * @see #findMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean), +	public static <A extends Annotation> A findMergedAnnotation(AnnotatedElement element, String annotationName) {, +		AnnotationAttributes attributes = findMergedAnnotationAttributes(element, annotationName, false, false);, +	 * Find the first annotation of the specified {@code annotationName} within]