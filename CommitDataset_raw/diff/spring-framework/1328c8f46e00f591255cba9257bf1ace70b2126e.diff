[+++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractCodecConfigurer.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.http.codec;, +, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.function.Supplier;, +, +import org.springframework.core.ResolvableType;, +import org.springframework.core.codec.ByteArrayDecoder;, +import org.springframework.core.codec.ByteArrayEncoder;, +import org.springframework.core.codec.ByteBufferDecoder;, +import org.springframework.core.codec.ByteBufferEncoder;, +import org.springframework.core.codec.CharSequenceEncoder;, +import org.springframework.core.codec.DataBufferDecoder;, +import org.springframework.core.codec.DataBufferEncoder;, +import org.springframework.core.codec.Decoder;, +import org.springframework.core.codec.Encoder;, +import org.springframework.core.codec.ResourceDecoder;, +import org.springframework.http.codec.json.Jackson2JsonDecoder;, +import org.springframework.http.codec.json.Jackson2JsonEncoder;, +import org.springframework.http.codec.xml.Jaxb2XmlDecoder;, +import org.springframework.http.codec.xml.Jaxb2XmlEncoder;, +import org.springframework.util.Assert;, +import org.springframework.util.ClassUtils;, +, +/**, + * Default implementation of {@link CodecConfigurer}., + *, + * @author Rossen Stoyanchev, + * @since 5.0, + */, +abstract class AbstractCodecConfigurer implements CodecConfigurer {, +, +	protected static final boolean jackson2Present =, +			ClassUtils.isPresent("com.fasterxml.jackson.databind.ObjectMapper",, +					AbstractCodecConfigurer.class.getClassLoader()) &&, +					ClassUtils.isPresent("com.fasterxml.jackson.core.JsonGenerator",, +							AbstractCodecConfigurer.class.getClassLoader());, +, +	protected static final boolean jaxb2Present = ClassUtils.isPresent("javax.xml.bind.Binder",, +			AbstractCodecConfigurer.class.getClassLoader());, +, +, +	private final AbstractDefaultCodecs defaultCodecs;, +, +	private final DefaultCustomCodecs customCodecs = new DefaultCustomCodecs();, +, +, +	/**, +	 * Protected constructor with the configurer for default readers and writers., +	 */, +	protected AbstractCodecConfigurer(AbstractDefaultCodecs defaultCodecs) {, +		Assert.notNull(defaultCodecs, "'defaultCodecs' is required.");, +		this.defaultCodecs = defaultCodecs;, +	}, +, +, +	@Override, +	public DefaultCodecs defaultCodecs() {, +		return this.defaultCodecs;, +	}, +, +	@Override, +	public void registerDefaults(boolean registerDefaults) {, +		this.defaultCodecs.setSuppressed(!registerDefaults);, +	}, +, +	@Override, +	public CustomCodecs customCodecs() {, +		return this.customCodecs;, +	}, +, +, +	@Override, +	public List<HttpMessageReader<?>> getReaders() {, +		List<HttpMessageReader<?>> result = new ArrayList<>();, +, +		this.defaultCodecs.addTypedReadersTo(result);, +		this.customCodecs.addTypedReadersTo(result);, +, +		this.defaultCodecs.addObjectReadersTo(result);, +		this.customCodecs.addObjectReadersTo(result);, +]