[+++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscovererTests.java, +/*, + * Copyright 2002-2006 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.aop.aspectj;, +, +import static org.junit.Assert.*;, +, +import org.aspectj.lang.JoinPoint;, +import org.junit.Test;, +import org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.AmbiguousBindingException;, +, +import java.lang.reflect.Method;, +, +/**, + * Unit tests for the {@link AspectJAdviceParameterNameDiscoverer} class., + * <p/>, + * <p>See also <code>TigerAspectJAdviceParameterNameDiscovererTests</code> in, + * the 'tiger' tree for tests relating to annotations., + *, + * @author Adrian Colyer, + */, +public class AspectJAdviceParameterNameDiscovererTests {, +, +	// methods to discover parameter names for, +	public void noArgs() {, +	}, +, +	public void tjp(JoinPoint jp) {, +	}, +, +	public void tjpsp(JoinPoint.StaticPart tjpsp) {, +	}, +, +	public void twoJoinPoints(JoinPoint jp1, JoinPoint jp2) {, +	}, +, +	public void oneThrowable(Exception ex) {, +	}, +, +	public void jpAndOneThrowable(JoinPoint jp, Exception ex) {, +	}, +, +	public void jpAndTwoThrowables(JoinPoint jp, Exception ex, Error err) {, +	}, +, +	public void oneObject(Object x) {, +	}, +, +	public void twoObjects(Object x, Object y) {, +	}, +, +	public void onePrimitive(int x) {, +	}, +, +	public void oneObjectOnePrimitive(Object x, int y) {, +	}, +, +	public void oneThrowableOnePrimitive(Throwable x, int y) {, +	}, +, +	public void theBigOne(JoinPoint jp, Throwable x, int y, Object foo) {, +	}, +, +, +	@Test, +	public void testNoArgs() {, +		assertParameterNames(getMethod("noArgs"), "execution(* *(..))", new String[0]);, +	}, +, +	@Test, +	public void testJoinPointOnly() {, +		assertParameterNames(getMethod("tjp"), "execution(* *(..))", new String[]{"thisJoinPoint"});, +	}, +, +	@Test, +	public void testJoinPointStaticPartOnly() {, +		assertParameterNames(getMethod("tjpsp"), "execution(* *(..))", new String[]{"thisJoinPointStaticPart"});, +	}, +, +	@Test, +	public void testTwoJoinPoints() {, +		assertException(getMethod("twoJoinPoints"), "foo()", IllegalStateException.class, "Failed to bind all argument names: 1 argument(s) could not be bound");, +	}, +, +	@Test, +	public void testOneThrowable() {, +		assertParameterNames(getMethod("oneThrowable"), "foo()", null, "ex", new String[]{"ex"});]