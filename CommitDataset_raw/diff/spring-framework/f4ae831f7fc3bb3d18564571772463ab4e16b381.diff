[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultResponseBuilder.java, +	public <T, S extends Publisher<ServerSentEvent<T>>> Response<S> sse(S eventsPublisher) {, +	public <T, S extends Publisher<T>> Response<S> sse(S eventsPublisher, Class<T> eventClass) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultResponseBuilder.java, +	public <T, S extends Publisher<ServerSentEvent<T>>> Response<S> sse(S eventsPublisher) {, +	public <T, S extends Publisher<T>> Response<S> sse(S eventsPublisher, Class<T> eventClass) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/Response.java, +		<T, S extends Publisher<ServerSentEvent<T>>> Response<S> sse(S eventsPublisher);, +		<T, S extends Publisher<T>> Response<S> sse(S eventsPublisher, Class<T> eventClass);, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultResponseBuilder.java, +	public <T, S extends Publisher<ServerSentEvent<T>>> Response<S> sse(S eventsPublisher) {, +	public <T, S extends Publisher<T>> Response<S> sse(S eventsPublisher, Class<T> eventClass) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/Response.java, +		<T, S extends Publisher<ServerSentEvent<T>>> Response<S> sse(S eventsPublisher);, +		<T, S extends Publisher<T>> Response<S> sse(S eventsPublisher, Class<T> eventClass);, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/ServerSentEventResponse.java, +class ServerSentEventResponse<T extends Publisher<?>> extends AbstractResponse<T> {, +	private final T eventsPublisher;, +	private ServerSentEventResponse(int statusCode, HttpHeaders headers, T eventsPublisher, ResolvableType eventType) {, +	public static <T, S extends Publisher<T>> ServerSentEventResponse<S> fromPublisher(int statusCode, HttpHeaders headers, S eventsPublisher, Class<? extends T> eventType) {, +		return new ServerSentEventResponse<S>(statusCode, headers, eventsPublisher, ResolvableType.forClass(eventType));, +	public static <T, S extends Publisher<ServerSentEvent<T>>> ServerSentEventResponse<S> fromSseEvents(int statusCode, HttpHeaders headers, S eventsPublisher) {, +		return new ServerSentEventResponse<S>(statusCode, headers, eventsPublisher, SERVER_SIDE_EVENT_TYPE);, +	public T body() {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultResponseBuilder.java, +	public <T, S extends Publisher<ServerSentEvent<T>>> Response<S> sse(S eventsPublisher) {, +	public <T, S extends Publisher<T>> Response<S> sse(S eventsPublisher, Class<T> eventClass) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/Response.java, +		<T, S extends Publisher<ServerSentEvent<T>>> Response<S> sse(S eventsPublisher);, +		<T, S extends Publisher<T>> Response<S> sse(S eventsPublisher, Class<T> eventClass);, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/ServerSentEventResponse.java, +class ServerSentEventResponse<T extends Publisher<?>> extends AbstractResponse<T> {, +	private final T eventsPublisher;, +	private ServerSentEventResponse(int statusCode, HttpHeaders headers, T eventsPublisher, ResolvableType eventType) {, +	public static <T, S extends Publisher<T>> ServerSentEventResponse<S> fromPublisher(int statusCode, HttpHeaders headers, S eventsPublisher, Class<? extends T> eventType) {, +		return new ServerSentEventResponse<S>(statusCode, headers, eventsPublisher, ResolvableType.forClass(eventType));, +	public static <T, S extends Publisher<ServerSentEvent<T>>> ServerSentEventResponse<S> fromSseEvents(int statusCode, HttpHeaders headers, S eventsPublisher) {, +		return new ServerSentEventResponse<S>(statusCode, headers, eventsPublisher, SERVER_SIDE_EVENT_TYPE);, +	public T body() {, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/function/ServerSentEventResponseTests.java, +	private final ServerSentEventResponse<Publisher<ServerSentEvent<String>>> sseResponse =]