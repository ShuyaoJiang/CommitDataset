[+++ b/build.gradle, +		testCompile("org.assertj:assertj-core:3.11.0"), +++ b/build.gradle, +		testCompile("org.assertj:assertj-core:3.11.0"), +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +import org.springframework.core.annotation.MergedAnnotation;, +import org.springframework.core.annotation.MergedAnnotations;, +import org.springframework.core.annotation.MergedAnnotations.SearchStrategy;, +						MergedAnnotation<?> ann = findAutowiredAnnotation(candidate);, +				MergedAnnotation<?> ann = findAutowiredAnnotation(field);, +				MergedAnnotation<?> ann = findAutowiredAnnotation(bridgedMethod);, +	private MergedAnnotation<?> findAutowiredAnnotation(AccessibleObject ao) {, +		MergedAnnotations annotations = MergedAnnotations.from(ao, SearchStrategy.INHERITED_ANNOTATIONS);, +			MergedAnnotation<?> annotation = annotations.get(type);, +			if (annotation.isPresent()) {, +				return annotation;, +	protected boolean determineRequiredStatus(MergedAnnotation<?> ann) {, +		return determineRequiredStatus(, +				ann.asMap(mergedAnnotation -> new AnnotationAttributes()));, +	}, +, +	/**, +	 * Determine if the annotated field or method requires its dependency., +	 * <p>A 'required' dependency means that autowiring should fail when no beans, +	 * are found. Otherwise, the autowiring process will simply bypass the field, +	 * or method when no beans are found., +	 * @param ann the Autowired annotation, +	 * @return whether the annotation indicates that a dependency is required, +	 * @deprecated since 5.2 in favor of {@link #determineRequiredStatus(MergedAnnotation)}, +	 */, +	@Deprecated, +++ b/build.gradle, +		testCompile("org.assertj:assertj-core:3.11.0"), +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +import org.springframework.core.annotation.MergedAnnotation;, +import org.springframework.core.annotation.MergedAnnotations;, +import org.springframework.core.annotation.MergedAnnotations.SearchStrategy;, +						MergedAnnotation<?> ann = findAutowiredAnnotation(candidate);, +				MergedAnnotation<?> ann = findAutowiredAnnotation(field);, +				MergedAnnotation<?> ann = findAutowiredAnnotation(bridgedMethod);, +	private MergedAnnotation<?> findAutowiredAnnotation(AccessibleObject ao) {, +		MergedAnnotations annotations = MergedAnnotations.from(ao, SearchStrategy.INHERITED_ANNOTATIONS);, +			MergedAnnotation<?> annotation = annotations.get(type);, +			if (annotation.isPresent()) {, +				return annotation;, +	protected boolean determineRequiredStatus(MergedAnnotation<?> ann) {, +		return determineRequiredStatus(, +				ann.asMap(mergedAnnotation -> new AnnotationAttributes()));, +	}, +, +	/**, +	 * Determine if the annotated field or method requires its dependency., +	 * <p>A 'required' dependency means that autowiring should fail when no beans, +	 * are found. Otherwise, the autowiring process will simply bypass the field, +	 * or method when no beans are found., +	 * @param ann the Autowired annotation, +	 * @return whether the annotation indicates that a dependency is required, +	 * @deprecated since 5.2 in favor of {@link #determineRequiredStatus(MergedAnnotation)}, +	 */, +	@Deprecated, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/ParameterResolutionDelegate.java, +/*, + * Copyright 2002-2019 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.beans.factory.annotation;, +, +import java.lang.annotation.Annotation;, +import java.lang.reflect.AnnotatedElement;, +import java.lang.reflect.Constructor;, +import java.lang.reflect.Executable;, +import java.lang.reflect.Parameter;, +, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.config.AutowireCapableBeanFactory;, +import org.springframework.beans.factory.config.DependencyDescriptor;, +import org.springframework.core.MethodParameter;, +import org.springframework.core.annotation.AnnotatedElementUtils;, +import org.springframework.core.annotation.SynthesizingMethodParameter;, +import org.springframework.lang.Nullable;, +import org.springframework.util.Assert;, +import org.springframework.util.ClassUtils;, +, +/**, + * Public delegate for resolving autowirable parameters on externally managed, + * constructors and methods., + *, + * @author Sam Brannen]