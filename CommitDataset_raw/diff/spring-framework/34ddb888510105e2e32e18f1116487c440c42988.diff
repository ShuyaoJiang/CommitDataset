[+++ b/spring-context/src/main/java/org/springframework/ui/ConcurrentModel.java, +	 * @param attributeValue the model attribute value (ignored if {@code null},, +	 * just removing an existing entry if any), +		if (attributeValue != null) {, +		}, +		else {, +			remove(attributeName);, +		}, +++ b/spring-context/src/main/java/org/springframework/ui/ConcurrentModel.java, +	 * @param attributeValue the model attribute value (ignored if {@code null},, +	 * just removing an existing entry if any), +		if (attributeValue != null) {, +		}, +		else {, +			remove(attributeName);, +		}, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandlerTests.java, + * Copyright 2002-2018 the original author or authors., +import static java.nio.charset.StandardCharsets.*;, +import static org.junit.Assert.*;, +import static org.mockito.Mockito.*;, +import static org.springframework.http.MediaType.*;, +import static org.springframework.mock.http.server.reactive.test.MockServerHttpRequest.*;, +import static org.springframework.web.method.ResolvableMethod.*;, +	public void supports() {, +	public void viewResolverOrder() {, +	public void handleReturnValueTypes() {, +		returnValue = new ConcurrentModel().addAttribute("name", "Joe").addAttribute("ignore", null);, +	public void handleWithMultipleResolvers() {, +	public void defaultViewName() {, +	private void testDefaultViewName(Object returnValue, MethodParameter returnType) {, +	public void unresolvedViewName() {, +	public void contentNegotiation() {, +	public void contentNegotiationWith406() {, +	public void contentNegotiationWithRedirect() {, +			String responseBody, ViewResolver... resolvers) {]