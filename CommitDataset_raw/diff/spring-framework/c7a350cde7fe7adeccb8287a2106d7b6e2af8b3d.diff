[+++ b/org.springframework.context/src/main/java/org/springframework/ejb/config/AbstractJndiLocatingBeanDefinitionParser.java, +import static org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.*;, + * @author Oliver Gierke, +		return (super.isEligibleAttribute(attributeName) && !ENVIRONMENT_REF.equals(attributeName) && !LAZY_INIT_ATTRIBUTE, +				.equals(attributeName));, +		String lazyInit = element.getAttribute(LAZY_INIT_ATTRIBUTE);, +		if (StringUtils.hasText(lazyInit) && !DEFAULT_VALUE.equals(lazyInit)) {, +			definitionBuilder.setLazyInit(TRUE_VALUE.equals(lazyInit));, +		}, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/ejb/config/AbstractJndiLocatingBeanDefinitionParser.java, +import static org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.*;, + * @author Oliver Gierke, +		return (super.isEligibleAttribute(attributeName) && !ENVIRONMENT_REF.equals(attributeName) && !LAZY_INIT_ATTRIBUTE, +				.equals(attributeName));, +		String lazyInit = element.getAttribute(LAZY_INIT_ATTRIBUTE);, +		if (StringUtils.hasText(lazyInit) && !DEFAULT_VALUE.equals(lazyInit)) {, +			definitionBuilder.setLazyInit(TRUE_VALUE.equals(lazyInit));, +		}, +	}, +++ b/org.springframework.context/src/main/resources/org/springframework/ejb/config/spring-jee-3.1.xsd, +				<xsd:attribute name="lazy-init" default="default" type="beans:defaultable-boolean">, +					<xsd:annotation>, +						<xsd:documentation><![CDATA[, +	Indicates whether or not this bean is to be lazily initialized., +	If false, it will be instantiated on startup by bean factories, +	that perform eager initialization of singletons. The default is, +	"false"., +	, +	Note: This attribute will not be inherited by child bean definitions., +	Hence, it needs to be specified per concrete bean definition., +	    				]]></xsd:documentation>, +					</xsd:annotation>, +				</xsd:attribute>, +++ b/org.springframework.context/src/main/java/org/springframework/ejb/config/AbstractJndiLocatingBeanDefinitionParser.java, +import static org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.*;, + * @author Oliver Gierke, +		return (super.isEligibleAttribute(attributeName) && !ENVIRONMENT_REF.equals(attributeName) && !LAZY_INIT_ATTRIBUTE, +				.equals(attributeName));, +		String lazyInit = element.getAttribute(LAZY_INIT_ATTRIBUTE);, +		if (StringUtils.hasText(lazyInit) && !DEFAULT_VALUE.equals(lazyInit)) {, +			definitionBuilder.setLazyInit(TRUE_VALUE.equals(lazyInit));, +		}, +	}, +++ b/org.springframework.context/src/main/resources/org/springframework/ejb/config/spring-jee-3.1.xsd, +				<xsd:attribute name="lazy-init" default="default" type="beans:defaultable-boolean">, +					<xsd:annotation>, +						<xsd:documentation><![CDATA[, +	Indicates whether or not this bean is to be lazily initialized., +	If false, it will be instantiated on startup by bean factories, +	that perform eager initialization of singletons. The default is, +	"false"., +	, +	Note: This attribute will not be inherited by child bean definitions., +	Hence, it needs to be specified per concrete bean definition., +	    				]]></xsd:documentation>, +					</xsd:annotation>, +				</xsd:attribute>, +++ b/org.springframework.context/src/test/java/org/springframework/ejb/config/JeeNamespaceHandlerTests.java, + * @author Oliver Gierke, +	@Test, +	public void testLazyInitJndiLookup() throws Exception {, +		BeanDefinition definition = this.beanFactory.getMergedBeanDefinition("lazyDataSource");, +		assertTrue(definition.isLazyInit());, +		definition = this.beanFactory.getMergedBeanDefinition("lazyLocalBean");, +		assertTrue(definition.isLazyInit());, +		definition = this.beanFactory.getMergedBeanDefinition("lazyRemoteBean");, +		assertTrue(definition.isLazyInit());, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/ejb/config/AbstractJndiLocatingBeanDefinitionParser.java, +import static org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.*;, + * @author Oliver Gierke, +		return (super.isEligibleAttribute(attributeName) && !ENVIRONMENT_REF.equals(attributeName) && !LAZY_INIT_ATTRIBUTE, +				.equals(attributeName));, +		String lazyInit = element.getAttribute(LAZY_INIT_ATTRIBUTE);, +		if (StringUtils.hasText(lazyInit) && !DEFAULT_VALUE.equals(lazyInit)) {, +			definitionBuilder.setLazyInit(TRUE_VALUE.equals(lazyInit));, +		}, +	}, +++ b/org.springframework.context/src/main/resources/org/springframework/ejb/config/spring-jee-3.1.xsd, +				<xsd:attribute name="lazy-init" default="default" type="beans:defaultable-boolean">, +					<xsd:annotation>, +						<xsd:documentation><![CDATA[, +	Indicates whether or not this bean is to be lazily initialized., +	If false, it will be instantiated on startup by bean factories, +	that perform eager initialization of singletons. The default is, +	"false"., +	, +	Note: This attribute will not be inherited by child bean definitions., +	Hence, it needs to be specified per concrete bean definition., +	    				]]></xsd:documentation>, +					</xsd:annotation>, +				</xsd:attribute>, +++ b/org.springframework.context/src/test/java/org/springframework/ejb/config/JeeNamespaceHandlerTests.java, + * @author Oliver Gierke, +	@Test, +	public void testLazyInitJndiLookup() throws Exception {, +		BeanDefinition definition = this.beanFactory.getMergedBeanDefinition("lazyDataSource");, +		assertTrue(definition.isLazyInit());]