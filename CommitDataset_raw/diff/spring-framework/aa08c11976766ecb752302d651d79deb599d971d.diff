[+++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/annotation/AnnotationJmxAttributeSource.java, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/annotation/AnnotationJmxAttributeSource.java, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/assembler/AbstractReflectiveMBeanInfoAssembler.java, +, +			// allow getters and setters to be marked as operations directly, +			if (info == null && includeOperation(method, beanKey)) {, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/annotation/AnnotationJmxAttributeSource.java, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/assembler/AbstractReflectiveMBeanInfoAssembler.java, +, +			// allow getters and setters to be marked as operations directly, +			if (info == null && includeOperation(method, beanKey)) {, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/assembler/MetadataMBeanInfoAssembler.java, +			if(hasManagedAttribute(method)) {, +				return true;, +		}, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/annotation/AnnotationJmxAttributeSource.java, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/assembler/AbstractReflectiveMBeanInfoAssembler.java, +, +			// allow getters and setters to be marked as operations directly, +			if (info == null && includeOperation(method, beanKey)) {, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/assembler/MetadataMBeanInfoAssembler.java, +			if(hasManagedAttribute(method)) {, +				return true;, +		}, +++ b/org.springframework.context/src/test/java/org/springframework/jmx/export/annotation/AnnotationMetadataAssemblerTests.java, +	public void testOperationOnGetter() throws Exception {, +		ModelMBeanInfo inf = getMBeanInfoFromAssembler();, +		ModelMBeanOperationInfo op = inf.getOperation("getExpensiveToCalculate");, +		assertNotNull(op);, +	}, +, +		return super.getExpectedOperationCount() + 4;, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/annotation/AnnotationJmxAttributeSource.java, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/assembler/AbstractReflectiveMBeanInfoAssembler.java, +, +			// allow getters and setters to be marked as operations directly, +			if (info == null && includeOperation(method, beanKey)) {, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/assembler/MetadataMBeanInfoAssembler.java, +			if(hasManagedAttribute(method)) {, +				return true;, +		}, +++ b/org.springframework.context/src/test/java/org/springframework/jmx/export/annotation/AnnotationMetadataAssemblerTests.java, +	public void testOperationOnGetter() throws Exception {, +		ModelMBeanInfo inf = getMBeanInfoFromAssembler();, +		ModelMBeanOperationInfo op = inf.getOperation("getExpensiveToCalculate");, +		assertNotNull(op);, +	}, +, +		return super.getExpectedOperationCount() + 4;, +++ b/org.springframework.context/src/test/java/org/springframework/jmx/export/annotation/AnnotationTestBean.java, +	, +, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/annotation/AnnotationJmxAttributeSource.java, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/assembler/AbstractReflectiveMBeanInfoAssembler.java, +, +			// allow getters and setters to be marked as operations directly, +			if (info == null && includeOperation(method, beanKey)) {, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/assembler/MetadataMBeanInfoAssembler.java, +			if(hasManagedAttribute(method)) {, +				return true;, +		}, +++ b/org.springframework.context/src/test/java/org/springframework/jmx/export/annotation/AnnotationMetadataAssemblerTests.java, +	public void testOperationOnGetter() throws Exception {, +		ModelMBeanInfo inf = getMBeanInfoFromAssembler();, +		ModelMBeanOperationInfo op = inf.getOperation("getExpensiveToCalculate");, +		assertNotNull(op);, +	}, +, +		return super.getExpectedOperationCount() + 4;, +++ b/org.springframework.context/src/test/java/org/springframework/jmx/export/annotation/AnnotationTestBean.java, +	, +, +++ b/org.springframework.context/src/test/java/org/springframework/jmx/export/annotation/AnnotationTestSubBean.java, +, +	public int getExpensiveToCalculate() {, +		return Integer.MAX_VALUE;, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/annotation/AnnotationJmxAttributeSource.java, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/assembler/AbstractReflectiveMBeanInfoAssembler.java, +, +			// allow getters and setters to be marked as operations directly, +			if (info == null && includeOperation(method, beanKey)) {, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/assembler/MetadataMBeanInfoAssembler.java, +			if(hasManagedAttribute(method)) {, +				return true;, +		}, +++ b/org.springframework.context/src/test/java/org/springframework/jmx/export/annotation/AnnotationMetadataAssemblerTests.java, +	public void testOperationOnGetter() throws Exception {, +		ModelMBeanInfo inf = getMBeanInfoFromAssembler();, +		ModelMBeanOperationInfo op = inf.getOperation("getExpensiveToCalculate");, +		assertNotNull(op);, +	}, +, +		return super.getExpectedOperationCount() + 4;, +++ b/org.springframework.context/src/test/java/org/springframework/jmx/export/annotation/AnnotationTestBean.java, +	, +, +++ b/org.springframework.context/src/test/java/org/springframework/jmx/export/annotation/AnnotationTestSubBean.java, +, +	public int getExpensiveToCalculate() {]