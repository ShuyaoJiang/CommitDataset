[+++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ScheduledExecutorFactoryBean.java, + * Copyright 2002-2015 the original author or authors., + * {@code ScheduledExecutorFactoryBean} is then just being used for lifecycle integration., + *, + * <p>For an alternative, you may set up a {@link ScheduledThreadPoolExecutor} instance, + * directly using constructor injection, or use a factory method definition that points, + * to the {@link java.util.concurrent.Executors} class., + * <b>This is strongly recommended in particular for common {@code @Bean} methods in, + * configuration classes, where this {@code FactoryBean} variant would force you to, + * return the {@code FactoryBean} type instead of {@code ScheduledExecutorService}.</b>, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ScheduledExecutorFactoryBean.java, + * Copyright 2002-2015 the original author or authors., + * {@code ScheduledExecutorFactoryBean} is then just being used for lifecycle integration., + *, + * <p>For an alternative, you may set up a {@link ScheduledThreadPoolExecutor} instance, + * directly using constructor injection, or use a factory method definition that points, + * to the {@link java.util.concurrent.Executors} class., + * <b>This is strongly recommended in particular for common {@code @Bean} methods in, + * configuration classes, where this {@code FactoryBean} variant would force you to, + * return the {@code FactoryBean} type instead of {@code ScheduledExecutorService}.</b>, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolExecutorFactoryBean.java, + * <p>For an alternative, you may set up a {@link ThreadPoolExecutor} instance directly, + * using constructor injection, or use a factory method definition that points to the, + * <b>This is strongly recommended in particular for common {@code @Bean} methods in, + * configuration classes, where this {@code FactoryBean} variant would force you to, + * return the {@code FactoryBean} type instead of the actual {@code Executor} type.</b>, + * <p>If you need a timing-based {@link java.util.concurrent.ScheduledExecutorService}, + * instead, consider {@link ScheduledExecutorFactoryBean}.]