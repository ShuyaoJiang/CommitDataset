[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import org.springframework.http.converter.HttpMessageConverter;, +		messageConverters.add(createConverterBeanDefinition(ByteArrayHttpMessageConverter.class, source));, +, +		RootBeanDefinition stringConverterDef = createConverterBeanDefinition(StringHttpMessageConverter.class, source);, +		stringConverterDef.getPropertyValues().add("writeAcceptCharset", false);, +		messageConverters.add(stringConverterDef);, +, +		messageConverters.add(createConverterBeanDefinition(ResourceHttpMessageConverter.class, source));, +		messageConverters.add(createConverterBeanDefinition(SourceHttpMessageConverter.class, source));, +		messageConverters.add(createConverterBeanDefinition(XmlAwareFormHttpMessageConverter.class, source));, +			messageConverters.add(createConverterBeanDefinition(Jaxb2RootElementHttpMessageConverter.class, source));, +			messageConverters.add(createConverterBeanDefinition(MappingJacksonHttpMessageConverter.class, source));, +			messageConverters.add(createConverterBeanDefinition(AtomFeedHttpMessageConverter.class, source));, +			messageConverters.add(createConverterBeanDefinition(RssChannelHttpMessageConverter.class, source));, +	private RootBeanDefinition createConverterBeanDefinition(Class<? extends HttpMessageConverter> converterClass,, +			Object source) {, +		RootBeanDefinition beanDefinition = new RootBeanDefinition(converterClass);, +		beanDefinition.setSource(source);, +		beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +, +		return beanDefinition;, +	}, +]