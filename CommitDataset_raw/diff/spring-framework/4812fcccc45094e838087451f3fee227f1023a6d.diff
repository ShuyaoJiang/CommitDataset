[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-test-mvc/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java, +import static org.springframework.test.util.AssertionErrors.assertEquals;, +import static org.springframework.test.util.MatcherAssertionErrors.assertThat;, +	 * @param content the response content, +	 * @param matcher the matcher to assert on the resulting json path, +		assertThat("JSON path" + this.expression, value, matcher);, +	public void assertValue(String responseContent, Object expectedValue) throws ParseException {, +		Object actualValue = evaluateJsonPath(responseContent);, +		assertEquals("JSON path" + this.expression, expectedValue, actualValue);, +	}, +, +	/**, +	 * Apply the JSONPath and assert the resulting value is an array., +	 */, +	public void assertValueIsArray(String responseContent) throws ParseException {, +		Object actualValue = evaluateJsonPath(responseContent);, +		assertTrue("No value for JSON path " + this.expression, actualValue != null);, +		String reason = "Expected array at JSON path " + this.expression + " but found " + actualValue;, +		assertTrue(reason, actualValue instanceof List);, +		String reason = "No value for JSON path " + this.expression;, +++ b/build.gradle, +++ b/spring-test-mvc/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java, +import static org.springframework.test.util.AssertionErrors.assertEquals;, +import static org.springframework.test.util.MatcherAssertionErrors.assertThat;, +	 * @param content the response content, +	 * @param matcher the matcher to assert on the resulting json path, +		assertThat("JSON path" + this.expression, value, matcher);, +	public void assertValue(String responseContent, Object expectedValue) throws ParseException {, +		Object actualValue = evaluateJsonPath(responseContent);, +		assertEquals("JSON path" + this.expression, expectedValue, actualValue);, +	}, +, +	/**, +	 * Apply the JSONPath and assert the resulting value is an array., +	 */, +	public void assertValueIsArray(String responseContent) throws ParseException {, +		Object actualValue = evaluateJsonPath(responseContent);, +		assertTrue("No value for JSON path " + this.expression, actualValue != null);, +		String reason = "Expected array at JSON path " + this.expression + " but found " + actualValue;, +		assertTrue(reason, actualValue instanceof List);, +		String reason = "No value for JSON path " + this.expression;, +++ b/spring-test-mvc/src/main/java/org/springframework/test/util/XpathExpectationsHelper.java, +import static org.springframework.test.util.AssertionErrors.*;, +import static org.springframework.test.util.MatcherAssertionErrors.*;, +		assertThat("XPath " + this.expression, node, matcher);, +		Document document = parseXmlString(content);, +		Node node = evaluateXpath(document, XPathConstants.NODE, Node.class);, +		assertTrue("XPath " + this.expression + " does not exist", node != null);, +		Document document = parseXmlString(content);, +		Node node = evaluateXpath(document, XPathConstants.NODE, Node.class);, +		assertTrue("XPath " + this.expression + " exists", node == null);, +		assertThat("nodeCount for XPath " + this.expression, nodeList.getLength(), matcher);, +		Document document = parseXmlString(content);, +		NodeList nodeList = evaluateXpath(document, XPathConstants.NODESET, NodeList.class);, +		assertEquals("nodeCount for XPath " + this.expression, expectedCount, nodeList.getLength());, +		assertThat("XPath " + this.expression, result, matcher);, +		Document document = parseXmlString(content);, +		String actual = evaluateXpath(document,  XPathConstants.STRING, String.class);, +		assertEquals("XPath " + this.expression, expectedValue, actual);, +		assertThat("XPath " + this.expression, result, matcher);, +		Document document = parseXmlString(content);, +		Double actual = evaluateXpath(document, XPathConstants.NUMBER, Double.class);, +		assertEquals("XPath " + this.expression, expectedValue, actual);, +		String actual = evaluateXpath(document, XPathConstants.STRING, String.class);, +		assertEquals("XPath " + this.expression, expectedValue, Boolean.parseBoolean(actual));, +++ b/build.gradle, +++ b/spring-test-mvc/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java, +import static org.springframework.test.util.AssertionErrors.assertEquals;, +import static org.springframework.test.util.MatcherAssertionErrors.assertThat;, +	 * @param content the response content, +	 * @param matcher the matcher to assert on the resulting json path, +		assertThat("JSON path" + this.expression, value, matcher);, +	public void assertValue(String responseContent, Object expectedValue) throws ParseException {, +		Object actualValue = evaluateJsonPath(responseContent);, +		assertEquals("JSON path" + this.expression, expectedValue, actualValue);, +	}, +, +	/**, +	 * Apply the JSONPath and assert the resulting value is an array., +	 */, +	public void assertValueIsArray(String responseContent) throws ParseException {, +		Object actualValue = evaluateJsonPath(responseContent);, +		assertTrue("No value for JSON path " + this.expression, actualValue != null);, +		String reason = "Expected array at JSON path " + this.expression + " but found " + actualValue;, +		assertTrue(reason, actualValue instanceof List);, +		String reason = "No value for JSON path " + this.expression;, +++ b/spring-test-mvc/src/main/java/org/springframework/test/util/XpathExpectationsHelper.java, +import static org.springframework.test.util.AssertionErrors.*;, +import static org.springframework.test.util.MatcherAssertionErrors.*;, +		assertThat("XPath " + this.expression, node, matcher);, +		Document document = parseXmlString(content);, +		Node node = evaluateXpath(document, XPathConstants.NODE, Node.class);, +		assertTrue("XPath " + this.expression + " does not exist", node != null);, +		Document document = parseXmlString(content);, +		Node node = evaluateXpath(document, XPathConstants.NODE, Node.class);, +		assertTrue("XPath " + this.expression + " exists", node == null);, +		assertThat("nodeCount for XPath " + this.expression, nodeList.getLength(), matcher);, +		Document document = parseXmlString(content);]