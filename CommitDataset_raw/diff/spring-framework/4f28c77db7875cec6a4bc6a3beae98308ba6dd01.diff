[+++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/ControllerAdvice.java, +import java.lang.annotation.Annotation;, +	 * {@code @ControllerAdvice("org.my.pkg")} is equivalent to, +	 *, +	 * Controllers that belong to those base packages will be included, e.g.:, +	 * {@code @ControllerAdvice(basePackages="org.my.pkg")} or, +	 * <p>Also consider using {@link #basePackageClasses()} as a type-safe, +	 * alternative to String-based package names., +	 *, +	 * Type-safe alternative to {@link #value()} for specifying the packages, +	 * to select Controllers to be assisted by the {@code @ControllerAdvice}, +	 * annotated class., +	 *, +	 * <p>Consider creating a special no-op marker class or interface in each package, +	 * that serves no purpose other than being referenced by this attribute., +	 *, +	 * @since 4.0, +	 */, +	Class<?>[] basePackageClasses() default {};, +, +	/**, +	 *, +	Class<? extends Annotation>[] annotations() default {};, +, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/ControllerAdvice.java, +import java.lang.annotation.Annotation;, +	 * {@code @ControllerAdvice("org.my.pkg")} is equivalent to, +	 *, +	 * Controllers that belong to those base packages will be included, e.g.:, +	 * {@code @ControllerAdvice(basePackages="org.my.pkg")} or, +	 * <p>Also consider using {@link #basePackageClasses()} as a type-safe, +	 * alternative to String-based package names., +	 *, +	 * Type-safe alternative to {@link #value()} for specifying the packages, +	 * to select Controllers to be assisted by the {@code @ControllerAdvice}, +	 * annotated class., +	 *, +	 * <p>Consider creating a special no-op marker class or interface in each package, +	 * that serves no purpose other than being referenced by this attribute., +	 *, +	 * @since 4.0, +	 */, +	Class<?>[] basePackageClasses() default {};, +, +	/**, +	 *, +	Class<? extends Annotation>[] annotations() default {};, +, +++ b/spring-web/src/main/java/org/springframework/web/method/ControllerAdviceBean.java, +	private static final Log logger = LogFactory.getLog(ControllerAdviceBean.class);, +, +	private final List<Class<? extends Annotation>> annotations = new ArrayList<Class<? extends Annotation>>();, +, +, +, +		ControllerAdvice annotation = AnnotationUtils.findAnnotation(beanType,ControllerAdvice.class);, +		Assert.notNull(annotation, "BeanType [" + beanType.getName() + "] is not annotated @ControllerAdvice");, +, +		this.basePackages.addAll(initBasePackagesFromBeanType(beanType, annotation));, +		this.annotations.addAll(Arrays.asList(annotation.annotations()));, +		this.assignableTypes.addAll(Arrays.asList(annotation.assignableTypes()));, +	private static List<Package> initBasePackagesFromBeanType(Class<?> beanType, ControllerAdvice annotation) {, +		List<String> basePackageNames = new ArrayList<String>();, +		basePackageNames.addAll(Arrays.asList(annotation.value()));, +		basePackageNames.addAll(Arrays.asList(annotation.basePackages()));, +		for (String pkgName : basePackageNames) {, +				Package pkg = Package.getPackage(pkgName);, +				if(pkg != null) {, +					basePackages.add(pkg);, +				}, +				else {, +					logger.warn("Package [" + pkgName + "] was not found, see [" + beanType.getName() + "]");, +		for (Class<?> markerClass : annotation.basePackageClasses()) {, +			}, +			else {, +, +		Class<? extends Object> beanType = bean.getClass();, +		ControllerAdvice annotation = AnnotationUtils.findAnnotation(beanType,ControllerAdvice.class);, +		Assert.notNull(annotation, "BeanType [" + beanType.getName() + "] is not annotated @ControllerAdvice");, +, +		this.basePackages.addAll(initBasePackagesFromBeanType(beanType, annotation));, +		this.annotations.addAll(Arrays.asList(annotation.annotations()));, +		this.assignableTypes.addAll(Arrays.asList(annotation.assignableTypes()));, +	 * Checks whether the given bean type should be assisted by this, +	 * {@code @ControllerAdvice} instance., +	 * @param beanType the type of the bean to check, +		if(!hasSelectors()) {, +			for (Class<?> clazz : this.assignableTypes) {, +				if(ClassUtils.isAssignable(clazz, beanType)) {, +			for (Class<? extends Annotation> annotationClass : this.annotations) {, +			String packageName = beanType.getPackage().getName();, +			for (Package basePackage : this.basePackages) {, +				if(packageName.startsWith(basePackage.getName())) {, +	private boolean hasSelectors() {, +		return (!this.basePackages.isEmpty() || !this.annotations.isEmpty() || !this.assignableTypes.isEmpty());, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/ControllerAdvice.java, +import java.lang.annotation.Annotation;, +	 * {@code @ControllerAdvice("org.my.pkg")} is equivalent to, +	 *, +	 * Controllers that belong to those base packages will be included, e.g.:]