[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/BeanDefinition.java, + * Copyright 2002-2013 the original author or authors., +	 * provides the frameworks as well as tools with an indication of, +	 * the role and importance of a particular {@code BeanDefinition}., +	 * @see #ROLE_INFRASTRUCTURE, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/BeanDefinition.java, + * Copyright 2002-2013 the original author or authors., +	 * provides the frameworks as well as tools with an indication of, +	 * the role and importance of a particular {@code BeanDefinition}., +	 * @see #ROLE_INFRASTRUCTURE, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			BeanDefinition oldBeanDefinition = this.beanDefinitionMap.get(beanName);, +				else if (oldBeanDefinition.getRole() < beanDefinition.getRole()) {, +					// e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE, +					if (this.logger.isWarnEnabled()) {, +						this.logger.warn("Overriding user-defined bean definition for bean '" + beanName +, +								" with a framework-generated bean definition ': replacing [" +, +								oldBeanDefinition + "] with [" + beanDefinition + "]");, +					}, +				}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/BeanDefinition.java, + * Copyright 2002-2013 the original author or authors., +	 * provides the frameworks as well as tools with an indication of, +	 * the role and importance of a particular {@code BeanDefinition}., +	 * @see #ROLE_INFRASTRUCTURE, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			BeanDefinition oldBeanDefinition = this.beanDefinitionMap.get(beanName);, +				else if (oldBeanDefinition.getRole() < beanDefinition.getRole()) {, +					// e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE, +					if (this.logger.isWarnEnabled()) {, +						this.logger.warn("Overriding user-defined bean definition for bean '" + beanName +, +								" with a framework-generated bean definition ': replacing [" +, +								oldBeanDefinition + "] with [" + beanDefinition + "]");, +					}, +				}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +	 * Read a particular {@link ConfigurationClass}, registering bean definitions, +	 * for the class itself and all of its {@link Bean} methods., +, +		if (StringUtils.hasLength(configClass.getBeanName()) && this.registry.containsBeanDefinition(configClass.getBeanName())) {, +		// Consider name and any aliases, +		// Has this  effectively been overridden before (e.g. via XML)?, +		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {, +		// Consider scoping, +		// Replace the original bean definition with the target one, if necessary, +			logger.debug(String.format("Registering bean definition for @Bean method %s.%s()",, +					configClass.getMetadata().getClassName(), beanName));, +		this.registry.registerBeanDefinition(beanName, beanDefToRegister);, +	protected boolean isOverriddenByExistingDefinition(BeanMethod beanMethod, String beanName) {, +		if (!this.registry.containsBeanDefinition(beanName)) {, +			return false;, +		}, +		BeanDefinition existingBeanDef = this.registry.getBeanDefinition(beanName);, +, +		// Is the existing bean definition one that was created from a configuration class?, +		// -> allow the current bean method to override, since both are at second-pass level, +		if (existingBeanDef instanceof ConfigurationClassBeanDefinition) {, +			return false;, +		}, +, +		// Has the existing bean definition bean marked as a framework-generated bean?, +		// -> allow the current bean method to override it, since it is application-level, +		if (existingBeanDef.getRole() > BeanDefinition.ROLE_APPLICATION) {, +			return false;, +		}, +, +		// At this point, it's a top-level override (probably XML), just having been parsed, +		// before configuration class processing kicks in..., +		if (logger.isInfoEnabled()) {, +			logger.info(String.format("Skipping bean definition for %s: a definition for bean '%s' " +, +					"already exists. This top-level bean definition is considered as an override.",, +					beanMethod, beanName));, +		}, +		return true;, +	}, +	private void loadBeanDefinitionsFromRegistrars(AnnotationMetadata importingClassMetadata,, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/BeanDefinition.java, + * Copyright 2002-2013 the original author or authors., +	 * provides the frameworks as well as tools with an indication of, +	 * the role and importance of a particular {@code BeanDefinition}., +	 * @see #ROLE_INFRASTRUCTURE, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			BeanDefinition oldBeanDefinition = this.beanDefinitionMap.get(beanName);, +				else if (oldBeanDefinition.getRole() < beanDefinition.getRole()) {, +					// e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE, +					if (this.logger.isWarnEnabled()) {, +						this.logger.warn("Overriding user-defined bean definition for bean '" + beanName +, +								" with a framework-generated bean definition ': replacing [" +, +								oldBeanDefinition + "] with [" + beanDefinition + "]");, +					}, +				}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +	 * Read a particular {@link ConfigurationClass}, registering bean definitions, +	 * for the class itself and all of its {@link Bean} methods., +, +		if (StringUtils.hasLength(configClass.getBeanName()) && this.registry.containsBeanDefinition(configClass.getBeanName())) {, +		// Consider name and any aliases, +		// Has this  effectively been overridden before (e.g. via XML)?, +		if (isOverriddenByExistingDefinition(beanMethod, beanName)) {]