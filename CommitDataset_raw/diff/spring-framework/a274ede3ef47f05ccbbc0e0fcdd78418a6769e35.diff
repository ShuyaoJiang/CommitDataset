[+++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, + * @author Rossen Stoyanchev, +	HierarchicalUriComponents(String scheme, String userInfo, String host, String port,, +			PathComponent path, MultiValueMap<String, String> queryParams,, +			String fragment, boolean encoded, boolean verify) {, +	 * Encode all URI components using their specific encoding rules and return, +	 * the result as a new {@code UriComponents} instance., +		Assert.hasLength(encoding, "Encoding must not be empty");, +		String schemeTo = encodeUriComponent(getScheme(), encoding, Type.SCHEME);, +		String userInfoTo = encodeUriComponent(this.userInfo, encoding, Type.USER_INFO);, +		String hostTo = encodeUriComponent(this.host, encoding, getHostType());, +		PathComponent pathTo = this.path.encode(encoding);, +		MultiValueMap<String, String> paramsTo = encodeQueryParams(encoding);, +		String fragmentTo = encodeUriComponent(this.getFragment(), encoding, Type.FRAGMENT);, +		return new HierarchicalUriComponents(schemeTo, userInfoTo, hostTo, this.port,, +				pathTo, paramsTo, fragmentTo, true, false);, +	}, +	private MultiValueMap<String, String> encodeQueryParams(String encoding) throws UnsupportedEncodingException {, +		int size = this.queryParams.size();, +		MultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>(size);, +			String name = encodeUriComponent(entry.getKey(), encoding, Type.QUERY_PARAM);, +			List<String> values = new ArrayList<String>(entry.getValue().size());, +				values.add(encodeUriComponent(value, encoding, Type.QUERY_PARAM));, +			result.put(name, values);, +		return result;, +	 * Encode the given source into an encoded String using the rules specified, +	static String encodeUriComponent(String source, String encoding, Type type), +			throws UnsupportedEncodingException {, +, +						throw new IllegalArgumentException("Invalid encoded sequence \"" +, +								source.substring(i) + "\"");, +					throw new IllegalArgumentException("Invalid encoded sequence \"" +, +							source.substring(i) + "\"");, +				throw new IllegalArgumentException("Invalid character '" + ch + "' for " +, +						type.name() + " in \"" + source + "\"");, +, +		String schemeTo = expandUriComponent(getScheme(), uriVariables);, +		String userInfoTo = expandUriComponent(this.userInfo, uriVariables);, +		String hostTo = expandUriComponent(this.host, uriVariables);, +		String portTo = expandUriComponent(this.port, uriVariables);, +		PathComponent pathTo = this.path.expand(uriVariables);, +		MultiValueMap<String, String> paramsTo = expandQueryParams(uriVariables);, +		String fragmentTo = expandUriComponent(this.getFragment(), uriVariables);, +, +		return new HierarchicalUriComponents(schemeTo, userInfoTo, hostTo, portTo,, +				pathTo, paramsTo, fragmentTo, false, false);, +	}, +, +	private MultiValueMap<String, String> expandQueryParams(UriTemplateVariables variables) {, +		int size = this.queryParams.size();, +		MultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>(size);, +			String name = expandUriComponent(entry.getKey(), variables);, +			List<String> values = new ArrayList<String>(entry.getValue().size());, +				values.add(expandUriComponent(value, variables));, +			result.put(name, values);, +		return result;, +	enum Type {]