[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/RequestContextUtils.java, + * @author Rossen Stoyanchev, +	 * @return a read-only Map, or {@code null} if not found, +	 * @param request the current request, +	 * @return a {@link FlashMap} instance (never {@code null} within a DispatcherServlet request), +	 * @return a {@link FlashMapManager} instance (never {@code null} within a DispatcherServlet request), +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/RequestContextUtils.java, + * @author Rossen Stoyanchev, +	 * @return a read-only Map, or {@code null} if not found, +	 * @param request the current request, +	 * @return a {@link FlashMap} instance (never {@code null} within a DispatcherServlet request), +	 * @return a {@link FlashMapManager} instance (never {@code null} within a DispatcherServlet request), +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/RedirectView.java, + * Copyright 2002-2013 the original author or authors., +, +	protected void renderMergedOutputModel(Map<String, Object> model, HttpServletRequest request,, +			HttpServletResponse response) throws IOException {, +			if (flashMapManager == null) {, +				throw new IllegalStateException("FlashMapManager not found despite output FlashMap having been set");, +			}, +		}, +		Matcher matcher = URI_TEMPLATE_VARIABLE_PATTERN.matcher(targetUrl);, +		while (matcher.find()) {, +			String name = matcher.group(1);, +			Object value = (model.containsKey(name) ? model.remove(name) : currentUriVariables.get(name));, +			if (value == null) {, +				throw new IllegalArgumentException("Model has no value for key '" + name + "'");, +			}, +			result.append(targetUrl.substring(endLastMatch, matcher.start()));, +			endLastMatch = matcher.end();, +	protected void sendRedirect(HttpServletRequest request, HttpServletResponse response,, +			String targetUrl, boolean http10Compatible) throws IOException {]