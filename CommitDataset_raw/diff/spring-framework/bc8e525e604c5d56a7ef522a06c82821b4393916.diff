[+++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +			ReactiveAdapterRegistry.getSharedInstance();, +++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +			ReactiveAdapterRegistry.getSharedInstance();, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import static org.springframework.core.ReactiveTypeDescriptor.multiValue;, +import static org.springframework.core.ReactiveTypeDescriptor.noValue;, +import static org.springframework.core.ReactiveTypeDescriptor.singleOptionalValue;, +import static org.springframework.core.ReactiveTypeDescriptor.singleRequiredValue;, +	@Nullable, +	private static volatile ReactiveAdapterRegistry sharedInstance;, +, +	 * Return a shared default {@code ReactiveAdapterRegistry} instance, lazily, +	 * building it once needed., +	 * <p><b>NOTE:</b> We highly recommend passing a long-lived, pre-configured, +	 * {@code ReactiveAdapterRegistry} instance for customization purposes., +	 * This accessor is only meant as a fallback for code paths that want to, +	 * fall back on a default instance if one isn't provided., +	 * @return the shared {@code ReactiveAdapterRegistry} instance (never {@code null}), +	 * @since 5.0.2, +	 */, +	public static ReactiveAdapterRegistry getSharedInstance() {, +		ReactiveAdapterRegistry ar = sharedInstance;, +		if (ar == null) {, +			synchronized (ReactiveAdapterRegistry.class) {, +				ar = sharedInstance;, +				if (ar == null) {, +					ar = new ReactiveAdapterRegistry();, +					sharedInstance = ar;, +				}, +			}, +		}, +		return ar;, +	}, +, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +			ReactiveAdapterRegistry.getSharedInstance();, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import static org.springframework.core.ReactiveTypeDescriptor.multiValue;, +import static org.springframework.core.ReactiveTypeDescriptor.noValue;, +import static org.springframework.core.ReactiveTypeDescriptor.singleOptionalValue;, +import static org.springframework.core.ReactiveTypeDescriptor.singleRequiredValue;, +	@Nullable, +	private static volatile ReactiveAdapterRegistry sharedInstance;, +, +	 * Return a shared default {@code ReactiveAdapterRegistry} instance, lazily, +	 * building it once needed., +	 * <p><b>NOTE:</b> We highly recommend passing a long-lived, pre-configured, +	 * {@code ReactiveAdapterRegistry} instance for customization purposes., +	 * This accessor is only meant as a fallback for code paths that want to, +	 * fall back on a default instance if one isn't provided., +	 * @return the shared {@code ReactiveAdapterRegistry} instance (never {@code null}), +	 * @since 5.0.2, +	 */, +	public static ReactiveAdapterRegistry getSharedInstance() {, +		ReactiveAdapterRegistry ar = sharedInstance;, +		if (ar == null) {, +			synchronized (ReactiveAdapterRegistry.class) {, +				ar = sharedInstance;, +				if (ar == null) {, +					ar = new ReactiveAdapterRegistry();, +					sharedInstance = ar;, +				}, +			}, +		}, +		return ar;, +	}, +, +, +	/**, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/ReactiveAdapterRegistryTests.java, +	private final ReactiveAdapterRegistry registry = ReactiveAdapterRegistry.getSharedInstance();, +++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +			ReactiveAdapterRegistry.getSharedInstance();, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import static org.springframework.core.ReactiveTypeDescriptor.multiValue;, +import static org.springframework.core.ReactiveTypeDescriptor.noValue;, +import static org.springframework.core.ReactiveTypeDescriptor.singleOptionalValue;, +import static org.springframework.core.ReactiveTypeDescriptor.singleRequiredValue;, +	@Nullable, +	private static volatile ReactiveAdapterRegistry sharedInstance;, +, +	 * Return a shared default {@code ReactiveAdapterRegistry} instance, lazily, +	 * building it once needed., +	 * <p><b>NOTE:</b> We highly recommend passing a long-lived, pre-configured, +	 * {@code ReactiveAdapterRegistry} instance for customization purposes., +	 * This accessor is only meant as a fallback for code paths that want to, +	 * fall back on a default instance if one isn't provided., +	 * @return the shared {@code ReactiveAdapterRegistry} instance (never {@code null}), +	 * @since 5.0.2, +	 */, +	public static ReactiveAdapterRegistry getSharedInstance() {, +		ReactiveAdapterRegistry ar = sharedInstance;, +		if (ar == null) {, +			synchronized (ReactiveAdapterRegistry.class) {, +				ar = sharedInstance;, +				if (ar == null) {, +					ar = new ReactiveAdapterRegistry();]