[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, + * Copyright 2002-2015 the original author or authors., +import java.util.Map;, +import org.springframework.messaging.handler.annotation.support.DestinationVariableMethodArgumentResolver;, +import org.springframework.util.PropertyPlaceholderHelper;, +import org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver;, +	private PropertyPlaceholderHelper placeholderHelper = new PropertyPlaceholderHelper("{", "}", null, false);, +, +		PlaceholderResolver varResolver = initVarResolver(headers);, +, +				destination = this.placeholderHelper.replacePlaceholders(destination, varResolver);, +				destination = this.placeholderHelper.replacePlaceholders(destination, varResolver);, +	@SuppressWarnings("unchecked"), +	private PlaceholderResolver initVarResolver(MessageHeaders headers) {, +		String name = DestinationVariableMethodArgumentResolver.DESTINATION_TEMPLATE_VARIABLES_HEADER;, +		Map<String, String> vars = (Map<String, String>) headers.get(name);, +		return new DestinationVariablePlaceholderResolver(vars);, +	}, +, +	private static class DestinationVariablePlaceholderResolver implements PlaceholderResolver {, +, +		private final Map<String, String> vars;, +, +, +		public DestinationVariablePlaceholderResolver(Map<String, String> vars) {, +			this.vars = vars;, +		}, +, +		@Override, +		public String resolvePlaceholder(String placeholderName) {, +			return (this.vars != null ? this.vars.get(placeholderName) : null);, +		}, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, + * Copyright 2002-2015 the original author or authors., +import java.util.Map;, +import org.springframework.messaging.handler.annotation.support.DestinationVariableMethodArgumentResolver;, +import org.springframework.util.PropertyPlaceholderHelper;, +import org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver;, +	private PropertyPlaceholderHelper placeholderHelper = new PropertyPlaceholderHelper("{", "}", null, false);, +, +		PlaceholderResolver varResolver = initVarResolver(headers);, +, +				destination = this.placeholderHelper.replacePlaceholders(destination, varResolver);, +				destination = this.placeholderHelper.replacePlaceholders(destination, varResolver);, +	@SuppressWarnings("unchecked"), +	private PlaceholderResolver initVarResolver(MessageHeaders headers) {, +		String name = DestinationVariableMethodArgumentResolver.DESTINATION_TEMPLATE_VARIABLES_HEADER;, +		Map<String, String> vars = (Map<String, String>) headers.get(name);, +		return new DestinationVariablePlaceholderResolver(vars);, +	}, +, +	private static class DestinationVariablePlaceholderResolver implements PlaceholderResolver {, +, +		private final Map<String, String> vars;, +, +, +		public DestinationVariablePlaceholderResolver(Map<String, String> vars) {, +			this.vars = vars;, +		}, +, +		@Override, +		public String resolvePlaceholder(String placeholderName) {, +			return (this.vars != null ? this.vars.get(placeholderName) : null);, +		}, +	}, +, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandlerTests.java, + * Copyright 2002-2015 the original author or authors., +import static org.junit.Assert.*;, +import static org.mockito.BDDMockito.*;, +import static org.springframework.messaging.handler.annotation.support.DestinationVariableMethodArgumentResolver.DESTINATION_TEMPLATE_VARIABLES_HEADER;, +import static org.springframework.messaging.support.MessageHeaderAccessor.*;, +, +import java.util.LinkedHashMap;, +import java.util.Map;, +, +import org.springframework.messaging.handler.annotation.support.DestinationVariableMethodArgumentResolver;, +	private static final MimeType MIME_TYPE = new MimeType("text", "plain", Charset.forName("UTF-8"));, +	private MethodParameter sendToWithPlaceholdersType;, +		method = this.getClass().getDeclaredMethod("handleAndSendToWithPlaceholders");, +		this.sendToWithPlaceholdersType = new MethodParameter(method, -1);, +, +		SimpMessageHeaderAccessor accessor = getCapturedAccessor(0);, +		assertEquals("sess1", accessor.getSessionId());, +		assertEquals("/topic/dest", accessor.getDestination());, +		assertEquals(MIME_TYPE, accessor.getContentType());, +		assertNull("Subscription id should not be copied", accessor.getSubscriptionId());, +		SimpMessageHeaderAccessor accessor = getCapturedAccessor(0);, +		assertEquals(sessionId, accessor.getSessionId());, +		assertEquals("/dest1", accessor.getDestination());, +		assertEquals(MIME_TYPE, accessor.getContentType());, +		assertNull("Subscription id should not be copied", accessor.getSubscriptionId());, +		accessor = getCapturedAccessor(1);, +		assertEquals(sessionId, accessor.getSessionId());, +		assertEquals("/dest2", accessor.getDestination());, +		assertEquals(MIME_TYPE, accessor.getContentType());, +		assertNull("Subscription id should not be copied", accessor.getSubscriptionId());, +		SimpMessageHeaderAccessor accessor = getCapturedAccessor(0);]