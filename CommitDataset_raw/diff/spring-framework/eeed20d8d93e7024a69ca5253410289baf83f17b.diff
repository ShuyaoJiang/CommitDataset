[+++ b/spring-beans/src/test/java/org/springframework/beans/factory/config/PropertyResourceConfigurerTests.java, + * Copyright 2002-2019 the original author or authors., +@SuppressWarnings("deprecation"), +++ b/spring-beans/src/test/java/org/springframework/beans/factory/config/PropertyResourceConfigurerTests.java, + * Copyright 2002-2019 the original author or authors., +@SuppressWarnings("deprecation"), +++ b/src/docs/asciidoc/core/core-appendix.adoc, +specified properties file (as a <<core.adoc#resources, Spring resource location>>). This element, +is a convenience mechanism that sets up a <<core.adoc#beans-factory-placeholderconfigurer,, +`PropertySourcesPlaceholderConfigurer`>> for you. If you need more control over the specific, +`PropertySourcesPlaceholderConfigurer` setup, you can explicitly define it as a bean yourself., +++ b/spring-beans/src/test/java/org/springframework/beans/factory/config/PropertyResourceConfigurerTests.java, + * Copyright 2002-2019 the original author or authors., +@SuppressWarnings("deprecation"), +++ b/src/docs/asciidoc/core/core-appendix.adoc, +specified properties file (as a <<core.adoc#resources, Spring resource location>>). This element, +is a convenience mechanism that sets up a <<core.adoc#beans-factory-placeholderconfigurer,, +`PropertySourcesPlaceholderConfigurer`>> for you. If you need more control over the specific, +`PropertySourcesPlaceholderConfigurer` setup, you can explicitly define it as a bean yourself., +++ b/src/docs/asciidoc/languages/kotlin.adoc, +, +Spring Framework comes with a Kotlin router DSL available in two flavors:, +These DSL let you use the <<web-reactive#webflux-fn, WebFlux functional API>> to write clean, +and idiomatic Kotlin code to build a `RouterFunction` instance as the following example shows:, +through an `if` expression, a `for` loop, or any other Kotlin constructs. That can be useful, +when you need to register routes depending on dynamic data (for example, from a database)., +Coroutines extensions use `await` prefix or `AndAwait` suffix, and most are using similar, +names to their reactive counterparts, except `exchange` in `WebClient.RequestHeadersSpec`, +which translates to `awaitResponse`., +A Kotlin DSL is provided via `MockMvc` Kotlin extensions in order to provide a more, +idiomatic Kotlin API and to allow better discoverability (no usage of static methods).]