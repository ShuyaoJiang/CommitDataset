[+++ b/build.gradle, +	ext.activationApiVersion   = "1.1.1", +	ext.aspectjVersion         = "1.9.0.BETA-4", +	ext.ehcache3Version        = "3.1.1", +	ext.elApiVersion           = "3.0.1-b04", +	ext.ejbApiVersion          = "3.2", +	ext.freemarkerVersion      = "2.3.25-incubating", +	ext.jaxbVersion            = "2.2.11", +	ext.log4jVersion           = '2.6.2', +	ext.okhttp3Version         = "3.4.1", +	ext.reactivestreamsVersion = "1.0.0", +	ext.rxjavaVersion          = '1.1.6', +		maven { url "https://repo.spring.io/milestone" }, +		maven { url 'https://oss.jfrog.org/libs-snapshot' }  // RxNetty 0.5.x snapshots, +		optional("org.reactivestreams:reactive-streams:${reactivestreamsVersion}"), +		optional "io.reactivex:rxjava:${rxjavaVersion}", +		testCompile("javax.xml.bind:jaxb-api:${jaxbVersion}"), +		optional("javax.el:javax.el-api:${elApiVersion}"), +		optional("javax.ejb:javax.ejb-api:${ejbApiVersion}"), +		optional("javax.enterprise.concurrent:javax.enterprise.concurrent-api:1.0"), +		testCompile("javax.el:javax.el-api:${elApiVersion}"), +		testCompile("org.glassfish:javax.el:3.0.1-b08"), +		testRuntime("javax.xml.bind:jaxb-api:${jaxbVersion}"), +	}, +}, +, +project("spring-oxm") {, +	description = "Spring Object/XML Marshalling", +	apply from: "oxm.gradle", +, +	compileTestJava {, +		// necessary to avoid java.lang.VerifyError on jibx compilation, +		// see http://jira.codehaus.org/browse/JIBX-465, +		sourceCompatibility = 1.8, +		targetCompatibility = 1.8, +	}, +, +	dependencies {, +		compile(project(":spring-beans")), +		compile(project(":spring-core")), +		optional("org.codehaus.castor:castor-xml:1.4.1")  {, +			exclude group: 'stax', module: 'stax-api', +			exclude group: "org.springframework", module: "spring-context", +		}, +		optional("com.thoughtworks.xstream:xstream:${xstreamVersion}") {, +			exclude group: 'xpp3', module: 'xpp3_min', +			exclude group: 'xmlpull', module: 'xmlpull', +		}, +		optional("org.jibx:jibx-run:1.2.6"), +		testCompile(project(":spring-context")), +		testCompile("xmlunit:xmlunit:${xmlunitVersion}"), +		testCompile("xpp3:xpp3:1.1.4c"), +		testCompile("org.codehaus.jettison:jettison:1.3.7") {, +			exclude group: 'stax', module: 'stax-api', +		}, +		if (compileTestJava.enabled) {, +			testCompile(files(genCastor.classesDir).builtBy(genCastor)), +			testCompile(files(genJaxb.classesDir).builtBy(genJaxb)), +		}, +		testRuntime("xerces:xercesImpl:2.11.0")  // for Castor, +		testRuntime("javax.xml.bind:jaxb-api:${jaxbVersion}"), +		testRuntime("com.sun.xml.bind:jaxb-core:${jaxbVersion}"), +		testRuntime("com.sun.xml.bind:jaxb-impl:${jaxbVersion}"), +		testRuntime("javax.activation:activation:${activationApiVersion}"), +		testRuntime("javax.xml.bind:jaxb-api:${jaxbVersion}"), +		testRuntime("com.sun.xml.bind:jaxb-core:${jaxbVersion}"), +		testRuntime("com.sun.xml.bind:jaxb-impl:${jaxbVersion}"), +		testRuntime("javax.activation:activation:${activationApiVersion}"), +		optional("javax.ejb:javax.ejb-api:${ejbApiVersion}"), +		testRuntime("javax.activation:activation:${activationApiVersion}"), +		optional("javax.el:javax.el-api:${elApiVersion}"), +		optional("org.reactivestreams:reactive-streams:${reactivestreamsVersion}"), +		optional("io.reactivex:rxjava:${rxjavaVersion}"), +		optional("io.undertow:undertow-core:${undertowVersion}"), +		testRuntime("javax.xml.ws:jaxws-api:2.2.11"), +		testRuntime("javax.xml.bind:jaxb-api:${jaxbVersion}"), +		testRuntime("com.sun.xml.bind:jaxb-core:${jaxbVersion}"), +		testRuntime("com.sun.xml.bind:jaxb-impl:${jaxbVersion}"), +		testRuntime("javax.activation:activation:${activationApiVersion}"), +	}, +}, +project("spring-web-reactive") {, +	description = "Spring Web Reactive", +, +	dependencies {, +		compile(project(":spring-core")), +		compile(project(":spring-web")), +		compile "org.reactivestreams:reactive-streams:${reactivestreamsVersion}", +		compile "io.projectreactor:reactor-core:${reactorCoreVersion}", +		optional(project(":spring-context-support"))  // for FreeMarker support, +		provided "javax.servlet:javax.servlet-api:${servletVersion}", +		optional("com.fasterxml.jackson.core:jackson-databind:${jackson2Version}"), +		optional("org.freemarker:freemarker:${freemarkerVersion}"), +		optional "org.apache.httpcomponents:httpclient:4.5.1" // Needed to run Javadoc without error, +		testCompile("org.apache.tomcat:tomcat-util:${tomcatVersion}"), +		testCompile("org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}"), +		testCompile("org.eclipse.jetty:jetty-server:${jettyVersion}"), +		testCompile("org.eclipse.jetty:jetty-servlet:${jettyVersion}"), +		testCompile("io.projectreactor:reactor-netty:${reactorNettyVersion}"), +		testCompile("io.reactivex:rxnetty-http:0.5.2-SNAPSHOT") {]