[+++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DataBuffer.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.core.io.buffer;, +, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.nio.ByteBuffer;, +, +/**, + * Basic abstraction over byte buffers., + *, + * <p>Mainly for internal use within the framework; consider Netty's, + * {@link io.netty.buffer.ByteBuf} for a more comprehensive byte buffer., + *, + * @author Arjen Poutsma, + */, +public interface DataBuffer {, +, +	/**, +	 * Gets the byte at the specified index., +	 * @param index the index, +	 * @return the byte at the specified index, +	 * @throws IndexOutOfBoundsException if the given index is out of bounds, +	 */, +	byte get(int index);, +, +	/**, +	 * Returns the number of bytes that can be read from this data buffer., +	 * @return the readable byte count, +	 */, +	int readableByteCount();, +, +	/**, +	 * Reads a single byte from the current reading position of this data buffer., +	 * @return the byte at this buffer's current reading position, +	 */, +	byte read();, +, +	/**, +	 * Reads this buffer's data into the specified destination, starting at the current, +	 * reading position of this buffer., +	 *, +	 * @param destination the array into which the bytes are to be written, +	 * @return this buffer, +	 */, +	DataBuffer read(byte[] destination);, +, +	/**, +	 * Reads at most {@code length} bytes of this buffer into the specified destination,, +	 * starting at the current reading position of this buffer., +	 * @param destination the array into which the bytes are to be written, +	 * @param offset the index within {@code destination} of the first byte to be written, +	 * @param length the maximum number of bytes to be written in {@code destination}, +	 * @return this buffer, +	 */, +	DataBuffer read(byte[] destination, int offset, int length);, +, +	/**, +	 * Write a single byte into this buffer at the current writing position., +	 * @param b the byte to be written, +	 * @return this buffer, +	 */, +	DataBuffer write(byte b);, +, +	/**, +	 * Writes the given source into this buffer, startin at the current writing position, +	 * of this buffer., +	 * @param source the bytes to be written into this buffer, +	 * @return this buffer, +	 */, +	DataBuffer write(byte[] source);, +, +	/**, +	 * Writes at most {@code length} bytes of the given source into this buffer, starting, +	 * at the current writing position of this buffer., +	 * @param source the bytes to be written into this buffer, +	 * @param offset the index withing {@code source} to start writing from, +	 * @param length the maximum number of bytes to be written from {@code source}, +	 * @return this buffer, +	 */, +	DataBuffer write(byte[] source, int offset, int length);, +, +	/**, +	 * Writes one or more {@link DataBuffer} to this buffer, starting at the current, +	 * writing position.]