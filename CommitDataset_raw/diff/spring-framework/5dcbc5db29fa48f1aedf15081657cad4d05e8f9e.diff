[+++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistryTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, + * Test fixture for, + * {@link org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry}., +		MultiValueMap<String, String> actual = this.registry.findSubscriptions(createMessage(dest));, +		assertNotNull(actual);, +		assertEquals(0, actual.size());, +		actual = this.registry.findSubscriptions(createMessage(dest));, +		assertNotNull(actual);, +		assertEquals(0, actual.size());, +		actual = this.registry.findSubscriptions(createMessage(dest));, +		assertNotNull(actual);, +		assertEquals(0, actual.size());, +		MultiValueMap<String, String> actual = this.registry.findSubscriptions(createMessage(dest));, +		assertNotNull(actual);, +		assertEquals(Collections.singletonList(subsId), actual.get(sessId));, +		MultiValueMap<String, String> actual = this.registry.findSubscriptions(createMessage(dest));, +		assertNotNull(actual);, +		assertEquals(1, actual.size());, +		MultiValueMap<String, String> actual = this.registry.findSubscriptions(createMessage(dest));, +		assertNotNull(actual);, +		assertEquals(3, actual.size());, +		MultiValueMap<String, String> actual = this.registry.findSubscriptions(createMessage(dest));, +		assertNotNull(actual);, +		assertEquals(Collections.singletonList(subsId), actual.get(sessId));, +		String destNasdaqIbm = "/topic/PRICE.STOCK.NASDAQ.IBM";, +		Message<?> destNasdaqIbmMessage = createMessage(destNasdaqIbm);, +, +		this.registry.registerSubscription(subscribeMessage(sess1, subs2, destNasdaqIbm));, +		MultiValueMap<String, String> actual = this.registry.findSubscriptions(destNasdaqIbmMessage);, +, +		assertNotNull(actual);, +		this.registry.registerSubscription(subscribeMessage(sess2, subs1, destNasdaqIbm));, +		actual = this.registry.findSubscriptions(destNasdaqIbmMessage);, +, +		assertNotNull(actual);, +		assertEquals(Collections.singletonList(subs1), actual.get(sess2));, +		actual = this.registry.findSubscriptions(destNasdaqIbmMessage);, +, +		assertNotNull(actual);, +		assertEquals(Collections.singletonList(subs1), actual.get(sess2));, +		this.registry.registerSubscription(subscribeMessage(sess1, subs2, destNasdaqIbm));, +		actual = this.registry.findSubscriptions(destNasdaqIbmMessage);, +, +		assertNotNull(actual);, +		assertEquals(Collections.singletonList(subs1), actual.get(sess2));, +		actual = this.registry.findSubscriptions(destNasdaqIbmMessage);, +, +		assertNotNull(actual);, +		assertEquals(Collections.singletonList(subs1), actual.get(sess1));, +		assertEquals(Collections.singletonList(subs1), actual.get(sess2));, +		actual = this.registry.findSubscriptions(destNasdaqIbmMessage);, +, +		assertNotNull(actual);, +		assertEquals(Collections.singletonList(subs1), actual.get(sess2));, +		actual = this.registry.findSubscriptions(destNasdaqIbmMessage);, +, +		assertNotNull(actual);, +		this.registry.findSubscriptions(createMessage("/topic/PRICE.STOCK.NYSE.IBM"));, +		this.registry.findSubscriptions(createMessage("/topic/PRICE.STOCK.NASDAQ.GOOG"));, +		this.registry.findSubscriptions(createMessage("/topic/PRICE.STOCK.NASDAQ.IBM"));, +, +		Message<?> message = createMessage("/topic/PRICE.STOCK.NASDAQ.IBM");, +		assertNotNull(actual);, +		assertEquals(Collections.singletonList(subsId), actual.get(sessId));, +		message = createMessage("/topic/PRICE.STOCK.NASDAQ.MSFT");, +		assertNotNull(actual);, +		assertEquals(Collections.singletonList(subsId), actual.get(sessId));, +		message = createMessage("/topic/PRICE.STOCK.NASDAQ.VMW");, +		assertNotNull(actual);, +, +		assertNotNull(actual);, +		assertEquals(Collections.singletonList(subscriptionId), actual.get(sessionId));, +		actual = this.registry.findSubscriptions(createMessage(destination));, +		assertNotNull(actual);, +		assertEquals(0, actual.size());, +	}, +	// SPR-11931, +, +	@Test, +	public void registerSubscriptionTwiceAndUnregister() {, +, +		this.registry.registerSubscription(subscribeMessage("sess01", "subs01", "/foo"));, +		this.registry.registerSubscription(subscribeMessage("sess01", "subs02", "/foo"));, +		MultiValueMap<String, String> actual = this.registry.findSubscriptions(createMessage("/foo"));, +, +		assertNotNull(actual);, +		assertEquals("Expected 1 element", 1, actual.size());, +		assertEquals(Arrays.asList("subs01", "subs02"), actual.get("sess01"));, +, +		this.registry.unregisterSubscription(unsubscribeMessage("sess01", "subs01"));, +		actual = this.registry.findSubscriptions(createMessage("/foo"));, +, +		assertNotNull(actual);, +		assertEquals("Expected 1 element", 1, actual.size());, +		assertEquals(Collections.singletonList("subs02"), actual.get("sess01"));, +, +		this.registry.unregisterSubscription(unsubscribeMessage("sess01", "subs02"));, +		actual = this.registry.findSubscriptions(createMessage("/foo"));]