[+++ b/spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java, + * Copyright 2002-2017 the original author or authors., +import java.nio.channels.WritableByteChannel;, +	 * This implementation opens a FileChannel for the underlying file., +	 * @see java.nio.channels.FileChannel, +	 */, +	@Override, +	public WritableByteChannel writableChannel() throws IOException {, +		return new FileOutputStream(this.file).getChannel();, +	}, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java, + * Copyright 2002-2017 the original author or authors., +import java.nio.channels.WritableByteChannel;, +	 * This implementation opens a FileChannel for the underlying file., +	 * @see java.nio.channels.FileChannel, +	 */, +	@Override, +	public WritableByteChannel writableChannel() throws IOException {, +		return new FileOutputStream(this.file).getChannel();, +	}, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/io/PathResource.java, + * Copyright 2002-2017 the original author or authors., +import java.nio.channels.WritableByteChannel;, +	 * This implementation opens a Channel for the underlying file., +	 * @see Files#newByteChannel(Path, OpenOption...), +	 * This implementation opens a Channel for the underlying file., +	 * @see Files#newByteChannel(Path, OpenOption...), +	 */, +	@Override, +	public WritableByteChannel writableChannel() throws IOException {, +		return Files.newByteChannel(this.path, StandardOpenOption.WRITE);, +	}, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java, + * Copyright 2002-2017 the original author or authors., +import java.nio.channels.WritableByteChannel;, +	 * This implementation opens a FileChannel for the underlying file., +	 * @see java.nio.channels.FileChannel, +	 */, +	@Override, +	public WritableByteChannel writableChannel() throws IOException {, +		return new FileOutputStream(this.file).getChannel();, +	}, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/io/PathResource.java, + * Copyright 2002-2017 the original author or authors., +import java.nio.channels.WritableByteChannel;, +	 * This implementation opens a Channel for the underlying file., +	 * @see Files#newByteChannel(Path, OpenOption...), +	 * This implementation opens a Channel for the underlying file., +	 * @see Files#newByteChannel(Path, OpenOption...), +	 */, +	@Override, +	public WritableByteChannel writableChannel() throws IOException {, +		return Files.newByteChannel(this.path, StandardOpenOption.WRITE);, +	}, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/io/WritableResource.java, + * Copyright 2002-2017 the original author or authors., +import java.nio.channels.Channels;, +import java.nio.channels.WritableByteChannel;, +	/**, +	 * Return a {@link WritableByteChannel}., +	 * <p>It is expected that each call creates a <i>fresh</i> channel., +	 * <p>The default implementation returns {@link Channels#newChannel(OutputStream)}, +	 * with the result of {@link #getOutputStream()}., +	 * @return the byte channel for the underlying resource (must not be {@code null}), +	 * @throws java.io.FileNotFoundException if the underlying resource doesn't exist, +	 * @throws IOException if the content channel could not be opened, +	 * @since 5.0, +	 * @see #getOutputStream(), +	 */, +	default WritableByteChannel writableChannel() throws IOException {, +		return Channels.newChannel(getOutputStream());, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java, + * Copyright 2002-2017 the original author or authors., +import java.nio.channels.WritableByteChannel;, +	 * This implementation opens a FileChannel for the underlying file., +	 * @see java.nio.channels.FileChannel, +	 */, +	@Override, +	public WritableByteChannel writableChannel() throws IOException {, +		return new FileOutputStream(this.file).getChannel();, +	}, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/io/PathResource.java, + * Copyright 2002-2017 the original author or authors., +import java.nio.channels.WritableByteChannel;, +	 * This implementation opens a Channel for the underlying file., +	 * @see Files#newByteChannel(Path, OpenOption...)]