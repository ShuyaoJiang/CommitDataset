[+++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/ResponseEntityTests.java, + * Copyright 2002-2018 the original author or authors., +	public void entity() {, +	public void entityWithConsumer() {, +	public void entityList() {, +	public void entityMap() {, +	public void entityStream() {, +	public void postEntity() {, +			return Flux.interval(ofMillis(100)).take(50).onBackpressureBuffer(50), +					.map(index -> new Person("N" + index));, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/ResponseEntityTests.java, + * Copyright 2002-2018 the original author or authors., +	public void entity() {, +	public void entityWithConsumer() {, +	public void entityList() {, +	public void entityMap() {, +	public void entityStream() {, +	public void postEntity() {, +			return Flux.interval(ofMillis(100)).take(50).onBackpressureBuffer(50), +					.map(index -> new Person("N" + index));, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java, + * Copyright 2002-2018 the original author or authors., +import java.time.Duration;, +import reactor.core.publisher.Flux;, +, +	/**, +	 * Return an interval stream of with n number of ticks and buffer the, +	 * emissions to avoid back pressure failures (e.g. on slow CI server)., +	 */, +	public static Flux<Long> interval(Duration period, int count) {, +		return Flux.interval(period).take(count).onBackpressureBuffer(2);, +	}, +, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/ResponseEntityTests.java, + * Copyright 2002-2018 the original author or authors., +	public void entity() {, +	public void entityWithConsumer() {, +	public void entityList() {, +	public void entityMap() {, +	public void entityStream() {, +	public void postEntity() {, +			return Flux.interval(ofMillis(100)).take(50).onBackpressureBuffer(50), +					.map(index -> new Person("N" + index));, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java, + * Copyright 2002-2018 the original author or authors., +import java.time.Duration;, +import reactor.core.publisher.Flux;, +, +	/**, +	 * Return an interval stream of with n number of ticks and buffer the, +	 * emissions to avoid back pressure failures (e.g. on slow CI server)., +	 */, +	public static Flux<Long> interval(Duration period, int count) {, +		return Flux.interval(period).take(count).onBackpressureBuffer(2);, +	}, +, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/FlushingIntegrationTests.java, +	public void writeAndFlushWith() {, +				.verify(Duration.ofSeconds(10L));, +					.verify(Duration.ofSeconds(10L));, +				.verify(Duration.ofSeconds(10L));, +				Flux<Publisher<DataBuffer>> responseBody = interval(Duration.ofMillis(50), 2), +				return response.writeAndFlushWith(responseBody.concatWith(Flux.never()));, +						.map(value -> toDataBuffer(value + "\n", response.bufferFactory()));, +				return response.writeWith(responseBody.mergeWith(Flux.never()));, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/ResponseEntityTests.java, + * Copyright 2002-2018 the original author or authors., +	public void entity() {, +	public void entityWithConsumer() {, +	public void entityList() {, +	public void entityMap() {, +	public void entityStream() {, +	public void postEntity() {, +			return Flux.interval(ofMillis(100)).take(50).onBackpressureBuffer(50), +					.map(index -> new Person("N" + index));, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java, + * Copyright 2002-2018 the original author or authors., +import java.time.Duration;, +import reactor.core.publisher.Flux;, +, +	/**, +	 * Return an interval stream of with n number of ticks and buffer the, +	 * emissions to avoid back pressure failures (e.g. on slow CI server)., +	 */, +	public static Flux<Long> interval(Duration period, int count) {, +		return Flux.interval(period).take(count).onBackpressureBuffer(2);, +	}, +, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/FlushingIntegrationTests.java, +	public void writeAndFlushWith() {, +				.verify(Duration.ofSeconds(10L));, +					.verify(Duration.ofSeconds(10L));, +				.verify(Duration.ofSeconds(10L));, +				Flux<Publisher<DataBuffer>> responseBody = interval(Duration.ofMillis(50), 2), +				return response.writeAndFlushWith(responseBody.concatWith(Flux.never()));, +						.map(value -> toDataBuffer(value + "\n", response.bufferFactory()));, +				return response.writeWith(responseBody.mergeWith(Flux.never()));, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/SseHandlerFunctionIntegrationTests.java, + * Copyright 2002-2018 the original author or authors., +import static org.springframework.http.MediaType.*;]