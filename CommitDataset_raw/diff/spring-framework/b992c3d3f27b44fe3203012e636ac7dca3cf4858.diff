[+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +import java.io.Serializable;, +, +public class HttpHeaders implements MultiValueMap<String, String>, Serializable {, +, +	private static final long serialVersionUID = -8578554704772377436L;, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +import java.io.Serializable;, +, +public class HttpHeaders implements MultiValueMap<String, String>, Serializable {, +, +	private static final long serialVersionUID = -8578554704772377436L;, +++ b/spring-web/src/main/java/org/springframework/web/client/DefaultResponseErrorHandler.java, +import org.springframework.http.HttpHeaders;, +		HttpHeaders headers = response.getHeaders();, +		MediaType contentType = headers.getContentType();, +				throw new HttpClientErrorException(statusCode, response.getStatusText(), headers, body, charset);, +				throw new HttpServerErrorException(statusCode, response.getStatusText(), headers, body, charset);, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +import java.io.Serializable;, +, +public class HttpHeaders implements MultiValueMap<String, String>, Serializable {, +, +	private static final long serialVersionUID = -8578554704772377436L;, +++ b/spring-web/src/main/java/org/springframework/web/client/DefaultResponseErrorHandler.java, +import org.springframework.http.HttpHeaders;, +		HttpHeaders headers = response.getHeaders();, +		MediaType contentType = headers.getContentType();, +				throw new HttpClientErrorException(statusCode, response.getStatusText(), headers, body, charset);, +				throw new HttpServerErrorException(statusCode, response.getStatusText(), headers, body, charset);, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpClientErrorException.java, +import org.springframework.http.HttpHeaders;, +	private static final long serialVersionUID = 5177019431887513952L;, +	/**, +	 * Construct a new instance of {@code HttpClientErrorException} based on an, +	 * {@link HttpStatus}, status text, and response body content., +	 * @param statusCode the status code, +	 * @param statusText the status text, +	 * @param responseHeaders the response headers, may be {@code null}, +	 * @param responseBody the response body content, may be {@code null}, +	 * @param responseCharset the response body charset, may be {@code null}, +	 * @since 3.2, +	 */, +	public HttpClientErrorException(HttpStatus statusCode, String statusText,, +			HttpHeaders responseHeaders, byte[] responseBody, Charset responseCharset) {, +		super(statusCode, statusText, responseHeaders, responseBody, responseCharset);, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +import java.io.Serializable;, +, +public class HttpHeaders implements MultiValueMap<String, String>, Serializable {, +, +	private static final long serialVersionUID = -8578554704772377436L;, +++ b/spring-web/src/main/java/org/springframework/web/client/DefaultResponseErrorHandler.java, +import org.springframework.http.HttpHeaders;, +		HttpHeaders headers = response.getHeaders();, +		MediaType contentType = headers.getContentType();, +				throw new HttpClientErrorException(statusCode, response.getStatusText(), headers, body, charset);, +				throw new HttpServerErrorException(statusCode, response.getStatusText(), headers, body, charset);, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpClientErrorException.java, +import org.springframework.http.HttpHeaders;, +	private static final long serialVersionUID = 5177019431887513952L;, +	/**, +	 * Construct a new instance of {@code HttpClientErrorException} based on an, +	 * {@link HttpStatus}, status text, and response body content., +	 * @param statusCode the status code, +	 * @param statusText the status text, +	 * @param responseHeaders the response headers, may be {@code null}, +	 * @param responseBody the response body content, may be {@code null}, +	 * @param responseCharset the response body charset, may be {@code null}, +	 * @since 3.2, +	 */, +	public HttpClientErrorException(HttpStatus statusCode, String statusText,, +			HttpHeaders responseHeaders, byte[] responseBody, Charset responseCharset) {, +		super(statusCode, statusText, responseHeaders, responseBody, responseCharset);, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpServerErrorException.java, +import org.springframework.http.HttpHeaders;, +	private static final long serialVersionUID = -2915754006618138282L;, +	/**, +	 * Construct a new instance of {@code HttpServerErrorException} based on a, +	 * {@link HttpStatus}, status text, and response body content., +	 * @param statusCode the status code, +	 * @param statusText the status text, +	 * @param responseHeaders the response headers, may be {@code null}, +	 * @param responseBody the response body content, may be {@code null}, +	 * @param responseCharset the response body charset, may be {@code null}, +	 * @since 3.2, +	 */, +	public HttpServerErrorException(HttpStatus statusCode, String statusText,, +			HttpHeaders responseHeaders, byte[] responseBody, Charset responseCharset) {, +		super(statusCode, statusText, responseHeaders, responseBody, responseCharset);, +	}, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +import java.io.Serializable;, +, +public class HttpHeaders implements MultiValueMap<String, String>, Serializable {, +]