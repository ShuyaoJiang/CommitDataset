[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Projection.java, + * Copyright 2002-2010 the original author or authors., +			Map<?, ?> mapData = (Map<?, ?>) operand;, +			for (Map.Entry entry : mapData.entrySet()) {, +					result.add(this.children[0].getValueInternal(state).getValue());, +				}, +				finally {, +		}, +		else if (operand instanceof Collection || operandIsArray) {, +			Collection<?> data = (operand instanceof Collection ? (Collection<?>) operand :, +					Arrays.asList(ObjectUtils.toObjectArray(operand)));, +						arrayElementType = determineCommonType(arrayElementType, value.getClass());, +				}, +				finally {, +		else {, +			if (operand==null) {, +				if (this.nullSafe) {, +					return TypedValue.NULL;, +				}, +				else {, +					throw new SpelEvaluationException(getStartPosition(),, +							SpelMessage.PROJECTION_NOT_SUPPORTED_ON_TYPE, "null");, +				}, +			}, +			else {, +				throw new SpelEvaluationException(getStartPosition(),, +						SpelMessage.PROJECTION_NOT_SUPPORTED_ON_TYPE, operand.getClass().getName());, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Projection.java, + * Copyright 2002-2010 the original author or authors., +			Map<?, ?> mapData = (Map<?, ?>) operand;, +			for (Map.Entry entry : mapData.entrySet()) {, +					result.add(this.children[0].getValueInternal(state).getValue());, +				}, +				finally {, +		}, +		else if (operand instanceof Collection || operandIsArray) {, +			Collection<?> data = (operand instanceof Collection ? (Collection<?>) operand :, +					Arrays.asList(ObjectUtils.toObjectArray(operand)));, +						arrayElementType = determineCommonType(arrayElementType, value.getClass());, +				}, +				finally {, +		else {, +			if (operand==null) {, +				if (this.nullSafe) {, +					return TypedValue.NULL;, +				}, +				else {, +					throw new SpelEvaluationException(getStartPosition(),, +							SpelMessage.PROJECTION_NOT_SUPPORTED_ON_TYPE, "null");, +				}, +			}, +			else {, +				throw new SpelEvaluationException(getStartPosition(),, +						SpelMessage.PROJECTION_NOT_SUPPORTED_ON_TYPE, operand.getClass().getName());, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/SelectionAndProjectionTests.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +import static org.junit.Assert.*;, +, +	public void selectionWithSet() throws Exception {, +		Expression expression = new SpelExpressionParser().parseRaw("integers.?[#this<5]");, +		EvaluationContext context = new StandardEvaluationContext(new SetTestBean());, +		Object value = expression.getValue(context);, +		assertTrue(value instanceof List);, +		List list = (List) value;, +		assertEquals(5, list.size());, +		assertEquals(0, list.get(0));, +		assertEquals(1, list.get(1));, +		assertEquals(2, list.get(2));, +		assertEquals(3, list.get(3));, +		assertEquals(4, list.get(4));, +	}, +, +	@Test, +	public void selectFirstItemInSet() throws Exception {, +		Expression expression = new SpelExpressionParser().parseRaw("integers.^[#this<5]");, +		EvaluationContext context = new StandardEvaluationContext(new SetTestBean());, +		Object value = expression.getValue(context);, +		assertTrue(value instanceof Integer);, +		assertEquals(0, value);, +	}, +, +	@Test, +	public void selectLastItemInSet() throws Exception {, +		Expression expression = new SpelExpressionParser().parseRaw("integers.$[#this<5]");, +		EvaluationContext context = new StandardEvaluationContext(new SetTestBean());, +		Object value = expression.getValue(context);, +		assertTrue(value instanceof Integer);, +		assertEquals(4, value);, +	}, +, +	@Test, +	public void projectionWithSet() throws Exception {, +		Expression expression = new SpelExpressionParser().parseRaw("#testList.![wrapper.value]");, +		EvaluationContext context = new StandardEvaluationContext();, +		context.setVariable("testList", IntegerTestBean.createSet());, +		Object value = expression.getValue(context);, +		assertTrue(value instanceof List);, +		List list = (List) value;, +		assertEquals(3, list.size());]