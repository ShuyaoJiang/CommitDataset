[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +import java.util.function.Function;, +	private Function<String, String> urlEncoder = url -> url;, +, +	public String encodeUrl(String url) {, +		return (this.urlEncoder != null ? this.urlEncoder.apply(url) : url);, +	}, +, +	@Override, +	public void registerUrlEncoder(Function<String, String> encoder) {, +		this.urlEncoder = (this.urlEncoder != null ? this.urlEncoder.andThen(encoder) : encoder);, +	}, +, +	@Override, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +import java.util.function.Function;, +	private Function<String, String> urlEncoder = url -> url;, +, +	public String encodeUrl(String url) {, +		return (this.urlEncoder != null ? this.urlEncoder.apply(url) : url);, +	}, +, +	@Override, +	public void registerUrlEncoder(Function<String, String> encoder) {, +		this.urlEncoder = (this.urlEncoder != null ? this.urlEncoder.andThen(encoder) : encoder);, +	}, +, +	@Override, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpResponse.java, +import java.util.function.Function;, +, +	 * A mechanism for URL rewriting that applications and libraries such as, +	 * HTML template libraries to use consistently for all URLs emitted by, +	 * the application. Doing so enables the registration of URL encoders via, +	 * {@link #registerUrlEncoder} that can insert an id for authentication,, +	 * a nonce for CSRF protection, a version for a static resource, etc., +	 * @param url the URL to encode, +	 * @return the encoded URL or the same, +	 */, +	String encodeUrl(String url);, +, +	/**, +	 * Register a URL rewriting function for use with {@link #encodeUrl}., +	 * The function must return an encoded URL or the same URL., +	 * @param encoder a URL encoding function to use, +	 */, +	void registerUrlEncoder(Function<String, String> encoder);, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +import java.util.function.Function;, +	private Function<String, String> urlEncoder = url -> url;, +, +	public String encodeUrl(String url) {, +		return (this.urlEncoder != null ? this.urlEncoder.apply(url) : url);, +	}, +, +	@Override, +	public void registerUrlEncoder(Function<String, String> encoder) {, +		this.urlEncoder = (this.urlEncoder != null ? this.urlEncoder.andThen(encoder) : encoder);, +	}, +, +	@Override, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpResponse.java, +import java.util.function.Function;, +, +	 * A mechanism for URL rewriting that applications and libraries such as, +	 * HTML template libraries to use consistently for all URLs emitted by, +	 * the application. Doing so enables the registration of URL encoders via, +	 * {@link #registerUrlEncoder} that can insert an id for authentication,, +	 * a nonce for CSRF protection, a version for a static resource, etc., +	 * @param url the URL to encode, +	 * @return the encoded URL or the same, +	 */, +	String encodeUrl(String url);, +, +	/**, +	 * Register a URL rewriting function for use with {@link #encodeUrl}., +	 * The function must return an encoded URL or the same URL., +	 * @param encoder a URL encoding function to use, +	 */, +	void registerUrlEncoder(Function<String, String> encoder);, +, +	/**, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/ServerHttpResponseTests.java, +	public void encodeUrlDefault() throws Exception {, +		TestServerHttpResponse response = new TestServerHttpResponse();, +		assertEquals("/foo", response.encodeUrl("/foo"));, +	}, +, +	@Test, +	public void encodeUrlWithEncoder() throws Exception {, +		TestServerHttpResponse response = new TestServerHttpResponse();, +		response.registerUrlEncoder(s -> s + "?nonce=123");, +		assertEquals("/foo?nonce=123", response.encodeUrl("/foo"));, +	}, +, +	@Test, +	public void encodeUrlWithMultipleEncoders() throws Exception {, +		TestServerHttpResponse response = new TestServerHttpResponse();]