[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/CglibSubclassingInstantiationStrategy.java, + * Copyright 2002-2018 the original author or authors., +			@Nullable Constructor<?> ctor, Object... args) {, +		public Object instantiate(@Nullable Constructor<?> ctor, Object... args) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/CglibSubclassingInstantiationStrategy.java, + * Copyright 2002-2018 the original author or authors., +			@Nullable Constructor<?> ctor, Object... args) {, +		public Object instantiate(@Nullable Constructor<?> ctor, Object... args) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +	private static final Object[] EMPTY_ARGS = new Object[0];, +, +	public BeanWrapper autowireConstructor(String beanName, RootBeanDefinition mbd,, +			@Nullable Constructor<?>[] chosenCtors, @Nullable Object[] explicitArgs) {, +		if (constructorToUse == null || argsToUse == null) {, +			// Take specified constructors, if any., +			Constructor<?>[] candidates = chosenCtors;, +			if (candidates == null) {, +				Class<?> beanClass = mbd.getBeanClass();, +				try {, +					candidates = (mbd.isNonPublicAccessAllowed() ?, +							beanClass.getDeclaredConstructors() : beanClass.getConstructors());, +				}, +				catch (Throwable ex) {, +					throw new BeanCreationException(mbd.getResourceDescription(), beanName,, +							"Resolution of declared constructors on bean Class [" + beanClass.getName() +, +							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex);, +				}, +			}, +, +			if (candidates.length == 1 && explicitArgs == null && !mbd.hasConstructorArgumentValues()) {, +				Constructor<?> uniqueCandidate = candidates[0];, +				if (uniqueCandidate.getParameterCount() == 0) {, +					synchronized (mbd.constructorArgumentLock) {, +						mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate;, +						mbd.constructorArgumentsResolved = true;, +						mbd.resolvedConstructorArguments = EMPTY_ARGS;, +					}, +					bw.setBeanInstance(instantiate(beanName, mbd, uniqueCandidate, EMPTY_ARGS));, +					return bw;, +				}, +			}, +, +		bw.setBeanInstance(instantiate(beanName, mbd, constructorToUse, argsToUse));, +		return bw;, +	}, +	private Object instantiate(, +			String beanName, RootBeanDefinition mbd, Constructor constructorToUse, Object[] argsToUse) {, +, +		try {, +			InstantiationStrategy strategy = this.beanFactory.getInstantiationStrategy();, +				return AccessController.doPrivileged((PrivilegedAction<Object>) () ->, +						strategy.instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse),, +				return strategy.instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse);, +	private Method[] getCandidateMethods(Class<?> factoryClass, RootBeanDefinition mbd) {, +			String beanName, RootBeanDefinition mbd, @Nullable Object[] explicitArgs) {, +			List<Method> candidateList = new ArrayList<>();, +					candidateList.add(candidate);, +, +			if (candidateList.size() == 1 && explicitArgs == null && !mbd.hasConstructorArgumentValues()) {, +				Method uniqueCandidate = candidateList.get(0);, +				if (uniqueCandidate.getParameterCount() == 0) {, +					synchronized (mbd.constructorArgumentLock) {, +						mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate;, +						mbd.constructorArgumentsResolved = true;, +						mbd.resolvedConstructorArguments = EMPTY_ARGS;, +					}, +					bw.setBeanInstance(instantiate(beanName, mbd, factoryBean, uniqueCandidate, EMPTY_ARGS));, +					return bw;, +				}, +			}, +, +			Method[] candidates = candidateList.toArray(new Method[0]);, +		bw.setBeanInstance(instantiate(beanName, mbd, factoryBean, factoryMethodToUse, argsToUse));, +		return bw;, +	}, +	private Object instantiate(, +			String beanName, RootBeanDefinition mbd, Object factoryBean, Method factoryMethod, Object[] args) {, +, +		try {, +				return AccessController.doPrivileged((PrivilegedAction<Object>) () ->, +						this.beanFactory.getInstantiationStrategy().instantiate(, +								mbd, beanName, this.beanFactory, factoryBean, factoryMethod, args),, +				return this.beanFactory.getInstantiationStrategy().instantiate(, +						mbd, beanName, this.beanFactory, factoryBean, factoryMethod, args);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/CglibSubclassingInstantiationStrategy.java, + * Copyright 2002-2018 the original author or authors., +			@Nullable Constructor<?> ctor, Object... args) {, +		public Object instantiate(@Nullable Constructor<?> ctor, Object... args) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +	private static final Object[] EMPTY_ARGS = new Object[0];, +, +	public BeanWrapper autowireConstructor(String beanName, RootBeanDefinition mbd,, +			@Nullable Constructor<?>[] chosenCtors, @Nullable Object[] explicitArgs) {, +		if (constructorToUse == null || argsToUse == null) {, +			// Take specified constructors, if any., +			Constructor<?>[] candidates = chosenCtors;, +			if (candidates == null) {, +				Class<?> beanClass = mbd.getBeanClass();, +				try {, +					candidates = (mbd.isNonPublicAccessAllowed() ?]