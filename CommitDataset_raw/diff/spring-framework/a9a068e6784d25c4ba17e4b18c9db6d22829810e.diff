[+++ b/build-spring-framework/resources/changelog.txt, +* added support for UriComponentsBuilder as @Controller method argument, +* updated Spring MVC configuration section to include MVC Java config and the MVC namespace, +* fixed issue with setting Content-Length header depending on the charset of the response, +++ b/build-spring-framework/resources/changelog.txt, +* added support for UriComponentsBuilder as @Controller method argument, +* updated Spring MVC configuration section to include MVC Java config and the MVC namespace, +* fixed issue with setting Content-Length header depending on the charset of the response, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, +			Long contentLength = getContentLength(t, headers.getContentType());, +++ b/build-spring-framework/resources/changelog.txt, +* added support for UriComponentsBuilder as @Controller method argument, +* updated Spring MVC configuration section to include MVC Java config and the MVC namespace, +* fixed issue with setting Content-Length header depending on the charset of the response, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, +			Long contentLength = getContentLength(t, headers.getContentType());, +++ b/org.springframework.web/src/test/java/org/springframework/http/converter/StringHttpMessageConverterTests.java, +, +	// SPR-8867, +	, +	@Test, +	public void writeOverrideRequestedContentType() throws IOException {, +		Charset utf8 = Charset.forName("UTF-8");, +		MediaType requestedContentType = new MediaType("text", "html");, +		MockHttpOutputMessage outputMessage = new MockHttpOutputMessage();, +		MediaType contentType = new MediaType("text", "plain", utf8);, +		outputMessage.getHeaders().setContentType(contentType);, +		String body = "H\u00e9llo W\u00f6rld";, +		converter.write(body, requestedContentType, outputMessage);, +		assertEquals("Invalid result", body, outputMessage.getBodyAsString(utf8));, +		assertEquals("Invalid content-type", contentType, outputMessage.getHeaders().getContentType());, +		assertEquals("Invalid content-length", body.getBytes(utf8).length,, +				outputMessage.getHeaders().getContentLength());, +		assertFalse("Invalid accept-charset", outputMessage.getHeaders().getAcceptCharset().isEmpty());, +	}]