[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutor.java, + * A command parameterized with the information necessary to perform a conversion of a source input to a, +	 * The type this executor converts from., +	 * The type this executor converts to., +s	 */, +	 * Convert the source to T., +	 * @param source the source to convert, +	 * @throws ConversionExecutionException if an exception occurs during type conversion, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutor.java, + * A command parameterized with the information necessary to perform a conversion of a source input to a, +	 * The type this executor converts from., +	 * The type this executor converts to., +s	 */, +	 * Convert the source to T., +	 * @param source the source to convert, +	 * @throws ConversionExecutionException if an exception occurs during type conversion, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	 * Convert the source to target class T., +	 * Convert the source to target class T with a custom converter., +	 * Get a ConversionExecutor that converts objects from S to T., +	 * Get a ConversionExecutor that that converts objects from S to T with a custom converter., +	 * The returned ConversionExecutor is thread-safe and may safely be cached for use in client code., +	 * Get a class by its alias., +	 * @return the class, or <code>null</code> if no such alias exists, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutor.java, + * A command parameterized with the information necessary to perform a conversion of a source input to a, +	 * The type this executor converts from., +	 * The type this executor converts to., +s	 */, +	 * Convert the source to T., +	 * @param source the source to convert, +	 * @throws ConversionExecutionException if an exception occurs during type conversion, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	 * Convert the source to target class T., +	 * Convert the source to target class T with a custom converter., +	 * Get a ConversionExecutor that converts objects from S to T., +	 * Get a ConversionExecutor that that converts objects from S to T with a custom converter., +	 * The returned ConversionExecutor is thread-safe and may safely be cached for use in client code., +	 * Get a class by its alias., +	 * @return the class, or <code>null</code> if no such alias exists, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/Converter.java, + * A converter converts a source object of type S to a target of type T and back., +	 * Convert the source of type S to target type T., +	 * Convert the target of type T back to source type S., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutor.java, + * A command parameterized with the information necessary to perform a conversion of a source input to a, +	 * The type this executor converts from., +	 * The type this executor converts to., +s	 */, +	 * Convert the source to T., +	 * @param source the source to convert, +	 * @throws ConversionExecutionException if an exception occurs during type conversion, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	 * Convert the source to target class T., +	 * Convert the source to target class T with a custom converter., +	 * Get a ConversionExecutor that converts objects from S to T., +	 * Get a ConversionExecutor that that converts objects from S to T with a custom converter., +	 * The returned ConversionExecutor is thread-safe and may safely be cached for use in client code., +	 * Get a class by its alias., +	 * @return the class, or <code>null</code> if no such alias exists, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/Converter.java, + * A converter converts a source object of type S to a target of type T and back., +	 * Convert the source of type S to target type T., +	 * Convert the target of type T back to source type S., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/NumberToNumber.java, +	public <RT extends Number> RT convert(Number source, Class<RT> targetClass) throws Exception {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutor.java, + * A command parameterized with the information necessary to perform a conversion of a source input to a, +	 * The type this executor converts from., +	 * The type this executor converts to., +s	 */, +	 * Convert the source to T., +	 * @param source the source to convert, +	 * @throws ConversionExecutionException if an exception occurs during type conversion, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	 * Convert the source to target class T., +	 * Convert the source to target class T with a custom converter., +	 * Get a ConversionExecutor that converts objects from S to T., +	 * Get a ConversionExecutor that that converts objects from S to T with a custom converter., +	 * The returned ConversionExecutor is thread-safe and may safely be cached for use in client code., +	 * Get a class by its alias., +	 * @return the class, or <code>null</code> if no such alias exists, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/Converter.java, + * A converter converts a source object of type S to a target of type T and back., +	 * Convert the source of type S to target type T., +	 * Convert the target of type T back to source type S., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/NumberToNumber.java, +	public <RT extends Number> RT convert(Number source, Class<RT> targetClass) throws Exception {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToEnum.java, + * Converts a String to a Enum using {@link Enum#valueOf(Class, String)}., +public class StringToEnum implements SuperTwoWayConverter<String, Enum> {, +	public <RT extends Enum> RT convert(String source, Class<RT> targetClass) throws Exception {, +	public <RS extends String> RS convertBack(Enum target, Class<RS> sourceClass) throws Exception {, +		return (RS) target.name();, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutor.java, + * A command parameterized with the information necessary to perform a conversion of a source input to a, +	 * The type this executor converts from., +	 * The type this executor converts to., +s	 */, +	 * Convert the source to T.]