[+++ b/spring-test/src/main/java/org/springframework/test/web/client/DefaultRequestExpectation.java, +			// Only validate min count since max count is checked on every request..., +++ b/spring-test/src/main/java/org/springframework/test/web/client/DefaultRequestExpectation.java, +			// Only validate min count since max count is checked on every request..., +++ b/spring-test/src/main/java/org/springframework/test/web/client/ExpectedCount.java, + * Copyright 2002-2017 the original author or authors., + * never(), +		Assert.isTrue(minCount >= 0, "minCount >= 0 is required");, +	 * No calls expected at all, i.e. min=0 and max=0., +	 * @since 4.3.6, +	 */, +	public static ExpectedCount never() {, +		return new ExpectedCount(0, 0);, +	}, +, +	/**, +++ b/spring-test/src/main/java/org/springframework/test/web/client/DefaultRequestExpectation.java, +			// Only validate min count since max count is checked on every request..., +++ b/spring-test/src/main/java/org/springframework/test/web/client/ExpectedCount.java, + * Copyright 2002-2017 the original author or authors., + * never(), +		Assert.isTrue(minCount >= 0, "minCount >= 0 is required");, +	 * No calls expected at all, i.e. min=0 and max=0., +	 * @since 4.3.6, +	 */, +	public static ExpectedCount never() {, +		return new ExpectedCount(0, 0);, +	}, +, +	/**, +++ b/spring-test/src/test/java/org/springframework/test/web/client/samples/SampleTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.springframework.test.web.client.ExpectedCount.never;, +import static org.springframework.test.web.client.ExpectedCount.once;, +	public void expectNever() throws Exception {, +, +		String responseBody = "{\"name\" : \"Ludwig van Beethoven\", \"someDouble\" : \"1.6035\"}";, +, +		this.mockServer.expect(once(), requestTo("/composers/42")).andExpect(method(HttpMethod.GET)), +				.andRespond(withSuccess(responseBody, MediaType.APPLICATION_JSON));, +		this.mockServer.expect(never(), requestTo("/composers/43")).andExpect(method(HttpMethod.GET)), +				.andRespond(withSuccess(responseBody, MediaType.APPLICATION_JSON));, +, +		this.restTemplate.getForObject("/composers/{id}", Person.class, 42);, +, +		this.mockServer.verify();, +	}, +, +	@Test(expected = AssertionError.class), +	public void expectNeverViolated() throws Exception {, +, +		String responseBody = "{\"name\" : \"Ludwig van Beethoven\", \"someDouble\" : \"1.6035\"}";, +, +		this.mockServer.expect(once(), requestTo("/composers/42")).andExpect(method(HttpMethod.GET)), +				.andRespond(withSuccess(responseBody, MediaType.APPLICATION_JSON));, +		this.mockServer.expect(never(), requestTo("/composers/43")).andExpect(method(HttpMethod.GET)), +				.andRespond(withSuccess(responseBody, MediaType.APPLICATION_JSON));, +, +		this.restTemplate.getForObject("/composers/{id}", Person.class, 42);, +		this.restTemplate.getForObject("/composers/{id}", Person.class, 43);, +	}, +, +	@Test]