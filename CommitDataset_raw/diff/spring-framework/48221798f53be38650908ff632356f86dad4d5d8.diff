[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +					if (candidateLocal && primaryLocal) {, +					else if (candidateLocal) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +					if (candidateLocal && primaryLocal) {, +					else if (candidateLocal) {, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +	public void testAutowireBeanByTypeWithTwoMatchesAndOnePrimary() {, +		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();, +		RootBeanDefinition bd = new RootBeanDefinition(TestBean.class);, +		bd.setPrimary(true);, +		RootBeanDefinition bd2 = new RootBeanDefinition(TestBean.class);, +		lbf.registerBeanDefinition("test", bd);, +		lbf.registerBeanDefinition("spouse", bd2);, +, +		DependenciesBean bean = (DependenciesBean), +				lbf.autowire(DependenciesBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true);, +		assertThat(bean.getSpouse(), equalTo(lbf.getBean("test")));, +	}, +, +	@Test, +	public void testAutowireBeanByTypeWithTwoPrimaryCandidates() {, +		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();, +		RootBeanDefinition bd = new RootBeanDefinition(TestBean.class);, +		bd.setPrimary(true);, +		RootBeanDefinition bd2 = new RootBeanDefinition(TestBean.class);, +		bd2.setPrimary(true);, +		lbf.registerBeanDefinition("test", bd);, +		lbf.registerBeanDefinition("spouse", bd2);, +, +		try {, +			lbf.autowire(DependenciesBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true);, +			fail("Should have thrown UnsatisfiedDependencyException");, +		}, +		catch (UnsatisfiedDependencyException ex) {, +			// expected, +			assertNotNull("Exception should have cause", ex.getCause());, +			assertEquals("Wrong cause type", NoUniqueBeanDefinitionException.class, ex.getCause().getClass());, +		}, +	}, +, +	@Test]