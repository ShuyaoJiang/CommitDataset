[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockMultipartHttpServletRequest.java, + * Copyright 2002-2015 the original author or authors., +		return HttpMethod.resolve(getMethod());, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockMultipartHttpServletRequest.java, + * Copyright 2002-2015 the original author or authors., +		return HttpMethod.resolve(getMethod());, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * Return the value of the {@code Access-Control-Allow-Methods} response header., +				HttpMethod resolved = HttpMethod.resolve(token);, +				if (resolved != null) {, +					result.add(resolved);, +				}, +	 * Return the value of the {@code Access-Control-Allow-Origin} response header., +	 * Return the value of the {@code Access-Control-Request-Method} request header., +		return HttpMethod.resolve(getFirst(ACCESS_CONTROL_REQUEST_METHOD));, +			List<HttpMethod> result = new LinkedList<HttpMethod>();, +				HttpMethod resolved = HttpMethod.resolve(token);, +				if (resolved != null) {, +					result.add(resolved);, +			}, +			return EnumSet.copyOf(result);, +	 * Return the value of the {@code Cache-Control} header., +	 * Return the value of the {@code Connection} header., +	 * Return the value of the {@code Range} header., +	 * Return the value of the {@code Upgrade} header., +++ b/spring-test/src/main/java/org/springframework/mock/web/MockMultipartHttpServletRequest.java, + * Copyright 2002-2015 the original author or authors., +		return HttpMethod.resolve(getMethod());, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * Return the value of the {@code Access-Control-Allow-Methods} response header., +				HttpMethod resolved = HttpMethod.resolve(token);, +				if (resolved != null) {, +					result.add(resolved);, +				}, +	 * Return the value of the {@code Access-Control-Allow-Origin} response header., +	 * Return the value of the {@code Access-Control-Request-Method} request header., +		return HttpMethod.resolve(getFirst(ACCESS_CONTROL_REQUEST_METHOD));, +			List<HttpMethod> result = new LinkedList<HttpMethod>();, +				HttpMethod resolved = HttpMethod.resolve(token);, +				if (resolved != null) {, +					result.add(resolved);, +			}, +			return EnumSet.copyOf(result);, +	 * Return the value of the {@code Cache-Control} header., +	 * Return the value of the {@code Connection} header., +	 * Return the value of the {@code Range} header., +	 * Return the value of the {@code Upgrade} header., +++ b/spring-web/src/main/java/org/springframework/http/HttpMethod.java, + * Copyright 2002-2015 the original author or authors., +import java.util.HashMap;, +import java.util.Map;, +, + * @author Juergen Hoeller, +	GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE;, +, +, +	private static final Map<String, HttpMethod> mappings = new HashMap<String, HttpMethod>(8);, +, +	static {, +		for (HttpMethod httpMethod : values()) {, +			mappings.put(httpMethod.name(), httpMethod);, +		}, +	}, +, +, +	/**, +	 * Resolve the given method value to an {@code HttpMethod}., +	 * @param method the method value as a String, +	 * @return the corresponding {@code HttpMethod}, or {@code null} if not found, +	 * @since 4.2.4, +	 */, +	public static HttpMethod resolve(String method) {, +		return (method != null ? mappings.get(method) : null);, +	}, +, +, +	/**, +	 * Determine whether this {@code HttpMethod} matches the given, +	 * method value., +	 * @param method the method value as a String, +	 * @return {@code true} if it matches, {@code false} otherwise, +	 * @since 4.2.4, +	 */, +	public boolean matches(String method) {, +		return name().equals(method);, +	}, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockMultipartHttpServletRequest.java, + * Copyright 2002-2015 the original author or authors., +		return HttpMethod.resolve(getMethod());, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * Return the value of the {@code Access-Control-Allow-Methods} response header., +				HttpMethod resolved = HttpMethod.resolve(token);, +				if (resolved != null) {, +					result.add(resolved);, +				}, +	 * Return the value of the {@code Access-Control-Allow-Origin} response header., +	 * Return the value of the {@code Access-Control-Request-Method} request header., +		return HttpMethod.resolve(getFirst(ACCESS_CONTROL_REQUEST_METHOD));, +			List<HttpMethod> result = new LinkedList<HttpMethod>();, +				HttpMethod resolved = HttpMethod.resolve(token);]