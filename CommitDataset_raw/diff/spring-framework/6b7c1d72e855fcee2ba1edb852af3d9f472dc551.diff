[+++ b/spring-test/src/test/java/org/springframework/test/context/jdbc/MultipleDataSourcesAndTransactionManagersTransactionalSqlScriptsTests.java, + * Copyright 2002-2015 the original author or authors., +@Transactional(transactionManager = "txMgr1"), +	@Transactional(transactionManager = "txMgr2"), +++ b/spring-test/src/test/java/org/springframework/test/context/jdbc/MultipleDataSourcesAndTransactionManagersTransactionalSqlScriptsTests.java, + * Copyright 2002-2015 the original author or authors., +@Transactional(transactionManager = "txMgr1"), +	@Transactional(transactionManager = "txMgr2"), +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/Transactional.java, +import org.springframework.core.annotation.AliasFor;, +	 * Alias for {@link #transactionManager}., +	 * @see #transactionManager, +	 */, +	@AliasFor(attribute = "transactionManager"), +	String value() default "";, +, +	/**, +	 * @since 4.2, +	 * @see #value, +	@AliasFor(attribute = "value"), +	String transactionManager() default "";, +++ b/spring-test/src/test/java/org/springframework/test/context/jdbc/MultipleDataSourcesAndTransactionManagersTransactionalSqlScriptsTests.java, + * Copyright 2002-2015 the original author or authors., +@Transactional(transactionManager = "txMgr1"), +	@Transactional(transactionManager = "txMgr2"), +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/Transactional.java, +import org.springframework.core.annotation.AliasFor;, +	 * Alias for {@link #transactionManager}., +	 * @see #transactionManager, +	 */, +	@AliasFor(attribute = "transactionManager"), +	String value() default "";, +, +	/**, +	 * @since 4.2, +	 * @see #value, +	@AliasFor(attribute = "value"), +	String transactionManager() default "";, +++ b/spring-tx/src/test/java/org/springframework/transaction/annotation/AnnotationTransactionNamespaceHandlerTests.java, + * @author Sam Brannen, +		@Transactional(transactionManager = "qualifiedTransactionManager"), +		public void saveQualifiedFooWithAttributeAlias() {, +		}, +, +++ b/spring-test/src/test/java/org/springframework/test/context/jdbc/MultipleDataSourcesAndTransactionManagersTransactionalSqlScriptsTests.java, + * Copyright 2002-2015 the original author or authors., +@Transactional(transactionManager = "txMgr1"), +	@Transactional(transactionManager = "txMgr2"), +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/Transactional.java, +import org.springframework.core.annotation.AliasFor;, +	 * Alias for {@link #transactionManager}., +	 * @see #transactionManager, +	 */, +	@AliasFor(attribute = "transactionManager"), +	String value() default "";, +, +	/**, +	 * @since 4.2, +	 * @see #value, +	@AliasFor(attribute = "value"), +	String transactionManager() default "";, +++ b/spring-tx/src/test/java/org/springframework/transaction/annotation/AnnotationTransactionNamespaceHandlerTests.java, + * @author Sam Brannen, +		@Transactional(transactionManager = "qualifiedTransactionManager"), +		public void saveQualifiedFooWithAttributeAlias() {, +		}, +, +++ b/spring-tx/src/test/java/org/springframework/transaction/annotation/EnableTransactionManagementTests.java, +, + * @author Sam Brannen, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(EnableTxConfig.class, TxManagerConfig.class);, +		assertTrue("testBean is not a proxy", AopUtils.isAopProxy(bean));, +		assertTrue("Stereotype annotation not visible", services.containsKey("testBean"));, +		ctx.close();, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(InheritedEnableTxConfig.class, TxManagerConfig.class);, +		assertTrue("testBean is not a proxy", AopUtils.isAopProxy(bean));, +		assertTrue("Stereotype annotation not visible", services.containsKey("testBean"));, +		ctx.close();, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(EnableTxConfig.class, TxManagerConfig.class);, +		ctx.close();, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(EnableTxConfig.class, MultiTxManagerConfig.class);, +		ctx.close();, +			assertThat(ex.getMessage(), containsString("AspectJTransactionManagementConfiguration"));, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(EnableTxConfig.class);, +		assertTrue(ctx.containsBean(TransactionManagementConfigUtils.TRANSACTIONAL_EVENT_LISTENER_FACTORY_BEAN_NAME));, +		ctx.close();, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(Spr11915Config.class);, +		CallCountingTransactionManager txManager = ctx.getBean("qualifiedTransactionManager", CallCountingTransactionManager.class);, +		bean.saveQualifiedFoo();, +, +		bean.saveQualifiedFooWithAttributeAlias();, +		assertThat(txManager.begun, equalTo(2));, +		assertThat(txManager.commits, equalTo(2));, +		assertThat(txManager.rollbacks, equalTo(0));, +, +		ctx.close();, +]