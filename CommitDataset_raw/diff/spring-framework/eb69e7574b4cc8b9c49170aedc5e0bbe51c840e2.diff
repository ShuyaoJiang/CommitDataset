[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, +			argumentTypes[i] = (value==null?null:value.getClass());, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, +			argumentTypes[i] = (value==null?null:value.getClass());, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java, +			argumentTypes[i] = (arguments[i]==null?null:arguments[i].getClass());, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, +			argumentTypes[i] = (value==null?null:value.getClass());, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java, +			argumentTypes[i] = (arguments[i]==null?null:arguments[i].getClass());, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java, +				// The user may supply null - and that will be ok unless a primitive is expected, +				if (suppliedArg==null) {, +					if (expectedArg.isPrimitive()) {, +						match=null;, +					}, +				} else {, +		}, +			if (suppliedArg==null) {, +				if (expectedArg.isPrimitive()) {, +					match=null;, +				}, +			} else {, +		}, +		// If already confirmed it cannot be a match, then return, +					if (suppliedArg==null) {, +						if (varargsParameterType.isPrimitive()) {, +							match=null;, +						}, +					} else {, +						} else {, +		}, +		} else {, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, +			argumentTypes[i] = (value==null?null:value.getClass());, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java, +			argumentTypes[i] = (arguments[i]==null?null:arguments[i].getClass());, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java, +				// The user may supply null - and that will be ok unless a primitive is expected, +				if (suppliedArg==null) {, +					if (expectedArg.isPrimitive()) {, +						match=null;, +					}, +				} else {, +		}, +			if (suppliedArg==null) {, +				if (expectedArg.isPrimitive()) {, +					match=null;, +				}, +			} else {, +		}, +		// If already confirmed it cannot be a match, then return, +					if (suppliedArg==null) {, +						if (varargsParameterType.isPrimitive()) {, +							match=null;, +						}, +					} else {, +						} else {, +		}, +		} else {, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/SpringEL300Tests.java, +import org.springframework.expression.EvaluationException;, +import org.springframework.expression.spel.support.StandardEvaluationContext;, +import org.springframework.expression.spel.support.StandardTypeLocator;, +	public void testSPR5899() throws Exception {, +		StandardEvaluationContext eContext = new StandardEvaluationContext(new Spr5899Class());, +		Expression expr = new SpelExpressionParser().parse("tryToInvokeWithNull(12)");, +		Assert.assertEquals(12,expr.getValue(eContext));, +		expr = new SpelExpressionParser().parse("tryToInvokeWithNull(null)");, +		Assert.assertEquals(null,expr.getValue(eContext));, +		try {, +			expr = new SpelExpressionParser().parse("tryToInvokeWithNull2(null)");, +			expr.getValue();, +			Assert.fail("Should have failed to find a method to which it could pass null");, +		} catch (EvaluationException see) {, +			// success, +		}, +		eContext.setTypeLocator(new MyTypeLocator());, +		, +		// varargs, +		expr = new SpelExpressionParser().parse("tryToInvokeWithNull3(null,'a','b')");, +		Assert.assertEquals("ab",expr.getValue(eContext));, +		, +		// varargs 2 - null is packed into the varargs, +		expr = new SpelExpressionParser().parse("tryToInvokeWithNull3(12,'a',null,'c')");, +		Assert.assertEquals("anullc",expr.getValue(eContext));, +		, +		// check we can find the ctor ok, +		expr = new SpelExpressionParser().parse("new Spr5899Class().toString()");, +		Assert.assertEquals("instance",expr.getValue(eContext));, +, +		expr = new SpelExpressionParser().parse("new Spr5899Class(null).toString()");, +		Assert.assertEquals("instance",expr.getValue(eContext));, +, +		// ctor varargs, +		expr = new SpelExpressionParser().parse("new Spr5899Class(null,'a','b').toString()");, +		Assert.assertEquals("instance",expr.getValue(eContext));, +, +		// ctor varargs 2, +		expr = new SpelExpressionParser().parse("new Spr5899Class(null,'a', null, 'b').toString()");]