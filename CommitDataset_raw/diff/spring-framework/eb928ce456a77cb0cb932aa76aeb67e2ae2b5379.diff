[+++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +import org.springframework.util.ClassUtils;, +		Method targetMethod = ClassUtils.getMostSpecificMethod(method, targetClass);, +		EventListener ann = AnnotatedElementUtils.findMergedAnnotation(targetMethod, EventListener.class);, +, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +import org.springframework.util.ClassUtils;, +		Method targetMethod = ClassUtils.getMostSpecificMethod(method, targetClass);, +		EventListener ann = AnnotatedElementUtils.findMergedAnnotation(targetMethod, EventListener.class);, +, +++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java, +import org.springframework.validation.annotation.Validated;, +import org.springframework.validation.beanvalidation.MethodValidationPostProcessor;, +		validateConditionMatch(ConditionalEventListener.class);, +	}, +, +	@Test, +	public void conditionMatchWithProxy() {, +		validateConditionMatch(ConditionalEventListener.class, MethodValidationPostProcessor.class);, +	}, +, +	private void validateConditionMatch(Class<?>... classes) {, +		load(classes);, +, +		ConditionalEventInterface listener = this.context.getBean(ConditionalEventInterface.class);, +		this.context.publishEvent("NOT OK");, +		this.eventCollector.assertTotalEventsCount(2);, +, +	interface ConditionalEventInterface extends Identifiable {, +, +		void handle(TestEvent event);, +, +		void handleString(String payload);, +, +		void handleTimestamp(Long timestamp);, +, +		void handleRatio(Double ratio);, +	}, +, +, +	@Validated, +	static class ConditionalEventListener extends TestEventListener implements ConditionalEventInterface {]