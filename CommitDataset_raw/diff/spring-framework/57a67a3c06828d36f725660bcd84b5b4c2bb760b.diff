[+++ b/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java, + * Copyright 2002-2019 the original author or authors., +import java.util.Enumeration;, +import java.util.function.Predicate;, +import org.springframework.http.HttpHeaders;, +	@Nullable, +	private Predicate<String> headerPredicate;, +, +	 * Configure a predicate for selecting which headers should be logged if, +	 * {@link #setIncludeHeaders(boolean)} is set to {@code true}., +	 * <p>By default this is not set in which case all headers are logged., +	 * @param headerPredicate the predicate to use, +	 * @since 5.2, +	 */, +	public void setHeaderPredicate(@Nullable Predicate<String> headerPredicate) {, +		this.headerPredicate = headerPredicate;, +	}, +, +	/**, +	 * The configured {@link #setHeaderPredicate(Predicate) headerPredicate}., +	 * @since 5.2, +	 */, +	@Nullable, +	public Predicate<String> getHeaderPredicate() {, +		return this.headerPredicate;, +	}, +, +	/**, +			HttpHeaders headers = new ServletServerHttpRequest(request).getHeaders();, +			if (getHeaderPredicate() != null) {, +				Enumeration<String> names = request.getHeaderNames();, +				while (names.hasMoreElements()) {, +					String header = names.nextElement();, +					if (!getHeaderPredicate().test(header)) {, +						headers.set(header, "masked");, +					}, +				}, +			}, +			msg.append(";headers=").append(headers);, +++ b/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java, + * Copyright 2002-2019 the original author or authors., +import java.util.Enumeration;, +import java.util.function.Predicate;, +import org.springframework.http.HttpHeaders;, +	@Nullable, +	private Predicate<String> headerPredicate;, +, +	 * Configure a predicate for selecting which headers should be logged if, +	 * {@link #setIncludeHeaders(boolean)} is set to {@code true}., +	 * <p>By default this is not set in which case all headers are logged., +	 * @param headerPredicate the predicate to use, +	 * @since 5.2, +	 */, +	public void setHeaderPredicate(@Nullable Predicate<String> headerPredicate) {, +		this.headerPredicate = headerPredicate;, +	}, +, +	/**, +	 * The configured {@link #setHeaderPredicate(Predicate) headerPredicate}., +	 * @since 5.2, +	 */, +	@Nullable, +	public Predicate<String> getHeaderPredicate() {, +		return this.headerPredicate;, +	}, +, +	/**, +			HttpHeaders headers = new ServletServerHttpRequest(request).getHeaders();, +			if (getHeaderPredicate() != null) {, +				Enumeration<String> names = request.getHeaderNames();, +				while (names.hasMoreElements()) {, +					String header = names.nextElement();, +					if (!getHeaderPredicate().test(header)) {, +						headers.set(header, "masked");, +					}, +				}, +			}, +			msg.append(";headers=").append(headers);, +++ b/spring-web/src/test/java/org/springframework/web/filter/RequestLoggingFilterTests.java, + * Copyright 2002-2019 the original author or authors., +import java.nio.charset.StandardCharsets;, +	public void headers() throws Exception {, +		final MockHttpServletRequest request = new MockHttpServletRequest("POST", "/hotels");, +		request.setContentType("application/json");, +		request.addHeader("token", "123");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +, +		FilterChain filterChain = new NoOpFilterChain();, +		filter.setIncludeHeaders(true);, +		filter.setHeaderPredicate(name -> !name.equalsIgnoreCase("token"));, +		filter.doFilter(request, response, filterChain);, +, +		assertNotNull(filter.beforeRequestMessage);, +		assertEquals("Before request [uri=/hotels;headers=[Content-Type:\"application/json\", token:\"masked\"]]",, +				filter.beforeRequestMessage);, +, +		assertNotNull(filter.afterRequestMessage);, +		assertEquals("After request [uri=/hotels;headers=[Content-Type:\"application/json\", token:\"masked\"]]",, +				filter.afterRequestMessage);, +	}]