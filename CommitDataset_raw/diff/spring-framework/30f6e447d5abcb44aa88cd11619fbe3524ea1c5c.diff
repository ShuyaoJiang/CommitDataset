[+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +				if (ObjectUtils.nullSafeEquals(this.variables[i].getName(), variable.getName())) {, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +				if (ObjectUtils.nullSafeEquals(this.variables[i].getName(), variable.getName())) {, +++ b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java, +	@Test, +	public void testSpr16456() throws Exception {, +		ResolvableType genericType = ResolvableType.forField(, +				UnresolvedWithGenerics.class.getDeclaredField("set")).asCollection();, +		ResolvableType type = ResolvableType.forClassWithGenerics(ArrayList.class, genericType.getGeneric());, +		assertThat(type.resolveGeneric(), equalTo(Integer.class));, +	}, +, +, +	public abstract class UnresolvedWithGenerics {, +, +		Set<Integer> set;, +	}, +]