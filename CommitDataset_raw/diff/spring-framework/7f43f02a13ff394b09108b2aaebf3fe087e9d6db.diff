[+++ b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, +import javax.mail.internet.MimeUtility;, + * @author Rossen Stoyanchev, + * @see MultiValueMap, +	 * @since 4.1.1, +	public void setPartConverters(List<HttpMessageConverter<?>> partConverters) {, +	public void addPartConverter(HttpMessageConverter<?> partConverter) {, +		Assert.notNull(partConverter, "'partConverter' must not be null");, +			// We can't read multipart...., +			if (!supportedMediaType.equals(MediaType.MULTIPART_FORM_DATA) && supportedMediaType.includes(mediaType)) {, +		Charset charset = (contentType.getCharSet() != null ? contentType.getCharSet() : this.charset);, +			if (this.multipartCharset != null) {, +				filename = MimeDelegate.encode(filename, this.multipartCharset.name());, +		private final OutputStream outputStream;, +		private final HttpHeaders headers = new HttpHeaders();, +		public MultipartHttpOutputMessage(OutputStream outputStream) {, +			this.outputStream = outputStream;, +			return (this.headersWritten ? HttpHeaders.readOnlyHttpHeaders(this.headers) : this.headers);, +			return this.outputStream;, +						this.outputStream.write(headerName);, +						this.outputStream.write(':');, +						this.outputStream.write(' ');, +						this.outputStream.write(headerValue);, +						writeNewLine(this.outputStream);, +				writeNewLine(this.outputStream);, +				// Should not happen - US-ASCII is always supported., +				throw new IllegalStateException(ex);, +			}, +		}, +	}, +, +, +	/**, +	 * Inner class to avoid a hard dependency on the JavaMail API., +	 */, +	private static class MimeDelegate {, +, +		public static String encode(String value, String charset) {, +			try {, +				return MimeUtility.encodeText(value, charset, null);, +			}, +			catch (UnsupportedEncodingException ex) {]