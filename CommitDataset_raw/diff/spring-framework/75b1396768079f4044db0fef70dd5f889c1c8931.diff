[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +		return this.statusCode != null ? HttpStatus.resolve(this.statusCode) : null;, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +		return this.statusCode != null ? HttpStatus.resolve(this.statusCode) : null;, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +import org.springframework.http.HttpStatus;, +	@Override, +	@SuppressWarnings("ConstantConditions"), +	public HttpStatus getStatusCode() {, +		HttpStatus httpStatus = super.getStatusCode();, +		if (httpStatus == null) {, +			HttpResponseStatus status = this.response.status();, +			httpStatus = status != null ? HttpStatus.resolve(status.code()) : null;, +		}, +		return httpStatus;, +	}, +, +			this.response.status(statusCode);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +		return this.statusCode != null ? HttpStatus.resolve(this.statusCode) : null;, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +import org.springframework.http.HttpStatus;, +	@Override, +	@SuppressWarnings("ConstantConditions"), +	public HttpStatus getStatusCode() {, +		HttpStatus httpStatus = super.getStatusCode();, +		if (httpStatus == null) {, +			HttpResponseStatus status = this.response.status();, +			httpStatus = status != null ? HttpStatus.resolve(status.code()) : null;, +		}, +		return httpStatus;, +	}, +, +			this.response.status(statusCode);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpResponse.java, + * Copyright 2002-2018 the original author or authors., +	 * @return {@code false} if the status code has not been set because the, +	 * HTTP response is already committed, {@code true} if successfully set., +	 * Return the status code set via {@link #setStatusCode}, or if the status, +	 * has not been set, return the default status code from the underlying, +	 * server response. The return value may be {@code null} if the status code, +	 * value is outside the {@link HttpStatus} enum range, or if the underlying, +	 * server response does not have a default value., +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +		return this.statusCode != null ? HttpStatus.resolve(this.statusCode) : null;, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +import org.springframework.http.HttpStatus;, +	@Override, +	@SuppressWarnings("ConstantConditions"), +	public HttpStatus getStatusCode() {, +		HttpStatus httpStatus = super.getStatusCode();, +		if (httpStatus == null) {, +			HttpResponseStatus status = this.response.status();, +			httpStatus = status != null ? HttpStatus.resolve(status.code()) : null;, +		}, +		return httpStatus;, +	}, +, +			this.response.status(statusCode);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpResponse.java, + * Copyright 2002-2018 the original author or authors., +	 * @return {@code false} if the status code has not been set because the, +	 * HTTP response is already committed, {@code true} if successfully set., +	 * Return the status code set via {@link #setStatusCode}, or if the status, +	 * has not been set, return the default status code from the underlying, +	 * server response. The return value may be {@code null} if the status code, +	 * value is outside the {@link HttpStatus} enum range, or if the underlying, +	 * server response does not have a default value., +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpResponse.java, +import org.springframework.http.HttpStatus;, +	public HttpStatus getStatusCode() {, +		HttpStatus httpStatus = super.getStatusCode();, +		return httpStatus != null ? httpStatus : HttpStatus.resolve(this.response.getStatus());, +	}, +, +	@Override, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +		return this.statusCode != null ? HttpStatus.resolve(this.statusCode) : null;, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +import org.springframework.http.HttpStatus;, +	@Override, +	@SuppressWarnings("ConstantConditions"), +	public HttpStatus getStatusCode() {, +		HttpStatus httpStatus = super.getStatusCode();, +		if (httpStatus == null) {, +			HttpResponseStatus status = this.response.status();, +			httpStatus = status != null ? HttpStatus.resolve(status.code()) : null;, +		}, +		return httpStatus;, +	}, +, +			this.response.status(statusCode);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpResponse.java, + * Copyright 2002-2018 the original author or authors., +	 * @return {@code false} if the status code has not been set because the, +	 * HTTP response is already committed, {@code true} if successfully set., +	 * Return the status code set via {@link #setStatusCode}, or if the status, +	 * has not been set, return the default status code from the underlying, +	 * server response. The return value may be {@code null} if the status code, +	 * value is outside the {@link HttpStatus} enum range, or if the underlying]