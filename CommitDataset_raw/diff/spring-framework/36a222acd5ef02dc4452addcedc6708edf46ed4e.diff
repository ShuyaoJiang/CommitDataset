[+++ b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Encoder.java, +import java.nio.charset.Charset;, +import com.fasterxml.jackson.core.JsonEncoding;, +import com.fasterxml.jackson.core.JsonGenerator;, +		JsonEncoding encoding = getJsonEncoding(mimeType);, +, +					encodeValue(value, mimeType, bufferFactory, elementType, hints, encoding));, +					DataBuffer buffer = encodeValue(value, mimeType, bufferFactory, elementType, hints, encoding);, +				encodeValue(list, mimeType, bufferFactory, listType, hints, encoding)).flux();, +			ResolvableType elementType, @Nullable Map<String, Object> hints, JsonEncoding encoding) {, +, +			JsonGenerator generator = getObjectMapper().getFactory().createGenerator(outputStream, encoding);, +			writer.writeValue(generator, value);, +	/**, +	 * Determine the JSON encoding to use for the given mime type., +	 * @param mimeType the mime type as requested by the caller, +	 * @return the JSON encoding to use (never {@code null}), +	 * @since 5.0.5, +	 */, +	protected JsonEncoding getJsonEncoding(@Nullable MimeType mimeType) {, +		if (mimeType != null && mimeType.getCharset() != null) {, +			Charset charset = mimeType.getCharset();, +			for (JsonEncoding encoding : JsonEncoding.values()) {, +				if (charset.name().equals(encoding.getJavaName())) {, +					return encoding;, +				}, +			}, +		}, +		return JsonEncoding.UTF8;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Encoder.java, +import java.nio.charset.Charset;, +import com.fasterxml.jackson.core.JsonEncoding;, +import com.fasterxml.jackson.core.JsonGenerator;, +		JsonEncoding encoding = getJsonEncoding(mimeType);, +, +					encodeValue(value, mimeType, bufferFactory, elementType, hints, encoding));, +					DataBuffer buffer = encodeValue(value, mimeType, bufferFactory, elementType, hints, encoding);, +				encodeValue(list, mimeType, bufferFactory, listType, hints, encoding)).flux();, +			ResolvableType elementType, @Nullable Map<String, Object> hints, JsonEncoding encoding) {, +, +			JsonGenerator generator = getObjectMapper().getFactory().createGenerator(outputStream, encoding);, +			writer.writeValue(generator, value);, +	/**, +	 * Determine the JSON encoding to use for the given mime type., +	 * @param mimeType the mime type as requested by the caller, +	 * @return the JSON encoding to use (never {@code null}), +	 * @since 5.0.5, +	 */, +	protected JsonEncoding getJsonEncoding(@Nullable MimeType mimeType) {, +		if (mimeType != null && mimeType.getCharset() != null) {, +			Charset charset = mimeType.getCharset();, +			for (JsonEncoding encoding : JsonEncoding.values()) {, +				if (charset.name().equals(encoding.getJavaName())) {, +					return encoding;, +				}, +			}, +		}, +		return JsonEncoding.UTF8;, +	}, +, +++ b/spring-web/src/test/java/org/springframework/http/codec/ServerSentEventHttpMessageWriterTests.java, +		Flux<Pojo> source = Flux.just(new Pojo("foo\uD834\uDD1E", "bar\uD834\uDD1E"));, +		Charset charset = StandardCharsets.UTF_16LE;, +				.expectNext("data:{\"foo\":\"foo\uD834\uDD1E\",\"bar\":\"bar\uD834\uDD1E\"}\n\n"), +				.verifyComplete();]