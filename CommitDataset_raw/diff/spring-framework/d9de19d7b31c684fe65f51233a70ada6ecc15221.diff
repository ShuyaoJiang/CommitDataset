[+++ b/org.springframework.aspects/src/main/java/org/springframework/cache/aspectj/AbstractCacheAspect.aj, +import org.springframework.cache.interceptor.CacheAspectSupport.Invoker;, +		Invoker aspectJInvoker = new Invoker() {, +			public Object invoke() {, +		return execute(aspectJInvoker, thisJoinPoint.getTarget(), method, thisJoinPoint.getArgs());	, +++ b/org.springframework.aspects/src/main/java/org/springframework/cache/aspectj/AbstractCacheAspect.aj, +import org.springframework.cache.interceptor.CacheAspectSupport.Invoker;, +		Invoker aspectJInvoker = new Invoker() {, +			public Object invoke() {, +		return execute(aspectJInvoker, thisJoinPoint.getTarget(), method, thisJoinPoint.getArgs());	, +++ b/org.springframework.aspects/src/test/java/org/springframework/cache/aspectj/AbstractAnnotationTest.java, +import static org.junit.Assert.*;, +, +import java.util.UUID;, +	public void testCheckedThrowable(CacheableService service) throws Exception {, +		String arg = UUID.randomUUID().toString();, +		try {, +			service.throwChecked(arg);, +			fail("Excepted exception");, +		} catch (Exception ex) {, +			assertEquals(arg, ex.getMessage());, +		}, +	}, +, +	public void testUncheckedThrowable(CacheableService service) throws Exception {, +		try {, +			service.throwUnchecked(Long.valueOf(1));, +			fail("Excepted exception");, +		} catch (RuntimeException ex) {, +			assertTrue(ex instanceof UnsupportedOperationException);, +			// expected, +		}, +	}, +, +	@Test, +	public void testCheckedException() throws Exception {, +		testCheckedThrowable(cs);, +	}, +, +	@Test, +	public void testClassCheckedException() throws Exception {, +		testCheckedThrowable(ccs);, +	}, +, +	@Test, +	public void testUncheckedException() throws Exception {, +		testUncheckedThrowable(cs);, +	}, +, +	@Test, +	public void testClassUncheckedException() throws Exception {, +		testUncheckedThrowable(ccs);, +	}, +, +++ b/org.springframework.aspects/src/main/java/org/springframework/cache/aspectj/AbstractCacheAspect.aj, +import org.springframework.cache.interceptor.CacheAspectSupport.Invoker;, +		Invoker aspectJInvoker = new Invoker() {, +			public Object invoke() {, +		return execute(aspectJInvoker, thisJoinPoint.getTarget(), method, thisJoinPoint.getArgs());	, +++ b/org.springframework.aspects/src/test/java/org/springframework/cache/aspectj/AbstractAnnotationTest.java, +import static org.junit.Assert.*;, +, +import java.util.UUID;, +	public void testCheckedThrowable(CacheableService service) throws Exception {, +		String arg = UUID.randomUUID().toString();, +		try {, +			service.throwChecked(arg);, +			fail("Excepted exception");, +		} catch (Exception ex) {, +			assertEquals(arg, ex.getMessage());, +		}, +	}, +, +	public void testUncheckedThrowable(CacheableService service) throws Exception {, +		try {, +			service.throwUnchecked(Long.valueOf(1));, +			fail("Excepted exception");, +		} catch (RuntimeException ex) {, +			assertTrue(ex instanceof UnsupportedOperationException);, +			// expected, +		}, +	}, +, +	@Test, +	public void testCheckedException() throws Exception {, +		testCheckedThrowable(cs);, +	}, +, +	@Test, +	public void testClassCheckedException() throws Exception {, +		testCheckedThrowable(ccs);, +	}, +, +	@Test, +	public void testUncheckedException() throws Exception {, +		testUncheckedThrowable(cs);, +	}, +, +	@Test, +	public void testClassUncheckedException() throws Exception {]