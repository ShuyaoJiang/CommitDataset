[+++ b/spring-web/src/main/java/org/springframework/http/codec/DecoderHttpMessageReader.java, +	public Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage message,, +		MediaType contentType = getContentType(message);, +		return this.decoder.decode(message.getBody(), elementType, contentType, hints);, +	public Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage message,, +		MediaType contentType = getContentType(message);, +		return this.decoder.decodeToMono(message.getBody(), elementType, contentType, hints);, +	public Flux<T> read(ResolvableType actualType, ResolvableType elementType,, +		allHints.putAll(getReadHints(actualType, elementType, request, response));, +	public Mono<T> readMono(ResolvableType actualType, ResolvableType elementType,, +		allHints.putAll(getReadHints(actualType, elementType, request, response));, +++ b/spring-web/src/main/java/org/springframework/http/codec/DecoderHttpMessageReader.java, +	public Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage message,, +		MediaType contentType = getContentType(message);, +		return this.decoder.decode(message.getBody(), elementType, contentType, hints);, +	public Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage message,, +		MediaType contentType = getContentType(message);, +		return this.decoder.decodeToMono(message.getBody(), elementType, contentType, hints);, +	public Flux<T> read(ResolvableType actualType, ResolvableType elementType,, +		allHints.putAll(getReadHints(actualType, elementType, request, response));, +	public Mono<T> readMono(ResolvableType actualType, ResolvableType elementType,, +		allHints.putAll(getReadHints(actualType, elementType, request, response));, +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, +			MediaType mediaType, ReactiveHttpOutputMessage message,, +		HttpHeaders headers = message.getHeaders();, +				message.bufferFactory(), elementType, headers.getContentType(), hints);, +				message.writeAndFlushWith(body.map(Flux::just)) :, +				message.writeWith(body);, +	public Mono<Void> write(Publisher<? extends T> inputStream, ResolvableType actualType,, +		allHints.putAll(getWriteHints(actualType, elementType, mediaType, request, response));, +++ b/spring-web/src/main/java/org/springframework/http/codec/DecoderHttpMessageReader.java, +	public Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage message,, +		MediaType contentType = getContentType(message);, +		return this.decoder.decode(message.getBody(), elementType, contentType, hints);, +	public Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage message,, +		MediaType contentType = getContentType(message);, +		return this.decoder.decodeToMono(message.getBody(), elementType, contentType, hints);, +	public Flux<T> read(ResolvableType actualType, ResolvableType elementType,, +		allHints.putAll(getReadHints(actualType, elementType, request, response));, +	public Mono<T> readMono(ResolvableType actualType, ResolvableType elementType,, +		allHints.putAll(getReadHints(actualType, elementType, request, response));, +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, +			MediaType mediaType, ReactiveHttpOutputMessage message,, +		HttpHeaders headers = message.getHeaders();, +				message.bufferFactory(), elementType, headers.getContentType(), hints);, +				message.writeAndFlushWith(body.map(Flux::just)) :, +				message.writeWith(body);, +	public Mono<Void> write(Publisher<? extends T> inputStream, ResolvableType actualType,, +		allHints.putAll(getWriteHints(actualType, elementType, mediaType, request, response));, +++ b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageReader.java, +			ReactiveHttpInputMessage message, Map<String, Object> hints) {, +		return Flux.from(readMono(elementType, message, hints));, +			ReactiveHttpInputMessage message, Map<String, Object> hints) {, +		MediaType contentType = message.getHeaders().getContentType();, +		return message.getBody(), +++ b/spring-web/src/main/java/org/springframework/http/codec/DecoderHttpMessageReader.java, +	public Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage message,, +		MediaType contentType = getContentType(message);, +		return this.decoder.decode(message.getBody(), elementType, contentType, hints);, +	public Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage message,, +		MediaType contentType = getContentType(message);, +		return this.decoder.decodeToMono(message.getBody(), elementType, contentType, hints);, +	public Flux<T> read(ResolvableType actualType, ResolvableType elementType,, +		allHints.putAll(getReadHints(actualType, elementType, request, response));, +	public Mono<T> readMono(ResolvableType actualType, ResolvableType elementType,, +		allHints.putAll(getReadHints(actualType, elementType, request, response));, +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, +			MediaType mediaType, ReactiveHttpOutputMessage message,, +		HttpHeaders headers = message.getHeaders();, +				message.bufferFactory(), elementType, headers.getContentType(), hints);, +				message.writeAndFlushWith(body.map(Flux::just)) :, +				message.writeWith(body);, +	public Mono<Void> write(Publisher<? extends T> inputStream, ResolvableType actualType,, +		allHints.putAll(getWriteHints(actualType, elementType, mediaType, request, response));, +++ b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageReader.java, +			ReactiveHttpInputMessage message, Map<String, Object> hints) {, +		return Flux.from(readMono(elementType, message, hints));, +			ReactiveHttpInputMessage message, Map<String, Object> hints) {, +		MediaType contentType = message.getHeaders().getContentType();, +		return message.getBody(), +++ b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageWriter.java, +			ResolvableType elementType, MediaType mediaType, ReactiveHttpOutputMessage message,, +		MediaType contentType = message.getHeaders().getContentType();, +			message.getHeaders().setContentType(contentType);, +					DataBuffer buffer = message.bufferFactory().wrap(byteBuffer);, +					message.getHeaders().setContentLength(byteBuffer.remaining());, +					return message.writeWith(Mono.just(buffer));, +++ b/spring-web/src/main/java/org/springframework/http/codec/DecoderHttpMessageReader.java, +	public Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage message,, +		MediaType contentType = getContentType(message);, +		return this.decoder.decode(message.getBody(), elementType, contentType, hints);, +	public Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage message,, +		MediaType contentType = getContentType(message);, +		return this.decoder.decodeToMono(message.getBody(), elementType, contentType, hints);, +	public Flux<T> read(ResolvableType actualType, ResolvableType elementType,, +		allHints.putAll(getReadHints(actualType, elementType, request, response));, +	public Mono<T> readMono(ResolvableType actualType, ResolvableType elementType,, +		allHints.putAll(getReadHints(actualType, elementType, request, response));, +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, +			MediaType mediaType, ReactiveHttpOutputMessage message,]