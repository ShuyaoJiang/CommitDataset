[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +			return createNotFoundError();, +				.switchIfEmpty(createNotFoundError()), +	private <R> Mono<R> createNotFoundError() {, +		return Mono.defer(() -> {, +			Exception ex = new ResponseStatusException(HttpStatus.NOT_FOUND, "No matching handler");, +			return Mono.error(ex);, +		});, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +			return createNotFoundError();, +				.switchIfEmpty(createNotFoundError()), +	private <R> Mono<R> createNotFoundError() {, +		return Mono.defer(() -> {, +			Exception ex = new ResponseStatusException(HttpStatus.NOT_FOUND, "No matching handler");, +			return Mono.error(ex);, +		});, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ResourceWebHandler.java, +					return Mono.error(new ResponseStatusException(HttpStatus.NOT_FOUND));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +			return createNotFoundError();, +				.switchIfEmpty(createNotFoundError()), +	private <R> Mono<R> createNotFoundError() {, +		return Mono.defer(() -> {, +			Exception ex = new ResponseStatusException(HttpStatus.NOT_FOUND, "No matching handler");, +			return Mono.error(ex);, +		});, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ResourceWebHandler.java, +					return Mono.error(new ResponseStatusException(HttpStatus.NOT_FOUND));, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/DispatcherHandlerErrorTests.java, +import java.util.concurrent.atomic.AtomicReference;, +		Mono<Void> mono = this.dispatcherHandler.handle(exchange);, +		StepVerifier.create(mono), +				.consumeErrorWith(ex -> {, +					assertThat(ex, instanceOf(ResponseStatusException.class));, +					assertThat(ex.getMessage(), is("404 NOT_FOUND \"No matching handler\""));, +, +		// SPR-17475, +		AtomicReference<Throwable> exceptionRef = new AtomicReference<>();, +		StepVerifier.create(mono).consumeErrorWith(exceptionRef::set).verify();, +		StepVerifier.create(mono).consumeErrorWith(ex -> assertNotSame(exceptionRef.get(), ex)).verify();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +			return createNotFoundError();, +				.switchIfEmpty(createNotFoundError()), +	private <R> Mono<R> createNotFoundError() {, +		return Mono.defer(() -> {, +			Exception ex = new ResponseStatusException(HttpStatus.NOT_FOUND, "No matching handler");, +			return Mono.error(ex);, +		});, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ResourceWebHandler.java, +					return Mono.error(new ResponseStatusException(HttpStatus.NOT_FOUND));, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/DispatcherHandlerErrorTests.java, +import java.util.concurrent.atomic.AtomicReference;, +		Mono<Void> mono = this.dispatcherHandler.handle(exchange);, +		StepVerifier.create(mono), +				.consumeErrorWith(ex -> {, +					assertThat(ex, instanceOf(ResponseStatusException.class));, +					assertThat(ex.getMessage(), is("404 NOT_FOUND \"No matching handler\""));, +, +		// SPR-17475, +		AtomicReference<Throwable> exceptionRef = new AtomicReference<>();, +		StepVerifier.create(mono).consumeErrorWith(exceptionRef::set).verify();, +		StepVerifier.create(mono).consumeErrorWith(ex -> assertNotSame(exceptionRef.get(), ex)).verify();, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/resource/ResourceWebHandlerTests.java, +import java.util.concurrent.atomic.AtomicReference;, +, +		Mono<Void> mono = this.handler.handle(exchange);, +, +		StepVerifier.create(mono), +, +		// SPR-17475, +		AtomicReference<Throwable> exceptionRef = new AtomicReference<>();, +		StepVerifier.create(mono).consumeErrorWith(exceptionRef::set).verify();, +		StepVerifier.create(mono).consumeErrorWith(ex -> assertNotSame(exceptionRef.get(), ex)).verify();]