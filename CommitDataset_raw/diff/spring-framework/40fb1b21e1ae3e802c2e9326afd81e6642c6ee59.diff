[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +import org.springframework.util.ClassUtils;, +		Class<?> handlerType = (handler instanceof String) ? , +		final Class<?> userType = ClassUtils.getUserClass(handlerType);, +				, +		Set<Method> methods = HandlerMethodSelector.selectMethods(userType, new MethodFilter() {, +				return getMappingForMethod(method, userType) != null;, +			T mapping = getMappingForMethod(method, userType);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +import org.springframework.util.ClassUtils;, +		Class<?> handlerType = (handler instanceof String) ? , +		final Class<?> userType = ClassUtils.getUserClass(handlerType);, +				, +		Set<Method> methods = HandlerMethodSelector.selectMethods(userType, new MethodFilter() {, +				return getMappingForMethod(method, userType) != null;, +			T mapping = getMappingForMethod(method, userType);, +++ /dev/null, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +import org.springframework.util.ClassUtils;, +		Class<?> handlerType = (handler instanceof String) ? , +		final Class<?> userType = ClassUtils.getUserClass(handlerType);, +				, +		Set<Method> methods = HandlerMethodSelector.selectMethods(userType, new MethodFilter() {, +				return getMappingForMethod(method, userType) != null;, +			T mapping = getMappingForMethod(method, userType);, +++ /dev/null, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HandlerMethodAnnotationDetectionTests.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.servlet.mvc.method.annotation;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +, +import java.text.SimpleDateFormat;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Date;, +import java.util.List;, +import java.util.Map;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.Parameterized;, +import org.junit.runners.Parameterized.Parameters;, +import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;, +import org.springframework.aop.interceptor.SimpleTraceInterceptor;, +import org.springframework.aop.support.DefaultPointcutAdvisor;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +import org.springframework.beans.propertyeditors.CustomDateEditor;, +import org.springframework.http.converter.HttpMessageConverter;, +import org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;, +import org.springframework.mock.web.MockHttpServletRequest;, +import org.springframework.mock.web.MockHttpServletResponse;, +import org.springframework.stereotype.Controller;, +import org.springframework.ui.Model;, +import org.springframework.web.bind.WebDataBinder;, +import org.springframework.web.bind.annotation.ExceptionHandler;, +import org.springframework.web.bind.annotation.InitBinder;, +import org.springframework.web.bind.annotation.ModelAttribute;, +import org.springframework.web.bind.annotation.RequestHeader;, +import org.springframework.web.bind.annotation.RequestMapping;, +import org.springframework.web.bind.annotation.RequestMethod;, +import org.springframework.web.bind.annotation.RequestParam;, +import org.springframework.web.bind.annotation.ResponseBody;, +import org.springframework.web.context.support.GenericWebApplicationContext;, +import org.springframework.web.servlet.HandlerExecutionChain;, +, +/**, + * Test various scenarios for detecting method-level and method parameter annotations depending , + * on where they are located -- on interfaces, parent classes, in parameterized methods, or in , + * combination with proxies., + * , + * @author Rossen Stoyanchev, + */, +@RunWith(Parameterized.class), +public class HandlerMethodAnnotationDetectionTests {, +	, +	@Parameters, +	public static Collection<Object[]> handlerTypes() {, +		Object[][] array = new Object[12][2];, +, +		array[0] = new Object[] { SimpleController.class, true};  // CGLib proxy, +		array[1] = new Object[] { SimpleController.class, false};, +		]