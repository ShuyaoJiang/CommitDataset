[+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * @since 5.0, +		DecimalFormat decimal = new DecimalFormat("0.0", DECIMAL_FORMAT_SYMBOLS);, +		List<String> values = languages.stream(), +				.map(range ->, +						range.getWeight() == Locale.LanguageRange.MAX_WEIGHT ?, +								range.getRange() :, +								range.getRange() + ";q=" + decimal.format(range.getWeight())), +	 * @since 5.0, +	 * A variant of {@link #getAcceptLanguage()} that converts each, +	 * {@link java.util.Locale.LanguageRange} to a {@link Locale}., +	 * @since 5.0, +	 */, +	public List<Locale> getAcceptLanguageAsLocales() {, +		List<Locale.LanguageRange> ranges = getAcceptLanguage();, +		if (ranges.isEmpty()) {, +			return Collections.emptyList();, +		}, +		return ranges.stream(), +				.map(range -> Locale.forLanguageTag(range.getRange())), +				.filter(locale -> StringUtils.hasText(locale.getDisplayName())), +				.collect(Collectors.toList());, +	}, +, +	/**, +	 * @since 5.0, +	 * @since 5.0, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * @since 5.0, +		DecimalFormat decimal = new DecimalFormat("0.0", DECIMAL_FORMAT_SYMBOLS);, +		List<String> values = languages.stream(), +				.map(range ->, +						range.getWeight() == Locale.LanguageRange.MAX_WEIGHT ?, +								range.getRange() :, +								range.getRange() + ";q=" + decimal.format(range.getWeight())), +	 * @since 5.0, +	 * A variant of {@link #getAcceptLanguage()} that converts each, +	 * {@link java.util.Locale.LanguageRange} to a {@link Locale}., +	 * @since 5.0, +	 */, +	public List<Locale> getAcceptLanguageAsLocales() {, +		List<Locale.LanguageRange> ranges = getAcceptLanguage();, +		if (ranges.isEmpty()) {, +			return Collections.emptyList();, +		}, +		return ranges.stream(), +				.map(range -> Locale.forLanguageTag(range.getRange())), +				.filter(locale -> StringUtils.hasText(locale.getDisplayName())), +				.collect(Collectors.toList());, +	}, +, +	/**, +	 * @since 5.0, +	 * @since 5.0, +++ b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java, +		String headerValue = "fr-ch, fr;q=0.9, en-*;q=0.8, de;q=0.7, *;q=0.5";, +, +		List<Locale.LanguageRange> expectedRanges = Arrays.asList(, +				new Locale.LanguageRange("en-*", 0.8),, +		);, +		assertEquals(expectedRanges, headers.getAcceptLanguage());, +, +		List<Locale> expectedLocales = Arrays.asList(, +				Locale.forLanguageTag("fr-ch"),, +				Locale.forLanguageTag("fr"),, +				Locale.forLanguageTag("en"),, +				Locale.forLanguageTag("de"), +		);, +		assertEquals(expectedLocales, headers.getAcceptLanguageAsLocales());, +	}, +, +	@Test, +	public void contentLanguageSerialized() {, +		headers.set(HttpHeaders.CONTENT_LANGUAGE,  "de, en_CA");, +		assertEquals("Expected one (first) locale", Locale.GERMAN, headers.getContentLanguage());]