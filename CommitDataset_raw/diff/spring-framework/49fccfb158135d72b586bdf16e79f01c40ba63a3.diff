[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMappings.java, +, +		 * Return or create {@link AnnotationTypeMappings} for the specified annotation type., +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMappings.java, +, +		 * Return or create {@link AnnotationTypeMappings} for the specified annotation type., +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		if (annotationName.startsWith("java.")) {, +			return true;, +		}, +		if (AnnotationsScanner.hasPlainJavaAnnotationsOnly(clazz)) {, +			return false;, +		}, +		// TODO: annotation presence registry to be integrated here, +		return true;, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMappings.java, +, +		 * Return or create {@link AnnotationTypeMappings} for the specified annotation type., +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		if (annotationName.startsWith("java.")) {, +			return true;, +		}, +		if (AnnotationsScanner.hasPlainJavaAnnotationsOnly(clazz)) {, +			return false;, +		}, +		// TODO: annotation presence registry to be integrated here, +		return true;, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java, +	private static boolean isIgnorable(Class<?> annotationType) {, +		return AnnotationFilter.PLAIN.matches(annotationType);, +	}, +, +	static boolean isKnownEmpty(AnnotatedElement source, SearchStrategy searchStrategy) {, +		if (hasPlainJavaAnnotationsOnly(source)) {, +			return hasPlainJavaAnnotationsOnly((Class<?>) annotatedElement);, +			return hasPlainJavaAnnotationsOnly(((Member) annotatedElement).getDeclaringClass());, +, +	static boolean hasPlainJavaAnnotationsOnly(Class<?> type) {, +		return (type.getName().startsWith("java.") || type == Ordered.class);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMappings.java, +, +		 * Return or create {@link AnnotationTypeMappings} for the specified annotation type., +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		if (annotationName.startsWith("java.")) {, +			return true;, +		}, +		if (AnnotationsScanner.hasPlainJavaAnnotationsOnly(clazz)) {, +			return false;, +		}, +		// TODO: annotation presence registry to be integrated here, +		return true;, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java, +	private static boolean isIgnorable(Class<?> annotationType) {, +		return AnnotationFilter.PLAIN.matches(annotationType);, +	}, +, +	static boolean isKnownEmpty(AnnotatedElement source, SearchStrategy searchStrategy) {, +		if (hasPlainJavaAnnotationsOnly(source)) {, +			return hasPlainJavaAnnotationsOnly((Class<?>) annotatedElement);, +			return hasPlainJavaAnnotationsOnly(((Member) annotatedElement).getDeclaringClass());, +, +	static boolean hasPlainJavaAnnotationsOnly(Class<?> type) {, +		return (type.getName().startsWith("java.") || type == Ordered.class);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/OrderUtils.java, +		return MergedAnnotations.from(type, SearchStrategy.EXHAUSTIVE).get(JAVAX_PRIORITY_ANNOTATION), +				.getValue(MergedAnnotation.VALUE, Integer.class).orElse(null);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMappings.java, +, +		 * Return or create {@link AnnotationTypeMappings} for the specified annotation type., +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		if (annotationName.startsWith("java.")) {, +			return true;, +		}, +		if (AnnotationsScanner.hasPlainJavaAnnotationsOnly(clazz)) {, +			return false;, +		}, +		// TODO: annotation presence registry to be integrated here, +		return true;, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java, +	private static boolean isIgnorable(Class<?> annotationType) {, +		return AnnotationFilter.PLAIN.matches(annotationType);, +	}, +, +	static boolean isKnownEmpty(AnnotatedElement source, SearchStrategy searchStrategy) {, +		if (hasPlainJavaAnnotationsOnly(source)) {, +			return hasPlainJavaAnnotationsOnly((Class<?>) annotatedElement);, +			return hasPlainJavaAnnotationsOnly(((Member) annotatedElement).getDeclaringClass());, +, +	static boolean hasPlainJavaAnnotationsOnly(Class<?> type) {, +		return (type.getName().startsWith("java.") || type == Ordered.class);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/OrderUtils.java, +		return MergedAnnotations.from(type, SearchStrategy.EXHAUSTIVE).get(JAVAX_PRIORITY_ANNOTATION), +				.getValue(MergedAnnotation.VALUE, Integer.class).orElse(null);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/TypeMappedAnnotations.java, +	static MergedAnnotations from(AnnotatedElement element, SearchStrategy searchStrategy,, +		if (AnnotationsScanner.isKnownEmpty(element, searchStrategy)) {, +	private static boolean isMappingForType(AnnotationTypeMapping mapping,, +			return (mappingIndex < mappings.size() ? mappings.get(mappingIndex) : null);, +					if (mapping != null && isMappingForType(mapping, annotationFilter, this.requiredType)) {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMappings.java]