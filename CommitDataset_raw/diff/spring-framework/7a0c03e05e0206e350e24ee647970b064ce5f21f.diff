[+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpConnector.java, +	 * Default constructor that creates a new instance of {@link HttpClient}., +	 * Constructor with an initialized {@link HttpClient}., +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpConnector.java, +	 * Default constructor that creates a new instance of {@link HttpClient}., +	 * Constructor with an initialized {@link HttpClient}., +++ b/src/docs/asciidoc/web/webflux-webclient.adoc, +Spring WebFlux includes a reactive, non-blocking `WebClient` for performing HTTP requests, +using a functional-style API that exposes Reactor `Flux` and `Mono` types, see, +<<web-reactive.adoc#webflux-reactive-libraries>>. The client relies on the same, +<<web-reactive.adoc#webflux-codecs,codecs>> that WebFlux server applications use to work, +with request and response content., +Internally `WebClient` delegates to an HTTP client library. By default it uses, +https://github.com/reactor/reactor-netty[Reactor Netty], there is built-in support for, +the Jetty https://github.com/jetty-project/jetty-reactive-httpclient[reactive HtpClient],, +and others can be plugged in through a `ClientHttpConnector`., +, +[[webflux-client-builder]], +== Configuration, +, +The simplest way to create a `WebClient` is through one of the static factory methods:, +, +* `WebClient.create()`, +* `WebClient.create(String baseUrl)`, +, +The above uses Reactor Netty `HttpClient` from "io.projectreactor.netty:reactor-netty", +with default settings and participates in global resources such for event loop threads and, +a connection pool, see <<webflux-client-builder-reactor, Reactor Netty configuration>>., +, +The `WebClient.Builder` can be used for access to further options:, +, +* `uriBuilderFactory` -- customized `UriBuilderFactory` to use as a base URL., +* `defaultHeader` -- headers for every request., +* `defaultCookie)` -- cookies for every request., +* `defaultRequest` -- `Consumer` to customize every request., +* `filter` -- client filter for every request., +* `exchangeStrategies` -- HTTP message reader/writer customizations., +* `clientConnector` -- HTTP client library settings., +, +For example, to configure <<web-reactive.adoc#webflux-codecs,HTTP codecs>>:, +, +[source,java,intent=0], +[subs="verbatim,quotes"], +----, +	ExchangeStrategies strategies = ExchangeStrategies.builder(), +			.codecs(configurer -> {, +				// ..., +			}), +			.build();, +, +	WebClient client = WebClient.builder(), +			.exchangeStrategies(strategies), +			.build();, +----, +, +Once built a `WebClient` instance is immutable. However, you can clone it, and build a, +modified copy without affecting the original instance:, +, +[source,java,intent=0], +[subs="verbatim,quotes"], +----, +	WebClient client1 = WebClient.builder(), +			.filter(filterA).filter(filterB).build();, +, +	WebClient client2 = client1.mutate(), +			.filter(filterC).filter(filterD).build();, +, +	// client1 has filterA, filterB, +, +	// client2 has filterA, filterB, filterC, filterD, +----, +, +, +, +[[webflux-client-builder-reactor]], +=== Reactor Netty, +, +To customize Reactor Netty settings:, +, +[source,java,intent=0], +[subs="verbatim,quotes"], +----, +	HttpClient httpClient = HttpClient.create(), +	httpClient.secure(sslSpec -> ...);, +	ClientHttpConnector connector = new ReactorClientHttpConnector(httpClient);, +, +	WebClient webClient = WebClient.builder().clientConnector(connector).build();, +----, +, +By default `HttpClient` participates in the global Reactor Netty resources held in, +`reactor.netty.http.HttpResources`, including event loop threads and a connection pool., +This is the recommended mode since fixed, shared resources are preferred for event loop, +concurrency. In this mode global resources remain active until the process exits., +, +If the server is timed with the process, there is typically no need for an explicit, +shutdown. However if the server can start or stop in-process, e.g. Spring MVC, +application deployed as a WAR, you can declare a Spring-managed bean of type, +`ReactorResourceFactory` with `globaResources=true` (the default) to ensure the Reactor, +Netty global resources are shut down when the Spring `ApplicationContext` is closed:, +]