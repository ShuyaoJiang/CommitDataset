[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java, + * Copyright 2002-2009 the original author or authors., + * {@link org.springframework.aop.aspectj.AspectInstanceFactory} implementation, + * backed by a Spring {@link org.springframework.beans.factory.BeanFactory}., +		Class<?> type = this.beanFactory.getType(this.name);, +			Order order = type.getAnnotation(Order.class);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java, + * Copyright 2002-2009 the original author or authors., + * {@link org.springframework.aop.aspectj.AspectInstanceFactory} implementation, + * backed by a Spring {@link org.springframework.beans.factory.BeanFactory}., +		Class<?> type = this.beanFactory.getType(this.name);, +			Order order = type.getAnnotation(Order.class);, +++ b/org.springframework.core/src/main/java/org/springframework/core/annotation/Order.java, + * Copyright 2002-2009 the original author or authors., + * Annotation that defines ordering. The value is optional, and represents order value, + * as defined in the {@link Ordered} interface. Lower values have higher priority., + * The default value is <code>Ordered.LOWEST_PRECEDENCE</code>, indicating, + * lowest priority (losing to any other specified order value)., + * <p><b>NOTE:</b> Annotation-based ordering is supported for specific kinds of, + * components only, e.g. for annotation-based AspectJ aspects. Spring container, + * strategies, on the other hand, are typically based on the {@link Ordered}, + * interface in order to allow for configurable ordering of each <i>instance</i>., + * @author Juergen Hoeller, +	/**, +	 * The order value. Default is {@link Ordered#LOWEST_PRECEDENCE}., +	 * @see Ordered#getOrder(), +	 */]