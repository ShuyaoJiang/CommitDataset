[+++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/CoRouterFunctionDsl.kt, + * Coroutines variant of [router]., + *, + * @author Sebastien Deleuze, + * @since 5.2, + */, +fun coRouter(routes: (CoRouterFunctionDsl.() -> Unit)) =, +        CoRouterFunctionDsl(routes).build(), +, +/**, +class CoRouterFunctionDsl(private val init: (CoRouterFunctionDsl.() -> Unit)) {, +        builder.add(nest(this, CoRouterFunctionDsl(r).build())), +    internal fun build(): RouterFunction<ServerResponse> {, +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/CoRouterFunctionDsl.kt, + * Coroutines variant of [router]., + *, + * @author Sebastien Deleuze, + * @since 5.2, + */, +fun coRouter(routes: (CoRouterFunctionDsl.() -> Unit)) =, +        CoRouterFunctionDsl(routes).build(), +, +/**, +class CoRouterFunctionDsl(private val init: (CoRouterFunctionDsl.() -> Unit)) {, +        builder.add(nest(this, CoRouterFunctionDsl(r).build())), +    internal fun build(): RouterFunction<ServerResponse> {, +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/RouterFunctionDsl.kt, + * Allow to create easily a WebFlux.fn `RouterFunction<ServerResponse>` from a Kotlin, + * router DSL leveraging WebFlux.fn Java API ([RouterFunction], [RequestPredicate],, +fun router(routes: RouterFunctionDsl.() -> Unit) = RouterFunctionDsl(routes).build(), +class RouterFunctionDsl(private val init: RouterFunctionDsl.() -> Unit) {, +		builder.nest(this, Supplier { RouterFunctionDsl(init).build() }), +		builder.path(this, Supplier { RouterFunctionDsl(init).build() }), +	internal fun build(): RouterFunction<ServerResponse> {]