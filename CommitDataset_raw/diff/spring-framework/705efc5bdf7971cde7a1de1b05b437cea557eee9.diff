[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/DefaultMvcResult.java, + * Copyright 2002-2014 the original author or authors., +	private static final Object RESULT_NONE = new Object();, +, +, +	private Object asyncResult = RESULT_NONE;, +		if (this.asyncResult == RESULT_NONE) {, +			if ((timeout != 0) && this.mockRequest.isAsyncStarted()) {, +					timeout = this.mockRequest.getAsyncContext().getTimeout();, +				if (!awaitAsyncResult(timeout) && this.asyncResult == RESULT_NONE) {, +		}, +		return (this.asyncResult == RESULT_NONE ? null : this.asyncResult);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/DefaultMvcResult.java, + * Copyright 2002-2014 the original author or authors., +	private static final Object RESULT_NONE = new Object();, +, +, +	private Object asyncResult = RESULT_NONE;, +		if (this.asyncResult == RESULT_NONE) {, +			if ((timeout != 0) && this.mockRequest.isAsyncStarted()) {, +					timeout = this.mockRequest.getAsyncContext().getTimeout();, +				if (!awaitAsyncResult(timeout) && this.asyncResult == RESULT_NONE) {, +		}, +		return (this.asyncResult == RESULT_NONE ? null : this.asyncResult);, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java, + * Copyright 2002-2014 the original author or authors., +	@Test, +	@Ignore, +	public void testDeferredResultWithSetValue() throws Exception {, +		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("deferredResultWithSetValue", "true")), +				.andExpect(request().asyncStarted()), +				.andExpect(request().asyncResult(new Person("Joe"))), +				.andReturn();, +, +		this.mockMvc.perform(asyncDispatch(mvcResult)), +				.andExpect(status().isOk()), +				.andExpect(content().contentType(MediaType.APPLICATION_JSON)), +				.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}"));, +	}, +, +		@RequestMapping(value="/{id}", params="deferredResultWithSetValue", produces="application/json"), +		@ResponseBody, +		public DeferredResult<Person> getDeferredResultWithSetValue() {, +			DeferredResult<Person> deferredResult = new DeferredResult<Person>();, +			deferredResult.setResult(new Person("Joe"));, +			return deferredResult;, +		}, +]