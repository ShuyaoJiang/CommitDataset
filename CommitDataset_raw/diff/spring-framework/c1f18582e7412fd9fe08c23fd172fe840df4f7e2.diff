[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, +import java.util.Map.Entry;, +	 * <p>Default is {@code true}, i.e. the Java Activation Framework is used (if available)., +		List<MediaType> requestedMediaTypes = getMediaTypes(((ServletRequestAttributes) attrs).getRequest());, +		List<View> candidateViews = getCandidateViews(viewName, locale, requestedMediaTypes);, +		View bestView = getBestView(candidateViews, requestedMediaTypes);, +	private List<View> getCandidateViews(String viewName, Locale locale, List<MediaType> requestedMediaTypes), +			throws Exception {, +		List<View> candidateViews = new ArrayList<View>();, +, +		for (ViewResolver viewResolver : this.viewResolvers) {, +			View view = viewResolver.resolveViewName(viewName, locale);, +			if (view != null) {, +				candidateViews.add(view);, +			}, +			for (MediaType requestedMediaType : requestedMediaTypes) {, +				List<String> extensions = getExtensionsForMediaType(requestedMediaType);, +				for (String extension : extensions) {, +					String viewNameWithExtension = viewName + "." + extension;, +					view = viewResolver.resolveViewName(viewNameWithExtension, locale);, +					if (view != null) {, +						candidateViews.add(view);, +					}, +				}, +, +			}, +		}, +, +		if (!CollectionUtils.isEmpty(this.defaultViews)) {, +			candidateViews.addAll(this.defaultViews);, +		}, +		return candidateViews;, +	}, +, +	private List<String> getExtensionsForMediaType(MediaType requestedMediaType) {, +		List<String> result = new ArrayList<String>();, +		for (Entry<String, MediaType> entry : mediaTypes.entrySet()) {, +			if (requestedMediaType.includes(entry.getValue())) {, +				result.add(entry.getKey());, +			}, +		}, +		return result;, +	}, +, +	private View getBestView(List<View> candidateViews, List<MediaType> requestedMediaTypes) {, +		MediaType bestRequestedMediaType = null;, +		View bestView = null;, +		for (MediaType requestedMediaType : requestedMediaTypes) {, +			for (View candidateView : candidateViews) {, +				if (StringUtils.hasText(candidateView.getContentType())) {, +					MediaType candidateContentType = MediaType.parseMediaType(candidateView.getContentType());, +					if (requestedMediaType.includes(candidateContentType)) {, +						bestRequestedMediaType = requestedMediaType;, +						bestView = candidateView;, +						break;, +					}, +				}, +			}, +			if (bestView != null) {, +				if (logger.isDebugEnabled()) {, +					logger.debug(, +							"Returning [" + bestView + "] based on requested media type '" + bestRequestedMediaType +, +									"'");, +				}, +				break;, +			}, +		}, +		return bestView;, +, +	}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, +import java.util.Map.Entry;, +	 * <p>Default is {@code true}, i.e. the Java Activation Framework is used (if available)., +		List<MediaType> requestedMediaTypes = getMediaTypes(((ServletRequestAttributes) attrs).getRequest());, +		List<View> candidateViews = getCandidateViews(viewName, locale, requestedMediaTypes);, +		View bestView = getBestView(candidateViews, requestedMediaTypes);, +	private List<View> getCandidateViews(String viewName, Locale locale, List<MediaType> requestedMediaTypes), +			throws Exception {, +		List<View> candidateViews = new ArrayList<View>();, +, +		for (ViewResolver viewResolver : this.viewResolvers) {, +			View view = viewResolver.resolveViewName(viewName, locale);, +			if (view != null) {, +				candidateViews.add(view);, +			}, +			for (MediaType requestedMediaType : requestedMediaTypes) {, +				List<String> extensions = getExtensionsForMediaType(requestedMediaType);, +				for (String extension : extensions) {, +					String viewNameWithExtension = viewName + "." + extension;, +					view = viewResolver.resolveViewName(viewNameWithExtension, locale);, +					if (view != null) {, +						candidateViews.add(view);, +					}, +				}, +, +			}, +		}, +, +		if (!CollectionUtils.isEmpty(this.defaultViews)) {]