[+++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +				Type[] genericParameterTypes = this.executable.getGenericParameterTypes();, +				int index = this.parameterIndex;, +				if (this.executable instanceof Constructor &&, +						ClassUtils.isInnerClass(this.executable.getDeclaringClass()) &&, +						genericParameterTypes.length == this.executable.getParameterCount() - 1) {, +					// Bug in javac: type array excludes enclosing instance parameter, +					// for inner classes with at least one generic constructor parameter,, +					// so access it with the actual parameter index lowered by 1, +					index = this.parameterIndex - 1;, +				}, +				paramType = (index >= 0 && index < genericParameterTypes.length ?, +						genericParameterTypes[index] : getParameterType());, +			paramAnns = (index >= 0 && index < annotationArray.length ?, +					adaptAnnotationArray(annotationArray[index]) : EMPTY_ANNOTATION_ARRAY);, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +				Type[] genericParameterTypes = this.executable.getGenericParameterTypes();, +				int index = this.parameterIndex;, +				if (this.executable instanceof Constructor &&, +						ClassUtils.isInnerClass(this.executable.getDeclaringClass()) &&, +						genericParameterTypes.length == this.executable.getParameterCount() - 1) {, +					// Bug in javac: type array excludes enclosing instance parameter, +					// for inner classes with at least one generic constructor parameter,, +					// so access it with the actual parameter index lowered by 1, +					index = this.parameterIndex - 1;, +				}, +				paramType = (index >= 0 && index < genericParameterTypes.length ?, +						genericParameterTypes[index] : getParameterType());, +			paramAnns = (index >= 0 && index < annotationArray.length ?, +					adaptAnnotationArray(annotationArray[index]) : EMPTY_ANNOTATION_ARRAY);, +++ b/spring-core/src/test/java/org/springframework/core/MethodParameterTests.java, +import java.util.concurrent.Callable;, +		Constructor<?> constructor = InnerClass.class.getConstructor(getClass(), String.class, Callable.class);, +		assertEquals(Callable.class, methodParameter.getParameterType());, +	@Test  // SPR-16734, +	public void genericConstructorParameterInInnerClass() throws Exception {, +		Constructor<?> constructor = InnerClass.class.getConstructor(getClass(), String.class, Callable.class);, +, +		MethodParameter methodParameter = MethodParameter.forExecutable(constructor, 0);, +		assertEquals(getClass(), methodParameter.getParameterType());, +		assertEquals(getClass(), methodParameter.getGenericParameterType());, +, +		methodParameter = MethodParameter.forExecutable(constructor, 1);, +		assertEquals(String.class, methodParameter.getParameterType());, +		assertEquals(String.class, methodParameter.getGenericParameterType());, +, +		methodParameter = MethodParameter.forExecutable(constructor, 2);, +		assertEquals(Callable.class, methodParameter.getParameterType());, +		assertEquals(ResolvableType.forClassWithGenerics(Callable.class, Integer.class).getType(),, +				methodParameter.getGenericParameterType());, +	}, +, +		public InnerClass(@Param String s, Callable<Integer> i) {]