[+++ b/spring-context/src/main/kotlin/org/springframework/context/support/BeanDefinitionDsl.kt, + * Copyright 2002-2018 the original author or authors., +	beans.init = init, +	internal lateinit var init: BeanDefinitionDsl.() -> Unit, +, +	/**, +	 * Access to the context for advanced use-cases., +	 * @since 5.1, +	 */, +	lateinit var context: GenericApplicationContext, +, +	/**, +	 * Shortcut for `context.environment`, +	 * @since 5.1, +	 */, +	val env : ConfigurableEnvironment, +		get() = context.environment, +, +			null -> context.registerBean(T::class.java, customizer), +			else -> context.registerBean(name, T::class.java, customizer), +, +									  crossinline function: () -> T) {, +, +			null -> context.registerBean(T::class.java,, +					Supplier { function.invoke() }, customizer), +			else -> context.registerBean(name, T::class.java,, +					Supplier { function.invoke() }, customizer), +, +, +	/**, +	 * Get a reference to the bean by type or type + name with the syntax, +	 * `ref<Foo>()` or `ref<Foo>("foo")`. When leveraging Kotlin type inference, +	 * it could be as short as `ref()` or `ref("foo")`., +	 * @param name the name of the bean to retrieve, +	 * @param T type the bean must match, can be an interface or superclass, +	 */, +	inline fun <reified T : Any> ref(name: String? = null) : T = when (name) {, +		null -> context.getBean(T::class.java), +		else -> context.getBean(name, T::class.java), +	fun profile(profile: String, init: BeanDefinitionDsl.() -> Unit) {, +		beans.init = init, +					init: BeanDefinitionDsl.() -> Unit) {, +		beans.init = init, +		this.context = context, +		init(), +++ b/spring-context/src/main/kotlin/org/springframework/context/support/BeanDefinitionDsl.kt, + * Copyright 2002-2018 the original author or authors., +	beans.init = init, +	internal lateinit var init: BeanDefinitionDsl.() -> Unit, +, +	/**, +	 * Access to the context for advanced use-cases., +	 * @since 5.1, +	 */, +	lateinit var context: GenericApplicationContext, +, +	/**, +	 * Shortcut for `context.environment`, +	 * @since 5.1, +	 */, +	val env : ConfigurableEnvironment, +		get() = context.environment, +, +			null -> context.registerBean(T::class.java, customizer), +			else -> context.registerBean(name, T::class.java, customizer), +, +									  crossinline function: () -> T) {, +, +			null -> context.registerBean(T::class.java,, +					Supplier { function.invoke() }, customizer), +			else -> context.registerBean(name, T::class.java,, +					Supplier { function.invoke() }, customizer), +, +, +	/**, +	 * Get a reference to the bean by type or type + name with the syntax, +	 * `ref<Foo>()` or `ref<Foo>("foo")`. When leveraging Kotlin type inference, +	 * it could be as short as `ref()` or `ref("foo")`., +	 * @param name the name of the bean to retrieve, +	 * @param T type the bean must match, can be an interface or superclass, +	 */, +	inline fun <reified T : Any> ref(name: String? = null) : T = when (name) {, +		null -> context.getBean(T::class.java), +		else -> context.getBean(name, T::class.java), +	fun profile(profile: String, init: BeanDefinitionDsl.() -> Unit) {, +		beans.init = init, +					init: BeanDefinitionDsl.() -> Unit) {, +		beans.init = init, +		this.context = context, +		init(), +++ b/spring-context/src/test/kotlin/org/springframework/context/support/BeanDefinitionDslTests.kt, + * Copyright 2002-2018 the original author or authors., +import org.springframework.beans.factory.getBeansOfType, +import org.springframework.mock.env.MockPropertySource, +	@Test  // SPR-16412, +	fun `Declare beans depending on environment properties`() {, +		val beans = beans {, +			val n = env["number-of-beans"].toInt(), +			for (i in 1..n) {, +				bean("string$i") { Foo() }]