[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/ArgPreparedStatementSetter.java, +				doSetValue(ps, i, arg);, +			}, +		}, +	}, +, +	/**, +	 * Set the value for prepared statements specified parameter index using the passed in value., +	 * This method can be overridden by sub-classes if needed., +	 * @param ps the PreparedStatement, +	 * @param parameterPosition index of the parameter position, +	 * @param argValue the value to set, +	 * @throws SQLException, +	 */, +	protected void doSetValue(PreparedStatement ps, int parameterPosition, Object argValue) throws SQLException {, +		if (argValue instanceof SqlParameterValue) {, +			SqlParameterValue paramValue = (SqlParameterValue) argValue;, +			StatementCreatorUtils.setParameterValue(ps, parameterPosition + 1, paramValue, paramValue.getValue());, +			StatementCreatorUtils.setParameterValue(ps, parameterPosition + 1, SqlTypeValue.TYPE_UNKNOWN, argValue);, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/ArgPreparedStatementSetter.java, +				doSetValue(ps, i, arg);, +			}, +		}, +	}, +, +	/**, +	 * Set the value for prepared statements specified parameter index using the passed in value., +	 * This method can be overridden by sub-classes if needed., +	 * @param ps the PreparedStatement, +	 * @param parameterPosition index of the parameter position, +	 * @param argValue the value to set, +	 * @throws SQLException, +	 */, +	protected void doSetValue(PreparedStatement ps, int parameterPosition, Object argValue) throws SQLException {, +		if (argValue instanceof SqlParameterValue) {, +			SqlParameterValue paramValue = (SqlParameterValue) argValue;, +			StatementCreatorUtils.setParameterValue(ps, parameterPosition + 1, paramValue, paramValue.getValue());, +			StatementCreatorUtils.setParameterValue(ps, parameterPosition + 1, SqlTypeValue.TYPE_UNKNOWN, argValue);, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/ArgTypePreparedStatementSetter.java, +		int parameterPosition = 1;, +								doSetValue(ps, parameterPosition, this.argTypes[i], argValue);, +								parameterPosition++;, +							doSetValue(ps, parameterPosition, this.argTypes[i], entry);, +							parameterPosition++;, +					doSetValue(ps, parameterPosition, this.argTypes[i], arg);, +					parameterPosition++;, +	/**, +	 * Set the value for the prepared statement's specified parameter position using the passed in, +	 * value and type. This method can be overridden by sub-classes if needed., +	 * @param ps the PreparedStatement, +	 * @param parameterPosition index of the parameter position, +	 * @param argType the argument type, +	 * @param argValue the argument value, +	 * @throws SQLException, +	 */, +	protected void doSetValue(PreparedStatement ps, int parameterPosition, int argType, Object argValue), +			throws SQLException {, +		StatementCreatorUtils.setParameterValue(ps, parameterPosition, argType, argValue);, +	}, +]