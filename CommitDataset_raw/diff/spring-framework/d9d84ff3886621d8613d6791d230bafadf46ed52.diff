[+++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +	 * Return a {@link DataBufferFactory} that can be used for creating the body., +	 * @return a buffer factory, +	 * @see #writeWith(Publisher), +	 */, +	DataBufferFactory bufferFactory();, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +	 * Return a {@link DataBufferFactory} that can be used for creating the body., +	 * @return a buffer factory, +	 * @see #writeWith(Publisher), +	 */, +	DataBufferFactory bufferFactory();, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractRequestBodyPublisher.java, +	private final AtomicReference<State> state = new AtomicReference<>(State.UNSUBSCRIBED);, +, +		return (this.demand.get() > 0);, +	private boolean changeState(State oldState, State newState) {, +, +		private State state() {, +, +, +			void subscribe(AbstractRequestBodyPublisher publisher, Subscriber<? super DataBuffer> subscriber) {, +					Subscription subscription = new RequestBodySubscription(publisher);, +, +, +						}, +						else {, +					}, +					catch (IOException ex) {, +, +, +		void subscribe(AbstractRequestBodyPublisher publisher, Subscriber<? super DataBuffer> subscriber) {, +, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +	 * Return a {@link DataBufferFactory} that can be used for creating the body., +	 * @return a buffer factory, +	 * @see #writeWith(Publisher), +	 */, +	DataBufferFactory bufferFactory();, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractRequestBodyPublisher.java, +	private final AtomicReference<State> state = new AtomicReference<>(State.UNSUBSCRIBED);, +, +		return (this.demand.get() > 0);, +	private boolean changeState(State oldState, State newState) {, +, +		private State state() {, +, +, +			void subscribe(AbstractRequestBodyPublisher publisher, Subscriber<? super DataBuffer> subscriber) {, +					Subscription subscription = new RequestBodySubscription(publisher);, +, +, +						}, +						else {, +					}, +					catch (IOException ex) {, +, +, +		void subscribe(AbstractRequestBodyPublisher publisher, Subscriber<? super DataBuffer> subscriber) {, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java, + * Copyright 2002-2016 the original author or authors., +, +, +	 * Initialize a URI that represents the request., +	 * <p>Invoked lazily on the first call to {@link #getURI()} and then cached., +	 * @throws URISyntaxException, +	 */, +	protected abstract URI initUri() throws URISyntaxException;, +, +	/**, +	 * Initialize the headers from the underlying request., +	 * <p>Invoked lazily on the first call to {@link #getHeaders()} and then cached., +	 */, +	protected abstract HttpHeaders initHeaders();, +, +	/**, +	 * Initialize the cookies from the underlying request., +	 * <p>Invoked lazily on the first access to cookies via {@link #getHeaders()}, +	 * and then cached., +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +	 * Return a {@link DataBufferFactory} that can be used for creating the body., +	 * @return a buffer factory, +	 * @see #writeWith(Publisher), +	 */, +	DataBufferFactory bufferFactory();, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractRequestBodyPublisher.java, +	private final AtomicReference<State> state = new AtomicReference<>(State.UNSUBSCRIBED);, +, +		return (this.demand.get() > 0);, +	private boolean changeState(State oldState, State newState) {, +]