[+++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +	private static final ReactiveAdapterRegistry reactiveAdapterRegistry =, +			new ReactiveAdapterRegistry();, +, +		String reactiveSuffix = "";, +, +			ReactiveAdapter adapter = reactiveAdapterRegistry.getAdapter(valueClass);, +			if (adapter != null && !adapter.getDescriptor().isNoValue()) {, +				reactiveSuffix = ClassUtils.getShortName(valueClass);, +				valueClass = parameter.nested().getNestedParameterType();, +			}, +		return (pluralize ? pluralize(name) : name + reactiveSuffix);, +		String reactiveSuffix = "";, +, +			ReactiveAdapter adapter = reactiveAdapterRegistry.getAdapter(valueClass);, +			if (adapter != null && !adapter.getDescriptor().isNoValue()) {, +				reactiveSuffix = ClassUtils.getShortName(valueClass);, +				valueClass = ResolvableType.forMethodReturnType(method).getGeneric(0).resolve();, +			}, +		return (pluralize ? pluralize(name) : name + reactiveSuffix);, +++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +	private static final ReactiveAdapterRegistry reactiveAdapterRegistry =, +			new ReactiveAdapterRegistry();, +, +		String reactiveSuffix = "";, +, +			ReactiveAdapter adapter = reactiveAdapterRegistry.getAdapter(valueClass);, +			if (adapter != null && !adapter.getDescriptor().isNoValue()) {, +				reactiveSuffix = ClassUtils.getShortName(valueClass);, +				valueClass = parameter.nested().getNestedParameterType();, +			}, +		return (pluralize ? pluralize(name) : name + reactiveSuffix);, +		String reactiveSuffix = "";, +, +			ReactiveAdapter adapter = reactiveAdapterRegistry.getAdapter(valueClass);, +			if (adapter != null && !adapter.getDescriptor().isNoValue()) {, +				reactiveSuffix = ClassUtils.getShortName(valueClass);, +				valueClass = ResolvableType.forMethodReturnType(method).getGeneric(0).resolve();, +			}, +		return (pluralize ? pluralize(name) : name + reactiveSuffix);, +++ b/spring-core/src/test/java/org/springframework/core/ConventionsTests.java, +import java.lang.reflect.Method;, +import java.util.Arrays;, +import java.util.List;, +import java.util.Set;, +import io.reactivex.Observable;, +import io.reactivex.Single;, +import reactor.core.publisher.Flux;, +import reactor.core.publisher.Mono;, +import org.springframework.util.ClassUtils;, +, +, +		assertEquals("Incorrect singular variable name", "testObject",, +				Conventions.getVariableNameForParameter(getMethodParameter(TestObject.class)));, +, +		assertEquals("Incorrect singular variable name", "testObject",, +				Conventions.getVariableNameForReturnType(getMethodForReturnType(TestObject.class)));, +, +, +		assertEquals("Incorrect plural List form", "testObjectList",, +				Conventions.getVariableNameForParameter(getMethodParameter(List.class)));, +, +		assertEquals("Incorrect plural List form", "testObjectList",, +				Conventions.getVariableNameForReturnType(getMethodForReturnType(List.class)));, +, +, +		assertEquals("Incorrect plural Set form", "testObjectList",, +				Conventions.getVariableNameForParameter(getMethodParameter(Set.class)));, +, +		assertEquals("Incorrect plural Set form", "testObjectList",, +				Conventions.getVariableNameForReturnType(getMethodForReturnType(Set.class)));, +	}, +, +	@Test, +	public void reactiveParameters() throws Exception {, +, +		assertEquals("testObjectMono",, +				Conventions.getVariableNameForParameter(getMethodParameter(Mono.class)));, +, +		assertEquals("testObjectFlux",, +				Conventions.getVariableNameForParameter(getMethodParameter(Flux.class)));, +, +		assertEquals("testObjectSingle",, +				Conventions.getVariableNameForParameter(getMethodParameter(Single.class)));, +, +		assertEquals("testObjectObservable",, +				Conventions.getVariableNameForParameter(getMethodParameter(Observable.class)));, +	}, +, +	@Test, +	public void reactiveReturnTypes() throws Exception {, +, +		assertEquals("testObjectMono",, +				Conventions.getVariableNameForReturnType(getMethodForReturnType(Mono.class)));, +, +		assertEquals("testObjectFlux",, +				Conventions.getVariableNameForReturnType(getMethodForReturnType(Flux.class)));, +, +		assertEquals("testObjectSingle",, +				Conventions.getVariableNameForReturnType(getMethodForReturnType(Single.class)));]