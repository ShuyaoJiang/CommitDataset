[+++ b/build.gradle, +	apply plugin: "detect-split-packages", +	detectSplitPackages {, +		projectsToScan -= project(":spring-instrument-tomcat"), +++ b/build.gradle, +	apply plugin: "detect-split-packages", +	detectSplitPackages {, +		projectsToScan -= project(":spring-instrument-tomcat"), +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/DetectSplitPackagesPlugin.groovy, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.build.gradle, +, +import org.gradle.api.DefaultTask, +import org.gradle.api.GradleException, +import org.gradle.api.Plugin, +import org.gradle.api.Project, +import org.gradle.api.Task, +import org.gradle.api.tasks.Input, +import org.gradle.api.tasks.TaskAction, +, +/**, + * Gradle plugin that detects identically named, non-empty packages split across multiple, + * subprojects, e.g. "org.springframework.context.annotation" existing in both spring-core, + * and spring-aspects. Adds a 'detectSplitPackages' task to the current project's task, + * collection. If the project already contains a 'check' task (i.e. is a typical Gradle, + * project with the "java" plugin applied), the 'check' task will be updated to depend on, + * the execution of 'detectSplitPackages'., + *, + * By default, all subprojects will be scanned. Use the 'projectsToScan' task property to, + * modify this value. Example usage:, + *, + *     apply plugin: 'detect-split-packages // typically applied to root project, + *, + *     detectSplitPackages {, + *         packagesToScan -= project(":spring-xyz") // scan every project but spring-xyz, + *     }, + *, + * @author Rob Winch, + * @author Glyn Normington, + * @author Chris Beams, + */, +public class DetectSplitPackagesPlugin implements Plugin<Project> {, +	public void apply(Project project) {, +		def tasks = project.tasks, +		Task detectSplitPackages = tasks.add('detectSplitPackages', DetectSplitPackagesTask.class), +		if (tasks.asMap.containsKey('check')) {, +			tasks.getByName('check').dependsOn detectSplitPackages, +		}, +	}, +}, +, +public class DetectSplitPackagesTask extends DefaultTask {, +, +	private static final String JAVA_FILE_SUFFIX = ".java", +	private static final String PACKAGE_SEPARATOR = ".", +	private static final String HIDDEN_DIRECTORY_PREFIX = ".", +, +	@Input, +	Set<Project> projectsToScan = project.subprojects, +, +	public DetectSplitPackagesTask() {, +		this.group = 'Verification', +		this.description = 'Detects packages split across two or more subprojects.', +	}, +, +	@TaskAction, +	public void detectSplitPackages() {, +		def splitPackages = doDetectSplitPackages(), +		if (!splitPackages.isEmpty()) {, +			def message = "The following split package(s) have been detected:\n", +			splitPackages.each { pkg, mod ->, +				message += " - ${pkg} (split across ${mod[0].name} and ${mod[1].name})\n", +			}, +			throw new GradleException(message), +		}, +	}, +, +	private Map<String, List<Project>> doDetectSplitPackages() {, +		def splitPackages = [:], +		def mergedProjects = findMergedProjects(), +		def packagesByProject = mapPackagesByProject(), +, +		def projects = packagesByProject.keySet().toArray(), +		def nProjects = projects.length, +]