[+++ b/spring-framework-reference/src/validation.xml, +    will not have the need to use the <interfacename>BeanWrapper</interfacename> directly. Because this, +    in order. We will explain the <interfacename>BeanWrapper</interfacename> in this chapter since, if you were, +    going to use it at all, you would most likely do so when trying to bind data to objects.</para>, +    <para>Spring's DataBinder and the lower-level BeanWrapper both use PropertyEditors to parse and format property values., +    The <interfacename>PropertyEditor</interfacename> concept is part of the JavaBeans specification, and is also explained in this chapter., +    Spring 3 introduces a "core.convert" package that provides a general type conversion facility, as well as a higher-level "format" package for formatting UI field values., +    These new packages may be used as simpler alternatives to PropertyEditors, and will also be discussed in this chapter.</para>, +    , +	<section id="core.convert">, +		<title>Spring 3 Type Conversion</title>, +		<para>, +			Spring 3 introduces a <filename>core.convert</filename> package that provides a general type conversion system., +			The system defines a SPI to implement type conversion logic, as well as a API to execute type conversions at runtime., +			Within a Spring container, if configured, this system can be used as an alternative to PropertyEditors to convert externalized bean property value strings to required property types., +			The public API may also be used anywhere in your application where type coersion is needed., +		</para>, +		<section id="core-convert-Converter-SPI">, +			<title>Converter SPI</title>, +			<para>, +				The SPI to implement type conversion logic is simple and strongly typed:, +			</para>, +			<programlisting language="java"><![CDATA[, +package org.springframework.core.converter;, +    , +public interface Converter<S, T> {, +    T convert(S source) throws Exception;        , +}]]>, +			</programlisting>, +			<para>, +				To create your own Converter, simply implement the Converter interface., +				Parameterize S as the type you are converting from, and T as the type you are converting to., +				For each call to convert(S), the source argument is guaranteed to be NOT null., +				Your Converter may throw any Exception if conversion fails., +				An IllegalArgumentException is often thrown to report an invalid source value., +				Take special care to ensure your Converter implementation is thread safe., +			</para>, +			<para>, +				Several converter implementations are provided in the <filename>core.convert.converters</filename> package as a convenience., +				These include converters to from String to Numbers and other common types., +				Note StringToInteger as an example Converter implementation:, +			</para>, +			<programlisting language="java"><![CDATA[, +package org.springframework.core.convert.converters;, +    , +public class StringToInteger implements Converter<String, Integer> {, +    public Integer convert(String source) {, +        return Integer.valueOf(source);, +    }, +}]]>, +			</programlisting>, +		</section>, +		<section id="core-convert-ConversionService-API">, +			<title>ConversionService API</title>, +			<para>, +				The ConversionService defines a public API for executing type conversion logic at runtime., +				Converters are <emphasis>always</emphasis> executed behind this API., +				User code should not depend on the Converter SPI., +			</para>, +			<programlisting language="java"><![CDATA[, +public interface ConversionService {, +, +	boolean canConvert(Class<?> sourceType, Class<?> targetType);, +	, +	<T> T convert(Object source, Class<T> targetType);, +	, +}]]>, +			</programlisting>, +			<para>, +				Most ConversionService implementations also implement <interface>ConverterRegistry</interface>, which provides a SPI for registering converters., +				Internally, a ConversionService implementation delegates to its registered Converters to carry out type conversion logic., +			</para>, +			<para>, +				Two ConversionService implementations are provided with the system in the <filename>core.convert.support</filename> package., +				<classname>GenericConversionService</classname> is a generic implementation designed to be explicitly configured, either programatically or declaratively as a Spring bean., +				<classname>DefaultConversionService</classname> is a subclass that pre-registers the common Converters in the <filename>core.converter</filename> package as a convenience., +			</para>, +		</section>, +		<section id="core-convert-Spring-config">, +			<title>Configuring a ConversionService</title>, +			<para>, +				A ConversionService is a stateless object designed to be instantiated on application startup, then shared between multiple threads., +				In a Spring application, you typically configure a ConversionService instance per Spring container (or ApplicationContext)., +				That ConversionService will be picked up by Spring and then used whenever a type conversion needs to be performed by the framework., +				You may also inject this ConversionService into any of your beans and invoke it directly., +				If no ConversionService is registered with Spring, the original PropertyEditor-based system is used., +			</para>, +			<para>, +				To register the DefaultConversionService with Spring, simply configure it as a bean with the id <code>conversionService</code>:, +			</para>, +			<programlisting language="xml"><![CDATA[, +<bean id="conversionService" class="org.springframework.core.convert.support.DefaultConversionService" />]]>, +			</programlisting>, +			<para>, +				To override the default converter set with your own custom converter(s), set the <code>converters</code> property:, +			</para>, +			<programlisting language="xml"><![CDATA[, +<bean id="conversionService" class="org.springframework.core.convert.support.DefaultConversionService">, +    <property name="converters">, +        <list>]