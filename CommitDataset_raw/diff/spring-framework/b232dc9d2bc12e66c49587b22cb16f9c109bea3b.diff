[+++ b/spring-web/src/main/java/org/springframework/http/converter/xml/MarshallingHttpMessageConverter.java, + * Copyright 2002-2013 the original author or authors., +, +import org.springframework.http.MediaType;, +	@Override, +	public boolean canRead(Class<?> clazz, MediaType mediaType) {, +		return canRead(mediaType) && (this.unmarshaller != null) && this.unmarshaller.supports(clazz);, +	}, +	public boolean canWrite(Class<?> clazz, MediaType mediaType) {, +		return canWrite(mediaType) && (this.marshaller != null) && this.marshaller.supports(clazz);, +	}, +, +	@Override, +	protected boolean supports(Class<?> clazz) {, +		// should not be called, since we override canRead()/canWrite(), +		throw new UnsupportedOperationException();, +++ b/spring-web/src/main/java/org/springframework/http/converter/xml/MarshallingHttpMessageConverter.java, + * Copyright 2002-2013 the original author or authors., +, +import org.springframework.http.MediaType;, +	@Override, +	public boolean canRead(Class<?> clazz, MediaType mediaType) {, +		return canRead(mediaType) && (this.unmarshaller != null) && this.unmarshaller.supports(clazz);, +	}, +	public boolean canWrite(Class<?> clazz, MediaType mediaType) {, +		return canWrite(mediaType) && (this.marshaller != null) && this.marshaller.supports(clazz);, +	}, +, +	@Override, +	protected boolean supports(Class<?> clazz) {, +		// should not be called, since we override canRead()/canWrite(), +		throw new UnsupportedOperationException();, +++ b/spring-web/src/test/java/org/springframework/http/converter/xml/MarshallingHttpMessageConverterTests.java, +import javax.xml.transform.Result;, +import org.springframework.beans.TypeMismatchException;, +import org.springframework.http.converter.HttpMessageNotReadableException;, +import org.springframework.http.converter.HttpMessageNotWritableException;, +import org.springframework.oxm.MarshallingFailureException;, +import org.springframework.oxm.UnmarshallingFailureException;, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, + * Tests for {@link MarshallingHttpMessageConverter}., + *, +	@Test, +	public void canRead() throws Exception {, +		Unmarshaller unmarshaller = mock(Unmarshaller.class);, +		when(unmarshaller.supports(Integer.class)).thenReturn(false);, +		when(unmarshaller.supports(String.class)).thenReturn(true);, +		MarshallingHttpMessageConverter converter = new MarshallingHttpMessageConverter();, +		converter.setUnmarshaller(unmarshaller);, +		assertFalse(converter.canRead(Boolean.class, MediaType.TEXT_PLAIN));, +		assertFalse(converter.canRead(Integer.class, MediaType.TEXT_XML));, +		assertTrue(converter.canRead(String.class, MediaType.TEXT_XML));, +	}, +, +	@Test, +	public void canWrite() throws Exception {, +		Marshaller marshaller = mock(Marshaller.class);, +, +		when(marshaller.supports(Integer.class)).thenReturn(false);, +		when(marshaller.supports(String.class)).thenReturn(true);, +, +		MarshallingHttpMessageConverter converter = new MarshallingHttpMessageConverter();, +		converter.setMarshaller(marshaller);, +, +		assertFalse(converter.canWrite(Boolean.class, MediaType.TEXT_PLAIN));, +		assertFalse(converter.canWrite(Integer.class, MediaType.TEXT_XML));, +		assertTrue(converter.canWrite(String.class, MediaType.TEXT_XML));, +		Unmarshaller unmarshaller = mock(Unmarshaller.class);, +		when(unmarshaller.unmarshal(isA(StreamSource.class))).thenReturn(body);, +, +		MarshallingHttpMessageConverter converter = new MarshallingHttpMessageConverter();, +		converter.setUnmarshaller(unmarshaller);, +	@Test(expected = TypeMismatchException.class), +	public void readWithTypeMismatchException() throws Exception {, +		MockHttpInputMessage inputMessage = new MockHttpInputMessage(new byte[0]);, +, +		Marshaller marshaller = mock(Marshaller.class);, +		Unmarshaller unmarshaller = mock(Unmarshaller.class);, +		when(unmarshaller.unmarshal(isA(StreamSource.class))).thenReturn(Integer.valueOf(3));, +, +		MarshallingHttpMessageConverter converter = new MarshallingHttpMessageConverter(marshaller, unmarshaller);, +		converter.read(String.class, inputMessage);, +	}, +, +	@Test, +	public void readWithMarshallingFailureException() throws Exception {, +		MockHttpInputMessage inputMessage = new MockHttpInputMessage(new byte[0]);, +		UnmarshallingFailureException ex = new UnmarshallingFailureException("forced");, +, +		Unmarshaller unmarshaller = mock(Unmarshaller.class);, +		when(unmarshaller.unmarshal(isA(StreamSource.class))).thenThrow(ex);, +, +		MarshallingHttpMessageConverter converter = new MarshallingHttpMessageConverter();, +		converter.setUnmarshaller(unmarshaller);, +, +		try {, +			converter.read(Object.class, inputMessage);, +			fail("HttpMessageNotReadableException should be thrown");, +		}]