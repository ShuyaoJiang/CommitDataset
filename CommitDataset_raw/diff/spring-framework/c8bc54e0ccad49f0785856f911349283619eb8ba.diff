[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.MutablePropertySources;, +import org.springframework.core.env.PropertySource;, +import org.springframework.core.io.ResourcePropertySource;, +	private static final Log logger = LogFactory.getLog(ConfigurationClassParser.class);, +, +	private final Stack<PropertySource<?>> propertySources =, +		new Stack<PropertySource<?>>();, +, +		Map<String, Object> propertySourceAttributes =, +			metadata.getAnnotationAttributes(org.springframework.context.annotation.PropertySource.class.getName());, +		if (propertySourceAttributes != null) {, +			String name = (String) propertySourceAttributes.get("name");, +			String location = (String) propertySourceAttributes.get("value");, +			ClassLoader classLoader = this.resourceLoader.getClassLoader();, +			ResourcePropertySource ps = StringUtils.hasText(name) ?, +					new ResourcePropertySource(name, location, classLoader) :, +					new ResourcePropertySource(location, classLoader);, +			this.propertySources.push(ps);, +		}, +, +	public Stack<PropertySource<?>> getPropertySources() {, +		return this.propertySources;, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.MutablePropertySources;, +import org.springframework.core.env.PropertySource;, +import org.springframework.core.io.ResourcePropertySource;, +	private static final Log logger = LogFactory.getLog(ConfigurationClassParser.class);, +, +	private final Stack<PropertySource<?>> propertySources =, +		new Stack<PropertySource<?>>();, +, +		Map<String, Object> propertySourceAttributes =, +			metadata.getAnnotationAttributes(org.springframework.context.annotation.PropertySource.class.getName());, +		if (propertySourceAttributes != null) {, +			String name = (String) propertySourceAttributes.get("name");, +			String location = (String) propertySourceAttributes.get("value");, +			ClassLoader classLoader = this.resourceLoader.getClassLoader();, +			ResourcePropertySource ps = StringUtils.hasText(name) ?, +					new ResourcePropertySource(name, location, classLoader) :, +					new ResourcePropertySource(location, classLoader);, +			this.propertySources.push(ps);, +		}, +, +	public Stack<PropertySource<?>> getPropertySources() {, +		return this.propertySources;, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +import java.util.Stack;, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.MutablePropertySources;, +import org.springframework.core.env.PropertySource;, +		// Handle any @PropertySource annotations, +		if (!(this.environment instanceof ConfigurableEnvironment)) {, +			logger.warn("Ignoring @PropertySource annotations. " +, +					"Reason: Environment must implement ConfigurableEnvironment");, +		}, +		else {, +			MutablePropertySources envPropertySources = ((ConfigurableEnvironment)this.environment).getPropertySources();, +			Stack<PropertySource<?>> parsedPropertySources = parser.getPropertySources();, +			while (!parsedPropertySources.isEmpty()) {, +				envPropertySources.addLast(parsedPropertySources.pop());, +			}, +		}, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.MutablePropertySources;, +import org.springframework.core.env.PropertySource;, +import org.springframework.core.io.ResourcePropertySource;, +	private static final Log logger = LogFactory.getLog(ConfigurationClassParser.class);, +, +	private final Stack<PropertySource<?>> propertySources =, +		new Stack<PropertySource<?>>();, +, +		Map<String, Object> propertySourceAttributes =, +			metadata.getAnnotationAttributes(org.springframework.context.annotation.PropertySource.class.getName());, +		if (propertySourceAttributes != null) {, +			String name = (String) propertySourceAttributes.get("name");, +			String location = (String) propertySourceAttributes.get("value");, +			ClassLoader classLoader = this.resourceLoader.getClassLoader();, +			ResourcePropertySource ps = StringUtils.hasText(name) ?, +					new ResourcePropertySource(name, location, classLoader) :, +					new ResourcePropertySource(location, classLoader);, +			this.propertySources.push(ps);, +		}, +, +	public Stack<PropertySource<?>> getPropertySources() {, +		return this.propertySources;]