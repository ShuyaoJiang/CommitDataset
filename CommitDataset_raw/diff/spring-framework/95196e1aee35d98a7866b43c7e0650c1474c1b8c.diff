[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ContextPathCompositeHandler.java, +import reactor.core.publisher.Mono;, +, +		// Remove underlying context path first (e.g. Servlet container), +		String path = request.getPathWithinApplication();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ContextPathCompositeHandler.java, +import reactor.core.publisher.Mono;, +, +		// Remove underlying context path first (e.g. Servlet container), +		String path = request.getPathWithinApplication();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpRequest.java, +import org.springframework.util.StringUtils;, +	 * Returns the portion of the URL path that represents the application., +	 * The context path is always at the beginning of the path and starts but, +	 * does not end with "/". It is shared for URLs of the same application., +	 * <p>The context path may come from the underlying runtime API such as, +	 * when deploying as a WAR to a Servlet container or it may also be assigned, +	 * through the use of {@link ContextPathCompositeHandler} or both., +	 * <p>The context path is not decoded., +	 * Returns the portion of the URL path after the {@link #getContextPath(), +	 * contextPath}. The returned path is not decoded., +	 * @return the path under the contextPath, +	 */, +	default String getPathWithinApplication() {, +		String path = getURI().getRawPath();, +		String contextPath = getContextPath();, +		if (StringUtils.hasText(contextPath)) {, +			int length = contextPath.length();, +			return (path.length() > length ? path.substring(length) : "");, +		}, +		else {, +			return path;, +		}, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ContextPathCompositeHandler.java, +import reactor.core.publisher.Mono;, +, +		// Remove underlying context path first (e.g. Servlet container), +		String path = request.getPathWithinApplication();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpRequest.java, +import org.springframework.util.StringUtils;, +	 * Returns the portion of the URL path that represents the application., +	 * The context path is always at the beginning of the path and starts but, +	 * does not end with "/". It is shared for URLs of the same application., +	 * <p>The context path may come from the underlying runtime API such as, +	 * when deploying as a WAR to a Servlet container or it may also be assigned, +	 * through the use of {@link ContextPathCompositeHandler} or both., +	 * <p>The context path is not decoded., +	 * Returns the portion of the URL path after the {@link #getContextPath(), +	 * contextPath}. The returned path is not decoded., +	 * @return the path under the contextPath, +	 */, +	default String getPathWithinApplication() {, +		String path = getURI().getRawPath();, +		String contextPath = getContextPath();, +		if (StringUtils.hasText(contextPath)) {, +			int length = contextPath.length();, +			return (path.length() > length ? path.substring(length) : "");, +		}, +		else {, +			return path;, +		}, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +		String lookupPath = exchange.getRequest().getPathWithinApplication();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ContextPathCompositeHandler.java, +import reactor.core.publisher.Mono;, +, +		// Remove underlying context path first (e.g. Servlet container), +		String path = request.getPathWithinApplication();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpRequest.java, +import org.springframework.util.StringUtils;, +	 * Returns the portion of the URL path that represents the application., +	 * The context path is always at the beginning of the path and starts but, +	 * does not end with "/". It is shared for URLs of the same application., +	 * <p>The context path may come from the underlying runtime API such as, +	 * when deploying as a WAR to a Servlet container or it may also be assigned, +	 * through the use of {@link ContextPathCompositeHandler} or both., +	 * <p>The context path is not decoded., +	 * Returns the portion of the URL path after the {@link #getContextPath(), +	 * contextPath}. The returned path is not decoded., +	 * @return the path under the contextPath, +	 */, +	default String getPathWithinApplication() {, +		String path = getURI().getRawPath();, +		String contextPath = getContextPath();, +		if (StringUtils.hasText(contextPath)) {, +			int length = contextPath.length();, +			return (path.length() > length ? path.substring(length) : "");, +		}, +		else {, +			return path;, +		}, +	}, +, +	/**]