[+++ b/spring-webflux/spring-webflux.gradle, +	optional("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1"), +	optional("org.jetbrains.kotlinx:kotlinx-coroutines-reactor:1.1.1"), +++ b/spring-webflux/spring-webflux.gradle, +	optional("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1"), +	optional("org.jetbrains.kotlinx:kotlinx-coroutines-reactor:1.1.1"), +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/client/ClientResponseExtensions.kt, + * Copyright 2002-2019 the original author or authors., +import kotlinx.coroutines.reactive.awaitSingle, +, +/**, + * Coroutines variant of [ClientResponse.bodyToMono]., + *, + * @author Sebastien Deleuze, + * @since 5.2, + */, +suspend inline fun <reified T : Any> ClientResponse.awaitBody(): T =, +		bodyToMono<T>().awaitSingle(), +, +/**, + * Coroutines variant of [ClientResponse.toEntity]., + *, + * @author Sebastien Deleuze, + * @since 5.2, + */, +suspend inline fun <reified T : Any> ClientResponse.awaitEntity(): ResponseEntity<T> =, +		toEntity<T>().awaitSingle(), +, +/**, + * Coroutines variant of [ClientResponse.toEntityList]., + *, + * @author Sebastien Deleuze, + * @since 5.2, + */, +suspend inline fun <reified T : Any> ClientResponse.awaitEntityList(): ResponseEntity<List<T>> =, +		toEntityList<T>().awaitSingle(), +++ b/spring-webflux/spring-webflux.gradle, +	optional("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1"), +	optional("org.jetbrains.kotlinx:kotlinx-coroutines-reactor:1.1.1"), +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/client/ClientResponseExtensions.kt, + * Copyright 2002-2019 the original author or authors., +import kotlinx.coroutines.reactive.awaitSingle, +, +/**, + * Coroutines variant of [ClientResponse.bodyToMono]., + *, + * @author Sebastien Deleuze, + * @since 5.2, + */, +suspend inline fun <reified T : Any> ClientResponse.awaitBody(): T =, +		bodyToMono<T>().awaitSingle(), +, +/**, + * Coroutines variant of [ClientResponse.toEntity]., + *, + * @author Sebastien Deleuze, + * @since 5.2, + */, +suspend inline fun <reified T : Any> ClientResponse.awaitEntity(): ResponseEntity<T> =, +		toEntity<T>().awaitSingle(), +, +/**, + * Coroutines variant of [ClientResponse.toEntityList]., + *, + * @author Sebastien Deleuze, + * @since 5.2, + */, +suspend inline fun <reified T : Any> ClientResponse.awaitEntityList(): ResponseEntity<List<T>> =, +		toEntityList<T>().awaitSingle(), +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/client/WebClientExtensions.kt, + * Copyright 2002-2019 the original author or authors., +import kotlinx.coroutines.GlobalScope, +import kotlinx.coroutines.reactive.awaitSingle, +import kotlinx.coroutines.reactor.mono, +, +/**, + * Coroutines variant of [WebClient.RequestHeadersSpec.exchange]., + *, + * @author Sebastien Deleuze, + * @since 5.2, + */, +suspend fun WebClient.RequestHeadersSpec<out WebClient.RequestHeadersSpec<*>>.awaitResponse(): ClientResponse =, +		exchange().awaitSingle(), +, +/**, + * Coroutines variant of [WebClient.RequestBodySpec.body]., + *, + * @author Sebastien Deleuze, + * @since 5.2, + */, +inline fun <reified T: Any> WebClient.RequestBodySpec.body(crossinline supplier: suspend () -> T), +		= body(GlobalScope.mono { supplier.invoke() }), +, +/**, + * Coroutines variant of [WebClient.ResponseSpec.bodyToMono]., + *, + * @author Sebastien Deleuze, + * @since 5.2, + */, +suspend inline fun <reified T : Any> WebClient.ResponseSpec.awaitBody() : T =]