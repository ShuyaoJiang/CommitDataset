[+++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/JmsListenerContainerParser.java, +	private static final String PHASE_ATTRIBUTE = "phase";, +, +		String phase = containerEle.getAttribute(PHASE_ATTRIBUTE);, +		if (StringUtils.hasText(phase)) {, +			containerDef.getPropertyValues().add("phase", phase);, +		}, +, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/JmsListenerContainerParser.java, +	private static final String PHASE_ATTRIBUTE = "phase";, +, +		String phase = containerEle.getAttribute(PHASE_ATTRIBUTE);, +		if (StringUtils.hasText(phase)) {, +			containerDef.getPropertyValues().add("phase", phase);, +		}, +, +++ b/org.springframework.jms/src/main/resources/org/springframework/jms/config/spring-jms-3.0.xsd, +			<xsd:attribute name="phase" type="xsd:string">, +				<xsd:annotation>, +					<xsd:documentation><![CDATA[, +	The lifecycle phase within which this container should start and stop. The lower, +	the value the earlier this container will start and the later it will stop. The, +	default is Integer.MAX_VALUE meaning the container will start as late as possible, +	and stop as soon as possible., +					]]></xsd:documentation>, +				</xsd:annotation>, +			</xsd:attribute>, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/JmsListenerContainerParser.java, +	private static final String PHASE_ATTRIBUTE = "phase";, +, +		String phase = containerEle.getAttribute(PHASE_ATTRIBUTE);, +		if (StringUtils.hasText(phase)) {, +			containerDef.getPropertyValues().add("phase", phase);, +		}, +, +++ b/org.springframework.jms/src/main/resources/org/springframework/jms/config/spring-jms-3.0.xsd, +			<xsd:attribute name="phase" type="xsd:string">, +				<xsd:annotation>, +					<xsd:documentation><![CDATA[, +	The lifecycle phase within which this container should start and stop. The lower, +	the value the earlier this container will start and the later it will stop. The, +	default is Integer.MAX_VALUE meaning the container will start as late as possible, +	and stop as soon as possible., +					]]></xsd:documentation>, +				</xsd:annotation>, +			</xsd:attribute>, +++ b/org.springframework.jms/src/test/java/org/springframework/jms/config/JmsNamespaceHandlerTests.java, +import org.springframework.context.Phased;, +	public void testPhases() {, +		int phase1 = getPhase("listener1");, +		int phase2 = getPhase("listener2");, +		int phase3 = getPhase("listener3");, +		int phase4 = getPhase("listener4");, +		int defaultPhase = getPhase(DefaultMessageListenerContainer.class.getName() + "#0");, +		assertEquals(99, phase1);, +		assertEquals(99, phase2);, +		assertEquals(Integer.MAX_VALUE, phase3);, +		assertEquals(Integer.MAX_VALUE, phase4);, +		assertEquals(Integer.MAX_VALUE, defaultPhase);, +	}, +, +	public int getPhase(String containerBeanName) {, +		Object container = this.context.getBean(containerBeanName);, +		if (!(container instanceof Phased)) {, +			throw new IllegalStateException("Container '" + containerBeanName + "' does not implement Phased.");, +		}, +		return ((Phased) container).getPhase();, +	}, +, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/JmsListenerContainerParser.java, +	private static final String PHASE_ATTRIBUTE = "phase";, +, +		String phase = containerEle.getAttribute(PHASE_ATTRIBUTE);, +		if (StringUtils.hasText(phase)) {, +			containerDef.getPropertyValues().add("phase", phase);, +		}, +, +++ b/org.springframework.jms/src/main/resources/org/springframework/jms/config/spring-jms-3.0.xsd, +			<xsd:attribute name="phase" type="xsd:string">, +				<xsd:annotation>, +					<xsd:documentation><![CDATA[, +	The lifecycle phase within which this container should start and stop. The lower, +	the value the earlier this container will start and the later it will stop. The, +	default is Integer.MAX_VALUE meaning the container will start as late as possible, +	and stop as soon as possible., +					]]></xsd:documentation>, +				</xsd:annotation>, +			</xsd:attribute>, +++ b/org.springframework.jms/src/test/java/org/springframework/jms/config/JmsNamespaceHandlerTests.java, +import org.springframework.context.Phased;, +	public void testPhases() {, +		int phase1 = getPhase("listener1");, +		int phase2 = getPhase("listener2");, +		int phase3 = getPhase("listener3");, +		int phase4 = getPhase("listener4");, +		int defaultPhase = getPhase(DefaultMessageListenerContainer.class.getName() + "#0");, +		assertEquals(99, phase1);, +		assertEquals(99, phase2);, +		assertEquals(Integer.MAX_VALUE, phase3);, +		assertEquals(Integer.MAX_VALUE, phase4);]