[+++ b/org.springframework.core/src/test/java/org/springframework/util/xml/AbstractStaxXMLReaderTestCase.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.util.xml;, +, +import java.io.IOException;, +import java.io.InputStream;, +import java.util.Arrays;, +import javax.xml.stream.XMLInputFactory;, +import javax.xml.stream.XMLStreamException;, +, +import org.easymock.AbstractMatcher;, +import org.easymock.MockControl;, +import org.junit.Before;, +import org.junit.Ignore;, +import org.junit.Test;, +import org.xml.sax.Attributes;, +import org.xml.sax.ContentHandler;, +import org.xml.sax.InputSource;, +import org.xml.sax.Locator;, +import org.xml.sax.SAXException;, +import org.xml.sax.XMLReader;, +import org.xml.sax.ext.LexicalHandler;, +import org.xml.sax.helpers.AttributesImpl;, +import org.xml.sax.helpers.XMLReaderFactory;, +, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.core.io.Resource;, +, +public abstract class AbstractStaxXmlReaderTestCase {, +, +	protected static XMLInputFactory inputFactory;, +, +	private XMLReader standardReader;, +, +	private MockControl contentHandlerControl;, +, +	private ContentHandler contentHandler;, +, +	@Before, +	public void setUp() throws Exception {, +		inputFactory = XMLInputFactory.newInstance();, +		standardReader = XMLReaderFactory.createXMLReader();, +		contentHandlerControl = MockControl.createStrictControl(ContentHandler.class);, +		contentHandlerControl.setDefaultMatcher(new SaxArgumentMatcher());, +		ContentHandler contentHandlerMock = (ContentHandler) contentHandlerControl.getMock();, +		contentHandler = new CopyingContentHandler(contentHandlerMock);, +		standardReader.setContentHandler(contentHandler);, +	}, +, +	private InputStream createTestInputStream() {, +		return getClass().getResourceAsStream("testContentHandler.xml");, +	}, +, +	@Test, +	public void contentHandlerNamespacesNoPrefixes() throws SAXException, IOException, XMLStreamException {, +		standardReader.setFeature("http://xml.org/sax/features/namespaces", true);, +		standardReader.setFeature("http://xml.org/sax/features/namespace-prefixes", false);, +, +		standardReader.parse(new InputSource(createTestInputStream()));, +		contentHandlerControl.replay();, +, +		AbstractStaxXmlReader staxXmlReader = createStaxXmlReader(createTestInputStream());, +		staxXmlReader.setFeature("http://xml.org/sax/features/namespaces", true);, +		staxXmlReader.setFeature("http://xml.org/sax/features/namespace-prefixes", false);, +, +		staxXmlReader.setContentHandler(contentHandler);, +		staxXmlReader.parse(new InputSource());, +		contentHandlerControl.verify();, +	}, +, +	@Test, +	public void contentHandlerNamespacesPrefixes() throws SAXException, IOException, XMLStreamException {, +		standardReader.setFeature("http://xml.org/sax/features/namespaces", true);, +		standardReader.setFeature("http://xml.org/sax/features/namespace-prefixes", true);, +, +		standardReader.parse(new InputSource(createTestInputStream()));, +		contentHandlerControl.replay();, +, +		AbstractStaxXmlReader staxXmlReader = createStaxXmlReader(createTestInputStream());, +		staxXmlReader.setFeature("http://xml.org/sax/features/namespaces", true);, +		staxXmlReader.setFeature("http://xml.org/sax/features/namespace-prefixes", true);, +, +		staxXmlReader.setContentHandler(contentHandler);, +		staxXmlReader.parse(new InputSource());, +		contentHandlerControl.verify();]