[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/MvcAnnotationDriven.java, +import org.springframework.web.method.support.HandlerMethodArgumentResolver;, +import org.springframework.web.servlet.mvc.method.annotation.support.ServletWebArgumentResolverAdapter;, +	public MvcAnnotationDriven argumentResolvers(HandlerMethodArgumentResolver... resolvers) {, +		for (HandlerMethodArgumentResolver resolver : resolvers) {, +			this.argumentResolvers.add(resolver);, +		}, +		return this;, +	}, +, +			this.argumentResolvers.add(new ServletWebArgumentResolverAdapter(resolver));, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/MvcAnnotationDriven.java, +import org.springframework.web.method.support.HandlerMethodArgumentResolver;, +import org.springframework.web.servlet.mvc.method.annotation.support.ServletWebArgumentResolverAdapter;, +	public MvcAnnotationDriven argumentResolvers(HandlerMethodArgumentResolver... resolvers) {, +		for (HandlerMethodArgumentResolver resolver : resolvers) {, +			this.argumentResolvers.add(resolver);, +		}, +		return this;, +	}, +, +			this.argumentResolvers.add(new ServletWebArgumentResolverAdapter(resolver));, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodAdapter.java, + * An {@link AbstractHandlerMethodAdapter} variant with support for {@link RequestMapping} handler methods., + * <p>Processing a {@link RequestMapping} method typically involves the invocation of {@link ModelAttribute} , + * methods for contributing attributes to the model and {@link InitBinder} methods for initializing , + * {@link WebDataBinder} instances for data binding and type conversion purposes., + * <p>{@link InvocableHandlerMethod} is the key contributor that helps with the invocation of handler , + * methods of all types resolving their arguments through registered {@link HandlerMethodArgumentResolver}s. , + * {@link ServletInvocableHandlerMethod} on the other hand adds handling of the return value for {@link RequestMapping}, + * methods through registered {@link HandlerMethodReturnValueHandler}s resulting in a {@link ModelAndView}. , + * <p>{@link ModelFactory} is another contributor that assists with the invocation of all {@link ModelAttribute} , + * methods to populate a model while {@link InitBinderMethodDataBinderFactory} assists with the invocation of , + * {@link InitBinder} methods for initializing data binder instances when needed., + * <p>This class is the central point that assembles all of mentioned contributors and invokes the actual , + * {@link RequestMapping} handler method through a {@link ServletInvocableHandlerMethod}., +	private final List<HandlerMethodArgumentResolver> customArgumentResolvers = , +		new ArrayList<HandlerMethodArgumentResolver>();, +	private final List<HandlerMethodReturnValueHandler> customReturnValueHandlers = , +		new ArrayList<HandlerMethodReturnValueHandler>();, +	private final List<ModelAndViewResolver> modelAndViewResolvers = new ArrayList<ModelAndViewResolver>();, +, +	private List<HttpMessageConverter<?>> messageConverters;, +		messageConverters = new ArrayList<HttpMessageConverter<?>>();, +		messageConverters.add(new ByteArrayHttpMessageConverter());, +		messageConverters.add(stringHttpMessageConverter);, +		messageConverters.add(new SourceHttpMessageConverter<Source>());, +		messageConverters.add(new XmlAwareFormHttpMessageConverter());, +	 * Set one or more custom argument resolvers to use with {@link RequestMapping}, {@link ModelAttribute}, and, +	 * {@link InitBinder} methods. Custom argument resolvers are given a chance to resolve argument values , +	 * ahead of the standard argument resolvers registered by default., +	 * <p>Argument resolvers of type {@link HandlerMethodArgumentResolver} and {@link WebArgumentResolver} are, +	 * accepted with instances of the latter adapted via {@link ServletWebArgumentResolverAdapter}. For new, +	 * implementations {@link HandlerMethodArgumentResolver} should be preferred over {@link WebArgumentResolver}., +	public void setCustomArgumentResolvers(List<?> argumentResolvers) {, +		if (argumentResolvers == null) {, +			return;, +		}, +		List<HandlerMethodArgumentResolver> adaptedResolvers = new ArrayList<HandlerMethodArgumentResolver>();, +		for (Object resolver : argumentResolvers) {, +			if (resolver instanceof WebArgumentResolver) {, +				adaptedResolvers.add(new ServletWebArgumentResolverAdapter((WebArgumentResolver) resolver));, +			}, +			else if (resolver instanceof HandlerMethodArgumentResolver) {, +				adaptedResolvers.add((HandlerMethodArgumentResolver) resolver);, +			}, +			else {, +				throw new IllegalArgumentException(, +						"An argument resolver must be a HandlerMethodArgumentResolver or a WebArgumentResolver");, +			}, +		}, +		this.customArgumentResolvers.addAll(adaptedResolvers);, +	 * Set the argument resolvers to use with {@link RequestMapping} and {@link ModelAttribute} methods. , +	 * This is an optional property providing full control over all argument resolvers in contrast to  , +	 * {@link #setCustomArgumentResolvers(List)}, which does not override default registrations., +	 * @param argumentResolvers argument resolvers for {@link RequestMapping} and {@link ModelAttribute} methods, +	public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {, +		if (argumentResolvers != null) {, +			this.argumentResolvers = new HandlerMethodArgumentResolverComposite();, +			registerArgumentResolvers(argumentResolvers);, +		}, +	}, +	, +	/**, +	 * Set the argument resolvers to use with {@link InitBinder} methods. This is an optional property , +	 * providing full control over all argument resolvers for {@link InitBinder} methods in contrast to   , +	 * {@link #setCustomArgumentResolvers(List)}, which does not override default registrations., +	 * @param argumentResolvers argument resolvers for {@link InitBinder} methods, +	 */, +	public void setInitBinderArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {, +		if (argumentResolvers != null) {, +			this.initBinderArgumentResolvers = new HandlerMethodArgumentResolverComposite();, +			registerInitBinderArgumentResolvers(argumentResolvers);, +		}, +	}, +, +	/**, +	 * Set custom return value handlers to use to handle the return values of {@link RequestMapping} methods. , +	 * Custom return value handlers are given a chance to handle a return value before the standard , +	 * return value handlers registered by default.]