[+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +	/**, +	 * Assert that this context's BeanFactory is currently active,, +	 * throwing an {@link IllegalStateException} if it isn't., +	 * <p>Invoked by all {@link BeanFactory} delegation methods that depend, +	 * on an active context, i.e. in particular all bean accessor methods., +	 * <p>The default implementation checks the {@link #isActive() 'active'} status, +	 * of this context overall. May be overridden for more specific checks, or for a, +	 * no-op if {@link #getBeanFactory()} itself throws an exception in such a case., +	 */, +	protected void assertBeanFactoryActive() {, +		synchronized (this.activeMonitor) {, +			if (!this.active) {, +				if (this.closed) {, +					throw new IllegalStateException(getDisplayName() + " has been closed already");, +				}, +				else {, +					throw new IllegalStateException(getDisplayName() + " has not been refreshed yet");, +				}, +			}, +		}, +	}, +, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +	/**, +	 * Assert that this context's BeanFactory is currently active,, +	 * throwing an {@link IllegalStateException} if it isn't., +	 * <p>Invoked by all {@link BeanFactory} delegation methods that depend, +	 * on an active context, i.e. in particular all bean accessor methods., +	 * <p>The default implementation checks the {@link #isActive() 'active'} status, +	 * of this context overall. May be overridden for more specific checks, or for a, +	 * no-op if {@link #getBeanFactory()} itself throws an exception in such a case., +	 */, +	protected void assertBeanFactoryActive() {, +		synchronized (this.activeMonitor) {, +			if (!this.active) {, +				if (this.closed) {, +					throw new IllegalStateException(getDisplayName() + " has been closed already");, +				}, +				else {, +					throw new IllegalStateException(getDisplayName() + " has not been refreshed yet");, +				}, +			}, +		}, +	}, +, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +		assertBeanFactoryActive();, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractRefreshableApplicationContext.java, + * Copyright 2002-2013 the original author or authors., +	/**, +	 * Overridden to turn it into a no-op: With AbstractRefreshableApplicationContext,, +	 * {@link #getBeanFactory()} serves a strong assertion for an active context anyway., +	 */, +	@Override, +	protected void assertBeanFactoryActive() {, +	}, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +	/**, +	 * Assert that this context's BeanFactory is currently active,, +	 * throwing an {@link IllegalStateException} if it isn't., +	 * <p>Invoked by all {@link BeanFactory} delegation methods that depend, +	 * on an active context, i.e. in particular all bean accessor methods., +	 * <p>The default implementation checks the {@link #isActive() 'active'} status, +	 * of this context overall. May be overridden for more specific checks, or for a, +	 * no-op if {@link #getBeanFactory()} itself throws an exception in such a case., +	 */, +	protected void assertBeanFactoryActive() {, +		synchronized (this.activeMonitor) {, +			if (!this.active) {, +				if (this.closed) {, +					throw new IllegalStateException(getDisplayName() + " has been closed already");, +				}, +				else {]