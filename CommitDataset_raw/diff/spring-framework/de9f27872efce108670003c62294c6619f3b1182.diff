[+++ b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java, +import org.springframework.util.ObjectUtils;, +import org.springframework.util.StringUtils;, + * A container for CORS configuration that also provides methods to check, + * the actual or requested origin, HTTP methods, and headers., + * @author Sam Brannen, + * @see <a href="http://www.w3.org/TR/cors/">CORS W3C recommendation</a>, +	/**, +	 * Wildcard representing <em>all</em> origins, methods, or headers., +	 */, +	public static final String ALL = "*";, +, +	/**, +	 * Default maximum age (30 minutes)., +	 */, +	public static final Long DEFAULT_MAX_AGE = Long.valueOf(1800);, +, +	 * Construct a new, empty {@code CorsConfiguration} instance., +	 * Construct a new {@code CorsConfiguration} instance by copying all, +	 * values from the supplied {@code CorsConfiguration}., +	 * Combine the supplied {@code CorsConfiguration} with this one., +	 * <p>Properties of this configuration are overridden by any non-null, +	 * properties of the supplied one., +	 * @return the combined {@code CorsConfiguration} or {@code this}, +	 * configuration if the supplied configuration is {@code null}, +		if (source == null || source.contains(ALL)) {, +	 * Set the origins to allow, e.g. {@code "http://domain1.com"}., +	 * <p>The special value {@code "*"} allows all domains., +	public void setAllowedOrigins(List<String> allowedOrigins) {, +		this.allowedOrigins = (allowedOrigins == null ? null : new ArrayList<String>(allowedOrigins));, +	 * @see #addAllowedOrigin(String), +	 * @see #setAllowedOrigins(List), +	 * Set the HTTP methods to allow, e.g. {@code "GET"}, {@code "POST"},, +	 * {@code "PUT"}, etc., +	 * <p>The special value {@code "*"} allows all methods., +	 * <p>If not set, only {@code "GET"} is allowed., +	public void setAllowedMethods(List<String> allowedMethods) {, +		this.allowedMethods = (allowedMethods == null ? null : new ArrayList<String>(allowedMethods));, +	}, +, +	/**, +	 * Add an HTTP method to allow., +	 */, +	public void addAllowedMethod(HttpMethod method) {, +		if (method != null) {, +			addAllowedMethod(method.name());, +		}, +		if (StringUtils.hasText(method)) {, +	}, +	 * Return the allowed HTTP methods, possibly {@code null} in which case, +	 * only {@code "GET"} is allowed., +	 * @see #addAllowedMethod(HttpMethod), +	 * @see #addAllowedMethod(String), +	 * @see #setAllowedMethods(List), +	 * Set the list of headers that a pre-flight request can list as allowed, +	 * for use during an actual request., +	 * <p>The special value {@code "*"} allows actual requests to send any, +	 * header., +	 * <p>A header name is not required to be listed if it is one of:, +	 * {@code Cache-Control}, {@code Content-Language}, {@code Expires},, +	 * {@code Last-Modified}, or {@code Pragma}., +		this.allowedHeaders = (allowedHeaders == null ? null : new ArrayList<String>(allowedHeaders));, +	 * Add an actual request header to allow., +	 * @see #addAllowedHeader(String), +	 * @see #setAllowedHeaders(List), +	 * Set the list of response headers other than simple headers (i.e., +	 * {@code Cache-Control}, {@code Content-Language}, {@code Content-Type},, +	 * {@code Expires}, {@code Last-Modified}, or {@code Pragma}) that an, +	 * actual response might have and can be exposed., +	 * <p>Note that {@code "*"} is not a valid exposed header value., +		if (exposedHeaders != null && exposedHeaders.contains(ALL)) {, +		this.exposedHeaders = (exposedHeaders == null ? null : new ArrayList<String>(exposedHeaders));, +	 * Add a response header to expose., +	 * <p>Note that {@code "*"} is not a valid exposed header value., +		if (ALL.equals(exposedHeader)) {, +	 * @see #addExposedHeader(String), +	 * @see #setExposedHeaders(List), +	 * <p>By default this is not set (i.e. user credentials are not supported)., +	 * Return the configured {@code allowCredentials} flag, possibly {@code null}., +	 * @see #setAllowCredentials(Boolean), +	 * Return the configured {@code maxAge} value, possibly {@code null}., +	 * @see #setMaxAge(Long), +	 * @param requestOrigin the origin to check, +	 * means the request origin is not allowed, +		if (!StringUtils.hasText(requestOrigin)) {, +		if (ObjectUtils.isEmpty(this.allowedOrigins)) {, +			return null;, +		}, +, +		if (this.allowedOrigins.contains(ALL)) {, +			if ((this.allowCredentials == null) || !this.allowCredentials.booleanValue()) {, +				return ALL;, +		for (String allowedOrigin : this.allowedOrigins) {, +	 * Check the HTTP request method (or the method from the, +	 * {@code Access-Control-Request-Method} header on a pre-flight request), +	 * against the configured allowed methods., +	 * @param requestMethod the HTTP request method to check, +	 * request, or {@code null} if the supplied {@code requestMethod} is not allowed, +		List<String> allowedMethods = (this.allowedMethods == null ? new ArrayList<String>() : this.allowedMethods);, +		if (allowedMethods.contains(ALL)) {]