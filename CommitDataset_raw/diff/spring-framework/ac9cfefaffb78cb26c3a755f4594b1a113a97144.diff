[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +		if (reg.hasInterceptors()) {, +		}, +		TaskExecutorRegistration reg = getClientInboundChannelRegistration().taskExecutor();, +			registration.interceptors(new ImmutableMessageChannelInterceptor());, +		if (reg.hasInterceptors()) {, +		}, +		TaskExecutorRegistration reg = getClientOutboundChannelRegistration().taskExecutor();, +			registration.interceptors(new ImmutableMessageChannelInterceptor());, +		ExecutorSubscribableChannel channel = (reg.hasTaskExecutor() ?, +				new ExecutorSubscribableChannel(brokerChannelExecutor()) : new ExecutorSubscribableChannel());, +		reg.interceptors(new ImmutableMessageChannelInterceptor());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +		if (reg.hasInterceptors()) {, +		}, +		TaskExecutorRegistration reg = getClientInboundChannelRegistration().taskExecutor();, +			registration.interceptors(new ImmutableMessageChannelInterceptor());, +		if (reg.hasInterceptors()) {, +		}, +		TaskExecutorRegistration reg = getClientOutboundChannelRegistration().taskExecutor();, +			registration.interceptors(new ImmutableMessageChannelInterceptor());, +		ExecutorSubscribableChannel channel = (reg.hasTaskExecutor() ?, +				new ExecutorSubscribableChannel(brokerChannelExecutor()) : new ExecutorSubscribableChannel());, +		reg.interceptors(new ImmutableMessageChannelInterceptor());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/ChannelRegistration.java, +		return taskExecutor(null);, +	 * @param taskExecutor the executor to use (or {@code null} for a default executor), +	public TaskExecutorRegistration taskExecutor(@Nullable ThreadPoolTaskExecutor taskExecutor) {, +			this.registration = (taskExecutor != null ? new TaskExecutorRegistration(taskExecutor) :, +					new TaskExecutorRegistration());, +	 * Configure the given interceptors for this message channel,, +	 * adding them to the channel's current list of interceptors., +	 * @since 4.3.12, +	public ChannelRegistration interceptors(ChannelInterceptor... interceptors) {, +	/**, +	 * @deprecated as of 4.3.12, in favor of {@link #interceptors(ChannelInterceptor...)}, +	 */, +	@Deprecated, +	public ChannelRegistration setInterceptors(ChannelInterceptor... interceptors) {, +		return interceptors(interceptors);, +	}, +, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +		if (reg.hasInterceptors()) {, +		}, +		TaskExecutorRegistration reg = getClientInboundChannelRegistration().taskExecutor();, +			registration.interceptors(new ImmutableMessageChannelInterceptor());, +		if (reg.hasInterceptors()) {, +		}, +		TaskExecutorRegistration reg = getClientOutboundChannelRegistration().taskExecutor();, +			registration.interceptors(new ImmutableMessageChannelInterceptor());, +		ExecutorSubscribableChannel channel = (reg.hasTaskExecutor() ?, +				new ExecutorSubscribableChannel(brokerChannelExecutor()) : new ExecutorSubscribableChannel());, +		reg.interceptors(new ImmutableMessageChannelInterceptor());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/ChannelRegistration.java, +		return taskExecutor(null);, +	 * @param taskExecutor the executor to use (or {@code null} for a default executor), +	public TaskExecutorRegistration taskExecutor(@Nullable ThreadPoolTaskExecutor taskExecutor) {, +			this.registration = (taskExecutor != null ? new TaskExecutorRegistration(taskExecutor) :, +					new TaskExecutorRegistration());, +	 * Configure the given interceptors for this message channel,, +	 * adding them to the channel's current list of interceptors., +	 * @since 4.3.12, +	public ChannelRegistration interceptors(ChannelInterceptor... interceptors) {, +	/**, +	 * @deprecated as of 4.3.12, in favor of {@link #interceptors(ChannelInterceptor...)}, +	 */, +	@Deprecated, +	public ChannelRegistration setInterceptors(ChannelInterceptor... interceptors) {, +		return interceptors(interceptors);, +	}, +, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/TaskExecutorRegistration.java, +import org.springframework.util.Assert;, + * @author Juergen Hoeller, +	private final ThreadPoolTaskExecutor taskExecutor;, +, +	private Integer corePoolSize;, +	@Nullable, +	private Integer maxPoolSize;, +	@Nullable, +	private Integer keepAliveSeconds;, +	@Nullable, +	private Integer queueCapacity;, +	/**, +	 * Create a new {@code TaskExecutorRegistration} for a default, +	 * {@link ThreadPoolTaskExecutor}., +	 */, +		this.taskExecutor = new ThreadPoolTaskExecutor();, +		this.taskExecutor.setCorePoolSize(Runtime.getRuntime().availableProcessors() * 2);, +		this.taskExecutor.setAllowCoreThreadTimeOut(true);, +	/**, +	 * Create a new {@code TaskExecutorRegistration} for a given, +	 * {@link ThreadPoolTaskExecutor}., +	 * @param taskExecutor the executor to use, +	 */, +		Assert.notNull(taskExecutor, "ThreadPoolTaskExecutor must not be null");, +]