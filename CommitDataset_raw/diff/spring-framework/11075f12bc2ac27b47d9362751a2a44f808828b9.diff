[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, +import java.net.URISyntaxException;, +		ReactorServerHttpRequest adaptedRequest;, +		ReactorServerHttpResponse adaptedResponse;, +		try {, +			adaptedRequest = new ReactorServerHttpRequest(request, bufferFactory);, +			adaptedResponse = new ReactorServerHttpResponse(response, bufferFactory);, +		}, +		catch (URISyntaxException ex) {, +			logger.error("Invalid URL " + ex.getMessage(), ex);, +			response.status(HttpResponseStatus.BAD_REQUEST);, +			return Mono.empty();, +		}, +		return this.httpHandler.handle(adaptedRequest, adaptedResponse), +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, +import java.net.URISyntaxException;, +		ReactorServerHttpRequest adaptedRequest;, +		ReactorServerHttpResponse adaptedResponse;, +		try {, +			adaptedRequest = new ReactorServerHttpRequest(request, bufferFactory);, +			adaptedResponse = new ReactorServerHttpResponse(response, bufferFactory);, +		}, +		catch (URISyntaxException ex) {, +			logger.error("Invalid URL " + ex.getMessage(), ex);, +			response.status(HttpResponseStatus.BAD_REQUEST);, +			return Mono.empty();, +		}, +		return this.httpHandler.handle(adaptedRequest, adaptedResponse), +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +	public ReactorServerHttpRequest(HttpServerRequest request, NettyDataBufferFactory bufferFactory), +			throws URISyntaxException {, +, +	private static URI initUri(HttpServerRequest channel) throws URISyntaxException {, +		return (address != null ? createUrl(address, requestUri) : new URI(requestUri));, +	private static URI createUrl(InetSocketAddress address, String requestUri) throws URISyntaxException {, +		URI baseUrl = new URI(null, null, address.getHostString(), address.getPort(), null, null, null);, +		return new URI(baseUrl.toString() + requestUri);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, +import java.net.URISyntaxException;, +		ReactorServerHttpRequest adaptedRequest;, +		ReactorServerHttpResponse adaptedResponse;, +		try {, +			adaptedRequest = new ReactorServerHttpRequest(request, bufferFactory);, +			adaptedResponse = new ReactorServerHttpResponse(response, bufferFactory);, +		}, +		catch (URISyntaxException ex) {, +			logger.error("Invalid URL " + ex.getMessage(), ex);, +			response.status(HttpResponseStatus.BAD_REQUEST);, +			return Mono.empty();, +		}, +		return this.httpHandler.handle(adaptedRequest, adaptedResponse), +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +	public ReactorServerHttpRequest(HttpServerRequest request, NettyDataBufferFactory bufferFactory), +			throws URISyntaxException {, +, +	private static URI initUri(HttpServerRequest channel) throws URISyntaxException {, +		return (address != null ? createUrl(address, requestUri) : new URI(requestUri));, +	private static URI createUrl(InetSocketAddress address, String requestUri) throws URISyntaxException {, +		URI baseUrl = new URI(null, null, address.getHostString(), address.getPort(), null, null, null);, +		return new URI(baseUrl.toString() + requestUri);, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/ErrorHandlerIntegrationTests.java, +	public void responseBodyError() throws Exception {, +		URI url = new URI("http://localhost:" + port + "/response-body-error");, +		ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);, +	public void handlingError() throws Exception {, +		URI url = new URI("http://localhost:" + port + "/handling-error");, +		ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);, +	@Test // SPR-15560, +	public void emptyPathSegments() throws Exception {, +, +		RestTemplate restTemplate = new RestTemplate();, +		restTemplate.setErrorHandler(NO_OP_ERROR_HANDLER);, +, +		URI url = new URI("http://localhost:" + port + "//");, +		ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);, +, +		assertEquals(HttpStatus.OK, response.getStatusCode());, +	}, +, +			if (path.endsWith("response-body-error")) {, +			else if (path.endsWith("handling-error")) {, +	private static final ResponseErrorHandler NO_OP_ERROR_HANDLER = new ResponseErrorHandler() {, +		public boolean hasError(ClientHttpResponse response) {, +		public void handleError(ClientHttpResponse response) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, +import java.net.URISyntaxException;, +		ReactorServerHttpRequest adaptedRequest;, +		ReactorServerHttpResponse adaptedResponse;, +		try {, +			adaptedRequest = new ReactorServerHttpRequest(request, bufferFactory);, +			adaptedResponse = new ReactorServerHttpResponse(response, bufferFactory);, +		}, +		catch (URISyntaxException ex) {, +			logger.error("Invalid URL " + ex.getMessage(), ex);, +			response.status(HttpResponseStatus.BAD_REQUEST);, +			return Mono.empty();, +		}, +		return this.httpHandler.handle(adaptedRequest, adaptedResponse), +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +	public ReactorServerHttpRequest(HttpServerRequest request, NettyDataBufferFactory bufferFactory)]