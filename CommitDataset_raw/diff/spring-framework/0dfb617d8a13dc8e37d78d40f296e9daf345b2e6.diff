[+++ b/org.springframework.core/src/main/java/org/springframework/util/ClassUtils.java, +	 * and return it if available (else throws an <code>IllegalStateException</code>)., +	 * <p>Essentially translates <code>NoSuchMethodException</code> to <code>IllegalStateException</code>., +	 * @param clazz	the clazz to analyze, +	 * @param methodName the name of the method, +	 * @param paramTypes the parameter types of the method, +	 * @return the method (never <code>null</code>), +	 * @throws IllegalStateException if the method has not been found, +	 * @see java.lang.Class#getMethod, +	 */, +	public static Method getMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) {, +		Assert.notNull(clazz, "Class must not be null");, +		Assert.notNull(methodName, "Method name must not be null");, +		try {, +			return clazz.getMethod(methodName, paramTypes);, +		}, +		catch (NoSuchMethodException ex) {, +			throw new IllegalStateException("Expected method not found: " + ex);, +		}, +	}, +, +	/**, +	 * Determine whether the given class has a method with the given signature,, +++ b/org.springframework.core/src/main/java/org/springframework/util/ClassUtils.java, +	 * and return it if available (else throws an <code>IllegalStateException</code>)., +	 * <p>Essentially translates <code>NoSuchMethodException</code> to <code>IllegalStateException</code>., +	 * @param clazz	the clazz to analyze, +	 * @param methodName the name of the method, +	 * @param paramTypes the parameter types of the method, +	 * @return the method (never <code>null</code>), +	 * @throws IllegalStateException if the method has not been found, +	 * @see java.lang.Class#getMethod, +	 */, +	public static Method getMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) {, +		Assert.notNull(clazz, "Class must not be null");, +		Assert.notNull(methodName, "Method name must not be null");, +		try {, +			return clazz.getMethod(methodName, paramTypes);, +		}, +		catch (NoSuchMethodException ex) {, +			throw new IllegalStateException("Expected method not found: " + ex);, +		}, +	}, +, +	/**, +	 * Determine whether the given class has a method with the given signature,, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate4/HibernateTransactionManager.java, +				Session newSession = SessionFactoryUtils.openSession(getSessionFactory());, +++ b/org.springframework.core/src/main/java/org/springframework/util/ClassUtils.java, +	 * and return it if available (else throws an <code>IllegalStateException</code>)., +	 * <p>Essentially translates <code>NoSuchMethodException</code> to <code>IllegalStateException</code>., +	 * @param clazz	the clazz to analyze, +	 * @param methodName the name of the method, +	 * @param paramTypes the parameter types of the method, +	 * @return the method (never <code>null</code>), +	 * @throws IllegalStateException if the method has not been found, +	 * @see java.lang.Class#getMethod, +	 */, +	public static Method getMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) {, +		Assert.notNull(clazz, "Class must not be null");, +		Assert.notNull(methodName, "Method name must not be null");, +		try {, +			return clazz.getMethod(methodName, paramTypes);, +		}, +		catch (NoSuchMethodException ex) {, +			throw new IllegalStateException("Expected method not found: " + ex);, +		}, +	}, +, +	/**, +	 * Determine whether the given class has a method with the given signature,, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate4/HibernateTransactionManager.java, +				Session newSession = SessionFactoryUtils.openSession(getSessionFactory());, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBuilder.java, +			ClassUtils.getMethod(Configuration.class, "addAnnotatedClass", Class.class);, +			ClassUtils.getMethod(Configuration.class, "addPackage", String.class);, +++ b/org.springframework.core/src/main/java/org/springframework/util/ClassUtils.java, +	 * and return it if available (else throws an <code>IllegalStateException</code>)., +	 * <p>Essentially translates <code>NoSuchMethodException</code> to <code>IllegalStateException</code>., +	 * @param clazz	the clazz to analyze, +	 * @param methodName the name of the method, +	 * @param paramTypes the parameter types of the method, +	 * @return the method (never <code>null</code>), +	 * @throws IllegalStateException if the method has not been found, +	 * @see java.lang.Class#getMethod, +	 */, +	public static Method getMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) {, +		Assert.notNull(clazz, "Class must not be null");, +		Assert.notNull(methodName, "Method name must not be null");, +		try {, +			return clazz.getMethod(methodName, paramTypes);, +		}, +		catch (NoSuchMethodException ex) {, +			throw new IllegalStateException("Expected method not found: " + ex);, +		}, +	}, +, +	/**, +	 * Determine whether the given class has a method with the given signature,, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate4/HibernateTransactionManager.java]