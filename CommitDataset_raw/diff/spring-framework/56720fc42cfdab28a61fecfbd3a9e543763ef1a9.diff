[+++ b/org.springframework.context/src/main/java/org/springframework/context/ApplicationContextInitializer.java, + * <p>Typically used within web applications that require some programmatic initialization, + * of the application context. For example, registering property sources or activating, + * profiles against the {@linkplain ConfigurableApplicationContext#getEnvironment(), + * context's environment}. See {@code ContextLoader} and {@code FrameworkServlet} support, + * for declaring a "contextInitializerClasses" context-param and init-param, respectively., + *, + * @see org.springframework.web.servlet.FrameworkServlet#setContextInitializerClasses, + * @see org.springframework.web.servlet.FrameworkServlet#initializeWebApplicationContext, +++ b/org.springframework.context/src/main/java/org/springframework/context/ApplicationContextInitializer.java, + * <p>Typically used within web applications that require some programmatic initialization, + * of the application context. For example, registering property sources or activating, + * profiles against the {@linkplain ConfigurableApplicationContext#getEnvironment(), + * context's environment}. See {@code ContextLoader} and {@code FrameworkServlet} support, + * for declaring a "contextInitializerClasses" context-param and init-param, respectively., + *, + * @see org.springframework.web.servlet.FrameworkServlet#setContextInitializerClasses, + * @see org.springframework.web.servlet.FrameworkServlet#initializeWebApplicationContext, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FrameworkServlet.java, +import org.springframework.context.ApplicationContextInitializer;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.StringUtils;, + * <p>Accepts an optional "contextInitializerClasses" servlet init-param that, + * specifies one or more {@link org.springframework.context.ApplicationContextInitializer, + * ApplicationContextInitializer} classes. The managed web application context will be, + * delegated to these initializers, allowing for additional programmatic configuration,, + * e.g. adding property sources or activating profiles against the {@linkplain, + * org.springframework.context.ConfigurableApplicationContext#getEnvironment() context's, + * environment}. See also {@link org.springframework.web.context.ContextLoader} which, + * supports a "contextInitializerClasses" context-param with identical semantics for, + * the "root" web application context., + *, + * @author Chris Beams, + * @see #setContextInitializerClasses, +	/**, +	 * Any number of these characters are considered delimiters between, +	 * multiple values in a single init-param String value., +	 * @see #initializeWebApplicationContext, +	 */, +	private String INIT_PARAM_DELIMITERS = ",; \t\n";, +	private String contextInitializerClasses;, +, +	 * Specify the set of fully-qualified {@link ApplicationContextInitializer} class, +	 * names, per the optional "contextInitializerClasses" servlet init-param., +	 * @see #createWebApplicationContext, +	 */, +	public void setContextInitializerClasses(String contextInitializerClasses) {, +		this.contextInitializerClasses = contextInitializerClasses;, +	}, +, +	/**, +, +		initializeWebApplicationContext(wac);, +, +	 * Delegate the WebApplicationContext before it is refreshed to any, +	 * {@link ApplicationContextInitializer} instances specified by the, +	 * "contextInitializerClasses" servlet init-param., +	 * <p>See also {@link #postProcessWebApplicationContext}, which is designed to allow, +	 * subclasses (as opposed to end-users) to modify the application context, and is, +	 * called immediately after this method., +	 * @param wac the configured WebApplicationContext (not refreshed yet), +	 * @see #createWebApplicationContext, +	 * @see #postProcessWebApplicationContext, +	 * @see ConfigurableWebApplicationContext#refresh(), +	 */, +	@SuppressWarnings("unchecked"), +	protected void initializeWebApplicationContext(ConfigurableWebApplicationContext wac) {, +		if (this.contextInitializerClasses != null) {, +			String[] initializerClassNames = StringUtils.tokenizeToStringArray(this.contextInitializerClasses, INIT_PARAM_DELIMITERS);, +			for(String initializerClassName : initializerClassNames) {, +				ApplicationContextInitializer<ConfigurableApplicationContext> initializer = null;, +				try {, +					Class<?> initializerClass = ClassUtils.forName(initializerClassName, wac.getClassLoader());, +					initializer = BeanUtils.instantiateClass(initializerClass, ApplicationContextInitializer.class);, +				} catch (Exception ex) {, +					throw new IllegalArgumentException(, +							String.format("Could not instantiate class [%s] specified via " +, +							"'contextInitializerClasses' init-param", initializerClassName), ex);, +				}, +				initializer.initialize(wac);, +			}, +		}, +	}, +, +	/**, +	 * <p>Note that this method is designed to allow subclasses to modify the application, +	 * context, while {@link #initializeWebApplicationContext} is designed to allow, +	 * end-users to modify the context through the use of, +	 * {@link ApplicationContextInitializer}s., +	 * @see #initializeWebApplicationContext]