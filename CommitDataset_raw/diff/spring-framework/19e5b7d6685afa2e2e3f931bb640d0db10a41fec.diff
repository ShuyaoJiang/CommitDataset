[+++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathMatcher.java, + * PathMatcher implementation for Ant-style path patterns. Examples are provided below., + * <p>Part of this mapping code has been kindly borrowed from <a href="http://ant.apache.org">Apache Ant</a>., + * <p>The mapping matches URLs using the following rules:<br> <ul> <li>? matches one character</li> <li>* matches zero, + * or more characters</li> <li>** matches zero or more 'directories' in a path</li> </ul>, + * <p>Some examples:<br> <ul> <li><code>com/t?st.jsp</code> - matches <code>com/test.jsp</code> but also, + * <code>com/tast.jsp</code> or <code>com/txst.jsp</code></li> <li><code>com/*.jsp</code> - matches all, + * <code>.jsp</code> files in the <code>com</code> directory</li> <li><code>com/&#42;&#42;/test.jsp</code> - matches all, + * <code>test.jsp</code> files underneath the <code>com</code> path</li> <li><code>org/springframework/&#42;&#42;/*.jsp</code>, + * - matches all <code>.jsp</code> files underneath the <code>org/springframework</code> path</li>, + * <li><code>org/&#42;&#42;/servlet/bla.jsp</code> - matches <code>org/springframework/servlet/bla.jsp</code> but also, + * <code>org/springframework/testing/servlet/bla.jsp</code> and <code>org/servlet/bla.jsp</code></li> </ul>, +	/** Set the path separator to use for pattern parsing. Default is "/", as in Ant. */, +	 *, +	 * @param fullMatch whether a full pattern match is required (else a pattern match as far as the given base path goes, +	 * is sufficient), +	 * @return <code>true</code> if the supplied <code>path</code> matched, <code>false</code> if it didn't, +	protected boolean doMatch(String pattern,, +			String path,, +			boolean fullMatch,, +			Map<String, String> uriTemplateVariables) {, +	 * Tests whether or not a string matches against a pattern. The pattern may contain two special characters:<br> '*', +	 * means zero or more characters<br> '?' means one and only one character, +	 *, +	 * @param pattern pattern to match against. Must not be <code>null</code>., +	 * @param str string which must be matched against the pattern. Must not be <code>null</code>., +	 * @return <code>true</code> if the string matches against the pattern, or <code>false</code> otherwise., +	 * Given a pattern and a full path, determine the pattern-mapped part. <p>For example: <ul>, +	 * <li>'<code>*</code>' and '<code>/docs/cvs/commit.html</code> -> '<code>/docs/cvs/commit.html</code>'</li> </ul>, +	 * <p>Assumes that {@link #match} returns <code>true</code> for '<code>pattern</code>' and '<code>path</code>', but, +	 * does <strong>not</strong> enforce this., +	 * Combines two patterns into a new pattern that is returned. <p>This implementation simply concatenates the two, +	 * patterns, unless the first pattern contains a file extension match (such as {@code *.html}. In that case, the second, +	 * pattern should be included in the first, or an {@code IllegalArgumentException} is thrown. <p>For example: <table>, +	 * <tr><th>Pattern 1</th><th>Pattern 2</th><th>Result</th></tr> <tr><td>/hotels</td><td>{@code, +	 * null}</td><td>/hotels</td></tr> <tr><td>{@code null}</td><td>/hotels</td><td>/hotels</td></tr>, +	 * <tr><td>/hotels</td><td>/bookings</td><td>/hotels/bookings</td></tr> <tr><td>/hotels</td><td>bookings</td><td>/hotels/bookings</td></tr>, +	 * <tr><td>/hotels/*</td><td>/bookings</td><td>/hotels/bookings</td></tr> <tr><td>/hotels/&#42;&#42;</td><td>/bookings</td><td>/hotels/&#42;&#42;/bookings</td></tr>, +	 * <tr><td>/hotels</td><td>{hotel}</td><td>/hotels/{hotel}</td></tr> <tr><td>/hotels/*</td><td>{hotel}</td><td>/hotels/{hotel}</td></tr>, +	 * <tr><td>/*.html</td><td>/hotels.html</td><td>/hotels.html</td></tr> <tr><td>/*.html</td><td>/hotels</td><td>/hotels.html</td></tr>, +	 * <tr><td>/*.html</td><td>/*.txt</td><td>IllegalArgumentException</td></tr> </table>, +		else if (match(pattern1, pattern2)) {, +			return pattern2;, +		}, +			int dotPos1 = pattern1.indexOf('.');, +			int dotPos2 = pattern2.indexOf('.');, +			if (dotPos1 == -1 && dotPos2 == -1) {, +				// simply concatenate the two patterns, +			String fileName1 = "";, +			String extension1 = "";, +			if (dotPos1 != -1) {, +				fileName1 = pattern1.substring(0, dotPos1);, +				extension1 = pattern1.substring(dotPos1);, +				fileName1 = pattern1;, +			String fileName2 = "";, +			String extension2 = "";, +			if (dotPos2 != -1) {, +				fileName2 = pattern2.substring(0, dotPos2);, +				extension2 = pattern2.substring(dotPos2);, +			else {, +				fileName2 = pattern2;, +			}, +			String fileName = fileName1.endsWith("*") ? fileName2 : fileName2;, +			String extension = extension1.startsWith("*") ? extension2 : extension1;, +, +			return fileName + extension;, +++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathMatcher.java, + * PathMatcher implementation for Ant-style path patterns. Examples are provided below., + * <p>Part of this mapping code has been kindly borrowed from <a href="http://ant.apache.org">Apache Ant</a>., + * <p>The mapping matches URLs using the following rules:<br> <ul> <li>? matches one character</li> <li>* matches zero, + * or more characters</li> <li>** matches zero or more 'directories' in a path</li> </ul>, + * <p>Some examples:<br> <ul> <li><code>com/t?st.jsp</code> - matches <code>com/test.jsp</code> but also, + * <code>com/tast.jsp</code> or <code>com/txst.jsp</code></li> <li><code>com/*.jsp</code> - matches all, + * <code>.jsp</code> files in the <code>com</code> directory</li> <li><code>com/&#42;&#42;/test.jsp</code> - matches all, + * <code>test.jsp</code> files underneath the <code>com</code> path</li> <li><code>org/springframework/&#42;&#42;/*.jsp</code>, + * - matches all <code>.jsp</code> files underneath the <code>org/springframework</code> path</li>, + * <li><code>org/&#42;&#42;/servlet/bla.jsp</code> - matches <code>org/springframework/servlet/bla.jsp</code> but also, + * <code>org/springframework/testing/servlet/bla.jsp</code> and <code>org/servlet/bla.jsp</code></li> </ul>, +	/** Set the path separator to use for pattern parsing. Default is "/", as in Ant. */, +	 *, +	 * @param fullMatch whether a full pattern match is required (else a pattern match as far as the given base path goes, +	 * is sufficient), +	 * @return <code>true</code> if the supplied <code>path</code> matched, <code>false</code> if it didn't, +	protected boolean doMatch(String pattern,, +			String path,, +			boolean fullMatch,, +			Map<String, String> uriTemplateVariables) {, +	 * Tests whether or not a string matches against a pattern. The pattern may contain two special characters:<br> '*', +	 * means zero or more characters<br> '?' means one and only one character, +	 *, +	 * @param pattern pattern to match against. Must not be <code>null</code>., +	 * @param str string which must be matched against the pattern. Must not be <code>null</code>., +	 * @return <code>true</code> if the string matches against the pattern, or <code>false</code> otherwise., +	 * Given a pattern and a full path, determine the pattern-mapped part. <p>For example: <ul>, +	 * <li>'<code>*</code>' and '<code>/docs/cvs/commit.html</code> -> '<code>/docs/cvs/commit.html</code>'</li> </ul>, +	 * <p>Assumes that {@link #match} returns <code>true</code> for '<code>pattern</code>' and '<code>path</code>', but, +	 * does <strong>not</strong> enforce this., +	 * Combines two patterns into a new pattern that is returned. <p>This implementation simply concatenates the two, +	 * patterns, unless the first pattern contains a file extension match (such as {@code *.html}. In that case, the second, +	 * pattern should be included in the first, or an {@code IllegalArgumentException} is thrown. <p>For example: <table>]