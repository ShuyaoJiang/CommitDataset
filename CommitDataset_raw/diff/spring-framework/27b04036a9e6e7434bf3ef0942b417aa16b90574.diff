[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	/** Constant defining a TypeDescriptor for a <code>null</code> value */, +	/** Constant defining a TypeDescriptor for 'unknown type' */, +	public static final TypeDescriptor UNKNOWN = new TypeDescriptor(Object.class);, +, +	 * @param value the value to determine the actual type from, +		return (elementType != TypeDescriptor.UNKNOWN ? elementType : forObject(element));, +		return (keyType != TypeDescriptor.UNKNOWN ? keyType : TypeDescriptor.forObject(key));, +		return (valueType != TypeDescriptor.UNKNOWN ? valueType : TypeDescriptor.forObject(value));, +		if (elementType == null) {, +			return TypeDescriptor.UNKNOWN;, +		if (this == obj) {, +		if (!(obj instanceof TypeDescriptor) || obj == TypeDescriptor.NULL) {, +			return false;, +		}, +		TypeDescriptor other = (TypeDescriptor) obj;, +				getType().equals(other.getType()) && ObjectUtils.nullSafeEquals(getAnnotations(), other.getAnnotations());, +			return annotatedTypeEquals && ObjectUtils.nullSafeEquals(getElementType(), other.getElementType());, +			return annotatedTypeEquals && ObjectUtils.nullSafeEquals(getMapKeyType(), other.getMapKeyType()) &&, +					ObjectUtils.nullSafeEquals(getMapValueType(), other.getMapValueType());, +		return (this == TypeDescriptor.NULL ? 0 : getType().hashCode());, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	/** Constant defining a TypeDescriptor for a <code>null</code> value */, +	/** Constant defining a TypeDescriptor for 'unknown type' */, +	public static final TypeDescriptor UNKNOWN = new TypeDescriptor(Object.class);, +, +	 * @param value the value to determine the actual type from, +		return (elementType != TypeDescriptor.UNKNOWN ? elementType : forObject(element));, +		return (keyType != TypeDescriptor.UNKNOWN ? keyType : TypeDescriptor.forObject(key));, +		return (valueType != TypeDescriptor.UNKNOWN ? valueType : TypeDescriptor.forObject(value));, +		if (elementType == null) {, +			return TypeDescriptor.UNKNOWN;, +		if (this == obj) {, +		if (!(obj instanceof TypeDescriptor) || obj == TypeDescriptor.NULL) {, +			return false;, +		}, +		TypeDescriptor other = (TypeDescriptor) obj;, +				getType().equals(other.getType()) && ObjectUtils.nullSafeEquals(getAnnotations(), other.getAnnotations());, +			return annotatedTypeEquals && ObjectUtils.nullSafeEquals(getElementType(), other.getElementType());, +			return annotatedTypeEquals && ObjectUtils.nullSafeEquals(getMapKeyType(), other.getMapKeyType()) &&, +					ObjectUtils.nullSafeEquals(getMapValueType(), other.getMapValueType());, +		return (this == TypeDescriptor.NULL ? 0 : getType().hashCode());, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToCollectionConverter.java, + * Copyright 2002-2010 the original author or authors., +		if (sourceCollection.isEmpty()) {, +			return sourceCollection;, +		}, +			Object targetElement = this.conversionService.convert(sourceElement,, +					sourceType.getElementTypeDescriptor(sourceElement),, +					targetType.getElementTypeDescriptor(sourceElement));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	/** Constant defining a TypeDescriptor for a <code>null</code> value */, +	/** Constant defining a TypeDescriptor for 'unknown type' */, +	public static final TypeDescriptor UNKNOWN = new TypeDescriptor(Object.class);, +, +	 * @param value the value to determine the actual type from, +		return (elementType != TypeDescriptor.UNKNOWN ? elementType : forObject(element));, +		return (keyType != TypeDescriptor.UNKNOWN ? keyType : TypeDescriptor.forObject(key));, +		return (valueType != TypeDescriptor.UNKNOWN ? valueType : TypeDescriptor.forObject(value));, +		if (elementType == null) {, +			return TypeDescriptor.UNKNOWN;, +		if (this == obj) {, +		if (!(obj instanceof TypeDescriptor) || obj == TypeDescriptor.NULL) {, +			return false;, +		}, +		TypeDescriptor other = (TypeDescriptor) obj;, +				getType().equals(other.getType()) && ObjectUtils.nullSafeEquals(getAnnotations(), other.getAnnotations());, +			return annotatedTypeEquals && ObjectUtils.nullSafeEquals(getElementType(), other.getElementType());, +			return annotatedTypeEquals && ObjectUtils.nullSafeEquals(getMapKeyType(), other.getMapKeyType()) &&, +					ObjectUtils.nullSafeEquals(getMapValueType(), other.getMapValueType());, +		return (this == TypeDescriptor.NULL ? 0 : getType().hashCode());, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToCollectionConverter.java, + * Copyright 2002-2010 the original author or authors., +		if (sourceCollection.isEmpty()) {, +			return sourceCollection;, +		}, +			Object targetElement = this.conversionService.convert(sourceElement,, +					sourceType.getElementTypeDescriptor(sourceElement),, +					targetType.getElementTypeDescriptor(sourceElement));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToStringConverter.java, + * Copyright 2002-2010 the original author or authors., +			Object targetElement = this.conversionService.convert(, +					sourceElement, sourceType.getElementTypeDescriptor(sourceElement), targetType);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	/** Constant defining a TypeDescriptor for a <code>null</code> value */, +	/** Constant defining a TypeDescriptor for 'unknown type' */, +	public static final TypeDescriptor UNKNOWN = new TypeDescriptor(Object.class);, +, +	 * @param value the value to determine the actual type from, +		return (elementType != TypeDescriptor.UNKNOWN ? elementType : forObject(element));, +		return (keyType != TypeDescriptor.UNKNOWN ? keyType : TypeDescriptor.forObject(key));, +		return (valueType != TypeDescriptor.UNKNOWN ? valueType : TypeDescriptor.forObject(value));, +		if (elementType == null) {, +			return TypeDescriptor.UNKNOWN;, +		if (this == obj) {, +		if (!(obj instanceof TypeDescriptor) || obj == TypeDescriptor.NULL) {, +			return false;, +		}, +		TypeDescriptor other = (TypeDescriptor) obj;, +				getType().equals(other.getType()) && ObjectUtils.nullSafeEquals(getAnnotations(), other.getAnnotations());]