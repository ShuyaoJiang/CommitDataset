[+++ b/build.gradle, +		optional("org.eclipse.jetty:jetty-client:${jettyVersion}"), +++ b/build.gradle, +		optional("org.eclipse.jetty:jetty-client:${jettyVersion}"), +++ b/spring-websocket/src/main/java/org/springframework/web/socket/CloseStatus.java, +++ b/build.gradle, +		optional("org.eclipse.jetty:jetty-client:${jettyVersion}"), +++ b/spring-websocket/src/main/java/org/springframework/web/socket/CloseStatus.java, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/AbstractWebSocketClient.java, +		assertUri(uri);, +	protected void assertUri(URI uri) {, +		Assert.notNull(uri, "uri must not be null");, +		String scheme = uri.getScheme();, +		Assert.isTrue(scheme != null && ("ws".equals(scheme) || "wss".equals(scheme)), "Invalid scheme: " + scheme);, +	}, +, +++ b/build.gradle, +		optional("org.eclipse.jetty:jetty-client:${jettyVersion}"), +++ b/spring-websocket/src/main/java/org/springframework/web/socket/CloseStatus.java, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/AbstractWebSocketClient.java, +		assertUri(uri);, +	protected void assertUri(URI uri) {, +		Assert.notNull(uri, "uri must not be null");, +		String scheme = uri.getScheme();, +		Assert.isTrue(scheme != null && ("ws".equals(scheme) || "wss".equals(scheme)), "Invalid scheme: " + scheme);, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java, +			logger.error("Failed to parse WebSocket message to STOMP." +, +					"Sending STOMP ERROR to client, sessionId=" + session.getId(), ex);, +				logger.error("Parsed STOMP message but could not send it to to message channel. " +, +						"Sending STOMP ERROR to client, sessionId=" + session.getId(), ex);, +			logger.error("Failed to send WebSocket message to client, sessionId=" + session.getId(), ex);, +			command = StompCommand.ERROR;, +++ b/build.gradle, +		optional("org.eclipse.jetty:jetty-client:${jettyVersion}"), +++ b/spring-websocket/src/main/java/org/springframework/web/socket/CloseStatus.java, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/AbstractWebSocketClient.java, +		assertUri(uri);, +	protected void assertUri(URI uri) {, +		Assert.notNull(uri, "uri must not be null");, +		String scheme = uri.getScheme();, +		Assert.isTrue(scheme != null && ("ws".equals(scheme) || "wss".equals(scheme)), "Invalid scheme: " + scheme);, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java, +			logger.error("Failed to parse WebSocket message to STOMP." +, +					"Sending STOMP ERROR to client, sessionId=" + session.getId(), ex);, +				logger.error("Parsed STOMP message but could not send it to to message channel. " +, +						"Sending STOMP ERROR to client, sessionId=" + session.getId(), ex);, +			logger.error("Failed to send WebSocket message to client, sessionId=" + session.getId(), ex);, +			command = StompCommand.ERROR;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/AbstractClientSockJsSession.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.socket.sockjs.client;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.http.HttpHeaders;, +import org.springframework.util.Assert;, +import org.springframework.util.concurrent.SettableListenableFuture;, +import org.springframework.web.socket.CloseStatus;, +import org.springframework.web.socket.TextMessage;, +import org.springframework.web.socket.WebSocketHandler;, +import org.springframework.web.socket.WebSocketMessage;, +import org.springframework.web.socket.WebSocketSession;, +import org.springframework.web.socket.sockjs.frame.SockJsFrame;, +import org.springframework.web.socket.sockjs.frame.SockJsFrameType;, +import org.springframework.web.socket.sockjs.frame.SockJsMessageCodec;, +, +import java.io.IOException;, +import java.net.URI;, +import java.security.Principal;, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +, +/**, + * Base class for SockJS client implementations of {@link WebSocketSession}., + * Provides processing of incoming SockJS message frames and delegates lifecycle, + * events and messages to the (application) {@link WebSocketHandler}., + * Sub-classes implement actual send as well as disconnect logic., + *, + * @author Rossen Stoyanchev, + * @since 4.1, + */]