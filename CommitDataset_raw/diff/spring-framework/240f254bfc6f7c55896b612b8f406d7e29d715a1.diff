[+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, + * Copyright 2002-2016 the original author or authors., +import java.util.Optional;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.lang.UsesJava8;, +		implements BeanFactoryAware, InitializingBean, SmartInitializingSingleton {, +, +	private static Class<?> javaUtilOptionalClass = null;, +, +	static {, +		try {, +			javaUtilOptionalClass =, +					ClassUtils.forName("java.util.Optional", CacheAspectSupport.class.getClassLoader());, +		}, +		catch (ClassNotFoundException ex) {, +			// Java 8 not available - Optional references simply not supported then., +		}, +	}, +	private final CacheOperationExpressionEvaluator evaluator = new CacheOperationExpressionEvaluator();, +	private BeanFactory beanFactory;, +	/**, +	 * Set the containing {@link BeanFactory} for {@link CacheManager} and other, +	 * service lookups., +	 * @since 4.3, +	 */, +	public void setBeanFactory(BeanFactory beanFactory) {, +		this.beanFactory = beanFactory;, +	}, +, +	/**, +	 * @deprecated as of 4.3, in favor of {@link #setBeanFactory}, +	 */, +	@Deprecated, +		this.beanFactory = applicationContext;, +	@Override, +				setCacheManager(this.beanFactory.getBean(CacheManager.class));, +		return BeanFactoryAnnotationUtils.qualifiedBeanOfType(this.beanFactory, expectedType, beanName);, +		// Check whether aspect is enabled (to cope with cases where the AJ is pulled in automatically), +				return execute(invoker, method, new CacheOperationContexts(operations, method, args, target, targetClass));, +	private Object execute(final CacheOperationInvoker invoker, Method method, CacheOperationContexts contexts) {, +			if (isConditionPassing(context, CacheOperationExpressionEvaluator.NO_RESULT)) {, +				Object key = generateKey(context, CacheOperationExpressionEvaluator.NO_RESULT);, +		processCacheEvicts(contexts.get(CacheEvictOperation.class), true,, +				CacheOperationExpressionEvaluator.NO_RESULT);, +			collectPutRequests(contexts.get(CacheableOperation.class),, +					CacheOperationExpressionEvaluator.NO_RESULT, cachePutRequests);, +		Object cacheValue;, +		Object returnValue;, +		if (cacheHit != null && cachePutRequests.isEmpty() && !hasCachePut(contexts)) {, +			cacheValue = cacheHit.get();, +			if (method.getReturnType() == javaUtilOptionalClass &&, +					(cacheValue == null || cacheValue.getClass() != javaUtilOptionalClass)) {, +				returnValue = OptionalUnwrapper.wrap(cacheValue);, +			else {, +				returnValue = cacheValue;, +			}, +		}, +		else {, +			// Invoke the method if we don't have a cache hit, +			returnValue = invokeOperation(invoker);, +			if (returnValue != null && returnValue.getClass() == javaUtilOptionalClass) {, +				cacheValue = OptionalUnwrapper.unwrap(returnValue);, +			}, +			else {, +				cacheValue = returnValue;, +			}, +		collectPutRequests(contexts.get(CachePutOperation.class), cacheValue, cachePutRequests);, +			cachePutRequest.apply(cacheValue);, +		processCacheEvicts(contexts.get(CacheEvictOperation.class), false, cacheValue);, +		return returnValue;, +		// Evaluate the conditions *without* the result object because we don't have it yet..., +				if (!context.isConditionPassing(CacheOperationExpressionEvaluator.RESULT_UNAVAILABLE)) {, +		Object result = CacheOperationExpressionEvaluator.NO_RESULT;, +			if (cacheOperationContexts == null) {  // no @Cacheable operation at all, +			return evaluator.createEvaluationContext(this.caches, this.metadata.method, this.args,, +					this.target, this.metadata.targetClass, result, beanFactory);, +, +	/**, +	 * Inner class to avoid a hard dependency on Java 8., +	 */, +	@UsesJava8, +	private static class OptionalUnwrapper {, +, +		public static Object unwrap(Object optionalObject) {, +			Optional<?> optional = (Optional<?>) optionalObject;, +			if (!optional.isPresent()) {, +				return null;, +			}, +			Object result = optional.get();, +			Assert.isTrue(!(result instanceof Optional), "Multi-level Optional usage not supported");, +			return result;, +		}, +, +		public static Object wrap(Object value) {, +			return Optional.ofNullable(value);, +		}, +	}, +, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java]