[+++ /dev/null, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +	private boolean headersWritten = false;, +, +		this.headers = new HttpHeaders();, +		return (this.headersWritten ? HttpHeaders.readOnlyHttpHeaders(this.headers) : this.headers);, +		writeHeaders();, +	public void writeHeaders() {, +		if (!this.headersWritten) {, +			for (String name : this.headers.keySet()) {, +				for (String value : this.headers.get(name)) {, +					this.channel.responseHeaders().add(name, value);, +			this.headersWritten = true;, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +	private boolean headersWritten = false;, +, +		this.headers = new HttpHeaders();, +		return (this.headersWritten ? HttpHeaders.readOnlyHttpHeaders(this.headers) : this.headers);, +		writeHeaders();, +	public void writeHeaders() {, +		if (!this.headersWritten) {, +			for (String name : this.headers.keySet()) {, +				for (String value : this.headers.get(name)) {, +					this.channel.responseHeaders().add(name, value);, +			this.headersWritten = true;, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpResponse.java, +	private boolean headersWritten = false;, +, +		this.headers = new HttpHeaders();, +		return (this.headersWritten ? HttpHeaders.readOnlyHttpHeaders(this.headers) : this.headers);, +		writeHeaders();, +	public void writeHeaders() {, +		if (!this.headersWritten) {, +			for (String name : this.headers.keySet()) {, +				for (String value : this.headers.get(name)), +				this.response.addHeader(name, value);, +			this.headersWritten = true;, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +	private boolean headersWritten = false;, +, +		this.headers = new HttpHeaders();, +		return (this.headersWritten ? HttpHeaders.readOnlyHttpHeaders(this.headers) : this.headers);, +		writeHeaders();, +	public void writeHeaders() {, +		if (!this.headersWritten) {, +			for (String name : this.headers.keySet()) {, +				for (String value : this.headers.get(name)) {, +					this.channel.responseHeaders().add(name, value);, +			this.headersWritten = true;, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpResponse.java, +	private boolean headersWritten = false;, +, +		this.headers = new HttpHeaders();, +		return (this.headersWritten ? HttpHeaders.readOnlyHttpHeaders(this.headers) : this.headers);, +		writeHeaders();, +	public void writeHeaders() {, +		if (!this.headersWritten) {, +			for (String name : this.headers.keySet()) {, +				for (String value : this.headers.get(name)), +				this.response.addHeader(name, value);, +			this.headersWritten = true;, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServerHttpResponse.java, +import org.reactivestreams.Publisher;, +, +	/**, +	 * Use this method to apply header changes made via {@link #getHeaders()} to, +	 * the underlying server response. By default changes made via, +	 * {@link #getHeaders()} are cached until a call to {@link #setBody}, +	 * implicitly applies header changes or until this method is called., +	 *, +	 * <p><strong>Note:</strong> After this method is called,, +	 * {@link #getHeaders() headers} become read-only and any additional calls, +	 * to this method are ignored., +	 */, +	void writeHeaders();, +, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +	private boolean headersWritten = false;, +, +		this.headers = new HttpHeaders();, +		return (this.headersWritten ? HttpHeaders.readOnlyHttpHeaders(this.headers) : this.headers);, +		writeHeaders();, +	public void writeHeaders() {, +		if (!this.headersWritten) {, +			for (String name : this.headers.keySet()) {, +				for (String value : this.headers.get(name)) {, +					this.channel.responseHeaders().add(name, value);, +			this.headersWritten = true;, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpResponse.java, +	private boolean headersWritten = false;, +, +		this.headers = new HttpHeaders();, +		return (this.headersWritten ? HttpHeaders.readOnlyHttpHeaders(this.headers) : this.headers);, +		writeHeaders();, +	public void writeHeaders() {, +		if (!this.headersWritten) {]