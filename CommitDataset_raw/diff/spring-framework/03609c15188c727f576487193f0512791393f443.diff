[+++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +		String[] tokens = StringUtils.tokenizeToStringArray(mimeTypes, ",");, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +		String[] tokens = StringUtils.tokenizeToStringArray(mimeTypes, ",");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java, +		String[] rawValues = StringUtils.split(rawValue, ",");, +		if (rawValues == null) {, +		setNativeHeader(STOMP_HEARTBEAT_HEADER, cx + "," + cy);, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +		String[] tokens = StringUtils.tokenizeToStringArray(mimeTypes, ",");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java, +		String[] rawValues = StringUtils.split(rawValue, ",");, +		if (rawValues == null) {, +		setNativeHeader(STOMP_HEARTBEAT_HEADER, cx + "," + cy);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaders.java, +		if (heartbeat == null || heartbeat.length != 2) {, +			throw new IllegalArgumentException("Heart-beat array must be of length 2, not " +, +					(heartbeat != null ? heartbeat.length : "null"));, +		}, +		if (heartbeat[0] < 0 || heartbeat[1] < 0) {, +			throw new IllegalArgumentException("Heart-beat values cannot be negative: " + value);, +		}, +		String[] rawValues = StringUtils.split(rawValue, ",");, +		if (rawValues == null) {, +		return (this == other || (other instanceof StompHeaders &&, +				this.headers.equals(((StompHeaders) other).headers)));, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +		String[] tokens = StringUtils.tokenizeToStringArray(mimeTypes, ",");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java, +		String[] rawValues = StringUtils.split(rawValue, ",");, +		if (rawValues == null) {, +		setNativeHeader(STOMP_HEARTBEAT_HEADER, cx + "," + cy);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaders.java, +		if (heartbeat == null || heartbeat.length != 2) {, +			throw new IllegalArgumentException("Heart-beat array must be of length 2, not " +, +					(heartbeat != null ? heartbeat.length : "null"));, +		}, +		if (heartbeat[0] < 0 || heartbeat[1] < 0) {, +			throw new IllegalArgumentException("Heart-beat values cannot be negative: " + value);, +		}, +		String[] rawValues = StringUtils.split(rawValue, ",");, +		if (rawValues == null) {, +		return (this == other || (other instanceof StompHeaders &&, +				this.headers.equals(((StompHeaders) other).headers)));, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/HtmlUnitRequestBuilder.java, +import org.springframework.util.StringUtils;, +			request.setAuthType(StringUtils.split(authorization, ": ")[0]);, +			String[] tokens = StringUtils.tokenizeToStringArray(locale, ",");, +			for (int i = tokens.length - 1; i >= 0; i--) {, +				request.addPreferredLocale(parseLocale(tokens[i]));, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +		String[] tokens = StringUtils.tokenizeToStringArray(mimeTypes, ",");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java, +		String[] rawValues = StringUtils.split(rawValue, ",");, +		if (rawValues == null) {, +		setNativeHeader(STOMP_HEARTBEAT_HEADER, cx + "," + cy);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaders.java, +		if (heartbeat == null || heartbeat.length != 2) {, +			throw new IllegalArgumentException("Heart-beat array must be of length 2, not " +, +					(heartbeat != null ? heartbeat.length : "null"));, +		}, +		if (heartbeat[0] < 0 || heartbeat[1] < 0) {, +			throw new IllegalArgumentException("Heart-beat values cannot be negative: " + value);, +		}, +		String[] rawValues = StringUtils.split(rawValue, ",");, +		if (rawValues == null) {, +		return (this == other || (other instanceof StompHeaders &&, +				this.headers.equals(((StompHeaders) other).headers)));, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/HtmlUnitRequestBuilder.java, +import org.springframework.util.StringUtils;, +			request.setAuthType(StringUtils.split(authorization, ": ")[0]);, +			String[] tokens = StringUtils.tokenizeToStringArray(locale, ",");, +			for (int i = tokens.length - 1; i >= 0; i--) {, +				request.addPreferredLocale(parseLocale(tokens[i]));, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +			String[] tokens = StringUtils.tokenizeToStringArray(value, ",");, +			String[] tokens = StringUtils.tokenizeToStringArray(value, ",");, +			List<Charset> result = new ArrayList<>(tokens.length);, +		else {, +			return Collections.emptyList();, +		}, +	}, +			String[] tokens = StringUtils.tokenizeToStringArray(value, ",");, +			List<HttpMethod> result = new ArrayList<>(tokens.length);, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +		String[] tokens = StringUtils.tokenizeToStringArray(mimeTypes, ",");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java, +		String[] rawValues = StringUtils.split(rawValue, ",");, +		if (rawValues == null) {, +		setNativeHeader(STOMP_HEARTBEAT_HEADER, cx + "," + cy);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaders.java, +		if (heartbeat == null || heartbeat.length != 2) {, +			throw new IllegalArgumentException("Heart-beat array must be of length 2, not " +, +					(heartbeat != null ? heartbeat.length : "null"));, +		}, +		if (heartbeat[0] < 0 || heartbeat[1] < 0) {, +			throw new IllegalArgumentException("Heart-beat values cannot be negative: " + value);, +		}, +		String[] rawValues = StringUtils.split(rawValue, ",");, +		if (rawValues == null) {]