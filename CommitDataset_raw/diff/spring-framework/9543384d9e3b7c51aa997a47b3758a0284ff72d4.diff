[+++ b/spring-beans/src/test/java/org/springframework/beans/support/PropertyComparatorTests.java, + * Copyright 2002-2017 the original author or authors., +import java.util.Comparator;, +import org.junit.Test;, + * Unit tests for {@link PropertyComparator}., +		PropertyComparator<Dog> c = new PropertyComparator<>("nickName", false, true);, +		PropertyComparator<Dog> c = new PropertyComparator<>("nickName", false, true);, +		Comparator<Dog> c = new PropertyComparator<>("lastName", false, true);, +		c = c.thenComparing(new PropertyComparator<>("firstName", false, true));, +		Comparator<Dog> c = (new PropertyComparator<Dog>("lastName", false, true))., +				thenComparing(new PropertyComparator<>("firstName", false, true));, +		c = c.reversed();, +, +		@Override, +		public int compareTo(Object o) {, +			return this.nickName.compareTo(((Dog) o).nickName);, +		}, +++ b/spring-beans/src/test/java/org/springframework/beans/support/PropertyComparatorTests.java, + * Copyright 2002-2017 the original author or authors., +import java.util.Comparator;, +import org.junit.Test;, + * Unit tests for {@link PropertyComparator}., +		PropertyComparator<Dog> c = new PropertyComparator<>("nickName", false, true);, +		PropertyComparator<Dog> c = new PropertyComparator<>("nickName", false, true);, +		Comparator<Dog> c = new PropertyComparator<>("lastName", false, true);, +		c = c.thenComparing(new PropertyComparator<>("firstName", false, true));, +		Comparator<Dog> c = (new PropertyComparator<Dog>("lastName", false, true))., +				thenComparing(new PropertyComparator<>("firstName", false, true));, +		c = c.reversed();, +, +		@Override, +		public int compareTo(Object o) {, +			return this.nickName.compareTo(((Dog) o).nickName);, +		}, +++ b/spring-core/src/test/java/org/springframework/util/comparator/CompoundComparatorTests.java, + * Copyright 2002-2017 the original author or authors., + * Test for {@link CompoundComparator}., +@Deprecated, +++ b/spring-beans/src/test/java/org/springframework/beans/support/PropertyComparatorTests.java, + * Copyright 2002-2017 the original author or authors., +import java.util.Comparator;, +import org.junit.Test;, + * Unit tests for {@link PropertyComparator}., +		PropertyComparator<Dog> c = new PropertyComparator<>("nickName", false, true);, +		PropertyComparator<Dog> c = new PropertyComparator<>("nickName", false, true);, +		Comparator<Dog> c = new PropertyComparator<>("lastName", false, true);, +		c = c.thenComparing(new PropertyComparator<>("firstName", false, true));, +		Comparator<Dog> c = (new PropertyComparator<Dog>("lastName", false, true))., +				thenComparing(new PropertyComparator<>("firstName", false, true));, +		c = c.reversed();, +, +		@Override, +		public int compareTo(Object o) {, +			return this.nickName.compareTo(((Dog) o).nickName);, +		}, +++ b/spring-core/src/test/java/org/springframework/util/comparator/CompoundComparatorTests.java, + * Copyright 2002-2017 the original author or authors., + * Test for {@link CompoundComparator}., +@Deprecated, +++ b/spring-core/src/test/java/org/springframework/util/comparator/InvertibleComparatorTests.java, + * Copyright 2002-2017 the original author or authors., +@Deprecated, +	private final Comparator<Integer> comparator = new ComparableComparator<>();, +, +		InvertibleComparator<Integer> invertibleComparator = new InvertibleComparator<>(comparator);, +		InvertibleComparator<Integer> invertibleComparator = new InvertibleComparator<>(comparator);, +		InvertibleComparator<Integer> invertibleComparator = new InvertibleComparator<>(comparator, true);, +		InvertibleComparator<Integer> invertibleComparator = new InvertibleComparator<>(comparator, false);]