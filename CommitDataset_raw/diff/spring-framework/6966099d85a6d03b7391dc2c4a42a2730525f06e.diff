[+++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/TypePatternClassFilterTests.java, +import test.beans.CountingTestBean;, +import test.beans.subpkg.DeepBean;, +		assertFalse("Must be excluded: in wrong package", tpcf.matches(DeepBean.class));, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/TypePatternClassFilterTests.java, +import test.beans.CountingTestBean;, +import test.beans.subpkg.DeepBean;, +		assertFalse("Must be excluded: in wrong package", tpcf.matches(DeepBean.class));, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/config/AopNamespaceHandlerEventTests.java, +import static test.util.TestResourceUtils.qualifiedResource;, +import org.springframework.core.io.Resource;, +	private static final Resource CONTEXT =  qualifiedResource(CLASS, "context.xml");, +	private static final Resource POINTCUT_EVENTS_CONTEXT =  qualifiedResource(CLASS, "pointcutEvents.xml");, +	private static final Resource POINTCUT_REF_CONTEXT = qualifiedResource(CLASS, "pointcutRefEvents.xml");, +	private static final Resource DIRECT_POINTCUT_EVENTS_CONTEXT = qualifiedResource(CLASS, "directPointcutEvents.xml");, +		this.reader.loadBeanDefinitions(POINTCUT_EVENTS_CONTEXT);, +		this.reader.loadBeanDefinitions(POINTCUT_REF_CONTEXT);, +		this.reader.loadBeanDefinitions(DIRECT_POINTCUT_EVENTS_CONTEXT);, +		this.reader.loadBeanDefinitions(CONTEXT);, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/TypePatternClassFilterTests.java, +import test.beans.CountingTestBean;, +import test.beans.subpkg.DeepBean;, +		assertFalse("Must be excluded: in wrong package", tpcf.matches(DeepBean.class));, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/config/AopNamespaceHandlerEventTests.java, +import static test.util.TestResourceUtils.qualifiedResource;, +import org.springframework.core.io.Resource;, +	private static final Resource CONTEXT =  qualifiedResource(CLASS, "context.xml");, +	private static final Resource POINTCUT_EVENTS_CONTEXT =  qualifiedResource(CLASS, "pointcutEvents.xml");, +	private static final Resource POINTCUT_REF_CONTEXT = qualifiedResource(CLASS, "pointcutRefEvents.xml");, +	private static final Resource DIRECT_POINTCUT_EVENTS_CONTEXT = qualifiedResource(CLASS, "directPointcutEvents.xml");, +		this.reader.loadBeanDefinitions(POINTCUT_EVENTS_CONTEXT);, +		this.reader.loadBeanDefinitions(POINTCUT_REF_CONTEXT);, +		this.reader.loadBeanDefinitions(DIRECT_POINTCUT_EVENTS_CONTEXT);, +		this.reader.loadBeanDefinitions(CONTEXT);, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/config/AopNamespaceHandlerPointcutErrorTests.java, +import static test.util.TestResourceUtils.qualifiedResource;, +			new XmlBeanFactory(qualifiedResource(getClass(), "pointcutDuplication.xml"));, +			new XmlBeanFactory(qualifiedResource(getClass(), "pointcutMissing.xml"));, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/TypePatternClassFilterTests.java, +import test.beans.CountingTestBean;, +import test.beans.subpkg.DeepBean;, +		assertFalse("Must be excluded: in wrong package", tpcf.matches(DeepBean.class));, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/config/AopNamespaceHandlerEventTests.java, +import static test.util.TestResourceUtils.qualifiedResource;, +import org.springframework.core.io.Resource;, +	private static final Resource CONTEXT =  qualifiedResource(CLASS, "context.xml");, +	private static final Resource POINTCUT_EVENTS_CONTEXT =  qualifiedResource(CLASS, "pointcutEvents.xml");, +	private static final Resource POINTCUT_REF_CONTEXT = qualifiedResource(CLASS, "pointcutRefEvents.xml");, +	private static final Resource DIRECT_POINTCUT_EVENTS_CONTEXT = qualifiedResource(CLASS, "directPointcutEvents.xml");, +		this.reader.loadBeanDefinitions(POINTCUT_EVENTS_CONTEXT);, +		this.reader.loadBeanDefinitions(POINTCUT_REF_CONTEXT);, +		this.reader.loadBeanDefinitions(DIRECT_POINTCUT_EVENTS_CONTEXT);, +		this.reader.loadBeanDefinitions(CONTEXT);, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/config/AopNamespaceHandlerPointcutErrorTests.java, +import static test.util.TestResourceUtils.qualifiedResource;, +			new XmlBeanFactory(qualifiedResource(getClass(), "pointcutDuplication.xml"));, +			new XmlBeanFactory(qualifiedResource(getClass(), "pointcutMissing.xml"));, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/config/TopLevelAopTagTests.java, +import static test.util.TestResourceUtils.qualifiedResource;, +import org.springframework.core.io.Resource;, +	private static final Resource CONTEXT = qualifiedResource(TopLevelAopTagTests.class, "context.xml");, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/TypePatternClassFilterTests.java, +import test.beans.CountingTestBean;, +import test.beans.subpkg.DeepBean;, +		assertFalse("Must be excluded: in wrong package", tpcf.matches(DeepBean.class));, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/config/AopNamespaceHandlerEventTests.java, +import static test.util.TestResourceUtils.qualifiedResource;, +import org.springframework.core.io.Resource;, +	private static final Resource CONTEXT =  qualifiedResource(CLASS, "context.xml");, +	private static final Resource POINTCUT_EVENTS_CONTEXT =  qualifiedResource(CLASS, "pointcutEvents.xml");, +	private static final Resource POINTCUT_REF_CONTEXT = qualifiedResource(CLASS, "pointcutRefEvents.xml");, +	private static final Resource DIRECT_POINTCUT_EVENTS_CONTEXT = qualifiedResource(CLASS, "directPointcutEvents.xml");, +		this.reader.loadBeanDefinitions(POINTCUT_EVENTS_CONTEXT);, +		this.reader.loadBeanDefinitions(POINTCUT_REF_CONTEXT);, +		this.reader.loadBeanDefinitions(DIRECT_POINTCUT_EVENTS_CONTEXT);, +		this.reader.loadBeanDefinitions(CONTEXT);, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/config/AopNamespaceHandlerPointcutErrorTests.java, +import static test.util.TestResourceUtils.qualifiedResource;, +			new XmlBeanFactory(qualifiedResource(getClass(), "pointcutDuplication.xml"));, +			new XmlBeanFactory(qualifiedResource(getClass(), "pointcutMissing.xml"));, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/config/TopLevelAopTagTests.java, +import static test.util.TestResourceUtils.qualifiedResource;, +import org.springframework.core.io.Resource;, +	private static final Resource CONTEXT = qualifiedResource(TopLevelAopTagTests.class, "context.xml");, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/framework/PrototypeTargetTests.java, +import static org.junit.Assert.assertEquals;, +import static test.util.TestResourceUtils.qualifiedResource;, +import org.springframework.core.io.Resource;, +	private static final Resource CONTEXT = qualifiedResource(PrototypeTargetTests.class, "context.xml");, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/TypePatternClassFilterTests.java, +import test.beans.CountingTestBean;, +import test.beans.subpkg.DeepBean;, +		assertFalse("Must be excluded: in wrong package", tpcf.matches(DeepBean.class));, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/config/AopNamespaceHandlerEventTests.java, +import static test.util.TestResourceUtils.qualifiedResource;, +import org.springframework.core.io.Resource;, +	private static final Resource CONTEXT =  qualifiedResource(CLASS, "context.xml");, +	private static final Resource POINTCUT_EVENTS_CONTEXT =  qualifiedResource(CLASS, "pointcutEvents.xml");, +	private static final Resource POINTCUT_REF_CONTEXT = qualifiedResource(CLASS, "pointcutRefEvents.xml");, +	private static final Resource DIRECT_POINTCUT_EVENTS_CONTEXT = qualifiedResource(CLASS, "directPointcutEvents.xml");]