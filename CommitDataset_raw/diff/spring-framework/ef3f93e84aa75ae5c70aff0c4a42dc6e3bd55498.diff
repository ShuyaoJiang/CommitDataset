[+++ b/spring-core/src/main/java/org/springframework/core/convert/support/StringToLocaleConverter.java, + * Copyright 2002-2018 the original author or authors., + * <p>Accepts the classic {@link Locale} String format ({@link Locale#toString()}), + * as well as BCP 47 language tags ({@link Locale#forLanguageTag} on Java 7+)., + *, + * @author Juergen Hoeller, + * @see StringUtils#parseLocale, +		return StringUtils.parseLocale(source);, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/StringToLocaleConverter.java, + * Copyright 2002-2018 the original author or authors., + * <p>Accepts the classic {@link Locale} String format ({@link Locale#toString()}), + * as well as BCP 47 language tags ({@link Locale#forLanguageTag} on Java 7+)., + *, + * @author Juergen Hoeller, + * @see StringUtils#parseLocale, +		return StringUtils.parseLocale(source);, +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, + * Copyright 2002-2018 the original author or authors., +	 * @param localeValue the locale value: following either {@code Locale's}, +	 * {@code toString()} format ("en", "en_UK", etc), also accepting spaces as, +	 * separators (as an alternative to underscores), or BCP 47 (e.g. "en-UK"), +	 * as specified by {@link Locale#forLanguageTag} on Java 7+, +	 * @return a corresponding {@code Locale} instance, or {@code null} if none, +	 * @throws IllegalArgumentException in case of an invalid locale specification, +	 * @since 5.0.4, +	 * @see #parseLocaleString, +	 * @see Locale#forLanguageTag, +	 */, +	@Nullable, +	public static Locale parseLocale(String localeValue) {, +		String[] tokens = tokenizeLocaleSource(localeValue);, +		if (tokens.length == 1) {, +			return Locale.forLanguageTag(localeValue);, +		}, +		return parseLocaleTokens(localeValue, tokens);, +	}, +, +	/**, +	 * Parse the given {@code localeString} value into a {@link Locale}., +	 * <p>This is the inverse operation of {@link Locale#toString Locale's toString}., +	 * @param localeString the locale {@code String}: following {@code Locale's}, +	 * {@code toString()} format ("en", "en_UK", etc), also accepting spaces as, +	 * separators (as an alternative to underscores), +	 * <p>Note: This variant does not accept the BCP 47 language tag format., +	 * Please use {@link #parseLocale} for lenient parsing of both formats., +		return parseLocaleTokens(localeString, tokenizeLocaleSource(localeString));, +	}, +	private static String[] tokenizeLocaleSource(String localeSource) {, +		return tokenizeToStringArray(localeSource, "_ ", false, false);, +	}, +, +	@Nullable, +	private static Locale parseLocaleTokens(String localeString, String[] tokens) {, +		String language = (tokens.length > 0 ? tokens[0] : "");, +		String country = (tokens.length > 1 ? tokens[1] : "");, +		if (tokens.length > 2) {, +	 * @deprecated as of 5.0.4, in favor of {@link Locale#toLanguageTag()}, +	@Deprecated, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/StringToLocaleConverter.java, + * Copyright 2002-2018 the original author or authors., + * <p>Accepts the classic {@link Locale} String format ({@link Locale#toString()}), + * as well as BCP 47 language tags ({@link Locale#forLanguageTag} on Java 7+)., + *, + * @author Juergen Hoeller, + * @see StringUtils#parseLocale, +		return StringUtils.parseLocale(source);, +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, + * Copyright 2002-2018 the original author or authors., +	 * @param localeValue the locale value: following either {@code Locale's}, +	 * {@code toString()} format ("en", "en_UK", etc), also accepting spaces as, +	 * separators (as an alternative to underscores), or BCP 47 (e.g. "en-UK"), +	 * as specified by {@link Locale#forLanguageTag} on Java 7+, +	 * @return a corresponding {@code Locale} instance, or {@code null} if none, +	 * @throws IllegalArgumentException in case of an invalid locale specification, +	 * @since 5.0.4, +	 * @see #parseLocaleString, +	 * @see Locale#forLanguageTag, +	 */, +	@Nullable, +	public static Locale parseLocale(String localeValue) {, +		String[] tokens = tokenizeLocaleSource(localeValue);, +		if (tokens.length == 1) {, +			return Locale.forLanguageTag(localeValue);, +		}, +		return parseLocaleTokens(localeValue, tokens);, +	}, +, +	/**, +	 * Parse the given {@code localeString} value into a {@link Locale}., +	 * <p>This is the inverse operation of {@link Locale#toString Locale's toString}., +	 * @param localeString the locale {@code String}: following {@code Locale's}, +	 * {@code toString()} format ("en", "en_UK", etc), also accepting spaces as, +	 * separators (as an alternative to underscores), +	 * <p>Note: This variant does not accept the BCP 47 language tag format., +	 * Please use {@link #parseLocale} for lenient parsing of both formats., +		return parseLocaleTokens(localeString, tokenizeLocaleSource(localeString));, +	}, +	private static String[] tokenizeLocaleSource(String localeSource) {, +		return tokenizeToStringArray(localeSource, "_ ", false, false);, +	}]