[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/MethodArgumentNotValidException.java, + * Exception to be thrown when a method argument is not valid. For instance, this, + * can be issued if a validation on a method parameter annotated with, + * {@code @Valid} fails., + *, +	/**, +	 * Create a new message with the given description., +	 * @see #getMessage(), +	 */, +	public MethodArgumentNotValidException(Message<?> message, String description) {, +		super(message, description);, +	/**, +	 * Create a new instance with a failed validation described by, +	 * the given {@link BindingResult}., +	 */, +	public MethodArgumentNotValidException(Message<?> message,, +			MethodParameter parameter, BindingResult bindingResult) {, +		this(message, generateMessage(parameter, bindingResult));, +	}, +, +	private static String generateMessage(MethodParameter parameter, BindingResult bindingResult) {, +				.append(parameter.getParameterIndex()).append(" in method: "), +				.append(parameter.getMethod().toGenericString()), +				.append(", with ").append(bindingResult.getErrorCount()).append(" error(s): ");, +		for (ObjectError error : bindingResult.getAllErrors()) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/MethodArgumentNotValidException.java, + * Exception to be thrown when a method argument is not valid. For instance, this, + * can be issued if a validation on a method parameter annotated with, + * {@code @Valid} fails., + *, +	/**, +	 * Create a new message with the given description., +	 * @see #getMessage(), +	 */, +	public MethodArgumentNotValidException(Message<?> message, String description) {, +		super(message, description);, +	/**, +	 * Create a new instance with a failed validation described by, +	 * the given {@link BindingResult}., +	 */, +	public MethodArgumentNotValidException(Message<?> message,, +			MethodParameter parameter, BindingResult bindingResult) {, +		this(message, generateMessage(parameter, bindingResult));, +	}, +, +	private static String generateMessage(MethodParameter parameter, BindingResult bindingResult) {, +				.append(parameter.getParameterIndex()).append(" in method: "), +				.append(parameter.getMethod().toGenericString()), +				.append(", with ").append(bindingResult.getErrorCount()).append(" error(s): ");, +		for (ObjectError error : bindingResult.getAllErrors()) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java, + * @author Stephane Nicoll, +		Object target = getTargetPayload(parameter, message);, +		if (annot != null && isEmptyPayload(target)) {, +			if (annot.required()) {, +				throw new MethodArgumentNotValidException(message, createPayloadRequiredExceptionMessage(parameter, target));, +			}, +			else {, +				return null;, +			}, +		}, +		if (annot != null) { // Only validate @Payload, +			validate(message, parameter, target);, +		}, +	/**, +	 * Return the target payload to handle for the specified message. Can either, +	 * be the payload itself if the parameter type supports it or the converted, +	 * one otherwise. While the payload of a {@link Message} cannot be null by, +	 * design, this method may return a {@code null} payload if the conversion, +	 * result is {@code null}., +	 */, +	protected Object getTargetPayload(MethodParameter parameter, Message<?> message) {, +		Class<?> sourceClass = message.getPayload().getClass();, +		Class<?> targetClass = parameter.getParameterType();, +		if (ClassUtils.isAssignable(targetClass,sourceClass)) {, +			return message.getPayload();, +		}, +		return this.converter.fromMessage(message, targetClass);, +	}, +, +	/**, +	 * Specify if the given {@code payload} is empty., +	 * @param payload the payload to check (can be {@code null}), +	 */, +	protected boolean isEmptyPayload(Object payload) {, +		if (payload == null) {, +			return true;, +		}, +		else if (payload instanceof byte[]) {, +			return ((byte[]) payload).length == 0;, +	private String createPayloadRequiredExceptionMessage(MethodParameter parameter, Object payload) {, +		String name = parameter.getParameterName() != null, +				? parameter.getParameterName() : "arg" + parameter.getParameterIndex();, +		StringBuilder sb = new StringBuilder("Payload parameter '").append(name), +				.append(" at index ").append(parameter.getParameterIndex()).append(" ");, +		if (payload == null) {, +			sb.append("could not be converted to '").append(parameter.getParameterType().getName()), +					.append("' and is required");, +		}, +		else {]