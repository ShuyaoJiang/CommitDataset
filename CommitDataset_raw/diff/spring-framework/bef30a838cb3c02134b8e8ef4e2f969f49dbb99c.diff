[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/TilesConfigurer.java, +import java.io.IOException;, +import java.lang.reflect.Constructor;, +import java.lang.reflect.Method;, +import java.net.URL;, +import java.util.LinkedList;, +import java.util.List;, +import org.apache.tiles.context.TilesRequestContextFactory;, +import org.apache.tiles.definition.DefinitionsFactoryException;, +import org.apache.tiles.definition.DefinitionsReader;, +import org.apache.tiles.evaluator.AttributeEvaluator;, +import org.apache.tiles.factory.AbstractTilesContainerFactory;, +import org.apache.tiles.factory.BasicTilesContainerFactory;, +import org.apache.tiles.impl.BasicTilesContainer;, +import org.apache.tiles.impl.mgmt.CachingTilesContainer;, +import org.apache.tiles.locale.LocaleResolver;, +import org.apache.tiles.preparer.PreparerFactory;, +import org.springframework.beans.BeanUtils;, +import org.springframework.util.ReflectionUtils;, + * <b>Note: Spring 3.0 requires Tiles 2.1.2 or above, with explicit support for Tiles 2.2.</b>, + * Tiles 2.1's EL support will be activated by default when running on JSP 2.1 or above., + * Note that EL support is <i>not</> active by default when running against Tiles 2.2., +	private static final boolean tiles22Present = ClassUtils.isPresent(, +			"org.apache.tiles.evaluator.AttributeEvaluatorFactory", TilesConfigurer.class.getClassLoader());, +, +, +	private TilesInitializer tilesInitializer;, +, +	private boolean overrideLocaleResolver = false;, +, +	private String[] definitions;, +, +	private boolean validateDefinitions = true;, +, +	private Class<? extends DefinitionsFactory> definitionsFactoryClass;, +, +	private Class<? extends PreparerFactory> preparerFactoryClass;, +, +	private boolean useMutableTilesContainer = false;, +, +	 * Configure Tiles using a custom TilesInitializer, typically specified as an inner bean., +	 * <p>Default is a variant of {@link org.apache.tiles.startup.DefaultTilesInitializer},, +	 * respecting the "definitions", "preparerFactoryClass" etc properties on this configurer., +	 * <p><b>NOTE: Specifying a custom TilesInitializer effectively disables all other bean, +	 * properties on this configurer.</b> The entire initialization procedure is then left, +	 * to the TilesInitializer as specified., +	 */, +	public void setTilesInitializer(TilesInitializer tilesInitializer) {, +		this.tilesInitializer = tilesInitializer;, +	}, +, +	/**, +	 * Specify whether to apply Tiles 2.2's "complete-autoload" configuration., +	 * <p>See {@link org.apache.tiles.extras.complete.CompleteAutoloadTilesContainerFactory}, +	 * for details on the complete-autoload mode., +	 * <p><b>NOTE: Specifying the complete-autoload mode effectively disables all other bean, +	 * properties on this configurer.</b> The entire initialization procedure is then left, +	 * to {@link org.apache.tiles.extras.complete.CompleteAutoloadTilesInitializer}., +	 * @see org.apache.tiles.extras.complete.CompleteAutoloadTilesContainerFactory, +	 * @see org.apache.tiles.extras.complete.CompleteAutoloadTilesInitializer, +	 */, +	public void setCompleteAutoload(boolean completeAutoload) {, +		if (completeAutoload) {, +			try {, +				Class clazz = getClass().getClassLoader().loadClass(, +						"org.apache.tiles.extras.complete.CompleteAutoloadTilesInitializer");, +				this.tilesInitializer = (TilesInitializer) clazz.newInstance();, +			}, +			catch (Exception ex) {, +				throw new IllegalStateException("Tiles 2.2 not available", ex);, +			}, +		}, +		else {, +			this.tilesInitializer = null;, +		}, +		this.overrideLocaleResolver = completeAutoload;, +	}, +, +	/**, +		this.definitions = definitions;, +		else {, +			this.tilesPropertyMap.remove(DefinitionsFactory.DEFINITIONS_CONFIG);, +		}, +		this.validateDefinitions = validateDefinitions;, +	public void setDefinitionsFactoryClass(Class<? extends DefinitionsFactory> definitionsFactoryClass) {, +		this.definitionsFactoryClass = definitionsFactoryClass;, +	public void setPreparerFactoryClass(Class<? extends PreparerFactory> preparerFactoryClass) {, +		this.preparerFactoryClass = preparerFactoryClass;, +	 * Set whether to use a MutableTilesContainer (typically the CachingTilesContainer, +	 * implementation) for this application. Default is "false"., +	 * @see org.apache.tiles.mgmt.MutableTilesContainer, +	 * @see org.apache.tiles.mgmt.CachingTilesContainer, +		this.useMutableTilesContainer = useMutableTilesContainer;, +	 * <p><b>NOTE: This property is only effective with Tiles 2.1.</b>, +	 * Tiles 2.2 doesn't support property-based configuration anymore., +		if (this.tilesInitializer == null) {, +			this.tilesInitializer = createTilesInitializer();, +		}, +		this.tilesInitializer.initialize(preliminaryContext);, +]