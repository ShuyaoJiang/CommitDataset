[+++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageReader.java, + * Copyright 2002-2017 the original author or authors., +import static java.util.stream.Collectors.joining;, +, + * @author Rossen Stoyanchev, +, +	public List<MediaType> getReadableMediaTypes() {, +		return Collections.singletonList(MediaType.TEXT_EVENT_STREAM);, +	}, +, +, +	@Override, +	public Flux<Object> read(ResolvableType elementType, ReactiveHttpInputMessage inputMessage,, +			Map<String, Object> hints) {, +, +		boolean hasSseWrapper = ServerSentEvent.class.isAssignableFrom(elementType.getRawClass());, +		ResolvableType dataType = (hasSseWrapper ? elementType.getGeneric(0) : elementType);, +, +				.map(buffer -> {, +					CharBuffer charBuffer = StandardCharsets.UTF_8.decode(buffer.asByteBuffer());, +					DataBufferUtils.release(buffer);, +					return Tuples.of(charBuffer.toString(), buffer.factory());, +				}), +				.concatMap(tuples -> {, +					String[] lines = tuples.stream().map(t -> t.getT1()).collect(joining()).split("\\r?\\n");, +					DataBufferFactory factory = tuples.stream().findAny().get().getT2();, +					ServerSentEvent<Object> event = buildEvent(lines, factory, dataType, hints);, +					return (hasSseWrapper ? Mono.just(event) : Mono.justOrEmpty(event.data()));, +	private ServerSentEvent<Object> buildEvent(String[] lines, DataBufferFactory bufferFactory,, +			ResolvableType dataType, Map<String, Object> hints) {, +, +		ServerSentEvent.Builder<Object> sseBuilder = ServerSentEvent.builder();, +		StringBuilder mutableData = new StringBuilder();, +		StringBuilder mutableComment = new StringBuilder();, +, +		for (String line : lines) {, +			if (line.startsWith("id:")) {, +				sseBuilder.id(line.substring(3));, +			}, +			else if (line.startsWith("event:")) {, +				sseBuilder.event(line.substring(6));, +			}, +			else if (line.startsWith("data:")) {, +				mutableData.append(line.substring(5)).append("\n");, +			}, +			else if (line.startsWith("retry:")) {, +				sseBuilder.retry(Duration.ofMillis(Long.valueOf(line.substring(6))));, +			}, +			else if (line.startsWith(":")) {, +				mutableComment.append(line.substring(1)).append("\n");, +			}, +, +		if (mutableData.length() > 0) {, +			String data = mutableData.toString();, +			sseBuilder.data(decodeData(data, bufferFactory, dataType, hints));, +		}, +, +, +		if (mutableComment.length() > 0) {, +			String comment = mutableComment.toString();, +			sseBuilder.comment(comment.substring(0, comment.length() - 1));, +		}, +, +		return sseBuilder.build();, +	}, +, +	private Object decodeData(String data, DataBufferFactory bufferFactory, ResolvableType dataType,, +			Map<String, Object> hints) {, +, +		if (String.class.isAssignableFrom(dataType.getRawClass())) {, +			return data.substring(0, data.length() - 1);, +		}, +, +		DataBuffer dataBuffer = bufferFactory.wrap(data.getBytes(StandardCharsets.UTF_8));, +, +		return this.dataDecoders.stream(), +				.filter(e -> e.canDecode(dataType, MimeTypeUtils.APPLICATION_JSON)), +				.findFirst(), +				.orElseThrow(() -> new CodecException("No suitable decoder found!")), +				.decodeToMono(Mono.just(dataBuffer), dataType, MimeTypeUtils.APPLICATION_JSON, hints), +				.block(Duration.ZERO);, +	public Mono<Object> readMono(ResolvableType elementType, ReactiveHttpInputMessage inputMessage,, +			Map<String, Object> hints) {, +, +		return Mono.error(new UnsupportedOperationException(, +				"ServerSentEventHttpMessageReader only supports reading stream of events as a Flux"));, +++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageReader.java, + * Copyright 2002-2017 the original author or authors., +import static java.util.stream.Collectors.joining;, +, + * @author Rossen Stoyanchev, +, +	public List<MediaType> getReadableMediaTypes() {, +		return Collections.singletonList(MediaType.TEXT_EVENT_STREAM);, +	}, +, +, +	@Override, +	public Flux<Object> read(ResolvableType elementType, ReactiveHttpInputMessage inputMessage,, +			Map<String, Object> hints) {]