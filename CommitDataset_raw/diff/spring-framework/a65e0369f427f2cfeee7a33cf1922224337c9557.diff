[+++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandlerTests.java, +import java.util.Collections;, +@SuppressWarnings("unused"), +, +		brokerTemplate.setMessageConverter(this.converter);, +		Map<String, Object> headers = Collections.singletonMap("foo", "bar");, +		Message<?> message = createMessage("/pre/headers", headers);, +		Map<String, Object> headers = Collections.singletonMap("foo", "bar");, +		Message<?> message = createMessage("/pre/optionalHeaders", headers);, +		Message<?> message = createMessage("/pre/optionalHeaders");, +		Message<?> message = createMessage("/pre/message/bar/value");, +		Message<?> message = createMessage("/pre/sub/bar/value");, +		Message<?> message = createMessage("/pre/binding/id/12");, +		Message<?> message = createMessage("/pre/validation/payload");, +		Message<?> message = createMessage("/pre/illegalState");, +, +		Map<String, Object> sessionAttributes = new ConcurrentHashMap<>();, +		sessionAttributes.put("name", "value");, +, +		headers.setSessionAttributes(sessionAttributes);, +		Message<?> message = createMessage("/app1/pre.foo");, +		message = createMessage("/app2/pre.foo");, +		Message emptyMessage = (Message) MessageBuilder.withPayload(new byte[0]).build();, +		given(this.converter.toMessage(anyObject(), any(MessageHeaders.class))).willReturn(emptyMessage);, +, +		Message<?> message = createMessage("/app1/listenable-future/success");, +		Message emptyMessage = (Message) MessageBuilder.withPayload(new byte[0]).build();, +		given(this.converter.toMessage(anyObject(), any(MessageHeaders.class))).willReturn(emptyMessage);, +, +		Message<?> message = createMessage("/app1/listenable-future/failure");, +		Message emptyMessage = (Message) MessageBuilder.withPayload(new byte[0]).build();, +		given(this.converter.toMessage(anyObject(), any(MessageHeaders.class))).willReturn(emptyMessage);, +, +		Message<?> message = createMessage("/app1/completable-future");, +		Message emptyMessage = (Message) MessageBuilder.withPayload(new byte[0]).build();, +		given(this.converter.toMessage(anyObject(), any(MessageHeaders.class))).willReturn(emptyMessage);, +, +		Message<?> message = createMessage("/app1/completable-future");, +		assertTrue(controller.exceptionCaught);, +	private Message<?> createMessage(String destination) {, +		return createMessage(destination, null);, +	}, +, +	private Message<?> createMessage(String destination, Map<String, Object> headers) {, +		SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create();, +		accessor.setSessionId("session1");, +		accessor.setSessionAttributes(new HashMap<>());, +		accessor.setDestination(destination);, +		if (headers != null) {, +			for (Map.Entry<String, Object> entry : headers.entrySet()) {, +				accessor.setHeader(entry.getKey(), entry.getValue());, +			}, +		}, +		return MessageBuilder.withPayload(new byte[0]).setHeaders(accessor).build();, +	}, +, +, +, +, +		private boolean exceptionCaught = false;, +			this.exceptionCaught = true;, +]