[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import java.util.HashMap;, +	private final ImportStack importStack = new ImportStack();, +				this.importStack.registerImport(configClass.getMetadata().getClassName(), classToImport);, +	public ImportRegistry getImportRegistry() {, +		return this.importStack;, +	}, +, +, +	interface ImportRegistry {, +		String getImportingClassFor(String importedClass);, +	}, +, +	private static class ImportStack extends Stack<ConfigurationClass> implements ImportRegistry {, +, +		private Map<String, String> imports = new HashMap<String, String>();, +, +		public String getImportingClassFor(String importedClass) {, +			return imports.get(importedClass);, +		}, +, +		public void registerImport(String importingClass, String importedClass) {, +			imports.put(importedClass, importingClass);, +		}, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import java.util.HashMap;, +	private final ImportStack importStack = new ImportStack();, +				this.importStack.registerImport(configClass.getMetadata().getClassName(), classToImport);, +	public ImportRegistry getImportRegistry() {, +		return this.importStack;, +	}, +, +, +	interface ImportRegistry {, +		String getImportingClassFor(String importedClass);, +	}, +, +	private static class ImportStack extends Stack<ConfigurationClass> implements ImportRegistry {, +, +		private Map<String, String> imports = new HashMap<String, String>();, +, +		public String getImportingClassFor(String importedClass) {, +			return imports.get(importedClass);, +		}, +, +		public void registerImport(String importingClass, String importedClass) {, +			imports.put(importedClass, importingClass);, +		}, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.config.BeanPostProcessor;, +import org.springframework.beans.factory.config.SingletonBeanRegistry;, +import org.springframework.beans.factory.support.BeanDefinitionReaderUtils;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +import org.springframework.context.annotation.ConfigurationClassParser.ImportRegistry;, +import org.springframework.core.PriorityOrdered;, +import org.springframework.core.type.AnnotationMetadata;, +import org.springframework.core.type.classreading.SimpleMetadataReaderFactory;, +		BeanDefinitionReaderUtils.registerWithGeneratedName(new RootBeanDefinition(ImportAwareBeanPostProcessor.class), registry);, +, +		// Register the ImportRegistry as a bean in order to support ImportAware @Configuration classes, +		if (registry instanceof SingletonBeanRegistry) {, +			if (!((SingletonBeanRegistry) registry).containsSingleton("importRegistry")) {, +				((SingletonBeanRegistry) registry).registerSingleton("importRegistry", parser.getImportRegistry());, +			}, +		}, +, +	private static class ImportAwareBeanPostProcessor implements PriorityOrdered, BeanFactoryAware, BeanPostProcessor {, +, +		private BeanFactory beanFactory;, +, +		public void setBeanFactory(BeanFactory beanFactory) throws BeansException {, +			this.beanFactory = beanFactory;, +		}, +, +		public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {, +			if (bean instanceof ImportAware) {, +				ImportRegistry importRegistry = beanFactory.getBean(ImportRegistry.class);, +				String importingClass = importRegistry.getImportingClassFor(bean.getClass().getSuperclass().getName());, +				if (importingClass != null) {, +					try {, +						AnnotationMetadata metadata = new SimpleMetadataReaderFactory().getMetadataReader(importingClass).getAnnotationMetadata();, +						((ImportAware) bean).setImportMetadata(metadata);, +					} catch (IOException ex) {, +						// should never occur -> at this point we know the class is present anyway, +						throw new IllegalStateException(ex);, +					}, +				}, +				else {, +					// no importing class was found, +				}, +			}, +			return bean;, +		}, +, +		public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {, +			return bean;, +		}]