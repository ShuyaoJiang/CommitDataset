[+++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/WebSphereDataSourceAdapter.java, + * Copyright 2002-2017 the original author or authors., +					this.wsDataSourceClass.getMethod("getConnection", jdbcConnSpecClass);, +					jdbcConnSpecClass.getMethod("setTransactionIsolation", int.class);, +			this.setReadOnlyMethod = jdbcConnSpecClass.getMethod("setReadOnly", Boolean.class);, +			this.setUserNameMethod = jdbcConnSpecClass.getMethod("setUserName", String.class);, +			this.setPasswordMethod = jdbcConnSpecClass.getMethod("setPassword", String.class);, +	 * Create a WebSphere {@code JDBCConnectionSpec} object for the given characteristics., +++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/WebSphereDataSourceAdapter.java, + * Copyright 2002-2017 the original author or authors., +					this.wsDataSourceClass.getMethod("getConnection", jdbcConnSpecClass);, +					jdbcConnSpecClass.getMethod("setTransactionIsolation", int.class);, +			this.setReadOnlyMethod = jdbcConnSpecClass.getMethod("setReadOnly", Boolean.class);, +			this.setUserNameMethod = jdbcConnSpecClass.getMethod("setUserName", String.class);, +			this.setPasswordMethod = jdbcConnSpecClass.getMethod("setPassword", String.class);, +	 * Create a WebSphere {@code JDBCConnectionSpec} object for the given characteristics., +++ b/spring-test/src/main/java/org/springframework/test/util/AopTestUtils.java, + * Copyright 2002-2017 the original author or authors., +public abstract class AopTestUtils {, +	 * @param candidate the instance to check (potentially a Spring AOP proxy;, +	 * never {@code null}), +	 * @return the target object or the {@code candidate} (never {@code null}), +		Assert.notNull(candidate, "Candidate must not be null");, +			if (AopUtils.isAopProxy(candidate) && candidate instanceof Advised) {, +		catch (Throwable ex) {, +	 * @param candidate the instance to check (potentially a Spring AOP proxy;, +	 * never {@code null}), +	 * @return the target object or the {@code candidate} (never {@code null}), +		Assert.notNull(candidate, "Candidate must not be null");, +			if (AopUtils.isAopProxy(candidate) && candidate instanceof Advised) {, +		catch (Throwable ex) {]