[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +					mbd.setScope(RootBeanDefinition.SCOPE_SINGLETON);, +				// A bean contained in a non-singleton bean cannot be a singleton itself., +				// Let's correct this on the fly here, since this might be the result of, +				// parent-child merging for the outer bean, in which case the original inner bean, +				// definition will not have inherited the merged outer bean's singleton status., +				if (containingBd != null && !containingBd.isSingleton() && mbd.isSingleton()) {, +					mbd.setScope(containingBd.getScope());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +					mbd.setScope(RootBeanDefinition.SCOPE_SINGLETON);, +				// A bean contained in a non-singleton bean cannot be a singleton itself., +				// Let's correct this on the fly here, since this might be the result of, +				// parent-child merging for the outer bean, in which case the original inner bean, +				// definition will not have inherited the merged outer bean's singleton status., +				if (containingBd != null && !containingBd.isSingleton() && mbd.isSingleton()) {, +					mbd.setScope(containingBd.getScope());, +++ b/spring-beans/src/main/resources/org/springframework/beans/factory/xml/spring-beans-4.1.xsd, +	Such inner beans do not have an independent lifecycle; they are typically, +	anonymous nested objects that share the scope of their containing bean., +	'lazy-init' attribute of the 'bean' element. The default is "default",, +	indicating inheritance from outer 'beans' sections in case of nesting,, +	otherwise falling back to "false"., +	The default 'merge' value; see the documentation for the 'merge', +	attribute of the various collection elements. The default is "default",, +	indicating inheritance from outer 'beans' sections in case of nesting,, +	otherwise falling back to "false"., +	'autowire' attribute of the 'bean' element. The default is "default",, +	indicating inheritance from outer 'beans' sections in case of nesting,, +	otherwise falling back to "no" (i.e. no externally driven autowiring)., +	Inner bean definitions inherit the scope of their containing bean, +	definition, unless explicitly specified: The inner bean will be a, +	the containing bean is a prototype, etc., +	Indicates whether this bean is to be lazily initialized. If "false",, +	it will be instantiated on startup by bean factories that perform eager, +	initialization of singletons. The effective default is "false"., +	Hence, it needs to be specified per concrete bean definition. It can be, +	shared through the 'default-lazy-init' attribute at the 'beans' level, +	and potentially inherited from outer 'beans' defaults in case of nested, +	'beans' sections (e.g. with different profiles)., +	Spring container works out dependencies. The effective default is "no"., +	Hence, it needs to be specified per concrete bean definition. It can be, +	shared through the 'default-autowire' attribute at the 'beans' level, +	and potentially inherited from outer 'beans' defaults in case of nested, +	'beans' sections (e.g. with different profiles)., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +					mbd.setScope(RootBeanDefinition.SCOPE_SINGLETON);, +				// A bean contained in a non-singleton bean cannot be a singleton itself., +				// Let's correct this on the fly here, since this might be the result of, +				// parent-child merging for the outer bean, in which case the original inner bean, +				// definition will not have inherited the merged outer bean's singleton status., +				if (containingBd != null && !containingBd.isSingleton() && mbd.isSingleton()) {, +					mbd.setScope(containingBd.getScope());, +++ b/spring-beans/src/main/resources/org/springframework/beans/factory/xml/spring-beans-4.1.xsd, +	Such inner beans do not have an independent lifecycle; they are typically, +	anonymous nested objects that share the scope of their containing bean., +	'lazy-init' attribute of the 'bean' element. The default is "default",, +	indicating inheritance from outer 'beans' sections in case of nesting,, +	otherwise falling back to "false"., +	The default 'merge' value; see the documentation for the 'merge', +	attribute of the various collection elements. The default is "default",, +	indicating inheritance from outer 'beans' sections in case of nesting,, +	otherwise falling back to "false"., +	'autowire' attribute of the 'bean' element. The default is "default",, +	indicating inheritance from outer 'beans' sections in case of nesting,, +	otherwise falling back to "no" (i.e. no externally driven autowiring)., +	Inner bean definitions inherit the scope of their containing bean, +	definition, unless explicitly specified: The inner bean will be a, +	the containing bean is a prototype, etc., +	Indicates whether this bean is to be lazily initialized. If "false",, +	it will be instantiated on startup by bean factories that perform eager, +	initialization of singletons. The effective default is "false"., +	Hence, it needs to be specified per concrete bean definition. It can be, +	shared through the 'default-lazy-init' attribute at the 'beans' level, +	and potentially inherited from outer 'beans' defaults in case of nested, +	'beans' sections (e.g. with different profiles)., +	Spring container works out dependencies. The effective default is "no"., +	Hence, it needs to be specified per concrete bean definition. It can be, +	shared through the 'default-autowire' attribute at the 'beans' level, +	and potentially inherited from outer 'beans' defaults in case of nested, +	'beans' sections (e.g. with different profiles)., +++ b/spring-beans/src/main/resources/org/springframework/beans/factory/xml/spring-beans-4.2.xsd, +	Such inner beans do not have an independent lifecycle; they are typically, +	anonymous nested objects that share the scope of their containing bean., +	Inner bean definitions inherit the scope of their containing bean, +	definition, unless explicitly specified: The inner bean will be a, +	the containing bean is a prototype, etc., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +					mbd.setScope(RootBeanDefinition.SCOPE_SINGLETON);, +				// A bean contained in a non-singleton bean cannot be a singleton itself., +				// Let's correct this on the fly here, since this might be the result of, +				// parent-child merging for the outer bean, in which case the original inner bean, +				// definition will not have inherited the merged outer bean's singleton status., +				if (containingBd != null && !containingBd.isSingleton() && mbd.isSingleton()) {, +					mbd.setScope(containingBd.getScope());, +++ b/spring-beans/src/main/resources/org/springframework/beans/factory/xml/spring-beans-4.1.xsd, +	Such inner beans do not have an independent lifecycle; they are typically, +	anonymous nested objects that share the scope of their containing bean., +	'lazy-init' attribute of the 'bean' element. The default is "default",, +	indicating inheritance from outer 'beans' sections in case of nesting,, +	otherwise falling back to "false".]