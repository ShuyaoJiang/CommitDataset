[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/BeanDefinition.java, +	 * @see #SCOPE_SINGLETON, +	 * Return whether this a <b>Prototype</b>, with an independent instance, +	 * returned for each call., +	 * @see #SCOPE_PROTOTYPE, +	 */, +	boolean isPrototype();, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/BeanDefinition.java, +	 * @see #SCOPE_SINGLETON, +	 * Return whether this a <b>Prototype</b>, with an independent instance, +	 * returned for each call., +	 * @see #SCOPE_PROTOTYPE, +	 */, +	boolean isPrototype();, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			if (rbd.isPrototype()) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/BeanDefinition.java, +	 * @see #SCOPE_SINGLETON, +	 * Return whether this a <b>Prototype</b>, with an independent instance, +	 * returned for each call., +	 * @see #SCOPE_PROTOTYPE, +	 */, +	boolean isPrototype();, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			if (rbd.isPrototype()) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +import org.springframework.util.StringUtils;, +	 * Constant for the default scope name: "", equivalent to singleton status, +	 * but to be overridden from a parent bean definition (if applicable)., +	 */, +	public static final String SCOPE_DEFAULT = "";, +, +, +	/**, +	private String scope = SCOPE_DEFAULT;, +		if (StringUtils.hasLength(other.getBeanClassName())) {, +		if (StringUtils.hasLength(other.getFactoryBeanName())) {, +		if (StringUtils.hasLength(other.getFactoryMethodName())) {, +		if (StringUtils.hasLength(other.getScope())) {, +			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {, +			if (StringUtils.hasLength(otherAbd.getDestroyMethodName())) {, +	 * <p>Default is singleton status, although this is only applied once, +	 * a bean definition becomes active in the containing factory. A bean, +	 * definition may eventually inherit its scope from a parent bean definitionFor this, +	 * reason, the default scope name is empty (empty String), with, +	 * singleton status being assumed until a resolved scope will be set., +		this.singleton = SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/BeanDefinition.java, +	 * @see #SCOPE_SINGLETON, +	 * Return whether this a <b>Prototype</b>, with an independent instance, +	 * returned for each call., +	 * @see #SCOPE_PROTOTYPE, +	 */, +	boolean isPrototype();, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			if (rbd.isPrototype()) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +import org.springframework.util.StringUtils;, +	 * Constant for the default scope name: "", equivalent to singleton status, +	 * but to be overridden from a parent bean definition (if applicable)., +	 */, +	public static final String SCOPE_DEFAULT = "";, +, +, +	/**, +	private String scope = SCOPE_DEFAULT;, +		if (StringUtils.hasLength(other.getBeanClassName())) {, +		if (StringUtils.hasLength(other.getFactoryBeanName())) {, +		if (StringUtils.hasLength(other.getFactoryMethodName())) {, +		if (StringUtils.hasLength(other.getScope())) {, +			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {, +			if (StringUtils.hasLength(otherAbd.getDestroyMethodName())) {, +	 * <p>Default is singleton status, although this is only applied once, +	 * a bean definition becomes active in the containing factory. A bean, +	 * definition may eventually inherit its scope from a parent bean definitionFor this, +	 * reason, the default scope name is empty (empty String), with, +	 * singleton status being assumed until a resolved scope will be set., +		this.singleton = SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +				if (!StringUtils.hasLength(mbd.getScope())) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/BeanDefinition.java, +	 * @see #SCOPE_SINGLETON, +	 * Return whether this a <b>Prototype</b>, with an independent instance, +	 * returned for each call., +	 * @see #SCOPE_PROTOTYPE, +	 */, +	boolean isPrototype();, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			if (rbd.isPrototype()) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java]