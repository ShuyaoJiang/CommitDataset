[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +	public void onAllDataRead() {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +	public void onAllDataRead() {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowHttpHandlerAdapter.java, +		UndertowServerHttpRequest request = new UndertowServerHttpRequest(exchange, this.dataBufferFactory);, +				request.close();, +				request.close();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +	public void onAllDataRead() {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowHttpHandlerAdapter.java, +		UndertowServerHttpRequest request = new UndertowServerHttpRequest(exchange, this.dataBufferFactory);, +				request.close();, +				request.close();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpRequest.java, +import io.undertow.connector.ByteBufferPool;, +	void close() {, +		this.body.onAllDataRead();, +	}, +, +		private final ByteBufferPool byteBufferPool;, +, +		private PooledByteBuffer pooledByteBuffer;, +			this.byteBufferPool = exchange.getConnection().getByteBufferPool();, +			if (this.pooledByteBuffer == null) {, +				this.pooledByteBuffer = this.byteBufferPool.allocate();, +			}, +		@Override, +		public void onAllDataRead() {, +			if (this.pooledByteBuffer != null && this.pooledByteBuffer.isOpen()) {, +				this.pooledByteBuffer.close();, +			}, +			super.onAllDataRead();, +		}, +]