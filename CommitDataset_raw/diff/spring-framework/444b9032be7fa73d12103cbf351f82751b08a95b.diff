[+++ b/spring-jms/src/main/java/org/springframework/jms/config/MethodJmsListenerEndpoint.java, +import org.springframework.jms.support.destination.DestinationResolver;, +		DestinationResolver destinationResolver = container.getDestinationResolver();, +		if (destinationResolver != null) {, +			messageListener.setDestinationResolver(destinationResolver);, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/config/MethodJmsListenerEndpoint.java, +import org.springframework.jms.support.destination.DestinationResolver;, +		DestinationResolver destinationResolver = container.getDestinationResolver();, +		if (destinationResolver != null) {, +			messageListener.setDestinationResolver(destinationResolver);, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/MessageListenerContainer.java, +import org.springframework.jms.support.destination.DestinationResolver;, +	 * Return the {@link DestinationResolver} to use to resolve, +	 * destinations by names., +	 */, +	DestinationResolver getDestinationResolver();, +, +	/**, +++ b/spring-jms/src/main/java/org/springframework/jms/config/MethodJmsListenerEndpoint.java, +import org.springframework.jms.support.destination.DestinationResolver;, +		DestinationResolver destinationResolver = container.getDestinationResolver();, +		if (destinationResolver != null) {, +			messageListener.setDestinationResolver(destinationResolver);, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/MessageListenerContainer.java, +import org.springframework.jms.support.destination.DestinationResolver;, +	 * Return the {@link DestinationResolver} to use to resolve, +	 * destinations by names., +	 */, +	DestinationResolver getDestinationResolver();, +, +	/**, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/endpoint/JmsMessageEndpointManager.java, +	public DestinationResolver getDestinationResolver() {, +		if (this.activationSpecFactory instanceof StandardJmsActivationSpecFactory) {, +			return ((StandardJmsActivationSpecFactory) this.activationSpecFactory).getDestinationResolver();, +		}, +		return null;, +	}, +, +	@Override, +++ b/spring-jms/src/main/java/org/springframework/jms/config/MethodJmsListenerEndpoint.java, +import org.springframework.jms.support.destination.DestinationResolver;, +		DestinationResolver destinationResolver = container.getDestinationResolver();, +		if (destinationResolver != null) {, +			messageListener.setDestinationResolver(destinationResolver);, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/MessageListenerContainer.java, +import org.springframework.jms.support.destination.DestinationResolver;, +	 * Return the {@link DestinationResolver} to use to resolve, +	 * destinations by names., +	 */, +	DestinationResolver getDestinationResolver();, +, +	/**, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/endpoint/JmsMessageEndpointManager.java, +	public DestinationResolver getDestinationResolver() {, +		if (this.activationSpecFactory instanceof StandardJmsActivationSpecFactory) {, +			return ((StandardJmsActivationSpecFactory) this.activationSpecFactory).getDestinationResolver();, +		}, +		return null;, +	}, +, +	@Override, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/endpoint/StandardJmsActivationSpecFactory.java, + * Copyright 2002-2015 the original author or authors., +	/**, +	 * Return the {@link DestinationResolver} to use for resolving destinations names., +	 */, +	public DestinationResolver getDestinationResolver() {, +		return destinationResolver;, +	}, +++ b/spring-jms/src/main/java/org/springframework/jms/config/MethodJmsListenerEndpoint.java, +import org.springframework.jms.support.destination.DestinationResolver;, +		DestinationResolver destinationResolver = container.getDestinationResolver();, +		if (destinationResolver != null) {, +			messageListener.setDestinationResolver(destinationResolver);, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/MessageListenerContainer.java, +import org.springframework.jms.support.destination.DestinationResolver;, +	 * Return the {@link DestinationResolver} to use to resolve, +	 * destinations by names., +	 */, +	DestinationResolver getDestinationResolver();, +, +	/**, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/endpoint/JmsMessageEndpointManager.java, +	public DestinationResolver getDestinationResolver() {, +		if (this.activationSpecFactory instanceof StandardJmsActivationSpecFactory) {, +			return ((StandardJmsActivationSpecFactory) this.activationSpecFactory).getDestinationResolver();, +		}, +		return null;, +	}, +, +	@Override, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/endpoint/StandardJmsActivationSpecFactory.java, + * Copyright 2002-2015 the original author or authors., +	/**]