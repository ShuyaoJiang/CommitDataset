[+++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/BeanMethod.java, +import org.springframework.beans.BeanMetadataElement;, +import org.springframework.config.java.Configuration;, +/**, + * Represents a {@link Configuration} class method marked with the {@link Bean} annotation., + *, + * @author Chris Beams, + */, +final class BeanMethod implements BeanMetadataElement {, +, +	private transient Object source;, +	 * @see ConfigurationClass#addBeanMethod(BeanMethod), +	public void setSource(Object source) {, +		this.source = source;, +	public Object getSource() {, +		return source;, +	}, +, +	public Location getLocation() {, +		return new Location(declaringClass.getLocation().getResource(), getSource());, +			      BeanMethod.this.getLocation());, +			      BeanMethod.this.getLocation());, +			      BeanMethod.this.getLocation());, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/BeanMethod.java, +import org.springframework.beans.BeanMetadataElement;, +import org.springframework.config.java.Configuration;, +/**, + * Represents a {@link Configuration} class method marked with the {@link Bean} annotation., + *, + * @author Chris Beams, + */, +final class BeanMethod implements BeanMetadataElement {, +, +	private transient Object source;, +	 * @see ConfigurationClass#addBeanMethod(BeanMethod), +	public void setSource(Object source) {, +		this.source = source;, +	public Object getSource() {, +		return source;, +	}, +, +	public Location getLocation() {, +		return new Location(declaringClass.getLocation().getResource(), getSource());, +			      BeanMethod.this.getLocation());, +			      BeanMethod.this.getLocation());, +			      BeanMethod.this.getLocation());, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/ConfigurationClass.java, + * @see ConfigurationModel, + * @see BeanMethod, + * @see ConfigurationParser, +	private Configuration configurationAnnotation;, +	public void setBeanName(String id) {, +	public int getModifiers() {, +		return modifiers;, +	}, +, +	public void setModifiers(int modifiers) {, +		Assert.isTrue(modifiers >= 0, "modifiers must be non-negative");, +		this.modifiers = modifiers;, +	}, +, +	public Configuration getConfigurationAnnotation() {, +		return this.configurationAnnotation;, +	}, +, +	public void setConfigurationAnnotation(Configuration configAnno) {, +		Assert.notNull(configAnno, "configuration annotation must be non-null");, +		this.configurationAnnotation = configAnno;, +	}, +, +	public Set<BeanMethod> getBeanMethods() {, +	public ConfigurationClass addBeanMethod(BeanMethod method) {, +		method.setDeclaringClass(this);, +		methods.add(method);, +	public void setDeclaringClass(ConfigurationClass configurationClass) {, +		this.declaringClass = configurationClass;, +		if (configurationAnnotation == null), +		result = prime * result + ((configurationAnnotation == null) ? 0 : configurationAnnotation.hashCode());, +		if (configurationAnnotation == null) {, +			if (other.configurationAnnotation != null), +		} else if (!configurationAnnotation.equals(other.configurationAnnotation)), +	class NonAnnotatedConfigurationProblem extends Problem {, +		NonAnnotatedConfigurationProblem() {, +			      ConfigurationClass.this.getLocation());, +	class FinalConfigurationProblem extends Problem {, +		FinalConfigurationProblem() {, +			             getSimpleName()),, +			      ConfigurationClass.this.getLocation());, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/BeanMethod.java, +import org.springframework.beans.BeanMetadataElement;, +import org.springframework.config.java.Configuration;, +/**, + * Represents a {@link Configuration} class method marked with the {@link Bean} annotation., + *, + * @author Chris Beams, + */, +final class BeanMethod implements BeanMetadataElement {, +, +	private transient Object source;, +	 * @see ConfigurationClass#addBeanMethod(BeanMethod)]