[+++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageWriter.java, +		return Mono.defer(() ->, +				Mono.just(bufferFactory.allocateBuffer(bytes.length).write(bytes)));, +++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageWriter.java, +		return Mono.defer(() ->, +				Mono.just(bufferFactory.allocateBuffer(bytes.length).write(bytes)));, +++ b/spring-web/src/test/java/org/springframework/http/codec/ServerSentEventHttpMessageWriterTests.java, +import static org.springframework.core.ResolvableType.forClass;, +	@SuppressWarnings("rawtypes"), +	public void writeServerSentEventError() {, +		ServerSentEvent<?> event = ServerSentEvent.builder().data("bar").id("c42").event("foo"), +				.comment("bla\nbla bla\nbla bla bla").retry(Duration.ofMillis(123L)).build();, +, +		Flux<ServerSentEvent> source = Flux.concat(, +				Flux.just(event),, +				Flux.error(new RuntimeException()));, +		MockServerHttpResponse outputMessage = new MockServerHttpResponse();, +, +		Mono<Void> result = this.messageWriter.write(source, forClass(ServerSentEvent.class),, +						MediaType.TEXT_EVENT_STREAM, outputMessage, HINTS);, +, +		StepVerifier.create(result), +				.verifyError(RuntimeException.class);, +	}, +, +	@Test, +		Mono<Void> result =, +				this.messageWriter.write(source, forClass(clazz), mediaType, response, HINTS);, +, +		StepVerifier.create(result), +				.verifyComplete();]