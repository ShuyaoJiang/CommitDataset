[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/HandlerExceptionResolver.java, + * Copyright 2002-2015 the original author or authors., + * Interface to be implemented by objects that can resolve exceptions thrown during, + * handler mapping or execution, in the typical case to error views. Implementors are, + * typically registered as beans in the application context., + * <p>Error views are analogous to JSP error pages but can be used with any kind of, + * exception including any checked exception, with potentially fine-grained mappings for, + * specific handlers., +	 * Try to resolve the given exception that got thrown during handler execution,, +	 * returning a {@link ModelAndView} that represents a specific error page if appropriate., +	 * <p>The returned {@code ModelAndView} may be {@linkplain ModelAndView#isEmpty() empty}, +	 * @return a corresponding {@code ModelAndView} to forward to, or {@code null}, +	 * for default processing, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/HandlerExceptionResolver.java, + * Copyright 2002-2015 the original author or authors., + * Interface to be implemented by objects that can resolve exceptions thrown during, + * handler mapping or execution, in the typical case to error views. Implementors are, + * typically registered as beans in the application context., + * <p>Error views are analogous to JSP error pages but can be used with any kind of, + * exception including any checked exception, with potentially fine-grained mappings for, + * specific handlers., +	 * Try to resolve the given exception that got thrown during handler execution,, +	 * returning a {@link ModelAndView} that represents a specific error page if appropriate., +	 * <p>The returned {@code ModelAndView} may be {@linkplain ModelAndView#isEmpty() empty}, +	 * @return a corresponding {@code ModelAndView} to forward to, or {@code null}, +	 * for default processing, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerExceptionResolver.java, + * <p>Supports mapped {@linkplain #setMappedHandlers handlers} and, + * {@linkplain #setMappedHandlerClasses handler classes} that the resolver, + * should be applied to and implements the {@link Ordered} interface., + * @author Sam Brannen, +	 * <p>The exception mappings and the default error view will only apply to the specified handlers., +	 * <p>If no handlers or handler classes are set, the exception mappings and the default error, +	 * as a fallback for all exceptions; any further HandlerExceptionResolvers in the chain will be, +	 * <p>The exception mappings and the default error view will only apply to handlers of the, +	 * specified types; the specified types may be interfaces or superclasses of handlers as well., +	 * <p>If no handlers or handler classes are set, the exception mappings and the default error, +	 * as a fallback for all exceptions; any further HandlerExceptionResolvers in the chain will be, +	 * implementation through Commons Logging, getting interpreted as a log category according, +	 * <p>Set to {@code null} to disable warn logging., +	 * <p>Override the {@link #logException} method for custom logging., +	 * by this exception resolver., +	 * <p>Default is {@code false}. Switch this to {@code true} in order to, +	 * automatically generate HTTP response headers that suppress response caching., +	 * Check whether this resolver is supposed to apply (i.e. if the supplied handler, +	 * matches any of the configured {@linkplain #setMappedHandlers handlers} or, +	 * {@linkplain #setMappedHandlerClasses handler classes}), and then delegate, +	 * to the {@link #doResolveException} template method., +	 * <p>The default implementation checks against the configured, +	 * {@linkplain #setMappedHandlers handlers} and, +	 * {@linkplain #setMappedHandlerClasses handler classes}, if any., +	 * Actually resolve the given exception that got thrown during handler execution,, +	 * returning a {@link ModelAndView} that represents a specific error page if appropriate., +	 * @return a corresponding {@code ModelAndView} to forward to, or {@code null} for default processing, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/HandlerExceptionResolver.java, + * Copyright 2002-2015 the original author or authors., + * Interface to be implemented by objects that can resolve exceptions thrown during, + * handler mapping or execution, in the typical case to error views. Implementors are, + * typically registered as beans in the application context., + * <p>Error views are analogous to JSP error pages but can be used with any kind of, + * exception including any checked exception, with potentially fine-grained mappings for, + * specific handlers., +	 * Try to resolve the given exception that got thrown during handler execution,, +	 * returning a {@link ModelAndView} that represents a specific error page if appropriate., +	 * <p>The returned {@code ModelAndView} may be {@linkplain ModelAndView#isEmpty() empty}, +	 * @return a corresponding {@code ModelAndView} to forward to, or {@code null}, +	 * for default processing, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerExceptionResolver.java, + * <p>Supports mapped {@linkplain #setMappedHandlers handlers} and, + * {@linkplain #setMappedHandlerClasses handler classes} that the resolver, + * should be applied to and implements the {@link Ordered} interface., + * @author Sam Brannen, +	 * <p>The exception mappings and the default error view will only apply to the specified handlers., +	 * <p>If no handlers or handler classes are set, the exception mappings and the default error, +	 * as a fallback for all exceptions; any further HandlerExceptionResolvers in the chain will be, +	 * <p>The exception mappings and the default error view will only apply to handlers of the, +	 * specified types; the specified types may be interfaces or superclasses of handlers as well., +	 * <p>If no handlers or handler classes are set, the exception mappings and the default error, +	 * as a fallback for all exceptions; any further HandlerExceptionResolvers in the chain will be, +	 * implementation through Commons Logging, getting interpreted as a log category according, +	 * <p>Set to {@code null} to disable warn logging., +	 * <p>Override the {@link #logException} method for custom logging., +	 * by this exception resolver., +	 * <p>Default is {@code false}. Switch this to {@code true} in order to, +	 * automatically generate HTTP response headers that suppress response caching., +	 * Check whether this resolver is supposed to apply (i.e. if the supplied handler, +	 * matches any of the configured {@linkplain #setMappedHandlers handlers} or, +	 * {@linkplain #setMappedHandlerClasses handler classes}), and then delegate, +	 * to the {@link #doResolveException} template method., +	 * <p>The default implementation checks against the configured, +	 * {@linkplain #setMappedHandlers handlers} and, +	 * {@linkplain #setMappedHandlerClasses handler classes}, if any., +	 * Actually resolve the given exception that got thrown during handler execution,, +	 * returning a {@link ModelAndView} that represents a specific error page if appropriate., +	 * @return a corresponding {@code ModelAndView} to forward to, or {@code null} for default processing, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/JsonViewResponseBodyAdvice.java, + * which will then use it to serialize the response body., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/HandlerExceptionResolver.java, + * Copyright 2002-2015 the original author or authors., + * Interface to be implemented by objects that can resolve exceptions thrown during]