[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Projection.java, + * @author Juergen Hoeller, +		if (operand instanceof Iterable || operandIsArray) {, +			Iterable<?> data = (operand instanceof Iterable ?, +					(Iterable<?>) operand : Arrays.asList(ObjectUtils.toObjectArray(operand)));, +, +, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Projection.java, + * @author Juergen Hoeller, +		if (operand instanceof Iterable || operandIsArray) {, +			Iterable<?> data = (operand instanceof Iterable ?, +					(Iterable<?>) operand : Arrays.asList(ObjectUtils.toObjectArray(operand)));, +, +, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Selection.java, + * @author Juergen Hoeller, +, +, +, +		if (operand instanceof Iterable || ObjectUtils.isArray(operand)) {, +			Iterable<?> data = (operand instanceof Iterable ?, +					(Iterable<?>) operand : Arrays.asList(ObjectUtils.toObjectArray(operand)));, +, +			if ((this.variant == FIRST || this.variant == LAST) && result.isEmpty()) {, +			if (operand instanceof Iterable) {, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Projection.java, + * @author Juergen Hoeller, +		if (operand instanceof Iterable || operandIsArray) {, +			Iterable<?> data = (operand instanceof Iterable ?, +					(Iterable<?>) operand : Arrays.asList(ObjectUtils.toObjectArray(operand)));, +, +, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Selection.java, + * @author Juergen Hoeller, +, +, +, +		if (operand instanceof Iterable || ObjectUtils.isArray(operand)) {, +			Iterable<?> data = (operand instanceof Iterable ?, +					(Iterable<?>) operand : Arrays.asList(ObjectUtils.toObjectArray(operand)));, +, +			if ((this.variant == FIRST || this.variant == LAST) && result.isEmpty()) {, +			if (operand instanceof Iterable) {, +, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SelectionAndProjectionTests.java, + * Copyright 2002-2015 the original author or authors., +import java.util.Iterator;, + * @author Juergen Hoeller, +	public void selectionWithIterable() throws Exception {, +		Expression expression = new SpelExpressionParser().parseRaw("integers.?[#this<5]");, +		EvaluationContext context = new StandardEvaluationContext(new IterableTestBean());, +		Object value = expression.getValue(context);, +		assertTrue(value instanceof List);, +		List<?> list = (List<?>) value;, +		assertEquals(5, list.size());, +		assertEquals(0, list.get(0));, +		assertEquals(1, list.get(1));, +		assertEquals(2, list.get(2));, +		assertEquals(3, list.get(3));, +		assertEquals(4, list.get(4));, +	}, +, +	@Test, +	public void projectionWithIterable() throws Exception {, +		Expression expression = new SpelExpressionParser().parseRaw("#testList.![wrapper.value]");, +		EvaluationContext context = new StandardEvaluationContext();, +		context.setVariable("testList", IntegerTestBean.createIterable());, +		Object value = expression.getValue(context);, +		assertTrue(value instanceof List);, +		List<?> list = (List<?>) value;, +		assertEquals(3, list.size());, +		assertEquals(5, list.get(0));, +		assertEquals(6, list.get(1));, +		assertEquals(7, list.get(2));, +	}, +, +	@Test, +, +, +	static class IterableTestBean {, +, +		private final Set<Integer> integers = new LinkedHashSet<Integer>();, +, +		IterableTestBean() {, +			for (int i = 0; i < 10; i++) {, +				integers.add(i);, +			}, +		}, +, +		public Iterable<Integer> getIntegers() {, +			return new Iterable<Integer>() {, +				@Override, +				public Iterator<Integer> iterator() {, +					return integers.iterator();, +				}, +			};]