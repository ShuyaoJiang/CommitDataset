[+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/socket/server/WebSocketIntegrationTests.java, +import org.reactivestreams.Publisher;, +import org.springframework.http.HttpHeaders;, +	public void subProtocolReactorClient() throws Exception {, +				new WebSocketHandler() {, +, +					@Override, +					public String[] getSubProtocols() {, +						return new String[] {protocol};, +					}, +	@Test, +	public void customHeaderReactorClient() throws Exception {, +		testCustomHeader(new ReactorNettyWebSocketClient());, +	}, +	public void customHeaderRxNettyClient() throws Exception {, +		testCustomHeader(new RxNettyWebSocketClient());, +	}, +, +	private void testCustomHeader(WebSocketClient client) throws Exception {, +, +		HttpHeaders headers = new HttpHeaders();, +		headers.add("my-header", "my-value");, +		MonoProcessor<Object> output = MonoProcessor.create();, +, +		client.execute(getUrl("/custom-header"), headers,, +				session -> session.receive(), +						.map(WebSocketMessage::getPayloadAsText), +						.subscribeWith(output), +						.then()), +				.blockMillis(5000);, +, +		assertEquals("my-header:my-value", output.blockMillis(5000));, +			map.put("/sub-protocol", new SubProtocolWebSocketHandler());, +			map.put("/custom-header", new CustomHeaderHandler());, +			return new String[] {"echo-v1"};, +			return doSend(session, Mono.just(message));, +	private static class CustomHeaderHandler implements WebSocketHandler {, +, +		@Override, +		public Mono<Void> handle(WebSocketSession session) {, +			HttpHeaders headers = session.getHandshakeInfo().getHeaders();, +			String payload = "my-header:" + headers.getFirst("my-header");, +			WebSocketMessage message = session.textMessage(payload);, +			return doSend(session, Mono.just(message));, +		}, +	}, +, +	// TODO: workaround for suspected RxNetty WebSocket client issue, +	// https://github.com/ReactiveX/RxNetty/issues/560, +, +	private static Mono<Void> doSend(WebSocketSession session, Publisher<WebSocketMessage> output) {, +		return session.send(Mono.delayMillis(100).thenMany(output));, +	}, +, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/socket/server/WebSocketIntegrationTests.java, +import org.reactivestreams.Publisher;, +import org.springframework.http.HttpHeaders;, +	public void subProtocolReactorClient() throws Exception {, +				new WebSocketHandler() {, +, +					@Override, +					public String[] getSubProtocols() {, +						return new String[] {protocol};, +					}, +	@Test, +	public void customHeaderReactorClient() throws Exception {, +		testCustomHeader(new ReactorNettyWebSocketClient());, +	}, +	public void customHeaderRxNettyClient() throws Exception {, +		testCustomHeader(new RxNettyWebSocketClient());, +	}, +, +	private void testCustomHeader(WebSocketClient client) throws Exception {, +, +		HttpHeaders headers = new HttpHeaders();, +		headers.add("my-header", "my-value");, +		MonoProcessor<Object> output = MonoProcessor.create();, +, +		client.execute(getUrl("/custom-header"), headers,, +				session -> session.receive(), +						.map(WebSocketMessage::getPayloadAsText), +						.subscribeWith(output), +						.then()), +				.blockMillis(5000);, +, +		assertEquals("my-header:my-value", output.blockMillis(5000));, +			map.put("/sub-protocol", new SubProtocolWebSocketHandler());, +			map.put("/custom-header", new CustomHeaderHandler());, +			return new String[] {"echo-v1"};, +			return doSend(session, Mono.just(message));, +	private static class CustomHeaderHandler implements WebSocketHandler {, +, +		@Override, +		public Mono<Void> handle(WebSocketSession session) {, +			HttpHeaders headers = session.getHandshakeInfo().getHeaders();, +			String payload = "my-header:" + headers.getFirst("my-header");, +			WebSocketMessage message = session.textMessage(payload);, +			return doSend(session, Mono.just(message));, +		}, +	}]