[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +						throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");, +								"Scope '" + scopeName + "' is not active for the current thread; consider " +, +								"defining a scoped proxy for this bean if you intend to refer to it from a singleton",, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +						throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'");, +								"Scope '" + scopeName + "' is not active for the current thread; consider " +, +								"defining a scoped proxy for this bean if you intend to refer to it from a singleton",, +++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java, +import org.springframework.beans.factory.BeanCreationException;, +import org.springframework.beans.factory.ObjectFactory;, +import org.springframework.util.Assert;, +		this.context.publishEvent(new ContextRefreshedEvent(this.context));, +		this.eventCollector.assertNoEventReceived(proxy.getId());, +, +		this.context.publishEvent(new ContextRefreshedEvent(this.context));, +		this.eventCollector.assertNoEventReceived(proxy.getId());, +, +		this.context.publishEvent(new ContextRefreshedEvent(this.context));, +		this.eventCollector.assertNoEventReceived(proxy.getId());, +, +	public void eventListenerWorksWithCustomScope() throws Exception {, +		load(CustomScopeTestBean.class);, +		CustomScope customScope = new CustomScope();, +		this.context.getBeanFactory().registerScope("custom", customScope);, +, +		CustomScopeTestBean proxy = this.context.getBean(CustomScopeTestBean.class);, +		assertTrue("bean should be a cglib proxy", AopUtils.isCglibProxy(proxy));, +		this.eventCollector.assertNoEventReceived(proxy.getId());, +, +		this.context.publishEvent(new ContextRefreshedEvent(this.context));, +		this.eventCollector.assertNoEventReceived(proxy.getId());, +, +		customScope.active = false;, +		this.context.publishEvent(new ContextRefreshedEvent(this.context));, +		customScope.active = true;, +		this.eventCollector.assertNoEventReceived(proxy.getId());, +, +		TestEvent event = new TestEvent();, +		this.context.publishEvent(event);, +		this.eventCollector.assertEvent(proxy.getId(), event);, +		this.eventCollector.assertTotalEventsCount(1);, +, +		try {, +			customScope.active = false;, +			this.context.publishEvent(new TestEvent());, +			fail("Should have thrown IllegalStateException");, +		}, +		catch (BeanCreationException ex) {, +			// expected, +			assertTrue(ex.getCause() instanceof IllegalStateException);, +		}, +	}, +, +	@Test, +	@Scope(scopeName = "custom", proxyMode = ScopedProxyMode.TARGET_CLASS), +	static class CustomScopeTestBean extends AbstractTestEventListener {, +, +		@EventListener, +		public void handleIt(TestEvent event) {, +			collectEvent(event);, +		}, +	}, +, +, +	@Component, +, +	private static class CustomScope implements org.springframework.beans.factory.config.Scope {, +, +		public boolean active = true;, +, +		private Object instance = null;, +, +		@Override, +		public Object get(String name, ObjectFactory<?> objectFactory) {, +			Assert.state(this.active, "Not active");, +			if (this.instance == null) {, +				this.instance = objectFactory.getObject();, +			}, +			return this.instance;, +		}, +, +		@Override, +		public Object remove(String name) {, +			return null;, +		}, +, +		@Override, +		public void registerDestructionCallback(String name, Runnable callback) {, +		}, +, +		@Override, +		public Object resolveContextualObject(String key) {, +			return null;, +		}, +, +		@Override, +		public String getConversationId() {, +			return null;, +		}]