[+++ b/spring-framework-reference/src/beans-annotation-config.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN", +"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">, +<section id="beans-annotation-config">, +  <title>Annotation-based container configuration</title>, +, +  <sidebar>, +    <title>Are annotations better than XML for configuring Spring?</title>, +, +    <para>The introduction of annotation-based configurations raised the, +      question of whether this approach is 'better' than XML. The short answer, +      is <emphasis>it depends</emphasis>. The long answer is that each approach, +      has its pros and cons, and usually it is up to the developer to decide, +      which strategy suits her better. Due to the way they are defined,, +      annotations provide a lot of context in their declaration, leading to, +      shorter and more concise configuration. However, XML excels at wiring up, +      components without touching their source code or recompiling them. Some, +      developers prefer having the wiring close to the source while others argue, +      that annotated classes are no longer POJOs and, furthermore, that the, +      configuration becomes decentralized and harder to control.</para>, +, +    <para>No matter the choice, Spring can accommodate both styles and even mix, +      them together. It's worth pointing out that through its <link, +      linkend="beans-java">JavaConfig</link> option, Spring allows annotations, +      to be used in a non-invasive way, without touching the target components, +      source code and that in terms of tooling, all configuration styles are, +      supported by the <ulink url="http://www.springsource.com/products/sts", +      >SpringSource Tool Suite</ulink>.</para>, +  </sidebar>, +, +  <para>An alternative to XML setups is provided by annotation-based, +    configuration which rely on the bytecode metadata for wiring up components, +    instead of angle-bracket declarations. Instead of using XML to describe a, +    bean wiring, the developer moves the configuration into the component class, +    itself by using annotations on the relevant class, method, or field, +    declaration. As mentioned in <xref, +    linkend="beans-factory-extension-bpp-examples-rabpp"/>, using a, +    <interfacename>BeanPostProcessor</interfacename> in conjunction with, +    annotations is a common means of extending the Spring IoC container. For, +    example, Spring 2.0 introduced the possibility of enforcing required, +    properties with the <link linkend="beans-required-annotation", +    >@Required</link> annotation. As of Spring 2.5, it is now possible to follow, +    that same general approach to drive Spring's dependency injection., +    Essentially, the <interfacename>@Autowired</interfacename> annotation, +    provides the same capabilities as described in <xref, +    linkend="beans-factory-autowire"/> but with more fine-grained control and, +    wider applicability. Spring 2.5 also adds support for JSR-250 annotations, +    such as <interfacename>@Resource</interfacename>,, +    <interfacename>@PostConstruct</interfacename>, and, +    <interfacename>@PreDestroy</interfacename>. Spring 3.0 adds support for, +    JSR-330 (Dependency Injection for Java) annotations contained in the, +    javax.inject package such as <classname>@Inject</classname>,, +    <literal>@Qualifier, @Named, and @Provider</literal> if the JSR330 jar is, +    present on the classpath. Use of these annotations also requires that, +    certain <interfacename>BeanPostProcessors</interfacename> be registered, +    within the Spring container. <note> Annotation injection is performed, +    <emphasis>before</emphasis> XML injection, thus the latter configuration, +    will override the former for properties wired through both approaches., +    </note> As always, you can register them as individual bean definitions, but, +    they can also be implicitly registered by including the following tag in an, +    XML-based Spring configuration (notice the inclusion of the, +    <literal>context</literal> namespace):</para>, +, +  <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;, +&lt;beans xmlns="http://www.springframework.org/schema/beans", +     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +     <lineannotation>xmlns:context="http://www.springframework.org/schema/context"</lineannotation>, +     xsi:schemaLocation="http://www.springframework.org/schema/beans, +         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd, +         http://www.springframework.org/schema/context, +         http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;, +, +   <lineannotation>&lt;context:annotation-config/&gt;</lineannotation>, +, +&lt;/beans&gt;</programlisting>, +, +  <para>(The implicitly registered post-processors include <ulink, +    url="http://static.springframework.org/spring/docs/3.0.x/javadoc-api/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.html", +    ><classname>AutowiredAnnotationBeanPostProcessor</classname></ulink>, <ulink, +    url="http://static.springframework.org/spring/docs/3.0.x/javadoc-api/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.html", +    ><classname>CommonAnnotationBeanPostProcessor</classname></ulink>, <ulink, +    url="http://static.springframework.org/spring/docs/3.0.x/javadoc-api/org/springframework/orm/jpa/support/PersistenceAnnotationBeanPostProcessor.html", +    ><classname>PersistenceAnnotationBeanPostProcessor</classname></ulink>, as, +    well as the aforementioned <ulink, +    url="http://static.springframework.org/spring/docs/3.0.x/javadoc-api/org/springframework/beans/factory/annotation/RequiredAnnotationBeanPostProcessor.html", +    ><classname>RequiredAnnotationBeanPostProcessor</classname></ulink>.)</para>, +, +  <note>, +    <para><literal>&lt;context:annotation-config/&gt;</literal> only looks for, +      annotations on beans in the same application context in which it is, +      defined. This means that, if you put, +      <literal>&lt;context:annotation-config/&gt;</literal> in a, +      <interfacename>WebApplicationContext</interfacename> for a, +      <classname>DispatcherServlet</classname>, it only checks for, +      <interfacename>@Autowired</interfacename> beans in your controllers, and, +      not your services. See <xref linkend="mvc-servlet"/> for more, +      information.</para>, +  </note>, +]