[+++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/security/CallbacksSecurityTests.java, +		final Method method = bean.getClass().getMethod("destroy");, +					method.invoke(bean);, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/security/CallbacksSecurityTests.java, +		final Method method = bean.getClass().getMethod("destroy");, +					method.invoke(bean);, +++ b/spring-context/src/main/java/org/springframework/validation/ValidationUtils.java, +		invokeValidator(validator, obj, errors, (Object[]) null);, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/security/CallbacksSecurityTests.java, +		final Method method = bean.getClass().getMethod("destroy");, +					method.invoke(bean);, +++ b/spring-context/src/main/java/org/springframework/validation/ValidationUtils.java, +		invokeValidator(validator, obj, errors, (Object[]) null);, +++ b/spring-context/src/test/java/org/springframework/jmx/export/assembler/MethodExclusionMBeanInfoAssemblerTests.java, +		Method method = JmxTestBean.class.getMethod("dontExposeMe");, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/security/CallbacksSecurityTests.java, +		final Method method = bean.getClass().getMethod("destroy");, +					method.invoke(bean);, +++ b/spring-context/src/main/java/org/springframework/validation/ValidationUtils.java, +		invokeValidator(validator, obj, errors, (Object[]) null);, +++ b/spring-context/src/test/java/org/springframework/jmx/export/assembler/MethodExclusionMBeanInfoAssemblerTests.java, +		Method method = JmxTestBean.class.getMethod("dontExposeMe");, +++ b/spring-core/src/test/java/org/springframework/core/LocalVariableTableParameterNameDiscovererTests.java, +		m = clazz.getMethod("getDate");, +		Method m = clazz.getMethod(methodName);, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/security/CallbacksSecurityTests.java, +		final Method method = bean.getClass().getMethod("destroy");, +					method.invoke(bean);, +++ b/spring-context/src/main/java/org/springframework/validation/ValidationUtils.java, +		invokeValidator(validator, obj, errors, (Object[]) null);, +++ b/spring-context/src/test/java/org/springframework/jmx/export/assembler/MethodExclusionMBeanInfoAssemblerTests.java, +		Method method = JmxTestBean.class.getMethod("dontExposeMe");, +++ b/spring-core/src/test/java/org/springframework/core/LocalVariableTableParameterNameDiscovererTests.java, +		m = clazz.getMethod("getDate");, +		Method m = clazz.getMethod(methodName);, +++ b/spring-core/src/test/java/org/springframework/core/style/ToStringCreatorTests.java, +		String str = new ToStringCreator(this).append("myMethod", this.getClass().getMethod("testMethod")), +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/security/CallbacksSecurityTests.java, +		final Method method = bean.getClass().getMethod("destroy");, +					method.invoke(bean);, +++ b/spring-context/src/main/java/org/springframework/validation/ValidationUtils.java, +		invokeValidator(validator, obj, errors, (Object[]) null);, +++ b/spring-context/src/test/java/org/springframework/jmx/export/assembler/MethodExclusionMBeanInfoAssemblerTests.java, +		Method method = JmxTestBean.class.getMethod("dontExposeMe");, +++ b/spring-core/src/test/java/org/springframework/core/LocalVariableTableParameterNameDiscovererTests.java, +		m = clazz.getMethod("getDate");, +		Method m = clazz.getMethod(methodName);, +++ b/spring-core/src/test/java/org/springframework/core/style/ToStringCreatorTests.java, +		String str = new ToStringCreator(this).append("myMethod", this.getClass().getMethod("testMethod")), +++ b/spring-core/src/test/java/org/springframework/util/ClassUtilsTests.java, +		assertTrue(ClassUtils.hasMethod(Collection.class, "size"));, +		assertTrue(ClassUtils.hasMethod(Collection.class, "remove", Object.class));, +		assertFalse(ClassUtils.hasMethod(Collection.class, "remove"));, +		assertFalse(ClassUtils.hasMethod(Collection.class, "someOtherMethod"));, +		Method method = ClassUtils.getMethodIfAvailable(Collection.class, "size");, +		assertNull(ClassUtils.getMethodIfAvailable(Collection.class, "remove"));, +		assertNull(ClassUtils.getMethodIfAvailable(Collection.class, "someOtherMethod"));]