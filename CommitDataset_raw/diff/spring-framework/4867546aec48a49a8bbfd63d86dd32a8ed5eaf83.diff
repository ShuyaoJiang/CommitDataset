[+++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java, +	private static final long serialVersionUID = 7035068984263400920L;, +	public static final UUID ID_VALUE_NONE = new UUID(0,0);, +, +	 * Construct a {@link MessageHeaders} with the given headers. An {@link #ID} and, +	 * {@link #TIMESTAMP} headers will also be added, overriding any existing values., +	 *, +		this(headers, null, null);, +	 * Constructor providing control over the ID and TIMESTAMP header values., +	 * @param id the {@link #ID} header value, +	 * @param timestamp the {@link #TIMESTAMP} header value, +, +, +		if (id == null) {, +			this.headers.put(ID, getIdGenerator().generateId());, +		}, +		else if (id == ID_VALUE_NONE) {, +			this.headers.remove(ID);, +		}, +		else {, +		}, +, +		if (timestamp == null) {, +			this.headers.put(TIMESTAMP, System.currentTimeMillis());, +		}, +		else if (timestamp < 0) {, +			this.headers.remove(TIMESTAMP);, +		}, +		else {, +	protected static IdGenerator getIdGenerator() {, +		return ((idGenerator != null) ? idGenerator : defaultIdGenerator);, +	}, +, +		return this.headers.toString();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java, +	private static final long serialVersionUID = 7035068984263400920L;, +	public static final UUID ID_VALUE_NONE = new UUID(0,0);, +, +	 * Construct a {@link MessageHeaders} with the given headers. An {@link #ID} and, +	 * {@link #TIMESTAMP} headers will also be added, overriding any existing values., +	 *, +		this(headers, null, null);, +	 * Constructor providing control over the ID and TIMESTAMP header values., +	 * @param id the {@link #ID} header value, +	 * @param timestamp the {@link #TIMESTAMP} header value, +, +, +		if (id == null) {, +			this.headers.put(ID, getIdGenerator().generateId());, +		}, +		else if (id == ID_VALUE_NONE) {, +			this.headers.remove(ID);, +		}, +		else {, +		}, +, +		if (timestamp == null) {, +			this.headers.put(TIMESTAMP, System.currentTimeMillis());, +		}, +		else if (timestamp < 0) {, +			this.headers.remove(TIMESTAMP);, +		}, +		else {, +	protected static IdGenerator getIdGenerator() {, +		return ((idGenerator != null) ? idGenerator : defaultIdGenerator);, +	}, +, +		return this.headers.toString();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/DefaultSimpMessageHeaderAccessorFactory.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.messaging.simp;, +, +import org.springframework.messaging.Message;, +import org.springframework.messaging.MessageHeaders;, +import org.springframework.messaging.support.MessageHeaderAccessorFactorySupport;, +import org.springframework.util.IdGenerator;, +, +import java.util.UUID;, +, +/**, + * A default implementation of, + * {@link org.springframework.messaging.simp.SimpMessageHeaderAccessorFactory}., + *, + * @author Rossen Stoyanchev, + * @since 4.1]