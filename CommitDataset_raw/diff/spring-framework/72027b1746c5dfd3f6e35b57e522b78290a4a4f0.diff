[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +import org.springframework.util.StringUtils;, + * @author Sam Brannen, + * needed to match the handler method to an incoming request., +			methods.forEach((method, mapping) -> {, +				Method invocableMethod = AopUtils.selectInvocableMethod(method, userType);, +	 * Extract and return the URL paths contained in the supplied mapping., +	 * @since 5.2, +	 */, +	protected abstract Set<String> getMappingPathPatterns(T mapping);, +, +	/**, +				validateMethodMapping(handlerMethod, mapping);, +		private void validateMethodMapping(HandlerMethod handlerMethod, T mapping) {, +			// Log a warning if the supplied mapping maps the supplied HandlerMethod, +			// only to empty paths., +			if (logger.isWarnEnabled() && getMappingPathPatterns(mapping).stream().noneMatch(StringUtils::hasText)) {, +				logger.warn(String.format(, +						"Handler method '%s' in bean '%s' is not mapped to an explicit path. " +, +						"If you wish to map to all paths, please map explicitly to \"/**\" or \"**\".",, +						handlerMethod, handlerMethod.getBean()));, +			}, +, +			// Assert that the supplied mapping is unique., +			HandlerMethod existingHandlerMethod = this.mappingLookup.get(mapping);, +			if (existingHandlerMethod != null && !existingHandlerMethod.equals(handlerMethod)) {, +						"Ambiguous mapping. Cannot map '" + handlerMethod.getBean() + "' method \n" +, +						handlerMethod + "\nto " + mapping + ": There is already '" +, +						existingHandlerMethod.getBean() + "' bean method\n" + existingHandlerMethod + " mapped.");, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +import org.springframework.util.StringUtils;, + * @author Sam Brannen, + * needed to match the handler method to an incoming request., +			methods.forEach((method, mapping) -> {, +				Method invocableMethod = AopUtils.selectInvocableMethod(method, userType);, +	 * Extract and return the URL paths contained in the supplied mapping., +	 * @since 5.2, +	 */, +	protected abstract Set<String> getMappingPathPatterns(T mapping);, +, +	/**, +				validateMethodMapping(handlerMethod, mapping);, +		private void validateMethodMapping(HandlerMethod handlerMethod, T mapping) {, +			// Log a warning if the supplied mapping maps the supplied HandlerMethod, +			// only to empty paths., +			if (logger.isWarnEnabled() && getMappingPathPatterns(mapping).stream().noneMatch(StringUtils::hasText)) {, +				logger.warn(String.format(, +						"Handler method '%s' in bean '%s' is not mapped to an explicit path. " +, +						"If you wish to map to all paths, please map explicitly to \"/**\" or \"**\".",, +						handlerMethod, handlerMethod.getBean()));, +			}, +, +			// Assert that the supplied mapping is unique., +			HandlerMethod existingHandlerMethod = this.mappingLookup.get(mapping);, +			if (existingHandlerMethod != null && !existingHandlerMethod.equals(handlerMethod)) {, +						"Ambiguous mapping. Cannot map '" + handlerMethod.getBean() + "' method \n" +, +						handlerMethod + "\nto " + mapping + ": There is already '" +, +						existingHandlerMethod.getBean() + "' bean method\n" + existingHandlerMethod + " mapped.");, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerMapping.java, + * Copyright 2002-2019 the original author or authors., +import java.util.Set;, +import java.util.stream.Collectors;, +import org.springframework.web.util.pattern.PathPattern;, + * @author Sam Brannen, +	 * Get the URL path patterns associated with the supplied {@link RequestMappingInfo}., +	 * @since 5.2, +	 */, +	@Override, +	protected Set<String> getMappingPathPatterns(RequestMappingInfo info) {, +		return info.getPatternsCondition().getPatterns().stream().map(PathPattern::getPatternString).collect(Collectors.toSet());, +	}, +, +	/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +import org.springframework.util.StringUtils;, + * @author Sam Brannen, + * needed to match the handler method to an incoming request., +			methods.forEach((method, mapping) -> {, +				Method invocableMethod = AopUtils.selectInvocableMethod(method, userType);, +	 * Extract and return the URL paths contained in the supplied mapping., +	 * @since 5.2, +	 */, +	protected abstract Set<String> getMappingPathPatterns(T mapping);, +, +	/**, +				validateMethodMapping(handlerMethod, mapping);, +		private void validateMethodMapping(HandlerMethod handlerMethod, T mapping) {, +			// Log a warning if the supplied mapping maps the supplied HandlerMethod, +			// only to empty paths., +			if (logger.isWarnEnabled() && getMappingPathPatterns(mapping).stream().noneMatch(StringUtils::hasText)) {, +				logger.warn(String.format(, +						"Handler method '%s' in bean '%s' is not mapped to an explicit path. " +, +						"If you wish to map to all paths, please map explicitly to \"/**\" or \"**\".",, +						handlerMethod, handlerMethod.getBean()));, +			}, +, +			// Assert that the supplied mapping is unique., +			HandlerMethod existingHandlerMethod = this.mappingLookup.get(mapping);, +			if (existingHandlerMethod != null && !existingHandlerMethod.equals(handlerMethod)) {, +						"Ambiguous mapping. Cannot map '" + handlerMethod.getBean() + "' method \n" +]