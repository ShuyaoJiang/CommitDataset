[+++ b/build.gradle, +        testCompile("org.springframework.hateoas:spring-hateoas:0.3.0.RELEASE"), +++ b/build.gradle, +        testCompile("org.springframework.hateoas:spring-hateoas:0.3.0.RELEASE"), +++ b/spring-test-mvc/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java, +import static org.springframework.test.util.AssertionErrors.*;, +		if ((actualValue instanceof List) && !(expectedValue instanceof List)) {, +			@SuppressWarnings("rawtypes"), +			List actualValueList = (List) actualValue;, +			if (actualValueList.size() == 0) {, +				fail("No matching value for JSON path \"" + this.expression + "\"");, +			}, +			if (actualValueList.size() != 1) {, +				fail("Got a list of values " + actualValue + " instead of the value " + expectedValue);, +			}, +			actualValue = actualValueList.get(0);, +		}, +		assertTrue("No value for JSON path \"" + this.expression + "\"", actualValue != null);, +++ b/build.gradle, +        testCompile("org.springframework.hateoas:spring-hateoas:0.3.0.RELEASE"), +++ b/spring-test-mvc/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java, +import static org.springframework.test.util.AssertionErrors.*;, +		if ((actualValue instanceof List) && !(expectedValue instanceof List)) {, +			@SuppressWarnings("rawtypes"), +			List actualValueList = (List) actualValue;, +			if (actualValueList.size() == 0) {, +				fail("No matching value for JSON path \"" + this.expression + "\"");, +			}, +			if (actualValueList.size() != 1) {, +				fail("Got a list of values " + actualValue + " instead of the value " + expectedValue);, +			}, +			actualValue = actualValueList.get(0);, +		}, +		assertTrue("No value for JSON path \"" + this.expression + "\"", actualValue != null);, +++ b/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/context/JavaConfigTests.java, +import org.springframework.web.servlet.view.tiles3.TilesConfigurer;, +import org.springframework.web.servlet.view.tiles3.TilesView;, +++ b/build.gradle, +        testCompile("org.springframework.hateoas:spring-hateoas:0.3.0.RELEASE"), +++ b/spring-test-mvc/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java, +import static org.springframework.test.util.AssertionErrors.*;, +		if ((actualValue instanceof List) && !(expectedValue instanceof List)) {, +			@SuppressWarnings("rawtypes"), +			List actualValueList = (List) actualValue;, +			if (actualValueList.size() == 0) {, +				fail("No matching value for JSON path \"" + this.expression + "\"");, +			}, +			if (actualValueList.size() != 1) {, +				fail("Got a list of values " + actualValue + " instead of the value " + expectedValue);, +			}, +			actualValue = actualValueList.get(0);, +		}, +		assertTrue("No value for JSON path \"" + this.expression + "\"", actualValue != null);, +++ b/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/context/JavaConfigTests.java, +import org.springframework.web.servlet.view.tiles3.TilesConfigurer;, +import org.springframework.web.servlet.view.tiles3.TilesView;, +++ b/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/ContentAssertionTests.java, +import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;, +import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.xpath;, +import java.nio.charset.Charset;, +import java.util.Collections;, +import java.util.Map;, +, +import javax.xml.bind.annotation.XmlRootElement;, +, +import org.springframework.hateoas.Link;, +import org.springframework.hateoas.ResourceSupport;, +	public static final MediaType TEXT_PLAIN_UTF8 = new MediaType("text", "plain", Charset.forName("UTF-8"));, +, +		this.mockMvc.perform(get("/handle").accept(MediaType.TEXT_PLAIN)), +, +		this.mockMvc.perform(get("/handle").accept(MediaType.TEXT_PLAIN)), +			.andExpect(content().string("Hello world!"));, +, +		this.mockMvc.perform(get("/handleUtf8")), +			.andExpect(content().string("\u3053\u3093\u306b\u3061\u306f\u4e16\u754c\uff01"));, +		this.mockMvc.perform(get("/handle").accept(MediaType.TEXT_PLAIN)).andExpect(content().string(equalTo("Hello world!")));, +, +		this.mockMvc.perform(get("/handle").accept(MediaType.TEXT_PLAIN)), +			.andExpect(content().bytes("Hello world!".getBytes("ISO-8859-1")));, +, +		this.mockMvc.perform(get("/handleUtf8")), +			.andExpect(content().bytes("\u3053\u3093\u306b\u3061\u306f\u4e16\u754c\uff01".getBytes("UTF-8")));, +		this.mockMvc.perform(get("/handle").accept(MediaType.TEXT_PLAIN)), +			.andExpect(content().string(containsString("world")));, +, +		this.mockMvc.perform(get("/handle").accept(MediaType.TEXT_PLAIN)), +			.andExpect(content().encoding("ISO-8859-1")), +			.andExpect(content().string(containsString("world")));, +, +		this.mockMvc.perform(get("/handleUtf8")), +			.andExpect(content().encoding("UTF-8")), +			.andExpect(content().bytes("\u3053\u3093\u306b\u3061\u306f\u4e16\u754c\uff01".getBytes("UTF-8")));, +	}, +, +	@Test]