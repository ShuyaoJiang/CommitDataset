[+++ b/org.springframework.core/src/main/java/org/springframework/core/GenericTypeResolver.java, +	 * @param genericIfc the generic interface or superclass to resolve the type argument from, +	 * @param genericIfc the generic interface or superclass to resolve the type argument from, +			if (genericIfc.isInterface()) {, +					Class[] result = doResolveTypeArguments(ownerClass, ifc, genericIfc);, +					if (result != null) {, +						return result;, +					}, +				}, +			}, +			else {, +				Class[] result = doResolveTypeArguments(, +						ownerClass, classToIntrospect.getGenericSuperclass(), genericIfc);, +				if (result != null) {, +					return result;, +				}, +			}, +			classToIntrospect = classToIntrospect.getSuperclass();, +		}, +		return null;, +	}, +	, +	private static Class[] doResolveTypeArguments(Class ownerClass, Type ifc, Class genericIfc) {, +		if (arg instanceof ParameterizedType) {, +			return extractClass(ownerClass, ((ParameterizedType) arg).getRawType());, +		}, +		else if (arg instanceof GenericArrayType) {, +			GenericArrayType gat = (GenericArrayType) arg;, +			Type gt = gat.getGenericComponentType();, +			Class<?> componentClass = extractClass(ownerClass, gt);, +			return Array.newInstance(componentClass, 0).getClass();, +		}, +		else if (arg instanceof TypeVariable) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/GenericTypeResolver.java, +	 * @param genericIfc the generic interface or superclass to resolve the type argument from, +	 * @param genericIfc the generic interface or superclass to resolve the type argument from, +			if (genericIfc.isInterface()) {, +					Class[] result = doResolveTypeArguments(ownerClass, ifc, genericIfc);, +					if (result != null) {, +						return result;, +					}, +				}, +			}, +			else {, +				Class[] result = doResolveTypeArguments(, +						ownerClass, classToIntrospect.getGenericSuperclass(), genericIfc);, +				if (result != null) {, +					return result;, +				}, +			}, +			classToIntrospect = classToIntrospect.getSuperclass();, +		}, +		return null;, +	}, +	, +	private static Class[] doResolveTypeArguments(Class ownerClass, Type ifc, Class genericIfc) {, +		if (arg instanceof ParameterizedType) {, +			return extractClass(ownerClass, ((ParameterizedType) arg).getRawType());, +		}, +		else if (arg instanceof GenericArrayType) {, +			GenericArrayType gat = (GenericArrayType) arg;, +			Type gt = gat.getGenericComponentType();, +			Class<?> componentClass = extractClass(ownerClass, gt);, +			return Array.newInstance(componentClass, 0).getClass();, +		}, +		else if (arg instanceof TypeVariable) {, +++ b/org.springframework.core/src/test/java/org/springframework/core/GenericTypeResolverTests.java, +/*, + * Copyright 2002-2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.core;, +, +import java.util.Collection;, +, +import static org.junit.Assert.*;, +import org.junit.Test;, +, +/**, + * @author Juergen Hoeller, + */, +public class GenericTypeResolverTests {, +, +	@Test, +	public void testSimpleInterfaceType() {, +		assertEquals(String.class, GenericTypeResolver.resolveTypeArgument(MySimpleInterfaceType.class, MyInterfaceType.class));, +	}, +]