[+++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ErrorsMethodArgumentResolver.java, +	public Object resolveArgument(MethodParameter parameter,, +			@Nullable ModelAndViewContainer mavContainer, NativeWebRequest webRequest,, +			@Nullable WebDataBinderFactory binderFactory) throws Exception {, +		Assert.state(mavContainer != null,, +				"Errors/BindingResult argument only supported on regular handler methods");, +				"An Errors/BindingResult argument is expected to be declared immediately after " +, +						"the model attribute, the @RequestBody or the @RequestPart arguments " +, +						"to which they apply: " + parameter.getMethod());, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ErrorsMethodArgumentResolver.java, +	public Object resolveArgument(MethodParameter parameter,, +			@Nullable ModelAndViewContainer mavContainer, NativeWebRequest webRequest,, +			@Nullable WebDataBinderFactory binderFactory) throws Exception {, +		Assert.state(mavContainer != null,, +				"Errors/BindingResult argument only supported on regular handler methods");, +				"An Errors/BindingResult argument is expected to be declared immediately after " +, +						"the model attribute, the @RequestBody or the @RequestPart arguments " +, +						"to which they apply: " + parameter.getMethod());, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ErrorsMethodArgumentResolver.java, +, +		Assert.isNull(adapter, "An @ModelAttribute and an Errors/BindingResult) arguments " +, +				"cannot both be declared with an async type wrapper. " +, +				"Either declare the @ModelAttribute without an async wrapper type or " +, +				"handle a WebExchangeBindException error signal through the async type.");, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ErrorsMethodArgumentResolver.java, +	public Object resolveArgument(MethodParameter parameter,, +			@Nullable ModelAndViewContainer mavContainer, NativeWebRequest webRequest,, +			@Nullable WebDataBinderFactory binderFactory) throws Exception {, +		Assert.state(mavContainer != null,, +				"Errors/BindingResult argument only supported on regular handler methods");, +				"An Errors/BindingResult argument is expected to be declared immediately after " +, +						"the model attribute, the @RequestBody or the @RequestPart arguments " +, +						"to which they apply: " + parameter.getMethod());, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ErrorsMethodArgumentResolver.java, +, +		Assert.isNull(adapter, "An @ModelAttribute and an Errors/BindingResult) arguments " +, +				"cannot both be declared with an async type wrapper. " +, +				"Either declare the @ModelAttribute without an async wrapper type or " +, +				"handle a WebExchangeBindException error signal through the async type.");, +++ /dev/null, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ErrorsMethodArgumentResolver.java, +	public Object resolveArgument(MethodParameter parameter,, +			@Nullable ModelAndViewContainer mavContainer, NativeWebRequest webRequest,, +			@Nullable WebDataBinderFactory binderFactory) throws Exception {, +		Assert.state(mavContainer != null,, +				"Errors/BindingResult argument only supported on regular handler methods");, +				"An Errors/BindingResult argument is expected to be declared immediately after " +, +						"the model attribute, the @RequestBody or the @RequestPart arguments " +, +						"to which they apply: " + parameter.getMethod());, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ErrorsMethodArgumentResolver.java, +, +		Assert.isNull(adapter, "An @ModelAttribute and an Errors/BindingResult) arguments " +, +				"cannot both be declared with an async type wrapper. " +, +				"Either declare the @ModelAttribute without an async wrapper type or " +, +				"handle a WebExchangeBindException error signal through the async type.");, +++ /dev/null, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ErrorsMethodArgumentResolverTests.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.reactive.result.method.annotation;, +, +import java.time.Duration;, +, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.ExpectedException;, +import reactor.core.publisher.Mono;, +import reactor.core.publisher.MonoProcessor;, +, +import org.springframework.core.MethodParameter;, +import org.springframework.core.ReactiveAdapterRegistry;, +import org.springframework.core.ResolvableType;, +import org.springframework.mock.http.server.reactive.test.MockServerHttpRequest;, +import org.springframework.mock.web.test.server.MockServerWebExchange;, +import org.springframework.validation.BindingResult;, +import org.springframework.validation.DataBinder;, +import org.springframework.validation.Errors;, +import org.springframework.web.bind.annotation.ModelAttribute;, +import org.springframework.web.method.ResolvableMethod;, +import org.springframework.web.reactive.BindingContext;, +, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;]