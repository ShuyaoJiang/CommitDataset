[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/bind/annotation/ResponseStatus.java, + * Marks a method or exception class with the status code and reason that should be returned. The status code is applied, + * to the HTTP response when the handler method is invoked, or whenever said exception is thrown., + * @see org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver, +@Target({ElementType.TYPE, ElementType.METHOD}), +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/bind/annotation/ResponseStatus.java, + * Marks a method or exception class with the status code and reason that should be returned. The status code is applied, + * to the HTTP response when the handler method is invoked, or whenever said exception is thrown., + * @see org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver, +@Target({ElementType.TYPE, ElementType.METHOD}), +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.web.bind.annotation.ResponseStatus;, +			if (handlerMethod.isAnnotationPresent(ResponseStatus.class)) {, +				ResponseStatus responseStatus = handlerMethod.getAnnotation(ResponseStatus.class);, +				HttpServletResponse response = webRequest.getResponse();, +				response.setStatus(responseStatus.value().value());, +				responseArgumentUsed = true;, +			}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/bind/annotation/ResponseStatus.java, + * Marks a method or exception class with the status code and reason that should be returned. The status code is applied, + * to the HTTP response when the handler method is invoked, or whenever said exception is thrown., + * @see org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver, +@Target({ElementType.TYPE, ElementType.METHOD}), +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.web.bind.annotation.ResponseStatus;, +			if (handlerMethod.isAnnotationPresent(ResponseStatus.class)) {, +				ResponseStatus responseStatus = handlerMethod.getAnnotation(ResponseStatus.class);, +				HttpServletResponse response = webRequest.getResponse();, +				response.setStatus(responseStatus.value().value());, +				responseArgumentUsed = true;, +			}, +, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +import org.springframework.http.HttpStatus;, +import org.springframework.web.bind.annotation.ResponseStatus;, +	@Test, +	public void responseStatus() throws ServletException, IOException {, +		initServlet(ResponseStatusController.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/something");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("something", response.getContentAsString());, +		assertEquals(201, response.getStatus());, +	}, +, +	@Controller, +	public static class ResponseStatusController {, +, +		@RequestMapping("/something"), +		@ResponseStatus(HttpStatus.CREATED), +		public void handle(Writer writer) throws IOException {, +			writer.write("something");, +		}, +	}]