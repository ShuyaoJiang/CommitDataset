[+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +		set(headerName, formatDate(date));, +	}, +, +	// Package private: also used in ResponseCookie.., +	static String formatDate(long date) {, +		ZonedDateTime time = ZonedDateTime.ofInstant(instant, GMT);, +		return DATE_FORMATTERS[0].format(time);, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +		set(headerName, formatDate(date));, +	}, +, +	// Package private: also used in ResponseCookie.., +	static String formatDate(long date) {, +		ZonedDateTime time = ZonedDateTime.ofInstant(instant, GMT);, +		return DATE_FORMATTERS[0].format(time);, +++ b/spring-web/src/main/java/org/springframework/http/ResponseCookie.java, +			sb.append("; Max-Age=").append(this.maxAge.getSeconds());, +			long millis = this.maxAge.getSeconds() > 0 ? System.currentTimeMillis() + this.maxAge.toMillis() : 0;, +			sb.append(HttpHeaders.formatDate(millis));, +		 * Variant of {@link #maxAge(Duration)} accepting a value in seconds., +		 * <p>This limits the scope of the cookie such that it will only be, +		 * attached to same site requests if {@code "Strict"} or cross-site, +		 * requests if {@code "Lax"}., +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +		set(headerName, formatDate(date));, +	}, +, +	// Package private: also used in ResponseCookie.., +	static String formatDate(long date) {, +		ZonedDateTime time = ZonedDateTime.ofInstant(instant, GMT);, +		return DATE_FORMATTERS[0].format(time);, +++ b/spring-web/src/main/java/org/springframework/http/ResponseCookie.java, +			sb.append("; Max-Age=").append(this.maxAge.getSeconds());, +			long millis = this.maxAge.getSeconds() > 0 ? System.currentTimeMillis() + this.maxAge.toMillis() : 0;, +			sb.append(HttpHeaders.formatDate(millis));, +		 * Variant of {@link #maxAge(Duration)} accepting a value in seconds., +		 * <p>This limits the scope of the cookie such that it will only be, +		 * attached to same site requests if {@code "Strict"} or cross-site, +		 * requests if {@code "Lax"}., +++ b/spring-web/src/main/java/org/springframework/web/server/session/CookieWebSessionIdResolver.java, +		return this.sameSite;, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +		set(headerName, formatDate(date));, +	}, +, +	// Package private: also used in ResponseCookie.., +	static String formatDate(long date) {, +		ZonedDateTime time = ZonedDateTime.ofInstant(instant, GMT);, +		return DATE_FORMATTERS[0].format(time);, +++ b/spring-web/src/main/java/org/springframework/http/ResponseCookie.java, +			sb.append("; Max-Age=").append(this.maxAge.getSeconds());, +			long millis = this.maxAge.getSeconds() > 0 ? System.currentTimeMillis() + this.maxAge.toMillis() : 0;, +			sb.append(HttpHeaders.formatDate(millis));, +		 * Variant of {@link #maxAge(Duration)} accepting a value in seconds., +		 * <p>This limits the scope of the cookie such that it will only be, +		 * attached to same site requests if {@code "Strict"} or cross-site, +		 * requests if {@code "Lax"}., +++ b/spring-web/src/main/java/org/springframework/web/server/session/CookieWebSessionIdResolver.java, +		return this.sameSite;, +++ b/spring-web/src/test/java/org/springframework/http/ResponseCookieTests.java, +/*, + * Copyright 2002-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.http;, +, +import java.time.Duration;, +import java.time.Instant;, +import java.time.ZoneId;, +import java.time.ZonedDateTime;, +import java.time.format.DateTimeFormatter;, +, +import org.junit.Test;, +, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +, +/**, + * Unit tests for {@link ResponseCookie}., + * @author Rossen Stoyanchev, + */, +public class ResponseCookieTests {, +, +	@Test, +	public void defaultValues() {, +		assertEquals("id=1fWa", ResponseCookie.from("id", "1fWa").build().toString());, +	}, +]