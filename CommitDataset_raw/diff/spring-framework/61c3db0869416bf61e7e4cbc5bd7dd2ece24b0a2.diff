[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, + * Copyright 2002-2018 the original author or authors., +			throw new AopConfigException("Could not generate CGLIB subclass of " + this.advised.getTargetClass() +, +					": Common causes of this problem include using a final class or a non-visible class",, +			if (this.publicMethod && getMethod().getDeclaringClass() != Object.class) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, + * Copyright 2002-2018 the original author or authors., +			throw new AopConfigException("Could not generate CGLIB subclass of " + this.advised.getTargetClass() +, +					": Common causes of this problem include using a final class or a non-visible class",, +			if (this.publicMethod && getMethod().getDeclaringClass() != Object.class) {, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java, + * Copyright 2002-2018 the original author or authors., +			getFixture().getAdvisors(, +					new SingletonMetadataAwareAspectInstanceFactory(new PerCflowAspect(), "someBean"));, +			assertTrue(ex.getMessage().contains("PERCFLOW"));, +			getFixture().getAdvisors(, +					new SingletonMetadataAwareAspectInstanceFactory(new PerCflowBelowAspect(), "someBean"));, +			assertTrue(ex.getMessage().contains("PERCFLOWBELOW"));, +		TestBean itb = (TestBean) createProxy(target, getFixture().getAdvisors(aif), TestBean.class);, +		TestBean itb2 = (TestBean) createProxy(target, getFixture().getAdvisors(aif), TestBean.class);, +				getFixture().getAdvisors(new SingletonMetadataAwareAspectInstanceFactory(, +						new NamedPointcutAspectFromLibraryWithBinding(), "someBean")),, +				getFixture().getAdvisors(, +						new SingletonMetadataAwareAspectInstanceFactory(new BindingAspectWithSingleArg(), "someBean")),, +				getFixture().getAdvisors(, +						new SingletonMetadataAwareAspectInstanceFactory(new ManyValuedArgs(), "someBean")),, +									new SingletonMetadataAwareAspectInstanceFactory(new MakeLockable(), "someBean")),, +		assertEquals(2, AopUtils.findAdvisorsThatCanApply(getFixture().getAdvisors(, +				new SingletonMetadataAwareAspectInstanceFactory(new MakeLockable(),"someBean")), NotLockable.class).size());, +				List.class);, +	public void testIntroductionBasedOnAnnotationMatch_SPR5307() {, +		Object proxy = createProxy(target, advisors, AnnotatedTarget.class);, +		Modifiable modifiable = (Modifiable) createProxy(target, advisors, ITestBean.class);, +		List<Advisor> advisors = getFixture().getAdvisors(, +				new SingletonMetadataAwareAspectInstanceFactory(new ExceptionAspect(expectedException), "someBean"));, +		ITestBean itb = (ITestBean) createProxy(target, advisors, ITestBean.class);, +, +		List<Advisor> advisors = getFixture().getAdvisors(, +				new SingletonMetadataAwareAspectInstanceFactory(new ExceptionAspect(expectedException), "someBean"));, +		ITestBean itb = (ITestBean) createProxy(target, advisors, ITestBean.class);, +, +		pf.addAdvisors(advisors);, +		List<Advisor> advisors = getFixture().getAdvisors(, +				new SingletonMetadataAwareAspectInstanceFactory(twoAdviceAspect, "someBean"));, +		ITestBean itb = (ITestBean) createProxy(target, advisors, ITestBean.class);, +		List<Advisor> advisors = getFixture().getAdvisors(, +				new SingletonMetadataAwareAspectInstanceFactory(afterReturningAspect, "someBean"));, +		Echo echo = (Echo) createProxy(target, advisors, Echo.class);, +, +		createProxy(target, getFixture().getAdvisors(aspectInstanceFactory), ITestBean.class);, +	public void checkNotLocked( Lockable mixin) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, + * Copyright 2002-2018 the original author or authors., +			throw new AopConfigException("Could not generate CGLIB subclass of " + this.advised.getTargetClass() +, +					": Common causes of this problem include using a final class or a non-visible class",, +			if (this.publicMethod && getMethod().getDeclaringClass() != Object.class) {, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java, + * Copyright 2002-2018 the original author or authors., +			getFixture().getAdvisors(, +					new SingletonMetadataAwareAspectInstanceFactory(new PerCflowAspect(), "someBean"));, +			assertTrue(ex.getMessage().contains("PERCFLOW"));, +			getFixture().getAdvisors(, +					new SingletonMetadataAwareAspectInstanceFactory(new PerCflowBelowAspect(), "someBean"));, +			assertTrue(ex.getMessage().contains("PERCFLOWBELOW"));, +		TestBean itb = (TestBean) createProxy(target, getFixture().getAdvisors(aif), TestBean.class);, +		TestBean itb2 = (TestBean) createProxy(target, getFixture().getAdvisors(aif), TestBean.class);, +				getFixture().getAdvisors(new SingletonMetadataAwareAspectInstanceFactory(, +						new NamedPointcutAspectFromLibraryWithBinding(), "someBean")),, +				getFixture().getAdvisors(, +						new SingletonMetadataAwareAspectInstanceFactory(new BindingAspectWithSingleArg(), "someBean")),, +				getFixture().getAdvisors(, +						new SingletonMetadataAwareAspectInstanceFactory(new ManyValuedArgs(), "someBean")),, +									new SingletonMetadataAwareAspectInstanceFactory(new MakeLockable(), "someBean")),, +		assertEquals(2, AopUtils.findAdvisorsThatCanApply(getFixture().getAdvisors(, +				new SingletonMetadataAwareAspectInstanceFactory(new MakeLockable(),"someBean")), NotLockable.class).size());, +				List.class);, +	public void testIntroductionBasedOnAnnotationMatch_SPR5307() {, +		Object proxy = createProxy(target, advisors, AnnotatedTarget.class);, +		Modifiable modifiable = (Modifiable) createProxy(target, advisors, ITestBean.class);, +		List<Advisor> advisors = getFixture().getAdvisors(, +				new SingletonMetadataAwareAspectInstanceFactory(new ExceptionAspect(expectedException), "someBean"));, +		ITestBean itb = (ITestBean) createProxy(target, advisors, ITestBean.class);, +, +		List<Advisor> advisors = getFixture().getAdvisors(, +				new SingletonMetadataAwareAspectInstanceFactory(new ExceptionAspect(expectedException), "someBean"));, +		ITestBean itb = (ITestBean) createProxy(target, advisors, ITestBean.class);, +, +		pf.addAdvisors(advisors);, +		List<Advisor> advisors = getFixture().getAdvisors(, +				new SingletonMetadataAwareAspectInstanceFactory(twoAdviceAspect, "someBean"));, +		ITestBean itb = (ITestBean) createProxy(target, advisors, ITestBean.class);, +		List<Advisor> advisors = getFixture().getAdvisors(, +				new SingletonMetadataAwareAspectInstanceFactory(afterReturningAspect, "someBean"));, +		Echo echo = (Echo) createProxy(target, advisors, Echo.class);, +, +		createProxy(target, getFixture().getAdvisors(aspectInstanceFactory), ITestBean.class);, +	public void checkNotLocked( Lockable mixin) {, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurerTests.java, + * Copyright 2002-2018 the original author or authors., +	public void setup() {]