[+++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, +public abstract class AbstractMappingContentNegotiationStrategy extends MappingMediaTypeFileExtensionResolver, +		implements ContentNegotiationStrategy, MediaTypeFileExtensionResolver {, +	public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, +public abstract class AbstractMappingContentNegotiationStrategy extends MappingMediaTypeFileExtensionResolver, +		implements ContentNegotiationStrategy, MediaTypeFileExtensionResolver {, +	public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, + * delegating to a list of {@link MediaTypeFileExtensionResolver} instances., +public class ContentNegotiationManager implements ContentNegotiationStrategy, MediaTypeFileExtensionResolver {, +	private final List<ContentNegotiationStrategy> contentNegotiationStrategies =, +			new ArrayList<ContentNegotiationStrategy>();, +	private final Set<MediaTypeFileExtensionResolver> fileExtensionResolvers =, +			new LinkedHashSet<MediaTypeFileExtensionResolver>();, +	 * MediaTypeFileExtensionResolver, and if so it is registered as such., +			if (strategy instanceof MediaTypeFileExtensionResolver) {, +				this.fileExtensionResolvers.add((MediaTypeFileExtensionResolver) strategy);, +	 * Add MediaTypeFileExtensionResolver instances., +	public void addFileExtensionResolvers(MediaTypeFileExtensionResolver... resolvers) {, +		this.fileExtensionResolvers.addAll(Arrays.asList(resolvers));, +	 * Delegate to all configured MediaTypeFileExtensionResolver instances and aggregate, +	 * the list of all file extensions found., +	public List<String> resolveFileExtensions(MediaType mediaType) {, +		for (MediaTypeFileExtensionResolver resolver : this.fileExtensionResolvers) {, +			extensions.addAll(resolver.resolveFileExtensions(mediaType));, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, +public abstract class AbstractMappingContentNegotiationStrategy extends MappingMediaTypeFileExtensionResolver, +		implements ContentNegotiationStrategy, MediaTypeFileExtensionResolver {, +	public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, + * delegating to a list of {@link MediaTypeFileExtensionResolver} instances., +public class ContentNegotiationManager implements ContentNegotiationStrategy, MediaTypeFileExtensionResolver {, +	private final List<ContentNegotiationStrategy> contentNegotiationStrategies =, +			new ArrayList<ContentNegotiationStrategy>();, +	private final Set<MediaTypeFileExtensionResolver> fileExtensionResolvers =, +			new LinkedHashSet<MediaTypeFileExtensionResolver>();, +	 * MediaTypeFileExtensionResolver, and if so it is registered as such., +			if (strategy instanceof MediaTypeFileExtensionResolver) {, +				this.fileExtensionResolvers.add((MediaTypeFileExtensionResolver) strategy);, +	 * Add MediaTypeFileExtensionResolver instances., +	public void addFileExtensionResolvers(MediaTypeFileExtensionResolver... resolvers) {, +		this.fileExtensionResolvers.addAll(Arrays.asList(resolvers));, +	 * Delegate to all configured MediaTypeFileExtensionResolver instances and aggregate, +	 * the list of all file extensions found., +	public List<String> resolveFileExtensions(MediaType mediaType) {, +		for (MediaTypeFileExtensionResolver resolver : this.fileExtensionResolvers) {, +			extensions.addAll(resolver.resolveFileExtensions(mediaType));, +++ /dev/null, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, +public abstract class AbstractMappingContentNegotiationStrategy extends MappingMediaTypeFileExtensionResolver, +		implements ContentNegotiationStrategy, MediaTypeFileExtensionResolver {, +	public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, + * delegating to a list of {@link MediaTypeFileExtensionResolver} instances., +public class ContentNegotiationManager implements ContentNegotiationStrategy, MediaTypeFileExtensionResolver {, +	private final List<ContentNegotiationStrategy> contentNegotiationStrategies =, +			new ArrayList<ContentNegotiationStrategy>();, +	private final Set<MediaTypeFileExtensionResolver> fileExtensionResolvers =, +			new LinkedHashSet<MediaTypeFileExtensionResolver>();, +	 * MediaTypeFileExtensionResolver, and if so it is registered as such., +			if (strategy instanceof MediaTypeFileExtensionResolver) {, +				this.fileExtensionResolvers.add((MediaTypeFileExtensionResolver) strategy);, +	 * Add MediaTypeFileExtensionResolver instances., +	public void addFileExtensionResolvers(MediaTypeFileExtensionResolver... resolvers) {, +		this.fileExtensionResolvers.addAll(Arrays.asList(resolvers));, +	 * Delegate to all configured MediaTypeFileExtensionResolver instances and aggregate, +	 * the list of all file extensions found., +	public List<String> resolveFileExtensions(MediaType mediaType) {, +		for (MediaTypeFileExtensionResolver resolver : this.fileExtensionResolvers) {, +			extensions.addAll(resolver.resolveFileExtensions(mediaType));, +++ /dev/null, +++ b/spring-web/src/main/java/org/springframework/web/accept/MappingMediaTypeFileExtensionResolver.java, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.accept;, +, +import java.util.Collections;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +import java.util.Map.Entry;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.ConcurrentMap;, +, +import org.springframework.http.MediaType;, +import org.springframework.util.LinkedMultiValueMap;]