[+++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageReader.java, +import org.springframework.core.codec.StringDecoder;, +	private static final StringDecoder stringDecoder = new StringDecoder(false);, +, +		// Let's give StringDecoder a chance since SSE is ordered ahead of it, +, +		if (String.class.equals(elementType.getRawClass())) {, +			Flux<DataBuffer> body = inputMessage.getBody();, +			return stringDecoder.decodeToMono(body, elementType, null, null).cast(Object.class);, +		}, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageReader.java, +import org.springframework.core.codec.StringDecoder;, +	private static final StringDecoder stringDecoder = new StringDecoder(false);, +, +		// Let's give StringDecoder a chance since SSE is ordered ahead of it, +, +		if (String.class.equals(elementType.getRawClass())) {, +			Flux<DataBuffer> body = inputMessage.getBody();, +			return stringDecoder.decodeToMono(body, elementType, null, null).cast(Object.class);, +		}, +, +++ b/spring-web/src/test/java/org/springframework/http/codec/ServerSentEventHttpMessageReaderTests.java, +import reactor.core.publisher.Mono;, +	@Test // SPR-15331, +	public void decodeFullContentAsString() {, +, +		String body = "data:foo\ndata:bar\n\ndata:baz\n\n";, +		MockServerHttpRequest request = MockServerHttpRequest.post("/").body(body);, +, +		String actual = messageReader, +				.readMono(ResolvableType.forClass(String.class), request, Collections.emptyMap()), +				.cast(String.class), +				.block(Duration.ZERO);, +, +		assertEquals(body, actual);, +	}, +]