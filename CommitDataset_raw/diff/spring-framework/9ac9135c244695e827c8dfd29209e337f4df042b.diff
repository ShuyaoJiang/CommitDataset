[+++ b/src/asciidoc/web-websocket.adoc, +Spring provides a STOMP over WebSocket client and a STOMP over TCP client., +To begin create and configure `WebSocketStompClient`:, +WebSocketClient webSocketClient = new StandardWebSocketClient();, +WebSocketStompClient stompClient = new WebSocketStompClient(webSocketClient);, +stompClient.setTaskScheduler(taskScheduler); // for heartbeats, +In the above example `StandardWebSocketClient` could be replaced with `SockJsClient`, +since that is also an implementation of `WebSocketClient`. The `SockJsClient` can, +use WebSocket or HTTP-based transport as a fallback. For more details see, +<<websocket-fallback-sockjs-client>>., +, +Next establish a connection and provide a handler for the STOMP session:, +StompSessionHandler sessionHandler = new MyStompSessionHandler();, +stompClient.connect(url, sessionHandler);, +When the session is ready for use the handler is notified:, +public class MyStompSessionHandler extends StompSessionHandlerAdapter {, +Once the session is established any payload can be sent and that will be, +serialized with the configured `MessageConverter`:, +You can also subscribe to destinations. The `subscribe` methods require a handler, +for messages on the subscription and return a `Subscription` handle that can be, +used to unsubscribe. For each received message the handler can specify the target, +Object type the payload should be deserialized to:, +To enable STOMP heartbeat configure `WebSocketStompClient` with a `TaskScheduler`, +and optionally customize the heartbeat intervals, 10 seconds for write inactivity, +which causes a heartbeat to be sent and 10 seconds for read inactivity which, +closes the connection., +, +[NOTE], +====, +When using `WebSocketStompClient` for performance tests to simulate thousands, +of clients from the same machine consider turning off heartbeats since each, +connection schedules its own heartbeat tasks and that's not optimized for a, +a large number of clients running on the same machine., +====, +]