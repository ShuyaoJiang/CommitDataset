[+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/Part.java, +	 * @param destination the target file, +	Mono<Void> transferTo(File destination);, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/Part.java, +	 * @param destination the target file, +	Mono<Void> transferTo(File destination);, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossMultipartHttpMessageReader.java, + * @author Arjen Poutsma, +		public Mono<Void> transferTo(File destination) {, +			ReadableByteChannel input = null;, +			FileChannel output = null;, +				input = Channels.newChannel(this.storage.getInputStream());, +				output = new FileOutputStream(destination).getChannel();, +, +				long size = (input instanceof FileChannel ? ((FileChannel) input).size() : Long.MAX_VALUE);, +				long totalWritten = 0;, +				while (totalWritten < size) {, +					long written = output.transferFrom(input, totalWritten, size - totalWritten);, +					if (written <= 0) {, +						break;, +					}, +					totalWritten += written;, +			finally {, +				if (input != null) {, +					try {, +						input.close();, +					}, +					catch (IOException ignored) {, +					}, +				}, +				if (output != null) {, +					try {, +						output.close();, +					}, +					catch (IOException ignored) {, +					}, +				}, +			}]