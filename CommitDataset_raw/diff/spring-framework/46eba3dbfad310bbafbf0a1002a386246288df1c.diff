[+++ b/spring-aop/src/main/java/org/springframework/aop/Advisor.java, + * @author Juergen Hoeller, +	 * Common placeholder for an empty {@code Advice} to be returned from, +	 * {@link #getAdvice()} if no proper advice has been configured (yet)., +	 * @since 5.0, +	 */, +	Advice EMPTY_ADVICE = new Advice() {};, +, +, +	/**, +++ b/spring-aop/src/main/java/org/springframework/aop/Advisor.java, + * @author Juergen Hoeller, +	 * Common placeholder for an empty {@code Advice} to be returned from, +	 * {@link #getAdvice()} if no proper advice has been configured (yet)., +	 * @since 5.0, +	 */, +	Advice EMPTY_ADVICE = new Advice() {};, +, +, +	/**, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJPointcutAdvisor.java, +, +		return this.advice.equals(otherAdvisor.advice);, +		return AspectJPointcutAdvisor.class.hashCode() * 29 + this.advice.hashCode();, +++ b/spring-aop/src/main/java/org/springframework/aop/Advisor.java, + * @author Juergen Hoeller, +	 * Common placeholder for an empty {@code Advice} to be returned from, +	 * {@link #getAdvice()} if no proper advice has been configured (yet)., +	 * @since 5.0, +	 */, +	Advice EMPTY_ADVICE = new Advice() {};, +, +, +	/**, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJPointcutAdvisor.java, +, +		return this.advice.equals(otherAdvisor.advice);, +		return AspectJPointcutAdvisor.class.hashCode() * 29 + this.advice.hashCode();, +++ b/spring-aop/src/main/java/org/springframework/aop/config/AdvisorComponentDefinition.java, +	private final String description;, +	private final BeanReference[] beanReferences;, +	private final BeanDefinition[] beanDefinitions;, +++ b/spring-aop/src/main/java/org/springframework/aop/Advisor.java, + * @author Juergen Hoeller, +	 * Common placeholder for an empty {@code Advice} to be returned from, +	 * {@link #getAdvice()} if no proper advice has been configured (yet)., +	 * @since 5.0, +	 */, +	Advice EMPTY_ADVICE = new Advice() {};, +, +, +	/**, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJPointcutAdvisor.java, +, +		return this.advice.equals(otherAdvisor.advice);, +		return AspectJPointcutAdvisor.class.hashCode() * 29 + this.advice.hashCode();, +++ b/spring-aop/src/main/java/org/springframework/aop/config/AdvisorComponentDefinition.java, +	private final String description;, +	private final BeanReference[] beanReferences;, +	private final BeanDefinition[] beanDefinitions;, +++ b/spring-aop/src/main/java/org/springframework/aop/config/SimpleBeanFactoryAwareAspectInstanceFactory.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.lang.Nullable;, +import org.springframework.util.Assert;, +	@Nullable, +	@Nullable, +		Assert.notNull(this.aspectBeanName, "'aspectBeanName' is required");, +		Assert.state(this.beanFactory != null, "No BeanFactory set");, +		Assert.state(this.aspectBeanName != null, "No 'aspectBeanName' set");, +		if (this.beanFactory != null && this.aspectBeanName != null &&, +				this.beanFactory.isSingleton(this.aspectBeanName) &&, +++ b/spring-aop/src/main/java/org/springframework/aop/Advisor.java, + * @author Juergen Hoeller, +	 * Common placeholder for an empty {@code Advice} to be returned from, +	 * {@link #getAdvice()} if no proper advice has been configured (yet)., +	 * @since 5.0, +	 */, +	Advice EMPTY_ADVICE = new Advice() {};, +, +, +	/**, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJPointcutAdvisor.java, +, +		return this.advice.equals(otherAdvisor.advice);, +		return AspectJPointcutAdvisor.class.hashCode() * 29 + this.advice.hashCode();, +++ b/spring-aop/src/main/java/org/springframework/aop/config/AdvisorComponentDefinition.java, +	private final String description;, +	private final BeanReference[] beanReferences;, +	private final BeanDefinition[] beanDefinitions;, +++ b/spring-aop/src/main/java/org/springframework/aop/config/SimpleBeanFactoryAwareAspectInstanceFactory.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.lang.Nullable;, +import org.springframework.util.Assert;, +	@Nullable, +	@Nullable, +		Assert.notNull(this.aspectBeanName, "'aspectBeanName' is required");, +		Assert.state(this.beanFactory != null, "No BeanFactory set");, +		Assert.state(this.aspectBeanName != null, "No 'aspectBeanName' set");, +		if (this.beanFactory != null && this.aspectBeanName != null &&, +				this.beanFactory.isSingleton(this.aspectBeanName) &&]