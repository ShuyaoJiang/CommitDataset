[+++ b/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java, +		synchronized (this.requests) {, +			if (this.requests.isEmpty()) {, +				this.requests.add(request);, +	 * Subclasses must implement the actual validation of the request, +++ b/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java, +		synchronized (this.requests) {, +			if (this.requests.isEmpty()) {, +				this.requests.add(request);, +	 * Subclasses must implement the actual validation of the request, +++ b/spring-test/src/test/java/org/springframework/test/web/client/MockRestServiceServerTests.java, + * Copyright 2002-2017 the original author or authors., +import java.net.SocketException;, +, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.test.web.client.match.MockRestRequestMatchers.*;, +import static org.springframework.test.web.client.response.MockRestResponseCreators.*;, + *, +	private final RestTemplate restTemplate = new RestTemplate();, +	public void buildMultipleTimes() {, +	public void exactExpectOrder() {, +	public void ignoreExpectOrder() {, +	public void resetAndReuseServer() {, +	public void resetAndReuseServerWithUnorderedExpectationManager() {, +	@Test  // SPR-16132, +	public void followUpRequestAfterFailure() {, +		MockRestServiceServer server = MockRestServiceServer.bindTo(this.restTemplate).build();, +, +		server.expect(requestTo("/some-service/some-endpoint")), +				.andRespond(request -> { throw new SocketException("pseudo network error"); });, +, +		server.expect(requestTo("/reporting-service/report-error")), +				.andExpect(method(POST)).andRespond(withSuccess());, +, +		try {, +			this.restTemplate.getForEntity("/some-service/some-endpoint", String.class);, +		}, +		catch (Exception ex) {, +			this.restTemplate.postForEntity("/reporting-service/report-error", ex.toString(), String.class);, +		}, +, +		server.verify();, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java, +		synchronized (this.requests) {, +			if (this.requests.isEmpty()) {, +				this.requests.add(request);, +	 * Subclasses must implement the actual validation of the request, +++ b/spring-test/src/test/java/org/springframework/test/web/client/MockRestServiceServerTests.java, + * Copyright 2002-2017 the original author or authors., +import java.net.SocketException;, +, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.test.web.client.match.MockRestRequestMatchers.*;, +import static org.springframework.test.web.client.response.MockRestResponseCreators.*;, + *, +	private final RestTemplate restTemplate = new RestTemplate();, +	public void buildMultipleTimes() {, +	public void exactExpectOrder() {, +	public void ignoreExpectOrder() {, +	public void resetAndReuseServer() {, +	public void resetAndReuseServerWithUnorderedExpectationManager() {, +	@Test  // SPR-16132, +	public void followUpRequestAfterFailure() {, +		MockRestServiceServer server = MockRestServiceServer.bindTo(this.restTemplate).build();, +, +		server.expect(requestTo("/some-service/some-endpoint")), +				.andRespond(request -> { throw new SocketException("pseudo network error"); });, +, +		server.expect(requestTo("/reporting-service/report-error")), +				.andExpect(method(POST)).andRespond(withSuccess());, +, +		try {, +			this.restTemplate.getForEntity("/some-service/some-endpoint", String.class);, +		}, +		catch (Exception ex) {, +			this.restTemplate.postForEntity("/reporting-service/report-error", ex.toString(), String.class);, +		}, +, +		server.verify();, +	}, +, +++ b/spring-test/src/test/java/org/springframework/test/web/client/SimpleRequestExpectationManagerTests.java, +import static org.junit.Assert.*;, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.test.web.client.ExpectedCount.*;, +import static org.springframework.test.web.client.match.MockRestRequestMatchers.*;, +import static org.springframework.test.web.client.response.MockRestResponseCreators.*;, + *, +		this.manager.expectRequest(once(), requestTo("/foo"))., +				andExpect(method(GET)).andRespond(request -> { throw new SocketException("pseudo network error"); });, +		this.manager.expectRequest(once(), requestTo("/handle-error"))., +				andExpect(method(POST)).andRespond(withSuccess());, +			fail("Expected SocketException");, +		catch (SocketException ex) {, +++ b/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java, +		synchronized (this.requests) {, +			if (this.requests.isEmpty()) {, +				this.requests.add(request);]