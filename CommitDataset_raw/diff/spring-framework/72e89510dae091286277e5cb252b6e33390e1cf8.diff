[+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, + * @see #bind(UserValues), +	 * An <i>optimistic</i> binder will implicitly create bindings as required to support {@link #bind(UserValues)} operations., +	 * @param values user-entered values to bind, +	List<BindingResult> bind(UserValues values);, +	 * @return the UserValue list that can be passed to {@link #bind(UserValues)}., +	UserValues createUserValues(Map<String, ? extends Object> userMap);, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, + * @see #bind(UserValues), +	 * An <i>optimistic</i> binder will implicitly create bindings as required to support {@link #bind(UserValues)} operations., +	 * @param values user-entered values to bind, +	List<BindingResult> bind(UserValues values);, +	 * @return the UserValue list that can be passed to {@link #bind(UserValues)}., +	UserValues createUserValues(Map<String, ? extends Object> userMap);, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/BindingResult.java, + * @see Binder#bind(UserValues), +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, + * @see #bind(UserValues), +	 * An <i>optimistic</i> binder will implicitly create bindings as required to support {@link #bind(UserValues)} operations., +	 * @param values user-entered values to bind, +	List<BindingResult> bind(UserValues values);, +	 * @return the UserValue list that can be passed to {@link #bind(UserValues)}., +	UserValues createUserValues(Map<String, ? extends Object> userMap);, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/BindingResult.java, + * @see Binder#bind(UserValues), +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/UserValue.java, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, + * @see #bind(UserValues), +	 * An <i>optimistic</i> binder will implicitly create bindings as required to support {@link #bind(UserValues)} operations., +	 * @param values user-entered values to bind, +	List<BindingResult> bind(UserValues values);, +	 * @return the UserValue list that can be passed to {@link #bind(UserValues)}., +	UserValues createUserValues(Map<String, ? extends Object> userMap);, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/BindingResult.java, + * @see Binder#bind(UserValues), +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/UserValue.java, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/UserValues.java, +package org.springframework.ui.binding;, +, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.Iterator;, +import java.util.List;, +, +/**, + * A simpler holder for a list of UserValues., + * , + * @author Keith Donald, + * @see Binder#bind(UserValues), + */, +public class UserValues implements Iterable<UserValue> {, +	, +	private List<UserValue> values;, +	, +	/**, +	 * Creates a new user values list of the default size., +	 */, +	public UserValues() {, +		values = new ArrayList<UserValue>();, +	}, +, +	/**, +	 * Creates a new user values list of the size provided., +	 */, +	public UserValues(int size) {, +		values = new ArrayList<UserValue>(size);, +	}, +, +	// implementing Iterable, +	, +	public Iterator<UserValue> iterator() {, +		return values.iterator();, +	}, +	, +	/**, +	 * The user values list., +	 * The returned list is not modifiable., +	 */, +	public List<UserValue> asList() {, +		return Collections.unmodifiableList(values);, +	}, +	, +	/**, +	 * Add a new user value., +	 * @param property the property the value should be bound to, +	 * @param value the actual user-entered value, +	 */, +	public void add(String property, Object value) {, +		values.add(new UserValue(property, value));, +	}, +	, +	/**, +	 * The number of user values in the list., +	 */, +	public int size() {, +		return values.size();, +	}, +, +	/**, +	 * Creates a new UserValues list with a single element.]