[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleMappingExceptionResolver.java, + * Copyright 2002-2012 the original author or authors., + * @author Rossen Stoyanchev, +	private Class<?>[] excludedExceptions;, +, +	 * Set one or more exceptions to be excluded from the exception mappings., +	 * Excluded exceptions are checked first and if one of them equals the actual, +	 * exception, the exception will remain unresolved., +	 * @param excludedExceptions one or more excluded exception types, +	 */, +	public void setExcludedExceptions(Class<?>... excludedExceptions) {, +		this.excludedExceptions = excludedExceptions;, +	}, +, +	/**, +	 * Determine the view name for the given exception, first checking against the, +	 * {@link #setExcludedExceptions(Class[]) "excludedExecptions"}, then searching the, +	 * {@link #setExceptionMappings "exceptionMappings"}, and finally using the, +	 * {@link #setDefaultErrorView "defaultErrorView"} as a fallback., +	 * @return the resolved view name, or <code>null</code> if excluded or none found, +		if (this.excludedExceptions != null) {, +			for (Class<?> excludedEx : this.excludedExceptions) {, +				if (excludedEx.equals(ex.getClass())) {, +					return null;, +				}, +			}, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleMappingExceptionResolver.java, + * Copyright 2002-2012 the original author or authors., + * @author Rossen Stoyanchev, +	private Class<?>[] excludedExceptions;, +, +	 * Set one or more exceptions to be excluded from the exception mappings., +	 * Excluded exceptions are checked first and if one of them equals the actual, +	 * exception, the exception will remain unresolved., +	 * @param excludedExceptions one or more excluded exception types, +	 */, +	public void setExcludedExceptions(Class<?>... excludedExceptions) {, +		this.excludedExceptions = excludedExceptions;, +	}, +, +	/**, +	 * Determine the view name for the given exception, first checking against the, +	 * {@link #setExcludedExceptions(Class[]) "excludedExecptions"}, then searching the, +	 * {@link #setExceptionMappings "exceptionMappings"}, and finally using the, +	 * {@link #setDefaultErrorView "defaultErrorView"} as a fallback., +	 * @return the resolved view name, or <code>null</code> if excluded or none found, +		if (this.excludedExceptions != null) {, +			for (Class<?> excludedEx : this.excludedExceptions) {, +				if (excludedEx.equals(ex.getClass())) {, +					return null;, +				}, +			}, +		}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/handler/SimpleMappingExceptionResolverTests.java, + * Copyright 2002-2012 the original author or authors., +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +, +, +	public void simpleExceptionMappingWithExclusion() {, +		Properties props = new Properties();, +		props.setProperty("Exception", "error");, +		exceptionResolver.setExceptionMappings(props);, +		exceptionResolver.setExcludedExceptions(IllegalArgumentException.class);, +		ModelAndView mav = exceptionResolver.resolveException(request, response, handler1, new IllegalArgumentException());, +		assertNull(mav);, +	}, +, +	@Test, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleMappingExceptionResolver.java, + * Copyright 2002-2012 the original author or authors., + * @author Rossen Stoyanchev, +	private Class<?>[] excludedExceptions;, +, +	 * Set one or more exceptions to be excluded from the exception mappings., +	 * Excluded exceptions are checked first and if one of them equals the actual, +	 * exception, the exception will remain unresolved., +	 * @param excludedExceptions one or more excluded exception types, +	 */, +	public void setExcludedExceptions(Class<?>... excludedExceptions) {, +		this.excludedExceptions = excludedExceptions;, +	}, +, +	/**, +	 * Determine the view name for the given exception, first checking against the, +	 * {@link #setExcludedExceptions(Class[]) "excludedExecptions"}, then searching the, +	 * {@link #setExceptionMappings "exceptionMappings"}, and finally using the, +	 * {@link #setDefaultErrorView "defaultErrorView"} as a fallback., +	 * @return the resolved view name, or <code>null</code> if excluded or none found, +		if (this.excludedExceptions != null) {, +			for (Class<?> excludedEx : this.excludedExceptions) {, +				if (excludedEx.equals(ex.getClass())) {, +					return null;, +				}, +			}, +		}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/handler/SimpleMappingExceptionResolverTests.java, + * Copyright 2002-2012 the original author or authors., +import static org.junit.Assert.assertEquals;]