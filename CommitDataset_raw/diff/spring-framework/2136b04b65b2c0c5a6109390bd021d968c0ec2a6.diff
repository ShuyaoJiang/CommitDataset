[+++ b/org.springframework.core/src/main/java/org/springframework/core/type/classreading/CachingMetadataReaderFactory.java, +	/** Default maximum number of entries for the MetadataReader cache: 256 */, +	public static final int DEFAULT_CACHE_LIMIT = 256;, +, +	private volatile int cacheLimit = DEFAULT_CACHE_LIMIT;, +, +	private final Map<Resource, MetadataReader> classReaderCache =, +			new LinkedHashMap<Resource, MetadataReader>(DEFAULT_CACHE_LIMIT, 0.75f, true) {, +				@Override, +				protected boolean removeEldestEntry(Map.Entry<Resource, MetadataReader> eldest) {, +					return size() > getCacheLimit();, +				}, +			};, +	/**, +	 * Specify the maximum number of entries for the MetadataReader cache., +	 * Default is 256., +	 */, +	public void setCacheLimit(int cacheLimit) {, +		this.cacheLimit = cacheLimit;, +	}, +, +	/**, +	 * Return the maximum number of entries for the MetadataReader cache., +	 */, +	public int getCacheLimit() {, +		return this.cacheLimit;, +	}, +, +, +		if (getCacheLimit() <= 0) {, +			return super.getMetadataReader(resource);, +		}, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/classreading/CachingMetadataReaderFactory.java, +	/** Default maximum number of entries for the MetadataReader cache: 256 */, +	public static final int DEFAULT_CACHE_LIMIT = 256;, +, +	private volatile int cacheLimit = DEFAULT_CACHE_LIMIT;, +, +	private final Map<Resource, MetadataReader> classReaderCache =, +			new LinkedHashMap<Resource, MetadataReader>(DEFAULT_CACHE_LIMIT, 0.75f, true) {, +				@Override, +				protected boolean removeEldestEntry(Map.Entry<Resource, MetadataReader> eldest) {, +					return size() > getCacheLimit();, +				}, +			};, +	/**, +	 * Specify the maximum number of entries for the MetadataReader cache., +	 * Default is 256., +	 */, +	public void setCacheLimit(int cacheLimit) {, +		this.cacheLimit = cacheLimit;, +	}, +, +	/**, +	 * Return the maximum number of entries for the MetadataReader cache., +	 */, +	public int getCacheLimit() {, +		return this.cacheLimit;, +	}, +, +, +		if (getCacheLimit() <= 0) {, +			return super.getMetadataReader(resource);, +		}, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java, + * Copyright 2002-2010 the original author or authors., +import java.util.LinkedHashMap;, +	/** Default maximum number of entries for this template's SQL cache: 256 */, +	public static final int DEFAULT_CACHE_LIMIT = 256;, +, +, +	private volatile int cacheLimit = DEFAULT_CACHE_LIMIT;, +, +	/** Cache of original SQL String to ParsedSql representation */, +	private final Map<String, ParsedSql> parsedSqlCache =, +			new LinkedHashMap<String, ParsedSql>(DEFAULT_CACHE_LIMIT, 0.75f, true) {, +				@Override, +				protected boolean removeEldestEntry(Map.Entry<String, ParsedSql> eldest) {, +					return size() > getCacheLimit();, +				}, +			};, +		Assert.notNull(dataSource, "DataSource must not be null");, +	/**, +	 * Specify the maximum number of entries for this template's SQL cache., +	 * Default is 256., +	 */, +	public void setCacheLimit(int cacheLimit) {, +		this.cacheLimit = cacheLimit;, +	}, +, +	/**, +	 * Return the maximum number of entries for this template's SQL cache., +	 */, +	public int getCacheLimit() {, +		return this.cacheLimit;, +	}, +, +	 * <p>The default implementation uses an LRU cache with an upper limit, +	 * of 256 entries., +		if (getCacheLimit() <= 0) {]