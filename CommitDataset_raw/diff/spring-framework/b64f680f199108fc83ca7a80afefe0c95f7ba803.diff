[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		Class<?> targetType = determineTargetType(beanName, mbd, typesToMatch);, +, +	 * Determine the target type for the given bean definition., +	 * @param beanName the name of the bean (for error handling purposes), +	 * @param mbd the merged bean definition for the bean, +	 * @param typesToMatch the types to match in case of internal type matching purposes, +	 * (also signals that the returned {@code Class} will never be exposed to application code), +	 * @return the type for the bean if determinable, or {@code null} otherwise, +	 */, +	protected Class<?> determineTargetType(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch) {, +		Class<?> targetType = mbd.getTargetType();, +		if (targetType == null) {, +			targetType = (mbd.getFactoryMethodName() != null ? getTypeForFactoryMethod(beanName, mbd, typesToMatch) :, +					resolveBeanClass(mbd, beanName, typesToMatch));, +			if (ObjectUtils.isEmpty(typesToMatch) || getTempClassLoader() == null) {, +				mbd.setTargetType(targetType);, +			}, +		}, +		return targetType;, +	}, +, +	/**, +	 * Determine the target type for the given bean definition which is based on, +	 * @return the type for the bean if determinable, or {@code null} otherwise, +			if (!mbd.isSynthetic() && hasInstantiationAwareBeanPostProcessors()) {, +				Class<?> targetType = determineTargetType(beanName, mbd);, +				if (targetType != null) {, +					bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);, +			}]