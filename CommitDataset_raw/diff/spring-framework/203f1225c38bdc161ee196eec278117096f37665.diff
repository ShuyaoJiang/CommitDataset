[+++ b/spring-expression/src/main/java/org/springframework/expression/ExpressionException.java, + * Copyright 2002-2015 the original author or authors., + * Super class for exceptions that can occur whilst processing expressions., +	 * Construct a new expression exception., +	 * Construct a new expression exception., +	 * Construct a new expression exception., +	 * Construct a new expression exception., +	 * Construct a new expression exception., +	/**, +	 * Construct a new expression exception., +	 * @param message a descriptive message, +	 * @param cause the underlying cause of this exception, +	 */, +	 * Return the expression string., +	 */, +	public final String getExpressionString() {, +		return this.expressionString;, +	}, +, +	/**, +	 * Return the position in the expression string where the problem occurred., +	 */, +	public final int getPosition() {, +		return this.position;, +	}, +, +	/**, +	 * Return the exception message. Since Spring 4.0 this method returns the, +	 * same result as {@link #toDetailedString()}., +	 * Return a detailed description of this exception, including the expression, +	 * String and position (if available) as well as the actual exception message., +			StringBuilder output = new StringBuilder();, +		else {, +			return getSimpleMessage();, +		}, +	/**, +	 * Return the exception simple message without including the expression, +	 * that caused the failure., +	 */, +	public String getSimpleMessage() {, +		return super.getMessage();, +++ b/spring-expression/src/main/java/org/springframework/expression/ExpressionException.java, + * Copyright 2002-2015 the original author or authors., + * Super class for exceptions that can occur whilst processing expressions., +	 * Construct a new expression exception., +	 * Construct a new expression exception., +	 * Construct a new expression exception., +	 * Construct a new expression exception., +	 * Construct a new expression exception., +	/**, +	 * Construct a new expression exception., +	 * @param message a descriptive message, +	 * @param cause the underlying cause of this exception, +	 */, +	 * Return the expression string., +	 */, +	public final String getExpressionString() {, +		return this.expressionString;, +	}, +, +	/**, +	 * Return the position in the expression string where the problem occurred., +	 */, +	public final int getPosition() {, +		return this.position;, +	}, +, +	/**, +	 * Return the exception message. Since Spring 4.0 this method returns the, +	 * same result as {@link #toDetailedString()}., +	 * Return a detailed description of this exception, including the expression, +	 * String and position (if available) as well as the actual exception message., +			StringBuilder output = new StringBuilder();, +		else {, +			return getSimpleMessage();, +		}, +	/**, +	 * Return the exception simple message without including the expression, +	 * that caused the failure., +	 */, +	public String getSimpleMessage() {, +		return super.getMessage();, +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsMessagingTemplate.java, + * Copyright 2002-2015 the original author or authors., +	 * for more advanced scenarios., +++ b/spring-expression/src/main/java/org/springframework/expression/ExpressionException.java, + * Copyright 2002-2015 the original author or authors., + * Super class for exceptions that can occur whilst processing expressions., +	 * Construct a new expression exception., +	 * Construct a new expression exception., +	 * Construct a new expression exception., +	 * Construct a new expression exception., +	 * Construct a new expression exception., +	/**, +	 * Construct a new expression exception., +	 * @param message a descriptive message, +	 * @param cause the underlying cause of this exception, +	 */, +	 * Return the expression string., +	 */]