[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketHandlerAdapter.java, +import org.springframework.http.server.reactive.ServerHttpRequest;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +public class JettyWebSocketHandlerAdapter extends WebSocketHandlerAdapterSupport {, +	public JettyWebSocketHandlerAdapter(ServerHttpRequest request, ServerHttpResponse response,, +			WebSocketHandler delegate) {, +		super(request, response, delegate);, +		getDelegate().handle(this.session).subscribe(subscriber);, +			DataBuffer buffer = getBufferFactory().wrap(bytes);, +			DataBuffer buffer = getBufferFactory().wrap((ByteBuffer) message);, +			DataBuffer buffer = getBufferFactory().wrap((ByteBuffer) message);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketHandlerAdapter.java, +import org.springframework.http.server.reactive.ServerHttpRequest;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +public class JettyWebSocketHandlerAdapter extends WebSocketHandlerAdapterSupport {, +	public JettyWebSocketHandlerAdapter(ServerHttpRequest request, ServerHttpResponse response,, +			WebSocketHandler delegate) {, +		super(request, response, delegate);, +		getDelegate().handle(this.session).subscribe(subscriber);, +			DataBuffer buffer = getBufferFactory().wrap(bytes);, +			DataBuffer buffer = getBufferFactory().wrap((ByteBuffer) message);, +			DataBuffer buffer = getBufferFactory().wrap((ByteBuffer) message);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketHandlerAdapter.java, +		super(request, response, handler);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketHandlerAdapter.java, +import org.springframework.http.server.reactive.ServerHttpRequest;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +public class JettyWebSocketHandlerAdapter extends WebSocketHandlerAdapterSupport {, +	public JettyWebSocketHandlerAdapter(ServerHttpRequest request, ServerHttpResponse response,, +			WebSocketHandler delegate) {, +		super(request, response, delegate);, +		getDelegate().handle(this.session).subscribe(subscriber);, +			DataBuffer buffer = getBufferFactory().wrap(bytes);, +			DataBuffer buffer = getBufferFactory().wrap((ByteBuffer) message);, +			DataBuffer buffer = getBufferFactory().wrap((ByteBuffer) message);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketHandlerAdapter.java, +		super(request, response, handler);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/RxNettyWebSocketHandlerAdapter.java, +		super(request, response, handler);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketHandlerAdapter.java, +import org.springframework.http.server.reactive.ServerHttpRequest;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +public class JettyWebSocketHandlerAdapter extends WebSocketHandlerAdapterSupport {, +	public JettyWebSocketHandlerAdapter(ServerHttpRequest request, ServerHttpResponse response,, +			WebSocketHandler delegate) {, +		super(request, response, delegate);, +		getDelegate().handle(this.session).subscribe(subscriber);, +			DataBuffer buffer = getBufferFactory().wrap(bytes);, +			DataBuffer buffer = getBufferFactory().wrap((ByteBuffer) message);, +			DataBuffer buffer = getBufferFactory().wrap((ByteBuffer) message);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketHandlerAdapter.java, +		super(request, response, handler);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/RxNettyWebSocketHandlerAdapter.java, +		super(request, response, handler);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/TomcatWebSocketHandlerAdapter.java, +import org.springframework.http.server.reactive.ServerHttpRequest;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +public class TomcatWebSocketHandlerAdapter extends WebSocketHandlerAdapterSupport {, +	public TomcatWebSocketHandlerAdapter(ServerHttpRequest request, ServerHttpResponse response,, +			WebSocketHandler delegate) {, +		super(request, response, delegate);, +	public Endpoint getEndpoint() {, +		return new StandardEndpoint();, +	}, +, +	private TomcatWebSocketSession getSession() {, +		return this.session;, +	}, +, +, +	private class StandardEndpoint extends Endpoint {, +, +			TomcatWebSocketHandlerAdapter.this.session = new TomcatWebSocketSession(session);, +				getSession().handleMessage(webSocketMessage.getType(), webSocketMessage);, +				getSession().handleMessage(webSocketMessage.getType(), webSocketMessage);, +				getSession().handleMessage(webSocketMessage.getType(), webSocketMessage);, +			getDelegate().handle(TomcatWebSocketHandlerAdapter.this.session).subscribe(resultSubscriber);, +				return WebSocketMessage.create(Type.TEXT, getBufferFactory().wrap(bytes));, +				DataBuffer buffer = getBufferFactory().wrap((ByteBuffer) message);, +				DataBuffer buffer = getBufferFactory().wrap(((PongMessage) message).getApplicationData());, +			if (getSession() != null) {, +				getSession().handleClose(new CloseStatus(code, reason.getReasonPhrase()));, +			if (getSession() != null) {, +				getSession().handleError(exception);, +	}, +			if (getSession() != null) {, +				getSession().close(new CloseStatus(CloseStatus.SERVER_ERROR.getCode(), ex.getMessage()));, +			if (getSession() != null) {, +				getSession().close();, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketHandlerAdapter.java, +import org.springframework.http.server.reactive.ServerHttpRequest;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +public class JettyWebSocketHandlerAdapter extends WebSocketHandlerAdapterSupport {, +	public JettyWebSocketHandlerAdapter(ServerHttpRequest request, ServerHttpResponse response,, +			WebSocketHandler delegate) {, +		super(request, response, delegate);, +		getDelegate().handle(this.session).subscribe(subscriber);, +			DataBuffer buffer = getBufferFactory().wrap(bytes);, +			DataBuffer buffer = getBufferFactory().wrap((ByteBuffer) message);, +			DataBuffer buffer = getBufferFactory().wrap((ByteBuffer) message);]