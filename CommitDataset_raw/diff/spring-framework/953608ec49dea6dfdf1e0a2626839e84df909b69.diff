[+++ b/spring-web/src/main/java/org/springframework/web/context/request/FacesWebRequest.java, +	/**, +	 * Last-modified handling not supported for portlet requests:, +	 * As a consequence, this method always returns {@code false}., +	 *, +	 * @since 4.2, +	 */, +	@Override, +	public boolean checkNotModified(String etag, long lastModifiedTimestamp) {, +		return false;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/context/request/FacesWebRequest.java, +	/**, +	 * Last-modified handling not supported for portlet requests:, +	 * As a consequence, this method always returns {@code false}., +	 *, +	 * @since 4.2, +	 */, +	@Override, +	public boolean checkNotModified(String etag, long lastModifiedTimestamp) {, +		return false;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, + * Copyright 2002-2015 the original author or authors., +, + * @author Brian Clozel, + * @author Markus Malkusch, + *, +		if (lastModifiedTimestamp >= 0 && !this.notModified) {, +			if (response == null || !response.containsHeader(HEADER_LAST_MODIFIED)) {, +				this.notModified = isTimeStampNotModified(lastModifiedTimestamp);, +				if (response != null) {, +					if (this.notModified && supportsNotModifiedStatus()) {, +						response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);, +					}, +					response.setDateHeader(HEADER_LAST_MODIFIED, lastModifiedTimestamp);, +				}, +			}, +		}, +		return this.notModified;, +	}, +, +	@SuppressWarnings("deprecation"), +	private boolean isTimeStampNotModified(long lastModifiedTimestamp) {, +		return (ifModifiedSince >= (lastModifiedTimestamp / 1000 * 1000));, +		if (StringUtils.hasLength(etag) && !this.notModified) {, +			if (response == null || !response.containsHeader(HEADER_ETAG)) {, +				etag = addEtagPadding(etag);, +				this.notModified = isETagNotModified(etag);, +	private String addEtagPadding(String etag) {, +		if (!(etag.startsWith("\"") || etag.startsWith("W/\"")) || !etag.endsWith("\"")) {, +			etag = "\"" + etag + "\"";, +		}, +		return etag;, +	}, +, +	private boolean isETagNotModified(String etag) {, +		if (StringUtils.hasLength(etag)) {, +			String ifNoneMatch = getRequest().getHeader(HEADER_IF_NONE_MATCH);, +			if (StringUtils.hasLength(ifNoneMatch)) {, +				String[] clientETags = StringUtils.delimitedListToStringArray(ifNoneMatch, ",", " ");, +				for (String clientETag : clientETags) {, +					// compare weak/strong ETags as per https://tools.ietf.org/html/rfc7232#section-2.3, +					if (StringUtils.hasLength(clientETag) &&, +							(clientETag.replaceFirst("^W/", "").equals(etag.replaceFirst("^W/", "")), +								|| clientETag.equals("*"))) {, +						return true;, +					}, +				}, +			}, +		}, +		return false;, +	}, +, +	@Override, +	public boolean checkNotModified(String etag, long lastModifiedTimestamp) {, +		HttpServletResponse response = getResponse();, +		if (StringUtils.hasLength(etag) && !this.notModified) {, +			if (response == null ||, +					(!response.containsHeader(HEADER_ETAG) && !response.containsHeader(HEADER_LAST_MODIFIED))) {, +				etag = addEtagPadding(etag);, +				this.notModified = isETagNotModified(etag) && isTimeStampNotModified(lastModifiedTimestamp);, +				if (response != null) {, +					if (this.notModified && supportsNotModifiedStatus()) {, +						response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);, +					}, +					response.setHeader(HEADER_ETAG, etag);, +					response.setDateHeader(HEADER_LAST_MODIFIED, lastModifiedTimestamp);, +				}, +			}, +		}, +		return this.notModified;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/context/request/FacesWebRequest.java, +	/**, +	 * Last-modified handling not supported for portlet requests:, +	 * As a consequence, this method always returns {@code false}.]