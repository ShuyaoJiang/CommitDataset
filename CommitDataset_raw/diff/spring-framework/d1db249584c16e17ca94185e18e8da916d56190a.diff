[+++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractCodecConfigurer.java, +	public abstract static class DefaultCodecConfigurer {, +		protected abstract void addStringReaderTextOnlyTo(List<HttpMessageReader<?>> result);, +		protected abstract void addStringReaderTo(List<HttpMessageReader<?>> result);, +++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractCodecConfigurer.java, +	public abstract static class DefaultCodecConfigurer {, +		protected abstract void addStringReaderTextOnlyTo(List<HttpMessageReader<?>> result);, +		protected abstract void addStringReaderTo(List<HttpMessageReader<?>> result);, +++ b/spring-web/src/main/java/org/springframework/http/codec/ClientCodecConfigurer.java, +import org.springframework.core.codec.StringDecoder;, +		protected void addStringReaderTextOnlyTo(List<HttpMessageReader<?>> result) {, +			addReaderTo(result, () -> new DecoderHttpMessageReader<>(StringDecoder.textPlainOnly(false)));, +		}, +, +		protected void addStringReaderTo(List<HttpMessageReader<?>> result) {, +			addReaderTo(result, () -> new DecoderHttpMessageReader<>(StringDecoder.allMimeTypes(false)));, +		}, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractCodecConfigurer.java, +	public abstract static class DefaultCodecConfigurer {, +		protected abstract void addStringReaderTextOnlyTo(List<HttpMessageReader<?>> result);, +		protected abstract void addStringReaderTo(List<HttpMessageReader<?>> result);, +++ b/spring-web/src/main/java/org/springframework/http/codec/ClientCodecConfigurer.java, +import org.springframework.core.codec.StringDecoder;, +		protected void addStringReaderTextOnlyTo(List<HttpMessageReader<?>> result) {, +			addReaderTo(result, () -> new DecoderHttpMessageReader<>(StringDecoder.textPlainOnly(false)));, +		}, +, +		protected void addStringReaderTo(List<HttpMessageReader<?>> result) {, +			addReaderTo(result, () -> new DecoderHttpMessageReader<>(StringDecoder.allMimeTypes(false)));, +		}, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/ServerCodecConfigurer.java, +import org.springframework.core.codec.StringDecoder;, +		protected void addStringReaderTextOnlyTo(List<HttpMessageReader<?>> result) {, +			addReaderTo(result, () -> new DecoderHttpMessageReader<>(StringDecoder.textPlainOnly(true)));, +		}, +, +		protected void addStringReaderTo(List<HttpMessageReader<?>> result) {, +			addReaderTo(result, () -> new DecoderHttpMessageReader<>(StringDecoder.allMimeTypes(true)));, +		}, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractCodecConfigurer.java, +	public abstract static class DefaultCodecConfigurer {, +		protected abstract void addStringReaderTextOnlyTo(List<HttpMessageReader<?>> result);, +		protected abstract void addStringReaderTo(List<HttpMessageReader<?>> result);, +++ b/spring-web/src/main/java/org/springframework/http/codec/ClientCodecConfigurer.java, +import org.springframework.core.codec.StringDecoder;, +		protected void addStringReaderTextOnlyTo(List<HttpMessageReader<?>> result) {, +			addReaderTo(result, () -> new DecoderHttpMessageReader<>(StringDecoder.textPlainOnly(false)));, +		}, +, +		protected void addStringReaderTo(List<HttpMessageReader<?>> result) {, +			addReaderTo(result, () -> new DecoderHttpMessageReader<>(StringDecoder.allMimeTypes(false)));, +		}, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/ServerCodecConfigurer.java, +import org.springframework.core.codec.StringDecoder;, +		protected void addStringReaderTextOnlyTo(List<HttpMessageReader<?>> result) {, +			addReaderTo(result, () -> new DecoderHttpMessageReader<>(StringDecoder.textPlainOnly(true)));, +		}, +, +		protected void addStringReaderTo(List<HttpMessageReader<?>> result) {, +			addReaderTo(result, () -> new DecoderHttpMessageReader<>(StringDecoder.allMimeTypes(true)));, +		}, +, +++ b/spring-web/src/test/java/org/springframework/http/codec/ClientCodecConfigurerTests.java, +import java.nio.charset.StandardCharsets;, +import java.time.Duration;, +import java.util.Collections;, +import reactor.core.publisher.Flux;, +import org.springframework.core.ResolvableType;, +import org.springframework.core.io.buffer.DefaultDataBufferFactory;, +	@SuppressWarnings("unchecked"), +, +		Flux<String> decoded = (Flux<String>) decoder.decode(, +				Flux.just(new DefaultDataBufferFactory().wrap("line1\nline2".getBytes(StandardCharsets.UTF_8))),, +				ResolvableType.forClass(String.class), MimeTypeUtils.TEXT_PLAIN, Collections.emptyMap());, +, +		assertEquals(Collections.singletonList("line1\nline2"), decoded.collectList().block(Duration.ZERO));, +++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractCodecConfigurer.java, +	public abstract static class DefaultCodecConfigurer {, +		protected abstract void addStringReaderTextOnlyTo(List<HttpMessageReader<?>> result);, +		protected abstract void addStringReaderTo(List<HttpMessageReader<?>> result);, +++ b/spring-web/src/main/java/org/springframework/http/codec/ClientCodecConfigurer.java, +import org.springframework.core.codec.StringDecoder;, +		protected void addStringReaderTextOnlyTo(List<HttpMessageReader<?>> result) {, +			addReaderTo(result, () -> new DecoderHttpMessageReader<>(StringDecoder.textPlainOnly(false)));, +		}, +, +		protected void addStringReaderTo(List<HttpMessageReader<?>> result) {, +			addReaderTo(result, () -> new DecoderHttpMessageReader<>(StringDecoder.allMimeTypes(false)));, +		}, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/ServerCodecConfigurer.java, +import org.springframework.core.codec.StringDecoder;, +		protected void addStringReaderTextOnlyTo(List<HttpMessageReader<?>> result) {, +			addReaderTo(result, () -> new DecoderHttpMessageReader<>(StringDecoder.textPlainOnly(true)));, +		}, +]