[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/AcceptHeaderLocaleResolver.java, + * Copyright 2002-2016 the original author or authors., +import java.util.ArrayList;, +import java.util.Enumeration;, +import java.util.List;, + * @author Rossen Stoyanchev, +	private final List<Locale> supportedLocales = new ArrayList<Locale>();, +, +, +	/**, +	 * Configure supported locales to check against the requested locales, +	 * determined via {@link HttpServletRequest#getLocales()}. If this is not, +	 * configured then {@link HttpServletRequest#getLocale()} is used instead., +	 * @param locales the supported locales, +	 * @since 4.3, +	 */, +	public void setSupportedLocales(List<Locale> locales) {, +		this.supportedLocales.clear();, +		if (locales != null) {, +			this.supportedLocales.addAll(locales);, +		}, +	}, +, +	/**, +	 * Return the configured list of supported locales., +	 * @since 4.3, +	 */, +	public List<Locale> getSupportedLocales() {, +		return this.supportedLocales;, +	}, +, +, +		Locale locale = request.getLocale();, +		if (!isSupportedLocale(locale)) {, +			locale = findSupportedLocale(request, locale);, +		}, +		return locale;, +	}, +, +	private boolean isSupportedLocale(Locale locale) {, +		return (getSupportedLocales().isEmpty() || getSupportedLocales().contains(locale));, +	}, +, +	private Locale findSupportedLocale(HttpServletRequest request, Locale fallback) {, +		Enumeration<Locale> requestLocales = request.getLocales();, +		while (requestLocales.hasMoreElements()) {, +			Locale locale = requestLocales.nextElement();, +			if (getSupportedLocales().contains(locale)) {, +				return locale;, +			}, +		}, +		return fallback;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/AcceptHeaderLocaleResolver.java, + * Copyright 2002-2016 the original author or authors., +import java.util.ArrayList;, +import java.util.Enumeration;, +import java.util.List;, + * @author Rossen Stoyanchev, +	private final List<Locale> supportedLocales = new ArrayList<Locale>();, +, +, +	/**, +	 * Configure supported locales to check against the requested locales, +	 * determined via {@link HttpServletRequest#getLocales()}. If this is not, +	 * configured then {@link HttpServletRequest#getLocale()} is used instead., +	 * @param locales the supported locales, +	 * @since 4.3, +	 */, +	public void setSupportedLocales(List<Locale> locales) {, +		this.supportedLocales.clear();, +		if (locales != null) {, +			this.supportedLocales.addAll(locales);, +		}, +	}, +, +	/**, +	 * Return the configured list of supported locales., +	 * @since 4.3, +	 */, +	public List<Locale> getSupportedLocales() {, +		return this.supportedLocales;, +	}, +, +, +		Locale locale = request.getLocale();, +		if (!isSupportedLocale(locale)) {, +			locale = findSupportedLocale(request, locale);, +		}, +		return locale;, +	}, +, +	private boolean isSupportedLocale(Locale locale) {, +		return (getSupportedLocales().isEmpty() || getSupportedLocales().contains(locale));, +	}, +, +	private Locale findSupportedLocale(HttpServletRequest request, Locale fallback) {, +		Enumeration<Locale> requestLocales = request.getLocales();, +		while (requestLocales.hasMoreElements()) {, +			Locale locale = requestLocales.nextElement();, +			if (getSupportedLocales().contains(locale)) {]