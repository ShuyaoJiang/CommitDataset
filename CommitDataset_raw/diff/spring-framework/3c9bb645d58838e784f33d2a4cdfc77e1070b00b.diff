[+++ b/src/docs/asciidoc/kotlin.adoc, +applications almost like if Spring Framework was a native Kotlin framework., +Spring Framework 5 supports Kotlin 1.1+ and requires https://bintray.com/bintray/jcenter/org.jetbrains.kotlin%3Akotlin-stdlib[`kotlin-stdlib`] (or one of its, +https://bintray.com/bintray/jcenter/org.jetbrains.kotlin%3Akotlin-stdlib-jre7[`kotlin-stdlib-jre7`], +/ https://bintray.com/bintray/jcenter/org.jetbrains.kotlin%3Akotlin-stdlib-jre8[`kotlin-stdlib-jre8`] variants), +and https://bintray.com/bintray/jcenter/org.jetbrains.kotlin%3Akotlin-reflect[`kotlin-reflect`], +to be present on the classpath. They are provided by default if you bootstrap a Kotlin project on, +and to https://kotlinlang.org/docs/reference/extensions.html[Kotlin extensions], Spring, +Framework Kotlin API is leveraging the regular Java's one, completed by a few Kotlin specific API, +available out of the box in Spring Framework artifacts., +and documents all the Kotlin extensions and DSL available., +Keep in mind that Kotlin extensions need to be imported to be used. That means for example that, +`GenericApplicationContext.registerBean` Kotlin extension will be available only if, +`import org.springframework.context.support.registerBean` is present in your imports., +That said, like with static imports, your IDE should automatically suggest them in most cases., +and Spring Framework provides some extensions to take advantage of this feature., +That allows to provide a better Kotlin API `RestTemplate`, the new `WebClient` from Spring, +WebFlux and for various other API., +Like in Java, `users` in Kotlin is strongly typed, but Kotlin clever type inference allows, +shorter syntax., +One of Kotlin's key features is https://kotlinlang.org/docs/reference/null-safety.html[null-safety], +which allows to deal with `null` values at compile time rather than bumping into the famous, +`NullPointerException` at runtime. This makes your applications safer through clean nullability, +declarations, expressing "value or no value" semantics without paying the cost of wrapper like `Optional`., +https://jira.spring.io/browse/SPR-15540[null-safety of the whole Spring Framework APIs], +via tooling-friendly annotations:, +Both annotations are meta-annotated with https://jcp.org/en/jsr/detail?id=305[JSR 305], +meta-annotations (a dormant JSR but supported by tools like IDEA, Eclipse, Findbugs, etc.), +to provide useful warnings to Java developers., +in order to provide null-safety for the whole Spring Framework API. That means you should, +never have `NullPointerException` in your code when using Spring Framework and Kotlin because, +the compiler will not allow it., +For now, you need to use a `-Xjsr305-annotations=enable` flag (specified via the, +`freeCompilerArgs` property with Maven or Gradle Kotlin plugins), but that should become, +the default behavior in an upcoming release of Kotlin., +until Kotlin 1.1.5 is released (it will fix https://youtrack.jetbrains.com/issue/KT-19419[KT-19419])., +Currently null-safety does not apply to generic type parameters, but that could change in, +the future, the related issue is https://youtrack.jetbrains.com/issue/KT-19592[KT-19592]., +via primary constructors, immutable classes data binding and function optional parameters, +with default values., +https://github.com/FasterXML/jackson-module-kotlin[Jackson Kotlin module] which is required, +for serializing / deserializing JSON data is automatically registered when present in the, +classpath, and will log a warning message if Jackson + Kotlin are detected without Jackson, +Kotlin module., +[NOTE], +====, +As of Spring Boot 2.0, Jackson Kotlin module is automatically provided via the JSON starter., +====, +, +== Leveraging null-safety in Spring annotations, +, +Spring Framework also takes advantage of https://kotlinlang.org/docs/reference/null-safety.html[Kotlin null-safety], +In a similar fashion, Spring bean injection with `@Autowired` or `@Inject` uses this information, +to know if a bean is required or not. `@Autowired lateinit var foo: Foo` implies that a bean, +of type `Foo` must be registered in the application context while `@Autowired lateinit var foo: Foo?`, +wonâ€™t raise an error if such bean does not exist., +Spring Framework 5 comes with a, +{doc-root}/spring-framework/docs/{spring-version}/kdoc-api/spring-framework/org.springframework.web.reactive.function.server/-router-function-dsl/[Kotlin routing DSL], +that allows you to leverage the <<webflux-fn,WebFlux functional API] with clean and idiomatic Kotlin code:, +See https://github.com/mixitconf/mixit/tree/bad6b92bce6193f9b3f696af9d416c276501dbf1/src/main/kotlin/mixit/web/routes[MiXiT project routes], +for a concrete example., +, +Spring Framework 5 introduces a new way to register beans using lambda as an alternative, +While in Kotlin, reified type parameters and `GenericApplicationContext` Kotlin extensions allow to simply write:, +In order to allow a more declarative approach and cleaner syntax, Spring Framework 5 introduces, +a new {doc-root}/spring-framework/docs/{spring-version}/kdoc-api/spring-framework/org.springframework.context.support/-bean-definition-dsl/[Kotlin bean declaration DSL], +It conceptually declares a `Consumer<GenericApplicationContext>` via a clean declarative API, +which allows you to deal with profiles and `Environment` for customizing how your beans are registered., +fun beans() = beans {, +In this example, `Routes(ref(), ref())` is the equivalent of `Routes(ref<UserHandler>(), ref<MessageSource>())`, +(types are not required thanks to Kotlin type inference) where `ref<UserHandler>()`, +This `beans()` function can then be used to register beans on your application context., +, +[source,kotlin], +----, +val context = GenericApplicationContext(), +beans().invoke(context), +context.refresh(), +----, +, +See https://github.com/sdeleuze/spring-kotlin-functional/blob/3d12ab102c28f4761bd6a0736e2f585713eb2243/src/main/kotlin/functional/Beans.kt[spring-kotlin-functional beans declaration], +for a concrete example., +, +[NOTE], +====, +Spring Boot is based on Java Config, but should allow using user-defined functional bean declarations,, +see https://jira.spring.io/browse/SPR-13779[SPR-13779] and https://github.com/spring-projects/spring-boot/issues/8115[spring-boot/#8115], +for more details and up to date informations., +====, +, +and Spring Framework 5 go even further by extending this feature to WebFlux and supporting, +=== Choose your web flavor, +Spring Framework now comes with 2 different web stacks: <<web.adoc,Spring MVC>> and, +<<reactive-web.adoc,Spring WebFlux>>., +By default, https://discuss.kotlinlang.org/t/classes-final-by-default/166[all classes in Kotlin are `final`]., +The `open` modifier on a class is the opposite of Java's `final`: it allows others to, +inherit from this class. Same for member functions that need to be marked as `open` to be overridden., +While Kotlin JVM-friendly design is generally frictionless with Spring, this specific point, +Before Kotlin 1.0.6, you needed to add an `open` keyword on each class and member, +Try to favor constructor injection with `val` read-only https://kotlinlang.org/docs/reference/properties.html[properties].]