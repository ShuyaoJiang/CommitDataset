[+++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/TestScenarioCreator.java, +/*, + * Copyright 2004-2008 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.expression.spel;, +, +import java.awt.Color;, +import java.io.File;, +import java.net.MalformedURLException;, +import java.net.URL;, +import java.net.URLClassLoader;, +import java.util.Date;, +import java.util.HashMap;, +import java.util.Map;, +import java.util.Set;, +, +import org.springframework.expression.spel.standard.StandardEvaluationContext;, +import org.springframework.expression.spel.testresources.Fruit;, +import org.springframework.expression.spel.testresources.Inventor;, +import org.springframework.expression.spel.testresources.Person;, +import org.springframework.expression.spel.testresources.PlaceOfBirth;, +, +/**, + * Builds an evaluation context for test expressions. Features of the test evaluation context are:, + * <ul>, + * <li>The root context object is an Inventor instance {@link Inventor}, + * </ul>, + */, +public class TestScenarioCreator {, +, +	public static StandardEvaluationContext getTestEvaluationContext() {, +		StandardEvaluationContext testContext = new StandardEvaluationContext();, +		setupRootContextObject(testContext);, +		populateContextMap(testContext);, +		createTestClassloader(testContext);, +		populateVariables(testContext);, +		populateFunctions(testContext);, +		return testContext;, +	}, +, +	/**, +	 * Register some Java reflect methods as well known functions that can be called from an expression., +	 * @param testContext the test evaluation context, +	 */, +	private static void populateFunctions(StandardEvaluationContext testContext) {, +		try {, +			testContext.registerFunction("isEven", TestScenarioCreator.class.getDeclaredMethod("isEven",, +					new Class[] { Integer.TYPE }));, +			testContext.registerFunction("reverseInt", TestScenarioCreator.class.getDeclaredMethod("reverseInt",, +					new Class[] { Integer.TYPE, Integer.TYPE, Integer.TYPE }));, +			testContext.registerFunction("reverseString", TestScenarioCreator.class.getDeclaredMethod("reverseString",, +					new Class[] { String.class }));, +		} catch (SecurityException e) {, +			e.printStackTrace();, +		} catch (NoSuchMethodException e) {, +			e.printStackTrace();, +		}, +	}, +, +	/**, +	 * Register some variables that can be referenced from the tests, +	 * @param testContext the test evaluation context, +	 */, +	private static void populateVariables(StandardEvaluationContext testContext) {, +		testContext.setVariable("answer", 42);, +	}, +, +	/**, +	 * Include a testcode jar on the default context classpath so that tests can lookup entries in it., +	 * @param testContext the test evaluation context, +	 */, +	private static void createTestClassloader(StandardEvaluationContext testContext) {, +		try {, +			ClassLoader cl = new URLClassLoader(new URL[] { new File("target/test-classes/testcode.jar").toURL() },, +					Thread.currentThread().getContextClassLoader());, +			testContext.setClassLoader(cl);, +		} catch (MalformedURLException mue) {, +			mue.printStackTrace();, +		}, +	}, +, +	/**, +	 * Create the root context object, an Inventor instance. Non-qualified property and method references will be, +	 * resolved against this context object., +	 * , +	 * @param testContext the evaluation context in which to set the root object, +	 */, +	private static void setupRootContextObject(StandardEvaluationContext testContext) {]