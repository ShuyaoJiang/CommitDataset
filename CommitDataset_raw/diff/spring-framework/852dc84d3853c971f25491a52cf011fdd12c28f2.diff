[+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriter.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.http.codec.multipart;, +, +import java.io.UnsupportedEncodingException;, +import java.nio.charset.Charset;, +import java.nio.charset.StandardCharsets;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +import java.util.Optional;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.function.Supplier;, +, +import javax.mail.internet.MimeUtility;, +, +import org.reactivestreams.Publisher;, +import reactor.core.publisher.Flux;, +import reactor.core.publisher.Mono;, +import reactor.util.function.Tuples;, +, +import org.springframework.core.ResolvableType;, +import org.springframework.core.codec.CharSequenceEncoder;, +import org.springframework.core.codec.CodecException;, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferFactory;, +import org.springframework.core.io.buffer.DefaultDataBufferFactory;, +import org.springframework.http.HttpEntity;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.MediaType;, +import org.springframework.http.ReactiveHttpOutputMessage;, +import org.springframework.http.codec.EncoderHttpMessageWriter;, +import org.springframework.http.codec.HttpMessageWriter;, +import org.springframework.http.codec.ResourceHttpMessageWriter;, +import org.springframework.util.Assert;, +import org.springframework.util.MimeTypeUtils;, +import org.springframework.util.MultiValueMap;, +, +/**, + * Implementation of {@link HttpMessageWriter} to write multipart HTML, + * forms with {@code "multipart/form-data"} media type., + *, + * <p>When writing multipart data, this writer uses other, + * {@link HttpMessageWriter HttpMessageWriters} to write the respective, + * MIME parts. By default, basic writers are registered (for {@code Strings}, + * and {@code Resources}). These can be overridden through the provided, + * constructors., + *, + * @author Sebastien Deleuze, + * @since 5.0, + */, +public class MultipartHttpMessageWriter implements HttpMessageWriter<MultiValueMap<String, ?>> {, +, +	public static final Charset DEFAULT_CHARSET = StandardCharsets.UTF_8;, +, +, +	private List<HttpMessageWriter<?>> partWriters;, +, +	private Charset filenameCharset = DEFAULT_CHARSET;, +, +	private final DataBufferFactory bufferFactory;, +, +, +	public MultipartHttpMessageWriter() {, +		this(new DefaultDataBufferFactory());, +	}, +, +	public MultipartHttpMessageWriter(DataBufferFactory bufferFactory) {, +		this.partWriters = Arrays.asList(, +				new EncoderHttpMessageWriter<>(CharSequenceEncoder.textPlainOnly()),, +				new ResourceHttpMessageWriter(), +		);, +		this.bufferFactory = bufferFactory;, +	}, +, +	public MultipartHttpMessageWriter(List<HttpMessageWriter<?>> partWriters) {, +		this(partWriters, new DefaultDataBufferFactory());, +	}, +, +	public MultipartHttpMessageWriter(List<HttpMessageWriter<?>> partWriters, DataBufferFactory bufferFactory) {, +		this.partWriters = partWriters;, +		this.bufferFactory = bufferFactory;, +	}]