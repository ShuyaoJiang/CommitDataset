[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		return MergedAnnotations.from(annotatedElement, SearchStrategy.SUPERCLASS,, +		return (Class<?>) MergedAnnotations.from(clazz, SearchStrategy.SUPERCLASS), +		return (Class<?>) MergedAnnotations.from(clazz, SearchStrategy.SUPERCLASS), +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		return MergedAnnotations.from(annotatedElement, SearchStrategy.SUPERCLASS,, +		return (Class<?>) MergedAnnotations.from(clazz, SearchStrategy.SUPERCLASS), +		return (Class<?>) MergedAnnotations.from(clazz, SearchStrategy.SUPERCLASS), +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java, +			case SUPERCLASS:, +			case SUPERCLASS:, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		return MergedAnnotations.from(annotatedElement, SearchStrategy.SUPERCLASS,, +		return (Class<?>) MergedAnnotations.from(clazz, SearchStrategy.SUPERCLASS), +		return (Class<?>) MergedAnnotations.from(clazz, SearchStrategy.SUPERCLASS), +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java, +			case SUPERCLASS:, +			case SUPERCLASS:, +++ b/spring-core/src/main/java/org/springframework/core/annotation/MergedAnnotations.java, + * @author Sam Brannen, +		 * superclasses or implemented interfaces., +		 * Find all directly declared annotations as well as any, +		 * {@link Inherited @Inherited} superclass annotations. This strategy, +		 * {@linkplain AnnotatedElement annotated elements}. This strategy does, +		 * not search implemented interfaces., +		 * Find all directly declared and superclass annotations. This strategy, +		SUPERCLASS,, +		 * Perform a full search of all related elements, including those on any, +		 * superclasses or implemented interfaces. Superclass annotations do, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		return MergedAnnotations.from(annotatedElement, SearchStrategy.SUPERCLASS,, +		return (Class<?>) MergedAnnotations.from(clazz, SearchStrategy.SUPERCLASS), +		return (Class<?>) MergedAnnotations.from(clazz, SearchStrategy.SUPERCLASS), +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java, +			case SUPERCLASS:, +			case SUPERCLASS:, +++ b/spring-core/src/main/java/org/springframework/core/annotation/MergedAnnotations.java, + * @author Sam Brannen, +		 * superclasses or implemented interfaces., +		 * Find all directly declared annotations as well as any, +		 * {@link Inherited @Inherited} superclass annotations. This strategy, +		 * {@linkplain AnnotatedElement annotated elements}. This strategy does, +		 * not search implemented interfaces., +		 * Find all directly declared and superclass annotations. This strategy, +		SUPERCLASS,, +		 * Perform a full search of all related elements, including those on any, +		 * superclasses or implemented interfaces. Superclass annotations do, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationsScannerTests.java, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).isEmpty();, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).isEmpty();, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		return MergedAnnotations.from(annotatedElement, SearchStrategy.SUPERCLASS,, +		return (Class<?>) MergedAnnotations.from(clazz, SearchStrategy.SUPERCLASS), +		return (Class<?>) MergedAnnotations.from(clazz, SearchStrategy.SUPERCLASS), +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java, +			case SUPERCLASS:, +			case SUPERCLASS:, +++ b/spring-core/src/main/java/org/springframework/core/annotation/MergedAnnotations.java, + * @author Sam Brannen, +		 * superclasses or implemented interfaces., +		 * Find all directly declared annotations as well as any, +		 * {@link Inherited @Inherited} superclass annotations. This strategy, +		 * {@linkplain AnnotatedElement annotated elements}. This strategy does, +		 * not search implemented interfaces., +		 * Find all directly declared and superclass annotations. This strategy, +		SUPERCLASS,, +		 * Perform a full search of all related elements, including those on any, +		 * superclasses or implemented interfaces. Superclass annotations do, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationsScannerTests.java, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).isEmpty();, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).isEmpty();, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(, +		assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(, +++ b/spring-core/src/test/java/org/springframework/core/annotation/MergedAnnotationsTests.java, +				SearchStrategy.SUPERCLASS).get(, +				SearchStrategy.SUPERCLASS).get(, +				SearchStrategy.SUPERCLASS).get(, +				SearchStrategy.SUPERCLASS).get(, +				SearchStrategy.SUPERCLASS).get(, +				SearchStrategy.SUPERCLASS).get(, +				SearchStrategy.SUPERCLASS).get(Order.class).getSource()).isEqualTo(, +				SearchStrategy.SUPERCLASS).get(Order.class).getSource()).isNull();]