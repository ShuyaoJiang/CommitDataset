[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlMapFactoryBean.java, +import org.springframework.beans.factory.InitializingBean;, + * Factory for a Map that reads from a YAML source. YAML is a nice human-readable, +public class YamlMapFactoryBean extends YamlProcessor implements FactoryBean<Map<String, Object>>, InitializingBean {, +	private Map<String, Object> map;, +	 * Set if a singleton should be created, or a new object on each request, +	 * otherwise. Default is {@code true} (a singleton)., +	public void setSingleton(boolean singleton) {, +	public boolean isSingleton() {, +	@Override, +	public void afterPropertiesSet() {, +		if (isSingleton()) {, +			this.map = createMap();, +		}, +	}, +		return (this.map != null ? this.map : createMap());, +, +	protected Map<String, Object> createMap() {, +				Map<String, Object> result = new LinkedHashMap<String, Object>((Map) existing);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlMapFactoryBean.java, +import org.springframework.beans.factory.InitializingBean;, + * Factory for a Map that reads from a YAML source. YAML is a nice human-readable, +public class YamlMapFactoryBean extends YamlProcessor implements FactoryBean<Map<String, Object>>, InitializingBean {, +	private Map<String, Object> map;, +	 * Set if a singleton should be created, or a new object on each request, +	 * otherwise. Default is {@code true} (a singleton)., +	public void setSingleton(boolean singleton) {, +	public boolean isSingleton() {, +	@Override, +	public void afterPropertiesSet() {, +		if (isSingleton()) {, +			this.map = createMap();, +		}, +	}, +		return (this.map != null ? this.map : createMap());, +, +	protected Map<String, Object> createMap() {, +				Map<String, Object> result = new LinkedHashMap<String, Object>((Map) existing);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, +, +	public void setResources(Resource... resources) {, +, +		return (count > 0);, +		if (this.resolutionMethod != ResolutionMethod.FIRST_FOUND &&, +				this.resolutionMethod != ResolutionMethod.OVERRIDE_AND_IGNORE) {, +			this.logger.warn("Could not load map from " + resource + ": " + ex.getMessage());, +	private void assignProperties(Properties properties, Map<String, Object> input, String path) {, +, +, +, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlMapFactoryBean.java, +import org.springframework.beans.factory.InitializingBean;, + * Factory for a Map that reads from a YAML source. YAML is a nice human-readable, +public class YamlMapFactoryBean extends YamlProcessor implements FactoryBean<Map<String, Object>>, InitializingBean {, +	private Map<String, Object> map;, +	 * Set if a singleton should be created, or a new object on each request, +	 * otherwise. Default is {@code true} (a singleton)., +	public void setSingleton(boolean singleton) {, +	public boolean isSingleton() {, +	@Override, +	public void afterPropertiesSet() {, +		if (isSingleton()) {, +			this.map = createMap();, +		}, +	}, +		return (this.map != null ? this.map : createMap());, +, +	protected Map<String, Object> createMap() {, +				Map<String, Object> result = new LinkedHashMap<String, Object>((Map) existing);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, +, +	public void setResources(Resource... resources) {, +, +		return (count > 0);, +		if (this.resolutionMethod != ResolutionMethod.FIRST_FOUND &&, +				this.resolutionMethod != ResolutionMethod.OVERRIDE_AND_IGNORE) {, +			this.logger.warn("Could not load map from " + resource + ": " + ex.getMessage());, +	private void assignProperties(Properties properties, Map<String, Object> input, String path) {, +, +, +, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlPropertiesFactoryBean.java, +import org.springframework.beans.factory.InitializingBean;, + * becomes Java Properties like this:, +public class YamlPropertiesFactoryBean extends YamlProcessor implements FactoryBean<Properties>, InitializingBean {, +	private Properties properties;, +	 * Set if a singleton should be created, or a new object on each request, +	 * otherwise. Default is {@code true} (a singleton)., +	public void setSingleton(boolean singleton) {, +	public boolean isSingleton() {, +	@Override, +	public void afterPropertiesSet() {, +		if (isSingleton()) {, +			this.properties = createProperties();, +		}, +	}, +	public Properties getObject() {, +		return (this.properties != null ? this.properties : createProperties());]