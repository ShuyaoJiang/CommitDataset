[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Set;, +	private static final Set<Class<?>> BOOLEAN_TYPES;, +	static {, +		Set<Class<?>> booleanTypes = new HashSet<Class<?>>();, +		booleanTypes.add(Boolean.class);, +		booleanTypes.add(Boolean.TYPE);, +		BOOLEAN_TYPES = Collections.unmodifiableSet(booleanTypes);, +	}, +, +	private static final Set<Class<?>> ANY_TYPES = Collections.emptySet();, +, +, +		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),, +				 "get", clazz, mustBeStatic, 0, ANY_TYPES);, +		if (method == null) {, +			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),, +					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES);, +		}, +		return method;, +				"set", clazz, mustBeStatic, 1, ANY_TYPES);, +	private Method findMethodForProperty(String[] methodSuffixes, String prefix, Class<?> clazz,, +			boolean mustBeStatic, int numberOfParams, Set<Class<?>> requiredReturnTypes) {, +						&& (!mustBeStatic || Modifier.isStatic(method.getModifiers())), +						&& (requiredReturnTypes.isEmpty() || requiredReturnTypes.contains(method.getReturnType()))) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Set;, +	private static final Set<Class<?>> BOOLEAN_TYPES;, +	static {, +		Set<Class<?>> booleanTypes = new HashSet<Class<?>>();, +		booleanTypes.add(Boolean.class);, +		booleanTypes.add(Boolean.TYPE);, +		BOOLEAN_TYPES = Collections.unmodifiableSet(booleanTypes);, +	}, +, +	private static final Set<Class<?>> ANY_TYPES = Collections.emptySet();, +, +, +		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),, +				 "get", clazz, mustBeStatic, 0, ANY_TYPES);, +		if (method == null) {, +			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),, +					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES);, +		}, +		return method;, +				"set", clazz, mustBeStatic, 1, ANY_TYPES);, +	private Method findMethodForProperty(String[] methodSuffixes, String prefix, Class<?> clazz,, +			boolean mustBeStatic, int numberOfParams, Set<Class<?>> requiredReturnTypes) {, +						&& (!mustBeStatic || Modifier.isStatic(method.getModifiers())), +						&& (requiredReturnTypes.isEmpty() || requiredReturnTypes.contains(method.getReturnType()))) {, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, +	@Test, +	public void SPR_11142() throws Exception {, +		SpelExpressionParser parser = new SpelExpressionParser();, +		StandardEvaluationContext context = new StandardEvaluationContext();, +		SPR11142 rootObject = new SPR11142();, +		Expression expression = parser.parseExpression("something");, +		thrown.expect(SpelEvaluationException.class);, +		thrown.expectMessage("property 'something' cannot be found");, +		expression.getValue(context, rootObject);, +	}, +, +, +	static class SPR11142 {, +, +		public String isSomething() {, +			return "";, +		}, +, +	}]