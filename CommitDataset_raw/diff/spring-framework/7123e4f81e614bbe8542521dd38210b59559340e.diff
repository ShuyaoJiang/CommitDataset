[+++ b/org.springframework.context/src/main/java/org/springframework/context/expression/StandardBeanExpressionResolver.java, +import org.springframework.core.convert.ConversionService;, +import org.springframework.expression.spel.support.StandardTypeConverter;, +import org.springframework.expression.spel.support.StandardTypeLocator;, +	 * <p>Default is a {@link org.springframework.expression.spel.standard.SpelExpressionParser},, +				sec.setTypeLocator(new StandardTypeLocator(evalContext.getBeanFactory().getBeanClassLoader()));, +				ConversionService conversionService = evalContext.getBeanFactory().getConversionService();, +				if (conversionService != null) {, +					sec.setTypeConverter(new StandardTypeConverter(conversionService));, +				}, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/StandardBeanExpressionResolver.java, +import org.springframework.core.convert.ConversionService;, +import org.springframework.expression.spel.support.StandardTypeConverter;, +import org.springframework.expression.spel.support.StandardTypeLocator;, +	 * <p>Default is a {@link org.springframework.expression.spel.standard.SpelExpressionParser},, +				sec.setTypeLocator(new StandardTypeLocator(evalContext.getBeanFactory().getBeanClassLoader()));, +				ConversionService conversionService = evalContext.getBeanFactory().getConversionService();, +				if (conversionService != null) {, +					sec.setTypeConverter(new StandardTypeConverter(conversionService));, +				}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/EvaluationContext.java, + * <p>There is a default implementation of the EvaluationContext,, +	 * @return a type comparator for comparing pairs of objects for equality., +	 */, +	TypeComparator getTypeComparator();, +, +	/**, +	/**, +	 * Set a named variable within this evaluation context to a specified value., +	 * @param name variable to set, +	 * @param value value to be placed in the variable, +	 */, +	void setVariable(String name, Object value);, +, +	/**, +	 * Look up a named variable within this evaluation context., +	 * @param name variable to lookup, +	 * @return the value of the variable, +	 */, +	Object lookupVariable(String name);, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/StandardBeanExpressionResolver.java, +import org.springframework.core.convert.ConversionService;, +import org.springframework.expression.spel.support.StandardTypeConverter;, +import org.springframework.expression.spel.support.StandardTypeLocator;, +	 * <p>Default is a {@link org.springframework.expression.spel.standard.SpelExpressionParser},, +				sec.setTypeLocator(new StandardTypeLocator(evalContext.getBeanFactory().getBeanClassLoader()));, +				ConversionService conversionService = evalContext.getBeanFactory().getConversionService();, +				if (conversionService != null) {, +					sec.setTypeConverter(new StandardTypeConverter(conversionService));, +				}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/EvaluationContext.java, + * <p>There is a default implementation of the EvaluationContext,, +	 * @return a type comparator for comparing pairs of objects for equality., +	 */, +	TypeComparator getTypeComparator();, +, +	/**, +	/**, +	 * Set a named variable within this evaluation context to a specified value., +	 * @param name variable to set, +	 * @param value value to be placed in the variable, +	 */, +	void setVariable(String name, Object value);, +, +	/**, +	 * Look up a named variable within this evaluation context., +	 * @param name variable to lookup, +	 * @return the value of the variable, +	 */, +	Object lookupVariable(String name);, +, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, +, + * <p>It also acts as a place for to define common utility routines that the various Ast nodes might need., +			}, +			else {, +		}, +		else {, +		}, +		else {, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/StandardBeanExpressionResolver.java, +import org.springframework.core.convert.ConversionService;, +import org.springframework.expression.spel.support.StandardTypeConverter;, +import org.springframework.expression.spel.support.StandardTypeLocator;, +	 * <p>Default is a {@link org.springframework.expression.spel.standard.SpelExpressionParser},, +				sec.setTypeLocator(new StandardTypeLocator(evalContext.getBeanFactory().getBeanClassLoader()));, +				ConversionService conversionService = evalContext.getBeanFactory().getConversionService();, +				if (conversionService != null) {, +					sec.setTypeConverter(new StandardTypeConverter(conversionService));, +				}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/EvaluationContext.java, + * <p>There is a default implementation of the EvaluationContext,, +	 * @return a type comparator for comparing pairs of objects for equality., +	 */, +	TypeComparator getTypeComparator();, +, +	/**, +	/**, +	 * Set a named variable within this evaluation context to a specified value.]