[+++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java, + * Copyright 2002-2010 the original author or authors., +import java.awt.Image;, +import java.lang.reflect.GenericArrayType;, +import java.lang.reflect.ParameterizedType;, +import java.lang.reflect.Type;, +import java.math.BigDecimal;, +import java.math.BigInteger;, +import java.util.Calendar;, +import java.util.Date;, +import javax.xml.datatype.Duration;, +import javax.xml.datatype.XMLGregorianCalendar;, +import javax.xml.namespace.QName;, +import org.springframework.oxm.GenericMarshaller;, +import org.springframework.oxm.GenericUnmarshaller;, +	private Class<?>[] classesToBeBound;, +	private XmlAdapter<?, ?>[] adapters;, +	public Class<?>[] getClassesToBeBound() {, +	public void setClassesToBeBound(Class<?>[] classesToBeBound) {, +	public void setAdapters(XmlAdapter<?, ?>[] adapters) {, +					parameterizedType.getActualTypeArguments().length == 1) {, +				Type typeArgument = parameterizedType.getActualTypeArguments()[0];, +				if (typeArgument instanceof Class) {, +					Class<?> classArgument = (Class<?>) typeArgument;, +					if (isPrimitiveWrapper(classArgument) || isStandardClass(classArgument)) {, +						return true;, +					}, +					return supportsInternal(classArgument, false);, +				} else if (typeArgument instanceof GenericArrayType) {, +					GenericArrayType arrayType = (GenericArrayType) typeArgument;, +					return arrayType.getGenericComponentType().equals(Byte.TYPE);, +				}, +			Class<?> clazz = (Class<?>) genericType;, +	/**, +	 * Checks whether the given type is a primitive wrapper type., +	 *, +	 * @see section 8.5.1 of the JAXB2 spec, +	 */, +	private boolean isPrimitiveWrapper(Class<?> clazz) {, +		return Boolean.class.equals(clazz) ||, +			Byte.class.equals(clazz) ||, +				Short.class.equals(clazz) ||, +				Integer.class.equals(clazz) ||, +				Long.class.equals(clazz) ||, +				Float.class.equals(clazz) ||, +				Double.class.equals(clazz);, +	}, +, +	/**, +	 * Checks whether the given type is a standard class., +, +	 * @see section 8.5.2 of the JAXB2 spec, +	 */, +	private boolean isStandardClass(Class<?> clazz) {, +		return String.class.equals(clazz) ||, +				BigInteger.class.isAssignableFrom(clazz) ||, +				BigDecimal.class.isAssignableFrom(clazz) ||, +				Calendar.class.isAssignableFrom(clazz) ||, +				Date.class.isAssignableFrom(clazz) ||, +				QName.class.isAssignableFrom(clazz) ||, +				URI.class.equals(clazz) ||, +				XMLGregorianCalendar.class.isAssignableFrom(clazz) ||, +				Duration.class.isAssignableFrom(clazz) ||, +				Image.class.equals(clazz) ||, +				DataHandler.class.equals(clazz) ||, +				// Source and subclasses should be supported according to the JAXB2 spec, but aren't in the RI, +				// Source.class.isAssignableFrom(clazz) ||, +				UUID.class.equals(clazz);, +, +	}, +, +			for (XmlAdapter<?, ?> adapter : this.adapters) {, +			for (XmlAdapter<?, ?> adapter : this.adapters) {, +++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java, + * Copyright 2002-2010 the original author or authors., +import java.awt.Image;, +import java.lang.reflect.GenericArrayType;, +import java.lang.reflect.ParameterizedType;, +import java.lang.reflect.Type;, +import java.math.BigDecimal;, +import java.math.BigInteger;, +import java.util.Calendar;, +import java.util.Date;, +import javax.xml.datatype.Duration;, +import javax.xml.datatype.XMLGregorianCalendar;, +import javax.xml.namespace.QName;, +import org.springframework.oxm.GenericMarshaller;, +import org.springframework.oxm.GenericUnmarshaller;, +	private Class<?>[] classesToBeBound;, +	private XmlAdapter<?, ?>[] adapters;, +	public Class<?>[] getClassesToBeBound() {, +	public void setClassesToBeBound(Class<?>[] classesToBeBound) {, +	public void setAdapters(XmlAdapter<?, ?>[] adapters) {, +					parameterizedType.getActualTypeArguments().length == 1) {, +				Type typeArgument = parameterizedType.getActualTypeArguments()[0];, +				if (typeArgument instanceof Class) {, +					Class<?> classArgument = (Class<?>) typeArgument;, +					if (isPrimitiveWrapper(classArgument) || isStandardClass(classArgument)) {, +						return true;, +					}]