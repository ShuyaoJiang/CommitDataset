[+++ b/org.springframework.core/src/main/java/org/springframework/core/io/ResourceEditor.java, + * Copyright 2002-2010 the original author or authors., + * <p>The path may contain <code>${...}</code> placeholders,, + * to be resolved as system properties: e.g. <code>${user.dir}</code>., + * Unresolvable placeholder are ignored by default., +	private final boolean ignoreUnresolvablePlaceholders;, +, +		this(resourceLoader, true);, +	 * Create a new instance of the {@link ResourceEditor} class, +	 * using the given {@link ResourceLoader}., +	 * @param resourceLoader the <code>ResourceLoader</code> to use, +	 * @param ignoreUnresolvablePlaceholders whether to ignore unresolvable placeholders, +	 * if no corresponding system property could be found, +	public ResourceEditor(ResourceLoader resourceLoader, boolean ignoreUnresolvablePlaceholders) {, +		Assert.notNull(resourceLoader, "ResourceLoader must not be null");, +		this.resourceLoader = resourceLoader;, +, +		return SystemPropertyUtils.resolvePlaceholders(path, this.ignoreUnresolvablePlaceholders);, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/ResourceEditor.java, + * Copyright 2002-2010 the original author or authors., + * <p>The path may contain <code>${...}</code> placeholders,, + * to be resolved as system properties: e.g. <code>${user.dir}</code>., + * Unresolvable placeholder are ignored by default., +	private final boolean ignoreUnresolvablePlaceholders;, +, +		this(resourceLoader, true);, +	 * Create a new instance of the {@link ResourceEditor} class, +	 * using the given {@link ResourceLoader}., +	 * @param resourceLoader the <code>ResourceLoader</code> to use, +	 * @param ignoreUnresolvablePlaceholders whether to ignore unresolvable placeholders, +	 * if no corresponding system property could be found, +	public ResourceEditor(ResourceLoader resourceLoader, boolean ignoreUnresolvablePlaceholders) {, +		Assert.notNull(resourceLoader, "ResourceLoader must not be null");, +		this.resourceLoader = resourceLoader;, +, +		return SystemPropertyUtils.resolvePlaceholders(path, this.ignoreUnresolvablePlaceholders);, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/support/ResourceArrayPropertyEditor.java, + * Copyright 2002-2010 the original author or authors., + * <p>The path may contain <code>${...}</code> placeholders,, + * to be resolved as system properties: e.g. <code>${user.dir}</code>., + * Unresolvable placeholder are ignored by default., +	private final boolean ignoreUnresolvablePlaceholders;, +, +		this(new PathMatchingResourcePatternResolver());, +		this(resourcePatternResolver, true);, +	}, +, +	/**, +	 * Create a new ResourceArrayPropertyEditor with the given ResourcePatternResolver., +	 * @param resourcePatternResolver the ResourcePatternResolver to use, +	 * @param ignoreUnresolvablePlaceholders whether to ignore unresolvable placeholders, +	 * if no corresponding system property could be found, +	 */, +	public ResourceArrayPropertyEditor(ResourcePatternResolver resourcePatternResolver, boolean ignoreUnresolvablePlaceholders) {, +		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders;, +		return SystemPropertyUtils.resolvePlaceholders(path, this.ignoreUnresolvablePlaceholders);, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/ResourceEditor.java, + * Copyright 2002-2010 the original author or authors., + * <p>The path may contain <code>${...}</code> placeholders,, + * to be resolved as system properties: e.g. <code>${user.dir}</code>., + * Unresolvable placeholder are ignored by default., +	private final boolean ignoreUnresolvablePlaceholders;, +, +		this(resourceLoader, true);, +	 * Create a new instance of the {@link ResourceEditor} class, +	 * using the given {@link ResourceLoader}., +	 * @param resourceLoader the <code>ResourceLoader</code> to use, +	 * @param ignoreUnresolvablePlaceholders whether to ignore unresolvable placeholders, +	 * if no corresponding system property could be found, +	public ResourceEditor(ResourceLoader resourceLoader, boolean ignoreUnresolvablePlaceholders) {, +		Assert.notNull(resourceLoader, "ResourceLoader must not be null");, +		this.resourceLoader = resourceLoader;, +, +		return SystemPropertyUtils.resolvePlaceholders(path, this.ignoreUnresolvablePlaceholders);, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/support/ResourceArrayPropertyEditor.java, + * Copyright 2002-2010 the original author or authors., + * <p>The path may contain <code>${...}</code> placeholders,, + * to be resolved as system properties: e.g. <code>${user.dir}</code>., + * Unresolvable placeholder are ignored by default., +	private final boolean ignoreUnresolvablePlaceholders;, +, +		this(new PathMatchingResourcePatternResolver());, +		this(resourcePatternResolver, true);, +	}, +, +	/**, +	 * Create a new ResourceArrayPropertyEditor with the given ResourcePatternResolver., +	 * @param resourcePatternResolver the ResourcePatternResolver to use, +	 * @param ignoreUnresolvablePlaceholders whether to ignore unresolvable placeholders, +	 * if no corresponding system property could be found, +	 */, +	public ResourceArrayPropertyEditor(ResourcePatternResolver resourcePatternResolver, boolean ignoreUnresolvablePlaceholders) {, +		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders;, +		return SystemPropertyUtils.resolvePlaceholders(path, this.ignoreUnresolvablePlaceholders);, +++ b/org.springframework.core/src/main/java/org/springframework/util/SystemPropertyUtils.java, + * Copyright 2002-2010 the original author or authors., +	public static String resolvePlaceholders(String text) {, +	public static String resolvePlaceholders(String text, boolean ignoreUnresolvablePlaceholders) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/ResourceEditor.java, + * Copyright 2002-2010 the original author or authors.]