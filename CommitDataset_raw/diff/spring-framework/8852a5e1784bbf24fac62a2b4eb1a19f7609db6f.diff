[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, + * Copyright 2002-2016 the original author or authors., +			config.addAllowedOrigin(resolveCorsAnnotationValue(origin));, +			config.addAllowedHeader(resolveCorsAnnotationValue(header));, +			config.addExposedHeader(resolveCorsAnnotationValue(header));, +		String allowCredentials = resolveCorsAnnotationValue(annotation.allowCredentials());, +			throw new IllegalStateException("@CrossOrigin's allowCredentials value must be \"true\", \"false\", " +, +					"or an empty string (\"\"): current value is [" + allowCredentials + "]");, +	private String resolveCorsAnnotationValue(String value) {, +		return (this.embeddedValueResolver != null ? this.embeddedValueResolver.resolveStringValue(value) : value);, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, + * Copyright 2002-2016 the original author or authors., +			config.addAllowedOrigin(resolveCorsAnnotationValue(origin));, +			config.addAllowedHeader(resolveCorsAnnotationValue(header));, +			config.addExposedHeader(resolveCorsAnnotationValue(header));, +		String allowCredentials = resolveCorsAnnotationValue(annotation.allowCredentials());, +			throw new IllegalStateException("@CrossOrigin's allowCredentials value must be \"true\", \"false\", " +, +					"or an empty string (\"\"): current value is [" + allowCredentials + "]");, +	private String resolveCorsAnnotationValue(String value) {, +		return (this.embeddedValueResolver != null ? this.embeddedValueResolver.resolveStringValue(value) : value);, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/CrossOriginTests.java, + * Copyright 2002-2016 the original author or authors., +import java.util.Properties;, +import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;, +import org.springframework.core.env.PropertiesPropertySource;, +		StaticWebApplicationContext wac = new StaticWebApplicationContext();, +		Properties props = new Properties();, +		props.setProperty("myOrigin", "http://example.com");, +		wac.getEnvironment().getPropertySources().addFirst(new PropertiesPropertySource("ps", props));, +		wac.registerSingleton("ppc", PropertySourcesPlaceholderConfigurer.class);, +		wac.refresh();, +, +		wac.getAutowireCapableBeanFactory().initializeBean(this.handlerMapping, "hm");, +	public void customOriginDefinedViaPlaceholder() throws Exception {, +		this.handlerMapping.registerHandler(new MethodLevelController());, +		this.request.setRequestURI("/someOrigin");, +		HandlerExecutionChain chain = this.handlerMapping.getHandler(request);, +		CorsConfiguration config = getCorsConfiguration(chain, false);, +		assertNotNull(config);, +		assertEquals(Arrays.asList("http://example.com"), config.getAllowedOrigins());, +		assertTrue(config.getAllowCredentials());, +	}, +, +	@Test, +, +		@CrossOrigin("${myOrigin}"), +		@RequestMapping("/someOrigin"), +		public void customOriginDefinedViaPlaceholder() {, +	}, +, +, +, +, +, +, +]