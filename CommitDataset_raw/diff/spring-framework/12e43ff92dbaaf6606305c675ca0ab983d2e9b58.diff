[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/SimpleMappingExceptionResolver.java, +import java.util.Map;, +import java.util.Iterator;, +import java.util.HashMap;, +import org.springframework.util.CollectionUtils;, +	private Map<String, Integer> statusCodes = new HashMap<String, Integer>();, +, +	 * Set the HTTP status code that this exception resolver will apply for a given resolved error view. Keys are, +	 * view names; values are status codes., +	 * <p>Note that this error code will only get applied in case of a top-level request. It will not be set for an include, +	 * request, since the HTTP status cannot be modified from within an include., +	 *, +	 * <p>If not specified, the default status code will be applied., +	 *, +	 * @see #setDefaultStatusCode(int), +	 */, +	public void setStatusCodes(Properties statusCodes) {, +		for (Enumeration enumeration = statusCodes.propertyNames(); enumeration.hasMoreElements();) {, +			String viewName = (String) enumeration.nextElement();, +			Integer statusCode = new Integer(statusCodes.getProperty(viewName));, +			this.statusCodes.put(viewName, statusCode);, +		}, +	}, +, +	/**, +	 * Set the default HTTP status code that this exception resolver will apply if it resolves an error view and if there, +	 * is no status code mapping defined., +	 *, +	 * <p>Note that this error code will only get applied in case of a top-level request. It will not be set for an, +	 * include request, since the HTTP status cannot be modified from within an include., +	 *, +	 * <p>If not specified, no status code will be applied, either leaving this to the controller or view, or keeping, +	 * the servlet engine's default of 200 (OK)., +	 *, +	 * @param defaultStatusCode HTTP status code value, for example 500, +	 * ({@link HttpServletResponse#SC_INTERNAL_SERVER_ERROR}) or 404 ({@link HttpServletResponse#SC_NOT_FOUND}), +	 * @see #setStatusCodes(Properties), +	 * Determine the HTTP status code to apply for the given error view., +	 *, +	 * <p>The default implementation returns the status code for the given view name (specified through the, +	 * {@link #setStatusCodes(Properties) statusCodes} property), or falls back to the, +	 * {@link #setDefaultStatusCode defaultStatusCode} if there is no match., +	 *, +	 * <p>Override this in a custom subclass to customize this behavior., +		if (this.statusCodes.containsKey(viewName)) {, +			return this.statusCodes.get(viewName);, +		}, +	 * @see HttpServletResponse#setStatus, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/SimpleMappingExceptionResolver.java, +import java.util.Map;, +import java.util.Iterator;, +import java.util.HashMap;, +import org.springframework.util.CollectionUtils;, +	private Map<String, Integer> statusCodes = new HashMap<String, Integer>();, +, +	 * Set the HTTP status code that this exception resolver will apply for a given resolved error view. Keys are, +	 * view names; values are status codes., +	 * <p>Note that this error code will only get applied in case of a top-level request. It will not be set for an include, +	 * request, since the HTTP status cannot be modified from within an include., +	 *, +	 * <p>If not specified, the default status code will be applied., +	 *, +	 * @see #setDefaultStatusCode(int), +	 */, +	public void setStatusCodes(Properties statusCodes) {, +		for (Enumeration enumeration = statusCodes.propertyNames(); enumeration.hasMoreElements();) {, +			String viewName = (String) enumeration.nextElement();, +			Integer statusCode = new Integer(statusCodes.getProperty(viewName));, +			this.statusCodes.put(viewName, statusCode);, +		}, +	}, +, +	/**, +	 * Set the default HTTP status code that this exception resolver will apply if it resolves an error view and if there, +	 * is no status code mapping defined., +	 *, +	 * <p>Note that this error code will only get applied in case of a top-level request. It will not be set for an, +	 * include request, since the HTTP status cannot be modified from within an include., +	 *, +	 * <p>If not specified, no status code will be applied, either leaving this to the controller or view, or keeping, +	 * the servlet engine's default of 200 (OK)., +	 *, +	 * @param defaultStatusCode HTTP status code value, for example 500, +	 * ({@link HttpServletResponse#SC_INTERNAL_SERVER_ERROR}) or 404 ({@link HttpServletResponse#SC_NOT_FOUND}), +	 * @see #setStatusCodes(Properties), +	 * Determine the HTTP status code to apply for the given error view., +	 *, +	 * <p>The default implementation returns the status code for the given view name (specified through the, +	 * {@link #setStatusCodes(Properties) statusCodes} property), or falls back to the, +	 * {@link #setDefaultStatusCode defaultStatusCode} if there is no match., +	 *, +	 * <p>Override this in a custom subclass to customize this behavior., +		if (this.statusCodes.containsKey(viewName)) {, +			return this.statusCodes.get(viewName);, +		}, +	 * @see HttpServletResponse#setStatus, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/handler/SimpleMappingExceptionResolverTests.java, +import static org.junit.Assert.*;, +import org.junit.Before;, +import org.junit.Test;]