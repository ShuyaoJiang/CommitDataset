[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			if ((beanInstance != null && this.resolvableDependencies.containsValue(beanInstance)) ||, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			if ((beanInstance != null && this.resolvableDependencies.containsValue(beanInstance)) ||, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2015 the original author or authors., +	public void testConstructorResourceInjectionWithNull() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.registerResolvableDependency(BeanFactory.class, bf);, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		RootBeanDefinition bd = new RootBeanDefinition(ConstructorResourceInjectionBean.class);, +		bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE);, +		bf.registerBeanDefinition("annotatedBean", bd);, +		TestBean tb = new TestBean();, +		bf.registerSingleton("testBean", tb);, +		bf.registerBeanDefinition("nestedTestBean", new RootBeanDefinition(NullNestedTestBeanFactoryBean.class));, +		bf.registerSingleton("nestedTestBean2", new NestedTestBean());, +, +		ConstructorResourceInjectionBean bean = (ConstructorResourceInjectionBean) bf.getBean("annotatedBean");, +		assertSame(tb, bean.getTestBean());, +		assertSame(tb, bean.getTestBean2());, +		assertSame(tb, bean.getTestBean3());, +		assertSame(tb, bean.getTestBean4());, +		assertNull(bean.getNestedTestBean());, +		assertSame(bf, bean.getBeanFactory());, +, +		bean = (ConstructorResourceInjectionBean) bf.getBean("annotatedBean");, +		assertSame(tb, bean.getTestBean());, +		assertSame(tb, bean.getTestBean2());, +		assertSame(tb, bean.getTestBean3());, +		assertSame(tb, bean.getTestBean4());, +		assertNull(bean.getNestedTestBean());, +		assertSame(bf, bean.getBeanFactory());, +	}, +, +	@Test, +, +	public static class NullNestedTestBeanFactoryBean implements FactoryBean<NestedTestBean> {, +, +		@Override, +		public NestedTestBean getObject() {, +			return null;, +		}, +, +		@Override, +		public Class<?> getObjectType() {, +			return NestedTestBean.class;, +		}, +, +		@Override, +		public boolean isSingleton() {, +			return true;, +		}, +	}, +]