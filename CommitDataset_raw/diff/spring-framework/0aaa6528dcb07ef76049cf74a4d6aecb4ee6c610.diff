[+++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, + * <p>By default, this converter can read all media types. The {@link MediaTypeFactory} is used, + * to determine the {@code Content-Type} of written resources., +		MediaType mediaType = MediaTypeFactory.getMediaType(resource);, +		return mediaType != null ? mediaType : MediaType.APPLICATION_OCTET_STREAM;, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, + * <p>By default, this converter can read all media types. The {@link MediaTypeFactory} is used, + * to determine the {@code Content-Type} of written resources., +		MediaType mediaType = MediaTypeFactory.getMediaType(resource);, +		return mediaType != null ? mediaType : MediaType.APPLICATION_OCTET_STREAM;, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceRegionHttpMessageConverter.java, +import org.springframework.core.io.Resource;, +		Resource resource = null;, +			resource = ((ResourceRegion) object).getResource();, +				resource = regions.iterator().next().getResource();, +		MediaType result = null;, +		if (resource != null) {, +			result = MediaTypeFactory.getMediaType(resource);, +		if (result == null) {, +		return result;, +	}, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, + * <p>By default, this converter can read all media types. The {@link MediaTypeFactory} is used, + * to determine the {@code Content-Type} of written resources., +		MediaType mediaType = MediaTypeFactory.getMediaType(resource);, +		return mediaType != null ? mediaType : MediaType.APPLICATION_OCTET_STREAM;, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceRegionHttpMessageConverter.java, +import org.springframework.core.io.Resource;, +		Resource resource = null;, +			resource = ((ResourceRegion) object).getResource();, +				resource = regions.iterator().next().getResource();, +		MediaType result = null;, +		if (resource != null) {, +			result = MediaTypeFactory.getMediaType(resource);, +		if (result == null) {, +		return result;, +	}, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +	 * "path extension" strategy, the list of extensions may, +	 * increase as file extensions are resolved via, +	 * {@link org.springframework.http.MediaTypeFactory} and cached., +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, + * <p>By default, this converter can read all media types. The {@link MediaTypeFactory} is used, + * to determine the {@code Content-Type} of written resources., +		MediaType mediaType = MediaTypeFactory.getMediaType(resource);, +		return mediaType != null ? mediaType : MediaType.APPLICATION_OCTET_STREAM;, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceRegionHttpMessageConverter.java, +import org.springframework.core.io.Resource;, +		Resource resource = null;, +			resource = ((ResourceRegion) object).getResource();, +				resource = regions.iterator().next().getResource();, +		MediaType result = null;, +		if (resource != null) {, +			result = MediaTypeFactory.getMediaType(resource);, +		if (result == null) {, +		return result;, +	}, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +	 * "path extension" strategy, the list of extensions may, +	 * increase as file extensions are resolved via, +	 * {@link org.springframework.http.MediaTypeFactory} and cached., +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.http.MediaTypeFactory;, + * and {@link MediaTypeFactory} to resolve a path extension to a MediaType., +	 * {@link ServletContext#getMimeType} and, +	 * {@link org.springframework.http.MediaTypeFactory} to resolve path extensions., +	 * @deprecated as 5.0, in favor of {@link MediaTypeFactory}, which has no JAF dependency., +	@Deprecated, +			if (this.servletContext != null) {, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, + * <p>By default, this converter can read all media types. The {@link MediaTypeFactory} is used, + * to determine the {@code Content-Type} of written resources., +		MediaType mediaType = MediaTypeFactory.getMediaType(resource);, +		return mediaType != null ? mediaType : MediaType.APPLICATION_OCTET_STREAM;, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceRegionHttpMessageConverter.java, +import org.springframework.core.io.Resource;, +		Resource resource = null;, +			resource = ((ResourceRegion) object).getResource();, +				resource = regions.iterator().next().getResource();, +		MediaType result = null;, +		if (resource != null) {, +			result = MediaTypeFactory.getMediaType(resource);, +		if (result == null) {, +		return result;, +	}, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +	 * "path extension" strategy, the list of extensions may, +	 * increase as file extensions are resolved via, +	 * {@link org.springframework.http.MediaTypeFactory} and cached., +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.http.MediaTypeFactory;, + * and {@link MediaTypeFactory} to resolve a path extension to a MediaType., +	 * {@link ServletContext#getMimeType} and, +	 * {@link org.springframework.http.MediaTypeFactory} to resolve path extensions., +	 * @deprecated as 5.0, in favor of {@link MediaTypeFactory}, which has no JAF dependency., +	@Deprecated, +			if (this.servletContext != null) {, +++ b/spring-web/src/main/java/org/springframework/web/accept/PathExtensionContentNegotiationStrategy.java]