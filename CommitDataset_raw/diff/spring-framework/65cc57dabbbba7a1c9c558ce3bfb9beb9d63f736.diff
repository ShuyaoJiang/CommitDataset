[+++ b/spring-core/src/main/java/org/springframework/core/env/EnumerablePropertySource.java, +import org.springframework.util.ObjectUtils;, + * @author Juergen Hoeller, +		return ObjectUtils.containsElement(getPropertyNames(), name);, +, +	/**, +	 * Return the names of all properties contained by the, +	 * {@linkplain #getSource() source} object (never {@code null})., +	 */, +	public abstract String[] getPropertyNames();, +++ b/spring-core/src/main/java/org/springframework/core/env/EnumerablePropertySource.java, +import org.springframework.util.ObjectUtils;, + * @author Juergen Hoeller, +		return ObjectUtils.containsElement(getPropertyNames(), name);, +, +	/**, +	 * Return the names of all properties contained by the, +	 * {@linkplain #getSource() source} object (never {@code null})., +	 */, +	public abstract String[] getPropertyNames();, +++ b/spring-core/src/main/java/org/springframework/core/env/MapPropertySource.java, + * @author Juergen Hoeller, +, +	public boolean containsProperty(String name) {, +		return this.source.containsKey(name);, +	public String[] getPropertyNames() {, +		return StringUtils.toStringArray(this.source.keySet());, +++ b/spring-core/src/main/java/org/springframework/core/env/EnumerablePropertySource.java, +import org.springframework.util.ObjectUtils;, + * @author Juergen Hoeller, +		return ObjectUtils.containsElement(getPropertyNames(), name);, +, +	/**, +	 * Return the names of all properties contained by the, +	 * {@linkplain #getSource() source} object (never {@code null})., +	 */, +	public abstract String[] getPropertyNames();, +++ b/spring-core/src/main/java/org/springframework/core/env/MapPropertySource.java, + * @author Juergen Hoeller, +, +	public boolean containsProperty(String name) {, +		return this.source.containsKey(name);, +	public String[] getPropertyNames() {, +		return StringUtils.toStringArray(this.source.keySet());, +++ b/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.util.ObjectUtils;, +, +	 * Return {@link true} if a property with the given name or any underscore/uppercase variant, +	 * This implementation returns {@code true} if a property with the given name or, +		Assert.notNull(name, "Property name must not be null");, +		if (ObjectUtils.containsElement(getPropertyNames(), name)) {, +		if (!name.equals(usName) && ObjectUtils.containsElement(getPropertyNames(), usName)) {, +			if (ObjectUtils.containsElement(getPropertyNames(), ucName)) {, +				if (!ucName.equals(usUcName) && ObjectUtils.containsElement(getPropertyNames(), usUcName)) {, +]