[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/AbstractMultiCheckedElementTag.java, + * @author Scott Andrews, +		Class<?> boundType = getBindStatus().getValueType();, +		if (itemsObject == null && boundType != null && boundType.isEnum()) {, +			itemsObject = boundType.getEnumConstants();, +		}, +		, +		Object renderValue;, +		if (valueProperty != null) {, +			renderValue = wrapper.getPropertyValue(valueProperty);, +		} , +		else if (item instanceof Enum) {, +			renderValue = ((Enum<?>) item).name();, +		} , +		else {, +			renderValue = item;, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/AbstractMultiCheckedElementTag.java, + * @author Scott Andrews, +		Class<?> boundType = getBindStatus().getValueType();, +		if (itemsObject == null && boundType != null && boundType.isEnum()) {, +			itemsObject = boundType.getEnumConstants();, +		}, +		, +		Object renderValue;, +		if (valueProperty != null) {, +			renderValue = wrapper.getPropertyValue(valueProperty);, +		} , +		else if (item instanceof Enum) {, +			renderValue = ((Enum<?>) item).name();, +		} , +		else {, +			renderValue = item;, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/OptionWriter.java, + * the corresponding array/{@link Collection} element is used instead.  However, , + * if the item is an enum, {@link Enum#name()} is used as the default value., + * @author Scott Andrews, +		else if (this.optionSource instanceof Class && this.optionSource.getClass().isEnum()) {, +			renderFromEnum(tagWriter);, +		}, +	 * Renders the inner '<code>option</code>' tags using the {@link #optionSource}., +	 * @see #doRenderFromCollection(java.util.Collection, TagWriter), +	 */, +	private void renderFromEnum(final TagWriter tagWriter) throws JspException {, +		doRenderFromCollection(CollectionUtils.arrayToList(((Class) this.optionSource).getEnumConstants()), tagWriter);, +	}, +, +	/**, +			Object value;, +			if (this.valueProperty != null) {, +				value = wrapper.getPropertyValue(this.valueProperty);, +			} , +			else if (item instanceof Enum) {, +				value = ((Enum<?>) item).name();, +			} , +			else {, +				value = item;, +			}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/AbstractMultiCheckedElementTag.java, + * @author Scott Andrews, +		Class<?> boundType = getBindStatus().getValueType();, +		if (itemsObject == null && boundType != null && boundType.isEnum()) {, +			itemsObject = boundType.getEnumConstants();, +		}, +		, +		Object renderValue;, +		if (valueProperty != null) {, +			renderValue = wrapper.getPropertyValue(valueProperty);, +		} , +		else if (item instanceof Enum) {, +			renderValue = ((Enum<?>) item).name();, +		} , +		else {, +			renderValue = item;, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/OptionWriter.java, + * the corresponding array/{@link Collection} element is used instead.  However, , + * if the item is an enum, {@link Enum#name()} is used as the default value., + * @author Scott Andrews, +		else if (this.optionSource instanceof Class && this.optionSource.getClass().isEnum()) {, +			renderFromEnum(tagWriter);, +		}, +	 * Renders the inner '<code>option</code>' tags using the {@link #optionSource}., +	 * @see #doRenderFromCollection(java.util.Collection, TagWriter), +	 */, +	private void renderFromEnum(final TagWriter tagWriter) throws JspException {, +		doRenderFromCollection(CollectionUtils.arrayToList(((Class) this.optionSource).getEnumConstants()), tagWriter);, +	}, +, +	/**, +			Object value;, +			if (this.valueProperty != null) {, +				value = wrapper.getPropertyValue(this.valueProperty);, +			} , +			else if (item instanceof Enum) {, +				value = ((Enum<?>) item).name();, +			} , +			else {, +				value = item;]