[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/ProducesRequestCondition.java, +		for (ProduceMediaTypeExpression expression : getContent()) {, +	protected List<ProduceMediaTypeExpression> getContent() {, +		return this.expressions.isEmpty() ? DEFAULT_EXPRESSIONS : this.expressions;, +	 * Compares this and another "produces" condition as follows:, +	 * 	<li>Sort 'Accept' header media types by quality value via, +	 * 	{@link MediaType#sortByQualityValue(List)} and iterate the list., +	 * 	<li>Get the lowest index of matching media types from each "produces" , +	 * 	condition first matching with {@link MediaType#equals(Object)} and , +	 * 	then with {@link MediaType#includes(MediaType)}., +	 *  <li>If a lower index is found, the "produces" condition wins., +	 *  <li>If both indexes are equal, the media types at the index are , +	 *  compared further with {@link MediaType#SPECIFICITY_COMPARATOR}., +		List<MediaType> acceptedMediaTypes = getAcceptedMediaTypes(request);, +			int thisIndex = this.indexOfEqualMediaType(acceptedMediaType);, +			int otherIndex = other.indexOfEqualMediaType(acceptedMediaType);, +			int result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex);, +			thisIndex = this.indexOfIncludedMediaType(acceptedMediaType);, +			otherIndex = other.indexOfIncludedMediaType(acceptedMediaType);, +			result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex);, +			if (result != 0) {, +				return result;, +	private static List<MediaType> getAcceptedMediaTypes(HttpServletRequest request) {, +		String acceptHeader = request.getHeader("Accept");, +		if (StringUtils.hasLength(acceptHeader)) {, +			return MediaType.parseMediaTypes(acceptHeader);, +		}, +		else {, +			return Collections.singletonList(MediaType.ALL);, +		}, +	}, +	, +	private int indexOfEqualMediaType(MediaType mediaType) {, +		for (int i = 0; i < getContent().size(); i++) {, +			if (mediaType.equals(getContent().get(i).getMediaType())) {, +	private int indexOfIncludedMediaType(MediaType mediaType) {, +		for (int i = 0; i < getContent().size(); i++) {, +			if (mediaType.includes(getContent().get(i).getMediaType())) {, +				return i;, +		}, +		return -1;, +	}, +, +	private static int compareMatchingMediaTypes(ProducesRequestCondition condition1, int index1,, +												 ProducesRequestCondition condition2, int index2) {, +		int result = 0;, +		if (index1 != index2) {, +			result = index2 - index1;, +		}, +		else if (index1 != -1 && index2 != -1) {, +			ProduceMediaTypeExpression expr1 = condition1.getContent().get(index1);, +			ProduceMediaTypeExpression expr2 = condition2.getContent().get(index2);, +			result = expr1.compareTo(expr2);, +			result = (result != 0) ? result : expr1.getMediaType().compareTo(expr2.getMediaType());, +		}, +		return result;, +	}, +, +	private static final List<ProduceMediaTypeExpression> DEFAULT_EXPRESSIONS = , +		Collections.singletonList(new ProduceMediaTypeExpression("*/*"));, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/ProducesRequestCondition.java, +		for (ProduceMediaTypeExpression expression : getContent()) {, +	protected List<ProduceMediaTypeExpression> getContent() {, +		return this.expressions.isEmpty() ? DEFAULT_EXPRESSIONS : this.expressions;, +	 * Compares this and another "produces" condition as follows:, +	 * 	<li>Sort 'Accept' header media types by quality value via, +	 * 	{@link MediaType#sortByQualityValue(List)} and iterate the list., +	 * 	<li>Get the lowest index of matching media types from each "produces" , +	 * 	condition first matching with {@link MediaType#equals(Object)} and , +	 * 	then with {@link MediaType#includes(MediaType)}., +	 *  <li>If a lower index is found, the "produces" condition wins., +	 *  <li>If both indexes are equal, the media types at the index are , +	 *  compared further with {@link MediaType#SPECIFICITY_COMPARATOR}., +		List<MediaType> acceptedMediaTypes = getAcceptedMediaTypes(request);, +			int thisIndex = this.indexOfEqualMediaType(acceptedMediaType);, +			int otherIndex = other.indexOfEqualMediaType(acceptedMediaType);, +			int result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex);, +			thisIndex = this.indexOfIncludedMediaType(acceptedMediaType);, +			otherIndex = other.indexOfIncludedMediaType(acceptedMediaType);, +			result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex);, +			if (result != 0) {, +				return result;, +	private static List<MediaType> getAcceptedMediaTypes(HttpServletRequest request) {, +		String acceptHeader = request.getHeader("Accept");, +		if (StringUtils.hasLength(acceptHeader)) {, +			return MediaType.parseMediaTypes(acceptHeader);, +		}, +		else {, +			return Collections.singletonList(MediaType.ALL);, +		}, +	}, +	, +	private int indexOfEqualMediaType(MediaType mediaType) {, +		for (int i = 0; i < getContent().size(); i++) {, +			if (mediaType.equals(getContent().get(i).getMediaType())) {, +	private int indexOfIncludedMediaType(MediaType mediaType) {, +		for (int i = 0; i < getContent().size(); i++) {, +			if (mediaType.includes(getContent().get(i).getMediaType())) {, +				return i;, +		}]