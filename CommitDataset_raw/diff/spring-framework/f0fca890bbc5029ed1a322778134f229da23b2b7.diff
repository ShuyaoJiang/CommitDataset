[+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheEvaluationContext.java, +import org.springframework.context.expression.MethodBasedEvaluationContext;, +class CacheEvaluationContext extends MethodBasedEvaluationContext {, +	CacheEvaluationContext(Object rootObject, Method method, Object[] args,, +			ParameterNameDiscoverer paramDiscoverer) {, +		super(rootObject, method, args, paramDiscoverer);, +		return super.lookupVariable(name);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheEvaluationContext.java, +import org.springframework.context.expression.MethodBasedEvaluationContext;, +class CacheEvaluationContext extends MethodBasedEvaluationContext {, +	CacheEvaluationContext(Object rootObject, Method method, Object[] args,, +			ParameterNameDiscoverer paramDiscoverer) {, +		super(rootObject, method, args, paramDiscoverer);, +		return super.lookupVariable(name);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/ExpressionEvaluator.java, +import org.springframework.aop.support.AopUtils;, +		Method targetMethod = getTargetMethod(targetClass, method);, +				targetMethod, args, this.paramNameDiscoverer);, +	private Method getTargetMethod(Class<?> targetClass, Method method) {, +		AnnotatedElementKey methodKey = new AnnotatedElementKey(method, targetClass);, +		Method targetMethod = this.targetMethodCache.get(methodKey);, +		if (targetMethod == null) {, +			targetMethod = AopUtils.getMostSpecificMethod(method, targetClass);, +			if (targetMethod == null) {, +				targetMethod = method;, +			}, +			this.targetMethodCache.put(methodKey, targetMethod);, +		}, +		return targetMethod;, +	}, +, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheEvaluationContext.java, +import org.springframework.context.expression.MethodBasedEvaluationContext;, +class CacheEvaluationContext extends MethodBasedEvaluationContext {, +	CacheEvaluationContext(Object rootObject, Method method, Object[] args,, +			ParameterNameDiscoverer paramDiscoverer) {, +		super(rootObject, method, args, paramDiscoverer);, +		return super.lookupVariable(name);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/ExpressionEvaluator.java, +import org.springframework.aop.support.AopUtils;, +		Method targetMethod = getTargetMethod(targetClass, method);, +				targetMethod, args, this.paramNameDiscoverer);, +	private Method getTargetMethod(Class<?> targetClass, Method method) {, +		AnnotatedElementKey methodKey = new AnnotatedElementKey(method, targetClass);, +		Method targetMethod = this.targetMethodCache.get(methodKey);, +		if (targetMethod == null) {, +			targetMethod = AopUtils.getMostSpecificMethod(method, targetClass);, +			if (targetMethod == null) {, +				targetMethod = method;, +			}, +			this.targetMethodCache.put(methodKey, targetMethod);, +		}, +		return targetMethod;, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/ApplicationEventPublisher.java, + * @author Stephane Nicoll, +	/**, +	 * Notify all <strong>matching</strong> listeners registered with this, +	 * application of an event., +	 * <p>If the specified {@code event} is not an {@link ApplicationEvent}, it, +	 * is wrapped in a {@code GenericApplicationEvent}., +	 * @param event the event to publish, +	 * @see PayloadApplicationEvent, +	 */, +	void publishEvent(Object event);, +, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheEvaluationContext.java, +import org.springframework.context.expression.MethodBasedEvaluationContext;, +class CacheEvaluationContext extends MethodBasedEvaluationContext {, +	CacheEvaluationContext(Object rootObject, Method method, Object[] args,, +			ParameterNameDiscoverer paramDiscoverer) {, +		super(rootObject, method, args, paramDiscoverer);, +		return super.lookupVariable(name);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/ExpressionEvaluator.java, +import org.springframework.aop.support.AopUtils;, +		Method targetMethod = getTargetMethod(targetClass, method);, +				targetMethod, args, this.paramNameDiscoverer);, +	private Method getTargetMethod(Class<?> targetClass, Method method) {, +		AnnotatedElementKey methodKey = new AnnotatedElementKey(method, targetClass);, +		Method targetMethod = this.targetMethodCache.get(methodKey);, +		if (targetMethod == null) {, +			targetMethod = AopUtils.getMostSpecificMethod(method, targetClass);, +			if (targetMethod == null) {, +				targetMethod = method;, +			}, +			this.targetMethodCache.put(methodKey, targetMethod);, +		}, +		return targetMethod;, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/ApplicationEventPublisher.java, + * @author Stephane Nicoll, +	/**, +	 * Notify all <strong>matching</strong> listeners registered with this, +	 * application of an event., +	 * <p>If the specified {@code event} is not an {@link ApplicationEvent}, it, +	 * is wrapped in a {@code GenericApplicationEvent}., +	 * @param event the event to publish, +	 * @see PayloadApplicationEvent]