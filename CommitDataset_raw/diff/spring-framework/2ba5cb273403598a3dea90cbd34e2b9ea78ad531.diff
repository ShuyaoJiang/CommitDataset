[+++ b/spring-beans/src/main/java/org/springframework/beans/annotation/AnnotationBeanUtils.java, + * Copyright 2002-2015 the original author or authors., +			if (!excluded.contains(propertyName) && bw.isWritableProperty(propertyName)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/annotation/AnnotationBeanUtils.java, + * Copyright 2002-2015 the original author or authors., +			if (!excluded.contains(propertyName) && bw.isWritableProperty(propertyName)) {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.context.ApplicationContext;, +		ApplicationContext context = new AnnotationConfigApplicationContext(Config.class);, +		ApplicationContext context = new AnnotationConfigApplicationContext(Config.class);, +		ApplicationContext context = new AnnotationConfigApplicationContext(Config.class);, +		ApplicationContext context = new AnnotationConfigApplicationContext(ConfigWithCustomName.class);, +		ConfigWithCustomName configObject = (ConfigWithCustomName) context.getBean("customConfigBeanName");, +		ApplicationContext context = new AnnotationConfigApplicationContext(Config.class);, +		ApplicationContext context = new AnnotationConfigApplicationContext(TwoTestBeanConfig.class);, +		ApplicationContext context = new AnnotationConfigApplicationContext(AutowiredConfig.class);, +, +		result = prime * result + (name == null ? 0 : name.hashCode());, +		}, +		else if (!name.equals(other.name)), +++ b/spring-beans/src/main/java/org/springframework/beans/annotation/AnnotationBeanUtils.java, + * Copyright 2002-2015 the original author or authors., +			if (!excluded.contains(propertyName) && bw.isWritableProperty(propertyName)) {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.context.ApplicationContext;, +		ApplicationContext context = new AnnotationConfigApplicationContext(Config.class);, +		ApplicationContext context = new AnnotationConfigApplicationContext(Config.class);, +		ApplicationContext context = new AnnotationConfigApplicationContext(Config.class);, +		ApplicationContext context = new AnnotationConfigApplicationContext(ConfigWithCustomName.class);, +		ConfigWithCustomName configObject = (ConfigWithCustomName) context.getBean("customConfigBeanName");, +		ApplicationContext context = new AnnotationConfigApplicationContext(Config.class);, +		ApplicationContext context = new AnnotationConfigApplicationContext(TwoTestBeanConfig.class);, +		ApplicationContext context = new AnnotationConfigApplicationContext(AutowiredConfig.class);, +, +		result = prime * result + (name == null ? 0 : name.hashCode());, +		}, +		else if (!name.equals(other.name)), +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	private static final Map<Class<?>, Boolean> annotatedInterfaceCache =, +			new ConcurrentReferenceHashMap<Class<?>, Boolean>(256);, +, +		Assert.notEmpty(annotationTypes, "List of annotation types must not be empty");, +				if (mergeMode && defaultValue != null) {, +++ b/spring-beans/src/main/java/org/springframework/beans/annotation/AnnotationBeanUtils.java, + * Copyright 2002-2015 the original author or authors., +			if (!excluded.contains(propertyName) && bw.isWritableProperty(propertyName)) {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.context.ApplicationContext;, +		ApplicationContext context = new AnnotationConfigApplicationContext(Config.class);, +		ApplicationContext context = new AnnotationConfigApplicationContext(Config.class);, +		ApplicationContext context = new AnnotationConfigApplicationContext(Config.class);, +		ApplicationContext context = new AnnotationConfigApplicationContext(ConfigWithCustomName.class);, +		ConfigWithCustomName configObject = (ConfigWithCustomName) context.getBean("customConfigBeanName");, +		ApplicationContext context = new AnnotationConfigApplicationContext(Config.class);, +		ApplicationContext context = new AnnotationConfigApplicationContext(TwoTestBeanConfig.class);, +		ApplicationContext context = new AnnotationConfigApplicationContext(AutowiredConfig.class);, +, +		result = prime * result + (name == null ? 0 : name.hashCode());, +		}, +		else if (!name.equals(other.name)), +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	private static final Map<Class<?>, Boolean> annotatedInterfaceCache =, +			new ConcurrentReferenceHashMap<Class<?>, Boolean>(256);, +, +		Assert.notEmpty(annotationTypes, "List of annotation types must not be empty");, +				if (mergeMode && defaultValue != null) {, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java, +, +		Set<String> names = getMetaAnnotationTypes(ComposedTransactionalComponentClass.class, ComposedTransactionalComponent.class);]