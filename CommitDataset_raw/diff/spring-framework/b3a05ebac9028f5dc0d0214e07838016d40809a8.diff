[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java, +import reactor.util.context.Context;, +	private final class WriteWithBarrier , +			implements Publisher<T>, CoreSubscriber<T>, Subscription {, +, +		private final CoreSubscriber<? super Void> subscriber;, +, +		@Nullable, +		private Subscription subscription;, +		WriteWithBarrier(CoreSubscriber<? super Void> subscriber) {, +			this.subscriber = subscriber;, +		public void cancel() {, +			Subscription s = this.subscription;, +			if (s != null) {, +				this.subscription = null;, +				s.cancel();, +			}, +		public Context currentContext() {, +			return subscriber.currentContext();, +		}, +, +		@Override, +		public final void onComplete() {, +				obtainWriteSubscriber().onComplete();, +					obtainWriteSubscriber().onComplete();, +					this.completed = true;, +					writeFunction.apply(this).subscribe(new DownstreamBridge(subscriber));, +					this.completed = true;, +		public final void onError(Throwable ex) {, +					subscriber.onError(ex);, +		public final void onNext(T item) {, +				obtainWriteSubscriber().onNext(item);, +			//FIXME revisit in case of reentrant sync deadlock, +					obtainWriteSubscriber().onNext(item);, +					this.item = item;, +					writeFunction.apply(this).subscribe(new DownstreamBridge(subscriber));, +					if (this.subscription != null) {, +						this.subscription.cancel();, +					subscriber.onError(new IllegalStateException("Unexpected item."));, +				}, +			}, +		}, +, +		@Override, +		public final void onSubscribe(Subscription s) {, +			if (Operators.validate(this.subscription, s)) {, +				this.subscription = s;, +				this.subscriber.onSubscribe(this);, +				s.request(1);  // bypass doRequest, +		public void request(long n) {, +			Subscription s = this.subscription;, +			if (s == null) {, +				return;, +			}, +				s.request(n);, +			s.request(n);, +	private class DownstreamBridge implements CoreSubscriber<Void> {, +		private final CoreSubscriber<? super Void> downstream;, +		public DownstreamBridge(CoreSubscriber<? super Void> downstream) {, +, +		@Override, +		public Context currentContext() {, +			return downstream.currentContext();, +		}]