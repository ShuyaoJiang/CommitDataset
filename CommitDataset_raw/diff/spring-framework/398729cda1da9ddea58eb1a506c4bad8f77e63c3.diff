[+++ b/org.springframework.web.servlet/ivy.xml, +		<conf name="jackson" extends="runtime" description="JARs needed to use the Jackson JSON View"/>, +		<dependency org="org.codehaus.jackson" name="com.springsource.org.codehaus.jackson.mapper" rev="1.0.0", +                    conf="optional, jackson->compile"/>, +		<dependency org="org.springframework" name="org.springframework.asm" rev="latest.integration", +                    conf="test->compile"/>, +		<dependency org="org.mozilla.javascript" name="com.springsource.org.mozilla.javascript" rev="1.7.0.R2", +                    conf="test->runtime"/>, +++ b/org.springframework.web.servlet/ivy.xml, +		<conf name="jackson" extends="runtime" description="JARs needed to use the Jackson JSON View"/>, +		<dependency org="org.codehaus.jackson" name="com.springsource.org.codehaus.jackson.mapper" rev="1.0.0", +                    conf="optional, jackson->compile"/>, +		<dependency org="org.springframework" name="org.springframework.asm" rev="latest.integration", +                    conf="test->compile"/>, +		<dependency org="org.mozilla.javascript" name="com.springsource.org.mozilla.javascript" rev="1.7.0.R2", +                    conf="test->runtime"/>, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/json/BindingJacksonJsonView.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.servlet.view.json;, +, +import java.util.HashMap;, +import java.util.Map;, +import java.util.Set;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +, +import org.codehaus.jackson.JsonEncoding;, +import org.codehaus.jackson.JsonGenerator;, +import org.codehaus.jackson.map.ObjectMapper;, +import org.codehaus.jackson.map.SerializerFactory;, +, +import org.springframework.util.Assert;, +import org.springframework.util.CollectionUtils;, +import org.springframework.validation.BindingResult;, +import org.springframework.web.servlet.View;, +import org.springframework.web.servlet.view.AbstractView;, +, +/**, + * Spring-MVC {@link View} that renders JSON content by serializing the model for the current request using <a, + * href="http://jackson.codehaus.org/">Jackson's</a> {@link ObjectMapper}., + *, + * <p>By default, the entire contents of the model map (with the exception of framework-specific classes) will be, + * encoded as JSON. For cases where the contents of the map need to be filtered, users may specify a specific set of, + * model attributes to encode via the {@link #setRenderedAttributes(Set) includeAttributes} property., + *, + * @author Jeremy Grelle, + * @author Arjen Poutsma, + * @see org.springframework.http.converter.json.BindingJacksonHttpMessageConverter, + * @since 3.0, + */, +public class BindingJacksonJsonView extends AbstractView {, +, +	/**, +	 * Default content type. Overridable as bean property., +	 */, +	public static final String DEFAULT_CONTENT_TYPE = "application/json";, +, +	private ObjectMapper objectMapper = new ObjectMapper();, +, +	private JsonEncoding encoding = JsonEncoding.UTF8;, +, +	private boolean prefixJson = false;, +, +	private Set<String> renderedAttributes;, +, +	/**, +	 * Construct a new {@code JacksonJsonView}, setting the content type to {@code application/json}., +	 */, +	public BindingJacksonJsonView() {, +		setContentType(DEFAULT_CONTENT_TYPE);, +	}, +, +	/**, +	 * Sets the {@code ObjectMapper} for this view. If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper}, +	 * is used., +	 *, +	 * <p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of the JSON serialization, +	 * process. For example, an extended {@link SerializerFactory} can be configured that provides custom serializers for, +	 * specific types. The other option for refining the serialization process is to use Jackson's provided annotations on, +	 * the types to be serialized, in which case a custom-configured ObjectMapper is unnecessary., +	 */, +	public void setObjectMapper(ObjectMapper objectMapper) {, +		Assert.notNull(objectMapper, "'objectMapper' must not be null");, +		this.objectMapper = objectMapper;, +	}]