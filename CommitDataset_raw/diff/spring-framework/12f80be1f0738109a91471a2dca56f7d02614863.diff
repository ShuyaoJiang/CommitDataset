[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java, +import org.reactivestreams.Subscriber;, +import org.reactivestreams.Subscription;, +import reactor.core.publisher.MonoProcessor;, + * <p>Also an implementation of {@link Subscriber<Void>} so it can be used as, + * the completion subscriber for session handling, + *, +public abstract class AbstractListenerWebSocketSession<T> extends AbstractWebSocketSession<T>, +		implements Subscriber<Void> {, +	private final MonoProcessor<Void> completionMono;, +, +	/**, +	 * Base constructor., + 	 * @param delegate the native WebSocket session, channel, or connection, +	 * @param id the session id, +	 * @param handshakeInfo the handshake info, +	 * @param bufferFactory the DataBuffer factor for the current connection, +	 */, +		this(delegate, id, handshakeInfo, bufferFactory, null);, +	}, +, +	/**, +	 * Alternative constructor with completion {@link Mono<Void>} to propagate, +	 * the session completion (success or error) (for client-side use)., +	 */, +	public AbstractListenerWebSocketSession(T delegate, String id, HandshakeInfo handshakeInfo,, +			DataBufferFactory bufferFactory, MonoProcessor<Void> completionMono) {, +, +		this.completionMono = completionMono;, +	// Subscriber<Void> implementation, +, +	@Override, +	public void onSubscribe(Subscription subscription) {, +		subscription.request(Long.MAX_VALUE);, +	}, +, +	@Override, +	public void onNext(Void aVoid) {, +		// no op, +	}, +, +	@Override, +	public void onError(Throwable ex) {, +		if (this.completionMono != null) {, +			this.completionMono.onError(ex);, +		}, +		int code = CloseStatus.SERVER_ERROR.getCode();, +		close(new CloseStatus(code, ex.getMessage()));, +	}, +, +	@Override, +	public void onComplete() {, +		if (this.completionMono != null) {, +			this.completionMono.onComplete();, +		}, +		close();, +	}, +, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java, +import org.reactivestreams.Subscriber;, +import org.reactivestreams.Subscription;, +import reactor.core.publisher.MonoProcessor;, + * <p>Also an implementation of {@link Subscriber<Void>} so it can be used as, + * the completion subscriber for session handling, + *, +public abstract class AbstractListenerWebSocketSession<T> extends AbstractWebSocketSession<T>, +		implements Subscriber<Void> {, +	private final MonoProcessor<Void> completionMono;, +, +	/**, +	 * Base constructor., + 	 * @param delegate the native WebSocket session, channel, or connection, +	 * @param id the session id, +	 * @param handshakeInfo the handshake info, +	 * @param bufferFactory the DataBuffer factor for the current connection, +	 */, +		this(delegate, id, handshakeInfo, bufferFactory, null);, +	}, +, +	/**, +	 * Alternative constructor with completion {@link Mono<Void>} to propagate, +	 * the session completion (success or error) (for client-side use)., +	 */, +	public AbstractListenerWebSocketSession(T delegate, String id, HandshakeInfo handshakeInfo,, +			DataBufferFactory bufferFactory, MonoProcessor<Void> completionMono) {, +, +		this.completionMono = completionMono;, +	// Subscriber<Void> implementation, +, +	@Override, +	public void onSubscribe(Subscription subscription) {, +		subscription.request(Long.MAX_VALUE);, +	}, +, +	@Override, +	public void onNext(Void aVoid) {, +		// no op, +	}, +]