[+++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageWriter.java, +import java.util.HashMap;, +	/**, +	 * Server-Sent Events hint expecting a {@link Boolean} value which when set to true, +	 * will adapt the content in order to comply with Server-Sent Events recommendation., +	 * For example, it will append "data:" after each line break with data encoders, +	 * supporting it., +	 * @see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>, +	 */, +	public static final String SSE_CONTENT_HINT = ServerSentEventHttpMessageWriter.class.getName() + ".sseContent";, +, +, +		Map<String, Object> hintsWithSse = new HashMap<>(hints);, +		hintsWithSse.put(SSE_CONTENT_HINT, true);, +									return applyEncoder(data, bufferFactory, hintsWithSse);, +++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageWriter.java, +import java.util.HashMap;, +	/**, +	 * Server-Sent Events hint expecting a {@link Boolean} value which when set to true, +	 * will adapt the content in order to comply with Server-Sent Events recommendation., +	 * For example, it will append "data:" after each line break with data encoders, +	 * supporting it., +	 * @see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>, +	 */, +	public static final String SSE_CONTENT_HINT = ServerSentEventHttpMessageWriter.class.getName() + ".sseContent";, +, +, +		Map<String, Object> hintsWithSse = new HashMap<>(hints);, +		hintsWithSse.put(SSE_CONTENT_HINT, true);, +									return applyEncoder(data, bufferFactory, hintsWithSse);, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonEncoder.java, +import com.fasterxml.jackson.core.PrettyPrinter;, +import com.fasterxml.jackson.core.util.DefaultIndenter;, +import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;, +import com.fasterxml.jackson.databind.SerializationConfig;, +import com.fasterxml.jackson.databind.SerializationFeature;, +import org.springframework.http.codec.ServerSentEventHttpMessageWriter;, +	private final PrettyPrinter ssePrettyPrinter;, +, +, +		this(Jackson2ObjectMapperBuilder.json().build());, +		DefaultPrettyPrinter prettyPrinter = new DefaultPrettyPrinter();, +		prettyPrinter.indentObjectsWith(new DefaultIndenter("  ", "\ndata:"));, +		this.ssePrettyPrinter = prettyPrinter;, +		Boolean sse = (Boolean)hints.get(ServerSentEventHttpMessageWriter.SSE_CONTENT_HINT);, +		SerializationConfig config = writer.getConfig();, +		if (Boolean.TRUE.equals(sse) && config.isEnabled(SerializationFeature.INDENT_OUTPUT)) {, +			writer = writer.with(this.ssePrettyPrinter);, +		}, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageWriter.java, +import java.util.HashMap;, +	/**, +	 * Server-Sent Events hint expecting a {@link Boolean} value which when set to true, +	 * will adapt the content in order to comply with Server-Sent Events recommendation., +	 * For example, it will append "data:" after each line break with data encoders, +	 * supporting it., +	 * @see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>, +	 */, +	public static final String SSE_CONTENT_HINT = ServerSentEventHttpMessageWriter.class.getName() + ".sseContent";, +, +, +		Map<String, Object> hintsWithSse = new HashMap<>(hints);, +		hintsWithSse.put(SSE_CONTENT_HINT, true);, +									return applyEncoder(data, bufferFactory, hintsWithSse);, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonEncoder.java, +import com.fasterxml.jackson.core.PrettyPrinter;, +import com.fasterxml.jackson.core.util.DefaultIndenter;, +import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;, +import com.fasterxml.jackson.databind.SerializationConfig;, +import com.fasterxml.jackson.databind.SerializationFeature;, +import org.springframework.http.codec.ServerSentEventHttpMessageWriter;, +	private final PrettyPrinter ssePrettyPrinter;, +, +, +		this(Jackson2ObjectMapperBuilder.json().build());, +		DefaultPrettyPrinter prettyPrinter = new DefaultPrettyPrinter();, +		prettyPrinter.indentObjectsWith(new DefaultIndenter("  ", "\ndata:"));, +		this.ssePrettyPrinter = prettyPrinter;, +		Boolean sse = (Boolean)hints.get(ServerSentEventHttpMessageWriter.SSE_CONTENT_HINT);, +		SerializationConfig config = writer.getConfig();, +		if (Boolean.TRUE.equals(sse) && config.isEnabled(SerializationFeature.INDENT_OUTPUT)) {, +			writer = writer.with(this.ssePrettyPrinter);, +		}, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java, +import com.fasterxml.jackson.core.PrettyPrinter;, +import com.fasterxml.jackson.core.util.DefaultIndenter;, +import com.fasterxml.jackson.databind.SerializationConfig;, +	private PrettyPrinter ssePrettyPrinter;, +, +		init(objectMapper);, +		init(objectMapper);, +		init(objectMapper);, +	}, +, +	protected void init(ObjectMapper objectMapper) {, +		DefaultPrettyPrinter prettyPrinter = new DefaultPrettyPrinter();, +		prettyPrinter.indentObjectsWith(new DefaultIndenter("  ", "\ndata:"));, +		this.ssePrettyPrinter = prettyPrinter;]