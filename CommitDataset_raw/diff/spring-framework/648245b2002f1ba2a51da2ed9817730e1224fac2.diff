[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/xml/MarshallingView.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.util.StreamUtils;, + * Spring-MVC {@link View} that allows for response context to be rendered as the result, + * of marshalling by a {@link Marshaller}., + * <p>The Object to be marshalled is supplied as a parameter in the model and then, + * {@linkplain #locateToBeMarshalled(Map) detected} during response rendering. Users can, + * either specify a specific entry in the model via the {@link #setModelKey(String) sourceKey}, + * property or have Spring locate the Source object., +, +, +	 * Constructs a new {@code MarshallingView} with no {@link Marshaller} set., +	 * The marshaller must be set after construction by invoking {@link #setMarshaller}., +		this();, +		setMarshaller(marshaller);, +, +		Assert.notNull(marshaller, "Marshaller must not be null");, +	 * Set the name of the model key that represents the object to be marshalled., +	 * If not specified, the model map will be searched for a supported value type., +	protected void initApplicationContext() {, +		Assert.notNull(this.marshaller, "Property 'marshaller' is required");, +, +	protected void renderMergedOutputModel(Map<String, Object> model, HttpServletRequest request,, +, +			throw new IllegalStateException("Unable to locate object to be marshalled in model: " + model);, +		this.marshaller.marshal(toBeMarshalled, new StreamResult(bos));, +		StreamUtils.copy(bos.toByteArray(), response.getOutputStream());, +	 * Locates the object to be marshalled. The default implementation first attempts to look, +	 * under the configured {@linkplain #setModelKey(String) model key}, if any, before attempting, +	 * to locate an object of {@linkplain Marshaller#supports(Class) supported type}., +	 * @throws IllegalStateException if the model object specified by the, +	 * {@linkplain #setModelKey(String) model key} is not supported by the marshaller, +	protected Object locateToBeMarshalled(Map<String, Object> model) throws IllegalStateException {, +			Object obj = model.get(this.modelKey);, +			if (obj == null) {, +				throw new IllegalStateException("Model contains no object with key [" + this.modelKey + "]");, +			if (!this.marshaller.supports(obj.getClass())) {, +				throw new IllegalStateException("Model object [" + obj + "] retrieved via key [" +, +						this.modelKey + "] is not supported by the Marshaller");, +			return obj;, +		for (Object obj : model.values()) {, +			if (obj != null && this.marshaller.supports(obj.getClass())) {, +				return obj;, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/xml/MarshallingView.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.util.StreamUtils;, + * Spring-MVC {@link View} that allows for response context to be rendered as the result, + * of marshalling by a {@link Marshaller}., + * <p>The Object to be marshalled is supplied as a parameter in the model and then, + * {@linkplain #locateToBeMarshalled(Map) detected} during response rendering. Users can, + * either specify a specific entry in the model via the {@link #setModelKey(String) sourceKey}, + * property or have Spring locate the Source object., +, +, +	 * Constructs a new {@code MarshallingView} with no {@link Marshaller} set., +	 * The marshaller must be set after construction by invoking {@link #setMarshaller}., +		this();, +		setMarshaller(marshaller);, +, +		Assert.notNull(marshaller, "Marshaller must not be null");, +	 * Set the name of the model key that represents the object to be marshalled., +	 * If not specified, the model map will be searched for a supported value type., +	protected void initApplicationContext() {, +		Assert.notNull(this.marshaller, "Property 'marshaller' is required");, +, +	protected void renderMergedOutputModel(Map<String, Object> model, HttpServletRequest request,, +, +			throw new IllegalStateException("Unable to locate object to be marshalled in model: " + model);, +		this.marshaller.marshal(toBeMarshalled, new StreamResult(bos));, +		StreamUtils.copy(bos.toByteArray(), response.getOutputStream());, +	 * Locates the object to be marshalled. The default implementation first attempts to look, +	 * under the configured {@linkplain #setModelKey(String) model key}, if any, before attempting, +	 * to locate an object of {@linkplain Marshaller#supports(Class) supported type}., +	 * @throws IllegalStateException if the model object specified by the, +	 * {@linkplain #setModelKey(String) model key} is not supported by the marshaller, +	protected Object locateToBeMarshalled(Map<String, Object> model) throws IllegalStateException {, +			Object obj = model.get(this.modelKey);, +			if (obj == null) {, +				throw new IllegalStateException("Model contains no object with key [" + this.modelKey + "]");, +			if (!this.marshaller.supports(obj.getClass())) {, +				throw new IllegalStateException("Model object [" + obj + "] retrieved via key [" +, +						this.modelKey + "] is not supported by the Marshaller");, +			return obj;, +		for (Object obj : model.values()) {, +			if (obj != null && this.marshaller.supports(obj.getClass())) {, +				return obj;, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/xml/MarshallingViewTests.java, + * Copyright 2002-2014 the original author or authors., +, +			fail("IllegalStateException expected");, +		catch (IllegalStateException ex) {, +			fail("IllegalStateException expected");, +		catch (IllegalStateException ex) {, +			fail("IllegalStateException expected");, +		catch (IllegalStateException ex) {, +			fail("IllegalStateException expected");, +		catch (IllegalStateException ex) {]