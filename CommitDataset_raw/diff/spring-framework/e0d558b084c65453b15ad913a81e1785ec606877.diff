[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.beans.TypeMismatchException;, +			try {, +				return getTypeConverter().convertIfNecessary(bean, requiredType);, +			}, +			catch (TypeMismatchException ex) {, +				if (logger.isDebugEnabled()) {, +					logger.debug("Failed to convert bean '" + name + "' to required type [" +, +							ClassUtils.getQualifiedName(requiredType) + "]", ex);, +				}, +		}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.beans.TypeMismatchException;, +			try {, +				return getTypeConverter().convertIfNecessary(bean, requiredType);, +			}, +			catch (TypeMismatchException ex) {, +				if (logger.isDebugEnabled()) {, +					logger.debug("Failed to convert bean '" + name + "' to required type [" +, +							ClassUtils.getQualifiedName(requiredType) + "]", ex);, +				}, +		}, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2011 the original author or authors., +import static org.junit.Assert.*;, +, +		bf.registerBeanDefinition("annotatedBean3", new RootBeanDefinition(ConvertedResourceInjectionBean.class));, +		bf.registerSingleton("value", new Object());, +		ConvertedResourceInjectionBean bean3 = (ConvertedResourceInjectionBean) bf.getBean("annotatedBean3");, +		assertSame(5, bean3.value);, +, +	private static class ConvertedResourceInjectionBean {, +, +		@Resource(name="value"), +		private int value;, +	}, +, +]