[+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +import org.springframework.context.event.DefaultEventListenerFactory;, +	/**, +	 * The bean name of the internally managed EventListenerFactory., +	 */, +	public static final String EVENT_LISTENER_FACTORY_BEAN_NAME =, +			"org.springframework.context.event.internalEventListenerFactory";, +, +		if (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) {, +			RootBeanDefinition def = new RootBeanDefinition(DefaultEventListenerFactory.class);, +			def.setSource(source);, +			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME));, +		}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +import org.springframework.context.event.DefaultEventListenerFactory;, +	/**, +	 * The bean name of the internally managed EventListenerFactory., +	 */, +	public static final String EVENT_LISTENER_FACTORY_BEAN_NAME =, +			"org.springframework.context.event.internalEventListenerFactory";, +, +		if (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) {, +			RootBeanDefinition def = new RootBeanDefinition(DefaultEventListenerFactory.class);, +			def.setSource(source);, +			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME));, +		}, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +import java.lang.annotation.Annotation;, +import org.springframework.core.annotation.AnnotatedElementUtils;, +import org.springframework.core.annotation.AnnotationAttributes;, + * <p>Delegates to {@link #processEvent(ApplicationEvent)} to give a chance to, + * sub-classes to deviate from the default. Unwrap the content of a, + * {@link PayloadApplicationEvent} if necessary to allow method declaration, + * to define any arbitrary event type. If a condition is defined, it is, + * evaluated prior to invoking the underlying method., +	private String condition;, +, +		processEvent(event);, +	}, +, +	/**, +	 * Process the specified {@link ApplicationEvent}, checking if the condition, +	 * match and handling non-null result, if any., +	 */, +	public void processEvent(ApplicationEvent event) {, +		String condition = getCondition();, +		Order order = getMethodAnnotation(Order.class);, +	protected <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {, +		return AnnotationUtils.findAnnotation(this.method, annotationType);, +	}, +, +	 * Return the condition to use. Matches the {@code condition} attribute of the, +	 * {@link EventListener} annotation or any matching attribute on a meta-annotation., +	 */, +	protected String getCondition() {, +		if (this.condition == null) {, +			AnnotationAttributes annotationAttributes = AnnotatedElementUtils, +					.getAnnotationAttributes(this.method, EventListener.class.getName());, +			if (annotationAttributes != null) {, +				String value = annotationAttributes.getString("condition");, +				this.condition = (value != null ? value : "");, +			}, +			else { // TODO annotationAttributes null with proxy, +				EventListener eventListener = getMethodAnnotation(EventListener.class);, +				this.condition = (eventListener != null ? eventListener.condition() : null);, +			}, +		}, +		return this.condition;, +	}, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +import org.springframework.context.event.DefaultEventListenerFactory;, +	/**, +	 * The bean name of the internally managed EventListenerFactory., +	 */, +	public static final String EVENT_LISTENER_FACTORY_BEAN_NAME =, +			"org.springframework.context.event.internalEventListenerFactory";, +, +		if (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) {, +			RootBeanDefinition def = new RootBeanDefinition(DefaultEventListenerFactory.class);, +			def.setSource(source);, +			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME));, +		}, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +import java.lang.annotation.Annotation;, +import org.springframework.core.annotation.AnnotatedElementUtils;, +import org.springframework.core.annotation.AnnotationAttributes;, + * <p>Delegates to {@link #processEvent(ApplicationEvent)} to give a chance to, + * sub-classes to deviate from the default. Unwrap the content of a, + * {@link PayloadApplicationEvent} if necessary to allow method declaration, + * to define any arbitrary event type. If a condition is defined, it is, + * evaluated prior to invoking the underlying method., +	private String condition;, +, +		processEvent(event);, +	}, +, +	/**, +	 * Process the specified {@link ApplicationEvent}, checking if the condition]