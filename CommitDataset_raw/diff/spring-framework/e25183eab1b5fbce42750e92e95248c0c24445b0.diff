[+++ b/spring-oxm/src/main/java/org/springframework/oxm/jibx/JibxMarshaller.java, + * Copyright 2002-2012 the original author or authors., +			return unmarshallingContext.unmarshalDocument(inputStream, encoding);, +++ b/spring-oxm/src/main/java/org/springframework/oxm/jibx/JibxMarshaller.java, + * Copyright 2002-2012 the original author or authors., +			return unmarshallingContext.unmarshalDocument(inputStream, encoding);, +++ b/spring-oxm/src/test/java/org/springframework/oxm/jibx/FlightType.java, + * Copyright 2006-2012 the original author or authors., +	protected String airline;, +, +	public String getAirline() {, +		return this.airline;, +	}, +, +	public void setAirline(String airline) {, +		this.airline = airline;, +	}, +, +++ b/spring-oxm/src/main/java/org/springframework/oxm/jibx/JibxMarshaller.java, + * Copyright 2002-2012 the original author or authors., +			return unmarshallingContext.unmarshalDocument(inputStream, encoding);, +++ b/spring-oxm/src/test/java/org/springframework/oxm/jibx/FlightType.java, + * Copyright 2006-2012 the original author or authors., +	protected String airline;, +, +	public String getAirline() {, +		return this.airline;, +	}, +, +	public void setAirline(String airline) {, +		this.airline = airline;, +	}, +, +++ b/spring-oxm/src/test/java/org/springframework/oxm/jibx/JibxUnmarshallerTests.java, + * Copyright 2002-2012 the original author or authors., +import java.io.ByteArrayInputStream;, +import javax.xml.transform.stream.StreamSource;, +, +import org.junit.Ignore;, +import org.junit.Test;, +import static org.junit.Assert.*;, +, +	protected static final String INPUT_STRING_WITH_SPECIAL_CHARACTERS =, +			"<tns:flights xmlns:tns=\"http://samples.springframework.org/flight\">" +, +					"<tns:flight><tns:airline>Air Liberté</tns:airline><tns:number>42</tns:number></tns:flight></tns:flights>";, +, +	@Test, +	public void unmarshalStreamSourceInputStreamUsingNonDefaultEncoding() throws Exception {, +		String encoding = "ISO-8859-1";, +		((JibxMarshaller)unmarshaller).setEncoding(encoding);, +, +		StreamSource source = new StreamSource(new ByteArrayInputStream(INPUT_STRING_WITH_SPECIAL_CHARACTERS.getBytes(encoding)));, +		Object flights = unmarshaller.unmarshal(source);, +		testFlights(flights);, +, +		FlightType flight = ((Flights)flights).getFlight(0);, +		assertEquals("Airline is invalid", "Air Liberté", flight.getAirline());, +	}, +, +++ b/spring-oxm/src/main/java/org/springframework/oxm/jibx/JibxMarshaller.java, + * Copyright 2002-2012 the original author or authors., +			return unmarshallingContext.unmarshalDocument(inputStream, encoding);, +++ b/spring-oxm/src/test/java/org/springframework/oxm/jibx/FlightType.java, + * Copyright 2006-2012 the original author or authors., +	protected String airline;, +, +	public String getAirline() {, +		return this.airline;, +	}, +, +	public void setAirline(String airline) {, +		this.airline = airline;, +	}, +, +++ b/spring-oxm/src/test/java/org/springframework/oxm/jibx/JibxUnmarshallerTests.java, + * Copyright 2002-2012 the original author or authors., +import java.io.ByteArrayInputStream;, +import javax.xml.transform.stream.StreamSource;, +, +import org.junit.Ignore;, +import org.junit.Test;, +import static org.junit.Assert.*;, +, +	protected static final String INPUT_STRING_WITH_SPECIAL_CHARACTERS =, +			"<tns:flights xmlns:tns=\"http://samples.springframework.org/flight\">" +, +					"<tns:flight><tns:airline>Air Liberté</tns:airline><tns:number>42</tns:number></tns:flight></tns:flights>";, +, +	@Test, +	public void unmarshalStreamSourceInputStreamUsingNonDefaultEncoding() throws Exception {, +		String encoding = "ISO-8859-1";, +		((JibxMarshaller)unmarshaller).setEncoding(encoding);, +, +		StreamSource source = new StreamSource(new ByteArrayInputStream(INPUT_STRING_WITH_SPECIAL_CHARACTERS.getBytes(encoding)));, +		Object flights = unmarshaller.unmarshal(source);, +		testFlights(flights);, +, +		FlightType flight = ((Flights)flights).getFlight(0);, +		assertEquals("Airline is invalid", "Air Liberté", flight.getAirline());, +	}, +]