[+++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java, +import org.springframework.core.ResolvableType;, +	@Nullable, +	private volatile List<Annotation[][]> interfaceParameterAnnotations;, +, +		return getBeanType().getName() + "#" + this.method.getName() +, +				"[" + this.method.getParameterCount() + " args]";, +	}, +, +, +	private List<Annotation[][]> getInterfaceParameterAnnotations() {, +		List<Annotation[][]> parameterAnnotations = this.interfaceParameterAnnotations;, +		if (parameterAnnotations == null) {, +			parameterAnnotations = new ArrayList<>();, +			for (Class<?> ifc : this.method.getDeclaringClass().getInterfaces()) {, +				for (Method candidate : ifc.getMethods()) {, +					if (isOverrideFor(candidate)) {, +						parameterAnnotations.add(candidate.getParameterAnnotations());, +					}, +				}, +			}, +			this.interfaceParameterAnnotations = parameterAnnotations;, +		}, +		return parameterAnnotations;, +	}, +, +	private boolean isOverrideFor(Method candidate) {, +		if (!candidate.getName().equals(this.method.getName()) ||, +				candidate.getParameterCount() != this.method.getParameterCount()) {, +			return false;, +		}, +		Class<?>[] paramTypes = this.method.getParameterTypes();, +		if (Arrays.equals(candidate.getParameterTypes(), paramTypes)) {, +			return true;, +		}, +		for (int i = 0; i < paramTypes.length; i++) {, +			if (paramTypes[i] !=, +					ResolvableType.forMethodParameter(candidate, i, this.method.getDeclaringClass()).resolve()) {, +				return false;, +			}, +		}, +		return true;, +				for (Annotation[][] ifcAnns : getInterfaceParameterAnnotations()) {, +					Annotation[] paramAnns = ifcAnns[getParameterIndex()];, +						for (Annotation paramAnn : paramAnns) {, +								if (ann.annotationType() == paramAnn.annotationType()) {, +								merged.add(paramAnn);]