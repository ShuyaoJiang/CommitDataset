[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyHttpHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyHttpHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/DefaultServerWebExchange.java, +						.switchIfEmpty(EMPTY_FORM_DATA), +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyHttpHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/DefaultServerWebExchange.java, +						.switchIfEmpty(EMPTY_FORM_DATA), +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyHttpHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/DefaultServerWebExchange.java, +						.switchIfEmpty(EMPTY_FORM_DATA), +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/web/server/handler/ExceptionHandlingWebHandler.java, +			completion = completion.switchOnError(ex -> handler.handle(exchange, ex));, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyHttpHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/DefaultServerWebExchange.java, +						.switchIfEmpty(EMPTY_FORM_DATA), +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/web/server/handler/ExceptionHandlingWebHandler.java, +			completion = completion.switchOnError(ex -> handler.handle(exchange, ex));, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, +						.switchIfEmpty(createSession(exchange)), +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyHttpHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/DefaultServerWebExchange.java, +						.switchIfEmpty(EMPTY_FORM_DATA), +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/web/server/handler/ExceptionHandlingWebHandler.java, +			completion = completion.switchOnError(ex -> handler.handle(exchange, ex));, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, +						.switchIfEmpty(createSession(exchange)), +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/ServerHttpResponseTests.java, +		response.writeWith(Flux.error(error)).switchOnError(ex -> Mono.empty()).block();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyHttpHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/DefaultServerWebExchange.java, +						.switchIfEmpty(EMPTY_FORM_DATA), +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/web/server/handler/ExceptionHandlingWebHandler.java, +			completion = completion.switchOnError(ex -> handler.handle(exchange, ex));, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, +						.switchIfEmpty(createSession(exchange)), +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/ServerHttpResponseTests.java, +		response.writeWith(Flux.error(error)).switchOnError(ex -> Mono.empty()).block();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +				.switchIfEmpty(Mono.error(HANDLER_NOT_FOUND_EXCEPTION)), +				.switchOnError(ex -> result.applyExceptionHandler(ex).flatMap(exceptionResult ->, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyHttpHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/DefaultServerWebExchange.java, +						.switchIfEmpty(EMPTY_FORM_DATA), +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/web/server/handler/ExceptionHandlingWebHandler.java, +			completion = completion.switchOnError(ex -> handler.handle(exchange, ex));, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, +						.switchIfEmpty(createSession(exchange)), +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/ServerHttpResponseTests.java, +		response.writeWith(Flux.error(error)).switchOnError(ex -> Mono.empty()).block();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +				.switchIfEmpty(Mono.error(HANDLER_NOT_FOUND_EXCEPTION)), +				.switchOnError(ex -> result.applyExceptionHandler(ex).flatMap(exceptionResult ->, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultRenderingResponseBuilder.java, +					.switchIfEmpty(Mono.error(new IllegalArgumentException("Could not resolve view with name '" +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyHttpHandlerAdapter.java, +				.switchOnError(ex -> {, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/DefaultServerWebExchange.java, +						.switchIfEmpty(EMPTY_FORM_DATA), +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java, +				.switchOnError(ex -> {]