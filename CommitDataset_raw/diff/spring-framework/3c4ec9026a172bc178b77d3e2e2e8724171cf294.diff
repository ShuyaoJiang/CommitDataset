[+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java, +import org.springframework.http.HttpStatus;, +import org.springframework.web.bind.annotation.ExceptionHandler;, +import org.springframework.web.bind.annotation.ResponseStatus;, + * @author Jacek Suchenia, +	public void deferredResultWithImmediateValue() throws Exception {, +		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("deferredResultWithImmediateValue", "true")), +	/**, +	 * SPR-13079, +	 */, +	@Test, +	public void deferredResultWithDelayedError() throws Exception {, +		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("deferredResultWithDelayedError", "true")), +				.andExpect(request().asyncStarted()), +				.andReturn();, +, +		this.mockMvc.perform(asyncDispatch(mvcResult)), +				.andExpect(status().is5xxServerError()), +				.andExpect(content().string("Delayed Error"));, +	}, +, +	/**, +	 * SPR-12597, +	 */, +	@Test, +	public void completableFutureWithImmediateValue() throws Exception {, +		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("completableFutureWithImmediateValue", "true")), +	/**, +	 * SPR-12735, +	 */, +	@Test, +		@RequestMapping(params = "deferredResultWithImmediateValue"), +		public DeferredResult<Person> getDeferredResultWithImmediateValue() {, +		@RequestMapping(params = "deferredResultWithDelayedError"), +		public DeferredResult<Person> getDeferredResultWithDelayedError() {, +			final DeferredResult<Person> deferredResult = new DeferredResult<Person>();, +			new Thread() {, +				public void run() {, +					try {, +						Thread.sleep(100);, +						deferredResult.setErrorResult(new RuntimeException("Delayed Error"));, +					}, +					catch (InterruptedException e) {, +						/* no-op */, +					}, +				}, +			}.start();, +			return deferredResult;, +		}, +, +		@RequestMapping(params = "completableFutureWithImmediateValue"), +		public CompletableFuture<Person> getCompletableFutureWithImmediateValue() {, +		@ExceptionHandler(Exception.class), +		@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR), +		public String errorHandler(Exception e) {, +			return e.getMessage();, +		}, +]