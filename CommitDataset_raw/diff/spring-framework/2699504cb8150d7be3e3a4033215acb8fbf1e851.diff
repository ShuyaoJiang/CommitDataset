[+++ b/spring-test/src/test/java/org/springframework/test/context/TestContextConcurrencyTests.java, + * @see org.springframework.test.context.junit4.concurrency.SpringJUnit4ConcurrencyTests, +++ b/spring-test/src/test/java/org/springframework/test/context/TestContextConcurrencyTests.java, + * @see org.springframework.test.context.junit4.concurrency.SpringJUnit4ConcurrencyTests, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/JUnitTestingUtils.java, + * Copyright 2002-2016 the original author or authors., +import org.junit.experimental.ParallelComputer;, +import org.junit.jupiter.api.Assertions;, +import org.junit.runner.Computer;, +import static org.junit.jupiter.api.Assertions.assertAll;, +import static org.junit.jupiter.api.Assertions.assertEquals;, + * Collection of utilities for testing the execution of JUnit 4 based tests., + *, + * <p>Note that these utilities use {@link Assertions} from JUnit Jupiter,, + * but that should not result in any adverse side effects in terms of, + * proper test failure for failed assertions., +	 * configured via {@link RunWith @RunWith} or the default JUnit runner, and, +	 * assert the expectations of the test execution., +	 * if the default JUnit runner should be used, +		// @formatter:off, +		assertAll(, +			() -> assertEquals(expectedStartedCount, listener.getTestStartedCount(), "tests started for [" + testClass + "]"),, +			() -> assertEquals(expectedFailedCount, listener.getTestFailureCount(), "tests failed for [" + testClass + "]"),, +			() -> assertEquals(expectedFinishedCount, listener.getTestFinishedCount(), "tests finished for [" + testClass + "]"),, +			() -> assertEquals(expectedIgnoredCount, listener.getTestIgnoredCount(), "tests ignored for [" + testClass + "]"),, +			() -> assertEquals(expectedAssumptionFailedCount, listener.getTestAssumptionFailureCount(), "failed assumptions for [" + testClass + "]"), +		);, +		// @formatter:on, +	}, +, +	/**, +	 * Run all tests in the supplied test classes according to the policies of, +	 * the supplied {@link Computer}, using the {@link Runner} configured via, +	 * {@link RunWith @RunWith} or the default JUnit runner, and assert the, +	 * expectations of the test execution., +	 *, +	 * <p>To have all tests executed in parallel, supply {@link ParallelComputer#methods()}, +	 * as the {@code Computer}. To have all tests executed serially, supply, +	 * {@link Computer#serial()} as the {@code Computer}., +	 *, +	 * @param computer the JUnit {@code Computer} to use, +	 * @param expectedStartedCount the expected number of tests that started, +	 * @param expectedFailedCount the expected number of tests that failed, +	 * @param expectedFinishedCount the expected number of tests that finished, +	 * @param expectedIgnoredCount the expected number of tests that were ignored, +	 * @param expectedAssumptionFailedCount the expected number of tests that, +	 * resulted in a failed assumption, +	 * @param testClasses one or more test classes to run, +	 */, +	public static void runTestsAndAssertCounters(Computer computer, int expectedStartedCount, int expectedFailedCount,, +			int expectedFinishedCount, int expectedIgnoredCount, int expectedAssumptionFailedCount,, +			Class<?>... testClasses) throws Exception {, +, +		JUnitCore junit = new JUnitCore();, +		TrackingRunListener listener = new TrackingRunListener();, +		junit.addListener(listener);, +		junit.run(computer, testClasses);, +, +		// @formatter:off, +		assertAll(, +			() -> assertEquals(expectedStartedCount, listener.getTestStartedCount(), "tests started"),, +			() -> assertEquals(expectedFailedCount, listener.getTestFailureCount(), "tests failed"),, +			() -> assertEquals(expectedFinishedCount, listener.getTestFinishedCount(), "tests finished"),, +			() -> assertEquals(expectedIgnoredCount, listener.getTestIgnoredCount(), "tests ignored"),, +			() -> assertEquals(expectedAssumptionFailedCount, listener.getTestAssumptionFailureCount(), "failed assumptions"), +		);, +		// @formatter:on, +++ b/spring-test/src/test/java/org/springframework/test/context/TestContextConcurrencyTests.java, + * @see org.springframework.test.context.junit4.concurrency.SpringJUnit4ConcurrencyTests, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/JUnitTestingUtils.java, + * Copyright 2002-2016 the original author or authors., +import org.junit.experimental.ParallelComputer;, +import org.junit.jupiter.api.Assertions;, +import org.junit.runner.Computer;, +import static org.junit.jupiter.api.Assertions.assertAll;, +import static org.junit.jupiter.api.Assertions.assertEquals;, + * Collection of utilities for testing the execution of JUnit 4 based tests., + *, + * <p>Note that these utilities use {@link Assertions} from JUnit Jupiter,, + * but that should not result in any adverse side effects in terms of, + * proper test failure for failed assertions., +	 * configured via {@link RunWith @RunWith} or the default JUnit runner, and, +	 * assert the expectations of the test execution., +	 * if the default JUnit runner should be used, +		// @formatter:off, +		assertAll(, +			() -> assertEquals(expectedStartedCount, listener.getTestStartedCount(), "tests started for [" + testClass + "]"),, +			() -> assertEquals(expectedFailedCount, listener.getTestFailureCount(), "tests failed for [" + testClass + "]"),, +			() -> assertEquals(expectedFinishedCount, listener.getTestFinishedCount(), "tests finished for [" + testClass + "]"),, +			() -> assertEquals(expectedIgnoredCount, listener.getTestIgnoredCount(), "tests ignored for [" + testClass + "]"),, +			() -> assertEquals(expectedAssumptionFailedCount, listener.getTestAssumptionFailureCount(), "failed assumptions for [" + testClass + "]"), +		);, +		// @formatter:on, +	}, +, +	/**, +	 * Run all tests in the supplied test classes according to the policies of, +	 * the supplied {@link Computer}, using the {@link Runner} configured via, +	 * {@link RunWith @RunWith} or the default JUnit runner, and assert the, +	 * expectations of the test execution.]