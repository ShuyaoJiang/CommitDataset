[+++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, +import java.util.Iterator;, +import java.util.ListIterator;, +	@Test, +	public void SPR9735() {, +		Item item = new Item();, +		item.setName("parent");, +, +		Item item1 = new Item();, +		item1.setName("child1");, +, +		Item item2 = new Item();, +		item2.setName("child2");, +, +		item.add(item1);, +		item.add(item2);, +, +		ExpressionParser parser = new SpelExpressionParser();, +		EvaluationContext context = new StandardEvaluationContext();, +		Expression exp = parser.parseExpression("#item[0].name");, +		context.setVariable("item", item);, +, +		assertEquals("child1", exp.getValue(context));, +	}, +, +		public Boolean isSimpleProperty() {, +			return this.simpleProperty;, +, +		public boolean isPrimitiveProperty() {, +			return this.primitiveProperty;, +		}, +, +		public String getName() {, +			return this.name;, +		}, +		public boolean equals(Object other) {, +			return (this == other || (other instanceof TestClass2 &&, +					this.string.equals(((TestClass2) other).string)));, +		@Override, +		public int hashCode() {, +			return this.string.hashCode();, +			return this.counter.incrementAndGet();, +			return (beanName.equals("bean") ? this : null);, +, +	public class Item implements List<Item> {, +, +		private String name;, +, +		private List<Item> children = new ArrayList<Item>();, +, +		public void setName(String name) {, +			this.name = name;, +		}, +, +		public String getName() {, +			return this.name;, +		}, +, +		@Override, +		public int size() {, +			return this.children.size();, +		}, +, +		@Override, +		public boolean isEmpty() {, +			return this.children.isEmpty();, +		}, +, +		@Override, +		public boolean contains(Object o) {, +			return this.children.contains(o);, +		}, +, +		@Override, +		public Iterator<Item> iterator() {, +			return this.children.iterator();, +		}, +, +		@Override, +		public Object[] toArray() {, +			return this.children.toArray();, +		}, +, +		@Override, +		public <T> T[] toArray(T[] a) {, +			return this.children.toArray(a);, +		}, +, +		@Override, +		public boolean add(Item e) {, +			return this.children.add(e);, +		}, +, +		@Override, +		public boolean remove(Object o) {, +			return this.children.remove(o);, +		}, +, +		@Override, +		public boolean containsAll(Collection<?> c) {]