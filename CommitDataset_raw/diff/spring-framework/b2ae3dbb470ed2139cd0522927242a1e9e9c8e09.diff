[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, +import static java.lang.String.format;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.util.Assert;, +, +	private final Log logger = LogFactory.getLog(getClass());, +, +, +, +	 * <p>Note that the wrapped {@code BeanInfo} is modified by this process., +						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethod);, +						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, method);, +				this.addOrUpdatePropertyDescriptor(null, propertyName, null, method);, +						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethod, indexedReadMethod, indexedWriteMethod);, +						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethod, indexedReadMethod, method);, +				this.addOrUpdatePropertyDescriptor(null, propertyName, null, null, null, method);, +							this.addOrUpdatePropertyDescriptor(pd, pd.getName(), method, pd.getWriteMethod());, +						this.addOrUpdatePropertyDescriptor(pd, pd.getName(), pd.getReadMethod(), pd.getWriteMethod(), ((IndexedPropertyDescriptor)pd).getIndexedReadMethod(), ((IndexedPropertyDescriptor)pd).getIndexedWriteMethod());, +						this.addOrUpdatePropertyDescriptor(pd, pd.getName(), pd.getReadMethod(), pd.getWriteMethod());, +	private void addOrUpdatePropertyDescriptor(PropertyDescriptor pd, String propertyName, Method readMethod, Method writeMethod) throws IntrospectionException {, +		addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethod, null, null);, +	private void addOrUpdatePropertyDescriptor(PropertyDescriptor pd, String propertyName, Method readMethod, Method writeMethod, Method indexedReadMethod, Method indexedWriteMethod) throws IntrospectionException {, +		Assert.notNull(propertyName, "propertyName may not be null");, +		propertyName = pd == null ? propertyName : pd.getName();, +		if (pd == null) {, +			try {, +					pd = new PropertyDescriptor(propertyName, readMethod, writeMethod);, +				}, +				else {, +					pd = new IndexedPropertyDescriptor(propertyName, readMethod, writeMethod, indexedReadMethod, indexedWriteMethod);, +				}, +				this.propertyDescriptors.add(pd);, +			} catch (IntrospectionException ex) {, +				logger.warn(format("Could not create new PropertyDescriptor for readMethod [%s] writeMethod [%s] " +, +						"indexedReadMethod [%s] indexedWriteMethod [%s] for property [%s]. Reason: %s",, +						readMethod, writeMethod, indexedReadMethod, indexedWriteMethod, propertyName, ex.getMessage()));, +				// suppress exception and attempt to continue, +			}, +		}, +		else {, +			pd.setReadMethod(readMethod);, +			try {, +				pd.setWriteMethod(writeMethod);, +			} catch (IntrospectionException ex) {, +				logger.warn(format("Could not add write method [%s] for property [%s]. Reason: %s",, +						writeMethod, propertyName, ex.getMessage()));, +				// fall through -> add property descriptor as best we can, +			}, +			this.propertyDescriptors.add(pd);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, +import static java.lang.String.format;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.util.Assert;, +, +	private final Log logger = LogFactory.getLog(getClass());, +, +, +, +	 * <p>Note that the wrapped {@code BeanInfo} is modified by this process., +						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethod);, +						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, method);, +				this.addOrUpdatePropertyDescriptor(null, propertyName, null, method);, +						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethod, indexedReadMethod, indexedWriteMethod);, +						this.addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethod, indexedReadMethod, method);, +				this.addOrUpdatePropertyDescriptor(null, propertyName, null, null, null, method);, +							this.addOrUpdatePropertyDescriptor(pd, pd.getName(), method, pd.getWriteMethod());, +						this.addOrUpdatePropertyDescriptor(pd, pd.getName(), pd.getReadMethod(), pd.getWriteMethod(), ((IndexedPropertyDescriptor)pd).getIndexedReadMethod(), ((IndexedPropertyDescriptor)pd).getIndexedWriteMethod());, +						this.addOrUpdatePropertyDescriptor(pd, pd.getName(), pd.getReadMethod(), pd.getWriteMethod());, +	private void addOrUpdatePropertyDescriptor(PropertyDescriptor pd, String propertyName, Method readMethod, Method writeMethod) throws IntrospectionException {, +		addOrUpdatePropertyDescriptor(pd, propertyName, readMethod, writeMethod, null, null);, +	private void addOrUpdatePropertyDescriptor(PropertyDescriptor pd, String propertyName, Method readMethod, Method writeMethod, Method indexedReadMethod, Method indexedWriteMethod) throws IntrospectionException {, +		Assert.notNull(propertyName, "propertyName may not be null");, +		propertyName = pd == null ? propertyName : pd.getName();, +		if (pd == null) {, +			try {, +					pd = new PropertyDescriptor(propertyName, readMethod, writeMethod);, +				}, +				else {, +					pd = new IndexedPropertyDescriptor(propertyName, readMethod, writeMethod, indexedReadMethod, indexedWriteMethod);, +				}, +				this.propertyDescriptors.add(pd);, +			} catch (IntrospectionException ex) {, +				logger.warn(format("Could not create new PropertyDescriptor for readMethod [%s] writeMethod [%s] " +, +						"indexedReadMethod [%s] indexedWriteMethod [%s] for property [%s]. Reason: %s",, +						readMethod, writeMethod, indexedReadMethod, indexedWriteMethod, propertyName, ex.getMessage()));, +				// suppress exception and attempt to continue, +			}, +		}, +		else {, +			pd.setReadMethod(readMethod);, +			try {, +				pd.setWriteMethod(writeMethod);, +			} catch (IntrospectionException ex) {, +				logger.warn(format("Could not add write method [%s] for property [%s]. Reason: %s",, +						writeMethod, propertyName, ex.getMessage()));, +				// fall through -> add property descriptor as best we can]