[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +import org.springframework.messaging.MessageDeliveryException;, +		protected void handleTcpClientFailure(String message, Throwable ex) {, +		private void forward(Message<?> message) {, +				logger.warn("Connection to STOMP broker is not active");, +				handleForwardFailure(message);, +			else if (!forwardInternal(tcpConnection, message)) {, +				handleForwardFailure(message);, +			}, +		}, +, +		protected void handleForwardFailure(Message<?> message) {, +			if (logger.isWarnEnabled()) {, +				logger.warn("Failed to forward message to the broker. message=" + message);, +			}, +			long brokerReceiveInterval = headers.getHeartbeat()[1];, +			if ((HEARTBEAT_SEND_INTERVAL > 0) && (brokerReceiveInterval > 0)) {, +						TcpConnection<Message<byte[]>, Message<byte[]>> tcpConn = stompConnection.connection;, +						if (tcpConn != null) {, +							tcpConn.send(MessageBuilder.withPayload(heartbeatPayload).build(),, +								new Consumer<Boolean>() {, +									@Override, +									public void accept(Boolean t) {, +										handleTcpClientFailure("Failed to send heartbeat to the broker", null);, +									}, +								});, +				final long interval = Math.max(HEARTBEAT_RECEIVE_INTERVAL, brokerSendInterval), +						* HEARTBEAT_RECEIVE_MULTIPLIER;, +, +						if (logger.isWarnEnabled()) {, +						}, +, +		@Override, +		protected void handleForwardFailure(Message<?> message) {, +			super.handleForwardFailure(message);, +			throw new MessageDeliveryException(message);, +		}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +import org.springframework.messaging.MessageDeliveryException;, +		protected void handleTcpClientFailure(String message, Throwable ex) {, +		private void forward(Message<?> message) {, +				logger.warn("Connection to STOMP broker is not active");, +				handleForwardFailure(message);, +			else if (!forwardInternal(tcpConnection, message)) {, +				handleForwardFailure(message);, +			}, +		}, +, +		protected void handleForwardFailure(Message<?> message) {, +			if (logger.isWarnEnabled()) {, +				logger.warn("Failed to forward message to the broker. message=" + message);, +			}, +			long brokerReceiveInterval = headers.getHeartbeat()[1];, +			if ((HEARTBEAT_SEND_INTERVAL > 0) && (brokerReceiveInterval > 0)) {, +						TcpConnection<Message<byte[]>, Message<byte[]>> tcpConn = stompConnection.connection;, +						if (tcpConn != null) {, +							tcpConn.send(MessageBuilder.withPayload(heartbeatPayload).build(),, +								new Consumer<Boolean>() {, +									@Override, +									public void accept(Boolean t) {, +										handleTcpClientFailure("Failed to send heartbeat to the broker", null);, +									}, +								});, +				final long interval = Math.max(HEARTBEAT_RECEIVE_INTERVAL, brokerSendInterval), +						* HEARTBEAT_RECEIVE_MULTIPLIER;, +, +						if (logger.isWarnEnabled()) {, +						}, +, +		@Override, +		protected void handleForwardFailure(Message<?> message) {, +			super.handleForwardFailure(message);, +			throw new MessageDeliveryException(message);, +		}, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java, +import org.springframework.messaging.MessageDeliveryException;, +	@Test(expected=MessageDeliveryException.class), +	public void messageDeliverExceptionIfSystemSessionForwardFails() throws Exception {, +		StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.MESSAGE);, +		this.relay.handleMessage(MessageBuilder.withPayloadAndHeaders("test", headers).build());, +	}, +]