[+++ b/spring-web/src/main/java/org/springframework/http/CacheControl.java, +	@Override, +	public String toString() {, +		return "CacheControl [" + getHeaderValue() + "]";, +	}, +++ b/spring-web/src/main/java/org/springframework/http/CacheControl.java, +	@Override, +	public String toString() {, +		return "CacheControl [" + getHeaderValue() + "]";, +	}, +++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java, +		return Integer.toString(this.value) + " " + name();, +++ b/spring-web/src/main/java/org/springframework/http/CacheControl.java, +	@Override, +	public String toString() {, +		return "CacheControl [" + getHeaderValue() + "]";, +	}, +++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java, +		return Integer.toString(this.value) + " " + name();, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, +++ b/spring-web/src/main/java/org/springframework/http/CacheControl.java, +	@Override, +	public String toString() {, +		return "CacheControl [" + getHeaderValue() + "]";, +	}, +++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java, +		return Integer.toString(this.value) + " " + name();, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, +++ b/spring-web/src/main/java/org/springframework/web/accept/FixedContentNegotiationStrategy.java, +++ b/spring-web/src/main/java/org/springframework/http/CacheControl.java, +	@Override, +	public String toString() {, +		return "CacheControl [" + getHeaderValue() + "]";, +	}, +++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java, +		return Integer.toString(this.value) + " " + name();, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, +++ b/spring-web/src/main/java/org/springframework/web/accept/FixedContentNegotiationStrategy.java, +++ b/spring-web/src/main/java/org/springframework/web/accept/PathExtensionContentNegotiationStrategy.java, +++ b/spring-web/src/main/java/org/springframework/http/CacheControl.java, +	@Override, +	public String toString() {, +		return "CacheControl [" + getHeaderValue() + "]";, +	}, +++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java, +		return Integer.toString(this.value) + " " + name();, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, +++ b/spring-web/src/main/java/org/springframework/web/accept/FixedContentNegotiationStrategy.java, +++ b/spring-web/src/main/java/org/springframework/web/accept/PathExtensionContentNegotiationStrategy.java, +++ b/spring-web/src/main/java/org/springframework/web/bind/MethodArgumentNotValidException.java, +		StringBuilder sb = new StringBuilder("Validation failed for argument ["), +			.append(this.parameter.getParameterIndex()).append("] in "), +			.append(this.parameter.getExecutable().toGenericString());, +		if (this.bindingResult.getErrorCount() > 1) {, +			sb.append(" with ").append(this.bindingResult.getErrorCount()).append(" errors");, +		}, +		sb.append(": ");, +++ b/spring-web/src/main/java/org/springframework/http/CacheControl.java, +	@Override, +	public String toString() {, +		return "CacheControl [" + getHeaderValue() + "]";, +	}, +++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java, +		return Integer.toString(this.value) + " " + name();, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, +++ b/spring-web/src/main/java/org/springframework/web/accept/FixedContentNegotiationStrategy.java, +++ b/spring-web/src/main/java/org/springframework/web/accept/PathExtensionContentNegotiationStrategy.java, +++ b/spring-web/src/main/java/org/springframework/web/bind/MethodArgumentNotValidException.java, +		StringBuilder sb = new StringBuilder("Validation failed for argument ["), +			.append(this.parameter.getParameterIndex()).append("] in "), +			.append(this.parameter.getExecutable().toGenericString());, +		if (this.bindingResult.getErrorCount() > 1) {, +			sb.append(" with ").append(this.bindingResult.getErrorCount()).append(" errors");, +		}, +		sb.append(": ");, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableInterceptorChain.java, +			catch (Throwable ex) {, +					logger.warn("Unhandled error from interceptor postProcess method", ex);, +					exceptionResult = ex;, +			catch (Throwable ex) {, +				logger.error("Unhandled error from interceptor afterCompletion method", ex);, +++ b/spring-web/src/main/java/org/springframework/http/CacheControl.java, +	@Override, +	public String toString() {, +		return "CacheControl [" + getHeaderValue() + "]";, +	}, +++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java, +		return Integer.toString(this.value) + " " + name();, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, +++ b/spring-web/src/main/java/org/springframework/web/accept/FixedContentNegotiationStrategy.java, +++ b/spring-web/src/main/java/org/springframework/web/accept/PathExtensionContentNegotiationStrategy.java, +++ b/spring-web/src/main/java/org/springframework/web/bind/MethodArgumentNotValidException.java, +		StringBuilder sb = new StringBuilder("Validation failed for argument ["), +			.append(this.parameter.getParameterIndex()).append("] in "), +			.append(this.parameter.getExecutable().toGenericString());, +		if (this.bindingResult.getErrorCount() > 1) {, +			sb.append(" with ").append(this.bindingResult.getErrorCount()).append(" errors");, +		}, +		sb.append(": ");, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableInterceptorChain.java]