[+++ b/build.gradle, +		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.4", +	ext.kotlinVersion          = "1.0.4", +	apply plugin: "kotlin", +, +		optional("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		optional("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"), +++ b/build.gradle, +		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.4", +	ext.kotlinVersion          = "1.0.4", +	apply plugin: "kotlin", +, +		optional("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		optional("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"), +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +import org.springframework.util.KotlinUtils;, +	/**, +	 * Return whether this method parameter is declared as a "nullable" value, if supported by, +	 * the underlying language. Currently the only supported language is Kotlin., +	 * @since 5.0, +	 */, +	public boolean isNullable() {, +		return KotlinUtils.isKotlinPresent() &&, +				KotlinUtils.isKotlinClass(getContainingClass()) &&, +				KotlinUtils.isNullable(this.parameterIndex, this.method, this.constructor);, +	}, +++ b/build.gradle, +		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.4", +	ext.kotlinVersion          = "1.0.4", +	apply plugin: "kotlin", +, +		optional("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		optional("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"), +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +import org.springframework.util.KotlinUtils;, +	/**, +	 * Return whether this method parameter is declared as a "nullable" value, if supported by, +	 * the underlying language. Currently the only supported language is Kotlin., +	 * @since 5.0, +	 */, +	public boolean isNullable() {, +		return KotlinUtils.isKotlinPresent() &&, +				KotlinUtils.isKotlinClass(getContainingClass()) &&, +				KotlinUtils.isNullable(this.parameterIndex, this.method, this.constructor);, +	}, +++ b/spring-core/src/main/java/org/springframework/util/KotlinUtils.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.util;, +, +import kotlin.Metadata;, +import kotlin.reflect.KFunction;, +import kotlin.reflect.KParameter;, +import kotlin.reflect.jvm.ReflectJvmMapping;, +import org.springframework.core.MethodParameter;, +, +import java.lang.reflect.Constructor;, +import java.lang.reflect.Method;, +import java.util.List;, +import java.util.stream.Collectors;, +, +/**, + * Miscellaneous Kotlin utility methods., + *, + * @author Raman Gupta, + * @since 5.0, + */, +public class KotlinUtils {, +, +	private static final boolean kotlinPresent;, +, +	static {, +		kotlinPresent = ClassUtils.isPresent("kotlin.Unit", MethodParameter.class.getClassLoader());, +	}, +, +	public static boolean isKotlinPresent() {, +		return kotlinPresent;, +	}, +, +	public static boolean isKotlinClass(Class<?> type) {, +		return type != null && type.getDeclaredAnnotation(Metadata.class) != null;, +	}, +, +	public static boolean isNullable(int parameterIndex, Method method, Constructor<?> constructor) {, +		if(parameterIndex < 0) {, +			KFunction<?> function = ReflectJvmMapping.getKotlinFunction(method);]