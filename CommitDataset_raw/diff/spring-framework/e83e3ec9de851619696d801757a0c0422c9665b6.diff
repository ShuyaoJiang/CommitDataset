[+++ b/spring-context/src/test/java/org/springframework/beans/factory/support/QualifierAnnotationAutowireContextTests.java, + * Copyright 2002-2016 the original author or authors., +import org.junit.Ignore;, +import org.springframework.core.annotation.AliasFor;, + * @author Sam Brannen, +	private static final String SAM = "sam";, +	/**, +	 * @see SpringBean, +	 */, +	@Test, +	@Ignore("Disabled until SPR-14058 is resolved"), +	public void autowiredFieldResolutionIgnoresEmptyQualifierFromComposedQualifierAnnotation() {, +		GenericApplicationContext context = new GenericApplicationContext();, +		ConstructorArgumentValues cavs1 = new ConstructorArgumentValues();, +		cavs1.addGenericArgumentValue(SAM);, +		RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null);, +		context.registerBeanDefinition(SAM, person1);, +		context.registerBeanDefinition("autowired", new RootBeanDefinition(ComposedAnnotationQualifiedFieldTestBean.class));, +		AnnotationConfigUtils.registerAnnotationConfigProcessors(context);, +		context.refresh();, +		ComposedAnnotationQualifiedFieldTestBean bean = context.getBean(ComposedAnnotationQualifiedFieldTestBean.class);, +		assertEquals(SAM, bean.getPerson().getName());, +	}, +, +	/**, +	 * {@code @SpringBean} is a composed annotation that combines the semantics of, +	 * {@code Autowired @Autowired} and {@code Qualifier @Qualifier}, +	 */, +	@Autowired, +	@Qualifier, +	@Retention(RetentionPolicy.RUNTIME), +	public @interface SpringBean {, +, +		@AliasFor(annotation = Qualifier.class), +		String value() default "";, +, +		@AliasFor(annotation = Qualifier.class, attribute = "value"), +		String qualifier() default "";, +, +		@AliasFor(annotation = Autowired.class), +		boolean required() default true;, +, +	}, +, +	private static class ComposedAnnotationQualifiedFieldTestBean {, +, +		@SpringBean, +		private Person person;, +, +		public Person getPerson() {, +			return this.person;, +		}, +	}, +, +]