[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/Autowired.java, + * Copyright 2002-2011 the original author or authors., + * <p>Note that actual injection is performed through a, + * {@link org.springframework.beans.factory.config.BeanPostProcessor, + * BeanPostProcessor} which in turn means that you <em>cannot</em>, + * use {@code @Autowired} to inject references into, + * {@link org.springframework.beans.factory.config.BeanPostProcessor, + * BeanPostProcessor} or {@link BeanFactoryPostProcessor} types. Please, + * consult the javadoc for the {@link AutowiredAnnotationBeanPostProcessor}, + * @see Value, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/Autowired.java, + * Copyright 2002-2011 the original author or authors., + * <p>Note that actual injection is performed through a, + * {@link org.springframework.beans.factory.config.BeanPostProcessor, + * BeanPostProcessor} which in turn means that you <em>cannot</em>, + * use {@code @Autowired} to inject references into, + * {@link org.springframework.beans.factory.config.BeanPostProcessor, + * BeanPostProcessor} or {@link BeanFactoryPostProcessor} types. Please, + * consult the javadoc for the {@link AutowiredAnnotationBeanPostProcessor}, + * @see Value, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * by default, Spring's @{@link Autowired} and @{@link Value} annotations., + * <p>Also supports JSR-330's {@link javax.inject.Inject @Inject} annotation, if, + * available., + * <p><b>NOTE:</b> Annotation injection will be performed <i>before</i> XML injection;, + * thus the latter configuration will override the former for properties wired through, + * @see Value, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/Autowired.java, + * Copyright 2002-2011 the original author or authors., + * <p>Note that actual injection is performed through a, + * {@link org.springframework.beans.factory.config.BeanPostProcessor, + * BeanPostProcessor} which in turn means that you <em>cannot</em>, + * use {@code @Autowired} to inject references into, + * {@link org.springframework.beans.factory.config.BeanPostProcessor, + * BeanPostProcessor} or {@link BeanFactoryPostProcessor} types. Please, + * consult the javadoc for the {@link AutowiredAnnotationBeanPostProcessor}, + * @see Value, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * by default, Spring's @{@link Autowired} and @{@link Value} annotations., + * <p>Also supports JSR-330's {@link javax.inject.Inject @Inject} annotation, if, + * available., + * <p><b>NOTE:</b> Annotation injection will be performed <i>before</i> XML injection;, + * thus the latter configuration will override the former for properties wired through, + * @see Value, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/Value.java, + * Copyright 2002-2011 the original author or authors., + * <p>Note that actual processing of the {@code @Value} annotation is performed, + * by a {@link org.springframework.beans.factory.config.BeanPostProcessor, + * BeanPostProcessor} which in turn means that you <em>cannot</em> use, + * {@code @Value} within, + * {@link org.springframework.beans.factory.config.BeanPostProcessor, + * BeanPostProcessor} or {@link BeanFactoryPostProcessor} types. Please, + * consult the javadoc for the {@link AutowiredAnnotationBeanPostProcessor}, + * class (which, by default, checks for the presence of this annotation)., + *, + * @see AutowiredAnnotationBeanPostProcessor, + * @see Value, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/Autowired.java, + * Copyright 2002-2011 the original author or authors., + * <p>Note that actual injection is performed through a, + * {@link org.springframework.beans.factory.config.BeanPostProcessor, + * BeanPostProcessor} which in turn means that you <em>cannot</em>, + * use {@code @Autowired} to inject references into, + * {@link org.springframework.beans.factory.config.BeanPostProcessor, + * BeanPostProcessor} or {@link BeanFactoryPostProcessor} types. Please, + * consult the javadoc for the {@link AutowiredAnnotationBeanPostProcessor}, + * @see Value, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * by default, Spring's @{@link Autowired} and @{@link Value} annotations., + * <p>Also supports JSR-330's {@link javax.inject.Inject @Inject} annotation, if, + * available., + * <p><b>NOTE:</b> Annotation injection will be performed <i>before</i> XML injection;, + * thus the latter configuration will override the former for properties wired through, + * @see Value, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/Value.java, + * Copyright 2002-2011 the original author or authors., + * <p>Note that actual processing of the {@code @Value} annotation is performed, + * by a {@link org.springframework.beans.factory.config.BeanPostProcessor, + * BeanPostProcessor} which in turn means that you <em>cannot</em> use, + * {@code @Value} within, + * {@link org.springframework.beans.factory.config.BeanPostProcessor, + * BeanPostProcessor} or {@link BeanFactoryPostProcessor} types. Please, + * consult the javadoc for the {@link AutowiredAnnotationBeanPostProcessor}, + * class (which, by default, checks for the presence of this annotation)., + *, + * @see AutowiredAnnotationBeanPostProcessor, + * @see Value, +++ b/spring-framework-reference/src/beans-annotation-config.xml, +      <interfacename>Environment</interfacename>,, +, +    <note>, +      <para>, +        <interfacename>@Autowired</interfacename>,, +        <interfacename>@Inject</interfacename>,, +        <interfacename>@Resource</interfacename>, and, +        <interfacename>@Value</interfacename> annotations are handled by a, +        Spring <interfacename>BeanPostProcessor</interfacename> implementations, +        which in turn means that you <emphasis>cannot</emphasis>, +        apply these annotations within your own, +        <classname>BeanPostProcessor</classname> or]