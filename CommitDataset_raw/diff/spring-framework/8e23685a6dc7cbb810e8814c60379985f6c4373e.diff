[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToArrayConverter.java, +		TypeDescriptor sourceElementType = sourceType.getElementTypeDescriptor();, +		if (Object.class.equals(sourceElementType.getType())) {, +			return true;, +		}		, +		return this.conversionService.canConvert(sourceElementType, targetType.getElementTypeDescriptor());, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToArrayConverter.java, +		TypeDescriptor sourceElementType = sourceType.getElementTypeDescriptor();, +		if (Object.class.equals(sourceElementType.getType())) {, +			return true;, +		}		, +		return this.conversionService.canConvert(sourceElementType, targetType.getElementTypeDescriptor());, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToObjectConverter.java, +		TypeDescriptor sourceElementType = sourceType.getElementTypeDescriptor();, +		if (Object.class.equals(sourceElementType.getType())) {, +			return true;, +		}		, +		return this.conversionService.canConvert(sourceElementType, targetType);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToArrayConverter.java, +		TypeDescriptor sourceElementType = sourceType.getElementTypeDescriptor();, +		if (Object.class.equals(sourceElementType.getType())) {, +			return true;, +		}		, +		return this.conversionService.canConvert(sourceElementType, targetType.getElementTypeDescriptor());, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToObjectConverter.java, +		TypeDescriptor sourceElementType = sourceType.getElementTypeDescriptor();, +		if (Object.class.equals(sourceElementType.getType())) {, +			return true;, +		}		, +		return this.conversionService.canConvert(sourceElementType, targetType);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/MapToMapConverter.java, +		TypeDescriptor sourceKeyType = sourceType.getMapKeyTypeDescriptor();, +		TypeDescriptor targetKeyType = targetType.getMapKeyTypeDescriptor();, +		TypeDescriptor sourceValueType = sourceType.getMapValueTypeDescriptor();, +		TypeDescriptor targetValueType = targetType.getMapValueTypeDescriptor();, +		if (Object.class.equals(sourceKeyType.getType()) && Object.class.equals(sourceValueType.getType()), +				|| Object.class.equals(targetKeyType.getType()) && Object.class.equals(targetValueType.getType())) {, +			return true;, +		}		, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToArrayConverter.java, +		TypeDescriptor sourceElementType = sourceType.getElementTypeDescriptor();, +		if (Object.class.equals(sourceElementType.getType())) {, +			return true;, +		}		, +		return this.conversionService.canConvert(sourceElementType, targetType.getElementTypeDescriptor());, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToObjectConverter.java, +		TypeDescriptor sourceElementType = sourceType.getElementTypeDescriptor();, +		if (Object.class.equals(sourceElementType.getType())) {, +			return true;, +		}		, +		return this.conversionService.canConvert(sourceElementType, targetType);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/MapToMapConverter.java, +		TypeDescriptor sourceKeyType = sourceType.getMapKeyTypeDescriptor();, +		TypeDescriptor targetKeyType = targetType.getMapKeyTypeDescriptor();, +		TypeDescriptor sourceValueType = sourceType.getMapValueTypeDescriptor();, +		TypeDescriptor targetValueType = targetType.getMapValueTypeDescriptor();, +		if (Object.class.equals(sourceKeyType.getType()) && Object.class.equals(sourceValueType.getType()), +				|| Object.class.equals(targetKeyType.getType()) && Object.class.equals(targetValueType.getType())) {, +			return true;, +		}		, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/GenericConversionServiceTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +import org.springframework.core.io.Resource;, +	public void emptyListToList() throws Exception {, +	@Test, +	public void emptyListToArray() throws Exception {, +		conversionService.addConverter(new CollectionToArrayConverter(conversionService));, +		conversionService.addConverterFactory(new StringToNumberConverterFactory());, +		List<String> list = new ArrayList<String>();, +		TypeDescriptor sourceType = TypeDescriptor.forObject(list);, +		TypeDescriptor targetType = TypeDescriptor.valueOf(String[].class);, +		assertTrue(conversionService.canConvert(sourceType, targetType));, +		assertEquals(0, ((String[])conversionService.convert(list, sourceType, targetType)).length);, +	}, +, +	@Test, +	public void emptyListToObject() throws Exception {, +		conversionService.addConverter(new CollectionToObjectConverter(conversionService));, +		conversionService.addConverterFactory(new StringToNumberConverterFactory());, +		List<String> list = new ArrayList<String>();, +		TypeDescriptor sourceType = TypeDescriptor.forObject(list);, +		TypeDescriptor targetType = TypeDescriptor.valueOf(Integer.class);, +		assertTrue(conversionService.canConvert(sourceType, targetType));, +		assertNull(conversionService.convert(list, sourceType, targetType));, +	}, +, +	@Test, +	public void emptyMapToMap() throws Exception {, +		conversionService.addConverter(new MapToMapConverter(conversionService));, +		conversionService.addConverterFactory(new StringToNumberConverterFactory());, +		Map<String, String> map = new HashMap<String, String>();, +		TypeDescriptor sourceType = TypeDescriptor.forObject(map);, +		TypeDescriptor targetType = new TypeDescriptor(getClass().getField("emptyMapTarget"));]