[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java, +			// Make the root object the active context again for evaluating the parameter, +			// expressions, +			try {, +				state.pushActiveContextObject(state.getRootContextObject());, +			} finally {, +				state.popActiveContextObject();	, +			}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java, +			// Make the root object the active context again for evaluating the parameter, +			// expressions, +			try {, +				state.pushActiveContextObject(state.getRootContextObject());, +			} finally {, +				state.popActiveContextObject();	, +			}, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java, +	@Test, +	public void methodCallWithRootReferenceThroughParameter() {, +		evaluate("placeOfBirth.doubleIt(inventions.length)", 18, Integer.class);, +	}, +, +	@Test, +	public void ctorCallWithRootReferenceThroughParameter() {, +		evaluate("new org.springframework.expression.spel.testresources.PlaceOfBirth(inventions[0].toString()).city", "Telephone repeater", String.class);, +	}, +, +	@Test, +	public void fnCallWithRootReferenceThroughParameter() {, +		evaluate("#reverseInt(inventions.length, inventions.length, inventions.length)", "int[3]{9,9,9}", int[].class);, +	}, +	, +	@Test, +	public void methodCallWithRootReferenceThroughParameterThatIsAFunctionCall() {, +		evaluate("placeOfBirth.doubleIt(#reverseInt(inventions.length,2,3)[2])", 18, Integer.class);, +	}, +	, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java, +			// Make the root object the active context again for evaluating the parameter, +			// expressions, +			try {, +				state.pushActiveContextObject(state.getRootContextObject());, +			} finally {, +				state.popActiveContextObject();	, +			}, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java, +	@Test, +	public void methodCallWithRootReferenceThroughParameter() {, +		evaluate("placeOfBirth.doubleIt(inventions.length)", 18, Integer.class);, +	}, +, +	@Test, +	public void ctorCallWithRootReferenceThroughParameter() {, +		evaluate("new org.springframework.expression.spel.testresources.PlaceOfBirth(inventions[0].toString()).city", "Telephone repeater", String.class);, +	}, +, +	@Test, +	public void fnCallWithRootReferenceThroughParameter() {, +		evaluate("#reverseInt(inventions.length, inventions.length, inventions.length)", "int[3]{9,9,9}", int[].class);, +	}, +	, +	@Test, +	public void methodCallWithRootReferenceThroughParameterThatIsAFunctionCall() {, +		evaluate("placeOfBirth.doubleIt(#reverseInt(inventions.length,2,3)[2])", 18, Integer.class);, +	}, +	, +++ b/spring-framework-reference/src/expressions.xml, +        <title>The #this and #root variables</title>, +        evaluation object (against which unqualified references are resolved)., +        The variable #root is always defined and refers to the root, +        context object.  Although #this may vary as components of an expression, +        are evaluated, #root always refers to the root.</para>]