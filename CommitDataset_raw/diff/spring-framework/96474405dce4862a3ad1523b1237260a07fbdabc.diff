[+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/ModelAttributeMethodArgumentResolverTests.java, +import java.net.URISyntaxException;, +import org.springframework.http.MediaType;, +import org.springframework.web.server.session.WebSessionManager;, +import static org.springframework.core.ResolvableType.forClass;, +import static org.springframework.core.ResolvableType.forClassWithGenerics;, +import static org.springframework.util.Assert.isTrue;, +	private BindingContext bindContext;, +		this.bindContext = new BindingContext(initializer);, +		this.bindContext.getModel().addAttribute(foo);, +		assertSame(foo, this.bindContext.getModel().asMap().get("foo"));, +		this.bindContext.getModel().addAttribute("foo", Mono.just(foo));, +		assertSame(foo, this.bindContext.getModel().asMap().get("foo"));, +		this.bindContext.getModel().addAttribute("foo", Single.just(foo));, +		assertSame(foo, this.bindContext.getModel().asMap().get("foo"));, +		this.bindContext.getModel().addAttribute("foo", Mono.just(foo));, +	private void testBindFoo(ResolvableType type, Function<Object, Foo> valueExtractor) throws Exception {, +				.resolveArgument(parameter(type), this.bindContext, exchange("name=Robert&age=25")), +				.blockMillis(0);, +		Map<String, Object> map = bindContext.getModel().asMap();, +	private void testValidationError(ResolvableType type, Function<Mono<?>, Mono<?>> valueMonoExtractor), +			throws URISyntaxException {, +		ServerWebExchange exchange = exchange("age=invalid");, +		Mono<?> mono = createResolver().resolveArgument(parameter(type), this.bindContext, exchange);, +	private ServerWebExchange exchange(String formData) throws URISyntaxException {, +		MockServerHttpRequest request = new MockServerHttpRequest(HttpMethod.GET, "/");, +		request.getHeaders().setContentType(MediaType.APPLICATION_FORM_URLENCODED);, +		request.setBody(formData);, +		MockServerHttpResponse response = new MockServerHttpResponse();, +		WebSessionManager manager = new MockWebSessionManager();, +		return new DefaultServerWebExchange(request, response, manager);, +	}, +, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/ModelAttributeMethodArgumentResolverTests.java, +import java.net.URISyntaxException;, +import org.springframework.http.MediaType;, +import org.springframework.web.server.session.WebSessionManager;, +import static org.springframework.core.ResolvableType.forClass;, +import static org.springframework.core.ResolvableType.forClassWithGenerics;, +import static org.springframework.util.Assert.isTrue;, +	private BindingContext bindContext;, +		this.bindContext = new BindingContext(initializer);, +		this.bindContext.getModel().addAttribute(foo);, +		assertSame(foo, this.bindContext.getModel().asMap().get("foo"));, +		this.bindContext.getModel().addAttribute("foo", Mono.just(foo));, +		assertSame(foo, this.bindContext.getModel().asMap().get("foo"));, +		this.bindContext.getModel().addAttribute("foo", Single.just(foo));, +		assertSame(foo, this.bindContext.getModel().asMap().get("foo"));, +		this.bindContext.getModel().addAttribute("foo", Mono.just(foo));, +	private void testBindFoo(ResolvableType type, Function<Object, Foo> valueExtractor) throws Exception {, +				.resolveArgument(parameter(type), this.bindContext, exchange("name=Robert&age=25")), +				.blockMillis(0);, +		Map<String, Object> map = bindContext.getModel().asMap();, +	private void testValidationError(ResolvableType type, Function<Mono<?>, Mono<?>> valueMonoExtractor), +			throws URISyntaxException {, +		ServerWebExchange exchange = exchange("age=invalid");, +		Mono<?> mono = createResolver().resolveArgument(parameter(type), this.bindContext, exchange);, +	private ServerWebExchange exchange(String formData) throws URISyntaxException {, +		MockServerHttpRequest request = new MockServerHttpRequest(HttpMethod.GET, "/");, +		request.getHeaders().setContentType(MediaType.APPLICATION_FORM_URLENCODED);, +		request.setBody(formData);, +		MockServerHttpResponse response = new MockServerHttpResponse();, +		WebSessionManager manager = new MockWebSessionManager();, +		return new DefaultServerWebExchange(request, response, manager);, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultServerHttpRequestBuilder.java, +import org.springframework.web.util.UriComponentsBuilder;, +	private String path;, +	public ServerHttpRequest.Builder path(String path) {, +		this.path = path;, +		URI uri = null;, +		if (this.path != null) {, +			uri = this.delegate.getURI();, +			uri = UriComponentsBuilder.fromUri(uri).replacePath(this.path).build(true).toUri();, +		}, +		return new MutativeDecorator(this.delegate, this.httpMethod, uri, this.contextPath);, +		public MutativeDecorator(ServerHttpRequest delegate, HttpMethod httpMethod,, +				URI uri, String contextPath) {, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/ModelAttributeMethodArgumentResolverTests.java, +import java.net.URISyntaxException;, +import org.springframework.http.MediaType;, +import org.springframework.web.server.session.WebSessionManager;, +import static org.springframework.core.ResolvableType.forClass;, +import static org.springframework.core.ResolvableType.forClassWithGenerics;, +import static org.springframework.util.Assert.isTrue;, +	private BindingContext bindContext;, +		this.bindContext = new BindingContext(initializer);, +		this.bindContext.getModel().addAttribute(foo);, +		assertSame(foo, this.bindContext.getModel().asMap().get("foo"));, +		this.bindContext.getModel().addAttribute("foo", Mono.just(foo));, +		assertSame(foo, this.bindContext.getModel().asMap().get("foo"));, +		this.bindContext.getModel().addAttribute("foo", Single.just(foo));, +		assertSame(foo, this.bindContext.getModel().asMap().get("foo"));, +		this.bindContext.getModel().addAttribute("foo", Mono.just(foo));, +	private void testBindFoo(ResolvableType type, Function<Object, Foo> valueExtractor) throws Exception {, +				.resolveArgument(parameter(type), this.bindContext, exchange("name=Robert&age=25")), +				.blockMillis(0);, +		Map<String, Object> map = bindContext.getModel().asMap();, +	private void testValidationError(ResolvableType type, Function<Mono<?>, Mono<?>> valueMonoExtractor)]