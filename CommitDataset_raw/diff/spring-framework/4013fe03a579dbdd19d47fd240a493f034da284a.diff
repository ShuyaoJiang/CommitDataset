[+++ b/spring-web/src/main/java/org/springframework/web/method/ControllerAdviceBean.java, +import java.util.LinkedHashSet;, +import java.util.Set;, + * <p>The {@link #findAnnotatedBeans(ApplicationContext)} method can be used to, + * discover such beans. However, a {@code ControllerAdviceBean} may be created, + * from any object, including ones without an {@code @ControllerAdvice}., + * @author Juergen Hoeller, +	private final int order;, +	private final Set<String> basePackages;, +	private final List<Class<?>> assignableTypes;, +, +	private final List<Class<? extends Annotation>> annotations;, +	 * Create a {@code ControllerAdviceBean} using the given bean instance., +	 * @param bean the bean instance, +	 */, +	public ControllerAdviceBean(Object bean) {, +		this(bean, null);, +	}, +, +	/**, +	 * Create a {@code ControllerAdviceBean} using the given bean name., +		this((Object) beanName, beanFactory);, +	}, +, +	private ControllerAdviceBean(Object bean, BeanFactory beanFactory) {, +		this.bean = bean;, +		this.beanFactory = beanFactory;, +		Class<?> beanType;, +, +		if (bean instanceof String) {, +			String beanName = (String) bean;, +				throw new IllegalArgumentException("BeanFactory [" + beanFactory +, +						"] does not contain specified controller advice bean '" + beanName + "'");, +			beanType = this.beanFactory.getType(beanName);, +		}, +		else {, +			Assert.notNull(bean, "Bean must not be null");, +			beanType = bean.getClass();, +			this.order = initOrderFromBean(bean);, +		if (annotation == null) {, +			throw new IllegalArgumentException(, +					"Bean type [" + beanType.getName() + "] is not annotated as @ControllerAdvice");, +		}, +		this.basePackages = initBasePackages(annotation);, +		this.assignableTypes = Arrays.asList(annotation.assignableTypes());, +		this.annotations = Arrays.asList(annotation.annotations());, +			for (String basePackage : this.basePackages) {, +				if (ClassUtils.getPackageName(beanType).startsWith(basePackage)) {, +					return true;, +				}, +			}, +		return (!this.basePackages.isEmpty() || !this.assignableTypes.isEmpty() || !this.annotations.isEmpty());, +		if (this == other) {, +			return true;, +		}, +		if (!(other instanceof ControllerAdviceBean)) {, +			return false;, +		}, +		ControllerAdviceBean otherAdvice = (ControllerAdviceBean) other;, +		return (this.bean.equals(otherAdvice.bean) && this.beanFactory == otherAdvice.beanFactory);, +	private static Set<String> initBasePackages(ControllerAdvice annotation) {, +		Set<String> basePackages = new LinkedHashSet<String>();, +		for (String basePackage : annotation.value()) {, +			if (StringUtils.hasText(basePackage)) {, +				basePackages.add(basePackage);, +		for (String basePackage : annotation.basePackages()) {, +			if (StringUtils.hasText(basePackage)) {, +				basePackages.add(basePackage);, +			basePackages.add(ClassUtils.getPackageName(markerClass));]