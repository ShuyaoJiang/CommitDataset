[+++ b/spring-web/src/test/java/org/springframework/http/converter/FormHttpMessageConverterTests.java, + * Copyright 2002-2015 the original author or authors., +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.BDDMockito.never;, +import static org.mockito.BDDMockito.verify;, + * @author Rossen Stoyanchev, +	public static final Charset UTF_8 = Charset.forName("UTF-8");, +, +, +, +		this.converter = new AllEncompassingFormHttpMessageConverter();, +, +		assertTrue(this.converter.canRead(MultiValueMap.class,, +				new MediaType("application", "x-www-form-urlencoded")));, +		assertFalse(this.converter.canRead(MultiValueMap.class,, +				new MediaType("multipart", "form-data")));, +		assertTrue(this.converter.canWrite(MultiValueMap.class,, +				new MediaType("application", "x-www-form-urlencoded")));, +		assertTrue(this.converter.canWrite(MultiValueMap.class,, +				new MediaType("multipart", "form-data")));, +		assertTrue(this.converter.canWrite(MultiValueMap.class,, +				new MediaType("multipart", "form-data", Charset.forName("UTF-8"))));, +		assertTrue(this.converter.canWrite(MultiValueMap.class, MediaType.ALL));, +		MultiValueMap<String, String> result = this.converter.read(null, inputMessage);, +		this.converter.write(body, MediaType.APPLICATION_FORM_URLENCODED, outputMessage);, +, +				outputMessage.getBodyAsString(UTF_8));, +		this.converter.setMultipartCharset(UTF_8);, +		this.converter.write(parts, new MediaType("multipart", "form-data", UTF_8), outputMessage);, +		RequestContext requestContext = new MockHttpOutputMessageRequestContext(outputMessage);, +		List<FileItem> items = fileUpload.parseRequest(requestContext);, +, +, +, +			MediaType type = this.outputMessage.getHeaders().getContentType();, +			return (type != null && type.getCharSet() != null ? type.getCharSet().name() : null);, +			MediaType type = this.outputMessage.getHeaders().getContentType();, +			return (type != null ? type.toString() : null);, +			return this.outputMessage.getBodyAsBytes().length;, +			return new ByteArrayInputStream(this.outputMessage.getBodyAsBytes());]