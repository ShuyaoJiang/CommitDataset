[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultConfiguration.java, +import org.springframework.web.reactive.result.view.ViewResolver;, +	private final List<ViewResolver> viewResolvers = new ArrayList<>();, +, +, +	@Override, +	public Supplier<Stream<ViewResolver>> viewResolvers() {, +		return this.viewResolvers::stream;, +	}, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultConfiguration.java, +import org.springframework.web.reactive.result.view.ViewResolver;, +	private final List<ViewResolver> viewResolvers = new ArrayList<>();, +, +, +	@Override, +	public Supplier<Stream<ViewResolver>> viewResolvers() {, +		return this.viewResolvers::stream;, +	}, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultResponseBuilder.java, +import java.util.Collection;, +import java.util.LinkedHashMap;, +import java.util.Map;, +import java.util.stream.Collectors;, +import org.springframework.core.Conventions;, +, +	@Override, +	public Response<Rendering> render(String name, Object... modelAttributes) {, +		Map<String, Object> modelMap = Arrays.stream(modelAttributes), +				.filter(o -> !isEmptyCollection(o)), +				.collect(Collectors.toMap(Conventions::getVariableName, o -> o));, +		return new RenderingResponse(this.statusCode, this.headers, name, modelMap);, +	}, +, +	@Override, +	public Response<Rendering> render(String name, Map<String, ?> model) {, +		Assert.hasLength(name, "'name' must not be empty");, +		Map<String, Object> modelMap = new LinkedHashMap<>();, +		if (model != null) {, +			modelMap.putAll(model);, +		}, +		return new RenderingResponse(this.statusCode, this.headers, name, modelMap);, +	}, +, +	private static boolean isEmptyCollection(Object o) {, +		return o instanceof Collection && ((Collection<?>) o).isEmpty();, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultConfiguration.java, +import org.springframework.web.reactive.result.view.ViewResolver;, +	private final List<ViewResolver> viewResolvers = new ArrayList<>();, +, +, +	@Override, +	public Supplier<Stream<ViewResolver>> viewResolvers() {, +		return this.viewResolvers::stream;, +	}, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultResponseBuilder.java, +import java.util.Collection;, +import java.util.LinkedHashMap;, +import java.util.Map;, +import java.util.stream.Collectors;, +import org.springframework.core.Conventions;, +, +	@Override, +	public Response<Rendering> render(String name, Object... modelAttributes) {, +		Map<String, Object> modelMap = Arrays.stream(modelAttributes), +				.filter(o -> !isEmptyCollection(o)), +				.collect(Collectors.toMap(Conventions::getVariableName, o -> o));, +		return new RenderingResponse(this.statusCode, this.headers, name, modelMap);, +	}, +, +	@Override, +	public Response<Rendering> render(String name, Map<String, ?> model) {, +		Assert.hasLength(name, "'name' must not be empty");, +		Map<String, Object> modelMap = new LinkedHashMap<>();, +		if (model != null) {, +			modelMap.putAll(model);, +		}, +		return new RenderingResponse(this.statusCode, this.headers, name, modelMap);, +	}, +, +	private static boolean isEmptyCollection(Object o) {, +		return o instanceof Collection && ((Collection<?>) o).isEmpty();, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/Rendering.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License.]