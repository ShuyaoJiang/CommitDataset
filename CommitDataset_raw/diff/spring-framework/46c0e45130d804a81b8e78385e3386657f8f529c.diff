[+++ b/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractMessageSendingTemplate.java, +		headers = processHeadersToSend(headers);, +	/**, +	 * Provides access to the map of headers before a send operation., +	 * Implementations can modify the headers by returning a different map., +	 * This implementation returns the map that was passed in (i.e. without any changes)., +	 *, +	 * @param headers the headers to send, possibly {@code null}, +	 * @return the actual headers to send, +	 */, +	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers) {, +		return headers;, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractMessageSendingTemplate.java, +		headers = processHeadersToSend(headers);, +	/**, +	 * Provides access to the map of headers before a send operation., +	 * Implementations can modify the headers by returning a different map., +	 * This implementation returns the map that was passed in (i.e. without any changes)., +	 *, +	 * @param headers the headers to send, possibly {@code null}, +	 * @return the actual headers to send, +	 */, +	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers) {, +		return headers;, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessagingTemplate.java, +import java.util.HashMap;, +import org.springframework.messaging.support.NativeMessageHeaderAccessor;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +	/**, +	 * Creates a new map and puts the given headers under the key, +	 * {@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS NATIVE_HEADERS}., +	 * Effectively this treats all given headers as headers to be sent out to the, +	 * external source., +	 * <p>, +	 * If the given headers already contain the key, +	 * {@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS NATIVE_HEADERS}, +	 * then the same header map is returned (i.e. without any changes)., +	 */, +	@Override, +	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers) {, +, +		if (headers == null) {, +			return null;, +		}, +		else if (headers.containsKey(NativeMessageHeaderAccessor.NATIVE_HEADERS)) {, +			return headers;, +		}, +		else {, +			MultiValueMap<String, String> nativeHeaders = new LinkedMultiValueMap<String, String>(headers.size());, +			for (String key : headers.keySet()) {, +				Object value = headers.get(key);, +				nativeHeaders.set(key, (value != null ? value.toString() : null));, +			}, +, +			headers = new HashMap<String, Object>(1);, +			headers.put(NativeMessageHeaderAccessor.NATIVE_HEADERS, nativeHeaders);, +			return headers;, +		}, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractMessageSendingTemplate.java, +		headers = processHeadersToSend(headers);, +	/**, +	 * Provides access to the map of headers before a send operation., +	 * Implementations can modify the headers by returning a different map., +	 * This implementation returns the map that was passed in (i.e. without any changes)., +	 *, +	 * @param headers the headers to send, possibly {@code null}, +	 * @return the actual headers to send, +	 */, +	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers) {, +		return headers;, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessagingTemplate.java, +import java.util.HashMap;, +import org.springframework.messaging.support.NativeMessageHeaderAccessor;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +	/**, +	 * Creates a new map and puts the given headers under the key, +	 * {@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS NATIVE_HEADERS}., +	 * Effectively this treats all given headers as headers to be sent out to the, +	 * external source., +	 * <p>, +	 * If the given headers already contain the key, +	 * {@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS NATIVE_HEADERS}, +	 * then the same header map is returned (i.e. without any changes)., +	 */, +	@Override, +	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers) {, +, +		if (headers == null) {, +			return null;, +		}]