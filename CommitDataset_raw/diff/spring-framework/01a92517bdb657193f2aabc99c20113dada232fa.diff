[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/FixedContentTypeResolver.java, + * Resolver that always resolves to a fixed list of media types. This can be, + * used as the "last in line" strategy providing a fallback for when the client, + * has not requested any media types., +++ /dev/null, +++ /dev/null, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/FixedContentTypeResolver.java, + * Resolver that always resolves to a fixed list of media types. This can be, + * used as the "last in line" strategy providing a fallback for when the client, + * has not requested any media types., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/HeaderContentTypeResolver.java, + * Resolver that looks at the 'Accept' header of the request., +++ /dev/null, +++ /dev/null, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/FixedContentTypeResolver.java, + * Resolver that always resolves to a fixed list of media types. This can be, + * used as the "last in line" strategy providing a fallback for when the client, + * has not requested any media types., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/HeaderContentTypeResolver.java, + * Resolver that looks at the 'Accept' header of the request., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/ParameterContentTypeResolver.java, + * Copyright 2002-2017 the original author or authors., +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import java.util.Locale;, +import java.util.concurrent.ConcurrentHashMap;, +import org.springframework.http.MediaTypeFactory;, +import org.springframework.util.StringUtils;, +import org.springframework.web.server.NotAcceptableStatusException;, + * Resolver that checks a query parameter and uses it to lookup a matching, + * MediaType. Lookup keys can be registered or as a fallback, + * {@link MediaTypeFactory} can be used to perform a lookup., +public class ParameterContentTypeResolver implements RequestedContentTypeResolver {, +, +	/** Primary lookup for media types by key (e.g. "json" -> "application/json") */, +	private final Map<String, MediaType> mediaTypes = new ConcurrentHashMap<>(64);, +		mediaTypes.forEach((key, value) -> this.mediaTypes.put(formatKey(key), value));, +	}, +, +	private static String formatKey(String key) {, +		return key.toLowerCase(Locale.ENGLISH);, +	 * <p>By default this is set to {@literal "format"}., +	public List<MediaType> resolveMediaTypes(ServerWebExchange exchange) throws NotAcceptableStatusException {, +		String key = exchange.getRequest().getQueryParams().getFirst(getParameterName());, +		if (!StringUtils.hasText(key)) {, +			return Collections.emptyList();, +		}, +		key = formatKey(key);, +		MediaType match = this.mediaTypes.get(key);, +		if (match == null) {, +			match = MediaTypeFactory.getMediaType("filename." + key), +					.orElseThrow(() -> {, +						List<MediaType> supported = new ArrayList<>(this.mediaTypes.values());, +						return new NotAcceptableStatusException(supported);, +					});, +		}, +		this.mediaTypes.putIfAbsent(key, match);, +		return Collections.singletonList(match);, +++ /dev/null, +++ /dev/null, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/FixedContentTypeResolver.java, + * Resolver that always resolves to a fixed list of media types. This can be, + * used as the "last in line" strategy providing a fallback for when the client, + * has not requested any media types., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/HeaderContentTypeResolver.java, + * Resolver that looks at the 'Accept' header of the request., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/ParameterContentTypeResolver.java, + * Copyright 2002-2017 the original author or authors., +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import java.util.Locale;, +import java.util.concurrent.ConcurrentHashMap;, +import org.springframework.http.MediaTypeFactory;, +import org.springframework.util.StringUtils;, +import org.springframework.web.server.NotAcceptableStatusException;, + * Resolver that checks a query parameter and uses it to lookup a matching, + * MediaType. Lookup keys can be registered or as a fallback, + * {@link MediaTypeFactory} can be used to perform a lookup., +public class ParameterContentTypeResolver implements RequestedContentTypeResolver {, +, +	/** Primary lookup for media types by key (e.g. "json" -> "application/json") */, +	private final Map<String, MediaType> mediaTypes = new ConcurrentHashMap<>(64);, +		mediaTypes.forEach((key, value) -> this.mediaTypes.put(formatKey(key), value));, +	}, +, +	private static String formatKey(String key) {, +		return key.toLowerCase(Locale.ENGLISH);, +	 * <p>By default this is set to {@literal "format"}., +	public List<MediaType> resolveMediaTypes(ServerWebExchange exchange) throws NotAcceptableStatusException {, +		String key = exchange.getRequest().getQueryParams().getFirst(getParameterName());, +		if (!StringUtils.hasText(key)) {, +			return Collections.emptyList();, +		}]