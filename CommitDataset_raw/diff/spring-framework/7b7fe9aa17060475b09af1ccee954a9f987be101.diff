[+++ b/src/asciidoc/index.adoc, +are used to create Message-Driven POJOs (MDPs). Spring also provides a declarative way, +of creating message listeners., +The package `org.springframework.jms.annotation` provides the necessary infrastructure, +to support annotation-driven listener endpoints using `@JmsListener`., +, +The package `org.springframework.jms.config` provides the parser implementation for the, +`jms` namespace as well the java config support to configure listener containers and, +create listener endpoints., +, +configuration of the `ConnectionFactory`. This has the effect that a call to, +performance two implementations of `ConnectionFactory` are provided., +`AcknowledgementMode`. MessageProducers and MessageConsumers are cached within their, +for detailed coverage of Spring's MDP support.) As from Spring Framework 4.1, endpoint, +methods can be simply annotated using `@JmsListener` see <<jms-annotated>> for more, +details., +drive the `MessageListener` that is injected into it. The listener container is, +, +[NOTE], +====, +Spring also supports annotated-listener endpoints through the use of the `@JmsListener`, +and provides an open infrastructure to register endpoints programmatically. This, +is by far the most convenient way to setup an asynchronous receiver, see, +<<jms-annotated-support>> for more details., +====, +, +[[jms-annotated]], +=== Annotation-driven listener endpoints, +The easiest way to receive a message asynchronously is to use the annotated listener, +endpoint infrastructure. In a nutshell, it allows you to expose a method of a managed, +bean as a JMS listener endpoint., +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +    @Component, +    public class MyService {, +, +    	@JmsListener(destination = "myDestination"), +    	public void processOrder(String data) { ... }, +    }, +----, +, +The idea of the example above is that whenever a message is available on the, +`javax.jms.Destination` "myDestination", the `processOrder` method is invoked, +accordingly (in this case, with the content of the JMS message similarly to, +what the <<jms-receiving-async-message-listener-adapter, `MessageListenerAdapter`>>, +provides)., +, +The annotated endpoint infrastructure creates a message listener container, +behind the scenes for each annotated method, using a `JmsListenerContainerFactory`., +, +[[jms-annotated-support]], +==== Enable listener endpoint annotations, +, +To enable support for `@JmsListener` annotations add `@EnableJms` to one of, +your `@Configuration` classes., +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Configuration, +	@EnableJms, +	public class AppConfig {, +, +		@Bean, +		public DefaultJmsListenerContainerFactory jmsListenerContainerFactory() {, +			DefaultJmsListenerContainerFactory factory =, +					new DefaultJmsListenerContainerFactory();, +			factory.setConnectionFactory(connectionFactory());, +			factory.setDestinationResolver(destinationResolver());, +			factory.setConcurrency("3-10");, +			return factory;, +		}, +	}, +----, +, +By default, the infrastructure looks for a bean named `jmsListenerContainerFactory`, +as the source for the factory to use to create message listener containers. In this, +case, and ignoring the JMS infrastructure setup, the `processOrder` method can be, +invoked with a core poll size of 3 threads and a maximum pool size of 10 threads., +, +It is possible to customize the listener container factory to use per annotation or, +an explicit default can be configured by implementing the `JmsListenerConfigurer`, +interface. The default is only required if at least one endpoint is registered, +without a specific container factory. See the javadoc for full details and examples., +, +If you prefer <<jms-namespace,XML configuration>> use the `<jms:annotation-driven>`, +element., +, +[source,xml,indent=0], +[subs="verbatim,quotes"], +----, +	<jms:annotation-driven/>, +, +    <bean id="jmsListenerContainerFactory", +            class="org.springframework.jms.config.DefaultJmsListenerContainerFactory">, +        <property name="connectionFactory" ref="connectionFactory"/>, +        <property name="destinationResolver" ref="destinationResolver"/>, +        <property name="concurrency" value="3-10"/>]