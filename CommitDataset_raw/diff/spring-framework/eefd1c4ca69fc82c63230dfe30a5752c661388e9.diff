[+++ b/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/context/JavaConfigTests.java, +import org.mockito.Mockito;, +import org.springframework.http.MediaType;, +import org.springframework.test.context.ContextHierarchy;, +import org.springframework.test.web.Person;, +import org.springframework.test.web.servlet.samples.context.JavaConfigTests.RootConfig;, +import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;, +, +import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;, +import static org.mockito.Mockito.*;, +, +, +@ContextHierarchy({, +	@ContextConfiguration(classes = RootConfig.class),, +}), +	@Autowired, +	private PersonDao personDao;, +, +		when(this.personDao.getPerson(5L)).thenReturn(new Person("Joe"));, +	}, +, +	@Test, +	public void person() throws Exception {, +		this.mockMvc.perform(get("/person/5").accept(MediaType.APPLICATION_JSON)), +			.andDo(print()), +			.andExpect(status().isOk()), +			.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}"));, +	static class RootConfig {, +, +		@Bean, +		public PersonDao personDao() {, +			return Mockito.mock(PersonDao.class);, +		}, +	}, +, +	@Configuration, +		@Autowired, +		private RootConfig rootConfig;, +, +		@Bean, +		public PersonController personController() {, +			return new PersonController(this.rootConfig.personDao());, +		}, +, +++ b/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/context/JavaConfigTests.java, +import org.mockito.Mockito;, +import org.springframework.http.MediaType;, +import org.springframework.test.context.ContextHierarchy;, +import org.springframework.test.web.Person;, +import org.springframework.test.web.servlet.samples.context.JavaConfigTests.RootConfig;, +import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;, +, +import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;, +import static org.mockito.Mockito.*;, +, +, +@ContextHierarchy({, +	@ContextConfiguration(classes = RootConfig.class),, +}), +	@Autowired, +	private PersonDao personDao;, +, +		when(this.personDao.getPerson(5L)).thenReturn(new Person("Joe"));, +	}, +, +	@Test, +	public void person() throws Exception {, +		this.mockMvc.perform(get("/person/5").accept(MediaType.APPLICATION_JSON)), +			.andDo(print()), +			.andExpect(status().isOk()), +			.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}"));, +	static class RootConfig {, +, +		@Bean, +		public PersonDao personDao() {, +			return Mockito.mock(PersonDao.class);, +		}, +	}, +, +	@Configuration, +		@Autowired, +		private RootConfig rootConfig;, +, +		@Bean, +		public PersonController personController() {, +			return new PersonController(this.rootConfig.personDao());, +		}, +, +++ b/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/context/PersonController.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *]