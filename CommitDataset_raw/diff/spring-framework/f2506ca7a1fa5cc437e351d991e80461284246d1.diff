[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandler.java, +			returnValueMono = Mono.from(adapter.toPublisher(result.getReturnValue()));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandler.java, +			returnValueMono = Mono.from(adapter.toPublisher(result.getReturnValue()));, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandlerTests.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandler.java, +			returnValueMono = Mono.from(adapter.toPublisher(result.getReturnValue()));, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandlerTests.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, +		return (HttpEntity.class.isAssignableFrom(returnType.getParameterType()) &&, +				!RequestEntity.class.isAssignableFrom(returnType.getParameterType()));, +		Assert.isAssignable(HttpEntity.class, parameter.getParameterType());, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandler.java, +			returnValueMono = Mono.from(adapter.toPublisher(result.getReturnValue()));, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandlerTests.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, +		return (HttpEntity.class.isAssignableFrom(returnType.getParameterType()) &&, +				!RequestEntity.class.isAssignableFrom(returnType.getParameterType()));, +		Assert.isAssignable(HttpEntity.class, parameter.getParameterType());, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessorMockTests.java, +import java.lang.reflect.Method;, +import static java.time.Instant.*;, +import static java.time.format.DateTimeFormatter.*;, +import static org.springframework.http.MediaType.*;, +import static org.springframework.web.servlet.HandlerMapping.*;, +	private MethodParameter paramHttpEntity;, +, +	private MethodParameter paramRequestEntity;, +, +	private MethodParameter paramResponseEntity;, +, +	private MethodParameter paramInt;, +, +	private MethodParameter returnTypeResponseEntity;, +, +	private MethodParameter returnTypeResponseEntityProduces;, +, +	private MethodParameter returnTypeResponseEntityResource;, +, +	private MethodParameter returnTypeHttpEntity;, +, +	private MethodParameter returnTypeHttpEntitySubclass;, +, +	private MethodParameter returnTypeInt;, +, +		Method handle1 = getClass().getMethod("handle1", HttpEntity.class, ResponseEntity.class,, +				Integer.TYPE, RequestEntity.class);, +, +		paramHttpEntity = new MethodParameter(handle1, 0);, +		paramRequestEntity = new MethodParameter(handle1, 3);, +		paramResponseEntity = new MethodParameter(handle1, 1);, +		paramInt = new MethodParameter(handle1, 2);, +		returnTypeResponseEntity = new MethodParameter(handle1, -1);, +		returnTypeResponseEntityProduces = new MethodParameter(getClass().getMethod("handle4"), -1);, +		returnTypeHttpEntity = new MethodParameter(getClass().getMethod("handle2", HttpEntity.class), -1);, +		returnTypeHttpEntitySubclass = new MethodParameter(getClass().getMethod("handle2x", HttpEntity.class), -1);, +		returnTypeInt = new MethodParameter(getClass().getMethod("handle3"), -1);, +		returnTypeResponseEntityResource = new MethodParameter(getClass().getMethod("handle5"), -1);, +, +		assertTrue("HttpEntity parameter not supported", processor.supportsParameter(paramHttpEntity));, +		assertTrue("RequestEntity parameter not supported", processor.supportsParameter(paramRequestEntity));, +		assertFalse("ResponseEntity parameter supported", processor.supportsParameter(paramResponseEntity));, +		assertFalse("non-entity parameter supported", processor.supportsParameter(paramInt));, +		assertTrue("ResponseEntity return type not supported", processor.supportsReturnType(returnTypeResponseEntity));, +		assertTrue("HttpEntity return type not supported", processor.supportsReturnType(returnTypeHttpEntity));, +		assertTrue("Custom HttpEntity subclass not supported", processor.supportsReturnType(returnTypeHttpEntitySubclass));, +		assertFalse("RequestEntity parameter supported",, +				processor.supportsReturnType(paramRequestEntity));, +		assertFalse("non-ResponseBody return type supported", processor.supportsReturnType(returnTypeInt));, +		processor.handleReturnValue(returnValue, returnTypeResponseEntityProduces, mavContainer, webRequest);, +		processor.handleReturnValue(returnValue, returnTypeResponseEntityProduces, mavContainer, webRequest);, +	public ResponseEntity<String> handle1(HttpEntity<String> httpEntity, ResponseEntity<String> entity,, +			int i, RequestEntity<String> requestEntity) {, +	public HttpEntity<?> handle2(HttpEntity<?> entity) {, +	public CustomHttpEntity handle2x(HttpEntity<?> entity) {, +	public int handle3() {, +		return 42;, +	public ResponseEntity<String> handle4() {, +	public ResponseEntity<Resource> handle5() {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandler.java, +			returnValueMono = Mono.from(adapter.toPublisher(result.getReturnValue()));, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ResponseEntityResultHandlerTests.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, +		return (HttpEntity.class.isAssignableFrom(returnType.getParameterType()) &&, +				!RequestEntity.class.isAssignableFrom(returnType.getParameterType()));, +		Assert.isAssignable(HttpEntity.class, parameter.getParameterType());, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessorMockTests.java, +import java.lang.reflect.Method;, +import static java.time.Instant.*;, +import static java.time.format.DateTimeFormatter.*;, +import static org.springframework.http.MediaType.*;, +import static org.springframework.web.servlet.HandlerMapping.*;, +	private MethodParameter paramHttpEntity;, +, +	private MethodParameter paramRequestEntity;, +, +	private MethodParameter paramResponseEntity;, +, +	private MethodParameter paramInt;, +]