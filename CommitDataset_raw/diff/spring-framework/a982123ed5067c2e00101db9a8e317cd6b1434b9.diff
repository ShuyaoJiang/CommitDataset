[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +			WiretapConnector.Info info = wiretapConnector.claimRequest(this.requestId);, +			return new DefaultResponseSpec(info, clientResponse, this.uriTemplate, getTimeout());, +		private final ExchangeResult exchangeResult;, +		DefaultResponseSpec(WiretapConnector.Info wiretapInfo, ClientResponse response,, +			this.exchangeResult = wiretapInfo.createExchangeResult(uriTemplate);, +			return new StatusAssertions(this.exchangeResult, this);, +			return new HeaderAssertions(this.exchangeResult, this);, +			EntityExchangeResult<B> entityResult = new EntityExchangeResult<>(this.exchangeResult, body);, +			EntityExchangeResult<B> entityResult = new EntityExchangeResult<>(this.exchangeResult, body);, +			EntityExchangeResult<List<E>> entityResult = new EntityExchangeResult<>(this.exchangeResult, body);, +			EntityExchangeResult<byte[]> entityResult = new EntityExchangeResult<>(this.exchangeResult, body);, +			return new FluxExchangeResult<>(this.exchangeResult, body, this.timeout);, +			return new FluxExchangeResult<>(this.exchangeResult, body, this.timeout);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +			WiretapConnector.Info info = wiretapConnector.claimRequest(this.requestId);, +			return new DefaultResponseSpec(info, clientResponse, this.uriTemplate, getTimeout());, +		private final ExchangeResult exchangeResult;, +		DefaultResponseSpec(WiretapConnector.Info wiretapInfo, ClientResponse response,, +			this.exchangeResult = wiretapInfo.createExchangeResult(uriTemplate);, +			return new StatusAssertions(this.exchangeResult, this);, +			return new HeaderAssertions(this.exchangeResult, this);, +			EntityExchangeResult<B> entityResult = new EntityExchangeResult<>(this.exchangeResult, body);, +			EntityExchangeResult<B> entityResult = new EntityExchangeResult<>(this.exchangeResult, body);, +			EntityExchangeResult<List<E>> entityResult = new EntityExchangeResult<>(this.exchangeResult, body);, +			EntityExchangeResult<byte[]> entityResult = new EntityExchangeResult<>(this.exchangeResult, body);, +			return new FluxExchangeResult<>(this.exchangeResult, body, this.timeout);, +			return new FluxExchangeResult<>(this.exchangeResult, body, this.timeout);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java, +import org.springframework.http.client.reactive.ClientHttpRequest;, +import org.springframework.http.client.reactive.ClientHttpResponse;, +	private final ClientHttpRequest request;, +	private final ClientHttpResponse response;, +, +	private final MonoProcessor<byte[]> requestBody;, +, +	private final MonoProcessor<byte[]> responseBody;, +	 * Create an instance with an HTTP request and response along with promises, +	 * for the serialized request and response body content., +	 *, +	 * @param request the HTTP request, +	 * @param response the HTTP response, +	 * @param requestBody capture of serialized request body content, +	 * @param responseBody capture of serialized response body content, +	 * @param uriTemplate the URI template used to set up the request, if any, +	ExchangeResult(ClientHttpRequest request, ClientHttpResponse response,, +			MonoProcessor<byte[]> requestBody, MonoProcessor<byte[]> responseBody,, +			@Nullable String uriTemplate) {, +, +		Assert.notNull(request, "ClientHttpRequest is required");, +		Assert.notNull(response, "ClientHttpResponse is required");, +		Assert.notNull(requestBody, "'requestBody' is required");, +		Assert.notNull(responseBody, "'responseBody' is required");, +, +		this.requestBody = requestBody;, +		this.responseBody = responseBody;, +		this.requestBody = other.requestBody;, +		this.responseBody = other.responseBody;, +		MonoProcessor<byte[]> body = this.requestBody;, +		MonoProcessor<byte[]> body = this.responseBody;, +				formatBody(getRequestHeaders().getContentType(), this.requestBody) + "\n" +, +				formatBody(getResponseHeaders().getContentType(), this.responseBody) +"\n";, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +			WiretapConnector.Info info = wiretapConnector.claimRequest(this.requestId);, +			return new DefaultResponseSpec(info, clientResponse, this.uriTemplate, getTimeout());, +		private final ExchangeResult exchangeResult;, +		DefaultResponseSpec(WiretapConnector.Info wiretapInfo, ClientResponse response,, +			this.exchangeResult = wiretapInfo.createExchangeResult(uriTemplate);, +			return new StatusAssertions(this.exchangeResult, this);, +			return new HeaderAssertions(this.exchangeResult, this);, +			EntityExchangeResult<B> entityResult = new EntityExchangeResult<>(this.exchangeResult, body);, +			EntityExchangeResult<B> entityResult = new EntityExchangeResult<>(this.exchangeResult, body);, +			EntityExchangeResult<List<E>> entityResult = new EntityExchangeResult<>(this.exchangeResult, body);, +			EntityExchangeResult<byte[]> entityResult = new EntityExchangeResult<>(this.exchangeResult, body);, +			return new FluxExchangeResult<>(this.exchangeResult, body, this.timeout);, +			return new FluxExchangeResult<>(this.exchangeResult, body, this.timeout);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java, +import org.springframework.http.client.reactive.ClientHttpRequest;, +import org.springframework.http.client.reactive.ClientHttpResponse;, +	private final ClientHttpRequest request;, +	private final ClientHttpResponse response;, +, +	private final MonoProcessor<byte[]> requestBody;, +, +	private final MonoProcessor<byte[]> responseBody;, +	 * Create an instance with an HTTP request and response along with promises, +	 * for the serialized request and response body content., +	 *, +	 * @param request the HTTP request, +	 * @param response the HTTP response, +	 * @param requestBody capture of serialized request body content, +	 * @param responseBody capture of serialized response body content, +	 * @param uriTemplate the URI template used to set up the request, if any, +	ExchangeResult(ClientHttpRequest request, ClientHttpResponse response,, +			MonoProcessor<byte[]> requestBody, MonoProcessor<byte[]> responseBody,, +			@Nullable String uriTemplate) {, +, +		Assert.notNull(request, "ClientHttpRequest is required");, +		Assert.notNull(response, "ClientHttpResponse is required");, +		Assert.notNull(requestBody, "'requestBody' is required");]