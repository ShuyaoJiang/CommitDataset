[+++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java, +import java.util.List;, +import javax.validation.ParameterNameProvider;, + * <p><b>As of Spring 5.0, this class requires Bean Validation 1.1, with special support, + * for Hibernate Validator 5.x</b> (see {@link #setValidationMessageSource})., +		// TODO: inner class, +		final ParameterNameProvider defaultProvider = configuration.getDefaultParameterNameProvider();, +		configuration.parameterNameProvider(new ParameterNameProvider() {, +			public List<String> getParameterNames(Constructor<?> constructor) {, +				String[] paramNames = discoverer.getParameterNames(constructor);, +				return (paramNames != null ? Arrays.asList(paramNames) :, +						defaultProvider.getParameterNames(constructor));, +			@Override, +			public List<String> getParameterNames(Method method) {, +				String[] paramNames = discoverer.getParameterNames(method);, +				return (paramNames != null ? Arrays.asList(paramNames) :, +						defaultProvider.getParameterNames(method));, +	@Override, +	public ParameterNameProvider getParameterNameProvider() {, +		return this.validatorFactory.getParameterNameProvider();, +	}, +, +		if (this.validatorFactory != null) {, +			this.validatorFactory.close();, +++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java, +import java.util.List;, +import javax.validation.ParameterNameProvider;, + * <p><b>As of Spring 5.0, this class requires Bean Validation 1.1, with special support, + * for Hibernate Validator 5.x</b> (see {@link #setValidationMessageSource})., +		// TODO: inner class, +		final ParameterNameProvider defaultProvider = configuration.getDefaultParameterNameProvider();, +		configuration.parameterNameProvider(new ParameterNameProvider() {, +			public List<String> getParameterNames(Constructor<?> constructor) {, +				String[] paramNames = discoverer.getParameterNames(constructor);, +				return (paramNames != null ? Arrays.asList(paramNames) :, +						defaultProvider.getParameterNames(constructor));, +			@Override, +			public List<String> getParameterNames(Method method) {, +				String[] paramNames = discoverer.getParameterNames(method);, +				return (paramNames != null ? Arrays.asList(paramNames) :, +						defaultProvider.getParameterNames(method));, +	@Override, +	public ParameterNameProvider getParameterNameProvider() {, +		return this.validatorFactory.getParameterNameProvider();, +	}, +, +		if (this.validatorFactory != null) {, +			this.validatorFactory.close();, +++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/MethodValidationInterceptor.java, + * Copyright 2002-2016 the original author or authors., + * <p>As of Spring 5.0, this functionality requires a Bean Validation 1.1 provider, + * (such as Hibernate Validator 5.x)., +		this(Validation.buildDefaultValidatorFactory());, +++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java, +import java.util.List;, +import javax.validation.ParameterNameProvider;, + * <p><b>As of Spring 5.0, this class requires Bean Validation 1.1, with special support, + * for Hibernate Validator 5.x</b> (see {@link #setValidationMessageSource})., +		// TODO: inner class, +		final ParameterNameProvider defaultProvider = configuration.getDefaultParameterNameProvider();, +		configuration.parameterNameProvider(new ParameterNameProvider() {, +			public List<String> getParameterNames(Constructor<?> constructor) {, +				String[] paramNames = discoverer.getParameterNames(constructor);, +				return (paramNames != null ? Arrays.asList(paramNames) :, +						defaultProvider.getParameterNames(constructor));, +			@Override, +			public List<String> getParameterNames(Method method) {, +				String[] paramNames = discoverer.getParameterNames(method);, +				return (paramNames != null ? Arrays.asList(paramNames) :, +						defaultProvider.getParameterNames(method));, +	@Override, +	public ParameterNameProvider getParameterNameProvider() {, +		return this.validatorFactory.getParameterNameProvider();, +	}, +, +		if (this.validatorFactory != null) {, +			this.validatorFactory.close();, +++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/MethodValidationInterceptor.java, + * Copyright 2002-2016 the original author or authors., + * <p>As of Spring 5.0, this functionality requires a Bean Validation 1.1 provider, + * (such as Hibernate Validator 5.x)., +		this(Validation.buildDefaultValidatorFactory());, +++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java, +import javax.validation.executable.ExecutableValidator;, +	@Override, +	public ExecutableValidator forExecutables() {, +		return this.targetValidator.forExecutables();, +	}, +, +++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java, +import java.util.List;, +import javax.validation.ParameterNameProvider;, + * <p><b>As of Spring 5.0, this class requires Bean Validation 1.1, with special support, + * for Hibernate Validator 5.x</b> (see {@link #setValidationMessageSource})., +		// TODO: inner class, +		final ParameterNameProvider defaultProvider = configuration.getDefaultParameterNameProvider();, +		configuration.parameterNameProvider(new ParameterNameProvider() {, +			public List<String> getParameterNames(Constructor<?> constructor) {, +				String[] paramNames = discoverer.getParameterNames(constructor);, +				return (paramNames != null ? Arrays.asList(paramNames) :]