[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/lob/OracleLobHandler.java, + * drivers (classes12, ojdbc14, ojdbc5, ojdbc6) having different constant values!, + * As this LobHandler initializes Oracle classes on instantiation, do not define, + * this as eager-initializing singleton if you do not want to depend on the Oracle, + * @author Thomas Risberg, +	private static final String MODE_READONLY_FIELD_NAME = "MODE_READONLY";, +, +	private Boolean releaseResourcesAfterRead = Boolean.FALSE;, +, +	private final Map<Class, Integer> modeReadOnlyConstants = new HashMap<Class, Integer>(2);, +, +	 * This value will be passed into BLOB/CLOB.createTemporary., +	 *, +	 * <p>Default is <code>true</code>., +	/**, +	 * Set whether to agressively release any resources used by the LOB. If set to <code>true</code>, +	 * then you can only read the LOB values once. Any subsequent reads will fail since the resources, +	 * have been closed., +	 *, +	 * <p>Setting this property to <code>true</code> can be useful when your queries generates large, +	 * temporary LOBs that occupy space in the TEMPORARY tablespace or when you want to free up any, +	 * memory allocated by the driver for the LOB reading., +	 *, +	 * <p>Default is <code>false</code>., +	 * , +	 * @see oracle.sql.BLOB#freeTemporary, +	 * @see oracle.sql.CLOB#freeTemporary, +	 * @see oracle.sql.BLOB#open, +	 * @see oracle.sql.CLOB#open, +	 * @see oracle.sql.BLOB#close, +	 * @see oracle.sql.CLOB#close, +	 * @since 3.0, +	 */, +	public void setReleaseResourcesAfterRead(boolean releaseResources) {, +		this.releaseResourcesAfterRead = releaseResources;, +	}, +, +	 * DURATION_SESSION, MODE_READWRITE and MODE_READONLY constants defined there., +	 * @see oracle.sql.BLOB#MODE_READONLY, +	 * @see oracle.sql.CLOB#MODE_READONLY, +				this.modeReadOnlyConstants.put(, +						this.blobClass, this.blobClass.getField(MODE_READONLY_FIELD_NAME).getInt(null));, +				this.modeReadOnlyConstants.put(, +						this.clobClass, this.clobClass.getField(MODE_READONLY_FIELD_NAME).getInt(null));, +		initializeResourcesBeforeRead(rs.getStatement().getConnection(), blob);, +		byte[] retVal = (blob != null ? blob.getBytes(1, (int) blob.length()) : null);, +		releaseResourcesAfterRead(rs.getStatement().getConnection(), blob);, +		return retVal;, +		initializeResourcesBeforeRead(rs.getStatement().getConnection(), blob);, +		InputStream retVal = (blob != null ? blob.getBinaryStream() : null);, +		releaseResourcesAfterRead(rs.getStatement().getConnection(), blob);, +		return retVal;, +		initializeResourcesBeforeRead(rs.getStatement().getConnection(), clob);, +		String retVal = (clob != null ? clob.getSubString(1, (int) clob.length()) : null);, +		releaseResourcesAfterRead(rs.getStatement().getConnection(), clob);, +		return retVal;, +		initializeResourcesBeforeRead(rs.getStatement().getConnection(), clob);, +		InputStream retVal = (clob != null ? clob.getAsciiStream() : null);, +		releaseResourcesAfterRead(rs.getStatement().getConnection(), clob);, +		return retVal;, +		initializeResourcesBeforeRead(rs.getStatement().getConnection(), clob);, +		Reader retVal = (clob != null ? clob.getCharacterStream() : null);, +		releaseResourcesAfterRead(rs.getStatement().getConnection(), clob);, +		return retVal;, +	/**, +	 * Initialize any LOB resources before a read is done., +	 *, +	 * <p>This implementation calls, +	 * <code>BLOB.open(BLOB.MODE_READONLY)</code> or <code>CLOB.open(CLOB.MODE_READONLY)</code>, +	 * on any non-temporary LOBs  , +	 * if <code>releaseResourcesAfterRead</code> property is set to <code>true</code>., +	 * <p>This method can be overridden by sublcasses if different behavior is desired., +	 * @param con the connection to be usde for initilization, +	 * @param lob the LOB to initialize, +	 */, +	protected void initializeResourcesBeforeRead(Connection con, Object lob) {, +		if (releaseResourcesAfterRead) {, +			initOracleDriverClasses(con);, +			try {, +				/*, +				if (!((BLOB)lob.isTemporary() {, +				*/, +				Method isTemporary = lob.getClass().getMethod("isTemporary");, +				Boolean temporary = (Boolean) isTemporary.invoke(lob);, +				if (!temporary) {, +					/*, +					((BLOB)lob).open(BLOB.MODE_READONLY);, +					*/, +					Method open = lob.getClass().getMethod("open", int.class);, +					open.invoke(lob, modeReadOnlyConstants.get(lob.getClass()));, +				}, +			}, +			catch (InvocationTargetException ex) {, +				logger.error("Could not open Oracle LOB", ex.getTargetException());, +			}, +			catch (Exception ex) {, +				throw new DataAccessResourceFailureException("Could not open Oracle LOB", ex);, +			}, +		}, +	}]