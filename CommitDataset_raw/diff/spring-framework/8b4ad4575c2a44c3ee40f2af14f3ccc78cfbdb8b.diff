[+++ /dev/null, +++ /dev/null, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/ConfigurationClassPostProcessor.java, +		return new ConfigurationParser(this.getProblemReporter(), beanFactory.getBeanClassLoader());, +++ /dev/null, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/ConfigurationClassPostProcessor.java, +		return new ConfigurationParser(this.getProblemReporter(), beanFactory.getBeanClassLoader());, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/ConfigurationClassVisitor.java, +import static java.lang.String.*;, +import java.util.Stack;, +import org.springframework.asm.commons.EmptyVisitor;, +import org.springframework.beans.factory.parsing.Location;, +import org.springframework.beans.factory.parsing.Problem;, +import org.springframework.beans.factory.parsing.ProblemReporter;, +import org.springframework.core.io.FileSystemResource;, +	private final ProblemReporter problemReporter;, +	public ConfigurationClassVisitor(ConfigurationClass configClass, ConfigurationModel model,, +	                                 ProblemReporter problemReporter, ClassLoader classLoader) {, +		this.problemReporter = problemReporter;, +		ConfigurationClassVisitor visitor =, +			new ConfigurationClassVisitor(configClass, model, problemReporter, classLoader);, +			if (importStack.contains(configClass)) {, +				//throw new CircularImportException(configClass, importStack);, +				problemReporter.error(new CircularImportProblem(configClass, importStack));, +				return new EmptyVisitor();, +			}, +			return new ImportAnnotationVisitor(model, problemReporter, classLoader);, +			new ConfigurationClassVisitor(innerConfigClass, new ConfigurationModel(), problemReporter, classLoader);, +, +, +	/**, +	 * {@link Problem} registered upon detection of a circular {@link Import}., +	 * , +	 * @see Import, +	 * @see ImportStack, +	 * @see ImportStackHolder, +	 */, +	class CircularImportProblem extends Problem {, +, +		public CircularImportProblem(ConfigurationClass attemptedImport, Stack<ConfigurationClass> currentImportStack) {, +			super(format("A circular @Import has been detected: " +, +			             "Illegal attempt by @Configuration class '%s' to import class '%s' as '%s' is " +, +			             "already present in the current import stack [%s]",, +			             currentImportStack.peek().getSimpleName(), attemptedImport.getSimpleName(),, +			             attemptedImport.getSimpleName(), currentImportStack),, +			      new Location(new FileSystemResource("/dev/null")), +			);, +		}, +, +	}, +, +++ /dev/null, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/ConfigurationClassPostProcessor.java, +		return new ConfigurationParser(this.getProblemReporter(), beanFactory.getBeanClassLoader());, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/ConfigurationClassVisitor.java, +import static java.lang.String.*;, +import java.util.Stack;, +import org.springframework.asm.commons.EmptyVisitor;, +import org.springframework.beans.factory.parsing.Location;, +import org.springframework.beans.factory.parsing.Problem;, +import org.springframework.beans.factory.parsing.ProblemReporter;, +import org.springframework.core.io.FileSystemResource;, +	private final ProblemReporter problemReporter;, +	public ConfigurationClassVisitor(ConfigurationClass configClass, ConfigurationModel model,, +	                                 ProblemReporter problemReporter, ClassLoader classLoader) {, +		this.problemReporter = problemReporter;, +		ConfigurationClassVisitor visitor =, +			new ConfigurationClassVisitor(configClass, model, problemReporter, classLoader);, +			if (importStack.contains(configClass)) {, +				//throw new CircularImportException(configClass, importStack);, +				problemReporter.error(new CircularImportProblem(configClass, importStack));, +				return new EmptyVisitor();, +			}, +			return new ImportAnnotationVisitor(model, problemReporter, classLoader);, +			new ConfigurationClassVisitor(innerConfigClass, new ConfigurationModel(), problemReporter, classLoader);, +, +, +	/**, +	 * {@link Problem} registered upon detection of a circular {@link Import}., +	 * , +	 * @see Import, +	 * @see ImportStack, +	 * @see ImportStackHolder, +	 */, +	class CircularImportProblem extends Problem {, +, +		public CircularImportProblem(ConfigurationClass attemptedImport, Stack<ConfigurationClass> currentImportStack) {, +			super(format("A circular @Import has been detected: " +, +			             "Illegal attempt by @Configuration class '%s' to import class '%s' as '%s' is " +, +			             "already present in the current import stack [%s]",, +			             currentImportStack.peek().getSimpleName(), attemptedImport.getSimpleName(),, +			             attemptedImport.getSimpleName(), currentImportStack),, +			      new Location(new FileSystemResource("/dev/null")), +			);, +		}, +, +	}, +, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/ConfigurationParser.java, +import org.springframework.beans.factory.parsing.ProblemReporter;]