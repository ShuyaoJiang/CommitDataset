[+++ b/spring-test/src/main/java/org/springframework/test/context/web/ServletTestExecutionListener.java, +import org.springframework.core.Conventions;, +	/**, +	 * Attribute name for a {@link TestContext} attribute which indicates, +	 * whether or not the {@code ServletTestExecutionListener} should {@linkplain, +	 * RequestContextHolder#resetRequestAttributes() reset} Spring Web's, +	 * {@code RequestContextHolder} in {@link #afterTestMethod(TestContext)}., +	 *, +	 * <p>Permissible values include {@link Boolean#TRUE} and {@link Boolean#FALSE}., +	 */, +	public static final String RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE = Conventions.getQualifiedAttributeName(, +		ServletTestExecutionListener.class, "resetRequestContextHolder");, +, +		if (Boolean.TRUE.equals(testContext.getAttribute(RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE))) {, +			testContext.removeAttribute(RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE);, +		}, +				testContext.setAttribute(RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE, Boolean.TRUE);, +++ b/spring-test/src/main/java/org/springframework/test/context/web/ServletTestExecutionListener.java, +import org.springframework.core.Conventions;, +	/**, +	 * Attribute name for a {@link TestContext} attribute which indicates, +	 * whether or not the {@code ServletTestExecutionListener} should {@linkplain, +	 * RequestContextHolder#resetRequestAttributes() reset} Spring Web's, +	 * {@code RequestContextHolder} in {@link #afterTestMethod(TestContext)}., +	 *, +	 * <p>Permissible values include {@link Boolean#TRUE} and {@link Boolean#FALSE}., +	 */, +	public static final String RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE = Conventions.getQualifiedAttributeName(, +		ServletTestExecutionListener.class, "resetRequestContextHolder");, +, +		if (Boolean.TRUE.equals(testContext.getAttribute(RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE))) {, +			testContext.removeAttribute(RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE);, +		}, +				testContext.setAttribute(RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE, Boolean.TRUE);, +++ b/spring-test/src/test/java/org/springframework/test/context/web/ServletTestExecutionListenerTests.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.test.context.web;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.springframework.context.ApplicationContext;, +import org.springframework.mock.web.MockHttpServletRequest;, +import org.springframework.mock.web.MockHttpServletResponse;, +import org.springframework.mock.web.MockServletContext;, +import org.springframework.test.context.TestContext;, +import org.springframework.web.context.WebApplicationContext;, +import org.springframework.web.context.request.RequestAttributes;, +import org.springframework.web.context.request.RequestContextHolder;, +import org.springframework.web.context.request.ServletWebRequest;, +, +import static org.junit.Assert.*;, +import static org.mockito.Mockito.*;, +import static org.springframework.test.context.web.ServletTestExecutionListener.*;, +, +/**, + * Unit tests for {@link ServletTestExecutionListener}., + *, + * @author Sam Brannen, + * @since 3.2.6, + */, +public class ServletTestExecutionListenerTests {, +, +	private static final String SET_UP_OUTSIDE_OF_STEL = "SET_UP_OUTSIDE_OF_STEL";, +, +	private final WebApplicationContext wac = mock(WebApplicationContext.class);, +	private final MockServletContext mockServletContext = new MockServletContext();, +	private final TestContext testContext = mock(TestContext.class);, +	private final ServletTestExecutionListener listener = new ServletTestExecutionListener();, +, +, +	private void assertAttributeExists() {, +		RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();, +		assertNotNull("request attributes should exist", requestAttributes);, +		Object setUpOutsideOfStel = requestAttributes.getAttribute(SET_UP_OUTSIDE_OF_STEL,, +			RequestAttributes.SCOPE_REQUEST);, +		assertNotNull(SET_UP_OUTSIDE_OF_STEL + " should exist as a request attribute", setUpOutsideOfStel);, +	}, +, +	private void assertAttributeDoesNotExist() {, +		RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();, +		assertNotNull("request attributes should exist", requestAttributes);, +		Object setUpOutsideOfStel = requestAttributes.getAttribute(SET_UP_OUTSIDE_OF_STEL,, +			RequestAttributes.SCOPE_REQUEST);, +		assertNull(SET_UP_OUTSIDE_OF_STEL + " should NOT exist as a request attribute", setUpOutsideOfStel);, +	}]