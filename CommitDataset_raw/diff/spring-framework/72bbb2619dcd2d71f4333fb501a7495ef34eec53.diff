[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/HttpHandlerConnector.java, +		mockServerResponse.setWriteHandler(responseBody ->, +				Mono.fromRunnable(() -> {, +				}));, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/HttpHandlerConnector.java, +		mockServerResponse.setWriteHandler(responseBody ->, +				Mono.fromRunnable(() -> {, +				}));, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +	 * <p><strong>Note:</strong> the supplied action must be properly deferred,, +	 * e.g. via {@link Mono#defer} or {@link Mono#fromRunnable}, to ensure it's, +	 * executed in the right order, relative to other actions., +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/HttpHandlerConnector.java, +		mockServerResponse.setWriteHandler(responseBody ->, +				Mono.fromRunnable(() -> {, +				}));, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +	 * <p><strong>Note:</strong> the supplied action must be properly deferred,, +	 * e.g. via {@link Mono#defer} or {@link Mono#fromRunnable}, to ensure it's, +	 * executed in the right order, relative to other actions., +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +		this.commitActions.add(() ->, +				Mono.fromRunnable(() -> {, +				}));, +		return Flux.concat(actions).then();, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/HttpHandlerConnector.java, +		mockServerResponse.setWriteHandler(responseBody ->, +				Mono.fromRunnable(() -> {, +				}));, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +	 * <p><strong>Note:</strong> the supplied action must be properly deferred,, +	 * e.g. via {@link Mono#defer} or {@link Mono#fromRunnable}, to ensure it's, +	 * executed in the right order, relative to other actions., +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +		this.commitActions.add(() ->, +				Mono.fromRunnable(() -> {, +				}));, +		return Flux.concat(actions).then();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpResponse.java, + * Copyright 2002-2018 the original author or authors., +		return doCommit(() ->, +				Mono.defer(() -> {, +, +				}));, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/HttpHandlerConnector.java, +		mockServerResponse.setWriteHandler(responseBody ->, +				Mono.fromRunnable(() -> {, +				}));, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +	 * <p><strong>Note:</strong> the supplied action must be properly deferred,, +	 * e.g. via {@link Mono#defer} or {@link Mono#fromRunnable}, to ensure it's, +	 * executed in the right order, relative to other actions., +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +		this.commitActions.add(() ->, +				Mono.fromRunnable(() -> {, +				}));, +		return Flux.concat(actions).then();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpResponse.java, + * Copyright 2002-2018 the original author or authors., +		return doCommit(() ->, +				Mono.defer(() -> {, +, +				}));, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/ServerHttpResponseTests.java, + * Copyright 2002-2018 the original author or authors., +		response.beforeCommit(() -> Mono.fromRunnable(() -> response.getCookies().add(cookie.getName(), cookie)));, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/HttpHandlerConnector.java, +		mockServerResponse.setWriteHandler(responseBody ->, +				Mono.fromRunnable(() -> {, +				}));, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +	 * <p><strong>Note:</strong> the supplied action must be properly deferred,, +	 * e.g. via {@link Mono#defer} or {@link Mono#fromRunnable}, to ensure it's, +	 * executed in the right order, relative to other actions., +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +		this.commitActions.add(() ->, +				Mono.fromRunnable(() -> {, +				}));, +		return Flux.concat(actions).then();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpResponse.java, + * Copyright 2002-2018 the original author or authors., +		return doCommit(() ->, +				Mono.defer(() -> {, +, +				}));, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/ServerHttpResponseTests.java, + * Copyright 2002-2018 the original author or authors., +		response.beforeCommit(() -> Mono.fromRunnable(() -> response.getCookies().add(cookie.getName(), cookie)));, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/ZeroCopyIntegrationTests.java, + * Copyright 2002-2018 the original author or authors., +		URI url = new URI("http://localhost:" + port);, +		RequestEntity<?> request = RequestEntity.get(url).build();, +		ResponseEntity<byte[]> response = new RestTemplate().exchange(request, byte[].class);, +		Resource logo = new ClassPathResource("spring.png", ZeroCopyIntegrationTests.class);, +				ZeroCopyHttpOutputMessage zeroCopyResponse = (ZeroCopyHttpOutputMessage) response;, +				Resource logo = new ClassPathResource("spring.png", ZeroCopyIntegrationTests.class);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/HttpHandlerConnector.java, +		mockServerResponse.setWriteHandler(responseBody ->, +				Mono.fromRunnable(() -> {, +				}));]