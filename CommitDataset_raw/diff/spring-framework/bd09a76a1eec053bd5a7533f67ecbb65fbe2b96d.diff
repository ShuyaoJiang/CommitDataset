[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/HandshakeInfo.java, +	private HttpHeaders headers;, +	private Optional<String> protocol;, +, +, +	public HandshakeInfo(URI uri, Mono<Principal> principal) {, +		this(uri, new HttpHeaders(), principal, Optional.empty());, +	}, +	 * Sets the handshake HTTP headers. Those are the request headers for a, +	 * server session and the response headers for a client session., +	 * @param headers the handshake HTTP headers., +	 */, +	public void setHeaders(HttpHeaders headers) {, +		this.headers = headers;, +	}, +, +	/**, +	/**, +	 * Sets the sub-protocol negotiated at handshake time., +	 * @param protocol the sub-protocol negotiated at handshake time., +	 */, +	public void setSubProtocol(Optional<String> protocol) {, +		this.protocol = protocol;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/HandshakeInfo.java, +	private HttpHeaders headers;, +	private Optional<String> protocol;, +, +, +	public HandshakeInfo(URI uri, Mono<Principal> principal) {, +		this(uri, new HttpHeaders(), principal, Optional.empty());, +	}, +	 * Sets the handshake HTTP headers. Those are the request headers for a, +	 * server session and the response headers for a client session., +	 * @param headers the handshake HTTP headers., +	 */, +	public void setHeaders(HttpHeaders headers) {, +		this.headers = headers;, +	}, +, +	/**, +	/**, +	 * Sets the sub-protocol negotiated at handshake time., +	 * @param protocol the sub-protocol negotiated at handshake time., +	 */, +	public void setSubProtocol(Optional<String> protocol) {, +		this.protocol = protocol;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketHandlerAdapter.java, +import reactor.core.publisher.MonoProcessor;, +	private final MonoProcessor<Void> completionMono;, +, +		this(delegate, info, bufferFactory, null);, +	}, +, +	public JettyWebSocketHandlerAdapter(WebSocketHandler delegate, HandshakeInfo info,, +			DataBufferFactory bufferFactory, MonoProcessor<Void> completionMono) {, +, +		this.completionMono = completionMono;, +			if (completionMono != null) {, +				completionMono.onError(ex);, +			}, +			if (completionMono != null) {, +				completionMono.onComplete();, +			}, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/HandshakeInfo.java, +	private HttpHeaders headers;, +	private Optional<String> protocol;, +, +, +	public HandshakeInfo(URI uri, Mono<Principal> principal) {, +		this(uri, new HttpHeaders(), principal, Optional.empty());, +	}, +	 * Sets the handshake HTTP headers. Those are the request headers for a, +	 * server session and the response headers for a client session., +	 * @param headers the handshake HTTP headers., +	 */, +	public void setHeaders(HttpHeaders headers) {, +		this.headers = headers;, +	}, +, +	/**, +	/**, +	 * Sets the sub-protocol negotiated at handshake time., +	 * @param protocol the sub-protocol negotiated at handshake time., +	 */, +	public void setSubProtocol(Optional<String> protocol) {, +		this.protocol = protocol;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketHandlerAdapter.java, +import reactor.core.publisher.MonoProcessor;, +	private final MonoProcessor<Void> completionMono;, +, +		this(delegate, info, bufferFactory, null);, +	}, +, +	public JettyWebSocketHandlerAdapter(WebSocketHandler delegate, HandshakeInfo info,]