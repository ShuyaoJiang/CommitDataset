[+++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, +import java.util.Date;, +	/**, +	 * Return the HTTP method of the request., +	 * @since 4.0.2, +	 */, +	public HttpMethod getHttpMethod() {, +		return HttpMethod.valueOf(getRequest().getMethod().trim().toUpperCase());, +	}, +, +	@SuppressWarnings("deprecation"), +			long ifModifiedSince = -1;, +			try {, +				ifModifiedSince = getRequest().getDateHeader(HEADER_IF_MODIFIED_SINCE);, +			}, +			catch (IllegalArgumentException ex) {, +				String headerValue = getRequest().getHeader(HEADER_IF_MODIFIED_SINCE);, +				// Possibly an IE 10 style value: "Wed, 09 Apr 2014 09:57:42 GMT; length=13774", +				int separatorIndex = headerValue.indexOf(';');, +				if (separatorIndex != -1) {, +					String datePart = headerValue.substring(0, separatorIndex);, +					try {, +						ifModifiedSince = Date.parse(datePart);, +					}, +					catch (IllegalArgumentException ex2) {, +						// Giving up, +					}, +				}, +			}, +	public boolean checkNotModified(String etag) {, +		if (StringUtils.hasLength(etag) && !this.notModified &&, +			this.notModified = etag.equals(ifNoneMatch);, +					this.response.setHeader(HEADER_ETAG, etag);, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, +import java.util.Date;, +	/**, +	 * Return the HTTP method of the request., +	 * @since 4.0.2, +	 */, +	public HttpMethod getHttpMethod() {, +		return HttpMethod.valueOf(getRequest().getMethod().trim().toUpperCase());, +	}, +, +	@SuppressWarnings("deprecation"), +			long ifModifiedSince = -1;, +			try {, +				ifModifiedSince = getRequest().getDateHeader(HEADER_IF_MODIFIED_SINCE);, +			}, +			catch (IllegalArgumentException ex) {, +				String headerValue = getRequest().getHeader(HEADER_IF_MODIFIED_SINCE);, +				// Possibly an IE 10 style value: "Wed, 09 Apr 2014 09:57:42 GMT; length=13774", +				int separatorIndex = headerValue.indexOf(';');, +				if (separatorIndex != -1) {, +					String datePart = headerValue.substring(0, separatorIndex);, +					try {, +						ifModifiedSince = Date.parse(datePart);, +					}, +					catch (IllegalArgumentException ex2) {, +						// Giving up, +					}, +				}, +			}, +	public boolean checkNotModified(String etag) {, +		if (StringUtils.hasLength(etag) && !this.notModified &&, +			this.notModified = etag.equals(ifNoneMatch);, +					this.response.setHeader(HEADER_ETAG, etag);, +++ b/spring-web/src/main/java/org/springframework/web/context/request/WebRequest.java, + * Copyright 2002-2014 the original author or authors., +	 * this {@code #checkNotModified(long)} method; or, +	 * <p>If the "If-Modified-Since" header is set but cannot be parsed, +	 * to a date value, this method will ignore the header and proceed, +	 * with setting the last-modified timestamp on the response., +	 * this {@code #checkNotModified(String)} method; or, +	 * @param etag the entity tag that the application determined, +	boolean checkNotModified(String etag);, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, +import java.util.Date;, +	/**, +	 * Return the HTTP method of the request., +	 * @since 4.0.2, +	 */, +	public HttpMethod getHttpMethod() {, +		return HttpMethod.valueOf(getRequest().getMethod().trim().toUpperCase());, +	}, +, +	@SuppressWarnings("deprecation"), +			long ifModifiedSince = -1;, +			try {, +				ifModifiedSince = getRequest().getDateHeader(HEADER_IF_MODIFIED_SINCE);, +			}, +			catch (IllegalArgumentException ex) {, +				String headerValue = getRequest().getHeader(HEADER_IF_MODIFIED_SINCE);, +				// Possibly an IE 10 style value: "Wed, 09 Apr 2014 09:57:42 GMT; length=13774", +				int separatorIndex = headerValue.indexOf(';');, +				if (separatorIndex != -1) {, +					String datePart = headerValue.substring(0, separatorIndex);, +					try {, +						ifModifiedSince = Date.parse(datePart);, +					}, +					catch (IllegalArgumentException ex2) {]