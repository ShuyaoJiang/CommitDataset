[+++ b/spring-framework-reference/src/testing.xml, +      <section id="integration-testing-annotations-spring">, +        <title>Spring Testing Annotations</title>, +, +        including default attribute values, attribute aliases, and so, +        on.</para>, +            <para>Defines class-level metadata that is used to determine how, +            to load and configure an, +            <interfacename>ApplicationContext</interfacename> for test, +            classes. Specifically,, +            <interfacename>@ContextConfiguration</interfacename> declares, +            <emphasis>either</emphasis> the application context resource, +            <literal>locations</literal> <emphasis>or</emphasis> the, +            to explicitly configure the loader since the default loader, +            supports either resource <varname>locations</varname> or, +            configuration <varname>classes</varname>.</para>, +                with class mode set to <literal>AFTER_CLASS</literal>, which, +                is the default class mode.</para>, +                <para>After the current test, when declared on a, +                method.</para>, +            <interfacename>@DirtiesContext</interfacename> as both a, +            class-level and method-level annotation within the same test, +            class. In such scenarios, the, +            <interfacename>ApplicationContext</interfacename> is marked as, +            <emphasis>dirty</emphasis> after any such annotated method as well, +            as after the entire class. If the <classname>ClassMode</classname>, +            is set to <literal>AFTER_EACH_TEST_METHOD</literal>, the context, +            is marked dirty after each test method in the class.</para>, +            is rebuilt for any subsequent test that requires a context with, +            the same set of resource locations.</para>, +            Typically, <interfacename>@TestExecutionListeners</interfacename>, +            is used in conjunction with, +            <interfacename>PlatformTransactionManager</interfacename> that is, +            to be used to drive transactions can be explicitly configured if, +            the bean name of the desired, +            <literal>defaultRollback</literal> flag to, +            <literal>false</literal>. Typically,, +            <interfacename>@TransactionConfiguration</interfacename> is used, +            in conjunction with, +            method has completed. If <literal>true</literal>, the transaction, +            is rolled back; otherwise, the transaction is committed. Use, +            method should be executed <emphasis>before</emphasis> a, +            transaction is started for test methods configured to run within a, +            transaction via the <interfacename>@Transactional</interfacename>, +            test method must <emphasis>not</emphasis> execute in a, +            transactional context.</para>, +              <interfacename>@NotTransactional</interfacename> is deprecated, +              in favor of moving the <emphasis>non-transactional</emphasis>, +              test method to a separate (non-transactional) test class or to a, +              <interfacename>@Transactional</interfacename>, consider, +              annotating individual methods with, +      </section>, +      <section id="integration-testing-annotations-standard">, +        <title>Standard Annotation Support</title>, +            (javax.annotation) <emphasis>if JSR-250 is, +            present</emphasis></para>, +      <section id="integration-testing-annotations-junit">, +        <title>Spring JUnit Testing Annotations</title>, +, +        <para>The following annotations are <emphasis>only</emphasis>, +        supported when used in conjunction with the <link, +        linkend="testcontext-junit4-runner">SpringJUnit4ClassRunner</link> or, +        the <link linkend="testcontext-support-classes-junit4">JUnit</link>, +        support classes.</para>, +, +        <itemizedlist>, +          <listitem>, +            <para><emphasis, +            role="bold"><interfacename>@IfProfileValue</interfacename></emphasis></para>, +, +            <para>Indicates that the annotated test is enabled for a specific, +            testing environment. If the configured, +            <classname>ProfileValueSource</classname> returns a matching, +            <literal>value</literal> for the provided <literal>name</literal>,, +            the test is enabled. This annotation can be applied to an entire, +            class or to individual methods. Class-level usage overrides, +            method-level usage.</para>, +, +            <programlisting language="java"><emphasis role="bold">@IfProfileValue</emphasis>(<emphasis, +                role="bold">name</emphasis>="java.vendor", <emphasis, +                role="bold">value</emphasis>="Sun Microsystems Inc."), +@Test, +public void testProcessWhichRunsOnlyOnSunJvm() {, +    <lineannotation>// some logic that should run only on Java VMs from Sun Microsystems</lineannotation>, +}</programlisting>, +, +            <para>Alternatively, you can configure, +            <interfacename>@IfProfileValue</interfacename> with a list of, +            <literal>values</literal> (with <emphasis>OR</emphasis> semantics), +            to achieve TestNG-like support for <emphasis>test, +            groups</emphasis> in a JUnit environment. Consider the following, +            example:</para>, +, +            <programlisting language="java"><emphasis role="bold">@IfProfileValue</emphasis>(<emphasis, +                role="bold">name</emphasis>="test-groups", <emphasis, +                role="bold">values</emphasis>={"unit-tests", "integration-tests"}), +@Test, +public void testProcessWhichRunsForUnitOrIntegrationTestGroups() {, +    <lineannotation>// some logic that should run only for unit and integration test groups</lineannotation>, +}</programlisting>]