[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/JdbcOperations.java, +import java.util.Collection;, +	/**, +	 * Execute multiple batches using the supplied SQL statement with the collect of supplied arguments., +	 * The arguments' values will be set using the ParameterizedPreparedStatementSetter., +	 * Each batch should be of size indicated in 'batchSize'., +	 * @param sql the SQL statement to execute., +	 * @param batchArgs the List of Object arrays containing the batch of arguments for the query, +	 * @param argTypes SQL types of the arguments, +	 * (constants from <code>java.sql.Types</code>), +	 * @return an array containing for each batch another array containing the numbers of rows affected , +	 * by each update in the batch, +	 */, +	public <T> int[][] batchUpdate(String sql, Collection<T> batchArgs, int batchSize, ParameterizedPreparedStatementSetter<T> pss);, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/JdbcOperations.java, +import java.util.Collection;, +	/**, +	 * Execute multiple batches using the supplied SQL statement with the collect of supplied arguments., +	 * The arguments' values will be set using the ParameterizedPreparedStatementSetter., +	 * Each batch should be of size indicated in 'batchSize'., +	 * @param sql the SQL statement to execute., +	 * @param batchArgs the List of Object arrays containing the batch of arguments for the query, +	 * @param argTypes SQL types of the arguments, +	 * (constants from <code>java.sql.Types</code>), +	 * @return an array containing for each batch another array containing the numbers of rows affected , +	 * by each update in the batch, +	 */, +	public <T> int[][] batchUpdate(String sql, Collection<T> batchArgs, int batchSize, ParameterizedPreparedStatementSetter<T> pss);, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java, +import java.util.Collection;, +	/*, +	 * (non-Javadoc), +	 * @see org.springframework.jdbc.core.JdbcOperations#batchUpdate(java.lang.String, java.util.Collection, int, org.springframework.jdbc.core.ParameterizedPreparedStatementSetter), +	 * , +	 * Contribution by Nicolas Fabre, +	 */, +	public <T> int[][] batchUpdate(String sql, final Collection<T> batchArgs, final int batchSize, final ParameterizedPreparedStatementSetter<T> pss) {, +		if (logger.isDebugEnabled()) {, +			logger.debug("Executing SQL batch update [" + sql + "] with a batch size of " + batchSize);, +		}, +		return execute(sql, new PreparedStatementCallback<int[][]>() {, +			public int[][] doInPreparedStatement(PreparedStatement ps) throws SQLException {, +				List<int[]> rowsAffected = new ArrayList<int[]>();, +				try {, +					boolean batchSupported = true;, +					if (!JdbcUtils.supportsBatchUpdates(ps.getConnection())) {, +						batchSupported = false;, +						logger.warn("JDBC Driver does not support Batch updates; resorting to single statement execution");, +					}, +					int n = 0;, +					for (T obj : batchArgs) {, +						pss.setValues(ps, obj);, +						n++;, +						if (batchSupported) {, +							ps.addBatch();, +							if (n % batchSize == 0 || n == batchArgs.size()) {, +								if (logger.isDebugEnabled()) {, +									int batchIdx = (n % batchSize == 0) ? n / batchSize : (n / batchSize) + 1;, +									int items = n - ((n % batchSize == 0) ? n / batchSize - 1 : (n / batchSize)) * batchSize;, +									logger.debug("Sending SQL batch update #" + batchIdx + " with " + items + " items");, +								}, +								rowsAffected.add(ps.executeBatch());, +							}, +						}, +						else {, +							int i = ps.executeUpdate();, +							rowsAffected.add(new int[] {i});, +						}, +					}, +					int[][] result = new int[rowsAffected.size()][];, +					for (int i = 0; i < result.length; i++) {, +						result[i] = rowsAffected.get(i);, +					}, +					return result;, +				} finally {, +					if (pss instanceof ParameterDisposer) {, +						((ParameterDisposer) pss).cleanupParameters();, +					}, +				}, +			}, +		});, +	}, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/JdbcOperations.java, +import java.util.Collection;, +	/**, +	 * Execute multiple batches using the supplied SQL statement with the collect of supplied arguments., +	 * The arguments' values will be set using the ParameterizedPreparedStatementSetter., +	 * Each batch should be of size indicated in 'batchSize'., +	 * @param sql the SQL statement to execute., +	 * @param batchArgs the List of Object arrays containing the batch of arguments for the query, +	 * @param argTypes SQL types of the arguments, +	 * (constants from <code>java.sql.Types</code>), +	 * @return an array containing for each batch another array containing the numbers of rows affected , +	 * by each update in the batch, +	 */, +	public <T> int[][] batchUpdate(String sql, Collection<T> batchArgs, int batchSize, ParameterizedPreparedStatementSetter<T> pss);, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java, +import java.util.Collection;, +	/*, +	 * (non-Javadoc)]