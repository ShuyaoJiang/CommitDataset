[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java, +	 * @param uri the URL, +	MockHttpServletRequestBuilder(HttpMethod httpMethod, URI uri) {, +		Assert.notNull(uri, "uri is required");, +		this.uriComponents = UriComponentsBuilder.fromUri(uri).build();, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java, +	 * @param uri the URL, +	MockHttpServletRequestBuilder(HttpMethod httpMethod, URI uri) {, +		Assert.notNull(uri, "uri is required");, +		this.uriComponents = UriComponentsBuilder.fromUri(uri).build();, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMultipartHttpServletRequestBuilder.java, + * Copyright 2002-2014 the original author or authors., +	 * @param uri the URL, +	MockMultipartHttpServletRequestBuilder(URI uri) {, +		super(HttpMethod.POST, uri);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java, +	 * @param uri the URL, +	MockHttpServletRequestBuilder(HttpMethod httpMethod, URI uri) {, +		Assert.notNull(uri, "uri is required");, +		this.uriComponents = UriComponentsBuilder.fromUri(uri).build();, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMultipartHttpServletRequestBuilder.java, + * Copyright 2002-2014 the original author or authors., +	 * @param uri the URL, +	MockMultipartHttpServletRequestBuilder(URI uri) {, +		super(HttpMethod.POST, uri);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.java, +	 * Create a {@link MockHttpServletRequestBuilder} for a GET request., +	 * @param uri the URL, +	 * @since 4.0.3, +	 */, +	public static MockHttpServletRequestBuilder get(URI uri) {, +		return new MockHttpServletRequestBuilder(HttpMethod.GET, uri);, +	}, +, +	/**, +	 * Create a {@link MockHttpServletRequestBuilder} for a POST request., +	 * @param uri the URL, +	 * @since 4.0.3, +	 */, +	public static MockHttpServletRequestBuilder post(URI uri) {, +		return new MockHttpServletRequestBuilder(HttpMethod.POST, uri);, +	}, +, +	/**, +	 * Create a {@link MockHttpServletRequestBuilder} for a PUT request., +	 * @param uri the URL, +	 * @since 4.0.3, +	 */, +	public static MockHttpServletRequestBuilder put(URI uri) {, +		return new MockHttpServletRequestBuilder(HttpMethod.PUT, uri);, +	}, +, +	/**, +	 * Create a {@link MockHttpServletRequestBuilder} for a PATCH request., +	 * @param uri the URL, +	 * @since 4.0.3, +	 */, +	public static MockHttpServletRequestBuilder patch(URI uri) {, +		return new MockHttpServletRequestBuilder(HttpMethod.PATCH, uri);, +	}, +, +	/**, +	 * Create a {@link MockHttpServletRequestBuilder} for a DELETE request., +	 * @param uri the URL, +	 * @since 4.0.3, +	 */, +	public static MockHttpServletRequestBuilder delete(URI uri) {, +		return new MockHttpServletRequestBuilder(HttpMethod.DELETE, uri);, +	}, +, +	/**, +	/**, +	 * Create a {@link MockHttpServletRequestBuilder} for an OPTIONS request., +	 * @param uri the URL, +	 * @since 4.0.3, +	 */, +	public static MockHttpServletRequestBuilder options(URI uri) {, +		return new MockHttpServletRequestBuilder(HttpMethod.OPTIONS, uri);, +	}, +	 * Create a {@link MockHttpServletRequestBuilder} for a request with the given HTTP method., +	 * @param httpMethod the HTTP method (GET, POST, etc), +	 * @param uri the URL, +	 * @since 4.0.3, +	 */, +	public static MockHttpServletRequestBuilder request(HttpMethod httpMethod, URI uri) {, +		return new MockHttpServletRequestBuilder(httpMethod, uri);, +	}, +, +	/**, +	 * @param uri the URL, +	public static MockMultipartHttpServletRequestBuilder fileUpload(URI uri) {, +		return new MockMultipartHttpServletRequestBuilder(uri);]