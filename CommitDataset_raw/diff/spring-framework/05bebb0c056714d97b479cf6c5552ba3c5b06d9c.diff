[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +import java.lang.reflect.AccessibleObject;, +	@SuppressWarnings("unchecked"), +	private Class<? extends Annotation>[] autowiredAnnotationTypes =, +			new Class[] {Autowired.class, Qualifier.class, Value.class};, +	public void setAutowiredAnnotationTypes(Class<? extends Annotation>[] autowiredAnnotationTypes) {, +		Assert.notEmpty(autowiredAnnotationTypes, "'autowiredAnnotationTypes' must not be empty");, +		this.autowiredAnnotationTypes = autowiredAnnotationTypes;, +	 * Set the 'autowired' annotation type, to be used on constructors, fields,, +	 * setter methods and arbitrary config methods., +	 * <p>The default autowired annotation type is the Spring-provided, +	 * {@link Autowired} annotation., +	 * <p>This setter property exists so that developers can provide their own, +	 * (non-Spring-specific) annotation type to indicate that a member is, +	 * supposed to be autowired., +	@SuppressWarnings("unchecked"), +	public void setAutowiredAnnotationType(Class<? extends Annotation> autowiredAnnotationType) {, +		Assert.notNull(autowiredAnnotationType, "'autowiredAnnotationType' must not be null");, +		this.autowiredAnnotationTypes = new Class[] {autowiredAnnotationType};, +						Annotation annotation = findAutowiredAnnotation(candidate);, +							Annotation annotation = findAutowiredAnnotation(field);, +							Annotation annotation = findAutowiredAnnotation(method);, +	private Annotation findAutowiredAnnotation(AccessibleObject ao) {, +		for (Class<? extends Annotation> type : this.autowiredAnnotationTypes) {, +			Annotation annotation = ao.getAnnotation(type);, +			if (annotation != null) {, +				return annotation;, +			}, +		}, +		return null;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +import java.lang.reflect.AccessibleObject;, +	@SuppressWarnings("unchecked"), +	private Class<? extends Annotation>[] autowiredAnnotationTypes =, +			new Class[] {Autowired.class, Qualifier.class, Value.class};, +	public void setAutowiredAnnotationTypes(Class<? extends Annotation>[] autowiredAnnotationTypes) {, +		Assert.notEmpty(autowiredAnnotationTypes, "'autowiredAnnotationTypes' must not be empty");, +		this.autowiredAnnotationTypes = autowiredAnnotationTypes;, +	 * Set the 'autowired' annotation type, to be used on constructors, fields,, +	 * setter methods and arbitrary config methods., +	 * <p>The default autowired annotation type is the Spring-provided, +	 * {@link Autowired} annotation., +	 * <p>This setter property exists so that developers can provide their own, +	 * (non-Spring-specific) annotation type to indicate that a member is, +	 * supposed to be autowired., +	@SuppressWarnings("unchecked"), +	public void setAutowiredAnnotationType(Class<? extends Annotation> autowiredAnnotationType) {, +		Assert.notNull(autowiredAnnotationType, "'autowiredAnnotationType' must not be null");, +		this.autowiredAnnotationTypes = new Class[] {autowiredAnnotationType};, +						Annotation annotation = findAutowiredAnnotation(candidate);, +							Annotation annotation = findAutowiredAnnotation(field);, +							Annotation annotation = findAutowiredAnnotation(method);, +	private Annotation findAutowiredAnnotation(AccessibleObject ao) {, +		for (Class<? extends Annotation> type : this.autowiredAnnotationTypes) {, +			Annotation annotation = ao.getAnnotation(type);, +			if (annotation != null) {, +				return annotation;, +			}, +		}, +		return null;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/CustomAutowireConfigurer.java, + * Copyright 2002-2008 the original author or authors., +	@SuppressWarnings("unchecked"), +				dlbf.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver());, +			for (Object value : this.customQualifierTypes) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +import java.lang.reflect.AccessibleObject;, +	@SuppressWarnings("unchecked"), +	private Class<? extends Annotation>[] autowiredAnnotationTypes =, +			new Class[] {Autowired.class, Qualifier.class, Value.class};, +	public void setAutowiredAnnotationTypes(Class<? extends Annotation>[] autowiredAnnotationTypes) {, +		Assert.notEmpty(autowiredAnnotationTypes, "'autowiredAnnotationTypes' must not be empty");, +		this.autowiredAnnotationTypes = autowiredAnnotationTypes;, +	 * Set the 'autowired' annotation type, to be used on constructors, fields,, +	 * setter methods and arbitrary config methods., +	 * <p>The default autowired annotation type is the Spring-provided, +	 * {@link Autowired} annotation., +	 * <p>This setter property exists so that developers can provide their own, +	 * (non-Spring-specific) annotation type to indicate that a member is, +	 * supposed to be autowired., +	@SuppressWarnings("unchecked"), +	public void setAutowiredAnnotationType(Class<? extends Annotation> autowiredAnnotationType) {, +		Assert.notNull(autowiredAnnotationType, "'autowiredAnnotationType' must not be null");, +		this.autowiredAnnotationTypes = new Class[] {autowiredAnnotationType};, +						Annotation annotation = findAutowiredAnnotation(candidate);, +							Annotation annotation = findAutowiredAnnotation(field);, +							Annotation annotation = findAutowiredAnnotation(method);, +	private Annotation findAutowiredAnnotation(AccessibleObject ao) {, +		for (Class<? extends Annotation> type : this.autowiredAnnotationTypes) {, +			Annotation annotation = ao.getAnnotation(type);, +			if (annotation != null) {, +				return annotation;, +			}, +		}, +		return null;, +	}]