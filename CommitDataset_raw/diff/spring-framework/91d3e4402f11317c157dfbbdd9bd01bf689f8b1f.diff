[+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.nio.file.Files;, +import java.util.zip.CRC32;, +import org.junit.Ignore;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferUtils;, +import org.springframework.core.io.buffer.DefaultDataBufferFactory;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +	@Test // SPR-16246, +	@Ignore, +	public void shouldSendLargeTextFile() throws Exception {, +		prepareResponse(response -> {});, +, +		Resource resource = new ClassPathResource("largeTextFile.txt", getClass());, +		byte[] expected = Files.readAllBytes(resource.getFile().toPath());, +		Flux<DataBuffer> body = DataBufferUtils.read(resource, new DefaultDataBufferFactory(), 4096);, +, +		this.webClient.post(), +				.uri("/"), +				.body(body, DataBuffer.class), +				.retrieve(), +				.bodyToMono(Void.class), +				.block(Duration.ofSeconds(5));, +, +		expectRequest(request -> {, +			ByteArrayOutputStream actual = new ByteArrayOutputStream();, +			try {, +				request.getBody().copyTo(actual);, +			}, +			catch (IOException ex) {, +				throw new IllegalStateException(ex);, +			}, +			assertEquals(expected.length, actual.size());, +			assertEquals(hash(expected), hash(actual.toByteArray()));, +		});, +	}, +, +	private static long hash(byte[] bytes) {, +		CRC32 crc = new CRC32();, +		crc.update(bytes, 0, bytes.length);, +		return crc.getValue();, +	}, +, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.nio.file.Files;, +import java.util.zip.CRC32;, +import org.junit.Ignore;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferUtils;, +import org.springframework.core.io.buffer.DefaultDataBufferFactory;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +	@Test // SPR-16246, +	@Ignore, +	public void shouldSendLargeTextFile() throws Exception {, +		prepareResponse(response -> {});, +, +		Resource resource = new ClassPathResource("largeTextFile.txt", getClass());, +		byte[] expected = Files.readAllBytes(resource.getFile().toPath());, +		Flux<DataBuffer> body = DataBufferUtils.read(resource, new DefaultDataBufferFactory(), 4096);, +, +		this.webClient.post(), +				.uri("/"), +				.body(body, DataBuffer.class), +				.retrieve(), +				.bodyToMono(Void.class), +				.block(Duration.ofSeconds(5));, +, +		expectRequest(request -> {, +			ByteArrayOutputStream actual = new ByteArrayOutputStream();, +			try {, +				request.getBody().copyTo(actual);, +			}, +			catch (IOException ex) {, +				throw new IllegalStateException(ex);, +			}, +			assertEquals(expected.length, actual.size());, +			assertEquals(hash(expected), hash(actual.toByteArray()));, +		});, +	}, +, +	private static long hash(byte[] bytes) {, +		CRC32 crc = new CRC32();, +		crc.update(bytes, 0, bytes.length);, +		return crc.getValue();, +	}, +, +++ b/spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt, +]