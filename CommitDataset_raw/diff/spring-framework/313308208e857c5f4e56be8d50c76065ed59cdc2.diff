[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/TestDispatcherServlet.java, +import org.springframework.mock.web.MockHttpServletRequest;, +import org.springframework.util.Assert;, +import org.springframework.web.util.WebUtils;, +			MockHttpServletRequest mockRequest = WebUtils.getNativeRequest(request, MockHttpServletRequest.class);, +			Assert.notNull(mockRequest, "Expected MockHttpServletRequest");, +			MockAsyncContext mockAsyncContext = ((MockAsyncContext) mockRequest.getAsyncContext());, +			Assert.notNull(mockAsyncContext, "MockAsyncContext not found. Did request wrapper not delegate startAsync?");, +, +			mockAsyncContext.addDispatchHandler(dispatchLatch::countDown);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/TestDispatcherServlet.java, +import org.springframework.mock.web.MockHttpServletRequest;, +import org.springframework.util.Assert;, +import org.springframework.web.util.WebUtils;, +			MockHttpServletRequest mockRequest = WebUtils.getNativeRequest(request, MockHttpServletRequest.class);, +			Assert.notNull(mockRequest, "Expected MockHttpServletRequest");, +			MockAsyncContext mockAsyncContext = ((MockAsyncContext) mockRequest.getAsyncContext());, +			Assert.notNull(mockAsyncContext, "MockAsyncContext not found. Did request wrapper not delegate startAsync?");, +, +			mockAsyncContext.addDispatchHandler(dispatchLatch::countDown);, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/FilterTests.java, + * Copyright 2002-2018 the original author or authors., +import javax.servlet.AsyncContext;, +import javax.servlet.AsyncListener;, +import javax.servlet.ServletContext;, +import javax.servlet.ServletRequest;, +import javax.servlet.ServletResponse;, +	@Test // SPR-16067, SPR-16695, +	public void filterWrapsRequestResponseAndPerformsAsyncDispatch() throws Exception {, +				.addFilters(new WrappingRequestResponseFilter(), new ShallowEtagHeaderFilter()), +, +, +				// Like Spring Security does in HttpServlet3RequestFactory.., +, +				@Override, +				public AsyncContext getAsyncContext() {, +					return super.getAsyncContext() != null ?, +							new AsyncContextWrapper(super.getAsyncContext()) : null;, +				}, +, +, +, +	private static class AsyncContextWrapper implements AsyncContext {, +, +		private final AsyncContext delegate;, +, +		public AsyncContextWrapper(AsyncContext delegate) {, +			this.delegate = delegate;, +		}, +, +		@Override, +		public ServletRequest getRequest() {, +			return this.delegate.getRequest();, +		}, +, +		@Override, +		public ServletResponse getResponse() {, +			return this.delegate.getResponse();, +		}, +, +		@Override, +		public boolean hasOriginalRequestAndResponse() {, +			return this.delegate.hasOriginalRequestAndResponse();, +		}, +, +		@Override, +		public void dispatch() {, +			this.delegate.dispatch();, +		}, +, +		@Override, +		public void dispatch(String path) {, +			this.delegate.dispatch(path);, +		}, +, +		@Override, +		public void dispatch(ServletContext context, String path) {, +			this.delegate.dispatch(context, path);, +		}, +, +		@Override, +		public void complete() {, +			this.delegate.complete();, +		}, +, +		@Override, +		public void start(Runnable run) {, +			this.delegate.start(run);, +		}, +, +		@Override, +		public void addListener(AsyncListener listener) {, +			this.delegate.addListener(listener);, +		}, +, +		@Override, +		public void addListener(AsyncListener listener, ServletRequest req, ServletResponse res) {, +			this.delegate.addListener(listener, req, res);, +		}, +]