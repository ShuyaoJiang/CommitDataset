[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, + * @author Juergen Hoeller, + * @since 3.0, +	private static final String ACCEPT_HEADER = "Accept";, +, +	private static final UrlPathHelper urlPathHelper = new UrlPathHelper();, +, +	private int order = Ordered.HIGHEST_PRECEDENCE;, +	private boolean ignoreAcceptHeader = false;, +	private MediaType defaultContentType;, +, +		return this.order;, +	 * Indicates whether the extension of the request path should be used to determine the requested media type,, +	 * in favor of looking at the {@code Accept} header. The default value is {@code true}., +	 * <p>For instance, when this flag is <code>true</code> (the default), a request for {@code /hotels.pdf}, +	 * will result in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the, +	 * browser-defined {@code text/html,application/xhtml+xml}., +	 * Indicates whether a request parameter should be used to determine the requested media type,, +	 * in favor of looking at the {@code Accept} header. The default value is {@code false}., +	 * <p>For instance, when this flag is <code>true</code>, a request for {@code /hotels?format=pdf} will result, +	 * in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the browser-defined, +	 * {@code text/html,application/xhtml+xml}., +	 * If set to {@code true}, this view resolver will only refer to the file extension and/or paramter,, +	 * as indicated by the {@link #setFavorPathExtension(boolean) favorPathExtension} and, +	 * {@link #setFavorParameter(boolean) favorParameter} properties., +	 * <p>When this mapping is not set or when an extension is not present, this view resolver, +	 * will fall back to using a {@link FileTypeMap} when the Java Action Framework is available., +	/**, +	 * Sets the default views to use when a more specific view can not be obtained, +	 * from the {@link ViewResolver} chain., +	 */, +	 * Sets the default content type., +	 * <p>This content type will be used when file extension, parameter, nor {@code Accept}, +		if (this.viewResolvers == null) {, +			Map<String, ViewResolver> matchingBeans =, +					BeanFactoryUtils.beansOfTypeIncludingAncestors(getApplicationContext(), ViewResolver.class);, +	 * <code>false</code>, or when a media type cannot be determined from the request path, this method will, +	 * inspect the {@code Accept} header of the request., +		if (this.favorPathExtension) {, +		if (this.favorParameter) {, +			if (request.getParameter(this.parameterName) != null) {, +				String parameterValue = request.getParameter(this.parameterName);, +						logger.debug("Requested media type is '" + mediaType + "' (based on parameter '" +, +								this.parameterName + "'='" + parameterValue + "')");, +		if (!this.ignoreAcceptHeader) {, +		if (this.defaultContentType != null) {, +			return Collections.singletonList(this.defaultContentType);, +		MediaType mediaType = this.mediaTypes.get(extension);, +				this.mediaTypes.putIfAbsent(extension, mediaType);, +	 * <p>The default implementation will check the {@linkplain #setMediaTypes(Map) media types}, +	 * property for a defined mapping., +		return this.mediaTypes.get(parameterValue.toLowerCase(Locale.ENGLISH));, +, +		if (requestedMediaTypes.size() > 1) {, +			// avoid sorting attempt for empty list and singleton list, +		}, +		for (ViewResolver viewResolver : this.viewResolvers) {, +		if (!CollectionUtils.isEmpty(this.defaultViews)) {, +			candidateViews.addAll(this.defaultViews);, +, +, +, +	/**, +	 * Inner class to avoid hard-coded JAF dependency., +	 */, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, + * @author Juergen Hoeller, + * @since 3.0, +	private static final String ACCEPT_HEADER = "Accept";, +, +	private static final UrlPathHelper urlPathHelper = new UrlPathHelper();, +, +	private int order = Ordered.HIGHEST_PRECEDENCE;, +	private boolean ignoreAcceptHeader = false;, +	private MediaType defaultContentType;, +, +		return this.order;, +	 * Indicates whether the extension of the request path should be used to determine the requested media type,, +	 * in favor of looking at the {@code Accept} header. The default value is {@code true}., +	 * <p>For instance, when this flag is <code>true</code> (the default), a request for {@code /hotels.pdf}, +	 * will result in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the, +	 * browser-defined {@code text/html,application/xhtml+xml}., +	 * Indicates whether a request parameter should be used to determine the requested media type,, +	 * in favor of looking at the {@code Accept} header. The default value is {@code false}., +	 * <p>For instance, when this flag is <code>true</code>, a request for {@code /hotels?format=pdf} will result, +	 * in an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the browser-defined, +	 * {@code text/html,application/xhtml+xml}., +	 * If set to {@code true}, this view resolver will only refer to the file extension and/or paramter,, +	 * as indicated by the {@link #setFavorPathExtension(boolean) favorPathExtension} and, +	 * {@link #setFavorParameter(boolean) favorParameter} properties., +	 * <p>When this mapping is not set or when an extension is not present, this view resolver, +	 * will fall back to using a {@link FileTypeMap} when the Java Action Framework is available., +	/**, +	 * Sets the default views to use when a more specific view can not be obtained, +	 * from the {@link ViewResolver} chain., +	 */, +	 * Sets the default content type., +	 * <p>This content type will be used when file extension, parameter, nor {@code Accept}, +		if (this.viewResolvers == null) {, +			Map<String, ViewResolver> matchingBeans =]