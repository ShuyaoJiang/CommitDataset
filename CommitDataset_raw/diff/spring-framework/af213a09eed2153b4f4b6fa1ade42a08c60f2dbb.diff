[+++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +, +, +, +	@Override, +	public boolean supportsEventType(ResolvableType eventType) {, +		for (ResolvableType declaredEventType : this.declaredEventTypes) {, +			if (declaredEventType.isAssignableFrom(eventType)) {, +				return true;, +			}, +			else if (PayloadApplicationEvent.class.isAssignableFrom(eventType.getRawClass())) {, +				ResolvableType payloadType = eventType.as(PayloadApplicationEvent.class).getGeneric();, +				if (declaredEventType.isAssignableFrom(payloadType)) {, +					return true;, +				}, +			}, +		}, +		return eventType.hasUnresolvableGenerics();, +	}, +, +	@Override, +	public boolean supportsSourceType(Class<?> sourceType) {, +		return true;, +	}, +, +	@Override, +	public int getOrder() {, +		Order order = getMethodAnnotation(Order.class);, +		return (order != null ? order.value() : 0);, +	}, +, +, +			Assert.notNull(this.applicationContext, "ApplicationContext must no be null");, +			Assert.notNull(this.evaluator, "EventExpressionEvaluator must no be null");, +			EvaluationContext evaluationContext = this.evaluator.createEvaluationContext(, +					event, this.targetClass, this.method, args);, +		Assert.notNull(this.applicationContext, "ApplicationContext must no be null");, +			throw new IllegalStateException(, +					"Maximum one parameter is allowed for event listener method: " + this.method);, +				throw new IllegalStateException(, +						"Event parameter is mandatory for event listener method: " + this.method);, +, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +, +, +, +	@Override, +	public boolean supportsEventType(ResolvableType eventType) {, +		for (ResolvableType declaredEventType : this.declaredEventTypes) {, +			if (declaredEventType.isAssignableFrom(eventType)) {, +				return true;, +			}, +			else if (PayloadApplicationEvent.class.isAssignableFrom(eventType.getRawClass())) {, +				ResolvableType payloadType = eventType.as(PayloadApplicationEvent.class).getGeneric();, +				if (declaredEventType.isAssignableFrom(payloadType)) {, +					return true;, +				}, +			}, +		}, +		return eventType.hasUnresolvableGenerics();, +	}, +, +	@Override, +	public boolean supportsSourceType(Class<?> sourceType) {, +		return true;, +	}, +, +	@Override, +	public int getOrder() {, +		Order order = getMethodAnnotation(Order.class);, +		return (order != null ? order.value() : 0);, +	}, +, +, +			Assert.notNull(this.applicationContext, "ApplicationContext must no be null");, +			Assert.notNull(this.evaluator, "EventExpressionEvaluator must no be null");, +			EvaluationContext evaluationContext = this.evaluator.createEvaluationContext(, +					event, this.targetClass, this.method, args);, +		Assert.notNull(this.applicationContext, "ApplicationContext must no be null");, +			throw new IllegalStateException(, +					"Maximum one parameter is allowed for event listener method: " + this.method);, +				throw new IllegalStateException(, +						"Event parameter is mandatory for event listener method: " + this.method);, +, +++ b/spring-context/src/main/java/org/springframework/context/event/EventListener.java, + * declare a single parameter that reflects the event type to listen to., + * If an annotated method supports multiple event types, this annotation may, + * <p>Annotated methods may have a non-{@code void} return type. When they do,, + * the result of the method invocation is sent as a new event. If the return type, + * is either an array or a collection, each element is sent as a new event., + * <p>It is also possible to define the order in which listeners for a certain, + * event are invoked. To do so, add Spring's common, + * <p>While it is possible for an event listener to declare that it throws arbitrary, + * exception types, any checked exceptions thrown from an event listener will be, + * wrapped in an {@link java.lang.reflect.UndeclaredThrowableException} since, + * the caller can only handle runtime exceptions., +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +, +, +]