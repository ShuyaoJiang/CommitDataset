[+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/RedirectTests.java, + * Copyright 2002-2015 the original author or authors., + * @author Juergen Hoeller, +, +, +	public void saveSpecial() throws Exception {, +		this.mockMvc.perform(post("/people").param("name", "Andy")), +				.andExpect(status().isFound()), +				.andExpect(redirectedUrl("/persons/Joe")), +				.andExpect(model().size(1)), +				.andExpect(model().attributeExists("name")), +				.andExpect(flash().attributeCount(1)), +				.andExpect(flash().attribute("message", "success!"));, +	}, +, +	@Test, +	public void saveSpecialWithErrors() throws Exception {, +		this.mockMvc.perform(post("/people")), +				.andExpect(status().isOk()), +				.andExpect(forwardedUrl("persons/add")), +				.andExpect(model().size(1)), +				.andExpect(model().attributeExists("person")), +				.andExpect(flash().attributeCount(0));, +	}, +, +	@Test, +, +		@RequestMapping(value="/people", method=RequestMethod.POST), +		public Object saveSpecial(@Valid Person person, Errors errors, RedirectAttributes redirectAttrs) {, +			if (errors.hasErrors()) {, +				return "persons/add";, +			redirectAttrs.addAttribute("name", "Joe");, +			redirectAttrs.addFlashAttribute("message", "success!");, +			return new StringBuilder("redirect:").append("/persons").append("/{name}");, +		}, +	}, +, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/RedirectTests.java, + * Copyright 2002-2015 the original author or authors., + * @author Juergen Hoeller, +, +, +	public void saveSpecial() throws Exception {, +		this.mockMvc.perform(post("/people").param("name", "Andy")), +				.andExpect(status().isFound()), +				.andExpect(redirectedUrl("/persons/Joe")), +				.andExpect(model().size(1)), +				.andExpect(model().attributeExists("name")), +				.andExpect(flash().attributeCount(1)), +				.andExpect(flash().attribute("message", "success!"));, +	}, +, +	@Test, +	public void saveSpecialWithErrors() throws Exception {, +		this.mockMvc.perform(post("/people")), +				.andExpect(status().isOk()), +				.andExpect(forwardedUrl("persons/add")), +				.andExpect(model().size(1)), +				.andExpect(model().attributeExists("person")), +				.andExpect(flash().attributeCount(0));, +	}, +, +	@Test, +, +		@RequestMapping(value="/people", method=RequestMethod.POST), +		public Object saveSpecial(@Valid Person person, Errors errors, RedirectAttributes redirectAttrs) {, +			if (errors.hasErrors()) {, +				return "persons/add";, +			redirectAttrs.addAttribute("name", "Joe");, +			redirectAttrs.addFlashAttribute("message", "success!");, +			return new StringBuilder("redirect:").append("/persons").append("/{name}");, +		}, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ViewNameMethodReturnValueHandler.java, + * Copyright 2002-2015 the original author or authors., + * Handles return values of types {@code void} and {@code String} interpreting them, + * as view name reference. As of 4.2, it also handles general {@code CharSequence}, + * types, e.g. {@code StringBuilder} or Groovy's {@code GString}, as view names., + * @author Juergen Hoeller, +		return (void.class == paramType || CharSequence.class.isAssignableFrom(paramType));, +		if (returnValue instanceof CharSequence) {, +			String viewName = returnValue.toString();, +		else if (returnValue != null){, +		return (PatternMatchUtils.simpleMatch(this.redirectPatterns, viewName) || viewName.startsWith("redirect:"));]