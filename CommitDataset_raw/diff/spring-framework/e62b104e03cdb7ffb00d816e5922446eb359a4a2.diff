[+++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java, +import java.lang.reflect.Method;, +import reactor.ipc.netty.resources.LoopResources;, +import reactor.ipc.netty.resources.PoolResources;, +import reactor.ipc.netty.tcp.TcpResources;, +import org.springframework.util.ReflectionUtils;, +	private final LoopResources loopResources;, +, +	private final PoolResources poolResources;, +, +	public ReactorNettyTcpClient(Consumer<ClientOptions> optionsConsumer, ReactorNettyCodec<P> codec) {, +		Assert.notNull(optionsConsumer, "Consumer<ClientOptions> is required");, +, +		this.loopResources = LoopResources.create("reactor-netty-tcp-client");, +		this.poolResources = PoolResources.fixed("reactor-netty-tcp-pool");, +, +		Consumer<ClientOptions> builtInConsumer = opts -> opts, +				.channelGroup(this.channelGroup), +				.loopResources(this.loopResources), +				.poolResources(this.poolResources), +				.preferNative(false);, +, +		this.tcpClient = TcpClient.create(optionsConsumer.andThen(builtInConsumer));, +		return flux -> flux, +				.scan(1, (count, element) -> count++), +, +, +		ChannelGroupFuture close = this.channelGroup.close();, +		Mono<Void> completion = FutureMono.from(close), +				.doAfterTerminate((x, e) -> {, +, +					// TODO: https://github.com/reactor/reactor-netty/issues/24, +					shutdownGlobalResources();, +, +					this.loopResources.dispose();, +					this.poolResources.dispose();, +, +					// TODO: https://github.com/reactor/reactor-netty/issues/25, +					try {, +						Thread.sleep(2000);, +					}, +					catch (InterruptedException ex) {, +						ex.printStackTrace();, +					}, +, +					// Scheduler after loop resources..., +					this.scheduler.dispose();, +				});, +, +	private static void shutdownGlobalResources() {, +		try {, +			Method method = TcpResources.class.getDeclaredMethod("_dispose");, +			ReflectionUtils.makeAccessible(method);, +			ReflectionUtils.invokeMethod(method, TcpResources.get());, +		}, +		catch (NoSuchMethodException ex) {, +			ex.printStackTrace();, +		}, +	}, +]