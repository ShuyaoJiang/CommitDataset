[+++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationAttributesReadingVisitor.java, +	protected final Log logger = LogFactory.getLog(getClass());, +			logger.debug("Failed to classload enum type while reading annotation metadata", ex);, +			logger.warn("Could not access enum value while reading annotation metadata", ex);, +			logger.debug("Failed to class-load type while reading annotation metadata. " +, +					"This is a non-fatal error, but certain annotation metadata may be unavailable.", ex);, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationAttributesReadingVisitor.java, +	protected final Log logger = LogFactory.getLog(getClass());, +			logger.debug("Failed to classload enum type while reading annotation metadata", ex);, +			logger.warn("Could not access enum value while reading annotation metadata", ex);, +			logger.debug("Failed to class-load type while reading annotation metadata. " +, +					"This is a non-fatal error, but certain annotation metadata may be unavailable.", ex);, +++ b/spring-core/src/main/java/org/springframework/core/type/filter/AbstractClassTestingTypeFilter.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.core.type.classreading.MetadataReaderFactory;, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationAttributesReadingVisitor.java, +	protected final Log logger = LogFactory.getLog(getClass());, +			logger.debug("Failed to classload enum type while reading annotation metadata", ex);, +			logger.warn("Could not access enum value while reading annotation metadata", ex);, +			logger.debug("Failed to class-load type while reading annotation metadata. " +, +					"This is a non-fatal error, but certain annotation metadata may be unavailable.", ex);, +++ b/spring-core/src/main/java/org/springframework/core/type/filter/AbstractClassTestingTypeFilter.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.core.type.classreading.MetadataReaderFactory;, +++ b/spring-core/src/main/java/org/springframework/core/type/filter/AspectJTypeFilter.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.core.type.classreading.MetadataReaderFactory;, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationAttributesReadingVisitor.java, +	protected final Log logger = LogFactory.getLog(getClass());, +			logger.debug("Failed to classload enum type while reading annotation metadata", ex);, +			logger.warn("Could not access enum value while reading annotation metadata", ex);, +			logger.debug("Failed to class-load type while reading annotation metadata. " +, +					"This is a non-fatal error, but certain annotation metadata may be unavailable.", ex);, +++ b/spring-core/src/main/java/org/springframework/core/type/filter/AbstractClassTestingTypeFilter.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.core.type.classreading.MetadataReaderFactory;, +++ b/spring-core/src/main/java/org/springframework/core/type/filter/AspectJTypeFilter.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.core.type.classreading.MetadataReaderFactory;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java, +				(this.validator != null ? this.validator : new NoOpValidator())));, +	private static final class NoOpValidator implements Validator {, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationAttributesReadingVisitor.java, +	protected final Log logger = LogFactory.getLog(getClass());, +			logger.debug("Failed to classload enum type while reading annotation metadata", ex);, +			logger.warn("Could not access enum value while reading annotation metadata", ex);, +			logger.debug("Failed to class-load type while reading annotation metadata. " +, +					"This is a non-fatal error, but certain annotation metadata may be unavailable.", ex);, +++ b/spring-core/src/main/java/org/springframework/core/type/filter/AbstractClassTestingTypeFilter.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.core.type.classreading.MetadataReaderFactory;, +++ b/spring-core/src/main/java/org/springframework/core/type/filter/AspectJTypeFilter.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.core.type.classreading.MetadataReaderFactory;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java, +				(this.validator != null ? this.validator : new NoOpValidator())));, +	private static final class NoOpValidator implements Validator {, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java, + * Default builder for {@link MockHttpServletRequest} required as input to perform, + * requests in {@link MockMvc}., + * <p>Application tests will typically access this builder through the static factory, + * methods in {@link org.springframework.test.web.servlet.setup.MockMvcBuilders}., +, +, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationAttributesReadingVisitor.java, +	protected final Log logger = LogFactory.getLog(getClass());, +			logger.debug("Failed to classload enum type while reading annotation metadata", ex);, +			logger.warn("Could not access enum value while reading annotation metadata", ex);, +			logger.debug("Failed to class-load type while reading annotation metadata. " +, +					"This is a non-fatal error, but certain annotation metadata may be unavailable.", ex);, +++ b/spring-core/src/main/java/org/springframework/core/type/filter/AbstractClassTestingTypeFilter.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.core.type.classreading.MetadataReaderFactory;, +++ b/spring-core/src/main/java/org/springframework/core/type/filter/AspectJTypeFilter.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.core.type.classreading.MetadataReaderFactory;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java, +				(this.validator != null ? this.validator : new NoOpValidator())));, +	private static final class NoOpValidator implements Validator {, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java, + * Default builder for {@link MockHttpServletRequest} required as input to perform, + * requests in {@link MockMvc}., + * <p>Application tests will typically access this builder through the static factory, + * methods in {@link org.springframework.test.web.servlet.setup.MockMvcBuilders}., +, +, +++ b/spring-web/src/test/java/org/springframework/web/filter/RequestLoggingFilterTests.java, + * Copyright 2002-2014 the original author or authors., +import javax.servlet.ServletException;, +import javax.servlet.http.HttpServletResponse;, +import org.junit.Test;, +import static org.junit.Assert.*;, +, +, +, +		FilterChain filterChain = new NoOpFilterChain();, +		assertTrue(filter.beforeRequestMessage.contains("uri=/hotel"));, +		assertFalse(filter.beforeRequestMessage.contains("booking=42"));, +		assertTrue(filter.afterRequestMessage.contains("uri=/hotel"));, +		assertFalse(filter.afterRequestMessage.contains("booking=42"));]