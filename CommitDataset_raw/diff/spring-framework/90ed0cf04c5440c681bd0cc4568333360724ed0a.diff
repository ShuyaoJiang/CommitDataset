[+++ b/src/asciidoc/web-mvc.adoc, +, +[[mvc-caching]], +== HTTP caching support, +A good HTTP caching strategy can significantly improve the performance of a web application, +and the experience of its clients. The `'Cache-Control'` HTTP response header is mostly, +responsible for this, along with conditional headers such as `'Last-Modified'` and `'ETag'`., +, +The `'Cache-Control'` HTTP response header advice private caches (e.g. browsers) and, + public caches (e.g. proxies) on how they can cache HTTP responses for further reuse., +, +This section describes the different choices available to configure HTTP caching in a, +Spring Web MVC application., +, +, +[[mvc-caching-cachecontrol]], +=== Cache-Control HTTP header, +, +Spring Web MVC supports many use cases and ways to configure "Cache-Control" headers for, +an application. While the https://tools.ietf.org/html/rfc7234#section-5.2.2[RFC 7234 Section 5.2.2], +completely describes that header and its possible directives, there are several ways to, +address the most common cases., +, +Spring Web MVC is using a configuration convention in several of its APIs:, +`setCachePeriod(int seconds)`:, +, +* A `-1` value won't generate a `'Cache-Control'` response header, +* A `0` value will prevent caching using the `'Cache-Control: no-store'` directive, +* A `n > 0` value will cache the given response for `n` seconds using the, +`'Cache-Control: max-age=n'` directive, +, +The {javadoc-baseurl}/org/springframework/http/CacheControl.html[`CacheControl`] builder, +class simply describes the available "Cache-Control" directives and makes it easier to, +build your own HTTP caching strategy. Once built, a `CacheControl` instance can be then, +taken as an argument in several Spring Web MVC APIs., +, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	// Cache for an hour - "Cache-Control: max-age=3600", +    CacheControl ccCacheOneHour = CacheControl.maxAge(1, TimeUnit.HOURS);, +, +    // Prevent caching - "Cache-Control: no-store", +    CacheControl ccNoStore = CacheControl.noStore();, +, +    // Cache for ten days in public and private caches,, +    // public caches should not transform the response, +    // "Cache-Control: max-age=864000, public, no-transform", +    CacheControl ccCustom = CacheControl.maxAge(10, TimeUnit.DAYS), +    									.noTransform().cachePublic();, +----, +, +[[mvc-caching-static-resources]], +=== HTTP caching support for static resources, +, +Static resources should be served with appropriate `'Cache-Control'` and conditional, +headers for optimal performance., +<<mvc-config-static-resources,Configuring a `ResourceHttpRequestHandler`>> for serving, +static resources not only natively writes `'Last-Modified'` headers by reading files, +metadata, but also `'Cache-Control'` if properly configured., +, +You can set the `cachePeriod` attribute on a `ResourceHttpRequestHandler` or use, +a `CacheControl` instance, which supports more specific directives:, +, +, +[source,java,indent=0], +[subs="verbatim"], +----, +	@Configuration, +	@EnableWebMvc, +	public class WebConfig extends WebMvcConfigurerAdapter {, +, +		@Override, +		public void addResourceHandlers(ResourceHandlerRegistry registry) {, +			registry.addResourceHandler("/resources/**"), +					.addResourceLocations("/public-resources/"), +					.setCacheControl(CacheControl.maxAge(1, TimeUnit.HOURS).cachePublic());, +		}, +, +	}, +----, +, +And in XML:, +, +[source,xml,indent=0], +[subs="verbatim"], +----, +	<mvc:resources mapping="/resources/**" location="/public-resources/">, +		<mvc:cachecontrol max-age="3600" cache-public="true"/>, +	</mvc:resources>, +----, +, +, +[[mvc-caching-etag-lastmodified]], +=== Support for the Cache-Control, ETag and Last-Modified response headers in Controllers, +, +Controllers can support `'Cache-Control'` `'ETag'` and/or `'If-Modified-Since'` HTTP requests;, +this is indeed recommended if a `'Cache-Control'` header is to be set on the response., +This involves calculating a lastModified `long` and/or an Etag value for a given request,]