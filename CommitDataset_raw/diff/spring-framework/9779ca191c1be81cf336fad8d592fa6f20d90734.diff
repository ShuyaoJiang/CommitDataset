[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/InterceptorsBeanDefinitionParser.java, +import org.springframework.context.config.AbstractSpecificationBeanDefinitionParser;, +import org.springframework.context.config.FeatureSpecification;, + * {@link org.springframework.beans.factory.xml.BeanDefinitionParser} that parses , + * a {@code interceptors} element to register  set of {@link MappedInterceptor}, + * definitions., + * @author Rossen Stoyanchev, + * , +class InterceptorsBeanDefinitionParser extends AbstractSpecificationBeanDefinitionParser {, +	/**, +	 * Parses the {@code <mvc:interceptors/>} tag., +	 */, +	public FeatureSpecification doParse(Element element, ParserContext parserContext) {, +		MvcInterceptors mvcInterceptors = new MvcInterceptors();, +				String[] pathPatterns = new String[paths.size()];, +				Element beanElement = DomUtils.getChildElementByTagName(interceptor, "bean");, +				mvcInterceptors.interceptor(pathPatterns, parseBeanElement(parserContext, beanElement));, +				mvcInterceptors.interceptor(null, parseBeanElement(parserContext, interceptor));, +		return mvcInterceptors;, +	}, +, +	private BeanDefinitionHolder parseBeanElement(ParserContext parserContext, Element interceptor) {, +		BeanDefinitionHolder beanDef = parserContext.getDelegate().parseBeanDefinitionElement(interceptor);, +		beanDef = parserContext.getDelegate().decorateBeanDefinitionIfRequired(interceptor, beanDef);, +		return beanDef;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/InterceptorsBeanDefinitionParser.java, +import org.springframework.context.config.AbstractSpecificationBeanDefinitionParser;, +import org.springframework.context.config.FeatureSpecification;, + * {@link org.springframework.beans.factory.xml.BeanDefinitionParser} that parses , + * a {@code interceptors} element to register  set of {@link MappedInterceptor}, + * definitions., + * @author Rossen Stoyanchev, + * , +class InterceptorsBeanDefinitionParser extends AbstractSpecificationBeanDefinitionParser {, +	/**, +	 * Parses the {@code <mvc:interceptors/>} tag., +	 */, +	public FeatureSpecification doParse(Element element, ParserContext parserContext) {, +		MvcInterceptors mvcInterceptors = new MvcInterceptors();, +				String[] pathPatterns = new String[paths.size()];, +				Element beanElement = DomUtils.getChildElementByTagName(interceptor, "bean");, +				mvcInterceptors.interceptor(pathPatterns, parseBeanElement(parserContext, beanElement));, +				mvcInterceptors.interceptor(null, parseBeanElement(parserContext, interceptor));, +		return mvcInterceptors;, +	}, +, +	private BeanDefinitionHolder parseBeanElement(ParserContext parserContext, Element interceptor) {, +		BeanDefinitionHolder beanDef = parserContext.getDelegate().parseBeanDefinitionElement(interceptor);, +		beanDef = parserContext.getDelegate().decorateBeanDefinitionIfRequired(interceptor, beanDef);, +		return beanDef;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/MvcInterceptors.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.servlet.config;, +, +import java.util.Collections;, +import java.util.LinkedHashMap;, +import java.util.Map;, +, +import org.springframework.beans.factory.config.BeanDefinitionHolder;, +import org.springframework.beans.factory.parsing.ProblemCollector;, +import org.springframework.context.config.AbstractFeatureSpecification;, +import org.springframework.context.config.FeatureSpecificationExecutor;, +import org.springframework.util.StringUtils;, +import org.springframework.web.context.request.WebRequestInterceptor;, +import org.springframework.web.servlet.HandlerInterceptor;, +import org.springframework.web.servlet.handler.MappedInterceptor;, +, +/**, + * Specifies the Spring MVC "interceptors" container feature. The feature, + * registers one or more {@link MappedInterceptor} bean definitions. A, + * MappedInterceptor encapsulates an interceptor and one or more (optional), + * path patterns to which the interceptor is mapped. The interceptor can be , + * of type {@link HandlerInterceptor} or {@link WebRequestInterceptor}. , + * An interceptor can also be provided without path patterns in which case, + * it applies globally to all handler invocations., + * , + * @author Rossen Stoyanchev, + * @since 3.1, + */, +public class MvcInterceptors extends AbstractFeatureSpecification {, +, +	private static final Class<? extends FeatureSpecificationExecutor> EXECUTOR_TYPE = MvcInterceptorsExecutor.class;, +, +	private Map<Object, String[]> interceptorMappings = new LinkedHashMap<Object, String[]>();, +, +	/**]