[+++ b/spring-tx/src/test/java/org/springframework/dao/support/DataAccessUtilsTests.java, + * Copyright 2002-2014 the original author or authors., +		Collection<String> col = new HashSet<String>();, +		Collection<String> col = new HashSet<String>(2);, +		Collection<Integer> col = new HashSet<Integer>(1);, +		col.add(5);, +		assertEquals(Integer.valueOf(5), DataAccessUtils.uniqueResult(col));, +		assertEquals(Integer.valueOf(5), DataAccessUtils.requiredUniqueResult(col));, +		assertEquals(Integer.valueOf(5), DataAccessUtils.objectResult(col, Integer.class));, +		Integer i = 5;, +		Collection<Integer> col = new ArrayList<Integer>(1);, +		assertEquals(Integer.valueOf(5), DataAccessUtils.uniqueResult(col));, +		assertEquals(Integer.valueOf(5), DataAccessUtils.requiredUniqueResult(col));, +		assertEquals(Integer.valueOf(5), DataAccessUtils.objectResult(col, Integer.class));, +		Collection<Integer> col = new ArrayList<Integer>(2);, +		Collection<Long> col = new HashSet<Long>(1);, +		col.add(5L);, +		assertEquals(Long.valueOf(5L), DataAccessUtils.uniqueResult(col));, +		assertEquals(Long.valueOf(5L), DataAccessUtils.requiredUniqueResult(col));, +		assertEquals(Long.valueOf(5L), DataAccessUtils.objectResult(col, Long.class));, +		Collection<String> col = new HashSet<String>(1);, +		Collection<Date> col = new HashSet<Date>(1);, +		 * in to out, +		private Map<RuntimeException,RuntimeException> translations = new HashMap<RuntimeException,RuntimeException>();, +++ b/spring-tx/src/test/java/org/springframework/dao/support/DataAccessUtilsTests.java, + * Copyright 2002-2014 the original author or authors., +		Collection<String> col = new HashSet<String>();, +		Collection<String> col = new HashSet<String>(2);, +		Collection<Integer> col = new HashSet<Integer>(1);, +		col.add(5);, +		assertEquals(Integer.valueOf(5), DataAccessUtils.uniqueResult(col));, +		assertEquals(Integer.valueOf(5), DataAccessUtils.requiredUniqueResult(col));, +		assertEquals(Integer.valueOf(5), DataAccessUtils.objectResult(col, Integer.class));, +		Integer i = 5;, +		Collection<Integer> col = new ArrayList<Integer>(1);, +		assertEquals(Integer.valueOf(5), DataAccessUtils.uniqueResult(col));, +		assertEquals(Integer.valueOf(5), DataAccessUtils.requiredUniqueResult(col));, +		assertEquals(Integer.valueOf(5), DataAccessUtils.objectResult(col, Integer.class));, +		Collection<Integer> col = new ArrayList<Integer>(2);, +		Collection<Long> col = new HashSet<Long>(1);, +		col.add(5L);, +		assertEquals(Long.valueOf(5L), DataAccessUtils.uniqueResult(col));, +		assertEquals(Long.valueOf(5L), DataAccessUtils.requiredUniqueResult(col));, +		assertEquals(Long.valueOf(5L), DataAccessUtils.objectResult(col, Long.class));, +		Collection<String> col = new HashSet<String>(1);, +		Collection<Date> col = new HashSet<Date>(1);, +		 * in to out, +		private Map<RuntimeException,RuntimeException> translations = new HashMap<RuntimeException,RuntimeException>();, +++ b/spring-tx/src/test/java/org/springframework/jca/cci/CciLocalTransactionTests.java, + * Copyright 2002-2014 the original author or authors., +			tt.execute(new TransactionCallback<Void>() {, +				public Void doInTransaction(TransactionStatus status) {, +++ b/spring-tx/src/test/java/org/springframework/dao/support/DataAccessUtilsTests.java, + * Copyright 2002-2014 the original author or authors., +		Collection<String> col = new HashSet<String>();, +		Collection<String> col = new HashSet<String>(2);, +		Collection<Integer> col = new HashSet<Integer>(1);, +		col.add(5);, +		assertEquals(Integer.valueOf(5), DataAccessUtils.uniqueResult(col));, +		assertEquals(Integer.valueOf(5), DataAccessUtils.requiredUniqueResult(col));, +		assertEquals(Integer.valueOf(5), DataAccessUtils.objectResult(col, Integer.class));, +		Integer i = 5;, +		Collection<Integer> col = new ArrayList<Integer>(1);, +		assertEquals(Integer.valueOf(5), DataAccessUtils.uniqueResult(col));, +		assertEquals(Integer.valueOf(5), DataAccessUtils.requiredUniqueResult(col));, +		assertEquals(Integer.valueOf(5), DataAccessUtils.objectResult(col, Integer.class));, +		Collection<Integer> col = new ArrayList<Integer>(2);, +		Collection<Long> col = new HashSet<Long>(1);, +		col.add(5L);, +		assertEquals(Long.valueOf(5L), DataAccessUtils.uniqueResult(col));, +		assertEquals(Long.valueOf(5L), DataAccessUtils.requiredUniqueResult(col));, +		assertEquals(Long.valueOf(5L), DataAccessUtils.objectResult(col, Long.class));, +		Collection<String> col = new HashSet<String>(1);, +		Collection<Date> col = new HashSet<Date>(1);, +		 * in to out, +		private Map<RuntimeException,RuntimeException> translations = new HashMap<RuntimeException,RuntimeException>();, +++ b/spring-tx/src/test/java/org/springframework/jca/cci/CciLocalTransactionTests.java, + * Copyright 2002-2014 the original author or authors., +			tt.execute(new TransactionCallback<Void>() {, +				public Void doInTransaction(TransactionStatus status) {, +++ b/spring-tx/src/test/java/org/springframework/transaction/MockCallbackPreferringTransactionManager.java, + * Copyright 2002-2014 the original author or authors., +	public <T> T execute(TransactionDefinition definition, TransactionCallback<T> callback) throws TransactionException {, +++ b/spring-tx/src/test/java/org/springframework/dao/support/DataAccessUtilsTests.java, + * Copyright 2002-2014 the original author or authors., +		Collection<String> col = new HashSet<String>();, +		Collection<String> col = new HashSet<String>(2);, +		Collection<Integer> col = new HashSet<Integer>(1);, +		col.add(5);, +		assertEquals(Integer.valueOf(5), DataAccessUtils.uniqueResult(col));, +		assertEquals(Integer.valueOf(5), DataAccessUtils.requiredUniqueResult(col));, +		assertEquals(Integer.valueOf(5), DataAccessUtils.objectResult(col, Integer.class));, +		Integer i = 5;, +		Collection<Integer> col = new ArrayList<Integer>(1);, +		assertEquals(Integer.valueOf(5), DataAccessUtils.uniqueResult(col));, +		assertEquals(Integer.valueOf(5), DataAccessUtils.requiredUniqueResult(col));, +		assertEquals(Integer.valueOf(5), DataAccessUtils.objectResult(col, Integer.class));, +		Collection<Integer> col = new ArrayList<Integer>(2);, +		Collection<Long> col = new HashSet<Long>(1);, +		col.add(5L);]