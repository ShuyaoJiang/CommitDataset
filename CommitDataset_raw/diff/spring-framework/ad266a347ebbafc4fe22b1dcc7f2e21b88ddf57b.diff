[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/lob/DefaultLobHandler.java, + * Copyright 2002-2009 the original author or authors., +		if (this.wrapAsLob) {, +			Blob blob = rs.getBlob(columnIndex);, +			return blob.getBytes(1, (int) blob.length());, +		}, +		else {, +	}, +		if (this.wrapAsLob) {, +			Blob blob = rs.getBlob(columnIndex);, +			return blob.getBinaryStream();, +		}, +		else {, +	}, +		if (this.wrapAsLob) {, +			Clob clob = rs.getClob(columnIndex);, +			return clob.getSubString(1, (int) clob.length());, +		}, +		else {, +	}, +		if (this.wrapAsLob) {, +			Clob clob = rs.getClob(columnIndex);, +			return clob.getAsciiStream();, +		}, +		else {, +	}, +		if (this.wrapAsLob) {, +			Clob clob = rs.getClob(columnIndex);, +			return clob.getCharacterStream();, +		}, +		else {, +	}, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/lob/DefaultLobHandler.java, + * Copyright 2002-2009 the original author or authors., +		if (this.wrapAsLob) {, +			Blob blob = rs.getBlob(columnIndex);, +			return blob.getBytes(1, (int) blob.length());, +		}, +		else {, +	}, +		if (this.wrapAsLob) {, +			Blob blob = rs.getBlob(columnIndex);, +			return blob.getBinaryStream();, +		}, +		else {, +	}, +		if (this.wrapAsLob) {, +			Clob clob = rs.getClob(columnIndex);, +			return clob.getSubString(1, (int) clob.length());, +		}, +		else {, +	}, +		if (this.wrapAsLob) {, +			Clob clob = rs.getClob(columnIndex);, +			return clob.getAsciiStream();, +		}, +		else {, +	}, +		if (this.wrapAsLob) {, +			Clob clob = rs.getClob(columnIndex);, +			return clob.getCharacterStream();, +		}, +		else {, +	}, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/lob/LobHandler.java, + * Copyright 2002-2009 the original author or authors., + * each transaction; they are not thread-safe because they might track, + * allocated database resources in order to free them after execution., + * which by default delegates to JDBC's direct accessor methods, avoiding the, + * <code>java.sql.Blob</code> and <code>java.sql.Clob</code> API completely., + * {@link DefaultLobHandler} can also be configured to access LOBs using, + * <code>PreparedStatement.setBlob/setClob</code> (e.g. for PostgreSQL), through, + * setting the {@link DefaultLobHandler#setWrapAsLob "wrapAsLob"} property., + * {@link OracleLobHandler} there, which uses Oracle's BLOB/CLOB API for both types, + * of access. The Oracle 10g JDBC driver should basically work with, + * {@link DefaultLobHandler} as well, with some limitations in terms of LOB sizes.]