[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +			Collections.addAll(basePackages, tokenized);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +			Collections.addAll(basePackages, tokenized);, +++ b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, +import java.util.Collections;, +		Collections.addAll(this.excludedBeans, excludedBeans);, +		Collections.addAll(beanNames, this.beanFactory.getBeanDefinitionNames());, +			Collections.addAll(beanNames, ((ConfigurableBeanFactory) this.beanFactory).getSingletonNames());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +			Collections.addAll(basePackages, tokenized);, +++ b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, +import java.util.Collections;, +		Collections.addAll(this.excludedBeans, excludedBeans);, +		Collections.addAll(beanNames, this.beanFactory.getBeanDefinitionNames());, +			Collections.addAll(beanNames, ((ConfigurableBeanFactory) this.beanFactory).getSingletonNames());, +++ b/spring-context/src/main/java/org/springframework/jndi/support/SimpleJndiBeanFactory.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +		Collections.addAll(this.shareableResources, shareableResources);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +			Collections.addAll(basePackages, tokenized);, +++ b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, +import java.util.Collections;, +		Collections.addAll(this.excludedBeans, excludedBeans);, +		Collections.addAll(beanNames, this.beanFactory.getBeanDefinitionNames());, +			Collections.addAll(beanNames, ((ConfigurableBeanFactory) this.beanFactory).getSingletonNames());, +++ b/spring-context/src/main/java/org/springframework/jndi/support/SimpleJndiBeanFactory.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +		Collections.addAll(this.shareableResources, shareableResources);, +++ b/spring-core/src/main/java/org/springframework/core/MethodIntrospector.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +		Collections.addAll(handlerTypes, targetType.getInterfaces());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +			Collections.addAll(basePackages, tokenized);, +++ b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, +import java.util.Collections;, +		Collections.addAll(this.excludedBeans, excludedBeans);, +		Collections.addAll(beanNames, this.beanFactory.getBeanDefinitionNames());, +			Collections.addAll(beanNames, ((ConfigurableBeanFactory) this.beanFactory).getSingletonNames());, +++ b/spring-context/src/main/java/org/springframework/jndi/support/SimpleJndiBeanFactory.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +		Collections.addAll(this.shareableResources, shareableResources);, +++ b/spring-core/src/main/java/org/springframework/core/MethodIntrospector.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +		Collections.addAll(handlerTypes, targetType.getInterfaces());, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, +		Collections.addAll(primitiveTypes, boolean[].class, byte[].class, char[].class,, +				double[].class, float[].class, int[].class, long[].class, short[].class);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +			Collections.addAll(basePackages, tokenized);, +++ b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, +import java.util.Collections;, +		Collections.addAll(this.excludedBeans, excludedBeans);, +		Collections.addAll(beanNames, this.beanFactory.getBeanDefinitionNames());, +			Collections.addAll(beanNames, ((ConfigurableBeanFactory) this.beanFactory).getSingletonNames());, +++ b/spring-context/src/main/java/org/springframework/jndi/support/SimpleJndiBeanFactory.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +		Collections.addAll(this.shareableResources, shareableResources);, +++ b/spring-core/src/main/java/org/springframework/core/MethodIntrospector.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +		Collections.addAll(handlerTypes, targetType.getInterfaces());, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, +		Collections.addAll(primitiveTypes, boolean[].class, byte[].class, char[].class,, +				double[].class, float[].class, int[].class, long[].class, short[].class);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +					return Integer.compare(m1pl, m2pl);, +			Collections.addAll(result, getMethods(Class.class));, +				Collections.addAll(result, getMethods(ifc));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +			Collections.addAll(basePackages, tokenized);, +++ b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, +import java.util.Collections;, +		Collections.addAll(this.excludedBeans, excludedBeans);, +		Collections.addAll(beanNames, this.beanFactory.getBeanDefinitionNames());, +			Collections.addAll(beanNames, ((ConfigurableBeanFactory) this.beanFactory).getSingletonNames());, +++ b/spring-context/src/main/java/org/springframework/jndi/support/SimpleJndiBeanFactory.java, + * Copyright 2002-2018 the original author or authors.]