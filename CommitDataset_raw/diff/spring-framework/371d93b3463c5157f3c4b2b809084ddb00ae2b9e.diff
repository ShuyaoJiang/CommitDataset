[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler.java, +import org.springframework.messaging.simp.SimpMessageHeaderAccessor;, +import org.springframework.messaging.simp.SimpMessageType;, +import org.springframework.messaging.support.AbstractMessageChannel;, +import org.springframework.messaging.support.ChannelInterceptor;, +import org.springframework.messaging.support.ChannelInterceptorAdapter;, +	private ChannelInterceptor unsentDisconnectInterceptor = new UnsentDisconnectChannelInterceptor();, +, +			if (this.clientInboundChannel instanceof AbstractMessageChannel) {, +				((AbstractMessageChannel) this.clientInboundChannel).addInterceptor(0, this.unsentDisconnectInterceptor);, +			}, +			if (this.clientInboundChannel instanceof AbstractMessageChannel) {, +				((AbstractMessageChannel) this.clientInboundChannel).removeInterceptor(this.unsentDisconnectInterceptor);, +			}, +, +	/**, +	 * Detect unsent DISCONNECT messages and process them anyway., +	 */, +	private class UnsentDisconnectChannelInterceptor extends ChannelInterceptorAdapter {, +, +		@Override, +		public void afterSendCompletion(Message<?> message, MessageChannel channel, boolean sent, Exception ex) {, +			if (!sent) {, +				SimpMessageType messageType = SimpMessageHeaderAccessor.getMessageType(message.getHeaders());, +				if (SimpMessageType.DISCONNECT.equals(messageType)) {, +					logger.debug("Detected unsent DISCONNECT message. Processing anyway.");, +					handleMessage(message);, +				}, +			}, +		}, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler.java, +import org.springframework.messaging.simp.SimpMessageHeaderAccessor;, +import org.springframework.messaging.simp.SimpMessageType;, +import org.springframework.messaging.support.AbstractMessageChannel;, +import org.springframework.messaging.support.ChannelInterceptor;, +import org.springframework.messaging.support.ChannelInterceptorAdapter;, +	private ChannelInterceptor unsentDisconnectInterceptor = new UnsentDisconnectChannelInterceptor();, +, +			if (this.clientInboundChannel instanceof AbstractMessageChannel) {, +				((AbstractMessageChannel) this.clientInboundChannel).addInterceptor(0, this.unsentDisconnectInterceptor);, +			}, +			if (this.clientInboundChannel instanceof AbstractMessageChannel) {, +				((AbstractMessageChannel) this.clientInboundChannel).removeInterceptor(this.unsentDisconnectInterceptor);, +			}, +, +	/**, +	 * Detect unsent DISCONNECT messages and process them anyway., +	 */, +	private class UnsentDisconnectChannelInterceptor extends ChannelInterceptorAdapter {, +, +		@Override, +		public void afterSendCompletion(Message<?> message, MessageChannel channel, boolean sent, Exception ex) {, +			if (!sent) {, +				SimpMessageType messageType = SimpMessageHeaderAccessor.getMessageType(message.getHeaders());, +				if (SimpMessageType.DISCONNECT.equals(messageType)) {, +					logger.debug("Detected unsent DISCONNECT message. Processing anyway.");, +					handleMessage(message);, +				}, +			}, +		}, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/AbstractMessageChannel.java, +	 * Add a channel interceptor at the specified index., +	 */, +	public void addInterceptor(int index, ChannelInterceptor interceptor) {, +		this.interceptors.add(index, interceptor);, +	}, +, +	/**, +	/**, +	 * Remove the given interceptor., +	 */, +	public boolean removeInterceptor(ChannelInterceptor interceptor) {, +		return this.interceptors.remove(interceptor);, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler.java, +import org.springframework.messaging.simp.SimpMessageHeaderAccessor;, +import org.springframework.messaging.simp.SimpMessageType;, +import org.springframework.messaging.support.AbstractMessageChannel;, +import org.springframework.messaging.support.ChannelInterceptor;, +import org.springframework.messaging.support.ChannelInterceptorAdapter;, +	private ChannelInterceptor unsentDisconnectInterceptor = new UnsentDisconnectChannelInterceptor();, +, +			if (this.clientInboundChannel instanceof AbstractMessageChannel) {, +				((AbstractMessageChannel) this.clientInboundChannel).addInterceptor(0, this.unsentDisconnectInterceptor);, +			}, +			if (this.clientInboundChannel instanceof AbstractMessageChannel) {, +				((AbstractMessageChannel) this.clientInboundChannel).removeInterceptor(this.unsentDisconnectInterceptor);, +			}, +, +	/**, +	 * Detect unsent DISCONNECT messages and process them anyway., +	 */, +	private class UnsentDisconnectChannelInterceptor extends ChannelInterceptorAdapter {, +, +		@Override, +		public void afterSendCompletion(Message<?> message, MessageChannel channel, boolean sent, Exception ex) {, +			if (!sent) {]