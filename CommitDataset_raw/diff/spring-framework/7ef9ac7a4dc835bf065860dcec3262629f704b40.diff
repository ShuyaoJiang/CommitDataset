[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +	 * Get the fully qualified class names of all meta-annotation types, +	 * <em>present</em> on the annotation (of the specified, +	 * {@code annotationType}) on the supplied {@link AnnotatedElement}., +	 *, +	 * <p>This method also finds all meta-annotations in the annotation, +	 * hierarchy above the specified annotation., +	 *, +	 * @param element the annotated element; never {@code null}, +	 * @param annotationType the annotation type on which to find, +	 * meta-annotations; never {@code null}, +	 * @return the names of all meta-annotations present on the annotation,, +	 * or {@code null} if not found, +	 */, +	public static Set<String> getMetaAnnotationTypes(AnnotatedElement element,, +			Class<? extends Annotation> annotationType) {, +		Assert.notNull(annotationType, "annotationType must not be null");, +		return getMetaAnnotationTypes(element, annotationType.getName());, +	}, +, +	/**, +	 * Get the fully qualified class names of all meta-annotation types, +	 * <em>present</em> on the annotation (of the specified, +	 * {@code annotationType}) on the supplied {@link AnnotatedElement}., +	 *, +	 * <p>This method also finds all meta-annotations in the annotation, +	 * hierarchy above the specified annotation., +	 *, +	 * type on which to find meta-annotations; never {@code null} or empty, +	 * @return the names of all meta-annotations present on the annotation,, +	 * or {@code null} if not found, +, +		processWithGetSemantics(element, annotationType, new SimpleAnnotationProcessor<Object>() {, +, +		return Boolean.TRUE.equals(processWithGetSemantics(element, annotationType, new SimpleAnnotationProcessor<Boolean>() {, +		return Boolean.TRUE.equals(processWithGetSemantics(element, annotationType, new SimpleAnnotationProcessor<Boolean>() {, +					// TODO Add check for !isInJavaLangAnnotationPackage(), +					// if (!AnnotationUtils.isInJavaLangAnnotationPackage(annotation), +					// && (annotation.annotationType().getName().equals(annotationType) ||, +					// metaDepth > 0)) {, +					if (!AnnotationUtils.isInJavaLangAnnotationPackage(annotation), +							&& (annotation.annotationType().getName().equals(annotationType) || metaDepth > 0)) {, +		 * that is present in the annotation hierarchy, between the initial, +		 * {@link AnnotatedElement} and a target annotation found by the, +		 * search algorithm., +	/**, +	 * {@link Processor} that only {@linkplain #process processes} annotations, +	 * and does not {@link #postProcess} results., +	 * @since 4.2, +	 */, +	private abstract static class SimpleAnnotationProcessor<T> implements Processor<T> {, +, +		/**, +		 * <em>No-op</em>., +		 */, +		@Override, +		public final void postProcess(Annotation annotation, T result) {, +			/* no-op */, +		}, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +	 * Get the fully qualified class names of all meta-annotation types, +	 * <em>present</em> on the annotation (of the specified, +	 * {@code annotationType}) on the supplied {@link AnnotatedElement}., +	 *, +	 * <p>This method also finds all meta-annotations in the annotation, +	 * hierarchy above the specified annotation., +	 *, +	 * @param element the annotated element; never {@code null}, +	 * @param annotationType the annotation type on which to find, +	 * meta-annotations; never {@code null}, +	 * @return the names of all meta-annotations present on the annotation,, +	 * or {@code null} if not found, +	 */, +	public static Set<String> getMetaAnnotationTypes(AnnotatedElement element,, +			Class<? extends Annotation> annotationType) {, +		Assert.notNull(annotationType, "annotationType must not be null");, +		return getMetaAnnotationTypes(element, annotationType.getName());, +	}, +, +	/**, +	 * Get the fully qualified class names of all meta-annotation types, +	 * <em>present</em> on the annotation (of the specified, +	 * {@code annotationType}) on the supplied {@link AnnotatedElement}., +	 *, +	 * <p>This method also finds all meta-annotations in the annotation, +	 * hierarchy above the specified annotation., +	 *, +	 * type on which to find meta-annotations; never {@code null} or empty, +	 * @return the names of all meta-annotations present on the annotation,, +	 * or {@code null} if not found, +, +		processWithGetSemantics(element, annotationType, new SimpleAnnotationProcessor<Object>() {, +, +		return Boolean.TRUE.equals(processWithGetSemantics(element, annotationType, new SimpleAnnotationProcessor<Boolean>() {, +		return Boolean.TRUE.equals(processWithGetSemantics(element, annotationType, new SimpleAnnotationProcessor<Boolean>() {, +					// TODO Add check for !isInJavaLangAnnotationPackage(), +					// if (!AnnotationUtils.isInJavaLangAnnotationPackage(annotation), +					// && (annotation.annotationType().getName().equals(annotationType) ||]