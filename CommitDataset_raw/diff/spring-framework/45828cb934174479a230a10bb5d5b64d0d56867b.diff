[+++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, + * Copyright 2002-2018 the original author or authors., +	/**, +	 * Retrieve a {@link BeanInfo} descriptor for the given target class., +	 * @param beanClass the target class to introspect, +	 * @param ignoreBeaninfoClasses whether to apply {@link Introspector#IGNORE_ALL_BEANINFO} mode, +	 * @return the resulting {@code BeanInfo} descriptor (never {@code null}), +	 * @throws IntrospectionException from the underlying {@link Introspector}, +	 */, +	private static BeanInfo getBeanInfo(Class<?> beanClass, boolean ignoreBeaninfoClasses), +			throws IntrospectionException {, +, +		for (BeanInfoFactory beanInfoFactory : beanInfoFactories) {, +			BeanInfo beanInfo = beanInfoFactory.getBeanInfo(beanClass);, +			if (beanInfo != null) {, +				return beanInfo;, +			}, +		}, +		return (ignoreBeaninfoClasses ?, +				Introspector.getBeanInfo(beanClass, Introspector.IGNORE_ALL_BEANINFO) :, +				Introspector.getBeanInfo(beanClass));, +	}, +, +			this.beanInfo = getBeanInfo(beanClass, shouldIntrospectorIgnoreBeaninfoClasses);, +			while (clazz != null && clazz != Object.class) {, +					if (!ClassUtils.isJavaLanguageInterface(ifc)) {, +						BeanInfo ifcInfo = getBeanInfo(ifc, true);, +				}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, + * Copyright 2002-2018 the original author or authors., +	/**, +	 * Retrieve a {@link BeanInfo} descriptor for the given target class., +	 * @param beanClass the target class to introspect, +	 * @param ignoreBeaninfoClasses whether to apply {@link Introspector#IGNORE_ALL_BEANINFO} mode, +	 * @return the resulting {@code BeanInfo} descriptor (never {@code null}), +	 * @throws IntrospectionException from the underlying {@link Introspector}, +	 */, +	private static BeanInfo getBeanInfo(Class<?> beanClass, boolean ignoreBeaninfoClasses), +			throws IntrospectionException {, +, +		for (BeanInfoFactory beanInfoFactory : beanInfoFactories) {, +			BeanInfo beanInfo = beanInfoFactory.getBeanInfo(beanClass);, +			if (beanInfo != null) {, +				return beanInfo;, +			}, +		}, +		return (ignoreBeaninfoClasses ?, +				Introspector.getBeanInfo(beanClass, Introspector.IGNORE_ALL_BEANINFO) :, +				Introspector.getBeanInfo(beanClass));, +	}, +, +			this.beanInfo = getBeanInfo(beanClass, shouldIntrospectorIgnoreBeaninfoClasses);, +			while (clazz != null && clazz != Object.class) {, +					if (!ClassUtils.isJavaLanguageInterface(ifc)) {, +						BeanInfo ifcInfo = getBeanInfo(ifc, true);, +				}, +, +++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, + * Copyright 2002-2018 the original author or authors., +	private static final ReactiveAdapterRegistry reactiveAdapterRegistry = ReactiveAdapterRegistry.getSharedInstance();, +				if (!ClassUtils.isJavaLanguageInterface(ifc)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, + * Copyright 2002-2018 the original author or authors., +	/**, +	 * Retrieve a {@link BeanInfo} descriptor for the given target class., +	 * @param beanClass the target class to introspect, +	 * @param ignoreBeaninfoClasses whether to apply {@link Introspector#IGNORE_ALL_BEANINFO} mode, +	 * @return the resulting {@code BeanInfo} descriptor (never {@code null}), +	 * @throws IntrospectionException from the underlying {@link Introspector}, +	 */, +	private static BeanInfo getBeanInfo(Class<?> beanClass, boolean ignoreBeaninfoClasses), +			throws IntrospectionException {, +, +		for (BeanInfoFactory beanInfoFactory : beanInfoFactories) {, +			BeanInfo beanInfo = beanInfoFactory.getBeanInfo(beanClass);, +			if (beanInfo != null) {, +				return beanInfo;, +			}, +		}, +		return (ignoreBeaninfoClasses ?, +				Introspector.getBeanInfo(beanClass, Introspector.IGNORE_ALL_BEANINFO) :, +				Introspector.getBeanInfo(beanClass));, +	}, +, +			this.beanInfo = getBeanInfo(beanClass, shouldIntrospectorIgnoreBeaninfoClasses);, +			while (clazz != null && clazz != Object.class) {, +					if (!ClassUtils.isJavaLanguageInterface(ifc)) {, +						BeanInfo ifcInfo = getBeanInfo(ifc, true);, +				}, +, +++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, + * Copyright 2002-2018 the original author or authors., +	private static final ReactiveAdapterRegistry reactiveAdapterRegistry = ReactiveAdapterRegistry.getSharedInstance();, +				if (!ClassUtils.isJavaLanguageInterface(ifc)) {, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, + * Copyright 2002-2018 the original author or authors., +import java.io.Externalizable;, +import java.io.Serializable;, +	 * Common Java language interfaces which are supposed to be ignored]