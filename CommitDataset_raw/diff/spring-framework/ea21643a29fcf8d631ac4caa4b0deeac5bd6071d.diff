[+++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/StringDecoder.java, +import java.util.ArrayList;, +import java.util.function.IntPredicate;, +	private static final IntPredicate NEWLINE_DELIMITER = b -> b == '\n' || b == '\r';, +, +			inputFlux = inputFlux.flatMap(StringDecoder::splitOnNewline);, +	private static Flux<DataBuffer> splitOnNewline(DataBuffer dataBuffer) {, +		List<DataBuffer> results = new ArrayList<DataBuffer>();, +		int startIdx = 0;, +		int endIdx = 0;, +		final int limit = dataBuffer.readableByteCount();, +		do {, +			endIdx = dataBuffer.indexOf(NEWLINE_DELIMITER, startIdx);, +			int length = endIdx != -1 ? endIdx - startIdx + 1 : limit - startIdx;, +			DataBuffer token = dataBuffer.slice(startIdx, length);, +			results.add(DataBufferUtils.retain(token));, +			startIdx = endIdx + 1;, +		}, +		while (startIdx < limit && endIdx != -1);, +		DataBufferUtils.release(dataBuffer);, +		return Flux.fromIterable(results);, +	}, +	, +, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/StringDecoder.java, +import java.util.ArrayList;, +import java.util.function.IntPredicate;, +	private static final IntPredicate NEWLINE_DELIMITER = b -> b == '\n' || b == '\r';, +, +			inputFlux = inputFlux.flatMap(StringDecoder::splitOnNewline);, +	private static Flux<DataBuffer> splitOnNewline(DataBuffer dataBuffer) {, +		List<DataBuffer> results = new ArrayList<DataBuffer>();, +		int startIdx = 0;, +		int endIdx = 0;, +		final int limit = dataBuffer.readableByteCount();, +		do {, +			endIdx = dataBuffer.indexOf(NEWLINE_DELIMITER, startIdx);, +			int length = endIdx != -1 ? endIdx - startIdx + 1 : limit - startIdx;, +			DataBuffer token = dataBuffer.slice(startIdx, length);, +			results.add(DataBufferUtils.retain(token));, +			startIdx = endIdx + 1;, +		}, +		while (startIdx < limit && endIdx != -1);, +		DataBufferUtils.release(dataBuffer);, +		return Flux.fromIterable(results);, +	}, +	, +, +++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DataBuffer.java, +	 * @param fromIndex the index to start the search from, +	int indexOf(IntPredicate predicate, int fromIndex);, +	 * @param fromIndex the index to start the search from, +	int lastIndexOf(IntPredicate predicate, int fromIndex);, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/StringDecoder.java, +import java.util.ArrayList;, +import java.util.function.IntPredicate;, +	private static final IntPredicate NEWLINE_DELIMITER = b -> b == '\n' || b == '\r';, +, +			inputFlux = inputFlux.flatMap(StringDecoder::splitOnNewline);, +	private static Flux<DataBuffer> splitOnNewline(DataBuffer dataBuffer) {, +		List<DataBuffer> results = new ArrayList<DataBuffer>();, +		int startIdx = 0;, +		int endIdx = 0;, +		final int limit = dataBuffer.readableByteCount();, +		do {, +			endIdx = dataBuffer.indexOf(NEWLINE_DELIMITER, startIdx);, +			int length = endIdx != -1 ? endIdx - startIdx + 1 : limit - startIdx;, +			DataBuffer token = dataBuffer.slice(startIdx, length);, +			results.add(DataBufferUtils.retain(token));, +			startIdx = endIdx + 1;, +		}, +		while (startIdx < limit && endIdx != -1);, +		DataBufferUtils.release(dataBuffer);, +		return Flux.fromIterable(results);, +	}, +	, +, +++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DataBuffer.java, +	 * @param fromIndex the index to start the search from, +	int indexOf(IntPredicate predicate, int fromIndex);, +	 * @param fromIndex the index to start the search from, +	int lastIndexOf(IntPredicate predicate, int fromIndex);, +++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java, +	public int indexOf(IntPredicate predicate, int fromIndex) {, +		Assert.notNull(predicate, "'predicate' must not be null");, +, +		if (fromIndex < 0) {, +			fromIndex = 0;, +		}, +		else if (fromIndex >= this.writePosition) {, +			return -1;, +		}, +		for (int i = fromIndex; i < this.writePosition; i++) {, +	public int lastIndexOf(IntPredicate predicate, int fromIndex) {, +		Assert.notNull(predicate, "'predicate' must not be null");, +		int i = Math.min(fromIndex, this.writePosition - 1);, +		for (; i >= 0; i--) {, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/StringDecoder.java, +import java.util.ArrayList;, +import java.util.function.IntPredicate;]