[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractNamedValueMethodArgumentResolver.java, + * Abstract base class to resolve method arguments from a named value, e.g., + * message headers or destination variables. Named values could have one or more, + * of a name, a required flag, and a default value., + * <p>Subclasses only need to define specific steps such as how to obtain named, + * value details from a method parameter, how to resolve to argument values, or, + * how to handle missing values., + *  <p>A default value string can contain ${...} placeholders and Spring, + * Expression Language {@code #{...}} expressions which will be resolved if a, + * {@link ConfigurableBeanFactory} is supplied to the class constructor., + * <p>A {@link ConversionService} is used to to convert resolved String argument, + * value to the expected target method parameter type., +	 * @param conversionService conversion service for converting String values, +	 * to the target method parameter type, +	 * @param beanFactory a bean factory for resolving {@code ${...}}, +	 * placeholders and {@code #{...}} SpEL expressions in default values, +, +		Object resolvedName = resolveEmbeddedValuesAndExpressions(namedValueInfo.name);, +				arg = resolveEmbeddedValuesAndExpressions(namedValueInfo.defaultValue);, +			arg = resolveEmbeddedValuesAndExpressions(namedValueInfo.defaultValue);, +	 * Create the {@link NamedValueInfo} object for the given method parameter., +	 * Implementations typically retrieve the method annotation by means of, +	 * {@link MethodParameter#getParameterAnnotation(Class)}., +	 * Fall back on the parameter name from the class file if necessary and, +	 * replace {@link ValueConstants#DEFAULT_NONE} with null., +				Class<?> type = parameter.getParameterType();, +				throw new IllegalArgumentException(, +						"Name for argument of type [" + type.getName() + "] not specified, " +, +								"and parameter name information not found in class file either.");, +		return new NamedValueInfo(name, info.required,, +				ValueConstants.DEFAULT_NONE.equals(info.defaultValue) ? null : info.defaultValue);, +	private Object resolveEmbeddedValuesAndExpressions(String value) {, +	 * Invoked when a value is required, but {@link #resolveArgumentInternal}, +	 * returned {@code null} and there is no default value. Sub-classes can, +	 * throw an appropriate exception for this case., +	 * @param parameter the target method parameter, +	 * One last chance to handle a possible null value., +	 * Specifically for booleans method parameters, use {@link Boolean#FALSE}., +	 * Also raise an ISE for primitive types., +	 * Represents a named value declaration., +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractNamedValueMethodArgumentResolver.java, + * Abstract base class to resolve method arguments from a named value, e.g., + * message headers or destination variables. Named values could have one or more, + * of a name, a required flag, and a default value., + * <p>Subclasses only need to define specific steps such as how to obtain named, + * value details from a method parameter, how to resolve to argument values, or, + * how to handle missing values., + *  <p>A default value string can contain ${...} placeholders and Spring, + * Expression Language {@code #{...}} expressions which will be resolved if a, + * {@link ConfigurableBeanFactory} is supplied to the class constructor., + * <p>A {@link ConversionService} is used to to convert resolved String argument, + * value to the expected target method parameter type., +	 * @param conversionService conversion service for converting String values, +	 * to the target method parameter type, +	 * @param beanFactory a bean factory for resolving {@code ${...}}, +	 * placeholders and {@code #{...}} SpEL expressions in default values, +, +		Object resolvedName = resolveEmbeddedValuesAndExpressions(namedValueInfo.name);, +				arg = resolveEmbeddedValuesAndExpressions(namedValueInfo.defaultValue);, +			arg = resolveEmbeddedValuesAndExpressions(namedValueInfo.defaultValue);, +	 * Create the {@link NamedValueInfo} object for the given method parameter., +	 * Implementations typically retrieve the method annotation by means of, +	 * {@link MethodParameter#getParameterAnnotation(Class)}., +	 * Fall back on the parameter name from the class file if necessary and, +	 * replace {@link ValueConstants#DEFAULT_NONE} with null., +				Class<?> type = parameter.getParameterType();, +				throw new IllegalArgumentException(, +						"Name for argument of type [" + type.getName() + "] not specified, " +, +								"and parameter name information not found in class file either.");, +		return new NamedValueInfo(name, info.required,, +				ValueConstants.DEFAULT_NONE.equals(info.defaultValue) ? null : info.defaultValue);, +	private Object resolveEmbeddedValuesAndExpressions(String value) {, +	 * Invoked when a value is required, but {@link #resolveArgumentInternal}, +	 * returned {@code null} and there is no default value. Sub-classes can, +	 * throw an appropriate exception for this case., +	 * @param parameter the target method parameter, +	 * One last chance to handle a possible null value., +	 * Specifically for booleans method parameters, use {@link Boolean#FALSE}., +	 * Also raise an ISE for primitive types., +	 * Represents a named value declaration., +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/DestinationVariableMethodArgumentResolver.java, +import org.springframework.messaging.MessageHeaders;, + * Resolve for {@link DestinationVariable @DestinationVariable} method parameters., +	/** The name of the header used to for template variables. */, +		DestinationVariable annot = parameter.getParameterAnnotation(DestinationVariable.class);, +		Assert.state(annot != null, "No DestinationVariable annotation");, +		return new DestinationVariableNamedValueInfo(annot);, +	protected Object resolveArgumentInternal(MethodParameter parameter, Message<?> message, String name) {, +		MessageHeaders headers = message.getHeaders();, +		Map<String, String> vars = (Map<String, String>) headers.get(DESTINATION_TEMPLATE_VARIABLES_HEADER);, +		return vars != null ? vars.get(name) : null;, +		throw new MessageHandlingException(message, "Missing path template variable '" + name + "' " +, +				"for method parameter type [" + parameter.getParameterType() + "]");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractNamedValueMethodArgumentResolver.java, + * Abstract base class to resolve method arguments from a named value, e.g., + * message headers or destination variables. Named values could have one or more, + * of a name, a required flag, and a default value., + * <p>Subclasses only need to define specific steps such as how to obtain named, + * value details from a method parameter, how to resolve to argument values, or, + * how to handle missing values.]