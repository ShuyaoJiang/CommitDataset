[+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +, +	/**, +	 * Determine the specific executor to use when executing the given method., +	 * @returns the executor to use (never {@code null}), +	 */, +	protected AsyncTaskExecutor determineAsyncExecutor(Method method) {, +		if (!this.executors.containsKey(method)) {, +			Executor executor = this.defaultExecutor;, +			String qualifier = getExecutorQualifier(method);, +			if (StringUtils.hasLength(qualifier)) {, +				Assert.notNull(this.beanFactory,, +						"BeanFactory must be set on " + this.getClass().getSimpleName() +, +						" to access qualified executor [" + qualifier + "]");, +				executor = BeanFactoryAnnotationUtils.qualifiedBeanOfType(, +						this.beanFactory, Executor.class, qualifier);, +			}, +			if (executor instanceof AsyncTaskExecutor) {, +				this.executors.put(method, (AsyncTaskExecutor) executor);, +			}, +			else if (executor != null) {, +				this.executors.put(method, new TaskExecutorAdapter(executor));, +			}, +		}, +		return this.executors.get(method);, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +, +	/**, +	 * Determine the specific executor to use when executing the given method., +	 * @returns the executor to use (never {@code null}), +	 */, +	protected AsyncTaskExecutor determineAsyncExecutor(Method method) {, +		if (!this.executors.containsKey(method)) {, +			Executor executor = this.defaultExecutor;, +			String qualifier = getExecutorQualifier(method);, +			if (StringUtils.hasLength(qualifier)) {, +				Assert.notNull(this.beanFactory,, +						"BeanFactory must be set on " + this.getClass().getSimpleName() +, +						" to access qualified executor [" + qualifier + "]");, +				executor = BeanFactoryAnnotationUtils.qualifiedBeanOfType(, +						this.beanFactory, Executor.class, qualifier);, +			}, +			if (executor instanceof AsyncTaskExecutor) {, +				this.executors.put(method, (AsyncTaskExecutor) executor);, +			}, +			else if (executor != null) {, +				this.executors.put(method, new TaskExecutorAdapter(executor));, +			}, +		}, +		return this.executors.get(method);, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java, +	 * @param beanFactory the BeanFactory to get the target bean from, +	 * @throws NoSuchBeanDefinitionException if no matching bean of type {@code T} found, +			throw new NoSuchBeanDefinitionException(qualifier, "No matching " + beanType.getSimpleName() +, +	 * Obtain a bean of type {@code T} from the given {@code BeanFactory} declaring a qualifier, +	 * (e.g. {@code <qualifier>} or {@code @Qualifier}) matching the given qualifier)., +	 * @throws NoSuchBeanDefinitionException if no matching bean of type {@code T} found, +					throw new NoSuchBeanDefinitionException(qualifier, "No unique " + beanType.getSimpleName() +, +			throw new NoSuchBeanDefinitionException(qualifier, "No matching " + beanType.getSimpleName() +, +					" bean found for qualifier '" + qualifier + "' - neither qualifier " + "match nor bean name match!");]