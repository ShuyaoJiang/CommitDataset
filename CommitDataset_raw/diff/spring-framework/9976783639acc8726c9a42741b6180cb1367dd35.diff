[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +		public RequestBodySpec uri(String uriTemplate, Function<UriBuilder, URI> uriFunction) {, +			attribute(URI_TEMPLATE_ATTRIBUTE, uriTemplate);, +			return uri(uriFunction.apply(uriBuilderFactory.uriString(uriTemplate)));, +		}, +, +		@Override, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +		public RequestBodySpec uri(String uriTemplate, Function<UriBuilder, URI> uriFunction) {, +			attribute(URI_TEMPLATE_ATTRIBUTE, uriTemplate);, +			return uri(uriFunction.apply(uriBuilderFactory.uriString(uriTemplate)));, +		}, +, +		@Override, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java, +		 * configured for this client and initialized with the specified <code>uri</code>., +		 */, +		S uri(String uri, Function<UriBuilder, URI> uriFunction);, +, +		/**, +		 * Build the URI for the request using the {@link UriBuilderFactory}, +		 * @see #uri(String, Function), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +		public RequestBodySpec uri(String uriTemplate, Function<UriBuilder, URI> uriFunction) {, +			attribute(URI_TEMPLATE_ATTRIBUTE, uriTemplate);, +			return uri(uriFunction.apply(uriBuilderFactory.uriString(uriTemplate)));, +		}, +, +		@Override, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java, +		 * configured for this client and initialized with the specified <code>uri</code>., +		 */, +		S uri(String uri, Function<UriBuilder, URI> uriFunction);, +, +		/**, +		 * Build the URI for the request using the {@link UriBuilderFactory}, +		 * @see #uri(String, Function), +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/DefaultWebClientTests.java, +, +	@Test, +	public void uriBuilderWithUriTemplate() {, +		this.builder.build().get(), +					.uri("/path/{id}", builder -> builder.queryParam("q", "12").build("identifier")), +					.exchange().block(Duration.ofSeconds(10));, +, +		ClientRequest request = verifyAndGetRequest();, +		assertEquals("/base/path/identifier?q=12", request.url().toString());, +		assertEquals("/path/{id}", request.attribute(WebClient.class.getName() + ".uriTemplate").<String>get());, +	}, +]