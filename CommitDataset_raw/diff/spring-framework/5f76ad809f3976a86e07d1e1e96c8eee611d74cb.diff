[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/PathVariableMethodArgumentResolver.java, +import org.springframework.web.bind.ServletRequestBindingException;, +	protected void handleMissingValue(String name, MethodParameter param) throws ServletRequestBindingException {, +		String paramType = param.getParameterType().getName();, +		throw new ServletRequestBindingException(, +				"Missing URI template variable '" + name + "' for method parameter type [" + paramType + "]");, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/PathVariableMethodArgumentResolver.java, +import org.springframework.web.bind.ServletRequestBindingException;, +	protected void handleMissingValue(String name, MethodParameter param) throws ServletRequestBindingException {, +		String paramType = param.getParameterType().getName();, +		throw new ServletRequestBindingException(, +				"Missing URI template variable '" + name + "' for method parameter type [" + paramType + "]");, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java, +import org.springframework.web.bind.ServletRequestBindingException;, + * @see #handleServletRequestBindingException, + * @see #handleRequestBodyNotValidException, +			else if (ex instanceof ServletRequestBindingException) {, +				return handleServletRequestBindingException((ServletRequestBindingException) ex, request, response,, +						handler);, +			}, +	 * @return an empty ModelAndView indicating the exception was handled, +	 * @throws IOException potentially thrown from response.sendError(), +			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {, +	 * @return an empty ModelAndView indicating the exception was handled, +	 * @throws IOException potentially thrown from response.sendError(), +			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {, +	 * @param handler the executed handler, +	 * @return an empty ModelAndView indicating the exception was handled, +	 * @throws IOException potentially thrown from response.sendError(), +			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {, +	 * @param handler the executed handler, +	 * @return an empty ModelAndView indicating the exception was handled, +	 * @throws IOException potentially thrown from response.sendError(), +			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {, +	 * @param handler the executed handler, +	 * @return an empty ModelAndView indicating the exception was handled, +	 * @throws IOException potentially thrown from response.sendError(), +			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {, +, +		response.sendError(HttpServletResponse.SC_BAD_REQUEST);, +		return new ModelAndView();, +	}, +, +	/**, +	 * Handle the case when an unrecoverable binding exception occurs - e.g. required header, required cookie., +	 * <p>The default implementation sends an HTTP 400 error, and returns an empty {@code ModelAndView}., +	 * Alternatively, a fallback view could be chosen, or the exception could be rethrown as-is., +	 * @param ex the exception to be handled, +	 * @param request current HTTP request, +	 * @param response current HTTP response, +	 * @param handler the executed handler, +	 * @return an empty ModelAndView indicating the exception was handled, +	 * @throws IOException potentially thrown from response.sendError(), +	 */, +	protected ModelAndView handleServletRequestBindingException(ServletRequestBindingException ex,, +			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {, +	 * @param handler the executed handler, +	 * @return an empty ModelAndView indicating the exception was handled, +	 * @throws IOException potentially thrown from response.sendError(), +			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {, +	 * @param handler the executed handler, +	 * @return an empty ModelAndView indicating the exception was handled, +	 * @throws IOException potentially thrown from response.sendError(), +			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {, +	 * @param handler the executed handler, +	 * @return an empty ModelAndView indicating the exception was handled, +	 * @throws IOException potentially thrown from response.sendError(), +			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {, +	 * @param handler the executed handler, +	 * @return an empty ModelAndView indicating the exception was handled, +	 * @throws IOException potentially thrown from response.sendError(), +			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {, +	 * @param handler the executed handler, +	 * @return an empty ModelAndView indicating the exception was handled, +	 * @throws IOException potentially thrown from response.sendError(), +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/PathVariableMethodArgumentResolver.java, +import org.springframework.web.bind.ServletRequestBindingException;, +	protected void handleMissingValue(String name, MethodParameter param) throws ServletRequestBindingException {, +		String paramType = param.getParameterType().getName();, +		throw new ServletRequestBindingException(, +				"Missing URI template variable '" + name + "' for method parameter type [" + paramType + "]");, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java, +import org.springframework.web.bind.ServletRequestBindingException;, + * @see #handleServletRequestBindingException, + * @see #handleRequestBodyNotValidException, +			else if (ex instanceof ServletRequestBindingException) {, +				return handleServletRequestBindingException((ServletRequestBindingException) ex, request, response,, +						handler);, +			}, +	 * @return an empty ModelAndView indicating the exception was handled, +	 * @throws IOException potentially thrown from response.sendError(), +			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {, +	 * @return an empty ModelAndView indicating the exception was handled, +	 * @throws IOException potentially thrown from response.sendError(), +			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {, +	 * @param handler the executed handler, +	 * @return an empty ModelAndView indicating the exception was handled, +	 * @throws IOException potentially thrown from response.sendError(), +			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {, +	 * @param handler the executed handler]