[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/PathResourceLookupFunction.java, +	@Override, +	public String toString() {, +		return String.format("%s -> %s", this.pattern, this.location);, +	}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/PathResourceLookupFunction.java, +	@Override, +	public String toString() {, +		return String.format("%s -> %s", this.pattern, this.location);, +	}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunction.java, +		return new RouterFunctions.SameComposedRouterFunction<>(this, other);, +		return new RouterFunctions.DifferentComposedRouterFunction(this, other);, +		return new RouterFunctions.FilteredRouterFunction<>(this, filterFunction);, +	}, +, +	/**, +	 * Accept the given visitor. Default implementation calls, +	 * {@link RouterFunctions.Visitor#unknown(RouterFunction)}; composed {@code RouterFunction}, +	 * implementations are expected to call {@code accept} for all components that make up this, +	 * router function, +	 * @param visitor the visitor to accept, +	 */, +	default void accept(RouterFunctions.Visitor visitor) {, +		visitor.unknown(this);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/PathResourceLookupFunction.java, +	@Override, +	public String toString() {, +		return String.format("%s -> %s", this.pattern, this.location);, +	}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunction.java, +		return new RouterFunctions.SameComposedRouterFunction<>(this, other);, +		return new RouterFunctions.DifferentComposedRouterFunction(this, other);, +		return new RouterFunctions.FilteredRouterFunction<>(this, filterFunction);, +	}, +, +	/**, +	 * Accept the given visitor. Default implementation calls, +	 * {@link RouterFunctions.Visitor#unknown(RouterFunction)}; composed {@code RouterFunction}, +	 * implementations are expected to call {@code accept} for all components that make up this, +	 * router function, +	 * @param visitor the visitor to accept, +	 */, +	default void accept(RouterFunctions.Visitor visitor) {, +		visitor.unknown(this);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctions.java, +		return new ResourcesRouterFunction(lookupFunction);, +, +	/**, +	 * Receives notifications from the logical structure of router functions., +	 */, +	public interface Visitor {, +, +		/**, +		 * Receive notification of the beginning of a nested router function., +		 * @param predicate the predicate that applies to the nested router functions, +		 * @see RouterFunctions#nest(RequestPredicate, RouterFunction), +		 */, +		void startNested(RequestPredicate predicate);, +, +		/**, +		 * Receive notification of the end of a nested router function., +		 * @param predicate the predicate that applies to the nested router functions, +		 * @see RouterFunctions#nest(RequestPredicate, RouterFunction), +		 */, +		void endNested(RequestPredicate predicate);, +, +		/**, +		 * Receive notification of a standard predicated route to a handler function., +		 * @param predicate the predicate that applies to the handler function, +		 * @param handlerFunction the handler function., +		 * @see RouterFunctions#route(RequestPredicate, HandlerFunction), +		 */, +		void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction);, +, +		/**, +		 * Receive notification of a resource router function., +		 * @param lookupFunction the lookup function for the resources, +		 * @see RouterFunctions#resources(Function), +		 */, +		void resources(Function<ServerRequest, Mono<Resource>> lookupFunction);, +, +		/**, +		 * Receive notification of an unknown router function. This method is called for router, +		 * functions that were not created via the various {@link RouterFunctions} methods., +		 * @param routerFunction the router function, +		 */, +		void unknown(RouterFunction<?> routerFunction);, +	}, +, +, +	private static abstract class AbstractRouterFunction<T extends ServerResponse> implements RouterFunction<T> {, +, +		@Override, +		public String toString() {, +			ToStringVisitor visitor = new ToStringVisitor();, +			accept(visitor);, +			return visitor.toString();, +		}, +	}]