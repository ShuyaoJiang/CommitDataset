[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java, + * Extension of {@link HandlerMethod} that invokes the underlying method with, + * argument values resolved from the current HTTP request through a list of, + * {@link HandlerMethodArgumentResolver}., +	 * Return the configured argument resolvers., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java, + * Extension of {@link HandlerMethod} that invokes the underlying method with, + * argument values resolved from the current HTTP request through a list of, + * {@link HandlerMethodArgumentResolver}., +	 * Return the configured argument resolvers., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncInvocableHandlerMethod.java, +import java.util.stream.Collectors;, +import org.springframework.core.DefaultParameterNameDiscoverer;, +import org.springframework.core.ParameterNameDiscoverer;, + * Extension of {@link HandlerMethod} that invokes the underlying method via, + * {@link InvocableHandlerMethod} but uses sync argument resolvers only and, + * thus can return directly a {@link HandlerResult} with no async wrappers., +public class SyncInvocableHandlerMethod extends HandlerMethod {, +, +	private final InvocableHandlerMethod delegate;, +		this.delegate = new InvocableHandlerMethod(handlerMethod);, +		this.delegate = new InvocableHandlerMethod(bean, method);, +	 * Configure the argument resolvers to use to use for resolving method, +	 * argument values against a {@code ServerWebExchange}., +	public void setArgumentResolvers(List<SyncHandlerMethodArgumentResolver> resolvers) {, +		this.delegate.setArgumentResolvers(new ArrayList<>(resolvers));, +	 * Return the configured argument resolvers., +	public List<SyncHandlerMethodArgumentResolver> getResolvers() {, +		return this.delegate.getResolvers().stream(), +				.map(resolver -> (SyncHandlerMethodArgumentResolver) resolver), +				.collect(Collectors.toList());, +	}, +, +	/**, +	 * Set the ParameterNameDiscoverer for resolving parameter names when needed, +	 * (e.g. default request attribute name)., +	 * <p>Default is a {@link DefaultParameterNameDiscoverer}., +	 */, +	public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {, +		this.delegate.setParameterNameDiscoverer(nameDiscoverer);, +	}, +, +	/**, +	 * Return the configured parameter name discoverer., +	 */, +	public ParameterNameDiscoverer getParameterNameDiscoverer() {, +		return this.delegate.getParameterNameDiscoverer();, +	 * Invoke the method for the given exchange., +	 * @param exchange the current exchange, +	 * @param bindingContext the binding context to use, +	 * @param providedArgs optional list of argument values to match by type, +	 * @return Mono with a {@link HandlerResult}., +		return this.delegate.invoke(exchange, bindingContext, providedArgs).block();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java, + * Extension of {@link HandlerMethod} that invokes the underlying method with, + * argument values resolved from the current HTTP request through a list of, + * {@link HandlerMethodArgumentResolver}., +	 * Return the configured argument resolvers., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncInvocableHandlerMethod.java, +import java.util.stream.Collectors;, +import org.springframework.core.DefaultParameterNameDiscoverer;, +import org.springframework.core.ParameterNameDiscoverer;, + * Extension of {@link HandlerMethod} that invokes the underlying method via, + * {@link InvocableHandlerMethod} but uses sync argument resolvers only and, + * thus can return directly a {@link HandlerResult} with no async wrappers., +public class SyncInvocableHandlerMethod extends HandlerMethod {, +, +	private final InvocableHandlerMethod delegate;, +		this.delegate = new InvocableHandlerMethod(handlerMethod);, +		this.delegate = new InvocableHandlerMethod(bean, method);, +	 * Configure the argument resolvers to use to use for resolving method, +	 * argument values against a {@code ServerWebExchange}., +	public void setArgumentResolvers(List<SyncHandlerMethodArgumentResolver> resolvers) {, +		this.delegate.setArgumentResolvers(new ArrayList<>(resolvers));, +	 * Return the configured argument resolvers., +	public List<SyncHandlerMethodArgumentResolver> getResolvers() {, +		return this.delegate.getResolvers().stream(), +				.map(resolver -> (SyncHandlerMethodArgumentResolver) resolver), +				.collect(Collectors.toList());, +	}, +, +	/**, +	 * Set the ParameterNameDiscoverer for resolving parameter names when needed, +	 * (e.g. default request attribute name)., +	 * <p>Default is a {@link DefaultParameterNameDiscoverer}., +	 */, +	public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {, +		this.delegate.setParameterNameDiscoverer(nameDiscoverer);, +	}, +, +	/**, +	 * Return the configured parameter name discoverer., +	 */, +	public ParameterNameDiscoverer getParameterNameDiscoverer() {, +		return this.delegate.getParameterNameDiscoverer();, +	 * Invoke the method for the given exchange., +	 * @param exchange the current exchange, +	 * @param bindingContext the binding context to use, +	 * @param providedArgs optional list of argument values to match by type, +	 * @return Mono with a {@link HandlerResult}.]