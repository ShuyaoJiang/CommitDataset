[+++ b/spring-context/src/main/java/org/springframework/context/ApplicationEventPublisher.java, + * Serves as super-interface for {@link ApplicationContext}., +	 * <p>If the specified {@code event} is not an {@link ApplicationEvent},, +	 * it is wrapped in a {@link PayloadApplicationEvent}., +	 * @since 4.2, +++ b/spring-context/src/main/java/org/springframework/context/ApplicationEventPublisher.java, + * Serves as super-interface for {@link ApplicationContext}., +	 * <p>If the specified {@code event} is not an {@link ApplicationEvent},, +	 * it is wrapped in a {@link PayloadApplicationEvent}., +	 * @since 4.2, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +	/** Environment used by this context */, +	private ConfigurableEnvironment environment;, +, +	private final Set<ApplicationListener<?>> applicationListeners = new LinkedHashSet<ApplicationListener<?>>();, +	/** ApplicationEvents published early */, +	private Set<ApplicationEvent> earlyApplicationEvents;, +, +		// Decorate event as an ApplicationEvent if necessary, +		ApplicationEvent applicationEvent;, +, +		// Multicast right now if possible - or lazily once the multicaster is initialized, +		if (this.earlyApplicationEvents != null) {, +			this.earlyApplicationEvents.add(applicationEvent);, +		}, +		else {, +		}, +, +		// Publish event via parent context as well..., +	LifecycleProcessor getLifecycleProcessor() throws IllegalStateException {, +, +		// Allow for the collection of early ApplicationEvents,, +		// to be published once the multicaster is available..., +		this.earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>();, +, +		for (String listenerBeanName : listenerBeanNames) {, +			getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);, +		}, +, +		// Publish early application events now that we finally have a multicaster..., +		Set<ApplicationEvent> earlyEventsToProcess = this.earlyApplicationEvents;, +		this.earlyApplicationEvents = null;, +		if (earlyEventsToProcess != null) {, +			for (ApplicationEvent earlyEvent : earlyEventsToProcess) {, +				getApplicationEventMulticaster().multicastEvent(earlyEvent);, +			}, +++ b/spring-context/src/main/java/org/springframework/context/ApplicationEventPublisher.java, + * Serves as super-interface for {@link ApplicationContext}., +	 * <p>If the specified {@code event} is not an {@link ApplicationEvent},, +	 * it is wrapped in a {@link PayloadApplicationEvent}., +	 * @since 4.2, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +	/** Environment used by this context */, +	private ConfigurableEnvironment environment;, +, +	private final Set<ApplicationListener<?>> applicationListeners = new LinkedHashSet<ApplicationListener<?>>();, +	/** ApplicationEvents published early */, +	private Set<ApplicationEvent> earlyApplicationEvents;, +, +		// Decorate event as an ApplicationEvent if necessary, +		ApplicationEvent applicationEvent;, +, +		// Multicast right now if possible - or lazily once the multicaster is initialized, +		if (this.earlyApplicationEvents != null) {, +			this.earlyApplicationEvents.add(applicationEvent);, +		}, +		else {, +		}, +, +		// Publish event via parent context as well..., +	LifecycleProcessor getLifecycleProcessor() throws IllegalStateException {, +, +		// Allow for the collection of early ApplicationEvents,, +		// to be published once the multicaster is available..., +		this.earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>();, +, +		for (String listenerBeanName : listenerBeanNames) {, +			getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);, +		}, +, +		// Publish early application events now that we finally have a multicaster..., +		Set<ApplicationEvent> earlyEventsToProcess = this.earlyApplicationEvents;, +		this.earlyApplicationEvents = null;, +		if (earlyEventsToProcess != null) {, +			for (ApplicationEvent earlyEvent : earlyEventsToProcess) {, +				getApplicationEventMulticaster().multicastEvent(earlyEvent);, +			}, +++ b/spring-context/src/test/java/org/springframework/context/event/ApplicationContextEventTests.java, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.config.BeanPostProcessor;, +import org.springframework.context.ApplicationContextAware;, +import org.springframework.context.support.GenericApplicationContext;, +import org.springframework.context.support.StaticMessageSource;, + * @author Juergen Hoeller, +	@Test, +	public void beanPostProcessorPublishesEvents() {, +		GenericApplicationContext context = new GenericApplicationContext();, +		context.registerBeanDefinition("listener", new RootBeanDefinition(BeanThatListens.class));, +		context.registerBeanDefinition("messageSource", new RootBeanDefinition(StaticMessageSource.class));, +		context.registerBeanDefinition("postProcessor", new RootBeanDefinition(EventPublishingBeanPostProcessor.class));]