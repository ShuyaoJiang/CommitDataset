[+++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/bind/PortletRequestDataBinder.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.web.portlet.util.PortletUtils;, +		MultipartRequest multipartRequest = PortletUtils.getNativeRequest(request, MultipartRequest.class);, +		if (multipartRequest != null) {, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/bind/PortletRequestDataBinder.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.web.portlet.util.PortletUtils;, +		MultipartRequest multipartRequest = PortletUtils.getNativeRequest(request, MultipartRequest.class);, +		if (multipartRequest != null) {, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/context/PortletWebRequest.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.web.portlet.util.PortletUtils;, +		return PortletUtils.getNativeRequest(getRequest(), requiredType);, +		return PortletUtils.getNativeResponse(getResponse(), requiredType);, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/bind/PortletRequestDataBinder.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.web.portlet.util.PortletUtils;, +		MultipartRequest multipartRequest = PortletUtils.getNativeRequest(request, MultipartRequest.class);, +		if (multipartRequest != null) {, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/context/PortletWebRequest.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.web.portlet.util.PortletUtils;, +		return PortletUtils.getNativeRequest(getRequest(), requiredType);, +		return PortletUtils.getNativeResponse(getResponse(), requiredType);, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/util/PortletUtils.java, + * Copyright 2002-2011 the original author or authors., +import javax.portlet.PortletResponse;, +import javax.portlet.filter.PortletRequestWrapper;, +import javax.portlet.filter.PortletResponseWrapper;, +	 * Return an appropriate request object of the specified type, if available,, +	 * unwrapping the given request as far as necessary., +	 * @param request the portlet request to introspect, +	 * @param requiredType the desired type of request object, +	 * @return the matching request object, or <code>null</code> if none, +	 * of that type is available, +	 */, +	@SuppressWarnings("unchecked"), +	public static <T> T getNativeRequest(PortletRequest request, Class<T> requiredType) {, +		if (requiredType != null) {, +			if (requiredType.isInstance(request)) {, +				return (T) request;, +			}, +			else if (request instanceof PortletRequestWrapper) {, +				return getNativeRequest(((PortletRequestWrapper) request).getRequest(), requiredType);, +			}, +		}, +		return null;, +	}, +, +	/**, +	 * Return an appropriate response object of the specified type, if available,, +	 * unwrapping the given response as far as necessary., +	 * @param response the portlet response to introspect, +	 * @param requiredType the desired type of response object, +	 * @return the matching response object, or <code>null</code> if none, +	 * of that type is available, +	 */, +	@SuppressWarnings("unchecked"), +	public static <T> T getNativeResponse(PortletResponse response, Class<T> requiredType) {, +		if (requiredType != null) {, +			if (requiredType.isInstance(response)) {, +				return (T) response;, +			}, +			else if (response instanceof PortletResponseWrapper) {, +				return getNativeResponse(((PortletResponseWrapper) response).getResponse(), requiredType);, +			}, +		}, +		return null;, +	}, +, +	/**, +	 * @param request current portlet request, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/bind/PortletRequestDataBinder.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.web.portlet.util.PortletUtils;, +		MultipartRequest multipartRequest = PortletUtils.getNativeRequest(request, MultipartRequest.class);, +		if (multipartRequest != null) {, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/context/PortletWebRequest.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.web.portlet.util.PortletUtils;, +		return PortletUtils.getNativeRequest(getRequest(), requiredType);, +		return PortletUtils.getNativeResponse(getResponse(), requiredType);, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/util/PortletUtils.java, + * Copyright 2002-2011 the original author or authors., +import javax.portlet.PortletResponse;, +import javax.portlet.filter.PortletRequestWrapper;, +import javax.portlet.filter.PortletResponseWrapper;, +	 * Return an appropriate request object of the specified type, if available,, +	 * unwrapping the given request as far as necessary., +	 * @param request the portlet request to introspect, +	 * @param requiredType the desired type of request object, +	 * @return the matching request object, or <code>null</code> if none, +	 * of that type is available, +	 */, +	@SuppressWarnings("unchecked"), +	public static <T> T getNativeRequest(PortletRequest request, Class<T> requiredType) {, +		if (requiredType != null) {, +			if (requiredType.isInstance(request)) {, +				return (T) request;]