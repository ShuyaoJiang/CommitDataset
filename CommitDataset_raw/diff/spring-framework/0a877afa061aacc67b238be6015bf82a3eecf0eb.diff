[+++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java, +	protected final Log logger = LogFactory.getLog(HandlerMethod.class);, +, +	 * Create an instance from a bean instance and a method., +		Assert.notNull(bean, "bean is required");, +		Assert.notNull(method, "method is required");, +	 * Create an instance from a bean instance, method name, and parameter types., +		Assert.notNull(bean, "bean is required");, +		Assert.notNull(methodName, "method is required");, +	 * Create an instance from a bean name, a method, and a {@code BeanFactory}., +	 * The method {@link #createWithResolvedBean()} may be used later to, +	 * re-create the {@code HandlerMethod} with an initialized the bean., +		Assert.hasText(beanName, "beanName is required");, +		Assert.notNull(beanFactory, "beanFactory is required");, +		Assert.notNull(method, "method is required");, +				"Bean factory [" + beanFactory + "] does not contain bean [" + beanName + "]");, +	 * Create an instance from another {@code HandlerMethod}., +	 */, +	protected HandlerMethod(HandlerMethod handlerMethod) {, +		Assert.notNull(handlerMethod, "HandlerMethod is required");, +		this.bean = handlerMethod.bean;, +		this.beanFactory = handlerMethod.beanFactory;, +		this.method = handlerMethod.method;, +		this.bridgedMethod = handlerMethod.bridgedMethod;, +		this.parameters = handlerMethod.parameters;, +	}, +, +	/**, +			this.parameters = new MethodParameter[parameterCount];, +				this.parameters[i] = new HandlerMethodParameter(i);, +		HandlerMethod handlerMethod = new HandlerMethod(handler, this.method);, +		handlerMethod.parameters = getMethodParameters();, +		return handlerMethod;, +++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java, +	protected final Log logger = LogFactory.getLog(HandlerMethod.class);, +, +	 * Create an instance from a bean instance and a method., +		Assert.notNull(bean, "bean is required");, +		Assert.notNull(method, "method is required");, +	 * Create an instance from a bean instance, method name, and parameter types., +		Assert.notNull(bean, "bean is required");, +		Assert.notNull(methodName, "method is required");, +	 * Create an instance from a bean name, a method, and a {@code BeanFactory}., +	 * The method {@link #createWithResolvedBean()} may be used later to, +	 * re-create the {@code HandlerMethod} with an initialized the bean., +		Assert.hasText(beanName, "beanName is required");, +		Assert.notNull(beanFactory, "beanFactory is required");, +		Assert.notNull(method, "method is required");, +				"Bean factory [" + beanFactory + "] does not contain bean [" + beanName + "]");, +	 * Create an instance from another {@code HandlerMethod}., +	 */, +	protected HandlerMethod(HandlerMethod handlerMethod) {, +		Assert.notNull(handlerMethod, "HandlerMethod is required");, +		this.bean = handlerMethod.bean;, +		this.beanFactory = handlerMethod.beanFactory;, +		this.method = handlerMethod.method;, +		this.bridgedMethod = handlerMethod.bridgedMethod;, +		this.parameters = handlerMethod.parameters;, +	}, +, +	/**, +			this.parameters = new MethodParameter[parameterCount];, +				this.parameters[i] = new HandlerMethodParameter(i);, +		HandlerMethod handlerMethod = new HandlerMethod(handler, this.method);, +		handlerMethod.parameters = getMethodParameters();, +		return handlerMethod;, +++ b/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java, +, +	 * Creates an instance from the given handler and method., +	 * Create an instance from a {@code HandlerMethod}., +	 */, +	public InvocableHandlerMethod(HandlerMethod handlerMethod) {, +		super(handlerMethod);, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java, +	protected final Log logger = LogFactory.getLog(HandlerMethod.class);, +, +	 * Create an instance from a bean instance and a method., +		Assert.notNull(bean, "bean is required");, +		Assert.notNull(method, "method is required");, +	 * Create an instance from a bean instance, method name, and parameter types., +		Assert.notNull(bean, "bean is required");, +		Assert.notNull(methodName, "method is required");, +	 * Create an instance from a bean name, a method, and a {@code BeanFactory}., +	 * The method {@link #createWithResolvedBean()} may be used later to, +	 * re-create the {@code HandlerMethod} with an initialized the bean., +		Assert.hasText(beanName, "beanName is required");, +		Assert.notNull(beanFactory, "beanFactory is required");, +		Assert.notNull(method, "method is required");, +				"Bean factory [" + beanFactory + "] does not contain bean [" + beanName + "]");, +	 * Create an instance from another {@code HandlerMethod}., +	 */, +	protected HandlerMethod(HandlerMethod handlerMethod) {, +		Assert.notNull(handlerMethod, "HandlerMethod is required");, +		this.bean = handlerMethod.bean;, +		this.beanFactory = handlerMethod.beanFactory;, +		this.method = handlerMethod.method;, +		this.bridgedMethod = handlerMethod.bridgedMethod;]