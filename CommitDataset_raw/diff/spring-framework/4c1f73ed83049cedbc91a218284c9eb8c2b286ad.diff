[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/MvcAnnotationDrivenExecutor.java, +import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMethodAdapter;, +import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMethodExceptionResolver;, +import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMethodMapping;, +		RootBeanDefinition methodMappingDef = new RootBeanDefinition(RequestMappingHandlerMethodMapping.class);, +		methodMappingDef.setSource(source);, +		methodMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		methodMappingDef.getPropertyValues().add("order", 0);, +		String methodMappingName = registrar.registerWithGeneratedName(methodMappingDef);, +		RootBeanDefinition methodAdapterDef = new RootBeanDefinition(RequestMappingHandlerMethodAdapter.class);, +		methodAdapterDef.setSource(source);, +		methodAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		methodAdapterDef.getPropertyValues().add("webBindingInitializer", bindingDef);, +		methodAdapterDef.getPropertyValues().add("messageConverters", messageConverters);, +			methodAdapterDef.getPropertyValues().add("customArgumentResolvers", spec.argumentResolvers());, +		String methodAdapterName = registrar.registerWithGeneratedName(methodAdapterDef);, +		RootBeanDefinition methodExceptionResolver = new RootBeanDefinition(, +				RequestMappingHandlerMethodExceptionResolver.class);, +		methodExceptionResolver.setSource(source);, +		methodExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		methodExceptionResolver.getPropertyValues().add("messageConverters", messageConverters);, +		methodExceptionResolver.getPropertyValues().add("order", 0);, +		String methodExceptionResolverName = registrar.registerWithGeneratedName(methodExceptionResolver);, +		compDefinition.addNestedComponent(new BeanComponentDefinition(methodMappingDef, methodMappingName));, +		compDefinition.addNestedComponent(new BeanComponentDefinition(methodAdapterDef, methodAdapterName));, +		compDefinition.addNestedComponent(new BeanComponentDefinition(methodExceptionResolver, methodExceptionResolverName));, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/MvcAnnotationDrivenExecutor.java, +import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMethodAdapter;, +import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMethodExceptionResolver;, +import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMethodMapping;, +		RootBeanDefinition methodMappingDef = new RootBeanDefinition(RequestMappingHandlerMethodMapping.class);, +		methodMappingDef.setSource(source);, +		methodMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		methodMappingDef.getPropertyValues().add("order", 0);, +		String methodMappingName = registrar.registerWithGeneratedName(methodMappingDef);, +		RootBeanDefinition methodAdapterDef = new RootBeanDefinition(RequestMappingHandlerMethodAdapter.class);, +		methodAdapterDef.setSource(source);, +		methodAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		methodAdapterDef.getPropertyValues().add("webBindingInitializer", bindingDef);, +		methodAdapterDef.getPropertyValues().add("messageConverters", messageConverters);, +			methodAdapterDef.getPropertyValues().add("customArgumentResolvers", spec.argumentResolvers());, +		String methodAdapterName = registrar.registerWithGeneratedName(methodAdapterDef);, +		RootBeanDefinition methodExceptionResolver = new RootBeanDefinition(, +				RequestMappingHandlerMethodExceptionResolver.class);, +		methodExceptionResolver.setSource(source);, +		methodExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		methodExceptionResolver.getPropertyValues().add("messageConverters", messageConverters);, +		methodExceptionResolver.getPropertyValues().add("order", 0);, +		String methodExceptionResolverName = registrar.registerWithGeneratedName(methodExceptionResolver);, +		compDefinition.addNestedComponent(new BeanComponentDefinition(methodMappingDef, methodMappingName));, +		compDefinition.addNestedComponent(new BeanComponentDefinition(methodAdapterDef, methodAdapterName));, +		compDefinition.addNestedComponent(new BeanComponentDefinition(methodExceptionResolver, methodExceptionResolverName));, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodAdapter.java, +import org.springframework.web.servlet.mvc.method.annotation.support.ServletWebArgumentResolverAdapter;, +	 * Return the message body converters that this adapter has been configured with., +	 */, +	public HttpMessageConverter<?>[] getMessageConverters() {, +		return messageConverters;, +	}, +, +	/**, +				argumentResolvers.registerArgumentResolver(new ServletWebArgumentResolverAdapter(customResolver));, +				initBinderArgumentResolvers.registerArgumentResolver(new ServletWebArgumentResolverAdapter(customResolver));, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/MvcAnnotationDrivenExecutor.java, +import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMethodAdapter;, +import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMethodExceptionResolver;, +import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMethodMapping;, +		RootBeanDefinition methodMappingDef = new RootBeanDefinition(RequestMappingHandlerMethodMapping.class);, +		methodMappingDef.setSource(source);, +		methodMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		methodMappingDef.getPropertyValues().add("order", 0);, +		String methodMappingName = registrar.registerWithGeneratedName(methodMappingDef);, +		RootBeanDefinition methodAdapterDef = new RootBeanDefinition(RequestMappingHandlerMethodAdapter.class);, +		methodAdapterDef.setSource(source);, +		methodAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		methodAdapterDef.getPropertyValues().add("webBindingInitializer", bindingDef);, +		methodAdapterDef.getPropertyValues().add("messageConverters", messageConverters);, +			methodAdapterDef.getPropertyValues().add("customArgumentResolvers", spec.argumentResolvers());, +		String methodAdapterName = registrar.registerWithGeneratedName(methodAdapterDef);, +		RootBeanDefinition methodExceptionResolver = new RootBeanDefinition(, +				RequestMappingHandlerMethodExceptionResolver.class);, +		methodExceptionResolver.setSource(source);, +		methodExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		methodExceptionResolver.getPropertyValues().add("messageConverters", messageConverters);, +		methodExceptionResolver.getPropertyValues().add("order", 0);, +		String methodExceptionResolverName = registrar.registerWithGeneratedName(methodExceptionResolver);, +		compDefinition.addNestedComponent(new BeanComponentDefinition(methodMappingDef, methodMappingName));, +		compDefinition.addNestedComponent(new BeanComponentDefinition(methodAdapterDef, methodAdapterName));, +		compDefinition.addNestedComponent(new BeanComponentDefinition(methodExceptionResolver, methodExceptionResolverName));, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodAdapter.java, +import org.springframework.web.servlet.mvc.method.annotation.support.ServletWebArgumentResolverAdapter;, +	 * Return the message body converters that this adapter has been configured with., +	 */, +	public HttpMessageConverter<?>[] getMessageConverters() {, +		return messageConverters;, +	}, +, +	/**, +				argumentResolvers.registerArgumentResolver(new ServletWebArgumentResolverAdapter(customResolver));, +				initBinderArgumentResolvers.registerArgumentResolver(new ServletWebArgumentResolverAdapter(customResolver));]