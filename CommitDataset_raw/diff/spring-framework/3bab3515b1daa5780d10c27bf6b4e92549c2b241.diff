[+++ b/spring-core/src/test/java/org/springframework/core/codec/AbstractEncoderTestCase.java, +/*, + * Copyright 2002-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.core.codec;, +, +import java.util.Map;, +import java.util.function.Consumer;, +import java.util.stream.Stream;, +, +import org.junit.After;, +import org.junit.Test;, +import org.reactivestreams.Publisher;, +import reactor.core.publisher.Flux;, +import reactor.test.StepVerifier;, +, +import org.springframework.core.ResolvableType;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferFactory;, +import org.springframework.core.io.buffer.DataBufferUtils;, +import org.springframework.core.io.buffer.LeakAwareDataBufferFactory;, +import org.springframework.lang.Nullable;, +import org.springframework.util.Assert;, +import org.springframework.util.MimeType;, +, +import static java.nio.charset.StandardCharsets.UTF_8;, +import static org.junit.Assert.*;, +, +/**, + * Abstract base class for {@link Encoder} unit tests. Subclasses need to implement, + * {@link #input()} and {@link #outputConsumers()}, from which {@link #encode()},, + * {@link #encodeError()} and {@link #encodeCancel()} are run., + *, + * @author Arjen Poutsma, + */, +@SuppressWarnings("ProtectedField"), +public abstract class AbstractEncoderTestCase<T, E extends Encoder<T>> {, +, +	/**, +	 * The data buffer factory used by the encoder., +	 */, +	protected final DataBufferFactory bufferFactory =, +			new LeakAwareDataBufferFactory();, +, +	/**, +	 * The encoder to test., +	 */, +	protected final E encoder;, +, +	/**, +	 * The type used for, +	 * {@link Encoder#encode(Publisher, DataBufferFactory, ResolvableType, MimeType, Map)}., +	 */, +	protected final ResolvableType elementType;, +, +	/**, +	 * The mime type used for, +	 * {@link Encoder#encode(Publisher, DataBufferFactory, ResolvableType, MimeType, Map)}., +	 * May be {@code null}., +	 */, +	@Nullable, +	protected final MimeType mimeType;, +, +	/**, +	 * The hints used for, +	 * {@link Encoder#encode(Publisher, DataBufferFactory, ResolvableType, MimeType, Map)}., +	 * May be {@code null}., +	 */, +	@Nullable, +	protected final Map<String, Object> hints;, +, +, +	/**, +	 * Construct a new {@code AbstractEncoderTestCase} for the given encoder and element class., +	 * @param encoder the encoder, +	 * @param elementClass the element class, +	 */, +	protected AbstractEncoderTestCase(E encoder, Class<?> elementClass) {, +		this(encoder, ResolvableType.forClass(elementClass), null, null);, +	}, +, +	/**, +	 * Construct a new {@code AbstractEncoderTestCase} for the given parameters., +	 * @param encoder the encoder, +	 * @param elementType the element type, +	 * @param mimeType the mime type. May be {@code null}., +	 * @param hints the hints. May be {@code null}.]