[+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +import java.net.InetSocketAddress;, +	 * Set the (new) value of the {@code Host} header., +	 * <p>If the given {@linkplain InetSocketAddress#getPort() port} is {@code 0}, the host header, +	 * will only contain the {@linkplain InetSocketAddress#getHostString() hostname}., +	 */, +	public void setHost(InetSocketAddress host) {, +		String value =, +				host.getPort() != 0 ? String.format("%s:%d", host.getHostString(), host.getPort()) :, +						host.getHostString();, +		set(HOST, value);, +	}, +, +	/**, +	 * Return the value of the required {@code Host} header., +	 * <p>If the header value does not contain a port, the returned, +	 * {@linkplain InetSocketAddress#getPort() port} will be {@code 0}., +	 */, +	public InetSocketAddress getHost() {, +		String value = getFirst(HOST);, +		if (value == null) {, +			return null;, +		}, +		int idx = value.lastIndexOf(':');, +		String hostname = null;, +		int port = 0;, +		if (idx != -1 && idx < value.length() - 1) {, +			hostname = value.substring(0, idx);, +			String portString = value.substring(idx + 1);, +			try {, +				port = Integer.parseInt(portString);, +			}, +			catch (NumberFormatException ex) {, +				// ignored, +			}, +		}, +		if (hostname == null) {, +			hostname = value;, +		}, +		return InetSocketAddress.createUnresolved(hostname, port);, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +import java.net.InetSocketAddress;, +	 * Set the (new) value of the {@code Host} header., +	 * <p>If the given {@linkplain InetSocketAddress#getPort() port} is {@code 0}, the host header, +	 * will only contain the {@linkplain InetSocketAddress#getHostString() hostname}., +	 */, +	public void setHost(InetSocketAddress host) {, +		String value =, +				host.getPort() != 0 ? String.format("%s:%d", host.getHostString(), host.getPort()) :, +						host.getHostString();, +		set(HOST, value);, +	}, +, +	/**, +	 * Return the value of the required {@code Host} header., +	 * <p>If the header value does not contain a port, the returned, +	 * {@linkplain InetSocketAddress#getPort() port} will be {@code 0}., +	 */, +	public InetSocketAddress getHost() {, +		String value = getFirst(HOST);, +		if (value == null) {, +			return null;, +		}, +		int idx = value.lastIndexOf(':');, +		String hostname = null;, +		int port = 0;, +		if (idx != -1 && idx < value.length() - 1) {, +			hostname = value.substring(0, idx);, +			String portString = value.substring(idx + 1);, +			try {, +				port = Integer.parseInt(portString);, +			}, +			catch (NumberFormatException ex) {, +				// ignored, +			}, +		}, +		if (hostname == null) {, +			hostname = value;, +		}, +		return InetSocketAddress.createUnresolved(hostname, port);, +	}, +, +	/**, +++ b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java, +import java.net.InetSocketAddress;, +	@Test, +	public void host() {, +		InetSocketAddress host = InetSocketAddress.createUnresolved("localhost", 8080);, +		headers.setHost(host);, +		assertEquals("Invalid Host header", host, headers.getHost());, +		assertEquals("Invalid Host header", "localhost:8080", headers.getFirst("Host"));, +, +	}, +, +	@Test, +	public void hostNoPort() {, +		InetSocketAddress host = InetSocketAddress.createUnresolved("localhost", 0);]