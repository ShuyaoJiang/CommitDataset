[+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binding.java, +	 * Used to determine if the user can interact with the field at all., +	 * @throws IllegalStateException if not editable or not enabled, +	 * @throws IllegalStateException if not editable, not enabled, or not dirty, +	 * @param property the nested property name, such as "foo"; should not be a property path like "foo.bar", +	 * @throws IllegalStateException if not a bean, +	Binding getBinding(String property);, +	 * @throws IllegalStateException if not a list, +	 * @throws IllegalStateException if not a map , +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binding.java, +	 * Used to determine if the user can interact with the field at all., +	 * @throws IllegalStateException if not editable or not enabled, +	 * @throws IllegalStateException if not editable, not enabled, or not dirty, +	 * @param property the nested property name, such as "foo"; should not be a property path like "foo.bar", +	 * @throws IllegalStateException if not a bean, +	Binding getBinding(String property);, +	 * @throws IllegalStateException if not a list, +	 * @throws IllegalStateException if not a map , +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binding.java, +	 * Used to determine if the user can interact with the field at all., +	 * @throws IllegalStateException if not editable or not enabled, +	 * @throws IllegalStateException if not editable, not enabled, or not dirty, +	 * @param property the nested property name, such as "foo"; should not be a property path like "foo.bar", +	 * @throws IllegalStateException if not a bean, +	Binding getBinding(String property);, +	 * @throws IllegalStateException if not a list, +	 * @throws IllegalStateException if not a map , +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/config/BindingRuleConfiguration.java, +	 * If a map property, set the Formatter to use to format map keys., +	 * If an list or map property, set the Formatter to use to format indexed elements., +	 * Set when the binding is editable., +	BindingRuleConfiguration editableWhen(Condition condition);, +	/**, +	 * Set when the binding is enabled., +	 */, +	BindingRuleConfiguration enabledWhen(Condition condition);, +, +	/**, +	 * Set when the binding is visible., +	 */, +	BindingRuleConfiguration visibleWhen(Condition condition);, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binding.java, +	 * Used to determine if the user can interact with the field at all., +	 * @throws IllegalStateException if not editable or not enabled, +	 * @throws IllegalStateException if not editable, not enabled, or not dirty, +	 * @param property the nested property name, such as "foo"; should not be a property path like "foo.bar", +	 * @throws IllegalStateException if not a bean, +	Binding getBinding(String property);, +	 * @throws IllegalStateException if not a list, +	 * @throws IllegalStateException if not a map , +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/config/BindingRuleConfiguration.java, +	 * If a map property, set the Formatter to use to format map keys., +	 * If an list or map property, set the Formatter to use to format indexed elements., +	 * Set when the binding is editable., +	BindingRuleConfiguration editableWhen(Condition condition);, +	/**, +	 * Set when the binding is enabled., +	 */, +	BindingRuleConfiguration enabledWhen(Condition condition);, +, +	/**, +	 * Set when the binding is visible., +	 */, +	BindingRuleConfiguration visibleWhen(Condition condition);, +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binding.java, +	 * Used to determine if the user can interact with the field at all., +	 * @throws IllegalStateException if not editable or not enabled, +	 * @throws IllegalStateException if not editable, not enabled, or not dirty, +	 * @param property the nested property name, such as "foo"; should not be a property path like "foo.bar", +	 * @throws IllegalStateException if not a bean, +	Binding getBinding(String property);, +	 * @throws IllegalStateException if not a list, +	 * @throws IllegalStateException if not a map , +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/config/BindingRuleConfiguration.java, +	 * If a map property, set the Formatter to use to format map keys., +	 * If an list or map property, set the Formatter to use to format indexed elements., +	 * Set when the binding is editable., +	BindingRuleConfiguration editableWhen(Condition condition);, +	/**, +	 * Set when the binding is enabled., +	 */, +	BindingRuleConfiguration enabledWhen(Condition condition);, +, +	/**, +	 * Set when the binding is visible., +	 */, +	BindingRuleConfiguration visibleWhen(Condition condition);, +++ /dev/null, +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binding.java, +	 * Used to determine if the user can interact with the field at all., +	 * @throws IllegalStateException if not editable or not enabled, +	 * @throws IllegalStateException if not editable, not enabled, or not dirty, +	 * @param property the nested property name, such as "foo"; should not be a property path like "foo.bar", +	 * @throws IllegalStateException if not a bean]