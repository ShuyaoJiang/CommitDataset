[+++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, + * Copyright 2002-2016 the original author or authors., +			// Explicitly check implemented interfaces for setter/getter methods as well,, +			// in particular for Java 8 default methods..., +			Class<?> clazz = beanClass;, +			while (clazz != null) {, +				Class<?>[] ifcs = clazz.getInterfaces();, +				for (Class<?> ifc : ifcs) {, +					BeanInfo ifcInfo = Introspector.getBeanInfo(ifc, Introspector.IGNORE_ALL_BEANINFO);, +					PropertyDescriptor[] ifcPds = ifcInfo.getPropertyDescriptors();, +					for (PropertyDescriptor pd : ifcPds) {, +						if (!this.propertyDescriptorCache.containsKey(pd.getName())) {, +							pd = buildGenericTypeAwarePropertyDescriptor(beanClass, pd);, +							this.propertyDescriptorCache.put(pd.getName(), pd);, +						}, +					}, +				}, +				clazz = clazz.getSuperclass();, +			}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, + * Copyright 2002-2016 the original author or authors., +			// Explicitly check implemented interfaces for setter/getter methods as well,, +			// in particular for Java 8 default methods..., +			Class<?> clazz = beanClass;, +			while (clazz != null) {, +				Class<?>[] ifcs = clazz.getInterfaces();, +				for (Class<?> ifc : ifcs) {, +					BeanInfo ifcInfo = Introspector.getBeanInfo(ifc, Introspector.IGNORE_ALL_BEANINFO);, +					PropertyDescriptor[] ifcPds = ifcInfo.getPropertyDescriptors();, +					for (PropertyDescriptor pd : ifcPds) {, +						if (!this.propertyDescriptorCache.containsKey(pd.getName())) {, +							pd = buildGenericTypeAwarePropertyDescriptor(beanClass, pd);, +							this.propertyDescriptorCache.put(pd.getName(), pd);, +						}, +					}, +				}, +				clazz = clazz.getSuperclass();, +			}, +, +++ b/spring-beans/src/test/java/org/springframework/beans/BeanWrapperTests.java, + * Copyright 2002-2016 the original author or authors., +	public void aliasedSetterThroughDefaultMethod() {, +		GetterBean target = new GetterBean();, +		BeanWrapper accessor = createAccessor(target);, +		accessor.setPropertyValue("aliasedName", "tom");, +		assertTrue("Set name to tom", target.getAliasedName().equals("tom"));, +	}, +, +	@Test, +	private interface AliasedProperty {, +, +		default void setAliasedName(String name) {, +			setName(name);, +		}, +, +		default String getAliasedName() {, +			return getName();, +		}, +, +		void setName(String name);, +, +		String getName();, +	}, +, +, +	@SuppressWarnings("unused"), +	private static class GetterBean implements AliasedProperty {, +]