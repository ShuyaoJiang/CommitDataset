[+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +			if (logger.isTraceEnabled()) {, +				logger.trace("Refreshing " + this);, +			}, +			else {, +				logger.debug("Refreshing " + getDisplayName());, +			}, +				logger.trace("No '" + MESSAGE_SOURCE_BEAN_NAME + "' bean, using [" + this.messageSource + "]");, +				logger.trace("No '" + APPLICATION_EVENT_MULTICASTER_BEAN_NAME + "' bean, using " +, +						"[" + this.applicationEventMulticaster.getClass().getSimpleName() + "]");, +				logger.trace("No '" + LIFECYCLE_PROCESSOR_BEAN_NAME + "' bean, using " +, +						"[" + this.lifecycleProcessor.getClass().getSimpleName() + "]");, +		sb.append(", started on ").append(new Date(getStartupDate()));, +		if (parent != null) {, +			sb.append(", parent: ").append(parent.getDisplayName());, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +			if (logger.isTraceEnabled()) {, +				logger.trace("Refreshing " + this);, +			}, +			else {, +				logger.debug("Refreshing " + getDisplayName());, +			}, +				logger.trace("No '" + MESSAGE_SOURCE_BEAN_NAME + "' bean, using [" + this.messageSource + "]");, +				logger.trace("No '" + APPLICATION_EVENT_MULTICASTER_BEAN_NAME + "' bean, using " +, +						"[" + this.applicationEventMulticaster.getClass().getSimpleName() + "]");, +				logger.trace("No '" + LIFECYCLE_PROCESSOR_BEAN_NAME + "' bean, using " +, +						"[" + this.lifecycleProcessor.getClass().getSimpleName() + "]");, +		sb.append(", started on ").append(new Date(getStartupDate()));, +		if (parent != null) {, +			sb.append(", parent: ").append(parent.getDisplayName());, +++ b/spring-context/src/main/java/org/springframework/context/support/DelegatingMessageSource.java, +, +	@Override, +	public String toString() {, +		return this.parentMessageSource != null ? this.parentMessageSource.toString() : "Empty MessageSource";, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +			if (logger.isTraceEnabled()) {, +				logger.trace("Refreshing " + this);, +			}, +			else {, +				logger.debug("Refreshing " + getDisplayName());, +			}, +				logger.trace("No '" + MESSAGE_SOURCE_BEAN_NAME + "' bean, using [" + this.messageSource + "]");, +				logger.trace("No '" + APPLICATION_EVENT_MULTICASTER_BEAN_NAME + "' bean, using " +, +						"[" + this.applicationEventMulticaster.getClass().getSimpleName() + "]");, +				logger.trace("No '" + LIFECYCLE_PROCESSOR_BEAN_NAME + "' bean, using " +, +						"[" + this.lifecycleProcessor.getClass().getSimpleName() + "]");, +		sb.append(", started on ").append(new Date(getStartupDate()));, +		if (parent != null) {, +			sb.append(", parent: ").append(parent.getDisplayName());, +++ b/spring-context/src/main/java/org/springframework/context/support/DelegatingMessageSource.java, +, +	@Override, +	public String toString() {, +		return this.parentMessageSource != null ? this.parentMessageSource.toString() : "Empty MessageSource";, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/context/ContextLoader.java, +				logger.info("Root WebApplicationContext initialized in " + elapsedTime + " ms");, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +			if (logger.isTraceEnabled()) {, +				logger.trace("Refreshing " + this);, +			}, +			else {, +				logger.debug("Refreshing " + getDisplayName());, +			}, +				logger.trace("No '" + MESSAGE_SOURCE_BEAN_NAME + "' bean, using [" + this.messageSource + "]");, +				logger.trace("No '" + APPLICATION_EVENT_MULTICASTER_BEAN_NAME + "' bean, using " +, +						"[" + this.applicationEventMulticaster.getClass().getSimpleName() + "]");, +				logger.trace("No '" + LIFECYCLE_PROCESSOR_BEAN_NAME + "' bean, using " +, +						"[" + this.lifecycleProcessor.getClass().getSimpleName() + "]");, +		sb.append(", started on ").append(new Date(getStartupDate()));, +		if (parent != null) {, +			sb.append(", parent: ").append(parent.getDisplayName());, +++ b/spring-context/src/main/java/org/springframework/context/support/DelegatingMessageSource.java, +, +	@Override, +	public String toString() {, +		return this.parentMessageSource != null ? this.parentMessageSource.toString() : "Empty MessageSource";, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/context/ContextLoader.java, +				logger.info("Root WebApplicationContext initialized in " + elapsedTime + " ms");, +++ b/spring-web/src/main/java/org/springframework/web/context/support/AnnotationConfigWebApplicationContext.java, +						logger.trace("Registering [" + configLocation + "]");, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +			if (logger.isTraceEnabled()) {, +				logger.trace("Refreshing " + this);, +			}, +			else {, +				logger.debug("Refreshing " + getDisplayName());, +			}, +				logger.trace("No '" + MESSAGE_SOURCE_BEAN_NAME + "' bean, using [" + this.messageSource + "]");, +				logger.trace("No '" + APPLICATION_EVENT_MULTICASTER_BEAN_NAME + "' bean, using " +, +						"[" + this.applicationEventMulticaster.getClass().getSimpleName() + "]");, +				logger.trace("No '" + LIFECYCLE_PROCESSOR_BEAN_NAME + "' bean, using " +, +						"[" + this.lifecycleProcessor.getClass().getSimpleName() + "]");, +		sb.append(", started on ").append(new Date(getStartupDate()));]