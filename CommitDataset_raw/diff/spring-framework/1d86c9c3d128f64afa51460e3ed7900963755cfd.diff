[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeFilterFunctions.java, +import java.nio.charset.CharsetEncoder;, +import java.util.Map;, +import java.util.function.Consumer;, +	 * Name of the {@link ClientRequest} attribute that contains the {@link Credentials}, as used by, +	public static final String BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE = ExchangeFilterFunctions.class.getName() + ".basicAuthenticationCredentials";, +	 * <p>Note that Basic Authentication only supports characters in the, +	 * {@link StandardCharsets#ISO_8859_1 ISO-8859-1} character set., +	 * @throws IllegalArgumentException if either {@code username} or {@code password} contain, +	 * characters that cannot be encoded to ISO-8859-1, +		checkIllegalCharacters(username, password);, +	 * the {@link Credentials} provided in the, +	 * {@linkplain ClientRequest#attributes() request attributes}. If the attribute is not found,, +	 * no authorization header is added., +	 * <p>Note that Basic Authentication only supports characters in the, +	 * {@link StandardCharsets#ISO_8859_1 ISO-8859-1} character set., +	 * @see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE, +	 * @see Credentials#basicAuthenticationCredentials(String, String), +				request -> request.attribute(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE).map(o -> (Credentials)o));, +		String credentialsString = credentials.username + ":" + credentials.password;, +		byte[] credentialBytes = credentialsString.getBytes(StandardCharsets.ISO_8859_1);, +	/*, +	 * Basic authentication only supports ISO 8859-1, see, +	 * https://stackoverflow.com/questions/702629/utf-8-characters-mangled-in-http-basic-auth-username#703341, +	 */, +	private static void checkIllegalCharacters(String username, String password) {, +		CharsetEncoder encoder = StandardCharsets.ISO_8859_1.newEncoder();, +		if (!encoder.canEncode(username) || !encoder.canEncode(password)) {, +			throw new IllegalArgumentException(, +					"Username or password contains characters that cannot be encoded to ISO-8859-1");, +		}, +, +	}, +, +, +, +	/**, +	 * Represents a combination of username and password, as used by {@link #basicAuthentication()}., +	 * @see #basicAuthenticationCredentials(String, String), +	 */, +	public static final class Credentials {, +		private final String username;, +		private final String password;, +		/**, +		 * Create a new {@code Credentials} instance with the given username and password., +		 * @param username the username, +		 * @param password the password, +		 */, +			Assert.notNull(username, "'username' must not be null");, +			Assert.notNull(password, "'password' must not be null");, +, +		/**, +		 * Return a consumer that stores the given username and password in the, +		 * {@linkplain ClientRequest.Builder#attributes(java.util.function.Consumer) request, +		 * attributes} as a {@code Credentials} object., +		 * @param username the username, +		 * @param password the password, +		 * @return a consumer that adds the given credentials to the attribute map, +		 * @see ClientRequest.Builder#attributes(java.util.function.Consumer), +		 * @see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE, +		 */, +		public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String username, String password) {, +			Credentials credentials = new Credentials(username, password);, +			checkIllegalCharacters(username, password);, +, +			return attributes -> attributes.put(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE, credentials);, +		}, +, +		@Override, +		public boolean equals(Object o) {, +			if (this == o) {, +				return true;, +			}, +			if (o instanceof Credentials) {, +				Credentials other = (Credentials) o;, +				return this.username.equals(other.username) &&, +						this.password.equals(other.password);, +, +			}, +			return false;, +		}, +, +		@Override, +		public int hashCode() {, +			return 31 * this.username.hashCode() + this.password.hashCode();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeFilterFunctions.java, +import java.nio.charset.CharsetEncoder;, +import java.util.Map;, +import java.util.function.Consumer;, +	 * Name of the {@link ClientRequest} attribute that contains the {@link Credentials}, as used by, +	public static final String BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE = ExchangeFilterFunctions.class.getName() + ".basicAuthenticationCredentials";, +	 * <p>Note that Basic Authentication only supports characters in the, +	 * {@link StandardCharsets#ISO_8859_1 ISO-8859-1} character set., +	 * @throws IllegalArgumentException if either {@code username} or {@code password} contain, +	 * characters that cannot be encoded to ISO-8859-1, +		checkIllegalCharacters(username, password);, +	 * the {@link Credentials} provided in the, +	 * {@linkplain ClientRequest#attributes() request attributes}. If the attribute is not found,, +	 * no authorization header is added., +	 * <p>Note that Basic Authentication only supports characters in the]