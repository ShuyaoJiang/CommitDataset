[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/propertyeditors/CustomNumberEditor.java, + * Copyright 2002-2009 the original author or authors., +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +++ b/org.springframework.beans/src/main/java/org/springframework/beans/propertyeditors/CustomNumberEditor.java, + * Copyright 2002-2009 the original author or authors., +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +++ b/org.springframework.core/src/main/java/org/springframework/util/NumberUtils.java, + * Copyright 2002-2009 the original author or authors., +	@SuppressWarnings("unchecked"), +	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass), +			return (T) number;, +			return (T) new Byte(number.byteValue());, +			return (T) new Short(number.shortValue());, +			return (T) new Integer(number.intValue());, +			return (T) new Long(number.longValue());, +				return (T) ((BigDecimal) number).toBigInteger();, +				return (T) BigInteger.valueOf(number.longValue());, +			return (T) new Float(number.floatValue());, +			return (T) new Double(number.doubleValue());, +			return (T) new BigDecimal(number.toString());, +	@SuppressWarnings("unchecked"), +	public static <T extends Number> T parseNumber(String text, Class<T> targetClass) {, +			return (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed));, +			return (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed));, +			return (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed));, +			return (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed));, +			return (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed));, +			return (T) Float.valueOf(trimmed);, +			return (T) Double.valueOf(trimmed);, +			return (T) new BigDecimal(trimmed);, +	public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/propertyeditors/CustomNumberEditor.java, + * Copyright 2002-2009 the original author or authors., +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +++ b/org.springframework.core/src/main/java/org/springframework/util/NumberUtils.java, + * Copyright 2002-2009 the original author or authors., +	@SuppressWarnings("unchecked"), +	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass), +			return (T) number;, +			return (T) new Byte(number.byteValue());, +			return (T) new Short(number.shortValue());, +			return (T) new Integer(number.intValue());, +			return (T) new Long(number.longValue());, +				return (T) ((BigDecimal) number).toBigInteger();, +				return (T) BigInteger.valueOf(number.longValue());, +			return (T) new Float(number.floatValue());, +			return (T) new Double(number.doubleValue());, +			return (T) new BigDecimal(number.toString());, +	@SuppressWarnings("unchecked"), +	public static <T extends Number> T parseNumber(String text, Class<T> targetClass) {, +			return (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed));, +			return (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed));, +			return (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed));, +			return (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed));, +			return (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed));, +			return (T) Float.valueOf(trimmed);, +			return (T) Double.valueOf(trimmed);, +			return (T) new BigDecimal(trimmed);, +	public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat) {, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/SingleColumnRowMapper.java, + * Copyright 2002-2009 the original author or authors., +	@SuppressWarnings("unchecked"), +++ b/org.springframework.beans/src/main/java/org/springframework/beans/propertyeditors/CustomNumberEditor.java, + * Copyright 2002-2009 the original author or authors., +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +++ b/org.springframework.core/src/main/java/org/springframework/util/NumberUtils.java, + * Copyright 2002-2009 the original author or authors., +	@SuppressWarnings("unchecked"), +	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass), +			return (T) number;, +			return (T) new Byte(number.byteValue());, +			return (T) new Short(number.shortValue());, +			return (T) new Integer(number.intValue());, +			return (T) new Long(number.longValue());, +				return (T) ((BigDecimal) number).toBigInteger();, +				return (T) BigInteger.valueOf(number.longValue());, +			return (T) new Float(number.floatValue());, +			return (T) new Double(number.doubleValue());, +			return (T) new BigDecimal(number.toString());, +	@SuppressWarnings("unchecked"), +	public static <T extends Number> T parseNumber(String text, Class<T> targetClass) {, +			return (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed));, +			return (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed));, +			return (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed));, +			return (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed));, +			return (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed));, +			return (T) Float.valueOf(trimmed);, +			return (T) Double.valueOf(trimmed);, +			return (T) new BigDecimal(trimmed);, +	public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat) {, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/SingleColumnRowMapper.java, + * Copyright 2002-2009 the original author or authors., +	@SuppressWarnings("unchecked"), +++ b/org.springframework.transaction/src/main/java/org/springframework/dao/support/DataAccessUtils.java, + * Copyright 2002-2009 the original author or authors., +					result = NumberUtils.convertNumberToTargetClass(((Number) result), (Class<? extends Number>) requiredType);]