[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.reactive.result.method.annotation;, +, +import java.lang.reflect.Method;, +import java.util.ArrayList;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.Objects;, +import java.util.Optional;, +import java.util.Set;, +import java.util.concurrent.ConcurrentHashMap;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.context.ApplicationContext;, +import org.springframework.core.annotation.AnnotationAwareOrderComparator;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.util.ReflectionUtils;, +import org.springframework.web.bind.annotation.InitBinder;, +import org.springframework.web.bind.annotation.ModelAttribute;, +import org.springframework.web.bind.annotation.RequestMapping;, +import org.springframework.web.method.ControllerAdviceBean;, +import org.springframework.web.method.HandlerMethod;, +import org.springframework.web.method.annotation.ExceptionHandlerMethodResolver;, +import org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver;, +import org.springframework.web.reactive.result.method.InvocableHandlerMethod;, +import org.springframework.web.reactive.result.method.SyncHandlerMethodArgumentResolver;, +import org.springframework.web.reactive.result.method.SyncInvocableHandlerMethod;, +, +import static org.springframework.core.MethodIntrospector.selectMethods;, +, +/**, + * Package-private class to assist {@link RequestMappingHandlerAdapter} with, + * resolving and caching {@code @InitBinder}, {@code @ModelAttribute}, and, + * {@code @ExceptionHandler} methods declared in the {@code @Controller} or in, + * {@code @ControllerAdvice} components., + *, + * @author Rossen Stoyanchev, + * @since 5.0, + */, +class ControllerMethodResolver {, +, +	private static Log logger = LogFactory.getLog(ControllerMethodResolver.class);, +, +, +	private final List<HandlerMethodArgumentResolver> argumentResolvers;, +, +	private final List<SyncHandlerMethodArgumentResolver> initBinderArgumentResolvers;, +, +, +	private final Map<Class<?>, Set<Method>> binderMethodCache = new ConcurrentHashMap<>(64);, +, +	private final Map<Class<?>, Set<Method>> attributeMethodCache = new ConcurrentHashMap<>(64);, +, +	private final Map<Class<?>, ExceptionHandlerMethodResolver> exceptionHandlerCache =, +			new ConcurrentHashMap<>(64);, +, +, +	private final Map<ControllerAdviceBean, Set<Method>> binderAdviceCache = new LinkedHashMap<>(64);, +, +	private final Map<ControllerAdviceBean, Set<Method>> attributeAdviceCache = new LinkedHashMap<>(64);, +, +	private final Map<ControllerAdviceBean, ExceptionHandlerMethodResolver> exceptionHandlerAdviceCache =, +			new LinkedHashMap<>(64);, +, +, +	ControllerMethodResolver(List<HandlerMethodArgumentResolver> argumentResolvers,, +			List<SyncHandlerMethodArgumentResolver> initBinderArgumentResolvers,, +			ApplicationContext applicationContext) {, +, +		this.argumentResolvers = argumentResolvers;, +		this.initBinderArgumentResolvers = initBinderArgumentResolvers;, +, +		initControllerAdviceCaches(applicationContext);, +	}, +, +	private void initControllerAdviceCaches(ApplicationContext applicationContext) {, +		if (applicationContext == null) {, +			return;, +		}, +		if (logger.isInfoEnabled()) {, +			logger.info("Looking for @ControllerAdvice: " + applicationContext);, +		}]