[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultHandlerStrategiesBuilder.java, +import org.springframework.core.codec.Decoder;, +import org.springframework.core.codec.Encoder;, +import org.springframework.http.codec.json.Jackson2JsonDecoder;, +import org.springframework.http.codec.json.Jackson2JsonEncoder;, +	private final ServerCodecConfigurer codecConfigurer = new ServerCodecConfigurer();, +, +	public DefaultHandlerStrategiesBuilder() {, +		this.codecConfigurer.registerDefaults(false);, +	public void defaultConfiguration() {, +		this.codecConfigurer.registerDefaults(true);, +	public HandlerStrategies.Builder serverSentEventEncoder(Encoder<?> encoder) {, +		Assert.notNull(encoder, "'encoder' must not be null");, +		this.codecConfigurer.defaultCodecs().serverSentEventEncoder(encoder);, +	public HandlerStrategies.Builder jackson2Decoder(Jackson2JsonDecoder decoder) {, +		Assert.notNull(decoder, "'decoder' must not be null");, +		this.codecConfigurer.defaultCodecs().jackson2Decoder(decoder);, +		return this;, +	}, +, +	@Override, +	public HandlerStrategies.Builder jackson2Encoder(Jackson2JsonEncoder encoder) {, +		Assert.notNull(encoder, "'encoder' must not be null");, +		this.codecConfigurer.defaultCodecs().jackson2Encoder(encoder);, +		return this;, +	}, +, +	@Override, +	public HandlerStrategies.Builder customDecoder(Decoder<?> decoder) {, +		Assert.notNull(decoder, "'decoder' must not be null");, +		this.codecConfigurer.customCodecs().decoder(decoder);, +		return this;, +	}, +, +	@Override, +	public HandlerStrategies.Builder customEncoder(Encoder<?> encoder) {, +		Assert.notNull(encoder, "'encoder' must not be null");, +		this.codecConfigurer.customCodecs().encoder(encoder);, +		return this;, +	}, +, +	@Override, +	public HandlerStrategies.Builder customMessageReader(HttpMessageReader<?> reader) {, +		Assert.notNull(reader, "'reader' must not be null");, +		this.codecConfigurer.customCodecs().reader(reader);, +		return this;, +	}, +, +	@Override, +	public HandlerStrategies.Builder customMessageWriter(HttpMessageWriter<?> writer) {, +		Assert.notNull(writer, "'writer' must not be null");, +		this.codecConfigurer.customCodecs().writer(writer);, +		return new DefaultHandlerStrategies(this.codecConfigurer.getReaders(),, +				this.codecConfigurer.getWriters(), this.viewResolvers, this.localeResolver);, +		public Supplier<Function<ServerRequest, Optional<Locale>>> localeResolver() {, +			return () -> this.localeResolver;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultHandlerStrategiesBuilder.java, +import org.springframework.core.codec.Decoder;, +import org.springframework.core.codec.Encoder;, +import org.springframework.http.codec.json.Jackson2JsonDecoder;, +import org.springframework.http.codec.json.Jackson2JsonEncoder;, +	private final ServerCodecConfigurer codecConfigurer = new ServerCodecConfigurer();, +, +	public DefaultHandlerStrategiesBuilder() {, +		this.codecConfigurer.registerDefaults(false);, +	public void defaultConfiguration() {, +		this.codecConfigurer.registerDefaults(true);, +	public HandlerStrategies.Builder serverSentEventEncoder(Encoder<?> encoder) {, +		Assert.notNull(encoder, "'encoder' must not be null");, +		this.codecConfigurer.defaultCodecs().serverSentEventEncoder(encoder);, +	public HandlerStrategies.Builder jackson2Decoder(Jackson2JsonDecoder decoder) {, +		Assert.notNull(decoder, "'decoder' must not be null");, +		this.codecConfigurer.defaultCodecs().jackson2Decoder(decoder);, +		return this;, +	}, +, +	@Override, +	public HandlerStrategies.Builder jackson2Encoder(Jackson2JsonEncoder encoder) {, +		Assert.notNull(encoder, "'encoder' must not be null");, +		this.codecConfigurer.defaultCodecs().jackson2Encoder(encoder);, +		return this;, +	}, +, +	@Override, +	public HandlerStrategies.Builder customDecoder(Decoder<?> decoder) {, +		Assert.notNull(decoder, "'decoder' must not be null");, +		this.codecConfigurer.customCodecs().decoder(decoder);, +		return this;, +	}, +, +	@Override, +	public HandlerStrategies.Builder customEncoder(Encoder<?> encoder) {, +		Assert.notNull(encoder, "'encoder' must not be null");, +		this.codecConfigurer.customCodecs().encoder(encoder);, +		return this;, +	}, +, +	@Override, +	public HandlerStrategies.Builder customMessageReader(HttpMessageReader<?> reader) {, +		Assert.notNull(reader, "'reader' must not be null");]