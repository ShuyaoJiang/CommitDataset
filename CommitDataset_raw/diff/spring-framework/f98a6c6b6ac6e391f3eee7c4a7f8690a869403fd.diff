[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +			// Can only happen when getting a FactoryBean., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +			// Can only happen when getting a FactoryBean., +++ b/spring-beans/src/test/java/org/springframework/beans/factory/FactoryBeanTests.java, +public final class FactoryBeanTests {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +			// Can only happen when getting a FactoryBean., +++ b/spring-beans/src/test/java/org/springframework/beans/factory/FactoryBeanTests.java, +public final class FactoryBeanTests {, +++ b/spring-beans/src/test/resources/org/springframework/beans/factory/FactoryBeanTests-withAutowiring.xml, +  <bean id="betaFactory" class="org.springframework.beans.factory.FactoryBeanTests$BetaFactoryBean">, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +			// Can only happen when getting a FactoryBean., +++ b/spring-beans/src/test/java/org/springframework/beans/factory/FactoryBeanTests.java, +public final class FactoryBeanTests {, +++ b/spring-beans/src/test/resources/org/springframework/beans/factory/FactoryBeanTests-withAutowiring.xml, +  <bean id="betaFactory" class="org.springframework.beans.factory.FactoryBeanTests$BetaFactoryBean">, +++ b/spring-context/src/main/java/org/springframework/context/ApplicationEventPublisher.java, + * Serves as super-interface for ApplicationContext., +	 * <p>If the specified {@code event} is not an {@link ApplicationEvent}, it, +	 * is wrapped in a {@code GenericApplicationEvent}., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +			// Can only happen when getting a FactoryBean., +++ b/spring-beans/src/test/java/org/springframework/beans/factory/FactoryBeanTests.java, +public final class FactoryBeanTests {, +++ b/spring-beans/src/test/resources/org/springframework/beans/factory/FactoryBeanTests-withAutowiring.xml, +  <bean id="betaFactory" class="org.springframework.beans.factory.FactoryBeanTests$BetaFactoryBean">, +++ b/spring-context/src/main/java/org/springframework/context/ApplicationEventPublisher.java, + * Serves as super-interface for ApplicationContext., +	 * <p>If the specified {@code event} is not an {@link ApplicationEvent}, it, +	 * is wrapped in a {@code GenericApplicationEvent}., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +					if (beanInstance != null && !beanMethod.getReturnType().isInstance(beanInstance)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +			// Can only happen when getting a FactoryBean., +++ b/spring-beans/src/test/java/org/springframework/beans/factory/FactoryBeanTests.java, +public final class FactoryBeanTests {, +++ b/spring-beans/src/test/resources/org/springframework/beans/factory/FactoryBeanTests-withAutowiring.xml, +  <bean id="betaFactory" class="org.springframework.beans.factory.FactoryBeanTests$BetaFactoryBean">, +++ b/spring-context/src/main/java/org/springframework/context/ApplicationEventPublisher.java, + * Serves as super-interface for ApplicationContext., +	 * <p>If the specified {@code event} is not an {@link ApplicationEvent}, it, +	 * is wrapped in a {@code GenericApplicationEvent}., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +					if (beanInstance != null && !beanMethod.getReturnType().isInstance(beanInstance)) {, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +	private Set<ApplicationListener<?>> applicationListeners = new LinkedHashSet<ApplicationListener<?>>();, +	/** Environment used by this context; initialized by {@link #createEnvironment()} */, +	private ConfigurableEnvironment environment;, +		final ApplicationEvent applicationEvent;, +	LifecycleProcessor getLifecycleProcessor() {, +		for (String lisName : listenerBeanNames) {, +			getApplicationEventMulticaster().addApplicationListenerBean(lisName);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +			// Can only happen when getting a FactoryBean., +++ b/spring-beans/src/test/java/org/springframework/beans/factory/FactoryBeanTests.java, +public final class FactoryBeanTests {, +++ b/spring-beans/src/test/resources/org/springframework/beans/factory/FactoryBeanTests-withAutowiring.xml, +  <bean id="betaFactory" class="org.springframework.beans.factory.FactoryBeanTests$BetaFactoryBean">, +++ b/spring-context/src/main/java/org/springframework/context/ApplicationEventPublisher.java, + * Serves as super-interface for ApplicationContext., +	 * <p>If the specified {@code event} is not an {@link ApplicationEvent}, it, +	 * is wrapped in a {@code GenericApplicationEvent}., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +					if (beanInstance != null && !beanMethod.getReturnType().isInstance(beanInstance)) {, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +	private Set<ApplicationListener<?>> applicationListeners = new LinkedHashSet<ApplicationListener<?>>();, +	/** Environment used by this context; initialized by {@link #createEnvironment()} */, +	private ConfigurableEnvironment environment;, +		final ApplicationEvent applicationEvent;, +	LifecycleProcessor getLifecycleProcessor() {, +		for (String lisName : listenerBeanNames) {, +			getApplicationEventMulticaster().addApplicationListenerBean(lisName);, +++ b/spring-context/src/test/java/org/springframework/context/event/ApplicationContextEventTests.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +			// Can only happen when getting a FactoryBean., +++ b/spring-beans/src/test/java/org/springframework/beans/factory/FactoryBeanTests.java, +public final class FactoryBeanTests {, +++ b/spring-beans/src/test/resources/org/springframework/beans/factory/FactoryBeanTests-withAutowiring.xml, +  <bean id="betaFactory" class="org.springframework.beans.factory.FactoryBeanTests$BetaFactoryBean">, +++ b/spring-context/src/main/java/org/springframework/context/ApplicationEventPublisher.java, + * Serves as super-interface for ApplicationContext., +	 * <p>If the specified {@code event} is not an {@link ApplicationEvent}, it, +	 * is wrapped in a {@code GenericApplicationEvent}., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +					if (beanInstance != null && !beanMethod.getReturnType().isInstance(beanInstance)) {, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +	private Set<ApplicationListener<?>> applicationListeners = new LinkedHashSet<ApplicationListener<?>>();, +	/** Environment used by this context; initialized by {@link #createEnvironment()} */, +	private ConfigurableEnvironment environment;, +		final ApplicationEvent applicationEvent;, +	LifecycleProcessor getLifecycleProcessor() {, +		for (String lisName : listenerBeanNames) {, +			getApplicationEventMulticaster().addApplicationListenerBean(lisName);, +++ b/spring-context/src/test/java/org/springframework/context/event/ApplicationContextEventTests.java, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, + * Copyright 2002-2015 the original author or authors., +		endpoint.setBeanFactory(this.beanFactory);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java]