[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, +	 * Sort the given constructors, preferring public constructors and "greedy" ones with, +	 * a maximum number of arguments. The result will contain public constructors first,, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, +	 * Sort the given constructors, preferring public constructors and "greedy" ones with, +	 * a maximum number of arguments. The result will contain public constructors first,, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +					continue;, +				throw new BeanCreationException(mbd.getResourceDescription(), beanName,, +						"Could not resolve matching constructor " +, +						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)");, +					ConstructorArgumentValues.ValueHolder sourceHolder =, +							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource();, +					Object sourceValue = sourceHolder.getValue();, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, +	 * Sort the given constructors, preferring public constructors and "greedy" ones with, +	 * a maximum number of arguments. The result will contain public constructors first,, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +					continue;, +				throw new BeanCreationException(mbd.getResourceDescription(), beanName,, +						"Could not resolve matching constructor " +, +						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)");, +					ConstructorArgumentValues.ValueHolder sourceHolder =, +							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource();, +					Object sourceValue = sourceHolder.getValue();, +++ b/org.springframework.context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTestTypes.java, +	protected SingleSimpleTypeConstructorBean(String testString, boolean secondBoolean) {]