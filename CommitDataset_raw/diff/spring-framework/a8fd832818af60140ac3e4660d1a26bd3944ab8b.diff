[+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java, + * Copyright 2002-2013 the original author or authors., +, +		return (isStereotype && attributes != null &&, +				attributes.containsKey("value") &&, +				attributes.get("value") instanceof String);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java, + * Copyright 2002-2013 the original author or authors., +, +		return (isStereotype && attributes != null &&, +				attributes.containsKey("value") &&, +				attributes.get("value") instanceof String);, +++ b/spring-context/src/test/java/org/springframework/context/annotation/AnnotationBeanNameGeneratorTests.java, + * Copyright 2002-2013 the original author or authors., +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +import org.junit.Test;, +import org.springframework.stereotype.Service;, +import example.scannable.DefaultNamedComponent;, +	@Test, +	public void testGenerateBeanNameFromMetaComponentWithStringValue() {, +		BeanDefinitionRegistry registry = new SimpleBeanDefinitionRegistry();, +		AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(ComponentFromStringMeta.class);, +		String beanName = this.beanNameGenerator.generateBeanName(bd, registry);, +		assertEquals("henry", beanName);, +	}, +, +	@Test, +	public void testGenerateBeanNameFromMetaComponentWithNonStringValue() {, +		BeanDefinitionRegistry registry = new SimpleBeanDefinitionRegistry();, +		AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(ComponentFromNonStringMeta.class);, +		String beanName = this.beanNameGenerator.generateBeanName(bd, registry);, +		assertEquals("annotationBeanNameGeneratorTests.ComponentFromNonStringMeta", beanName);, +	}, +, +	@Service("henry"), +	private static class ComponentFromStringMeta {, +	}, +, +	@Retention(RetentionPolicy.RUNTIME), +	@Target(ElementType.TYPE), +	@Component, +	public @interface NonStringMetaComponent {, +		long value();, +	}, +, +	@NonStringMetaComponent(123), +	private static class ComponentFromNonStringMeta {, +	}, +]