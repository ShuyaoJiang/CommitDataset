[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import org.springframework.core.convert.Property;, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import org.springframework.core.convert.Property;, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/BeanPropertyDescriptor.java, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import org.springframework.core.convert.Property;, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/BeanPropertyDescriptor.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/Property.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.core.convert;, +, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Field;, +import java.lang.reflect.Method;, +import java.util.LinkedHashMap;, +import java.util.Map;, +, +import org.springframework.core.GenericTypeResolver;, +import org.springframework.core.MethodParameter;, +import org.springframework.util.ReflectionUtils;, +import org.springframework.util.StringUtils;, +, +/**, + * A description of a JavaBeans Property that allows us to avoid a dependency on java.beans.PropertyDescriptor., + * java.beans is not available in a number of environments (e.g. Android, Java ME), so this is desirable., + * Used to build a TypeDescriptor from a property location., + * The built TypeDescriptor can then be used to convert from/to the property type., + * @author Keith Donald, + * @see TypeDescriptor#TypeDescriptor(Property), + * @see TypeDescriptor#nested(Property, int), + */, +public final class Property {, +, +	private final Class<?> objectType;, +, +	private final Method readMethod;, +, +	private final Method writeMethod;, +, +	private final String name;, +	, +	private final MethodParameter methodParameter;, +, +	private final Annotation[] annotations;, +, +	public Property(Class<?> objectType, Method readMethod, Method writeMethod) {, +		this.objectType = objectType;, +		this.readMethod = readMethod;, +		this.writeMethod = writeMethod;, +		this.methodParameter = resolveMethodParameter();, +		this.name = resolveName();, +		this.annotations = resolveAnnotations();, +	}, +, +	/**, +	 * The object declaring this property, either directly or in a superclass the object extends., +	 */, +	public Class<?> getObjectType() {, +		return objectType;, +	}, +, +	/**, +	 * The name of the property e.g. 'foo'., +	 */, +	public String getName() {, +		return name;, +	}, +, +	/**, +	 * The property type e.g. java.lang.String., +	 */, +	public Class<?> getType() {, +		return methodParameter.getParameterType();, +	}, +, +	/**, +	 * The property getter method e.g. getFoo(), +	 */, +	public Method getReadMethod() {, +		return readMethod;, +	}, +, +	/**, +	 * The property setter method e.g. setFoo(String)., +	 */]