[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java, +		if (queryParams.isEmpty()) {, +			return Optional.empty();, +		}, +		else {, +			String value = queryParams.get(0);, +			if (value == null) {, +				value = "";, +			}, +			return Optional.of(value);, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java, +		if (queryParams.isEmpty()) {, +			return Optional.empty();, +		}, +		else {, +			String value = queryParams.get(0);, +			if (value == null) {, +				value = "";, +			}, +			return Optional.of(value);, +		}, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/DefaultServerRequestTests.java, +import org.springframework.mock.http.server.reactive.test.MockServerHttpRequest;, +import org.springframework.mock.http.server.reactive.test.MockServerWebExchange;, +		MockServerHttpRequest mockRequest = MockServerHttpRequest.method(method, "http://example.com").build();, +		DefaultServerRequest request = new DefaultServerRequest(mockRequest.toExchange(), messageReaders);, +		assertEquals(method, request.method());, +		MockServerHttpRequest mockRequest = MockServerHttpRequest.method(HttpMethod.GET, uri).build();, +		DefaultServerRequest request = new DefaultServerRequest(mockRequest.toExchange(), messageReaders);, +, +		assertEquals(uri, request.uri());, +		MockServerHttpRequest mockRequest = MockServerHttpRequest.method(HttpMethod.GET, "http://example.com").build();, +		MockServerWebExchange exchange = new MockServerWebExchange(mockRequest);, +		exchange.getAttributes().put("foo", "bar");, +		DefaultServerRequest request = new DefaultServerRequest(exchange, messageReaders);, +, +		assertEquals(Optional.of("bar"), request.attribute("foo"));, +		MockServerHttpRequest mockRequest = MockServerHttpRequest.method(HttpMethod.GET, "http://example.com?foo=bar").build();, +		DefaultServerRequest request = new DefaultServerRequest(mockRequest.toExchange(), messageReaders);, +		assertEquals(Optional.of("bar"), request.queryParam("foo"));, +	}, +, +	@Test, +	public void emptyQueryParam() throws Exception {, +		MockServerHttpRequest mockRequest = MockServerHttpRequest.method(HttpMethod.GET, "http://example.com?foo").build();, +		DefaultServerRequest request = new DefaultServerRequest(mockRequest.toExchange(), messageReaders);, +, +		assertEquals(Optional.of(""), request.queryParam("foo"));, +		MockServerHttpRequest mockRequest = MockServerHttpRequest.method(HttpMethod.GET, "http://example.com").build();, +		MockServerWebExchange exchange = new MockServerWebExchange(mockRequest);, +		exchange.getAttributes().put(RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE, pathVariables);, +		DefaultServerRequest request = new DefaultServerRequest(exchange, messageReaders);, +, +		assertEquals("bar", request.pathVariable("foo"));, +, +		MockServerHttpRequest mockRequest = MockServerHttpRequest.method(HttpMethod.GET, "http://example.com").build();, +		MockServerWebExchange exchange = new MockServerWebExchange(mockRequest);, +		exchange.getAttributes().put(RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE, pathVariables);, +		DefaultServerRequest request = new DefaultServerRequest(exchange, messageReaders);, +, +		request.pathVariable("baz");, +		MockServerHttpRequest mockRequest = MockServerHttpRequest.method(HttpMethod.GET, "http://example.com").build();, +		MockServerWebExchange exchange = new MockServerWebExchange(mockRequest);, +		exchange.getAttributes().put(RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE, pathVariables);, +		DefaultServerRequest request = new DefaultServerRequest(exchange, messageReaders);, +		assertEquals(pathVariables, request.pathVariables());, +		MockServerHttpRequest mockRequest = MockServerHttpRequest.method(HttpMethod.GET, "http://example.com?foo=bar")., +				headers(httpHeaders).build();, +		DefaultServerRequest request = new DefaultServerRequest(mockRequest.toExchange(), messageReaders);, +		ServerRequest.Headers headers = request.headers();, +		MockServerHttpRequest mockRequest = MockServerHttpRequest.method(HttpMethod.GET, "http://example.com?foo=bar")., +				headers(httpHeaders).body(body);, +		DefaultServerRequest request = new DefaultServerRequest(mockRequest.toExchange(), messageReaders);, +, +		Mono<String> resultMono = request.body(toMono(String.class));, +		MockServerHttpRequest mockRequest = MockServerHttpRequest.method(HttpMethod.GET, "http://example.com?foo=bar")., +				headers(httpHeaders).body(body);, +		DefaultServerRequest request = new DefaultServerRequest(mockRequest.toExchange(), messageReaders);, +		Mono<String> resultMono = request.bodyToMono(String.class);, +		MockServerHttpRequest mockRequest = MockServerHttpRequest.method(HttpMethod.GET, "http://example.com?foo=bar")., +				headers(httpHeaders).body(body);, +		DefaultServerRequest request = new DefaultServerRequest(mockRequest.toExchange(), messageReaders);, +		Flux<String> resultFlux = request.bodyToFlux(String.class);, +		assertEquals(Collections.singletonList("foo"), resultFlux.collectList().block());, +		MockServerHttpRequest mockRequest = MockServerHttpRequest.method(HttpMethod.GET, "http://example.com?foo=bar")., +				headers(httpHeaders).body(body);, +		DefaultServerRequest request = new DefaultServerRequest(mockRequest.toExchange(), messageReaders);, +		Flux<String> resultFlux = request.bodyToFlux(String.class);]