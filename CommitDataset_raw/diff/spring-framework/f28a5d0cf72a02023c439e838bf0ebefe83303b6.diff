[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java, +		if (type == Object.class) {, +			return (T) interceptor;, +		}, +, +		else if (type.isInterface()) {, +	public interface MethodInvocationInfo {, +, +		Class<?> getControllerType();, +, +		Method getControllerMethod();, +, +		Object[] getArgumentValues();, +	}, +, +, +			implements org.springframework.cglib.proxy.MethodInterceptor, MethodInterceptor, MethodInvocationInfo {, +			if (method.getName().equals("getControllerType")) {, +				return this.controllerType;, +			}, +			else if (method.getName().equals("getControllerMethod")) {, +				try {, +					return (returnType == void.class ? null : returnType.cast(initProxy(returnType, this)));, +				}, +				catch (Throwable ex) {, +					throw new IllegalStateException(, +							"Failed to create proxy for controller method return type: " + method, ex);, +				}, +, +		@Override, +		public Class<?> getControllerType() {, +			return this.controllerType;, +		@Override, +		public Method getControllerMethod() {, +			Assert.state(this.controllerMethod != null, "Not initialized yet");, +			return this.controllerMethod;, +		}, +		@Override, +		public Object[] getArgumentValues() {, +			Assert.state(this.argumentValues != null, "Not initialized yet");, +			return this.argumentValues;, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java, +		if (type == Object.class) {, +			return (T) interceptor;, +		}, +, +		else if (type.isInterface()) {, +	public interface MethodInvocationInfo {, +, +		Class<?> getControllerType();, +, +		Method getControllerMethod();, +, +		Object[] getArgumentValues();, +	}, +, +, +			implements org.springframework.cglib.proxy.MethodInterceptor, MethodInterceptor, MethodInvocationInfo {, +			if (method.getName().equals("getControllerType")) {, +				return this.controllerType;, +			}, +			else if (method.getName().equals("getControllerMethod")) {, +				try {, +					return (returnType == void.class ? null : returnType.cast(initProxy(returnType, this)));, +				}, +				catch (Throwable ex) {, +					throw new IllegalStateException(, +							"Failed to create proxy for controller method return type: " + method, ex);, +				}, +, +		@Override, +		public Class<?> getControllerType() {, +			return this.controllerType;, +		@Override, +		public Method getControllerMethod() {, +			Assert.state(this.controllerMethod != null, "Not initialized yet");, +			return this.controllerMethod;, +		}, +		@Override, +		public Object[] getArgumentValues() {, +			Assert.state(this.argumentValues != null, "Not initialized yet");, +			return this.argumentValues;, +		}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilderTests.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.web.bind.annotation.GetMapping;, +import static org.hamcrest.Matchers.*;, +import static org.junit.Assert.*;, +import static org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.*;, +	public void testFromMethodNamePathVariable() {, +		UriComponents uriComponents = fromMethodName(ControllerWithMethods.class,, +				"methodWithPathVariable", "1").build();, +	public void testFromMethodNameTypeLevelPathVariable() {, +	public void testFromMethodNameTwoPathVariables() {, +	public void testFromMethodNameWithPathVarAndRequestParam() {, +	@Test  // SPR-12977, +	public void fromMethodNameWithBridgedMethod() {, +, +	@Test  // SPR-11391]