[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +import org.springframework.beans.factory.parsing.SourceExtractor;, +	private final SourceExtractor sourceExtractor;, +, +	/**, +	 * Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used, +	 * to populate the given {@link BeanDefinitionRegistry}., +	 */, +	public ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor) {, +		this.sourceExtractor = sourceExtractor;, +		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +import org.springframework.beans.factory.parsing.SourceExtractor;, +	private final SourceExtractor sourceExtractor;, +, +	/**, +	 * Create a new {@link ConfigurationClassBeanDefinitionReader} instance that will be used, +	 * to populate the given {@link BeanDefinitionRegistry}., +	 */, +	public ConfigurationClassBeanDefinitionReader(BeanDefinitionRegistry registry, SourceExtractor sourceExtractor) {, +		this.sourceExtractor = sourceExtractor;, +		beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +import org.springframework.beans.factory.parsing.PassThroughSourceExtractor;, +import org.springframework.beans.factory.parsing.SourceExtractor;, +import org.springframework.util.Assert;, +	private SourceExtractor sourceExtractor = new PassThroughSourceExtractor();, +, +	 * Set the {@link SourceExtractor} to use for generated bean definitions, +	 * that correspond to {@link Bean} factory methods., +	 */, +	public void setSourceExtractor(SourceExtractor sourceExtractor) {, +		this.sourceExtractor = (sourceExtractor != null ? sourceExtractor : new PassThroughSourceExtractor());, +	}, +, +	/**, +	 * declarations. For instance, an @Bean method marked as {@literal final} is illegal, +		this.problemReporter = (problemReporter != null ? problemReporter : new FailFastProblemReporter());, +		Assert.notNull(metadataReaderFactory, "MetadataReaderFactory must not be null");, +		new ConfigurationClassBeanDefinitionReader(registry, this.sourceExtractor).loadBeanDefinitions(parser.getModel());]