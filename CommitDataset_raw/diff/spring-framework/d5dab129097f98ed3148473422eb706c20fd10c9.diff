[+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBufferFactory.java, + * @author Juergen Hoeller, +		Assert.notNull(byteBufAllocator, "ByteBufAllocator must not be null");, +		Assert.notEmpty(dataBuffers, "DataBuffer List must not be empty");, +		int bufferCount = dataBuffers.size();, +		if (bufferCount == 1) {, +			return dataBuffers.get(0);, +		}, +		CompositeByteBuf composite = this.byteBufAllocator.compositeBuffer(bufferCount);, +	 * Return the given Netty {@link DataBuffer} as a {@link ByteBuf}., +	 * <p>Returns the {@linkplain NettyDataBuffer#getNativeBuffer() native buffer}, +	 * if {@code buffer} is a {@link NettyDataBuffer}; returns, +	 * {@link Unpooled#wrappedBuffer(ByteBuffer)} otherwise., +	 * @param buffer the {@code DataBuffer} to return a {@code ByteBuf} for, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBufferFactory.java, + * @author Juergen Hoeller, +		Assert.notNull(byteBufAllocator, "ByteBufAllocator must not be null");, +		Assert.notEmpty(dataBuffers, "DataBuffer List must not be empty");, +		int bufferCount = dataBuffers.size();, +		if (bufferCount == 1) {, +			return dataBuffers.get(0);, +		}, +		CompositeByteBuf composite = this.byteBufAllocator.compositeBuffer(bufferCount);, +	 * Return the given Netty {@link DataBuffer} as a {@link ByteBuf}., +	 * <p>Returns the {@linkplain NettyDataBuffer#getNativeBuffer() native buffer}, +	 * if {@code buffer} is a {@link NettyDataBuffer}; returns, +	 * {@link Unpooled#wrappedBuffer(ByteBuffer)} otherwise., +	 * @param buffer the {@code DataBuffer} to return a {@code ByteBuf} for, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/bind/HttpServerTests.java, +import static org.springframework.web.reactive.function.server.RequestPredicates.*;, +import static org.springframework.web.reactive.function.server.RouterFunctions.*;, +	public void start() throws Exception {, +				route(GET("/test"), request -> ServerResponse.ok().syncBody("It works!")));, +	public void stop() {]