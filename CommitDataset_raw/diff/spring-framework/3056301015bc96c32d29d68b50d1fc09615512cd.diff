[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/HttpSessionHandshakeInterceptor.java, +import java.util.Collections;, + * An interceptor to copy information from the HTTP session to the "handshake, + * attributes" map to made available via{@link WebSocketSession#getAttributes()}., + *, + * <p>Copies a subset or all HTTP session attributes and/or the HTTP session id, + * under the key {@link #HTTP_SESSION_ID_ATTR_NAME}., +, +	private boolean copyAllAttributes;, +, +	private boolean copyHttpSessionId = true;, +	 * Default constructor for copying all HTTP session attributes and the HTTP, +	 * session id., +	 * @see #setCopyAllAttributes, +	 * @see #setCopyHttpSessionId, +		this.attributeNames = Collections.emptyList();, +		this.copyAllAttributes = true;, +	 * Constructor for copying specific HTTP session attributes and the HTTP, +	 * session id., +	 * @param attributeNames session attributes to copy, +	 * @see #setCopyAllAttributes, +	 * @see #setCopyHttpSessionId, +		this.attributeNames = Collections.unmodifiableCollection(attributeNames);, +		this.copyAllAttributes = false;, +	}, +, +, +	/**, +	 * Return the configured attribute names to copy (read-only)., +	 */, +	public Collection<String> getAttributeNames() {, +		return this.attributeNames;, +	 * Whether to copy all attributes from the HTTP session. If set to "true" any, +	 * explicitly configured attribute names are ignored., +	 * <p>By default this is set to either "true" or "false" depending on which, +	 * constructor was used (default or with attribute names respectively)., +	 * @param copyAllAttributes whether to copy all attributes, +	 */, +	public void setCopyAllAttributes(boolean copyAllAttributes) {, +		this.copyAllAttributes = copyAllAttributes;, +	}, +, +	/**, +	 * Whether to copy all HTTP session attributes., +	 */, +	public boolean isCopyAllAttributes() {, +		return this.copyAllAttributes;, +	}, +, +	/**, +	 * Whether the HTTP session id should be copied to the handshake attributes, +	 * <p>By default this is "true"., +		HttpSession session = getSession(request);, +			if (isCopyHttpSessionId()) {, +				attributes.put(HTTP_SESSION_ID_ATTR_NAME, session.getId());, +			}, +				if (isCopyAllAttributes() || getAttributeNames().contains(name)) {, +	private HttpSession getSession(ServerHttpRequest request) {, +		if (request instanceof ServletServerHttpRequest) {, +			ServletServerHttpRequest servletRequest = (ServletServerHttpRequest) request;, +			return servletRequest.getServletRequest().getSession(false);, +		}, +		return null;, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/HttpSessionHandshakeInterceptor.java, +import java.util.Collections;, + * An interceptor to copy information from the HTTP session to the "handshake, + * attributes" map to made available via{@link WebSocketSession#getAttributes()}., + *, + * <p>Copies a subset or all HTTP session attributes and/or the HTTP session id, + * under the key {@link #HTTP_SESSION_ID_ATTR_NAME}., +, +	private boolean copyAllAttributes;, +, +	private boolean copyHttpSessionId = true;, +	 * Default constructor for copying all HTTP session attributes and the HTTP, +	 * session id., +	 * @see #setCopyAllAttributes, +	 * @see #setCopyHttpSessionId, +		this.attributeNames = Collections.emptyList();, +		this.copyAllAttributes = true;, +	 * Constructor for copying specific HTTP session attributes and the HTTP, +	 * session id., +	 * @param attributeNames session attributes to copy, +	 * @see #setCopyAllAttributes, +	 * @see #setCopyHttpSessionId, +		this.attributeNames = Collections.unmodifiableCollection(attributeNames);, +		this.copyAllAttributes = false;, +	}, +, +, +	/**, +	 * Return the configured attribute names to copy (read-only)., +	 */, +	public Collection<String> getAttributeNames() {, +		return this.attributeNames;, +	 * Whether to copy all attributes from the HTTP session. If set to "true" any, +	 * explicitly configured attribute names are ignored., +	 * <p>By default this is set to either "true" or "false" depending on which]