[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/AbstractMessageCondition.java, + * Base class for {@code MessageCondition's} that pre-declares abstract methods, + * {@link #getContent()} and {@link #getToStringInfix()} in order to provide, + * implementations of {@link #equals(Object)}, {@link #hashCode()}, and, + * {@link #toString()}., +public abstract class AbstractMessageCondition<T extends AbstractMessageCondition<T>>, +		implements MessageCondition<T> {, +, +, +	/**, +	 * Return the collection of objects the message condition is composed of, +	 * (e.g. destination patterns), never {@code null}., +	 */, +	protected abstract Collection<?> getContent();, +, +	/**, +	 * The notation to use when printing discrete items of content., +	 * For example " || " for URL patterns or " && " for param expressions., +	 */, +	protected abstract String getToStringInfix();, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/AbstractMessageCondition.java, + * Base class for {@code MessageCondition's} that pre-declares abstract methods, + * {@link #getContent()} and {@link #getToStringInfix()} in order to provide, + * implementations of {@link #equals(Object)}, {@link #hashCode()}, and, + * {@link #toString()}., +public abstract class AbstractMessageCondition<T extends AbstractMessageCondition<T>>, +		implements MessageCondition<T> {, +, +, +	/**, +	 * Return the collection of objects the message condition is composed of, +	 * (e.g. destination patterns), never {@code null}., +	 */, +	protected abstract Collection<?> getContent();, +, +	/**, +	 * The notation to use when printing discrete items of content., +	 * For example " || " for URL patterns or " && " for param expressions., +	 */, +	protected abstract String getToStringInfix();, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageTypeMessageCondition.java, +import java.util.Collections;, +import java.util.Map;, + * {@code MessageCondition} that matches by the message type obtained via, + * {@link SimpMessageHeaderAccessor#getMessageType(Map)}., +		return Collections.singletonList(this.messageType);, +		Object actual = SimpMessageHeaderAccessor.getMessageType(message.getHeaders());, +		if (actual != null) {, +			if (actual.equals(this.messageType) && actual.equals(other.getMessageType())) {, +			else if (actual.equals(this.messageType)) {, +			else if (actual.equals(other.getMessageType())) {]