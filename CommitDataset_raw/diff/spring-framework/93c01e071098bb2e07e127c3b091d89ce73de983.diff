[+++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/DateTimeFormatterFactory.java, + * @author Sam Brannen, +			dateTimeFormatter = dateTimeFormatter.withZone(DateTimeZone.forTimeZone(this.timeZone));, +++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/DateTimeFormatterFactory.java, + * @author Sam Brannen, +			dateTimeFormatter = dateTimeFormatter.withZone(DateTimeZone.forTimeZone(this.timeZone));, +++ b/spring-context/src/test/java/org/springframework/format/datetime/joda/DateTimeFormatterFactoryTests.java, +import static org.hamcrest.Matchers.*;, +import org.joda.time.DateTimeZone;, + * @author Sam Brannen, +, +, +		TimeZone zurich = TimeZone.getTimeZone("Europe/Zurich");, +		TimeZone newYork = TimeZone.getTimeZone("America/New_York");, +, +		// Ensure that we are testing against a timezone other than the default., +		TimeZone testTimeZone;, +		String offset;, +, +		if (zurich.equals(TimeZone.getDefault())) {, +			testTimeZone = newYork;, +			offset = "-0400"; // Daylight savings on October 21st, +		}, +		else {, +			testTimeZone = zurich;, +			offset = "+0200"; // Daylight savings on October 21st, +		}, +, +		factory.setTimeZone(testTimeZone);, +, +		DateTimeZone dateTimeZone = DateTimeZone.forTimeZone(testTimeZone);, +		DateTime dateTime = new DateTime(2009, 10, 21, 12, 10, 00, 00, dateTimeZone);, +, +		assertThat(factory.getDateTimeFormatter().print(dateTime), is("20091021121000 " + offset));, +]