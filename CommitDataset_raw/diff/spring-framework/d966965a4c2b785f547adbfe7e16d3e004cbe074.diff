[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/NumberToNumber.java, +	public <RT extends Number> RT convert(Number source, Class<RT> targetClass) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/NumberToNumber.java, +	public <RT extends Number> RT convert(Number source, Class<RT> targetClass) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToBigDecimal.java, +	public BigDecimal convert(String source) {, +	public String convertBack(BigDecimal target) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/NumberToNumber.java, +	public <RT extends Number> RT convert(Number source, Class<RT> targetClass) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToBigDecimal.java, +	public BigDecimal convert(String source) {, +	public String convertBack(BigDecimal target) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToBigInteger.java, +	public BigInteger convert(String source) {, +	public String convertBack(BigInteger target) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/NumberToNumber.java, +	public <RT extends Number> RT convert(Number source, Class<RT> targetClass) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToBigDecimal.java, +	public BigDecimal convert(String source) {, +	public String convertBack(BigDecimal target) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToBigInteger.java, +	public BigInteger convert(String source) {, +	public String convertBack(BigInteger target) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToBoolean.java, +import org.springframework.util.Assert;, +, +		this("true", "false");, +	 * @param trueString special true string to use (required), +	 * @param falseString special false string to use (required), +		Assert.hasText(trueString, "The true string is required");, +		Assert.hasText(falseString, "The false string is required");		, +	public Boolean convert(String source) {, +		if (source.equals(trueString)) {, +		} else if (source.equals(falseString)) {, +			throw new IllegalArgumentException("Invalid boolean string '" + source + "'; expected '" + trueString + "' or '" + falseString + "'");, +	public String convertBack(Boolean target) {, +			throw new IllegalArgumentException("Invalid boolean value " + target);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/NumberToNumber.java, +	public <RT extends Number> RT convert(Number source, Class<RT> targetClass) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToBigDecimal.java, +	public BigDecimal convert(String source) {, +	public String convertBack(BigDecimal target) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToBigInteger.java, +	public BigInteger convert(String source) {, +	public String convertBack(BigInteger target) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToBoolean.java, +import org.springframework.util.Assert;, +, +		this("true", "false");, +	 * @param trueString special true string to use (required), +	 * @param falseString special false string to use (required), +		Assert.hasText(trueString, "The true string is required");, +		Assert.hasText(falseString, "The false string is required");		, +	public Boolean convert(String source) {, +		if (source.equals(trueString)) {, +		} else if (source.equals(falseString)) {, +			throw new IllegalArgumentException("Invalid boolean string '" + source + "'; expected '" + trueString + "' or '" + falseString + "'");, +	public String convertBack(Boolean target) {, +			throw new IllegalArgumentException("Invalid boolean value " + target);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToByte.java, +	public Byte convert(String source) {, +		return Byte.valueOf(source);, +	public String convertBack(Byte target) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/NumberToNumber.java, +	public <RT extends Number> RT convert(Number source, Class<RT> targetClass) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToBigDecimal.java, +	public BigDecimal convert(String source) {, +	public String convertBack(BigDecimal target) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToBigInteger.java, +	public BigInteger convert(String source) {, +	public String convertBack(BigInteger target) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToBoolean.java, +import org.springframework.util.Assert;, +, +		this("true", "false");, +	 * @param trueString special true string to use (required), +	 * @param falseString special false string to use (required), +		Assert.hasText(trueString, "The true string is required");, +		Assert.hasText(falseString, "The false string is required");		, +	public Boolean convert(String source) {, +		if (source.equals(trueString)) {, +		} else if (source.equals(falseString)) {, +			throw new IllegalArgumentException("Invalid boolean string '" + source + "'; expected '" + trueString + "' or '" + falseString + "'");, +	public String convertBack(Boolean target) {, +			throw new IllegalArgumentException("Invalid boolean value " + target);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToByte.java, +	public Byte convert(String source) {, +		return Byte.valueOf(source);, +	public String convertBack(Byte target) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToCharacter.java, +	public Character convert(String source) {, +		return Character.valueOf(source.charAt(0));, +	public String convertBack(Character target) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/NumberToNumber.java, +	public <RT extends Number> RT convert(Number source, Class<RT> targetClass) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToBigDecimal.java, +	public BigDecimal convert(String source) {, +	public String convertBack(BigDecimal target) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/StringToBigInteger.java, +	public BigInteger convert(String source) {]