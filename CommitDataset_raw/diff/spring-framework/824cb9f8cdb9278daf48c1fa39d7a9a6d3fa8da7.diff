[+++ b/spring-messaging/src/main/java/org/springframework/messaging/core/DestinationResolvingMessageSendingOperations.java, +	<T> void convertAndSend(String destinationName, T payload) throws MessagingException;, +	<T> void convertAndSend(String destinationName, T payload, MessagePostProcessor postProcessor), +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/DestinationResolvingMessageSendingOperations.java, +	<T> void convertAndSend(String destinationName, T payload) throws MessagingException;, +	<T> void convertAndSend(String destinationName, T payload, MessagePostProcessor postProcessor), +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/MessageSendingOperations.java, +	<T> void convertAndSend(T payload) throws MessagingException;, +	<T> void convertAndSend(D destination, T payload) throws MessagingException;, +	<T> void convertAndSend(T payload, MessagePostProcessor postProcessor) throws MessagingException;, +	<T> void convertAndSend(D destination, T payload, MessagePostProcessor postProcessor) throws MessagingException;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/DestinationResolvingMessageSendingOperations.java, +	<T> void convertAndSend(String destinationName, T payload) throws MessagingException;, +	<T> void convertAndSend(String destinationName, T payload, MessagePostProcessor postProcessor), +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/MessageSendingOperations.java, +	<T> void convertAndSend(T payload) throws MessagingException;, +	<T> void convertAndSend(D destination, T payload) throws MessagingException;, +	<T> void convertAndSend(T payload, MessagePostProcessor postProcessor) throws MessagingException;, +	<T> void convertAndSend(D destination, T payload, MessagePostProcessor postProcessor) throws MessagingException;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessagingTemplate.java, + * @author Rossen Stoyanchev, +		message = MessageBuilder.withPayload(message.getPayload()).setHeaders(headers).build();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/DestinationResolvingMessageSendingOperations.java, +	<T> void convertAndSend(String destinationName, T payload) throws MessagingException;, +	<T> void convertAndSend(String destinationName, T payload, MessagePostProcessor postProcessor), +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/MessageSendingOperations.java, +	<T> void convertAndSend(T payload) throws MessagingException;, +	<T> void convertAndSend(D destination, T payload) throws MessagingException;, +	<T> void convertAndSend(T payload, MessagePostProcessor postProcessor) throws MessagingException;, +	<T> void convertAndSend(D destination, T payload, MessagePostProcessor postProcessor) throws MessagingException;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessagingTemplate.java, + * @author Rossen Stoyanchev, +		message = MessageBuilder.withPayload(message.getPayload()).setHeaders(headers).build();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +			return MessageBuilder.withPayload(message.getPayload()).setHeaders(headers).build();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/DestinationResolvingMessageSendingOperations.java, +	<T> void convertAndSend(String destinationName, T payload) throws MessagingException;, +	<T> void convertAndSend(String destinationName, T payload, MessagePostProcessor postProcessor), +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/MessageSendingOperations.java, +	<T> void convertAndSend(T payload) throws MessagingException;, +	<T> void convertAndSend(D destination, T payload) throws MessagingException;, +	<T> void convertAndSend(T payload, MessagePostProcessor postProcessor) throws MessagingException;, +	<T> void convertAndSend(D destination, T payload, MessagePostProcessor postProcessor) throws MessagingException;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessagingTemplate.java, + * @author Rossen Stoyanchev, +		message = MessageBuilder.withPayload(message.getPayload()).setHeaders(headers).build();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +			return MessageBuilder.withPayload(message.getPayload()).setHeaders(headers).build();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SubscriptionMethodReturnValueHandler.java, +			return MessageBuilder.withPayload(message.getPayload()).setHeaders(headers).build();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/DestinationResolvingMessageSendingOperations.java, +	<T> void convertAndSend(String destinationName, T payload) throws MessagingException;, +	<T> void convertAndSend(String destinationName, T payload, MessagePostProcessor postProcessor), +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/MessageSendingOperations.java, +	<T> void convertAndSend(T payload) throws MessagingException;, +	<T> void convertAndSend(D destination, T payload) throws MessagingException;, +	<T> void convertAndSend(T payload, MessagePostProcessor postProcessor) throws MessagingException;, +	<T> void convertAndSend(D destination, T payload, MessagePostProcessor postProcessor) throws MessagingException;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessagingTemplate.java, + * @author Rossen Stoyanchev, +		message = MessageBuilder.withPayload(message.getPayload()).setHeaders(headers).build();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +			return MessageBuilder.withPayload(message.getPayload()).setHeaders(headers).build();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SubscriptionMethodReturnValueHandler.java, +			return MessageBuilder.withPayload(message.getPayload()).setHeaders(headers).build();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AnnotationMethodMessageHandler.java, +			message = MessageBuilder.withPayload(message.getPayload()).setHeaders(headers).build();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/DestinationResolvingMessageSendingOperations.java, +	<T> void convertAndSend(String destinationName, T payload) throws MessagingException;, +	<T> void convertAndSend(String destinationName, T payload, MessagePostProcessor postProcessor), +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/MessageSendingOperations.java, +	<T> void convertAndSend(T payload) throws MessagingException;, +	<T> void convertAndSend(D destination, T payload) throws MessagingException;, +	<T> void convertAndSend(T payload, MessagePostProcessor postProcessor) throws MessagingException;, +	<T> void convertAndSend(D destination, T payload, MessagePostProcessor postProcessor) throws MessagingException;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessagingTemplate.java, + * @author Rossen Stoyanchev, +		message = MessageBuilder.withPayload(message.getPayload()).setHeaders(headers).build();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +			return MessageBuilder.withPayload(message.getPayload()).setHeaders(headers).build();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SubscriptionMethodReturnValueHandler.java, +			return MessageBuilder.withPayload(message.getPayload()).setHeaders(headers).build();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AnnotationMethodMessageHandler.java, +			message = MessageBuilder.withPayload(message.getPayload()).setHeaders(headers).build();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/SimpleBrokerMessageHandler.java, +			Message<byte[]> connectAck = MessageBuilder.withPayload(EMPTY_PAYLOAD).setHeaders(replyHeaders).build();, +				Message<?> clientMessage = MessageBuilder.withPayload(payload).setHeaders(headers).build();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/DestinationResolvingMessageSendingOperations.java, +	<T> void convertAndSend(String destinationName, T payload) throws MessagingException;, +	<T> void convertAndSend(String destinationName, T payload, MessagePostProcessor postProcessor), +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/MessageSendingOperations.java, +	<T> void convertAndSend(T payload) throws MessagingException;, +	<T> void convertAndSend(D destination, T payload) throws MessagingException;, +	<T> void convertAndSend(T payload, MessagePostProcessor postProcessor) throws MessagingException;, +	<T> void convertAndSend(D destination, T payload, MessagePostProcessor postProcessor) throws MessagingException;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessagingTemplate.java, + * @author Rossen Stoyanchev, +		message = MessageBuilder.withPayload(message.getPayload()).setHeaders(headers).build();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +			return MessageBuilder.withPayload(message.getPayload()).setHeaders(headers).build();]