[+++ b/build.gradle, +		optional(project(":spring-webmvc")), +++ b/build.gradle, +		optional(project(":spring-webmvc")), +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/websocket/SubProtocolWebSocketHandler.java, +import java.util.HashSet;, +import java.util.Set;, +			addProtocolHandler(handler);, +		}, +	}, +, +	/**, +	 * Register a sub-protocol handler., +	 */, +	public void addProtocolHandler(SubProtocolHandler handler) {, +			return;, +			if ((replaced != null) && (replaced != handler) ) {, +		findProtocolHandler(session).afterSessionStarted(session, this.outputChannel);, +	protected final SubProtocolHandler findProtocolHandler(WebSocketSession session) {, +			if (this.defaultProtocolHandler != null) {, +			}, +			else {, +				Set<SubProtocolHandler> handlers = new HashSet<SubProtocolHandler>(this.protocolHandlers.values());, +				if (handlers.size() == 1) {, +					handler = handlers.iterator().next();, +				}, +				else {, +					throw new IllegalStateException(, +			}, +		}, +		findProtocolHandler(session).handleMessageFromClient(session, message, this.outputChannel);, +			findProtocolHandler(session).handleMessageToClient(session, message);, +		findProtocolHandler(session).afterSessionEnded(session, closeStatus, this.outputChannel);, +++ b/build.gradle, +		optional(project(":spring-webmvc")), +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/websocket/SubProtocolWebSocketHandler.java, +import java.util.HashSet;, +import java.util.Set;, +			addProtocolHandler(handler);, +		}, +	}, +, +	/**, +	 * Register a sub-protocol handler., +	 */, +	public void addProtocolHandler(SubProtocolHandler handler) {, +			return;, +			if ((replaced != null) && (replaced != handler) ) {, +		findProtocolHandler(session).afterSessionStarted(session, this.outputChannel);, +	protected final SubProtocolHandler findProtocolHandler(WebSocketSession session) {, +			if (this.defaultProtocolHandler != null) {, +			}, +			else {, +				Set<SubProtocolHandler> handlers = new HashSet<SubProtocolHandler>(this.protocolHandlers.values());, +				if (handlers.size() == 1) {, +					handler = handlers.iterator().next();, +				}, +				else {, +					throw new IllegalStateException(, +			}, +		}, +		findProtocolHandler(session).handleMessageFromClient(session, message, this.outputChannel);, +			findProtocolHandler(session).handleMessageToClient(session, message);, +		findProtocolHandler(session).afterSessionEnded(session, closeStatus, this.outputChannel);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractBrokerRegistration.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.messaging.simp.config;, +, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +, +import org.springframework.messaging.MessageChannel;, +import org.springframework.messaging.simp.handler.AbstractBrokerMessageHandler;, +, +import reactor.util.Assert;, +, +, +/**, + * Base class for message broker registration classes., + *, + * @author Rossen Stoyanchev, + * @since 4.0, + */, +public abstract class AbstractBrokerRegistration {]