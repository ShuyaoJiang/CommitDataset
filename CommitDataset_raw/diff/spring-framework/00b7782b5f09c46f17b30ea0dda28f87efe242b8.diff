[+++ b/spring-context/src/main/java/org/springframework/context/annotation/DependsOn.java, + * Copyright 2002-2018 the original author or authors., + * <p>A depends-on declaration can specify both an initialization-time dependency and,, + * in the case of singleton beans only, a corresponding destruction-time dependency., + * Dependent beans that define a depends-on relationship with a given bean are destroyed, + * first, prior to the given bean itself being destroyed. Thus, a depends-on declaration, + * can also control shutdown order., + *, +++ b/spring-context/src/main/java/org/springframework/context/annotation/DependsOn.java, + * Copyright 2002-2018 the original author or authors., + * <p>A depends-on declaration can specify both an initialization-time dependency and,, + * in the case of singleton beans only, a corresponding destruction-time dependency., + * Dependent beans that define a depends-on relationship with a given bean are destroyed, + * first, prior to the given bean itself being destroyed. Thus, a depends-on declaration, + * can also control shutdown order., + *, +++ b/src/docs/asciidoc/core/core-beans.adoc, +NOTE: XML-based metadata is not the only allowed form of configuration metadata., +The Spring IoC container itself is totally decoupled from the format in which this, +[NOTE], +====, +After you learn about Spring's IoC container, you may want to know more about Spring's, +mechanism for reading an InputStream from locations defined in a URI syntax. In particular,, +`Resource` paths are used to construct applications contexts, as described in <<resources-app-ctx>>., +====, +defined through regular bean definition metadata., +[NOTE], +====, +Bean metadata and manually supplied singleton instances need to be registered as early, +====, +Naming beans consistently makes your configuration easier to read and understand., +Also, if you use Spring AOP, it helps a lot when applying advice to a set of beans, +related by name., +NOTE: The `depends-on` attribute can specify both an initialization-time dependency and,, +in the case of <<beans-factory-scopes-singleton,singleton>> beans only, a corresponding, +destruction-time dependency. Dependent beans that define a `depends-on` relationship, +with a given bean are destroyed first, prior to the given bean itself being destroyed., +Thus, `depends-on` can also control shutdown order., +When using XML-based configuration metadata (see <<beans-factory-collaborators>>), you, +can specify the autowire mode for a bean definition with the `autowire` attribute of the, +`<bean/>` element. The autowiring functionality has four modes. You specify autowiring, +per bean and can thus choose which ones to autowire. The following table describes the, +four autowiring modes:, +[NOTE], +====, +CGLIB proxies intercept only public method calls! Do not call non-public methods, +====, +, +==== Shutting Down the Spring IoC Container Gracefully in Non-Web Applications, +[NOTE], +====, +This section applies only to non-web applications. Spring's web-based, +====, +, +[NOTE], +====, +Annotation injection is performed before XML injection. Thus, the XML configuration, +overrides the annotations for properties wired through both approaches., +====, +[NOTE], +====, +`<context:annotation-config/>` only looks for annotations on beans in the same, +====, +[NOTE], +====, +JSR 330's `@Inject` annotation can be used in place of Spring's `@Autowired` annotation in the, +examples included in this section. See <<beans-standard-annotations,here>> for more details., +====, +[NOTE], +====, +As of Spring Framework 4.3, an `@Autowired` annotation on such a constructor is, +====, +[NOTE], +====, +The `@Autowired`, `@Inject`, `@Resource`, and `@Value` annotations are handled by Spring, +`BeanPostProcessor` implementations. This means that you cannot apply these annotations, +within your own `BeanPostProcessor` or `BeanFactoryPostProcessor` types (if any)., +These types must be 'wired up' explicitly by using XML or a Spring `@Bean` method., +====, +`ApplicationContext` of which the `CommonAnnotationBeanPostProcessor` is aware., +The names can be resolved through JNDI if you configure Spring's, +[NOTE], +====, +Starting with Spring 3.0, many features provided by the Spring JavaConfig project are, +====, +NOTE: If you do not want to rely on the default bean-naming strategy, you can provide a, +custom bean-naming strategy. First, implement the, +interface, and be sure to include a default no-arg constructor. Then, provide the fully, +qualified class name when configuring the scanner, as the following example annotation, +NOTE: When working with this mode in your IDE, the `spring-context-indexer` must be, +registered as an annotation processor to make sure the index is up-to-date when, +candidate components are updated., +TIP: The index is enabled automatically when a `META-INF/spring.components` is found, +on the classpath. If an index is partially available for some libraries (or use cases), +but could not be built for the whole application, you can fallback to a regular classpath, +annotations are not composable. You should use Spring's stereotype model for building, +custom component annotations., +underneath), it is picked up during the call to `scan()`. Upon `refresh()`, all its `@Bean`, +methods are processed and registered as bean definitions within the container., +NOTE: This method of declaring inter-bean dependencies works only when the `@Bean` method]