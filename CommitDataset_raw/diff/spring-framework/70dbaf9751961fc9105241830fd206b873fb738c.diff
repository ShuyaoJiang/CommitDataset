[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpSession.java, + * @author Vedran Pavic, +			Object oldValue = this.attributes.put(name, value);, +			if (value != oldValue) {, +				if (oldValue instanceof HttpSessionBindingListener) {, +					((HttpSessionBindingListener) oldValue).valueUnbound(new HttpSessionBindingEvent(this, name, oldValue));, +				}, +		}, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpSession.java, + * @author Vedran Pavic, +			Object oldValue = this.attributes.put(name, value);, +			if (value != oldValue) {, +				if (oldValue instanceof HttpSessionBindingListener) {, +					((HttpSessionBindingListener) oldValue).valueUnbound(new HttpSessionBindingEvent(this, name, oldValue));, +				}, +		}, +++ b/spring-test/src/test/java/org/springframework/mock/web/MockHttpSessionTests.java, + * Copyright 2002-2018 the original author or authors., +import java.util.concurrent.atomic.AtomicInteger;, +import javax.servlet.http.HttpSessionBindingEvent;, +import javax.servlet.http.HttpSessionBindingListener;, +, + * @author Vedran Pavic, +	private MockHttpSession session = new MockHttpSession();, +	@Test, +	public void bindingListenerBindListener() {, +		String bindingListenerName = "bindingListener";, +		CountingHttpSessionBindingListener bindingListener = new CountingHttpSessionBindingListener();, +, +		session.setAttribute(bindingListenerName, bindingListener);, +, +		assertEquals(bindingListener.getCounter(), 1);, +	}, +, +	@Test, +	public void bindingListenerBindListenerThenUnbind() {, +		String bindingListenerName = "bindingListener";, +		CountingHttpSessionBindingListener bindingListener = new CountingHttpSessionBindingListener();, +, +		session.setAttribute(bindingListenerName, bindingListener);, +		session.removeAttribute(bindingListenerName);, +, +		assertEquals(bindingListener.getCounter(), 0);, +	}, +, +	@Test, +	public void bindingListenerBindSameListenerTwice() {, +		String bindingListenerName = "bindingListener";, +		CountingHttpSessionBindingListener bindingListener = new CountingHttpSessionBindingListener();, +, +		session.setAttribute(bindingListenerName, bindingListener);, +		session.setAttribute(bindingListenerName, bindingListener);, +, +		assertEquals(bindingListener.getCounter(), 1);, +	}, +, +	@Test, +	public void bindingListenerBindListenerOverwrite() {, +		String bindingListenerName = "bindingListener";, +		CountingHttpSessionBindingListener bindingListener1 = new CountingHttpSessionBindingListener();, +		CountingHttpSessionBindingListener bindingListener2 = new CountingHttpSessionBindingListener();, +, +		session.setAttribute(bindingListenerName, bindingListener1);, +		session.setAttribute(bindingListenerName, bindingListener2);, +, +		assertEquals(bindingListener1.getCounter(), 0);, +		assertEquals(bindingListener2.getCounter(), 1);, +	}, +, +	private static class CountingHttpSessionBindingListener, +			implements HttpSessionBindingListener {, +, +		private final AtomicInteger counter = new AtomicInteger(0);, +, +		@Override, +		public void valueBound(HttpSessionBindingEvent event) {, +			this.counter.incrementAndGet();, +		}, +, +		@Override, +		public void valueUnbound(HttpSessionBindingEvent event) {, +			this.counter.decrementAndGet();, +		}, +, +		int getCounter() {, +			return this.counter.get();, +		}, +, +	}, +, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpSession.java, + * @author Vedran Pavic, +			Object oldValue = this.attributes.put(name, value);, +			if (value != oldValue) {, +				if (oldValue instanceof HttpSessionBindingListener) {, +					((HttpSessionBindingListener) oldValue).valueUnbound(new HttpSessionBindingEvent(this, name, oldValue));, +				}, +		}, +++ b/spring-test/src/test/java/org/springframework/mock/web/MockHttpSessionTests.java, + * Copyright 2002-2018 the original author or authors.]