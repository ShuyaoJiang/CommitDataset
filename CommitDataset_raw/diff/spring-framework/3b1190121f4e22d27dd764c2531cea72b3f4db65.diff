[+++ b/org.springframework.oxm/oxm.iml, +++ b/org.springframework.oxm/oxm.iml, +++ b/org.springframework.oxm/src/test/java/org/springframework/oxm/castor/CastorMarshallerTests.java, + * Copyright 2002-2011 the original author or authors., +import java.io.StringWriter;, +import java.util.Arrays;, +import java.util.HashMap;, +import java.util.Map;, +import javax.xml.transform.stream.StreamResult;, +import org.custommonkey.xmlunit.NamespaceContext;, +import org.custommonkey.xmlunit.SimpleNamespaceContext;, +import org.custommonkey.xmlunit.XMLUnit;, +import org.custommonkey.xmlunit.XpathEngine;, +import org.junit.Assert;, +import org.junit.Ignore;, +import org.w3c.dom.Document;, +import org.w3c.dom.NodeList;, +import static org.custommonkey.xmlunit.XMLAssert.*;, +import static org.easymock.EasyMock.*;, +, + * Tests the {@link CastorMarshaller} class., + *, + * @author Jakub Narloch, +	/**, +	 * Represents the expected result that doesn't contain the xml declaration., +	 */, +	private static final String DOCUMENT_EXPECTED_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +, +			"<tns:flights xmlns:tns=\"http://samples.springframework.org/flight\">" +, +			"<tns:flight><tns:number>42</tns:number></tns:flight></tns:flights>";, +, +	/**, +	 * Represents the expected result that doesn't contain the xml namespaces., +	 */, +	private static final String SUPPRESSED_NAMESPACE_EXPECTED_STRING =, +			"<?xml version=\"1.0\" encoding=\"UTF-8\"?><flights><flight><number>42</number></flight></flights>";, +, +	/**, +	 * Represents the expected result with modified root element name., +	 */, +	private static final String ROOT_ELEMENT_EXPECTED_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +, +			"<tns:canceledFlights xmlns:tns=\"http://samples.springframework.org/flight\">" +, +			"<tns:flight><tns:number>42</tns:number></tns:flight></tns:canceledFlights>";, +, +	/**, +	 * Represents the expected result with 'xsi:type' attribute., +	 */, +	private static final String XSI_EXPECTED_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +, +			"<objects><castor-object xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"" +, +			" xsi:type=\"java:org.springframework.oxm.castor.CastorObject\">" +, +			"<name>test</name><value>8</value></castor-object></objects>";, +, +	/**, +	 * Represents the expected result with suppressed 'xsi:type' attribute., +	 */, +	private static final String SUPPRESSED_XSI_EXPECTED_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +, +			"<objects><castor-object><name>test</name><value>8</value></castor-object></objects>";, +, +	/**, +	 * Represents the expected result with 'xsi:type' attribute for root element., +	 */, +	private static final String ROOT_WITH_XSI_EXPECTED_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +, +			"<objects xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"" +, +			" xsi:type=\"java:java.util.Arrays$ArrayList\">" +, +			"<castor-object xsi:type=\"java:org.springframework.oxm.castor.CastorObject\">" +, +			"<name>test</name><value>8</value></castor-object></objects>";, +, +	/**, +	 * Represents the expected result without 'xsi:type' attribute for root element., +	 */, +	private static final String ROOT_WITHOUT_XSI_EXPECTED_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +, +			"<objects><castor-object xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"" +, +			" xsi:type=\"java:org.springframework.oxm.castor.CastorObject\">" +, +			"<name>test</name><value>8</value></castor-object></objects>";, +, +		Assert.assertTrue("CastorMarshaller does not support Flights", marshaller.supports(Flights.class));, +		Assert.assertTrue("CastorMarshaller does not support Flight", marshaller.supports(Flight.class));, +	/**, +	 * Tests the marshal result when the {@link CastorMarshaller#setSuppressNamespaces(boolean)} is set to, +	 * <code>true</code>., +	 *, +	 * @throws Exception if any error occurs during test, +	 */, +	@Test, +	public void testSuppressNamespacesTrue() throws Exception {, +		getCastorMarshaller().setSuppressNamespaces(true);, +		String result = marshalFlights();, +		assertXMLEqual("Marshaller wrote invalid result", SUPPRESSED_NAMESPACE_EXPECTED_STRING, result);, +	}, +, +	/**, +	 * Tests the marshal result when the {@link CastorMarshaller#setSuppressNamespaces(boolean)} is set to, +	 * <code>false</code>., +	 *, +	 * @throws Exception if any error occurs during test, +	 */, +	@Test, +	public void testSuppressNamespacesFalse() throws Exception {, +		getCastorMarshaller().setSuppressNamespaces(false);, +		String result = marshalFlights();, +		assertXMLEqual("Marshaller wrote invalid result", EXPECTED_STRING, result);]