[+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +				if (this.beanFactory == null) {, +					throw new IllegalStateException("BeanFactory must be set on " + getClass().getSimpleName() +, +				}, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +				if (this.beanFactory == null) {, +					throw new IllegalStateException("BeanFactory must be set on " + getClass().getSimpleName() +, +				}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +				// Declared type variables to inspect?, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +				if (this.beanFactory == null) {, +					throw new IllegalStateException("BeanFactory must be set on " + getClass().getSimpleName() +, +				}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +				// Declared type variables to inspect?, +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/EnableAsyncTests.java, + * Copyright 2002-2015 the original author or authors., +	static class AsyncBeanWithExecutorQualifiedByName {, +, +		@Async, +		public Future<Thread> work0() {, +			return new AsyncResult<Thread>(Thread.currentThread());, +		}, +, +		@Async("e1"), +		public Future<Thread> work() {, +			return new AsyncResult<Thread>(Thread.currentThread());, +		}, +, +		@Async("otherExecutor"), +		public Future<Thread> work2() {, +			return new AsyncResult<Thread>(Thread.currentThread());, +		}, +, +		@Async("e2"), +		public Future<Thread> work3() {, +			return new AsyncResult<Thread>(Thread.currentThread());, +		}, +	}, +, +, +	static class AsyncBean {, +, +		private Thread threadOfExecution;, +, +		@Async, +		public void work() {, +			this.threadOfExecution = Thread.currentThread();, +		}, +, +		@Async, +		public void fail() {, +			throw new UnsupportedOperationException();, +		}, +, +		public Thread getThreadOfExecution() {, +			return threadOfExecution;, +		}, +	}, +, +, +	@Configuration, +	@EnableAsync(annotation = CustomAsync.class), +	static class CustomAsyncAnnotationConfig {, +, +		@Bean, +		public CustomAsyncBean asyncBean() {, +			return new CustomAsyncBean();, +		}, +	}, +, +, +	@Target(ElementType.METHOD), +	@Retention(RetentionPolicy.RUNTIME), +	@interface CustomAsync {, +	}, +, +, +	static class CustomAsyncBean {, +, +		@CustomAsync, +		public void work() {, +		}, +	}, +, +, +	@Configuration, +	@EnableAsync(order = Ordered.HIGHEST_PRECEDENCE), +	static class OrderedAsyncConfig {, +, +		@Bean, +		public AsyncBean asyncBean() {, +			return new AsyncBean();, +		}, +	}, +, +, +	@Configuration, +	@EnableAsync(mode = AdviceMode.ASPECTJ)]