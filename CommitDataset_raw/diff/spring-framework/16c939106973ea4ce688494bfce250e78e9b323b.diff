[+++ b/org.springframework.samples.petclinic/readme.txt, +@author Scott Andrews, +By default, an embedded HSQL instance in configured.  No other steps are , +necessary to get the data source up and running., +, +To use HSQL as a remote database, open "src/jdbc.properties", comment out all , +properties in the "HSQL Embedded Settings" section, uncomment all properties in , +the "HSQL Settings" section.  Start the remote HSQLDB instance in the , +"db/hsqldb" directory, for example using "server.bat"., +++ b/org.springframework.samples.petclinic/readme.txt, +@author Scott Andrews, +By default, an embedded HSQL instance in configured.  No other steps are , +necessary to get the data source up and running., +, +To use HSQL as a remote database, open "src/jdbc.properties", comment out all , +properties in the "HSQL Embedded Settings" section, uncomment all properties in , +the "HSQL Settings" section.  Start the remote HSQLDB instance in the , +"db/hsqldb" directory, for example using "server.bat"., +++ b/org.springframework.samples.petclinic/src/main/java/org/springframework/samples/petclinic/config/DbcpDataSourceFactory.java, +/*, + * Copyright 2002-2008 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.samples.petclinic.config;, +, +import java.io.BufferedReader;, +import java.io.BufferedWriter;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.InputStreamReader;, +import java.io.StringWriter;, +import java.sql.Connection;, +import java.sql.SQLException;, +import java.sql.Statement;, +, +import javax.sql.DataSource;, +, +import org.apache.commons.dbcp.BasicDataSource;, +import org.springframework.beans.factory.DisposableBean;, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.core.io.Resource;, +, +/**, + * A factory that creates a data source fit for use in a system environment. Creates a DBCP simple data source , + * from the provided connection properties., + *, + * This factory returns a fully-initialized DataSource implementation. When the DataSource is returned, callers are, + * guaranteed that the database schema and data will have been loaded by that time., + *, + * Is a FactoryBean, for exposing the fully-initialized DataSource as a Spring bean. See {@link #getObject()}., + * , + * @author Chris Beams, + * @author Scott Andrews, + */, +public class DbcpDataSourceFactory implements FactoryBean<DataSource>, DisposableBean {, +, +    // configurable properties, +, +    private String driverClassName;, +    , +    private String url;, +    , +    private String username;, +    , +    private String password;, +    , +    private boolean populate;, +, +    private Resource schemaLocation;, +, +    private Resource dataLocation;, +, +    /**, +     * The object created by this factory., +     */, +    private BasicDataSource dataSource;, +, +    public void setDriverClassName(String driverClassName) {, +        this.driverClassName = driverClassName;, +    }, +, +    /**, +     * The data source connection URL, +     */, +    public void setUrl(String url) {, +        this.url = url;, +    }, +, +    /**]