[+++ b/spring-test/src/main/java/org/springframework/test/web/client/ExpectedCount.java, + * twice(), +	 * Exactly twice., +	 */, +	public static ExpectedCount twice() {, +		return new ExpectedCount(2, 2);, +	}, +, +	/**, +++ b/spring-test/src/main/java/org/springframework/test/web/client/ExpectedCount.java, + * twice(), +	 * Exactly twice., +	 */, +	public static ExpectedCount twice() {, +		return new ExpectedCount(2, 2);, +	}, +, +	/**, +++ b/spring-test/src/test/java/org/springframework/test/web/client/DefaultRequestExpectationTests.java, +import static org.springframework.test.web.client.ExpectedCount.twice;, +	public void matchWithFailedExpectation() throws Exception {, +		RequestExpectation expectation = new DefaultRequestExpectation(twice(), requestTo("/foo"));, +		RequestExpectation expectation = new DefaultRequestExpectation(twice(), requestTo("/foo"));, +++ b/spring-test/src/main/java/org/springframework/test/web/client/ExpectedCount.java, + * twice(), +	 * Exactly twice., +	 */, +	public static ExpectedCount twice() {, +		return new ExpectedCount(2, 2);, +	}, +, +	/**, +++ b/spring-test/src/test/java/org/springframework/test/web/client/DefaultRequestExpectationTests.java, +import static org.springframework.test.web.client.ExpectedCount.twice;, +	public void matchWithFailedExpectation() throws Exception {, +		RequestExpectation expectation = new DefaultRequestExpectation(twice(), requestTo("/foo"));, +		RequestExpectation expectation = new DefaultRequestExpectation(twice(), requestTo("/foo"));, +++ b/spring-test/src/test/java/org/springframework/test/web/client/SimpleRequestExpectationManagerTests.java, +import static org.springframework.test.web.client.ExpectedCount.twice;, +		this.manager.expectRequest(times(3), requestTo("/foo")).andExpect(method(GET)).andRespond(withSuccess());, +		this.manager.expectRequest(times(3), requestTo("/bar")).andExpect(method(GET)).andRespond(withSuccess());, +		this.manager.validateRequest(createRequest(GET, "/foo"));, +		this.manager.validateRequest(createRequest(GET, "/bar"));, +		this.manager.expectRequest(twice(), requestTo("/foo")).andExpect(method(GET)).andRespond(withSuccess());, +		this.manager.expectRequest(twice(), requestTo("/bar")).andExpect(method(GET)).andRespond(withSuccess());, +		this.manager.expectRequest(twice(), requestTo("/baz")).andExpect(method(GET)).andRespond(withSuccess());, +++ b/spring-test/src/main/java/org/springframework/test/web/client/ExpectedCount.java, + * twice(), +	 * Exactly twice., +	 */, +	public static ExpectedCount twice() {, +		return new ExpectedCount(2, 2);, +	}, +, +	/**, +++ b/spring-test/src/test/java/org/springframework/test/web/client/DefaultRequestExpectationTests.java, +import static org.springframework.test.web.client.ExpectedCount.twice;, +	public void matchWithFailedExpectation() throws Exception {, +		RequestExpectation expectation = new DefaultRequestExpectation(twice(), requestTo("/foo"));, +		RequestExpectation expectation = new DefaultRequestExpectation(twice(), requestTo("/foo"));, +++ b/spring-test/src/test/java/org/springframework/test/web/client/SimpleRequestExpectationManagerTests.java, +import static org.springframework.test.web.client.ExpectedCount.twice;, +		this.manager.expectRequest(times(3), requestTo("/foo")).andExpect(method(GET)).andRespond(withSuccess());, +		this.manager.expectRequest(times(3), requestTo("/bar")).andExpect(method(GET)).andRespond(withSuccess());, +		this.manager.validateRequest(createRequest(GET, "/foo"));, +		this.manager.validateRequest(createRequest(GET, "/bar"));, +		this.manager.expectRequest(twice(), requestTo("/foo")).andExpect(method(GET)).andRespond(withSuccess());, +		this.manager.expectRequest(twice(), requestTo("/bar")).andExpect(method(GET)).andRespond(withSuccess());, +		this.manager.expectRequest(twice(), requestTo("/baz")).andExpect(method(GET)).andRespond(withSuccess());, +++ b/spring-test/src/test/java/org/springframework/test/web/client/UnorderedRequestExpectationManagerTests.java, +import static org.springframework.test.web.client.ExpectedCount.twice;, +		this.manager.expectRequest(twice(), requestTo("/foo")).andExpect(method(GET)).andRespond(withSuccess());, +		this.manager.expectRequest(twice(), requestTo("/bar")).andExpect(method(GET)).andRespond(withSuccess());]