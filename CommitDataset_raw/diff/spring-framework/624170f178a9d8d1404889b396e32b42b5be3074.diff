[+++ b/spring-aspects/src/main/java/org/springframework/mock/staticmock/AbstractMethodMockingControl.aj, + * <li>The {@link #mockStaticsTestMethod()} pointcut to indicate call stacks, + * <li>The {@link #methodToMock()} pointcut to pick out method invocations to mock, +	private final Expectations expectations = new Expectations();, +	protected void expectReturnInternal(Object retVal) {, +		if (!recording) {, +			throw new IllegalStateException("Not recording: Cannot set return value");, +		}, +		expectations.expectReturn(retVal);, +	}, +, +	protected void expectThrowInternal(Throwable throwable) {, +		if (!recording) {, +			throw new IllegalStateException("Not recording: Cannot set throwable value");, +		}, +		expectations.expectThrow(throwable);, +	}, +, +	protected void playbackInternal() {, +		recording = false;, +	}, +, +	protected void verifyInternal() {, +		expectations.verify();, +	}, +, +	protected void resetInternal() {, +		expectations.reset();, +		recording = true;, +	}, +, +, +	private static enum CallResponse {, +		undefined, return_, throw_, +			private CallResponse responseType = CallResponse.undefined;, +			Call(String signature, Object[] args) {, +			boolean responseTypeAlreadySet() {, +				return responseType != CallResponse.undefined;, +			void setReturnValue(Object retVal) {, +			void setThrowable(Throwable throwable) {, +			Object returnValue(String lastSig, Object[] args) {, +			Object throwException(String lastSig, Object[] args) {, +					throw new IllegalArgumentException("Signatures do not match");, +					throw new IllegalArgumentException("Arguments do not match");, +			if (c.responseTypeAlreadySet()) {, +			c.setReturnValue(retVal);, +			if (c.responseTypeAlreadySet()) {, +			c.setThrowable(throwable);, +		}, +, +		/**, +		 * Reset the internal state of this {@code Expectations} instance., +		 */, +		public void reset() {, +			this.calls.clear();, +			this.verified = 0;, +	/**, +	 * Pointcut that identifies call stacks when mocking should be triggered., +	 */, +	protected abstract pointcut mockStaticsTestMethod();, +	/**, +	 * Pointcut that identifies which method invocations to mock., +	 */, +	protected abstract pointcut methodToMock();, +		verifyInternal();, +++ b/spring-aspects/src/main/java/org/springframework/mock/staticmock/AbstractMethodMockingControl.aj, + * <li>The {@link #mockStaticsTestMethod()} pointcut to indicate call stacks, + * <li>The {@link #methodToMock()} pointcut to pick out method invocations to mock, +	private final Expectations expectations = new Expectations();, +	protected void expectReturnInternal(Object retVal) {, +		if (!recording) {, +			throw new IllegalStateException("Not recording: Cannot set return value");, +		}, +		expectations.expectReturn(retVal);, +	}, +, +	protected void expectThrowInternal(Throwable throwable) {, +		if (!recording) {, +			throw new IllegalStateException("Not recording: Cannot set throwable value");, +		}, +		expectations.expectThrow(throwable);, +	}, +, +	protected void playbackInternal() {, +		recording = false;, +	}, +, +	protected void verifyInternal() {, +		expectations.verify();, +	}, +, +	protected void resetInternal() {, +		expectations.reset();, +		recording = true;, +	}, +, +, +	private static enum CallResponse {, +		undefined, return_, throw_, +			private CallResponse responseType = CallResponse.undefined;]