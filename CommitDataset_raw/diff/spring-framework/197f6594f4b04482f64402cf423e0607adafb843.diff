[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +				if (StringUtils.hasText(aliasedAttributeName) && attributes.containsKey(aliasedAttributeName)) {, +					overrideAttribute(element, annotation, attributes, attributeName, aliasedAttributeName);, +					overrideAttribute(element, annotation, attributes, attributeName, attributeName);, +				}, +			}, +		}, +, +		private void overrideAttribute(AnnotatedElement element, Annotation annotation,, +				AnnotationAttributes attributes, String sourceAttributeName, String targetAttributeName) {, +, +			Object value = AnnotationUtils.getValue(annotation, sourceAttributeName);, +			attributes.put(targetAttributeName, adaptedValue);, +		}, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +				if (StringUtils.hasText(aliasedAttributeName) && attributes.containsKey(aliasedAttributeName)) {, +					overrideAttribute(element, annotation, attributes, attributeName, aliasedAttributeName);, +					overrideAttribute(element, annotation, attributes, attributeName, attributeName);, +				}, +			}, +		}, +, +		private void overrideAttribute(AnnotatedElement element, Annotation annotation,, +				AnnotationAttributes attributes, String sourceAttributeName, String targetAttributeName) {, +, +			Object value = AnnotationUtils.getValue(annotation, sourceAttributeName);, +			attributes.put(targetAttributeName, adaptedValue);, +		}, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	private static final Object DEFAULT_VALUE_PLACEHOLDER = new String("<SPRING DEFAULT VALUE PLACEHOLDER>");, +	 * <p><strong>NOTE</strong>: This variant of {@code getAnnotationAttributes()} is, +	 * only intended for use within the framework. Specifically, the {@code mergeMode} flag, +	 * can be set to {@code true} in order to support processing of attribute aliases while, +	 * merging attributes within an annotation hierarchy. When running in <em>merge mode</em>,, +	 * the following special rules apply:, +	 * <li>Default values will be replaced with {@link #DEFAULT_VALUE_PLACEHOLDER}.</li>, +	 * @param mergeMode whether the annotation attributes should be created, +	 * using <em>merge mode</em>, +			boolean classValuesAsString, boolean nestedAnnotationsAsMap, boolean mergeMode) {, +		if (!mergeMode) {, +				if (mergeMode && (defaultValue != null)) {, +				if (!ObjectUtils.nullSafeEquals(value, aliasedValue) && (value != DEFAULT_VALUE_PLACEHOLDER), +						&& (aliasedValue != DEFAULT_VALUE_PLACEHOLDER)) {, +				if (value == DEFAULT_VALUE_PLACEHOLDER) {, +				if (aliasedValue == DEFAULT_VALUE_PLACEHOLDER) {, +			if (value == DEFAULT_VALUE_PLACEHOLDER) {]