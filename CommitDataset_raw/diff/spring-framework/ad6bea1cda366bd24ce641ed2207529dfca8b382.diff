[+++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +					.findAnnotationAttributes(this.method, EventListener.class);, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +					.findAnnotationAttributes(this.method, EventListener.class);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +import java.lang.reflect.Method;, +import org.springframework.core.BridgeMethodResolver;, + * Utility class used to collect and merge all annotation attributes on a, + * given {@link AnnotatedElement}, including those declared via meta-annotations., +		processWithGetSemantics(element, annotationType, new Processor<Object>() {, +		return Boolean.TRUE.equals(processWithGetSemantics(element, annotationType, new Processor<Boolean>() {, +		return Boolean.TRUE.equals(processWithGetSemantics(element, annotationType, new Processor<Boolean>() {, +	 * <em>Get</em> annotation attributes of the specified {@code annotationType}, +	 * in the annotation hierarchy of the supplied {@link AnnotatedElement},, +	 * and merge the results into an {@link AnnotationAttributes} map., +	 *, +	 * <p>Delegates to {@link #getAnnotationAttributes(AnnotatedElement, String, boolean, boolean)},, +	 * @return the merged {@code AnnotationAttributes}, +	 * <em>Get</em> annotation attributes of the specified {@code annotationType}, +	 * in the annotation hierarchy of the supplied {@link AnnotatedElement},, +	 * @param nestedAnnotationsAsMap whether to convert nested Annotation, +	 * instances into {@link AnnotationAttributes} maps or to preserve them, +	 * as Annotation instances, +	 * @return the merged {@code AnnotationAttributes}, +			boolean classValuesAsString, boolean nestedAnnotationsAsMap) {, +		return processWithGetSemantics(element, annotationType, new MergeAnnotationAttributesProcessor(, +			classValuesAsString, nestedAnnotationsAsMap));, +, +	/**, +	 * <em>Find</em> annotation attributes of the specified {@code annotationType}, +	 * in the annotation hierarchy of the supplied {@link AnnotatedElement},, +	 * and merge the results into an {@link AnnotationAttributes} map., +	 *, +	 * <p>Delegates to, +	 * {@link #findAnnotationAttributes(AnnotatedElement, String, boolean, boolean, boolean, boolean, boolean, boolean)},, +	 * supplying {@code true} for all {@code search*} flags., +	 *, +	 * @param element the annotated element, +	 * @param annotationType the annotation type to find, +	 * @return the merged {@code AnnotationAttributes}, +	 */, +	public static AnnotationAttributes findAnnotationAttributes(AnnotatedElement element,, +			Class<? extends Annotation> annotationType) {, +		return findAnnotationAttributes(element, annotationType.getName(), true, true, true, true, false, false);, +, +	/**, +	 * <em>Find</em> annotation attributes of the specified {@code annotationType}, +	 * in the annotation hierarchy of the supplied {@link AnnotatedElement},, +	 * and merge the results into an {@link AnnotationAttributes} map., +	 *, +	 * <p>Delegates to, +	 * {@link #findAnnotationAttributes(AnnotatedElement, String, boolean, boolean, boolean, boolean, boolean, boolean)},, +	 * supplying {@code true} for all {@code search*} flags., +	 *, +	 * @param element the annotated element, +	 * @param annotationType the annotation type to find, +	 * @return the merged {@code AnnotationAttributes}, +	 */, +	public static AnnotationAttributes findAnnotationAttributes(AnnotatedElement element, String annotationType) {, +		return findAnnotationAttributes(element, annotationType, true, true, true, true, false, false);, +, +	/**, +	 * <em>Find</em> annotation attributes of the specified {@code annotationType}, +	 * in the annotation hierarchy of the supplied {@link AnnotatedElement},, +	 * and merge the results into an {@link AnnotationAttributes} map., +	 *, +	 * @param element the annotated element, +	 * @param annotationType the annotation type to find, +	 * @param searchOnInterfaces whether to search on interfaces, if the, +	 * annotated element is a class, +	 * @param searchOnSuperclasses whether to search on superclasses, if, +	 * the annotated element is a class, +	 * @param searchOnMethodsInInterfaces whether to search on methods in, +	 * interfaces, if the annotated element is a method, +	 * @param searchOnMethodsInSuperclasses whether to search on methods, +	 * in superclasses, if the annotated element is a method, +	 * @param classValuesAsString whether to convert Class references into, +	 * Strings or to preserve them as Class references, +	 * @param nestedAnnotationsAsMap whether to convert nested Annotation, +	 * instances into {@link AnnotationAttributes} maps or to preserve them, +	 * as Annotation instances, +	 * @return the merged {@code AnnotationAttributes}, +	 */, +	public static AnnotationAttributes findAnnotationAttributes(AnnotatedElement element, String annotationType,, +			boolean searchOnInterfaces, boolean searchOnSuperclasses, boolean searchOnMethodsInInterfaces,, +			boolean searchOnMethodsInSuperclasses, boolean classValuesAsString, boolean nestedAnnotationsAsMap) {, +, +		return processWithFindSemantics(element, annotationType, searchOnInterfaces, searchOnSuperclasses,, +			searchOnMethodsInInterfaces, searchOnMethodsInSuperclasses, new MergeAnnotationAttributesProcessor(, +				classValuesAsString, nestedAnnotationsAsMap));, +		processWithGetSemantics(element, annotationType, new Processor<Void>() {, +	private static <T> T processWithGetSemantics(AnnotatedElement element, String annotationType, Processor<T> processor) {, +		try {, +			return processWithGetSemantics(element, annotationType, processor, new HashSet<AnnotatedElement>(), 0);, +		}, +		catch (Throwable ex) {, +			throw new IllegalStateException("Failed to introspect annotations: " + element, ex);, +		}, +	}, +]