[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, +			if (ResolvableType.NONE.equals(this.returnType)) {, +				throw new IllegalArgumentException("Expected one of Callable, DeferredResult, or ListenableFuture: " +, +						super.getParameterType());, +			}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, +			if (ResolvableType.NONE.equals(this.returnType)) {, +				throw new IllegalArgumentException("Expected one of Callable, DeferredResult, or ListenableFuture: " +, +						super.getParameterType());, +			}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, +public class ContentNegotiatingViewResolver extends WebApplicationObjectSupport, +		implements ViewResolver, Ordered, InitializingBean {, +	private final ContentNegotiationManagerFactoryBean cnmFactoryBean = new ContentNegotiationManagerFactoryBean();, +		this.cnmFactoryBean.setServletContext(servletContext);, +			this.cnmFactoryBean.afterPropertiesSet();, +			this.contentNegotiationManager = this.cnmFactoryBean.getObject();, +, +			acceptableMediaTypes = (!acceptableMediaTypes.isEmpty() ? acceptableMediaTypes :, +					Collections.singletonList(MediaType.ALL));, +		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceType) < 0 ? acceptType : produceType);, +							logger.debug("Returning [" + candidateView + "] based on requested media type '" +, +									mediaType + "'");]