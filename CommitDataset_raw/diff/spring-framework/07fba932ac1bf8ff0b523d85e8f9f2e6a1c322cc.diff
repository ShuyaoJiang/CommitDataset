[+++ b/org.springframework.web/ivy.xml, +		<dependency org="com.caucho" name="com.springsource.com.caucho" rev="3.2.1", +++ b/org.springframework.web/ivy.xml, +		<dependency org="com.caucho" name="com.springsource.com.caucho" rev="3.2.1", +++ b/org.springframework.web/src/main/java/org/springframework/remoting/caucho/HessianExporter.java, + * Copyright 2002-2009 the original author or authors., +import com.caucho.hessian.io.AbstractHessianInput;, +import com.caucho.hessian.io.HessianInput;, + * This exporter requires Hessian 3.1.3 or above., +			osToUse = new HessianDebugOutputStream(outputStream, debugWriter);, +		int code = isToUse.read();, +		int major;, +		int minor;, +		AbstractHessianInput in;, +		AbstractHessianOutput out;, +		if (code == 'H') {, +			major = isToUse.read();, +			minor = isToUse.read();, +			if (major != 0x02) {, +				throw new IOException("Version " + major + "." + minor + " is not understood");, +			}, +			in = new Hessian2Input(isToUse);, +			out = new Hessian2Output(osToUse);, +			in.readCall();, +		}, +		else if (code == 'c') {, +			major = isToUse.read();, +			minor = isToUse.read();, +			in = new HessianInput(isToUse);, +		}, +		else {, +			throw new IOException("Expected 'H' (Hessian 2.0) or 'c' (Hessian 1.0) in hessian input at " + code);, +		}, +, +			in.setSerializerFactory(this.serializerFactory);, +++ b/org.springframework.web/ivy.xml, +		<dependency org="com.caucho" name="com.springsource.com.caucho" rev="3.2.1", +++ b/org.springframework.web/src/main/java/org/springframework/remoting/caucho/HessianExporter.java, + * Copyright 2002-2009 the original author or authors., +import com.caucho.hessian.io.AbstractHessianInput;, +import com.caucho.hessian.io.HessianInput;, + * This exporter requires Hessian 3.1.3 or above., +			osToUse = new HessianDebugOutputStream(outputStream, debugWriter);, +		int code = isToUse.read();, +		int major;, +		int minor;, +		AbstractHessianInput in;, +		AbstractHessianOutput out;, +		if (code == 'H') {, +			major = isToUse.read();, +			minor = isToUse.read();, +			if (major != 0x02) {, +				throw new IOException("Version " + major + "." + minor + " is not understood");, +			}, +			in = new Hessian2Input(isToUse);, +			out = new Hessian2Output(osToUse);, +			in.readCall();, +		}, +		else if (code == 'c') {, +			major = isToUse.read();, +			minor = isToUse.read();, +			in = new HessianInput(isToUse);, +		}, +		else {, +			throw new IOException("Expected 'H' (Hessian 2.0) or 'c' (Hessian 1.0) in hessian input at " + code);, +		}, +, +			in.setSerializerFactory(this.serializerFactory);, +++ b/org.springframework.web/src/main/java/org/springframework/remoting/caucho/HessianServiceExporter.java, + * Copyright 2002-2009 the original author or authors., + * This exporter requires Hessian 3.1.3 or above., +++ b/org.springframework.web/ivy.xml, +		<dependency org="com.caucho" name="com.springsource.com.caucho" rev="3.2.1", +++ b/org.springframework.web/src/main/java/org/springframework/remoting/caucho/HessianExporter.java, + * Copyright 2002-2009 the original author or authors., +import com.caucho.hessian.io.AbstractHessianInput;, +import com.caucho.hessian.io.HessianInput;, + * This exporter requires Hessian 3.1.3 or above., +			osToUse = new HessianDebugOutputStream(outputStream, debugWriter);, +		int code = isToUse.read();, +		int major;, +		int minor;, +		AbstractHessianInput in;, +		AbstractHessianOutput out;, +		if (code == 'H') {, +			major = isToUse.read();, +			minor = isToUse.read();, +			if (major != 0x02) {, +				throw new IOException("Version " + major + "." + minor + " is not understood");, +			}, +			in = new Hessian2Input(isToUse);, +			out = new Hessian2Output(osToUse);, +			in.readCall();, +		}, +		else if (code == 'c') {, +			major = isToUse.read();, +			minor = isToUse.read();, +			in = new HessianInput(isToUse);, +		}, +		else {]