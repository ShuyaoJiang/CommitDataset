[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/AbstractView.java, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.Set;, +import org.springframework.web.context.support.ContextExposingHttpServletRequest;, +	private boolean exposeContextBeansAsAttributes = false;, +, +	private Set<String> exposedContextBeanNames;, +, +	/**, +	 * Set whether to make all Spring beans in the application context accessible, +	 * as request attributes, through lazy checking once an attribute gets accessed., +	 * <p>This will make all such beans accessible in plain {@code ${...}}, +	 * expressions in a JSP 2.0 page, as well as in JSTL's {@code c:out}, +	 * value expressions., +	 * <p>Default is "false". Switch this flag on to transparently expose all, +	 * Spring beans in the request attribute namespace., +	 * <p><b>NOTE:</b> Context beans will override any custom request or session, +	 * attributes of the same name that have been manually added. However, model, +	 * attributes (as explicitly exposed to this view) of the same name will, +	 * always override context beans., +	 * @see #getRequestToExpose, +	 */, +	public void setExposeContextBeansAsAttributes(boolean exposeContextBeansAsAttributes) {, +		this.exposeContextBeansAsAttributes = exposeContextBeansAsAttributes;, +	}, +, +	/**, +	 * Specify the names of beans in the context which are supposed to be exposed., +	 * If this is non-null, only the specified beans are eligible for exposure as, +	 * attributes., +	 * <p>If you'd like to expose all Spring beans in the application context, switch, +	 * the {@link #setExposeContextBeansAsAttributes "exposeContextBeansAsAttributes"}, +	 * flag on but do not list specific bean names for this property., +	 */, +	public void setExposedContextBeanNames(String... exposedContextBeanNames) {, +		this.exposedContextBeanNames = new HashSet<String>(Arrays.asList(exposedContextBeanNames));, +	}, +, +		renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);, +		size += (model != null ? model.size() : 0);, +		size += (pathVars != null ? pathVars.size() : 0);, +, +	 * Get the request handle to expose to {@link #renderMergedOutputModel}, i.e. to the view., +	 * <p>The default implementation wraps the original request for exposure of Spring beans, +	 * as request attributes (if demanded)., +	 * @param originalRequest the original servlet request as provided by the engine, +	 * @return the wrapped request, or the original request if no wrapping is necessary, +	 * @see #setExposeContextBeansAsAttributes, +	 * @see #setExposedContextBeanNames, +	 * @see org.springframework.web.context.support.ContextExposingHttpServletRequest, +	 */, +	protected HttpServletRequest getRequestToExpose(HttpServletRequest originalRequest) {, +		if (this.exposeContextBeansAsAttributes || this.exposedContextBeanNames != null) {, +			return new ContextExposingHttpServletRequest(, +					originalRequest, getWebApplicationContext(), this.exposedContextBeanNames);, +		}, +		return originalRequest;, +	}, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/AbstractView.java, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.Set;, +import org.springframework.web.context.support.ContextExposingHttpServletRequest;, +	private boolean exposeContextBeansAsAttributes = false;, +, +	private Set<String> exposedContextBeanNames;, +, +	/**, +	 * Set whether to make all Spring beans in the application context accessible, +	 * as request attributes, through lazy checking once an attribute gets accessed., +	 * <p>This will make all such beans accessible in plain {@code ${...}}, +	 * expressions in a JSP 2.0 page, as well as in JSTL's {@code c:out}, +	 * value expressions., +	 * <p>Default is "false". Switch this flag on to transparently expose all, +	 * Spring beans in the request attribute namespace., +	 * <p><b>NOTE:</b> Context beans will override any custom request or session, +	 * attributes of the same name that have been manually added. However, model, +	 * attributes (as explicitly exposed to this view) of the same name will, +	 * always override context beans., +	 * @see #getRequestToExpose, +	 */, +	public void setExposeContextBeansAsAttributes(boolean exposeContextBeansAsAttributes) {, +		this.exposeContextBeansAsAttributes = exposeContextBeansAsAttributes;, +	}, +, +	/**, +	 * Specify the names of beans in the context which are supposed to be exposed., +	 * If this is non-null, only the specified beans are eligible for exposure as, +	 * attributes., +	 * <p>If you'd like to expose all Spring beans in the application context, switch, +	 * the {@link #setExposeContextBeansAsAttributes "exposeContextBeansAsAttributes"}, +	 * flag on but do not list specific bean names for this property., +	 */, +	public void setExposedContextBeanNames(String... exposedContextBeanNames) {, +		this.exposedContextBeanNames = new HashSet<String>(Arrays.asList(exposedContextBeanNames));, +	}, +]