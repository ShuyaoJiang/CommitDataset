[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, + * @author Oleg Zhurakousky, +	 * @return the attribute value, or {@code null} if not found unless the the attribute value , +	 * can not be retrieved due to {@link AnnotationConfigurationException}, in which case it, +	 * will be re-thrown, +	 * @see #rethrowAnnotationConfigurationException(Throwable), +		catch (InvocationTargetException ex) {, +			rethrowAnnotationConfigurationException(ex.getTargetException());, +			throw new IllegalStateException("Could not obtain annotation attribute value of " + attributeName, ex);, +		}, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, + * @author Oleg Zhurakousky, +	 * @return the attribute value, or {@code null} if not found unless the the attribute value , +	 * can not be retrieved due to {@link AnnotationConfigurationException}, in which case it, +	 * will be re-thrown, +	 * @see #rethrowAnnotationConfigurationException(Throwable), +		catch (InvocationTargetException ex) {, +			rethrowAnnotationConfigurationException(ex.getTargetException());, +			throw new IllegalStateException("Could not obtain annotation attribute value of " + attributeName, ex);, +		}, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java, + * @author Oleg Zhurakousky, +	@ContextConfig(value="foo", location="bar"), +	@Test(expected=AnnotationConfigurationException.class), +	public void synthesizeAnnotationWithAttributeAliasesDifferentValues() throws Exception {, +		Method m = AnnotationUtilsTests.class.getDeclaredMethod("synthesizeAnnotationWithAttributeAliasesDifferentValues");, +		Annotation a = synthesizeAnnotation(m.getDeclaredAnnotation(ContextConfig.class));, +		getValue(a);, +	}, +]