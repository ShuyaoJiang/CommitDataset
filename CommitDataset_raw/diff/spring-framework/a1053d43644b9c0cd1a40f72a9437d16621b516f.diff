[+++ b/src/reference/docbook/testing.xml, +        Spring <classname>ApplicationContext</classname>s and, +        <classname>WebApplicationContext</classname>s as well as caching of, +        those contexts. Support for the caching of loaded contexts is, +        important, because startup time can become an issue â€” not because of, +        the overhead of Spring itself, but because the objects instantiated by, +        the Spring container take time to instantiate. For example, a project, +        with 50 to 100 Hibernate mapping files might take 10 to 20 seconds to, +        load the mapping files, and incurring that cost before running every, +        test in every test fixture leads to slower overall test runs that, +        reduce developer productivity.</para>, +            <para><emphasis, +            role="bold"><interfacename>@WebAppConfiguration</interfacename></emphasis></para>, +, +            <para>A class-level annotation that is used to declare that the, +            <interfacename>ApplicationContext</interfacename> loaded for an, +            integration test should be a, +            <interfacename>WebApplicationContext</interfacename>. The mere, +            presence of <interfacename>@WebAppConfiguration</interfacename> on, +            a test class ensures that a, +            <interfacename>WebApplicationContext</interfacename> will be, +            loaded for the test, using the default value of, +            <literal>"file:src/main/webapp"</literal> for the path to the root, +            of the web application (i.e., the <emphasis>resource base, +            path</emphasis>). The resource base path is used behind the scenes, +            to create a <classname>MockServletContext</classname> which serves, +            as the <interfacename>ServletContext</interfacename> for the, +            test's, +            <interfacename>WebApplicationContext</interfacename>.</para>, +, +            <programlisting language="java">@ContextConfiguration, +<emphasis role="bold">@WebAppConfiguration</emphasis>, +public class WebAppTests {, +    <lineannotation>// class body...</lineannotation>, +}</programlisting>, +, +            <para>To override the default, specify a different base resource, +            path via the <emphasis>implicit</emphasis>, +            <interfacename>value</interfacename> attribute. Both, +            <literal>classpath:</literal> and <literal>file:</literal>, +            resource prefixes are supported. If no resource prefix is supplied, +            the path is assumed to be a file system resource.</para>, +, +            <programlisting language="java">@ContextConfiguration, +<emphasis role="bold">@WebAppConfiguration("classpath:test-web-resources")</emphasis>, +public class WebAppTests {, +    <lineannotation>// class body...</lineannotation>, +}</programlisting>, +, +            <para>Note that, +            <interfacename>@WebAppConfiguration</interfacename> must be used, +            in conjunction with, +            <interfacename>@ContextConfiguration</interfacename>, either, +            within a single test class or within a test class hierarchy. See, +            the Javadoc for, +            <interfacename>@WebAppConfiguration</interfacename> for further, +            details.</para>, +          </listitem>, +, +          <listitem>, +            <para>Spring provides four, +            <classname>ServletTestExecutionListener</classname>,, +            Respectively, they support Servlet API mocks for a, +            <interfacename>WebApplicationContext</interfacename>, dependency, +            injection of the test instance, handling of the, +            process resource <varname>locations</varname>, annotated, +            <varname>classes</varname>, or context, +            <varname>initializers</varname>. Furthermore, a, +            <para>Spring provides the following implementations:</para>, +                <para><classname>DelegatingSmartContextLoader</classname>: one, +                of two default loaders which delegates internally to an, +                <para><classname>WebDelegatingSmartContextLoader</classname>:, +                one of two default loaders which delegates internally to an, +                <classname>AnnotationConfigWebContextLoader</classname> or a, +                <classname>GenericXmlWebContextLoader</classname> depending, +                either on the configuration declared for the test class or on, +                the presence of default locations or default configuration, +                classes. A web <interfacename>ContextLoader</interfacename>, +                will only be used if, +                <interfacename>@WebAppConfiguration</interfacename> is present, +                on the test class.</para>, +                <para><classname>AnnotationConfigContextLoader</classname>:, +                loads a standard, +                <interfacename>ApplicationContext</interfacename> from, +                <emphasis>annotated classes</emphasis>.</para>, +              </listitem>, +, +              <listitem>, +                <para><classname>AnnotationConfigWebContextLoader</classname>:, +                loads a <interfacename>WebApplicationContext</interfacename>, +                from <emphasis>annotated classes</emphasis>.</para>, +              </listitem>, +, +              <listitem>, +                <para><classname>GenericXmlContextLoader</classname>: loads a, +                standard <interfacename>ApplicationContext</interfacename>, +                from XML <emphasis>resource locations</emphasis>.</para>, +              </listitem>, +, +              <listitem>]