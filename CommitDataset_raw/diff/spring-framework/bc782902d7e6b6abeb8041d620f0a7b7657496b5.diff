[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +	public Flux<DataBuffer> render(HandlerResult result, MediaType contentType,, +		if (contentType != null) {, +			exchange.getResponse().getHeaders().setContentType(contentType);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +	public Flux<DataBuffer> render(HandlerResult result, MediaType contentType,, +		if (contentType != null) {, +			exchange.getResponse().getHeaders().setContentType(contentType);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/View.java, +	Flux<DataBuffer> render(HandlerResult result, MediaType contentType, ServerWebExchange exchange);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +	public Flux<DataBuffer> render(HandlerResult result, MediaType contentType,, +		if (contentType != null) {, +			exchange.getResponse().getHeaders().setContentType(contentType);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/View.java, +	Flux<DataBuffer> render(HandlerResult result, MediaType contentType, ServerWebExchange exchange);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolverResultHandler.java, +				Flux<DataBuffer> body = ((View) returnValue).render(result, null, exchange);, +							Flux<DataBuffer> body = view.render(result, null, exchange);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +	public Flux<DataBuffer> render(HandlerResult result, MediaType contentType,, +		if (contentType != null) {, +			exchange.getResponse().getHeaders().setContentType(contentType);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/View.java, +	Flux<DataBuffer> render(HandlerResult result, MediaType contentType, ServerWebExchange exchange);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolverResultHandler.java, +				Flux<DataBuffer> body = ((View) returnValue).render(result, null, exchange);, +							Flux<DataBuffer> body = view.render(result, null, exchange);, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/view/ViewResolverResultHandlerTests.java, +		public Flux<DataBuffer> render(HandlerResult result, MediaType mediaType, ServerWebExchange exchange) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +	public Flux<DataBuffer> render(HandlerResult result, MediaType contentType,, +		if (contentType != null) {, +			exchange.getResponse().getHeaders().setContentType(contentType);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/View.java, +	Flux<DataBuffer> render(HandlerResult result, MediaType contentType, ServerWebExchange exchange);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolverResultHandler.java, +				Flux<DataBuffer> body = ((View) returnValue).render(result, null, exchange);, +							Flux<DataBuffer> body = view.render(result, null, exchange);, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/view/ViewResolverResultHandlerTests.java, +		public Flux<DataBuffer> render(HandlerResult result, MediaType mediaType, ServerWebExchange exchange) {, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/view/freemarker/FreeMarkerViewTests.java, +		Flux<DataBuffer> flux = view.render(result, null, this.exchange);]