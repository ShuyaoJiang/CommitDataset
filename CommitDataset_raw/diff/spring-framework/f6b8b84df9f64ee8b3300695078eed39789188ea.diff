[+++ b/spring-context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +	private final Map<AnnotationConverterKey, GenericConverter> cachedPrinters = new ConcurrentHashMap<>(64);, +	private final Map<AnnotationConverterKey, GenericConverter> cachedParsers = new ConcurrentHashMap<>(64);, +, +, +			return (this.fieldType == otherKey.fieldType && this.annotation.equals(otherKey.annotation));, +			return (this.fieldType.hashCode() * 29 + this.annotation.hashCode());, +++ b/spring-context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +	private final Map<AnnotationConverterKey, GenericConverter> cachedPrinters = new ConcurrentHashMap<>(64);, +	private final Map<AnnotationConverterKey, GenericConverter> cachedParsers = new ConcurrentHashMap<>(64);, +, +, +			return (this.fieldType == otherKey.fieldType && this.annotation.equals(otherKey.annotation));, +			return (this.fieldType.hashCode() * 29 + this.annotation.hashCode());, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	private final AnnotatedElementAdapter annotatedElement;, +	 * @since 4.0, +	 * Return the name of this type: the fully qualified class name., +	 * Return the annotations associated with this type descriptor, if any., +		if (this.annotatedElement.isEmpty()) {, +			// Shortcut: AnnotatedElementUtils would have to expect AnnotatedElement.getAnnotations(), +			// to return a copy of the array, whereas we can do it more efficiently here., +			return false;, +		}, +		if (this.annotatedElement.isEmpty()) {, +			// Shortcut: AnnotatedElementUtils would have to expect AnnotatedElement.getAnnotations(), +			// to return a copy of the array, whereas we can do it more efficiently here., +			return null;, +		}, +	public boolean equals(Object other) {, +		if (this == other) {, +		if (!(other instanceof TypeDescriptor)) {, +		TypeDescriptor otherDesc = (TypeDescriptor) other;, +		if (getType() != otherDesc.getType()) {, +		if (!annotationsMatch(otherDesc)) {, +			return ObjectUtils.nullSafeEquals(getElementTypeDescriptor(), otherDesc.getElementTypeDescriptor());, +			return (ObjectUtils.nullSafeEquals(getMapKeyTypeDescriptor(), otherDesc.getMapKeyTypeDescriptor()) &&, +					ObjectUtils.nullSafeEquals(getMapValueTypeDescriptor(), otherDesc.getMapValueTypeDescriptor()));, +	private boolean annotationsMatch(TypeDescriptor otherDesc) {, +		Annotation[] anns = getAnnotations();, +		Annotation[] otherAnns = otherDesc.getAnnotations();, +		if (anns == otherAnns) {, +			return true;, +		}, +		if (anns.length != otherAnns.length) {, +			return false;, +		}, +		if (anns.length > 0) {, +			for (int i = 0; i < anns.length; i++) {, +				if (anns[i] != otherAnns[i]) {, +					return false;, +				}, +			}, +		}, +		return true;, +	}, +, +, +	/**, +	 * Create a new type descriptor for an object., +	 * <p>Use this factory method to introspect a source object before asking the, +	 * conversion system to convert it to some another type., +	 * <p>If the provided object is {@code null}, returns {@code null}, else calls, +	 * {@link #valueOf(Class)} to build a TypeDescriptor from the object's class., +	 * @param source the source object, +	 * @return the type descriptor, +	 */, +	public static TypeDescriptor forObject(Object source) {, +		return (source != null ? valueOf(source.getClass()) : null);, +	}, +, +		public boolean isEmpty() {, +			return ObjectUtils.isEmpty(this.annotations);, +		}, +, +++ b/spring-context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +	private final Map<AnnotationConverterKey, GenericConverter> cachedPrinters = new ConcurrentHashMap<>(64);, +	private final Map<AnnotationConverterKey, GenericConverter> cachedParsers = new ConcurrentHashMap<>(64);, +, +, +			return (this.fieldType == otherKey.fieldType && this.annotation.equals(otherKey.annotation));, +			return (this.fieldType.hashCode() * 29 + this.annotation.hashCode());, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	private final AnnotatedElementAdapter annotatedElement;, +	 * @since 4.0, +	 * Return the name of this type: the fully qualified class name., +	 * Return the annotations associated with this type descriptor, if any., +		if (this.annotatedElement.isEmpty()) {, +			// Shortcut: AnnotatedElementUtils would have to expect AnnotatedElement.getAnnotations(), +			// to return a copy of the array, whereas we can do it more efficiently here., +			return false;, +		}, +		if (this.annotatedElement.isEmpty()) {, +			// Shortcut: AnnotatedElementUtils would have to expect AnnotatedElement.getAnnotations(), +			// to return a copy of the array, whereas we can do it more efficiently here., +			return null;, +		}, +	public boolean equals(Object other) {, +		if (this == other) {, +		if (!(other instanceof TypeDescriptor)) {]