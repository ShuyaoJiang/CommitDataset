[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/TypedStringValue.java, + * Copyright 2002-2009 the original author or authors., +	private String specifiedTypeName;, +, +	/**, +	 * Set the type name as actually specified for this particular value, if any., +	 */, +	public void setSpecifiedTypeName(String specifiedTypeName) {, +		this.specifiedTypeName = specifiedTypeName;, +	}, +, +	/**, +	 * Return the type name as actually specified for this particular value, if any., +	 */, +	public String getSpecifiedTypeName() {, +		return this.specifiedTypeName;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/TypedStringValue.java, + * Copyright 2002-2009 the original author or authors., +	private String specifiedTypeName;, +, +	/**, +	 * Set the type name as actually specified for this particular value, if any., +	 */, +	public void setSpecifiedTypeName(String specifiedTypeName) {, +		this.specifiedTypeName = specifiedTypeName;, +	}, +, +	/**, +	 * Return the type name as actually specified for this particular value, if any., +	 */, +	public String getSpecifiedTypeName() {, +		return this.specifiedTypeName;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionValueResolver.java, + * Copyright 2002-2009 the original author or authors., +import java.lang.reflect.Array;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.StringUtils;, +		else if (value instanceof ManagedArray) {, +			// May need to resolve contained runtime references., +			ManagedArray array = (ManagedArray) value;, +			Class elementType = array.resolvedElementType;, +			if (elementType == null) {, +				String elementTypeName = array.getElementTypeName();, +				if (StringUtils.hasText(elementTypeName)) {, +					try {, +						elementType = ClassUtils.forName(elementTypeName, this.beanFactory.getBeanClassLoader());, +						array.resolvedElementType = elementType;, +					}, +					catch (Throwable ex) {, +						// Improve the message by showing the context., +						throw new BeanCreationException(, +								this.beanDefinition.getResourceDescription(), this.beanName,, +								"Error resolving array type for " + argName, ex);, +					}, +				}, +				else {, +					elementType = Object.class;, +				}, +			}, +			return resolveManagedArray(argName, (List<?>) value, elementType);, +		}, +	 * For each element in the managed array, resolve reference if necessary., +	 */, +	private Object resolveManagedArray(Object argName, List<?> ml, Class elementType) {, +		Object resolved = Array.newInstance(elementType, ml.size());, +		for (int i = 0; i < ml.size(); i++) {, +			Array.set(resolved, i,, +			    resolveValueIfNecessary(, +							argName + " with key " + BeanWrapper.PROPERTY_KEY_PREFIX + i + BeanWrapper.PROPERTY_KEY_SUFFIX,, +							ml.get(i)));, +		}, +		return resolved;, +	}, +, +	/**, +	 * For each element in the managed list, resolve reference if necessary., +	 * For each element in the managed set, resolve reference if necessary., +	 * For each element in the managed map, resolve reference if necessary., +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/TypedStringValue.java, + * Copyright 2002-2009 the original author or authors., +	private String specifiedTypeName;, +, +	/**, +	 * Set the type name as actually specified for this particular value, if any., +	 */, +	public void setSpecifiedTypeName(String specifiedTypeName) {, +		this.specifiedTypeName = specifiedTypeName;, +	}, +, +	/**, +	 * Return the type name as actually specified for this particular value, if any., +	 */, +	public String getSpecifiedTypeName() {, +		return this.specifiedTypeName;, +	}, +]