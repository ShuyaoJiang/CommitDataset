[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/BeanPostProcessor.java, + * Copyright 2002-2015 the original author or authors., +	 * @return the bean instance to use, either the original or a wrapped one;, +	 * if {@code null}, no subsequent BeanPostProcessors will be invoked, +	 * @return the bean instance to use, either the original or a wrapped one;, +	 * if {@code null}, no subsequent BeanPostProcessors will be invoked, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/BeanPostProcessor.java, + * Copyright 2002-2015 the original author or authors., +	 * @return the bean instance to use, either the original or a wrapped one;, +	 * if {@code null}, no subsequent BeanPostProcessors will be invoked, +	 * @return the bean instance to use, either the original or a wrapped one;, +	 * if {@code null}, no subsequent BeanPostProcessors will be invoked, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, +import org.springframework.util.CollectionUtils;, + * Adapter that implements the {@link DisposableBean} and {@link Runnable}, + * interfaces performing various destruction steps on a given bean instance:, +		if (!CollectionUtils.isEmpty(postProcessors)) {, +		if (!CollectionUtils.isEmpty(this.beanPostProcessors)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/BeanPostProcessor.java, + * Copyright 2002-2015 the original author or authors., +	 * @return the bean instance to use, either the original or a wrapped one;, +	 * if {@code null}, no subsequent BeanPostProcessors will be invoked, +	 * @return the bean instance to use, either the original or a wrapped one;, +	 * if {@code null}, no subsequent BeanPostProcessors will be invoked, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, +import org.springframework.util.CollectionUtils;, + * Adapter that implements the {@link DisposableBean} and {@link Runnable}, + * interfaces performing various destruction steps on a given bean instance:, +		if (!CollectionUtils.isEmpty(postProcessors)) {, +		if (!CollectionUtils.isEmpty(this.beanPostProcessors)) {, +++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java, +, +	 * @param value the value to set (may be {@code null}), +	 * <em>target exception</em> of an {@link InvocationTargetException}., +	 * Should only be called if no checked exception is expected to be thrown, +	 * by the target method., +	 * {@link Error} if appropriate; otherwise, throws an {@link IllegalStateException}., +	 * <em>target exception</em> of an {@link InvocationTargetException}., +	 * Should only be called if no checked exception is expected to be thrown, +	 * by the target method., +	 * {@link Error} if appropriate; otherwise, throws an {@link IllegalStateException}., +	 * exception or one of its superclasses, which means that an exception, +	 * of that type can be propagated as-is within a reflective invocation., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/BeanPostProcessor.java, + * Copyright 2002-2015 the original author or authors., +	 * @return the bean instance to use, either the original or a wrapped one;, +	 * if {@code null}, no subsequent BeanPostProcessors will be invoked, +	 * @return the bean instance to use, either the original or a wrapped one;, +	 * if {@code null}, no subsequent BeanPostProcessors will be invoked, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, +import org.springframework.util.CollectionUtils;, + * Adapter that implements the {@link DisposableBean} and {@link Runnable}, + * interfaces performing various destruction steps on a given bean instance:, +		if (!CollectionUtils.isEmpty(postProcessors)) {, +		if (!CollectionUtils.isEmpty(this.beanPostProcessors)) {, +++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java, +, +	 * @param value the value to set (may be {@code null}), +	 * <em>target exception</em> of an {@link InvocationTargetException}., +	 * Should only be called if no checked exception is expected to be thrown, +	 * by the target method., +	 * {@link Error} if appropriate; otherwise, throws an {@link IllegalStateException}., +	 * <em>target exception</em> of an {@link InvocationTargetException}., +	 * Should only be called if no checked exception is expected to be thrown, +	 * by the target method., +	 * {@link Error} if appropriate; otherwise, throws an {@link IllegalStateException}., +	 * exception or one of its superclasses, which means that an exception, +	 * of that type can be propagated as-is within a reflective invocation., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/handler/ConcurrentWebSocketSessionDecorator.java, + * Copyright 2002-2015 the original author or authors., +	private static final Log logger = LogFactory.getLog(ConcurrentWebSocketSessionDecorator.class);]