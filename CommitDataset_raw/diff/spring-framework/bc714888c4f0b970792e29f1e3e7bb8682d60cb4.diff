[+++ b/spring-context/src/main/java/org/springframework/validation/DirectFieldBindingResult.java, + * Copyright 2002-2014 the original author or authors., + * <p>Since Spring 4.1 this implementation is able to traverse nested fields., +++ b/spring-context/src/main/java/org/springframework/validation/DirectFieldBindingResult.java, + * Copyright 2002-2014 the original author or authors., + * <p>Since Spring 4.1 this implementation is able to traverse nested fields., +++ b/spring-context/src/test/java/org/springframework/tests/sample/beans/FieldAccessBean.java, + * Copyright 2002-2014 the original author or authors., +	public FieldAccessBean() {, +		this.spouse = new TestBean();, +	}, +++ b/spring-context/src/main/java/org/springframework/validation/DirectFieldBindingResult.java, + * Copyright 2002-2014 the original author or authors., + * <p>Since Spring 4.1 this implementation is able to traverse nested fields., +++ b/spring-context/src/test/java/org/springframework/tests/sample/beans/FieldAccessBean.java, + * Copyright 2002-2014 the original author or authors., +	public FieldAccessBean() {, +		this.spouse = new TestBean();, +	}, +++ b/spring-context/src/test/java/org/springframework/validation/DataBinderFieldAccessTests.java, + * Copyright 2002-2014 the original author or authors., + * @author Stephane Nicoll, +	public void testedNestedBindingWithDefaultConversionNoErrors() throws Exception {, +		FieldAccessBean rod = new FieldAccessBean();, +		DataBinder binder = new DataBinder(rod, "person");, +		assertTrue(binder.isIgnoreUnknownFields());, +		binder.initDirectFieldAccess();, +		MutablePropertyValues pvs = new MutablePropertyValues();, +		pvs.addPropertyValue(new PropertyValue("spouse.name", "Kerry"));, +		pvs.addPropertyValue(new PropertyValue("spouse.jedi", "on"));, +, +		binder.bind(pvs);, +		binder.close();, +, +		assertEquals("Kerry", rod.getSpouse().getName());, +		assertTrue((rod.getSpouse()).isJedi());, +	}, +]