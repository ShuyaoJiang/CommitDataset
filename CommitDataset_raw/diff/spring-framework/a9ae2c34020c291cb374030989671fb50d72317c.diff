[+++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCache.java, + * Copyright 2002-2017 the original author or authors., +			catch (Throwable ex) {, +				throw new IllegalArgumentException("Failed to serialize cache value '" + userValue +, +						"'. Does it implement Serializable?", ex);, +			catch (Throwable ex) {, +				throw new IllegalArgumentException("Failed to deserialize cache value '" + storeValue + "'", ex);, +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCache.java, + * Copyright 2002-2017 the original author or authors., +			catch (Throwable ex) {, +				throw new IllegalArgumentException("Failed to serialize cache value '" + userValue +, +						"'. Does it implement Serializable?", ex);, +			catch (Throwable ex) {, +				throw new IllegalArgumentException("Failed to deserialize cache value '" + storeValue + "'", ex);, +++ b/spring-jms/src/main/java/org/springframework/jms/config/AbstractJmsListenerEndpoint.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +		if (messageListener == null) {, +			throw new IllegalStateException("Endpoint [" + this + "] must provide a non-null message listener");, +		}, +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCache.java, + * Copyright 2002-2017 the original author or authors., +			catch (Throwable ex) {, +				throw new IllegalArgumentException("Failed to serialize cache value '" + userValue +, +						"'. Does it implement Serializable?", ex);, +			catch (Throwable ex) {, +				throw new IllegalArgumentException("Failed to deserialize cache value '" + storeValue + "'", ex);, +++ b/spring-jms/src/main/java/org/springframework/jms/config/AbstractJmsListenerEndpoint.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +		if (messageListener == null) {, +			throw new IllegalStateException("Endpoint [" + this + "] must provide a non-null message listener");, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/config/JmsListenerEndpointRegistrar.java, + * Copyright 2002-2017 the original author or authors., +			this.mutex = ((ConfigurableBeanFactory) beanFactory).getSingletonMutex();, +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCache.java, + * Copyright 2002-2017 the original author or authors., +			catch (Throwable ex) {, +				throw new IllegalArgumentException("Failed to serialize cache value '" + userValue +, +						"'. Does it implement Serializable?", ex);, +			catch (Throwable ex) {, +				throw new IllegalArgumentException("Failed to deserialize cache value '" + storeValue + "'", ex);, +++ b/spring-jms/src/main/java/org/springframework/jms/config/AbstractJmsListenerEndpoint.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +		if (messageListener == null) {, +			throw new IllegalStateException("Endpoint [" + this + "] must provide a non-null message listener");, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/config/JmsListenerEndpointRegistrar.java, + * Copyright 2002-2017 the original author or authors., +			this.mutex = ((ConfigurableBeanFactory) beanFactory).getSingletonMutex();, +++ b/spring-jms/src/main/java/org/springframework/jms/config/MethodJmsListenerEndpoint.java, + * Copyright 2002-2017 the original author or authors., +	 * Set the {@link BeanFactory} to use to resolve expressions (may be {@code null})., +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCache.java, + * Copyright 2002-2017 the original author or authors., +			catch (Throwable ex) {, +				throw new IllegalArgumentException("Failed to serialize cache value '" + userValue +, +						"'. Does it implement Serializable?", ex);, +			catch (Throwable ex) {, +				throw new IllegalArgumentException("Failed to deserialize cache value '" + storeValue + "'", ex);, +++ b/spring-jms/src/main/java/org/springframework/jms/config/AbstractJmsListenerEndpoint.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +		if (messageListener == null) {, +			throw new IllegalStateException("Endpoint [" + this + "] must provide a non-null message listener");, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/config/JmsListenerEndpointRegistrar.java, + * Copyright 2002-2017 the original author or authors., +			this.mutex = ((ConfigurableBeanFactory) beanFactory).getSingletonMutex();, +++ b/spring-jms/src/main/java/org/springframework/jms/config/MethodJmsListenerEndpoint.java, + * Copyright 2002-2017 the original author or authors., +	 * Set the {@link BeanFactory} to use to resolve expressions (may be {@code null})., +++ b/spring-jms/src/main/java/org/springframework/jms/core/BrowserCallback.java, + * Copyright 2002-2017 the original author or authors., + * <p>To be used with {@link JmsTemplate}'s callback methods that take a, + * {@link BrowserCallback} argument, often implemented as an anonymous, + * inner class or as a lambda expression., +	 * Perform operations on the given {@link javax.jms.Session} and, +	 * {@link javax.jms.QueueBrowser}., +	 * @return a result object from working with the {@code Session}, if any, +	 * (or {@code null} if none), +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCache.java, + * Copyright 2002-2017 the original author or authors., +			catch (Throwable ex) {, +				throw new IllegalArgumentException("Failed to serialize cache value '" + userValue +, +						"'. Does it implement Serializable?", ex);, +			catch (Throwable ex) {, +				throw new IllegalArgumentException("Failed to deserialize cache value '" + storeValue + "'", ex);, +++ b/spring-jms/src/main/java/org/springframework/jms/config/AbstractJmsListenerEndpoint.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +		if (messageListener == null) {, +			throw new IllegalStateException("Endpoint [" + this + "] must provide a non-null message listener");, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/config/JmsListenerEndpointRegistrar.java, + * Copyright 2002-2017 the original author or authors., +			this.mutex = ((ConfigurableBeanFactory) beanFactory).getSingletonMutex();, +++ b/spring-jms/src/main/java/org/springframework/jms/config/MethodJmsListenerEndpoint.java]