[+++ /dev/null, +++ /dev/null, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionGenericConverter.java, +import java.lang.reflect.Array;, +import java.util.Iterator;, +		return sourceType.isArray() || targetType.isArray() || sourceType.isCollection() || targetType.isCollection();	, +		if (isArrayToArray(sourceType, targetType)) {, +			return convertArrayToArray(source, sourceType, targetType);, +		} else if (isArrayToCollection(sourceType, targetType)) {, +			return convertArrayToCollection(source, sourceType, targetType);, +		} else if (isCollectionToCollection(sourceType, targetType)) {, +			return convertCollectionToCollection(source, sourceType, targetType);, +		} else if (isCollectionToArray(sourceType, targetType)) {, +			return convertCollectionToArray(source, sourceType, targetType); , +		} else if (isArrayToObject(sourceType, targetType)) {, +			return convertArrayToObject(source, sourceType, targetType);			, +		} else if (isObjectToArray(sourceType, targetType)) {, +			return convertObjectToArray(source, sourceType, targetType);, +		} else if (isCollectionToObject(sourceType, targetType))  {, +			return convertCollectionToObject(source, sourceType, targetType);, +		} else {, +			return convertObjectToCollection(source, sourceType, targetType);, +	}, +	, +	private boolean isArrayToArray(TypeDescriptor sourceType, TypeDescriptor targetType) {, +		return sourceType.isArray() && targetType.isArray();, +	}, +, +	private Object convertArrayToArray(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +		if (sourceType.isAssignableTo(targetType)) {, +			return source;, +		}, +		TypeDescriptor sourceElementType = sourceType.getElementTypeDescriptor();, +		TypeDescriptor targetElementType = targetType.getElementTypeDescriptor();, +		Object target = Array.newInstance(targetElementType.getType(), Array.getLength(source));, +		GenericConverter converter = conversionService.getConverter(sourceElementType, targetElementType);, +		for (int i = 0; i < Array.getLength(target); i++) {, +			Array.set(target, i, converter.convert(Array.get(source, i), sourceElementType, targetElementType));, +		}, +		return target;		, +	}, +, +	private boolean isArrayToCollection(TypeDescriptor sourceType, TypeDescriptor targetType) {, +		return sourceType.isArray() && targetType.isCollection();, +	}, +, +	private Object convertArrayToCollection(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +		int length = Array.getLength(source);, +		Collection collection = CollectionFactory.createCollection(targetType.getType(), length);, +		TypeDescriptor sourceElementType = sourceType.getElementTypeDescriptor();, +		TypeDescriptor targetElementType = targetType.getElementTypeDescriptor();, +		if (targetElementType == TypeDescriptor.NULL || sourceElementType.isAssignableTo(targetElementType)) {, +			for (int i = 0; i < length; i++) {, +				collection.add(Array.get(source, i));, +			}, +		} else {, +			GenericConverter converter = conversionService.getConverter(sourceElementType, targetElementType);, +			for (int i = 0; i < length; i++) {, +				collection.add(converter.convert(Array.get(source, i), sourceElementType, targetElementType));, +			}, +		}, +		return collection;, +	}, +, +	private boolean isCollectionToArray(TypeDescriptor sourceType, TypeDescriptor targetType) {, +		return sourceType.isCollection() && targetType.isArray();, +	}, +, +	private Object convertCollectionToArray(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +		Collection sourceCollection = (Collection) source;, +		TypeDescriptor targetElementType = targetType.getElementTypeDescriptor();, +		Object array = Array.newInstance(targetElementType.getType(), sourceCollection.size());, +		int i = 0;		, +			for (Iterator it = sourceCollection.iterator(); it.hasNext(); i++) {, +				Array.set(array, i, it.next());, +			}, +		} else {, +			GenericConverter converter = conversionService.getConverter(sourceElementType, targetElementType);, +			for (Iterator it = sourceCollection.iterator(); it.hasNext(); i++) {, +				Array.set(array, i, converter.convert(it.next(), sourceElementType, targetElementType));, +			}, +		}, +		return array;, +	}, +	, +	private boolean isCollectionToCollection(TypeDescriptor sourceType, TypeDescriptor targetType) {, +		return sourceType.isCollection() && targetType.isCollection();, +	}, +, +	public Object convertCollectionToCollection(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +		Collection sourceCollection = (Collection) source;, +		TypeDescriptor sourceElementType = sourceType.getElementTypeDescriptor();, +		if (sourceElementType == TypeDescriptor.NULL) {, +			sourceElementType = getElementType(sourceCollection);, +		}, +		TypeDescriptor targetElementType = targetType.getElementTypeDescriptor();, +		if (sourceElementType == TypeDescriptor.NULL || sourceElementType.isAssignableTo(targetElementType)) {, +			if (sourceType.isAssignableTo(targetType)) {, +				return source;, +			} else {]