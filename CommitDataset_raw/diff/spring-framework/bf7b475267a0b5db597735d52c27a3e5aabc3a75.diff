[+++ b/spring-core/src/main/java/org/springframework/util/SocketUtils.java, + * Copyright 2002-2016 the original author or authors., +	private enum SocketType {, +					ServerSocket serverSocket = ServerSocketFactory.getDefault().createServerSocket(, +							port, 1, InetAddress.getByName("localhost"));, +			return minPort + random.nextInt(portRange + 1);, +			Assert.isTrue(maxPort >= minPort, "'maxPort' must be greater than or equals 'minPort'");, +							"Could not find an available %s port in the range [%d, %d] after %d attempts",, +							name(), minPort, maxPort, searchCounter));, +			SortedSet<Integer> availablePorts = new TreeSet<Integer>();, +			while ((++attemptCount <= numRequested + 100) && availablePorts.size() < numRequested) {, +						"Could not find %d available %s ports in the range [%d, %d]",, +						numRequested, name(), minPort, maxPort));, +++ b/spring-core/src/main/java/org/springframework/util/SocketUtils.java, + * Copyright 2002-2016 the original author or authors., +	private enum SocketType {, +					ServerSocket serverSocket = ServerSocketFactory.getDefault().createServerSocket(, +							port, 1, InetAddress.getByName("localhost"));, +			return minPort + random.nextInt(portRange + 1);, +			Assert.isTrue(maxPort >= minPort, "'maxPort' must be greater than or equals 'minPort'");, +							"Could not find an available %s port in the range [%d, %d] after %d attempts",, +							name(), minPort, maxPort, searchCounter));, +			SortedSet<Integer> availablePorts = new TreeSet<Integer>();, +			while ((++attemptCount <= numRequested + 100) && availablePorts.size() < numRequested) {, +						"Could not find %d available %s ports in the range [%d, %d]",, +						numRequested, name(), minPort, maxPort));, +++ b/spring-core/src/test/java/org/springframework/util/SocketUtilsTests.java, + * Copyright 2002-2016 the original author or authors., +	// TCP, +			SocketUtils.findAvailableTcpPort(port, port);, +	// UDP, +			// will only look for the exact port, +			SocketUtils.findAvailableUdpPort(port, port);, +, +	// Helpers, +, +	private void findAvailableTcpPorts(int numRequested) {, +		SortedSet<Integer> ports = SocketUtils.findAvailableTcpPorts(numRequested);, +		assertAvailablePorts(ports, numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX);, +	}, +, +	private void findAvailableTcpPorts(int numRequested, int minPort, int maxPort) {, +		SortedSet<Integer> ports = SocketUtils.findAvailableTcpPorts(numRequested, minPort, maxPort);, +		assertAvailablePorts(ports, numRequested, minPort, maxPort);, +	}, +, +	private void assertPortInRange(int port, int minPort, int maxPort) {, +		assertTrue("port [" + port + "] >= " + minPort, port >= minPort);, +		assertTrue("port [" + port + "] <= " + maxPort, port <= maxPort);, +	}, +, +	private void assertAvailablePorts(SortedSet<Integer> ports, int numRequested, int minPort, int maxPort) {, +		assertEquals("number of ports requested", numRequested, ports.size());, +		for (int port : ports) {, +			assertPortInRange(port, minPort, maxPort);, +		}, +	}]