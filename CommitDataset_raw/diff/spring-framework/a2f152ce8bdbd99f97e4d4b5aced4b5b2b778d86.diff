[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java, +	 * <p>Note: if you expect an actual annotation, invoke, +	 * {@link #getAnnotation(String, Class)} instead., +	 * Get the annotation of type {@code annotationType} stored under the, +	 * specified {@code attributeName}., +	 * @param attributeName the name of the attribute to get; never, +	 * {@code null} or empty, +	 * @param annotationType the expected annotation type; never {@code null}, +	 * @return the annotation, +	 * @throws IllegalArgumentException if the attribute does not exist or, +	 * if it is not of the expected type, +	 * @since 4.2, +	 */, +	public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType) {, +		return doGet(attributeName, annotationType);, +	}, +, +	/**, +	 * <p>Note: if you expect an actual array of annotations, invoke, +	 * {@link #getAnnotationArray(String, Class)} instead., +	 * Get the array of type {@code annotationType} stored under the specified, +	 * {@code attributeName}., +	 * <p>If the value stored under the specified {@code attributeName} is, +	 * an {@code Annotation}, it will be wrapped in a single-element array, +	 * before returning it., +	 * @param attributeName the name of the attribute to get; never, +	 * {@code null} or empty, +	 * @param annotationType the expected annotation type; never {@code null}, +	 * @return the annotation array, +	 * @throws IllegalArgumentException if the attribute does not exist or, +	 * if it is not of the expected type, +	 * @since 4.2, +	 */, +	@SuppressWarnings("unchecked"), +	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType) {, +		Object array = Array.newInstance(annotationType, 0);, +		return (A[]) doGet(attributeName, array.getClass());, +	}, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java, +	 * <p>Note: if you expect an actual annotation, invoke, +	 * {@link #getAnnotation(String, Class)} instead., +	 * Get the annotation of type {@code annotationType} stored under the, +	 * specified {@code attributeName}., +	 * @param attributeName the name of the attribute to get; never, +	 * {@code null} or empty, +	 * @param annotationType the expected annotation type; never {@code null}, +	 * @return the annotation, +	 * @throws IllegalArgumentException if the attribute does not exist or, +	 * if it is not of the expected type, +	 * @since 4.2, +	 */, +	public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType) {, +		return doGet(attributeName, annotationType);, +	}, +, +	/**, +	 * <p>Note: if you expect an actual array of annotations, invoke, +	 * {@link #getAnnotationArray(String, Class)} instead., +	 * Get the array of type {@code annotationType} stored under the specified, +	 * {@code attributeName}., +	 * <p>If the value stored under the specified {@code attributeName} is, +	 * an {@code Annotation}, it will be wrapped in a single-element array, +	 * before returning it., +	 * @param attributeName the name of the attribute to get; never, +	 * {@code null} or empty, +	 * @param annotationType the expected annotation type; never {@code null}, +	 * @return the annotation array, +	 * @throws IllegalArgumentException if the attribute does not exist or, +	 * if it is not of the expected type, +	 * @since 4.2, +	 */, +	@SuppressWarnings("unchecked"), +	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType) {, +		Object array = Array.newInstance(annotationType, 0);, +		return (A[]) doGet(attributeName, array.getClass());, +	}, +, +	/**, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationAttributesTests.java, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +, +	public void singleElementToSingleElementArrayConversionSupport() throws Exception {, +		Filter filter = FilteredClass.class.getAnnotation(Filter.class);, +, +		attributes.put("filters", filter);, +, +, +		Filter[] filters = attributes.getAnnotationArray("filters", Filter.class);, +		assertNotNull(filters);, +		assertThat(filters.length, is(1));, +		assertThat(filters[0].pattern(), equalTo("foo"));, +	}, +, +	@Test, +	public void nestedAnnotations() throws Exception {, +		Filter filter = FilteredClass.class.getAnnotation(Filter.class);, +]