[+++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/xmlbeans/XmlBeansMarshaller.java, +import java.io.FilterInputStream;, +import java.lang.ref.WeakReference;, +import java.nio.CharBuffer;, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +			InputStream nonClosingInputStream = new NonClosingInputStream(inputStream);, +			XmlObject object = XmlObject.Factory.parse(nonClosingInputStream, getXmlOptions());, +			Reader nonClosingReader = new NonClosingReader(reader);, +			XmlObject object = XmlObject.Factory.parse(nonClosingReader, getXmlOptions());, +	/**, +	 * See SPR-7034, +	 */, +	private static class NonClosingInputStream extends InputStream {, +, +		private final WeakReference<InputStream> in;, +, +		private NonClosingInputStream(InputStream in) {, +			this.in = new WeakReference<InputStream>(in);, +		}, +, +		private InputStream getInputStream() {, +			return this.in.get();, +		}, +		, +		@Override, +		public int read() throws IOException {, +			InputStream in = getInputStream();, +			return in != null ? in.read() : -1;, +		}, +, +		@Override, +		public int read(byte[] b) throws IOException {, +			InputStream in = getInputStream();, +			return in != null ? in.read(b) : -1;, +		}, +, +		@Override, +		public int read(byte[] b, int off, int len) throws IOException {, +			InputStream in = getInputStream();, +			return in != null ? in.read(b, off, len) : -1;, +		}, +, +		@Override, +		public long skip(long n) throws IOException {, +			InputStream in = getInputStream();, +			return in != null ? in.skip(n) : 0;, +		}, +, +		@Override, +		public boolean markSupported() {, +			InputStream in = getInputStream();, +			return in != null && in.markSupported();, +		}, +, +		@Override, +		public void mark(int readlimit) {, +			InputStream in = getInputStream();, +			if (in != null) {, +				in.mark(readlimit);, +			}, +		}, +, +		@Override, +		public void reset() throws IOException {, +			InputStream in = getInputStream();, +			if (in != null) {, +				in.reset();, +			}, +		}, +, +		@Override, +		public int available() throws IOException {, +			InputStream in = getInputStream();, +			return in != null ? in.available() : 0;, +		}, +, +		@Override, +		public void close() throws IOException {, +			InputStream in = getInputStream();, +			if(in != null) {, +			  this.in.clear();, +			}, +		}, +	}, +, +	private static class NonClosingReader extends Reader {, +, +		private final WeakReference<Reader> reader;, +, +		private NonClosingReader(Reader reader) {, +			this.reader = new WeakReference<Reader>(reader);, +		}, +, +		private Reader getReader() {, +			return this.reader.get();, +		}, +, +		@Override, +		public int read(CharBuffer target) throws IOException {]