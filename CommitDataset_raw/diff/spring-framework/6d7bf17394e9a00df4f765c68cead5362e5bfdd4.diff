[+++ b/org.springframework.jms/src/main/resources/org/springframework/jms/config/spring-jms-2.5.xsd, +++ b/org.springframework.jms/src/main/resources/org/springframework/jms/config/spring-jms-2.5.xsd, +++ b/org.springframework.jms/src/main/resources/org/springframework/jms/config/spring-jms-3.0.xsd, +++ b/org.springframework.jms/src/main/resources/org/springframework/jms/config/spring-jms-2.5.xsd, +++ b/org.springframework.jms/src/main/resources/org/springframework/jms/config/spring-jms-3.0.xsd, +++ b/org.springframework.jms/src/test/java/org/springframework/jms/config/JmsNamespaceHandlerTests.java, + * Copyright 2002-2009 the original author or authors., +		Map<String, DefaultMessageListenerContainer> containers = context.getBeansOfType(DefaultMessageListenerContainer.class);, +		ConnectionFactory defaultConnectionFactory = context.getBean(DEFAULT_CONNECTION_FACTORY, ConnectionFactory.class);, +		ConnectionFactory explicitConnectionFactory = context.getBean(EXPLICIT_CONNECTION_FACTORY, ConnectionFactory.class);, +		for (DefaultMessageListenerContainer container : containers.values()) {, +		TestBean testBean1 = context.getBean("testBean1", TestBean.class);, +		TestBean testBean2 = context.getBean("testBean2", TestBean.class);, +		TestMessageListener testBean3 = context.getBean("testBean3", TestMessageListener.class);, +		DefaultMessageListenerContainer container = this.context.getBean(containerBeanName, DefaultMessageListenerContainer.class);, +			assertNotNull("CompositeComponentDefinition '" + compDef.getName()+ "' has no source attachment", compDef.getSource());, +		for (BeanDefinition beanDef : beanDefs) {, +			assertNotNull("BeanDefinition has no source attachment", beanDef.getSource());, +		private Set<ComponentDefinition> registeredComponents;, +		public ToolingTestApplicationContext(String path, Class clazz) {, +		protected void initBeanDefinitionReader(XmlBeanDefinitionReader beanDefinitionReader) {, +			this.registeredComponents = new HashSet<ComponentDefinition>();, +			beanDefinitionReader.setEventListener(new StoringReaderEventListener(this.registeredComponents));, +			for (ComponentDefinition cd : this.registeredComponents) {, +					ComponentDefinition[] innerCds = ((CompositeComponentDefinition) cd).getNestedComponents();, +					for (ComponentDefinition innerCd : innerCds) {, +						if (innerCd.getName().equals(name)) {, +		public Iterator<ComponentDefinition> getRegisteredComponents() {, +			return this.registeredComponents.iterator();, +		protected final Set<ComponentDefinition> registeredComponents;, +		public StoringReaderEventListener(Set<ComponentDefinition> registeredComponents) {, +++ b/org.springframework.jms/src/main/resources/org/springframework/jms/config/spring-jms-2.5.xsd, +++ b/org.springframework.jms/src/main/resources/org/springframework/jms/config/spring-jms-3.0.xsd, +++ b/org.springframework.jms/src/test/java/org/springframework/jms/config/JmsNamespaceHandlerTests.java, + * Copyright 2002-2009 the original author or authors., +		Map<String, DefaultMessageListenerContainer> containers = context.getBeansOfType(DefaultMessageListenerContainer.class);, +		ConnectionFactory defaultConnectionFactory = context.getBean(DEFAULT_CONNECTION_FACTORY, ConnectionFactory.class);, +		ConnectionFactory explicitConnectionFactory = context.getBean(EXPLICIT_CONNECTION_FACTORY, ConnectionFactory.class);, +		for (DefaultMessageListenerContainer container : containers.values()) {, +		TestBean testBean1 = context.getBean("testBean1", TestBean.class);, +		TestBean testBean2 = context.getBean("testBean2", TestBean.class);, +		TestMessageListener testBean3 = context.getBean("testBean3", TestMessageListener.class);, +		DefaultMessageListenerContainer container = this.context.getBean(containerBeanName, DefaultMessageListenerContainer.class);, +			assertNotNull("CompositeComponentDefinition '" + compDef.getName()+ "' has no source attachment", compDef.getSource());, +		for (BeanDefinition beanDef : beanDefs) {, +			assertNotNull("BeanDefinition has no source attachment", beanDef.getSource());, +		private Set<ComponentDefinition> registeredComponents;, +		public ToolingTestApplicationContext(String path, Class clazz) {, +		protected void initBeanDefinitionReader(XmlBeanDefinitionReader beanDefinitionReader) {, +			this.registeredComponents = new HashSet<ComponentDefinition>();, +			beanDefinitionReader.setEventListener(new StoringReaderEventListener(this.registeredComponents));, +			for (ComponentDefinition cd : this.registeredComponents) {, +					ComponentDefinition[] innerCds = ((CompositeComponentDefinition) cd).getNestedComponents();, +					for (ComponentDefinition innerCd : innerCds) {, +						if (innerCd.getName().equals(name)) {, +		public Iterator<ComponentDefinition> getRegisteredComponents() {, +			return this.registeredComponents.iterator();, +		protected final Set<ComponentDefinition> registeredComponents;, +		public StoringReaderEventListener(Set<ComponentDefinition> registeredComponents) {, +++ /dev/null, +++ b/org.springframework.jms/src/main/resources/org/springframework/jms/config/spring-jms-2.5.xsd, +++ b/org.springframework.jms/src/main/resources/org/springframework/jms/config/spring-jms-3.0.xsd, +++ b/org.springframework.jms/src/test/java/org/springframework/jms/config/JmsNamespaceHandlerTests.java, + * Copyright 2002-2009 the original author or authors., +		Map<String, DefaultMessageListenerContainer> containers = context.getBeansOfType(DefaultMessageListenerContainer.class);, +		ConnectionFactory defaultConnectionFactory = context.getBean(DEFAULT_CONNECTION_FACTORY, ConnectionFactory.class);, +		ConnectionFactory explicitConnectionFactory = context.getBean(EXPLICIT_CONNECTION_FACTORY, ConnectionFactory.class);, +		for (DefaultMessageListenerContainer container : containers.values()) {, +		TestBean testBean1 = context.getBean("testBean1", TestBean.class);, +		TestBean testBean2 = context.getBean("testBean2", TestBean.class);, +		TestMessageListener testBean3 = context.getBean("testBean3", TestMessageListener.class);, +		DefaultMessageListenerContainer container = this.context.getBean(containerBeanName, DefaultMessageListenerContainer.class);, +			assertNotNull("CompositeComponentDefinition '" + compDef.getName()+ "' has no source attachment", compDef.getSource());, +		for (BeanDefinition beanDef : beanDefs) {, +			assertNotNull("BeanDefinition has no source attachment", beanDef.getSource());, +		private Set<ComponentDefinition> registeredComponents;, +		public ToolingTestApplicationContext(String path, Class clazz) {, +		protected void initBeanDefinitionReader(XmlBeanDefinitionReader beanDefinitionReader) {, +			this.registeredComponents = new HashSet<ComponentDefinition>();, +			beanDefinitionReader.setEventListener(new StoringReaderEventListener(this.registeredComponents));, +			for (ComponentDefinition cd : this.registeredComponents) {, +					ComponentDefinition[] innerCds = ((CompositeComponentDefinition) cd).getNestedComponents();, +					for (ComponentDefinition innerCd : innerCds) {, +						if (innerCd.getName().equals(name)) {, +		public Iterator<ComponentDefinition> getRegisteredComponents() {, +			return this.registeredComponents.iterator();, +		protected final Set<ComponentDefinition> registeredComponents;, +		public StoringReaderEventListener(Set<ComponentDefinition> registeredComponents) {, +++ /dev/null, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/RequestMappingInfoComparatorTests.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software]