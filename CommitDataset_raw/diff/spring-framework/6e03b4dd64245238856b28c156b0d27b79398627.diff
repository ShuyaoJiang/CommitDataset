[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, + * support mapping requests to {@link HandlerMethod}s rather than to handlers., + * , + * <p>Each {@link HandlerMethod} is registered with a unique key. Subclasses define the key type and how to create it, + * for a given handler method. Keys represent conditions for matching a handler method to a request. , + *, + * <p>Subclasses must also define how to create a key for an incoming request. The resulting key is used to perform , + * a {@link HandlerMethod} lookup possibly resulting in a direct match. However, when a map lookup is insufficient, , + * the keys of all handler methods are iterated and subclasses are allowed to make an exhaustive check of key , + * conditions against the request., + * , + * <p>Since there can be more than one matching key for a request, subclasses must define a comparator for sorting, + * the keys of matching handler methods in order to find the most specific match., + *, + * @param <T> A unique key for the registration of mapped {@link HandlerMethod}s representing the conditions to, + * match a handler method to a request., +	/**, +	 * Detect and register handler methods for the specified handler., +	 */, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, + * support mapping requests to {@link HandlerMethod}s rather than to handlers., + * , + * <p>Each {@link HandlerMethod} is registered with a unique key. Subclasses define the key type and how to create it, + * for a given handler method. Keys represent conditions for matching a handler method to a request. , + *, + * <p>Subclasses must also define how to create a key for an incoming request. The resulting key is used to perform , + * a {@link HandlerMethod} lookup possibly resulting in a direct match. However, when a map lookup is insufficient, , + * the keys of all handler methods are iterated and subclasses are allowed to make an exhaustive check of key , + * conditions against the request., + * , + * <p>Since there can be more than one matching key for a request, subclasses must define a comparator for sorting, + * the keys of matching handler methods in order to find the most specific match., + *, + * @param <T> A unique key for the registration of mapped {@link HandlerMethod}s representing the conditions to, + * match a handler method to a request., +	/**, +	 * Detect and register handler methods for the specified handler., +	 */, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestKey.java, + * Contains a set of conditions to match to a given request such as URL patterns, HTTP methods, request , + * parameters and headers. , + * , + * <p>A {@link RequestKey} can be combined with another {@link RequestKey} resulting in a new {@link RequestKey}, + * with conditions from both (see {@link #combine(RequestKey, PathMatcher)})., + * , + * <p>A {@link RequestKey} can be matched to a request resulting in a new {@link RequestKey} with the subset of, + * conditions relevant to the request (see {@link #getMatchingKey(HttpServletRequest, PathMatcher, UrlPathHelper)})., + * @since 3.1, +	/**, +	 * Creates a new {@code RequestKey} instance with the given URL patterns and HTTP methods., +	 * , +	 * <p>Package protected for testing purposes., +	 */, +	 * Creates a new {@code RequestKey} instance with a full set of conditions., +	 * <p>Package protected for testing purposes., +	 * Combines this {@code RequestKey} with another as follows: , +	 * <ul>, +	 * <li>URL patterns:, +	 * 	<ul>, +	 * 	  <li>If both keys have path patterns combine them according to the rules of the given {@link PathMatcher}., +	 * 	  <li>If either key contains path patterns but not both use only what is available., +	 * 	  <li>If neither key contains path patterns use "/"., +	 * 	</ul>, +	 * <li>HTTP methods are combined as union of all HTTP methods listed in both keys., +	 * <li>Request parameter are combined into a logical AND., +	 * <li>Request header are combined into a logical AND., +	 * <li>Consumes .. TODO, +	 * </ul>, +	 * @param methodKey the key to combine with, +	 * @return a new request key containing conditions from both keys, +	 * Returns a new {@code RequestKey} that contains all conditions of this key that are relevant to the request., +	 * <ul>, +	 * <li>The list of URL path patterns is trimmed to contain the patterns that match the URL with matching patterns , +	 * sorted via {@link PathMatcher#getPatternComparator(String)}. , +	 * <li>The list of HTTP methods is trimmed to contain only the method of the request. , +	 * <li>Request parameter and request header conditions are included in full. , +	 * <li>The list of consumes conditions is trimmed and sorted to match the request "Content-Type" header., +	 * </ul>   , +	 * @param request the current request, +	 * @param pathMatcher to check for matching patterns, +	 * @param urlPathHelper to derive the lookup path for the request, +	 * @return a new request key that contains all matching attributes, or {@code null} if not all conditions match, +				Set<RequestMethod> matchingMethods = getMatchingMethod(request);, +	private Set<RequestMethod> getMatchingMethod(HttpServletRequest request) {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, + * support mapping requests to {@link HandlerMethod}s rather than to handlers., + * , + * <p>Each {@link HandlerMethod} is registered with a unique key. Subclasses define the key type and how to create it, + * for a given handler method. Keys represent conditions for matching a handler method to a request. , + *, + * <p>Subclasses must also define how to create a key for an incoming request. The resulting key is used to perform , + * a {@link HandlerMethod} lookup possibly resulting in a direct match. However, when a map lookup is insufficient, , + * the keys of all handler methods are iterated and subclasses are allowed to make an exhaustive check of key , + * conditions against the request., + * , + * <p>Since there can be more than one matching key for a request, subclasses must define a comparator for sorting, + * the keys of matching handler methods in order to find the most specific match., + *, + * @param <T> A unique key for the registration of mapped {@link HandlerMethod}s representing the conditions to, + * match a handler method to a request.]