[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, + * Abstract base class for {@link HandlerMapping} implementations that define a, + * mapping between a request and a {@link HandlerMethod}., + * <p>For each registered handler method, a unique mapping is maintained with , + * subclasses defining the details of the mapping type {@code <T>}.  , + * , + * @param <T> The mapping for a {@link HandlerMethod} containing the conditions, + * needed to match the handler method to incoming request. , +	private final MultiValueMap<String, T> urlMap = new LinkedMultiValueMap<String, T>();, +	 * Return a map with all handler methods and their mappings., +	 * ApplicationContext initialization and handler method detection., +	 * Scan beans in the ApplicationContext, detect and register handler methods., +	 * @see #isHandler(Class), +	 * @see #getMappingForMethod(Method, Class), +	 * @see #handlerMethodsInitialized(Map), +	 * Whether the given type is a handler with handler methods., +	 * @param beanType the type of the bean being checked, +	 * @return "true" if this a handler type, "false" otherwise., +	 * Invoked after all handler methods have been detected., +	 * @param handlerMethods a read-only map with handler methods and mappings., +	 * Look for handler methods in a handler., +	 * Provide the mapping for a handler method. A method for which no , +	 * mapping can be provided is not a handler method., +	 * @param method the method to provide a mapping for, +	 * @param handlerType the handler type, possibly a sub-type of the method's, +	 * declaring class, +	 * Register a handler method and its unique mapping., +	 * @param handler the bean name of the handler or the handler instance, +	 * @throws IllegalStateException if another method was already registered , +	 * under the same mapping, +	 * Extract and return the URL paths contained in a mapping. , +	/**, +	 * Look up a handler method for the given request., +	 */, +	 * Look up the best-matching handler method for the current request., +	 * If multiple matches are found, the best match is selected., +	 * @param lookupPath mapping lookup path within the current servlet mapping, +	 * @param request the current request, +	 * @return the best-matching handler method, or {@code null} if no match, +	 * @see #handleMatch(Object, String, HttpServletRequest), +	 * @see #handleNoMatch(Set, String, HttpServletRequest), +	 * Check if a mapping matches the current request and return a (potentially , +	 * new) mapping with conditions relevant to the current request., +	 * @param mapping the mapping to get a match for, +	 * @param request the current HTTP servlet request, +	 * @return the match, or {@code null} if the mapping doesn't match, +	 */, +	protected abstract T getMatchingMapping(T mapping, HttpServletRequest request);, +, +	/**, +	 * Return a comparator for sorting matching mappings., +	 * The returned comparator should sort 'better' matches higher., +	 * @param request the current request, +	 * @return the comparator, never {@code null}, +	 */, +	protected abstract Comparator<T> getMappingComparator(HttpServletRequest request);, +, +	/**, +	 * Invoked when a matching mapping is found., +	 * @param mapping the matching mapping , +	 * @param lookupPath mapping lookup path within the current servlet mapping, +	 * Invoked when no matching mapping is not found., +	 * @param mappings all registered mappings, +	 * @param lookupPath mapping lookup path within the current servlet mapping, +	 * @param request the current request, +	/**, +	 * A temporary container for a mapping matched to a request., +	 */, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, + * Abstract base class for {@link HandlerMapping} implementations that define a, + * mapping between a request and a {@link HandlerMethod}., + * <p>For each registered handler method, a unique mapping is maintained with , + * subclasses defining the details of the mapping type {@code <T>}.  , + * , + * @param <T> The mapping for a {@link HandlerMethod} containing the conditions, + * needed to match the handler method to incoming request. , +	private final MultiValueMap<String, T> urlMap = new LinkedMultiValueMap<String, T>();, +	 * Return a map with all handler methods and their mappings., +	 * ApplicationContext initialization and handler method detection., +	 * Scan beans in the ApplicationContext, detect and register handler methods., +	 * @see #isHandler(Class), +	 * @see #getMappingForMethod(Method, Class), +	 * @see #handlerMethodsInitialized(Map), +	 * Whether the given type is a handler with handler methods., +	 * @param beanType the type of the bean being checked, +	 * @return "true" if this a handler type, "false" otherwise., +	 * Invoked after all handler methods have been detected., +	 * @param handlerMethods a read-only map with handler methods and mappings., +	 * Look for handler methods in a handler., +	 * Provide the mapping for a handler method. A method for which no , +	 * mapping can be provided is not a handler method., +	 * @param method the method to provide a mapping for, +	 * @param handlerType the handler type, possibly a sub-type of the method's, +	 * declaring class, +	 * Register a handler method and its unique mapping., +	 * @param handler the bean name of the handler or the handler instance, +	 * @throws IllegalStateException if another method was already registered , +	 * under the same mapping, +	 * Extract and return the URL paths contained in a mapping. , +	/**]