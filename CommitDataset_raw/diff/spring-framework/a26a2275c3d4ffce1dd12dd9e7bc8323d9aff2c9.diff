[+++ b/org.springframework.context/src/main/java/org/springframework/jmx/access/MBeanClientInterceptor.java, + * Copyright 2002-2009 the original author or authors., +				if (JmxUtils.isMXBeanSupportAvailable()) {, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/access/MBeanClientInterceptor.java, + * Copyright 2002-2009 the original author or authors., +				if (JmxUtils.isMXBeanSupportAvailable()) {, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/support/JmxUtils.java, + * Copyright 2002-2009 the original author or authors., +				Boolean checkResult = MXBeanChecker.evaluateMXBeanAnnotation(iface);, +	/**, +	 * Check whether MXBean support is available, i.e. whether we're running, +	 * on Java 6 or above., +	 * @return <code>true</code> if available; <code>false</code> otherwise, +	 */, +	public static boolean isMXBeanSupportAvailable() {, +		return mxBeanAnnotationAvailable;, +	}, +, +		public static Boolean evaluateMXBeanAnnotation(Class<?> iface) {, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/access/MBeanClientInterceptor.java, + * Copyright 2002-2009 the original author or authors., +				if (JmxUtils.isMXBeanSupportAvailable()) {, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/support/JmxUtils.java, + * Copyright 2002-2009 the original author or authors., +				Boolean checkResult = MXBeanChecker.evaluateMXBeanAnnotation(iface);, +	/**, +	 * Check whether MXBean support is available, i.e. whether we're running, +	 * on Java 6 or above., +	 * @return <code>true</code> if available; <code>false</code> otherwise, +	 */, +	public static boolean isMXBeanSupportAvailable() {, +		return mxBeanAnnotationAvailable;, +	}, +, +		public static Boolean evaluateMXBeanAnnotation(Class<?> iface) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/CollectionFactory.java, +import org.springframework.util.ClassUtils;, +	private static final String NAVIGABLE_SET_CLASS_NAME = "java.util.NavigableSet";, +, +	private static final String NAVIGABLE_MAP_CLASS_NAME = "java.util.NavigableMap";, +, +, +		// Standard collection interfaces, +, +		// New Java 6 collection interfaces, +		try {, +			approximableCollectionTypes.add(ClassUtils.forName(NAVIGABLE_SET_CLASS_NAME, CollectionFactory.class.getClassLoader()));, +			approximableMapTypes.add(ClassUtils.forName(NAVIGABLE_MAP_CLASS_NAME, CollectionFactory.class.getClassLoader()));, +		catch (ClassNotFoundException ex) {, +			// not running on Java 6 or above..., +		}, +, +		// Common concrete collection classes, +, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/access/MBeanClientInterceptor.java, + * Copyright 2002-2009 the original author or authors., +				if (JmxUtils.isMXBeanSupportAvailable()) {, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/support/JmxUtils.java, + * Copyright 2002-2009 the original author or authors., +				Boolean checkResult = MXBeanChecker.evaluateMXBeanAnnotation(iface);, +	/**, +	 * Check whether MXBean support is available, i.e. whether we're running, +	 * on Java 6 or above., +	 * @return <code>true</code> if available; <code>false</code> otherwise, +	 */, +	public static boolean isMXBeanSupportAvailable() {, +		return mxBeanAnnotationAvailable;, +	}, +, +		public static Boolean evaluateMXBeanAnnotation(Class<?> iface) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/CollectionFactory.java, +import org.springframework.util.ClassUtils;, +	private static final String NAVIGABLE_SET_CLASS_NAME = "java.util.NavigableSet";, +, +	private static final String NAVIGABLE_MAP_CLASS_NAME = "java.util.NavigableMap";, +, +, +		// Standard collection interfaces, +, +		// New Java 6 collection interfaces, +		try {, +			approximableCollectionTypes.add(ClassUtils.forName(NAVIGABLE_SET_CLASS_NAME, CollectionFactory.class.getClassLoader()));, +			approximableMapTypes.add(ClassUtils.forName(NAVIGABLE_MAP_CLASS_NAME, CollectionFactory.class.getClassLoader()));, +		catch (ClassNotFoundException ex) {, +			// not running on Java 6 or above..., +		}, +, +		// Common concrete collection classes, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/JdkVersion.java, + * Copyright 2002-2009 the original author or authors., + * Internal helper class used to find the Java/JVM version, + * <p>Note that Spring requires JVM 1.5 or higher, as of Spring 3.0., +		if (javaVersion.contains("1.7.")) {, +		else if (javaVersion.contains("1.6.")) {, +, +	 * @deprecated as of Spring 3.0, in favor of reflective checks for, +	 * the specific Java 1.6 classes of interest, +	@Deprecated, +		return (majorJavaVersion >= JAVA_16);]