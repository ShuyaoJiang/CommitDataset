[+++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/SpelMapper.java, +import org.springframework.core.GenericTypeResolver;, +	 * The source and target types are determined by introspecting the parameterized types on the implementation's Mapper generic interface., +	 * @param nestedMapper the nested mapper, +	 */, +	public void addNestedMapper(Mapper<?, ?> nestedMapper) {, +		Class[] typeInfo = getRequiredTypeInfo(nestedMapper);, +		addNestedMapper(typeInfo[0], typeInfo[1], nestedMapper);, +	}, +, +	/**, +	 * Adds a Mapper to apply to complex nested property mappings of a specific sourceType/targetType pair., +	private Class[] getRequiredTypeInfo(Mapper mapper) {, +		return GenericTypeResolver.resolveTypeArguments(mapper.getClass(), Mapper.class);, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/SpelMapper.java, +import org.springframework.core.GenericTypeResolver;, +	 * The source and target types are determined by introspecting the parameterized types on the implementation's Mapper generic interface., +	 * @param nestedMapper the nested mapper, +	 */, +	public void addNestedMapper(Mapper<?, ?> nestedMapper) {, +		Class[] typeInfo = getRequiredTypeInfo(nestedMapper);, +		addNestedMapper(typeInfo[0], typeInfo[1], nestedMapper);, +	}, +, +	/**, +	 * Adds a Mapper to apply to complex nested property mappings of a specific sourceType/targetType pair., +	private Class[] getRequiredTypeInfo(Mapper mapper) {, +		return GenericTypeResolver.resolveTypeArguments(mapper.getClass(), Mapper.class);, +	}, +, +++ b/org.springframework.context/src/test/java/org/springframework/mapping/support/SpelMapperTests.java, +import org.springframework.mapping.Mapper;, +	public void mapBeanNestedCustomNestedMapper() {, +	public void mapBeanNestedCustomNestedMapperHandCoded() {, +		PersonDto source = new PersonDto();, +		NestedDto nested = new NestedDto();, +		nested.foo = "bar";, +		source.setNested(nested);, +, +		Person target = new Person();, +, +		Mapper nestedMapper = new Mapper<NestedDto, Nested>() {, +			public Object map(NestedDto source, Nested target) {, +				target.foo = source.foo + " and baz";, +				return target;, +			}, +, +		};, +		mapper.addNestedMapper(nestedMapper);, +, +		mapper.setAutoMappingEnabled(false);, +		mapper.addMapping("nested");, +		mapper.map(source, target);, +, +		assertEquals("bar and baz", target.nested.foo);, +	}, +, +	@Test]