[+++ b/spring-core/src/main/java/org/springframework/util/xml/XMLEventStreamReader.java, + * Copyright 2002-2013 the original author or authors., + * Implementation of the {@link javax.xml.stream.XMLStreamReader} interface that wraps a, + * {@link XMLEventReader}. Useful because the StAX {@link javax.xml.stream.XMLInputFactory}, + * allows one to create a event reader from a stream reader, but not vice-versa., +, +	public XMLEventStreamReader(XMLEventReader eventReader) throws XMLStreamException {, +		this.event = eventReader.nextEvent();, +		if (this.event.isStartElement()) {, +			return this.event.asStartElement().getName();, +		else if (this.event.isEndElement()) {, +			return this.event.asEndElement().getName();, +		return this.event.getLocation();, +		return this.event.getEventType();, +	}, +, +	@Override, +	public String getVersion() {, +		if (this.event.isStartDocument()) {, +			return ((StartDocument) this.event).getVersion();, +		}, +		else {, +			return null;, +		}, +	}, +, +	@Override, +	public Object getProperty(String name) throws IllegalArgumentException {, +		return this.eventReader.getProperty(name);, +	}, +, +	@Override, +	public boolean isStandalone() {, +		if (this.event.isStartDocument()) {, +			return ((StartDocument) event).isStandalone();, +		}, +		else {, +			throw new IllegalStateException();, +		}, +	}, +, +	@Override, +	public boolean standaloneSet() {, +		if (this.event.isStartDocument()) {, +			return ((StartDocument) this.event).standaloneSet();, +		}, +		else {, +			throw new IllegalStateException();, +		}, +	public String getPITarget() {, +		if (this.event.isProcessingInstruction()) {, +			return ((ProcessingInstruction) this.event).getTarget();, +		}, +		else {, +	}, +, +	@Override, +	public String getPIData() {, +		if (this.event.isProcessingInstruction()) {, +			return ((ProcessingInstruction) this.event).getData();, +		}, +		else {, +			throw new IllegalStateException();, +		}, +	}, +, +	@Override, +	public int getTextStart() {, +		return 0;, +	}, +, +	@Override, +	public String getText() {, +		if (this.event.isCharacters()) {, +			return event.asCharacters().getData();, +		}, +		else if (this.event.getEventType() == XMLEvent.COMMENT) {, +			return ((Comment) this.event).getText();, +		}, +		else {, +			throw new IllegalStateException();, +		}, +	}, +, +	@Override, +	@SuppressWarnings("rawtypes"), +	public int getAttributeCount() {, +		if (!this.event.isStartElement()) {, +			throw new IllegalStateException();, +		}, +		Iterator attributes = this.event.asStartElement().getAttributes();, +	public boolean isAttributeSpecified(int index) {, +		return getAttribute(index).isSpecified();, +	@SuppressWarnings("rawtypes"), +		if (!this.event.isStartElement()) {, +		Iterator attributes = this.event.asStartElement().getAttributes();, +	@Override, +	public NamespaceContext getNamespaceContext() {, +		if (this.event.isStartElement()) {, +			return this.event.asStartElement().getNamespaceContext();]