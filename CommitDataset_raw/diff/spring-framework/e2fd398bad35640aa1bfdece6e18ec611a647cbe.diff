[+++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/BeanFactoryExtensions.kt, +fun <T : Any> BeanFactory.getBean(requiredType: KClass<T>): T = getBean(requiredType.java), +inline fun <reified T : Any> BeanFactory.getBean(): T = getBean(T::class.java), +fun <T : Any> BeanFactory.getBean(name: String, requiredType: KClass<T>): T =, +inline fun <reified T : Any> BeanFactory.getBean(name: String): T =, +fun <T : Any> BeanFactory.getBean(requiredType: KClass<T>, vararg args:Any): T =, +inline fun <reified T : Any> BeanFactory.getBean(vararg args:Any): T =, +++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/BeanFactoryExtensions.kt, +fun <T : Any> BeanFactory.getBean(requiredType: KClass<T>): T = getBean(requiredType.java), +inline fun <reified T : Any> BeanFactory.getBean(): T = getBean(T::class.java), +fun <T : Any> BeanFactory.getBean(name: String, requiredType: KClass<T>): T =, +inline fun <reified T : Any> BeanFactory.getBean(name: String): T =, +fun <T : Any> BeanFactory.getBean(requiredType: KClass<T>, vararg args:Any): T =, +inline fun <reified T : Any> BeanFactory.getBean(vararg args:Any): T =, +++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/ListableBeanFactoryExtensions.kt, +		includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true): Array<out String> =, +inline fun <reified T : Any> ListableBeanFactory.getBeanNamesForType(includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true): Array<out String> =, +fun <T : Any> ListableBeanFactory.getBeansOfType(type: KClass<T>, includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true): Map<String, Any> =, +inline fun <reified T : Any> ListableBeanFactory.getBeansOfType(includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true): Map<String, Any> =, +fun <T : Annotation> ListableBeanFactory.getBeanNamesForAnnotation(type: KClass<T>): Array<out String> =, +inline fun <reified T : Annotation> ListableBeanFactory.getBeanNamesForAnnotation(): Array<out String> =, +fun <T : Annotation> ListableBeanFactory.getBeansWithAnnotation(type: KClass<T>): MutableMap<String, Any> =, +inline fun <reified T : Annotation> ListableBeanFactory.getBeansWithAnnotation(): MutableMap<String, Any> =, +fun <T : Annotation> ListableBeanFactory.findAnnotationOnBean(beanName:String, type: KClass<T>): Annotation? =, +inline fun <reified T : Annotation> ListableBeanFactory.findAnnotationOnBean(beanName:String): Annotation? =, +++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/BeanFactoryExtensions.kt, +fun <T : Any> BeanFactory.getBean(requiredType: KClass<T>): T = getBean(requiredType.java), +inline fun <reified T : Any> BeanFactory.getBean(): T = getBean(T::class.java), +fun <T : Any> BeanFactory.getBean(name: String, requiredType: KClass<T>): T =, +inline fun <reified T : Any> BeanFactory.getBean(name: String): T =, +fun <T : Any> BeanFactory.getBean(requiredType: KClass<T>, vararg args:Any): T =, +inline fun <reified T : Any> BeanFactory.getBean(vararg args:Any): T =, +++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/ListableBeanFactoryExtensions.kt, +		includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true): Array<out String> =, +inline fun <reified T : Any> ListableBeanFactory.getBeanNamesForType(includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true): Array<out String> =, +fun <T : Any> ListableBeanFactory.getBeansOfType(type: KClass<T>, includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true): Map<String, Any> =, +inline fun <reified T : Any> ListableBeanFactory.getBeansOfType(includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true): Map<String, Any> =, +fun <T : Annotation> ListableBeanFactory.getBeanNamesForAnnotation(type: KClass<T>): Array<out String> =, +inline fun <reified T : Annotation> ListableBeanFactory.getBeanNamesForAnnotation(): Array<out String> =, +fun <T : Annotation> ListableBeanFactory.getBeansWithAnnotation(type: KClass<T>): MutableMap<String, Any> =, +inline fun <reified T : Annotation> ListableBeanFactory.getBeansWithAnnotation(): MutableMap<String, Any> =, +fun <T : Annotation> ListableBeanFactory.findAnnotationOnBean(beanName:String, type: KClass<T>): Annotation? =, +inline fun <reified T : Annotation> ListableBeanFactory.findAnnotationOnBean(beanName:String): Annotation? =, +++ b/spring-context/src/main/kotlin/org/springframework/context/annotation/AnnotationConfigApplicationContextExtensions.kt, +++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/BeanFactoryExtensions.kt, +fun <T : Any> BeanFactory.getBean(requiredType: KClass<T>): T = getBean(requiredType.java), +inline fun <reified T : Any> BeanFactory.getBean(): T = getBean(T::class.java), +fun <T : Any> BeanFactory.getBean(name: String, requiredType: KClass<T>): T =, +inline fun <reified T : Any> BeanFactory.getBean(name: String): T =, +fun <T : Any> BeanFactory.getBean(requiredType: KClass<T>, vararg args:Any): T =, +inline fun <reified T : Any> BeanFactory.getBean(vararg args:Any): T =, +++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/ListableBeanFactoryExtensions.kt, +		includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true): Array<out String> =, +inline fun <reified T : Any> ListableBeanFactory.getBeanNamesForType(includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true): Array<out String> =, +fun <T : Any> ListableBeanFactory.getBeansOfType(type: KClass<T>, includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true): Map<String, Any> =, +inline fun <reified T : Any> ListableBeanFactory.getBeansOfType(includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true): Map<String, Any> =, +fun <T : Annotation> ListableBeanFactory.getBeanNamesForAnnotation(type: KClass<T>): Array<out String> =, +inline fun <reified T : Annotation> ListableBeanFactory.getBeanNamesForAnnotation(): Array<out String> =, +fun <T : Annotation> ListableBeanFactory.getBeansWithAnnotation(type: KClass<T>): MutableMap<String, Any> =, +inline fun <reified T : Annotation> ListableBeanFactory.getBeansWithAnnotation(): MutableMap<String, Any> =, +fun <T : Annotation> ListableBeanFactory.findAnnotationOnBean(beanName:String, type: KClass<T>): Annotation? =, +inline fun <reified T : Annotation> ListableBeanFactory.findAnnotationOnBean(beanName:String): Annotation? =, +++ b/spring-context/src/main/kotlin/org/springframework/context/annotation/AnnotationConfigApplicationContextExtensions.kt, +++ b/spring-context/src/main/kotlin/org/springframework/context/support/GenericApplicationContextExtensions.kt, +fun <T : Any> GenericApplicationContext.registerBean(beanClass: KClass<T>, vararg customizers: BeanDefinitionCustomizer) {, +fun <T : Any> GenericApplicationContext.registerBean(beanName: String, beanClass: KClass<T>, vararg customizers: BeanDefinitionCustomizer) {, +++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/BeanFactoryExtensions.kt, +fun <T : Any> BeanFactory.getBean(requiredType: KClass<T>): T = getBean(requiredType.java), +inline fun <reified T : Any> BeanFactory.getBean(): T = getBean(T::class.java), +fun <T : Any> BeanFactory.getBean(name: String, requiredType: KClass<T>): T =, +inline fun <reified T : Any> BeanFactory.getBean(name: String): T =, +fun <T : Any> BeanFactory.getBean(requiredType: KClass<T>, vararg args:Any): T =, +inline fun <reified T : Any> BeanFactory.getBean(vararg args:Any): T =, +++ b/spring-beans/src/main/kotlin/org/springframework/beans/factory/ListableBeanFactoryExtensions.kt, +		includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true): Array<out String> =, +inline fun <reified T : Any> ListableBeanFactory.getBeanNamesForType(includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true): Array<out String> =, +fun <T : Any> ListableBeanFactory.getBeansOfType(type: KClass<T>, includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true): Map<String, Any> =, +inline fun <reified T : Any> ListableBeanFactory.getBeansOfType(includeNonSingletons: Boolean = true, allowEagerInit: Boolean = true): Map<String, Any> =, +fun <T : Annotation> ListableBeanFactory.getBeanNamesForAnnotation(type: KClass<T>): Array<out String> =, +inline fun <reified T : Annotation> ListableBeanFactory.getBeanNamesForAnnotation(): Array<out String> =, +fun <T : Annotation> ListableBeanFactory.getBeansWithAnnotation(type: KClass<T>): MutableMap<String, Any> =, +inline fun <reified T : Annotation> ListableBeanFactory.getBeansWithAnnotation(): MutableMap<String, Any> =, +fun <T : Annotation> ListableBeanFactory.findAnnotationOnBean(beanName:String, type: KClass<T>): Annotation? =, +inline fun <reified T : Annotation> ListableBeanFactory.findAnnotationOnBean(beanName:String): Annotation? =, +++ b/spring-context/src/main/kotlin/org/springframework/context/annotation/AnnotationConfigApplicationContextExtensions.kt, +++ b/spring-context/src/main/kotlin/org/springframework/context/support/GenericApplicationContextExtensions.kt, +fun <T : Any> GenericApplicationContext.registerBean(beanClass: KClass<T>, vararg customizers: BeanDefinitionCustomizer) {, +fun <T : Any> GenericApplicationContext.registerBean(beanName: String, beanClass: KClass<T>, vararg customizers: BeanDefinitionCustomizer) {, +++ b/spring-web/src/main/kotlin/org/springframework/web/client/RestOperationsExtensions.kt, +import org.springframework.http.ResponseEntity, +inline fun <reified T: Any> RestOperations.getForObject(url: String, vararg uriVariables: Any): T =, +inline fun <reified T: Any> RestOperations.getForObject(url: String, uriVariables: Map<String, Any?>): T =, +inline fun <reified T: Any> RestOperations.getForObject(url: URI): T =, +inline fun <reified T: Any> RestOperations.getForEntity(url: String, vararg uriVariables: Any): ResponseEntity<T> =, +inline fun <reified T: Any> RestOperations.postForObject(url: String, request: Any, vararg uriVariables: Any): T =, +inline fun <reified T: Any> RestOperations.postForObject(url: String, request: Any, uriVariables: Map<String, *>): T =, +inline fun <reified T: Any> RestOperations.postForObject(url: URI, request: Any): T =, +inline fun <reified T: Any> RestOperations.postForEntity(url: String, request: Any, vararg uriVariables: Any): ResponseEntity<T> =, +inline fun <reified T: Any> RestOperations.postForEntity(url: String, request: Any, uriVariables: Map<String, *>): ResponseEntity<T> =, +inline fun <reified T: Any> RestOperations.postForEntity(url: URI, request: Any): ResponseEntity<T> =]