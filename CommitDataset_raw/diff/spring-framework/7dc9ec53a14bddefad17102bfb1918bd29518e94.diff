[+++ b/org.springframework.core/src/main/java/org/springframework/core/GenericCollectionTypeResolver.java, +	public static Class<?> getCollectionType(Class<? extends Collection> collectionClass) {, +	public static Class<?> getMapKeyType(Class<? extends Map> mapClass) {, +	public static Class<?> getMapValueType(Class<? extends Map> mapClass) {, +	public static Class<?> getCollectionFieldType(Field collectionField) {, +	public static Class<?> getCollectionFieldType(Field collectionField, int nestingLevel) {, +	public static Class<?> getMapKeyFieldType(Field mapField) {, +	public static Class<?> getMapKeyFieldType(Field mapField, int nestingLevel) {, +	public static Class<?> getMapValueFieldType(Field mapField) {, +	public static Class<?> getMapValueFieldType(Field mapField, int nestingLevel) {, +	public static Class<?> getCollectionParameterType(MethodParameter methodParam) {, +	public static Class<?> getMapKeyParameterType(MethodParameter methodParam) {, +	public static Class<?> getMapValueParameterType(MethodParameter methodParam) {, +	public static Class<?> getCollectionReturnType(Method method) {, +	public static Class<?> getCollectionReturnType(Method method, int nestingLevel) {, +	public static Class<?> getMapKeyReturnType(Method method) {, +	public static Class<?> getMapKeyReturnType(Method method, int nestingLevel) {, +	public static Class<?> getMapValueReturnType(Method method) {, +	public static Class<?> getMapValueReturnType(Method method, int nestingLevel) {, +	private static Class<?> getGenericParameterType(MethodParameter methodParam, Class<?> source, int typeIndex) {, +	private static Class<?> getGenericFieldType(Field field, Class<?> source, int typeIndex, int nestingLevel) {, +	private static Class<?> getGenericReturnType(Method method, Class<?> source, int typeIndex, int nestingLevel) {, +	 * @param source the source collection/map Class<?> that we check, +	private static Class<?> extractType(, +			MethodParameter methodParam, Type type, Class<?> source, int typeIndex, int nestingLevel, int currentLevel) {, +	private static Class<?> extractTypeFromParameterizedType(MethodParameter methodParam,, +			ParameterizedType ptype, Class<?> source, int typeIndex, int nestingLevel, int currentLevel) {, +	 * Extract the generic type from the given Class<?> object., +	 * @param clazz the Class<?> to check, +	private static Class<?> extractTypeFromClass(Class clazz, Class<?> source, int typeIndex) {, +	 * Extract the generic type from the given Class<?> object., +	 * @param clazz the Class<?> to check, +	private static Class<?> extractTypeFromClass(, +			MethodParameter methodParam, Class<?> clazz, Class<?> source, int typeIndex, int nestingLevel, int currentLevel) {, +				if (rawType instanceof Class<?> && isIntrospectionCandidate((Class) rawType)) {]