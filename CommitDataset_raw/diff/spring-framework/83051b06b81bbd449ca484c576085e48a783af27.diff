[+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +import java.io.OutputStream;, +import java.nio.channels.WritableByteChannel;, +import org.reactivestreams.Subscription;, +import reactor.core.publisher.BaseSubscriber;, +import reactor.core.publisher.Mono;, +import reactor.core.publisher.MonoSink;, +		return Flux.create(sink -> {, +			sink.onDispose(() -> closeChannel(channel));, +			AsynchronousFileChannelReadCompletionHandler completionHandler =, +					new AsynchronousFileChannelReadCompletionHandler(sink, position,, +	/**, +	 * Write the given stream of {@link DataBuffer}s to the given {@code OutputStream}. Does, +	 * <strong>not</strong> close the output stream when the flux is terminated, but, +	 * <strong>does</strong> {@linkplain #release(DataBuffer) release} the data buffers in the, +	 * source., +	 * <p>Note that the writing process does not start until the returned {@code Mono} is subscribed, +	 * to., +	 * @param source the stream of data buffers to be written, +	 * @param outputStream the output stream to write to, +	 * @return a mono that starts the writing process when subscribed to, and that indicates the, +	 * completion of the process, +	 */, +	public static Mono<Void> write(Publisher<DataBuffer> source,, +			OutputStream outputStream) {, +, +		Assert.notNull(source, "'source' must not be null");, +		Assert.notNull(outputStream, "'outputStream' must not be null");, +, +		WritableByteChannel channel = Channels.newChannel(outputStream);, +		return write(source, channel);, +	}, +, +	/**, +	 * Write the given stream of {@link DataBuffer}s to the given {@code WritableByteChannel}. Does, +	 * <strong>not</strong> close the channel when the flux is terminated, but, +	 * <strong>does</strong> {@linkplain #release(DataBuffer) release} the data buffers in the, +	 * source., +	 * <p>Note that the writing process does not start until the returned {@code Mono} is subscribed, +	 * to., +	 * @param source the stream of data buffers to be written, +	 * @param channel the channel to write to, +	 * @return a mono that starts the writing process when subscribed to, and that indicates the, +	 * completion of the process, +	 */, +	public static Mono<Void> write(Publisher<DataBuffer> source,, +			WritableByteChannel channel) {, +, +		Assert.notNull(source, "'source' must not be null");, +		Assert.notNull(channel, "'channel' must not be null");, +, +		Flux<DataBuffer> flux = Flux.from(source);, +, +		return Mono.create(sink ->, +				flux.subscribe(dataBuffer -> {, +							try {, +								ByteBuffer byteBuffer = dataBuffer.asByteBuffer();, +								while (byteBuffer.hasRemaining()) {, +									channel.write(byteBuffer);, +								}, +								release(dataBuffer);, +							}, +							catch (IOException ex) {, +								sink.error(ex);, +							}, +, +						},, +						sink::error,, +						sink::success));, +	}, +, +	/**, +	 * Write the given stream of {@link DataBuffer}s to the given {@code AsynchronousFileChannel}., +	 * Does <strong>not</strong> close the channel when the flux is terminated, but, +	 * <strong>does</strong> {@linkplain #release(DataBuffer) release} the data buffers in the, +	 * source., +	 * <p>Note that the writing process does not start until the returned {@code Mono} is subscribed, +	 * to., +	 * @param source the stream of data buffers to be written, +	 * @param channel the channel to write to, +	 * @return a mono that starts the writing process when subscribed to, and that indicates the, +	 * completion of the process, +	 */, +	public static Mono<Void> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel,, +			long position) {, +, +		Assert.notNull(source, "'source' must not be null");, +		Assert.notNull(channel, "'channel' must not be null");, +		Assert.isTrue(position >= 0, "'position' must be >= 0");, +, +		Flux<DataBuffer> flux = Flux.from(source);, +, +		return Mono.create(sink -> {, +			BaseSubscriber<DataBuffer> subscriber =, +					new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position);, +			flux.subscribe(subscriber);, +		});, +	}, +, +]