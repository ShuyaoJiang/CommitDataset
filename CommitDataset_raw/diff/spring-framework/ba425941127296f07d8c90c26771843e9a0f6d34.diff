[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +import org.springframework.util.StringUtils;, +import org.springframework.web.HttpRequestMethodNotSupportedException;, +		catch (HttpRequestMethodNotSupportedException ex) {, +			return handleHttpRequestMethodNotSupportedException(ex, request, response);, +		}, +	 * Handle the case where no request handler method was found for the particular HTTP request method., +	 *, +	 * <p/>The default implementation logs a warning, sends an HTTP 405 error and sets the "Allow" header. Alternatively, a, +	 * fallback view could be chosen, or the HttpRequestMethodNotSupportedException could be rethrown as-is., +	 *, +	 * @param ex	   the HttpRequestMethodNotSupportedException to be handled, +	 * @param request  current HTTP request, +	 * @param response current HTTP response, +	 * @return a ModelAndView to render, or <code>null</code> if handled directly, +	 * @throws Exception an Exception that should be thrown as result of the servlet request, +	 */, +	protected ModelAndView handleHttpRequestMethodNotSupportedException(HttpRequestMethodNotSupportedException ex,, +																		HttpServletRequest request,, +																		HttpServletResponse response) throws Exception {, +		pageNotFoundLogger.warn(ex.getMessage());, +		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);, +		response.addHeader("Allow", StringUtils.arrayToDelimitedString(ex.getSupportedMethods(), ", "));, +		return null;, +	}, +, +	/**, +			Set<String> allowedMethods = new LinkedHashSet<String>(7);, +								for (RequestMethod requestMethod : mappingInfo.methods) {, +									allowedMethods.add(requestMethod.toString());, +								}, +				if (!allowedMethods.isEmpty()) {, +					throw new HttpRequestMethodNotSupportedException(request.getMethod(),, +							StringUtils.toStringArray(allowedMethods));, +				}, +				else {, +					throw new NoSuchRequestHandlingMethodException(lookupPath, request.getMethod(),, +							request.getParameterMap());, +				}, +		private ServletHandlerMethodInvoker(HandlerMethodResolver resolver) {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +import org.springframework.util.StringUtils;, +import org.springframework.web.HttpRequestMethodNotSupportedException;, +		catch (HttpRequestMethodNotSupportedException ex) {, +			return handleHttpRequestMethodNotSupportedException(ex, request, response);, +		}, +	 * Handle the case where no request handler method was found for the particular HTTP request method., +	 *, +	 * <p/>The default implementation logs a warning, sends an HTTP 405 error and sets the "Allow" header. Alternatively, a, +	 * fallback view could be chosen, or the HttpRequestMethodNotSupportedException could be rethrown as-is., +	 *, +	 * @param ex	   the HttpRequestMethodNotSupportedException to be handled, +	 * @param request  current HTTP request, +	 * @param response current HTTP response, +	 * @return a ModelAndView to render, or <code>null</code> if handled directly, +	 * @throws Exception an Exception that should be thrown as result of the servlet request, +	 */, +	protected ModelAndView handleHttpRequestMethodNotSupportedException(HttpRequestMethodNotSupportedException ex,, +																		HttpServletRequest request,, +																		HttpServletResponse response) throws Exception {, +		pageNotFoundLogger.warn(ex.getMessage());, +		response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);, +		response.addHeader("Allow", StringUtils.arrayToDelimitedString(ex.getSupportedMethods(), ", "));, +		return null;, +	}, +, +	/**, +			Set<String> allowedMethods = new LinkedHashSet<String>(7);, +								for (RequestMethod requestMethod : mappingInfo.methods) {, +									allowedMethods.add(requestMethod.toString());, +								}, +				if (!allowedMethods.isEmpty()) {, +					throw new HttpRequestMethodNotSupportedException(request.getMethod(),, +							StringUtils.toStringArray(allowedMethods));, +				}, +				else {, +					throw new NoSuchRequestHandlingMethodException(lookupPath, request.getMethod(),, +							request.getParameterMap());, +				}, +		private ServletHandlerMethodInvoker(HandlerMethodResolver resolver) {, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +			@Override, +			@Override, +			@Override, +			@Override, +	public void methodNotAllowed() throws Exception {, +		@SuppressWarnings("serial") DispatcherServlet servlet = new DispatcherServlet() {, +			@Override, +			protected WebApplicationContext createWebApplicationContext(WebApplicationContext parent) {, +				GenericWebApplicationContext wac = new GenericWebApplicationContext();, +				wac.registerBeanDefinition("controller", new RootBeanDefinition(MethodNotAllowedController.class));, +				wac.refresh();, +				return wac;, +			}, +		};, +		servlet.init(new MockServletConfig());]