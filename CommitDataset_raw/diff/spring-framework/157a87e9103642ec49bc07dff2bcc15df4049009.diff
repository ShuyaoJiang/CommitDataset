[+++ b/org.springframework.oxm/build.xml, +	<property name="flightSchema" value="${basedir}/src/test/resources/org/springframework/oxm/flight.xsd"/>, +	<property name="orderSchema" value="${basedir}/src/test/resources/org/springframework/oxm/order.xsd"/>, +	<property name="castorBuilderProperties" value="${basedir}/src/test/castor/castorbuilder.properties"/>, +			<castor types="j2" warnings="false" file="${flightSchema}" todir="${test.castor.dir}", +					package="org.springframework.oxm.castor" properties="${castorBuilderProperties}"/>, +			<castor types="j2" warnings="false" file="${orderSchema}" todir="${test.castor.dir}", +					package="org.springframework.oxm.castor" properties="${castorBuilderProperties}"/>, +            <copy todir="@{output.dir}">, +                <fileset dir="${test.castor.dir}">, +                    <exclude name="**/*.java"/>, +                </fileset>, +            </copy>, +			<xjc destdir="${test.jaxb.dir}" package="org.springframework.oxm.jaxb.test" schema="${flightSchema}">, +			<xmlbeans schema="${flightSchema}" classgendir="@{output.dir}" classpathref="xmlbeans.classpath" compiler="modern", +++ b/org.springframework.oxm/build.xml, +	<property name="flightSchema" value="${basedir}/src/test/resources/org/springframework/oxm/flight.xsd"/>, +	<property name="orderSchema" value="${basedir}/src/test/resources/org/springframework/oxm/order.xsd"/>, +	<property name="castorBuilderProperties" value="${basedir}/src/test/castor/castorbuilder.properties"/>, +			<castor types="j2" warnings="false" file="${flightSchema}" todir="${test.castor.dir}", +					package="org.springframework.oxm.castor" properties="${castorBuilderProperties}"/>, +			<castor types="j2" warnings="false" file="${orderSchema}" todir="${test.castor.dir}", +					package="org.springframework.oxm.castor" properties="${castorBuilderProperties}"/>, +            <copy todir="@{output.dir}">, +                <fileset dir="${test.castor.dir}">, +                    <exclude name="**/*.java"/>, +                </fileset>, +            </copy>, +			<xjc destdir="${test.jaxb.dir}" package="org.springframework.oxm.jaxb.test" schema="${flightSchema}">, +			<xmlbeans schema="${flightSchema}" classgendir="@{output.dir}" classpathref="xmlbeans.classpath" compiler="modern", +++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/castor/CastorMarshaller.java, + * configuration, though setting target classes, target packages or providing a mapping file can be used to have more control over the, + * @see #setTargetPackages(String[]), +	private Class[] targetClasses;, +, +	private String[] targetPackages;, +	 * Set the Castor target class. Alternative means of configuring, +	 * <code>CastorMarshaller<code> for unmarshalling multiple classes include, +	 * use of mapping files, and specifying packages with Castor descriptor classes., +		this.targetClasses = new Class[]{targetClass};, +	}, +, +	/**, +	 * Set the Castor target classes. Alternative means of configuring, +	 * <code>CastorMarshaller<code> for unmarshalling multiple classes include, +	 * use of mapping files, and specifying packages with Castor descriptor classes., +	 */, +	public void setTargetClasses(Class[] targetClasses) {, +		this.targetClasses = targetClasses;, +	}, +, +	/**, +	 * Set the package names of packages with the Castor descriptor classes., +	 */, +	public void setTargetPackages(String[] targetPackages) {, +		this.targetPackages = targetPackages;, +			if (!ObjectUtils.isEmpty(this.mappingLocations)) {, +				logger.info(, +						"Configured using [" + StringUtils.arrayToCommaDelimitedString(this.mappingLocations) + "]");, +			if (!ObjectUtils.isEmpty(this.targetClasses)) {, +				logger.info("Configured for target classes " + StringUtils.arrayToCommaDelimitedString(targetClasses) +, +						"]");, +			if (!ObjectUtils.isEmpty(this.targetPackages)) {, +				logger.info(, +						"Configured for target packages [" + StringUtils.arrayToCommaDelimitedString(targetPackages) +, +								"]");, +			}, +			if (ObjectUtils.isEmpty(this.mappingLocations) && ObjectUtils.isEmpty(this.targetClasses) &&, +					ObjectUtils.isEmpty(this.targetPackages)) {, +			this.xmlContext = createXMLContext(this.mappingLocations, this.targetClasses, this.targetPackages);, +	 * <p>, +	 * The default implementation loads mapping files if defined, or the target class or packages if defined., +	 *, +	protected XMLContext createXMLContext(Resource[] mappingLocations, Class[] targetClasses, String[] targetPackages), +		if (!ObjectUtils.isEmpty(targetClasses)) {, +			context.addClasses(targetClasses);, +		}, +		if (!ObjectUtils.isEmpty(targetPackages)) {, +			context.addPackages(targetPackages);, +	 * Template method that allows for customizing of the given Castor, +	 * {@link Unmarshaller}., +	 * <p>, +	 * The default implementation invokes, +	 * {@link Unmarshaller#setValidation(boolean)},, +	 * {@link Unmarshaller#setWhitespacePreserve(boolean)},, +	 * {@link Unmarshaller#setIgnoreExtraAttributes(boolean)}, and, +	 * {@link Unmarshaller#setIgnoreExtraElements(boolean)} with the properties, +	 * set on this marshaller., +	 * Convert the given <code>XMLException</code> to an appropriate exception, +	 * from the <code>org.springframework.oxm</code> hierarchy., +	 * <p>, +	 * A boolean flag is used to indicate whether this exception occurs during, +	 * marshalling or unmarshalling, since Castor itself does not make this, +	 * distinction in its exception hierarchy., +	 *, +	 * @param marshalling indicates whether the exception occurs during, +	 *                    marshalling (<code>true</code>), or unmarshalling (<code>false</code>), +++ b/org.springframework.oxm/build.xml, +	<property name="flightSchema" value="${basedir}/src/test/resources/org/springframework/oxm/flight.xsd"/>, +	<property name="orderSchema" value="${basedir}/src/test/resources/org/springframework/oxm/order.xsd"/>]