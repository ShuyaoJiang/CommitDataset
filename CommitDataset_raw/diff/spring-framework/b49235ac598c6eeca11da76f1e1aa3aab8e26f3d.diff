[+++ b/spring-web/src/main/java/org/springframework/http/converter/BufferedImageHttpMessageConverter.java, +		final MediaType selectedContentType = getContentType(contentType);, +		outputMessage.getHeaders().setContentType(selectedContentType);, +, +					writeInternal(image, selectedContentType, outputStream);, +			writeInternal(image, selectedContentType, outputMessage.getBody());, +	private MediaType getContentType(MediaType contentType) {, +		Assert.notNull(contentType, "Could not select Content-Type. " +, +				"Please specify one through the 'defaultContentType' property.");, +		return contentType;, +	}, +, +	private void writeInternal(BufferedImage image, MediaType contentType, OutputStream body), +			throws IOException, HttpMessageNotWritableException {, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/BufferedImageHttpMessageConverter.java, +		final MediaType selectedContentType = getContentType(contentType);, +		outputMessage.getHeaders().setContentType(selectedContentType);, +, +					writeInternal(image, selectedContentType, outputStream);, +			writeInternal(image, selectedContentType, outputMessage.getBody());, +	private MediaType getContentType(MediaType contentType) {, +		Assert.notNull(contentType, "Could not select Content-Type. " +, +				"Please specify one through the 'defaultContentType' property.");, +		return contentType;, +	}, +, +	private void writeInternal(BufferedImage image, MediaType contentType, OutputStream body), +			throws IOException, HttpMessageNotWritableException {, +, +++ b/spring-web/src/test/java/org/springframework/http/MockHttpOutputMessage.java, + * Copyright 2002-2016 the original author or authors., +import static org.mockito.Mockito.spy;, + * @author Rossen Stoyanchev, +	private final HttpHeaders writtenHeaders = new HttpHeaders();, +, +, +	/**, +	 * Return a copy of the actual headers written at the time of the call to, +	 * getBody, i.e. ignoring any further changes that may have been made to, +	 * the underlying headers, e.g. via a previously obtained instance., +	 */, +	public HttpHeaders getWrittenHeaders() {, +		return writtenHeaders;, +	}, +, +		writeHeaders();, +		writeHeaders();, +, +	private void writeHeaders() {, +		if (this.headersWritten) {, +			return;, +		}, +		this.headersWritten = true;, +		this.writtenHeaders.putAll(this.headers);, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/BufferedImageHttpMessageConverter.java, +		final MediaType selectedContentType = getContentType(contentType);, +		outputMessage.getHeaders().setContentType(selectedContentType);, +, +					writeInternal(image, selectedContentType, outputStream);, +			writeInternal(image, selectedContentType, outputMessage.getBody());, +	private MediaType getContentType(MediaType contentType) {, +		Assert.notNull(contentType, "Could not select Content-Type. " +, +				"Please specify one through the 'defaultContentType' property.");, +		return contentType;, +	}, +, +	private void writeInternal(BufferedImage image, MediaType contentType, OutputStream body), +			throws IOException, HttpMessageNotWritableException {, +, +++ b/spring-web/src/test/java/org/springframework/http/MockHttpOutputMessage.java, + * Copyright 2002-2016 the original author or authors., +import static org.mockito.Mockito.spy;, + * @author Rossen Stoyanchev, +	private final HttpHeaders writtenHeaders = new HttpHeaders();, +, +, +	/**, +	 * Return a copy of the actual headers written at the time of the call to, +	 * getBody, i.e. ignoring any further changes that may have been made to, +	 * the underlying headers, e.g. via a previously obtained instance., +	 */, +	public HttpHeaders getWrittenHeaders() {, +		return writtenHeaders;, +	}, +, +		writeHeaders();, +		writeHeaders();, +, +	private void writeHeaders() {, +		if (this.headersWritten) {, +			return;, +		}, +		this.headersWritten = true;, +		this.writtenHeaders.putAll(this.headers);, +	}, +, +++ b/spring-web/src/test/java/org/springframework/http/converter/BufferedImageHttpMessageConverterTests.java]