[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java, +		Set<String> patterns = info.getPatternsCondition().getPatterns();, +		String bestPattern = patterns.isEmpty() ? lookupPath : patterns.iterator().next();, +		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern);, +		Map<String, String> uriTemplateVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java, +		Set<String> patterns = info.getPatternsCondition().getPatterns();, +		String bestPattern = patterns.isEmpty() ? lookupPath : patterns.iterator().next();, +		request.setAttribute(BEST_MATCHING_PATTERN_ATTRIBUTE, bestPattern);, +		Map<String, String> uriTemplateVariables = getPathMatcher().extractUriTemplateVariables(bestPattern, lookupPath);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMappingTests.java, +		PatternsRequestCondition patterns = new PatternsRequestCondition("/{path1}/2", "/**");, +		this.mapping.handleMatch(key, "/1/2", request);, +		, +		assertEquals("/{path1}/2", request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE));, +	}, +, +	@Test, +	public void bestMatchingPatternAttributeNoPatternsDefined() {, +		PatternsRequestCondition patterns = new PatternsRequestCondition();, +		RequestMappingInfo key = new RequestMappingInfo(patterns, null, null, null, null, null, null);, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/1/2");, +, +		this.mapping.handleMatch(key, "/1/2", request);]