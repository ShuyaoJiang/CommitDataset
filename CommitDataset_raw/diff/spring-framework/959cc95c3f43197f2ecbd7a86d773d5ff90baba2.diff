[+++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanFactoryAccessor.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanFactoryAccessor.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/MapAccessor.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanFactoryAccessor.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/MapAccessor.java, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/PropertyAccessor.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanFactoryAccessor.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/MapAccessor.java, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/PropertyAccessor.java, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java, +				accessorToUse.write(state.getEvaluationContext(), contextObject, name, newValue);, +						accessor.write(eContext, contextObject, name, newValue);, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanFactoryAccessor.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/MapAccessor.java, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/PropertyAccessor.java, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java, +				accessorToUse.write(state.getEvaluationContext(), contextObject, name, newValue);, +						accessor.write(eContext, contextObject, name, newValue);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyResolver.java, +import org.springframework.expression.EvaluationException;, +		Object possiblyConvertedNewValue = newValue;, +		TypeDescriptor typeDescriptor = getTypeDescriptor(context, target, name);, +		if (typeDescriptor != null) {, +			try {, +				possiblyConvertedNewValue = context.getTypeConverter().convertValue(newValue, typeDescriptor);, +			} catch (EvaluationException evaluationException) {, +				throw new AccessException("Type conversion failure",evaluationException);, +			}, +		}, +		, +					method.invoke(target, possiblyConvertedNewValue);, +					field.set(target, possiblyConvertedNewValue);, +	private TypeDescriptor getTypeDescriptor(EvaluationContext context, Object target, String name) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanFactoryAccessor.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/MapAccessor.java, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/PropertyAccessor.java, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java, +				accessorToUse.write(state.getEvaluationContext(), contextObject, name, newValue);, +						accessor.write(eContext, contextObject, name, newValue);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyResolver.java, +import org.springframework.expression.EvaluationException;, +		Object possiblyConvertedNewValue = newValue;, +		TypeDescriptor typeDescriptor = getTypeDescriptor(context, target, name);, +		if (typeDescriptor != null) {, +			try {, +				possiblyConvertedNewValue = context.getTypeConverter().convertValue(newValue, typeDescriptor);, +			} catch (EvaluationException evaluationException) {, +				throw new AccessException("Type conversion failure",evaluationException);, +			}, +		}, +		, +					method.invoke(target, possiblyConvertedNewValue);, +					field.set(target, possiblyConvertedNewValue);, +	private TypeDescriptor getTypeDescriptor(EvaluationContext context, Object target, String name) {, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ExpressionLanguageScenarioTests.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanFactoryAccessor.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/MapAccessor.java, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/PropertyAccessor.java, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java, +				accessorToUse.write(state.getEvaluationContext(), contextObject, name, newValue);, +						accessor.write(eContext, contextObject, name, newValue);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyResolver.java, +import org.springframework.expression.EvaluationException;, +		Object possiblyConvertedNewValue = newValue;, +		TypeDescriptor typeDescriptor = getTypeDescriptor(context, target, name);, +		if (typeDescriptor != null) {, +			try {, +				possiblyConvertedNewValue = context.getTypeConverter().convertValue(newValue, typeDescriptor);, +			} catch (EvaluationException evaluationException) {, +				throw new AccessException("Type conversion failure",evaluationException);, +			}, +		}, +		, +					method.invoke(target, possiblyConvertedNewValue);, +					field.set(target, possiblyConvertedNewValue);, +	private TypeDescriptor getTypeDescriptor(EvaluationContext context, Object target, String name) {, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ExpressionLanguageScenarioTests.java, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/MapAccessTests.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanExpressionContextAccessor.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/BeanFactoryAccessor.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/MapAccessor.java, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/PropertyAccessor.java, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java, +				accessorToUse.write(state.getEvaluationContext(), contextObject, name, newValue);, +						accessor.write(eContext, contextObject, name, newValue);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyResolver.java, +import org.springframework.expression.EvaluationException;, +		Object possiblyConvertedNewValue = newValue;, +		TypeDescriptor typeDescriptor = getTypeDescriptor(context, target, name);, +		if (typeDescriptor != null) {, +			try {, +				possiblyConvertedNewValue = context.getTypeConverter().convertValue(newValue, typeDescriptor);]