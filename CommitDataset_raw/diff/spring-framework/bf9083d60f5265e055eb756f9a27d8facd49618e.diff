[+++ b/spring-context/src/test/java/org/springframework/format/support/FormattingConversionServiceFactoryBeanTests.java, +, +import org.springframework.core.annotation.AliasFor;, +, +		@AliasFor("alias"), +		String value() default "";, +, +		@AliasFor("value"), +		String alias() default "";, +		@SpecialInt("aliased"), +			assertEquals("aliased", annotation.value());, +			assertEquals("aliased", annotation.alias());, +			assertEquals("aliased", annotation.value());, +			assertEquals("aliased", annotation.alias());, +++ b/spring-context/src/test/java/org/springframework/format/support/FormattingConversionServiceFactoryBeanTests.java, +, +import org.springframework.core.annotation.AliasFor;, +, +		@AliasFor("alias"), +		String value() default "";, +, +		@AliasFor("value"), +		String alias() default "";, +		@SpecialInt("aliased"), +			assertEquals("aliased", annotation.value());, +			assertEquals("aliased", annotation.alias());, +			assertEquals("aliased", annotation.value());, +			assertEquals("aliased", annotation.alias());, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +import java.lang.reflect.AnnotatedElement;, +import java.util.Arrays;, +import org.springframework.core.annotation.AnnotatedElementUtils;, +	private final AnnotatedElement annotatedElement;, +		this.annotatedElement = new AnnotatedElementAdapter(methodParameter.getParameterIndex() == -1 ?, +				methodParameter.getMethodAnnotations() : methodParameter.getParameterAnnotations());, +		this.annotatedElement = new AnnotatedElementAdapter(field.getAnnotations());, +		this.annotatedElement = new AnnotatedElementAdapter(property.getAnnotations());, +		this.annotatedElement = new AnnotatedElementAdapter(annotations);, +		ResolvableType narrowed = ResolvableType.forType(value.getClass(), getResolvableType());, +		return new TypeDescriptor(narrowed, null, getAnnotations());, +		return new TypeDescriptor(getResolvableType().as(superType), superType, getAnnotations());, +		return this.annotatedElement.getAnnotations();, +		return AnnotatedElementUtils.isAnnotated(this.annotatedElement, annotationType);, +		return AnnotatedElementUtils.getMergedAnnotation(this.annotatedElement, annotationType);, +		if (getResolvableType().isArray()) {, +			return new TypeDescriptor(getResolvableType().getComponentType(), null, getAnnotations());, +		if (Stream.class.isAssignableFrom(getType())) {, +			return getRelatedIfResolvable(this, getResolvableType().as(Stream.class).getGeneric(0));, +		return getRelatedIfResolvable(this, getResolvableType().asCollection().getGeneric(0));, +		Assert.state(isMap(), "Not a [java.util.Map]");, +		return getRelatedIfResolvable(this, getResolvableType().asMap().getGeneric(0));, +		Assert.state(isMap(), "Not a [java.util.Map]");, +		return getRelatedIfResolvable(this, getResolvableType().asMap().getGeneric(1));, +		return (value != null ? new TypeDescriptor(getResolvableType(), value.getClass(), getAnnotations()) : null);, +		builder.append(getResolvableType().toString());, +		Assert.notNull(collectionType, "Collection type must not be null");, +			throw new IllegalArgumentException("Collection type must be a [java.util.Collection]");, +		Assert.notNull(mapType, "Map type must not be null");, +			throw new IllegalArgumentException("Map type must be a [java.util.Map]");, +		return new TypeDescriptor(type, null, source.getAnnotations());, +	}, +, +, +	/**, +	 * Adapter class for exposing a {@code TypeDescriptor}'s annotations as an, +	 * {@link AnnotatedElement}, in particular to {@link AnnotatedElementUtils}., +	 * @see AnnotatedElementUtils#isAnnotated(AnnotatedElement, Class), +	 * @see AnnotatedElementUtils#getMergedAnnotation(AnnotatedElement, Class), +	 */, +	private class AnnotatedElementAdapter implements AnnotatedElement, Serializable {, +, +		private final Annotation[] annotations;, +, +		public AnnotatedElementAdapter(Annotation[] annotations) {, +			this.annotations = annotations;, +		}, +, +		@Override, +		@SuppressWarnings("unchecked"), +		public <T extends Annotation> T getAnnotation(Class<T> annotationClass) {, +			for (Annotation annotation : getAnnotations()) {, +				if (annotation.annotationType() == annotationClass) {, +					return (T) annotation;, +				}, +			}, +			return null;, +		}, +, +		@Override, +		public Annotation[] getAnnotations() {, +			return (this.annotations != null ? this.annotations : EMPTY_ANNOTATION_ARRAY);, +		}, +, +		@Override, +		public Annotation[] getDeclaredAnnotations() {, +			return getAnnotations();, +		}, +, +		@Override, +		public boolean equals(Object other) {]