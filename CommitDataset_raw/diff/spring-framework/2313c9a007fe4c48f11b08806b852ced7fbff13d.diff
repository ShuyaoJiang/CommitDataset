[+++ b/spring-core/src/main/java/org/springframework/core/io/PathResource.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.core.io;, +, +import java.io.File;, +import java.io.FileNotFoundException;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.net.URI;, +import java.net.URL;, +import java.nio.file.Files;, +import java.nio.file.OpenOption;, +import java.nio.file.Path;, +import java.nio.file.Paths;, +, +import org.springframework.util.Assert;, +, +/**, + * {@link Resource} implementation for {@code java.nio.file.Path} handles., + * Supports resolution as File, and also as URL., + * Implements the extended {@link WritableResource} interface., + *, + * @author Philippe Marschall, + * @since 4.0, + * @see java.nio.file.Path, + */, +public class PathResource extends AbstractResource implements WritableResource {, +, +	private final Path path;, +, +, +	/**, +	 * Create a new PathResource from a Path handle., +	 * <p>Note: Unlike {@link FileSystemResource}, when building relative resources, +	 * via {@link #createRelative}, the relative path will be built <i>underneath</i> the, +	 * given root:, +	 * e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!, +	 * @param path a Path handle, +	 */, +	public PathResource(Path path) {, +		Assert.notNull(path, "Path must not be null");, +		this.path = path.normalize();, +	}, +, +	/**, +	 * Create a new PathResource from a Path handle., +	 * Create a new PathResource from a Path handle., +	 * <p>Note: Unlike {@link FileSystemResource}, when building relative resources, +	 * via {@link #createRelative}, the relative path will be built <i>underneath</i> the, +	 * given root:, +	 * e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!, +	 * @param path a path, +	 * @see java.nio.file.Paths#get(String, String...), +	 */, +	public PathResource(String path) {, +		Assert.notNull(path, "Path must not be null");, +		this.path = Paths.get(path).normalize();, +	}, +, +	/**, +	 * Create a new PathResource from a Path handle., +	 * <p>Note: Unlike {@link FileSystemResource}, when building relative resources, +	 * via {@link #createRelative}, the relative path will be built <i>underneath</i> the, +	 * given root:, +	 * e.g. Paths.get("C:/dir1/"), relative path "dir2" -> "C:/dir1/dir2"!, +	 * @see java.nio.file.Paths#get(URI), +	 * @param uri a path URI, +	 */, +	public PathResource(URI uri) {, +		Assert.notNull(uri, "URI must not be null");, +		this.path = Paths.get(uri).normalize();, +	}, +, +, +	/**, +	 * Return the file path for this resource., +	 */, +	public final String getPath() {, +		return this.path.toString();, +	}, +, +	/**, +	 * This implementation returns whether the underlying file exists., +	 * @see org.springframework.core.io.PathResource#exists()]