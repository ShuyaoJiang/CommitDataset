[+++ b/build.gradle, +		// Generate TestNG reports alongside JUnit reports., +		getReports().getHtml().setEnabled(true), +		// show standard out and standard error of the test JVM(s) on the console, +++ b/build.gradle, +		// Generate TestNG reports alongside JUnit reports., +		getReports().getHtml().setEnabled(true), +		// show standard out and standard error of the test JVM(s) on the console, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKey.java, +		return (this == obj || (obj instanceof SimpleKey, +				&& Arrays.deepEquals(this.params, ((SimpleKey) obj).params)));, +		return Arrays.deepHashCode(this.params);, +++ b/build.gradle, +		// Generate TestNG reports alongside JUnit reports., +		getReports().getHtml().setEnabled(true), +		// show standard out and standard error of the test JVM(s) on the console, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKey.java, +		return (this == obj || (obj instanceof SimpleKey, +				&& Arrays.deepEquals(this.params, ((SimpleKey) obj).params)));, +		return Arrays.deepHashCode(this.params);, +++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2013 the original author or authors., +						ApplicationListener<?> listener = beanFactory.getBean(listenerBeanName, ApplicationListener.class);, +	 * @return whether the given listener should be included in the, +	 * candidates for the given event type, +++ b/build.gradle, +		// Generate TestNG reports alongside JUnit reports., +		getReports().getHtml().setEnabled(true), +		// show standard out and standard error of the test JVM(s) on the console, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKey.java, +		return (this == obj || (obj instanceof SimpleKey, +				&& Arrays.deepEquals(this.params, ((SimpleKey) obj).params)));, +		return Arrays.deepHashCode(this.params);, +++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2013 the original author or authors., +						ApplicationListener<?> listener = beanFactory.getBean(listenerBeanName, ApplicationListener.class);, +	 * @return whether the given listener should be included in the, +	 * candidates for the given event type, +++ b/spring-context/src/main/java/org/springframework/context/event/GenericApplicationListenerAdapter.java, + * Copyright 2002-2013 the original author or authors., +		Class<?> typeArg = GenericTypeResolver.resolveTypeArgument(this.delegate.getClass(), ApplicationListener.class);, +		if (typeArg == null || typeArg.equals(ApplicationEvent.class)) {, +				typeArg = GenericTypeResolver.resolveTypeArgument(targetClass, ApplicationListener.class);, +		return (typeArg == null || typeArg.isAssignableFrom(eventType));, +++ b/build.gradle, +		// Generate TestNG reports alongside JUnit reports., +		getReports().getHtml().setEnabled(true), +		// show standard out and standard error of the test JVM(s) on the console, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKey.java, +		return (this == obj || (obj instanceof SimpleKey, +				&& Arrays.deepEquals(this.params, ((SimpleKey) obj).params)));, +		return Arrays.deepHashCode(this.params);, +++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2013 the original author or authors., +						ApplicationListener<?> listener = beanFactory.getBean(listenerBeanName, ApplicationListener.class);, +	 * @return whether the given listener should be included in the, +	 * candidates for the given event type, +++ b/spring-context/src/main/java/org/springframework/context/event/GenericApplicationListenerAdapter.java, + * Copyright 2002-2013 the original author or authors., +		Class<?> typeArg = GenericTypeResolver.resolveTypeArgument(this.delegate.getClass(), ApplicationListener.class);, +		if (typeArg == null || typeArg.equals(ApplicationEvent.class)) {, +				typeArg = GenericTypeResolver.resolveTypeArgument(targetClass, ApplicationListener.class);, +		return (typeArg == null || typeArg.isAssignableFrom(eventType));, +++ b/spring-context/src/test/java/org/springframework/cache/interceptor/SimpleKeyGeneratorTests.java, + * @author Stephane Nicoll, +	public void noValues() {, +		Object k1 = generateKey(new Object[] {});, +		Object k2 = generateKey(new Object[] {});, +		Object k3 = generateKey(new Object[] { "different" });, +	public void singleValue(){, +		Object k1 = generateKey(new Object[] { "a" });, +		Object k2 = generateKey(new Object[] { "a" });, +		Object k3 = generateKey(new Object[] { "different" });, +	public void multipleValues()  {, +		Object k1 = generateKey(new Object[] { "a", 1, "b" });, +		Object k2 = generateKey(new Object[] { "a", 1, "b" });, +		Object k3 = generateKey(new Object[] { "b", 1, "a" });, +	public void singleNullValue() {, +		Object k1 = generateKey(new Object[] { null });, +		Object k2 = generateKey(new Object[] { null });, +		Object k3 = generateKey(new Object[] { "different" });, +	public void multipleNullValues() {, +		Object k1 = generateKey(new Object[] { "a", null, "b", null });, +		Object k2 = generateKey(new Object[] { "a", null, "b", null });, +		Object k3 = generateKey(new Object[] { "a", null, "b" });, +, +	@Test, +	public void arrays() {, +		Object k1 = generateKey(new Object[] { new String[]{"a", "b"}, "c" });, +		Object k2 = generateKey(new Object[] { new String[]{"a", "b"}, "c"  });, +		Object k3 = generateKey(new Object[] { new String[]{"b", "a"}, "c" });, +		assertThat(k1.hashCode(), equalTo(k2.hashCode()));, +		assertThat(k1.hashCode(), not(equalTo(k3.hashCode())));, +		assertThat(k1, equalTo(k2));, +		assertThat(k1, not(equalTo(k3)));, +	}, +, +	private Object generateKey(Object[] arguments) {, +		return generator.generate(null, null, arguments);, +	}]