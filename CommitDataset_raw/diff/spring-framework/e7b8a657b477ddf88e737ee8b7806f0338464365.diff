[+++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationIntegrationTests.java, +	public void viaContextRegistration_WithLocallyDeclaredComposedAnnotation() {, +	public void viaContextRegistration_WithExternallyDeclaredComposedAnnotation() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(org.springframework.context.annotation.componentscan.meta.ComposedAnnotationConfig.class);, +		ctx.refresh();, +		ctx.getBean(org.springframework.context.annotation.componentscan.meta.ComposedAnnotationConfig.class);, +		ctx.getBean(SimpleComponent.class);, +		assertThat("config class bean not found", ctx.containsBeanDefinition("composedAnnotationConfig"), is(true));, +		assertThat("@ComponentScan annotated @Configuration class registered directly against ", +				+ "AnnotationConfigApplicationContext did not trigger component scanning as expected",, +			ctx.containsBean("simpleComponent"), is(true));, +	}, +, +	@Test, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationIntegrationTests.java, +	public void viaContextRegistration_WithLocallyDeclaredComposedAnnotation() {, +	public void viaContextRegistration_WithExternallyDeclaredComposedAnnotation() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(org.springframework.context.annotation.componentscan.meta.ComposedAnnotationConfig.class);, +		ctx.refresh();, +		ctx.getBean(org.springframework.context.annotation.componentscan.meta.ComposedAnnotationConfig.class);, +		ctx.getBean(SimpleComponent.class);, +		assertThat("config class bean not found", ctx.containsBeanDefinition("composedAnnotationConfig"), is(true));, +		assertThat("@ComponentScan annotated @Configuration class registered directly against ", +				+ "AnnotationConfigApplicationContext did not trigger component scanning as expected",, +			ctx.containsBean("simpleComponent"), is(true));, +	}, +, +	@Test, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +	public void postProcessorWorksWithLocallyDeclaredComposedConfiguration() {, +		beanFactory.registerBeanDefinition("config", new RootBeanDefinition(ComposedConfigurationClass.class));, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.setEnvironment(new StandardEnvironment());, +		pp.postProcessBeanFactory(beanFactory);, +		SimpleComponent simpleComponent = beanFactory.getBean(SimpleComponent.class);, +		assertNotNull(simpleComponent);, +	}, +, +	@Test, +	public void postProcessorWorksWithLocallyDeclaredComposedComposedConfiguration() {, +		beanFactory.registerBeanDefinition("config", new RootBeanDefinition(ComposedComposedConfigurationClass.class));, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.setEnvironment(new StandardEnvironment());, +		pp.postProcessBeanFactory(beanFactory);, +		SimpleComponent simpleComponent = beanFactory.getBean(SimpleComponent.class);, +		assertNotNull(simpleComponent);, +	}, +, +	@Test, +	public void postProcessorWorksWithLocallyDeclaredMetaComponentScanConfiguration() {, +		beanFactory.registerBeanDefinition("config", new RootBeanDefinition(MetaComponentScanConfigurationClass.class));, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.setEnvironment(new StandardEnvironment());, +		pp.postProcessBeanFactory(beanFactory);, +		SimpleComponent simpleComponent = beanFactory.getBean(SimpleComponent.class);, +		assertNotNull(simpleComponent);, +	}, +, +	@Test, +	public void postProcessorWorksWithLocallyDeclaredMetaComponentScanConfigurationSubclass() {, +		beanFactory.registerBeanDefinition("config", new RootBeanDefinition(, +			SubMetaComponentScanConfigurationClass.class));, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.setEnvironment(new StandardEnvironment());, +		pp.postProcessBeanFactory(beanFactory);, +		SimpleComponent simpleComponent = beanFactory.getBean(SimpleComponent.class);, +		assertNotNull(simpleComponent);, +	}, +, +	@Test, +	public void postProcessorWorksWithExternallyDeclaredComposedAnnotation() {, +		beanFactory.registerBeanDefinition("config", new RootBeanDefinition(, +			org.springframework.context.annotation.componentscan.meta.ComposedAnnotationConfig.class));, +	public static class ComposedConfigurationClass {, +	}, +, +	@ComposedConfiguration, +	@Retention(RetentionPolicy.RUNTIME), +	@Target(ElementType.TYPE), +	public static @interface ComposedComposedConfiguration {, +		String[] basePackages() default {};, +	}, +, +	@ComposedComposedConfiguration(basePackages = "org.springframework.context.annotation.componentscan.simple"), +	public static class ComposedComposedConfigurationClass {, +	}, +, +	@ComponentScan, +	@Retention(RetentionPolicy.RUNTIME), +	@Target(ElementType.TYPE), +	public static @interface MetaComponentScan {, +	}, +, +	@MetaComponentScan, +	@Configuration, +	@Retention(RetentionPolicy.RUNTIME), +	@Target(ElementType.TYPE), +	public static @interface MetaComponentScanConfiguration {]