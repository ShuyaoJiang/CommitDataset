[+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBean.java, +import org.hibernate.cache.spi.RegionFactory;, +	private RegionFactory cacheRegionFactory;, +, +	@Nullable, +	private Properties hibernateProperties;, +	private TypeFilter[] entityTypeFilters;, +	 * Set a Hibernate 5 {@link ImplicitNamingStrategy} for the SessionFactory., +	 * Set a Hibernate 5 {@link PhysicalNamingStrategy} for the SessionFactory., +	 * Set the Hibernate {@link RegionFactory} to use for the SessionFactory., +	 * Allows for using a Spring-managed {@code RegionFactory} instance., +	 * <p>Note: If this is set, the Hibernate settings should not define a, +	 * cache provider to avoid meaningless double configuration., +	 * @since 5.1, +	 * @see LocalSessionFactoryBuilder#setCacheRegionFactory, +	 */, +	public void setCacheRegionFactory(RegionFactory cacheRegionFactory) {, +		this.cacheRegionFactory = cacheRegionFactory;, +	}, +, +	/**, +	 * Specify custom type filters for Spring-based scanning for entity classes., +	 * <p>Default is to search all specified packages for classes annotated with, +	 * {@code @javax.persistence.Entity}, {@code @javax.persistence.Embeddable}, +	 * or {@code @javax.persistence.MappedSuperclass}., +	 * @see #setPackagesToScan, +	 */, +	public void setEntityTypeFilters(TypeFilter... entityTypeFilters) {, +		this.entityTypeFilters = entityTypeFilters;, +	}, +, +	/**, +		if (this.cacheRegionFactory != null) {, +			sfb.setCacheRegionFactory(this.cacheRegionFactory);, +		}, +, +		if (this.entityTypeFilters != null) {, +			sfb.setEntityTypeFilters(this.entityTypeFilters);, +		}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBean.java, +import org.hibernate.cache.spi.RegionFactory;, +	private RegionFactory cacheRegionFactory;, +, +	@Nullable, +	private Properties hibernateProperties;, +	private TypeFilter[] entityTypeFilters;, +	 * Set a Hibernate 5 {@link ImplicitNamingStrategy} for the SessionFactory., +	 * Set a Hibernate 5 {@link PhysicalNamingStrategy} for the SessionFactory., +	 * Set the Hibernate {@link RegionFactory} to use for the SessionFactory., +	 * Allows for using a Spring-managed {@code RegionFactory} instance., +	 * <p>Note: If this is set, the Hibernate settings should not define a, +	 * cache provider to avoid meaningless double configuration., +	 * @since 5.1, +	 * @see LocalSessionFactoryBuilder#setCacheRegionFactory, +	 */, +	public void setCacheRegionFactory(RegionFactory cacheRegionFactory) {, +		this.cacheRegionFactory = cacheRegionFactory;, +	}, +, +	/**, +	 * Specify custom type filters for Spring-based scanning for entity classes., +	 * <p>Default is to search all specified packages for classes annotated with, +	 * {@code @javax.persistence.Entity}, {@code @javax.persistence.Embeddable}, +	 * or {@code @javax.persistence.MappedSuperclass}., +	 * @see #setPackagesToScan, +	 */, +	public void setEntityTypeFilters(TypeFilter... entityTypeFilters) {, +		this.entityTypeFilters = entityTypeFilters;, +	}, +, +	/**, +		if (this.cacheRegionFactory != null) {, +			sfb.setCacheRegionFactory(this.cacheRegionFactory);, +		}, +, +		if (this.entityTypeFilters != null) {, +			sfb.setEntityTypeFilters(this.entityTypeFilters);, +		}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBuilder.java, +import org.hibernate.cache.spi.RegionFactory;, +	 * Set the Hibernate {@link RegionFactory} to use for the SessionFactory., +	 * Allows for using a Spring-managed {@code RegionFactory} instance., +	 * <p>Note: If this is set, the Hibernate settings should not define a, +	 * cache provider to avoid meaningless double configuration., +	 * @since 5.1, +	 * @see AvailableSettings#CACHE_REGION_FACTORY, +	 */, +	public LocalSessionFactoryBuilder setCacheRegionFactory(RegionFactory cacheRegionFactory) {, +		getProperties().put(AvailableSettings.CACHE_REGION_FACTORY, cacheRegionFactory);, +		return this;, +	}, +, +	/**]