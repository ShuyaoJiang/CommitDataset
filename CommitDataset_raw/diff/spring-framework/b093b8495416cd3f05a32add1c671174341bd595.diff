[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, + * Copyright 2002-2013 the original author or authors., +				Class<?> beanClass = mbd.getBeanClass();, +				Class<?>[] paramTypes = candidate.getParameterTypes();, +		Class<?> factoryClass;, +			final Class<?> factoryClazz = factoryClass;, +				Class<?>[] paramTypes = candidate.getParameterTypes();, +					// Find out about ambiguity: In case of the same type difference weight, +					// for methods with the same number of parameters, collect such candidates, +					// and eventually raise an ambiguity exception., +					// However, only perform that check in non-lenient constructor resolution mode,, +					// and explicitly ignore overridden methods (with the same parameter signature)., +					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&, +							!mbd.isLenientConstructorResolution() &&, +							paramTypes.length == factoryMethodToUse.getParameterTypes().length &&, +							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {, +			else if (ambiguousFactoryMethods != null) {, +			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor,, +		Class<?>[] paramTypes = (methodOrCtor instanceof Method ?, +		public int getTypeDifferenceWeight(Class<?>[] paramTypes) {, +		public int getAssignabilityWeight(Class<?>[] paramTypes) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, + * Copyright 2002-2013 the original author or authors., +				Class<?> beanClass = mbd.getBeanClass();, +				Class<?>[] paramTypes = candidate.getParameterTypes();, +		Class<?> factoryClass;, +			final Class<?> factoryClazz = factoryClass;, +				Class<?>[] paramTypes = candidate.getParameterTypes();, +					// Find out about ambiguity: In case of the same type difference weight, +					// for methods with the same number of parameters, collect such candidates, +					// and eventually raise an ambiguity exception., +					// However, only perform that check in non-lenient constructor resolution mode,, +					// and explicitly ignore overridden methods (with the same parameter signature)., +					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&, +							!mbd.isLenientConstructorResolution() &&, +							paramTypes.length == factoryMethodToUse.getParameterTypes().length &&, +							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {, +			else if (ambiguousFactoryMethods != null) {, +			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor,, +		Class<?>[] paramTypes = (methodOrCtor instanceof Method ?, +		public int getTypeDifferenceWeight(Class<?>[] paramTypes) {, +		public int getAssignabilityWeight(Class<?>[] paramTypes) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +			setLenientConstructorResolution(false);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, + * Copyright 2002-2013 the original author or authors., +				Class<?> beanClass = mbd.getBeanClass();, +				Class<?>[] paramTypes = candidate.getParameterTypes();, +		Class<?> factoryClass;, +			final Class<?> factoryClazz = factoryClass;, +				Class<?>[] paramTypes = candidate.getParameterTypes();, +					// Find out about ambiguity: In case of the same type difference weight, +					// for methods with the same number of parameters, collect such candidates, +					// and eventually raise an ambiguity exception., +					// However, only perform that check in non-lenient constructor resolution mode,, +					// and explicitly ignore overridden methods (with the same parameter signature)., +					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&, +							!mbd.isLenientConstructorResolution() &&, +							paramTypes.length == factoryMethodToUse.getParameterTypes().length &&, +							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {, +			else if (ambiguousFactoryMethods != null) {, +			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor,, +		Class<?>[] paramTypes = (methodOrCtor instanceof Method ?, +		public int getTypeDifferenceWeight(Class<?>[] paramTypes) {, +		public int getAssignabilityWeight(Class<?>[] paramTypes) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +			setLenientConstructorResolution(false);, +++ b/spring-context/src/test/java/org/springframework/context/annotation/BeanMethodPolymorphismTests.java, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, + * Copyright 2002-2013 the original author or authors., +				Class<?> beanClass = mbd.getBeanClass();, +				Class<?>[] paramTypes = candidate.getParameterTypes();, +		Class<?> factoryClass;, +			final Class<?> factoryClazz = factoryClass;, +				Class<?>[] paramTypes = candidate.getParameterTypes();, +					// Find out about ambiguity: In case of the same type difference weight, +					// for methods with the same number of parameters, collect such candidates, +					// and eventually raise an ambiguity exception., +					// However, only perform that check in non-lenient constructor resolution mode,, +					// and explicitly ignore overridden methods (with the same parameter signature)., +					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&, +							!mbd.isLenientConstructorResolution() &&, +							paramTypes.length == factoryMethodToUse.getParameterTypes().length &&, +							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {, +			else if (ambiguousFactoryMethods != null) {, +			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor,, +		Class<?>[] paramTypes = (methodOrCtor instanceof Method ?, +		public int getTypeDifferenceWeight(Class<?>[] paramTypes) {, +		public int getAssignabilityWeight(Class<?>[] paramTypes) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +			setLenientConstructorResolution(false);, +++ b/spring-context/src/test/java/org/springframework/context/annotation/BeanMethodPolymorphismTests.java, +, +++ b/spring-core/src/main/java/org/springframework/util/MethodInvoker.java, + * Copyright 2002-2013 the original author or authors., +	private Class<?> targetClass;, +	public void setTargetClass(Class<?> targetClass) {, +	public Class<?> getTargetClass() {, +		Class<?> targetClass = getTargetClass();]