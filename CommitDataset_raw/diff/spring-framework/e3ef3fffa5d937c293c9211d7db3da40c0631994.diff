[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java, +	/**, +	 * See STOMP Spec 1.2:, +	 * <a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>., +	 */, +	private String unescape(String inString) {, +, +		StringBuilder sb = new StringBuilder();, +		int pos = 0; // position in the old string, +		int index = inString.indexOf("\\");, +, +		while (index >= 0) {, +			sb.append(inString.substring(pos, index));, +			Character c = inString.charAt(index + 1);, +			if (c == 'r') {, +				sb.append('\r');, +			}, +			else if (c == 'n') {, +				sb.append('\n');, +			}, +			else if (c == 'c') {, +				sb.append(':');, +			}, +			else if (c == '\\') {, +				sb.append('\\');, +			}, +			else {, +				// should never happen, +				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString);, +			}, +			pos = index + 2;, +			index = inString.indexOf("\\", pos);, +		}, +, +		sb.append(inString.substring(pos));, +		return sb.toString();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java, +	/**, +	 * See STOMP Spec 1.2:, +	 * <a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>., +	 */, +	private String unescape(String inString) {, +, +		StringBuilder sb = new StringBuilder();, +		int pos = 0; // position in the old string, +		int index = inString.indexOf("\\");, +, +		while (index >= 0) {, +			sb.append(inString.substring(pos, index));, +			Character c = inString.charAt(index + 1);, +			if (c == 'r') {, +				sb.append('\r');, +			}, +			else if (c == 'n') {, +				sb.append('\n');, +			}, +			else if (c == 'c') {, +				sb.append(':');, +			}, +			else if (c == '\\') {, +				sb.append('\\');, +			}, +			else {, +				// should never happen, +				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString);, +			}, +			pos = index + 2;, +			index = inString.indexOf("\\", pos);, +		}, +, +		sb.append(inString.substring(pos));, +		return sb.toString();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompEncoder.java, + * @author Rossen Stoyanchev, +		boolean escapeHeaders = shouldEscapeHeaders(headers);, +			byte[] key = toUtf8Bytes(entry.getKey(), escapeHeaders);, +				output.write(toUtf8Bytes(value, escapeHeaders));, +			int contentLength = message.getPayload().length;, +			output.write(Integer.toString(contentLength).getBytes(UTF8_CHARSET));, +	private boolean shouldEscapeHeaders(StompHeaderAccessor headers) {, +		return (headers.getCommand() != StompCommand.CONNECT && headers.getCommand() != StompCommand.CONNECTED);, +	private byte[] toUtf8Bytes(String input, boolean escape) {, +		input = escape ? escape(input) : input;, +, +	/**, +	 * See STOMP Spec 1.2:, +	 * <a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>., +	 */, +	private String escape(String inString) {, +		StringBuilder sb = new StringBuilder(inString.length());, +		for (int i = 0; i < inString.length(); i++) {, +			char c = inString.charAt(i);, +			if (c == '\\') {, +				sb.append("\\\\");, +			}, +			else if (c == ':') {, +				sb.append("\\c");, +			}, +			else if (c == '\n') {, +				 sb.append("\\n");]