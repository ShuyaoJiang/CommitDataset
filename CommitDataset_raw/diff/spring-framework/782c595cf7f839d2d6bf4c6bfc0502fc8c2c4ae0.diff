[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistration.java, +public class InterceptorRegistration {, +	private int order = 0;, +, +	 * An order position to be used, default is 0., +	 */, +	public InterceptorRegistration order(int order){, +		this.order = order;, +		return this;, +	}, +, +	protected int getOrder() {, +		return this.order;, +	}, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistration.java, +public class InterceptorRegistration {, +	private int order = 0;, +, +	 * An order position to be used, default is 0., +	 */, +	public InterceptorRegistration order(int order){, +		this.order = order;, +		return this;, +	}, +, +	protected int getOrder() {, +		return this.order;, +	}, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistry.java, +import java.util.Comparator;, +import org.springframework.core.Ordered;, +				.sorted(INTERCEPTOR_ORDER_COMPARATOR), +, +	private static final Comparator<Object> INTERCEPTOR_ORDER_COMPARATOR =, +			OrderComparator.INSTANCE.withSourceProvider(object -> {, +				if (object instanceof InterceptorRegistration) {, +					return (Ordered) ((InterceptorRegistration) object)::getOrder;, +				}, +				return null;, +			});, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistration.java, +public class InterceptorRegistration {, +	private int order = 0;, +, +	 * An order position to be used, default is 0., +	 */, +	public InterceptorRegistration order(int order){, +		this.order = order;, +		return this;, +	}, +, +	protected int getOrder() {, +		return this.order;, +	}, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistry.java, +import java.util.Comparator;, +import org.springframework.core.Ordered;, +				.sorted(INTERCEPTOR_ORDER_COMPARATOR), +, +	private static final Comparator<Object> INTERCEPTOR_ORDER_COMPARATOR =, +			OrderComparator.INSTANCE.withSourceProvider(object -> {, +				if (object instanceof InterceptorRegistration) {, +					return (Ordered) ((InterceptorRegistration) object)::getOrder;, +				}, +				return null;, +			});, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/InterceptorRegistryTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +		this.registry.addInterceptor(this.interceptor1).order(Ordered.LOWEST_PRECEDENCE);, +		this.registry.addInterceptor(this.interceptor2).order(Ordered.HIGHEST_PRECEDENCE);, +		List<Object> interceptors = this.registry.getInterceptors();, +		assertSame(this.interceptor2, interceptors.get(0));, +		assertSame(this.interceptor1, interceptors.get(1));, +		this.registry.addInterceptor(this.interceptor1).order(0);, +		this.registry.addInterceptor(this.interceptor2).order(0);, +		List<Object> interceptors = this.registry.getInterceptors();, +		assertSame(this.interceptor1, interceptors.get(0));, +		assertSame(this.interceptor2, interceptors.get(1));]