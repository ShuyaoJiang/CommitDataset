[+++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/annotation/support/AnnotationExceptionHandlerMethodResolverTests.java, + * Copyright 2002-2018 the original author or authors., +	@Test, +	public void resolveMethodAgainstCause() {, +		IllegalStateException exception = new IllegalStateException(new IOException());, +		assertEquals("handleIOException", this.resolver.resolveMethod(exception).getName());, +	}, +, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/annotation/support/AnnotationExceptionHandlerMethodResolverTests.java, + * Copyright 2002-2018 the original author or authors., +	@Test, +	public void resolveMethodAgainstCause() {, +		IllegalStateException exception = new IllegalStateException(new IOException());, +		assertEquals("handleIOException", this.resolver.resolveMethod(exception).getName());, +	}, +, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandlerTests.java, + * Copyright 2002-2018 the original author or authors., +	public void exceptionAsCause() {, +		Message<?> message = createMessage("/pre/illegalStateCause");, +		this.messageHandler.registerHandler(this.testController);, +		this.messageHandler.handleMessage(message);, +, +		assertEquals("handleExceptionWithHandlerMethodArg", this.testController.method);, +		HandlerMethod handlerMethod = (HandlerMethod) this.testController.arguments.get("handlerMethod");, +		assertNotNull(handlerMethod);, +		assertEquals("illegalStateCause", handlerMethod.getMethod().getName());, +	}, +, +	@Test, +	public void errorAsMessageHandlingException() {, +		Message<?> message = createMessage("/pre/error");, +		this.messageHandler.registerHandler(this.testController);, +		this.messageHandler.handleMessage(message);, +, +		assertEquals("handleErrorWithHandlerMethodArg", this.testController.method);, +		HandlerMethod handlerMethod = (HandlerMethod) this.testController.arguments.get("handlerMethod");, +		assertNotNull(handlerMethod);, +		assertEquals("errorAsThrowable", handlerMethod.getMethod().getName());, +	}, +, +	@Test, +			throw new IllegalStateException("my cause");, +		}, +, +		@MessageMapping("/illegalStateCause"), +		public void illegalStateCause() {, +			throw new RuntimeException(new IllegalStateException("my cause"));, +		}, +, +		@MessageMapping("/error"), +		public void errorAsThrowable() {, +			throw new Error("my cause");, +		@MessageExceptionHandler, +		public void handleExceptionWithHandlerMethodArg(IllegalStateException ex, HandlerMethod handlerMethod) {, +			assertEquals("my cause", ex.getMessage());, +		}, +, +		@MessageExceptionHandler, +		public void handleErrorWithHandlerMethodArg(Error ex, HandlerMethod handlerMethod) {, +			this.method = "handleErrorWithHandlerMethodArg";, +			this.arguments.put("handlerMethod", handlerMethod);, +			assertEquals("my cause", ex.getMessage());]