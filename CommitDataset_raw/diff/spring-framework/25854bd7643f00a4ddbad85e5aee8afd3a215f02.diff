[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Constant defining an 'unknown' TypeDescriptor., +	/**, +	 * Returns map key type as a type descriptor., +	 */, +	/**, +	 * Returns map value type as a type descriptor., +	 */, +		return type != null && ClassUtils.isAssignableValue(getType(), obj);, +		if (targetType == TypeDescriptor.NULL) {, +			return false;, +		}, +		Class<?> type = getType();, +		return type != null && ClassUtils.isAssignable(targetType.getType(), type);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Constant defining an 'unknown' TypeDescriptor., +	/**, +	 * Returns map key type as a type descriptor., +	 */, +	/**, +	 * Returns map value type as a type descriptor., +	 */, +		return type != null && ClassUtils.isAssignableValue(getType(), obj);, +		if (targetType == TypeDescriptor.NULL) {, +			return false;, +		}, +		Class<?> type = getType();, +		return type != null && ClassUtils.isAssignable(targetType.getType(), type);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionGenericConverter.java, +		return TypeDescriptor.NULL;, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Constant defining an 'unknown' TypeDescriptor., +	/**, +	 * Returns map key type as a type descriptor., +	 */, +	/**, +	 * Returns map value type as a type descriptor., +	 */, +		return type != null && ClassUtils.isAssignableValue(getType(), obj);, +		if (targetType == TypeDescriptor.NULL) {, +			return false;, +		}, +		Class<?> type = getType();, +		return type != null && ClassUtils.isAssignable(targetType.getType(), type);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionGenericConverter.java, +		return TypeDescriptor.NULL;, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/MapGenericConverter.java, +		if (sourceKeyType != TypeDescriptor.NULL && targetKeyType != TypeDescriptor.NULL && sourceKeyType.isAssignableTo(targetKeyType)) {, +		if (sourceValueType != TypeDescriptor.NULL && targetValueType != TypeDescriptor.NULL && sourceValueType.isAssignableTo(targetValueType)) {]