[+++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2014 the original author or authors., +		if (value != null && type != null && !type.isInstance(value)) {, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2014 the original author or authors., +		if (value != null && type != null && !type.isInstance(value)) {, +++ b/spring-context-support/src/main/java/org/springframework/cache/guava/GuavaCache.java, + * Copyright 2002-2014 the original author or authors., +		if (value != null && type != null && !type.isInstance(value)) {, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2014 the original author or authors., +		if (value != null && type != null && !type.isInstance(value)) {, +++ b/spring-context-support/src/main/java/org/springframework/cache/guava/GuavaCache.java, + * Copyright 2002-2014 the original author or authors., +		if (value != null && type != null && !type.isInstance(value)) {, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java, + * Copyright 2002-2014 the original author or authors., +		if (value != null && type != null && !type.isInstance(value)) {, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2014 the original author or authors., +		if (value != null && type != null && !type.isInstance(value)) {, +++ b/spring-context-support/src/main/java/org/springframework/cache/guava/GuavaCache.java, + * Copyright 2002-2014 the original author or authors., +		if (value != null && type != null && !type.isInstance(value)) {, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java, + * Copyright 2002-2014 the original author or authors., +		if (value != null && type != null && !type.isInstance(value)) {, +++ b/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheCacheTests.java, + * Copyright 2010-2014 the original author or authors., + * @author Juergen Hoeller, +		assertNull(cache.get(key, String.class));, +		assertNull(cache.get(key, Object.class));, +, +, +		cache.put(key, null);, +		assertNotNull(cache.get(key));, +		assertNull(cache.get(key).get());, +		assertNull(cache.get(key, String.class));, +		assertNull(cache.get(key, Object.class));, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2014 the original author or authors., +		if (value != null && type != null && !type.isInstance(value)) {, +++ b/spring-context-support/src/main/java/org/springframework/cache/guava/GuavaCache.java, + * Copyright 2002-2014 the original author or authors., +		if (value != null && type != null && !type.isInstance(value)) {, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java, + * Copyright 2002-2014 the original author or authors., +		if (value != null && type != null && !type.isInstance(value)) {, +++ b/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheCacheTests.java, + * Copyright 2010-2014 the original author or authors., + * @author Juergen Hoeller, +		assertNull(cache.get(key, String.class));, +		assertNull(cache.get(key, Object.class));, +, +, +		cache.put(key, null);, +		assertNotNull(cache.get(key));, +		assertNull(cache.get(key).get());, +		assertNull(cache.get(key, String.class));, +		assertNull(cache.get(key, Object.class));, +++ b/spring-context/src/main/java/org/springframework/cache/Cache.java, + * Copyright 2002-2014 the original author or authors., + * @author Juergen Hoeller, +	 * @param type the required type of the returned value (may be, +	 * {@code null} to bypass a type check; in case of a {@code null}, +	 * value found in the cache, the specified type is irrelevant), +	 * @since 4.0, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2014 the original author or authors., +		if (value != null && type != null && !type.isInstance(value)) {, +++ b/spring-context-support/src/main/java/org/springframework/cache/guava/GuavaCache.java, + * Copyright 2002-2014 the original author or authors., +		if (value != null && type != null && !type.isInstance(value)) {, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java, + * Copyright 2002-2014 the original author or authors., +		if (value != null && type != null && !type.isInstance(value)) {, +++ b/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheCacheTests.java, + * Copyright 2010-2014 the original author or authors., + * @author Juergen Hoeller, +		assertNull(cache.get(key, String.class));, +		assertNull(cache.get(key, Object.class));, +, +, +		cache.put(key, null);, +		assertNotNull(cache.get(key));, +		assertNull(cache.get(key).get());, +		assertNull(cache.get(key, String.class));, +		assertNull(cache.get(key, Object.class));, +++ b/spring-context/src/main/java/org/springframework/cache/Cache.java, + * Copyright 2002-2014 the original author or authors., + * @author Juergen Hoeller, +	 * @param type the required type of the returned value (may be, +	 * {@code null} to bypass a type check; in case of a {@code null}, +	 * value found in the cache, the specified type is irrelevant), +	 * @since 4.0, +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCache.java, + * Copyright 2002-2014 the original author or authors., +		if (value != null && type != null && !type.isInstance(value)) {, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2014 the original author or authors.]