[+++ b/spring-context/src/main/java/org/springframework/context/annotation/Configuration.java, + * <p>{@code @Configuration} classes are typically bootstrapped using either, + * <p>See the {@link AnnotationConfigApplicationContext} javadocs for further details, and see, + * AnnotationConfigWebApplicationContext} for web configuration instructions in a, + * {@code Servlet} container., + *, + * <p>In the example above, {@code <context:annotation-config/>} is required in order to, + * <p>See the {@link ComponentScan @ComponentScan} javadocs for details., + * <p>Externalized values may be looked up by injecting the Spring, + * <p>Properties resolved through the {@code Environment} reside in one or more "property, + * <p>See the {@link org.springframework.core.env.Environment Environment}, + * and {@link PropertySource @PropertySource} javadocs for further details., + * <p>Externalized values may be injected {@code @Configuration} classes using the, + * {@link Value @Value} annotation:, + * <p>This approach is most useful when using Spring's, + * see the {@link Value @Value} javadocs, and see the {@link Bean @Bean} javadocs for, + * details on working with {@code BeanFactoryPostProcessor} types such as, + * <p>Now both {@code AppConfig} and the imported {@code DatabaseConfig} can be bootstrapped, + * <p>{@code @Configuration} classes may be marked with the {@link Profile @Profile} annotation to, + * <p>Alternatively, you may also declare profile conditions at the {@code @Bean} method level, + * &mdash; for example, for alternative bean variants within the same configuration class:, + * <p>See the {@link Profile @Profile} and {@link org.springframework.core.env.Environment}, + * <p>As mentioned above, {@code @Configuration} classes may be declared as regular Spring, + * <p>{@code @Configuration} classes may be nested within one another as follows:, + * <p>When bootstrapping such an arrangement, only {@code AppConfig} need be registered, + * {@code AppConfig} and {@code DatabaseConfig} is already implicitly clear., + * <p>The Spring <em>TestContext framework</em> available in the {@code spring-test} module, + * <p>Spring features such as asynchronous method execution, scheduled task execution,, + * configured from {@code @Configuration} classes using their respective "{@code @Enable}", + * annotations. See, +	 * Explicitly specify the name of the Spring bean definition associated with the, +	 * {@code @Configuration} class. If left unspecified (the common case), a bean, +	 * name will be automatically generated., +	 * <p>The custom name applies only if the {@code @Configuration} class is picked, +	 * up via component scanning or supplied directly to an, +	 * {@link AnnotationConfigApplicationContext}. If the {@code @Configuration} class, +	 * is registered as a traditional XML bean definition, the name/id of the bean, +	 * element will take precedence., +	 * @return the explicit component name, if any (or empty String otherwise)]