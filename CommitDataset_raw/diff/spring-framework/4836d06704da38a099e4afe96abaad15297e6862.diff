[+++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessorTests.java, +import org.springframework.core.annotation.AliasFor;, +	public void composedAnnotationWithInitialDelayAndFixedRate() {, +		BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class);, +		BeanDefinition targetDefinition = new RootBeanDefinition(ComposedAnnotationFixedRateTestBean.class);, +		context.registerBeanDefinition("postProcessor", processorDefinition);, +		context.registerBeanDefinition("target", targetDefinition);, +		context.refresh();, +, +		Object postProcessor = context.getBean("postProcessor");, +		Object target = context.getBean("target");, +		ScheduledTaskRegistrar registrar = (ScheduledTaskRegistrar) new DirectFieldAccessor(, +			postProcessor).getPropertyValue("registrar");, +		@SuppressWarnings("unchecked"), +		List<IntervalTask> fixedRateTasks = (List<IntervalTask>) new DirectFieldAccessor(registrar).getPropertyValue(, +			"fixedRateTasks");, +		assertEquals(1, fixedRateTasks.size());, +		IntervalTask task = fixedRateTasks.get(0);, +		ScheduledMethodRunnable runnable = (ScheduledMethodRunnable) task.getRunnable();, +		Object targetObject = runnable.getTarget();, +		Method targetMethod = runnable.getMethod();, +		assertEquals(target, targetObject);, +		assertEquals("checkForUpdates", targetMethod.getName());, +		assertEquals(5000L, task.getInterval());, +		assertEquals(1000L, task.getInitialDelay());, +	}, +, +	@Test, +	interface FixedRatesDefaultMethod {, +	private @interface EveryFiveSeconds {, +	}, +	private @interface Hourly {, +	}, +	@Scheduled(initialDelay = 1000), +	@Retention(RetentionPolicy.RUNTIME), +	private @interface WaitASec {, +, +		@AliasFor(annotation = Scheduled.class), +		long fixedDelay() default -1;, +, +		@AliasFor(annotation = Scheduled.class), +		long fixedRate() default -1;, +	}, +	static class ComposedAnnotationFixedRateTestBean {, +, +		@WaitASec(fixedRate = 5000), +		public void checkForUpdates() {, +		}, +	}, +	private @interface BusinessHours {]