[+++ b/spring-web/src/main/java/org/springframework/web/util/pattern/RegexPathElement.java, +				int pos = matcher.start();, +				if (pos < 1 || text.charAt(pos-1) != '.') {, +					// To be compatible with the AntPathMatcher comparator, , +					// '.*' is not considered a wildcard usage, +			}, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/RegexPathElement.java, +				int pos = matcher.start();, +				if (pos < 1 || text.charAt(pos-1) != '.') {, +					// To be compatible with the AntPathMatcher comparator, , +					// '.*' is not considered a wildcard usage, +			}, +++ b/spring-web/src/test/java/org/springframework/web/util/pattern/PathPatternMatcherTests.java, +import org.hamcrest.Matchers;, +	public void compare_spr15597() {, +		PathPatternParser parser = new PathPatternParser();, +		PathPattern p1 = parser.parse("/{foo}");, +		PathPattern p2 = parser.parse("/{foo}.*");, +		Map<String, String> r1 = p1.matchAndExtract("/file.txt");, +		Map<String, String> r2 = p2.matchAndExtract("/file.txt");, +		 , +		// works fine, +		assertEquals(r1.get("foo"), "file.txt");, +		assertEquals(r2.get("foo"), "file");, +, +		// This produces 2 (see comments in https://jira.spring.io/browse/SPR-14544 ), +		// Comparator<String> patternComparator = new AntPathMatcher().getPatternComparator("");, +		// System.out.println(patternComparator.compare("/{foo}","/{foo}.*"));, +, +		assertThat(p1.compareTo(p2), Matchers.greaterThan(0));, +	}, +, +	@Test]