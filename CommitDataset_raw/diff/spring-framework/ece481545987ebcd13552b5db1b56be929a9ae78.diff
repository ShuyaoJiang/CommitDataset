[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +		if (this.logger.isTraceEnabled()) {, +			this.logger.trace(this.state + " onError: " + t);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +		if (this.logger.isTraceEnabled()) {, +			this.logger.trace(this.state + " onError: " + t);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java, +			ServletRequest request = getRequest();, +			if (request != null && request.isAsyncStarted()) {, +		}, +			ServletRequest request = getRequest();, +			if (request != null && request.isAsyncStarted()) {, +		private ServletRequest getRequest() {, +			ServletRequest request = null;, +			try {, +				request = this.asyncContext.getRequest();, +			} catch (IllegalStateException ignore) {, +				// AsyncContext has been recycled and should not be used, +			}, +			return request;, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +		if (this.logger.isTraceEnabled()) {, +			this.logger.trace(this.state + " onError: " + t);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java, +			ServletRequest request = getRequest();, +			if (request != null && request.isAsyncStarted()) {, +		}, +			ServletRequest request = getRequest();, +			if (request != null && request.isAsyncStarted()) {, +		private ServletRequest getRequest() {, +			ServletRequest request = null;, +			try {, +				request = this.asyncContext.getRequest();, +			} catch (IllegalStateException ignore) {, +				// AsyncContext has been recycled and should not be used, +			}, +			return request;, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpResponse.java, +			event.getAsyncContext().complete();, +			event.getAsyncContext().complete();]