[+++ b/spring-core/src/test/java/org/springframework/core/annotation/MissingMergedAnnotationTests.java, +/*, + * Copyright 2002-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.core.annotation;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.util.Collections;, +import java.util.Map;, +import java.util.NoSuchElementException;, +, +import org.assertj.core.api.ThrowableTypeAssert;, +import org.junit.Test;, +, +import org.springframework.util.ConcurrentReferenceHashMap;, +, +import static org.assertj.core.api.Assertions.*;, +, +/**, + * Tests for {@link MissingMergedAnnotation}., + *, + * @author Phillip Webb, + */, +public class MissingMergedAnnotationTests {, +, +	private final MergedAnnotation<?> missing = MissingMergedAnnotation.getInstance();, +, +	@Test, +	public void getTypeThrowsNoSuchElementException() {, +		assertThatNoSuchElementException().isThrownBy(() -> this.missing.getType());, +	}, +, +	@Test, +	public void isPresentReturnsFalse() {, +		assertThat(this.missing.isPresent()).isFalse();, +	}, +, +	@Test, +	public void isDirectlyPresentReturnsFalse() {, +		assertThat(this.missing.isDirectlyPresent()).isFalse();, +	}, +, +	@Test, +	public void isMetaPresentReturnsFalse() {, +		assertThat(this.missing.isMetaPresent()).isFalse();, +	}, +, +	@Test, +	public void getDepthReturnsMinusOne() {, +		assertThat(this.missing.getDepth()).isEqualTo(-1);, +	}, +, +	@Test, +	public void getAggregateIndexReturnsMinusOne() {, +		assertThat(this.missing.getAggregateIndex()).isEqualTo(-1);, +	}, +, +	@Test, +	public void getSourceReturnsNull() {, +		assertThat(this.missing.getSource()).isNull();, +	}, +, +	@Test, +	public void getParentReturnsNull() {, +		assertThat(this.missing.getParent()).isNull();, +	}, +, +	@Test, +	public void hasNonDefaultValueThrowsNoSuchElementException() {, +		assertThatNoSuchElementException().isThrownBy(, +				() -> this.missing.hasNonDefaultValue("value"));, +	}, +, +	@Test, +	public void hasDefaultValueThrowsNoSuchElementException() {, +		assertThatNoSuchElementException().isThrownBy(, +				() -> this.missing.hasDefaultValue("value"));, +	}, +, +	@Test, +	public void getByteThrowsNoSuchElementException() {, +		assertThatNoSuchElementException().isThrownBy(, +				() -> this.missing.getByte("value"));, +	}, +, +	@Test]