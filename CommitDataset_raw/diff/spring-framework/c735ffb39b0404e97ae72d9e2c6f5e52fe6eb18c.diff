[+++ b/spring-web/src/main/java/org/springframework/http/codec/ResourceHttpMessageWriter.java, +						.writeRegions(regions, mediaType, response, mergedHints);, +++ b/spring-web/src/main/java/org/springframework/http/codec/ResourceHttpMessageWriter.java, +						.writeRegions(regions, mediaType, response, mergedHints);, +++ b/spring-web/src/main/java/org/springframework/http/codec/ResourceRegionHttpMessageWriter.java, +import reactor.core.publisher.Flux;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferFactory;, + * Package private helper for {@link ResourceHttpMessageWriter} to assist with, + * writing {@link ResourceRegion ResourceRegion}s., + * @author Rossen Stoyanchev, +class ResourceRegionHttpMessageWriter {, +	private static final ResolvableType TYPE = ResolvableType.forClass(ResourceRegion.class);, +, +, +	private final ResourceRegionEncoder encoder;, +, +, +		this.encoder = new ResourceRegionEncoder();, +		this.encoder = new ResourceRegionEncoder(bufferSize);, +, +	public Mono<Void> writeRegions(Publisher<? extends ResourceRegion> inputStream, MediaType contentType,, +			ReactiveHttpOutputMessage outputMessage, Map<String, Object> hints) {, +, +			MediaType multipartType = MediaType.parseMediaType("multipart/byteranges;boundary=" + boundary);, +			outputMessage.getHeaders().setContentType(multipartType);, +, +			DataBufferFactory bufferFactory = outputMessage.bufferFactory();, +			Flux<DataBuffer> body = this.encoder.encode(inputStream, bufferFactory, TYPE, contentType, hints);, +			return outputMessage.writeWith(body);, +						return writeResourceRegion(region, outputMessage);, +	private Mono<Void> writeResourceRegion(ResourceRegion region, ReactiveHttpOutputMessage outputMessage) {, +, +, +		DataBufferFactory bufferFactory = outputMessage.bufferFactory();, +		MediaType contentType = outputMessage.getHeaders().getContentType();, +		Map<String, Object> hints = Collections.emptyMap();, +, +		Flux<DataBuffer> body = this.encoder.encode(Mono.just(region), bufferFactory, TYPE, contentType, hints);, +		return outputMessage.writeWith(body);, +++ b/spring-web/src/main/java/org/springframework/http/codec/ResourceHttpMessageWriter.java, +						.writeRegions(regions, mediaType, response, mergedHints);, +++ b/spring-web/src/main/java/org/springframework/http/codec/ResourceRegionHttpMessageWriter.java, +import reactor.core.publisher.Flux;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferFactory;, + * Package private helper for {@link ResourceHttpMessageWriter} to assist with, + * writing {@link ResourceRegion ResourceRegion}s., + * @author Rossen Stoyanchev, +class ResourceRegionHttpMessageWriter {, +	private static final ResolvableType TYPE = ResolvableType.forClass(ResourceRegion.class);, +, +, +	private final ResourceRegionEncoder encoder;, +, +, +		this.encoder = new ResourceRegionEncoder();, +		this.encoder = new ResourceRegionEncoder(bufferSize);, +, +	public Mono<Void> writeRegions(Publisher<? extends ResourceRegion> inputStream, MediaType contentType,, +			ReactiveHttpOutputMessage outputMessage, Map<String, Object> hints) {, +, +			MediaType multipartType = MediaType.parseMediaType("multipart/byteranges;boundary=" + boundary);, +			outputMessage.getHeaders().setContentType(multipartType);, +, +			DataBufferFactory bufferFactory = outputMessage.bufferFactory();, +			Flux<DataBuffer> body = this.encoder.encode(inputStream, bufferFactory, TYPE, contentType, hints);, +			return outputMessage.writeWith(body);, +						return writeResourceRegion(region, outputMessage);, +	private Mono<Void> writeResourceRegion(ResourceRegion region, ReactiveHttpOutputMessage outputMessage) {, +, +, +		DataBufferFactory bufferFactory = outputMessage.bufferFactory();, +		MediaType contentType = outputMessage.getHeaders().getContentType();, +		Map<String, Object> hints = Collections.emptyMap();, +, +		Flux<DataBuffer> body = this.encoder.encode(Mono.just(region), bufferFactory, TYPE, contentType, hints);, +		return outputMessage.writeWith(body);, +++ b/spring-web/src/test/java/org/springframework/http/codec/ResourceRegionHttpMessageWriterTests.java, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.startsWith;, +import static org.junit.Assert.assertArrayEquals;, +import static org.junit.Assert.assertThat;, +		Map<String, Object> hints = Collections.emptyMap();, +		Mono<Void> mono = this.writer.writeRegions(Mono.just(region), MediaType.TEXT_PLAIN, this.response, hints);, +		Mono<Void> mono = this.writer.writeRegions(regions, MediaType.TEXT_PLAIN, this.response, hints);, +++ b/spring-web/src/main/java/org/springframework/http/codec/ResourceHttpMessageWriter.java, +						.writeRegions(regions, mediaType, response, mergedHints);, +++ b/spring-web/src/main/java/org/springframework/http/codec/ResourceRegionHttpMessageWriter.java, +import reactor.core.publisher.Flux;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferFactory;, + * Package private helper for {@link ResourceHttpMessageWriter} to assist with, + * writing {@link ResourceRegion ResourceRegion}s., + * @author Rossen Stoyanchev, +class ResourceRegionHttpMessageWriter {, +	private static final ResolvableType TYPE = ResolvableType.forClass(ResourceRegion.class);, +, +, +	private final ResourceRegionEncoder encoder;]