[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DeprecatedBeanWarner.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.util.ClassUtils;, +	 * Set the name of the logger to use., +	 * The name will be passed to the underlying logger implementation through Commons Logging,, +	 * getting interpreted as log category according to the logger's configuration., +	 * <p>This can be specified to not log into the category of this warner class but rather, +	 * into a specific named category., +				String nameToLookup = beanName;, +				if (beanFactory.isFactoryBean(beanName)) {, +					nameToLookup = BeanFactory.FACTORY_BEAN_PREFIX + beanName;, +				}, +				Class<?> beanType = ClassUtils.getUserClass(beanFactory.getType(nameToLookup));, +					logDeprecatedBean(beanName, beanType, beanDefinition);, +	 * @param beanType the user-specified type of the deprecated bean, +	protected void logDeprecatedBean(String beanName, Class<?> beanType, BeanDefinition beanDefinition) {, +		builder.append(beanType);, +		writeToLog(builder.toString());, +	}, +, +	/**, +	 * Actually write to the underlying log., +	 * <p>The default implementations logs the message at "warn" level., +	 * @param message the message to write, +	 */, +	protected void writeToLog(String message) {, +		logger.warn(message);, +	 * <p>Default is {@code true} when the "warn" level is enabled., +	 * Subclasses can override this to change the level under which logging occurs., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DeprecatedBeanWarner.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.util.ClassUtils;, +	 * Set the name of the logger to use., +	 * The name will be passed to the underlying logger implementation through Commons Logging,, +	 * getting interpreted as log category according to the logger's configuration., +	 * <p>This can be specified to not log into the category of this warner class but rather, +	 * into a specific named category., +				String nameToLookup = beanName;, +				if (beanFactory.isFactoryBean(beanName)) {, +					nameToLookup = BeanFactory.FACTORY_BEAN_PREFIX + beanName;, +				}, +				Class<?> beanType = ClassUtils.getUserClass(beanFactory.getType(nameToLookup));, +					logDeprecatedBean(beanName, beanType, beanDefinition);, +	 * @param beanType the user-specified type of the deprecated bean, +	protected void logDeprecatedBean(String beanName, Class<?> beanType, BeanDefinition beanDefinition) {, +		builder.append(beanType);, +		writeToLog(builder.toString());, +	}, +, +	/**, +	 * Actually write to the underlying log., +	 * <p>The default implementations logs the message at "warn" level., +	 * @param message the message to write, +	 */, +	protected void writeToLog(String message) {, +		logger.warn(message);, +	 * <p>Default is {@code true} when the "warn" level is enabled., +	 * Subclasses can override this to change the level under which logging occurs., +++ b/spring-beans/src/test/java/org/springframework/beans/factory/config/DeprecatedBeanWarnerTests.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.beans.factory.support.RootBeanDefinition;, +, +import static org.junit.Assert.*;, +, +		BeanDefinition def = new RootBeanDefinition(MyDeprecatedBean.class);, +, +		protected void logDeprecatedBean(String beanName, Class<?> beanType, BeanDefinition beanDefinition) {]