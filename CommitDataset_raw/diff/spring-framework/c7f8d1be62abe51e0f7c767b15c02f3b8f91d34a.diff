[+++ b/org.springframework.core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java, + * Copyright 2002-2009 the original author or authors., +import static org.junit.Assert.*;, +import org.springframework.util.ReflectionUtils;, +, +		for (TypeVariable<?> variable : variables) {, +		Method bridgeMethod = DateAdder.class.getMethod("add", Object.class);, +		assertTrue(bridgeMethod.isBridge());, +		Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(bridgeMethod);, +		assertFalse(bridgedMethod.isBridge());, +		assertEquals("add", bridgedMethod.getName());, +		assertEquals(1, bridgedMethod.getParameterTypes().length);, +		assertEquals(Date.class, bridgedMethod.getParameterTypes()[0]);, +		for (Method method : methods) {, +		assertTrue(bridgeMethod != null && bridgeMethod.isBridge());, +		assertTrue(bridgedMethod != null && !bridgedMethod.isBridge());, +		for (Method method : methods) {, +		Map<TypeVariable, Type> typeVariableMap = GenericTypeResolver.getTypeVariableMap(YourHomer.class);, +		Method bridgeMethod = ReflectionUtils.findMethod(GenericSqlMapIntegerDao.class, "saveOrUpdate", Object.class);, +		assertTrue(bridgeMethod != null && bridgeMethod.isBridge());, +		Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(bridgeMethod);, +		assertEquals("saveOrUpdate", bridgedMethod.getName());, +		Method bridgeMethod = ReflectionUtils.findMethod(TestEmailProvider.class, "findBy", Object.class);, +		assertTrue(bridgeMethod != null && bridgeMethod.isBridge());, +		Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(bridgeMethod);, +		assertEquals("findBy", bridgedMethod.getName());, +	public interface Settings {, +	public interface ConcreteSettings extends Settings {, +	public interface Dao<T, S> {, +	public interface SettingsDao<T extends Settings, S> extends Dao<T, S> {, +	public interface ConcreteSettingsDao extends SettingsDao<ConcreteSettings, String> {, +	public static interface Bounded<E> {, +	public static interface GenericParameter<T> {, +	public static interface MegaReceiver<E extends MegaEvent> {, +	public static interface MegaMessageProducer extends MegaReceiver<MegaMessageEvent> {, +	public interface IGenericInterface<D extends DomainObjectSuper> {, +	public static class EmailMessageProvider extends ExternalMessageProvider<EmailMessage, EmailSearchConditions> {, +	}]