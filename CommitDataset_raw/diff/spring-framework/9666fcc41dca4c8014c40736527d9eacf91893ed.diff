[+++ b/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java, + * whose value can be set via {@link #set(T)} or {@link #setException(Throwable)}., + * It may also be cancelled., + * @author Juergen Hoeller, +		boolean cancelled = this.settableTask.setCancelled();, +		this.listenableFuture.cancel(mayInterruptIfRunning);, +		return this.settableTask.isCancelled();, +		return this.settableTask.isDone();, +		private static final Object CANCELLED = new Object();, +, +		public boolean setCancelled() {, +			return this.value.compareAndSet(NO_VALUE, CANCELLED);, +		}, +, +		public boolean isCancelled() {, +			return (this.value.get() == CANCELLED);, +		}, +, +		public boolean isDone() {, +			return (this.value.get() != NO_VALUE);, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java, + * whose value can be set via {@link #set(T)} or {@link #setException(Throwable)}., + * It may also be cancelled., + * @author Juergen Hoeller, +		boolean cancelled = this.settableTask.setCancelled();, +		this.listenableFuture.cancel(mayInterruptIfRunning);, +		return this.settableTask.isCancelled();, +		return this.settableTask.isDone();, +		private static final Object CANCELLED = new Object();, +, +		public boolean setCancelled() {, +			return this.value.compareAndSet(NO_VALUE, CANCELLED);, +		}, +, +		public boolean isCancelled() {, +			return (this.value.get() == CANCELLED);, +		}, +, +		public boolean isDone() {, +			return (this.value.get() != NO_VALUE);, +++ b/spring-core/src/test/java/org/springframework/util/concurrent/SettableListenableFutureTests.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +		assertFalse(settableListenableFuture.isDone());, +		assertTrue(settableListenableFuture.set(string));, +		assertFalse(settableListenableFuture.isCancelled());, +		assertTrue(settableListenableFuture.isDone());, +		assertFalse(settableListenableFuture.isCancelled());, +		assertTrue(settableListenableFuture.setException(exception));, +, +, +		assertFalse(settableListenableFuture.isCancelled());, +		assertTrue(settableListenableFuture.isDone());, +		assertTrue(settableListenableFuture.setException(exception));, +, +, +		assertFalse(settableListenableFuture.isCancelled());, +		assertTrue(settableListenableFuture.isDone());, +, +, +		assertFalse(settableListenableFuture.isCancelled());, +		assertTrue(settableListenableFuture.isDone());, +, +, +		assertFalse(settableListenableFuture.isCancelled());, +		assertTrue(settableListenableFuture.isDone());, +, +, +		assertFalse(settableListenableFuture.isCancelled());, +		assertTrue(settableListenableFuture.isDone());, +, +, +		assertFalse(settableListenableFuture.isCancelled());, +		assertTrue(settableListenableFuture.isDone());, +		assertFalse(settableListenableFuture.isCancelled());, +		assertTrue(settableListenableFuture.isDone());, +, +, +		assertFalse(settableListenableFuture.isCancelled());, +		assertTrue(settableListenableFuture.isDone());, +, +, +		String value = settableListenableFuture.get(500L, TimeUnit.MILLISECONDS);, +		assertFalse(settableListenableFuture.isCancelled());, +		assertTrue(settableListenableFuture.isDone());, +		assertTrue(settableListenableFuture.cancel(true));, +		assertFalse(settableListenableFuture.set("hello"));, +		assertTrue(settableListenableFuture.isCancelled());, +		assertTrue(settableListenableFuture.isDone());, +		assertTrue(settableListenableFuture.isCancelled());, +	public void cancelWithMayInterruptIfRunningTrueCallsOverriddenMethod() {, +		assertTrue(tested.cancel(true));, +		assertTrue(tested.isCancelled());, +		assertTrue(tested.isDone());, +	public void cancelWithMayInterruptIfRunningFalseDoesNotCallOverriddenMethod() {, +		assertTrue(tested.cancel(false));, +		assertTrue(tested.isCancelled());, +		assertTrue(tested.isDone());, +		assertTrue(settableListenableFuture.set("hello"));, +		assertFalse(settableListenableFuture.cancel(true));]