[+++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java, +			PatternInfo info1 = new PatternInfo(pattern1);, +			PatternInfo info2 = new PatternInfo(pattern2);, +, +			if (info1.isLeastSpecific() && info2.isLeastSpecific()) {, +			else if (info1.isLeastSpecific()) {, +			else if (info2.isLeastSpecific()) {, +			if (info1.isPrefixPattern() && info2.getDoubleWildcards() == 0) {, +			else if (info2.isPrefixPattern() && info1.getDoubleWildcards() == 0) {, +			if (info1.getTotalCount() != info2.getTotalCount()) {, +				return info1.getTotalCount() - info2.getTotalCount();, +			if (info1.getLength() != info2.getLength()) {, +				return info2.getLength() - info1.getLength();, +			if (info1.getSingleWildcards() < info2.getSingleWildcards()) {, +			else if (info2.getSingleWildcards() < info1.getSingleWildcards()) {, +			if (info1.getUriVars() < info2.getUriVars()) {, +			else if (info2.getUriVars() < info1.getUriVars()) {, +		/**, +		 * Value class that holds information about the pattern, e.g. number of, +		 * occurrences of "*", "**", and "{" pattern elements., +		 */, +		private static class PatternInfo {, +, +			private final String pattern;, +, +			private int uriVars;, +, +			private int singleWildcards;, +, +			private int doubleWildcards;, +, +			private boolean catchAllPattern;, +, +			private boolean prefixPattern;, +, +			private Integer length;, +, +, +			public PatternInfo(String pattern) {, +				this.pattern = pattern;, +				if (this.pattern != null) {, +					initCounters();, +					this.catchAllPattern = this.pattern.equals("/**");, +					this.prefixPattern = !this.catchAllPattern && this.pattern.endsWith("/**");, +				}, +				if (this.uriVars == 0) {, +					this.length = (this.pattern != null ? this.pattern.length() : 0);, +				}, +			}, +, +			protected void initCounters() {, +				int pos = 0;, +				while (pos < this.pattern.length()) {, +					if(this.pattern.charAt(pos) == '{') {, +						this.uriVars++;, +						pos++;, +					}, +					else if(this.pattern.charAt(pos) == '*') {, +						if(pos + 1 < this.pattern.length() && this.pattern.charAt(pos + 1) == '*') {, +							this.doubleWildcards++;, +							pos += 2;, +						}, +						else {, +							this.singleWildcards++;, +							pos++;, +						}, +					} else {, +						pos++;, +					}, +				}, +			}, +, +			public int getUriVars() {, +				return this.uriVars;, +			}, +, +			public int getSingleWildcards() {, +				return this.singleWildcards;, +			}, +, +			public int getDoubleWildcards() {, +				return this.doubleWildcards;, +			}, +, +			public boolean isLeastSpecific() {, +				return (this.pattern == null || this.catchAllPattern);, +			}, +, +			public boolean isPrefixPattern() {, +				return this.prefixPattern;, +			}, +, +			public int getTotalCount() {, +				return this.uriVars + this.singleWildcards + (2 * this.doubleWildcards);, +			public int getLength() {, +				if (this.length == null) {, +					this.length = VARIABLE_PATTERN.matcher(this.pattern).replaceAll("#").length();, +				return this.length;, +++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java, +			PatternInfo info1 = new PatternInfo(pattern1);]