[+++ b/spring-core/src/main/java/org/springframework/util/xml/XMLEventStreamWriter.java, + * Copyright 2002-2013 the original author or authors., + * Implementation of the {@link javax.xml.stream.XMLStreamWriter} interface, + * that wraps an {@link XMLEventWriter}., +	private final List<EndElement> endElements = new ArrayList<EndElement>();, +, +	private boolean emptyElement = false;, +, +, +	public void setNamespaceContext(NamespaceContext context) throws XMLStreamException {, +		this.eventWriter.setNamespaceContext(context);, +	public NamespaceContext getNamespaceContext() {, +		return this.eventWriter.getNamespaceContext();, +		this.eventWriter.setPrefix(prefix, uri);, +	}, +, +	@Override, +	public String getPrefix(String uri) throws XMLStreamException {, +		return this.eventWriter.getPrefix(uri);, +		this.eventWriter.setDefaultNamespace(uri);, +, +	public void writeStartDocument() throws XMLStreamException {, +		closeEmptyElementIfNecessary();, +		this.eventWriter.add(this.eventFactory.createStartDocument());, +	public void writeStartDocument(String version) throws XMLStreamException {, +		closeEmptyElementIfNecessary();, +		this.eventWriter.add(this.eventFactory.createStartDocument(DEFAULT_ENCODING, version));, +	@Override, +	public void writeStartDocument(String encoding, String version) throws XMLStreamException {, +		closeEmptyElementIfNecessary();, +		this.eventWriter.add(this.eventFactory.createStartDocument(encoding, version));, +	@Override, +	public void writeStartElement(String localName) throws XMLStreamException {, +		closeEmptyElementIfNecessary();, +		doWriteStartElement(this.eventFactory.createStartElement(new QName(localName), null, null));, +	}, +, +	@Override, +	public void writeStartElement(String namespaceURI, String localName) throws XMLStreamException {, +		closeEmptyElementIfNecessary();, +		doWriteStartElement(this.eventFactory.createStartElement(new QName(namespaceURI, localName), null, null));, +	}, +, +	@Override, +	public void writeStartElement(String prefix, String localName, String namespaceURI) throws XMLStreamException {, +		closeEmptyElementIfNecessary();, +		doWriteStartElement(this.eventFactory.createStartElement(new QName(namespaceURI, localName, prefix), null, null));, +	}, +, +	private void doWriteStartElement(StartElement startElement) throws XMLStreamException {, +		this.eventWriter.add(startElement);, +		this.endElements.add(this.eventFactory.createEndElement(startElement.getName(), startElement.getNamespaces()));, +	}, +, +	@Override, +	public void writeEmptyElement(String localName) throws XMLStreamException {, +		closeEmptyElementIfNecessary();, +		writeStartElement(localName);, +		this.emptyElement = true;, +	}, +, +	@Override, +	public void writeEmptyElement(String namespaceURI, String localName) throws XMLStreamException {, +		closeEmptyElementIfNecessary();, +		writeStartElement(namespaceURI, localName);, +		this.emptyElement = true;, +	}, +, +	@Override, +	public void writeEmptyElement(String prefix, String localName, String namespaceURI) throws XMLStreamException {, +		closeEmptyElementIfNecessary();, +		writeStartElement(prefix, localName, namespaceURI);, +		this.emptyElement = true;, +	}, +, +	private void closeEmptyElementIfNecessary() throws XMLStreamException {, +		if (this.emptyElement) {, +			this.emptyElement = false;, +			writeEndElement();, +		}, +	}, +, +	@Override, +	public void writeEndElement() throws XMLStreamException {, +		closeEmptyElementIfNecessary();, +		int last = this.endElements.size() - 1;, +		EndElement lastEndElement = this.endElements.get(last);, +		this.eventWriter.add(lastEndElement);, +		this.endElements.remove(last);, +	}, +, +	@Override, +	public void writeAttribute(String localName, String value) throws XMLStreamException {, +		this.eventWriter.add(this.eventFactory.createAttribute(localName, value));, +	}, +, +	@Override, +	public void writeAttribute(String namespaceURI, String localName, String value) throws XMLStreamException {, +		this.eventWriter.add(this.eventFactory.createAttribute(new QName(namespaceURI, localName), value));, +	}]