[+++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java, + * Copyright 2002-2015 the original author or authors., +	public static final String CONTENT_TYPE = "contentType";, +, +, +	private static final long serialVersionUID = 7035068984263400920L;, +, +	private static final Log logger = LogFactory.getLog(MessageHeaders.class);, +, +	private static final IdGenerator defaultIdGenerator = new AlternativeJdkIdGenerator();, +, +	private static volatile IdGenerator idGenerator = null;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java, + * Copyright 2002-2015 the original author or authors., +	public static final String CONTENT_TYPE = "contentType";, +, +, +	private static final long serialVersionUID = 7035068984263400920L;, +, +	private static final Log logger = LogFactory.getLog(MessageHeaders.class);, +, +	private static final IdGenerator defaultIdGenerator = new AlternativeJdkIdGenerator();, +, +	private static volatile IdGenerator idGenerator = null;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java, + * Copyright 2002-2015 the original author or authors., +		Object value = getHeader(MessageHeaders.ID);, +		if (value == null) {, +			return null;, +		}, +		return (value instanceof UUID ? (UUID) value : UUID.fromString(value.toString()));, +		Object value = getHeader(MessageHeaders.TIMESTAMP);, +		if (value == null) {, +			return null;, +		}, +		return (value instanceof Long ? (Long) value : Long.parseLong(value.toString()));, +	}, +, +	public void setContentType(MimeType contentType) {, +		setHeader(MessageHeaders.CONTENT_TYPE, contentType);, +	}, +, +	public MimeType getContentType() {, +		Object value = getHeader(MessageHeaders.CONTENT_TYPE);, +		if (value == null) {, +			return null;, +		}, +		return (value instanceof MimeType ? (MimeType) value : MimeType.valueOf(value.toString()));, +			return " payload=" + payload;]