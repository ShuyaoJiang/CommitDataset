[+++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/HandlerResult.java, +import org.springframework.core.ResolvableType;, +	private final ResolvableType type;, +, +	public HandlerResult(Object handler, Object value, ResolvableType type) {, +		this.type = type;, +	public ResolvableType getType() {, +		return type;, +	}, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/HandlerResult.java, +import org.springframework.core.ResolvableType;, +	private final ResolvableType type;, +, +	public HandlerResult(Object handler, Object value, ResolvableType type) {, +		this.type = type;, +	public ResolvableType getType() {, +		return type;, +	}, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/SimpleHandlerResultHandler.java, +import org.springframework.core.ResolvableType;, +	private static final ResolvableType PUBLISHER_VOID = ResolvableType.forClassWithGenerics(Publisher.class, Void.class);, +, +		ResolvableType type = result.getType();, +		return type != null && PUBLISHER_VOID.isAssignableFrom(type);, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/HandlerResult.java, +import org.springframework.core.ResolvableType;, +	private final ResolvableType type;, +, +	public HandlerResult(Object handler, Object value, ResolvableType type) {, +		this.type = type;, +	public ResolvableType getType() {, +		return type;, +	}, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/SimpleHandlerResultHandler.java, +import org.springframework.core.ResolvableType;, +	private static final ResolvableType PUBLISHER_VOID = ResolvableType.forClassWithGenerics(Publisher.class, Void.class);, +, +		ResolvableType type = result.getType();, +		return type != null && PUBLISHER_VOID.isAssignableFrom(type);, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/handler/HttpHandlerAdapter.java, +import org.springframework.core.ResolvableType;, +	private static final ResolvableType PUBLISHER_VOID = ResolvableType.forClassWithGenerics(Publisher.class, Void.class);, +, +		return Publishers.just(new HandlerResult(httpHandler, completion, PUBLISHER_VOID));, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/HandlerResult.java, +import org.springframework.core.ResolvableType;, +	private final ResolvableType type;, +, +	public HandlerResult(Object handler, Object value, ResolvableType type) {, +		this.type = type;, +	public ResolvableType getType() {, +		return type;, +	}, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/SimpleHandlerResultHandler.java, +import org.springframework.core.ResolvableType;, +	private static final ResolvableType PUBLISHER_VOID = ResolvableType.forClassWithGenerics(Publisher.class, Void.class);, +, +		ResolvableType type = result.getType();, +		return type != null && PUBLISHER_VOID.isAssignableFrom(type);, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/handler/HttpHandlerAdapter.java, +import org.springframework.core.ResolvableType;, +	private static final ResolvableType PUBLISHER_VOID = ResolvableType.forClassWithGenerics(Publisher.class, Void.class);, +, +		return Publishers.just(new HandlerResult(httpHandler, completion, PUBLISHER_VOID));, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/method/annotation/RequestMappingHandlerAdapter.java, +import org.springframework.core.ResolvableType;, +		ResolvableType type =  ResolvableType.forMethodParameter(handlerMethod.getReturnType());, +		return Publishers.map(resultPublisher, result -> new HandlerResult(handlerMethod, result, type));, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/HandlerResult.java, +import org.springframework.core.ResolvableType;, +	private final ResolvableType type;, +, +	public HandlerResult(Object handler, Object value, ResolvableType type) {, +		this.type = type;, +	public ResolvableType getType() {, +		return type;, +	}, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/SimpleHandlerResultHandler.java, +import org.springframework.core.ResolvableType;, +	private static final ResolvableType PUBLISHER_VOID = ResolvableType.forClassWithGenerics(Publisher.class, Void.class);, +, +		ResolvableType type = result.getType();, +		return type != null && PUBLISHER_VOID.isAssignableFrom(type);, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/handler/HttpHandlerAdapter.java, +import org.springframework.core.ResolvableType;, +	private static final ResolvableType PUBLISHER_VOID = ResolvableType.forClassWithGenerics(Publisher.class, Void.class);, +, +		return Publishers.just(new HandlerResult(httpHandler, completion, PUBLISHER_VOID));, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/method/annotation/RequestMappingHandlerAdapter.java, +import org.springframework.core.ResolvableType;, +		ResolvableType type =  ResolvableType.forMethodParameter(handlerMethod.getReturnType());, +		return Publishers.map(resultPublisher, result -> new HandlerResult(handlerMethod, result, type));, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/method/annotation/ResponseBodyResultHandler.java, +		ResolvableType returnType = result.getType();, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/HandlerResult.java, +import org.springframework.core.ResolvableType;, +	private final ResolvableType type;, +, +	public HandlerResult(Object handler, Object value, ResolvableType type) {, +		this.type = type;]