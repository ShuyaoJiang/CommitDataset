[+++ b/spring-beans/src/main/java/org/springframework/beans/BeanInfoFactory.java, + * by using the {@link org.springframework.core.io.support.SpringFactoriesLoader} utility, + * class., + * When a {@link BeanInfo} is to be created, the {@code CachedIntrospectionResults}, + * will iterate through the discovered factories, calling {@link, + * #getBeanInfo(Class)} on each one. If {@code null} is returned, the next factory will, + * be queried. If none of the factories support the class, an standard {@link BeanInfo}, + * is created as a default., + *, + * <p>Note that the {@link org.springframework.core.io.support.SpringFactoriesLoader}, + * sorts the {@code BeanInfoFactory} instances by, + * {@link org.springframework.core.annotation.Order @Order}, so that ones with, +	 * Returns the bean info for the given class, if supported., +	 * @return the bean info, or {@code null} if not the given class is not supported, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanInfoFactory.java, + * by using the {@link org.springframework.core.io.support.SpringFactoriesLoader} utility, + * class., + * When a {@link BeanInfo} is to be created, the {@code CachedIntrospectionResults}, + * will iterate through the discovered factories, calling {@link, + * #getBeanInfo(Class)} on each one. If {@code null} is returned, the next factory will, + * be queried. If none of the factories support the class, an standard {@link BeanInfo}, + * is created as a default., + *, + * <p>Note that the {@link org.springframework.core.io.support.SpringFactoriesLoader}, + * sorts the {@code BeanInfoFactory} instances by, + * {@link org.springframework.core.annotation.Order @Order}, so that ones with, +	 * Returns the bean info for the given class, if supported., +	 * @return the bean info, or {@code null} if not the given class is not supported, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +import org.springframework.core.io.support.SpringFactoriesLoader;, +				if (beanInfo != null) {, +					beanInfoFactories = Collections.synchronizedList(SpringFactoriesLoader, +							.loadFactories(BeanInfoFactory.class, classLoader));, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanInfoFactory.java, + * by using the {@link org.springframework.core.io.support.SpringFactoriesLoader} utility, + * class., + * When a {@link BeanInfo} is to be created, the {@code CachedIntrospectionResults}, + * will iterate through the discovered factories, calling {@link, + * #getBeanInfo(Class)} on each one. If {@code null} is returned, the next factory will, + * be queried. If none of the factories support the class, an standard {@link BeanInfo}, + * is created as a default., + *, + * <p>Note that the {@link org.springframework.core.io.support.SpringFactoriesLoader}, + * sorts the {@code BeanInfoFactory} instances by, + * {@link org.springframework.core.annotation.Order @Order}, so that ones with, +	 * Returns the bean info for the given class, if supported., +	 * @return the bean info, or {@code null} if not the given class is not supported, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +import org.springframework.core.io.support.SpringFactoriesLoader;, +				if (beanInfo != null) {, +					beanInfoFactories = Collections.synchronizedList(SpringFactoriesLoader, +							.loadFactories(BeanInfoFactory.class, classLoader));, +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfoFactory.java, +public class ExtendedBeanInfoFactory implements Ordered, BeanInfoFactory {, +, +	/**, +	 * Return a new {@link ExtendedBeanInfo} for the given bean class., +	 */, +	public BeanInfo getBeanInfo(Class<?> beanClass) throws IntrospectionException {, +		return supports(beanClass) ?, +				new ExtendedBeanInfo(Introspector.getBeanInfo(beanClass)) : null;, +	}, +	private boolean supports(Class<?> beanClass) {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanInfoFactory.java, + * by using the {@link org.springframework.core.io.support.SpringFactoriesLoader} utility, + * class., + * When a {@link BeanInfo} is to be created, the {@code CachedIntrospectionResults}, + * will iterate through the discovered factories, calling {@link, + * #getBeanInfo(Class)} on each one. If {@code null} is returned, the next factory will, + * be queried. If none of the factories support the class, an standard {@link BeanInfo}, + * is created as a default., + *, + * <p>Note that the {@link org.springframework.core.io.support.SpringFactoriesLoader}, + * sorts the {@code BeanInfoFactory} instances by, + * {@link org.springframework.core.annotation.Order @Order}, so that ones with, +	 * Returns the bean info for the given class, if supported., +	 * @return the bean info, or {@code null} if not the given class is not supported, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +import org.springframework.core.io.support.SpringFactoriesLoader;, +				if (beanInfo != null) {, +					beanInfoFactories = Collections.synchronizedList(SpringFactoriesLoader, +							.loadFactories(BeanInfoFactory.class, classLoader));, +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfoFactory.java, +public class ExtendedBeanInfoFactory implements Ordered, BeanInfoFactory {, +, +	/**, +	 * Return a new {@link ExtendedBeanInfo} for the given bean class., +	 */, +	public BeanInfo getBeanInfo(Class<?> beanClass) throws IntrospectionException {, +		return supports(beanClass) ?, +				new ExtendedBeanInfo(Introspector.getBeanInfo(beanClass)) : null;, +	}, +	private boolean supports(Class<?> beanClass) {, +++ /dev/null, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanInfoFactory.java, + * by using the {@link org.springframework.core.io.support.SpringFactoriesLoader} utility, + * class., + * When a {@link BeanInfo} is to be created, the {@code CachedIntrospectionResults}, + * will iterate through the discovered factories, calling {@link, + * #getBeanInfo(Class)} on each one. If {@code null} is returned, the next factory will]