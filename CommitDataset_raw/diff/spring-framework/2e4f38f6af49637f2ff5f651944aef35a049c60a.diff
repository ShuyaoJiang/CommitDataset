[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/MockMvcBuilderSupport.java, +			List<ResultMatcher> globalResultMatchers, List<ResultHandler> globalResultHandlers,, +			Boolean dispatchOptions) {, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/MockMvcBuilderSupport.java, +			List<ResultMatcher> globalResultMatchers, List<ResultHandler> globalResultHandlers,, +			Boolean dispatchOptions) {, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/AbstractMockMvcBuilder.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.test.web.servlet.setup;, +, +import org.springframework.mock.web.MockServletConfig;, +import org.springframework.test.web.servlet.*;, +import org.springframework.util.Assert;, +import org.springframework.web.context.WebApplicationContext;, +, +import javax.servlet.Filter;, +import javax.servlet.ServletContext;, +import java.util.ArrayList;, +import java.util.List;, +, +/**, + * An abstract implementation of {@link org.springframework.test.web.servlet.MockMvcBuilder}, + * with common methods for configuring filters, default request properties, global, + * expectations and global result actions., + * <p>, + * Sub-classes can use different strategies to prepare a WebApplicationContext to, + * pass to the DispatcherServlet., + *, + * @author Rossen Stoyanchev, + * @since 4.0, + */, +public abstract class AbstractMockMvcBuilder<B extends AbstractMockMvcBuilder<B>>, +		extends MockMvcBuilderSupport implements MockMvcBuilder {, +, +	private List<Filter> filters = new ArrayList<Filter>();, +, +	private RequestBuilder defaultRequestBuilder;, +, +	private final List<ResultMatcher> globalResultMatchers = new ArrayList<ResultMatcher>();, +, +	private final List<ResultHandler> globalResultHandlers = new ArrayList<ResultHandler>();, +, +	private Boolean dispatchOptions = Boolean.FALSE;, +, +, +, +	/**, +	 * Add filters mapped to any request (i.e. "/*"). For example:, +	 *, +	 * <pre class="code">, +	 * mockMvcBuilder.addFilters(springSecurityFilterChain);, +	 * </pre>, +	 *, +	 * <p>is the equivalent of the following web.xml configuration:, +	 *, +	 * <pre class="code">, +	 * &lt;filter-mapping&gt;, +	 *     &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;, +	 *     &lt;url-pattern&gt;/*&lt;/url-pattern&gt;, +	 * &lt;/filter-mapping&gt;, +	 * </pre>, +	 *, +	 * <p>Filters will be invoked in the order in which they are provided., +	 *, +	 * @param filters the filters to add, +	 */, +	@SuppressWarnings("unchecked"), +	public final <T extends B> T addFilters(Filter... filters) {, +		Assert.notNull(filters, "filters cannot be null");, +, +		for(Filter f : filters) {, +			Assert.notNull(f, "filters cannot contain null values");, +			this.filters.add(f);, +		}, +		return (T) this;, +	}, +, +	/**, +	 * Add a filter mapped to a specific set of patterns. For example:, +	 *, +	 * <pre class="code">, +	 * mockMvcBuilder.addFilters(myResourceFilter, "/resources/*");, +	 * </pre>, +	 *, +	 * <p>is the equivalent of:]