[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java, +import org.springframework.web.servlet.resource.ResourceUrlProvider;, +		FormattingConversionService mvcConversionService = config.mvcConversionService();, +		wac.addBean("mvcConversionService", mvcConversionService);, +		ResourceUrlProvider resourceUrlProvider = config.mvcResourceUrlProvider();, +		wac.addBean("mvcResourceUrlProvider", resourceUrlProvider);, +		ContentNegotiationManager mvcContentNegotiationManager = config.mvcContentNegotiationManager();, +		wac.addBean("mvcContentNegotiationManager", mvcContentNegotiationManager);, +		Validator mvcValidator = config.mvcValidator();, +		wac.addBean("mvcValidator", mvcValidator);, +, +		RequestMappingHandlerMapping hm = config.getHandlerMapping(mvcConversionService, resourceUrlProvider);, +		RequestMappingHandlerAdapter ha = config.requestMappingHandlerAdapter(mvcContentNegotiationManager,, +				mvcConversionService, mvcValidator);, +		wac.addBean("handlerExceptionResolver", config.handlerExceptionResolver(mvcContentNegotiationManager));, +		public RequestMappingHandlerMapping getHandlerMapping(, +				FormattingConversionService mvcConversionService,, +				ResourceUrlProvider mvcResourceUrlProvider) {, +			handlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java, +import org.springframework.web.servlet.resource.ResourceUrlProvider;, +		FormattingConversionService mvcConversionService = config.mvcConversionService();, +		wac.addBean("mvcConversionService", mvcConversionService);, +		ResourceUrlProvider resourceUrlProvider = config.mvcResourceUrlProvider();, +		wac.addBean("mvcResourceUrlProvider", resourceUrlProvider);, +		ContentNegotiationManager mvcContentNegotiationManager = config.mvcContentNegotiationManager();, +		wac.addBean("mvcContentNegotiationManager", mvcContentNegotiationManager);, +		Validator mvcValidator = config.mvcValidator();, +		wac.addBean("mvcValidator", mvcValidator);, +, +		RequestMappingHandlerMapping hm = config.getHandlerMapping(mvcConversionService, resourceUrlProvider);, +		RequestMappingHandlerAdapter ha = config.requestMappingHandlerAdapter(mvcContentNegotiationManager,, +				mvcConversionService, mvcValidator);, +		wac.addBean("handlerExceptionResolver", config.handlerExceptionResolver(mvcContentNegotiationManager));, +		public RequestMappingHandlerMapping getHandlerMapping(, +				FormattingConversionService mvcConversionService,, +				ResourceUrlProvider mvcResourceUrlProvider) {, +			handlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/DelegatingWebFluxConfiguration.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java, +import org.springframework.web.servlet.resource.ResourceUrlProvider;, +		FormattingConversionService mvcConversionService = config.mvcConversionService();, +		wac.addBean("mvcConversionService", mvcConversionService);, +		ResourceUrlProvider resourceUrlProvider = config.mvcResourceUrlProvider();, +		wac.addBean("mvcResourceUrlProvider", resourceUrlProvider);, +		ContentNegotiationManager mvcContentNegotiationManager = config.mvcContentNegotiationManager();, +		wac.addBean("mvcContentNegotiationManager", mvcContentNegotiationManager);, +		Validator mvcValidator = config.mvcValidator();, +		wac.addBean("mvcValidator", mvcValidator);, +, +		RequestMappingHandlerMapping hm = config.getHandlerMapping(mvcConversionService, resourceUrlProvider);, +		RequestMappingHandlerAdapter ha = config.requestMappingHandlerAdapter(mvcContentNegotiationManager,, +				mvcConversionService, mvcValidator);, +		wac.addBean("handlerExceptionResolver", config.handlerExceptionResolver(mvcContentNegotiationManager));, +		public RequestMappingHandlerMapping getHandlerMapping(, +				FormattingConversionService mvcConversionService,, +				ResourceUrlProvider mvcResourceUrlProvider) {, +			handlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/DelegatingWebFluxConfiguration.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, + * Copyright 2002-2019 the original author or authors., +	@Nullable, +	public final ApplicationContext getApplicationContext() {, +		return this.applicationContext;, +	}, +	public RequestMappingHandlerMapping requestMappingHandlerMapping(, +			RequestedContentTypeResolver webFluxContentTypeResolver) {, +		mapping.setContentTypeResolver(webFluxContentTypeResolver);, +	public RouterFunctionMapping routerFunctionMapping(ServerCodecConfigurer serverCodecConfigurer) {, +		mapping.setMessageReaders(serverCodecConfigurer.getReaders());, +	public HandlerMapping resourceHandlerMapping(ResourceUrlProvider resourceUrlProvider) {, +		registry.setResourceUrlProvider(resourceUrlProvider);, +	public RequestMappingHandlerAdapter requestMappingHandlerAdapter(, +			ReactiveAdapterRegistry webFluxAdapterRegistry,, +			ServerCodecConfigurer serverCodecConfigurer,, +			FormattingConversionService webFluxConversionService,, +			Validator webfluxValidator) {, +		adapter.setMessageReaders(serverCodecConfigurer.getReaders());, +		adapter.setWebBindingInitializer(getConfigurableWebBindingInitializer(webFluxConversionService, webfluxValidator));, +		adapter.setReactiveAdapterRegistry(webFluxAdapterRegistry);, +	protected ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer(, +			FormattingConversionService webFluxConversionService,, +			Validator webFluxValidator) {, +		initializer.setConversionService(webFluxConversionService);, +		initializer.setValidator(webFluxValidator);, +	public ResponseEntityResultHandler responseEntityResultHandler(, +			ReactiveAdapterRegistry webFluxAdapterRegistry,, +			ServerCodecConfigurer serverCodecConfigurer,, +			RequestedContentTypeResolver webFluxContentTypeResolver) {, +		return new ResponseEntityResultHandler(serverCodecConfigurer.getWriters(),, +				webFluxContentTypeResolver, webFluxAdapterRegistry);, +	public ResponseBodyResultHandler responseBodyResultHandler(, +			ReactiveAdapterRegistry webFluxAdapterRegistry,, +			ServerCodecConfigurer serverCodecConfigurer,, +			RequestedContentTypeResolver webFluxContentTypeResolver) {, +		return new ResponseBodyResultHandler(serverCodecConfigurer.getWriters(),, +				webFluxContentTypeResolver, webFluxAdapterRegistry);, +	public ViewResolutionResultHandler viewResolutionResultHandler(]