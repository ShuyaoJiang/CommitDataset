[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyInserters.java, +import java.util.Map;, +import org.springframework.http.HttpEntity;, +import org.springframework.http.client.MultipartBodyBuilder;, +		return new DefaultFormInserter().with(formData);, +		return new DefaultFormInserter().with(key, value);, +	 * @see MultipartBodyBuilder, +	public static MultipartInserter fromMultipartData(MultiValueMap<String, Object> multipartData) {, +		return new DefaultMultipartInserter().with(multipartData);, +	public static MultipartInserter fromMultipartData(String key, Object value) {, +		return new DefaultMultipartInserter().with(key, value);, +	}, +, +	/**, +	 * A variant of {@link #fromMultipartData(MultiValueMap)} for adding asynchronous data as a, +	 * part in-line vs building a {@code MultiValueMap} and passing it in., +	 * @param key the part name, +	 * @param publisher the publisher that forms the part value, +	 * @param elementClass the class contained in the {@code publisher}, +	 * @return a {@code FormInserter} that can writes the provided multipart, +	 * data and also allows adding more parts, +	 */, +	public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String key,, +			P publisher, Class<T> elementClass) {, +, +		Assert.notNull(key, "'key' must not be null");, +		Assert.notNull(publisher, "'publisher' must not be null");, +		Assert.notNull(elementClass, "'elementClass' must not be null");, +, +		return new DefaultMultipartInserter().withPublisher(key, publisher, elementClass);, +	}, +, +	/**, +	 * A variant of {@link #fromMultipartData(MultiValueMap)} for adding asynchronous data as a, +	 * part in-line vs building a {@code MultiValueMap} and passing it in., +	 * @param key the part name, +	 * @param publisher the publisher that forms the part value, +	 * @param typeReference the type contained in the {@code publisher}, +	 * @return a {@code FormInserter} that can writes the provided multipart, +	 * data and also allows adding more parts, +	 */, +	public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String key,, +			P publisher, ParameterizedTypeReference<T> typeReference) {, +, +		Assert.notNull(key, "'key' must not be null");, +		Assert.notNull(publisher, "'publisher' must not be null");, +		Assert.notNull(typeReference, "'typeReference' must not be null");, +, +		return new DefaultMultipartInserter().withPublisher(key, publisher, typeReference);, +	// Note that FormInserter is parameterized to ClientHttpRequest, not ReactiveHttpOutputMessage, +	// like other return values methods, since sending form data only typically happens on the client-side, +	/**, +	 * Extension of {@link FormInserter} that has methods for adding asynchronous part data., +	 */, +	public interface MultipartInserter extends FormInserter<Object> {, +		/**, +		 * Adds the specified publisher as a part., +		 *, +		 * @param key the key to be added, +		 * @param publisher the publisher to be added as value, +		 * @param elementClass the class of elements contained in {@code publisher}, +		 * @return this inserter, +		 */, +		<T, P extends Publisher<T>> MultipartInserter withPublisher(String key, P publisher,, +				Class<T> elementClass);, +		/**, +		 * Adds the specified publisher as a part., +		 *, +		 * @param key the key to be added, +		 * @param publisher the publisher to be added as value, +		 * @param typeReference the type of elements contained in {@code publisher}, +		 * @return this inserter, +		 */, +		<T, P extends Publisher<T>> MultipartInserter withPublisher(String key, P publisher,, +				ParameterizedTypeReference<T> typeReference);, +	private static class DefaultFormInserter implements FormInserter<String> {, +, +		private final MultiValueMap<String, String> data = new LinkedMultiValueMap<>();, +, +		public DefaultFormInserter() {, +		public FormInserter<String> with(String key, @Nullable String value) {, +		public FormInserter<String> with(MultiValueMap<String, String> values) {, +			HttpMessageWriter<MultiValueMap<String, String>> messageWriter =, +					findMessageWriter(context, FORM_TYPE, MediaType.APPLICATION_FORM_URLENCODED);, +			return messageWriter.write(Mono.just(this.data), FORM_TYPE,, +					MediaType.APPLICATION_FORM_URLENCODED,, +					outputMessage, context.hints());, +		}, +	}, +, +, +	private static class DefaultMultipartInserter implements MultipartInserter {, +, +		private final MultipartBodyBuilder builder = new MultipartBodyBuilder();, +, +		public DefaultMultipartInserter() {, +		}, +, +		@Override, +		public MultipartInserter with(String key, @Nullable Object value) {]