[+++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerAccessorBean.java, +	 * Specify the Quartz {@link Scheduler} to operate on via its scheduler name in the Spring, +	 * <p>If not specified, this accessor will try to retrieve a default {@link Scheduler}, +	 * bean from the containing application context., +	 * Specify the Quartz {@link Scheduler} instance to operate on., +	 * <p>If not specified, this accessor will try to retrieve a default {@link Scheduler}, +	 * bean from the containing application context., +			this.scheduler = (this.schedulerName != null ? findScheduler(this.schedulerName) : findDefaultScheduler());, +	protected Scheduler findDefaultScheduler() {, +		if (this.beanFactory != null) {, +			return this.beanFactory.getBean(Scheduler.class);, +		}, +		else {, +			throw new IllegalStateException(, +					"No Scheduler specified, and cannot find a default Scheduler without a BeanFactory");, +		}, +	}, +, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerAccessorBean.java, +	 * Specify the Quartz {@link Scheduler} to operate on via its scheduler name in the Spring, +	 * <p>If not specified, this accessor will try to retrieve a default {@link Scheduler}, +	 * bean from the containing application context., +	 * Specify the Quartz {@link Scheduler} instance to operate on., +	 * <p>If not specified, this accessor will try to retrieve a default {@link Scheduler}, +	 * bean from the containing application context., +			this.scheduler = (this.schedulerName != null ? findScheduler(this.schedulerName) : findDefaultScheduler());, +	protected Scheduler findDefaultScheduler() {, +		if (this.beanFactory != null) {, +			return this.beanFactory.getBean(Scheduler.class);, +		}, +		else {, +			throw new IllegalStateException(, +					"No Scheduler specified, and cannot find a default Scheduler without a BeanFactory");, +		}, +	}, +, +++ b/spring-context-support/src/test/resources/org/springframework/scheduling/quartz/schedulerAccessorBean.xml, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerAccessorBean.java, +	 * Specify the Quartz {@link Scheduler} to operate on via its scheduler name in the Spring, +	 * <p>If not specified, this accessor will try to retrieve a default {@link Scheduler}, +	 * bean from the containing application context., +	 * Specify the Quartz {@link Scheduler} instance to operate on., +	 * <p>If not specified, this accessor will try to retrieve a default {@link Scheduler}, +	 * bean from the containing application context., +			this.scheduler = (this.schedulerName != null ? findScheduler(this.schedulerName) : findDefaultScheduler());, +	protected Scheduler findDefaultScheduler() {, +		if (this.beanFactory != null) {, +			return this.beanFactory.getBean(Scheduler.class);, +		}, +		else {, +			throw new IllegalStateException(, +					"No Scheduler specified, and cannot find a default Scheduler without a BeanFactory");, +		}, +	}, +, +++ b/spring-context-support/src/test/resources/org/springframework/scheduling/quartz/schedulerAccessorBean.xml, +++ b/spring-context-support/src/test/resources/org/springframework/scheduling/quartz/schedulerRepositoryExposure.xml, +	<bean id="otherScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">, +		<property name="schedulerName" value="otherScheduler"/>, +	</bean>, +]