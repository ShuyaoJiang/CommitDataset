[+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AsyncWebRequest.java, +	 * @since 5.0, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AsyncWebRequest.java, +	 * @since 5.0, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableProcessingInterceptor.java, +	 * Invoked from a container thread when an error occurred while processing, +	 * the async request before the {@code Callable} task completes., +	 * Implementations may return a value, including an {@link Exception}, to, +	 * use instead of the value the {@link Callable} did not return in time., +	 * @param t the error that occurred while request processing, +	 * @since 5.0, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AsyncWebRequest.java, +	 * @since 5.0, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableProcessingInterceptor.java, +	 * Invoked from a container thread when an error occurred while processing, +	 * the async request before the {@code Callable} task completes., +	 * Implementations may return a value, including an {@link Exception}, to, +	 * use instead of the value the {@link Callable} did not return in time., +	 * @param t the error that occurred while request processing, +	 * @since 5.0, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java, +	 * Register code to invoke when an error occurred during the async request., +	 * <p>This method is called from a container thread when an error occurs, +	 * while processing an async request before the {@code DeferredResult} has, +	 * been populated. It may invoke {@link DeferredResult#setResult setResult}, +	 * or {@link DeferredResult#setErrorResult setErrorResult} to resume, +	 * processing., +	 * @since 5.0, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AsyncWebRequest.java, +	 * @since 5.0, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableProcessingInterceptor.java, +	 * Invoked from a container thread when an error occurred while processing, +	 * the async request before the {@code Callable} task completes., +	 * Implementations may return a value, including an {@link Exception}, to, +	 * use instead of the value the {@link Callable} did not return in time., +	 * @param t the error that occurred while request processing, +	 * @since 5.0, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java, +	 * Register code to invoke when an error occurred during the async request., +	 * <p>This method is called from a container thread when an error occurs, +	 * while processing an async request before the {@code DeferredResult} has, +	 * been populated. It may invoke {@link DeferredResult#setResult setResult}, +	 * or {@link DeferredResult#setErrorResult setErrorResult} to resume, +	 * processing., +	 * @since 5.0, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/ErrorCallableProcessingInterceptor.java, +class ErrorCallableProcessingInterceptor extends CallableProcessingInterceptorAdapter {, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AsyncWebRequest.java, +	 * @since 5.0, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableProcessingInterceptor.java, +	 * Invoked from a container thread when an error occurred while processing, +	 * the async request before the {@code Callable} task completes., +	 * Implementations may return a value, including an {@link Exception}, to, +	 * use instead of the value the {@link Callable} did not return in time., +	 * @param t the error that occurred while request processing, +	 * @since 5.0, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java, +	 * Register code to invoke when an error occurred during the async request., +	 * <p>This method is called from a container thread when an error occurs, +	 * while processing an async request before the {@code DeferredResult} has, +	 * been populated. It may invoke {@link DeferredResult#setResult setResult}, +	 * or {@link DeferredResult#setErrorResult setErrorResult} to resume, +	 * processing., +	 * @since 5.0, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/ErrorCallableProcessingInterceptor.java, +class ErrorCallableProcessingInterceptor extends CallableProcessingInterceptorAdapter {, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/StandardServletAsyncWebRequest.java, +		this.exceptionHandlers.forEach(consumer -> consumer.accept(event.getThrowable()));, +		this.timeoutHandlers.forEach(Runnable::run);, +		this.completionHandlers.forEach(Runnable::run);, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AsyncWebRequest.java, +	 * @since 5.0, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableProcessingInterceptor.java, +	 * Invoked from a container thread when an error occurred while processing, +	 * the async request before the {@code Callable} task completes., +	 * Implementations may return a value, including an {@link Exception}, to, +	 * use instead of the value the {@link Callable} did not return in time., +	 * @param t the error that occurred while request processing, +	 * @since 5.0, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java, +	 * Register code to invoke when an error occurred during the async request., +	 * <p>This method is called from a container thread when an error occurs, +	 * while processing an async request before the {@code DeferredResult} has, +	 * been populated. It may invoke {@link DeferredResult#setResult setResult}, +	 * or {@link DeferredResult#setErrorResult setErrorResult} to resume, +	 * processing., +	 * @since 5.0, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/ErrorCallableProcessingInterceptor.java, +class ErrorCallableProcessingInterceptor extends CallableProcessingInterceptorAdapter {, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/StandardServletAsyncWebRequest.java, +		this.exceptionHandlers.forEach(consumer -> consumer.accept(event.getThrowable()));, +		this.timeoutHandlers.forEach(Runnable::run);, +		this.completionHandlers.forEach(Runnable::run);, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncTask.java, +	 * Register code to invoke for an error during async request processing., +	 * <p>This method is called from a container thread when an error occurred, +	 * while processing an async request before the {@code Callable} has, +	 * completed. The callback is executed in the same thread and therefore, +	 * should return without blocking. It may return an alternative value to, +	 * use, including an {@link Exception} or return]