[+++ b/spring-context-support/src/main/java/org/springframework/ui/jasperreports/JasperReportsUtils.java, + * Copyright 2002-2012 the original author or authors., +	 * @param reportData a <code>JRDataSource</code>, <code>java.util.Collection</code> or object array, +	 * (converted accordingly), representing the report data to read fields from, +	public static void renderAsCsv(JasperReport report, Map<String, Object> parameters, Object reportData,, +			Writer writer) throws JRException {, +	 * @param reportData a <code>JRDataSource</code>, <code>java.util.Collection</code> or object array, +	 * (converted accordingly), representing the report data to read fields from, +	public static void renderAsCsv(JasperReport report, Map<String, Object> parameters, Object reportData,, +			Writer writer, Map<JRExporterParameter, Object> exporterParameters) throws JRException {, +	 * @param reportData a <code>JRDataSource</code>, <code>java.util.Collection</code> or object array, +	 * (converted accordingly), representing the report data to read fields from, +	public static void renderAsHtml(JasperReport report, Map<String, Object> parameters, Object reportData,, +			Writer writer) throws JRException {, +	 * @param reportData a <code>JRDataSource</code>, <code>java.util.Collection</code> or object array, +	 * (converted accordingly), representing the report data to read fields from, +	public static void renderAsHtml(JasperReport report, Map<String, Object> parameters, Object reportData,, +			Writer writer, Map<JRExporterParameter, Object> exporterParameters) throws JRException {, +	 * @param reportData a <code>JRDataSource</code>, <code>java.util.Collection</code> or object array, +	 * (converted accordingly), representing the report data to read fields from, +	public static void renderAsPdf(JasperReport report, Map<String, Object> parameters, Object reportData,, +			OutputStream stream) throws JRException {, +	 * @param reportData a <code>JRDataSource</code>, <code>java.util.Collection</code> or object array, +	 * (converted accordingly), representing the report data to read fields from, +	public static void renderAsPdf(JasperReport report, Map<String, Object> parameters, Object reportData,, +			OutputStream stream, Map<JRExporterParameter, Object> exporterParameters) throws JRException {, +	 * @param reportData a <code>JRDataSource</code>, <code>java.util.Collection</code> or object array, +	 * (converted accordingly), representing the report data to read fields from, +	public static void renderAsXls(JasperReport report, Map<String, Object> parameters, Object reportData,, +			OutputStream stream) throws JRException {, +	 * @param reportData a <code>JRDataSource</code>, <code>java.util.Collection</code> or object array, +	 * (converted accordingly), representing the report data to read fields from, +	public static void renderAsXls(JasperReport report, Map<String, Object> parameters, Object reportData,, +			OutputStream stream, Map<JRExporterParameter, Object> exporterParameters) throws JRException {, +++ b/spring-context-support/src/main/java/org/springframework/ui/jasperreports/JasperReportsUtils.java, + * Copyright 2002-2012 the original author or authors., +	 * @param reportData a <code>JRDataSource</code>, <code>java.util.Collection</code> or object array, +	 * (converted accordingly), representing the report data to read fields from, +	public static void renderAsCsv(JasperReport report, Map<String, Object> parameters, Object reportData,, +			Writer writer) throws JRException {, +	 * @param reportData a <code>JRDataSource</code>, <code>java.util.Collection</code> or object array, +	 * (converted accordingly), representing the report data to read fields from, +	public static void renderAsCsv(JasperReport report, Map<String, Object> parameters, Object reportData,, +			Writer writer, Map<JRExporterParameter, Object> exporterParameters) throws JRException {, +	 * @param reportData a <code>JRDataSource</code>, <code>java.util.Collection</code> or object array, +	 * (converted accordingly), representing the report data to read fields from, +	public static void renderAsHtml(JasperReport report, Map<String, Object> parameters, Object reportData,, +			Writer writer) throws JRException {, +	 * @param reportData a <code>JRDataSource</code>, <code>java.util.Collection</code> or object array, +	 * (converted accordingly), representing the report data to read fields from, +	public static void renderAsHtml(JasperReport report, Map<String, Object> parameters, Object reportData,, +			Writer writer, Map<JRExporterParameter, Object> exporterParameters) throws JRException {, +	 * @param reportData a <code>JRDataSource</code>, <code>java.util.Collection</code> or object array, +	 * (converted accordingly), representing the report data to read fields from, +	public static void renderAsPdf(JasperReport report, Map<String, Object> parameters, Object reportData,, +			OutputStream stream) throws JRException {, +	 * @param reportData a <code>JRDataSource</code>, <code>java.util.Collection</code> or object array, +	 * (converted accordingly), representing the report data to read fields from, +	public static void renderAsPdf(JasperReport report, Map<String, Object> parameters, Object reportData,, +			OutputStream stream, Map<JRExporterParameter, Object> exporterParameters) throws JRException {, +	 * @param reportData a <code>JRDataSource</code>, <code>java.util.Collection</code> or object array, +	 * (converted accordingly), representing the report data to read fields from, +	public static void renderAsXls(JasperReport report, Map<String, Object> parameters, Object reportData,, +			OutputStream stream) throws JRException {, +	 * @param reportData a <code>JRDataSource</code>, <code>java.util.Collection</code> or object array, +	 * (converted accordingly), representing the report data to read fields from, +	public static void renderAsXls(JasperReport report, Map<String, Object> parameters, Object reportData,, +			OutputStream stream, Map<JRExporterParameter, Object> exporterParameters) throws JRException {, +++ b/spring-context-support/src/test/java/org/springframework/ui/jasperreports/JasperReportsUtilsTests.java, + * Copyright 2002-2012 the original author or authors., +import net.sf.jasperreports.engine.JRExporterParameter;, +		Map<JRExporterParameter, Object> exporterParameters = new HashMap<JRExporterParameter, Object>();, +		assertTrue("Delimiter is incorrect", output.contains("~"));, +		Map<JRExporterParameter, Object> exporterParameters = new HashMap<JRExporterParameter, Object>();, +		assertTrue("URI not included", output.contains(uri));, +		Map<JRExporterParameter, Object> exporterParameters = new HashMap<JRExporterParameter, Object>();, +		assertTrue(new String(output).contains("PDF-1.6"));, +		Map<JRExporterParameter, Object> exporterParameters = new HashMap<JRExporterParameter, Object>();, +		assertTrue("Output should contain 'MeineSeite'", output.contains("MeineSeite"));, +		assertTrue("Output should contain <html>", output.contains("<html>"));, +		assertTrue("Output should contain 'MeineSeite'", output.contains("MeineSeite"));, +	private Map<String, Object> getParameters() {, +		Map<String, Object> model = new HashMap<String, Object>();, +	private List<PersonBean> getData() {, +		List<PersonBean> list = new ArrayList<PersonBean>();, +++ b/spring-context-support/src/main/java/org/springframework/ui/jasperreports/JasperReportsUtils.java, + * Copyright 2002-2012 the original author or authors., +	 * @param reportData a <code>JRDataSource</code>, <code>java.util.Collection</code> or object array, +	 * (converted accordingly), representing the report data to read fields from, +	public static void renderAsCsv(JasperReport report, Map<String, Object> parameters, Object reportData,, +			Writer writer) throws JRException {, +	 * @param reportData a <code>JRDataSource</code>, <code>java.util.Collection</code> or object array, +	 * (converted accordingly), representing the report data to read fields from, +	public static void renderAsCsv(JasperReport report, Map<String, Object> parameters, Object reportData,, +			Writer writer, Map<JRExporterParameter, Object> exporterParameters) throws JRException {, +	 * @param reportData a <code>JRDataSource</code>, <code>java.util.Collection</code> or object array, +	 * (converted accordingly), representing the report data to read fields from, +	public static void renderAsHtml(JasperReport report, Map<String, Object> parameters, Object reportData,, +			Writer writer) throws JRException {, +	 * @param reportData a <code>JRDataSource</code>, <code>java.util.Collection</code> or object array]