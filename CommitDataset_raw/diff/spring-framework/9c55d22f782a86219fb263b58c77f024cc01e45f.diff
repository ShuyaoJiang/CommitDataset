[+++ b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, + * <p>This exporter is compatible with MBeans as well as MXBeans., +		catch (Throwable ex) {, +	 * @return the {@code ObjectName} under which the resource was registered,, +	 * or {@code null} if the actual resource was {@code null} as well, +					if (bean != null) {, +			}, +			else if (mapValue != null) {, +		catch (Throwable ex) {, +		return null;, +		catch (Throwable ex) {, +				catch (Throwable ex) {, +				catch (Throwable ex) {, +++ b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, + * <p>This exporter is compatible with MBeans as well as MXBeans., +		catch (Throwable ex) {, +	 * @return the {@code ObjectName} under which the resource was registered,, +	 * or {@code null} if the actual resource was {@code null} as well, +					if (bean != null) {, +			}, +			else if (mapValue != null) {, +		catch (Throwable ex) {, +		return null;, +		catch (Throwable ex) {, +				catch (Throwable ex) {, +				catch (Throwable ex) {, +++ b/spring-context/src/test/java/org/springframework/jmx/export/MBeanExporterTests.java, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +	@Test  // SPR-2158, +	@Test  // SPR-3302, +	@Test  // SPR-3625, +	@Test, +	public void testRegisterFactoryBean() throws MalformedObjectNameException {, +		DefaultListableBeanFactory factory = new DefaultListableBeanFactory();, +		factory.registerBeanDefinition("spring:type=FactoryBean", new RootBeanDefinition(ProperSomethingFactoryBean.class));, +, +		MBeanExporter exporter = new MBeanExporter();, +		exporter.setServer(getServer());, +		exporter.setBeanFactory(factory);, +		exporter.setAutodetectMode(MBeanExporter.AUTODETECT_ALL);, +, +		start(exporter);, +		assertIsRegistered("Non-null FactoryBean object registered",, +				ObjectNameManager.getInstance("spring:type=FactoryBean"));, +	}, +, +	@Test, +	public void testIgnoreNullObjectFromFactoryBean() throws MalformedObjectNameException {, +		DefaultListableBeanFactory factory = new DefaultListableBeanFactory();, +		factory.registerBeanDefinition("spring:type=FactoryBean", new RootBeanDefinition(NullSomethingFactoryBean.class));, +, +		MBeanExporter exporter = new MBeanExporter();, +		exporter.setServer(getServer());, +		exporter.setBeanFactory(factory);, +		exporter.setAutodetectMode(MBeanExporter.AUTODETECT_ALL);, +, +		start(exporter);, +		assertIsNotRegistered("Null FactoryBean object not registered",, +				ObjectNameManager.getInstance("spring:type=FactoryBean"));, +	}, +, +, +, +	public interface SomethingMBean {}, +, +	public static class Something implements SomethingMBean {}, +, +, +	public static class ProperSomethingFactoryBean implements FactoryBean<Something> {, +, +		@Override public Something getObject() {, +			return new Something();, +		}, +, +		@Override public Class<?> getObjectType() {, +			return Something.class;, +		}, +, +		@Override public boolean isSingleton() {, +			return true;, +		}, +	}, +, +, +	public static class NullSomethingFactoryBean implements FactoryBean<Something> {, +, +		@Override public Something getObject() {, +			return null;, +		}, +, +		@Override public Class<?> getObjectType() {, +			return Something.class;, +		}, +, +		@Override public boolean isSingleton() {, +			return true;, +		}, +	}, +]