[+++ b/spring-core/src/main/java/org/springframework/util/CompositeIterator.java, + * Copyright 2002-2014 the original author or authors., +, +import java.util.LinkedHashSet;, +import java.util.Set;, + * Composite iterator that combines multiple other iterators,, + * as registered via {@link #add(Iterator)}., + *, + * <p>This implementation maintains a linked set of iterators, + * which are invoked in sequence until all iterators are exhausted., + *, + * @author Juergen Hoeller, + * @since 3.0, +	private final Set<Iterator<E>> iterators = new LinkedHashSet<Iterator<E>>();, +		Assert.state(!this.inUse, "You can no longer add iterators to a composite iterator that's already in use");, +		if (this.iterators.contains(iterator)) {, +		this.iterators.add(iterator);, +		this.inUse = true;, +		for (Iterator<E> iterator : this.iterators) {, +			if (iterator.hasNext()) {, +		this.inUse = true;, +		for (Iterator<E> iterator : this.iterators) {, +		throw new NoSuchElementException("All iterators exhausted");, +		throw new UnsupportedOperationException("CompositeIterator does not support remove()");, +, +++ b/spring-core/src/main/java/org/springframework/util/CompositeIterator.java, + * Copyright 2002-2014 the original author or authors., +, +import java.util.LinkedHashSet;, +import java.util.Set;, + * Composite iterator that combines multiple other iterators,, + * as registered via {@link #add(Iterator)}., + *, + * <p>This implementation maintains a linked set of iterators, + * which are invoked in sequence until all iterators are exhausted., + *, + * @author Juergen Hoeller, + * @since 3.0, +	private final Set<Iterator<E>> iterators = new LinkedHashSet<Iterator<E>>();, +		Assert.state(!this.inUse, "You can no longer add iterators to a composite iterator that's already in use");, +		if (this.iterators.contains(iterator)) {, +		this.iterators.add(iterator);, +		this.inUse = true;, +		for (Iterator<E> iterator : this.iterators) {, +			if (iterator.hasNext()) {, +		this.inUse = true;, +		for (Iterator<E> iterator : this.iterators) {, +		throw new NoSuchElementException("All iterators exhausted");, +		throw new UnsupportedOperationException("CompositeIterator does not support remove()");, +, +++ b/spring-core/src/test/java/org/springframework/util/CompositeIteratorTests.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +import org.junit.Test;, +, +import static org.junit.Assert.*;, +, + * @author Juergen Hoeller, +public class CompositeIteratorTests {, +	@Test, +		CompositeIterator<String> it = new CompositeIterator<String>();, +		}, +		catch (NoSuchElementException ex) {, +	@Test, +		CompositeIterator<String> it = new CompositeIterator<String>();, +		it.add(Arrays.asList("0", "1").iterator());, +		}, +		catch (NoSuchElementException ex) {, +	@Test, +		CompositeIterator<String> it = new CompositeIterator<String>();, +		it.add(Arrays.asList("0", "1").iterator());, +		it.add(Arrays.asList("2").iterator());, +		it.add(Arrays.asList("3", "4").iterator());, +		}, +		catch (NoSuchElementException ex) {, +	@Test, +		List<String> list = Arrays.asList("0", "1");, +		CompositeIterator<String> it = new CompositeIterator<String>();, +		}, +		catch (IllegalStateException ex) {, +		it = new CompositeIterator<String>();, +		}, +		catch (IllegalStateException ex) {, +	@Test, +		List<String> list = Arrays.asList("0", "1");, +		Iterator<String> iterator = list.iterator();]