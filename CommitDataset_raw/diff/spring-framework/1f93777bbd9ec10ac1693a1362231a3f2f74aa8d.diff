[+++ b/spring-test/.springBeans, +	<pluginVersion><![CDATA[3.0.0.201208090952-RELEASE]]></pluginVersion>, +		<config>src/test/java/org/springframework/test/context/junit4/aci/xml/MultipleInitializersXmlConfigTests-context.xml</config>, +++ b/spring-test/.springBeans, +	<pluginVersion><![CDATA[3.0.0.201208090952-RELEASE]]></pluginVersion>, +		<config>src/test/java/org/springframework/test/context/junit4/aci/xml/MultipleInitializersXmlConfigTests-context.xml</config>, +++ b/spring-test/src/main/java/org/springframework/test/context/ContextConfiguration.java, +import org.springframework.context.ApplicationContextInitializer;, +import org.springframework.context.ConfigurableApplicationContext;, + * {@code @ContextConfiguration} defines class-level metadata that is, + * for integration tests., + * As of Spring 3.1, {@linkplain #loader context loaders} may choose to support, + * <li>A class annotated with, + * {@link org.springframework.context.annotation.Configuration @Configuration}</li>, + * <li>Any other class that contains, + * {@link org.springframework.context.annotation.Bean @Bean}-methods</li>, + * Consult the Javadoc for, + * {@link org.springframework.context.annotation.Configuration @Configuration} and, + * {@link org.springframework.context.annotation.Bean @Bean}, + * @see org.springframework.context.ApplicationContext, +	 * @see #inheritLocations, +	 * @see #inheritLocations, +	 * @see #inheritLocations, +	 * The application context <em>initializer classes</em> to use for initializing, +	 * a {@link ConfigurableApplicationContext}., +	 * , +	 * <p>The concrete {@code ConfigurableApplicationContext} type supported by each, +	 * declared initializer must be compatible with the type of {@code ApplicationContext}, +	 * created by the {@link SmartContextLoader} in use., +	 *, +	 * <p>{@code SmartContextLoader} implementations typically detect whether, +	 * Spring's {@link org.springframework.core.Ordered Ordered} interface has been, +	 * implemented or if the @{@link org.springframework.core.annotation.Order Order}, +	 * annotation is present and sort instances accordingly prior to invoking them., +	 *, +	 * @since 3.2, +	 * @see org.springframework.context.ApplicationContextInitializer, +	 * @see org.springframework.context.ConfigurableApplicationContext, +	 * @see #inheritInitializers, +	 * @see #loader, +	 */, +	Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>[] initializers() default {};, +, +	/**, +	 * Whether or not {@linkplain #initializers context initializers} from test, +	 * superclasses should be <em>inherited</em>., +	 *, +	 * <p>The default value is <code>true</code>. This means that an annotated, +	 * class will <em>inherit</em> the application context initializers defined, +	 * by test superclasses. Specifically, the initializers for a given test, +	 * class will be added to the set of initializers defined by test, +	 * superclasses. Thus, subclasses have the option of <em>extending</em> the, +	 * set of initializers., +	 *, +	 * <p>If <code>inheritInitializers</code> is set to <code>false</code>, the, +	 * initializers for the annotated class will <em>shadow</em> and effectively, +	 * replace any initializers defined by superclasses., +	 *, +	 * <p>In the following example, the, +	 * {@link org.springframework.context.ApplicationContext ApplicationContext}, +	 * for {@code ExtendedTest} will be initialized using, +	 * {@code BaseInitializer} <strong>and</strong> {@code ExtendedInitializer}., +	 * Note, however, that the order in which the initializers are invoked, +	 * depends on whether they implement {@link org.springframework.core.Ordered, +	 * Ordered} or are annotated with {@link org.springframework.core.annotation.Order, +	 * &#064;Order}., +	 * <pre class="code">, +	 * &#064;ContextConfiguration(initializers = BaseInitializer.class), +	 * public class BaseTest {, +	 *     // ..., +	 * }, +	 * , +	 * &#064;ContextConfiguration(initializers = ExtendedInitializer.class), +	 * public class ExtendedTest extends BaseTest {, +	 *     // ..., +	 * }, +	 * </pre>, +	 * @since 3.2, +	 */, +	boolean inheritInitializers() default true;, +, +	/**, +	 * The type of {@link SmartContextLoader} (or {@link ContextLoader}) to use, +++ b/spring-test/.springBeans, +	<pluginVersion><![CDATA[3.0.0.201208090952-RELEASE]]></pluginVersion>, +		<config>src/test/java/org/springframework/test/context/junit4/aci/xml/MultipleInitializersXmlConfigTests-context.xml</config>, +++ b/spring-test/src/main/java/org/springframework/test/context/ContextConfiguration.java, +import org.springframework.context.ApplicationContextInitializer;, +import org.springframework.context.ConfigurableApplicationContext;, + * {@code @ContextConfiguration} defines class-level metadata that is, + * for integration tests., + * As of Spring 3.1, {@linkplain #loader context loaders} may choose to support, + * <li>A class annotated with, + * {@link org.springframework.context.annotation.Configuration @Configuration}</li>, + * <li>Any other class that contains, + * {@link org.springframework.context.annotation.Bean @Bean}-methods</li>, + * Consult the Javadoc for, + * {@link org.springframework.context.annotation.Configuration @Configuration} and, + * {@link org.springframework.context.annotation.Bean @Bean}, + * @see org.springframework.context.ApplicationContext]