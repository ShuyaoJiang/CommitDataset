[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	private static final Map<Class<? extends Annotation>, Map<String, String>> attributeAliasCache =, +			new ConcurrentReferenceHashMap<Class<? extends Annotation>, Map<String, String>>(256);, +, +		InvocationHandler handler = new SynthesizedAnnotationInvocationHandler(annotatedElement, annotation,, +			getAttributeAliasMap(annotationType));, +, +	 * Get a map of all attribute alias pairs, declared via {@code @AliasFor}, +	 * in the supplied annotation type., +	 *, +	 * <p>The map is keyed by attribute name with each value representing, +	 * the name of the aliased attribute. For each entry {@code [x, y]} in, +	 * the map there will be a corresponding {@code [y, x]} entry in the map., +	 *, +	 * <p>An empty return value implies that the annotation does not declare, +	 * any attribute aliases., +	 *, +	 * @param annotationType the annotation type to find attribute aliases in, +	 * @return a map containing attribute alias pairs; never {@code null}, +	private static Map<String, String> getAttributeAliasMap(Class<? extends Annotation> annotationType) {, +			return Collections.emptyMap();, +		}, +, +		Map<String, String> cachedMap = attributeAliasCache.get(annotationType);, +		if (cachedMap != null) {, +			return cachedMap;, +, +		attributeAliasCache.put(annotationType, map);, +, +	 * @param element the element that is annotated with the supplied annotation,, +	 * used for contextual logging; may be {@code null} if unknown, +	 * @param attributes the annotation attributes to post-process, +		Map<String, String> aliasMap = getAttributeAliasMap(annotationType);]