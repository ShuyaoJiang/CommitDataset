[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +		if (beanNames.length > 1) {, +			ArrayList<String> autowireCandidates = new ArrayList<String>();, +			for (String beanName : beanNames) {, +				if (getBeanDefinition(beanName).isAutowireCandidate()) {, +					autowireCandidates.add(beanName);, +				}, +			}, +			if (autowireCandidates.size() > 0) {, +				beanNames = autowireCandidates.toArray(new String[autowireCandidates.size()]);, +			}, +		}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +		if (beanNames.length > 1) {, +			ArrayList<String> autowireCandidates = new ArrayList<String>();, +			for (String beanName : beanNames) {, +				if (getBeanDefinition(beanName).isAutowireCandidate()) {, +					autowireCandidates.add(beanName);, +				}, +			}, +			if (autowireCandidates.size() > 0) {, +				beanNames = autowireCandidates.toArray(new String[autowireCandidates.size()]);, +			}, +		}, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +	@Test(expected=NoSuchBeanDefinitionException.class), +	public void testGetBeanByTypeWithAmbiguity() {, +		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();, +		RootBeanDefinition bd1 = new RootBeanDefinition(TestBean.class);, +		RootBeanDefinition bd2 = new RootBeanDefinition(TestBean.class);, +		lbf.registerBeanDefinition("bd1", bd1);, +		lbf.registerBeanDefinition("bd2", bd2);, +		lbf.getBean(TestBean.class);, +	}, +, +	@Test, +	public void testGetBeanByTypeFiltersOutNonAutowireCandidates() {, +		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();, +		RootBeanDefinition bd1 = new RootBeanDefinition(TestBean.class);, +		RootBeanDefinition bd2 = new RootBeanDefinition(TestBean.class);, +		RootBeanDefinition na1 = new RootBeanDefinition(TestBean.class);, +		na1.setAutowireCandidate(false);, +, +		lbf.registerBeanDefinition("bd1", bd1);, +		lbf.registerBeanDefinition("na1", na1);, +		TestBean actual = lbf.getBean(TestBean.class); // na1 was filtered, +		assertSame(lbf.getBean("bd1", TestBean.class), actual);, +, +		lbf.registerBeanDefinition("bd2", bd2);, +		try {, +			lbf.getBean(TestBean.class);, +			fail("Should have thrown NoSuchBeanDefinitionException");, +		} catch (NoSuchBeanDefinitionException ex) {, +			// expected, +		}, +	}, +]