[+++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, +		Assert.notNull(method, "Method must not be null");, +		return (method.isBridge() || (!method.isSynthetic() && !isGroovyObjectMethod(method)));, +	}, +, +	private static boolean isGroovyObjectMethod(Method method) {, +		return method.getDeclaringClass().getName().equals("groovy.lang.GroovyObject");, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, +		Assert.notNull(method, "Method must not be null");, +		return (method.isBridge() || (!method.isSynthetic() && !isGroovyObjectMethod(method)));, +	}, +, +	private static boolean isGroovyObjectMethod(Method method) {, +		return method.getDeclaringClass().getName().equals("groovy.lang.GroovyObject");, +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/MatchAlwaysTransactionAttributeSource.java, +		return (method == null || ClassUtils.isUserLevelMethod(method) ? this.transactionAttribute : null);, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, +		Assert.notNull(method, "Method must not be null");, +		return (method.isBridge() || (!method.isSynthetic() && !isGroovyObjectMethod(method)));, +	}, +, +	private static boolean isGroovyObjectMethod(Method method) {, +		return method.getDeclaringClass().getName().equals("groovy.lang.GroovyObject");, +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/MatchAlwaysTransactionAttributeSource.java, +		return (method == null || ClassUtils.isUserLevelMethod(method) ? this.transactionAttribute : null);, +++ b/spring-tx/src/test/java/org/springframework/transaction/interceptor/TransactionAttributeSourceTests.java, +	@Test, +	public void testMatchAlwaysTransactionAttributeSourceWithNulls() throws Exception {, +		MatchAlwaysTransactionAttributeSource tas = new MatchAlwaysTransactionAttributeSource();, +		TransactionDefinition definition = tas.getTransactionAttribute(null, null);, +		assertEquals(TransactionDefinition.PROPAGATION_REQUIRED, definition.getPropagationBehavior());, +		assertEquals(TransactionDefinition.ISOLATION_DEFAULT, definition.getIsolationLevel());, +		assertEquals(TransactionDefinition.TIMEOUT_DEFAULT, definition.getTimeout());, +		assertFalse(definition.isReadOnly());, +	}, +]