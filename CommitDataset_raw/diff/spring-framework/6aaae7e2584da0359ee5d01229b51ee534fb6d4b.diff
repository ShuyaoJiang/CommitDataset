[+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/jasperreports/AbstractJasperReportsTests.java, + * Copyright 2002-2014 the original author or authors., +, + * @author Sam Brannen, +		Map<String, Object> model = new HashMap<String, Object>();, +	protected List<Object> getData() {, +		List<Object> list = new ArrayList<Object>();, +	protected List<Object> getProductData() {, +		List<Object> list = new ArrayList<Object>();, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/jasperreports/AbstractJasperReportsTests.java, + * Copyright 2002-2014 the original author or authors., +, + * @author Sam Brannen, +		Map<String, Object> model = new HashMap<String, Object>();, +	protected List<Object> getData() {, +		List<Object> list = new ArrayList<Object>();, +	protected List<Object> getProductData() {, +		List<Object> list = new ArrayList<Object>();, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/jasperreports/AbstractJasperReportsViewTests.java, + * Copyright 2002-2014 the original author or authors., +, +import org.springframework.tests.Assume;, +import org.springframework.tests.TestGroup;, + * @author Sam Brannen, +		Assume.group(TestGroup.CUSTOM_COMPILATION);, +, +	@Test(expected = ApplicationContextException.class), +	@Test(expected = IllegalArgumentException.class), +		Map<String, Object> model = getModel();, +		Map<String, Object> model = getModel();, +	@SuppressWarnings("rawtypes"), +		Map<String, Object> model = getModel();, +		Map<String, Object> model = getModel();, +	@SuppressWarnings("rawtypes"), +		Map<String, Object> model = getModel();, +		Map<String, Object> model = getModel();, +		Map<String, Object> model = getModel();, +		Map<String, Object> model = getModel();, +		Map<String, Object> model = getModel();, +		Map<String, Object> model = getModel();, +		Map<Object, Object> parameters = new HashMap<Object, Object>();, +		Map<String, Object> model = getModel();, +		model.put(JRExporterParameter.CHARACTER_ENCODING.toString(), overiddenCharacterEncoding);, +		Map<String, Object> model = getModel();, +		Assume.group(TestGroup.CUSTOM_COMPILATION);, +, +		Map<String, Object> model = getModel();, +		Assume.group(TestGroup.CUSTOM_COMPILATION);, +, +		Map<String, Object> model = getModel();, +		Assume.group(TestGroup.CUSTOM_COMPILATION);, +, +		Map<Object, Object> parameters = new HashMap<Object, Object>();, +		public MockDataSourceProvider(Class<?> clazz) {, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/jasperreports/AbstractJasperReportsTests.java, + * Copyright 2002-2014 the original author or authors., +, + * @author Sam Brannen, +		Map<String, Object> model = new HashMap<String, Object>();, +	protected List<Object> getData() {, +		List<Object> list = new ArrayList<Object>();, +	protected List<Object> getProductData() {, +		List<Object> list = new ArrayList<Object>();, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/jasperreports/AbstractJasperReportsViewTests.java, + * Copyright 2002-2014 the original author or authors., +, +import org.springframework.tests.Assume;, +import org.springframework.tests.TestGroup;, + * @author Sam Brannen, +		Assume.group(TestGroup.CUSTOM_COMPILATION);, +, +	@Test(expected = ApplicationContextException.class), +	@Test(expected = IllegalArgumentException.class), +		Map<String, Object> model = getModel();, +		Map<String, Object> model = getModel();, +	@SuppressWarnings("rawtypes"), +		Map<String, Object> model = getModel();, +		Map<String, Object> model = getModel();, +	@SuppressWarnings("rawtypes"), +		Map<String, Object> model = getModel();, +		Map<String, Object> model = getModel();, +		Map<String, Object> model = getModel();, +		Map<String, Object> model = getModel();, +		Map<String, Object> model = getModel();, +		Map<String, Object> model = getModel();, +		Map<Object, Object> parameters = new HashMap<Object, Object>();, +		Map<String, Object> model = getModel();, +		model.put(JRExporterParameter.CHARACTER_ENCODING.toString(), overiddenCharacterEncoding);, +		Map<String, Object> model = getModel();, +		Assume.group(TestGroup.CUSTOM_COMPILATION);, +, +		Map<String, Object> model = getModel();, +		Assume.group(TestGroup.CUSTOM_COMPILATION);, +, +		Map<String, Object> model = getModel();, +		Assume.group(TestGroup.CUSTOM_COMPILATION);, +, +		Map<Object, Object> parameters = new HashMap<Object, Object>();, +		public MockDataSourceProvider(Class<?> clazz) {, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/view/jasperreports/JasperReportsMultiFormatViewTests.java]