[+++ b/spring-web/src/main/java/org/springframework/web/filter/reactive/HiddenHttpMethodFilter.java, + * adapted via the {@link #setMethodParamName(String) methodParamName} property., + * @author Rossen Stoyanchev, +	/** Default name of the form parameter with the HTTP method to use */, +	public static final String DEFAULT_METHOD_PARAMETER_NAME = "_method";, +, +	private String methodParamName = DEFAULT_METHOD_PARAMETER_NAME;, +, +	 * Set the name of the form parameter with the HTTP method to use., +	 * <p>By default this is set to {@code "_method"}., +	public void setMethodParamName(String methodParamName) {, +		Assert.hasText(methodParamName, "'methodParamName' must not be empty");, +		this.methodParamName = methodParamName;, +, +	 * Transform an HTTP POST into another method based on {@code methodParamName}, +		if (exchange.getRequest().getMethod() != HttpMethod.POST) {, +, +		return exchange.getFormData(), +				.map(formData -> {, +					String method = formData.getFirst(this.methodParamName);, +					return StringUtils.hasLength(method) ? mapExchange(exchange, method) : exchange;, +				}), +				.then((exchange1) -> chain.filter(exchange1));, +	private ServerWebExchange mapExchange(ServerWebExchange exchange, String methodParamValue) {, +		HttpMethod httpMethod = HttpMethod.resolve(methodParamValue.toUpperCase(Locale.ENGLISH));, +		Assert.notNull(httpMethod, () -> "HttpMethod '" + methodParamValue + "' not supported");, +		return exchange.mutate().request(builder -> builder.method(httpMethod)).build();, +, +++ b/spring-web/src/main/java/org/springframework/web/filter/reactive/HiddenHttpMethodFilter.java, + * adapted via the {@link #setMethodParamName(String) methodParamName} property., + * @author Rossen Stoyanchev, +	/** Default name of the form parameter with the HTTP method to use */, +	public static final String DEFAULT_METHOD_PARAMETER_NAME = "_method";, +, +	private String methodParamName = DEFAULT_METHOD_PARAMETER_NAME;, +, +	 * Set the name of the form parameter with the HTTP method to use., +	 * <p>By default this is set to {@code "_method"}., +	public void setMethodParamName(String methodParamName) {, +		Assert.hasText(methodParamName, "'methodParamName' must not be empty");, +		this.methodParamName = methodParamName;, +, +	 * Transform an HTTP POST into another method based on {@code methodParamName}, +		if (exchange.getRequest().getMethod() != HttpMethod.POST) {, +, +		return exchange.getFormData(), +				.map(formData -> {, +					String method = formData.getFirst(this.methodParamName);, +					return StringUtils.hasLength(method) ? mapExchange(exchange, method) : exchange;, +				}), +				.then((exchange1) -> chain.filter(exchange1));, +	private ServerWebExchange mapExchange(ServerWebExchange exchange, String methodParamValue) {, +		HttpMethod httpMethod = HttpMethod.resolve(methodParamValue.toUpperCase(Locale.ENGLISH));, +		Assert.notNull(httpMethod, () -> "HttpMethod '" + methodParamValue + "' not supported");, +		return exchange.mutate().request(builder -> builder.method(httpMethod)).build();, +, +++ b/spring-web/src/main/java/org/springframework/web/filter/reactive/package-info.java, +/**, + * {@link org.springframework.web.server.WebFilter} implementations for use in, + * reactive web applications., + */, +package org.springframework.web.filter.reactive;, +++ b/spring-web/src/main/java/org/springframework/web/filter/reactive/HiddenHttpMethodFilter.java, + * adapted via the {@link #setMethodParamName(String) methodParamName} property., + * @author Rossen Stoyanchev, +	/** Default name of the form parameter with the HTTP method to use */, +	public static final String DEFAULT_METHOD_PARAMETER_NAME = "_method";, +, +	private String methodParamName = DEFAULT_METHOD_PARAMETER_NAME;, +, +	 * Set the name of the form parameter with the HTTP method to use., +	 * <p>By default this is set to {@code "_method"}., +	public void setMethodParamName(String methodParamName) {, +		Assert.hasText(methodParamName, "'methodParamName' must not be empty");, +		this.methodParamName = methodParamName;, +, +	 * Transform an HTTP POST into another method based on {@code methodParamName}, +		if (exchange.getRequest().getMethod() != HttpMethod.POST) {, +, +		return exchange.getFormData(), +				.map(formData -> {, +					String method = formData.getFirst(this.methodParamName);, +					return StringUtils.hasLength(method) ? mapExchange(exchange, method) : exchange;, +				}), +				.then((exchange1) -> chain.filter(exchange1));, +	private ServerWebExchange mapExchange(ServerWebExchange exchange, String methodParamValue) {, +		HttpMethod httpMethod = HttpMethod.resolve(methodParamValue.toUpperCase(Locale.ENGLISH));, +		Assert.notNull(httpMethod, () -> "HttpMethod '" + methodParamValue + "' not supported");, +		return exchange.mutate().request(builder -> builder.method(httpMethod)).build();, +, +++ b/spring-web/src/main/java/org/springframework/web/filter/reactive/package-info.java, +/**, + * {@link org.springframework.web.server.WebFilter} implementations for use in, + * reactive web applications., + */, +package org.springframework.web.filter.reactive;, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/DefaultServerWebExchange.java, +				return FORM_READER, +						.readMono(FORM_DATA_VALUE_TYPE, request, Collections.emptyMap()), +						.otherwiseIfEmpty(EMPTY_FORM_DATA)]