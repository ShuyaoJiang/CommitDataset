[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +					if (abd.getMetadata().isAnnotated(Primary.class.getName())) {, +					if (abd.getMetadata().isAnnotated(Lazy.class.getName())) {, +					if (abd.getMetadata().isAnnotated(DependsOn.class.getName())) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +					if (abd.getMetadata().isAnnotated(Primary.class.getName())) {, +					if (abd.getMetadata().isAnnotated(Lazy.class.getName())) {, +					if (abd.getMetadata().isAnnotated(DependsOn.class.getName())) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +		if (getMetadata().isAnnotated(Configuration.class.getName())) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +					if (abd.getMetadata().isAnnotated(Primary.class.getName())) {, +					if (abd.getMetadata().isAnnotated(Lazy.class.getName())) {, +					if (abd.getMetadata().isAnnotated(DependsOn.class.getName())) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +		if (getMetadata().isAnnotated(Configuration.class.getName())) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +import org.springframework.core.annotation.AnnotationUtils;, +			this.registry.registerAlias(beanName, alias);, +		if (this.registry.containsBeanDefinition(beanName)) {, +		if (metadata.isAnnotated(Primary.class.getName())) {, +		if (metadata.isAnnotated(Lazy.class.getName())) {, +		else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())){, +		if (metadata.isAnnotated(DependsOn.class.getName())) {, +			return (super.isFactoryMethod(candidate) && AnnotationUtils.findAnnotation(candidate, Bean.class) != null);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +					if (abd.getMetadata().isAnnotated(Primary.class.getName())) {, +					if (abd.getMetadata().isAnnotated(Lazy.class.getName())) {, +					if (abd.getMetadata().isAnnotated(DependsOn.class.getName())) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +		if (getMetadata().isAnnotated(Configuration.class.getName())) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +import org.springframework.core.annotation.AnnotationUtils;, +			this.registry.registerAlias(beanName, alias);, +		if (this.registry.containsBeanDefinition(beanName)) {, +		if (metadata.isAnnotated(Primary.class.getName())) {, +		if (metadata.isAnnotated(Lazy.class.getName())) {, +		else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())){, +		if (metadata.isAnnotated(DependsOn.class.getName())) {, +			return (super.isFactoryMethod(candidate) && AnnotationUtils.findAnnotation(candidate, Bean.class) != null);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassMethod.java, +		if (this.declaringClass.getMetadata().isAnnotated(Configuration.class.getName()) && !getMetadata().isOverridable()) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +					if (abd.getMetadata().isAnnotated(Primary.class.getName())) {, +					if (abd.getMetadata().isAnnotated(Lazy.class.getName())) {, +					if (abd.getMetadata().isAnnotated(DependsOn.class.getName())) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +		if (getMetadata().isAnnotated(Configuration.class.getName())) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +import org.springframework.core.annotation.AnnotationUtils;, +			this.registry.registerAlias(beanName, alias);, +		if (this.registry.containsBeanDefinition(beanName)) {, +		if (metadata.isAnnotated(Primary.class.getName())) {, +		if (metadata.isAnnotated(Lazy.class.getName())) {, +		else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())){, +		if (metadata.isAnnotated(DependsOn.class.getName())) {, +			return (super.isFactoryMethod(candidate) && AnnotationUtils.findAnnotation(candidate, Bean.class) != null);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassMethod.java, +		if (this.declaringClass.getMetadata().isAnnotated(Configuration.class.getName()) && !getMetadata().isOverridable()) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +		if (metadata.isAnnotated(Import.class.getName())) {, +		if (!metadata.isAnnotated(Configuration.class.getName())) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +					if (abd.getMetadata().isAnnotated(Primary.class.getName())) {, +					if (abd.getMetadata().isAnnotated(Lazy.class.getName())) {, +					if (abd.getMetadata().isAnnotated(DependsOn.class.getName())) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +		if (getMetadata().isAnnotated(Configuration.class.getName())) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +import org.springframework.core.annotation.AnnotationUtils;, +			this.registry.registerAlias(beanName, alias);, +		if (this.registry.containsBeanDefinition(beanName)) {, +		if (metadata.isAnnotated(Primary.class.getName())) {, +		if (metadata.isAnnotated(Lazy.class.getName())) {, +		else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())){, +		if (metadata.isAnnotated(DependsOn.class.getName())) {, +			return (super.isFactoryMethod(candidate) && AnnotationUtils.findAnnotation(candidate, Bean.class) != null);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassMethod.java, +		if (this.declaringClass.getMetadata().isAnnotated(Configuration.class.getName()) && !getMetadata().isOverridable()) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +		if (metadata.isAnnotated(Import.class.getName())) {, +		if (!metadata.isAnnotated(Configuration.class.getName())) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +			if (metadata.isAnnotated(Configuration.class.getName())) {, +			else if (metadata.isAnnotated(Component.class.getName())) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +					if (abd.getMetadata().isAnnotated(Primary.class.getName())) {, +					if (abd.getMetadata().isAnnotated(Lazy.class.getName())) {, +					if (abd.getMetadata().isAnnotated(DependsOn.class.getName())) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +		if (getMetadata().isAnnotated(Configuration.class.getName())) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +import org.springframework.core.annotation.AnnotationUtils;, +			this.registry.registerAlias(beanName, alias);, +		if (this.registry.containsBeanDefinition(beanName)) {, +		if (metadata.isAnnotated(Primary.class.getName())) {, +		if (metadata.isAnnotated(Lazy.class.getName())) {, +		else if (configClass.getMetadata().isAnnotated(Lazy.class.getName())){, +		if (metadata.isAnnotated(DependsOn.class.getName())) {, +			return (super.isFactoryMethod(candidate) && AnnotationUtils.findAnnotation(candidate, Bean.class) != null);]