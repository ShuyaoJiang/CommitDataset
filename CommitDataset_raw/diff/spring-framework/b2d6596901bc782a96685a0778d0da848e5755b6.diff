[+++ b/spring-test-mvc/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java, + * Copyright 2002-2013 the original author or authors., +import static org.springframework.test.util.MatcherAssertionErrors.assertThat;, +	 * Assert the request content type is compatible with the given, +	 * content type as defined by {@link MediaType#isCompatibleWith(MediaType)}., +	 */, +	public RequestMatcher contentTypeCompatibleWith(String contentType) {, +		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType));, +	}, +, +	/**, +	 * Assert the request content type is compatible with the given, +	 * content type as defined by {@link MediaType#isCompatibleWith(MediaType)}., +	 */, +	public RequestMatcher contentTypeCompatibleWith(final MediaType contentType) {, +		return new RequestMatcher() {, +			public void match(ClientHttpRequest request) throws IOException, AssertionError {, +				MediaType actualContentType = request.getHeaders().getContentType();, +				assertTrue("Content type not set", actualContentType != null);, +				assertTrue("Content type [" + actualContentType + "] is not compatible with [" + contentType + "]",, +						actualContentType.isCompatibleWith(contentType));, +			}, +		};, +	}, +, +	/**, +++ b/spring-test-mvc/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java, + * Copyright 2002-2013 the original author or authors., +import static org.springframework.test.util.MatcherAssertionErrors.assertThat;, +	 * Assert the request content type is compatible with the given, +	 * content type as defined by {@link MediaType#isCompatibleWith(MediaType)}., +	 */, +	public RequestMatcher contentTypeCompatibleWith(String contentType) {, +		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType));, +	}, +, +	/**, +	 * Assert the request content type is compatible with the given, +	 * content type as defined by {@link MediaType#isCompatibleWith(MediaType)}., +	 */, +	public RequestMatcher contentTypeCompatibleWith(final MediaType contentType) {, +		return new RequestMatcher() {, +			public void match(ClientHttpRequest request) throws IOException, AssertionError {, +				MediaType actualContentType = request.getHeaders().getContentType();, +				assertTrue("Content type not set", actualContentType != null);, +				assertTrue("Content type [" + actualContentType + "] is not compatible with [" + contentType + "]",, +						actualContentType.isCompatibleWith(contentType));, +			}, +		};, +	}, +, +	/**, +++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/result/ContentResultMatchers.java, + * Copyright 2002-2013 the original author or authors., +	 * Assert the ServletResponse content type. The given content type must, +	 * fully match including type, sub-type, and parameters. For checking, +	 * only the type and sub-type see {@link #contentTypeCompatibleWith(String)}., +	 * The given content type must fully match including type, sub-type, and, +	 * parameters. For checking only the type and sub-type see, +	 * {@link #contentTypeCompatibleWith(MediaType)}., +	 * Assert the ServletResponse content type is compatible with the given, +	 * content type as defined by {@link MediaType#isCompatibleWith(MediaType)}., +	 */, +	public ResultMatcher contentTypeCompatibleWith(String contentType) {, +		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType));, +	}, +, +	/**, +	 * Assert the ServletResponse content type is compatible with the given, +	 * content type as defined by {@link MediaType#isCompatibleWith(MediaType)}., +	 */, +	public ResultMatcher contentTypeCompatibleWith(final MediaType contentType) {, +		return new ResultMatcher() {, +			public void match(MvcResult result) throws Exception {, +				String actual = result.getResponse().getContentType();, +				assertTrue("Content type not set", actual != null);, +				MediaType actualContentType = MediaType.parseMediaType(actual);, +				assertTrue("Content type [" + actual + "] is not compatible with [" + contentType + "]",, +						actualContentType.isCompatibleWith(contentType));, +			}, +		};, +	}, +, +	/**, +++ b/spring-test-mvc/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java, + * Copyright 2002-2013 the original author or authors., +import static org.springframework.test.util.MatcherAssertionErrors.assertThat;, +	 * Assert the request content type is compatible with the given, +	 * content type as defined by {@link MediaType#isCompatibleWith(MediaType)}., +	 */, +	public RequestMatcher contentTypeCompatibleWith(String contentType) {, +		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType));, +	}, +, +	/**, +	 * Assert the request content type is compatible with the given, +	 * content type as defined by {@link MediaType#isCompatibleWith(MediaType)}., +	 */, +	public RequestMatcher contentTypeCompatibleWith(final MediaType contentType) {, +		return new RequestMatcher() {]