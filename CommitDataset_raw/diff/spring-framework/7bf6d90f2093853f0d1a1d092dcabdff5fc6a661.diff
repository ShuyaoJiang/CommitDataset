[+++ b/org.springframework.core/src/main/java/org/springframework/util/xml/AbstractStaxContentHandler.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.util.xml;, +, +import javax.xml.namespace.QName;, +import javax.xml.stream.XMLStreamException;, +, +import org.xml.sax.Attributes;, +import org.xml.sax.ContentHandler;, +import org.xml.sax.SAXException;, +, +/**, + * Abstract base class for SAX <code>ContentHandler</code> implementations that use StAX as a basis. All methods, + * delegate to internal template methods, capable of throwing a <code>XMLStreamException</code>. Additionally, an, + * namespace context is used to keep track of declared namespaces., + *, + * @author Arjen Poutsma, + * @since 3.0, + */, +abstract class AbstractStaxContentHandler implements ContentHandler {, +, +	private SimpleNamespaceContext namespaceContext = new SimpleNamespaceContext();, +, +	public final void startDocument() throws SAXException {, +		namespaceContext.clear();, +		try {, +			startDocumentInternal();, +		}, +		catch (XMLStreamException ex) {, +			throw new SAXException("Could not handle startDocument: " + ex.getMessage(), ex);, +		}, +	}, +, +	protected abstract void startDocumentInternal() throws XMLStreamException;, +, +	public final void endDocument() throws SAXException {, +		namespaceContext.clear();, +		try {, +			endDocumentInternal();, +		}, +		catch (XMLStreamException ex) {, +			throw new SAXException("Could not handle startDocument: " + ex.getMessage(), ex);, +		}, +	}, +, +	protected abstract void endDocumentInternal() throws XMLStreamException;, +, +	/**, +	 * Binds the given prefix to the given namespaces., +	 *, +	 * @see SimpleNamespaceContext#bindNamespaceUri(String,String), +	 */, +	public final void startPrefixMapping(String prefix, String uri) {, +		namespaceContext.bindNamespaceUri(prefix, uri);, +	}, +, +	/**, +	 * Removes the binding for the given prefix., +	 *, +	 * @see SimpleNamespaceContext#removeBinding(String), +	 */, +	public final void endPrefixMapping(String prefix) {, +		namespaceContext.removeBinding(prefix);, +	}, +, +	public final void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException {, +		try {, +			startElementInternal(toQName(uri, qName), atts, namespaceContext);, +		}, +		catch (XMLStreamException ex) {, +			throw new SAXException("Could not handle startElement: " + ex.getMessage(), ex);, +		}, +	}, +, +	protected abstract void startElementInternal(QName name, Attributes atts, SimpleNamespaceContext namespaceContext), +			throws XMLStreamException;, +, +	public final void endElement(String uri, String localName, String qName) throws SAXException {, +		try {, +			endElementInternal(toQName(uri, qName), namespaceContext);, +		}, +		catch (XMLStreamException ex) {, +			throw new SAXException("Could not handle endElement: " + ex.getMessage(), ex);, +		}, +	}]