[+++ b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java, +import java.util.Map;, +import com.jayway.jsonpath.InvalidPathException;, +import com.jayway.jsonpath.JsonPath;, +, +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.hamcrest.core.IsInstanceOf.instanceOf;, +import static org.springframework.test.util.AssertionErrors.assertEquals;, +import static org.springframework.test.util.AssertionErrors.assertTrue;, +import static org.springframework.test.util.AssertionErrors.fail;, + * @author Craig Andrews, + * @author Sam Brannen, +	 * Construct a new {@code JsonPathExpectationsHelper}., +	 * @param expression the {@link JsonPath} expression; never {@code null} or empty, +	 * @param args arguments to parameterize the {@code JsonPath} expression, with, +		Assert.hasText(expression, "expression must not be null or empty");, +	 * Evaluate the JSON path expression against the supplied {@code content}, +	 * and assert the resulting value with the given {@code Matcher}., +	 * @param content the JSON response content, +	 * @param matcher the matcher with which to assert the result, +		assertThat("JSON path \"" + this.expression + "\"", value, matcher);, +	 * Evaluate the JSON path expression against the supplied {@code content}, +	 * and assert that the result is equal to the expected value., +	 * @param content the JSON response content, +	 * @param expectedValue the expected value, +	public void assertValue(String content, Object expectedValue) throws ParseException {, +		Object actualValue = evaluateJsonPath(content);, +				fail("Got a list of values " + actualValue + " instead of the expected single value " + expectedValue);, +			assertEquals("For JSON path \"" + this.expression + "\", type of value",, +					expectedValue.getClass().getName(), actualValue.getClass().getName());, +		assertEquals("JSON path \"" + this.expression + "\"", expectedValue, actualValue);, +	 * Evaluate the JSON path expression against the supplied {@code content}, +	 * and assert that the resulting value is a {@link String}., +	 * @param content the JSON response content, +	 * @since 4.2.1, +	public void assertValueIsString(String content) throws ParseException {, +		Object value = assertExistsAndReturn(content);, +		String reason = "Expected string at JSON path " + this.expression + " but found " + value;, +		assertThat(reason, value, instanceOf(String.class));, +	 * Evaluate the JSON path expression against the supplied {@code content}, +	 * and assert that the resulting value is a {@link Boolean}., +	 * @param content the JSON response content, +	 * @since 4.2.1, +	 */, +	public void assertValueIsBoolean(String content) throws ParseException {, +		Object value = assertExistsAndReturn(content);, +		String reason = "Expected boolean at JSON path " + this.expression + " but found " + value;, +		assertThat(reason, value, instanceOf(Boolean.class));, +	}, +, +	/**, +	 * Evaluate the JSON path expression against the supplied {@code content}, +	 * and assert that the resulting value is a {@link Number}., +	 * @param content the JSON response content, +	 * @since 4.2.1, +	 */, +	public void assertValueIsNumber(String content) throws ParseException {, +		Object value = assertExistsAndReturn(content);, +		String reason = "Expected number at JSON path " + this.expression + " but found " + value;, +		assertThat(reason, value, instanceOf(Number.class));, +	}, +, +	/**, +	 * Evaluate the JSON path expression against the supplied {@code content}, +	 * and assert that the resulting value is an array., +	 * @param content the JSON response content, +	 */, +	public void assertValueIsArray(String content) throws ParseException {, +		Object value = assertExistsAndReturn(content);, +		String reason = "Expected array for JSON path \"" + this.expression + "\" but found " + value;, +		assertTrue(reason, value instanceof List);, +	}, +, +	/**, +	 * Evaluate the JSON path expression against the supplied {@code content}, +	 * and assert that the resulting value is a {@link Map}., +	 * @param content the JSON response content, +	 * @since 4.2.1, +	 */, +	public void assertValueIsMap(String content) throws ParseException {, +		Object value = assertExistsAndReturn(content);, +		String reason = "Expected map at JSON path " + this.expression + " but found " + value;, +		assertThat(reason, value, instanceOf(Map.class));, +	}, +, +	/**, +	 * Evaluate the JSON path expression against the supplied {@code content}, +	 * and assert that the resulting value exists., +	 * @param content the JSON response content, +		assertExistsAndReturn(content);, +	 * Evaluate the JSON path expression against the supplied {@code content}, +	 * and assert that the resulting value is empty (i.e., that a match for, +	 * the JSON path expression does not exist in the supplied content)., +	 * @param content the JSON response content, +	private Object evaluateJsonPath(String content) throws ParseException {, +		String message = "No value for JSON path \"" + this.expression + "\", exception: ";, +		try {, +			return this.jsonPath.read(content);, +		}, +		catch (InvalidPathException ex) {]