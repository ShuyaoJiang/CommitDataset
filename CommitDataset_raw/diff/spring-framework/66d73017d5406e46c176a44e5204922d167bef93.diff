[+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/RequestMappingInfoHandlerMappingTests.java, +import org.springframework.web.reactive.result.method.RequestMappingInfo.*;, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +import static org.springframework.mock.http.server.reactive.test.MockServerHttpRequest.*;, +import static org.springframework.web.bind.annotation.RequestMethod.*;, +import static org.springframework.web.method.MvcAnnotationPredicates.*;, +import static org.springframework.web.method.ResolvableMethod.*;, +import static org.springframework.web.reactive.HandlerMapping.*;, +import static org.springframework.web.reactive.result.method.RequestMappingInfo.*;, +, +		// SPR-11897, +		exchange = MockServerWebExchange.from(get("/a=42;b=c"));, +		handleMatch(exchange, "/{foo}");, +, +		matrixVariables = getMatrixVariables(exchange, "foo");, +		uriVariables = getUriTemplateVariables(exchange);, +, +		assertNotNull(matrixVariables);, +		assertEquals(1, matrixVariables.size());, +		assertEquals("c", matrixVariables.getFirst("b"));, +		assertEquals("a=42", uriVariables.get("foo"));, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/RequestMappingInfoHandlerMappingTests.java, +import org.springframework.web.reactive.result.method.RequestMappingInfo.*;, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +import static org.springframework.mock.http.server.reactive.test.MockServerHttpRequest.*;, +import static org.springframework.web.bind.annotation.RequestMethod.*;, +import static org.springframework.web.method.MvcAnnotationPredicates.*;, +import static org.springframework.web.method.ResolvableMethod.*;, +import static org.springframework.web.reactive.HandlerMapping.*;, +import static org.springframework.web.reactive.result.method.RequestMappingInfo.*;, +, +		// SPR-11897, +		exchange = MockServerWebExchange.from(get("/a=42;b=c"));, +		handleMatch(exchange, "/{foo}");, +, +		matrixVariables = getMatrixVariables(exchange, "foo");, +		uriVariables = getUriTemplateVariables(exchange);, +, +		assertNotNull(matrixVariables);, +		assertEquals(1, matrixVariables.size());, +		assertEquals("c", matrixVariables.getFirst("b"));, +		assertEquals("a=42", uriVariables.get("foo"));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java, +, +			if (semicolonIndex != -1 && semicolonIndex != 0) {, +				uriVariables.put(uriVarKey, uriVarValue.substring(0, semicolonIndex));, +			}, +, +			String matrixVariables;, +			if (semicolonIndex == -1 || semicolonIndex == 0 || equalsIndex < semicolonIndex) {, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/RequestMappingInfoHandlerMappingTests.java, +import org.springframework.web.reactive.result.method.RequestMappingInfo.*;, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +import static org.springframework.mock.http.server.reactive.test.MockServerHttpRequest.*;, +import static org.springframework.web.bind.annotation.RequestMethod.*;, +import static org.springframework.web.method.MvcAnnotationPredicates.*;, +import static org.springframework.web.method.ResolvableMethod.*;, +import static org.springframework.web.reactive.HandlerMapping.*;, +import static org.springframework.web.reactive.result.method.RequestMappingInfo.*;, +, +		// SPR-11897, +		exchange = MockServerWebExchange.from(get("/a=42;b=c"));, +		handleMatch(exchange, "/{foo}");, +, +		matrixVariables = getMatrixVariables(exchange, "foo");, +		uriVariables = getUriTemplateVariables(exchange);, +, +		assertNotNull(matrixVariables);, +		assertEquals(1, matrixVariables.size());, +		assertEquals("c", matrixVariables.getFirst("b"));, +		assertEquals("a=42", uriVariables.get("foo"));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java, +, +			if (semicolonIndex != -1 && semicolonIndex != 0) {, +				uriVariables.put(uriVarKey, uriVarValue.substring(0, semicolonIndex));, +			}, +, +			String matrixVariables;, +			if (semicolonIndex == -1 || semicolonIndex == 0 || equalsIndex < semicolonIndex) {, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMappingTests.java, +		// URI var parsed into path variable + matrix params.., +		// URI var with regex for path variable, and URI var for matrix params.., +		// URI var with regex for path variable, and (empty) URI var for matrix params.., +, +		// SPR-11897, +		request = new MockHttpServletRequest();, +		handleMatch(request, "/{foo}", "/a=42;b=c");, +, +		matrixVariables = getMatrixVariables(request, "foo");, +		uriVariables = getUriTemplateVariables(request);, +, +		assertNotNull(matrixVariables);, +		assertEquals("42", matrixVariables.getFirst("a"));, +		assertEquals("c", matrixVariables.getFirst("b"));, +		assertEquals("a=42", uriVariables.get("foo"));]