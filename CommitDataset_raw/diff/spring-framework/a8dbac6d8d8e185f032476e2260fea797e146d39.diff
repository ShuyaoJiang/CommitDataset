[+++ b/org.springframework.core/src/test/java/org/springframework/core/convert/TypeDescriptorTests.java, +import java.util.Collection;, + * @author Keith Donald, +	public void parameterPrimitive() throws Exception {, +		TypeDescriptor desc = new TypeDescriptor(new MethodParameter(getClass().getMethod("testParameterPrimitive", int.class), 0));, +		assertEquals(int.class, desc.getType());, +		assertEquals(Integer.class, desc.getObjectType());, +		assertEquals("int", desc.getName());, +		assertEquals("int", desc.toString());, +		assertTrue(desc.isPrimitive());, +		assertEquals(0, desc.getAnnotations().length);, +		assertTrue(!desc.isCollection());, +		assertNull(desc.getElementType());, +		assertEquals(TypeDescriptor.NULL, desc.getElementTypeDescriptor());, +		assertTrue(!desc.isMap());, +		assertNull(desc.getMapKeyType());, +		assertEquals(TypeDescriptor.NULL, desc.getMapKeyTypeDescriptor());, +		assertNull(desc.getMapValueType());, +		assertEquals(TypeDescriptor.NULL, desc.getMapValueTypeDescriptor());, +	}, +	, +	public void testParameterPrimitive(int primitive) {, +		, +	}, +	, +	@Test, +	public void parameterScalar() throws Exception {, +		TypeDescriptor desc = new TypeDescriptor(new MethodParameter(getClass().getMethod("testParameterScalar", String.class), 0));, +		assertEquals(String.class, desc.getType());, +		assertEquals(String.class, desc.getObjectType());, +		assertEquals("java.lang.String", desc.getName());, +		assertEquals("java.lang.String", desc.toString());, +		assertTrue(!desc.isPrimitive());, +		assertEquals(0, desc.getAnnotations().length);, +		assertFalse(desc.isCollection());, +		assertFalse(desc.isArray());, +		assertNull(desc.getElementType());, +		assertEquals(TypeDescriptor.NULL, desc.getElementTypeDescriptor());, +		assertFalse(desc.isMap());, +		assertNull(desc.getMapKeyType());, +		assertEquals(TypeDescriptor.NULL, desc.getMapKeyTypeDescriptor());, +		assertNull(desc.getMapValueType());, +		assertEquals(TypeDescriptor.NULL, desc.getMapValueTypeDescriptor());, +	}, +	, +	public void testParameterScalar(String value) {, +		, +	}, +, +	@Test, +	public void parameterList() throws Exception {, +		MethodParameter methodParameter = new MethodParameter(getClass().getMethod("testParameterList", List.class), 0);, +		TypeDescriptor desc = new TypeDescriptor(methodParameter);, +		assertEquals(List.class, desc.getType());, +		assertEquals(List.class, desc.getObjectType());, +		assertEquals("java.util.List", desc.getName());, +		assertEquals("java.util.List<java.util.List<java.util.Map<java.lang.Integer, java.lang.Enum>>>", desc.toString());, +		assertTrue(!desc.isPrimitive());, +		assertEquals(0, desc.getAnnotations().length);, +		assertTrue(desc.isCollection());, +		assertFalse(desc.isArray());, +		assertEquals(List.class, desc.getElementType());, +		assertEquals(TypeDescriptor.nested(methodParameter, 1), desc.getElementTypeDescriptor());, +		assertEquals(TypeDescriptor.nested(methodParameter, 2), desc.getElementTypeDescriptor().getElementTypeDescriptor());, +		assertEquals(TypeDescriptor.nested(methodParameter, 3), desc.getElementTypeDescriptor().getElementTypeDescriptor().getMapValueTypeDescriptor());, +		assertEquals(Integer.class, desc.getElementTypeDescriptor().getElementTypeDescriptor().getMapKeyTypeDescriptor().getType());, +		assertEquals(Enum.class, desc.getElementTypeDescriptor().getElementTypeDescriptor().getMapValueTypeDescriptor().getType());, +		assertFalse(desc.isMap());, +		assertNull(desc.getMapKeyType());, +		assertEquals(TypeDescriptor.NULL, desc.getMapKeyTypeDescriptor());, +		assertNull(desc.getMapValueType());, +		assertEquals(TypeDescriptor.NULL, desc.getMapValueTypeDescriptor());, +	}, +, +	public void testParameterList(List<List<Map<Integer, Enum<?>>>> list) {, +		, +	}, +, +	@Test, +	public void parameterListNoParamTypes() throws Exception {, +		MethodParameter methodParameter = new MethodParameter(getClass().getMethod("testParameterListNoParamTypes", List.class), 0);, +		TypeDescriptor desc = new TypeDescriptor(methodParameter);, +		assertEquals(List.class, desc.getType());, +		assertEquals(List.class, desc.getObjectType());, +		assertEquals("java.util.List", desc.getName());, +		assertEquals("java.util.List<java.lang.Object>", desc.toString());, +		assertTrue(!desc.isPrimitive());, +		assertEquals(0, desc.getAnnotations().length);, +		assertTrue(desc.isCollection());, +		assertFalse(desc.isArray());		, +		assertEquals(Object.class, desc.getElementType());, +		assertEquals(TypeDescriptor.valueOf(Object.class), desc.getElementTypeDescriptor());, +		assertFalse(desc.isMap());, +		assertNull(desc.getMapKeyType());, +		assertEquals(TypeDescriptor.NULL, desc.getMapKeyTypeDescriptor());, +		assertNull(desc.getMapValueType());, +		assertEquals(TypeDescriptor.NULL, desc.getMapValueTypeDescriptor());, +	}, +, +	public void testParameterListNoParamTypes(List list) {]