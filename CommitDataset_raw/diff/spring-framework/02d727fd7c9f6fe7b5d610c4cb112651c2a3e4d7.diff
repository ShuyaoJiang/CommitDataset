[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, + * Copyright 2002-2017 the original author or authors., +	@Override, +	public void setParameter(String name, String... values) {, +	 * Set all provided parameters <strong>replacing</strong> any existing, +	public void setParameters(Map<String, ?> params) {, +		for (String key : params.keySet()) {, +				setParameter(key, (String) value);, +				setParameter(key, (String[]) value);, +	public void addParameter(String name, String... values) {, +	public void addParameters(Map<String, ?> params) {, +		for (String key : params.keySet()) {, +				this.addParameter(key, (String) value);, +				this.addParameter(key, (String[]) value);, +		if (CONTENT_TYPE_HEADER.equalsIgnoreCase(name) && !this.headers.containsKey(CONTENT_TYPE_HEADER)) {, +			setContentType(value.toString());, +		else {, +	}, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, + * Copyright 2002-2017 the original author or authors., +	@Override, +	public void setParameter(String name, String... values) {, +	 * Set all provided parameters <strong>replacing</strong> any existing, +	public void setParameters(Map<String, ?> params) {, +		for (String key : params.keySet()) {, +				setParameter(key, (String) value);, +				setParameter(key, (String[]) value);, +	public void addParameter(String name, String... values) {, +	public void addParameters(Map<String, ?> params) {, +		for (String key : params.keySet()) {, +				this.addParameter(key, (String) value);, +				this.addParameter(key, (String[]) value);, +		if (CONTENT_TYPE_HEADER.equalsIgnoreCase(name) && !this.headers.containsKey(CONTENT_TYPE_HEADER)) {, +			setContentType(value.toString());, +		else {, +	}, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java, + * Copyright 2002-2017 the original author or authors., +	private String contextPath = "";, +	private String servletPath = "";, +	private String pathInfo = "";, +	private String characterEncoding;, +, +	private byte[] content;, +, +	private String contentType;, +, +	private final MultiValueMap<String, Object> headers = new LinkedMultiValueMap<>();, +, +	private final MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();, +, +	private final List<Cookie> cookies = new ArrayList<>();, +, +	private final List<Locale> locales = new ArrayList<>();, +, +	private final Map<String, Object> requestAttributes = new LinkedHashMap<>();, +, +	 * Specify the portion of the requestURI that represents the context path., +	 * The context path, if specified, must match to the start of the request URI., +	 * <p>In most cases, tests can be written by omitting the context path from, +	 * the requestURI. This is because most applications don't actually depend, +	 * on the name under which they're deployed. If specified here, the context, +	 * path must start with a "/" and must not end with a "/"., +	 * @see javax.servlet.http.HttpServletRequest#getContextPath(), +	public MockHttpServletRequestBuilder contextPath(String contextPath) {, +		if (StringUtils.hasText(contextPath)) {, +			Assert.isTrue(contextPath.startsWith("/"), "Context path must start with a '/'");, +			Assert.isTrue(!contextPath.endsWith("/"), "Context path must not end with a '/'");, +		}, +		this.contextPath = (contextPath != null ? contextPath : "");, +	 * Specify the portion of the requestURI that represents the path to which, +	 * the Servlet is mapped. This is typically a portion of the requestURI, +	 * after the context path., +	 * <p>In most cases, tests can be written by omitting the servlet path from, +	 * the requestURI. This is because most applications don't actually depend, +	 * on the prefix to which a servlet is mapped. For example if a Servlet is, +	 * mapped to {@code "/main/*"}, tests can be written with the requestURI, +	 * {@code "/accounts/1"} as opposed to {@code "/main/accounts/1"}., +	 * If specified here, the servletPath must start with a "/" and must not, +	 * end with a "/"., +	 * @see javax.servlet.http.HttpServletRequest#getServletPath(), +	public MockHttpServletRequestBuilder servletPath(String servletPath) {, +		if (StringUtils.hasText(servletPath)) {, +			Assert.isTrue(servletPath.startsWith("/"), "Servlet path must start with a '/'");, +			Assert.isTrue(!servletPath.endsWith("/"), "Servlet path must not end with a '/'");, +		this.servletPath = (servletPath != null ? servletPath : "");, +	 * Specify the portion of the requestURI that represents the pathInfo., +	 * <p>If left unspecified (recommended), the pathInfo will be automatically derived, +	 * by removing the contextPath and the servletPath from the requestURI and using any, +	 * remaining part. If specified here, the pathInfo must start with a "/"., +	 * <p>If specified, the pathInfo will be used as-is., +	 * @see javax.servlet.http.HttpServletRequest#getPathInfo(), +	public MockHttpServletRequestBuilder pathInfo(String pathInfo) {, +		if (StringUtils.hasText(pathInfo)) {, +			Assert.isTrue(pathInfo.startsWith("/"), "Path info must start with a '/'");, +		this.pathInfo = pathInfo;, +	 * Set the secure property of the {@link ServletRequest} indicating use of a, +	 * secure channel, such as HTTPS., +	 * @param secure whether the request is using a secure channel, +	public MockHttpServletRequestBuilder secure(boolean secure){]