[+++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java, +		return resolveMethodByExceptionType(exception.getClass());, +	}, +, +	/**, +	 * Find a method to handle the given exception type. This can be useful if, +	 * an Exception instance is not available (example for tools)., +	 * @param exceptionType the exception type, +	 * @return a method to handle the exception or {@code null}, +	 */, +	public Method resolveMethodByExceptionType(Class<? extends Exception> exceptionType) {, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java, +		return resolveMethodByExceptionType(exception.getClass());, +	}, +, +	/**, +	 * Find a method to handle the given exception type. This can be useful if, +	 * an Exception instance is not available (example for tools)., +	 * @param exceptionType the exception type, +	 * @return a method to handle the exception or {@code null}, +	 */, +	public Method resolveMethodByExceptionType(Class<? extends Exception> exceptionType) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java, +	/**, +	 * Return the configured {@link ContentNegotiationManager}., +	 */, +	public ContentNegotiationManager getContentNegotiationManager() {, +		return this.contentNegotiationManager;, +	}, +, +	/**, +	 * Return an unmodifiable Map with the {@link ControllerAdvice @ControllerAdvice}, +	 * beans discovered in the ApplicationContext. The returned map will be empty if, +	 * the method is invoked before the bean has been initialized via, +	 * {@link #afterPropertiesSet()}., +	 */, +	public Map<ControllerAdviceBean, ExceptionHandlerMethodResolver> getExceptionHandlerAdviceCache() {, +		return Collections.unmodifiableMap(this.exceptionHandlerAdviceCache);, +	}, +, +				ExceptionHandlerMethodResolver resolver = entry.getValue();, +				Method method = resolver.resolveMethod(exception);]