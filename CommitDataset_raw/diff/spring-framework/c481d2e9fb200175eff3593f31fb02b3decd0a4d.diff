[+++ b/org.springframework.integration-tests/src/test/java/org/springframework/core/env/EnvironmentIntegrationTests.java, +import org.springframework.web.portlet.context.StandardPortletEnvironment;, +		assertHasStandardPortletEnvironment(ctx);, +		// ensure a default servlet environment exists, +	private void assertHasStandardPortletEnvironment(WebApplicationContext ctx) {, +		// ensure a default portlet environment exists, +		assertThat(defaultEnv, instanceOf(StandardPortletEnvironment.class));, +++ b/org.springframework.integration-tests/src/test/java/org/springframework/core/env/EnvironmentIntegrationTests.java, +import org.springframework.web.portlet.context.StandardPortletEnvironment;, +		assertHasStandardPortletEnvironment(ctx);, +		// ensure a default servlet environment exists, +	private void assertHasStandardPortletEnvironment(WebApplicationContext ctx) {, +		// ensure a default portlet environment exists, +		assertThat(defaultEnv, instanceOf(StandardPortletEnvironment.class));, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/GenericPortletBean.java, +import org.springframework.web.portlet.context.StandardPortletEnvironment;, +	private Environment environment = new StandardPortletEnvironment();, +	 * <p>Any environment set here overrides the {@link StandardPortletEnvironment}, +++ b/org.springframework.integration-tests/src/test/java/org/springframework/core/env/EnvironmentIntegrationTests.java, +import org.springframework.web.portlet.context.StandardPortletEnvironment;, +		assertHasStandardPortletEnvironment(ctx);, +		// ensure a default servlet environment exists, +	private void assertHasStandardPortletEnvironment(WebApplicationContext ctx) {, +		// ensure a default portlet environment exists, +		assertThat(defaultEnv, instanceOf(StandardPortletEnvironment.class));, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/GenericPortletBean.java, +import org.springframework.web.portlet.context.StandardPortletEnvironment;, +	private Environment environment = new StandardPortletEnvironment();, +	 * <p>Any environment set here overrides the {@link StandardPortletEnvironment}, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/context/AbstractRefreshablePortletApplicationContext.java, +	 * Create and return a new {@link StandardPortletEnvironment}., +		return new StandardPortletEnvironment();, +++ b/org.springframework.integration-tests/src/test/java/org/springframework/core/env/EnvironmentIntegrationTests.java, +import org.springframework.web.portlet.context.StandardPortletEnvironment;, +		assertHasStandardPortletEnvironment(ctx);, +		// ensure a default servlet environment exists, +	private void assertHasStandardPortletEnvironment(WebApplicationContext ctx) {, +		// ensure a default portlet environment exists, +		assertThat(defaultEnv, instanceOf(StandardPortletEnvironment.class));, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/GenericPortletBean.java, +import org.springframework.web.portlet.context.StandardPortletEnvironment;, +	private Environment environment = new StandardPortletEnvironment();, +	 * <p>Any environment set here overrides the {@link StandardPortletEnvironment}, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/context/AbstractRefreshablePortletApplicationContext.java, +	 * Create and return a new {@link StandardPortletEnvironment}., +		return new StandardPortletEnvironment();, +++ /dev/null, +++ b/org.springframework.integration-tests/src/test/java/org/springframework/core/env/EnvironmentIntegrationTests.java, +import org.springframework.web.portlet.context.StandardPortletEnvironment;, +		assertHasStandardPortletEnvironment(ctx);, +		// ensure a default servlet environment exists, +	private void assertHasStandardPortletEnvironment(WebApplicationContext ctx) {, +		// ensure a default portlet environment exists, +		assertThat(defaultEnv, instanceOf(StandardPortletEnvironment.class));, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/GenericPortletBean.java, +import org.springframework.web.portlet.context.StandardPortletEnvironment;, +	private Environment environment = new StandardPortletEnvironment();, +	 * <p>Any environment set here overrides the {@link StandardPortletEnvironment}, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/context/AbstractRefreshablePortletApplicationContext.java, +	 * Create and return a new {@link StandardPortletEnvironment}., +		return new StandardPortletEnvironment();, +++ /dev/null, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/context/PortletApplicationContextUtils.java, +		if(portletContext != null && propertySources.contains(StandardPortletEnvironment.PORTLET_CONTEXT_PROPERTY_SOURCE_NAME)) {, +			propertySources.replace(StandardPortletEnvironment.PORTLET_CONTEXT_PROPERTY_SOURCE_NAME,, +					new PortletContextPropertySource(StandardPortletEnvironment.PORTLET_CONTEXT_PROPERTY_SOURCE_NAME, portletContext));, +		if(portletConfig != null && propertySources.contains(StandardPortletEnvironment.PORTLET_CONFIG_PROPERTY_SOURCE_NAME)) {, +			propertySources.replace(StandardPortletEnvironment.PORTLET_CONFIG_PROPERTY_SOURCE_NAME,, +					new PortletConfigPropertySource(StandardPortletEnvironment.PORTLET_CONFIG_PROPERTY_SOURCE_NAME, portletConfig));, +++ b/org.springframework.integration-tests/src/test/java/org/springframework/core/env/EnvironmentIntegrationTests.java, +import org.springframework.web.portlet.context.StandardPortletEnvironment;, +		assertHasStandardPortletEnvironment(ctx);, +		// ensure a default servlet environment exists, +	private void assertHasStandardPortletEnvironment(WebApplicationContext ctx) {, +		// ensure a default portlet environment exists, +		assertThat(defaultEnv, instanceOf(StandardPortletEnvironment.class));, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/GenericPortletBean.java, +import org.springframework.web.portlet.context.StandardPortletEnvironment;, +	private Environment environment = new StandardPortletEnvironment();, +	 * <p>Any environment set here overrides the {@link StandardPortletEnvironment}, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/context/AbstractRefreshablePortletApplicationContext.java, +	 * Create and return a new {@link StandardPortletEnvironment}., +		return new StandardPortletEnvironment();, +++ /dev/null, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/context/PortletApplicationContextUtils.java, +		if(portletContext != null && propertySources.contains(StandardPortletEnvironment.PORTLET_CONTEXT_PROPERTY_SOURCE_NAME)) {, +			propertySources.replace(StandardPortletEnvironment.PORTLET_CONTEXT_PROPERTY_SOURCE_NAME,, +					new PortletContextPropertySource(StandardPortletEnvironment.PORTLET_CONTEXT_PROPERTY_SOURCE_NAME, portletContext));, +		if(portletConfig != null && propertySources.contains(StandardPortletEnvironment.PORTLET_CONFIG_PROPERTY_SOURCE_NAME)) {, +			propertySources.replace(StandardPortletEnvironment.PORTLET_CONFIG_PROPERTY_SOURCE_NAME,, +					new PortletConfigPropertySource(StandardPortletEnvironment.PORTLET_CONFIG_PROPERTY_SOURCE_NAME, portletConfig));, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/context/StandardPortletEnvironment.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0]