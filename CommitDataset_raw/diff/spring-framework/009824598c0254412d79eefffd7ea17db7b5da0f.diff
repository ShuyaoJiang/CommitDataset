[+++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, +		// Initialize the Scheduler instance..., +		this.scheduler = prepareScheduler(prepareSchedulerFactory());, +		catch (Exception ex) {, +			try {, +				this.scheduler.shutdown(true);, +			}, +			catch (Exception ex2) {, +				logger.debug("Scheduler shutdown exception after registration failure", ex2);, +			}, +			throw ex;, +		}, +	}, +	private Scheduler prepareScheduler(SchedulerFactory schedulerFactory) throws SchedulerException {, +		if (this.resourceLoader != null) {, +			// Make given ResourceLoader available for SchedulerFactory configuration., +			configTimeResourceLoaderHolder.set(this.resourceLoader);, +		}, +		if (this.taskExecutor != null) {, +			// Make given TaskExecutor available for SchedulerFactory configuration., +			configTimeTaskExecutorHolder.set(this.taskExecutor);, +		}, +		if (this.dataSource != null) {, +			// Make given DataSource available for SchedulerFactory configuration., +			configTimeDataSourceHolder.set(this.dataSource);, +		}, +		if (this.nonTransactionalDataSource != null) {, +			// Make given non-transactional DataSource available for SchedulerFactory configuration., +			configTimeNonTransactionalDataSourceHolder.set(this.nonTransactionalDataSource);, +		}, +, +		// Get Scheduler instance from SchedulerFactory., +		try {, +			Scheduler scheduler = createScheduler(schedulerFactory, this.schedulerName);, +			populateSchedulerContext(scheduler);, +, +			if (!this.jobFactorySet && !(scheduler instanceof RemoteScheduler)) {, +				// Use AdaptableJobFactory as default for a local Scheduler, unless when, +				// explicitly given a null value through the "jobFactory" bean property., +				this.jobFactory = new AdaptableJobFactory();, +			}, +			if (this.jobFactory != null) {, +				if (this.jobFactory instanceof SchedulerContextAware) {, +					((SchedulerContextAware) this.jobFactory).setSchedulerContext(scheduler.getContext());, +				}, +				scheduler.setJobFactory(this.jobFactory);, +			}, +			return scheduler;, +		}, +, +		finally {, +			if (this.resourceLoader != null) {, +				configTimeResourceLoaderHolder.remove();, +			}, +			if (this.taskExecutor != null) {, +				configTimeTaskExecutorHolder.remove();, +			}, +			if (this.dataSource != null) {, +				configTimeDataSourceHolder.remove();, +			}, +			if (this.nonTransactionalDataSource != null) {, +				configTimeNonTransactionalDataSourceHolder.remove();, +			}, +		}, +	}, +, +	private void populateSchedulerContext(Scheduler scheduler) throws SchedulerException {, +			scheduler.getContext().putAll(this.schedulerContextMap);, +			scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext);]