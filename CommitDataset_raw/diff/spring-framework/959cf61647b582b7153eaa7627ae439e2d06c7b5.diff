[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlEncodingFilter.java, +				int suffixIndex = getEndPathIndex(url);, +		private int getEndPathIndex(String lookupPath) {, +			int suffixIndex = lookupPath.length();, +			int queryIndex = lookupPath.indexOf('?');, +			if (queryIndex > 0) {, +				suffixIndex = queryIndex;, +			}, +			int hashIndex = lookupPath.indexOf('#');, +			if (hashIndex > 0) {, +				suffixIndex = Math.min(suffixIndex, hashIndex);, +			}, +			return suffixIndex;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlEncodingFilter.java, +				int suffixIndex = getEndPathIndex(url);, +		private int getEndPathIndex(String lookupPath) {, +			int suffixIndex = lookupPath.length();, +			int queryIndex = lookupPath.indexOf('?');, +			if (queryIndex > 0) {, +				suffixIndex = queryIndex;, +			}, +			int hashIndex = lookupPath.indexOf('#');, +			if (hashIndex > 0) {, +				suffixIndex = Math.min(suffixIndex, hashIndex);, +			}, +			return suffixIndex;, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/ResourceUrlEncodingFilterTests.java, +	@Test // SPR-17535, +	public void encodeURLWitFragment() throws Exception {, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/foo");, +		request.setContextPath("/");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +, +		this.filter.doFilter(request, response, (req, res) -> {, +			req.setAttribute(ResourceUrlProviderExposingInterceptor.RESOURCE_URL_PROVIDER_ATTR, this.urlProvider);, +			String result = ((HttpServletResponse) res).encodeURL("/resources/bar.css#something");, +			assertEquals("/resources/bar-11e16cf79faee7ac698c805cf28248d2.css#something", result);, +		});, +	}, +, +	@Test // SPR-13374 and SPR-17535 combined, +	public void encodeURLWitFragmentAndRequestParams() throws Exception {, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/foo");, +		request.setContextPath("/");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +, +		this.filter.doFilter(request, response, (req, res) -> {, +			req.setAttribute(ResourceUrlProviderExposingInterceptor.RESOURCE_URL_PROVIDER_ATTR, this.urlProvider);, +			String result = ((HttpServletResponse) res).encodeURL("/resources/bar.css?foo=bar&url=http://example.org#something");, +			assertEquals("/resources/bar-11e16cf79faee7ac698c805cf28248d2.css?foo=bar&url=http://example.org#something", result);, +		});, +	}, +]