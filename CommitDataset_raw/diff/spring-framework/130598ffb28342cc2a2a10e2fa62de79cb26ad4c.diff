[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeActions.java, +	 * Assertions on the body of the response decoded as one or more response, +	 * entities of the given type., +	 * @return options for asserting response entities, +	 */, +	public <T> ResponseEntityAssertions<T> assertEntity(Class<T> entityType) {, +		return new ResponseEntityAssertions<T>(this, ResolvableType.forClass(entityType));, +	}, +, +	/**, +	 * Assertions on the body of the response., +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeActions.java, +	 * Assertions on the body of the response decoded as one or more response, +	 * entities of the given type., +	 * @return options for asserting response entities, +	 */, +	public <T> ResponseEntityAssertions<T> assertEntity(Class<T> entityType) {, +		return new ResponseEntityAssertions<T>(this, ResolvableType.forClass(entityType));, +	}, +, +	/**, +	 * Assertions on the body of the response., +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ObjectAssertions.java, +	 * Custom assertions on the Object value with a {@link Consumer}., +	 * <p>Consider using statically imported methods to improve readability, +	public ExchangeActions consume(Consumer<V> consumer) {, +		consumer.accept(this.getValue());, +		return this.exchangeActions;, +, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeActions.java, +	 * Assertions on the body of the response decoded as one or more response, +	 * entities of the given type., +	 * @return options for asserting response entities, +	 */, +	public <T> ResponseEntityAssertions<T> assertEntity(Class<T> entityType) {, +		return new ResponseEntityAssertions<T>(this, ResolvableType.forClass(entityType));, +	}, +, +	/**, +	 * Assertions on the body of the response., +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ObjectAssertions.java, +	 * Custom assertions on the Object value with a {@link Consumer}., +	 * <p>Consider using statically imported methods to improve readability, +	public ExchangeActions consume(Consumer<V> consumer) {, +		consumer.accept(this.getValue());, +		return this.exchangeActions;, +, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ResponseBodyAssertions.java, + * Assertions on the body of the response., +	 * Assert the response decoded as a Map of String key-value pairs., +	public MapAssertions<String, String> asMap() {, +		ResolvableType type = ResolvableType.forClassWithGenerics(Map.class, String.class, String.class);, +		Mono<Map<String, String>> mono = getResponse().body(toMono(type));, +		Map<String, String> map = mono.block(getTimeout());, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeActions.java, +	 * Assertions on the body of the response decoded as one or more response, +	 * entities of the given type., +	 * @return options for asserting response entities, +	 */, +	public <T> ResponseEntityAssertions<T> assertEntity(Class<T> entityType) {, +		return new ResponseEntityAssertions<T>(this, ResolvableType.forClass(entityType));, +	}, +, +	/**, +	 * Assertions on the body of the response., +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ObjectAssertions.java, +	 * Custom assertions on the Object value with a {@link Consumer}., +	 * <p>Consider using statically imported methods to improve readability, +	public ExchangeActions consume(Consumer<V> consumer) {, +		consumer.accept(this.getValue());, +		return this.exchangeActions;, +, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ResponseBodyAssertions.java, + * Assertions on the body of the response., +	 * Assert the response decoded as a Map of String key-value pairs., +	public MapAssertions<String, String> asMap() {, +		ResolvableType type = ResolvableType.forClassWithGenerics(Map.class, String.class, String.class);, +		Mono<Map<String, String>> mono = getResponse().body(toMono(type));, +		Map<String, String> map = mono.block(getTimeout());, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ResponseEntityAssertions.java, +import java.util.Map;, + * @since 5.0, +	 * Assert the response decoded as a Map of entities with String keys., +	 */, +	public MapAssertions<String, T> map() {, +		ResolvableType keyType = ResolvableType.forClass(String.class);, +		ResolvableType type = ResolvableType.forClassWithGenerics(Map.class, keyType, this.entityType);, +		Mono<Map<String, T>> mono = getResponse().body(toMono(type));, +		Map<String, T> map = mono.block(getTimeout());, +		return new MapAssertions<>(getExchangeActions(), map, "Response entity map");, +	}, +, +	/**, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeActions.java, +	 * Assertions on the body of the response decoded as one or more response, +	 * entities of the given type., +	 * @return options for asserting response entities, +	 */, +	public <T> ResponseEntityAssertions<T> assertEntity(Class<T> entityType) {, +		return new ResponseEntityAssertions<T>(this, ResolvableType.forClass(entityType));]