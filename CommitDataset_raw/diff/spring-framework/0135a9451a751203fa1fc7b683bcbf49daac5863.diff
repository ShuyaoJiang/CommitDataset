[+++ b/org.springframework.web/src/main/java/org/springframework/http/MediaType.java, +import java.util.BitSet;, +	/**, +	 * Public constant that includes all media ranges (i.e. <code>&#42;/&#42;</code>)., +	 */, +	public static final MediaType ALL;, +, +	private static final BitSet TOKEN;, +, +, +	static {, +		// variable names refer to RFC 2616, section 2.2, +		BitSet ctl = new BitSet(128);, +		for (int i=0; i <= 31; i++) {, +			ctl.set(i);, +		}, +		ctl.set(127);, +, +		BitSet separators = new BitSet(128);, +		separators.set('(');, +		separators.set(')');, +		separators.set('<');, +		separators.set('>');, +		separators.set('@');, +		separators.set(',');, +		separators.set(';');, +		separators.set(':');, +		separators.set('\\');, +		separators.set('\"');, +		separators.set('/');, +		separators.set('[');, +		separators.set(']');, +		separators.set('?');, +		separators.set('=');, +		separators.set('{');, +		separators.set('}');, +		separators.set(' ');, +		separators.set('\t');, +, +		TOKEN = new BitSet(128);, +		TOKEN.set(0, 128);, +		TOKEN.andNot(ctl);, +		TOKEN.andNot(separators);, +, +		ALL = new MediaType("*", "*");, +	}, +, +	 * @throws IllegalArgumentException if any of the parameters contain illegal characters, +	 * @throws IllegalArgumentException if any of the parameters contain illegal characters, +	 * @throws IllegalArgumentException if any of the parameters contain illegal characters, +	 * @throws IllegalArgumentException if any of the parameters contain illegal characters, +	 * @throws IllegalArgumentException if any of the parameters contain illegal characters, +		Assert.hasLength(type, "'type' must not be empty");, +		Assert.hasLength(subtype, "'subtype' must not be empty");, +		checkToken(type);, +		checkToken(subtype);, +			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH);, +			for (Map.Entry<String, String> entry : parameters.entrySet()) {, +				String attribute = entry.getKey();, +				String value = entry.getValue();, +				Assert.hasLength(attribute, "pameter attribute must not be empty");, +				Assert.hasLength(value, "pameter value must not be empty");, +				checkToken(attribute);, +				checkTokenOrQuotedString(value);, +				m.put(attribute, value);, +			}, +			this.parameters = Collections.unmodifiableMap(m);, +	/**, +	 * Checks the given token string for illegal characters, as defined in RFC 2616, section 2.2., +	 *, +	 * @throws IllegalArgumentException in case of illegal characters, +	 * @see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>, +	 */, +	private void checkToken(String s) {, +		for (int i=0; i < s.length(); i++ ) {, +			char ch = s.charAt(i);, +			if (!TOKEN.get(ch)) {, +				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + s + "\"");, +			}, +		}, +	}, +, +	private void checkTokenOrQuotedString(String s) {, +		if (!(s.startsWith("\"") && s.endsWith("\""))) {, +			checkToken(s);, +		}, +	}, +, +		if (subIndex == -1) {, +			throw new IllegalArgumentException("\"" + mediaType + "\" does not contain '/'");, +		}, +		if (subIndex == fullType.length() - 1) {, +			throw new IllegalArgumentException("\"" + mediaType + "\" does not contain subtype after '/'");, +		}, +				String parameter = parts[i];, +				int eqIndex = parameter.indexOf('=');, +					String attribute = parameter.substring(0, eqIndex);, +					String value = parameter.substring(eqIndex + 1, parameter.length());, +					parameters.put(attribute, value);, +]