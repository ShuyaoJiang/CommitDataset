[+++ b/spring-web/src/main/java/org/springframework/http/codec/DecoderHttpMessageReader.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.http.HttpMessage;, +import org.springframework.util.Assert;, + * Implementation of {@code HttpMessageReader} delegating to a {@link Decoder}., +	private final List<MediaType> mediaTypes;, +	 * Create an instance wrapping the given {@link Decoder}., +		Assert.notNull(decoder, "Decoder is required");, +		this.mediaTypes = MediaType.asMediaTypes(decoder.getDecodableMimeTypes());, +	}, +, +, +	/**, +	 * Return the {@link Decoder} of this reader., +	 */, +	public Decoder<T> getDecoder() {, +		return this.decoder;, +	}, +, +	@Override, +	public List<MediaType> getReadableMediaTypes() {, +		return this.mediaTypes;, +		return this.decoder.canDecode(elementType, mediaType);, +	public Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage inputMessage,, +			Map<String, Object> hints) {, +	public Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage inputMessage,, +			Map<String, Object> hints) {, +, +	private MediaType getContentType(HttpMessage inputMessage) {, +++ b/spring-web/src/main/java/org/springframework/http/codec/DecoderHttpMessageReader.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.http.HttpMessage;, +import org.springframework.util.Assert;, + * Implementation of {@code HttpMessageReader} delegating to a {@link Decoder}., +	private final List<MediaType> mediaTypes;, +	 * Create an instance wrapping the given {@link Decoder}., +		Assert.notNull(decoder, "Decoder is required");, +		this.mediaTypes = MediaType.asMediaTypes(decoder.getDecodableMimeTypes());, +	}, +, +, +	/**, +	 * Return the {@link Decoder} of this reader., +	 */, +	public Decoder<T> getDecoder() {, +		return this.decoder;, +	}, +, +	@Override, +	public List<MediaType> getReadableMediaTypes() {, +		return this.mediaTypes;, +		return this.decoder.canDecode(elementType, mediaType);, +	public Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage inputMessage,, +			Map<String, Object> hints) {, +	public Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage inputMessage,, +			Map<String, Object> hints) {, +, +	private MediaType getContentType(HttpMessage inputMessage) {, +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.util.Assert;, +, +import static org.springframework.core.codec.AbstractEncoder.FLUSHING_STRATEGY_HINT;, +import static org.springframework.core.codec.AbstractEncoder.FlushingStrategy.AFTER_EACH_ELEMENT;, + * Implementation of {@code HttpMessageWriter} delegating to an {@link Encoder}., +	private final List<MediaType> mediaTypes;, +	 * Create an instance wrapping the given {@link Encoder}., +		Assert.notNull(encoder, "Encoder is required");, +		this.mediaTypes = MediaType.asMediaTypes(encoder.getEncodableMimeTypes());, +	}, +, +, +	/**, +	 * Return the {@code Encoder} of this writer., +	 */, +	public Encoder<T> getEncoder() {, +		return this.encoder;, +	}, +, +	@Override, +	public List<MediaType> getWritableMediaTypes() {, +		return this.mediaTypes;, +		return this.encoder.canEncode(elementType, mediaType);, +		return this.mediaTypes.stream().filter(MediaType::isConcrete).findFirst().orElse(null);]