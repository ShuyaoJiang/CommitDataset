[+++ b/spring-jms/src/main/java/org/springframework/jms/annotation/EnableJms.java, + * These features are abstracted by the {@link org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory, + * MessageHandlerMethodFactory} that is responsible to build the necessary invoker to process, + * the annotated method. By default, {@link org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory, + * DefaultMessageHandlerMethodFactory} is used., + *         registrar.setMessageHandlerMethodFactory(myJmsHandlerMethodFactory);, + *           class="org.springframework.messaging.handler.support.DefaultJmsHandlerMethodFactory">, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/EnableJms.java, + * These features are abstracted by the {@link org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory, + * MessageHandlerMethodFactory} that is responsible to build the necessary invoker to process, + * the annotated method. By default, {@link org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory, + * DefaultMessageHandlerMethodFactory} is used., + *         registrar.setMessageHandlerMethodFactory(myJmsHandlerMethodFactory);, + *           class="org.springframework.messaging.handler.support.DefaultJmsHandlerMethodFactory">, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +import org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory;, +import org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory;, +	private final MessageHandlerMethodFactoryAdapter messageHandlerMethodFactory = new MessageHandlerMethodFactoryAdapter();, +	 * Set the {@link MessageHandlerMethodFactory} to use to configure the message, +	 * <p>By default, {@link DefaultMessageHandlerMethodFactory} is used and it, +	 * {@link DefaultMessageHandlerMethodFactory} Javadoc for more details., +	public void setMessageHandlerMethodFactory(MessageHandlerMethodFactory messageHandlerMethodFactory) {, +		this.messageHandlerMethodFactory.setMessageHandlerMethodFactory(messageHandlerMethodFactory);, +		MessageHandlerMethodFactory handlerMethodFactory = this.registrar.getMessageHandlerMethodFactory();, +			this.messageHandlerMethodFactory.setMessageHandlerMethodFactory(handlerMethodFactory);, +		endpoint.setMessageHandlerMethodFactory(this.messageHandlerMethodFactory);, +	 * A {@link MessageHandlerMethodFactory} adapter that offers a configurable underlying, +	 * @see JmsListenerEndpointRegistrar#setMessageHandlerMethodFactory, +	private class MessageHandlerMethodFactoryAdapter implements MessageHandlerMethodFactory {, +		private MessageHandlerMethodFactory messageHandlerMethodFactory;, +		public void setMessageHandlerMethodFactory(MessageHandlerMethodFactory messageHandlerMethodFactory) {, +			this.messageHandlerMethodFactory = messageHandlerMethodFactory;, +			return getMessageHandlerMethodFactory().createInvocableHandlerMethod(bean, method);, +		private MessageHandlerMethodFactory getMessageHandlerMethodFactory() {, +			if (this.messageHandlerMethodFactory == null) {, +				this.messageHandlerMethodFactory = createDefaultJmsHandlerMethodFactory();, +			return this.messageHandlerMethodFactory;, +		private MessageHandlerMethodFactory createDefaultJmsHandlerMethodFactory() {, +			DefaultMessageHandlerMethodFactory defaultFactory = new DefaultMessageHandlerMethodFactory();, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/EnableJms.java, + * These features are abstracted by the {@link org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory, + * MessageHandlerMethodFactory} that is responsible to build the necessary invoker to process, + * the annotated method. By default, {@link org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory, + * DefaultMessageHandlerMethodFactory} is used., + *         registrar.setMessageHandlerMethodFactory(myJmsHandlerMethodFactory);, + *           class="org.springframework.messaging.handler.support.DefaultJmsHandlerMethodFactory">, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +import org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory;, +import org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory;, +	private final MessageHandlerMethodFactoryAdapter messageHandlerMethodFactory = new MessageHandlerMethodFactoryAdapter();, +	 * Set the {@link MessageHandlerMethodFactory} to use to configure the message, +	 * <p>By default, {@link DefaultMessageHandlerMethodFactory} is used and it, +	 * {@link DefaultMessageHandlerMethodFactory} Javadoc for more details., +	public void setMessageHandlerMethodFactory(MessageHandlerMethodFactory messageHandlerMethodFactory) {, +		this.messageHandlerMethodFactory.setMessageHandlerMethodFactory(messageHandlerMethodFactory);, +		MessageHandlerMethodFactory handlerMethodFactory = this.registrar.getMessageHandlerMethodFactory();, +			this.messageHandlerMethodFactory.setMessageHandlerMethodFactory(handlerMethodFactory);, +		endpoint.setMessageHandlerMethodFactory(this.messageHandlerMethodFactory);, +	 * A {@link MessageHandlerMethodFactory} adapter that offers a configurable underlying, +	 * @see JmsListenerEndpointRegistrar#setMessageHandlerMethodFactory, +	private class MessageHandlerMethodFactoryAdapter implements MessageHandlerMethodFactory {, +		private MessageHandlerMethodFactory messageHandlerMethodFactory;, +		public void setMessageHandlerMethodFactory(MessageHandlerMethodFactory messageHandlerMethodFactory) {, +			this.messageHandlerMethodFactory = messageHandlerMethodFactory;, +			return getMessageHandlerMethodFactory().createInvocableHandlerMethod(bean, method);, +		private MessageHandlerMethodFactory getMessageHandlerMethodFactory() {, +			if (this.messageHandlerMethodFactory == null) {, +				this.messageHandlerMethodFactory = createDefaultJmsHandlerMethodFactory();, +			return this.messageHandlerMethodFactory;, +		private MessageHandlerMethodFactory createDefaultJmsHandlerMethodFactory() {, +			DefaultMessageHandlerMethodFactory defaultFactory = new DefaultMessageHandlerMethodFactory();, +++ b/spring-jms/src/main/java/org/springframework/jms/config/AnnotationDrivenJmsBeanDefinitionParser.java, +				builder.addPropertyReference("messageHandlerMethodFactory", handlerMethodFactory);, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/EnableJms.java, + * These features are abstracted by the {@link org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory, + * MessageHandlerMethodFactory} that is responsible to build the necessary invoker to process, + * the annotated method. By default, {@link org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory, + * DefaultMessageHandlerMethodFactory} is used., + *         registrar.setMessageHandlerMethodFactory(myJmsHandlerMethodFactory);, + *           class="org.springframework.messaging.handler.support.DefaultJmsHandlerMethodFactory">, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +import org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory;, +import org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory;, +	private final MessageHandlerMethodFactoryAdapter messageHandlerMethodFactory = new MessageHandlerMethodFactoryAdapter();, +	 * Set the {@link MessageHandlerMethodFactory} to use to configure the message, +	 * <p>By default, {@link DefaultMessageHandlerMethodFactory} is used and it, +	 * {@link DefaultMessageHandlerMethodFactory} Javadoc for more details., +	public void setMessageHandlerMethodFactory(MessageHandlerMethodFactory messageHandlerMethodFactory) {, +		this.messageHandlerMethodFactory.setMessageHandlerMethodFactory(messageHandlerMethodFactory);, +		MessageHandlerMethodFactory handlerMethodFactory = this.registrar.getMessageHandlerMethodFactory();, +			this.messageHandlerMethodFactory.setMessageHandlerMethodFactory(handlerMethodFactory);, +		endpoint.setMessageHandlerMethodFactory(this.messageHandlerMethodFactory);, +	 * A {@link MessageHandlerMethodFactory} adapter that offers a configurable underlying, +	 * @see JmsListenerEndpointRegistrar#setMessageHandlerMethodFactory, +	private class MessageHandlerMethodFactoryAdapter implements MessageHandlerMethodFactory {, +		private MessageHandlerMethodFactory messageHandlerMethodFactory;, +		public void setMessageHandlerMethodFactory(MessageHandlerMethodFactory messageHandlerMethodFactory) {, +			this.messageHandlerMethodFactory = messageHandlerMethodFactory;, +			return getMessageHandlerMethodFactory().createInvocableHandlerMethod(bean, method);, +		private MessageHandlerMethodFactory getMessageHandlerMethodFactory() {]