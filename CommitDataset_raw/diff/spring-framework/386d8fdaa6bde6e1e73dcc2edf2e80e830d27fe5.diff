[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/json/MappingJacksonJsonView.java, + * @author Rossen Stoyanchev, +	private boolean extractValueFromSingleKeyModel = false;, +, +	/**, +	 * Set whether to serialize models containing a single attribute as a map or whether to , +	 * extract the single value from the model and serialize it directly., +	 * The effect of setting this flag is similar to using , +	 * {@code MappingJacksonHttpMessageConverter} with an {@code @ResponseBody}., +	 * request-handling method.  , +	 * , +	 * <p>Default is {@code false}. , +	 */, +	public void setExtractValueFromSingleKeyModel(boolean extractValueFromSingleKeyModel) {, +		this.extractValueFromSingleKeyModel = extractValueFromSingleKeyModel;, +	}, +, +		return (this.extractValueFromSingleKeyModel && result.size() == 1) ? result.values().iterator().next() : result;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/json/MappingJacksonJsonView.java, + * @author Rossen Stoyanchev, +	private boolean extractValueFromSingleKeyModel = false;, +, +	/**, +	 * Set whether to serialize models containing a single attribute as a map or whether to , +	 * extract the single value from the model and serialize it directly., +	 * The effect of setting this flag is similar to using , +	 * {@code MappingJacksonHttpMessageConverter} with an {@code @ResponseBody}., +	 * request-handling method.  , +	 * , +	 * <p>Default is {@code false}. , +	 */, +	public void setExtractValueFromSingleKeyModel(boolean extractValueFromSingleKeyModel) {, +		this.extractValueFromSingleKeyModel = extractValueFromSingleKeyModel;, +	}, +, +		return (this.extractValueFromSingleKeyModel && result.size() == 1) ? result.values().iterator().next() : result;, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/view/json/MappingJacksonJsonViewTest.java, +	@Test, +	public void filterSingleKeyModel() throws Exception {, +		view.setExtractValueFromSingleKeyModel(true);, +, +		Map<String, Object> model = new HashMap<String, Object>();, +		TestBeanSimple bean = new TestBeanSimple();, +		model.put("foo", bean);, +, +		Object actual = view.filterModel(model);, +		, +		assertSame(bean, actual);, +	}, +	, +	@Test, +	public void filterTwoKeyModel() throws Exception {, +		view.setExtractValueFromSingleKeyModel(true);, +, +		Map<String, Object> model = new HashMap<String, Object>();, +		TestBeanSimple bean1 = new TestBeanSimple();, +		TestBeanSimple bean2 = new TestBeanSimple();, +		model.put("foo1", bean1);, +		model.put("foo2", bean2);, +, +		Object actual = view.filterModel(model);, +, +		assertTrue(actual instanceof Map);, +		assertSame(bean1, ((Map) actual).get("foo1"));, +		assertSame(bean2, ((Map) actual).get("foo2"));, +	}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/json/MappingJacksonJsonView.java, + * @author Rossen Stoyanchev, +	private boolean extractValueFromSingleKeyModel = false;, +, +	/**, +	 * Set whether to serialize models containing a single attribute as a map or whether to , +	 * extract the single value from the model and serialize it directly., +	 * The effect of setting this flag is similar to using , +	 * {@code MappingJacksonHttpMessageConverter} with an {@code @ResponseBody}., +	 * request-handling method.  , +	 * , +	 * <p>Default is {@code false}. , +	 */, +	public void setExtractValueFromSingleKeyModel(boolean extractValueFromSingleKeyModel) {, +		this.extractValueFromSingleKeyModel = extractValueFromSingleKeyModel;, +	}, +, +		return (this.extractValueFromSingleKeyModel && result.size() == 1) ? result.values().iterator().next() : result;, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/view/json/MappingJacksonJsonViewTest.java, +	@Test, +	public void filterSingleKeyModel() throws Exception {, +		view.setExtractValueFromSingleKeyModel(true);, +, +		Map<String, Object> model = new HashMap<String, Object>();, +		TestBeanSimple bean = new TestBeanSimple();, +		model.put("foo", bean);, +, +		Object actual = view.filterModel(model);, +		, +		assertSame(bean, actual);, +	}, +	, +	@Test]