[+++ b/spring-core/src/main/java/org/springframework/util/Assert.java, + *, + * <p>Useful for identifying programmer errors early and clearly at runtime., + * allow {@code null} arguments, {@code Assert} can be used to validate that, + * properties, to check for cases that are usually programmer errors rather, + * than configuration errors. In contrast to configuration initialization, + * code, there is usually no point in falling back to defaults in such methods., + * <p>Mainly for internal use within the framework; consider, + * <a href="http://commons.apache.org/proper/commons-lang/">Apache's Commons Lang</a>, + * for a more comprehensive suite of {@code String} utilities., + * @author Sam Brannen, +	 * @throws IllegalArgumentException if the text is empty, +	 * @throws IllegalArgumentException if the text is empty, +	 * @throws IllegalArgumentException if the text does not contain valid text content, +	 * @throws IllegalArgumentException if the text does not contain valid text content, +	 * @throws IllegalArgumentException if the text contains the substring, +	 * @throws IllegalArgumentException if the text contains the substring, +	 * normally end in ":" or "." so that the generated message looks OK when, +	 * appended to it., +	 * normally end in ":" or "." so that the generated message looks OK when, +	 * appended to it., +			throw new IllegalArgumentException((StringUtils.hasLength(message) ? message + " " : ""), +				+ subType + " is not assignable to " + superType);, +++ b/spring-core/src/main/java/org/springframework/util/Assert.java, + *, + * <p>Useful for identifying programmer errors early and clearly at runtime., + * allow {@code null} arguments, {@code Assert} can be used to validate that, + * properties, to check for cases that are usually programmer errors rather, + * than configuration errors. In contrast to configuration initialization, + * code, there is usually no point in falling back to defaults in such methods., + * <p>Mainly for internal use within the framework; consider, + * <a href="http://commons.apache.org/proper/commons-lang/">Apache's Commons Lang</a>, + * for a more comprehensive suite of {@code String} utilities., + * @author Sam Brannen, +	 * @throws IllegalArgumentException if the text is empty, +	 * @throws IllegalArgumentException if the text is empty, +	 * @throws IllegalArgumentException if the text does not contain valid text content, +	 * @throws IllegalArgumentException if the text does not contain valid text content, +	 * @throws IllegalArgumentException if the text contains the substring, +	 * @throws IllegalArgumentException if the text contains the substring, +	 * normally end in ":" or "." so that the generated message looks OK when, +	 * appended to it., +	 * normally end in ":" or "." so that the generated message looks OK when, +	 * appended to it., +			throw new IllegalArgumentException((StringUtils.hasLength(message) ? message + " " : ""), +				+ subType + " is not assignable to " + superType);, +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, + * <a href="http://commons.apache.org/proper/commons-lang/">Apache's Commons Lang</a>, + * for a more comprehensive suite of {@code String} utilities., + * <p>This class delivers some simple functionality that should really be, + * provided by the core Java {@link String} and {@link StringBuilder}, + * classes. It also provides easy-to-use methods to convert between, + * delimited strings, such as CSV strings, and collections and arrays., +	 * Check whether the given {@code String} is empty., +	 * @param str the {@code CharSequence} to check (may be {@code null}), +	 * @return {@code true} if the {@code CharSequence} is not {@code null} and has length, +	 * Check that the given {@code String} is neither {@code null} nor of length 0., +	 * <p>Note: this method returns {@code true} for a {@code String} that, +	 * purely consists of whitespace., +	 * @param str the {@code String} to check (may be {@code null}), +	 * @return {@code true} if the {@code String} is not {@code null} and has length, +	 * @see #hasText(String), +	 * Check whether the given {@code CharSequence} contains actual <em>text</em>., +	 * <p>More specifically, this method returns {@code true} if the, +	 * {@code CharSequence} is not {@code null}, its length is greater than, +	 * 0, and it contains at least one non-whitespace character., +	 * @param str the {@code CharSequence} to check (may be {@code null}), +	 * @return {@code true} if the {@code CharSequence} is not {@code null},, +	 * Check whether the given {@code String} contains actual <em>text</em>., +	 * <p>More specifically, this method returns {@code true} if the, +	 * {@code String} is not {@code null}, its length is greater than 0,, +	 * and it contains at least one non-whitespace character., +	 * @param str the {@code String} to check (may be {@code null}), +	 * @return {@code true} if the {@code String} is not {@code null}, its, +	 * length is greater than 0, and it does not contain whitespace only, +	 * Check whether the given {@code CharSequence} contains any whitespace characters., +	 * @param str the {@code CharSequence} to check (may be {@code null}), +	 * @return {@code true} if the {@code CharSequence} is not empty and, +	 * Check whether the given {@code String} contains any whitespace characters., +	 * @param str the {@code String} to check (may be {@code null}), +	 * @return {@code true} if the {@code String} is not empty and, +	 * Trim leading and trailing whitespace from the given {@code String}., +	 * @param str the {@code String} to check, +	 * @return the trimmed {@code String}, +	 * Trim <i>all</i> whitespace from the given {@code String}:, +	 * @param str the {@code String} to check, +	 * @return the trimmed {@code String}, +	 * Trim leading whitespace from the given {@code String}., +	 * @param str the {@code String} to check, +	 * @return the trimmed {@code String}, +	 * Trim trailing whitespace from the given {@code String}., +	 * @param str the {@code String} to check, +	 * @return the trimmed {@code String}, +	 * Trim all occurrences of the supplied leading character from the given {@code String}., +	 * @param str the {@code String} to check, +	 * @return the trimmed {@code String}, +	 * Trim all occurrences of the supplied trailing character from the given {@code String}., +	 * @param str the {@code String} to check, +	 * @return the trimmed {@code String}, +	 * Test if the given {@code String} starts with the specified prefix,]