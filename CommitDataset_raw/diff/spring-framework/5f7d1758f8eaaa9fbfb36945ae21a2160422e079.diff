[+++ b/spring-test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +			Class<?> rootDeclaringClass = descriptor.getRootDeclaringClass();, +							+ "type [%s] for test class [%s].", resolverClass.getName(), rootDeclaringClass.getName());, +				profiles = resolver.resolve(rootDeclaringClass);, +				rootDeclaringClass.getSuperclass(), annotationType) : null;, +++ b/spring-test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +			Class<?> rootDeclaringClass = descriptor.getRootDeclaringClass();, +							+ "type [%s] for test class [%s].", resolverClass.getName(), rootDeclaringClass.getName());, +				profiles = resolver.resolve(rootDeclaringClass);, +				rootDeclaringClass.getSuperclass(), annotationType) : null;, +++ b/spring-test/src/test/java/org/springframework/test/context/ContextLoaderUtilsActiveProfilesTests.java, +	/**, +	 * This test verifies that the actual test class, not the composed annotation,, +	 * is passed to the resolver., +	 *, +	 * @since 4.0.3, +	 */, +	@Test, +	public void resolveActiveProfilesWithMetaAnnotationAndTestClassVerifyingResolver() {, +		Class<TestClassVerifyingActiveProfilesResolverTestCase> testClass = TestClassVerifyingActiveProfilesResolverTestCase.class;, +		assertResolvedProfiles(testClass, testClass.getSimpleName());, +	}, +, +	@ActiveProfiles(resolver = TestClassVerifyingActiveProfilesResolver.class), +	@Retention(RetentionPolicy.RUNTIME), +	@Target(ElementType.TYPE), +	private static @interface MetaResolverConfig {, +	}, +, +	@MetaResolverConfig, +	private static class TestClassVerifyingActiveProfilesResolverTestCase {, +	}, +, +	private static class TestClassVerifyingActiveProfilesResolver implements ActiveProfilesResolver {, +, +		@Override, +		public String[] resolve(Class<?> testClass) {, +			return testClass.isAnnotation() ? new String[] { "@" + testClass.getSimpleName() }, +					: new String[] { testClass.getSimpleName() };, +		}, +	}, +]