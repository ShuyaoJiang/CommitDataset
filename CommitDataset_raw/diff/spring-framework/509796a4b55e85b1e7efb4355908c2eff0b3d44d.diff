[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/MockMvcResultMatchers.java, +	 * <p>This method accepts only exact matches., +	public static ResultMatcher forwardedUrl(String expectedUrl) {, +		return result -> assertEquals("Forwarded URL", expectedUrl, result.getResponse().getForwardedUrl());, +	 * <p>This method accepts {@link org.springframework.util.AntPathMatcher}, +	 * patterns., +	 * @param urlPattern an AntPath pattern to match against, +	public static ResultMatcher forwardedUrlPattern(String urlPattern) {, +		return result -> {, +			assertTrue("AntPath pattern", pathMatcher.isPattern(urlPattern));, +	 * <p>This method accepts only exact matches., +	public static ResultMatcher redirectedUrl(String expectedUrl) {, +		return result -> assertEquals("Redirected URL", expectedUrl, result.getResponse().getRedirectedUrl());, +	 * patterns., +	 * @param urlPattern an AntPath pattern to match against, +	 * @see org.springframework.util.AntPathMatcher, +	public static ResultMatcher redirectedUrlPattern(String urlPattern) {, +		return result -> {, +			assertTrue("AntPath pattern", pathMatcher.isPattern(urlPattern));, +			assertTrue("Redirected URL does not match the expected URL pattern",, +					pathMatcher.match(urlPattern, result.getResponse().getRedirectedUrl()));, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/MockMvcResultMatchers.java, +	 * <p>This method accepts only exact matches., +	public static ResultMatcher forwardedUrl(String expectedUrl) {, +		return result -> assertEquals("Forwarded URL", expectedUrl, result.getResponse().getForwardedUrl());, +	 * <p>This method accepts {@link org.springframework.util.AntPathMatcher}, +	 * patterns., +	 * @param urlPattern an AntPath pattern to match against, +	public static ResultMatcher forwardedUrlPattern(String urlPattern) {, +		return result -> {, +			assertTrue("AntPath pattern", pathMatcher.isPattern(urlPattern));, +	 * <p>This method accepts only exact matches., +	public static ResultMatcher redirectedUrl(String expectedUrl) {, +		return result -> assertEquals("Redirected URL", expectedUrl, result.getResponse().getRedirectedUrl());, +	 * patterns., +	 * @param urlPattern an AntPath pattern to match against, +	 * @see org.springframework.util.AntPathMatcher, +	public static ResultMatcher redirectedUrlPattern(String urlPattern) {, +		return result -> {, +			assertTrue("AntPath pattern", pathMatcher.isPattern(urlPattern));, +			assertTrue("Redirected URL does not match the expected URL pattern",, +					pathMatcher.match(urlPattern, result.getResponse().getRedirectedUrl()));, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/result/MockMvcResultMatchersTests.java, + * Copyright 2002-2016 the original author or authors., +, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;, +, + * Unit tests for {@link MockMvcResultMatchers}., + *, + * @author Sam Brannen, +	public void redirect() throws Exception {, +		redirectedUrl("/resource/1").match(getRedirectedUrlStubMvcResult("/resource/1"));, +	public void redirectWithMatchingPattern() throws Exception {, +		redirectedUrlPattern("/resource/*").match(getRedirectedUrlStubMvcResult("/resource/1"));, +	@Test(expected = AssertionError.class), +	public void redirectWithNonMatchingPattern() throws Exception {, +		redirectedUrlPattern("/resource/").match(getRedirectedUrlStubMvcResult("/resource/1"));, +	public void forward() throws Exception {, +		forwardedUrl("/api/resource/1").match(getForwardedUrlStubMvcResult("/api/resource/1"));, +	public void forwardWithQueryString() throws Exception {, +		forwardedUrl("/api/resource/1?arg=value").match(getForwardedUrlStubMvcResult("/api/resource/1?arg=value"));, +	public void forwardWithMatchingPattern() throws Exception {, +		forwardedUrlPattern("/api/**/?").match(getForwardedUrlStubMvcResult("/api/resource/1"));, +	}, +, +	@Test(expected = AssertionError.class), +	public void forwardWithNonMatchingPattern() throws Exception {, +		forwardedUrlPattern("/resource/").match(getForwardedUrlStubMvcResult("/resource/1"));]