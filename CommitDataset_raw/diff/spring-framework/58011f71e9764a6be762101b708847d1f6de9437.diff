[+++ b/spring-web/src/main/java/org/springframework/web/server/adapter/AbstractReactiveWebInitializer.java, + * Copyright 2002-2018 the original author or authors., +		Assert.hasLength(servletName, "getServletName() must not return null or empty");, +		Assert.notNull(applicationContext, "createApplicationContext() must not return null");, +		if (registration == null) {, +			throw new IllegalStateException("Failed to register servlet with name '" + servletName + "'. " +, +					"Check if there is another servlet registered under the same name.");, +		}, +		Assert.notEmpty(configClasses, "No Spring configuration provided through getConfigClasses()");, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/AbstractReactiveWebInitializer.java, + * Copyright 2002-2018 the original author or authors., +		Assert.hasLength(servletName, "getServletName() must not return null or empty");, +		Assert.notNull(applicationContext, "createApplicationContext() must not return null");, +		if (registration == null) {, +			throw new IllegalStateException("Failed to register servlet with name '" + servletName + "'. " +, +					"Check if there is another servlet registered under the same name.");, +		}, +		Assert.notEmpty(configClasses, "No Spring configuration provided through getConfigClasses()");, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/support/AbstractDispatcherHandlerInitializer.java, + * Copyright 2002-2018 the original author or authors., + * @deprecated as of 5.0.2, in favor of, + * {@link org.springframework.web.server.adapter.AbstractReactiveWebInitializer}, +		Assert.hasLength(servletName, "getServletName() must not return null or empty");, +		Assert.notNull(applicationContext, "createApplicationContext() must not return null");, +		Assert.notNull(dispatcherHandler, "createDispatcherHandler(ApplicationContext) must not return null");, +		Assert.notNull(handlerAdapter, "createHandlerAdapter(WebHandler) must not return null");, +		if (registration == null) {, +			throw new IllegalStateException("Failed to register servlet with name '" + servletName + "'. " +, +		}, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/AbstractReactiveWebInitializer.java, + * Copyright 2002-2018 the original author or authors., +		Assert.hasLength(servletName, "getServletName() must not return null or empty");, +		Assert.notNull(applicationContext, "createApplicationContext() must not return null");, +		if (registration == null) {, +			throw new IllegalStateException("Failed to register servlet with name '" + servletName + "'. " +, +					"Check if there is another servlet registered under the same name.");, +		}, +		Assert.notEmpty(configClasses, "No Spring configuration provided through getConfigClasses()");, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/support/AbstractDispatcherHandlerInitializer.java, + * Copyright 2002-2018 the original author or authors., + * @deprecated as of 5.0.2, in favor of, + * {@link org.springframework.web.server.adapter.AbstractReactiveWebInitializer}, +		Assert.hasLength(servletName, "getServletName() must not return null or empty");, +		Assert.notNull(applicationContext, "createApplicationContext() must not return null");, +		Assert.notNull(dispatcherHandler, "createDispatcherHandler(ApplicationContext) must not return null");, +		Assert.notNull(handlerAdapter, "createHandlerAdapter(WebHandler) must not return null");, +		if (registration == null) {, +			throw new IllegalStateException("Failed to register servlet with name '" + servletName + "'. " +, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/support/AbstractServletHttpHandlerAdapterInitializer.java, + * Copyright 2002-2018 the original author or authors., +	 * and use it to create a {@code ServletHttpHandlerAdapter} with the name returned, +	 * by {@link #getServletName()}, and mapping it to the patterns returned from, +	 * {@link #getServletMappings()}., +	 * <p>Further customization can be achieved by overriding, +	 * {@link #customizeRegistration(ServletRegistration.Dynamic)} or, +	 * @param servletContext the context to register the servlet with, +		Assert.hasLength(servletName, "getServletName() must not return null or empty");, +		Assert.notNull(httpHandler, "createHttpHandler() must not return null");, +		Assert.notNull(servlet, "createServlet(HttpHandler) must not return null");, +		if (registration == null) {, +			throw new IllegalStateException("Failed to register servlet with name '" + servletName + "'. " +, +		}, +	 * <p>The default implementation returns a {@code ServletHttpHandlerAdapter}, +	 * Specify the servlet mapping(s) for the {@code ServletHttpHandlerAdapter}:, +, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/AbstractReactiveWebInitializer.java, + * Copyright 2002-2018 the original author or authors., +		Assert.hasLength(servletName, "getServletName() must not return null or empty");, +		Assert.notNull(applicationContext, "createApplicationContext() must not return null");, +		if (registration == null) {, +			throw new IllegalStateException("Failed to register servlet with name '" + servletName + "'. " +, +					"Check if there is another servlet registered under the same name.");, +		}, +		Assert.notEmpty(configClasses, "No Spring configuration provided through getConfigClasses()");, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/support/AbstractDispatcherHandlerInitializer.java, + * Copyright 2002-2018 the original author or authors., + * @deprecated as of 5.0.2, in favor of, + * {@link org.springframework.web.server.adapter.AbstractReactiveWebInitializer}, +		Assert.hasLength(servletName, "getServletName() must not return null or empty");, +		Assert.notNull(applicationContext, "createApplicationContext() must not return null");, +		Assert.notNull(dispatcherHandler, "createDispatcherHandler(ApplicationContext) must not return null");, +		Assert.notNull(handlerAdapter, "createHandlerAdapter(WebHandler) must not return null");, +		if (registration == null) {, +			throw new IllegalStateException("Failed to register servlet with name '" + servletName + "'. " +, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/support/AbstractServletHttpHandlerAdapterInitializer.java, + * Copyright 2002-2018 the original author or authors., +	 * and use it to create a {@code ServletHttpHandlerAdapter} with the name returned, +	 * by {@link #getServletName()}, and mapping it to the patterns returned from, +	 * {@link #getServletMappings()}., +	 * <p>Further customization can be achieved by overriding, +	 * {@link #customizeRegistration(ServletRegistration.Dynamic)} or, +	 * @param servletContext the context to register the servlet with, +		Assert.hasLength(servletName, "getServletName() must not return null or empty");, +		Assert.notNull(httpHandler, "createHttpHandler() must not return null");, +		Assert.notNull(servlet, "createServlet(HttpHandler) must not return null");, +		if (registration == null) {, +			throw new IllegalStateException("Failed to register servlet with name '" + servletName + "'. " +, +		}]