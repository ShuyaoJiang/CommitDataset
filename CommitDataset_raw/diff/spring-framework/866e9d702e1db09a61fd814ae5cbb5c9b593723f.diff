[+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java, +		if (mi == null) {, +		}, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java, +		if (mi == null) {, +		}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java, +			if (args[0] == null) {, +			}, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java, +		if (mi == null) {, +		}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java, +			if (args[0] == null) {, +			}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionWrapper.java, +				if (newValue != null) {, +			}, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java, +		if (mi == null) {, +		}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java, +			if (args[0] == null) {, +			}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionWrapper.java, +				if (newValue != null) {, +			}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, + * Copyright 2002-2018 the original author or authors., +		if (!ObjectUtils.nullSafeEquals(getBeanClassName(), that.getBeanClassName())) {, +			return false;, +		}, +		if (!ObjectUtils.nullSafeEquals(this.scope, that.scope)) {, +			return false;, +		}, +		if (this.abstractFlag != that.abstractFlag) {, +			return false;, +		}, +		if (this.lazyInit != that.lazyInit) {, +			return false;, +		}, +		if (this.autowireMode != that.autowireMode) {, +			return false;, +		}, +		if (this.dependencyCheck != that.dependencyCheck) {, +			return false;, +		}, +		if (!Arrays.equals(this.dependsOn, that.dependsOn)) {, +			return false;, +		}, +		if (this.autowireCandidate != that.autowireCandidate) {, +			return false;, +		}, +		if (!ObjectUtils.nullSafeEquals(this.qualifiers, that.qualifiers)) {, +			return false;, +		}, +		if (this.primary != that.primary) {, +			return false;, +		}, +		if (this.nonPublicAccessAllowed != that.nonPublicAccessAllowed) {, +			return false;, +		}, +		if (this.lenientConstructorResolution != that.lenientConstructorResolution) {, +			return false;, +		}, +		if (!ObjectUtils.nullSafeEquals(this.constructorArgumentValues, that.constructorArgumentValues)) {, +			return false;, +		}, +		if (!ObjectUtils.nullSafeEquals(this.propertyValues, that.propertyValues)) {, +			return false;, +		}, +		if (!ObjectUtils.nullSafeEquals(this.methodOverrides, that.methodOverrides)) {, +			return false;, +		}, +		if (!ObjectUtils.nullSafeEquals(this.factoryBeanName, that.factoryBeanName)) {, +			return false;, +		}, +		if (!ObjectUtils.nullSafeEquals(this.factoryMethodName, that.factoryMethodName)) {, +			return false;, +		}, +		if (!ObjectUtils.nullSafeEquals(this.initMethodName, that.initMethodName)) {, +			return false;, +		}, +		if (this.enforceInitMethod != that.enforceInitMethod) {, +			return false;, +		}, +		if (!ObjectUtils.nullSafeEquals(this.destroyMethodName, that.destroyMethodName)) {, +			return false;, +		}, +		if (this.enforceDestroyMethod != that.enforceDestroyMethod) {, +			return false;, +		}, +		if (this.synthetic != that.synthetic) {, +			return false;, +		}, +		if (this.role != that.role) {, +			return false;, +		}, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/ExposeInvocationInterceptor.java, +		if (mi == null) {]