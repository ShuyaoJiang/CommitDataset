[+++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/EnableSchedulingTests.java, +import org.junit.After;, +import static org.hamcrest.Matchers.*;, +import static org.junit.Assert.*;, +	private AnnotationConfigApplicationContext ctx;, +, +, +	@After, +	public void tearDown() {, +		if (ctx != null) {, +			ctx.close();, +		}, +	}, +, +		ctx = new AnnotationConfigApplicationContext(FixedRateTaskConfig.class);, +	}, +, +	@Test, +	public void withSubclass() throws InterruptedException {, +		Assume.group(TestGroup.PERFORMANCE);, +, +		ctx = new AnnotationConfigApplicationContext(FixedRateTaskConfigSubclass.class);, +, +		Thread.sleep(100);, +		assertThat(ctx.getBean(AtomicInteger.class).get(), greaterThanOrEqualTo(10));, +	}, +, +	@Test, +	public void withExplicitScheduler() throws InterruptedException {, +		Assume.group(TestGroup.PERFORMANCE);, +, +		ctx = new AnnotationConfigApplicationContext(ExplicitSchedulerConfig.class);, +, +		Thread.sleep(100);, +		assertThat(ctx.getBean(AtomicInteger.class).get(), greaterThanOrEqualTo(10));, +		assertThat(ctx.getBean(ExplicitSchedulerConfig.class).threadName, startsWith("explicitScheduler-"));, +	}, +, +	@Test, +	public void withExplicitSchedulerAmbiguity_andSchedulingEnabled() {, +		// No exception raised as of 4.3, aligned with the behavior for @Async methods (SPR-14030), +		ctx = new AnnotationConfigApplicationContext(AmbiguousExplicitSchedulerConfig.class);, +	}, +, +	@Test, +	public void withExplicitScheduledTaskRegistrar() throws InterruptedException {, +		Assume.group(TestGroup.PERFORMANCE);, +, +		ctx = new AnnotationConfigApplicationContext(ExplicitScheduledTaskRegistrarConfig.class);, +, +		Thread.sleep(100);, +		assertThat(ctx.getBean(AtomicInteger.class).get(), greaterThanOrEqualTo(10));, +		assertThat(ctx.getBean(ExplicitScheduledTaskRegistrarConfig.class).threadName, startsWith("explicitScheduler1"));, +	}, +, +	@Test, +	public void withAmbiguousTaskSchedulers_butNoActualTasks() {, +		ctx = new AnnotationConfigApplicationContext(SchedulingEnabled_withAmbiguousTaskSchedulers_butNoActualTasks.class);, +	}, +, +	@Test, +	public void withAmbiguousTaskSchedulers_andSingleTask() {, +		// No exception raised as of 4.3, aligned with the behavior for @Async methods (SPR-14030), +		ctx = new AnnotationConfigApplicationContext(SchedulingEnabled_withAmbiguousTaskSchedulers_andSingleTask.class);, +	}, +, +	@Test, +	public void withAmbiguousTaskSchedulers_andSingleTask_disambiguatedByScheduledTaskRegistrarBean() throws InterruptedException {, +		Assume.group(TestGroup.PERFORMANCE);, +, +		ctx = new AnnotationConfigApplicationContext(, +				SchedulingEnabled_withAmbiguousTaskSchedulers_andSingleTask_disambiguatedByScheduledTaskRegistrar.class);, +, +		Thread.sleep(100);, +		assertThat(ctx.getBean(ThreadAwareWorker.class).executedByThread, startsWith("explicitScheduler2-"));, +	}, +, +	@Test, +	public void withAmbiguousTaskSchedulers_andSingleTask_disambiguatedBySchedulerNameAttribute() throws InterruptedException {, +		Assume.group(TestGroup.PERFORMANCE);, +, +		ctx = new AnnotationConfigApplicationContext(, +				SchedulingEnabled_withAmbiguousTaskSchedulers_andSingleTask_disambiguatedBySchedulerNameAttribute.class);, +, +		Thread.sleep(100);, +		assertThat(ctx.getBean(ThreadAwareWorker.class).executedByThread, startsWith("explicitScheduler2-"));, +	}, +, +	@Test, +	public void withTaskAddedVia_configureTasks() throws InterruptedException {, +		Assume.group(TestGroup.PERFORMANCE);, +, +		ctx = new AnnotationConfigApplicationContext(SchedulingEnabled_withTaskAddedVia_configureTasks.class);, +, +		Thread.sleep(100);, +		assertThat(ctx.getBean(ThreadAwareWorker.class).executedByThread, startsWith("taskScheduler-"));, +	}, +, +	@Test, +	public void withTriggerTask() throws InterruptedException {]