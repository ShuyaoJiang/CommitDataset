[+++ b/spring-web-reactive/src/main/kotlin/org/springframework/web/reactive/function/server/RouterFunctionExtensions.kt, + * 			GET("/user/{login}", ::findViewById), + * 			POST("/api/user/", ::create), + * 			POST("/api/user/{login}", ::findOne), +	operator fun RequestPredicate.invoke(f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(this, HandlerFunction { f(it) }), +	fun GET(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.GET(pattern), HandlerFunction { f(it) } ), +	fun HEAD(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.HEAD(pattern), HandlerFunction { f(it) }), +	fun POST(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.POST(pattern), HandlerFunction { f(it) }), +	fun PUT(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.PUT(pattern), HandlerFunction { f(it) }), +	fun PATCH(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.PATCH(pattern), HandlerFunction { f(it) }), +	fun DELETE(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.DELETE(pattern), HandlerFunction { f(it) }), +	fun OPTIONS(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.OPTIONS(pattern), HandlerFunction { f(it) }), +	fun accept(mediaType: MediaType, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.accept(mediaType), HandlerFunction { f(it) }), +	fun contentType(mediaType: MediaType, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.contentType(mediaType), HandlerFunction { f(it) }), +	fun headers(headerPredicate: (ServerRequest.Headers)->Boolean, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.headers(headerPredicate), HandlerFunction { f(it) }), +	fun method(httpMethod: HttpMethod, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.method(httpMethod), HandlerFunction { f(it) }), +	}, +, +	fun path(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.path(pattern), HandlerFunction { f(it) }), +++ b/spring-web-reactive/src/main/kotlin/org/springframework/web/reactive/function/server/RouterFunctionExtensions.kt, + * 			GET("/user/{login}", ::findViewById), + * 			POST("/api/user/", ::create), + * 			POST("/api/user/{login}", ::findOne), +	operator fun RequestPredicate.invoke(f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(this, HandlerFunction { f(it) }), +	fun GET(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.GET(pattern), HandlerFunction { f(it) } ), +	fun HEAD(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.HEAD(pattern), HandlerFunction { f(it) }), +	fun POST(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.POST(pattern), HandlerFunction { f(it) }), +	fun PUT(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.PUT(pattern), HandlerFunction { f(it) }), +	fun PATCH(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.PATCH(pattern), HandlerFunction { f(it) }), +	fun DELETE(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.DELETE(pattern), HandlerFunction { f(it) }), +	fun OPTIONS(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.OPTIONS(pattern), HandlerFunction { f(it) }), +	fun accept(mediaType: MediaType, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.accept(mediaType), HandlerFunction { f(it) }), +	fun contentType(mediaType: MediaType, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.contentType(mediaType), HandlerFunction { f(it) }), +	fun headers(headerPredicate: (ServerRequest.Headers)->Boolean, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.headers(headerPredicate), HandlerFunction { f(it) }), +	fun method(httpMethod: HttpMethod, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.method(httpMethod), HandlerFunction { f(it) }), +	}, +, +	fun path(pattern: String, f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.path(pattern), HandlerFunction { f(it) }), +++ b/spring-web-reactive/src/test/kotlin/org/springframework/web/reactive/function/server/RouterFunctionExtensionsTests.kt, +		override fun route(req: ServerRequest) = route(req) {, +			(GET("/foo/") or GET("/foos/")) { handle(req) }, +				POST("/api/foo/", ::handle), +				PUT("/api/foo/", ::handle), +				DELETE("/api/foo/", ::handle), +			accept(APPLICATION_ATOM_XML, ::handle), +			contentType(APPLICATION_OCTET_STREAM) { handle(req) }, +			method(HttpMethod.PATCH) { handle(req) }, +				GET("/api/foo/", ::handle), +			headers({ it.header("bar").isNotEmpty() }, ::handle), +			path("/baz") { handle(req) }, +		}, +	}, +private fun handle(req: ServerRequest) = ok().build()]