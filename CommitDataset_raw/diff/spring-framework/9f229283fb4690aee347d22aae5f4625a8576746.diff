[+++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, +	private MessageCodesResolver messageCodesResolver;, +, +		if (this.messageCodesResolver != null) {, +			result.setMessageCodesResolver(this.messageCodesResolver);, +		}, +		if (this.messageCodesResolver != null) {, +			result.setMessageCodesResolver(this.messageCodesResolver);, +		}, +		Assert.state(this.messageCodesResolver == null, "DataBinder is already initialized with MessageCodesResolver");, +		this.messageCodesResolver = messageCodesResolver;, +		if (this.bindingResult != null && messageCodesResolver != null) {, +			this.bindingResult.setMessageCodesResolver(messageCodesResolver);, +		}, +++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, +	private MessageCodesResolver messageCodesResolver;, +, +		if (this.messageCodesResolver != null) {, +			result.setMessageCodesResolver(this.messageCodesResolver);, +		}, +		if (this.messageCodesResolver != null) {, +			result.setMessageCodesResolver(this.messageCodesResolver);, +		}, +		Assert.state(this.messageCodesResolver == null, "DataBinder is already initialized with MessageCodesResolver");, +		this.messageCodesResolver = messageCodesResolver;, +		if (this.bindingResult != null && messageCodesResolver != null) {, +			this.bindingResult.setMessageCodesResolver(messageCodesResolver);, +		}, +++ b/spring-context/src/test/java/org/springframework/validation/DataBinderTests.java, +import org.springframework.beans.BeanWrapper;, +	@Test // SPR-15009, +	public void testSetCustomMessageCodesResolverBeforeInitializeBindingResultForBeanPropertyAccess() {, +		TestBean testBean = new TestBean();, +		DataBinder binder = new DataBinder(testBean, "testBean");, +		DefaultMessageCodesResolver messageCodesResolver = new DefaultMessageCodesResolver();, +		messageCodesResolver.setPrefix("errors.");, +		binder.setMessageCodesResolver(messageCodesResolver);, +		binder.setAutoGrowCollectionLimit(512); // allow configuration after set a MessageCodesResolver, +		binder.initBeanPropertyAccess();, +, +		MutablePropertyValues mpv = new MutablePropertyValues();, +		mpv.add("age", "invalid");, +		binder.bind(mpv);, +		assertEquals("errors.typeMismatch", binder.getBindingResult().getFieldError("age").getCode());, +		assertEquals(512, BeanWrapper.class.cast(binder.getInternalBindingResult().getPropertyAccessor()).getAutoGrowCollectionLimit());, +	}, +, +	@Test // SPR-15009, +	public void testSetCustomMessageCodesResolverBeforeInitializeBindingResultForDirectFieldAccess() {, +		TestBean testBean = new TestBean();, +		DataBinder binder = new DataBinder(testBean, "testBean");, +		DefaultMessageCodesResolver messageCodesResolver = new DefaultMessageCodesResolver();, +		messageCodesResolver.setPrefix("errors.");, +		binder.setMessageCodesResolver(messageCodesResolver);, +		binder.initDirectFieldAccess();, +, +		MutablePropertyValues mpv = new MutablePropertyValues();, +		mpv.add("age", "invalid");, +		binder.bind(mpv);, +		assertEquals("errors.typeMismatch", binder.getBindingResult().getFieldError("age").getCode());, +	}, +, +	@Test  // SPR-15009, +	public void testSetCustomMessageCodesResolverAfterInitializeBindingResult() {, +		TestBean testBean = new TestBean();, +		DataBinder binder = new DataBinder(testBean, "testBean");, +		binder.initBeanPropertyAccess();, +		DefaultMessageCodesResolver messageCodesResolver = new DefaultMessageCodesResolver();, +		messageCodesResolver.setPrefix("errors.");, +		binder.setMessageCodesResolver(messageCodesResolver);, +, +		MutablePropertyValues mpv = new MutablePropertyValues();, +		mpv.add("age", "invalid");, +		binder.bind(mpv);, +		assertEquals("errors.typeMismatch", binder.getBindingResult().getFieldError("age").getCode());, +	}, +, +	@Test  // SPR-15009, +	public void testSetMessageCodesResolverIsNullAfterInitializeBindingResult() {, +		TestBean testBean = new TestBean();, +		DataBinder binder = new DataBinder(testBean, "testBean");, +		binder.initBeanPropertyAccess();, +		binder.setMessageCodesResolver(null);, +, +		MutablePropertyValues mpv = new MutablePropertyValues();, +		mpv.add("age", "invalid");, +		binder.bind(mpv);, +		assertEquals("typeMismatch", binder.getBindingResult().getFieldError("age").getCode()); // Keep a default MessageCodesResolver, +	}, +, +	@Test  // SPR-15009, +	public void testCallSetMessageCodesResolverTwice() {, +		expectedException.expect(IllegalStateException.class);, +		expectedException.expectMessage("DataBinder is already initialized with MessageCodesResolver");, +, +		TestBean testBean = new TestBean();, +		DataBinder binder = new DataBinder(testBean, "testBean");, +		binder.setMessageCodesResolver(new DefaultMessageCodesResolver());, +		binder.setMessageCodesResolver(new DefaultMessageCodesResolver());, +]