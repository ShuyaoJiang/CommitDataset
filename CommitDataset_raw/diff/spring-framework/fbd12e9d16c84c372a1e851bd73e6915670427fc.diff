[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultServerHttpRequestBuilder.java, +	@Nullable, +	private SslInfo sslInfo;, +, +		Assert.isTrue(path.startsWith("/"), "The path does not have a leading slash.");, +	public ServerHttpRequest.Builder sslInfo(SslInfo sslInfo) {, +		this.sslInfo = sslInfo;, +		return this;, +	}, +, +	@Override, +		return new MutatedServerHttpRequest(getUriToUse(), this.contextPath, this.httpHeaders,, +				this.httpMethodValue, this.cookies, this.sslInfo, this.body, this.originalRequest);, +	private static class MutatedServerHttpRequest extends AbstractServerHttpRequest {, +, +		public MutatedServerHttpRequest(URI uri, @Nullable String contextPath,, +				@Nullable SslInfo sslInfo, Flux<DataBuffer> body, ServerHttpRequest originalRequest) {, +			this.sslInfo = sslInfo != null ? sslInfo : originalRequest.getSslInfo();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultServerHttpRequestBuilder.java, +	@Nullable, +	private SslInfo sslInfo;, +, +		Assert.isTrue(path.startsWith("/"), "The path does not have a leading slash.");, +	public ServerHttpRequest.Builder sslInfo(SslInfo sslInfo) {, +		this.sslInfo = sslInfo;, +		return this;, +	}, +, +	@Override, +		return new MutatedServerHttpRequest(getUriToUse(), this.contextPath, this.httpHeaders,, +				this.httpMethodValue, this.cookies, this.sslInfo, this.body, this.originalRequest);, +	private static class MutatedServerHttpRequest extends AbstractServerHttpRequest {, +, +		public MutatedServerHttpRequest(URI uri, @Nullable String contextPath,, +				@Nullable SslInfo sslInfo, Flux<DataBuffer> body, ServerHttpRequest originalRequest) {, +			this.sslInfo = sslInfo != null ? sslInfo : originalRequest.getSslInfo();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpRequest.java, +		 * Set the URI to use with the following conditions:, +		 * <ul>, +		 * <li>If {@link #path(String) path} is also set, it overrides the path, +		 * of the URI provided here., +		 * <li>If {@link #contextPath(String) contextPath} is also set, or, +		 * already present, it must match the start of the path of the URI, +		 * provided here., +		 * </ul>, +		 * Set the path to use instead of the {@code "rawPath"} of the URI of, +		 * the request with the following conditions:, +		 * <ul>, +		 * <li>If {@link #uri(URI) uri} is also set, the path given here, +		 * overrides the path of the given URI., +		 * <li>If {@link #contextPath(String) contextPath} is also set, or, +		 * already present, it must match the start of the path given here., +		 * <li>The given value must begin with a slash., +		 * </ul>, +		 * <p>The given value must be a valid {@link RequestPath#contextPath(), +		 * contextPath} and it must match the start of the path of the URI of, +		 * the request. That means changing the contextPath, implies also, +		 * changing the path via {@link #path(String)}., +		 * Manipulate request headers. The provided {@code HttpHeaders} contains, +		 * current request headers, so that the {@code Consumer} can, +		 * {@linkplain HttpHeaders#set(String, String) overwrite} or, +		 * {@linkplain HttpHeaders#remove(Object) remove} existing values, or, +		 * use any other {@link HttpHeaders} methods., +		 * Set the SSL session information. This may be useful in environments, +		 * where TLS termination is done at the router, but SSL information is, +		 * made available in some other way such as through a header., +		 * @since 5.0.7, +		 */, +		Builder sslInfo(SslInfo sslInfo);, +, +		/**, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultServerHttpRequestBuilder.java, +	@Nullable, +	private SslInfo sslInfo;, +, +		Assert.isTrue(path.startsWith("/"), "The path does not have a leading slash.");, +	public ServerHttpRequest.Builder sslInfo(SslInfo sslInfo) {, +		this.sslInfo = sslInfo;, +		return this;, +	}, +, +	@Override, +		return new MutatedServerHttpRequest(getUriToUse(), this.contextPath, this.httpHeaders,, +				this.httpMethodValue, this.cookies, this.sslInfo, this.body, this.originalRequest);, +	private static class MutatedServerHttpRequest extends AbstractServerHttpRequest {, +, +		public MutatedServerHttpRequest(URI uri, @Nullable String contextPath,, +				@Nullable SslInfo sslInfo, Flux<DataBuffer> body, ServerHttpRequest originalRequest) {, +			this.sslInfo = sslInfo != null ? sslInfo : originalRequest.getSslInfo();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpRequest.java, +		 * Set the URI to use with the following conditions:, +		 * <ul>, +		 * <li>If {@link #path(String) path} is also set, it overrides the path, +		 * of the URI provided here., +		 * <li>If {@link #contextPath(String) contextPath} is also set, or, +		 * already present, it must match the start of the path of the URI, +		 * provided here., +		 * </ul>, +		 * Set the path to use instead of the {@code "rawPath"} of the URI of, +		 * the request with the following conditions:]