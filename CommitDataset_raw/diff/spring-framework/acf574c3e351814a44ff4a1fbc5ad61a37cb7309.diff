[+++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/DefaultMapperTargetFactory.java, +import org.springframework.util.ClassUtils;, +	public boolean supports(TypeDescriptor targetType) {, +		return ClassUtils.hasConstructor(targetType.getType(), null);, +	}, +, +	public Object createTarget(TypeDescriptor targetType) {, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/DefaultMapperTargetFactory.java, +import org.springframework.util.ClassUtils;, +	public boolean supports(TypeDescriptor targetType) {, +		return ClassUtils.hasConstructor(targetType.getType(), null);, +	}, +, +	public Object createTarget(TypeDescriptor targetType) {, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MapperConverter.java, +import org.springframework.beans.BeanUtils;, +import org.springframework.core.convert.ConversionFailedException;, +		if (SpelMappingContextHolder.contains(source)) {, +			return source;, +		}, +		if (sourceType.isAssignableTo(targetType) && isCopyByReference(sourceType, targetType)) {, +			return source;, +		}, +		return createAndMap(targetType, source, sourceType);, +	private boolean isCopyByReference(TypeDescriptor sourceType, TypeDescriptor targetType) {, +		if (BeanUtils.isSimpleValueType(targetType.getType()) || Enum.class.isAssignableFrom(targetType.getType())) {, +			return true;, +		} else {, +			return false;, +		}, +	}, +, +	private Object createAndMap(TypeDescriptor targetType, Object source, TypeDescriptor sourceType) {, +		if (this.mappingTargetFactory.supports(targetType)) {, +			Object target = this.mappingTargetFactory.createTarget(targetType);, +			return this.mapper.map(source, target);, +		} else {, +			IllegalStateException cause = new IllegalStateException("[", +					+ this.mappingTargetFactory.getClass().getName() + "] does not support target type [", +					+ targetType.getName() + "]");, +			throw new ConversionFailedException(sourceType, targetType, source, cause);, +		}, +, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/DefaultMapperTargetFactory.java, +import org.springframework.util.ClassUtils;, +	public boolean supports(TypeDescriptor targetType) {, +		return ClassUtils.hasConstructor(targetType.getType(), null);, +	}, +, +	public Object createTarget(TypeDescriptor targetType) {, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MapperConverter.java, +import org.springframework.beans.BeanUtils;, +import org.springframework.core.convert.ConversionFailedException;, +		if (SpelMappingContextHolder.contains(source)) {, +			return source;, +		}, +		if (sourceType.isAssignableTo(targetType) && isCopyByReference(sourceType, targetType)) {, +			return source;, +		}, +		return createAndMap(targetType, source, sourceType);, +	private boolean isCopyByReference(TypeDescriptor sourceType, TypeDescriptor targetType) {, +		if (BeanUtils.isSimpleValueType(targetType.getType()) || Enum.class.isAssignableFrom(targetType.getType())) {, +			return true;, +		} else {, +			return false;, +		}, +	}, +, +	private Object createAndMap(TypeDescriptor targetType, Object source, TypeDescriptor sourceType) {, +		if (this.mappingTargetFactory.supports(targetType)) {, +			Object target = this.mappingTargetFactory.createTarget(targetType);, +			return this.mapper.map(source, target);, +		} else {, +			IllegalStateException cause = new IllegalStateException("[", +					+ this.mappingTargetFactory.getClass().getName() + "] does not support target type [", +					+ targetType.getName() + "]");, +			throw new ConversionFailedException(sourceType, targetType, source, cause);, +		}, +, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MapperTargetFactory.java, +	 * Does this factory support creating mapping targets of the specified type, +	 * @param targetType the targe type, +	 * @return true if so, false otherwise, +	 */, +	public boolean supports(TypeDescriptor targetType);, +, +	/**, +	public Object createTarget(TypeDescriptor targetType);, +, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/DefaultMapperTargetFactory.java, +import org.springframework.util.ClassUtils;, +	public boolean supports(TypeDescriptor targetType) {, +		return ClassUtils.hasConstructor(targetType.getType(), null);, +	}, +, +	public Object createTarget(TypeDescriptor targetType) {, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MapperConverter.java, +import org.springframework.beans.BeanUtils;]