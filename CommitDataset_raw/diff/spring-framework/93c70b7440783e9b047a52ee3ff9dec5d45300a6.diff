[+++ b/spring-core/src/main/java/org/springframework/core/io/support/EncodedResource.java, + * Copyright 2002-2015 the original author or authors., + * Holder that combines a {@link Resource} descriptor with a specific encoding, + * or {@code Charset} to be used for reading from the resource., + * <p>Used as an argument for operations that support reading content with, + * a specific encoding, typically via a {@code java.io.Reader}., + * @author Sam Brannen, + * @see java.nio.charset.Charset, +	private final String encoding;, +	private final Charset charset;, +	 * Create a new {@code EncodedResource} for the given {@code Resource},, +	 * not specifying an explicit encoding or {@code Charset}., +	 * @param resource the {@code Resource} to hold; never {@code null}, +		this(resource, null, null);, +	 * Create a new {@code EncodedResource} for the given {@code Resource},, +	 * using the specified {@code encoding}., +	 * @param resource the {@code Resource} to hold; never {@code null}, +		this(resource, encoding, null);, +	}, +, +	/**, +	 * Create a new {@code EncodedResource} for the given {@code Resource},, +	 * using the specified {@code Charset}., +	 * @param resource the {@code Resource} to hold; never {@code null}, +	 * @param charset the {@code Charset} to use for reading from the resource, +	 */, +	public EncodedResource(Resource resource, Charset charset) {, +		this(resource, null, charset);, +	}, +, +	private EncodedResource(Resource resource, String encoding, Charset charset) {, +		super();, +	 * Return the {@code Resource} held by this {@code EncodedResource}., +	 * Return the encoding to use for reading from the {@linkplain #getResource() resource},, +	 * Return the {@code Charset} to use for reading from the {@linkplain #getResource() resource},, +	 * i.e. whether an {@linkplain #getEncoding() encoding} or a {@link #getCharset() Charset}, +	 * has been specified., +	 * Open a {@code java.io.Reader} for the specified resource, using the specified, +	 * {@link #getCharset() Charset} or {@linkplain #getEncoding() encoding}, +	 * (if any)., +	 * @see #getInputStream(), +	 * Open a {@code java.io.InputStream} for the specified resource, ignoring any, +	 * specified {@link #getCharset() Charset} or {@linkplain #getEncoding() encoding}., +	 * @see #getReader(), +			EncodedResource that = (EncodedResource) obj;, +			return (this.resource.equals(that.resource) &&, +					ObjectUtils.nullSafeEquals(this.charset, that.charset) &&, +					ObjectUtils.nullSafeEquals(this.encoding, that.encoding));, +++ b/spring-core/src/main/java/org/springframework/core/io/support/EncodedResource.java, + * Copyright 2002-2015 the original author or authors., + * Holder that combines a {@link Resource} descriptor with a specific encoding, + * or {@code Charset} to be used for reading from the resource., + * <p>Used as an argument for operations that support reading content with, + * a specific encoding, typically via a {@code java.io.Reader}., + * @author Sam Brannen, + * @see java.nio.charset.Charset, +	private final String encoding;, +	private final Charset charset;, +	 * Create a new {@code EncodedResource} for the given {@code Resource},, +	 * not specifying an explicit encoding or {@code Charset}., +	 * @param resource the {@code Resource} to hold; never {@code null}, +		this(resource, null, null);, +	 * Create a new {@code EncodedResource} for the given {@code Resource},, +	 * using the specified {@code encoding}., +	 * @param resource the {@code Resource} to hold; never {@code null}, +		this(resource, encoding, null);, +	}, +, +	/**, +	 * Create a new {@code EncodedResource} for the given {@code Resource},, +	 * using the specified {@code Charset}., +	 * @param resource the {@code Resource} to hold; never {@code null}, +	 * @param charset the {@code Charset} to use for reading from the resource, +	 */, +	public EncodedResource(Resource resource, Charset charset) {, +		this(resource, null, charset);, +	}, +, +	private EncodedResource(Resource resource, String encoding, Charset charset) {, +		super();, +	 * Return the {@code Resource} held by this {@code EncodedResource}., +	 * Return the encoding to use for reading from the {@linkplain #getResource() resource},, +	 * Return the {@code Charset} to use for reading from the {@linkplain #getResource() resource},, +	 * i.e. whether an {@linkplain #getEncoding() encoding} or a {@link #getCharset() Charset}, +	 * has been specified., +	 * Open a {@code java.io.Reader} for the specified resource, using the specified, +	 * {@link #getCharset() Charset} or {@linkplain #getEncoding() encoding}, +	 * (if any)., +	 * @see #getInputStream(), +	 * Open a {@code java.io.InputStream} for the specified resource, ignoring any, +	 * specified {@link #getCharset() Charset} or {@linkplain #getEncoding() encoding}., +	 * @see #getReader(), +			EncodedResource that = (EncodedResource) obj;, +			return (this.resource.equals(that.resource) &&, +					ObjectUtils.nullSafeEquals(this.charset, that.charset) &&, +					ObjectUtils.nullSafeEquals(this.encoding, that.encoding));, +++ b/spring-core/src/test/java/org/springframework/core/io/support/EncodedResourceTests.java, +/*, + * Copyright 2002-2015 the original author or authors., + *]