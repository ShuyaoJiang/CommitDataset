[+++ b/spring-web/src/main/java/org/springframework/http/converter/json/GsonFactoryBean.java, +import com.google.gson.Gson;, +import com.google.gson.GsonBuilder;, +, + * @author Juergen Hoeller, +public class GsonFactoryBean implements FactoryBean<Gson>, InitializingBean {, +	/** Apache Commons Codec present on the classpath, for Base64 encoding? */, +	private static final boolean commonsCodecPresent = ClassUtils.isPresent(, +	private boolean serializeNulls;, +	private boolean prettyPrinting;, +	private boolean disableHtmlEscaping;, +	private String dateFormatPattern;, +	private boolean base64EncodeByteArrays;, +	private Gson gson;, +	 * Set the GsonBuilder instance to use., +	 * If not set, the GsonBuilder will be created using its default constructor., +	 * Whether to use the {@link GsonBuilder#serializeNulls()} option when writing, +	 * Whether to use the {@link GsonBuilder#setPrettyPrinting()} when writing, +	 * JSON. This is a shortcut for setting up a {@code Gson} as follows:, +	 * <pre class="code">, +	 * new GsonBuilder().setPrettyPrinting().create();, +	 * </pre>, +	 */, +	public void setPrettyPrinting(boolean prettyPrinting) {, +		this.prettyPrinting = prettyPrinting;, +	}, +, +	/**, +	 * Define the date/time format with a {@link SimpleDateFormat}-style pattern., +	public void setDateFormatPattern(String dateFormatPattern) {, +		this.dateFormatPattern = dateFormatPattern;, +	 * Whether to Base64-encode {@code byte[]} properties when reading and, +	 * <p>When set to {@code true} a custom {@link com.google.gson.TypeAdapter} is, +	 * registered via {@link GsonBuilder#registerTypeHierarchyAdapter(Class, Object)}, +	 * that serializes a {@code byte[]} property to and from a Base64-encoded String, +	 * instead of a JSON array., +	 * <p><strong>NOTE:</strong> Use of this option requires the presence of the, +	 * Apache Commons Codec library on the classpath., +	 * @see GsonBase64ByteArrayJsonTypeAdapter, +	public void afterPropertiesSet() {, +		if (this.serializeNulls) {, +			this.gsonBuilder.serializeNulls();, +		if (this.prettyPrinting) {, +			this.gsonBuilder.setPrettyPrinting();, +		if (this.disableHtmlEscaping) {, +			this.gsonBuilder.disableHtmlEscaping();, +		if (this.dateFormatPattern != null) {, +			this.gsonBuilder.setDateFormat(this.dateFormatPattern);, +		if (this.base64EncodeByteArrays) {, +			if (commonsCodecPresent) {, +			else {, +				throw new IllegalStateException(, +						"Apache Commons Codec is not available on the classpath - cannot enable Gson Base64 encoding");, +, +	public Gson getObject() {, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/GsonFactoryBean.java, +import com.google.gson.Gson;, +import com.google.gson.GsonBuilder;, +, + * @author Juergen Hoeller, +public class GsonFactoryBean implements FactoryBean<Gson>, InitializingBean {, +	/** Apache Commons Codec present on the classpath, for Base64 encoding? */, +	private static final boolean commonsCodecPresent = ClassUtils.isPresent(, +	private boolean serializeNulls;, +	private boolean prettyPrinting;, +	private boolean disableHtmlEscaping;, +	private String dateFormatPattern;, +	private boolean base64EncodeByteArrays;, +	private Gson gson;, +	 * Set the GsonBuilder instance to use., +	 * If not set, the GsonBuilder will be created using its default constructor., +	 * Whether to use the {@link GsonBuilder#serializeNulls()} option when writing, +	 * Whether to use the {@link GsonBuilder#setPrettyPrinting()} when writing, +	 * JSON. This is a shortcut for setting up a {@code Gson} as follows:, +	 * <pre class="code">, +	 * new GsonBuilder().setPrettyPrinting().create();, +	 * </pre>, +	 */, +	public void setPrettyPrinting(boolean prettyPrinting) {, +		this.prettyPrinting = prettyPrinting;, +	}, +, +	/**, +	 * Define the date/time format with a {@link SimpleDateFormat}-style pattern., +	public void setDateFormatPattern(String dateFormatPattern) {, +		this.dateFormatPattern = dateFormatPattern;, +	 * Whether to Base64-encode {@code byte[]} properties when reading and, +	 * <p>When set to {@code true} a custom {@link com.google.gson.TypeAdapter} is, +	 * registered via {@link GsonBuilder#registerTypeHierarchyAdapter(Class, Object)}, +	 * that serializes a {@code byte[]} property to and from a Base64-encoded String, +	 * instead of a JSON array., +	 * <p><strong>NOTE:</strong> Use of this option requires the presence of the, +	 * Apache Commons Codec library on the classpath., +	 * @see GsonBase64ByteArrayJsonTypeAdapter, +	public void afterPropertiesSet() {, +		if (this.serializeNulls) {, +			this.gsonBuilder.serializeNulls();, +		if (this.prettyPrinting) {, +			this.gsonBuilder.setPrettyPrinting();, +		if (this.disableHtmlEscaping) {]