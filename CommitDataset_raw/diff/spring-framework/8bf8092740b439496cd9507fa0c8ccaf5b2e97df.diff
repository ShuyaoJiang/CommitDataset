[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.java, +import org.springframework.aop.scope.ScopedObject;, +		if (this.advisor == null || bean instanceof ScopedObject || bean instanceof AopInfrastructureBean) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.java, +import org.springframework.aop.scope.ScopedObject;, +		if (this.advisor == null || bean instanceof ScopedObject || bean instanceof AopInfrastructureBean) {, +++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyFactoryBean.java, +public class ScopedProxyFactoryBean extends ProxyConfig, +		implements FactoryBean<Object>, BeanFactoryAware, AopInfrastructureBean {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.java, +import org.springframework.aop.scope.ScopedObject;, +		if (this.advisor == null || bean instanceof ScopedObject || bean instanceof AopInfrastructureBean) {, +++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyFactoryBean.java, +public class ScopedProxyFactoryBean extends ProxyConfig, +		implements FactoryBean<Object>, BeanFactoryAware, AopInfrastructureBean {, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import org.springframework.aop.framework.AopInfrastructureBean;, +import org.springframework.aop.scope.ScopedObject;, +	public Object postProcessAfterInitialization(Object bean, String beanName) {, +		// Only process scoped target instances, not scoped proxies..., +		if (bean instanceof ScopedObject || bean instanceof AopInfrastructureBean ||, +				bean instanceof TaskScheduler || bean instanceof ScheduledExecutorService) {, +			return bean;, +		}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.java, +import org.springframework.aop.scope.ScopedObject;, +		if (this.advisor == null || bean instanceof ScopedObject || bean instanceof AopInfrastructureBean) {, +++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyFactoryBean.java, +public class ScopedProxyFactoryBean extends ProxyConfig, +		implements FactoryBean<Object>, BeanFactoryAware, AopInfrastructureBean {, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import org.springframework.aop.framework.AopInfrastructureBean;, +import org.springframework.aop.scope.ScopedObject;, +	public Object postProcessAfterInitialization(Object bean, String beanName) {, +		// Only process scoped target instances, not scoped proxies..., +		if (bean instanceof ScopedObject || bean instanceof AopInfrastructureBean ||, +				bean instanceof TaskScheduler || bean instanceof ScheduledExecutorService) {, +			return bean;, +		}, +, +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/EnableSchedulingTests.java, + * Copyright 2002-2018 the original author or authors., +			scheduler.schedule(() -> counter().incrementAndGet(),, +					triggerContext -> new Date(new Date().getTime()+10));, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.java, +import org.springframework.aop.scope.ScopedObject;, +		if (this.advisor == null || bean instanceof ScopedObject || bean instanceof AopInfrastructureBean) {, +++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyFactoryBean.java, +public class ScopedProxyFactoryBean extends ProxyConfig, +		implements FactoryBean<Object>, BeanFactoryAware, AopInfrastructureBean {, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import org.springframework.aop.framework.AopInfrastructureBean;, +import org.springframework.aop.scope.ScopedObject;, +	public Object postProcessAfterInitialization(Object bean, String beanName) {, +		// Only process scoped target instances, not scoped proxies..., +		if (bean instanceof ScopedObject || bean instanceof AopInfrastructureBean ||, +				bean instanceof TaskScheduler || bean instanceof ScheduledExecutorService) {, +			return bean;, +		}, +, +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/EnableSchedulingTests.java, + * Copyright 2002-2018 the original author or authors., +			scheduler.schedule(() -> counter().incrementAndGet(),, +					triggerContext -> new Date(new Date().getTime()+10));, +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessorTests.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +import org.springframework.context.annotation.AnnotatedBeanDefinitionReader;, +import org.springframework.context.annotation.Scope;, +import org.springframework.context.annotation.ScopedProxyMode;, +import org.springframework.stereotype.Component;, +	public void cronTask() {, +	public void cronTaskWithZone() {, +	public void cronTaskWithInvalidZone() {, +	public void cronTaskWithScopedProxy() {, +		BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class);, +		context.registerBeanDefinition("postProcessor", processorDefinition);, +		new AnnotatedBeanDefinitionReader(context).register(ProxiedCronTestBean.class, ProxiedCronTestBeanDependent.class);, +		context.refresh();, +, +		ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class);, +		assertEquals(1, postProcessor.getScheduledTasks().size());, +, +		ScheduledTaskRegistrar registrar = (ScheduledTaskRegistrar), +				new DirectFieldAccessor(postProcessor).getPropertyValue("registrar");, +		@SuppressWarnings("unchecked"), +		List<CronTask> cronTasks = (List<CronTask>), +				new DirectFieldAccessor(registrar).getPropertyValue("cronTasks");, +		assertEquals(1, cronTasks.size());, +		CronTask task = cronTasks.get(0);, +		ScheduledMethodRunnable runnable = (ScheduledMethodRunnable) task.getRunnable();, +		Object targetObject = runnable.getTarget();, +		Method targetMethod = runnable.getMethod();, +		assertEquals(context.getBean(ScopedProxyUtils.getTargetBeanName("target")), targetObject);, +		assertEquals("cron", targetMethod.getName());, +		assertEquals("*/7 * * * * ?", task.getExpression());, +	}, +, +	@Test, +	@Component("target")]