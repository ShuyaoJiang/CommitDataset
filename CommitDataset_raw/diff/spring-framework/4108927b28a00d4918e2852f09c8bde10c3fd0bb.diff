[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +				String[] patterns = mapping.value();, +				RequestMethod[] methods = new RequestMethod[0];, +				String[] params = new String[0];, +				String[] headers = new String[0];, +					methods = mapping.method();, +					params = mapping.params();, +					headers = mapping.headers();, +				RequestMappingInfo mappingInfo = new RequestMappingInfo(patterns, methods, params, headers);, +			Map<RequestSpecificMappingInfo, Method> targetHandlerMethods = new LinkedHashMap<RequestSpecificMappingInfo, Method>();, +				RequestSpecificMappingInfo mappingInfo = new RequestSpecificMappingInfo(this.mappings.get(handlerMethod));, +					for (String pattern : mappingInfo.getPatterns()) {, +								mappingInfo.addMatchedPattern(combinedPattern);, +					mappingInfo.sortMatchedPatterns(pathComparator);, +					if (match && mappingInfo.getMethodCount() == 0 && mappingInfo.getParamCount() == 0 &&, +						if (methodNameResolver != null && !mappingInfo.hasPatterns()) {, +				List<RequestSpecificMappingInfo> matches = new ArrayList<RequestSpecificMappingInfo>(targetHandlerMethods.keySet());, +				RequestSpecificMappingInfoComparator requestMappingInfoComparator =, +						new RequestSpecificMappingInfoComparator(pathComparator, request);, +				RequestSpecificMappingInfo bestMappingMatch = matches.get(0);, +	 * Holder for request mapping metadata., +		private final String[] patterns;, +		private final RequestMethod[] methods;, +		private final String[] params;, +		private final String[] headers;, +		RequestMappingInfo(String[] patterns, RequestMethod[] methods, String[] params, String[] headers) {, +			this.patterns = patterns != null ? patterns : new String[0];, +			this.methods = methods != null ? methods : new RequestMethod[0];, +			this.params = params != null ? params : new String[0];, +			this.headers = headers != null ? headers : new String[0];, +		}, +		public String[] getPatterns() {, +			return patterns;, +		}, +, +		public int getMethodCount() {, +			return methods.length;, +		}, +, +		public int getParamCount() {, +			return params.length;, +		}, +, +		public int getHeaderCount() {, +			return headers.length;, +	/**, +	 * Subclass of {@link RequestMappingInfo} that holds request-specific data., +	 */, +	static class RequestSpecificMappingInfo extends RequestMappingInfo {, +, +		private final List<String> matchedPatterns = new ArrayList<String>();, +, +		RequestSpecificMappingInfo(String[] patterns, RequestMethod[] methods, String[] params, String[] headers) {, +			super(patterns, methods, params, headers);, +		}, +, +		RequestSpecificMappingInfo(RequestMappingInfo other) {, +			super(other.patterns, other.methods, other.params, other.headers);, +		}, +, +		public void addMatchedPattern(String matchedPattern) {, +			matchedPatterns.add(matchedPattern);, +		}, +, +		public void sortMatchedPatterns(Comparator<String> pathComparator) {, +			Collections.sort(matchedPatterns, pathComparator);, +		}, +, +		public String bestMatchedPattern() {, +			return (!this.matchedPatterns.isEmpty() ? this.matchedPatterns.get(0) : null);, +		}, +, +	}, +, +	 * Comparator capable of sorting {@link RequestSpecificMappingInfo}s (RHIs) so that sorting a list with this comparator will, +	 * <li>RHIs with {@linkplain org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.RequestSpecificMappingInfo#matchedPatterns better matched paths} take prescedence, +	static class RequestSpecificMappingInfoComparator implements Comparator<RequestSpecificMappingInfo> {, +		RequestSpecificMappingInfoComparator(Comparator<String> pathComparator, HttpServletRequest request) {, +		public int compare(RequestSpecificMappingInfo info1, RequestSpecificMappingInfo info2) {, +			int info1ParamCount = info1.getParamCount();, +			int info2ParamCount = info2.getParamCount();, +			int info1HeaderCount = info1.getHeaderCount();, +			int info2HeaderCount = info2.getHeaderCount();, +			int info1MethodCount = info1.getMethodCount();, +			int info2MethodCount = info2.getMethodCount();, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +				String[] patterns = mapping.value();, +				RequestMethod[] methods = new RequestMethod[0];, +				String[] params = new String[0];, +				String[] headers = new String[0];, +					methods = mapping.method();, +					params = mapping.params();, +					headers = mapping.headers();, +				RequestMappingInfo mappingInfo = new RequestMappingInfo(patterns, methods, params, headers);, +			Map<RequestSpecificMappingInfo, Method> targetHandlerMethods = new LinkedHashMap<RequestSpecificMappingInfo, Method>();, +				RequestSpecificMappingInfo mappingInfo = new RequestSpecificMappingInfo(this.mappings.get(handlerMethod));, +					for (String pattern : mappingInfo.getPatterns()) {, +								mappingInfo.addMatchedPattern(combinedPattern);, +					mappingInfo.sortMatchedPatterns(pathComparator);, +					if (match && mappingInfo.getMethodCount() == 0 && mappingInfo.getParamCount() == 0 &&]