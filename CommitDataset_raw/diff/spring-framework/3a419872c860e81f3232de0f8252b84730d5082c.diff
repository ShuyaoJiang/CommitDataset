[+++ b/spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +	protected Collection<CacheOperation> parseCacheAnnotations(DefaultCacheConfig cachingConfig, AnnotatedElement ae) {, +			for (CacheEvict evict : evicts) {, +				ops.add(parseEvictAnnotation(ae, cachingConfig, evict));, +		Collection<CachePut> puts = getAnnotations(ae, CachePut.class);, +		if (puts != null) {, +			for (CachePut put : puts) {, +				ops.add(parsePutAnnotation(ae, cachingConfig, put));, +		Collection<Caching> cachings = getAnnotations(ae, Caching.class);, +		if (cachings != null) {, +			for (Caching caching : cachings) {, +				ops.addAll(parseCachingAnnotation(ae, cachingConfig, caching));, +, +	CacheableOperation parseCacheableAnnotation(AnnotatedElement ae, DefaultCacheConfig defaultConfig, Cacheable caching) {, +		CacheableOperation op = new CacheableOperation();, +		op.setCacheNames(caching.value());, +		op.setCondition(caching.condition());, +		op.setUnless(caching.unless());, +		op.setKey(caching.key());, +		op.setKeyGenerator(caching.keyGenerator());, +		op.setCacheManager(caching.cacheManager());, +		op.setCacheResolver(caching.cacheResolver());, +		op.setName(ae.toString());, +		defaultConfig.applyDefault(op);, +		validateCacheOperation(ae, op);, +, +		return op;, +	CacheEvictOperation parseEvictAnnotation(AnnotatedElement ae, DefaultCacheConfig defaultConfig, CacheEvict caching) {, +		CacheEvictOperation op = new CacheEvictOperation();, +		op.setCacheNames(caching.value());, +		op.setCondition(caching.condition());, +		op.setKey(caching.key());, +		op.setKeyGenerator(caching.keyGenerator());, +		op.setCacheManager(caching.cacheManager());, +		op.setCacheResolver(caching.cacheResolver());, +		op.setCacheWide(caching.allEntries());, +		op.setBeforeInvocation(caching.beforeInvocation());, +		op.setName(ae.toString());, +		defaultConfig.applyDefault(op);, +		validateCacheOperation(ae, op);, +, +		return op;, +	CacheOperation parsePutAnnotation(AnnotatedElement ae, DefaultCacheConfig defaultConfig, CachePut caching) {, +		CachePutOperation op = new CachePutOperation();, +		op.setCacheNames(caching.value());, +		op.setCondition(caching.condition());, +		op.setUnless(caching.unless());, +		op.setKey(caching.key());, +		op.setKeyGenerator(caching.keyGenerator());, +		op.setCacheManager(caching.cacheManager());, +		op.setCacheResolver(caching.cacheResolver());, +		op.setName(ae.toString());, +		defaultConfig.applyDefault(op);, +		validateCacheOperation(ae, op);, +, +		return op;, +	Collection<CacheOperation> parseCachingAnnotation(AnnotatedElement ae, DefaultCacheConfig defaultConfig, Caching caching) {, +				ops.add(parsePutAnnotation(ae, defaultConfig, update));, +		CacheConfig annotation = AnnotationUtils.getAnnotation(target, CacheConfig.class);, +			throw new IllegalStateException("Invalid cache annotation configuration on '" +, +					ae.toString() + "'. Both 'key' and 'keyGenerator' attributes have been set. " +, +			throw new IllegalStateException("Invalid cache annotation configuration on '" +, +					ae.toString() + "'. Both 'cacheManager' and 'cacheResolver' attributes have been set. " +, +			throw new IllegalStateException("No cache names could be detected on '" +, +					ae.toString() + "'. Make sure to set the value parameter on the annotation or " +, +, +		public DefaultCacheConfig() {, +			this(null, null, null, null);, +		}, +, +		private DefaultCacheConfig(String[] cacheNames, String keyGenerator, String cacheManager, String cacheResolver) {, +			if (operation.getCacheNames().isEmpty() && this.cacheNames != null) {, +				operation.setCacheNames(this.cacheNames);, +			if (!StringUtils.hasText(operation.getKey()) && !StringUtils.hasText(operation.getKeyGenerator()) &&, +					StringUtils.hasText(this.keyGenerator)) {, +				operation.setKeyGenerator(this.keyGenerator);, +			if (StringUtils.hasText(operation.getCacheManager()) || StringUtils.hasText(operation.getCacheResolver())) {, +			else if (StringUtils.hasText(this.cacheResolver)) {, +				operation.setCacheResolver(this.cacheResolver);, +			else if (StringUtils.hasText(this.cacheManager)) {, +				operation.setCacheManager(this.cacheManager);, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +	protected Collection<CacheOperation> parseCacheAnnotations(DefaultCacheConfig cachingConfig, AnnotatedElement ae) {, +			for (CacheEvict evict : evicts) {, +				ops.add(parseEvictAnnotation(ae, cachingConfig, evict));, +		Collection<CachePut> puts = getAnnotations(ae, CachePut.class);, +		if (puts != null) {, +			for (CachePut put : puts) {, +				ops.add(parsePutAnnotation(ae, cachingConfig, put));, +		Collection<Caching> cachings = getAnnotations(ae, Caching.class);, +		if (cachings != null) {, +			for (Caching caching : cachings) {, +				ops.addAll(parseCachingAnnotation(ae, cachingConfig, caching));, +, +	CacheableOperation parseCacheableAnnotation(AnnotatedElement ae, DefaultCacheConfig defaultConfig, Cacheable caching) {, +		CacheableOperation op = new CacheableOperation();, +		op.setCacheNames(caching.value());, +		op.setCondition(caching.condition());, +		op.setUnless(caching.unless());, +		op.setKey(caching.key());]