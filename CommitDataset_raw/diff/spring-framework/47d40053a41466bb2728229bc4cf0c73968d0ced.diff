[+++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBean.java, +import org.springframework.beans.FatalBeanException;, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.util.Assert;, +, +import com.fasterxml.jackson.annotation.JsonInclude;, +	private JsonInclude.Include serializationInclusion;, +, +	/**, +	 * Sets the custom inclusion strategy for serialization., +	 * @see com.fasterxml.jackson.annotation.JsonInclude.Include, +	 */, +	public void setSerializationInclusion(JsonInclude.Include serializationInclusion) {, +		this.serializationInclusion = serializationInclusion;, +	}, +, +		if (this.serializationInclusion != null) {, +			this.objectMapper.setSerializationInclusion(this.serializationInclusion);, +		}, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBean.java, +import org.springframework.beans.FatalBeanException;, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.util.Assert;, +, +import com.fasterxml.jackson.annotation.JsonInclude;, +	private JsonInclude.Include serializationInclusion;, +, +	/**, +	 * Sets the custom inclusion strategy for serialization., +	 * @see com.fasterxml.jackson.annotation.JsonInclude.Include, +	 */, +	public void setSerializationInclusion(JsonInclude.Include serializationInclusion) {, +		this.serializationInclusion = serializationInclusion;, +	}, +, +		if (this.serializationInclusion != null) {, +			this.objectMapper.setSerializationInclusion(this.serializationInclusion);, +		}, +++ b/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBeanTests.java, +import java.util.Collections;, +import com.fasterxml.jackson.annotation.JsonInclude;, +import com.fasterxml.jackson.databind.JsonSerializer;, +import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;, +import com.fasterxml.jackson.databind.ser.BasicSerializerFactory;, +import com.fasterxml.jackson.databind.ser.Serializers;, +import com.fasterxml.jackson.databind.ser.std.NumberSerializers.NumberSerializer;, +import com.fasterxml.jackson.databind.type.SimpleType;, +, +import static org.junit.Assert.*;, +	public void testSettersWithNullValues() {, +		// Should not crash:, +		factory.setSerializers((JsonSerializer<?>[]) null);, +		factory.setSerializersByType(null);, +		factory.setDeserializersByType(null);, +		factory.setFeaturesToEnable((Object[]) null);, +		factory.setFeaturesToDisable((Object[]) null);, +		assertTrue(objectMapper.getSerializationConfig().getSerializationInclusion() == JsonInclude.Include.ALWAYS);, +	}, +, +	@Test, +	public void testSetNotNullSerializationInclusion() {, +		factory.afterPropertiesSet();, +		assertTrue(factory.getObject().getSerializationConfig().getSerializationInclusion() == JsonInclude.Include.ALWAYS);, +, +		factory.setSerializationInclusion(JsonInclude.Include.NON_NULL);, +		factory.afterPropertiesSet();, +		assertTrue(factory.getObject().getSerializationConfig().getSerializationInclusion() == JsonInclude.Include.NON_NULL);, +	}, +, +	@Test, +	public void testSetNotDefaultSerializationInclusion() {, +		factory.afterPropertiesSet();, +		assertTrue(factory.getObject().getSerializationConfig().getSerializationInclusion() == JsonInclude.Include.ALWAYS);, +, +		factory.setSerializationInclusion(JsonInclude.Include.NON_DEFAULT);, +		factory.afterPropertiesSet();, +		assertTrue(factory.getObject().getSerializationConfig().getSerializationInclusion() == JsonInclude.Include.NON_DEFAULT);, +	}, +, +	@Test, +	public void testSetNotEmptySerializationInclusion() {, +		factory.afterPropertiesSet();, +		assertTrue(factory.getObject().getSerializationConfig().getSerializationInclusion() == JsonInclude.Include.ALWAYS);, +, +		factory.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);, +		factory.afterPropertiesSet();, +		assertTrue(factory.getObject().getSerializationConfig().getSerializationInclusion() == JsonInclude.Include.NON_EMPTY);, +		return ((BasicSerializerFactory) objectMapper.getSerializerFactory()).getFactoryConfig();, +		return ((BasicDeserializerFactory) objectMapper.getDeserializationContext().getFactory()).getFactoryConfig();, +		factory.setObjectMapper(objectMapper);, +		JsonSerializer serializer1 = new ClassSerializer();, +		JsonSerializer serializer2 = new NumberSerializer();, +, +		factory.setSerializers(serializer1);, +		factory.setSerializersByType(Collections.<Class<?>, JsonSerializer<?>> singletonMap(Boolean.class, serializer2));, +		factory.setDeserializersByType(deserializers);, +		factory.setAnnotationIntrospector(annotationIntrospector);, +]