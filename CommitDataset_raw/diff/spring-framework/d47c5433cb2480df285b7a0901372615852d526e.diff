[+++ b/spring-context-support/src/main/java/org/springframework/cache/guava/GuavaCacheManager.java, + * Copyright 2002-2014 the original author or authors., +import java.util.Map;, +import org.springframework.util.ObjectUtils;, + * @author Stephane Nicoll, +	 * <p>Calling this with a {@code null} collection argument resets the, +	 * mode to 'dynamic', allowing for further creation of caches again., +		else {, +			this.dynamic = true;, +		}, +		doSetCacheBuilder(cacheBuilder);, +		doSetCacheBuilder(CacheBuilder.from(cacheBuilderSpec));, +		doSetCacheBuilder(CacheBuilder.from(cacheSpecification));, +		if (!ObjectUtils.nullSafeEquals(this.cacheLoader, cacheLoader)) {, +			refreshKnownCaches();, +		}, +		if (this.allowNullValues != allowNullValues) {, +			refreshKnownCaches();, +		}, +	private void doSetCacheBuilder(CacheBuilder<Object, Object> cacheBuilder) {, +		if (!ObjectUtils.nullSafeEquals(this.cacheBuilder, cacheBuilder)) {, +			this.cacheBuilder = cacheBuilder;, +			refreshKnownCaches();, +		}, +	}, +, +	/**, +	 * Create the known caches again with the current state of this manager., +	 */, +	private void refreshKnownCaches() {, +		for (Map.Entry<String, Cache> entry : this.cacheMap.entrySet()) {, +			entry.setValue(createGuavaCache(entry.getKey()));, +		}, +	}, +, +++ b/spring-context-support/src/main/java/org/springframework/cache/guava/GuavaCacheManager.java, + * Copyright 2002-2014 the original author or authors., +import java.util.Map;, +import org.springframework.util.ObjectUtils;, + * @author Stephane Nicoll, +	 * <p>Calling this with a {@code null} collection argument resets the, +	 * mode to 'dynamic', allowing for further creation of caches again., +		else {, +			this.dynamic = true;, +		}, +		doSetCacheBuilder(cacheBuilder);, +		doSetCacheBuilder(CacheBuilder.from(cacheBuilderSpec));, +		doSetCacheBuilder(CacheBuilder.from(cacheSpecification));, +		if (!ObjectUtils.nullSafeEquals(this.cacheLoader, cacheLoader)) {, +			refreshKnownCaches();, +		}, +		if (this.allowNullValues != allowNullValues) {, +			refreshKnownCaches();, +		}, +	private void doSetCacheBuilder(CacheBuilder<Object, Object> cacheBuilder) {, +		if (!ObjectUtils.nullSafeEquals(this.cacheBuilder, cacheBuilder)) {, +			this.cacheBuilder = cacheBuilder;, +			refreshKnownCaches();, +		}, +	}, +, +	/**, +	 * Create the known caches again with the current state of this manager., +	 */, +	private void refreshKnownCaches() {, +		for (Map.Entry<String, Cache> entry : this.cacheMap.entrySet()) {, +			entry.setValue(createGuavaCache(entry.getKey()));, +		}, +	}, +, +++ b/spring-context-support/src/test/java/org/springframework/cache/guava/GuavaCacheManagerTests.java, + * Copyright 2002-2014 the original author or authors., +import com.google.common.cache.CacheBuilder;, +import com.google.common.cache.CacheLoader;, +import static org.mockito.Mockito.mock;, + * @author Stephane Nicoll, +		GuavaCacheManager cm = new GuavaCacheManager("c1", "c2");, +, +		cm.setAllowNullValues(false);, +		Cache cache1x = cm.getCache("c1");, +		assertTrue(cache1x instanceof GuavaCache);, +		assertTrue(cache1x != cache1);, +		Cache cache2x = cm.getCache("c2");, +		assertTrue(cache2x instanceof GuavaCache);, +		assertTrue(cache2x != cache2);, +		Cache cache3x = cm.getCache("c3");, +		assertNull(cache3x);, +, +		cache1x.put("key1", "value1");, +		assertEquals("value1", cache1x.get("key1").get());, +		cache1x.put("key2", 2);, +		assertEquals(2, cache1x.get("key2").get());, +		try {, +			cache1x.put("key3", null);, +			fail("Should have thrown NullPointerException");, +		}, +		catch (NullPointerException ex) {, +			// expected, +		}, +]