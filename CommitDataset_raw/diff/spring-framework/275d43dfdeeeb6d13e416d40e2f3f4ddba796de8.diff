[+++ /dev/null, +++ /dev/null, +++ b/org.springframework.core/src/test/java/org/springframework/core/env/PropertySourcesPropertyResolverTests.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.core.env;, +, +import static org.hamcrest.CoreMatchers.equalTo;, +import static org.hamcrest.CoreMatchers.is;, +import static org.hamcrest.CoreMatchers.nullValue;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.fail;, +, +import java.util.HashMap;, +import java.util.Map;, +import java.util.Properties;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.springframework.mock.env.MockPropertySource;, +, +/**, + * Unit tests for {@link PropertySourcesPropertyResolver}., + *, + * @author Chris Beams, + * @since 3.1, + */, +public class PropertySourcesPropertyResolverTests {, +	private Properties testProperties;, +	private MutablePropertySources propertySources;, +	private ConfigurablePropertyResolver propertyResolver;, +, +	@Before, +	public void setUp() {, +		propertySources = new MutablePropertySources();, +		propertyResolver = new PropertySourcesPropertyResolver(propertySources);, +		testProperties = new Properties();, +		propertySources.addFirst(new PropertiesPropertySource("testProperties", testProperties));, +	}, +, +	@Test, +	public void containsProperty() {, +		assertThat(propertyResolver.containsProperty("foo"), is(false));, +		testProperties.put("foo", "bar");, +		assertThat(propertyResolver.containsProperty("foo"), is(true));, +	}, +, +	@Test, +	public void getProperty() {, +		assertThat(propertyResolver.getProperty("foo"), nullValue());, +		testProperties.put("foo", "bar");, +		assertThat(propertyResolver.getProperty("foo"), is("bar"));, +	}, +, +	@Test, +	public void getProperty_propertySourceSearchOrderIsFIFO() {, +		MutablePropertySources sources = new MutablePropertySources();, +		PropertyResolver resolver = new PropertySourcesPropertyResolver(sources);, +		sources.addFirst(new MockPropertySource("ps1").withProperty("pName", "ps1Value"));, +		assertThat(resolver.getProperty("pName"), equalTo("ps1Value"));, +		sources.addFirst(new MockPropertySource("ps2").withProperty("pName", "ps2Value"));, +		assertThat(resolver.getProperty("pName"), equalTo("ps2Value"));, +		sources.addFirst(new MockPropertySource("ps3").withProperty("pName", "ps3Value"));, +		assertThat(resolver.getProperty("pName"), equalTo("ps3Value"));, +	}, +, +	@Test, +	public void getProperty_withExplicitNullValue() {, +		// java.util.Properties does not allow null values (because Hashtable does not), +		Map<String, Object> nullableProperties = new HashMap<String, Object>();, +		propertySources.addLast(new MapPropertySource("nullableProperties", nullableProperties));, +		nullableProperties.put("foo", null);, +		assertThat(propertyResolver.getProperty("foo"), nullValue());, +	}, +, +	@Test, +	public void getProperty_withStringArrayConversion() {, +		testProperties.put("foo", "bar,baz");, +		assertThat(propertyResolver.getProperty("foo", String[].class), equalTo(new String[] { "bar", "baz" }));, +	}, +, +, +	@Test, +	public void getProperty_withNonConvertibleTargetType() {, +		testProperties.put("foo", "bar");, +]