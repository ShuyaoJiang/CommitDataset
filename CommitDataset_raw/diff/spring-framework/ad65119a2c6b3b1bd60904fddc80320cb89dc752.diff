[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/ServletUriComponentsBuilder.java, +	 * Prepare a builder from the host, port, scheme, and context path of the, +	 * given HttpServletRequest., +		ServletUriComponentsBuilder builder = initFromRequest(request);, +		builder.replacePath(prependForwardedPrefix(request, request.getContextPath()));, +	 * servlet mapping of the given HttpServletRequest., +	 * Prepare a builder from the host, port, scheme, and path (but not the query), +	 * of the HttpServletRequest., +		ServletUriComponentsBuilder builder = initFromRequest(request);, +		builder.initPath(prependForwardedPrefix(request, request.getRequestURI()));, +		ServletUriComponentsBuilder builder = initFromRequest(request);, +		builder.initPath(prependForwardedPrefix(request, request.getRequestURI()));, +		builder.query(request.getQueryString());, +		return builder;, +	}, +, +	/**, +	 * Initialize a builder with a scheme, host,and port (but not path and query)., +	 */, +	private static ServletUriComponentsBuilder initFromRequest(HttpServletRequest request) {, +	private void initPath(String path) {, +		this.originalPath = path;, +		replacePath(path);, +	}, +, +, +	// Alternative methods relying on RequestContextHolder to find the request, +, +, +	 * Get the request through {@link RequestContextHolder}., +	 * Remove any path extension from the {@link HttpServletRequest#getRequestURI(), +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/ServletUriComponentsBuilder.java, +	 * Prepare a builder from the host, port, scheme, and context path of the, +	 * given HttpServletRequest., +		ServletUriComponentsBuilder builder = initFromRequest(request);, +		builder.replacePath(prependForwardedPrefix(request, request.getContextPath()));, +	 * servlet mapping of the given HttpServletRequest., +	 * Prepare a builder from the host, port, scheme, and path (but not the query), +	 * of the HttpServletRequest., +		ServletUriComponentsBuilder builder = initFromRequest(request);, +		builder.initPath(prependForwardedPrefix(request, request.getRequestURI()));, +		ServletUriComponentsBuilder builder = initFromRequest(request);, +		builder.initPath(prependForwardedPrefix(request, request.getRequestURI()));, +		builder.query(request.getQueryString());, +		return builder;, +	}, +, +	/**, +	 * Initialize a builder with a scheme, host,and port (but not path and query)., +	 */, +	private static ServletUriComponentsBuilder initFromRequest(HttpServletRequest request) {, +	private void initPath(String path) {, +		this.originalPath = path;, +		replacePath(path);, +	}, +, +, +	// Alternative methods relying on RequestContextHolder to find the request, +, +, +	 * Get the request through {@link RequestContextHolder}., +	 * Remove any path extension from the {@link HttpServletRequest#getRequestURI(), +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/support/ServletUriComponentsBuilderTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +, +		this.request.setRequestURI("/mvc-showcase/data/param");, +		this.request.setQueryString("foo=123");, +		String result = ServletUriComponentsBuilder.fromRequest(this.request).build().toUriString();, +		this.request.setRequestURI("/mvc-showcase/data/foo%20bar");, +		String result = ServletUriComponentsBuilder.fromRequest(this.request).build().toUriString();, +		this.request.setServerPort(8080);, +		String result = ServletUriComponentsBuilder.fromRequest(this.request).build().toUriString();, +		this.request.setScheme("https");, +		this.request.setServerPort(9043);, +		String result = ServletUriComponentsBuilder.fromRequest(this.request).build().toUriString();, +		this.request.setRequestURI("/mvc-showcase/data/param");, +		this.request.setQueryString("foo=123");, +		String result = ServletUriComponentsBuilder.fromRequestUri(this.request).build().toUriString();, +		this.request.addHeader("X-Forwarded-Host", "anotherHost");, +		this.request.setRequestURI("/mvc-showcase/data/param");, +		this.request.setQueryString("foo=123");, +		String result = ServletUriComponentsBuilder.fromRequest(this.request).build().toUriString();, +		this.request.addHeader("X-Forwarded-Host", "webtest.foo.bar.com:443");, +		this.request.setRequestURI("/mvc-showcase/data/param");, +		this.request.setQueryString("foo=123");, +		UriComponents result = ServletUriComponentsBuilder.fromRequest(this.request).build();, +		UriComponents result = ServletUriComponentsBuilder.fromRequest(this.request).build();, +		UriComponents result = ServletUriComponentsBuilder.fromRequest(this.request).build();, +		UriComponents result = ServletUriComponentsBuilder.fromRequest(this.request).build();, +		UriComponents result = ServletUriComponentsBuilder.fromRequest(this.request).build();, +		this.request.setRequestURI("/mvc-showcase/data/param");, +		this.request.setQueryString("foo=123");, +		String result = ServletUriComponentsBuilder.fromContextPath(this.request).build().toUriString();, +		this.request.addHeader("X-Forwarded-Prefix", "/prefix");, +		this.request.setContextPath("/mvc-showcase");, +		this.request.setRequestURI("/mvc-showcase/simple");, +		String result = ServletUriComponentsBuilder.fromContextPath(this.request).build().toUriString();, +		this.request.setRequestURI("/mvc-showcase/app/simple");, +		this.request.setServletPath("/app");]