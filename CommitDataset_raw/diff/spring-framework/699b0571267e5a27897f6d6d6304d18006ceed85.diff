[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseBodyResultHandler.java, +import org.springframework.http.HttpEntity;, + * <p>By default the order for this result handler is set to 100. As it detects, + * the presence of {@code @ResponseBody} it should be ordered after result, + * handlers that look for a specific return type. Note however that this handler, + * does recognize and explicitly ignores the {@code ResponseEntity} return type., +		ResolvableType returnType = result.getReturnValueType();, +		if (returnType.getSource() instanceof MethodParameter) {, +			MethodParameter parameter = (MethodParameter) returnType.getSource();, +			if (hasResponseBodyAnnotation(parameter) && !isHttpEntityType(returnType)) {, +				return true;, +			}, +	private boolean hasResponseBodyAnnotation(MethodParameter parameter) {, +		Class<?> containingClass = parameter.getContainingClass();, +		return (AnnotationUtils.findAnnotation(containingClass, ResponseBody.class) != null ||, +				parameter.getMethodAnnotation(ResponseBody.class) != null);, +	}, +, +	private boolean isHttpEntityType(ResolvableType returnType) {, +		if (HttpEntity.class.isAssignableFrom(returnType.getRawClass())) {, +			return true;, +		}, +		else if (getConversionService().canConvert(returnType.getRawClass(), Mono.class)) {, +			ResolvableType genericType = returnType.getGeneric(0);, +			if (HttpEntity.class.isAssignableFrom(genericType.getRawClass())) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/ResponseBodyResultHandler.java, +import org.springframework.http.HttpEntity;, + * <p>By default the order for this result handler is set to 100. As it detects, + * the presence of {@code @ResponseBody} it should be ordered after result, + * handlers that look for a specific return type. Note however that this handler, + * does recognize and explicitly ignores the {@code ResponseEntity} return type., +		ResolvableType returnType = result.getReturnValueType();, +		if (returnType.getSource() instanceof MethodParameter) {, +			MethodParameter parameter = (MethodParameter) returnType.getSource();, +			if (hasResponseBodyAnnotation(parameter) && !isHttpEntityType(returnType)) {, +				return true;, +			}, +	private boolean hasResponseBodyAnnotation(MethodParameter parameter) {, +		Class<?> containingClass = parameter.getContainingClass();, +		return (AnnotationUtils.findAnnotation(containingClass, ResponseBody.class) != null ||, +				parameter.getMethodAnnotation(ResponseBody.class) != null);, +	}, +, +	private boolean isHttpEntityType(ResolvableType returnType) {, +		if (HttpEntity.class.isAssignableFrom(returnType.getRawClass())) {, +			return true;, +		}, +		else if (getConversionService().canConvert(returnType.getRawClass(), Mono.class)) {, +			ResolvableType genericType = returnType.getGeneric(0);, +			if (HttpEntity.class.isAssignableFrom(genericType.getRawClass())) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/ResponseBodyResultHandlerTests.java, +import reactor.core.publisher.Mono;, +import org.springframework.http.ResponseEntity;, +		Object controller = new TestController();, +		testSupports(controller, "handleToString", true);, +		controller = new TestRestController();, +		testSupports(controller, "handleToString", true);, +		testSupports(controller, "handleToResponseEntity", false);, +		testSupports(controller, "handleToMonoResponseEntity", false);, +		public String handleToString() {, +		public ResponseEntity<String> handleToResponseEntity() {, +			return null;, +		}, +, +		public Mono<ResponseEntity<String>> handleToMonoResponseEntity() {, +		public String handleToString() {]