[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +import java.util.function.BiFunction;, +import java.util.function.Supplier;, +import org.springframework.http.HttpRequest;, +			return new DefaultResponseSpec(exchange(), this::createRequest);, +		}, +, +		private HttpRequest createRequest() {, +			return new HttpRequest() {, +, +				private HttpHeaders headers = initHeaders();, +, +, +				@Override, +				public HttpMethod getMethod() {, +					return httpMethod;, +				}, +, +				@Override, +				public String getMethodValue() {, +					return httpMethod.name();, +				}, +, +				@Override, +				public URI getURI() {, +					return uri;, +				}, +, +				@Override, +				public HttpHeaders getHeaders() {, +					return headers;, +				}, +			};, +		private final Supplier<HttpRequest> requestSupplier;, +, +		DefaultResponseSpec(Mono<ClientResponse> responseMono,, +				Supplier<HttpRequest> requestSupplier) {, +			this.requestSupplier = requestSupplier;, +			this.statusHandlers.add(new StatusHandler(statusPredicate,, +					(clientResponse, request) -> exceptionFunction.apply(clientResponse)));, +						HttpRequest request = this.requestSupplier.get();, +						Mono<? extends Throwable> exMono = handler.apply(response, request);, +				return errorFunction.apply(createResponseException(response,, +						this.requestSupplier.get()));, +		private static Mono<WebClientResponseException> createResponseException(ClientResponse response,, +				HttpRequest request) {, +									charset,, +									request);, +									charset,, +									request);, +			private final BiFunction<ClientResponse, HttpRequest, Mono<? extends Throwable>> exceptionFunction;, +					BiFunction<ClientResponse, HttpRequest, Mono<? extends Throwable>> exceptionFunction) {, +			public Mono<? extends Throwable> apply(ClientResponse response, HttpRequest request) {, +				return this.exceptionFunction.apply(response, request);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +import java.util.function.BiFunction;, +import java.util.function.Supplier;, +import org.springframework.http.HttpRequest;, +			return new DefaultResponseSpec(exchange(), this::createRequest);, +		}, +, +		private HttpRequest createRequest() {, +			return new HttpRequest() {, +, +				private HttpHeaders headers = initHeaders();, +, +, +				@Override, +				public HttpMethod getMethod() {, +					return httpMethod;, +				}, +, +				@Override, +				public String getMethodValue() {, +					return httpMethod.name();, +				}, +, +				@Override, +				public URI getURI() {, +					return uri;, +				}, +, +				@Override, +				public HttpHeaders getHeaders() {, +					return headers;, +				}, +			};, +		private final Supplier<HttpRequest> requestSupplier;, +, +		DefaultResponseSpec(Mono<ClientResponse> responseMono,, +				Supplier<HttpRequest> requestSupplier) {, +			this.requestSupplier = requestSupplier;, +			this.statusHandlers.add(new StatusHandler(statusPredicate,, +					(clientResponse, request) -> exceptionFunction.apply(clientResponse)));, +						HttpRequest request = this.requestSupplier.get();, +						Mono<? extends Throwable> exMono = handler.apply(response, request);, +				return errorFunction.apply(createResponseException(response,, +						this.requestSupplier.get()));, +		private static Mono<WebClientResponseException> createResponseException(ClientResponse response,, +				HttpRequest request) {]