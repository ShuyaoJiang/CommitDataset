[+++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +			new ConcurrentLruCache<>(64, MimeTypeUtils::parseMimeTypeInternal);, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +			new ConcurrentLruCache<>(64, MimeTypeUtils::parseMimeTypeInternal);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/ProducesRequestCondition.java, +	private static final String MEDIA_TYPES_ATTRIBUTE = ProducesRequestCondition.class.getName() + ".MEDIA_TYPES";, +, +		List<MediaType> result = exchange.getAttribute(MEDIA_TYPES_ATTRIBUTE);, +		if (result == null) {, +			result = this.contentTypeResolver.resolveMediaTypes(exchange);, +			exchange.getAttributes().put(MEDIA_TYPES_ATTRIBUTE, result);, +		}, +		return result;, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +			new ConcurrentLruCache<>(64, MimeTypeUtils::parseMimeTypeInternal);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/ProducesRequestCondition.java, +	private static final String MEDIA_TYPES_ATTRIBUTE = ProducesRequestCondition.class.getName() + ".MEDIA_TYPES";, +, +		List<MediaType> result = exchange.getAttribute(MEDIA_TYPES_ATTRIBUTE);, +		if (result == null) {, +			result = this.contentTypeResolver.resolveMediaTypes(exchange);, +			exchange.getAttributes().put(MEDIA_TYPES_ATTRIBUTE, result);, +		}, +		return result;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.java, +		// Common media types are cached at the level of MimeTypeUtils, +, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +			new ConcurrentLruCache<>(64, MimeTypeUtils::parseMimeTypeInternal);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/ProducesRequestCondition.java, +	private static final String MEDIA_TYPES_ATTRIBUTE = ProducesRequestCondition.class.getName() + ".MEDIA_TYPES";, +, +		List<MediaType> result = exchange.getAttribute(MEDIA_TYPES_ATTRIBUTE);, +		if (result == null) {, +			result = this.contentTypeResolver.resolveMediaTypes(exchange);, +			exchange.getAttributes().put(MEDIA_TYPES_ATTRIBUTE, result);, +		}, +		return result;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.java, +		// Common media types are cached at the level of MimeTypeUtils, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ProducesRequestCondition.java, +	private static final String MEDIA_TYPES_ATTRIBUTE = ProducesRequestCondition.class.getName() + ".MEDIA_TYPES";, +, +	@SuppressWarnings("unchecked"), +	private List<MediaType> getAcceptedMediaTypes(HttpServletRequest request), +			throws HttpMediaTypeNotAcceptableException {, +, +		List<MediaType> result = (List<MediaType>) request.getAttribute(MEDIA_TYPES_ATTRIBUTE);, +		if (result == null) {, +			result = this.contentNegotiationManager.resolveMediaTypes(new ServletWebRequest(request));, +			request.setAttribute(MEDIA_TYPES_ATTRIBUTE, result);, +		}, +		return result;]