[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ResourceWebHandler.java, +import org.springframework.web.server.ResponseStatusException;, +	private static final ResponseStatusException NOT_FOUND_EXCEPTION =, +			new ResponseStatusException(HttpStatus.NOT_FOUND);, +	private static final Log logger = LogFactory.getLog(ResourceWebHandler.class);, +					return Mono.error(NOT_FOUND_EXCEPTION);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ResourceWebHandler.java, +import org.springframework.web.server.ResponseStatusException;, +	private static final ResponseStatusException NOT_FOUND_EXCEPTION =, +			new ResponseStatusException(HttpStatus.NOT_FOUND);, +	private static final Log logger = LogFactory.getLog(ResourceWebHandler.class);, +					return Mono.error(NOT_FOUND_EXCEPTION);, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/resource/ResourceWebHandlerTests.java, +import org.springframework.web.server.ResponseStatusException;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.junit.Assert.assertThat;, +		StepVerifier.create(this.handler.handle(exchange)), +				.expectErrorSatisfies(err -> {, +					assertThat(err, instanceOf(ResponseStatusException.class));, +					assertEquals(HttpStatus.NOT_FOUND, ((ResponseStatusException) err).getStatus());, +				}).verify(TIMEOUT);, +		StepVerifier.create(this.handler.handle(exchange)), +				.expectErrorSatisfies(err -> {, +					assertThat(err, instanceOf(ResponseStatusException.class));, +					assertEquals(HttpStatus.NOT_FOUND, ((ResponseStatusException) err).getStatus());, +				}).verify(TIMEOUT);, +		StepVerifier.create(this.handler.handle(exchange)), +				.expectErrorSatisfies(err -> {, +					assertThat(err, instanceOf(ResponseStatusException.class));, +					assertEquals(HttpStatus.NOT_FOUND, ((ResponseStatusException) err).getStatus());, +				}).verify(TIMEOUT);, +		StepVerifier.create(this.handler.handle(exchange)), +				.expectErrorSatisfies(err -> {, +					assertThat(err, instanceOf(ResponseStatusException.class));, +					assertEquals(HttpStatus.NOT_FOUND, ((ResponseStatusException) err).getStatus());, +				}).verify(TIMEOUT);]