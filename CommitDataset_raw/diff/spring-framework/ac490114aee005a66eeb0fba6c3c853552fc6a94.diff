[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanTypeDescriptor.java, +	 * @param propertyDescriptor the corresponding JavaBean PropertyDescriptor, +	 */, +	public BeanTypeDescriptor(PropertyDescriptor propertyDescriptor) {, +		super(BeanUtils.getWriteMethodParameter(propertyDescriptor));, +		this.propertyDescriptor = propertyDescriptor;, +	}, +, +	/**, +	 * Create a new BeanTypeDescriptor for the given bean property., +	/**, +	 * Return the underlying PropertyDescriptor., +	 */, +	public PropertyDescriptor getPropertyDescriptor() {, +		return this.propertyDescriptor;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanTypeDescriptor.java, +	 * @param propertyDescriptor the corresponding JavaBean PropertyDescriptor, +	 */, +	public BeanTypeDescriptor(PropertyDescriptor propertyDescriptor) {, +		super(BeanUtils.getWriteMethodParameter(propertyDescriptor));, +		this.propertyDescriptor = propertyDescriptor;, +	}, +, +	/**, +	 * Create a new BeanTypeDescriptor for the given bean property., +	/**, +	 * Return the underlying PropertyDescriptor., +	 */, +	public PropertyDescriptor getPropertyDescriptor() {, +		return this.propertyDescriptor;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +, +							propertyName, oldValue, pv.getValue(), mapValueType,, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanTypeDescriptor.java, +	 * @param propertyDescriptor the corresponding JavaBean PropertyDescriptor, +	 */, +	public BeanTypeDescriptor(PropertyDescriptor propertyDescriptor) {, +		super(BeanUtils.getWriteMethodParameter(propertyDescriptor));, +		this.propertyDescriptor = propertyDescriptor;, +	}, +, +	/**, +	 * Create a new BeanTypeDescriptor for the given bean property., +	/**, +	 * Return the underlying PropertyDescriptor., +	 */, +	public PropertyDescriptor getPropertyDescriptor() {, +		return this.propertyDescriptor;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +, +							propertyName, oldValue, pv.getValue(), mapValueType,, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/DirectFieldAccessor.java, +			Object convertedValue = this.typeConverterDelegate.convertIfNecessary(oldValue, newValue, field);, +	public <T> T convertIfNecessary(, +			Object value, Class<T> requiredType, MethodParameter methodParam) throws TypeMismatchException {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanTypeDescriptor.java, +	 * @param propertyDescriptor the corresponding JavaBean PropertyDescriptor, +	 */, +	public BeanTypeDescriptor(PropertyDescriptor propertyDescriptor) {, +		super(BeanUtils.getWriteMethodParameter(propertyDescriptor));, +		this.propertyDescriptor = propertyDescriptor;, +	}, +, +	/**, +	 * Create a new BeanTypeDescriptor for the given bean property., +	/**, +	 * Return the underlying PropertyDescriptor., +	 */, +	public PropertyDescriptor getPropertyDescriptor() {, +		return this.propertyDescriptor;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +, +							propertyName, oldValue, pv.getValue(), mapValueType,, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/DirectFieldAccessor.java, +			Object convertedValue = this.typeConverterDelegate.convertIfNecessary(oldValue, newValue, field);, +	public <T> T convertIfNecessary(, +			Object value, Class<T> requiredType, MethodParameter methodParam) throws TypeMismatchException {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +		return convertIfNecessary(null, null, newValue, requiredType, TypeDescriptor.valueOf(requiredType));, +		return convertIfNecessary(null, null, newValue, requiredType,, +				(methodParam != null ? new TypeDescriptor(methodParam) : TypeDescriptor.valueOf(requiredType)));, +		return convertIfNecessary(propertyName, oldValue, newValue, requiredType, TypeDescriptor.valueOf(requiredType));, +	}, +, +	/**, +	 * Convert the value to the required type (if necessary from a String),, +	 * for the specified property., +	 * @param propertyName name of the property, +	 * @param oldValue the previous value, if available (may be <code>null</code>), +	 * @param newValue the proposed new value, +	 * @param requiredType the type we must convert to, +	 * (or <code>null</code> if not known, for example in case of a collection element)]