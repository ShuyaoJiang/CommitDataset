[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java, +				if (endIndex == -1) {, +					throw new IllegalArgumentException("Invalid charset syntax in location: " + location);, +				}, +				if (!(resource instanceof UrlResource)) {, +					throw new IllegalArgumentException("Unexpected charset for non-UrlResource: " + resource);, +				}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java, +				if (endIndex == -1) {, +					throw new IllegalArgumentException("Invalid charset syntax in location: " + location);, +				}, +				if (!(resource instanceof UrlResource)) {, +					throw new IllegalArgumentException("Unexpected charset for non-UrlResource: " + resource);, +				}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +	private void registerUrlProvider(ParserContext context, @Nullable Object source) {, +		if (!context.getRegistry().containsBeanDefinition(RESOURCE_URL_PROVIDER)) {, +			context.getRegistry().registerBeanDefinition(RESOURCE_URL_PROVIDER, urlProvider);, +			context.registerComponent(new BeanComponentDefinition(urlProvider, RESOURCE_URL_PROVIDER));, +			String mappedInterceptorName = context.getReaderContext().registerWithGeneratedName(mappedInterceptor);, +			context.registerComponent(new BeanComponentDefinition(mappedInterceptor, mappedInterceptorName));, +		if (context.getRegistry() instanceof ConfigurableBeanFactory) {, +			ConfigurableBeanFactory cbf = ((ConfigurableBeanFactory) context.getRegistry());, +			for (int i = 0; i < locationValues.length; i++) {, +				locationValues[i] = cbf.resolveEmbeddedValue(locationValues[i]);, +			}, +		}, +, +	private void parseResourceChain(, +			RootBeanDefinition resourceHandlerDef, ParserContext context, Element element, @Nullable Object source) {, +, +		String autoRegistration = element.getAttribute("auto-registration");, +		boolean isAutoRegistration = !(StringUtils.hasText(autoRegistration) && "false".equals(autoRegistration));, +, +		ManagedList<? super Object> resourceResolvers = new ManagedList<>();, +		resourceResolvers.setSource(source);, +		ManagedList<? super Object> resourceTransformers = new ManagedList<>();, +		resourceTransformers.setSource(source);, +, +		parseResourceCache(resourceResolvers, resourceTransformers, element, source);, +		parseResourceResolversTransformers(, +				isAutoRegistration, resourceResolvers, resourceTransformers, context, element, source);, +, +		if (!resourceResolvers.isEmpty()) {, +			resourceHandlerDef.getPropertyValues().add("resourceResolvers", resourceResolvers);, +		}, +		if (!resourceTransformers.isEmpty()) {, +			resourceHandlerDef.getPropertyValues().add("resourceTransformers", resourceTransformers);, +		}, +	}, +, +			ParserContext context, Element element, @Nullable Object source) {, +					RootBeanDefinition versionResolverDef = parseVersionResolver(context, beanElement, source);, +					Object object = context.getDelegate().parsePropertySubElement(beanElement, null);, +				Object object = context.getDelegate().parsePropertySubElement(beanElement, null);, +	private RootBeanDefinition parseVersionResolver(ParserContext context, Element element, @Nullable Object source) {, +				strategy = context.getDelegate().parsePropertySubElement(childElement, null);]