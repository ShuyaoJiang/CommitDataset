[+++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java, +			URL rootDirURL = rootDirResource.getURL();, +			if (equinoxResolveMethod != null) {, +				if (rootDirURL.getProtocol().startsWith("bundle")) {, +					rootDirURL = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirURL);, +					rootDirResource = new UrlResource(rootDirURL);, +			}, +			if (rootDirURL.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {, +				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirURL, subPattern, getPathMatcher()));, +			}, +			else if (ResourceUtils.isJarURL(rootDirURL) || isJarResource(rootDirResource)) {, +				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirURL, subPattern));, +	 * <p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be, +	 * resolved into a standard jar file URL that be traversed using Spring's, +	 * standard jar file traversal algorithm. For any preceding custom resolution,, +	 * override this method and replace the resource handle accordingly., +	 * <p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar", +	 * will be treated as jar resources. This template method allows for, +	 * detecting further kinds of jar-like resources, e.g. through, +	 * {@code instanceof} checks on the resource handle type., +		return false;, +	 * @param rootDirURL the pre-resolved root directory URL, +	 * @since 4.3, +	@SuppressWarnings("deprecation"), +	protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern), +		// Check deprecated variant for potential overriding first..., +		Set<Resource> result = doFindPathMatchingJarResources(rootDirResource, subPattern);, +		if (result != null) {, +			return result;, +		}, +, +		URLConnection con = rootDirURL.openConnection();, +			String urlFile = rootDirURL.getFile();, +			result = new LinkedHashSet<Resource>(8);, +	 * Find all resources in jar files that match the given location pattern, +	 * via the Ant-style PathMatcher., +	 * @param rootDirResource the root directory as Resource, +	 * @param subPattern the sub pattern to match (below the root directory), +	 * @return a mutable Set of matching Resource instances, +	 * @throws IOException in case of I/O errors, +	 * @deprecated as of Spring 4.3, in favor of, +	 * {@link #doFindPathMatchingJarResources(Resource, URL, String)}, +	 */, +	@Deprecated, +	protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern), +			throws IOException {, +, +		return null;, +	}, +, +	/**, +				URL rootDirURL, String locationPattern, PathMatcher pathMatcher) throws IOException {, +, +			Object root = VfsPatternUtils.findRoot(rootDirURL);]