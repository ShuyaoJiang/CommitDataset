[+++ b/spring-orm-hibernate4/src/test/java/org/springframework/orm/jpa/jpa21/PersistenceContextTransactionTests.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.orm.jpa.jpa21;, +, +import javax.persistence.EntityManager;, +import javax.persistence.EntityManagerFactory;, +import javax.persistence.EntityTransaction;, +import javax.persistence.PersistenceContext;, +import javax.persistence.PersistenceContextType;, +import javax.persistence.SynchronizationType;, +, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +, +import org.springframework.orm.jpa.JpaTransactionManager;, +import org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor;, +import org.springframework.transaction.TransactionDefinition;, +import org.springframework.transaction.TransactionStatus;, +import org.springframework.transaction.support.TransactionCallback;, +import org.springframework.transaction.support.TransactionSynchronizationManager;, +import org.springframework.transaction.support.TransactionTemplate;, +, +import static org.junit.Assert.*;, +import static org.mockito.BDDMockito.*;, +, +/**, + * Copy of {@link org.springframework.orm.jpa.support.PersistenceContextTransactionTests},, + * here to be tested against JPA 2.1, including unsynchronized persistence contexts., + *, + * @author Juergen Hoeller, + * @since 4.1.2, + */, +public class PersistenceContextTransactionTests {, +, +	private EntityManagerFactory factory;, +, +	private EntityManager manager;, +, +	private EntityTransaction tx;, +, +	private TransactionTemplate tt;, +, +	private EntityManagerHoldingBean bean;, +, +, +	@Before, +	public void setUp() throws Exception {, +		factory = mock(EntityManagerFactory.class);, +		manager = mock(EntityManager.class);, +		tx = mock(EntityTransaction.class);, +, +		JpaTransactionManager tm = new JpaTransactionManager(factory);, +		tt = new TransactionTemplate(tm);, +, +		given(factory.createEntityManager()).willReturn(manager);, +		given(manager.getTransaction()).willReturn(tx);, +		given(manager.isOpen()).willReturn(true);, +, +		bean = new EntityManagerHoldingBean();, +		PersistenceAnnotationBeanPostProcessor pabpp = new PersistenceAnnotationBeanPostProcessor() {, +			@Override, +			protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) {, +				return factory;, +			}, +		};, +		pabpp.postProcessPropertyValues(null, null, bean, "bean");, +, +		assertTrue(TransactionSynchronizationManager.getResourceMap().isEmpty());, +		assertFalse(TransactionSynchronizationManager.isSynchronizationActive());, +	}, +, +	@After, +	public void tearDown() throws Exception {, +		assertTrue(TransactionSynchronizationManager.getResourceMap().isEmpty());, +		assertFalse(TransactionSynchronizationManager.isSynchronizationActive());, +		assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());, +		assertFalse(TransactionSynchronizationManager.isActualTransactionActive());, +	}, +, +, +	@Test, +	public void testTransactionCommitWithSharedEntityManager() {, +		given(manager.getTransaction()).willReturn(tx);, +]