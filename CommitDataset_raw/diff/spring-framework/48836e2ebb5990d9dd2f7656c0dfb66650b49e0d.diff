[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, + * Copyright 2002-2011 the original author or authors., + * @author Chris Beams, +		class Holder { Class<?> value = null; }, +		final Holder objectType = new Holder();, +		final String factoryMethodName = mbd.getFactoryMethodName();, +				// find the given factory method, taking into account that in the case of, +				// @Bean methods, there may be parameters present., +				ReflectionUtils.doWithMethods(fbClass,, +					new ReflectionUtils.MethodCallback() {, +						public void doWith(Method method) throws IllegalArgumentException, IllegalAccessException {, +							if (method.getName().equals(factoryMethodName) &&, +									FactoryBean.class.isAssignableFrom(method.getReturnType())) {, +								objectType.value = GenericTypeResolver.resolveReturnTypeArgument(method, FactoryBean.class);, +							}, +						}, +					});, +				if (objectType.value != null) {, +					return objectType.value;, +			objectType.value = getTypeForFactoryBean(fb);, +			if (objectType.value != null) {, +				return objectType.value;, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, + * Copyright 2002-2011 the original author or authors., + * @author Chris Beams, +		class Holder { Class<?> value = null; }, +		final Holder objectType = new Holder();, +		final String factoryMethodName = mbd.getFactoryMethodName();, +				// find the given factory method, taking into account that in the case of, +				// @Bean methods, there may be parameters present., +				ReflectionUtils.doWithMethods(fbClass,, +					new ReflectionUtils.MethodCallback() {, +						public void doWith(Method method) throws IllegalArgumentException, IllegalAccessException {, +							if (method.getName().equals(factoryMethodName) &&, +									FactoryBean.class.isAssignableFrom(method.getReturnType())) {, +								objectType.value = GenericTypeResolver.resolveReturnTypeArgument(method, FactoryBean.class);, +							}, +						}, +					});, +				if (objectType.value != null) {, +					return objectType.value;, +			objectType.value = getTypeForFactoryBean(fb);, +			if (objectType.value != null) {, +				return objectType.value;, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/ConfigurationWithFactoryBeanAndParametersTests.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.context.annotation;, +, +import static org.junit.Assert.assertNotNull;, +, +import org.junit.Test;, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.beans.factory.annotation.Value;, +import org.springframework.context.ApplicationContext;, +, +, +/**, + * Test case cornering the bug initially raised with SPR-8762, in which a, + * NullPointerException would be raised if a FactoryBean-returning @Bean method also, + * accepts parameters, + *, + * @author Chris Beams, + * @since 3.1, + */, +public class ConfigurationWithFactoryBeanAndParametersTests {, +	@Test, +	public void test() {, +		ApplicationContext ctx = new AnnotationConfigApplicationContext(Config.class, Bar.class);, +		assertNotNull(ctx.getBean(Bar.class).foo);, +	}, +}, +, +@Configuration, +class Config {, +	@Bean, +	public FactoryBean<Foo> fb(@Value("42") String answer) {, +		return new FooFactoryBean();, +	}, +}, +, +class Foo {, +}, +, +class Bar {]