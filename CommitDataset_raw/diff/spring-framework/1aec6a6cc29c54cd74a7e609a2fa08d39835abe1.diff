[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			RootBeanDefinition beanDefinition = getRootBeanDefinition(this.instancesToBeanNames.get(obj));, +			if (beanDefinition == null) {, +				return null;, +			}, +			List<Object> sources = new ArrayList<Object>();, +			Method factoryMethod = beanDefinition.getResolvedFactoryMethod();, +			if (factoryMethod != null) {, +				sources.add(factoryMethod);, +			}, +			Class<?> targetType = beanDefinition.getTargetType();, +			if (targetType != null && !targetType.equals(obj.getClass())) {, +				sources.add(targetType);, +			}, +			return sources.toArray(new Object[sources.size()]);, +		private RootBeanDefinition getRootBeanDefinition(String beanName) {, +					return (RootBeanDefinition) bd;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			RootBeanDefinition beanDefinition = getRootBeanDefinition(this.instancesToBeanNames.get(obj));, +			if (beanDefinition == null) {, +				return null;, +			}, +			List<Object> sources = new ArrayList<Object>();, +			Method factoryMethod = beanDefinition.getResolvedFactoryMethod();, +			if (factoryMethod != null) {, +				sources.add(factoryMethod);, +			}, +			Class<?> targetType = beanDefinition.getTargetType();, +			if (targetType != null && !targetType.equals(obj.getClass())) {, +				sources.add(targetType);, +			}, +			return sources.toArray(new Object[sources.size()]);, +		private RootBeanDefinition getRootBeanDefinition(String beanName) {, +					return (RootBeanDefinition) bd;, +++ b/spring-context/src/test/java/org/springframework/context/annotation/Spr12636Tests.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.context.annotation;, +, +import java.util.List;, +, +import org.junit.After;, +import org.junit.Test;, +, +import org.springframework.aop.support.AopUtils;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.context.ConfigurableApplicationContext;, +import org.springframework.core.annotation.Order;, +import org.springframework.scheduling.annotation.Async;, +import org.springframework.scheduling.annotation.EnableAsync;, +import org.springframework.stereotype.Component;, +, +import static org.junit.Assert.*;, +, +/**, + * @author Stephane Nicoll, + */, +public class Spr12636Tests {, +, +	private ConfigurableApplicationContext context;, +, +	@After, +	public void closeContext() {, +		if (this.context != null) {, +			this.context.close();, +		}, +	}, +, +	@Test, +	public void orderOnImplementation() {, +		this.context = new AnnotationConfigApplicationContext(, +				UserServiceTwo.class, UserServiceOne.class, UserServiceCollector.class);, +		UserServiceCollector bean = this.context.getBean(UserServiceCollector.class);, +		assertSame(context.getBean("serviceOne", UserService.class), bean.userServices.get(0));, +		assertSame(context.getBean("serviceTwo", UserService.class), bean.userServices.get(1));, +, +	}, +, +	@Test, +	public void orderOnImplementationWithProxy() {, +		this.context = new AnnotationConfigApplicationContext(, +				UserServiceTwo.class, UserServiceOne.class, UserServiceCollector.class, AsyncConfig.class);, +, +		// Validate those beans are indeed wrapped by a proxy, +		UserService serviceOne = this.context.getBean("serviceOne", UserService.class);, +		UserService serviceTwo = this.context.getBean("serviceTwo", UserService.class);]