[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.web.socket.WebSocketHandler;, +import org.springframework.web.socket.handler.WebSocketHandlerDecoratorFactory;, +	public static final String WEB_SOCKET_HANDLER_BEAN_NAME = "subProtocolWebSocketHandler";, +, +	public static final String SOCKJS_SCHEDULER_BEAN_NAME = "messageBrokerSockJsScheduler";, +		registerWebSocketMessageBrokerStats(broker, inChannel, outChannel, context, source);, +		RootBeanDefinition handlerDef = new RootBeanDefinition(SubProtocolWebSocketHandler.class, cavs, null);, +		handlerDef.getPropertyValues().addPropertyValue("protocolHandlers", stompHandlerDef);, +		registerBeanDefByName(WEB_SOCKET_HANDLER_BEAN_NAME, handlerDef, context, source);, +		RuntimeBeanReference result = new RuntimeBeanReference(WEB_SOCKET_HANDLER_BEAN_NAME);, +				handlerDef.getPropertyValues().add("sendTimeLimit", transportElem.getAttribute("send-timeout"));, +				handlerDef.getPropertyValues().add("sendBufferSizeLimit", transportElem.getAttribute("send-buffer-size"));, +			}, +			Element factoriesElement = DomUtils.getChildElementByTagName(transportElem, "decorator-factories");, +			if (factoriesElement != null) {, +				ManagedList<Object> factories = extractBeanSubElements(factoriesElement, context);, +				RootBeanDefinition factoryBean = new RootBeanDefinition(DecoratingFactoryBean.class);, +				factoryBean.getConstructorArgumentValues().addIndexedArgumentValue(0, handlerDef);, +				factoryBean.getConstructorArgumentValues().addIndexedArgumentValue(1, factories);, +				result = new RuntimeBeanReference(registerBeanDef(factoryBean, context, source));, +		return result;, +	private void registerWebSocketMessageBrokerStats(RootBeanDefinition broker, RuntimeBeanReference inChannel,, +			RuntimeBeanReference outChannel, ParserContext context, Object source) {, +, +		RuntimeBeanReference webSocketHandler = new RuntimeBeanReference(WEB_SOCKET_HANDLER_BEAN_NAME);, +		beanDef.getPropertyValues().add("subProtocolWebSocketHandler", webSocketHandler);, +, +	private static class DecoratingFactoryBean implements FactoryBean<WebSocketHandler> {, +, +		private final WebSocketHandler handler;, +, +		private final List<WebSocketHandlerDecoratorFactory> factories;, +, +, +		private DecoratingFactoryBean(WebSocketHandler handler, List<WebSocketHandlerDecoratorFactory> factories) {, +			this.handler = handler;, +			this.factories = factories;, +		}, +, +		@Override, +		public WebSocketHandler getObject() throws Exception {, +			WebSocketHandler result = this.handler;, +			for (WebSocketHandlerDecoratorFactory factory : this.factories) {, +				result = factory.decorate(result);, +			}, +			return result;, +		}, +, +		@Override, +		public Class<?> getObjectType() {, +			return WebSocketHandler.class;, +		}, +, +		@Override, +		public boolean isSingleton() {, +			return true;, +		}, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.web.socket.WebSocketHandler;, +import org.springframework.web.socket.handler.WebSocketHandlerDecoratorFactory;, +	public static final String WEB_SOCKET_HANDLER_BEAN_NAME = "subProtocolWebSocketHandler";, +, +	public static final String SOCKJS_SCHEDULER_BEAN_NAME = "messageBrokerSockJsScheduler";, +		registerWebSocketMessageBrokerStats(broker, inChannel, outChannel, context, source);, +		RootBeanDefinition handlerDef = new RootBeanDefinition(SubProtocolWebSocketHandler.class, cavs, null);, +		handlerDef.getPropertyValues().addPropertyValue("protocolHandlers", stompHandlerDef);, +		registerBeanDefByName(WEB_SOCKET_HANDLER_BEAN_NAME, handlerDef, context, source);, +		RuntimeBeanReference result = new RuntimeBeanReference(WEB_SOCKET_HANDLER_BEAN_NAME);, +				handlerDef.getPropertyValues().add("sendTimeLimit", transportElem.getAttribute("send-timeout"));, +				handlerDef.getPropertyValues().add("sendBufferSizeLimit", transportElem.getAttribute("send-buffer-size"));, +			}, +			Element factoriesElement = DomUtils.getChildElementByTagName(transportElem, "decorator-factories");, +			if (factoriesElement != null) {, +				ManagedList<Object> factories = extractBeanSubElements(factoriesElement, context);, +				RootBeanDefinition factoryBean = new RootBeanDefinition(DecoratingFactoryBean.class);, +				factoryBean.getConstructorArgumentValues().addIndexedArgumentValue(0, handlerDef);, +				factoryBean.getConstructorArgumentValues().addIndexedArgumentValue(1, factories);, +				result = new RuntimeBeanReference(registerBeanDef(factoryBean, context, source));, +		return result;, +	private void registerWebSocketMessageBrokerStats(RootBeanDefinition broker, RuntimeBeanReference inChannel,, +			RuntimeBeanReference outChannel, ParserContext context, Object source) {, +, +		RuntimeBeanReference webSocketHandler = new RuntimeBeanReference(WEB_SOCKET_HANDLER_BEAN_NAME);, +		beanDef.getPropertyValues().add("subProtocolWebSocketHandler", webSocketHandler);, +, +	private static class DecoratingFactoryBean implements FactoryBean<WebSocketHandler> {, +, +		private final WebSocketHandler handler;, +, +		private final List<WebSocketHandlerDecoratorFactory> factories;, +, +, +		private DecoratingFactoryBean(WebSocketHandler handler, List<WebSocketHandlerDecoratorFactory> factories) {, +			this.handler = handler;, +			this.factories = factories;]