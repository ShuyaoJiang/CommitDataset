[+++ b/build.gradle, +		optional("org.eclipse.jetty:jetty-webapp:9.0.1.v20130408") {, +			exclude group: "org.eclipse.jetty.orbit", module: "javax.servlet", +		}, +		optional("org.eclipse.jetty.websocket:websocket-server:9.0.1.v20130408"), +, +++ b/build.gradle, +		optional("org.eclipse.jetty:jetty-webapp:9.0.1.v20130408") {, +			exclude group: "org.eclipse.jetty.orbit", module: "javax.servlet", +		}, +		optional("org.eclipse.jetty.websocket:websocket-server:9.0.1.v20130408"), +, +++ b/spring-websocket/src/main/java/org/springframework/websocket/server/DefaultHandshakeHandler.java, +		private static final boolean jettyWebSocketPresent = ClassUtils.isPresent(, +				"org.eclipse.jetty.websocket.server.UpgradeContext", DefaultHandshakeHandler.class.getClassLoader());, +			else if (jettyWebSocketPresent) {, +				className = "org.springframework.websocket.server.support.JettyRequestUpgradeStrategy";, +			}, +++ b/build.gradle, +		optional("org.eclipse.jetty:jetty-webapp:9.0.1.v20130408") {, +			exclude group: "org.eclipse.jetty.orbit", module: "javax.servlet", +		}, +		optional("org.eclipse.jetty.websocket:websocket-server:9.0.1.v20130408"), +, +++ b/spring-websocket/src/main/java/org/springframework/websocket/server/DefaultHandshakeHandler.java, +		private static final boolean jettyWebSocketPresent = ClassUtils.isPresent(, +				"org.eclipse.jetty.websocket.server.UpgradeContext", DefaultHandshakeHandler.class.getClassLoader());, +			else if (jettyWebSocketPresent) {, +				className = "org.springframework.websocket.server.support.JettyRequestUpgradeStrategy";, +			}, +++ b/spring-websocket/src/main/java/org/springframework/websocket/server/support/JettyRequestUpgradeStrategy.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.websocket.server.support;, +, +import java.io.IOException;, +import java.net.URI;, +, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.eclipse.jetty.websocket.api.Session;, +import org.eclipse.jetty.websocket.api.UpgradeRequest;, +import org.eclipse.jetty.websocket.api.UpgradeResponse;, +import org.eclipse.jetty.websocket.api.WebSocketListener;, +import org.eclipse.jetty.websocket.server.HandshakeRFC6455;, +import org.eclipse.jetty.websocket.server.ServletWebSocketRequest;, +import org.eclipse.jetty.websocket.server.WebSocketServerFactory;, +import org.eclipse.jetty.websocket.servlet.WebSocketCreator;, +import org.springframework.http.server.ServerHttpRequest;, +import org.springframework.http.server.ServerHttpResponse;, +import org.springframework.http.server.ServletServerHttpRequest;, +import org.springframework.http.server.ServletServerHttpResponse;, +import org.springframework.util.Assert;, +import org.springframework.util.ObjectUtils;, +import org.springframework.websocket.BinaryMessage;, +import org.springframework.websocket.BinaryMessageHandler;, +import org.springframework.websocket.CloseStatus;, +import org.springframework.websocket.HandlerProvider;, +import org.springframework.websocket.TextMessage;, +import org.springframework.websocket.TextMessageHandler;, +import org.springframework.websocket.WebSocketHandler;, +import org.springframework.websocket.WebSocketMessage;, +import org.springframework.websocket.WebSocketSession;, +import org.springframework.websocket.server.RequestUpgradeStrategy;, +, +/**, + * {@link RequestUpgradeStrategy} for use with Jetty. Based on Jetty's internal, + * {@code org.eclipse.jetty.websocket.server.WebSocketHandler} class., + *, + * @author Phillip Webb, + */, +public class JettyRequestUpgradeStrategy implements RequestUpgradeStrategy {, +, +	private static Log logger = LogFactory.getLog(JettyRequestUpgradeStrategy.class);, +, +	// FIXME jetty has options, timeouts etc. Do we need a common abstraction, +, +	// FIXME need a way for someone to plug their own RequestUpgradeStrategy or override, +	// Jetty settings, +, +	// FIXME when to call factory.cleanup();, +, +	private static final String HANDLER_PROVIDER = JettyRequestUpgradeStrategy.class.getName()]