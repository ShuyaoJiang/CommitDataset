[+++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, + * A registry of adapters to adapt a Reactive Streams {@link Publisher} to/from, + * various async/reactive types such as {@code CompletableFuture}, RxJava, + * {@code Observable}, and others., + * for Reactor, RxJava 1, RxJava 2 types, and {@link CompletableFuture}., +	private static final boolean reactorPresent =, +			ClassUtils.isPresent("reactor.core.publisher.Flux", ReactiveAdapterRegistry.class.getClassLoader());, +, +		if (reactorPresent) {, +			new ReactorRegistrar().registerAdapters(this);, +		}, +, +		if (reactorPresent) {, +		else {, +			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter));, +		}, +	}, +	private static class ReactorRegistrar {, +, +		void registerAdapters(ReactiveAdapterRegistry registry) {, +, +			// Flux and Mono ahead of Publisher..., +, +			registry.registerReactiveType(, +					ReactiveTypeDescriptor.singleOptionalValue(Mono.class, Mono::empty),, +					source -> (Mono<?>) source,, +					Mono::from, +			);, +, +			registry.registerReactiveType(ReactiveTypeDescriptor.multiValue(Flux.class, Flux::empty),, +					source -> (Flux<?>) source,, +					Flux::from);, +, +			registry.registerReactiveType(ReactiveTypeDescriptor.multiValue(Publisher.class, Flux::empty),, +					source -> (Publisher<?>) source,, +					source -> source);, +, +			registry.registerReactiveType(, +					ReactiveTypeDescriptor.singleOptionalValue(CompletableFuture.class, () -> {, +						CompletableFuture<?> empty = new CompletableFuture<>();, +						empty.complete(null);, +						return empty;, +					}),, +					source -> Mono.fromFuture((CompletableFuture<?>) source),, +					source -> Mono.from(source).toFuture(), +			);, +		}, +	}, +, +		void registerAdapters(ReactiveAdapterRegistry registry) {, +		void registerAdapters(ReactiveAdapterRegistry registry) {, +		ReactorAdapter(ReactiveTypeDescriptor descriptor,, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, + * A registry of adapters to adapt a Reactive Streams {@link Publisher} to/from, + * various async/reactive types such as {@code CompletableFuture}, RxJava, + * {@code Observable}, and others., + * for Reactor, RxJava 1, RxJava 2 types, and {@link CompletableFuture}., +	private static final boolean reactorPresent =, +			ClassUtils.isPresent("reactor.core.publisher.Flux", ReactiveAdapterRegistry.class.getClassLoader());, +, +		if (reactorPresent) {, +			new ReactorRegistrar().registerAdapters(this);, +		}, +, +		if (reactorPresent) {, +		else {, +			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter));, +		}, +	}, +	private static class ReactorRegistrar {, +, +		void registerAdapters(ReactiveAdapterRegistry registry) {, +, +			// Flux and Mono ahead of Publisher..., +, +			registry.registerReactiveType(, +					ReactiveTypeDescriptor.singleOptionalValue(Mono.class, Mono::empty),, +					source -> (Mono<?>) source,, +					Mono::from, +			);, +, +			registry.registerReactiveType(ReactiveTypeDescriptor.multiValue(Flux.class, Flux::empty),, +					source -> (Flux<?>) source,, +					Flux::from);, +, +			registry.registerReactiveType(ReactiveTypeDescriptor.multiValue(Publisher.class, Flux::empty),, +					source -> (Publisher<?>) source,, +					source -> source);, +, +			registry.registerReactiveType(, +					ReactiveTypeDescriptor.singleOptionalValue(CompletableFuture.class, () -> {, +						CompletableFuture<?> empty = new CompletableFuture<>();, +						empty.complete(null);, +						return empty;, +					}),, +					source -> Mono.fromFuture((CompletableFuture<?>) source),, +					source -> Mono.from(source).toFuture(), +			);, +		}, +	}]