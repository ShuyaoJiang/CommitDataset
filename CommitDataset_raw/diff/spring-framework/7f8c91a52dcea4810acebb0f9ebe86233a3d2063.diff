[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +import java.io.IOException;, +import javax.servlet.ServletException;, +import org.springframework.web.bind.annotation.ResponseBody;, +import org.springframework.web.HttpMediaTypeNotAcceptableException;, +import org.springframework.http.converter.HttpMessageConverter;, +import org.springframework.http.converter.ByteArrayHttpMessageConverter;, +import org.springframework.http.converter.StringHttpMessageConverter;, +import org.springframework.http.converter.FormHttpMessageConverter;, +import org.springframework.http.converter.xml.SourceHttpMessageConverter;, +import org.springframework.http.HttpInputMessage;, +import org.springframework.http.MediaType;, +import org.springframework.http.HttpOutputMessage;, +import org.springframework.http.server.ServletServerHttpRequest;, +import org.springframework.http.server.ServletServerHttpResponse;, + * exceptions through the {@link ExceptionHandler} annotation., + *, + * <p>This exception resolver is enabled by default in the {@link org.springframework.web.servlet.DispatcherServlet}., +	private HttpMessageConverter<?>[] messageConverters =, +			new HttpMessageConverter[]{new ByteArrayHttpMessageConverter(), new StringHttpMessageConverter(),, +					new FormHttpMessageConverter(), new SourceHttpMessageConverter()};, +, +, +	/**, +	 * Set the message body converters to use., +	 * <p>These converters are used to convert from and to HTTP requests and responses., +	 */, +	public void setMessageConverters(HttpMessageConverter<?>[] messageConverters) {, +		this.messageConverters = messageConverters;, +	}, +, +, +		if (returnValue != null && AnnotationUtils.findAnnotation(handlerMethod, ResponseBody.class) != null) {, +			return handleResponseBody(returnValue, webRequest);, +		}, +, +	@SuppressWarnings("unchecked"), +	private ModelAndView handleResponseBody(Object returnValue, ServletWebRequest webRequest), +			throws ServletException, IOException {, +, +		HttpInputMessage inputMessage = new ServletServerHttpRequest(webRequest.getRequest());, +		List<MediaType> acceptedMediaTypes = inputMessage.getHeaders().getAccept();, +		if (acceptedMediaTypes.isEmpty()) {, +			acceptedMediaTypes = Collections.singletonList(MediaType.ALL);, +		}, +		MediaType.sortBySpecificity(acceptedMediaTypes);, +		HttpOutputMessage outputMessage = new ServletServerHttpResponse(webRequest.getResponse());, +		Class<?> returnValueType = returnValue.getClass();, +		if (messageConverters != null) {, +			for (MediaType acceptedMediaType : acceptedMediaTypes) {, +				for (HttpMessageConverter messageConverter : messageConverters) {, +					if (messageConverter.canWrite(returnValueType, acceptedMediaType)) {, +						messageConverter.write(returnValue, acceptedMediaType, outputMessage);, +						return new ModelAndView();, +					}, +				}, +			}, +		}, +		if (logger.isWarnEnabled()) {, +			logger.warn("Could not find HttpMessageConverter that supports return type [" + returnValueType + "] and " +, +					acceptedMediaTypes);, +		}, +		return null;, +	}, +, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +import java.io.IOException;, +import javax.servlet.ServletException;, +import org.springframework.web.bind.annotation.ResponseBody;, +import org.springframework.web.HttpMediaTypeNotAcceptableException;, +import org.springframework.http.converter.HttpMessageConverter;, +import org.springframework.http.converter.ByteArrayHttpMessageConverter;, +import org.springframework.http.converter.StringHttpMessageConverter;, +import org.springframework.http.converter.FormHttpMessageConverter;, +import org.springframework.http.converter.xml.SourceHttpMessageConverter;, +import org.springframework.http.HttpInputMessage;, +import org.springframework.http.MediaType;, +import org.springframework.http.HttpOutputMessage;, +import org.springframework.http.server.ServletServerHttpRequest;, +import org.springframework.http.server.ServletServerHttpResponse;, + * exceptions through the {@link ExceptionHandler} annotation., + *, + * <p>This exception resolver is enabled by default in the {@link org.springframework.web.servlet.DispatcherServlet}., +	private HttpMessageConverter<?>[] messageConverters =, +			new HttpMessageConverter[]{new ByteArrayHttpMessageConverter(), new StringHttpMessageConverter(),, +					new FormHttpMessageConverter(), new SourceHttpMessageConverter()};, +, +, +	/**, +	 * Set the message body converters to use., +	 * <p>These converters are used to convert from and to HTTP requests and responses., +	 */, +	public void setMessageConverters(HttpMessageConverter<?>[] messageConverters) {, +		this.messageConverters = messageConverters;, +	}, +, +, +		if (returnValue != null && AnnotationUtils.findAnnotation(handlerMethod, ResponseBody.class) != null) {, +			return handleResponseBody(returnValue, webRequest);]