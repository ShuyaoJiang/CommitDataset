[+++ b/spring-test/src/main/java/org/springframework/mock/web/server/MockServerWebExchange.java, +	/**, +	 * A variant of {@link #from(MockServerHttpRequest)} that accepts a request, +	 * builder. Internally invokes the {@code build()} to build the request., +	 * @param requestBuilder the builder for the request., +	 * @return the exchange, +	 */, +	public static MockServerWebExchange from(MockServerHttpRequest.BaseBuilder<?> requestBuilder) {, +		return new MockServerWebExchange(requestBuilder.build());, +	}, +, +++ b/spring-test/src/main/java/org/springframework/mock/web/server/MockServerWebExchange.java, +	/**, +	 * A variant of {@link #from(MockServerHttpRequest)} that accepts a request, +	 * builder. Internally invokes the {@code build()} to build the request., +	 * @param requestBuilder the builder for the request., +	 * @return the exchange, +	 */, +	public static MockServerWebExchange from(MockServerHttpRequest.BaseBuilder<?> requestBuilder) {, +		return new MockServerWebExchange(requestBuilder.build());, +	}, +, +++ b/spring-web/src/test/java/org/springframework/mock/web/test/server/MockServerWebExchange.java, +	/**, +	 * A variant of {@link #from(MockServerHttpRequest)} that accepts a request, +	 * builder. Internally invokes the {@code build()} to build the request., +	 * @param requestBuilder the builder for the request., +	 * @return the exchange, +	 */, +	public static MockServerWebExchange from(MockServerHttpRequest.BaseBuilder<?> requestBuilder) {, +		return new MockServerWebExchange(requestBuilder.build());, +	}, +, +++ b/spring-test/src/main/java/org/springframework/mock/web/server/MockServerWebExchange.java, +	/**, +	 * A variant of {@link #from(MockServerHttpRequest)} that accepts a request, +	 * builder. Internally invokes the {@code build()} to build the request., +	 * @param requestBuilder the builder for the request., +	 * @return the exchange, +	 */, +	public static MockServerWebExchange from(MockServerHttpRequest.BaseBuilder<?> requestBuilder) {, +		return new MockServerWebExchange(requestBuilder.build());, +	}, +, +++ b/spring-web/src/test/java/org/springframework/mock/web/test/server/MockServerWebExchange.java, +	/**, +	 * A variant of {@link #from(MockServerHttpRequest)} that accepts a request, +	 * builder. Internally invokes the {@code build()} to build the request., +	 * @param requestBuilder the builder for the request., +	 * @return the exchange, +	 */, +	public static MockServerWebExchange from(MockServerHttpRequest.BaseBuilder<?> requestBuilder) {, +		return new MockServerWebExchange(requestBuilder.build());, +	}, +, +++ b/spring-web/src/test/java/org/springframework/web/bind/support/WebExchangeDataBinderTests.java, +		ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.post(url));, +		this.binder.bind(exchange).block(Duration.ofSeconds(5));, +++ b/spring-test/src/main/java/org/springframework/mock/web/server/MockServerWebExchange.java, +	/**, +	 * A variant of {@link #from(MockServerHttpRequest)} that accepts a request, +	 * builder. Internally invokes the {@code build()} to build the request., +	 * @param requestBuilder the builder for the request., +	 * @return the exchange, +	 */, +	public static MockServerWebExchange from(MockServerHttpRequest.BaseBuilder<?> requestBuilder) {, +		return new MockServerWebExchange(requestBuilder.build());, +	}, +, +++ b/spring-web/src/test/java/org/springframework/mock/web/test/server/MockServerWebExchange.java, +	/**, +	 * A variant of {@link #from(MockServerHttpRequest)} that accepts a request, +	 * builder. Internally invokes the {@code build()} to build the request., +	 * @param requestBuilder the builder for the request., +	 * @return the exchange, +	 */, +	public static MockServerWebExchange from(MockServerHttpRequest.BaseBuilder<?> requestBuilder) {, +		return new MockServerWebExchange(requestBuilder.build());, +	}, +, +++ b/spring-web/src/test/java/org/springframework/web/bind/support/WebExchangeDataBinderTests.java, +		ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.post(url));, +		this.binder.bind(exchange).block(Duration.ofSeconds(5));, +++ b/spring-web/src/test/java/org/springframework/web/cors/reactive/CorsWebFilterTests.java, +		MockServerWebExchange exchange = MockServerWebExchange.from(, +				MockServerHttpRequest, +						.get("http://domain1.com/test.html"), +						.header(HOST, "domain1.com"), +						.header(ORIGIN, "http://domain2.com"), +						.header("header2", "foo"));, +		this.filter.filter(exchange, filterChain);, +		MockServerWebExchange exchange = MockServerWebExchange.from(, +				MockServerHttpRequest, +						.header("header2", "foo"));, +		MockServerWebExchange exchange = MockServerWebExchange.from(, +				MockServerHttpRequest, +		);, +		MockServerWebExchange exchange = MockServerWebExchange.from(, +				MockServerHttpRequest, +						.header(ACCESS_CONTROL_REQUEST_HEADERS, "header1, header2"));]