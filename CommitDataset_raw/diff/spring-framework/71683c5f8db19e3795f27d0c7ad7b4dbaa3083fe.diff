[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +import java.util.HashMap;, +	 * Register a handler method and its unique mapping. Invoked at startup for, +	 * each detected handler method., +	 * @deprecated as of 4.2 you can invoke the public methods, +	 * {@link #registerMapping(Object, Object, Method)} and, +	 * {@link #unregisterMapping(Object)} during initialization or at runtime,, +	 * i.e. after initialization is complete., +	@Deprecated, +	protected void registerHandlerMethod(Object handler, Method method, T mapping) {, +		this.mappingRegistry.register(mapping, handler, method);, +	/**, +	 * Register the given mapping., +	 * <p>This method may be invoked at runtime after initialization has completed., +	 * @param mapping the mapping for the handler method, +	 * @param handler the handler, +	 * @param method the method, +	 */, +	public void registerMapping(T mapping, Object handler, Method method) {, +		this.mappingRegistry.register(mapping, handler, method);, +	}, +, +	/**, +	 * Un-register the given mapping., +	 * <p>This method may be invoked at runtime after initialization has completed., +	 * @param mapping the mapping to unregister, +	 */, +	public void unregisterMapping(T mapping) {, +		this.mappingRegistry.unregister(mapping);, +	}, +		private final Map<T, MappingDefinition<T>> definitionMap = new HashMap<T, MappingDefinition<T>>();, +, +		private final Map<Method, CorsConfiguration> corsLookup =, +				new ConcurrentHashMap<Method, CorsConfiguration>();, +			return this.corsLookup.get(method);, +		public void register(T mapping, Object handler, Method method) {, +				if (corsConfig != null) {, +					this.corsLookup.put(method, corsConfig);, +				}, +				this.definitionMap.put(mapping,, +		public void unregister(T mapping) {, +				MappingDefinition<T> definition = this.definitionMap.remove(mapping);, +, +				this.corsLookup.remove(definition.getHandlerMethod().getMethod());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +import java.util.HashMap;, +	 * Register a handler method and its unique mapping. Invoked at startup for, +	 * each detected handler method., +	 * @deprecated as of 4.2 you can invoke the public methods, +	 * {@link #registerMapping(Object, Object, Method)} and, +	 * {@link #unregisterMapping(Object)} during initialization or at runtime,, +	 * i.e. after initialization is complete., +	@Deprecated, +	protected void registerHandlerMethod(Object handler, Method method, T mapping) {, +		this.mappingRegistry.register(mapping, handler, method);, +	/**, +	 * Register the given mapping., +	 * <p>This method may be invoked at runtime after initialization has completed., +	 * @param mapping the mapping for the handler method, +	 * @param handler the handler, +	 * @param method the method, +	 */, +	public void registerMapping(T mapping, Object handler, Method method) {, +		this.mappingRegistry.register(mapping, handler, method);, +	}, +, +	/**, +	 * Un-register the given mapping., +	 * <p>This method may be invoked at runtime after initialization has completed., +	 * @param mapping the mapping to unregister, +	 */, +	public void unregisterMapping(T mapping) {, +		this.mappingRegistry.unregister(mapping);, +	}, +		private final Map<T, MappingDefinition<T>> definitionMap = new HashMap<T, MappingDefinition<T>>();, +, +		private final Map<Method, CorsConfiguration> corsLookup =, +				new ConcurrentHashMap<Method, CorsConfiguration>();, +			return this.corsLookup.get(method);, +		public void register(T mapping, Object handler, Method method) {, +				if (corsConfig != null) {, +					this.corsLookup.put(method, corsConfig);, +				}, +				this.definitionMap.put(mapping,, +		public void unregister(T mapping) {, +				MappingDefinition<T> definition = this.definitionMap.remove(mapping);, +, +				this.corsLookup.remove(definition.getHandlerMethod().getMethod());, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/handler/HandlerMethodMappingTests.java, +		mapping.registerMapping("foo", handler, method1);, +		mapping.registerMapping("foo", handler, method2);, +		mapping.registerMapping(key, handler, method1);, +		mapping.registerMapping("/fo*", handler, method1);, +		mapping.registerMapping("/f*", handler, method2);, +		mapping.registerMapping("/f?o", handler, method1);, +		mapping.registerMapping("/fo?", handler, method2);, +		mapping.registerMapping(key, handler, method1);, +		mapping.unregisterMapping(key);, +	@SuppressWarnings("unused")]