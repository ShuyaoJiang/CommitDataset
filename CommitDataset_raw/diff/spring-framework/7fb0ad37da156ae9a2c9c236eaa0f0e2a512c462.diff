[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, + * Copyright 2002-2017 the original author or authors., +import java.lang.reflect.InvocationHandler;, +import java.lang.reflect.Modifier;, +import java.lang.reflect.Proxy;, +					// Scoped proxy factory beans are a special case and should not be further proxied, +					return enhanceFactoryBean(factoryBean, beanMethod.getReturnType(), beanFactory, beanName);, +, +			return obtainBeanInstanceFromFactory(beanMethod, beanMethodArgs, beanFactory, beanName);, +		}, +, +		private Object obtainBeanInstanceFromFactory(Method beanMethod, Object[] beanMethodArgs,, +				ConfigurableBeanFactory beanFactory, String beanName) {, +, +, +		@Override, +		public boolean isMatch(Method candidateMethod) {, +			return BeanAnnotationHelper.isBeanAnnotated(candidateMethod);, +		}, +, +		private ConfigurableBeanFactory getBeanFactory(Object enhancedConfigInstance) {, +			Field field = ReflectionUtils.findField(enhancedConfigInstance.getClass(), BEAN_FACTORY_FIELD);, +			Assert.state(field != null, "Unable to find generated bean factory field");, +			Object beanFactory = ReflectionUtils.getField(field, enhancedConfigInstance);, +			Assert.state(beanFactory != null, "BeanFactory has not been injected into @Configuration class");, +			Assert.state(beanFactory instanceof ConfigurableBeanFactory,, +					"Injected BeanFactory is not a ConfigurableBeanFactory");, +			return (ConfigurableBeanFactory) beanFactory;, +		private Object enhanceFactoryBean(final Object factoryBean, Class<?> exposedType,, +				final ConfigurableBeanFactory beanFactory, final String beanName) {, +, +			try {, +				Class<?> clazz = factoryBean.getClass();, +				boolean finalClass = Modifier.isFinal(clazz.getModifiers());, +				boolean finalMethod = Modifier.isFinal(clazz.getMethod("getObject").getModifiers());, +				if (finalClass || finalMethod) {, +					if (exposedType.isInterface()) {, +						if (logger.isDebugEnabled()) {, +							logger.debug("Creating interface proxy for FactoryBean '" + beanName + "' of type [" +, +									clazz.getName() + "] for use within another @Bean method because its " +, +									(finalClass ? "implementation class" : "getObject() method") +, +									" is final: Otherwise a getObject() call would not be routed to the factory.");, +						}, +						return createInterfaceProxyForFactoryBean(factoryBean, exposedType, beanFactory, beanName);, +					}, +					else {, +						if (logger.isInfoEnabled()) {, +							logger.info("Unable to proxy FactoryBean '" + beanName + "' of type [" +, +									clazz.getName() + "] for use within another @Bean method because its " +, +									(finalClass ? "implementation class" : "getObject() method") +, +									" is final: A getObject() call will NOT be routed to the factory. " +, +									"Consider declaring the return type as a FactoryBean interface.");, +						}, +						return factoryBean;, +					}, +				}, +			}, +			catch (NoSuchMethodException ex) {, +				// No getObject() method -> shouldn't happen, but as long as nobody is trying to call it..., +			}, +, +			return createCglibProxyForFactoryBean(factoryBean, beanFactory, beanName);, +		}, +, +		private Object createInterfaceProxyForFactoryBean(final Object factoryBean, Class<?> interfaceType,, +				final ConfigurableBeanFactory beanFactory, final String beanName) {, +, +			return Proxy.newProxyInstance(, +					factoryBean.getClass().getClassLoader(), new Class<?>[] {interfaceType},, +					new InvocationHandler() {, +						@Override, +						public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {, +							if (method.getName().equals("getObject") && args == null) {, +								return beanFactory.getBean(beanName);, +							}, +							return ReflectionUtils.invokeMethod(method, factoryBean, args);, +						}, +					});, +		}, +, +		private Object createCglibProxyForFactoryBean(final Object factoryBean,, +				final ConfigurableBeanFactory beanFactory, final String beanName) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, + * Copyright 2002-2017 the original author or authors., +import java.lang.reflect.InvocationHandler;, +import java.lang.reflect.Modifier;, +import java.lang.reflect.Proxy;, +					// Scoped proxy factory beans are a special case and should not be further proxied, +					return enhanceFactoryBean(factoryBean, beanMethod.getReturnType(), beanFactory, beanName);, +, +			return obtainBeanInstanceFromFactory(beanMethod, beanMethodArgs, beanFactory, beanName);, +		}, +, +		private Object obtainBeanInstanceFromFactory(Method beanMethod, Object[] beanMethodArgs,, +				ConfigurableBeanFactory beanFactory, String beanName) {, +, +, +		@Override, +		public boolean isMatch(Method candidateMethod) {, +			return BeanAnnotationHelper.isBeanAnnotated(candidateMethod);]