[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/UrlBasedViewResolver.java, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/UrlBasedViewResolver.java, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolverSupport.java, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/UrlBasedViewResolver.java, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolverSupport.java, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/freemarker/FreeMarkerView.java, +		DataBuffer dataBuffer = exchange.getResponse().bufferFactory().allocateBuffer();, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/UrlBasedViewResolver.java, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolverSupport.java, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/freemarker/FreeMarkerView.java, +		DataBuffer dataBuffer = exchange.getResponse().bufferFactory().allocateBuffer();, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java, +import static org.junit.Assert.assertArrayEquals;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +			return new FreeMarkerViewResolver("", ".ftl");, +			return personStream.asList().doOnSuccess(persons::addAll).then();]