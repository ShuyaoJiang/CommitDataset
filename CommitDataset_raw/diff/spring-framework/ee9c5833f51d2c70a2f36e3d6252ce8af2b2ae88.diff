[+++ b/spring-web-reactive/src/test/java/org/springframework/core/codec/support/ByteBufferDecoderTests.java, +import reactor.core.test.TestSubscriber;, +	public void decode() {, +		TestSubscriber<ByteBuffer> testSubscriber = new TestSubscriber<>();, +		testSubscriber.bindTo(output), +				.assertValuesWith(b -> assertBufferEquals(fooBuffer, b), b -> assertBufferEquals(barBuffer, b));, +++ b/spring-web-reactive/src/test/java/org/springframework/core/codec/support/ByteBufferDecoderTests.java, +import reactor.core.test.TestSubscriber;, +	public void decode() {, +		TestSubscriber<ByteBuffer> testSubscriber = new TestSubscriber<>();, +		testSubscriber.bindTo(output), +				.assertValuesWith(b -> assertBufferEquals(fooBuffer, b), b -> assertBufferEquals(barBuffer, b));, +++ b/spring-web-reactive/src/test/java/org/springframework/core/codec/support/ByteBufferEncoderTests.java, +import reactor.core.test.TestSubscriber;, +	public void encode() {, +		TestSubscriber<DataBuffer> testSubscriber = new TestSubscriber<>();, +		testSubscriber.bindTo(output), +				.assertValuesWith(b -> {, +					b.read(buf);, +				}, b -> {, +					byte[] buf = new byte[3];, +					b.read(buf);, +				});, +++ b/spring-web-reactive/src/test/java/org/springframework/core/codec/support/ByteBufferDecoderTests.java, +import reactor.core.test.TestSubscriber;, +	public void decode() {, +		TestSubscriber<ByteBuffer> testSubscriber = new TestSubscriber<>();, +		testSubscriber.bindTo(output), +				.assertValuesWith(b -> assertBufferEquals(fooBuffer, b), b -> assertBufferEquals(barBuffer, b));, +++ b/spring-web-reactive/src/test/java/org/springframework/core/codec/support/ByteBufferEncoderTests.java, +import reactor.core.test.TestSubscriber;, +	public void encode() {, +		TestSubscriber<DataBuffer> testSubscriber = new TestSubscriber<>();, +		testSubscriber.bindTo(output), +				.assertValuesWith(b -> {, +					b.read(buf);, +				}, b -> {, +					byte[] buf = new byte[3];, +					b.read(buf);, +				});, +++ b/spring-web-reactive/src/test/java/org/springframework/core/codec/support/JacksonJsonDecoderTests.java, +import reactor.core.test.TestSubscriber;, +	public void decode() {, +		TestSubscriber<Object> testSubscriber = new TestSubscriber<>();, +		testSubscriber.bindTo(output).assertValues(new Pojo("foofoo", "barbar"));, +++ b/spring-web-reactive/src/test/java/org/springframework/core/codec/support/ByteBufferDecoderTests.java, +import reactor.core.test.TestSubscriber;, +	public void decode() {, +		TestSubscriber<ByteBuffer> testSubscriber = new TestSubscriber<>();, +		testSubscriber.bindTo(output), +				.assertValuesWith(b -> assertBufferEquals(fooBuffer, b), b -> assertBufferEquals(barBuffer, b));, +++ b/spring-web-reactive/src/test/java/org/springframework/core/codec/support/ByteBufferEncoderTests.java, +import reactor.core.test.TestSubscriber;, +	public void encode() {, +		TestSubscriber<DataBuffer> testSubscriber = new TestSubscriber<>();, +		testSubscriber.bindTo(output), +				.assertValuesWith(b -> {, +					b.read(buf);, +				}, b -> {, +					byte[] buf = new byte[3];, +					b.read(buf);, +				});, +++ b/spring-web-reactive/src/test/java/org/springframework/core/codec/support/JacksonJsonDecoderTests.java, +import reactor.core.test.TestSubscriber;, +	public void decode() {, +		TestSubscriber<Object> testSubscriber = new TestSubscriber<>();, +		testSubscriber.bindTo(output).assertValues(new Pojo("foofoo", "barbar"));, +++ b/spring-web-reactive/src/test/java/org/springframework/core/codec/support/JacksonJsonEncoderTests.java, +import reactor.core.test.TestSubscriber;, +	public void write() {, +		TestSubscriber<String> testSubscriber = new TestSubscriber<>();, +		testSubscriber.bindTo(output), +				.assertValues("{\"foo\":\"foofoo\",\"bar\":\"barbar\"}",, +							  "{\"foo\":\"foofoofoo\",\"bar\":\"barbarbar\"}");, +++ b/spring-web-reactive/src/test/java/org/springframework/core/codec/support/ByteBufferDecoderTests.java, +import reactor.core.test.TestSubscriber;, +	public void decode() {, +		TestSubscriber<ByteBuffer> testSubscriber = new TestSubscriber<>();, +		testSubscriber.bindTo(output), +				.assertValuesWith(b -> assertBufferEquals(fooBuffer, b), b -> assertBufferEquals(barBuffer, b));, +++ b/spring-web-reactive/src/test/java/org/springframework/core/codec/support/ByteBufferEncoderTests.java, +import reactor.core.test.TestSubscriber;, +	public void encode() {, +		TestSubscriber<DataBuffer> testSubscriber = new TestSubscriber<>();, +		testSubscriber.bindTo(output), +				.assertValuesWith(b -> {, +					b.read(buf);, +				}, b -> {, +					byte[] buf = new byte[3];, +					b.read(buf);, +				});, +++ b/spring-web-reactive/src/test/java/org/springframework/core/codec/support/JacksonJsonDecoderTests.java, +import reactor.core.test.TestSubscriber;, +	public void decode() {, +		TestSubscriber<Object> testSubscriber = new TestSubscriber<>();, +		testSubscriber.bindTo(output).assertValues(new Pojo("foofoo", "barbar"));, +++ b/spring-web-reactive/src/test/java/org/springframework/core/codec/support/JacksonJsonEncoderTests.java, +import reactor.core.test.TestSubscriber;, +	public void write() {, +		TestSubscriber<String> testSubscriber = new TestSubscriber<>();]