[+++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/handler/AnnotationMethodIntegrationTests.java, +		WebSocketSession session = doHandshake(new TestClientWebSocketHandler(0, message), "/ws").get();, +		WebSocketSession session = doHandshake(clientHandler, "/ws").get();, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/handler/AnnotationMethodIntegrationTests.java, +		WebSocketSession session = doHandshake(new TestClientWebSocketHandler(0, message), "/ws").get();, +		WebSocketSession session = doHandshake(clientHandler, "/ws").get();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/AbstractWebSocketClient.java, +import org.springframework.util.concurrent.ListenableFuture;, +	public ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler,, +			String uriTemplate, Object... uriVars) {, +	public final ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler,, +			HttpHeaders headers, URI uri) {, +	 * @return the established WebSocket session wrapped in a ListenableFuture., +	protected abstract ListenableFuture<WebSocketSession> doHandshakeInternal(WebSocketHandler webSocketHandler,, +			HttpHeaders headers, URI uri, List<String> subProtocols, Map<String, Object> handshakeAttributes);, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/handler/AnnotationMethodIntegrationTests.java, +		WebSocketSession session = doHandshake(new TestClientWebSocketHandler(0, message), "/ws").get();, +		WebSocketSession session = doHandshake(clientHandler, "/ws").get();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/AbstractWebSocketClient.java, +import org.springframework.util.concurrent.ListenableFuture;, +	public ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler,, +			String uriTemplate, Object... uriVars) {, +	public final ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler,, +			HttpHeaders headers, URI uri) {, +	 * @return the established WebSocket session wrapped in a ListenableFuture., +	protected abstract ListenableFuture<WebSocketSession> doHandshakeInternal(WebSocketHandler webSocketHandler,, +			HttpHeaders headers, URI uri, List<String> subProtocols, Map<String, Object> handshakeAttributes);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/ConnectionManagerSupport.java, +		synchronized (lifecycleMonitor) {, +	protected abstract void openConnection();, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/handler/AnnotationMethodIntegrationTests.java, +		WebSocketSession session = doHandshake(new TestClientWebSocketHandler(0, message), "/ws").get();, +		WebSocketSession session = doHandshake(clientHandler, "/ws").get();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/AbstractWebSocketClient.java, +import org.springframework.util.concurrent.ListenableFuture;, +	public ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler,, +			String uriTemplate, Object... uriVars) {, +	public final ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler,, +			HttpHeaders headers, URI uri) {, +	 * @return the established WebSocket session wrapped in a ListenableFuture., +	protected abstract ListenableFuture<WebSocketSession> doHandshakeInternal(WebSocketHandler webSocketHandler,, +			HttpHeaders headers, URI uri, List<String> subProtocols, Map<String, Object> handshakeAttributes);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/ConnectionManagerSupport.java, +		synchronized (lifecycleMonitor) {, +	protected abstract void openConnection();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/WebSocketClient.java, +import org.springframework.util.concurrent.ListenableFuture;, +	ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler,, +			String uriTemplate, Object... uriVariables);, +	ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler, HttpHeaders headers, URI uri);, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/handler/AnnotationMethodIntegrationTests.java, +		WebSocketSession session = doHandshake(new TestClientWebSocketHandler(0, message), "/ws").get();, +		WebSocketSession session = doHandshake(clientHandler, "/ws").get();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/AbstractWebSocketClient.java, +import org.springframework.util.concurrent.ListenableFuture;, +	public ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler,, +			String uriTemplate, Object... uriVars) {, +	public final ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler,, +			HttpHeaders headers, URI uri) {, +	 * @return the established WebSocket session wrapped in a ListenableFuture., +	protected abstract ListenableFuture<WebSocketSession> doHandshakeInternal(WebSocketHandler webSocketHandler,, +			HttpHeaders headers, URI uri, List<String> subProtocols, Map<String, Object> handshakeAttributes);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/ConnectionManagerSupport.java, +		synchronized (lifecycleMonitor) {, +	protected abstract void openConnection();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/WebSocketClient.java, +import org.springframework.util.concurrent.ListenableFuture;, +	ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler,, +			String uriTemplate, Object... uriVariables);, +	ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler, HttpHeaders headers, URI uri);, +++ /dev/null, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/handler/AnnotationMethodIntegrationTests.java, +		WebSocketSession session = doHandshake(new TestClientWebSocketHandler(0, message), "/ws").get();, +		WebSocketSession session = doHandshake(clientHandler, "/ws").get();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/AbstractWebSocketClient.java, +import org.springframework.util.concurrent.ListenableFuture;, +	public ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler,, +			String uriTemplate, Object... uriVars) {, +	public final ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler,, +			HttpHeaders headers, URI uri) {, +	 * @return the established WebSocket session wrapped in a ListenableFuture., +	protected abstract ListenableFuture<WebSocketSession> doHandshakeInternal(WebSocketHandler webSocketHandler,, +			HttpHeaders headers, URI uri, List<String> subProtocols, Map<String, Object> handshakeAttributes);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/ConnectionManagerSupport.java, +		synchronized (lifecycleMonitor) {, +	protected abstract void openConnection();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/WebSocketClient.java, +import org.springframework.util.concurrent.ListenableFuture;, +	ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler,, +			String uriTemplate, Object... uriVariables);, +	ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler, HttpHeaders headers, URI uri);, +++ /dev/null, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/WebSocketConnectionManager.java, +import org.springframework.util.concurrent.ListenableFuture;, +import org.springframework.util.concurrent.ListenableFutureCallback;, +	protected void openConnection() {, +, +		logger.info("Connecting to WebSocket at " + getUri());, +, +		ListenableFuture<WebSocketSession> future =]