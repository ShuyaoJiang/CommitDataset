[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultHandlerStrategiesBuilder.java, +		localeResolver(DEFAULT_LOCALE_RESOLVER);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultHandlerStrategiesBuilder.java, +		localeResolver(DEFAULT_LOCALE_RESOLVER);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +import java.util.function.Function;, +import org.springframework.web.util.patterns.PathPattern;, +import org.springframework.web.util.patterns.PathPatternParser;, +	private static final PathPatternParser DEFAULT_PATTERN_PARSER = new PathPatternParser();, +		Assert.notNull(pattern, "'pattern' must not be null");, +		return new PathPatternPredicate(DEFAULT_PATTERN_PARSER.parse(pattern));, +	 * Return a function that creates new path-matching {@code RequestPredicates} from pattern, +	 * Strings using the given {@link PathPatternParser}. This method can be used to specify a, +	 * non-default, customized {@code PathPatternParser} when resolving path patterns., +	 * @param patternParser the parser used to parse patterns given to the returned function, +	 * @return a function that resolves patterns Strings into path-matching, +	 * {@code RequestPredicate}s, +	public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {, +		Assert.notNull(patternParser, "'patternParser' must not be null");, +		return pattern -> new PathPatternPredicate(patternParser.parse(pattern));, +	private static class PathPatternPredicate implements RequestPredicate {, +		private final PathPattern pattern;, +		public PathPatternPredicate(PathPattern pattern) {, +			if (this.pattern.matches(path)) {, +					Map<String, String> uriTemplateVariables = this.pattern.matchAndExtract(path);, +			String subPath = this.pattern.extractPathWithinPattern(requestPath);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultHandlerStrategiesBuilder.java, +		localeResolver(DEFAULT_LOCALE_RESOLVER);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +import java.util.function.Function;, +import org.springframework.web.util.patterns.PathPattern;, +import org.springframework.web.util.patterns.PathPatternParser;, +	private static final PathPatternParser DEFAULT_PATTERN_PARSER = new PathPatternParser();, +		Assert.notNull(pattern, "'pattern' must not be null");, +		return new PathPatternPredicate(DEFAULT_PATTERN_PARSER.parse(pattern));, +	 * Return a function that creates new path-matching {@code RequestPredicates} from pattern, +	 * Strings using the given {@link PathPatternParser}. This method can be used to specify a, +	 * non-default, customized {@code PathPatternParser} when resolving path patterns., +	 * @param patternParser the parser used to parse patterns given to the returned function, +	 * @return a function that resolves patterns Strings into path-matching, +	 * {@code RequestPredicate}s, +	public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {, +		Assert.notNull(patternParser, "'patternParser' must not be null");, +		return pattern -> new PathPatternPredicate(patternParser.parse(pattern));, +	private static class PathPatternPredicate implements RequestPredicate {, +		private final PathPattern pattern;, +		public PathPatternPredicate(PathPattern pattern) {, +			if (this.pattern.matches(path)) {, +					Map<String, String> uriTemplateVariables = this.pattern.matchAndExtract(path);, +			String subPath = this.pattern.extractPathWithinPattern(requestPath);, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/RequestPredicatesTests.java, +import java.util.function.Function;, +import org.springframework.web.util.patterns.PathPatternParser;, +	public void pathPredicates() throws Exception {, +		PathPatternParser parser = new PathPatternParser();, +		parser.setCaseSensitive(false);, +		Function<String, RequestPredicate> pathPredicates = RequestPredicates.pathPredicates(parser);, +, +		URI uri = URI.create("http://localhost/path");, +		RequestPredicate predicate = pathPredicates.apply("/P*");, +		MockServerRequest request = MockServerRequest.builder().uri(uri).build();, +		assertTrue(predicate.test(request));, +	}, +, +	@Test]