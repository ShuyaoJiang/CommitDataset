[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +			if (WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class) != null) {, +	 * @param request current HTTP request, +	protected void cleanupMultipart(HttpServletRequest request) {, +		MultipartHttpServletRequest multipartRequest = WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class);, +		if (multipartRequest != null) {, +			this.multipartResolver.cleanupMultipart(multipartRequest);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +			if (WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class) != null) {, +	 * @param request current HTTP request, +	protected void cleanupMultipart(HttpServletRequest request) {, +		MultipartHttpServletRequest multipartRequest = WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class);, +		if (multipartRequest != null) {, +			this.multipartResolver.cleanupMultipart(multipartRequest);, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/ComplexWebApplicationContext.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.web.util.WebUtils;, +			if (WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class) == null) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +			if (WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class) != null) {, +	 * @param request current HTTP request, +	protected void cleanupMultipart(HttpServletRequest request) {, +		MultipartHttpServletRequest multipartRequest = WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class);, +		if (multipartRequest != null) {, +			this.multipartResolver.cleanupMultipart(multipartRequest);, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/ComplexWebApplicationContext.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.web.util.WebUtils;, +			if (WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class) == null) {, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/DispatcherServletTests.java, + * Copyright 2002-2014 the original author or authors., +import javax.servlet.http.HttpServletRequestWrapper;, +		assertNull(request.getAttribute(SimpleMappingExceptionResolver.DEFAULT_EXCEPTION_ATTRIBUTE));, +		assertNotNull(request.getAttribute("cleanedUp"));, +	}, +, +	public void testExistingMultipartRequestButWrapped() throws Exception {, +		MockHttpServletRequest request = new MockHttpServletRequest(getServletContext(), "GET", "/locale.do;abc=def");, +		request.addPreferredLocale(Locale.CANADA);, +		request.addUserRole("role1");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		ComplexWebApplicationContext.MockMultipartResolver multipartResolver =, +				(ComplexWebApplicationContext.MockMultipartResolver) complexDispatcherServlet.getWebApplicationContext(), +						.getBean("multipartResolver");, +		MultipartHttpServletRequest multipartRequest = multipartResolver.resolveMultipart(request);, +		complexDispatcherServlet.service(new HttpServletRequestWrapper(multipartRequest), response);, +		multipartResolver.cleanupMultipart(multipartRequest);, +		assertNull(request.getAttribute(SimpleMappingExceptionResolver.DEFAULT_EXCEPTION_ATTRIBUTE));]