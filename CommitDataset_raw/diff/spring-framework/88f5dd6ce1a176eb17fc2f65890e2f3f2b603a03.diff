[+++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java, +import static org.hamcrest.Matchers.instanceOf;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotSame;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +import org.springframework.tests.sample.beans.ITestBean;, +import org.springframework.tests.sample.beans.TestBean;, +		assertThat(proxy, instanceOf(Lockable.class));, +		assertThat(modifiable, instanceOf(Modifiable.class));, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java, +import static org.hamcrest.Matchers.instanceOf;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotSame;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +import org.springframework.tests.sample.beans.ITestBean;, +import org.springframework.tests.sample.beans.TestBean;, +		assertThat(proxy, instanceOf(Lockable.class));, +		assertThat(modifiable, instanceOf(Modifiable.class));, +++ b/spring-aop/src/test/java/org/springframework/aop/support/DelegatingIntroductionInterceptorTests.java, +import static org.hamcrest.Matchers.instanceOf;, +import static org.junit.Assert.assertThat;, +		assertThat(ts, instanceOf(TimeStamped.class));, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java, +import static org.hamcrest.Matchers.instanceOf;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotSame;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +import org.springframework.tests.sample.beans.ITestBean;, +import org.springframework.tests.sample.beans.TestBean;, +		assertThat(proxy, instanceOf(Lockable.class));, +		assertThat(modifiable, instanceOf(Modifiable.class));, +++ b/spring-aop/src/test/java/org/springframework/aop/support/DelegatingIntroductionInterceptorTests.java, +import static org.hamcrest.Matchers.instanceOf;, +import static org.junit.Assert.assertThat;, +		assertThat(ts, instanceOf(TimeStamped.class));, +++ b/spring-beans/src/test/java/org/springframework/beans/BeanWrapperAutoGrowingTests.java, + * Copyright 2002-2013 the original author or authors., +import static org.hamcrest.Matchers.instanceOf;, +		assertThat(bean.getArray()[0], instanceOf(Bean.class));, +		assertThat(bean.getArray()[0], instanceOf(Bean.class));, +		assertThat(bean.getArray()[1], instanceOf(Bean.class));, +		assertThat(bean.getArray()[2], instanceOf(Bean.class));, +		assertThat(bean.getArray()[3], instanceOf(Bean.class));, +		assertThat(bean.getArray()[4], instanceOf(Bean.class));, +		assertThat(bean.getMultiArray()[0][0], instanceOf(Bean.class));, +		assertThat(bean.getList().get(0), instanceOf(Bean.class));, +		assertThat(bean.getList().get(0), instanceOf(Bean.class));, +		assertThat(bean.getList().get(1), instanceOf(Bean.class));, +		assertThat(bean.getList().get(2), instanceOf(Bean.class));, +		assertThat(bean.getList().get(3), instanceOf(Bean.class));, +		assertThat(bean.getList().get(4), instanceOf(Bean.class));, +		assertThat(bean.getMultiList().get(0).get(0), instanceOf(Bean.class));, +		assertThat(bean.getMap().get("A"), instanceOf(Bean.class));, +		assertThat(bean.getMap().get("A").getNested(), instanceOf(Bean.class));, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java, +import static org.hamcrest.Matchers.instanceOf;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotSame;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +import org.springframework.tests.sample.beans.ITestBean;, +import org.springframework.tests.sample.beans.TestBean;, +		assertThat(proxy, instanceOf(Lockable.class));, +		assertThat(modifiable, instanceOf(Modifiable.class));, +++ b/spring-aop/src/test/java/org/springframework/aop/support/DelegatingIntroductionInterceptorTests.java, +import static org.hamcrest.Matchers.instanceOf;, +import static org.junit.Assert.assertThat;, +		assertThat(ts, instanceOf(TimeStamped.class));, +++ b/spring-beans/src/test/java/org/springframework/beans/BeanWrapperAutoGrowingTests.java, + * Copyright 2002-2013 the original author or authors., +import static org.hamcrest.Matchers.instanceOf;, +		assertThat(bean.getArray()[0], instanceOf(Bean.class));, +		assertThat(bean.getArray()[0], instanceOf(Bean.class));, +		assertThat(bean.getArray()[1], instanceOf(Bean.class));, +		assertThat(bean.getArray()[2], instanceOf(Bean.class));, +		assertThat(bean.getArray()[3], instanceOf(Bean.class));, +		assertThat(bean.getArray()[4], instanceOf(Bean.class));, +		assertThat(bean.getMultiArray()[0][0], instanceOf(Bean.class));, +		assertThat(bean.getList().get(0), instanceOf(Bean.class));, +		assertThat(bean.getList().get(0), instanceOf(Bean.class));, +		assertThat(bean.getList().get(1), instanceOf(Bean.class));, +		assertThat(bean.getList().get(2), instanceOf(Bean.class));, +		assertThat(bean.getList().get(3), instanceOf(Bean.class));, +		assertThat(bean.getList().get(4), instanceOf(Bean.class));, +		assertThat(bean.getMultiList().get(0).get(0), instanceOf(Bean.class));]