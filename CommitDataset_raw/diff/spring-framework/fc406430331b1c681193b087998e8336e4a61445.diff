[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/AbstractMediaTypeExpression.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/AbstractMediaTypeExpression.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/AbstractRequestCondition.java, + * Copyright 2002-2016 the original author or authors., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/AbstractMediaTypeExpression.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/AbstractRequestCondition.java, + * Copyright 2002-2016 the original author or authors., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.java, +import org.springframework.web.HttpMediaTypeException;, +		MediaType contentType;, +		try {, +			contentType = StringUtils.hasLength(request.getContentType()) ?, +					MediaType.parseMediaType(request.getContentType()) :, +					MediaType.APPLICATION_OCTET_STREAM;, +		}, +		catch (InvalidMediaTypeException ex) {, +			return null;, +		}, +		Set<ConsumeMediaTypeExpression> result = new LinkedHashSet<ConsumeMediaTypeExpression>(this.expressions);, +			if (!expression.match(contentType)) {, +		public final boolean match(MediaType contentType) {, +			boolean match = getMediaType().includes(contentType);, +			return (!isNegated() ? match : !match);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/AbstractMediaTypeExpression.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/AbstractRequestCondition.java, + * Copyright 2002-2016 the original author or authors., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.java, +import org.springframework.web.HttpMediaTypeException;, +		MediaType contentType;, +		try {, +			contentType = StringUtils.hasLength(request.getContentType()) ?, +					MediaType.parseMediaType(request.getContentType()) :, +					MediaType.APPLICATION_OCTET_STREAM;, +		}, +		catch (InvalidMediaTypeException ex) {, +			return null;, +		}, +		Set<ConsumeMediaTypeExpression> result = new LinkedHashSet<ConsumeMediaTypeExpression>(this.expressions);, +			if (!expression.match(contentType)) {, +		public final boolean match(MediaType contentType) {, +			boolean match = getMediaType().includes(contentType);, +			return (!isNegated() ? match : !match);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ProducesRequestCondition.java, +	private static final ProducesRequestCondition EMPTY_CONDITION = new ProducesRequestCondition();, +, +		List<MediaType> acceptedMediaTypes;, +		try {, +			acceptedMediaTypes = getAcceptedMediaTypes(request);, +		}, +		catch (HttpMediaTypeException ex) {, +			return null;, +		}, +			if (!expression.match(acceptedMediaTypes)) {, +		else if (acceptedMediaTypes.contains(MediaType.ALL)) {, +			return EMPTY_CONDITION;, +		else {, +	}, +		public final boolean match(List<MediaType> acceptedMediaTypes) {, +			boolean match = matchMediaType(acceptedMediaTypes);, +			return (!isNegated() ? match : !match);, +		}, +, +		private boolean matchMediaType(List<MediaType> acceptedMediaTypes) {]