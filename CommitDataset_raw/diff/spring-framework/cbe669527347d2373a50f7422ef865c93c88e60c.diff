[+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/FormatterRegistry.java, + * TODO - consider moving to ui.format, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/FormatterRegistry.java, + * TODO - consider moving to ui.format, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/GenericFormatterRegistry.java, +import java.util.concurrent.ConcurrentHashMap;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.ui.format.Formatted;, +	private Map<Class, Formatter> typeFormatters = new ConcurrentHashMap<Class, Formatter>();, +			Formatted formatted = AnnotationUtils.findAnnotation(propertyType.getType(), Formatted.class);, +			if (formatted != null) {, +				Class formatterClass = formatted.value();, +				try {, +					formatter = (Formatter) formatterClass.newInstance();, +				} catch (InstantiationException e) {, +					// TODO better runtime exception, +					throw new IllegalStateException(e);, +				} catch (IllegalAccessException e) {, +					throw new IllegalStateException(e);, +				}, +				typeFormatters.put(propertyType.getType(), formatter);, +				return formatter;, +			} else {, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/FormatterRegistry.java, + * TODO - consider moving to ui.format, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/GenericFormatterRegistry.java, +import java.util.concurrent.ConcurrentHashMap;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.ui.format.Formatted;, +	private Map<Class, Formatter> typeFormatters = new ConcurrentHashMap<Class, Formatter>();, +			Formatted formatted = AnnotationUtils.findAnnotation(propertyType.getType(), Formatted.class);, +			if (formatted != null) {, +				Class formatterClass = formatted.value();, +				try {, +					formatter = (Formatter) formatterClass.newInstance();, +				} catch (InstantiationException e) {, +					// TODO better runtime exception, +					throw new IllegalStateException(e);, +				} catch (IllegalAccessException e) {, +					throw new IllegalStateException(e);, +				}, +				typeFormatters.put(propertyType.getType(), formatter);, +				return formatter;, +			} else {, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/Formatted.java, +/*, + * Copyright 2004-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.ui.format;, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +/**, + * A type that can be formatted as a String for display in a UI., + */, +@Target({ElementType.TYPE}), +@Retention(RetentionPolicy.RUNTIME), +@Documented, +public @interface Formatted {, +	, +	/**, +	 * The Formatter that handles the formatting., +	 */, +	Class<?> value();, +}, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/FormatterRegistry.java, + * TODO - consider moving to ui.format, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/GenericFormatterRegistry.java, +import java.util.concurrent.ConcurrentHashMap;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.ui.format.Formatted;, +	private Map<Class, Formatter> typeFormatters = new ConcurrentHashMap<Class, Formatter>();, +			Formatted formatted = AnnotationUtils.findAnnotation(propertyType.getType(), Formatted.class);, +			if (formatted != null) {, +				Class formatterClass = formatted.value();, +				try {, +					formatter = (Formatter) formatterClass.newInstance();, +				} catch (InstantiationException e) {, +					// TODO better runtime exception, +					throw new IllegalStateException(e);, +				} catch (IllegalAccessException e) {, +					throw new IllegalStateException(e);]