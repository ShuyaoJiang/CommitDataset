[+++ b/build.gradle, +		optional(project(":spring-messaging")), +++ b/build.gradle, +		optional(project(":spring-messaging")), +++ /dev/null, +++ b/build.gradle, +		optional(project(":spring-messaging")), +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +		optional(project(":spring-messaging")), +++ /dev/null, +++ /dev/null, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SubscriptionMethodReturnValueHandler.java, +	/**, +	 * @param messagingTemplate a messaging template for sending messages directly, +	 *	to clients, e.g. in response to a subscription, +	 */, +++ b/build.gradle, +		optional(project(":spring-messaging")), +++ /dev/null, +++ /dev/null, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SubscriptionMethodReturnValueHandler.java, +	/**, +	 * @param messagingTemplate a messaging template for sending messages directly, +	 *	to clients, e.g. in response to a subscription, +	 */, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractBrokerRegistration.java, +import java.util.List;, +	private final MessageChannel clientOutboundChannel;, +	private final List<String> destinationPrefixes;, +	public AbstractBrokerRegistration(MessageChannel clientOutboundChannel, String[] destinationPrefixes) {, +		Assert.notNull(clientOutboundChannel, "'clientOutboundChannel' is required");, +		this.clientOutboundChannel = clientOutboundChannel;, +		this.destinationPrefixes = (destinationPrefixes != null), +				? Arrays.<String>asList(destinationPrefixes) : Collections.<String>emptyList();, +	protected MessageChannel getClientOutboundChannel() {, +		return this.clientOutboundChannel;, +		return this.destinationPrefixes;, +++ b/build.gradle, +		optional(project(":spring-messaging")), +++ /dev/null, +++ /dev/null, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SubscriptionMethodReturnValueHandler.java, +	/**, +	 * @param messagingTemplate a messaging template for sending messages directly, +	 *	to clients, e.g. in response to a subscription, +	 */, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractBrokerRegistration.java, +import java.util.List;, +	private final MessageChannel clientOutboundChannel;, +	private final List<String> destinationPrefixes;, +	public AbstractBrokerRegistration(MessageChannel clientOutboundChannel, String[] destinationPrefixes) {, +		Assert.notNull(clientOutboundChannel, "'clientOutboundChannel' is required");, +		this.clientOutboundChannel = clientOutboundChannel;, +		this.destinationPrefixes = (destinationPrefixes != null), +				? Arrays.<String>asList(destinationPrefixes) : Collections.<String>emptyList();, +	protected MessageChannel getClientOutboundChannel() {, +		return this.clientOutboundChannel;, +		return this.destinationPrefixes;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.messaging.simp.config;, +, +import org.springframework.context.annotation.Bean;, +import org.springframework.messaging.Message;, +import org.springframework.messaging.simp.SimpMessagingTemplate;, +import org.springframework.messaging.simp.handler.*;, +import org.springframework.messaging.support.channel.AbstractSubscribableChannel;, +import org.springframework.messaging.support.channel.ExecutorSubscribableChannel;, +import org.springframework.messaging.support.converter.*;, +import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.MimeTypeUtils;, +, +import java.util.ArrayList;, +import java.util.List;, +, +, +/**, + * Provides essential configuration for handling messages with simple messaging, + * protocols such as STOMP., + * <p>, + * {@link #clientInboundChannel()} and {@link #clientOutboundChannel()} deliver messages, + * to and from remote clients to several message handlers such as]