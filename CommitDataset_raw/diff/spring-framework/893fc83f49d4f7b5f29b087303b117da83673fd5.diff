[+++ b/org.springframework.context.support/src/main/java/org/springframework/cache/interceptor/LazyParamAwareEvaluationContext.java, +		super(rootObject);, +, +++ b/org.springframework.context.support/src/main/java/org/springframework/cache/interceptor/LazyParamAwareEvaluationContext.java, +		super(rootObject);, +, +++ b/org.springframework.context.support/src/test/java/org/springframework/cache/config/AbstractAnnotationTest.java, +import org.springframework.cache.Cache;, +import org.springframework.cache.CacheManager;, +	protected CacheManager cm;, +, +		cm = ctx.getBean(CacheManager.class);, +	public void testMethodName(CacheableService service, String keyName), +			throws Exception {, +		Object key = new Object();, +		Object r1 = service.name(key);, +		assertSame(r1, service.name(key));, +		Cache<Object, Object> cache = cm.getCache("default");, +		// assert the method name is used, +		assertTrue(cache.containsKey(keyName));, +	}, +, +, +	@Test, +	public void testMethodName() throws Exception {, +		testMethodName(cs, "name");, +	}, +, +	@Test, +	public void testClassMethodName() throws Exception {, +		testMethodName(ccs, "namedefault");, +	}, +++ b/org.springframework.context.support/src/main/java/org/springframework/cache/interceptor/LazyParamAwareEvaluationContext.java, +		super(rootObject);, +, +++ b/org.springframework.context.support/src/test/java/org/springframework/cache/config/AbstractAnnotationTest.java, +import org.springframework.cache.Cache;, +import org.springframework.cache.CacheManager;, +	protected CacheManager cm;, +, +		cm = ctx.getBean(CacheManager.class);, +	public void testMethodName(CacheableService service, String keyName), +			throws Exception {, +		Object key = new Object();, +		Object r1 = service.name(key);, +		assertSame(r1, service.name(key));, +		Cache<Object, Object> cache = cm.getCache("default");, +		// assert the method name is used, +		assertTrue(cache.containsKey(keyName));, +	}, +, +, +	@Test, +	public void testMethodName() throws Exception {, +		testMethodName(cs, "name");, +	}, +, +	@Test, +	public void testClassMethodName() throws Exception {, +		testMethodName(ccs, "namedefault");, +	}, +++ b/org.springframework.context.support/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, +	@Cacheable(value = "default", key = "#root.methodName + #root.caches[0].name"), +	public Object name(Object arg1) {, +		return counter.getAndIncrement();, +	}, +, +++ b/org.springframework.context.support/src/main/java/org/springframework/cache/interceptor/LazyParamAwareEvaluationContext.java, +		super(rootObject);, +, +++ b/org.springframework.context.support/src/test/java/org/springframework/cache/config/AbstractAnnotationTest.java, +import org.springframework.cache.Cache;, +import org.springframework.cache.CacheManager;, +	protected CacheManager cm;, +, +		cm = ctx.getBean(CacheManager.class);, +	public void testMethodName(CacheableService service, String keyName), +			throws Exception {, +		Object key = new Object();, +		Object r1 = service.name(key);, +		assertSame(r1, service.name(key));, +		Cache<Object, Object> cache = cm.getCache("default");, +		// assert the method name is used, +		assertTrue(cache.containsKey(keyName));, +	}, +, +, +	@Test, +	public void testMethodName() throws Exception {, +		testMethodName(cs, "name");, +	}, +, +	@Test, +	public void testClassMethodName() throws Exception {, +		testMethodName(ccs, "namedefault");, +	}, +++ b/org.springframework.context.support/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, +	@Cacheable(value = "default", key = "#root.methodName + #root.caches[0].name"), +	public Object name(Object arg1) {, +		return counter.getAndIncrement();]