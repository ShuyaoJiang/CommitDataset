[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		for (Method candidate : candidates) {, +			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate) &&, +					candidate.getParameterCount() >= minNrOfArgs) {, +				if (candidate.getTypeParameters().length > 0) {, +						Class<?>[] paramTypes = candidate.getParameterTypes();, +							paramNames = pnd.getParameterNames(candidate);, +								candidate, args, getBeanClassLoader());, +						uniqueCandidate = (commonType == null && returnType == candidate.getReturnType() ?, +								candidate : null);, +					uniqueCandidate = (commonType == null ? candidate : null);, +					commonType = ClassUtils.determineCommonAncestor(candidate.getReturnType(), commonType);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		for (Method candidate : candidates) {, +			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate) &&, +					candidate.getParameterCount() >= minNrOfArgs) {, +				if (candidate.getTypeParameters().length > 0) {, +						Class<?>[] paramTypes = candidate.getParameterTypes();, +							paramNames = pnd.getParameterNames(candidate);, +								candidate, args, getBeanClassLoader());, +						uniqueCandidate = (commonType == null && returnType == candidate.getReturnType() ?, +								candidate : null);, +					uniqueCandidate = (commonType == null ? candidate : null);, +					commonType = ClassUtils.determineCommonAncestor(candidate.getReturnType(), commonType);, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +import java.util.Map;, +	public void testMapInjectionFromSameConfigurationClass() {, +		ApplicationContext ctx = new AnnotationConfigApplicationContext(MapInjectionConfiguration.class);, +		MapInjectionConfiguration bean = ctx.getBean(MapInjectionConfiguration.class);, +		assertNotNull(bean.testBeans);, +		assertEquals(1, bean.testBeans.size());, +		assertSame(ctx.getBean(Runnable.class), bean.testBeans.get("testBean"));, +	}, +, +	@Test, +	public static class MapInjectionConfiguration {, +, +		@Autowired, +		private Map<String, Runnable> testBeans;, +, +		@Bean, +		Runnable testBean() {, +			return () -> {};, +		}, +, +		// Unrelated, not to be considered as a factory method, +		private boolean testBean(boolean param) {, +			return param;, +		}, +	}, +, +	@Configuration]