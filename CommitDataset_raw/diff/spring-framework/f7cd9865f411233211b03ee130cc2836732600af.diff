[+++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathMatcher.java, + * Copyright 2002-2010 the original author or authors., +import java.util.regex.Pattern;, +, +, +, +	 * @param fullMatch whether a full pattern match is required (else a pattern match, +	 * as far as the given base path goes is sufficient), +	protected boolean doMatch(String pattern, String path, boolean fullMatch,, +, +	 * Combines two patterns into a new pattern that is returned., +	 * <p>This implementation simply concatenates the two patterns, unless the first pattern, +	 * contains a file extension match (such as {@code *.html}. In that case, the second pattern, +	 * should be included in the first, or an {@code IllegalArgumentException} is thrown., +	 * <p>For example: <table>, +, +++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathMatcher.java, + * Copyright 2002-2010 the original author or authors., +import java.util.regex.Pattern;, +, +, +, +	 * @param fullMatch whether a full pattern match is required (else a pattern match, +	 * as far as the given base path goes is sufficient), +	protected boolean doMatch(String pattern, String path, boolean fullMatch,, +, +	 * Combines two patterns into a new pattern that is returned., +	 * <p>This implementation simply concatenates the two patterns, unless the first pattern, +	 * contains a file extension match (such as {@code *.html}. In that case, the second pattern, +	 * should be included in the first, or an {@code IllegalArgumentException} is thrown., +	 * <p>For example: <table>, +, +++ b/org.springframework.core/src/main/java/org/springframework/util/PathMatcher.java, + * Copyright 2002-2010 the original author or authors., +	 * Given a full path, returns a {@link Comparator} suitable for sorting patterns, +	 * in order of explicitness for that path., +	 * <p>The full algorithm used depends on the underlying implementation, but generally,, +	 * the returned <code>Comparator</code> will, +	 * {@linkplain java.util.Collections#sort(java.util.List, java.util.Comparator) sort}, +	 * a list so that more specific patterns come before generic patterns., +]