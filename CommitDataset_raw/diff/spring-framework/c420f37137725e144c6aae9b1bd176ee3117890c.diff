[+++ b/spring-websocket/src/main/java/org/springframework/web/messaging/PubSubHeaders.java, +		Assert.notNull(originalHeaders, "originalHeaders is required");, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/PubSubHeaders.java, +		Assert.notNull(originalHeaders, "originalHeaders is required");, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/StompHeaders.java, +import java.util.concurrent.atomic.AtomicLong;, +	private static final String STOMP_ID = "id";, +	private static final AtomicLong messageIdCounter = new AtomicLong();, +, +			if (getHeaderValue(STOMP_ID) != null) {, +				super.setSubscriptionId(getHeaderValue(STOMP_ID));, +				result.set(MESSAGE_ID, getSessionId() + "-" + messageIdCounter.getAndIncrement());, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/PubSubHeaders.java, +		Assert.notNull(originalHeaders, "originalHeaders is required");, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/StompHeaders.java, +import java.util.concurrent.atomic.AtomicLong;, +	private static final String STOMP_ID = "id";, +	private static final AtomicLong messageIdCounter = new AtomicLong();, +, +			if (getHeaderValue(STOMP_ID) != null) {, +				super.setSubscriptionId(getHeaderValue(STOMP_ID));, +				result.set(MESSAGE_ID, getSessionId() + "-" + messageIdCounter.getAndIncrement());, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/support/StompWebSocketHandler.java, +				logger.error("No \"sessionId\" header in message: " + message);, +			if (session == null) {, +				logger.error("Session not found: " + message);, +			}, +			catch (Throwable t) {, +				logger.error("Failed to send " + message, t);, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/PubSubHeaders.java, +		Assert.notNull(originalHeaders, "originalHeaders is required");, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/StompHeaders.java, +import java.util.concurrent.atomic.AtomicLong;, +	private static final String STOMP_ID = "id";, +	private static final AtomicLong messageIdCounter = new AtomicLong();, +, +			if (getHeaderValue(STOMP_ID) != null) {, +				super.setSubscriptionId(getHeaderValue(STOMP_ID));, +				result.set(MESSAGE_ID, getSessionId() + "-" + messageIdCounter.getAndIncrement());, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/support/StompWebSocketHandler.java, +				logger.error("No \"sessionId\" header in message: " + message);, +			if (session == null) {, +				logger.error("Session not found: " + message);, +			}, +			catch (Throwable t) {, +				logger.error("Failed to send " + message, t);, +++ /dev/null]