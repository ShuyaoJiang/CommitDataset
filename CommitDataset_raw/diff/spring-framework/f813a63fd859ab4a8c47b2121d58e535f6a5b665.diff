[+++ b/spring-web/src/main/java/org/springframework/http/server/DefaultPathContainer.java, +	static PathContainer createFromUrlPath(String path) {, +		String separator = "/";, +				elements.add(parsePathSegment(segment));, +	private static PathSegment parsePathSegment(String segment) {, +			return new DefaultPathSegment(segment, valueToMatch, EMPTY_MAP);, +			return new DefaultPathSegment(segment, valueToMatch, parameters);, +		private final String valueToMatch;, +		private final char[] valueToMatchAsChars;, +, +		private final MultiValueMap<String, String> parameters;, +, +, +		DefaultPathSegment(String value, String valueToMatch, MultiValueMap<String, String> params) {, +			Assert.isTrue(!value.contains("/"), () -> "Invalid path segment value: " + value);, +			this.valueToMatch = valueToMatch;, +			this.valueToMatchAsChars = valueToMatch.toCharArray();, +			this.parameters = CollectionUtils.unmodifiableMultiValueMap(params);, +			return this.valueToMatch;, +			return this.valueToMatchAsChars;, +		public MultiValueMap<String, String> parameters() {, +			return this.parameters;, +		}, +, +, +		@Override, +++ b/spring-web/src/main/java/org/springframework/http/server/DefaultPathContainer.java, +	static PathContainer createFromUrlPath(String path) {, +		String separator = "/";, +				elements.add(parsePathSegment(segment));, +	private static PathSegment parsePathSegment(String segment) {, +			return new DefaultPathSegment(segment, valueToMatch, EMPTY_MAP);, +			return new DefaultPathSegment(segment, valueToMatch, parameters);, +		private final String valueToMatch;, +		private final char[] valueToMatchAsChars;, +, +		private final MultiValueMap<String, String> parameters;, +, +, +		DefaultPathSegment(String value, String valueToMatch, MultiValueMap<String, String> params) {, +			Assert.isTrue(!value.contains("/"), () -> "Invalid path segment value: " + value);, +			this.valueToMatch = valueToMatch;, +			this.valueToMatchAsChars = valueToMatch.toCharArray();, +			this.parameters = CollectionUtils.unmodifiableMultiValueMap(params);, +			return this.valueToMatch;, +			return this.valueToMatchAsChars;, +		public MultiValueMap<String, String> parameters() {, +			return this.parameters;, +		}, +, +, +		@Override, +++ b/spring-web/src/main/java/org/springframework/http/server/DefaultRequestPath.java, +		this.fullPath = PathContainer.parsePath(uri.getRawPath());, +			return PathContainer.parsePath("");, +++ b/spring-web/src/main/java/org/springframework/http/server/DefaultPathContainer.java, +	static PathContainer createFromUrlPath(String path) {, +		String separator = "/";, +				elements.add(parsePathSegment(segment));, +	private static PathSegment parsePathSegment(String segment) {, +			return new DefaultPathSegment(segment, valueToMatch, EMPTY_MAP);, +			return new DefaultPathSegment(segment, valueToMatch, parameters);, +		private final String valueToMatch;, +		private final char[] valueToMatchAsChars;, +, +		private final MultiValueMap<String, String> parameters;, +, +, +		DefaultPathSegment(String value, String valueToMatch, MultiValueMap<String, String> params) {, +			Assert.isTrue(!value.contains("/"), () -> "Invalid path segment value: " + value);, +			this.valueToMatch = valueToMatch;, +			this.valueToMatchAsChars = valueToMatch.toCharArray();, +			this.parameters = CollectionUtils.unmodifiableMultiValueMap(params);, +			return this.valueToMatch;, +			return this.valueToMatchAsChars;, +		public MultiValueMap<String, String> parameters() {, +			return this.parameters;, +		}, +, +, +		@Override, +++ b/spring-web/src/main/java/org/springframework/http/server/DefaultRequestPath.java, +		this.fullPath = PathContainer.parsePath(uri.getRawPath());, +			return PathContainer.parsePath("");, +++ b/spring-web/src/main/java/org/springframework/http/server/PathContainer.java, + * Structured representation of a URI path whose elements have been pre-parsed, + * into a sequence of {@link Separator Separator} and {@link PathSegment, + * PathSegment} elements., + * <p>An instance of this class can be created via {@link #parsePath(String)}., + * Each {@link PathSegment PathSegment} exposes its structure decoded, + * safely without the risk of encoded reserved characters altering the path or, + * segment structure and without path parameters for path matching purposes., +	static PathContainer parsePath(String path) {, +++ b/spring-web/src/main/java/org/springframework/http/server/DefaultPathContainer.java, +	static PathContainer createFromUrlPath(String path) {, +		String separator = "/";, +				elements.add(parsePathSegment(segment));, +	private static PathSegment parsePathSegment(String segment) {, +			return new DefaultPathSegment(segment, valueToMatch, EMPTY_MAP);, +			return new DefaultPathSegment(segment, valueToMatch, parameters);]