[+++ b/spring-core/src/main/java/org/springframework/util/Assert.java, +	 * Assert a boolean expression, throwing an {@code IllegalStateException}, +	 * if the expression evaluates to {@code false}., +	 * <p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}, +	 * on an assertion failure., +	 * <pre class="code">, +	 * Assert.state(id == null,, +	 *     () -&gt; "ID for " + entity.getName() + " must not already be initialized");, +	 * </pre>, +	 * @param expression a boolean expression, +	 * @param messageSupplier a supplier for the exception message to use if the, +	 * assertion fails, +	 * @throws IllegalStateException if {@code expression} is {@code false}, +	 * @since 5.0, +	 */, +	public static void state(boolean expression, Supplier<String> messageSupplier) {, +		if (!expression) {, +			throw new IllegalStateException(nullSafeGet(messageSupplier));, +		}, +	}, +, +	/**, +	 * Assert a boolean expression, throwing an {@code IllegalStateException}, +	 * if the expression evaluates to {@code false}., +	 * <p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}, +	 * on an assertion failure., +	 * <pre class="code">Assert.state(id == null, "The id property must not already be initialized");</pre>, +	 * @param expression a boolean expression, +	 * @param message the exception message to use if the assertion fails, +	 * @throws IllegalStateException if {@code expression} is {@code false}, +	 */, +	public static void state(boolean expression, String message) {, +		if (!expression) {, +			throw new IllegalStateException(message);, +		}, +	}, +, +	/**, +	 * @deprecated as of 4.3.7, in favor of {@link #state(boolean, String)}, +	 */, +	@Deprecated, +	public static void state(boolean expression) {, +		state(expression, "[Assertion failed] - this state invariant must be true");, +	}, +, +	/**, +	 * assertion fails. See {@link #isInstanceOf(Class, Object, String)} for details., +	 * <pre class="code">Assert.instanceOf(Foo.class, foo, "Foo expected");</pre>, +	 * @param message a message which will be prepended to provide further context., +	 * If it is empty or ends in ":" or ";" or "," or ".", a full exception message, +	 * will be appended. If it ends in a space, the name of the offending object's, +	 * type will be appended. In any other case, a ":" with a space and the name, +	 * of the offending object's type will be appended., +	 * Assert.isAssignable(Number.class, myClass, () -&gt; "Processing " + myAttributeName + ":");, +	 * assertion fails. See {@link #isAssignable(Class, Class, String)} for details., +	 * <pre class="code">Assert.isAssignable(Number.class, myClass, "Number expected");</pre>, +	 * @param message a message which will be prepended to provide further context., +	 * If it is empty or ends in ":" or ";" or "," or ".", a full exception message, +	 * will be appended. If it ends in a space, the name of the offending sub type, +	 * will be appended. In any other case, a ":" with a space and the name of the, +	 * offending sub type will be appended., +, +	private static void instanceCheckFailed(Class<?> type, Object obj, String msg) {, +		String className = (obj != null ? obj.getClass().getName() : "null");, +		String result = "";, +		boolean defaultMessage = true;, +		if (StringUtils.hasLength(msg)) {, +			if (endsWithSeparator(msg)) {, +				result = msg + " ";, +			}, +			else {, +				result = messageWithTypeName(msg, className);, +				defaultMessage = false;, +			}, +		}, +		if (defaultMessage) {, +			result = result + ("Object of class [" + className + "] must be an instance of " + type);, +		}, +		throw new IllegalArgumentException(result);, +	private static void assignableCheckFailed(Class<?> superType, Class<?> subType, String msg) {, +		String result = "";, +		boolean defaultMessage = true;, +		if (StringUtils.hasLength(msg)) {, +			if (endsWithSeparator(msg)) {, +				result = msg + " ";, +			else {, +				result = messageWithTypeName(msg, subType);, +				defaultMessage = false;, +			}, +		}, +		if (defaultMessage) {, +			result = result + (subType + " is not assignable to " + superType);, +		}, +		throw new IllegalArgumentException(result);, +	private static boolean endsWithSeparator(String msg) {, +		return (msg.endsWith(":") || msg.endsWith(";") || msg.endsWith(",") || msg.endsWith("."));, +	private static String messageWithTypeName(String msg, Object typeName) {, +		return msg + (msg.endsWith(" ") ? "" : ": ") + typeName;, +++ b/spring-core/src/main/java/org/springframework/util/Assert.java, +	 * Assert a boolean expression, throwing an {@code IllegalStateException}]