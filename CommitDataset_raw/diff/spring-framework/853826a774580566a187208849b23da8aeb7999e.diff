[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, + * Copyright 2002-2013 the original author or authors., +import java.util.Collections;, +import java.util.Set;, +	private final Set<String> targetSourcedBeans =, +			Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>(16));, +	private final Set<Object> earlyProxyReferences =, +			Collections.newSetFromMap(new ConcurrentHashMap<Object, Boolean>(16));, +		this.earlyProxyReferences.add(cacheKey);, +		if (beanName == null || !this.targetSourcedBeans.contains(beanName)) {, +				this.targetSourcedBeans.add(beanName);, +			if (!this.earlyProxyReferences.contains(cacheKey)) {, +		if (beanName != null && this.targetSourcedBeans.contains(beanName)) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, + * Copyright 2002-2013 the original author or authors., +import java.util.Collections;, +import java.util.Set;, +	private final Set<String> targetSourcedBeans =, +			Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>(16));, +	private final Set<Object> earlyProxyReferences =, +			Collections.newSetFromMap(new ConcurrentHashMap<Object, Boolean>(16));, +		this.earlyProxyReferences.add(cacheKey);, +		if (beanName == null || !this.targetSourcedBeans.contains(beanName)) {, +				this.targetSourcedBeans.add(beanName);, +			if (!this.earlyProxyReferences.contains(cacheKey)) {, +		if (beanName != null && this.targetSourcedBeans.contains(beanName)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/RequiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2013 the original author or authors., +import java.util.Collections;, +import java.util.Set;, +	private final Set<String> validatedBeanNames =, +			Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>(64));, +		if (!this.validatedBeanNames.contains(beanName)) {, +			this.validatedBeanNames.add(beanName);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, + * Copyright 2002-2013 the original author or authors., +import java.util.Collections;, +import java.util.Set;, +	private final Set<String> targetSourcedBeans =, +			Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>(16));, +	private final Set<Object> earlyProxyReferences =, +			Collections.newSetFromMap(new ConcurrentHashMap<Object, Boolean>(16));, +		this.earlyProxyReferences.add(cacheKey);, +		if (beanName == null || !this.targetSourcedBeans.contains(beanName)) {, +				this.targetSourcedBeans.add(beanName);, +			if (!this.earlyProxyReferences.contains(cacheKey)) {, +		if (beanName != null && this.targetSourcedBeans.contains(beanName)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/RequiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2013 the original author or authors., +import java.util.Collections;, +import java.util.Set;, +	private final Set<String> validatedBeanNames =, +			Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>(64));, +		if (!this.validatedBeanNames.contains(beanName)) {, +			this.validatedBeanNames.add(beanName);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/PropertyOverrideConfigurer.java, + * Copyright 2002-2013 the original author or authors., +import java.util.Collections;, +import java.util.Set;, +	private final Set<String> beanNames = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>(16));, +		this.beanNames.add(beanName);, +		return this.beanNames.contains(beanName);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, + * Copyright 2002-2013 the original author or authors., +import java.util.Collections;, +import java.util.Set;, +	private final Set<String> targetSourcedBeans =, +			Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>(16));, +	private final Set<Object> earlyProxyReferences =, +			Collections.newSetFromMap(new ConcurrentHashMap<Object, Boolean>(16));, +		this.earlyProxyReferences.add(cacheKey);, +		if (beanName == null || !this.targetSourcedBeans.contains(beanName)) {, +				this.targetSourcedBeans.add(beanName);, +			if (!this.earlyProxyReferences.contains(cacheKey)) {, +		if (beanName != null && this.targetSourcedBeans.contains(beanName)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/RequiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2013 the original author or authors., +import java.util.Collections;, +import java.util.Set;, +	private final Set<String> validatedBeanNames =, +			Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>(64));, +		if (!this.validatedBeanNames.contains(beanName)) {, +			this.validatedBeanNames.add(beanName);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/PropertyOverrideConfigurer.java, + * Copyright 2002-2013 the original author or authors., +import java.util.Collections;, +import java.util.Set;, +	private final Set<String> beanNames = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>(16));, +		this.beanNames.add(beanName);, +		return this.beanNames.contains(beanName);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +import java.util.Collections;, +	private final Set<String> alreadyCreated = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>(64));, +		this.alreadyCreated.add(beanName);, +		return this.alreadyCreated.contains(beanName);, +		if (!this.alreadyCreated.contains(beanName)) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, + * Copyright 2002-2013 the original author or authors., +import java.util.Collections;, +import java.util.Set;]