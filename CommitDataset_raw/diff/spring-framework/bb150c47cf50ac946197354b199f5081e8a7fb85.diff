[+++ b/build.gradle, +	ext.undertowVersion      = "1.1.0.Final", +++ b/build.gradle, +	ext.undertowVersion      = "1.1.0.Final", +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/UndertowRequestUpgradeStrategy.java, +import javax.websocket.server.ServerEndpointConfig;, +import io.undertow.util.PathTemplate;, +import io.undertow.websockets.jsr.annotated.AnnotatedEndpointFactory;, +	private static final Constructor<ConfiguredServerEndpoint> endpointConstructor;, +, +	private static final boolean undertow11Present;, +, +		Class<ServletWebSocketHttpExchange> exchangeType = ServletWebSocketHttpExchange.class;, +		Class<?>[] exchangeParamTypes = new Class<?>[] {HttpServletRequest.class, HttpServletResponse.class, Set.class};, +		if (ClassUtils.hasConstructor(exchangeType, exchangeParamTypes)) {, +			exchangeConstructor = ClassUtils.getConstructorIfAvailable(exchangeType, exchangeParamTypes);, +			exchangeParamTypes = new Class<?>[] {HttpServletRequest.class, HttpServletResponse.class};, +			exchangeConstructor = ClassUtils.getConstructorIfAvailable(exchangeType, exchangeParamTypes);, +, +		Class<ConfiguredServerEndpoint> endpointType = ConfiguredServerEndpoint.class;, +		Class<?>[] endpointParamTypes = new Class<?>[] {ServerEndpointConfig.class, InstanceFactory.class,, +				PathTemplate.class, EncodingFactory.class, AnnotatedEndpointFactory.class};, +		if (ClassUtils.hasConstructor(endpointType, endpointParamTypes)) {, +			endpointConstructor = ClassUtils.getConstructorIfAvailable(endpointType, endpointParamTypes);, +			undertow11Present = true;, +		}, +		else {, +			endpointParamTypes = new Class<?>[] {ServerEndpointConfig.class, InstanceFactory.class,, +					PathTemplate.class, EncodingFactory.class};, +			endpointConstructor = ClassUtils.getConstructorIfAvailable(endpointType, endpointParamTypes);, +			undertow11Present = false;, +		}, +		EncodingFactory encodingFactory = new EncodingFactory(, +				Collections.<Class<?>, List<InstanceFactory<? extends Decoder>>>emptyMap());, +		try {, +			return undertow11Present ?, +					endpointConstructor.newInstance(endpointRegistration,, +						new EndpointInstanceFactory(endpoint), null, encodingFactory, null) :, +					endpointConstructor.newInstance(endpointRegistration,, +						new EndpointInstanceFactory(endpoint), null, encodingFactory);, +		}, +		catch (Exception ex) {, +			throw new HandshakeFailureException("Failed to instantiate ConfiguredServerEndpoint", ex);, +		}]