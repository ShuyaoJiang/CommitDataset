[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +			assertWithDiagnostics(() -> assertTrue("Expected empty body", buffer == null));, +			this.result.assertWithDiagnostics(() -> consumer.accept(this.result));, +			Object actual = this.result.getResponseBody();, +			this.result.assertWithDiagnostics(() -> assertEquals("Response body", expected, actual));, +			List<?> actual = this.result.getResponseBody();, +			this.result.assertWithDiagnostics(() -> assertEquals("Response body", expected, actual));, +			List<?> expected = Arrays.asList(elements);, +			List<?> actual = this.result.getResponseBody();, +			String message = "Response body does not contain " + expected;, +			this.result.assertWithDiagnostics(() -> assertTrue(message, actual.containsAll(expected)));, +			List<?> expected = Arrays.asList(elements);, +			List<?> actual = this.result.getResponseBody();, +			String message = "Response body should have contained " + expected;, +			this.result.assertWithDiagnostics(() -> assertTrue(message, !actual.containsAll(expected)));, +			String message = "Response body map";, +			this.result.assertWithDiagnostics(() -> assertEquals(message, expected, getBody()));, +			String message = "Response body map size";, +			this.result.assertWithDiagnostics(() -> assertEquals(message, size, getBody().size()));, +			String message = "Response body map value for key " + key;, +			this.result.assertWithDiagnostics(() -> assertEquals(message, value, getBody().get(key)));, +			String message = "Response body map does not contain keys " + missing;, +			this.result.assertWithDiagnostics(() -> assertTrue(message, missing.isEmpty()));, +			String message = "Response body map does not contain values " + missing;, +			this.result.assertWithDiagnostics(() -> assertTrue(message, missing.isEmpty()));, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +			assertWithDiagnostics(() -> assertTrue("Expected empty body", buffer == null));, +			this.result.assertWithDiagnostics(() -> consumer.accept(this.result));, +			Object actual = this.result.getResponseBody();, +			this.result.assertWithDiagnostics(() -> assertEquals("Response body", expected, actual));, +			List<?> actual = this.result.getResponseBody();, +			this.result.assertWithDiagnostics(() -> assertEquals("Response body", expected, actual));, +			List<?> expected = Arrays.asList(elements);, +			List<?> actual = this.result.getResponseBody();, +			String message = "Response body does not contain " + expected;, +			this.result.assertWithDiagnostics(() -> assertTrue(message, actual.containsAll(expected)));, +			List<?> expected = Arrays.asList(elements);, +			List<?> actual = this.result.getResponseBody();, +			String message = "Response body should have contained " + expected;, +			this.result.assertWithDiagnostics(() -> assertTrue(message, !actual.containsAll(expected)));, +			String message = "Response body map";, +			this.result.assertWithDiagnostics(() -> assertEquals(message, expected, getBody()));, +			String message = "Response body map size";, +			this.result.assertWithDiagnostics(() -> assertEquals(message, size, getBody().size()));, +			String message = "Response body map value for key " + key;, +			this.result.assertWithDiagnostics(() -> assertEquals(message, value, getBody().get(key)));, +			String message = "Response body map does not contain keys " + missing;, +			this.result.assertWithDiagnostics(() -> assertTrue(message, missing.isEmpty()));, +			String message = "Response body map does not contain values " + missing;, +			this.result.assertWithDiagnostics(() -> assertTrue(message, missing.isEmpty()));, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java, + * Provides access to request and response details from an exchange performed, + * <p>When an {@code ExchangeResult} is first created it has the status and the, + * headers of the response ready. Later when the response body is extracted,, + * the {@code ExchangeResult} is re-created as {@link EntityExchangeResult} or, + * {@link FluxExchangeResult} also exposing the extracted entities., + * <p>Serialized request and response content may also be accessed through the, + * methods {@link #getRequestContent()} and {@link #getResponseContent()} after, + * that content has been fully read or written., +	 * Execute the given Runnable, catch any {@link AssertionError}, decorate, +	 * with {@code AssertionError} containing diagnostic information about the, +	 * request and response, and then re-throw., +				"> " + formatHeaders(getRequestHeaders(), "\n> ") + "\n" +, +				formatBody(getRequestHeaders().getContentType(), getRequestContent()) + "\n" +, +				"< " + formatHeaders(getResponseHeaders(), "\n< ") + "\n" +, +				formatBody(getResponseHeaders().getContentType(), getResponseContent()) + "\n\n";, +	private String formatHeaders(HttpHeaders headers, String delimiter) {, +				.collect(Collectors.joining(delimiter));, +	private String formatBody(MediaType contentType, MonoProcessor<byte[]> body) {, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +			assertWithDiagnostics(() -> assertTrue("Expected empty body", buffer == null));, +			this.result.assertWithDiagnostics(() -> consumer.accept(this.result));, +			Object actual = this.result.getResponseBody();, +			this.result.assertWithDiagnostics(() -> assertEquals("Response body", expected, actual));, +			List<?> actual = this.result.getResponseBody();, +			this.result.assertWithDiagnostics(() -> assertEquals("Response body", expected, actual));, +			List<?> expected = Arrays.asList(elements);, +			List<?> actual = this.result.getResponseBody();, +			String message = "Response body does not contain " + expected;, +			this.result.assertWithDiagnostics(() -> assertTrue(message, actual.containsAll(expected)));, +			List<?> expected = Arrays.asList(elements);, +			List<?> actual = this.result.getResponseBody();, +			String message = "Response body should have contained " + expected;, +			this.result.assertWithDiagnostics(() -> assertTrue(message, !actual.containsAll(expected)));, +			String message = "Response body map";, +			this.result.assertWithDiagnostics(() -> assertEquals(message, expected, getBody()));, +			String message = "Response body map size";, +			this.result.assertWithDiagnostics(() -> assertEquals(message, size, getBody().size()));, +			String message = "Response body map value for key " + key;, +			this.result.assertWithDiagnostics(() -> assertEquals(message, value, getBody().get(key)));, +			String message = "Response body map does not contain keys " + missing;, +			this.result.assertWithDiagnostics(() -> assertTrue(message, missing.isEmpty()));, +			String message = "Response body map does not contain values " + missing;, +			this.result.assertWithDiagnostics(() -> assertTrue(message, missing.isEmpty()));, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java, + * Provides access to request and response details from an exchange performed, + * <p>When an {@code ExchangeResult} is first created it has the status and the, + * headers of the response ready. Later when the response body is extracted,, + * the {@code ExchangeResult} is re-created as {@link EntityExchangeResult} or, + * {@link FluxExchangeResult} also exposing the extracted entities.]