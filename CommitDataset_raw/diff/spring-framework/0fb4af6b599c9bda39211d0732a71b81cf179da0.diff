[+++ b/org.springframework.context/src/main/java/org/springframework/context/event/GenericApplicationListenerAdapter.java, +import org.springframework.aop.support.AopUtils;, +		if (typeArg == null || typeArg.equals(ApplicationEvent.class)) {, +			Class targetClass = AopUtils.getTargetClass(this.delegate);, +			if (targetClass != this.delegate.getClass()) {, +				typeArg = GenericTypeResolver.resolveTypeArgument(targetClass, ApplicationListener.class);, +			}, +		}, +++ b/org.springframework.context/src/main/java/org/springframework/context/event/GenericApplicationListenerAdapter.java, +import org.springframework.aop.support.AopUtils;, +		if (typeArg == null || typeArg.equals(ApplicationEvent.class)) {, +			Class targetClass = AopUtils.getTargetClass(this.delegate);, +			if (targetClass != this.delegate.getClass()) {, +				typeArg = GenericTypeResolver.resolveTypeArgument(targetClass, ApplicationListener.class);, +			}, +		}, +++ b/org.springframework.context/src/test/java/org/springframework/context/event/ApplicationContextEventTests.java, +import org.springframework.aop.framework.ProxyFactory;, +	public void proxiedListeners() {, +		MyOrderedListener1 listener1 = new MyOrderedListener1();, +		MyOrderedListener2 listener2 = new MyOrderedListener2(listener1);, +		ApplicationListener proxy1 = (ApplicationListener) new ProxyFactory(listener1).getProxy();, +		ApplicationListener proxy2 = (ApplicationListener) new ProxyFactory(listener2).getProxy();, +, +		SimpleApplicationEventMulticaster smc = new SimpleApplicationEventMulticaster();, +		smc.addApplicationListener(proxy1);, +		smc.addApplicationListener(proxy2);, +, +		smc.multicastEvent(new MyEvent(this));, +		smc.multicastEvent(new MyOtherEvent(this));, +	}, +, +	@Test, +++ b/org.springframework.context/src/main/java/org/springframework/context/event/GenericApplicationListenerAdapter.java, +import org.springframework.aop.support.AopUtils;, +		if (typeArg == null || typeArg.equals(ApplicationEvent.class)) {, +			Class targetClass = AopUtils.getTargetClass(this.delegate);, +			if (targetClass != this.delegate.getClass()) {, +				typeArg = GenericTypeResolver.resolveTypeArgument(targetClass, ApplicationListener.class);, +			}, +		}, +++ b/org.springframework.context/src/test/java/org/springframework/context/event/ApplicationContextEventTests.java, +import org.springframework.aop.framework.ProxyFactory;, +	public void proxiedListeners() {, +		MyOrderedListener1 listener1 = new MyOrderedListener1();, +		MyOrderedListener2 listener2 = new MyOrderedListener2(listener1);, +		ApplicationListener proxy1 = (ApplicationListener) new ProxyFactory(listener1).getProxy();, +		ApplicationListener proxy2 = (ApplicationListener) new ProxyFactory(listener2).getProxy();, +, +		SimpleApplicationEventMulticaster smc = new SimpleApplicationEventMulticaster();, +		smc.addApplicationListener(proxy1);, +		smc.addApplicationListener(proxy2);, +, +		smc.multicastEvent(new MyEvent(this));, +		smc.multicastEvent(new MyOtherEvent(this));, +	}, +, +	@Test, +++ b/org.springframework.core/src/main/java/org/springframework/core/GenericTypeResolver.java, +								TypeVariable tv = (TypeVariable) arg;, +								arg = getTypeVariableMap(ownerClass).get(tv);, +								if (arg == null) {, +									arg = extractBoundForTypeVariable(tv);, +								}]