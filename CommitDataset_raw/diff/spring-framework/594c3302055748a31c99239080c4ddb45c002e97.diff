[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		if (annotatedElement instanceof Class) {, +			Class<?> superclass = ((Class<?>) annotatedElement).getSuperclass();, +			if ((superclass != null) && (Object.class != superclass)) {, +				return getRepeatableAnnotations(superclass, annotationType, containerAnnotationType);, +			}, +		}, +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		if (annotatedElement instanceof Class) {, +			Class<?> superclass = ((Class<?>) annotatedElement).getSuperclass();, +			if ((superclass != null) && (Object.class != superclass)) {, +				return getRepeatableAnnotations(superclass, annotationType, containerAnnotationType);, +			}, +		}, +, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java, +	public void getRepeatableAnnotationsDeclaredOnMultipleSuperclasses() {, +		final Class<?> clazz = SubSubMyRepeatableWithAdditionalLocalDeclarationsClass.class;, +		final List<String> expectedValuesJava = Arrays.asList("X", "Y", "Z");, +		final List<String> expectedValuesSpring = Arrays.asList("X", "Y", "Z", "meta2");, +, +		// Java 8, +		MyRepeatable[] array = clazz.getAnnotationsByType(MyRepeatable.class);, +		assertNotNull(array);, +		List<String> values = stream(array).map(MyRepeatable::value).collect(toList());, +		assertThat(values, is(expectedValuesJava));, +, +		// Spring, +		Set<MyRepeatable> set = getRepeatableAnnotations(clazz, MyRepeatable.class, MyRepeatableContainer.class);, +		assertNotNull(set);, +		values = set.stream().map(MyRepeatable::value).collect(toList());, +		assertThat(values, is(expectedValuesSpring));, +	}, +, +	@Test, +	static class SubSubMyRepeatableWithAdditionalLocalDeclarationsClass extends, +			SubMyRepeatableWithAdditionalLocalDeclarationsClass {, +	}, +]