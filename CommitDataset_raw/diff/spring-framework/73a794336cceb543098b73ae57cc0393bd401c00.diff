[+++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/ResponseStatus.java, + * Copyright 2002-2016 the original author or authors., + * <p>Note that a controller class may also be annotated with, + * {@code @ResponseStatus} and is then inherited by all {@code @RequestMapping}, + * methods., + *, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/ResponseStatus.java, + * Copyright 2002-2016 the original author or authors., + * <p>Note that a controller class may also be annotated with, + * {@code @ResponseStatus} and is then inherited by all {@code @RequestMapping}, + * methods., + *, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.annotation.AnnotatedElementUtils;, +		if (annotation == null) {, +			annotation = AnnotatedElementUtils.findMergedAnnotation(getBeanType(), ResponseStatus.class);, +		}, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/ResponseStatus.java, + * Copyright 2002-2016 the original author or authors., + * <p>Note that a controller class may also be annotated with, + * {@code @ResponseStatus} and is then inherited by all {@code @RequestMapping}, + * methods., + *, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.annotation.AnnotatedElementUtils;, +		if (annotation == null) {, +			annotation = AnnotatedElementUtils.findMergedAnnotation(getBeanType(), ResponseStatus.class);, +		}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethodTests.java, + * Copyright 2002-2016 the original author or authors., +	public void invokeAndHandle_VoidWithTypeLevelResponseStatus() throws Exception {, +		ServletInvocableHandlerMethod handlerMethod = getHandlerMethod(new ResponseStatusHandler(), "handle");, +		handlerMethod.invokeAndHandle(this.webRequest, this.mavContainer);, +, +		assertTrue(this.mavContainer.isRequestHandled());, +		assertEquals(HttpStatus.BAD_REQUEST.value(), this.response.getStatus());, +	}, +, +	@Test, +		List<HttpMessageConverter<?>> converters = new ArrayList<>();, +		List<HttpMessageConverter<?>> converters = new ArrayList<>();, +		List<HttpMessageConverter<?>> converters = new ArrayList<>();, +		List<HttpMessageConverter<?>> converters = new ArrayList<>();, +		List<HttpMessageConverter<?>> converters = new ArrayList<>();, +	@SuppressWarnings("unused"), +	@SuppressWarnings("unused"), +	@ResponseStatus(HttpStatus.BAD_REQUEST), +	private static class ResponseStatusHandler {, +, +		public void handle() {, +		}, +	}, +, +			return new DeferredResult<>();, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/ResponseStatus.java, + * Copyright 2002-2016 the original author or authors., + * <p>Note that a controller class may also be annotated with, + * {@code @ResponseStatus} and is then inherited by all {@code @RequestMapping}, + * methods., + *, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.annotation.AnnotatedElementUtils;, +		if (annotation == null) {, +			annotation = AnnotatedElementUtils.findMergedAnnotation(getBeanType(), ResponseStatus.class);, +		}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethodTests.java, + * Copyright 2002-2016 the original author or authors., +	public void invokeAndHandle_VoidWithTypeLevelResponseStatus() throws Exception {, +		ServletInvocableHandlerMethod handlerMethod = getHandlerMethod(new ResponseStatusHandler(), "handle");, +		handlerMethod.invokeAndHandle(this.webRequest, this.mavContainer);, +, +		assertTrue(this.mavContainer.isRequestHandled());, +		assertEquals(HttpStatus.BAD_REQUEST.value(), this.response.getStatus());, +	}, +, +	@Test, +		List<HttpMessageConverter<?>> converters = new ArrayList<>();, +		List<HttpMessageConverter<?>> converters = new ArrayList<>();, +		List<HttpMessageConverter<?>> converters = new ArrayList<>();, +		List<HttpMessageConverter<?>> converters = new ArrayList<>();, +		List<HttpMessageConverter<?>> converters = new ArrayList<>();, +	@SuppressWarnings("unused"), +	@SuppressWarnings("unused"), +	@ResponseStatus(HttpStatus.BAD_REQUEST), +	private static class ResponseStatusHandler {, +, +		public void handle() {, +		}, +	}, +, +			return new DeferredResult<>();, +++ b/src/asciidoc/whats-new.adoc, +* `@ResponseStatus` can be used on a controller type is inherited for all method.]