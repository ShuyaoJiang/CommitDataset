[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractStompEndpointRegistration.java, +			return super.getSockJsService();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractStompEndpointRegistration.java, +			return super.getSockJsService();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/config/AbstractWebSocketHandlerRegistration.java, +			SockJsService sockJsService = this.sockJsServiceRegistration.getSockJsService();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractStompEndpointRegistration.java, +			return super.getSockJsService();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/config/AbstractWebSocketHandlerRegistration.java, +			SockJsService sockJsService = this.sockJsServiceRegistration.getSockJsService();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/config/SockJsServiceRegistration.java, +	protected SockJsService getSockJsService() {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractStompEndpointRegistration.java, +			return super.getSockJsService();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/config/AbstractWebSocketHandlerRegistration.java, +			SockJsService sockJsService = this.sockJsServiceRegistration.getSockJsService();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/config/SockJsServiceRegistration.java, +	protected SockJsService getSockJsService() {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/SockJsHttpRequestHandler.java, +import org.springframework.web.servlet.HandlerMapping;, +			this.sockJsService.handleRequest(request, response, getSockJsPath(servletRequest), this.wsHandler);, +	private String getSockJsPath(HttpServletRequest servletRequest) {, +		String attribute = HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;, +		String path = (String) servletRequest.getAttribute(attribute);, +		return ((path.length() > 0) && (path.charAt(0) != '/')) ? "/" + path : path;, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractStompEndpointRegistration.java, +			return super.getSockJsService();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/config/AbstractWebSocketHandlerRegistration.java, +			SockJsService sockJsService = this.sockJsServiceRegistration.getSockJsService();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/config/SockJsServiceRegistration.java, +	protected SockJsService getSockJsService() {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/SockJsHttpRequestHandler.java, +import org.springframework.web.servlet.HandlerMapping;, +			this.sockJsService.handleRequest(request, response, getSockJsPath(servletRequest), this.wsHandler);, +	private String getSockJsPath(HttpServletRequest servletRequest) {, +		String attribute = HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;, +		String path = (String) servletRequest.getAttribute(attribute);, +		return ((path.length() > 0) && (path.charAt(0) != '/')) ? "/" + path : path;, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/SockJsService.java, +	 * @param sockJsPath the remainder of the path within the SockJS service prefix, +	void handleRequest(ServerHttpRequest request, ServerHttpResponse response, String sockJsPath,, +			WebSocketHandler handler) throws SockJsException;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractStompEndpointRegistration.java, +			return super.getSockJsService();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/config/AbstractWebSocketHandlerRegistration.java, +			SockJsService sockJsService = this.sockJsServiceRegistration.getSockJsService();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/config/SockJsServiceRegistration.java, +	protected SockJsService getSockJsService() {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/SockJsHttpRequestHandler.java, +import org.springframework.web.servlet.HandlerMapping;, +			this.sockJsService.handleRequest(request, response, getSockJsPath(servletRequest), this.wsHandler);, +	private String getSockJsPath(HttpServletRequest servletRequest) {, +		String attribute = HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;, +		String path = (String) servletRequest.getAttribute(attribute);, +		return ((path.length() > 0) && (path.charAt(0) != '/')) ? "/" + path : path;, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/SockJsService.java, +	 * @param sockJsPath the remainder of the path within the SockJS service prefix, +	void handleRequest(ServerHttpRequest request, ServerHttpResponse response, String sockJsPath,, +			WebSocketHandler handler) throws SockJsException;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java, +			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {, +			logger.warn("No SockJS path provided, URI=\"" + request.getURI());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractStompEndpointRegistration.java, +			return super.getSockJsService();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/config/AbstractWebSocketHandlerRegistration.java, +			SockJsService sockJsService = this.sockJsServiceRegistration.getSockJsService();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/config/SockJsServiceRegistration.java, +	protected SockJsService getSockJsService() {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/SockJsHttpRequestHandler.java, +import org.springframework.web.servlet.HandlerMapping;, +			this.sockJsService.handleRequest(request, response, getSockJsPath(servletRequest), this.wsHandler);, +	private String getSockJsPath(HttpServletRequest servletRequest) {, +		String attribute = HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;, +		String path = (String) servletRequest.getAttribute(attribute);, +		return ((path.length() > 0) && (path.charAt(0) != '/')) ? "/" + path : path;, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/SockJsService.java, +	 * @param sockJsPath the remainder of the path within the SockJS service prefix, +	void handleRequest(ServerHttpRequest request, ServerHttpResponse response, String sockJsPath,, +			WebSocketHandler handler) throws SockJsException;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java, +			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {, +			logger.warn("No SockJS path provided, URI=\"" + request.getURI());, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/support/AbstractSockJsServiceTests.java, +		handleRequest("GET", "/echo/info", HttpStatus.OK);, +		handleRequest("GET", "/echo/info", HttpStatus.OK);, +		handleRequest("OPTIONS", "/echo/info", HttpStatus.NO_CONTENT);, +		handleRequest("GET", "/echo/iframe.html", HttpStatus.OK);, +		handleRequest("GET", "/echo/iframe.html", HttpStatus.NOT_MODIFIED);, +		handleRequest("GET", "/echo", HttpStatus.OK);, +		handleRequest("GET", "/echo/websocket", HttpStatus.OK);, +		String sockJsPath = uri.substring("/echo".length());, +		this.service.handleRequest(this.request, this.response, sockJsPath, this.handler);]