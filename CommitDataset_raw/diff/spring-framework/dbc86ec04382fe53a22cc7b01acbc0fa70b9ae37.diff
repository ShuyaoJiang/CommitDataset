[+++ b/spring-core/src/main/java/org/springframework/core/codec/Decoder.java, +	 * @param mimeType the mime type associated with the stream to decode, can be {@code null} if not specified., +++ b/spring-core/src/main/java/org/springframework/core/codec/Decoder.java, +	 * @param mimeType the mime type associated with the stream to decode, can be {@code null} if not specified., +++ b/spring-core/src/main/java/org/springframework/core/codec/Encoder.java, +	 * @param mimeType the MIME type for the output stream, can be {@code null} if not specified., +++ b/spring-core/src/main/java/org/springframework/core/codec/Decoder.java, +	 * @param mimeType the mime type associated with the stream to decode, can be {@code null} if not specified., +++ b/spring-core/src/main/java/org/springframework/core/codec/Encoder.java, +	 * @param mimeType the MIME type for the output stream, can be {@code null} if not specified., +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +import com.fasterxml.jackson.databind.type.TypeFactory;, +		JavaType javaType = this.mapper.getTypeFactory().constructType(elementType.getType());, +		return this.mapper.canDeserialize(javaType) &&, +				(mimeType == null || JSON_MIME_TYPES.stream().anyMatch(m -> m.isCompatibleWith(mimeType)));, +++ b/spring-core/src/main/java/org/springframework/core/codec/Decoder.java, +	 * @param mimeType the mime type associated with the stream to decode, can be {@code null} if not specified., +++ b/spring-core/src/main/java/org/springframework/core/codec/Encoder.java, +	 * @param mimeType the MIME type for the output stream, can be {@code null} if not specified., +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +import com.fasterxml.jackson.databind.type.TypeFactory;, +		JavaType javaType = this.mapper.getTypeFactory().constructType(elementType.getType());, +		return this.mapper.canDeserialize(javaType) &&, +				(mimeType == null || JSON_MIME_TYPES.stream().anyMatch(m -> m.isCompatibleWith(mimeType)));, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonEncoder.java, +		return this.mapper.canSerialize(elementType.getRawClass()) &&, +				(mimeType == null || JSON_MIME_TYPES.stream().anyMatch(m -> m.isCompatibleWith(mimeType)));, +++ b/spring-core/src/main/java/org/springframework/core/codec/Decoder.java, +	 * @param mimeType the mime type associated with the stream to decode, can be {@code null} if not specified., +++ b/spring-core/src/main/java/org/springframework/core/codec/Encoder.java, +	 * @param mimeType the MIME type for the output stream, can be {@code null} if not specified., +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +import com.fasterxml.jackson.databind.type.TypeFactory;, +		JavaType javaType = this.mapper.getTypeFactory().constructType(elementType.getType());, +		return this.mapper.canDeserialize(javaType) &&, +				(mimeType == null || JSON_MIME_TYPES.stream().anyMatch(m -> m.isCompatibleWith(mimeType)));, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonEncoder.java, +		return this.mapper.canSerialize(elementType.getRawClass()) &&, +				(mimeType == null || JSON_MIME_TYPES.stream().anyMatch(m -> m.isCompatibleWith(mimeType)));, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java, +		ResolvableType type = ResolvableType.forClass(Pojo.class);, +		assertTrue(decoder.canDecode(type, MediaType.APPLICATION_JSON));, +		assertTrue(decoder.canDecode(type, null));, +		assertFalse(decoder.canDecode(type, MediaType.APPLICATION_XML));, +++ b/spring-core/src/main/java/org/springframework/core/codec/Decoder.java, +	 * @param mimeType the mime type associated with the stream to decode, can be {@code null} if not specified., +++ b/spring-core/src/main/java/org/springframework/core/codec/Encoder.java, +	 * @param mimeType the MIME type for the output stream, can be {@code null} if not specified., +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +import com.fasterxml.jackson.databind.type.TypeFactory;, +		JavaType javaType = this.mapper.getTypeFactory().constructType(elementType.getType());, +		return this.mapper.canDeserialize(javaType) &&, +				(mimeType == null || JSON_MIME_TYPES.stream().anyMatch(m -> m.isCompatibleWith(mimeType)));, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonEncoder.java, +		return this.mapper.canSerialize(elementType.getRawClass()) &&, +				(mimeType == null || JSON_MIME_TYPES.stream().anyMatch(m -> m.isCompatibleWith(mimeType)));, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java, +		ResolvableType type = ResolvableType.forClass(Pojo.class);, +		assertTrue(decoder.canDecode(type, MediaType.APPLICATION_JSON));, +		assertTrue(decoder.canDecode(type, null));, +		assertFalse(decoder.canDecode(type, MediaType.APPLICATION_XML));, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonEncoderTests.java, +import org.springframework.http.codec.ServerSentEvent;, +		ResolvableType pojoType = ResolvableType.forClass(Pojo.class);, +		assertTrue(this.encoder.canEncode(pojoType, MediaType.APPLICATION_JSON));, +		assertTrue(this.encoder.canEncode(pojoType, null));, +		assertFalse(this.encoder.canEncode(pojoType, MediaType.APPLICATION_XML));, +		ResolvableType sseType = ResolvableType.forClass(ServerSentEvent.class);, +		assertFalse(this.encoder.canEncode(sseType, MediaType.APPLICATION_JSON));]