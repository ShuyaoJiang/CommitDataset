[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, +, +			if(user.equals(sessionId)) {, +				user = null;, +				sessionIds = Collections.singleton(sessionId);, +			}, +			else if (this.userSessionRegistry.getSessionIds(user).contains(sessionId)) {, +				sessionIds = Collections.singleton(sessionId);, +			}, +			else {, +				sessionIds = this.userSessionRegistry.getSessionIds(user);, +			}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, +, +			if(user.equals(sessionId)) {, +				user = null;, +				sessionIds = Collections.singleton(sessionId);, +			}, +			else if (this.userSessionRegistry.getSessionIds(user).contains(sessionId)) {, +				sessionIds = Collections.singleton(sessionId);, +			}, +			else {, +				sessionIds = this.userSessionRegistry.getSessionIds(user);, +			}, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolverTests.java, +	// SPR-12444, +	@Test, +	public void handleMessageToOtherUser() {, +		final String OTHER_SESSION_ID = "456";, +		final String OTHER_USER_NAME = "anna";, +, +		String sourceDestination = "/user/"+OTHER_USER_NAME+"/queue/foo";, +		TestPrincipal otherUser = new TestPrincipal(OTHER_USER_NAME);, +		this.registry.registerSessionId(otherUser.getName(), OTHER_SESSION_ID);, +		Message<?> message = createMessage(SimpMessageType.MESSAGE, this.user, SESSION_ID, sourceDestination);, +		UserDestinationResult actual = this.resolver.resolveDestination(message);, +, +		assertEquals(sourceDestination, actual.getSourceDestination());, +		assertEquals(1, actual.getTargetDestinations().size());, +		assertEquals("/queue/foo-user" + OTHER_SESSION_ID, actual.getTargetDestinations().iterator().next());, +		assertEquals("/user/queue/foo", actual.getSubscribeDestination());, +		assertEquals(otherUser.getName(), actual.getUser());, +	}, +]