[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultServerResponseBuilder.java, +import java.util.Set;, +	private final HttpStatus statusCode;, +	public DefaultServerResponseBuilder(HttpStatus statusCode) {, +	public ServerResponse.BodyBuilder allow(Set<HttpMethod> allowedMethods) {, +		this.headers.setAllow(allowedMethods);, +		return this;, +	}, +, +	@Override, +		return body(BodyInserters.empty());, +	static abstract class AbstractServerResponse<T> implements ServerResponse<T> {, +		private final HttpStatus statusCode;, +		protected AbstractServerResponse(HttpStatus statusCode, HttpHeaders headers) {, +			return this.statusCode;, +			response.setStatusCode(this.statusCode);, +		public BodyInserterServerResponse(HttpStatus statusCode, HttpHeaders headers,, +		public RenderingServerResponse(HttpStatus statusCode, HttpHeaders headers, String name,, +				Map<String, Object> model) {, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultServerResponseBuilder.java, +import java.util.Set;, +	private final HttpStatus statusCode;, +	public DefaultServerResponseBuilder(HttpStatus statusCode) {, +	public ServerResponse.BodyBuilder allow(Set<HttpMethod> allowedMethods) {, +		this.headers.setAllow(allowedMethods);, +		return this;, +	}, +, +	@Override, +		return body(BodyInserters.empty());, +	static abstract class AbstractServerResponse<T> implements ServerResponse<T> {, +		private final HttpStatus statusCode;, +		protected AbstractServerResponse(HttpStatus statusCode, HttpHeaders headers) {, +			return this.statusCode;, +			response.setStatusCode(this.statusCode);, +		public BodyInserterServerResponse(HttpStatus statusCode, HttpHeaders headers,, +		public RenderingServerResponse(HttpStatus statusCode, HttpHeaders headers, String name,, +				Map<String, Object> model) {, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/HandlerFilterFunction.java, +import java.util.function.Function;, +, +	/**, +	 * Adapt the given request processor function to a filter function that only operates on the, +	 * {@code ClientRequest}., +	 * @param requestProcessor the request processor, +	 * @return the filter adaptation of the request processor, +	 */, +	static HandlerFilterFunction<?, ?> ofRequestProcessor(Function<ServerRequest,, +				ServerRequest> requestProcessor) {, +, +		Assert.notNull(requestProcessor, "'requestProcessor' must not be null");, +		return (request, next) -> next.handle(requestProcessor.apply(request));, +	}, +, +	/**, +	 * Adapt the given response processor function to a filter function that only operates on the, +	 * {@code ClientResponse}., +	 * @param responseProcessor the response processor, +	 * @return the filter adaptation of the request processor, +	 */, +	static <T, R> HandlerFilterFunction<T, R> ofResponseProcessor(Function<ServerResponse<T>,, +			ServerResponse<R>> responseProcessor) {, +, +		Assert.notNull(responseProcessor, "'responseProcessor' must not be null");, +		return (request, next) -> responseProcessor.apply(next.handle(request));, +	}, +, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultServerResponseBuilder.java, +import java.util.Set;, +	private final HttpStatus statusCode;, +	public DefaultServerResponseBuilder(HttpStatus statusCode) {, +	public ServerResponse.BodyBuilder allow(Set<HttpMethod> allowedMethods) {, +		this.headers.setAllow(allowedMethods);, +		return this;, +	}, +, +	@Override, +		return body(BodyInserters.empty());, +	static abstract class AbstractServerResponse<T> implements ServerResponse<T> {, +		private final HttpStatus statusCode;, +		protected AbstractServerResponse(HttpStatus statusCode, HttpHeaders headers) {, +			return this.statusCode;, +			response.setStatusCode(this.statusCode);, +		public BodyInserterServerResponse(HttpStatus statusCode, HttpHeaders headers,, +		public RenderingServerResponse(HttpStatus statusCode, HttpHeaders headers, String name,, +				Map<String, Object> model) {, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/HandlerFilterFunction.java, +import java.util.function.Function;, +, +	/**, +	 * Adapt the given request processor function to a filter function that only operates on the, +	 * {@code ClientRequest}., +	 * @param requestProcessor the request processor, +	 * @return the filter adaptation of the request processor, +	 */, +	static HandlerFilterFunction<?, ?> ofRequestProcessor(Function<ServerRequest,]