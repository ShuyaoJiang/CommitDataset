[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +			Order order = AnnotationUtils.findAnnotation(type, Order.class);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +			Order order = AnnotationUtils.findAnnotation(type, Order.class);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/SimpleMetadataAwareAspectInstanceFactory.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +		Order order = AnnotationUtils.findAnnotation(aspectClass, Order.class);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +			Order order = AnnotationUtils.findAnnotation(type, Order.class);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/SimpleMetadataAwareAspectInstanceFactory.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +		Order order = AnnotationUtils.findAnnotation(aspectClass, Order.class);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/SingletonMetadataAwareAspectInstanceFactory.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +		Order order = AnnotationUtils.findAnnotation(aspectClass, Order.class);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +			Order order = AnnotationUtils.findAnnotation(type, Order.class);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/SimpleMetadataAwareAspectInstanceFactory.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +		Order order = AnnotationUtils.findAnnotation(aspectClass, Order.class);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/SingletonMetadataAwareAspectInstanceFactory.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +		Order order = AnnotationUtils.findAnnotation(aspectClass, Order.class);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAwareOrderComparator.java, +			Order order = AnnotationUtils.findAnnotation(clazz, Order.class);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +			Order order = AnnotationUtils.findAnnotation(type, Order.class);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/SimpleMetadataAwareAspectInstanceFactory.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +		Order order = AnnotationUtils.findAnnotation(aspectClass, Order.class);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/SingletonMetadataAwareAspectInstanceFactory.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +		Order order = AnnotationUtils.findAnnotation(aspectClass, Order.class);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAwareOrderComparator.java, +			Order order = AnnotationUtils.findAnnotation(clazz, Order.class);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		Class<?> clazz = method.getDeclaringClass();, +			annotation = searchOnInterfaces(method, annotationType, clazz.getInterfaces());, +			clazz = clazz.getSuperclass();, +			if (clazz == null || clazz.equals(Object.class)) {, +				Method equivalentMethod = clazz.getDeclaredMethod(method.getName(), method.getParameterTypes());, +				annotation = searchOnInterfaces(method, annotationType, clazz.getInterfaces());, +		if (superClass == null || superClass.equals(Object.class)) {, +	 * @since 3.2.2, +	public static Class<?> findAnnotationDeclaringClassForTypes(List<Class<? extends Annotation>> annotationTypes, Class<?> clazz) {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +			Order order = AnnotationUtils.findAnnotation(type, Order.class);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/SimpleMetadataAwareAspectInstanceFactory.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +		Order order = AnnotationUtils.findAnnotation(aspectClass, Order.class);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/SingletonMetadataAwareAspectInstanceFactory.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +		Order order = AnnotationUtils.findAnnotation(aspectClass, Order.class);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAwareOrderComparator.java, +			Order order = AnnotationUtils.findAnnotation(clazz, Order.class);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		Class<?> clazz = method.getDeclaringClass();, +			annotation = searchOnInterfaces(method, annotationType, clazz.getInterfaces());, +			clazz = clazz.getSuperclass();, +			if (clazz == null || clazz.equals(Object.class)) {, +				Method equivalentMethod = clazz.getDeclaredMethod(method.getName(), method.getParameterTypes());, +				annotation = searchOnInterfaces(method, annotationType, clazz.getInterfaces());, +		if (superClass == null || superClass.equals(Object.class)) {, +	 * @since 3.2.2, +	public static Class<?> findAnnotationDeclaringClassForTypes(List<Class<? extends Annotation>> annotationTypes, Class<?> clazz) {, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationAwareOrderComparatorTests.java, +	public void sortInstancesWithSubclass() {, +		List<Object> list = new ArrayList<>();, +		list.add(new B());, +		list.add(new C());, +		AnnotationAwareOrderComparator.sort(list);, +		assertTrue(list.get(0) instanceof C);, +		assertTrue(list.get(1) instanceof B);, +	}, +, +	@Test, +	@Test, +	public void sortClassesWithSubclass() {, +		List<Object> list = new ArrayList<>();]