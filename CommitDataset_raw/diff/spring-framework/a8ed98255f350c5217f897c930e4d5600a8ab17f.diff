[+++ b/org.springframework.web/src/main/java/org/springframework/web/context/support/ServletContextResourcePatternResolver.java, + * Copyright 2002-2010 the original author or authors., +import java.util.Enumeration;, +import java.util.jar.JarEntry;, +import java.util.jar.JarFile;, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.core.io.UrlResource;, +import org.springframework.util.ResourceUtils;, +	private static final Log logger = LogFactory.getLog(ServletContextResourcePatternResolver.class);, +, +, +			int jarFileSep = fullPattern.indexOf(ResourceUtils.JAR_URL_SEPARATOR);, +			String jarFilePath = null;, +			String pathInJarFile = null;, +			if (jarFileSep > 0 && jarFileSep + ResourceUtils.JAR_URL_SEPARATOR.length() < fullPattern.length()) {, +				jarFilePath = fullPattern.substring(0, jarFileSep);, +				pathInJarFile = fullPattern.substring(jarFileSep + ResourceUtils.JAR_URL_SEPARATOR.length());, +			}, +			for (Object candidate : candidates) {, +				String currPath = (String) candidate;, +				if (currPath.endsWith("/") && (dirDepthNotFixed || StringUtils.countOccurrencesOf(currPath, "/") <=, +						StringUtils.countOccurrencesOf(fullPattern, "/"))) {, +				if (jarFilePath != null && getPathMatcher().match(jarFilePath, currPath)) {, +					// Base pattern matches a jar file - search for matching entries within., +					String absoluteJarPath = servletContext.getRealPath(currPath);, +					if (absoluteJarPath != null) {, +						doRetrieveMatchingJarEntries(absoluteJarPath, pathInJarFile, result);, +					}, +				}, +	/**, +	 * Method extracts entries from the given jar by pattern., +	 * @param jarFilePath the path to the jar file, +	 * @param entryPattern the pattern for jar entries to match, +	 * @param result the Set of matching Resources to add to, +	 * @throws IOException if jar contents could not be retrieved, +	 */, +	@SuppressWarnings("unchecked"), +	private void doRetrieveMatchingJarEntries(String jarFilePath, String entryPattern, Set<Resource> result) {, +		if (logger.isDebugEnabled()) {, +			logger.debug("Searching jar file [" + jarFilePath + "] for entries matching [" + entryPattern + "]");, +		}, +		try {, +			JarFile jarFile = new JarFile(jarFilePath);, +			for (Enumeration<JarEntry> entries = jarFile.entries(); entries.hasMoreElements();) {, +				JarEntry entry = entries.nextElement();, +				String entryPath = entry.getName();, +				if (getPathMatcher().match(entryPattern, entryPath)) {, +					result.add(new UrlResource(ResourceUtils.URL_PROTOCOL_JAR + ":" +, +							ResourceUtils.URL_PROTOCOL_FILE + ":" + jarFilePath +, +							ResourceUtils.JAR_URL_SEPARATOR + entryPath));, +				}, +			}, +		}, +		catch (IOException ex) {, +			if (logger.isWarnEnabled()) {, +				logger.warn("Cannot search for matching resources in jar file [" + jarFilePath +, +						"] because the jar cannot be opened through the file system", ex);, +			}, +		}, +	}, +]