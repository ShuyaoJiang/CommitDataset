[+++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/HibernateOptimisticLockingFailureException.java, + * Copyright 2002-2013 the original author or authors., +import org.hibernate.dialect.lock.OptimisticEntityLockException;, + * Converts Hibernate's StaleObjectStateException, StaleStateException, + * and OptimisticEntityLockException., +	public HibernateOptimisticLockingFailureException(OptimisticEntityLockException ex) {, +		super(ex.getMessage(), ex);, +	}, +, +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/HibernateOptimisticLockingFailureException.java, + * Copyright 2002-2013 the original author or authors., +import org.hibernate.dialect.lock.OptimisticEntityLockException;, + * Converts Hibernate's StaleObjectStateException, StaleStateException, + * and OptimisticEntityLockException., +	public HibernateOptimisticLockingFailureException(OptimisticEntityLockException ex) {, +		super(ex.getMessage(), ex);, +	}, +, +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/SessionFactoryUtils.java, + * Copyright 2002-2013 the original author or authors., +import org.hibernate.PessimisticLockException;, +import org.hibernate.QueryTimeoutException;, +import org.hibernate.dialect.lock.OptimisticEntityLockException;, +import org.hibernate.dialect.lock.PessimisticEntityLockException;, +import org.springframework.dao.PessimisticLockingFailureException;, +	 * @param ex HibernateException that occurred, +		if (ex instanceof QueryTimeoutException) {, +			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex;, +			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "; SQL [" + jdbcEx.getSQL() + "]", ex);, +		}, +		if (ex instanceof PessimisticLockException) {, +			PessimisticLockException jdbcEx = (PessimisticLockException) ex;, +			return new PessimisticLockingFailureException(ex.getMessage() + "; SQL [" + jdbcEx.getSQL() + "]", ex);, +		}, +		if (ex instanceof OptimisticEntityLockException) {, +			return new HibernateOptimisticLockingFailureException((OptimisticEntityLockException) ex);, +		}, +		if (ex instanceof PessimisticEntityLockException) {, +			if (ex.getCause() instanceof LockAcquisitionException) {, +				return new CannotAcquireLockException(ex.getMessage(), ex.getCause());, +			}, +			return new PessimisticLockingFailureException(ex.getMessage(), ex);, +		}]