[+++ b/org.springframework.web.servlet/ivy.xml, +		<dependency org="org.apache.tiles" name="com.springsource.org.apache.tiles" rev="2.1.2.osgi", +		<dependency org="org.apache.tiles" name="com.springsource.org.apache.tiles.core" rev="2.1.2.osgi", +		<dependency org="org.apache.tiles" name="com.springsource.org.apache.tiles.jsp" rev="2.1.2", +                    conf="optional, tiles->compile"/>, +		<dependency org="org.apache.tiles" name="com.springsource.org.apache.tiles.servlet" rev="2.1.2", +++ b/org.springframework.web.servlet/ivy.xml, +		<dependency org="org.apache.tiles" name="com.springsource.org.apache.tiles" rev="2.1.2.osgi", +		<dependency org="org.apache.tiles" name="com.springsource.org.apache.tiles.core" rev="2.1.2.osgi", +		<dependency org="org.apache.tiles" name="com.springsource.org.apache.tiles.jsp" rev="2.1.2", +                    conf="optional, tiles->compile"/>, +		<dependency org="org.apache.tiles" name="com.springsource.org.apache.tiles.servlet" rev="2.1.2", +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/AbstractSpringPreparerFactory.java, +++ b/org.springframework.web.servlet/ivy.xml, +		<dependency org="org.apache.tiles" name="com.springsource.org.apache.tiles" rev="2.1.2.osgi", +		<dependency org="org.apache.tiles" name="com.springsource.org.apache.tiles.core" rev="2.1.2.osgi", +		<dependency org="org.apache.tiles" name="com.springsource.org.apache.tiles.jsp" rev="2.1.2", +                    conf="optional, tiles->compile"/>, +		<dependency org="org.apache.tiles" name="com.springsource.org.apache.tiles.servlet" rev="2.1.2", +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/AbstractSpringPreparerFactory.java, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/SpringLocaleResolver.java, + * Copyright 2002-2009 the original author or authors., +import javax.servlet.jsp.PageContext;, +import org.apache.tiles.jsp.context.JspTilesRequestContext;, +import org.apache.tiles.servlet.context.ServletTilesRequestContext;, +		if (context instanceof ServletTilesRequestContext) {, +			return RequestContextUtils.getLocale(((ServletTilesRequestContext) context).getRequest());, +		}, +		else if (context instanceof JspTilesRequestContext) {, +			PageContext pc = ((JspTilesRequestContext) context).getPageContext();, +			return RequestContextUtils.getLocale((HttpServletRequest) pc.getRequest());, +++ b/org.springframework.web.servlet/ivy.xml, +		<dependency org="org.apache.tiles" name="com.springsource.org.apache.tiles" rev="2.1.2.osgi", +		<dependency org="org.apache.tiles" name="com.springsource.org.apache.tiles.core" rev="2.1.2.osgi", +		<dependency org="org.apache.tiles" name="com.springsource.org.apache.tiles.jsp" rev="2.1.2", +                    conf="optional, tiles->compile"/>, +		<dependency org="org.apache.tiles" name="com.springsource.org.apache.tiles.servlet" rev="2.1.2", +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/AbstractSpringPreparerFactory.java, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/SpringLocaleResolver.java, + * Copyright 2002-2009 the original author or authors., +import javax.servlet.jsp.PageContext;, +import org.apache.tiles.jsp.context.JspTilesRequestContext;, +import org.apache.tiles.servlet.context.ServletTilesRequestContext;, +		if (context instanceof ServletTilesRequestContext) {, +			return RequestContextUtils.getLocale(((ServletTilesRequestContext) context).getRequest());, +		}, +		else if (context instanceof JspTilesRequestContext) {, +			PageContext pc = ((JspTilesRequestContext) context).getPageContext();, +			return RequestContextUtils.getLocale((HttpServletRequest) pc.getRequest());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/TilesConfigurer.java, +import org.apache.tiles.context.AbstractTilesApplicationContextFactory;, +import org.apache.tiles.definition.DefinitionsFactory;, +import org.apache.tiles.evaluator.el.ELAttributeEvaluator;, +import org.apache.tiles.servlet.context.ServletTilesApplicationContext;, +import org.apache.tiles.servlet.context.ServletUtil;, +import org.apache.tiles.servlet.context.wildcard.WildcardServletTilesApplicationContextFactory;, +import org.apache.tiles.startup.BasicTilesInitializer;, +import org.apache.tiles.startup.TilesInitializer;, + * containing definitions, to be accessed by {@link TilesView} instances. This is a, + * Spring-based alternative (for usage in Spring configuration) to the Tiles-provided, + * {@link org.apache.tiles.web.startup.TilesListener} (for usage in <code>web.xml</code>)., + * The values in the list are the actual Tiles XML files containing the definitions., + * @see TilesViewResolver, +		this.tilesPropertyMap.put(AbstractTilesApplicationContextFactory.APPLICATION_CONTEXT_FACTORY_INIT_PARAM,, +				WildcardServletTilesApplicationContextFactory.class.getName());, +		this.tilesPropertyMap.put(TilesContainerFactory.PREPARER_FACTORY_INIT_PARAM,, +		this.tilesPropertyMap.put(DefinitionsFactory.LOCALE_RESOLVER_IMPL_PROPERTY,, +		this.tilesPropertyMap.put(TilesContainerFactory.ATTRIBUTE_EVALUATOR_INIT_PARAM,, +				ELAttributeEvaluator.class.getName());, +		this.tilesPropertyMap.put(TilesContainerFactory.CONTAINER_FACTORY_MUTABLE_INIT_PARAM,, +				Boolean.toString(false));, +			this.tilesPropertyMap.put(DefinitionsFactory.DEFINITIONS_CONFIG, defs);, +	 * Creates and exposes a TilesContainer for this web application,, +	 * delegating to the TilesInitializer., +	 * @see #createTilesInitializer(), +		ServletContextAdapter adaptedContext = new ServletContextAdapter(new DelegatingServletConfig());, +		createTilesInitializer().initialize(new ServletTilesApplicationContext(adaptedContext));, +	 * Creates a new instance of {@link org.apache.tiles.startup.BasicTilesInitializer}., +	 * Override it to use a different initializer., +	 * @see org.apache.tiles.web.startup.TilesListener#createTilesInitializer(), +	protected TilesInitializer createTilesInitializer() {, +		return new BasicTilesInitializer();, +		ServletUtil.setContainer(this.servletContext, null);, +++ b/org.springframework.web.servlet/ivy.xml, +		<dependency org="org.apache.tiles" name="com.springsource.org.apache.tiles" rev="2.1.2.osgi", +		<dependency org="org.apache.tiles" name="com.springsource.org.apache.tiles.core" rev="2.1.2.osgi", +		<dependency org="org.apache.tiles" name="com.springsource.org.apache.tiles.jsp" rev="2.1.2", +                    conf="optional, tiles->compile"/>, +		<dependency org="org.apache.tiles" name="com.springsource.org.apache.tiles.servlet" rev="2.1.2", +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/AbstractSpringPreparerFactory.java, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/tiles2/SpringLocaleResolver.java, + * Copyright 2002-2009 the original author or authors., +import javax.servlet.jsp.PageContext;, +import org.apache.tiles.jsp.context.JspTilesRequestContext;, +import org.apache.tiles.servlet.context.ServletTilesRequestContext;, +		if (context instanceof ServletTilesRequestContext) {, +			return RequestContextUtils.getLocale(((ServletTilesRequestContext) context).getRequest());, +		}, +		else if (context instanceof JspTilesRequestContext) {, +			PageContext pc = ((JspTilesRequestContext) context).getPageContext();]