[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +, +, +, +, +	private static Class<?> javaxInjectProviderClass = null;, +	private final Map<Class<?>, Object> resolvableDependencies = new HashMap<Class<?>, Object>();, +	public String[] getBeanNamesForType(Class<?> type) {, +	public String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) {, +		Class<?> beanType = getType(beanName);, +						final FactoryBean<?> factory = (FactoryBean<?>) getBean(FACTORY_BEAN_PREFIX + beanName);, +									return ((SmartFactoryBean<?>) factory).isEagerInit();, +									((SmartFactoryBean<?>) factory).isEagerInit());, +			Class<?> componentType = type.getComponentType();, +			Class<?> elementType = descriptor.getCollectionType();, +			Class<?> keyType = descriptor.getMapKeyType();, +			Class<?> valueType = descriptor.getMapValueType();, +			String beanName, Class<?> requiredType, DependencyDescriptor descriptor) {, +		for (Class<?> autowiringType : this.resolvableDependencies.keySet()) {, +			Class<?> type, String dependencyDescription, DependencyDescriptor descriptor), +	@SuppressWarnings("serial"), +			Reference<?> ref = serializableFactories.get(this.id);, +	@SuppressWarnings("serial"), +	private class DependencyObjectFactory implements ObjectFactory<Object>, Serializable {, +	@SuppressWarnings("serial"), +	private class DependencyProvider extends DependencyObjectFactory implements Provider<Object> {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +, +, +, +, +	private static Class<?> javaxInjectProviderClass = null;, +	private final Map<Class<?>, Object> resolvableDependencies = new HashMap<Class<?>, Object>();, +	public String[] getBeanNamesForType(Class<?> type) {, +	public String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) {, +		Class<?> beanType = getType(beanName);, +						final FactoryBean<?> factory = (FactoryBean<?>) getBean(FACTORY_BEAN_PREFIX + beanName);, +									return ((SmartFactoryBean<?>) factory).isEagerInit();, +									((SmartFactoryBean<?>) factory).isEagerInit());, +			Class<?> componentType = type.getComponentType();, +			Class<?> elementType = descriptor.getCollectionType();, +			Class<?> keyType = descriptor.getMapKeyType();, +			Class<?> valueType = descriptor.getMapValueType();, +			String beanName, Class<?> requiredType, DependencyDescriptor descriptor) {, +		for (Class<?> autowiringType : this.resolvableDependencies.keySet()) {, +			Class<?> type, String dependencyDescription, DependencyDescriptor descriptor), +	@SuppressWarnings("serial"), +			Reference<?> ref = serializableFactories.get(this.id);, +	@SuppressWarnings("serial"), +	private class DependencyObjectFactory implements ObjectFactory<Object>, Serializable {, +	@SuppressWarnings("serial"), +	private class DependencyProvider extends DependencyObjectFactory implements Provider<Object> {, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, + * Copyright 2002-2012 the original author or authors., +, +, +, +, +, +, +import static org.hamcrest.CoreMatchers.*;, +, +import static org.junit.Assert.*;, +, +		bf.registerBeanDefinition("abs", BeanDefinitionBuilder, +				.rootBeanDefinition(TestBean.class).setAbstract(true).getBeanDefinition());]