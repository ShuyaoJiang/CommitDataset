[+++ b/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java, + * <p>This property source is included by default in {@link StandardEnvironment}, + * and all its subclasses., +		return (getProperty(name) != null);, +			logger.debug(String.format("PropertySource [%s] does not contain '%s', but found equivalent '%s'",, +					getName(), name, actualName));, +			}, +			else {, +++ b/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java, + * <p>This property source is included by default in {@link StandardEnvironment}, + * and all its subclasses., +		return (getProperty(name) != null);, +			logger.debug(String.format("PropertySource [%s] does not contain '%s', but found equivalent '%s'",, +					getName(), name, actualName));, +			}, +			else {, +++ b/spring-web/src/main/java/org/springframework/web/context/support/AnnotationConfigWebApplicationContext.java, +		reader.setEnvironment(getEnvironment());, +		scanner.setEnvironment(getEnvironment());, +			beanFactory.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);, +++ b/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java, + * <p>This property source is included by default in {@link StandardEnvironment}, + * and all its subclasses., +		return (getProperty(name) != null);, +			logger.debug(String.format("PropertySource [%s] does not contain '%s', but found equivalent '%s'",, +					getName(), name, actualName));, +			}, +			else {, +++ b/spring-web/src/main/java/org/springframework/web/context/support/AnnotationConfigWebApplicationContext.java, +		reader.setEnvironment(getEnvironment());, +		scanner.setEnvironment(getEnvironment());, +			beanFactory.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);, +++ b/spring-web/src/main/java/org/springframework/web/context/support/StandardServletEnvironment.java, +	 * <p>The {@code Servlet}-related property sources are added as, +	 * {@link StubPropertySource stubs} at this stage, and will be, +	 * {@linkplain #initPropertySources(ServletContext, ServletConfig) fully initialized}, +	 * once the actual {@link ServletContext} object becomes available., +++ b/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java, + * <p>This property source is included by default in {@link StandardEnvironment}, + * and all its subclasses., +		return (getProperty(name) != null);, +			logger.debug(String.format("PropertySource [%s] does not contain '%s', but found equivalent '%s'",, +					getName(), name, actualName));, +			}, +			else {, +++ b/spring-web/src/main/java/org/springframework/web/context/support/AnnotationConfigWebApplicationContext.java, +		reader.setEnvironment(getEnvironment());, +		scanner.setEnvironment(getEnvironment());, +			beanFactory.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);, +++ b/spring-web/src/main/java/org/springframework/web/context/support/StandardServletEnvironment.java, +	 * <p>The {@code Servlet}-related property sources are added as, +	 * {@link StubPropertySource stubs} at this stage, and will be, +	 * {@linkplain #initPropertySources(ServletContext, ServletConfig) fully initialized}, +	 * once the actual {@link ServletContext} object becomes available., +++ b/spring-web/src/main/java/org/springframework/web/context/support/XmlWebApplicationContext.java, + * Copyright 2002-2013 the original author or authors., +		beanDefinitionReader.setEnvironment(getEnvironment());]