[+++ b/spring-core/src/main/java/org/springframework/core/GenericTypeResolver.java, +		Type resolvedType = getRawType(genericType, typeVariableMap);, +		if (resolvedType instanceof GenericArrayType) {, +			Type componentType = ((GenericArrayType) resolvedType).getGenericComponentType();, +			Class<?> componentClass = resolveType(componentType, typeVariableMap);, +			resolvedType = Array.newInstance(componentClass, 0).getClass();, +		}, +		return (resolvedType instanceof Class ? (Class) resolvedType : Object.class);, +++ b/spring-core/src/main/java/org/springframework/core/GenericTypeResolver.java, +		Type resolvedType = getRawType(genericType, typeVariableMap);, +		if (resolvedType instanceof GenericArrayType) {, +			Type componentType = ((GenericArrayType) resolvedType).getGenericComponentType();, +			Class<?> componentClass = resolveType(componentType, typeVariableMap);, +			resolvedType = Array.newInstance(componentClass, 0).getClass();, +		}, +		return (resolvedType instanceof Class ? (Class) resolvedType : Object.class);, +++ b/spring-core/src/test/java/org/springframework/core/GenericTypeResolverTests.java, +import java.lang.reflect.Type;, +import java.lang.reflect.TypeVariable;, +    /**, +     * @since 3.2, +     */, +    @Test, +    public void testResolveType() {, +            Method intMessageMethod = findMethod(MyTypeWithMethods.class, "readIntegerInputMessage", MyInterfaceType.class);, +            MethodParameter intMessageMethodParam = new MethodParameter(intMessageMethod, 0);, +            assertEquals(MyInterfaceType.class,, +                            resolveType(intMessageMethodParam.getGenericParameterType(), new HashMap<TypeVariable, Type>()));, +, +            Method intArrMessageMethod = findMethod(MyTypeWithMethods.class, "readIntegerArrayInputMessage", MyInterfaceType[].class);, +            MethodParameter intArrMessageMethodParam = new MethodParameter(intArrMessageMethod, 0);, +            assertEquals(MyInterfaceType[].class,, +                            resolveType(intArrMessageMethodParam.getGenericParameterType(), new HashMap<TypeVariable, Type>()));, +, +            Method genericArrMessageMethod = findMethod(MySimpleTypeWithMethods.class, "readGenericArrayInputMessage", Object[].class);, +            MethodParameter genericArrMessageMethodParam = new MethodParameter(genericArrMessageMethod, 0);, +            Map<TypeVariable, Type> varMap = getTypeVariableMap(MySimpleTypeWithMethods.class);, +            assertEquals(Integer[].class, resolveType(genericArrMessageMethodParam.getGenericParameterType(), varMap));, +    }, +, +	public static class MyTypeWithMethods<T> {, +        public void readIntegerInputMessage(MyInterfaceType<Integer> message) {, +        }, +, +        public void readIntegerArrayInputMessage(MyInterfaceType<Integer>[] message) {, +        }, +, +        public void readGenericArrayInputMessage(T[] message) {, +        }, +	}, +, +	public static class MySimpleTypeWithMethods extends MyTypeWithMethods<Integer> {]