[+++ b/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java, +	/** if SecurityManager scenarios mean that property access should be via getPropertyNames() */, +	private boolean usePropertyNames;, +, +		try {, +			String[] propertyNames = (this.usePropertyNames ? getPropertyNames() : null);, +			if (containsProperty(propertyNames, name)) {, +			if (!name.equals(usName) && containsProperty(propertyNames, usName)) {, +				if (containsProperty(propertyNames, ucName)) {, +					if (!ucName.equals(usUcName) && containsProperty(propertyNames, usUcName)) {, +		catch (RuntimeException ex) {, +			if (this.usePropertyNames) {, +				throw ex;, +			}, +			else {, +				this.usePropertyNames = true;, +				return resolvePropertyName(name);, +			}, +		}, +	}, +, +	private boolean containsProperty(String[] propertyNames, String name) {, +		if (propertyNames == null) {, +			return super.containsProperty(name);, +		}, +		return ObjectUtils.containsElement(propertyNames, name);, +	}, +++ b/spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java, +	/** if SecurityManager scenarios mean that property access should be via getPropertyNames() */, +	private boolean usePropertyNames;, +, +		try {, +			String[] propertyNames = (this.usePropertyNames ? getPropertyNames() : null);, +			if (containsProperty(propertyNames, name)) {, +			if (!name.equals(usName) && containsProperty(propertyNames, usName)) {, +				if (containsProperty(propertyNames, ucName)) {, +					if (!ucName.equals(usUcName) && containsProperty(propertyNames, usUcName)) {, +		catch (RuntimeException ex) {, +			if (this.usePropertyNames) {, +				throw ex;, +			}, +			else {, +				this.usePropertyNames = true;, +				return resolvePropertyName(name);, +			}, +		}, +	}, +, +	private boolean containsProperty(String[] propertyNames, String name) {, +		if (propertyNames == null) {, +			return super.containsProperty(name);, +		}, +		return ObjectUtils.containsElement(propertyNames, name);, +	}, +++ b/spring-core/src/test/java/org/springframework/core/env/SystemEnvironmentPropertySourceTests.java, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +, +	@Test, +	public void withSecurityConstraints() throws Exception {, +		envMap = new HashMap<String, Object>() {, +			@Override, +			public boolean containsKey(Object key) {, +				throw new UnsupportedOperationException();, +			}, +		};, +		ps = new SystemEnvironmentPropertySource("sysEnv", envMap);, +		envMap.put("A_KEY", "a_value");, +		assertThat(ps.containsProperty("A_KEY"), equalTo(true));, +		assertThat(ps.getProperty("A_KEY"), equalTo((Object)"a_value"));, +	}, +]