[+++ b/build-spring-framework/resources/changelog.txt, +* improve @SessionAttributes handling to provide better support for clustered sessions, +++ b/build-spring-framework/resources/changelog.txt, +* improve @SessionAttributes handling to provide better support for clustered sessions, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/SessionAttributesHandler.java, + * Copyright 2002-2012 the original author or authors., + * delegated to a {@link SessionAttributeStore} instance., +	private final Set<String> knownAttributeNames = Collections.synchronizedSet(new HashSet<String>(4));, +	 * Create a new instance for a controller type. Session attribute names and, +	 * types are extracted from the {@code @SessionAttributes} annotation, if, +	 * present, on the given type., +, +		this.knownAttributeNames.addAll(this.attributeNames);, +	 * Whether the controller represented by this instance has declared any, +	 * session attributes through an {@link SessionAttributes} annotation., +	 * Whether the attribute name or type match the names and types specified, +	 * via {@code @SessionAttributes} in underlying controller., +	 * and subsequently used in {@link #retrieveAttributes(WebRequest)} and, +	 * {@link #cleanupAttributes(WebRequest)}., +	 * @param attributeName the attribute name to check, never {@code null}, +	 * @param attributeType the type for the attribute, possibly {@code null}, +			this.knownAttributeNames.add(attributeName);, +	 * Store a subset of the given attributes in the session. Attributes not, +	 * Retrieve "known" attributes from the session, i.e. attributes listed, +	 * by name in {@code @SessionAttributes} or attributes previously stored, +	 * in the model that matched by type., +	 * @return a map with handler session attributes, possibly empty, +		for (String name : this.knownAttributeNames) {, +	 * Remove "known" attributes from the session, i.e. attributes listed, +	 * by name in {@code @SessionAttributes} or attributes previously stored, +	 * in the model that matched by type., +		for (String attributeName : this.knownAttributeNames) {, +++ b/build-spring-framework/resources/changelog.txt, +* improve @SessionAttributes handling to provide better support for clustered sessions, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/SessionAttributesHandler.java, + * Copyright 2002-2012 the original author or authors., + * delegated to a {@link SessionAttributeStore} instance., +	private final Set<String> knownAttributeNames = Collections.synchronizedSet(new HashSet<String>(4));, +	 * Create a new instance for a controller type. Session attribute names and, +	 * types are extracted from the {@code @SessionAttributes} annotation, if, +	 * present, on the given type., +, +		this.knownAttributeNames.addAll(this.attributeNames);, +	 * Whether the controller represented by this instance has declared any, +	 * session attributes through an {@link SessionAttributes} annotation., +	 * Whether the attribute name or type match the names and types specified, +	 * via {@code @SessionAttributes} in underlying controller., +	 * and subsequently used in {@link #retrieveAttributes(WebRequest)} and, +	 * {@link #cleanupAttributes(WebRequest)}., +	 * @param attributeName the attribute name to check, never {@code null}, +	 * @param attributeType the type for the attribute, possibly {@code null}, +			this.knownAttributeNames.add(attributeName);, +	 * Store a subset of the given attributes in the session. Attributes not, +	 * Retrieve "known" attributes from the session, i.e. attributes listed, +	 * by name in {@code @SessionAttributes} or attributes previously stored, +	 * in the model that matched by type., +	 * @return a map with handler session attributes, possibly empty, +		for (String name : this.knownAttributeNames) {, +	 * Remove "known" attributes from the session, i.e. attributes listed, +	 * by name in {@code @SessionAttributes} or attributes previously stored, +	 * in the model that matched by type., +		for (String attributeName : this.knownAttributeNames) {, +++ b/org.springframework.web/src/test/java/org/springframework/web/method/annotation/SessionAttributesHandlerTests.java, + * Copyright 2002-2012 the original author or authors., +		sessionAttributeStore.storeAttribute(request, "attr4", new TestBean());, +		assertEquals("Named attributes (attr1, attr2) should be 'known' right away",, +				new HashSet<String>(asList("attr1", "attr2")),, +				sessionAttributesHandler.retrieveAttributes(request).keySet());, +		// Resolve 'attr3' by type, +		sessionAttributesHandler.isHandlerSessionAttribute("attr3", TestBean.class);, +		assertEquals("Named attributes (attr1, attr2) and resolved attribute (att3) should be 'known'",, +				new HashSet<String>(asList("attr1", "attr2", "attr3")),, +				sessionAttributesHandler.retrieveAttributes(request).keySet());, +		assertNull(sessionAttributeStore.retrieveAttribute(request, "attr2"));, +		assertNotNull(sessionAttributeStore.retrieveAttribute(request, "attr3"));, +, +		// Resolve 'attr3' by type, +		sessionAttributesHandler.isHandlerSessionAttribute("attr3", TestBean.class);, +		sessionAttributesHandler.cleanupAttributes(request);, +]