[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/DefaultMvcResult.java, + * Copyright 2002-2016 the original author or authors., +, +		return this.mockRequest;, +	public MockHttpServletResponse getResponse() {, +		return this.mockResponse;, +	public Object getHandler() {, +		return this.handler;, +	public void setInterceptors(HandlerInterceptor... interceptors) {, +	public HandlerInterceptor[] getInterceptors() {, +		return this.interceptors;, +	public Exception getResolvedException() {, +		return this.resolvedException;, +	public ModelAndView getModelAndView() {, +		return this.modelAndView;, +	}, +, +	@Override, +		return RequestContextUtils.getOutputFlashMap(this.mockRequest);, +					Thread.sleep(100);, +		Object result = this.asyncResult.get();, +		if (result == RESULT_NONE) {, +			throw new IllegalStateException("Async result for handler [" + this.handler + "] " +, +		}, +		return result;, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/DefaultMvcResult.java, + * Copyright 2002-2016 the original author or authors., +, +		return this.mockRequest;, +	public MockHttpServletResponse getResponse() {, +		return this.mockResponse;, +	public Object getHandler() {, +		return this.handler;, +	public void setInterceptors(HandlerInterceptor... interceptors) {, +	public HandlerInterceptor[] getInterceptors() {, +		return this.interceptors;, +	public Exception getResolvedException() {, +		return this.resolvedException;, +	public ModelAndView getModelAndView() {, +		return this.modelAndView;, +	}, +, +	@Override, +		return RequestContextUtils.getOutputFlashMap(this.mockRequest);, +					Thread.sleep(100);, +		Object result = this.asyncResult.get();, +		if (result == RESULT_NONE) {, +			throw new IllegalStateException("Async result for handler [" + this.handler + "] " +, +		}, +		return result;, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/MvcResult.java, + * Copyright 2002-2016 the original author or authors., +	 * @throws IllegalStateException if the async result was not set, +	 * @throws IllegalStateException if the async result was not set]