[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +import java.util.HashSet;, +import java.util.Set;, +		final Set<String> activeProfiles = new HashSet<String>();, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +import java.util.HashSet;, +import java.util.Set;, +		final Set<String> activeProfiles = new HashSet<String>();, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/MergedContextConfiguration.java, +import java.util.Arrays;, +import java.util.SortedSet;, +import java.util.TreeSet;, +, +import org.springframework.util.StringUtils;, +	private static String[] processLocations(String[] locations) {, +		return locations == null ? new String[] {} : locations;, +	}, +, +	private static Class<?>[] processClasses(Class<?>[] classes) {, +		return classes == null ? new Class<?>[] {} : classes;, +	}, +, +	private static String[] processActiveProfiles(String[] activeProfiles) {, +		if (activeProfiles == null) {, +			return new String[] {};, +		}, +, +		// Active profiles must be unique and sorted due to cache key generation, +		// in TestContext. Specifically, profile sets {foo,bar} and {bar,foo}, +		// must both result in the same array (e.g., [bar,foo])., +		SortedSet<String> sortedProfilesSet = new TreeSet<String>(Arrays.asList(activeProfiles));, +		return StringUtils.toStringArray(sortedProfilesSet);, +	}, +, +		this.locations = processLocations(locations);, +		this.classes = processClasses(classes);, +		this.activeProfiles = processActiveProfiles(activeProfiles);]