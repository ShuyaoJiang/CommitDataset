[+++ b/spring-expression/src/main/java/org/springframework/expression/TypedValue.java, + * Encapsulates an object and a {@link TypeDescriptor} that describes it., + * The type descriptor can contain generic declarations that would not, + * be accessible through a simple {@code getClass()} call on the object., +	 * Create a {@link TypedValue} for a simple object. The {@link TypeDescriptor}, +	 * is inferred from the object, so no generic declarations are preserved., +	 * Create a {@link TypedValue} for a particular value with a particular, +	 * {@link TypeDescriptor} which may contain additional generic declarations., +		// Avoid TypeDescriptor initialization if not necessary, +						ObjectUtils.nullSafeEquals(getTypeDescriptor(), otherTv.getTypeDescriptor())));, +++ b/spring-expression/src/main/java/org/springframework/expression/TypedValue.java, + * Encapsulates an object and a {@link TypeDescriptor} that describes it., + * The type descriptor can contain generic declarations that would not, + * be accessible through a simple {@code getClass()} call on the object., +	 * Create a {@link TypedValue} for a simple object. The {@link TypeDescriptor}, +	 * is inferred from the object, so no generic declarations are preserved., +	 * Create a {@link TypedValue} for a particular value with a particular, +	 * {@link TypeDescriptor} which may contain additional generic declarations., +		// Avoid TypeDescriptor initialization if not necessary, +						ObjectUtils.nullSafeEquals(getTypeDescriptor(), otherTv.getTypeDescriptor())));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMappingJacksonResponseBodyAdvice.java, +public abstract class AbstractMappingJacksonResponseBodyAdvice implements ResponseBodyAdvice<Object> {, +		return (body instanceof MappingJacksonValue ? (MappingJacksonValue) body : new MappingJacksonValue(body));, +++ b/spring-expression/src/main/java/org/springframework/expression/TypedValue.java, + * Encapsulates an object and a {@link TypeDescriptor} that describes it., + * The type descriptor can contain generic declarations that would not, + * be accessible through a simple {@code getClass()} call on the object., +	 * Create a {@link TypedValue} for a simple object. The {@link TypeDescriptor}, +	 * is inferred from the object, so no generic declarations are preserved., +	 * Create a {@link TypedValue} for a particular value with a particular, +	 * {@link TypeDescriptor} which may contain additional generic declarations., +		// Avoid TypeDescriptor initialization if not necessary, +						ObjectUtils.nullSafeEquals(getTypeDescriptor(), otherTv.getTypeDescriptor())));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMappingJacksonResponseBodyAdvice.java, +public abstract class AbstractMappingJacksonResponseBodyAdvice implements ResponseBodyAdvice<Object> {, +		return (body instanceof MappingJacksonValue ? (MappingJacksonValue) body : new MappingJacksonValue(body));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/JsonViewResponseBodyAdvice.java, +++ b/spring-expression/src/main/java/org/springframework/expression/TypedValue.java, + * Encapsulates an object and a {@link TypeDescriptor} that describes it., + * The type descriptor can contain generic declarations that would not, + * be accessible through a simple {@code getClass()} call on the object., +	 * Create a {@link TypedValue} for a simple object. The {@link TypeDescriptor}, +	 * is inferred from the object, so no generic declarations are preserved., +	 * Create a {@link TypedValue} for a particular value with a particular, +	 * {@link TypeDescriptor} which may contain additional generic declarations., +		// Avoid TypeDescriptor initialization if not necessary, +						ObjectUtils.nullSafeEquals(getTypeDescriptor(), otherTv.getTypeDescriptor())));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMappingJacksonResponseBodyAdvice.java, +public abstract class AbstractMappingJacksonResponseBodyAdvice implements ResponseBodyAdvice<Object> {, +		return (body instanceof MappingJacksonValue ? (MappingJacksonValue) body : new MappingJacksonValue(body));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/JsonViewResponseBodyAdvice.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyAdvice.java, +	 * @return {@code true} if {@link #beforeBodyWrite} should be invoked, {@code false} otherwise, +	T beforeBodyWrite(T body, MethodParameter returnType, MediaType selectedContentType,, +			Class<? extends HttpMessageConverter<?>> selectedConverterType,, +++ b/spring-expression/src/main/java/org/springframework/expression/TypedValue.java, + * Encapsulates an object and a {@link TypeDescriptor} that describes it., + * The type descriptor can contain generic declarations that would not, + * be accessible through a simple {@code getClass()} call on the object., +	 * Create a {@link TypedValue} for a simple object. The {@link TypeDescriptor}, +	 * is inferred from the object, so no generic declarations are preserved., +	 * Create a {@link TypedValue} for a particular value with a particular, +	 * {@link TypeDescriptor} which may contain additional generic declarations., +		// Avoid TypeDescriptor initialization if not necessary, +						ObjectUtils.nullSafeEquals(getTypeDescriptor(), otherTv.getTypeDescriptor())));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMappingJacksonResponseBodyAdvice.java, +public abstract class AbstractMappingJacksonResponseBodyAdvice implements ResponseBodyAdvice<Object> {, +		return (body instanceof MappingJacksonValue ? (MappingJacksonValue) body : new MappingJacksonValue(body));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/JsonViewResponseBodyAdvice.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyAdvice.java, +	 * @return {@code true} if {@link #beforeBodyWrite} should be invoked, {@code false} otherwise, +	T beforeBodyWrite(T body, MethodParameter returnType, MediaType selectedContentType,, +			Class<? extends HttpMessageConverter<?>> selectedConverterType,, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java, +	 * A scheduler instance to use for scheduling heart-beat messages., +	 */, +	public TaskScheduler getTaskScheduler() {, +		return this.taskScheduler;, +	}, +, +	/**, +	 * Set a unique name for this service (mainly for logging purposes)., +	/**, +	 * Return the unique name associated with this service., +	 */, +	 * Return he URL to the SockJS JavaScript client library., +	 * that can be sent over a single HTTP streaming request before it will be, +	/**, +	 * Return the minimum number of bytes that can be sent over a single HTTP, +	 * streaming request before it will be closed., +	 */, +	 * Return whether the JSESSIONID cookie is required for the application to function., +	 * Specify the amount of time in milliseconds when the server has not sent, +	 * any messages and after which the server should send a heartbeat frame, +	 * to the client in order to keep the connection from breaking., +	/**, +	 * Return the amount of time in milliseconds when the server has not sent, +	 * any messages., +	 */, +	 * The number of server-to-client messages that a session can cache while waiting]