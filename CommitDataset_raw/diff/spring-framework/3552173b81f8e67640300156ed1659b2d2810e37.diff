[+++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +import java.util.HashMap;, +		final Map<Class<? extends Throwable>, Method> matchedHandlers = new HashMap<Class<? extends Throwable>, Method>();, +						if (!matchedHandlers.containsKey(handledException)) {, +							matchedHandlers.put(handledException, method);, +							Method oldMappedMethod = matchedHandlers.get(handledException);, +		handlerMethod = getBestMatchingMethod(matchedHandlers, thrownException);, +++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +import java.util.HashMap;, +		final Map<Class<? extends Throwable>, Method> matchedHandlers = new HashMap<Class<? extends Throwable>, Method>();, +						if (!matchedHandlers.containsKey(handledException)) {, +							matchedHandlers.put(handledException, method);, +							Method oldMappedMethod = matchedHandlers.get(handledException);, +		handlerMethod = getBestMatchingMethod(matchedHandlers, thrownException);, +++ b/spring-webmvc-portlet/src/test/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerExceptionResolverTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +, +, +	// SPR-9209, +, +	@Test, +	public void cachingSideEffect() {, +		IllegalArgumentException ex = new IllegalArgumentException();, +		SimpleController controller = new SimpleController();, +, +		ModelAndView mav = exceptionResolver.resolveException(request, response, controller, ex);, +		assertNotNull("No ModelAndView returned", mav);, +, +		mav = exceptionResolver.resolveException(request, response, controller, new NullPointerException());, +		assertNull(mav);, +	}, +, +++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +import java.util.HashMap;, +		final Map<Class<? extends Throwable>, Method> matchedHandlers = new HashMap<Class<? extends Throwable>, Method>();, +						if (!matchedHandlers.containsKey(handledException)) {, +							matchedHandlers.put(handledException, method);, +							Method oldMappedMethod = matchedHandlers.get(handledException);, +		handlerMethod = getBestMatchingMethod(matchedHandlers, thrownException);, +++ b/spring-webmvc-portlet/src/test/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerExceptionResolverTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +, +, +	// SPR-9209, +, +	@Test, +	public void cachingSideEffect() {, +		IllegalArgumentException ex = new IllegalArgumentException();, +		SimpleController controller = new SimpleController();, +, +		ModelAndView mav = exceptionResolver.resolveException(request, response, controller, ex);, +		assertNotNull("No ModelAndView returned", mav);, +, +		mav = exceptionResolver.resolveException(request, response, controller, new NullPointerException());, +		assertNull(mav);, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +import java.util.HashMap;, +		final Map<Class<? extends Throwable>, Method> matchedHandlers = new HashMap<Class<? extends Throwable>, Method>();, +						if (!matchedHandlers.containsKey(handledException)) {, +							matchedHandlers.put(handledException, method);, +							Method oldMappedMethod = matchedHandlers.get(handledException);, +		handlerMethod = getBestMatchingMethod(matchedHandlers, thrownException);, +++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +import java.util.HashMap;, +		final Map<Class<? extends Throwable>, Method> matchedHandlers = new HashMap<Class<? extends Throwable>, Method>();, +						if (!matchedHandlers.containsKey(handledException)) {, +							matchedHandlers.put(handledException, method);, +							Method oldMappedMethod = matchedHandlers.get(handledException);, +		handlerMethod = getBestMatchingMethod(matchedHandlers, thrownException);, +++ b/spring-webmvc-portlet/src/test/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerExceptionResolverTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +, +, +	// SPR-9209, +, +	@Test, +	public void cachingSideEffect() {, +		IllegalArgumentException ex = new IllegalArgumentException();, +		SimpleController controller = new SimpleController();, +, +		ModelAndView mav = exceptionResolver.resolveException(request, response, controller, ex);, +		assertNotNull("No ModelAndView returned", mav);, +, +		mav = exceptionResolver.resolveException(request, response, controller, new NullPointerException());, +		assertNull(mav);, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +import java.util.HashMap;, +		final Map<Class<? extends Throwable>, Method> matchedHandlers = new HashMap<Class<? extends Throwable>, Method>();, +						if (!matchedHandlers.containsKey(handledException)) {, +							matchedHandlers.put(handledException, method);]