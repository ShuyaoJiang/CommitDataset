[+++ b/spring-messaging/src/main/java/org/springframework/messaging/support/AbstractSubscribableChannel.java, +import java.util.Collections;, +import java.util.List;, +import java.util.Set;, +import java.util.concurrent.CopyOnWriteArraySet;, +, +	private final Set<MessageHandler> handlers = new CopyOnWriteArraySet<MessageHandler>();, +, +, +	public Set<MessageHandler> getSubscribers() {, +		return Collections.<MessageHandler>unmodifiableSet(this.handlers);, +	}, +, +	public boolean hasSubscription(MessageHandler handler) {, +		return this.handlers.contains(handler);, +	}, +, +	public boolean subscribe(MessageHandler handler) {, +		boolean result = this.handlers.add(handler);, +	public boolean unsubscribe(MessageHandler handler) {, +		boolean result = this.handlers.remove(handler);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/AbstractSubscribableChannel.java, +import java.util.Collections;, +import java.util.List;, +import java.util.Set;, +import java.util.concurrent.CopyOnWriteArraySet;, +, +	private final Set<MessageHandler> handlers = new CopyOnWriteArraySet<MessageHandler>();, +, +, +	public Set<MessageHandler> getSubscribers() {, +		return Collections.<MessageHandler>unmodifiableSet(this.handlers);, +	}, +, +	public boolean hasSubscription(MessageHandler handler) {, +		return this.handlers.contains(handler);, +	}, +, +	public boolean subscribe(MessageHandler handler) {, +		boolean result = this.handlers.add(handler);, +	public boolean unsubscribe(MessageHandler handler) {, +		boolean result = this.handlers.remove(handler);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/ExecutorSubscribableChannel.java, +		for (final MessageHandler handler : getSubscribers()) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/AbstractSubscribableChannel.java, +import java.util.Collections;, +import java.util.List;, +import java.util.Set;, +import java.util.concurrent.CopyOnWriteArraySet;, +, +	private final Set<MessageHandler> handlers = new CopyOnWriteArraySet<MessageHandler>();, +, +, +	public Set<MessageHandler> getSubscribers() {, +		return Collections.<MessageHandler>unmodifiableSet(this.handlers);, +	}, +, +	public boolean hasSubscription(MessageHandler handler) {, +		return this.handlers.contains(handler);, +	}, +, +	public boolean subscribe(MessageHandler handler) {, +		boolean result = this.handlers.add(handler);, +	public boolean unsubscribe(MessageHandler handler) {, +		boolean result = this.handlers.remove(handler);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/ExecutorSubscribableChannel.java, +		for (final MessageHandler handler : getSubscribers()) {, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/config/MessageBrokerConfigurationTests.java, +import java.util.Set;, +		Set<MessageHandler> handlers = channel.getSubscribers();, +		Set<MessageHandler> handlers = channel.getSubscribers();, +		assertEquals(3, handlers.size());, +		assertTrue(handlers.contains(brokerRelayContext.getBean(SimpAnnotationMethodMessageHandler.class)));, +		assertTrue(handlers.contains(brokerRelayContext.getBean(UserDestinationMessageHandler.class)));, +		assertTrue(handlers.contains(brokerRelayContext.getBean(StompBrokerRelayMessageHandler.class)));, +		Set<MessageHandler> handlers = channel.getSubscribers();, +		Set<MessageHandler> handlers = channel.getSubscribers();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/AbstractSubscribableChannel.java, +import java.util.Collections;, +import java.util.List;, +import java.util.Set;, +import java.util.concurrent.CopyOnWriteArraySet;, +, +	private final Set<MessageHandler> handlers = new CopyOnWriteArraySet<MessageHandler>();, +, +, +	public Set<MessageHandler> getSubscribers() {, +		return Collections.<MessageHandler>unmodifiableSet(this.handlers);, +	}, +, +	public boolean hasSubscription(MessageHandler handler) {, +		return this.handlers.contains(handler);, +	}, +, +	public boolean subscribe(MessageHandler handler) {, +		boolean result = this.handlers.add(handler);, +	public boolean unsubscribe(MessageHandler handler) {, +		boolean result = this.handlers.remove(handler);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/ExecutorSubscribableChannel.java, +		for (final MessageHandler handler : getSubscribers()) {]