[+++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/JettyTestServer.java, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/JettyTestServer.java, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/endpoint/SpringConfigurator.java, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +, +import org.springframework.util.ObjectUtils;, +	private static final Map<String, Map<Class<?>, String>> cache =, +			new ConcurrentHashMap<String, Map<Class<?>, String>>();, +	private static final String NO_VALUE = ObjectUtils.identityToString(new Object());, +, +, +	@SuppressWarnings("unchecked"), +		beanName = getBeanNameByType(wac, endpointClass);, +		if (beanName != null) {, +			return (T) wac.getBean(beanName);, +		}, +, +	private String getBeanNameByType(WebApplicationContext wac, Class<?> endpointClass) {, +, +		String wacId = wac.getId();, +, +		Map<Class<?>, String> beanNamesByType = cache.get(wacId);, +		if (beanNamesByType == null) {, +			beanNamesByType = new ConcurrentHashMap<Class<?>, String>();, +			cache.put(wacId, beanNamesByType);, +		}, +, +		if (!beanNamesByType.containsKey(endpointClass)) {, +			String[] names = wac.getBeanNamesForType(endpointClass);, +			if (names.length == 1) {, +				beanNamesByType.put(endpointClass, names[0]);, +			}, +			else {, +				beanNamesByType.put(endpointClass, NO_VALUE);, +				if (names.length > 1) {, +					String message = "Found multiple @ServerEndpoint's of type " + endpointClass + ", names=" + names;, +					logger.error(message);, +					throw new IllegalStateException(message);, +				}, +			}, +		}, +, +		String beanName = beanNamesByType.get(endpointClass);, +		return NO_VALUE.equals(beanName) ? null : beanName;, +	}, +, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/JettyTestServer.java, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/endpoint/SpringConfigurator.java, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +, +import org.springframework.util.ObjectUtils;, +	private static final Map<String, Map<Class<?>, String>> cache =, +			new ConcurrentHashMap<String, Map<Class<?>, String>>();, +	private static final String NO_VALUE = ObjectUtils.identityToString(new Object());, +, +, +	@SuppressWarnings("unchecked"), +		beanName = getBeanNameByType(wac, endpointClass);, +		if (beanName != null) {, +			return (T) wac.getBean(beanName);, +		}, +, +	private String getBeanNameByType(WebApplicationContext wac, Class<?> endpointClass) {, +, +		String wacId = wac.getId();, +, +		Map<Class<?>, String> beanNamesByType = cache.get(wacId);, +		if (beanNamesByType == null) {, +			beanNamesByType = new ConcurrentHashMap<Class<?>, String>();, +			cache.put(wacId, beanNamesByType);, +		}, +, +		if (!beanNamesByType.containsKey(endpointClass)) {, +			String[] names = wac.getBeanNamesForType(endpointClass);, +			if (names.length == 1) {, +				beanNamesByType.put(endpointClass, names[0]);, +			}, +			else {, +				beanNamesByType.put(endpointClass, NO_VALUE);, +				if (names.length > 1) {, +					String message = "Found multiple @ServerEndpoint's of type " + endpointClass + ", names=" + names;, +					logger.error(message);, +					throw new IllegalStateException(message);, +				}, +			}, +		}, +, +		String beanName = beanNamesByType.get(endpointClass);, +		return NO_VALUE.equals(beanName) ? null : beanName;, +	}, +, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/server/endpoint/SpringConfiguratorTests.java, +import javax.websocket.server.ServerEndpoint;, +	public void getEndpointPerConnection() throws Exception {, +	public void getEndpointSingletonByType() throws Exception {, +	public void getEndpointSingletonByComponentName() throws Exception {, +		ComponentEchoEndpoint expected = this.webAppContext.getBean(ComponentEchoEndpoint.class);, +		ComponentEchoEndpoint actual = this.configurator.getEndpointInstance(ComponentEchoEndpoint.class);]