[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +	private boolean useRegisteredSuffixPatternMatch = false;, +, +	private final List<String> fileExtensions = new ArrayList<String>();, +	 * <p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for, +	 * more fine-grained control over specific suffices to allow., +	 * Whether to use suffix pattern match for registered file extensions only, +	 * when matching patterns to requests., +	 *, +	 * <p>If enabled, a controller method mapped to "/users" also matches to, +	 * "/users.json" assuming ".json" is a file extension registered with the, +	 * provided {@link #setContentNegotiationManager(ContentNegotiationManager), +	 * contentNegotiationManager}. This can be useful for allowing only specific, +	 * URL extensions to be used as well as in cases where a "." in the URL path, +	 * can lead to ambiguous interpretation of path variable content, (e.g. given, +	 * "/users/{user}" and incoming URLs such as "/users/john.j.joe" and, +	 * "/users/john.j.joe.json")., +	 *, +	 * <p>If enabled, this flag also enables, +	 * {@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The, +	 * default value is {@code false}., +	 */, +	public void setUseRegisteredSuffixPatternMatch(boolean useRegsiteredSuffixPatternMatch) {, +		this.useRegisteredSuffixPatternMatch = useRegsiteredSuffixPatternMatch;, +		this.useSuffixPatternMatch = useRegsiteredSuffixPatternMatch ? true : this.useSuffixPatternMatch;, +	}, +, +	/**, +, +	/**, +	 * Whether to use registered suffixes for pattern matching., +	 */, +	public boolean useRegisteredSuffixPatternMatch() {, +		return useRegisteredSuffixPatternMatch;, +	}, +, +	 * Return the file extensions to use for suffix pattern matching., +	public List<String> getFileExtensions() {, +		return fileExtensions;, +	}, +, +	@Override, +	public void afterPropertiesSet() {, +		super.afterPropertiesSet();, +		if (this.useRegisteredSuffixPatternMatch) {, +			this.fileExtensions.addAll(contentNegotiationManager.getAllFileExtensions());, +		}, +						this.useSuffixPatternMatch, this.useTrailingSlashMatch, this.fileExtensions),, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +	private boolean useRegisteredSuffixPatternMatch = false;, +, +	private final List<String> fileExtensions = new ArrayList<String>();, +	 * <p>Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for, +	 * more fine-grained control over specific suffices to allow., +	 * Whether to use suffix pattern match for registered file extensions only, +	 * when matching patterns to requests., +	 *, +	 * <p>If enabled, a controller method mapped to "/users" also matches to, +	 * "/users.json" assuming ".json" is a file extension registered with the, +	 * provided {@link #setContentNegotiationManager(ContentNegotiationManager), +	 * contentNegotiationManager}. This can be useful for allowing only specific, +	 * URL extensions to be used as well as in cases where a "." in the URL path, +	 * can lead to ambiguous interpretation of path variable content, (e.g. given, +	 * "/users/{user}" and incoming URLs such as "/users/john.j.joe" and, +	 * "/users/john.j.joe.json")., +	 *, +	 * <p>If enabled, this flag also enables, +	 * {@link #setUseSuffixPatternMatch(boolean) useSuffixPatternMatch}. The, +	 * default value is {@code false}., +	 */, +	public void setUseRegisteredSuffixPatternMatch(boolean useRegsiteredSuffixPatternMatch) {, +		this.useRegisteredSuffixPatternMatch = useRegsiteredSuffixPatternMatch;, +		this.useSuffixPatternMatch = useRegsiteredSuffixPatternMatch ? true : this.useSuffixPatternMatch;, +	}, +, +	/**, +, +	/**, +	 * Whether to use registered suffixes for pattern matching., +	 */, +	public boolean useRegisteredSuffixPatternMatch() {, +		return useRegisteredSuffixPatternMatch;, +	}, +, +	 * Return the file extensions to use for suffix pattern matching., +	public List<String> getFileExtensions() {, +		return fileExtensions;, +	}, +, +	@Override, +	public void afterPropertiesSet() {, +		super.afterPropertiesSet();, +		if (this.useRegisteredSuffixPatternMatch) {, +			this.fileExtensions.addAll(contentNegotiationManager.getAllFileExtensions());, +		}, +						this.useSuffixPatternMatch, this.useTrailingSlashMatch, this.fileExtensions),, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMappingTests.java, +/*, + * Copyright 2002-2012 the original author or authors., + *]