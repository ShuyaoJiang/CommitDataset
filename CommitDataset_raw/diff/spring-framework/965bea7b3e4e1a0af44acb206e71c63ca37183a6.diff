[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/ConfigurableListableBeanFactory.java, + * Copyright 2002-2014 the original author or authors., +import java.util.Iterator;, +, +	 * Return a unified view over all bean names managed by this factory., +	 * <p>Includes bean definition names as well as names of manually registered, +	 * singleton instances, with bean definition names consistently coming first,, +	 * analogous to how type/annotation specific retrieval of bean names works., +	 * @return the composite iterator for the bean names view, +	 * @since 4.1.2, +	 * @see #containsBeanDefinition, +	 * @see #registerSingleton, +	 * @see #getBeanNamesForType, +	 * @see #getBeanNamesForAnnotation, +	 */, +	Iterator<String> getBeanNamesIterator();, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/ConfigurableListableBeanFactory.java, + * Copyright 2002-2014 the original author or authors., +import java.util.Iterator;, +, +	 * Return a unified view over all bean names managed by this factory., +	 * <p>Includes bean definition names as well as names of manually registered, +	 * singleton instances, with bean definition names consistently coming first,, +	 * analogous to how type/annotation specific retrieval of bean names works., +	 * @return the composite iterator for the bean names view, +	 * @since 4.1.2, +	 * @see #containsBeanDefinition, +	 * @see #registerSingleton, +	 * @see #getBeanNamesForType, +	 * @see #getBeanNamesForAnnotation, +	 */, +	Iterator<String> getBeanNamesIterator();, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +import java.util.Iterator;, +import java.util.LinkedHashSet;, +import org.springframework.util.CompositeIterator;, +	/** Map of singleton and non-singleton bean names, keyed by dependency type */, +	/** Map of singleton-only bean names, keyed by dependency type */, +	private final List<String> beanDefinitionNames = new ArrayList<String>(64);, +, +	/** List of names of manually registered singletons, in registration order */, +	private final Set<String> manualSingletonNames = new LinkedHashSet<String>(16);, +	 * Return an id for serialization purposes, if specified, allowing this BeanFactory, +	 * to be deserialized from this id back into the BeanFactory object, if needed., +	 * @since 4.1.2, +	 */, +	public String getSerializationId() {, +		return this.serializationId;, +	}, +, +	/**, +	 * Return whether it should be allowed to override bean definitions by registering, +	 * a different definition with the same name, automatically replacing the former., +	 * @since 4.1.2, +	 */, +	public boolean isAllowBeanDefinitionOverriding() {, +		return this.allowBeanDefinitionOverriding;, +	}, +, +	/**, +	 * Return whether the factory is allowed to eagerly load bean classes, +	 * even for bean definitions that are marked as "lazy-init"., +	 * @since 4.1.2, +	 */, +	public boolean isAllowEagerClassLoading() {, +		return this.allowEagerClassLoading;, +	}, +, +	/**, +		for (String beanName : this.beanDefinitionNames) {, +							((mbd.hasBeanClass() || !mbd.isLazyInit() || isAllowEagerClassLoading())) &&, +		// Check manually registered singletons too., +		for (String beanName : this.manualSingletonNames) {, +		for (String beanName : this.beanDefinitionNames) {, +		for (String beanName : this.manualSingletonNames) {, +		for (String beanName : this.beanDefinitionNames) {, +		for (String beanName : this.manualSingletonNames) {, +	public Iterator<String> getBeanNamesIterator() {, +		CompositeIterator<String> iterator = new CompositeIterator<String>();, +		iterator.add(this.beanDefinitionNames.iterator());, +		iterator.add(this.manualSingletonNames.iterator());, +		return iterator;, +	}, +, +	@Override, +		List<String> beanNames = new ArrayList<String>(this.beanDefinitionNames);, +			this.manualSingletonNames.remove(beanName);, +		return isAllowBeanDefinitionOverriding();, +		if (!this.beanDefinitionMap.containsKey(beanName)) {, +			this.manualSingletonNames.add(beanName);, +		}, +		this.manualSingletonNames.remove(beanName);, +			if (getDependencyComparator() != null && result instanceof Object[]) {, +			if (getDependencyComparator() != null && result instanceof List) {, +		Comparator<Object> comparator = getDependencyComparator();, +		if (comparator instanceof OrderComparator) {]