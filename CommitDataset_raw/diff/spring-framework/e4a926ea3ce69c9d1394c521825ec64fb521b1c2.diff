[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelExpression.java, + * Copyright 2002-2012 the original author or authors., + * A {@code SpelExpression} represents a parsed (valid) expression that is ready, + * to be evaluated in a specified context. An expression can be evaluated, + * standalone or in a specified context. During expression evaluation the context, + * may be asked to resolve references to types, beans, properties, and methods., +	public Class<?> getValueType() throws EvaluationException {, +	public Class<?> getValueType(Object rootObject) throws EvaluationException {, +	public Class<?> getValueType(EvaluationContext context) throws EvaluationException {, +	public Class<?> getValueType(EvaluationContext context, Object rootObject) throws EvaluationException {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelExpression.java, + * Copyright 2002-2012 the original author or authors., + * A {@code SpelExpression} represents a parsed (valid) expression that is ready, + * to be evaluated in a specified context. An expression can be evaluated, + * standalone or in a specified context. During expression evaluation the context, + * may be asked to resolve references to types, beans, properties, and methods., +	public Class<?> getValueType() throws EvaluationException {, +	public Class<?> getValueType(Object rootObject) throws EvaluationException {, +	public Class<?> getValueType(EvaluationContext context) throws EvaluationException {, +	public Class<?> getValueType(EvaluationContext context, Object rootObject) throws EvaluationException {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java, + * Copyright 2002-2012 the original author or authors., +			int dotpos = pos;, +			if (pos == dotpos + 1) {, +				// the number is something like '3.'. It is really an int but may be, +				// part of something like '3.toString()'. In this case process it as, +				// an int and leave the dot as a separate token., +				pos = dotpos;, +				pushIntToken(subarray(start, pos), false, start, pos);, +				return;, +			}, +			isReal = true; // if it wasn't before, it is now, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelExpression.java, + * Copyright 2002-2012 the original author or authors., + * A {@code SpelExpression} represents a parsed (valid) expression that is ready, + * to be evaluated in a specified context. An expression can be evaluated, + * standalone or in a specified context. During expression evaluation the context, + * may be asked to resolve references to types, beans, properties, and methods., +	public Class<?> getValueType() throws EvaluationException {, +	public Class<?> getValueType(Object rootObject) throws EvaluationException {, +	public Class<?> getValueType(EvaluationContext context) throws EvaluationException {, +	public Class<?> getValueType(EvaluationContext context, Object rootObject) throws EvaluationException {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java, + * Copyright 2002-2012 the original author or authors., +			int dotpos = pos;, +			if (pos == dotpos + 1) {, +				// the number is something like '3.'. It is really an int but may be, +				// part of something like '3.toString()'. In this case process it as, +				// an int and leave the dot as a separate token., +				pos = dotpos;, +				pushIntToken(subarray(start, pos), false, start, pos);, +				return;, +			}, +			isReal = true; // if it wasn't before, it is now, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/standard/SpelParserTests.java, + * Copyright 2002-2012 the original author or authors., +import static org.junit.Assert.*;, +, +		assertNotNull(expr);, +		assertNotNull(expr.getAST());, +		assertEquals(2, expr.getValue());, +		assertEquals(Integer.class, expr.getValueType());, +		assertEquals(2, expr.getAST().getValue(null));, +		Class<?> c = parser.parseRaw("2").getValueType();, +		assertEquals(Integer.class, c);, +		assertEquals(Integer.class, c);, +		assertNull(c);, +		assertNull(c);, +		assertNull(o);, +		assertEquals(5, expr.getValue());, +		assertEquals(5, expr.getValue());, +		assertEquals(5, expr.getValue());, +		assertEquals(5, expr.getValue());, +		assertNotNull(expr);, +		assertNotNull(expr.getAST());, +		assertEquals(4, expr.getValue());, +		assertEquals(78, expr.getValue());, +		assertNotNull(expr);, +		assertNotNull(expr.getAST());, +		assertEquals(6, expr.getValue());, +		assertEquals(11, expr.getValue());, +, +			fail();, +			assertTrue(e instanceof SpelParseException);, +			assertEquals(SpelMessage.MISSING_CONSTRUCTOR_ARGS, spe.getMessageCode());, +			assertEquals(10, spe.getPosition());, +, +			fail();, +			assertTrue(e instanceof SpelParseException);, +			assertEquals(SpelMessage.RUN_OUT_OF_ARGUMENTS, spe.getMessageCode());, +			assertEquals(10, spe.getPosition());, +, +			fail();, +			assertTrue(e instanceof SpelParseException);, +			assertEquals(SpelMessage.RUN_OUT_OF_ARGUMENTS, spe.getMessageCode());, +			assertEquals(10, spe.getPosition());, +, +			fail();, +			assertTrue(e instanceof SpelParseException);, +			assertEquals(SpelMessage.RUN_OUT_OF_ARGUMENTS, spe.getMessageCode());]