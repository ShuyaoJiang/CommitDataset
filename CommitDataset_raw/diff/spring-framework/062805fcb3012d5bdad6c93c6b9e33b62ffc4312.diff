[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +	private final DeferredImportSelectorHandler deferredImportSelectorHandler = new DeferredImportSelectorHandler();, +		this.deferredImportSelectorHandler.process();, +						if (selector instanceof DeferredImportSelector) {, +							this.deferredImportSelectorHandler.handle(, +									configClass, (DeferredImportSelector) selector);, +	private class DeferredImportSelectorHandler {, +, +		@Nullable, +		private List<DeferredImportSelectorHolder> deferredImportSelectors = new ArrayList<>();, +, +		/**, +		 * Handle the specified {@link DeferredImportSelector}. If deferred import, +		 * selectors are being collected, this registers this instance to the list. If, +		 * they are being processed, the {@link DeferredImportSelector} is also processed, +		 * immediately according to its {@link DeferredImportSelector.Group}., +		 * @param configClass the source configuration class, +		 * @param importSelector the selector to handle, +		 */, +		public void handle(ConfigurationClass configClass, DeferredImportSelector importSelector) {, +			DeferredImportSelectorHolder holder = new DeferredImportSelectorHolder(, +					configClass, importSelector);, +			if (this.deferredImportSelectors == null) {, +				DeferredImportSelectorGroupingHandler handler = new DeferredImportSelectorGroupingHandler();, +				handler.register(holder);, +				handler.processGroupImports();, +			}, +			else {, +				this.deferredImportSelectors.add(holder);, +			}, +		}, +, +		public void process() {, +			List<DeferredImportSelectorHolder> deferredImports = this.deferredImportSelectors;, +			this.deferredImportSelectors = null;, +			try {, +				if (deferredImports != null) {, +					DeferredImportSelectorGroupingHandler handler = new DeferredImportSelectorGroupingHandler();, +					deferredImports.sort(DEFERRED_IMPORT_COMPARATOR);, +					deferredImports.forEach(handler::register);, +					handler.processGroupImports();, +				}, +			}, +			finally {, +				this.deferredImportSelectors = new ArrayList<>();, +			}, +		}, +		, +	}, +, +, +	private class DeferredImportSelectorGroupingHandler {, +, +		private final Map<Object, DeferredImportSelectorGrouping> groupings = new LinkedHashMap<>();, +, +		private final Map<AnnotationMetadata, ConfigurationClass> configurationClasses = new HashMap<>();, +, +		public void register(DeferredImportSelectorHolder deferredImport) {, +			Class<? extends Group> group = deferredImport.getImportSelector(), +					.getImportGroup();, +			DeferredImportSelectorGrouping grouping = this.groupings.computeIfAbsent(, +					(group != null ? group : deferredImport),, +					key -> new DeferredImportSelectorGrouping(createGroup(group)));, +			grouping.add(deferredImport);, +			this.configurationClasses.put(deferredImport.getConfigurationClass().getMetadata(),, +					deferredImport.getConfigurationClass());, +		}, +, +		public void processGroupImports() {, +			for (DeferredImportSelectorGrouping grouping : this.groupings.values()) {, +				grouping.getImports().forEach(entry -> {, +					ConfigurationClass configurationClass = this.configurationClasses.get(, +							entry.getMetadata());, +					try {, +						processImports(configurationClass, asSourceClass(configurationClass),, +								asSourceClasses(entry.getImportClassName()), false);, +					}, +					catch (BeanDefinitionStoreException ex) {, +						throw ex;, +					}, +					catch (Throwable ex) {, +						throw new BeanDefinitionStoreException(, +								"Failed to process import candidates for configuration class [" +, +										configurationClass.getMetadata().getClassName() + "]", ex);, +					}, +				});, +			}, +		}, +, +		private Group createGroup(@Nullable Class<? extends Group> type) {, +			Class<? extends Group> effectiveType = (type != null ? type, +					: DefaultDeferredImportSelectorGroup.class);, +			Group group = BeanUtils.instantiateClass(effectiveType);, +			ParserStrategyUtils.invokeAwareMethods(group,, +					ConfigurationClassParser.this.environment,, +					ConfigurationClassParser.this.resourceLoader,, +					ConfigurationClassParser.this.registry);, +			return group;, +		}, +]