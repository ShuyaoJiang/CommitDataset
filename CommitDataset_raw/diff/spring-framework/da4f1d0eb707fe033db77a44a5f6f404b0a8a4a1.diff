[+++ b/org.springframework.context/src/main/java/org/springframework/context/ApplicationContext.java, + * Copyright 2002-2009 the original author or authors., +	 * @return the unique id of the context, or <code>null</code> if none, +	 * @return a display name for this context (never <code>null</code>), +++ b/org.springframework.context/src/main/java/org/springframework/context/ApplicationContext.java, + * Copyright 2002-2009 the original author or authors., +	 * @return the unique id of the context, or <code>null</code> if none, +	 * @return a display name for this context (never <code>null</code>), +++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +	/** Display name */, +	private String displayName = ObjectUtils.identityToString(this);, +, +	/**, +	 * Return the unique id of this application context., +	 * @return the unique id of the context, or <code>null</code> if none, +	 */, +	 * Set a friendly name for this context., +	 * Typically done during initialization of concrete context implementations., +	 * <p>Default is the object id of the context instance., +	 */, +	public void setDisplayName(String displayName) {, +		Assert.hasLength(displayName, "Display name must not be empty");, +		this.displayName = displayName;, +	}, +, +	/**, +	 * Return a friendly name for this context., +	 * @return a display name for this context (never <code>null</code>), +	 */, +	public String getDisplayName() {, +		return this.displayName;, +	}, +, +	/**, +			logger.trace("Publishing event in " + getDisplayName() + ": " + event);, +			logger.debug("Bean factory for " + getDisplayName() + ": " + beanFactory);, +		StringBuilder sb = new StringBuilder(getDisplayName());, +		sb.append(": startup date [").append(new Date(getStartupDate()));, +			sb.append("parent: ").append(parent.getDisplayName());, +++ b/org.springframework.context/src/main/java/org/springframework/context/ApplicationContext.java, + * Copyright 2002-2009 the original author or authors., +	 * @return the unique id of the context, or <code>null</code> if none, +	 * @return a display name for this context (never <code>null</code>), +++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +	/** Display name */, +	private String displayName = ObjectUtils.identityToString(this);, +, +	/**, +	 * Return the unique id of this application context., +	 * @return the unique id of the context, or <code>null</code> if none, +	 */, +	 * Set a friendly name for this context., +	 * Typically done during initialization of concrete context implementations., +	 * <p>Default is the object id of the context instance., +	 */, +	public void setDisplayName(String displayName) {, +		Assert.hasLength(displayName, "Display name must not be empty");, +		this.displayName = displayName;, +	}, +, +	/**, +	 * Return a friendly name for this context., +	 * @return a display name for this context (never <code>null</code>), +	 */, +	public String getDisplayName() {, +		return this.displayName;, +	}, +, +	/**, +			logger.trace("Publishing event in " + getDisplayName() + ": " + event);, +			logger.debug("Bean factory for " + getDisplayName() + ": " + beanFactory);, +		StringBuilder sb = new StringBuilder(getDisplayName());, +		sb.append(": startup date [").append(new Date(getStartupDate()));, +			sb.append("parent: ").append(parent.getDisplayName());, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractRefreshableApplicationContext.java, +			throw new ApplicationContextException("I/O error parsing XML document for " + getDisplayName(), ex);]