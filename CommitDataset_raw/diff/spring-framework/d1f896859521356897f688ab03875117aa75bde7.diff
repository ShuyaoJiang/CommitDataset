[+++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/ControllerAdvice.java, + * Copyright 2002-2014 the original author or authors., +	 * @see #basePackages(), +	 * Controllers that belong to those base packages or sub-packages thereof, +	 * will be included, e.g.: {@code @ControllerAdvice(basePackages="org.my.pkg")}, +	 * or {@code @ControllerAdvice(basePackages={"org.my.pkg", "org.my.other.pkg"})}., +	 * <p>{@link #value()} is an alias for this attribute, simply allowing for, +	 * more concise use of the annotation., +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/ControllerAdvice.java, + * Copyright 2002-2014 the original author or authors., +	 * @see #basePackages(), +	 * Controllers that belong to those base packages or sub-packages thereof, +	 * will be included, e.g.: {@code @ControllerAdvice(basePackages="org.my.pkg")}, +	 * or {@code @ControllerAdvice(basePackages={"org.my.pkg", "org.my.other.pkg"})}., +	 * <p>{@link #value()} is an alias for this attribute, simply allowing for, +	 * more concise use of the annotation., +++ b/spring-web/src/main/java/org/springframework/web/method/ControllerAdviceBean.java, +	 * annotation, or {@link Ordered#LOWEST_PRECEDENCE} otherwise., +	 * Return the type of the contained bean., +	 * <p>If the bean type is a CGLIB-generated class, the original, +	 * user-defined class is returned., +	 * Check whether the given bean type should be assisted by this, +				if (beanType.getName().startsWith(basePackage)) {, +				basePackages.add(adaptBasePackage(basePackage));, +				basePackages.add(adaptBasePackage(basePackage));, +			basePackages.add(adaptBasePackage(ClassUtils.getPackageName(markerClass)));, +	private static String adaptBasePackage(String basePackage) {, +		return (basePackage.endsWith(".") ? basePackage : basePackage + ".");, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/ControllerAdvice.java, + * Copyright 2002-2014 the original author or authors., +	 * @see #basePackages(), +	 * Controllers that belong to those base packages or sub-packages thereof, +	 * will be included, e.g.: {@code @ControllerAdvice(basePackages="org.my.pkg")}, +	 * or {@code @ControllerAdvice(basePackages={"org.my.pkg", "org.my.other.pkg"})}., +	 * <p>{@link #value()} is an alias for this attribute, simply allowing for, +	 * more concise use of the annotation., +++ b/spring-web/src/main/java/org/springframework/web/method/ControllerAdviceBean.java, +	 * annotation, or {@link Ordered#LOWEST_PRECEDENCE} otherwise., +	 * Return the type of the contained bean., +	 * <p>If the bean type is a CGLIB-generated class, the original, +	 * user-defined class is returned., +	 * Check whether the given bean type should be assisted by this, +				if (beanType.getName().startsWith(basePackage)) {, +				basePackages.add(adaptBasePackage(basePackage));, +				basePackages.add(adaptBasePackage(basePackage));, +			basePackages.add(adaptBasePackage(ClassUtils.getPackageName(markerClass)));, +	private static String adaptBasePackage(String basePackage) {, +		return (basePackage.endsWith(".") ? basePackage : basePackage + ".");, +	}, +, +++ b/spring-web/src/test/java/org/springframework/web/method/ControllerAdviceBeanTests.java, +]