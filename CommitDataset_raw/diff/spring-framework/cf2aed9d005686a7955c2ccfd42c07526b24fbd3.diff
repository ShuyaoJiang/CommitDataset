[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/HeaderResultMatchers.java, +import java.text.SimpleDateFormat;, +import java.util.Date;, +import java.util.Locale;, +import java.util.TimeZone;, +, + * @author Brian Clozel, +	/**, +	 * Assert the primary value of the named response header as a date String,, +	 * using the preferred date format described in RFC 7231., +	 * <p>The {@link ResultMatcher} returned by this method throws an {@link AssertionError}, +	 * if the response does not contain the specified header, or if the supplied, +	 * {@code value} does not match the primary value., +	 *, +	 * @see <a href="https://tools.ietf.org/html/rfc7231#section-7.1.1.1">Section 7.1.1.1 of RFC 7231</a>, +	 * @since 4.2, +	 */, +	public ResultMatcher dateValue(final String name, final long value) {, +		return new ResultMatcher() {, +			@Override, +			public void match(MvcResult result) {, +				SimpleDateFormat format = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US);, +				format.setTimeZone(TimeZone.getTimeZone("GMT"));, +				assertTrue("Response does not contain header " + name, result.getResponse().containsHeader(name));, +				assertEquals("Response header " + name, format.format(new Date(value)), result.getResponse().getHeader(name));, +			}, +		};, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/HeaderResultMatchers.java, +import java.text.SimpleDateFormat;, +import java.util.Date;, +import java.util.Locale;, +import java.util.TimeZone;, +, + * @author Brian Clozel, +	/**, +	 * Assert the primary value of the named response header as a date String,, +	 * using the preferred date format described in RFC 7231., +	 * <p>The {@link ResultMatcher} returned by this method throws an {@link AssertionError}, +	 * if the response does not contain the specified header, or if the supplied, +	 * {@code value} does not match the primary value., +	 *, +	 * @see <a href="https://tools.ietf.org/html/rfc7231#section-7.1.1.1">Section 7.1.1.1 of RFC 7231</a>, +	 * @since 4.2, +	 */, +	public ResultMatcher dateValue(final String name, final long value) {, +		return new ResultMatcher() {, +			@Override, +			public void match(MvcResult result) {, +				SimpleDateFormat format = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US);, +				format.setTimeZone(TimeZone.getTimeZone("GMT"));, +				assertTrue("Response does not contain header " + name, result.getResponse().containsHeader(name));, +				assertEquals("Response header " + name, format.format(new Date(value)), result.getResponse().getHeader(name));, +			}, +		};, +	}, +, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HeaderAssertionTests.java, +import org.springframework.http.ResponseEntity;, +import java.text.SimpleDateFormat;, +import java.util.Date;, +import java.util.Locale;, +import java.util.TimeZone;, +, + * @author Brian Clozel, +	private String now;, +, +	private String oneMinuteAgo;, +, +	private String oneSecondLater;, +, +		SimpleDateFormat dateFormat = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US);, +		dateFormat.setTimeZone(TimeZone.getTimeZone("GMT"));, +		this.now = dateFormat.format(new Date(currentTime));, +		this.oneMinuteAgo = dateFormat.format(new Date(currentTime - (1000 * 60)));, +		this.oneSecondLater = dateFormat.format(new Date(currentTime + 1000));, +		this.mockMvc.perform(get("/persons/1").header(IF_MODIFIED_SINCE, oneMinuteAgo))//, +		.andExpect(header().string(LAST_MODIFIED, now));, +		this.mockMvc.perform(get("/persons/1").header(IF_MODIFIED_SINCE, oneMinuteAgo))//, +		.andExpect(header().string(LAST_MODIFIED, equalTo(now)));, +	}, +, +	@Test, +	public void dateValueWithCorrectResponseHeaderValue() throws Exception {, +		this.mockMvc.perform(get("/persons/1").header(IF_MODIFIED_SINCE, oneMinuteAgo))//, +		.andExpect(header().dateValue(LAST_MODIFIED, currentTime));, +		this.mockMvc.perform(get("/persons/1"))//, +		.andExpect(header().longValue("X-Rate-Limiting", 42));, +		this.mockMvc.perform(get("/persons/1").header(IF_MODIFIED_SINCE, now))//, +		this.mockMvc.perform(get("/persons/1").header(IF_MODIFIED_SINCE, now))//, +			this.mockMvc.perform(get("/persons/1").header(IF_MODIFIED_SINCE, now))//, +		assertIncorrectResponseHeaderValue(header().string(LAST_MODIFIED, oneSecondLater), oneSecondLater);, +		assertIncorrectResponseHeaderValue(header().string(LAST_MODIFIED, equalTo(oneSecondLater)), oneSecondLater);, +	public void dateValueWithIncorrectResponseHeaderValue() throws Exception {, +		assertIncorrectResponseHeaderValue(header().dateValue(LAST_MODIFIED, unexpected), oneSecondLater);, +	@Test(expected = AssertionError.class), +	public void longValueWithIncorrectResponseHeaderValue() throws Exception {, +		this.mockMvc.perform(get("/persons/1")).andExpect(header().longValue("X-Rate-Limiting", 1));, +	}]