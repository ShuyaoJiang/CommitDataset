[+++ b/spring-core/src/main/java/org/springframework/core/convert/support/ByteBufferConverter.java, + * Copyright 2002-2015 the original author or authors., +import java.nio.Buffer;, + * Converts a {@link ByteBuffer} directly to and from {@code byte[]}s and indirectly, + * to any type that the {@link ConversionService} support via {@code byte[]}., +	private final ConversionService conversionService;, +		return (targetType.isAssignableTo(BYTE_ARRAY_TYPE) ||, +				this.conversionService.canConvert(BYTE_ARRAY_TYPE, targetType));, +		return (sourceType.isAssignableTo(BYTE_ARRAY_TYPE) ||, +				this.conversionService.canConvert(sourceType, BYTE_ARRAY_TYPE));, +	public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +		byte[] bytes = (byte[]) (source instanceof byte[] ? source :, +				this.conversionService.convert(source, sourceType, BYTE_ARRAY_TYPE));, +, +, +		// Extra cast necessary for compiling on JDK 9 plus running on JDK 8, since, +		// otherwise the overridden ByteBuffer-returning rewind method would be chosen, +		// which isn't available on JDK 8., +		((Buffer) byteBuffer).rewind();, +, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/ByteBufferConverter.java, + * Copyright 2002-2015 the original author or authors., +import java.nio.Buffer;, + * Converts a {@link ByteBuffer} directly to and from {@code byte[]}s and indirectly, + * to any type that the {@link ConversionService} support via {@code byte[]}., +	private final ConversionService conversionService;, +		return (targetType.isAssignableTo(BYTE_ARRAY_TYPE) ||, +				this.conversionService.canConvert(BYTE_ARRAY_TYPE, targetType));, +		return (sourceType.isAssignableTo(BYTE_ARRAY_TYPE) ||, +				this.conversionService.canConvert(sourceType, BYTE_ARRAY_TYPE));, +	public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +		byte[] bytes = (byte[]) (source instanceof byte[] ? source :, +				this.conversionService.convert(source, sourceType, BYTE_ARRAY_TYPE));, +, +, +		// Extra cast necessary for compiling on JDK 9 plus running on JDK 8, since, +		// otherwise the overridden ByteBuffer-returning rewind method would be chosen, +		// which isn't available on JDK 8., +		((Buffer) byteBuffer).rewind();, +, +++ b/spring-core/src/test/java/org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.JdkVersion;, +		String expectedProtocol = (JdkVersion.getMajorJavaVersion() < JdkVersion.JAVA_19 ? "jar" : "jrt");, +		assertProtocolAndFilename(resources[0], expectedProtocol, "URL.class");, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/ByteBufferConverter.java, + * Copyright 2002-2015 the original author or authors., +import java.nio.Buffer;, + * Converts a {@link ByteBuffer} directly to and from {@code byte[]}s and indirectly, + * to any type that the {@link ConversionService} support via {@code byte[]}., +	private final ConversionService conversionService;, +		return (targetType.isAssignableTo(BYTE_ARRAY_TYPE) ||, +				this.conversionService.canConvert(BYTE_ARRAY_TYPE, targetType));, +		return (sourceType.isAssignableTo(BYTE_ARRAY_TYPE) ||, +				this.conversionService.canConvert(sourceType, BYTE_ARRAY_TYPE));, +	public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +		byte[] bytes = (byte[]) (source instanceof byte[] ? source :, +				this.conversionService.convert(source, sourceType, BYTE_ARRAY_TYPE));, +, +, +		// Extra cast necessary for compiling on JDK 9 plus running on JDK 8, since, +		// otherwise the overridden ByteBuffer-returning rewind method would be chosen, +		// which isn't available on JDK 8., +		((Buffer) byteBuffer).rewind();, +, +++ b/spring-core/src/test/java/org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.JdkVersion;, +		String expectedProtocol = (JdkVersion.getMajorJavaVersion() < JdkVersion.JAVA_19 ? "jar" : "jrt");, +		assertProtocolAndFilename(resources[0], expectedProtocol, "URL.class");, +++ b/spring-core/src/test/java/org/springframework/tests/JavaVersion.java, + * Copyright 2002-2015 the original author or authors., +	JAVA_18("1.8", 18),, +, +	/**, +	 * Java 1.9, +	 */, +	JAVA_19("1.9", 19);, +		return JavaVersion.JAVA_16;, +		return (this.value >= version.value);, +	 * determined {@link #JAVA_16} will be returned., +, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/ByteBufferConverter.java, + * Copyright 2002-2015 the original author or authors., +import java.nio.Buffer;, + * Converts a {@link ByteBuffer} directly to and from {@code byte[]}s and indirectly, + * to any type that the {@link ConversionService} support via {@code byte[]}., +	private final ConversionService conversionService;, +		return (targetType.isAssignableTo(BYTE_ARRAY_TYPE) ||, +				this.conversionService.canConvert(BYTE_ARRAY_TYPE, targetType));, +		return (sourceType.isAssignableTo(BYTE_ARRAY_TYPE) ||, +				this.conversionService.canConvert(sourceType, BYTE_ARRAY_TYPE));, +	public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +		byte[] bytes = (byte[]) (source instanceof byte[] ? source :, +				this.conversionService.convert(source, sourceType, BYTE_ARRAY_TYPE));, +, +, +		// Extra cast necessary for compiling on JDK 9 plus running on JDK 8, since, +		// otherwise the overridden ByteBuffer-returning rewind method would be chosen, +		// which isn't available on JDK 8.]