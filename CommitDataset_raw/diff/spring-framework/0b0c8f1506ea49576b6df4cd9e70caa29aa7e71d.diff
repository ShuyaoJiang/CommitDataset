[+++ b/org.springframework.context/src/test/java/org/springframework/ejb/access/LocalSlsbInvokerInterceptorTests.java, +/*, + * Copyright 2002-2007 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.ejb.access;, +, +import static org.easymock.EasyMock.*;, +import static org.junit.Assert.*;, +, +import javax.ejb.CreateException;, +import javax.ejb.EJBLocalHome;, +import javax.ejb.EJBLocalObject;, +import javax.naming.Context;, +import javax.naming.NamingException;, +, +import org.junit.Test;, +import org.springframework.aop.framework.ProxyFactory;, +import org.springframework.jndi.JndiTemplate;, +, +/**, + * @author Rod Johnson, + * @author Juergen Hoeller, + * @author Chris Beams, +*/, +public class LocalSlsbInvokerInterceptorTests {, +, +	/**, +	 * Test that it performs the correct lookup., +	 */, +	@Test, +	public void testPerformsLookup() throws Exception {, +		LocalInterfaceWithBusinessMethods ejb = createMock(LocalInterfaceWithBusinessMethods.class);, +		replay(ejb);, +		, +		String jndiName= "foobar";, +		Context mockContext = mockContext(jndiName, ejb);, +		, +		configuredInterceptor(mockContext, jndiName);, +		, +		verify(mockContext);, +	}, +	, +	@Test, +	public void testLookupFailure() throws Exception {, +		final NamingException nex = new NamingException();, +		final String jndiName= "foobar";, +		JndiTemplate jt = new JndiTemplate() {, +			public Object lookup(String name) throws NamingException {, +				assertTrue(jndiName.equals(name));, +				throw nex;, +			}, +		};, +	, +		LocalSlsbInvokerInterceptor si = new LocalSlsbInvokerInterceptor();, +		si.setJndiName("foobar");, +		// default resourceRef=false should cause this to fail, as java:/comp/env will not, +		// automatically be added, +		si.setJndiTemplate(jt);, +		try {, +			si.afterPropertiesSet();, +			fail("Should have failed with naming exception");, +		}, +		catch (NamingException ex) {, +			assertTrue(ex == nex);, +		}, +	}, +	, +	@Test, +	public void testInvokesMethodOnEjbInstance() throws Exception {, +		Object retVal = new Object();, +		LocalInterfaceWithBusinessMethods ejb = createMock(LocalInterfaceWithBusinessMethods.class);, +		expect(ejb.targetMethod()).andReturn(retVal);, +		ejb.remove();, +		replay(ejb);, +	, +		String jndiName= "foobar";, +		Context mockContext = mockContext(jndiName, ejb);, +	, +		LocalSlsbInvokerInterceptor si = configuredInterceptor(mockContext, jndiName);, +	, +		ProxyFactory pf = new ProxyFactory(new Class[] { BusinessMethods.class } );, +		pf.addAdvice(si);, +		BusinessMethods target = (BusinessMethods) pf.getProxy();, +	, +		assertTrue(target.targetMethod() == retVal);, +	, +		verify(mockContext);]