[+++ b/spring-web/src/main/java/org/springframework/web/multipart/MaxUploadSizeExceededException.java, + * Copyright 2002-2017 the original author or authors., +	 * @param maxUploadSize the maximum upload size allowed,, +	 * or -1 if the size limit isn't known, +	 * @param maxUploadSize the maximum upload size allowed,, +	 * or -1 if the size limit isn't known, +		super("Maximum upload size " + (maxUploadSize >= 0 ? "of " + maxUploadSize + " bytes " : "") + "exceeded", ex);, +	 * Return the maximum upload size allowed,, +	 * or -1 if the size limit isn't known., +++ b/spring-web/src/main/java/org/springframework/web/multipart/MaxUploadSizeExceededException.java, + * Copyright 2002-2017 the original author or authors., +	 * @param maxUploadSize the maximum upload size allowed,, +	 * or -1 if the size limit isn't known, +	 * @param maxUploadSize the maximum upload size allowed,, +	 * or -1 if the size limit isn't known, +		super("Maximum upload size " + (maxUploadSize >= 0 ? "of " + maxUploadSize + " bytes " : "") + "exceeded", ex);, +	 * Return the maximum upload size allowed,, +	 * or -1 if the size limit isn't known., +++ b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.web.multipart.MaxUploadSizeExceededException;, +		catch (Throwable ex) {, +			handleParseFailure(ex);, +	protected void handleParseFailure(Throwable ex) {, +		String msg = ex.getMessage();, +		if (msg != null && msg.contains("size") && msg.contains("exceed")) {, +			throw new MaxUploadSizeExceededException(-1, ex);, +		}, +		throw new MultipartException("Failed to parse multipart servlet request", ex);, +	private String extractFilename(String contentDisposition) {, +		return extractFilename(contentDisposition, FILENAME_KEY);, +	}, +, +		catch (Throwable ex) {, +		catch (Throwable ex) {]