[+++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/HeaderAndCookieTests.java, +		this.client.get().uri("/header-multi-value"), +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/HeaderAndCookieTests.java, +		this.client.get().uri("/header-multi-value"), +++ b/spring-web/src/main/java/org/springframework/web/util/DefaultUriBuilderFactory.java, +		 * Apply strict encoding to URI variables at the time of expanding,, +		 * quoting both illegal characters and characters with reserved meaning, +		 * via {@link UriUtils#encode(String, Charset)}., +		 * Expand URI variables first, then encode the resulting URI component, +		 * values, quoting <em>only</em> illegal characters within a given URI, +		 * component type, but not all characters with reserved meaning., +		 */, +		URI_COMPONENT,, +, +		/**, +		NONE, +	}, +	@Nullable, +	private final Map<String, Object> defaultUriVariables = new HashMap<>();, +, +		this.baseUri = null;, +		this.baseUri = UriComponentsBuilder.fromUriString(baseUriTemplate);, +	 * Specify the {@link EncodingMode EncodingMode} to use when building URIs., +	 * <p>By default set to, +	 * {@link EncodingMode#URI_COMPONENT EncodingMode.URI_COMPONENT}., +	 * @param encodingMode the encoding mode to use, +	 */, +	public void setEncodingMode(EncodingMode encodingMode) {, +		this.encodingMode = encodingMode;, +	}, +, +	/**, +	 * Return the configured encoding mode., +	 */, +	public EncodingMode getEncodingMode() {, +		return this.encodingMode;, +	}, +, +	/**, +	 * Whether to parse the input path into path segments if the encoding mode, +	 * is set to {@link EncodingMode#URI_COMPONENT EncodingMode.URI_COMPONENT},, +	 * which ensures that URI variables in the path are encoded according to, +	 * path segment rules and for example a '/' is encoded., +	 * Whether to parse the path into path segments if the encoding mode is set, +	 * to {@link EncodingMode#URI_COMPONENT EncodingMode.URI_COMPONENT}., +, +			if (StringUtils.isEmpty(uriTemplate)) {, +				return baseUri != null ? baseUri.cloneBuilder() : UriComponentsBuilder.newInstance();, +			}, +, +			UriComponentsBuilder result;, +			if (baseUri != null) {, +				UriComponentsBuilder uricBuilder = UriComponentsBuilder.fromUriString(uriTemplate);, +				UriComponents uric = uricBuilder.build();, +				result = uric.getHost() == null ? baseUri.cloneBuilder().uriComponents(uric) : uricBuilder;, +			}, +			else {, +				result = UriComponentsBuilder.fromUriString(uriTemplate);, +			}, +, +			parsePathIfNecessary(result);, +, +			return result;, +		}, +, +		private void parsePathIfNecessary(UriComponentsBuilder result) {, +			if (shouldParsePath() && encodingMode.equals(EncodingMode.URI_COMPONENT)) {, +				for (String segment : uric.getPathSegments()) {, +					result.pathSegment(segment);, +				}, +, +			UriComponents uric = this.uriComponentsBuilder.build().expand(uriVars);, +			return createUri(uric);, +			UriComponents uric = this.uriComponentsBuilder.build().expand(uriVars);, +			return createUri(uric);, +, +		private URI createUri(UriComponents uric) {, +			if (encodingMode.equals(EncodingMode.URI_COMPONENT)) {, +				uric = uric.encode();, +			}, +			return URI.create(uric.toString());, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/HeaderAndCookieTests.java, +		this.client.get().uri("/header-multi-value"), +++ b/spring-web/src/main/java/org/springframework/web/util/DefaultUriBuilderFactory.java, +		 * Apply strict encoding to URI variables at the time of expanding,, +		 * quoting both illegal characters and characters with reserved meaning, +		 * via {@link UriUtils#encode(String, Charset)}., +		 * Expand URI variables first, then encode the resulting URI component, +		 * values, quoting <em>only</em> illegal characters within a given URI, +		 * component type, but not all characters with reserved meaning., +		 */, +		URI_COMPONENT,, +, +		/**, +		NONE, +	}, +	@Nullable, +	private final Map<String, Object> defaultUriVariables = new HashMap<>();, +, +		this.baseUri = null;]