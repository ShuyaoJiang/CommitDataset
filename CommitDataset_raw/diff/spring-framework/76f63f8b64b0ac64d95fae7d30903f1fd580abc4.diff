[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Creates a new descriptor for the given type. Use this constructor when a bound value comes from a source such as, +	 * a Map or collection, where no additional binding metadata is available., +	 * Create a new descriptor for a method or constructor parameter. Use this constructor when a bound value originates, +	 * from a method parameter, such as a setter method argument., +	 * Create a new descriptor for a field. Use this constructor when a bound value originates from a field., +		if (type == null) {, +			return null;, +		}, +		Class<?> type = getType();, +		if (type != null) {, +		} else {, +			return null;, +		}, +		if (type != null) {, +			return type.isArray();, +		} else {, +			return false;, +		}, +		return isTypeAssignableTo(Collection.class);, +	 * If this type is an array type or {@link Collection} type, returns the underlying element type. Returns null if, +	 * the type is neither an array or collection., +	 * Is this type a {@link Map} type?, +	 */, +	public boolean isMap() {, +		return isTypeAssignableTo(Map.class);, +	}, +	, +	/**, +	 * Is this descriptor for a map where the key type and value type are known? , +	 */, +	public boolean isMapEntryTypeKnown() {, +		return isMap() && getMapKeyType() != null && getMapValueType() != null;, +	}, +, +	/**, +		if (field != null) {, +			return GenericCollectionTypeResolver.getMapKeyFieldType(field);, +		} else if (methodParameter != null) {, +			return GenericCollectionTypeResolver.getMapKeyParameterType(methodParameter);, +		} else {, +			return null;, +		}, +		if (field != null) {, +			return GenericCollectionTypeResolver.getMapValueFieldType(field);, +		} else if (methodParameter != null) {, +			return GenericCollectionTypeResolver.getMapValueParameterType(methodParameter);, +		} else {, +			return null;, +		}, +		} else if (methodParameter != null) {, +		} else {, +			return null;, +		Class<?> type = getType();, +		if (type != null) {, +		} else {, +			return false;, +		}, +		Class<?> type = getType();, +		if (type != null) {, +		} else {, +			return false;, +		}, +	@SuppressWarnings("unchecked"), +	private boolean isTypeAssignableTo(Class<?> clazz) {, +		Class<?> type = getType();, +		if (type != null) {, +			return clazz.isAssignableFrom(type);, +		} else {, +			return false;, +		}, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Creates a new descriptor for the given type. Use this constructor when a bound value comes from a source such as, +	 * a Map or collection, where no additional binding metadata is available., +	 * Create a new descriptor for a method or constructor parameter. Use this constructor when a bound value originates, +	 * from a method parameter, such as a setter method argument., +	 * Create a new descriptor for a field. Use this constructor when a bound value originates from a field., +		if (type == null) {, +			return null;, +		}, +		Class<?> type = getType();, +		if (type != null) {, +		} else {, +			return null;, +		}, +		if (type != null) {, +			return type.isArray();, +		} else {, +			return false;, +		}, +		return isTypeAssignableTo(Collection.class);, +	 * If this type is an array type or {@link Collection} type, returns the underlying element type. Returns null if, +	 * the type is neither an array or collection., +	 * Is this type a {@link Map} type?, +	 */, +	public boolean isMap() {, +		return isTypeAssignableTo(Map.class);, +	}]