[+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilderTests.java, +import org.springframework.web.servlet.ModelAndView;, +	public void fromControllerPlain() {, +	public void fromControllerUriTemplate() {, +	public void fromControllerSubResource() {, +	public void fromControllerTwoTypeLevelMappings() {, +	public void fromControllerNotMapped() {, +	public void fromControllerWithCustomBaseUrlViaStaticCall() {, +	public void fromControllerWithCustomBaseUrlViaInstance() {, +		MvcUriComponentsBuilder mvcBuilder = relativeTo(builder);, +	@Test, +	public void fromMethodNamePathVariable() {, +		UriComponents uriComponents = fromMethodName(ControllerWithMethods.class,, +				"methodWithPathVariable", "1").build();, +, +		assertThat(uriComponents.toUriString(), is("http://localhost/something/1/foo"));, +	}, +, +	@Test, +	public void fromMethodNameTypeLevelPathVariable() {, +		this.request.setContextPath("/myapp");, +		UriComponents uriComponents = fromMethodName(, +				PersonsAddressesController.class, "getAddressesForCountry", "DE").buildAndExpand("1");, +, +		assertThat(uriComponents.toUriString(), is("http://localhost/myapp/people/1/addresses/DE"));, +	}, +, +	@Test, +	public void fromMethodNameTwoPathVariables() {, +		DateTime now = DateTime.now();, +		UriComponents uriComponents = fromMethodName(, +				ControllerWithMethods.class, "methodWithTwoPathVariables", 1, now).build();, +, +		assertThat(uriComponents.getPath(), is("/something/1/foo/" + ISODateTimeFormat.date().print(now)));, +	}, +, +	@Test, +	public void fromMethodNameWithPathVarAndRequestParam() {, +		UriComponents uriComponents = fromMethodName(, +				ControllerWithMethods.class, "methodForNextPage", "1", 10, 5).build();, +, +		assertThat(uriComponents.getPath(), is("/something/1/foo"));, +		MultiValueMap<String, String> queryParams = uriComponents.getQueryParams();, +		assertThat(queryParams.get("limit"), contains("5"));, +		assertThat(queryParams.get("offset"), contains("10"));, +	}, +, +	@Test  // SPR-12977, +	public void fromMethodNameWithBridgedMethod() {, +		UriComponents uriComponents = fromMethodName(PersonCrudController.class, "get", (long) 42).build();, +, +		assertThat(uriComponents.toUriString(), is("http://localhost/42"));, +	}, +, +	@Test  // SPR-11391, +	public void fromMethodNameTypeLevelPathVariableWithoutArgumentValue() {, +		UriComponents uriComponents = fromMethodName(UserContactController.class, "showCreate", 123).build();, +, +		assertThat(uriComponents.getPath(), is("/user/123/contacts/create"));, +	}, +, +	@Test, +	public void fromMethodNameNotMapped() {, +		UriComponents uriComponents = fromMethodName(UnmappedController.class, "unmappedMethod").build();, +, +		assertThat(uriComponents.toUriString(), is("http://localhost/"));, +	}, +, +	@Test, +	public void fromMethodNameWithCustomBaseUrlViaStaticCall() {, +		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString("http://example.org:9090/base");, +		UriComponents uriComponents = fromMethodName(builder, ControllerWithMethods.class,, +				"methodWithPathVariable", "1").build();, +, +		assertEquals("http://example.org:9090/base/something/1/foo", uriComponents.toString());, +		assertEquals("http://example.org:9090/base", builder.toUriString());, +	}, +, +	@Test, +	public void fromMethodNameWithCustomBaseUrlViaInstance() {, +		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString("http://example.org:9090/base");, +		MvcUriComponentsBuilder mvcBuilder = relativeTo(builder);, +		UriComponents uriComponents = mvcBuilder.withMethodName(ControllerWithMethods.class,, +				"methodWithPathVariable", "1").build();, +, +		assertEquals("http://example.org:9090/base/something/1/foo", uriComponents.toString());, +		assertEquals("http://example.org:9090/base", builder.toUriString());, +	}, +, +	@Test  // SPR-14405, +	public void fromMethodNameWithOptionalParam() {, +		UriComponents uriComponents = fromMethodName(ControllerWithMethods.class,, +				"methodWithOptionalParam", new Object[] {null}).build();, +, +		assertThat(uriComponents.toUriString(), is("http://localhost/something/optional-param"));, +	}, +, +	@Test, +	public void fromMethodNameWithMetaAnnotation() {, +		UriComponents uriComponents = fromMethodName(MetaAnnotationController.class, "handleInput").build();]