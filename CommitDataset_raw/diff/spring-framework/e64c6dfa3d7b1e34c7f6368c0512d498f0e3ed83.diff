[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +	public void resetBeanDefinition(String beanName) {, +		this.lookupMethodsChecked.remove(beanName);, +		this.injectionMetadataCache.remove(beanName);, +	}, +, +	@Override, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +	public void resetBeanDefinition(String beanName) {, +		this.lookupMethodsChecked.remove(beanName);, +		this.injectionMetadataCache.remove(beanName);, +	}, +, +	@Override, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		for (BeanPostProcessor processor : getBeanPostProcessors()) {, +			Object current = processor.postProcessBeforeInitialization(result, beanName);, +		for (BeanPostProcessor processor : getBeanPostProcessors()) {, +			Object current = processor.postProcessAfterInitialization(result, beanName);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +	public void resetBeanDefinition(String beanName) {, +		this.lookupMethodsChecked.remove(beanName);, +		this.injectionMetadataCache.remove(beanName);, +	}, +, +	@Override, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		for (BeanPostProcessor processor : getBeanPostProcessors()) {, +			Object current = processor.postProcessBeforeInitialization(result, beanName);, +		for (BeanPostProcessor processor : getBeanPostProcessors()) {, +			Object current = processor.postProcessAfterInitialization(result, beanName);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +import org.springframework.beans.factory.config.BeanPostProcessor;, +		// Notify all post-processors that the specified bean definition has been reset., +		for (BeanPostProcessor processor : getBeanPostProcessors()) {, +			if (processor instanceof MergedBeanDefinitionPostProcessor) {, +				((MergedBeanDefinitionPostProcessor) processor).resetBeanDefinition(beanName);, +			}, +		}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +	public void resetBeanDefinition(String beanName) {, +		this.lookupMethodsChecked.remove(beanName);, +		this.injectionMetadataCache.remove(beanName);, +	}, +, +	@Override, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		for (BeanPostProcessor processor : getBeanPostProcessors()) {, +			Object current = processor.postProcessBeforeInitialization(result, beanName);, +		for (BeanPostProcessor processor : getBeanPostProcessors()) {, +			Object current = processor.postProcessAfterInitialization(result, beanName);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +import org.springframework.beans.factory.config.BeanPostProcessor;, +		// Notify all post-processors that the specified bean definition has been reset., +		for (BeanPostProcessor processor : getBeanPostProcessors()) {, +			if (processor instanceof MergedBeanDefinitionPostProcessor) {, +				((MergedBeanDefinitionPostProcessor) processor).resetBeanDefinition(beanName);, +			}, +		}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/MergedBeanDefinitionPostProcessor.java, + * Copyright 2002-2018 the original author or authors., +	/**, +	 * A notification that the bean definition for the specified name has been reset,, +	 * and that this post-processor should clear any metadata for the affected bean., +	 * @param beanName the name of the bean, +	 * @since 5.1, +	 */, +	default void resetBeanDefinition(String beanName) {, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +	public void resetBeanDefinition(String beanName) {, +		this.lookupMethodsChecked.remove(beanName);, +		this.injectionMetadataCache.remove(beanName);, +	}, +, +	@Override, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		for (BeanPostProcessor processor : getBeanPostProcessors()) {, +			Object current = processor.postProcessBeforeInitialization(result, beanName);, +		for (BeanPostProcessor processor : getBeanPostProcessors()) {, +			Object current = processor.postProcessAfterInitialization(result, beanName);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +import org.springframework.beans.factory.config.BeanPostProcessor;, +		// Notify all post-processors that the specified bean definition has been reset., +		for (BeanPostProcessor processor : getBeanPostProcessors()) {, +			if (processor instanceof MergedBeanDefinitionPostProcessor) {, +				((MergedBeanDefinitionPostProcessor) processor).resetBeanDefinition(beanName);, +			}, +		}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/MergedBeanDefinitionPostProcessor.java, + * Copyright 2002-2018 the original author or authors., +	/**, +	 * A notification that the bean definition for the specified name has been reset,, +	 * and that this post-processor should clear any metadata for the affected bean., +	 * @param beanName the name of the bean, +	 * @since 5.1]