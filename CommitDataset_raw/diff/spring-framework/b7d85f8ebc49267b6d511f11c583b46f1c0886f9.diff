[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/NoSuchBeanDefinitionException.java, +import org.springframework.core.ResolvableType;, + * @author Stephane Nicoll, +	private ResolvableType beanResolvableType;, +		this.beanResolvableType = ResolvableType.forClass(type);, +		this.beanResolvableType = ResolvableType.forClass(type);, +	 * @deprecated as of Spring 5.0, in favor of {@link #NoSuchBeanDefinitionException(ResolvableType, String)}, +	@Deprecated, +		this(ResolvableType.forClass(type), dependencyDescription, message);, +	}, +, +	/**, +	 * Create a new {@code NoSuchBeanDefinitionException}., +	 * @param resolvableType required type of the missing bean, +	 * @param message detailed message describing the problem, +	 */, +	public NoSuchBeanDefinitionException(ResolvableType resolvableType, String message) {, +		this(resolvableType, resolvableType.toString(), message);, +	}, +, +	/**, +	 * Create a new {@code NoSuchBeanDefinitionException}., +	 * @param resolvableType required type of the missing bean, +	 * @param dependencyDescription a description of the originating dependency, +	 * @param message detailed message describing the problem, +	 */, +	private NoSuchBeanDefinitionException(ResolvableType resolvableType, String dependencyDescription, String message) {, +				" of type [" + ClassUtils.getQualifiedName(resolvableType.getRawClass()) + "]" : "") +, +				" found for dependency" + (StringUtils.hasLength(dependencyDescription) ? " [" +, +				dependencyDescription + "]" : "") + ": " + message);, +		this.beanResolvableType = resolvableType;, +	 * Return the required {@link ResolvableType} of the missing bean, if it was a lookup, +	 * <em>by type</em> that failed., +	 */, +	public ResolvableType getBeanResolvableType() {, +		return this.beanResolvableType;, +	}, +, +	/**, +		return this.beanResolvableType.getRawClass();, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/NoSuchBeanDefinitionException.java, +import org.springframework.core.ResolvableType;, + * @author Stephane Nicoll, +	private ResolvableType beanResolvableType;, +		this.beanResolvableType = ResolvableType.forClass(type);, +		this.beanResolvableType = ResolvableType.forClass(type);, +	 * @deprecated as of Spring 5.0, in favor of {@link #NoSuchBeanDefinitionException(ResolvableType, String)}, +	@Deprecated, +		this(ResolvableType.forClass(type), dependencyDescription, message);, +	}, +, +	/**, +	 * Create a new {@code NoSuchBeanDefinitionException}., +	 * @param resolvableType required type of the missing bean, +	 * @param message detailed message describing the problem, +	 */, +	public NoSuchBeanDefinitionException(ResolvableType resolvableType, String message) {, +		this(resolvableType, resolvableType.toString(), message);, +	}, +, +	/**, +	 * Create a new {@code NoSuchBeanDefinitionException}., +	 * @param resolvableType required type of the missing bean, +	 * @param dependencyDescription a description of the originating dependency, +	 * @param message detailed message describing the problem, +	 */, +	private NoSuchBeanDefinitionException(ResolvableType resolvableType, String dependencyDescription, String message) {, +				" of type [" + ClassUtils.getQualifiedName(resolvableType.getRawClass()) + "]" : "") +, +				" found for dependency" + (StringUtils.hasLength(dependencyDescription) ? " [" +, +				dependencyDescription + "]" : "") + ": " + message);, +		this.beanResolvableType = resolvableType;, +	 * Return the required {@link ResolvableType} of the missing bean, if it was a lookup, +	 * <em>by type</em> that failed., +	 */, +	public ResolvableType getBeanResolvableType() {, +		return this.beanResolvableType;, +	}, +, +	/**, +		return this.beanResolvableType.getRawClass();, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +					raiseNoMatchingBeanFound(type, descriptor.getResolvableType(), descriptor);, +			Class<?> type, ResolvableType resolvableType, DependencyDescriptor descriptor) throws BeansException {, +		throw new NoSuchBeanDefinitionException(resolvableType,]