[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AnnotationMethodMessageHandler.java, +		// Annotation-based argument resolution, +		this.argumentResolvers.addResolver(new MessageBodyMethodArgumentResolver(this.messageConverter));, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AnnotationMethodMessageHandler.java, +		// Annotation-based argument resolution, +		this.argumentResolvers.addResolver(new MessageBodyMethodArgumentResolver(this.messageConverter));, +, +++ b/spring-web/src/main/java/org/springframework/http/MediaType.java, +	 * Indicate whether this {@code MediaType} includes the given media type., +	 * <p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}, +	 * includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric., +	 * @param other the reference media type with which to compare, +	 * @return {@code true} if this media type includes the given media type; {@code false} otherwise, +	 */, +	public boolean includes(MediaType other) {, +		return super.includes(other);, +	}, +, +	/**, +	 * Indicate whether this {@code MediaType} is compatible with the given media type., +	 * <p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa., +	 * In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric., +	 * @param other the reference media type with which to compare, +	 * @return {@code true} if this media type is compatible with the given media type; {@code false} otherwise, +	 */, +	public boolean isCompatibleWith(MediaType other) {, +		return super.isCompatibleWith(other);, +	}, +, +	/**]