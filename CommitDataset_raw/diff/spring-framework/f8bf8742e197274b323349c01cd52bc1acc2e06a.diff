[+++ b/org.springframework.core/src/main/java/org/springframework/core/type/filter/AnnotationTypeFilter.java, +	 * '<code>considerMetaAnnotations</code>' argument. The filter will, +	 * not match interfaces., +	 * The filter will not match interfaces., +		this(annotationType, considerMetaAnnotations, false);, +	}, +, +	/**, +	 * Create a new {@link AnnotationTypeFilter} for the given annotation type., +	 * @param annotationType the annotation type to match, +	 * @param considerMetaAnnotations whether to also match on meta-annotations, +	 * @param considerInterfaces whether to also match interfaces, +	 */, +	public AnnotationTypeFilter(Class<? extends Annotation> annotationType, boolean considerMetaAnnotations, boolean considerInterfaces) {, +		super(annotationType.isAnnotationPresent(Inherited.class), considerInterfaces);, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/filter/AnnotationTypeFilter.java, +	 * '<code>considerMetaAnnotations</code>' argument. The filter will, +	 * not match interfaces., +	 * The filter will not match interfaces., +		this(annotationType, considerMetaAnnotations, false);, +	}, +, +	/**, +	 * Create a new {@link AnnotationTypeFilter} for the given annotation type., +	 * @param annotationType the annotation type to match, +	 * @param considerMetaAnnotations whether to also match on meta-annotations, +	 * @param considerInterfaces whether to also match interfaces, +	 */, +	public AnnotationTypeFilter(Class<? extends Annotation> annotationType, boolean considerMetaAnnotations, boolean considerInterfaces) {, +		super(annotationType.isAnnotationPresent(Inherited.class), considerInterfaces);, +++ b/org.springframework.core/src/test/java/org/springframework/core/type/AnnotationTypeFilterTests.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.core.type.classreading.MetadataReaderFactory;, +	public void testMatchesInterfacesIfConfigured() throws Exception {, +, +		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();, +		String classUnderTest = "org.springframework.core.type.AnnotationTypeFilterTests$SomeComponentInterface";, +		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(classUnderTest);, +, +		AnnotationTypeFilter filter = new AnnotationTypeFilter(InheritedAnnotation.class, false, true);, +, +		assertTrue(filter.match(metadataReader, metadataReaderFactory));, +		ClassloadingAssertions.assertClassNotLoaded(classUnderTest);, +	}]