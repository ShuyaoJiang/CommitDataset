[+++ b/spring-orm/src/test/java/org/springframework/mock/web/MockFilterChain.java, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.Iterator;, +, +import javax.servlet.Filter;, +import javax.servlet.FilterConfig;, +import javax.servlet.Servlet;, +import javax.servlet.ServletException;, +import org.springframework.util.ObjectUtils;, + * @author Rob Winch, + *, +	private final Iterator<Filter> iterator;, +, +	 * Register a single do-nothing {@link Filter} implementation. The first, +	 * invocation saves the request and response. Subsequent invocations raise, +	 * an {@link IllegalStateException}., +	public MockFilterChain() {, +		this.iterator = null;, +	}, +, +	/**, +	 * Create a FilterChain with a {@link Servlet} but without filters., +	 *, +	 * @param servlet the {@link Servlet} to use in this {@link FilterChain}, +	 * @since 3.2, +	 */, +	public MockFilterChain(Servlet servlet) {, +		this(new ServletFilterProxy(servlet));, +	}, +, +	/**, +	 * Create a FilterChain with one or more {@link Filter} instances and a {@link Servlet}., +	 *, +	 * @param servlet the {@link Servlet} to use in this {@link FilterChain}, +	 * @param filters the {@link Filter}'s to use in this {@link FilterChain}, +	 * @since 3.2, +	 */, +	public MockFilterChain(Servlet servlet, Filter... filters) {, +		this(ObjectUtils.addObjectToArray(filters, new ServletFilterProxy(servlet)));, +	}, +, +	/**, +	 * Create a {@link FilterChain} with one or more {@link Filter} instances., +	 *, +	 * @param filters the {@link Filter}'s to use in this {@link FilterChain}, +	 * @since 3.2, +	 */, +	private MockFilterChain(Filter... filters) {, +		Assert.notNull(filters, "filters cannot be null");, +		Assert.notEmpty(filters, "filters cannot be empty");, +		Assert.noNullElements(filters, "filters cannot contain null values");, +		this.iterator = Arrays.asList(filters).iterator();, +	}, +, +	/**, +	 * Invoke registered {@link Filter}s and/or {@link Servlet} also saving the, +	 * request and response., +	 */, +	public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException {, +, +, +		if ((this.iterator != null) && (this.iterator.hasNext())) {, +			Filter nextFilter = this.iterator.next();, +			nextFilter.doFilter(request, response, this);, +		}, +, +, +	/**, +	 * A filter that simply delegates to a Servlet., +	 */, +	private static class ServletFilterProxy implements Filter {, +, +		private final Servlet delegateServlet;, +, +		private ServletFilterProxy(Servlet servlet) {, +			Assert.notNull(servlet, "servlet cannot be null");, +			this.delegateServlet = servlet;, +		}, +, +		public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain), +				throws IOException, ServletException {, +, +			this.delegateServlet.service(request, response);, +		}, +, +		public void init(FilterConfig filterConfig) throws ServletException {, +		}, +, +		public void destroy() {, +		}, +, +		@Override, +		public String toString() {, +			return this.delegateServlet.toString();, +		}, +	}, +, +++ b/spring-orm/src/test/java/org/springframework/mock/web/MockFilterChain.java, +import java.io.IOException;]