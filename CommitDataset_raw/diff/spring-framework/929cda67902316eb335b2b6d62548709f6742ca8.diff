[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java, +import org.springframework.validation.annotation.Validated;, + * <p>This {@link HandlerMethodArgumentResolver} should be ordered last as it, + * supports all types and does not require the {@link Payload} annotation., +		Payload ann = param.getParameterAnnotation(Payload.class);, +		if (ann != null && StringUtils.hasText(ann.value())) {, +			if (ann == null || ann.required()) {, +						"No converter found to convert to " + targetClass + ", message=" + message);, +		return (paramName != null ? paramName : "Arg " + param.getParameterIndex());, +		for (Annotation ann : parameter.getParameterAnnotations()) {, +			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class);, +			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {, +				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann));, +				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints});, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java, +import org.springframework.validation.annotation.Validated;, + * <p>This {@link HandlerMethodArgumentResolver} should be ordered last as it, + * supports all types and does not require the {@link Payload} annotation., +		Payload ann = param.getParameterAnnotation(Payload.class);, +		if (ann != null && StringUtils.hasText(ann.value())) {, +			if (ann == null || ann.required()) {, +						"No converter found to convert to " + targetClass + ", message=" + message);, +		return (paramName != null ? paramName : "Arg " + param.getParameterIndex());, +		for (Annotation ann : parameter.getParameterAnnotations()) {, +			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class);, +			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {, +				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann));, +				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints});, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolverTests.java, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +		this.payloadMethod = PayloadArgumentResolverTests.class.getDeclaredMethod("handleMessage",, +	private Validator testValidator() {, +			@MyValid @Payload String validParam,, +, +	@Validated, +	@Target({ElementType.PARAMETER}), +	@Retention(RetentionPolicy.RUNTIME), +	public @interface MyValid {, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java, +import org.springframework.validation.annotation.Validated;, + * <p>This {@link HandlerMethodArgumentResolver} should be ordered last as it, + * supports all types and does not require the {@link Payload} annotation., +		Payload ann = param.getParameterAnnotation(Payload.class);, +		if (ann != null && StringUtils.hasText(ann.value())) {, +			if (ann == null || ann.required()) {, +						"No converter found to convert to " + targetClass + ", message=" + message);, +		return (paramName != null ? paramName : "Arg " + param.getParameterIndex());, +		for (Annotation ann : parameter.getParameterAnnotations()) {, +			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class);, +			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {, +				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann));, +				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints});, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolverTests.java, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +		this.payloadMethod = PayloadArgumentResolverTests.class.getDeclaredMethod("handleMessage",, +	private Validator testValidator() {, +			@MyValid @Payload String validParam,, +, +	@Validated, +	@Target({ElementType.PARAMETER}), +	@Retention(RetentionPolicy.RUNTIME), +	public @interface MyValid {, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.validation.annotation.Validated;, + * Support class for invoking an annotated handler method. Operates on the introspection, + * results of a {@link HandlerMethodResolver} for a specific handler type., + * <p>Used by {@link org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter}, + * and {@link org.springframework.web.portlet.mvc.annotation.AnnotationMethodHandlerAdapter}., +				else {, +					Validated validatedAnn = AnnotationUtils.getAnnotation(paramAnn, Validated.class);, +					if (validatedAnn != null || paramAnn.annotationType().getSimpleName().startsWith("Valid")) {, +						Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(paramAnn));, +						validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[]{hints});, +					}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java, +import org.springframework.validation.annotation.Validated;, + * <p>This {@link HandlerMethodArgumentResolver} should be ordered last as it, + * supports all types and does not require the {@link Payload} annotation., +		Payload ann = param.getParameterAnnotation(Payload.class);, +		if (ann != null && StringUtils.hasText(ann.value())) {, +			if (ann == null || ann.required()) {, +						"No converter found to convert to " + targetClass + ", message=" + message);, +		return (paramName != null ? paramName : "Arg " + param.getParameterIndex());, +		for (Annotation ann : parameter.getParameterAnnotations()) {, +			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class);, +			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {, +				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann));, +				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints});, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolverTests.java]