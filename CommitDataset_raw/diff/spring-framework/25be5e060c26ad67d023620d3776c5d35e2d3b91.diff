[+++ b/spring-context-support/src/main/java/org/springframework/scheduling/commonj/WorkManagerTaskExecutor.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.task.TaskDecorator;, +	private TaskDecorator taskDecorator;, +, +	/**, +	 * Specify a custom {@link TaskDecorator} to be applied to any {@link Runnable}, +	 * about to be executed., +	 * <p>Note that such a decorator is not necessarily being applied to the, +	 * user-supplied {@code Runnable}/{@code Callable} but rather to the actual, +	 * execution callback (which may be a wrapper around the user-supplied task)., +	 * <p>The primary use case is to set some execution context around the task's, +	 * invocation, or to provide some monitoring/statistics for task execution., +	 * @since 4.3, +	 */, +	public void setTaskDecorator(TaskDecorator taskDecorator) {, +		this.taskDecorator = taskDecorator;, +	}, +, +		Work work = new DelegatingWork(this.taskDecorator != null ? this.taskDecorator.decorate(task) : task);, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/commonj/WorkManagerTaskExecutor.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.task.TaskDecorator;, +	private TaskDecorator taskDecorator;, +, +	/**, +	 * Specify a custom {@link TaskDecorator} to be applied to any {@link Runnable}, +	 * about to be executed., +	 * <p>Note that such a decorator is not necessarily being applied to the, +	 * user-supplied {@code Runnable}/{@code Callable} but rather to the actual, +	 * execution callback (which may be a wrapper around the user-supplied task)., +	 * <p>The primary use case is to set some execution context around the task's, +	 * invocation, or to provide some monitoring/statistics for task execution., +	 * @since 4.3, +	 */, +	public void setTaskDecorator(TaskDecorator taskDecorator) {, +		this.taskDecorator = taskDecorator;, +	}, +, +		Work work = new DelegatingWork(this.taskDecorator != null ? this.taskDecorator.decorate(task) : task);, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskExecutor.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.task.TaskDecorator;, +	/**, +	 * Specify a custom {@link TaskDecorator} to be applied to any {@link Runnable}, +	 * about to be executed., +	 * <p>Note that such a decorator is not necessarily being applied to the, +	 * user-supplied {@code Runnable}/{@code Callable} but rather to the actual, +	 * execution callback (which may be a wrapper around the user-supplied task)., +	 * <p>The primary use case is to set some execution context around the task's, +	 * invocation, or to provide some monitoring/statistics for task execution., +	 * @since 4.3, +	 */, +	public final void setTaskDecorator(TaskDecorator taskDecorator) {, +		this.adaptedExecutor.setTaskDecorator(taskDecorator);, +	}, +, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/commonj/WorkManagerTaskExecutor.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.task.TaskDecorator;, +	private TaskDecorator taskDecorator;, +, +	/**, +	 * Specify a custom {@link TaskDecorator} to be applied to any {@link Runnable}, +	 * about to be executed., +	 * <p>Note that such a decorator is not necessarily being applied to the, +	 * user-supplied {@code Runnable}/{@code Callable} but rather to the actual, +	 * execution callback (which may be a wrapper around the user-supplied task)., +	 * <p>The primary use case is to set some execution context around the task's, +	 * invocation, or to provide some monitoring/statistics for task execution., +	 * @since 4.3, +	 */, +	public void setTaskDecorator(TaskDecorator taskDecorator) {, +		this.taskDecorator = taskDecorator;, +	}, +, +		Work work = new DelegatingWork(this.taskDecorator != null ? this.taskDecorator.decorate(task) : task);, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskExecutor.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.task.TaskDecorator;, +	/**, +	 * Specify a custom {@link TaskDecorator} to be applied to any {@link Runnable}, +	 * about to be executed., +	 * <p>Note that such a decorator is not necessarily being applied to the, +	 * user-supplied {@code Runnable}/{@code Callable} but rather to the actual, +	 * execution callback (which may be a wrapper around the user-supplied task)., +	 * <p>The primary use case is to set some execution context around the task's, +	 * invocation, or to provide some monitoring/statistics for task execution., +	 * @since 4.3, +	 */, +	public final void setTaskDecorator(TaskDecorator taskDecorator) {, +		this.adaptedExecutor.setTaskDecorator(taskDecorator);, +	}, +, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.task.TaskDecorator;, +	private TaskDecorator taskDecorator;, +, +	/**]