[+++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/MethodValidationInterceptor.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.BridgeMethodResolver;, +import org.springframework.util.ClassUtils;, +, +			// Standard Bean Validation 1.1 API, +			Object execVal = ReflectionUtils.invokeMethod(forExecutablesMethod, this.validator);, +			Method methodToValidate = invocation.getMethod();, +			Set<ConstraintViolation<?>> result;, +, +			try {, +				result = (Set<ConstraintViolation<?>>) ReflectionUtils.invokeMethod(validateParametersMethod,, +						execVal, invocation.getThis(), methodToValidate, invocation.getArguments(), groups);, +			}, +			catch (IllegalArgumentException ex) {, +				// Probably a generic type mismatch between interface and impl as reported in SPR-12237 / HV-1011, +				// Let's try to find the bridged method on the implementation class..., +				methodToValidate = BridgeMethodResolver.findBridgedMethod(, +						ClassUtils.getMostSpecificMethod(invocation.getMethod(), invocation.getThis().getClass()));, +				result = (Set<ConstraintViolation<?>>) ReflectionUtils.invokeMethod(validateParametersMethod,, +						execVal, invocation.getThis(), methodToValidate, invocation.getArguments(), groups);, +			}, +, +, +			result = (Set<ConstraintViolation<?>>) ReflectionUtils.invokeMethod(validateReturnValueMethod,, +					execVal, invocation.getThis(), methodToValidate, returnValue, groups);, +, +, +			// Hibernate Validator 4.3's native API, +, +++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/MethodValidationInterceptor.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.BridgeMethodResolver;, +import org.springframework.util.ClassUtils;, +, +			// Standard Bean Validation 1.1 API, +			Object execVal = ReflectionUtils.invokeMethod(forExecutablesMethod, this.validator);, +			Method methodToValidate = invocation.getMethod();, +			Set<ConstraintViolation<?>> result;, +, +			try {, +				result = (Set<ConstraintViolation<?>>) ReflectionUtils.invokeMethod(validateParametersMethod,, +						execVal, invocation.getThis(), methodToValidate, invocation.getArguments(), groups);, +			}, +			catch (IllegalArgumentException ex) {, +				// Probably a generic type mismatch between interface and impl as reported in SPR-12237 / HV-1011, +				// Let's try to find the bridged method on the implementation class..., +				methodToValidate = BridgeMethodResolver.findBridgedMethod(, +						ClassUtils.getMostSpecificMethod(invocation.getMethod(), invocation.getThis().getClass()));, +				result = (Set<ConstraintViolation<?>>) ReflectionUtils.invokeMethod(validateParametersMethod,, +						execVal, invocation.getThis(), methodToValidate, invocation.getArguments(), groups);, +			}, +, +, +			result = (Set<ConstraintViolation<?>>) ReflectionUtils.invokeMethod(validateReturnValueMethod,, +					execVal, invocation.getThis(), methodToValidate, returnValue, groups);, +, +, +			// Hibernate Validator 4.3's native API, +, +++ b/spring-context/src/test/java/org/springframework/validation/beanvalidation/MethodValidationTests.java, + * Copyright 2002-2015 the original author or authors., +		ac.close();, +			fail("Should have thrown ValidationException");, +			fail("Should have thrown ValidationException");, +			fail("Should have thrown ValidationException");, +			fail("Should have thrown ValidationException");, +			fail("Should have thrown ValidationException");, +		}, +		catch (javax.validation.ValidationException ex) {, +			// expected, +		}, +, +		assertEquals("myValue", proxy.myGenericMethod("myValue"));, +		try {, +			proxy.myGenericMethod(null);, +			fail("Should have thrown ValidationException");, +	public static class MyValidBean implements MyValidInterface<String> {, +, +		@Override, +		public String myGenericMethod(String value) {, +			return value;, +		}, +	public interface MyValidInterface<T> {, +, +		T myGenericMethod(@NotNull T value);, +++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/MethodValidationInterceptor.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.BridgeMethodResolver;, +import org.springframework.util.ClassUtils;, +, +			// Standard Bean Validation 1.1 API, +			Object execVal = ReflectionUtils.invokeMethod(forExecutablesMethod, this.validator);, +			Method methodToValidate = invocation.getMethod();, +			Set<ConstraintViolation<?>> result;, +, +			try {, +				result = (Set<ConstraintViolation<?>>) ReflectionUtils.invokeMethod(validateParametersMethod,, +						execVal, invocation.getThis(), methodToValidate, invocation.getArguments(), groups);, +			}]