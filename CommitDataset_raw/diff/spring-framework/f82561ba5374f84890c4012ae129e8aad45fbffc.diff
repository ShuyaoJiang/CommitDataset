[+++ b/org.springframework.expression/readme.txt, +- Enhance type locator interface with direct support for register/unregister imports and ability to set class loader?, +- Should some of the common errors (like SpelMessages.TYPE_NOT_FOUND) be promoted to top level exceptions?, +++ b/org.springframework.expression/readme.txt, +- Enhance type locator interface with direct support for register/unregister imports and ability to set class loader?, +- Should some of the common errors (like SpelMessages.TYPE_NOT_FOUND) be promoted to top level exceptions?, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/standard/StandardTypeLocator.java, +/**, + * A default implementation of a TypeLocator that uses the context classloader (or any classloader set upon it). It, + * supports 'well known' packages so if a type cannot be found it will try the registered imports to locate it., + * , + * @author Andy Clement, + */, +	/**, +	 * Find a (possibly unqualified) type reference - first using the typename as is, then trying any registered, +	 * prefixes if the typename cannot be found., +	 * , +	 * @param typename the type to locate, +	 * @return the class object for the type, +	 * @throws EvaluationException if the type cannot be found, +	 */, +	public Class<?> findType(String typename) throws EvaluationException {, +		String nameToLookup = typename;, +			// try any registered prefixes before giving up, +				nameToLookup = new StringBuilder().append(prefix).append(".").append(typename).toString();, +				Class<?> clazz = loader.loadClass(nameToLookup);, +				return clazz;, +				// might be a different prefix, +		throw new SpelException(SpelMessages.TYPE_NOT_FOUND, typename);, +	 * like "java.lang"., +	 * , +	 * @param prefix the prefix to register, +	/**, +	 * Unregister an import prefix., +	 * , +	 * @param prefix the prefix to unregister, +	 */, +	/**, +	 * Return a list of all the import prefixes registered with this StandardTypeLocator., +	 * , +	 * @return list of registered import prefixes, +	 */, +	public List<String> getImportPrefixes() {, +	/**, +	 * Set the classloader that should be used (otherwise the context class loader will be used)., +	 * , +	 * @param loader the classloader to use from now on, +	 */]