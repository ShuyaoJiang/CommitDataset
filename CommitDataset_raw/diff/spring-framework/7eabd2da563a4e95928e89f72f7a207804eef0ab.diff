[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanUtils.java, +	public static Method findMethod(Class clazz, String methodName, Class... paramTypes) {, +	 * <code>findDeclaredMethodWithMinimalParameters</code>. This allows for finding public, +		Method targetMethod = findMethodWithMinimalParameters(clazz.getMethods(), methodName);, +		Method targetMethod = findMethodWithMinimalParameters(clazz.getDeclaredMethods(), methodName);, +	public static Method findMethodWithMinimalParameters(Method[] methods, String methodName), +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanUtils.java, +	public static Method findMethod(Class clazz, String methodName, Class... paramTypes) {, +	 * <code>findDeclaredMethodWithMinimalParameters</code>. This allows for finding public, +		Method targetMethod = findMethodWithMinimalParameters(clazz.getMethods(), methodName);, +		Method targetMethod = findMethodWithMinimalParameters(clazz.getDeclaredMethods(), methodName);, +	public static Method findMethodWithMinimalParameters(Method[] methods, String methodName), +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		if (mbd != null) {, +			String initMethodName = mbd.getInitMethodName();, +				invokeCustomInitMethod(beanName, bean, mbd);, +			}, +	protected void invokeCustomInitMethod(String beanName, Object bean, RootBeanDefinition mbd) throws Throwable {, +		String initMethodName = mbd.getInitMethodName();, +		Method initMethod = (mbd.isNonPublicAccessAllowed() ?, +				BeanUtils.findMethod(bean.getClass(), initMethodName) :, +				ClassUtils.getMethodIfAvailable(bean.getClass(), initMethodName));, +			if (mbd.isEnforceInitMethod()) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanUtils.java, +	public static Method findMethod(Class clazz, String methodName, Class... paramTypes) {, +	 * <code>findDeclaredMethodWithMinimalParameters</code>. This allows for finding public, +		Method targetMethod = findMethodWithMinimalParameters(clazz.getMethods(), methodName);, +		Method targetMethod = findMethodWithMinimalParameters(clazz.getDeclaredMethods(), methodName);, +	public static Method findMethodWithMinimalParameters(Method[] methods, String methodName), +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		if (mbd != null) {, +			String initMethodName = mbd.getInitMethodName();, +				invokeCustomInitMethod(beanName, bean, mbd);, +			}, +	protected void invokeCustomInitMethod(String beanName, Object bean, RootBeanDefinition mbd) throws Throwable {, +		String initMethodName = mbd.getInitMethodName();, +		Method initMethod = (mbd.isNonPublicAccessAllowed() ?, +				BeanUtils.findMethod(bean.getClass(), initMethodName) :, +				ClassUtils.getMethodIfAvailable(bean.getClass(), initMethodName));, +			if (mbd.isEnforceInitMethod()) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +	private boolean nonPublicAccessAllowed = true;, +	private ConstructorArgumentValues constructorArgumentValues;, +, +			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed());, +			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed());, +	 * Specify whether to allow access to non-public constructors and methods,, +	 * for the case of externalized metadata pointing to those., +	 * <p>This applies to constructor resolution, factory method resolution,, +	 * and also init/destroy methods. Bean property accessors have to be public, +	 * in any case and are not affected by this setting., +	 * <p>Note that annotation-driven configuration will still access non-public, +	 * members as far as they have been annotated. This setting applies to, +	 * externalized metadata in this bean definition only., +	 */, +	public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {, +		this.nonPublicAccessAllowed = nonPublicAccessAllowed;, +	}, +, +	/**, +	 * Return whether to allow access to non-public constructors and methods., +	 */, +	public boolean isNonPublicAccessAllowed() {, +		return this.nonPublicAccessAllowed;, +	}, +, +	/**, +	 * Specify whether to resolve constructors in lenient mode (<code>true</code>,, +	 * which is the default) or to switch to strict resolution (throwing an exception, +	 * in case of ambigious constructors that all match when converting the arguments,, +	 * whereas lenient mode would use the one with the 'closest' type matches)., +	 */, +	public void setLenientConstructorResolution(boolean lenientConstructorResolution) {, +		this.lenientConstructorResolution = lenientConstructorResolution;, +	}, +, +	/**, +	 * Return whether to resolve constructors in lenient mode or in strict mode., +	 */, +	public boolean isLenientConstructorResolution() {, +		return this.lenientConstructorResolution;, +	}, +, +	/**, +		if (this.nonPublicAccessAllowed != that.nonPublicAccessAllowed) return false;, +		if (this.lenientConstructorResolution != that.lenientConstructorResolution) return false;, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanUtils.java, +	public static Method findMethod(Class clazz, String methodName, Class... paramTypes) {, +	 * <code>findDeclaredMethodWithMinimalParameters</code>. This allows for finding public, +		Method targetMethod = findMethodWithMinimalParameters(clazz.getMethods(), methodName);, +		Method targetMethod = findMethodWithMinimalParameters(clazz.getDeclaredMethods(), methodName);, +	public static Method findMethodWithMinimalParameters(Method[] methods, String methodName), +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		if (mbd != null) {, +			String initMethodName = mbd.getInitMethodName();, +				invokeCustomInitMethod(beanName, bean, mbd);, +			}, +	protected void invokeCustomInitMethod(String beanName, Object bean, RootBeanDefinition mbd) throws Throwable {, +		String initMethodName = mbd.getInitMethodName();, +		Method initMethod = (mbd.isNonPublicAccessAllowed() ?]