[+++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.web.HttpMediaTypeNotAcceptableException;, +, +, +	public List<MediaType> resolveMediaTypes(NativeWebRequest webRequest) throws HttpMediaTypeNotAcceptableException {, +	protected MediaType handleNoMatch(NativeWebRequest request, String key) throws HttpMediaTypeNotAcceptableException {, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.web.HttpMediaTypeNotAcceptableException;, +, +, +	public List<MediaType> resolveMediaTypes(NativeWebRequest webRequest) throws HttpMediaTypeNotAcceptableException {, +	protected MediaType handleNoMatch(NativeWebRequest request, String key) throws HttpMediaTypeNotAcceptableException {, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, + * Copyright 2002-2014 the original author or authors., +	private boolean ignoreUnknownPathExtensions = true;, +, +	 * Whether to ignore requests that have a file extension that does not match, +	 * any mapped media types. Setting this to {@code false} will result in a, +	 * {@code HttpMediaTypeNotAcceptableException} when there is no match., +	 *, +	 * <p>By default this is set to {@code true}., +	 */, +	public void setIgnoreUnknownPathExtensions(boolean ignoreUnknownPathExtensions) {, +		this.ignoreUnknownPathExtensions = ignoreUnknownPathExtensions;, +	}, +, +	/**, +			strategy.setIgnoreUnknownExtensions(this.ignoreUnknownPathExtensions);, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.web.HttpMediaTypeNotAcceptableException;, +, +, +	public List<MediaType> resolveMediaTypes(NativeWebRequest webRequest) throws HttpMediaTypeNotAcceptableException {, +	protected MediaType handleNoMatch(NativeWebRequest request, String key) throws HttpMediaTypeNotAcceptableException {, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, + * Copyright 2002-2014 the original author or authors., +	private boolean ignoreUnknownPathExtensions = true;, +, +	 * Whether to ignore requests that have a file extension that does not match, +	 * any mapped media types. Setting this to {@code false} will result in a, +	 * {@code HttpMediaTypeNotAcceptableException} when there is no match., +	 *, +	 * <p>By default this is set to {@code true}., +	 */, +	public void setIgnoreUnknownPathExtensions(boolean ignoreUnknownPathExtensions) {, +		this.ignoreUnknownPathExtensions = ignoreUnknownPathExtensions;, +	}, +, +	/**, +			strategy.setIgnoreUnknownExtensions(this.ignoreUnknownPathExtensions);, +++ b/spring-web/src/main/java/org/springframework/web/accept/MappingMediaTypeFileExtensionResolver.java, +import java.util.ArrayList;, +, +	protected List<MediaType> getAllMediaTypes() {, +		return new ArrayList<MediaType>(this.mediaTypes.values());, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.web.HttpMediaTypeNotAcceptableException;, +, +, +	public List<MediaType> resolveMediaTypes(NativeWebRequest webRequest) throws HttpMediaTypeNotAcceptableException {, +	protected MediaType handleNoMatch(NativeWebRequest request, String key) throws HttpMediaTypeNotAcceptableException {, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, + * Copyright 2002-2014 the original author or authors., +	private boolean ignoreUnknownPathExtensions = true;, +, +	 * Whether to ignore requests that have a file extension that does not match, +	 * any mapped media types. Setting this to {@code false} will result in a, +	 * {@code HttpMediaTypeNotAcceptableException} when there is no match., +	 *, +	 * <p>By default this is set to {@code true}., +	 */, +	public void setIgnoreUnknownPathExtensions(boolean ignoreUnknownPathExtensions) {, +		this.ignoreUnknownPathExtensions = ignoreUnknownPathExtensions;, +	}, +, +	/**, +			strategy.setIgnoreUnknownExtensions(this.ignoreUnknownPathExtensions);, +++ b/spring-web/src/main/java/org/springframework/web/accept/MappingMediaTypeFileExtensionResolver.java, +import java.util.ArrayList;, +, +	protected List<MediaType> getAllMediaTypes() {, +		return new ArrayList<MediaType>(this.mediaTypes.values());, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/accept/ParameterContentNegotiationStrategy.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.web.HttpMediaTypeNotAcceptableException;, +	@Override, +	protected MediaType handleNoMatch(NativeWebRequest request, String key) throws HttpMediaTypeNotAcceptableException {, +		throw new HttpMediaTypeNotAcceptableException(getAllMediaTypes());, +	}, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.web.HttpMediaTypeNotAcceptableException;]