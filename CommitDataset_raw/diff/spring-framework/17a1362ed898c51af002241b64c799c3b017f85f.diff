[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/BeanDefinitionVisitor.java, + * Copyright 2002-2010 the original author or authors., +		else if (value instanceof Object[]) {, +			visitArray((Object[]) value);, +		}, +	protected void visitArray(Object[] arrayVal) {, +		for (int i = 0; i < arrayVal.length; i++) {, +			Object elem = arrayVal[i];, +			Object newVal = resolveValue(elem);, +			if (!ObjectUtils.nullSafeEquals(newVal, elem)) {, +				arrayVal[i] = newVal;, +			}, +		}, +	}, +, +	@SuppressWarnings("unchecked"), +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/BeanDefinitionVisitor.java, + * Copyright 2002-2010 the original author or authors., +		else if (value instanceof Object[]) {, +			visitArray((Object[]) value);, +		}, +	protected void visitArray(Object[] arrayVal) {, +		for (int i = 0; i < arrayVal.length; i++) {, +			Object elem = arrayVal[i];, +			Object newVal = resolveValue(elem);, +			if (!ObjectUtils.nullSafeEquals(newVal, elem)) {, +				arrayVal[i] = newVal;, +			}, +		}, +	}, +, +	@SuppressWarnings("unchecked"), +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/config/PropertyResourceConfigurerTests.java, + * Copyright 2002-2010 the original author or authors., +, +		pvs.add("stringArray", new String[] {"${os.name}", "${age}"});, +, +		assertEquals(2, tb2.getStringArray().length);, +		assertEquals(System.getProperty("os.name"), tb2.getStringArray()[0]);, +		assertEquals("98", tb2.getStringArray()[1]);]