[+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/FilterDefinitionFactoryBean.java, +	 * See {@code org.hibernate.type.TypeResolver#heuristicType(String)}., +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/FilterDefinitionFactoryBean.java, +	 * See {@code org.hibernate.type.TypeResolver#heuristicType(String)}., +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/HibernateTransactionManager.java, + * <p>Requires Hibernate 3.6 or later, as of Spring 4.0., +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/FilterDefinitionFactoryBean.java, +	 * See {@code org.hibernate.type.TypeResolver#heuristicType(String)}., +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/HibernateTransactionManager.java, + * <p>Requires Hibernate 3.6 or later, as of Spring 4.0., +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/LocalRegionFactoryProxy.java, + * Copyright 2002-2013 the original author or authors., +		return this.regionFactory.getDefaultAccessType();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/FilterDefinitionFactoryBean.java, +	 * See {@code org.hibernate.type.TypeResolver#heuristicType(String)}., +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/HibernateTransactionManager.java, + * <p>Requires Hibernate 3.6 or later, as of Spring 4.0., +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/LocalRegionFactoryProxy.java, + * Copyright 2002-2013 the original author or authors., +		return this.regionFactory.getDefaultAccessType();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/LocalSessionFactoryBean.java, + * Copyright 2002-2013 the original author or authors., +import org.hibernate.cfg.Mappings;, +, + * <p><b>Requires Hibernate 3.6 or later.</b>, +				Mappings mappings = config.createMappings();, +					mappings.addTypeDef(typeDef.getTypeName(), typeDef.getTypeClass(), typeDef.getParameters());, +				config.setProperty(Environment.CACHE_REGION_FACTORY, LocalRegionFactoryProxy.class.getName());, +						config.setCacheConcurrencyStrategy(className, strategyAndRegion[0], strategyAndRegion[1]);, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/FilterDefinitionFactoryBean.java, +	 * See {@code org.hibernate.type.TypeResolver#heuristicType(String)}., +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/HibernateTransactionManager.java, + * <p>Requires Hibernate 3.6 or later, as of Spring 4.0., +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/LocalRegionFactoryProxy.java, + * Copyright 2002-2013 the original author or authors., +		return this.regionFactory.getDefaultAccessType();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/LocalSessionFactoryBean.java, + * Copyright 2002-2013 the original author or authors., +import org.hibernate.cfg.Mappings;, +, + * <p><b>Requires Hibernate 3.6 or later.</b>, +				Mappings mappings = config.createMappings();, +					mappings.addTypeDef(typeDef.getTypeName(), typeDef.getTypeClass(), typeDef.getParameters());, +				config.setProperty(Environment.CACHE_REGION_FACTORY, LocalRegionFactoryProxy.class.getName());, +						config.setCacheConcurrencyStrategy(className, strategyAndRegion[0], strategyAndRegion[1]);, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/annotation/AnnotationSessionFactoryBean.java, + * <p>Note: As of Spring 4.0, this class requires Hibernate 3.6 or later,, + * with the Java Persistence API present., +	 * @see org.hibernate.cfg.Configuration#addAnnotatedClass(Class), +	 * @see org.hibernate.cfg.Configuration#addPackage(String), +				config.addAnnotatedClass(annotatedClass);, +				config.addPackage(annotatedPackage);, +		scanPackages(config);, +	protected void scanPackages(Configuration config) {]