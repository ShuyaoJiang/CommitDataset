[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java, +, +		return BooleanTypedValue.forValue(equalityCheck(state, left, right));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java, +, +		return BooleanTypedValue.forValue(equalityCheck(state, left, right));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpGT.java, +, +			else if (leftNumber instanceof Float || rightNumber instanceof Float) {, +				return BooleanTypedValue.forValue(leftNumber.floatValue() > rightNumber.floatValue());, +			}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java, +, +		return BooleanTypedValue.forValue(equalityCheck(state, left, right));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpGT.java, +, +			else if (leftNumber instanceof Float || rightNumber instanceof Float) {, +				return BooleanTypedValue.forValue(leftNumber.floatValue() > rightNumber.floatValue());, +			}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpLT.java, +, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java, +, +		return BooleanTypedValue.forValue(equalityCheck(state, left, right));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpGT.java, +, +			else if (leftNumber instanceof Float || rightNumber instanceof Float) {, +				return BooleanTypedValue.forValue(leftNumber.floatValue() > rightNumber.floatValue());, +			}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpLT.java, +, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpNE.java, +, +		return BooleanTypedValue.forValue(!equalityCheck(state, left, right));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java, +, +		return BooleanTypedValue.forValue(equalityCheck(state, left, right));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpGT.java, +, +			else if (leftNumber instanceof Float || rightNumber instanceof Float) {, +				return BooleanTypedValue.forValue(leftNumber.floatValue() > rightNumber.floatValue());, +			}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpLT.java, +, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpNE.java, +, +		return BooleanTypedValue.forValue(!equalityCheck(state, left, right));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Operator.java, +import org.springframework.expression.spel.ExpressionState;, +, +	private final String operatorName;, +	protected boolean equalityCheck(ExpressionState state, Object left, Object right) {, +		if (left instanceof Number && right instanceof Number) {, +			Number op1 = (Number) left;, +			Number op2 = (Number) right;, +, +			if (op1 instanceof Double || op2 instanceof Double) {, +				return (op1.doubleValue() == op2.doubleValue());, +			}, +, +			if (op1 instanceof Float || op2 instanceof Float) {, +				return (op1.floatValue() == op2.floatValue());, +			}, +, +			if (op1 instanceof Long || op2 instanceof Long) {, +				return (op1.longValue() == op2.longValue());, +			}, +, +			return (op1.intValue() == op2.intValue());, +		}, +, +		if (left != null && (left instanceof Comparable)) {, +			return (state.getTypeComparator().compare(left, right) == 0);, +		}, +, +		return (left == null ? right == null : left.equals(right));, +	}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java, +, +		return BooleanTypedValue.forValue(equalityCheck(state, left, right));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpGT.java, +, +			else if (leftNumber instanceof Float || rightNumber instanceof Float) {, +				return BooleanTypedValue.forValue(leftNumber.floatValue() > rightNumber.floatValue());, +			}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpLT.java, +, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpNE.java, +, +		return BooleanTypedValue.forValue(!equalityCheck(state, left, right));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Operator.java, +import org.springframework.expression.spel.ExpressionState;, +, +	private final String operatorName;, +	protected boolean equalityCheck(ExpressionState state, Object left, Object right) {]