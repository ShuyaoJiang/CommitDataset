[+++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, + * Extract values from "Forwarded" and "X-Forwarded-*" headers, wrap the request, + * and response, and make they reflect the client-originated protocol and, + * address in the following methods:, + * <ul>, + * <li>{@link HttpServletRequest#getServerName() getServerName()}, + * <li>{@link HttpServletRequest#getServerPort() getServerPort()}, + * <li>{@link HttpServletRequest#getScheme() getScheme()}, + * <li>{@link HttpServletRequest#isSecure() isSecure()}, + * <li>{@link HttpServletResponse#sendRedirect(String) sendRedirect(String)}., + * </ul>, + * <p>This filter can also be used in a {@link #setRemoveOnly removeOnly} mode, + * where "Forwarded" and "X-Forwarded-*" headers are eliminated, and not used., +	protected boolean shouldNotFilter(HttpServletRequest request) {, +			ForwardedHeaderRemovingRequest wrappedRequest = new ForwardedHeaderRemovingRequest(request);, +			filterChain.doFilter(wrappedRequest, response);, +			HttpServletRequest wrappedRequest =, +					new ForwardedHeaderExtractingRequest(request, this.pathHelper);, +, +			HttpServletResponse wrappedResponse = this.relativeRedirects ?, +					new ForwardedHeaderExtractingResponse(response, wrappedRequest);, +, +			filterChain.doFilter(wrappedRequest, wrappedResponse);, +, +		ForwardedHeaderExtractingRequest(HttpServletRequest request, UrlPathHelper pathHelper) {, +, +, +		ForwardedHeaderExtractingResponse(HttpServletResponse response, HttpServletRequest request) {, +, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, + * Extract values from "Forwarded" and "X-Forwarded-*" headers, wrap the request, + * and response, and make they reflect the client-originated protocol and, + * address in the following methods:, + * <ul>, + * <li>{@link HttpServletRequest#getServerName() getServerName()}, + * <li>{@link HttpServletRequest#getServerPort() getServerPort()}, + * <li>{@link HttpServletRequest#getScheme() getScheme()}, + * <li>{@link HttpServletRequest#isSecure() isSecure()}, + * <li>{@link HttpServletResponse#sendRedirect(String) sendRedirect(String)}., + * </ul>, + * <p>This filter can also be used in a {@link #setRemoveOnly removeOnly} mode, + * where "Forwarded" and "X-Forwarded-*" headers are eliminated, and not used., +	protected boolean shouldNotFilter(HttpServletRequest request) {, +			ForwardedHeaderRemovingRequest wrappedRequest = new ForwardedHeaderRemovingRequest(request);, +			filterChain.doFilter(wrappedRequest, response);, +			HttpServletRequest wrappedRequest =, +					new ForwardedHeaderExtractingRequest(request, this.pathHelper);, +, +			HttpServletResponse wrappedResponse = this.relativeRedirects ?, +					new ForwardedHeaderExtractingResponse(response, wrappedRequest);, +, +			filterChain.doFilter(wrappedRequest, wrappedResponse);, +, +		ForwardedHeaderExtractingRequest(HttpServletRequest request, UrlPathHelper pathHelper) {, +, +, +		ForwardedHeaderExtractingResponse(HttpServletResponse response, HttpServletRequest request) {, +, +++ b/spring-web/src/main/java/org/springframework/web/filter/reactive/ForwardedHeaderFilter.java, + * Copyright 2002-2018 the original author or authors., + * Extract values from "Forwarded" and "X-Forwarded-*" headers, and use them to, + * override {@link ServerHttpRequest#getURI()} to reflect the client-originated, + * <p>This filter can also be used in a {@link #setRemoveOnly removeOnly} mode, + * where "Forwarded" and "X-Forwarded-*" headers are eliminated, and not used., + *, + * @see <a href="https://tools.ietf.org/html/rfc7239">https://tools.ietf.org/html/rfc7239</a>, +, +, +, +		ServerWebExchange mutatedExchange;, +, +			mutatedExchange = exchange.mutate().request(builder ->, +					builder.headers(headers -> {, +						FORWARDED_HEADER_NAMES.forEach(headers::remove);, +					})), +					.build();, +			mutatedExchange = exchange.mutate().request(builder -> {, +		return chain.filter(mutatedExchange);, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, + * Extract values from "Forwarded" and "X-Forwarded-*" headers, wrap the request, + * and response, and make they reflect the client-originated protocol and, + * address in the following methods:, + * <ul>, + * <li>{@link HttpServletRequest#getServerName() getServerName()}, + * <li>{@link HttpServletRequest#getServerPort() getServerPort()}, + * <li>{@link HttpServletRequest#getScheme() getScheme()}, + * <li>{@link HttpServletRequest#isSecure() isSecure()}, + * <li>{@link HttpServletResponse#sendRedirect(String) sendRedirect(String)}., + * </ul>, + * <p>This filter can also be used in a {@link #setRemoveOnly removeOnly} mode, + * where "Forwarded" and "X-Forwarded-*" headers are eliminated, and not used., +	protected boolean shouldNotFilter(HttpServletRequest request) {, +			ForwardedHeaderRemovingRequest wrappedRequest = new ForwardedHeaderRemovingRequest(request);, +			filterChain.doFilter(wrappedRequest, response);, +			HttpServletRequest wrappedRequest =, +					new ForwardedHeaderExtractingRequest(request, this.pathHelper);, +, +			HttpServletResponse wrappedResponse = this.relativeRedirects ?, +					new ForwardedHeaderExtractingResponse(response, wrappedRequest);, +]