[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +	private Environment environment;, +	 * Create a new {@code AnnotatedBeanDefinitionReader} for the given registry., +	 * If the registry is {@link EnvironmentCapable}, e.g. is an {@code ApplicationContext},, +	 * the {@link Environment} will be inherited, otherwise a new, +	 * {@link StandardEnvironment} will be created and used., +	 * @see #AnnotatedBeanDefinitionReader(BeanDefinitionRegistry, Environment), +	 * @see #setEnvironment(Environment), +		this(registry, getOrCreateEnvironment(registry));, +	/**, +	 * Create a new {@code AnnotatedBeanDefinitionReader} for the given registry and using, +	 * the given {@link Environment}., +	 * @param registry the {@code BeanFactory} to load bean definitions into,, +	 * in the form of a {@code BeanDefinitionRegistry}, +	 * @param environment the {@code Environment} to use when evaluating bean definition, +	 * profiles., +	 * @since 3.1, +	 */, +	public AnnotatedBeanDefinitionReader(BeanDefinitionRegistry registry, Environment environment) {, +		Assert.notNull(registry, "BeanDefinitionRegistry must not be null");, +		Assert.notNull(environment, "Environment must not be null");, +, +		this.registry = registry;, +		this.environment = environment;, +, +, +, +	/**, +	 * Get the Environment from the given registry if possible, otherwise return a new, +	 * StandardEnvironment., +	 */, +	private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry) {, +		Assert.notNull(registry, "BeanDefinitionRegistry must not be null");, +		if (registry instanceof EnvironmentCapable) {, +			return ((EnvironmentCapable) registry).getEnvironment();, +		}, +		return new StandardEnvironment();, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +	private Environment environment;, +	 * Create a new {@code AnnotatedBeanDefinitionReader} for the given registry., +	 * If the registry is {@link EnvironmentCapable}, e.g. is an {@code ApplicationContext},, +	 * the {@link Environment} will be inherited, otherwise a new, +	 * {@link StandardEnvironment} will be created and used., +	 * @see #AnnotatedBeanDefinitionReader(BeanDefinitionRegistry, Environment), +	 * @see #setEnvironment(Environment), +		this(registry, getOrCreateEnvironment(registry));, +	/**, +	 * Create a new {@code AnnotatedBeanDefinitionReader} for the given registry and using, +	 * the given {@link Environment}., +	 * @param registry the {@code BeanFactory} to load bean definitions into,, +	 * in the form of a {@code BeanDefinitionRegistry}, +	 * @param environment the {@code Environment} to use when evaluating bean definition, +	 * profiles., +	 * @since 3.1, +	 */, +	public AnnotatedBeanDefinitionReader(BeanDefinitionRegistry registry, Environment environment) {, +		Assert.notNull(registry, "BeanDefinitionRegistry must not be null");, +		Assert.notNull(environment, "Environment must not be null");, +, +		this.registry = registry;, +		this.environment = environment;, +, +, +, +	/**, +	 * Get the Environment from the given registry if possible, otherwise return a new, +	 * StandardEnvironment., +	 */, +	private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry) {, +		Assert.notNull(registry, "BeanDefinitionRegistry must not be null");, +		if (registry instanceof EnvironmentCapable) {, +			return ((EnvironmentCapable) registry).getEnvironment();, +		}, +		return new StandardEnvironment();, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, +	private final AnnotatedBeanDefinitionReader reader;, +	private final ClassPathBeanDefinitionScanner scanner;, +		this.reader = new AnnotatedBeanDefinitionReader(this);, +		this.scanner = new ClassPathBeanDefinitionScanner(this);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +	private Environment environment;, +	 * Create a new {@code AnnotatedBeanDefinitionReader} for the given registry., +	 * If the registry is {@link EnvironmentCapable}, e.g. is an {@code ApplicationContext},, +	 * the {@link Environment} will be inherited, otherwise a new, +	 * {@link StandardEnvironment} will be created and used., +	 * @see #AnnotatedBeanDefinitionReader(BeanDefinitionRegistry, Environment), +	 * @see #setEnvironment(Environment), +		this(registry, getOrCreateEnvironment(registry));, +	/**, +	 * Create a new {@code AnnotatedBeanDefinitionReader} for the given registry and using, +	 * the given {@link Environment}., +	 * @param registry the {@code BeanFactory} to load bean definitions into,, +	 * in the form of a {@code BeanDefinitionRegistry}, +	 * @param environment the {@code Environment} to use when evaluating bean definition, +	 * profiles., +	 * @since 3.1]