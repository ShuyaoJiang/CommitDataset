[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/HandlerMappingIntrospector.java, + * Copyright 2002-2017 the original author or authors., +		return (this.handlerMappings != null ? this.handlerMappings : Collections.emptyList());, +	private static List<HandlerMapping> initHandlerMappings(ApplicationContext applicationContext) {, +		Map<String, HandlerMapping> beans = BeanFactoryUtils.beansOfTypeIncludingAncestors(, +				applicationContext, HandlerMapping.class, true, false);, +		if (!beans.isEmpty()) {, +			List<HandlerMapping> mappings = new ArrayList<>(beans.values());, +			AnnotationAwareOrderComparator.sort(mappings);, +			return Collections.unmodifiableList(mappings);, +		}, +		return Collections.unmodifiableList(initFallback(applicationContext));, +	}, +, +	private static List<HandlerMapping> initFallback(ApplicationContext applicationContext) {, +		Properties props;, +		String path = "DispatcherServlet.properties";, +		try {, +			Resource resource = new ClassPathResource(path, DispatcherServlet.class);, +			props = PropertiesLoaderUtils.loadProperties(resource);, +		}, +		catch (IOException ex) {, +			throw new IllegalStateException("Could not load '" + path + "': " + ex.getMessage());, +		}, +, +		String value = props.getProperty(HandlerMapping.class.getName());, +		String[] names = StringUtils.commaDelimitedListToStringArray(value);, +		List<HandlerMapping> result = new ArrayList<>(names.length);, +		for (String name : names) {, +			try {, +				Class<?> clazz = ClassUtils.forName(name, DispatcherServlet.class.getClassLoader());, +				Object mapping = applicationContext.getAutowireCapableBeanFactory().createBean(clazz);, +				result.add((HandlerMapping) mapping);, +			}, +			catch (ClassNotFoundException ex) {, +				throw new IllegalStateException("Could not find default HandlerMapping [" + name + "]");, +			}, +		}, +		return result;, +	}, +, +, +			// Ignore attribute change...]