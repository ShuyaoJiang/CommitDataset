[+++ b/build.gradle, +		testCompile("javax.validation:validation-api:1.0.0.GA"), +++ b/build.gradle, +		testCompile("javax.validation:validation-api:1.0.0.GA"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +import org.springframework.messaging.converter.*;, +	protected void configureClientInboundChannel(ChannelRegistration registration) {, +	}, +	protected void configureClientOutboundChannel(ChannelRegistration registration) {, +	}, +	protected void configureMessageBroker(MessageBrokerRegistry registry) {, +	}, +		if (configureMessageConverters(converters)) {, +		}, +		return new CompositeMessageConverter(converters, getContentTypeResolver());, +	}, +	protected boolean configureMessageConverters(List<MessageConverter> messageConverters) {, +		return true;, +	}, +, +	protected ContentTypeResolver getContentTypeResolver() {, +		DefaultContentTypeResolver contentTypeResolver = new DefaultContentTypeResolver();, +		if (jackson2Present) {, +			contentTypeResolver.setDefaultMimeType(MimeTypeUtils.APPLICATION_JSON);, +		}, +		return contentTypeResolver;, +				validator = new Validator() {, +					@Override, +					public boolean supports(Class<?> clazz) {, +						return false;, +					}, +					@Override, +					public void validate(Object target, Errors errors) {, +					}, +				};, +	/**, +	 * Override this method to provide a custom {@link Validator}., +	 * @since 4.0.1, +	 */, +	public Validator getValidator() {, +		return null;, +	}, +, +, +++ b/build.gradle, +		testCompile("javax.validation:validation-api:1.0.0.GA"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +import org.springframework.messaging.converter.*;, +	protected void configureClientInboundChannel(ChannelRegistration registration) {, +	}, +	protected void configureClientOutboundChannel(ChannelRegistration registration) {, +	}, +	protected void configureMessageBroker(MessageBrokerRegistry registry) {, +	}, +		if (configureMessageConverters(converters)) {, +		}, +		return new CompositeMessageConverter(converters, getContentTypeResolver());, +	}, +	protected boolean configureMessageConverters(List<MessageConverter> messageConverters) {, +		return true;, +	}, +, +	protected ContentTypeResolver getContentTypeResolver() {, +		DefaultContentTypeResolver contentTypeResolver = new DefaultContentTypeResolver();, +		if (jackson2Present) {, +			contentTypeResolver.setDefaultMimeType(MimeTypeUtils.APPLICATION_JSON);, +		}, +		return contentTypeResolver;, +				validator = new Validator() {, +					@Override, +					public boolean supports(Class<?> clazz) {, +						return false;, +					}, +					@Override, +					public void validate(Object target, Errors errors) {, +					}, +				};, +	/**, +	 * Override this method to provide a custom {@link Validator}., +	 * @since 4.0.1, +	 */, +	public Validator getValidator() {, +		return null;, +	}, +, +, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/config/MessageBrokerConfigurationTests.java, +import java.util.Iterator;, +import org.mockito.Mockito;, +import org.springframework.context.support.StaticApplicationContext;, +import org.springframework.messaging.converter.*;, +import org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean;, +	private AnnotationConfigApplicationContext simpleContext;, +	private AnnotationConfigApplicationContext brokerRelayContext;, +	private AnnotationConfigApplicationContext customChannelContext;, +		this.simpleContext = new AnnotationConfigApplicationContext();, +		this.simpleContext.register(SimpleConfig.class);, +		this.simpleContext.refresh();, +		this.brokerRelayContext = new AnnotationConfigApplicationContext();, +		this.brokerRelayContext.register(BrokerRelayConfig.class);]