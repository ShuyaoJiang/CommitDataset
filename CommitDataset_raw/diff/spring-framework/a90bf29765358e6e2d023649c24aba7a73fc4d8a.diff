[+++ b/spring-framework-reference/src/validation.xml, +			As discussed in the previous section, <link linkend="core.convert"><filename>core.convert</filename></link> is a general-purpose type conversion system., +			It provides a unified ConversionService API as well as a strongly-typed Converter SPI for implementing conversion logic from one type to another., +			A Spring Container uses this system to bind bean property values., +			In addition, both the Spring Expression Language (SpEL) and DataBinder use this system to bind field values., +			In addition, you often need to localize String values., +			The more general <emphasis>core.convert</emphasis> Converter SPI does not address such <emphasis>formatting</emphasis> requirements directly., +			To directly address them, Spring 3 introduces a convenient Formatter SPI that provides a simple and robust alternative to PropertyEditors for client environments., +			In general, use the Converter SPI when you need to implement general-purpose type conversion logic; for example, for converting between a java.util.Date and and java.lang.Long., +			Use the Formatter SPI when you're working in a client environment, such as a web application, and need to parse and print localized field values., +			The ConversionService provides a unified type conversion API for both SPIs., +				The Formatter SPI to implement field formatting logic is simple and strongly typed:, +				As you will see, field formatting can be configured by field type or annotation., +				To bind an Annotation to a formatter, implement AnnotationFormatterFactory:, +				Have <methodname>getFieldTypes</methodname> return the types of fields the annotation may be used on., +				Have <methodname>getPrinter</methodname> return a Printer to print the value of an annotated field., +				Have <methodname>getParser</methodname> return a Parser to parse a clientValue for an annotated field., +				The example AnnotationFormatterFactory implementation below binds the @NumberFormat Annotation to a formatter., +				This annotation allows either a number style or pattern to be specified:, +				To trigger formatting, simply annotate fields with @NumberFormat:, +					Use @NumberFormat to format java.lang.Number fields., +					Use @DateTimeFormat to format java.util.Date, java.util.Calendar, java.util.Long, or Joda Time fields. , +					The example below uses @DateTimeFormat to format a java.util.Date as a ISO Date (yyyy-MM-dd):, +				The FormatterRegistry SPI allows you to configure Formatting rules centrally, instead of duplicating such configuration across your Controllers., +				This implementation may be configured programatically, or declaratively as a Spring bean using <classname>FormattingConversionServiceFactoryBean</classname>., +				Because this implemementation also implements <classname>ConversionService</classname>, it can be directly configured for use with Spring's DataBinder and the Spring Expression Language (SpEL)., +				In a Spring MVC application, you may configure a custom ConversionService instance explicity as an attribute of the <literal>annotation-driven</literal> element of the MVC namespace., +				This ConversionService will then be used anytime a type conversion is required during Controller model binding., +				If not configured explicitly, Spring MVC will automatically register default formatters and converters for common types such as numbers and dates., +    xsi:schemaLocation=", +        http://www.springframework.org/schema/beans , +        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd, +        http://www.springframework.org/schema/mvc, +        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">, +				To inject a ConversionService instance with custom formatters and converters registered, set the conversion-service attribute:, +    xsi:schemaLocation=", +        http://www.springframework.org/schema/beans , +        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd, +        http://www.springframework.org/schema/mvc, +        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">, +				A custom ConversionService instance is often constructed by a FactoryBean that internally registers custom Formatters and Converters programatically before the ConversionService is returned.]