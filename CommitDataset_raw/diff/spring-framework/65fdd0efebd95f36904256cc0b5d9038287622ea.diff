[+++ b/src/docs/asciidoc/web/webflux.adoc, +=== WebHandler API, +The WebHandler API is a general purpose, server, web API for processing requests through a, +chain of {api-spring-framework}/web/server/WebExceptionHandler.html[WebExceptionHandler's],, +{api-spring-framework}/web/server/WebFilter.html[WebFilter's], and a target, +{api-spring-framework}/web/server/WebHandler.html[WebHandler]. The chain can be assembled, +with `WebHttpHandlerBuilder` either by adding components to the builder or by having them, +detected from a Spring `ApplicationContext`. The builder returns an, +<<webflux-httphandler>> that can then be used to run on any of the supported servers., +While `HttpHandler` aims to be the most minimal contract across HTTP servers, the, +WebHandler API provides essential features commonly used to build web applications., +For example, the `ServerWebExchange` available to WebHandler API components provides, +access not only to the request and response, but also to request and session attributes,, +access to parsed form data, multipart data, and more., +| Provide handling for exceptions from the chain of ``WebFilter``'s and the target, +  `WebHandler`. For more details, see <<webflux-exception-handler>>., +| Apply interception style logic to before and after the rest of the filter chain and, +  the target `WebHandler`. For more details, see <<webflux-filters>>., +In the <<webflux-web-handler-api>>, a `WebFilter` can be used to apply interception-style, +logic before and after the rest of the processing chain of filters and the target, +`WebHandler`. When using the <<webflux-config>>, registering a `WebFilter` is as simple, +as declaring it as a Spring bean, and optionally expressing precedence via `@Order` on, +the bean declaration or by implementing `Ordered`., +The following describe the available `WebFilter` implementations:, +[[webflux-exception-handler]], +=== Exceptions, +[.small]#<<web.adoc#mvc-ann-customer-servlet-container-error-page,Same in Spring MVC>>#, +, +In the <<webflux-web-handler-api>>, a `WebExceptionHandler` can be used to to handle, +exceptions from the chain of ``WebFilter``'s and the target `WebHandler`. When using the, +<<webflux-config>>, registering a `WebExceptionHandler` is as simple as declaring it as a, +Spring bean, and optionally expressing precedence via `@Order` on the bean declaration or, +by implementing `Ordered`., +, +Below are the available `WebExceptionHandler` implementations:, +, +[cols="1,2", options="header"], +|===, +| Exception Handler | Description, +, +| `ResponseStatusExceptionHandler`, +| Provides handling for exceptions of type, +  {api-spring-framework}/web/server/ResponseStatusException.html[ResponseStatusException], +  by setting the response to the HTTP status code of the exception., +, +| `WebFluxResponseStatusExceptionHandler`, +| Extension of `ResponseStatusExceptionHandler` that can also determine the HTTP status, +  code an `@ResponseStatus` annotation on any exception., +, +  This handler is declared in the <<webflux-config>>., +, +|===, +, +, +, +The return value from the invocation of a handler, through a `HandlerAdapter`, is wrapped, +as `HandlerResult`, along with some additional context, and passed to the first, +`HandlerResultHandler` that claims support for it. The table below shows the available, +`HandlerResultHandler` implementations all of which are declared in the <<webflux-config>>:, +[cols="1,2,1", options="header"], +|===, +| Result Handler Type | Return Values | Default Order, +, +| `ResponseEntityResultHandler`, +| `ResponseEntity`, typically from ``@Controller``'s., +| 0, +, +| `ServerResponseResultHandler`, +| `ServerResponse`, typically from functional endpoints., +| 0, +, +| `ResponseBodyResultHandler`, +| Handle return values from `@ResponseBody` methods or `@RestController` classes., +| 100, +, +| `ViewResolutionResultHandler`, +| `CharSequence` or {api-spring-framework}/web/reactive/result/view/View.html[View],, +  {api-spring-framework}/ui/Model.html[Model] or `Map`,, +  {api-spring-framework}/web/reactive/result/view/Rendering.html[Rendering],, +  or any other Object is treated as a model attribute., +, +  Also see <<webflux-viewresolution>>., +| `Integer.MAX_VALUE`, +, +|===, +, +, +, +[[webflux-dispatcher-exceptions]], +=== Exceptions, +[.small]#<<web.adoc#mvc-exceptionhandlers,Same in Spring MVC>>#, +, +The `HandlerResult` returned from a `HandlerAdapter` may expose a function for error, +handling based on some handler-specific mechanism. This error function is called if:, +, +* the handler (e.g. `@Controller`) invocation fails., +* handling of the handler return value through a `HandlerResultHandler` fails., +, +The error function can change the response, e.g. to an error status, as long as an error, +signal occurs before the reactive type returned from the handler produces any data items.]