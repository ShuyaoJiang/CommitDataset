[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +	private final ResponseBodyInterceptorChain interceptorChain;, +, +		this(messageConverters, manager, null);, +	}, +, +	protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> messageConverters,, +			ContentNegotiationManager manager, List<Object> responseBodyInterceptors) {, +		this.interceptorChain = new ResponseBodyInterceptorChain(responseBodyInterceptors);, +					returnValue = this.interceptorChain.invoke(returnValue, selectedMediaType,, +							(Class<HttpMessageConverter<T>>) messageConverter.getClass(),, +							returnType, inputMessage, outputMessage);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +	private final ResponseBodyInterceptorChain interceptorChain;, +, +		this(messageConverters, manager, null);, +	}, +, +	protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> messageConverters,, +			ContentNegotiationManager manager, List<Object> responseBodyInterceptors) {, +		this.interceptorChain = new ResponseBodyInterceptorChain(responseBodyInterceptors);, +					returnValue = this.interceptorChain.invoke(returnValue, selectedMediaType,, +							(Class<HttpMessageConverter<T>>) messageConverter.getClass(),, +							returnType, inputMessage, outputMessage);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java, +	private final List<Object> responseBodyInterceptors = new ArrayList<Object>();, +, +, +	 * Add one or more interceptors to be invoked after the execution of a controller, +	 * method annotated with {@code @ResponseBody} or returning {@code ResponseEntity}, +	 * but before the body is written to the response with the selected, +	 * {@code HttpMessageConverter}., +	 */, +	public void setResponseBodyInterceptors(List<ResponseBodyInterceptor> responseBodyInterceptors) {, +		this.responseBodyInterceptors.clear();, +		if (responseBodyInterceptors != null) {, +			this.responseBodyInterceptors.addAll(responseBodyInterceptors);, +		}, +	}, +, +	/**, +, +		// Do this first, it may add ResponseBody interceptors, +		initExceptionHandlerAdviceCache();, +, +	}, +, +	private void initExceptionHandlerAdviceCache() {, +		if (getApplicationContext() == null) {, +			return;, +		}, +		if (logger.isDebugEnabled()) {, +			logger.debug("Looking for exception mappings: " + getApplicationContext());, +		}, +, +		List<ControllerAdviceBean> beans = ControllerAdviceBean.findAnnotatedBeans(getApplicationContext());, +		Collections.sort(beans, new OrderComparator());, +, +		for (ControllerAdviceBean bean : beans) {, +			ExceptionHandlerMethodResolver resolver = new ExceptionHandlerMethodResolver(bean.getBeanType());, +			if (resolver.hasExceptionMappings()) {, +				this.exceptionHandlerAdviceCache.put(bean, resolver);, +				logger.info("Detected @ExceptionHandler methods in " + bean);, +			}, +			if (ResponseBodyInterceptor.class.isAssignableFrom(bean.getBeanType())) {, +				this.responseBodyInterceptors.add(bean);, +				logger.info("Detected ResponseBodyInterceptor implementation in " + bean);, +			}, +		}, +		handlers.add(new HttpEntityMethodProcessor(, +				getMessageConverters(), this.contentNegotiationManager, this.responseBodyInterceptors));, +		handlers.add(new RequestResponseBodyMethodProcessor(, +				getMessageConverters(), this.contentNegotiationManager, this.responseBodyInterceptors));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +	private final ResponseBodyInterceptorChain interceptorChain;, +, +		this(messageConverters, manager, null);, +	}, +, +	protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> messageConverters,, +			ContentNegotiationManager manager, List<Object> responseBodyInterceptors) {, +		this.interceptorChain = new ResponseBodyInterceptorChain(responseBodyInterceptors);, +					returnValue = this.interceptorChain.invoke(returnValue, selectedMediaType,, +							(Class<HttpMessageConverter<T>>) messageConverter.getClass(),, +							returnType, inputMessage, outputMessage);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java, +	private final List<Object> responseBodyInterceptors = new ArrayList<Object>();, +, +, +	 * Add one or more interceptors to be invoked after the execution of a controller, +	 * method annotated with {@code @ResponseBody} or returning {@code ResponseEntity}, +	 * but before the body is written to the response with the selected, +	 * {@code HttpMessageConverter}., +	 */, +	public void setResponseBodyInterceptors(List<ResponseBodyInterceptor> responseBodyInterceptors) {, +		this.responseBodyInterceptors.clear();, +		if (responseBodyInterceptors != null) {, +			this.responseBodyInterceptors.addAll(responseBodyInterceptors);, +		}, +	}]