[+++ b/gradlew.bat, +set GRADLE_OPTS=-XX:MaxPermSize=1024m -Xmx1024m -XX:MaxHeapSize=256m %GRADLE_OPTS%, +++ b/gradlew.bat, +set GRADLE_OPTS=-XX:MaxPermSize=1024m -Xmx1024m -XX:MaxHeapSize=256m %GRADLE_OPTS%, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/config/PropertyResourceConfigurerTests.java, + * Copyright 2002-2012 the original author or authors., +import java.util.HashMap;, +import java.util.prefs.AbstractPreferences;, +import java.util.prefs.BackingStoreException;, +import java.util.prefs.PreferencesFactory;, + * @author Phillip Webb, +	static {, +		System.setProperty("java.util.prefs.PreferencesFactory", MockPreferencesFactory.class.getName());, +	}, +, +	/**, +	 * {@link PreferencesFactory} to create {@link MockPreferences}., +	 */, +	public static class MockPreferencesFactory implements PreferencesFactory {, +, +		private Preferences systemRoot = new MockPreferences();, +, +		private Preferences userRoot = new MockPreferences();, +, +		public Preferences systemRoot() {, +			return systemRoot;, +		}, +, +		public Preferences userRoot() {, +			return userRoot;, +		}, +	}, +, +	/**, +	 * Mock implementation of {@link Preferences} that behaves the same regardless of the, +	 * underlying operating system and will never throw security exceptions., +	 */, +	public static class MockPreferences extends AbstractPreferences {, +, +		private static Map<String, String> values = new HashMap<String, String>();, +, +		private static Map<String, AbstractPreferences> children = new HashMap<String, AbstractPreferences>();, +, +		public MockPreferences() {, +			super(null, "");, +		}, +, +		protected MockPreferences(AbstractPreferences parent, String name) {, +			super(parent, name);, +		}, +, +		@Override, +		protected void putSpi(String key, String value) {, +			values.put(key, value);, +		}, +, +		@Override, +		protected String getSpi(String key) {, +			return values.get(key);, +		}, +, +		@Override, +		protected void removeSpi(String key) {, +			values.remove(key);, +		}, +, +		@Override, +		protected void removeNodeSpi() throws BackingStoreException {, +		}, +, +		@Override, +		protected String[] keysSpi() throws BackingStoreException {, +			return values.keySet().toArray(new String[values.size()]);, +		}, +, +		@Override, +		protected String[] childrenNamesSpi() throws BackingStoreException {, +			return children.keySet().toArray(new String[values.size()]);, +		}, +, +		@Override, +		protected AbstractPreferences childSpi(String name) {, +			AbstractPreferences child = children.get(name);, +			if (child == null) {, +				child = new MockPreferences(this, name);, +				children.put(name, child);, +			}, +			return child;, +		}, +, +		@Override, +		protected void syncSpi() throws BackingStoreException {, +		}, +, +		@Override, +		protected void flushSpi() throws BackingStoreException {, +		}, +	}, +++ b/gradlew.bat, +set GRADLE_OPTS=-XX:MaxPermSize=1024m -Xmx1024m -XX:MaxHeapSize=256m %GRADLE_OPTS%]