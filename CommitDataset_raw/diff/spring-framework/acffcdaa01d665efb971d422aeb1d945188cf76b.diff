[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcCall.java, + * Copyright 2002-2013 the original author or authors., +	 * Get the configured {@link JdbcTemplate}., +		this.callMetaDataContext.processParameters(this.declaredParameters);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcCall.java, + * Copyright 2002-2013 the original author or authors., +	 * Get the configured {@link JdbcTemplate}., +		this.callMetaDataContext.processParameters(this.declaredParameters);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java, + * Copyright 2002-2013 the original author or authors., +	 * Has this operation been compiled? Compilation means at least checking, +	 * that a DataSource or JdbcTemplate has been provided, but subclasses, +	 * may also implement their own custom validation., +	// Methods dealing with configuration properties, +	 * Get the {@link JdbcTemplate} that is configured to be used., +	 */, +	public JdbcTemplate getJdbcTemplate() {, +		return this.jdbcTemplate;, +	}, +, +	/**, +	 * Compile this JdbcInsert using provided parameters and meta data plus other settings., +	 * This finalizes the configuration for this object and subsequent attempts to compile are, +	 * ignored. This will be implicitly called the first time an un-compiled insert is executed., +	 * @throws InvalidDataAccessApiUsageException if the object hasn't been correctly initialized,, +	 * for example if no DataSource has been provided, +	 * Method to perform the actual compilation. Subclasses can override this template method, +	 * to perform  their own compilation. Invoked after this base class's compilation is complete., +		this.tableMetaDataContext.processMetaData(, +				getJdbcTemplate().getDataSource(), getColumnNames(), getGeneratedKeyNames());, +		this.insertString = this.tableMetaDataContext.createInsertString(getGeneratedKeyNames());, +		this.insertTypes = this.tableMetaDataContext.createInsertTypes();, +			logger.debug("Compiled insert object: insert string is [" + getInsertString() + "]");, +	 * Method to check whether we are allowd to make any configuration changes at this time., +	 * If the class has been compiled, then no further changes to the configuration are allowed., +			throw new InvalidDataAccessApiUsageException(, +					"Configuration can't be altered once the class has been compiled or used");, +	 * Method to execute the insert., +		return getJdbcTemplate().update(getInsertString(), values.toArray(), getInsertTypes());, +			throw new DataIntegrityViolationException(, +					"Unable to retrieve the generated key for the insert: " + getInsertString());, +			getJdbcTemplate().update(, +			final String keyQuery = this.tableMetaDataContext.getSimulationQueryForGetGeneratedKey(, +					this.tableMetaDataContext.getTableName(), getGeneratedKeyNames()[0]);, +				Long key = getJdbcTemplate().queryForObject(getInsertString() + " " + keyQuery,, +						values.toArray(new Object[values.size()]), Long.class);, +				Map<String, Object> keys = new HashMap<String, Object>(1);, +				getJdbcTemplate().execute(new ConnectionCallback<Object>() {, +						}, +						finally {, +						Map<String, Object> keys = new HashMap<String, Object>(1);, +						}, +						finally {, +	 * Method that provides execution of a batch insert using the passed in Maps of parameters., +	@SuppressWarnings("unchecked"), +		List<Object>[] batchValues = new ArrayList[batch.length];, +	@SuppressWarnings("unchecked"), +		List<Object>[] batchValues = new ArrayList[batch.length];, +	 * Method to execute the batch insert., +		return getJdbcTemplate().batchUpdate(getInsertString(),, +, +	 * Match the provided in parameter values with regitered parameters and parameters defined, +	 * via metadata processing., +		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource);, +	 * Match the provided in parameter values with regitered parameters and parameters defined, +	 * via metadata processing., +		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(args);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcCall.java, + * Copyright 2002-2013 the original author or authors., +	 * Get the configured {@link JdbcTemplate}., +		this.callMetaDataContext.processParameters(this.declaredParameters);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcInsert.java, + * Copyright 2002-2013 the original author or authors., +	 * Has this operation been compiled? Compilation means at least checking, +	 * that a DataSource or JdbcTemplate has been provided, but subclasses, +	 * may also implement their own custom validation., +	// Methods dealing with configuration properties, +	 * Get the {@link JdbcTemplate} that is configured to be used., +	 */, +	public JdbcTemplate getJdbcTemplate() {, +		return this.jdbcTemplate;, +	}, +, +	/**, +	 * Compile this JdbcInsert using provided parameters and meta data plus other settings., +	 * This finalizes the configuration for this object and subsequent attempts to compile are, +	 * ignored. This will be implicitly called the first time an un-compiled insert is executed., +	 * @throws InvalidDataAccessApiUsageException if the object hasn't been correctly initialized,, +	 * for example if no DataSource has been provided, +	 * Method to perform the actual compilation. Subclasses can override this template method, +	 * to perform  their own compilation. Invoked after this base class's compilation is complete., +		this.tableMetaDataContext.processMetaData(, +				getJdbcTemplate().getDataSource(), getColumnNames(), getGeneratedKeyNames());, +		this.insertString = this.tableMetaDataContext.createInsertString(getGeneratedKeyNames());, +		this.insertTypes = this.tableMetaDataContext.createInsertTypes();, +			logger.debug("Compiled insert object: insert string is [" + getInsertString() + "]");, +	 * Method to check whether we are allowd to make any configuration changes at this time., +	 * If the class has been compiled, then no further changes to the configuration are allowed., +			throw new InvalidDataAccessApiUsageException(, +					"Configuration can't be altered once the class has been compiled or used");]