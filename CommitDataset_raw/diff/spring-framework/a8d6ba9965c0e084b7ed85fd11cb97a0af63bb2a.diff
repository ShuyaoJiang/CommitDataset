[+++ b/build.gradle, +	coroutinesVersion    = "1.2.0-alpha-2", +++ b/build.gradle, +	coroutinesVersion    = "1.2.0-alpha-2", +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import kotlinx.coroutines.flow.FlowKt;, +import kotlinx.coroutines.reactive.flow.FlowAsPublisherKt;, +import kotlinx.coroutines.reactive.flow.PublisherAsFlowKt;, +		// TODO Use a single CoroutinesRegistrar when Flow will be not experimental anymore, +		if (ClassUtils.isPresent("kotlinx.coroutines.flow.Flow", classLoader)) {, +			new CoroutinesFlowRegistrar().registerAdapters(this);, +		}, +	}, +	private static class CoroutinesFlowRegistrar {, +, +		void registerAdapters(ReactiveAdapterRegistry registry) {, +			registry.registerReactiveType(, +					ReactiveTypeDescriptor.multiValue(kotlinx.coroutines.flow.Flow.class, FlowKt::emptyFlow),, +					source -> FlowAsPublisherKt.from((kotlinx.coroutines.flow.Flow<?>) source),, +					PublisherAsFlowKt::from, +			);, +		}, +++ b/build.gradle, +	coroutinesVersion    = "1.2.0-alpha-2", +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import kotlinx.coroutines.flow.FlowKt;, +import kotlinx.coroutines.reactive.flow.FlowAsPublisherKt;, +import kotlinx.coroutines.reactive.flow.PublisherAsFlowKt;, +		// TODO Use a single CoroutinesRegistrar when Flow will be not experimental anymore, +		if (ClassUtils.isPresent("kotlinx.coroutines.flow.Flow", classLoader)) {, +			new CoroutinesFlowRegistrar().registerAdapters(this);, +		}, +	}, +	private static class CoroutinesFlowRegistrar {, +, +		void registerAdapters(ReactiveAdapterRegistry registry) {, +			registry.registerReactiveType(, +					ReactiveTypeDescriptor.multiValue(kotlinx.coroutines.flow.Flow.class, FlowKt::emptyFlow),, +					source -> FlowAsPublisherKt.from((kotlinx.coroutines.flow.Flow<?>) source),, +					PublisherAsFlowKt::from, +			);, +		}, +++ b/spring-core/src/test/kotlin/org/springframework/core/KotlinReactiveAdapterRegistryTests.kt, +import kotlinx.coroutines.FlowPreview, +import kotlinx.coroutines.flow.Flow, +import kotlinx.coroutines.flow.flow, +import kotlinx.coroutines.flow.toList, +import org.junit.Assert.fail, +import reactor.core.publisher.Flux, +import reactor.test.StepVerifier, +	@Test, +	@FlowPreview, +	fun flowToPublisher() {, +		val source = flow {, +			emit(1), +			emit(2), +			emit(3), +		}, +		val target: Publisher<Int> = getAdapter(Flow::class).toPublisher(source), +		assertTrue("Expected Flux Publisher: " + target.javaClass.name, target is Flux<*>), +		StepVerifier.create(target), +				.expectNext(1), +				.expectNext(2), +				.expectNext(3), +				.verifyComplete(), +	}, +, +	@Test, +	@FlowPreview, +	fun publisherToFlow() {, +		val source = Flux.just(1, 2, 3), +		val target = getAdapter(Flow::class).fromPublisher(source), +		if (target is Flow<*>) {, +			assertEquals(listOf(1, 2, 3),  runBlocking { target.toList() }), +		}, +		else {, +			fail(), +		}, +	}, +, +++ b/build.gradle, +	coroutinesVersion    = "1.2.0-alpha-2", +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import kotlinx.coroutines.flow.FlowKt;, +import kotlinx.coroutines.reactive.flow.FlowAsPublisherKt;, +import kotlinx.coroutines.reactive.flow.PublisherAsFlowKt;, +		// TODO Use a single CoroutinesRegistrar when Flow will be not experimental anymore, +		if (ClassUtils.isPresent("kotlinx.coroutines.flow.Flow", classLoader)) {, +			new CoroutinesFlowRegistrar().registerAdapters(this);, +		}, +	}, +	private static class CoroutinesFlowRegistrar {, +, +		void registerAdapters(ReactiveAdapterRegistry registry) {, +			registry.registerReactiveType(, +					ReactiveTypeDescriptor.multiValue(kotlinx.coroutines.flow.Flow.class, FlowKt::emptyFlow),, +					source -> FlowAsPublisherKt.from((kotlinx.coroutines.flow.Flow<?>) source),, +					PublisherAsFlowKt::from, +			);, +		}]