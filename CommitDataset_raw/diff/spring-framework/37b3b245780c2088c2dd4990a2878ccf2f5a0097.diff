[+++ b/spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, + * Copyright 2002-2016 the original author or authors., +		CacheableOperation.Builder builder = new CacheableOperation.Builder();, +		builder.setCacheNames(cacheable.cacheNames());, +		builder.setCondition(cacheable.condition());, +		builder.setUnless(cacheable.unless());, +		builder.setKey(cacheable.key());, +		builder.setKeyGenerator(cacheable.keyGenerator());, +		builder.setCacheManager(cacheable.cacheManager());, +		builder.setCacheResolver(cacheable.cacheResolver());, +		builder.setSync(cacheable.sync());, +		builder.setName(ae.toString());, +		defaultConfig.applyDefault(builder);, +		CacheableOperation op = builder.build();, +		CacheEvictOperation.Builder builder = new CacheEvictOperation.Builder();, +		builder.setCacheNames(cacheEvict.cacheNames());, +		builder.setCondition(cacheEvict.condition());, +		builder.setKey(cacheEvict.key());, +		builder.setKeyGenerator(cacheEvict.keyGenerator());, +		builder.setCacheManager(cacheEvict.cacheManager());, +		builder.setCacheResolver(cacheEvict.cacheResolver());, +		builder.setCacheWide(cacheEvict.allEntries());, +		builder.setBeforeInvocation(cacheEvict.beforeInvocation());, +		builder.setName(ae.toString());, +		defaultConfig.applyDefault(builder);, +		CacheEvictOperation op = builder.build();, +		CachePutOperation.Builder builder = new CachePutOperation.Builder();, +		builder.setCacheNames(cachePut.cacheNames());, +		builder.setCondition(cachePut.condition());, +		builder.setUnless(cachePut.unless());, +		builder.setKey(cachePut.key());, +		builder.setKeyGenerator(cachePut.keyGenerator());, +		builder.setCacheManager(cachePut.cacheManager());, +		builder.setCacheResolver(cachePut.cacheResolver());, +		builder.setName(ae.toString());, +		defaultConfig.applyDefault(builder);, +		CachePutOperation op = builder.build();, +		 * Apply the defaults to the specified {@link CacheOperation.Builder}., +		 * @param builder the operation builder to update, +		public void applyDefault(CacheOperation.Builder builder) {, +			if (builder.getCacheNames().isEmpty() && this.cacheNames != null) {, +				builder.setCacheNames(this.cacheNames);, +			if (!StringUtils.hasText(builder.getKey()) && !StringUtils.hasText(builder.getKeyGenerator()) &&, +				builder.setKeyGenerator(this.keyGenerator);, +			if (StringUtils.hasText(builder.getCacheManager()) || StringUtils.hasText(builder.getCacheResolver())) {, +				builder.setCacheResolver(this.cacheResolver);, +				builder.setCacheManager(this.cacheManager);, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, + * Copyright 2002-2016 the original author or authors., +		CacheableOperation.Builder builder = new CacheableOperation.Builder();, +		builder.setCacheNames(cacheable.cacheNames());, +		builder.setCondition(cacheable.condition());, +		builder.setUnless(cacheable.unless());, +		builder.setKey(cacheable.key());, +		builder.setKeyGenerator(cacheable.keyGenerator());, +		builder.setCacheManager(cacheable.cacheManager());, +		builder.setCacheResolver(cacheable.cacheResolver());, +		builder.setSync(cacheable.sync());, +		builder.setName(ae.toString());, +		defaultConfig.applyDefault(builder);, +		CacheableOperation op = builder.build();, +		CacheEvictOperation.Builder builder = new CacheEvictOperation.Builder();, +		builder.setCacheNames(cacheEvict.cacheNames());, +		builder.setCondition(cacheEvict.condition());, +		builder.setKey(cacheEvict.key());, +		builder.setKeyGenerator(cacheEvict.keyGenerator());, +		builder.setCacheManager(cacheEvict.cacheManager());, +		builder.setCacheResolver(cacheEvict.cacheResolver());, +		builder.setCacheWide(cacheEvict.allEntries());, +		builder.setBeforeInvocation(cacheEvict.beforeInvocation());, +		builder.setName(ae.toString());, +		defaultConfig.applyDefault(builder);, +		CacheEvictOperation op = builder.build();, +		CachePutOperation.Builder builder = new CachePutOperation.Builder();, +		builder.setCacheNames(cachePut.cacheNames());, +		builder.setCondition(cachePut.condition());, +		builder.setUnless(cachePut.unless());, +		builder.setKey(cachePut.key());, +		builder.setKeyGenerator(cachePut.keyGenerator());, +		builder.setCacheManager(cachePut.cacheManager());, +		builder.setCacheResolver(cachePut.cacheResolver());, +		builder.setName(ae.toString());, +		defaultConfig.applyDefault(builder);, +		CachePutOperation op = builder.build();, +		 * Apply the defaults to the specified {@link CacheOperation.Builder}., +		 * @param builder the operation builder to update, +		public void applyDefault(CacheOperation.Builder builder) {, +			if (builder.getCacheNames().isEmpty() && this.cacheNames != null) {, +				builder.setCacheNames(this.cacheNames);, +			if (!StringUtils.hasText(builder.getKey()) && !StringUtils.hasText(builder.getKeyGenerator()) &&, +				builder.setKeyGenerator(this.keyGenerator);, +			if (StringUtils.hasText(builder.getCacheManager()) || StringUtils.hasText(builder.getCacheResolver())) {, +				builder.setCacheResolver(this.cacheResolver);, +				builder.setCacheManager(this.cacheManager);, +++ b/spring-context/src/main/java/org/springframework/cache/config/CacheAdviceParser.java, +			CacheableOperation.Builder builder = prop.merge(opElement,, +					parserContext.getReaderContext(), new CacheableOperation.Builder());, +			builder.setUnless(getAttributeValue(opElement, "unless", ""));, +			builder.setSync(Boolean.valueOf(getAttributeValue(opElement, "sync", "false")));, +			col.add(builder.build());]