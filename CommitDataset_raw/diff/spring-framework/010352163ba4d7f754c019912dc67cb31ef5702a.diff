[+++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/CharSequenceEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/CharSequenceEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/DataBufferEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/CharSequenceEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/DataBufferEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/Encoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/CharSequenceEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/DataBufferEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/Encoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/CharSequenceEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/DataBufferEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/Encoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +		// Response is not committed until the first signal..., +		if (inputStream instanceof Mono) {, +			HttpHeaders headers = message.getHeaders();, +			if (headers.getContentLength() < 0 && !headers.containsKey(HttpHeaders.TRANSFER_ENCODING)) {, +				body = body.doOnNext(data -> headers.setContentLength(data.readableByteCount()));, +			}, +		}, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/CharSequenceEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/DataBufferEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/Encoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +		// Response is not committed until the first signal..., +		if (inputStream instanceof Mono) {, +			HttpHeaders headers = message.getHeaders();, +			if (headers.getContentLength() < 0 && !headers.containsKey(HttpHeaders.TRANSFER_ENCODING)) {, +				body = body.doOnNext(data -> headers.setContentLength(data.readableByteCount()));, +			}, +		}, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/ResourceHttpMessageWriter.java, +import org.springframework.core.io.InputStreamResource;, +			long length = lengthOf(resource);, +			if (length != -1) {, +				headers.setContentLength(length);, +	private static long lengthOf(Resource resource) {, +		// Don't consume InputStream..., +		if (InputStreamResource.class != resource.getClass()) {, +			try {, +				return resource.contentLength();, +			}, +			catch (IOException ignored) {, +			}, +		}, +		return -1;, +	}, +, +				long contentLength = lengthOf(resource);, +				if (contentLength != -1) {, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/CharSequenceEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/DataBufferEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/Encoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +		// Response is not committed until the first signal..., +		if (inputStream instanceof Mono) {, +			HttpHeaders headers = message.getHeaders();, +			if (headers.getContentLength() < 0 && !headers.containsKey(HttpHeaders.TRANSFER_ENCODING)) {, +				body = body.doOnNext(data -> headers.setContentLength(data.readableByteCount()));, +			}, +		}, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/ResourceHttpMessageWriter.java, +import org.springframework.core.io.InputStreamResource;, +			long length = lengthOf(resource);, +			if (length != -1) {, +				headers.setContentLength(length);, +	private static long lengthOf(Resource resource) {, +		// Don't consume InputStream..., +		if (InputStreamResource.class != resource.getClass()) {, +			try {, +				return resource.contentLength();, +			}, +			catch (IOException ignored) {]