[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerExceptionResolver.java, + * Copyright 2002-2018 the original author or authors., +	public ModelAndView resolveException(, +			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerExceptionResolver.java, + * Copyright 2002-2018 the original author or authors., +	public ModelAndView resolveException(, +			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandler.java, + * <p>Note that in order for an {@code @ControllerAdvice} subclass to be, +	public final ResponseEntity<Object> handleException(Exception ex, WebRequest request) throws Exception {, +, +			return handleAsyncRequestTimeoutException((AsyncRequestTimeoutException) ex, headers, status, request);, +			// Unknown exception, typically a wrapper with a common MVC exception as cause, +			// (since @ExceptionHandler type declarations also match first-level causes):, +			// We only deal with top-level MVC exceptions here, so let's rethrow the given, +			// exception for further processing through the HandlerExceptionResolver chain., +			throw ex;, +	protected ResponseEntity<Object> handleHttpRequestMethodNotSupported(, +			HttpRequestMethodNotSupportedException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {, +	protected ResponseEntity<Object> handleHttpMediaTypeNotSupported(, +			HttpMediaTypeNotSupportedException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {, +	protected ResponseEntity<Object> handleHttpMediaTypeNotAcceptable(, +			HttpMediaTypeNotAcceptableException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {, +	protected ResponseEntity<Object> handleMissingPathVariable(, +			MissingPathVariableException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {, +	protected ResponseEntity<Object> handleMissingServletRequestParameter(, +			MissingServletRequestParameterException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {, +	protected ResponseEntity<Object> handleServletRequestBindingException(, +			ServletRequestBindingException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {, +	protected ResponseEntity<Object> handleConversionNotSupported(, +			ConversionNotSupportedException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {, +	protected ResponseEntity<Object> handleTypeMismatch(, +			TypeMismatchException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {, +	protected ResponseEntity<Object> handleHttpMessageNotReadable(, +			HttpMessageNotReadableException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {, +	protected ResponseEntity<Object> handleHttpMessageNotWritable(, +			HttpMessageNotWritableException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {, +	protected ResponseEntity<Object> handleMethodArgumentNotValid(, +			MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {, +	protected ResponseEntity<Object> handleMissingServletRequestPart(, +			MissingServletRequestPartException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {, +	protected ResponseEntity<Object> handleBindException(, +			BindException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {, +	/**, +	 * A single place to customize the response body of all Exception types., +	 * <p>The default implementation sets the {@link WebUtils#ERROR_EXCEPTION_ATTRIBUTE}, +	 * request attribute and creates a {@link ResponseEntity} from the given, +	 * body, headers, and status., +	 * @param ex the exception, +	 * @param body the body for the response, +	 * @param headers the headers for the response, +	 * @param status the response status, +	 * @param request the current request, +	 */, +	protected ResponseEntity<Object> handleExceptionInternal(, +			Exception ex, @Nullable Object body, HttpHeaders headers, HttpStatus status, WebRequest request) {, +, +		if (HttpStatus.INTERNAL_SERVER_ERROR.equals(status)) {, +			request.setAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE, ex, WebRequest.SCOPE_REQUEST);, +		}, +		return new ResponseEntity<>(body, headers, status);, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerExceptionResolver.java, + * Copyright 2002-2018 the original author or authors., +	public ModelAndView resolveException(, +			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandler.java, + * <p>Note that in order for an {@code @ControllerAdvice} subclass to be, +	public final ResponseEntity<Object> handleException(Exception ex, WebRequest request) throws Exception {, +, +			return handleAsyncRequestTimeoutException((AsyncRequestTimeoutException) ex, headers, status, request);, +			// Unknown exception, typically a wrapper with a common MVC exception as cause, +			// (since @ExceptionHandler type declarations also match first-level causes):, +			// We only deal with top-level MVC exceptions here, so let's rethrow the given, +			// exception for further processing through the HandlerExceptionResolver chain., +			throw ex;, +	protected ResponseEntity<Object> handleHttpRequestMethodNotSupported(, +			HttpRequestMethodNotSupportedException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {, +	protected ResponseEntity<Object> handleHttpMediaTypeNotSupported(, +			HttpMediaTypeNotSupportedException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {, +	protected ResponseEntity<Object> handleHttpMediaTypeNotAcceptable(, +			HttpMediaTypeNotAcceptableException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {, +	protected ResponseEntity<Object> handleMissingPathVariable(, +			MissingPathVariableException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {, +	protected ResponseEntity<Object> handleMissingServletRequestParameter(, +			MissingServletRequestParameterException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {, +	protected ResponseEntity<Object> handleServletRequestBindingException(, +			ServletRequestBindingException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {, +	protected ResponseEntity<Object> handleConversionNotSupported(, +			ConversionNotSupportedException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {, +	protected ResponseEntity<Object> handleTypeMismatch(, +			TypeMismatchException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {, +	protected ResponseEntity<Object> handleHttpMessageNotReadable(, +			HttpMessageNotReadableException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {, +	protected ResponseEntity<Object> handleHttpMessageNotWritable(, +			HttpMessageNotWritableException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {, +	protected ResponseEntity<Object> handleMethodArgumentNotValid(, +			MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {]