[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java, +			throw new IllegalStateException(toString());, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java, +			throw new IllegalStateException(toString());, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java, +	private volatile T currentData;, +	 * <p><strong>Note:</strong> Sub-classes are responsible for releasing any, +	 * data buffer associated with the item, once fully written, if pooled, +	 * buffers apply to the underlying container., +	 * @return whether the current data item was written and another one, +	 * requested ({@code true}), or or otherwise if more writes are required., +	protected void writingPaused() {, +						if (processor.write(data)) {, +								processor.currentData = null;, +									processor.writingPaused();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java, +			throw new IllegalStateException(toString());, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java, +	private volatile T currentData;, +	 * <p><strong>Note:</strong> Sub-classes are responsible for releasing any, +	 * data buffer associated with the item, once fully written, if pooled, +	 * buffers apply to the underlying container., +	 * @return whether the current data item was written and another one, +	 * requested ({@code true}), or or otherwise if more writes are required., +	protected void writingPaused() {, +						if (processor.write(data)) {, +								processor.currentData = null;, +									processor.writingPaused();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpResponse.java, +				if (written == remaining) {, +					if (logger.isTraceEnabled()) {, +						logger.trace("releaseData: " + dataBuffer);, +					DataBufferUtils.release(dataBuffer);, +					return true;, +				}, +			}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java, +			throw new IllegalStateException(toString());, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java, +	private volatile T currentData;, +	 * <p><strong>Note:</strong> Sub-classes are responsible for releasing any, +	 * data buffer associated with the item, once fully written, if pooled, +	 * buffers apply to the underlying container., +	 * @return whether the current data item was written and another one, +	 * requested ({@code true}), or or otherwise if more writes are required., +	protected void writingPaused() {, +						if (processor.write(data)) {, +								processor.currentData = null;, +									processor.writingPaused();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpResponse.java, +				if (written == remaining) {, +					if (logger.isTraceEnabled()) {, +						logger.trace("releaseData: " + dataBuffer);, +					DataBufferUtils.release(dataBuffer);, +					return true;, +				}, +			}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpResponse.java, +			if (written != total) {, +				return false;, +			}, +			if (logger.isTraceEnabled()) {, +				logger.trace("releaseData: " + dataBuffer);, +			}, +			DataBufferUtils.release(dataBuffer);, +			this.byteBuffer = null;, +			return true;, +		protected void writingPaused() {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java, +			throw new IllegalStateException(toString());, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java, +	private volatile T currentData;, +	 * <p><strong>Note:</strong> Sub-classes are responsible for releasing any, +	 * data buffer associated with the item, once fully written, if pooled, +	 * buffers apply to the underlying container., +	 * @return whether the current data item was written and another one, +	 * requested ({@code true}), or or otherwise if more writes are required., +	protected void writingPaused() {, +						if (processor.write(data)) {, +								processor.currentData = null;, +									processor.writingPaused();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpResponse.java, +				if (written == remaining) {, +					if (logger.isTraceEnabled()) {, +						logger.trace("releaseData: " + dataBuffer);, +					DataBufferUtils.release(dataBuffer);, +					return true;, +				}, +			}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpResponse.java, +			if (written != total) {, +				return false;, +			}, +			if (logger.isTraceEnabled()) {, +				logger.trace("releaseData: " + dataBuffer);, +			}, +			DataBufferUtils.release(dataBuffer);, +			this.byteBuffer = null;, +			return true;, +		protected void writingPaused() {]