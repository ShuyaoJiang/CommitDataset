[+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +	 * @since 5.0.10, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +	 * @since 5.0.10, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBuffer.java, +import org.springframework.util.ObjectUtils;, +		Assert.notNull(predicate, "IntPredicate must not be null");, +		Assert.notNull(predicate, "IntPredicate must not be null");, +		if (!ObjectUtils.isEmpty(buffers)) {, +	private static boolean hasNettyDataBuffers(DataBuffer[] buffers) {, +		for (DataBuffer buffer : buffers) {, +			if (!(buffer instanceof NettyDataBuffer)) {, +		if (!ObjectUtils.isEmpty(buffers)) {, +		}, +	 * Writes one or more Netty {@link ByteBuf ByteBufs} to this buffer,, +	 * starting at the current writing position., +		if (!ObjectUtils.isEmpty(byteBufs)) {, +		}, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +	 * @since 5.0.10, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBuffer.java, +import org.springframework.util.ObjectUtils;, +		Assert.notNull(predicate, "IntPredicate must not be null");, +		Assert.notNull(predicate, "IntPredicate must not be null");, +		if (!ObjectUtils.isEmpty(buffers)) {, +	private static boolean hasNettyDataBuffers(DataBuffer[] buffers) {, +		for (DataBuffer buffer : buffers) {, +			if (!(buffer instanceof NettyDataBuffer)) {, +		if (!ObjectUtils.isEmpty(buffers)) {, +		}, +	 * Writes one or more Netty {@link ByteBuf ByteBufs} to this buffer,, +	 * starting at the current writing position., +		if (!ObjectUtils.isEmpty(byteBufs)) {, +		}, +++ b/spring-web/src/main/java/org/springframework/http/CacheControl.java, +	 * Return the "Cache-Control" header value, if any., +	 * @return the header value, or {@code null} if no directive was added, +		String headerValue = toHeaderValue();, +		return (StringUtils.hasText(headerValue) ? headerValue : null);, +	/**, +	 * Return the "Cache-Control" header value., +	 * @return the header value (potentially empty), +	 */, +	private String toHeaderValue() {, +		StringBuilder headerValue = new StringBuilder();, +		if (this.maxAge != -1) {, +			appendDirective(headerValue, "max-age=" + this.maxAge);, +		}, +		if (this.noCache) {, +			appendDirective(headerValue, "no-cache");, +		}, +		if (this.noStore) {, +			appendDirective(headerValue, "no-store");, +		}, +		if (this.mustRevalidate) {, +			appendDirective(headerValue, "must-revalidate");, +		}, +		if (this.noTransform) {, +			appendDirective(headerValue, "no-transform");, +		}, +		if (this.cachePublic) {, +			appendDirective(headerValue, "public");, +		}, +		if (this.cachePrivate) {, +			appendDirective(headerValue, "private");, +		}, +		if (this.proxyRevalidate) {, +			appendDirective(headerValue, "proxy-revalidate");, +		}, +		if (this.sMaxAge != -1) {, +			appendDirective(headerValue, "s-maxage=" + this.sMaxAge);, +		}, +		if (this.staleIfError != -1) {, +			appendDirective(headerValue, "stale-if-error=" + this.staleIfError);, +		}, +		if (this.staleWhileRevalidate != -1) {, +			appendDirective(headerValue, "stale-while-revalidate=" + this.staleWhileRevalidate);, +		}, +		return headerValue.toString();, +, +		return "CacheControl [" + toHeaderValue() + "]";, +]