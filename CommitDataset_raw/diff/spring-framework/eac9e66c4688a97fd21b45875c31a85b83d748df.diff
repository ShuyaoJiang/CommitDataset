[+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +, +					AsynchronousFileChannelReadCompletionHandler completionHandler =, +					sink.onDispose(completionHandler::dispose);, +, +		public void dispose() {, +			this.disposed.set(true);, +		}, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +, +					AsynchronousFileChannelReadCompletionHandler completionHandler =, +					sink.onDispose(completionHandler::dispose);, +, +		public void dispose() {, +			this.disposed.set(true);, +		}, +++ b/spring-core/src/test/java/org/springframework/core/io/buffer/DataBufferUtilsTests.java, +import org.springframework.core.io.ByteArrayResource;, +	public void readResourcePositionAndTakeUntil() throws Exception {, +		Resource resource = new ClassPathResource("DataBufferUtilsTests.txt", getClass());, +		Flux<DataBuffer> flux = DataBufferUtils.read(resource, 3, this.bufferFactory, 3);, +, +		flux = DataBufferUtils.takeUntilByteCount(flux, 5);, +, +, +		StepVerifier.create(flux), +				.consumeNextWith(stringConsumer("bar")), +				.consumeNextWith(stringConsumer("ba")), +				.expectComplete(), +				.verify(Duration.ofSeconds(5));, +	}, +, +	@Test, +	public void readByteArrayResourcePositionAndTakeUntil() throws Exception {, +		Resource resource = new ByteArrayResource("foobarbazqux" .getBytes());, +		Flux<DataBuffer> flux = DataBufferUtils.read(resource, 3, this.bufferFactory, 3);, +, +		flux = DataBufferUtils.takeUntilByteCount(flux, 5);, +, +, +		StepVerifier.create(flux), +				.consumeNextWith(stringConsumer("bar")), +				.consumeNextWith(stringConsumer("ba")), +				.expectComplete(), +				.verify(Duration.ofSeconds(5));, +	}, +, +	@Test]