[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/ConfigurableBeanFactory.java, +	 * Explicitly control in-creation status of the specified bean. For, +	 * container internal use only., +	 * @param beanName the name of the bean, +	 * @param inCreation whether the bean is currently in creation, +	 * @since 3.1, +	 */, +	void setCurrentlyInCreation(String beanName, boolean inCreation);, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/ConfigurableBeanFactory.java, +	 * Explicitly control in-creation status of the specified bean. For, +	 * container internal use only., +	 * @param beanName the name of the bean, +	 * @param inCreation whether the bean is currently in creation, +	 * @since 3.1, +	 */, +	void setCurrentlyInCreation(String beanName, boolean inCreation);, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java, +	/** Names of beans currently excluded from in creation checks */, +	private final Set<String> inCreationCheckExclusions = new HashSet<String>();, +, +		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {, +		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {, +	public final void setCurrentlyInCreation(String beanName, boolean inCreation) {, +		if (!inCreation) {, +			this.inCreationCheckExclusions.add(beanName);, +		} else {, +			this.inCreationCheckExclusions.remove(beanName);, +		}, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/ConfigurableBeanFactory.java, +	 * Explicitly control in-creation status of the specified bean. For, +	 * container internal use only., +	 * @param beanName the name of the bean, +	 * @param inCreation whether the bean is currently in creation, +	 * @since 3.1, +	 */, +	void setCurrentlyInCreation(String beanName, boolean inCreation);, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java, +	/** Names of beans currently excluded from in creation checks */, +	private final Set<String> inCreationCheckExclusions = new HashSet<String>();, +, +		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {, +		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {, +	public final void setCurrentlyInCreation(String beanName, boolean inCreation) {, +		if (!inCreation) {, +			this.inCreationCheckExclusions.add(beanName);, +		} else {, +			this.inCreationCheckExclusions.remove(beanName);, +		}, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/SimpleInstantiationStrategy.java, +	private static final ThreadLocal<Method> currentlyInvokedFactoryMethod = new ThreadLocal<Method>();, +, +			Method priorInvokedFactoryMethod = currentlyInvokedFactoryMethod.get();, +			try {, +				currentlyInvokedFactoryMethod.set(factoryMethod);, +			} finally {, +				if (priorInvokedFactoryMethod != null) {, +					currentlyInvokedFactoryMethod.set(priorInvokedFactoryMethod);, +				}, +				else {, +					currentlyInvokedFactoryMethod.remove();, +				}, +			}, +	/**, +	 * Return the factory method currently being invoked or {@code null} if none., +	 * Allows factory method implementations to determine whether the current, +	 * caller is the container itself as opposed to user code., +	 */, +	public static Method getCurrentlyInvokedFactoryMethod() {, +		return currentlyInvokedFactoryMethod.get();, +	}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/ConfigurableBeanFactory.java, +	 * Explicitly control in-creation status of the specified bean. For, +	 * container internal use only., +	 * @param beanName the name of the bean, +	 * @param inCreation whether the bean is currently in creation, +	 * @since 3.1, +	 */, +	void setCurrentlyInCreation(String beanName, boolean inCreation);, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java, +	/** Names of beans currently excluded from in creation checks */, +	private final Set<String> inCreationCheckExclusions = new HashSet<String>();, +, +		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {, +		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {, +	public final void setCurrentlyInCreation(String beanName, boolean inCreation) {, +		if (!inCreation) {, +			this.inCreationCheckExclusions.add(beanName);, +		} else {]