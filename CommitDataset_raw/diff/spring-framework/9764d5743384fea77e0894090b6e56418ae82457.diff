[+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +import java.text.DecimalFormat;, +import java.text.DecimalFormatSymbols;, +import java.util.stream.Collectors;, +	private static final DecimalFormatSymbols DECIMAL_FORMAT_SYMBOLS = new DecimalFormatSymbols(Locale.ENGLISH);, +, +	 * Set the acceptable language ranges,, +	 * as specified by the {@literal Accept-Language} header., +	 * @see Locale.LanguageRange, +	 */, +	public void setAcceptLanguage(List<Locale.LanguageRange> languages) {, +		Assert.notNull(languages, "'languages' must not be null");, +		DecimalFormat df = new DecimalFormat("0.0", DECIMAL_FORMAT_SYMBOLS);, +		List<String> values = languages, +				.stream(), +				.map(r -> (r.getWeight() == Locale.LanguageRange.MAX_WEIGHT ? r.getRange() : r.getRange() + ";q=" + df.format(r.getWeight()))), +				.collect(Collectors.toList());, +		set(ACCEPT_LANGUAGE, toCommaDelimitedString(values));, +	}, +, +	/**, +	 * Return the acceptable language ranges,, +	 * as specified by the {@literal Accept-Language} header, +	 * @see Locale.LanguageRange, +	 */, +	public List<Locale.LanguageRange> getAcceptLanguage() {, +		String value = getFirst(ACCEPT_LANGUAGE);, +		if (value != null) {, +			return Locale.LanguageRange.parse(value);, +		}, +		return Collections.emptyList();, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +import java.text.DecimalFormat;, +import java.text.DecimalFormatSymbols;, +import java.util.stream.Collectors;, +	private static final DecimalFormatSymbols DECIMAL_FORMAT_SYMBOLS = new DecimalFormatSymbols(Locale.ENGLISH);, +, +	 * Set the acceptable language ranges,, +	 * as specified by the {@literal Accept-Language} header., +	 * @see Locale.LanguageRange, +	 */, +	public void setAcceptLanguage(List<Locale.LanguageRange> languages) {, +		Assert.notNull(languages, "'languages' must not be null");, +		DecimalFormat df = new DecimalFormat("0.0", DECIMAL_FORMAT_SYMBOLS);, +		List<String> values = languages, +				.stream(), +				.map(r -> (r.getWeight() == Locale.LanguageRange.MAX_WEIGHT ? r.getRange() : r.getRange() + ";q=" + df.format(r.getWeight()))), +				.collect(Collectors.toList());, +		set(ACCEPT_LANGUAGE, toCommaDelimitedString(values));, +	}, +, +	/**, +	 * Return the acceptable language ranges,, +	 * as specified by the {@literal Accept-Language} header, +	 * @see Locale.LanguageRange, +	 */, +	public List<Locale.LanguageRange> getAcceptLanguage() {, +		String value = getFirst(ACCEPT_LANGUAGE);, +		if (value != null) {, +			return Locale.LanguageRange.parse(value);, +		}, +		return Collections.emptyList();, +	}, +, +	/**, +++ b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java, +	@Test, +	public void acceptLanguage() {, +		assertTrue(headers.getAcceptLanguage().isEmpty());, +		String headerValue = "fr-ch, fr;q=0.9, en;q=0.8, de;q=0.7, *;q=0.5";, +		headers.setAcceptLanguage(Locale.LanguageRange.parse(headerValue));, +		assertEquals(headerValue, headers.getFirst(HttpHeaders.ACCEPT_LANGUAGE));, +		List<Locale.LanguageRange> languages = headers.getAcceptLanguage();, +		Locale.LanguageRange[] languageArray = new Locale.LanguageRange[]{, +				new Locale.LanguageRange("fr-ch"),, +				new Locale.LanguageRange("fr", 0.9),, +				new Locale.LanguageRange("en", 0.8),, +				new Locale.LanguageRange("de", 0.7),, +				new Locale.LanguageRange("*", 0.5), +		};, +		assertArrayEquals(languageArray, languages.toArray());, +	}, +]