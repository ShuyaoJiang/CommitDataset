[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +	 * Return the descriptor for the item currently on top of the stack (in the current scope)., +		if (this.compilationScopes.peek().isEmpty()) {, +, +			case 'I':, +				if (!stackDescriptor.equals("Ljava/lang/Integer")) {, +					mv.visitTypeInsn(CHECKCAST, "java/lang/Integer");, +				}, +				mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Integer", "intValue", "()I", false);, +				break;, +			case 'S':, +				if (!stackDescriptor.equals("Ljava/lang/Short")) {, +					mv.visitTypeInsn(CHECKCAST, "java/lang/Short");, +				}, +				mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Short", "shortValue", "()S", false);, +				break;, +			sb.append(toJvmDescriptor(param));, +		sb.append(toJvmDescriptor(method.getReturnType()));, +			sb.append(toJvmDescriptor(param));, +	public static String toJvmDescriptor(Class<?> clazz) {, +			if (desc1.equals("Z")) {, +				return desc2.equals("Ljava/lang/Boolean");, +			}, +			else if (desc1.equals("D")) {, +			else if (desc1.equals("J")) {, +				return desc2.equals("Ljava/lang/Long");, +			if (desc2.equals("Z")) {, +				return desc1.equals("Ljava/lang/Boolean");, +			}, +			else if (desc2.equals("D")) {, +			else if (desc2.equals("J")) {, +				return desc1.equals("Ljava/lang/Long");, +		if (isPrimitiveOrUnboxableSupportedNumber(descriptor)) {, +		return ("Z".equals(descriptor) || descriptor.equals("Ljava/lang/Boolean"));, +			return "DFIJ".contains(descriptor);, +			String name = descriptor.substring("Ljava/lang/".length());, +			if (name.equals("Double") || name.equals("Float") || name.equals("Integer") || name.equals("Long")) {, +	 * Determine whether the given number is to be considered as an integer, +	 * for the purposes of a numeric operation at the bytecode level., +	 * @param number the number to check, +	 * @return {@code true} if it is an {@link Integer}, {@link Short} or {@link Byte}, +	 */, +	public static boolean isIntegerForNumericOp(Number number) {, +		return (number instanceof Integer || number instanceof Short || number instanceof Byte);, +	}, +, +	/**, +		else if (descriptor.equals("Ljava/lang/Boolean")) {, +			return 'Z';, +		else if (descriptor.equals("Ljava/lang/Byte")) {, +			return 'B';, +		}, +		else if (descriptor.equals("Ljava/lang/Character")) {, +			return 'C';, +		}, +		else if (descriptor.equals("Ljava/lang/Double")) {, +			return 'D';, +		else if (descriptor.equals("Ljava/lang/Integer")) {, +			return 'I';, +		}, +		else if (descriptor.equals("Ljava/lang/Short")) {, +			return 'S';, +			case 'B':, +				mv.visitMethodInsn(INVOKESTATIC, "java/lang/Byte", "valueOf", "(B)Ljava/lang/Byte;", false);, +			case 'D':, +				mv.visitMethodInsn(INVOKESTATIC, "java/lang/Double", "valueOf", "(D)Ljava/lang/Double;", false);, +				break;, +			case 'F':, +				mv.visitMethodInsn(INVOKESTATIC, "java/lang/Float", "valueOf", "(F)Ljava/lang/Float;", false);, +				break;, +			case 'I':, +				mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);, +				break;, +			case 'J':, +				mv.visitMethodInsn(INVOKESTATIC, "java/lang/Long", "valueOf", "(J)Ljava/lang/Long;", false);, +				break;, +			case 'S':, +				mv.visitMethodInsn(INVOKESTATIC, "java/lang/Short", "valueOf", "(S)Ljava/lang/Short;", false);, +					if (name.equals("byte")) {, +						return "B";, +					else if (name.equals("long")) {, +						return "J";, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +	 * Return the descriptor for the item currently on top of the stack (in the current scope)., +		if (this.compilationScopes.peek().isEmpty()) {, +, +			case 'I':, +				if (!stackDescriptor.equals("Ljava/lang/Integer")) {, +					mv.visitTypeInsn(CHECKCAST, "java/lang/Integer");, +				}, +				mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Integer", "intValue", "()I", false);, +				break;, +			case 'S':, +				if (!stackDescriptor.equals("Ljava/lang/Short")) {, +					mv.visitTypeInsn(CHECKCAST, "java/lang/Short");, +				}, +				mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Short", "shortValue", "()S", false);, +				break;, +			sb.append(toJvmDescriptor(param));, +		sb.append(toJvmDescriptor(method.getReturnType()));]