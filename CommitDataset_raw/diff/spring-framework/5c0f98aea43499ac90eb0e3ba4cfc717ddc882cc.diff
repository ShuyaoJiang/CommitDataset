[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +	private static final Boolean CONTINUE = null;, +, +, +	 * <em>Get</em> the fully qualified class names of all meta-annotation, +	 * types <em>present</em> on the annotation (of the specified, +	 * <em>Get</em> the fully qualified class names of all meta-annotation, +	 * types <em>present</em> on the annotation (of the specified, +						return CONTINUE;, +				return ((found && (metaDepth > 0)) ? Boolean.TRUE : CONTINUE);, +				return (found ? Boolean.TRUE : CONTINUE);, +		return processWithGetSemantics(element, annotationType, new MergedAnnotationAttributesProcessor(annotationType,, +	 * @since 4.2, +	 * @since 4.2, +	 * @since 4.2, +	 * @since 4.2, +			searchOnMethodsInInterfaces, searchOnMethodsInSuperclasses, new MergedAnnotationAttributesProcessor(, +	 * <em>Get</em> the annotation attributes of <strong>all</strong> annotations, +	 * of the specified {@code annotationType} in the annotation hierarchy above, +	 * the supplied {@link AnnotatedElement} and store the results in a, +	 * {@link MultiValueMap}., +	 *, +	 * <p>Note: in contrast to {@link #getAnnotationAttributes(AnnotatedElement, String)},, +	 * this method does <em>not</em> take attribute overrides into account., +	 *, +	 * @return a {@link MultiValueMap} keyed by attribute name, containing, +	 * the annotation attributes from all annotations found, or {@code null}, +	 * if not found, +	 * @see #getAllAnnotationAttributes(AnnotatedElement, String, boolean, boolean), +	 * <em>Get</em> the annotation attributes of <strong>all</strong> annotations, +	 * of the specified {@code annotationType} in the annotation hierarchy above, +	 * the supplied {@link AnnotatedElement} and store the results in a, +	 * {@link MultiValueMap}., +	 *, +	 * <p>Note: in contrast to {@link #getAnnotationAttributes(AnnotatedElement, String)},, +	 * this method does <em>not</em> take attribute overrides into account., +	 *, +	 * @return a {@link MultiValueMap} keyed by attribute name, containing, +	 * the annotation attributes from all annotations found, or {@code null}, +	 * if not found, +		final MultiValueMap<String, Object> attributesMap = new LinkedMultiValueMap<String, Object>();, +		processWithGetSemantics(element, annotationType, new SimpleAnnotationProcessor<Void>() {, +, +				boolean found = annotation.annotationType().getName().equals(annotationType);, +				if (found) {, +					AnnotationAttributes annotationAttributes = AnnotationUtils.getAnnotationAttributes(annotation,, +						classValuesAsString, nestedAnnotationsAsMap);, +					for (Map.Entry<String, Object> entry : annotationAttributes.entrySet()) {, +						attributesMap.add(entry.getKey(), entry.getValue());, +, +				// Continue searching..., +		return (attributesMap.isEmpty() ? null : attributesMap);, +	 * {@link Processor} that {@linkplain #process processes} annotations, +	 * but does not {@link #postProcess} results., +	private static class MergedAnnotationAttributesProcessor implements Processor<AnnotationAttributes> {, +		MergedAnnotationAttributesProcessor(String annotationType, boolean classValuesAsString, boolean nestedAnnotationsAsMap) {, +			return (found ? AnnotationUtils.getAnnotationAttributes(annotation, classValuesAsString, nestedAnnotationsAsMap) : null);, +		public void postProcess(Annotation annotation, AnnotationAttributes attributes) {, +			for (String key : attributes.keySet()) {, +						attributes.put(key, AnnotationUtils.adaptValue(value, classValuesAsString, nestedAnnotationsAsMap));, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +	private static final Boolean CONTINUE = null;, +, +, +	 * <em>Get</em> the fully qualified class names of all meta-annotation, +	 * types <em>present</em> on the annotation (of the specified, +	 * <em>Get</em> the fully qualified class names of all meta-annotation, +	 * types <em>present</em> on the annotation (of the specified, +						return CONTINUE;, +				return ((found && (metaDepth > 0)) ? Boolean.TRUE : CONTINUE);, +				return (found ? Boolean.TRUE : CONTINUE);, +		return processWithGetSemantics(element, annotationType, new MergedAnnotationAttributesProcessor(annotationType,, +	 * @since 4.2, +	 * @since 4.2, +	 * @since 4.2, +	 * @since 4.2, +			searchOnMethodsInInterfaces, searchOnMethodsInSuperclasses, new MergedAnnotationAttributesProcessor(, +	 * <em>Get</em> the annotation attributes of <strong>all</strong> annotations, +	 * of the specified {@code annotationType} in the annotation hierarchy above, +	 * the supplied {@link AnnotatedElement} and store the results in a, +	 * {@link MultiValueMap}., +	 *, +	 * <p>Note: in contrast to {@link #getAnnotationAttributes(AnnotatedElement, String)},, +	 * this method does <em>not</em> take attribute overrides into account., +	 *, +	 * @return a {@link MultiValueMap} keyed by attribute name, containing, +	 * the annotation attributes from all annotations found, or {@code null}, +	 * if not found, +	 * @see #getAllAnnotationAttributes(AnnotatedElement, String, boolean, boolean), +	 * <em>Get</em> the annotation attributes of <strong>all</strong> annotations, +	 * of the specified {@code annotationType} in the annotation hierarchy above, +	 * the supplied {@link AnnotatedElement} and store the results in a, +	 * {@link MultiValueMap}., +	 *, +	 * <p>Note: in contrast to {@link #getAnnotationAttributes(AnnotatedElement, String)},, +	 * this method does <em>not</em> take attribute overrides into account., +	 *, +	 * @return a {@link MultiValueMap} keyed by attribute name, containing, +	 * the annotation attributes from all annotations found, or {@code null}, +	 * if not found]