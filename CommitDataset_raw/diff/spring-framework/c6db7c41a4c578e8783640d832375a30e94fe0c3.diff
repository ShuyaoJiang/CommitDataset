[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorMatches.java, +import org.springframework.expression.spel.ExpressionState;, + * Implements the matches operator. Matches takes two operands. The first is a string and the second is a java regex. It, + * will return true when getValue() is called if the first operand matches the regex., +	public String getOperatorName() {, +		return "matches";, +	}, +, +	/**, +	 * Check the first operand matches the regex specified as the second operand., +	 * , +	 * @param state the expression state, +	 * @return true if the first operand matches the regex specified as the second operand, otherwise false, +	 * @throws EvaluationException if there is a problem evaluating the expression (e.g. the regex is invalid), +	 */, +	@Override, +	public Boolean getValue(ExpressionState state) throws EvaluationException {, +		SpelNode leftOp = getLeftOperand();, +		SpelNode rightOp = getRightOperand();, +		Object left = leftOp.getValue(state, String.class);, +			if (!(left instanceof String)) {, +				throw new SpelException(leftOp.getCharPositionInLine(),, +						SpelMessages.INVALID_FIRST_OPERAND_FOR_LIKE_OPERATOR, left);, +			}, +			if (!(right instanceof String)) {, +				throw new SpelException(rightOp.getCharPositionInLine(),, +						SpelMessages.INVALID_SECOND_OPERAND_FOR_LIKE_OPERATOR, right);, +			}, +			throw new SpelException(rightOp.getCharPositionInLine(), pse, SpelMessages.INVALID_PATTERN, right);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorMatches.java, +import org.springframework.expression.spel.ExpressionState;, + * Implements the matches operator. Matches takes two operands. The first is a string and the second is a java regex. It, + * will return true when getValue() is called if the first operand matches the regex., +	public String getOperatorName() {, +		return "matches";, +	}, +, +	/**, +	 * Check the first operand matches the regex specified as the second operand., +	 * , +	 * @param state the expression state, +	 * @return true if the first operand matches the regex specified as the second operand, otherwise false, +	 * @throws EvaluationException if there is a problem evaluating the expression (e.g. the regex is invalid), +	 */, +	@Override, +	public Boolean getValue(ExpressionState state) throws EvaluationException {, +		SpelNode leftOp = getLeftOperand();, +		SpelNode rightOp = getRightOperand();, +		Object left = leftOp.getValue(state, String.class);, +			if (!(left instanceof String)) {, +				throw new SpelException(leftOp.getCharPositionInLine(),, +						SpelMessages.INVALID_FIRST_OPERAND_FOR_LIKE_OPERATOR, left);, +			}, +			if (!(right instanceof String)) {, +				throw new SpelException(rightOp.getCharPositionInLine(),, +						SpelMessages.INVALID_SECOND_OPERAND_FOR_LIKE_OPERATOR, right);, +			}, +			throw new SpelException(rightOp.getCharPositionInLine(), pse, SpelMessages.INVALID_PATTERN, right);, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java, +	public void testRelOperatorsIs04() {, +		evaluate("null is T(String)", "false", Boolean.class);, +	}, +, +	public void testRelOperatorsIs05() {, +		evaluate("null is T(Integer)", "false", Boolean.class);, +	}, +, +	public void testRelOperatorsIs06() {, +		evaluateAndCheckError("'A' is null", SpelMessages.IS_OPERATOR_NEEDS_CLASS_OPERAND, 7, "null");, +	}, +, +	public void testRelOperatorsMatches03() {, +		evaluateAndCheckError("null matches '^.*$'", SpelMessages.INVALID_FIRST_OPERAND_FOR_LIKE_OPERATOR, 0, null);, +	}, +, +	public void testRelOperatorsMatches04() {, +		evaluateAndCheckError("'abc' matches null", SpelMessages.INVALID_SECOND_OPERAND_FOR_LIKE_OPERATOR, 14, null);, +	}, +, +	public void testRelOperatorsMatches05() {, +		evaluate("27 matches '^.*2.*$'", true, Boolean.class); // conversion int>string, +	}, +, +	// TODO Is $index within projection/selection useful or just cute?, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorMatches.java, +import org.springframework.expression.spel.ExpressionState;, + * Implements the matches operator. Matches takes two operands. The first is a string and the second is a java regex. It, + * will return true when getValue() is called if the first operand matches the regex., +	public String getOperatorName() {, +		return "matches";, +	}, +, +	/**, +	 * Check the first operand matches the regex specified as the second operand., +	 * , +	 * @param state the expression state, +	 * @return true if the first operand matches the regex specified as the second operand, otherwise false, +	 * @throws EvaluationException if there is a problem evaluating the expression (e.g. the regex is invalid), +	 */, +	@Override]