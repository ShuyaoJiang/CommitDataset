[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/SpelExpressionParserFactory.java, +	/**, +	 * @param configuration configuration bit flags @see SpelExpressionParserConfiguration, +	 * @return an expression parser instance configured appropriately, +	 */, +	public static ExpressionParser getParser(int configuration) {, +		return new SpelExpressionParser(configuration);, +	}, +	, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/SpelExpressionParserFactory.java, +	/**, +	 * @param configuration configuration bit flags @see SpelExpressionParserConfiguration, +	 * @return an expression parser instance configured appropriately, +	 */, +	public static ExpressionParser getParser(int configuration) {, +		return new SpelExpressionParser(configuration);, +	}, +	, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/standard/SpelExpressionParser.java, +import org.springframework.expression.Expression;, +import org.springframework.expression.spel.standard.internal.InternalSpelExpressionParser;, + * SpEL parser.  Instances are reusable and thread safe., +	 * bit flags can be seen in {@link SpelExpressionParserConfiguration}, +	/**, +	 * Create a parser with default behaviour., +	 */, +	public SpelExpressionParser() {, +		this(0);, +	}, +, +	@Override, +	protected Expression doParseExpression(String expressionString, ParserContext context) throws ParseException {, +		return new InternalSpelExpressionParser(configuration).doParseExpression(expressionString, context);, +	}, +, +		return new InternalSpelExpressionParser(configuration).parse(expressionString);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/SpelExpressionParserFactory.java, +	/**, +	 * @param configuration configuration bit flags @see SpelExpressionParserConfiguration, +	 * @return an expression parser instance configured appropriately, +	 */, +	public static ExpressionParser getParser(int configuration) {, +		return new SpelExpressionParser(configuration);, +	}, +	, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/standard/SpelExpressionParser.java, +import org.springframework.expression.Expression;, +import org.springframework.expression.spel.standard.internal.InternalSpelExpressionParser;, + * SpEL parser.  Instances are reusable and thread safe., +	 * bit flags can be seen in {@link SpelExpressionParserConfiguration}, +	/**, +	 * Create a parser with default behaviour., +	 */, +	public SpelExpressionParser() {, +		this(0);, +	}, +, +	@Override, +	protected Expression doParseExpression(String expressionString, ParserContext context) throws ParseException {, +		return new InternalSpelExpressionParser(configuration).doParseExpression(expressionString, context);, +	}, +, +		return new InternalSpelExpressionParser(configuration).parse(expressionString);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/standard/SpelExpressionParserConfiguration.java, +	/**, +	 * This option allows collections to grow if an attempt is made to index an element beyond the current size.  Rather than fail the, +	 * collection is populated with elements up to the specified index., +	 */, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/SpelExpressionParserFactory.java, +	/**, +	 * @param configuration configuration bit flags @see SpelExpressionParserConfiguration, +	 * @return an expression parser instance configured appropriately, +	 */, +	public static ExpressionParser getParser(int configuration) {, +		return new SpelExpressionParser(configuration);, +	}, +	, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/standard/SpelExpressionParser.java, +import org.springframework.expression.Expression;, +import org.springframework.expression.spel.standard.internal.InternalSpelExpressionParser;, + * SpEL parser.  Instances are reusable and thread safe., +	 * bit flags can be seen in {@link SpelExpressionParserConfiguration}, +	/**, +	 * Create a parser with default behaviour., +	 */, +	public SpelExpressionParser() {, +		this(0);, +	}, +, +	@Override, +	protected Expression doParseExpression(String expressionString, ParserContext context) throws ParseException {, +		return new InternalSpelExpressionParser(configuration).doParseExpression(expressionString, context);, +	}, +, +		return new InternalSpelExpressionParser(configuration).parse(expressionString);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/standard/SpelExpressionParserConfiguration.java, +	/**, +	 * This option allows collections to grow if an attempt is made to index an element beyond the current size.  Rather than fail the, +	 * collection is populated with elements up to the specified index., +	 */]