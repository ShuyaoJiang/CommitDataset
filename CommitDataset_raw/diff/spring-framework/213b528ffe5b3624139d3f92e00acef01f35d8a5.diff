[+++ b/org.springframework.core/src/main/java/org/springframework/core/type/classreading/AnnotationMetadataReadingVisitor.java, + * Copyright 2002-2009 the original author or authors., +import java.lang.reflect.Field;, +import org.springframework.util.ReflectionUtils;, +				Object valueToUse = value;, +				if (value instanceof Type) {, +					try {, +						valueToUse = classLoader.loadClass(((Type) value).getClassName());, +					}, +					catch (ClassNotFoundException ex) {, +						// Class not found - can't resolve class reference in annotation attribute., +					}, +				}, +				attributes.put(name, valueToUse);, +			}, +			@Override, +			public void visitEnum(String name, String desc, String value) {, +				Object valueToUse = value;, +				try {, +					Class enumType = classLoader.loadClass(Type.getType(desc).getClassName());, +					Field enumConstant = ReflectionUtils.findField(enumType, value);, +					if (enumConstant != null) {, +						valueToUse = enumConstant.get(null);, +					}, +				}, +				catch (Exception ex) {, +					// Class not found - can't resolve class reference in annotation attribute., +				}, +				attributes.put(name, valueToUse);, +					for (Method annotationAttribute : annotationAttributes) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/classreading/AnnotationMetadataReadingVisitor.java, + * Copyright 2002-2009 the original author or authors., +import java.lang.reflect.Field;, +import org.springframework.util.ReflectionUtils;, +				Object valueToUse = value;, +				if (value instanceof Type) {, +					try {, +						valueToUse = classLoader.loadClass(((Type) value).getClassName());, +					}, +					catch (ClassNotFoundException ex) {, +						// Class not found - can't resolve class reference in annotation attribute., +					}, +				}, +				attributes.put(name, valueToUse);, +			}, +			@Override, +			public void visitEnum(String name, String desc, String value) {, +				Object valueToUse = value;, +				try {, +					Class enumType = classLoader.loadClass(Type.getType(desc).getClassName());, +					Field enumConstant = ReflectionUtils.findField(enumType, value);, +					if (enumConstant != null) {, +						valueToUse = enumConstant.get(null);, +					}, +				}, +				catch (Exception ex) {, +					// Class not found - can't resolve class reference in annotation attribute., +				}, +				attributes.put(name, valueToUse);, +					for (Method annotationAttribute : annotationAttributes) {, +++ b/org.springframework.core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java, + * Copyright 2002-2009 the original author or authors., +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +import org.springframework.core.type.classreading.MetadataReaderFactory;, +		assertTrue(metadata.hasAnnotation(SpecialAttr.class.getName()));, +		assertEquals(3, metadata.getAnnotationTypes().size());, +		assertTrue(metadata.getAnnotationTypes().contains(SpecialAttr.class.getName()));, +		Map<String, Object> compAttrs = metadata.getAnnotationAttributes(Component.class.getName());, +		assertEquals(1, compAttrs.size());, +		assertEquals("myName", compAttrs.get("value"));, +		Map<String, Object> scopeAttrs = metadata.getAnnotationAttributes(Scope.class.getName());, +		assertEquals(1, scopeAttrs.size());, +		assertEquals("myScope", scopeAttrs.get("value"));, +		Map<String, Object> specialAttrs = metadata.getAnnotationAttributes(SpecialAttr.class.getName());, +		assertEquals(2, specialAttrs.size());, +		assertEquals(String.class, specialAttrs.get("clazz"));, +		assertEquals(Thread.State.NEW, specialAttrs.get("state"));, +	}, +, +, +	@Target(ElementType.TYPE), +	@Retention(RetentionPolicy.RUNTIME), +	public @interface SpecialAttr {, +, +		Class clazz();, +, +		Thread.State state();, +	@SpecialAttr(clazz = String.class, state = Thread.State.NEW)]