[+++ b/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, + * @author David Haraburda, +				if (candidate.getSuperclass() != null && superclass != Object.class && superclass != Enum.class) {, +				addInterfacesToClassHierarchy(candidate, array, hierarchy, visited);, +, +			if (type.isEnum()) {, +				addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited);, +				addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited);, +				addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited);, +			}, +, +		private void addInterfacesToClassHierarchy(Class<?> type, boolean asArray,, +				List<Class<?>> hierarchy, Set<Class<?>> visited) {, +			for (Class<?> implementedInterface : type.getInterfaces()) {, +				addToClassHierarchy(hierarchy.size(), implementedInterface, asArray, hierarchy, visited);, +			}, +		}, +, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, + * @author David Haraburda, +				if (candidate.getSuperclass() != null && superclass != Object.class && superclass != Enum.class) {, +				addInterfacesToClassHierarchy(candidate, array, hierarchy, visited);, +, +			if (type.isEnum()) {, +				addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited);, +				addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited);, +				addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited);, +			}, +, +		private void addInterfacesToClassHierarchy(Class<?> type, boolean asArray,, +				List<Class<?>> hierarchy, Set<Class<?>> visited) {, +			for (Class<?> implementedInterface : type.getInterfaces()) {, +				addToClassHierarchy(hierarchy.size(), implementedInterface, asArray, hierarchy, visited);, +			}, +		}, +, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/GenericConversionServiceTests.java, + * @author David Haraburda, +	public void testStringToEnumWithInterfaceConversion() {, +		conversionService.addConverterFactory(new StringToEnumConverterFactory());, +		conversionService.addConverterFactory(new StringToMyEnumInterfaceConverterFactory());, +		assertEquals(MyEnum.A, conversionService.convert("1", MyEnum.class));, +	}, +, +	@Test, +	public void testStringToEnumWithBaseInterfaceConversion() {, +		conversionService.addConverterFactory(new StringToEnumConverterFactory());, +		conversionService.addConverterFactory(new StringToMyEnumBaseInterfaceConverterFactory());, +		assertEquals(MyEnum.A, conversionService.convert("base1", MyEnum.class));, +	}, +, +	@Test, +	interface MyEnumBaseInterface {, +		String getBaseCode();, +	}, +	interface MyEnumInterface extends MyEnumBaseInterface {, +		A("1"),, +		B("2"),, +		C("3");, +, +		private String code;, +, +		MyEnum(String code) {, +			this.code = code;, +		}, +, +			return code;, +, +		@Override, +		public String getBaseCode() {, +			return "base" + code;, +	private static class StringToMyEnumInterfaceConverterFactory implements ConverterFactory<String, MyEnumInterface> {, +, +		@SuppressWarnings("unchecked"), +		public <T extends MyEnumInterface> Converter<String, T> getConverter(Class<T> targetType) {, +			return new StringToMyEnumInterfaceConverter(targetType);, +		}, +, +		private static class StringToMyEnumInterfaceConverter<T extends Enum<?> & MyEnumInterface> implements Converter<String, T> {, +			private final Class<T> enumType;, +, +			public StringToMyEnumInterfaceConverter(Class<T> enumType) {, +				this.enumType = enumType;, +			}, +, +			public T convert(String source) {, +				for (T value : enumType.getEnumConstants()) {, +					if (value.getCode().equals(source)) {, +						return value;, +					}, +				}, +				return null;, +			}, +		}, +, +	}, +, +	private static class StringToMyEnumBaseInterfaceConverterFactory implements ConverterFactory<String, MyEnumBaseInterface> {, +, +		@SuppressWarnings("unchecked")]