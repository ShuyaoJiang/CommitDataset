[+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/EnableScheduling.java, + *         taskRegistrar.setScheduler(taskScheduler());, + *                 myTask().work();, + *     public Executor taskScheduler() {, + *         return Executors.newScheduledThreadPool(42);, + *     public MyTask myTask() {, + * <p>For reference, the example above can be compared to the following Spring XML, + * configuration:, + * <pre class="code">, + * {@code, + * <beans>, + *     <task:annotation-config scheduler="taskScheduler"/>, + *     <task:scheduler id="taskScheduler" pool-size="42"/>, + *     <task:scheduled ref="myTask" method="work" fixed-rate="1000"/>, + *     <bean id="myTask" class="com.foo.MyAsyncBean"/>, + * </beans>, + * }</pre>, + * the examples are equivalent save that in XML a <em>fixed-rate</em> period is used, + * instead of a custom <em>{@code Trigger}</em> implementation; this is because the, + * {@code task:} namespace {@code scheduled} cannot easily expose such support. This is, + * but one demonstration how the code-based approach allows for maximum configurability, + * through direct access to actual componentry.<p>, + *, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/EnableScheduling.java, + *         taskRegistrar.setScheduler(taskScheduler());, + *                 myTask().work();, + *     public Executor taskScheduler() {, + *         return Executors.newScheduledThreadPool(42);, + *     public MyTask myTask() {, + * <p>For reference, the example above can be compared to the following Spring XML, + * configuration:, + * <pre class="code">, + * {@code, + * <beans>, + *     <task:annotation-config scheduler="taskScheduler"/>, + *     <task:scheduler id="taskScheduler" pool-size="42"/>, + *     <task:scheduled ref="myTask" method="work" fixed-rate="1000"/>, + *     <bean id="myTask" class="com.foo.MyAsyncBean"/>, + * </beans>, + * }</pre>, + * the examples are equivalent save that in XML a <em>fixed-rate</em> period is used, + * instead of a custom <em>{@code Trigger}</em> implementation; this is because the, + * {@code task:} namespace {@code scheduled} cannot easily expose such support. This is, + * but one demonstration how the code-based approach allows for maximum configurability, + * through direct access to actual componentry.<p>, + *, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/SchedulingConfiguration.java, + * {@code @Configuration} class that registers a {@link, + * ScheduledAnnotationBeanPostProcessor} bean capable of processing Spring's @{@link, + * Scheduled} annotation., + * <p>This configuration class is automatically imported when using the @{@link, + * EnableScheduling} annotation.  See {@code @EnableScheduling} Javadoc for complete usage, + * details., +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/EnableScheduling.java, + *         taskRegistrar.setScheduler(taskScheduler());, + *                 myTask().work();, + *     public Executor taskScheduler() {, + *         return Executors.newScheduledThreadPool(42);, + *     public MyTask myTask() {, + * <p>For reference, the example above can be compared to the following Spring XML, + * configuration:, + * <pre class="code">, + * {@code, + * <beans>, + *     <task:annotation-config scheduler="taskScheduler"/>, + *     <task:scheduler id="taskScheduler" pool-size="42"/>, + *     <task:scheduled ref="myTask" method="work" fixed-rate="1000"/>, + *     <bean id="myTask" class="com.foo.MyAsyncBean"/>, + * </beans>, + * }</pre>, + * the examples are equivalent save that in XML a <em>fixed-rate</em> period is used, + * instead of a custom <em>{@code Trigger}</em> implementation; this is because the, + * {@code task:} namespace {@code scheduled} cannot easily expose such support. This is, + * but one demonstration how the code-based approach allows for maximum configurability, + * through direct access to actual componentry.<p>, + *, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/SchedulingConfiguration.java, + * {@code @Configuration} class that registers a {@link, + * ScheduledAnnotationBeanPostProcessor} bean capable of processing Spring's @{@link, + * Scheduled} annotation., + * <p>This configuration class is automatically imported when using the @{@link, + * EnableScheduling} annotation.  See {@code @EnableScheduling} Javadoc for complete usage, + * details., +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/SchedulingConfigurer.java, +/**, + * Interface to be implemented by @{@link org.springframework.context.annotation.Configuration}, + * classes annotated with @{@link EnableScheduling} that wish to register scheduled tasks, + * in a <em>programmatic</em> fashion as opposed to the <em>declarative</em> approach of, + * using the @{@link Scheduled} annotation. For example, this may be necessary when, + * implementing {@link org.springframework.scheduling.Trigger Trigger}-based tasks, which, + * are not supported by the {@code @Scheduled} annotation., + *, + * <p>See @{@link EnableScheduling} for detailed usage examples., + *, + * @author Chris Beams, + * @since 3.1, + * @see EnableScheduling, + * @see ScheduledTaskRegistrar, + */, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/EnableScheduling.java]