[+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +				DataBufferUtils::closeChannel), +				.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release);, +		Flux<DataBuffer> result = Flux.using(channelSupplier,, +, +		return result.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release);, +	 * Release the given data buffer, if it is a {@link PooledDataBuffer} and, +	 * has been {@linkplain PooledDataBuffer#isAllocated() allocated}., +		if (dataBuffer instanceof PooledDataBuffer) {, +			PooledDataBuffer pooledDataBuffer = (PooledDataBuffer) dataBuffer;, +			if (pooledDataBuffer.isAllocated()) {, +				return pooledDataBuffer.release();, +			}, +		}, +		return false;, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +				DataBufferUtils::closeChannel), +				.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release);, +		Flux<DataBuffer> result = Flux.using(channelSupplier,, +, +		return result.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release);, +	 * Release the given data buffer, if it is a {@link PooledDataBuffer} and, +	 * has been {@linkplain PooledDataBuffer#isAllocated() allocated}., +		if (dataBuffer instanceof PooledDataBuffer) {, +			PooledDataBuffer pooledDataBuffer = (PooledDataBuffer) dataBuffer;, +			if (pooledDataBuffer.isAllocated()) {, +				return pooledDataBuffer.release();, +			}, +		}, +		return false;, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBuffer.java, +	public boolean isAllocated() {, +		return this.byteBuf.refCnt() > 0;, +	}, +, +	@Override, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +				DataBufferUtils::closeChannel), +				.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release);, +		Flux<DataBuffer> result = Flux.using(channelSupplier,, +, +		return result.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release);, +	 * Release the given data buffer, if it is a {@link PooledDataBuffer} and, +	 * has been {@linkplain PooledDataBuffer#isAllocated() allocated}., +		if (dataBuffer instanceof PooledDataBuffer) {, +			PooledDataBuffer pooledDataBuffer = (PooledDataBuffer) dataBuffer;, +			if (pooledDataBuffer.isAllocated()) {, +				return pooledDataBuffer.release();, +			}, +		}, +		return false;, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBuffer.java, +	public boolean isAllocated() {, +		return this.byteBuf.refCnt() > 0;, +	}, +, +	@Override, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/PooledDataBuffer.java, + * Copyright 2002-2018 the original author or authors., +	 * Return {@code true} if this buffer is allocated; {@code false} if it has been deallocated., +	 * @since 5.1, +	 */, +	boolean isAllocated();, +, +	/**, +	 * Decrease the reference count for this buffer by one, and deallocate it, +	 * @return {@code true} if the buffer was deallocated; {@code false} otherwise., +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +				DataBufferUtils::closeChannel), +				.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release);, +		Flux<DataBuffer> result = Flux.using(channelSupplier,, +, +		return result.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release);, +	 * Release the given data buffer, if it is a {@link PooledDataBuffer} and, +	 * has been {@linkplain PooledDataBuffer#isAllocated() allocated}., +		if (dataBuffer instanceof PooledDataBuffer) {, +			PooledDataBuffer pooledDataBuffer = (PooledDataBuffer) dataBuffer;, +			if (pooledDataBuffer.isAllocated()) {, +				return pooledDataBuffer.release();, +			}, +		}, +		return false;, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBuffer.java, +	public boolean isAllocated() {, +		return this.byteBuf.refCnt() > 0;, +	}, +, +	@Override, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/PooledDataBuffer.java, + * Copyright 2002-2018 the original author or authors., +	 * Return {@code true} if this buffer is allocated; {@code false} if it has been deallocated., +	 * @since 5.1, +	 */, +	boolean isAllocated();, +, +	/**, +	 * Decrease the reference count for this buffer by one, and deallocate it, +	 * @return {@code true} if the buffer was deallocated; {@code false} otherwise., +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +import org.springframework.core.io.buffer.DataBufferUtils;]