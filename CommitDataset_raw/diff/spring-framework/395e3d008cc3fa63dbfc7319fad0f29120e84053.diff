[+++ b/src/docs/asciidoc/core/core-aop-api.adoc, +The previous chapter described the Spring's support for AOP with, +@AspectJ and schema-based aspect definitions. In this chapter, we discuss the lower-level, +the previous chapter. However, when you work with existing applications (or when you read books, +and articles), you may come across Spring 1.2-style examples. Spring 5 remains backwards, +compatible with Spring 1.2, and everything described in this chapter is fully supported, +This section describes how Spring handles the crucial pointcut concept., +Spring's pointcut model enables pointcut reuse independent of advice types. You can, +target different advice with the same pointcut., +target advices to particular classes and methods. The complete interface follows:, +====, +====, +matching parts and fine-grained composition operations (such as performing a "`union`", +classes. If the `matches()` method always returns true, all target classes are, +matched. The following listing shows the `ClassFilter` interface definition:, +====, +====, +The `MethodMatcher` interface is normally more important. The complete interface follows:, +====, +====, +The `matches(Method, Class)` method is used to test whether this pointcut ever, +matches a given method on a target class. This evaluation can be performed when an AOP, +proxy is created to avoid the need for a test on every method invocation. If the, +two-argument `matches` method returns `true` for a given method, and the `isRuntime()` method, +for the MethodMatcher returns `true`, the three-argument matches method is invoked on, +every method invocation. This lets a pointcut look at the arguments passed to the, +Most `MethodMatcher` implementations are static, meaning that their `isRuntime()` method returns `false`., +In this case, the three-argument `matches` method is never invoked., +TIP: If possible, try to make pointcuts static, allowing the AOP framework to cache the, +=== Operations on Pointcuts, +Spring supports operations (notably, union and intersection) on pointcuts., +Union means the methods that either pointcut matches., +Intersection means the methods that both pointcuts match., +Union is usually more useful., +You can compse pointcuts by using the static methods in the, +`org.springframework.aop.support.Pointcuts` class or by using the, +`ComposablePointcut` class in the same package. However, using AspectJ pointcut, +=== AspectJ Expression Pointcuts, +uses an AspectJ-supplied library to parse an AspectJ pointcut expression string., +See the <<aop,previous chapter>> for a discussion of supported AspectJ pointcut primitives., +=== Convenience Pointcut Implementations, +Spring provides several convenient pointcut implementations. You can use some of them directly., +Others are intended to be subclassed in application-specific pointcuts., +, +==== Static Pointcuts, +Static pointcuts are based on the method and the target class and cannot take into account the, +method's arguments. Static pointcuts suffice -- and are best -- for most usages., +Spring can evaluate a static pointcut only once, when a method is first, +invoked. After that, there is no need to evaluate the pointcut again with each method, +The rest of this section describes some of the static pointcut implementations that are included with Spring., +===== Regular Expression Pointcuts, +expression pointcut that uses the regular expression support in the JDK., +With the `JdkRegexpMethodPointcut` class, you can provide a list of pattern strings. If, +any of these is a match, the pointcut evaluates to `true`. (So, the result is, +The following example shows how to use `JdkRegexpMethodPointcut`:, +====, +====, +Spring provides a convenience class named `RegexpMethodPointcutAdvisor`, which lets us, +also reference an `Advice` (remember that an `Advice` can be an interceptor, before advice,, +throws advice, and others). Behind the scenes, Spring uses a `JdkRegexpMethodPointcut`., +pointcut and advice, as the following example shows:, +====, +====, +You can use `RegexpMethodPointcutAdvisor` with any `Advice` type., +, +, +===== Attribute-driven Pointcuts, +An important type of static pointcut is a metadata-driven pointcut. This uses the, +values of metadata attributes (typically, source-level metadata)., +, +method arguments as well as static information. This means that they must be, +evaluated with every method invocation and that the result cannot be cached, as arguments will, +===== Control Flow Pointcuts, +Spring control flow pointcuts are conceptually similar to AspectJ `cflow` pointcuts,, +in the `com.mycompany.web` package or by the `SomeCaller` class. Control flow pointcuts, +are specified by using the `org.springframework.aop.support.ControlFlowPointcut` class., +NOTE: Control flow pointcuts are significantly more expensive to evaluate at runtime than even, +other dynamic pointcuts. In Java 1.4, the cost is about five times that of other dynamic, +=== Pointcut Superclasses, +Because static pointcuts are most useful, you should probably subclass, +`StaticMethodMatcherPointcut`. This requires implementing only one, +abstract method (although you can override other methods to customize behavior). The, +following example shows how to subclass `StaticMethodMatcherPointcut`:, +====, +====, +=== Custom Pointcuts, +Because pointcuts in Spring AOP are Java classes rather than language features (as in, +AspectJ), you can declare custom pointcuts, whether static or dynamic. Custom, +pointcuts in Spring can be arbitrarily complex. However, we recommend using the AspectJ pointcut, +expression language, if you can., +NOTE: Later versions of Spring may offer support for "`semantic pointcuts`" as offered by JAC --, +for example, "`all methods that change instance variables in the target object.`", +Now we can examine how Spring AOP handles advice., +=== Advice Lifecycles, +objects or be unique to each advised object. This corresponds to per-class or, +per-instance advice., +Per-class advice is used most often. It is appropriate for generic advice, such as, +state. They merely act on the method and arguments., +Ypou can use a mix of shared and per-instance advice in the same AOP proxy., +=== Advice Types in Spring]