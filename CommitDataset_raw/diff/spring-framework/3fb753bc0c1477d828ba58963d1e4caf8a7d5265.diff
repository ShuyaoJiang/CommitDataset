[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/RedirectView.java, +import org.springframework.web.context.request.RequestAttributes;, +import org.springframework.web.servlet.HandlerMapping;, + * all primitive model attributes (or collections thereof), not used as URI, + * template variables, are exposed as HTTP query parameters, but this  , +		setExposePathVariables(false);, +		setExposePathVariables(false);, +		setExposePathVariables(false);, +		setExposePathVariables(false);, +		setExposePathVariables(false);, +		UriTemplate uriTemplate = createUriTemplate(targetUrl, enc);, +		if (uriTemplate.getVariableNames().size() > 0) {, +			Map<String, Object> vars = new HashMap<String, Object>();, +			vars.putAll(getCurrentUriVars(request));, +			vars.putAll(model);, +			targetUrl = new StringBuilder(uriTemplate.expand(vars).toString());, +			model = removeKeys(model, uriTemplate.getVariableNames());, +	/**, +	 * Returns the URI template variables extracted from the current request., +	 */, +	@SuppressWarnings("unchecked"), +	private Map<String, String> getCurrentUriVars(HttpServletRequest request) {, +		String name = HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE;, +		Map<String, String> map = (Map<String, String>) request.getAttribute(name);, +		return (map != null) ? map : new HashMap<String, String>();, +	}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/RedirectView.java, +import org.springframework.web.context.request.RequestAttributes;, +import org.springframework.web.servlet.HandlerMapping;, + * all primitive model attributes (or collections thereof), not used as URI, + * template variables, are exposed as HTTP query parameters, but this  , +		setExposePathVariables(false);, +		setExposePathVariables(false);, +		setExposePathVariables(false);, +		setExposePathVariables(false);, +		setExposePathVariables(false);, +		UriTemplate uriTemplate = createUriTemplate(targetUrl, enc);, +		if (uriTemplate.getVariableNames().size() > 0) {, +			Map<String, Object> vars = new HashMap<String, Object>();, +			vars.putAll(getCurrentUriVars(request));, +			vars.putAll(model);, +			targetUrl = new StringBuilder(uriTemplate.expand(vars).toString());, +			model = removeKeys(model, uriTemplate.getVariableNames());, +	/**, +	 * Returns the URI template variables extracted from the current request., +	 */, +	@SuppressWarnings("unchecked"), +	private Map<String, String> getCurrentUriVars(HttpServletRequest request) {, +		String name = HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE;, +		Map<String, String> map = (Map<String, String>) request.getAttribute(name);, +		return (map != null) ? map : new HashMap<String, String>();, +	}, +, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/view/RedirectViewUriTemplateTests.java, +import org.springframework.web.servlet.HandlerMapping;, +	public void currentRequestUriTemplateVars() throws Exception {, +		model.put("key1", "value1");, +		model.put("name", "value2");, +		model.put("key3", "value3");, +		Map<String, String> vars = new HashMap<String, String>();, +		vars.put("var1", "v1");, +		vars.put("name", "v2");, +		vars.put("var3", "v3");, +		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, vars);, +		RedirectView redirectView = new RedirectView(url + "/{key1}/{var1}/{name}");, +		assertEquals(url + "/value1/v1/value2?key3=value3", response.getRedirectedUrl());, +]