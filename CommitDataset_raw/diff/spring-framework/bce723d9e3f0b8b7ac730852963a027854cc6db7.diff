[+++ b/org.springframework.web.servlet/pom.xml, +	<!-- dependency>, +    	<groupId>org.apache.velocity</groupId>, +    	<artifactId>velocity</artifactId>, +    	<version>1.6.2</version>, +      	<optional>true</optional>, +	</dependency-->, +++ b/org.springframework.web.servlet/pom.xml, +	<!-- dependency>, +    	<groupId>org.apache.velocity</groupId>, +    	<artifactId>velocity</artifactId>, +    	<version>1.6.2</version>, +      	<optional>true</optional>, +	</dependency-->, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/velocity/VelocityView.java, + * @author Dave Syer, +			Throwable cause = ex.getWrappedThrowable();, +					cause==null ? ex : cause);, +++ b/org.springframework.web.servlet/pom.xml, +	<!-- dependency>, +    	<groupId>org.apache.velocity</groupId>, +    	<artifactId>velocity</artifactId>, +    	<version>1.6.2</version>, +      	<optional>true</optional>, +	</dependency-->, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/velocity/VelocityView.java, + * @author Dave Syer, +			Throwable cause = ex.getWrappedThrowable();, +					cause==null ? ex : cause);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/tags/form/SelectTagTests.java, + * @author Dave Syer, +				setValue(Country.getCountryWithIsoCode(text));, +		String output = getOutput();, +		System.err.println(output);, +	public void testWithListAndEditor() throws Exception {, +		this.tag.setPath("realCountry");, +		this.tag.setItems("${countries}");, +		this.tag.setItemValue("isoCode");, +		this.tag.setItemLabel("name");, +		BeanPropertyBindingResult bindingResult = new BeanPropertyBindingResult(getTestBean(), "testBean");, +		bindingResult.getPropertyAccessor().registerCustomEditor(Country.class, new PropertyEditorSupport() {, +			public void setAsText(String text) throws IllegalArgumentException {, +				setValue(Country.getCountryWithIsoCode(text));, +			}, +			public String getAsText() {, +				return ((Country) getValue()).getName();, +			}, +		});, +		getPageContext().getRequest().setAttribute(BindingResult.MODEL_KEY_PREFIX + "testBean", bindingResult);, +		this.tag.doStartTag();, +		String output = getOutput();, +		assertTrue(output.startsWith("<select "));, +		assertTrue(output.endsWith("</select>"));, +		assertTrue(output.contains("option value=\"AT\" selected=\"selected\">Austria"));, +	}, +, +	public void testNestedPathWithListAndEditorAndNullValue() throws Exception {, +		this.tag.setPath("bean.realCountry");, +		this.tag.setItems("${countries}");, +		this.tag.setItemValue("isoCode");, +		this.tag.setItemLabel("name");, +		this.tag.setMultiple("false");, +		TestBeanWrapper testBean = new TestBeanWrapper();, +		TestBeanWithRealCountry withCountry = (TestBeanWithRealCountry) getTestBean();, +		withCountry.setRealCountry(null);, +		testBean.setBean(withCountry);, +		BeanPropertyBindingResult bindingResult = new BeanPropertyBindingResult(testBean , "testBean");, +		bindingResult.getPropertyAccessor().registerCustomEditor(Country.class, new PropertyEditorSupport() {, +			public void setAsText(String text) throws IllegalArgumentException {, +				if (text==null || text.length()==0) {, +					setValue(null);, +					return;, +				}, +				setValue(Country.getCountryWithIsoCode(text));, +			}, +			public String getAsText() {, +				Country value = (Country) getValue();, +				if (value==null) {, +					return null;, +				}, +				return ((Country) value).getName();, +			}, +		});, +		getPageContext().getRequest().setAttribute(BindingResult.MODEL_KEY_PREFIX + "testBean", bindingResult);, +		this.tag.doStartTag();, +		String output = getOutput();, +		System.err.println(output);, +		assertTrue(output.startsWith("<select "));, +		assertTrue(output.endsWith("</select>"));, +		assertFalse(output.contains("selected=\"selected\""));, +	}, +, +	public void testNestedPathWithListAndEditor() throws Exception {, +		this.tag.setPath("bean.realCountry");, +		this.tag.setItems("${countries}");, +		this.tag.setItemValue("isoCode");, +		this.tag.setItemLabel("name");, +		TestBeanWrapper testBean = new TestBeanWrapper();, +		testBean.setBean(getTestBean());, +		BeanPropertyBindingResult bindingResult = new BeanPropertyBindingResult(testBean , "testBean");]