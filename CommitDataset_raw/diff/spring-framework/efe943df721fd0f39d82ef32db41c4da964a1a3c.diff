[+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, +			final ThrowableHolder throwableHolder = new ThrowableHolder();, +, +							throwableHolder.throwable = ex;, +							return null;, +				// Check result state: It might indicate a Throwable to rethrow., +				if (throwableHolder.throwable != null) {, +					throw throwableHolder.throwable;, +			catch (TransactionSystemException ex2) {, +				if (throwableHolder.throwable != null) {, +					logger.error("Application exception overridden by commit exception", throwableHolder.throwable);, +					ex2.initApplicationException(throwableHolder.throwable);, +				}, +				throw ex2;, +			}, +			catch (Throwable ex2) {, +				if (throwableHolder.throwable != null) {, +					logger.error("Application exception overridden by commit exception", throwableHolder.throwable);, +				}, +				throw ex2;, +			}, +				catch (RuntimeException | Error ex2) {, +				catch (RuntimeException | Error ex2) {, +	 * Internal holder class for a Throwable in a callback transaction model., +		@Nullable, +		public Throwable throwable;, +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, +			final ThrowableHolder throwableHolder = new ThrowableHolder();, +, +							throwableHolder.throwable = ex;, +							return null;, +				// Check result state: It might indicate a Throwable to rethrow., +				if (throwableHolder.throwable != null) {, +					throw throwableHolder.throwable;, +			catch (TransactionSystemException ex2) {, +				if (throwableHolder.throwable != null) {, +					logger.error("Application exception overridden by commit exception", throwableHolder.throwable);, +					ex2.initApplicationException(throwableHolder.throwable);, +				}, +				throw ex2;, +			}, +			catch (Throwable ex2) {, +				if (throwableHolder.throwable != null) {, +					logger.error("Application exception overridden by commit exception", throwableHolder.throwable);, +				}, +				throw ex2;, +			}, +				catch (RuntimeException | Error ex2) {, +				catch (RuntimeException | Error ex2) {, +	 * Internal holder class for a Throwable in a callback transaction model., +		@Nullable, +		public Throwable throwable;, +++ b/spring-tx/src/main/java/org/springframework/transaction/jta/WebSphereUowTransactionManager.java, +					pb == TransactionDefinition.PROPAGATION_REQUIRED ||, +					pb == TransactionDefinition.PROPAGATION_MANDATORY) {, +					pb == TransactionDefinition.PROPAGATION_NOT_SUPPORTED ||, +					pb == TransactionDefinition.PROPAGATION_NEVER) {, +		UOWActionAdapter<T> action = null;, +			action = new UOWActionAdapter<>(, +		catch (UOWException | UOWActionException ex) {, +			TransactionSystemException tse =, +					new TransactionSystemException("UOWManager transaction processing failed", ex);, +			Throwable appEx = action.getException();, +			if (appEx != null) {, +				logger.error("Application exception overridden by rollback exception", appEx);, +				tse.initApplicationException(appEx);, +			throw tse;, +				if (status.isDebug()) {, +					logger.debug("Rolling back on application exception from transaction callback", ex);, +				}, +						logger.debug("Transaction callback has explicitly requested rollback");, +		@Nullable, +		public Throwable getException() {, +			return this.exception;, +		}, +, +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, +			final ThrowableHolder throwableHolder = new ThrowableHolder();, +, +							throwableHolder.throwable = ex;, +							return null;, +				// Check result state: It might indicate a Throwable to rethrow., +				if (throwableHolder.throwable != null) {, +					throw throwableHolder.throwable;, +			catch (TransactionSystemException ex2) {, +				if (throwableHolder.throwable != null) {, +					logger.error("Application exception overridden by commit exception", throwableHolder.throwable);, +					ex2.initApplicationException(throwableHolder.throwable);, +				}, +				throw ex2;, +			}, +			catch (Throwable ex2) {, +				if (throwableHolder.throwable != null) {, +					logger.error("Application exception overridden by commit exception", throwableHolder.throwable);, +				}, +				throw ex2;, +			}, +				catch (RuntimeException | Error ex2) {, +				catch (RuntimeException | Error ex2) {, +	 * Internal holder class for a Throwable in a callback transaction model.]