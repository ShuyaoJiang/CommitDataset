[+++ b/spring-context/src/main/java/org/springframework/format/annotation/NumberFormat.java, + *, + * <p>Supports formatting by style or custom pattern string., +@Target({ElementType.METHOD, ElementType.FIELD, ElementType.PARAMETER, ElementType.ANNOTATION_TYPE}), +++ b/spring-context/src/main/java/org/springframework/format/annotation/NumberFormat.java, + *, + * <p>Supports formatting by style or custom pattern string., +@Target({ElementType.METHOD, ElementType.FIELD, ElementType.PARAMETER, ElementType.ANNOTATION_TYPE}), +++ b/spring-context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, + * Copyright 2002-2015 the original author or authors., +, +import org.springframework.format.annotation.NumberFormat;, + * @author Kazuki Shimizu, + * @author Sam Brannen, +	@SuppressWarnings("resource"), +	@SuppressWarnings("resource"), +		System.setProperty("myNumber", "99.99%");, +			assertEquals(Double.valueOf(0.9999), valueBean.number);, +			System.clearProperty("myNumber");, +	@SuppressWarnings("resource"), +	@SuppressWarnings("resource"), +		@MyNumberAnn, +		public Double number;, +	}, +	@Value("${myNumber}"), +	@NumberFormat(style = NumberFormat.Style.PERCENT), +	@Retention(RetentionPolicy.RUNTIME), +	public static @interface MyNumberAnn {, +	}, +++ b/spring-context/src/main/java/org/springframework/format/annotation/NumberFormat.java, + *, + * <p>Supports formatting by style or custom pattern string., +@Target({ElementType.METHOD, ElementType.FIELD, ElementType.PARAMETER, ElementType.ANNOTATION_TYPE}), +++ b/spring-context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, + * Copyright 2002-2015 the original author or authors., +, +import org.springframework.format.annotation.NumberFormat;, + * @author Kazuki Shimizu, + * @author Sam Brannen, +	@SuppressWarnings("resource"), +	@SuppressWarnings("resource"), +		System.setProperty("myNumber", "99.99%");, +			assertEquals(Double.valueOf(0.9999), valueBean.number);, +			System.clearProperty("myNumber");, +	@SuppressWarnings("resource"), +	@SuppressWarnings("resource"), +		@MyNumberAnn, +		public Double number;, +	}, +	@Value("${myNumber}"), +	@NumberFormat(style = NumberFormat.Style.PERCENT), +	@Retention(RetentionPolicy.RUNTIME), +	public static @interface MyNumberAnn {, +	}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java, + * Copyright 2002-2015 the original author or authors., +, +, +import org.joda.time.LocalDate;, +, +import org.springframework.format.annotation.NumberFormat;, +import com.fasterxml.jackson.databind.DeserializationFeature;, +import com.fasterxml.jackson.databind.MapperFeature;, +import com.fasterxml.jackson.databind.ObjectMapper;, +import com.fasterxml.jackson.dataformat.xml.XmlMapper;, +, +import static org.hamcrest.CoreMatchers.*;, + * @author Kazuki Shimizu, + * @author Sam Brannen, +		Method method = TestController.class.getMethod("testBind", Date.class, Double.class, TestBean.class, BindingResult.class);, +		request.addParameter("percent", "99.99%");, +		assertEquals(LocalDate.parse("2009-10-31").toDate(), handler.date);, +		assertEquals(Double.valueOf(0.9999),handler.percent);, +		assertThat(resolver, instanceOf(FreeMarkerViewResolver.class));, +		assertThat(resolver, instanceOf(VelocityViewResolver.class));, +		assertThat(resolver, instanceOf(GroovyMarkupViewResolver.class));, +	@NumberFormat(style = NumberFormat.Style.PERCENT), +	@Target({ElementType.PARAMETER}), +	@Retention(RetentionPolicy.RUNTIME), +	public @interface PercentNumber {, +	}, +, +		private Date date;, +		private Double percent;, +		public void testBind(@RequestParam @IsoDate Date date, @RequestParam(required = false) @PercentNumber Double percent, @MyValid TestBean bean, BindingResult result) {, +			this.date = date;, +			this.percent = percent;]