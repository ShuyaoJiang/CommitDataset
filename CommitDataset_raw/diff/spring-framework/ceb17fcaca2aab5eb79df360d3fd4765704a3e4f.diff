[+++ b/spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, + * Copyright 2002-2015 the original author or authors., + * Date sequence generator for a, + * <a href="http://www.manpagez.com/man/5/crontab/">Crontab pattern</a>,, +	private final BitSet months = new BitSet(12);, +, +	private final BitSet daysOfMonth = new BitSet(31);, +, +	private final BitSet daysOfWeek = new BitSet(7);, +, +	private final BitSet hours = new BitSet(24);, +, +	private final BitSet minutes = new BitSet(60);, +, +	private final BitSet seconds = new BitSet(60);, +, +	 * Return the cron pattern that this sequence generator has been built for., +	 */, +	String getExpression() {, +		return this.expression;, +	}, +, +, +	/**, +	 * Replace the values in the comma-separated list (case insensitive), +	 * with their index in the list., +	 * @return a new String with the values from the list replaced, +				if (delta <= 0) {, +					throw new IllegalArgumentException("Incrementer delta must be 1 or higher: '" +, +							field + "' in expression \"" + this.expression + "\"");, +				}, +	public boolean equals(Object other) {, +		if (this == other) {, +			return true;, +		}, +		if (!(other instanceof CronSequenceGenerator)) {, +		CronSequenceGenerator otherCron = (CronSequenceGenerator) other;, +		return (this.months.equals(otherCron.months) && this.daysOfMonth.equals(otherCron.daysOfMonth) &&, +				this.daysOfWeek.equals(otherCron.daysOfWeek) && this.hours.equals(otherCron.hours) &&, +				this.minutes.equals(otherCron.minutes) && this.seconds.equals(otherCron.seconds));, +		return (17 * this.months.hashCode() + 29 * this.daysOfMonth.hashCode() + 37 * this.daysOfWeek.hashCode() +, +				41 * this.hours.hashCode() + 53 * this.minutes.hashCode() + 61 * this.seconds.hashCode());, +		return (getClass().getSimpleName() + ": " + this.expression);, +++ b/spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, + * Copyright 2002-2015 the original author or authors., + * Date sequence generator for a, + * <a href="http://www.manpagez.com/man/5/crontab/">Crontab pattern</a>,, +	private final BitSet months = new BitSet(12);, +, +	private final BitSet daysOfMonth = new BitSet(31);, +, +	private final BitSet daysOfWeek = new BitSet(7);, +, +	private final BitSet hours = new BitSet(24);, +, +	private final BitSet minutes = new BitSet(60);, +, +	private final BitSet seconds = new BitSet(60);, +, +	 * Return the cron pattern that this sequence generator has been built for., +	 */, +	String getExpression() {, +		return this.expression;, +	}, +, +, +	/**, +	 * Replace the values in the comma-separated list (case insensitive), +	 * with their index in the list., +	 * @return a new String with the values from the list replaced, +				if (delta <= 0) {, +					throw new IllegalArgumentException("Incrementer delta must be 1 or higher: '" +, +							field + "' in expression \"" + this.expression + "\"");, +				}, +	public boolean equals(Object other) {, +		if (this == other) {, +			return true;, +		}, +		if (!(other instanceof CronSequenceGenerator)) {, +		CronSequenceGenerator otherCron = (CronSequenceGenerator) other;, +		return (this.months.equals(otherCron.months) && this.daysOfMonth.equals(otherCron.daysOfMonth) &&, +				this.daysOfWeek.equals(otherCron.daysOfWeek) && this.hours.equals(otherCron.hours) &&, +				this.minutes.equals(otherCron.minutes) && this.seconds.equals(otherCron.seconds));, +		return (17 * this.months.hashCode() + 29 * this.daysOfMonth.hashCode() + 37 * this.daysOfWeek.hashCode() +, +				41 * this.hours.hashCode() + 53 * this.minutes.hashCode() + 61 * this.seconds.hashCode());, +		return (getClass().getSimpleName() + ": " + this.expression);, +++ b/spring-context/src/main/java/org/springframework/scheduling/support/CronTrigger.java, + * Copyright 2002-2015 the original author or authors., +	 * @param expression a space-separated list of time fields, following cron, +	 * expression conventions, +	public CronTrigger(String expression) {, +		this.sequenceGenerator = new CronSequenceGenerator(expression);, +	 * Build a {@link CronTrigger} from the pattern provided in the given time zone., +	 * @param expression a space-separated list of time fields, following cron, +	 * expression conventions, +	public CronTrigger(String expression, TimeZone timeZone) {, +		this.sequenceGenerator = new CronSequenceGenerator(expression, timeZone);, +	}, +, +]