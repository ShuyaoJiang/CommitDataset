[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +, +import org.w3c.dom.Element;, +, +import org.springframework.beans.factory.config.RuntimeBeanReference;, +import org.springframework.beans.factory.support.RootBeanDefinition;, + *, + * @author Juergen Hoeller, +class AnnotationDrivenBeanDefinitionParser implements BeanDefinitionParser {, +, +	private static final boolean jsr303Present = ClassUtils.isPresent(, +			"javax.validation.Validator", AnnotationDrivenBeanDefinitionParser.class.getClassLoader());, +, +, +		RootBeanDefinition mappingDef = new RootBeanDefinition(DefaultAnnotationHandlerMapping.class);, +		mappingDef.setSource(source);, +		mappingDef.getPropertyValues().add("order", 0);, +		String mappingName = parserContext.getReaderContext().registerWithGeneratedName(mappingDef);, +, +		RootBeanDefinition bindingDef = new RootBeanDefinition(ConfigurableWebBindingInitializer.class);, +		bindingDef.setSource(source);, +		bindingDef.getPropertyValues().add("conversionService", getConversionService(element, source, parserContext));, +		bindingDef.getPropertyValues().add("validator", getValidator(element, source, parserContext));, +, +		RootBeanDefinition adapterDef = new RootBeanDefinition(AnnotationMethodHandlerAdapter.class);, +		adapterDef.setSource(source);, +		adapterDef.getPropertyValues().add("webBindingInitializer", bindingDef);, +		String adapterName = parserContext.getReaderContext().registerWithGeneratedName(adapterDef);, +		parserContext.registerComponent(new BeanComponentDefinition(mappingDef, mappingName));, +		parserContext.registerComponent(new BeanComponentDefinition(adapterDef, adapterName));, +	private Object getConversionService(Element element, Object source, ParserContext parserContext) {, +			return new RuntimeBeanReference(element.getAttribute("conversion-service"));, +		}, +		else {, +			RootBeanDefinition conversionDef = new RootBeanDefinition(FormattingConversionServiceFactoryBean.class);, +			conversionDef.setSource(source);, +			String conversionName = parserContext.getReaderContext().registerWithGeneratedName(conversionDef);, +			return new RuntimeBeanReference(conversionName);, +	private Object getValidator(Element element, Object source, ParserContext parserContext) {, +			return new RuntimeBeanReference(element.getAttribute("validator"));, +		else if (jsr303Present) {, +			RootBeanDefinition validatorDef = new RootBeanDefinition(LocalValidatorFactoryBean.class);, +			validatorDef.setSource(source);, +			String validatorName = parserContext.getReaderContext().registerWithGeneratedName(validatorDef);, +			return new RuntimeBeanReference(validatorName);, +		else {, +			return null;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +, +import org.w3c.dom.Element;, +, +import org.springframework.beans.factory.config.RuntimeBeanReference;, +import org.springframework.beans.factory.support.RootBeanDefinition;, + *, + * @author Juergen Hoeller, +class AnnotationDrivenBeanDefinitionParser implements BeanDefinitionParser {, +, +	private static final boolean jsr303Present = ClassUtils.isPresent(, +			"javax.validation.Validator", AnnotationDrivenBeanDefinitionParser.class.getClassLoader());, +, +, +		RootBeanDefinition mappingDef = new RootBeanDefinition(DefaultAnnotationHandlerMapping.class);, +		mappingDef.setSource(source);, +		mappingDef.getPropertyValues().add("order", 0);, +		String mappingName = parserContext.getReaderContext().registerWithGeneratedName(mappingDef);, +, +		RootBeanDefinition bindingDef = new RootBeanDefinition(ConfigurableWebBindingInitializer.class);, +		bindingDef.setSource(source);, +		bindingDef.getPropertyValues().add("conversionService", getConversionService(element, source, parserContext));, +		bindingDef.getPropertyValues().add("validator", getValidator(element, source, parserContext));, +, +		RootBeanDefinition adapterDef = new RootBeanDefinition(AnnotationMethodHandlerAdapter.class);, +		adapterDef.setSource(source);, +		adapterDef.getPropertyValues().add("webBindingInitializer", bindingDef);, +		String adapterName = parserContext.getReaderContext().registerWithGeneratedName(adapterDef);, +		parserContext.registerComponent(new BeanComponentDefinition(mappingDef, mappingName));, +		parserContext.registerComponent(new BeanComponentDefinition(adapterDef, adapterName));, +	private Object getConversionService(Element element, Object source, ParserContext parserContext) {, +			return new RuntimeBeanReference(element.getAttribute("conversion-service"));, +		}, +		else {, +			RootBeanDefinition conversionDef = new RootBeanDefinition(FormattingConversionServiceFactoryBean.class);, +			conversionDef.setSource(source);, +			String conversionName = parserContext.getReaderContext().registerWithGeneratedName(conversionDef);, +			return new RuntimeBeanReference(conversionName);, +	private Object getValidator(Element element, Object source, ParserContext parserContext) {, +			return new RuntimeBeanReference(element.getAttribute("validator"));, +		else if (jsr303Present) {, +			RootBeanDefinition validatorDef = new RootBeanDefinition(LocalValidatorFactoryBean.class);, +			validatorDef.setSource(source);, +			String validatorName = parserContext.getReaderContext().registerWithGeneratedName(validatorDef);, +			return new RuntimeBeanReference(validatorName);, +		else {, +			return null;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/MvcNamespaceHandler.java, + *, + * @since 3.0, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +]