[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionGenericConverter.java, +		TypeDescriptor targetElementType = targetType.getElementTypeDescriptor();, +		Object array = Array.newInstance(targetType.getElementType(), 1);, +		if (sourceType.isAssignableTo(targetElementType)) {, +			Array.set(array, 0, source);			, +		} else {, +			GenericConverter converter = conversionService.getConverter(sourceType, targetElementType);, +			Array.set(array, 0, converter.convert(source, sourceType, targetElementType));, +		}, +		return array;, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionGenericConverter.java, +		TypeDescriptor targetElementType = targetType.getElementTypeDescriptor();, +		Object array = Array.newInstance(targetType.getElementType(), 1);, +		if (sourceType.isAssignableTo(targetElementType)) {, +			Array.set(array, 0, source);			, +		} else {, +			GenericConverter converter = conversionService.getConverter(sourceType, targetElementType);, +			Array.set(array, 0, converter.convert(source, sourceType, targetElementType));, +		}, +		return array;, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/GenericConversionServiceTests.java, +	public void convertObjectToArray() {, +		String[] result = converter.convert("test", String[].class);, +		assertEquals(1, result.length);, +		assertEquals("test", result[0]);, +	}, +, +	@Test, +	public void convertObjectToArrayWithElementConversion() {, +		converter.addConverterFactory(new StringToNumberConverterFactory());, +		Integer[] result = converter.convert("1", Integer[].class);, +		assertEquals(1, result.length);, +		assertEquals(new Integer(1), result[0]);]