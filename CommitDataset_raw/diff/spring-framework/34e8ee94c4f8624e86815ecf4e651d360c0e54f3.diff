[+++ b/spring-test/src/main/java/org/springframework/test/context/junit4/AbstractTransactionalJUnit4SpringContextTests.java, +	 * <p>This method also instantiates the {@link #jdbcTemplate} instance variable., +	 * Convenience method for counting the rows in the given table., +	 * @see JdbcTestUtils#countRowsInTable, +	 * Convenience method for counting the rows in the given table, using the, +	 * provided {@code WHERE} clause., +	 * @see JdbcTestUtils#countRowsInTableWhere, +	 * Convenience method for deleting all rows from the specified tables., +	 * <p>Use with caution outside of a transaction!, +	 * @see JdbcTestUtils#deleteFromTables, +	 * Convenience method for deleting all rows from the given table, using the, +	 * provided {@code WHERE} clause., +	 * <p>Use with caution outside of a transaction!, +	 * <p>See the Javadoc for {@link JdbcTestUtils#deleteFromTableWhere} for details., +	 * @param tableName the name of the table to delete rows from, +	 * @param whereClause the {@code WHERE} clause to append to the query, +	 * @param args arguments to bind to the query (leaving it to the {@code, +	 * PreparedStatement} to guess the corresponding SQL type); may also contain, +	 * {@link org.springframework.jdbc.core.SqlParameterValue SqlParameterValue}, +	 * objects which indicate not only the argument value but also the SQL type, +	 * and optionally the scale., +	 * @return the number of rows deleted from the table, +	 * @since 4.0, +	 * @see JdbcTestUtils#deleteFromTableWhere, +	 */, +	protected int deleteFromTableWhere(String tableName, String whereClause, Object... args) {, +		return JdbcTestUtils.deleteFromTableWhere(jdbcTemplate, tableName, whereClause, args);, +	}, +, +	/**, +	 * Convenience method for dropping all of the specified tables., +	 * <p>Use with caution outside of a transaction!, +	 * @see JdbcTestUtils#dropTables, +	 * Execute the given SQL script., +	 * <p>Use with caution outside of a transaction!, +	 * @see JdbcTestUtils#executeSqlScript(JdbcTemplate, EncodedResource, boolean), +	 * @see #setSqlScriptEncoding, +		JdbcTestUtils.executeSqlScript(this.jdbcTemplate, new EncodedResource(resource, this.sqlScriptEncoding),, +			continueOnError);, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/AbstractTransactionalJUnit4SpringContextTests.java, +	 * <p>This method also instantiates the {@link #jdbcTemplate} instance variable., +	 * Convenience method for counting the rows in the given table., +	 * @see JdbcTestUtils#countRowsInTable, +	 * Convenience method for counting the rows in the given table, using the, +	 * provided {@code WHERE} clause., +	 * @see JdbcTestUtils#countRowsInTableWhere, +	 * Convenience method for deleting all rows from the specified tables., +	 * <p>Use with caution outside of a transaction!, +	 * @see JdbcTestUtils#deleteFromTables, +	 * Convenience method for deleting all rows from the given table, using the, +	 * provided {@code WHERE} clause., +	 * <p>Use with caution outside of a transaction!, +	 * <p>See the Javadoc for {@link JdbcTestUtils#deleteFromTableWhere} for details., +	 * @param tableName the name of the table to delete rows from, +	 * @param whereClause the {@code WHERE} clause to append to the query, +	 * @param args arguments to bind to the query (leaving it to the {@code, +	 * PreparedStatement} to guess the corresponding SQL type); may also contain, +	 * {@link org.springframework.jdbc.core.SqlParameterValue SqlParameterValue}, +	 * objects which indicate not only the argument value but also the SQL type, +	 * and optionally the scale., +	 * @return the number of rows deleted from the table, +	 * @since 4.0, +	 * @see JdbcTestUtils#deleteFromTableWhere, +	 */, +	protected int deleteFromTableWhere(String tableName, String whereClause, Object... args) {, +		return JdbcTestUtils.deleteFromTableWhere(jdbcTemplate, tableName, whereClause, args);, +	}, +, +	/**, +	 * Convenience method for dropping all of the specified tables., +	 * <p>Use with caution outside of a transaction!, +	 * @see JdbcTestUtils#dropTables, +	 * Execute the given SQL script., +	 * <p>Use with caution outside of a transaction!, +	 * @see JdbcTestUtils#executeSqlScript(JdbcTemplate, EncodedResource, boolean), +	 * @see #setSqlScriptEncoding, +		JdbcTestUtils.executeSqlScript(this.jdbcTemplate, new EncodedResource(resource, this.sqlScriptEncoding),, +			continueOnError);, +++ b/spring-test/src/main/java/org/springframework/test/context/testng/AbstractTransactionalTestNGSpringContextTests.java, +	 * <p>This method also instantiates the {@link #jdbcTemplate} instance variable., +	 * Convenience method for counting the rows in the given table., +	 * @see JdbcTestUtils#countRowsInTable, +	 * Convenience method for counting the rows in the given table, using the, +	 * provided {@code WHERE} clause., +	 * @see JdbcTestUtils#countRowsInTableWhere, +	 * Convenience method for deleting all rows from the specified tables., +	 * <p>Use with caution outside of a transaction!, +	 * @see JdbcTestUtils#deleteFromTables, +	 * Convenience method for deleting all rows from the given table, using the, +	 * provided {@code WHERE} clause., +	 * <p>Use with caution outside of a transaction!, +	 * <p>See the Javadoc for {@link JdbcTestUtils#deleteFromTableWhere} for details., +	 * @param tableName the name of the table to delete rows from, +	 * @param whereClause the {@code WHERE} clause to append to the query, +	 * @param args arguments to bind to the query (leaving it to the {@code, +	 * PreparedStatement} to guess the corresponding SQL type); may also contain, +	 * {@link org.springframework.jdbc.core.SqlParameterValue SqlParameterValue}, +	 * objects which indicate not only the argument value but also the SQL type, +	 * and optionally the scale., +	 * @return the number of rows deleted from the table]