[+++ b/spring-web/src/main/java/org/springframework/http/ReadOnlyHttpHeaders.java, + * Copyright 2002-2019 the original author or authors., +	private List<MediaType> cachedAccept;, +, +, +++ b/spring-web/src/main/java/org/springframework/http/ReadOnlyHttpHeaders.java, + * Copyright 2002-2019 the original author or authors., +	private List<MediaType> cachedAccept;, +, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/ConsumesRequestCondition.java, + * Copyright 2002-2019 the original author or authors., +	private static final ConsumesRequestCondition EMPTY_CONDITION = new ConsumesRequestCondition();, +			return EMPTY_CONDITION;, +++ b/spring-web/src/main/java/org/springframework/http/ReadOnlyHttpHeaders.java, + * Copyright 2002-2019 the original author or authors., +	private List<MediaType> cachedAccept;, +, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/ConsumesRequestCondition.java, + * Copyright 2002-2019 the original author or authors., +	private static final ConsumesRequestCondition EMPTY_CONDITION = new ConsumesRequestCondition();, +			return EMPTY_CONDITION;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/ProducesRequestCondition.java, +		if (isEmpty() || CorsUtils.isPreFlightRequest(exchange.getRequest())) {, +			return EMPTY_CONDITION;, +++ b/spring-web/src/main/java/org/springframework/http/ReadOnlyHttpHeaders.java, + * Copyright 2002-2019 the original author or authors., +	private List<MediaType> cachedAccept;, +, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/ConsumesRequestCondition.java, + * Copyright 2002-2019 the original author or authors., +	private static final ConsumesRequestCondition EMPTY_CONDITION = new ConsumesRequestCondition();, +			return EMPTY_CONDITION;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/ProducesRequestCondition.java, +		if (isEmpty() || CorsUtils.isPreFlightRequest(exchange.getRequest())) {, +			return EMPTY_CONDITION;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfo.java, + * Copyright 2002-2019 the original author or authors., +		// Match "Content-Type" and "Accept" (parsed ones and cached) before patterns, +		PatternsRequestCondition patterns = this.patternsCondition.getMatchingCondition(exchange);, +		if (patterns == null) {, +			return null;, +		}, +++ b/spring-web/src/main/java/org/springframework/http/ReadOnlyHttpHeaders.java, + * Copyright 2002-2019 the original author or authors., +	private List<MediaType> cachedAccept;, +, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/ConsumesRequestCondition.java, + * Copyright 2002-2019 the original author or authors., +	private static final ConsumesRequestCondition EMPTY_CONDITION = new ConsumesRequestCondition();, +			return EMPTY_CONDITION;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/ProducesRequestCondition.java, +		if (isEmpty() || CorsUtils.isPreFlightRequest(exchange.getRequest())) {, +			return EMPTY_CONDITION;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfo.java, + * Copyright 2002-2019 the original author or authors., +		// Match "Content-Type" and "Accept" (parsed ones and cached) before patterns, +		PatternsRequestCondition patterns = this.patternsCondition.getMatchingCondition(exchange);, +		if (patterns == null) {, +			return null;, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.java, + * Copyright 2002-2019 the original author or authors., +	private static final ConsumesRequestCondition EMPTY_CONDITION = new ConsumesRequestCondition();, +			return EMPTY_CONDITION;, +++ b/spring-web/src/main/java/org/springframework/http/ReadOnlyHttpHeaders.java, + * Copyright 2002-2019 the original author or authors., +	private List<MediaType> cachedAccept;, +, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/ConsumesRequestCondition.java, + * Copyright 2002-2019 the original author or authors., +	private static final ConsumesRequestCondition EMPTY_CONDITION = new ConsumesRequestCondition();, +			return EMPTY_CONDITION;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/ProducesRequestCondition.java, +		if (isEmpty() || CorsUtils.isPreFlightRequest(exchange.getRequest())) {, +			return EMPTY_CONDITION;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfo.java, + * Copyright 2002-2019 the original author or authors., +		// Match "Content-Type" and "Accept" (parsed ones and cached) before patterns, +		PatternsRequestCondition patterns = this.patternsCondition.getMatchingCondition(exchange);, +		if (patterns == null) {, +			return null;, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.java, + * Copyright 2002-2019 the original author or authors., +	private static final ConsumesRequestCondition EMPTY_CONDITION = new ConsumesRequestCondition();, +			return EMPTY_CONDITION;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ProducesRequestCondition.java, +		if (isEmpty() || CorsUtils.isPreFlightRequest(request)) {, +			return EMPTY_CONDITION;, +++ b/spring-web/src/main/java/org/springframework/http/ReadOnlyHttpHeaders.java, + * Copyright 2002-2019 the original author or authors., +	private List<MediaType> cachedAccept;, +, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/ConsumesRequestCondition.java]