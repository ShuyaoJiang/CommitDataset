[+++ b/spring-core-coroutines/src/main/kotlin/org/springframework/core/CoroutinesUtils.kt, +import kotlinx.coroutines.Dispatchers, +internal fun <T: Any> deferredToMono(source: Deferred<T>) =, +		GlobalScope.mono(Dispatchers.Unconfined) { source.await() }, +internal fun <T: Any> monoToDeferred(source: Mono<T>) =, +		GlobalScope.async(Dispatchers.Unconfined) { source.awaitFirstOrNull() }, +		GlobalScope.mono(Dispatchers.Unconfined) {, +			function.callSuspend(bean, *args.sliceArray(0..(args.size-2))), +++ b/spring-core-coroutines/src/main/kotlin/org/springframework/core/CoroutinesUtils.kt, +import kotlinx.coroutines.Dispatchers, +internal fun <T: Any> deferredToMono(source: Deferred<T>) =, +		GlobalScope.mono(Dispatchers.Unconfined) { source.await() }, +internal fun <T: Any> monoToDeferred(source: Mono<T>) =, +		GlobalScope.async(Dispatchers.Unconfined) { source.awaitFirstOrNull() }, +		GlobalScope.mono(Dispatchers.Unconfined) {, +			function.callSuspend(bean, *args.sliceArray(0..(args.size-2))), +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/client/WebClientExtensions.kt, +import kotlinx.coroutines.Dispatchers, +		= body(GlobalScope.mono(Dispatchers.Unconfined) { supplier.invoke() }), +++ b/spring-core-coroutines/src/main/kotlin/org/springframework/core/CoroutinesUtils.kt, +import kotlinx.coroutines.Dispatchers, +internal fun <T: Any> deferredToMono(source: Deferred<T>) =, +		GlobalScope.mono(Dispatchers.Unconfined) { source.await() }, +internal fun <T: Any> monoToDeferred(source: Mono<T>) =, +		GlobalScope.async(Dispatchers.Unconfined) { source.awaitFirstOrNull() }, +		GlobalScope.mono(Dispatchers.Unconfined) {, +			function.callSuspend(bean, *args.sliceArray(0..(args.size-2))), +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/client/WebClientExtensions.kt, +import kotlinx.coroutines.Dispatchers, +		= body(GlobalScope.mono(Dispatchers.Unconfined) { supplier.invoke() }), +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/CoRouterFunctionDsl.kt, +import kotlinx.coroutines.Dispatchers, +            GlobalScope.mono(Dispatchers.Unconfined) {, +        GlobalScope.mono(Dispatchers.Unconfined) {, +++ b/spring-core-coroutines/src/main/kotlin/org/springframework/core/CoroutinesUtils.kt, +import kotlinx.coroutines.Dispatchers, +internal fun <T: Any> deferredToMono(source: Deferred<T>) =, +		GlobalScope.mono(Dispatchers.Unconfined) { source.await() }, +internal fun <T: Any> monoToDeferred(source: Mono<T>) =, +		GlobalScope.async(Dispatchers.Unconfined) { source.awaitFirstOrNull() }, +		GlobalScope.mono(Dispatchers.Unconfined) {, +			function.callSuspend(bean, *args.sliceArray(0..(args.size-2))), +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/client/WebClientExtensions.kt, +import kotlinx.coroutines.Dispatchers, +		= body(GlobalScope.mono(Dispatchers.Unconfined) { supplier.invoke() }), +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/CoRouterFunctionDsl.kt, +import kotlinx.coroutines.Dispatchers, +            GlobalScope.mono(Dispatchers.Unconfined) {, +        GlobalScope.mono(Dispatchers.Unconfined) {, +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/server/ServerWebExchangeExtensions.kt, +import kotlinx.coroutines.Dispatchers, +        = principal(GlobalScope.mono(Dispatchers.Unconfined) { supplier.invoke() })]