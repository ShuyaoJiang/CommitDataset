[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/DefaultHandshakeHandler.java, +			WebSocketHandler wsHandler, Map<String, Object> attributes) throws HandshakeFailureException {, +		try {, +		}, +		catch (IOException ex) {, +			throw new HandshakeFailureException(, +					"Response update failed during upgrade to WebSocket, uri=" + request.getURI(), ex);, +		String subProtocol = selectProtocol(request.getHeaders().getSecWebSocketProtocol());, +, +		if (logger.isDebugEnabled()) {, +			logger.debug("Upgrading request, sub-protocol=" + subProtocol);, +		}, +, +		this.requestUpgradeStrategy.upgrade(request, response, subProtocol, wsHandler, attributes);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/DefaultHandshakeHandler.java, +			WebSocketHandler wsHandler, Map<String, Object> attributes) throws HandshakeFailureException {, +		try {, +		}, +		catch (IOException ex) {, +			throw new HandshakeFailureException(, +					"Response update failed during upgrade to WebSocket, uri=" + request.getURI(), ex);, +		String subProtocol = selectProtocol(request.getHeaders().getSecWebSocketProtocol());, +, +		if (logger.isDebugEnabled()) {, +			logger.debug("Upgrading request, sub-protocol=" + subProtocol);, +		}, +, +		this.requestUpgradeStrategy.upgrade(request, response, subProtocol, wsHandler, attributes);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/HandshakeFailureException.java, +, +	/**, +	 * Constructor with message and root cause., +	 */, +	public HandshakeFailureException(String message, Throwable cause) {, +		super(message, cause);, +	/**, +	 * Constructor without a message., +	 */, +	public HandshakeFailureException(String message) {, +		super(message);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/DefaultHandshakeHandler.java, +			WebSocketHandler wsHandler, Map<String, Object> attributes) throws HandshakeFailureException {, +		try {, +		}, +		catch (IOException ex) {, +			throw new HandshakeFailureException(, +					"Response update failed during upgrade to WebSocket, uri=" + request.getURI(), ex);, +		String subProtocol = selectProtocol(request.getHeaders().getSecWebSocketProtocol());, +, +		if (logger.isDebugEnabled()) {, +			logger.debug("Upgrading request, sub-protocol=" + subProtocol);, +		}, +, +		this.requestUpgradeStrategy.upgrade(request, response, subProtocol, wsHandler, attributes);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/HandshakeFailureException.java, +, +	/**, +	 * Constructor with message and root cause., +	 */, +	public HandshakeFailureException(String message, Throwable cause) {, +		super(message, cause);, +	/**, +	 * Constructor without a message., +	 */, +	public HandshakeFailureException(String message) {, +		super(message);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/HandshakeHandler.java, +, +	 *         opposed to a failure to successfully negotiate the handshake., +			Map<String, Object> attributes) throws HandshakeFailureException;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/DefaultHandshakeHandler.java, +			WebSocketHandler wsHandler, Map<String, Object> attributes) throws HandshakeFailureException {, +		try {, +		}, +		catch (IOException ex) {, +			throw new HandshakeFailureException(, +					"Response update failed during upgrade to WebSocket, uri=" + request.getURI(), ex);, +		String subProtocol = selectProtocol(request.getHeaders().getSecWebSocketProtocol());, +, +		if (logger.isDebugEnabled()) {, +			logger.debug("Upgrading request, sub-protocol=" + subProtocol);, +		}, +, +		this.requestUpgradeStrategy.upgrade(request, response, subProtocol, wsHandler, attributes);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/HandshakeFailureException.java, +, +	/**, +	 * Constructor with message and root cause., +	 */, +	public HandshakeFailureException(String message, Throwable cause) {, +		super(message, cause);, +	/**, +	 * Constructor without a message., +	 */, +	public HandshakeFailureException(String message) {, +		super(message);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/HandshakeHandler.java, +, +	 *         opposed to a failure to successfully negotiate the handshake., +			Map<String, Object> attributes) throws HandshakeFailureException;]