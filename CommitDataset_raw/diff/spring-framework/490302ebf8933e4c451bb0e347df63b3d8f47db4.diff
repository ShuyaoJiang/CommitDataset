[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +import java.util.EnumSet;, +	 * Return a {@code RequestPredicate} that matches if the request's HTTP method is equal to the, +	 * given method, +	 * @param httpMethod the HTTP method to match against, +	 * Return a {@code RequestPredicate} that matches if the request's HTTP method is equal to one, +	 * the of the given methods., +	 * @param httpMethods the HTTP methods to match against, +	 * @return a predicate that tests against the given HTTP methods, +	 * @since 5.1, +	 */, +	public static RequestPredicate methods(HttpMethod... httpMethods) {, +		return new HttpMethodPredicate(httpMethods);, +	}, +, +	/**, +		private final Set<HttpMethod> httpMethods;, +			this.httpMethods = EnumSet.of(httpMethod);, +		}, +, +		public HttpMethodPredicate(HttpMethod... httpMethods) {, +			Assert.notEmpty(httpMethods, "HttpMethods must not be empty");, +, +			this.httpMethods = EnumSet.copyOf(Arrays.asList(httpMethods));, +			boolean match = this.httpMethods.contains(request.method());, +			traceMatch("Method", this.httpMethods, request.method(), match);, +			if (this.httpMethods.size() == 1) {, +				return this.httpMethods.iterator().next().toString();, +			}, +			else {, +				return this.httpMethods.toString();, +			}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +import java.util.EnumSet;, +	 * Return a {@code RequestPredicate} that matches if the request's HTTP method is equal to the, +	 * given method, +	 * @param httpMethod the HTTP method to match against, +	 * Return a {@code RequestPredicate} that matches if the request's HTTP method is equal to one, +	 * the of the given methods., +	 * @param httpMethods the HTTP methods to match against, +	 * @return a predicate that tests against the given HTTP methods, +	 * @since 5.1, +	 */, +	public static RequestPredicate methods(HttpMethod... httpMethods) {, +		return new HttpMethodPredicate(httpMethods);, +	}, +, +	/**, +		private final Set<HttpMethod> httpMethods;, +			this.httpMethods = EnumSet.of(httpMethod);, +		}, +, +		public HttpMethodPredicate(HttpMethod... httpMethods) {, +			Assert.notEmpty(httpMethods, "HttpMethods must not be empty");, +, +			this.httpMethods = EnumSet.copyOf(Arrays.asList(httpMethods));, +			boolean match = this.httpMethods.contains(request.method());, +			traceMatch("Method", this.httpMethods, request.method(), match);, +			if (this.httpMethods.size() == 1) {, +				return this.httpMethods.iterator().next().toString();, +			}, +			else {, +				return this.httpMethods.toString();, +			}, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/RequestPredicatesTests.java, + * Copyright 2002-2018 the original author or authors., +		RequestPredicate predicate = RequestPredicates.methods(HttpMethod.GET, HttpMethod.HEAD);, +		MockServerRequest request = MockServerRequest.builder().method(HttpMethod.GET).build();, +		assertTrue(predicate.test(request));, +, +		request = MockServerRequest.builder().method(HttpMethod.HEAD).build();, +		assertTrue(predicate.test(request));, +, +		request = MockServerRequest.builder().method(HttpMethod.POST).build();, +		assertFalse(predicate.test(request));, +	}, +, +	@Test, +	public void allMethods() {]