[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +			catch (IllegalArgumentException | FileNotFoundException ex) {, +				// Placeholders not resolvable or resource not found when trying to open it, +				if (ignoreResourceNotFound) {, +					if (logger.isInfoEnabled()) {, +						logger.info("Properties location [" + location + "] not resolvable: " + ex.getMessage());, +				else {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +			catch (IllegalArgumentException | FileNotFoundException ex) {, +				// Placeholders not resolvable or resource not found when trying to open it, +				if (ignoreResourceNotFound) {, +					if (logger.isInfoEnabled()) {, +						logger.info("Properties location [" + location + "] not resolvable: " + ex.getMessage());, +				else {, +++ b/spring-core/src/main/java/org/springframework/core/io/support/PropertiesLoaderSupport.java, + * Copyright 2002-2017 the original author or authors., +import java.io.FileNotFoundException;, +				if (logger.isDebugEnabled()) {, +					logger.debug("Loading properties file from " + location);, +				catch (FileNotFoundException ex) {, +						if (logger.isInfoEnabled()) {, +							logger.info("Properties resource not found: " + ex.getMessage());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +			catch (IllegalArgumentException | FileNotFoundException ex) {, +				// Placeholders not resolvable or resource not found when trying to open it, +				if (ignoreResourceNotFound) {, +					if (logger.isInfoEnabled()) {, +						logger.info("Properties location [" + location + "] not resolvable: " + ex.getMessage());, +				else {, +++ b/spring-core/src/main/java/org/springframework/core/io/support/PropertiesLoaderSupport.java, + * Copyright 2002-2017 the original author or authors., +import java.io.FileNotFoundException;, +				if (logger.isDebugEnabled()) {, +					logger.debug("Loading properties file from " + location);, +				catch (FileNotFoundException ex) {, +						if (logger.isInfoEnabled()) {, +							logger.info("Properties resource not found: " + ex.getMessage());, +++ b/spring-core/src/main/java/org/springframework/util/PropertyPlaceholderHelper.java, + * Copyright 2002-2017 the original author or authors., +			String value, PlaceholderResolver placeholderResolver, Set<String> visitedPlaceholders) {, +		StringBuilder result = new StringBuilder(value);, +		int startIndex = value.indexOf(this.placeholderPrefix);, +							placeholder + "'" + " in value \"" + value + "\"");, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +			catch (IllegalArgumentException | FileNotFoundException ex) {, +				// Placeholders not resolvable or resource not found when trying to open it, +				if (ignoreResourceNotFound) {, +					if (logger.isInfoEnabled()) {, +						logger.info("Properties location [" + location + "] not resolvable: " + ex.getMessage());, +				else {, +++ b/spring-core/src/main/java/org/springframework/core/io/support/PropertiesLoaderSupport.java, + * Copyright 2002-2017 the original author or authors., +import java.io.FileNotFoundException;, +				if (logger.isDebugEnabled()) {, +					logger.debug("Loading properties file from " + location);, +				catch (FileNotFoundException ex) {, +						if (logger.isInfoEnabled()) {, +							logger.info("Properties resource not found: " + ex.getMessage());, +++ b/spring-core/src/main/java/org/springframework/util/PropertyPlaceholderHelper.java, + * Copyright 2002-2017 the original author or authors., +			String value, PlaceholderResolver placeholderResolver, Set<String> visitedPlaceholders) {, +		StringBuilder result = new StringBuilder(value);, +		int startIndex = value.indexOf(this.placeholderPrefix);, +							placeholder + "'" + " in value \"" + value + "\"");, +++ b/spring-core/src/test/java/org/springframework/core/env/PropertySourcesPropertyResolverTests.java, + * Copyright 2002-2017 the original author or authors., +					"Could not resolve placeholder 'bogus' in value \"${p1}:${p2}:${bogus}\""));, +					"Could not resolve placeholder 'bogus' in value \"${p1}:${p2}:${bogus}\""));, +					"Could not resolve placeholder 'bogus' in value \"${p1}:${p2}:${bogus}\""));]