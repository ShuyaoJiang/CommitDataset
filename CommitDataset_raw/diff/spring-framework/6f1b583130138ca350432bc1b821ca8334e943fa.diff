[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, +	 * Reflective {@link InvocationHandler} for lazy access to the current target object., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, +	 * Reflective {@link InvocationHandler} for lazy access to the current target object., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, + * Copyright 2002-2019 the original author or authors., +			String beanName, RootBeanDefinition mbd, Constructor<?> constructorToUse, Object[] argsToUse) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, +	 * Reflective {@link InvocationHandler} for lazy access to the current target object., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, + * Copyright 2002-2019 the original author or authors., +			String beanName, RootBeanDefinition mbd, Constructor<?> constructorToUse, Object[] argsToUse) {, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/AutowireUtilsTests.java, + * Copyright 2002-2019 the original author or authors., + * Unit tests for {@link AutowireUtils}., + *, +				AutowireUtils.resolveReturnTypeForFactoryMethod(notParameterized, new Object[0], getClass().getClassLoader()));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, +	 * Reflective {@link InvocationHandler} for lazy access to the current target object., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, + * Copyright 2002-2019 the original author or authors., +			String beanName, RootBeanDefinition mbd, Constructor<?> constructorToUse, Object[] argsToUse) {, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/AutowireUtilsTests.java, + * Copyright 2002-2019 the original author or authors., + * Unit tests for {@link AutowireUtils}., + *, +				AutowireUtils.resolveReturnTypeForFactoryMethod(notParameterized, new Object[0], getClass().getClassLoader()));, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java, + * Copyright 2002-2019 the original author or authors., +	protected final Log logger = HttpLogging.forLogName(getClass());, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, +	 * Reflective {@link InvocationHandler} for lazy access to the current target object., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, + * Copyright 2002-2019 the original author or authors., +			String beanName, RootBeanDefinition mbd, Constructor<?> constructorToUse, Object[] argsToUse) {, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/AutowireUtilsTests.java, + * Copyright 2002-2019 the original author or authors., + * Unit tests for {@link AutowireUtils}., + *, +				AutowireUtils.resolveReturnTypeForFactoryMethod(notParameterized, new Object[0], getClass().getClassLoader()));, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java, + * Copyright 2002-2019 the original author or authors., +	protected final Log logger = HttpLogging.forLogName(getClass());, +, +++ b/spring-web/src/main/java/org/springframework/web/util/HtmlCharacterEntityDecoder.java, + * Copyright 2002-2019 the original author or authors., +				this.decodedMessage.append(this.originalMessage, this.currentPosition, skipUntilIndex);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, +	 * Reflective {@link InvocationHandler} for lazy access to the current target object., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, + * Copyright 2002-2019 the original author or authors., +			String beanName, RootBeanDefinition mbd, Constructor<?> constructorToUse, Object[] argsToUse) {, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/AutowireUtilsTests.java, + * Copyright 2002-2019 the original author or authors., + * Unit tests for {@link AutowireUtils}., + *, +				AutowireUtils.resolveReturnTypeForFactoryMethod(notParameterized, new Object[0], getClass().getClassLoader()));, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java, + * Copyright 2002-2019 the original author or authors., +	protected final Log logger = HttpLogging.forLogName(getClass());, +, +++ b/spring-web/src/main/java/org/springframework/web/util/HtmlCharacterEntityDecoder.java, + * Copyright 2002-2019 the original author or authors., +				this.decodedMessage.append(this.originalMessage, this.currentPosition, skipUntilIndex);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandler.java, + * Copyright 2002-2019 the original author or authors., +	 * Customize the response for AsyncRequestTimeoutException., +	 * A single place to customize the response body of all exception types., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, +	 * Reflective {@link InvocationHandler} for lazy access to the current target object., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, + * Copyright 2002-2019 the original author or authors., +			String beanName, RootBeanDefinition mbd, Constructor<?> constructorToUse, Object[] argsToUse) {, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/AutowireUtilsTests.java, + * Copyright 2002-2019 the original author or authors., + * Unit tests for {@link AutowireUtils}., + *, +				AutowireUtils.resolveReturnTypeForFactoryMethod(notParameterized, new Object[0], getClass().getClassLoader()));, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java, + * Copyright 2002-2019 the original author or authors., +	protected final Log logger = HttpLogging.forLogName(getClass());, +, +++ b/spring-web/src/main/java/org/springframework/web/util/HtmlCharacterEntityDecoder.java, + * Copyright 2002-2019 the original author or authors., +				this.decodedMessage.append(this.originalMessage, this.currentPosition, skipUntilIndex);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandler.java, + * Copyright 2002-2019 the original author or authors., +	 * Customize the response for AsyncRequestTimeoutException., +	 * A single place to customize the response body of all exception types., +++ b/src/docs/asciidoc/core/core-aop.adoc, +https://www.eclipse.org/aspectj[AspectJ project] as part of the AspectJ 5 release. Spring, +the https://www.eclipse.org/aspectj/doc/released/progguide/index.html[AspectJ, +https://www.eclipse.org/aspectj/doc/released/adk15notebook/index.html[AspectJ 5, +You can combine pointcut expressions by using `&&,` `||` and `!`. You can also refer to, +pointcut expressions by name. The following example shows three pointcut expressions:, +https://www.eclipse.org/aspectj/doc/released/progguide/semantics-pointcuts.html[Language, +`JoinPoint.StaticPart` type, you can leave out the name of the parameter from the value, +role in your design, and you are able to use the https://www.eclipse.org/ajdt/[AspectJ, +https://docs.oracle.com/javase/8/docs/api/java/io/Serializable.html[readResolve()]).]