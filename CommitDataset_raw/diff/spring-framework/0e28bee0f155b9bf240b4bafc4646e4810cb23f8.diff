[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ResourceWebHandler.java, +				String decodedPath = URLDecoder.decode(path, "UTF-8");, +				if (isInvalidPath(decodedPath)) {, +					if (logger.isTraceEnabled()) {, +						logger.trace("Ignoring invalid resource path with escape sequences [" + path + "].");, +					}, +					return Mono.empty();, +				}, +				decodedPath = processPath(decodedPath);, +				if (isInvalidPath(decodedPath)) {, +	 * Process the given resource path., +	 * <p>The default implementation replaces:, +	 * <ul>, +	 * <li>Backslash with forward slash., +	 * <li>Duplicate occurrences of slash with a single slash., +	 * <li>Any combination of leading slash and control characters (00-1F and 7F), +	 * with a single "/" or "". For example {@code "  / // foo/bar"}, +	 * becomes {@code "/foo/bar"}., +	 * </ul>, +	 * @since 3.2.12, +		path = StringUtils.replace(path, "\\", "/");, +		path = cleanDuplicateSlashes(path);, +		return cleanLeadingSlash(path);, +	}, +, +	private String cleanDuplicateSlashes(String path) {, +		StringBuilder sb = null;, +		char prev = 0;, +		for (int i = 0; i < path.length(); i++) {, +			char curr = path.charAt(i);, +			try {, +				if ((curr == '/') && (prev == '/')) {, +					if (sb == null) {, +						sb = new StringBuilder(path.substring(0, i));, +					}, +					continue;, +				}, +				if (sb != null) {, +					sb.append(path.charAt(i));, +				}, +			}, +			finally {, +				prev = curr;, +			}, +		}, +		return sb != null ? sb.toString() : path;, +	}, +, +	private String cleanLeadingSlash(String path) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ResourceWebHandler.java, +				String decodedPath = URLDecoder.decode(path, "UTF-8");, +				if (isInvalidPath(decodedPath)) {, +					if (logger.isTraceEnabled()) {, +						logger.trace("Ignoring invalid resource path with escape sequences [" + path + "].");, +					}, +					return Mono.empty();, +				}, +				decodedPath = processPath(decodedPath);, +				if (isInvalidPath(decodedPath)) {, +	 * Process the given resource path., +	 * <p>The default implementation replaces:, +	 * <ul>, +	 * <li>Backslash with forward slash., +	 * <li>Duplicate occurrences of slash with a single slash., +	 * <li>Any combination of leading slash and control characters (00-1F and 7F), +	 * with a single "/" or "". For example {@code "  / // foo/bar"}, +	 * becomes {@code "/foo/bar"}., +	 * </ul>, +	 * @since 3.2.12, +		path = StringUtils.replace(path, "\\", "/");, +		path = cleanDuplicateSlashes(path);, +		return cleanLeadingSlash(path);, +	}, +, +	private String cleanDuplicateSlashes(String path) {, +		StringBuilder sb = null;, +		char prev = 0;, +		for (int i = 0; i < path.length(); i++) {, +			char curr = path.charAt(i);, +			try {, +				if ((curr == '/') && (prev == '/')) {, +					if (sb == null) {, +						sb = new StringBuilder(path.substring(0, i));, +					}, +					continue;, +				}, +				if (sb != null) {, +					sb.append(path.charAt(i));, +				}, +			}, +			finally {, +				prev = curr;, +			}, +		}, +		return sb != null ? sb.toString() : path;, +	}, +, +	private String cleanLeadingSlash(String path) {, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/resource/ResourceWebHandlerTests.java, +import static org.hamcrest.Matchers.*;]