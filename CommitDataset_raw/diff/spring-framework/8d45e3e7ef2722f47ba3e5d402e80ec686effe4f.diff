[+++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +import java.util.function.Predicate;, +				Predicate<KParameter> predicate = null;, +					predicate = p -> KParameter.Kind.VALUE.equals(p.getKind());, +					predicate = p -> KParameter.Kind.VALUE.equals(p.getKind()) ||, +							KParameter.Kind.INSTANCE.equals(p.getKind());, +							.filter(predicate), +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +import java.util.function.Predicate;, +				Predicate<KParameter> predicate = null;, +					predicate = p -> KParameter.Kind.VALUE.equals(p.getKind());, +					predicate = p -> KParameter.Kind.VALUE.equals(p.getKind()) ||, +							KParameter.Kind.INSTANCE.equals(p.getKind());, +							.filter(predicate), +++ b/spring-core/src/test/kotlin/org/springframework/core/KotlinMethodParameterTests.kt, + * Copyright 2002-2018 the original author or authors., +import java.lang.reflect.Method, +	private val nullableMethod: Method = javaClass.getMethod("nullable", String::class.java), +	private val nonNullableMethod = javaClass.getMethod("nonNullable", String::class.java), +	private val innerClassConstructor = InnerClass::class.java.getConstructor(KotlinMethodParameterTests::class.java), +	private val innerClassWithParametersConstructor = InnerClassWithParameter::class.java, +			.getConstructor(KotlinMethodParameterTests::class.java, String::class.java, String::class.java), +, +	private val regularClassConstructor = RegularClass::class.java.getConstructor(String::class.java, String::class.java), +		assertTrue(MethodParameter(nullableMethod, 0).isOptional), +		assertFalse(MethodParameter(nonNullableMethod, 0).isOptional), +		assertTrue(MethodParameter(nullableMethod, -1).isOptional), +		assertFalse(MethodParameter(nonNullableMethod, -1).isOptional), +	}, +, +	@Test  // SPR-17222, +	fun `Inner class constructor`() {, +		assertFalse(MethodParameter(innerClassConstructor, 0).isOptional), +, +		assertFalse(MethodParameter(innerClassWithParametersConstructor, 0).isOptional), +		assertFalse(MethodParameter(innerClassWithParametersConstructor, 1).isOptional), +		assertTrue(MethodParameter(innerClassWithParametersConstructor, 2).isOptional), +	}, +, +	@Test, +	fun `Regular class constructor`() {, +		assertFalse(MethodParameter(regularClassConstructor, 0).isOptional), +		assertTrue(MethodParameter(regularClassConstructor, 1).isOptional), +	@Suppress("unused_parameter"), +	fun nullable(nullable: String?): Int? = 42, +	@Suppress("unused_parameter"), +	fun nonNullable(nonNullable: String): Int = 42, +, +	inner class InnerClass, +, +	@Suppress("unused_parameter"), +	inner class InnerClassWithParameter(nonNullable: String, nullable: String?), +, +	@Suppress("unused_parameter"), +	class RegularClass(nonNullable: String, nullable: String?), +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +import java.util.function.Predicate;, +				Predicate<KParameter> predicate = null;, +					predicate = p -> KParameter.Kind.VALUE.equals(p.getKind());, +					predicate = p -> KParameter.Kind.VALUE.equals(p.getKind()) ||, +							KParameter.Kind.INSTANCE.equals(p.getKind());, +							.filter(predicate), +++ b/spring-core/src/test/kotlin/org/springframework/core/KotlinMethodParameterTests.kt, + * Copyright 2002-2018 the original author or authors., +import java.lang.reflect.Method, +	private val nullableMethod: Method = javaClass.getMethod("nullable", String::class.java), +	private val nonNullableMethod = javaClass.getMethod("nonNullable", String::class.java), +	private val innerClassConstructor = InnerClass::class.java.getConstructor(KotlinMethodParameterTests::class.java), +	private val innerClassWithParametersConstructor = InnerClassWithParameter::class.java, +			.getConstructor(KotlinMethodParameterTests::class.java, String::class.java, String::class.java), +, +	private val regularClassConstructor = RegularClass::class.java.getConstructor(String::class.java, String::class.java), +		assertTrue(MethodParameter(nullableMethod, 0).isOptional), +		assertFalse(MethodParameter(nonNullableMethod, 0).isOptional), +		assertTrue(MethodParameter(nullableMethod, -1).isOptional), +		assertFalse(MethodParameter(nonNullableMethod, -1).isOptional), +	}, +, +	@Test  // SPR-17222, +	fun `Inner class constructor`() {, +		assertFalse(MethodParameter(innerClassConstructor, 0).isOptional), +, +		assertFalse(MethodParameter(innerClassWithParametersConstructor, 0).isOptional), +		assertFalse(MethodParameter(innerClassWithParametersConstructor, 1).isOptional), +		assertTrue(MethodParameter(innerClassWithParametersConstructor, 2).isOptional), +	}, +, +	@Test, +	fun `Regular class constructor`() {, +		assertFalse(MethodParameter(regularClassConstructor, 0).isOptional), +		assertTrue(MethodParameter(regularClassConstructor, 1).isOptional), +	@Suppress("unused_parameter"), +	fun nullable(nullable: String?): Int? = 42, +	@Suppress("unused_parameter"), +	fun nonNullable(nonNullable: String): Int = 42, +, +	inner class InnerClass, +, +	@Suppress("unused_parameter"), +	inner class InnerClassWithParameter(nonNullable: String, nullable: String?)]