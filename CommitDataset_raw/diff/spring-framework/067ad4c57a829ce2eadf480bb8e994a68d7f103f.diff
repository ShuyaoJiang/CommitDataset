[+++ b/src/docs/asciidoc/languages/kotlin.adoc, +Feel free to join the #spring channel of http://slack.kotlinlang.org/[Kotlin Slack] or ask, +a question with `spring` and `kotlin` tags on, +https://stackoverflow.com/questions/tagged/spring+kotlin[Stackoverflow] if you need support., +(or one of its variants like https://bintray.com/bintray/jcenter/org.jetbrains.kotlin%3Akotlin-stdlib-jre8[`kotlin-stdlib-jre8`], +for Kotlin 1.1 or https://bintray.com/bintray/jcenter/org.jetbrains.kotlin%3Akotlin-stdlib-jdk8[`kotlin-stdlib-jdk8`] for Kotlin 1.2+), +https://kotlinlang.org/docs/reference/java-interop.html#jsr-305-support[Kotlin support for JSR 305 annotations], +For kotlin versions 1.1+, the default behavior is the same to `-Xjsr305=warn`., +The `strict` value is required to have Spring Framework API null-safety taken in account, +in Kotlin types inferred from Spring API but should be used with the knowledge that Spring, +API nullability declaration could evolve even between minor releases and more checks may, +be added in the future)., +but should be in an upcoming release, see https://github.com/Kotlin/KEEP/issues/79[this discussion], +instead of `@Value` annotations can be used, but currently this only works with `lateinit` or nullable `var`, +properties (the former is recommended) since immutable classes initialized by, +extensively used in Spring - behave differently. As explained in, +https://kotlinlang.org/docs/reference/annotations.html[Kotlin documentation], +unlike other attributes, the `value` attribute name can be omitted and, +specified as a `vararg` parameter., +However, in Kotlin 1.2+, one will have to write `@RequestMapping("/foo", method = [RequestMethod.GET])`, +or `@RequestMapping(path = ["/foo"], method = [RequestMethod.GET])` (square brackets need, +to be specified with named array attributes)., +An alternative for this specific `method` attribute (the most common one) is to, +all HTTP methods will be matched, not only the `GET` one., +[[kotlin-resources]], +* https://stackoverflow.com/questions/tagged/spring+kotlin[Stackoverflow with `spring` and `kotlin` tags], +* https://github.com/sdeleuze/spring-kotlin-deepdive[spring-kotlin-deepdive]: a step by step migration for Boot 1.0 + Java to Boot 2.0 + Kotlin, +* https://github.com/spring-projects/spring-boot/issues/10712[Add null-safety annotations on Spring Boot APIs], +* https://github.com/spring-projects/spring-boot/issues/9486[Use Kotlin's bom to provide dependency management for Kotlin], +* https://youtrack.jetbrains.com/issue/KT-5464[Kotlin requires type inference where Java doesn't], +* https://github.com/Kotlin/KEEP/issues/79[Better generics null-safety support]]