[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java, +		if (className == null || beanDef.getFactoryMethodName() != null) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java, +		if (className == null || beanDef.getFactoryMethodName() != null) {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.beans.factory.support.BeanDefinitionRegistry;, +import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;, +	@Test, +	public void testBeanDefinitionRegistryPostProcessorConfig() {, +		ApplicationContext ctx = new AnnotationConfigApplicationContext(BeanDefinitionRegistryPostProcessorConfig.class);, +		assertTrue(ctx.getBean("myTestBean") instanceof TestBean);, +	}, +, +		public @Bean Foo foo() {, +		public @Bean Bar bar() {, +		@Bean @Lazy @Scope(proxyMode = ScopedProxyMode.INTERFACES), +	@Configuration, +	static class BeanDefinitionRegistryPostProcessorConfig {, +, +		@Bean, +		public static BeanDefinitionRegistryPostProcessor bdrpp() {, +			return new BeanDefinitionRegistryPostProcessor() {, +				@Override, +				public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {, +					registry.registerBeanDefinition("myTestBean", new RootBeanDefinition(TestBean.class));, +				}, +				@Override, +				public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {, +				}, +			};, +		}, +	}, +]