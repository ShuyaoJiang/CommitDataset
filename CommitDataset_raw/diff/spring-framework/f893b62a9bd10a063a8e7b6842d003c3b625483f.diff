[+++ b/org.springframework.context/src/main/java/org/springframework/jndi/JndiPropertySource.java, + * @see org.springframework.web.context.support.StandardServletEnvironment, +++ b/org.springframework.context/src/main/java/org/springframework/jndi/JndiPropertySource.java, + * @see org.springframework.web.context.support.StandardServletEnvironment, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/PropertySource.java, +	 * @see org.springframework.web.context.support.StandardServletEnvironment, +++ b/org.springframework.context/src/main/java/org/springframework/jndi/JndiPropertySource.java, + * @see org.springframework.web.context.support.StandardServletEnvironment, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/PropertySource.java, +	 * @see org.springframework.web.context.support.StandardServletEnvironment, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/StandardEnvironment.java, + * {@link Environment} implementation suitable for use in 'standard' (i.e. non-web), + * applications., + * <p>In addition to the usual functions of a {@link ConfigurableEnvironment} such as, + * property resolution and profile-related operations, this implementation configures two, + * default property sources, to be searched in the following order:, + * <ul>, + * </ul>, + * That is, if the key "xyz" is present both in the JVM system properties as well as in, + * the set of environment variables for the current process, the value of key "xyz" from, + * system properties * will return from a call to {@code environment.getProperty("xyz")}., + * This ordering is chosen by default because system properties are per-JVM, while, + * environment variables may be the same across many JVMs on a given system.  Giving, + * system properties precedence allows for overriding of environment variables on a, + * per-JVM basis., + * <p>These default property sources may be removed, reordered, or replaced; and, + * additional property sources may be added using the {@link MutablePropertySources}, + * instance available from {@link #getPropertySources()}., + * that any such PropertySource manipulations be performed <em>before</em> the context's, + * {@link org.springframework.context.support.AbstractApplicationContext#refresh(), + * refresh()} method is called. This ensures that all PropertySources are available during, + * the container bootstrap process, including use by, + * {@link org.springframework.context.support.PropertySourcesPlaceholderConfigurer, + * @see org.springframework.web.context.support.StandardServletEnvironment, +++ b/org.springframework.context/src/main/java/org/springframework/jndi/JndiPropertySource.java, + * @see org.springframework.web.context.support.StandardServletEnvironment, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/PropertySource.java, +	 * @see org.springframework.web.context.support.StandardServletEnvironment, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/StandardEnvironment.java, + * {@link Environment} implementation suitable for use in 'standard' (i.e. non-web), + * applications., + * <p>In addition to the usual functions of a {@link ConfigurableEnvironment} such as, + * property resolution and profile-related operations, this implementation configures two, + * default property sources, to be searched in the following order:, + * <ul>, + * </ul>, + * That is, if the key "xyz" is present both in the JVM system properties as well as in, + * the set of environment variables for the current process, the value of key "xyz" from, + * system properties * will return from a call to {@code environment.getProperty("xyz")}., + * This ordering is chosen by default because system properties are per-JVM, while, + * environment variables may be the same across many JVMs on a given system.  Giving, + * system properties precedence allows for overriding of environment variables on a, + * per-JVM basis., + * <p>These default property sources may be removed, reordered, or replaced; and, + * additional property sources may be added using the {@link MutablePropertySources}, + * instance available from {@link #getPropertySources()}., + * that any such PropertySource manipulations be performed <em>before</em> the context's, + * {@link org.springframework.context.support.AbstractApplicationContext#refresh(), + * refresh()} method is called. This ensures that all PropertySources are available during, + * the container bootstrap process, including use by, + * {@link org.springframework.context.support.PropertySourcesPlaceholderConfigurer, + * @see org.springframework.web.context.support.StandardServletEnvironment, +++ b/org.springframework.integration-tests/src/test/java/org/springframework/core/env/EnvironmentIntegrationTests.java, +import org.springframework.web.context.support.StandardServletEnvironment;, +		assertHasStandardServletEnvironment(ctx);, +		assertHasStandardServletEnvironment(ctx);, +		assertThat(environment, instanceOf(StandardServletEnvironment.class));, +		assertThat(propertySources.contains(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME), is(true));, +		assertThat(propertySources.contains(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME), is(true));, +		assertThat(propertySources.precedenceOf(PropertySource.named(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME)),, +				lessThan(propertySources.precedenceOf(PropertySource.named(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME))));, +		assertThat(propertySources.precedenceOf(PropertySource.named(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME)),, +		assertThat(environment, instanceOf(StandardServletEnvironment.class));, +		assertThat(propertySources.contains(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME), is(true));, +		assertThat(propertySources.precedenceOf(PropertySource.named(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME)),, +		assertThat(propertySources.contains(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME), is(true));, +		assertThat(propertySources.contains(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME), is(true));, +		assertThat(propertySources.precedenceOf(PropertySource.named(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME)),, +				lessThan(propertySources.precedenceOf(PropertySource.named(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME))));, +		assertThat(propertySources.precedenceOf(PropertySource.named(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME)),, +	private void assertHasStandardServletEnvironment(WebApplicationContext ctx) {, +		assertThat(defaultEnv, instanceOf(StandardServletEnvironment.class));, +++ b/org.springframework.context/src/main/java/org/springframework/jndi/JndiPropertySource.java, + * @see org.springframework.web.context.support.StandardServletEnvironment, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/PropertySource.java, +	 * @see org.springframework.web.context.support.StandardServletEnvironment, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/StandardEnvironment.java, + * {@link Environment} implementation suitable for use in 'standard' (i.e. non-web), + * applications., + * <p>In addition to the usual functions of a {@link ConfigurableEnvironment} such as, + * property resolution and profile-related operations, this implementation configures two, + * default property sources, to be searched in the following order:, + * <ul>, + * </ul>, + * That is, if the key "xyz" is present both in the JVM system properties as well as in, + * the set of environment variables for the current process, the value of key "xyz" from, + * system properties * will return from a call to {@code environment.getProperty("xyz")}., + * This ordering is chosen by default because system properties are per-JVM, while, + * environment variables may be the same across many JVMs on a given system.  Giving, + * system properties precedence allows for overriding of environment variables on a]