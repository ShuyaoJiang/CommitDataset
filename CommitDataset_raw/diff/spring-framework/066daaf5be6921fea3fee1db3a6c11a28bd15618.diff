[+++ b/org.springframework.aspects/src/main/java/org/springframework/transaction/aspectj/AspectJTransactionManagementConfiguration.java, +import org.springframework.transaction.annotation.EnableTransactionManagement;, +import org.springframework.transaction.annotation.TransactionManagementConfigurationSelector;, +/**, + * {@code @Configuration} class that registers the Spring infrastructure beans necessary, + * to enable AspectJ-based annotation-driven transaction management., + *, + * @author Chris Beams, + * @since 3.1, + * @see EnableTransactionManagement, + * @see TransactionManagementConfigurationSelector, + */, +++ b/org.springframework.aspects/src/main/java/org/springframework/transaction/aspectj/AspectJTransactionManagementConfiguration.java, +import org.springframework.transaction.annotation.EnableTransactionManagement;, +import org.springframework.transaction.annotation.TransactionManagementConfigurationSelector;, +/**, + * {@code @Configuration} class that registers the Spring infrastructure beans necessary, + * to enable AspectJ-based annotation-driven transaction management., + *, + * @author Chris Beams, + * @since 3.1, + * @see EnableTransactionManagement, + * @see TransactionManagementConfigurationSelector, + */, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/AbstractTransactionManagementConfiguration.java, + * Abstract base {@code @Configuration} class providing common structure for enabling, + * Spring's annotation-driven transaction management capability., +++ b/org.springframework.aspects/src/main/java/org/springframework/transaction/aspectj/AspectJTransactionManagementConfiguration.java, +import org.springframework.transaction.annotation.EnableTransactionManagement;, +import org.springframework.transaction.annotation.TransactionManagementConfigurationSelector;, +/**, + * {@code @Configuration} class that registers the Spring infrastructure beans necessary, + * to enable AspectJ-based annotation-driven transaction management., + *, + * @author Chris Beams, + * @since 3.1, + * @see EnableTransactionManagement, + * @see TransactionManagementConfigurationSelector, + */, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/AbstractTransactionManagementConfiguration.java, + * Abstract base {@code @Configuration} class providing common structure for enabling, + * Spring's annotation-driven transaction management capability., +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/EnableTransactionManagement.java, +/**, + * Enables Spring's annotation-driven transaction management capability, similar to, + * the support found in Spring's {@code <tx:*>} XML namespace. To be used, + * on @{@link org.springframework.context.annotation.Configuration Configuration} classes, + * as follows:, + * <pre class="code">, + * &#064;Configuration, + * &#064;EnableTransactionManagement, + * public class AppConfig {, + *     &#064;Bean, + *     public FooRepository fooRepository() {, + *         // configure and return a class having &#064;Transactional methods, + *         return new JdbcFooRepository(dataSource());, + *     }, + *, + *     &#064;Bean, + *     public DataSource dataSource() {, + *         // configure and return the necessary JDBC DataSource, + *     }, + *, + *     &#064;Bean, + *     public PlatformTransactionManager txManager() {, + *         return new DataSourceTransactionManager(dataSource());, + *     }, + * }</pre>, + *, + * <p>For reference, the example above can be compared to the following Spring XML, + * configuration:, + * <pre class="code">, + * {@code, + * <beans>, + *     <tx:annotation-driven/>, + *     <bean id="fooRepository" class="com.foo.JdbcFooRepository">, + *         <constructor-arg ref="dataSource"/>, + *     </bean>, + *     <bean id="dataSource" class="com.vendor.VendorDataSource"/>, + *     <bean id="transactionManager" class="org.sfwk...DataSourceTransactionManager">, + *         <constructor-arg ref="dataSource"/>, + *     </bean>, + * </beans>, + * }</pre>, + * In both of the scenarios above, {@code @EnableTransactionManagement} and {@code, + * <tx:annotation-driven/>} are responsible for registering the necessary Spring, + * components that power annotation-driven transaction management, such as the, + * TransactionInterceptor and the proxy- or AspectJ-based advice that weave the, + * interceptor into the call stack when {@code JdbcFooRepository}'s {@code @Transacational}, + * methods are invoked., + *, + * <p>A minor difference between the two examples lies in the naming of the {@code, + * PlatformTransactionManager} bean: In the {@code @Bean} case, the name is, + * <em>"txManager"</em> (per the name of the method); in the XML case, the name is, + * <em>"transactionManager"</em>. The {@code <tx:annotation-driven/>} is hard-wired to, + * look for a bean named "transactionManager" by default, however, + * {@code @EnableTransactionManagement} is more flexible; it will fall back to a by-type, + * lookup for any {@code PlatformTransactionManager} bean in the container. Thus the name, + * can be "txManager", "transactionManager", or "tm": it simply does not matter., + *]