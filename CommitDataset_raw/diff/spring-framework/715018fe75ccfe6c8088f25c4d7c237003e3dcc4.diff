[+++ b/spring-websocket/src/main/java/org/springframework/websocket/AbstractHandshakeRequestHandler.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.websocket;, +, +import java.io.IOException;, +import java.nio.charset.Charset;, +import java.security.MessageDigest;, +import java.security.NoSuchAlgorithmException;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +, +import javax.xml.bind.DatatypeConverter;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.HttpStatus;, +import org.springframework.http.server.ServerHttpRequest;, +import org.springframework.http.server.ServerHttpResponse;, +import org.springframework.web.util.UriComponentsBuilder;, +, +, +/**, + *, + * @author Rossen Stoyanchev, + * @since 4.0, + */, +public abstract class AbstractHandshakeRequestHandler implements HandshakeRequestHandler {, +, +	private static final String GUID = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";, +, +	protected Log logger = LogFactory.getLog(getClass());, +, +	private List<String> protocols;, +, +, +	public void setProtocols(String... protocols) {, +		this.protocols = Arrays.asList(protocols);, +	}, +, +	public String[] getProtocols() {, +		return this.protocols.toArray(new String[this.protocols.size()]);, +	}, +, +	@Override, +	public boolean doHandshake(ServerHttpRequest request, ServerHttpResponse response) throws Exception {, +, +		logger.debug("Starting handshake for " + request.getURI());, +, +		if (!HttpMethod.GET.equals(request.getMethod())) {, +			response.setStatusCode(HttpStatus.METHOD_NOT_ALLOWED);, +			response.getHeaders().setAllow(Collections.singleton(HttpMethod.GET));, +			logger.debug("Only HTTP GET is allowed, current method is " + request.getMethod());, +			return false;, +		}, +		if (!validateUpgradeHeader(request, response)) {, +			return false;, +		}, +		if (!validateConnectHeader(request, response)) {, +			return false;, +		}, +		if (!validateWebSocketVersion(request, response)) {, +			return false;, +		}, +		if (!validateOrigin(request, response)) {, +			return false;, +		}, +		String wsKey = request.getHeaders().getSecWebSocketKey();, +		if (wsKey == null) {, +			logger.debug("Missing \"Sec-WebSocket-Key\" header");, +			response.setStatusCode(HttpStatus.BAD_REQUEST);, +			return false;, +		}, +		String protocol = selectProtocol(request.getHeaders().getSecWebSocketProtocol());, +		// TODO: request.getHeaders().getSecWebSocketExtensions()), +, +		response.setStatusCode(HttpStatus.SWITCHING_PROTOCOLS);, +		response.getHeaders().setUpgrade("WebSocket");, +		response.getHeaders().setConnection("Upgrade");, +		response.getHeaders().setSecWebSocketProtocol(protocol);, +		response.getHeaders().setSecWebSocketAccept(getWebSocketKeyHash(wsKey));, +		// TODO: response.getHeaders().setSecWebSocketExtensions(extensions);, +, +		logger.debug("Successfully negotiated WebSocket handshake");]