[+++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +		ConversionFailedException conversionAttemptEx = null;, +		if (editor == null && conversionService != null && newValue != null && typeDescriptor != null) {, +			if (conversionService.canConvert(sourceTypeDesc, typeDescriptor)) {, +					return (T) conversionService.convert(newValue, sourceTypeDesc, typeDescriptor);, +					conversionAttemptEx = ex;, +		Object convertedValue = newValue;, +, +					if (conversionAttemptEx == null && !requiredType.isInterface() && !requiredType.isEnum()) {, +				if (conversionAttemptEx != null) {, +					// Original exception from former ConversionService call above..., +					throw conversionAttemptEx;, +				else if (conversionService != null) {, +					// ConversionService not tried before, probably custom editor found, +					// but editor couldn't produce the required type..., +					TypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(newValue);, +					if (conversionService.canConvert(sourceTypeDesc, typeDescriptor)) {, +						return (T) conversionService.convert(newValue, sourceTypeDesc, typeDescriptor);, +					}, +				}, +, +		if (conversionAttemptEx != null) {, +				throw conversionAttemptEx;, +					"PropertyEditor based conversion eventually succeeded", conversionAttemptEx);, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +		ConversionFailedException conversionAttemptEx = null;, +		if (editor == null && conversionService != null && newValue != null && typeDescriptor != null) {, +			if (conversionService.canConvert(sourceTypeDesc, typeDescriptor)) {, +					return (T) conversionService.convert(newValue, sourceTypeDesc, typeDescriptor);, +					conversionAttemptEx = ex;, +		Object convertedValue = newValue;, +, +					if (conversionAttemptEx == null && !requiredType.isInterface() && !requiredType.isEnum()) {, +				if (conversionAttemptEx != null) {, +					// Original exception from former ConversionService call above..., +					throw conversionAttemptEx;, +				else if (conversionService != null) {, +					// ConversionService not tried before, probably custom editor found, +					// but editor couldn't produce the required type..., +					TypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(newValue);, +					if (conversionService.canConvert(sourceTypeDesc, typeDescriptor)) {, +						return (T) conversionService.convert(newValue, sourceTypeDesc, typeDescriptor);, +					}, +				}, +, +		if (conversionAttemptEx != null) {, +				throw conversionAttemptEx;, +					"PropertyEditor based conversion eventually succeeded", conversionAttemptEx);, +++ b/spring-context/src/test/java/org/springframework/validation/DataBinderTests.java, +import org.springframework.beans.propertyeditors.StringTrimmerEditor;, +import org.springframework.core.convert.converter.Converter;, +import org.springframework.format.support.DefaultFormattingConversionService;, +	public void testConversionWithInappropriateStringEditor() {, +		DataBinder dataBinder = new DataBinder(null);, +		DefaultFormattingConversionService conversionService = new DefaultFormattingConversionService();, +		dataBinder.setConversionService(conversionService);, +		dataBinder.registerCustomEditor(String.class, new StringTrimmerEditor(true));, +, +		NameBean bean = new NameBean("Fred");, +		assertEquals("ConversionService should have invoked toString()", "Fred", dataBinder.convertIfNecessary(bean, String.class));, +		conversionService.addConverter(new NameBeanConverter());, +		assertEquals("Type converter should have been used", "[Fred]", dataBinder.convertIfNecessary(bean, String.class));, +	}, +, +	@Test, +, +	public static class NameBean {, +, +		private final String name;, +, +		public NameBean(String name) {, +			this.name = name;, +		}, +		public String getName() {, +			return name;, +		}, +		@Override, +		public String toString() {, +			return name;, +		}, +	}, +, +, +	public static class NameBeanConverter implements Converter<NameBean, String> {, +, +		@Override, +		public String convert(NameBean source) {, +			return "[" + source.getName() + "]";, +		}, +	}, +]