[+++ b/spring-context/src/test/java/org/springframework/context/expression/ApplicationContextExpressionTests.java, +import org.springframework.core.convert.converter.Converter;, +import org.springframework.core.convert.support.GenericConversionService;, +import org.springframework.tests.Assume;, +import org.springframework.tests.TestGroup;, +import org.springframework.tests.sample.beans.TestBean;, +import static org.junit.Assert.*;, +, +		GenericConversionService cs = new GenericConversionService();, +		cs.addConverter(String.class, String.class, new Converter<String, String>() {, +			@Override, +			public String convert(String source) {, +				return source.trim();, +			}, +		});, +		ac.getBeanFactory().registerSingleton(GenericApplicationContext.CONVERSION_SERVICE_BEAN_NAME, cs);, +		rbd.getPropertyValues().add("country2", new TypedStringValue("-#{systemProperties.country}-"));, +			assertEquals("-UK1-", tb.getCountry2());, +			assertEquals("-UK2-", tb.getCountry2());, +++ b/spring-context/src/test/java/org/springframework/context/expression/ApplicationContextExpressionTests.java, +import org.springframework.core.convert.converter.Converter;, +import org.springframework.core.convert.support.GenericConversionService;, +import org.springframework.tests.Assume;, +import org.springframework.tests.TestGroup;, +import org.springframework.tests.sample.beans.TestBean;, +import static org.junit.Assert.*;, +, +		GenericConversionService cs = new GenericConversionService();, +		cs.addConverter(String.class, String.class, new Converter<String, String>() {, +			@Override, +			public String convert(String source) {, +				return source.trim();, +			}, +		});, +		ac.getBeanFactory().registerSingleton(GenericApplicationContext.CONVERSION_SERVICE_BEAN_NAME, cs);, +		rbd.getPropertyValues().add("country2", new TypedStringValue("-#{systemProperties.country}-"));, +			assertEquals("-UK1-", tb.getCountry2());, +			assertEquals("-UK2-", tb.getCountry2());, +++ b/spring-expression/src/main/java/org/springframework/expression/common/ExpressionUtils.java, +		if (targetType == null) {, +			return (T) context.getTypeConverter().convertValue(, +					value, typedValue.getTypeDescriptor(), TypeDescriptor.valueOf(targetType));, +		}, +		if (ClassUtils.isAssignableValue(targetType, value)) {, +			return (T) value;, +		return (Long) typeConverter.convertValue(typedValue.getValue(), typedValue.getTypeDescriptor(),, +				TypeDescriptor.valueOf(Long.class));, +		return (Short) typeConverter.convertValue(typedValue.getValue(), typedValue.getTypeDescriptor(),, +				TypeDescriptor.valueOf(Short.class));, +		return (Float) typeConverter.convertValue(typedValue.getValue(), typedValue.getTypeDescriptor(),, +				TypeDescriptor.valueOf(Float.class));, +		return (Byte) typeConverter.convertValue(typedValue.getValue(), typedValue.getTypeDescriptor(),, +				TypeDescriptor.valueOf(Byte.class));]