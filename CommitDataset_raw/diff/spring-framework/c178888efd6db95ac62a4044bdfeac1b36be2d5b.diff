[+++ b/org.springframework.core/src/main/java/org/springframework/util/AntPatchStringMatcher.java, +import java.util.LinkedList;, +import java.util.List;, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, + * Tests whether or not a string matches against a pattern using a regular expression., +	private static final Pattern GLOB_PATTERN = Pattern.compile("\\?|\\*|\\{([^/]+?)\\}");, +	private final Pattern pattern;, +	private String str;, +	private final List<String> variableNames = new LinkedList<String>();, +	/** Construct a new instance of the <code>AntPatchStringMatcher</code>. */, +	AntPatchStringMatcher(String pattern, String str, Map<String, String> uriTemplateVariables) {, +		this.str = str;, +		this.pattern = createPattern(pattern);, +	private Pattern createPattern(String pattern) {, +		StringBuilder patternBuilder = new StringBuilder();, +		Matcher m = GLOB_PATTERN.matcher(pattern);, +		int end = 0;, +		while (m.find()) {, +			patternBuilder.append(quote(pattern, end, m.start()));, +			String match = m.group();, +			if ("?".equals(match)) {, +				patternBuilder.append('.');, +			}, +			else if ("*".equals(match)) {, +				patternBuilder.append(".*");, +			}, +			else if (match.startsWith("{") && match.endsWith("}")) {, +				patternBuilder.append("(.*)");, +				variableNames.add(m.group(1));, +			}, +			end = m.end();, +		}, +		patternBuilder.append(quote(pattern, end, pattern.length()));, +		return  Pattern.compile(patternBuilder.toString());, +	}, +, +	private String quote(String s, int start, int end) {, +		if (start == end) {, +			return "";, +		}, +		return Pattern.quote(s.substring(start, end));, +	}, +	 *, +		Matcher matcher = pattern.matcher(str);, +		if (matcher.matches()) {, +				for (int i = 1; i <= matcher.groupCount(); i++) {, +					String name = this.variableNames.get(i - 1);, +					String value = matcher.group(i);, +					uriTemplateVariables.put(name, value);, +++ b/org.springframework.core/src/main/java/org/springframework/util/AntPatchStringMatcher.java, +import java.util.LinkedList;, +import java.util.List;, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, + * Tests whether or not a string matches against a pattern using a regular expression., +	private static final Pattern GLOB_PATTERN = Pattern.compile("\\?|\\*|\\{([^/]+?)\\}");, +	private final Pattern pattern;, +	private String str;, +	private final List<String> variableNames = new LinkedList<String>();, +	/** Construct a new instance of the <code>AntPatchStringMatcher</code>. */, +	AntPatchStringMatcher(String pattern, String str, Map<String, String> uriTemplateVariables) {, +		this.str = str;, +		this.pattern = createPattern(pattern);, +	private Pattern createPattern(String pattern) {, +		StringBuilder patternBuilder = new StringBuilder();, +		Matcher m = GLOB_PATTERN.matcher(pattern);, +		int end = 0;, +		while (m.find()) {, +			patternBuilder.append(quote(pattern, end, m.start()));, +			String match = m.group();, +			if ("?".equals(match)) {, +				patternBuilder.append('.');, +			}, +			else if ("*".equals(match)) {, +				patternBuilder.append(".*");, +			}, +			else if (match.startsWith("{") && match.endsWith("}")) {, +				patternBuilder.append("(.*)");, +				variableNames.add(m.group(1));, +			}, +			end = m.end();, +		}, +		patternBuilder.append(quote(pattern, end, pattern.length()));, +		return  Pattern.compile(patternBuilder.toString());, +	}, +, +	private String quote(String s, int start, int end) {, +		if (start == end) {, +			return "";, +		}, +		return Pattern.quote(s.substring(start, end));, +	}, +	 *, +		Matcher matcher = pattern.matcher(str);, +		if (matcher.matches()) {, +				for (int i = 1; i <= matcher.groupCount(); i++) {, +					String name = this.variableNames.get(i - 1);, +					String value = matcher.group(i);, +					uriTemplateVariables.put(name, value);]