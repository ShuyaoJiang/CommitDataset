[+++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2CodecSupport.java, +		MethodParameter param = getParameter(resolvableType);, +		if (param != null) {, +			JsonView annotation = getAnnotation(param, JsonView.class);, +			if (annotation != null) {, +				Assert.isTrue(classes.length == 1, JSON_VIEW_HINT_ERROR + param);, +				return Collections.singletonMap(JSON_VIEW_HINT, classes[0]);, +			}, +		}, +		return Collections.emptyMap();, +	@Nullable, +	protected MethodParameter getParameter(ResolvableType type) {, +		return type.getSource() instanceof MethodParameter ? (MethodParameter) type.getSource() : null;, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2CodecSupport.java, +		MethodParameter param = getParameter(resolvableType);, +		if (param != null) {, +			JsonView annotation = getAnnotation(param, JsonView.class);, +			if (annotation != null) {, +				Assert.isTrue(classes.length == 1, JSON_VIEW_HINT_ERROR + param);, +				return Collections.singletonMap(JSON_VIEW_HINT, classes[0]);, +			}, +		}, +		return Collections.emptyMap();, +	@Nullable, +	protected MethodParameter getParameter(ResolvableType type) {, +		return type.getSource() instanceof MethodParameter ? (MethodParameter) type.getSource() : null;, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +		MethodParameter param = getParameter(elementType);, +		Class<?> contextClass = (param != null ? param.getContainingClass() : null);, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2CodecSupport.java, +		MethodParameter param = getParameter(resolvableType);, +		if (param != null) {, +			JsonView annotation = getAnnotation(param, JsonView.class);, +			if (annotation != null) {, +				Assert.isTrue(classes.length == 1, JSON_VIEW_HINT_ERROR + param);, +				return Collections.singletonMap(JSON_VIEW_HINT, classes[0]);, +			}, +		}, +		return Collections.emptyMap();, +	@Nullable, +	protected MethodParameter getParameter(ResolvableType type) {, +		return type.getSource() instanceof MethodParameter ? (MethodParameter) type.getSource() : null;, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +		MethodParameter param = getParameter(elementType);, +		Class<?> contextClass = (param != null ? param.getContainingClass() : null);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncHandlerMethodArgumentResolver.java, +import org.springframework.lang.Nullable;, +	 * @return the resolved value, if any, +	@Nullable, +	Object resolveArgumentValue(MethodParameter parameter, BindingContext bindingContext,, +			ServerWebExchange exchange);, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2CodecSupport.java, +		MethodParameter param = getParameter(resolvableType);, +		if (param != null) {, +			JsonView annotation = getAnnotation(param, JsonView.class);, +			if (annotation != null) {, +				Assert.isTrue(classes.length == 1, JSON_VIEW_HINT_ERROR + param);, +				return Collections.singletonMap(JSON_VIEW_HINT, classes[0]);, +			}, +		}, +		return Collections.emptyMap();, +	@Nullable, +	protected MethodParameter getParameter(ResolvableType type) {, +		return type.getSource() instanceof MethodParameter ? (MethodParameter) type.getSource() : null;, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +		MethodParameter param = getParameter(elementType);, +		Class<?> contextClass = (param != null ? param.getContainingClass() : null);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncHandlerMethodArgumentResolver.java, +import org.springframework.lang.Nullable;, +	 * @return the resolved value, if any, +	@Nullable, +	Object resolveArgumentValue(MethodParameter parameter, BindingContext bindingContext,, +			ServerWebExchange exchange);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractNamedValueSyncArgumentResolver.java, +	public Object resolveArgumentValue(MethodParameter parameter, BindingContext context,, +			ServerWebExchange exchange) {, +		return resolveArgument(parameter, context, exchange).block();, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2CodecSupport.java, +		MethodParameter param = getParameter(resolvableType);, +		if (param != null) {, +			JsonView annotation = getAnnotation(param, JsonView.class);, +			if (annotation != null) {, +				Assert.isTrue(classes.length == 1, JSON_VIEW_HINT_ERROR + param);, +				return Collections.singletonMap(JSON_VIEW_HINT, classes[0]);, +			}, +		}, +		return Collections.emptyMap();, +	@Nullable, +	protected MethodParameter getParameter(ResolvableType type) {, +		return type.getSource() instanceof MethodParameter ? (MethodParameter) type.getSource() : null;, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +		MethodParameter param = getParameter(elementType);, +		Class<?> contextClass = (param != null ? param.getContainingClass() : null);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncHandlerMethodArgumentResolver.java, +import org.springframework.lang.Nullable;, +	 * @return the resolved value, if any, +	@Nullable, +	Object resolveArgumentValue(MethodParameter parameter, BindingContext bindingContext,, +			ServerWebExchange exchange);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractNamedValueSyncArgumentResolver.java]