[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/ObjectProvider.java, +import java.util.function.Supplier;, +, +	 * @param defaultSupplier a callback for supplying a default object, +	 * if none is present in the factory, +	 * @return an instance of the bean, or the supplied default object, +	 * if no such bean is available, +	 * @throws BeansException in case of creation errors, +	 * @since 5.0, +	 * @see #getIfAvailable(), +	 */, +	default T getIfAvailable(Supplier<T> defaultSupplier) throws BeansException {, +		T dependency = getIfAvailable();, +		return (dependency != null ? dependency : defaultSupplier.get());, +	}, +, +	/**, +	 * Return an instance (possibly shared or independent) of the object, +	 * managed by this factory., +	/**, +	 * Return an instance (possibly shared or independent) of the object, +	 * managed by this factory., +	 * @param defaultSupplier a callback for supplying a default object, +	 * if no unique candidate is present in the factory, +	 * @return an instance of the bean, or the supplied default object, +	 * if no such bean is available or if it is not unique in the factory, +	 * (i.e. multiple candidates found with none marked as primary), +	 * @throws BeansException in case of creation errors, +	 * @since 5.0, +	 * @see #getIfUnique(), +	 */, +	default T getIfUnique(Supplier<T> defaultSupplier) throws BeansException {, +		T dependency = getIfUnique();, +		return (dependency != null ? dependency : defaultSupplier.get());, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/ObjectProvider.java, +import java.util.function.Supplier;, +, +	 * @param defaultSupplier a callback for supplying a default object, +	 * if none is present in the factory, +	 * @return an instance of the bean, or the supplied default object, +	 * if no such bean is available, +	 * @throws BeansException in case of creation errors, +	 * @since 5.0, +	 * @see #getIfAvailable(), +	 */, +	default T getIfAvailable(Supplier<T> defaultSupplier) throws BeansException {, +		T dependency = getIfAvailable();, +		return (dependency != null ? dependency : defaultSupplier.get());, +	}, +, +	/**, +	 * Return an instance (possibly shared or independent) of the object, +	 * managed by this factory., +	/**, +	 * Return an instance (possibly shared or independent) of the object, +	 * managed by this factory., +	 * @param defaultSupplier a callback for supplying a default object, +	 * if no unique candidate is present in the factory, +	 * @return an instance of the bean, or the supplied default object, +	 * if no such bean is available or if it is not unique in the factory, +	 * (i.e. multiple candidates found with none marked as primary), +	 * @throws BeansException in case of creation errors, +	 * @since 5.0, +	 * @see #getIfUnique(), +	 */, +	default T getIfUnique(Supplier<T> defaultSupplier) throws BeansException {, +		T dependency = getIfUnique();, +		return (dependency != null ? dependency : defaultSupplier.get());, +	}, +, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, +		assertEquals(bf.getBean("testBean"), bean.getOptionalTestBeanWithDefault());, +		assertEquals(bf.getBean("testBean"), bean.getUniqueTestBeanWithDefault());, +		assertSame(bf.getBean("testBean"), bean.getOptionalTestBeanWithDefault());, +		assertSame(bf.getBean("testBean"), bean.getUniqueTestBeanWithDefault());, +		assertEquals(new TestBean("default"), bean.getOptionalTestBeanWithDefault());, +		assertEquals(new TestBean("default"), bean.getUniqueTestBeanWithDefault());, +		public TestBean getOptionalTestBeanWithDefault() {, +			return this.testBeanFactory.getIfAvailable(() -> new TestBean("default"));, +		}, +, +, +		public TestBean getUniqueTestBeanWithDefault() {, +			return this.testBeanFactory.getIfUnique(() -> new TestBean("default"));, +		}]