[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ContextAnnotationAutowireCandidateResolver.java, +import java.util.Collection;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +					Class<?> type = getTargetClass();, +					if (Map.class == type) {, +						return Collections.EMPTY_MAP;, +					}, +					else if (List.class == type) {, +						return Collections.EMPTY_LIST;, +					}, +					else if (Set.class == type || Collection.class == type) {, +						return Collections.EMPTY_SET;, +					}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ContextAnnotationAutowireCandidateResolver.java, +import java.util.Collection;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +					Class<?> type = getTargetClass();, +					if (Map.class == type) {, +						return Collections.EMPTY_MAP;, +					}, +					else if (List.class == type) {, +						return Collections.EMPTY_LIST;, +					}, +					else if (Set.class == type || Collection.class == type) {, +						return Collections.EMPTY_SET;, +					}, +++ b/spring-context/src/test/java/org/springframework/context/annotation/LazyAutowiredAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2017 the original author or authors., +import java.util.List;, +, +		AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext();, +		RootBeanDefinition abd = new RootBeanDefinition(FieldResourceInjectionBean.class);, +		abd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE);, +		ac.registerBeanDefinition("annotatedBean", abd);, +		RootBeanDefinition tbd = new RootBeanDefinition(TestBean.class);, +		tbd.setLazyInit(true);, +		ac.registerBeanDefinition("testBean", tbd);, +		ac.refresh();, +, +		FieldResourceInjectionBean bean = ac.getBean("annotatedBean", FieldResourceInjectionBean.class);, +		assertFalse(ac.getBeanFactory().containsSingleton("testBean"));, +		assertFalse(bean.getTestBeans().isEmpty());, +		assertNull(bean.getTestBeans().get(0).getName());, +		assertTrue(ac.getBeanFactory().containsSingleton("testBean"));, +		TestBean tb = (TestBean) ac.getBean("testBean");, +		tb.setName("tb");, +		assertSame("tb", bean.getTestBean().getName());, +			// expected, +		assertNotNull(bean.getTestBeans());, +		assertTrue(bean.getTestBeans().isEmpty());, +			// expected, +		@Autowired @Lazy, +		private List<TestBean> testBeans;, +, +, +		public List<TestBean> getTestBeans() {, +			return testBeans;, +		}, +		@Autowired(required = false) @Lazy, +		private List<TestBean> testBeans;, +, +, +		public List<TestBean> getTestBeans() {, +			return this.testBeans;, +		}]