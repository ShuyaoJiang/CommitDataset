[+++ b/org.springframework.web/src/main/java/org/springframework/http/MediaType.java, +import java.util.TreeSet;, +		int comp = this.type.compareToIgnoreCase(other.type);, +		if (comp != 0) {, +			return comp;, +		}, +		comp = this.subtype.compareToIgnoreCase(other.subtype);, +		if (comp != 0) {, +			return comp;, +		}, +		comp = this.parameters.size() - other.parameters.size();, +		if (comp != 0) {, +			return comp;, +		}, +		Iterator<String> thisAttributes = new TreeSet<String>(this.parameters.keySet()).iterator();, +		Iterator<String> otherAttributes = new TreeSet<String>(other.parameters.keySet()).iterator();, +		while (thisAttributes.hasNext()) {, +			String thisAttribute = thisAttributes.next();, +			String otherAttribute = otherAttributes.next();, +			comp = thisAttribute.compareToIgnoreCase(otherAttribute);, +			if (comp != 0) {, +				return comp;, +			}, +			String thisValue = this.parameters.get(thisAttribute);, +			String otherValue = other.parameters.get(otherAttribute);, +			if (otherValue == null) {, +				otherValue = "";, +			}, +			comp = thisValue.compareTo(otherValue);, +			if (comp != 0) {, +				return comp;, +			}, +		}, +		return 0;, +		appendTo(this.parameters, builder);, +	}, +, +	private static void appendTo(Map<String, String> map, StringBuilder builder) {, +		for (Map.Entry<String, String> entry : map.entrySet()) {, +++ b/org.springframework.web/src/main/java/org/springframework/http/MediaType.java, +import java.util.TreeSet;, +		int comp = this.type.compareToIgnoreCase(other.type);, +		if (comp != 0) {, +			return comp;, +		}, +		comp = this.subtype.compareToIgnoreCase(other.subtype);, +		if (comp != 0) {, +			return comp;, +		}, +		comp = this.parameters.size() - other.parameters.size();, +		if (comp != 0) {, +			return comp;, +		}, +		Iterator<String> thisAttributes = new TreeSet<String>(this.parameters.keySet()).iterator();, +		Iterator<String> otherAttributes = new TreeSet<String>(other.parameters.keySet()).iterator();, +		while (thisAttributes.hasNext()) {, +			String thisAttribute = thisAttributes.next();, +			String otherAttribute = otherAttributes.next();, +			comp = thisAttribute.compareToIgnoreCase(otherAttribute);, +			if (comp != 0) {, +				return comp;, +			}, +			String thisValue = this.parameters.get(thisAttribute);, +			String otherValue = other.parameters.get(otherAttribute);, +			if (otherValue == null) {, +				otherValue = "";, +			}, +			comp = thisValue.compareTo(otherValue);, +			if (comp != 0) {, +				return comp;, +			}, +		}, +		return 0;, +		appendTo(this.parameters, builder);, +	}, +, +	private static void appendTo(Map<String, String> map, StringBuilder builder) {, +		for (Map.Entry<String, String> entry : map.entrySet()) {, +++ b/org.springframework.web/src/test/java/org/springframework/http/MediaTypeTests.java, +		MediaType audioBasic07 = new MediaType("audio", "basic", 0.7);, +		expected.add(audioBasic07);, +				assertSame("Invalid media type at " + j + ", run " + i, expected.get(j), result.get(j));, +			}, +	@Test, +	public void compareToConsistentWithEquals() {, +		MediaType m1 = MediaType.parseMediaType("text/html; q=0.7; charset=iso-8859-1");, +		MediaType m2 = MediaType.parseMediaType("text/html; charset=iso-8859-1; q=0.7");, +, +		assertEquals("Media types not equal", m1, m2);, +		assertEquals("compareTo() not consistent with equals", 0, m1.compareTo(m2));, +		assertEquals("compareTo() not consistent with equals", 0, m2.compareTo(m1));, +	}, +, +	@Test, +	public void compareToCaseSensitivity() {, +		MediaType m1 = new MediaType("audio", "basic");, +		MediaType m2 = new MediaType("Audio", "Basic");, +		assertEquals("Invalid comparison result", 0, m1.compareTo(m2));, +		assertEquals("Invalid comparison result", 0, m2.compareTo(m1));, +]