[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/groovy/GroovyMarkupConfig.java, +	MarkupTemplateEngine getTemplateEngine();, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/groovy/GroovyMarkupConfig.java, +	MarkupTemplateEngine getTemplateEngine();, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/groovy/GroovyMarkupConfigurer.java, +			this.templateEngine = new MarkupTemplateEngine(templateClassLoader, this, new LocaleTemplateResolver());, +	 * Resolve a template from the given template path., +	 * <p>The default implementation uses the Locale associated with the current, +	 * request, as obtained through, +	 * {@link org.springframework.context.i18n.LocaleContextHolder LocaleContextHolder},, +	 * to find the template file. Effectively the locale configured at the engine, +	 * level is ignored., +	 *, +	 * @param classLoader, +	 * @param templatePath, +	 * @return, +	 * @throws IOException, +	protected URL resolveTemplate(ClassLoader classLoader, String templatePath) throws IOException {, +		MarkupTemplateEngine.TemplateResource resource = MarkupTemplateEngine.TemplateResource.parse(templatePath);, +		Locale locale = LocaleContextHolder.getLocale();, +		URL url = classLoader.getResource(resource.withLocale(locale.toString().replace("-", "_")).toString());, +		if (url == null) {, +			url = classLoader.getResource(resource.withLocale(locale.getLanguage()).toString());, +		}, +		if (url == null) {, +			url = classLoader.getResource(resource.withLocale(null).toString());, +		}, +		if (url == null) {, +			throw new IOException("Unable to load template:" + templatePath);, +		}, +		return url;, +	 * Custom {@link TemplateResolver template resolver} that simply delegates to, +	 * {@link #resolveTemplate(ClassLoader, String)}.., +	private class LocaleTemplateResolver implements TemplateResolver {, +		public URL resolveTemplate(String templatePath) throws IOException {, +			return GroovyMarkupConfigurer.this.resolveTemplate(this.classLoader, templatePath);]