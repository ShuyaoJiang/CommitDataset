[+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AbstractMonitoringInterceptor.java, + * Provides configurable "prefix and "suffix" properties that help to, + * classify/group performance monitoring results., + * <p>In their {@link #invokeUnderTrace} implementation, subclasses should call the, + * {@link #createInvocationTraceName} method to create a name for the given trace,, + * including information about the method invocation along with a prefix/suffix., +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AbstractMonitoringInterceptor.java, + * Provides configurable "prefix and "suffix" properties that help to, + * classify/group performance monitoring results., + * <p>In their {@link #invokeUnderTrace} implementation, subclasses should call the, + * {@link #createInvocationTraceName} method to create a name for the given trace,, + * including information about the method invocation along with a prefix/suffix., +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AbstractTraceInterceptor.java, +	/**, +	 * Indicates whether to pass an exception to the logger., +	 * @see #writeToLog(Log, String, Throwable), +	 */, +	private boolean logExceptionStackTrace = true;, +, +	/**, +	 * Set whether to pass an exception to the logger, suggesting inclusion, +	 * of its stack trace into the log. Default is "true"; set this to "false", +	 * in order to reduce the log output to just the trace message (which may, +	 * include the exception class name and exception message, if applicable)., +	 * @since 4.3.10, +	 */, +	public void setLogExceptionStackTrace(boolean logExceptionStackTrace) {, +		this.logExceptionStackTrace = logExceptionStackTrace;, +	}, +, +	/**, +	 * Write the supplied trace message to the supplied {@code Log} instance., +	 * <p>To be called by {@link #invokeUnderTrace} for enter/exit messages., +	 * <p>Delegates to {@link #writeToLog(Log, String, Throwable)} as the, +	 * ultimate delegate that controls the underlying logger invocation., +	 * @since 4.3.10, +	 * @see #writeToLog(Log, String, Throwable), +	 */, +	protected void writeToLog(Log logger, String message) {, +		writeToLog(logger, message, null);, +	}, +, +	/**, +	 * Write the supplied trace message and {@link Throwable} to the, +	 * supplied {@code Log} instance., +	 * <p>To be called by {@link #invokeUnderTrace} for enter/exit outcomes,, +	 * potentially including an exception. Note that an exception's stack trace, +	 * won't get logged when {@link #setLogExceptionStackTrace} is "false"., +	 * <p>By default messages are written at {@code TRACE} level. Subclasses, +	 * can override this method to control which level the message is written, +	 * at, typically also overriding {@link #isLogEnabled} accordingly., +	 * @since 4.3.10, +	 * @see #setLogExceptionStackTrace, +	 * @see #isLogEnabled, +	 */, +	protected void writeToLog(Log logger, String message, @Nullable Throwable ex) {, +		if (ex != null && this.logExceptionStackTrace) {, +			logger.trace(message, ex);, +		}, +		else {, +			logger.trace(message);, +		}, +	}, +, +	 * the default behavior, and may delegate to {@code writeToLog} for actual, +	 * messages to be written., +	 * @see #writeToLog(Log, String), +	 * @see #writeToLog(Log, String, Throwable), +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AbstractMonitoringInterceptor.java, + * Provides configurable "prefix and "suffix" properties that help to, + * classify/group performance monitoring results., + * <p>In their {@link #invokeUnderTrace} implementation, subclasses should call the, + * {@link #createInvocationTraceName} method to create a name for the given trace,, + * including information about the method invocation along with a prefix/suffix., +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AbstractTraceInterceptor.java, +	/**, +	 * Indicates whether to pass an exception to the logger., +	 * @see #writeToLog(Log, String, Throwable), +	 */, +	private boolean logExceptionStackTrace = true;, +, +	/**, +	 * Set whether to pass an exception to the logger, suggesting inclusion, +	 * of its stack trace into the log. Default is "true"; set this to "false", +	 * in order to reduce the log output to just the trace message (which may, +	 * include the exception class name and exception message, if applicable)., +	 * @since 4.3.10, +	 */, +	public void setLogExceptionStackTrace(boolean logExceptionStackTrace) {, +		this.logExceptionStackTrace = logExceptionStackTrace;, +	}, +, +	/**, +	 * Write the supplied trace message to the supplied {@code Log} instance., +	 * <p>To be called by {@link #invokeUnderTrace} for enter/exit messages., +	 * <p>Delegates to {@link #writeToLog(Log, String, Throwable)} as the, +	 * ultimate delegate that controls the underlying logger invocation., +	 * @since 4.3.10, +	 * @see #writeToLog(Log, String, Throwable), +	 */]