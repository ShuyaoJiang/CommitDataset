[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultRequest.java, +	ServerWebExchange exchange() {, +		return this.exchange;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultRequest.java, +	ServerWebExchange exchange() {, +		return this.exchange;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/Request.java, +		 * Return the headers as a {@link HttpHeaders} instance., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultRequest.java, +	ServerWebExchange exchange() {, +		return this.exchange;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/Request.java, +		 * Return the headers as a {@link HttpHeaders} instance., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/RequestPredicates.java, +				if (request instanceof DefaultRequest) {, +					DefaultRequest defaultRequest = (DefaultRequest) request;, +					defaultRequest.exchange().getAttributes().put(Router.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables);, +				}, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultRequest.java, +	ServerWebExchange exchange() {, +		return this.exchange;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/Request.java, +		 * Return the headers as a {@link HttpHeaders} instance., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/RequestPredicates.java, +				if (request instanceof DefaultRequest) {, +					DefaultRequest defaultRequest = (DefaultRequest) request;, +					defaultRequest.exchange().getAttributes().put(Router.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables);, +				}, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/support/RequestWrapper.java, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultRequest.java, +	ServerWebExchange exchange() {, +		return this.exchange;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/Request.java, +		 * Return the headers as a {@link HttpHeaders} instance., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/RequestPredicates.java, +				if (request instanceof DefaultRequest) {, +					DefaultRequest defaultRequest = (DefaultRequest) request;, +					defaultRequest.exchange().getAttributes().put(Router.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables);, +				}, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/support/RequestWrapper.java, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/function/DefaultRequestTests.java, +	public void attribute() throws Exception {, +		when(mockExchange.getAttribute("foo")).thenReturn(Optional.of("bar"));, +		assertEquals(Optional.of("bar"), defaultRequest.attribute("foo"));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultRequest.java, +	ServerWebExchange exchange() {, +		return this.exchange;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/Request.java, +		 * Return the headers as a {@link HttpHeaders} instance., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/RequestPredicates.java, +				if (request instanceof DefaultRequest) {, +					DefaultRequest defaultRequest = (DefaultRequest) request;, +					defaultRequest.exchange().getAttributes().put(Router.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables);, +				}, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/support/RequestWrapper.java, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/function/DefaultRequestTests.java, +	public void attribute() throws Exception {, +		when(mockExchange.getAttribute("foo")).thenReturn(Optional.of("bar"));, +		assertEquals(Optional.of("bar"), defaultRequest.attribute("foo"));, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/function/MockRequest.java, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultRequest.java, +	ServerWebExchange exchange() {, +		return this.exchange;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/Request.java, +		 * Return the headers as a {@link HttpHeaders} instance., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/RequestPredicates.java, +				if (request instanceof DefaultRequest) {, +					DefaultRequest defaultRequest = (DefaultRequest) request;, +					defaultRequest.exchange().getAttributes().put(Router.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables);, +				}, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/support/RequestWrapper.java, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/function/DefaultRequestTests.java, +	public void attribute() throws Exception {, +		when(mockExchange.getAttribute("foo")).thenReturn(Optional.of("bar"));, +		assertEquals(Optional.of("bar"), defaultRequest.attribute("foo"));, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/function/MockRequest.java, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/function/RequestWrapperTests.java]