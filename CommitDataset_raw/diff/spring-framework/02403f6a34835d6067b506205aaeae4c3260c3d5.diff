[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/OrderedMessageSender.java, +, +import org.springframework.lang.Nullable;, + * Submit messages to an {@link ExecutorSubscribableChannel}, one at a time., + * The channel must have been configured with {@link #configureOutboundChannel}., +		public void afterMessageHandled(, +				Message<?> msg, MessageChannel ch, MessageHandler handler, @Nullable Exception ex) {, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/OrderedMessageSender.java, +, +import org.springframework.lang.Nullable;, + * Submit messages to an {@link ExecutorSubscribableChannel}, one at a time., + * The channel must have been configured with {@link #configureOutboundChannel}., +		public void afterMessageHandled(, +				Message<?> msg, MessageChannel ch, MessageHandler handler, @Nullable Exception ex) {, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/MessageBrokerRegistry.java, + * Copyright 2002-2018 the original author or authors., +	/**, +	 * Whether the client must receive messages in the order of publication., +	 * <p>By default messages sent to the {@code "clientOutboundChannel"} may, +	 * not be processed in the same order because the channel is backed by a, +	 * ThreadPoolExecutor that in turn does not guarantee processing in order., +	 * <p>When this flag is set to {@code true} messages within the same session, +	 * will be sent to the {@code "clientOutboundChannel"} one at a time in, +	 * order to preserve the order of publication. Enable this only if needed, +	 * since there is some performance overhead to keep messages in order., +	 * @since 5.1, +	 */, +	public MessageBrokerRegistry setPreservePublishOrder(boolean preservePublishOrder) {, +		this.preservePublishOrder = preservePublishOrder;, +		return this;, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/OrderedMessageSender.java, +, +import org.springframework.lang.Nullable;, + * Submit messages to an {@link ExecutorSubscribableChannel}, one at a time., + * The channel must have been configured with {@link #configureOutboundChannel}., +		public void afterMessageHandled(, +				Message<?> msg, MessageChannel ch, MessageHandler handler, @Nullable Exception ex) {, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/MessageBrokerRegistry.java, + * Copyright 2002-2018 the original author or authors., +	/**, +	 * Whether the client must receive messages in the order of publication., +	 * <p>By default messages sent to the {@code "clientOutboundChannel"} may, +	 * not be processed in the same order because the channel is backed by a, +	 * ThreadPoolExecutor that in turn does not guarantee processing in order., +	 * <p>When this flag is set to {@code true} messages within the same session, +	 * will be sent to the {@code "clientOutboundChannel"} one at a time in, +	 * order to preserve the order of publication. Enable this only if needed, +	 * since there is some performance overhead to keep messages in order., +	 * @since 5.1, +	 */, +	public MessageBrokerRegistry setPreservePublishOrder(boolean preservePublishOrder) {, +		this.preservePublishOrder = preservePublishOrder;, +		return this;, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/ChannelInterceptor.java, + * Copyright 2002-2018 the original author or authors., + * @see Message, + * @see MessageChannel, +	default void afterSendCompletion(, +			Message<?> message, MessageChannel channel, boolean sent, @Nullable Exception ex) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/OrderedMessageSender.java, +, +import org.springframework.lang.Nullable;, + * Submit messages to an {@link ExecutorSubscribableChannel}, one at a time., + * The channel must have been configured with {@link #configureOutboundChannel}., +		public void afterMessageHandled(, +				Message<?> msg, MessageChannel ch, MessageHandler handler, @Nullable Exception ex) {, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/MessageBrokerRegistry.java, + * Copyright 2002-2018 the original author or authors., +	/**, +	 * Whether the client must receive messages in the order of publication., +	 * <p>By default messages sent to the {@code "clientOutboundChannel"} may, +	 * not be processed in the same order because the channel is backed by a, +	 * ThreadPoolExecutor that in turn does not guarantee processing in order., +	 * <p>When this flag is set to {@code true} messages within the same session, +	 * will be sent to the {@code "clientOutboundChannel"} one at a time in, +	 * order to preserve the order of publication. Enable this only if needed, +	 * since there is some performance overhead to keep messages in order., +	 * @since 5.1, +	 */, +	public MessageBrokerRegistry setPreservePublishOrder(boolean preservePublishOrder) {, +		this.preservePublishOrder = preservePublishOrder;, +		return this;, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/ChannelInterceptor.java, + * Copyright 2002-2018 the original author or authors., + * @see Message, + * @see MessageChannel, +	default void afterSendCompletion(, +			Message<?> message, MessageChannel channel, boolean sent, @Nullable Exception ex) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/ExecutorChannelInterceptor.java, + * Copyright 2002-2018 the original author or authors., + * implementations that can be configured with an {@code Executor}., + * @see Message, + * @see MessageChannel]