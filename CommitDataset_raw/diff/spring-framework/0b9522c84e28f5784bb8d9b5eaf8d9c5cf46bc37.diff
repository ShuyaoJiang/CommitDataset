[+++ b/build.gradle, +		testCompile("io.mockk:mockk:1.9"), +++ b/build.gradle, +		testCompile("io.mockk:mockk:1.9"), +++ b/spring-beans/src/test/kotlin/org/springframework/beans/factory/BeanFactoryExtensionsTests.kt, + * Copyright 2002-2019 the original author or authors., +import io.mockk.mockk, +import io.mockk.verify, +	val bf = mockk<BeanFactory>(relaxed = true), +		verify { bf.getBean(Foo::class.java) }, +		verify { bf.getBean(name, Foo::class.java) }, +		verify { bf.getBean(Foo::class.java, arg1, arg2) }, +		verify { bf.getBeanProvider<ObjectProvider<Foo>>(ofType<ResolvableType>()) }, +++ b/build.gradle, +		testCompile("io.mockk:mockk:1.9"), +++ b/spring-beans/src/test/kotlin/org/springframework/beans/factory/BeanFactoryExtensionsTests.kt, + * Copyright 2002-2019 the original author or authors., +import io.mockk.mockk, +import io.mockk.verify, +	val bf = mockk<BeanFactory>(relaxed = true), +		verify { bf.getBean(Foo::class.java) }, +		verify { bf.getBean(name, Foo::class.java) }, +		verify { bf.getBean(Foo::class.java, arg1, arg2) }, +		verify { bf.getBeanProvider<ObjectProvider<Foo>>(ofType<ResolvableType>()) }, +++ b/spring-beans/src/test/kotlin/org/springframework/beans/factory/ListableBeanFactoryExtensionsTests.kt, + * Copyright 2002-2019 the original author or authors., +import io.mockk.mockk, +import io.mockk.verify, +	val lbf = mockk<ListableBeanFactory>(relaxed = true), +		verify { lbf.getBeanNamesForType(Foo::class.java, true , true) }, +		verify { lbf.getBeanNamesForType(Foo::class.java, false , true) }, +		verify { lbf.getBeanNamesForType(Foo::class.java, false , false) }, +		verify { lbf.getBeansOfType(Foo::class.java, true , true) }, +		verify { lbf.getBeansOfType(Foo::class.java, false , true) }, +		verify { lbf.getBeansOfType(Foo::class.java, false , false) }, +		verify { lbf.getBeanNamesForAnnotation(Bar::class.java) }, +		verify { lbf.getBeansWithAnnotation(Bar::class.java) }, +		verify { lbf.findAnnotationOnBean(name, Bar::class.java) }, +++ b/build.gradle, +		testCompile("io.mockk:mockk:1.9"), +++ b/spring-beans/src/test/kotlin/org/springframework/beans/factory/BeanFactoryExtensionsTests.kt, + * Copyright 2002-2019 the original author or authors., +import io.mockk.mockk, +import io.mockk.verify, +	val bf = mockk<BeanFactory>(relaxed = true), +		verify { bf.getBean(Foo::class.java) }, +		verify { bf.getBean(name, Foo::class.java) }, +		verify { bf.getBean(Foo::class.java, arg1, arg2) }, +		verify { bf.getBeanProvider<ObjectProvider<Foo>>(ofType<ResolvableType>()) }, +++ b/spring-beans/src/test/kotlin/org/springframework/beans/factory/ListableBeanFactoryExtensionsTests.kt, + * Copyright 2002-2019 the original author or authors., +import io.mockk.mockk, +import io.mockk.verify, +	val lbf = mockk<ListableBeanFactory>(relaxed = true), +		verify { lbf.getBeanNamesForType(Foo::class.java, true , true) }, +		verify { lbf.getBeanNamesForType(Foo::class.java, false , true) }, +		verify { lbf.getBeanNamesForType(Foo::class.java, false , false) }, +		verify { lbf.getBeansOfType(Foo::class.java, true , true) }, +		verify { lbf.getBeansOfType(Foo::class.java, false , true) }, +		verify { lbf.getBeansOfType(Foo::class.java, false , false) }, +		verify { lbf.getBeanNamesForAnnotation(Bar::class.java) }, +		verify { lbf.getBeansWithAnnotation(Bar::class.java) }, +		verify { lbf.findAnnotationOnBean(name, Bar::class.java) }, +++ b/spring-core/src/test/kotlin/org/springframework/core/env/PropertyResolverExtensionsTests.kt, + * Copyright 2002-2019 the original author or authors., +import io.mockk.mockk, +import io.mockk.verify, +	val propertyResolver = mockk<PropertyResolver>(relaxed = true), +		propertyResolver["name"], +		verify { propertyResolver.getProperty("name") }, +		propertyResolver.getProperty<String>("name"), +		verify { propertyResolver.getProperty("name", String::class.java) }, +		propertyResolver.getRequiredProperty<String>("name"), +		verify { propertyResolver.getRequiredProperty("name", String::class.java) }, +++ b/build.gradle, +		testCompile("io.mockk:mockk:1.9"), +++ b/spring-beans/src/test/kotlin/org/springframework/beans/factory/BeanFactoryExtensionsTests.kt, + * Copyright 2002-2019 the original author or authors., +import io.mockk.mockk, +import io.mockk.verify, +	val bf = mockk<BeanFactory>(relaxed = true), +		verify { bf.getBean(Foo::class.java) }, +		verify { bf.getBean(name, Foo::class.java) }, +		verify { bf.getBean(Foo::class.java, arg1, arg2) }, +		verify { bf.getBeanProvider<ObjectProvider<Foo>>(ofType<ResolvableType>()) }, +++ b/spring-beans/src/test/kotlin/org/springframework/beans/factory/ListableBeanFactoryExtensionsTests.kt, + * Copyright 2002-2019 the original author or authors., +import io.mockk.mockk, +import io.mockk.verify, +	val lbf = mockk<ListableBeanFactory>(relaxed = true), +		verify { lbf.getBeanNamesForType(Foo::class.java, true , true) }, +		verify { lbf.getBeanNamesForType(Foo::class.java, false , true) }, +		verify { lbf.getBeanNamesForType(Foo::class.java, false , false) }, +		verify { lbf.getBeansOfType(Foo::class.java, true , true) }, +		verify { lbf.getBeansOfType(Foo::class.java, false , true) }, +		verify { lbf.getBeansOfType(Foo::class.java, false , false) }, +		verify { lbf.getBeanNamesForAnnotation(Bar::class.java) }, +		verify { lbf.getBeansWithAnnotation(Bar::class.java) }, +		verify { lbf.findAnnotationOnBean(name, Bar::class.java) }, +++ b/spring-core/src/test/kotlin/org/springframework/core/env/PropertyResolverExtensionsTests.kt]