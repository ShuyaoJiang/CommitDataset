[+++ b/spring-core/src/main/java/org/springframework/core/CollectionFactory.java, +	private static final Set<Class<?>> approximableCollectionTypes = new HashSet<Class<?>>(11);, +	private static final Set<Class<?>> approximableMapTypes = new HashSet<Class<?>>(7);, +	 * Determine whether the given collection type is an <em>approximable</em> type,, +	 * @return {@code true} if the type is <em>approximable</em>, +	 * @param collection the original collection object, +	 * @return the new, empty collection instance, +	 * @see #isApproximableCollectionType, +	 * @see java.util.ArrayList, +	 * @see java.util.EnumSet, +	 * @see java.util.TreeSet, +	 * @see java.util.LinkedHashSet, +			// Cast is necessary for compilation in Eclipse 4.4.1., +			Collection<E> enumSet = (Collection<E>) EnumSet.copyOf((EnumSet) collection);, +			enumSet.clear();, +			return enumSet;, +	 * @param collectionType the desired type of the target collection, +	 * @return the new collection instance, +	 * @param collectionType the desired type of the target collection; never {@code null}, +	 * @return the new collection instance, +	 * @see java.util.ArrayList, +			// Cast is necessary for compilation in Eclipse 4.4.1., +	 * Determine whether the given map type is an <em>approximable</em> type,, +	 * @return {@code true} if the type is <em>approximable</em>, +	 * @return the new, empty Map instance, +	 * @see #isApproximableMapType, +	 * @see java.util.EnumMap, +			EnumMap enumMap = new EnumMap((EnumMap) map);, +			enumMap.clear();, +			return enumMap;, +	 * Create the most appropriate map for the given map type., +	 * Create the most appropriate map for the given map type., +	 * @see java.util.EnumMap, +	 * @since 4.1.4, +++ b/spring-core/src/main/java/org/springframework/core/CollectionFactory.java, +	private static final Set<Class<?>> approximableCollectionTypes = new HashSet<Class<?>>(11);, +	private static final Set<Class<?>> approximableMapTypes = new HashSet<Class<?>>(7);, +	 * Determine whether the given collection type is an <em>approximable</em> type,, +	 * @return {@code true} if the type is <em>approximable</em>, +	 * @param collection the original collection object, +	 * @return the new, empty collection instance, +	 * @see #isApproximableCollectionType, +	 * @see java.util.ArrayList, +	 * @see java.util.EnumSet, +	 * @see java.util.TreeSet, +	 * @see java.util.LinkedHashSet, +			// Cast is necessary for compilation in Eclipse 4.4.1., +			Collection<E> enumSet = (Collection<E>) EnumSet.copyOf((EnumSet) collection);, +			enumSet.clear();, +			return enumSet;, +	 * @param collectionType the desired type of the target collection, +	 * @return the new collection instance, +	 * @param collectionType the desired type of the target collection; never {@code null}, +	 * @return the new collection instance, +	 * @see java.util.ArrayList, +			// Cast is necessary for compilation in Eclipse 4.4.1., +	 * Determine whether the given map type is an <em>approximable</em> type,, +	 * @return {@code true} if the type is <em>approximable</em>, +	 * @return the new, empty Map instance, +	 * @see #isApproximableMapType, +	 * @see java.util.EnumMap, +			EnumMap enumMap = new EnumMap((EnumMap) map);, +			enumMap.clear();, +			return enumMap;, +	 * Create the most appropriate map for the given map type., +	 * Create the most appropriate map for the given map type., +	 * @see java.util.EnumMap, +	 * @since 4.1.4, +++ b/spring-core/src/test/java/org/springframework/core/CollectionFactoryTests.java, +			// by createApproximateCollection() is of type Collection<Color>. Thus, 42, +			// cannot be cast to a Color., +			ints.add(42);, +			// by createApproximateMap() are of type Color. Thus "foo" cannot be cast to a, +			// Color., +			map.put("foo", 1);, +	public void createApproximateCollectionFromEmptyHashSet() {, +		Collection<String> set = createApproximateCollection(new HashSet<String>(), 2);, +		assertThat(set.size(), is(0));, +	}, +, +	@Test, +	public void createApproximateCollectionFromNonEmptyHashSet() {, +		HashSet<String> hashSet = new HashSet<String>();, +		hashSet.add("foo");, +		Collection<String> set = createApproximateCollection(hashSet, 2);, +		assertThat(set.size(), is(0));, +	}, +, +	@Test, +	public void createApproximateCollectionFromEmptyEnumSet() {, +		Collection<Color> colors = createApproximateCollection(EnumSet.noneOf(Color.class), 2);, +		assertThat(colors.size(), is(0));, +	}, +, +	@Test, +	public void createApproximateCollectionFromNonEmptyEnumSet() {, +		Collection<Color> colors = createApproximateCollection(EnumSet.of(Color.BLUE), 2);, +		assertThat(colors.size(), is(0));, +	}, +]