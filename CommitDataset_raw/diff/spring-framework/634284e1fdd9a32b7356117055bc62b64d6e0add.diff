[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java, + * Copyright 2002-2013 the original author or authors., +import java.util.Collections;, +import java.util.LinkedHashSet;, +import org.springframework.core.BridgeMethodResolver;, +			List<Method> methods = new ArrayList<Method>(Arrays.asList(getMethods(type, targetObject)));, +				methods = filter.filter(methods);, +			// Sort methods into a sensible order, +			Collections.sort(methods, new Comparator<Method>() {, +			// Resolve any bridge methods, +			for (int i = 0; i < methods.size(); i++) {, +				methods.set(i, BridgeMethodResolver.findBridgedMethod(methods.get(i)));, +			}, +, +			// Remove duplicate methods (possible due to resolved bridge methods), +			methods = new ArrayList<Method>(new LinkedHashSet<Method>(methods));, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java, + * Copyright 2002-2013 the original author or authors., +import java.util.Collections;, +import java.util.LinkedHashSet;, +import org.springframework.core.BridgeMethodResolver;, +			List<Method> methods = new ArrayList<Method>(Arrays.asList(getMethods(type, targetObject)));, +				methods = filter.filter(methods);, +			// Sort methods into a sensible order, +			Collections.sort(methods, new Comparator<Method>() {, +			// Resolve any bridge methods, +			for (int i = 0; i < methods.size(); i++) {, +				methods.set(i, BridgeMethodResolver.findBridgedMethod(methods.get(i)));, +			}, +, +			// Remove duplicate methods (possible due to resolved bridge methods), +			methods = new ArrayList<Method>(new LinkedHashSet<Method>(methods));, +, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, +import java.io.Serializable;, +	@Test, +	public void SPR_10210() throws Exception {, +		StandardEvaluationContext context = new StandardEvaluationContext();, +		context.setVariable("bridgeExample", new org.springframework.expression.spel.spr10210.D());, +		Expression parseExpression = parser.parseExpression("#bridgeExample.bridgetMethod()");, +		parseExpression.getValue(context);, +	}, +, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java, + * Copyright 2002-2013 the original author or authors., +import java.util.Collections;, +import java.util.LinkedHashSet;, +import org.springframework.core.BridgeMethodResolver;, +			List<Method> methods = new ArrayList<Method>(Arrays.asList(getMethods(type, targetObject)));, +				methods = filter.filter(methods);, +			// Sort methods into a sensible order, +			Collections.sort(methods, new Comparator<Method>() {, +			// Resolve any bridge methods, +			for (int i = 0; i < methods.size(); i++) {, +				methods.set(i, BridgeMethodResolver.findBridgedMethod(methods.get(i)));, +			}, +, +			// Remove duplicate methods (possible due to resolved bridge methods), +			methods = new ArrayList<Method>(new LinkedHashSet<Method>(methods));, +, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, +import java.io.Serializable;, +	@Test, +	public void SPR_10210() throws Exception {, +		StandardEvaluationContext context = new StandardEvaluationContext();, +		context.setVariable("bridgeExample", new org.springframework.expression.spel.spr10210.D());, +		Expression parseExpression = parser.parseExpression("#bridgeExample.bridgetMethod()");, +		parseExpression.getValue(context);, +	}, +, +, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/spr10210/A.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.expression.spel.spr10210;, +, +import org.springframework.expression.spel.spr10210.comp.B;, +import org.springframework.expression.spel.spr10210.infra.C;, +, +abstract class A extends B<C> {, +}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java, + * Copyright 2002-2013 the original author or authors., +import java.util.Collections;]