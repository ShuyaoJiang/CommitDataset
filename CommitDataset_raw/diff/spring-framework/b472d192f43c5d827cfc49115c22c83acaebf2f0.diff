[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/CachingResourceResolver.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Arrays;, +import java.util.stream.Collectors;, +import org.springframework.util.StringUtils;, +			String codingKey = getContentCodingKey(exchange);, +			if (codingKey != null) {, +				key.append("+encoding=").append(codingKey);, +	@Nullable, +	private static String getContentCodingKey(ServerWebExchange exchange) {, +		String header = exchange.getRequest().getHeaders().getFirst("Accept-Encoding");, +		if (!StringUtils.hasText(header)) {, +			return null;, +		}, +		return Arrays.stream(StringUtils.tokenizeToStringArray(header, ",")), +				.map(token -> {, +					int index = token.indexOf(';');, +					return (index >= 0 ? token.substring(0, index) : token).trim().toLowerCase();, +				}), +				.filter(coding -> !coding.equals("*")), +				.filter(coding -> !coding.equals("identity")), +				.sorted(), +				.collect(Collectors.joining(","));, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/CachingResourceResolver.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Arrays;, +import java.util.stream.Collectors;, +import org.springframework.util.StringUtils;, +			String codingKey = getContentCodingKey(exchange);, +			if (codingKey != null) {, +				key.append("+encoding=").append(codingKey);, +	@Nullable, +	private static String getContentCodingKey(ServerWebExchange exchange) {, +		String header = exchange.getRequest().getHeaders().getFirst("Accept-Encoding");, +		if (!StringUtils.hasText(header)) {, +			return null;, +		}, +		return Arrays.stream(StringUtils.tokenizeToStringArray(header, ",")), +				.map(token -> {, +					int index = token.indexOf(';');, +					return (index >= 0 ? token.substring(0, index) : token).trim().toLowerCase();, +				}), +				.filter(coding -> !coding.equals("*")), +				.filter(coding -> !coding.equals("identity")), +				.sorted(), +				.collect(Collectors.joining(","));, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/EncodedResourceResolver.java, +			headers.add(HttpHeaders.VARY, HttpHeaders.ACCEPT_ENCODING);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/CachingResourceResolver.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Arrays;, +import java.util.stream.Collectors;, +import org.springframework.util.StringUtils;, +			String codingKey = getContentCodingKey(exchange);, +			if (codingKey != null) {, +				key.append("+encoding=").append(codingKey);, +	@Nullable, +	private static String getContentCodingKey(ServerWebExchange exchange) {, +		String header = exchange.getRequest().getHeaders().getFirst("Accept-Encoding");, +		if (!StringUtils.hasText(header)) {, +			return null;, +		}, +		return Arrays.stream(StringUtils.tokenizeToStringArray(header, ",")), +				.map(token -> {, +					int index = token.indexOf(';');, +					return (index >= 0 ? token.substring(0, index) : token).trim().toLowerCase();, +				}), +				.filter(coding -> !coding.equals("*")), +				.filter(coding -> !coding.equals("identity")), +				.sorted(), +				.collect(Collectors.joining(","));, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/EncodedResourceResolver.java, +			headers.add(HttpHeaders.VARY, HttpHeaders.ACCEPT_ENCODING);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/GzipResourceResolver.java, +			headers.add(HttpHeaders.VARY, HttpHeaders.ACCEPT_ENCODING);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/CachingResourceResolver.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Arrays;, +import java.util.stream.Collectors;, +import org.springframework.util.StringUtils;, +			String codingKey = getContentCodingKey(exchange);, +			if (codingKey != null) {, +				key.append("+encoding=").append(codingKey);, +	@Nullable, +	private static String getContentCodingKey(ServerWebExchange exchange) {, +		String header = exchange.getRequest().getHeaders().getFirst("Accept-Encoding");, +		if (!StringUtils.hasText(header)) {, +			return null;, +		}, +		return Arrays.stream(StringUtils.tokenizeToStringArray(header, ",")), +				.map(token -> {, +					int index = token.indexOf(';');, +					return (index >= 0 ? token.substring(0, index) : token).trim().toLowerCase();, +				})]