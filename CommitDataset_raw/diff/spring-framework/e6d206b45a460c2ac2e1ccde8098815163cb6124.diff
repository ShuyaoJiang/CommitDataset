[+++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java, +import java.util.StringJoiner;, +	private final String description;, +, +		this.description = initDescription(this.beanType, this.method);, +		this.description = initDescription(this.beanType, this.method);, +		this.description = initDescription(this.beanType, this.method);, +		this.description = handlerMethod.description;, +		this.description = handlerMethod.description;, +	private static String initDescription(Class<?> beanType, Method method) {, +		StringJoiner joiner = new StringJoiner(", ", "(", ")");, +		for (Class<?> paramType : method.getParameterTypes()) {, +			joiner.add(paramType.getSimpleName());, +		}, +		return beanType.getName() + "#" + method.getName() + joiner.toString();, +	}, +, +		return this.description;, +++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java, +import java.util.StringJoiner;, +	private final String description;, +, +		this.description = initDescription(this.beanType, this.method);, +		this.description = initDescription(this.beanType, this.method);, +		this.description = initDescription(this.beanType, this.method);, +		this.description = handlerMethod.description;, +		this.description = handlerMethod.description;, +	private static String initDescription(Class<?> beanType, Method method) {, +		StringJoiner joiner = new StringJoiner(", ", "(", ")");, +		for (Class<?> paramType : method.getParameterTypes()) {, +			joiner.add(paramType.getSimpleName());, +		}, +		return beanType.getName() + "#" + method.getName() + joiner.toString();, +	}, +, +		return this.description;, +++ b/spring-web/src/main/java/org/springframework/web/server/handler/DefaultWebFilterChain.java, + * Copyright 2002-2019 the original author or authors., +	private final DefaultWebFilterChain chain;, +		this.chain = chain.chain;, +			@Nullable WebFilter currentFilter, @Nullable DefaultWebFilterChain chain) {, +		this.chain = chain;, +				this.currentFilter != null && this.chain != null ?, +						invokeFilter(this.currentFilter, this.chain, exchange) :, +	private Mono<Void> invokeFilter(WebFilter current, DefaultWebFilterChain chain, ServerWebExchange exchange) {, +		return current.filter(exchange, chain), +				.checkpoint(current.getClass().getName() + " [DefaultWebFilterChain]");, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java, +import java.util.StringJoiner;, +	private final String description;, +, +		this.description = initDescription(this.beanType, this.method);, +		this.description = initDescription(this.beanType, this.method);, +		this.description = initDescription(this.beanType, this.method);, +		this.description = handlerMethod.description;, +		this.description = handlerMethod.description;, +	private static String initDescription(Class<?> beanType, Method method) {, +		StringJoiner joiner = new StringJoiner(", ", "(", ")");, +		for (Class<?> paramType : method.getParameterTypes()) {, +			joiner.add(paramType.getSimpleName());, +		}, +		return beanType.getName() + "#" + method.getName() + joiner.toString();, +	}, +, +		return this.description;, +++ b/spring-web/src/main/java/org/springframework/web/server/handler/DefaultWebFilterChain.java, + * Copyright 2002-2019 the original author or authors., +	private final DefaultWebFilterChain chain;, +		this.chain = chain.chain;, +			@Nullable WebFilter currentFilter, @Nullable DefaultWebFilterChain chain) {, +		this.chain = chain;, +				this.currentFilter != null && this.chain != null ?, +						invokeFilter(this.currentFilter, this.chain, exchange) :, +	private Mono<Void> invokeFilter(WebFilter current, DefaultWebFilterChain chain, ServerWebExchange exchange) {, +		return current.filter(exchange, chain), +				.checkpoint(current.getClass().getName() + " [DefaultWebFilterChain]");, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/server/handler/ExceptionHandlingWebHandler.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.http.HttpMethod;, +import org.springframework.http.server.reactive.ServerHttpRequest;, +import org.springframework.util.StringUtils;, +		List<WebExceptionHandler> handlersToUse = new ArrayList<>();, +		handlersToUse.add(new CheckpointInsertingHandler());, +		handlersToUse.addAll(handlers);, +		this.exceptionHandlers = Collections.unmodifiableList(handlersToUse);, +, +	/**, +	 * WebExceptionHandler to insert a checkpoint with current URL information., +	 * Must be the first in order to ensure we catch the error signal before, +	 * the exception is handled and e.g. turned into an error response., +	 * @since 5.2, + 	 */, +	private static class CheckpointInsertingHandler implements WebExceptionHandler {, +, +		@Override, +		public Mono<Void> handle(ServerWebExchange exchange, Throwable ex) {]