[+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/EnableAsync.java, + * found in Spring's {@code <task:*>} XML namespace., + *, + * <p>To be used on @{@link Configuration} classes as follows, where {@code MyAsyncBean}, + * is a user-defined type with one or more methods annotated with either Spring's, + * {@code @Async} annotation, the EJB 3.1 {@code @javax.ejb.Asynchronous} annotation,, + * or any custom annotation specified via the {@link #annotation} attribute., + * <p>The {@link #mode} attribute controls how advice is applied; if the mode is, + * the value of the {@link #proxyTargetClass} attribute will be ignored. Note also, + * that in this case the {@code spring-aspects} module JAR must be present on the, + * classpath., + * {@link AsyncConfigurer#getAsyncExecutor getAsyncExecutor()} method, and</li>, + * AsyncUncaughtExceptionHandler} through the {@link AsyncConfigurer#getAsyncUncaughtExceptionHandler, + * <p>Note: In the above example the {@code ThreadPoolTaskExecutor} is not a fully managed, + * Spring bean. Add the {@code @Bean} annotation to the {@code getAsyncExecutor()} method, + * if you want a fully managed bean. In such circumstances it is no longer necessary to, + * manually call the {@code executor.initialize()} method as this will be invoked, + * automatically when the bean is initialized., + *, + * The above XML-based and JavaConfig-based examples are equivalent except for the, + * setting of the <em>thread name prefix</em> of the {@code Executor}; this is because, + * the {@code <task:executor>} element does not expose such an attribute. This, + * demonstrates how the JavaConfig-based approach allows for maximum configurability, + * through direct access to actual componentry., + * @author Sam Brannen, +	 * Indicate the 'async' annotation type to be detected at either class, +	 * or method level., +	 * <p>By default, both Spring's @{@link Async} annotation and the EJB, +	 * 3.1 {@code @javax.ejb.Asynchronous} annotation will be detected., +	 * <p>This attribute exists so that developers can provide their own, +	 * custom annotation type to indicate that a method (or all methods of, +	 * a given class) should be invoked asynchronously., +	 * to standard Java interface-based proxies., +	 * <p><strong>Applicable only if the {@link #mode} is set to {@link AdviceMode#PROXY}</strong>., +	 * <p>The default is {@code false}., +	 * vs. another &mdash; for example, in tests., +	 * Indicate how async advice should be applied., +	 * <p>The default is {@link AdviceMode#PROXY}., +	 * {@link org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor, +	 * AsyncAnnotationBeanPostProcessor} should be applied., +	 * <p>The default is {@link Ordered#LOWEST_PRECEDENCE} in order to run]