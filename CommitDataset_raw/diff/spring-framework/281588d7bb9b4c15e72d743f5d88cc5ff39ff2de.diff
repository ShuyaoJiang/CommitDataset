[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +import org.springframework.messaging.simp.user.MultiServerUserRegistry;, +import org.springframework.messaging.simp.user.SimpUserRegistry;, +import org.springframework.messaging.simp.user.UserRegistryMessageHandler;, +import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;, +	private ApplicationContext applicationContext;, +, +		Map<String, MessageHandler> subscriptions = new HashMap<String, MessageHandler>(1);, +			subscriptions.put(destination, userDestinationMessageHandler());, +		destination = getBrokerRegistry().getUserRegistryBroadcast();, +		if (destination != null) {, +			subscriptions.put(destination, userRegistryMessageHandler());, +		}, +		handler.setSystemSubscriptions(subscriptions);, +		handler.setBroadcastDestination(destination);, +	public MessageHandler userRegistryMessageHandler() {, +		if (getBrokerRegistry().getUserRegistryBroadcast() == null) {, +			return new NoOpMessageHandler();, +		}, +		return new UserRegistryMessageHandler(userRegistry(), brokerMessagingTemplate(),, +				getBrokerRegistry().getUserRegistryBroadcast(), messageBrokerTaskScheduler());, +	}, +, +	// Expose alias for 4.1 compatibility, +, +	@Bean(name={"messageBrokerTaskScheduler", "messageBrokerSockJsTaskScheduler"}), +	public ThreadPoolTaskScheduler messageBrokerTaskScheduler() {, +		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();, +		scheduler.setThreadNamePrefix("MessageBroker-");, +		scheduler.setPoolSize(Runtime.getRuntime().availableProcessors());, +		scheduler.setRemoveOnCancelPolicy(true);, +		return scheduler;, +	}, +, +	@Bean, +		DefaultUserDestinationResolver resolver = new DefaultUserDestinationResolver(userRegistry());, +	@SuppressWarnings("deprecation"), +	public SimpUserRegistry userRegistry() {, +		return (getBrokerRegistry().getUserRegistryBroadcast() != null ?, +				new MultiServerUserRegistry(createLocalUserRegistry()) : createLocalUserRegistry());, +	}, +, +	protected abstract SimpUserRegistry createLocalUserRegistry();, +, +	/**, +	 * As of 4.2, UserSessionRegistry is deprecated in favor of SimpUserRegistry, +	 * exposing information about all connected users. The MultiServerUserRegistry, +	 * implementation in combination with UserRegistryMessageHandler can be used, +	 * to share user registries across multiple servers., +	 */, +	@Deprecated, +	@SuppressWarnings("deprecation"), +	protected org.springframework.messaging.simp.user.UserSessionRegistry userSessionRegistry() {, +		return null;, +	private static class NoOpMessageHandler implements MessageHandler {, +, +		@Override, +		public void handleMessage(Message<?> message) {, +		}, +, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +import org.springframework.messaging.simp.user.MultiServerUserRegistry;, +import org.springframework.messaging.simp.user.SimpUserRegistry;, +import org.springframework.messaging.simp.user.UserRegistryMessageHandler;, +import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;, +	private ApplicationContext applicationContext;, +, +		Map<String, MessageHandler> subscriptions = new HashMap<String, MessageHandler>(1);, +			subscriptions.put(destination, userDestinationMessageHandler());, +		destination = getBrokerRegistry().getUserRegistryBroadcast();, +		if (destination != null) {, +			subscriptions.put(destination, userRegistryMessageHandler());, +		}, +		handler.setSystemSubscriptions(subscriptions);, +		handler.setBroadcastDestination(destination);, +	public MessageHandler userRegistryMessageHandler() {, +		if (getBrokerRegistry().getUserRegistryBroadcast() == null) {, +			return new NoOpMessageHandler();, +		}, +		return new UserRegistryMessageHandler(userRegistry(), brokerMessagingTemplate(),, +				getBrokerRegistry().getUserRegistryBroadcast(), messageBrokerTaskScheduler());, +	}, +, +	// Expose alias for 4.1 compatibility, +, +	@Bean(name={"messageBrokerTaskScheduler", "messageBrokerSockJsTaskScheduler"}), +	public ThreadPoolTaskScheduler messageBrokerTaskScheduler() {, +		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();, +		scheduler.setThreadNamePrefix("MessageBroker-");, +		scheduler.setPoolSize(Runtime.getRuntime().availableProcessors());, +		scheduler.setRemoveOnCancelPolicy(true);, +		return scheduler;, +	}, +, +	@Bean, +		DefaultUserDestinationResolver resolver = new DefaultUserDestinationResolver(userRegistry());, +	@SuppressWarnings("deprecation"), +	public SimpUserRegistry userRegistry() {]