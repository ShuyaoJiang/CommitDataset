[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, + * Copyright 2002-2015 the original author or authors., +import java.util.Collections;, +	// When entering a new scope there is a new base object which should be used, +	// for '#this' references (or to act as a target for unqualified references)., +	// This stack captures those objects at each nested scope level., +	// For example: , +	// #list1.?[#list2.contains(#this)], +	// On entering the selection we enter a new scope, and #this is now the, +	// element from list1, +	private Stack<TypedValue> scopeRootObjects;, +, +		if (this.scopeRootObjects == null) {, +			this.scopeRootObjects = new Stack<TypedValue>();, +		}, +	public TypedValue getScopeRootContextObject() {, +		if (this.scopeRootObjects == null || this.scopeRootObjects.isEmpty()) {, +			return this.rootObject;, +		}, +		return this.scopeRootObjects.peek();, +	}, +, +		this.scopeRootObjects.push(getActiveContextObject());, +	}, +	, +	public void enterScope() {, +		ensureVariableScopesInitialized();, +		this.variableScopes.push(new VariableScope(Collections.<String,Object>emptyMap()));, +		this.scopeRootObjects.push(getActiveContextObject());		, +		this.scopeRootObjects.push(getActiveContextObject());, +		this.scopeRootObjects.pop();, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, + * Copyright 2002-2015 the original author or authors., +import java.util.Collections;, +	// When entering a new scope there is a new base object which should be used, +	// for '#this' references (or to act as a target for unqualified references)., +	// This stack captures those objects at each nested scope level., +	// For example: , +	// #list1.?[#list2.contains(#this)], +	// On entering the selection we enter a new scope, and #this is now the, +	// element from list1, +	private Stack<TypedValue> scopeRootObjects;, +, +		if (this.scopeRootObjects == null) {, +			this.scopeRootObjects = new Stack<TypedValue>();, +		}, +	public TypedValue getScopeRootContextObject() {, +		if (this.scopeRootObjects == null || this.scopeRootObjects.isEmpty()) {, +			return this.rootObject;, +		}, +		return this.scopeRootObjects.peek();, +	}, +, +		this.scopeRootObjects.push(getActiveContextObject());, +	}, +	, +	public void enterScope() {, +		ensureVariableScopesInitialized();, +		this.variableScopes.push(new VariableScope(Collections.<String,Object>emptyMap()));, +		this.scopeRootObjects.push(getActiveContextObject());		, +		this.scopeRootObjects.push(getActiveContextObject());, +		this.scopeRootObjects.pop();, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java, + * Copyright 2002-2015 the original author or authors., +				state.pushActiveContextObject(state.getScopeRootContextObject());, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, + * Copyright 2002-2015 the original author or authors., +import java.util.Collections;, +	// When entering a new scope there is a new base object which should be used, +	// for '#this' references (or to act as a target for unqualified references)., +	// This stack captures those objects at each nested scope level., +	// For example: , +	// #list1.?[#list2.contains(#this)], +	// On entering the selection we enter a new scope, and #this is now the, +	// element from list1, +	private Stack<TypedValue> scopeRootObjects;, +, +		if (this.scopeRootObjects == null) {, +			this.scopeRootObjects = new Stack<TypedValue>();, +		}, +	public TypedValue getScopeRootContextObject() {, +		if (this.scopeRootObjects == null || this.scopeRootObjects.isEmpty()) {, +			return this.rootObject;, +		}, +		return this.scopeRootObjects.peek();, +	}, +, +		this.scopeRootObjects.push(getActiveContextObject());, +	}, +	, +	public void enterScope() {, +		ensureVariableScopesInitialized();, +		this.variableScopes.push(new VariableScope(Collections.<String,Object>emptyMap()));, +		this.scopeRootObjects.push(getActiveContextObject());		, +		this.scopeRootObjects.push(getActiveContextObject());, +		this.scopeRootObjects.pop();, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java, + * Copyright 2002-2015 the original author or authors., +				state.pushActiveContextObject(state.getScopeRootContextObject());, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Projection.java]