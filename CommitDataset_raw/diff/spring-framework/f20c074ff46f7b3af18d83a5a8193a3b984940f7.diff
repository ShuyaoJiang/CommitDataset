[+++ b/org.springframework.core/src/main/java/org/springframework/util/PropertyPlaceholderHelper.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.util;, +, +import java.util.Properties;, +import java.util.Set;, +import java.util.HashSet;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +/**, + * Utility class for working with Strings that have placeholder values in them. A placeholder takes the form, + * <code>${name}</code>. Using <code>PropertyPlaceholderUtils</code> these placeholders can be substituted for, + * user-supplied values. <p> Values for substitution can be supplied using a {@link Properties} instance or using a, + * {@link PlaceholderResolver}., + *, + * @author Juergen Hoeller, + * @author Rob Harrop, + * @since 3.0, + */, +public class PropertyPlaceholderHelper {, +, +	private static final Log LOGGER = LogFactory.getLog(PropertyPlaceholderHelper.class);, +, +	private final String placeholderPrefix;, +, +	private final String placeholderSuffix;, +, +	private final boolean ignoreUnresolvablePlaceholders;, +, +	/**, +	 * Creates a new <code>PropertyPlaceholderHelper</code> that uses the supplied prefix and suffix. Unresolvable, +	 * placeholders are ignored., +	 *, +	 * @param placeholderPrefix the prefix that denotes the start of a placeholder., +	 * @param placeholderSuffix the suffix that denotes the end of a placeholder., +	 */, +	public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix) {, +		this(placeholderPrefix, placeholderSuffix, true);, +	}, +, +	/**, +	 * Creates a new <code>PropertyPlaceholderHelper</code> that uses the supplied prefix and suffix., +	 *, +	 * @param placeholderPrefix the prefix that denotes the start of a placeholder., +	 * @param placeholderSuffix the suffix that denotes the end of a placeholder., +	 * @param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should be ignored, +	 * (<code>true</code>) or cause an exception (<code>false</code>)., +	 */, +	public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix,, +			boolean ignoreUnresolvablePlaceholders) {, +		Assert.notNull(placeholderPrefix, "Argument 'placeholderPrefix' must not be null.");, +		Assert.notNull(placeholderSuffix, "Argument 'placeholderSuffix' must not be null.");, +		this.placeholderPrefix = placeholderPrefix;, +		this.placeholderSuffix = placeholderSuffix;, +		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders;, +	}, +, +	/**, +	 * Replaces all placeholders of format <code>${name}</code> with the corresponding property from the supplied {@link, +	 * Properties}., +	 *, +	 * @param value the value containing the placeholders to be replaced., +	 * @param properties the <code>Properties</code> to use for replacement., +	 * @return the supplied value with placeholders replaced inline., +	 */, +	public String replacePlaceholders(String value, final Properties properties) {, +		Assert.notNull(properties, "Argument 'properties' must not be null.");, +		return replacePlaceholders(value, new PlaceholderResolver() {, +, +			public String resolvePlaceholder(String placeholderName) {, +				return properties.getProperty(placeholderName);, +			}, +		});, +	}, +, +	/**, +	 * Replaces all placeholders of format <code>${name}</code> with the value returned from the supplied {@link, +	 * PlaceholderResolver}., +	 *, +	 * @param value the value containing the placeholders to be replaced., +	 * @param placeholderResolver the <code>PlaceholderResolver</code> to use for replacement., +	 * @return the supplied value with placeholders replaced inline., +	 */]