[+++ b/spring-beans-groovy/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java, +import org.springframework.util.ObjectUtils;, +			shell.evaluate(encodedResource.getReader(), "beans");, +			if (!ObjectUtils.isEmpty(args)) {, +++ b/spring-beans-groovy/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java, +import org.springframework.util.ObjectUtils;, +			shell.evaluate(encodedResource.getReader(), "beans");, +			if (!ObjectUtils.isEmpty(args)) {, +++ b/spring-context/src/test/java/org/springframework/context/groovy/GroovyApplicationContextTests.java, + * Copyright 2002-2014 the original author or authors., +import org.junit.Test;, +import org.springframework.beans.factory.parsing.BeanDefinitionParsingException;, +import static org.junit.Assert.*;, +, +public class GroovyApplicationContextTests {, +	@Test, +	@Test, +	@Test, +	@Test(expected = BeanDefinitionParsingException.class), +	public void testConfigFileParsingError() {, +		new GenericGroovyApplicationContext("org/springframework/context/groovy/applicationContext-error.groovy");, +	}, +, +	@Test(expected = BeanDefinitionParsingException.class), +	public void testConfigFileParsingErrorWhenNamedBeans() {, +		new GenericGroovyApplicationContext("org/springframework/context/groovy/beans.groovy");, +	}, +, +++ b/spring-beans-groovy/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java, +import org.springframework.util.ObjectUtils;, +			shell.evaluate(encodedResource.getReader(), "beans");, +			if (!ObjectUtils.isEmpty(args)) {, +++ b/spring-context/src/test/java/org/springframework/context/groovy/GroovyApplicationContextTests.java, + * Copyright 2002-2014 the original author or authors., +import org.junit.Test;, +import org.springframework.beans.factory.parsing.BeanDefinitionParsingException;, +import static org.junit.Assert.*;, +, +public class GroovyApplicationContextTests {, +	@Test, +	@Test, +	@Test, +	@Test(expected = BeanDefinitionParsingException.class), +	public void testConfigFileParsingError() {, +		new GenericGroovyApplicationContext("org/springframework/context/groovy/applicationContext-error.groovy");, +	}, +, +	@Test(expected = BeanDefinitionParsingException.class), +	public void testConfigFileParsingErrorWhenNamedBeans() {, +		new GenericGroovyApplicationContext("org/springframework/context/groovy/beans.groovy");, +	}, +, +++ b/spring-context/src/test/java/org/springframework/context/groovy/applicationContext-error.groovy, +package org.springframework.context.groovy, +, +beans = {, +	framework String, 'Grails', +	foo String, 'hello', +}, +++ b/spring-beans-groovy/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java, +import org.springframework.util.ObjectUtils;, +			shell.evaluate(encodedResource.getReader(), "beans");, +			if (!ObjectUtils.isEmpty(args)) {, +++ b/spring-context/src/test/java/org/springframework/context/groovy/GroovyApplicationContextTests.java, + * Copyright 2002-2014 the original author or authors., +import org.junit.Test;, +import org.springframework.beans.factory.parsing.BeanDefinitionParsingException;, +import static org.junit.Assert.*;, +, +public class GroovyApplicationContextTests {, +	@Test, +	@Test, +	@Test, +	@Test(expected = BeanDefinitionParsingException.class), +	public void testConfigFileParsingError() {, +		new GenericGroovyApplicationContext("org/springframework/context/groovy/applicationContext-error.groovy");, +	}, +, +	@Test(expected = BeanDefinitionParsingException.class), +	public void testConfigFileParsingErrorWhenNamedBeans() {, +		new GenericGroovyApplicationContext("org/springframework/context/groovy/beans.groovy");, +	}, +, +++ b/spring-context/src/test/java/org/springframework/context/groovy/applicationContext-error.groovy, +package org.springframework.context.groovy, +, +beans = {, +	framework String, 'Grails', +	foo String, 'hello', +}, +++ b/spring-context/src/test/java/org/springframework/context/groovy/beans.groovy, +package org.springframework.context.groovy, +, +beans = {, +	framework String, 'Grails', +	foo String, 'hello', +}]