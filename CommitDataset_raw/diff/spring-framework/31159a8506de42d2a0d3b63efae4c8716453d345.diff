[+++ b/spring-web/src/main/java/org/springframework/web/method/ControllerAdviceBean.java, + * Copyright 2002-2018 the original author or authors., +import java.util.stream.Collectors;, +	private final HandlerTypePredicate beanTypePredicate;, +			this.beanTypePredicate = HandlerTypePredicate.builder(), +					.basePackage(annotation.basePackages()), +					.basePackageClass(annotation.basePackageClasses()), +					.assignableType(annotation.assignableTypes()), +					.annotation(annotation.annotations()), +					.build();, +			this.beanTypePredicate = HandlerTypePredicate.forAnyHandlerType();, +		return this.beanTypePredicate.test(beanType);, +	public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext context) {, +		return Arrays.stream(BeanFactoryUtils.beanNamesForTypeIncludingAncestors(context, Object.class)), +				.filter(name -> context.findAnnotationOnBean(name, ControllerAdvice.class) != null), +				.map(name -> new ControllerAdviceBean(name, context)), +				.collect(Collectors.toList());, +++ b/spring-web/src/main/java/org/springframework/web/method/ControllerAdviceBean.java, + * Copyright 2002-2018 the original author or authors., +import java.util.stream.Collectors;, +	private final HandlerTypePredicate beanTypePredicate;, +			this.beanTypePredicate = HandlerTypePredicate.builder(), +					.basePackage(annotation.basePackages()), +					.basePackageClass(annotation.basePackageClasses()), +					.assignableType(annotation.assignableTypes()), +					.annotation(annotation.annotations()), +					.build();, +			this.beanTypePredicate = HandlerTypePredicate.forAnyHandlerType();, +		return this.beanTypePredicate.test(beanType);, +	public static List<ControllerAdviceBean> findAnnotatedBeans(ApplicationContext context) {, +		return Arrays.stream(BeanFactoryUtils.beanNamesForTypeIncludingAncestors(context, Object.class)), +				.filter(name -> context.findAnnotationOnBean(name, ControllerAdvice.class) != null), +				.map(name -> new ControllerAdviceBean(name, context)), +				.collect(Collectors.toList());, +++ b/spring-web/src/main/java/org/springframework/web/method/HandlerTypePredicate.java, +/*, + * Copyright 2002-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.method;, +, +import java.lang.annotation.Annotation;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.Set;, +import java.util.function.Predicate;, +, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.StringUtils;, +, +/**, + * A {@code Predicate} to match request handling component types based on the, + * following selectors:, + * <ul>, + * <li>Base packages -- for selecting handlers by their package., + * <li>Assignable types -- for selecting handlers by super type., + * <li>Annotations -- for selecting handlers annotated in a specific way., + * </ul>, + * <p>Use static factory methods in this class to create a Predicate., + *, + * @author Rossen Stoyanchev, + * @since 5.1, + */, +public class HandlerTypePredicate implements Predicate<Class<?>> {, +, +	private final Set<String> basePackages;, +, +	private final List<Class<?>> assignableTypes;, +, +	private final List<Class<? extends Annotation>> annotations;, +, +, +	/**, +	 * Private constructor. See static factory methods., +	 */, +	private HandlerTypePredicate(Set<String> basePackages, List<Class<?>> assignableTypes,, +			List<Class<? extends Annotation>> annotations) {, +, +		this.basePackages = Collections.unmodifiableSet(basePackages);, +		this.assignableTypes = Collections.unmodifiableList(assignableTypes);, +		this.annotations = Collections.unmodifiableList(annotations);, +	}, +, +, +	@Override]