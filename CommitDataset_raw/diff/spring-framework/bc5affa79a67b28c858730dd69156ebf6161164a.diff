[+++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, + * Copyright 2002-2013 the original author or authors., +	public static Method findDeclaredMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) {, +	public static Class<?> findPropertyType(String propertyName, Class<?>... beanClasses) {, +		copyProperties(source, target, null, (String[]) null);, +		copyProperties(source, target, editable, (String[]) null);, +	public static void copyProperties(Object source, Object target, String... ignoreProperties), +	private static void copyProperties(Object source, Object target, Class<?> editable, String... ignoreProperties), +			Method writeMethod = targetPd.getWriteMethod();, +			if (writeMethod != null && (ignoreProperties == null || (!ignoreList.contains(targetPd.getName())))) {, +				if (sourcePd != null) {, +					if (readMethod != null &&, +							writeMethod.getParameterTypes()[0].isAssignableFrom(readMethod.getReturnType())) {, +						try {, +							throw new FatalBeanException(, +									"Could not copy property '" + targetPd.getName() + "' from source to target", ex);, +						}, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, + * Copyright 2002-2013 the original author or authors., +	public static Method findDeclaredMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) {, +	public static Class<?> findPropertyType(String propertyName, Class<?>... beanClasses) {, +		copyProperties(source, target, null, (String[]) null);, +		copyProperties(source, target, editable, (String[]) null);, +	public static void copyProperties(Object source, Object target, String... ignoreProperties), +	private static void copyProperties(Object source, Object target, Class<?> editable, String... ignoreProperties), +			Method writeMethod = targetPd.getWriteMethod();, +			if (writeMethod != null && (ignoreProperties == null || (!ignoreList.contains(targetPd.getName())))) {, +				if (sourcePd != null) {, +					if (readMethod != null &&, +							writeMethod.getParameterTypes()[0].isAssignableFrom(readMethod.getReturnType())) {, +						try {, +							throw new FatalBeanException(, +									"Could not copy property '" + targetPd.getName() + "' from source to target", ex);, +						}, +++ b/spring-beans/src/test/java/org/springframework/beans/BeanUtilsTests.java, +, +import static org.junit.Assert.*;, +, +		for (PropertyDescriptor descriptor : descriptors) {, +		BeanUtils.copyProperties(tb, tb2, "spouse", "touchy", "age");, +		BeanUtils.copyProperties(source, target, "specialProperty");, +		assertEquals(target.getName(), "name");, +	}, +, +	@Test, +	public void testCopyPropertiesWithInvalidProperty() {, +		InvalidProperty source = new InvalidProperty();, +		source.setName("name");, +		InvalidProperty target = new InvalidProperty();, +		BeanUtils.copyProperties(source, target);, +				assertEquals(propertyDescriptor.getName() + " has unexpected type",, +						keyDescr.getPropertyType(), propertyDescriptor.getPropertyType());, +	private static class InvalidProperty {, +, +		private String name;, +, +		private String value;, +, +		public void setName(String name) {, +			this.name = name;, +		}, +, +		public String getName() {, +			return this.name;, +		}, +, +		public void setValue(int value) {, +			this.value = Integer.toString(value);, +		}, +, +		public String getValue() {, +			return this.value;, +		}, +	}, +, +, +	@SuppressWarnings("unused"), +, +]