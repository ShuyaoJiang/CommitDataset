[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestBodyArgumentResolver.java, +	public Mono<Object> resolveArgument(MethodParameter parameter, ModelMap model, ServerWebExchange exchange) {, +		ResolvableType type = ResolvableType.forMethodParameter(parameter);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestBodyArgumentResolver.java, +	public Mono<Object> resolveArgument(MethodParameter parameter, ModelMap model, ServerWebExchange exchange) {, +		ResolvableType type = ResolvableType.forMethodParameter(parameter);, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestBodyArgumentResolverTests.java, +import java.io.Serializable;, +import java.lang.reflect.Method;, +import org.junit.Ignore;, +	@Test // SPR-9942, +	public void missingContent() throws Exception {, +		this.request.writeWith(Flux.empty());, +		ResolvableType type = forClassWithGenerics(Mono.class, TestBean.class);, +		MethodParameter param = this.testMethod.resolveParam(type);, +		Mono<Object> result = this.resolver.resolveArgument(param, new ExtendedModelMap(), this.exchange);, +, +		TestSubscriber.subscribe(result), +				.assertError(UnsupportedMediaTypeStatusException.class);, +	}, +, +	public void monoList() throws Exception {, +		String body = "[{\"bar\":\"b1\",\"foo\":\"f1\"},{\"bar\":\"b2\",\"foo\":\"f2\"}]";, +		ResolvableType type = forClassWithGenerics(Mono.class, forClassWithGenerics(List.class, TestBean.class));, +		MethodParameter param = this.testMethod.resolveParam(type);, +		Mono<?> mono = resolveValue(param, Mono.class, body);, +, +		List<?> list = (List<?>) mono.block(Duration.ofSeconds(5));, +		assertEquals(Arrays.asList(new TestBean("f1", "b1"), new TestBean("f2", "b2")), list);, +	}, +, +	@Test, +	@Test // SPR-9964, +	@Ignore, +	public void parameterizedMethodArgument() throws Exception {, +		Class<?> clazz = ConcreteParameterizedController.class;, +		MethodParameter param = ResolvableMethod.on(clazz).name("handleDto").resolveParam();, +		SimpleBean simpleBean = resolveValue(param, SimpleBean.class, "{\"name\" : \"Jad\"}");, +, +		assertEquals("Jad", simpleBean.getName());, +	}, +, +, +		assertTrue("Unexpected return value type: " + value, valueType.isAssignableFrom(value.getClass()));, +			@RequestBody Mono<List<TestBean>> monoList,, +, +	private static abstract class AbstractParameterizedController<DTO extends Identifiable> {, +, +		@SuppressWarnings("unused"), +		public void handleDto(@RequestBody DTO dto) {}, +	}, +, +	private static class ConcreteParameterizedController extends AbstractParameterizedController<SimpleBean> {, +	}, +, +	private interface Identifiable extends Serializable {, +, +		Long getId();, +, +		void setId(Long id);, +	}, +, +	@SuppressWarnings({ "serial" }), +	private static class SimpleBean implements Identifiable {, +, +		private Long id;, +, +		private String name;, +, +		@Override, +		public Long getId() {, +			return id;, +		}, +, +		@Override, +		public void setId(Long id) {, +			this.id = id;, +		}, +, +		public String getName() {, +			return name;, +		}, +, +		public void setName(String name) {, +			this.name = name;, +		}, +	}, +]