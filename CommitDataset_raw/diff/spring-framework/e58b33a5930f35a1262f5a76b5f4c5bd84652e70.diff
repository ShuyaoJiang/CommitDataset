[+++ b/spring-jms/src/main/java/org/springframework/jms/connection/JmsTransactionManager.java, +, +			TransactionSynchronizationManager.bindResource(getConnectionFactory(), txObject.getResourceHolder());, +			if (session != null) {, +				try {, +					session.close();, +				}, +				catch (Throwable ex2) {, +					// ignore, +				}, +			}, +++ b/spring-jms/src/main/java/org/springframework/jms/connection/JmsTransactionManager.java, +, +			TransactionSynchronizationManager.bindResource(getConnectionFactory(), txObject.getResourceHolder());, +			if (session != null) {, +				try {, +					session.close();, +				}, +				catch (Throwable ex2) {, +					// ignore, +				}, +			}, +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/HibernateTransactionManager.java, +					txObject.setSessionHolder(null);, +++ b/spring-jms/src/main/java/org/springframework/jms/connection/JmsTransactionManager.java, +, +			TransactionSynchronizationManager.bindResource(getConnectionFactory(), txObject.getResourceHolder());, +			if (session != null) {, +				try {, +					session.close();, +				}, +				catch (Throwable ex2) {, +					// ignore, +				}, +			}, +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/HibernateTransactionManager.java, +					txObject.setSessionHolder(null);, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/HibernateTransactionManager.java, + * Copyright 2002-2014 the original author or authors., +					txObject.setSessionHolder(null);, +++ b/spring-jms/src/main/java/org/springframework/jms/connection/JmsTransactionManager.java, +, +			TransactionSynchronizationManager.bindResource(getConnectionFactory(), txObject.getResourceHolder());, +			if (session != null) {, +				try {, +					session.close();, +				}, +				catch (Throwable ex2) {, +					// ignore, +				}, +			}, +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/HibernateTransactionManager.java, +					txObject.setSessionHolder(null);, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/HibernateTransactionManager.java, + * Copyright 2002-2014 the original author or authors., +					txObject.setSessionHolder(null);, +++ b/spring-orm/src/main/java/org/springframework/orm/jdo/JdoTransactionManager.java, + * Copyright 2002-2014 the original author or authors., +						logger.debug("Exposing JDO transaction as JDBC transaction [" +, +								conHolder.getConnectionHandle() + "]");, +						logger.debug("Not exposing JDO transaction [" + pm + "] as JDBC transaction because " +, +								"JdoDialect [" + getJdoDialect() + "] does not support JDBC Connection retrieval");, +			txObject.setPersistenceManagerHolder(null, false);, +++ b/spring-jms/src/main/java/org/springframework/jms/connection/JmsTransactionManager.java, +, +			TransactionSynchronizationManager.bindResource(getConnectionFactory(), txObject.getResourceHolder());, +			if (session != null) {, +				try {, +					session.close();, +				}, +				catch (Throwable ex2) {, +					// ignore, +				}, +			}, +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/HibernateTransactionManager.java, +					txObject.setSessionHolder(null);, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/HibernateTransactionManager.java, + * Copyright 2002-2014 the original author or authors., +					txObject.setSessionHolder(null);, +++ b/spring-orm/src/main/java/org/springframework/orm/jdo/JdoTransactionManager.java, + * Copyright 2002-2014 the original author or authors., +						logger.debug("Exposing JDO transaction as JDBC transaction [" +, +								conHolder.getConnectionHandle() + "]");, +						logger.debug("Not exposing JDO transaction [" + pm + "] as JDBC transaction because " +, +								"JdoDialect [" + getJdoDialect() + "] does not support JDBC Connection retrieval");, +			txObject.setPersistenceManagerHolder(null, false);, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java, +				logger.debug("Found thread-bound EntityManager [" + emHolder.getEntityManager() +, +						"] for JPA transaction");, +						logger.debug("Exposing JPA transaction as JDBC transaction [" +, +								conHolder.getConnectionHandle() + "]");, +						logger.debug("Not exposing JPA transaction [" + em + "] as JDBC transaction because " +, +								"JpaDialect [" + getJpaDialect() + "] does not support JDBC Connection retrieval");, +			txObject.setEntityManagerHolder(null, false);, +++ b/spring-jms/src/main/java/org/springframework/jms/connection/JmsTransactionManager.java, +, +			TransactionSynchronizationManager.bindResource(getConnectionFactory(), txObject.getResourceHolder());, +			if (session != null) {, +				try {, +					session.close();]