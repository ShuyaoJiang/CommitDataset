[+++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/JodaTimeContext.java, +	 * Set the user's chronology (calendar system)., +	 * Return the user's chronology (calendar system), if any., +	 * Return the user's time zone, if any., +		return this.timeZone;, +++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/JodaTimeContext.java, +	 * Set the user's chronology (calendar system)., +	 * Return the user's chronology (calendar system), if any., +	 * Return the user's time zone, if any., +		return this.timeZone;, +++ b/spring-context/src/main/java/org/springframework/format/datetime/standard/DateTimeContext.java, +	 * Set the user's chronology (calendar system)., +	 * Return the user's chronology (calendar system), if any., +	 * Return the user's time zone, if any., +		return this.timeZone;, +++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/JodaTimeContext.java, +	 * Set the user's chronology (calendar system)., +	 * Return the user's chronology (calendar system), if any., +	 * Return the user's time zone, if any., +		return this.timeZone;, +++ b/spring-context/src/main/java/org/springframework/format/datetime/standard/DateTimeContext.java, +	 * Set the user's chronology (calendar system)., +	 * Return the user's chronology (calendar system), if any., +	 * Return the user's time zone, if any., +		return this.timeZone;, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/GenericConversionServiceTests.java, + * Copyright 2002-2013 the original author or authors., +import static org.hamcrest.Matchers.*;, +		}, +		catch (IllegalArgumentException ex) {, +		}, +		catch (IllegalArgumentException ex) {, +		}, +		catch (IllegalArgumentException ex) {, +		}, +		catch (ConverterNotFoundException ex) {, +	public void testConvertUUID() {, +	public void emptyListToArray() {, +	public void emptyListToObject() {, +	public void testConvertiblePairsInSet() {, +	public void testConvertiblePairEqualsAndHash() {, +	public void testConvertiblePairDifferentEqualsAndHash() {, +	public void convertPrimitiveArray() {, +		}, +		catch (IllegalArgumentException ex) {, +		}, +		catch(IllegalArgumentException ex) {, +	public void convertHashMapValuesToList() {, +	public void removeConvertible() {, +	public void conditionalConverter() {, +	public void conditionalConverterFactory() {, +	public void shouldNotSuportNullConvertibleTypesFromNonConditionalGenericConverter() {, +			public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +		}, +		catch (IllegalStateException ex) {, +			assertEquals("Only conditional converters may return null convertible types", ex.getMessage());, +	public void conditionalConversionForAllTypes() {, +	public void convertOptimizeArray() {, +	public void convertCannotOptimizeArray() {, +, +	private static class MyConditionalConverter implements Converter<String, Color>, ConditionalConverter {, +, +, +		}, +	private static class MyEnumInterfaceToStringConverter<T extends MyEnumInterface> implements Converter<T, String> {, +, +, +++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/JodaTimeContext.java, +	 * Set the user's chronology (calendar system)., +	 * Return the user's chronology (calendar system), if any., +	 * Return the user's time zone, if any., +		return this.timeZone;, +++ b/spring-context/src/main/java/org/springframework/format/datetime/standard/DateTimeContext.java, +	 * Set the user's chronology (calendar system)., +	 * Return the user's chronology (calendar system), if any., +	 * Return the user's time zone, if any., +		return this.timeZone;, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/GenericConversionServiceTests.java, + * Copyright 2002-2013 the original author or authors., +import static org.hamcrest.Matchers.*;, +		}, +		catch (IllegalArgumentException ex) {, +		}, +		catch (IllegalArgumentException ex) {, +		}, +		catch (IllegalArgumentException ex) {, +		}, +		catch (ConverterNotFoundException ex) {, +	public void testConvertUUID() {, +	public void emptyListToArray() {, +	public void emptyListToObject() {, +	public void testConvertiblePairsInSet() {, +	public void testConvertiblePairEqualsAndHash() {, +	public void testConvertiblePairDifferentEqualsAndHash() {, +	public void convertPrimitiveArray() {, +		}, +		catch (IllegalArgumentException ex) {, +		}, +		catch(IllegalArgumentException ex) {, +	public void convertHashMapValuesToList() {]