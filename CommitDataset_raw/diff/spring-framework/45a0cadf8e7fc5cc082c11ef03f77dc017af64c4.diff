[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/AbstractPropertyAccessor.java, +import org.springframework.core.convert.ConversionService;, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/AbstractPropertyAccessor.java, +import org.springframework.core.convert.ConversionService;, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import org.springframework.core.convert.ConversionException;, +	public BeanWrapperImpl(Class<?> clazz) {, +	public <T> T convertIfNecessary(, +			Object value, Class<T> requiredType, MethodParameter methodParam) throws TypeMismatchException {, +			Object value;, +				}, +				catch (PrivilegedActionException pae) {, +						Class<?> mapKeyType = GenericCollectionTypeResolver.getMapKeyReturnType(pd.getReadMethod(), i + 1);, +			catch (ConversionException ex) {, +				PropertyChangeEvent pce =, +						new PropertyChangeEvent(this.rootObject, this.nestedPath + propertyName, oldValue, pv.getValue());, +				throw new TypeMismatchException(pce, pd.getPropertyType(), ex);, +			}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/AbstractPropertyAccessor.java, +import org.springframework.core.convert.ConversionService;, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import org.springframework.core.convert.ConversionException;, +	public BeanWrapperImpl(Class<?> clazz) {, +	public <T> T convertIfNecessary(, +			Object value, Class<T> requiredType, MethodParameter methodParam) throws TypeMismatchException {, +			Object value;, +				}, +				catch (PrivilegedActionException pae) {, +						Class<?> mapKeyType = GenericCollectionTypeResolver.getMapKeyReturnType(pd.getReadMethod(), i + 1);, +			catch (ConversionException ex) {, +				PropertyChangeEvent pce =, +						new PropertyChangeEvent(this.rootObject, this.nestedPath + propertyName, oldValue, pv.getValue());, +				throw new TypeMismatchException(pce, pd.getPropertyType(), ex);, +			}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/ConfigurablePropertyAccessor.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.core.convert.ConversionService;, +, +	 * Specify a Spring 3.0 ConversionService to use for converting, +	 * property values, as an alternative to JavaBeans PropertyEditors., +	 */, +	void setConversionService(ConversionService conversionService);, +, +	/**, +	 * Return the associated ConversionService, if any., +	 */, +	ConversionService getConversionService();, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/AbstractPropertyAccessor.java, +import org.springframework.core.convert.ConversionService;, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import org.springframework.core.convert.ConversionException;, +	public BeanWrapperImpl(Class<?> clazz) {, +	public <T> T convertIfNecessary(, +			Object value, Class<T> requiredType, MethodParameter methodParam) throws TypeMismatchException {, +			Object value;, +				}, +				catch (PrivilegedActionException pae) {, +						Class<?> mapKeyType = GenericCollectionTypeResolver.getMapKeyReturnType(pd.getReadMethod(), i + 1);, +			catch (ConversionException ex) {, +				PropertyChangeEvent pce =, +						new PropertyChangeEvent(this.rootObject, this.nestedPath + propertyName, oldValue, pv.getValue());, +				throw new TypeMismatchException(pce, pd.getPropertyType(), ex);, +			}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/ConfigurablePropertyAccessor.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.core.convert.ConversionService;, +, +	 * Specify a Spring 3.0 ConversionService to use for converting, +	 * property values, as an alternative to JavaBeans PropertyEditors., +	 */, +	void setConversionService(ConversionService conversionService);, +, +	/**, +	 * Return the associated ConversionService, if any., +	 */, +	ConversionService getConversionService();, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java, +import org.springframework.core.convert.ConversionService;, +	private ConversionService conversionService;, +, +	/**, +	 * Specify a Spring 3.0 ConversionService to use for converting, +	 * property values, as an alternative to JavaBeans PropertyEditors., +	 */, +	public void setConversionService(ConversionService conversionService) {, +		this.conversionService = conversionService;, +	}, +, +	/**, +	 * Return the associated ConversionService, if any., +	 */, +	public ConversionService getConversionService() {]