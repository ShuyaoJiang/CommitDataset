[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {, +				throw new IllegalStateException("About-to-be-created singleton instance implicitly appeared " +, +						"through the creation of the factory bean that its bean definition points to");, +			}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {, +				throw new IllegalStateException("About-to-be-created singleton instance implicitly appeared " +, +						"through the creation of the factory bean that its bean definition points to");, +			}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java, +				boolean newSingleton = false;, +					newSingleton = true;, +				}, +				catch (IllegalStateException ex) {, +					// Has the singleton object implicitly appeared in the meantime ->, +					// if yes, proceed with it since the exception indicates that state., +					singletonObject = this.singletonObjects.get(beanName);, +					if (singletonObject == null) {, +						throw ex;, +					}, +				if (newSingleton) {, +			}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {, +				throw new IllegalStateException("About-to-be-created singleton instance implicitly appeared " +, +						"through the creation of the factory bean that its bean definition points to");, +			}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java, +				boolean newSingleton = false;, +					newSingleton = true;, +				}, +				catch (IllegalStateException ex) {, +					// Has the singleton object implicitly appeared in the meantime ->, +					// if yes, proceed with it since the exception indicates that state., +					singletonObject = this.singletonObjects.get(beanName);, +					if (singletonObject == null) {, +						throw ex;, +					}, +				if (newSingleton) {, +			}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +			if (isCurrentlyInvokedFactoryMethod(beanMethod)) {, +							"these container lifecycle issues; see @Bean javadoc for complete details",, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {, +				throw new IllegalStateException("About-to-be-created singleton instance implicitly appeared " +, +						"through the creation of the factory bean that its bean definition points to");, +			}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java, +				boolean newSingleton = false;, +					newSingleton = true;, +				}, +				catch (IllegalStateException ex) {, +					// Has the singleton object implicitly appeared in the meantime ->, +					// if yes, proceed with it since the exception indicates that state., +					singletonObject = this.singletonObjects.get(beanName);, +					if (singletonObject == null) {, +						throw ex;, +					}, +				if (newSingleton) {, +			}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +			if (isCurrentlyInvokedFactoryMethod(beanMethod)) {, +							"these container lifecycle issues; see @Bean javadoc for complete details",, +++ b/spring-context/src/test/java/org/springframework/context/annotation/AutoProxyLazyInitTests.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.context.annotation;, +, +import javax.annotation.PreDestroy;, +, +import org.junit.Test;, +, +import org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator;, +import org.springframework.aop.framework.autoproxy.target.LazyInitTargetSourceCreator;, +import org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ApplicationListener;, +import org.springframework.context.event.ApplicationContextEvent;, +, +import static org.junit.Assert.*;]