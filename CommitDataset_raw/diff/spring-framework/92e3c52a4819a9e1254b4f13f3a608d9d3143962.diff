[+++ b/spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java, +import com.thoughtworks.xstream.converters.DataHolder;, +	public void afterPropertiesSet() {, +	 * Build the native XStream delegate to be used by this marshaller,, +	 * delegating to {@link #constructXStream()}, {@link #configureXStream}, +	 * and {@link #customizeXStream}., +		XStream xstream = constructXStream();, +		configureXStream(xstream);, +		customizeXStream(xstream);, +		return xstream;, +	}, +, +	/**, +	 * Construct an XStream instance, either using one of the, +	 * standard constructors or creating a custom subclass., +	 * @return the {@code XStream} instance, +	 */, +	protected XStream constructXStream() {, +		return new XStream(this.reflectionProvider, this.streamDriver,, +	}, +	/**, +	 * Configure the XStream instance with this marshaller's bean properties., +	 * @param xstream the {@code XStream} instance, +	 */, +	protected void configureXStream(XStream xstream) {, +		doMarshal(graph, streamWriter, null);, +			doMarshal(graph, new StaxWriter(new QNameMap(), streamWriter), null);, +		doMarshal(graph, saxWriter, null);, +	public void marshalOutputStream(Object graph, OutputStream outputStream) throws XmlMappingException, IOException {, +		marshalOutputStream(graph, outputStream, null);, +	}, +, +	public void marshalOutputStream(Object graph, OutputStream outputStream, DataHolder dataHolder), +			throws XmlMappingException, IOException {, +, +			doMarshal(graph, this.streamDriver.createWriter(outputStream), dataHolder);, +			marshalWriter(graph, new OutputStreamWriter(outputStream, this.encoding), dataHolder);, +		}, +	}, +, +	@Override, +	public void marshalWriter(Object graph, Writer writer) throws XmlMappingException, IOException {, +		marshalWriter(graph, writer, null);, +	}, +, +	public void marshalWriter(Object graph, Writer writer, DataHolder dataHolder), +			throws XmlMappingException, IOException {, +, +		if (this.streamDriver != null) {, +			doMarshal(graph, this.streamDriver.createWriter(writer), dataHolder);, +		}, +		else {, +			doMarshal(graph, new CompactWriter(writer), dataHolder);, +	private void doMarshal(Object graph, HierarchicalStreamWriter streamWriter, DataHolder dataHolder) {, +			getXStream().marshal(graph, streamWriter, dataHolder);, +        return doUnmarshal(streamReader, null);, +        return doUnmarshal(new StaxReader(new QNameMap(), streamReader), null);, +	@Override, +	public Object unmarshalInputStream(InputStream inputStream) throws XmlMappingException, IOException {, +		return unmarshalInputStream(inputStream, null);, +	}, +, +	public Object unmarshalInputStream(InputStream inputStream, DataHolder dataHolder) throws XmlMappingException, IOException {, +        if (this.streamDriver != null) {, +            return doUnmarshal(this.streamDriver.createReader(inputStream), dataHolder);, +        }, +        else {, +		    return unmarshalReader(new InputStreamReader(inputStream, this.encoding), dataHolder);, +        }, +	}, +, +	@Override, +	public Object unmarshalReader(Reader reader) throws XmlMappingException, IOException {, +		return unmarshalReader(reader, null);, +	}, +, +	public Object unmarshalReader(Reader reader, DataHolder dataHolder) throws XmlMappingException, IOException {, +        if (this.streamDriver != null) {, +            return doUnmarshal(this.streamDriver.createReader(reader), dataHolder);, +        }, +        else {, +            return doUnmarshal(this.fallbackDriver.createReader(reader), dataHolder);, +        }, +	}, +, +    private Object doUnmarshal(HierarchicalStreamReader streamReader, DataHolder dataHolder) {, +            return getXStream().unmarshal(streamReader, null, dataHolder);]