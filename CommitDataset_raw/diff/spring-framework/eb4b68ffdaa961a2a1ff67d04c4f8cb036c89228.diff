[+++ b/org.springframework.context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +			Object target, Class<?> targetClass) {, +		return new CacheOperationContext(definition, method, args, target, targetClass);, +			CacheOperationContext context = getOperationContext(cacheDef, method, args, target, targetClass);, +				Object target, Class<?> targetClass) {, +			this.evalContext = evaluator.createEvaluationContext(caches, method, args, target, targetClass);, +++ b/org.springframework.context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +			Object target, Class<?> targetClass) {, +		return new CacheOperationContext(definition, method, args, target, targetClass);, +			CacheOperationContext context = getOperationContext(cacheDef, method, args, target, targetClass);, +				Object target, Class<?> targetClass) {, +			this.evalContext = evaluator.createEvaluationContext(caches, method, args, target, targetClass);, +++ b/org.springframework.context/src/main/java/org/springframework/cache/interceptor/CacheExpressionRootObject.java, +import java.lang.reflect.Method;, +	 * Returns the method being cached., +	 * , +	 * @return method being cached, +	 */, +	Method getMethod();, +, +	/**, +	 * Returns the parameters for this invocation., +	 * , +	 * @return params for this invocation., +	 */, +	Object[] getParams();, +, +	/**, +	 * Returns the target instance being cached., +	 * , +	 * @return target instance, +	 */, +	Object getTarget();, +, +	/**, +	 * Returns the target class., +	 * , +	 * @return target class, +	 */, +	Class<?> getTargetClass();, +, +	/**, +++ b/org.springframework.context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +			Object target, Class<?> targetClass) {, +		return new CacheOperationContext(definition, method, args, target, targetClass);, +			CacheOperationContext context = getOperationContext(cacheDef, method, args, target, targetClass);, +				Object target, Class<?> targetClass) {, +			this.evalContext = evaluator.createEvaluationContext(caches, method, args, target, targetClass);, +++ b/org.springframework.context/src/main/java/org/springframework/cache/interceptor/CacheExpressionRootObject.java, +import java.lang.reflect.Method;, +	 * Returns the method being cached., +	 * , +	 * @return method being cached, +	 */, +	Method getMethod();, +, +	/**, +	 * Returns the parameters for this invocation., +	 * , +	 * @return params for this invocation., +	 */, +	Object[] getParams();, +, +	/**, +	 * Returns the target instance being cached., +	 * , +	 * @return target instance, +	 */, +	Object getTarget();, +, +	/**, +	 * Returns the target class., +	 * , +	 * @return target class, +	 */, +	Class<?> getTargetClass();, +, +	/**, +++ b/org.springframework.context/src/main/java/org/springframework/cache/interceptor/DefaultCacheExpressionRootObject.java, +import java.lang.reflect.Method;, +	private final Object target;, +	private final Class<?> targetClass;, +	private final Method method;, +	private final Object[] args;, +	public DefaultCacheExpressionRootObject(Collection<Cache<?, ?>> caches, Method method, Object[] args,, +			Object target, Class<?> targetClass) {, +		Assert.notNull(method, "method is required");, +		Assert.notNull(targetClass, "targetClass is required");, +		this.method = method;, +		this.methodName = method.getName();, +		this.target = target;, +		this.targetClass = targetClass;, +		this.args = args;, +, +	public Method getMethod() {, +		return method;, +	}, +, +	public Object[] getParams() {, +		return args;]