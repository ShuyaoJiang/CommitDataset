[+++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +import org.springframework.web.util.pattern.PathPattern;, +import org.springframework.web.util.pattern.PathPatternParser;, + * @author Brian Clozel, +	private final Map<PathPattern, CorsConfiguration> corsConfigurations;, +	private final PathPatternParser patternParser;, +	public UrlBasedCorsConfigurationSource(PathPatternParser patternParser) {, +		this.corsConfigurations = new LinkedHashMap<>();, +		this.patternParser = patternParser;, +			corsConfigurations.forEach((path, config) -> registerCorsConfiguration(path, config));, +		this.corsConfigurations.put(this.patternParser.parse(path), config);, +		return this.corsConfigurations.entrySet().stream(), +				.filter(entry -> entry.getKey().matches(lookupPath)), +				.map(entry -> entry.getValue()), +				.findFirst(), +				.orElse(null);, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +import org.springframework.web.util.pattern.PathPattern;, +import org.springframework.web.util.pattern.PathPatternParser;, + * @author Brian Clozel, +	private final Map<PathPattern, CorsConfiguration> corsConfigurations;, +	private final PathPatternParser patternParser;, +	public UrlBasedCorsConfigurationSource(PathPatternParser patternParser) {, +		this.corsConfigurations = new LinkedHashMap<>();, +		this.patternParser = patternParser;, +			corsConfigurations.forEach((path, config) -> registerCorsConfiguration(path, config));, +		this.corsConfigurations.put(this.patternParser.parse(path), config);, +		return this.corsConfigurations.entrySet().stream(), +				.filter(entry -> entry.getKey().matches(lookupPath)), +				.map(entry -> entry.getValue()), +				.findFirst(), +				.orElse(null);, +++ b/spring-web/src/test/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSourceTests.java, +import org.springframework.web.util.pattern.PathPatternParser;, +	private final UrlBasedCorsConfigurationSource configSource, +			= new UrlBasedCorsConfigurationSource(new PathPatternParser());, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +import org.springframework.web.util.pattern.PathPattern;, +import org.springframework.web.util.pattern.PathPatternParser;, + * @author Brian Clozel, +	private final Map<PathPattern, CorsConfiguration> corsConfigurations;, +	private final PathPatternParser patternParser;, +	public UrlBasedCorsConfigurationSource(PathPatternParser patternParser) {, +		this.corsConfigurations = new LinkedHashMap<>();, +		this.patternParser = patternParser;, +			corsConfigurations.forEach((path, config) -> registerCorsConfiguration(path, config));, +		this.corsConfigurations.put(this.patternParser.parse(path), config);, +		return this.corsConfigurations.entrySet().stream(), +				.filter(entry -> entry.getKey().matches(lookupPath)), +				.map(entry -> entry.getValue()), +				.findFirst(), +				.orElse(null);, +++ b/spring-web/src/test/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSourceTests.java, +import org.springframework.web.util.pattern.PathPatternParser;, +	private final UrlBasedCorsConfigurationSource configSource, +			= new UrlBasedCorsConfigurationSource(new PathPatternParser());, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/AbstractHandlerMapping.java, +	private final PathPatternParser patternParser;, +	private final UrlBasedCorsConfigurationSource globalCorsConfigSource;, +	public AbstractHandlerMapping() {, +		  this.patternParser = new PathPatternParser();, +		  this.globalCorsConfigSource = new UrlBasedCorsConfigurationSource(this.patternParser);, +	}, +]