[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +import java.util.Locale;, +	 * Register a {@link ViewResolverComposite} that contains a chain of view resolvers, +	 * to use for view resolution., +	 * <p>If no other resolvers are configured,, +	 * {@link ViewResolverComposite#resolveViewName(String, Locale)} returns null in order, +	 * to allow other potential {@link ViewResolver} beans to resolve views., +		composite.setViewResolvers(registry.getViewResolvers());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +import java.util.Locale;, +	 * Register a {@link ViewResolverComposite} that contains a chain of view resolvers, +	 * to use for view resolution., +	 * <p>If no other resolvers are configured,, +	 * {@link ViewResolverComposite#resolveViewName(String, Locale)} returns null in order, +	 * to allow other potential {@link ViewResolver} beans to resolve views., +		composite.setViewResolvers(registry.getViewResolvers());, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/ViewResolutionIntegrationTests.java, +import org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;, +	// SPR-12013, +, +	@Test, +	public void viewResolverBeanWithDefaultViewResolutionConfig() throws Exception {, +		MockHttpServletResponse response = runTest(FreeMarkerBeanBasedWebConfig.class);, +		assertEquals("<html><body>Hello World!</body></html>",, +				response.getContentAsString());, +	}, +, +	@Configuration, +	static class FreeMarkerBeanBasedWebConfig extends AbstractWebConfig {, +, +		@Bean, +		public FreeMarkerViewResolver freeMarkerViewResolver() {, +			FreeMarkerViewResolver viewResolver = new FreeMarkerViewResolver();, +			viewResolver.setSuffix(".ftl");, +			return viewResolver;, +		}, +, +		@Bean, +		public FreeMarkerConfigurer freeMarkerConfigurer() {, +			FreeMarkerConfigurer configurer = new FreeMarkerConfigurer();, +			configurer.setTemplateLoaderPath("/WEB-INF/");, +			return configurer;, +		}, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +import java.util.Locale;, +	 * Register a {@link ViewResolverComposite} that contains a chain of view resolvers, +	 * to use for view resolution., +	 * <p>If no other resolvers are configured,, +	 * {@link ViewResolverComposite#resolveViewName(String, Locale)} returns null in order, +	 * to allow other potential {@link ViewResolver} beans to resolve views., +		composite.setViewResolvers(registry.getViewResolvers());, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/ViewResolutionIntegrationTests.java, +import org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;, +	// SPR-12013, +, +	@Test, +	public void viewResolverBeanWithDefaultViewResolutionConfig() throws Exception {, +		MockHttpServletResponse response = runTest(FreeMarkerBeanBasedWebConfig.class);, +		assertEquals("<html><body>Hello World!</body></html>",, +				response.getContentAsString());, +	}, +, +	@Configuration, +	static class FreeMarkerBeanBasedWebConfig extends AbstractWebConfig {, +, +		@Bean, +		public FreeMarkerViewResolver freeMarkerViewResolver() {, +			FreeMarkerViewResolver viewResolver = new FreeMarkerViewResolver();, +			viewResolver.setSuffix(".ftl");, +			return viewResolver;, +		}, +, +		@Bean, +		public FreeMarkerConfigurer freeMarkerConfigurer() {, +			FreeMarkerConfigurer configurer = new FreeMarkerConfigurer();, +			configurer.setTemplateLoaderPath("/WEB-INF/");, +			return configurer;, +		}, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java, +import java.util.Locale;, +	public void emptyViewResolver() throws Exception {, +		assertEquals(0, resolvers.size());, +		assertNull(compositeResolver.resolveViewName("anyViewName", Locale.ENGLISH));]