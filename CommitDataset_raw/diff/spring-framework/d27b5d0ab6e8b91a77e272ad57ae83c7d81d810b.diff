[+++ b/spring-web/src/main/java/org/springframework/web/cors/CorsUtils.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.lang.Nullable;, +import org.springframework.util.ObjectUtils;, +import org.springframework.web.util.UriComponents;, +import org.springframework.web.util.UriComponentsBuilder;, +	 * Returns {@code true} if the request is a valid CORS one by checking {@code Origin}, +	 * header presence and ensuring that origins are different., +		String origin = request.getHeader(HttpHeaders.ORIGIN);, +		if (origin == null) {, +			return false;, +		}, +		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build();, +		String scheme = request.getScheme();, +		String host = request.getServerName();, +		int port = request.getServerPort();, +		return !(ObjectUtils.nullSafeEquals(scheme, originUrl.getScheme()) &&, +				ObjectUtils.nullSafeEquals(host, originUrl.getHost()) &&, +				getPort(scheme, port) == getPort(originUrl.getScheme(), originUrl.getPort()));, +, +	}, +, +	private static int getPort(@Nullable String scheme, int port) {, +		if (port == -1) {, +			if ("http".equals(scheme) || "ws".equals(scheme)) {, +				port = 80;, +			}, +			else if ("https".equals(scheme) || "wss".equals(scheme)) {, +				port = 443;, +			}, +		}, +		return port;, +	 * To be used in combination with {@link #isCorsRequest(HttpServletRequest)} since, +	 * regular CORS checks are not invoked here for performance reasons., +		return (HttpMethod.OPTIONS.matches(request.getMethod()) &&, +++ b/spring-web/src/main/java/org/springframework/web/cors/CorsUtils.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.lang.Nullable;, +import org.springframework.util.ObjectUtils;, +import org.springframework.web.util.UriComponents;, +import org.springframework.web.util.UriComponentsBuilder;, +	 * Returns {@code true} if the request is a valid CORS one by checking {@code Origin}, +	 * header presence and ensuring that origins are different., +		String origin = request.getHeader(HttpHeaders.ORIGIN);, +		if (origin == null) {, +			return false;, +		}, +		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build();, +		String scheme = request.getScheme();, +		String host = request.getServerName();, +		int port = request.getServerPort();, +		return !(ObjectUtils.nullSafeEquals(scheme, originUrl.getScheme()) &&, +				ObjectUtils.nullSafeEquals(host, originUrl.getHost()) &&, +				getPort(scheme, port) == getPort(originUrl.getScheme(), originUrl.getPort()));, +, +	}, +, +	private static int getPort(@Nullable String scheme, int port) {, +		if (port == -1) {, +			if ("http".equals(scheme) || "ws".equals(scheme)) {, +				port = 80;, +			}, +			else if ("https".equals(scheme) || "wss".equals(scheme)) {, +				port = 443;, +			}, +		}, +		return port;, +	 * To be used in combination with {@link #isCorsRequest(HttpServletRequest)} since, +	 * regular CORS checks are not invoked here for performance reasons., +		return (HttpMethod.OPTIONS.matches(request.getMethod()) &&, +++ b/spring-web/src/main/java/org/springframework/web/cors/DefaultCorsProcessor.java, + * Copyright 2002-2019 the original author or authors., + * if the response already contains CORS headers., +		response.addHeader(HttpHeaders.VARY, HttpHeaders.ORIGIN);, +		response.addHeader(HttpHeaders.VARY, HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD);, +		response.addHeader(HttpHeaders.VARY, HttpHeaders.ACCESS_CONTROL_REQUEST_HEADERS);, +, +		if (response.getHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN) != null) {, +				rejectRequest(new ServletServerHttpResponse(response));, +		return handleInternal(new ServletServerHttpRequest(request), new ServletServerHttpResponse(response), config, preFlightRequest);, +		response.flush();, +++ b/spring-web/src/main/java/org/springframework/web/cors/CorsUtils.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.lang.Nullable;, +import org.springframework.util.ObjectUtils;, +import org.springframework.web.util.UriComponents;, +import org.springframework.web.util.UriComponentsBuilder;, +	 * Returns {@code true} if the request is a valid CORS one by checking {@code Origin}, +	 * header presence and ensuring that origins are different., +		String origin = request.getHeader(HttpHeaders.ORIGIN);, +		if (origin == null) {, +			return false;, +		}, +		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build();, +		String scheme = request.getScheme();, +		String host = request.getServerName();, +		int port = request.getServerPort();, +		return !(ObjectUtils.nullSafeEquals(scheme, originUrl.getScheme()) &&, +				ObjectUtils.nullSafeEquals(host, originUrl.getHost()) &&, +				getPort(scheme, port) == getPort(originUrl.getScheme(), originUrl.getPort()));]