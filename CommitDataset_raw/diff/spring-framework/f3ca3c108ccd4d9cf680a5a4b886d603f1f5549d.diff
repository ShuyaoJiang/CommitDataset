[+++ b/build.gradle, +		optional("org.projectreactor:reactor-core:1.0.0.BUILD-SNAPSHOT"), +		optional("org.projectreactor:reactor-tcp:1.0.0.BUILD-SNAPSHOT"), +, +	repositories {, +		maven { url "http://repo.spring.io/snapshot" }  // for reactor (until RC2), +	}, +, +++ b/build.gradle, +		optional("org.projectreactor:reactor-core:1.0.0.BUILD-SNAPSHOT"), +		optional("org.projectreactor:reactor-tcp:1.0.0.BUILD-SNAPSHOT"), +, +	repositories {, +		maven { url "http://repo.spring.io/snapshot" }  // for reactor (until RC2), +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +import org.springframework.messaging.simp.SimpMessageHeaderAccessor;, +	private static final Message<byte[]> HEARTBEAT_MESSAGE;, +	static {, +		SimpMessageHeaderAccessor headers = SimpMessageHeaderAccessor.create(SimpMessageType.HEARTBEAT);, +		HEARTBEAT_MESSAGE = MessageBuilder.withPayload(new byte[] {'\n'}).setHeaders(headers).build();, +	}, +, +									new ListenableFutureCallback<Void>() {, +											handleTcpConnectionFailure("Failed to send heartbeat", t);, +										public void onSuccess(Void result) {}, +		public ListenableFuture<Void> forward(final Message<?> message) {, +				return new ListenableFutureTask<Void>(new Callable<Void>() {, +					public Void call() throws Exception {, +						return null;, +			ListenableFuture<Void> future = this.tcpConnection.send((Message<byte[]>) message);, +			future.addCallback(new ListenableFutureCallback<Void>() {, +				public void onSuccess(Void result) {, +		public ListenableFuture<Void> forward(Message<?> message) {, +				ListenableFuture<Void> future = super.forward(message);, +				future.get();, +++ b/build.gradle, +		optional("org.projectreactor:reactor-core:1.0.0.BUILD-SNAPSHOT"), +		optional("org.projectreactor:reactor-tcp:1.0.0.BUILD-SNAPSHOT"), +, +	repositories {, +		maven { url "http://repo.spring.io/snapshot" }  // for reactor (until RC2), +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +import org.springframework.messaging.simp.SimpMessageHeaderAccessor;, +	private static final Message<byte[]> HEARTBEAT_MESSAGE;, +	static {, +		SimpMessageHeaderAccessor headers = SimpMessageHeaderAccessor.create(SimpMessageType.HEARTBEAT);, +		HEARTBEAT_MESSAGE = MessageBuilder.withPayload(new byte[] {'\n'}).setHeaders(headers).build();, +	}, +, +									new ListenableFutureCallback<Void>() {, +											handleTcpConnectionFailure("Failed to send heartbeat", t);, +										public void onSuccess(Void result) {}, +		public ListenableFuture<Void> forward(final Message<?> message) {, +				return new ListenableFutureTask<Void>(new Callable<Void>() {, +					public Void call() throws Exception {, +						return null;, +			ListenableFuture<Void> future = this.tcpConnection.send((Message<byte[]>) message);, +			future.addCallback(new ListenableFutureCallback<Void>() {, +				public void onSuccess(Void result) {, +		public ListenableFuture<Void> forward(Message<?> message) {, +				ListenableFuture<Void> future = super.forward(message);, +				future.get();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/tcp/AbstractPromiseToListenableFutureAdapter.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.messaging.support.tcp;, +, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.TimeoutException;, +, +import org.springframework.util.Assert;, +import org.springframework.util.concurrent.ListenableFuture;, +import org.springframework.util.concurrent.ListenableFutureCallback;, +import org.springframework.util.concurrent.ListenableFutureCallbackRegistry;, +, +import reactor.core.composable.Promise;, +import reactor.function.Consumer;, +, +/**, + * Adapts a reactor {@link Promise} to {@link ListenableFuture} optionally converting, + * the result Object type {@code <S>} to the expected target type {@code <T>}.]