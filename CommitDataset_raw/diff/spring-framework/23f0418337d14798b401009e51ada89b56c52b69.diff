[+++ b/spring-context/src/main/java/org/springframework/context/i18n/LocaleContextHolder.java, +			new NamedThreadLocal<>("LocaleContext");, +			new NamedInheritableThreadLocal<>("LocaleContext");, +, +	// Shared default locale at the framework level, +	private static Locale defaultLocale;, +, +	// Shared default time zone at the framework level, +	private static TimeZone defaultTimeZone;, +	 * Set a shared default locale at the framework level,, +	 * as an alternative to the JVM-wide default locale., +	 * <p><b>NOTE:</b> This can be useful to set an application-level, +	 * default locale which differs from the JVM-wide default locale., +	 * However, this requires each such application to operate against, +	 * locally deployed Spring Framework jars. Do not deploy Spring, +	 * as a shared library at the server level in such a scenario!, +	 * @param locale the default locale (or {@code null} for none,, +	 * letting lookups fall back to {@link Locale#getDefault()}), +	 * @since 4.3.5, +	 * @see #getLocale(), +	 * @see Locale#getDefault(), +	 */, +	public static void setDefaultLocale(Locale locale) {, +		LocaleContextHolder.defaultLocale = locale;, +	}, +, +	/**, +	 * or the system default Locale otherwise. This is effectively a, +	 * <p>Note: This method has a fallback to the shared default Locale,, +	 * either at the framework level or at the JVM-wide system level., +	 * @see #setDefaultLocale(Locale), +		return (defaultLocale != null ? defaultLocale : Locale.getDefault());, +	 * Set a shared default time zone at the framework level,, +	 * as an alternative to the JVM-wide default time zone., +	 * <p><b>NOTE:</b> This can be useful to set an application-level, +	 * default time zone which differs from the JVM-wide default time zone., +	 * However, this requires each such application to operate against, +	 * locally deployed Spring Framework jars. Do not deploy Spring, +	 * as a shared library at the server level in such a scenario!, +	 * @param timeZone the default time zone (or {@code null} for none,, +	 * letting lookups fall back to {@link TimeZone#getDefault()}), +	 * @since 4.3.5, +	 * @see #getTimeZone(), +	 * @see TimeZone#getDefault(), +	 */, +	public static void setDefaultTimeZone(TimeZone timeZone) {, +		defaultTimeZone = timeZone;, +	}, +, +	/**, +	 * or the system default TimeZone otherwise. This is effectively a, +	 * <p>Note: This method has a fallback to the shared default TimeZone,, +	 * either at the framework level or at the JVM-wide system level., +	 * @see #setDefaultTimeZone(TimeZone), +		return (defaultTimeZone != null ? defaultTimeZone : TimeZone.getDefault());, +++ b/spring-context/src/main/java/org/springframework/context/i18n/LocaleContextHolder.java, +			new NamedThreadLocal<>("LocaleContext");, +			new NamedInheritableThreadLocal<>("LocaleContext");, +, +	// Shared default locale at the framework level, +	private static Locale defaultLocale;, +, +	// Shared default time zone at the framework level, +	private static TimeZone defaultTimeZone;, +	 * Set a shared default locale at the framework level,, +	 * as an alternative to the JVM-wide default locale., +	 * <p><b>NOTE:</b> This can be useful to set an application-level, +	 * default locale which differs from the JVM-wide default locale., +	 * However, this requires each such application to operate against, +	 * locally deployed Spring Framework jars. Do not deploy Spring, +	 * as a shared library at the server level in such a scenario!, +	 * @param locale the default locale (or {@code null} for none,, +	 * letting lookups fall back to {@link Locale#getDefault()}), +	 * @since 4.3.5, +	 * @see #getLocale(), +	 * @see Locale#getDefault(), +	 */, +	public static void setDefaultLocale(Locale locale) {, +		LocaleContextHolder.defaultLocale = locale;, +	}, +, +	/**, +	 * or the system default Locale otherwise. This is effectively a, +	 * <p>Note: This method has a fallback to the shared default Locale,, +	 * either at the framework level or at the JVM-wide system level., +	 * @see #setDefaultLocale(Locale), +		return (defaultLocale != null ? defaultLocale : Locale.getDefault());, +	 * Set a shared default time zone at the framework level,, +	 * as an alternative to the JVM-wide default time zone., +	 * <p><b>NOTE:</b> This can be useful to set an application-level, +	 * default time zone which differs from the JVM-wide default time zone., +	 * However, this requires each such application to operate against, +	 * locally deployed Spring Framework jars. Do not deploy Spring, +	 * as a shared library at the server level in such a scenario!, +	 * @param timeZone the default time zone (or {@code null} for none,, +	 * letting lookups fall back to {@link TimeZone#getDefault()}), +	 * @since 4.3.5, +	 * @see #getTimeZone(), +	 * @see TimeZone#getDefault(), +	 */]