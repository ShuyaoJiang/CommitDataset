[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MatrixVariableMapMethodArgumentResolver.java, + * Copyright 2002-2016 the original author or authors., +import java.util.List;, +import org.springframework.core.ResolvableType;, +		MultiValueMap<String, String> map = new LinkedMultiValueMap<String, String>();, +			MultiValueMap<String, String> mapForPathVariable = matrixVariables.get(pathVariable);, +			if (mapForPathVariable == null) {, +				return Collections.emptyMap();, +			map.putAll(mapForPathVariable);, +		}, +		else {, +		}, +		return (isSingleValueMap(parameter) ? map.toSingleValueMap() : map);, +	}, +, +	private boolean isSingleValueMap(MethodParameter parameter) {, +		if (!MultiValueMap.class.isAssignableFrom(parameter.getParameterType())) {, +			ResolvableType[] genericTypes = ResolvableType.forMethodParameter(parameter).getGenerics();, +			if (genericTypes.length == 2) {, +				return !List.class.isAssignableFrom(genericTypes[1].getRawClass());, +			}, +		}, +		return false;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MatrixVariableMapMethodArgumentResolver.java, + * Copyright 2002-2016 the original author or authors., +import java.util.List;, +import org.springframework.core.ResolvableType;, +		MultiValueMap<String, String> map = new LinkedMultiValueMap<String, String>();, +			MultiValueMap<String, String> mapForPathVariable = matrixVariables.get(pathVariable);, +			if (mapForPathVariable == null) {, +				return Collections.emptyMap();, +			map.putAll(mapForPathVariable);, +		}, +		else {, +		}, +		return (isSingleValueMap(parameter) ? map.toSingleValueMap() : map);, +	}, +, +	private boolean isSingleValueMap(MethodParameter parameter) {, +		if (!MultiValueMap.class.isAssignableFrom(parameter.getParameterType())) {, +			ResolvableType[] genericTypes = ResolvableType.forMethodParameter(parameter).getGenerics();, +			if (genericTypes.length == 2) {, +				return !List.class.isAssignableFrom(genericTypes[1].getRawClass());, +			}, +		}, +		return false;, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/MatrixVariablesMapMethodArgumentResolverTests.java, + * Copyright 2002-2016 the original author or authors., +		assertEquals("red", map.get("colors"));, +		assertEquals("red", mapAll.get("colors"));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MatrixVariableMapMethodArgumentResolver.java, + * Copyright 2002-2016 the original author or authors., +import java.util.List;, +import org.springframework.core.ResolvableType;, +		MultiValueMap<String, String> map = new LinkedMultiValueMap<String, String>();, +			MultiValueMap<String, String> mapForPathVariable = matrixVariables.get(pathVariable);, +			if (mapForPathVariable == null) {, +				return Collections.emptyMap();, +			map.putAll(mapForPathVariable);, +		}, +		else {, +		}, +		return (isSingleValueMap(parameter) ? map.toSingleValueMap() : map);, +	}, +, +	private boolean isSingleValueMap(MethodParameter parameter) {, +		if (!MultiValueMap.class.isAssignableFrom(parameter.getParameterType())) {, +			ResolvableType[] genericTypes = ResolvableType.forMethodParameter(parameter).getGenerics();, +			if (genericTypes.length == 2) {, +				return !List.class.isAssignableFrom(genericTypes[1].getRawClass());, +			}, +		}, +		return false;, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/MatrixVariablesMapMethodArgumentResolverTests.java, + * Copyright 2002-2016 the original author or authors., +		assertEquals("red", map.get("colors"));, +		assertEquals("red", mapAll.get("colors"));, +++ b/src/asciidoc/web-mvc.adoc, +			@MatrixVariable MultiValueMap<String, String> matrixVars,, +			@MatrixVariable(pathVar="petId"") MultiValueMap<String, String> petMatrixVars) {]