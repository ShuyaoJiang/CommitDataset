[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +		if (classType == null || classType.getName().startsWith("java.lang.annotation.")) {, +			for (Annotation ann : classType.getDeclaredAnnotations()) {, +		if (className == null || className.startsWith("java.lang.annotation.")) {, +				for (Annotation ann : sourceClass.getDeclaredAnnotations()) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +		if (classType == null || classType.getName().startsWith("java.lang.annotation.")) {, +			for (Annotation ann : classType.getDeclaredAnnotations()) {, +		if (className == null || className.startsWith("java.lang.annotation.")) {, +				for (Annotation ann : sourceClass.getDeclaredAnnotations()) {, +++ b/spring-core/src/main/java/org/springframework/core/type/StandardAnnotationMetadata.java, +		this.annotations = introspectedClass.getDeclaredAnnotations();, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +		if (classType == null || classType.getName().startsWith("java.lang.annotation.")) {, +			for (Annotation ann : classType.getDeclaredAnnotations()) {, +		if (className == null || className.startsWith("java.lang.annotation.")) {, +				for (Annotation ann : sourceClass.getDeclaredAnnotations()) {, +++ b/spring-core/src/main/java/org/springframework/core/type/StandardAnnotationMetadata.java, +		this.annotations = introspectedClass.getDeclaredAnnotations();, +++ b/spring-core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java, +import java.lang.annotation.Inherited;, +	public void standardAnnotationMetadata() {, +	public void standardAnnotationMetadataForSubclass() {, +	public void standardAnnotationMetadataForInterface() {, +	public void standardAnnotationMetadataForAnnotation() {, +	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() {, +	@Test, +	public void inheritedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {, +		AnnotationMetadata metadata = new StandardAnnotationMetadata(NamedComposedAnnotationExtended.class);, +		assertFalse(metadata.hasAnnotation(NamedComposedAnnotation.class.getName()));, +	}, +, +	@Test, +	public void inheritedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingAnnotationMetadataReadingVisitor() throws Exception {, +		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();, +		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedComposedAnnotationExtended.class.getName());, +		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata();, +		assertFalse(metadata.hasAnnotation(NamedComposedAnnotation.class.getName()));, +	}, +, +	@Inherited, +	public static class NamedComposedAnnotationExtended extends NamedComposedAnnotationClass {, +	}, +]