[+++ b/spring-expression/src/main/java/org/springframework/expression/EvaluationContext.java, +	 * Return the default root context object against which unqualified, +	 * properties/methods/etc should be resolved. This can be overridden, +	 * when evaluating an expression., +	 * Return a list of resolvers that will be asked in turn to locate a constructor., +	 * Return a list of resolvers that will be asked in turn to locate a method., +	 * Return a list of accessors that will be asked in turn to read/write a property., +	 * Return a type locator that can be used to find types, either by short or, +	 * fully qualified name., +	 * Return a type converter that can convert (or coerce) a value from one type to another., +	 * Return a type comparator for comparing pairs of objects for equality., +	 * Return an operator overloader that may support mathematical operations, +	 * between more than the standard set of types., +	 * Return a bean resolver that can look up beans by name., +++ b/spring-expression/src/main/java/org/springframework/expression/EvaluationContext.java, +	 * Return the default root context object against which unqualified, +	 * properties/methods/etc should be resolved. This can be overridden, +	 * when evaluating an expression., +	 * Return a list of resolvers that will be asked in turn to locate a constructor., +	 * Return a list of resolvers that will be asked in turn to locate a method., +	 * Return a list of accessors that will be asked in turn to read/write a property., +	 * Return a type locator that can be used to find types, either by short or, +	 * fully qualified name., +	 * Return a type converter that can convert (or coerce) a value from one type to another., +	 * Return a type comparator for comparing pairs of objects for equality., +	 * Return an operator overloader that may support mathematical operations, +	 * between more than the standard set of types., +	 * Return a bean resolver that can look up beans by name., +++ b/spring-expression/src/main/java/org/springframework/expression/MethodExecutor.java, + * MethodExecutor can be reused without needing to go back to the resolver to discover, + * the method again., + * <p>They can become stale, and in that case should throw an AccessException:, + * This will cause the infrastructure to go back to the resolvers to ask for a new one., +	 * Execute a command using the specified arguments, and using the specified expression state., +++ b/spring-expression/src/main/java/org/springframework/expression/EvaluationContext.java, +	 * Return the default root context object against which unqualified, +	 * properties/methods/etc should be resolved. This can be overridden, +	 * when evaluating an expression., +	 * Return a list of resolvers that will be asked in turn to locate a constructor., +	 * Return a list of resolvers that will be asked in turn to locate a method., +	 * Return a list of accessors that will be asked in turn to read/write a property., +	 * Return a type locator that can be used to find types, either by short or, +	 * fully qualified name., +	 * Return a type converter that can convert (or coerce) a value from one type to another., +	 * Return a type comparator for comparing pairs of objects for equality., +	 * Return an operator overloader that may support mathematical operations, +	 * between more than the standard set of types., +	 * Return a bean resolver that can look up beans by name., +++ b/spring-expression/src/main/java/org/springframework/expression/MethodExecutor.java, + * MethodExecutor can be reused without needing to go back to the resolver to discover, + * the method again., + * <p>They can become stale, and in that case should throw an AccessException:, + * This will cause the infrastructure to go back to the resolvers to ask for a new one., +	 * Execute a command using the specified arguments, and using the specified expression state., +++ b/spring-expression/src/main/java/org/springframework/expression/MethodResolver.java, +	 * can handle the specified arguments. Return a {@link MethodExecutor} that can be used, +	 * to invoke that method, or {@code null} if no method could be found., +	 * @return a MethodExecutor that can invoke the method, or null if the method cannot be found, +++ b/spring-expression/src/main/java/org/springframework/expression/EvaluationContext.java, +	 * Return the default root context object against which unqualified, +	 * properties/methods/etc should be resolved. This can be overridden, +	 * when evaluating an expression., +	 * Return a list of resolvers that will be asked in turn to locate a constructor., +	 * Return a list of resolvers that will be asked in turn to locate a method., +	 * Return a list of accessors that will be asked in turn to read/write a property., +	 * Return a type locator that can be used to find types, either by short or, +	 * fully qualified name., +	 * Return a type converter that can convert (or coerce) a value from one type to another., +	 * Return a type comparator for comparing pairs of objects for equality., +	 * Return an operator overloader that may support mathematical operations, +	 * between more than the standard set of types., +	 * Return a bean resolver that can look up beans by name., +++ b/spring-expression/src/main/java/org/springframework/expression/MethodExecutor.java, + * MethodExecutor can be reused without needing to go back to the resolver to discover, + * the method again., + * <p>They can become stale, and in that case should throw an AccessException:, + * This will cause the infrastructure to go back to the resolvers to ask for a new one., +	 * Execute a command using the specified arguments, and using the specified expression state., +++ b/spring-expression/src/main/java/org/springframework/expression/MethodResolver.java, +	 * can handle the specified arguments. Return a {@link MethodExecutor} that can be used, +	 * to invoke that method, or {@code null} if no method could be found., +	 * @return a MethodExecutor that can invoke the method, or null if the method cannot be found, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java, +	public void setConstructorResolvers(List<ConstructorResolver> constructorResolvers) {, +		this.constructorResolvers = constructorResolvers;, +	}, +, +	public void setMethodResolvers(List<MethodResolver> methodResolvers) {, +		this.methodResolvers = methodResolvers;, +	}, +, +	public void setPropertyAccessors(List<PropertyAccessor> propertyAccessors) {, +		this.propertyAccessors = propertyAccessors;, +	}, +, +		}, +		else {, +			this.reflectiveMethodResolver = new ReflectiveMethodResolver();, +			defaultResolvers.add(this.reflectiveMethodResolver);]