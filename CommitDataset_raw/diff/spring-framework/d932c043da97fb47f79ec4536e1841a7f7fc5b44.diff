[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java, +					if (!growCollection(state, targetObjectTypeDescriptor.getElementType(), idx, c)) {, +				if (!growCollection(state, targetObjectTypeDescriptor.getElementType(), idx, c)) {, +			}, +	/**, +	 * Attempt to grow the specified collection so that the specified index is valid., +	 * , +	 * @param state the expression state, +	 * @param elementType the type of the elements in the collection, +	 * @param index the index into the collection that needs to be valid, +	 * @param collection the collection to grow with elements, +	 * @return true if collection growing succeeded, otherwise false, +	 */, +	@SuppressWarnings("unchecked"), +	private boolean growCollection(ExpressionState state, Class<?> elementType, int index,, +			Collection collection) {, +		if (state.getConfiguration().isAutoGrowCollections()) {, +			Object newCollectionElement = null;, +			try {, +				int newElements = index-collection.size();, +				if (elementType == null) {, +					throw new SpelEvaluationException(getStartPosition(), SpelMessage.UNABLE_TO_GROW_COLLECTION_UNKNOWN_ELEMENT_TYPE);	, +				}, +				while (newElements>0) {, +					collection.add(elementType.newInstance());, +					newElements--;, +				}, +				newCollectionElement = elementType.newInstance();, +			}, +			catch (Exception ex) {, +				throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.UNABLE_TO_GROW_COLLECTION);, +			}, +			collection.add(newCollectionElement);, +			return true;, +		}, +		return false;, +	}, +	, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java, +					if (!growCollection(state, targetObjectTypeDescriptor.getElementType(), idx, c)) {, +				if (!growCollection(state, targetObjectTypeDescriptor.getElementType(), idx, c)) {, +			}, +	/**, +	 * Attempt to grow the specified collection so that the specified index is valid., +	 * , +	 * @param state the expression state, +	 * @param elementType the type of the elements in the collection, +	 * @param index the index into the collection that needs to be valid, +	 * @param collection the collection to grow with elements, +	 * @return true if collection growing succeeded, otherwise false, +	 */, +	@SuppressWarnings("unchecked"), +	private boolean growCollection(ExpressionState state, Class<?> elementType, int index,, +			Collection collection) {, +		if (state.getConfiguration().isAutoGrowCollections()) {, +			Object newCollectionElement = null;, +			try {, +				int newElements = index-collection.size();, +				if (elementType == null) {, +					throw new SpelEvaluationException(getStartPosition(), SpelMessage.UNABLE_TO_GROW_COLLECTION_UNKNOWN_ELEMENT_TYPE);	, +				}, +				while (newElements>0) {, +					collection.add(elementType.newInstance());, +					newElements--;, +				}, +				newCollectionElement = elementType.newInstance();, +			}, +			catch (Exception ex) {, +				throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.UNABLE_TO_GROW_COLLECTION);, +			}, +			collection.add(newCollectionElement);, +			return true;, +		}, +		return false;, +	}, +	, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java, +import org.springframework.expression.spel.testresources.TestPerson;, +	/**, +	 * SPR-6984: attempting to index a collection on write using an index that doesn't currently exist in the collection (address.crossStreets[0] below), +	 */, +	@Test, +	public void initializingCollectionElementsOnWrite() throws Exception {, +		TestPerson person = new TestPerson();, +		EvaluationContext context = new StandardEvaluationContext(person);, +		SpelParserConfiguration config = new SpelParserConfiguration(true, true);, +		ExpressionParser parser = new SpelExpressionParser(config);, +		Expression expression = parser.parseExpression("name");, +		expression.setValue(context, "Oleg");, +		Assert.assertEquals("Oleg",person.getName());, +, +		expression = parser.parseExpression("address.street");, +		expression.setValue(context, "123 High St");, +		Assert.assertEquals("123 High St",person.getAddress().getStreet());, +		, +		expression = parser.parseExpression("address.crossStreets[0]");, +		expression.setValue(context, "Blah");, +		Assert.assertEquals("Blah",person.getAddress().getCrossStreets().get(0));, +		, +		expression = parser.parseExpression("address.crossStreets[3]");]