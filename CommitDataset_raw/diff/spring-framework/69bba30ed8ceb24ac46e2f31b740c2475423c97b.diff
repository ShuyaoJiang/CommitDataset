[+++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/support/AbstractCookieValueMethodArgumentResolver.java, +import org.springframework.web.bind.ServletRequestBindingException;, +	protected void handleMissingValue(String cookieName, MethodParameter param) throws ServletRequestBindingException {, +		String paramType = param.getParameterType().getName();, +		throw new ServletRequestBindingException(, +				"Missing cookie named '" + cookieName + "' for method parameter type [" + paramType + "]");, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/support/AbstractCookieValueMethodArgumentResolver.java, +import org.springframework.web.bind.ServletRequestBindingException;, +	protected void handleMissingValue(String cookieName, MethodParameter param) throws ServletRequestBindingException {, +		String paramType = param.getParameterType().getName();, +		throw new ServletRequestBindingException(, +				"Missing cookie named '" + cookieName + "' for method parameter type [" + paramType + "]");, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/support/ErrorsMethodArgumentResolver.java, +			int lastIndex = model.size()-1;, +			String lastKey = new ArrayList<String>(model.keySet()).get(lastIndex);, +			if (lastKey.startsWith(BindingResult.MODEL_KEY_PREFIX)) {, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/support/AbstractCookieValueMethodArgumentResolver.java, +import org.springframework.web.bind.ServletRequestBindingException;, +	protected void handleMissingValue(String cookieName, MethodParameter param) throws ServletRequestBindingException {, +		String paramType = param.getParameterType().getName();, +		throw new ServletRequestBindingException(, +				"Missing cookie named '" + cookieName + "' for method parameter type [" + paramType + "]");, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/support/ErrorsMethodArgumentResolver.java, +			int lastIndex = model.size()-1;, +			String lastKey = new ArrayList<String>(model.keySet()).get(lastIndex);, +			if (lastKey.startsWith(BindingResult.MODEL_KEY_PREFIX)) {, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/support/RequestHeaderMethodArgumentResolver.java, +import org.springframework.web.bind.ServletRequestBindingException;, +	protected void handleMissingValue(String headerName, MethodParameter param) throws ServletRequestBindingException {, +		String paramType = param.getParameterType().getName();, +		throw new ServletRequestBindingException(, +				"Missing header '" + headerName + "' for method parameter type [" + paramType + "]");, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/support/AbstractCookieValueMethodArgumentResolver.java, +import org.springframework.web.bind.ServletRequestBindingException;, +	protected void handleMissingValue(String cookieName, MethodParameter param) throws ServletRequestBindingException {, +		String paramType = param.getParameterType().getName();, +		throw new ServletRequestBindingException(, +				"Missing cookie named '" + cookieName + "' for method parameter type [" + paramType + "]");, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/support/ErrorsMethodArgumentResolver.java, +			int lastIndex = model.size()-1;, +			String lastKey = new ArrayList<String>(model.keySet()).get(lastIndex);, +			if (lastKey.startsWith(BindingResult.MODEL_KEY_PREFIX)) {, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/support/RequestHeaderMethodArgumentResolver.java, +import org.springframework.web.bind.ServletRequestBindingException;, +	protected void handleMissingValue(String headerName, MethodParameter param) throws ServletRequestBindingException {, +		String paramType = param.getParameterType().getName();, +		throw new ServletRequestBindingException(, +				"Missing header '" + headerName + "' for method parameter type [" + paramType + "]");, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java, +		if (providedArgs == null || parameter.hasParameterAnnotations()) {, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/support/AbstractCookieValueMethodArgumentResolver.java, +import org.springframework.web.bind.ServletRequestBindingException;, +	protected void handleMissingValue(String cookieName, MethodParameter param) throws ServletRequestBindingException {, +		String paramType = param.getParameterType().getName();, +		throw new ServletRequestBindingException(, +				"Missing cookie named '" + cookieName + "' for method parameter type [" + paramType + "]");, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/support/ErrorsMethodArgumentResolver.java, +			int lastIndex = model.size()-1;, +			String lastKey = new ArrayList<String>(model.keySet()).get(lastIndex);, +			if (lastKey.startsWith(BindingResult.MODEL_KEY_PREFIX)) {, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/support/RequestHeaderMethodArgumentResolver.java, +import org.springframework.web.bind.ServletRequestBindingException;, +	protected void handleMissingValue(String headerName, MethodParameter param) throws ServletRequestBindingException {, +		String paramType = param.getParameterType().getName();, +		throw new ServletRequestBindingException(, +				"Missing header '" + headerName + "' for method parameter type [" + paramType + "]");, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java, +		if (providedArgs == null || parameter.hasParameterAnnotations()) {, +++ b/org.springframework.web/src/test/java/org/springframework/web/method/annotation/support/CookieValueMethodArgumentResolverTests.java, +import static org.junit.Assert.fail;, +import org.springframework.web.bind.ServletRequestBindingException;, +	@Test(expected = ServletRequestBindingException.class), +		resolver.resolveArgument(paramNamedCookie, null, webRequest, null);, +		fail("Expected exception");, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/support/AbstractCookieValueMethodArgumentResolver.java, +import org.springframework.web.bind.ServletRequestBindingException;, +	protected void handleMissingValue(String cookieName, MethodParameter param) throws ServletRequestBindingException {, +		String paramType = param.getParameterType().getName();, +		throw new ServletRequestBindingException(, +				"Missing cookie named '" + cookieName + "' for method parameter type [" + paramType + "]");, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/support/ErrorsMethodArgumentResolver.java, +			int lastIndex = model.size()-1;, +			String lastKey = new ArrayList<String>(model.keySet()).get(lastIndex);, +			if (lastKey.startsWith(BindingResult.MODEL_KEY_PREFIX)) {, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/support/RequestHeaderMethodArgumentResolver.java, +import org.springframework.web.bind.ServletRequestBindingException;, +	protected void handleMissingValue(String headerName, MethodParameter param) throws ServletRequestBindingException {, +		String paramType = param.getParameterType().getName();, +		throw new ServletRequestBindingException(, +				"Missing header '" + headerName + "' for method parameter type [" + paramType + "]");, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java, +		if (providedArgs == null || parameter.hasParameterAnnotations()) {, +++ b/org.springframework.web/src/test/java/org/springframework/web/method/annotation/support/CookieValueMethodArgumentResolverTests.java, +import static org.junit.Assert.fail;, +import org.springframework.web.bind.ServletRequestBindingException;, +	@Test(expected = ServletRequestBindingException.class), +		resolver.resolveArgument(paramNamedCookie, null, webRequest, null);, +		fail("Expected exception");, +++ b/org.springframework.web/src/test/java/org/springframework/web/method/annotation/support/RequestHeaderMethodArgumentResolverTests.java, +import static org.junit.Assert.fail;]