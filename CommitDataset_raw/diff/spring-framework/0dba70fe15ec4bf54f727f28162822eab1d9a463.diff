[+++ b/build.gradle, +		classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7"), +		classpath("io.spring.gradle:docbook-reference-plugin:0.3.0"), +		classpath("ws.antonov.gradle.plugins:gradle-plugin-protobuf:0.9.1"), +ext {, +	linkHomepage = 'https://projects.spring.io/spring-framework', +	linkCi = 'https://build.spring.io/browse/SPR', +	linkIssue = 'https://jira.spring.io/browse/SPR', +	linkScmUrl = 'https://github.com/spring-projects/spring-framework', +	linkScmConnection = 'scm:git:git://github.com/spring-projects/spring-framework.git', +	linkScmDevConnection = 'scm:git:ssh://git@github.com:spring-projects/spring-framwork.git', +}, +, +	ext.aspectjVersion       = "1.8.1", +	ext.ehcacheVersion       = "2.8.3", +	ext.ehcacheJCacheVersion = "1.0.0", +	ext.groovyVersion        = "2.3.6", +	ext.hibernate4Version    = "4.3.6.Final", +	ext.hibVal4Version       = "4.3.2.Final", +	ext.hibVal5Version       = "5.1.2.Final", +	ext.jackson2Version      = "2.4.1", +	ext.gsonVersion          = "2.3", +	ext.jettyVersion         = "9.2.2.v20140723", +	ext.jodaVersion          = "2.4", +	ext.tomcatVersion        = "8.0.9", +	ext.protobufVersion      = "2.5.0", +	ext.woodstoxVersion      = "4.1.6", +		javaApiSignature("org.codehaus.mojo.signature:java16:1.1@signature")  // as from JDK 6 update 18, +		"http://docs.oracle.com/javase/8/docs/api/",, +		"http://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/", +	configurations {, +		jacoco, +	}, +, +	dependencies {, +		jacoco("org.jacoco:org.jacoco.agent:0.7.1.201405082137:runtime"), +	}, +, +	gradle.taskGraph.whenReady {taskGraph ->, +		if (taskGraph.hasTask(':sonarRunner')) {, +			test.jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=org.springframework.*", +		}, +	}, +, +		classifier = 'sources', +		from sourceSets.main.allSource, +		include '**/*.java', +		include '**/*.groovy', +		include '**/*.aj', +		include 'META-INF/spring.factories', +		include 'META-INF/services/*', +		include '**/*.properties', +		include '**/*.xml', +		include '**/*.types', +		testCompile("org.codehaus.woodstox:woodstox-core-asl:${woodstoxVersion}") {, +		optional("com.jamonapi:jamon:2.76"), +		optional("org.projectreactor:reactor-core:1.1.3.RELEASE"), +		optional("org.projectreactor:reactor-net:1.1.3.RELEASE"), +		optional("com.h2database:h2:1.4.180"), +		optional("net.sf.ehcache:ehcache:${ehcacheVersion}"), +		testCompile(project(":spring-context")), +		testCompile("org.ehcache:jcache:${ehcacheJCacheVersion}"), +	// pick up **/mime.types files in src/main, +	// Re-generate Protobuf classes from *.proto files and move them in test sources, +	if (project.hasProperty('genProtobuf')) {, +		apply plugin: 'protobuf', +, +		task updateGenProtobuf(type:Copy, dependsOn: ":spring-web:generateTestProto") {, +			from "${project.buildDir}/generated-sources/test/", +			into "${projectDir}/src/test/java", +			doLast {, +				project.delete "${project.buildDir}/generated-sources/test", +			}, +		}, +, +		tasks.getByPath("compileTestJava").dependsOn "updateGenProtobuf", +	}, +, +		optional("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jackson2Version}"), +		optional("com.rometools:rome:1.5.0"), +		optional("com.googlecode.protobuf-java-format:protobuf-java-format:1.2"), +		optional("com.google.protobuf:protobuf-java:${protobufVersion}"), +		optional("org.glassfish.tyrus:tyrus-spi:1.3.5"), +		optional("org.glassfish.tyrus:tyrus-core:1.3.5"), +		optional("org.glassfish.tyrus:tyrus-server:1.3.5"), +		optional("org.glassfish.tyrus:tyrus-container-servlet:1.3.5"), +		optional("org.eclipse.jetty:jetty-client:${jettyVersion}"), +		testCompile("org.projectreactor:reactor-core:1.1.3.RELEASE"), +		testCompile("org.projectreactor:reactor-net:1.1.3.RELEASE"), +		testCompile("org.aspectj:aspectjweaver:${aspectjVersion}"), +		optional("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jackson2Version}"), +		optional("com.rometools:rome:1.5.0"), +		optional("javax.el:javax.el-api:2.2.5"), +		optional("org.apache.tiles:tiles-api:${tiles3Version}"), +		optional("org.apache.tiles:tiles-core:${tiles3Version}") {, +		optional("org.apache.tiles:tiles-servlet:${tiles3Version}") {, +		optional("org.apache.tiles:tiles-jsp:${tiles3Version}") {, +		optional("org.apache.tiles:tiles-el:${tiles3Version}") {, +		optional("org.apache.tiles:tiles-extras:${tiles3Version}") {, +project("spring-webmvc-tiles2") {]