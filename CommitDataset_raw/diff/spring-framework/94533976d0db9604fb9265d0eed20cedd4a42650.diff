[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +import java.util.LinkedList;, +			metadata.inject(bean, beanName, pvs);, +			throw new BeanCreationException(beanName, "Injection of autowired dependencies failed", ex);, +	 * @throws BeansException if autowiring failed, +		Class<?> clazz = bean.getClass();, +		InjectionMetadata metadata = findAutowiringMetadata(clazz);, +			metadata.inject(bean, null, null);, +			throw new BeanCreationException("Injection of autowired dependencies failed for class [" + clazz + "]", ex);, +					LinkedList<InjectionMetadata.InjectedElement> elements = new LinkedList<InjectionMetadata.InjectedElement>();, +					Class<?> targetClass = clazz;, +, +					do {, +						LinkedList<InjectionMetadata.InjectedElement> currElements = new LinkedList<InjectionMetadata.InjectedElement>();, +						for (Field field : targetClass.getDeclaredFields()) {, +									if (logger.isWarnEnabled()) {, +										logger.warn("Autowired annotation is not supported on static fields: " + field);, +									}, +									continue;, +								currElements.add(new AutowiredFieldElement(field, required));, +						for (Method method : targetClass.getDeclaredMethods()) {, +									if (logger.isWarnEnabled()) {, +										logger.warn("Autowired annotation is not supported on static methods: " + method);, +									}, +									continue;, +									if (logger.isWarnEnabled()) {, +										logger.warn("Autowired annotation should be used on methods with actual parameters: " + method);, +									}, +								currElements.add(new AutowiredMethodElement(method, required, pd));, +						elements.addAll(0, currElements);, +						targetClass = targetClass.getSuperclass();, +					}, +					while (targetClass != null && targetClass != Object.class);, +, +					metadata = new InjectionMetadata(clazz, elements);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +import java.util.LinkedList;, +			metadata.inject(bean, beanName, pvs);, +			throw new BeanCreationException(beanName, "Injection of autowired dependencies failed", ex);, +	 * @throws BeansException if autowiring failed, +		Class<?> clazz = bean.getClass();, +		InjectionMetadata metadata = findAutowiringMetadata(clazz);, +			metadata.inject(bean, null, null);, +			throw new BeanCreationException("Injection of autowired dependencies failed for class [" + clazz + "]", ex);, +					LinkedList<InjectionMetadata.InjectedElement> elements = new LinkedList<InjectionMetadata.InjectedElement>();, +					Class<?> targetClass = clazz;, +, +					do {, +						LinkedList<InjectionMetadata.InjectedElement> currElements = new LinkedList<InjectionMetadata.InjectedElement>();, +						for (Field field : targetClass.getDeclaredFields()) {, +									if (logger.isWarnEnabled()) {, +										logger.warn("Autowired annotation is not supported on static fields: " + field);, +									}, +									continue;, +								currElements.add(new AutowiredFieldElement(field, required));, +						for (Method method : targetClass.getDeclaredMethods()) {, +									if (logger.isWarnEnabled()) {, +										logger.warn("Autowired annotation is not supported on static methods: " + method);, +									}, +									continue;, +									if (logger.isWarnEnabled()) {, +										logger.warn("Autowired annotation should be used on methods with actual parameters: " + method);, +									}, +								currElements.add(new AutowiredMethodElement(method, required, pd));, +						elements.addAll(0, currElements);, +						targetClass = targetClass.getSuperclass();, +					}, +					while (targetClass != null && targetClass != Object.class);, +, +					metadata = new InjectionMetadata(clazz, elements);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/InjectionMetadata.java, +	private final Set<InjectedElement> injectedElements;, +	public InjectionMetadata(Class targetClass, Collection<InjectedElement> elements) {, +		this.injectedElements = new LinkedHashSet<InjectedElement>();, +		for (InjectedElement element : elements) {, +				logger.debug("Found injected element on class [" + targetClass.getName() + "]: " + element);, +			this.injectedElements.add(element);, +		for (Iterator<InjectedElement> it = this.injectedElements.iterator(); it.hasNext();) {, +	public void inject(Object target, String beanName, PropertyValues pvs) throws Throwable {, +		if (!this.injectedElements.isEmpty()) {, +			for (InjectedElement element : this.injectedElements) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +import java.util.LinkedList;, +			metadata.inject(bean, beanName, pvs);, +			throw new BeanCreationException(beanName, "Injection of autowired dependencies failed", ex);, +	 * @throws BeansException if autowiring failed, +		Class<?> clazz = bean.getClass();, +		InjectionMetadata metadata = findAutowiringMetadata(clazz);, +			metadata.inject(bean, null, null);, +			throw new BeanCreationException("Injection of autowired dependencies failed for class [" + clazz + "]", ex);, +					LinkedList<InjectionMetadata.InjectedElement> elements = new LinkedList<InjectionMetadata.InjectedElement>();, +					Class<?> targetClass = clazz;, +, +					do {, +						LinkedList<InjectionMetadata.InjectedElement> currElements = new LinkedList<InjectionMetadata.InjectedElement>();, +						for (Field field : targetClass.getDeclaredFields()) {, +									if (logger.isWarnEnabled()) {, +										logger.warn("Autowired annotation is not supported on static fields: " + field);, +									}, +									continue;]