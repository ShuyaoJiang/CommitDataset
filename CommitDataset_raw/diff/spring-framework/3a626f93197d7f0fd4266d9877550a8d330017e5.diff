[+++ b/spring-core/src/main/java/org/springframework/core/io/support/ResourcePropertySource.java, + * Copyright 2002-2013 the original author or authors., + * {@code "classpath:/com/myco/foo.properties"} or {@code "file:/path/to/file.xml"}., + * Both traditional and XML-based properties file formats are supported, however in order, + * for XML processing to take effect, the underlying {@code Resource}'s, + * {@link org.springframework.core.io.Resource#getFilename() getFilename()} method must, + * return non-{@code null} and end in ".xml"., +		String filename = resource.getFilename();, +		if (filename != null && filename.endsWith(".xml")) {, +			props.loadFromXML(is);, +		}, +		else {, +		}, +++ b/spring-core/src/main/java/org/springframework/core/io/support/ResourcePropertySource.java, + * Copyright 2002-2013 the original author or authors., + * {@code "classpath:/com/myco/foo.properties"} or {@code "file:/path/to/file.xml"}., + * Both traditional and XML-based properties file formats are supported, however in order, + * for XML processing to take effect, the underlying {@code Resource}'s, + * {@link org.springframework.core.io.Resource#getFilename() getFilename()} method must, + * return non-{@code null} and end in ".xml"., +		String filename = resource.getFilename();, +		if (filename != null && filename.endsWith(".xml")) {, +			props.loadFromXML(is);, +		}, +		else {, +		}, +++ b/spring-core/src/test/java/org/springframework/core/io/example.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">, +<properties version="1.0">, +	<entry key="foo">bar</entry>, +</properties>, +, +++ b/spring-core/src/main/java/org/springframework/core/io/support/ResourcePropertySource.java, + * Copyright 2002-2013 the original author or authors., + * {@code "classpath:/com/myco/foo.properties"} or {@code "file:/path/to/file.xml"}., + * Both traditional and XML-based properties file formats are supported, however in order, + * for XML processing to take effect, the underlying {@code Resource}'s, + * {@link org.springframework.core.io.Resource#getFilename() getFilename()} method must, + * return non-{@code null} and end in ".xml"., +		String filename = resource.getFilename();, +		if (filename != null && filename.endsWith(".xml")) {, +			props.loadFromXML(is);, +		}, +		else {, +		}, +++ b/spring-core/src/test/java/org/springframework/core/io/example.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">, +<properties version="1.0">, +	<entry key="foo">bar</entry>, +</properties>, +, +++ b/spring-core/src/test/java/org/springframework/core/io/support/ResourcePropertySourceTests.java, + * Copyright 2002-2013 the original author or authors., +	private static final String XML_PROPERTIES_PATH = "org/springframework/core/io/example.xml";, +	private static final String XML_PROPERTIES_LOCATION = "classpath:" + XML_PROPERTIES_PATH;, +	private static final String XML_PROPERTIES_RESOURCE_DESCRIPTION = "class path resource [" + XML_PROPERTIES_PATH + "]";, +, +	public void xmlWithLocationAndGeneratedName() throws IOException {, +		PropertySource<?> ps = new ResourcePropertySource(XML_PROPERTIES_LOCATION);, +		assertEquals(ps.getProperty("foo"), "bar");, +		assertThat(ps.getName(), is(XML_PROPERTIES_RESOURCE_DESCRIPTION));, +	}, +, +	@Test]