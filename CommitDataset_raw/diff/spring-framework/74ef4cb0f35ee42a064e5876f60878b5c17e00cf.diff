[+++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/config/ServiceLocatorFactoryBeanTests.java, +/*, + * Copyright 2002-2008 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.beans.factory.config;, +, +import static org.easymock.EasyMock.*;, +import static org.junit.Assert.*;, +import static org.springframework.beans.factory.support.BeanDefinitionBuilder.genericBeanDefinition;, +, +import org.junit.Before;, +import org.junit.Ignore;, +import org.junit.Test;, +import org.springframework.beans.FatalBeanException;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +import org.springframework.core.NestedCheckedException;, +import org.springframework.core.NestedRuntimeException;, +, +/**, + * @author Colin Sampaleanu, + * @author Rick Evans, + * @author Chris Beams, + */, +public class ServiceLocatorFactoryBeanTests {, +, +	private DefaultListableBeanFactory bf;, +	, +	@Before, +	public void setUp() {, +		bf = new DefaultListableBeanFactory();, +	}, +, +	@Test, +	public void testNoArgGetter() {, +		bf.registerBeanDefinition("testService", genericBeanDefinition(TestService.class).getBeanDefinition());, +		bf.registerBeanDefinition("factory",, +				genericBeanDefinition(ServiceLocatorFactoryBean.class), +				.addPropertyValue("serviceLocatorInterface", TestServiceLocator.class), +				.getBeanDefinition());, +		, +		TestServiceLocator factory = (TestServiceLocator) bf.getBean("factory");, +		TestService testService = factory.getTestService();, +		assertNotNull(testService);, +	}, +, +	@Test, +	public void testErrorOnTooManyOrTooFew() throws Exception {, +		bf.registerBeanDefinition("testService", genericBeanDefinition(TestService.class).getBeanDefinition());, +		bf.registerBeanDefinition("testServiceInstance2", genericBeanDefinition(TestService.class).getBeanDefinition());, +		bf.registerBeanDefinition("factory",, +				genericBeanDefinition(ServiceLocatorFactoryBean.class), +				.addPropertyValue("serviceLocatorInterface", TestServiceLocator.class), +				.getBeanDefinition());, +		bf.registerBeanDefinition("factory2",, +				genericBeanDefinition(ServiceLocatorFactoryBean.class), +				.addPropertyValue("serviceLocatorInterface", TestServiceLocator2.class), +				.getBeanDefinition());, +		bf.registerBeanDefinition("factory3",, +				genericBeanDefinition(ServiceLocatorFactoryBean.class), +				.addPropertyValue("serviceLocatorInterface", TestService2Locator.class), +				.getBeanDefinition());, +		, +		try {, +			TestServiceLocator factory = (TestServiceLocator) bf.getBean("factory");, +			factory.getTestService();, +			fail("Must fail on more than one matching type");, +		} catch (NoSuchBeanDefinitionException ex) { /* expected */ }, +		, +		try {, +			TestServiceLocator2 factory = (TestServiceLocator2) bf.getBean("factory2");, +			factory.getTestService(null);, +			fail("Must fail on more than one matching type");, +		} catch (NoSuchBeanDefinitionException ex) { /* expected */ }, +, +		try {, +			TestService2Locator factory = (TestService2Locator) bf.getBean("factory3");, +			factory.getTestService();, +			fail("Must fail on no matching types");, +		} catch (NoSuchBeanDefinitionException ex) { /* expected */ }, +	}, +, +	@Test, +	public void testErrorOnTooManyOrTooFewWithCustomServiceLocatorException() {, +		bf.registerBeanDefinition("testService", genericBeanDefinition(TestService.class).getBeanDefinition());, +		bf.registerBeanDefinition("testServiceInstance2", genericBeanDefinition(TestService.class).getBeanDefinition());]