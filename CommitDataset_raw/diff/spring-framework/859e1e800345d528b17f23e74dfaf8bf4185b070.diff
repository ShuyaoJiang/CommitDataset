[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, +import java.util.AbstractMap;, +import java.util.Set;, +import org.yaml.snakeyaml.constructor.Constructor;, +import org.yaml.snakeyaml.nodes.MappingNode;, +import org.yaml.snakeyaml.parser.ParserException;, +		Yaml yaml = new Yaml(new StrictMapAppenderConstructor());, +, +	/**, +	 * A specialized {@link Constructor} that checks for duplicate keys., +	 */, +	private static class StrictMapAppenderConstructor extends Constructor {, +, +		public 	StrictMapAppenderConstructor() {, +			super();, +		}, +, +		@Override, +		protected Map<Object, Object> constructMapping(MappingNode node) {, +			try {, +				return super.constructMapping(node);, +			} catch (IllegalStateException e) {, +				throw new ParserException("while parsing MappingNode",, +						node.getStartMark(), e.getMessage(), node.getEndMark());, +			}, +		}, +, +		@Override, +		protected Map<Object, Object> createDefaultMap() {, +			final Map<Object, Object> delegate = super.createDefaultMap();, +			return new AbstractMap<Object, Object>() {, +				@Override, +				public Object put(Object key, Object value) {, +					if (delegate.containsKey(key)) {, +						throw new IllegalStateException("duplicate key: " + key);, +					}, +					return delegate.put(key, value);, +				}, +				@Override, +				public Set<Entry<Object, Object>> entrySet() {, +					return delegate.entrySet();, +				}, +			};, +		}, +, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, +import java.util.AbstractMap;, +import java.util.Set;, +import org.yaml.snakeyaml.constructor.Constructor;, +import org.yaml.snakeyaml.nodes.MappingNode;, +import org.yaml.snakeyaml.parser.ParserException;, +		Yaml yaml = new Yaml(new StrictMapAppenderConstructor());, +, +	/**, +	 * A specialized {@link Constructor} that checks for duplicate keys., +	 */, +	private static class StrictMapAppenderConstructor extends Constructor {, +, +		public 	StrictMapAppenderConstructor() {, +			super();, +		}, +, +		@Override, +		protected Map<Object, Object> constructMapping(MappingNode node) {, +			try {, +				return super.constructMapping(node);, +			} catch (IllegalStateException e) {, +				throw new ParserException("while parsing MappingNode",, +						node.getStartMark(), e.getMessage(), node.getEndMark());, +			}, +		}, +, +		@Override, +		protected Map<Object, Object> createDefaultMap() {, +			final Map<Object, Object> delegate = super.createDefaultMap();, +			return new AbstractMap<Object, Object>() {, +				@Override, +				public Object put(Object key, Object value) {, +					if (delegate.containsKey(key)) {, +						throw new IllegalStateException("duplicate key: " + key);, +					}, +					return delegate.put(key, value);, +				}, +				@Override, +				public Set<Entry<Object, Object>> entrySet() {, +					return delegate.entrySet();, +				}, +			};, +		}, +, +	}, +, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/config/YamlMapFactoryBeanTests.java, +import org.yaml.snakeyaml.parser.ParserException;, +		this.factory.setResources(new AbstractResource() {, +		}, new ByteArrayResource("foo:\n  spam: bar".getBytes()));, +	@Test(expected = ParserException.class), +	public void testDuplicateKey() throws Exception {]