[+++ b/build.gradle, +	// As of Spring 4.0.3, spring-core includes asm 5.0 and repackages cglib 3.1, inlining, +	// both into the spring-core jar. cglib 3.1 itself depends on asm 4+, and is therefore, +++ b/build.gradle, +	// As of Spring 4.0.3, spring-core includes asm 5.0 and repackages cglib 3.1, inlining, +	// both into the spring-core jar. cglib 3.1 itself depends on asm 4+, and is therefore, +++ b/spring-core/src/main/java/org/springframework/asm/AnnotationVisitor.java, +     * must be one of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}., +     *            of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}., +     *            of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}., +        if (api != Opcodes.ASM4 && api != Opcodes.ASM5) {, +++ b/build.gradle, +	// As of Spring 4.0.3, spring-core includes asm 5.0 and repackages cglib 3.1, inlining, +	// both into the spring-core jar. cglib 3.1 itself depends on asm 4+, and is therefore, +++ b/spring-core/src/main/java/org/springframework/asm/AnnotationVisitor.java, +     * must be one of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}., +     *            of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}., +     *            of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}., +        if (api != Opcodes.ASM4 && api != Opcodes.ASM5) {, +++ b/spring-core/src/main/java/org/springframework/asm/AnnotationWriter.java, +        super(Opcodes.ASM5);, +, +    /**, +     * Puts the given type reference and type path into the given bytevector., +     * LOCAL_VARIABLE and RESOURCE_VARIABLE target types are not supported., +     * , +     * @param typeRef, +     *            a reference to the annotated type. See {@link TypeReference}., +     * @param typePath, +     *            the path to the annotated type argument, wildcard bound, array, +     *            element type, or static inner type within 'typeRef'. May be, +     *            <tt>null</tt> if the annotation targets 'typeRef' as a whole., +     * @param out, +     *            where the type reference and type path must be put., +     */, +    static void putTarget(int typeRef, TypePath typePath, ByteVector out) {, +        switch (typeRef >>> 24) {, +        case 0x00: // CLASS_TYPE_PARAMETER, +        case 0x01: // METHOD_TYPE_PARAMETER, +        case 0x16: // METHOD_FORMAL_PARAMETER, +            out.putShort(typeRef >>> 16);, +            break;, +        case 0x13: // FIELD, +        case 0x14: // METHOD_RETURN, +        case 0x15: // METHOD_RECEIVER, +            out.putByte(typeRef >>> 24);, +            break;, +        case 0x47: // CAST, +        case 0x48: // CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT, +        case 0x49: // METHOD_INVOCATION_TYPE_ARGUMENT, +        case 0x4A: // CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT, +        case 0x4B: // METHOD_REFERENCE_TYPE_ARGUMENT, +            out.putInt(typeRef);, +            break;, +        // case 0x10: // CLASS_EXTENDS, +        // case 0x11: // CLASS_TYPE_PARAMETER_BOUND, +        // case 0x12: // METHOD_TYPE_PARAMETER_BOUND, +        // case 0x17: // THROWS, +        // case 0x42: // EXCEPTION_PARAMETER, +        // case 0x43: // INSTANCEOF, +        // case 0x44: // NEW, +        // case 0x45: // CONSTRUCTOR_REFERENCE, +        // case 0x46: // METHOD_REFERENCE, +        default:, +            out.put12(typeRef >>> 24, (typeRef & 0xFFFF00) >> 8);, +            break;, +        }, +        if (typePath == null) {, +            out.putByte(0);, +        } else {, +            int length = typePath.b[typePath.offset] * 2 + 1;, +            out.putByteArray(typePath.b, typePath.offset, length);, +        }, +    }, +++ b/build.gradle, +	// As of Spring 4.0.3, spring-core includes asm 5.0 and repackages cglib 3.1, inlining, +	// both into the spring-core jar. cglib 3.1 itself depends on asm 4+, and is therefore, +++ b/spring-core/src/main/java/org/springframework/asm/AnnotationVisitor.java, +     * must be one of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}., +     *            of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}., +     *            of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}., +        if (api != Opcodes.ASM4 && api != Opcodes.ASM5) {, +++ b/spring-core/src/main/java/org/springframework/asm/AnnotationWriter.java, +        super(Opcodes.ASM5);, +, +    /**, +     * Puts the given type reference and type path into the given bytevector., +     * LOCAL_VARIABLE and RESOURCE_VARIABLE target types are not supported., +     * , +     * @param typeRef, +     *            a reference to the annotated type. See {@link TypeReference}., +     * @param typePath, +     *            the path to the annotated type argument, wildcard bound, array, +     *            element type, or static inner type within 'typeRef'. May be, +     *            <tt>null</tt> if the annotation targets 'typeRef' as a whole., +     * @param out, +     *            where the type reference and type path must be put., +     */, +    static void putTarget(int typeRef, TypePath typePath, ByteVector out) {, +        switch (typeRef >>> 24) {]