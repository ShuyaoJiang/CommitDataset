[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +			if (conversionService.matches(convertedValue.getClass(), typeDesc)) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +			if (conversionService.matches(convertedValue.getClass(), typeDesc)) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionFailedException.java, +	private TypeDescriptor sourceType;, +	public ConversionFailedException(TypeDescriptor sourceType, TypeDescriptor targetType, Object value, Throwable cause) {, +	public TypeDescriptor getSourceType() {, +	private static String buildDefaultMessage(Object value, TypeDescriptor sourceType, TypeDescriptor targetType,, +			Throwable cause) {, +		return "Unable to convert value " + value + " from type [" + sourceType.getName() + "] to type [", +				+ targetType.getName() + "]; reason = '" + cause.getMessage() + "'";, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +			if (conversionService.matches(convertedValue.getClass(), typeDesc)) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionFailedException.java, +	private TypeDescriptor sourceType;, +	public ConversionFailedException(TypeDescriptor sourceType, TypeDescriptor targetType, Object value, Throwable cause) {, +	public TypeDescriptor getSourceType() {, +	private static String buildDefaultMessage(Object value, TypeDescriptor sourceType, TypeDescriptor targetType,, +			Throwable cause) {, +		return "Unable to convert value " + value + " from type [" + sourceType.getName() + "] to type [", +				+ targetType.getName() + "]; reason = '" + cause.getMessage() + "'";, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, + * Call {@link #convert(Object, Class)} to perform a thread-safe type conversion using this system., +	 * Returns true if objects of sourceType can be converted to the targetType., +	 * The TypeDescriptors provide additional context about the variable locations where conversion would occur, often object property locations., +	 * @param source context about the source type to convert from (required), +	 * @return true if a conversion can be performed between the source and target types, false if not, +	boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType);, +	 * Convert the source to targetTyp., +	 * The TypeDescriptors provide additional context about the variable locations where conversion will occur, often object property locations., +	 * @param sourceType context about the source type to convert from (required), +	 * @return the converted object, an instance of {@link TypeDescriptor#getObjectType()}</code>, +	Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +			if (conversionService.matches(convertedValue.getClass(), typeDesc)) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionFailedException.java, +	private TypeDescriptor sourceType;, +	public ConversionFailedException(TypeDescriptor sourceType, TypeDescriptor targetType, Object value, Throwable cause) {, +	public TypeDescriptor getSourceType() {, +	private static String buildDefaultMessage(Object value, TypeDescriptor sourceType, TypeDescriptor targetType,, +			Throwable cause) {, +		return "Unable to convert value " + value + " from type [" + sourceType.getName() + "] to type [", +				+ targetType.getName() + "]; reason = '" + cause.getMessage() + "'";, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, + * Call {@link #convert(Object, Class)} to perform a thread-safe type conversion using this system., +	 * Returns true if objects of sourceType can be converted to the targetType., +	 * The TypeDescriptors provide additional context about the variable locations where conversion would occur, often object property locations., +	 * @param source context about the source type to convert from (required), +	 * @return true if a conversion can be performed between the source and target types, false if not, +	boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType);, +	 * Convert the source to targetTyp., +	 * The TypeDescriptors provide additional context about the variable locations where conversion will occur, often object property locations., +	 * @param sourceType context about the source type to convert from (required), +	 * @return the converted object, an instance of {@link TypeDescriptor#getObjectType()}</code>, +	Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConverterNotFoundException.java, +	private final TypeDescriptor sourceType;, +	private final TypeDescriptor targetType;, +	public ConverterNotFoundException(TypeDescriptor sourceType, TypeDescriptor targetType) {, +	public TypeDescriptor getSourceType() {, +	public TypeDescriptor getTargetType() {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +			if (conversionService.matches(convertedValue.getClass(), typeDesc)) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionFailedException.java, +	private TypeDescriptor sourceType;, +	public ConversionFailedException(TypeDescriptor sourceType, TypeDescriptor targetType, Object value, Throwable cause) {, +	public TypeDescriptor getSourceType() {, +	private static String buildDefaultMessage(Object value, TypeDescriptor sourceType, TypeDescriptor targetType,, +			Throwable cause) {, +		return "Unable to convert value " + value + " from type [" + sourceType.getName() + "] to type [", +				+ targetType.getName() + "]; reason = '" + cause.getMessage() + "'";, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, + * Call {@link #convert(Object, Class)} to perform a thread-safe type conversion using this system., +	 * Returns true if objects of sourceType can be converted to the targetType., +	 * The TypeDescriptors provide additional context about the variable locations where conversion would occur, often object property locations., +	 * @param source context about the source type to convert from (required), +	 * @return true if a conversion can be performed between the source and target types, false if not, +	boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType);, +	 * Convert the source to targetTyp., +	 * The TypeDescriptors provide additional context about the variable locations where conversion will occur, often object property locations., +	 * @param sourceType context about the source type to convert from (required), +	 * @return the converted object, an instance of {@link TypeDescriptor#getObjectType()}</code>, +	Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConverterNotFoundException.java, +	private final TypeDescriptor sourceType;, +	private final TypeDescriptor targetType;, +	public ConverterNotFoundException(TypeDescriptor sourceType, TypeDescriptor targetType) {, +	public TypeDescriptor getSourceType() {, +	public TypeDescriptor getTargetType() {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Return the element type as a type descriptor., +	 */, +	public TypeDescriptor getElementTypeDescriptor() {, +		return TypeDescriptor.valueOf(getElementType());, +	}, +, +	/**, +	public TypeDescriptor getMapKeyTypeDescriptor() {, +		return TypeDescriptor.valueOf(getMapKeyType());]