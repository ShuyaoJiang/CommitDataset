[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java, +		this.source.subscribe(new WriteBarrier(actual));, +	/**, +	 * A barrier between the write source and the write subscriber (i.e. the, +	 * HTTP server adapter) that pre-fetches and waits for the first signal, +	 * before deciding whether to hook in to the write subscriber., +	 *, +	 * <p>Acts as:, +	 * <ul>, +	 * <li>Subscriber to the write source., +	 * <li>Subscription to the write subscriber., +	 * <li>Publisher ot the write subscriber., +	 * </ul>, +	 *, +	 * <p>Also uses {@link WriteCompletionBarrier} for delegating signals to, +	 * and from the write completion subscriber., +	 */, +	private final class WriteBarrier implements CoreSubscriber<T>, Subscription, Publisher<T> {, +		/* Bridges signals to and from the completionSubscriber */, +		private final WriteCompletionBarrier writeCompletionBarrier;, +		/** The actual writeSubscriber from the HTTP server adapter */, +		WriteBarrier(CoreSubscriber<? super Void> completionSubscriber) {, +			this.writeCompletionBarrier = new WriteCompletionBarrier(completionSubscriber, this);, +				this.writeCompletionBarrier.connect();, +					writeFunction.apply(this).subscribe(this.writeCompletionBarrier);, +					this.writeCompletionBarrier.onError(new IllegalStateException("Unexpected item."));, +					this.writeCompletionBarrier.onError(ex);, +					writeFunction.apply(this).subscribe(this.writeCompletionBarrier);, +			return this.writeCompletionBarrier.currentContext();, +		// Subscription methods (we're the Subscription to the writeSubscriber).., +				}, +			}, +		// Publisher<T> methods (we're the Publisher to the writeSubscriber).., +	/**, +	 * We need an extra barrier between the WriteBarrier and the actual, +	 * completion subscriber., +	 *, +	 * <p>The actual completionSubscriber is subscribed immediately to the, +	 * WriteBarrier initially. Later after the first signal is received, we need, +	 * this wrapper to subscribe again, this time to the write function., +	 */, +	private class WriteCompletionBarrier implements CoreSubscriber<Void>, Subscription {, +		/* Downstream write completion subscriber */, +		private final CoreSubscriber<? super Void> completionSubscriber;, +		private final WriteBarrier writeBarrier;, +, +, +		public WriteCompletionBarrier(CoreSubscriber<? super Void> subscriber, WriteBarrier writeBarrier) {, +			this.completionSubscriber = subscriber;, +			this.writeBarrier = writeBarrier;, +, +		/**, +		 * Connect the underlying completion subscriber to this barrier in order, +		 * to track cancel signals and pass them on to the write barrier., +		 */, +		public void connect() {, +			this.completionSubscriber.onSubscribe(this);, +		}, +, +		// Subscriber methods (we're the subscriber to the write function).., +, +			this.completionSubscriber.onError(ex);, +			this.completionSubscriber.onComplete();, +			return this.completionSubscriber.currentContext();, +		}, +, +, +		@Override, +		public void request(long n) {, +			// Ignore: we don't produce data, +		}, +, +		@Override, +		public void cancel() {, +			this.writeBarrier.cancel();]