[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RenderingResponse.java, +	 * Create a builder with the template name, status code, headers and model of the given response., +	 * @param other the response to copy the values from, +	 * @return the created builder, +	 */, +	static Builder from(RenderingResponse other) {, +		Assert.notNull(other, "'other' must not be null");, +		DefaultRenderingResponseBuilder builder = new DefaultRenderingResponseBuilder(other.name());, +		builder.status(other.statusCode());, +		builder.headers(other.headers());, +		builder.modelAttributes(other.model());, +		return builder;, +	}, +, +	/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RenderingResponse.java, +	 * Create a builder with the template name, status code, headers and model of the given response., +	 * @param other the response to copy the values from, +	 * @return the created builder, +	 */, +	static Builder from(RenderingResponse other) {, +		Assert.notNull(other, "'other' must not be null");, +		DefaultRenderingResponseBuilder builder = new DefaultRenderingResponseBuilder(other.name());, +		builder.status(other.statusCode());, +		builder.headers(other.headers());, +		builder.modelAttributes(other.model());, +		return builder;, +	}, +, +	/**, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/RenderingResponseIntegrationTests.java, +						response -> RenderingResponse.from(response), +								.modelAttribute("qux", "quux"), +								.build()));]