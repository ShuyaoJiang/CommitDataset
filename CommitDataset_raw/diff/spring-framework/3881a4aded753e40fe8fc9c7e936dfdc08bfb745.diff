[+++ b/spring-core/src/main/java/org/springframework/core/codec/Hints.java, +, +		return (hints != null ? (String) hints.getOrDefault(LOG_PREFIX_HINT, "") : "");, +		return (hints != null && (boolean) hints.getOrDefault(SUPPRESS_LOGGING_HINT, false));, +++ b/spring-core/src/main/java/org/springframework/core/codec/Hints.java, +, +		return (hints != null ? (String) hints.getOrDefault(LOG_PREFIX_HINT, "") : "");, +		return (hints != null && (boolean) hints.getOrDefault(SUPPRESS_LOGGING_HINT, false));, +++ b/spring-core/src/main/java/org/springframework/core/env/Profiles.java, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/Hints.java, +, +		return (hints != null ? (String) hints.getOrDefault(LOG_PREFIX_HINT, "") : "");, +		return (hints != null && (boolean) hints.getOrDefault(SUPPRESS_LOGGING_HINT, false));, +++ b/spring-core/src/main/java/org/springframework/core/env/Profiles.java, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler.java, +	@Override, +	public void setApplicationEventPublisher(@Nullable ApplicationEventPublisher publisher) {, +		this.eventPublisher = publisher;, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/Hints.java, +, +		return (hints != null ? (String) hints.getOrDefault(LOG_PREFIX_HINT, "") : "");, +		return (hints != null && (boolean) hints.getOrDefault(SUPPRESS_LOGGING_HINT, false));, +++ b/spring-core/src/main/java/org/springframework/core/env/Profiles.java, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler.java, +	@Override, +	public void setApplicationEventPublisher(@Nullable ApplicationEventPublisher publisher) {, +		this.eventPublisher = publisher;, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/AbstractMessageChannel.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-core/src/main/java/org/springframework/core/codec/Hints.java, +, +		return (hints != null ? (String) hints.getOrDefault(LOG_PREFIX_HINT, "") : "");, +		return (hints != null && (boolean) hints.getOrDefault(SUPPRESS_LOGGING_HINT, false));, +++ b/spring-core/src/main/java/org/springframework/core/env/Profiles.java, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler.java, +	@Override, +	public void setApplicationEventPublisher(@Nullable ApplicationEventPublisher publisher) {, +		this.eventPublisher = publisher;, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/AbstractMessageChannel.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-test/src/main/java/org/springframework/mock/web/server/MockServerWebExchange.java, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/Hints.java, +, +		return (hints != null ? (String) hints.getOrDefault(LOG_PREFIX_HINT, "") : "");, +		return (hints != null && (boolean) hints.getOrDefault(SUPPRESS_LOGGING_HINT, false));, +++ b/spring-core/src/main/java/org/springframework/core/env/Profiles.java, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler.java, +	@Override, +	public void setApplicationEventPublisher(@Nullable ApplicationEventPublisher publisher) {, +		this.eventPublisher = publisher;, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/AbstractMessageChannel.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-test/src/main/java/org/springframework/mock/web/server/MockServerWebExchange.java, +, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/MockMvc.java, +	 * <p>This is intended for use in custom request processing scenario where a, +	 * request handling component happens to delegate to the {@code DispatcherServlet}, +	 * at runtime and therefore needs to be injected with it., +	 * <p>For most processing scenarios, simply use {@link MockMvc#perform},, +	 * or if you need to configure the {@code DispatcherServlet}, provide a, +++ b/spring-core/src/main/java/org/springframework/core/codec/Hints.java, +, +		return (hints != null ? (String) hints.getOrDefault(LOG_PREFIX_HINT, "") : "");, +		return (hints != null && (boolean) hints.getOrDefault(SUPPRESS_LOGGING_HINT, false));, +++ b/spring-core/src/main/java/org/springframework/core/env/Profiles.java, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler.java, +	@Override, +	public void setApplicationEventPublisher(@Nullable ApplicationEventPublisher publisher) {, +		this.eventPublisher = publisher;, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/AbstractMessageChannel.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-test/src/main/java/org/springframework/mock/web/server/MockServerWebExchange.java, +, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/MockMvc.java, +	 * <p>This is intended for use in custom request processing scenario where a, +	 * request handling component happens to delegate to the {@code DispatcherServlet}, +	 * at runtime and therefore needs to be injected with it., +	 * <p>For most processing scenarios, simply use {@link MockMvc#perform},, +	 * or if you need to configure the {@code DispatcherServlet}, provide a, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/ResultMatcher.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/Hints.java, +, +		return (hints != null ? (String) hints.getOrDefault(LOG_PREFIX_HINT, "") : "");]