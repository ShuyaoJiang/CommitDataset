[+++ b/spring-test/src/test/java/org/springframework/test/web/client/match/JsonPathRequestMatchersTests.java, +import static org.hamcrest.CoreMatchers.*;, +, + * @author Sam Brannen, +	private static final String REQUEST_CONTENT = "{" + //, +			"'str':        'foo',           " + //, +			"'num':        5,               " + //, +			"'bool':       true,            " + //, +			"'arr':        [42],            " + //, +			"'emptyArray': [],              " + //, +			"'colorMap':   {'red': 'rojo'}, " + //, +			"'emptyMap':   {}               " + //, +	"}";, +	private static final MockClientHttpRequest request = new MockClientHttpRequest();, +	static {, +		try {, +			request.getBody().write(REQUEST_CONTENT.getBytes());, +		catch (IOException e) {, +			throw new IllegalStateException(e);, +		}, +	}, +, +		new JsonPathRequestMatchers("$.str").value("foo").match(request);, +		new JsonPathRequestMatchers("$.str").value("bogus").match(request);, +	public void valueWithMatcher() throws Exception {, +		new JsonPathRequestMatchers("$.str").value(equalTo("foo")).match(request);, +	public void valueWithMatcherNoMatch() throws Exception {, +		new JsonPathRequestMatchers("$.str").value(equalTo("bogus")).match(request);, +		new JsonPathRequestMatchers("$.str").exists().match(request);, +	}, +, +	@Test, +	public void existsForAnEmptyArray() throws Exception {, +		new JsonPathRequestMatchers("$.emptyArray").exists().match(request);, +	}, +, +	@Test, +	public void existsForAnEmptyMap() throws Exception {, +		new JsonPathRequestMatchers("$.emptyMap").exists().match(request);, +		new JsonPathRequestMatchers("$.bogus").exists().match(request);, +		new JsonPathRequestMatchers("$.bogus").doesNotExist().match(request);, +		new JsonPathRequestMatchers("$.str").doesNotExist().match(request);, +	}, +, +	@Test(expected = AssertionError.class), +	public void doesNotExistForAnEmptyArray() throws Exception {, +		new JsonPathRequestMatchers("$.emptyArray").doesNotExist().match(request);, +	}, +, +	@Test(expected = AssertionError.class), +	public void doesNotExistForAnEmptyMap() throws Exception {, +		new JsonPathRequestMatchers("$.emptyMap").doesNotExist().match(request);, +	public void isArray() throws Exception {, +		new JsonPathRequestMatchers("$.arr").isArray().match(request);, +	}, +, +	@Test, +	public void isArrayForAnEmptyArray() throws Exception {, +		new JsonPathRequestMatchers("$.emptyArray").isArray().match(request);, +		new JsonPathRequestMatchers("$.str").isArray().match(request);]