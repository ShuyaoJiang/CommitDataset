[+++ b/spring-core/src/main/kotlin/org/springframework/core/env/PropertyResolverExtensions.kt, + * Copyright 2002-2019 the original author or authors., +inline fun <reified T> PropertyResolver.getProperty(key: String) : T =, +		getProperty(key, T::class.java) as T, +inline fun <reified T> PropertyResolver.getRequiredProperty(key: String) : T =, +++ b/spring-core/src/main/kotlin/org/springframework/core/env/PropertyResolverExtensions.kt, + * Copyright 2002-2019 the original author or authors., +inline fun <reified T> PropertyResolver.getProperty(key: String) : T =, +		getProperty(key, T::class.java) as T, +inline fun <reified T> PropertyResolver.getRequiredProperty(key: String) : T =, +++ b/spring-core/src/test/kotlin/org/springframework/core/env/PropertyResolverExtensionsTests.kt, +import io.mockk.every, +	val propertyResolver = mockk<PropertyResolver>(), +		every { propertyResolver.getProperty("name") } returns "foo", +		every { propertyResolver.getProperty("name", String::class.java) } returns "foo", +	fun `getProperty extension with nullable type`() {, +		every { propertyResolver.getProperty("name", String::class.java) } returns null, +		propertyResolver.getProperty<String?>("name"), +		verify { propertyResolver.getProperty("name", String::class.java) }, +	}, +, +	@Test, +		every { propertyResolver.getRequiredProperty("name", String::class.java) } returns "foo", +++ b/spring-core/src/main/kotlin/org/springframework/core/env/PropertyResolverExtensions.kt, + * Copyright 2002-2019 the original author or authors., +inline fun <reified T> PropertyResolver.getProperty(key: String) : T =, +		getProperty(key, T::class.java) as T, +inline fun <reified T> PropertyResolver.getRequiredProperty(key: String) : T =, +++ b/spring-core/src/test/kotlin/org/springframework/core/env/PropertyResolverExtensionsTests.kt, +import io.mockk.every, +	val propertyResolver = mockk<PropertyResolver>(), +		every { propertyResolver.getProperty("name") } returns "foo", +		every { propertyResolver.getProperty("name", String::class.java) } returns "foo", +	fun `getProperty extension with nullable type`() {, +		every { propertyResolver.getProperty("name", String::class.java) } returns null, +		propertyResolver.getProperty<String?>("name"), +		verify { propertyResolver.getProperty("name", String::class.java) }, +	}, +, +	@Test, +		every { propertyResolver.getRequiredProperty("name", String::class.java) } returns "foo", +++ b/spring-jdbc/src/main/kotlin/org/springframework/jdbc/core/JdbcOperationsExtensions.kt, +inline fun <reified T> JdbcOperations.queryForObject(sql: String): T =, +		queryForObject(sql, T::class.java) as T, +inline fun <reified T> JdbcOperations.queryForObject(sql: String, vararg args: Any, crossinline function: (ResultSet, Int) -> T): T =, +		queryForObject(sql, RowMapper { resultSet, i -> function(resultSet, i) }, *args) as T, +inline fun <reified T> JdbcOperations.queryForObject(sql: String, args: Array<out Any>, argTypes: IntArray): T? =, +		queryForObject(sql, args, argTypes, T::class.java) as T, +inline fun <reified T> JdbcOperations.queryForObject(sql: String, args: Array<out Any>): T? =, +		queryForObject(sql, args, T::class.java) as T, +inline fun <reified T> JdbcOperations.queryForList(sql: String): List<T> =, +inline fun <reified T> JdbcOperations.queryForList(sql: String, args: Array<out Any>,, +inline fun <reified T> JdbcOperations.queryForList(sql: String, args: Array<out Any>): List<T> =, +inline fun <reified T> JdbcOperations.query(sql: String, vararg args: Any,, +		crossinline function: (ResultSet) -> T): T =, +		query(sql, ResultSetExtractor { function(it) }, *args) as T, +fun <T> JdbcOperations.query(sql: String, vararg args: Any, function: (ResultSet, Int) -> T): List<T> =, +++ b/spring-core/src/main/kotlin/org/springframework/core/env/PropertyResolverExtensions.kt, + * Copyright 2002-2019 the original author or authors., +inline fun <reified T> PropertyResolver.getProperty(key: String) : T =, +		getProperty(key, T::class.java) as T, +inline fun <reified T> PropertyResolver.getRequiredProperty(key: String) : T =, +++ b/spring-core/src/test/kotlin/org/springframework/core/env/PropertyResolverExtensionsTests.kt, +import io.mockk.every, +	val propertyResolver = mockk<PropertyResolver>(), +		every { propertyResolver.getProperty("name") } returns "foo", +		every { propertyResolver.getProperty("name", String::class.java) } returns "foo", +	fun `getProperty extension with nullable type`() {, +		every { propertyResolver.getProperty("name", String::class.java) } returns null, +		propertyResolver.getProperty<String?>("name"), +		verify { propertyResolver.getProperty("name", String::class.java) }, +	}, +, +	@Test, +		every { propertyResolver.getRequiredProperty("name", String::class.java) } returns "foo", +++ b/spring-jdbc/src/main/kotlin/org/springframework/jdbc/core/JdbcOperationsExtensions.kt, +inline fun <reified T> JdbcOperations.queryForObject(sql: String): T =, +		queryForObject(sql, T::class.java) as T, +inline fun <reified T> JdbcOperations.queryForObject(sql: String, vararg args: Any, crossinline function: (ResultSet, Int) -> T): T =, +		queryForObject(sql, RowMapper { resultSet, i -> function(resultSet, i) }, *args) as T, +inline fun <reified T> JdbcOperations.queryForObject(sql: String, args: Array<out Any>, argTypes: IntArray): T? =, +		queryForObject(sql, args, argTypes, T::class.java) as T, +inline fun <reified T> JdbcOperations.queryForObject(sql: String, args: Array<out Any>): T? =, +		queryForObject(sql, args, T::class.java) as T, +inline fun <reified T> JdbcOperations.queryForList(sql: String): List<T> =, +inline fun <reified T> JdbcOperations.queryForList(sql: String, args: Array<out Any>,, +inline fun <reified T> JdbcOperations.queryForList(sql: String, args: Array<out Any>): List<T> =, +inline fun <reified T> JdbcOperations.query(sql: String, vararg args: Any,, +		crossinline function: (ResultSet) -> T): T =, +		query(sql, ResultSetExtractor { function(it) }, *args) as T, +fun <T> JdbcOperations.query(sql: String, vararg args: Any, function: (ResultSet, Int) -> T): List<T> =, +++ b/spring-jdbc/src/test/kotlin/org/springframework/jdbc/core/JdbcOperationsExtensionsTests.kt, +import io.mockk.every, +import org.junit.Assert.assertNull, +	val template = mockk<JdbcTemplate>(), +, +	val sql = "select age from customer where id = 3", +		every { template.queryForObject(sql, any<Class<Int>>()) } returns 2, +		assertEquals(2, template.queryForObject<Int>(sql)), +		verify { template.queryForObject(sql, any<Class<Int>>()) }]