[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +			this.beanInfo = new ExtendedBeanInfo(Introspector.getBeanInfo(beanClass));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +			this.beanInfo = new ExtendedBeanInfo(Introspector.getBeanInfo(beanClass));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.beans;, +, +import java.awt.Image;, +import java.beans.BeanDescriptor;, +import java.beans.BeanInfo;, +import java.beans.EventSetDescriptor;, +import java.beans.IndexedPropertyDescriptor;, +import java.beans.IntrospectionException;, +import java.beans.Introspector;, +import java.beans.MethodDescriptor;, +import java.beans.PropertyDescriptor;, +import java.lang.reflect.Method;, +import java.util.Comparator;, +import java.util.SortedSet;, +import java.util.TreeSet;, +, +import org.springframework.util.ReflectionUtils;, +import org.springframework.util.StringUtils;, +, +/**, + * Decorates a standard {@link BeanInfo} object (likely created created by, + * {@link Introspector#getBeanInfo(Class)}) by including non-void returning setter, + * methods in the collection of {@link #getPropertyDescriptors() property descriptors}., + * Both regular and, + * <a href="http://download.oracle.com/javase/tutorial/javabeans/properties/indexed.html">, + * indexed properties</a> are fully supported., + *, + * <p>The wrapped {@code BeanInfo} object is not modified in any way., + *, + * @author Chris Beams, + * @since 3.1, + * @see CachedIntrospectionResults, + */, +public class ExtendedBeanInfo implements BeanInfo {, +	private final BeanInfo delegate;, +	private final SortedSet<PropertyDescriptor> propertyDescriptors =, +		new TreeSet<PropertyDescriptor>(new PropertyDescriptorComparator());, +, +	/**, +	 * Wrap the given delegate {@link BeanInfo} instance and find any non-void returning, +	 * setter methods, creating and adding a {@link PropertyDescriptor} for each., +	 *, +	 * <p>The wrapped {@code BeanInfo} is not modified in any way by this process., +	 *, +	 * @see #getPropertyDescriptors(), +	 * @throws IntrospectionException if any problems occur creating and adding new {@code PropertyDescriptors}, +	 */, +	public ExtendedBeanInfo(BeanInfo delegate) throws IntrospectionException {, +		this.delegate = delegate;, +, +		// PropertyDescriptor instances from the delegate object are never added directly, but always, +		// copied to the local collection of #propertyDescriptors and returned by calls to, +		// #getPropertyDescriptors(). this algorithm iterates through all methods (method descriptors), +		// in the wrapped BeanInfo object, copying any existing PropertyDescriptor or creating a new, +		// one for any non-standard setter methods found., +, +		ALL_METHODS:, +		for (MethodDescriptor md : delegate.getMethodDescriptors()) {, +			Method method = md.getMethod();, +, +			// bypass non-getter java.lang.Class methods for efficiency, +			if (ReflectionUtils.isObjectMethod(method) && !method.getName().startsWith("get")) {, +				continue ALL_METHODS;, +			}, +, +			// is the method a NON-INDEXED setter? ignore return type in order to capture non-void signatures, +			if (method.getName().startsWith("set") && method.getParameterTypes().length == 1) {, +				String propertyName = propertyNameFor(method);, +				for (PropertyDescriptor pd : delegate.getPropertyDescriptors()) {, +					Method readMethod = pd.getReadMethod();, +					Method writeMethod = pd.getWriteMethod();, +					// has the setter already been found by the wrapped BeanInfo?, +					if (writeMethod != null, +							&& writeMethod.getName().equals(method.getName())) {, +						// yes -> copy it, including corresponding getter method (if any -- may be null), +						this.addOrUpdatePropertyDescriptor(propertyName, readMethod, writeMethod);, +						continue ALL_METHODS;, +					}, +					// has a getter corresponding to this setter already been found by the wrapped BeanInfo?]