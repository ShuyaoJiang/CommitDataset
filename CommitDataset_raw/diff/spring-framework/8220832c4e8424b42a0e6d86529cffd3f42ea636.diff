[+++ b/spring-context/src/main/java/org/springframework/format/annotation/NumberFormat.java, + * Copyright 2002-2014 the original author or authors., + *, + * <p>For style-based formatting, set the {@link #style()} attribute to be the desired {@link Style}., + *, + * <p>Each attribute is mutually exclusive, so only set one attribute per annotation instance, + * (the one most convenient one for your formatting needs). When the pattern attribute is specified,, + * it takes precedence over the style attribute. When no annotation attributes are specified,, + * the default format applied is style-based with a style of {@link Style#NUMBER}., +	 * <p>Defaults to {@link Style#NUMBER} for general-purpose number formatter., +	 * Set this attribute when you wish to format your field in accordance with a, +	 * common style other than the default style., +	 * <p>Defaults to empty String, indicating no custom pattern String has been specified., +	 * Set this attribute when you wish to format your field in accordance with a, +	 * custom number pattern not represented by a style., +++ b/spring-context/src/main/java/org/springframework/format/annotation/NumberFormat.java, + * Copyright 2002-2014 the original author or authors., + *, + * <p>For style-based formatting, set the {@link #style()} attribute to be the desired {@link Style}., + *, + * <p>Each attribute is mutually exclusive, so only set one attribute per annotation instance, + * (the one most convenient one for your formatting needs). When the pattern attribute is specified,, + * it takes precedence over the style attribute. When no annotation attributes are specified,, + * the default format applied is style-based with a style of {@link Style#NUMBER}., +	 * <p>Defaults to {@link Style#NUMBER} for general-purpose number formatter., +	 * Set this attribute when you wish to format your field in accordance with a, +	 * common style other than the default style., +	 * <p>Defaults to empty String, indicating no custom pattern String has been specified., +	 * Set this attribute when you wish to format your field in accordance with a, +	 * custom number pattern not represented by a style., +++ b/spring-web/src/main/java/org/springframework/http/converter/json/GsonBase64ByteArrayJsonTypeAdapter.java, +import org.apache.commons.codec.binary.Base64;, + * Custom Gson {@link TypeAdapter} for serialization and deserialization, + * of {@code byte[]} values to/from Base64-encoded Strings., + *, + * <p>By default, Gson converts byte arrays to JSON arrays. This type adapter, + * needs to be specifically registered to read/write Base64-encoded byte arrays., +class GsonBase64ByteArrayJsonTypeAdapter implements JsonSerializer<byte[]>, JsonDeserializer<byte[]> {, +	private static final Charset DEFAULT_CHARSET = Charset.forName("UTF-8");, +	public byte[] deserialize(JsonElement json, Type type, JsonDeserializationContext cxt) {, +++ b/spring-context/src/main/java/org/springframework/format/annotation/NumberFormat.java, + * Copyright 2002-2014 the original author or authors., + *, + * <p>For style-based formatting, set the {@link #style()} attribute to be the desired {@link Style}., + *, + * <p>Each attribute is mutually exclusive, so only set one attribute per annotation instance, + * (the one most convenient one for your formatting needs). When the pattern attribute is specified,, + * it takes precedence over the style attribute. When no annotation attributes are specified,, + * the default format applied is style-based with a style of {@link Style#NUMBER}., +	 * <p>Defaults to {@link Style#NUMBER} for general-purpose number formatter., +	 * Set this attribute when you wish to format your field in accordance with a, +	 * common style other than the default style., +	 * <p>Defaults to empty String, indicating no custom pattern String has been specified., +	 * Set this attribute when you wish to format your field in accordance with a, +	 * custom number pattern not represented by a style., +++ b/spring-web/src/main/java/org/springframework/http/converter/json/GsonBase64ByteArrayJsonTypeAdapter.java, +import org.apache.commons.codec.binary.Base64;, + * Custom Gson {@link TypeAdapter} for serialization and deserialization, + * of {@code byte[]} values to/from Base64-encoded Strings., + *, + * <p>By default, Gson converts byte arrays to JSON arrays. This type adapter, + * needs to be specifically registered to read/write Base64-encoded byte arrays., +class GsonBase64ByteArrayJsonTypeAdapter implements JsonSerializer<byte[]>, JsonDeserializer<byte[]> {, +	private static final Charset DEFAULT_CHARSET = Charset.forName("UTF-8");, +	public byte[] deserialize(JsonElement json, Type type, JsonDeserializationContext cxt) {, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/GsonHttpMessageConverter.java, +import com.google.gson.Gson;, +import com.google.gson.JsonIOException;, +import com.google.gson.JsonParseException;, +import com.google.gson.reflect.TypeToken;, +, + * Implementation of {@link org.springframework.http.converter.HttpMessageConverter}, + * that can read and write JSON using the, + * <a href="https://code.google.com/p/google-gson/">Google Gson</a> library's, + * {@link Gson} class., + * <p>This converter can be used to bind to typed beans or untyped {@code HashMap}s., + * By default, it supports {@code application/json} and {@code application/*+json}., + * @see #setGson, + * @see #setSupportedMediaTypes, +, +	 *     return new TypeToken<ArrayList<MyBean>>() {};, +	 *   }, +	 *   else {]