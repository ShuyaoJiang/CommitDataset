[+++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java, +	private static final Method[] EMPTY_METHOD_ARRAY = new Method[0];, +	private static final Field[] EMPTY_FIELD_ARRAY = new Field[0];, +	// Exception handling, +, +	/**, +	 * Handle the given reflection exception. Should only be called if no, +	 * checked exception is expected to be thrown by the target method., +	 * <p>Throws the underlying RuntimeException or Error in case of an, +	 * InvocationTargetException with such a root cause. Throws an, +	 * IllegalStateException with an appropriate message or, +	 * UndeclaredThrowableException otherwise., +	 * @param ex the reflection exception to handle, +	 */, +	public static void handleReflectionException(Exception ex) {, +		if (ex instanceof NoSuchMethodException) {, +			throw new IllegalStateException("Method not found: " + ex.getMessage());, +		}, +		if (ex instanceof IllegalAccessException) {, +			throw new IllegalStateException("Could not access method: " + ex.getMessage());, +		}, +		if (ex instanceof InvocationTargetException) {, +			handleInvocationTargetException((InvocationTargetException) ex);, +		}, +		if (ex instanceof RuntimeException) {, +			throw (RuntimeException) ex;, +		}, +		throw new UndeclaredThrowableException(ex);, +	}, +, +	/**, +	 * Handle the given invocation target exception. Should only be called if no, +	 * checked exception is expected to be thrown by the target method., +	 * <p>Throws the underlying RuntimeException or Error in case of such a root, +	 * cause. Throws an UndeclaredThrowableException otherwise., +	 * @param ex the invocation target exception to handle, +	 */, +	public static void handleInvocationTargetException(InvocationTargetException ex) {, +		rethrowRuntimeException(ex.getTargetException());, +	}, +, +	/**, +	 * Rethrow the given {@link Throwable exception}, which is presumably the, +	 * <em>target exception</em> of an {@link InvocationTargetException}., +	 * Should only be called if no checked exception is expected to be thrown, +	 * by the target method., +	 * <p>Rethrows the underlying exception cast to a {@link RuntimeException} or, +	 * {@link Error} if appropriate; otherwise, throws an, +	 * {@link UndeclaredThrowableException}., +	 * @param ex the exception to rethrow, +	 * @throws RuntimeException the rethrown exception, +	 */, +	public static void rethrowRuntimeException(Throwable ex) {, +		if (ex instanceof RuntimeException) {, +			throw (RuntimeException) ex;, +		}, +		if (ex instanceof Error) {, +			throw (Error) ex;, +		}, +		throw new UndeclaredThrowableException(ex);, +	}, +, +	/**, +	 * Rethrow the given {@link Throwable exception}, which is presumably the, +	 * <em>target exception</em> of an {@link InvocationTargetException}., +	 * Should only be called if no checked exception is expected to be thrown, +	 * by the target method., +	 * <p>Rethrows the underlying exception cast to an {@link Exception} or, +	 * {@link Error} if appropriate; otherwise, throws an, +	 * {@link UndeclaredThrowableException}., +	 * @param ex the exception to rethrow, +	 * @throws Exception the rethrown exception (in case of a checked exception), +	 */, +	public static void rethrowException(Throwable ex) throws Exception {, +		if (ex instanceof Exception) {, +			throw (Exception) ex;, +		}, +		if (ex instanceof Error) {, +			throw (Error) ex;, +		}, +		throw new UndeclaredThrowableException(ex);, +	}, +, +, +	// Constructor handling, +, +	/**, +	 * Obtain an accessible constructor for the given class and parameters., +	 * @param clazz the clazz to check, +	 * @param parameterTypes the parameter types of the desired constructor, +	 * @return the constructor reference, +	 * @throws NoSuchMethodException if no such constructor exists, +	 * @since 5.0, +	 */, +	public static <T> Constructor<T> accessibleConstructor(Class<T> clazz, Class<?>... parameterTypes), +			throws NoSuchMethodException {, +, +		Constructor<T> ctor = clazz.getDeclaredConstructor(parameterTypes);, +		makeAccessible(ctor);, +		return ctor;]