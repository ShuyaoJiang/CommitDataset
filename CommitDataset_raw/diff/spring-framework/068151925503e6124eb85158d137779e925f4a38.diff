[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +		if (exchange.isNotModified()) {, +			return Mono.empty();, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +		if (exchange.isNotModified()) {, +			return Mono.empty();, +		}, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/AbstractRequestMappingIntegrationTests.java, +	RestTemplate getRestTemplate() {, +		return this.restTemplate;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +		if (exchange.isNotModified()) {, +			return Mono.empty();, +		}, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/AbstractRequestMappingIntegrationTests.java, +	RestTemplate getRestTemplate() {, +		return this.restTemplate;, +	}, +, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingViewResolutionIntegrationTests.java, +import java.net.URI;, +import java.util.Optional;, +, +import org.springframework.http.HttpStatus;, +import org.springframework.http.RequestEntity;, +import org.springframework.http.ResponseEntity;, +import org.springframework.web.server.ServerWebExchange;, +import static org.junit.Assert.assertNull;, +import static org.springframework.http.RequestEntity.get;, +	@Test, +	public void etagCheckWithNotModifiedResponse() throws Exception {, +		URI uri = new URI("http://localhost:" + this.port + "/html");, +		RequestEntity<Void> request = get(uri).ifNoneMatch("\"deadb33f8badf00d\"").build();, +		ResponseEntity<String> response = getRestTemplate().exchange(request, String.class);, +, +		assertEquals(HttpStatus.NOT_MODIFIED, response.getStatusCode());, +		assertNull(response.getBody());, +	}, +, +		public String getHtmlPage(@RequestParam Optional<String> name, Model model,, +				ServerWebExchange exchange) {, +, +			if (exchange.checkNotModified("deadb33f8badf00d")) {, +				return null;, +			}, +			model.addAttribute("hello", "Hello: " + name.orElse("<no name>") + "!");, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +		if (exchange.isNotModified()) {, +			return Mono.empty();, +		}, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/AbstractRequestMappingIntegrationTests.java, +	RestTemplate getRestTemplate() {, +		return this.restTemplate;, +	}, +, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingViewResolutionIntegrationTests.java, +import java.net.URI;, +import java.util.Optional;, +, +import org.springframework.http.HttpStatus;, +import org.springframework.http.RequestEntity;, +import org.springframework.http.ResponseEntity;, +import org.springframework.web.server.ServerWebExchange;, +import static org.junit.Assert.assertNull;, +import static org.springframework.http.RequestEntity.get;, +	@Test, +	public void etagCheckWithNotModifiedResponse() throws Exception {, +		URI uri = new URI("http://localhost:" + this.port + "/html");, +		RequestEntity<Void> request = get(uri).ifNoneMatch("\"deadb33f8badf00d\"").build();, +		ResponseEntity<String> response = getRestTemplate().exchange(request, String.class);, +, +		assertEquals(HttpStatus.NOT_MODIFIED, response.getStatusCode());, +		assertNull(response.getBody());, +	}, +, +		public String getHtmlPage(@RequestParam Optional<String> name, Model model,, +				ServerWebExchange exchange) {, +, +			if (exchange.checkNotModified("deadb33f8badf00d")) {, +				return null;, +			}, +			model.addAttribute("hello", "Hello: " + name.orElse("<no name>") + "!");, +, +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchange.java, +	 * Returns {@code true} if the one of the {@code checkNotModified} methods, +	 * in this contract were used and they returned true., +	 */, +	boolean isNotModified();, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +		if (exchange.isNotModified()) {, +			return Mono.empty();, +		}, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/AbstractRequestMappingIntegrationTests.java, +	RestTemplate getRestTemplate() {]