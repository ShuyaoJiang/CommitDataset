[+++ b/spring-core/src/main/java/org/springframework/util/xml/StaxUtils.java, +import javax.xml.stream.XMLInputFactory;, +import javax.xml.stream.XMLResolver;, +import org.springframework.util.StreamUtils;, + * Convenience methods for working with the StAX API. Partly historic due to JAXP 1.3, + * compatibility; as of Spring 4.0, relying on JAXP 1.4 as included in JDK 1.6 and higher., + * <p>In particular, methods for using StAX ({@code javax.xml.stream}) in combination with, + * the TrAX API ({@code javax.xml.transform}), and converting StAX readers/writers into SAX, + * readers/handlers and vice-versa., +	private static final XMLResolver NO_OP_XML_RESOLVER =, +			(publicID, systemID, base, ns) -> StreamUtils.emptyInput();, +, +, +	/**, +	 * Create an {@link XMLInputFactory} with Spring's defensive setup,, +	 * i.e. no support for the resolution of DTDs and external entities., +	 * @return a new input factory to use, +	 * @since 5.0, +	 */, +	public static XMLInputFactory createDefensiveInputFactory() {, +		XMLInputFactory inputFactory = XMLInputFactory.newInstance();, +		inputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, false);, +		inputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);, +		inputFactory.setXMLResolver(NO_OP_XML_RESOLVER);, +		return inputFactory;, +	}, +, +	 * Create a JAXP 1.4 {@link StAXSource} for the given {@link XMLEventReader}., +++ b/spring-core/src/main/java/org/springframework/util/xml/StaxUtils.java, +import javax.xml.stream.XMLInputFactory;, +import javax.xml.stream.XMLResolver;, +import org.springframework.util.StreamUtils;, + * Convenience methods for working with the StAX API. Partly historic due to JAXP 1.3, + * compatibility; as of Spring 4.0, relying on JAXP 1.4 as included in JDK 1.6 and higher., + * <p>In particular, methods for using StAX ({@code javax.xml.stream}) in combination with, + * the TrAX API ({@code javax.xml.transform}), and converting StAX readers/writers into SAX, + * readers/handlers and vice-versa., +	private static final XMLResolver NO_OP_XML_RESOLVER =, +			(publicID, systemID, base, ns) -> StreamUtils.emptyInput();, +, +, +	/**, +	 * Create an {@link XMLInputFactory} with Spring's defensive setup,, +	 * i.e. no support for the resolution of DTDs and external entities., +	 * @return a new input factory to use, +	 * @since 5.0, +	 */, +	public static XMLInputFactory createDefensiveInputFactory() {, +		XMLInputFactory inputFactory = XMLInputFactory.newInstance();, +		inputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, false);, +		inputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);, +		inputFactory.setXMLResolver(NO_OP_XML_RESOLVER);, +		return inputFactory;, +	}, +, +	 * Create a JAXP 1.4 {@link StAXSource} for the given {@link XMLEventReader}., +++ b/spring-web/src/main/java/org/springframework/http/codec/xml/XmlEventDecoder.java, +import org.springframework.util.xml.StaxUtils;, +	private static final XMLInputFactory inputFactory = StaxUtils.createDefensiveInputFactory();, +++ b/spring-core/src/main/java/org/springframework/util/xml/StaxUtils.java, +import javax.xml.stream.XMLInputFactory;, +import javax.xml.stream.XMLResolver;, +import org.springframework.util.StreamUtils;, + * Convenience methods for working with the StAX API. Partly historic due to JAXP 1.3, + * compatibility; as of Spring 4.0, relying on JAXP 1.4 as included in JDK 1.6 and higher., + * <p>In particular, methods for using StAX ({@code javax.xml.stream}) in combination with, + * the TrAX API ({@code javax.xml.transform}), and converting StAX readers/writers into SAX, + * readers/handlers and vice-versa., +	private static final XMLResolver NO_OP_XML_RESOLVER =, +			(publicID, systemID, base, ns) -> StreamUtils.emptyInput();, +, +, +	/**, +	 * Create an {@link XMLInputFactory} with Spring's defensive setup,, +	 * i.e. no support for the resolution of DTDs and external entities., +	 * @return a new input factory to use, +	 * @since 5.0, +	 */, +	public static XMLInputFactory createDefensiveInputFactory() {, +		XMLInputFactory inputFactory = XMLInputFactory.newInstance();, +		inputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, false);, +		inputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);, +		inputFactory.setXMLResolver(NO_OP_XML_RESOLVER);, +		return inputFactory;, +	}, +, +	 * Create a JAXP 1.4 {@link StAXSource} for the given {@link XMLEventReader}., +++ b/spring-web/src/main/java/org/springframework/http/codec/xml/XmlEventDecoder.java, +import org.springframework.util.xml.StaxUtils;, +	private static final XMLInputFactory inputFactory = StaxUtils.createDefensiveInputFactory();, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, +import org.springframework.util.xml.StaxUtils;, +			return new XmlMapper(StaxUtils.createDefensiveInputFactory());, +			return new XmlMapper(new XmlFactory(StaxUtils.createDefensiveInputFactory()), module);, +		}, +, +, +, +++ b/spring-core/src/main/java/org/springframework/util/xml/StaxUtils.java, +import javax.xml.stream.XMLInputFactory;]