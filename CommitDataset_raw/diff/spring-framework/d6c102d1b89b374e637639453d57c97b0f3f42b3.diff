[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java, +	@Override, +	public WebClient.Builder apply(Consumer<WebClient.Builder> builderConsumer) {, +		Assert.notNull(builderConsumer, "'builderConsumer' must not be null");, +, +		builderConsumer.accept(this);, +		return this;, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java, +	@Override, +	public WebClient.Builder apply(Consumer<WebClient.Builder> builderConsumer) {, +		Assert.notNull(builderConsumer, "'builderConsumer' must not be null");, +, +		builderConsumer.accept(this);, +		return this;, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java, +		/**, +		 * Shortcut for pre-packaged customizations to WebTest builder., +		 * @param builderConsumer the consumer to apply, +		 */, +		Builder apply(Consumer<Builder> builderConsumer);, +, +		/**, +		 * Builder the {@link WebClient} instance., +		 */, +		WebClient build();, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java, +	@Override, +	public WebClient.Builder apply(Consumer<WebClient.Builder> builderConsumer) {, +		Assert.notNull(builderConsumer, "'builderConsumer' must not be null");, +, +		builderConsumer.accept(this);, +		return this;, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java, +		/**, +		 * Shortcut for pre-packaged customizations to WebTest builder., +		 * @param builderConsumer the consumer to apply, +		 */, +		Builder apply(Consumer<Builder> builderConsumer);, +, +		/**, +		 * Builder the {@link WebClient} instance., +		 */, +		WebClient build();, +, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/DefaultWebClientTests.java, +	@Test, +	public void apply() {, +		WebClient client = builder(), +					.apply(builder -> builder.defaultHeader("Accept", "application/json").defaultCookie("id", "123")), +				.build();, +		client.get().uri("/path").exchange();, +, +		ClientRequest request = verifyExchange();, +		assertEquals("application/json", request.headers().getFirst("Accept"));, +		assertEquals("123", request.cookies().getFirst("id"));, +		verifyNoMoreInteractions(this.exchangeFunction);, +	}, +]