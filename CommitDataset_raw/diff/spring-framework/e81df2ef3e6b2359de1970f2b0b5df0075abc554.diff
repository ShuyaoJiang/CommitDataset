[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AnnotatedGenericBeanDefinition.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.util.Assert;, + * @author Chris Beams, +@SuppressWarnings("serial"), +	private final AnnotationMetadata metadata;, +	public AnnotatedGenericBeanDefinition(Class<?> beanClass) {, +		this.metadata = new StandardAnnotationMetadata(beanClass, true);, +	}, +, +	/**, +	 * Create a new AnnotatedGenericBeanDefinition for the given annotation metadata,, +	 * allowing for ASM-based processing and avoidance of early loading of the bean class., +	 * Note that this constructor is functionally equivalent to, +	 * {@link org.springframework.context.annotation.ScannedGenericBeanDefinition, +	 * ScannedGenericBeanDefinition}, however the semantics of the latter indicate that, +	 * a bean was discovered specifically via component-scanning as opposed to other, +	 * means., +	 * @param metadata the annotation metadata for the bean class in question, +	 * @since 3.1.1, +	 */, +	public AnnotatedGenericBeanDefinition(AnnotationMetadata metadata) {, +		Assert.notNull(metadata, "AnnotationMetadata must not be null");, +		setBeanClassName(metadata.getClassName());, +		this.metadata = metadata;, +		 return this.metadata;, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AnnotatedGenericBeanDefinition.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.util.Assert;, + * @author Chris Beams, +@SuppressWarnings("serial"), +	private final AnnotationMetadata metadata;, +	public AnnotatedGenericBeanDefinition(Class<?> beanClass) {, +		this.metadata = new StandardAnnotationMetadata(beanClass, true);, +	}, +, +	/**, +	 * Create a new AnnotatedGenericBeanDefinition for the given annotation metadata,, +	 * allowing for ASM-based processing and avoidance of early loading of the bean class., +	 * Note that this constructor is functionally equivalent to, +	 * {@link org.springframework.context.annotation.ScannedGenericBeanDefinition, +	 * ScannedGenericBeanDefinition}, however the semantics of the latter indicate that, +	 * a bean was discovered specifically via component-scanning as opposed to other, +	 * means., +	 * @param metadata the annotation metadata for the bean class in question, +	 * @since 3.1.1, +	 */, +	public AnnotatedGenericBeanDefinition(AnnotationMetadata metadata) {, +		Assert.notNull(metadata, "AnnotationMetadata must not be null");, +		setBeanClassName(metadata.getClassName());, +		this.metadata = metadata;, +		 return this.metadata;, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +import org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition;, +import org.springframework.beans.factory.support.BeanNameGenerator;, +	private BeanNameGenerator beanNameGenerator = new AnnotationBeanNameGenerator();, +, +		AnnotationMetadata metadata = configClass.getMetadata();, +		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata);, +		String className = metadata.getClassName();, +			String configBeanName = this.beanNameGenerator.generateBeanName(configBeanDef, this.registry);, +					new InvalidConfigurationImportProblem(className, configClass.getResource(), metadata));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AnnotatedGenericBeanDefinition.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.util.Assert;, + * @author Chris Beams, +@SuppressWarnings("serial"), +	private final AnnotationMetadata metadata;, +	public AnnotatedGenericBeanDefinition(Class<?> beanClass) {, +		this.metadata = new StandardAnnotationMetadata(beanClass, true);, +	}, +, +	/**, +	 * Create a new AnnotatedGenericBeanDefinition for the given annotation metadata,, +	 * allowing for ASM-based processing and avoidance of early loading of the bean class., +	 * Note that this constructor is functionally equivalent to, +	 * {@link org.springframework.context.annotation.ScannedGenericBeanDefinition, +	 * ScannedGenericBeanDefinition}, however the semantics of the latter indicate that, +	 * a bean was discovered specifically via component-scanning as opposed to other, +	 * means., +	 * @param metadata the annotation metadata for the bean class in question, +	 * @since 3.1.1, +	 */, +	public AnnotatedGenericBeanDefinition(AnnotationMetadata metadata) {, +		Assert.notNull(metadata, "AnnotationMetadata must not be null");, +		setBeanClassName(metadata.getClassName());, +		this.metadata = metadata;, +		 return this.metadata;, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +import org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition;, +import org.springframework.beans.factory.support.BeanNameGenerator;, +	private BeanNameGenerator beanNameGenerator = new AnnotationBeanNameGenerator();, +, +		AnnotationMetadata metadata = configClass.getMetadata();, +		BeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata);, +		String className = metadata.getClassName();, +			String configBeanName = this.beanNameGenerator.generateBeanName(configBeanDef, this.registry);, +					new InvalidConfigurationImportProblem(className, configClass.getResource(), metadata));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ScannedGenericBeanDefinition.java, + * Copyright 2002-2012 the original author or authors.]