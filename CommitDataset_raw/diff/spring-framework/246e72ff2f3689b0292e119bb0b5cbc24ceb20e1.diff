[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, +		return new DefaultWebTestClientBuilder(builder.build());, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, +		return new DefaultWebTestClientBuilder(builder.build());, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +	DefaultWebTestClient(WebClient.Builder clientBuilder, ClientHttpConnector connector, Duration timeout) {, +		Assert.notNull(clientBuilder, "WebClient.Builder is required");, +		this.webClient = clientBuilder.clientConnector(this.wiretapConnector).build();, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, +		return new DefaultWebTestClientBuilder(builder.build());, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +	DefaultWebTestClient(WebClient.Builder clientBuilder, ClientHttpConnector connector, Duration timeout) {, +		Assert.notNull(clientBuilder, "WebClient.Builder is required");, +		this.webClient = clientBuilder.clientConnector(this.wiretapConnector).build();, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClientBuilder.java, +	DefaultWebTestClientBuilder(HttpHandler httpHandler) {, +		return new DefaultWebTestClient(this.webClientBuilder, this.connector, this.responseTimeout);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, +		return new DefaultWebTestClientBuilder(builder.build());, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +	DefaultWebTestClient(WebClient.Builder clientBuilder, ClientHttpConnector connector, Duration timeout) {, +		Assert.notNull(clientBuilder, "WebClient.Builder is required");, +		this.webClient = clientBuilder.clientConnector(this.wiretapConnector).build();, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClientBuilder.java, +	DefaultWebTestClientBuilder(HttpHandler httpHandler) {, +		return new DefaultWebTestClient(this.webClientBuilder, this.connector, this.responseTimeout);, +++ /dev/null, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, +		return new DefaultWebTestClientBuilder(builder.build());, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +	DefaultWebTestClient(WebClient.Builder clientBuilder, ClientHttpConnector connector, Duration timeout) {, +		Assert.notNull(clientBuilder, "WebClient.Builder is required");, +		this.webClient = clientBuilder.clientConnector(this.wiretapConnector).build();, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClientBuilder.java, +	DefaultWebTestClientBuilder(HttpHandler httpHandler) {, +		return new DefaultWebTestClient(this.webClientBuilder, this.connector, this.responseTimeout);, +++ /dev/null, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/MockServerExchangeMutator.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.test.web.reactive.server;, +, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.function.Function;, +import java.util.function.UnaryOperator;, +, +import reactor.core.publisher.Mono;, +, +import org.springframework.util.Assert;, +import org.springframework.web.server.ServerWebExchange;, +import org.springframework.web.server.WebFilter;, +import org.springframework.web.server.WebFilterChain;, +, +/**, + * Built-in {@link WebFilter} for applying {@code ServerWebExchange}, + * transformations during requests from the {@code WebTestClient} to a mock, + * server -- i.e. when one of the following is in use:, + * <ul>, + * <li>{@link WebTestClient#bindToController},, + * <li>{@link WebTestClient#bindToRouterFunction}, + * <li>{@link WebTestClient#bindToApplicationContext}., + * </ul>, + *, + * <p>Example of registering a "global" transformation:, + * <pre class="code">, + *, + * MockServerExchangeMutator mutator = new MockServerExchangeMutator(exchange -> ...);, + * WebTestClient client = WebTestClient.bindToController(new MyController()).webFilter(mutator).build(), + * </pre>, + *, + * <p>Example of registering "per client" transformations:, + * <pre class="code">, + *, + * MockServerExchangeMutator mutator = new MockServerExchangeMutator(exchange -> ...);, + * WebTestClient client = WebTestClient.bindToController(new MyController()).webFilter(mutator).build(), + *, + * WebTestClient clientA = mutator.filterClient(client, exchange -> ...);, + * // Use client A..., + *, + * WebTestClient clientB = mutator.filterClient(client, exchange -> ...);, + * // Use client B..., + * </pre>, + *, + * @author Rossen Stoyanchev, + * @since 5.0]