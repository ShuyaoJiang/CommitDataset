[+++ b/spring-context/src/test/java/org/springframework/cache/annotation/AnnotationCacheOperationSourceTests.java, +import java.util.Collections;, +import org.junit.Ignore;, +import static org.hamcrest.CoreMatchers.*;, + * @author Sam Brannen, +	// TODO [SPR-13475] Enable test once @Cache* is supported as a composed annotation., +	@Ignore("Disabled until SPR-13475 is resolved"), +	@Test, +	public void singleComposedAnnotation() throws Exception {, +		Collection<CacheOperation> ops = getOps(AnnotatedClass.class, "singleComposed", 1);, +		CacheOperation cacheOperation = ops.iterator().next();, +		assertThat(cacheOperation, instanceOf(CacheableOperation.class));, +		assertThat(cacheOperation.getCacheNames(), equalTo(Collections.singleton("composed")));, +	}, +, +	// TODO [SPR-13475] Enable test once @Cache* is supported as a composed annotation., +	@Ignore("Disabled until SPR-13475 is resolved"), +	@Test, +	public void multipleComposedAnnotations() throws Exception {, +		Collection<CacheOperation> ops = getOps(AnnotatedClass.class, "multipleComposed", 3);, +		Iterator<CacheOperation> it = ops.iterator();, +, +		CacheOperation cacheOperation = it.next();, +		assertThat(cacheOperation, instanceOf(CacheableOperation.class));, +		assertThat(cacheOperation.getCacheNames(), equalTo(Collections.singleton("composedCache")));, +, +		cacheOperation = it.next();, +		assertThat(cacheOperation, instanceOf(CacheableOperation.class));, +		assertThat(cacheOperation.getCacheNames(), equalTo(Collections.singleton("foo")));, +, +		cacheOperation = it.next();, +		assertThat(cacheOperation, instanceOf(CacheEvictOperation.class));, +		assertThat(cacheOperation.getCacheNames(), equalTo(Collections.singleton("composedCache")));, +	}, +, +		@ComposedCacheable("composed"), +		public void singleComposed() {, +		}, +, +		@ComposedCacheable(cacheNames = "composedCache", key = "composedKey"), +		@CacheableFoo, +		@ComposedCacheEvict(cacheNames = "composedCache", key = "composedKey"), +		public void multipleComposed() {, +		}, +, +	@Cacheable(cacheNames = "shadowed cache name", key = "shadowed key"), +	@Retention(RetentionPolicy.RUNTIME), +	@Target({ ElementType.METHOD, ElementType.TYPE }), +	@CacheEvict(cacheNames = "shadowed cache name", key = "shadowed key"), +	public @interface ComposedCacheEvict {, +, +		@AliasFor(annotation = Cacheable.class, attribute = "cacheNames"), +		String[] value() default {};, +, +		@AliasFor(annotation = Cacheable.class, attribute = "cacheNames"), +		String[] cacheNames() default {};, +, +		@AliasFor(annotation = Cacheable.class, attribute = "key"), +		String key() default "";, +	}, +]