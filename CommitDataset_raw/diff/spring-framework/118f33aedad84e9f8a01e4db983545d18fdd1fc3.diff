[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +import org.springframework.http.HttpMethod;, +	public UriSpec<RequestHeadersSpec<?>> get() {, +		return toUriSpec(wc -> wc.method(HttpMethod.GET));, +	public UriSpec<RequestHeadersSpec<?>> head() {, +		return toUriSpec(wc -> wc.method(HttpMethod.HEAD));, +	public UriSpec<RequestBodySpec> post() {, +		return toUriSpec(wc -> wc.method(HttpMethod.POST));, +	public UriSpec<RequestBodySpec> put() {, +		return toUriSpec(wc -> wc.method(HttpMethod.PUT));, +	public UriSpec<RequestBodySpec> patch() {, +		return toUriSpec(wc -> wc.method(HttpMethod.PATCH));, +	public UriSpec<RequestHeadersSpec<?>> delete() {, +		return toUriSpec(wc -> wc.method(HttpMethod.DELETE));, +	public UriSpec<RequestHeadersSpec<?>> options() {, +		return toUriSpec(wc -> wc.method(HttpMethod.OPTIONS));, +	@SuppressWarnings("unchecked"), +	private <S extends RequestHeadersSpec<?>> UriSpec<S> toUriSpec(, +			Function<WebClient, WebClient.UriSpec<WebClient.RequestBodySpec>> function) {, +, +		return new DefaultUriSpec<>(function.apply(this.webClient));, +	@SuppressWarnings("unchecked"), +	private class DefaultUriSpec<S extends RequestHeadersSpec<?>> implements UriSpec<S> {, +		private final WebClient.UriSpec<WebClient.RequestBodySpec> uriSpec;, +		DefaultUriSpec(WebClient.UriSpec<WebClient.RequestBodySpec> spec) {, +		public S uri(URI uri) {, +			return (S) new DefaultRequestBodySpec(this.uriSpec.uri(uri));, +		public S uri(String uriTemplate, Object... uriVariables) {, +			return (S) new DefaultRequestBodySpec(this.uriSpec.uri(uriTemplate, uriVariables));, +		public S uri(String uriTemplate, Map<String, ?> uriVariables) {, +			return (S) new DefaultRequestBodySpec(this.uriSpec.uri(uriTemplate, uriVariables));, +		public S uri(Function<UriBuilder, URI> uriBuilder) {, +			return (S) new DefaultRequestBodySpec(this.uriSpec.uri(uriBuilder));, +	private class DefaultRequestBodySpec implements RequestBodySpec {, +		private final WebClient.RequestBodySpec bodySpec;, +		DefaultRequestBodySpec(WebClient.RequestBodySpec spec) {, +			this.bodySpec = spec;, +			this.bodySpec.header(WiretapConnector.REQUEST_ID_HEADER_NAME, this.requestId);, +		public RequestBodySpec header(String headerName, String... headerValues) {, +			this.bodySpec.header(headerName, headerValues);, +		public RequestBodySpec headers(HttpHeaders headers) {, +			this.bodySpec.headers(headers);, +		public RequestBodySpec accept(MediaType... acceptableMediaTypes) {, +			this.bodySpec.accept(acceptableMediaTypes);, +		public RequestBodySpec acceptCharset(Charset... acceptableCharsets) {, +			this.bodySpec.acceptCharset(acceptableCharsets);, +		public RequestBodySpec contentType(MediaType contentType) {, +			this.bodySpec.contentType(contentType);, +		public RequestBodySpec contentLength(long contentLength) {, +			this.bodySpec.contentLength(contentLength);, +		public RequestBodySpec cookie(String name, String value) {, +			this.bodySpec.cookie(name, value);, +		public RequestBodySpec cookies(MultiValueMap<String, String> cookies) {, +			this.bodySpec.cookies(cookies);, +		public RequestBodySpec ifModifiedSince(ZonedDateTime ifModifiedSince) {, +			this.bodySpec.ifModifiedSince(ifModifiedSince);, +		public RequestBodySpec ifNoneMatch(String... ifNoneMatches) {, +			this.bodySpec.ifNoneMatch(ifNoneMatches);, +			return toResponseSpec(this.bodySpec.exchange());, +		public <T> RequestHeadersSpec<?> body(BodyInserter<T, ? super ClientHttpRequest> inserter) {, +			this.bodySpec.body(inserter);, +			return this;, +		public <T, S extends Publisher<T>> RequestHeadersSpec<?> body(S publisher, Class<T> elementClass) {, +			this.bodySpec.body(publisher, elementClass);, +			return this;, +		}, +, +		@Override, +		public <T> RequestHeadersSpec<?> body(T body) {, +			this.bodySpec.body(body);, +			return this;, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +import org.springframework.http.HttpMethod;, +	public UriSpec<RequestHeadersSpec<?>> get() {, +		return toUriSpec(wc -> wc.method(HttpMethod.GET));, +	public UriSpec<RequestHeadersSpec<?>> head() {, +		return toUriSpec(wc -> wc.method(HttpMethod.HEAD));, +	public UriSpec<RequestBodySpec> post() {, +		return toUriSpec(wc -> wc.method(HttpMethod.POST));, +	public UriSpec<RequestBodySpec> put() {, +		return toUriSpec(wc -> wc.method(HttpMethod.PUT));, +	public UriSpec<RequestBodySpec> patch() {, +		return toUriSpec(wc -> wc.method(HttpMethod.PATCH));, +	public UriSpec<RequestHeadersSpec<?>> delete() {, +		return toUriSpec(wc -> wc.method(HttpMethod.DELETE));, +	public UriSpec<RequestHeadersSpec<?>> options() {, +		return toUriSpec(wc -> wc.method(HttpMethod.OPTIONS));, +	@SuppressWarnings("unchecked"), +	private <S extends RequestHeadersSpec<?>> UriSpec<S> toUriSpec(, +			Function<WebClient, WebClient.UriSpec<WebClient.RequestBodySpec>> function) {, +, +		return new DefaultUriSpec<>(function.apply(this.webClient));, +	@SuppressWarnings("unchecked"), +	private class DefaultUriSpec<S extends RequestHeadersSpec<?>> implements UriSpec<S> {, +		private final WebClient.UriSpec<WebClient.RequestBodySpec> uriSpec;, +		DefaultUriSpec(WebClient.UriSpec<WebClient.RequestBodySpec> spec) {, +		public S uri(URI uri) {, +			return (S) new DefaultRequestBodySpec(this.uriSpec.uri(uri));, +		public S uri(String uriTemplate, Object... uriVariables) {, +			return (S) new DefaultRequestBodySpec(this.uriSpec.uri(uriTemplate, uriVariables));]