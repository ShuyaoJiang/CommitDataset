[+++ b/src/docs/asciidoc/integration.adoc, +=== REST Endpoints, +The Spring Framework provides two choices for making calls to REST endpoints:, +The `RestTemplate` provides a higher level API over HTTP client libraries. It makes it, +easy to invoke REST endpoints in a single line. It exposes the following groups of, +overloaded methods:, +.RestTemplate methods, +| Method group | Description, +| `getForObject`, +| Retrieve a representation via GET., +| `getForEntity`, +| Retrieve a `ResponseEntity`, i.e. status, headers, and body, via GET., +| `headForHeaders`, +| Retrieve all headers for a resource via HEAD., +| `postForLocation`, +| Create a new resource via POST and return the Location header from the response., +| `postForObject`, +| Create a new resource via POST and return the representation from the response., +| `postForEntity`, +| Create a new resource via POST and return the representation from the response., +| `put`, +| Create or update a resource via PUT., +, +| `patchForObject`, +| Update a resource via PATCH and return the representation from the response., +Note that the JDK `HttpURLConnection` does not support the `PATCH` but Apache, +HttpComponents, and others do., +, +| `delete`, +| Delete the resources at the specified URI via DELETE., +, +| `optionsForAllow`, +| Retrieve allowed HTTP methods for a resource via ALLOW., +, +| `exchange`, +| More generalized, and less opinionated version, of the above methods that provides extra, +flexibility when needed. It accepts `RequestEntity`, including HTTP method, URL, headers,, +and body as input, and returns a `ResponseEntity`., +, +These methods allow the use of `ParameterizedTypeReference` instead of `Class` to specify, +a response type with generics., +, +| `execute`, +| The most generalized way to perform a request, with full control over request, +preparation and response extraction via callback interfaces., +, +[[rest-resttemplate-create]], +===== Initialization, +The default constructor uses `java.net.HttpURLConnection` to perform requests. You can, +switch to a different HTTP library with an implementation of `ClientHttpRequestFactory`., +There is built-in support for the following:, +* Apache HttpComponents, +* Netty, +* OkHttp, +, +For example to switch to Apache HttpComponents use:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	RestTemplate template = new RestTemplate(new HttpComponentsClientHttpRequestFactory());, +----, +, +Each `ClientHttpRequestFactory` exposes configuration options specific to the underlying, +HTTP client library, e.g. for credentials, connection pooling, etc., +, +[TIP], +====, +Note that the `java.net` implementation for HTTP requests may raise an exception when, +accessing the status of a response that represents an error (e.g. 401). If this is an, +issue, switch to another HTTP client library., +====, +, +, +[[rest-resttemplate-uri]], +===== URIs, +, +Many of the `RestTemplate` methods accepts a URI template and URI template variables,, +either as a `String` vararg, or as `Map<String,String>`., +, +For example with a `String` vararg:, +Or with a `Map<String, String>`:, +, +Keep in mind URI templates are automatically encoded. For example:, +, +	// Results in request to "http://example.com/hotel%20list", +You can use the `uriTemplateHandler` property of `RestTemplate` to customize how URIs are, +encoded. Or you can prepare a `java.net.URI` and pass it into one of the `RestTemplate`, +methods that accept a `URI`., +, +For more details on working with and encoding URIs, see, +<<web.adoc#mvc-uri-building,URI Links>>., +===== Headers, +Use the `exchange()` methods to specify request headers. For example:, +Response headers can be obtained through many `RestTemplate` method variants that return, +`ResponseEntity`., +, +, +[[rest-template-body]], +===== Body]