[+++ b/build-spring-framework/resources/changelog.txt, +* embedded database support now also works with Derby >= 10.6, +* "jdbc:embedded-database" uses id as database name to allow multiple ones in parallel, +++ b/build-spring-framework/resources/changelog.txt, +* embedded database support now also works with Derby >= 10.6, +* "jdbc:embedded-database" uses id as database name to allow multiple ones in parallel, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/EmbeddedDatabaseBeanDefinitionParser.java, +class EmbeddedDatabaseBeanDefinitionParser extends AbstractBeanDefinitionParser {, +, +	private static final String NAME_PROPERTY = "databaseName";, +		useIdAsDatabaseNameIfGiven(element, builder);, +	private void useIdAsDatabaseNameIfGiven(Element element, BeanDefinitionBuilder builder) {, +, +		String id = element.getAttribute(ID_ATTRIBUTE);, +		if (StringUtils.hasText(id)) {, +			builder.addPropertyValue(NAME_PROPERTY, id);, +		}, +	}, +, +++ b/build-spring-framework/resources/changelog.txt, +* embedded database support now also works with Derby >= 10.6, +* "jdbc:embedded-database" uses id as database name to allow multiple ones in parallel, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/EmbeddedDatabaseBeanDefinitionParser.java, +class EmbeddedDatabaseBeanDefinitionParser extends AbstractBeanDefinitionParser {, +, +	private static final String NAME_PROPERTY = "databaseName";, +		useIdAsDatabaseNameIfGiven(element, builder);, +	private void useIdAsDatabaseNameIfGiven(Element element, BeanDefinitionBuilder builder) {, +, +		String id = element.getAttribute(ID_ATTRIBUTE);, +		if (StringUtils.hasText(id)) {, +			builder.addPropertyValue(NAME_PROPERTY, id);, +		}, +	}, +, +++ b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/config/JdbcNamespaceIntegrationTest.java, +import static org.hamcrest.CoreMatchers.*;, +import org.springframework.beans.PropertyValue;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +import org.springframework.beans.factory.xml.XmlBeanFactory;, +import org.springframework.context.ConfigurableApplicationContext;, +import org.springframework.core.io.ClassPathResource;, +		assertCorrectSetup(context, "dataSource", "h2DataSource", "derbyDataSource");, +		assertCorrectSetup(context, "derbyDataSource");, +		assertCorrectSetup(context, "dataSource");, +	}, +, +	@Test, +	public void testMultipleDataSourcesHaveDifferentDatabaseNames() throws Exception {, +, +		DefaultListableBeanFactory factory = new XmlBeanFactory(new ClassPathResource(, +				"org/springframework/jdbc/config/jdbc-config-multiple-datasources.xml"));, +, +		assertBeanPropertyValueOf("databaseName", "firstDataSource", factory);, +		assertBeanPropertyValueOf("databaseName", "secondDataSource", factory);, +	}, +, +	private void assertBeanPropertyValueOf(String propertyName, String expected, DefaultListableBeanFactory factory) {, +, +		BeanDefinition bean = factory.getBeanDefinition(expected);, +		PropertyValue value = bean.getPropertyValues().getPropertyValue(propertyName);, +		assertThat(value, is(notNullValue()));, +		assertThat(value.getValue().toString(), is(expected));, +	}, +, +	private void assertCorrectSetup(ConfigurableApplicationContext context, String... dataSources) {, +, +			for (String dataSourceName : dataSources) {, +				DataSource dataSource = context.getBean(dataSourceName, DataSource.class);, +				JdbcTemplate t = new JdbcTemplate(dataSource);, +				assertEquals(1, t.queryForInt("select count(*) from T_TEST"));, +			}]