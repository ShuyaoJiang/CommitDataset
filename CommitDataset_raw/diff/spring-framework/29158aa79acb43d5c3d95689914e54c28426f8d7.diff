[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +			if (transportElem.hasAttribute("time-to-first-message")) {, +				handlerDef.getPropertyValues().add("timeToFirstMessage", transportElem.getAttribute("time-to-first-message"));, +			}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +			if (transportElem.hasAttribute("time-to-first-message")) {, +				handlerDef.getPropertyValues().add("timeToFirstMessage", transportElem.getAttribute("time-to-first-message"));, +			}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistry.java, + * Copyright 2002-2018 the original author or authors., +		if (transportRegistration.getTimeToFirstMessage() != null) {, +			this.subProtocolWebSocketHandler.setTimeToFirstMessage(transportRegistration.getTimeToFirstMessage());, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +			if (transportElem.hasAttribute("time-to-first-message")) {, +				handlerDef.getPropertyValues().add("timeToFirstMessage", transportElem.getAttribute("time-to-first-message"));, +			}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistry.java, + * Copyright 2002-2018 the original author or authors., +		if (transportRegistration.getTimeToFirstMessage() != null) {, +			this.subProtocolWebSocketHandler.setTimeToFirstMessage(transportRegistration.getTimeToFirstMessage());, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketTransportRegistration.java, + * Copyright 2002-2018 the original author or authors., +	@Nullable, +	private Integer timeToFirstMessage;, +, +	 * Set the maximum time allowed in milliseconds after the WebSocket, +	 * connection is established and before the first sub-protocol message is, +	 * received., +	 *, +	 * <p>This handler is for WebSocket connections that use a sub-protocol., +	 * Therefore, we expect the client to send at least one sub-protocol message, +	 * in the beginning, or else we assume the connection isn't doing well, e.g., +	 * proxy issue, slow network, and can be closed., +	 *, +	 * <p>By default this is set to {@code 60,000} (1 minute)., +	 *, +	 * @param timeToFirstMessage the maximum time allowed in milliseconds, +	 * @since 5.1, +	 */, +	public WebSocketTransportRegistration setTimeToFirstMessage(int timeToFirstMessage) {, +		this.timeToFirstMessage = timeToFirstMessage;, +		return this;, +	}, +, +	/**, +	 * Protected accessor for internal use., +	 */, +	@Nullable, +	protected Integer getTimeToFirstMessage() {, +		return this.timeToFirstMessage;, +	}, +, +	/**, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +			if (transportElem.hasAttribute("time-to-first-message")) {, +				handlerDef.getPropertyValues().add("timeToFirstMessage", transportElem.getAttribute("time-to-first-message"));, +			}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistry.java, + * Copyright 2002-2018 the original author or authors., +		if (transportRegistration.getTimeToFirstMessage() != null) {, +			this.subProtocolWebSocketHandler.setTimeToFirstMessage(transportRegistration.getTimeToFirstMessage());, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketTransportRegistration.java, + * Copyright 2002-2018 the original author or authors., +	@Nullable, +	private Integer timeToFirstMessage;, +, +	 * Set the maximum time allowed in milliseconds after the WebSocket, +	 * connection is established and before the first sub-protocol message is, +	 * received., +	 *, +	 * <p>This handler is for WebSocket connections that use a sub-protocol., +	 * Therefore, we expect the client to send at least one sub-protocol message, +	 * in the beginning, or else we assume the connection isn't doing well, e.g., +	 * proxy issue, slow network, and can be closed., +	 *, +	 * <p>By default this is set to {@code 60,000} (1 minute)., +	 *, +	 * @param timeToFirstMessage the maximum time allowed in milliseconds, +	 * @since 5.1, +	 */, +	public WebSocketTransportRegistration setTimeToFirstMessage(int timeToFirstMessage) {, +		this.timeToFirstMessage = timeToFirstMessage;, +		return this;, +	}, +, +	/**, +	 * Protected accessor for internal use., +	 */, +	@Nullable, +	protected Integer getTimeToFirstMessage() {, +		return this.timeToFirstMessage;, +	}, +, +	/**, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java, +	/** The default value for {@link #setTimeToFirstMessage(int) timeToFirstMessage}. */, +	private static final int DEFAULT_TIME_TO_FIRST_MESSAGE = 60 * 1000;]