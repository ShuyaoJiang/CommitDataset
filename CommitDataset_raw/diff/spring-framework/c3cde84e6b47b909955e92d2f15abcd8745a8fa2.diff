[+++ b/spring-web-reactive/src/main/java/org/springframework/http/HttpCookie.java, +import org.springframework.util.Assert;, +import org.springframework.util.ObjectUtils;, +, + * <p>Use the {@link #clientCookie} factory method to create a client-to-server,, + * name-value pair cookie and the {@link #serverCookie} factory method to build, + * a server-to-client cookie with additional attributes., + *, +public final class HttpCookie {, +	private final int maxAge;, +	private final String domain;, +	private final String path;, +	private final boolean secure;, +	private final boolean httpOnly;, +	private HttpCookie(String name, String value) {, +		this(name, value, -1, null, null, false, false);, +	}, +, +	private HttpCookie(String name, String value, int maxAge, String domain, String path,, +			boolean secure, boolean httpOnly) {, +, +		Assert.hasLength(name, "'name' is required and must not be empty.");, +		Assert.hasLength(value, "'value' is required and must not be empty.");, +		this.maxAge = (maxAge > -1 ? maxAge : -1);, +		this.domain = domain;, +		this.path = path;, +		this.secure = secure;, +		this.httpOnly = httpOnly;, +	/**, +	 * Return the cookie "Max-Age" attribute in seconds., +	 *, +	 * <p>A positive value indicates when the cookie expires relative to the, +	 * current time. A value of 0 means the cookie should expire immediately., +	 * A negative value means no "Max-Age" attribute in which case the cookie, +	 * is removed when the browser is closed., +	 */, +	public int getMaxAge() {, +		return this.maxAge;, +	 * Return the cookie "Domain" attribute., +	 * Return the cookie "Path" attribute., +	 * Return {@code true} if the cookie has the "Secure" attribute., +	 * Return {@code true} if the cookie has the "HttpOnly" attribute., +	@Override, +	public int hashCode() {, +		int result = this.name.hashCode();, +		result = 31 * result + ObjectUtils.nullSafeHashCode(this.domain);, +		result = 31 * result + ObjectUtils.nullSafeHashCode(this.path);, +		return result;, +	}, +, +	@Override, +	public boolean equals(Object other) {, +		if (this == other) {, +			return true;, +		}, +		if (!(other instanceof HttpCookie)) {, +			return false;, +		}, +		HttpCookie otherCookie = (HttpCookie) other;, +		return (this.name.equalsIgnoreCase(otherCookie.getName()) &&, +				ObjectUtils.nullSafeEquals(this.path, otherCookie.getPath()) &&, +				ObjectUtils.nullSafeEquals(this.domain, otherCookie.getDomain()));, +	}, +, +	/**, +	 * Factory method to create a cookie sent from a client to a server., +	 * Client cookies are name-value pairs only without attributes., +	 * @param name the cookie name, +	 * @param value the cookie value, +	 * @return the created cookie instance, +	 */, +	public static HttpCookie clientCookie(String name, String value) {, +		return new HttpCookie(name, value);, +	}, +, +	/**, +	 * Factory method to obtain a builder for a server-defined cookie that starts, +	 * with a name-value pair and may also include attributes., +	 * @param name the cookie name, +	 * @param value the cookie value, +	 * @return the created cookie instance, +	 */, +	public static HttpCookieBuilder serverCookie(final String name, final String value) {, +, +		return new HttpCookieBuilder() {, +, +			private int maxAge = -1;, +, +			private String domain;, +, +			private String path;, +, +			private boolean secure;, +, +			private boolean httpOnly;, +, +, +			@Override, +			public HttpCookieBuilder maxAge(int maxAge) {, +				this.maxAge = maxAge;]