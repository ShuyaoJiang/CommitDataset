[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultServerHttpRequestBuilder.java, +import java.net.InetSocketAddress;, +import java.util.LinkedList;, +import java.util.List;, +import java.util.Map;, +import java.util.function.Consumer;, +import reactor.core.publisher.Flux;, +, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.http.HttpCookie;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +	private URI uri;, +, +	private HttpHeaders httpHeaders;, +, +	private String httpMethodValue;, +, +	private final MultiValueMap<String, HttpCookie> cookies;, +	private final InetSocketAddress remoteAddress;, +	private String uriPath;, +	private Flux<DataBuffer> body;, +	public DefaultServerHttpRequestBuilder(ServerHttpRequest original) {, +		Assert.notNull(original, "ServerHttpRequest is required");, +		this.uri = original.getURI();, +		this.httpMethodValue = original.getMethodValue();, +		this.remoteAddress = original.getRemoteAddress();, +		this.body = original.getBody();, +, +		this.httpHeaders = new HttpHeaders();, +		copyMultiValueMap(original.getHeaders(), this.httpHeaders);, +, +		this.cookies = new LinkedMultiValueMap<>(original.getCookies().size());, +		copyMultiValueMap(original.getCookies(), this.cookies);, +	}, +, +	private static <K, V> void copyMultiValueMap(MultiValueMap<K,V> source,, +			MultiValueMap<K,V> destination) {, +, +		for (Map.Entry<K, List<V>> entry : source.entrySet()) {, +			K key = entry.getKey();, +			List<V> values = new LinkedList<>(entry.getValue());, +			destination.put(key, values);, +		}, +		this.httpMethodValue = httpMethod.name();, +		return this;, +	}, +, +	@Override, +	public ServerHttpRequest.Builder uri(URI uri) {, +		this.uri = uri;, +		this.uriPath = path;, +	public ServerHttpRequest.Builder headers(Consumer<HttpHeaders> headersConsumer) {, +		Assert.notNull(headersConsumer, "'headersConsumer' must not be null");, +		headersConsumer.accept(this.httpHeaders);, +		return this;, +	}, +, +	@Override, +		return new DefaultServerHttpRequest(uriToUse, this.contextPath, this.httpHeaders,, +				this.httpMethodValue, this.cookies, this.remoteAddress, this.body);, +, +		if (this.uriPath == null) {, +			return this.uri;, +			return new URI(this.uri.getScheme(), this.uri.getUserInfo(), uri.getHost(), uri.getPort(),, +					uriPath, uri.getQuery(), uri.getFragment());, +			throw new IllegalStateException("Invalid URI path: \"" + this.uriPath + "\"");, +	private static class DefaultServerHttpRequest extends AbstractServerHttpRequest {, +, +		private final String methodValue;, +, +		private final MultiValueMap<String, HttpCookie> cookies;, +, +		private final InetSocketAddress remoteAddress;, +		private final Flux<DataBuffer> body;, +		public DefaultServerHttpRequest(URI uri, @Nullable String contextPath,, +				HttpHeaders headers, String methodValue,, +				MultiValueMap<String, HttpCookie> cookies, @Nullable InetSocketAddress remoteAddress,, +				Flux<DataBuffer> body) {, +			super(uri, contextPath, headers);, +			this.methodValue = methodValue;, +			this.cookies = cookies;, +			this.remoteAddress = remoteAddress;, +			this.body = body;, +		public String getMethodValue() {, +			return this.methodValue;, +		}, +, +		@Override, +		protected MultiValueMap<String, HttpCookie> initCookies() {, +			return this.cookies;, +		}, +, +		@Override, +		public InetSocketAddress getRemoteAddress() {, +			return this.remoteAddress;, +		public Flux<DataBuffer> getBody() {, +			return this.body;, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultServerHttpRequestBuilder.java, +import java.net.InetSocketAddress;]