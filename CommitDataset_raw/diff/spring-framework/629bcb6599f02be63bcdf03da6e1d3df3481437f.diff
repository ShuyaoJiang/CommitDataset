[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java, + * @author Nicolas Debeissat, +		boolean inSingleQuote = false;, +		boolean inDoubleQuote = false;, +			if (!inDoubleQuote && (c == '\'')) {, +				inSingleQuote = !inSingleQuote;, +			else if (!inSingleQuote && (c == '"')) {, +				inDoubleQuote = !inDoubleQuote;, +			}, +			if (!inSingleQuote && !inDoubleQuote) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java, + * @author Nicolas Debeissat, +		boolean inSingleQuote = false;, +		boolean inDoubleQuote = false;, +			if (!inDoubleQuote && (c == '\'')) {, +				inSingleQuote = !inSingleQuote;, +			else if (!inSingleQuote && (c == '"')) {, +				inDoubleQuote = !inDoubleQuote;, +			}, +			if (!inSingleQuote && !inDoubleQuote) {, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/init/ScriptUtilsIntegrationTests.java, + * Copyright 2002-2015 the original author or authors., +import org.junit.Before;, + * @see ScriptUtilsUnitTests, +	@Before, +	public void setUpSchema() throws SQLException {, +		executeSqlScript(db.getConnection(), usersSchema());, +	}, +, +		assertUsersDatabaseCreated("Hoeller", "Brannen");, +	}, +	/**, +	 * @since 4.2, +	 */, +	@Test, +	public void executeSqlScriptContainingSingleQuotesNestedInsideDoubleQuotes() throws SQLException {, +		executeSqlScript(db.getConnection(), resource("users-data-with-single-quotes-nested-in-double-quotes.sql"));, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java, + * @author Nicolas Debeissat, +		boolean inSingleQuote = false;, +		boolean inDoubleQuote = false;, +			if (!inDoubleQuote && (c == '\'')) {, +				inSingleQuote = !inSingleQuote;, +			else if (!inSingleQuote && (c == '"')) {, +				inDoubleQuote = !inDoubleQuote;, +			}, +			if (!inSingleQuote && !inDoubleQuote) {, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/init/ScriptUtilsIntegrationTests.java, + * Copyright 2002-2015 the original author or authors., +import org.junit.Before;, + * @see ScriptUtilsUnitTests, +	@Before, +	public void setUpSchema() throws SQLException {, +		executeSqlScript(db.getConnection(), usersSchema());, +	}, +, +		assertUsersDatabaseCreated("Hoeller", "Brannen");, +	}, +	/**, +	 * @since 4.2, +	 */, +	@Test, +	public void executeSqlScriptContainingSingleQuotesNestedInsideDoubleQuotes() throws SQLException {, +		executeSqlScript(db.getConnection(), resource("users-data-with-single-quotes-nested-in-double-quotes.sql"));, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/init/ScriptUtilsUnitTests.java, + * Copyright 2002-2015 the original author or authors., + * @author Nicolas Debeissat, + * @see ScriptUtilsIntegrationTests, +	 * See <a href="https://jira.spring.io/browse/SPR-13218">SPR-13218</a>, +	 */, +	@Test, +	public void splitScriptWithSingleQuotesNestedInsideDoubleQuotes() throws Exception {, +		String statement1 = "select '1' as \"Dogbert's owner's\" from dual";, +		String statement2 = "select '2' as \"Dilbert's\" from dual";, +		char delim = ';';, +		String script = statement1 + delim + statement2 + delim;, +		List<String> statements = new ArrayList<String>();, +		splitSqlScript(script, ';', statements);, +		assertEquals("wrong number of statements", 2, statements.size());, +		assertEquals("statement 1 not split correctly", statement1, statements.get(0));, +		assertEquals("statement 2 not split correctly", statement2, statements.get(1));, +	}, +, +	/**, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java, + * @author Nicolas Debeissat, +		boolean inSingleQuote = false;, +		boolean inDoubleQuote = false;, +			if (!inDoubleQuote && (c == '\'')) {, +				inSingleQuote = !inSingleQuote;, +			else if (!inSingleQuote && (c == '"')) {, +				inDoubleQuote = !inDoubleQuote;, +			}, +			if (!inSingleQuote && !inDoubleQuote) {, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/init/ScriptUtilsIntegrationTests.java, + * Copyright 2002-2015 the original author or authors., +import org.junit.Before;, + * @see ScriptUtilsUnitTests, +	@Before, +	public void setUpSchema() throws SQLException {]