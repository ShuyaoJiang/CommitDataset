[+++ b/spring-core/src/main/java/org/springframework/core/convert/support/ByteBufferConverter.java, + * @author Juergen Hoeller, +, +		Set<ConvertiblePair> convertiblePairs = new HashSet<ConvertiblePair>(4);, +		convertiblePairs.add(new ConvertiblePair(ByteBuffer.class, byte[].class));, +		convertiblePairs.add(new ConvertiblePair(byte[].class, ByteBuffer.class));, +		boolean byteBufferTarget = targetType.isAssignableTo(BYTE_BUFFER_TYPE);, +			return (byteBufferTarget || matchesFromByteBuffer(targetType));, +		return (byteBufferTarget && matchesToByteBuffer(sourceType));, +		boolean byteBufferTarget = targetType.isAssignableTo(BYTE_BUFFER_TYPE);, +		if (source instanceof ByteBuffer) {, +			ByteBuffer buffer = (ByteBuffer) source;, +			return (byteBufferTarget ? buffer.duplicate() : convertFromByteBuffer(buffer, targetType));, +		if (byteBufferTarget) {, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/ByteBufferConverter.java, + * @author Juergen Hoeller, +, +		Set<ConvertiblePair> convertiblePairs = new HashSet<ConvertiblePair>(4);, +		convertiblePairs.add(new ConvertiblePair(ByteBuffer.class, byte[].class));, +		convertiblePairs.add(new ConvertiblePair(byte[].class, ByteBuffer.class));, +		boolean byteBufferTarget = targetType.isAssignableTo(BYTE_BUFFER_TYPE);, +			return (byteBufferTarget || matchesFromByteBuffer(targetType));, +		return (byteBufferTarget && matchesToByteBuffer(sourceType));, +		boolean byteBufferTarget = targetType.isAssignableTo(BYTE_BUFFER_TYPE);, +		if (source instanceof ByteBuffer) {, +			ByteBuffer buffer = (ByteBuffer) source;, +			return (byteBufferTarget ? buffer.duplicate() : convertFromByteBuffer(buffer, targetType));, +		if (byteBufferTarget) {, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/ByteBufferConverterTests.java, + * @author Juergen Hoeller, +		this.conversionService = new DefaultConversionService();, +		assertThat(convert, equalTo(ByteBuffer.wrap(bytes)));, +		assertThat(convert.array(), equalTo(bytes));]