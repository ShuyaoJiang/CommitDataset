[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +	private Integer statusCode;, +			this.statusCode = (statusCode != null ? statusCode.value() : null);, +		return (this.statusCode != null ? HttpStatus.resolve(this.statusCode) : null);, +	}, +, +	/**, +	 * Set the HTTP status code of the response., +	 * @param statusCode the HTTP status as an integer value, +	 * @since 5.0.1, +	 */, +	public void setStatusCodeValue(Integer statusCode) {, +		this.statusCode = statusCode;, +	}, +, +	/**, +	 * Return the HTTP status code of the response., +	 * @return the HTTP status as an integer value, +	 * @since 5.0.1, +	 */, +	@Nullable, +	public Integer getStatusCodeValue() {, +		Assert.notNull(cookie, "ResponseCookie must not be null");, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +	private Integer statusCode;, +			this.statusCode = (statusCode != null ? statusCode.value() : null);, +		return (this.statusCode != null ? HttpStatus.resolve(this.statusCode) : null);, +	}, +, +	/**, +	 * Set the HTTP status code of the response., +	 * @param statusCode the HTTP status as an integer value, +	 * @since 5.0.1, +	 */, +	public void setStatusCodeValue(Integer statusCode) {, +		this.statusCode = statusCode;, +	}, +, +	/**, +	 * Return the HTTP status code of the response., +	 * @return the HTTP status as an integer value, +	 * @since 5.0.1, +	 */, +	@Nullable, +	public Integer getStatusCodeValue() {, +		Assert.notNull(cookie, "ResponseCookie must not be null");, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +		Integer statusCode = getStatusCodeValue();, +			this.response.status(HttpResponseStatus.valueOf(statusCode));, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +	private Integer statusCode;, +			this.statusCode = (statusCode != null ? statusCode.value() : null);, +		return (this.statusCode != null ? HttpStatus.resolve(this.statusCode) : null);, +	}, +, +	/**, +	 * Set the HTTP status code of the response., +	 * @param statusCode the HTTP status as an integer value, +	 * @since 5.0.1, +	 */, +	public void setStatusCodeValue(Integer statusCode) {, +		this.statusCode = statusCode;, +	}, +, +	/**, +	 * Return the HTTP status code of the response., +	 * @return the HTTP status as an integer value, +	 * @since 5.0.1, +	 */, +	@Nullable, +	public Integer getStatusCodeValue() {, +		Assert.notNull(cookie, "ResponseCookie must not be null");, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +		Integer statusCode = getStatusCodeValue();, +			this.response.status(HttpResponseStatus.valueOf(statusCode));, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpResponse.java, +		Integer statusCode = getStatusCodeValue();, +			this.response.setStatus(statusCode);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +	private Integer statusCode;, +			this.statusCode = (statusCode != null ? statusCode.value() : null);, +		return (this.statusCode != null ? HttpStatus.resolve(this.statusCode) : null);, +	}, +, +	/**, +	 * Set the HTTP status code of the response., +	 * @param statusCode the HTTP status as an integer value, +	 * @since 5.0.1, +	 */, +	public void setStatusCodeValue(Integer statusCode) {, +		this.statusCode = statusCode;, +	}, +, +	/**, +	 * Return the HTTP status code of the response., +	 * @return the HTTP status as an integer value, +	 * @since 5.0.1, +	 */, +	@Nullable, +	public Integer getStatusCodeValue() {]