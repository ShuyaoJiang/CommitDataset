[+++ b/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java, + * Copyright 2002-2019 the original author or authors., +import java.util.LinkedHashMap;, +import java.util.Map;, +import java.util.stream.Collectors;, +	private final Map<ClientHttpRequest, Throwable> requestFailures = new LinkedHashMap<>();, +, +			catch (Throwable ex) {, +				this.requestFailures.put(request, ex);, +				throw ex;, +			}, +		throw new UnsupportedOperationException(, +				"It looks like neither the deprecated \"validateRequestInternal\"" +, +		if (!this.requestFailures.isEmpty()) {, +			throw new AssertionError("Some requests did not execute successfully.\n" +, +					this.requestFailures.entrySet().stream(), +							.map(entry -> "Failed request:\n" + entry.getKey() + "\n" + entry.getValue()), +							.collect(Collectors.joining("\n", "\n", "")));, +		}, +++ b/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java, + * Copyright 2002-2019 the original author or authors., +import java.util.LinkedHashMap;, +import java.util.Map;, +import java.util.stream.Collectors;, +	private final Map<ClientHttpRequest, Throwable> requestFailures = new LinkedHashMap<>();, +, +			catch (Throwable ex) {, +				this.requestFailures.put(request, ex);, +				throw ex;, +			}, +		throw new UnsupportedOperationException(, +				"It looks like neither the deprecated \"validateRequestInternal\"" +, +		if (!this.requestFailures.isEmpty()) {, +			throw new AssertionError("Some requests did not execute successfully.\n" +, +					this.requestFailures.entrySet().stream(), +							.map(entry -> "Failed request:\n" + entry.getKey() + "\n" + entry.getValue()), +							.collect(Collectors.joining("\n", "\n", "")));, +		}, +++ b/spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java, +		public org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(, +				URI uri, HttpMethod httpMethod) {, +, +		private org.springframework.mock.http.client.MockAsyncClientHttpRequest createRequestInternal(, +				URI uri, HttpMethod method) {, +, +++ b/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java, + * Copyright 2002-2019 the original author or authors., +import java.util.LinkedHashMap;, +import java.util.Map;, +import java.util.stream.Collectors;, +	private final Map<ClientHttpRequest, Throwable> requestFailures = new LinkedHashMap<>();, +, +			catch (Throwable ex) {, +				this.requestFailures.put(request, ex);, +				throw ex;, +			}, +		throw new UnsupportedOperationException(, +				"It looks like neither the deprecated \"validateRequestInternal\"" +, +		if (!this.requestFailures.isEmpty()) {, +			throw new AssertionError("Some requests did not execute successfully.\n" +, +					this.requestFailures.entrySet().stream(), +							.map(entry -> "Failed request:\n" + entry.getKey() + "\n" + entry.getValue()), +							.collect(Collectors.joining("\n", "\n", "")));, +		}, +++ b/spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java, +		public org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(, +				URI uri, HttpMethod httpMethod) {, +, +		private org.springframework.mock.http.client.MockAsyncClientHttpRequest createRequestInternal(, +				URI uri, HttpMethod method) {, +, +++ b/spring-test/src/test/java/org/springframework/test/web/client/MockRestServiceServerTests.java, + * Copyright 2002-2019 the original author or authors., +import static org.assertj.core.api.Assertions.*;, +import static org.springframework.test.web.client.ExpectedCount.*;, +	@Test // gh-21799, +	public void verifyShouldFailIfRequestsFailed() {, +		MockRestServiceServer server = MockRestServiceServer.bindTo(this.restTemplate).build();, +		server.expect(once(), requestTo("/remoteurl")).andRespond(withSuccess());, +, +		this.restTemplate.postForEntity("/remoteurl", null, String.class);, +		try {, +			this.restTemplate.postForEntity("/remoteurl", null, String.class);, +		}, +		catch (AssertionError error) {, +			assertThat(error.getMessage()).startsWith("No further requests expected");, +		}, +, +		try {, +			server.verify();, +			fail("Expected verify failure");, +		}, +		catch (AssertionError error) {, +			assertThat(error.getMessage()).startsWith("Some requests did not execute successfully");, +		}, +	}]