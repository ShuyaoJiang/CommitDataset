[+++ /dev/null, +++ /dev/null, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/DefaultResourceResolverChain.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.util.Assert;, +	private static Log logger = LogFactory.getLog(DefaultResourceResolverChain.class);, +	private final List<ResourceResolver> resolvers = new ArrayList<ResourceResolver>();, +, +	private int index = -1;, +	public DefaultResourceResolverChain(List<ResourceResolver> resolvers) {, +		this.resolvers.addAll((resolvers != null) ? resolvers : new ArrayList<ResourceResolver>());, +	public Resource resolveResource(HttpServletRequest request, String requestPath, List<Resource> locations) {, +		ResourceResolver resolver = getNextResolver();, +		if (resolver == null) {, +			return null;, +		try {, +			logBefore(resolver);, +			Resource resource = resolver.resolveResource(request, requestPath, locations, this);, +			logAfter(resolver, resource);, +		finally {, +			this.index--;, +		}, +	}, +, +	@Override, +	public String resolveUrlPath(String resourcePath, List<Resource> locations) {, +		ResourceResolver resolver = getNextResolver();, +		if (resolver == null) {, +			return null;, +		}, +		try {, +			logBefore(resolver);, +			String urlPath = resolver.resolveUrlPath(resourcePath, locations, this);, +			logAfter(resolver, urlPath);, +			return urlPath;, +		}, +		finally {, +			this.index--;, +		}, +	}, +, +	private ResourceResolver getNextResolver() {, +, +		Assert.state(this.index <= this.resolvers.size(),, +				"Current index exceeds the number of configured ResourceResolver's");, +, +		if (this.index == (this.resolvers.size() - 1)) {, +			if (logger.isTraceEnabled()) {, +				logger.trace("No more ResourceResolver's to delegate to, returning null");, +			}, +			return null;, +		}, +, +		this.index++;, +		return this.resolvers.get(this.index);, +	}, +, +	private void logBefore(ResourceResolver resolver) {, +		if (logger.isTraceEnabled()) {, +			logger.trace("Calling " + resolver.getClass().getName() + " at index [" + this.index + "]");, +		}, +	}, +, +	private void logAfter(ResourceResolver resolver, Object result) {, +		if (logger.isTraceEnabled()) {, +			logger.trace(resolver.getClass().getName() + " returned " + result);, +		}, +	}, +++ /dev/null, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/DefaultResourceResolverChain.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.util.Assert;, +	private static Log logger = LogFactory.getLog(DefaultResourceResolverChain.class);, +	private final List<ResourceResolver> resolvers = new ArrayList<ResourceResolver>();, +, +	private int index = -1;, +	public DefaultResourceResolverChain(List<ResourceResolver> resolvers) {, +		this.resolvers.addAll((resolvers != null) ? resolvers : new ArrayList<ResourceResolver>());, +	public Resource resolveResource(HttpServletRequest request, String requestPath, List<Resource> locations) {, +		ResourceResolver resolver = getNextResolver();, +		if (resolver == null) {, +			return null;, +		try {, +			logBefore(resolver);, +			Resource resource = resolver.resolveResource(request, requestPath, locations, this);, +			logAfter(resolver, resource);, +		finally {, +			this.index--;, +		}, +	}, +, +	@Override, +	public String resolveUrlPath(String resourcePath, List<Resource> locations) {, +		ResourceResolver resolver = getNextResolver();, +		if (resolver == null) {, +			return null;, +		}, +		try {]