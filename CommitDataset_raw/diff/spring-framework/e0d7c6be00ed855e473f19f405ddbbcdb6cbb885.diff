[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractNamedValueMethodArgumentResolver.java, +		Object resolvedName = resolveStringValue(namedValueInfo.name);, +		if (resolvedName == null) {, +			throw new IllegalArgumentException(, +					"Specified name must not resolve to null: [" + namedValueInfo.name + "]");, +		}, +, +		Object arg = resolveArgumentInternal(nestedParameter, message, resolvedName.toString());, +				arg = resolveStringValue(namedValueInfo.defaultValue);, +			arg = resolveStringValue(namedValueInfo.defaultValue);, +	 * Resolve the given annotation-specified value,, +	 * potentially containing placeholders and expressions., +	 */, +	private Object resolveStringValue(String value) {, +		if (this.configurableBeanFactory == null) {, +			return value;, +		}, +		String placeholdersResolved = this.configurableBeanFactory.resolveEmbeddedValue(value);, +		BeanExpressionResolver exprResolver = this.configurableBeanFactory.getBeanExpressionResolver();, +		if (exprResolver == null) {, +			return value;, +		}, +		return exprResolver.evaluate(placeholdersResolved, this.expressionContext);, +	}, +, +	/**, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractNamedValueMethodArgumentResolver.java, +		Object resolvedName = resolveStringValue(namedValueInfo.name);, +		if (resolvedName == null) {, +			throw new IllegalArgumentException(, +					"Specified name must not resolve to null: [" + namedValueInfo.name + "]");, +		}, +, +		Object arg = resolveArgumentInternal(nestedParameter, message, resolvedName.toString());, +				arg = resolveStringValue(namedValueInfo.defaultValue);, +			arg = resolveStringValue(namedValueInfo.defaultValue);, +	 * Resolve the given annotation-specified value,, +	 * potentially containing placeholders and expressions., +	 */, +	private Object resolveStringValue(String value) {, +		if (this.configurableBeanFactory == null) {, +			return value;, +		}, +		String placeholdersResolved = this.configurableBeanFactory.resolveEmbeddedValue(value);, +		BeanExpressionResolver exprResolver = this.configurableBeanFactory.getBeanExpressionResolver();, +		if (exprResolver == null) {, +			return value;, +		}, +		return exprResolver.evaluate(placeholdersResolved, this.expressionContext);, +	}, +, +	/**, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/annotation/support/HeaderMethodArgumentResolverTests.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.util.ReflectionUtils;, +	private MethodParameter paramSystemPropertyDefaultValue;, +	private MethodParameter paramSystemPropertyName;, +		Method method = ReflectionUtils.findMethod(getClass(), "handleMessage", (Class<?>[]) null);, +		this.paramSystemPropertyDefaultValue = new SynthesizingMethodParameter(method, 2);, +		this.paramSystemPropertyName = new SynthesizingMethodParameter(method, 3);, +		this.paramNotAnnotated = new SynthesizingMethodParameter(method, 4);, +		this.paramNativeHeader = new SynthesizingMethodParameter(method, 5);, +	@Test  // SPR-11326, +			Object result = resolver.resolveArgument(paramSystemPropertyDefaultValue, message);, +	@Test, +	public void resolveNameFromSystemProperty() throws Exception {, +		System.setProperty("systemProperty", "sysbar");, +		try {, +			Message<byte[]> message = MessageBuilder.withPayload(new byte[0]).setHeader("sysbar", "foo").build();, +			Object result = resolver.resolveArgument(paramSystemPropertyName, message);, +			assertEquals("foo", result);, +		}, +		finally {, +			System.clearProperty("systemProperty");, +		}, +	}, +, +	public void handleMessage(, +			@Header(name = "#{systemProperties.systemProperty}") String param4,, +			String param5,, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractNamedValueMethodArgumentResolver.java, +		Object resolvedName = resolveStringValue(namedValueInfo.name);, +		if (resolvedName == null) {, +			throw new IllegalArgumentException(, +					"Specified name must not resolve to null: [" + namedValueInfo.name + "]");, +		}, +, +		Object arg = resolveArgumentInternal(nestedParameter, message, resolvedName.toString());, +				arg = resolveStringValue(namedValueInfo.defaultValue);, +			arg = resolveStringValue(namedValueInfo.defaultValue);, +	 * Resolve the given annotation-specified value,, +	 * potentially containing placeholders and expressions., +	 */, +	private Object resolveStringValue(String value) {, +		if (this.configurableBeanFactory == null) {, +			return value;, +		}, +		String placeholdersResolved = this.configurableBeanFactory.resolveEmbeddedValue(value);, +		BeanExpressionResolver exprResolver = this.configurableBeanFactory.getBeanExpressionResolver();, +		if (exprResolver == null) {]