[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ResponseStatusExceptionResolver.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.context.MessageSource;, +import org.springframework.context.MessageSourceAware;, +import org.springframework.context.i18n.LocaleContextHolder;, + * @author Rossen Stoyanchev, +public class ResponseStatusExceptionResolver extends AbstractHandlerExceptionResolver implements MessageSourceAware {, +, +	private MessageSource messageSource;, +, +, +	public void setMessageSource(MessageSource messageSource) {, +		this.messageSource = messageSource;, +	}, +		if (this.messageSource != null) {, +			reason = this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale());, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ResponseStatusExceptionResolver.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.context.MessageSource;, +import org.springframework.context.MessageSourceAware;, +import org.springframework.context.i18n.LocaleContextHolder;, + * @author Rossen Stoyanchev, +public class ResponseStatusExceptionResolver extends AbstractHandlerExceptionResolver implements MessageSourceAware {, +, +	private MessageSource messageSource;, +, +, +	public void setMessageSource(MessageSource messageSource) {, +		this.messageSource = messageSource;, +	}, +		if (this.messageSource != null) {, +			reason = this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale());, +		}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/annotation/ResponseStatusExceptionResolverTests.java, +, +import java.util.Locale;, +, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.i18n.LocaleContextHolder;, +import org.springframework.context.support.StaticMessageSource;, +import org.springframework.web.context.support.StaticWebApplicationContext;, +	public void statusCodeAndReasonMessage() {, +		Locale locale = Locale.CHINESE;, +		LocaleContextHolder.setLocale(locale);, +		try {, +			StaticMessageSource messageSource = new StaticMessageSource();, +			messageSource.addMessage("gone.reason", locale, "Gone reason message");, +			exceptionResolver.setMessageSource(messageSource);, +, +			StatusCodeAndReasonMessageException ex = new StatusCodeAndReasonMessageException();, +			ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex);, +			assertEquals("Invalid status reason", "Gone reason message", response.getErrorMessage());, +		}, +		finally {, +			LocaleContextHolder.resetLocaleContext();, +		}, +	}, +, +	@Test, +, +	@ResponseStatus(value = HttpStatus.GONE, reason = "gone.reason"), +	@SuppressWarnings("serial"), +	private static class StatusCodeAndReasonMessageException extends Exception {, +, +	}, +]