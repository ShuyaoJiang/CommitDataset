[+++ b/src/asciidoc/testing.adoc, +[TIP], +====, +Spring Boot provides an option to write full, end-to-end integration tests that include, +a running server. If this is your goal please have a look at the, +http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html#boot-features-testing-spring-boot-applications[Spring Boot reference page]., +For more on the difference with end-to-end integration tests see, +<<spring-mvc-test-vs-end-to-end-integration-tests>>., +====, +, +explained in <<spring-mvc-test-vs-end-to-end-integration-tests>>., +Here is an example of using Spring MVC Test:, +[[spring-mvc-test-vs-end-to-end-integration-tests]], +===== Difference With End-to-End Integration Tests, +, +As mentioned earlier __Spring MVC Test__ is built on the Servlet API mock objects from, +the `spring-test` module and does not rely on a running Servlet container. Therefore, +there are some important differences compared to full end-to-end integration tests, +with an actual client and server running., +, +The easiest way to think about this is starting with a blank `MockHttpServletRequest`., +Whatever you add to it is what the request will be. The things that may catch you out are, +there is no context path by default, no jsessionid cookie, no forwarding, error, or async, +dispatches, and therefore no actual JSP rendering. Instead "forwarded" and "redirected", +URLs are saved in the `MockHttpServletResponse` and can be asserted with expectations., +, +This means if you are using JSPs you can verify the JSP page to which the request was, +forwarded but there won't be any HTML rendered. Note however that all other rendering, +technologies that don't rely on forwarding such as Thymeleaf, Freemarker, Velocity, +will render HTML to the response body as expected. The same is true for rendering JSON,, +XML and others via `@ResponseBody` methods., +, +Alternatively you may consider the full end-to-end integration testing support from, +Spring Boot via `@WebIntegrationTest`. See the, +http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html#boot-features-testing-spring-boot-applications[Spring Boot reference]., +, +There are pros and cons for each. The options provided in __Spring MVC Test__, +are different stops on the scale from classic unit to full integration tests., +To be sure none of the options in Spring MVC Test are classic unit tests but they are a, +little closer to it. For example you can isolate the service layer with mocks, +injected into controllers and then you're testing the web layer only through, +the `DispatcherServlet` and with actual Spring configuration, just like you might test, +the database layer in isolation of the layers above. Or you could be using the, +standalone setup focusing on one controller at a time and manually providing the, +configuration required to make it work., +, +Another important distinction when using __Spring MVC Test__ is that conceptually such, +tests are on the inside of the server-side so you can check what handler was used,, +if an exception was handled with a HandlerExceptionResolver, what the content of the, +model is, what binding errors there were, etc. That means it's easier to write, +expectations since the server is not a black box as it is when testing it through, +an actual HTTP client. This is generally the advantage of classic unit testing that it's, +easier to write, reason about, and debug but does not replace the need for full, +integration tests. At the same time it's important not to lose sight of the fact, +the response is the most important thing to check. In short there is room here for, +multiple styles and strategies of testing even in the same project., +, +]