[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotatedControllersBeanDefinitionParser.java, +import org.springframework.core.convert.ConversionService;, +import org.springframework.util.ClassUtils;, +import org.springframework.validation.Validator;, +import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;, + * <p>, + * Responsible for:, + * <ol>, + * <li>Registering a DefaultAnnotationHandlerMapping bean for mapping HTTP Servlet Requests to @Controller methods using @RequestMapping annotations., + * <li>Registering a AnnotationMethodHandlerAdapter bean for invoking annotated @Controller methods., + * Will configure the HandlerAdapter's <code>webBindingInitializer</code> property for centrally configuring @Controller DataBinder instances:, + * <ul>, + * <li>Configures the conversionService to be the bean named <code>conversionService</code> if such a bean exists,, + * otherwise defaults to a fresh {@link ConversionService} instance created by the default {@link FormattingConversionServiceFactoryBean}., + * <li>Configures the validator to be the bean named <code>validator</code> if such a bean exists,, + * otherwise defaults to a fresh {@link Validator} instance created by the default {@link LocalValidatorFactoryBean} <i>if the JSR-303 API is present in the classpath., + * </ul>, + * </ol>, + * @since 3.0, +		addConversionService(builder, element, source, context);, +		addValidator(builder, element, source, context);		, +	private void addConversionService(BeanDefinitionBuilder builder, Element element, Object source, ParserContext context) {, +		if (context.getRegistry().containsBeanDefinition("conversionService")) {, +			builder.addPropertyReference("conversionService", "conversionService");, +		} else {, +			builder.addPropertyValue("conversionService", createConversionService(element, source, context));, +		}, +	}, +, +	private void addValidator(BeanDefinitionBuilder builder, Element element, Object source, ParserContext context) {, +		if (context.getRegistry().containsBeanDefinition("validator")) {, +			builder.addPropertyReference("validator", "validator");, +		} else {, +			if (ClassUtils.isPresent("javax.validation.Validator", AnnotatedControllersBeanDefinitionParser.class.getClassLoader())) {, +				builder.addPropertyValue("validator", createValidator(element, source, context));, +			}, +		}, +	}, +, +	private BeanDefinition createConversionService(Element element, Object source, ParserContext context) {, +	private BeanDefinition createValidator(Element element, Object source, ParserContext context) {, +		BeanDefinitionBuilder builder = createBeanBuilder(LocalValidatorFactoryBean.class, source);, +		return builder.getBeanDefinition();, +	}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotatedControllersBeanDefinitionParser.java, +import org.springframework.core.convert.ConversionService;, +import org.springframework.util.ClassUtils;, +import org.springframework.validation.Validator;, +import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;, + * <p>, + * Responsible for:, + * <ol>, + * <li>Registering a DefaultAnnotationHandlerMapping bean for mapping HTTP Servlet Requests to @Controller methods using @RequestMapping annotations., + * <li>Registering a AnnotationMethodHandlerAdapter bean for invoking annotated @Controller methods., + * Will configure the HandlerAdapter's <code>webBindingInitializer</code> property for centrally configuring @Controller DataBinder instances:, + * <ul>, + * <li>Configures the conversionService to be the bean named <code>conversionService</code> if such a bean exists,, + * otherwise defaults to a fresh {@link ConversionService} instance created by the default {@link FormattingConversionServiceFactoryBean}., + * <li>Configures the validator to be the bean named <code>validator</code> if such a bean exists,, + * otherwise defaults to a fresh {@link Validator} instance created by the default {@link LocalValidatorFactoryBean} <i>if the JSR-303 API is present in the classpath., + * </ul>, + * </ol>, + * @since 3.0, +		addConversionService(builder, element, source, context);, +		addValidator(builder, element, source, context);		, +	private void addConversionService(BeanDefinitionBuilder builder, Element element, Object source, ParserContext context) {, +		if (context.getRegistry().containsBeanDefinition("conversionService")) {, +			builder.addPropertyReference("conversionService", "conversionService");, +		} else {, +			builder.addPropertyValue("conversionService", createConversionService(element, source, context));, +		}, +	}, +, +	private void addValidator(BeanDefinitionBuilder builder, Element element, Object source, ParserContext context) {, +		if (context.getRegistry().containsBeanDefinition("validator")) {, +			builder.addPropertyReference("validator", "validator");, +		} else {, +			if (ClassUtils.isPresent("javax.validation.Validator", AnnotatedControllersBeanDefinitionParser.class.getClassLoader())) {, +				builder.addPropertyValue("validator", createValidator(element, source, context));, +			}, +		}, +	}, +, +	private BeanDefinition createConversionService(Element element, Object source, ParserContext context) {, +	private BeanDefinition createValidator(Element element, Object source, ParserContext context) {, +		BeanDefinitionBuilder builder = createBeanBuilder(LocalValidatorFactoryBean.class, source);, +		return builder.getBeanDefinition();, +	}, +, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java, +import org.springframework.format.annotation.ISODateTimeFormat;, +import org.springframework.format.annotation.ISODateTimeFormat.ISO;, +		request.addParameter("date", "2009-10-31");, +		public void testBind(@RequestParam @ISODateTimeFormat(ISO.DATE) Date date) {, +			]