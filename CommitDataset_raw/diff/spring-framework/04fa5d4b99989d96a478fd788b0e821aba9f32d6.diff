[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +		if (AnnotationUtils.findAnnotation(handler.getClass(), SessionAttributes.class) != null) {, +			ResponseStatus responseStatus = AnnotationUtils.findAnnotation(handlerMethod, ResponseStatus.class);, +			if (responseStatus != null) {, +			if (returnValue != null && AnnotationUtils.findAnnotation(handlerMethod, ResponseBody.class) != null) {, +				handleResponseBody(returnValue, webRequest);, +			else if (AnnotationUtils.findAnnotation(handlerMethod, ModelAttribute.class) != null) {, +		private void handleResponseBody(Object returnValue, ServletWebRequest webRequest) throws ServletException, IOException {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +		if (AnnotationUtils.findAnnotation(handler.getClass(), SessionAttributes.class) != null) {, +			ResponseStatus responseStatus = AnnotationUtils.findAnnotation(handlerMethod, ResponseStatus.class);, +			if (responseStatus != null) {, +			if (returnValue != null && AnnotationUtils.findAnnotation(handlerMethod, ResponseBody.class) != null) {, +				handleResponseBody(returnValue, webRequest);, +			else if (AnnotationUtils.findAnnotation(handlerMethod, ModelAttribute.class) != null) {, +		private void handleResponseBody(Object returnValue, ServletWebRequest webRequest) throws ServletException, IOException {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +import org.springframework.core.annotation.AnnotationUtils;, + * exceptions through the {@link ExceptionHandler} annotation. <p>This exception resolver is enabled by default in the, + * {@link org.springframework.web.servlet.DispatcherServlet}., +							if (!oldMappedMethod.equals(method)) {, +							}, +, +	 * Returns all the exception classes handled by the given method. <p>Default implementation looks for exceptions in the, +	 * {@linkplain ExceptionHandler#value() annotation}, or - if that annotation element is empty - any exceptions listed, +	 * in the method parameters if the method is annotated with {@code @ExceptionHandler}., +		ExceptionHandler exceptionHandler = AnnotationUtils.findAnnotation(method, ExceptionHandler.class);, +	/** Returns the best matching method. Uses the {@link DepthComparator}. */, +	/** Resolves the arguments for the given method. Delegates to {@link #resolveCommonArgument}. */, +	 * Resolves common method arguments. Delegates to registered {@link #setCustomArgumentResolver(WebArgumentResolver), +	 * argumentResolvers} first, then checking {@link #resolveStandardArgument}., +	 * Resolves standard method arguments. Default implementation handles {@link NativeWebRequest}, {@link ServletRequest},, +	 * {@link ServletResponse}, {@link HttpSession}, {@link Principal}, {@link Locale}, request {@link InputStream},, +	 * request {@link Reader}, response {@link OutputStream}, response {@link Writer}, and the given {@code, +	 * thrownException}., +		ResponseStatus responseStatus = AnnotationUtils.findAnnotation(handlerMethod, ResponseStatus.class);, +		if (responseStatus != null) {, +	/** Comparator capable of sorting exceptions based on their depth from the thrown exception type. */, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +		if (AnnotationUtils.findAnnotation(handler.getClass(), SessionAttributes.class) != null) {, +			ResponseStatus responseStatus = AnnotationUtils.findAnnotation(handlerMethod, ResponseStatus.class);, +			if (responseStatus != null) {, +			if (returnValue != null && AnnotationUtils.findAnnotation(handlerMethod, ResponseBody.class) != null) {, +				handleResponseBody(returnValue, webRequest);, +			else if (AnnotationUtils.findAnnotation(handlerMethod, ModelAttribute.class) != null) {, +		private void handleResponseBody(Object returnValue, ServletWebRequest webRequest) throws ServletException, IOException {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +import org.springframework.core.annotation.AnnotationUtils;, + * exceptions through the {@link ExceptionHandler} annotation. <p>This exception resolver is enabled by default in the, + * {@link org.springframework.web.servlet.DispatcherServlet}., +							if (!oldMappedMethod.equals(method)) {, +							}, +, +	 * Returns all the exception classes handled by the given method. <p>Default implementation looks for exceptions in the, +	 * {@linkplain ExceptionHandler#value() annotation}, or - if that annotation element is empty - any exceptions listed, +	 * in the method parameters if the method is annotated with {@code @ExceptionHandler}., +		ExceptionHandler exceptionHandler = AnnotationUtils.findAnnotation(method, ExceptionHandler.class);, +	/** Returns the best matching method. Uses the {@link DepthComparator}. */, +	/** Resolves the arguments for the given method. Delegates to {@link #resolveCommonArgument}. */, +	 * Resolves common method arguments. Delegates to registered {@link #setCustomArgumentResolver(WebArgumentResolver), +	 * argumentResolvers} first, then checking {@link #resolveStandardArgument}., +	 * Resolves standard method arguments. Default implementation handles {@link NativeWebRequest}, {@link ServletRequest},, +	 * {@link ServletResponse}, {@link HttpSession}, {@link Principal}, {@link Locale}, request {@link InputStream},, +	 * request {@link Reader}, response {@link OutputStream}, response {@link Writer}, and the given {@code, +	 * thrownException}., +		ResponseStatus responseStatus = AnnotationUtils.findAnnotation(handlerMethod, ResponseStatus.class);, +		if (responseStatus != null) {, +	/** Comparator capable of sorting exceptions based on their depth from the thrown exception type. */, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerExceptionResolverTests.java, +	@Test, +	public void inherited()	{, +		IOException ex = new IOException();, +		InheritedController controller = new InheritedController();, +		ModelAndView mav = exceptionResolver.resolveException(request, response, controller, ex);, +		assertNotNull("No ModelAndView returned", mav);, +		assertEquals("Invalid view name returned", "GenericError", mav.getViewName());, +		assertEquals("Invalid status code returned", 500, response.getStatus());, +	}, +	, +		@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR), +	private static class InheritedController extends SimpleController, +	{, +		@Override, +		public String handleIOException(IOException ex, HttpServletRequest request)	{, +			return "GenericError";, +		}, +	}, +, +	@Controller]