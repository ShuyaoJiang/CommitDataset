[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	private TypeDescriptor elementType;, +, +	private TypeDescriptor(Class collectionType, TypeDescriptor elementType) {, +		this.type = collectionType;, +		this.elementType = elementType;, +	}, +, +		} else if (this.field != null) {, +		} else if (this.methodParameter != null) {, +		} else {, +	 * Does the underyling declared type equal the type provided?, +	 * @param type the type to test against, +	 */, +	public boolean typeEquals(Class<?> type) {, +		Class<?> thisType = getType();, +		return thisType != null ? thisType.equals(type) : false;, +	}, +, +	/**, +		} else {, +		return getElementTypeDescriptor().getType();, +		if (elementType != null) {, +			return elementType;, +		} else {, +			if (isArray()) {, +				return TypeDescriptor.valueOf(getArrayComponentType());, +			} else if (isCollection()) {, +				return TypeDescriptor.valueOf(getCollectionElementType());, +			} else {, +				return TypeDescriptor.NULL;, +			}			, +		}, +		} else if (this.methodParameter != null) {, +		} else {, +		} else if (this.methodParameter != null) {, +		} else {, +		} else if (this.methodParameter != null) {, +		} else {, +		} else {, +			} else if (isMap()) {, +		} else if (this.field != null) {, +		} else {, +	public String toString() {, +		if (this == TypeDescriptor.NULL) {, +			return "[TypeDescriptor.NULL]";, +		} else {, +			return "[TypeDescriptor type=" + getType().getName() + "]";, +		}, +	}, +, +	public static TypeDescriptor collection(Class<?> type, TypeDescriptor elementType) {, +		return new TypeDescriptor(type, elementType);, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	private TypeDescriptor elementType;, +, +	private TypeDescriptor(Class collectionType, TypeDescriptor elementType) {, +		this.type = collectionType;, +		this.elementType = elementType;, +	}, +, +		} else if (this.field != null) {, +		} else if (this.methodParameter != null) {, +		} else {, +	 * Does the underyling declared type equal the type provided?, +	 * @param type the type to test against, +	 */, +	public boolean typeEquals(Class<?> type) {, +		Class<?> thisType = getType();, +		return thisType != null ? thisType.equals(type) : false;, +	}, +, +	/**, +		} else {, +		return getElementTypeDescriptor().getType();, +		if (elementType != null) {, +			return elementType;, +		} else {, +			if (isArray()) {, +				return TypeDescriptor.valueOf(getArrayComponentType());, +			} else if (isCollection()) {, +				return TypeDescriptor.valueOf(getCollectionElementType());, +			} else {, +				return TypeDescriptor.NULL;, +			}			, +		}, +		} else if (this.methodParameter != null) {, +		} else {, +		} else if (this.methodParameter != null) {, +		} else {, +		} else if (this.methodParameter != null) {, +		} else {, +		} else {, +			} else if (isMap()) {, +		} else if (this.field != null) {, +		} else {, +	public String toString() {, +		if (this == TypeDescriptor.NULL) {]