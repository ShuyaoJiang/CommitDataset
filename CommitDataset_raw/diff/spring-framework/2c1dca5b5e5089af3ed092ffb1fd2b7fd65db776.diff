[+++ b/spring-core/src/main/java/org/springframework/util/unit/DataSize.java, +	 * Bytes per Kilobyte., +	 * Bytes per Megabyte., +	 * Bytes per Gigabyte., +	 * Bytes per Terabyte., +	 * @param kilobytes the number of kilobytes, positive or negative, +	public static DataSize ofKilobytes(long kilobytes) {, +		return new DataSize(Math.multiplyExact(kilobytes, BYTES_PER_KB));, +	 * @param megabytes the number of megabytes, positive or negative, +	public static DataSize ofMegabytes(long megabytes) {, +		return new DataSize(Math.multiplyExact(megabytes, BYTES_PER_MB));, +	 * @param gigabytes the number of gigabytes, positive or negative, +	public static DataSize ofGigabytes(long gigabytes) {, +		return new DataSize(Math.multiplyExact(gigabytes, BYTES_PER_GB));, +	 * @param terabytes the number of terabytes, positive or negative, +	public static DataSize ofTerabytes(long terabytes) {, +		return new DataSize(Math.multiplyExact(terabytes, BYTES_PER_TB));, +	public long toKilobytes() {, +	public long toMegabytes() {, +	public long toGigabytes() {, +	public long toTerabytes() {, +++ b/spring-core/src/main/java/org/springframework/util/unit/DataSize.java, +	 * Bytes per Kilobyte., +	 * Bytes per Megabyte., +	 * Bytes per Gigabyte., +	 * Bytes per Terabyte., +	 * @param kilobytes the number of kilobytes, positive or negative, +	public static DataSize ofKilobytes(long kilobytes) {, +		return new DataSize(Math.multiplyExact(kilobytes, BYTES_PER_KB));, +	 * @param megabytes the number of megabytes, positive or negative, +	public static DataSize ofMegabytes(long megabytes) {, +		return new DataSize(Math.multiplyExact(megabytes, BYTES_PER_MB));, +	 * @param gigabytes the number of gigabytes, positive or negative, +	public static DataSize ofGigabytes(long gigabytes) {, +		return new DataSize(Math.multiplyExact(gigabytes, BYTES_PER_GB));, +	 * @param terabytes the number of terabytes, positive or negative, +	public static DataSize ofTerabytes(long terabytes) {, +		return new DataSize(Math.multiplyExact(terabytes, BYTES_PER_TB));, +	public long toKilobytes() {, +	public long toMegabytes() {, +	public long toGigabytes() {, +	public long toTerabytes() {, +++ b/spring-core/src/main/java/org/springframework/util/unit/DataUnit.java, +	 * Kilobytes., +	KILOBYTES("KB", DataSize.ofKilobytes(1)),, +	 * Megabytes., +	MEGABYTES("MB", DataSize.ofMegabytes(1)),, +	 * Gigabytes., +	GIGABYTES("GB", DataSize.ofGigabytes(1)),, +	 * Terabytes., +	TERABYTES("TB", DataSize.ofTerabytes(1));, +++ b/spring-core/src/main/java/org/springframework/util/unit/DataSize.java, +	 * Bytes per Kilobyte., +	 * Bytes per Megabyte., +	 * Bytes per Gigabyte., +	 * Bytes per Terabyte., +	 * @param kilobytes the number of kilobytes, positive or negative, +	public static DataSize ofKilobytes(long kilobytes) {, +		return new DataSize(Math.multiplyExact(kilobytes, BYTES_PER_KB));, +	 * @param megabytes the number of megabytes, positive or negative, +	public static DataSize ofMegabytes(long megabytes) {, +		return new DataSize(Math.multiplyExact(megabytes, BYTES_PER_MB));, +	 * @param gigabytes the number of gigabytes, positive or negative, +	public static DataSize ofGigabytes(long gigabytes) {, +		return new DataSize(Math.multiplyExact(gigabytes, BYTES_PER_GB));, +	 * @param terabytes the number of terabytes, positive or negative, +	public static DataSize ofTerabytes(long terabytes) {, +		return new DataSize(Math.multiplyExact(terabytes, BYTES_PER_TB));, +	public long toKilobytes() {, +	public long toMegabytes() {, +	public long toGigabytes() {, +	public long toTerabytes() {, +++ b/spring-core/src/main/java/org/springframework/util/unit/DataUnit.java, +	 * Kilobytes., +	KILOBYTES("KB", DataSize.ofKilobytes(1)),, +	 * Megabytes., +	MEGABYTES("MB", DataSize.ofMegabytes(1)),, +	 * Gigabytes., +	GIGABYTES("GB", DataSize.ofGigabytes(1)),, +	 * Terabytes., +	TERABYTES("TB", DataSize.ofTerabytes(1));, +++ b/spring-core/src/test/java/org/springframework/util/unit/DataSizeTests.java, +	public void ofBytesToKilobytes() {, +		assertEquals(1, DataSize.ofBytes(1024).toKilobytes());, +	public void ofKilobytesToKiloBbtes() {, +		assertEquals(1024, DataSize.ofKilobytes(1024).toKilobytes());, +	public void ofKilobytesToMegabytes() {, +		assertEquals(1, DataSize.ofKilobytes(1024).toMegabytes());, +	public void ofMegabytesToMegabytes() {, +		assertEquals(1024, DataSize.ofMegabytes(1024).toMegabytes());, +	public void ofMegabytesToGigabytes() {, +		assertEquals(2, DataSize.ofMegabytes(2048).toGigabytes());, +	public void ofGigabytesToGigabytes() {, +		assertEquals(4096, DataSize.ofGigabytes(4096).toGigabytes());, +	public void ofGigabytesToTerabytes() {, +		assertEquals(4, DataSize.ofGigabytes(4096).toTerabytes());, +	public void ofTerabytesToGigabytes() {, +		assertEquals(1024, DataSize.ofTerabytes(1).toGigabytes());, +	public void ofWithKilobytesUnit() {, +		assertEquals(DataSize.ofKilobytes(20), DataSize.of(20, DataUnit.KILOBYTES));]