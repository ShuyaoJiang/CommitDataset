[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/FixedContentTypeResolver.java, + * Copyright 2002-2017 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, + * {@code RequestedContentTypeResolver} with a fixed list of media types., +	private static final Log logger = LogFactory.getLog(FixedContentTypeResolver.class);, +, +, +	 * Constructor with a single default {@code MediaType}., +	public FixedContentTypeResolver(MediaType mediaType) {, +		this(Collections.singletonList(mediaType));, +	/**, +	 * Constructor with an ordered List of default {@code MediaType}'s to return, +	 * for use in applications that support a variety of content types., +	 * <p>Consider appending {@link MediaType#ALL} at the end if destinations, +	 * are present which do not support any of the other default media types., +	 */, +	public FixedContentTypeResolver(List<MediaType> mediaTypes) {, +		this.mediaTypes = Collections.unmodifiableList(mediaTypes);, +	}, +, +, +	/**, +	 * Return the configured list of media types., +	 */, +	public List<MediaType> getContentTypes() {, +		return this.mediaTypes;, +	}, +, +, +		if (logger.isDebugEnabled()) {, +			logger.debug("Requested media types: " + this.mediaTypes);, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/FixedContentTypeResolver.java, + * Copyright 2002-2017 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, + * {@code RequestedContentTypeResolver} with a fixed list of media types., +	private static final Log logger = LogFactory.getLog(FixedContentTypeResolver.class);, +, +, +	 * Constructor with a single default {@code MediaType}., +	public FixedContentTypeResolver(MediaType mediaType) {, +		this(Collections.singletonList(mediaType));, +	/**, +	 * Constructor with an ordered List of default {@code MediaType}'s to return, +	 * for use in applications that support a variety of content types., +	 * <p>Consider appending {@link MediaType#ALL} at the end if destinations, +	 * are present which do not support any of the other default media types., +	 */, +	public FixedContentTypeResolver(List<MediaType> mediaTypes) {, +		this.mediaTypes = Collections.unmodifiableList(mediaTypes);, +	}, +, +, +	/**, +	 * Return the configured list of media types., +	 */, +	public List<MediaType> getContentTypes() {, +		return this.mediaTypes;, +	}, +, +, +		if (logger.isDebugEnabled()) {, +			logger.debug("Requested media types: " + this.mediaTypes);, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/accept/RequestedContentTypeResolverBuilder.java, +import java.util.Arrays;, +	 * Set the default content type(s) to use when no content type is requested, +	 * in order of priority., +	 *, +	 * <p>If destinations are present that do not support any of the given media, +	 * types, consider appending {@link MediaType#ALL} at the end., +	 *, +	 *, +	public RequestedContentTypeResolverBuilder defaultContentType(MediaType... contentTypes) {, +		this.contentTypeResolver = new FixedContentTypeResolver(Arrays.asList(contentTypes));]