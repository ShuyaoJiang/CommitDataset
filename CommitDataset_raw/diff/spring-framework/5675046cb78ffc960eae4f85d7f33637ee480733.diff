[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java, +import java.util.Comparator;, +		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(urlPath);, +			Collections.sort(matchingPatterns, patternComparator);, +, +			// There might be multiple 'best patterns', let's make sure we have the correct URI template variables, +			// for all of them, +			Map<String, String> uriTemplateVariables = new LinkedHashMap<String, String>();, +			for (String matchingPattern : matchingPatterns) {, +				if (patternComparator.compare(bestPatternMatch, matchingPattern) == 0) {, +					uriTemplateVariables, +							.putAll(getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath));, +				}, +			}, +			if (logger.isDebugEnabled()) {, +				logger.debug("URI Template variables for request [" + urlPath + "] are " + uriTemplateVariables);, +			}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java, +import java.util.Comparator;, +		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(urlPath);, +			Collections.sort(matchingPatterns, patternComparator);, +, +			// There might be multiple 'best patterns', let's make sure we have the correct URI template variables, +			// for all of them, +			Map<String, String> uriTemplateVariables = new LinkedHashMap<String, String>();, +			for (String matchingPattern : matchingPatterns) {, +				if (patternComparator.compare(bestPatternMatch, matchingPattern) == 0) {, +					uriTemplateVariables, +							.putAll(getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath));, +				}, +			}, +			if (logger.isDebugEnabled()) {, +				logger.debug("URI Template variables for request [" + urlPath + "] are " + uriTemplateVariables);, +			}, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/UriTemplateServletAnnotationControllerTests.java, +	/*, +	 * See SPR-6876, +	 */, +	@Test, +	public void variableNames() throws Exception {, +		initServlet(VariableNamesController.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/test/foo");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("foo-foo", response.getContentAsString());, +, +		request = new MockHttpServletRequest("DELETE", "/test/bar");, +		response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("bar-bar", response.getContentAsString());, +, +	}, +, +	@Controller, +	@RequestMapping("/test"), +	public static class VariableNamesController {, +, +		@RequestMapping(value = "/{foo}", method=RequestMethod.GET), +		public void foo(@PathVariable String foo, Writer writer) throws IOException {, +			writer.write("foo-" + foo);, +		}, +, +		@RequestMapping(value = "/{bar}", method=RequestMethod.DELETE), +		public void bar(@PathVariable String bar, Writer writer) throws IOException {, +			writer.write("bar-" + bar);, +		}, +	}, +, +]