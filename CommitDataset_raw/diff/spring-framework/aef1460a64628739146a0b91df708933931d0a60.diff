[+++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +		return new TypeDescriptor(narrowed, value.getClass(), getAnnotations());, +		if (value != null) {, +			return narrow(value);, +		}, +		return null;, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +		return new TypeDescriptor(narrowed, value.getClass(), getAnnotations());, +		if (value != null) {, +			return narrow(value);, +		}, +		return null;, +++ b/spring-core/src/test/java/org/springframework/core/convert/converter/DefaultConversionServiceTests.java, +	public void convertListOfNonStringifiable() {, +		List<Object> list = Arrays.asList(new TestEntity(1L), new TestEntity(2L));, +		assertTrue(conversionService.canConvert(list.getClass(), String.class));, +		try {, +			conversionService.convert(list, String.class);, +		}, +		catch (ConversionFailedException ex) {, +			assertTrue(ex.getMessage().contains(list.getClass().getName()));, +			assertTrue(ex.getCause() instanceof ConverterNotFoundException);, +			assertTrue(ex.getCause().getMessage().contains(TestEntity.class.getName()));, +		}, +	}, +, +	@Test, +	public void convertListOfStringToString() {, +		List<String> list = Arrays.asList("Foo", "Bar");, +		assertTrue(conversionService.canConvert(list.getClass(), String.class));, +		String result = conversionService.convert(list, String.class);, +		assertEquals("Foo,Bar", result);, +	}, +, +	@Test, +		assertTrue(conversionService.canConvert(list.getClass(), String.class));]