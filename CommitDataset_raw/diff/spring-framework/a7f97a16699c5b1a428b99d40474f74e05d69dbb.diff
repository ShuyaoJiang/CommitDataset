[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractNamedValueArgumentResolver.java, +				.flatMap(arg -> {, +					return Mono.justOrEmpty(arg);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractNamedValueArgumentResolver.java, +				.flatMap(arg -> {, +					return Mono.justOrEmpty(arg);, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestParamMethodArgumentResolverTests.java, + * Copyright 2002-2018 the original author or authors., +	public void resolveWithQueryString() {, +	public void resolveStringArray() {, +	public void resolveDefaultValue() {, +	@Test // SPR-17050, +	public void resolveAndConvertNullValue() {, +		MethodParameter param = this.testMethod, +				.annot(requestParam().notRequired()), +				.arg(Integer.class);, +		assertNull(resolve(param, MockServerWebExchange.from(MockServerHttpRequest.get("/?nullParam="))));, +	}, +, +	public void missingRequestParam() {, +	public void resolveSimpleTypeParam() {, +	public void resolveSimpleTypeParamToNull() {, +	public void resolveEmptyValueToDefault() {, +	public void resolveEmptyValueWithoutDefault() {, +	public void resolveEmptyValueRequiredWithoutDefault() {, +	public void resolveOptionalParamValue() {, +			@RequestParam Mono<String> paramMono,, +			@RequestParam(required = false) Integer nullParam) {]