[+++ b/spring-test/src/main/java/org/springframework/test/context/testng/AbstractTestNGSpringContextTests.java, + * Copyright 2002-2016 the original author or authors., + * &#064;ContextConfiguration} annotation to configure the {@linkplain ApplicationContext, + * application context} {@linkplain ContextConfiguration#locations() resource locations}, + * or {@linkplain ContextConfiguration#classes() annotated classes}. <em>If your test, + * {@code @ContextConfiguration} declaration and to configure the appropriate, +	 * the internal {@link TestContextManager} for the current test class., +	 * {@linkplain TestContextManager#beforeTestClass() 'before test class'}, +	 * {@linkplain TestContextManager#prepareTestInstance(Object) prepare} this test, +	 * {@linkplain TestContextManager#beforeTestMethod(Object,Method) pre-process}, +	 * @param testMethod the test method which is about to be executed, +	 * @throws Exception allows all exceptions to propagate, +	 * Delegates to the {@linkplain IHookCallBack#runTestMethod(ITestResult) test, +	 * @see org.testng.IHookable#run(IHookCallBack, ITestResult), +		Method testMethod = testResult.getMethod().getConstructorOrMethod().getMethod();, +		boolean beforeCallbacksExecuted = false;, +		try {, +			this.testContextManager.beforeTestExecution(this, testMethod);, +			beforeCallbacksExecuted = true;, +		catch (Throwable ex) {, +			testResult.setThrowable(ex);, +			this.testException = ex;, +		}, +, +		if (beforeCallbacksExecuted) {, +			callBack.runTestMethod(testResult);, +			this.testException = getTestResultException(testResult);, +		}, +, +		try {, +			this.testContextManager.afterTestExecution(this, testMethod, this.testException);, +		}, +		catch (Throwable ex) {, +			if (this.testException == null) {, +				testResult.setThrowable(ex);, +				this.testException = ex;, +			}, +		}, +	 * {@linkplain TestContextManager#afterTestMethod(Object, Method, Throwable), +	 * {@linkplain TestContextManager#afterTestClass() 'after test class'} callbacks., +	private Throwable getTestResultException(ITestResult testResult) {, +		Throwable testResultException = testResult.getThrowable();, +		if (testResultException instanceof InvocationTargetException) {, +			testResultException = ((InvocationTargetException) testResultException).getCause();, +		}, +		return testResultException;, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/context/testng/AbstractTestNGSpringContextTests.java, + * Copyright 2002-2016 the original author or authors., + * &#064;ContextConfiguration} annotation to configure the {@linkplain ApplicationContext, + * application context} {@linkplain ContextConfiguration#locations() resource locations}, + * or {@linkplain ContextConfiguration#classes() annotated classes}. <em>If your test, + * {@code @ContextConfiguration} declaration and to configure the appropriate, +	 * the internal {@link TestContextManager} for the current test class., +	 * {@linkplain TestContextManager#beforeTestClass() 'before test class'}, +	 * {@linkplain TestContextManager#prepareTestInstance(Object) prepare} this test, +	 * {@linkplain TestContextManager#beforeTestMethod(Object,Method) pre-process}, +	 * @param testMethod the test method which is about to be executed, +	 * @throws Exception allows all exceptions to propagate, +	 * Delegates to the {@linkplain IHookCallBack#runTestMethod(ITestResult) test, +	 * @see org.testng.IHookable#run(IHookCallBack, ITestResult), +		Method testMethod = testResult.getMethod().getConstructorOrMethod().getMethod();, +		boolean beforeCallbacksExecuted = false;, +		try {, +			this.testContextManager.beforeTestExecution(this, testMethod);, +			beforeCallbacksExecuted = true;, +		catch (Throwable ex) {, +			testResult.setThrowable(ex);, +			this.testException = ex;, +		}, +, +		if (beforeCallbacksExecuted) {, +			callBack.runTestMethod(testResult);, +			this.testException = getTestResultException(testResult);, +		}, +, +		try {, +			this.testContextManager.afterTestExecution(this, testMethod, this.testException);, +		}, +		catch (Throwable ex) {, +			if (this.testException == null) {, +				testResult.setThrowable(ex);, +				this.testException = ex;, +			}, +		}, +	 * {@linkplain TestContextManager#afterTestMethod(Object, Method, Throwable), +	 * {@linkplain TestContextManager#afterTestClass() 'after test class'} callbacks., +	private Throwable getTestResultException(ITestResult testResult) {, +		Throwable testResultException = testResult.getThrowable();, +		if (testResultException instanceof InvocationTargetException) {, +			testResultException = ((InvocationTargetException) testResultException).getCause();, +		}, +		return testResultException;, +	}, +, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/FailingBeforeAndAfterMethodsTestNGTests.java, + * Copyright 2002-2016 the original author or authors., + * Integration tests which verify that '<i>before</i>' and '<i>after</i>', + * {@code @BeforeTransaction} and {@code @AfterTransaction} methods can fail]