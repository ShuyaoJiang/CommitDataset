[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/TomcatWebSocketSession.java, + * Copyright 2002-2018 the original author or authors., +	@SuppressWarnings("unused"), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/TomcatWebSocketSession.java, + * Copyright 2002-2018 the original author or authors., +	@SuppressWarnings("unused"), +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/accept/HeaderContentTypeResolverTests.java, + * Copyright 2002-2018 the original author or authors., +, +	private final HeaderContentTypeResolver resolver = new HeaderContentTypeResolver();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/TomcatWebSocketSession.java, + * Copyright 2002-2018 the original author or authors., +	@SuppressWarnings("unused"), +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/accept/HeaderContentTypeResolverTests.java, + * Copyright 2002-2018 the original author or authors., +, +	private final HeaderContentTypeResolver resolver = new HeaderContentTypeResolver();, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/config/DelegatingWebFluxConfigurationTests.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/TomcatWebSocketSession.java, + * Copyright 2002-2018 the original author or authors., +	@SuppressWarnings("unused"), +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/accept/HeaderContentTypeResolverTests.java, + * Copyright 2002-2018 the original author or authors., +, +	private final HeaderContentTypeResolver resolver = new HeaderContentTypeResolver();, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/config/DelegatingWebFluxConfigurationTests.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/config/WebFluxConfigurationSupportTests.java, + * Copyright 2002-2018 the original author or authors., +			configurer.customCodecs().decoder(StringDecoder.textPlainOnly());, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/TomcatWebSocketSession.java, + * Copyright 2002-2018 the original author or authors., +	@SuppressWarnings("unused"), +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/accept/HeaderContentTypeResolverTests.java, + * Copyright 2002-2018 the original author or authors., +, +	private final HeaderContentTypeResolver resolver = new HeaderContentTypeResolver();, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/config/DelegatingWebFluxConfigurationTests.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/config/WebFluxConfigurationSupportTests.java, + * Copyright 2002-2018 the original author or authors., +			configurer.customCodecs().decoder(StringDecoder.textPlainOnly());, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/BodyExtractorsTests.java, +		messageReaders.add(new DecoderHttpMessageReader<>(StringDecoder.allMimeTypes()));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/TomcatWebSocketSession.java, + * Copyright 2002-2018 the original author or authors., +	@SuppressWarnings("unused"), +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/accept/HeaderContentTypeResolverTests.java, + * Copyright 2002-2018 the original author or authors., +, +	private final HeaderContentTypeResolver resolver = new HeaderContentTypeResolver();, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/config/DelegatingWebFluxConfigurationTests.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/config/WebFluxConfigurationSupportTests.java, + * Copyright 2002-2018 the original author or authors., +			configurer.customCodecs().decoder(StringDecoder.textPlainOnly());, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/BodyExtractorsTests.java, +		messageReaders.add(new DecoderHttpMessageReader<>(StringDecoder.allMimeTypes()));, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/MultipartIntegrationTests.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/TomcatWebSocketSession.java, + * Copyright 2002-2018 the original author or authors., +	@SuppressWarnings("unused"), +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/accept/HeaderContentTypeResolverTests.java, + * Copyright 2002-2018 the original author or authors., +, +	private final HeaderContentTypeResolver resolver = new HeaderContentTypeResolver();, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/config/DelegatingWebFluxConfigurationTests.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/config/WebFluxConfigurationSupportTests.java, + * Copyright 2002-2018 the original author or authors., +			configurer.customCodecs().decoder(StringDecoder.textPlainOnly());, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/BodyExtractorsTests.java, +		messageReaders.add(new DecoderHttpMessageReader<>(StringDecoder.allMimeTypes()));, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/MultipartIntegrationTests.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/DefaultClientResponseTests.java, +				.singletonList(new DecoderHttpMessageReader<>(StringDecoder.allMimeTypes()));, +				.singletonList(new DecoderHttpMessageReader<>(StringDecoder.allMimeTypes()));, +				.singletonList(new DecoderHttpMessageReader<>(StringDecoder.allMimeTypes()));, +				.singletonList(new DecoderHttpMessageReader<>(StringDecoder.allMimeTypes()));, +				.singletonList(new DecoderHttpMessageReader<>(StringDecoder.allMimeTypes()));, +				.singletonList(new DecoderHttpMessageReader<>(StringDecoder.allMimeTypes()));]