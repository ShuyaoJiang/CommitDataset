[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.test.context;, +, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.beans.BeanUtils;, +import org.springframework.context.ApplicationContext;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.util.Assert;, +import org.springframework.util.ObjectUtils;, +import org.springframework.util.StringUtils;, +, +/**, + * Utility methods for working with {@link ContextLoader ContextLoaders}., + * , + * <p>TODO: Consider refactoring into a stateful ContextLoaderResolver., + * , + * @author Sam Brannen, + * @since 3.1, + * @see ContextLoader, + */, +public abstract class ContextLoaderUtils {, +, +	private static final Log logger = LogFactory.getLog(ContextLoaderUtils.class);, +, +	private static final String STANDARD_DEFAULT_CONTEXT_LOADER_CLASS_NAME = "org.springframework.test.context.support.GenericXmlContextLoader";, +, +, +	/**, +	 * TODO Document resolveContextLoader()., +	 *, +	 * @param testClass the test class for which the <code>ContextLoader</code>, +	 * should be resolved (must not be <code>null</code>), +	 * @param defaultContextLoaderClassName the name of the default, +	 * <code>ContextLoader</code> class to use (may be <code>null</code>), +	 * @return the resolved <code>ContextLoader</code> for the supplied, +	 * <code>testClass</code> , +	 * @see #resolveContextLoaderClass(Class, String), +	 */, +	public static ContextLoader resolveContextLoader(Class<?> testClass, String defaultContextLoaderClassName) {, +		Assert.notNull(testClass, "Test class must not be null");, +, +		if (!StringUtils.hasText(defaultContextLoaderClassName)) {, +			defaultContextLoaderClassName = STANDARD_DEFAULT_CONTEXT_LOADER_CLASS_NAME;, +		}, +, +		Class<? extends ContextLoader> contextLoaderClass = resolveContextLoaderClass(testClass,, +			defaultContextLoaderClassName);, +, +		return (ContextLoader) BeanUtils.instantiateClass(contextLoaderClass);, +	}, +, +	/**, +	 * Retrieve the {@link ContextLoader} {@link Class} to use for the supplied, +	 * {@link Class test class}., +	 * <ol>, +	 * <li>If the {@link ContextConfiguration#loader() loader} attribute of, +	 * {@link ContextConfiguration &#064;ContextConfiguration} is configured, +	 * with an explicit class, that class will be returned.</li>, +	 * <li>If a <code>loader</code> class is not specified, the class hierarchy, +	 * will be traversed to find a parent class annotated with, +	 * <code>&#064;ContextConfiguration</code>; go to step #1.</li>, +	 * <li>If no explicit <code>loader</code> class is found after traversing, +	 * the class hierarchy, an attempt will be made to load and return the class, +	 * with the supplied <code>defaultContextLoaderClassName</code>.</li>, +	 * </ol>, +	 * @param clazz the class for which to retrieve <code>ContextLoader</code>, +	 * class; must not be <code>null</code>, +	 * @param defaultContextLoaderClassName the name of the default, +	 * <code>ContextLoader</code> class to use; must not be <code>null</code> or empty, +	 * @return the <code>ContextLoader</code> class to use for the specified class, +	 * @throws IllegalArgumentException if {@link ContextConfiguration, +	 * &#064;ContextConfiguration} is not <em>present</em> on the supplied class, +	 */, +	@SuppressWarnings("unchecked"), +	static Class<? extends ContextLoader> resolveContextLoaderClass(Class<?> clazz, String defaultContextLoaderClassName) {, +		Assert.notNull(clazz, "Class must not be null");, +		Assert.hasText(defaultContextLoaderClassName, "Default ContextLoader class name must not be null or empty");, +, +		Class<ContextConfiguration> annotationType = ContextConfiguration.class;]