[+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheProxyFactoryBean.java, +	 * Set one or more sources to find cache operations., +	 * Set a pointcut, i.e. a bean that triggers conditional invocation of the, +	 * {@link CacheInterceptor} depending on the method and attributes passed., +	 * <p>Note: Additional interceptors are always invoked., +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheProxyFactoryBean.java, +	 * Set one or more sources to find cache operations., +	 * Set a pointcut, i.e. a bean that triggers conditional invocation of the, +	 * {@link CacheInterceptor} depending on the method and attributes passed., +	 * <p>Note: Additional interceptors are always invoked., +++ b/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java, +public class ReloadableResourceBundleMessageSource extends AbstractResourceBasedMessageSource, +		implements ResourceLoaderAware {, +	// Cache to hold filename lists per Locale, +	// Cache to hold already loaded properties per filename, +	// Cache to hold already loaded properties per filename, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheProxyFactoryBean.java, +	 * Set one or more sources to find cache operations., +	 * Set a pointcut, i.e. a bean that triggers conditional invocation of the, +	 * {@link CacheInterceptor} depending on the method and attributes passed., +	 * <p>Note: Additional interceptors are always invoked., +++ b/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java, +public class ReloadableResourceBundleMessageSource extends AbstractResourceBasedMessageSource, +		implements ResourceLoaderAware {, +	// Cache to hold filename lists per Locale, +	// Cache to hold already loaded properties per filename, +	// Cache to hold already loaded properties per filename, +++ b/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheProxyFactoryBean.java, +	 * Set one or more sources to find cache operations., +	 * Set a pointcut, i.e. a bean that triggers conditional invocation of the, +	 * {@link CacheInterceptor} depending on the method and attributes passed., +	 * <p>Note: Additional interceptors are always invoked., +++ b/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java, +public class ReloadableResourceBundleMessageSource extends AbstractResourceBasedMessageSource, +		implements ResourceLoaderAware {, +	// Cache to hold filename lists per Locale, +	// Cache to hold already loaded properties per filename, +	// Cache to hold already loaded properties per filename, +++ b/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/FunctionReference.java, +			// Two possibilities: a lambda function or a Java static method registered as a function, +		if (!method.isVarArgs()) {, +			int declaredParamCount = method.getParameterCount();, +			if (declaredParamCount != functionArgs.length) {, +						functionArgs.length, declaredParamCount);, +		}, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheProxyFactoryBean.java, +	 * Set one or more sources to find cache operations., +	 * Set a pointcut, i.e. a bean that triggers conditional invocation of the, +	 * {@link CacheInterceptor} depending on the method and attributes passed., +	 * <p>Note: Additional interceptors are always invoked., +++ b/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java, +public class ReloadableResourceBundleMessageSource extends AbstractResourceBasedMessageSource, +		implements ResourceLoaderAware {, +	// Cache to hold filename lists per Locale, +	// Cache to hold already loaded properties per filename, +	// Cache to hold already loaded properties per filename, +++ b/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/FunctionReference.java, +			// Two possibilities: a lambda function or a Java static method registered as a function, +		if (!method.isVarArgs()) {, +			int declaredParamCount = method.getParameterCount();, +			if (declaredParamCount != functionArgs.length) {, +						functionArgs.length, declaredParamCount);, +		}, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/SqlParameter.java, + * Copyright 2002-2018 the original author or authors., +	// The name of the parameter, if any, +	// SQL type constant from {@code java.sql.Types}, +	// Used for types that are user-named like: STRUCT, DISTINCT, JAVA_OBJECT, named array types, +	// The scale to apply in case of a NUMERIC or DECIMAL type, if any, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheProxyFactoryBean.java, +	 * Set one or more sources to find cache operations., +	 * Set a pointcut, i.e. a bean that triggers conditional invocation of the, +	 * {@link CacheInterceptor} depending on the method and attributes passed., +	 * <p>Note: Additional interceptors are always invoked., +++ b/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java, +public class ReloadableResourceBundleMessageSource extends AbstractResourceBasedMessageSource, +		implements ResourceLoaderAware {, +	// Cache to hold filename lists per Locale, +	// Cache to hold already loaded properties per filename, +	// Cache to hold already loaded properties per filename, +++ b/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/FunctionReference.java, +			// Two possibilities: a lambda function or a Java static method registered as a function, +		if (!method.isVarArgs()) {, +			int declaredParamCount = method.getParameterCount();, +			if (declaredParamCount != functionArgs.length) {, +						functionArgs.length, declaredParamCount);, +		}, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/SqlParameter.java, + * Copyright 2002-2018 the original author or authors., +	// The name of the parameter, if any, +	// SQL type constant from {@code java.sql.Types}, +	// Used for types that are user-named like: STRUCT, DISTINCT, JAVA_OBJECT, named array types, +	// The scale to apply in case of a NUMERIC or DECIMAL type, if any, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java, +	// Logger available to subclasses, +	// Name of procedure to call]