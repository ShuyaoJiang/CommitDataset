[+++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsMessagingTemplate.java, +	private boolean converterSet;, +, +		this.converterSet = true;, +		if (!this.converterSet && this.jmsTemplate.getMessageConverter() != null) {, +			((MessagingMessageConverter) this.jmsMessageConverter), +					.setPayloadConverter(this.jmsTemplate.getMessageConverter());, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsMessagingTemplate.java, +	private boolean converterSet;, +, +		this.converterSet = true;, +		if (!this.converterSet && this.jmsTemplate.getMessageConverter() != null) {, +			((MessagingMessageConverter) this.jmsMessageConverter), +					.setPayloadConverter(this.jmsTemplate.getMessageConverter());, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/support/converter/MessagingMessageConverter.java, +	 * Create an instance with the specific payload converter., +	 * @param payloadConverter the payload converter to use, +	 * @since 4.3.12, +	 */, +	public MessagingMessageConverter(MessageConverter payloadConverter) {, +		this(payloadConverter, new SimpleJmsHeaderMapper());, +	}, +, +	/**, +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsMessagingTemplate.java, +	private boolean converterSet;, +, +		this.converterSet = true;, +		if (!this.converterSet && this.jmsTemplate.getMessageConverter() != null) {, +			((MessagingMessageConverter) this.jmsMessageConverter), +					.setPayloadConverter(this.jmsTemplate.getMessageConverter());, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/support/converter/MessagingMessageConverter.java, +	 * Create an instance with the specific payload converter., +	 * @param payloadConverter the payload converter to use, +	 * @since 4.3.12, +	 */, +	public MessagingMessageConverter(MessageConverter payloadConverter) {, +		this(payloadConverter, new SimpleJmsHeaderMapper());, +	}, +, +	/**, +++ b/spring-jms/src/test/java/org/springframework/jms/core/JmsMessagingTemplateTests.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.beans.DirectFieldAccessor;, +import org.springframework.jms.support.converter.MessagingMessageConverter;, +	public void payloadConverterIsConsistentConstructor() {, +		MessageConverter messageConverter = mock(MessageConverter.class);, +		given(this.jmsTemplate.getMessageConverter()).willReturn(messageConverter);, +		JmsMessagingTemplate messagingTemplate = new JmsMessagingTemplate(this.jmsTemplate);, +		messagingTemplate.afterPropertiesSet();, +		assertPayloadConverter(messagingTemplate, messageConverter);, +	}, +, +	@Test, +	public void payloadConverterIsConsistentSetter() {, +		MessageConverter messageConverter = mock(MessageConverter.class);, +		given(this.jmsTemplate.getMessageConverter()).willReturn(messageConverter);, +		JmsMessagingTemplate messagingTemplate = new JmsMessagingTemplate();, +		messagingTemplate.setJmsTemplate(this.jmsTemplate);, +		messagingTemplate.afterPropertiesSet();, +		assertPayloadConverter(messagingTemplate, messageConverter);, +	}, +, +	@Test, +	public void customConverterAlwaysTakesPrecedence() {, +		MessageConverter messageConverter = mock(MessageConverter.class);, +		given(this.jmsTemplate.getMessageConverter()).willReturn(messageConverter);, +		MessageConverter customMessageConverter = mock(MessageConverter.class);, +		JmsMessagingTemplate messagingTemplate = new JmsMessagingTemplate();, +		messagingTemplate.setJmsMessageConverter(, +				new MessagingMessageConverter(customMessageConverter));, +		messagingTemplate.setJmsTemplate(this.jmsTemplate);, +		messagingTemplate.afterPropertiesSet();, +		assertPayloadConverter(messagingTemplate, customMessageConverter);, +	}, +, +	private void assertPayloadConverter(JmsMessagingTemplate messagingTemplate,, +			MessageConverter messageConverter) {, +		MessageConverter jmsMessageConverter = messagingTemplate.getJmsMessageConverter();, +		assertNotNull(jmsMessageConverter);, +		assertEquals(MessagingMessageConverter.class, jmsMessageConverter.getClass());, +		assertSame(messageConverter, new DirectFieldAccessor(jmsMessageConverter), +				.getPropertyValue("payloadConverter"));, +	}, +, +	@Test]