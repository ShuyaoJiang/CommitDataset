[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockServletContext.java, +			return this.mimeTypes.get(extension).toString();, +			return MediaTypeFactory.getMediaType(filePath).orElse(MediaType.APPLICATION_OCTET_STREAM).toString();, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockServletContext.java, +			return this.mimeTypes.get(extension).toString();, +			return MediaTypeFactory.getMediaType(filePath).orElse(MediaType.APPLICATION_OCTET_STREAM).toString();, +++ b/spring-web/src/main/java/org/springframework/http/MediaTypeFactory.java, +	public static Optional<MediaType> getMediaType(Resource resource) {, +		if (resource == null) {, +			return Optional.empty();, +		}, +		return (filename != null ? getMediaType(filename) : Optional.empty());, +	public static Optional<MediaType> getMediaType(String filename) {, +		return (!mediaTypes.isEmpty() ? Optional.of(mediaTypes.get(0)) : Optional.empty());, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockServletContext.java, +			return this.mimeTypes.get(extension).toString();, +			return MediaTypeFactory.getMediaType(filePath).orElse(MediaType.APPLICATION_OCTET_STREAM).toString();, +++ b/spring-web/src/main/java/org/springframework/http/MediaTypeFactory.java, +	public static Optional<MediaType> getMediaType(Resource resource) {, +		if (resource == null) {, +			return Optional.empty();, +		}, +		return (filename != null ? getMediaType(filename) : Optional.empty());, +	public static Optional<MediaType> getMediaType(String filename) {, +		return (!mediaTypes.isEmpty() ? Optional.of(mediaTypes.get(0)) : Optional.empty());, +++ b/spring-web/src/main/java/org/springframework/http/codec/ResourceHttpMessageWriter.java, +		return MediaTypeFactory.getMediaType(resource).orElse(MediaType.APPLICATION_OCTET_STREAM);, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockServletContext.java, +			return this.mimeTypes.get(extension).toString();, +			return MediaTypeFactory.getMediaType(filePath).orElse(MediaType.APPLICATION_OCTET_STREAM).toString();, +++ b/spring-web/src/main/java/org/springframework/http/MediaTypeFactory.java, +	public static Optional<MediaType> getMediaType(Resource resource) {, +		if (resource == null) {, +			return Optional.empty();, +		}, +		return (filename != null ? getMediaType(filename) : Optional.empty());, +	public static Optional<MediaType> getMediaType(String filename) {, +		return (!mediaTypes.isEmpty() ? Optional.of(mediaTypes.get(0)) : Optional.empty());, +++ b/spring-web/src/main/java/org/springframework/http/codec/ResourceHttpMessageWriter.java, +		return MediaTypeFactory.getMediaType(resource).orElse(MediaType.APPLICATION_OCTET_STREAM);, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, +		return MediaTypeFactory.getMediaType(resource).orElse(MediaType.APPLICATION_OCTET_STREAM);, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockServletContext.java, +			return this.mimeTypes.get(extension).toString();, +			return MediaTypeFactory.getMediaType(filePath).orElse(MediaType.APPLICATION_OCTET_STREAM).toString();, +++ b/spring-web/src/main/java/org/springframework/http/MediaTypeFactory.java, +	public static Optional<MediaType> getMediaType(Resource resource) {, +		if (resource == null) {, +			return Optional.empty();, +		}, +		return (filename != null ? getMediaType(filename) : Optional.empty());, +	public static Optional<MediaType> getMediaType(String filename) {, +		return (!mediaTypes.isEmpty() ? Optional.of(mediaTypes.get(0)) : Optional.empty());, +++ b/spring-web/src/main/java/org/springframework/http/codec/ResourceHttpMessageWriter.java, +		return MediaTypeFactory.getMediaType(resource).orElse(MediaType.APPLICATION_OCTET_STREAM);, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, +		return MediaTypeFactory.getMediaType(resource).orElse(MediaType.APPLICATION_OCTET_STREAM);, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceRegionHttpMessageConverter.java, +		return MediaTypeFactory.getMediaType(resource).orElse(MediaType.APPLICATION_OCTET_STREAM);, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockServletContext.java, +			return this.mimeTypes.get(extension).toString();, +			return MediaTypeFactory.getMediaType(filePath).orElse(MediaType.APPLICATION_OCTET_STREAM).toString();, +++ b/spring-web/src/main/java/org/springframework/http/MediaTypeFactory.java, +	public static Optional<MediaType> getMediaType(Resource resource) {, +		if (resource == null) {, +			return Optional.empty();, +		}, +		return (filename != null ? getMediaType(filename) : Optional.empty());, +	public static Optional<MediaType> getMediaType(String filename) {, +		return (!mediaTypes.isEmpty() ? Optional.of(mediaTypes.get(0)) : Optional.empty());, +++ b/spring-web/src/main/java/org/springframework/http/codec/ResourceHttpMessageWriter.java, +		return MediaTypeFactory.getMediaType(resource).orElse(MediaType.APPLICATION_OCTET_STREAM);, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, +		return MediaTypeFactory.getMediaType(resource).orElse(MediaType.APPLICATION_OCTET_STREAM);, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceRegionHttpMessageConverter.java, +		return MediaTypeFactory.getMediaType(resource).orElse(MediaType.APPLICATION_OCTET_STREAM);, +++ b/spring-web/src/main/java/org/springframework/web/accept/PathExtensionContentNegotiationStrategy.java, +import java.util.Optional;, +		Optional<MediaType> mediaType = MediaTypeFactory.getMediaType("file." + extension);, +		if (mediaType.isPresent()) {, +			return mediaType.get();, +			mediaType = MediaTypeFactory.getMediaType(filename).orElse(null);, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockServletContext.java, +			return this.mimeTypes.get(extension).toString();, +			return MediaTypeFactory.getMediaType(filePath).orElse(MediaType.APPLICATION_OCTET_STREAM).toString();, +++ b/spring-web/src/main/java/org/springframework/http/MediaTypeFactory.java, +	public static Optional<MediaType> getMediaType(Resource resource) {, +		if (resource == null) {, +			return Optional.empty();, +		}, +		return (filename != null ? getMediaType(filename) : Optional.empty());, +	public static Optional<MediaType> getMediaType(String filename) {, +		return (!mediaTypes.isEmpty() ? Optional.of(mediaTypes.get(0)) : Optional.empty());, +++ b/spring-web/src/main/java/org/springframework/http/codec/ResourceHttpMessageWriter.java, +		return MediaTypeFactory.getMediaType(resource).orElse(MediaType.APPLICATION_OCTET_STREAM);, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, +		return MediaTypeFactory.getMediaType(resource).orElse(MediaType.APPLICATION_OCTET_STREAM);, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceRegionHttpMessageConverter.java, +		return MediaTypeFactory.getMediaType(resource).orElse(MediaType.APPLICATION_OCTET_STREAM);, +++ b/spring-web/src/main/java/org/springframework/web/accept/PathExtensionContentNegotiationStrategy.java]