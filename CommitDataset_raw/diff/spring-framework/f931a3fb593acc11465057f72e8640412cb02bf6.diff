[+++ b/spring-core/src/main/java/org/springframework/util/unit/DataSize.java, +	private static final Pattern PATTERN = Pattern.compile("^([+\\-]?\\d+)([a-zA-Z]{0,2})$");, +	 * @param bytes the number of bytes, positive or negative, +	 * @param kiloBytes the number of kilobytes, positive or negative, +	 * @param megaBytes the number of megabytes, positive or negative, +	 * @param gigaBytes the number of gigabytes, positive or negative, +	 * @param teraBytes the number of terabytes, positive or negative, +	 * @param amount the amount of the size, measured in terms of the unit, positive or, +	 * negative, +	 * Checks if this size is negative, excluding zero., +	 * @return true if this size has a size less than zero bytes, +	 */, +	public boolean isNegative() {, +		return this.bytes < 0;, +	}, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/util/unit/DataSize.java, +	private static final Pattern PATTERN = Pattern.compile("^([+\\-]?\\d+)([a-zA-Z]{0,2})$");, +	 * @param bytes the number of bytes, positive or negative, +	 * @param kiloBytes the number of kilobytes, positive or negative, +	 * @param megaBytes the number of megabytes, positive or negative, +	 * @param gigaBytes the number of gigabytes, positive or negative, +	 * @param teraBytes the number of terabytes, positive or negative, +	 * @param amount the amount of the size, measured in terms of the unit, positive or, +	 * negative, +	 * Checks if this size is negative, excluding zero., +	 * @return true if this size has a size less than zero bytes, +	 */, +	public boolean isNegative() {, +		return this.bytes < 0;, +	}, +, +	/**, +++ b/spring-core/src/test/java/org/springframework/util/unit/DataSizeTests.java, +	public void parseNegativeNumberWithDefaultUnitUsesBytes() {, +		assertEquals(DataSize.ofBytes(-1), DataSize.parse("-1"));, +	}, +, +	@Test, +	public void parseNegativeNumberWithNullDefaultUnitUsesBytes() {, +		assertEquals(DataSize.ofKiloBytes(-1), DataSize.parse("-1024", null));, +	}, +, +	@Test, +	public void parseNegativeNumberWithCustomDefaultUnit() {, +		assertEquals(DataSize.ofKiloBytes(-1), DataSize.parse("-1", DataUnit.KILOBYTES));, +	}, +, +	@Test, +	public void parseWithNegativeBytes() {, +		assertEquals(DataSize.ofKiloBytes(-1), DataSize.parse("-1024B"));, +	}, +, +	@Test, +	public void parseWithPostivieBytes() {, +		assertEquals(DataSize.ofKiloBytes(1), DataSize.parse("+1024B"));, +	}, +, +	@Test, +	public void parseWithNegativeKiloBytes() {, +		assertEquals(DataSize.ofBytes(-1024), DataSize.parse("-1KB"));, +	}, +, +	@Test, +	public void parseWithNegativeMegaBytes() {, +		assertEquals(DataSize.ofMegaBytes(-4), DataSize.parse("-4MB"));, +	}, +, +	@Test, +	public void parseWithNegativeGigaBytes() {, +		assertEquals(DataSize.ofMegaBytes(-1024), DataSize.parse("-1GB"));, +	}, +, +	@Test, +	public void parseWithNegativeTeraBytes() {, +		assertEquals(DataSize.ofTeraBytes(-1), DataSize.parse("-1TB"));, +	}, +, +	@Test, +	public void isNegativeWithPositive() {, +		assertFalse(DataSize.ofBytes(50).isNegative());, +	}, +, +	@Test, +	public void isNegativeWithZero() {, +		assertFalse(DataSize.ofBytes(0).isNegative());, +	}, +, +	@Test, +	public void isNegativeWithNegative() {, +		assertTrue(DataSize.ofBytes(-1).isNegative());, +	}, +, +	@Test, +	public void toStringWithNegativeBytes() {, +		assertEquals("-1024B", DataSize.ofKiloBytes(-1).toString());, +	}, +, +	@Test]