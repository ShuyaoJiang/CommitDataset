[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.context.ApplicationContextAware;, +	private List<Object> controllerAdvice;, +, +	private List<HandlerExceptionResolver> handlerExceptionResolvers;, +	 * Register {@link org.springframework.web.bind.annotation.ControllerAdvice, +	 * ControllerAdvice} instances to be used with this MockMvc instance., +	 * <p>Normally {@code @ControllerAdvice} are auto-detected. However since the, +	 * standalone setup does not load Spring configuration they need to be, +	 * registered explicitly instead., +	 * @since 4.2, +	 */, +	public StandaloneMockMvcBuilder setControllerAdvice(Object... controllerAdvice) {, +		this.controllerAdvice = Arrays.asList(controllerAdvice);, +		return this;, +	}, +, +	/**, +		config.setApplicationContext(wac);, +, +		wac.addBeans(this.controllerAdvice);, +			if (handlerExceptionResolvers == null) {, +				return;, +			}, +			for (HandlerExceptionResolver resolver : handlerExceptionResolvers) {, +				if (resolver instanceof ApplicationContextAware) {, +					((ApplicationContextAware) resolver).setApplicationContext(getApplicationContext());, +				}, +				if (resolver instanceof InitializingBean) {, +					try {, +						((InitializingBean) resolver).afterPropertiesSet();, +					}, +					catch (Exception ex) {, +						throw new IllegalStateException("Failure from afterPropertiesSet", ex);, +					}, +				}, +				exceptionResolvers.add(resolver);, +			}, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.context.ApplicationContextAware;, +	private List<Object> controllerAdvice;, +, +	private List<HandlerExceptionResolver> handlerExceptionResolvers;, +	 * Register {@link org.springframework.web.bind.annotation.ControllerAdvice, +	 * ControllerAdvice} instances to be used with this MockMvc instance., +	 * <p>Normally {@code @ControllerAdvice} are auto-detected. However since the, +	 * standalone setup does not load Spring configuration they need to be, +	 * registered explicitly instead., +	 * @since 4.2, +	 */, +	public StandaloneMockMvcBuilder setControllerAdvice(Object... controllerAdvice) {, +		this.controllerAdvice = Arrays.asList(controllerAdvice);, +		return this;, +	}, +, +	/**, +		config.setApplicationContext(wac);, +, +		wac.addBeans(this.controllerAdvice);, +			if (handlerExceptionResolvers == null) {, +				return;, +			}, +			for (HandlerExceptionResolver resolver : handlerExceptionResolvers) {, +				if (resolver instanceof ApplicationContextAware) {, +					((ApplicationContextAware) resolver).setApplicationContext(getApplicationContext());, +				}, +				if (resolver instanceof InitializingBean) {, +					try {, +						((InitializingBean) resolver).afterPropertiesSet();, +					}, +					catch (Exception ex) {, +						throw new IllegalStateException("Failure from afterPropertiesSet", ex);, +					}, +				}, +				exceptionResolvers.add(resolver);, +			}, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StubWebApplicationContext.java, +		if (beans == null) {, +			return;, +		}, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.context.ApplicationContextAware;, +	private List<Object> controllerAdvice;, +, +	private List<HandlerExceptionResolver> handlerExceptionResolvers;, +	 * Register {@link org.springframework.web.bind.annotation.ControllerAdvice, +	 * ControllerAdvice} instances to be used with this MockMvc instance., +	 * <p>Normally {@code @ControllerAdvice} are auto-detected. However since the, +	 * standalone setup does not load Spring configuration they need to be, +	 * registered explicitly instead., +	 * @since 4.2, +	 */, +	public StandaloneMockMvcBuilder setControllerAdvice(Object... controllerAdvice) {, +		this.controllerAdvice = Arrays.asList(controllerAdvice);, +		return this;, +	}, +]