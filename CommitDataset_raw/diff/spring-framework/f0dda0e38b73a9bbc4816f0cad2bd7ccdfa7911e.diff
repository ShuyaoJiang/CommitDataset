[+++ b/build.gradle, +		optional("org.eclipse.jetty.websocket:websocket-server:9.0.5.v20130815"), +		optional("org.eclipse.jetty.websocket:websocket-client:9.0.5.v20130815"), +		testCompile("org.slf4j:slf4j-jcl:${slf4jVersion}"), +		testCompile("log4j:log4j:1.2.17"), +++ b/build.gradle, +		optional("org.eclipse.jetty.websocket:websocket-server:9.0.5.v20130815"), +		optional("org.eclipse.jetty.websocket:websocket-client:9.0.5.v20130815"), +		testCompile("org.slf4j:slf4j-jcl:${slf4jVersion}"), +		testCompile("log4j:log4j:1.2.17"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/websocket/SubProtocolWebSocketHandler.java, +, +	/**, +	 * Return all supported protocols., +	 */, +	public Set<String> getSupportedProtocols() {, +		return this.protocolHandlers.keySet();, +	}, +++ b/build.gradle, +		optional("org.eclipse.jetty.websocket:websocket-server:9.0.5.v20130815"), +		optional("org.eclipse.jetty.websocket:websocket-client:9.0.5.v20130815"), +		testCompile("org.slf4j:slf4j-jcl:${slf4jVersion}"), +		testCompile("log4j:log4j:1.2.17"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/websocket/SubProtocolWebSocketHandler.java, +, +	/**, +	 * Return all supported protocols., +	 */, +	public Set<String> getSupportedProtocols() {, +		return this.protocolHandlers.keySet();, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/StompEndpointRegistration.java, +import java.util.Set;, +import org.springframework.util.ObjectUtils;, +	private HandshakeHandler handshakeHandler;, +, +	private final TaskScheduler defaultSockJsTaskScheduler;, +	public StompEndpointRegistration(Collection<String> paths, SubProtocolWebSocketHandler webSocketHandler,, +			TaskScheduler defaultSockJsTaskScheduler) {, +, +		this.defaultSockJsTaskScheduler = defaultSockJsTaskScheduler;, +	public StompEndpointRegistration setHandshakeHandler(HandshakeHandler handshakeHandler) {, +		this.handshakeHandler = handshakeHandler;, +		return this;, +		this.sockJsServiceRegistration = new StompSockJsServiceRegistration(this.defaultSockJsTaskScheduler);, +		if (this.sockJsServiceRegistration == null) {, +			HandshakeHandler handshakeHandler = getOrCreateHandshakeHandler();, +			for (String path : this.paths) {, +			SockJsService sockJsService = this.sockJsServiceRegistration.getSockJsService();, +	private HandshakeHandler getOrCreateHandshakeHandler() {, +, +		HandshakeHandler handler = (this.handshakeHandler != null), +				? this.handshakeHandler : new DefaultHandshakeHandler();, +, +		if (handler instanceof DefaultHandshakeHandler) {, +			DefaultHandshakeHandler defaultHandshakeHandler = (DefaultHandshakeHandler) handler;, +			if (ObjectUtils.isEmpty(defaultHandshakeHandler.getSupportedProtocols())) {, +				Set<String> protocols = this.wsHandler.getSupportedProtocols();, +				defaultHandshakeHandler.setSupportedProtocols(protocols.toArray(new String[protocols.size()]));, +			}, +		}, +, +		return handler;, +			return super.getSockJsService(paths.toArray(new String[paths.size()]));, +++ b/build.gradle, +		optional("org.eclipse.jetty.websocket:websocket-server:9.0.5.v20130815"), +		optional("org.eclipse.jetty.websocket:websocket-client:9.0.5.v20130815"), +		testCompile("org.slf4j:slf4j-jcl:${slf4jVersion}"), +		testCompile("log4j:log4j:1.2.17"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/websocket/SubProtocolWebSocketHandler.java, +, +	/**, +	 * Return all supported protocols., +	 */, +	public Set<String> getSupportedProtocols() {, +		return this.protocolHandlers.keySet();, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/StompEndpointRegistration.java, +import java.util.Set;, +import org.springframework.util.ObjectUtils;, +	private HandshakeHandler handshakeHandler;, +, +	private final TaskScheduler defaultSockJsTaskScheduler;, +	public StompEndpointRegistration(Collection<String> paths, SubProtocolWebSocketHandler webSocketHandler,, +			TaskScheduler defaultSockJsTaskScheduler) {, +, +		this.defaultSockJsTaskScheduler = defaultSockJsTaskScheduler;, +	public StompEndpointRegistration setHandshakeHandler(HandshakeHandler handshakeHandler) {, +		this.handshakeHandler = handshakeHandler;, +		return this;, +		this.sockJsServiceRegistration = new StompSockJsServiceRegistration(this.defaultSockJsTaskScheduler);, +		if (this.sockJsServiceRegistration == null) {, +			HandshakeHandler handshakeHandler = getOrCreateHandshakeHandler();, +			for (String path : this.paths) {, +			SockJsService sockJsService = this.sockJsServiceRegistration.getSockJsService();, +	private HandshakeHandler getOrCreateHandshakeHandler() {, +, +		HandshakeHandler handler = (this.handshakeHandler != null), +				? this.handshakeHandler : new DefaultHandshakeHandler();, +]