[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, +	private static final EvaluationContext messageEvalContext =, +		this.selectorHeaderName = (StringUtils.hasText(selectorHeaderName) ? selectorHeaderName : null);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, +	private static final EvaluationContext messageEvalContext =, +		this.selectorHeaderName = (StringUtils.hasText(selectorHeaderName) ? selectorHeaderName : null);, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * Return the value of the {@code Host} header, if available., +	 * <p>If the header value does not contain a port, the, +	 * {@linkplain InetSocketAddress#getPort() port} in the returned address will, +	 * be {@code 0}., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, +	private static final EvaluationContext messageEvalContext =, +		this.selectorHeaderName = (StringUtils.hasText(selectorHeaderName) ? selectorHeaderName : null);, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * Return the value of the {@code Host} header, if available., +	 * <p>If the header value does not contain a port, the, +	 * {@linkplain InetSocketAddress#getPort() port} in the returned address will, +	 * be {@code 0}., +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchange.java, +		Assert.notNull(value, () -> "Required attribute '" + name + "' is missing");, +	 * {@link org.springframework.web.server.adapter.WebHttpHandlerBuilder#applicationContext}., +	 * @see org.springframework.web.server.adapter.WebHttpHandlerBuilder#applicationContext, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, +	private static final EvaluationContext messageEvalContext =, +		this.selectorHeaderName = (StringUtils.hasText(selectorHeaderName) ? selectorHeaderName : null);, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * Return the value of the {@code Host} header, if available., +	 * <p>If the header value does not contain a port, the, +	 * {@linkplain InetSocketAddress#getPort() port} in the returned address will, +	 * be {@code 0}., +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchange.java, +		Assert.notNull(value, () -> "Required attribute '" + name + "' is missing");, +	 * {@link org.springframework.web.server.adapter.WebHttpHandlerBuilder#applicationContext}., +	 * @see org.springframework.web.server.adapter.WebHttpHandlerBuilder#applicationContext, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyInserters.java, +		Assert.notNull(publisher, "Publisher must not be null");, +		Assert.notNull(elementClass, "Element Class must not be null");, +	 * @param typeReference the type of elements contained in the publisher, +			P publisher, ParameterizedTypeReference<T> typeReference) {, +		Assert.notNull(publisher, "Publisher must not be null");, +		Assert.notNull(typeReference, "ParameterizedTypeReference must not be null");, +				writeWithMessageWriters(message, context, publisher, ResolvableType.forType(typeReference.getType()));, +		Assert.notNull(resource, "Resource must not be null");, +		Assert.notNull(eventsPublisher, "Publisher must not be null");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, +	private static final EvaluationContext messageEvalContext =, +		this.selectorHeaderName = (StringUtils.hasText(selectorHeaderName) ? selectorHeaderName : null);, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * Return the value of the {@code Host} header, if available., +	 * <p>If the header value does not contain a port, the, +	 * {@linkplain InetSocketAddress#getPort() port} in the returned address will, +	 * be {@code 0}., +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchange.java, +		Assert.notNull(value, () -> "Required attribute '" + name + "' is missing");, +	 * {@link org.springframework.web.server.adapter.WebHttpHandlerBuilder#applicationContext}., +	 * @see org.springframework.web.server.adapter.WebHttpHandlerBuilder#applicationContext, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyInserters.java, +		Assert.notNull(publisher, "Publisher must not be null");, +		Assert.notNull(elementClass, "Element Class must not be null");, +	 * @param typeReference the type of elements contained in the publisher, +			P publisher, ParameterizedTypeReference<T> typeReference) {, +		Assert.notNull(publisher, "Publisher must not be null");, +		Assert.notNull(typeReference, "ParameterizedTypeReference must not be null");, +				writeWithMessageWriters(message, context, publisher, ResolvableType.forType(typeReference.getType()));, +		Assert.notNull(resource, "Resource must not be null");, +		Assert.notNull(eventsPublisher, "Publisher must not be null");, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +	 * Write this request to the given {@link ClientHttpRequest}., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, +	private static final EvaluationContext messageEvalContext =, +		this.selectorHeaderName = (StringUtils.hasText(selectorHeaderName) ? selectorHeaderName : null);, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * Return the value of the {@code Host} header, if available., +	 * <p>If the header value does not contain a port, the, +	 * {@linkplain InetSocketAddress#getPort() port} in the returned address will, +	 * be {@code 0}., +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchange.java, +		Assert.notNull(value, () -> "Required attribute '" + name + "' is missing");, +	 * {@link org.springframework.web.server.adapter.WebHttpHandlerBuilder#applicationContext}., +	 * @see org.springframework.web.server.adapter.WebHttpHandlerBuilder#applicationContext, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyInserters.java, +		Assert.notNull(publisher, "Publisher must not be null");, +		Assert.notNull(elementClass, "Element Class must not be null");, +	 * @param typeReference the type of elements contained in the publisher, +			P publisher, ParameterizedTypeReference<T> typeReference) {, +		Assert.notNull(publisher, "Publisher must not be null");, +		Assert.notNull(typeReference, "ParameterizedTypeReference must not be null");, +				writeWithMessageWriters(message, context, publisher, ResolvableType.forType(typeReference.getType()));, +		Assert.notNull(resource, "Resource must not be null");, +		Assert.notNull(eventsPublisher, "Publisher must not be null");, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +	 * Write this request to the given {@link ClientHttpRequest}., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java, +	public DefaultClientRequestBuilder(HttpMethod method, URI url) {, +		Assert.notNull(method, "HttpMethod must not be null");, +		Assert.notNull(url, "URI must not be null");, +		this.method = method;, +		this.url = url;, +	}]