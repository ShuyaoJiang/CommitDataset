[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		if (FactoryBean.class.equals(beanClass) && mbd.isSingleton() &&, +				(typesToMatch.length > 1 || (typesToMatch.length == 1 && !typesToMatch[0].equals(FactoryBean.class)))) {, +			return getSingletonFactoryBeanForTypeCheck(beanName, mbd).getClass();, +		}, +			if (Modifier.isStatic(factoryMethod.getModifiers()) == isStatic &&, +					factoryMethod.getName().equals(mbd.getFactoryMethodName()) &&, +					factoryMethod.getParameterTypes().length >= minNrOfArgs) {, +				// Find the given factory method, taking into account that in the case of, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		if (FactoryBean.class.equals(beanClass) && mbd.isSingleton() &&, +				(typesToMatch.length > 1 || (typesToMatch.length == 1 && !typesToMatch[0].equals(FactoryBean.class)))) {, +			return getSingletonFactoryBeanForTypeCheck(beanName, mbd).getClass();, +		}, +			if (Modifier.isStatic(factoryMethod.getModifiers()) == isStatic &&, +					factoryMethod.getName().equals(mbd.getFactoryMethodName()) &&, +					factoryMethod.getParameterTypes().length >= minNrOfArgs) {, +				// Find the given factory method, taking into account that in the case of, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +import org.springframework.context.weaving.LoadTimeWeaverAware;, +		// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early., +		String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, true);, +		for (String weaverAwareName : weaverAwareNames) {, +			getBean(weaverAwareName);, +		}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		if (FactoryBean.class.equals(beanClass) && mbd.isSingleton() &&, +				(typesToMatch.length > 1 || (typesToMatch.length == 1 && !typesToMatch[0].equals(FactoryBean.class)))) {, +			return getSingletonFactoryBeanForTypeCheck(beanName, mbd).getClass();, +		}, +			if (Modifier.isStatic(factoryMethod.getModifiers()) == isStatic &&, +					factoryMethod.getName().equals(mbd.getFactoryMethodName()) &&, +					factoryMethod.getParameterTypes().length >= minNrOfArgs) {, +				// Find the given factory method, taking into account that in the case of, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +import org.springframework.context.weaving.LoadTimeWeaverAware;, +		// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early., +		String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, true);, +		for (String weaverAwareName : weaverAwareNames) {, +			getBean(weaverAwareName);, +		}, +, +++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassProcessingTests.java, + * Copyright 2002-2012 the original author or authors., +import java.util.Arrays;, +import java.util.List;, +import test.beans.ITestBean;, +import test.beans.TestBean;, +, +import org.springframework.beans.factory.BeanClassLoaderAware;, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.beans.factory.ListableBeanFactory;, +import org.springframework.beans.factory.config.ListFactoryBean;, +import static org.junit.Assert.*;, +	private ListableBeanFactory initBeanFactory(Class<?>... configClasses) {, +	public void configWithObjectReturnType() {, +		BeanFactory factory = initBeanFactory(ConfigWithNonSpecificReturnTypes.class);, +		assertEquals(Object.class, factory.getType("stringBean"));, +		assertFalse(factory.isTypeMatch("stringBean", String.class));, +		String stringBean = factory.getBean("stringBean", String.class);, +		assertEquals(stringBean, "foo");, +	}, +, +	@Test, +	public void configWithFactoryBeanReturnType() {, +		ListableBeanFactory factory = initBeanFactory(ConfigWithNonSpecificReturnTypes.class);, +		assertEquals(List.class, factory.getType("factoryBean"));, +		assertTrue(factory.isTypeMatch("factoryBean", List.class));, +		assertEquals(FactoryBean.class, factory.getType("&factoryBean"));, +		assertTrue(factory.isTypeMatch("&factoryBean", FactoryBean.class));, +		assertTrue(factory.isTypeMatch("&factoryBean", BeanClassLoaderAware.class));, +		assertTrue(factory.isTypeMatch("&factoryBean", ListFactoryBean.class));, +		assertTrue(factory.getBean("factoryBean") instanceof List);, +, +		String[] beanNames = factory.getBeanNamesForType(FactoryBean.class);, +		assertEquals(1, beanNames.length);, +		assertEquals("&factoryBean", beanNames[0]);, +, +		beanNames = factory.getBeanNamesForType(BeanClassLoaderAware.class);, +		assertEquals(1, beanNames.length);, +		assertEquals("&factoryBean", beanNames[0]);, +, +		beanNames = factory.getBeanNamesForType(ListFactoryBean.class);, +		assertEquals(1, beanNames.length);, +		assertEquals("&factoryBean", beanNames[0]);, +, +		beanNames = factory.getBeanNamesForType(List.class);, +		assertEquals("factoryBean", beanNames[0]);, +	}, +, +	@Test, +	static class ConfigWithNonSpecificReturnTypes {, +		public @Bean Object stringBean() {, +			return "foo";, +		}, +		public @Bean FactoryBean factoryBean() {, +			ListFactoryBean fb = new ListFactoryBean();, +			fb.setSourceList(Arrays.asList("element1", "element2"));, +			return fb;]