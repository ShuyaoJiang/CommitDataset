[+++ b/src/reference/docbook/new-in-3.2.xml, +        <para>Configuring <link, +        linkend="testcontext-ctx-management-ctx-hierarchies">context hierarchies</link>, +        in integration tests</para>, +      </listitem>, +, +      <listitem>, +++ b/src/reference/docbook/new-in-3.2.xml, +        <para>Configuring <link, +        linkend="testcontext-ctx-management-ctx-hierarchies">context hierarchies</link>, +        in integration tests</para>, +      </listitem>, +, +      <listitem>, +++ b/src/reference/docbook/testing.xml, +        <para>See <xref linkend="testcontext-ctx-management"/> and <xref, +        linkend="testcontext-ctx-management-caching"/> with the TestContext, +        framework.</para>, +            <para>See <xref linkend="testcontext-ctx-management"/> and the, +            Javadoc for <interfacename>@ContextConfiguration</interfacename> for, +            further details.</para>, +            <interfacename>@ContextHierarchy</interfacename></emphasis></para>, +, +            <para>A class-level annotation that is used to define a hierarchy of, +            <interfacename>ApplicationContext</interfacename>s for integration, +            tests. <interfacename>@ContextHierarchy</interfacename> should be, +            declared with a list of one or more, +            <interfacename>@ContextConfiguration</interfacename> instances, each, +            of which defines a level in the context hierarchy. The following, +            examples demonstrate the use of, +            <interfacename>@ContextHierarchy</interfacename> within a single, +            test class; however,, +            <interfacename>@ContextHierarchy</interfacename> can also be used, +            within a test class hierarchy.</para>, +, +            <programlisting language="java">@ContextHierarchy({, +    @ContextConfiguration("/parent-config.xml"),, +    @ContextConfiguration("/child-config.xml"), +}), +public class ContextHierarchyTests {, +    <lineannotation>// class body...</lineannotation>, +}</programlisting>, +, +            <programlisting language="java">@WebAppConfiguration, +@ContextHierarchy({, +    @ContextConfiguration(classes = AppConfig.class),, +    @ContextConfiguration(classes = WebConfig.class), +}), +public class WebIntegrationTests {, +    <lineannotation>// class body...</lineannotation>, +}</programlisting>, +, +            <para>If you need to merge or override the configuration for a given, +            level of the context hierarchy within a test class hierarchy, you, +            must explicitly name that level by supplying the same value to the, +            <varname>name</varname> attribute in, +            <interfacename>@ContextConfiguration</interfacename> at each, +            corresponding level in the class hierarchy. See <xref, +            linkend="testcontext-ctx-management-ctx-hierarchies"/> and the, +            Javadoc for <interfacename>@ContextHierarchy</interfacename> for, +            further examples.</para>, +          </listitem>, +, +          <listitem>, +            <para><emphasis role="bold">, +            <para>See <xref linkend="testcontext-ctx-management-env-profiles"/>, +            and the Javadoc for <interfacename>@ActiveProfiles</interfacename>, +            for examples and further details.</para>, +            <emphasis>dirtied</emphasis> during the execution of a test (i.e.,, +            modified or corrupted in some manner â€” for example, by changing the, +            state of a singleton bean) and should be closed, regardless of, +            whether the test passed. When an application context is marked, +            <emphasis>dirty</emphasis>, it is removed from the testing, +            framework's cache and closed. As a consequence, the underlying, +            Spring container will be rebuilt for any subsequent test that, +            requires a context with the same configuration metadata.</para>, +, +            <para><interfacename>@DirtiesContext</interfacename> can be used as, +            both a class-level and method-level annotation within the same test, +            class. In such scenarios, the, +            <interfacename>ApplicationContext</interfacename> is marked as, +            <emphasis>dirty</emphasis> after any such annotated method as well, +            as after the entire class. If the <classname>ClassMode</classname>, +            is set to <literal>AFTER_EACH_TEST_METHOD</literal>, the context is, +            marked dirty after each test method in the class.</para>, +, +            <para>The following examples explain when the context would be, +            dirtied for various configuration scenarios:</para>, +                with class mode set to <literal>AFTER_CLASS</literal> (i.e., the, +                default class mode).</para>, +              </listitem>, +              <listitem>, +                <para>After each test method in the current test class, when, +                declared on a class with class mode set to, +                <literal>AFTER_EACH_TEST_METHOD.</literal><programlisting, +                language="java"><emphasis role="bold">@DirtiesContext</emphasis>(<emphasis, +}</programlisting></para>, +              </listitem>, +, +              <listitem>]