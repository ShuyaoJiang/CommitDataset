[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeFilterFunctions.java, +import java.util.function.Predicate;, +import org.springframework.http.HttpStatus;, +	/**, +	 * Return a filter that returns a given {@link Throwable} as response if the given, +	 * {@link HttpStatus} predicate matches., +	 * @param statusPredicate the predicate that should match the, +	 * {@linkplain ClientResponse#statusCode() response status}, +	 * @param exceptionFunction the function that returns the exception, +	 * @return the {@link ExchangeFilterFunction} that returns the given exception if the predicate, +	 * matches, +	 */, +	public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate,, +			Function<ClientResponse, ? extends Throwable> exceptionFunction) {, +, +		Assert.notNull(statusPredicate, "'statusPredicate' must not be null");, +		Assert.notNull(exceptionFunction, "'exceptionFunction' must not be null");, +, +		return ExchangeFilterFunction.ofResponseProcessor(, +				clientResponse -> {, +					if (statusPredicate.test(clientResponse.statusCode())) {, +						return Mono.error(exceptionFunction.apply(clientResponse));, +					}, +					else {, +						return Mono.just(clientResponse);, +					}, +				}, +		);, +	}, +, +, +	private static final class Credentials {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeFilterFunctions.java, +import java.util.function.Predicate;, +import org.springframework.http.HttpStatus;, +	/**, +	 * Return a filter that returns a given {@link Throwable} as response if the given, +	 * {@link HttpStatus} predicate matches., +	 * @param statusPredicate the predicate that should match the, +	 * {@linkplain ClientResponse#statusCode() response status}, +	 * @param exceptionFunction the function that returns the exception, +	 * @return the {@link ExchangeFilterFunction} that returns the given exception if the predicate, +	 * matches, +	 */, +	public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate,, +			Function<ClientResponse, ? extends Throwable> exceptionFunction) {, +, +		Assert.notNull(statusPredicate, "'statusPredicate' must not be null");, +		Assert.notNull(exceptionFunction, "'exceptionFunction' must not be null");, +, +		return ExchangeFilterFunction.ofResponseProcessor(, +				clientResponse -> {, +					if (statusPredicate.test(clientResponse.statusCode())) {, +						return Mono.error(exceptionFunction.apply(clientResponse));, +					}, +					else {, +						return Mono.just(clientResponse);, +					}, +				}, +		);, +	}, +, +, +	private static final class Credentials {, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/ExchangeFilterFunctionsTests.java, +import reactor.test.StepVerifier;, +import org.springframework.http.HttpStatus;, +	@Test, +	public void statusHandlerMatch() throws Exception {, +		ClientRequest request = ClientRequest.method(GET, URI.create("http://example.com")).build();, +		ClientResponse response = mock(ClientResponse.class);, +		when(response.statusCode()).thenReturn(HttpStatus.NOT_FOUND);, +, +		ExchangeFunction exchange = r -> Mono.just(response);, +, +		ExchangeFilterFunction errorHandler = ExchangeFilterFunctions.statusError(, +				HttpStatus::is4xxClientError, r -> new MyException());, +, +		Mono<ClientResponse> result = errorHandler.filter(request, exchange);, +, +		StepVerifier.create(result), +				.expectError(MyException.class), +				.verify();, +	}, +, +	@Test, +	public void statusHandlerNoMatch() throws Exception {, +		ClientRequest request = ClientRequest.method(GET, URI.create("http://example.com")).build();, +		ClientResponse response = mock(ClientResponse.class);, +		when(response.statusCode()).thenReturn(HttpStatus.NOT_FOUND);, +, +		ExchangeFunction exchange = r -> Mono.just(response);, +, +		ExchangeFilterFunction errorHandler = ExchangeFilterFunctions.statusError(, +				HttpStatus::is5xxServerError, r -> new MyException());, +, +		Mono<ClientResponse> result = errorHandler.filter(request, exchange);, +, +		StepVerifier.create(result), +				.expectNext(response)]