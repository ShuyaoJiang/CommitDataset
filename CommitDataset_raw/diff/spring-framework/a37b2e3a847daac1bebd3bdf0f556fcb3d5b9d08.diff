[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +import reactor.core.publisher.Mono;, +	 * @return {@code Mono} to represent when and if rendering succeeds, +	public Mono<Void> render(HandlerResult result, MediaType contentType,, +	 * @return {@code Mono} to represent when and if rendering succeeds, +	protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +import reactor.core.publisher.Mono;, +	 * @return {@code Mono} to represent when and if rendering succeeds, +	public Mono<Void> render(HandlerResult result, MediaType contentType,, +	 * @return {@code Mono} to represent when and if rendering succeeds, +	protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/View.java, +import reactor.core.publisher.Mono;, +	 * @return {@code Mono} to represent when and if rendering succeeds, +	Mono<Void> render(HandlerResult result, MediaType contentType, ServerWebExchange exchange);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +import reactor.core.publisher.Mono;, +	 * @return {@code Mono} to represent when and if rendering succeeds, +	public Mono<Void> render(HandlerResult result, MediaType contentType,, +	 * @return {@code Mono} to represent when and if rendering succeeds, +	protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/View.java, +import reactor.core.publisher.Mono;, +	 * @return {@code Mono} to represent when and if rendering succeeds, +	Mono<Void> render(HandlerResult result, MediaType contentType, ServerWebExchange exchange);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +				return ((View) returnValue).render(result, null, exchange);, +						.then(view -> view.render(result, null, exchange));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +import reactor.core.publisher.Mono;, +	 * @return {@code Mono} to represent when and if rendering succeeds, +	public Mono<Void> render(HandlerResult result, MediaType contentType,, +	 * @return {@code Mono} to represent when and if rendering succeeds, +	protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/View.java, +import reactor.core.publisher.Mono;, +	 * @return {@code Mono} to represent when and if rendering succeeds, +	Mono<Void> render(HandlerResult result, MediaType contentType, ServerWebExchange exchange);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +				return ((View) returnValue).render(result, null, exchange);, +						.then(view -> view.render(result, null, exchange));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/freemarker/FreeMarkerView.java, +import reactor.core.publisher.Mono;, +	protected Mono<Void> renderInternal(Map<String, Object> renderAttributes, ServerWebExchange exchange) {, +			return Mono.error(new IllegalStateException(message, ex));, +			return Mono.error(ex);, +		return exchange.getResponse().writeWith(Flux.just(dataBuffer));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +import reactor.core.publisher.Mono;, +	 * @return {@code Mono} to represent when and if rendering succeeds, +	public Mono<Void> render(HandlerResult result, MediaType contentType,, +	 * @return {@code Mono} to represent when and if rendering succeeds, +	protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/View.java, +import reactor.core.publisher.Mono;, +	 * @return {@code Mono} to represent when and if rendering succeeds, +	Mono<Void> render(HandlerResult result, MediaType contentType, ServerWebExchange exchange);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +				return ((View) returnValue).render(result, null, exchange);, +						.then(view -> view.render(result, null, exchange));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/freemarker/FreeMarkerView.java, +import reactor.core.publisher.Mono;, +	protected Mono<Void> renderInternal(Map<String, Object> renderAttributes, ServerWebExchange exchange) {, +			return Mono.error(new IllegalStateException(message, ex));, +			return Mono.error(ex);, +		return exchange.getResponse().writeWith(Flux.just(dataBuffer));, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/view/UrlBasedViewResolverTests.java, +		protected Mono<Void> renderInternal(Map<String, Object> attributes, ServerWebExchange exchange) {, +			return Mono.empty();, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +import reactor.core.publisher.Mono;, +	 * @return {@code Mono} to represent when and if rendering succeeds, +	public Mono<Void> render(HandlerResult result, MediaType contentType,, +	 * @return {@code Mono} to represent when and if rendering succeeds, +	protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/View.java, +import reactor.core.publisher.Mono;, +	 * @return {@code Mono} to represent when and if rendering succeeds, +	Mono<Void> render(HandlerResult result, MediaType contentType, ServerWebExchange exchange);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +				return ((View) returnValue).render(result, null, exchange);, +						.then(view -> view.render(result, null, exchange));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/freemarker/FreeMarkerView.java, +import reactor.core.publisher.Mono;, +	protected Mono<Void> renderInternal(Map<String, Object> renderAttributes, ServerWebExchange exchange) {, +			return Mono.error(new IllegalStateException(message, ex));, +			return Mono.error(ex);, +		return exchange.getResponse().writeWith(Flux.just(dataBuffer));, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/view/UrlBasedViewResolverTests.java, +		protected Mono<Void> renderInternal(Map<String, Object> attributes, ServerWebExchange exchange) {, +			return Mono.empty();, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandlerTests.java, +import org.springframework.http.server.reactive.ServerHttpResponse;, +		public Mono<Void> render(HandlerResult result, MediaType mediaType, ServerWebExchange exchange) {, +			ServerHttpResponse response = exchange.getResponse();, +			return response.writeWith(Flux.just(asDataBuffer(value)));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +import reactor.core.publisher.Mono;, +	 * @return {@code Mono} to represent when and if rendering succeeds]