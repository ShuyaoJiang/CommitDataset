[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +import org.springframework.core.type.filter.TypeFilter;, +			TypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(newValue);, +		typeDescriptor = typeDescriptor.narrow(original);, +		typeDescriptor = typeDescriptor.narrow(original);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +import org.springframework.core.type.filter.TypeFilter;, +			TypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(newValue);, +		typeDescriptor = typeDescriptor.narrow(original);, +		typeDescriptor = typeDescriptor.narrow(original);, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/support/security/CallbacksSecurityTests.java, +		public void setListProperty(Object value) {, +			checkCurrentContext();, +		}, +, +		public Object getListProperty() {, +			checkCurrentContext();, +			return null;, +		}, +		, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +import org.springframework.core.type.filter.TypeFilter;, +			TypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(newValue);, +		typeDescriptor = typeDescriptor.narrow(original);, +		typeDescriptor = typeDescriptor.narrow(original);, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/support/security/CallbacksSecurityTests.java, +		public void setListProperty(Object value) {, +			checkCurrentContext();, +		}, +, +		public Object getListProperty() {, +			checkCurrentContext();, +			return null;, +		}, +		, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/support/security/callbacks.xml, +		<property name="listProperty">, +			<list>, +				<value>foo</value>, +				<value>bar</value>, +			</list>, +		</property>, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +import org.springframework.core.type.filter.TypeFilter;, +			TypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(newValue);, +		typeDescriptor = typeDescriptor.narrow(original);, +		typeDescriptor = typeDescriptor.narrow(original);, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/support/security/CallbacksSecurityTests.java, +		public void setListProperty(Object value) {, +			checkCurrentContext();, +		}, +, +		public Object getListProperty() {, +			checkCurrentContext();, +			return null;, +		}, +		, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/support/security/callbacks.xml, +		<property name="listProperty">, +			<list>, +				<value>foo</value>, +				<value>bar</value>, +			</list>, +		</property>, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	/**, +	 * Create a new type descriptor for an object., +	 * Use this factory method to introspect a source object before asking the conversion system to convert it to some another type., +	 * If the provided object is null, returns null, else calls {@link #valueOf(Class)} to build a TypeDescriptor from the object's class., +	 * @param object the source object, +	 * @return the type descriptor, +	 */, +	/**, +	 * Narrows this {@link TypeDescriptor} by setting its type to the class of the provided value., +	 * If the value is null, no narrowing is performed and this TypeDescriptor is returned unchanged., +	 * Designed to be called by binding frameworks when they read property, field, or method return values., +	 * Allows such frameworks to narrow a TypeDescriptor built from a declared property, field, or method return value type., +	 * For example, a field declared as java.lang.Object would be narrowed to java.util.HashMap if it was set to a java.util.HashMap value., +	 * The narrowed TypeDescriptor can then be used to convert the HashMap to some other type., +	 * Annotation and nested type context is preserved by the narrowed copy., +	 * @param value the value to use for narrowing this type descriptor, +	 * @return this TypeDescriptor narrowed (returns a copy with its type updated to the class of the provided value), +	 */, +	public TypeDescriptor narrow(Object value) {, +	, +		assertCollectionOrArray();, +	/**, +	 * Creates a elementType descriptor from the provided collection or array element., +	 * @param element the collection or array element, +	 * @return the element type descriptor, +	 */, +		assertCollectionOrArray();, +			return elementType.narrow(element);, +		assertMap();, +	/**, +	 * Creates a mapKeyType descriptor from the provided map key., +	 * @param mapKey the map key, +	 * @return the map key type descriptor, +	 */, +		assertMap();]