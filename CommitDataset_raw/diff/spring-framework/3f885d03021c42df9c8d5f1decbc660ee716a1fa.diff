[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/ConfigBeanDefinitionParser.java, +		List<Element> childElts = DomUtils.getChildElements(element);, +		for (Element elt: childElts) {, +			String localName = parserContext.getDelegate().getLocalName(elt);, +				parsePointcut(elt, parserContext);, +				parseAdvisor(elt, parserContext);, +				parseAspect(elt, parserContext);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/ConfigBeanDefinitionParser.java, +		List<Element> childElts = DomUtils.getChildElements(element);, +		for (Element elt: childElts) {, +			String localName = parserContext.getDelegate().getLocalName(elt);, +				parsePointcut(elt, parserContext);, +				parseAdvisor(elt, parserContext);, +				parseAspect(elt, parserContext);, +++ b/org.springframework.core/build.xml, + , +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/ConfigBeanDefinitionParser.java, +		List<Element> childElts = DomUtils.getChildElements(element);, +		for (Element elt: childElts) {, +			String localName = parserContext.getDelegate().getLocalName(elt);, +				parsePointcut(elt, parserContext);, +				parseAdvisor(elt, parserContext);, +				parseAspect(elt, parserContext);, +++ b/org.springframework.core/build.xml, + , +++ b/org.springframework.core/src/main/java/org/springframework/util/xml/DomUtils.java, + * @author Luke Taylor, +	 * Retrieve all child elements of the given DOM element	, +, +	 * @param ele		   the DOM element to analyze, +	 * @return a List of child <code>org.w3c.dom.Element</code> instances, +	 */, +	public static List<Element> getChildElements(Element ele) {, +		Assert.notNull(ele, "Element must not be null");, +		NodeList nl = ele.getChildNodes();, +		List<Element> childEles = new ArrayList<Element>();, +		for (int i = 0; i < nl.getLength(); i++) {, +			Node node = nl.item(i);, +			if (node instanceof Element) {, +				childEles.add((Element) node);, +			}, +		}, +		return childEles;, +	}, +, +	/**, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/ConfigBeanDefinitionParser.java, +		List<Element> childElts = DomUtils.getChildElements(element);, +		for (Element elt: childElts) {, +			String localName = parserContext.getDelegate().getLocalName(elt);, +				parsePointcut(elt, parserContext);, +				parseAdvisor(elt, parserContext);, +				parseAspect(elt, parserContext);, +++ b/org.springframework.core/build.xml, + , +++ b/org.springframework.core/src/main/java/org/springframework/util/xml/DomUtils.java, + * @author Luke Taylor, +	 * Retrieve all child elements of the given DOM element	, +, +	 * @param ele		   the DOM element to analyze, +	 * @return a List of child <code>org.w3c.dom.Element</code> instances, +	 */, +	public static List<Element> getChildElements(Element ele) {, +		Assert.notNull(ele, "Element must not be null");, +		NodeList nl = ele.getChildNodes();, +		List<Element> childEles = new ArrayList<Element>();, +		for (int i = 0; i < nl.getLength(); i++) {, +			Node node = nl.item(i);, +			if (node instanceof Element) {, +				childEles.add((Element) node);, +			}, +		}, +		return childEles;, +	}, +, +	/**, +++ b/org.springframework.oxm/.classpath, +	<classpathentry exported="true" kind="lib" path="target/artifacts/org.springframework.oxm.jar"/>, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/ConfigBeanDefinitionParser.java, +		List<Element> childElts = DomUtils.getChildElements(element);, +		for (Element elt: childElts) {, +			String localName = parserContext.getDelegate().getLocalName(elt);, +				parsePointcut(elt, parserContext);, +				parseAdvisor(elt, parserContext);, +				parseAspect(elt, parserContext);, +++ b/org.springframework.core/build.xml, + , +++ b/org.springframework.core/src/main/java/org/springframework/util/xml/DomUtils.java, + * @author Luke Taylor, +	 * Retrieve all child elements of the given DOM element	, +, +	 * @param ele		   the DOM element to analyze, +	 * @return a List of child <code>org.w3c.dom.Element</code> instances, +	 */, +	public static List<Element> getChildElements(Element ele) {, +		Assert.notNull(ele, "Element must not be null");, +		NodeList nl = ele.getChildNodes();, +		List<Element> childEles = new ArrayList<Element>();, +		for (int i = 0; i < nl.getLength(); i++) {, +			Node node = nl.item(i);]