[+++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +import org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor;, +						}, +						catch (AccessControlException ex) {, +							if (logger.isInfoEnabled()) {, +								logger.info("Not allowed to obtain system property [" + propertyName + "]: " +, +										ex.getMessage());, +							}, +, +						}, +						catch (AccessControlException ex) {, +							if (logger.isInfoEnabled()) {, +							}, +		List<BeanPostProcessor> internalPostProcessors = new ArrayList<BeanPostProcessor>();, +				BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);, +				priorityOrderedPostProcessors.add(pp);, +				if (pp instanceof MergedBeanDefinitionPostProcessor) {, +					internalPostProcessors.add(pp);, +				}, +		for (String ppName : orderedPostProcessorNames) {, +			BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);, +			orderedPostProcessors.add(pp);, +			if (pp instanceof MergedBeanDefinitionPostProcessor) {, +				internalPostProcessors.add(pp);, +			}, +		// Now, register all regular BeanPostProcessors., +		for (String ppName : nonOrderedPostProcessorNames) {, +			BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);, +			nonOrderedPostProcessors.add(pp);, +			if (pp instanceof MergedBeanDefinitionPostProcessor) {, +				internalPostProcessors.add(pp);, +			}, +, +		// Finally, re-register all internal BeanPostProcessors., +		OrderComparator.sort(internalPostProcessors);, +		registerBeanPostProcessors(beanFactory, internalPostProcessors);, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +import org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor;, +						}, +						catch (AccessControlException ex) {, +							if (logger.isInfoEnabled()) {, +								logger.info("Not allowed to obtain system property [" + propertyName + "]: " +, +										ex.getMessage());, +							}, +, +						}, +						catch (AccessControlException ex) {, +							if (logger.isInfoEnabled()) {, +							}, +		List<BeanPostProcessor> internalPostProcessors = new ArrayList<BeanPostProcessor>();, +				BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);, +				priorityOrderedPostProcessors.add(pp);, +				if (pp instanceof MergedBeanDefinitionPostProcessor) {, +					internalPostProcessors.add(pp);, +				}, +		for (String ppName : orderedPostProcessorNames) {, +			BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);, +			orderedPostProcessors.add(pp);, +			if (pp instanceof MergedBeanDefinitionPostProcessor) {, +				internalPostProcessors.add(pp);, +			}, +		// Now, register all regular BeanPostProcessors., +		for (String ppName : nonOrderedPostProcessorNames) {, +			BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);, +			nonOrderedPostProcessors.add(pp);, +			if (pp instanceof MergedBeanDefinitionPostProcessor) {, +				internalPostProcessors.add(pp);, +			}, +, +		// Finally, re-register all internal BeanPostProcessors., +		OrderComparator.sort(internalPostProcessors);, +		registerBeanPostProcessors(beanFactory, internalPostProcessors);, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor;, +import org.springframework.context.support.GenericApplicationContext;, +	public void testPostConstructAndPreDestroyWithPostProcessor() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.addBeanPostProcessor(new InitDestroyBeanPostProcessor());, +		bf.addBeanPostProcessor(new CommonAnnotationBeanPostProcessor());, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(AnnotatedInitDestroyBean.class));, +, +		AnnotatedInitDestroyBean bean = (AnnotatedInitDestroyBean) bf.getBean("annotatedBean");, +		assertTrue(bean.initCalled);, +		bf.destroySingletons();, +		assertTrue(bean.destroyCalled);, +	}, +, +	@Test, +	public void testPostConstructAndPreDestroyWithApplicationContextAndPostProcessor() {, +		GenericApplicationContext ctx = new GenericApplicationContext();, +		ctx.registerBeanDefinition("bpp1", new RootBeanDefinition(InitDestroyBeanPostProcessor.class));, +		ctx.registerBeanDefinition("bpp2", new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class));, +		ctx.registerBeanDefinition("annotatedBean", new RootBeanDefinition(AnnotatedInitDestroyBean.class));, +		ctx.refresh();, +, +		AnnotatedInitDestroyBean bean = (AnnotatedInitDestroyBean) ctx.getBean("annotatedBean");, +		assertTrue(bean.initCalled);, +		ctx.close();]