[+++ b/spring-core/src/main/java/org/springframework/core/ParameterizedTypeReference.java, +	private ParameterizedTypeReference(Type type) {, +		this.type = type;, +	}, +, +	/**, +	 * Build a {@code ParameterizedTypeReference} wrapping the given type., +	 * @param type a generic type (possibly obtained via reflection,, +	 * e.g. from {@link java.lang.reflect.Method#getGenericReturnType()}), +	 * @return a corresponding reference which may be passed into, +	 * {@code ParameterizedTypeReference}-accepting methods, +	 * @since 4.3.12, +	 */, +	public static <T> ParameterizedTypeReference<T> forType(Type type) {, +		return new ParameterizedTypeReference<T>(type) {, +		};, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/ParameterizedTypeReference.java, +	private ParameterizedTypeReference(Type type) {, +		this.type = type;, +	}, +, +	/**, +	 * Build a {@code ParameterizedTypeReference} wrapping the given type., +	 * @param type a generic type (possibly obtained via reflection,, +	 * e.g. from {@link java.lang.reflect.Method#getGenericReturnType()}), +	 * @return a corresponding reference which may be passed into, +	 * {@code ParameterizedTypeReference}-accepting methods, +	 * @since 4.3.12, +	 */, +	public static <T> ParameterizedTypeReference<T> forType(Type type) {, +		return new ParameterizedTypeReference<T>(type) {, +		};, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +, +	/**, +	 * Return a {@link ResolvableType} for the specified {@link ParameterizedTypeReference}., +	 * Note: The resulting {@link ResolvableType} may not be {@link Serializable}., +	 * @param typeReference the reference to obtain the source type from, +	 * @return a {@link ResolvableType} for the specified {@link ParameterizedTypeReference}, +	 * @since 4.3.12, +	 * @see #forType(Type), +	 */, +	public static ResolvableType forType(ParameterizedTypeReference<?> typeReference) {, +		return forType(typeReference.getType(), null ,null);, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/ParameterizedTypeReference.java, +	private ParameterizedTypeReference(Type type) {, +		this.type = type;, +	}, +, +	/**, +	 * Build a {@code ParameterizedTypeReference} wrapping the given type., +	 * @param type a generic type (possibly obtained via reflection,, +	 * e.g. from {@link java.lang.reflect.Method#getGenericReturnType()}), +	 * @return a corresponding reference which may be passed into, +	 * {@code ParameterizedTypeReference}-accepting methods, +	 * @since 4.3.12, +	 */, +	public static <T> ParameterizedTypeReference<T> forType(Type type) {, +		return new ParameterizedTypeReference<T>(type) {, +		};, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +, +	/**, +	 * Return a {@link ResolvableType} for the specified {@link ParameterizedTypeReference}., +	 * Note: The resulting {@link ResolvableType} may not be {@link Serializable}., +	 * @param typeReference the reference to obtain the source type from, +	 * @return a {@link ResolvableType} for the specified {@link ParameterizedTypeReference}, +	 * @since 4.3.12, +	 * @see #forType(Type), +	 */, +	public static ResolvableType forType(ParameterizedTypeReference<?> typeReference) {, +		return forType(typeReference.getType(), null ,null);, +	}, +, +++ b/spring-core/src/test/java/org/springframework/core/ParameterizedTypeReferenceTests.java, + * Copyright 2002-2017 the original author or authors., +	public void stringTypeReference() {, +	@Test, +	public void mapTypeReference() throws Exception {, +		Type mapType = getClass().getMethod("mapMethod").getGenericReturnType();, +		ParameterizedTypeReference<Map<Object,String>> typeReference = new ParameterizedTypeReference<Map<Object,String>>() {};, +		assertEquals(mapType, typeReference.getType());, +	}, +, +	@Test, +	public void listTypeReference() throws Exception {, +		Type listType = getClass().getMethod("listMethod").getGenericReturnType();, +		ParameterizedTypeReference<List<String>> typeReference = new ParameterizedTypeReference<List<String>>() {};, +		assertEquals(listType, typeReference.getType());, +	}, +, +	@Test]