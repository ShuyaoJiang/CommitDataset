[+++ b/org.springframework.core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +	private final MutablePropertySources propertySources = new MutablePropertySources(logger);, +		String name = this.getClass().getSimpleName();, +		logger.debug(String.format("Initializing new %s", name));, +		logger.debug(String.format("Initialized %s with PropertySources %s", name, propertySources));, +			String profiles = this.getProperty(ACTIVE_PROFILES_PROPERTY_NAME);, +		logger.debug(String.format("Activating profile '%s'", profile));, +			String profiles = this.getProperty(DEFAULT_PROFILES_PROPERTY_NAME);, +		return format("%s {activeProfiles=%s, defaultProfiles=%s, propertySources=%s}",, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +	private final MutablePropertySources propertySources = new MutablePropertySources(logger);, +		String name = this.getClass().getSimpleName();, +		logger.debug(String.format("Initializing new %s", name));, +		logger.debug(String.format("Initialized %s with PropertySources %s", name, propertySources));, +			String profiles = this.getProperty(ACTIVE_PROFILES_PROPERTY_NAME);, +		logger.debug(String.format("Activating profile '%s'", profile));, +			String profiles = this.getProperty(DEFAULT_PROFILES_PROPERTY_NAME);, +		return format("%s {activeProfiles=%s, defaultProfiles=%s, propertySources=%s}",, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/MutablePropertySources.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.util.StringUtils;, +	private final Log logger;, +, +, +		this.logger = LogFactory.getLog(this.getClass());, +		this();, +	/**, +	 * Create a new {@link MutablePropertySources} object and inheriting the given logger,, +	 * usually from an enclosing {@link Environment}., +	 */, +	MutablePropertySources(Log logger) {, +		this.logger = logger;, +	}, +, +, +		logger.debug(String.format("Adding [%s] PropertySource with highest search precedence",, +				propertySource.getName()));, +		logger.debug(String.format("Adding [%s] PropertySource with lowest search precedence",, +				propertySource.getName()));, +		logger.debug(String.format("Adding [%s] PropertySource with search precedence immediately higher than [%s]",, +				propertySource.getName(), relativePropertySourceName));, +		logger.debug(String.format("Adding [%s] PropertySource with search precedence immediately lower than [%s]",, +				propertySource.getName(), relativePropertySourceName));, +		logger.debug(String.format("Removing [%s] PropertySource", name));, +		logger.debug(String.format("Replacing [%s] PropertySource with [%s]",, +				name, propertySource.getName()));, +	@Override, +	public synchronized String toString() {, +		String[] names = new String[this.size()];, +		for (int i=0; i < size(); i++) {, +			names[i] = this.propertySourceList.get(i).getName();, +		}, +		return String.format("[%s]", StringUtils.arrayToCommaDelimitedString(names));, +	}, +]