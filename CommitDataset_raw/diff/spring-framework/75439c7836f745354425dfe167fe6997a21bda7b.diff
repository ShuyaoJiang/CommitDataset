[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompCommand.java, +	private static Collection<StompCommand> contentLengthRequired = Arrays.asList(SEND, MESSAGE, ERROR);, +	public boolean requiresContentLength() {, +		return contentLengthRequired.contains(this);, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompCommand.java, +	private static Collection<StompCommand> contentLengthRequired = Arrays.asList(SEND, MESSAGE, ERROR);, +	public boolean requiresContentLength() {, +		return contentLengthRequired.contains(this);, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompEncoder.java, +			ByteArrayOutputStream baos = new ByteArrayOutputStream(128 + message.getPayload().length);, +			if (SimpMessageType.HEARTBEAT == headers.getMessageType()) {, +				logger.trace("Encoded heartbeat");, +				output.write(headers.getCommand().toString().getBytes(UTF8_CHARSET));, +				output.write(LF);, +		StompCommand command = headers.getCommand();, +		boolean shouldEscape = (command != StompCommand.CONNECT && command != StompCommand.CONNECTED);, +, +		if (logger.isDebugEnabled()) {, +			logger.debug("Encoded STOMP " + command + ", headers=" + stompHeaders);, +, +			byte[] key = encodeHeaderString(entry.getKey(), shouldEscape);, +				output.write(encodeHeaderString(value, shouldEscape));, +		if (command.requiresContentLength()) {, +	private byte[] encodeHeaderString(String input, boolean escape) {]