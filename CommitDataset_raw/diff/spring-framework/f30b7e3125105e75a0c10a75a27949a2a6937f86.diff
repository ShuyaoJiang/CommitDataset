[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2011 the original author or authors., +	private final Map<Class<?>, Constructor<?>[]> candidateConstructorsCache =, +			new ConcurrentHashMap<Class<?>, Constructor<?>[]>();, +	public void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class<?> beanType, String beanName) {, +	public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, String beanName) throws BeansException {, +		Constructor<?>[] candidateConstructors = this.candidateConstructorsCache.get(beanClass);, +					Constructor<?>[] rawCandidates = beanClass.getDeclaredConstructors();, +					List<Constructor<?>> candidates = new ArrayList<Constructor<?>>(rawCandidates.length);, +					Constructor<?> requiredConstructor = null;, +					Constructor<?> defaultConstructor = null;, +	private InjectionMetadata findAutowiringMetadata(Class<?> clazz) {, +	private InjectionMetadata buildAutowiringMetadata(Class<?> clazz) {, +					Class<?>[] paramTypes = method.getParameterTypes();, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2011 the original author or authors., +	private final Map<Class<?>, Constructor<?>[]> candidateConstructorsCache =, +			new ConcurrentHashMap<Class<?>, Constructor<?>[]>();, +	public void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class<?> beanType, String beanName) {, +	public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, String beanName) throws BeansException {, +		Constructor<?>[] candidateConstructors = this.candidateConstructorsCache.get(beanClass);, +					Constructor<?>[] rawCandidates = beanClass.getDeclaredConstructors();, +					List<Constructor<?>> candidates = new ArrayList<Constructor<?>>(rawCandidates.length);, +					Constructor<?> requiredConstructor = null;, +					Constructor<?> defaultConstructor = null;, +	private InjectionMetadata findAutowiringMetadata(Class<?> clazz) {, +	private InjectionMetadata buildAutowiringMetadata(Class<?> clazz) {, +					Class<?>[] paramTypes = method.getParameterTypes();, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java, + * Copyright 2002-2011 the original author or authors., +@SuppressWarnings("serial"), +	public void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class<?> beanType, String beanName) {, +	private LifecycleMetadata findLifecycleMetadata(Class<?> clazz) {, +	private LifecycleMetadata buildLifecycleMetadata(Class<?> clazz) {, +		public LifecycleMetadata(Class<?> targetClass, Collection<LifecycleElement> initMethods,, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2011 the original author or authors., +	private final Map<Class<?>, Constructor<?>[]> candidateConstructorsCache =, +			new ConcurrentHashMap<Class<?>, Constructor<?>[]>();, +	public void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class<?> beanType, String beanName) {, +	public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, String beanName) throws BeansException {, +		Constructor<?>[] candidateConstructors = this.candidateConstructorsCache.get(beanClass);, +					Constructor<?>[] rawCandidates = beanClass.getDeclaredConstructors();, +					List<Constructor<?>> candidates = new ArrayList<Constructor<?>>(rawCandidates.length);, +					Constructor<?> requiredConstructor = null;, +					Constructor<?> defaultConstructor = null;, +	private InjectionMetadata findAutowiringMetadata(Class<?> clazz) {, +	private InjectionMetadata buildAutowiringMetadata(Class<?> clazz) {, +					Class<?>[] paramTypes = method.getParameterTypes();, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java, + * Copyright 2002-2011 the original author or authors., +@SuppressWarnings("serial"), +	public void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class<?> beanType, String beanName) {, +	private LifecycleMetadata findLifecycleMetadata(Class<?> clazz) {, +	private LifecycleMetadata buildLifecycleMetadata(Class<?> clazz) {, +		public LifecycleMetadata(Class<?> targetClass, Collection<LifecycleElement> initMethods,, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/RequiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2011 the original author or authors., +	public void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class<?> beanType, String beanName) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2011 the original author or authors., +	private final Map<Class<?>, Constructor<?>[]> candidateConstructorsCache =, +			new ConcurrentHashMap<Class<?>, Constructor<?>[]>();, +	public void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class<?> beanType, String beanName) {, +	public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, String beanName) throws BeansException {, +		Constructor<?>[] candidateConstructors = this.candidateConstructorsCache.get(beanClass);, +					Constructor<?>[] rawCandidates = beanClass.getDeclaredConstructors();, +					List<Constructor<?>> candidates = new ArrayList<Constructor<?>>(rawCandidates.length);, +					Constructor<?> requiredConstructor = null;, +					Constructor<?> defaultConstructor = null;, +	private InjectionMetadata findAutowiringMetadata(Class<?> clazz) {, +	private InjectionMetadata buildAutowiringMetadata(Class<?> clazz) {, +					Class<?>[] paramTypes = method.getParameterTypes();, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java, + * Copyright 2002-2011 the original author or authors., +@SuppressWarnings("serial"), +	public void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class<?> beanType, String beanName) {, +	private LifecycleMetadata findLifecycleMetadata(Class<?> clazz) {, +	private LifecycleMetadata buildLifecycleMetadata(Class<?> clazz) {, +		public LifecycleMetadata(Class<?> targetClass, Collection<LifecycleElement> initMethods,, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/RequiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2011 the original author or authors., +	public void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class<?> beanType, String beanName) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/InstantiationAwareBeanPostProcessor.java, + * Copyright 2002-2011 the original author or authors., +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2011 the original author or authors., +	private final Map<Class<?>, Constructor<?>[]> candidateConstructorsCache =, +			new ConcurrentHashMap<Class<?>, Constructor<?>[]>();, +	public void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class<?> beanType, String beanName) {, +	public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, String beanName) throws BeansException {, +		Constructor<?>[] candidateConstructors = this.candidateConstructorsCache.get(beanClass);, +					Constructor<?>[] rawCandidates = beanClass.getDeclaredConstructors();, +					List<Constructor<?>> candidates = new ArrayList<Constructor<?>>(rawCandidates.length);, +					Constructor<?> requiredConstructor = null;, +					Constructor<?> defaultConstructor = null;, +	private InjectionMetadata findAutowiringMetadata(Class<?> clazz) {, +	private InjectionMetadata buildAutowiringMetadata(Class<?> clazz) {, +					Class<?>[] paramTypes = method.getParameterTypes();, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java]