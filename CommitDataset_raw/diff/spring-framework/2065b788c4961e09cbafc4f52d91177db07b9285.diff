[+++ b/org.springframework.context/src/main/java/org/springframework/context/config/PropertyPlaceholderBeanDefinitionParser.java, + * Copyright 2002-2011 the original author or authors., + * Parser for the {@code <context:property-placeholder/>} element., +	private static final String SYSTEM_PROPERTIES_MODE_ATTRIB = "system-properties-mode";, +	private static final String SYSTEM_PROPERTIES_MODE_DEFAULT = "ENVIRONMENT";, +, +		// As of Spring 3.1, the default value of system-properties-mode has changed from, +		// 'FALLBACK' to 'ENVIRONMENT'. This latter value indicates that resolution of, +		// placeholders against system properties is a function of the Environment and, +		// its current set of PropertySources, +		if (element.getAttribute(SYSTEM_PROPERTIES_MODE_ATTRIB).equals(SYSTEM_PROPERTIES_MODE_DEFAULT)) {, +			return PropertySourcesPlaceholderConfigurer.class;, +		// the user has explicitly specified a value for system-properties-mode. Revert, +		// to PropertyPlaceholderConfigurer to ensure backward compatibility., +		return PropertyPlaceholderConfigurer.class;, +		String systemPropertiesModeName = element.getAttribute(SYSTEM_PROPERTIES_MODE_ATTRIB);, +		if (StringUtils.hasLength(systemPropertiesModeName) &&, +				!systemPropertiesModeName.equals(SYSTEM_PROPERTIES_MODE_DEFAULT)) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/config/PropertyPlaceholderBeanDefinitionParser.java, + * Copyright 2002-2011 the original author or authors., + * Parser for the {@code <context:property-placeholder/>} element., +	private static final String SYSTEM_PROPERTIES_MODE_ATTRIB = "system-properties-mode";, +	private static final String SYSTEM_PROPERTIES_MODE_DEFAULT = "ENVIRONMENT";, +, +		// As of Spring 3.1, the default value of system-properties-mode has changed from, +		// 'FALLBACK' to 'ENVIRONMENT'. This latter value indicates that resolution of, +		// placeholders against system properties is a function of the Environment and, +		// its current set of PropertySources, +		if (element.getAttribute(SYSTEM_PROPERTIES_MODE_ATTRIB).equals(SYSTEM_PROPERTIES_MODE_DEFAULT)) {, +			return PropertySourcesPlaceholderConfigurer.class;, +		// the user has explicitly specified a value for system-properties-mode. Revert, +		// to PropertyPlaceholderConfigurer to ensure backward compatibility., +		return PropertyPlaceholderConfigurer.class;, +		String systemPropertiesModeName = element.getAttribute(SYSTEM_PROPERTIES_MODE_ATTRIB);, +		if (StringUtils.hasLength(systemPropertiesModeName) &&, +				!systemPropertiesModeName.equals(SYSTEM_PROPERTIES_MODE_DEFAULT)) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java, + * Specialization of {@link org.springframework.beans.factory.config.PlaceholderConfigurerSupport, + * PlaceholderConfigurerSupport} that resolves ${...} placeholders within bean definition, + * property values and {@code @Value} annotations against the current Spring {@link, + * Environment} and its set of {@link PropertySources}., + * <p>This class is designed as a general replacement for {@code, + * PropertyPlaceholderConfigurer} in Spring 3.1 applications. It is used by default to, + * support the {@code property-placeholder} element in working against the, + * spring-context-3.1 XSD, whereas spring-context versions &lt;= 3.0 default to, + * {@code PropertyPlaceholderConfigurer} to ensure backward compatibility. See, + * spring-context XSD documentation for complete details., + *, + * <p>Any local properties (e.g. those added via {@link #setProperties},, + * {@link #setLocations} et al.) are added as a {@code PropertySource}. Search precedence, + * of local properties is based on the value of the {@link #setLocalOverride localOverride}, + * property, which is by default {@code false} meaning that local properties are to be, + * searched last, after all environment property sources., + *, + * <p>See {@link org.springframework.core.env.ConfigurableEnvironment ConfigurableEnvironment}, + * and related Javadoc for details on manipulating environment property sources., + * @see org.springframework.core.env.ConfigurableEnvironment, +++ b/org.springframework.context/src/main/java/org/springframework/context/config/PropertyPlaceholderBeanDefinitionParser.java, + * Copyright 2002-2011 the original author or authors., + * Parser for the {@code <context:property-placeholder/>} element., +	private static final String SYSTEM_PROPERTIES_MODE_ATTRIB = "system-properties-mode";, +	private static final String SYSTEM_PROPERTIES_MODE_DEFAULT = "ENVIRONMENT";, +, +		// As of Spring 3.1, the default value of system-properties-mode has changed from, +		// 'FALLBACK' to 'ENVIRONMENT'. This latter value indicates that resolution of, +		// placeholders against system properties is a function of the Environment and, +		// its current set of PropertySources, +		if (element.getAttribute(SYSTEM_PROPERTIES_MODE_ATTRIB).equals(SYSTEM_PROPERTIES_MODE_DEFAULT)) {, +			return PropertySourcesPlaceholderConfigurer.class;, +		// the user has explicitly specified a value for system-properties-mode. Revert, +		// to PropertyPlaceholderConfigurer to ensure backward compatibility., +		return PropertyPlaceholderConfigurer.class;, +		String systemPropertiesModeName = element.getAttribute(SYSTEM_PROPERTIES_MODE_ATTRIB);, +		if (StringUtils.hasLength(systemPropertiesModeName) &&, +				!systemPropertiesModeName.equals(SYSTEM_PROPERTIES_MODE_DEFAULT)) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java, + * Specialization of {@link org.springframework.beans.factory.config.PlaceholderConfigurerSupport, + * PlaceholderConfigurerSupport} that resolves ${...} placeholders within bean definition, + * property values and {@code @Value} annotations against the current Spring {@link, + * Environment} and its set of {@link PropertySources}., + * <p>This class is designed as a general replacement for {@code, + * PropertyPlaceholderConfigurer} in Spring 3.1 applications. It is used by default to, + * support the {@code property-placeholder} element in working against the, + * spring-context-3.1 XSD, whereas spring-context versions &lt;= 3.0 default to, + * {@code PropertyPlaceholderConfigurer} to ensure backward compatibility. See, + * spring-context XSD documentation for complete details., + *, + * <p>Any local properties (e.g. those added via {@link #setProperties},, + * {@link #setLocations} et al.) are added as a {@code PropertySource}. Search precedence, + * of local properties is based on the value of the {@link #setLocalOverride localOverride}, + * property, which is by default {@code false} meaning that local properties are to be, + * searched last, after all environment property sources., + *, + * <p>See {@link org.springframework.core.env.ConfigurableEnvironment ConfigurableEnvironment}, + * and related Javadoc for details on manipulating environment property sources., + * @see org.springframework.core.env.ConfigurableEnvironment, +++ b/org.springframework.context/src/main/resources/org/springframework/context/config/spring-context-3.1.xsd, +	Activates replacement of ${...} placeholders by registering a, +	PropertySourcesPlaceholderConfigurer within the application context. Properties will, +	be resolved against the specified properties file or Properties object -- so called]