[+++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCacheManager.java, + * Copyright 2002-2016 the original author or authors., +				this.storeByValue ? this.serialization : null;, +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCacheManager.java, + * Copyright 2002-2016 the original author or authors., +				this.storeByValue ? this.serialization : null;, +++ b/spring-context/src/main/java/org/springframework/cache/config/CacheAdviceParser.java, + * Copyright 2002-2016 the original author or authors., +			this.key = root.getAttribute("key");, +			this.keyGenerator = root.getAttribute("key-generator");, +			this.cacheManager = root.getAttribute("cache-manager");, +			this.condition = root.getAttribute("condition");, +			this.method = root.getAttribute(METHOD_ATTRIBUTE);, +				this.caches = StringUtils.commaDelimitedListToStringArray(defaultCache.trim());, +			String[] localCaches = this.caches;, +				if (this.caches == null) {, +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCacheManager.java, + * Copyright 2002-2016 the original author or authors., +				this.storeByValue ? this.serialization : null;, +++ b/spring-context/src/main/java/org/springframework/cache/config/CacheAdviceParser.java, + * Copyright 2002-2016 the original author or authors., +			this.key = root.getAttribute("key");, +			this.keyGenerator = root.getAttribute("key-generator");, +			this.cacheManager = root.getAttribute("cache-manager");, +			this.condition = root.getAttribute("condition");, +			this.method = root.getAttribute(METHOD_ATTRIBUTE);, +				this.caches = StringUtils.commaDelimitedListToStringArray(defaultCache.trim());, +			String[] localCaches = this.caches;, +				if (this.caches == null) {, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheOperation.java, + * Copyright 2002-2016 the original author or authors., +		Assert.notNull(this.cacheManager);, +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCacheManager.java, + * Copyright 2002-2016 the original author or authors., +				this.storeByValue ? this.serialization : null;, +++ b/spring-context/src/main/java/org/springframework/cache/config/CacheAdviceParser.java, + * Copyright 2002-2016 the original author or authors., +			this.key = root.getAttribute("key");, +			this.keyGenerator = root.getAttribute("key-generator");, +			this.cacheManager = root.getAttribute("cache-manager");, +			this.condition = root.getAttribute("condition");, +			this.method = root.getAttribute(METHOD_ATTRIBUTE);, +				this.caches = StringUtils.commaDelimitedListToStringArray(defaultCache.trim());, +			String[] localCaches = this.caches;, +				if (this.caches == null) {, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheOperation.java, + * Copyright 2002-2016 the original author or authors., +		Assert.notNull(this.cacheManager);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheOperationInvoker.java, + * Copyright 2002-2016 the original author or authors., +			return this.original;, +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCacheManager.java, + * Copyright 2002-2016 the original author or authors., +				this.storeByValue ? this.serialization : null;, +++ b/spring-context/src/main/java/org/springframework/cache/config/CacheAdviceParser.java, + * Copyright 2002-2016 the original author or authors., +			this.key = root.getAttribute("key");, +			this.keyGenerator = root.getAttribute("key-generator");, +			this.cacheManager = root.getAttribute("cache-manager");, +			this.condition = root.getAttribute("condition");, +			this.method = root.getAttribute(METHOD_ATTRIBUTE);, +				this.caches = StringUtils.commaDelimitedListToStringArray(defaultCache.trim());, +			String[] localCaches = this.caches;, +				if (this.caches == null) {, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheOperation.java, + * Copyright 2002-2016 the original author or authors., +		Assert.notNull(this.cacheManager);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheOperationInvoker.java, + * Copyright 2002-2016 the original author or authors., +			return this.original;, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CachePutOperation.java, + * Copyright 2002-2016 the original author or authors., +		return this.unless;, +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCacheManager.java, + * Copyright 2002-2016 the original author or authors., +				this.storeByValue ? this.serialization : null;, +++ b/spring-context/src/main/java/org/springframework/cache/config/CacheAdviceParser.java, + * Copyright 2002-2016 the original author or authors., +			this.key = root.getAttribute("key");, +			this.keyGenerator = root.getAttribute("key-generator");, +			this.cacheManager = root.getAttribute("cache-manager");, +			this.condition = root.getAttribute("condition");, +			this.method = root.getAttribute(METHOD_ATTRIBUTE);, +				this.caches = StringUtils.commaDelimitedListToStringArray(defaultCache.trim());, +			String[] localCaches = this.caches;, +				if (this.caches == null) {, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheOperation.java, + * Copyright 2002-2016 the original author or authors., +		Assert.notNull(this.cacheManager);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheOperationInvoker.java, + * Copyright 2002-2016 the original author or authors., +			return this.original;, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CachePutOperation.java, + * Copyright 2002-2016 the original author or authors., +		return this.unless;, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheableOperation.java, + * Copyright 2002-2016 the original author or authors., +		return this.unless;, +		return this.sync;, +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCacheManager.java]