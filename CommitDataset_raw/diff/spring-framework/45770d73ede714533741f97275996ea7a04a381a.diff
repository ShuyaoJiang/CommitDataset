[+++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/WiretapConnectorTests.java, +, +		ClientRequest clientRequest = ClientRequest.method(HttpMethod.GET, URI.create("/test")).build();, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/WiretapConnectorTests.java, +, +		ClientRequest clientRequest = ClientRequest.method(HttpMethod.GET, URI.create("/test")).build();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +public interface ClientRequest {, +	BodyInserter<?, ? super ClientHttpRequest> body();, +	static Builder from(ClientRequest other) {, +				.cookies(other.cookies()), +				.body(other.body());, +		 * Set the body of the request to the given {@code BodyInserter}., +		 * @return this builder, +		Builder body(BodyInserter<?, ? super ClientHttpRequest> inserter);, +		 * @param <S> the type of the elements contained in the publisher, +		 * @param <P> the type of the {@code Publisher}, +		<S, P extends Publisher<S>> Builder body(P publisher, Class<S> elementClass);, +, +		/**, +		 * Builds the request entity with no body., +		 * @return the request entity, +		 */, +		ClientRequest build();, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/WiretapConnectorTests.java, +, +		ClientRequest clientRequest = ClientRequest.method(HttpMethod.GET, URI.create("/test")).build();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +public interface ClientRequest {, +	BodyInserter<?, ? super ClientHttpRequest> body();, +	static Builder from(ClientRequest other) {, +				.cookies(other.cookies()), +				.body(other.body());, +		 * Set the body of the request to the given {@code BodyInserter}., +		 * @return this builder, +		Builder body(BodyInserter<?, ? super ClientHttpRequest> inserter);, +		 * @param <S> the type of the elements contained in the publisher, +		 * @param <P> the type of the {@code Publisher}, +		<S, P extends Publisher<S>> Builder body(P publisher, Class<S> elementClass);, +, +		/**, +		 * Builds the request entity with no body., +		 * @return the request entity, +		 */, +		ClientRequest build();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java, +	private BodyInserter<?, ? super ClientHttpRequest> inserter = BodyInserters.empty();, +, +	public <S, P extends Publisher<S>> ClientRequest.Builder body(P publisher,, +			Class<S> elementClass) {, +		Assert.notNull(publisher, "'publisher' must not be null");, +		Assert.notNull(elementClass, "'elementClass' must not be null");, +, +		this.inserter = BodyInserters.fromPublisher(publisher, elementClass);, +		return this;, +	public ClientRequest.Builder body(BodyInserter<?, ? super ClientHttpRequest> inserter) {, +		this.inserter = inserter != null ? inserter : BodyInserters.empty();, +		return this;, +	public ClientRequest build() {, +		return new BodyInserterRequest(this.method, this.url, this.headers, this.cookies,, +				this.inserter);, +	private static class BodyInserterRequest implements ClientRequest {, +		private final BodyInserter<?, ? super ClientHttpRequest> inserter;, +				BodyInserter<?, ? super ClientHttpRequest> inserter) {, +		public BodyInserter<?, ? super ClientHttpRequest> body() {, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/WiretapConnectorTests.java, +, +		ClientRequest clientRequest = ClientRequest.method(HttpMethod.GET, URI.create("/test")).build();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +public interface ClientRequest {, +	BodyInserter<?, ? super ClientHttpRequest> body();, +	static Builder from(ClientRequest other) {, +				.cookies(other.cookies()), +				.body(other.body());, +		 * Set the body of the request to the given {@code BodyInserter}., +		 * @return this builder, +		Builder body(BodyInserter<?, ? super ClientHttpRequest> inserter);, +		 * @param <S> the type of the elements contained in the publisher, +		 * @param <P> the type of the {@code Publisher}, +		<S, P extends Publisher<S>> Builder body(P publisher, Class<S> elementClass);, +, +		/**, +		 * Builds the request entity with no body., +		 * @return the request entity, +		 */, +		ClientRequest build();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java, +	private BodyInserter<?, ? super ClientHttpRequest> inserter = BodyInserters.empty();, +, +	public <S, P extends Publisher<S>> ClientRequest.Builder body(P publisher,, +			Class<S> elementClass) {, +		Assert.notNull(publisher, "'publisher' must not be null");, +		Assert.notNull(elementClass, "'elementClass' must not be null");, +, +		this.inserter = BodyInserters.fromPublisher(publisher, elementClass);, +		return this;, +	public ClientRequest.Builder body(BodyInserter<?, ? super ClientHttpRequest> inserter) {, +		this.inserter = inserter != null ? inserter : BodyInserters.empty();, +		return this;, +	public ClientRequest build() {]