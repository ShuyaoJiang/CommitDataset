[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, + * Copyright 2002-2014 the original author or authors., + * @author Sam Brannen, +				if (!AnnotationUtils.isInJavaLangAnnotationPackage(annotation)) {, +		}, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, + * Copyright 2002-2014 the original author or authors., + * @author Sam Brannen, +				if (!AnnotationUtils.isInJavaLangAnnotationPackage(annotation)) {, +		}, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +			if (!isInJavaLangAnnotationPackage(ann) && visited.add(ann)) {, +	 * Determine if the supplied {@link Annotation} is defined in the, +	 * {@code java.lang.annotation} package., +	 *, +	 * @param annotation the annotation to check; never {@code null}, +	 * @return {@code true} if the annotation is in the {@code java.lang.annotation} package, +	 */, +	public static boolean isInJavaLangAnnotationPackage(Annotation annotation) {, +		Assert.notNull(annotation, "Annotation must not be null");, +		return annotation.annotationType().getName().startsWith("java.lang.annotation");, +	}, +, +	/**, +					else if (!isInJavaLangAnnotationPackage(annotation)) {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, + * Copyright 2002-2014 the original author or authors., + * @author Sam Brannen, +				if (!AnnotationUtils.isInJavaLangAnnotationPackage(annotation)) {, +		}, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +			if (!isInJavaLangAnnotationPackage(ann) && visited.add(ann)) {, +	 * Determine if the supplied {@link Annotation} is defined in the, +	 * {@code java.lang.annotation} package., +	 *, +	 * @param annotation the annotation to check; never {@code null}, +	 * @return {@code true} if the annotation is in the {@code java.lang.annotation} package, +	 */, +	public static boolean isInJavaLangAnnotationPackage(Annotation annotation) {, +		Assert.notNull(annotation, "Annotation must not be null");, +		return annotation.annotationType().getName().startsWith("java.lang.annotation");, +	}, +, +	/**, +					else if (!isInJavaLangAnnotationPackage(annotation)) {, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Target;, +	public void getAnnotationAttributesOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation() {, +		AnnotationAttributes attributes = AnnotatedElementUtils.getAnnotationAttributes(MetaCycleAnnotatedClass.class,, +			Transactional.class.getName());, +		assertNull("Should not find annotation attributes for @Transactional on MetaCycleAnnotatedClass", attributes);, +	}, +, +	@Test, +	@MetaCycle3, +	@Target(ElementType.ANNOTATION_TYPE), +	@Documented, +	@interface MetaCycle1 {, +	}, +, +	@MetaCycle1, +	@Retention(RetentionPolicy.RUNTIME), +	@Target(ElementType.ANNOTATION_TYPE), +	@Documented, +	@interface MetaCycle2 {, +	}, +, +	@MetaCycle2, +	@Retention(RetentionPolicy.RUNTIME), +	@Target(ElementType.TYPE), +	@Documented, +	@interface MetaCycle3 {, +	}, +, +	@MetaCycle3, +	static class MetaCycleAnnotatedClass {, +	}, +, +	@Retention(RetentionPolicy.RUNTIME), +	@Target(ElementType.TYPE), +	@Documented, +	@Target(ElementType.TYPE), +	@Documented, +	@Target(ElementType.TYPE), +	@Documented, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, + * Copyright 2002-2014 the original author or authors., + * @author Sam Brannen, +				if (!AnnotationUtils.isInJavaLangAnnotationPackage(annotation)) {, +		}, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +			if (!isInJavaLangAnnotationPackage(ann) && visited.add(ann)) {, +	 * Determine if the supplied {@link Annotation} is defined in the, +	 * {@code java.lang.annotation} package., +	 *, +	 * @param annotation the annotation to check; never {@code null}, +	 * @return {@code true} if the annotation is in the {@code java.lang.annotation} package, +	 */]