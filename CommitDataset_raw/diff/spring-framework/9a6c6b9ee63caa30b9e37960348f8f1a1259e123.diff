[+++ b/spring-core/src/main/java/org/springframework/core/convert/support/StringToEnumConverterFactory.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.util.Assert;, +		Class<?> enumType = targetType;, +		while(enumType != null && !enumType.isEnum()) {, +			enumType = enumType.getSuperclass();, +		}, +		Assert.notNull(enumType, "The target type " + targetType.getName(), +				+ " does not refer to an enum");, +		return new StringToEnum(enumType);, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/StringToEnumConverterFactory.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.util.Assert;, +		Class<?> enumType = targetType;, +		while(enumType != null && !enumType.isEnum()) {, +			enumType = enumType.getSuperclass();, +		}, +		Assert.notNull(enumType, "The target type " + targetType.getName(), +				+ " does not refer to an enum");, +		return new StringToEnum(enumType);, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java, +import static org.junit.Assert.*;, +	public void testStringToEnumWithSubclss() throws Exception {, +		assertEquals(SubFoo.BAZ, conversionService.convert("BAZ", SubFoo.BAR.getClass()));, +	}, +, +	@Test, +	public static enum SubFoo {, +, +		BAR {, +			@Override, +			String s() {, +				return "x";, +			}, +		},, +		BAZ {, +			@Override, +			String s() {, +				return "y";, +			}, +		};, +, +		abstract String s();, +	}, +]