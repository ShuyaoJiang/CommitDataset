[+++ /dev/null, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/AbstractMappingContentTypeResolver.java, +import org.springframework.web.server.NotAcceptableStatusException;, +			throws NotAcceptableStatusException {, +	 * @throws NotAcceptableStatusException, +	public List<MediaType> resolveMediaTypes(String key) throws NotAcceptableStatusException {, +	protected MediaType handleNoMatch(String key) throws NotAcceptableStatusException {, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/AbstractMappingContentTypeResolver.java, +import org.springframework.web.server.NotAcceptableStatusException;, +			throws NotAcceptableStatusException {, +	 * @throws NotAcceptableStatusException, +	public List<MediaType> resolveMediaTypes(String key) throws NotAcceptableStatusException {, +	protected MediaType handleNoMatch(String key) throws NotAcceptableStatusException {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/CompositeContentTypeResolver.java, +import org.springframework.web.server.NotAcceptableStatusException;, +	public List<MediaType> resolveMediaTypes(ServerWebExchange exchange) throws NotAcceptableStatusException {, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/AbstractMappingContentTypeResolver.java, +import org.springframework.web.server.NotAcceptableStatusException;, +			throws NotAcceptableStatusException {, +	 * @throws NotAcceptableStatusException, +	public List<MediaType> resolveMediaTypes(String key) throws NotAcceptableStatusException {, +	protected MediaType handleNoMatch(String key) throws NotAcceptableStatusException {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/CompositeContentTypeResolver.java, +import org.springframework.web.server.NotAcceptableStatusException;, +	public List<MediaType> resolveMediaTypes(ServerWebExchange exchange) throws NotAcceptableStatusException {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/ContentTypeResolver.java, +import org.springframework.web.server.NotAcceptableStatusException;, +	 * @throws NotAcceptableStatusException if the requested media types is invalid, +	List<MediaType> resolveMediaTypes(ServerWebExchange exchange) throws NotAcceptableStatusException;, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/AbstractMappingContentTypeResolver.java, +import org.springframework.web.server.NotAcceptableStatusException;, +			throws NotAcceptableStatusException {, +	 * @throws NotAcceptableStatusException, +	public List<MediaType> resolveMediaTypes(String key) throws NotAcceptableStatusException {, +	protected MediaType handleNoMatch(String key) throws NotAcceptableStatusException {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/CompositeContentTypeResolver.java, +import org.springframework.web.server.NotAcceptableStatusException;, +	public List<MediaType> resolveMediaTypes(ServerWebExchange exchange) throws NotAcceptableStatusException {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/ContentTypeResolver.java, +import org.springframework.web.server.NotAcceptableStatusException;, +	 * @throws NotAcceptableStatusException if the requested media types is invalid, +	List<MediaType> resolveMediaTypes(ServerWebExchange exchange) throws NotAcceptableStatusException;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/HeaderContentTypeResolver.java, +import org.springframework.web.server.NotAcceptableStatusException;, +	public List<MediaType> resolveMediaTypes(ServerWebExchange exchange) throws NotAcceptableStatusException {, +			throw new NotAcceptableStatusException(, +, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/AbstractMappingContentTypeResolver.java, +import org.springframework.web.server.NotAcceptableStatusException;, +			throws NotAcceptableStatusException {, +	 * @throws NotAcceptableStatusException, +	public List<MediaType> resolveMediaTypes(String key) throws NotAcceptableStatusException {, +	protected MediaType handleNoMatch(String key) throws NotAcceptableStatusException {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/CompositeContentTypeResolver.java, +import org.springframework.web.server.NotAcceptableStatusException;, +	public List<MediaType> resolveMediaTypes(ServerWebExchange exchange) throws NotAcceptableStatusException {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/ContentTypeResolver.java, +import org.springframework.web.server.NotAcceptableStatusException;, +	 * @throws NotAcceptableStatusException if the requested media types is invalid, +	List<MediaType> resolveMediaTypes(ServerWebExchange exchange) throws NotAcceptableStatusException;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/HeaderContentTypeResolver.java, +import org.springframework.web.server.NotAcceptableStatusException;, +	public List<MediaType> resolveMediaTypes(ServerWebExchange exchange) throws NotAcceptableStatusException {, +			throw new NotAcceptableStatusException(, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/ParameterContentTypeResolver.java, +import org.springframework.web.server.NotAcceptableStatusException;, +	protected MediaType handleNoMatch(String key) throws NotAcceptableStatusException {, +		throw new NotAcceptableStatusException(getMediaTypes());, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/AbstractMappingContentTypeResolver.java, +import org.springframework.web.server.NotAcceptableStatusException;, +			throws NotAcceptableStatusException {, +	 * @throws NotAcceptableStatusException, +	public List<MediaType> resolveMediaTypes(String key) throws NotAcceptableStatusException {, +	protected MediaType handleNoMatch(String key) throws NotAcceptableStatusException {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/CompositeContentTypeResolver.java, +import org.springframework.web.server.NotAcceptableStatusException;, +	public List<MediaType> resolveMediaTypes(ServerWebExchange exchange) throws NotAcceptableStatusException {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/ContentTypeResolver.java, +import org.springframework.web.server.NotAcceptableStatusException;, +	 * @throws NotAcceptableStatusException if the requested media types is invalid, +	List<MediaType> resolveMediaTypes(ServerWebExchange exchange) throws NotAcceptableStatusException;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/HeaderContentTypeResolver.java, +import org.springframework.web.server.NotAcceptableStatusException;, +	public List<MediaType> resolveMediaTypes(ServerWebExchange exchange) throws NotAcceptableStatusException {, +			throw new NotAcceptableStatusException(, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/ParameterContentTypeResolver.java, +import org.springframework.web.server.NotAcceptableStatusException;, +	protected MediaType handleNoMatch(String key) throws NotAcceptableStatusException {, +		throw new NotAcceptableStatusException(getMediaTypes());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/PathExtensionContentTypeResolver.java, +import org.springframework.web.server.NotAcceptableStatusException;, +	private static final Log logger = LogFactory.getLog(PathExtensionContentTypeResolver.class);]