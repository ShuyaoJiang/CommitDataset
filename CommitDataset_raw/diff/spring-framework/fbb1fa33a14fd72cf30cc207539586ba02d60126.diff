[+++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/JodaDateTimeFormatAnnotationFormatterFactory.java, +		this.fieldTypes = createFieldTypes();, +	// internal helpers, +, +	/** , +	 * Create the set of field types that may be annotated with @DateTimeFormat., +	 * Note: the 3 ReadablePartial concrete types are registered explicitly since addFormatterForFieldType rules exist for each of these types, +	 * (if we did not do this, the default byType rules for LocalDate, LocalTime, and LocalDateTime would take precedence over the annotation rule, which is not what we want), +	 * @see JodaTimeFormatterRegistrar#registerFormatters(org.springframework.format.FormatterRegistry), +	 */, +	private Set<Class<?>> createFieldTypes() {, +		Set<Class<?>> rawFieldTypes = new HashSet<Class<?>>(7);, +		rawFieldTypes.add(ReadableInstant.class);, +		rawFieldTypes.add(LocalDate.class);, +		rawFieldTypes.add(LocalTime.class);, +		rawFieldTypes.add(LocalDateTime.class);, +		rawFieldTypes.add(Date.class);, +		rawFieldTypes.add(Calendar.class);, +		rawFieldTypes.add(Long.class);, +		return Collections.unmodifiableSet(rawFieldTypes);		, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/JodaDateTimeFormatAnnotationFormatterFactory.java, +		this.fieldTypes = createFieldTypes();, +	// internal helpers, +, +	/** , +	 * Create the set of field types that may be annotated with @DateTimeFormat., +	 * Note: the 3 ReadablePartial concrete types are registered explicitly since addFormatterForFieldType rules exist for each of these types, +	 * (if we did not do this, the default byType rules for LocalDate, LocalTime, and LocalDateTime would take precedence over the annotation rule, which is not what we want), +	 * @see JodaTimeFormatterRegistrar#registerFormatters(org.springframework.format.FormatterRegistry), +	 */, +	private Set<Class<?>> createFieldTypes() {, +		Set<Class<?>> rawFieldTypes = new HashSet<Class<?>>(7);, +		rawFieldTypes.add(ReadableInstant.class);, +		rawFieldTypes.add(LocalDate.class);, +		rawFieldTypes.add(LocalTime.class);, +		rawFieldTypes.add(LocalDateTime.class);, +		rawFieldTypes.add(Date.class);, +		rawFieldTypes.add(Calendar.class);, +		rawFieldTypes.add(Long.class);, +		return Collections.unmodifiableSet(rawFieldTypes);		, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/JodaTimeConverters.java, +import org.joda.time.Instant;, +import org.joda.time.MutableDateTime;, +		registry.addConverter(new DateTimeToInstantConverter());, +		registry.addConverter(new DateTimeToMutableDateTimeConverter());, +	 * Used when binding a parsed DateTime to an Instant field. , +	 * @see DateTimeParser , +	 */, +	private static class DateTimeToInstantConverter implements Converter<DateTime, Instant> {, +		public Instant convert(DateTime source) {, +			return source.toInstant();, +		}, +	}, +, +	/** , +	 * Used when binding a parsed DateTime to a MutableDateTime field. , +	 * @see DateTimeParser , +	 */, +	private static class DateTimeToMutableDateTimeConverter implements Converter<DateTime, MutableDateTime> {, +		public MutableDateTime convert(DateTime source) {, +			return source.toMutableDateTime();, +		}, +	}, +	, +	/** , +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/JodaDateTimeFormatAnnotationFormatterFactory.java, +		this.fieldTypes = createFieldTypes();, +	// internal helpers, +, +	/** , +	 * Create the set of field types that may be annotated with @DateTimeFormat., +	 * Note: the 3 ReadablePartial concrete types are registered explicitly since addFormatterForFieldType rules exist for each of these types, +	 * (if we did not do this, the default byType rules for LocalDate, LocalTime, and LocalDateTime would take precedence over the annotation rule, which is not what we want), +	 * @see JodaTimeFormatterRegistrar#registerFormatters(org.springframework.format.FormatterRegistry), +	 */, +	private Set<Class<?>> createFieldTypes() {, +		Set<Class<?>> rawFieldTypes = new HashSet<Class<?>>(7);, +		rawFieldTypes.add(ReadableInstant.class);, +		rawFieldTypes.add(LocalDate.class);, +		rawFieldTypes.add(LocalTime.class);, +		rawFieldTypes.add(LocalDateTime.class);, +		rawFieldTypes.add(Date.class);, +		rawFieldTypes.add(Calendar.class);, +		rawFieldTypes.add(Long.class);, +		return Collections.unmodifiableSet(rawFieldTypes);		, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/JodaTimeConverters.java, +import org.joda.time.Instant;, +import org.joda.time.MutableDateTime;, +		registry.addConverter(new DateTimeToInstantConverter());, +		registry.addConverter(new DateTimeToMutableDateTimeConverter());, +	 * Used when binding a parsed DateTime to an Instant field. , +	 * @see DateTimeParser , +	 */, +	private static class DateTimeToInstantConverter implements Converter<DateTime, Instant> {, +		public Instant convert(DateTime source) {, +			return source.toInstant();, +		}]