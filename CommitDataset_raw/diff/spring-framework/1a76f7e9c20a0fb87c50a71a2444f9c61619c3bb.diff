[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java, + * {@code HttpRequestHandler} that serves static resources in an optimized way, + * according to the guidelines of Page Speed, YSlow, etc., + * <p>The {@linkplain #setLocations "locations"} property takes a list of Spring, + * {@link Resource} locations from which static resources are allowed to, + * be served by this handler. Resources could be served from a classpath location,, + * e.g. "classpath:/META-INF/public-web-resources/", allowing convenient packaging, + * and serving of resources such as .js, .css, and others in jar files., + * <p>This request handler may also be configured with a, + * {@link #setResourceResolvers(List) resourcesResolver} and, + * {@link #setResourceTransformers(List) resourceTransformer} chains to support, + * arbitrary resolution and transformation of resources being served. By default a, + * {@link PathResourceResolver} simply finds resources based on the configured, + * "locations". An application can configure additional resolvers and, + * transformers such as the {@link VersionResourceResolver} which can resolve, + * and prepare URLs for resources with a version in the URL., + * <p>This handler also properly evaluates the {@code Last-Modified} header (if, + * present) so that a {@code 304} status code will be returned as appropriate,, + * avoiding unnecessary overhead for resources that are already cached by the, + * client., + * @author Rossen Stoyanchev, +	/**, +	 * Specify the CORS configuration for resources served by this handler., +	 * <p>By default this is not set in which allows cross-origin requests., +	 */, +		if (this.resourceResolvers.isEmpty()) {, +			this.resourceResolvers.add(new PathResourceResolver());, +		}, +	 * Look for a {@code PathResourceResolver} among the configured resource, +	 * resolvers and set its {@code allowedLocations} property (if empty) to, +	 * match the {@link #setLocations locations} configured on this class., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java, + * {@code HttpRequestHandler} that serves static resources in an optimized way, + * according to the guidelines of Page Speed, YSlow, etc., + * <p>The {@linkplain #setLocations "locations"} property takes a list of Spring, + * {@link Resource} locations from which static resources are allowed to, + * be served by this handler. Resources could be served from a classpath location,, + * e.g. "classpath:/META-INF/public-web-resources/", allowing convenient packaging, + * and serving of resources such as .js, .css, and others in jar files., + * <p>This request handler may also be configured with a, + * {@link #setResourceResolvers(List) resourcesResolver} and, + * {@link #setResourceTransformers(List) resourceTransformer} chains to support, + * arbitrary resolution and transformation of resources being served. By default a, + * {@link PathResourceResolver} simply finds resources based on the configured, + * "locations". An application can configure additional resolvers and, + * transformers such as the {@link VersionResourceResolver} which can resolve, + * and prepare URLs for resources with a version in the URL., + * <p>This handler also properly evaluates the {@code Last-Modified} header (if, + * present) so that a {@code 304} status code will be returned as appropriate,, + * avoiding unnecessary overhead for resources that are already cached by the, + * client., + * @author Rossen Stoyanchev, +	/**, +	 * Specify the CORS configuration for resources served by this handler., +	 * <p>By default this is not set in which allows cross-origin requests., +	 */, +		if (this.resourceResolvers.isEmpty()) {, +			this.resourceResolvers.add(new PathResourceResolver());, +		}, +	 * Look for a {@code PathResourceResolver} among the configured resource, +	 * resolvers and set its {@code allowedLocations} property (if empty) to, +	 * match the {@link #setLocations locations} configured on this class., +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/ResourceUrlProviderTests.java, + * Copyright 2002-2016 the original author or authors., +	private final List<Resource> locations = new ArrayList<>();, +	private final ResourceHttpRequestHandler handler = new ResourceHttpRequestHandler();, +	private final Map<String, ResourceHttpRequestHandler> handlerMap = new HashMap<>();, +	private final ResourceUrlProvider urlProvider = new ResourceUrlProvider();, +	public void setUp() throws Exception {, +		this.handler.afterPropertiesSet();, +		this.urlProvider.setHandlerMap(this.handlerMap);, +, +		String url = this.urlProvider.getForLookupPath("/resources/foo.css");, +	@Test // SPR-13374, +		String url = this.urlProvider.getForRequestUrl(request, "/resources/foo.css?foo=bar&url=http://example.org");, +		List<ResourceResolver> resolvers = new ArrayList<>();, +		String url = this.urlProvider.getForLookupPath("/resources/foo.css");, +	@Test // SPR-12647, +		List<ResourceResolver> resolvers = new ArrayList<>();, +		this.urlProvider.setHandlerMap(this.handlerMap);, +		String url = this.urlProvider.getForLookupPath("/resources/foo.css");, +	@Test // SPR-12592, +, +		ResourceUrlProvider urlProviderBean = context.getBean(ResourceUrlProvider.class);, +		assertThat(urlProviderBean.getHandlerMap(), Matchers.hasKey("/resources/**"));, +		assertFalse(urlProviderBean.isAutodetect());, +, +	@Configuration @SuppressWarnings("unused"), +, +			HashMap<String, ResourceHttpRequestHandler> handlerMap = new HashMap<>();]