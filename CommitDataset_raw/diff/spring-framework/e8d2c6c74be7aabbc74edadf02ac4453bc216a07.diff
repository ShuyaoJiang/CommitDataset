[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java, +	/**, +	 * Invoked when an error happens while flushing. Defaults to no-op., +	 * Servlet 3.1 based implementations will receive, +	 * {@link AsyncListener#onError(Throwable)} event., +	 */, +	protected void flushingFailed(Throwable t) {, +	}, +, +					processor.flushingFailed(ex);, +					return;, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java, +	/**, +	 * Invoked when an error happens while flushing. Defaults to no-op., +	 * Servlet 3.1 based implementations will receive, +	 * {@link AsyncListener#onError(Throwable)} event., +	 */, +	protected void flushingFailed(Throwable t) {, +	}, +, +					processor.flushingFailed(ex);, +					return;, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java, +	/**, +	 * Invoked when an error happens while writing. Defaults to no-op., +	 * Servlet 3.1 based implementations will receive, +	 * {@link WriteListener#onError(Throwable)} event., +	 */, +	protected void writingFailed(Throwable t) {, +	}, +, +, +						processor.writingFailed(ex);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java, +	/**, +	 * Invoked when an error happens while flushing. Defaults to no-op., +	 * Servlet 3.1 based implementations will receive, +	 * {@link AsyncListener#onError(Throwable)} event., +	 */, +	protected void flushingFailed(Throwable t) {, +	}, +, +					processor.flushingFailed(ex);, +					return;, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java, +	/**, +	 * Invoked when an error happens while writing. Defaults to no-op., +	 * Servlet 3.1 based implementations will receive, +	 * {@link WriteListener#onError(Throwable)} event., +	 */, +	protected void writingFailed(Throwable t) {, +	}, +, +, +						processor.writingFailed(ex);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpResponse.java, +, +			ResponseBodyProcessor processor = bodyProcessor;, +			if (processor != null) {, +				processor.cancel();, +				processor.onError(ex);, +, +			ResponseBodyProcessor processor = bodyProcessor;, +			if (processor != null) {, +				processor.cancel();, +				processor.onComplete();, +			ResponseBodyProcessor processor = bodyProcessor;, +			if (processor != null) {, +				processor.onWritePossible();, +			ResponseBodyProcessor processor = bodyProcessor;, +			if (processor != null) {, +				processor.cancel();, +				processor.onError(ex);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java, +	/**, +	 * Invoked when an error happens while flushing. Defaults to no-op., +	 * Servlet 3.1 based implementations will receive, +	 * {@link AsyncListener#onError(Throwable)} event., +	 */, +	protected void flushingFailed(Throwable t) {, +	}, +, +					processor.flushingFailed(ex);, +					return;, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteProcessor.java, +	/**, +	 * Invoked when an error happens while writing. Defaults to no-op., +	 * Servlet 3.1 based implementations will receive, +	 * {@link WriteListener#onError(Throwable)} event., +	 */, +	protected void writingFailed(Throwable t) {, +	}, +, +, +						processor.writingFailed(ex);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpResponse.java, +, +			ResponseBodyProcessor processor = bodyProcessor;, +			if (processor != null) {, +				processor.cancel();]