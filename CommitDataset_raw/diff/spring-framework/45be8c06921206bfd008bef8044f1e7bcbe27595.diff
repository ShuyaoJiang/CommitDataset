[+++ b/spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverter.java, + * @author Sebastien Deleuze, +			this.customizeUnmarshaller(unmarshaller);, +			this.customizeMarshaller(marshaller);, +	/**, +	 * Customize the {@link Marshaller} created by this, +	 * message converter before using it to write the object to the output., +	 * @param marshaller the marshaller to customize, +	 * @see #createMarshaller(Class), +	 * @since 4.0.3, +	 */, +	protected void customizeMarshaller(Marshaller marshaller) {, +, +	}, +, +	/**, +	 * Customize the {@link Unmarshaller} created by this, +	 * message converter before using it to read the object from the input., +	 * @param unmarshaller the unmarshaller to customize, +	 * @see #createUnmarshaller(Class), +	 * @since 4.0.3, +	 */, +	protected void customizeUnmarshaller(Unmarshaller unmarshaller) {, +, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverter.java, + * @author Sebastien Deleuze, +			this.customizeUnmarshaller(unmarshaller);, +			this.customizeMarshaller(marshaller);, +	/**, +	 * Customize the {@link Marshaller} created by this, +	 * message converter before using it to write the object to the output., +	 * @param marshaller the marshaller to customize, +	 * @see #createMarshaller(Class), +	 * @since 4.0.3, +	 */, +	protected void customizeMarshaller(Marshaller marshaller) {, +, +	}, +, +	/**, +	 * Customize the {@link Unmarshaller} created by this, +	 * message converter before using it to read the object from the input., +	 * @param unmarshaller the unmarshaller to customize, +	 * @see #createUnmarshaller(Class), +	 * @since 4.0.3, +	 */, +	protected void customizeUnmarshaller(Unmarshaller unmarshaller) {, +, +	}, +, +++ b/spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverterTests.java, +import javax.xml.bind.Marshaller;, +import javax.xml.bind.Unmarshaller;, +import javax.xml.bind.annotation.adapters.XmlAdapter;, +import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;, +, +/**, + * Tests for {@link Jaxb2RootElementHttpMessageConverter}., + *, + * @author Arjen Poutsma, + * @author Sebastien Deleuze, + */, +	@Test, +	public void customizeMarshaller() throws Exception {, +		MockHttpOutputMessage outputMessage = new MockHttpOutputMessage();, +		MyJaxb2RootElementHttpMessageConverter myConverter = new MyJaxb2RootElementHttpMessageConverter();, +		myConverter.write(new MyRootElement(new MyCustomElement("a", "b")), null, outputMessage);, +		assertXMLEqual("Invalid result", "<myRootElement><element>a|||b</element></myRootElement>",, +				outputMessage.getBodyAsString(Charset.forName("UTF-8")));, +	}, +, +	@Test, +	public void customizeUnmarshaller() throws Exception {, +		byte[] body = "<myRootElement><element>a|||b</element></myRootElement>".getBytes("UTF-8");, +		MyJaxb2RootElementHttpMessageConverter myConverter = new MyJaxb2RootElementHttpMessageConverter();, +		MockHttpInputMessage inputMessage = new MockHttpInputMessage(body);, +		MyRootElement result = (MyRootElement) myConverter.read(MyRootElement.class, inputMessage);, +		assertEquals("a", result.getElement().getField1());, +		assertEquals("b", result.getElement().getField2());, +	}, +, +	public static class MyJaxb2RootElementHttpMessageConverter extends Jaxb2RootElementHttpMessageConverter {, +, +		@Override, +		protected void customizeMarshaller(Marshaller marshaller) {, +			marshaller.setAdapter(new MyCustomElementAdapter());, +		}, +, +		@Override, +		protected void customizeUnmarshaller(Unmarshaller unmarshaller) {, +			unmarshaller.setAdapter(new MyCustomElementAdapter());, +		}, +	}, +, +	public static class MyCustomElement {, +		private String field1;, +		private String field2;, +]