[+++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +import java.util.HashSet;, +import java.util.LinkedList;, +		Set<String> processedBeans = new HashSet<String>();, +			List<BeanFactoryPostProcessor> regularPostProcessors = new LinkedList<BeanFactoryPostProcessor>();, +			List<BeanDefinitionRegistryPostProcessor> registryPostProcessors =, +					new LinkedList<BeanDefinitionRegistryPostProcessor>();, +					BeanDefinitionRegistryPostProcessor registryPostProcessor =, +							(BeanDefinitionRegistryPostProcessor) postProcessor;, +					registryPostProcessor.postProcessBeanDefinitionRegistry(registry);, +					registryPostProcessors.add(registryPostProcessor);, +				}, +				else {, +					regularPostProcessors.add(postProcessor);, +			Map<String, BeanDefinitionRegistryPostProcessor> beanMap =, +					beanFactory.getBeansOfType(BeanDefinitionRegistryPostProcessor.class, true, false);, +			List<BeanDefinitionRegistryPostProcessor> registryPostProcessorBeans =, +					new ArrayList<BeanDefinitionRegistryPostProcessor>(beanMap.values());, +			OrderComparator.sort(registryPostProcessorBeans);, +			for (BeanDefinitionRegistryPostProcessor postProcessor : registryPostProcessorBeans) {, +				postProcessor.postProcessBeanDefinitionRegistry(registry);, +			invokeBeanFactoryPostProcessors(registryPostProcessors, beanFactory);, +			invokeBeanFactoryPostProcessors(registryPostProcessorBeans, beanFactory);, +			invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);, +			processedBeans.addAll(beanMap.keySet());, +		}, +		else {, +		}, +			if (processedBeans.contains(ppName)) {, +				// skip - already processed in first phase above, +			}, +			else if (isTypeMatch(ppName, PriorityOrdered.class)) {, +			Collection<? extends BeanFactoryPostProcessor> postProcessors, ConfigurableListableBeanFactory beanFactory) {, +			// Let subclasses do some final clean-up if they wish..., +, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +import java.util.HashSet;, +import java.util.LinkedList;, +		Set<String> processedBeans = new HashSet<String>();, +			List<BeanFactoryPostProcessor> regularPostProcessors = new LinkedList<BeanFactoryPostProcessor>();, +			List<BeanDefinitionRegistryPostProcessor> registryPostProcessors =, +					new LinkedList<BeanDefinitionRegistryPostProcessor>();, +					BeanDefinitionRegistryPostProcessor registryPostProcessor =, +							(BeanDefinitionRegistryPostProcessor) postProcessor;, +					registryPostProcessor.postProcessBeanDefinitionRegistry(registry);, +					registryPostProcessors.add(registryPostProcessor);, +				}, +				else {, +					regularPostProcessors.add(postProcessor);, +			Map<String, BeanDefinitionRegistryPostProcessor> beanMap =, +					beanFactory.getBeansOfType(BeanDefinitionRegistryPostProcessor.class, true, false);, +			List<BeanDefinitionRegistryPostProcessor> registryPostProcessorBeans =, +					new ArrayList<BeanDefinitionRegistryPostProcessor>(beanMap.values());, +			OrderComparator.sort(registryPostProcessorBeans);, +			for (BeanDefinitionRegistryPostProcessor postProcessor : registryPostProcessorBeans) {, +				postProcessor.postProcessBeanDefinitionRegistry(registry);, +			invokeBeanFactoryPostProcessors(registryPostProcessors, beanFactory);, +			invokeBeanFactoryPostProcessors(registryPostProcessorBeans, beanFactory);, +			invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);, +			processedBeans.addAll(beanMap.keySet());, +		}, +		else {, +		}, +			if (processedBeans.contains(ppName)) {, +				// skip - already processed in first phase above, +			}, +			else if (isTypeMatch(ppName, PriorityOrdered.class)) {, +			Collection<? extends BeanFactoryPostProcessor> postProcessors, ConfigurableListableBeanFactory beanFactory) {, +			// Let subclasses do some final clean-up if they wish..., +, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/Spr7167Tests.java, +/*, + * Copyright 2002-2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +]