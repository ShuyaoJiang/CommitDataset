[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java, +	/**, +	 * Find the {@code ContentNegotiationManager} bean created by or registered, +	 * with the {@code annotation-driven} element., +	 * @return a bean definition, bean reference, or null., +	 */, +	public static Object getContentNegotiationManager(ParserContext context) {, +		String name = AnnotationDrivenBeanDefinitionParser.HANDLER_MAPPING_BEAN_NAME;, +		if (context.getRegistry().containsBeanDefinition(name)) {, +			BeanDefinition handlerMappingBeanDef = context.getRegistry().getBeanDefinition(name);, +			return handlerMappingBeanDef.getPropertyValues().get("contentNegotiationManager");, +		}, +		name = AnnotationDrivenBeanDefinitionParser.CONTENT_NEGOTIATION_MANAGER_BEAN_NAME;, +		if (context.getRegistry().containsBeanDefinition(name)) {, +			return new RuntimeBeanReference(name);, +		}, +		return null;, +	}, +, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java, +	/**, +	 * Find the {@code ContentNegotiationManager} bean created by or registered, +	 * with the {@code annotation-driven} element., +	 * @return a bean definition, bean reference, or null., +	 */, +	public static Object getContentNegotiationManager(ParserContext context) {, +		String name = AnnotationDrivenBeanDefinitionParser.HANDLER_MAPPING_BEAN_NAME;, +		if (context.getRegistry().containsBeanDefinition(name)) {, +			BeanDefinition handlerMappingBeanDef = context.getRegistry().getBeanDefinition(name);, +			return handlerMappingBeanDef.getPropertyValues().get("contentNegotiationManager");, +		}, +		name = AnnotationDrivenBeanDefinitionParser.CONTENT_NEGOTIATION_MANAGER_BEAN_NAME;, +		if (context.getRegistry().containsBeanDefinition(name)) {, +			return new RuntimeBeanReference(name);, +		}, +		return null;, +	}, +, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +import org.springframework.beans.MutablePropertyValues;, +, +		MutablePropertyValues values = resourceHandlerDef.getPropertyValues();, +		values.add("locations", locations);, +			values.add("cacheSeconds", cacheSeconds);, +			values.add("cacheControl", cacheControl);, +		Object manager = MvcNamespaceUtils.getContentNegotiationManager(parserContext);, +		if (manager != null) {, +			values.add("contentNegotiationManager", manager);, +		}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java, +	/**, +	 * Find the {@code ContentNegotiationManager} bean created by or registered, +	 * with the {@code annotation-driven} element., +	 * @return a bean definition, bean reference, or null., +	 */, +	public static Object getContentNegotiationManager(ParserContext context) {, +		String name = AnnotationDrivenBeanDefinitionParser.HANDLER_MAPPING_BEAN_NAME;, +		if (context.getRegistry().containsBeanDefinition(name)) {, +			BeanDefinition handlerMappingBeanDef = context.getRegistry().getBeanDefinition(name);, +			return handlerMappingBeanDef.getPropertyValues().get("contentNegotiationManager");, +		}, +		name = AnnotationDrivenBeanDefinitionParser.CONTENT_NEGOTIATION_MANAGER_BEAN_NAME;, +		if (context.getRegistry().containsBeanDefinition(name)) {, +			return new RuntimeBeanReference(name);, +		}, +		return null;, +	}, +, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +import org.springframework.beans.MutablePropertyValues;, +, +		MutablePropertyValues values = resourceHandlerDef.getPropertyValues();, +		values.add("locations", locations);, +			values.add("cacheSeconds", cacheSeconds);, +			values.add("cacheControl", cacheControl);, +		Object manager = MvcNamespaceUtils.getContentNegotiationManager(parserContext);, +		if (manager != null) {, +			values.add("contentNegotiationManager", manager);, +		}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewResolversBeanDefinitionParser.java, + * Copyright 2002-2016 the original author or authors., +		Object manager = MvcNamespaceUtils.getContentNegotiationManager(context);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java, +	/**, +	 * Find the {@code ContentNegotiationManager} bean created by or registered, +	 * with the {@code annotation-driven} element., +	 * @return a bean definition, bean reference, or null., +	 */, +	public static Object getContentNegotiationManager(ParserContext context) {, +		String name = AnnotationDrivenBeanDefinitionParser.HANDLER_MAPPING_BEAN_NAME;, +		if (context.getRegistry().containsBeanDefinition(name)) {, +			BeanDefinition handlerMappingBeanDef = context.getRegistry().getBeanDefinition(name);, +			return handlerMappingBeanDef.getPropertyValues().get("contentNegotiationManager");, +		}, +		name = AnnotationDrivenBeanDefinitionParser.CONTENT_NEGOTIATION_MANAGER_BEAN_NAME;]