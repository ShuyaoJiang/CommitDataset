[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/RedirectView.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.reactive.result.view;, +, +import java.io.UnsupportedEncodingException;, +import java.net.URI;, +import java.nio.charset.Charset;, +import java.util.Collections;, +import java.util.Locale;, +import java.util.Map;, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +, +import reactor.core.publisher.Mono;, +, +import org.springframework.http.HttpStatus;, +import org.springframework.http.MediaType;, +import org.springframework.http.server.reactive.ServerHttpRequest;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +import org.springframework.util.Assert;, +import org.springframework.util.ObjectUtils;, +import org.springframework.util.StringUtils;, +import org.springframework.web.reactive.HandlerMapping;, +import org.springframework.web.server.ServerWebExchange;, +import org.springframework.web.util.UriComponentsBuilder;, +import org.springframework.web.util.UriUtils;, +, +/**, + * View that redirects to an absolute or context relative URL. The URL may be a URI, + * template in which case the URI template variables will be replaced with values, + * available in the model., + *, + * <p>A URL for this view is supposed to be a HTTP redirect which does the redirect via, + * sending an {@link HttpStatus#SEE_OTHER} code. If HTTP 1.0 compatibility is needed,, + * {@link HttpStatus#FOUND} code can be set via {@link #setStatusCode(HttpStatus)}., + *, + * <p>Note that the default value for the "contextRelative" flag is true., + * With the flag on, URLs starting with "/" are considered relative to the web application, + * context path, while with this flag off they are considered relative to the web server, + * root., + *, + * @author Sebastien Deleuze, + * @see #setContextRelative, + * @since 5.0, + */, +public class RedirectView extends AbstractUrlBasedView {, +, +	private static final Pattern URI_TEMPLATE_VARIABLE_PATTERN = Pattern.compile("\\{([^/]+?)\\}");, +, +, +	private boolean contextRelative = true;, +, +	private HttpStatus statusCode = HttpStatus.SEE_OTHER;, +, +	private boolean propagateQueryParams = false;, +, +	private String[] hosts;, +, +, +	/**, +	 * Create a new {@code RedirectView} with the given redirect URL., +	 *, +	 * @see #builder(String), +	 */, +	public RedirectView(String redirectUrl) {, +		super(redirectUrl);, +	}, +, +, +	/**, +	 * Return a builder for a {@code RedirectView}., +	 */, +	public static Builder builder(String redirectUrl) {, +		return new BuilderImpl(redirectUrl);, +	}, +, +, +	/**, +	 * Set whether to interpret a given URL that starts with a slash ("/"), +	 * as relative to the current context path., +	 * <p>Default is "true": the context path will be, +	 * prepended to the URL in such a case. If "false", an URL that starts, +	 * with a slash will be interpreted as absolute, i.e. taken as-is., +	 */, +	public void setContextRelative(boolean contextRelative) {]