[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AnnotationMethodMessageHandler.java, +import java.util.ArrayList;, +import org.springframework.messaging.handler.method.HandlerMethodArgumentResolver;, +import org.springframework.messaging.handler.method.HandlerMethodReturnValueHandler;, +	private List<HandlerMethodArgumentResolver> customArgumentResolvers = new ArrayList<HandlerMethodArgumentResolver>();, +, +	private List<HandlerMethodReturnValueHandler> customReturnValueHandlers = new ArrayList<HandlerMethodReturnValueHandler>();, +, +	/**, +	 * Sets the custom list of {@code HandlerMethodArgumentResolver}s that will be used as, +	 * the <em>first</em> argument resolvers when resolving the values of the mapped, +	 * methods., +	 *, +	 * @param customArgumentResolvers the custom argument resolvers to be used first;, +	 *        never {@code null}., +	 */, +	public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {, +		Assert.notNull(customArgumentResolvers, "The 'customArgumentResolvers' cannot be null.");, +		this.customArgumentResolvers = customArgumentResolvers;, +	}, +, +	/**, +	 * Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used, +	 * as the <em>first</em> return value handlers when handling the method return values., +	 *, +	 * @param customReturnValueHandlers the custom return value resolvers that will be, +	 *        used first; never {@code null}., +	 */, +	public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {, +		Assert.notNull(customReturnValueHandlers, "The 'customReturnValueHandlers' cannot be null.");, +		this.customReturnValueHandlers = customReturnValueHandlers;, +	}, +, +		// Annotation-based argument resolution, +		// Type-based argument resolution, +		this.argumentResolvers.addResolver(new PrincipalMethodArgumentResolver());, +		this.argumentResolvers.addResolver(new MessageMethodArgumentResolver());, +, +		// custom arguments, +		this.argumentResolvers.addResolvers(this.customArgumentResolvers);, +, +		// Annotation-based return value types, +, +		// custom return value types, +		this.returnValueHandlers.addHandlers(this.customReturnValueHandlers);, +]