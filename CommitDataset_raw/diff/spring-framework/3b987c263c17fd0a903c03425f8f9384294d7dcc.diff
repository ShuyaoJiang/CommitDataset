[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/HandshakeInfo.java, +import java.util.Optional;, +@SuppressWarnings("OptionalUsedAsFieldOrParameterType"), +	private final Optional<String> protocol;, +, +	public HandshakeInfo(URI uri, HttpHeaders headers, Mono<Principal> principal,, +			Optional<String> subProtocol) {, +, +		Assert.notNull(principal, "Principal is required.");, +		Assert.notNull(subProtocol, "Sub-protocol is required.");, +		this.principalMono = principal;, +		this.protocol = subProtocol;, +	 * Return the handshake HTTP headers. Those are the request headers for a, +	 * server session and the response headers for a client session., +	 * Return the principal associated with the handshake HTTP request., +	/**, +	 * The sub-protocol negotiated at handshake time., +	 * @see <a href="https://tools.ietf.org/html/rfc6455#section-1.9">, +	 *     https://tools.ietf.org/html/rfc6455#section-1.9</a>, +	 */, +	public Optional<String> getSubProtocol() {, +		return this.protocol;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/HandshakeInfo.java, +import java.util.Optional;, +@SuppressWarnings("OptionalUsedAsFieldOrParameterType"), +	private final Optional<String> protocol;, +, +	public HandshakeInfo(URI uri, HttpHeaders headers, Mono<Principal> principal,, +			Optional<String> subProtocol) {, +, +		Assert.notNull(principal, "Principal is required.");, +		Assert.notNull(subProtocol, "Sub-protocol is required.");, +		this.principalMono = principal;, +		this.protocol = subProtocol;, +	 * Return the handshake HTTP headers. Those are the request headers for a, +	 * server session and the response headers for a client session., +	 * Return the principal associated with the handshake HTTP request., +	/**, +	 * The sub-protocol negotiated at handshake time., +	 * @see <a href="https://tools.ietf.org/html/rfc6455#section-1.9">, +	 *     https://tools.ietf.org/html/rfc6455#section-1.9</a>, +	 */, +	public Optional<String> getSubProtocol() {, +		return this.protocol;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/WebSocketHandler.java, +	 * <p>By default an empty array is returned., +	default String[] getSubProtocols() {, +		return new String[0];, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/HandshakeInfo.java, +import java.util.Optional;, +@SuppressWarnings("OptionalUsedAsFieldOrParameterType"), +	private final Optional<String> protocol;, +, +	public HandshakeInfo(URI uri, HttpHeaders headers, Mono<Principal> principal,, +			Optional<String> subProtocol) {, +, +		Assert.notNull(principal, "Principal is required.");, +		Assert.notNull(subProtocol, "Sub-protocol is required.");, +		this.principalMono = principal;, +		this.protocol = subProtocol;, +	 * Return the handshake HTTP headers. Those are the request headers for a, +	 * server session and the response headers for a client session., +	 * Return the principal associated with the handshake HTTP request., +	/**, +	 * The sub-protocol negotiated at handshake time., +	 * @see <a href="https://tools.ietf.org/html/rfc6455#section-1.9">, +	 *     https://tools.ietf.org/html/rfc6455#section-1.9</a>, +	 */, +	public Optional<String> getSubProtocol() {, +		return this.protocol;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/WebSocketHandler.java, +	 * <p>By default an empty array is returned., +	default String[] getSubProtocols() {, +		return new String[0];, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/client/ReactorNettyWebSocketClient.java, +import java.util.Optional;, +import reactor.ipc.netty.http.client.HttpClientResponse;, +public class ReactorNettyWebSocketClient extends WebSocketClientSupport implements WebSocketClient {, +		// TODO: https://github.com/reactor/reactor-netty/issues/19, +		String[] protocols = getSubProtocols(headers, handler);, +		// TODO: https://github.com/reactor/reactor-netty/issues/20, +, +					addRequestHeaders(request, headers);, +				.then(in -> {, +					HttpHeaders responseHeaders = getResponseHeaders(in);, +					String protocol = responseHeaders.getFirst(SEC_WEBSOCKET_PROTOCOL);, +					HandshakeInfo info = new HandshakeInfo(url, responseHeaders, Mono.empty(),, +							Optional.ofNullable(protocol));, +, +					ByteBufAllocator allocator = in.channel().alloc();, +, +					NettyOutbound out = outboundRef.get();, +					WebSocketSession session = new ReactorNettyWebSocketSession(in, out, info, factory);, +	private void addRequestHeaders(HttpClientRequest request, HttpHeaders headers) {]