[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/handler/ConcurrentWebSocketSessionDecorator.java, + * thread will fail to acquire the flush lock and the messages will be buffered, + * instead: At that time, the specified buffer-size limit and send-time limit will, + * be checked and the session closed if the limits are exceeded., +	/**, +	 * Create a new {@code ConcurrentWebSocketSessionDecorator}., +	 * @param delegate the {@code WebSocketSession} to delegate to, +	 * @param sendTimeLimit the send-time limit (milliseconds), +	 * @param bufferSizeLimit the buffer-size limit (number of bytes), +	 */, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/handler/ConcurrentWebSocketSessionDecorator.java, + * thread will fail to acquire the flush lock and the messages will be buffered, + * instead: At that time, the specified buffer-size limit and send-time limit will, + * be checked and the session closed if the limits are exceeded., +	/**, +	 * Create a new {@code ConcurrentWebSocketSessionDecorator}., +	 * @param delegate the {@code WebSocketSession} to delegate to, +	 * @param sendTimeLimit the send-time limit (milliseconds), +	 * @param bufferSizeLimit the buffer-size limit (number of bytes), +	 */, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java, + * messages to a {@link SubProtocolHandler} along with a {@link MessageChannel} to which, + * the sub-protocol handler can send messages from WebSocket clients to the application., + *, + * <p>Also an implementation of {@link MessageHandler} that finds the WebSocket session, + * associated with the {@link Message} and passes it, along with the message, to the, + * sub-protocol handler to send messages from the application back to the client., +public class SubProtocolWebSocketHandler, +		implements WebSocketHandler, SubProtocolCapable, MessageHandler, SmartLifecycle {, +	/**, +	 * Create a new {@code SubProtocolWebSocketHandler} for the given inbound and outbound channels., +	 * @param clientInboundChannel the inbound {@code MessageChannel}, +	 * @param clientOutboundChannel the outbound {@code MessageChannel}, +	 */, +		Assert.notNull(clientInboundChannel, "Inbound MessageChannel must not be null");, +		Assert.notNull(clientOutboundChannel, "Outbound MessageChannel must not be null");, +	 * Return the default sub-protocol handler to use., +	/**, +	 * Specify the send-time limit (milliseconds)., +	 * @see ConcurrentWebSocketSessionDecorator, +	 */, +	/**, +	 * Return the send-time limit (milliseconds)., +	 */, +	/**, +	 * Specify the buffer-size limit (number of bytes)., +	 * @see ConcurrentWebSocketSessionDecorator, +	 */, +	/**, +	 * Return the buffer-size limit (number of bytes)., +	 */, +		return this.sendBufferSizeLimit;, +	/**, +	 * Return a String describing internal state and counters., +	 */, +	public String getStatsInfo() {, +		return this.stats.toString();, +	}, +, +, +]