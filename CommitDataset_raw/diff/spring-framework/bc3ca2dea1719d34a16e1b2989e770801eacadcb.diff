[+++ b/spring-web/src/main/java/org/springframework/http/converter/json/GsonBase64ByteArrayJsonTypeAdapter.java, +		String encoded = new String(this.base64.encode(src), DEFAULT_CHARSET);, +		return new JsonPrimitive(encoded);, +	public byte[] deserialize(JsonElement json, Type type, JsonDeserializationContext cxt) throws JsonParseException {, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/GsonBase64ByteArrayJsonTypeAdapter.java, +		String encoded = new String(this.base64.encode(src), DEFAULT_CHARSET);, +		return new JsonPrimitive(encoded);, +	public byte[] deserialize(JsonElement json, Type type, JsonDeserializationContext cxt) throws JsonParseException {, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/GsonFactoryBean.java, + * A {@link FactoryBean} for creating a Google Gson 2.x {@link Gson} instance., +, +	 * Set the GsonBuilder instance to use. If not set, the GsonBuilder will be, +	 * created using its default constructor., +	 * Return the configured GsonBuilder instance to use, if any., +	 * Whether to use the {@link GsonBuilder#setPrettyPrinting()} when writing, +	 * JSON. This is a shortcut for setting up a {@code Gson} as follows:, +	 * Whether to use the {@link GsonBuilder#serializeNulls()} option when, +	 * writing JSON. This is a shortcut for setting up a {@code Gson} as, +	 * follows:, +	 * Whether to use the {@link GsonBuilder#disableHtmlEscaping()} when writing, +	 * JSON. Set to {@code true} to disable HTML escaping in JSON. This is a, +	 * shortcut for setting up a {@code Gson} as follows:, +	 * is registered via, +	 * {@link GsonBuilder#registerTypeHierarchyAdapter(Class, Object)}, +		if (this.gsonBuilder == null) {, +			logger.debug("org.apache.commons.codec.binary.Base64 is not " +, +					"available on the class path. Gson Base64 encoding is disabled.");, +	 * Return the created Gson instance., +++ b/spring-web/src/main/java/org/springframework/http/converter/json/GsonBase64ByteArrayJsonTypeAdapter.java, +		String encoded = new String(this.base64.encode(src), DEFAULT_CHARSET);, +		return new JsonPrimitive(encoded);, +	public byte[] deserialize(JsonElement json, Type type, JsonDeserializationContext cxt) throws JsonParseException {, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/GsonFactoryBean.java, + * A {@link FactoryBean} for creating a Google Gson 2.x {@link Gson} instance., +, +	 * Set the GsonBuilder instance to use. If not set, the GsonBuilder will be, +	 * created using its default constructor., +	 * Return the configured GsonBuilder instance to use, if any., +	 * Whether to use the {@link GsonBuilder#setPrettyPrinting()} when writing, +	 * JSON. This is a shortcut for setting up a {@code Gson} as follows:, +	 * Whether to use the {@link GsonBuilder#serializeNulls()} option when, +	 * writing JSON. This is a shortcut for setting up a {@code Gson} as, +	 * follows:, +	 * Whether to use the {@link GsonBuilder#disableHtmlEscaping()} when writing, +	 * JSON. Set to {@code true} to disable HTML escaping in JSON. This is a, +	 * shortcut for setting up a {@code Gson} as follows:, +	 * is registered via, +	 * {@link GsonBuilder#registerTypeHierarchyAdapter(Class, Object)}, +		if (this.gsonBuilder == null) {, +			logger.debug("org.apache.commons.codec.binary.Base64 is not " +, +					"available on the class path. Gson Base64 encoding is disabled.");, +	 * Return the created Gson instance., +++ b/spring-web/src/main/java/org/springframework/http/converter/json/GsonHttpMessageConverter.java, +	 * Set the {@code Gson} instance to use., +	 * If not set, a default {@link Gson#Gson() Gson} instance is used., +	 *, +		Assert.notNull(gson, "'gson' is required");, +	 * Return the configured {@code Gson} instance for this converter., +	 * <p>Prefixing the JSON string in this manner is used to help prevent JSON, +	 * Hijacking. The prefix renders the string syntactically invalid as a script, +	 * so that it cannot be hijacked. This prefix does not affect the evaluation, +	 * of JSON, but if JSON validation is performed on the string, the prefix, +	 * would need to be ignored., +	 *, +	 * <p>The default implementation returns {@code TypeToken.get(type)}, but, +	 * this can be overridden in subclasses to allow for custom generic, +	 * collection handling. For instance:, +			this.gson.toJson(o, writer);, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/GsonBase64ByteArrayJsonTypeAdapter.java, +		String encoded = new String(this.base64.encode(src), DEFAULT_CHARSET);, +		return new JsonPrimitive(encoded);, +	public byte[] deserialize(JsonElement json, Type type, JsonDeserializationContext cxt) throws JsonParseException {, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/GsonFactoryBean.java, + * A {@link FactoryBean} for creating a Google Gson 2.x {@link Gson} instance., +, +	 * Set the GsonBuilder instance to use. If not set, the GsonBuilder will be, +	 * created using its default constructor., +	 * Return the configured GsonBuilder instance to use, if any., +	 * Whether to use the {@link GsonBuilder#setPrettyPrinting()} when writing, +	 * JSON. This is a shortcut for setting up a {@code Gson} as follows:, +	 * Whether to use the {@link GsonBuilder#serializeNulls()} option when, +	 * writing JSON. This is a shortcut for setting up a {@code Gson} as, +	 * follows:, +	 * Whether to use the {@link GsonBuilder#disableHtmlEscaping()} when writing, +	 * JSON. Set to {@code true} to disable HTML escaping in JSON. This is a, +	 * shortcut for setting up a {@code Gson} as follows:, +	 * is registered via, +	 * {@link GsonBuilder#registerTypeHierarchyAdapter(Class, Object)}, +		if (this.gsonBuilder == null) {, +			logger.debug("org.apache.commons.codec.binary.Base64 is not " +, +					"available on the class path. Gson Base64 encoding is disabled.");, +	 * Return the created Gson instance., +++ b/spring-web/src/main/java/org/springframework/http/converter/json/GsonHttpMessageConverter.java, +	 * Set the {@code Gson} instance to use., +	 * If not set, a default {@link Gson#Gson() Gson} instance is used., +	 *, +		Assert.notNull(gson, "'gson' is required");, +	 * Return the configured {@code Gson} instance for this converter., +	 * <p>Prefixing the JSON string in this manner is used to help prevent JSON, +	 * Hijacking. The prefix renders the string syntactically invalid as a script]