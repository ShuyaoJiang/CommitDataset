[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java, + * @author Gary Russell, +			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE);, +			if ((hasValueTypeAttribute && hasValueRefAttribute) ||, +				(hasValueTypeAttribute && !hasValueAttribute) ||, +					(hasValueTypeAttribute && valueEle != null)) {, +				error("<entry> element is only allowed to contain a 'value-type' " +, +						"attribute when it has a 'value' attribute", entryEle);, +			}, +				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE);, +				if (!StringUtils.hasText(valueType)) {, +					valueType = defaultValueType;, +				}, +				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java, + * @author Gary Russell, +			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE);, +			if ((hasValueTypeAttribute && hasValueRefAttribute) ||, +				(hasValueTypeAttribute && !hasValueAttribute) ||, +					(hasValueTypeAttribute && valueEle != null)) {, +				error("<entry> element is only allowed to contain a 'value-type' " +, +						"attribute when it has a 'value' attribute", entryEle);, +			}, +				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE);, +				if (!StringUtils.hasText(valueType)) {, +					valueType = defaultValueType;, +				}, +				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle);, +++ b/spring-beans/src/main/resources/org/springframework/beans/factory/xml/spring-beans-3.2.xsd, +		<xsd:attribute name="value-type" type="xsd:string">, +			<xsd:annotation>, +				<xsd:documentation><![CDATA[, +	A short-cut alternative to a 'type' attribute on a nested, +	"<value type='...' >...</value>" element., +				]]></xsd:documentation>, +			</xsd:annotation>, +		</xsd:attribute>, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java, + * @author Gary Russell, +			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE);, +			if ((hasValueTypeAttribute && hasValueRefAttribute) ||, +				(hasValueTypeAttribute && !hasValueAttribute) ||, +					(hasValueTypeAttribute && valueEle != null)) {, +				error("<entry> element is only allowed to contain a 'value-type' " +, +						"attribute when it has a 'value' attribute", entryEle);, +			}, +				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE);, +				if (!StringUtils.hasText(valueType)) {, +					valueType = defaultValueType;, +				}, +				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle);, +++ b/spring-beans/src/main/resources/org/springframework/beans/factory/xml/spring-beans-3.2.xsd, +		<xsd:attribute name="value-type" type="xsd:string">, +			<xsd:annotation>, +				<xsd:documentation><![CDATA[, +	A short-cut alternative to a 'type' attribute on a nested, +	"<value type='...' >...</value>" element., +				]]></xsd:documentation>, +			</xsd:annotation>, +		</xsd:attribute>, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/xml/XmlBeanCollectionTests.java, + * Copyright 2002-2012 the original author or authors., +		assertTrue(hasMap.getMap().size() == 5);, +		assertTrue(hasMap.getMap().get("bar") instanceof Long);, +		assertTrue(hasMap.getMap().get("bar").equals(new Long(100)));, +		assertTrue(hasMap.getMap().get("baz") instanceof Integer);, +		assertTrue(hasMap.getMap().get("baz").equals(new Integer(200)));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java, + * @author Gary Russell, +			boolean hasValueTypeAttribute = entryEle.hasAttribute(VALUE_TYPE_ATTRIBUTE);, +			if ((hasValueTypeAttribute && hasValueRefAttribute) ||, +				(hasValueTypeAttribute && !hasValueAttribute) ||, +					(hasValueTypeAttribute && valueEle != null)) {, +				error("<entry> element is only allowed to contain a 'value-type' " +, +						"attribute when it has a 'value' attribute", entryEle);, +			}, +				String valueType = entryEle.getAttribute(VALUE_TYPE_ATTRIBUTE);, +				if (!StringUtils.hasText(valueType)) {, +					valueType = defaultValueType;, +				}, +				value = buildTypedStringValueForMap(entryEle.getAttribute(VALUE_ATTRIBUTE), valueType, entryEle);, +++ b/spring-beans/src/main/resources/org/springframework/beans/factory/xml/spring-beans-3.2.xsd, +		<xsd:attribute name="value-type" type="xsd:string">, +			<xsd:annotation>, +				<xsd:documentation><![CDATA[, +	A short-cut alternative to a 'type' attribute on a nested, +	"<value type='...' >...</value>" element., +				]]></xsd:documentation>, +			</xsd:annotation>, +		</xsd:attribute>, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/xml/XmlBeanCollectionTests.java, + * Copyright 2002-2012 the original author or authors., +		assertTrue(hasMap.getMap().size() == 5);, +		assertTrue(hasMap.getMap().get("bar") instanceof Long);, +		assertTrue(hasMap.getMap().get("bar").equals(new Long(100)));, +		assertTrue(hasMap.getMap().get("baz") instanceof Integer);, +		assertTrue(hasMap.getMap().get("baz").equals(new Integer(200)));, +++ b/spring-beans/src/test/resources/org/springframework/beans/factory/xml/collections.xml, +		xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">, +			<map value-type="java.lang.Integer">]