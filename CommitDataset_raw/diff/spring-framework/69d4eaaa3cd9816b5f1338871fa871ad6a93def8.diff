[+++ b/spring-web-reactive/build.gradle, +	compile "io.projectreactor:reactor-core:2.0.5.RELEASE", +++ b/spring-web-reactive/build.gradle, +	compile "io.projectreactor:reactor-core:2.0.5.RELEASE", +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/DispatcherHttpHandler.java, +import reactor.core.reactivestreams.PublisherFactory;, +import reactor.core.reactivestreams.SubscriberWithContext;, +			return PublisherFactory.forEach(SubscriberWithContext::onComplete);, +++ b/spring-web-reactive/build.gradle, +	compile "io.projectreactor:reactor-core:2.0.5.RELEASE", +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/DispatcherHttpHandler.java, +import reactor.core.reactivestreams.PublisherFactory;, +import reactor.core.reactivestreams.SubscriberWithContext;, +			return PublisherFactory.forEach(SubscriberWithContext::onComplete);, +++ b/spring-web-reactive/src/test/java/org/springframework/reactive/web/DispatcherApp.java, +import reactor.core.reactivestreams.PublisherFactory;, +			return PublisherFactory.forEach((subscriber) -> {, +				subscriber.onNext("Hello world.");, +				subscriber.onComplete();, +			return PublisherFactory.forEach((subscriber) -> {, +						subscriber.onNext(new HandlerResult(result));, +						subscriber.onError(error);, +						subscriber.onComplete();, +		public Publisher<Void> handleResult(ServerHttpRequest request, ServerHttpResponse response, HandlerResult result) {, +			return response.writeWith(PublisherFactory.forEach((writeSubscriber) -> {, +				writeSubscriber.onNext(((String) result.getReturnValue()).getBytes(charset));, +				writeSubscriber.onComplete();, +			}));]