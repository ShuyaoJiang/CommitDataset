[+++ b/org.springframework.context/src/main/java/org/springframework/ui/format/AnnotationFormatterFactory.java, + * A factory that creates formatters to format values of fields annotated with a particular {@link Annotation}., + * that formats <code>Date</code> values set on fields annotated with <code>@DateTimeFormat</code>., + * @param <A> the annotation type that should trigger formatting, +	 * Get the Printer to print the value of a field of <code>fieldType</code> annotated with <code>annotation</code>., +	 * If the type &lt;T&gt; the printer accepts is not assignable to <code>fieldType</code>, a coersion from <code>fieldType</code> to &lt;T&gt; will be attempted before the Printer is invoked., +	 * @param fieldType the type of field that was annotated, +	 * Get the Parser to parse a submitted value for a field of <code>fieldType</code> annotated with <code>annotation</code>., +	 * If the object the parser returns is not assignable to <code>fieldType</code>, a coersion to <code>fieldType</code> will be attempted before the field is set., +	 * @param fieldType the type of field that was annotated, +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/AnnotationFormatterFactory.java, + * A factory that creates formatters to format values of fields annotated with a particular {@link Annotation}., + * that formats <code>Date</code> values set on fields annotated with <code>@DateTimeFormat</code>., + * @param <A> the annotation type that should trigger formatting, +	 * Get the Printer to print the value of a field of <code>fieldType</code> annotated with <code>annotation</code>., +	 * If the type &lt;T&gt; the printer accepts is not assignable to <code>fieldType</code>, a coersion from <code>fieldType</code> to &lt;T&gt; will be attempted before the Printer is invoked., +	 * @param fieldType the type of field that was annotated, +	 * Get the Parser to parse a submitted value for a field of <code>fieldType</code> annotated with <code>annotation</code>., +	 * If the object the parser returns is not assignable to <code>fieldType</code>, a coersion to <code>fieldType</code> will be attempted before the field is set., +	 * @param fieldType the type of field that was annotated, +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/FormatterRegistry.java, +import java.lang.annotation.Annotation;, +, +	void addFormatterForFieldAnnotation(AnnotationFormatterFactory<? extends Annotation> annotationFormatterFactory);, +	 * Allows clients to register their own custom converters directly., +	 * For example, a date/time formatting configuration might expect a java.util.Date field value to be coersed to a Long for formatting., +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/AnnotationFormatterFactory.java, + * A factory that creates formatters to format values of fields annotated with a particular {@link Annotation}., + * that formats <code>Date</code> values set on fields annotated with <code>@DateTimeFormat</code>., + * @param <A> the annotation type that should trigger formatting, +	 * Get the Printer to print the value of a field of <code>fieldType</code> annotated with <code>annotation</code>., +	 * If the type &lt;T&gt; the printer accepts is not assignable to <code>fieldType</code>, a coersion from <code>fieldType</code> to &lt;T&gt; will be attempted before the Printer is invoked., +	 * @param fieldType the type of field that was annotated, +	 * Get the Parser to parse a submitted value for a field of <code>fieldType</code> annotated with <code>annotation</code>., +	 * If the object the parser returns is not assignable to <code>fieldType</code>, a coersion to <code>fieldType</code> will be attempted before the field is set., +	 * @param fieldType the type of field that was annotated, +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/FormatterRegistry.java, +import java.lang.annotation.Annotation;, +, +	void addFormatterForFieldAnnotation(AnnotationFormatterFactory<? extends Annotation> annotationFormatterFactory);, +	 * Allows clients to register their own custom converters directly., +	 * For example, a date/time formatting configuration might expect a java.util.Date field value to be coersed to a Long for formatting., +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/AnnotationFormatterFactory.java, + * A factory that creates formatters to format values of fields annotated with a particular {@link Annotation}., + * that formats <code>Date</code> values set on fields annotated with <code>@DateTimeFormat</code>., + * @param <A> the annotation type that should trigger formatting, +	 * Get the Printer to print the value of a field of <code>fieldType</code> annotated with <code>annotation</code>., +	 * If the type &lt;T&gt; the printer accepts is not assignable to <code>fieldType</code>, a coersion from <code>fieldType</code> to &lt;T&gt; will be attempted before the Printer is invoked., +	 * @param fieldType the type of field that was annotated, +	 * Get the Parser to parse a submitted value for a field of <code>fieldType</code> annotated with <code>annotation</code>., +	 * If the object the parser returns is not assignable to <code>fieldType</code>, a coersion to <code>fieldType</code> will be attempted before the field is set., +	 * @param fieldType the type of field that was annotated, +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/FormatterRegistry.java, +import java.lang.annotation.Annotation;, +, +	void addFormatterForFieldAnnotation(AnnotationFormatterFactory<? extends Annotation> annotationFormatterFactory);, +	 * Allows clients to register their own custom converters directly., +	 * For example, a date/time formatting configuration might expect a java.util.Date field value to be coersed to a Long for formatting., +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/jodatime/AbstractDateTimeAnnotationFormatterFactory.java, +		this.propertyTypes = Collections.unmodifiableSet(createFieldTypes());, +	private Set<Class<?>> createFieldTypes() {, +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/AnnotationFormatterFactory.java, + * A factory that creates formatters to format values of fields annotated with a particular {@link Annotation}., + * that formats <code>Date</code> values set on fields annotated with <code>@DateTimeFormat</code>., + * @param <A> the annotation type that should trigger formatting, +	 * Get the Printer to print the value of a field of <code>fieldType</code> annotated with <code>annotation</code>., +	 * If the type &lt;T&gt; the printer accepts is not assignable to <code>fieldType</code>, a coersion from <code>fieldType</code> to &lt;T&gt; will be attempted before the Printer is invoked., +	 * @param fieldType the type of field that was annotated, +	 * Get the Parser to parse a submitted value for a field of <code>fieldType</code> annotated with <code>annotation</code>., +	 * If the object the parser returns is not assignable to <code>fieldType</code>, a coersion to <code>fieldType</code> will be attempted before the field is set., +	 * @param fieldType the type of field that was annotated, +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/FormatterRegistry.java, +import java.lang.annotation.Annotation;, +, +	void addFormatterForFieldAnnotation(AnnotationFormatterFactory<? extends Annotation> annotationFormatterFactory);, +	 * Allows clients to register their own custom converters directly., +	 * For example, a date/time formatting configuration might expect a java.util.Date field value to be coersed to a Long for formatting., +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/jodatime/AbstractDateTimeAnnotationFormatterFactory.java, +		this.propertyTypes = Collections.unmodifiableSet(createFieldTypes());, +	private Set<Class<?>> createFieldTypes() {, +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/jodatime/JodaTimeConverters.java, + * Installs lower-level type converters required to integrate Joda Time support into Spring's formatting and field binding systems., +		registry.addConverter(new CalendarToReadableInstantConverter());, +	/** , +	 * Used when binding a parsed DateTime to a LocalDate field., +	 * @see DateTimeParser , +	 **/, +	/** , +	 * Used when binding a parsed DateTime to a LocalTime field. , +	 * @see DateTimeParser , +	 */, +	/** , +	 * Used when binding a parsed DateTime to a LocalDateTime field. , +	 * @see DateTimeParser , +	 */, +	/** , +	 * Used when binding a parsed DateTime to a DateMidnight field. ]