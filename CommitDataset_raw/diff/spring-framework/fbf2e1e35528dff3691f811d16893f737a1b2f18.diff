[+++ b/src/docs/asciidoc/testing-webtestclient.adoc, +[[webtestclient]], += WebTestClient, +, +`WebTestClient` is a non-blocking, reactive client for testing web servers. It uses, +the reactive <<web-reactive.adoc#webflux-webclient, WebClient>> internally to perform, +requests and provides a fluent API to verify responses. The `WebTestClient` can connect, +to any server over an HTTP connection. It can also bind directly to WebFlux applications, +with <<testing.adoc#mock-objects-web-reactive,mock request and response>> objects,, +without the need for an HTTP server., +, +, +, +[[webtestclient-setup]], +== Setup, +, +To create a `WebTestClient` you must choose one of several server setup options., +Effectively you either configure a WebFlux application to bind to, or use absolute URLs, +to connect to a running server., +, +, +[[webtestclient-controller-config]], +=== Bind to controller, +, +Use this server setup to test one `@Controller` at a time:, +, +[source,java,intent=0], +[subs="verbatim,quotes"], +----, +    client = WebTestClient.bindToController(new TestController()).build();, +----, +, +The above loads the <<web-reactive.adoc#webflux-config,WebFlux Java config>> and, +registers the given controller. The resulting WebFlux application will be tested, +without an HTTP server using mock request and response objects. There are more methods, +on the builder to customize the default WebFlux Java config., +, +, +[[webtestclient-fn-config]], +=== Bind to RouterFunction, +, +Use this option to set up a server from a, +<<web-reactive.adoc#webflux-fn,RouterFunction>>:, +, +[source,java,intent=0], +[subs="verbatim,quotes"], +----, +    RouterFunction<?> route = ..., +    client = WebTestClient.bindToRouterFunction(route).build();, +----, +, +Internally the provided configuration is passed to `RouterFunctions.toWebHandler`., +The resulting WebFlux application will be tested without an HTTP server using mock, +request and response objects, +, +, +[[webtestclient-context-config]], +=== Bind to ApplicationContext, +, +Use this option to setup a server from the Spring configuration of your application, or, +some subset of it:, +, +[source,java,intent=0], +[subs="verbatim,quotes"], +----, +    @RunWith(SpringRunner.class), +    @ContextConfiguration(classes = WebConfig.class) // <1>, +    public class MyTests {, +    , +        @Autowired, +        private ApplicationContext context; // <2>, +    , +        private WebTestClient client;, +, +        @Before, +        public void setUp() {, +            client = WebTestClient.bindToApplicationContext(context).build(); // <3>, +        }, +, +    }, +----, +, +<1> Specify the configuration to load, +<2> Inject the configuration, +<3> Create the `WebTestClient`, +, +Internally the provided configuration is passed to `WebHttpHandlerBuilder` to set up, +the request processing chain, see, +<<web-reactive.adoc#webflux-web-handler-api,WebHandler API>> for more details. The, +resulting WebFlux application will be tested without an HTTP server using mock request, +and response objects., +, +, +[[webtestclient-server-config]], +=== Bind to server, +, +This server setup option allows you to connect to a running server:, +, +[source,java,intent=0], +[subs="verbatim,quotes"]]