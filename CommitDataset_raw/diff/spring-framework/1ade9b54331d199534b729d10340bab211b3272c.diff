[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-core/src/test/java/org/springframework/core/AttributeAccessorSupportTests.java, + * Copyright 2002-2014 the original author or authors., +import org.junit.Test;, +, +import static org.junit.Assert.*;, +, + * @author Sam Brannen, +public class AttributeAccessorSupportTests {, +	private AttributeAccessor attributeAccessor = new SimpleAttributeAccessorSupport();, +	@Test, +	public void setAndGet() throws Exception {, +	@Test, +	public void setAndHas() throws Exception {, +	@Test, +	public void remove() throws Exception {, +	@Test, +	public void attributeNames() throws Exception {, +, +	@SuppressWarnings("serial"), +	private static class SimpleAttributeAccessorSupport extends AttributeAccessorSupport {, +, +++ /dev/null, +++ /dev/null, +++ b/spring-core/src/test/java/org/springframework/core/AttributeAccessorSupportTests.java, + * Copyright 2002-2014 the original author or authors., +import org.junit.Test;, +, +import static org.junit.Assert.*;, +, + * @author Sam Brannen, +public class AttributeAccessorSupportTests {, +	private AttributeAccessor attributeAccessor = new SimpleAttributeAccessorSupport();, +	@Test, +	public void setAndGet() throws Exception {, +	@Test, +	public void setAndHas() throws Exception {, +	@Test, +	public void remove() throws Exception {, +	@Test, +	public void attributeNames() throws Exception {, +, +	@SuppressWarnings("serial"), +	private static class SimpleAttributeAccessorSupport extends AttributeAccessorSupport {, +, +++ b/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java, + * Copyright 2002-2014 the original author or authors., +	public static interface Adder<T> {, +	public static abstract class AbstractDateAdder implements Adder<Date> {, +	public static class DateAdder extends AbstractDateAdder {, +	public static class Enclosing<T> {, +	public static class ExtendsEnclosing extends Enclosing<String> {, +	public static interface Boo<E, T extends Serializable> {, +	public static class MyBoo implements Boo<String, Integer> {, +	public static interface Settings {, +	public static interface ConcreteSettings extends Settings {, +	public static interface Dao<T, S> {, +	public static interface SettingsDao<T extends Settings, S> extends Dao<T, S> {, +	public static interface ConcreteSettingsDao extends, +			SettingsDao<ConcreteSettings, String> {, +	static abstract class AbstractDaoImpl<T, S> implements Dao<T, S> {, +	static class SettingsDaoImpl extends AbstractDaoImpl<ConcreteSettings, String>, +			implements ConcreteSettingsDao {, +	public static interface Event {, +	public static class GenericEvent implements Event {, +	public static interface UserInitiatedEvent {, +	public static abstract class BaseUserInitiatedEvent extends GenericEvent implements, +			UserInitiatedEvent {, +	public static class MessageEvent extends BaseUserInitiatedEvent {, +	public static interface Channel<E extends Event> {, +	public static interface Broadcaster {, +	public static interface EventBroadcaster extends Broadcaster {, +	public static class GenericBroadcasterImpl implements Broadcaster {, +	public static abstract class GenericEventBroadcasterImpl<T extends Event> extends, +			GenericBroadcasterImpl, +	public static interface Receiver<E extends Event> {, +	public static interface MessageBroadcaster extends Receiver<MessageEvent> {, +	public static class RemovedMessageEvent extends MessageEvent {, +	public static class NewMessageEvent extends MessageEvent {, +	public static class ModifiedMessageEvent extends MessageEvent {, +	public static class MessageBroadcasterImpl extends, +			GenericEventBroadcasterImpl<MessageEvent>, +	public static interface SimpleGenericRepository<T> {, +	public static interface RepositoryRegistry {, +	public static class SettableRepositoryRegistry<R extends SimpleGenericRepository<?>>, +	public static interface ConvenientGenericRepository<T, ID extends Serializable>, +			extends SimpleGenericRepository<T> {, +	public static class GenericHibernateRepository<T, ID extends Serializable>, +	public static class HibernateRepositoryRegistry extends, +			SettableRepositoryRegistry<GenericHibernateRepository<?, ?>> {, +	public static interface Homer<E> {, +	public static class MyHomer<T extends Bounded<T>, L extends T> implements Homer<L> {, +	public static class YourHomer<T extends AbstractBounded<T>, L extends T> extends, +			MyHomer<T, L> {, +	public static interface GenericDao<T> {, +	public static interface ConvenienceGenericDao<T> extends GenericDao<T> {]