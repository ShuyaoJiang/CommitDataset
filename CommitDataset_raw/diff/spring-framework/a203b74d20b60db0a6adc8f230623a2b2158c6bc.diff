[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java, +	private final boolean useDefaultResolution;, +, +		this(messageConverter, validator, true);, +	}, +, +	/**, +	 * Create a new {@code PayloadArgumentResolver} with the given, +	 * {@link MessageConverter} and {@link Validator}., +	 * @param messageConverter the MessageConverter to use (required), +	 * @param validator the Validator to use (optional), +	 * @param useDefaultResolution if "true" (the default) this resolver supports, +	 * all parameters; if "false" then only arguments with the {@code @Payload}, +	 * annotation are supported., +	 */, +	public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator,, +			boolean useDefaultResolution) {, +, +		this.useDefaultResolution = useDefaultResolution;, +		return (parameter.hasParameterAnnotation(Payload.class) || this.useDefaultResolution);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java, +	private final boolean useDefaultResolution;, +, +		this(messageConverter, validator, true);, +	}, +, +	/**, +	 * Create a new {@code PayloadArgumentResolver} with the given, +	 * {@link MessageConverter} and {@link Validator}., +	 * @param messageConverter the MessageConverter to use (required), +	 * @param validator the Validator to use (optional), +	 * @param useDefaultResolution if "true" (the default) this resolver supports, +	 * all parameters; if "false" then only arguments with the {@code @Payload}, +	 * annotation are supported., +	 */, +	public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator,, +			boolean useDefaultResolution) {, +, +		this.useDefaultResolution = useDefaultResolution;, +		return (parameter.hasParameterAnnotation(Payload.class) || this.useDefaultResolution);, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolverTests.java, +		this.resolver = new PayloadArgumentResolver(new StringMessageConverter(), testValidator());, +, +		Method payloadMethod = PayloadArgumentResolverTests.class.getDeclaredMethod(, +				"handleMessage", String.class, String.class, Locale.class,, +				String.class, String.class, String.class, String.class);, +, +		this.paramAnnotated = new SynthesizingMethodParameter(payloadMethod, 0);, +		this.paramAnnotatedNotRequired = new SynthesizingMethodParameter(payloadMethod, 1);, +		this.paramValidated = new SynthesizingMethodParameter(payloadMethod, 4);, +		this.paramValidatedNotAnnotated = new SynthesizingMethodParameter(payloadMethod, 5);, +		this.paramNotAnnotated = new SynthesizingMethodParameter(payloadMethod, 6);, +	@Test, +	public void supportsParameter() throws Exception {, +, +		assertTrue(this.resolver.supportsParameter(this.paramAnnotated));, +		assertTrue(this.resolver.supportsParameter(this.paramNotAnnotated));, +, +		PayloadArgumentResolver strictResolver = new PayloadArgumentResolver(, +				new StringMessageConverter(), testValidator(), false);, +, +		assertTrue(strictResolver.supportsParameter(this.paramAnnotated));, +		assertFalse(strictResolver.supportsParameter(this.paramNotAnnotated));, +	}]