[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +	@Nullable, +	private Boolean lazyInit;, +			Boolean lazyInit = originalAbd.getLazyInit();, +			if (lazyInit != null) {, +				setLazyInit(lazyInit);, +			}, +			setLazyInit(original.isLazyInit());, +			Boolean lazyInit = otherAbd.getLazyInit();, +			if (lazyInit != null) {, +				setLazyInit(lazyInit);, +			}, +			setLazyInit(other.isLazyInit());, +	 * @param defaults the default settings to apply, +	 * @since 2.5, +		Boolean lazyInit = defaults.getLazyInit();, +		if (lazyInit != null) {, +			setLazyInit(lazyInit);, +		}, +	 * @return whether to apply lazy-init semantics ({@code false} by default), +		return (this.lazyInit != null && this.lazyInit.booleanValue());, +	}, +, +	/**, +	 * Return whether this bean should be lazily initialized, i.e. not, +	 * eagerly instantiated on startup. Only applicable to a singleton bean., +	 * @return the lazy-init flag if explicitly set, or {@code null} otherwise, +	 * @since 5.2, +	 */, +	@Nullable, +	public Boolean getLazyInit() {, +	 * and setting of bean references will happen. Default is AUTOWIRE_NO, +	 * which means there won't be convention-based autowiring by name or type, +	 * (however, there may still be explicit annotation-driven autowiring)., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +	@Nullable, +	private Boolean lazyInit;, +			Boolean lazyInit = originalAbd.getLazyInit();, +			if (lazyInit != null) {, +				setLazyInit(lazyInit);, +			}, +			setLazyInit(original.isLazyInit());, +			Boolean lazyInit = otherAbd.getLazyInit();, +			if (lazyInit != null) {, +				setLazyInit(lazyInit);, +			}, +			setLazyInit(other.isLazyInit());, +	 * @param defaults the default settings to apply, +	 * @since 2.5, +		Boolean lazyInit = defaults.getLazyInit();, +		if (lazyInit != null) {, +			setLazyInit(lazyInit);, +		}, +	 * @return whether to apply lazy-init semantics ({@code false} by default), +		return (this.lazyInit != null && this.lazyInit.booleanValue());, +	}, +, +	/**, +	 * Return whether this bean should be lazily initialized, i.e. not, +	 * eagerly instantiated on startup. Only applicable to a singleton bean., +	 * @return the lazy-init flag if explicitly set, or {@code null} otherwise, +	 * @since 5.2, +	 */, +	@Nullable, +	public Boolean getLazyInit() {, +	 * and setting of bean references will happen. Default is AUTOWIRE_NO, +	 * which means there won't be convention-based autowiring by name or type, +	 * (however, there may still be explicit annotation-driven autowiring)., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionDefaults.java, + * Copyright 2002-2019 the original author or authors., + * @author Juergen Hoeller, +	@Nullable, +	private Boolean lazyInit;, +	private int dependencyCheck = AbstractBeanDefinition.DEPENDENCY_CHECK_NONE;, +, +	/**, +	 * Set whether beans should be lazily initialized by default., +	 * <p>If {@code false}, the bean will get instantiated on startup by bean, +	 * factories that perform eager initialization of singletons., +	 */, +	/**, +	 * Return whether beans should be lazily initialized by default, i.e. not, +	 * eagerly instantiated on startup. Only applicable to singleton beans., +	 * @return whether to apply lazy-init semantics ({@code false} by default), +	 */, +		return (this.lazyInit != null && this.lazyInit.booleanValue());, +	}, +, +	/**, +	 * Return whether beans should be lazily initialized by default, i.e. not, +	 * eagerly instantiated on startup. Only applicable to singleton beans., +	 * @return the lazy-init flag if explicitly set, or {@code null} otherwise, +	 * @since 5.2, +	 */, +	@Nullable, +	public Boolean getLazyInit() {, +	/**, +	 * Set the autowire mode. This determines whether any automagical detection, +	 * and setting of bean references will happen. Default is AUTOWIRE_NO, +	 * which means there won't be convention-based autowiring by name or type]