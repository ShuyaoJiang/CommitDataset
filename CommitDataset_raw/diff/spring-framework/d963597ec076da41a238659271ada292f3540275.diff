[+++ b/spring-web/src/main/java/org/springframework/web/client/DefaultResponseErrorHandler.java, + * Any code with series {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR}, + * or {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR} is considered to be, + * an error; this behavior can be changed by overriding the {@link #hasError(HttpStatus)}, + * method. Unknown status codes will be ignored by {@link #hasError(ClientHttpResponse)}., + * @author Juergen Hoeller, +++ b/spring-web/src/main/java/org/springframework/web/client/DefaultResponseErrorHandler.java, + * Any code with series {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR}, + * or {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR} is considered to be, + * an error; this behavior can be changed by overriding the {@link #hasError(HttpStatus)}, + * method. Unknown status codes will be ignored by {@link #hasError(ClientHttpResponse)}., + * @author Juergen Hoeller, +++ b/spring-web/src/test/java/org/springframework/web/client/DefaultResponseErrorHandlerTests.java, +		catch (HttpClientErrorException ex) {, +			assertSame(headers, ex.getResponseHeaders());, +	@Test  // SPR-16108, +	public void hasErrorForUnknownStatusCode() throws Exception {, +		HttpHeaders headers = new HttpHeaders();, +		headers.setContentType(MediaType.TEXT_PLAIN);, +, +		given(response.getRawStatusCode()).willReturn(999);, +		given(response.getStatusText()).willReturn("Custom status code");, +		given(response.getHeaders()).willReturn(headers);, +, +		assertFalse(handler.hasError(response));, +	}, +]