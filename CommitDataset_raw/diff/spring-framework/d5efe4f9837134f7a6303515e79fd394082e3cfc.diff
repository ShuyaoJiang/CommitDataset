[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.java, + * Copyright 2002-2015 the original author or authors., +			ProxyFactory proxyFactory = prepareProxyFactory(bean, beanName);, +			customizeProxyFactory(proxyFactory);, +	/**, +	 * Prepare a {@link ProxyFactory} for the given bean., +	 * <p>Subclasses may customize the handling of the target instance and in, +	 * particular the exposure of the target class. The default introspection, +	 * of interfaces for non-target-class proxies and the configured advisor, +	 * will be applied afterwards; {@link #customizeProxyFactory} allows for, +	 * late customizations of those parts right before proxy creation., +	 * @param bean the bean instance to create a proxy for, +	 * @param beanName the corresponding bean name, +	 * @return the ProxyFactory, initialized with this processor's, +	 * {@link ProxyConfig} settings and the specified bean, +	 * @since 4.2.3, +	 * @see #customizeProxyFactory, +	 */, +	protected ProxyFactory prepareProxyFactory(Object bean, String beanName) {, +		ProxyFactory proxyFactory = new ProxyFactory();, +		proxyFactory.copyFrom(this);, +		proxyFactory.setTarget(bean);, +		return proxyFactory;, +	}, +, +	/**, +	 * Subclasses may choose to implement this: for example,, +	 * to change the interfaces exposed., +	 * <p>The default implementation is empty., +	 * @param proxyFactory ProxyFactory that is already configured with, +	 * target, advisor and interfaces and will be used to create the proxy, +	 * immediately after this method returns, +	 * @since 4.2.3, +	 * @see #prepareProxyFactory, +	 */, +	protected void customizeProxyFactory(ProxyFactory proxyFactory) {, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.java, + * Copyright 2002-2015 the original author or authors., +			ProxyFactory proxyFactory = prepareProxyFactory(bean, beanName);, +			customizeProxyFactory(proxyFactory);, +	/**, +	 * Prepare a {@link ProxyFactory} for the given bean., +	 * <p>Subclasses may customize the handling of the target instance and in, +	 * particular the exposure of the target class. The default introspection, +	 * of interfaces for non-target-class proxies and the configured advisor, +	 * will be applied afterwards; {@link #customizeProxyFactory} allows for, +	 * late customizations of those parts right before proxy creation., +	 * @param bean the bean instance to create a proxy for, +	 * @param beanName the corresponding bean name, +	 * @return the ProxyFactory, initialized with this processor's, +	 * {@link ProxyConfig} settings and the specified bean, +	 * @since 4.2.3, +	 * @see #customizeProxyFactory, +	 */, +	protected ProxyFactory prepareProxyFactory(Object bean, String beanName) {, +		ProxyFactory proxyFactory = new ProxyFactory();, +		proxyFactory.copyFrom(this);, +		proxyFactory.setTarget(bean);, +		return proxyFactory;, +	}, +, +	/**, +	 * Subclasses may choose to implement this: for example,, +	 * to change the interfaces exposed., +	 * <p>The default implementation is empty., +	 * @param proxyFactory ProxyFactory that is already configured with, +	 * target, advisor and interfaces and will be used to create the proxy, +	 * immediately after this method returns, +	 * @since 4.2.3, +	 * @see #prepareProxyFactory, +	 */, +	protected void customizeProxyFactory(ProxyFactory proxyFactory) {, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, + * Copyright 2002-2015 the original author or authors., +			Object proxy = createProxy(, +					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean));, +		if (beanName != null && this.beanFactory instanceof ConfigurableListableBeanFactory) {, +			AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass);, +		}, +, +			if (commonInterceptors.length > 0) {, +			int nrOfCommonInterceptors = commonInterceptors.length;, +		ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory ?, +				(ConfigurableBeanFactory) this.beanFactory : null);, +	 * immediately after this method returns, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.java, + * Copyright 2002-2015 the original author or authors., +			ProxyFactory proxyFactory = prepareProxyFactory(bean, beanName);, +			customizeProxyFactory(proxyFactory);, +	/**, +	 * Prepare a {@link ProxyFactory} for the given bean., +	 * <p>Subclasses may customize the handling of the target instance and in, +	 * particular the exposure of the target class. The default introspection, +	 * of interfaces for non-target-class proxies and the configured advisor, +	 * will be applied afterwards; {@link #customizeProxyFactory} allows for, +	 * late customizations of those parts right before proxy creation.]