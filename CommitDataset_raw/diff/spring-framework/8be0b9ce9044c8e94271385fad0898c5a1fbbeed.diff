[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeMutatorWebFilter.java, +import java.util.function.Function;, +	private volatile Function<ServerWebExchange, ServerWebExchange> globalMutator;, +	private final Map<String, Function<ServerWebExchange, ServerWebExchange>> perRequestMutators =, +			new ConcurrentHashMap<>(4);, +		this.globalMutator = this.globalMutator != null ? this.globalMutator.andThen(mutator) : mutator;, +		this.perRequestMutators.compute(requestId,, +				(s, value) -> value != null ? value.andThen(mutator) : mutator);, +		if (this.globalMutator != null) {, +			exchange = this.globalMutator.apply(exchange);, +		Function<ServerWebExchange, ServerWebExchange> mutator = this.perRequestMutators.remove(requestId);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeMutatorWebFilter.java, +import java.util.function.Function;, +	private volatile Function<ServerWebExchange, ServerWebExchange> globalMutator;, +	private final Map<String, Function<ServerWebExchange, ServerWebExchange>> perRequestMutators =, +			new ConcurrentHashMap<>(4);, +		this.globalMutator = this.globalMutator != null ? this.globalMutator.andThen(mutator) : mutator;, +		this.perRequestMutators.compute(requestId,, +				(s, value) -> value != null ? value.andThen(mutator) : mutator);, +		if (this.globalMutator != null) {, +			exchange = this.globalMutator.apply(exchange);, +		Function<ServerWebExchange, ServerWebExchange> mutator = this.perRequestMutators.remove(requestId);, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/bind/ApplicationContextTests.java, +import org.springframework.web.bind.annotation.RequestAttribute;, +				.exchangeMutator(principal("Pablo")), +	private UnaryOperator<ServerWebExchange> principal(String userName) {, +		this.client.get().uri("/principal"), +	public void perRequestExchangeMutator() throws Exception {, +		this.client.exchangeMutator(principal("Giovanni")), +				.get().uri("/principal"), +				.expectBody(String.class).value().isEqualTo("Hello Giovanni!");, +	}, +, +	@Test, +	public void perRequestMultipleExchangeMutators() throws Exception {, +		this.client, +				.exchangeMutator(attribute("attr1", "foo")), +				.exchangeMutator(attribute("attr2", "bar")), +				.get().uri("/attributes"), +				.exchange(), +				.expectStatus().isOk(), +				.expectBody(String.class).value().isEqualTo("foo+bar");, +	}, +, +	private UnaryOperator<ServerWebExchange> attribute(String attrName, String attrValue) {, +		return exchange -> {, +			exchange.getAttributes().put(attrName, attrValue);, +			return exchange;, +		};, +		@GetMapping("/principal"), +, +		@GetMapping("/attributes"), +		public String handle(@RequestAttribute String attr1, @RequestAttribute String attr2) {, +			return attr1 + "+" + attr2;, +		}, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeMutatorWebFilter.java, +import java.util.function.Function;, +	private volatile Function<ServerWebExchange, ServerWebExchange> globalMutator;, +	private final Map<String, Function<ServerWebExchange, ServerWebExchange>> perRequestMutators =, +			new ConcurrentHashMap<>(4);, +		this.globalMutator = this.globalMutator != null ? this.globalMutator.andThen(mutator) : mutator;, +		this.perRequestMutators.compute(requestId,, +				(s, value) -> value != null ? value.andThen(mutator) : mutator);, +		if (this.globalMutator != null) {, +			exchange = this.globalMutator.apply(exchange);, +		Function<ServerWebExchange, ServerWebExchange> mutator = this.perRequestMutators.remove(requestId);, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/bind/ApplicationContextTests.java, +import org.springframework.web.bind.annotation.RequestAttribute;, +				.exchangeMutator(principal("Pablo")), +	private UnaryOperator<ServerWebExchange> principal(String userName) {, +		this.client.get().uri("/principal"), +	public void perRequestExchangeMutator() throws Exception {, +		this.client.exchangeMutator(principal("Giovanni")), +				.get().uri("/principal"), +				.expectBody(String.class).value().isEqualTo("Hello Giovanni!");, +	}, +, +	@Test, +	public void perRequestMultipleExchangeMutators() throws Exception {, +		this.client, +				.exchangeMutator(attribute("attr1", "foo")), +				.exchangeMutator(attribute("attr2", "bar")), +				.get().uri("/attributes"), +				.exchange(), +				.expectStatus().isOk(), +				.expectBody(String.class).value().isEqualTo("foo+bar");, +	}, +, +	private UnaryOperator<ServerWebExchange> attribute(String attrName, String attrValue) {, +		return exchange -> {, +			exchange.getAttributes().put(attrName, attrValue);, +			return exchange;, +		};, +		@GetMapping("/principal"), +, +		@GetMapping("/attributes"), +		public String handle(@RequestAttribute String attr1, @RequestAttribute String attr2) {, +			return attr1 + "+" + attr2;, +		}, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/bind/ControllerTests.java]