[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/DerbyEmbeddedDatabaseConfigurer.java, +import java.io.File;, +import java.io.IOException;, +import org.apache.derby.impl.io.VFMemoryStorageFactory;, +	 * Get the singleton {@link DerbyEmbeddedDatabaseConfigurer} instance., +	 * @throws ClassNotFoundException if Derby is not on the classpath, +			if (SHUTDOWN_CODE.equals(e.getSQLState())) {, +				purgeDatabase(databaseName);, +				logger.warn("Could not shutdown in-memory Derby database", e);, +	/**, +	 * Purges the in-memory database, to prevent it from hanging around after, +	 * being shut down, +	 * @param databaseName, +	 */, +	private void purgeDatabase(String databaseName) {, +		// TODO: update this code once Derby adds a proper way to remove an in-memory db, +		// (see http://wiki.apache.org/db-derby/InMemoryBackEndPrimer for details), +		try {, +			VFMemoryStorageFactory.purgeDatabase(new File(databaseName).getCanonicalPath());, +		} catch (IOException ioe) {, +			logger.warn("Could not purge in-memory Derby database", ioe);, +, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/DerbyEmbeddedDatabaseConfigurer.java, +import java.io.File;, +import java.io.IOException;, +import org.apache.derby.impl.io.VFMemoryStorageFactory;, +	 * Get the singleton {@link DerbyEmbeddedDatabaseConfigurer} instance., +	 * @throws ClassNotFoundException if Derby is not on the classpath, +			if (SHUTDOWN_CODE.equals(e.getSQLState())) {, +				purgeDatabase(databaseName);, +				logger.warn("Could not shutdown in-memory Derby database", e);, +	/**, +	 * Purges the in-memory database, to prevent it from hanging around after, +	 * being shut down, +	 * @param databaseName, +	 */, +	private void purgeDatabase(String databaseName) {, +		// TODO: update this code once Derby adds a proper way to remove an in-memory db, +		// (see http://wiki.apache.org/db-derby/InMemoryBackEndPrimer for details), +		try {, +			VFMemoryStorageFactory.purgeDatabase(new File(databaseName).getCanonicalPath());, +		} catch (IOException ioe) {, +			logger.warn("Could not purge in-memory Derby database", ioe);, +, +++ b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/DerbyEmbeddedDatabaseConfigurer.java, +import java.io.File;, +import java.io.IOException;, +import org.apache.derby.impl.io.VFMemoryStorageFactory;, +	 * Get the singleton {@link DerbyEmbeddedDatabaseConfigurer} instance., +	 * @throws ClassNotFoundException if Derby is not on the classpath, +			if (SHUTDOWN_CODE.equals(e.getSQLState())) {, +				purgeDatabase(databaseName);, +				logger.warn("Could not shutdown in-memory Derby database", e);, +	/**, +	 * Purges the in-memory database, to prevent it from hanging around after, +	 * being shut down, +	 * @param databaseName, +	 */, +	private void purgeDatabase(String databaseName) {, +		// TODO: update this code once Derby adds a proper way to remove an in-memory db, +		// (see http://wiki.apache.org/db-derby/InMemoryBackEndPrimer for details), +		try {, +			VFMemoryStorageFactory.purgeDatabase(new File(databaseName).getCanonicalPath());, +		} catch (IOException ioe) {, +			logger.warn("Could not purge in-memory Derby database", ioe);, +, +++ b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java, +++ b/org.springframework.jdbc/template.mf, + org.apache.derby.*;version="[10.5.1, 10.6.0)";resolution:=optional,]