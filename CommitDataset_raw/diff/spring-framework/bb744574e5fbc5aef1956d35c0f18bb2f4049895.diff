[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriter.java, +import java.util.HashMap;, +	private Charset charset = DEFAULT_CHARSET;, +	 * Set the character set to use for part headers such as, +	 * "Content-Disposition" (and its filename parameter)., +	public void setCharset(Charset charset) {, +		this.charset = charset;, +	 * Return the configured charset for part headers., +	public Charset getCharset() {, +		return this.charset;, +		Map<String, String> params = new HashMap<>(2);, +		params.put("boundary", new String(boundary, StandardCharsets.US_ASCII));, +		params.put("charset", getCharset().name());, +		outputMessage.getHeaders().setContentType(new MediaType(MediaType.MULTIPART_FORM_DATA, params));, +		MultipartHttpOutputMessage outputMessage =, +				new MultipartHttpOutputMessage(this.bufferFactory, getCharset());, +		String filename = (body instanceof Resource ? ((Resource) body).getFilename() : null);, +		outputMessage.getHeaders().setContentDispositionFormData(name, filename);, +		ResolvableType bodyType = ResolvableType.forClass(body.getClass());, +		private final Charset charset;, +, +		public MultipartHttpOutputMessage(DataBufferFactory bufferFactory, Charset charset) {, +			this.charset = charset;, +				byte[] headerName = entry.getKey().getBytes(this.charset);, +					byte[] headerValue = headerValueString.getBytes(this.charset);, +++ b/build.gradle, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriter.java, +import java.util.HashMap;, +	private Charset charset = DEFAULT_CHARSET;, +	 * Set the character set to use for part headers such as, +	 * "Content-Disposition" (and its filename parameter)., +	public void setCharset(Charset charset) {, +		this.charset = charset;, +	 * Return the configured charset for part headers., +	public Charset getCharset() {, +		return this.charset;, +		Map<String, String> params = new HashMap<>(2);, +		params.put("boundary", new String(boundary, StandardCharsets.US_ASCII));, +		params.put("charset", getCharset().name());, +		outputMessage.getHeaders().setContentType(new MediaType(MediaType.MULTIPART_FORM_DATA, params));, +		MultipartHttpOutputMessage outputMessage =, +				new MultipartHttpOutputMessage(this.bufferFactory, getCharset());, +		String filename = (body instanceof Resource ? ((Resource) body).getFilename() : null);, +		outputMessage.getHeaders().setContentDispositionFormData(name, filename);, +		ResolvableType bodyType = ResolvableType.forClass(body.getClass());, +		private final Charset charset;, +, +		public MultipartHttpOutputMessage(DataBufferFactory bufferFactory, Charset charset) {, +			this.charset = charset;, +				byte[] headerName = entry.getKey().getBytes(this.charset);, +					byte[] headerValue = headerValueString.getBytes(this.charset);, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java, +		public SynchronossFilePart(HttpHeaders headers, StreamStorage storage,, +				String fileName, DataBufferFactory factory) {, +, +++ b/build.gradle, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriter.java, +import java.util.HashMap;, +	private Charset charset = DEFAULT_CHARSET;, +	 * Set the character set to use for part headers such as, +	 * "Content-Disposition" (and its filename parameter)., +	public void setCharset(Charset charset) {, +		this.charset = charset;, +	 * Return the configured charset for part headers., +	public Charset getCharset() {, +		return this.charset;, +		Map<String, String> params = new HashMap<>(2);, +		params.put("boundary", new String(boundary, StandardCharsets.US_ASCII));, +		params.put("charset", getCharset().name());, +		outputMessage.getHeaders().setContentType(new MediaType(MediaType.MULTIPART_FORM_DATA, params));, +		MultipartHttpOutputMessage outputMessage =, +				new MultipartHttpOutputMessage(this.bufferFactory, getCharset());, +		String filename = (body instanceof Resource ? ((Resource) body).getFilename() : null);, +		outputMessage.getHeaders().setContentDispositionFormData(name, filename);, +		ResolvableType bodyType = ResolvableType.forClass(body.getClass());, +		private final Charset charset;, +, +		public MultipartHttpOutputMessage(DataBufferFactory bufferFactory, Charset charset) {, +			this.charset = charset;, +				byte[] headerName = entry.getKey().getBytes(this.charset);, +					byte[] headerValue = headerValueString.getBytes(this.charset);, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java, +		public SynchronossFilePart(HttpHeaders headers, StreamStorage storage,, +				String fileName, DataBufferFactory factory) {, +, +++ b/spring-web/src/test/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriterTests.java, +		MediaType contentType = response.getHeaders().getContentType();, +				.contentType(MediaType.parseMediaType(contentType.toString()))]