[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodExceptionResolver.java, + * implementations that support handling exceptions from {@link HandlerMethod}s rather than handlers., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodExceptionResolver.java, + * implementations that support handling exceptions from {@link HandlerMethod}s rather than handlers., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/AbstractHandlerMethodAdapter.java, + * Abstract base class for {@link HandlerAdapter} implementations that support the handling of requests through, + * the execution of {@link HandlerMethod}s rather than handlers. , + * @since 3.1, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodExceptionResolver.java, + * implementations that support handling exceptions from {@link HandlerMethod}s rather than handlers., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/AbstractHandlerMethodAdapter.java, + * Abstract base class for {@link HandlerAdapter} implementations that support the handling of requests through, + * the execution of {@link HandlerMethod}s rather than handlers. , + * @since 3.1, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodAdapter.java, +		resolvers.add(new PathVariableMethodArgumentResolver());, +		resolvers.add(new PathVariableMethodArgumentResolver());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodExceptionResolver.java, + * implementations that support handling exceptions from {@link HandlerMethod}s rather than handlers., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/AbstractHandlerMethodAdapter.java, + * Abstract base class for {@link HandlerAdapter} implementations that support the handling of requests through, + * the execution of {@link HandlerMethod}s rather than handlers. , + * @since 3.1, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodAdapter.java, +		resolvers.add(new PathVariableMethodArgumentResolver());, +		resolvers.add(new PathVariableMethodArgumentResolver());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInitBinderMethodDataBinderFactory.java, + * An {@link InitBinderMethodDataBinderFactory} that creates a {@link ServletRequestDataBinder}. , +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodExceptionResolver.java, + * implementations that support handling exceptions from {@link HandlerMethod}s rather than handlers., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/AbstractHandlerMethodAdapter.java, + * Abstract base class for {@link HandlerAdapter} implementations that support the handling of requests through, + * the execution of {@link HandlerMethod}s rather than handlers. , + * @since 3.1, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodAdapter.java, +		resolvers.add(new PathVariableMethodArgumentResolver());, +		resolvers.add(new PathVariableMethodArgumentResolver());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInitBinderMethodDataBinderFactory.java, + * An {@link InitBinderMethodDataBinderFactory} that creates a {@link ServletRequestDataBinder}. , +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, +import org.springframework.web.servlet.mvc.method.annotation.support.ServletResponseMethodArgumentResolver;, + * Extends {@link InvocableHandlerMethod} with the ability to handle the value returned from the method through , + * a registered {@link HandlerMethodArgumentResolver} that supports the given return value type. , + * Return value handling may include writing to the response or updating the {@link ModelAndViewContainer} structure., + * <p>If the underlying method has a {@link ResponseStatus} instruction, the status on the response is set , + * accordingly after the method is invoked but before the return value is handled., + * @see #invokeAndHandle(NativeWebRequest, ModelAndViewContainer, Object...), +	 * Invokes the method and handles the return value through a registered {@link HandlerMethodReturnValueHandler}. , +	 * <p>Return value handling may be skipped entirely when the method returns {@code null} (also possibly due, +	 * to a {@code void} return type) and one of the following additional conditions is true:, +	 * <li>A {@link HandlerMethodArgumentResolver} has set the {@link ModelAndViewContainer#setResolveView(boolean)} , +	 * flag to {@code false} -- e.g. method arguments providing access to the response., +	 * <li>The request qualifies as "not modified" as defined in {@link ServletWebRequest#checkNotModified(long)}, +	 * and {@link ServletWebRequest#checkNotModified(String)}. In this case a response with "not modified" response , +	 * headers will be automatically generated without the need for return value handling. , +	 * <li>The status on the response is set due to a @{@link ResponseStatus} instruction., +	 * <p>After the return value is handled, callers of this method can use the {@link ModelAndViewContainer} , +	 * to gain access to model attributes, view selection choices, and to check if view resolution is even needed., +	 * Does the given request qualify as "not modified"?, +	 * @see ServletWebRequest#checkNotModified(long), +	 * @see ServletWebRequest#checkNotModified(String), +	 * Does this method have the response status instruction?, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodExceptionResolver.java, + * implementations that support handling exceptions from {@link HandlerMethod}s rather than handlers., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/AbstractHandlerMethodAdapter.java, + * Abstract base class for {@link HandlerAdapter} implementations that support the handling of requests through, + * the execution of {@link HandlerMethod}s rather than handlers. , + * @since 3.1, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodAdapter.java, +		resolvers.add(new PathVariableMethodArgumentResolver());, +		resolvers.add(new PathVariableMethodArgumentResolver());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInitBinderMethodDataBinderFactory.java, + * An {@link InitBinderMethodDataBinderFactory} that creates a {@link ServletRequestDataBinder}. , +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, +import org.springframework.web.servlet.mvc.method.annotation.support.ServletResponseMethodArgumentResolver;, + * Extends {@link InvocableHandlerMethod} with the ability to handle the value returned from the method through , + * a registered {@link HandlerMethodArgumentResolver} that supports the given return value type. , + * Return value handling may include writing to the response or updating the {@link ModelAndViewContainer} structure., + * <p>If the underlying method has a {@link ResponseStatus} instruction, the status on the response is set , + * accordingly after the method is invoked but before the return value is handled., + * @see #invokeAndHandle(NativeWebRequest, ModelAndViewContainer, Object...), +	 * Invokes the method and handles the return value through a registered {@link HandlerMethodReturnValueHandler}. , +	 * <p>Return value handling may be skipped entirely when the method returns {@code null} (also possibly due, +	 * to a {@code void} return type) and one of the following additional conditions is true:, +	 * <li>A {@link HandlerMethodArgumentResolver} has set the {@link ModelAndViewContainer#setResolveView(boolean)} , +	 * flag to {@code false} -- e.g. method arguments providing access to the response., +	 * <li>The request qualifies as "not modified" as defined in {@link ServletWebRequest#checkNotModified(long)}, +	 * and {@link ServletWebRequest#checkNotModified(String)}. In this case a response with "not modified" response , +	 * headers will be automatically generated without the need for return value handling. , +	 * <li>The status on the response is set due to a @{@link ResponseStatus} instruction., +	 * <p>After the return value is handled, callers of this method can use the {@link ModelAndViewContainer} , +	 * to gain access to model attributes, view selection choices, and to check if view resolution is even needed., +	 * Does the given request qualify as "not modified"?, +	 * @see ServletWebRequest#checkNotModified(long), +	 * @see ServletWebRequest#checkNotModified(String), +	 * Does this method have the response status instruction?, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/AbstractMessageConverterMethodProcessor.java, + * A base class for resolving method argument values by reading from the body of a request with , + * {@link HttpMessageConverter}s and for handling method return values by writing to the response with , + * {@link HttpMessageConverter}s.]