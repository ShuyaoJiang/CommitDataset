[+++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, +			mediaType = useFallback(mediaType, fallback) ? fallback : mediaType;, +			if (mediaType != null) {, +				mediaType = addDefaultCharset(mediaType, fallback);, +				headers.setContentType(mediaType);, +		Flux<DataBuffer> body = this.encoder.encode(inputStream,, +				outputMessage.bufferFactory(), elementType, headers.getContentType(), hints);, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, +			mediaType = useFallback(mediaType, fallback) ? fallback : mediaType;, +			if (mediaType != null) {, +				mediaType = addDefaultCharset(mediaType, fallback);, +				headers.setContentType(mediaType);, +		Flux<DataBuffer> body = this.encoder.encode(inputStream,, +				outputMessage.bufferFactory(), elementType, headers.getContentType(), hints);, +, +++ b/spring-web/src/test/java/org/springframework/http/codec/EncoderHttpMessageWriterTests.java, +import java.util.Arrays;, +import java.util.List;, +import java.util.Map;, +import org.junit.Before;, +import org.mockito.ArgumentCaptor;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +import reactor.core.publisher.Flux;, +import org.springframework.util.MimeType;, +import static java.nio.charset.StandardCharsets.ISO_8859_1;, +import static java.nio.charset.StandardCharsets.UTF_8;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.ArgumentMatchers.any;, +import static org.mockito.Mockito.when;, +import static org.springframework.core.ResolvableType.forClass;, +import static org.springframework.http.MediaType.TEXT_HTML;, +import static org.springframework.http.MediaType.TEXT_PLAIN;, +import static org.springframework.http.MediaType.TEXT_XML;, +	private static final Map<String, Object> NO_HINTS = Collections.emptyMap();, +, +	private static final MediaType TEXT_PLAIN_UTF_8 = new MediaType("text", "plain", UTF_8);, +, +, +	@Mock, +	private Encoder<String> encoder;, +, +	private ArgumentCaptor<MediaType> mediaTypeCaptor;, +, +	private MockServerHttpResponse response;, +, +, +	@Before, +	public void setUp() throws Exception {, +		MockitoAnnotations.initMocks(this);, +		this.mediaTypeCaptor = ArgumentCaptor.forClass(MediaType.class);, +		this.response = new MockServerHttpResponse();, +	}, +	public void getWritableMediaTypes() throws Exception {, +		HttpMessageWriter<?> writer = getWriter(MimeTypeUtils.TEXT_HTML, MimeTypeUtils.TEXT_XML);, +		assertEquals(Arrays.asList(TEXT_HTML, TEXT_XML), writer.getWritableMediaTypes());, +	public void canWrite() throws Exception {, +		HttpMessageWriter<?> writer = getWriter(MimeTypeUtils.TEXT_HTML);, +		when(this.encoder.canEncode(forClass(String.class), TEXT_HTML)).thenReturn(true);, +, +		assertTrue(writer.canWrite(forClass(String.class), TEXT_HTML));, +		assertFalse(writer.canWrite(forClass(String.class), TEXT_XML));, +	public void useNegotiatedMediaType() throws Exception {, +		HttpMessageWriter<String> writer = getWriter(MimeTypeUtils.ALL);, +		writer.write(Mono.just("body"), forClass(String.class), TEXT_PLAIN, this.response, NO_HINTS);, +		assertEquals(TEXT_PLAIN, response.getHeaders().getContentType());, +		assertEquals(TEXT_PLAIN, this.mediaTypeCaptor.getValue());, +	@Test, +	public void useDefaultMediaType() throws Exception {, +		testDefaultMediaType(null);, +		testDefaultMediaType(new MediaType("text", "*"));, +		testDefaultMediaType(new MediaType("*", "*"));, +		testDefaultMediaType(MediaType.APPLICATION_OCTET_STREAM);, +	}, +, +	private void testDefaultMediaType(MediaType negotiatedMediaType) {, +, +		this.response = new MockServerHttpResponse();, +		this.mediaTypeCaptor = ArgumentCaptor.forClass(MediaType.class);, +, +		MimeType defaultContentType = MimeTypeUtils.TEXT_XML;, +		HttpMessageWriter<String> writer = getWriter(defaultContentType);, +		writer.write(Mono.just("body"), forClass(String.class), negotiatedMediaType, this.response, NO_HINTS);, +, +		assertEquals(defaultContentType, this.response.getHeaders().getContentType());, +		assertEquals(defaultContentType, this.mediaTypeCaptor.getValue());, +	}, +, +	@Test, +	public void useDefaultMediaTypeCharset() throws Exception {, +		HttpMessageWriter<String> writer = getWriter(TEXT_PLAIN_UTF_8, TEXT_HTML);, +		writer.write(Mono.just("body"), forClass(String.class), TEXT_HTML, response, NO_HINTS);, +, +		assertEquals(new MediaType("text", "html", UTF_8), this.response.getHeaders().getContentType());, +		assertEquals(new MediaType("text", "html", UTF_8), this.mediaTypeCaptor.getValue());, +	}, +]