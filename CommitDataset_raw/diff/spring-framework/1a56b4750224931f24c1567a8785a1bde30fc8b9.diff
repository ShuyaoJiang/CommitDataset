[+++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/MatrixVariable.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.annotation.AliasFor;, +, + * @author Sam Brannen, +	 * Alias for {@link #name}., +	@AliasFor(attribute = "name"), +	 * The name of the matrix variable., +	 * @since 4.2, +	 * @see #value, +	 */, +	@AliasFor(attribute = "value"), +	String name() default "";, +, +	/**, +	 * <p>Default is {@code true}, leading to an exception being thrown in, +	 * case the variable is missing in the request. Switch this to {@code false}, +	 * if you prefer a {@code null} if the variable is missing., +	 * <p>Alternatively, provide a {@link #defaultValue}, which implicitly sets, +	 * this flag to {@code false}., +	 * The default value to use as a fallback., +	 * <p>Supplying a default value implicitly sets {@link #required} to, +	 * {@code false}., +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/MatrixVariable.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.annotation.AliasFor;, +, + * @author Sam Brannen, +	 * Alias for {@link #name}., +	@AliasFor(attribute = "name"), +	 * The name of the matrix variable., +	 * @since 4.2, +	 * @see #value, +	 */, +	@AliasFor(attribute = "value"), +	String name() default "";, +, +	/**, +	 * <p>Default is {@code true}, leading to an exception being thrown in, +	 * case the variable is missing in the request. Switch this to {@code false}, +	 * if you prefer a {@code null} if the variable is missing., +	 * <p>Alternatively, provide a {@link #defaultValue}, which implicitly sets, +	 * this flag to {@code false}., +	 * The default value to use as a fallback., +	 * <p>Supplying a default value implicitly sets {@link #required} to, +	 * {@code false}., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MatrixVariableMapMethodArgumentResolver.java, + * Copyright 2002-2015 the original author or authors., + * {@link MatrixVariable @MatrixVariable} where the annotation does not, + * specify a name. If a name is specified then the argument will by resolved by the, +		MatrixVariable matrixVariable = parameter.getParameterAnnotation(MatrixVariable.class);, +		if (matrixVariable != null) {, +				return !StringUtils.hasText(matrixVariable.name());, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/MatrixVariable.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.annotation.AliasFor;, +, + * @author Sam Brannen, +	 * Alias for {@link #name}., +	@AliasFor(attribute = "name"), +	 * The name of the matrix variable., +	 * @since 4.2, +	 * @see #value, +	 */, +	@AliasFor(attribute = "value"), +	String name() default "";, +, +	/**, +	 * <p>Default is {@code true}, leading to an exception being thrown in, +	 * case the variable is missing in the request. Switch this to {@code false}, +	 * if you prefer a {@code null} if the variable is missing., +	 * <p>Alternatively, provide a {@link #defaultValue}, which implicitly sets, +	 * this flag to {@code false}., +	 * The default value to use as a fallback., +	 * <p>Supplying a default value implicitly sets {@link #required} to, +	 * {@code false}., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MatrixVariableMapMethodArgumentResolver.java, + * Copyright 2002-2015 the original author or authors., + * {@link MatrixVariable @MatrixVariable} where the annotation does not, + * specify a name. If a name is specified then the argument will by resolved by the, +		MatrixVariable matrixVariable = parameter.getParameterAnnotation(MatrixVariable.class);, +		if (matrixVariable != null) {, +				return !StringUtils.hasText(matrixVariable.name());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MatrixVariableMethodArgumentResolver.java, + * Copyright 2002-2015 the original author or authors., + * Resolves method arguments annotated with {@link MatrixVariable @MatrixVariable}., + * @author Sam Brannen, +			String variableName = parameter.getParameterAnnotation(MatrixVariable.class).name();, +			return StringUtils.hasText(variableName);, +		return new MatrixVariableNamedValueInfo(annotation);, +	private static class MatrixVariableNamedValueInfo extends NamedValueInfo {, +		private MatrixVariableNamedValueInfo(MatrixVariable annotation) {, +			super(annotation.name(), annotation.required(), annotation.defaultValue());, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/MatrixVariable.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.annotation.AliasFor;, +, + * @author Sam Brannen, +	 * Alias for {@link #name}., +	@AliasFor(attribute = "name")]