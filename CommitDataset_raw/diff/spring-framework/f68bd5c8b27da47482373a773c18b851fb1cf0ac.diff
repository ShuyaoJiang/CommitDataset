[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +import org.springframework.messaging.tcp.reactor.ReactorTcpClient;, +	 * By default {@link org.springframework.messaging.tcp.reactor.ReactorTcpClient} is used., +			return new ReactorTcpClient<byte[]>(relayHost, relayPort, new StompCodec());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +import org.springframework.messaging.tcp.reactor.ReactorTcpClient;, +	 * By default {@link org.springframework.messaging.tcp.reactor.ReactorTcpClient} is used., +			return new ReactorTcpClient<byte[]>(relayHost, relayPort, new StompCodec());, +++ /dev/null, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +import org.springframework.messaging.tcp.reactor.ReactorTcpClient;, +	 * By default {@link org.springframework.messaging.tcp.reactor.ReactorTcpClient} is used., +			return new ReactorTcpClient<byte[]>(relayHost, relayPort, new StompCodec());, +++ /dev/null, +++ /dev/null, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +import org.springframework.messaging.tcp.reactor.ReactorTcpClient;, +	 * By default {@link org.springframework.messaging.tcp.reactor.ReactorTcpClient} is used., +			return new ReactorTcpClient<byte[]>(relayHost, relayPort, new StompCodec());, +++ /dev/null, +++ /dev/null, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorTcpClient.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.messaging.tcp.reactor;, +, +import java.net.InetSocketAddress;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.messaging.Message;, +import org.springframework.messaging.tcp.ReconnectStrategy;, +import org.springframework.messaging.tcp.TcpConnectionHandler;, +import org.springframework.messaging.tcp.TcpOperations;, +import org.springframework.util.Assert;, +import org.springframework.util.concurrent.ListenableFuture;, +, +import reactor.core.Environment;, +import reactor.core.composable.Composable;, +import reactor.core.composable.Deferred;, +import reactor.core.composable.Promise;, +import reactor.core.composable.Stream;, +import reactor.core.composable.spec.Promises;, +import reactor.function.Consumer;, +import reactor.function.support.SingleUseConsumer;, +import reactor.io.Buffer;, +import reactor.tcp.Reconnect;, +import reactor.tcp.TcpClient;, +import reactor.tcp.TcpConnection;, +import reactor.tcp.encoding.Codec;, +import reactor.tcp.netty.NettyTcpClient;, +import reactor.tcp.spec.TcpClientSpec;, +import reactor.tuple.Tuple;, +import reactor.tuple.Tuple2;, +, +, +/**, + * An implementation of {@link org.springframework.messaging.tcp.TcpOperations}, + * based on the Reactor project., + *, + * @author Rossen Stoyanchev, + * @since 4.0, + */, +public class ReactorTcpClient<P> implements TcpOperations<P> {, +, +	public static final Class<NettyTcpClient> REACTOR_TCP_CLIENT_TYPE = NettyTcpClient.class;, +, +, +	private final static Log logger = LogFactory.getLog(ReactorTcpClient.class);, +, +	private TcpClient<Message<P>, Message<P>> tcpClient;, +, +, +	/**, +	 * A constructor that creates a {@link reactor.tcp.netty.NettyTcpClient} with, +	 * a {@link reactor.event.dispatch.SynchronousDispatcher} as a result of which, +	 * network I/O is handled in Netty threads., +	 *, +	 * <p>Also see the constructor accepting a pre-configured Reactor, +	 * {@link reactor.tcp.TcpClient}., +	 *, +	 * @param host the host to connect to, +	 * @param port the port to connect to, +	 * @param codec the codec to use for encoding and decoding the TCP stream, +	 */, +	public ReactorTcpClient(String host, int port, Codec<Buffer, Message<P>, Message<P>> codec) {]