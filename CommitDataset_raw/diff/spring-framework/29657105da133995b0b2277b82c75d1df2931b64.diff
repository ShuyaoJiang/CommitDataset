[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/AspectJProxyUtils.java, + * Copyright 2002-2008 the original author or authors., +	public static boolean makeAdvisorChainAspectJCapableIfNecessary(List<Advisor> advisors) {, +			for (Advisor advisor : advisors) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/AspectJProxyUtils.java, + * Copyright 2002-2008 the original author or authors., +	public static boolean makeAdvisorChainAspectJCapableIfNecessary(List<Advisor> advisors) {, +			for (Advisor advisor : advisors) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectJAdvisorsBuilder.java, + * Copyright 2002-2008 the original author or authors., +		for (String aspectName : aspectNames) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/AspectJProxyUtils.java, + * Copyright 2002-2008 the original author or authors., +	public static boolean makeAdvisorChainAspectJCapableIfNecessary(List<Advisor> advisors) {, +			for (Advisor advisor : advisors) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectJAdvisorsBuilder.java, + * Copyright 2002-2008 the original author or authors., +		for (String aspectName : aspectNames) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJAwareAdvisorAutoProxyCreator.java, + * Copyright 2002-2008 the original author or authors., +	@SuppressWarnings("unchecked"), +	protected List<Advisor> sortAdvisors(List<Advisor> advisors) {, +		List<PartiallyComparableAdvisorHolder> partiallyComparableAdvisors =, +				new LinkedList<PartiallyComparableAdvisorHolder>();, +		for (Advisor element : advisors) {, +			partiallyComparableAdvisors.add(, +					new PartiallyComparableAdvisorHolder(element, DEFAULT_PRECEDENCE_COMPARATOR));, +		List<PartiallyComparableAdvisorHolder> sorted =, +				(List<PartiallyComparableAdvisorHolder>) PartialOrder.sort(partiallyComparableAdvisors);, +			// TODO: work harder to give a better error message here., +		List<Advisor> result = new LinkedList<Advisor>();, +		for (PartiallyComparableAdvisorHolder pcAdvisor : sorted) {, +	protected void extendAdvisors(List<Advisor> candidateAdvisors) {, +		List<Advisor> candidateAdvisors = findCandidateAdvisors();, +		for (Advisor advisor : candidateAdvisors) {, +, +		private final Comparator<Advisor> comparator;, +		public PartiallyComparableAdvisorHolder(Advisor advisor, Comparator<Advisor> comparator) {, +				sb.append("order ").append(((Ordered) this.advisor).getOrder()).append(", ");, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/AspectJProxyUtils.java, + * Copyright 2002-2008 the original author or authors., +	public static boolean makeAdvisorChainAspectJCapableIfNecessary(List<Advisor> advisors) {, +			for (Advisor advisor : advisors) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectJAdvisorsBuilder.java, + * Copyright 2002-2008 the original author or authors., +		for (String aspectName : aspectNames) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJAwareAdvisorAutoProxyCreator.java, + * Copyright 2002-2008 the original author or authors., +	@SuppressWarnings("unchecked"), +	protected List<Advisor> sortAdvisors(List<Advisor> advisors) {, +		List<PartiallyComparableAdvisorHolder> partiallyComparableAdvisors =, +				new LinkedList<PartiallyComparableAdvisorHolder>();, +		for (Advisor element : advisors) {, +			partiallyComparableAdvisors.add(, +					new PartiallyComparableAdvisorHolder(element, DEFAULT_PRECEDENCE_COMPARATOR));, +		List<PartiallyComparableAdvisorHolder> sorted =, +				(List<PartiallyComparableAdvisorHolder>) PartialOrder.sort(partiallyComparableAdvisors);, +			// TODO: work harder to give a better error message here., +		List<Advisor> result = new LinkedList<Advisor>();, +		for (PartiallyComparableAdvisorHolder pcAdvisor : sorted) {, +	protected void extendAdvisors(List<Advisor> candidateAdvisors) {, +		List<Advisor> candidateAdvisors = findCandidateAdvisors();, +		for (Advisor advisor : candidateAdvisors) {, +, +		private final Comparator<Advisor> comparator;, +		public PartiallyComparableAdvisorHolder(Advisor advisor, Comparator<Advisor> comparator) {, +				sb.append("order ").append(((Ordered) this.advisor).getOrder()).append(", ");, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/target/AbstractBeanFactoryBasedTargetSourceCreator.java, +	private final Map<String, DefaultListableBeanFactory> internalBeanFactories =, +			new HashMap<String, DefaultListableBeanFactory>();, +			DefaultListableBeanFactory internalBeanFactory = this.internalBeanFactories.get(beanName);, +	}, +		for (Iterator<BeanPostProcessor> it = internalBeanFactory.getBeanPostProcessors().iterator(); it.hasNext();) {, +			if (it.next() instanceof AopInfrastructureBean) {, +			for (DefaultListableBeanFactory bf : this.internalBeanFactories.values()) {, +				bf.destroySingletons();, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/AspectJProxyUtils.java, + * Copyright 2002-2008 the original author or authors., +	public static boolean makeAdvisorChainAspectJCapableIfNecessary(List<Advisor> advisors) {, +			for (Advisor advisor : advisors) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectJAdvisorsBuilder.java, + * Copyright 2002-2008 the original author or authors., +		for (String aspectName : aspectNames) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJAwareAdvisorAutoProxyCreator.java, + * Copyright 2002-2008 the original author or authors., +	@SuppressWarnings("unchecked"), +	protected List<Advisor> sortAdvisors(List<Advisor> advisors) {, +		List<PartiallyComparableAdvisorHolder> partiallyComparableAdvisors =, +				new LinkedList<PartiallyComparableAdvisorHolder>();, +		for (Advisor element : advisors) {, +			partiallyComparableAdvisors.add(, +					new PartiallyComparableAdvisorHolder(element, DEFAULT_PRECEDENCE_COMPARATOR));, +		List<PartiallyComparableAdvisorHolder> sorted =, +				(List<PartiallyComparableAdvisorHolder>) PartialOrder.sort(partiallyComparableAdvisors);, +			// TODO: work harder to give a better error message here., +		List<Advisor> result = new LinkedList<Advisor>();, +		for (PartiallyComparableAdvisorHolder pcAdvisor : sorted) {, +	protected void extendAdvisors(List<Advisor> candidateAdvisors) {, +		List<Advisor> candidateAdvisors = findCandidateAdvisors();, +		for (Advisor advisor : candidateAdvisors) {]