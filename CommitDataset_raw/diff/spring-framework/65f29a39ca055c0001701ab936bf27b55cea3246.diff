[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java, +	private static final Class<?>[] ASPECTJ_ANNOTATION_CLASSES = new Class<?>[] {, +			Pointcut.class, Around.class, Before.class, After.class, AfterReturning.class, AfterThrowing.class};, +, +		for (Class<?> clazz : ASPECTJ_ANNOTATION_CLASSES) {, +	 * Enum for AspectJ annotation types., +	 * @see AspectJAnnotation#getAnnotationType(), +		AtPointcut, AtAround, AtBefore, AtAfter, AtAfterReturning, AtAfterThrowing, +		private static final String[] EXPRESSION_ATTRIBUTES = new String[] {"pointcut", "value"};, +		private static Map<Class<?>, AspectJAnnotationType> annotationTypeMap = new HashMap<>(8);, +			annotationTypeMap.put(Pointcut.class, AspectJAnnotationType.AtPointcut);, +			annotationTypeMap.put(Around.class, AspectJAnnotationType.AtAround);, +			annotationTypeMap.put(Before.class, AspectJAnnotationType.AtBefore);, +			annotationTypeMap.put(After.class, AspectJAnnotationType.AtAfter);, +			annotationTypeMap.put(AfterReturning.class, AspectJAnnotationType.AtAfterReturning);, +			annotationTypeMap.put(AfterThrowing.class, AspectJAnnotationType.AtAfterThrowing);, +				Object argNames = AnnotationUtils.getValue(annotation, "argNames");, +				this.argumentNames = (argNames instanceof String ? (String) argNames : "");, +				throw new IllegalArgumentException(annotation + " is not a valid AspectJ annotation", ex);, +			AspectJAnnotationType type = annotationTypeMap.get(annotation.annotationType());, +			if (type != null) {, +				return type;, +			throw new IllegalStateException("Unknown annotation type: " + annotation);, +		private String resolveExpression(A annotation) {, +			for (String attributeName : EXPRESSION_ATTRIBUTES) {, +				Object val = AnnotationUtils.getValue(annotation, attributeName);, +				if (val instanceof String) {, +					String str = (String) val;, +					if (!str.isEmpty()) {, +						return str;, +			StringTokenizer nameTokens = new StringTokenizer(annotation.getArgumentNames(), ",");, +			if (nameTokens.countTokens() > 0) {, +				String[] names = new String[nameTokens.countTokens()];, +					names[i] = nameTokens.nextToken();, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java, +	private static final Class<?>[] ASPECTJ_ANNOTATION_CLASSES = new Class<?>[] {, +			Pointcut.class, Around.class, Before.class, After.class, AfterReturning.class, AfterThrowing.class};, +, +		for (Class<?> clazz : ASPECTJ_ANNOTATION_CLASSES) {, +	 * Enum for AspectJ annotation types., +	 * @see AspectJAnnotation#getAnnotationType(), +		AtPointcut, AtAround, AtBefore, AtAfter, AtAfterReturning, AtAfterThrowing, +		private static final String[] EXPRESSION_ATTRIBUTES = new String[] {"pointcut", "value"};, +		private static Map<Class<?>, AspectJAnnotationType> annotationTypeMap = new HashMap<>(8);, +			annotationTypeMap.put(Pointcut.class, AspectJAnnotationType.AtPointcut);, +			annotationTypeMap.put(Around.class, AspectJAnnotationType.AtAround);, +			annotationTypeMap.put(Before.class, AspectJAnnotationType.AtBefore);, +			annotationTypeMap.put(After.class, AspectJAnnotationType.AtAfter);, +			annotationTypeMap.put(AfterReturning.class, AspectJAnnotationType.AtAfterReturning);, +			annotationTypeMap.put(AfterThrowing.class, AspectJAnnotationType.AtAfterThrowing);, +				Object argNames = AnnotationUtils.getValue(annotation, "argNames");, +				this.argumentNames = (argNames instanceof String ? (String) argNames : "");, +				throw new IllegalArgumentException(annotation + " is not a valid AspectJ annotation", ex);, +			AspectJAnnotationType type = annotationTypeMap.get(annotation.annotationType());, +			if (type != null) {, +				return type;, +			throw new IllegalStateException("Unknown annotation type: " + annotation);, +		private String resolveExpression(A annotation) {, +			for (String attributeName : EXPRESSION_ATTRIBUTES) {, +				Object val = AnnotationUtils.getValue(annotation, attributeName);, +				if (val instanceof String) {, +					String str = (String) val;, +					if (!str.isEmpty()) {, +						return str;, +			StringTokenizer nameTokens = new StringTokenizer(annotation.getArgumentNames(), ",");, +			if (nameTokens.countTokens() > 0) {, +				String[] names = new String[nameTokens.countTokens()];, +					names[i] = nameTokens.nextToken();, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		catch (NoSuchMethodException ex) {, +			return null;, +		}]