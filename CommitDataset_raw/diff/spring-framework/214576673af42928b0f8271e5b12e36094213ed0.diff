[+++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	 * Instantiate a class using its 'primary' constructor (for Kotlin classes,, +	 * potentially having default arguments declared) or its default constructor, +	 * (for regular Java classes, expecting a standard no-arg setup)., +	 * @param clazz the class to instantiate, +	 * @throws BeanInstantiationException if the bean cannot be instantiated., +	 * The cause may notably indicate a {@link NoSuchMethodException} if no, +	 * primary/default constructor was found - or an exception thrown from, +	 * the constructor invocation attempt, including a runtime-generated, +	 * {@link NoClassDefFoundError} in case of an unresolvable dependency., +					KotlinDelegate.getPrimaryConstructor(clazz) : clazz.getDeclaredConstructor());, +		 * Determine the Java constructor corresponding to the Kotlin primary constructor., +		 * @param clazz the {@link Class} of the Kotlin class, +		 * @throws NoSuchMethodException if no such constructor found, +		 * @since 5.0.3, +		 * @see #findPrimaryConstructor, +		 * @see Class#getDeclaredConstructor, +		 */, +		public static <T> Constructor<T> getPrimaryConstructor(Class<T> clazz) throws NoSuchMethodException {, +			Constructor<T> ctor = findPrimaryConstructor(clazz);, +			if (ctor == null) {, +				throw new NoSuchMethodException();, +			}, +			return ctor;, +		}, +, +		/**, +		 * Retrieve the Java constructor corresponding to the Kotlin primary constructor, if any., +				if (constructor == null) {, +					throw new IllegalStateException(, +							"Failed to find Java constructor for Kotlin primary constructor: " + clazz.getName());, +				}, +		 * @param args the constructor arguments to apply, +		 * (use {@code null} for unspecified parameter if needed), +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	 * Instantiate a class using its 'primary' constructor (for Kotlin classes,, +	 * potentially having default arguments declared) or its default constructor, +	 * (for regular Java classes, expecting a standard no-arg setup)., +	 * @param clazz the class to instantiate, +	 * @throws BeanInstantiationException if the bean cannot be instantiated., +	 * The cause may notably indicate a {@link NoSuchMethodException} if no, +	 * primary/default constructor was found - or an exception thrown from, +	 * the constructor invocation attempt, including a runtime-generated, +	 * {@link NoClassDefFoundError} in case of an unresolvable dependency., +					KotlinDelegate.getPrimaryConstructor(clazz) : clazz.getDeclaredConstructor());, +		 * Determine the Java constructor corresponding to the Kotlin primary constructor., +		 * @param clazz the {@link Class} of the Kotlin class, +		 * @throws NoSuchMethodException if no such constructor found, +		 * @since 5.0.3, +		 * @see #findPrimaryConstructor, +		 * @see Class#getDeclaredConstructor, +		 */, +		public static <T> Constructor<T> getPrimaryConstructor(Class<T> clazz) throws NoSuchMethodException {, +			Constructor<T> ctor = findPrimaryConstructor(clazz);, +			if (ctor == null) {, +				throw new NoSuchMethodException();, +			}, +			return ctor;, +		}, +, +		/**, +		 * Retrieve the Java constructor corresponding to the Kotlin primary constructor, if any., +				if (constructor == null) {, +					throw new IllegalStateException(, +							"Failed to find Java constructor for Kotlin primary constructor: " + clazz.getName());, +				}, +		 * @param args the constructor arguments to apply, +		 * (use {@code null} for unspecified parameter if needed), +++ b/spring-test/src/main/java/org/springframework/test/context/support/AbstractTestContextBootstrapper.java, +import org.springframework.beans.BeanInstantiationException;, +	private List<TestExecutionListener> instantiateListeners(Collection<Class<? extends TestExecutionListener>> classes) {, +		List<TestExecutionListener> listeners = new ArrayList<>(classes.size());, +		for (Class<? extends TestExecutionListener> listenerClass : classes) {, +			catch (BeanInstantiationException ex) {, +				if (ex.getCause() instanceof NoClassDefFoundError) {, +					// TestExecutionListener not applicable due to a missing dependency, +						logger.debug(String.format(, +								"Skipping candidate TestExecutionListener [%s] due to a missing dependency. " +, +								"and their required dependencies available. Offending class: [%s]",, +								listenerClass.getName(), ex.getCause().getMessage()));, +					}, +				}, +				else {, +					throw ex;]