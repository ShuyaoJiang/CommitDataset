[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			if (StringUtils.hasLength(initMethodName) &&, +					!(isInitializingBean && "afterPropertiesSet".equals(initMethodName)) &&, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			if (StringUtils.hasLength(initMethodName) &&, +					!(isInitializingBean && "afterPropertiesSet".equals(initMethodName)) &&, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +			if (otherAbd.getInitMethodName() != null) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			if (StringUtils.hasLength(initMethodName) &&, +					!(isInitializingBean && "afterPropertiesSet".equals(initMethodName)) &&, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +			if (otherAbd.getInitMethodName() != null) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			if (StringUtils.hasLength(initMethodName) &&, +					!(isInitializingBean && "afterPropertiesSet".equals(initMethodName)) &&, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +			if (otherAbd.getInitMethodName() != null) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/xml/DefaultLifecycleMethodsTests.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +	public void setup() throws Exception {, +		new XmlBeanDefinitionReader(this.beanFactory).loadBeanDefinitions(, +				new ClassPathResource("defaultLifecycleMethods.xml", getClass()));, +, +		assertFalse("Custom init method called incorrectly", bean.isCustomInitCalled());, +		assertFalse("Custom destroy method called incorrectly", bean.isCustomDestroyCalled());, +		assertFalse("Custom init method called incorrectly", bean.isCustomInitCalled());, +		assertFalse("Custom destroy method called incorrectly", bean.isCustomDestroyCalled());, +		assertFalse("Default init method called incorrectly", bean.isInitCalled());, +		assertTrue("Custom init method not called", bean.isCustomInitCalled());, +		assertFalse("Default destroy method called incorrectly", bean.isDestroyCalled());, +		assertTrue("Custom destroy method not called", bean.isCustomDestroyCalled());, +	}, +, +	@Test, +	public void childWithDefaultLifecycleMethods() throws Exception {, +		LifecycleAwareBean bean = (LifecycleAwareBean) this.beanFactory.getBean("childWithDefaultLifecycleMethods");, +		assertTrue("Bean not initialized", bean.isInitCalled());, +		assertFalse("Custom init method called incorrectly", bean.isCustomInitCalled());, +		assertFalse("Bean destroyed too early", bean.isDestroyCalled());, +		this.beanFactory.destroySingletons();, +		assertTrue("Bean not destroyed", bean.isDestroyCalled());, +		assertFalse("Custom destroy method called incorrectly", bean.isCustomDestroyCalled());, +	}, +, +	@Test, +	public void childWithLifecycleMethodsDisabled() throws Exception {, +		LifecycleAwareBean bean = (LifecycleAwareBean) this.beanFactory.getBean("childWithLifecycleMethodsDisabled");, +		assertFalse("Bean init method called incorrectly", bean.isInitCalled());, +		assertFalse("Custom init method called incorrectly", bean.isCustomInitCalled());, +		this.beanFactory.destroySingletons();, +		assertFalse("Bean destroy method called incorrectly", bean.isDestroyCalled());, +		assertFalse("Custom destroy method called incorrectly", bean.isCustomDestroyCalled());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			if (StringUtils.hasLength(initMethodName) &&, +					!(isInitializingBean && "afterPropertiesSet".equals(initMethodName)) &&, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +			if (otherAbd.getInitMethodName() != null) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/xml/DefaultLifecycleMethodsTests.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +	public void setup() throws Exception {, +		new XmlBeanDefinitionReader(this.beanFactory).loadBeanDefinitions(, +				new ClassPathResource("defaultLifecycleMethods.xml", getClass()));, +, +		assertFalse("Custom init method called incorrectly", bean.isCustomInitCalled());, +		assertFalse("Custom destroy method called incorrectly", bean.isCustomDestroyCalled());, +		assertFalse("Custom init method called incorrectly", bean.isCustomInitCalled());, +		assertFalse("Custom destroy method called incorrectly", bean.isCustomDestroyCalled());, +		assertFalse("Default init method called incorrectly", bean.isInitCalled());, +		assertTrue("Custom init method not called", bean.isCustomInitCalled());, +		assertFalse("Default destroy method called incorrectly", bean.isDestroyCalled());, +		assertTrue("Custom destroy method not called", bean.isCustomDestroyCalled());, +	}, +, +	@Test, +	public void childWithDefaultLifecycleMethods() throws Exception {, +		LifecycleAwareBean bean = (LifecycleAwareBean) this.beanFactory.getBean("childWithDefaultLifecycleMethods");, +		assertTrue("Bean not initialized", bean.isInitCalled());, +		assertFalse("Custom init method called incorrectly", bean.isCustomInitCalled());, +		assertFalse("Bean destroyed too early", bean.isDestroyCalled());, +		this.beanFactory.destroySingletons();, +		assertTrue("Bean not destroyed", bean.isDestroyCalled());, +		assertFalse("Custom destroy method called incorrectly", bean.isCustomDestroyCalled());, +	}, +, +	@Test, +	public void childWithLifecycleMethodsDisabled() throws Exception {, +		LifecycleAwareBean bean = (LifecycleAwareBean) this.beanFactory.getBean("childWithLifecycleMethodsDisabled");, +		assertFalse("Bean init method called incorrectly", bean.isInitCalled());, +		assertFalse("Custom init method called incorrectly", bean.isCustomInitCalled());, +		this.beanFactory.destroySingletons();, +		assertFalse("Bean destroy method called incorrectly", bean.isDestroyCalled());, +		assertFalse("Custom destroy method called incorrectly", bean.isCustomDestroyCalled());, +++ b/spring-beans/src/test/resources/org/springframework/beans/factory/xml/defaultLifecycleMethods.xml, +	<bean id="childWithDefaultLifecycleMethods" class="org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests$LifecycleAwareBean"]