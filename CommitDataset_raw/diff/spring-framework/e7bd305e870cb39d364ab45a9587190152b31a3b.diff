[+++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2019 the original author or authors., +	@SuppressWarnings("resource"), +	@SuppressWarnings("resource"), +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2019 the original author or authors., +	@SuppressWarnings("resource"), +	@SuppressWarnings("resource"), +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncExecutionTests.java, + * Copyright 2002-2019 the original author or authors., +@SuppressWarnings("resource"), +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2019 the original author or authors., +	@SuppressWarnings("resource"), +	@SuppressWarnings("resource"), +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncExecutionTests.java, + * Copyright 2002-2019 the original author or authors., +@SuppressWarnings("resource"), +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;, +		BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertySourcesPlaceholderConfigurer.class);, +		BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertySourcesPlaceholderConfigurer.class);, +		BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertySourcesPlaceholderConfigurer.class);, +		BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertySourcesPlaceholderConfigurer.class);, +		BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertySourcesPlaceholderConfigurer.class);, +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2019 the original author or authors., +	@SuppressWarnings("resource"), +	@SuppressWarnings("resource"), +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncExecutionTests.java, + * Copyright 2002-2019 the original author or authors., +@SuppressWarnings("resource"), +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;, +		BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertySourcesPlaceholderConfigurer.class);, +		BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertySourcesPlaceholderConfigurer.class);, +		BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertySourcesPlaceholderConfigurer.class);, +		BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertySourcesPlaceholderConfigurer.class);, +		BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertySourcesPlaceholderConfigurer.class);, +++ b/spring-context/src/test/java/org/springframework/scheduling/concurrent/ThreadPoolExecutorFactoryBeanTests.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.context.ConfigurableApplicationContext;, +		ConfigurableApplicationContext context = new AnnotationConfigApplicationContext(ExecutorConfig.class);, +		ExecutorService executor = context.getBean(ExecutorService.class);, +		FutureTask<String> task = new FutureTask<>(() -> "foo");, +		context.close();, +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2019 the original author or authors., +	@SuppressWarnings("resource"), +	@SuppressWarnings("resource"), +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncExecutionTests.java, + * Copyright 2002-2019 the original author or authors., +@SuppressWarnings("resource"), +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;, +		BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertySourcesPlaceholderConfigurer.class);, +		BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertySourcesPlaceholderConfigurer.class);, +		BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertySourcesPlaceholderConfigurer.class);, +		BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertySourcesPlaceholderConfigurer.class);, +		BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertySourcesPlaceholderConfigurer.class);, +++ b/spring-context/src/test/java/org/springframework/scheduling/concurrent/ThreadPoolExecutorFactoryBeanTests.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.context.ConfigurableApplicationContext;, +		ConfigurableApplicationContext context = new AnnotationConfigApplicationContext(ExecutorConfig.class);, +		ExecutorService executor = context.getBean(ExecutorService.class);, +		FutureTask<String> task = new FutureTask<>(() -> "foo");, +		context.close();, +++ b/spring-context/src/test/java/org/springframework/scheduling/config/AnnotationDrivenBeanDefinitionParserTests.java, + * Copyright 2002-2019 the original author or authors., +import org.junit.After;, +import org.springframework.context.ConfigurableApplicationContext;, +	private ConfigurableApplicationContext context = new ClassPathXmlApplicationContext(, +, +, +	@After, +	public void closeApplicationContext() {, +		context.close();, +		assertSame(executor, ((Supplier<?>) new DirectFieldAccessor(postProcessor).getPropertyValue("executor")).get());, +		assertSame(exceptionHandler, ((Supplier<?>) new DirectFieldAccessor(postProcessor).getPropertyValue("exceptionHandler")).get());, +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2019 the original author or authors., +	@SuppressWarnings("resource"), +	@SuppressWarnings("resource"), +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncExecutionTests.java, + * Copyright 2002-2019 the original author or authors., +@SuppressWarnings("resource"), +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;, +		BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertySourcesPlaceholderConfigurer.class);, +		BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertySourcesPlaceholderConfigurer.class);, +		BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertySourcesPlaceholderConfigurer.class);, +		BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertySourcesPlaceholderConfigurer.class);, +		BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertySourcesPlaceholderConfigurer.class);, +++ b/spring-context/src/test/java/org/springframework/scheduling/concurrent/ThreadPoolExecutorFactoryBeanTests.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.context.ConfigurableApplicationContext;]