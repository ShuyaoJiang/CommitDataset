[+++ b/spring-test/spring-test.gradle, +	testCompile("org.apache.httpcomponents:httpclient:4.5.8") {, +++ b/spring-test/spring-test.gradle, +	testCompile("org.apache.httpcomponents:httpclient:4.5.8") {, +++ b/spring-web/spring-web.gradle, +	optional("org.eclipse.jetty:jetty-reactive-httpclient:1.0.3"), +	optional("org.apache.httpcomponents:httpclient:4.5.8") {, +++ b/spring-test/spring-test.gradle, +	testCompile("org.apache.httpcomponents:httpclient:4.5.8") {, +++ b/spring-web/spring-web.gradle, +	optional("org.eclipse.jetty:jetty-reactive-httpclient:1.0.3"), +	optional("org.apache.httpcomponents:httpclient:4.5.8") {, +++ b/spring-webflux/spring-webflux.gradle, +	optional("org.apache.httpcomponents:httpclient:4.5.8") {, +	testCompile("org.eclipse.jetty:jetty-reactive-httpclient:1.0.3"), +++ b/spring-test/spring-test.gradle, +	testCompile("org.apache.httpcomponents:httpclient:4.5.8") {, +++ b/spring-web/spring-web.gradle, +	optional("org.eclipse.jetty:jetty-reactive-httpclient:1.0.3"), +	optional("org.apache.httpcomponents:httpclient:4.5.8") {, +++ b/spring-webflux/spring-webflux.gradle, +	optional("org.apache.httpcomponents:httpclient:4.5.8") {, +	testCompile("org.eclipse.jetty:jetty-reactive-httpclient:1.0.3"), +++ b/spring-webmvc/spring-webmvc.gradle, +	testCompile("org.apache.httpcomponents:httpclient:4.5.8") {, +++ b/spring-test/spring-test.gradle, +	testCompile("org.apache.httpcomponents:httpclient:4.5.8") {, +++ b/spring-web/spring-web.gradle, +	optional("org.eclipse.jetty:jetty-reactive-httpclient:1.0.3"), +	optional("org.apache.httpcomponents:httpclient:4.5.8") {, +++ b/spring-webflux/spring-webflux.gradle, +	optional("org.apache.httpcomponents:httpclient:4.5.8") {, +	testCompile("org.eclipse.jetty:jetty-reactive-httpclient:1.0.3"), +++ b/spring-webmvc/spring-webmvc.gradle, +	testCompile("org.apache.httpcomponents:httpclient:4.5.8") {, +++ b/src/docs/asciidoc/core/core-beans.adoc, +You can also provide all beans of a particular type from the `ApplicationContext`, +by adding the annotation to a field or method that expects an array of that type,, +as the following example shows:, +Even typed `Map` instances can be autowired as long as the expected key type is `String`., +The Map values contain all beans of the expected type, and the keys contain the, +By default, autowiring fails when no matching candidate beans are available for, +a given injection point. In the case of a declared array, collection or map,, +at least one matching element is expected., +, +The default behavior is to treat annotated methods and fields as indicating, +required dependencies. You can change this behavior as demonstrated in the, +following example, enabling the framework to skip a non-satisfiable injection, +point through marking it as non-required:, +A non-required method will not be called at all if its dependency (or one of its, +dependencies in case of multiple arguments) is not available. A non-required field, +will not get populated at all in such case, leaving its default value in place., +, +Injected constructor and factory method arguments are a special case since the, +'required' flag on `@Autowired` has a somewhat different meaning due to Spring's, +constructor resolution algorithm potentially dealing with multiple constructors., +Constructor and factory method arguments are effectively required by default but, +with a few special rules in a single-constructor scenario, such as multi-element, +injection points (arrays, collections, maps) resolving to empty instances if no, +matching beans are available. This allows for a common implementation pattern, +where all dependencies can be declared in a unique multi-argument constructor,, +e.g. declared as a single public constructor without an `@Autowired` annotation., +, +Only one annotated constructor per class can be marked as required, but multiple, +non-required constructors can be annotated. In that case, each is considered among, +the candidates and Spring uses the greediest constructor whose dependencies can be, +The constructor resolution algorithm is the same as for non-annotated classes with, +overloaded constructors, just narrowing the candidates to annotated constructors., +The 'required' attribute of `@Autowired` is recommended over the `@Required` annotation, +on setter methods. The 'required' attribute indicates that the property is not required, +for autowiring purposes. The property is ignored if it cannot be autowired. `@Required`,, +on the other hand, is stronger in that it enforces the property to be set by any means, +supported by the container. If no value is defined, a corresponding exception is raised.]