[+++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java, +  private volatile Throwable failureException;, +, +    failureException = new IOException("Mock failure!");, +    failureException.setStackTrace(new StackTraceElement[0]);, +  /**, +   * Set the exception to be used when a failure is triggered., +   * <p>, +   * It is a best practice to remove the stack trace from {@code t} since it can misleadingly, +   * point to code unrelated to this class., +   */, +++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java, +  private volatile Throwable failureException;, +, +    failureException = new IOException("Mock failure!");, +    failureException.setStackTrace(new StackTraceElement[0]);, +  /**, +   * Set the exception to be used when a failure is triggered., +   * <p>, +   * It is a best practice to remove the stack trace from {@code t} since it can misleadingly, +   * point to code unrelated to this class., +   */, +++ b/retrofit-mock/src/test/java/retrofit2/mock/NetworkBehaviorTest.java, +import java.io.IOException;, +  @Test public void defaultThrowable() {, +    Throwable t = behavior.failureException();, +    assertThat(t).isExactlyInstanceOf(IOException.class).hasMessage("Mock failure!");, +    assertThat(t.getStackTrace()).isEmpty();, +  }, +]