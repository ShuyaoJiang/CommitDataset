[+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    private final BufferedSource delegateSource;, +      this.delegateSource = Okio.buffer(new ForwardingSource(delegate.source()) {, +        @Override public long read(Buffer sink, long byteCount) throws IOException {, +          try {, +            return super.read(sink, byteCount);, +          } catch (IOException e) {, +            thrownException = e;, +            throw e;, +          }, +        }, +      });, +      return delegateSource;, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    private final BufferedSource delegateSource;, +      this.delegateSource = Okio.buffer(new ForwardingSource(delegate.source()) {, +        @Override public long read(Buffer sink, long byteCount) throws IOException {, +          try {, +            return super.read(sink, byteCount);, +          } catch (IOException e) {, +            thrownException = e;, +            throw e;, +          }, +        }, +      });, +      return delegateSource;, +++ b/retrofit/src/test/java/retrofit2/CallTest.java, +import static retrofit2.TestingUtils.repeat;, +  @Test public void converterBodyDoesNotLeakContentInIntermediateBuffers() throws IOException {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(new Converter.Factory() {, +          @Override public Converter<ResponseBody, ?> responseBodyConverter(Type type,, +              Annotation[] annotations, Retrofit retrofit) {, +            return new Converter<ResponseBody, String>() {, +              @Override public String convert(ResponseBody value) throws IOException {, +                String prefix = value.source().readUtf8(2);, +                value.source().skip(20_000 - 4);, +                String suffix = value.source().readUtf8();, +                return prefix + suffix;, +              }, +            };, +          }, +        }), +        .build();, +    Service example = retrofit.create(Service.class);, +, +    server.enqueue(new MockResponse().setBody(repeat('a', 10_000) + repeat('b', 10_000)));, +, +    Response<String> response = example.getString().execute();, +    assertThat(response.body()).isEqualTo("aabb");, +  }, +, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    private final BufferedSource delegateSource;, +      this.delegateSource = Okio.buffer(new ForwardingSource(delegate.source()) {, +        @Override public long read(Buffer sink, long byteCount) throws IOException {, +          try {, +            return super.read(sink, byteCount);, +          } catch (IOException e) {, +            thrownException = e;, +            throw e;, +          }, +        }, +      });, +      return delegateSource;, +++ b/retrofit/src/test/java/retrofit2/CallTest.java, +import static retrofit2.TestingUtils.repeat;, +  @Test public void converterBodyDoesNotLeakContentInIntermediateBuffers() throws IOException {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(new Converter.Factory() {, +          @Override public Converter<ResponseBody, ?> responseBodyConverter(Type type,, +              Annotation[] annotations, Retrofit retrofit) {, +            return new Converter<ResponseBody, String>() {, +              @Override public String convert(ResponseBody value) throws IOException {, +                String prefix = value.source().readUtf8(2);, +                value.source().skip(20_000 - 4);, +                String suffix = value.source().readUtf8();, +                return prefix + suffix;, +              }, +            };, +          }, +        }), +        .build();, +    Service example = retrofit.create(Service.class);, +, +    server.enqueue(new MockResponse().setBody(repeat('a', 10_000) + repeat('b', 10_000)));, +, +    Response<String> response = example.getString().execute();, +    assertThat(response.body()).isEqualTo("aabb");, +  }, +, +++ b/retrofit/src/test/java/retrofit2/TestingUtils.java, +import java.util.Arrays;, +final class TestingUtils {, +  static Method onlyMethod(Class c) {, +, +  static String repeat(char c, int times) {, +    char[] cs = new char[times];]