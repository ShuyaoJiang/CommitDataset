[+++ b/pom.xml, +    <appengine.version>1.9.6</appengine.version>, +++ b/pom.xml, +    <appengine.version>1.9.6</appengine.version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import java.lang.annotation.Annotation;, +import retrofit.http.Part;, +import retrofit.http.PartMap;, +  private final Annotation[] paramAnnotations;, +    paramAnnotations = methodInfo.requestParamAnnotation;, +      Annotation annotation = paramAnnotations[i];, +            String transferEncoding = ((Part) annotation).encoding();, +              multipartBody.addPart(name, transferEncoding, (TypedOutput) value);, +              multipartBody.addPart(name, transferEncoding, new TypedString((String) value));, +              multipartBody.addPart(name, transferEncoding, converter.toBody(value));, +            String transferEncoding = ((PartMap) annotation).encoding();, +                  multipartBody.addPart(entryName, transferEncoding, (TypedOutput) entryValue);, +                  multipartBody.addPart(entryName, transferEncoding,, +                      new TypedString((String) entryValue));, +                  multipartBody.addPart(entryName, transferEncoding, converter.toBody(entryValue));, +++ b/pom.xml, +    <appengine.version>1.9.6</appengine.version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import java.lang.annotation.Annotation;, +import retrofit.http.Part;, +import retrofit.http.PartMap;, +  private final Annotation[] paramAnnotations;, +    paramAnnotations = methodInfo.requestParamAnnotation;, +      Annotation annotation = paramAnnotations[i];, +            String transferEncoding = ((Part) annotation).encoding();, +              multipartBody.addPart(name, transferEncoding, (TypedOutput) value);, +              multipartBody.addPart(name, transferEncoding, new TypedString((String) value));, +              multipartBody.addPart(name, transferEncoding, converter.toBody(value));, +            String transferEncoding = ((PartMap) annotation).encoding();, +                  multipartBody.addPart(entryName, transferEncoding, (TypedOutput) entryValue);, +                  multipartBody.addPart(entryName, transferEncoding,, +                      new TypedString((String) entryValue));, +                  multipartBody.addPart(entryName, transferEncoding, converter.toBody(entryValue));, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +  Annotation[] requestParamAnnotation;, +   * Loads {@link #requestParamNames}, {@link #requestParamUsage}, and, +   * {@link #requestParamAnnotation}. Must be called after {@link #parseMethodAnnotations()}., +    Class<?>[] methodParameterTypes = method.getParameterTypes();, +    Annotation[][] methodParameterAnnotationArrays = method.getParameterAnnotations();, +    int count = methodParameterAnnotationArrays.length;, +    String[] requestParamNames = new String[count];, +    ParamUsage[] requestParamUsage = new ParamUsage[count];, +    Annotation[] requestParamAnnotation = new Annotation[count];, +      Class<?> methodParameterType = methodParameterTypes[i];, +      Annotation[] methodParameterAnnotations = methodParameterAnnotationArrays[i];, +      if (methodParameterAnnotations != null) {, +        for (Annotation methodParameterAnnotation : methodParameterAnnotations) {, +          Class<? extends Annotation> methodAnnotationType =, +              methodParameterAnnotation.annotationType();, +          if (methodAnnotationType == Path.class) {, +            String name = ((Path) methodParameterAnnotation).value();, +            requestParamNames[i] = name;, +            requestParamUsage[i] = ParamUsage.PATH;, +          } else if (methodAnnotationType == EncodedPath.class) {, +            String name = ((EncodedPath) methodParameterAnnotation).value();, +            requestParamNames[i] = name;, +            requestParamUsage[i] = ParamUsage.ENCODED_PATH;, +          } else if (methodAnnotationType == Query.class) {, +            String name = ((Query) methodParameterAnnotation).value();, +            requestParamNames[i] = name;, +            requestParamUsage[i] = ParamUsage.QUERY;, +          } else if (methodAnnotationType == EncodedQuery.class) {, +            String name = ((EncodedQuery) methodParameterAnnotation).value();, +            requestParamNames[i] = name;, +            requestParamUsage[i] = ParamUsage.ENCODED_QUERY;, +          } else if (methodAnnotationType == QueryMap.class) {, +            if (!Map.class.isAssignableFrom(methodParameterType)) {, +            requestParamUsage[i] = ParamUsage.QUERY_MAP;, +          } else if (methodAnnotationType == EncodedQueryMap.class) {, +            if (!Map.class.isAssignableFrom(methodParameterType)) {, +            requestParamUsage[i] = ParamUsage.ENCODED_QUERY_MAP;, +          } else if (methodAnnotationType == Header.class) {, +            String name = ((Header) methodParameterAnnotation).value();, +            requestParamNames[i] = name;, +            requestParamUsage[i] = ParamUsage.HEADER;, +          } else if (methodAnnotationType == Field.class) {, +            String name = ((Field) methodParameterAnnotation).value();, +            requestParamNames[i] = name;, +            requestParamUsage[i] = ParamUsage.FIELD;, +          } else if (methodAnnotationType == FieldMap.class) {, +            if (!Map.class.isAssignableFrom(methodParameterType)) {, +            requestParamUsage[i] = ParamUsage.FIELD_MAP;, +          } else if (methodAnnotationType == Part.class) {, +            String name = ((Part) methodParameterAnnotation).value();, +            requestParamNames[i] = name;, +            requestParamUsage[i] = ParamUsage.PART;, +          } else if (methodAnnotationType == PartMap.class) {, +            if (!Map.class.isAssignableFrom(methodParameterType)) {, +            requestParamUsage[i] = ParamUsage.PART_MAP;, +          } else if (methodAnnotationType == Body.class) {, +            requestParamUsage[i] = ParamUsage.BODY;, +          } else {, +            // This is a non-Retrofit annotation. Skip to the next one., +            continue;, +]