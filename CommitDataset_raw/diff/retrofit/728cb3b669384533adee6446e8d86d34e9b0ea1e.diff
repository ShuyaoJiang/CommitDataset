[+++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +      MediaType type = MediaType.parse(value);, +      if (type == null) {, +        throw new IllegalArgumentException("Malformed content type: " + value);, +      }, +      contentType = type;, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +      MediaType type = MediaType.parse(value);, +      if (type == null) {, +        throw new IllegalArgumentException("Malformed content type: " + value);, +      }, +      contentType = type;, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +          MediaType type = MediaType.parse(headerValue);, +          if (type == null) {, +            throw methodError("Malformed content type: %s", headerValue);, +          }, +          contentType = type;, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +      MediaType type = MediaType.parse(value);, +      if (type == null) {, +        throw new IllegalArgumentException("Malformed content type: " + value);, +      }, +      contentType = type;, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +          MediaType type = MediaType.parse(headerValue);, +          if (type == null) {, +            throw methodError("Malformed content type: %s", headerValue);, +          }, +          contentType = type;, +++ b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java, +  @Test public void malformedContentTypeHeaderThrows() {, +    class Example {, +      @POST("/") //, +      @Headers("Content-Type: hello, world!") //, +      Call<ResponseBody> method(@Body RequestBody body) {, +        return null;, +      }, +    }, +    RequestBody body = RequestBody.create(MediaType.parse("text/plain"), "hi");, +    try {, +      buildRequest(Example.class, body);, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessage("Malformed content type: hello, world!\n", +          + "    for method Example.method");, +    }, +  }, +, +  @Test public void malformedContentTypeParameterThrows() {, +    class Example {, +      @POST("/") //, +      Call<ResponseBody> method(@Header("Content-Type") String contentType, @Body RequestBody body) {, +        return null;, +      }, +    }, +    RequestBody body = RequestBody.create(MediaType.parse("text/plain"), "hi");, +    try {, +      buildRequest(Example.class, "hello, world!", body);, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessage("Malformed content type: hello, world!");, +    }, +  }, +]