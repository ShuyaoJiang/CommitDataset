[+++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, +  @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +      Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, +  @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +      Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/Converter.java, +    public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +        Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, +  @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +      Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/Converter.java, +    public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +        Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +          converterFactories.get(i).stringConverter(type, annotations, this);, +++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, +  @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +      Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/Converter.java, +    public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +        Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +          converterFactories.get(i).stringConverter(type, annotations, this);, +++ b/retrofit/src/test/java/retrofit2/RetrofitTest.java, +      @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +          Retrofit retrofit) {, +      @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +          Retrofit retrofit) {, +      @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +          Retrofit retrofit) {, +    doReturn(expectedAdapter).when(factory).stringConverter(type, annotations, retrofit);, +    verify(factory).stringConverter(type, annotations, retrofit);, +++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, +  @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +      Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/Converter.java, +    public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +        Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +          converterFactories.get(i).stringConverter(type, annotations, this);, +++ b/retrofit/src/test/java/retrofit2/RetrofitTest.java, +      @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +          Retrofit retrofit) {, +      @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +          Retrofit retrofit) {, +      @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +          Retrofit retrofit) {, +    doReturn(expectedAdapter).when(factory).stringConverter(type, annotations, retrofit);, +    verify(factory).stringConverter(type, annotations, retrofit);, +++ b/retrofit/src/test/java/retrofit2/helpers/NonMatchingConverterFactory.java, +  @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +      Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, +  @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +      Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/Converter.java, +    public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +        Retrofit retrofit) {, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +          converterFactories.get(i).stringConverter(type, annotations, this);, +++ b/retrofit/src/test/java/retrofit2/RetrofitTest.java, +      @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +          Retrofit retrofit) {, +      @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +          Retrofit retrofit) {, +      @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +          Retrofit retrofit) {, +    doReturn(expectedAdapter).when(factory).stringConverter(type, annotations, retrofit);, +    verify(factory).stringConverter(type, annotations, retrofit);, +++ b/retrofit/src/test/java/retrofit2/helpers/NonMatchingConverterFactory.java, +  @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,, +      Retrofit retrofit) {, +++ b/samples/src/main/java/com/example/retrofit/JsonQueryParameters.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.example.retrofit;, +, +import java.io.IOException;, +import java.lang.annotation.Annotation;, +import java.lang.annotation.Retention;, +import java.lang.reflect.Type;, +import okhttp3.RequestBody;, +import okhttp3.ResponseBody;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;]