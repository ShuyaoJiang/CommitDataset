[+++ b/http/src/main/java/retrofit/http/RestAdapter.java, +   * Adapts a Java interface to a REST API. HTTP requests happen on the provided {@link Executor} thread, +   * and callbacks happen on the provided {@link MainThread}., +   * converted to the callback's parameter type using the specified {@link Converter}. If the callback, +   * parameter type uses a wildcard, the lower bound will be used as the conversion type., +++ b/http/src/main/java/retrofit/http/RestAdapter.java, +   * Adapts a Java interface to a REST API. HTTP requests happen on the provided {@link Executor} thread, +   * and callbacks happen on the provided {@link MainThread}., +   * converted to the callback's parameter type using the specified {@link Converter}. If the callback, +   * parameter type uses a wildcard, the lower bound will be used as the conversion type., +++ b/io/src/main/java/retrofit/io/ByteSink.java, +// Copyright 2010 Square, Inc., +package retrofit.io;, +, +import java.io.IOException;, +, +/**, + * An interface equivalent to OutputStream., + *, + * @author Bob Lee (bob@squareup.com), + */, +public interface ByteSink {, +, +  /**, +   * Writes the specified number of bytes from buffer., +   */, +  void write(byte[] buffer, int count) throws IOException;, +, +  /**, +   * Closes the sink., +   */, +  void close() throws IOException;, +, +  /**, +   * Constructs a new sink., +   */, +  public interface Factory {, +, +    /**, +     * Constructs a new sink., +     */, +    ByteSink newSink() throws IOException;, +  }, +}, +++ b/http/src/main/java/retrofit/http/RestAdapter.java, +   * Adapts a Java interface to a REST API. HTTP requests happen on the provided {@link Executor} thread, +   * and callbacks happen on the provided {@link MainThread}., +   * converted to the callback's parameter type using the specified {@link Converter}. If the callback, +   * parameter type uses a wildcard, the lower bound will be used as the conversion type., +++ b/io/src/main/java/retrofit/io/ByteSink.java, +// Copyright 2010 Square, Inc., +package retrofit.io;, +, +import java.io.IOException;, +, +/**, + * An interface equivalent to OutputStream., + *, + * @author Bob Lee (bob@squareup.com), + */, +public interface ByteSink {, +, +  /**, +   * Writes the specified number of bytes from buffer., +   */, +  void write(byte[] buffer, int count) throws IOException;, +, +  /**, +   * Closes the sink., +   */, +  void close() throws IOException;, +, +  /**, +   * Constructs a new sink., +   */, +  public interface Factory {, +, +    /**, +     * Constructs a new sink., +     */, +    ByteSink newSink() throws IOException;, +  }, +}, +++ b/io/src/main/java/retrofit/io/ByteSinks.java, +// Copyright 2010 Square, Inc., +package retrofit.io;, +, +import java.io.File;, +import java.io.FileOutputStream;, +import java.io.IOException;, +, +/**, + * Utility methods for dealing with byte sinks., + *, + * @author Bob Lee (bob@squareup.com), + */, +public class ByteSinks {, +, +  /**, +   * Creates a sink that writes to a file.]