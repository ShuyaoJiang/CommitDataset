[+++ b/http/src/main/java/retrofit/http/HttpRequestBuilder.java, +    return requestLine.getHttpMethod().createFrom(this);, +++ b/http/src/main/java/retrofit/http/HttpRequestBuilder.java, +    return requestLine.getHttpMethod().createFrom(this);, +++ b/http/src/main/java/retrofit/http/RestAdapter.java, +import org.apache.http.HttpResponse;, +import org.apache.http.client.HttpClient;, +import org.apache.http.client.ResponseHandler;, +import org.apache.http.client.methods.HttpUriRequest;, +import retrofit.core.Callback;, +import retrofit.core.MainThread;, +, +        binder.bind(type).toProvider(createProvider(type));, +      }, +    };, +  }, +, +  /**, +   * Creates the {@link Provider} instances used by {@link #service(Class)}. Can be used by clients that, +   * want more control over the implementation of their service interfaces, e.g. to wrap them, +   * with caching logic., +   * <p>, +   * Before use the provider must be injected via {@link com.google.inject.Injector#injectMembers}., +   */, +  public static <T> Provider<T> createProvider(final Class<T> type) {, +    return new Provider<T>() {, +      @SuppressWarnings("unchecked"), +        return (T) Proxy.newProxyInstance(type.getClassLoader(), new Class<?>[]{type}, handler);]