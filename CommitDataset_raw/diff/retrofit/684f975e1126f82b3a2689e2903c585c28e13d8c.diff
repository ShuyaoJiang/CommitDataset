[+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +      if (Utils.hasUnresolvableType(returnType)) {, +        throw methodError(method,, +            "Method return type must not include a type variable or wildcard: %s", returnType);, +      }, +      if (returnType == void.class) {, +        throw methodError(method, "Service methods cannot return void.");, +      }, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +      if (Utils.hasUnresolvableType(returnType)) {, +        throw methodError(method,, +            "Method return type must not include a type variable or wildcard: %s", returnType);, +      }, +      if (returnType == void.class) {, +        throw methodError(method, "Service methods cannot return void.");, +      }, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    ExceptionCatchingResponseBody catchingBody = new ExceptionCatchingResponseBody(rawBody);, +  static final class ExceptionCatchingResponseBody extends ResponseBody {, +    ExceptionCatchingResponseBody(ResponseBody delegate) {, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +      if (Utils.hasUnresolvableType(returnType)) {, +        throw methodError(method,, +            "Method return type must not include a type variable or wildcard: %s", returnType);, +      }, +      if (returnType == void.class) {, +        throw methodError(method, "Service methods cannot return void.");, +      }, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    ExceptionCatchingResponseBody catchingBody = new ExceptionCatchingResponseBody(rawBody);, +  static final class ExceptionCatchingResponseBody extends ResponseBody {, +    ExceptionCatchingResponseBody(ResponseBody delegate) {, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java]