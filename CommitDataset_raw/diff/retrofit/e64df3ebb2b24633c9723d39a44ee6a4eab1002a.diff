[+++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +    return new GsonResponseBodyConverter<>(gson, type);, +    return new GsonRequestBodyConverter<>(gson, type);, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +    return new GsonResponseBodyConverter<>(gson, type);, +    return new GsonRequestBodyConverter<>(gson, type);, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonRequestBodyConverter.java, +import com.google.gson.Gson;, +import java.lang.reflect.Type;, +  private final Gson gson;, +  private final Type type;, +  GsonRequestBodyConverter(Gson gson, Type type) {, +    this.gson = gson;, +    this.type = type;, +      gson.toJson(value, type, writer);, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +    return new GsonResponseBodyConverter<>(gson, type);, +    return new GsonRequestBodyConverter<>(gson, type);, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonRequestBodyConverter.java, +import com.google.gson.Gson;, +import java.lang.reflect.Type;, +  private final Gson gson;, +  private final Type type;, +  GsonRequestBodyConverter(Gson gson, Type type) {, +    this.gson = gson;, +    this.type = type;, +      gson.toJson(value, type, writer);, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonResponseBodyConverter.java, +import com.google.gson.Gson;, +import java.lang.reflect.Type;, +  private final Gson gson;, +  private final Type type;, +  GsonResponseBodyConverter(Gson gson, Type type) {, +    this.gson = gson;, +    this.type = type;, +      return gson.fromJson(reader, type);, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +    return new GsonResponseBodyConverter<>(gson, type);, +    return new GsonRequestBodyConverter<>(gson, type);, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonRequestBodyConverter.java, +import com.google.gson.Gson;, +import java.lang.reflect.Type;, +  private final Gson gson;, +  private final Type type;, +  GsonRequestBodyConverter(Gson gson, Type type) {, +    this.gson = gson;, +    this.type = type;, +      gson.toJson(value, type, writer);, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonResponseBodyConverter.java, +import com.google.gson.Gson;, +import java.lang.reflect.Type;, +  private final Gson gson;, +  private final Type type;, +  GsonResponseBodyConverter(Gson gson, Type type) {, +    this.gson = gson;, +    this.type = type;, +      return gson.fromJson(reader, type);, +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java, +  }, +  @Test public void serializeUsesConfiguration() throws IOException, InterruptedException {, +    server.enqueue(new MockResponse());, +, +    service.anImplementation(new AnImplementation(null)).execute();, +, +    RecordedRequest request = server.takeRequest();, +    assertThat(request.getBody().readUtf8()).isEqualTo("{}"); // Null value was not serialized., +    assertThat(request.getHeader("Content-Type")).isEqualTo("application/json; charset=UTF-8");]