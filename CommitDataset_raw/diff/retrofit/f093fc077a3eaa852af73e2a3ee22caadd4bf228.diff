[+++ b/modules/core/src/retrofit/core/Callback.java, +   * @return response object or null if server returned an empty response., +  void clientError(T response);, +++ b/modules/core/src/retrofit/core/Callback.java, +   * @return response object or null if server returned an empty response., +  void clientError(T response);, +++ /dev/null, +++ b/modules/core/src/retrofit/core/Callback.java, +   * @return response object or null if server returned an empty response., +  void clientError(T response);, +++ /dev/null, +++ b/modules/http/src/retrofit/http/CallbackResponseHandler.java, +import java.io.IOException;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +   * {@link Callback#call(T)}. Invoked in background thread., +      try {, +        callback.clientError(parse(entity));, +      } catch (ServerException e) {, +        logger.log(Level.WARNING, e.getMessage(), e);, +        callback.serverError(null);, +      }, +++ b/modules/core/src/retrofit/core/Callback.java, +   * @return response object or null if server returned an empty response., +  void clientError(T response);, +++ /dev/null, +++ b/modules/http/src/retrofit/http/CallbackResponseHandler.java, +import java.io.IOException;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +   * {@link Callback#call(T)}. Invoked in background thread., +      try {, +        callback.clientError(parse(entity));, +      } catch (ServerException e) {, +        logger.log(Level.WARNING, e.getMessage(), e);, +        callback.serverError(null);, +      }, +++ b/modules/http/src/retrofit/http/UiCallback.java, +  public void clientError(final T response) {, +++ b/modules/core/src/retrofit/core/Callback.java, +   * @return response object or null if server returned an empty response., +  void clientError(T response);, +++ /dev/null, +++ b/modules/http/src/retrofit/http/CallbackResponseHandler.java, +import java.io.IOException;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +   * {@link Callback#call(T)}. Invoked in background thread., +      try {, +        callback.clientError(parse(entity));, +      } catch (ServerException e) {, +        logger.log(Level.WARNING, e.getMessage(), e);, +        callback.serverError(null);, +      }, +++ b/modules/http/src/retrofit/http/UiCallback.java, +  public void clientError(final T response) {, +++ b/revision.properties, +# Note - with the next change, increment this to 0.6-SNAPSHOT, +retrofit.revision=0.5]