[+++ b/retrofit/src/main/java/retrofit/RequestFactoryParser.java, +, +            Class<?> rawParameterType = Utils.getRawType(methodParameterType);, +            if (Iterable.class.isAssignableFrom(rawParameterType)) {, +              if (!(methodParameterType instanceof ParameterizedType)) {, +                throw parameterError(i, rawParameterType.getSimpleName(), +                    + " must include generic type (e.g., ", +                    + rawParameterType.getSimpleName(), +                    + "<String>)");, +              ParameterizedType parameterizedType = (ParameterizedType) methodParameterType;, +              Type iterableType = Utils.getParameterUpperBound(0, parameterizedType);, +              Converter<?, RequestBody> valueConverter =, +                  retrofit.requestBodyConverter(iterableType, methodParameterAnnotations);, +              action = new RequestAction.Part<>(headers, valueConverter).iterable();, +            } else if (rawParameterType.isArray()) {, +              Class<?> arrayComponentType = boxIfPrimitive(rawParameterType.getComponentType());, +              Converter<?, RequestBody> valueConverter =, +                  retrofit.requestBodyConverter(arrayComponentType, methodParameterAnnotations);, +              action = new RequestAction.Part<>(headers, valueConverter).array();, +            } else {, +              Converter<?, RequestBody> valueConverter =, +                  retrofit.requestBodyConverter(methodParameterType, methodParameterAnnotations);, +              action = new RequestAction.Part<>(headers, valueConverter);, +            }, +, +++ b/retrofit/src/main/java/retrofit/RequestFactoryParser.java, +, +            Class<?> rawParameterType = Utils.getRawType(methodParameterType);, +            if (Iterable.class.isAssignableFrom(rawParameterType)) {, +              if (!(methodParameterType instanceof ParameterizedType)) {, +                throw parameterError(i, rawParameterType.getSimpleName(), +                    + " must include generic type (e.g., ", +                    + rawParameterType.getSimpleName(), +                    + "<String>)");, +              ParameterizedType parameterizedType = (ParameterizedType) methodParameterType;, +              Type iterableType = Utils.getParameterUpperBound(0, parameterizedType);, +              Converter<?, RequestBody> valueConverter =, +                  retrofit.requestBodyConverter(iterableType, methodParameterAnnotations);, +              action = new RequestAction.Part<>(headers, valueConverter).iterable();, +            } else if (rawParameterType.isArray()) {, +              Class<?> arrayComponentType = boxIfPrimitive(rawParameterType.getComponentType());, +              Converter<?, RequestBody> valueConverter =, +                  retrofit.requestBodyConverter(arrayComponentType, methodParameterAnnotations);, +              action = new RequestAction.Part<>(headers, valueConverter).array();, +            } else {, +              Converter<?, RequestBody> valueConverter =, +                  retrofit.requestBodyConverter(methodParameterType, methodParameterAnnotations);, +              action = new RequestAction.Part<>(headers, valueConverter);, +            }, +, +++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java, +  @Test public void multipartArray() throws IOException {, +    class Example {, +      @Multipart //, +      @POST("/foo/bar/") //, +      Call<ResponseBody> method(@Part("ping") String[] ping) {, +        return null;, +      }, +    }, +, +    Request request =, +        buildRequest(Example.class, new Object[] { new String[] { "pong1", "pong2" } });, +    assertThat(request.method()).isEqualTo("POST");, +    assertThat(request.headers().size()).isZero();, +    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");, +, +    RequestBody body = request.body();, +    Buffer buffer = new Buffer();, +    body.writeTo(buffer);, +    String bodyString = buffer.readUtf8();, +, +    assertThat(bodyString), +        .contains("Content-Disposition: form-data;"), +        .contains("name=\"ping\"\r\n"), +        .contains("\r\npong1\r\n--");, +, +    assertThat(bodyString), +        .contains("Content-Disposition: form-data;"), +        .contains("name=\"ping\""), +        .contains("\r\npong2\r\n--");, +  }, +, +  @Test public void multipartIterable() throws IOException {, +    class Example {, +      @Multipart //, +      @POST("/foo/bar/") //, +      Call<ResponseBody> method(@Part("ping") List<String> ping) {, +        return null;, +      }, +    }, +, +    Request request = buildRequest(Example.class, Arrays.asList("pong1", "pong2"));, +    assertThat(request.method()).isEqualTo("POST");, +    assertThat(request.headers().size()).isZero();, +    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");, +, +    RequestBody body = request.body();, +    Buffer buffer = new Buffer();, +    body.writeTo(buffer);, +    String bodyString = buffer.readUtf8();]