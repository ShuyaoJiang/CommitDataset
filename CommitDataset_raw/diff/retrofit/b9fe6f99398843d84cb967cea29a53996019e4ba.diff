[+++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +  private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");, +    if (objectMapper == null) throw new NullPointerException("objectMapper == null");, +  @Override public Object fromBody(ResponseBody body, Type type) throws IOException {, +    InputStream is = body.byteStream();, +      return objectMapper.readValue(is, javaType);, +        is.close();, +  @Override public RequestBody toBody(Object object, Type type) {, +      return RequestBody.create(MEDIA_TYPE, json);, +      throw new RuntimeException(e);, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +  private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");, +    if (objectMapper == null) throw new NullPointerException("objectMapper == null");, +  @Override public Object fromBody(ResponseBody body, Type type) throws IOException {, +    InputStream is = body.byteStream();, +      return objectMapper.readValue(is, javaType);, +        is.close();, +  @Override public RequestBody toBody(Object object, Type type) {, +      return RequestBody.create(MEDIA_TYPE, json);, +      throw new RuntimeException(e);, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +import java.io.IOException;, +import okio.Buffer;, +import org.assertj.core.api.AbstractCharSequenceAssert;, +  private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");, +    RequestBody body = converter.toBody(OBJECT, MyObject.class);, +    assertThat(body.contentType()).isEqualTo(MEDIA_TYPE);, +    assertBody(body).isEqualTo(JSON);, +    ResponseBody body = ResponseBody.create(MEDIA_TYPE, JSON);, +    MyObject result = (MyObject) converter.fromBody(body, MyObject.class);, +    ResponseBody body = ResponseBody.create(MEDIA_TYPE, "{\"foo\":\"bar\"}");, +      converter.fromBody(body, MyObject.class);, +    ResponseBody body = ResponseBody.create(MEDIA_TYPE, JSON);, +      converter.fromBody(body, String.class);, +  private static AbstractCharSequenceAssert<?, String> assertBody(RequestBody body) throws IOException {, +    Buffer buffer = new Buffer();, +    body.writeTo(buffer);, +    return assertThat(buffer.readUtf8());, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +  private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");, +    if (objectMapper == null) throw new NullPointerException("objectMapper == null");, +  @Override public Object fromBody(ResponseBody body, Type type) throws IOException {, +    InputStream is = body.byteStream();, +      return objectMapper.readValue(is, javaType);, +        is.close();, +  @Override public RequestBody toBody(Object object, Type type) {, +      return RequestBody.create(MEDIA_TYPE, json);, +      throw new RuntimeException(e);, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +import java.io.IOException;, +import okio.Buffer;, +import org.assertj.core.api.AbstractCharSequenceAssert;, +  private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");, +    RequestBody body = converter.toBody(OBJECT, MyObject.class);, +    assertThat(body.contentType()).isEqualTo(MEDIA_TYPE);, +    assertBody(body).isEqualTo(JSON);, +    ResponseBody body = ResponseBody.create(MEDIA_TYPE, JSON);, +    MyObject result = (MyObject) converter.fromBody(body, MyObject.class);, +    ResponseBody body = ResponseBody.create(MEDIA_TYPE, "{\"foo\":\"bar\"}");, +      converter.fromBody(body, MyObject.class);, +    ResponseBody body = ResponseBody.create(MEDIA_TYPE, JSON);, +      converter.fromBody(body, String.class);, +  private static AbstractCharSequenceAssert<?, String> assertBody(RequestBody body) throws IOException {, +    Buffer buffer = new Buffer();, +    body.writeTo(buffer);, +    return assertThat(buffer.readUtf8());, +++ b/retrofit-converters/protobuf/src/main/java/retrofit/converter/ProtoConverter.java, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +  private static final MediaType MEDIA_TYPE = MediaType.parse("application/x-protobuf");, +  @Override public Object fromBody(ResponseBody body, Type type) throws IOException {, +    InputStream is = body.byteStream();, +      return parseFrom.invoke(null, is);, +    } finally {, +      try {, +        is.close();, +      } catch (IOException ignored) {, +      }, +  @Override public RequestBody toBody(Object object, Type type) {, +    return RequestBody.create(MEDIA_TYPE, bytes);, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;]