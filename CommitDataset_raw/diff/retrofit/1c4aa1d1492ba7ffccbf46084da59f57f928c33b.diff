[+++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +    private void invokeAsync(final RestMethodInfo methodInfo, RequestInterceptor interceptorTape,, +        final Object[] args) {, +      final Callback callback = (Callback) args[args.length - 1];, +            callback.failure(e);, +      final int callDelay = calculateDelayForCall();, +      sleep(callDelay);, +, +      restAdapter.callbackExecutor.execute(new Runnable() {, +        @Override public void run() {, +          LogLevel logLevel = restAdapter.logLevel;, +          RestAdapter.Log log = restAdapter.log;, +            methodInfo.method.invoke(mockService, args);, +            if (logLevel.log()) {, +              log.log(String.format("<--- MOCK 200 %s (%sms)", url, callDelay));, +            }, +                log.log(String.valueOf(httpEx.responseBody));, +            RetrofitError error = new MockHttpRetrofitError(httpEx.getMessage(), url, response,, +                httpEx.responseBody);, +            callback.failure(e);, +          }, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +    private void invokeAsync(final RestMethodInfo methodInfo, RequestInterceptor interceptorTape,, +        final Object[] args) {, +      final Callback callback = (Callback) args[args.length - 1];, +            callback.failure(e);, +      final int callDelay = calculateDelayForCall();, +      sleep(callDelay);, +, +      restAdapter.callbackExecutor.execute(new Runnable() {, +        @Override public void run() {, +          LogLevel logLevel = restAdapter.logLevel;, +          RestAdapter.Log log = restAdapter.log;, +            methodInfo.method.invoke(mockService, args);, +            if (logLevel.log()) {, +              log.log(String.format("<--- MOCK 200 %s (%sms)", url, callDelay));, +            }, +                log.log(String.valueOf(httpEx.responseBody));, +            RetrofitError error = new MockHttpRetrofitError(httpEx.getMessage(), url, response,, +                httpEx.responseBody);, +            callback.failure(e);, +          }, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +  interface AsyncCallbackSubtypeExample {, +    abstract class Foo implements Callback<String> {}, +, +    @GET("/") void doStuff(Foo foo);, +  }, +, +, +  @Test public void asyncCanUseCallbackSubtype() {, +    mockRestAdapter.setDelay(1);, +    mockRestAdapter.setVariancePercentage(0);, +    mockRestAdapter.setErrorPercentage(0);, +, +    class MockAsyncCallbackSubtypeExample implements AsyncCallbackSubtypeExample {, +      @Override public void doStuff(Foo foo) {, +        foo.success("Hello!", null);, +      }, +    }, +, +    AsyncCallbackSubtypeExample mockService =, +        mockRestAdapter.create(AsyncCallbackSubtypeExample.class,, +            new MockAsyncCallbackSubtypeExample());, +, +    final AtomicReference<String> actual = new AtomicReference<String>();, +    mockService.doStuff(new AsyncCallbackSubtypeExample.Foo() {, +      @Override public void success(String result, Response response) {, +        actual.set(result);, +      }, +, +      @Override public void failure(RetrofitError error) {, +        throw new AssertionError();, +      }, +    });, +, +    assertThat(actual.get()).isNotNull().isEqualTo("Hello!");, +  }]