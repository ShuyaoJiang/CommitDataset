[+++ b/retrofit/src/main/java/retrofit/MethodInfo.java, +    if (Utils.hasTypeVariable(responseType)) {, +      throw methodError("Method response type must not include a type variable.");, +    }, +++ b/retrofit/src/main/java/retrofit/MethodInfo.java, +    if (Utils.hasTypeVariable(responseType)) {, +      throw methodError("Method response type must not include a type variable.");, +    }, +++ b/retrofit/src/main/java/retrofit/Utils.java, +  public static boolean hasTypeVariable(Type type) {, +    if (type instanceof Class<?>) {, +      return false;, +    }, +    if (type instanceof ParameterizedType) {, +      ParameterizedType parameterizedType = (ParameterizedType) type;, +      for (Type typeArgument : parameterizedType.getActualTypeArguments()) {, +        if (hasTypeVariable(typeArgument)) {, +          return true;, +        }, +      }, +      return false;, +    }, +    if (type instanceof GenericArrayType) {, +      return hasTypeVariable(((GenericArrayType) type).getGenericComponentType());, +    }, +    if (type instanceof TypeVariable) {, +      return true;, +    }, +    if (type instanceof WildcardType) {, +      return true;, +    }, +    String className = type == null ? "null" : type.getClass().getName();, +    throw new IllegalArgumentException("Expected a Class, ParameterizedType, or ", +        + "GenericArrayType, but <" + type + "> is of type " + className);, +  }, +, +++ b/retrofit/src/main/java/retrofit/MethodInfo.java, +    if (Utils.hasTypeVariable(responseType)) {, +      throw methodError("Method response type must not include a type variable.");, +    }, +++ b/retrofit/src/main/java/retrofit/Utils.java, +  public static boolean hasTypeVariable(Type type) {, +    if (type instanceof Class<?>) {, +      return false;, +    }, +    if (type instanceof ParameterizedType) {, +      ParameterizedType parameterizedType = (ParameterizedType) type;, +      for (Type typeArgument : parameterizedType.getActualTypeArguments()) {, +        if (hasTypeVariable(typeArgument)) {, +          return true;, +        }, +      }, +      return false;, +    }, +    if (type instanceof GenericArrayType) {, +      return hasTypeVariable(((GenericArrayType) type).getGenericComponentType());, +    }, +    if (type instanceof TypeVariable) {, +      return true;, +    }, +    if (type instanceof WildcardType) {, +      return true;, +    }, +    String className = type == null ? "null" : type.getClass().getName();, +    throw new IllegalArgumentException("Expected a Class, ParameterizedType, or ", +        + "GenericArrayType, but <" + type + "> is of type " + className);, +  }, +, +++ b/retrofit/src/test/java/retrofit/RestAdapterTest.java, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +  interface StringService {, +    @GET("/") String get();, +  }, +  interface BoundsService {, +    @GET("/") <T> Call<T> none();, +    @GET("/") <T extends ResponseBody> Call<T> upper();, +    @GET("/") <T> Call<List<Map<String, Set<T[]>>>> crazy();, +  }, +      assertThat(e).hasMessage(, +          "CallMethod.disallowed: @Body parameter is class java.lang.String but no converter registered. ", +              + "Either add a converter to the RestAdapter or use RequestBody. (parameter #1)");, +      assertThat(e).hasMessage(, +          "CallMethod.disallowed: Method response type is class java.lang.String but no converter registered. ", +              + "Either add a converter to the RestAdapter or use ResponseBody.");, +, +  @Test public void typeVariableNoBoundThrows() {, +    RestAdapter ra = new RestAdapter.Builder(), +        .endpoint(server.getUrl("/").toString()), +        .converter(new StringConverter()), +        .build();, +    BoundsService example = ra.create(BoundsService.class);, +, +    try {, +      example.none();, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessage(, +          "BoundsService.none: Method response type must not include a type variable.");]