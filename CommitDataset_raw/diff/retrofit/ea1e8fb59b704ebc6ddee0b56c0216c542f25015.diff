[+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private @Nullable Throwable creationFailure; // Either a RuntimeException, Error, or IOException., +      } else if (creationFailure instanceof RuntimeException) {, +      } else {, +        throw (Error) creationFailure;, +    } catch (RuntimeException | Error e) {, +        } else if (creationFailure instanceof RuntimeException) {, +        } else {, +          throw (Error) creationFailure;, +        } catch (IOException | RuntimeException | Error e) {, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private @Nullable Throwable creationFailure; // Either a RuntimeException, Error, or IOException., +      } else if (creationFailure instanceof RuntimeException) {, +      } else {, +        throw (Error) creationFailure;, +    } catch (RuntimeException | Error e) {, +        } else if (creationFailure instanceof RuntimeException) {, +        } else {, +          throw (Error) creationFailure;, +        } catch (IOException | RuntimeException | Error e) {, +++ b/retrofit/src/test/java/retrofit2/CallTest.java, +  @Test public void requestThrowingErrorBeforeExecuteFailsExecute() throws IOException {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(new ToStringConverterFactory()), +        .build();, +    Service service = retrofit.create(Service.class);, +, +    server.enqueue(new MockResponse());, +, +    final AtomicInteger writeCount = new AtomicInteger();, +    Object a = new Object() {, +      @Override public String toString() {, +        writeCount.incrementAndGet();, +        throw new OutOfMemoryError("Broken!");, +      }, +    };, +    Call<String> call = service.postRequestBody(a);, +, +    try {, +      call.request();, +      fail();, +    } catch (OutOfMemoryError e) {, +      assertThat(e).hasMessage("Broken!");, +    }, +    assertThat(writeCount.get()).isEqualTo(1);, +, +    try {, +      call.execute();, +      fail();, +    } catch (OutOfMemoryError e) {, +      assertThat(e).hasMessage("Broken!");, +    }, +    assertThat(writeCount.get()).isEqualTo(1);, +  }, +, +  @Test public void requestAfterExecuteThrowingAlsoThrowsForErrors() throws IOException {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(new ToStringConverterFactory()), +        .build();, +    Service service = retrofit.create(Service.class);, +, +    server.enqueue(new MockResponse());, +, +    final AtomicInteger writeCount = new AtomicInteger();, +    Object a = new Object() {, +      @Override public String toString() {, +        writeCount.incrementAndGet();, +        throw new OutOfMemoryError("Broken!");, +      }, +    };, +    Call<String> call = service.postRequestBody(a);, +, +    try {, +      call.execute();, +      fail();, +    } catch (OutOfMemoryError e) {, +      assertThat(e).hasMessage("Broken!");, +    }, +    assertThat(writeCount.get()).isEqualTo(1);, +, +    try {, +      call.request();, +      fail();, +    } catch (OutOfMemoryError e) {, +      assertThat(e).hasMessage("Broken!");, +    }, +    assertThat(writeCount.get()).isEqualTo(1);, +  }, +, +  @Test public void requestThrowingErrorBeforeEnqueueFailsEnqueue(), +      throws IOException, InterruptedException {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(new ToStringConverterFactory()), +        .build();, +    Service service = retrofit.create(Service.class);, +, +    server.enqueue(new MockResponse());]