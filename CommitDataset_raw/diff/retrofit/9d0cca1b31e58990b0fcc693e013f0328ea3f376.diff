[+++ b/pom.xml, +    <okhttp.version>3.0.0</okhttp.version>, +++ b/pom.xml, +    <okhttp.version>3.0.0</okhttp.version>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/RxJavaCallAdapterFactoryTest.java, +      assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +      assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +++ b/pom.xml, +    <okhttp.version>3.0.0</okhttp.version>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/RxJavaCallAdapterFactoryTest.java, +      assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +      assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +            callback.onFailure(BehaviorCall.this, new IOException("canceled"));, +          callback.onFailure(BehaviorCall.this, new IOException("canceled"));, +            callback.onFailure(BehaviorCall.this, behavior.failureException());, +            @Override public void onResponse(Call<T> call, Response<T> response) {, +                callback.onResponse(call, response);, +            @Override public void onFailure(Call<T> call, Throwable t) {, +                callback.onFailure(call, t);, +      @Override public void onResponse(Call<T> call, Response<T> response) {, +      @Override public void onFailure(Call<T> call, Throwable t) {, +++ b/pom.xml, +    <okhttp.version>3.0.0</okhttp.version>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/RxJavaCallAdapterFactoryTest.java, +      assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +      assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +            callback.onFailure(BehaviorCall.this, new IOException("canceled"));, +          callback.onFailure(BehaviorCall.this, new IOException("canceled"));, +            callback.onFailure(BehaviorCall.this, behavior.failureException());, +            @Override public void onResponse(Call<T> call, Response<T> response) {, +                callback.onResponse(call, response);, +            @Override public void onFailure(Call<T> call, Throwable t) {, +                callback.onFailure(call, t);, +      @Override public void onResponse(Call<T> call, Response<T> response) {, +      @Override public void onFailure(Call<T> call, Throwable t) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +        callback.onResponse(this, response);, +        callback.onFailure(this, failure);, +++ b/pom.xml, +    <okhttp.version>3.0.0</okhttp.version>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/RxJavaCallAdapterFactoryTest.java, +      assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +      assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +            callback.onFailure(BehaviorCall.this, new IOException("canceled"));, +          callback.onFailure(BehaviorCall.this, new IOException("canceled"));, +            callback.onFailure(BehaviorCall.this, behavior.failureException());, +            @Override public void onResponse(Call<T> call, Response<T> response) {, +                callback.onResponse(call, response);, +            @Override public void onFailure(Call<T> call, Throwable t) {, +                callback.onFailure(call, t);, +      @Override public void onResponse(Call<T> call, Response<T> response) {, +      @Override public void onFailure(Call<T> call, Throwable t) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +        callback.onResponse(this, response);, +        callback.onFailure(this, failure);, +++ b/retrofit-mock/src/test/java/retrofit2/mock/BehaviorDelegateTest.java, +      @Override public void onResponse(Call<String> call, Response<String> response) {, +      @Override public void onFailure(Call<String> call, Throwable t) {, +      @Override public void onResponse(Call<String> call, Response<String> response) {, +      @Override public void onFailure(Call<String> call, Throwable t) {, +      @Override public void onResponse(Call<String> call, Response<String> response) {, +      @Override public void onFailure(Call<String> call, Throwable t) {, +      @Override public void onResponse(Call<String> call, Response<String> response) {, +      @Override public void onFailure(Call<String> call, Throwable t) {, +      @Override public void onResponse(Call<String> call, Response<String> response) {, +      @Override public void onFailure(Call<String> call, Throwable t) {, +++ b/pom.xml, +    <okhttp.version>3.0.0</okhttp.version>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/RxJavaCallAdapterFactoryTest.java, +      assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +      assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +            callback.onFailure(BehaviorCall.this, new IOException("canceled"));, +          callback.onFailure(BehaviorCall.this, new IOException("canceled"));, +            callback.onFailure(BehaviorCall.this, behavior.failureException());, +            @Override public void onResponse(Call<T> call, Response<T> response) {, +                callback.onResponse(call, response);, +            @Override public void onFailure(Call<T> call, Throwable t) {, +                callback.onFailure(call, t);, +      @Override public void onResponse(Call<T> call, Response<T> response) {, +      @Override public void onFailure(Call<T> call, Throwable t) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +        callback.onResponse(this, response);, +        callback.onFailure(this, failure);, +++ b/retrofit-mock/src/test/java/retrofit2/mock/BehaviorDelegateTest.java, +      @Override public void onResponse(Call<String> call, Response<String> response) {, +      @Override public void onFailure(Call<String> call, Throwable t) {, +      @Override public void onResponse(Call<String> call, Response<String> response) {, +      @Override public void onFailure(Call<String> call, Throwable t) {, +      @Override public void onResponse(Call<String> call, Response<String> response) {, +      @Override public void onFailure(Call<String> call, Throwable t) {, +      @Override public void onResponse(Call<String> call, Response<String> response) {, +      @Override public void onFailure(Call<String> call, Throwable t) {, +      @Override public void onResponse(Call<String> call, Response<String> response) {, +      @Override public void onFailure(Call<String> call, Throwable t) {, +++ b/retrofit/src/main/java/retrofit2/Callback.java, +  void onResponse(Call<T> call, Response<T> response);]