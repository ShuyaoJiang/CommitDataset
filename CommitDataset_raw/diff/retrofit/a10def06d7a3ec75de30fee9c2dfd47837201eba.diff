[+++ b/retrofit/src/main/java/retrofit/http/Callback.java, +import retrofit.http.client.Response;, +, +  void success(Response response, T t);, +++ b/retrofit/src/main/java/retrofit/http/Callback.java, +import retrofit.http.client.Response;, +, +  void success(Response response, T t);, +++ b/retrofit/src/main/java/retrofit/http/CallbackRunnable.java, +      final ResponseWrapper wrapper = obtainResponse();, +          callback.success(wrapper.getResponse(), (T) wrapper.getResponseObj());, +  public abstract ResponseWrapper obtainResponse();, +++ b/retrofit/src/main/java/retrofit/http/Callback.java, +import retrofit.http.client.Response;, +, +  void success(Response response, T t);, +++ b/retrofit/src/main/java/retrofit/http/CallbackRunnable.java, +      final ResponseWrapper wrapper = obtainResponse();, +          callback.success(wrapper.getResponse(), (T) wrapper.getResponseObj());, +  public abstract ResponseWrapper obtainResponse();, +++ b/retrofit/src/main/java/retrofit/http/ResponseWrapper.java, +package retrofit.http;, +, +import retrofit.http.client.Response;, +, +/**, + * A wrapper that holds the {@link Response} and {@link Converter} response to be used by the, + * {@link CallbackRunnable} for success method calls on {@link Callback}., + *, + * @author JJ Ford (jj.n.ford@gmail.com), + */, +public class ResponseWrapper {, +, +  private Response response;, +  private Object responseObj;, +, +  public ResponseWrapper(Response response, Object responseObj) {, +    this.response = response;, +    this.responseObj = responseObj;, +  }, +, +  public Response getResponse() {, +    return this.response;, +  }, +, +  public Object getResponseObj() {, +    return this.responseObj;, +  }, +}, +++ b/retrofit/src/main/java/retrofit/http/Callback.java, +import retrofit.http.client.Response;, +, +  void success(Response response, T t);, +++ b/retrofit/src/main/java/retrofit/http/CallbackRunnable.java, +      final ResponseWrapper wrapper = obtainResponse();, +          callback.success(wrapper.getResponse(), (T) wrapper.getResponseObj());, +  public abstract ResponseWrapper obtainResponse();, +++ b/retrofit/src/main/java/retrofit/http/ResponseWrapper.java, +package retrofit.http;, +, +import retrofit.http.client.Response;, +, +/**, + * A wrapper that holds the {@link Response} and {@link Converter} response to be used by the, + * {@link CallbackRunnable} for success method calls on {@link Callback}., + *, + * @author JJ Ford (jj.n.ford@gmail.com), + */, +public class ResponseWrapper {, +, +  private Response response;, +  private Object responseObj;, +, +  public ResponseWrapper(Response response, Object responseObj) {, +    this.response = response;, +    this.responseObj = responseObj;, +  }, +, +  public Response getResponse() {, +    return this.response;, +  }, +, +  public Object getResponseObj() {, +    return this.responseObj;, +  }, +}, +++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +        @Override public ResponseWrapper obtainResponse() {, +          return (ResponseWrapper) invokeRequest(methodDetails, args);, +            if (methodDetails.isSynchronous) {, +            return new ResponseWrapper(response, response);, +          }, +            Object convert = converter.fromBody(body, type);, +            if (methodDetails.isSynchronous) {, +              return convert;, +            }, +            return new ResponseWrapper(response, convert);, +++ b/retrofit/src/main/java/retrofit/http/Callback.java, +import retrofit.http.client.Response;, +]