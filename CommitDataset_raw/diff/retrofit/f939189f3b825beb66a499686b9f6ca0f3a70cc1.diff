[+++ b/retrofit/src/main/java/retrofit2/Invocation.java, +  public static Invocation of(Method method, List<?> arguments) {, +    checkNotNull(method, "method == null");, +    checkNotNull(arguments, "arguments == null");, +    return new Invocation(method, new ArrayList<>(arguments)); // Defensive copy., +  }, +, +  /** Trusted constructor assumes ownership of {@code arguments}. */, +  Invocation(Method method, List<?> arguments) {, +    this.arguments = Collections.unmodifiableList(arguments);, +++ b/retrofit/src/main/java/retrofit2/Invocation.java, +  public static Invocation of(Method method, List<?> arguments) {, +    checkNotNull(method, "method == null");, +    checkNotNull(arguments, "arguments == null");, +    return new Invocation(method, new ArrayList<>(arguments)); // Defensive copy., +  }, +, +  /** Trusted constructor assumes ownership of {@code arguments}. */, +  Invocation(Method method, List<?> arguments) {, +    this.arguments = Collections.unmodifiableList(arguments);, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  RequestBuilder(String method, HttpUrl baseUrl,, +    this.requestBuilder = new Request.Builder();, +  Request.Builder get() {, +        .method(method, body);, +++ b/retrofit/src/main/java/retrofit2/Invocation.java, +  public static Invocation of(Method method, List<?> arguments) {, +    checkNotNull(method, "method == null");, +    checkNotNull(arguments, "arguments == null");, +    return new Invocation(method, new ArrayList<>(arguments)); // Defensive copy., +  }, +, +  /** Trusted constructor assumes ownership of {@code arguments}. */, +  Invocation(Method method, List<?> arguments) {, +    this.arguments = Collections.unmodifiableList(arguments);, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  RequestBuilder(String method, HttpUrl baseUrl,, +    this.requestBuilder = new Request.Builder();, +  Request.Builder get() {, +        .method(method, body);, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +import java.util.ArrayList;, +import java.util.List;, +    RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl,, +    List<Object> argumentList = new ArrayList<>(argumentCount);, +      argumentList.add(args[p]);, +    return requestBuilder.get(), +        .tag(Invocation.class, new Invocation(method, argumentList)), +        .build();, +++ b/retrofit/src/main/java/retrofit2/Invocation.java, +  public static Invocation of(Method method, List<?> arguments) {, +    checkNotNull(method, "method == null");, +    checkNotNull(arguments, "arguments == null");, +    return new Invocation(method, new ArrayList<>(arguments)); // Defensive copy., +  }, +, +  /** Trusted constructor assumes ownership of {@code arguments}. */, +  Invocation(Method method, List<?> arguments) {, +    this.arguments = Collections.unmodifiableList(arguments);, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  RequestBuilder(String method, HttpUrl baseUrl,, +    this.requestBuilder = new Request.Builder();, +  Request.Builder get() {, +        .method(method, body);, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +import java.util.ArrayList;, +import java.util.List;, +    RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl,, +    List<Object> argumentList = new ArrayList<>(argumentCount);, +      argumentList.add(args[p]);, +    return requestBuilder.get(), +        .tag(Invocation.class, new Invocation(method, argumentList)), +        .build();, +++ b/retrofit/src/test/java/retrofit2/InvocationTest.java, +      Invocation.of(null, Arrays.asList("one", "two"));, +      Invocation.of(Example.class.getDeclaredMethods()[0], null);, +    Invocation invocation = Invocation.of(Example.class.getDeclaredMethods()[0], mutableList);]