[+++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +      if (urlBuilder == null) {, +        throw new IllegalArgumentException(, +            "Malformed URL. Base: " + baseUrl + ", Relative: " + relativeUrl);, +      }, +      if (url == null) {, +        throw new IllegalArgumentException(, +            "Malformed URL. Base: " + baseUrl + ", Relative: " + relativeUrl);, +      }, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +      if (urlBuilder == null) {, +        throw new IllegalArgumentException(, +            "Malformed URL. Base: " + baseUrl + ", Relative: " + relativeUrl);, +      }, +      if (url == null) {, +        throw new IllegalArgumentException(, +            "Malformed URL. Base: " + baseUrl + ", Relative: " + relativeUrl);, +      }, +++ b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java, +  @Test public void malformedAnnotationRelativeUrlThrows() {, +    class Example {, +      @GET("ftp://example.org"), +      Call<ResponseBody> get() {, +        return null;, +      }, +    }, +    try {, +      buildRequest(Example.class);, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessage(, +          "Malformed URL. Base: http://example.com/, Relative: ftp://example.org");, +    }, +  }, +, +  @Test public void malformedParameterRelativeUrlThrows() {, +    class Example {, +      @GET, +      Call<ResponseBody> get(@Url String relativeUrl) {, +        return null;, +      }, +    }, +    try {, +      buildRequest(Example.class, "ftp://example.org");, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessage(, +          "Malformed URL. Base: http://example.com/, Relative: ftp://example.org");, +    }, +  }, +]