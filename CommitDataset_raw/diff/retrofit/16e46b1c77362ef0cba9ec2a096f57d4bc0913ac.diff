[+++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you need to add the following options:, +```, +# Retain generic type information for use by reflection by converters and adapters., +-keepattributes Signature, +# Retain service method parameters., +-keepclassmembers,allowshrinking,allowobfuscation interface * {, +    @retrofit2.http.* <methods>;, +}, +# Ignore annotation used for build tooling., +-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement, +```, +You might also need rules for OkHttp and Okio which are dependencies., +++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you need to add the following options:, +```, +# Retain generic type information for use by reflection by converters and adapters., +-keepattributes Signature, +# Retain service method parameters., +-keepclassmembers,allowshrinking,allowobfuscation interface * {, +    @retrofit2.http.* <methods>;, +}, +# Ignore annotation used for build tooling., +-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement, +```, +You might also need rules for OkHttp and Okio which are dependencies., +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +            return loadServiceMethod(method).invoke(args);, +        result = ServiceMethod.parseAnnotations(this, method);, +++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you need to add the following options:, +```, +# Retain generic type information for use by reflection by converters and adapters., +-keepattributes Signature, +# Retain service method parameters., +-keepclassmembers,allowshrinking,allowobfuscation interface * {, +    @retrofit2.http.* <methods>;, +}, +# Ignore annotation used for build tooling., +-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement, +```, +You might also need rules for OkHttp and Okio which are dependencies., +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +            return loadServiceMethod(method).invoke(args);, +        result = ServiceMethod.parseAnnotations(this, method);, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +final class ServiceMethod<ResponseT, ReturnT> {, +  static <ResponseT, ReturnT> ServiceMethod<ResponseT, ReturnT> parseAnnotations(Retrofit retrofit,, +      Method method) {, +    return new ServiceMethod.Builder<ResponseT, ReturnT>(retrofit, method).build();, +  }, +, +  private final CallAdapter<ResponseT, ReturnT> callAdapter;, +  private final Converter<ResponseBody, ResponseT> responseConverter;, +  ServiceMethod(Builder<ResponseT, ReturnT> builder) {, +  ReturnT invoke(@Nullable Object[] args) {, +    return callAdapter.adapt(new OkHttpCall<>(this, args));, +  ResponseT toResponse(ResponseBody body) throws IOException {, +  private static final class Builder<ResponseT, ReturnT> {, +    Converter<ResponseBody, ResponseT> responseConverter;, +    CallAdapter<ResponseT, ReturnT> callAdapter;, +    ServiceMethod<ResponseT, ReturnT> build() {, +    private CallAdapter<ResponseT, ReturnT> createCallAdapter() {, +        return (CallAdapter<ResponseT, ReturnT>) retrofit.callAdapter(returnType, annotations);, +    private Converter<ResponseBody, ResponseT> createResponseConverter() {, +++ b/README.md, +ProGuard, +--------, +If you are using ProGuard you need to add the following options:, +```, +# Retain generic type information for use by reflection by converters and adapters., +-keepattributes Signature, +# Retain service method parameters., +-keepclassmembers,allowshrinking,allowobfuscation interface * {, +    @retrofit2.http.* <methods>;, +}, +# Ignore annotation used for build tooling., +-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement, +```, +You might also need rules for OkHttp and Okio which are dependencies., +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +            return loadServiceMethod(method).invoke(args);, +        result = ServiceMethod.parseAnnotations(this, method);, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +final class ServiceMethod<ResponseT, ReturnT> {, +  static <ResponseT, ReturnT> ServiceMethod<ResponseT, ReturnT> parseAnnotations(Retrofit retrofit,, +      Method method) {, +    return new ServiceMethod.Builder<ResponseT, ReturnT>(retrofit, method).build();, +  }, +, +  private final CallAdapter<ResponseT, ReturnT> callAdapter;, +  private final Converter<ResponseBody, ResponseT> responseConverter;, +  ServiceMethod(Builder<ResponseT, ReturnT> builder) {, +  ReturnT invoke(@Nullable Object[] args) {]