[+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +    boolean disableUrlEncoding = false;, +    addPathParam(name, value, disableUrlEncoding);, +  }, +, +  @Override public void addEncodedPathParam(String name, String value) {, +    boolean disableUrlEncoding = true;, +    addPathParam(name, value, disableUrlEncoding);, +  }, +, +  void addPathParam(String name, String value, boolean disableUrlEncoding) {, +      if (!disableUrlEncoding) {, +        // URLEncoder encodes for use as a query parameter. Path encoding uses %20 to, +        // encode spaces rather than +.  Query encoding difference specified in HTML spec., +        // Any remaining plus signs represent spaces as already URLEncoded., +        encodedValue = encodedValue.replace("+", "%20");, +      } else {, +        relativeUrl = relativeUrl.replace("{" + name + "}", String.valueOf(value));, +      }, +    boolean disableUrlEncoding = false;, +    addQueryParam(name, value, disableUrlEncoding);, +  }, +, +  @Override public void addEncodedQueryParam(String name, String value) {, +    boolean disableUrlEncoding = true;, +    addQueryParam(name, value, disableUrlEncoding);, +  }, +, +  void addQueryParam(String name, String value, boolean disableUrlEncoding) {, +      if (!disableUrlEncoding) {, +      }, +        case ENCODED_PATH:, +          if (value == null) {, +            throw new IllegalArgumentException(, +                "Path parameter \"" + name + "\" value must not be null.");, +          }, +          addEncodedPathParam(name, value.toString());, +          break;, +        case ENCODED_QUERY:, +          if (value != null) { // Skip null values., +            addEncodedQueryParam(name, value.toString());, +          }, +          break;, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +    boolean disableUrlEncoding = false;, +    addPathParam(name, value, disableUrlEncoding);, +  }, +, +  @Override public void addEncodedPathParam(String name, String value) {, +    boolean disableUrlEncoding = true;, +    addPathParam(name, value, disableUrlEncoding);, +  }, +, +  void addPathParam(String name, String value, boolean disableUrlEncoding) {, +      if (!disableUrlEncoding) {, +        // URLEncoder encodes for use as a query parameter. Path encoding uses %20 to, +        // encode spaces rather than +.  Query encoding difference specified in HTML spec., +        // Any remaining plus signs represent spaces as already URLEncoded., +        encodedValue = encodedValue.replace("+", "%20");, +      } else {, +        relativeUrl = relativeUrl.replace("{" + name + "}", String.valueOf(value));, +      }, +    boolean disableUrlEncoding = false;, +    addQueryParam(name, value, disableUrlEncoding);, +  }, +, +  @Override public void addEncodedQueryParam(String name, String value) {, +    boolean disableUrlEncoding = true;, +    addQueryParam(name, value, disableUrlEncoding);, +  }, +, +  void addQueryParam(String name, String value, boolean disableUrlEncoding) {, +      if (!disableUrlEncoding) {, +      }, +        case ENCODED_PATH:, +          if (value == null) {, +            throw new IllegalArgumentException(, +                "Path parameter \"" + name + "\" value must not be null.");, +          }, +          addEncodedPathParam(name, value.toString());, +          break;, +        case ENCODED_QUERY:, +          if (value != null) { // Skip null values., +            addEncodedQueryParam(name, value.toString());, +          }, +          break;, +++ b/retrofit/src/main/java/retrofit/RequestInterceptor.java, +    /**, +     * Add a path parameter replacement without first URI encoding. This works exactly like a, +     * {@link retrofit.http.EncodedPath &#64;EncodedPath}-annotated method argument., +     */, +    void addEncodedPathParam(String name, String value);, +, +, +    /**, +     * Add an additional query parameter without first URI encoding. This will not replace any, +     * existing query parameters., +     */, +    void addEncodedQueryParam(String name, String value);, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java]