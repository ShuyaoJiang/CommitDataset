[+++ b/http/src/main/java/retrofit/http/Fetcher.java, +import javax.inject.Inject;, +import javax.inject.Provider;, +++ b/http/src/main/java/retrofit/http/Fetcher.java, +import javax.inject.Inject;, +import javax.inject.Provider;, +++ b/http/src/main/java/retrofit/http/HttpProfiler.java, +  HttpProfiler<Void> NONE = new HttpProfiler<Void>() {, +    @Override public Void beforeCall() {, +      return null;, +    }, +    @Override public void afterCall(RequestInformation requestInfo,, +        long elapsedTime, int statusCode, Void beforeCallData) {, +    }, +  };, +, +++ b/http/src/main/java/retrofit/http/Fetcher.java, +import javax.inject.Inject;, +import javax.inject.Provider;, +++ b/http/src/main/java/retrofit/http/HttpProfiler.java, +  HttpProfiler<Void> NONE = new HttpProfiler<Void>() {, +    @Override public Void beforeCall() {, +      return null;, +    }, +    @Override public void afterCall(RequestInformation requestInfo,, +        long elapsedTime, int statusCode, Void beforeCallData) {, +    }, +  };, +, +++ b/http/src/main/java/retrofit/http/RestAdapter.java, +import javax.inject.Inject;, +import javax.inject.Provider;, +import javax.inject.Singleton;, +import org.apache.http.HttpEntity;, +import org.apache.http.HttpResponse;, +import org.apache.http.client.HttpClient;, +import org.apache.http.client.ResponseHandler;, +import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;, +import org.apache.http.client.methods.HttpUriRequest;, +import retrofit.core.Callback;, +import retrofit.core.MainThread;, +  @Inject private HttpProfiler profiler = HttpProfiler.NONE;, +   * Returns a new instance of {@code type} that uses {@code restAdapter} to, +   * convert Java method calls to Rest calls., +   */, +  @SuppressWarnings("unchecked"), +  public static <T> T create(RestAdapter restAdapter, Class<T> type) {, +    RestAdapter.RestHandler handler = restAdapter.new RestHandler();, +    return (T) Proxy.newProxyInstance(type.getClassLoader(), new Class<?>[]{type}, handler);, +  }, +, +  /**, +  public static <T> com.google.inject.Provider<T> createProvider(final Class<T> type) {, +    return new com.google.inject.Provider<T>() {, +        return create(restAdapter, type);, +        final ResponseHandler<Void> rh = (profiler == HttpProfiler.NONE), +            ? gsonResponseHandler, +        contentType = entity.getContentType().getValue();, +++ b/http/src/main/java/retrofit/http/Fetcher.java, +import javax.inject.Inject;, +import javax.inject.Provider;, +++ b/http/src/main/java/retrofit/http/HttpProfiler.java, +  HttpProfiler<Void> NONE = new HttpProfiler<Void>() {, +    @Override public Void beforeCall() {, +      return null;, +    }, +    @Override public void afterCall(RequestInformation requestInfo,, +        long elapsedTime, int statusCode, Void beforeCallData) {, +    }, +  };, +, +++ b/http/src/main/java/retrofit/http/RestAdapter.java, +import javax.inject.Inject;, +import javax.inject.Provider;, +import javax.inject.Singleton;, +import org.apache.http.HttpEntity;, +import org.apache.http.HttpResponse;, +import org.apache.http.client.HttpClient;, +import org.apache.http.client.ResponseHandler;, +import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;, +import org.apache.http.client.methods.HttpUriRequest;, +import retrofit.core.Callback;, +import retrofit.core.MainThread;, +  @Inject private HttpProfiler profiler = HttpProfiler.NONE;, +   * Returns a new instance of {@code type} that uses {@code restAdapter} to, +   * convert Java method calls to Rest calls., +   */, +  @SuppressWarnings("unchecked"), +  public static <T> T create(RestAdapter restAdapter, Class<T> type) {, +    RestAdapter.RestHandler handler = restAdapter.new RestHandler();, +    return (T) Proxy.newProxyInstance(type.getClassLoader(), new Class<?>[]{type}, handler);, +  }, +, +  /**, +  public static <T> com.google.inject.Provider<T> createProvider(final Class<T> type) {, +    return new com.google.inject.Provider<T>() {, +        return create(restAdapter, type);, +        final ResponseHandler<Void> rh = (profiler == HttpProfiler.NONE), +            ? gsonResponseHandler, +        contentType = entity.getContentType().getValue();]