[+++ b/retrofit-mock/src/main/java/retrofit/MockHttpException.java, +import com.squareup.okhttp.Headers;, +  final Headers.Builder headers = new Headers.Builder();, +    headers.add(name, value);, +    return new Response("", code, reason, headers.build(),, +        new MockTypedInput(converter, responseBody));, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpException.java, +import com.squareup.okhttp.Headers;, +  final Headers.Builder headers = new Headers.Builder();, +    headers.add(name, value);, +    return new Response("", code, reason, headers.build(),, +        new MockTypedInput(converter, responseBody));, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import com.squareup.okhttp.Headers;, +  private static final Headers NO_HEADERS = Headers.of();, +, +  private Headers.Builder headers;, +      headers = methodInfo.headers.newBuilder();, +    Headers.Builder headers = this.headers;, +      this.headers = headers = new Headers.Builder();, +    headers.add(name, value);, +    Headers.Builder headerBuilder = this.headers;, +        if (headerBuilder == null) {, +          headerBuilder = new Headers.Builder();, +        }, +        headerBuilder.add("Content-Type", contentTypeHeader);, +, +    Headers headers = headerBuilder != null ? headerBuilder.build() : NO_HEADERS;, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpException.java, +import com.squareup.okhttp.Headers;, +  final Headers.Builder headers = new Headers.Builder();, +    headers.add(name, value);, +    return new Response("", code, reason, headers.build(),, +        new MockTypedInput(converter, responseBody));, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import com.squareup.okhttp.Headers;, +  private static final Headers NO_HEADERS = Headers.of();, +, +  private Headers.Builder headers;, +      headers = methodInfo.headers.newBuilder();, +    Headers.Builder headers = this.headers;, +      this.headers = headers = new Headers.Builder();, +    headers.add(name, value);, +    Headers.Builder headerBuilder = this.headers;, +        if (headerBuilder == null) {, +          headerBuilder = new Headers.Builder();, +        }, +        headerBuilder.add("Content-Type", contentTypeHeader);, +, +    Headers headers = headerBuilder != null ? headerBuilder.build() : NO_HEADERS;, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +import retrofit.http.Header;, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpException.java, +import com.squareup.okhttp.Headers;, +  final Headers.Builder headers = new Headers.Builder();, +    headers.add(name, value);, +    return new Response("", code, reason, headers.build(),, +        new MockTypedInput(converter, responseBody));, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import com.squareup.okhttp.Headers;, +  private static final Headers NO_HEADERS = Headers.of();, +, +  private Headers.Builder headers;, +      headers = methodInfo.headers.newBuilder();, +    Headers.Builder headers = this.headers;, +      this.headers = headers = new Headers.Builder();, +    headers.add(name, value);, +    Headers.Builder headerBuilder = this.headers;, +        if (headerBuilder == null) {, +          headerBuilder = new Headers.Builder();, +        }, +        headerBuilder.add("Content-Type", contentTypeHeader);, +, +    Headers headers = headerBuilder != null ? headerBuilder.build() : NO_HEADERS;, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +import retrofit.http.Header;, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +  com.squareup.okhttp.Headers headers;, +  com.squareup.okhttp.Headers parseHeaders(String[] headers) {, +    com.squareup.okhttp.Headers.Builder builder = new com.squareup.okhttp.Headers.Builder();, +        builder.add(headerName, headerValue);, +    return builder.build();, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpException.java, +import com.squareup.okhttp.Headers;, +  final Headers.Builder headers = new Headers.Builder();, +    headers.add(name, value);, +    return new Response("", code, reason, headers.build(),, +        new MockTypedInput(converter, responseBody));, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import com.squareup.okhttp.Headers;, +  private static final Headers NO_HEADERS = Headers.of();, +, +  private Headers.Builder headers;, +      headers = methodInfo.headers.newBuilder();, +    Headers.Builder headers = this.headers;, +      this.headers = headers = new Headers.Builder();, +    headers.add(name, value);, +    Headers.Builder headerBuilder = this.headers;, +        if (headerBuilder == null) {, +          headerBuilder = new Headers.Builder();]