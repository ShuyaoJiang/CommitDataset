[+++ b/pom.xml, +    <wire.version>2.0.0</wire.version>, +++ b/pom.xml, +    <wire.version>2.0.0</wire.version>, +++ b/retrofit-converters/wire/README.md, +++ b/pom.xml, +    <wire.version>2.0.0</wire.version>, +++ b/retrofit-converters/wire/README.md, +++ b/retrofit-converters/wire/src/main/java/retrofit/WireConverterFactory.java, +import com.squareup.wire.ProtoAdapter;, + * This converter only applies for types which extend from {@link Message}., +    return new WireConverterFactory();, +  private WireConverterFactory() {, +    ProtoAdapter<? extends Message> adapter = ProtoAdapter.get((Class<? extends Message>) c);, +    return new WireResponseBodyConverter<>(adapter);, +    Class<?> c = (Class<?>) type;, +    if (!Message.class.isAssignableFrom(c)) {, +    //noinspection unchecked, +    ProtoAdapter<? extends Message> adapter = ProtoAdapter.get((Class<? extends Message>) c);, +    return new WireRequestBodyConverter<>(adapter);, +++ b/pom.xml, +    <wire.version>2.0.0</wire.version>, +++ b/retrofit-converters/wire/README.md, +++ b/retrofit-converters/wire/src/main/java/retrofit/WireConverterFactory.java, +import com.squareup.wire.ProtoAdapter;, + * This converter only applies for types which extend from {@link Message}., +    return new WireConverterFactory();, +  private WireConverterFactory() {, +    ProtoAdapter<? extends Message> adapter = ProtoAdapter.get((Class<? extends Message>) c);, +    return new WireResponseBodyConverter<>(adapter);, +    Class<?> c = (Class<?>) type;, +    if (!Message.class.isAssignableFrom(c)) {, +    //noinspection unchecked, +    ProtoAdapter<? extends Message> adapter = ProtoAdapter.get((Class<? extends Message>) c);, +    return new WireRequestBodyConverter<>(adapter);, +++ b/retrofit-converters/wire/src/main/java/retrofit/WireRequestBodyConverter.java, +import com.squareup.wire.ProtoAdapter;, +import okio.Buffer;, +final class WireRequestBodyConverter<T extends Message<T, ?>> implements Converter<T, RequestBody> {, +  private final ProtoAdapter<T> adapter;, +, +  WireRequestBodyConverter(ProtoAdapter<T> adapter) {, +    this.adapter = adapter;, +  }, +, +    Buffer buffer = new Buffer();, +    adapter.encode(buffer, value);, +    return RequestBody.create(MEDIA_TYPE, buffer.snapshot());, +++ b/pom.xml, +    <wire.version>2.0.0</wire.version>, +++ b/retrofit-converters/wire/README.md, +++ b/retrofit-converters/wire/src/main/java/retrofit/WireConverterFactory.java, +import com.squareup.wire.ProtoAdapter;, + * This converter only applies for types which extend from {@link Message}., +    return new WireConverterFactory();, +  private WireConverterFactory() {, +    ProtoAdapter<? extends Message> adapter = ProtoAdapter.get((Class<? extends Message>) c);, +    return new WireResponseBodyConverter<>(adapter);, +    Class<?> c = (Class<?>) type;, +    if (!Message.class.isAssignableFrom(c)) {, +    //noinspection unchecked, +    ProtoAdapter<? extends Message> adapter = ProtoAdapter.get((Class<? extends Message>) c);, +    return new WireRequestBodyConverter<>(adapter);, +++ b/retrofit-converters/wire/src/main/java/retrofit/WireRequestBodyConverter.java, +import com.squareup.wire.ProtoAdapter;, +import okio.Buffer;, +final class WireRequestBodyConverter<T extends Message<T, ?>> implements Converter<T, RequestBody> {, +  private final ProtoAdapter<T> adapter;, +, +  WireRequestBodyConverter(ProtoAdapter<T> adapter) {, +    this.adapter = adapter;, +  }, +, +    Buffer buffer = new Buffer();, +    adapter.encode(buffer, value);, +    return RequestBody.create(MEDIA_TYPE, buffer.snapshot());, +++ b/retrofit-converters/wire/src/main/java/retrofit/WireResponseBodyConverter.java, +import com.squareup.wire.ProtoAdapter;, +final class WireResponseBodyConverter<T extends Message<T, ?>>, +    implements Converter<ResponseBody, T> {, +  private final ProtoAdapter<T> adapter;, +  WireResponseBodyConverter(ProtoAdapter<T> adapter) {, +    this.adapter = adapter;, +      BufferedSource source = value.source();, +      return adapter.decode(source);, +      Utils.closeQuietly(value);, +++ b/pom.xml, +    <wire.version>2.0.0</wire.version>, +++ b/retrofit-converters/wire/README.md, +++ b/retrofit-converters/wire/src/main/java/retrofit/WireConverterFactory.java, +import com.squareup.wire.ProtoAdapter;, + * This converter only applies for types which extend from {@link Message}., +    return new WireConverterFactory();, +  private WireConverterFactory() {, +    ProtoAdapter<? extends Message> adapter = ProtoAdapter.get((Class<? extends Message>) c);, +    return new WireResponseBodyConverter<>(adapter);, +    Class<?> c = (Class<?>) type;, +    if (!Message.class.isAssignableFrom(c)) {, +    //noinspection unchecked, +    ProtoAdapter<? extends Message> adapter = ProtoAdapter.get((Class<? extends Message>) c);]