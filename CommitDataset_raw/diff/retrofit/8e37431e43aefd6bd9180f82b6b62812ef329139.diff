[+++ b/retrofit/src/main/java/retrofit/http/Converter.java, +   * @throws ConversionException if conversion was unable to complete. This will trigger a call to, +   * {@link Callback#failure(RetrofitError)} or throw a {@link retrofit.http.RetrofitError}. The, +   * exception message should report all necessary information about its cause as the response body, +   * will be set to {@code null}., +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +   * @throws ConversionException if conversion was unable to complete. This will trigger a call to, +   * {@link Callback#failure(RetrofitError)} or throw a {@link retrofit.http.RetrofitError}. The, +   * exception message should report all necessary information about its cause as the response body, +   * will be set to {@code null}., +++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +, +          // Caller requested the raw Response object directly., +            // Read the entire stream and replace with one backed by a byte[], +            response = Utils.readBodyToBytesIfNecessary(response);, +, +, +            // The response body was partially read by the converter. Replace it with null., +            response = Utils.replaceResponseBody(response, null);, +, +, +        response = Utils.readBodyToBytesIfNecessary(response);, +      for (int i = 0, len = bodyString.length(); i < len; i += LOG_CHUNK_SIZE) {, +        int end = Math.min(len, i + LOG_CHUNK_SIZE);, +      if (!(body instanceof TypedByteArray)) {, +        // Read the entire response body to we can log it and replace the original response, +        response = Utils.readBodyToBytesIfNecessary(response);, +        body = response.getBody();, +      }, +, +      byte[] bodyBytes = ((TypedByteArray) body).getBytes();, +      for (int i = 0, len = bodyString.length(); i < len; i += LOG_CHUNK_SIZE) {, +        int end = Math.min(len, i + LOG_CHUNK_SIZE);, +    log.log(String.format("<--- END HTTP (%s-byte body)", bodySize));, +    return response;, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +   * @throws ConversionException if conversion was unable to complete. This will trigger a call to, +   * {@link Callback#failure(RetrofitError)} or throw a {@link retrofit.http.RetrofitError}. The, +   * exception message should report all necessary information about its cause as the response body, +   * will be set to {@code null}., +++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +, +          // Caller requested the raw Response object directly., +            // Read the entire stream and replace with one backed by a byte[], +            response = Utils.readBodyToBytesIfNecessary(response);, +, +, +            // The response body was partially read by the converter. Replace it with null., +            response = Utils.replaceResponseBody(response, null);, +, +, +        response = Utils.readBodyToBytesIfNecessary(response);, +      for (int i = 0, len = bodyString.length(); i < len; i += LOG_CHUNK_SIZE) {, +        int end = Math.min(len, i + LOG_CHUNK_SIZE);, +      if (!(body instanceof TypedByteArray)) {, +        // Read the entire response body to we can log it and replace the original response, +        response = Utils.readBodyToBytesIfNecessary(response);, +        body = response.getBody();, +      }, +, +      byte[] bodyBytes = ((TypedByteArray) body).getBytes();, +      for (int i = 0, len = bodyString.length(); i < len; i += LOG_CHUNK_SIZE) {, +        int end = Math.min(len, i + LOG_CHUNK_SIZE);, +    log.log(String.format("<--- END HTTP (%s-byte body)", bodySize));, +    return response;, +++ b/retrofit/src/main/java/retrofit/http/Utils.java, +import retrofit.http.client.Response;, +import retrofit.http.mime.TypedByteArray;, +import retrofit.http.mime.TypedInput;, +  /**, +   * Conditionally replace a {@link Response} with an identical copy whose body is backed by a, +   * byte[] rather than an input stream., +   */, +  static Response readBodyToBytesIfNecessary(Response response) throws IOException {, +    TypedInput body = response.getBody();, +    if (body == null || body instanceof TypedByteArray) {, +      return response;, +    }, +, +    String bodyMime = body.mimeType();, +    byte[] bodyBytes = Utils.streamToBytes(body.in());, +    body = new TypedByteArray(bodyMime, bodyBytes);, +, +    return replaceResponseBody(response, body);, +  }, +, +  static Response replaceResponseBody(Response response, TypedInput body) {, +    return new Response(response.getStatus(), response.getReason(), response.getHeaders(), body);, +  }, +, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +   * @throws ConversionException if conversion was unable to complete. This will trigger a call to, +   * {@link Callback#failure(RetrofitError)} or throw a {@link retrofit.http.RetrofitError}. The, +   * exception message should report all necessary information about its cause as the response body, +   * will be set to {@code null}., +++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +, +          // Caller requested the raw Response object directly., +            // Read the entire stream and replace with one backed by a byte[], +            response = Utils.readBodyToBytesIfNecessary(response);]