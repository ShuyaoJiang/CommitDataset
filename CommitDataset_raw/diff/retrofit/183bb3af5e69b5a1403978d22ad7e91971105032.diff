[+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import retrofit.mime.TypedString;, +            } else if (value instanceof String) {, +              multipartBody.addPart(name, new TypedString((String) value));, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import retrofit.mime.TypedString;, +            } else if (value instanceof String) {, +              multipartBody.addPart(name, new TypedString((String) value));, +++ b/retrofit/src/main/java/retrofit/http/Part.java, + * The parameter type on which this annotation exists will be processed in one of three ways:, + * <li>If the type is {@link String} the value will also be used directly with a {@code text/plain}, + * content type.</li>, + * void example(&#64;Part("description") String description,, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import retrofit.mime.TypedString;, +            } else if (value instanceof String) {, +              multipartBody.addPart(name, new TypedString((String) value));, +++ b/retrofit/src/main/java/retrofit/http/Part.java, + * The parameter type on which this annotation exists will be processed in one of three ways:, + * <li>If the type is {@link String} the value will also be used directly with a {@code text/plain}, + * content type.</li>, + * void example(&#64;Part("description") String description,, +++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java, +    assertThat(one).contains("name=\"ping\"\r\n").endsWith("\r\npong");, +    assertThat(two).contains("name=\"kit\"").endsWith("\r\nkat");, +    assertThat(one).contains("name=\"ping\"").endsWith("\r\npong");]