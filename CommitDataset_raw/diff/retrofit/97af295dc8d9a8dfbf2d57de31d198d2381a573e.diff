[+++ b/retrofit/src/main/java/retrofit/Endpoint.java, +import com.squareup.okhttp.HttpUrl;, +, +  public static Endpoint createFixed(String url) {, +    final HttpUrl httpUrl = HttpUrl.parse(url);, +    if (httpUrl == null) {, +      throw new IllegalArgumentException("Invalid URL: " + url);, +    }, +      @Override public HttpUrl url() {, +        return httpUrl;, +  public abstract HttpUrl url();, +++ b/retrofit/src/main/java/retrofit/Endpoint.java, +import com.squareup.okhttp.HttpUrl;, +, +  public static Endpoint createFixed(String url) {, +    final HttpUrl httpUrl = HttpUrl.parse(url);, +    if (httpUrl == null) {, +      throw new IllegalArgumentException("Invalid URL: " + url);, +    }, +      @Override public HttpUrl url() {, +        return httpUrl;, +  public abstract HttpUrl url();, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +import com.squareup.okhttp.HttpUrl;, +    HttpUrl url = endpoint.url();, +    RequestBuilder requestBuilder = new RequestBuilder(url, methodInfo, converter);, +++ b/retrofit/src/main/java/retrofit/Endpoint.java, +import com.squareup.okhttp.HttpUrl;, +, +  public static Endpoint createFixed(String url) {, +    final HttpUrl httpUrl = HttpUrl.parse(url);, +    if (httpUrl == null) {, +      throw new IllegalArgumentException("Invalid URL: " + url);, +    }, +      @Override public HttpUrl url() {, +        return httpUrl;, +  public abstract HttpUrl url();, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +import com.squareup.okhttp.HttpUrl;, +    HttpUrl url = endpoint.url();, +    RequestBuilder requestBuilder = new RequestBuilder(url, methodInfo, converter);, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import com.squareup.okhttp.HttpUrl;, +  private final HttpUrl.Builder urlBuilder;, +  RequestBuilder(HttpUrl url, MethodInfo methodInfo, Converter converter) {, +    urlBuilder = url.newBuilder();, +, +      urlBuilder.query(requestQuery);, +    if (encoded) {, +      urlBuilder.addEncodedQueryParameter(name, value);, +    } else {, +      urlBuilder.addQueryParameter(name, value);, +    urlBuilder.encodedPath(relativeUrl);, +        .url(urlBuilder.build()), +++ b/retrofit/src/main/java/retrofit/Endpoint.java, +import com.squareup.okhttp.HttpUrl;, +, +  public static Endpoint createFixed(String url) {, +    final HttpUrl httpUrl = HttpUrl.parse(url);, +    if (httpUrl == null) {, +      throw new IllegalArgumentException("Invalid URL: " + url);, +    }, +      @Override public HttpUrl url() {, +        return httpUrl;, +  public abstract HttpUrl url();, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +import com.squareup.okhttp.HttpUrl;, +    HttpUrl url = endpoint.url();, +    RequestBuilder requestBuilder = new RequestBuilder(url, methodInfo, converter);, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import com.squareup.okhttp.HttpUrl;, +  private final HttpUrl.Builder urlBuilder;, +  RequestBuilder(HttpUrl url, MethodInfo methodInfo, Converter converter) {, +    urlBuilder = url.newBuilder();, +, +      urlBuilder.query(requestQuery);, +    if (encoded) {, +      urlBuilder.addEncodedQueryParameter(name, value);, +    } else {, +      urlBuilder.addQueryParameter(name, value);, +    urlBuilder.encodedPath(relativeUrl);, +        .url(urlBuilder.build()), +++ b/retrofit/src/test/java/retrofit/EndpointsTest.java, +import com.squareup.okhttp.HttpUrl;, +import static org.junit.Assert.fail;, +    assertThat(endpoint.url()).isEqualTo(HttpUrl.parse("http://example.com"));, +  }, +, +  @Test public void invalidEndpointEagerlyThrows() {, +    try {, +      Endpoint.createFixed("ftp://foo");, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessage("Invalid URL: ftp://foo");, +    }, +++ b/retrofit/src/main/java/retrofit/Endpoint.java, +import com.squareup.okhttp.HttpUrl;, +, +  public static Endpoint createFixed(String url) {, +    final HttpUrl httpUrl = HttpUrl.parse(url);]