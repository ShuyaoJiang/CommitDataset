[+++ b/retrofit/src/main/java/retrofit/Retrofit.java, +import retrofit.http.GET;, +    /**, +     * Set a fixed API base URL., +     *, +     * @see #baseUrl(HttpUrl), +     */, +    /**, +     * Set a fixed API base URL., +     * <p>, +     * The specified endpoint values (such as with {@link GET @GET}) are resolved against this, +     * value using {@link HttpUrl#resolve(String)}. The behavior of this matches that of an, +     * {@code <a href="">} link on a website resolving on the current URL., +     * <p>, +     * <b>Base URLs should always end in {@code /}.</b>, +     * <p>, +     * A trailing {@code /} ensures that endpoints values which are relative paths will correctly, +     * append themselves to a base which has path components., +     * <p>, +     * <b>Correct:</b><br>, +     * Base URL: http://example.com/api/<br>, +     * Endpoint: foo/bar/<br>, +     * Result: http://example.com/api/foo/bar/, +     * <p>, +     * <b>Incorrect:</b><br>, +     * Base URL: http://example.com/api<br>, +     * Endpoint: foo/bar/<br>, +     * Result: http://example.com/foo/bar/, +     * <p>, +     * This method enforces that {@code baseUrl} has a trailing {@code /}., +     * <p>, +     * <b>Endpoint values which contain a leading {@code /} are absolute.</b>, +     * <p>, +     * Absolute values retain only the host from {@code baseUrl} and ignore any specified path, +     * components., +     * <p>, +     * Base URL: http://example.com/api/<br>, +     * Endpoint: /foo/bar/<br>, +     * Result: http://example.com/foo/bar/, +     * <p>, +     * Base URL: http://example.com/<br>, +     * Endpoint: /foo/bar/<br>, +     * Result: http://example.com/foo/bar/, +     * <p>, +     * <b>Endpoint values may be a full URL.</b>, +     * <p>, +     * Values which have a host replace the host of {@code baseUrl} and values also with a scheme, +     * replace the scheme of {@code baseUrl}., +     * <p>, +     * Base URL: http://example.com/<br>, +     * Endpoint: https://github.com/square/retrofit/<br>, +     * Result: https://github.com/square/retrofit/, +     * <p>, +     * Base URL: http://example.com<br>, +     * Endpoint: //github.com/square/retrofit/<br>, +     * Result: http://github.com/square/retrofit/ (note the scheme stays 'http'), +     */, +      List<String> pathSegments = baseUrl.pathSegments();, +      if (!"".equals(pathSegments.get(pathSegments.size() - 1))) {, +        throw new IllegalArgumentException("baseUrl must end in /: " + baseUrl);, +      }, +    /**, +     * Set an API base URL which can change over time., +     *, +     * @see #baseUrl(HttpUrl), +     */, +++ b/retrofit/src/main/java/retrofit/Retrofit.java, +import retrofit.http.GET;, +    /**, +     * Set a fixed API base URL., +     *, +     * @see #baseUrl(HttpUrl), +     */, +    /**, +     * Set a fixed API base URL., +     * <p>, +     * The specified endpoint values (such as with {@link GET @GET}) are resolved against this, +     * value using {@link HttpUrl#resolve(String)}. The behavior of this matches that of an, +     * {@code <a href="">} link on a website resolving on the current URL., +     * <p>, +     * <b>Base URLs should always end in {@code /}.</b>, +     * <p>, +     * A trailing {@code /} ensures that endpoints values which are relative paths will correctly, +     * append themselves to a base which has path components., +     * <p>, +     * <b>Correct:</b><br>, +     * Base URL: http://example.com/api/<br>, +     * Endpoint: foo/bar/<br>, +     * Result: http://example.com/api/foo/bar/, +     * <p>, +     * <b>Incorrect:</b><br>, +     * Base URL: http://example.com/api<br>, +     * Endpoint: foo/bar/<br>, +     * Result: http://example.com/foo/bar/, +     * <p>, +     * This method enforces that {@code baseUrl} has a trailing {@code /}., +     * <p>, +     * <b>Endpoint values which contain a leading {@code /} are absolute.</b>, +     * <p>, +     * Absolute values retain only the host from {@code baseUrl} and ignore any specified path]