[+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private final boolean isObservable;, +    isObservable = methodInfo.isObservable;, +    if (!isSynchronous && !isObservable) {, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private final boolean isObservable;, +    isObservable = methodInfo.isObservable;, +    if (!isSynchronous && !isObservable) {, +++ b/retrofit/src/test/java/retrofit/RestAdapterTest.java, +import org.mockito.ArgumentCaptor;, +import retrofit.http.Path;, +    @POST("/{x}/{y}") Observable<Response> observable(@Path("x") String x, @Path("y") String y);, +  @Test public void observableHandlesParams() throws Exception {, +    ArgumentCaptor<Request> requestCaptor = ArgumentCaptor.forClass(Request.class);, +    when(mockClient.execute(requestCaptor.capture())) //, +        .thenReturn(new Response(200, "OK", NO_HEADERS, new TypedString("hello")));, +    ArgumentCaptor<Response> responseCaptor = ArgumentCaptor.forClass(Response.class);, +    Action1<Response> action = mock(Action1.class);, +    example.observable("X", "Y").subscribe(action);, +, +    Request request = requestCaptor.getValue();, +    assertThat(request.getUrl()).contains("/X/Y");, +, +    verify(action).call(responseCaptor.capture());, +    Response response = responseCaptor.getValue();, +    assertThat(response.getStatus()).isEqualTo(200);, +  }, +]