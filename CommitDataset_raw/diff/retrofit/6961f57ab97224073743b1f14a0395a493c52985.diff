[+++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final ServiceMethod<T> serviceMethod;, +  OkHttpCall(ServiceMethod<T> serviceMethod, Object[] args) {, +    this.serviceMethod = serviceMethod;, +    return new OkHttpCall<>(serviceMethod, args);, +    Request request = serviceMethod.toRequest(args);, +    okhttp3.Call call = serviceMethod.callFactory.newCall(request);, +      T body = serviceMethod.toResponse(catchingBody);, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final ServiceMethod<T> serviceMethod;, +  OkHttpCall(ServiceMethod<T> serviceMethod, Object[] args) {, +    this.serviceMethod = serviceMethod;, +    return new OkHttpCall<>(serviceMethod, args);, +    Request request = serviceMethod.toRequest(args);, +    okhttp3.Call call = serviceMethod.callFactory.newCall(request);, +      T body = serviceMethod.toResponse(catchingBody);, +++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +  private final ServiceMethod<T> serviceMethod;, +  OkHttpCall(ServiceMethod<T> serviceMethod, Object[] args) {, +    this.serviceMethod = serviceMethod;, +    return new OkHttpCall<>(serviceMethod, args);, +    Request request = serviceMethod.toRequest(args);, +    okhttp3.Call call = serviceMethod.callFactory.newCall(request);, +      T body = serviceMethod.toResponse(catchingBody);, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2;, +, +import android.net.Uri;, +import java.io.IOException;, +import java.lang.reflect.Array;, +import java.net.URI;, +import java.util.Map;, +import okhttp3.Headers;, +import okhttp3.RequestBody;, +, +import static retrofit2.Utils.checkNotNull;, +, +abstract class ParameterHandler<T> {, +  abstract void apply(RequestBuilder builder, T value) throws IOException;, +, +  final ParameterHandler<Iterable<T>> iterable() {, +    return new ParameterHandler<Iterable<T>>() {, +      @Override void apply(RequestBuilder builder, Iterable<T> values) throws IOException {, +        if (values == null) return; // Skip null values., +, +        for (T value : values) {, +          ParameterHandler.this.apply(builder, value);, +        }, +      }, +    };, +  }, +, +  final ParameterHandler<Object> array() {, +    return new ParameterHandler<Object>() {, +      @Override void apply(RequestBuilder builder, Object values) throws IOException {, +        if (values == null) return; // Skip null values., +, +        for (int i = 0, size = Array.getLength(values); i < size; i++) {, +          //noinspection unchecked, +          ParameterHandler.this.apply(builder, (T) Array.get(values, i));, +        }, +      }, +    };, +  }, +, +  static final class StringUrl extends ParameterHandler<String> {, +    @Override void apply(RequestBuilder builder, String value) {, +      builder.setRelativeUrl(value);, +    }, +  }, +, +  static final class JavaUriUrl extends ParameterHandler<URI> {, +    @Override void apply(RequestBuilder builder, URI value) {, +      builder.setRelativeUrl(value.toString());, +    }, +  }, +, +  static final class AndroidUriUrl extends ParameterHandler<Uri> {, +    @Override void apply(RequestBuilder builder, Uri value) {]