[+++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, +    if (RequestBody.class.isAssignableFrom(Types.getRawType(type))) {, +++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, +    if (RequestBody.class.isAssignableFrom(Types.getRawType(type))) {, +++ b/retrofit/src/main/java/retrofit2/CallAdapter.java, +      return Types.getRawType(type);, +++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, +    if (RequestBody.class.isAssignableFrom(Types.getRawType(type))) {, +++ b/retrofit/src/main/java/retrofit2/CallAdapter.java, +      return Types.getRawType(type);, +++ b/retrofit/src/main/java/retrofit2/MethodHandler.java, +          + Types.getRawType(responseType).getName(), +++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, +    if (RequestBody.class.isAssignableFrom(Types.getRawType(type))) {, +++ b/retrofit/src/main/java/retrofit2/CallAdapter.java, +      return Types.getRawType(type);, +++ b/retrofit/src/main/java/retrofit2/MethodHandler.java, +          + Types.getRawType(responseType).getName(), +++ b/retrofit/src/main/java/retrofit2/RequestFactoryParser.java, +            Class<?> rawParameterType = Types.getRawType(methodParameterType);, +            Class<?> rawType = Types.getRawType(methodParameterType);, +            if (!Map.class.isAssignableFrom(rawType)) {, +            Type mapType = Types.getSupertype(methodParameterType, rawType, Map.class);, +            if (!(mapType instanceof ParameterizedType)) {, +            ParameterizedType parameterizedType = (ParameterizedType) mapType;, +            Class<?> rawParameterType = Types.getRawType(methodParameterType);, +            Class<?> rawParameterType = Types.getRawType(methodParameterType);, +            Class<?> rawType = Types.getRawType(methodParameterType);, +            if (!Map.class.isAssignableFrom(rawType)) {, +            Type mapType = Types.getSupertype(methodParameterType, rawType, Map.class);, +            if (!(mapType instanceof ParameterizedType)) {, +            ParameterizedType parameterizedType = (ParameterizedType) mapType;, +            Class<?> rawParameterType = Types.getRawType(methodParameterType);, +            Class<?> rawType = Types.getRawType(methodParameterType);, +            if (!Map.class.isAssignableFrom(rawType)) {, +            Type mapType = Types.getSupertype(methodParameterType, rawType, Map.class);, +            if (!(mapType instanceof ParameterizedType)) {, +            ParameterizedType parameterizedType = (ParameterizedType) mapType;, +++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java, +    if (RequestBody.class.isAssignableFrom(Types.getRawType(type))) {, +++ b/retrofit/src/main/java/retrofit2/CallAdapter.java, +      return Types.getRawType(type);, +++ b/retrofit/src/main/java/retrofit2/MethodHandler.java, +          + Types.getRawType(responseType).getName(), +++ b/retrofit/src/main/java/retrofit2/RequestFactoryParser.java, +            Class<?> rawParameterType = Types.getRawType(methodParameterType);, +            Class<?> rawType = Types.getRawType(methodParameterType);, +            if (!Map.class.isAssignableFrom(rawType)) {, +            Type mapType = Types.getSupertype(methodParameterType, rawType, Map.class);, +            if (!(mapType instanceof ParameterizedType)) {, +            ParameterizedType parameterizedType = (ParameterizedType) mapType;, +            Class<?> rawParameterType = Types.getRawType(methodParameterType);, +            Class<?> rawParameterType = Types.getRawType(methodParameterType);, +            Class<?> rawType = Types.getRawType(methodParameterType);, +            if (!Map.class.isAssignableFrom(rawType)) {, +            Type mapType = Types.getSupertype(methodParameterType, rawType, Map.class);, +            if (!(mapType instanceof ParameterizedType)) {, +            ParameterizedType parameterizedType = (ParameterizedType) mapType;, +            Class<?> rawParameterType = Types.getRawType(methodParameterType);, +            Class<?> rawType = Types.getRawType(methodParameterType);, +            if (!Map.class.isAssignableFrom(rawType)) {, +            Type mapType = Types.getSupertype(methodParameterType, rawType, Map.class);, +            if (!(mapType instanceof ParameterizedType)) {, +            ParameterizedType parameterizedType = (ParameterizedType) mapType;, +++ b/retrofit/src/main/java/retrofit2/Types.java, +/*, + * Copyright (C) 2008 Google Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2;, +, +import java.lang.reflect.Array;, +import java.lang.reflect.GenericArrayType;, +import java.lang.reflect.GenericDeclaration;, +import java.lang.reflect.ParameterizedType;, +import java.lang.reflect.Type;, +import java.lang.reflect.TypeVariable;, +import java.lang.reflect.WildcardType;, +import java.util.Arrays;, +import java.util.NoSuchElementException;, +, +final class Types {, +  private static final Type[] EMPTY_TYPE_ARRAY = new Type[0];, +, +  private Types() {, +    // No instances., +  }, +, +  public static Class<?> getRawType(Type type) {]