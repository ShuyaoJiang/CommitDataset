[+++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +   * Returns an unmodifiable list of the factories tried when creating a, +      // BuiltInConverters instance added by build()., +      converterFactories.remove(0);, +    /** Returns a modifiable list of converter factories. */, +    public List<Converter.Factory> converterFactories() {, +      return this.converterFactories;, +    }, +, +      List<Converter.Factory> converterFactories = new ArrayList<>();, +, +      // Add the built-in converter factory first. This prevents overriding its behavior but also, +      // ensures correct behavior when using converters that consume all types., +      converterFactories.add(new BuiltInConverters());, +      converterFactories.addAll(this.converterFactories);, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +   * Returns an unmodifiable list of the factories tried when creating a, +      // BuiltInConverters instance added by build()., +      converterFactories.remove(0);, +    /** Returns a modifiable list of converter factories. */, +    public List<Converter.Factory> converterFactories() {, +      return this.converterFactories;, +    }, +, +      List<Converter.Factory> converterFactories = new ArrayList<>();, +, +      // Add the built-in converter factory first. This prevents overriding its behavior but also, +      // ensures correct behavior when using converters that consume all types., +      converterFactories.add(new BuiltInConverters());, +      converterFactories.addAll(this.converterFactories);, +++ b/retrofit/src/test/java/retrofit2/RetrofitTest.java, +import static org.mockito.Mockito.verifyZeroInteractions;, +  @Test public void builtInConvertersAbsentInCloneBuilder() {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .build();, +, +    assertEquals(0, retrofit.newBuilder().converterFactories().size());, +  }, +, +  @Test public void builtInConvertersFirstInClone() {, +    Converter<ResponseBody, Void> converter = mock(Converter.class);, +    Converter.Factory factory = mock(Converter.Factory.class);, +    Annotation[] annotations = new Annotation[0];, +, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl("http://example.com/"), +        .addConverterFactory(factory), +        .build();, +, +    doReturn(converter).when(factory).responseBodyConverter(Void.class, annotations, retrofit);, +, +    retrofit.newBuilder().build().responseBodyConverter(Void.class, annotations);, +, +    verifyZeroInteractions(factory);, +  }, +]