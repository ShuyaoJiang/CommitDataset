[+++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +  /** Creates a failed {@link Call} from {@code failure}. */, +    // TODO delete this overload in Retrofit 3.0., +    return new FakeCall<>(null, failure);, +  }, +, +  /**, +   * Creates a failed {@link Call} from {@code failure}., +   * <p>, +   * Note: When invoking {@link Call#execute() execute()} on the returned {@link Call}, if, +   * {@code failure} is a {@link RuntimeException}, {@link Error}, or {@link IOException} subtype, +   * it is thrown directly. Otherwise it is "sneaky thrown" despite not being declared., +   */, +  public static <T> Call<T> failure(Throwable failure) {, +    private final Throwable error;, +    FakeCall(@Nullable Response<T> response, @Nullable Throwable error) {, +      throw FakeCall.<Error>sneakyThrow2(error);, +    }, +, +    @SuppressWarnings("unchecked") // Intentionally abusing this feature., +    private static <T extends Throwable> T sneakyThrow2(Throwable t) throws T {, +      throw (T) t;, +          delegate = failure(e);, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +  /** Creates a failed {@link Call} from {@code failure}. */, +    // TODO delete this overload in Retrofit 3.0., +    return new FakeCall<>(null, failure);, +  }, +, +  /**, +   * Creates a failed {@link Call} from {@code failure}., +   * <p>, +   * Note: When invoking {@link Call#execute() execute()} on the returned {@link Call}, if, +   * {@code failure} is a {@link RuntimeException}, {@link Error}, or {@link IOException} subtype, +   * it is thrown directly. Otherwise it is "sneaky thrown" despite not being declared., +   */, +  public static <T> Call<T> failure(Throwable failure) {, +    private final Throwable error;, +    FakeCall(@Nullable Response<T> response, @Nullable Throwable error) {, +      throw FakeCall.<Error>sneakyThrow2(error);, +    }, +, +    @SuppressWarnings("unchecked") // Intentionally abusing this feature., +    private static <T extends Throwable> T sneakyThrow2(Throwable t) throws T {, +      throw (T) t;, +          delegate = failure(e);, +++ b/retrofit-mock/src/test/java/retrofit2/mock/CallsTest.java, +import java.io.FileNotFoundException;, +import java.security.cert.CertificateException;, +import retrofit2.Retrofit;, +  @Test public void failureExecuteCheckedException() {, +    CertificateException failure = new CertificateException("Hey");, +    Call<Object> taco = Calls.failure(failure);, +    assertFalse(taco.isExecuted());, +    try {, +      taco.execute();, +      fail();, +    } catch (Throwable e) {, +      assertSame(failure, e);, +    }, +    assertTrue(taco.isExecuted());, +  }, +, +, +  @Test public void deferredThrowUncheckedExceptionEnqueue() {, +    final RuntimeException failure = new RuntimeException("Hey");, +    final AtomicReference<Throwable> failureRef = new AtomicReference<>();, +    Calls.failure(failure).enqueue(new Callback<Object>() {, +      @Override public void onResponse(Call<Object> call, Response<Object> response) {, +        fail();, +      }, +, +      @Override public void onFailure(Call<Object> call, Throwable t) {, +        failureRef.set(t);, +      }, +    });, +    assertSame(failure, failureRef.get());, +  }]