[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ResultTest.java, +    Response<String> response = Response.fakeSuccess("Hi");, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ResultTest.java, +    Response<String> response = Response.fakeSuccess("Hi");, +++ b/retrofit/src/main/java/retrofit/Endpoint.java, +import static retrofit.Utils.checkNotNull;, +, +public abstract class Endpoint {, +  /** Create an endpoint with the provided {@code url}. */, +  public static Endpoint createFixed(String url) {, +    checkNotNull(url, "url == null");, +    final HttpUrl httpUrl = HttpUrl.parse(url);, +    if (httpUrl == null) {, +      throw new IllegalArgumentException("Invalid URL: " + url);, +    }, +    return new Endpoint() {, +      @Override public HttpUrl url() {, +        return httpUrl;, +      }, +    };, +  }, +, +  public abstract HttpUrl url();, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ResultTest.java, +    Response<String> response = Response.fakeSuccess("Hi");, +++ b/retrofit/src/main/java/retrofit/Endpoint.java, +import static retrofit.Utils.checkNotNull;, +, +public abstract class Endpoint {, +  /** Create an endpoint with the provided {@code url}. */, +  public static Endpoint createFixed(String url) {, +    checkNotNull(url, "url == null");, +    final HttpUrl httpUrl = HttpUrl.parse(url);, +    if (httpUrl == null) {, +      throw new IllegalArgumentException("Invalid URL: " + url);, +    }, +    return new Endpoint() {, +      @Override public HttpUrl url() {, +        return httpUrl;, +      }, +    };, +  }, +, +  public abstract HttpUrl url();, +++ b/retrofit/src/main/java/retrofit/ExceptionCatchingRequestBody.java, +  void throwIfCaught() throws IOException {, +    if (thrownException != null) {, +      throw thrownException;, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ResultTest.java, +    Response<String> response = Response.fakeSuccess("Hi");, +++ b/retrofit/src/main/java/retrofit/Endpoint.java, +import static retrofit.Utils.checkNotNull;, +, +public abstract class Endpoint {, +  /** Create an endpoint with the provided {@code url}. */, +  public static Endpoint createFixed(String url) {, +    checkNotNull(url, "url == null");, +    final HttpUrl httpUrl = HttpUrl.parse(url);, +    if (httpUrl == null) {, +      throw new IllegalArgumentException("Invalid URL: " + url);, +    }, +    return new Endpoint() {, +      @Override public HttpUrl url() {, +        return httpUrl;, +      }, +    };, +  }, +, +  public abstract HttpUrl url();, +++ b/retrofit/src/main/java/retrofit/ExceptionCatchingRequestBody.java, +  void throwIfCaught() throws IOException {, +    if (thrownException != null) {, +      throw thrownException;, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +import static retrofit.Utils.closeQueitly;, +, +    // Remove the body (the only stateful object) so we can pass the response along., +      try {, +        // Buffer the entire body to avoid future I/O., +        ResponseBody bufferedBody = Utils.readBodyToBytesIfNecessary(rawBody);, +        return Response.error(bufferedBody, rawResponse);, +      } finally {, +        closeQueitly(rawBody);, +      }, +    }, +, +    if (code == 204 || code == 205) {, +      return Response.success(null, rawResponse);, +    }, +, +      if (methodInfo.isStreaming) {, +        // Use the raw body from the request. The caller is responsible for closing., +        return Response.success((T) rawBody, rawResponse);, +      }, +, +      try {, +        // Buffer the entire body to avoid future I/O., +        ResponseBody bufferedBody = Utils.readBodyToBytesIfNecessary(rawBody);, +        //noinspection unchecked, +        return Response.success((T) bufferedBody, rawResponse);]