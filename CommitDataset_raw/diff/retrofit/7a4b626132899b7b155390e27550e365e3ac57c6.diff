[+++ b/retrofit/src/main/java/retrofit/Call.java, +/**, + * An invocation of a Retrofit method that sends a request to a webserver and returns a response., + * Each call yields its own HTTP request and response pair. Use {@link #clone} to make multiple, + * calls with the same parameters to the same webserver; this may be used to implement polling or, + * to retry a failed call., + *, + * <p>Calls may be executed synchronously with {@link #execute}, or asynchronously with {@link, + * #enqueue}. In either case the call can be canceled at any time with {@link #cancel}. A call that, + * is busy writing its request or reading its response may receive a {@link IOException}; this is, + * working as designed., + */, +  void enqueue(Callback<T> callback);, +++ b/retrofit/src/main/java/retrofit/Call.java, +/**, + * An invocation of a Retrofit method that sends a request to a webserver and returns a response., + * Each call yields its own HTTP request and response pair. Use {@link #clone} to make multiple, + * calls with the same parameters to the same webserver; this may be used to implement polling or, + * to retry a failed call., + *, + * <p>Calls may be executed synchronously with {@link #execute}, or asynchronously with {@link, + * #enqueue}. In either case the call can be canceled at any time with {@link #cancel}. A call that, + * is busy writing its request or reading its response may receive a {@link IOException}; this is, + * working as designed., + */, +  void enqueue(Callback<T> callback);, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +  private volatile boolean canceled;, +    if (canceled) {, +      rawCall.cancel();, +    }, +        Response<T> response;, +        } catch (Throwable e) {, +    com.squareup.okhttp.Call rawCall = createRawCall();, +    if (canceled) {, +      rawCall.cancel();, +    }, +    canceled = true;, +    if (rawCall != null) {, +}, +++ b/retrofit/src/main/java/retrofit/Call.java, +/**, + * An invocation of a Retrofit method that sends a request to a webserver and returns a response., + * Each call yields its own HTTP request and response pair. Use {@link #clone} to make multiple, + * calls with the same parameters to the same webserver; this may be used to implement polling or, + * to retry a failed call., + *, + * <p>Calls may be executed synchronously with {@link #execute}, or asynchronously with {@link, + * #enqueue}. In either case the call can be canceled at any time with {@link #cancel}. A call that, + * is busy writing its request or reading its response may receive a {@link IOException}; this is, + * working as designed., + */, +  void enqueue(Callback<T> callback);, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +  private volatile boolean canceled;, +    if (canceled) {, +      rawCall.cancel();, +    }, +        Response<T> response;, +        } catch (Throwable e) {, +    com.squareup.okhttp.Call rawCall = createRawCall();, +    if (canceled) {, +      rawCall.cancel();, +    }, +    canceled = true;, +    if (rawCall != null) {, +}, +++ b/retrofit/src/test/java/retrofit/CallTest.java, +  @Test public void cancelBeforeExecute() {, +, +    try {, +      call.execute();, +    } catch (IOException e) {, +      assertThat(e).hasMessage("Canceled");, +  @Test public void cancelBeforeEnqueue() throws Exception {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .converterFactory(new ToStringConverterFactory()), +        .build();, +    Service service = retrofit.create(Service.class);, +    Call<String> call = service.getString();, +, +    call.cancel();, +, +    final AtomicReference<Throwable> failureRef = new AtomicReference<>();, +    final CountDownLatch latch = new CountDownLatch(1);, +    call.enqueue(new Callback<String>() {, +      @Override public void success(Response<String> response) {, +        throw new AssertionError();, +      }, +, +      @Override public void failure(Throwable t) {, +        failureRef.set(t);, +        latch.countDown();, +      }, +    });, +    latch.await();, +    assertThat(failureRef.get()).hasMessage("Canceled");, +  }, +]