[+++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import rx.Scheduler;, +import rx.functions.Func1;, +import rx.schedulers.Schedulers;, +    private final Scheduler httpScheduler;, +      httpScheduler = Schedulers.from(restAdapter.httpExecutor);, +      return Observable.just("nothing") //, +          .flatMap(new Func1<String, Observable<?>>() {, +            @Override public Observable<?> call(String s) {, +                return (Observable) mockHandler.invokeSync(methodInfo, interceptor, args);, +                return Observable.error(errorHandler.handleError(e));, +              } catch (Throwable throwable) {, +                return Observable.error(throwable);, +          }).subscribeOn(httpScheduler);, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import rx.Scheduler;, +import rx.functions.Func1;, +import rx.schedulers.Schedulers;, +    private final Scheduler httpScheduler;, +      httpScheduler = Schedulers.from(restAdapter.httpExecutor);, +      return Observable.just("nothing") //, +          .flatMap(new Func1<String, Observable<?>>() {, +            @Override public Observable<?> call(String s) {, +                return (Observable) mockHandler.invokeSync(methodInfo, interceptor, args);, +                return Observable.error(errorHandler.handleError(e));, +              } catch (Throwable throwable) {, +                return Observable.error(throwable);, +          }).subscribeOn(httpScheduler);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +    verify(httpExecutor).execute(any(Runnable.class));, +    verify(httpExecutor).execute(any(Runnable.class));]