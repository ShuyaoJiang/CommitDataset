[+++ b/retrofit/src/main/java/retrofit/CallbackRunnable.java, +import static retrofit.RetrofitError.unexpectedError;, +, +  private final ErrorHandler errorHandler;, +  CallbackRunnable(Callback<T> callback, Executor callbackExecutor, ErrorHandler errorHandler) {, +    this.errorHandler = errorHandler;, +    } catch (RetrofitError e) {, +      Throwable cause = errorHandler.handleError(e);, +      final RetrofitError handled = cause == e ? e : unexpectedError(e.getUrl(), cause);, +          callback.failure(handled);, +++ b/retrofit/src/main/java/retrofit/CallbackRunnable.java, +import static retrofit.RetrofitError.unexpectedError;, +, +  private final ErrorHandler errorHandler;, +  CallbackRunnable(Callback<T> callback, Executor callbackExecutor, ErrorHandler errorHandler) {, +    this.errorHandler = errorHandler;, +    } catch (RetrofitError e) {, +      Throwable cause = errorHandler.handleError(e);, +      final RetrofitError handled = cause == e ? e : unexpectedError(e.getUrl(), cause);, +          callback.failure(handled);, +++ b/retrofit/src/main/java/retrofit/ErrorHandler.java, + * A hook allowing clients to customize {@link retrofit.client.Response response} exceptions., +   * @return Throwable an exception which will be thrown from a synchronous interface method or, +   *         passed to an asynchronous error callback. Must not be {@code null}., +++ b/retrofit/src/main/java/retrofit/CallbackRunnable.java, +import static retrofit.RetrofitError.unexpectedError;, +, +  private final ErrorHandler errorHandler;, +  CallbackRunnable(Callback<T> callback, Executor callbackExecutor, ErrorHandler errorHandler) {, +    this.errorHandler = errorHandler;, +    } catch (RetrofitError e) {, +      Throwable cause = errorHandler.handleError(e);, +      final RetrofitError handled = cause == e ? e : unexpectedError(e.getUrl(), cause);, +          callback.failure(handled);, +++ b/retrofit/src/main/java/retrofit/ErrorHandler.java, + * A hook allowing clients to customize {@link retrofit.client.Response response} exceptions., +   * @return Throwable an exception which will be thrown from a synchronous interface method or, +   *         passed to an asynchronous error callback. Must not be {@code null}., +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +    if (Platform.HAS_RX_JAVA && httpExecutor != null) {, +      this.rxSupport = new RxSupport(httpExecutor, errorHandler);, +    } else {, +      this.rxSupport = null;, +    }, +    private final ErrorHandler errorHandler;, +    RxSupport(Executor executor, ErrorHandler errorHandler) {, +      this.errorHandler = errorHandler;, +            subscriber.onError(errorHandler.handleError(e));, +      httpExecutor.execute(new CallbackRunnable(callback, callbackExecutor, errorHandler) {, +++ b/retrofit/src/main/java/retrofit/CallbackRunnable.java, +import static retrofit.RetrofitError.unexpectedError;, +, +  private final ErrorHandler errorHandler;, +  CallbackRunnable(Callback<T> callback, Executor callbackExecutor, ErrorHandler errorHandler) {, +    this.errorHandler = errorHandler;, +    } catch (RetrofitError e) {, +      Throwable cause = errorHandler.handleError(e);, +      final RetrofitError handled = cause == e ? e : unexpectedError(e.getUrl(), cause);, +          callback.failure(handled);, +++ b/retrofit/src/main/java/retrofit/ErrorHandler.java, + * A hook allowing clients to customize {@link retrofit.client.Response response} exceptions., +   * @return Throwable an exception which will be thrown from a synchronous interface method or, +   *         passed to an asynchronous error callback. Must not be {@code null}., +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +    if (Platform.HAS_RX_JAVA && httpExecutor != null) {, +      this.rxSupport = new RxSupport(httpExecutor, errorHandler);, +    } else {, +      this.rxSupport = null;, +    }, +    private final ErrorHandler errorHandler;, +    RxSupport(Executor executor, ErrorHandler errorHandler) {, +      this.errorHandler = errorHandler;, +            subscriber.onError(errorHandler.handleError(e));, +      httpExecutor.execute(new CallbackRunnable(callback, callbackExecutor, errorHandler) {, +++ b/retrofit/src/test/java/retrofit/CallbackRunnableTest.java, +  private ErrorHandler errorHandler = ErrorHandler.DEFAULT;, +    callbackRunnable = spy(new CallbackRunnable<Object>(callback, executor, errorHandler) {, +++ b/retrofit/src/main/java/retrofit/CallbackRunnable.java, +import static retrofit.RetrofitError.unexpectedError;, +, +  private final ErrorHandler errorHandler;, +  CallbackRunnable(Callback<T> callback, Executor callbackExecutor, ErrorHandler errorHandler) {, +    this.errorHandler = errorHandler;, +    } catch (RetrofitError e) {, +      Throwable cause = errorHandler.handleError(e);, +      final RetrofitError handled = cause == e ? e : unexpectedError(e.getUrl(), cause);, +          callback.failure(handled);, +++ b/retrofit/src/main/java/retrofit/ErrorHandler.java, + * A hook allowing clients to customize {@link retrofit.client.Response response} exceptions., +   * @return Throwable an exception which will be thrown from a synchronous interface method or, +   *         passed to an asynchronous error callback. Must not be {@code null}., +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +    if (Platform.HAS_RX_JAVA && httpExecutor != null) {, +      this.rxSupport = new RxSupport(httpExecutor, errorHandler);, +    } else {, +      this.rxSupport = null;, +    }, +    private final ErrorHandler errorHandler;, +    RxSupport(Executor executor, ErrorHandler errorHandler) {, +      this.errorHandler = errorHandler;]