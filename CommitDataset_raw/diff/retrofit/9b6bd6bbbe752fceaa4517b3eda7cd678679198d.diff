[+++ b/http/pom.xml, +    <version>0.8.0-SNAPSHOT</version>, +++ b/http/pom.xml, +    <version>0.8.0-SNAPSHOT</version>, +++ b/http/src/main/java/retrofit/http/Callback.java, +   *, +   * @param error message to show user, or null if no message was returned, +  void sessionExpired(ServerError error);, +   * @param error message to show user, or null if no message was returned, +  void serverError(ServerError error, int statusCode);, +, +, +  /** JSON object for parsing server error responses. */, +  static class ServerError {, +    public final String message;, +, +    public ServerError(String message) {, +      this.message = message;, +    }, +  }, +++ b/http/pom.xml, +    <version>0.8.0-SNAPSHOT</version>, +++ b/http/src/main/java/retrofit/http/Callback.java, +   *, +   * @param error message to show user, or null if no message was returned, +  void sessionExpired(ServerError error);, +   * @param error message to show user, or null if no message was returned, +  void serverError(ServerError error, int statusCode);, +, +, +  /** JSON object for parsing server error responses. */, +  static class ServerError {, +    public final String message;, +, +    public ServerError(String message) {, +      this.message = message;, +    }, +  }, +++ b/http/src/main/java/retrofit/http/CallbackResponseHandler.java, +import retrofit.http.Callback.ServerError;, +, +import java.io.IOException;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +    HttpEntity entity = response.getEntity();, +      if (entity != null) {, +        // TODO: Use specified encoding., +        String body = new String(HttpClients.entityToBytes(entity), "UTF-8");, +        LOGGER.fine("Session expired. Body: " + body + ". Request url " + requestUrl);, +        callback.sessionExpired(parseServerMessage(statusCode, body));, +      } else {, +        callback.sessionExpired(null);, +      }, +  private ServerError parseServerMessage(int statusCode, String body) {, +        return gson.fromJson(body, ServerError.class);, +++ b/http/pom.xml, +    <version>0.8.0-SNAPSHOT</version>, +++ b/http/src/main/java/retrofit/http/Callback.java, +   *, +   * @param error message to show user, or null if no message was returned, +  void sessionExpired(ServerError error);, +   * @param error message to show user, or null if no message was returned, +  void serverError(ServerError error, int statusCode);, +, +, +  /** JSON object for parsing server error responses. */, +  static class ServerError {, +    public final String message;, +, +    public ServerError(String message) {, +      this.message = message;, +    }, +  }, +++ b/http/src/main/java/retrofit/http/CallbackResponseHandler.java, +import retrofit.http.Callback.ServerError;, +, +import java.io.IOException;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +    HttpEntity entity = response.getEntity();, +      if (entity != null) {, +        // TODO: Use specified encoding., +        String body = new String(HttpClients.entityToBytes(entity), "UTF-8");, +        LOGGER.fine("Session expired. Body: " + body + ". Request url " + requestUrl);, +        callback.sessionExpired(parseServerMessage(statusCode, body));, +      } else {, +        callback.sessionExpired(null);, +      }, +  private ServerError parseServerMessage(int statusCode, String body) {, +        return gson.fromJson(body, ServerError.class);, +++ b/http/src/main/java/retrofit/http/RestAdapter.java, +import org.apache.http.Header;, +import org.apache.http.HttpEntity;, +import org.apache.http.HttpResponse;, +import org.apache.http.client.HttpClient;, +import org.apache.http.client.ResponseHandler;, +import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;, +import org.apache.http.client.methods.HttpUriRequest;, +, +import javax.inject.Inject;]