[+++ b/retrofit/src/main/java/retrofit/RequestFactory.java, +      if (actions.length != args.length) {, +        throw new IllegalArgumentException("Argument count (", +            + args.length, +            + ") doesn't match action count (", +            + actions.length, +            + ")");, +      }, +++ b/retrofit/src/main/java/retrofit/RequestFactory.java, +      if (actions.length != args.length) {, +        throw new IllegalArgumentException("Argument count (", +            + args.length, +            + ") doesn't match action count (", +            + actions.length, +            + ")");, +      }, +++ b/retrofit/src/main/java/retrofit/RequestFactoryParser.java, +          RequestBuilderAction action = null;, +            action = new RequestBuilderAction.Url();, +            action = new RequestBuilderAction.Path(name, path.encoded());, +            action = new RequestBuilderAction.Query(query.value(), query.encoded());, +            action = new RequestBuilderAction.QueryMap(queryMap.encoded());, +            action = new RequestBuilderAction.Header(header.value());, +            action = new RequestBuilderAction.Field(field.value(), field.encoded());, +            action = new RequestBuilderAction.FieldMap(fieldMap.encoded());, +            action = new RequestBuilderAction.Part<>(headers, converter);, +            action = new RequestBuilderAction.PartMap(converterFactory, partMap.encoding());, +            action = new RequestBuilderAction.Body<>(converter);, +, +          if (action != null) {, +            if (requestBuilderActions[i] != null) {, +              throw parameterError(i, "Multiple Retrofit annotations found, only one allowed.");, +            }, +            requestBuilderActions[i] = action;, +          }, +++ b/retrofit/src/main/java/retrofit/RequestFactory.java, +      if (actions.length != args.length) {, +        throw new IllegalArgumentException("Argument count (", +            + args.length, +            + ") doesn't match action count (", +            + actions.length, +            + ")");, +      }, +++ b/retrofit/src/main/java/retrofit/RequestFactoryParser.java, +          RequestBuilderAction action = null;, +            action = new RequestBuilderAction.Url();, +            action = new RequestBuilderAction.Path(name, path.encoded());, +            action = new RequestBuilderAction.Query(query.value(), query.encoded());, +            action = new RequestBuilderAction.QueryMap(queryMap.encoded());, +            action = new RequestBuilderAction.Header(header.value());, +            action = new RequestBuilderAction.Field(field.value(), field.encoded());, +            action = new RequestBuilderAction.FieldMap(fieldMap.encoded());, +            action = new RequestBuilderAction.Part<>(headers, converter);, +            action = new RequestBuilderAction.PartMap(converterFactory, partMap.encoding());, +            action = new RequestBuilderAction.Body<>(converter);, +, +          if (action != null) {, +            if (requestBuilderActions[i] != null) {, +              throw parameterError(i, "Multiple Retrofit annotations found, only one allowed.");, +            }, +            requestBuilderActions[i] = action;, +          }, +++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java, +  @interface NonNull {}, +, +  @Test public void multipleParameterAnnotationsOnlyOneRetrofitAllowed() throws Exception {, +    class Example {, +      @GET("/") //, +      Call<Object> method(@Query("maybe") @NonNull Object o) {, +        return null;, +      }, +    }, +    Request request = buildRequest(Example.class, "yep");, +    assertThat(request.urlString()).isEqualTo("http://example.com/?maybe=yep");, +  }, +]