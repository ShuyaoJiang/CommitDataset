[+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +            } else {, +              formBody.addField(name, value.toString());, +            }, +          }, +          break;, +        case FIELD_MAP:, +          if (value != null) { // Skip null values., +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +            } else {, +              formBody.addField(name, value.toString());, +            }, +          }, +          break;, +        case FIELD_MAP:, +          if (value != null) { // Skip null values., +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +import retrofit.http.FieldMap;, +    FIELD_MAP,, +          } else if (annotationType == FieldMap.class) {, +            if (requestType != RequestType.FORM_URL_ENCODED) {, +              throw new IllegalStateException(, +                  "@Field parameters can only be used with form encoding.");, +            }, +            if (!parameterType.isInstance(Map.class)) {, +              throw new IllegalStateException("@FieldMap parameter type must be Map.");, +            }, +, +            gotField = true;, +            paramUsage[i] = ParamUsage.FIELD_MAP;, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +            } else {, +              formBody.addField(name, value.toString());, +            }, +          }, +          break;, +        case FIELD_MAP:, +          if (value != null) { // Skip null values., +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +import retrofit.http.FieldMap;, +    FIELD_MAP,, +          } else if (annotationType == FieldMap.class) {, +            if (requestType != RequestType.FORM_URL_ENCODED) {, +              throw new IllegalStateException(, +                  "@Field parameters can only be used with form encoding.");, +            }, +            if (!parameterType.isInstance(Map.class)) {, +              throw new IllegalStateException("@FieldMap parameter type must be Map.");, +            }, +, +            gotField = true;, +            paramUsage[i] = ParamUsage.FIELD_MAP;, +++ b/retrofit/src/main/java/retrofit/http/Field.java, + * <p>, + * Values may be {@code null} which will omit them from the request body., + * <p>, + * Simple Example:, + * void example(@Field("name") String name, @Field("occupation") String occupation);, + * Calling with {@code foo.example("Bob Smith", "President")} yields a request body of, + * {@code name=Bob+Smith&occupation=President}., + *, + * @see FormUrlEncoded, + * @see FieldMap, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +            } else {, +              formBody.addField(name, value.toString());, +            }, +          }, +          break;, +        case FIELD_MAP:, +          if (value != null) { // Skip null values., +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +import retrofit.http.FieldMap;, +    FIELD_MAP,, +          } else if (annotationType == FieldMap.class) {, +            if (requestType != RequestType.FORM_URL_ENCODED) {, +              throw new IllegalStateException(, +                  "@Field parameters can only be used with form encoding.");, +            }, +            if (!parameterType.isInstance(Map.class)) {, +              throw new IllegalStateException("@FieldMap parameter type must be Map.");, +            }, +, +            gotField = true;, +            paramUsage[i] = ParamUsage.FIELD_MAP;, +++ b/retrofit/src/main/java/retrofit/http/Field.java, + * <p>, + * Values may be {@code null} which will omit them from the request body., + * <p>, + * Simple Example:, + * void example(@Field("name") String name, @Field("occupation") String occupation);, + * Calling with {@code foo.example("Bob Smith", "President")} yields a request body of, + * {@code name=Bob+Smith&occupation=President}., + *, + * @see FormUrlEncoded, + * @see FieldMap, +++ b/retrofit/src/main/java/retrofit/http/FieldMap.java, +/*, + * Copyright (C) 2014 Square, Inc., + *]