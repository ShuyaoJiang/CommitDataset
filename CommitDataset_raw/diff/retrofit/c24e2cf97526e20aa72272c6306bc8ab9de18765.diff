[+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +, +  static final class Tag<T> extends ParameterHandler<T> {, +    final Class<T> cls;, +, +    Tag(Class<T> cls) {, +      this.cls = cls;, +    }, +, +    @Override void apply(RequestBuilder builder, @Nullable T value) {, +      builder.addTag(cls, value);, +    }, +  }, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +, +  static final class Tag<T> extends ParameterHandler<T> {, +    final Class<T> cls;, +, +    Tag(Class<T> cls) {, +      this.cls = cls;, +    }, +, +    @Override void apply(RequestBuilder builder, @Nullable T value) {, +      builder.addTag(cls, value);, +    }, +  }, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  <T> void addTag(Class<T> cls, @Nullable T value) {, +    requestBuilder.tag(cls, value);, +  }, +, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +, +  static final class Tag<T> extends ParameterHandler<T> {, +    final Class<T> cls;, +, +    Tag(Class<T> cls) {, +      this.cls = cls;, +    }, +, +    @Override void apply(RequestBuilder builder, @Nullable T value) {, +      builder.addTag(cls, value);, +    }, +  }, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  <T> void addTag(Class<T> cls, @Nullable T value) {, +    requestBuilder.tag(cls, value);, +  }, +, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +import retrofit2.http.Tag;, +, +      } else if (annotation instanceof Tag) {, +        validateResolvableType(p, type);, +, +        Class<?> tagType = Utils.getRawType(type);, +        for (int i = p - 1; i >= 0; i--) {, +          ParameterHandler<?> otherHandler = parameterHandlers[i];, +          if (otherHandler instanceof ParameterHandler.Tag, +              && ((ParameterHandler.Tag) otherHandler).cls.equals(tagType)) {, +            throw parameterError(method, p, "@Tag type ", +                + tagType.getName(), +                + " is duplicate of parameter #", +                + (i + 1), +                + " and would always overwrite its value.");, +          }, +        }, +, +        return new ParameterHandler.Tag<>(tagType);, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +, +  static final class Tag<T> extends ParameterHandler<T> {, +    final Class<T> cls;, +, +    Tag(Class<T> cls) {, +      this.cls = cls;, +    }, +, +    @Override void apply(RequestBuilder builder, @Nullable T value) {, +      builder.addTag(cls, value);, +    }, +  }, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  <T> void addTag(Class<T> cls, @Nullable T value) {, +    requestBuilder.tag(cls, value);, +  }, +, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +import retrofit2.http.Tag;, +, +      } else if (annotation instanceof Tag) {, +        validateResolvableType(p, type);, +, +        Class<?> tagType = Utils.getRawType(type);, +        for (int i = p - 1; i >= 0; i--) {, +          ParameterHandler<?> otherHandler = parameterHandlers[i];, +          if (otherHandler instanceof ParameterHandler.Tag, +              && ((ParameterHandler.Tag) otherHandler).cls.equals(tagType)) {, +            throw parameterError(method, p, "@Tag type ", +                + tagType.getName()]