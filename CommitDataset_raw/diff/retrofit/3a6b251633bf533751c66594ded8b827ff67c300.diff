[+++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java, +import java.io.UnsupportedEncodingException;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +import retrofit.client.Response;, +import retrofit.http.Body;, +import retrofit.http.DELETE;, +import retrofit.http.EncodedPath;, +import retrofit.http.EncodedQuery;, +import retrofit.http.EncodedQueryMap;, +import retrofit.http.Field;, +import retrofit.http.FieldMap;, +import retrofit.http.FormUrlEncoded;, +import retrofit.http.GET;, +import retrofit.http.HEAD;, +import retrofit.http.Headers;, +import retrofit.http.Multipart;, +import retrofit.http.PATCH;, +import retrofit.http.POST;, +import retrofit.http.PUT;, +import retrofit.http.Path;, +import retrofit.http.Query;, +import retrofit.http.QueryMap;, +import retrofit.http.RestMethod;, +import retrofit.http.Streaming;, +import retrofit.mime.TypedInput;, +import rx.Observable;, +import static com.google.common.base.Charsets.UTF_8;, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +import static org.junit.Assert.fail;, +@SuppressWarnings("UnusedParameters") // Parameters inspected reflectively., +  private RequestInterceptor interceptor;, +, +  @RestMethod("BAD"), +  @Target(METHOD) @Retention(RUNTIME), +  private @interface BAD_CUSTOM {, +    int value();, +  }, +, +  @Test public void customWithoutRestMethod() {, +    class Example {, +      @BAD_CUSTOM(12) //, +      Response method() {, +        return null;, +      }, +    }, +, +    try {, +      buildRequest(Example.class);, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessage(, +          "Example.method: Failed to extract String 'value' from @BAD_CUSTOM annotation.");, +    }, +  }, +, +  @RestMethod("CUSTOM1"), +  @Target(METHOD) @Retention(RUNTIME), +  private @interface CUSTOM1 {, +    String value();, +  }, +, +  @Test public void custom1Method() {, +    class Example {, +      @CUSTOM1("/foo") //, +      Response method() {, +        return null;, +      }, +    }, +, +    Request request = buildRequest(Example.class);, +    assertThat(request.getMethod()).isEqualTo("CUSTOM1");, +    assertThat(request.getUrl()).isEqualTo("http://example.com/foo");, +    assertThat(request.getBody()).isNull();, +  }, +, +  @RestMethod(value = "CUSTOM2", hasBody = true), +  @Target(METHOD) @Retention(RUNTIME), +  private @interface CUSTOM2 {, +    String value();, +  }, +, +  @Test public void custom2Method() {, +    class Example {, +      @CUSTOM2("/foo") //, +      Response method(@Body TypedInput body) {, +        return null;, +      }, +    }, +, +    Request request = buildRequest(Example.class, new TypedString("hi"));, +    assertThat(request.getMethod()).isEqualTo("CUSTOM2");, +    assertThat(request.getUrl()).isEqualTo("http://example.com/foo");, +    assertTypedBytes(request.getBody(), "hi");, +  }, +, +  @Test public void onlyOneEncodingIsAllowedMultipartFirst() {, +    class Example {, +      @Multipart //]