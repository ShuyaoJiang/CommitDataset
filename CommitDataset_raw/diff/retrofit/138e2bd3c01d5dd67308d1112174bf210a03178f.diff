[+++ b/checkstyle.xml, +        <!--<module name="PackageName"/>-->, +++ b/checkstyle.xml, +        <!--<module name="PackageName"/>-->, +++ b/pom.xml, +  <groupId>com.squareup.retrofit2</groupId>, +++ b/checkstyle.xml, +        <!--<module name="PackageName"/>-->, +++ b/pom.xml, +  <groupId>com.squareup.retrofit2</groupId>, +++ b/retrofit-adapters/pom.xml, +    <groupId>com.squareup.retrofit2</groupId>, +++ b/checkstyle.xml, +        <!--<module name="PackageName"/>-->, +++ b/pom.xml, +  <groupId>com.squareup.retrofit2</groupId>, +++ b/retrofit-adapters/pom.xml, +    <groupId>com.squareup.retrofit2</groupId>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <groupId>com.squareup.retrofit2</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ b/checkstyle.xml, +        <!--<module name="PackageName"/>-->, +++ b/pom.xml, +  <groupId>com.squareup.retrofit2</groupId>, +++ b/retrofit-adapters/pom.xml, +    <groupId>com.squareup.retrofit2</groupId>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <groupId>com.squareup.retrofit2</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ /dev/null, +++ b/checkstyle.xml, +        <!--<module name="PackageName"/>-->, +++ b/pom.xml, +  <groupId>com.squareup.retrofit2</groupId>, +++ b/retrofit-adapters/pom.xml, +    <groupId>com.squareup.retrofit2</groupId>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <groupId>com.squareup.retrofit2</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ /dev/null, +++ /dev/null, +++ b/checkstyle.xml, +        <!--<module name="PackageName"/>-->, +++ b/pom.xml, +  <groupId>com.squareup.retrofit2</groupId>, +++ b/retrofit-adapters/pom.xml, +    <groupId>com.squareup.retrofit2</groupId>, +++ b/retrofit-adapters/rxjava-mock/pom.xml, +    <groupId>com.squareup.retrofit2</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +      <groupId>${project.groupId}</groupId>, +++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/rxjava-mock/src/main/java/retrofit2/mock/RxJavaBehaviorAdapter.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.mock;, +, +import rx.Observable;, +import rx.functions.Func1;, +, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +, +public final class RxJavaBehaviorAdapter implements NetworkBehavior.Adapter<Object> {, +  public static RxJavaBehaviorAdapter create() {, +    return new RxJavaBehaviorAdapter();, +  }, +, +  private RxJavaBehaviorAdapter() {, +  }, +, +  @Override public Object applyBehavior(NetworkBehavior behavior, Object value) {, +    if (value instanceof Observable) {, +      return applyObservableBehavior(behavior, (Observable<?>) value);, +    }, +    String name = value.getClass().getCanonicalName();, +    if ("rx.Single".equals(name)) {, +      // Apply behavior to the Single from a separate class. This defers classloading such that, +      // regular Observable operation can be leveraged without relying on this unstable RxJava API.]