[+++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +  MockHttpRetrofitError(String message, String url, Response response, Object body) {, +    super(message, url, response, null, null, false, null);, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +  MockHttpRetrofitError(String message, String url, Response response, Object body) {, +    super(message, url, response, null, null, false, null);, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +        throw new MockHttpRetrofitError(httpEx.reason, url, response, httpEx.responseBody);, +        RetrofitError error =, +            new MockHttpRetrofitError(httpEx.reason, url, response, httpEx.responseBody);, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +  MockHttpRetrofitError(String message, String url, Response response, Object body) {, +    super(message, url, response, null, null, false, null);, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +        throw new MockHttpRetrofitError(httpEx.reason, url, response, httpEx.responseBody);, +        RetrofitError error =, +            new MockHttpRetrofitError(httpEx.reason, url, response, httpEx.responseBody);, +++ b/retrofit/src/main/java/retrofit/RetrofitError.java, +    return new RetrofitError(exception.getMessage(), url, null, null, null, true, exception);, +    return new RetrofitError(exception.getMessage(), url, response, converter, successType, false,, +        exception);, +    String message = response.getStatus() + " " + response.getReason();, +    return new RetrofitError(message, url, response, converter, successType, false, null);, +    return new RetrofitError(exception.getMessage(), url, null, null, null, false, exception);, +  RetrofitError(String message, String url, Response response, Converter converter,, +      Type successType, boolean networkError, Throwable exception) {, +    super(message, exception);, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +  MockHttpRetrofitError(String message, String url, Response response, Object body) {, +    super(message, url, response, null, null, false, null);, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +        throw new MockHttpRetrofitError(httpEx.reason, url, response, httpEx.responseBody);, +        RetrofitError error =, +            new MockHttpRetrofitError(httpEx.reason, url, response, httpEx.responseBody);, +++ b/retrofit/src/main/java/retrofit/RetrofitError.java, +    return new RetrofitError(exception.getMessage(), url, null, null, null, true, exception);, +    return new RetrofitError(exception.getMessage(), url, response, converter, successType, false,, +        exception);, +    String message = response.getStatus() + " " + response.getReason();, +    return new RetrofitError(message, url, response, converter, successType, false, null);, +    return new RetrofitError(exception.getMessage(), url, null, null, null, false, exception);, +  RetrofitError(String message, String url, Response response, Converter converter,, +      Type successType, boolean networkError, Throwable exception) {, +    super(message, exception);, +++ b/retrofit/src/test/java/retrofit/CallbackRunnableTest.java, +    RetrofitError exception = RetrofitError.unexpectedError("", new RuntimeException());]