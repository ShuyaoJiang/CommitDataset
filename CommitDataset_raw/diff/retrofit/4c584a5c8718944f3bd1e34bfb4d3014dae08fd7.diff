[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .addConverterFactory(new StringConverterFactory()), +        .addCallAdapterFactory(ObservableCallAdapterFactory.create()), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .addConverterFactory(new StringConverterFactory()), +        .addCallAdapterFactory(ObservableCallAdapterFactory.create()), +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +  /** Create a converter for {@code type}. */, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .addConverterFactory(new StringConverterFactory()), +        .addCallAdapterFactory(ObservableCallAdapterFactory.create()), +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +  /** Create a converter for {@code type}. */, +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java, +        .addConverterFactory(GsonConverterFactory.create(gson)), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .addConverterFactory(new StringConverterFactory()), +        .addCallAdapterFactory(ObservableCallAdapterFactory.create()), +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +  /** Create a converter for {@code type}. */, +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java, +        .addConverterFactory(GsonConverterFactory.create(gson)), +++ b/retrofit-converters/jackson/src/main/java/retrofit/JacksonConverterFactory.java, +  /** Create a converter for {@code type}. */, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .addConverterFactory(new StringConverterFactory()), +        .addCallAdapterFactory(ObservableCallAdapterFactory.create()), +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +  /** Create a converter for {@code type}. */, +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java, +        .addConverterFactory(GsonConverterFactory.create(gson)), +++ b/retrofit-converters/jackson/src/main/java/retrofit/JacksonConverterFactory.java, +  /** Create a converter for {@code type}. */, +++ b/retrofit-converters/jackson/src/test/java/retrofit/JacksonConverterFactoryTest.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit;, +, +import com.fasterxml.jackson.annotation.JsonAutoDetect;, +import com.fasterxml.jackson.core.JsonGenerator;, +import com.fasterxml.jackson.core.JsonParser;, +import com.fasterxml.jackson.core.JsonToken;, +import com.fasterxml.jackson.databind.DeserializationContext;, +import com.fasterxml.jackson.databind.MapperFeature;, +import com.fasterxml.jackson.databind.ObjectMapper;, +import com.fasterxml.jackson.databind.SerializerProvider;, +import com.fasterxml.jackson.databind.deser.std.StdDeserializer;, +import com.fasterxml.jackson.databind.module.SimpleModule;, +import com.fasterxml.jackson.databind.ser.std.StdSerializer;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.MockWebServer;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import java.io.IOException;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import retrofit.http.Body;, +import retrofit.http.POST;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, +public class JacksonConverterFactoryTest {, +  interface AnInterface {, +    String getName();, +  }, +, +  static class AnImplementation implements AnInterface {, +    private String theName;, +, +    AnImplementation() {, +    }, +, +    AnImplementation(String name) {, +      theName = name;, +    }, +, +    @Override public String getName() {, +      return theName;, +    }, +  }, +, +  static class AnInterfaceSerializer extends StdSerializer<AnInterface> {, +    AnInterfaceSerializer() {, +      super(AnInterface.class);, +    }, +, +    @Override public void serialize(AnInterface anInterface, JsonGenerator jsonGenerator,]