[+++ b/retrofit/src/main/java/retrofit2/Platform.java, +import java.lang.invoke.MethodHandles.Lookup;, +import java.lang.reflect.Constructor;, +      // Because the service interface might not be public, we need to use a MethodHandle lookup, +      // that ignores the visibility of the declaringClass., +      Constructor<Lookup> constructor = Lookup.class.getDeclaredConstructor(Class.class, int.class);, +      constructor.setAccessible(true);, +      return constructor.newInstance(declaringClass, -1 /* trusted */), +++ b/retrofit/src/main/java/retrofit2/Platform.java, +import java.lang.invoke.MethodHandles.Lookup;, +import java.lang.reflect.Constructor;, +      // Because the service interface might not be public, we need to use a MethodHandle lookup, +      // that ignores the visibility of the declaringClass., +      Constructor<Lookup> constructor = Lookup.class.getDeclaredConstructor(Class.class, int.class);, +      constructor.setAccessible(true);, +      return constructor.newInstance(declaringClass, -1 /* trusted */), +++ b/retrofit/src/test/java/retrofit2/Java8DefaultMethodsTest.java, +package retrofit2;, +, +// TODO this test doesn't play nice in the IDE because it relies on Java 8 language features., +public final class Java8DefaultMethodsTest {, +  //@Rule public final MockWebServer server = new MockWebServer();, +  //, +  //interface Example {, +  //  @GET("/") Call<String> user(@Query("name") String name);, +  //, +  //  default Call<String> user() {, +  //    return user("hey");, +  //  }, +  //}, +  //, +  //@Test public void test() throws IOException {, +  //  server.enqueue(new MockResponse().setBody("Hi"));, +  //  server.enqueue(new MockResponse().setBody("Hi"));, +  //, +  //  Retrofit retrofit = new Retrofit.Builder(), +  //      .baseUrl(server.url("/")), +  //      .addConverterFactory(new ToStringConverterFactory()), +  //      .build();, +  //  Example example = retrofit.create(Example.class);, +  //, +  //  Response<String> response = example.user().execute();, +  //  assertThat(response.body()).isEqualTo("Hi");, +  //  Response<String> response = example.user("hi").execute();, +  //  assertThat(response.body()).isEqualTo("Hi");, +  //}, +}]