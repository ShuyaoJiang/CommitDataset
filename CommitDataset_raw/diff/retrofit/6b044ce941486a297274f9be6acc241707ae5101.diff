[+++ b/retrofit/src/main/java/retrofit/Endpoint.java, +public interface Endpoint {, +  HttpUrl url();, +++ b/retrofit/src/main/java/retrofit/Endpoint.java, +public interface Endpoint {, +  HttpUrl url();, +++ b/retrofit/src/main/java/retrofit/Retrofit.java, +import com.squareup.okhttp.HttpUrl;, +      checkNotNull(url, "url == null");, +      HttpUrl httpUrl = HttpUrl.parse(url);, +      if (httpUrl == null) {, +        throw new IllegalArgumentException("Illegal URL: " + url);, +      }, +      return endpoint(httpUrl);, +    }, +, +    /** API endpoint URL. */, +    public Builder endpoint(final HttpUrl url) {, +      checkNotNull(url, "url == null");, +      return endpoint(new Endpoint() {, +        @Override public HttpUrl url() {, +          return url;, +        }, +      });, +    public Builder callAdapterFactory(CallAdapter.Factory factory) {, +      this.adapterFactory = checkNotNull(factory, "factory == null");, +      if (endpoint == null) {, +        throw new IllegalStateException("Endpoint required.");, +      }, +++ b/retrofit/src/main/java/retrofit/Endpoint.java, +public interface Endpoint {, +  HttpUrl url();, +++ b/retrofit/src/main/java/retrofit/Retrofit.java, +import com.squareup.okhttp.HttpUrl;, +      checkNotNull(url, "url == null");, +      HttpUrl httpUrl = HttpUrl.parse(url);, +      if (httpUrl == null) {, +        throw new IllegalArgumentException("Illegal URL: " + url);, +      }, +      return endpoint(httpUrl);, +    }, +, +    /** API endpoint URL. */, +    public Builder endpoint(final HttpUrl url) {, +      checkNotNull(url, "url == null");, +      return endpoint(new Endpoint() {, +        @Override public HttpUrl url() {, +          return url;, +        }, +      });, +    public Builder callAdapterFactory(CallAdapter.Factory factory) {, +      this.adapterFactory = checkNotNull(factory, "factory == null");, +      if (endpoint == null) {, +        throw new IllegalStateException("Endpoint required.");, +      }, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/Endpoint.java, +public interface Endpoint {, +  HttpUrl url();, +++ b/retrofit/src/main/java/retrofit/Retrofit.java, +import com.squareup.okhttp.HttpUrl;, +      checkNotNull(url, "url == null");, +      HttpUrl httpUrl = HttpUrl.parse(url);, +      if (httpUrl == null) {, +        throw new IllegalArgumentException("Illegal URL: " + url);, +      }, +      return endpoint(httpUrl);, +    }, +, +    /** API endpoint URL. */, +    public Builder endpoint(final HttpUrl url) {, +      checkNotNull(url, "url == null");, +      return endpoint(new Endpoint() {, +        @Override public HttpUrl url() {, +          return url;, +        }, +      });, +    public Builder callAdapterFactory(CallAdapter.Factory factory) {, +      this.adapterFactory = checkNotNull(factory, "factory == null");, +      if (endpoint == null) {, +        throw new IllegalStateException("Endpoint required.");, +      }, +++ /dev/null, +++ b/retrofit/src/test/java/retrofit/RetrofitTest.java, +import com.squareup.okhttp.HttpUrl;, +import com.squareup.okhttp.OkHttpClient;, +import static org.mockito.Mockito.mock;, +, +  @Test public void endpointRequired() {, +    try {, +      new Retrofit.Builder().build();, +      fail();, +    } catch (IllegalStateException e) {, +      assertThat(e).hasMessage("Endpoint required.");, +    }, +  }, +, +  @Test public void endpointNullThrows() {, +    try {, +      new Retrofit.Builder().endpoint((String) null);]