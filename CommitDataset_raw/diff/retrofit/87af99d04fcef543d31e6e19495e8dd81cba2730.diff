[+++ b/retrofit/src/main/java/retrofit/Call.java, +++ b/retrofit/src/main/java/retrofit/Call.java, +++ b/retrofit/src/main/java/retrofit/CallAdapter.java, +     * Returns a call adapter for interface methods that return {@code returnType}, or null if this, +     * factory doesn't adapt that type., +++ b/retrofit/src/main/java/retrofit/Call.java, +++ b/retrofit/src/main/java/retrofit/CallAdapter.java, +     * Returns a call adapter for interface methods that return {@code returnType}, or null if this, +     * factory doesn't adapt that type., +++ b/retrofit/src/main/java/retrofit/Callback.java, + * @param <T> expected response type, +  /** Successful HTTP response. */, +  /** Invoked when a network or unexpected exception occurred during the HTTP request. */, +++ b/retrofit/src/main/java/retrofit/Call.java, +++ b/retrofit/src/main/java/retrofit/CallAdapter.java, +     * Returns a call adapter for interface methods that return {@code returnType}, or null if this, +     * factory doesn't adapt that type., +++ b/retrofit/src/main/java/retrofit/Callback.java, + * @param <T> expected response type, +  /** Successful HTTP response. */, +  /** Invoked when a network or unexpected exception occurred during the HTTP request. */, +++ b/retrofit/src/main/java/retrofit/Converter.java, + * Convert objects to and from their representation as HTTP bodies. Register a converter with, + * Retrofit using {@link Retrofit.Builder#addConverterFactory(Factory)}., +     * Create a {@link Converter} for converting an HTTP response body to {@code type} or null if it, +     * cannot be handled by this factory., +     * Create a {@link Converter} for converting {@code type} to an HTTP request body or null if it, +     * cannot be handled by this factory., +++ b/retrofit/src/main/java/retrofit/Call.java, +++ b/retrofit/src/main/java/retrofit/CallAdapter.java, +     * Returns a call adapter for interface methods that return {@code returnType}, or null if this, +     * factory doesn't adapt that type., +++ b/retrofit/src/main/java/retrofit/Callback.java, + * @param <T> expected response type, +  /** Successful HTTP response. */, +  /** Invoked when a network or unexpected exception occurred during the HTTP request. */, +++ b/retrofit/src/main/java/retrofit/Converter.java, + * Convert objects to and from their representation as HTTP bodies. Register a converter with, + * Retrofit using {@link Retrofit.Builder#addConverterFactory(Factory)}., +     * Create a {@link Converter} for converting an HTTP response body to {@code type} or null if it, +     * cannot be handled by this factory., +     * Create a {@link Converter} for converting {@code type} to an HTTP request body or null if it, +     * cannot be handled by this factory., +++ b/retrofit/src/main/java/retrofit/Response.java, +/** An HTTP response. */, +  /** Create a synthetic successful response with {@code body} as the deserialized body. */, +        .message("OK"), +        .request(new com.squareup.okhttp.Request.Builder().url("http://localhost").build()), +   * Create a successful response from {@code rawResponse} with {@code body} as the deserialized, +   * body., +    if (rawResponse == null) throw new NullPointerException("rawResponse == null");, +    if (!rawResponse.isSuccessful()) {, +      throw new IllegalArgumentException("rawResponse must be successful response");, +    }, +   * Create a synthetic error response with an HTTP status code of {@code code} and {@code body}, +   * as the error body., +    if (code < 400) throw new IllegalArgumentException("code < 400: " + code);, +        .request(new com.squareup.okhttp.Request.Builder().url("http://localhost").build()), +  /** Create an error response from {@code rawResponse} with {@code body} as the error body. */, +    if (body == null) throw new NullPointerException("body == null");, +    if (rawResponse == null) throw new NullPointerException("rawResponse == null");, +    if (rawResponse.isSuccessful()) {, +      throw new IllegalArgumentException("rawResponse should not be successful response");, +    }, +    this.rawResponse = rawResponse;, +  /** HTTP status message or null if unknown. */, +  /** HTTP headers. */, +++ b/retrofit/src/main/java/retrofit/Call.java, +++ b/retrofit/src/main/java/retrofit/CallAdapter.java, +     * Returns a call adapter for interface methods that return {@code returnType}, or null if this, +     * factory doesn't adapt that type., +++ b/retrofit/src/main/java/retrofit/Callback.java, + * @param <T> expected response type, +  /** Successful HTTP response. */, +  /** Invoked when a network or unexpected exception occurred during the HTTP request. */, +++ b/retrofit/src/main/java/retrofit/Converter.java, + * Convert objects to and from their representation as HTTP bodies. Register a converter with, + * Retrofit using {@link Retrofit.Builder#addConverterFactory(Factory)}., +     * Create a {@link Converter} for converting an HTTP response body to {@code type} or null if it, +     * cannot be handled by this factory., +     * Create a {@link Converter} for converting {@code type} to an HTTP request body or null if it, +     * cannot be handled by this factory., +++ b/retrofit/src/main/java/retrofit/Response.java, +/** An HTTP response. */, +  /** Create a synthetic successful response with {@code body} as the deserialized body. */, +        .message("OK"), +        .request(new com.squareup.okhttp.Request.Builder().url("http://localhost").build()), +   * Create a successful response from {@code rawResponse} with {@code body} as the deserialized, +   * body., +    if (rawResponse == null) throw new NullPointerException("rawResponse == null");, +    if (!rawResponse.isSuccessful()) {, +      throw new IllegalArgumentException("rawResponse must be successful response");, +    }, +   * Create a synthetic error response with an HTTP status code of {@code code} and {@code body}, +   * as the error body., +    if (code < 400) throw new IllegalArgumentException("code < 400: " + code);, +        .request(new com.squareup.okhttp.Request.Builder().url("http://localhost").build()), +  /** Create an error response from {@code rawResponse} with {@code body} as the error body. */, +    if (body == null) throw new NullPointerException("body == null");, +    if (rawResponse == null) throw new NullPointerException("rawResponse == null");]