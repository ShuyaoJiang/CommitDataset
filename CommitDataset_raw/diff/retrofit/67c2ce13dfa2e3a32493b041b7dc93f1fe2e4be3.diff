[+++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +          if (type.equals(Response.class)) {, +            return response;, +          }, +            throw RetrofitError.conversionError(url, response, converter, type, e);, +        throw RetrofitError.httpError(url, response, converter, type);, +++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +          if (type.equals(Response.class)) {, +            return response;, +          }, +            throw RetrofitError.conversionError(url, response, converter, type, e);, +        throw RetrofitError.httpError(url, response, converter, type);, +++ b/retrofit/src/main/java/retrofit/http/RetrofitError.java, +import retrofit.http.client.Response;, +    return new RetrofitError(url, null, null, null, true, exception);, +  static RetrofitError conversionError(String url, Response response, Converter converter,, +      Type successType, ConversionException exception) {, +    return new RetrofitError(url, response, converter, successType, false, exception);, +  static RetrofitError httpError(String url, Response response, Converter converter,, +      Type successType) {, +    return new RetrofitError(url, response, converter, successType, false, null);, +    return new RetrofitError(url, null, null, null, false, exception);, +  private final Response response;, +  private RetrofitError(String url, Response response, Converter converter, Type successType,, +      boolean networkError, Throwable exception) {, +    this.response = response;, +  /** Response object containing status code, headers, body, etc. */, +  public Response getResponse() {, +    return response;, +    byte[] body = response.getBody();, +    byte[] body = response.getBody();, +++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +          if (type.equals(Response.class)) {, +            return response;, +          }, +            throw RetrofitError.conversionError(url, response, converter, type, e);, +        throw RetrofitError.httpError(url, response, converter, type);, +++ b/retrofit/src/main/java/retrofit/http/RetrofitError.java, +import retrofit.http.client.Response;, +    return new RetrofitError(url, null, null, null, true, exception);, +  static RetrofitError conversionError(String url, Response response, Converter converter,, +      Type successType, ConversionException exception) {, +    return new RetrofitError(url, response, converter, successType, false, exception);, +  static RetrofitError httpError(String url, Response response, Converter converter,, +      Type successType) {, +    return new RetrofitError(url, response, converter, successType, false, null);, +    return new RetrofitError(url, null, null, null, false, exception);, +  private final Response response;, +  private RetrofitError(String url, Response response, Converter converter, Type successType,, +      boolean networkError, Throwable exception) {, +    this.response = response;, +  /** Response object containing status code, headers, body, etc. */, +  public Response getResponse() {, +    return response;, +    byte[] body = response.getBody();, +    byte[] body = response.getBody();, +++ b/retrofit/src/test/java/retrofit/http/RestAdapterTest.java, +    @GET("/") Response direct();, +    @GET("/") void direct(Callback<Response> callback);, +      assertThat(e.getResponse().getStatus()).isEqualTo(200);, +      assertThat(e.getResponse().getBody()).isEqualTo("{".getBytes("UTF-8"));, +      assertThat(e.getResponse().getStatus()).isEqualTo(500);, +, +  @Test public void getResponseDirectly() throws Exception {, +    Response response = new Response(200, "OK", NO_HEADERS, null);, +    when(mockClient.execute(any(Request.class))) //, +        .thenReturn(response);, +    assertThat(example.direct()).isSameAs(response);, +  }, +, +  @Test public void getResponseDirectlyAsync() throws Exception {, +    Response response = new Response(200, "OK", NO_HEADERS, null);, +    when(mockClient.execute(any(Request.class))) //, +        .thenReturn(response);, +    Callback<Response> callback = mock(Callback.class);, +, +    example.direct(callback);, +, +    verify(mockRequestExecutor).execute(any(CallbackRunnable.class));, +    verify(mockCallbackExecutor).execute(any(Runnable.class));, +    verify(callback).success(eq(response));, +  }]