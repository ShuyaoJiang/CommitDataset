[+++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import java.lang.reflect.ParameterizedType;, +import java.net.URI;, +import java.util.LinkedHashSet;, +import java.util.Map;, +import java.util.Set;, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +import okhttp3.Headers;, +import okhttp3.HttpUrl;, +import okhttp3.MediaType;, +import okhttp3.MultipartBody;, +import okhttp3.RequestBody;, +import retrofit2.http.Body;, +import retrofit2.http.DELETE;, +import retrofit2.http.Field;, +import retrofit2.http.FieldMap;, +import retrofit2.http.FormUrlEncoded;, +import retrofit2.http.GET;, +import retrofit2.http.HEAD;, +import retrofit2.http.HTTP;, +import retrofit2.http.Header;, +import retrofit2.http.HeaderMap;, +import retrofit2.http.Multipart;, +import retrofit2.http.OPTIONS;, +import retrofit2.http.PATCH;, +import retrofit2.http.POST;, +import retrofit2.http.PUT;, +import retrofit2.http.Part;, +import retrofit2.http.PartMap;, +import retrofit2.http.Path;, +import retrofit2.http.Query;, +import retrofit2.http.QueryMap;, +import retrofit2.http.QueryName;, +import retrofit2.http.Url;, +  // Upper and lower characters, digits, underscores, and hyphens, starting with a character., +  static final String PARAM = "[a-zA-Z][a-zA-Z0-9_-]*";, +  static final Pattern PARAM_URL_REGEX = Pattern.compile("\\{(" + PARAM + ")\\}");, +  static final Pattern PARAM_NAME_REGEX = Pattern.compile(PARAM);, +, +, +  private final HttpUrl baseUrl;, +  private final String httpMethod;, +  private final String relativeUrl;, +  private final Headers headers;, +  private final MediaType contentType;, +  private final boolean hasBody;, +  private final boolean isFormEncoded;, +  private final boolean isMultipart;, +  private final ParameterHandler<?>[] parameterHandlers;, +    this.callFactory = builder.retrofit.callFactory();, +    this.callAdapter = builder.callAdapter;, +    this.baseUrl = builder.retrofit.baseUrl();, +    this.responseConverter = builder.responseConverter;, +    this.httpMethod = builder.httpMethod;, +    this.relativeUrl = builder.relativeUrl;, +    this.headers = builder.headers;, +    this.contentType = builder.contentType;, +    this.hasBody = builder.hasBody;, +    this.isFormEncoded = builder.isFormEncoded;, +    this.isMultipart = builder.isMultipart;, +    this.parameterHandlers = builder.parameterHandlers;, +  okhttp3.Call toCall(@Nullable Object... args) throws IOException {, +    RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,, +        contentType, hasBody, isFormEncoded, isMultipart);, +, +    @SuppressWarnings("unchecked") // It is an error to invoke a method with the wrong arg types., +    ParameterHandler<Object>[] handlers = (ParameterHandler<Object>[]) parameterHandlers;, +, +    int argumentCount = args != null ? args.length : 0;, +    if (argumentCount != handlers.length) {, +      throw new IllegalArgumentException("Argument count (" + argumentCount, +          + ") doesn't match expected count (" + handlers.length + ")");, +    }, +, +    for (int p = 0; p < argumentCount; p++) {, +      handlers[p].apply(requestBuilder, args[p]);, +    }, +, +    return callFactory.newCall(requestBuilder.build());, +    final Annotation[] methodAnnotations;, +    final Annotation[][] parameterAnnotationsArray;, +    final Type[] parameterTypes;, +    boolean gotField;, +    boolean gotPart;, +    boolean gotBody;, +    boolean gotPath;, +    boolean gotQuery;, +    boolean gotUrl;, +    String httpMethod;, +    boolean hasBody;, +    boolean isFormEncoded;, +    boolean isMultipart;, +    String relativeUrl;, +    Headers headers;, +    MediaType contentType;, +    Set<String> relativeUrlParamNames;, +    ParameterHandler<?>[] parameterHandlers;]