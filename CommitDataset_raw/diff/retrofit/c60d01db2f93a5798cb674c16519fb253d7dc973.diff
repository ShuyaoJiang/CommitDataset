[+++ b/retrofit/src/main/java/retrofit/converter/GsonConverter.java, +  private String charset;, +   * decoding from JSON (when no charset is specified by a header) will use the specified charset., +  public GsonConverter(Gson gson, String charset) {, +    this.charset = charset;, +    String charset = this.charset;, +      charset = MimeUtil.parseCharset(body.mimeType(), charset);, +      return new JsonTypedOutput(gson.toJson(object).getBytes(charset), charset);, +++ b/retrofit/src/main/java/retrofit/converter/GsonConverter.java, +  private String charset;, +   * decoding from JSON (when no charset is specified by a header) will use the specified charset., +  public GsonConverter(Gson gson, String charset) {, +    this.charset = charset;, +    String charset = this.charset;, +      charset = MimeUtil.parseCharset(body.mimeType(), charset);, +      return new JsonTypedOutput(gson.toJson(object).getBytes(charset), charset);, +++ b/retrofit/src/main/java/retrofit/mime/MimeUtil.java, +  /**, +   * Parse the MIME type from a {@code Content-Type} header value or default to "UTF-8"., +   *, +   * @deprecated Use {@link #parseCharset(String, String)}., +   */, +  @Deprecated, +    return parseCharset(mimeType, "UTF-8");, +  }, +, +  /** Parse the MIME type from a {@code Content-Type} header value. */, +  public static String parseCharset(String mimeType, String defaultCharset) {, +    return defaultCharset;, +++ b/retrofit/src/main/java/retrofit/converter/GsonConverter.java, +  private String charset;, +   * decoding from JSON (when no charset is specified by a header) will use the specified charset., +  public GsonConverter(Gson gson, String charset) {, +    this.charset = charset;, +    String charset = this.charset;, +      charset = MimeUtil.parseCharset(body.mimeType(), charset);, +      return new JsonTypedOutput(gson.toJson(object).getBytes(charset), charset);, +++ b/retrofit/src/main/java/retrofit/mime/MimeUtil.java, +  /**, +   * Parse the MIME type from a {@code Content-Type} header value or default to "UTF-8"., +   *, +   * @deprecated Use {@link #parseCharset(String, String)}., +   */, +  @Deprecated, +    return parseCharset(mimeType, "UTF-8");, +  }, +, +  /** Parse the MIME type from a {@code Content-Type} header value. */, +  public static String parseCharset(String mimeType, String defaultCharset) {, +    return defaultCharset;, +++ b/retrofit/src/test/java/retrofit/mime/MimeUtilTest.java, +    assertThat(parseCharset("text/plain;charset=utf-8", "ERROR")).isEqualToIgnoringCase("UTF-8");, +    assertThat(parseCharset("text/plain; charset=utf-8", "ERROR")).isEqualToIgnoringCase("UTF-8");, +    assertThat(parseCharset("text/plain;  charset=utf-8", "ERROR")).isEqualToIgnoringCase("UTF-8");, +    assertThat(parseCharset("text/plain; \tcharset=utf-8", "ERROR")).isEqualToIgnoringCase("UTF-8");, +    assertThat(parseCharset("text/plain; \r\n\tcharset=utf-8", "ERROR")).isEqualToIgnoringCase("UTF-8");, +    assertThat(parseCharset("text/plain; CHARSET=utf-8", "ERROR")).isEqualToIgnoringCase("UTF-8");, +    assertThat(parseCharset("text/plain; charset=UTF-8", "ERROR")).isEqualToIgnoringCase("UTF-8");, +    assertThat(parseCharset("text/plain; charset=\"\\u\\tf-\\8\"", "ERROR")).isEqualToIgnoringCase("UTF-8");, +    assertThat(parseCharset("text/plain; charset=\"utf-8\"", "ERROR")).isEqualToIgnoringCase("UTF-8");, +    assertThat(parseCharset("text/plain;charset=utf-8;other=thing", "ERROR")).isEqualToIgnoringCase("UTF-8");, +    assertThat(parseCharset("text/plain; notthecharset=utf-16;", "UTF-8")).isEqualToIgnoringCase("UTF-8");, +  }, +, +  @Test public void oldCharsetParsing() {]