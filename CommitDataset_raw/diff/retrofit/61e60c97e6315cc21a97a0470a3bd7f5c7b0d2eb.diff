[+++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +        request = restAdapter.logAndReplaceRequest("MOCK", request, args);, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +        request = restAdapter.logAndReplaceRequest("MOCK", request, args);, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +    /** Log the basic information along with request and response objects via toString(). */, +    HEADERS_AND_ARGS,, +          request = logAndReplaceRequest("HTTP", request, args);, +            logResponseBody(body, convert);, +  Request logAndReplaceRequest(String name, Request request, Object[] args) throws IOException {, +        } else if (logLevel.ordinal() >= LogLevel.HEADERS_AND_ARGS.ordinal()) {, +          if (!request.getHeaders().isEmpty()) {, +            log.log("---> REQUEST:");, +          }, +          for (int i = 0; i < args.length; i++) {, +            log.log("#" + i + ": " + args[i].toString());, +          }, +  private void logResponseBody(TypedInput body, Object convert) {, +    if (logLevel.ordinal() == LogLevel.HEADERS_AND_ARGS.ordinal()) {, +      log.log("<--- BODY:");, +      log.log(convert.toString());, +    }, +  }, +, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +        request = restAdapter.logAndReplaceRequest("MOCK", request, args);, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +    /** Log the basic information along with request and response objects via toString(). */, +    HEADERS_AND_ARGS,, +          request = logAndReplaceRequest("HTTP", request, args);, +            logResponseBody(body, convert);, +  Request logAndReplaceRequest(String name, Request request, Object[] args) throws IOException {, +        } else if (logLevel.ordinal() >= LogLevel.HEADERS_AND_ARGS.ordinal()) {, +          if (!request.getHeaders().isEmpty()) {, +            log.log("---> REQUEST:");, +          }, +          for (int i = 0; i < args.length; i++) {, +            log.log("#" + i + ": " + args[i].toString());, +          }, +  private void logResponseBody(TypedInput body, Object convert) {, +    if (logLevel.ordinal() == LogLevel.HEADERS_AND_ARGS.ordinal()) {, +      log.log("<--- BODY:");, +      log.log(convert.toString());, +    }, +  }, +, +++ b/retrofit/src/main/java/retrofit/mime/TypedByteArray.java, +, +  public String toString() {, +    return "TypedByteArray[length=" + length() + "]";, +  }, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +        request = restAdapter.logAndReplaceRequest("MOCK", request, args);, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +    /** Log the basic information along with request and response objects via toString(). */, +    HEADERS_AND_ARGS,, +          request = logAndReplaceRequest("HTTP", request, args);, +            logResponseBody(body, convert);, +  Request logAndReplaceRequest(String name, Request request, Object[] args) throws IOException {, +        } else if (logLevel.ordinal() >= LogLevel.HEADERS_AND_ARGS.ordinal()) {, +          if (!request.getHeaders().isEmpty()) {, +            log.log("---> REQUEST:");, +          }, +          for (int i = 0; i < args.length; i++) {, +            log.log("#" + i + ": " + args[i].toString());, +          }, +  private void logResponseBody(TypedInput body, Object convert) {, +    if (logLevel.ordinal() == LogLevel.HEADERS_AND_ARGS.ordinal()) {, +      log.log("<--- BODY:");, +      log.log(convert.toString());, +    }, +  }, +, +++ b/retrofit/src/main/java/retrofit/mime/TypedByteArray.java, +, +  public String toString() {, +    return "TypedByteArray[length=" + length() + "]";, +  }, +++ b/retrofit/src/main/java/retrofit/mime/TypedString.java, +, +, +  public String toString() {, +    try {, +      return "TypedString[" + new String(getBytes(), "UTF-8") + "]";, +    } catch (UnsupportedEncodingException e) {, +      throw new AssertionError("Must be able to decode UTF-8");, +    }, +  }, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +        request = restAdapter.logAndReplaceRequest("MOCK", request, args);, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +    /** Log the basic information along with request and response objects via toString(). */, +    HEADERS_AND_ARGS,, +          request = logAndReplaceRequest("HTTP", request, args);, +            logResponseBody(body, convert);, +  Request logAndReplaceRequest(String name, Request request, Object[] args) throws IOException {, +        } else if (logLevel.ordinal() >= LogLevel.HEADERS_AND_ARGS.ordinal()) {, +          if (!request.getHeaders().isEmpty()) {, +            log.log("---> REQUEST:");, +          }]