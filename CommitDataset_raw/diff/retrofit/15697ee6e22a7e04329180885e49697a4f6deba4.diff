[+++ b/retrofit/src/main/java/retrofit/http/HttpMethodType.java, +    @Override HttpUriRequest createFrom(HttpRequestBuilder builder) throws URISyntaxException {, +    @Override HttpUriRequest createFrom(HttpRequestBuilder builder) throws URISyntaxException {, +    @Override HttpUriRequest createFrom(HttpRequestBuilder builder) throws URISyntaxException {, +    @Override HttpUriRequest createFrom(HttpRequestBuilder builder) throws URISyntaxException {, +  /** Create a request object from HttpRequestBuilder. */, +  abstract HttpUriRequest createFrom(HttpRequestBuilder builder) throws URISyntaxException;, +    return URIUtils.createURI(builder.getScheme(), builder.getHost(), -1, builder.getRelativePath(), null, null);, +  private static URI getParameterizedUri(HttpRequestBuilder builder) throws URISyntaxException {, +    String queryString = URLEncodedUtils.format(queryParams, HTTP.UTF_8);, +    return URIUtils.createURI(builder.getScheme(), builder.getHost(), -1, builder.getRelativePath(), queryString, null);, +  /** Adds all but the last method argument as parameters of HTTP request object. */, +  private static void addParams(HttpEntityEnclosingRequestBase request, HttpRequestBuilder builder) {, +    Annotation[][] parameterAnnotations = method.getParameterAnnotations();, +      MultipartEntity form = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);, +      if (TypedBytes.class.isAssignableFrom(parameterType) && !hasSingleEntityAnnotation(annotations)) {]