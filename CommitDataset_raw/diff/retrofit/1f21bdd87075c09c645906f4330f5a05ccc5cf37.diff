[+++ b/pom.xml, +    <okhttp.version>2.5.0-SNAPSHOT</okhttp.version>, +++ b/pom.xml, +    <okhttp.version>2.5.0-SNAPSHOT</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/http/Part.java, + * <li>Other object types will be converted to an appropriate representation by calling {@link, + * retrofit.Converter#toBody(Object, java.lang.reflect.Type)}.</li>, +++ b/pom.xml, +    <okhttp.version>2.5.0-SNAPSHOT</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/http/Part.java, + * <li>Other object types will be converted to an appropriate representation by calling {@link, + * retrofit.Converter#toBody(Object, java.lang.reflect.Type)}.</li>, +++ b/retrofit/src/main/java/retrofit/http/PartMap.java, + * <li>Other object types will be converted to an appropriate representation by calling {@link, + * retrofit.Converter#toBody(Object, java.lang.reflect.Type)}.</li>, +++ b/pom.xml, +    <okhttp.version>2.5.0-SNAPSHOT</okhttp.version>, +++ b/retrofit/src/main/java/retrofit/http/Part.java, + * <li>Other object types will be converted to an appropriate representation by calling {@link, + * retrofit.Converter#toBody(Object, java.lang.reflect.Type)}.</li>, +++ b/retrofit/src/main/java/retrofit/http/PartMap.java, + * <li>Other object types will be converted to an appropriate representation by calling {@link, + * retrofit.Converter#toBody(Object, java.lang.reflect.Type)}.</li>, +++ b/retrofit/src/test/java/retrofit/CallTest.java, +import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_DURING_RESPONSE_BODY;, +    server.enqueue(new MockResponse(), +        .setBody("1234"), +        .setSocketPolicy(DISCONNECT_DURING_RESPONSE_BODY));, +    Call<ResponseBody> buffered = example.getBody();, +    // When buffering we will detect all socket problems before returning the Response., +    try {, +      buffered.execute();, +      fail();, +    } catch (IOException e) {, +      assertThat(e).hasMessage("unexpected end of stream");, +    }, +    server.enqueue(new MockResponse(), +        .setBody("1234"), +        .setSocketPolicy(DISCONNECT_DURING_RESPONSE_BODY));, +    ResponseBody streamedBody = response.body();, +    // When streaming we only detect socket problems as the ResponseBody is read., +    try {, +      streamedBody.string();, +      fail();, +    } catch (IOException e) {, +      assertThat(e).hasMessage("unexpected end of stream");, +    }]