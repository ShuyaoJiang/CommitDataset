[+++ b/pom.xml, +++ b/pom.xml, +++ b/retrofit-mock/pom.xml, +++ b/pom.xml, +++ b/retrofit-mock/pom.xml, +++ b/retrofit/pom.xml, +++ b/pom.xml, +++ b/retrofit-mock/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/test/java/retrofit2/CallTest.java, +    final Converter<ResponseBody, String> converter = new Converter<ResponseBody, String>() {, +      @Override public String convert(ResponseBody value) {, +        throw new AssertionError();, +    };, +    final Converter<ResponseBody, String> converter = new Converter<ResponseBody, String>() {, +      @Override public String convert(ResponseBody value) {, +        throw new AssertionError();, +    };, +++ b/pom.xml, +++ b/retrofit-mock/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/test/java/retrofit2/CallTest.java, +    final Converter<ResponseBody, String> converter = new Converter<ResponseBody, String>() {, +      @Override public String convert(ResponseBody value) {, +        throw new AssertionError();, +    };, +    final Converter<ResponseBody, String> converter = new Converter<ResponseBody, String>() {, +      @Override public String convert(ResponseBody value) {, +        throw new AssertionError();, +    };, +++ b/retrofit/src/test/java/retrofit2/DefaultCallAdapterFactoryTest.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import org.jetbrains.annotations.NotNull;, +import static org.junit.Assert.assertTrue;, +  private final CallAdapter.Factory factory = new DefaultCallAdapterFactory(new Executor() {, +    @Override public void execute(@NotNull Runnable command) {, +      command.run();, +      @Override public Response<String> execute() {, +    final AtomicBoolean cloned = new AtomicBoolean();, +    Call<String> delegate = new EmptyCall() {, +      @Override public Call<String> clone() {, +        cloned.set(true);, +        return this;, +      }, +    };, +    assertThat(call.clone()).isNotSameAs(call);, +    assertTrue(cloned.get());, +    final AtomicBoolean canceled = new AtomicBoolean();, +    Call<String> delegate = new EmptyCall() {, +      @Override public void cancel() {, +        canceled.set(true);, +      }, +    };, +    assertTrue(canceled.get());, +++ b/pom.xml, +++ b/retrofit-mock/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/test/java/retrofit2/CallTest.java, +    final Converter<ResponseBody, String> converter = new Converter<ResponseBody, String>() {, +      @Override public String convert(ResponseBody value) {, +        throw new AssertionError();, +    };, +    final Converter<ResponseBody, String> converter = new Converter<ResponseBody, String>() {, +      @Override public String convert(ResponseBody value) {, +        throw new AssertionError();, +    };, +++ b/retrofit/src/test/java/retrofit2/DefaultCallAdapterFactoryTest.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import org.jetbrains.annotations.NotNull;, +import static org.junit.Assert.assertTrue;, +  private final CallAdapter.Factory factory = new DefaultCallAdapterFactory(new Executor() {, +    @Override public void execute(@NotNull Runnable command) {, +      command.run();, +      @Override public Response<String> execute() {, +    final AtomicBoolean cloned = new AtomicBoolean();, +    Call<String> delegate = new EmptyCall() {, +      @Override public Call<String> clone() {, +        cloned.set(true);, +        return this;, +      }, +    };, +    assertThat(call.clone()).isNotSameAs(call);, +    assertTrue(cloned.get());, +    final AtomicBoolean canceled = new AtomicBoolean();, +    Call<String> delegate = new EmptyCall() {, +      @Override public void cancel() {, +        canceled.set(true);, +      }, +    };, +    assertTrue(canceled.get());, +++ b/retrofit/src/test/java/retrofit2/RetrofitTest.java, +import org.jetbrains.annotations.NotNull;, +import static org.junit.Assert.assertNotNull;, +    CallAdapter.Factory callAdapter = new CallAdapter.Factory() {, +      @Nullable @Override, +      public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +        throw new AssertionError();, +      }, +    };, +    Converter.Factory converter = new Converter.Factory() {};]