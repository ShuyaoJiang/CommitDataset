[+++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import retrofit.io.MimeType;, +  static final MimeType JSON = new MimeType("application/json", "json");, +, +    @Override public MimeType mimeType() {, +      return JSON;, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import retrofit.io.MimeType;, +  static final MimeType JSON = new MimeType("application/json", "json");, +, +    @Override public MimeType mimeType() {, +      return JSON;, +++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +          if (type.equals(Response.class)) {, +            return response;, +          }, +            throw RetrofitError.conversionError(url, response, converter, type, e);, +        throw RetrofitError.httpError(url, response, converter, type);, +      contentType = body.mimeType().mimeName();, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import retrofit.io.MimeType;, +  static final MimeType JSON = new MimeType("application/json", "json");, +, +    @Override public MimeType mimeType() {, +      return JSON;, +++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +          if (type.equals(Response.class)) {, +            return response;, +          }, +            throw RetrofitError.conversionError(url, response, converter, type, e);, +        throw RetrofitError.httpError(url, response, converter, type);, +      contentType = body.mimeType().mimeName();, +++ b/retrofit/src/main/java/retrofit/http/RetrofitError.java, +import retrofit.http.client.Response;, +    return new RetrofitError(url, null, null, null, true, exception);, +  static RetrofitError conversionError(String url, Response response, Converter converter,, +      Type successType, ConversionException exception) {, +    return new RetrofitError(url, response, converter, successType, false, exception);, +  static RetrofitError httpError(String url, Response response, Converter converter,, +      Type successType) {, +    return new RetrofitError(url, response, converter, successType, false, null);, +    return new RetrofitError(url, null, null, null, false, exception);, +  private final Response response;, +  private RetrofitError(String url, Response response, Converter converter, Type successType,, +      boolean networkError, Throwable exception) {, +    this.response = response;, +  /** Response object containing status code, headers, body, etc. */, +  public Response getResponse() {, +    return response;, +    byte[] body = response.getBody();, +    byte[] body = response.getBody();, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import retrofit.io.MimeType;, +  static final MimeType JSON = new MimeType("application/json", "json");, +, +    @Override public MimeType mimeType() {, +      return JSON;, +++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +          if (type.equals(Response.class)) {, +            return response;, +          }, +            throw RetrofitError.conversionError(url, response, converter, type, e);, +        throw RetrofitError.httpError(url, response, converter, type);, +      contentType = body.mimeType().mimeName();, +++ b/retrofit/src/main/java/retrofit/http/RetrofitError.java, +import retrofit.http.client.Response;, +    return new RetrofitError(url, null, null, null, true, exception);, +  static RetrofitError conversionError(String url, Response response, Converter converter,, +      Type successType, ConversionException exception) {, +    return new RetrofitError(url, response, converter, successType, false, exception);, +  static RetrofitError httpError(String url, Response response, Converter converter,, +      Type successType) {, +    return new RetrofitError(url, response, converter, successType, false, null);, +    return new RetrofitError(url, null, null, null, false, exception);, +  private final Response response;, +  private RetrofitError(String url, Response response, Converter converter, Type successType,, +      boolean networkError, Throwable exception) {, +    this.response = response;, +  /** Response object containing status code, headers, body, etc. */, +  public Response getResponse() {, +    return response;, +    byte[] body = response.getBody();, +    byte[] body = response.getBody();, +++ b/retrofit/src/main/java/retrofit/http/client/ApacheClient.java, +    private final String name;, +      super(typedBytes.mimeType().mimeName());, +, +      String name = baseName;, +      String ext = typedBytes.mimeType().extension();, +      if (ext != null) {, +        name += "." + ext;, +      }, +      this.name = name;, +      return name;, +      setContentType(typedBytes.mimeType().mimeName());, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import retrofit.io.MimeType;, +  static final MimeType JSON = new MimeType("application/json", "json");, +, +    @Override public MimeType mimeType() {]