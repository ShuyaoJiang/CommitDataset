[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .callAdapterFactory(ObservableCallAdapterFactory.create()), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .callAdapterFactory(ObservableCallAdapterFactory.create()), +++ b/retrofit/src/main/java/retrofit/MethodInfo.java, +  final CallAdapter.Factory adapterFactory;, +  MethodInfo(Method method, CallAdapter.Factory adapterFactory, Converter converter) {, +    this.adapterFactory = adapterFactory;, +    CallAdapter adapter = adapterFactory.get(returnType);, +      throw methodError(, +          "Registered call adapter factory was unable to handle return type " + returnType);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .callAdapterFactory(ObservableCallAdapterFactory.create()), +++ b/retrofit/src/main/java/retrofit/MethodInfo.java, +  final CallAdapter.Factory adapterFactory;, +  MethodInfo(Method method, CallAdapter.Factory adapterFactory, Converter converter) {, +    this.adapterFactory = adapterFactory;, +    CallAdapter adapter = adapterFactory.get(returnType);, +      throw methodError(, +          "Registered call adapter factory was unable to handle return type " + returnType);, +++ b/retrofit/src/main/java/retrofit/Platform.java, +  CallAdapter.Factory defaultCallAdapterFactory() {, +    return new DefaultCallAdapterFactory(new Utils.SynchronousExecutor());, +  static class Android extends Platform {, +    CallAdapter.Factory defaultCallAdapterFactory() {, +      return new DefaultCallAdapterFactory(new MainThreadExecutor());, +    }, +, +    static class MainThreadExecutor implements Executor {, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .callAdapterFactory(ObservableCallAdapterFactory.create()), +++ b/retrofit/src/main/java/retrofit/MethodInfo.java, +  final CallAdapter.Factory adapterFactory;, +  MethodInfo(Method method, CallAdapter.Factory adapterFactory, Converter converter) {, +    this.adapterFactory = adapterFactory;, +    CallAdapter adapter = adapterFactory.get(returnType);, +      throw methodError(, +          "Registered call adapter factory was unable to handle return type " + returnType);, +++ b/retrofit/src/main/java/retrofit/Platform.java, +  CallAdapter.Factory defaultCallAdapterFactory() {, +    return new DefaultCallAdapterFactory(new Utils.SynchronousExecutor());, +  static class Android extends Platform {, +    CallAdapter.Factory defaultCallAdapterFactory() {, +      return new DefaultCallAdapterFactory(new MainThreadExecutor());, +    }, +, +    static class MainThreadExecutor implements Executor {, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +  private final CallAdapter.Factory adapterFactory;, +      CallAdapter.Factory adapterFactory) {, +    this.adapterFactory = adapterFactory;, +          methodInfo = new MethodInfo(method, adapterFactory, converter);, +  public CallAdapter.Factory callAdapterFactory() {, +    return adapterFactory;, +    private CallAdapter.Factory adapterFactory;, +    public Builder callAdapterFactory(CallAdapter.Factory adapterFactory) {, +      this.adapterFactory = checkNotNull(adapterFactory, "adapterFactory == null");, +      if (adapterFactory == null) {, +        adapterFactory = Platform.get().defaultCallAdapterFactory();, +      return new RestAdapter(client, endpoint, converter, adapterFactory);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .callAdapterFactory(ObservableCallAdapterFactory.create()), +++ b/retrofit/src/main/java/retrofit/MethodInfo.java, +  final CallAdapter.Factory adapterFactory;, +  MethodInfo(Method method, CallAdapter.Factory adapterFactory, Converter converter) {, +    this.adapterFactory = adapterFactory;, +    CallAdapter adapter = adapterFactory.get(returnType);, +      throw methodError(, +          "Registered call adapter factory was unable to handle return type " + returnType);, +++ b/retrofit/src/main/java/retrofit/Platform.java, +  CallAdapter.Factory defaultCallAdapterFactory() {, +    return new DefaultCallAdapterFactory(new Utils.SynchronousExecutor());, +  static class Android extends Platform {, +    CallAdapter.Factory defaultCallAdapterFactory() {, +      return new DefaultCallAdapterFactory(new MainThreadExecutor());, +    }, +, +    static class MainThreadExecutor implements Executor {, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +  private final CallAdapter.Factory adapterFactory;, +      CallAdapter.Factory adapterFactory) {, +    this.adapterFactory = adapterFactory;, +          methodInfo = new MethodInfo(method, adapterFactory, converter);, +  public CallAdapter.Factory callAdapterFactory() {, +    return adapterFactory;, +    private CallAdapter.Factory adapterFactory;, +    public Builder callAdapterFactory(CallAdapter.Factory adapterFactory) {, +      this.adapterFactory = checkNotNull(adapterFactory, "adapterFactory == null");, +      if (adapterFactory == null) {, +        adapterFactory = Platform.get().defaultCallAdapterFactory();, +      return new RestAdapter(client, endpoint, converter, adapterFactory);, +++ b/retrofit/src/test/java/retrofit/MethodInfoTest.java, +  private static CallAdapter.Factory FACTORY =, +      new DefaultCallAdapterFactory(Executors.newSingleThreadExecutor());, +    MethodInfo methodInfo = new MethodInfo(method, FACTORY, CONVERTER);, +    MethodInfo methodInfo = new MethodInfo(method, FACTORY, CONVERTER);, +    MethodInfo methodInfo = new MethodInfo(method, FACTORY, CONVERTER);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +        .callAdapterFactory(ObservableCallAdapterFactory.create()), +++ b/retrofit/src/main/java/retrofit/MethodInfo.java]