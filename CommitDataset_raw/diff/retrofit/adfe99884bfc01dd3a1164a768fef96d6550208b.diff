[+++ b/retrofit/src/main/java/retrofit2/Converter.java, +     * {@link Header @Header}, {@link HeaderMap @HeaderMap}, {@link Path @Path},, +     * {@link Query @Query}, and {@link QueryMap @QueryMap} values., +++ b/retrofit/src/main/java/retrofit2/Converter.java, +     * {@link Header @Header}, {@link HeaderMap @HeaderMap}, {@link Path @Path},, +     * {@link Query @Query}, and {@link QueryMap @QueryMap} values., +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +  static final class HeaderMap<T> extends ParameterHandler<Map<String, T>> {, +    private final Converter<T, String> valueConverter;, +, +    HeaderMap(Converter<T, String> valueConverter) {, +      this.valueConverter = valueConverter;, +    }, +, +    @Override void apply(RequestBuilder builder, Map<String, T> value) throws IOException {, +      if (value == null) {, +        throw new IllegalArgumentException("Header map was null.");, +      }, +, +      for (Map.Entry<String, T> entry : value.entrySet()) {, +        String headerName = entry.getKey();, +        if (headerName == null) {, +          throw new IllegalArgumentException("Header map contained null key.");, +        }, +        T headerValue = entry.getValue();, +        if (headerValue == null) {, +          throw new IllegalArgumentException(, +              "Header map contained null value for key '" + headerName + "'.");, +        }, +        builder.addHeader(headerName, valueConverter.convert(headerValue));, +      }, +    }, +  }, +, +++ b/retrofit/src/main/java/retrofit2/Converter.java, +     * {@link Header @Header}, {@link HeaderMap @HeaderMap}, {@link Path @Path},, +     * {@link Query @Query}, and {@link QueryMap @QueryMap} values., +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +  static final class HeaderMap<T> extends ParameterHandler<Map<String, T>> {, +    private final Converter<T, String> valueConverter;, +, +    HeaderMap(Converter<T, String> valueConverter) {, +      this.valueConverter = valueConverter;, +    }, +, +    @Override void apply(RequestBuilder builder, Map<String, T> value) throws IOException {, +      if (value == null) {, +        throw new IllegalArgumentException("Header map was null.");, +      }, +, +      for (Map.Entry<String, T> entry : value.entrySet()) {, +        String headerName = entry.getKey();, +        if (headerName == null) {, +          throw new IllegalArgumentException("Header map contained null key.");, +        }, +        T headerValue = entry.getValue();, +        if (headerValue == null) {, +          throw new IllegalArgumentException(, +              "Header map contained null value for key '" + headerName + "'.");, +        }, +        builder.addHeader(headerName, valueConverter.convert(headerValue));, +      }, +    }, +  }, +, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import retrofit2.http.HeaderMap;, +      } else if (annotation instanceof HeaderMap) {, +        Class<?> rawParameterType = Utils.getRawType(type);, +        if (!Map.class.isAssignableFrom(rawParameterType)) {, +          throw parameterError(p, "@HeaderMap parameter type must be Map.");, +        }, +        Type mapType = Utils.getSupertype(type, rawParameterType, Map.class);, +        if (!(mapType instanceof ParameterizedType)) {, +          throw parameterError(p, "Map must include generic types (e.g., Map<String, String>)");, +        }, +        ParameterizedType parameterizedType = (ParameterizedType) mapType;, +        Type keyType = Utils.getParameterUpperBound(0, parameterizedType);, +        if (String.class != keyType) {, +          throw parameterError(p, "@HeaderMap keys must be of type String: " + keyType);, +        }, +        Type valueType = Utils.getParameterUpperBound(1, parameterizedType);, +        Converter<?, String> valueConverter =, +            retrofit.stringConverter(valueType, annotations);, +, +        return new ParameterHandler.HeaderMap<>(valueConverter);, +, +++ b/retrofit/src/main/java/retrofit2/Converter.java, +     * {@link Header @Header}, {@link HeaderMap @HeaderMap}, {@link Path @Path},, +     * {@link Query @Query}, and {@link QueryMap @QueryMap} values., +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +  static final class HeaderMap<T> extends ParameterHandler<Map<String, T>> {, +    private final Converter<T, String> valueConverter;, +, +    HeaderMap(Converter<T, String> valueConverter) {, +      this.valueConverter = valueConverter;, +    }, +, +    @Override void apply(RequestBuilder builder, Map<String, T> value) throws IOException {, +      if (value == null) {]