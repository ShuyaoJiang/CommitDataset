[+++ b/pom.xml, +    <rxjava.version>0.19.2</rxjava.version>, +    <jackson.version>2.4.1</jackson.version>, +    <wire.version>1.5.1</wire.version>, +    <assertj.version>1.6.1</assertj.version>, +    <guava.version>17.0</guava.version>, +++ b/pom.xml, +    <rxjava.version>0.19.2</rxjava.version>, +    <jackson.version>2.4.1</jackson.version>, +    <wire.version>1.5.1</wire.version>, +    <assertj.version>1.6.1</assertj.version>, +    <guava.version>17.0</guava.version>, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import retrofit.http.Body;, +import retrofit.http.EncodedPath;, +import retrofit.http.EncodedQuery;, +import retrofit.http.EncodedQueryMap;, +import retrofit.http.Field;, +import retrofit.http.FieldMap;, +import retrofit.http.Path;, +import retrofit.http.Query;, +import retrofit.http.QueryMap;, +    paramAnnotations = methodInfo.requestParamAnnotations;, +    addQueryParam(name, value, false, true);, +    addQueryParam(name, value, false, false);, +  private void addQueryParam(String name, Object value, boolean encodeName, boolean encodeValue) {, +    if (value instanceof Iterable) {, +      for (Object iterableValue : (Iterable<?>) value) {, +        if (iterableValue != null) { // Skip null values, +          addQueryParam(name, iterableValue.toString(), encodeName, encodeValue);, +        }, +      }, +    } else if (value.getClass().isArray()) {, +      for (int x = 0, arrayLength = Array.getLength(value); x < arrayLength; x++) {, +        Object arrayValue = Array.get(value, x);, +        if (arrayValue != null) { // Skip null values, +          addQueryParam(name, arrayValue.toString(), encodeName, encodeValue);, +        }, +      }, +    } else {, +      addQueryParam(name, value.toString(), encodeName, encodeValue);, +    }, +  }, +, +  private void addQueryParam(String name, String value, boolean encodeName, boolean encodeValue) {, +, +      if (encodeName) {, +        name = URLEncoder.encode(name, "UTF-8");, +      }, +      if (encodeValue) {, +        value = URLEncoder.encode(value, "UTF-8");, +      }, +  private void addQueryParamMap(int parameterNumber, Map<?, ?> map, boolean encodeNames,, +      boolean encodeValues) {, +    for (Map.Entry<?, ?> entry : map.entrySet()) {, +      Object entryKey = entry.getKey();, +      if (entryKey == null) {, +        throw new IllegalArgumentException(, +            "Parameter #" + (parameterNumber + 1) + " query map contained null key.");, +      }, +      Object entryValue = entry.getValue();, +      if (entryValue != null) { // Skip null values., +        addQueryParam(entryKey.toString(), entryValue.toString(), encodeNames, encodeValues);, +      }, +    }, +  }, +, +, +      Annotation annotation = paramAnnotations[i];, +      Class<? extends Annotation> annotationType = annotation.annotationType();, +      if (annotationType == Path.class) {, +        Path path = (Path) annotation;, +        String name = path.value();, +        addPathParam(name, value.toString(), path.encode());, +      } else if (annotationType == EncodedPath.class) {, +        String name = ((EncodedPath) annotation).value();, +        addPathParam(name, value.toString(), false);, +      } else if (annotationType == Query.class) {, +          Query query = (Query) annotation;, +          addQueryParam(query.value(), value, query.encodeName(), query.encodeValue());, +      } else if (annotationType == EncodedQuery.class) {, +          EncodedQuery query = (EncodedQuery) annotation;, +          addQueryParam(query.value(), value, false, false);, +      } else if (annotationType == QueryMap.class) {, +          QueryMap queryMap = (QueryMap) annotation;, +          addQueryParamMap(i, (Map<?, ?>) value, queryMap.encodeNames(), queryMap.encodeValues());, +        }, +      } else if (annotationType == EncodedQueryMap.class) {, +        if (value != null) { // Skip null values., +          addQueryParamMap(i, (Map<?, ?>) value, false, false);, +        }, +      } else if (annotationType == retrofit.http.Header.class) {, +        if (value != null) { // Skip null values., +          String name = ((retrofit.http.Header) annotation).value();, +      } else if (annotationType == Field.class) {, +        String name = ((Field) annotation).value();, +      } else if (annotationType == FieldMap.class) {, +            Object entryKey = entry.getKey();, +            if (entryKey == null) {, +              throw new IllegalArgumentException(]