[+++ b/checkstyle.xml, +    <module name="NewlineAtEndOfFile"/>, +++ b/checkstyle.xml, +    <module name="NewlineAtEndOfFile"/>, +++ b/retrofit-converters/scalars/src/main/java/retrofit2/converter/scalars/ScalarsConverterFactory.java, +    if (type == Boolean.class || type == boolean.class) {, +    if (type == Byte.class || type == byte.class) {, +    if (type == Character.class || type == char.class) {, +    if (type == Double.class || type == double.class) {, +    if (type == Float.class || type == float.class) {, +    if (type == Integer.class || type == int.class) {, +    if (type == Long.class || type == long.class) {, +    if (type == Short.class || type == short.class) {, +++ b/checkstyle.xml, +    <module name="NewlineAtEndOfFile"/>, +++ b/retrofit-converters/scalars/src/main/java/retrofit2/converter/scalars/ScalarsConverterFactory.java, +    if (type == Boolean.class || type == boolean.class) {, +    if (type == Byte.class || type == byte.class) {, +    if (type == Character.class || type == char.class) {, +    if (type == Double.class || type == double.class) {, +    if (type == Float.class || type == float.class) {, +    if (type == Integer.class || type == int.class) {, +    if (type == Long.class || type == long.class) {, +    if (type == Short.class || type == short.class) {, +++ b/retrofit-converters/scalars/src/test/java/retrofit2/converter/scalars/ScalarsConverterPrimitivesFactoryTest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2.converter.scalars;, +, +import java.io.IOException;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import retrofit2.Call;, +import retrofit2.CallAdapter;, +import retrofit2.Retrofit;, +import retrofit2.http.GET;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, +public final class ScalarsConverterPrimitivesFactoryTest {, +  interface Service {, +    @GET("/") boolean booleanPrimitive();, +    @GET("/") byte bytePrimitive();, +    @GET("/") char charPrimitive();, +    @GET("/") double doublePrimitive();, +    @GET("/") float floatPrimitive();, +    @GET("/") int integerPrimitive();, +    @GET("/") long longPrimitive();, +    @GET("/") short shortPrimitive();, +  }, +, +  static class DirectCallIOException extends RuntimeException {, +    DirectCallIOException(String message, IOException e) {, +      super(message, e);, +    }, +  }, +, +  static class DirectCallAdapterFactory extends CallAdapter.Factory {, +    @Override, +    public CallAdapter<?> get(final Type returnType, Annotation[] annotations, Retrofit retrofit) {, +      return new CallAdapter<Object>() {, +        @Override public Type responseType() {, +          return returnType;, +        }, +, +        @Override public Object adapt(Call call) {, +          try {, +            return call.execute().body();, +          } catch (IOException e) {, +            throw new DirectCallIOException(e.getMessage(), e);, +          }, +        }, +      };, +    }, +  }, +, +  @Rule public final MockWebServer server = new MockWebServer();, +, +  private Service service;, +, +  @Before public void setUp() {, +    Retrofit retrofit = new Retrofit.Builder()]