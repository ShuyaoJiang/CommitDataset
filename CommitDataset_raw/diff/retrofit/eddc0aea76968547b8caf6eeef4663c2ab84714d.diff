[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +  @Override, +  public CallAdapter<?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +  @Override, +  public CallAdapter<?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/RxJavaCallAdapterFactoryTest.java, +  private Retrofit retrofit;, +    retrofit = new Retrofit.Builder(), +    assertThat(factory.get(classType, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    assertThat(factory.get(wilcardType, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    assertThat(factory.get(genericType, NO_ANNOTATIONS, retrofit).responseType()), +    assertThat(factory.get(responseType, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    assertThat(factory.get(resultType, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    CallAdapter<?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +      factory.get(observableType, NO_ANNOTATIONS, retrofit);, +      factory.get(singleType, NO_ANNOTATIONS, retrofit);, +      factory.get(observableType, NO_ANNOTATIONS, retrofit);, +      factory.get(singleType, NO_ANNOTATIONS, retrofit);, +      factory.get(observableType, NO_ANNOTATIONS, retrofit);, +      factory.get(singleType, NO_ANNOTATIONS, retrofit);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +  @Override, +  public CallAdapter<?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/RxJavaCallAdapterFactoryTest.java, +  private Retrofit retrofit;, +    retrofit = new Retrofit.Builder(), +    assertThat(factory.get(classType, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    assertThat(factory.get(wilcardType, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    assertThat(factory.get(genericType, NO_ANNOTATIONS, retrofit).responseType()), +    assertThat(factory.get(responseType, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    assertThat(factory.get(resultType, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    CallAdapter<?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +      factory.get(observableType, NO_ANNOTATIONS, retrofit);, +      factory.get(singleType, NO_ANNOTATIONS, retrofit);, +      factory.get(observableType, NO_ANNOTATIONS, retrofit);, +      factory.get(singleType, NO_ANNOTATIONS, retrofit);, +      factory.get(observableType, NO_ANNOTATIONS, retrofit);, +      factory.get(singleType, NO_ANNOTATIONS, retrofit);, +++ b/retrofit/src/main/java/retrofit/CallAdapter.java, +    CallAdapter<?> get(Type returnType, Annotation[] annotations, Retrofit retrofit);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +  @Override, +  public CallAdapter<?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/RxJavaCallAdapterFactoryTest.java, +  private Retrofit retrofit;, +    retrofit = new Retrofit.Builder(), +    assertThat(factory.get(classType, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    assertThat(factory.get(wilcardType, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    assertThat(factory.get(genericType, NO_ANNOTATIONS, retrofit).responseType()), +    assertThat(factory.get(responseType, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    assertThat(factory.get(resultType, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    CallAdapter<?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +      factory.get(observableType, NO_ANNOTATIONS, retrofit);, +      factory.get(singleType, NO_ANNOTATIONS, retrofit);, +      factory.get(observableType, NO_ANNOTATIONS, retrofit);, +      factory.get(singleType, NO_ANNOTATIONS, retrofit);, +      factory.get(observableType, NO_ANNOTATIONS, retrofit);, +      factory.get(singleType, NO_ANNOTATIONS, retrofit);, +++ b/retrofit/src/main/java/retrofit/CallAdapter.java, +    CallAdapter<?> get(Type returnType, Annotation[] annotations, Retrofit retrofit);, +++ b/retrofit/src/main/java/retrofit/DefaultCallAdapter.java, +  static final Factory FACTORY = new Factory() {, +    @Override, +    public CallAdapter<?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +  @Override, +  public CallAdapter<?> get(Type returnType, Annotation[] annotations, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/RxJavaCallAdapterFactoryTest.java, +  private Retrofit retrofit;, +    retrofit = new Retrofit.Builder(), +    assertThat(factory.get(classType, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    assertThat(factory.get(wilcardType, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    assertThat(factory.get(genericType, NO_ANNOTATIONS, retrofit).responseType()), +    assertThat(factory.get(responseType, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    assertThat(factory.get(resultType, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    CallAdapter<?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +      factory.get(observableType, NO_ANNOTATIONS, retrofit);, +      factory.get(singleType, NO_ANNOTATIONS, retrofit);, +      factory.get(observableType, NO_ANNOTATIONS, retrofit);, +      factory.get(singleType, NO_ANNOTATIONS, retrofit);, +      factory.get(observableType, NO_ANNOTATIONS, retrofit);, +      factory.get(singleType, NO_ANNOTATIONS, retrofit);, +++ b/retrofit/src/main/java/retrofit/CallAdapter.java]