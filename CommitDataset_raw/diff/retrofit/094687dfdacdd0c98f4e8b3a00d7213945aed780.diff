[+++ b/retrofit/src/main/java/retrofit2/CallAdapter.java, +/**, + * Adapts a {@link Call} into the type of {@code T}. Instances are created by {@linkplain Factory a, + * factory} which is {@linkplain Retrofit.Builder#addCallAdapterFactory(Factory) installed} into, + * the {@link Retrofit} instance., + */, +   * <p>, +   * Note: This is typically not the same type as the {@code returnType} provided to this call, +   * adapter's factory., +  /**, +   * Returns an instance of {@code T} which delegates to {@code call}., +   * <p>, +   * For example, given an instance for a hypothetical utility, {@code Async}, this instance would, +   * return a new {@code Async<R>} which invoked {@code call} when run., +   * <pre>{@code, +   * &#64;Override, +   * public <R> Async<R> adapt(final Call<R> call) {, +   *   return Async.create(new Callable<Response<R>>() {, +   *     &#64;Override, +   *     public Response<R> call() throws Exception {, +   *       return call.execute();, +   *     }, +   *   });, +   * }, +   * }</pre>, +   */, +  /**, +   * Creates {@link CallAdapter} instances based on the return type of {@linkplain, +   * Retrofit#create(Class) the service interface} methods., +   */, +++ b/retrofit/src/main/java/retrofit2/CallAdapter.java, +/**, + * Adapts a {@link Call} into the type of {@code T}. Instances are created by {@linkplain Factory a, + * factory} which is {@linkplain Retrofit.Builder#addCallAdapterFactory(Factory) installed} into, + * the {@link Retrofit} instance., + */, +   * <p>, +   * Note: This is typically not the same type as the {@code returnType} provided to this call, +   * adapter's factory., +  /**, +   * Returns an instance of {@code T} which delegates to {@code call}., +   * <p>, +   * For example, given an instance for a hypothetical utility, {@code Async}, this instance would, +   * return a new {@code Async<R>} which invoked {@code call} when run., +   * <pre>{@code, +   * &#64;Override, +   * public <R> Async<R> adapt(final Call<R> call) {, +   *   return Async.create(new Callable<Response<R>>() {, +   *     &#64;Override, +   *     public Response<R> call() throws Exception {, +   *       return call.execute();, +   *     }, +   *   });, +   * }, +   * }</pre>, +   */, +  /**, +   * Creates {@link CallAdapter} instances based on the return type of {@linkplain, +   * Retrofit#create(Class) the service interface} methods., +   */, +++ b/retrofit/src/main/java/retrofit2/Converter.java, + * Convert objects to and from their representation in HTTP. Instances are created by {@linkplain, + * Factory a factory} which is {@linkplain Retrofit.Builder#addConverterFactory(Factory) installed}, + * into the {@link Retrofit} instance., +++ b/retrofit/src/main/java/retrofit2/CallAdapter.java, +/**, + * Adapts a {@link Call} into the type of {@code T}. Instances are created by {@linkplain Factory a, + * factory} which is {@linkplain Retrofit.Builder#addCallAdapterFactory(Factory) installed} into, + * the {@link Retrofit} instance., + */, +   * <p>, +   * Note: This is typically not the same type as the {@code returnType} provided to this call, +   * adapter's factory., +  /**, +   * Returns an instance of {@code T} which delegates to {@code call}., +   * <p>, +   * For example, given an instance for a hypothetical utility, {@code Async}, this instance would, +   * return a new {@code Async<R>} which invoked {@code call} when run., +   * <pre>{@code, +   * &#64;Override, +   * public <R> Async<R> adapt(final Call<R> call) {, +   *   return Async.create(new Callable<Response<R>>() {, +   *     &#64;Override, +   *     public Response<R> call() throws Exception {, +   *       return call.execute();, +   *     }, +   *   });, +   * }, +   * }</pre>, +   */, +  /**, +   * Creates {@link CallAdapter} instances based on the return type of {@linkplain, +   * Retrofit#create(Class) the service interface} methods., +   */, +++ b/retrofit/src/main/java/retrofit2/Converter.java, + * Convert objects to and from their representation in HTTP. Instances are created by {@linkplain, + * Factory a factory} which is {@linkplain Retrofit.Builder#addConverterFactory(Factory) installed}, + * into the {@link Retrofit} instance., +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +import retrofit2.http.Url;]