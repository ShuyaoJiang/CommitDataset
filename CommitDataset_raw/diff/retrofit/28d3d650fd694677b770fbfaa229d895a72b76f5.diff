[+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +import okhttp3.MultipartBody;, +  static final class RawPart extends ParameterHandler<MultipartBody.Part> {, +    static final RawPart INSTANCE = new RawPart();, +, +    private RawPart() {, +    }, +, +    @Override void apply(RequestBuilder builder, MultipartBody.Part value) throws IOException {, +      if (value != null) { // Skip null values., +        builder.addPart(value);, +      }, +    }, +  }, +, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +import okhttp3.MultipartBody;, +  static final class RawPart extends ParameterHandler<MultipartBody.Part> {, +    static final RawPart INSTANCE = new RawPart();, +, +    private RawPart() {, +    }, +, +    @Override void apply(RequestBuilder builder, MultipartBody.Part value) throws IOException {, +      if (value != null) { // Skip null values., +        builder.addPart(value);, +      }, +    }, +  }, +, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  void addPart(MultipartBody.Part part) {, +    multipartBuilder.addPart(part);, +  }, +, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +import okhttp3.MultipartBody;, +  static final class RawPart extends ParameterHandler<MultipartBody.Part> {, +    static final RawPart INSTANCE = new RawPart();, +, +    private RawPart() {, +    }, +, +    @Override void apply(RequestBuilder builder, MultipartBody.Part value) throws IOException {, +      if (value != null) { // Skip null values., +        builder.addPart(value);, +      }, +    }, +  }, +, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  void addPart(MultipartBody.Part part) {, +    multipartBuilder.addPart(part);, +  }, +, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +import okhttp3.MultipartBody;, +        gotPart = true;, +, +        String partName = part.value();, +        Class<?> rawParameterType = Utils.getRawType(type);, +        if (partName.isEmpty()) {, +          if (!MultipartBody.Part.class.isAssignableFrom(rawParameterType)) {, +            throw parameterError(p,, +                "@Part annotation must supply a name or use MultipartBody.Part parameter type.");, +          }, +, +          return ParameterHandler.RawPart.INSTANCE;, +        } else {, +          Headers headers =, +              Headers.of("Content-Disposition", "form-data; name=\"" + partName + "\"",, +            Converter<?, RequestBody> converter =, +                retrofit.requestBodyConverter(iterableType, annotations, methodAnnotations);, +          } else if (MultipartBody.Part.class.isAssignableFrom(rawParameterType)) {, +            throw parameterError(p, "@Part parameters using the MultipartBody.Part must not ", +                + "include a part name in the annotation.");, +        }, +, +, +        if (MultipartBody.Part.class.isAssignableFrom(Utils.getRawType(valueType))) {, +          throw parameterError(p, "@PartMap values cannot be MultipartBody.Part. ", +              + "Use @Part List<Part> or a different value type instead.");, +        }, +, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +import okhttp3.MultipartBody;, +  static final class RawPart extends ParameterHandler<MultipartBody.Part> {, +    static final RawPart INSTANCE = new RawPart();, +, +    private RawPart() {, +    }, +, +    @Override void apply(RequestBuilder builder, MultipartBody.Part value) throws IOException {, +      if (value != null) { // Skip null values., +        builder.addPart(value);, +      }, +    }, +  }, +, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java]