[+++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +  private MockRxSupport mockRxSupport;, +, +, +    if (Platform.HAS_RX_JAVA) {, +      mockRxSupport = new MockRxSupport(restAdapter);, +    }, +        return mockRxSupport.createMockObservable(this, methodInfo, interceptorTape, args);, +, +  /** Indirection to avoid VerifyError if RxJava isn't present. */, +  private static class MockRxSupport {, +    private final RestAdapter restAdapter;, +, +    MockRxSupport(RestAdapter restAdapter) {, +      this.restAdapter = restAdapter;, +    }, +, +    Observable createMockObservable(final MockHandler mockHandler, final RestMethodInfo methodInfo,, +        final RequestInterceptor interceptor, final Object[] args) {, +      return Observable.create(new Observable.OnSubscribeFunc<Object>() {, +        @Override public Subscription onSubscribe(Observer<? super Object> observer) {, +          try {, +            Observable observable =, +                (Observable) mockHandler.invokeSync(methodInfo, interceptor, args);, +            //noinspection unchecked, +            return observable.subscribe(observer);, +          } catch (Throwable throwable) {, +            return Observable.error(throwable).subscribe(observer);, +          }, +        }, +      }).subscribeOn(Schedulers.executor(restAdapter.httpExecutor));, +    }, +  }, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +  private MockRxSupport mockRxSupport;, +, +, +    if (Platform.HAS_RX_JAVA) {, +      mockRxSupport = new MockRxSupport(restAdapter);, +    }, +        return mockRxSupport.createMockObservable(this, methodInfo, interceptorTape, args);, +, +  /** Indirection to avoid VerifyError if RxJava isn't present. */, +  private static class MockRxSupport {, +    private final RestAdapter restAdapter;, +, +    MockRxSupport(RestAdapter restAdapter) {, +      this.restAdapter = restAdapter;, +    }, +, +    Observable createMockObservable(final MockHandler mockHandler, final RestMethodInfo methodInfo,, +        final RequestInterceptor interceptor, final Object[] args) {, +      return Observable.create(new Observable.OnSubscribeFunc<Object>() {, +        @Override public Subscription onSubscribe(Observer<? super Object> observer) {, +          try {, +            Observable observable =, +                (Observable) mockHandler.invokeSync(methodInfo, interceptor, args);, +            //noinspection unchecked, +            return observable.subscribe(observer);, +          } catch (Throwable throwable) {, +            return Observable.error(throwable).subscribe(observer);, +          }, +        }, +      }).subscribeOn(Schedulers.executor(restAdapter.httpExecutor));, +    }, +  }, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +  private final RxSupport rxSupport;, +    } else {, +      this.rxSupport = null;]