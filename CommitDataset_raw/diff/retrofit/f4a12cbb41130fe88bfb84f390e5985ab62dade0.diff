[+++ /dev/null, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/ExecutorCallAdapterFactory.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit;, +, +import java.io.IOException;, +import java.lang.reflect.Type;, +import java.util.concurrent.Executor;, +, +final class ExecutorCallAdapterFactory implements CallAdapter.Factory {, +  private final Executor callbackExecutor;, +, +  ExecutorCallAdapterFactory(Executor callbackExecutor) {, +    this.callbackExecutor = callbackExecutor;, +  }, +, +  @Override public String toString() {, +    return "ExecutorCallAdapterFactory[" + callbackExecutor + ']';, +  }, +, +  @Override public CallAdapter<?> get(Type returnType) {, +    if (Utils.getRawType(returnType) != Call.class) {, +      return null;, +    }, +    final Type responseType = Utils.getCallResponseType(returnType);, +    return new CallAdapter<Object>() {, +      @Override public Type responseType() {, +        return responseType;, +      }, +, +      @Override public Call<Object> adapt(Call<Object> call) {, +        return new ExecutorCallbackCall<>(callbackExecutor, call);, +      }, +    };, +  }, +, +  static final class ExecutorCallbackCall<T> implements Call<T> {, +    private final Executor callbackExecutor;, +    private final Call<T> delegate;, +, +    ExecutorCallbackCall(Executor callbackExecutor, Call<T> delegate) {, +      this.callbackExecutor = callbackExecutor;, +      this.delegate = delegate;, +    }, +, +    @Override public void enqueue(Callback<T> callback) {, +      delegate.enqueue(new ExecutorCallback<>(callbackExecutor, callback));, +    }, +, +    @Override public Response<T> execute() throws IOException {, +      return delegate.execute();, +    }, +, +    @Override public void cancel() {, +      delegate.cancel();, +    }, +, +    @SuppressWarnings("CloneDoesntCallSuperClone") // Performing deep clone., +    @Override public Call<T> clone() {, +      return new ExecutorCallbackCall<>(callbackExecutor, delegate.clone());, +    }, +  }, +, +  static final class ExecutorCallback<T> implements Callback<T> {, +    private final Executor callbackExecutor;, +    private final Callback<T> delegate;, +, +    ExecutorCallback(Executor callbackExecutor, Callback<T> delegate) {, +      this.callbackExecutor = callbackExecutor;, +      this.delegate = delegate;, +    }, +, +    @Override public void success(final Response<T> response) {, +      callbackExecutor.execute(new Runnable() {, +        @Override public void run() {, +          delegate.success(response);, +        }, +      });, +    }, +, +    @Override public void failure(final Throwable t) {, +      callbackExecutor.execute(new Runnable() {, +        @Override public void run() {, +          delegate.failure(t);, +        }]