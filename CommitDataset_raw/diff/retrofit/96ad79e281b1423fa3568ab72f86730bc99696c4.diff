[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CompletableHelper.java, +import rx.Scheduler;, +  static CallAdapter<Completable> createCallAdapter(Scheduler scheduler) {, +    return new CompletableCallAdapter(scheduler);, +, +  static class CompletableCallAdapter implements CallAdapter<Completable> {, +    private final Scheduler scheduler;, +, +    CompletableCallAdapter(Scheduler scheduler) {, +      this.scheduler = scheduler;, +    }, +, +    @Override public Type responseType() {, +      return Void.class;, +    }, +, +    @Override public Completable adapt(Call call) {, +      Completable completable = Completable.create(new CompletableCallOnSubscribe(call));, +      if (scheduler != null) {, +        return completable.subscribeOn(scheduler);, +      }, +      return completable;, +    }, +  }, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CompletableHelper.java, +import rx.Scheduler;, +  static CallAdapter<Completable> createCallAdapter(Scheduler scheduler) {, +    return new CompletableCallAdapter(scheduler);, +, +  static class CompletableCallAdapter implements CallAdapter<Completable> {, +    private final Scheduler scheduler;, +, +    CompletableCallAdapter(Scheduler scheduler) {, +      this.scheduler = scheduler;, +    }, +, +    @Override public Type responseType() {, +      return Void.class;, +    }, +, +    @Override public Completable adapt(Call call) {, +      Completable completable = Completable.create(new CompletableCallOnSubscribe(call));, +      if (scheduler != null) {, +        return completable.subscribeOn(scheduler);, +      }, +      return completable;, +    }, +  }, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +import rx.Scheduler;, +    return new RxJavaCallAdapterFactory(null);, +  /**, +   * TODO, +   */, +  public static RxJavaCallAdapterFactory createWithScheduler(Scheduler scheduler) {, +    if (scheduler == null) throw new NullPointerException("scheduler == null");, +    return new RxJavaCallAdapterFactory(scheduler);, +  }, +, +  private final Scheduler scheduler;, +, +  private RxJavaCallAdapterFactory(Scheduler scheduler) {, +    this.scheduler = scheduler;, +      return CompletableHelper.createCallAdapter(scheduler);, +    CallAdapter<Observable<?>> callAdapter = getCallAdapter(returnType, scheduler);, +  private CallAdapter<Observable<?>> getCallAdapter(Type returnType, Scheduler scheduler) {, +      return new ResponseCallAdapter(responseType, scheduler);, +      return new ResultCallAdapter(responseType, scheduler);, +    return new SimpleCallAdapter(observableType, scheduler);, +    private final Scheduler scheduler;, +    ResponseCallAdapter(Type responseType, Scheduler scheduler) {, +      this.scheduler = scheduler;, +      Observable<Response<R>> observable = Observable.create(new CallOnSubscribe<>(call));, +      if (scheduler != null) {, +        return observable.subscribeOn(scheduler);, +      }, +      return observable;, +    private final Scheduler scheduler;, +    SimpleCallAdapter(Type responseType, Scheduler scheduler) {, +      this.scheduler = scheduler;, +      Observable<R> observable = Observable.create(new CallOnSubscribe<>(call)) //, +      if (scheduler != null) {, +        return observable.subscribeOn(scheduler);, +      }, +      return observable;, +    private final Scheduler scheduler;, +    ResultCallAdapter(Type responseType, Scheduler scheduler) {, +      this.scheduler = scheduler;, +      Observable<Result<R>> observable = Observable.create(new CallOnSubscribe<>(call)) //, +          }).onErrorReturn(new Func1<Throwable, Result<R>>() {, +      if (scheduler != null) {, +        return observable.subscribeOn(scheduler);, +      }, +      return observable;, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CompletableHelper.java, +import rx.Scheduler;, +  static CallAdapter<Completable> createCallAdapter(Scheduler scheduler) {, +    return new CompletableCallAdapter(scheduler);, +, +  static class CompletableCallAdapter implements CallAdapter<Completable> {]