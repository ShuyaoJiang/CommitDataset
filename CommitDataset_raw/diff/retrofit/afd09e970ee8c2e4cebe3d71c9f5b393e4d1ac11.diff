[+++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.fasterxml.jackson.core.JsonParseException;, +import com.fasterxml.jackson.databind.JsonMappingException;, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +    } catch (JsonParseException e) {, +      throw new ConversionException(e);, +    } catch (JsonMappingException e) {, +      throw new ConversionException(e);, +    } catch (IOException e) {, +      throw new ConversionException(e);, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.fasterxml.jackson.core.JsonParseException;, +import com.fasterxml.jackson.databind.JsonMappingException;, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +    } catch (JsonParseException e) {, +      throw new ConversionException(e);, +    } catch (JsonMappingException e) {, +      throw new ConversionException(e);, +    } catch (IOException e) {, +      throw new ConversionException(e);, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +  @Test(expected = ConversionException.class), +  public void deserializeWrongValue() throws Exception {, +  @Test(expected = ConversionException.class), +  public void deserializeWrongClass() throws Exception {, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.fasterxml.jackson.core.JsonParseException;, +import com.fasterxml.jackson.databind.JsonMappingException;, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +    } catch (JsonParseException e) {, +      throw new ConversionException(e);, +    } catch (JsonMappingException e) {, +      throw new ConversionException(e);, +    } catch (IOException e) {, +      throw new ConversionException(e);, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +  @Test(expected = ConversionException.class), +  public void deserializeWrongValue() throws Exception {, +  @Test(expected = ConversionException.class), +  public void deserializeWrongClass() throws Exception {, +++ b/retrofit-converters/protobuf/src/main/java/retrofit/converter/ProtoConverter.java, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +      throw new ConversionException("Response content type was not a proto: " + mimeType);, +      throw new ConversionException(c.getName() + ".parseFrom() failed", e.getCause());, +    } catch (IOException e) {, +      throw new ConversionException(e);, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.fasterxml.jackson.core.JsonParseException;, +import com.fasterxml.jackson.databind.JsonMappingException;, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +    } catch (JsonParseException e) {, +      throw new ConversionException(e);, +    } catch (JsonMappingException e) {, +      throw new ConversionException(e);, +    } catch (IOException e) {, +      throw new ConversionException(e);, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +  @Test(expected = ConversionException.class), +  public void deserializeWrongValue() throws Exception {, +  @Test(expected = ConversionException.class), +  public void deserializeWrongClass() throws Exception {, +++ b/retrofit-converters/protobuf/src/main/java/retrofit/converter/ProtoConverter.java, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +      throw new ConversionException("Response content type was not a proto: " + mimeType);, +      throw new ConversionException(c.getName() + ".parseFrom() failed", e.getCause());, +    } catch (IOException e) {, +      throw new ConversionException(e);, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/converter/ProtoConverterTest.java, +    } catch (ConversionException expected) {, +    } catch (ConversionException e) {, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import com.fasterxml.jackson.core.JsonParseException;, +import com.fasterxml.jackson.databind.JsonMappingException;, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +    } catch (JsonParseException e) {, +      throw new ConversionException(e);, +    } catch (JsonMappingException e) {, +      throw new ConversionException(e);, +    } catch (IOException e) {, +      throw new ConversionException(e);, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +  @Test(expected = ConversionException.class), +  public void deserializeWrongValue() throws Exception {, +  @Test(expected = ConversionException.class), +  public void deserializeWrongClass() throws Exception {, +++ b/retrofit-converters/protobuf/src/main/java/retrofit/converter/ProtoConverter.java, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +      throw new ConversionException("Response content type was not a proto: " + mimeType);, +      throw new ConversionException(c.getName() + ".parseFrom() failed", e.getCause());, +    } catch (IOException e) {, +      throw new ConversionException(e);, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/converter/ProtoConverterTest.java, +    } catch (ConversionException expected) {, +    } catch (ConversionException e) {, +++ b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +      throw new ConversionException(e);, +      } catch (IOException e) {, +        throw new AssertionError(e);, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java]