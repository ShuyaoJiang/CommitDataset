[+++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import java.io.InputStream;, +    InputStream in = null;, +      in = body.in();, +      return objectMapper.readValue(in, javaType);, +    } finally {, +      try {, +        if (in != null) {, +          in.close();, +        }, +      } catch (IOException ignored) {, +      }, +  @Override public TypedOutput toBody(Object object, Type type) {, +      JavaType javaType = objectMapper.getTypeFactory().constructType(type);, +      String json = objectMapper.writerWithType(javaType).writeValueAsString(object);, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import java.io.InputStream;, +    InputStream in = null;, +      in = body.in();, +      return objectMapper.readValue(in, javaType);, +    } finally {, +      try {, +        if (in != null) {, +          in.close();, +        }, +      } catch (IOException ignored) {, +      }, +  @Override public TypedOutput toBody(Object object, Type type) {, +      JavaType javaType = objectMapper.getTypeFactory().constructType(type);, +      String json = objectMapper.writerWithType(javaType).writeValueAsString(object);, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +    TypedOutput typedOutput = converter.toBody(OBJECT, MyObject.class);, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import java.io.InputStream;, +    InputStream in = null;, +      in = body.in();, +      return objectMapper.readValue(in, javaType);, +    } finally {, +      try {, +        if (in != null) {, +          in.close();, +        }, +      } catch (IOException ignored) {, +      }, +  @Override public TypedOutput toBody(Object object, Type type) {, +      JavaType javaType = objectMapper.getTypeFactory().constructType(type);, +      String json = objectMapper.writerWithType(javaType).writeValueAsString(object);, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +    TypedOutput typedOutput = converter.toBody(OBJECT, MyObject.class);, +++ b/retrofit-converters/protobuf/src/main/java/retrofit/converter/ProtoConverter.java, +  @Override public TypedOutput toBody(Object object, Type type) {, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import java.io.InputStream;, +    InputStream in = null;, +      in = body.in();, +      return objectMapper.readValue(in, javaType);, +    } finally {, +      try {, +        if (in != null) {, +          in.close();, +        }, +      } catch (IOException ignored) {, +      }, +  @Override public TypedOutput toBody(Object object, Type type) {, +      JavaType javaType = objectMapper.getTypeFactory().constructType(type);, +      String json = objectMapper.writerWithType(javaType).writeValueAsString(object);, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +    TypedOutput typedOutput = converter.toBody(OBJECT, MyObject.class);, +++ b/retrofit-converters/protobuf/src/main/java/retrofit/converter/ProtoConverter.java, +  @Override public TypedOutput toBody(Object object, Type type) {, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/converter/ProtoConverterTest.java, +    TypedOutput protoBytes = protoConverter.toBody(PROTO, Phone.class);, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import java.io.InputStream;, +    InputStream in = null;, +      in = body.in();, +      return objectMapper.readValue(in, javaType);, +    } finally {, +      try {, +        if (in != null) {, +          in.close();, +        }, +      } catch (IOException ignored) {, +      }, +  @Override public TypedOutput toBody(Object object, Type type) {, +      JavaType javaType = objectMapper.getTypeFactory().constructType(type);, +      String json = objectMapper.writerWithType(javaType).writeValueAsString(object);, +++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java, +    TypedOutput typedOutput = converter.toBody(OBJECT, MyObject.class);, +++ b/retrofit-converters/protobuf/src/main/java/retrofit/converter/ProtoConverter.java, +  @Override public TypedOutput toBody(Object object, Type type) {, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/converter/ProtoConverterTest.java, +    TypedOutput protoBytes = protoConverter.toBody(PROTO, Phone.class);, +++ b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java, +  @Override public TypedOutput toBody(Object source, Type type) {, +++ b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java, +import java.io.InputStream;, +    InputStream in = null;, +      in = body.in();, +      return objectMapper.readValue(in, javaType);]