[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +    return response(Response.success(successValue));, +  public static <T> Call<T> response(final Response<T> response) {, +    return new Call<T>() {, +      @Override public Response<T> execute() throws IOException {, +        return response;, +      @Override public void enqueue(Callback<T> callback) {, +        callback.onResponse(this, response);, +      }, +, +      @Override public boolean isExecuted() {, +        return false;, +      }, +, +      @Override public void cancel() {, +      }, +, +      @Override public boolean isCanceled() {, +        return false;, +      }, +, +      @SuppressWarnings("CloneDoesntCallSuperClone") // Immutable object., +      @Override public Call<T> clone() {, +        return this;, +      }, +, +      @Override public Request request() {, +        return response.raw().request();, +      }, +    };, +  }, +, +  public static <T> Call<T> failure(final IOException failure) {, +    return new Call<T>() {, +      @Override public Response<T> execute() throws IOException {, +        throw failure;, +      }, +, +      @Override public void enqueue(Callback<T> callback) {, +        callback.onFailure(this, failure);, +      }, +, +      @Override public boolean isExecuted() {, +        return false;, +      }, +, +      @Override public void cancel() {, +      }, +, +      @Override public boolean isCanceled() {, +        return false;, +      }, +, +      @SuppressWarnings("CloneDoesntCallSuperClone") // Immutable object., +      @Override public Call<T> clone() {, +        return this;, +      }, +, +      @Override public Request request() {, +        return new Request.Builder().url("http://localhost").build();, +      }, +    };, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +++ b/retrofit-mock/src/main/java/retrofit2/mock/Calls.java, +    return response(Response.success(successValue));, +  public static <T> Call<T> response(final Response<T> response) {, +    return new Call<T>() {, +      @Override public Response<T> execute() throws IOException {, +        return response;, +      @Override public void enqueue(Callback<T> callback) {, +        callback.onResponse(this, response);, +      }, +, +      @Override public boolean isExecuted() {, +        return false;, +      }, +, +      @Override public void cancel() {, +      }, +, +      @Override public boolean isCanceled() {, +        return false;, +      }, +, +      @SuppressWarnings("CloneDoesntCallSuperClone") // Immutable object., +      @Override public Call<T> clone() {, +        return this;, +      }, +, +      @Override public Request request() {, +        return response.raw().request();, +      }, +    };, +  }, +, +  public static <T> Call<T> failure(final IOException failure) {, +    return new Call<T>() {, +      @Override public Response<T> execute() throws IOException {]