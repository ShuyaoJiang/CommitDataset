[+++ b/http/src/main/java/retrofit/http/Callback.java, +   *, +   * @return response object or null if server returned an empty response., +++ b/http/src/main/java/retrofit/http/Callback.java, +   *, +   * @return response object or null if server returned an empty response., +++ b/http/src/main/java/retrofit/http/CallbackResponseHandler.java, +// Copyright 2012 Square, Inc., +import java.lang.reflect.Type;, +import java.text.DateFormat;, +import java.util.Date;, + * @author Jake Wharton (jw@squareup.com), +public class CallbackResponseHandler<R> implements ResponseHandler<Void> {, +  private static final Logger LOGGER = Logger.getLogger(CallbackResponseHandler.class.getName());, +  private final Callback<R> callback;, +  private final Type callbackType;, +  private final Converter converter;, +  private final String requestUrl; // Can be null., +  private final Date start;, +  private final ThreadLocal<DateFormat> dateFormat;, +  protected CallbackResponseHandler(Callback<R> callback, Type callbackType, Converter converter, String requestUrl,, +        Date start, ThreadLocal<DateFormat> dateFormat) {, +    this.callbackType = callbackType;, +    this.converter = converter;, +    this.start = start;, +    this.dateFormat = dateFormat;, +   * {@link Callback#call(R)}. Invoked in background thread., +   * @param type destination object type which is guaranteed to match <T>, +   * @throws ConversionException if the server returns an unexpected response, +  protected Object parse(HttpEntity entity, Type type) throws ConversionException {, +    if (LOGGER.isLoggable(Level.FINE)) {, +      try {, +        entity = HttpClients.copyAndLog(entity, requestUrl, start, dateFormat.get());, +      } catch (IOException e) {, +        throw new RuntimeException(e);, +      }, +    }, +    return converter.to(entity, type);, +  }, +, +  @SuppressWarnings("unchecked") // Type is extracted from generic properties so cast is safe., +    // Note: An IOException thrown from here (while downloading the HTTP, +    // entity, for example) will propagate to the caller and be reported as a, +    // network error., +    //, +    // Callback methods actually execute in the main thread, so we don't, +    // have to worry about unhandled exceptions thrown by them., +    HttpEntity entity = response.getEntity();, +      ServerError error = null;, +      try {, +        error = (ServerError) parse(entity, ServerError.class);, +        LOGGER.fine("Server returned " + HttpStatus.SC_UNAUTHORIZED + ", " + statusLine.getReasonPhrase() + ". Body: ", +            + error + ". Request url " + requestUrl);, +      } catch (ConversionException e) {, +        LOGGER.log(Level.WARNING, e.getMessage(), e);, +      callback.sessionExpired(error);, +        R result = (R) parse(entity, callbackType);, +        callback.call(result);, +      } catch (ConversionException e) {, +      ServerError error = null;, +      try {, +        error = (ServerError) parse(entity, ServerError.class);, +        LOGGER.fine("Server returned " + statusCode + ", " + statusLine.getReasonPhrase() + ". Body: " + error, +            + ". Request url " + requestUrl);, +      } catch (ConversionException e) {, +        LOGGER.log(Level.WARNING, e.getMessage(), e);, +      callback.serverError(error, statusCode);, +      R error = null;, +        error = (R) parse(entity, callbackType);, +        LOGGER.fine("Server returned " + statusCode + ", " + statusLine.getReasonPhrase() + ". Body: " + error, +            + ". Request url " + requestUrl);, +      } catch (ConversionException e) {, +      callback.clientError(error, statusCode);, +    LOGGER.fine("Server returned " + statusCode + ", " + statusLine.getReasonPhrase() + ". Request url " + requestUrl);, +    callback.clientError(null, statusCode);, +++ b/http/src/main/java/retrofit/http/Callback.java, +   *, +   * @return response object or null if server returned an empty response., +++ b/http/src/main/java/retrofit/http/CallbackResponseHandler.java, +// Copyright 2012 Square, Inc., +import java.lang.reflect.Type;, +import java.text.DateFormat;, +import java.util.Date;, + * @author Jake Wharton (jw@squareup.com), +public class CallbackResponseHandler<R> implements ResponseHandler<Void> {, +  private static final Logger LOGGER = Logger.getLogger(CallbackResponseHandler.class.getName());, +  private final Callback<R> callback;, +  private final Type callbackType;, +  private final Converter converter;, +  private final String requestUrl; // Can be null., +  private final Date start;, +  private final ThreadLocal<DateFormat> dateFormat;, +  protected CallbackResponseHandler(Callback<R> callback, Type callbackType, Converter converter, String requestUrl,, +        Date start, ThreadLocal<DateFormat> dateFormat) {, +    this.callbackType = callbackType;, +    this.converter = converter;, +    this.start = start;, +    this.dateFormat = dateFormat;, +   * {@link Callback#call(R)}. Invoked in background thread., +   * @param type destination object type which is guaranteed to match <T>]