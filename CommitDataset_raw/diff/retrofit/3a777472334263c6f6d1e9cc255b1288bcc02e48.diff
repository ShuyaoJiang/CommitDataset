[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +        @Override public void onResponse(Response<T> response, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +        @Override public void onResponse(Response<T> response, Retrofit retrofit) {, +++ b/retrofit-mock/src/main/java/retrofit/mock/BehaviorCall.java, +import retrofit.Retrofit;, +  private final Retrofit retrofit;, +  BehaviorCall(Retrofit retrofit, NetworkBehavior behavior, ExecutorService backgroundExecutor,, +      Call<T> delegate) {, +    this.retrofit = retrofit;, +    this.behavior = behavior;, +    this.backgroundExecutor = backgroundExecutor;, +    this.delegate = delegate;, +, +    Executor callbackExecutor = retrofit.callbackExecutor();, +    return new BehaviorCall<>(retrofit, behavior, backgroundExecutor, delegate.clone());, +            callback.onResponse(response, retrofit);, +            @Override public void onResponse(final Response<T> response, Retrofit retrofit) {, +      @Override public void onResponse(Response<T> response, Retrofit retrofit) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +        @Override public void onResponse(Response<T> response, Retrofit retrofit) {, +++ b/retrofit-mock/src/main/java/retrofit/mock/BehaviorCall.java, +import retrofit.Retrofit;, +  private final Retrofit retrofit;, +  BehaviorCall(Retrofit retrofit, NetworkBehavior behavior, ExecutorService backgroundExecutor,, +      Call<T> delegate) {, +    this.retrofit = retrofit;, +    this.behavior = behavior;, +    this.backgroundExecutor = backgroundExecutor;, +    this.delegate = delegate;, +, +    Executor callbackExecutor = retrofit.callbackExecutor();, +    return new BehaviorCall<>(retrofit, behavior, backgroundExecutor, delegate.clone());, +            callback.onResponse(response, retrofit);, +            @Override public void onResponse(final Response<T> response, Retrofit retrofit) {, +      @Override public void onResponse(Response<T> response, Retrofit retrofit) {, +++ b/retrofit-mock/src/main/java/retrofit/mock/CallBehaviorAdapter.java, +  private final Retrofit retrofit;, +    this.retrofit = retrofit;, +    return new BehaviorCall<>(retrofit, behavior, backgroundExecutor, value);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +        @Override public void onResponse(Response<T> response, Retrofit retrofit) {, +++ b/retrofit-mock/src/main/java/retrofit/mock/BehaviorCall.java, +import retrofit.Retrofit;, +  private final Retrofit retrofit;, +  BehaviorCall(Retrofit retrofit, NetworkBehavior behavior, ExecutorService backgroundExecutor,, +      Call<T> delegate) {, +    this.retrofit = retrofit;, +    this.behavior = behavior;, +    this.backgroundExecutor = backgroundExecutor;, +    this.delegate = delegate;, +, +    Executor callbackExecutor = retrofit.callbackExecutor();, +    return new BehaviorCall<>(retrofit, behavior, backgroundExecutor, delegate.clone());, +            callback.onResponse(response, retrofit);, +            @Override public void onResponse(final Response<T> response, Retrofit retrofit) {, +      @Override public void onResponse(Response<T> response, Retrofit retrofit) {, +++ b/retrofit-mock/src/main/java/retrofit/mock/CallBehaviorAdapter.java, +  private final Retrofit retrofit;, +    this.retrofit = retrofit;, +    return new BehaviorCall<>(retrofit, behavior, backgroundExecutor, value);, +++ b/retrofit-mock/src/main/java/retrofit/mock/Calls.java, +import retrofit.Retrofit;, +  public static <T> Call<T> response(T successValue, Retrofit retrofit) {, +    return response(Response.success(successValue), retrofit);, +  public static <T> Call<T> response(final Response<T> response, final Retrofit retrofit) {, +        callback.onResponse(response, retrofit);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +        @Override public void onResponse(Response<T> response, Retrofit retrofit) {, +++ b/retrofit-mock/src/main/java/retrofit/mock/BehaviorCall.java, +import retrofit.Retrofit;, +  private final Retrofit retrofit;, +  BehaviorCall(Retrofit retrofit, NetworkBehavior behavior, ExecutorService backgroundExecutor,, +      Call<T> delegate) {, +    this.retrofit = retrofit;, +    this.behavior = behavior;, +    this.backgroundExecutor = backgroundExecutor;, +    this.delegate = delegate;, +, +    Executor callbackExecutor = retrofit.callbackExecutor();, +    return new BehaviorCall<>(retrofit, behavior, backgroundExecutor, delegate.clone());, +            callback.onResponse(response, retrofit);, +            @Override public void onResponse(final Response<T> response, Retrofit retrofit) {, +      @Override public void onResponse(Response<T> response, Retrofit retrofit) {, +++ b/retrofit-mock/src/main/java/retrofit/mock/CallBehaviorAdapter.java, +  private final Retrofit retrofit;, +    this.retrofit = retrofit;, +    return new BehaviorCall<>(retrofit, behavior, backgroundExecutor, value);, +++ b/retrofit-mock/src/main/java/retrofit/mock/Calls.java, +import retrofit.Retrofit;, +  public static <T> Call<T> response(T successValue, Retrofit retrofit) {, +    return response(Response.success(successValue), retrofit);, +  public static <T> Call<T> response(final Response<T> response, final Retrofit retrofit) {, +        callback.onResponse(response, retrofit);, +++ b/retrofit-mock/src/test/java/retrofit/MockRetrofitTest.java, +    final Retrofit retrofit = new Retrofit.Builder(), +        return Calls.response("Response!", retrofit);, +      @Override public void onResponse(Response<String> response, Retrofit retrofit) {, +      @Override public void onResponse(Response<String> response, Retrofit retrofit) {, +      @Override public void onResponse(Response<String> response, Retrofit retrofit) {]