[+++ b/retrofit/src/main/java/retrofit/Call.java, +   * or decoding the response., +  /**, +   * Create a new, identical call to this one which can be enqueued or executed even if this call, +   * has already been., +   */, +++ b/retrofit/src/main/java/retrofit/Call.java, +   * or decoding the response., +  /**, +   * Create a new, identical call to this one which can be enqueued or executed even if this call, +   * has already been., +   */, +++ b/retrofit/src/main/java/retrofit/RequestBuilderAction.java, +            retrofit.requestConverter(entryClass, annotations);, +++ b/retrofit/src/main/java/retrofit/Call.java, +   * or decoding the response., +  /**, +   * Create a new, identical call to this one which can be enqueued or executed even if this call, +   * has already been., +   */, +++ b/retrofit/src/main/java/retrofit/RequestBuilderAction.java, +            retrofit.requestConverter(entryClass, annotations);, +++ b/retrofit/src/main/java/retrofit/Retrofit.java, +    /** API base URL. */, +    /** API base URL. */, +    /** API base URL. */, +++ b/retrofit/src/main/java/retrofit/Call.java, +   * or decoding the response., +  /**, +   * Create a new, identical call to this one which can be enqueued or executed even if this call, +   * has already been., +   */, +++ b/retrofit/src/main/java/retrofit/RequestBuilderAction.java, +            retrofit.requestConverter(entryClass, annotations);, +++ b/retrofit/src/main/java/retrofit/Retrofit.java, +    /** API base URL. */, +    /** API base URL. */, +    /** API base URL. */, +++ b/retrofit/src/main/java/retrofit/http/DELETE.java, +/** Make a DELETE request to a REST path relative to base URL. */, +++ b/retrofit/src/main/java/retrofit/Call.java, +   * or decoding the response., +  /**, +   * Create a new, identical call to this one which can be enqueued or executed even if this call, +   * has already been., +   */, +++ b/retrofit/src/main/java/retrofit/RequestBuilderAction.java, +            retrofit.requestConverter(entryClass, annotations);, +++ b/retrofit/src/main/java/retrofit/Retrofit.java, +    /** API base URL. */, +    /** API base URL. */, +    /** API base URL. */, +++ b/retrofit/src/main/java/retrofit/http/DELETE.java, +/** Make a DELETE request to a REST path relative to base URL. */, +++ b/retrofit/src/main/java/retrofit/http/GET.java, +/** Make a GET request to a REST path relative to base URL. */, +++ b/retrofit/src/main/java/retrofit/Call.java, +   * or decoding the response., +  /**, +   * Create a new, identical call to this one which can be enqueued or executed even if this call, +   * has already been., +   */, +++ b/retrofit/src/main/java/retrofit/RequestBuilderAction.java, +            retrofit.requestConverter(entryClass, annotations);, +++ b/retrofit/src/main/java/retrofit/Retrofit.java, +    /** API base URL. */, +    /** API base URL. */, +    /** API base URL. */, +++ b/retrofit/src/main/java/retrofit/http/DELETE.java, +/** Make a DELETE request to a REST path relative to base URL. */, +++ b/retrofit/src/main/java/retrofit/http/GET.java, +/** Make a GET request to a REST path relative to base URL. */, +++ b/retrofit/src/main/java/retrofit/http/HEAD.java, +/**, + * Make a HEAD request to a REST path relative to base URL., + * <p>, + * Note: HEAD requests must use {@link Void} as the response type since there is no body content., + */, +++ b/retrofit/src/main/java/retrofit/Call.java, +   * or decoding the response., +  /**, +   * Create a new, identical call to this one which can be enqueued or executed even if this call, +   * has already been., +   */, +++ b/retrofit/src/main/java/retrofit/RequestBuilderAction.java, +            retrofit.requestConverter(entryClass, annotations);, +++ b/retrofit/src/main/java/retrofit/Retrofit.java, +    /** API base URL. */, +    /** API base URL. */, +    /** API base URL. */, +++ b/retrofit/src/main/java/retrofit/http/DELETE.java, +/** Make a DELETE request to a REST path relative to base URL. */, +++ b/retrofit/src/main/java/retrofit/http/GET.java, +/** Make a GET request to a REST path relative to base URL. */, +++ b/retrofit/src/main/java/retrofit/http/HEAD.java, +/**, + * Make a HEAD request to a REST path relative to base URL., + * <p>, + * Note: HEAD requests must use {@link Void} as the response type since there is no body content., + */]