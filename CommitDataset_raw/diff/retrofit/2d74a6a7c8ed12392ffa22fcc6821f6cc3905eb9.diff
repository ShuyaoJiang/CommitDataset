[+++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +  @Override public void enqueue(final Callback<T> callback) {, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +  @Override public void enqueue(final Callback<T> callback) {, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private MediaType contentType;, +      MediaType contentType, boolean hasBody, boolean isFormEncoded, boolean isMultipart) {, +    this.requestBuilder = new Request.Builder();, +    this.contentType = contentType;, +    this.hasBody = hasBody;, +      contentType = MediaType.parse(value);, +    MediaType contentType = this.contentType;, +    if (contentType != null) {, +        body = new ContentTypeOverridingRequestBody(body, contentType);, +        requestBuilder.addHeader("Content-Type", contentType.toString());, +  private static class ContentTypeOverridingRequestBody extends RequestBody {, +    private final MediaType contentType;, +    ContentTypeOverridingRequestBody(RequestBody delegate, MediaType contentType) {, +      this.contentType = contentType;, +      return contentType;, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +  @Override public void enqueue(final Callback<T> callback) {, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private MediaType contentType;, +      MediaType contentType, boolean hasBody, boolean isFormEncoded, boolean isMultipart) {, +    this.requestBuilder = new Request.Builder();, +    this.contentType = contentType;, +    this.hasBody = hasBody;, +      contentType = MediaType.parse(value);, +    MediaType contentType = this.contentType;, +    if (contentType != null) {, +        body = new ContentTypeOverridingRequestBody(body, contentType);, +        requestBuilder.addHeader("Content-Type", contentType.toString());, +  private static class ContentTypeOverridingRequestBody extends RequestBody {, +    private final MediaType contentType;, +    ContentTypeOverridingRequestBody(RequestBody delegate, MediaType contentType) {, +      this.contentType = contentType;, +      return contentType;, +++ b/retrofit/src/main/java/retrofit/RequestFactory.java, +  private final MediaType contentType;, +      MediaType contentType, boolean hasBody, boolean isFormEncoded, boolean isMultipart,, +    this.contentType = contentType;, +        new RequestBuilder(method, baseUrl.url(), relativeUrl, headers, contentType, hasBody,, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +  @Override public void enqueue(final Callback<T> callback) {, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private MediaType contentType;, +      MediaType contentType, boolean hasBody, boolean isFormEncoded, boolean isMultipart) {, +    this.requestBuilder = new Request.Builder();, +    this.contentType = contentType;, +    this.hasBody = hasBody;, +      contentType = MediaType.parse(value);, +    MediaType contentType = this.contentType;, +    if (contentType != null) {, +        body = new ContentTypeOverridingRequestBody(body, contentType);, +        requestBuilder.addHeader("Content-Type", contentType.toString());, +  private static class ContentTypeOverridingRequestBody extends RequestBody {, +    private final MediaType contentType;, +    ContentTypeOverridingRequestBody(RequestBody delegate, MediaType contentType) {, +      this.contentType = contentType;, +      return contentType;, +++ b/retrofit/src/main/java/retrofit/RequestFactory.java, +  private final MediaType contentType;, +      MediaType contentType, boolean hasBody, boolean isFormEncoded, boolean isMultipart,, +    this.contentType = contentType;, +        new RequestBuilder(method, baseUrl.url(), relativeUrl, headers, contentType, hasBody,, +++ b/retrofit/src/main/java/retrofit/RequestFactoryParser.java, +  private MediaType contentType;, +    return new RequestFactory(httpMethod, baseUrl, relativeUrl, headers, contentType, hasBody,, +        contentType = MediaType.parse(headerValue);, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +  @Override public void enqueue(final Callback<T> callback) {, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private MediaType contentType;, +      MediaType contentType, boolean hasBody, boolean isFormEncoded, boolean isMultipart) {, +    this.requestBuilder = new Request.Builder();, +    this.contentType = contentType;, +    this.hasBody = hasBody;, +      contentType = MediaType.parse(value);, +    MediaType contentType = this.contentType;, +    if (contentType != null) {, +        body = new ContentTypeOverridingRequestBody(body, contentType);, +        requestBuilder.addHeader("Content-Type", contentType.toString());, +  private static class ContentTypeOverridingRequestBody extends RequestBody {, +    private final MediaType contentType;, +    ContentTypeOverridingRequestBody(RequestBody delegate, MediaType contentType) {, +      this.contentType = contentType;, +      return contentType;, +++ b/retrofit/src/main/java/retrofit/RequestFactory.java, +  private final MediaType contentType;, +      MediaType contentType, boolean hasBody, boolean isFormEncoded, boolean isMultipart,, +    this.contentType = contentType;, +        new RequestBuilder(method, baseUrl.url(), relativeUrl, headers, contentType, hasBody,, +++ b/retrofit/src/main/java/retrofit/RequestFactoryParser.java, +  private MediaType contentType;, +    return new RequestFactory(httpMethod, baseUrl, relativeUrl, headers, contentType, hasBody,, +        contentType = MediaType.parse(headerValue);, +++ b/retrofit/src/main/java/retrofit/Retrofit.java, +    Utils.validateServiceInterface(service);, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java]