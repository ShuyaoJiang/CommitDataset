[+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +          if (value != null) { // Skip null values., +          }, +    if (multipartBody != null && multipartBody.getPartCount() == 0) {, +      throw new IllegalStateException("Multipart requests must contain at least one part.");, +    }, +, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +          if (value != null) { // Skip null values., +          }, +    if (multipartBody != null && multipartBody.getPartCount() == 0) {, +      throw new IllegalStateException("Multipart requests must contain at least one part.");, +    }, +, +++ b/retrofit/src/main/java/retrofit/mime/MultipartTypedOutput.java, +  public int getPartCount() {, +    return parts.size();, +  }, +, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +          if (value != null) { // Skip null values., +          }, +    if (multipartBody != null && multipartBody.getPartCount() == 0) {, +      throw new IllegalStateException("Multipart requests must contain at least one part.");, +    }, +, +++ b/retrofit/src/main/java/retrofit/mime/MultipartTypedOutput.java, +  public int getPartCount() {, +    return parts.size();, +  }, +, +++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java, +  @Test public void multipartNullRemovesPart() throws Exception {, +    Request request = new Helper() //, +        .setMethod("POST") //, +        .setHasBody() //, +        .setUrl("http://example.com") //, +        .setPath("/foo/bar/") //, +        .setMultipart() //, +        .addPart("ping", "pong") //, +        .addPart("fizz", null) //, +        .build();, +    assertThat(request.getMethod()).isEqualTo("POST");, +    assertThat(request.getHeaders()).isEmpty();, +    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");, +, +    MultipartTypedOutput body = (MultipartTypedOutput) request.getBody();, +    List<byte[]> bodyParts = MimeHelper.getParts(body);, +    assertThat(bodyParts).hasSize(1);, +, +    Iterator<byte[]> iterator = bodyParts.iterator();, +, +    String one = new String(iterator.next(), "UTF-8");, +    assertThat(one).contains("ping").contains("pong");, +  }, +, +      fail("Empty multipart request is not allowed.");, +    } catch (IllegalStateException e) {, +      assertThat(e.getMessage()).isEqualTo("Multipart requests must contain at least one part.");]