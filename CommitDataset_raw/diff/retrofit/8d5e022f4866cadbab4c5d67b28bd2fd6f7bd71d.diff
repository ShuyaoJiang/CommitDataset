[+++ b/CHANGELOG.md, +Version 1.2.0 *(In Development)*, +--------------------------------, +, + * Change `setDebug` to `setLogLevel` on `RestAdapter` and `RestAdapter.Builder` and provide, +   two levels of logging via `LogLevel`., + * Query parameters can now be added in a request interceptor., +, +, +++ b/CHANGELOG.md, +Version 1.2.0 *(In Development)*, +--------------------------------, +, + * Change `setDebug` to `setLogLevel` on `RestAdapter` and `RestAdapter.Builder` and provide, +   two levels of logging via `LogLevel`., + * Query parameters can now be added in a request interceptor., +, +, +++ b/retrofit/src/main/java/retrofit/RequestInterceptor.java, +     * Add a path parameter replacement. This works exactly like a {@link retrofit.http.Part, +     * &#64;Part}-annotated method argument., +++ b/CHANGELOG.md, +Version 1.2.0 *(In Development)*, +--------------------------------, +, + * Change `setDebug` to `setLogLevel` on `RestAdapter` and `RestAdapter.Builder` and provide, +   two levels of logging via `LogLevel`., + * Query parameters can now be added in a request interceptor., +, +, +++ b/retrofit/src/main/java/retrofit/RequestInterceptor.java, +     * Add a path parameter replacement. This works exactly like a {@link retrofit.http.Part, +     * &#64;Part}-annotated method argument., +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +  /** Controls the level of logging. */, +  public enum LogLevel {, +    /** No logging. */, +    NONE,, +    /** Log only the request method and URL and the response status code and execution time. */, +    BASIC,, +    /** Log the headers, body, and metadata for both requests and responses. */, +    FULL, +  }, +, +  private volatile LogLevel logLevel;, +      Profiler profiler, ErrorHandler errorHandler, Log log, LogLevel logLevel) {, +    this.logLevel = logLevel;, +  /** Change the level of logging. */, +  public void setLogLevel(LogLevel loglevel) {, +    if (logLevel == null) {, +      throw new NullPointerException("Log level may not be null.");, +    }, +    this.logLevel = loglevel;, +        if (logLevel == LogLevel.FULL) {, +        } else if (logLevel == LogLevel.BASIC) {, +          logRequestLine(request);, +        if (logLevel == LogLevel.FULL) {, +        } else if (logLevel == LogLevel.BASIC) {, +          logResponseLine(url, response, elapsedTime);, +  private void logRequestLine(Request request) {, +    log.log(String.format("---> HTTP %s %s", request.getMethod(), request.getUrl()));, +  }, +, +  private void logResponseLine(String url, Response response, long elapsedTime) {, +    log.log(String.format("<--- HTTP %s %s (%sms)", response.getStatus(), url, elapsedTime));, +  }, +, +    logRequestLine(request);, +    logResponseLine(url, response, elapsedTime);, +    private LogLevel logLevel = LogLevel.NONE;, +    /** Change the level of logging. */, +    public Builder setLogLevel(LogLevel logLevel) {, +      if (logLevel == null) {, +        throw new NullPointerException("Log level may not be null.");, +      }, +      this.logLevel = logLevel;, +          requestInterceptor, converter, profiler, errorHandler, log, logLevel);, +++ b/CHANGELOG.md, +Version 1.2.0 *(In Development)*, +--------------------------------, +, + * Change `setDebug` to `setLogLevel` on `RestAdapter` and `RestAdapter.Builder` and provide, +   two levels of logging via `LogLevel`., + * Query parameters can now be added in a request interceptor., +, +, +++ b/retrofit/src/main/java/retrofit/RequestInterceptor.java, +     * Add a path parameter replacement. This works exactly like a {@link retrofit.http.Part, +     * &#64;Part}-annotated method argument., +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +  /** Controls the level of logging. */, +  public enum LogLevel {, +    /** No logging. */, +    NONE,, +    /** Log only the request method and URL and the response status code and execution time. */, +    BASIC,, +    /** Log the headers, body, and metadata for both requests and responses. */, +    FULL, +  }, +]