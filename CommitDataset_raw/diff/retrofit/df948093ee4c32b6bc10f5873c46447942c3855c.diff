[+++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +        .callbackExecutor(callbackExecutor), +        .endpoint("none"), +        .errorHandler(new ErrorHandler() {, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +        .callbackExecutor(callbackExecutor), +        .endpoint("none"), +        .errorHandler(new ErrorHandler() {, +++ b/retrofit/src/main/java/retrofit/Callback.java, + * @see RestAdapter.Builder#callbackExecutor, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +        .callbackExecutor(callbackExecutor), +        .endpoint("none"), +        .errorHandler(new ErrorHandler() {, +++ b/retrofit/src/main/java/retrofit/Callback.java, + * @see RestAdapter.Builder#callbackExecutor, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +import static retrofit.Utils.checkNotNull;, +, +   * Calling {@link #endpoint} is required before calling {@link #build()}. All other methods, +    public Builder endpoint(String url) {, +       return endpoint(Endpoint.createFixed(url));, +    public Builder endpoint(Endpoint endpoint) {, +      this.endpoint = checkNotNull(endpoint, "endpoint == null");, +    public Builder client(OkHttpClient client) {, +      this.client = checkNotNull(client, "client == null");, +    public Builder callbackExecutor(Executor callbackExecutor) {, +    public Builder requestInterceptor(RequestInterceptor requestInterceptor) {, +      this.requestInterceptor = checkNotNull(requestInterceptor, "requestInterceptor == null");, +    public Builder converter(Converter converter) {, +      this.converter = checkNotNull(converter, "converter == null");, +    public Builder errorHandler(ErrorHandler errorHandler) {, +      this.errorHandler = checkNotNull(errorHandler, "errorHandler == null");, +      checkNotNull(endpoint, "Endpoint required.");, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +        .callbackExecutor(callbackExecutor), +        .endpoint("none"), +        .errorHandler(new ErrorHandler() {, +++ b/retrofit/src/main/java/retrofit/Callback.java, + * @see RestAdapter.Builder#callbackExecutor, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +import static retrofit.Utils.checkNotNull;, +, +   * Calling {@link #endpoint} is required before calling {@link #build()}. All other methods, +    public Builder endpoint(String url) {, +       return endpoint(Endpoint.createFixed(url));, +    public Builder endpoint(Endpoint endpoint) {, +      this.endpoint = checkNotNull(endpoint, "endpoint == null");, +    public Builder client(OkHttpClient client) {, +      this.client = checkNotNull(client, "client == null");, +    public Builder callbackExecutor(Executor callbackExecutor) {, +    public Builder requestInterceptor(RequestInterceptor requestInterceptor) {, +      this.requestInterceptor = checkNotNull(requestInterceptor, "requestInterceptor == null");, +    public Builder converter(Converter converter) {, +      this.converter = checkNotNull(converter, "converter == null");, +    public Builder errorHandler(ErrorHandler errorHandler) {, +      this.errorHandler = checkNotNull(errorHandler, "errorHandler == null");, +      checkNotNull(endpoint, "Endpoint required.");, +++ b/retrofit/src/main/java/retrofit/Utils.java, +  static <T> T checkNotNull(T object, String message) {, +      throw new NullPointerException(message);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +        .callbackExecutor(callbackExecutor), +        .endpoint("none"), +        .errorHandler(new ErrorHandler() {, +++ b/retrofit/src/main/java/retrofit/Callback.java, + * @see RestAdapter.Builder#callbackExecutor, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +import static retrofit.Utils.checkNotNull;, +, +   * Calling {@link #endpoint} is required before calling {@link #build()}. All other methods, +    public Builder endpoint(String url) {, +       return endpoint(Endpoint.createFixed(url));, +    public Builder endpoint(Endpoint endpoint) {, +      this.endpoint = checkNotNull(endpoint, "endpoint == null");, +    public Builder client(OkHttpClient client) {, +      this.client = checkNotNull(client, "client == null");, +    public Builder callbackExecutor(Executor callbackExecutor) {, +    public Builder requestInterceptor(RequestInterceptor requestInterceptor) {, +      this.requestInterceptor = checkNotNull(requestInterceptor, "requestInterceptor == null");, +    public Builder converter(Converter converter) {, +      this.converter = checkNotNull(converter, "converter == null");, +    public Builder errorHandler(ErrorHandler errorHandler) {, +      this.errorHandler = checkNotNull(errorHandler, "errorHandler == null");, +      checkNotNull(endpoint, "Endpoint required.");, +++ b/retrofit/src/main/java/retrofit/Utils.java, +  static <T> T checkNotNull(T object, String message) {, +      throw new NullPointerException(message);, +++ b/retrofit/src/test/java/retrofit/ErrorHandlerTest.java, +        .endpoint("http://example.com"), +        .client(client), +        .errorHandler(errorHandler), +        .callbackExecutor(new Utils.SynchronousExecutor()), +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +        .callbackExecutor(callbackExecutor), +        .endpoint("none"), +        .errorHandler(new ErrorHandler() {, +++ b/retrofit/src/main/java/retrofit/Callback.java, + * @see RestAdapter.Builder#callbackExecutor, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java]