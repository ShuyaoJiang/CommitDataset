[+++ b/pom.xml, +    <appengine.version>1.9.12</appengine.version>, +++ b/pom.xml, +    <appengine.version>1.9.12</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, +    return parseResponse(fetchResponse, fetchRequest);, +      String mimeType = body.mimeType();, +      if (mimeType != null) {, +        fetchRequest.addHeader(new HTTPHeader("Content-Type", mimeType));, +      }, +, +  static Response parseResponse(HTTPResponse response, HTTPRequest creatingRequest) {, +    // Response URL will be null if it is the same as the request URL., +    URL responseUrl = response.getFinalUrl();, +    String urlString = (responseUrl != null ? responseUrl : creatingRequest.getURL()).toString();, +, +    return new Response(urlString, status, "", headers, body);, +++ b/pom.xml, +    <appengine.version>1.9.12</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, +    return parseResponse(fetchResponse, fetchRequest);, +      String mimeType = body.mimeType();, +      if (mimeType != null) {, +        fetchRequest.addHeader(new HTTPHeader("Content-Type", mimeType));, +      }, +, +  static Response parseResponse(HTTPResponse response, HTTPRequest creatingRequest) {, +    // Response URL will be null if it is the same as the request URL., +    URL responseUrl = response.getFinalUrl();, +    String urlString = (responseUrl != null ? responseUrl : creatingRequest.getURL()).toString();, +, +    return new Response(urlString, status, "", headers, body);, +++ b/retrofit/src/test/java/retrofit/TestingUtils.java, +import retrofit.mime.MimeHelper;, +public final class TestingUtils {, +    MultipartTypedOutput typedOutput = MimeHelper.newMultipart("foobarbaz");, +++ b/pom.xml, +    <appengine.version>1.9.12</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, +    return parseResponse(fetchResponse, fetchRequest);, +      String mimeType = body.mimeType();, +      if (mimeType != null) {, +        fetchRequest.addHeader(new HTTPHeader("Content-Type", mimeType));, +      }, +, +  static Response parseResponse(HTTPResponse response, HTTPRequest creatingRequest) {, +    // Response URL will be null if it is the same as the request URL., +    URL responseUrl = response.getFinalUrl();, +    String urlString = (responseUrl != null ? responseUrl : creatingRequest.getURL()).toString();, +, +    return new Response(urlString, status, "", headers, body);, +++ b/retrofit/src/test/java/retrofit/TestingUtils.java, +import retrofit.mime.MimeHelper;, +public final class TestingUtils {, +    MultipartTypedOutput typedOutput = MimeHelper.newMultipart("foobarbaz");, +++ b/retrofit/src/test/java/retrofit/appengine/UrlFetchClientTest.java, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +    assertThat(fetchHeaders).hasSize(1);, +    assertHeader(fetchHeaders.get(0), "Content-Type", "text/plain; charset=UTF-8");, +    assertThat(fetchHeaders).hasSize(1);, +    assertHeader(fetchHeaders.get(0), "Content-Type", "multipart/form-data; boundary=foobarbaz");, +    HTTPRequest creatingRequest = mock(HTTPRequest.class);, +, +    Response response = UrlFetchClient.parseResponse(fetchResponse, creatingRequest);, +, +    assertThat(response.getUrl()).isEqualTo(HOST + "/foo/bar/");, +    assertThat(response.getStatus()).isEqualTo(200);, +    assertThat(response.getReason()).isEqualTo("");, +    assertThat(response.getHeaders()).hasSize(3) //, +        .containsOnly(new Header("foo", "bar"), new Header("kit", "kat"),, +            new Header("Content-Type", "text/plain"));, +    assertBytes(ByteStreams.toByteArray(response.getBody().in()), "hello");, +, +    verifyNoMoreInteractions(creatingRequest);, +  }, +, +  @Test public void responseNullUrlPullsFromRequest() throws Exception {, +    HTTPRequest creatingRequest = mock(HTTPRequest.class);, +    when(creatingRequest.getURL()).thenReturn(new URL(HOST + "/foo/bar/"));, +, +    HTTPResponse fetchResponse = mock(HTTPResponse.class);, +    when(fetchResponse.getHeaders()).thenReturn(, +        asList(new HTTPHeader("foo", "bar"), new HTTPHeader("kit", "kat"),, +            new HTTPHeader("Content-Type", "text/plain")));, +    when(fetchResponse.getContent()).thenReturn("hello".getBytes("UTF-8"));, +    when(fetchResponse.getFinalUrl()).thenReturn(null);, +    when(fetchResponse.getResponseCode()).thenReturn(200);, +, +    Response response = UrlFetchClient.parseResponse(fetchResponse, creatingRequest);, +    HTTPRequest creatingRequest = mock(HTTPRequest.class);, +, +    Response response = UrlFetchClient.parseResponse(fetchResponse, creatingRequest);, +, +    verifyNoMoreInteractions(creatingRequest);, +++ b/pom.xml, +    <appengine.version>1.9.12</appengine.version>, +++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java, +    return parseResponse(fetchResponse, fetchRequest);, +      String mimeType = body.mimeType();, +      if (mimeType != null) {]