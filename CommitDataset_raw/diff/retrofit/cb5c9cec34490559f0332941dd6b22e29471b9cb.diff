[+++ b/retrofit/src/main/java/retrofit2/Platform.java, +  Executor defaultCallbackExecutor() {, +    return null;, +  }, +, +    @Override public Executor defaultCallbackExecutor() {, +      return new MainThreadExecutor();, +, +    @Override CallAdapter.Factory defaultCallAdapterFactory(Executor callbackExecutor) {, +    @Override public Executor defaultCallbackExecutor() {, +      return new MainThreadExecutor();, +, +    @Override CallAdapter.Factory defaultCallAdapterFactory(Executor callbackExecutor) {, +++ b/retrofit/src/main/java/retrofit2/Platform.java, +  Executor defaultCallbackExecutor() {, +    return null;, +  }, +, +    @Override public Executor defaultCallbackExecutor() {, +      return new MainThreadExecutor();, +, +    @Override CallAdapter.Factory defaultCallAdapterFactory(Executor callbackExecutor) {, +    @Override public Executor defaultCallbackExecutor() {, +      return new MainThreadExecutor();, +, +    @Override CallAdapter.Factory defaultCallAdapterFactory(Executor callbackExecutor) {, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +  /**, +   * The executor used for {@link Callback} methods on a {@link Call}. This may be {@code null},, +   * in which case callbacks should be made synchronously on the background thread., +   */, +    private Platform platform;, +    Builder(Platform platform) {, +      this.platform = platform;, +    public Builder() {, +      this(Platform.get());, +    }, +, +      Executor callbackExecutor = this.callbackExecutor;, +      if (callbackExecutor == null) {, +        callbackExecutor = platform.defaultCallbackExecutor();, +      }, +, +      adapterFactories.add(platform.defaultCallAdapterFactory(callbackExecutor));, +++ b/retrofit/src/main/java/retrofit2/Platform.java, +  Executor defaultCallbackExecutor() {, +    return null;, +  }, +, +    @Override public Executor defaultCallbackExecutor() {, +      return new MainThreadExecutor();, +, +    @Override CallAdapter.Factory defaultCallAdapterFactory(Executor callbackExecutor) {, +    @Override public Executor defaultCallbackExecutor() {, +      return new MainThreadExecutor();, +, +    @Override CallAdapter.Factory defaultCallAdapterFactory(Executor callbackExecutor) {, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +  /**, +   * The executor used for {@link Callback} methods on a {@link Call}. This may be {@code null},, +   * in which case callbacks should be made synchronously on the background thread., +   */, +    private Platform platform;, +    Builder(Platform platform) {, +      this.platform = platform;, +    public Builder() {, +      this(Platform.get());, +    }, +, +      Executor callbackExecutor = this.callbackExecutor;, +      if (callbackExecutor == null) {, +        callbackExecutor = platform.defaultCallbackExecutor();, +      }, +, +      adapterFactories.add(platform.defaultCallAdapterFactory(callbackExecutor));, +++ b/retrofit/src/test/java/retrofit2/RetrofitTest.java, +import java.util.concurrent.Executors;, +  @Test public void callbackExecutorPropagatesDefaultJvm() {, +  @Test public void callbackExecutorPropagatesDefaultAndroid() {, +    final Executor executor = Executors.newSingleThreadExecutor();, +    Platform platform = new Platform() {, +      @Override Executor defaultCallbackExecutor() {, +        return executor;, +      }, +    };, +    Retrofit retrofit = new Retrofit.Builder(platform), +        .baseUrl("http://example.com/"), +        .build();, +    assertThat(retrofit.callbackExecutor()).isSameAs(executor);, +  }, +]