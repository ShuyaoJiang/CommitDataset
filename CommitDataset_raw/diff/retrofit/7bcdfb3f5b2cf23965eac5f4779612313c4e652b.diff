[+++ b/README.md, +  <version>1.9.0</version>, +compile 'com.squareup.retrofit:retrofit:1.9.0', +++ b/README.md, +  <version>1.9.0</version>, +compile 'com.squareup.retrofit:retrofit:1.9.0', +++ b/retrofit/src/main/java/retrofit/Retrofit.java, +  private final boolean validateEagerly;, +      List<CallAdapter.Factory> adapterFactories, Executor callbackExecutor,, +      boolean validateEagerly) {, +    this.validateEagerly = validateEagerly;, +    if (validateEagerly) {, +      eagerlyValidateMethods(service);, +    }, +  private void eagerlyValidateMethods(Class<?> service) {, +    Platform platform = Platform.get();, +    for (Method method : service.getDeclaredMethods()) {, +      if (!platform.isDefaultMethod(method)) {, +        loadMethodHandler(method);, +      }, +    }, +  }, +, +    private boolean validateEagerly;, +    /**, +     * When calling {@link #create} on the resulting {@link Retrofit} instance, eagerly validate, +     * the configuration of all methods in the supplied interface., +     */, +    public Builder validateEagerly() {, +      validateEagerly = true;, +      return this;, +    }, +, +      return new Retrofit(client, baseUrl, converterFactories, adapterFactories, callbackExecutor,, +          validateEagerly);, +++ b/README.md, +  <version>1.9.0</version>, +compile 'com.squareup.retrofit:retrofit:1.9.0', +++ b/retrofit/src/main/java/retrofit/Retrofit.java, +  private final boolean validateEagerly;, +      List<CallAdapter.Factory> adapterFactories, Executor callbackExecutor,, +      boolean validateEagerly) {, +    this.validateEagerly = validateEagerly;, +    if (validateEagerly) {, +      eagerlyValidateMethods(service);, +    }, +  private void eagerlyValidateMethods(Class<?> service) {, +    Platform platform = Platform.get();, +    for (Method method : service.getDeclaredMethods()) {, +      if (!platform.isDefaultMethod(method)) {, +        loadMethodHandler(method);, +      }, +    }, +  }, +, +    private boolean validateEagerly;, +    /**, +     * When calling {@link #create} on the resulting {@link Retrofit} instance, eagerly validate, +     * the configuration of all methods in the supplied interface., +     */, +    public Builder validateEagerly() {, +      validateEagerly = true;, +      return this;, +    }, +, +      return new Retrofit(client, baseUrl, converterFactories, adapterFactories, callbackExecutor,, +          validateEagerly);, +++ b/retrofit/src/test/java/retrofit/RetrofitTest.java, +  @Test public void validateEagerlyFailsAtCreation() {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .validateEagerly(), +        .build();, +, +    try {, +      retrofit.create(VoidService.class);, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessageStartingWith(, +          "Service methods cannot return void.\n    for method VoidService.nope");, +    }, +  }, +]