[+++ b/samples/pom.xml, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit-mock</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +++ b/samples/pom.xml, +    <dependency>, +      <groupId>com.squareup.retrofit</groupId>, +      <artifactId>retrofit-mock</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +++ b/samples/src/main/java/com/example/retrofit/SimpleMockService.java, +// Copyright 2013 Square, Inc., +package com.example.retrofit;, +, +import com.example.retrofit.SimpleService.Contributor;, +import com.example.retrofit.SimpleService.GitHub;, +import com.google.common.util.concurrent.ThreadFactoryBuilder;, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import retrofit.Call;, +import retrofit.MockRetrofit;, +import retrofit.Retrofit;, +, +/**, + * An example of using {@link MockRetrofit} to create a mock service implementation with, + * fake data. This re-uses the GitHub service from {@link SimpleService} for its mocking., + */, +public final class SimpleMockService {, +  /** A mock implementation of the {@link GitHub} API interface. */, +  static final class MockGitHub implements GitHub {, +    private final MockRetrofit mockRetrofit;, +    private final Map<String, Map<String, List<Contributor>>> ownerRepoContributors;, +, +    public MockGitHub(MockRetrofit mockRetrofit) {, +      this.mockRetrofit = mockRetrofit;, +, +      ownerRepoContributors = new LinkedHashMap<>();, +, +      // Seed some mock data., +      addContributor("square", "retrofit", "John Doe", 12);, +      addContributor("square", "retrofit", "Bob Smith", 2);, +      addContributor("square", "retrofit", "Big Bird", 40);, +      addContributor("square", "picasso", "Proposition Joe", 39);, +      addContributor("square", "picasso", "Keiser Soze", 152);, +    }, +, +    @Override public Call<List<Contributor>> contributors(String owner, String repo) {, +      List<Contributor> response = Collections.emptyList();, +      Map<String, List<Contributor>> repoContributors = ownerRepoContributors.get(owner);, +      if (repoContributors != null) {, +        List<Contributor> contributors = repoContributors.get(repo);, +        if (contributors != null) {, +          response = contributors;, +        }, +      }, +      return mockRetrofit.newSuccessCall(response);, +    }, +, +    public void addContributor(String owner, String repo, String name, int contributions) {, +      Map<String, List<Contributor>> repoContributors = ownerRepoContributors.get(owner);, +      if (repoContributors == null) {, +        repoContributors = new LinkedHashMap<>();, +        ownerRepoContributors.put(owner, repoContributors);, +      }, +      List<Contributor> contributors = repoContributors.get(repo);, +      if (contributors == null) {, +        contributors = new ArrayList<>();, +        repoContributors.put(repo, contributors);, +      }, +      contributors.add(new Contributor(name, contributions));, +    }, +  }, +, +  public static void main(String... args) throws IOException {, +    // Create a very simple Retrofit adapter which points the GitHub API., +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(SimpleService.API_URL), +        .build();, +, +    // Wrap the Retrofit instance to allow creating mock calls which fake network delay., +    ExecutorService bg = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder(), +        .setNameFormat("mock-retrofit-%d"), +        .setDaemon(true), +        .build());, +    MockRetrofit mockRetrofit = MockRetrofit.from(retrofit, bg);, +, +    // Create the mock implementation passing in the MockRetrofit to use., +    MockGitHub gitHub = new MockGitHub(mockRetrofit);, +, +    // Query for some contributors for a few repositories., +    printContributors(gitHub, "square", "retrofit");, +    printContributors(gitHub, "square", "picasso");]