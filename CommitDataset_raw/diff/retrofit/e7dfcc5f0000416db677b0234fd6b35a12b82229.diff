[+++ b/retrofit/src/main/java/retrofit/http/HttpRequestBuilder.java, +import java.util.LinkedHashSet;, +import javax.inject.Named;, +import org.apache.http.NameValuePair;, +import org.apache.http.client.methods.HttpUriRequest;, +import org.apache.http.message.BasicNameValuePair;, +import retrofit.io.TypedBytes;, +, +import static retrofit.http.RestAdapter.MethodDetails;, +  private MethodDetails methodDetails;, +  HttpRequestBuilder setMethod(MethodDetails methodDetails) {, +    this.methodDetails = methodDetails;, +    return methodDetails.method;, +    return methodDetails.isSynchronous;, +    return replacedRelativePath != null ? replacedRelativePath : methodDetails.path;, +    List<NameValuePair> params = new ArrayList<NameValuePair>();, +    for (QueryParam annotation : methodDetails.pathQueryParams) {, +      params.add(new BasicNameValuePair(annotation.name(), annotation.value()));, +    String[] pathNamedParams = methodDetails.pathNamedParams;, +    int singleEntityArgumentIndex = methodDetails.singleEntityArgumentIndex;, +    for (int i = 0; i < pathNamedParams.length; i++) {, +      if (i != singleEntityArgumentIndex) {, +        params.add(new BasicNameValuePair(pathNamedParams[i], String.valueOf(arg)));, +      } else {, +          // Just an object: serialize it with supplied converter., +    Set<String> pathParams = new LinkedHashSet<String>(methodDetails.pathParams);, +      String replacedPath = methodDetails.path;, +    return methodDetails.httpMethod.createFrom(this);, +++ b/retrofit/src/main/java/retrofit/http/HttpRequestBuilder.java, +import java.util.LinkedHashSet;, +import javax.inject.Named;, +import org.apache.http.NameValuePair;, +import org.apache.http.client.methods.HttpUriRequest;, +import org.apache.http.message.BasicNameValuePair;, +import retrofit.io.TypedBytes;, +, +import static retrofit.http.RestAdapter.MethodDetails;, +  private MethodDetails methodDetails;, +  HttpRequestBuilder setMethod(MethodDetails methodDetails) {, +    this.methodDetails = methodDetails;, +    return methodDetails.method;, +    return methodDetails.isSynchronous;, +    return replacedRelativePath != null ? replacedRelativePath : methodDetails.path;, +    List<NameValuePair> params = new ArrayList<NameValuePair>();, +    for (QueryParam annotation : methodDetails.pathQueryParams) {, +      params.add(new BasicNameValuePair(annotation.name(), annotation.value()));, +    String[] pathNamedParams = methodDetails.pathNamedParams;, +    int singleEntityArgumentIndex = methodDetails.singleEntityArgumentIndex;, +    for (int i = 0; i < pathNamedParams.length; i++) {, +      if (i != singleEntityArgumentIndex) {, +        params.add(new BasicNameValuePair(pathNamedParams[i], String.valueOf(arg)));, +      } else {, +          // Just an object: serialize it with supplied converter., +    Set<String> pathParams = new LinkedHashSet<String>(methodDetails.pathParams);, +      String replacedPath = methodDetails.path;, +    return methodDetails.httpMethod.createFrom(this);, +++ b/retrofit/src/main/java/retrofit/http/Platform.java, +import static retrofit.http.Utils.SynchronousExecutor;, +++ b/retrofit/src/main/java/retrofit/http/HttpRequestBuilder.java, +import java.util.LinkedHashSet;, +import javax.inject.Named;, +import org.apache.http.NameValuePair;, +import org.apache.http.client.methods.HttpUriRequest;, +import org.apache.http.message.BasicNameValuePair;, +import retrofit.io.TypedBytes;, +, +import static retrofit.http.RestAdapter.MethodDetails;, +  private MethodDetails methodDetails;, +  HttpRequestBuilder setMethod(MethodDetails methodDetails) {, +    this.methodDetails = methodDetails;, +    return methodDetails.method;, +    return methodDetails.isSynchronous;, +    return replacedRelativePath != null ? replacedRelativePath : methodDetails.path;, +    List<NameValuePair> params = new ArrayList<NameValuePair>();, +    for (QueryParam annotation : methodDetails.pathQueryParams) {, +      params.add(new BasicNameValuePair(annotation.name(), annotation.value()));, +    String[] pathNamedParams = methodDetails.pathNamedParams;, +    int singleEntityArgumentIndex = methodDetails.singleEntityArgumentIndex;, +    for (int i = 0; i < pathNamedParams.length; i++) {, +      if (i != singleEntityArgumentIndex) {, +        params.add(new BasicNameValuePair(pathNamedParams[i], String.valueOf(arg)));, +      } else {, +          // Just an object: serialize it with supplied converter., +    Set<String> pathParams = new LinkedHashSet<String>(methodDetails.pathParams);, +      String replacedPath = methodDetails.path;, +    return methodDetails.httpMethod.createFrom(this);, +++ b/retrofit/src/main/java/retrofit/http/Platform.java, +import static retrofit.http.Utils.SynchronousExecutor;, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/http/HttpRequestBuilder.java, +import java.util.LinkedHashSet;, +import javax.inject.Named;, +import org.apache.http.NameValuePair;, +import org.apache.http.client.methods.HttpUriRequest;, +import org.apache.http.message.BasicNameValuePair;, +import retrofit.io.TypedBytes;, +, +import static retrofit.http.RestAdapter.MethodDetails;, +  private MethodDetails methodDetails;, +  HttpRequestBuilder setMethod(MethodDetails methodDetails) {]