[+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +  static final class RelativeUrl extends ParameterHandler<Object> {, +    @Override void apply(RequestBuilder builder, Object value) {, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +  static final class RelativeUrl extends ParameterHandler<Object> {, +    @Override void apply(RequestBuilder builder, Object value) {, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  void setRelativeUrl(Object relativeUrl) {, +    if (relativeUrl == null) throw new NullPointerException("@Url parameter is null.");, +    this.relativeUrl = relativeUrl.toString();, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +  static final class RelativeUrl extends ParameterHandler<Object> {, +    @Override void apply(RequestBuilder builder, Object value) {, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  void setRelativeUrl(Object relativeUrl) {, +    if (relativeUrl == null) throw new NullPointerException("@Url parameter is null.");, +    this.relativeUrl = relativeUrl.toString();, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +        if (type == HttpUrl.class, +            || type == String.class, +            || type == URI.class, +            || (type instanceof Class && "android.net.Uri".equals(((Class<?>) type).getName()))) {, +          return new ParameterHandler.RelativeUrl();, +          throw parameterError(p,, +              "@Url must be okhttp3.HttpUrl, String, java.net.URI, or android.net.Uri type.");, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +  static final class RelativeUrl extends ParameterHandler<Object> {, +    @Override void apply(RequestBuilder builder, Object value) {, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  void setRelativeUrl(Object relativeUrl) {, +    if (relativeUrl == null) throw new NullPointerException("@Url parameter is null.");, +    this.relativeUrl = relativeUrl.toString();, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +        if (type == HttpUrl.class, +            || type == String.class, +            || type == URI.class, +            || (type instanceof Class && "android.net.Uri".equals(((Class<?>) type).getName()))) {, +          return new ParameterHandler.RelativeUrl();, +          throw parameterError(p,, +              "@Url must be okhttp3.HttpUrl, String, java.net.URI, or android.net.Uri type.");, +++ b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java, +import okhttp3.HttpUrl;, +  @Test public void getWithHttpUrl() {, +    class Example {, +      @GET, +      Call<ResponseBody> method(@Url HttpUrl url) {, +        return null;, +      }, +    }, +, +    Request request = buildRequest(Example.class, HttpUrl.parse("http://example.com/foo/bar/"));, +    assertThat(request.method()).isEqualTo("GET");, +    assertThat(request.headers().size()).isZero();, +    assertThat(request.url()).isEqualTo(HttpUrl.parse("http://example.com/foo/bar/"));, +    assertThat(request.body()).isNull();, +  }, +, +  @Test public void getWithNullUrl() {, +    class Example {, +      @GET, +      Call<ResponseBody> method(@Url HttpUrl url) {, +        return null;, +      }, +    }, +, +    try {, +      buildRequest(Example.class, (HttpUrl) null);, +      fail();, +    } catch (NullPointerException expected) {, +      assertThat(expected).hasMessage("@Url parameter is null.");, +    }, +  }, +, +          "@Url must be okhttp3.HttpUrl, String, java.net.URI, or android.net.Uri type.", +              + " (parameter #1)\n"]