[+++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java, +import java.math.BigInteger;, +  @Test public void headerParamToString() throws Exception {, +    Object toStringHeaderParam = new BigInteger("1234");, +    Request request = new Helper() //, +        .setMethod("GET") //, +        .setUrl("http://example.com") //, +        .setPath("/foo/bar/") //, +        .addHeaderParam("kit", toStringHeaderParam) //, +        .build();, +    assertThat(request.getMethod()).isEqualTo("GET");, +    assertThat(request.getHeaders()) //, +        .containsExactly(new Header("kit", "1234"));, +    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");, +    assertThat(request.getBody()).isNull();, +  }, +, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java, +import java.math.BigInteger;, +  @Test public void headerParamToString() throws Exception {, +    Object toStringHeaderParam = new BigInteger("1234");, +    Request request = new Helper() //, +        .setMethod("GET") //, +        .setUrl("http://example.com") //, +        .setPath("/foo/bar/") //, +        .addHeaderParam("kit", toStringHeaderParam) //, +        .build();, +    assertThat(request.getMethod()).isEqualTo("GET");, +    assertThat(request.getHeaders()) //, +        .containsExactly(new Header("kit", "1234"));, +    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");, +    assertThat(request.getBody()).isNull();, +  }, +, +++ b/retrofit/src/test/java/retrofit/RestMethodInfoTest.java, +import java.math.BigInteger;, +  @Test public void headerConvertedToString() {, +      @GET("/") Response a(@Header("first") BigInteger bi) {, +, +    assertThat(methodInfo.requestParamNames).containsExactly("first");, +    assertThat(methodInfo.requestParamUsage).containsExactly(HEADER);, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java, +import java.math.BigInteger;, +  @Test public void headerParamToString() throws Exception {, +    Object toStringHeaderParam = new BigInteger("1234");, +    Request request = new Helper() //, +        .setMethod("GET") //, +        .setUrl("http://example.com") //, +        .setPath("/foo/bar/") //, +        .addHeaderParam("kit", toStringHeaderParam) //, +        .build();, +    assertThat(request.getMethod()).isEqualTo("GET");, +    assertThat(request.getHeaders()) //, +        .containsExactly(new Header("kit", "1234"));, +    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");, +    assertThat(request.getBody()).isNull();, +  }, +, +++ b/retrofit/src/test/java/retrofit/RestMethodInfoTest.java, +import java.math.BigInteger;, +  @Test public void headerConvertedToString() {, +      @GET("/") Response a(@Header("first") BigInteger bi) {, +, +    assertThat(methodInfo.requestParamNames).containsExactly("first");, +    assertThat(methodInfo.requestParamUsage).containsExactly(HEADER);, +++ b/website/index.html, +            <p>A request Header can be updated dynamically using the <code>@Header</code> annotation. A corresponding parameter must be provided to the <code>@Header</code>. If the value is null, the header will be omitted. Otherwise, <code>toString</code> will be called on the value, and the result used.</p>]