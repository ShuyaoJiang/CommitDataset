[+++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +        if (RxSupport.isObservable(rawReturnType)) {, +          returnType = RxSupport.getObservableType(returnType, rawReturnType);, +, +  /** Indirection to avoid log complaints if RxJava isn't present. */, +  private static final class RxSupport {, +    public static boolean isObservable(Class rawType) {, +      return rawType == Observable.class;, +    }, +, +    public static Type getObservableType(Type contextType, Class contextRawType) {, +      return Types.getSupertype(contextType, contextRawType, Observable.class);, +    }, +  }, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +        if (RxSupport.isObservable(rawReturnType)) {, +          returnType = RxSupport.getObservableType(returnType, rawReturnType);, +, +  /** Indirection to avoid log complaints if RxJava isn't present. */, +  private static final class RxSupport {, +    public static boolean isObservable(Class rawType) {, +      return rawType == Observable.class;, +    }, +, +    public static Type getObservableType(Type contextType, Class contextRawType) {, +      return Types.getSupertype(contextType, contextRawType, Observable.class);, +    }, +  }, +++ b/retrofit/src/main/java/retrofit/Utils.java, +    if (service.getInterfaces().length > 0) {, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +        if (RxSupport.isObservable(rawReturnType)) {, +          returnType = RxSupport.getObservableType(returnType, rawReturnType);, +, +  /** Indirection to avoid log complaints if RxJava isn't present. */, +  private static final class RxSupport {, +    public static boolean isObservable(Class rawType) {, +      return rawType == Observable.class;, +    }, +, +    public static Type getObservableType(Type contextType, Class contextRawType) {, +      return Types.getSupertype(contextType, contextRawType, Observable.class);, +    }, +  }, +++ b/retrofit/src/main/java/retrofit/Utils.java, +    if (service.getInterfaces().length > 0) {, +++ b/retrofit/src/test/java/retrofit/RestAdapterTest.java, +      fail("Interface inheritance should not be supported.");]