[+++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +  MockHttpRetrofitError(String message, String url, Response response, Object body,, +      Type responseType) {, +    super(message, url, response, null, responseType, false, null);, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +  MockHttpRetrofitError(String message, String url, Response response, Object body,, +      Type responseType) {, +    super(message, url, response, null, responseType, false, null);, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +        throw new MockHttpRetrofitError(httpEx.reason, url, response, httpEx.responseBody,, +            methodInfo.responseObjectType);, +                httpEx.responseBody, methodInfo.responseObjectType);, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +  MockHttpRetrofitError(String message, String url, Response response, Object body,, +      Type responseType) {, +    super(message, url, response, null, responseType, false, null);, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +        throw new MockHttpRetrofitError(httpEx.reason, url, response, httpEx.responseBody,, +            methodInfo.responseObjectType);, +                httpEx.responseBody, methodInfo.responseObjectType);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +      assertThat(e.getSuccessType()).isEqualTo(Object.class);, +  @Test public void nullBodyIsAllowedOnHttpException() throws Exception {, +    mockRestAdapter.setDelay(100);, +    mockRestAdapter.setVariancePercentage(0);, +    mockRestAdapter.setErrorPercentage(0);, +, +    class MockObservableExample implements ObservableExample {, +      @Override public Observable<String> doStuff() {, +        throw MockHttpException.newBadRequest(null);, +      }, +    }, +, +    ObservableExample mockService =, +        mockRestAdapter.create(ObservableExample.class, new MockObservableExample());, +, +    final long startNanos = System.nanoTime();, +    final AtomicLong tookMs = new AtomicLong();, +    final AtomicReference<RetrofitError> errorRef = new AtomicReference<RetrofitError>();, +    mockService.doStuff().subscribe(new Action1<Object>() {, +      @Override public void call(Object o) {, +        throw new AssertionError();, +      }, +    }, new Action1<Throwable>() {, +      @Override public void call(Throwable error) {, +        assertThat(error).isInstanceOf(RetrofitError.class);, +        tookMs.set(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNanos));, +        errorRef.set((RetrofitError) error);, +      }, +    });, +, +    verify(httpExecutor, atLeastOnce()).execute(any(Runnable.class));, +    verifyZeroInteractions(callbackExecutor);, +, +    RetrofitError error = errorRef.get();, +    assertThat(tookMs.get()).isGreaterThanOrEqualTo(100);, +    assertThat(error.isNetworkError()).isFalse();, +    assertThat(error.getResponse().getStatus()).isEqualTo(400);, +    assertThat(error.getResponse().getReason()).isEqualTo("Bad Request");, +    assertThat(error.getBody()).isNull();, +    assertThat(error.getSuccessType()).isEqualTo(String.class);, +  }, +]