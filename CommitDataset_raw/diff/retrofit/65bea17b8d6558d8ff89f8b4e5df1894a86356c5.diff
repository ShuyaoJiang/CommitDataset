[+++ b/retrofit/src/main/java/retrofit2/RequestFactoryParser.java, +    Type[] parameterTypes = method.getGenericParameterTypes();, +    Annotation[][] parameterAnnotationsArray = method.getParameterAnnotations();, +    int count = parameterAnnotationsArray.length;, +      Type parameterType = parameterTypes[i];, +      if (Utils.hasUnresolvableType(parameterType)) {, +            parameterType);, +      Annotation[] parameterAnnotations = parameterAnnotationsArray[i];, +      if (parameterAnnotations != null) {, +        for (Annotation parameterAnnotation : parameterAnnotations) {, +          if (parameterAnnotation instanceof Url) {, +            if (parameterType == String.class) {, +            } else if (parameterType == URI.class) {, +            } else if (parameterType instanceof Class, +                && "android.net.Uri".equals(((Class<?>) parameterType).getCanonicalName())) {, +          } else if (parameterAnnotation instanceof Path) {, +            Path path = (Path) parameterAnnotation;, +            Converter<?, String> converter =, +                retrofit.stringConverter(parameterType, parameterAnnotations);, +            action = new RequestAction.Path<>(name, converter, path.encoded());, +          } else if (parameterAnnotation instanceof Query) {, +            Query query = (Query) parameterAnnotation;, +            Class<?> rawParameterType = Types.getRawType(parameterType);, +              if (!(parameterType instanceof ParameterizedType)) {, +              ParameterizedType parameterizedType = (ParameterizedType) parameterType;, +              Converter<?, String> converter =, +                  retrofit.stringConverter(iterableType, parameterAnnotations);, +              action = new RequestAction.Query<>(name, converter, encoded).iterable();, +              Converter<?, String> converter =, +                  retrofit.stringConverter(arrayComponentType, parameterAnnotations);, +              action = new RequestAction.Query<>(name, converter, encoded).array();, +              Converter<?, String> converter =, +                  retrofit.stringConverter(parameterType, parameterAnnotations);, +              action = new RequestAction.Query<>(name, converter, encoded);, +          } else if (parameterAnnotation instanceof QueryMap) {, +            Class<?> rawParameterType = Types.getRawType(parameterType);, +            if (!Map.class.isAssignableFrom(rawParameterType)) {, +            Type mapType = Types.getSupertype(parameterType, rawParameterType, Map.class);, +                retrofit.stringConverter(valueType, parameterAnnotations);, +            QueryMap queryMap = (QueryMap) parameterAnnotation;, +          } else if (parameterAnnotation instanceof Header) {, +            Header header = (Header) parameterAnnotation;, +            Class<?> rawParameterType = Types.getRawType(parameterType);, +              if (!(parameterType instanceof ParameterizedType)) {, +              ParameterizedType parameterizedType = (ParameterizedType) parameterType;, +              Converter<?, String> converter =, +                  retrofit.stringConverter(iterableType, parameterAnnotations);, +              action = new RequestAction.Header<>(name, converter).iterable();, +              Converter<?, String> converter =, +                  retrofit.stringConverter(arrayComponentType, parameterAnnotations);, +              action = new RequestAction.Header<>(name, converter).array();, +              Converter<?, String> converter =, +                  retrofit.stringConverter(parameterType, parameterAnnotations);, +              action = new RequestAction.Header<>(name, converter);, +          } else if (parameterAnnotation instanceof Field) {, +            Field field = (Field) parameterAnnotation;, +            Class<?> rawParameterType = Types.getRawType(parameterType);, +              if (!(parameterType instanceof ParameterizedType)) {, +              ParameterizedType parameterizedType = (ParameterizedType) parameterType;, +              Converter<?, String> converter =, +                  retrofit.stringConverter(iterableType, parameterAnnotations);, +              action = new RequestAction.Field<>(name, converter, encoded).iterable();, +              Converter<?, String> converter =, +                  retrofit.stringConverter(arrayComponentType, parameterAnnotations);, +              action = new RequestAction.Field<>(name, converter, encoded).array();, +              Converter<?, String> converter =, +                  retrofit.stringConverter(parameterType, parameterAnnotations);, +              action = new RequestAction.Field<>(name, converter, encoded);, +          } else if (parameterAnnotation instanceof FieldMap) {, +            Class<?> rawParameterType = Types.getRawType(parameterType);, +            if (!Map.class.isAssignableFrom(rawParameterType)) {, +            Type mapType = Types.getSupertype(parameterType, rawParameterType, Map.class);, +                retrofit.stringConverter(valueType, parameterAnnotations);, +            FieldMap fieldMap = (FieldMap) parameterAnnotation;, +          } else if (parameterAnnotation instanceof Part) {, +            Part part = (Part) parameterAnnotation;, +            Class<?> rawParameterType = Types.getRawType(parameterType);, +              if (!(parameterType instanceof ParameterizedType)) {, +              ParameterizedType parameterizedType = (ParameterizedType) parameterType;, +              Converter<?, RequestBody> converter =, +                  retrofit.requestBodyConverter(iterableType, parameterAnnotations,, +              action = new RequestAction.Part<>(headers, converter).iterable();, +              Converter<?, RequestBody> converter =, +                  retrofit.requestBodyConverter(arrayComponentType, parameterAnnotations,, +              action = new RequestAction.Part<>(headers, converter).array();, +              Converter<?, RequestBody> converter =, +                  retrofit.requestBodyConverter(parameterType, parameterAnnotations,, +              action = new RequestAction.Part<>(headers, converter);, +          } else if (parameterAnnotation instanceof PartMap) {, +            Class<?> rawParameterType = Types.getRawType(parameterType);, +            if (!Map.class.isAssignableFrom(rawParameterType)) {, +            Type mapType = Types.getSupertype(parameterType, rawParameterType, Map.class);, +                retrofit.requestBodyConverter(valueType, parameterAnnotations,, +            PartMap partMap = (PartMap) parameterAnnotation;, +          } else if (parameterAnnotation instanceof Body) {, +              converter = retrofit.requestBodyConverter(parameterType, parameterAnnotations,, +              throw parameterError(e, i, "Unable to create @Body converter for %s", parameterType);]