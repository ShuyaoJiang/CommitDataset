[+++ b/pom.xml, +    <android-maven.version>3.5.1</android-maven.version>, +    <gson.version>2.2.3</gson.version>, +    <okhttp.version>1.0.1</okhttp.version>, +    <guava.version>14.0</guava.version>, +++ b/pom.xml, +    <android-maven.version>3.5.1</android-maven.version>, +    <gson.version>2.2.3</gson.version>, +    <okhttp.version>1.0.1</okhttp.version>, +    <guava.version>14.0</guava.version>, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +  // Upper and lower characters, digits, underscores, and hyphens, starting with a character., +  private static final String PARAM = "[a-zA-Z][a-zA-Z0-9_-]*";, +  private static final Pattern PARAM_NAME_REGEX = Pattern.compile(PARAM);, +  private static final Pattern PARAM_URL_REGEX = Pattern.compile("\\{(" + PARAM + ")\\}");, +      Matcher queryParamMatcher = PARAM_URL_REGEX.matcher(query);, +            if (!PARAM_NAME_REGEX.matcher(name).matches()) {, +              throw new IllegalStateException("Path parameter name is not valid: ", +                  + name, +                  + ". Must match ", +                  + PARAM_URL_REGEX.pattern());, +            }, +                  "Method URL \"" + requestUrl + "\" does not contain {" + name + "}.");, +    Matcher m = PARAM_URL_REGEX.matcher(path);, +++ b/pom.xml, +    <android-maven.version>3.5.1</android-maven.version>, +    <gson.version>2.2.3</gson.version>, +    <okhttp.version>1.0.1</okhttp.version>, +    <guava.version>14.0</guava.version>, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +  // Upper and lower characters, digits, underscores, and hyphens, starting with a character., +  private static final String PARAM = "[a-zA-Z][a-zA-Z0-9_-]*";, +  private static final Pattern PARAM_NAME_REGEX = Pattern.compile(PARAM);, +  private static final Pattern PARAM_URL_REGEX = Pattern.compile("\\{(" + PARAM + ")\\}");, +      Matcher queryParamMatcher = PARAM_URL_REGEX.matcher(query);, +            if (!PARAM_NAME_REGEX.matcher(name).matches()) {, +              throw new IllegalStateException("Path parameter name is not valid: ", +                  + name, +                  + ". Must match ", +                  + PARAM_URL_REGEX.pattern());, +            }, +                  "Method URL \"" + requestUrl + "\" does not contain {" + name + "}.");, +    Matcher m = PARAM_URL_REGEX.matcher(path);, +++ b/retrofit/src/test/java/retrofit/RestMethodInfoTest.java, +import static org.junit.Assert.fail;, +    expectParams("/foo/bar");, +    expectParams("/foo/bar/{}");, +    expectParams("/foo/bar/{taco}", "taco");, +    expectParams("/foo/bar/{t}", "t");, +    expectParams("/foo/bar/{!!!}/"); // Invalid parameter., +    expectParams("/foo/bar/{}/{taco}", "taco");, +    expectParams("/foo/bar/{taco}/or/{burrito}", "taco", "burrito");, +    expectParams("/foo/bar/{taco}/or/{taco}", "taco");, +    expectParams("/foo/bar/{taco-shell}", "taco-shell");, +    expectParams("/foo/bar/{taco_shell}", "taco_shell");, +    expectParams("/foo/bar/{sha256}", "sha256");, +    expectParams("/foo/bar/{TACO}", "TACO");, +    expectParams("/foo/bar/{taco}/{tAco}/{taCo}", "taco", "tAco", "taCo");, +    expectParams("/foo/bar/{1}"); // Invalid parameter, name cannot start with digit., +  @Test public void invalidPathParam() throws Exception {, +    class Example {, +      @GET("/") Response a(@Path("hey!") String thing) {, +        return null;, +      }, +    }, +, +    Method method = TestingUtils.getMethod(Example.class, "a");, +    RestMethodInfo methodInfo = new RestMethodInfo(method);, +    try {, +      methodInfo.init();, +      fail();, +    } catch (IllegalStateException e) {, +      assertThat(e.getMessage()).startsWith("Path parameter name is not valid: hey!.");, +    }, +  }, +]