[+++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +            if (!methodInfo.isStreaming) {, +              // Read the entire stream and replace with one backed by a byte[]., +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +            if (!methodInfo.isStreaming) {, +              // Read the entire stream and replace with one backed by a byte[]., +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +import retrofit.http.Streaming;, +  boolean isStreaming;, +      } else if (annotationType == Streaming.class) {, +              "Only methods having %s as data type are allowed to have @%s annotation.",, +              Response.class.getSimpleName(), Streaming.class.getSimpleName());, +        isStreaming = true;, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +            if (!methodInfo.isStreaming) {, +              // Read the entire stream and replace with one backed by a byte[]., +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +import retrofit.http.Streaming;, +  boolean isStreaming;, +      } else if (annotationType == Streaming.class) {, +              "Only methods having %s as data type are allowed to have @%s annotation.",, +              Response.class.getSimpleName(), Streaming.class.getSimpleName());, +        isStreaming = true;, +++ b/retrofit/src/main/java/retrofit/client/Response.java, +/**, + * An HTTP response., + * <p>, + * When used directly as a data type for an interface method, the response body is buffered to a, + * {@code byte[]}. Annotate the method with {@link retrofit.http.Streaming @Streaming} for an, + * unbuffered stream from the network., + */, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +            if (!methodInfo.isStreaming) {, +              // Read the entire stream and replace with one backed by a byte[]., +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +import retrofit.http.Streaming;, +  boolean isStreaming;, +      } else if (annotationType == Streaming.class) {, +              "Only methods having %s as data type are allowed to have @%s annotation.",, +              Response.class.getSimpleName(), Streaming.class.getSimpleName());, +        isStreaming = true;, +++ b/retrofit/src/main/java/retrofit/client/Response.java, +/**, + * An HTTP response., + * <p>, + * When used directly as a data type for an interface method, the response body is buffered to a, + * {@code byte[]}. Annotate the method with {@link retrofit.http.Streaming @Streaming} for an, + * unbuffered stream from the network., + */, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +            if (!methodInfo.isStreaming) {, +              // Read the entire stream and replace with one backed by a byte[]., +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +import retrofit.http.Streaming;, +  boolean isStreaming;, +      } else if (annotationType == Streaming.class) {, +              "Only methods having %s as data type are allowed to have @%s annotation.",, +              Response.class.getSimpleName(), Streaming.class.getSimpleName());, +        isStreaming = true;, +++ b/retrofit/src/main/java/retrofit/client/Response.java, +/**, + * An HTTP response., + * <p>, + * When used directly as a data type for an interface method, the response body is buffered to a, + * {@code byte[]}. Annotate the method with {@link retrofit.http.Streaming @Streaming} for an, + * unbuffered stream from the network., + */, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/http/Streaming.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit.http;, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Treat the response body on methods returning {@link retrofit.client.Response Response} as is,, + * i.e. without converting {@link retrofit.client.Response#getBody() getBody()} to {@code byte[]}., + */, +@Documented, +@Target(METHOD)]