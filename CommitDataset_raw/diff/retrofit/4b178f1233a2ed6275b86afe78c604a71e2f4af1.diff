[+++ b/retrofit/src/main/java/retrofit/http/Converter.java, +   * {@link Callback#serverError(retrofit.http.Callback.ServerError, int)} or throw a, +   * {@link retrofit.http.RestException.ServerHttpException}., +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +   * {@link Callback#serverError(retrofit.http.Callback.ServerError, int)} or throw a, +   * {@link retrofit.http.RestException.ServerHttpException}., +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import static retrofit.http.RestAdapter.UTF_8;, +, +      InputStreamReader isr = new InputStreamReader(new ByteArrayInputStream(body), UTF_8);, +        jsonBytes = gson.toJson(object).getBytes(UTF_8);, +        throw new IllegalStateException(UTF_8 + " encoding does not exist.");, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +   * {@link Callback#serverError(retrofit.http.Callback.ServerError, int)} or throw a, +   * {@link retrofit.http.RestException.ServerHttpException}., +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import static retrofit.http.RestAdapter.UTF_8;, +, +      InputStreamReader isr = new InputStreamReader(new ByteArrayInputStream(body), UTF_8);, +        jsonBytes = gson.toJson(object).getBytes(UTF_8);, +        throw new IllegalStateException(UTF_8 + " encoding does not exist.");, +++ b/retrofit/src/main/java/retrofit/http/HttpMethodType.java, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +   * {@link Callback#serverError(retrofit.http.Callback.ServerError, int)} or throw a, +   * {@link retrofit.http.RestException.ServerHttpException}., +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import static retrofit.http.RestAdapter.UTF_8;, +, +      InputStreamReader isr = new InputStreamReader(new ByteArrayInputStream(body), UTF_8);, +        jsonBytes = gson.toJson(object).getBytes(UTF_8);, +        throw new IllegalStateException(UTF_8 + " encoding does not exist.");, +++ b/retrofit/src/main/java/retrofit/http/HttpMethodType.java, +++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +import org.apache.http.protocol.HTTP;, +  static final String UTF_8 = "UTF-8";, +            String headerName = realHeader.getName();, +            String headerValue = realHeader.getValue();, +, +            if (HTTP.CONTENT_TYPE.equalsIgnoreCase(headerName) //, +                && !UTF_8.equalsIgnoreCase(Utils.parseCharset(headerValue))) {, +              throw new IOException("Only UTF-8 charset supported.");, +            }, +, +            headers[i] = new Header(headerName, headerValue);, +    String bodyString = new String(body, UTF_8);, +      callbackType = Utils.getGenericSupertype(callbackType, callbackClass, Callback.class);, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +   * {@link Callback#serverError(retrofit.http.Callback.ServerError, int)} or throw a, +   * {@link retrofit.http.RestException.ServerHttpException}., +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import static retrofit.http.RestAdapter.UTF_8;, +, +      InputStreamReader isr = new InputStreamReader(new ByteArrayInputStream(body), UTF_8);, +        jsonBytes = gson.toJson(object).getBytes(UTF_8);, +        throw new IllegalStateException(UTF_8 + " encoding does not exist.");, +++ b/retrofit/src/main/java/retrofit/http/HttpMethodType.java, +++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +import org.apache.http.protocol.HTTP;, +  static final String UTF_8 = "UTF-8";, +            String headerName = realHeader.getName();, +            String headerValue = realHeader.getValue();, +, +            if (HTTP.CONTENT_TYPE.equalsIgnoreCase(headerName) //, +                && !UTF_8.equalsIgnoreCase(Utils.parseCharset(headerValue))) {, +              throw new IOException("Only UTF-8 charset supported.");, +            }, +, +            headers[i] = new Header(headerName, headerValue);, +    String bodyString = new String(body, UTF_8);, +      callbackType = Utils.getGenericSupertype(callbackType, callbackClass, Callback.class);, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/http/Converter.java, +   * {@link Callback#serverError(retrofit.http.Callback.ServerError, int)} or throw a, +   * {@link retrofit.http.RestException.ServerHttpException}., +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +import static retrofit.http.RestAdapter.UTF_8;, +, +      InputStreamReader isr = new InputStreamReader(new ByteArrayInputStream(body), UTF_8);, +        jsonBytes = gson.toJson(object).getBytes(UTF_8);, +        throw new IllegalStateException(UTF_8 + " encoding does not exist.");, +++ b/retrofit/src/main/java/retrofit/http/HttpMethodType.java, +++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +import org.apache.http.protocol.HTTP;, +  static final String UTF_8 = "UTF-8";, +            String headerName = realHeader.getName();, +            String headerValue = realHeader.getValue();, +, +            if (HTTP.CONTENT_TYPE.equalsIgnoreCase(headerName) //, +                && !UTF_8.equalsIgnoreCase(Utils.parseCharset(headerValue))) {, +              throw new IOException("Only UTF-8 charset supported.");, +            }, +, +            headers[i] = new Header(headerName, headerValue);, +    String bodyString = new String(body, UTF_8);, +      callbackType = Utils.getGenericSupertype(callbackType, callbackClass, Callback.class);, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/http/Utils.java, +// Copyright 2012 Square, Inc., +package retrofit.http;, +]