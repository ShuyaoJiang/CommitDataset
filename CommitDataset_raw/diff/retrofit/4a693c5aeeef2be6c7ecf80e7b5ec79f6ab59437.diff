[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +    return observable;, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +    return observable;, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +    return observable;, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java, +import java.io.IOException;, +      @Override public Object convert(ResponseBody value) throws IOException {, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +    return observable;, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java, +import java.io.IOException;, +      @Override public Object convert(ResponseBody value) throws IOException {, +++ b/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java, +import java.io.IOException;, +      @Override public Object convert(ResponseBody value) throws IOException {, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +    return observable;, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java, +import java.io.IOException;, +      @Override public Object convert(ResponseBody value) throws IOException {, +++ b/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java, +import java.io.IOException;, +      @Override public Object convert(ResponseBody value) throws IOException {, +++ b/retrofit-converters/jaxb/README.md, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +    return observable;, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java, +import java.io.IOException;, +      @Override public Object convert(ResponseBody value) throws IOException {, +++ b/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java, +import java.io.IOException;, +      @Override public Object convert(ResponseBody value) throws IOException {, +++ b/retrofit-converters/jaxb/README.md, +++ b/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbResponseConverter.java, +, +    // Prevent XML External Entity attacks (XXE)., +    xmlInputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);, +    xmlInputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, false);, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +    return observable;, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java, +import java.io.IOException;, +      @Override public Object convert(ResponseBody value) throws IOException {, +++ b/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java, +import java.io.IOException;, +      @Override public Object convert(ResponseBody value) throws IOException {, +++ b/retrofit-converters/jaxb/README.md, +++ b/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbResponseConverter.java, +, +    // Prevent XML External Entity attacks (XXE)., +    xmlInputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);, +    xmlInputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, false);, +++ b/retrofit-converters/jaxb/src/test/java/retrofit2/converter/jaxb/JaxbConverterFactoryTest.java, +, +  @Test public void externalEntity() throws Exception {, +    server.enqueue(new MockResponse(), +        .setBody("", +            + "<?xml version=\"1.0\" ?>", +            + "<!DOCTYPE contact[", +            + "  <!ENTITY secret SYSTEM \"" + server.url("/secret.txt") + "\">", +            + "]>", +            + "<contact>", +            + "<name>&secret;</name>", +            + "</contact>"));, +    server.enqueue(new MockResponse(), +        .setBody("hello"));, +, +    Call<Contact> call = service.getXml();, +    try {, +      Response<Contact> response = call.execute();, +      response.body();, +      fail();, +    } catch (RuntimeException expected) {, +      assertThat(expected).hasMessageContaining("ParseError");, +    }, +, +    assertThat(server.getRequestCount()).isEqualTo(1);, +  }, +, +  @Test public void externalDtd() throws Exception {, +    server.enqueue(new MockResponse(), +        .setBody("", +            + "<?xml version=\"1.0\" ?>", +            + "<!DOCTYPE contact SYSTEM \"" + server.url("/contact.dtd") + "\">", +            + "<contact>", +            + "<name>&secret;</name>", +            + "</contact>"));, +    server.enqueue(new MockResponse(), +        .setBody("", +            + "<!ELEMENT contact (name)>\n", +            + "<!ELEMENT name (#PCDATA)>\n", +            + "<!ENTITY secret \"hello\">"));]