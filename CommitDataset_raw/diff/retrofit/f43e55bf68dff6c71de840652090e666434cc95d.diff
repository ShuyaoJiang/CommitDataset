[+++ b/retrofit/src/main/java/retrofit/http/Platform.java, +import android.util.Log;, +  abstract RestAdapter.Log defaultLog();, +, +    @Override RestAdapter.Log defaultLog() {, +      return new RestAdapter.Log() {, +        @Override public void log(String message) {, +          System.out.println(message);, +        }, +      };, +    }, +, +    @Override RestAdapter.Log defaultLog() {, +      return new RestAdapter.Log() {, +        @Override public void log(String message) {, +          Log.d("Retrofit", message);, +        }, +      };, +    }, +++ b/retrofit/src/main/java/retrofit/http/Platform.java, +import android.util.Log;, +  abstract RestAdapter.Log defaultLog();, +, +    @Override RestAdapter.Log defaultLog() {, +      return new RestAdapter.Log() {, +        @Override public void log(String message) {, +          System.out.println(message);, +        }, +      };, +    }, +, +    @Override RestAdapter.Log defaultLog() {, +      return new RestAdapter.Log() {, +        @Override public void log(String message) {, +          Log.d("Retrofit", message);, +        }, +      };, +    }, +++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +import java.io.ByteArrayOutputStream;, +  /** Simple logging abstraction for debug messages. */, +  public interface Log {, +    /** Log a debug message to the appropriate console. */, +    void log(String message);, +  }, +, +  private final Log log;, +  private volatile boolean debug;, +      Executor callbackExecutor, Headers headers, Converter converter, Profiler profiler, Log log,, +      boolean debug) {, +    this.log = log;, +    this.debug = debug;, +  }, +, +  /** Toggle debug logging on and off. */, +  public void setDebug(boolean debug) {, +    this.debug = debug;, +      String serverUrl = server.getUrl();, +      String url = serverUrl; // Keep some url in case RequestBuilder throws an exception., +            .setApiUrl(serverUrl), +          Thread.currentThread().setName(THREAD_PREFIX + url.substring(serverUrl.length()));, +        if (debug) {, +          request = logAndReplaceRequest(request);, +          RequestInformation requestInfo = getRequestInfo(serverUrl, methodDetails, request);, +        if (debug) {, +          response = logAndReplaceResponse(url, response, elapsedTime);, +          TypedInput body = response.getBody();, +  /** Log request headers and body. Consumes request body and returns identical replacement. */, +  private Request logAndReplaceRequest(Request request) throws IOException {, +    log.log(String.format("---> HTTP %s %s", request.getMethod(), request.getUrl()));, +, +      log.log(header.getName() + ": " + header.getValue());, +    TypedOutput body = request.getBody();, +    int bodySize = 0;, +    if (body != null) {, +      if (!request.getHeaders().isEmpty()) {, +        log.log("");, +      }, +, +      ByteArrayOutputStream baos = new ByteArrayOutputStream();, +      body.writeTo(baos);, +      byte[] bodyBytes = baos.toByteArray();, +      bodySize = bodyBytes.length;, +      String bodyMime = body.mimeType();, +      String bodyString = new String(bodyBytes, Utils.parseCharset(bodyMime));, +      for (int i = 0; i < bodyString.length(); i += LOG_CHUNK_SIZE) {, +        int end = Math.min(bodyString.length(), i + LOG_CHUNK_SIZE);, +        log.log(bodyString.substring(i, end));, +      }, +, +      body = new TypedByteArray(bodyMime, bodyBytes);, +    }, +, +    log.log(String.format("---> END HTTP (%s-byte body)", bodySize));, +, +    // Since we consumed the original request, return a new, identical one from its bytes., +    return new Request(request.getMethod(), request.getUrl(), request.getHeaders(), body);, +  }, +, +  /** Log response headers and body. Consumes response body and returns identical replacement. */]