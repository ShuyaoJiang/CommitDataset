[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  final NetworkBehavior behavior;, +  final ExecutorService backgroundExecutor;, +  final Call<T> delegate;, +  volatile boolean canceled;, +      boolean delaySleep() {, +            callback.onFailure(new IOException("canceled"));, +          callback.onFailure(new IOException("canceled"));, +      throw new IOException("canceled");, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  final NetworkBehavior behavior;, +  final ExecutorService backgroundExecutor;, +  final Call<T> delegate;, +  volatile boolean canceled;, +      boolean delaySleep() {, +            callback.onFailure(new IOException("canceled"));, +          callback.onFailure(new IOException("canceled"));, +      throw new IOException("canceled");, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +import java.util.concurrent.ExecutorService;, +  final Retrofit retrofit;, +  private final ExecutorService executor;, +  BehaviorDelegate(Retrofit retrofit, NetworkBehavior behavior, ExecutorService executor,, +      Class<T> service) {, +    this.executor = executor;, +    final Call<?> behaviorCall = new BehaviorCall<>(behavior, executor, call);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  final NetworkBehavior behavior;, +  final ExecutorService backgroundExecutor;, +  final Call<T> delegate;, +  volatile boolean canceled;, +      boolean delaySleep() {, +            callback.onFailure(new IOException("canceled"));, +          callback.onFailure(new IOException("canceled"));, +      throw new IOException("canceled");, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +import java.util.concurrent.ExecutorService;, +  final Retrofit retrofit;, +  private final ExecutorService executor;, +  BehaviorDelegate(Retrofit retrofit, NetworkBehavior behavior, ExecutorService executor,, +      Class<T> service) {, +    this.executor = executor;, +    final Call<?> behaviorCall = new BehaviorCall<>(behavior, executor, call);, +++ b/retrofit-mock/src/main/java/retrofit2/mock/MockRetrofit.java, +import java.util.concurrent.Executor;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +  private final ExecutorService executor;, +  MockRetrofit(Retrofit retrofit, NetworkBehavior behavior, ExecutorService executor) {, +    this.executor = executor;, +  public Executor backgroundExecutor() {, +    return executor;, +  }, +, +    return new BehaviorDelegate<>(retrofit, behavior, executor, service);, +  }, +, +  public static final class Builder {, +    private final Retrofit retrofit;, +    private NetworkBehavior behavior;, +    private ExecutorService executor;, +, +    public Builder(Retrofit retrofit) {, +      if (retrofit == null) throw new NullPointerException("retrofit == null");, +      this.retrofit = retrofit;, +    }, +, +    public Builder networkBehavior(NetworkBehavior behavior) {, +      if (behavior == null) throw new NullPointerException("behavior == null");, +      this.behavior = behavior;, +      return this;, +    }, +, +    public Builder backgroundExecutor(ExecutorService executor) {, +      if (executor == null) throw new NullPointerException("executor == null");, +      this.executor = executor;, +      return this;, +    }, +, +    public MockRetrofit build() {, +      if (behavior == null) behavior = NetworkBehavior.create();, +      if (executor == null) executor = Executors.newCachedThreadPool();, +      return new MockRetrofit(retrofit, behavior, executor);, +    }, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +  final NetworkBehavior behavior;, +  final ExecutorService backgroundExecutor;, +  final Call<T> delegate;, +  volatile boolean canceled;, +      boolean delaySleep() {]