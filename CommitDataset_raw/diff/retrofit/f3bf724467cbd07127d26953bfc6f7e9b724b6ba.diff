[+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +import static retrofit2.Utils.methodError;, +, +        throw methodError(method, "'", +        throw methodError(method, "HEAD method must use Void as response type.");, +        throw methodError(method,, +        throw methodError(method, "Service methods cannot return void.");, +        throw methodError(method, e, "Unable to create call adapter for %s", returnType);, +        throw methodError(method, e, "Unable to create converter for %s", responseType);, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +import static retrofit2.Utils.methodError;, +, +        throw methodError(method, "'", +        throw methodError(method, "HEAD method must use Void as response type.");, +        throw methodError(method,, +        throw methodError(method, "Service methods cannot return void.");, +        throw methodError(method, e, "Unable to create call adapter for %s", returnType);, +        throw methodError(method, e, "Unable to create converter for %s", responseType);, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +import static retrofit2.Utils.methodError;, +import static retrofit2.Utils.parameterError;, +, +        throw methodError(method, "HTTP method annotation is required (e.g., @GET, @POST, etc.).");, +          throw methodError(method,, +          throw methodError(method, "FormUrlEncoded can only be specified on HTTP methods with ", +          throw parameterError(method, p,, +              "Parameter type must not include a type variable or wildcard: %s", parameterType);, +          throw parameterError(method, p, "No Retrofit annotation found.");, +        throw methodError(method, "Missing either @%s URL or @Url parameter.", httpMethod);, +        throw methodError(method, "Non-body HTTP method cannot contain @Body.");, +        throw methodError(method, "Form-encoded method must contain at least one @Field.");, +        throw methodError(method, "Multipart method must contain at least one @Part.");, +          throw methodError(method, "@Headers annotation is empty.");, +          throw methodError(method, "Only one encoding annotation is allowed.");, +          throw methodError(method, "Only one encoding annotation is allowed.");, +        throw methodError(method, "Only one HTTP method is allowed. Found: %s and %s.",, +          throw methodError(method, "URL query string \"%s\" must not have replace block. ", +          throw methodError(method,, +            throw methodError(method, "Malformed content type: %s", headerValue);, +          throw parameterError(method, p, "Multiple Retrofit annotations found, only one allowed.");, +        throw parameterError(method, p, "No Retrofit annotation found.");, +          throw parameterError(method, p, "Multiple @Url method annotations found.");, +          throw parameterError(method, p, "@Path parameters may not be used with @Url.");, +          throw parameterError(method, p, "A @Url parameter must not come after a @Query");, +          throw parameterError(method, p, "@Url cannot be used with @%s URL", httpMethod);, +          throw parameterError(method, p,, +          throw parameterError(method, p, "A @Path parameter must not come after a @Query.");, +          throw parameterError(method, p, "@Path parameters may not be used with @Url.");, +          throw parameterError(method, p, "@Path can only be used with relative url on @%s",, +              httpMethod);, +            throw parameterError(method, p, rawParameterType.getSimpleName(), +            throw parameterError(method, p, rawParameterType.getSimpleName(), +          throw parameterError(method, p, "@QueryMap parameter type must be Map.");, +          throw parameterError(method, p,, +              "Map must include generic types (e.g., Map<String, String>)");, +          throw parameterError(method, p, "@QueryMap keys must be of type String: " + keyType);, +            throw parameterError(method, p, rawParameterType.getSimpleName(), +          throw parameterError(method, p, "@HeaderMap parameter type must be Map.");, +          throw parameterError(method, p,, +              "Map must include generic types (e.g., Map<String, String>)");, +          throw parameterError(method, p, "@HeaderMap keys must be of type String: " + keyType);, +          throw parameterError(method, p, "@Field parameters can only be used with form encoding.");, +            throw parameterError(method, p, rawParameterType.getSimpleName(), +          throw parameterError(method, p,, +              "@FieldMap parameters can only be used with form encoding.");, +          throw parameterError(method, p, "@FieldMap parameter type must be Map.");, +          throw parameterError(method, p,, +          throw parameterError(method, p, "@FieldMap keys must be of type String: " + keyType);, +          throw parameterError(method, p,, +              "@Part parameters can only be used with multipart encoding.");, +              throw parameterError(method, p, rawParameterType.getSimpleName(), +              throw parameterError(method, p,, +              throw parameterError(method, p,, +            throw parameterError(method, p,, +              throw parameterError(method, p, rawParameterType.getSimpleName(), +              throw parameterError(method, p,, +                  "@Part parameters using the MultipartBody.Part must not ", +              throw parameterError(method, p,, +                  "@Part parameters using the MultipartBody.Part must not ", +            throw parameterError(method, p,, +                "@Part parameters using the MultipartBody.Part must not ", +          throw parameterError(method, p,, +              "@PartMap parameters can only be used with multipart encoding.");, +          throw parameterError(method, p, "@PartMap parameter type must be Map.");, +          throw parameterError(method, p,, +              "Map must include generic types (e.g., Map<String, String>)");, +          throw parameterError(method, p, "@PartMap keys must be of type String: " + keyType);, +          throw parameterError(method, p, "@PartMap values cannot be MultipartBody.Part. ", +          throw parameterError(method, p,, +          throw parameterError(method, p, "Multiple @Body method annotations found.");, +          throw parameterError(method, e, p, "Unable to create @Body converter for %s", type);, +        throw parameterError(method, p, "@Path parameter name must match %s. Found: %s",, +        throw parameterError(method, p, "URL \"%s\" does not contain \"{%s}\".", relativeUrl, name);, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +import static retrofit2.Utils.methodError;, +, +        throw methodError(method, "'", +        throw methodError(method, "HEAD method must use Void as response type.");, +        throw methodError(method,, +        throw methodError(method, "Service methods cannot return void.");]