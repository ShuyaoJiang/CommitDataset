[+++ /dev/null, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/RxJavaCallAdapterFactoryTest.java, +import java.io.IOException;, +import okhttp3.MediaType;, +import okhttp3.RequestBody;, +import okhttp3.ResponseBody;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import org.junit.Rule;, +import retrofit2.http.GET;, +import rx.observables.BlockingObservable;, +import rx.singles.BlockingSingle;, +import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AFTER_REQUEST;, +  @Rule public final MockWebServer server = new MockWebServer();, +, +  interface Service {, +    @GET("/") Observable<String> observableBody();, +    @GET("/") Observable<Response<String>> observableResponse();, +    @GET("/") Observable<Result<String>> observableResult();, +    @GET("/") Single<String> singleBody();, +    @GET("/") Single<Response<String>> singleResponse();, +    @GET("/") Single<Result<String>> singleResult();, +  }, +, +  private Service service;, +        .baseUrl(server.url("/")), +        .addCallAdapterFactory(RxJavaCallAdapterFactory.create()), +    service = retrofit.create(Service.class);, +  @Test public void bodySuccess200() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +, +    BlockingObservable<String> o = service.observableBody().toBlocking();, +    assertThat(o.first()).isEqualTo("Hi");, +  }, +, +  @Test public void bodySuccess404() {, +    server.enqueue(new MockResponse().setResponseCode(404));, +, +    BlockingObservable<String> o = service.observableBody().toBlocking();, +    try {, +      o.first();, +      fail();, +    } catch (RuntimeException e) {, +      Throwable cause = e.getCause();, +      assertThat(cause).isInstanceOf(HttpException.class).hasMessage("HTTP 404 Client Error");, +    }, +  }, +, +  @Test public void bodyFailure() {, +    server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));, +, +    BlockingObservable<String> o = service.observableBody().toBlocking();, +    try {, +      o.first();, +      fail();, +    } catch (RuntimeException e) {, +      assertThat(e.getCause()).isInstanceOf(IOException.class);, +    }, +  }, +, +  @Test public void responseSuccess200() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +, +    BlockingObservable<Response<String>> o = service.observableResponse().toBlocking();, +    Response<String> response = o.first();, +    assertThat(response.isSuccess()).isTrue();, +    assertThat(response.body()).isEqualTo("Hi");, +  }, +, +  @Test public void responseSuccess404() throws IOException {, +    server.enqueue(new MockResponse().setResponseCode(404).setBody("Hi"));, +, +    BlockingObservable<Response<String>> o = service.observableResponse().toBlocking();, +    Response<String> response = o.first();, +    assertThat(response.isSuccess()).isFalse();, +    assertThat(response.errorBody().string()).isEqualTo("Hi");, +  }, +, +  @Test public void responseFailure() {, +    server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));, +, +    BlockingObservable<Response<String>> o = service.observableResponse().toBlocking();, +    try {, +      o.first();, +      fail();, +    } catch (RuntimeException t) {, +      assertThat(t.getCause()).isInstanceOf(IOException.class);, +    }, +  }, +, +  @Test public void resultSuccess200() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +, +    BlockingObservable<Result<String>> o = service.observableResult().toBlocking();, +    Result<String> result = o.first();, +    assertThat(result.isError()).isFalse();, +    Response<String> response = result.response();, +    assertThat(response.isSuccess()).isTrue();, +    assertThat(response.body()).isEqualTo("Hi");]