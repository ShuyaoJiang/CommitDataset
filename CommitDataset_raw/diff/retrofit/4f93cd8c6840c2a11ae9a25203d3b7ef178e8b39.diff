[+++ b/pom.xml, +    <robolectric.version>3.2</robolectric.version>, +++ b/pom.xml, +    <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +@IgnoreJRERequirement // Only added when Optional is available (Java 8+ / Android API 24+)., +++ b/pom.xml, +    <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +@IgnoreJRERequirement // Only added when Optional is available (Java 8+ / Android API 24+)., +++ b/retrofit/src/main/java/retrofit2/Platform.java, +import java.util.Collections;, +    @Override List<? extends Converter.Factory> defaultConverterFactories() {, +      return Build.VERSION.SDK_INT >= 24, +          ? singletonList(OptionalConverterFactory.INSTANCE), +          : Collections.<Converter.Factory>emptyList();, +    }, +, +    @Override int defaultConverterFactoriesSize() {, +      return Build.VERSION.SDK_INT >= 24 ? 1 : 0;, +    }, +, +++ b/pom.xml, +    <robolectric.version>3.2</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +@IgnoreJRERequirement // Only added when Optional is available (Java 8+ / Android API 24+)., +++ b/retrofit/src/main/java/retrofit2/Platform.java, +import java.util.Collections;, +    @Override List<? extends Converter.Factory> defaultConverterFactories() {, +      return Build.VERSION.SDK_INT >= 24, +          ? singletonList(OptionalConverterFactory.INSTANCE), +          : Collections.<Converter.Factory>emptyList();, +    }, +, +    @Override int defaultConverterFactoriesSize() {, +      return Build.VERSION.SDK_INT >= 24 ? 1 : 0;, +    }, +, +++ b/retrofit/src/test/java/retrofit2/OptionalConverterFactoryAndroidTest.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2;, +, +import java.io.IOException;, +import java.util.Optional;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +import retrofit2.helpers.ObjectInstanceConverterFactory;, +import retrofit2.http.GET;, +, +import static org.assertj.core.api.Assertions.assertThat;, +import static org.junit.Assert.fail;, +import static org.robolectric.annotation.Config.NEWEST_SDK;, +, +@RunWith(RobolectricTestRunner.class), +@Config(sdk = NEWEST_SDK), +public final class OptionalConverterFactoryAndroidTest {, +  interface Service {, +    @GET("/") Call<Optional<Object>> optional();, +    @GET("/") Call<Object> object();, +  }, +, +  @Rule public final MockWebServer server = new MockWebServer();, +, +  private Service service;, +, +  @Before public void setUp() {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(new ObjectInstanceConverterFactory()), +        .build();, +    service = retrofit.create(Service.class);, +  }, +, +  @Config(sdk = 24), +  @Test public void optionalApi24() throws IOException {, +    server.enqueue(new MockResponse());, +, +    Optional<Object> optional = service.optional().execute().body();, +    assertThat(optional).isNotNull();, +    assertThat(optional.get()).isSameAs(ObjectInstanceConverterFactory.VALUE);]