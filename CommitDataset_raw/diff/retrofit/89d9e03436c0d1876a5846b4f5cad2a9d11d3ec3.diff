[+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    return canceled;, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    return canceled;, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +  final okhttp3.Call.Factory callFactory;, +  final HttpUrl baseUrl;, +  final List<Converter.Factory> converterFactories;, +  final List<CallAdapter.Factory> adapterFactories;, +  final Executor callbackExecutor;, +  final boolean validateEagerly;, +  public Builder newBuilder() {, +    return new Builder(this);, +  }, +, +    private final Platform platform;, +    private final List<Converter.Factory> converterFactories = new ArrayList<>();, +    private final List<CallAdapter.Factory> adapterFactories = new ArrayList<>();, +    Builder(Retrofit retrofit) {, +      platform = Platform.get();, +      callFactory = retrofit.callFactory;, +      baseUrl = retrofit.baseUrl;, +      converterFactories.addAll(retrofit.converterFactories);, +      adapterFactories.addAll(retrofit.adapterFactories);, +      // Remove the default, platform-aware call adapter added by build()., +      adapterFactories.remove(adapterFactories.size() - 1);, +      callbackExecutor = retrofit.callbackExecutor;, +      validateEagerly = retrofit.validateEagerly;, +    }, +, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    return canceled;, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +  final okhttp3.Call.Factory callFactory;, +  final HttpUrl baseUrl;, +  final List<Converter.Factory> converterFactories;, +  final List<CallAdapter.Factory> adapterFactories;, +  final Executor callbackExecutor;, +  final boolean validateEagerly;, +  public Builder newBuilder() {, +    return new Builder(this);, +  }, +, +    private final Platform platform;, +    private final List<Converter.Factory> converterFactories = new ArrayList<>();, +    private final List<CallAdapter.Factory> adapterFactories = new ArrayList<>();, +    Builder(Retrofit retrofit) {, +      platform = Platform.get();, +      callFactory = retrofit.callFactory;, +      baseUrl = retrofit.baseUrl;, +      converterFactories.addAll(retrofit.converterFactories);, +      adapterFactories.addAll(retrofit.adapterFactories);, +      // Remove the default, platform-aware call adapter added by build()., +      adapterFactories.remove(adapterFactories.size() - 1);, +      callbackExecutor = retrofit.callbackExecutor;, +      validateEagerly = retrofit.validateEagerly;, +    }, +, +++ b/retrofit/src/test/java/retrofit2/CallTest.java, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +    return canceled;, +++ b/retrofit/src/main/java/retrofit2/Retrofit.java, +  final okhttp3.Call.Factory callFactory;, +  final HttpUrl baseUrl;, +  final List<Converter.Factory> converterFactories;, +  final List<CallAdapter.Factory> adapterFactories;, +  final Executor callbackExecutor;, +  final boolean validateEagerly;, +  public Builder newBuilder() {, +    return new Builder(this);, +  }, +, +    private final Platform platform;, +    private final List<Converter.Factory> converterFactories = new ArrayList<>();, +    private final List<CallAdapter.Factory> adapterFactories = new ArrayList<>();, +    Builder(Retrofit retrofit) {, +      platform = Platform.get();, +      callFactory = retrofit.callFactory;, +      baseUrl = retrofit.baseUrl;, +      converterFactories.addAll(retrofit.converterFactories);, +      adapterFactories.addAll(retrofit.adapterFactories);, +      // Remove the default, platform-aware call adapter added by build()., +      adapterFactories.remove(adapterFactories.size() - 1);, +      callbackExecutor = retrofit.callbackExecutor;, +      validateEagerly = retrofit.validateEagerly;, +    }, +, +++ b/retrofit/src/test/java/retrofit2/CallTest.java, +++ b/retrofit/src/test/java/retrofit2/RetrofitTest.java, +import static org.junit.Assert.assertSame;, +  @Test public void cloneSharesStatefulInstances() {, +    CallAdapter.Factory callAdapter = mock(CallAdapter.Factory.class);, +    Converter.Factory converter = mock(Converter.Factory.class);, +    HttpUrl baseUrl = server.url("/");, +    Executor executor = mock(Executor.class);, +    okhttp3.Call.Factory callFactory = mock(okhttp3.Call.Factory.class);, +, +    Retrofit one = new Retrofit.Builder(), +        .addCallAdapterFactory(callAdapter), +        .addConverterFactory(converter)]