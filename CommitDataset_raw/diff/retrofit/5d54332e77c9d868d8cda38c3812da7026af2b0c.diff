[+++ b/samples/pom.xml, +      <artifactId>converter-moshi</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +++ b/samples/pom.xml, +      <artifactId>converter-moshi</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +++ b/samples/src/main/java/com/example/retrofit/AnnotatedConverters.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.example.retrofit;, +, +import com.google.gson.GsonBuilder;, +import java.io.IOException;, +import java.lang.annotation.Annotation;, +import java.lang.annotation.Retention;, +import java.lang.reflect.Type;, +import java.util.LinkedHashMap;, +import java.util.Map;, +import okhttp3.RequestBody;, +import okhttp3.ResponseBody;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import org.simpleframework.xml.Attribute;, +import org.simpleframework.xml.Default;, +import org.simpleframework.xml.DefaultType;, +import retrofit2.Call;, +import retrofit2.Converter;, +import retrofit2.Retrofit;, +import retrofit2.converter.gson.GsonConverterFactory;, +import retrofit2.converter.moshi.MoshiConverterFactory;, +import retrofit2.converter.simplexml.SimpleXmlConverterFactory;, +import retrofit2.http.GET;, +, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +final class AnnotatedConverters {, +  public static final class AnnotatedConverterFactory extends Converter.Factory {, +    private final Map<Class<? extends Annotation>, Converter.Factory> factories;, +, +    public static final class Builder {, +      private final Map<Class<? extends Annotation>, Converter.Factory> factories =, +          new LinkedHashMap<>();, +, +      public Builder add(Class<? extends Annotation> cls, Converter.Factory factory) {, +        if (cls == null) {, +          throw new NullPointerException("cls == null");, +        }, +        if (factory == null) {, +          throw new NullPointerException("factory == null");, +        }, +        factories.put(cls, factory);, +        return this;, +      }, +, +      public AnnotatedConverterFactory build() {, +        return new AnnotatedConverterFactory(factories);, +      }, +    }, +, +    AnnotatedConverterFactory(Map<Class<? extends Annotation>, Converter.Factory> factories) {, +      this.factories = new LinkedHashMap<>(factories);, +    }, +, +    @Override, +    public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,, +        Retrofit retrofit) {, +      for (Annotation annotation : annotations) {, +        Converter.Factory factory = factories.get(annotation.annotationType());, +        if (factory != null) {, +          return factory.responseBodyConverter(type, annotations, retrofit);, +        }, +      }, +      return null;, +    }, +, +    @Override public Converter<?, RequestBody> requestBodyConverter(Type type,, +        Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {, +      for (Annotation annotation : parameterAnnotations) {, +        Converter.Factory factory = factories.get(annotation.annotationType());, +        if (factory != null) {, +          return factory.requestBodyConverter(type, parameterAnnotations, methodAnnotations,]