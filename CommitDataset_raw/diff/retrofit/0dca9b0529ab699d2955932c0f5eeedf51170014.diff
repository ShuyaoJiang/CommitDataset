[+++ b/retrofit/src/main/java/retrofit2/Call.java, +import com.squareup.okhttp.ResponseBody;, +, +  /** Creates {@link Call} instances. */, +  interface Factory {, +    /**, +     * Returns a {@link Call} which will send {@code request} when executed or enqueue and use, +     * {@code converter} to parse the response. May not return null., +     */, +    <T> Call<T> create(DeferredRequest request, Converter<ResponseBody, T> converter);, +  }, +++ b/retrofit/src/main/java/retrofit2/Call.java, +import com.squareup.okhttp.ResponseBody;, +, +  /** Creates {@link Call} instances. */, +  interface Factory {, +    /**, +     * Returns a {@link Call} which will send {@code request} when executed or enqueue and use, +     * {@code converter} to parse the response. May not return null., +     */, +    <T> Call<T> create(DeferredRequest request, Converter<ResponseBody, T> converter);, +  }, +++ b/retrofit/src/main/java/retrofit2/DeferredRequest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2;, +, +import com.squareup.okhttp.Request;, +import java.io.IOException;, +, +/**, + * An un-built HTTP request. This class defers any work necessary to create an HTTP request until, + * {@link #get()} is called., + */, +public interface DeferredRequest {, +  /** Perform the work necessary to create and then return the {@link Request}. */, +  Request get() throws IOException;, +}, +++ b/retrofit/src/main/java/retrofit2/Call.java, +import com.squareup.okhttp.ResponseBody;, +, +  /** Creates {@link Call} instances. */, +  interface Factory {, +    /**, +     * Returns a {@link Call} which will send {@code request} when executed or enqueue and use, +     * {@code converter} to parse the response. May not return null., +     */, +    <T> Call<T> create(DeferredRequest request, Converter<ResponseBody, T> converter);, +  }, +++ b/retrofit/src/main/java/retrofit2/DeferredRequest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2;, +, +import com.squareup.okhttp.Request;, +import java.io.IOException;, +, +/**, + * An un-built HTTP request. This class defers any work necessary to create an HTTP request until, + * {@link #get()} is called., + */, +public interface DeferredRequest {, +  /** Perform the work necessary to create and then return the {@link Request}. */, +  Request get() throws IOException;, +}, +++ b/retrofit/src/main/java/retrofit2/MethodHandler.java, +    return new MethodHandler(retrofit.callFactory(), requestFactory, callAdapter,, +        responseConverter);, +  private final Call.Factory callFactory;, +  private MethodHandler(Call.Factory callFactory, RequestFactory requestFactory,, +    this.callFactory = callFactory;, +    DeferredRequest request = requestFactory.defer(args);, +    Call<?> call = callFactory.create(request, responseConverter);, +    if (call == null) {]