[+++ b/retrofit-mock/src/main/java/retrofit/MockHttpException.java, +    return new Response("", code, reason, headers, new MockTypedInput(converter, responseBody));, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpException.java, +    return new Response("", code, reason, headers, new MockTypedInput(converter, responseBody));, +++ b/retrofit/src/main/java/retrofit/Utils.java, +    return new Response(response.getUrl(), response.getStatus(), response.getReason(),, +        response.getHeaders(), body);, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpException.java, +    return new Response("", code, reason, headers, new MockTypedInput(converter, responseBody));, +++ b/retrofit/src/main/java/retrofit/Utils.java, +    return new Response(response.getUrl(), response.getStatus(), response.getReason(),, +        response.getHeaders(), body);, +++ b/retrofit/src/main/java/retrofit/client/ApacheClient.java, +    return parseResponse(request.getUrl(), apacheResponse);, +  static Response parseResponse(String url, HttpResponse response) throws IOException {, +    return new Response(url, status, reason, headers, body);, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpException.java, +    return new Response("", code, reason, headers, new MockTypedInput(converter, responseBody));, +++ b/retrofit/src/main/java/retrofit/Utils.java, +    return new Response(response.getUrl(), response.getStatus(), response.getReason(),, +        response.getHeaders(), body);, +++ b/retrofit/src/main/java/retrofit/client/ApacheClient.java, +    return parseResponse(request.getUrl(), apacheResponse);, +  static Response parseResponse(String url, HttpResponse response) throws IOException {, +    return new Response(url, status, reason, headers, body);, +++ b/retrofit/src/main/java/retrofit/client/Response.java, +  private final String url;, +  public Response(String url, int status, String reason, List<Header> headers, TypedInput body) {, +    if (url == null) {, +      throw new IllegalArgumentException("url == null");, +    }, +    this.url = url;, +  /** Request URL. */, +  public String getUrl() {, +    return url;, +  }, +, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpException.java, +    return new Response("", code, reason, headers, new MockTypedInput(converter, responseBody));, +++ b/retrofit/src/main/java/retrofit/Utils.java, +    return new Response(response.getUrl(), response.getStatus(), response.getReason(),, +        response.getHeaders(), body);, +++ b/retrofit/src/main/java/retrofit/client/ApacheClient.java, +    return parseResponse(request.getUrl(), apacheResponse);, +  static Response parseResponse(String url, HttpResponse response) throws IOException {, +    return new Response(url, status, reason, headers, body);, +++ b/retrofit/src/main/java/retrofit/client/Response.java, +  private final String url;, +  public Response(String url, int status, String reason, List<Header> headers, TypedInput body) {, +    if (url == null) {, +      throw new IllegalArgumentException("url == null");, +    }, +    this.url = url;, +  /** Request URL. */, +  public String getUrl() {, +    return url;, +  }, +, +++ b/retrofit/src/main/java/retrofit/client/UrlConnectionClient.java, +    return new Response(connection.getURL().toString(), status, reason, headers, responseBody);, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpException.java, +    return new Response("", code, reason, headers, new MockTypedInput(converter, responseBody));, +++ b/retrofit/src/main/java/retrofit/Utils.java, +    return new Response(response.getUrl(), response.getStatus(), response.getReason(),, +        response.getHeaders(), body);, +++ b/retrofit/src/main/java/retrofit/client/ApacheClient.java, +    return parseResponse(request.getUrl(), apacheResponse);, +  static Response parseResponse(String url, HttpResponse response) throws IOException {, +    return new Response(url, status, reason, headers, body);, +++ b/retrofit/src/main/java/retrofit/client/Response.java, +  private final String url;, +  public Response(String url, int status, String reason, List<Header> headers, TypedInput body) {, +    if (url == null) {, +      throw new IllegalArgumentException("url == null");, +    }, +    this.url = url;, +  /** Request URL. */, +  public String getUrl() {, +    return url;, +  }, +, +++ b/retrofit/src/main/java/retrofit/client/UrlConnectionClient.java, +    return new Response(connection.getURL().toString(), status, reason, headers, responseBody);, +++ b/retrofit/src/test/java/retrofit/ErrorHandlerTest.java, +      return new Response("", 400, "invalid request", Collections.<Header>emptyList(), null);, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpException.java, +    return new Response("", code, reason, headers, new MockTypedInput(converter, responseBody));, +++ b/retrofit/src/main/java/retrofit/Utils.java, +    return new Response(response.getUrl(), response.getStatus(), response.getReason(),, +        response.getHeaders(), body);, +++ b/retrofit/src/main/java/retrofit/client/ApacheClient.java, +    return parseResponse(request.getUrl(), apacheResponse);, +  static Response parseResponse(String url, HttpResponse response) throws IOException {, +    return new Response(url, status, reason, headers, body);, +++ b/retrofit/src/main/java/retrofit/client/Response.java, +  private final String url;, +  public Response(String url, int status, String reason, List<Header> headers, TypedInput body) {, +    if (url == null) {, +      throw new IllegalArgumentException("url == null");, +    }]