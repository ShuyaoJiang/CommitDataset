[+++ b/retrofit/src/main/java/retrofit/client/UrlConnectionClient.java, +          connection.setFixedLengthStreamingMode((int) length);, +++ b/retrofit/src/main/java/retrofit/client/UrlConnectionClient.java, +          connection.setFixedLengthStreamingMode((int) length);, +++ b/retrofit/src/main/java/retrofit/mime/MultipartTypedOutput.java, +, +import java.util.LinkedList;, +, +    private final class MimePart {, +        private final TypedOutput body;, +        private final String name;, +        private final boolean isFirst;, +, +        private byte[] partBoundary;, +        private byte[] partHeader;, +        private boolean isBuilt = false;, +, +        public MimePart(String name, TypedOutput body, boolean isFirst) {, +            this.name = name;, +            this.body = body;, +            this.isFirst = isFirst;, +        }, +, +        public void writeTo(OutputStream out) throws IOException {, +            build();, +            out.write(partBoundary);, +            out.write(partHeader);, +            body.writeTo(out);, +        }, +, +        public long size() {, +            build();, +            return body.length() + partBoundary.length + partHeader.length;, +        }, +, +        private void build() {, +            if (isBuilt) return;, +            partBoundary = buildBoundary(boundary, isFirst, false);, +            partHeader = buildHeader(name, body);, +            isBuilt = true;, +        }, +    }, +, +    private final List<MimePart> mimeParts = new LinkedList<MimePart>();, +, +    public List<byte[]> getParts() throws Exception {, +        List<byte[]> parts = new ArrayList<byte[]>();, +        for (MimePart part : mimeParts) {, +            ByteArrayOutputStream bos = new ByteArrayOutputStream();, +            try {, +                part.writeTo(bos);, +                parts.add(bos.toByteArray());, +            } finally {, +                bos.close();, +            }, +        }, +        return parts;, +    }, +, +        MimePart part = new MimePart(name, body, mimeParts.isEmpty());, +        mimeParts.add(part);, +, +        length += part.size();, +        return mimeParts.size();, +    @Override, +    public String fileName() {, +    @Override, +    public String mimeType() {, +    @Override, +    public long length() {, +    @Override, +    public void writeTo(OutputStream out) throws IOException {, +        for (MimePart part : mimeParts) {, +            part.writeTo(out);, +++ b/retrofit/src/main/java/retrofit/client/UrlConnectionClient.java, +          connection.setFixedLengthStreamingMode((int) length);, +++ b/retrofit/src/main/java/retrofit/mime/MultipartTypedOutput.java, +, +import java.util.LinkedList;, +, +    private final class MimePart {, +        private final TypedOutput body;, +        private final String name;, +        private final boolean isFirst;, +, +        private byte[] partBoundary;, +        private byte[] partHeader;, +        private boolean isBuilt = false;, +, +        public MimePart(String name, TypedOutput body, boolean isFirst) {, +            this.name = name;, +            this.body = body;, +            this.isFirst = isFirst;, +        }, +, +        public void writeTo(OutputStream out) throws IOException {, +            build();, +            out.write(partBoundary);, +            out.write(partHeader);, +            body.writeTo(out);]