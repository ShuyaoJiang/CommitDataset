[+++ b/http/src/main/java/retrofit/http/CallbackResponseHandler.java, +class CallbackResponseHandler<R> implements ResponseHandler<Void> {, +  private Object parse(HttpEntity entity, Type type) throws ConversionException {, +++ b/http/src/main/java/retrofit/http/CallbackResponseHandler.java, +class CallbackResponseHandler<R> implements ResponseHandler<Void> {, +  private Object parse(HttpEntity entity, Type type) throws ConversionException {, +++ b/http/src/main/java/retrofit/http/Headers.java, +  /** Sets headers on the given message */, +  void setOn(HttpMessage message);, +++ b/http/src/main/java/retrofit/http/CallbackResponseHandler.java, +class CallbackResponseHandler<R> implements ResponseHandler<Void> {, +  private Object parse(HttpEntity entity, Type type) throws ConversionException {, +++ b/http/src/main/java/retrofit/http/Headers.java, +  /** Sets headers on the given message */, +  void setOn(HttpMessage message);, +++ b/http/src/main/java/retrofit/http/HttpMethodType.java, +import org.apache.http.HttpMessage;, +      addHeaders(request, builder);, +      addHeaders(request, builder);, +      addHeaders(request, builder);, +      addHeaders(request, builder);, +  private static void addHeaders(HttpMessage message, HttpRequestBuilder builder) {, +    String mimeType = builder.getMimeType();, +    if (mimeType != null) {, +      message.addHeader("Content-Type", mimeType);, +    }, +    Headers headers = builder.getHeaders();, +    if (headers != null) {, +      headers.setOn(message);, +    }, +  }, +, +++ b/http/src/main/java/retrofit/http/CallbackResponseHandler.java, +class CallbackResponseHandler<R> implements ResponseHandler<Void> {, +  private Object parse(HttpEntity entity, Type type) throws ConversionException {, +++ b/http/src/main/java/retrofit/http/Headers.java, +  /** Sets headers on the given message */, +  void setOn(HttpMessage message);, +++ b/http/src/main/java/retrofit/http/HttpMethodType.java, +import org.apache.http.HttpMessage;, +      addHeaders(request, builder);, +      addHeaders(request, builder);, +      addHeaders(request, builder);, +      addHeaders(request, builder);, +  private static void addHeaders(HttpMessage message, HttpRequestBuilder builder) {, +    String mimeType = builder.getMimeType();, +    if (mimeType != null) {, +      message.addHeader("Content-Type", mimeType);, +    }, +    Headers headers = builder.getHeaders();, +    if (headers != null) {, +      headers.setOn(message);, +    }, +  }, +, +++ b/http/src/main/java/retrofit/http/HttpProfiler.java, +++ b/http/src/main/java/retrofit/http/CallbackResponseHandler.java, +class CallbackResponseHandler<R> implements ResponseHandler<Void> {, +  private Object parse(HttpEntity entity, Type type) throws ConversionException {, +++ b/http/src/main/java/retrofit/http/Headers.java, +  /** Sets headers on the given message */, +  void setOn(HttpMessage message);, +++ b/http/src/main/java/retrofit/http/HttpMethodType.java, +import org.apache.http.HttpMessage;, +      addHeaders(request, builder);, +      addHeaders(request, builder);, +      addHeaders(request, builder);, +      addHeaders(request, builder);, +  private static void addHeaders(HttpMessage message, HttpRequestBuilder builder) {, +    String mimeType = builder.getMimeType();, +    if (mimeType != null) {, +      message.addHeader("Content-Type", mimeType);, +    }, +    Headers headers = builder.getHeaders();, +    if (headers != null) {, +      headers.setOn(message);, +    }, +  }, +, +++ b/http/src/main/java/retrofit/http/HttpProfiler.java, +++ b/http/src/main/java/retrofit/http/ProfilingResponseHandler.java, +// Copyright 2012 Square, Inc., +package retrofit.http;, +, +import org.apache.http.HttpResponse;, +import org.apache.http.client.ResponseHandler;, +, +import java.io.IOException;, +import java.util.concurrent.atomic.AtomicReference;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +, +/** Sends server call times and response status codes to {@link retrofit.http.HttpProfiler}. */, +class ProfilingResponseHandler<T> implements ResponseHandler<Void> {, +  private static final Logger LOGGER = Logger.getLogger(ProfilingResponseHandler.class.getSimpleName());, +, +  private final ResponseHandler<Void> delegate;, +  private final HttpProfiler<T> profiler;, +  private final HttpProfiler.RequestInformation requestInfo;, +  private final long startTime;]