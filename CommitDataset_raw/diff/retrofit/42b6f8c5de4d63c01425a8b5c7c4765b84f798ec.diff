[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit/RxJavaCallAdapterFactoryTest.java, +  static class StringConverterFactory extends Converter.Factory {, +    @Override, +    public Converter<ResponseBody, ?> fromResponseBody(Type type, Annotation[] annotations) {, +      return new Converter<ResponseBody, String>() {, +        @Override public String convert(ResponseBody value) throws IOException {, +          return value.string();, +        }, +      };, +    @Override public Converter<?, RequestBody> toRequestBody(Type type, Annotation[] annotations) {, +      return new Converter<String, RequestBody>() {, +        @Override public RequestBody convert(String value) throws IOException {, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/RxJavaCallAdapterFactoryTest.java, +  static class StringConverterFactory extends Converter.Factory {, +    @Override, +    public Converter<ResponseBody, ?> fromResponseBody(Type type, Annotation[] annotations) {, +      return new Converter<ResponseBody, String>() {, +        @Override public String convert(ResponseBody value) throws IOException {, +          return value.string();, +        }, +      };, +    @Override public Converter<?, RequestBody> toRequestBody(Type type, Annotation[] annotations) {, +      return new Converter<String, RequestBody>() {, +        @Override public RequestBody convert(String value) throws IOException {, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/RxJavaCallAdapterFactoryTest.java, +  static class StringConverterFactory extends Converter.Factory {, +    @Override, +    public Converter<ResponseBody, ?> fromResponseBody(Type type, Annotation[] annotations) {, +      return new Converter<ResponseBody, String>() {, +        @Override public String convert(ResponseBody value) throws IOException {, +          return value.string();, +        }, +      };, +    @Override public Converter<?, RequestBody> toRequestBody(Type type, Annotation[] annotations) {, +      return new Converter<String, RequestBody>() {, +        @Override public RequestBody convert(String value) throws IOException {, +++ /dev/null, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +/**, + * A {@linkplain Converter.Factory converter} which uses Gson for JSON., + * <p>, + * Because Gson is so flexible in the types it supports, this converter assumes that it can handle, + * all types. If you are mixing JSON serialization with something else (such as protocol buffers),, + * you must {@linkplain Retrofit.Builder#addConverterFactory(Converter.Factory) add this instance}, + * last to allow the other converters a chance to see their types., + */, +public final class GsonConverterFactory extends Converter.Factory {, +  @Override, +  public Converter<ResponseBody, ?> fromResponseBody(Type type, Annotation[] annotations) {, +    return new GsonResponseBodyConverter<>(adapter);, +  }, +, +  @Override public Converter<?, RequestBody> toRequestBody(Type type, Annotation[] annotations) {, +    TypeAdapter<?> adapter = gson.getAdapter(TypeToken.get(type));, +    return new GsonRequestBodyConverter<>(adapter);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/RxJavaCallAdapterFactoryTest.java, +  static class StringConverterFactory extends Converter.Factory {, +    @Override, +    public Converter<ResponseBody, ?> fromResponseBody(Type type, Annotation[] annotations) {, +      return new Converter<ResponseBody, String>() {, +        @Override public String convert(ResponseBody value) throws IOException {, +          return value.string();, +        }, +      };, +    @Override public Converter<?, RequestBody> toRequestBody(Type type, Annotation[] annotations) {, +      return new Converter<String, RequestBody>() {, +        @Override public RequestBody convert(String value) throws IOException {, +++ /dev/null, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +/**, + * A {@linkplain Converter.Factory converter} which uses Gson for JSON., + * <p>, + * Because Gson is so flexible in the types it supports, this converter assumes that it can handle, + * all types. If you are mixing JSON serialization with something else (such as protocol buffers),, + * you must {@linkplain Retrofit.Builder#addConverterFactory(Converter.Factory) add this instance}, + * last to allow the other converters a chance to see their types., + */, +public final class GsonConverterFactory extends Converter.Factory {, +  @Override, +  public Converter<ResponseBody, ?> fromResponseBody(Type type, Annotation[] annotations) {, +    return new GsonResponseBodyConverter<>(adapter);, +  }, +, +  @Override public Converter<?, RequestBody> toRequestBody(Type type, Annotation[] annotations) {, +    TypeAdapter<?> adapter = gson.getAdapter(TypeToken.get(type));, +    return new GsonRequestBodyConverter<>(adapter);, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonRequestBodyConverter.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0]