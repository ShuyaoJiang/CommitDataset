[+++ b/pom.xml, +    <kotlin.version>1.3.10</kotlin.version>, +    <kotlinx.coroutines.version>1.1.0</kotlinx.coroutines.version>, +        <groupId>org.jetbrains.kotlinx</groupId>, +        <artifactId>kotlinx-coroutines-core</artifactId>, +        <version>${kotlinx.coroutines.version}</version>, +      </dependency>, +      <dependency>, +          <groupId>org.jetbrains.kotlin</groupId>, +          <artifactId>kotlin-maven-plugin</artifactId>, +          <version>${kotlin.version}</version>, +        </plugin>, +        <plugin>, +++ b/pom.xml, +    <kotlin.version>1.3.10</kotlin.version>, +    <kotlinx.coroutines.version>1.1.0</kotlinx.coroutines.version>, +        <groupId>org.jetbrains.kotlinx</groupId>, +        <artifactId>kotlinx-coroutines-core</artifactId>, +        <version>${kotlinx.coroutines.version}</version>, +      </dependency>, +      <dependency>, +          <groupId>org.jetbrains.kotlin</groupId>, +          <artifactId>kotlin-maven-plugin</artifactId>, +          <version>${kotlin.version}</version>, +        </plugin>, +        <plugin>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>org.jetbrains.kotlinx</groupId>, +      <artifactId>kotlinx-coroutines-core</artifactId>, +      <optional>true</optional>, +    </dependency>, +++ b/pom.xml, +    <kotlin.version>1.3.10</kotlin.version>, +    <kotlinx.coroutines.version>1.1.0</kotlinx.coroutines.version>, +        <groupId>org.jetbrains.kotlinx</groupId>, +        <artifactId>kotlinx-coroutines-core</artifactId>, +        <version>${kotlinx.coroutines.version}</version>, +      </dependency>, +      <dependency>, +          <groupId>org.jetbrains.kotlin</groupId>, +          <artifactId>kotlin-maven-plugin</artifactId>, +          <version>${kotlin.version}</version>, +        </plugin>, +        <plugin>, +++ b/retrofit/pom.xml, +    <dependency>, +      <groupId>org.jetbrains.kotlinx</groupId>, +      <artifactId>kotlinx-coroutines-core</artifactId>, +      <optional>true</optional>, +    </dependency>, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +import java.lang.reflect.ParameterizedType;, +import javax.annotation.Nullable;, +import kotlin.coroutines.Continuation;, +import okhttp3.Call;, +import static retrofit2.Utils.getRawType;, +abstract class HttpServiceMethod<ResponseT, ReturnT> extends ServiceMethod<ReturnT> {, +    CallAdapter<ResponseT, ReturnT> callAdapter = null;, +    boolean continuationWantsResponse = false;, +    boolean continuationBodyNullable = false;, +    Type responseType;, +    if (requestFactory.isKotlinSuspendFunction) {, +      Type[] parameterTypes = method.getGenericParameterTypes();, +      Type continuationType = parameterTypes[parameterTypes.length - 1];, +      responseType = Utils.getParameterLowerBound(0, (ParameterizedType) continuationType);, +      if (getRawType(responseType) == Response.class && responseType instanceof ParameterizedType) {, +        // Unwrap the actual body type from Response<T>., +        responseType = Utils.getParameterUpperBound(0, (ParameterizedType) responseType);, +        continuationWantsResponse = true;, +      } else {, +        // TODO figure out if type is nullable or not, +        // Metadata metadata = method.getDeclaringClass().getAnnotation(Metadata.class), +        // Find the entry for method, +        // Determine if return type is nullable or not, +      }, +    } else {, +      callAdapter = createCallAdapter(retrofit, method);, +      responseType = callAdapter.responseType();, +    }, +, +    if (responseType == okhttp3.Response.class) {, +          + getRawType(responseType).getName(), +    if (responseType == Response.class) {, +      throw methodError(method, "Response must include generic type (e.g., Response<String>)");, +    }, +    // TODO support Unit for Kotlin?, +    if (callAdapter != null) {, +      return new CallAdapted<>(requestFactory, callFactory, callAdapter, responseConverter);, +    } else if (continuationWantsResponse) {, +      //noinspection unchecked Kotlin compiler guarantees ReturnT to be Object., +      return (HttpServiceMethod<ResponseT, ReturnT>) new SuspendForResponse<>(requestFactory,, +          callFactory, responseConverter);, +    } else {, +      //noinspection unchecked Kotlin compiler guarantees ReturnT to be Object., +      return (HttpServiceMethod<ResponseT, ReturnT>) new SuspendForBody<>(requestFactory,, +          callFactory, responseConverter, continuationBodyNullable);, +    }, +  HttpServiceMethod(RequestFactory requestFactory, Call.Factory callFactory,, +  @Override final @Nullable ReturnT invoke(Object[] args) {]