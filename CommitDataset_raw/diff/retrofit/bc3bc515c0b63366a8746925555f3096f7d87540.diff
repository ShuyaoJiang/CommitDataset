[+++ b/http/pom.xml, +            <groupId>javax.inject</groupId>, +            <artifactId>javax.inject</artifactId>, +++ b/http/pom.xml, +            <groupId>javax.inject</groupId>, +            <artifactId>javax.inject</artifactId>, +++ b/http/src/main/java/retrofit/http/HttpRequestBuilder.java, +import javax.inject.Named;, +++ b/http/pom.xml, +            <groupId>javax.inject</groupId>, +            <artifactId>javax.inject</artifactId>, +++ b/http/src/main/java/retrofit/http/HttpRequestBuilder.java, +import javax.inject.Named;, +++ b/http/src/main/java/retrofit/http/RestAdapter.java, +  private final Server server;, +  private final Provider<HttpClient> httpClientProvider;, +  private final Executor executor;, +  private final MainThread mainThread;, +  private final Headers headers;, +  private final Gson gson;, +  private final HttpProfiler profiler;, +  private final ThreadLocal<SimpleDateFormat> dateFormat = new ThreadLocal<SimpleDateFormat>() {, +  @Inject, +  RestAdapter(Server server, Provider<HttpClient> httpClientProvider, Executor executor,, +      MainThread mainThread, Headers headers, Gson gson, HttpProfiler profiler) {, +    this.server = server;, +    this.httpClientProvider = httpClientProvider;, +    this.executor = executor;, +    this.mainThread = mainThread;, +    this.headers = headers;, +    this.gson = gson;, +    this.profiler = profiler;, +  }, +, +   * javax.inject.Named} annotations on the method parameters., +++ b/http/pom.xml, +            <groupId>javax.inject</groupId>, +            <artifactId>javax.inject</artifactId>, +++ b/http/src/main/java/retrofit/http/HttpRequestBuilder.java, +import javax.inject.Named;, +++ b/http/src/main/java/retrofit/http/RestAdapter.java, +  private final Server server;, +  private final Provider<HttpClient> httpClientProvider;, +  private final Executor executor;, +  private final MainThread mainThread;, +  private final Headers headers;, +  private final Gson gson;, +  private final HttpProfiler profiler;, +  private final ThreadLocal<SimpleDateFormat> dateFormat = new ThreadLocal<SimpleDateFormat>() {, +  @Inject, +  RestAdapter(Server server, Provider<HttpClient> httpClientProvider, Executor executor,, +      MainThread mainThread, Headers headers, Gson gson, HttpProfiler profiler) {, +    this.server = server;, +    this.httpClientProvider = httpClientProvider;, +    this.executor = executor;, +    this.mainThread = mainThread;, +    this.headers = headers;, +    this.gson = gson;, +    this.profiler = profiler;, +  }, +, +   * javax.inject.Named} annotations on the method parameters., +++ b/http/src/test/java/retrofit/http/HttpRequestBuilderTest.java, +import javax.inject.Named;, +++ b/http/pom.xml, +            <groupId>javax.inject</groupId>, +            <artifactId>javax.inject</artifactId>, +++ b/http/src/main/java/retrofit/http/HttpRequestBuilder.java, +import javax.inject.Named;, +++ b/http/src/main/java/retrofit/http/RestAdapter.java, +  private final Server server;, +  private final Provider<HttpClient> httpClientProvider;, +  private final Executor executor;, +  private final MainThread mainThread;, +  private final Headers headers;, +  private final Gson gson;, +  private final HttpProfiler profiler;, +  private final ThreadLocal<SimpleDateFormat> dateFormat = new ThreadLocal<SimpleDateFormat>() {, +  @Inject, +  RestAdapter(Server server, Provider<HttpClient> httpClientProvider, Executor executor,, +      MainThread mainThread, Headers headers, Gson gson, HttpProfiler profiler) {, +    this.server = server;, +    this.httpClientProvider = httpClientProvider;, +    this.executor = executor;, +    this.mainThread = mainThread;, +    this.headers = headers;, +    this.gson = gson;, +    this.profiler = profiler;, +  }, +, +   * javax.inject.Named} annotations on the method parameters., +++ b/http/src/test/java/retrofit/http/HttpRequestBuilderTest.java, +import javax.inject.Named;, +++ b/http/src/test/java/retrofit/http/RestAdapterTest.java, +import javax.inject.Named;, +import javax.inject.Provider;, +  private RestAdapter restAdapter;, +    Server server = new Server("http://host/api/", "http://host/web/", true);, +    Provider<HttpClient> httpClientProvider = new Provider<HttpClient>() {, +      @Override public HttpClient get() {]