[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/CallEnqueueObservable.java, +        Exceptions.throwIfFatal(t);, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/CallEnqueueObservable.java, +        Exceptions.throwIfFatal(t);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/AsyncTest.java, +import java.util.ArrayList;, +import java.util.List;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.ThreadFactory;, +import okhttp3.Dispatcher;, +import okhttp3.OkHttpClient;, +import org.junit.After;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +  private List<Throwable> uncaughtExceptions = new ArrayList<>();, +, +    ExecutorService executorService = Executors.newCachedThreadPool(new ThreadFactory() {, +      @Override public Thread newThread(Runnable r) {, +        Thread thread = new Thread(r);, +        thread.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {, +          @Override public void uncaughtException(Thread t, Throwable e) {, +            uncaughtExceptions.add(e);, +          }, +        });, +        return thread;, +      }, +    });, +, +    OkHttpClient client = new OkHttpClient.Builder(), +        .dispatcher(new Dispatcher(executorService)), +        .build();, +        .client(client), +  @After public void tearDown() {, +    assertTrue("Uncaught exceptions: " + uncaughtExceptions, uncaughtExceptions.isEmpty());, +  }, +, +, +  @Test public void bodyThrowingFatalInOnErrorPropagates() throws InterruptedException {, +    server.enqueue(new MockResponse().setResponseCode(404));, +, +    final CountDownLatch latch = new CountDownLatch(1);, +, +    TestObserver<Void> observer = new TestObserver<>();, +    final Error e = new OutOfMemoryError("Not real");, +    service.completable().subscribe(new ForwardingCompletableObserver(observer) {, +      @Override public void onError(Throwable throwable) {, +        throw e;, +      }, +    });, +, +    latch.await(1, SECONDS);, +, +    assertEquals(1, uncaughtExceptions.size());, +    assertSame(e, uncaughtExceptions.remove(0));, +  }, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/CallEnqueueObservable.java, +        Exceptions.throwIfFatal(t);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/AsyncTest.java, +import java.util.ArrayList;, +import java.util.List;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.ThreadFactory;, +import okhttp3.Dispatcher;, +import okhttp3.OkHttpClient;, +import org.junit.After;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +  private List<Throwable> uncaughtExceptions = new ArrayList<>();, +, +    ExecutorService executorService = Executors.newCachedThreadPool(new ThreadFactory() {, +      @Override public Thread newThread(Runnable r) {, +        Thread thread = new Thread(r);, +        thread.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {, +          @Override public void uncaughtException(Thread t, Throwable e) {, +            uncaughtExceptions.add(e);, +          }, +        });, +        return thread;, +      }, +    });, +, +    OkHttpClient client = new OkHttpClient.Builder(), +        .dispatcher(new Dispatcher(executorService)), +        .build();, +        .client(client), +  @After public void tearDown() {, +    assertTrue("Uncaught exceptions: " + uncaughtExceptions, uncaughtExceptions.isEmpty());, +  }, +, +, +  @Test public void bodyThrowingFatalInOnErrorPropagates() throws InterruptedException {, +    server.enqueue(new MockResponse().setResponseCode(404));, +, +    final CountDownLatch latch = new CountDownLatch(1);, +, +    TestObserver<Void> observer = new TestObserver<>();]