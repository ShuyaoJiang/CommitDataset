[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +import java.lang.annotation.Annotation;, +  @Override public CallAdapter<?> get(Type returnType, Annotation[] annotations) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +import java.lang.annotation.Annotation;, +  @Override public CallAdapter<?> get(Type returnType, Annotation[] annotations) {, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/RxJavaCallAdapterFactoryTest.java, +import java.lang.annotation.Annotation;, +  private static final Annotation[] NO_ANNOTATIONS = new Annotation[0];, +, +    assertThat(factory.get(classType, NO_ANNOTATIONS).responseType()).isEqualTo(String.class);, +    assertThat(factory.get(wilcardType, NO_ANNOTATIONS).responseType()).isEqualTo(String.class);, +    assertThat(factory.get(genericType, NO_ANNOTATIONS).responseType()) //, +    assertThat(factory.get(responseType, NO_ANNOTATIONS).responseType()).isEqualTo(String.class);, +    assertThat(factory.get(resultType, NO_ANNOTATIONS).responseType()).isEqualTo(String.class);, +    CallAdapter<?> adapter = factory.get(String.class, NO_ANNOTATIONS);, +      factory.get(observableType, NO_ANNOTATIONS);, +      factory.get(singleType, NO_ANNOTATIONS);, +      factory.get(observableType, NO_ANNOTATIONS);, +      factory.get(singleType, NO_ANNOTATIONS);, +      factory.get(observableType, NO_ANNOTATIONS);, +      factory.get(singleType, NO_ANNOTATIONS);, +    @Override public Converter<?> get(Type type, Annotation[] annotations) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +import java.lang.annotation.Annotation;, +  @Override public CallAdapter<?> get(Type returnType, Annotation[] annotations) {, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/RxJavaCallAdapterFactoryTest.java, +import java.lang.annotation.Annotation;, +  private static final Annotation[] NO_ANNOTATIONS = new Annotation[0];, +, +    assertThat(factory.get(classType, NO_ANNOTATIONS).responseType()).isEqualTo(String.class);, +    assertThat(factory.get(wilcardType, NO_ANNOTATIONS).responseType()).isEqualTo(String.class);, +    assertThat(factory.get(genericType, NO_ANNOTATIONS).responseType()) //, +    assertThat(factory.get(responseType, NO_ANNOTATIONS).responseType()).isEqualTo(String.class);, +    assertThat(factory.get(resultType, NO_ANNOTATIONS).responseType()).isEqualTo(String.class);, +    CallAdapter<?> adapter = factory.get(String.class, NO_ANNOTATIONS);, +      factory.get(observableType, NO_ANNOTATIONS);, +      factory.get(singleType, NO_ANNOTATIONS);, +      factory.get(observableType, NO_ANNOTATIONS);, +      factory.get(singleType, NO_ANNOTATIONS);, +      factory.get(observableType, NO_ANNOTATIONS);, +      factory.get(singleType, NO_ANNOTATIONS);, +    @Override public Converter<?> get(Type type, Annotation[] annotations) {, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +import java.lang.annotation.Annotation;, +  @Override public Converter<?> get(Type type, Annotation[] annotations) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +import java.lang.annotation.Annotation;, +  @Override public CallAdapter<?> get(Type returnType, Annotation[] annotations) {, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/RxJavaCallAdapterFactoryTest.java, +import java.lang.annotation.Annotation;, +  private static final Annotation[] NO_ANNOTATIONS = new Annotation[0];, +, +    assertThat(factory.get(classType, NO_ANNOTATIONS).responseType()).isEqualTo(String.class);, +    assertThat(factory.get(wilcardType, NO_ANNOTATIONS).responseType()).isEqualTo(String.class);, +    assertThat(factory.get(genericType, NO_ANNOTATIONS).responseType()) //, +    assertThat(factory.get(responseType, NO_ANNOTATIONS).responseType()).isEqualTo(String.class);, +    assertThat(factory.get(resultType, NO_ANNOTATIONS).responseType()).isEqualTo(String.class);, +    CallAdapter<?> adapter = factory.get(String.class, NO_ANNOTATIONS);, +      factory.get(observableType, NO_ANNOTATIONS);, +      factory.get(singleType, NO_ANNOTATIONS);, +      factory.get(observableType, NO_ANNOTATIONS);, +      factory.get(singleType, NO_ANNOTATIONS);, +      factory.get(observableType, NO_ANNOTATIONS);, +      factory.get(singleType, NO_ANNOTATIONS);, +    @Override public Converter<?> get(Type type, Annotation[] annotations) {, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +import java.lang.annotation.Annotation;, +  @Override public Converter<?> get(Type type, Annotation[] annotations) {, +++ b/retrofit-converters/jackson/src/main/java/retrofit/JacksonConverterFactory.java, +import java.lang.annotation.Annotation;, +  @Override public Converter<?> get(Type type, Annotation[] annotations) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +import java.lang.annotation.Annotation;, +  @Override public CallAdapter<?> get(Type returnType, Annotation[] annotations) {, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/RxJavaCallAdapterFactoryTest.java, +import java.lang.annotation.Annotation;, +  private static final Annotation[] NO_ANNOTATIONS = new Annotation[0];, +, +    assertThat(factory.get(classType, NO_ANNOTATIONS).responseType()).isEqualTo(String.class);, +    assertThat(factory.get(wilcardType, NO_ANNOTATIONS).responseType()).isEqualTo(String.class);, +    assertThat(factory.get(genericType, NO_ANNOTATIONS).responseType()) //, +    assertThat(factory.get(responseType, NO_ANNOTATIONS).responseType()).isEqualTo(String.class);, +    assertThat(factory.get(resultType, NO_ANNOTATIONS).responseType()).isEqualTo(String.class);, +    CallAdapter<?> adapter = factory.get(String.class, NO_ANNOTATIONS);, +      factory.get(observableType, NO_ANNOTATIONS);, +      factory.get(singleType, NO_ANNOTATIONS);, +      factory.get(observableType, NO_ANNOTATIONS);, +      factory.get(singleType, NO_ANNOTATIONS);, +      factory.get(observableType, NO_ANNOTATIONS);, +      factory.get(singleType, NO_ANNOTATIONS);, +    @Override public Converter<?> get(Type type, Annotation[] annotations) {, +++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java, +import java.lang.annotation.Annotation;, +  @Override public Converter<?> get(Type type, Annotation[] annotations) {, +++ b/retrofit-converters/jackson/src/main/java/retrofit/JacksonConverterFactory.java, +import java.lang.annotation.Annotation;, +  @Override public Converter<?> get(Type type, Annotation[] annotations) {, +++ b/retrofit-converters/moshi/src/main/java/retrofit/MoshiConverterFactory.java, +import java.lang.annotation.Annotation;]