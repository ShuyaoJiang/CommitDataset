[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +        } else if (behavior.calculateIsError()) {, +          if (delaySleep()) {, +            //noinspection unchecked An error response has no body., +            callback.onResponse(BehaviorCall.this, (Response<T>) behavior.createErrorResponse());, +          }, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +        } else if (behavior.calculateIsError()) {, +          if (delaySleep()) {, +            //noinspection unchecked An error response has no body., +            callback.onResponse(BehaviorCall.this, (Response<T>) behavior.createErrorResponse());, +          }, +++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java, +import java.util.concurrent.Callable;, +import okhttp3.ResponseBody;, +import retrofit2.Response;, +  private static final int DEFAULT_ERROR_PERCENT = 0; // 0% of network calls will return errors., +, +  /** Applies {@link NetworkBehavior} to instances of {@code T}. */, +  public interface Adapter<T> {, +    /**, +     * Apply {@code behavior} to {@code value} so that it exhibits the configured network behavior, +     * traits when interacted with., +     */, +    T applyBehavior(NetworkBehavior behavior, T value);, +  }, +  private volatile int errorPercent = DEFAULT_ERROR_PERCENT;, +  private volatile Callable<Response<?>> errorFactory = new Callable<Response<?>>() {, +    @Override public Response<?> call() {, +      return Response.error(500, ResponseBody.create(null, new byte[0]));, +    }, +  };, +   * It is a best practice to remove the stack trace from {@code exception} since it can, +   * misleadingly point to code unrelated to this class., +  public void setFailureException(Throwable exception) {, +    if (exception == null) {, +      throw new NullPointerException("exception == null");, +    this.failureException = exception;, +  /** The percentage of calls to {@link #calculateIsError()} that return {@code true}. */, +  public int errorPercent() {, +    return errorPercent;, +  }, +, +  /** Set the percentage of calls to {@link #calculateIsError()} that return {@code true}. */, +  public void setErrorPercent(int errorPercent) {, +    if (errorPercent < 0 || errorPercent > 100) {, +      throw new IllegalArgumentException("Error percentage must be between 0 and 100.");, +    }, +    this.errorPercent = errorPercent;, +  }, +, +  /**, +   * Set the error response factory to be used when an error is triggered. This factory may only, +   * return responses for which {@link Response#isSuccessful()} returns false., +   */, +  public void setErrorFactory(Callable<Response<?>> errorFactory) {, +    if (errorFactory == null) {, +      throw new NullPointerException("errorFactory == null");, +    }, +    this.errorFactory = errorFactory;, +  }, +, +  /** The HTTP error to be used when an error is triggered. */, +  public Response<?> createErrorResponse() {, +    Response<?> call;, +    try {, +      call = errorFactory.call();, +    } catch (Exception e) {, +      throw new IllegalStateException("Error factory threw an exception.", e);, +    }, +    if (call == null) {, +      throw new IllegalStateException("Error factory returned null.");, +    }, +    if (call.isSuccessful()) {, +      throw new IllegalStateException("Error factory returned successful response.");, +    }, +    return call;, +  }, +, +    return random.nextInt(100) < failurePercent;, +  }, +, +  /**, +   * Randomly determine whether this call should result in an HTTP error in accordance with, +   * configured behavior. When true, {@link #createErrorResponse()} should be returned., +   */, +  public boolean calculateIsError() {, +    return random.nextInt(100) < errorPercent;, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +        } else if (behavior.calculateIsError()) {, +          if (delaySleep()) {, +            //noinspection unchecked An error response has no body., +            callback.onResponse(BehaviorCall.this, (Response<T>) behavior.createErrorResponse());, +          }, +++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java, +import java.util.concurrent.Callable;, +import okhttp3.ResponseBody;, +import retrofit2.Response;, +  private static final int DEFAULT_ERROR_PERCENT = 0; // 0% of network calls will return errors., +]