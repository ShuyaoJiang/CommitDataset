[+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +            callback.onFailure(new IOException("canceled"));, +          callback.onFailure(new IOException("canceled"));, +      throw new IOException("canceled");, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +            callback.onFailure(new IOException("canceled"));, +          callback.onFailure(new IOException("canceled"));, +      throw new IOException("canceled");, +++ b/retrofit-mock/src/test/java/retrofit2/mock/MockRetrofitTest.java, +    } catch (IOException e) {, +      assertThat(e).isExactlyInstanceOf(IOException.class).hasMessage("canceled");, +    assertThat(failureRef.get()).isExactlyInstanceOf(IOException.class).hasMessage("canceled");, +    } catch (IOException e) {, +      assertThat(e).isExactlyInstanceOf(IOException.class).hasMessage("canceled");, +    assertThat(failureRef.get()).isExactlyInstanceOf(IOException.class).hasMessage("canceled");]