[+++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +    String charset = Utils.parseCharset(body.mimeType());, +      isr = new InputStreamReader(body.in(), charset);, +      return new JsonTypedOutput(gson.toJson(object).getBytes("UTF-8"));, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +    String charset = Utils.parseCharset(body.mimeType());, +      isr = new InputStreamReader(body.in(), charset);, +      return new JsonTypedOutput(gson.toJson(object).getBytes("UTF-8"));, +++ b/retrofit/src/main/java/retrofit/http/RequestBuilder.java, +      return URLEncoder.encode(String.valueOf(found.getValue()), "UTF-8");, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +    String charset = Utils.parseCharset(body.mimeType());, +      isr = new InputStreamReader(body.in(), charset);, +      return new JsonTypedOutput(gson.toJson(object).getBytes("UTF-8"));, +++ b/retrofit/src/main/java/retrofit/http/RequestBuilder.java, +      return URLEncoder.encode(String.valueOf(found.getValue()), "UTF-8");, +++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +    String bodyCharset = Utils.parseCharset(body.mimeType());, +    String bodyString = new String(bodyBytes, bodyCharset);, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +    String charset = Utils.parseCharset(body.mimeType());, +      isr = new InputStreamReader(body.in(), charset);, +      return new JsonTypedOutput(gson.toJson(object).getBytes("UTF-8"));, +++ b/retrofit/src/main/java/retrofit/http/RequestBuilder.java, +      return URLEncoder.encode(String.valueOf(found.getValue()), "UTF-8");, +++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +    String bodyCharset = Utils.parseCharset(body.mimeType());, +    String bodyString = new String(bodyBytes, bodyCharset);, +++ b/retrofit/src/main/java/retrofit/http/Utils.java, +public final class Utils {, +  public static String parseCharset(String mimeType) {, +    return "UTF-8";, +, +  public Utils() {, +    // No instances., +  }, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +    String charset = Utils.parseCharset(body.mimeType());, +      isr = new InputStreamReader(body.in(), charset);, +      return new JsonTypedOutput(gson.toJson(object).getBytes("UTF-8"));, +++ b/retrofit/src/main/java/retrofit/http/RequestBuilder.java, +      return URLEncoder.encode(String.valueOf(found.getValue()), "UTF-8");, +++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +    String bodyCharset = Utils.parseCharset(body.mimeType());, +    String bodyString = new String(bodyBytes, bodyCharset);, +++ b/retrofit/src/main/java/retrofit/http/Utils.java, +public final class Utils {, +  public static String parseCharset(String mimeType) {, +    return "UTF-8";, +, +  public Utils() {, +    // No instances., +  }, +++ b/retrofit/src/test/java/retrofit/http/UtilsTest.java, +    assertThat(parseCharset("text/plain;charset=utf-8")).isEqualToIgnoringCase("UTF-8");, +    assertThat(parseCharset("text/plain; charset=utf-8")).isEqualToIgnoringCase("UTF-8");, +    assertThat(parseCharset("text/plain;  charset=utf-8")).isEqualToIgnoringCase("UTF-8");, +    assertThat(parseCharset("text/plain; \tcharset=utf-8")).isEqualToIgnoringCase("UTF-8");, +    assertThat(parseCharset("text/plain; \r\n\tcharset=utf-8")).isEqualToIgnoringCase("UTF-8");, +    assertThat(parseCharset("text/plain; CHARSET=utf-8")).isEqualToIgnoringCase("UTF-8");, +    assertThat(parseCharset("text/plain; charset=UTF-8")).isEqualToIgnoringCase("UTF-8");, +    assertThat(parseCharset("text/plain; charset=\"\\u\\tf-\\8\"")).isEqualToIgnoringCase("UTF-8");, +    assertThat(parseCharset("text/plain; charset=\"utf-8\"")).isEqualToIgnoringCase("UTF-8");, +    assertThat(parseCharset("text/plain;charset=utf-8;other=thing")).isEqualToIgnoringCase("UTF-8");, +    assertThat(parseCharset("text/plain; notthecharset=utf-16;")).isEqualToIgnoringCase("UTF-8");]