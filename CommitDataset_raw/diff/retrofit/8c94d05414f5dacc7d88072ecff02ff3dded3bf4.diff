[+++ b/retrofit-mock/src/main/java/retrofit/mock/BehaviorCall.java, +  BehaviorCall(NetworkBehavior behavior, ExecutorService backgroundExecutor,, +      Executor callbackExecutor, Call<T> delegate) {, +    this.behavior = behavior;, +    this.backgroundExecutor = backgroundExecutor;, +    this.delegate = delegate;, +    return new BehaviorCall<>(behavior, backgroundExecutor, callbackExecutor, delegate.clone());, +            callback.onResponse(response);, +            @Override public void onResponse(final Response<T> response) {, +      @Override public void onResponse(Response<T> response) {, +++ b/retrofit-mock/src/main/java/retrofit/mock/BehaviorCall.java, +  BehaviorCall(NetworkBehavior behavior, ExecutorService backgroundExecutor,, +      Executor callbackExecutor, Call<T> delegate) {, +    this.behavior = behavior;, +    this.backgroundExecutor = backgroundExecutor;, +    this.delegate = delegate;, +    return new BehaviorCall<>(behavior, backgroundExecutor, callbackExecutor, delegate.clone());, +            callback.onResponse(response);, +            @Override public void onResponse(final Response<T> response) {, +      @Override public void onResponse(Response<T> response) {, +++ b/retrofit-mock/src/main/java/retrofit/mock/CallBehaviorAdapter.java, +import java.util.concurrent.Executor;, +  private final Executor callbackExecutor;, +    this.callbackExecutor = retrofit.callbackExecutor();, +    return new BehaviorCall<>(behavior, backgroundExecutor, callbackExecutor, value);, +++ b/retrofit-mock/src/main/java/retrofit/mock/BehaviorCall.java, +  BehaviorCall(NetworkBehavior behavior, ExecutorService backgroundExecutor,, +      Executor callbackExecutor, Call<T> delegate) {, +    this.behavior = behavior;, +    this.backgroundExecutor = backgroundExecutor;, +    this.delegate = delegate;, +    return new BehaviorCall<>(behavior, backgroundExecutor, callbackExecutor, delegate.clone());, +            callback.onResponse(response);, +            @Override public void onResponse(final Response<T> response) {, +      @Override public void onResponse(Response<T> response) {, +++ b/retrofit-mock/src/main/java/retrofit/mock/CallBehaviorAdapter.java, +import java.util.concurrent.Executor;, +  private final Executor callbackExecutor;, +    this.callbackExecutor = retrofit.callbackExecutor();, +    return new BehaviorCall<>(behavior, backgroundExecutor, callbackExecutor, value);, +++ b/retrofit-mock/src/main/java/retrofit/mock/Calls.java, +  public static <T> Call<T> response(T successValue) {, +    return response(Response.success(successValue));, +  public static <T> Call<T> response(final Response<T> response) {, +        callback.onResponse(response);, +++ b/retrofit-mock/src/main/java/retrofit/mock/BehaviorCall.java, +  BehaviorCall(NetworkBehavior behavior, ExecutorService backgroundExecutor,, +      Executor callbackExecutor, Call<T> delegate) {, +    this.behavior = behavior;, +    this.backgroundExecutor = backgroundExecutor;, +    this.delegate = delegate;, +    return new BehaviorCall<>(behavior, backgroundExecutor, callbackExecutor, delegate.clone());, +            callback.onResponse(response);, +            @Override public void onResponse(final Response<T> response) {, +      @Override public void onResponse(Response<T> response) {, +++ b/retrofit-mock/src/main/java/retrofit/mock/CallBehaviorAdapter.java, +import java.util.concurrent.Executor;, +  private final Executor callbackExecutor;, +    this.callbackExecutor = retrofit.callbackExecutor();, +    return new BehaviorCall<>(behavior, backgroundExecutor, callbackExecutor, value);, +++ b/retrofit-mock/src/main/java/retrofit/mock/Calls.java, +  public static <T> Call<T> response(T successValue) {, +    return response(Response.success(successValue));, +  public static <T> Call<T> response(final Response<T> response) {, +        callback.onResponse(response);, +++ b/retrofit-mock/src/test/java/retrofit/MockRetrofitTest.java, +    Retrofit retrofit = new Retrofit.Builder(), +        return Calls.response("Response!");, +      @Override public void onResponse(Response<String> response) {, +      @Override public void onResponse(Response<String> response) {, +      @Override public void onResponse(Response<String> response) {, +      @Override public void onResponse(Response<String> response) {, +      @Override public void onResponse(Response<String> response) {, +++ b/retrofit-mock/src/main/java/retrofit/mock/BehaviorCall.java, +  BehaviorCall(NetworkBehavior behavior, ExecutorService backgroundExecutor,, +      Executor callbackExecutor, Call<T> delegate) {, +    this.behavior = behavior;, +    this.backgroundExecutor = backgroundExecutor;, +    this.delegate = delegate;, +    return new BehaviorCall<>(behavior, backgroundExecutor, callbackExecutor, delegate.clone());, +            callback.onResponse(response);, +            @Override public void onResponse(final Response<T> response) {, +      @Override public void onResponse(Response<T> response) {, +++ b/retrofit-mock/src/main/java/retrofit/mock/CallBehaviorAdapter.java, +import java.util.concurrent.Executor;, +  private final Executor callbackExecutor;, +    this.callbackExecutor = retrofit.callbackExecutor();, +    return new BehaviorCall<>(behavior, backgroundExecutor, callbackExecutor, value);, +++ b/retrofit-mock/src/main/java/retrofit/mock/Calls.java, +  public static <T> Call<T> response(T successValue) {, +    return response(Response.success(successValue));, +  public static <T> Call<T> response(final Response<T> response) {, +        callback.onResponse(response);, +++ b/retrofit-mock/src/test/java/retrofit/MockRetrofitTest.java, +    Retrofit retrofit = new Retrofit.Builder(), +        return Calls.response("Response!");, +      @Override public void onResponse(Response<String> response) {, +      @Override public void onResponse(Response<String> response) {, +      @Override public void onResponse(Response<String> response) {, +      @Override public void onResponse(Response<String> response) {]