[+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import java.lang.reflect.Array;, +              for (int x = 0, arrayLength = Array.getLength(value); x < arrayLength; x++) {, +                Object arrayValue = Array.get(value, x);, +            } else if (value.getClass().isArray()) {, +              for (int x = 0, arrayLength = Array.getLength(value); x < arrayLength; x++) {, +                Object arrayValue = Array.get(value, x);, +                if (arrayValue != null) { // Skip null values., +                  formBody.addField(name, arrayValue.toString());, +                }, +              }, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import java.lang.reflect.Array;, +              for (int x = 0, arrayLength = Array.getLength(value); x < arrayLength; x++) {, +                Object arrayValue = Array.get(value, x);, +            } else if (value.getClass().isArray()) {, +              for (int x = 0, arrayLength = Array.getLength(value); x < arrayLength; x++) {, +                Object arrayValue = Array.get(value, x);, +                if (arrayValue != null) { // Skip null values., +                  formBody.addField(name, arrayValue.toString());, +                }, +              }, +++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java, +    List<Object> values = Arrays.<Object>asList(1, 2, null, "three");, +    Object[] values = { 1, 2, null, "three" };, +  @Test public void getWithQueryParamPrimitiveArray() throws Exception {, +    int[] values = { 1, 2, 3 };, +, +    Request request = new Helper() //, +        .setMethod("GET") //, +        .setUrl("http://example.com") //, +        .setPath("/foo/bar/") //, +        .addQueryParam("key", values) //, +        .build();, +    assertThat(request.getMethod()).isEqualTo("GET");, +    assertThat(request.getHeaders()).isEmpty();, +    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?key=1&key=2&key=3");, +    assertThat(request.getBody()).isNull();, +  }, +, +    List<Object> values = Arrays.<Object>asList("foo", "bar", null, 3);, +        .addField("foo", values) //, +  @Test public void formEncodedFieldArray() throws Exception {, +    Object[] values = { 1, 2, null, "three" };, +, +    Request request = new Helper() //, +        .setMethod("POST") //, +        .setHasBody() //, +        .setUrl("http://example.com") //, +        .setPath("/foo") //, +        .setFormEncoded() //, +        .addField("foo", values) //, +        .addField("kit", "kat") //, +        .build();, +    assertTypedBytes(request.getBody(), "foo=1&foo=2&foo=three&kit=kat");, +  }, +, +  @Test public void formEncodedFieldPrimitiveArray() throws Exception {, +    int[] values = { 1, 2, 3 };, +, +    Request request = new Helper() //, +        .setMethod("POST") //, +        .setHasBody() //, +        .setUrl("http://example.com") //, +        .setPath("/foo") //, +        .setFormEncoded() //, +        .addField("foo", values) //, +        .addField("kit", "kat") //, +        .build();, +    assertTypedBytes(request.getBody(), "foo=1&foo=2&foo=3&kit=kat");, +  }, +, +    Helper addField(String name, Object value) {]