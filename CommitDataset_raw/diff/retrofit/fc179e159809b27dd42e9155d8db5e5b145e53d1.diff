[+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private static final byte[] NO_BODY = new byte[0];, +  private final boolean requestHasBody;, +    requestHasBody = methodInfo.requestHasBody;, +      } else if (requestHasBody) {, +        // Body is absent, make an empty body., +        body = RequestBody.create(null, NO_BODY);, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private static final byte[] NO_BODY = new byte[0];, +  private final boolean requestHasBody;, +    requestHasBody = methodInfo.requestHasBody;, +      } else if (requestHasBody) {, +        // Body is absent, make an empty body., +        body = RequestBody.create(null, NO_BODY);, +++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java, +  @Test public void emptyBody() {, +    class Example {, +      @POST("/foo/bar/") //, +      Call<Object> method() {, +        return null;, +      }, +    }, +    Request request = buildRequest(Example.class);, +    assertThat(request.method()).isEqualTo("POST");, +    assertThat(request.headers().size()).isZero();, +    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");, +    assertBody(request.body(), "");, +  }, +, +  @Ignore("https://github.com/square/okhttp/issues/229"), +  @Test public void customMethodEmptyBody() {, +    class Example {, +      @HTTP(method = "CUSTOM", path = "/foo/bar/", hasBody = true) //, +      Call<Object> method() {, +        return null;, +      }, +    }, +    Request request = buildRequest(Example.class);, +    assertThat(request.method()).isEqualTo("CUSTOM");, +    assertThat(request.headers().size()).isZero();, +    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");, +    assertBody(request.body(), "");, +  }, +, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private static final byte[] NO_BODY = new byte[0];, +  private final boolean requestHasBody;, +    requestHasBody = methodInfo.requestHasBody;, +      } else if (requestHasBody) {, +        // Body is absent, make an empty body., +        body = RequestBody.create(null, NO_BODY);, +++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java, +  @Test public void emptyBody() {, +    class Example {, +      @POST("/foo/bar/") //, +      Call<Object> method() {, +        return null;, +      }, +    }, +    Request request = buildRequest(Example.class);, +    assertThat(request.method()).isEqualTo("POST");, +    assertThat(request.headers().size()).isZero();, +    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");, +    assertBody(request.body(), "");, +  }, +, +  @Ignore("https://github.com/square/okhttp/issues/229"), +  @Test public void customMethodEmptyBody() {, +    class Example {, +      @HTTP(method = "CUSTOM", path = "/foo/bar/", hasBody = true) //, +      Call<Object> method() {, +        return null;, +      }, +    }, +    Request request = buildRequest(Example.class);, +    assertThat(request.method()).isEqualTo("CUSTOM");, +    assertThat(request.headers().size()).isZero();, +    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");, +    assertBody(request.body(), "");, +  }, +, +++ b/website/index.html, +    <link href="http://fonts.googleapis.com/css?family=Roboto:400,300italic,100,100italic,300" rel="stylesheet" type="text/css">, +    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>]