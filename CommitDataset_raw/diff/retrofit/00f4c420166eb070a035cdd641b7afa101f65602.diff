[+++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import static retrofit.RetrofitError.unexpectedError;, +        try {, +        } catch (RetrofitError error) {, +          Throwable newError = restAdapter.errorHandler.handleError(error);, +          if (newError == null) {, +            throw new IllegalStateException("Error handler returned null for wrapped exception.",, +                error);, +          }, +          throw newError;, +        }, +        IOException exception = new IOException("Mock network error!");, +        RetrofitError error = RetrofitError.networkError(url, exception);, +        Throwable cause = restAdapter.errorHandler.handleError(error);, +        final RetrofitError e = cause == error ? error : unexpectedError(error.getUrl(), cause);, +            realCallback.failure(e);, +        RetrofitError error = new MockHttpRetrofitError(url, response, httpEx.responseBody);, +        Throwable cause = restAdapter.errorHandler.handleError(error);, +        final RetrofitError e = cause == error ? error : unexpectedError(error.getUrl(), cause);, +            realCallback.failure(e);, +    private final ErrorHandler errorHandler;, +      errorHandler = restAdapter.errorHandler;, +          } catch (RetrofitError e) {, +            subscriber.onError(errorHandler.handleError(e));, +          } catch (Throwable e) {, +            subscriber.onError(e);, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import static retrofit.RetrofitError.unexpectedError;, +        try {, +        } catch (RetrofitError error) {, +          Throwable newError = restAdapter.errorHandler.handleError(error);, +          if (newError == null) {, +            throw new IllegalStateException("Error handler returned null for wrapped exception.",, +                error);, +          }, +          throw newError;, +        }, +        IOException exception = new IOException("Mock network error!");, +        RetrofitError error = RetrofitError.networkError(url, exception);, +        Throwable cause = restAdapter.errorHandler.handleError(error);, +        final RetrofitError e = cause == error ? error : unexpectedError(error.getUrl(), cause);, +            realCallback.failure(e);, +        RetrofitError error = new MockHttpRetrofitError(url, response, httpEx.responseBody);, +        Throwable cause = restAdapter.errorHandler.handleError(error);, +        final RetrofitError e = cause == error ? error : unexpectedError(error.getUrl(), cause);, +            realCallback.failure(e);, +    private final ErrorHandler errorHandler;, +      errorHandler = restAdapter.errorHandler;, +          } catch (RetrofitError e) {, +            subscriber.onError(errorHandler.handleError(e));, +          } catch (Throwable e) {, +            subscriber.onError(e);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +import java.util.concurrent.CountDownLatch;, +import static java.util.concurrent.TimeUnit.SECONDS;, +  private Throwable nextError;, +        .setErrorHandler(new ErrorHandler() {, +          @Override public Throwable handleError(RetrofitError cause) {, +            if (nextError != null) {, +              Throwable error = nextError;, +              nextError = null;, +              return error;, +            }, +            return cause;, +          }, +        }), +, +  @Test public void syncErrorUsesErrorHandler() {, +    mockRestAdapter.setDelay(100);, +    mockRestAdapter.setVariancePercentage(0);, +    mockRestAdapter.setErrorPercentage(0);, +, +    class MockSyncExample implements SyncExample {, +      @Override public Object doStuff() {, +        throw MockHttpException.newNotFound(new Object());, +      }, +    }, +, +    SyncExample mockService = mockRestAdapter.create(SyncExample.class, new MockSyncExample());, +    nextError = new IllegalArgumentException("Test");, +, +    try {, +      mockService.doStuff();, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessage("Test");, +    }, +  }, +, +  @Test public void asyncErrorUsesErrorHandler() throws InterruptedException {, +    mockRestAdapter.setDelay(100);, +    mockRestAdapter.setVariancePercentage(0);, +    mockRestAdapter.setErrorPercentage(0);, +, +    class MockAsyncExample implements AsyncExample {, +      @Override public void doStuff(Callback<Object> cb) {, +        throw MockHttpException.newNotFound(new Object());, +      }, +    }, +]