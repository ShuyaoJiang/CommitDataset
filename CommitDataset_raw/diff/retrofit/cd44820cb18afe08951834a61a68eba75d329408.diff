[+++ b/retrofit/src/main/java/retrofit/MethodHandler.java, +    Type responseType = callAdapter.responseType();, +        (Converter<ResponseBody, Object>) createResponseConverter(method, retrofit, responseType);, +    RequestFactory requestFactory = RequestFactoryParser.parse(method, retrofit);, +      Retrofit retrofit, Type responseType) {, +      return retrofit.responseConverter(responseType, annotations);, +++ b/retrofit/src/main/java/retrofit/MethodHandler.java, +    Type responseType = callAdapter.responseType();, +        (Converter<ResponseBody, Object>) createResponseConverter(method, retrofit, responseType);, +    RequestFactory requestFactory = RequestFactoryParser.parse(method, retrofit);, +      Retrofit retrofit, Type responseType) {, +      return retrofit.responseConverter(responseType, annotations);, +++ b/retrofit/src/main/java/retrofit/RequestBuilderAction.java, +    private final Retrofit retrofit;, +    PartMap(Retrofit retrofit, String transferEncoding, Annotation[] annotations) {, +      this.retrofit = retrofit;, +            (Converter<Object, RequestBody>) retrofit.requestConverter(entryClass, annotations);, +++ b/retrofit/src/main/java/retrofit/MethodHandler.java, +    Type responseType = callAdapter.responseType();, +        (Converter<ResponseBody, Object>) createResponseConverter(method, retrofit, responseType);, +    RequestFactory requestFactory = RequestFactoryParser.parse(method, retrofit);, +      Retrofit retrofit, Type responseType) {, +      return retrofit.responseConverter(responseType, annotations);, +++ b/retrofit/src/main/java/retrofit/RequestBuilderAction.java, +    private final Retrofit retrofit;, +    PartMap(Retrofit retrofit, String transferEncoding, Annotation[] annotations) {, +      this.retrofit = retrofit;, +            (Converter<Object, RequestBody>) retrofit.requestConverter(entryClass, annotations);, +++ b/retrofit/src/main/java/retrofit/RequestFactoryParser.java, +  static RequestFactory parse(Method method, Retrofit retrofit) {, +    parser.parseParameters(retrofit);, +    return parser.toRequestFactory(retrofit.baseUrl());, +  private void parseParameters(Retrofit retrofit) {, +              converter =, +                  retrofit.requestConverter(methodParameterType, methodParameterAnnotations);, +            action = new RequestBuilderAction.PartMap(retrofit, partMap.encoding(),, +              converter =, +                  retrofit.requestConverter(methodParameterType, methodParameterAnnotations);, +++ b/retrofit/src/main/java/retrofit/MethodHandler.java, +    Type responseType = callAdapter.responseType();, +        (Converter<ResponseBody, Object>) createResponseConverter(method, retrofit, responseType);, +    RequestFactory requestFactory = RequestFactoryParser.parse(method, retrofit);, +      Retrofit retrofit, Type responseType) {, +      return retrofit.responseConverter(responseType, annotations);, +++ b/retrofit/src/main/java/retrofit/RequestBuilderAction.java, +    private final Retrofit retrofit;, +    PartMap(Retrofit retrofit, String transferEncoding, Annotation[] annotations) {, +      this.retrofit = retrofit;, +            (Converter<Object, RequestBody>) retrofit.requestConverter(entryClass, annotations);, +++ b/retrofit/src/main/java/retrofit/RequestFactoryParser.java, +  static RequestFactory parse(Method method, Retrofit retrofit) {, +    parser.parseParameters(retrofit);, +    return parser.toRequestFactory(retrofit.baseUrl());, +  private void parseParameters(Retrofit retrofit) {, +              converter =, +                  retrofit.requestConverter(methodParameterType, methodParameterAnnotations);, +            action = new RequestBuilderAction.PartMap(retrofit, partMap.encoding(),, +              converter =, +                  retrofit.requestConverter(methodParameterType, methodParameterAnnotations);, +++ b/retrofit/src/main/java/retrofit/Retrofit.java, +  /**, +   * Returns a {@link Converter} for {@code type} to {@link RequestBody} from the available, +   * {@linkplain #converterFactories() factories}., +   */, +  public Converter<?, RequestBody> requestConverter(Type type, Annotation[] annotations) {, +    checkNotNull(type, "type == null");, +    checkNotNull(annotations, "annotations == null");, +, +    for (int i = 0, count = converterFactories.size(); i < count; i++) {, +      Converter<?, RequestBody> converter =, +          converterFactories.get(i).toRequestBody(type, annotations);, +      if (converter != null) {, +        return converter;, +      }, +    }, +, +    StringBuilder builder = new StringBuilder("Could not locate RequestBody converter for "), +        .append(type), +        .append(". Tried:");, +    for (Converter.Factory converterFactory : converterFactories) {, +      builder.append("\n * ").append(converterFactory.getClass().getName());, +    }, +    throw new IllegalArgumentException(builder.toString());, +  }, +, +  /**, +   * Returns a {@link Converter} for {@link ResponseBody} to {@code type} from the available, +   * {@linkplain #converterFactories() factories}., +   */, +  public Converter<ResponseBody, ?> responseConverter(Type type, Annotation[] annotations) {, +    checkNotNull(type, "type == null");, +    checkNotNull(annotations, "annotations == null");, +, +    for (int i = 0, count = converterFactories.size(); i < count; i++) {, +      Converter<ResponseBody, ?> converter =, +          converterFactories.get(i).fromResponseBody(type, annotations);, +      if (converter != null) {, +        return converter;, +      }, +    }]