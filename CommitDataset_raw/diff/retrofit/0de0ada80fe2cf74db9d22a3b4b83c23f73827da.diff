[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CompletableTest.java, +, +  @Test public void subscribeTwice() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +    server.enqueue(new MockResponse().setBody("Hey"));, +, +    Completable observable = service.completable();, +, +    RecordingSubscriber<String> subscriber1 = subscriberRule.create();, +    observable.subscribe(subscriber1);, +    subscriber1.assertCompleted();, +, +    RecordingSubscriber<String> subscriber2 = subscriberRule.create();, +    observable.subscribe(subscriber2);, +    subscriber2.assertCompleted();, +  }, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CompletableTest.java, +, +  @Test public void subscribeTwice() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +    server.enqueue(new MockResponse().setBody("Hey"));, +, +    Completable observable = service.completable();, +, +    RecordingSubscriber<String> subscriber1 = subscriberRule.create();, +    observable.subscribe(subscriber1);, +    subscriber1.assertCompleted();, +, +    RecordingSubscriber<String> subscriber2 = subscriberRule.create();, +    observable.subscribe(subscriber2);, +    subscriber2.assertCompleted();, +  }, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableTest.java, +, +  @Test public void subscribeTwice() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +    server.enqueue(new MockResponse().setBody("Hey"));, +, +    Observable<String> observable = service.body();, +, +    RecordingSubscriber<String> subscriber1 = subscriberRule.create();, +    observable.subscribe(subscriber1);, +    subscriber1.assertValue("Hi").assertCompleted();, +, +    RecordingSubscriber<String> subscriber2 = subscriberRule.create();, +    observable.subscribe(subscriber2);, +    subscriber2.assertValue("Hey").assertCompleted();, +  }, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CompletableTest.java, +, +  @Test public void subscribeTwice() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +    server.enqueue(new MockResponse().setBody("Hey"));, +, +    Completable observable = service.completable();, +, +    RecordingSubscriber<String> subscriber1 = subscriberRule.create();, +    observable.subscribe(subscriber1);, +    subscriber1.assertCompleted();, +, +    RecordingSubscriber<String> subscriber2 = subscriberRule.create();, +    observable.subscribe(subscriber2);, +    subscriber2.assertCompleted();, +  }, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableTest.java, +, +  @Test public void subscribeTwice() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +    server.enqueue(new MockResponse().setBody("Hey"));, +, +    Observable<String> observable = service.body();, +, +    RecordingSubscriber<String> subscriber1 = subscriberRule.create();, +    observable.subscribe(subscriber1);, +    subscriber1.assertValue("Hi").assertCompleted();, +, +    RecordingSubscriber<String> subscriber2 = subscriberRule.create();, +    observable.subscribe(subscriber2);, +    subscriber2.assertValue("Hey").assertCompleted();, +  }, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/SingleTest.java, +, +  @Test public void subscribeTwice() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +    server.enqueue(new MockResponse().setBody("Hey"));, +, +    Single<String> observable = service.body();, +, +    RecordingSubscriber<String> subscriber1 = subscriberRule.create();, +    observable.subscribe(subscriber1);, +    subscriber1.assertValue("Hi").assertCompleted();, +, +    RecordingSubscriber<String> subscriber2 = subscriberRule.create();, +    observable.subscribe(subscriber2);, +    subscriber2.assertValue("Hey").assertCompleted();, +  }, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CompletableTest.java, +, +  @Test public void subscribeTwice() {, +    server.enqueue(new MockResponse().setBody("Hi"));]