[+++ b/retrofit-adapters/README.md, +To use, supply an instance of your desired adapter when building your `Retrofit` instance., +++ b/retrofit-adapters/README.md, +To use, supply an instance of your desired adapter when building your `Retrofit` instance., +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/HttpException.java, +  private static String getMessage(Response<?> response) {, +    if (response == null) throw new NullPointerException("response == null");, +    return "HTTP " + response.code() + " " + response.message();, +  }, +, +    super(getMessage(response));, +++ b/retrofit-adapters/README.md, +To use, supply an instance of your desired adapter when building your `Retrofit` instance., +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/HttpException.java, +  private static String getMessage(Response<?> response) {, +    if (response == null) throw new NullPointerException("response == null");, +    return "HTTP " + response.code() + " " + response.message();, +  }, +, +    super(getMessage(response));, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +import rx.Completable;, +import rx.Single;, + * Adding this class to {@link Retrofit} allows you to return an {@link Observable}, {@link Single},, + * or {@link Completable} from service methods., + * There are three configurations supported for the {@code Observable} or {@code Single} type, + * parameter:, + * <p>, + * <em>Note:</em> Support for {@link Single} and {@link Completable} is experimental and subject, + * to backwards-incompatible changes at any time since both of these types are not considered, + * stable by RxJava., +++ b/retrofit-adapters/README.md, +To use, supply an instance of your desired adapter when building your `Retrofit` instance., +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/HttpException.java, +  private static String getMessage(Response<?> response) {, +    if (response == null) throw new NullPointerException("response == null");, +    return "HTTP " + response.code() + " " + response.message();, +  }, +, +    super(getMessage(response));, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +import rx.Completable;, +import rx.Single;, + * Adding this class to {@link Retrofit} allows you to return an {@link Observable}, {@link Single},, + * or {@link Completable} from service methods., + * There are three configurations supported for the {@code Observable} or {@code Single} type, + * parameter:, + * <p>, + * <em>Note:</em> Support for {@link Single} and {@link Completable} is experimental and subject, + * to backwards-incompatible changes at any time since both of these types are not considered, + * stable by RxJava., +++ /dev/null, +++ b/retrofit-adapters/README.md, +To use, supply an instance of your desired adapter when building your `Retrofit` instance., +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/HttpException.java, +  private static String getMessage(Response<?> response) {, +    if (response == null) throw new NullPointerException("response == null");, +    return "HTTP " + response.code() + " " + response.message();, +  }, +, +    super(getMessage(response));, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +import rx.Completable;, +import rx.Single;, + * Adding this class to {@link Retrofit} allows you to return an {@link Observable}, {@link Single},, + * or {@link Completable} from service methods., + * There are three configurations supported for the {@code Observable} or {@code Single} type, + * parameter:, + * <p>, + * <em>Note:</em> Support for {@link Single} and {@link Completable} is experimental and subject, + * to backwards-incompatible changes at any time since both of these types are not considered, + * stable by RxJava., +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/CompletableTest.java, +import rx.observers.TestSubscriber;, +, +    TestSubscriber<Void> subscriber = new TestSubscriber<>();, +    service.completable().subscribe(subscriber);, +    subscriber.assertCompleted();, +    TestSubscriber<Void> subscriber = new TestSubscriber<>();, +    service.completable().subscribe(subscriber);, +    Throwable cause = subscriber.getOnErrorEvents().get(0);, +    TestSubscriber<Void> subscriber = new TestSubscriber<>();, +    service.completable().subscribe(subscriber);, +    subscriber.assertError(IOException.class);, +++ b/retrofit-adapters/README.md, +To use, supply an instance of your desired adapter when building your `Retrofit` instance., +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/HttpException.java, +  private static String getMessage(Response<?> response) {, +    if (response == null) throw new NullPointerException("response == null");, +    return "HTTP " + response.code() + " " + response.message();, +  }, +, +    super(getMessage(response));, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java, +import rx.Completable;, +import rx.Single;, + * Adding this class to {@link Retrofit} allows you to return an {@link Observable}, {@link Single},, + * or {@link Completable} from service methods., + * There are three configurations supported for the {@code Observable} or {@code Single} type]