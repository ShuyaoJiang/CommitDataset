[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +import io.reactivex.plugins.RxJavaPlugins;, +    return RxJavaPlugins.onAssembly(observable);, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +import io.reactivex.plugins.RxJavaPlugins;, +    return RxJavaPlugins.onAssembly(observable);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +import io.reactivex.functions.Function;, +import io.reactivex.plugins.RxJavaPlugins;, +, +  @Test public void observableAssembly() {, +    try {, +      final Observable<String> justMe = Observable.just("me");, +      RxJavaPlugins.setOnObservableAssembly(new Function<Observable, Observable>() {, +        @Override public Observable apply(Observable f) {, +          return justMe;, +        }, +      });, +      assertThat(service.body()).isEqualTo(justMe);, +    } finally {, +      RxJavaPlugins.reset();, +    }, +  }, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +import io.reactivex.plugins.RxJavaPlugins;, +    return RxJavaPlugins.onAssembly(observable);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +import io.reactivex.functions.Function;, +import io.reactivex.plugins.RxJavaPlugins;, +, +  @Test public void observableAssembly() {, +    try {, +      final Observable<String> justMe = Observable.just("me");, +      RxJavaPlugins.setOnObservableAssembly(new Function<Observable, Observable>() {, +        @Override public Observable apply(Observable f) {, +          return justMe;, +        }, +      });, +      assertThat(service.body()).isEqualTo(justMe);, +    } finally {, +      RxJavaPlugins.reset();, +    }, +  }, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java, +      @Override public Object convert(ResponseBody value) {, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +import io.reactivex.plugins.RxJavaPlugins;, +    return RxJavaPlugins.onAssembly(observable);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +import io.reactivex.functions.Function;, +import io.reactivex.plugins.RxJavaPlugins;, +, +  @Test public void observableAssembly() {, +    try {, +      final Observable<String> justMe = Observable.just("me");, +      RxJavaPlugins.setOnObservableAssembly(new Function<Observable, Observable>() {, +        @Override public Observable apply(Observable f) {, +          return justMe;, +        }, +      });, +      assertThat(service.body()).isEqualTo(justMe);, +    } finally {, +      RxJavaPlugins.reset();, +    }, +  }, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java, +      @Override public Object convert(ResponseBody value) {, +++ b/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java, +      @Override public Object convert(ResponseBody value) {, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +import io.reactivex.plugins.RxJavaPlugins;, +    return RxJavaPlugins.onAssembly(observable);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +import io.reactivex.functions.Function;, +import io.reactivex.plugins.RxJavaPlugins;, +, +  @Test public void observableAssembly() {, +    try {, +      final Observable<String> justMe = Observable.just("me");, +      RxJavaPlugins.setOnObservableAssembly(new Function<Observable, Observable>() {, +        @Override public Observable apply(Observable f) {, +          return justMe;, +        }, +      });, +      assertThat(service.body()).isEqualTo(justMe);, +    } finally {, +      RxJavaPlugins.reset();, +    }, +  }, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java, +      @Override public Object convert(ResponseBody value) {, +++ b/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java, +      @Override public Object convert(ResponseBody value) {, +++ b/retrofit-converters/jaxb/README.md, +**Note that JAXB does not work on Android.**, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java, +import io.reactivex.plugins.RxJavaPlugins;, +    return RxJavaPlugins.onAssembly(observable);, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java, +import io.reactivex.functions.Function;]