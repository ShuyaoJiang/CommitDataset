[+++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import rx.concurrency.Schedulers;, +      String apiUrl = restAdapter.server.getUrl();, +      RequestBuilder requestBuilder = new RequestBuilder(apiUrl, methodInfo, restAdapter.converter);, +    private final RestAdapter restAdapter;, +      this.restAdapter = restAdapter;, +      }).subscribeOn(Schedulers.executor(restAdapter.httpExecutor));, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import rx.concurrency.Schedulers;, +      String apiUrl = restAdapter.server.getUrl();, +      RequestBuilder requestBuilder = new RequestBuilder(apiUrl, methodInfo, restAdapter.converter);, +    private final RestAdapter restAdapter;, +      this.restAdapter = restAdapter;, +      }).subscribeOn(Schedulers.executor(restAdapter.httpExecutor));, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private final String apiUrl;, +  RequestBuilder(String apiUrl, RestMethodInfo methodInfo, Converter converter) {, +    this.apiUrl = apiUrl;, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import rx.concurrency.Schedulers;, +      String apiUrl = restAdapter.server.getUrl();, +      RequestBuilder requestBuilder = new RequestBuilder(apiUrl, methodInfo, restAdapter.converter);, +    private final RestAdapter restAdapter;, +      this.restAdapter = restAdapter;, +      }).subscribeOn(Schedulers.executor(restAdapter.httpExecutor));, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private final String apiUrl;, +  RequestBuilder(String apiUrl, RestMethodInfo methodInfo, Converter converter) {, +    this.apiUrl = apiUrl;, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +    Scheduler getScheduler() {, +      return scheduler;, +    }, +, +      });, +        }).subscribeOn(rxSupport.getScheduler());, +        RequestBuilder requestBuilder = new RequestBuilder(serverUrl, methodInfo, converter);, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import rx.concurrency.Schedulers;, +      String apiUrl = restAdapter.server.getUrl();, +      RequestBuilder requestBuilder = new RequestBuilder(apiUrl, methodInfo, restAdapter.converter);, +    private final RestAdapter restAdapter;, +      this.restAdapter = restAdapter;, +      }).subscribeOn(Schedulers.executor(restAdapter.httpExecutor));, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private final String apiUrl;, +  RequestBuilder(String apiUrl, RestMethodInfo methodInfo, Converter converter) {, +    this.apiUrl = apiUrl;, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +    Scheduler getScheduler() {, +      return scheduler;, +    }, +, +      });, +        }).subscribeOn(rxSupport.getScheduler());, +        RequestBuilder requestBuilder = new RequestBuilder(serverUrl, methodInfo, converter);, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +          throw new IllegalArgumentException("Method ", +              + method.getName(), +              + " contains multiple HTTP methods. Found: ", +              + requestMethod, +              + " and ", +              + methodInfo.value());, +          throw new RuntimeException("Failed to extract path from ", +              + " annotation on ", +              + ".", e);, +          throw new IllegalStateException("Headers annotation was empty.");, +          throw new IllegalStateException(, +              "Only one encoding annotation per method is allowed: " + method.getName());, +          throw new IllegalStateException(, +              "Only one encoding annotation per method is allowed: " + method.getName());, +      throw new IllegalStateException(, +          "Method " + method.getName() + " not annotated with request type (e.g., GET, POST).");, +        throw new IllegalStateException(, +            "Multipart can only be specified on HTTP methods with request body (e.g., POST). (", +                + method.getName(), +                + ")");, +        throw new IllegalStateException(, +            "FormUrlEncoded can only be specified on HTTP methods with request body (e.g., POST). (", +                + method.getName(), +                + ")");, +      throw new IllegalArgumentException("URL path \"", +          + path, +          + "\" on method ", +          + method.getName(), +          + " must start with '/'. (", +          + method.getName(), +          + ")");, +        throw new IllegalStateException("URL query string \"", +            + query, +            + "\" on method ", +            + method.getName(), +            + " may not have replace block.");, +        throw new IllegalStateException(, +            "Header must be in the form \"Name: Value\": \"" + header + "\"");, +      throw new IllegalArgumentException("Method ", +          + method.getName(), +          + " may only have return type or Callback as last argument, not both.");, +      throw new IllegalArgumentException("Method ", +          + method.getName()]