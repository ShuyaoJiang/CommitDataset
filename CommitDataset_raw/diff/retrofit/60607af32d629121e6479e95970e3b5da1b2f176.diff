[+++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +  private static final String ENCODING = "UTF-8"; // TODO use actual encoding, +  private static final MimeType JSON = new MimeType("application/json", "json");, +, +      return JSON;, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +  private static final String ENCODING = "UTF-8"; // TODO use actual encoding, +  private static final MimeType JSON = new MimeType("application/json", "json");, +, +      return JSON;, +++ b/retrofit/src/main/java/retrofit/http/HttpMethodType.java, +          TypedBytesEntity entity = new TypedBytesEntity(builder.getSingleEntity());, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +  private static final String ENCODING = "UTF-8"; // TODO use actual encoding, +  private static final MimeType JSON = new MimeType("application/json", "json");, +, +      return JSON;, +++ b/retrofit/src/main/java/retrofit/http/HttpMethodType.java, +          TypedBytesEntity entity = new TypedBytesEntity(builder.getSingleEntity());, +++ b/retrofit/src/main/java/retrofit/http/TypedBytesBody.java, +/** Adapts HTTP content body to {@link TypedBytes}. */, +class TypedBytesBody extends AbstractContentBody {, +, +    String name = baseName;, +    String ext = typedBytes.mimeType().extension();, +    if (ext != null) {, +      name += "." + ext;, +    }, +    this.name = name;, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +  private static final String ENCODING = "UTF-8"; // TODO use actual encoding, +  private static final MimeType JSON = new MimeType("application/json", "json");, +, +      return JSON;, +++ b/retrofit/src/main/java/retrofit/http/HttpMethodType.java, +          TypedBytesEntity entity = new TypedBytesEntity(builder.getSingleEntity());, +++ b/retrofit/src/main/java/retrofit/http/TypedBytesBody.java, +/** Adapts HTTP content body to {@link TypedBytes}. */, +class TypedBytesBody extends AbstractContentBody {, +, +    String name = baseName;, +    String ext = typedBytes.mimeType().extension();, +    if (ext != null) {, +      name += "." + ext;, +    }, +    this.name = name;, +++ b/retrofit/src/main/java/retrofit/http/TypedBytesEntity.java, +class TypedBytesEntity extends AbstractHttpEntity {, +  private final TypedBytes typedBytes;, +    setContentType(typedBytes.mimeType().mimeName());, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +  private static final String ENCODING = "UTF-8"; // TODO use actual encoding, +  private static final MimeType JSON = new MimeType("application/json", "json");, +, +      return JSON;, +++ b/retrofit/src/main/java/retrofit/http/HttpMethodType.java, +          TypedBytesEntity entity = new TypedBytesEntity(builder.getSingleEntity());, +++ b/retrofit/src/main/java/retrofit/http/TypedBytesBody.java, +/** Adapts HTTP content body to {@link TypedBytes}. */, +class TypedBytesBody extends AbstractContentBody {, +, +    String name = baseName;, +    String ext = typedBytes.mimeType().extension();, +    if (ext != null) {, +      name += "." + ext;, +    }, +    this.name = name;, +++ b/retrofit/src/main/java/retrofit/http/TypedBytesEntity.java, +class TypedBytesEntity extends AbstractHttpEntity {, +  private final TypedBytes typedBytes;, +    setContentType(typedBytes.mimeType().mimeName());, +++ b/retrofit/src/main/java/retrofit/io/MimeType.java, +public class MimeType {, +  public MimeType(String typeName, String extension) {, +  /** Returns the standard type name. */, +  /** Returns the standard file extension. */, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +  private static final String ENCODING = "UTF-8"; // TODO use actual encoding, +  private static final MimeType JSON = new MimeType("application/json", "json");, +, +      return JSON;, +++ b/retrofit/src/main/java/retrofit/http/HttpMethodType.java, +          TypedBytesEntity entity = new TypedBytesEntity(builder.getSingleEntity());, +++ b/retrofit/src/main/java/retrofit/http/TypedBytesBody.java, +/** Adapts HTTP content body to {@link TypedBytes}. */, +class TypedBytesBody extends AbstractContentBody {, +, +    String name = baseName;, +    String ext = typedBytes.mimeType().extension();, +    if (ext != null) {, +      name += "." + ext;, +    }, +    this.name = name;, +++ b/retrofit/src/main/java/retrofit/http/TypedBytesEntity.java, +class TypedBytesEntity extends AbstractHttpEntity {, +  private final TypedBytes typedBytes;, +    setContentType(typedBytes.mimeType().mimeName());, +++ b/retrofit/src/main/java/retrofit/io/MimeType.java, +public class MimeType {, +  public MimeType(String typeName, String extension) {]