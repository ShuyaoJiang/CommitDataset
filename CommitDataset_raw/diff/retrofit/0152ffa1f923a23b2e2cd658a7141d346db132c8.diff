[+++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +      if (statusCode == 204 || statusCode == 205) {, +        // HTTP 204 No Content "...response MUST NOT include a message-body", +        // HTTP 205 Reset Content "...response MUST NOT include an entity", +        if (body.contentLength() > 0) {, +          throw new IllegalStateException(statusCode + " response must not include body.");, +        }, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +      if (statusCode == 204 || statusCode == 205) {, +        // HTTP 204 No Content "...response MUST NOT include a message-body", +        // HTTP 205 Reset Content "...response MUST NOT include an entity", +        if (body.contentLength() > 0) {, +          throw new IllegalStateException(statusCode + " response must not include body.");, +        }, +++ b/retrofit/src/test/java/retrofit/RestAdapterTest.java, +import retrofit.converter.Converter;, +import retrofit.converter.GsonConverter;, +import static org.mockito.Mockito.spy;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +  private Converter converter;, +    converter = spy(new GsonConverter());, +, +        .setConverter(converter), +  @Test public void http204SkipsConverter() {, +    server.enqueue(new MockResponse().setStatus("HTTP/1.1 204 Nothin"));, +    assertThat(example.something()).isNull();, +    verifyNoMoreInteractions(converter);, +  }, +, +  @Test public void http204Response() {, +    server.enqueue(new MockResponse().setStatus("HTTP/1.1 204 Nothin"));, +    Response response = example.direct();, +    assertThat(response.code()).isEqualTo(204);, +  }, +, +  @Test public void http204WithBodyThrows() {, +    server.enqueue(new MockResponse().setStatus("HTTP/1.1 204 Nothin").setBody("Hey"));, +    try {, +      example.something();, +      fail();, +    } catch (RetrofitError e) {, +      assertThat(e).hasMessage("204 response must not include body.");, +      Throwable cause = e.getCause();, +      assertThat(cause).isInstanceOf(IllegalStateException.class);, +      assertThat(cause).hasMessage("204 response must not include body.");, +    }, +  }, +, +  @Test public void http205SkipsConverter() {, +    server.enqueue(new MockResponse().setStatus("HTTP/1.1 205 Nothin"));, +    assertThat(example.something()).isNull();, +    verifyNoMoreInteractions(converter);, +  }, +, +  @Test public void http205Response() {, +    server.enqueue(new MockResponse().setStatus("HTTP/1.1 205 Nothin"));, +    Response response = example.direct();, +    assertThat(response.code()).isEqualTo(205);, +  }, +, +  @Test public void http205WithBodyThrows() {, +    server.enqueue(new MockResponse().setStatus("HTTP/1.1 205 Nothin").setBody("Hey"));, +    try {, +      example.something();, +      fail();, +    } catch (RetrofitError e) {, +      assertThat(e).hasMessage("205 response must not include body.");, +      Throwable cause = e.getCause();, +      assertThat(cause).isInstanceOf(IllegalStateException.class);, +      assertThat(cause).hasMessage("205 response must not include body.");, +    }, +  }, +]