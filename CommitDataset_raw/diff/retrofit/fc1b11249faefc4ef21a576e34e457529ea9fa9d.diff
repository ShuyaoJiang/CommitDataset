[+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +import static retrofit2.Utils.throwIfFatal;, +  @GuardedBy("this") // Either a RuntimeException, non-fatal Error, or IOException., +  private @Nullable Throwable creationFailure;, +      throwIfFatal(e); // Do not assign a fatal error to creationFailure., +          throwIfFatal(t);, +          throwIfFatal(e); //  Do not assign a fatal error to creationFailure., +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +import static retrofit2.Utils.throwIfFatal;, +  @GuardedBy("this") // Either a RuntimeException, non-fatal Error, or IOException., +  private @Nullable Throwable creationFailure;, +      throwIfFatal(e); // Do not assign a fatal error to creationFailure., +          throwIfFatal(t);, +          throwIfFatal(e); //  Do not assign a fatal error to creationFailure., +++ b/retrofit/src/main/java/retrofit2/Utils.java, +, +  // https://github.com/ReactiveX/RxJava/blob/6a44e5d0543a48f1c378dc833a155f3f71333bc2/, +  // src/main/java/io/reactivex/exceptions/Exceptions.java#L66, +  static void throwIfFatal(Throwable t) {, +    if (t instanceof VirtualMachineError) {, +      throw (VirtualMachineError) t;, +    } else if (t instanceof ThreadDeath) {, +      throw (ThreadDeath) t;, +    } else if (t instanceof LinkageError) {, +      throw (LinkageError) t;, +    }, +  }, +++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java, +import static retrofit2.Utils.throwIfFatal;, +  @GuardedBy("this") // Either a RuntimeException, non-fatal Error, or IOException., +  private @Nullable Throwable creationFailure;, +      throwIfFatal(e); // Do not assign a fatal error to creationFailure., +          throwIfFatal(t);, +          throwIfFatal(e); //  Do not assign a fatal error to creationFailure., +++ b/retrofit/src/main/java/retrofit2/Utils.java, +, +  // https://github.com/ReactiveX/RxJava/blob/6a44e5d0543a48f1c378dc833a155f3f71333bc2/, +  // src/main/java/io/reactivex/exceptions/Exceptions.java#L66, +  static void throwIfFatal(Throwable t) {, +    if (t instanceof VirtualMachineError) {, +      throw (VirtualMachineError) t;, +    } else if (t instanceof ThreadDeath) {, +      throw (ThreadDeath) t;, +    } else if (t instanceof LinkageError) {, +      throw (LinkageError) t;, +    }, +  }, +++ b/retrofit/src/test/java/retrofit2/CallTest.java, +import java.util.concurrent.atomic.AtomicBoolean;, +  @Test public void requestThrowingNonFatalErrorBeforeExecuteFailsExecute() throws IOException {, +        throw new Error("Broken!");, +    } catch (Error e) {, +    } catch (Error e) {, +  @Test public void requestAfterExecuteThrowingAlsoThrowsForNonFatalErrors() throws IOException {, +        throw new Error("Broken!");, +    } catch (Error e) {, +    } catch (Error e) {, +  @Test public void requestThrowingNonFatalErrorBeforeEnqueueFailsEnqueue(), +        throw new Error("Broken!");, +    } catch (Error e) {, +        assertThat(t).isExactlyInstanceOf(Error.class).hasMessage("Broken!");, +  @Test public void requestAfterEnqueueFailingThrowsForNonFatalErrors() throws IOException,, +        throw new Error("Broken!");, +      }, +    };, +    Call<String> call = service.postRequestBody(a);, +, +    final CountDownLatch latch = new CountDownLatch(1);, +    call.enqueue(new Callback<String>() {, +      @Override public void onResponse(Call<String> call, Response<String> response) {, +      }, +, +      @Override public void onFailure(Call<String> call, Throwable t) {, +        assertThat(t).isExactlyInstanceOf(Error.class).hasMessage("Broken!");, +        assertThat(writeCount.get()).isEqualTo(1);, +        latch.countDown();, +      }, +    });, +    assertTrue(latch.await(10, SECONDS));, +, +    try {, +      call.request();, +      fail();, +    } catch (Error e) {, +      assertThat(e).hasMessage("Broken!");, +    }, +    assertThat(writeCount.get()).isEqualTo(1);, +  }, +, +  @Test public void fatalErrorsAreNotCaughtRequest() throws Exception {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(new ToStringConverterFactory()), +        .build();, +    Service service = retrofit.create(Service.class);, +, +    server.enqueue(new MockResponse());, +, +    final AtomicInteger writeCount = new AtomicInteger();, +    Object a = new Object() {]