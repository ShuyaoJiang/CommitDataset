[+++ b/retrofit-converters/simplexml/src/main/java/retrofit2/converter/simplexml/SimpleXmlResponseBodyConverter.java, +      T read = serializer.read(cls, value.charStream(), strict);, +++ b/retrofit-converters/simplexml/src/main/java/retrofit2/converter/simplexml/SimpleXmlResponseBodyConverter.java, +      T read = serializer.read(cls, value.charStream(), strict);, +++ b/retrofit-converters/simplexml/src/test/java/retrofit2/converter/simplexml/SimpleXmlConverterFactoryTest.java, +import java.nio.charset.Charset;, +import okio.Buffer;, +  @Test public void honorsCharacterEncoding() throws IOException {, +    Buffer buffer = new Buffer().writeString(, +        "<my-object><message>你好，世界</message><count>10</count></my-object>",, +        Charset.forName("GBK"));, +    server.enqueue(, +        new MockResponse().setBody(buffer).addHeader("Content-Type", "text/xml;charset=GBK"));, +, +    Call<MyObject> call = service.get();, +    Response<MyObject> response = call.execute();, +    MyObject body = response.body();, +    assertThat(body.getMessage()).isEqualTo("你好，世界");, +  }, +, +++ b/retrofit-converters/simplexml/src/main/java/retrofit2/converter/simplexml/SimpleXmlResponseBodyConverter.java, +      T read = serializer.read(cls, value.charStream(), strict);, +++ b/retrofit-converters/simplexml/src/test/java/retrofit2/converter/simplexml/SimpleXmlConverterFactoryTest.java, +import java.nio.charset.Charset;, +import okio.Buffer;, +  @Test public void honorsCharacterEncoding() throws IOException {, +    Buffer buffer = new Buffer().writeString(, +        "<my-object><message>你好，世界</message><count>10</count></my-object>",, +        Charset.forName("GBK"));, +    server.enqueue(, +        new MockResponse().setBody(buffer).addHeader("Content-Type", "text/xml;charset=GBK"));, +, +    Call<MyObject> call = service.get();, +    Response<MyObject> response = call.execute();, +    MyObject body = response.body();, +    assertThat(body.getMessage()).isEqualTo("你好，世界");, +  }, +, +++ b/website/index.html, +              <p>If you need to communicate with an API that uses a content-format that Retrofit does not support out of the box (e.g. YAML, txt, custom format) or you wish to use a different library to implement an existing format, you can easily create your own converter. Create a class that extends the <a href="https://github.com/square/retrofit/blob/master/retrofit/src/main/java/retrofit/Converter.java"><code>Converter.Factory</code> class</a> and pass in an instance when building your adapter.</p>]