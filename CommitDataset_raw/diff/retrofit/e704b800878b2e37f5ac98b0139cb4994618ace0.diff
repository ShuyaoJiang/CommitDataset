[+++ b/retrofit/src/main/java/retrofit/client/UrlConnectionClient.java, +import java.lang.reflect.Field;, +import java.net.ProtocolException;, +, +import retrofit.RetrofitError;, +  private final Field methodField;, +, +  public UrlConnectionClient() {, +    try {, +      this.methodField = HttpURLConnection.class.getDeclaredField("method");, +      this.methodField.setAccessible(true);, +    } catch (NoSuchFieldException e) {, +      throw RetrofitError.unexpectedError(null, e);, +    }, +  }, +, +    // HttpURLConnection artificially restricts request method, +    try {, +    } catch (ProtocolException e) {, +      try {, +        methodField.set(connection, request.getMethod());, +      } catch (IllegalAccessException e1) {, +        throw RetrofitError.unexpectedError(request.getUrl(), e1);, +      }, +    }, +, +++ b/retrofit/src/main/java/retrofit/client/UrlConnectionClient.java, +import java.lang.reflect.Field;, +import java.net.ProtocolException;, +, +import retrofit.RetrofitError;, +  private final Field methodField;, +, +  public UrlConnectionClient() {, +    try {, +      this.methodField = HttpURLConnection.class.getDeclaredField("method");, +      this.methodField.setAccessible(true);, +    } catch (NoSuchFieldException e) {, +      throw RetrofitError.unexpectedError(null, e);, +    }, +  }, +, +    // HttpURLConnection artificially restricts request method, +    try {, +    } catch (ProtocolException e) {, +      try {, +        methodField.set(connection, request.getMethod());, +      } catch (IllegalAccessException e1) {, +        throw RetrofitError.unexpectedError(request.getUrl(), e1);, +      }, +    }, +, +++ b/retrofit/src/main/java/retrofit/http/PATCH.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/** Make a PATCH request to a REST path relative to base URL. */, +@Target(METHOD), +@Retention(RUNTIME), +@RestMethod(value = "PATCH", hasBody = true), +public @interface PATCH {, +  String value();, +}, +++ b/retrofit/src/main/java/retrofit/client/UrlConnectionClient.java, +import java.lang.reflect.Field;, +import java.net.ProtocolException;, +, +import retrofit.RetrofitError;, +  private final Field methodField;, +, +  public UrlConnectionClient() {, +    try {, +      this.methodField = HttpURLConnection.class.getDeclaredField("method");, +      this.methodField.setAccessible(true);, +    } catch (NoSuchFieldException e) {, +      throw RetrofitError.unexpectedError(null, e);, +    }, +  }, +, +    // HttpURLConnection artificially restricts request method]