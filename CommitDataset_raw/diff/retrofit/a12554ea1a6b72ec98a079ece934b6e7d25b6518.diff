[+++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit2;, +, +import java.io.IOException;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Method;, +import java.lang.reflect.ParameterizedType;, +import java.lang.reflect.Type;, +import java.net.URI;, +import java.util.LinkedHashSet;, +import java.util.Map;, +import java.util.Set;, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +import javax.annotation.Nullable;, +import okhttp3.Headers;, +import okhttp3.HttpUrl;, +import okhttp3.MediaType;, +import okhttp3.MultipartBody;, +import okhttp3.RequestBody;, +import retrofit2.http.Body;, +import retrofit2.http.DELETE;, +import retrofit2.http.Field;, +import retrofit2.http.FieldMap;, +import retrofit2.http.FormUrlEncoded;, +import retrofit2.http.GET;, +import retrofit2.http.HEAD;, +import retrofit2.http.HTTP;, +import retrofit2.http.Header;, +import retrofit2.http.HeaderMap;, +import retrofit2.http.Multipart;, +import retrofit2.http.OPTIONS;, +import retrofit2.http.PATCH;, +import retrofit2.http.POST;, +import retrofit2.http.PUT;, +import retrofit2.http.Part;, +import retrofit2.http.PartMap;, +import retrofit2.http.Path;, +import retrofit2.http.Query;, +import retrofit2.http.QueryMap;, +import retrofit2.http.QueryName;, +import retrofit2.http.Url;, +, +final class RequestFactory {, +  static RequestFactory parseAnnotations(Retrofit retrofit, Method method) {, +    return new Builder(retrofit, method).build();, +  }, +, +  private final HttpUrl baseUrl;, +  final String httpMethod;, +  private final String relativeUrl;, +  private final Headers headers;, +  private final MediaType contentType;, +  private final boolean hasBody;, +  private final boolean isFormEncoded;, +  private final boolean isMultipart;, +  private final ParameterHandler<?>[] parameterHandlers;, +, +  RequestFactory(Builder builder) {, +    baseUrl = builder.retrofit.baseUrl;, +    httpMethod = builder.httpMethod;, +    relativeUrl = builder.relativeUrl;, +    headers = builder.headers;, +    contentType = builder.contentType;, +    hasBody = builder.hasBody;, +    isFormEncoded = builder.isFormEncoded;, +    isMultipart = builder.isMultipart;, +    parameterHandlers = builder.parameterHandlers;, +  }, +, +  okhttp3.Request create(@Nullable Object[] args) throws IOException {, +    RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,, +        contentType, hasBody, isFormEncoded, isMultipart);, +, +    @SuppressWarnings("unchecked") // It is an error to invoke a method with the wrong arg types., +    ParameterHandler<Object>[] handlers = (ParameterHandler<Object>[]) parameterHandlers;, +, +    int argumentCount = args != null ? args.length : 0;, +    if (argumentCount != handlers.length) {, +      throw new IllegalArgumentException("Argument count (" + argumentCount, +          + ") doesn't match expected count (" + handlers.length + ")");, +    }, +, +    for (int p = 0; p < argumentCount; p++) {, +      handlers[p].apply(requestBuilder, args[p]);]