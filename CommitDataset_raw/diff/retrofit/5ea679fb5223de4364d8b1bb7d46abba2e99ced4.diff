[+++ b/modules/core/src/retrofit/core/Callback.java, +   * @param statusCode the HTTP response code, typically 4XX, +   *, +  void clientError(T response, int statusCode);, +   * We reached the server, but it encountered an error (5xx) or its response, +   * was unparseable. Please try again later., +   * @param statusCode the HTTP response code, +  void serverError(String message, int statusCode);, +++ b/modules/core/src/retrofit/core/Callback.java, +   * @param statusCode the HTTP response code, typically 4XX, +   *, +  void clientError(T response, int statusCode);, +   * We reached the server, but it encountered an error (5xx) or its response, +   * was unparseable. Please try again later., +   * @param statusCode the HTTP response code, +  void serverError(String message, int statusCode);, +++ b/modules/http/src-tests/retrofit/http/HttpRequestBuilderTest.java, +    @Override public void clientError(SimpleResponse response, int statusCode) {, +    @Override public void serverError(String message, int statusCode) {, +++ b/modules/core/src/retrofit/core/Callback.java, +   * @param statusCode the HTTP response code, typically 4XX, +   *, +  void clientError(T response, int statusCode);, +   * We reached the server, but it encountered an error (5xx) or its response, +   * was unparseable. Please try again later., +   * @param statusCode the HTTP response code, +  void serverError(String message, int statusCode);, +++ b/modules/http/src-tests/retrofit/http/HttpRequestBuilderTest.java, +    @Override public void clientError(SimpleResponse response, int statusCode) {, +    @Override public void serverError(String message, int statusCode) {, +++ b/modules/http/src-tests/retrofit/http/RestAdapterTest.java, +  public void testServicePostSimpleClientError() throws IOException {, +    expectLifecycleClientError(HttpPost.class, BASE_URL);, +    replayAll();, +, +    PostService service = injector.getInstance(PostService.class);, +    service.post(mockCallback);, +    verifyAll();, +  }, +, +  @SuppressWarnings("unchecked"), +  public void testServicePostSimpleServerError() throws IOException {, +    expectLifecycleServerError(HttpPost.class, BASE_URL);, +    replayAll();, +, +    PostService service = injector.getInstance(PostService.class);, +    service.post(mockCallback);, +    verifyAll();, +  }, +, +  @SuppressWarnings("unchecked"), +    replay(mockExecutor, mockHeaders, mockHttpClient, mockMainThread, mockCallback, mockResponse);, +    verify(mockExecutor, mockHeaders, mockHttpClient, mockMainThread, mockCallback, mockResponse);, +    Response response = expectCallAndResponse(requestClass, requestUrl);, +    expectResponseCalls(gson.toJson(response), 200);, +    expectHttpClientExecute();, +    expectCallbacks(response);, +  }, +, +  private <T extends HttpUriRequest> void expectLifecycleClientError(Class<T> requestClass,, +      String requestUrl) throws IOException {, +    Response response = expectCallAndResponse(requestClass, requestUrl);, +    expectResponseCalls(gson.toJson(response), 409);, +    expectHttpClientExecute();, +    expectClientErrorCallbacks(response, 409);, +  }, +, +  private <T extends HttpUriRequest> void expectLifecycleServerError(Class<T> requestClass,, +      String requestUrl) throws IOException {, +    Response response = expectCallAndResponse(requestClass, requestUrl);, +    expectResponseCalls(gson.toJson(response), 501);, +    expectHttpClientExecute();, +    expectServerErrorCallbacks(501);, +  }, +, +  private <T extends HttpUriRequest> Response expectCallAndResponse(Class<T> requestClass,, +      String requestUrl) {, +    return new Response("some text");, +  @SuppressWarnings("unchecked") private void expectClientErrorCallbacks(Response response,, +      int statusCode) {, +    mockCallback.preInvoke();, +    expectLastCall().once();, +    mockCallback.clientError(response, statusCode);, +    expectLastCall().once();, +  }, +, +  @SuppressWarnings("unchecked") private void expectServerErrorCallbacks(int statusCode) {, +    mockCallback.preInvoke();, +    expectLastCall().once();, +    mockCallback.serverError(null, statusCode);, +    expectLastCall().once();, +  }, +, +  private void expectResponseCalls(String jsonToReturn, int statusCode), +    expect(mockResponse.getStatusLine()).andReturn(new BasicStatusLine(new ProtocolVersion("HTTP", 1, 1), statusCode, ""));, +++ b/modules/core/src/retrofit/core/Callback.java, +   * @param statusCode the HTTP response code, typically 4XX, +   *, +  void clientError(T response, int statusCode);, +   * We reached the server, but it encountered an error (5xx) or its response]