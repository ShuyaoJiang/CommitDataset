[+++ b/modules/http/src-tests/retrofit/http/RestAdapterTest.java, +    @SuppressWarnings("unused") public Response() {, +++ b/modules/http/src-tests/retrofit/http/RestAdapterTest.java, +    @SuppressWarnings("unused") public Response() {, +++ b/modules/http/src/retrofit/http/DELETE.java, +@HttpMethod(value = HttpMethodType.DELETE), +++ b/modules/http/src-tests/retrofit/http/RestAdapterTest.java, +    @SuppressWarnings("unused") public Response() {, +++ b/modules/http/src/retrofit/http/DELETE.java, +@HttpMethod(value = HttpMethodType.DELETE), +++ b/modules/http/src/retrofit/http/GET.java, + * @author Patrick Forhan (patrick@squareup.com), +@HttpMethod(value = HttpMethodType.GET), +++ b/modules/http/src-tests/retrofit/http/RestAdapterTest.java, +    @SuppressWarnings("unused") public Response() {, +++ b/modules/http/src/retrofit/http/DELETE.java, +@HttpMethod(value = HttpMethodType.DELETE), +++ b/modules/http/src/retrofit/http/GET.java, + * @author Patrick Forhan (patrick@squareup.com), +@HttpMethod(value = HttpMethodType.GET), +++ b/modules/http/src/retrofit/http/HttpMethod.java, + * @author Patrick Forhan (patrick@squareup.com), +  HttpMethodType value();, +++ b/modules/http/src-tests/retrofit/http/RestAdapterTest.java, +    @SuppressWarnings("unused") public Response() {, +++ b/modules/http/src/retrofit/http/DELETE.java, +@HttpMethod(value = HttpMethodType.DELETE), +++ b/modules/http/src/retrofit/http/GET.java, + * @author Patrick Forhan (patrick@squareup.com), +@HttpMethod(value = HttpMethodType.GET), +++ b/modules/http/src/retrofit/http/HttpMethod.java, + * @author Patrick Forhan (patrick@squareup.com), +  HttpMethodType value();, +++ b/modules/http/src/retrofit/http/HttpMethodType.java, +package retrofit.http;, +, +import java.io.UnsupportedEncodingException;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Method;, +import java.net.URI;, +import java.net.URISyntaxException;, +import java.util.List;, +import org.apache.http.NameValuePair;, +import org.apache.http.client.entity.UrlEncodedFormEntity;, +import org.apache.http.client.methods.HttpDelete;, +import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;, +import org.apache.http.client.methods.HttpGet;, +import org.apache.http.client.methods.HttpPost;, +import org.apache.http.client.methods.HttpPut;, +import org.apache.http.client.methods.HttpUriRequest;, +import org.apache.http.client.utils.URIUtils;, +import org.apache.http.client.utils.URLEncodedUtils;, +import org.apache.http.entity.mime.HttpMultipartMode;, +import org.apache.http.entity.mime.MultipartEntity;, +import org.apache.http.entity.mime.content.StringBody;, +import retrofit.io.TypedBytes;, +, +/**, + * Describes the type of HTTP request to perform, GET, POST, etc., + *, + * @author Patrick Forhan (patrick@squareup.com), + */, +public enum HttpMethodType {, +, +  GET {, +    @Override HttpUriRequest createFrom(HttpRequestBuilder builder), +        throws URISyntaxException {, +      List<NameValuePair> queryParams = builder.getParamList(false);, +      String queryString = URLEncodedUtils.format(queryParams, "UTF-8");, +      URI uri = URIUtils.createURI(builder.getScheme(), builder.getHost(), -1,, +          builder.getRelativePath(), queryString, null);, +      HttpGet request = new HttpGet(uri);, +      builder.getHeaders().setOn(request);, +      return request;, +    }, +  },, +, +  POST {, +    @Override HttpUriRequest createFrom(HttpRequestBuilder builder), +        throws URISyntaxException {, +      URI uri = URIUtils.createURI(builder.getScheme(), builder.getHost(), -1,, +          builder.getRelativePath(), null, null);, +      HttpPost request = new HttpPost(uri);, +      addParams(request, builder);, +      builder.getHeaders().setOn(request);, +      return request;, +    }, +  },, +, +  PUT {, +    @Override HttpUriRequest createFrom(HttpRequestBuilder builder), +        throws URISyntaxException {, +      URI uri = URIUtils.createURI(builder.getScheme(), builder.getHost(), -1,, +          builder.getRelativePath(), null, null);, +      HttpPut request = new HttpPut(uri);, +      addParams(request, builder);, +      builder.getHeaders().setOn(request);, +      return request;, +    }, +  },]