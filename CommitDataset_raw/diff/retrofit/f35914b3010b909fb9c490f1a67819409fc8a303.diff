[+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +, +      String headerValue = valueConverter.convert(value);, +      if (headerValue == null) return; // Skip converted but null values., +, +      builder.addHeader(name, headerValue);, +, +      String queryValue = valueConverter.convert(value);, +      if (queryValue == null) return; // Skip converted but null values, +, +      builder.addQueryParam(name, queryValue, encoded);, +, +        String convertedEntryValue = valueConverter.convert(entryValue);, +        if (convertedEntryValue == null) {, +          throw new IllegalArgumentException("Query map value '", +              + entryValue, +              + "' converted to null by ", +              + valueConverter.getClass().getName(), +              + " for key '", +              + entryKey, +              + "'.");, +        }, +, +        builder.addQueryParam(entryKey, convertedEntryValue, encoded);, +, +      String fieldValue = valueConverter.convert(value);, +      if (fieldValue == null) return; // Skip null converted values, +, +      builder.addFormField(name, fieldValue, encoded);, +, +        String fieldEntry = valueConverter.convert(entryValue);, +        if (fieldEntry == null) {, +          throw new IllegalArgumentException("Field map value '", +              + entryValue, +              + "' converted to null by ", +              + valueConverter.getClass().getName(), +              + " for key '", +              + entryKey, +              + "'.");, +        }, +, +        builder.addFormField(entryKey, fieldEntry, encoded);, +++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java, +, +      String headerValue = valueConverter.convert(value);, +      if (headerValue == null) return; // Skip converted but null values., +, +      builder.addHeader(name, headerValue);, +, +      String queryValue = valueConverter.convert(value);, +      if (queryValue == null) return; // Skip converted but null values, +, +      builder.addQueryParam(name, queryValue, encoded);, +, +        String convertedEntryValue = valueConverter.convert(entryValue);, +        if (convertedEntryValue == null) {, +          throw new IllegalArgumentException("Query map value '", +              + entryValue, +              + "' converted to null by ", +              + valueConverter.getClass().getName(), +              + " for key '", +              + entryKey, +              + "'.");, +        }, +, +        builder.addQueryParam(entryKey, convertedEntryValue, encoded);, +, +      String fieldValue = valueConverter.convert(value);, +      if (fieldValue == null) return; // Skip null converted values, +, +      builder.addFormField(name, fieldValue, encoded);, +, +        String fieldEntry = valueConverter.convert(entryValue);, +        if (fieldEntry == null) {, +          throw new IllegalArgumentException("Field map value '", +              + entryValue, +              + "' converted to null by ", +              + valueConverter.getClass().getName(), +              + " for key '", +              + entryKey, +              + "'.");, +        }, +, +        builder.addFormField(entryKey, fieldEntry, encoded);, +++ b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java, +import retrofit2.helpers.NullObjectConverterFactory;, +  @Test public void queryParamsSkippedIfConvertedToNull() throws Exception {, +    class Example {, +      @GET("/query") Call<ResponseBody> queryPath(@Query("a") Object a) {, +        return null;, +      }, +    }, +, +    Retrofit.Builder retrofitBuilder = new Retrofit.Builder(), +        .baseUrl("http://example.com"), +        .addConverterFactory(new NullObjectConverterFactory());, +, +    Request request = buildRequest(Example.class, retrofitBuilder, "Ignored");, +, +    assertThat(request.url().toString()).doesNotContain("Ignored");]