[+++ b/retrofit/src/main/java/retrofit/MethodHandler.java, +    RequestFactory requestFactory = RequestFactoryParser.parse(method, responseType, retrofit);, +++ b/retrofit/src/main/java/retrofit/MethodHandler.java, +    RequestFactory requestFactory = RequestFactoryParser.parse(method, responseType, retrofit);, +++ b/retrofit/src/main/java/retrofit/RequestFactoryParser.java, +  static RequestFactory parse(Method method, Type responseType, Retrofit retrofit) {, +    parser.parseMethodAnnotations(responseType);, +  private void parseMethodAnnotations(Type responseType) {, +        if (!Void.class.equals(responseType)) {, +          throw methodError(method, "HEAD method must use Void as response type.");, +        }, +++ b/retrofit/src/main/java/retrofit/MethodHandler.java, +    RequestFactory requestFactory = RequestFactoryParser.parse(method, responseType, retrofit);, +++ b/retrofit/src/main/java/retrofit/RequestFactoryParser.java, +  static RequestFactory parse(Method method, Type responseType, Retrofit retrofit) {, +    parser.parseMethodAnnotations(responseType);, +  private void parseMethodAnnotations(Type responseType) {, +        if (!Void.class.equals(responseType)) {, +          throw methodError(method, "HEAD method must use Void as response type.");, +        }, +++ b/retrofit/src/main/java/retrofit/http/HEAD.java, +/**, + * Make a HEAD request to a REST path relative to base URL., + * <p>, + * Note: HEAD requests must use {@link Void} as the response type since there is no body content., + */, +++ b/retrofit/src/main/java/retrofit/MethodHandler.java, +    RequestFactory requestFactory = RequestFactoryParser.parse(method, responseType, retrofit);, +++ b/retrofit/src/main/java/retrofit/RequestFactoryParser.java, +  static RequestFactory parse(Method method, Type responseType, Retrofit retrofit) {, +    parser.parseMethodAnnotations(responseType);, +  private void parseMethodAnnotations(Type responseType) {, +        if (!Void.class.equals(responseType)) {, +          throw methodError(method, "HEAD method must use Void as response type.");, +        }, +++ b/retrofit/src/main/java/retrofit/http/HEAD.java, +/**, + * Make a HEAD request to a REST path relative to base URL., + * <p>, + * Note: HEAD requests must use {@link Void} as the response type since there is no body content., + */, +++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java, +import com.squareup.okhttp.Interceptor;, +import com.squareup.okhttp.OkHttpClient;, +import com.squareup.okhttp.Response;, +import com.squareup.okhttp.ResponseBody;, +import java.util.concurrent.atomic.AtomicReference;, +      Call<ResponseBody> method() {, +      Call<ResponseBody> method(@Body RequestBody body) {, +      Call<ResponseBody> method() {, +      Call<ResponseBody> method() {, +      Call<ResponseBody> method(@Path("hey!") String thing) {, +      Call<ResponseBody> method(@Path("bar") String thing) {, +      Call<ResponseBody> method(@Body @Query("nope") String o) {, +      Call<ResponseBody> method(@Query("maybe") @NonNull Object o) {, +      Call<ResponseBody> method() {, +      Call<ResponseBody> method() {, +      Call<ResponseBody> method(@Part("a") int a) {, +      Call<ResponseBody> method(@PartMap Map<String, String> params) {, +      Call<ResponseBody> method() {, +      Call<ResponseBody> method() {, +      Call<ResponseBody> method(@Field("a") int a) {, +      Call<ResponseBody> method(@FieldMap Map<String, String> a) {, +      Call<ResponseBody> method() {, +      Call<ResponseBody> method() {, +      Call<ResponseBody> method() {, +      Call<ResponseBody> method() {, +      Call<ResponseBody> method(@Path("a") int a, @Path("b") int b, @Body int c) {, +      Call<ResponseBody> method(String a) {, +      Call<ResponseBody> method(@Body String o) {, +      Call<ResponseBody> method(@QueryMap List<String> a) {, +      Call<ResponseBody> method(@QueryMap Map<String, String> a) {, +      Call<ResponseBody> method(@Body String o1, @Body String o2) {, +      Call<ResponseBody> method(@Part("one") String o1, @Body String o2) {, +      Call<ResponseBody> method() {, +      Call<ResponseBody> method() {, +      Call<Void> method() {, +  @Test public void headWithoutVoidThrows() {, +    class Example {, +      @HEAD("/foo/bar/") //, +      Call<ResponseBody> method() {, +        return null;, +      }, +    }, +    try {, +      buildRequest(Example.class);, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessage(, +          "HEAD method must use Void as response type.\n    for method Example.method");, +    }, +  }, +, +      Call<ResponseBody> method(@Body RequestBody body) {, +      Call<ResponseBody> method(@Body RequestBody body) {, +      Call<ResponseBody> method(@Body RequestBody body) {, +      Call<ResponseBody> method(@Path("ping") String ping) {, +      Call<ResponseBody> method(@Path("ping") String ping) {, +      Call<ResponseBody> method(@Path(value = "ping", encoded = true) String ping) {, +      Call<ResponseBody> method(@Path("ping") String ping) {, +      Call<ResponseBody> method(@Query("ping") String ping) {]