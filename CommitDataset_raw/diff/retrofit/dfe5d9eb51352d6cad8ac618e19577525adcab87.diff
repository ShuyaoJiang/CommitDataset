[+++ b/CHANGELOG.md, +Version 1.4.1 *(2014-02-01)*, +----------------------------, +, + * Fix: `@QueryMap`, `@EncodedFieldMap`, and `@FieldMap` now correctly detect `Map`-based parameter, +   types., +, +, +++ b/CHANGELOG.md, +Version 1.4.1 *(2014-02-01)*, +----------------------------, +, + * Fix: `@QueryMap`, `@EncodedFieldMap`, and `@FieldMap` now correctly detect `Map`-based parameter, +   types., +, +, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +            if (!Map.class.isAssignableFrom(parameterType)) {, +            if (!Map.class.isAssignableFrom(parameterType)) {, +            paramUsage[i] = ParamUsage.ENCODED_QUERY_MAP;, +            if (!Map.class.isAssignableFrom(parameterType)) {, +++ b/CHANGELOG.md, +Version 1.4.1 *(2014-02-01)*, +----------------------------, +, + * Fix: `@QueryMap`, `@EncodedFieldMap`, and `@FieldMap` now correctly detect `Map`-based parameter, +   types., +, +, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +            if (!Map.class.isAssignableFrom(parameterType)) {, +            if (!Map.class.isAssignableFrom(parameterType)) {, +            paramUsage[i] = ParamUsage.ENCODED_QUERY_MAP;, +            if (!Map.class.isAssignableFrom(parameterType)) {, +++ b/retrofit/src/test/java/retrofit/RestMethodInfoTest.java, +import static retrofit.RestMethodInfo.ParamUsage.ENCODED_QUERY_MAP;, +import static retrofit.RestMethodInfo.ParamUsage.FIELD_MAP;, +import static retrofit.RestMethodInfo.ParamUsage.QUERY_MAP;, +import static retrofit.RestMethodInfo.RequestType.FORM_URL_ENCODED;, +  @Test public void queryMap() {, +    class Example {, +      @GET("/") Response a(@QueryMap Map<String, String> a) {, +        return null;, +      }, +    }, +, +    Method method = TestingUtils.getMethod(Example.class, "a");, +    RestMethodInfo methodInfo = new RestMethodInfo(method);, +    methodInfo.init();, +, +    assertThat(methodInfo.requestParamNames).hasSize(1).containsNull();, +    assertThat(methodInfo.requestParamUsage).hasSize(1).containsExactly(QUERY_MAP);, +    assertThat(methodInfo.requestType).isEqualTo(SIMPLE);, +  }, +, +  @Test public void encodedQueryMap() {, +    class Example {, +      @GET("/") Response a(@EncodedQueryMap Map<String, String> a) {, +        return null;, +      }, +    }, +, +    Method method = TestingUtils.getMethod(Example.class, "a");, +    RestMethodInfo methodInfo = new RestMethodInfo(method);, +    methodInfo.init();, +, +    assertThat(methodInfo.requestParamNames).hasSize(1).containsNull();, +    assertThat(methodInfo.requestParamUsage).hasSize(1).containsExactly(ENCODED_QUERY_MAP);, +    assertThat(methodInfo.requestType).isEqualTo(SIMPLE);, +  }, +, +  @Test public void fieldMap() {, +    class Example {, +      @FormUrlEncoded @POST("/") Response a(@FieldMap Map<String, String> a) {, +        return null;, +      }, +    }, +, +    Method method = TestingUtils.getMethod(Example.class, "a");, +    RestMethodInfo methodInfo = new RestMethodInfo(method);, +    methodInfo.init();, +, +    assertThat(methodInfo.requestParamNames).hasSize(1).containsNull();, +    assertThat(methodInfo.requestParamUsage).hasSize(1).containsExactly(FIELD_MAP);, +    assertThat(methodInfo.requestType).isEqualTo(FORM_URL_ENCODED);, +  }, +]