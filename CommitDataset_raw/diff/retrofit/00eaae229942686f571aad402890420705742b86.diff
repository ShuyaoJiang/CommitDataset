[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ResultTest.java, +    Response<String> response = Response.fromBody("Hi");, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ResultTest.java, +    Response<String> response = Response.fromBody("Hi");, +++ b/retrofit/src/main/java/retrofit/Endpoint.java, +public interface Endpoint {, +  HttpUrl url();, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ResultTest.java, +    Response<String> response = Response.fromBody("Hi");, +++ b/retrofit/src/main/java/retrofit/Endpoint.java, +public interface Endpoint {, +  HttpUrl url();, +++ b/retrofit/src/main/java/retrofit/ExceptionCatchingRequestBody.java, +  IOException getThrownException() {, +    return thrownException;, +, +  boolean threwException() {, +    return thrownException != null;, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ResultTest.java, +    Response<String> response = Response.fromBody("Hi");, +++ b/retrofit/src/main/java/retrofit/Endpoint.java, +public interface Endpoint {, +  HttpUrl url();, +++ b/retrofit/src/main/java/retrofit/ExceptionCatchingRequestBody.java, +  IOException getThrownException() {, +    return thrownException;, +, +  boolean threwException() {, +    return thrownException != null;, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +    // Remove the body (the only stateful object) from the raw response so we can pass it along., +    T converted = null;, +    ResponseBody body = null;, +, +    try {, +        // Buffer the entire body in the event of a non-2xx status to avoid future I/O., +        body = Utils.readBodyToBytesIfNecessary(rawBody);, +      } else if (code != 204 && code != 205) {, +          converted = (T) Utils.readBodyToBytesIfNecessary(rawBody);, +        } else {, +          ExceptionCatchingRequestBody wrapped = new ExceptionCatchingRequestBody(rawBody);, +            converted = (T) converter.fromBody(wrapped, responseType);, +            // If the underlying input stream threw an exception, propagate that rather than, +            // indicating that it was a conversion exception., +            if (wrapped.threwException()) {, +              throw wrapped.getThrownException();, +, +            throw e;, +          }, +        }, +      }, +    } finally {, +      rawBody.close();, +    }, +, +    return new Response<>(rawResponse, converted, body);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ResultTest.java, +    Response<String> response = Response.fromBody("Hi");, +++ b/retrofit/src/main/java/retrofit/Endpoint.java, +public interface Endpoint {, +  HttpUrl url();, +++ b/retrofit/src/main/java/retrofit/ExceptionCatchingRequestBody.java, +  IOException getThrownException() {, +    return thrownException;, +, +  boolean threwException() {, +    return thrownException != null;, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +    // Remove the body (the only stateful object) from the raw response so we can pass it along., +    T converted = null;, +    ResponseBody body = null;, +, +    try {, +        // Buffer the entire body in the event of a non-2xx status to avoid future I/O., +        body = Utils.readBodyToBytesIfNecessary(rawBody);, +      } else if (code != 204 && code != 205) {, +          converted = (T) Utils.readBodyToBytesIfNecessary(rawBody);, +        } else {, +          ExceptionCatchingRequestBody wrapped = new ExceptionCatchingRequestBody(rawBody);, +            converted = (T) converter.fromBody(wrapped, responseType);, +            // If the underlying input stream threw an exception, propagate that rather than, +            // indicating that it was a conversion exception., +            if (wrapped.threwException()) {, +              throw wrapped.getThrownException();, +, +            throw e;, +          }, +        }, +      }, +    } finally {, +      rawBody.close();, +    }, +, +    return new Response<>(rawResponse, converted, body);, +++ b/retrofit/src/main/java/retrofit/Response.java, +  public static <T, B extends T> Response<T> fromBody(B body) {, +    return fromBody(body, new com.squareup.okhttp.Response.Builder() //, +  public static <T, B extends T> Response<T> fromBody(B body,, +  public static Response<Object> fromError(int code, ResponseBody body) {, +    return fromError(new com.squareup.okhttp.Response.Builder() //]