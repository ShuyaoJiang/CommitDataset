[+++ b/retrofit/src/main/java/retrofit2/Platform.java, +import java.lang.reflect.InvocationTargetException;, +    try {, +      Class.forName("org.robovm.apple.foundation.NSObject");, +      return new IOS();, +    } catch (ClassNotFoundException ignored) {, +    }, +, +  static class IOS extends Platform {, +    @Override CallAdapter.Factory defaultCallAdapterFactory(Executor callbackExecutor) {, +      if (callbackExecutor == null) {, +        callbackExecutor = new MainThreadExecutor();, +      }, +      return new ExecutorCallAdapterFactory(callbackExecutor);, +    }, +, +    static class MainThreadExecutor implements Executor {, +      private static Object queue;, +      private static Method addOperation;, +, +      static {, +        try {, +          // queue = NSOperationQueue.getMainQueue();, +          Class<?> operationQueue = Class.forName("org.robovm.apple.foundation.NSOperationQueue");, +          queue = operationQueue.getDeclaredMethod("getMainQueue").invoke(null);, +          addOperation = operationQueue.getDeclaredMethod("addOperation", Runnable.class);, +        } catch (Exception e) {, +          throw new AssertionError(e);, +        }, +      }, +, +      @Override public void execute(Runnable r) {, +        try {, +          // queue.addOperation(r);, +          addOperation.invoke(queue, r);, +        } catch (IllegalArgumentException | IllegalAccessException e) {, +          throw new AssertionError(e);, +        } catch (InvocationTargetException e) {, +          Throwable cause = e.getCause();, +          if (cause instanceof RuntimeException) {, +            throw (RuntimeException) cause;, +          } else if (cause instanceof Error) {, +            throw (Error) cause;, +          }, +          throw new RuntimeException(cause);, +        }, +      }, +    }, +  }]