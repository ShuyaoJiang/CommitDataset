[+++ b/modules/http/src/retrofit/http/HttpProfiler.java, +// Copyright $today.year Square, Inc., +package retrofit.http;, +, +/**, + * A hook allowing clients to log HTTP method times and response status codes., + *, + * @author Eric Burke (eric@squareup.com), + */, +public interface HttpProfiler {, +, +  /** The HTTP method. */, +  public enum Method {, +    DELETE,, +    GET,, +    HEAD,, +    POST,, +    PUT, +  }, +, +  /**, +   * Invoked after an HTTP method completes. This is called from the, +   * RestAdapter's background thread., +   *, +   * @param method       the HTTP method (POST, GET, etc)., +   * @param baseUrl      the URL that was called., +   * @param relativePath the path part of the URL., +   * @param elapsedTime  time in milliseconds., +   * @param statusCode   response status code., +   */, +  void called(Method method, String baseUrl, String relativePath,, +              long elapsedTime, int statusCode);, +}, +++ b/modules/http/src/retrofit/http/HttpProfiler.java, +// Copyright $today.year Square, Inc., +package retrofit.http;, +, +/**, + * A hook allowing clients to log HTTP method times and response status codes., + *, + * @author Eric Burke (eric@squareup.com), + */, +public interface HttpProfiler {, +, +  /** The HTTP method. */, +  public enum Method {, +    DELETE,, +    GET,, +    HEAD,, +    POST,, +    PUT, +  }, +, +  /**, +   * Invoked after an HTTP method completes. This is called from the, +   * RestAdapter's background thread., +   *, +   * @param method       the HTTP method (POST, GET, etc)., +   * @param baseUrl      the URL that was called., +   * @param relativePath the path part of the URL., +   * @param elapsedTime  time in milliseconds., +   * @param statusCode   response status code., +   */, +  void called(Method method, String baseUrl, String relativePath,, +              long elapsedTime, int statusCode);, +}, +++ b/modules/http/src/retrofit/http/RestAdapter.java, +import org.apache.http.HttpResponse;, +import org.apache.http.client.ResponseHandler;, +  @Inject(optional = true) private HttpProfiler profiler;, +        final String apiUrl = server.apiUrl();, +        final HttpPost post = new HttpPost(apiUrl + relativePath);, +        final GsonResponseHandler<?> gsonResponseHandler =, +            GsonResponseHandler.create(resultType, callback);, +, +        // Optionally wrap the response handler for server call profiling., +        ResponseHandler<? extends Void> rh = (profiler == null), +            ? gsonResponseHandler, +            : new ProfilingResponseHandler(gsonResponseHandler, profiler,, +                HttpProfiler.Method.POST, apiUrl, relativePath);, +, +        httpClientProvider.get().execute(post, rh);, +, +  /**, +   * Sends server call times and response status codes to {@link HttpProfiler}., +   */, +  private static class ProfilingResponseHandler, +      implements ResponseHandler<Void> {, +    private final ResponseHandler<Void> delegate;, +    private final HttpProfiler profiler;, +    private final String apiUrl;, +    private final String relativePath;, +    private final HttpProfiler.Method method;, +    private final long startTime = System.currentTimeMillis();, +, +    /**, +     * Wraps the delegate response handler., +     */, +    private ProfilingResponseHandler(ResponseHandler<Void> delegate,, +                                     HttpProfiler profiler,]