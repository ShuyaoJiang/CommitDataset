[+++ b/modules/http/src/retrofit/http/GsonResponseHandler.java, +class GsonResponseHandler<T> extends CallbackResponseHandler<T> {, +  private GsonResponseHandler(Type type, Callback<T> callback) {, +++ b/modules/http/src/retrofit/http/GsonResponseHandler.java, +class GsonResponseHandler<T> extends CallbackResponseHandler<T> {, +  private GsonResponseHandler(Type type, Callback<T> callback) {, +++ b/modules/http/src/retrofit/http/HttpMethodType.java, +      URI uri = getParameterizedUri(builder);, +      URI uri = getUri(builder);, +      URI uri = getUri(builder);, +      URI uri = getParameterizedUri(builder);, +  /** Gets a URI with no query parameters specified. */, +  private static URI getUri(HttpRequestBuilder builder) throws URISyntaxException {, +    return URIUtils.createURI(builder.getScheme(), builder.getHost(), -1,, +        builder.getRelativePath(), null, null);, +  }, +, +  /** Gets a URI with parameters specified as query string parameters. */, +  private static URI getParameterizedUri(HttpRequestBuilder builder), +      throws URISyntaxException {, +    List<NameValuePair> queryParams = builder.getParamList(false);, +    String queryString = URLEncodedUtils.format(queryParams, "UTF-8");, +    URI uri = URIUtils.createURI(builder.getScheme(), builder.getHost(), -1,, +        builder.getRelativePath(), queryString, null);, +    return uri;, +  }, +, +        String name = HttpRequestBuilder.getName(annotations, method, i);, +++ b/modules/http/src/retrofit/http/GsonResponseHandler.java, +class GsonResponseHandler<T> extends CallbackResponseHandler<T> {, +  private GsonResponseHandler(Type type, Callback<T> callback) {, +++ b/modules/http/src/retrofit/http/HttpMethodType.java, +      URI uri = getParameterizedUri(builder);, +      URI uri = getUri(builder);, +      URI uri = getUri(builder);, +      URI uri = getParameterizedUri(builder);, +  /** Gets a URI with no query parameters specified. */, +  private static URI getUri(HttpRequestBuilder builder) throws URISyntaxException {, +    return URIUtils.createURI(builder.getScheme(), builder.getHost(), -1,, +        builder.getRelativePath(), null, null);, +  }, +, +  /** Gets a URI with parameters specified as query string parameters. */, +  private static URI getParameterizedUri(HttpRequestBuilder builder), +      throws URISyntaxException {, +    List<NameValuePair> queryParams = builder.getParamList(false);, +    String queryString = URLEncodedUtils.format(queryParams, "UTF-8");, +    URI uri = URIUtils.createURI(builder.getScheme(), builder.getHost(), -1,, +        builder.getRelativePath(), queryString, null);, +    return uri;, +  }, +, +        String name = HttpRequestBuilder.getName(annotations, method, i);, +++ b/modules/http/src/retrofit/http/HttpRequestBuilder.java, +import com.google.inject.name.Named;, + * Builds HTTP requests from Java method invocations.  Handles "path parameters", + * in the apiUrl in the form of "path/to/url/{id}/action" where a parameter, + * &#64;{@link Named}("id") is inserted into the url.  Note that this, + * replacement can be recursive if:, + * <ol>, + * <li> multiple sets of brackets are nested ("path/to/{{key}a}, + * <li> the order of &#64;{@link Named} values go from innermost to outermost, + * <li> the values replaced correspond to &#64;{@link Named} parameters., + * </ol>, +  private RequestLine requestLine;, +  HttpRequestBuilder setMethod(Method method) {, +    requestLine = RequestLine.fromMethod(method);, +  Method getMethod() {, +  String getRelativePath() {, +        : requestLine.getRelativePath();, +    return requestLine.getRelativePath().contains("{");, +  HttpRequestBuilder setApiUrl(String apiUrl) {, +  HttpRequestBuilder setArgs(Object[] args) {, +  Object[] getArgs() {, +  HttpRequestBuilder setHeaders(Headers headers) {, +  Headers getHeaders() {, +  String getScheme() {, +  String getHost() {, +  List<NameValuePair> getParamList(boolean includePathParams) {, +      String name = getName(parameterAnnotations[i], javaMethod, i);, +  private BasicNameValuePair addPair(QueryParam queryParam) {, +  HttpUriRequest build() throws URISyntaxException {, +    // Alter parameter list if path parameters are present., +      String replacedPath = requestLine.getRelativePath();, +    return requestLine.getHttpMethod().createFrom(this);, +  }, +, +  /** Gets the parameter name from the @Named annotation. */, +  static String getName(Annotation[] annotations, Method method,, +      int parameterIndex) {, +    return findAnnotation(annotations, Named.class, method,, +        parameterIndex).value();, +  }, +, +  /**, +   * Finds a parameter annotation., +   *, +   * @throws IllegalArgumentException if the annotation isn't found, +   */, +  private static <A extends Annotation> A findAnnotation(]