[+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +, +  private final HttpUrl baseUrl;, +  private String relativeUrl;, +  private HttpUrl.Builder urlBuilder;, +  RequestBuilder(String method, HttpUrl baseUrl, String relativeUrl, Headers headers,, +      MediaType mediaType, boolean hasBody, boolean isFormEncoded, boolean isMultipart) {, +    this.baseUrl = baseUrl;, +    this.relativeUrl = relativeUrl;, +  void setRelativeUrl(String relativeUrl) {, +    this.relativeUrl = relativeUrl;, +  }, +, +    if (relativeUrl == null) {, +      // The relative URL is cleared when the first query parameter is set., +      throw new AssertionError();, +    }, +        relativeUrl = relativeUrl.replace("{" + name + "}", encodedValue);, +        relativeUrl = relativeUrl.replace("{" + name + "}", String.valueOf(value));, +    if (relativeUrl != null) {, +      // Do a one-time combination of the built relative URL and the base URL., +      urlBuilder = baseUrl.resolve(relativeUrl).newBuilder();, +      relativeUrl = null;, +    }, +, +    HttpUrl url;, +    HttpUrl.Builder urlBuilder = this.urlBuilder;, +    if (urlBuilder != null) {, +      url = urlBuilder.build();, +    } else {, +      // No query parameters triggered builder creation, just combine the relative URL and base URL., +      url = baseUrl.resolve(relativeUrl);, +    }, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +, +  private final HttpUrl baseUrl;, +  private String relativeUrl;, +  private HttpUrl.Builder urlBuilder;, +  RequestBuilder(String method, HttpUrl baseUrl, String relativeUrl, Headers headers,, +      MediaType mediaType, boolean hasBody, boolean isFormEncoded, boolean isMultipart) {, +    this.baseUrl = baseUrl;, +    this.relativeUrl = relativeUrl;, +  void setRelativeUrl(String relativeUrl) {, +    this.relativeUrl = relativeUrl;, +  }, +, +    if (relativeUrl == null) {, +      // The relative URL is cleared when the first query parameter is set., +      throw new AssertionError();, +    }, +        relativeUrl = relativeUrl.replace("{" + name + "}", encodedValue);, +        relativeUrl = relativeUrl.replace("{" + name + "}", String.valueOf(value));, +    if (relativeUrl != null) {, +      // Do a one-time combination of the built relative URL and the base URL., +      urlBuilder = baseUrl.resolve(relativeUrl).newBuilder();, +      relativeUrl = null;, +    }, +, +    HttpUrl url;, +    HttpUrl.Builder urlBuilder = this.urlBuilder;, +    if (urlBuilder != null) {, +      url = urlBuilder.build();, +    } else {, +      // No query parameters triggered builder creation, just combine the relative URL and base URL., +      url = baseUrl.resolve(relativeUrl);, +    }, +++ b/retrofit/src/main/java/retrofit/RequestBuilderAction.java, +  static final class Url extends RequestBuilderAction {, +    @Override void perform(RequestBuilder builder, Object value) {, +      builder.setRelativeUrl((String) value);, +    }, +  }, +, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +, +  private final HttpUrl baseUrl;, +  private String relativeUrl;, +  private HttpUrl.Builder urlBuilder;, +  RequestBuilder(String method, HttpUrl baseUrl, String relativeUrl, Headers headers,, +      MediaType mediaType, boolean hasBody, boolean isFormEncoded, boolean isMultipart) {, +    this.baseUrl = baseUrl;, +    this.relativeUrl = relativeUrl;, +  void setRelativeUrl(String relativeUrl) {, +    this.relativeUrl = relativeUrl;, +  }, +, +    if (relativeUrl == null) {, +      // The relative URL is cleared when the first query parameter is set., +      throw new AssertionError();, +    }, +        relativeUrl = relativeUrl.replace("{" + name + "}", encodedValue);, +        relativeUrl = relativeUrl.replace("{" + name + "}", String.valueOf(value));, +    if (relativeUrl != null) {, +      // Do a one-time combination of the built relative URL and the base URL., +      urlBuilder = baseUrl.resolve(relativeUrl).newBuilder();, +      relativeUrl = null;, +    }, +, +    HttpUrl url;, +    HttpUrl.Builder urlBuilder = this.urlBuilder;]