[+++ b/pom.xml, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/Platform.java, +      return true;, +    } catch (ClassNotFoundException ignored) {, +    return false;, +++ b/pom.xml, +++ b/retrofit/pom.xml, +++ b/retrofit/src/main/java/retrofit/Platform.java, +      return true;, +    } catch (ClassNotFoundException ignored) {, +    return false;, +++ b/retrofit/src/main/java/retrofit/client/OkClient.java, +import com.squareup.okhttp.Headers;, +import com.squareup.okhttp.MediaType;, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.ResponseBody;, +import java.io.InputStream;, +import java.util.ArrayList;, +import java.util.List;, +import okio.BufferedSink;, +import retrofit.mime.TypedInput;, +import retrofit.mime.TypedOutput;, +public class OkClient implements Client {, +  private final OkHttpClient client;, +    if (client == null) throw new NullPointerException("client == null");, +    this.client = client;, +  @Override public Response execute(Request request) throws IOException {, +    return parseResponse(client.newCall(createRequest(request)).execute());, +  }, +, +  static com.squareup.okhttp.Request createRequest(Request request) {, +    com.squareup.okhttp.Request.Builder builder = new com.squareup.okhttp.Request.Builder(), +        .url(request.getUrl()), +        .method(request.getMethod(), createRequestBody(request.getBody()));, +, +    List<Header> headers = request.getHeaders();, +    for (int i = 0, size = headers.size(); i < size; i++) {, +      Header header = headers.get(i);, +      builder.addHeader(header.getName(), header.getValue());, +    }, +, +    return builder.build();, +  }, +, +  static Response parseResponse(com.squareup.okhttp.Response response) {, +    return new Response(response.request().urlString(), response.code(), response.message(),, +        createHeaders(response.headers()), createResponseBody(response.body()));, +  }, +, +  private static RequestBody createRequestBody(final TypedOutput body) {, +    if (body == null) {, +      return null;, +    }, +    final MediaType mediaType = MediaType.parse(body.mimeType());, +    return new RequestBody() {, +      @Override public MediaType contentType() {, +        return mediaType;, +      }, +, +      @Override public void writeTo(BufferedSink sink) throws IOException {, +        body.writeTo(sink.outputStream());, +      }, +, +      @Override public long contentLength() {, +        return body.length();, +      }, +    };, +  }, +, +  private static TypedInput createResponseBody(final ResponseBody body) {, +    if (body.contentLength() == 0) {, +      return null;, +    }, +    return new TypedInput() {, +      @Override public String mimeType() {, +        return body.contentType().toString();, +      }, +, +      @Override public long length() {, +        return body.contentLength();, +      }, +, +      @Override public InputStream in() throws IOException {, +        return body.byteStream();, +      }, +    };, +  }, +, +  private static List<Header> createHeaders(Headers headers) {, +    int size = headers.size();, +    List<Header> headerList = new ArrayList<Header>(size);, +    for (int i = 0; i < size; i++) {, +      headerList.add(new Header(headers.name(i), headers.value(i)));, +    }, +    return headerList;, +++ b/pom.xml]