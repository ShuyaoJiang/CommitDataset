[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +    Retrofit retrofit = new Retrofit.Builder(), +    service = retrofit.create(Service.class);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +    Retrofit retrofit = new Retrofit.Builder(), +    service = retrofit.create(Service.class);, +++ b/retrofit-converters/README.md, +To use, supply an instance of your desired converter when building your `Retrofit` instance., +Retrofit retrofit = new Retrofit.Builder(), +    .endpoint("https://api.example.com"), +    .converter(new ProtoConverter()), +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +    Retrofit retrofit = new Retrofit.Builder(), +    service = retrofit.create(Service.class);, +++ b/retrofit-converters/README.md, +To use, supply an instance of your desired converter when building your `Retrofit` instance., +Retrofit retrofit = new Retrofit.Builder(), +    .endpoint("https://api.example.com"), +    .converter(new ProtoConverter()), +++ b/retrofit-mock/src/main/java/retrofit/MockHttpException.java, + * @see MockRetrofit, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +    Retrofit retrofit = new Retrofit.Builder(), +    service = retrofit.create(Service.class);, +++ b/retrofit-converters/README.md, +To use, supply an instance of your desired converter when building your `Retrofit` instance., +Retrofit retrofit = new Retrofit.Builder(), +    .endpoint("https://api.example.com"), +    .converter(new ProtoConverter()), +++ b/retrofit-mock/src/main/java/retrofit/MockHttpException.java, + * @see MockRetrofit, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, + *   MockRetrofit mockRetrofit = MockRetrofit.from(restAdapter);, + *   UserService service = mockRetrofit.create(UserService.class, new MockUserService());, +public final class MockRetrofit {, +   * Create a new {@link MockRetrofit} which will act as a factory for mock services. Some of, +  public static MockRetrofit from(RestAdapter restAdapter, Executor executor) {, +    return new MockRetrofit(restAdapter, executor);, +  private MockRetrofit(RestAdapter restAdapter, Executor executor) {, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +    Retrofit retrofit = new Retrofit.Builder(), +    service = retrofit.create(Service.class);, +++ b/retrofit-converters/README.md, +To use, supply an instance of your desired converter when building your `Retrofit` instance., +Retrofit retrofit = new Retrofit.Builder(), +    .endpoint("https://api.example.com"), +    .converter(new ProtoConverter()), +++ b/retrofit-mock/src/main/java/retrofit/MockHttpException.java, + * @see MockRetrofit, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, + *   MockRetrofit mockRetrofit = MockRetrofit.from(restAdapter);, + *   UserService service = mockRetrofit.create(UserService.class, new MockUserService());, +public final class MockRetrofit {, +   * Create a new {@link MockRetrofit} which will act as a factory for mock services. Some of, +  public static MockRetrofit from(RestAdapter restAdapter, Executor executor) {, +    return new MockRetrofit(restAdapter, executor);, +  private MockRetrofit(RestAdapter restAdapter, Executor executor) {, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +public class MockRetrofitTest {, +  private MockRetrofit mockRetrofit;, +    mockRetrofit = MockRetrofit.from(restAdapter, httpExecutor);, +    mockRetrofit.random.setSeed(2847);, +      mockRetrofit.setDelay(-1);, +      mockRetrofit.setDelay(Long.MAX_VALUE);, +      mockRetrofit.setVariancePercentage(-13);, +      mockRetrofit.setVariancePercentage(174);, +      mockRetrofit.setErrorPercentage(-13);, +      mockRetrofit.setErrorPercentage(174);, +    mockRetrofit.setErrorPercentage(0);, +      assertThat(mockRetrofit.calculateIsFailure()).isFalse();, +    mockRetrofit.setErrorPercentage(3);, +      if (mockRetrofit.calculateIsFailure()) {, +    mockRetrofit.setDelay(2000);, +    mockRetrofit.setVariancePercentage(0);, +      assertThat(mockRetrofit.calculateDelayForCall()).isEqualTo(2000);, +    mockRetrofit.setVariancePercentage(40);, +      int delay = mockRetrofit.calculateDelayForCall();, +    mockRetrofit.setDelay(2000);, +      int delay = mockRetrofit.calculateDelayForError();, +    mockRetrofit.setErrorPercentage(100);, +    mockRetrofit.setDelay(1);, +    SyncExample mockService = mockRetrofit.create(SyncExample.class, new MockSyncExample());, +    mockRetrofit.setDelay(1);, +    mockRetrofit.setErrorPercentage(100);, +    AsyncExample mockService = mockRetrofit.create(AsyncExample.class, new MockAsyncExample());, +    mockRetrofit.setDelay(100);, +    mockRetrofit.setVariancePercentage(0);, +    mockRetrofit.setErrorPercentage(0);, +    SyncExample mockService = mockRetrofit.create(SyncExample.class, new MockSyncExample());, +    mockRetrofit.setDelay(100);, +    mockRetrofit.setVariancePercentage(0);, +    mockRetrofit.setErrorPercentage(0);, +    AsyncExample mockService = mockRetrofit.create(AsyncExample.class, new MockAsyncExample());, +    mockRetrofit.setDelay(100);, +    mockRetrofit.setVariancePercentage(0);, +    mockRetrofit.setErrorPercentage(0);, +        mockRetrofit.create(ObservableExample.class, new MockObservableExample());, +    mockRetrofit.setDelay(100);, +    mockRetrofit.setVariancePercentage(0);, +    mockRetrofit.setErrorPercentage(0);]