[+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private final Boolean[] paramFlags;, +    paramFlags = methodInfo.requestParamFlags;, +  @Override public void addPathParam(String name, String value, Boolean disableUrlEncoding) {, +      if (disableUrlEncoding == null || !disableUrlEncoding) {, +        // URLEncoder encodes for use as a query parameter. Path encoding uses %20 to, +        // encode spaces rather than +.  Query encoding difference specified in HTML spec., +        // Any remaining plus signs represent spaces as already URLEncoded., +        encodedValue = encodedValue.replace("+", "%20");, +      } else {, +        relativeUrl = relativeUrl.replace("{" + name + "}", String.valueOf(value));, +      }, +  @Override public void addQueryParam(String name, String value, Boolean disableUrlEncoding) {, +      if (disableUrlEncoding == null || !disableUrlEncoding) {, +      }, +          {, +            Boolean disableUrlEncoding = paramFlags[i];, +            addPathParam(name, value.toString(), disableUrlEncoding);, +          }, +            Boolean disableUrlEncoding = paramFlags[i];, +            addQueryParam(name, value.toString(), disableUrlEncoding);, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private final Boolean[] paramFlags;, +    paramFlags = methodInfo.requestParamFlags;, +  @Override public void addPathParam(String name, String value, Boolean disableUrlEncoding) {, +      if (disableUrlEncoding == null || !disableUrlEncoding) {, +        // URLEncoder encodes for use as a query parameter. Path encoding uses %20 to, +        // encode spaces rather than +.  Query encoding difference specified in HTML spec., +        // Any remaining plus signs represent spaces as already URLEncoded., +        encodedValue = encodedValue.replace("+", "%20");, +      } else {, +        relativeUrl = relativeUrl.replace("{" + name + "}", String.valueOf(value));, +      }, +  @Override public void addQueryParam(String name, String value, Boolean disableUrlEncoding) {, +      if (disableUrlEncoding == null || !disableUrlEncoding) {, +      }, +          {, +            Boolean disableUrlEncoding = paramFlags[i];, +            addPathParam(name, value.toString(), disableUrlEncoding);, +          }, +            Boolean disableUrlEncoding = paramFlags[i];, +            addQueryParam(name, value.toString(), disableUrlEncoding);, +++ b/retrofit/src/main/java/retrofit/RequestInterceptor.java, +    void addPathParam(String name, String value, Boolean disableUrlEncoding);, +    void addQueryParam(String name, String value, Boolean disableUrlEncoding);, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private final Boolean[] paramFlags;, +    paramFlags = methodInfo.requestParamFlags;, +  @Override public void addPathParam(String name, String value, Boolean disableUrlEncoding) {, +      if (disableUrlEncoding == null || !disableUrlEncoding) {, +        // URLEncoder encodes for use as a query parameter. Path encoding uses %20 to, +        // encode spaces rather than +.  Query encoding difference specified in HTML spec., +        // Any remaining plus signs represent spaces as already URLEncoded., +        encodedValue = encodedValue.replace("+", "%20");, +      } else {, +        relativeUrl = relativeUrl.replace("{" + name + "}", String.valueOf(value));, +      }, +  @Override public void addQueryParam(String name, String value, Boolean disableUrlEncoding) {, +      if (disableUrlEncoding == null || !disableUrlEncoding) {, +      }, +          {, +            Boolean disableUrlEncoding = paramFlags[i];, +            addPathParam(name, value.toString(), disableUrlEncoding);, +          }, +            Boolean disableUrlEncoding = paramFlags[i];, +            addQueryParam(name, value.toString(), disableUrlEncoding);, +++ b/retrofit/src/main/java/retrofit/RequestInterceptor.java, +    void addPathParam(String name, String value, Boolean disableUrlEncoding);, +    void addQueryParam(String name, String value, Boolean disableUrlEncoding);, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +  Boolean[] requestParamFlags;, +    requestParamFlags = new Boolean[count];, +            Boolean disableUrlEncoding = ((Path) parameterAnnotation).disableUrlEncoding();, +            requestParamFlags[i] = disableUrlEncoding;, +            Boolean disableUrlEncoding = ((Query) parameterAnnotation).disableUrlEncoding();, +            requestParamFlags[i] = disableUrlEncoding;, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private final Boolean[] paramFlags;, +    paramFlags = methodInfo.requestParamFlags;, +  @Override public void addPathParam(String name, String value, Boolean disableUrlEncoding) {, +      if (disableUrlEncoding == null || !disableUrlEncoding) {, +        // URLEncoder encodes for use as a query parameter. Path encoding uses %20 to, +        // encode spaces rather than +.  Query encoding difference specified in HTML spec., +        // Any remaining plus signs represent spaces as already URLEncoded., +        encodedValue = encodedValue.replace("+", "%20");, +      } else {, +        relativeUrl = relativeUrl.replace("{" + name + "}", String.valueOf(value));, +      }, +  @Override public void addQueryParam(String name, String value, Boolean disableUrlEncoding) {, +      if (disableUrlEncoding == null || !disableUrlEncoding) {, +      }, +          {, +            Boolean disableUrlEncoding = paramFlags[i];, +            addPathParam(name, value.toString(), disableUrlEncoding);, +          }, +            Boolean disableUrlEncoding = paramFlags[i];, +            addQueryParam(name, value.toString(), disableUrlEncoding);, +++ b/retrofit/src/main/java/retrofit/RequestInterceptor.java, +    void addPathParam(String name, String value, Boolean disableUrlEncoding);, +    void addQueryParam(String name, String value, Boolean disableUrlEncoding);]