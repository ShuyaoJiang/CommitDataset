[+++ b/.idea/codeStyleSettings.xml, +      <value>, +        <XML>, +          <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />, +        </XML>, +      </value>, +++ b/.idea/codeStyleSettings.xml, +      <value>, +        <XML>, +          <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />, +        </XML>, +      </value>, +++ b/modules/core/src/retrofit/core/Callback.java, +++ b/.idea/codeStyleSettings.xml, +      <value>, +        <XML>, +          <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />, +        </XML>, +      </value>, +++ b/modules/core/src/retrofit/core/Callback.java, +++ b/modules/http/src-tests/retrofit/http/HttpRequestBuilderTest.java, +import java.io.ByteArrayOutputStream;, +import java.lang.reflect.Method;, +import java.net.URISyntaxException;, +import java.util.Set;, +import java.util.UUID;, +++ b/.idea/codeStyleSettings.xml, +      <value>, +        <XML>, +          <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />, +        </XML>, +      </value>, +++ b/modules/core/src/retrofit/core/Callback.java, +++ b/modules/http/src-tests/retrofit/http/HttpRequestBuilderTest.java, +import java.io.ByteArrayOutputStream;, +import java.lang.reflect.Method;, +import java.net.URISyntaxException;, +import java.util.Set;, +import java.util.UUID;, +++ b/modules/http/src-tests/retrofit/http/RestAdapterTest.java, +import java.io.IOException;, +import java.io.UnsupportedEncodingException;, +import java.util.concurrent.Executor;, +++ b/.idea/codeStyleSettings.xml, +      <value>, +        <XML>, +          <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />, +        </XML>, +      </value>, +++ b/modules/core/src/retrofit/core/Callback.java, +++ b/modules/http/src-tests/retrofit/http/HttpRequestBuilderTest.java, +import java.io.ByteArrayOutputStream;, +import java.lang.reflect.Method;, +import java.net.URISyntaxException;, +import java.util.Set;, +import java.util.UUID;, +++ b/modules/http/src-tests/retrofit/http/RestAdapterTest.java, +import java.io.IOException;, +import java.io.UnsupportedEncodingException;, +import java.util.concurrent.Executor;, +++ b/modules/http/src/retrofit/http/RestAdapter.java, +  private static final Logger logger = Logger.getLogger(RestAdapter.class.getName());, +   * Adapts a Java interface to a REST API. HTTP requests happen in a background thread. Callbacks, +   * happen in the UI thread., +   * <p>Gets the relative path for a given method from a {@link GET}, {@link POST}, {@link PUT}, or, +   * {@link DELETE} annotation on the method. Gets the names of URL parameters from {@link, +   * com.google.inject.name.Named} annotations on the method parameters., +   * <p>The last method parameter should be of type {@link Callback}. The JSON HTTP response will be, +   * converted to the callback's parameter type using GSON. If the callback parameter type uses a, +   * wildcard, the lower bound will be used as the conversion type., +            return (T) Proxy.newProxyInstance(type.getClassLoader(), new Class<?>[] {type},, +                handler);, +    @Override public Object invoke(Object proxy, final Method method, final Object[] args) {, +      final UiCallback<?> callback = UiCallback.create((Callback<?>) args[args.length - 1], mainThread);, +      try {, +        // Build the request (headers in particular) on the main thread., +        final HttpUriRequest request = new HttpRequestBuilder(gson).setMethod(method), +        // Execute HTTP request in the background., +        executor.execute(new Runnable() {, +          @Override public void run() {, +            backgroundInvoke(request, method, callback);, +          }, +        });, +      } catch (Throwable e) {, +        callback.unexpectedError(e);, +      }, +, +      // Methods should return void., +      return null;, +    }, +, +    private void backgroundInvoke(HttpUriRequest request, Method method, UiCallback<?> callback) {, +, +      try {, +        final Type resultType = getCallbackParameterType(method, genericParameterTypes);, +        logger.fine("Sending " + request.getMethod() + " to " + request.getURI());, +        ResponseHandler<Void> rh = (profiler == null) ? gsonResponseHandler, +            : createProfiler(gsonResponseHandler, profiler, method, server.apiUrl());, +    /** Wraps a {@code GsonResponseHandler} with a {@code ProfilingResponseHandler}. */, +    private ProfilingResponseHandler createProfiler(ResponseHandler<Void> handlerToWrap,]