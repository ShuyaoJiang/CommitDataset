[+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private boolean hasContentTypeHeader;, +    hasContentTypeHeader = methodInfo.hasContentTypeHeader;, +, +    if ("Content-Type".equalsIgnoreCase(name)) {, +      hasContentTypeHeader = true;, +    }, +    TypedOutput body = this.body;, +    if (body != null) {, +      // Only add Content-Type header from the body if one is not already set., +      if (!hasContentTypeHeader) {, +        addHeader("Content-Type", body.mimeType());, +      }, +, +      // Only add Content-Length header from the body if it is known., +      long length = body.length();, +      if (length != -1) {, +        addHeader("Content-Length", String.valueOf(length));, +      }, +    }, +, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private boolean hasContentTypeHeader;, +    hasContentTypeHeader = methodInfo.hasContentTypeHeader;, +, +    if ("Content-Type".equalsIgnoreCase(name)) {, +      hasContentTypeHeader = true;, +    }, +    TypedOutput body = this.body;, +    if (body != null) {, +      // Only add Content-Type header from the body if one is not already set., +      if (!hasContentTypeHeader) {, +        addHeader("Content-Type", body.mimeType());, +      }, +, +      // Only add Content-Length header from the body if it is known., +      long length = body.length();, +      if (length != -1) {, +        addHeader("Content-Length", String.valueOf(length));, +      }, +    }, +, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +          String bodyCharset = MimeUtil.parseCharset(body.mimeType());, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private boolean hasContentTypeHeader;, +    hasContentTypeHeader = methodInfo.hasContentTypeHeader;, +, +    if ("Content-Type".equalsIgnoreCase(name)) {, +      hasContentTypeHeader = true;, +    }, +    TypedOutput body = this.body;, +    if (body != null) {, +      // Only add Content-Type header from the body if one is not already set., +      if (!hasContentTypeHeader) {, +        addHeader("Content-Type", body.mimeType());, +      }, +, +      // Only add Content-Length header from the body if it is known., +      long length = body.length();, +      if (length != -1) {, +        addHeader("Content-Length", String.valueOf(length));, +      }, +    }, +, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +          String bodyCharset = MimeUtil.parseCharset(body.mimeType());, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +  boolean hasContentTypeHeader;, +  List<retrofit.client.Header> parseHeaders(String[] headers) {, +      String headerName = header.substring(0, colon);, +      String headerValue = header.substring(colon + 1).trim();, +      if ("Content-Type".equalsIgnoreCase(headerName)) {, +        hasContentTypeHeader = true;, +      }, +      headerList.add(new retrofit.client.Header(headerName, headerValue));, +, +            if ("Content-Type".equalsIgnoreCase(name)) {, +              hasContentTypeHeader = true;, +            }, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private boolean hasContentTypeHeader;, +    hasContentTypeHeader = methodInfo.hasContentTypeHeader;, +, +    if ("Content-Type".equalsIgnoreCase(name)) {, +      hasContentTypeHeader = true;, +    }, +    TypedOutput body = this.body;, +    if (body != null) {, +      // Only add Content-Type header from the body if one is not already set., +      if (!hasContentTypeHeader) {, +        addHeader("Content-Type", body.mimeType());, +      }, +, +      // Only add Content-Length header from the body if it is known., +      long length = body.length();, +      if (length != -1) {, +        addHeader("Content-Length", String.valueOf(length));, +      }, +    }]