[+++ b/samples/src/main/java/com/example/retrofit/CustomCallAdapter.java, +import java.lang.reflect.ParameterizedType;, +import retrofit.GsonConverterFactory;, +      if (!(returnType instanceof ParameterizedType)) {, +        throw new IllegalStateException(, +            "ListenableFuture must have generic type (e.g., ListenableFuture<ResponseBody>)");, +      final Type responseType = ((ParameterizedType) returnType).getActualTypeArguments()[0];, +        .addConverterFactory(GsonConverterFactory.create()), +++ b/samples/src/main/java/com/example/retrofit/CustomCallAdapter.java, +import java.lang.reflect.ParameterizedType;, +import retrofit.GsonConverterFactory;, +      if (!(returnType instanceof ParameterizedType)) {, +        throw new IllegalStateException(, +            "ListenableFuture must have generic type (e.g., ListenableFuture<ResponseBody>)");, +      final Type responseType = ((ParameterizedType) returnType).getActualTypeArguments()[0];, +        .addConverterFactory(GsonConverterFactory.create()), +++ b/samples/src/main/java/com/example/retrofit/ErrorHandlingCallAdapter.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.example.retrofit;, +, +import com.google.common.reflect.TypeToken;, +import java.io.IOException;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.ParameterizedType;, +import java.lang.reflect.Type;, +import retrofit.Call;, +import retrofit.CallAdapter;, +import retrofit.Callback;, +import retrofit.GsonConverterFactory;, +import retrofit.Response;, +import retrofit.Retrofit;, +import retrofit.http.GET;, +, +/**, + * A sample showing a custom {@link CallAdapter} which adapts the built-in {@link Call} to a custom, + * version whose callback has more granular methods., + */, +public final class ErrorHandlingCallAdapter {, +  /** A callback which offers granular callbacks for various conditions. */, +  interface MyCallback<T> {, +    /** Called for [200, 300) responses. */, +    void success(Response<T> response);, +    /** Called for 401 responses. */, +    void unauthenticated(Response<?> response);, +    /** Called for [400, 500) responses, except 401. */, +    void clientError(Response<?> response);, +    /** Called for [500, 600) response. */, +    void serverError(Response<?> response);, +    /** Called for network errors while making the call. */, +    void networkError(IOException e);, +    /** Called for unexpected errors while making the call. */, +    void unexpectedError(Throwable t);, +  }, +, +  interface MyCall<T> {, +    void cancel();, +    void enqueue(MyCallback<T> callback);, +    MyCall<T> clone();, +, +    // Left as an exercise for the reader..., +    // TODO MyResponse<T> execute() throws MyHttpException;, +  }, +, +  public static class ErrorHandlingCallAdapterFactory implements CallAdapter.Factory {, +    @Override public CallAdapter<MyCall<?>> get(Type returnType, Annotation[] annotations,, +        Retrofit retrofit) {, +      TypeToken<?> token = TypeToken.of(returnType);, +      if (token.getRawType() != MyCall.class) {, +        return null;, +      }, +      if (!(returnType instanceof ParameterizedType)) {, +        throw new IllegalStateException(, +            "MyCall must have generic type (e.g., MyCall<ResponseBody>)");, +      }, +      final Type responseType = ((ParameterizedType) returnType).getActualTypeArguments()[0];, +      return new CallAdapter<MyCall<?>>() {, +        @Override public Type responseType() {, +          return responseType;, +        }, +, +        @Override public <R> MyCall<R> adapt(Call<R> call) {, +          return new MyCallAdapter<>(call);, +        }, +      };, +    }, +  }]