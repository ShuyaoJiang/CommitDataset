[+++ b/README.md, +public interface DummyServiceAsync {, +Each method has a `Callback` type specified at the end of the parameter list.  This is how your, +application will handle the results of your network calls asynchronously: errors and successful, +responses are both handled by the `Callback` interface., +your `MyJsonObject` will need to implement `TypedBytes`., +, +For synchronous execution, omit the `Callback` parameter and specify the response as the return type., +, +```java, +public interface DummyServiceSync {, +  @GET("foo/bar"), +  SimpleResponse normalGet(@Named("id") String id);, +}, +```, +++ b/README.md, +public interface DummyServiceAsync {, +Each method has a `Callback` type specified at the end of the parameter list.  This is how your, +application will handle the results of your network calls asynchronously: errors and successful, +responses are both handled by the `Callback` interface., +your `MyJsonObject` will need to implement `TypedBytes`., +, +For synchronous execution, omit the `Callback` parameter and specify the response as the return type., +, +```java, +public interface DummyServiceSync {, +  @GET("foo/bar"), +  SimpleResponse normalGet(@Named("id") String id);, +}, +```, +++ b/http/src/main/java/retrofit/http/Callback.java, +  static final class ServerError {, +, +    @Override public boolean equals(Object o) {, +      if (this == o) return true;, +      if (o == null || getClass() != o.getClass()) return false;, +      ServerError that = (ServerError) o;, +      return message == null ? that.message == null : message.equals(that.message);, +    }, +, +    @Override public int hashCode() {, +      return message != null ? message.hashCode() : 0;, +    }, +++ b/README.md, +public interface DummyServiceAsync {, +Each method has a `Callback` type specified at the end of the parameter list.  This is how your, +application will handle the results of your network calls asynchronously: errors and successful, +responses are both handled by the `Callback` interface., +your `MyJsonObject` will need to implement `TypedBytes`., +, +For synchronous execution, omit the `Callback` parameter and specify the response as the return type., +, +```java, +public interface DummyServiceSync {, +  @GET("foo/bar"), +  SimpleResponse normalGet(@Named("id") String id);, +}, +```, +++ b/http/src/main/java/retrofit/http/Callback.java, +  static final class ServerError {, +, +    @Override public boolean equals(Object o) {, +      if (this == o) return true;, +      if (o == null || getClass() != o.getClass()) return false;, +      ServerError that = (ServerError) o;, +      return message == null ? that.message == null : message.equals(that.message);, +    }, +, +    @Override public int hashCode() {, +      return message != null ? message.hashCode() : 0;, +    }, +++ /dev/null, +++ b/README.md, +public interface DummyServiceAsync {, +Each method has a `Callback` type specified at the end of the parameter list.  This is how your, +application will handle the results of your network calls asynchronously: errors and successful, +responses are both handled by the `Callback` interface., +your `MyJsonObject` will need to implement `TypedBytes`., +, +For synchronous execution, omit the `Callback` parameter and specify the response as the return type., +, +```java, +public interface DummyServiceSync {, +  @GET("foo/bar"), +  SimpleResponse normalGet(@Named("id") String id);, +}, +```, +++ b/http/src/main/java/retrofit/http/Callback.java, +  static final class ServerError {, +, +    @Override public boolean equals(Object o) {, +      if (this == o) return true;, +      if (o == null || getClass() != o.getClass()) return false;, +      ServerError that = (ServerError) o;, +      return message == null ? that.message == null : message.equals(that.message);, +    }, +, +    @Override public int hashCode() {, +      return message != null ? message.hashCode() : 0;, +    }]