[+++ b/.gitignore, +eclipsebin, +++ b/.gitignore, +eclipsebin, +++ b/modules/http/src-tests/retrofit/http/RestAdapterTest.java, +package retrofit.http;, +, +import com.google.gson.Gson;, +import com.google.inject.AbstractModule;, +import com.google.inject.Guice;, +import com.google.inject.Injector;, +import com.google.inject.name.Named;, +import java.io.IOException;, +import java.io.UnsupportedEncodingException;, +import java.util.concurrent.Executor;, +import junit.framework.TestCase;, +import org.apache.http.HttpMessage;, +import org.apache.http.HttpResponse;, +import org.apache.http.ProtocolVersion;, +import org.apache.http.client.HttpClient;, +import org.apache.http.client.methods.HttpDelete;, +import org.apache.http.client.methods.HttpGet;, +import org.apache.http.client.methods.HttpPost;, +import org.apache.http.client.methods.HttpPut;, +import org.apache.http.client.methods.HttpUriRequest;, +import org.apache.http.entity.StringEntity;, +import org.apache.http.message.BasicStatusLine;, +import org.easymock.Capture;, +import org.easymock.IAnswer;, +import org.junit.Before;, +import retrofit.core.Callback;, +import retrofit.core.MainThread;, +, +import static org.easymock.EasyMock.capture;, +import static org.easymock.EasyMock.createMock;, +import static org.easymock.EasyMock.expect;, +import static org.easymock.EasyMock.expectLastCall;, +import static org.easymock.EasyMock.isA;, +import static org.easymock.EasyMock.replay;, +import static org.easymock.EasyMock.verify;, +import static retrofit.http.RestAdapter.service;, +, +public class RestAdapterTest extends TestCase {, +  private static final String ID = "123";, +  private static final String ENTITY = "entity";, +  private static final String ENTITY_PATH_PARAM = "entity/{id}";, +  private static final String BASE_URL = "http://host/api/entity";, +  private static final String PATH_URL_PREFIX = BASE_URL + "/";, +  private static final String GET_DELETE_SIMPLE_URL = BASE_URL + "?";, +, +  private Injector injector;, +  private HttpClient mockHttpClient;, +  private Executor mockExecutor;, +  private MainThread mockMainThread;, +  private Headers mockHeaders;, +  @SuppressWarnings("rawtypes") private Callback mockCallback;, +  private HttpResponse mockResponse;, +, +  @Override @Before public void setUp() throws Exception {, +    mockHttpClient = createMock(HttpClient.class);, +    mockExecutor   = createMock(Executor.class);, +    mockMainThread = createMock(MainThread.class);, +    mockHeaders    = createMock(Headers.class);, +    mockCallback   = createMock(Callback.class);, +    mockResponse   = createMock(HttpResponse.class);, +, +    injector = Guice.createInjector(, +        new AbstractModule() {, +          @Override protected void configure() {, +            bind(Server.class).toInstance(new Server("http://host/api/",, +                "http://host/web/", true));, +            bind(HttpClient.class).toInstance(mockHttpClient);, +            bind(Executor.class).toInstance(mockExecutor);, +            bind(MainThread.class).toInstance(mockMainThread);, +            bind(Headers.class).toInstance(mockHeaders);, +            install(service(DeleteService.class));, +            install(service(GetService.class));, +            install(service(PostService.class));, +            install(service(PutService.class));, +          }, +        });, +  }, +, +  @SuppressWarnings("unchecked"), +  public void testServiceDeleteSimple() throws IOException {, +    expectLifecycle(HttpDelete.class, GET_DELETE_SIMPLE_URL);, +    replayAll();, +, +    DeleteService service = injector.getInstance(DeleteService.class);, +    service.delete(mockCallback);, +    verifyAll();, +  }, +, +  @SuppressWarnings("unchecked"), +  public void testServiceDeleteParam() throws IOException {, +    expectLifecycle(HttpDelete.class, GET_DELETE_SIMPLE_URL + "id=" + ID);, +    replayAll();, +, +    DeleteService service = injector.getInstance(DeleteService.class);, +    service.deleteWithParam(ID, mockCallback);]