[+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +    boolean isKotlinSuspendFunction = requestFactory.isKotlinSuspendFunction;, +, +    Annotation[] annotations = method.getAnnotations();, +    Type adapterType;, +    if (isKotlinSuspendFunction) {, +      Type responseType = Utils.getParameterLowerBound(0,, +          (ParameterizedType) parameterTypes[parameterTypes.length - 1]);, +, +      adapterType = new Utils.ParameterizedTypeImpl(null, Call.class, responseType);, +      annotations = SkipCallbackExecutorImpl.ensurePresent(annotations);, +      adapterType = method.getGenericReturnType();, +    CallAdapter<ResponseT, ReturnT> callAdapter =, +        createCallAdapter(retrofit, method, adapterType, annotations);, +    Type responseType = callAdapter.responseType();, +    if (!isKotlinSuspendFunction) {, +      return new CallAdapted<>(requestFactory, callFactory, responseConverter, callAdapter);, +          callFactory, responseConverter, (CallAdapter<ResponseT, Call<ResponseT>>) callAdapter);, +          callFactory, responseConverter, (CallAdapter<ResponseT, Call<ResponseT>>) callAdapter,, +          continuationBodyNullable);, +      Retrofit retrofit, Method method, Type returnType, Annotation[] annotations) {, +  HttpServiceMethod(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,, +    Call<ResponseT> call = new OkHttpCall<>(requestFactory, args, callFactory, responseConverter);, +    return adapt(call, args);, +  protected abstract @Nullable ReturnT adapt(Call<ResponseT> call, Object[] args);, +    CallAdapted(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,, +        Converter<ResponseBody, ResponseT> responseConverter,, +        CallAdapter<ResponseT, ReturnT> callAdapter) {, +    @Override protected ReturnT adapt(Call<ResponseT> call, Object[] args) {, +    private final CallAdapter<ResponseT, Call<ResponseT>> callAdapter;, +, +    SuspendForResponse(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,, +        Converter<ResponseBody, ResponseT> responseConverter,, +        CallAdapter<ResponseT, Call<ResponseT>> callAdapter) {, +      this.callAdapter = callAdapter;, +    @Override protected Object adapt(Call<ResponseT> call, Object[] args) {, +      call = callAdapter.adapt(call);, +, +      //noinspection unchecked Checked by reflection inside RequestFactory., +    private final CallAdapter<ResponseT, Call<ResponseT>> callAdapter;, +    SuspendForBody(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,, +        Converter<ResponseBody, ResponseT> responseConverter,, +        CallAdapter<ResponseT, Call<ResponseT>> callAdapter, boolean isNullable) {, +      this.callAdapter = callAdapter;, +    @Override protected Object adapt(Call<ResponseT> call, Object[] args) {, +      call = callAdapter.adapt(call);, +, +      //noinspection unchecked Checked by reflection inside RequestFactory., +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +    boolean isKotlinSuspendFunction = requestFactory.isKotlinSuspendFunction;, +, +    Annotation[] annotations = method.getAnnotations();, +    Type adapterType;, +    if (isKotlinSuspendFunction) {, +      Type responseType = Utils.getParameterLowerBound(0,, +          (ParameterizedType) parameterTypes[parameterTypes.length - 1]);, +, +      adapterType = new Utils.ParameterizedTypeImpl(null, Call.class, responseType);, +      annotations = SkipCallbackExecutorImpl.ensurePresent(annotations);, +      adapterType = method.getGenericReturnType();, +    CallAdapter<ResponseT, ReturnT> callAdapter =, +        createCallAdapter(retrofit, method, adapterType, annotations);, +    Type responseType = callAdapter.responseType();, +    if (!isKotlinSuspendFunction) {, +      return new CallAdapted<>(requestFactory, callFactory, responseConverter, callAdapter);, +          callFactory, responseConverter, (CallAdapter<ResponseT, Call<ResponseT>>) callAdapter);, +          callFactory, responseConverter, (CallAdapter<ResponseT, Call<ResponseT>>) callAdapter,, +          continuationBodyNullable);, +      Retrofit retrofit, Method method, Type returnType, Annotation[] annotations) {, +  HttpServiceMethod(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,, +    Call<ResponseT> call = new OkHttpCall<>(requestFactory, args, callFactory, responseConverter);, +    return adapt(call, args);, +  protected abstract @Nullable ReturnT adapt(Call<ResponseT> call, Object[] args);, +    CallAdapted(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,, +        Converter<ResponseBody, ResponseT> responseConverter,, +        CallAdapter<ResponseT, ReturnT> callAdapter) {, +    @Override protected ReturnT adapt(Call<ResponseT> call, Object[] args) {, +    private final CallAdapter<ResponseT, Call<ResponseT>> callAdapter;, +, +    SuspendForResponse(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,, +        Converter<ResponseBody, ResponseT> responseConverter,, +        CallAdapter<ResponseT, Call<ResponseT>> callAdapter) {, +      this.callAdapter = callAdapter;, +    @Override protected Object adapt(Call<ResponseT> call, Object[] args) {, +      call = callAdapter.adapt(call);, +, +      //noinspection unchecked Checked by reflection inside RequestFactory., +    private final CallAdapter<ResponseT, Call<ResponseT>> callAdapter;, +    SuspendForBody(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,, +        Converter<ResponseBody, ResponseT> responseConverter,, +        CallAdapter<ResponseT, Call<ResponseT>> callAdapter, boolean isNullable) {, +      this.callAdapter = callAdapter;, +    @Override protected Object adapt(Call<ResponseT> call, Object[] args) {, +      call = callAdapter.adapt(call);, +, +      //noinspection unchecked Checked by reflection inside RequestFactory., +++ b/retrofit/src/main/java/retrofit2/SkipCallbackExecutorImpl.java, +/*, + * Copyright (C) 2019 Square, Inc., + *]