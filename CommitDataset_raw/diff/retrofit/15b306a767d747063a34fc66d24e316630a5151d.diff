[+++ b/retrofit/src/main/java/retrofit/MethodInfo.java, +    if (Utils.hasUnresolvableType(returnType)) {, +      throw methodError("Method return type must not include a type variable or wildcard.");, +    }, +++ b/retrofit/src/main/java/retrofit/MethodInfo.java, +    if (Utils.hasUnresolvableType(returnType)) {, +      throw methodError("Method return type must not include a type variable or wildcard.");, +    }, +++ b/retrofit/src/main/java/retrofit/Utils.java, +  public static boolean hasUnresolvableType(Type type) {, +        if (hasUnresolvableType(typeArgument)) {, +      return hasUnresolvableType(((GenericArrayType) type).getGenericComponentType());, +++ b/retrofit/src/main/java/retrofit/MethodInfo.java, +    if (Utils.hasUnresolvableType(returnType)) {, +      throw methodError("Method return type must not include a type variable or wildcard.");, +    }, +++ b/retrofit/src/main/java/retrofit/Utils.java, +  public static boolean hasUnresolvableType(Type type) {, +        if (hasUnresolvableType(typeArgument)) {, +      return hasUnresolvableType(((GenericArrayType) type).getGenericComponentType());, +++ b/retrofit/src/test/java/retrofit/RestAdapterTest.java, +  interface Unresolvable {, +    @GET("/") <T> Call<T> typeVariable();, +    @GET("/") <T extends ResponseBody> Call<T> typeVariableUpperBound();, +    @GET("/") Call<?> wildcard();, +    @GET("/") Call<? extends ResponseBody> wildcardUpperBound();, +  @Test public void unresolvableTypeThrows() {, +    Unresolvable example = ra.create(Unresolvable.class);, +      example.typeVariable();, +          "Unresolvable.typeVariable: Method return type must not include a type variable or wildcard.");, +      example.typeVariableUpperBound();, +          "Unresolvable.typeVariableUpperBound: Method return type must not include a type variable or wildcard.");, +          "Unresolvable.crazy: Method return type must not include a type variable or wildcard.");, +    }, +    try {, +      example.wildcard();, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessage(, +          "Unresolvable.wildcard: Method return type must not include a type variable or wildcard.");, +    }, +    try {, +      example.wildcardUpperBound();, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessage(, +          "Unresolvable.wildcardUpperBound: Method return type must not include a type variable or wildcard.");]