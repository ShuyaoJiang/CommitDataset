[+++ b/retrofit/src/main/java/retrofit/RequestAction.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit;, +, +import com.squareup.okhttp.Headers;, +import com.squareup.okhttp.RequestBody;, +import java.io.IOException;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Array;, +import java.util.Map;, +, +import static retrofit.Utils.checkNotNull;, +, +abstract class RequestAction<T> {, +  abstract void perform(RequestBuilder builder, T value);, +, +  static final class Url extends RequestAction<String> {, +    @Override void perform(RequestBuilder builder, String value) {, +      builder.setRelativeUrl(value);, +    }, +  }, +, +  static final class Header extends RequestAction<Object> {, +    private final String name;, +, +    Header(String name) {, +      this.name = checkNotNull(name, "name == null");, +    }, +, +    @Override void perform(RequestBuilder builder, Object value) {, +      if (value == null) return; // Skip null values., +, +      if (value instanceof Iterable) {, +        for (Object iterableValue : (Iterable<?>) value) {, +          if (iterableValue != null) { // Skip null values., +            builder.addHeader(name, iterableValue.toString());, +          }, +        }, +      } else if (value.getClass().isArray()) {, +        for (int x = 0, arrayLength = Array.getLength(value); x < arrayLength; x++) {, +          Object arrayValue = Array.get(value, x);, +          if (arrayValue != null) { // Skip null values., +            builder.addHeader(name, arrayValue.toString());, +          }, +        }, +      } else {, +        builder.addHeader(name, value.toString());, +      }, +    }, +  }, +, +  static final class Path extends RequestAction<Object> {, +    private final String name;, +    private final boolean encoded;, +, +    Path(String name, boolean encoded) {, +      this.name = checkNotNull(name, "name == null");, +      this.encoded = encoded;, +    }, +, +    @Override void perform(RequestBuilder builder, Object value) {, +      if (value == null) {, +        throw new IllegalArgumentException(, +            "Path parameter \"" + name + "\" value must not be null.");, +      }, +      builder.addPathParam(name, value.toString(), encoded);, +    }, +  }, +, +  static final class Query extends RequestAction<Object> {, +    private final String name;, +    private final boolean encoded;, +, +    Query(String name, boolean encoded) {, +      this.name = checkNotNull(name, "name == null");, +      this.encoded = encoded;, +    }, +, +    @Override void perform(RequestBuilder builder, Object value) {, +      if (value == null) return; // Skip null values., +, +      if (value instanceof Iterable) {, +        for (Object iterableValue : (Iterable<?>) value) {, +          if (iterableValue != null) { // Skip null values., +            builder.addQueryParam(name, iterableValue.toString(), encoded);, +          }]