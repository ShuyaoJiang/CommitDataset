[+++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +          if (Iterable.class.isAssignableFrom(rawParameterType)) {, +            if (!(type instanceof ParameterizedType)) {, +              throw parameterError(p, rawParameterType.getSimpleName(), +                  + " must include generic type (e.g., ", +                  + rawParameterType.getSimpleName(), +                  + "<String>)");, +            }, +            ParameterizedType parameterizedType = (ParameterizedType) type;, +            Type iterableType = Utils.getParameterUpperBound(0, parameterizedType);, +            if (!MultipartBody.Part.class.isAssignableFrom(Utils.getRawType(iterableType))) {, +            return ParameterHandler.RawPart.INSTANCE.iterable();, +          } else if (rawParameterType.isArray()) {, +            Class<?> arrayComponentType = rawParameterType.getComponentType();, +            if (!MultipartBody.Part.class.isAssignableFrom(arrayComponentType)) {, +              throw parameterError(p,, +                  "@Part annotation must supply a name or use MultipartBody.Part parameter type.");, +            }, +            return ParameterHandler.RawPart.INSTANCE.array();, +          } else if (MultipartBody.Part.class.isAssignableFrom(rawParameterType)) {, +            throw parameterError(p,, +                "@Part annotation must supply a name or use MultipartBody.Part parameter type.");, +          }, +        } else {, +            if (MultipartBody.Part.class.isAssignableFrom(Utils.getRawType(iterableType))) {, +              throw parameterError(p, "@Part parameters using the MultipartBody.Part must not ", +                  + "include a part name in the annotation.");, +            }, +            if (MultipartBody.Part.class.isAssignableFrom(arrayComponentType)) {, +              throw parameterError(p, "@Part parameters using the MultipartBody.Part must not ", +                  + "include a part name in the annotation.");, +            }, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +          if (Iterable.class.isAssignableFrom(rawParameterType)) {, +            if (!(type instanceof ParameterizedType)) {, +              throw parameterError(p, rawParameterType.getSimpleName(), +                  + " must include generic type (e.g., ", +                  + rawParameterType.getSimpleName(), +                  + "<String>)");, +            }, +            ParameterizedType parameterizedType = (ParameterizedType) type;, +            Type iterableType = Utils.getParameterUpperBound(0, parameterizedType);, +            if (!MultipartBody.Part.class.isAssignableFrom(Utils.getRawType(iterableType))) {, +            return ParameterHandler.RawPart.INSTANCE.iterable();, +          } else if (rawParameterType.isArray()) {, +            Class<?> arrayComponentType = rawParameterType.getComponentType();, +            if (!MultipartBody.Part.class.isAssignableFrom(arrayComponentType)) {, +              throw parameterError(p,, +                  "@Part annotation must supply a name or use MultipartBody.Part parameter type.");, +            }, +            return ParameterHandler.RawPart.INSTANCE.array();, +          } else if (MultipartBody.Part.class.isAssignableFrom(rawParameterType)) {, +            throw parameterError(p,, +                "@Part annotation must supply a name or use MultipartBody.Part parameter type.");, +          }, +        } else {, +            if (MultipartBody.Part.class.isAssignableFrom(Utils.getRawType(iterableType))) {, +              throw parameterError(p, "@Part parameters using the MultipartBody.Part must not ", +                  + "include a part name in the annotation.");, +            }, +            if (MultipartBody.Part.class.isAssignableFrom(arrayComponentType)) {, +              throw parameterError(p, "@Part parameters using the MultipartBody.Part must not ", +                  + "include a part name in the annotation.");, +            }, +++ b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java, +  @Test public void multipartIterableRequiresName() {, +    class Example {, +      @Multipart //, +      @POST("/foo/bar/") //, +      Call<ResponseBody> method(@Part List<RequestBody> part) {, +        return null;, +      }, +    }, +, +    try {, +      buildRequest(Example.class, new Object[] { null });, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessage(, +          "@Part annotation must supply a name or use MultipartBody.Part parameter type. (parameter #1)\n", +              + "    for method Example.method");, +    }, +  }, +, +  @Test public void multipartArrayRequiresName() {, +    class Example {, +      @Multipart //, +      @POST("/foo/bar/") //, +      Call<ResponseBody> method(@Part RequestBody[] part) {, +        return null;, +      }, +    }, +, +    try {, +      buildRequest(Example.class, new Object[] { null });, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessage(, +          "@Part annotation must supply a name or use MultipartBody.Part parameter type. (parameter #1)\n", +              + "    for method Example.method");]