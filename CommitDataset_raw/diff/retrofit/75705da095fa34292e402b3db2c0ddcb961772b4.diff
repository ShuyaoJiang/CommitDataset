[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import java.io.InterruptedIOException;, +  private final NetworkBehavior behavior;, +  private final ExecutorService backgroundExecutor;, +  private final Call<T> delegate;, +  private volatile boolean canceled;, +      private boolean delaySleep() {, +            callback.onFailure(new InterruptedIOException("canceled"));, +          callback.onFailure(new InterruptedIOException("canceled"));, +      throw new InterruptedIOException("canceled");, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import java.io.InterruptedIOException;, +  private final NetworkBehavior behavior;, +  private final ExecutorService backgroundExecutor;, +  private final Call<T> delegate;, +  private volatile boolean canceled;, +      private boolean delaySleep() {, +            callback.onFailure(new InterruptedIOException("canceled"));, +          callback.onFailure(new InterruptedIOException("canceled"));, +      throw new InterruptedIOException("canceled");, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +  private final Retrofit retrofit;, +  BehaviorDelegate(Retrofit retrofit, NetworkBehavior behavior, Class<T> service) {, +    final Call<?> behaviorCall =, +        new BehaviorCall<>(behavior, retrofit.client().getDispatcher().getExecutorService(), call);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import java.io.InterruptedIOException;, +  private final NetworkBehavior behavior;, +  private final ExecutorService backgroundExecutor;, +  private final Call<T> delegate;, +  private volatile boolean canceled;, +      private boolean delaySleep() {, +            callback.onFailure(new InterruptedIOException("canceled"));, +          callback.onFailure(new InterruptedIOException("canceled"));, +      throw new InterruptedIOException("canceled");, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +  private final Retrofit retrofit;, +  BehaviorDelegate(Retrofit retrofit, NetworkBehavior behavior, Class<T> service) {, +    final Call<?> behaviorCall =, +        new BehaviorCall<>(behavior, retrofit.client().getDispatcher().getExecutorService(), call);, +++ b/retrofit-mock/src/main/java/retrofit2/mock/MockRetrofit.java, +  public static MockRetrofit create(Retrofit retrofit) {, +    return create(retrofit, NetworkBehavior.create());, +  }, +, +  public static MockRetrofit create(Retrofit retrofit, NetworkBehavior behavior) {, +    return new MockRetrofit(retrofit, behavior);, +  }, +, +  public MockRetrofit(Retrofit retrofit, NetworkBehavior behavior) {, +    return new BehaviorDelegate<>(retrofit, behavior, service);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import java.io.InterruptedIOException;, +  private final NetworkBehavior behavior;, +  private final ExecutorService backgroundExecutor;, +  private final Call<T> delegate;, +  private volatile boolean canceled;, +      private boolean delaySleep() {, +            callback.onFailure(new InterruptedIOException("canceled"));, +          callback.onFailure(new InterruptedIOException("canceled"));, +      throw new InterruptedIOException("canceled");, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java, +  private final Retrofit retrofit;, +  BehaviorDelegate(Retrofit retrofit, NetworkBehavior behavior, Class<T> service) {, +    final Call<?> behaviorCall =, +        new BehaviorCall<>(behavior, retrofit.client().getDispatcher().getExecutorService(), call);, +++ b/retrofit-mock/src/main/java/retrofit2/mock/MockRetrofit.java, +  public static MockRetrofit create(Retrofit retrofit) {, +    return create(retrofit, NetworkBehavior.create());, +  }, +, +  public static MockRetrofit create(Retrofit retrofit, NetworkBehavior behavior) {, +    return new MockRetrofit(retrofit, behavior);, +  }, +, +  public MockRetrofit(Retrofit retrofit, NetworkBehavior behavior) {, +    return new BehaviorDelegate<>(retrofit, behavior, service);, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/RxJavaCallAdapterFactory.java, +    private CallOnSubscribe(Call<T> originalCall) {, +++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorCall.java, +import java.io.InterruptedIOException;, +  private final NetworkBehavior behavior;, +  private final ExecutorService backgroundExecutor;, +  private final Call<T> delegate;, +  private volatile boolean canceled;, +      private boolean delaySleep() {, +            callback.onFailure(new InterruptedIOException("canceled"));, +          callback.onFailure(new InterruptedIOException("canceled"));, +      throw new InterruptedIOException("canceled");]