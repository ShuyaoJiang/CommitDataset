[+++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import rx.Scheduler;, +import rx.schedulers.Schedulers;, +      RequestBuilder requestBuilder = new RequestBuilder(restAdapter.converter, methodInfo);, +      requestBuilder.setApiUrl(restAdapter.server.getUrl());, +    private final Scheduler scheduler;, +      scheduler = Schedulers.executor(restAdapter.httpExecutor);, +      }).subscribeOn(scheduler);, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import rx.Scheduler;, +import rx.schedulers.Schedulers;, +      RequestBuilder requestBuilder = new RequestBuilder(restAdapter.converter, methodInfo);, +      requestBuilder.setApiUrl(restAdapter.server.getUrl());, +    private final Scheduler scheduler;, +      scheduler = Schedulers.executor(restAdapter.httpExecutor);, +      }).subscribeOn(scheduler);, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private String apiUrl;, +  RequestBuilder(Converter converter, RestMethodInfo methodInfo) {, +  void setApiUrl(String apiUrl) {, +    this.apiUrl = apiUrl;, +  }, +, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import rx.Scheduler;, +import rx.schedulers.Schedulers;, +      RequestBuilder requestBuilder = new RequestBuilder(restAdapter.converter, methodInfo);, +      requestBuilder.setApiUrl(restAdapter.server.getUrl());, +    private final Scheduler scheduler;, +      scheduler = Schedulers.executor(restAdapter.httpExecutor);, +      }).subscribeOn(scheduler);, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private String apiUrl;, +  RequestBuilder(Converter converter, RestMethodInfo methodInfo) {, +  void setApiUrl(String apiUrl) {, +    this.apiUrl = apiUrl;, +  }, +, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +      }).subscribeOn(scheduler);, +        });, +        RequestBuilder requestBuilder = new RequestBuilder(converter, methodInfo);, +        requestBuilder.setApiUrl(serverUrl);, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import rx.Scheduler;, +import rx.schedulers.Schedulers;, +      RequestBuilder requestBuilder = new RequestBuilder(restAdapter.converter, methodInfo);, +      requestBuilder.setApiUrl(restAdapter.server.getUrl());, +    private final Scheduler scheduler;, +      scheduler = Schedulers.executor(restAdapter.httpExecutor);, +      }).subscribeOn(scheduler);, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private String apiUrl;, +  RequestBuilder(Converter converter, RestMethodInfo methodInfo) {, +  void setApiUrl(String apiUrl) {, +    this.apiUrl = apiUrl;, +  }, +, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +      }).subscribeOn(scheduler);, +        });, +        RequestBuilder requestBuilder = new RequestBuilder(converter, methodInfo);, +        requestBuilder.setApiUrl(serverUrl);, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +  private RuntimeException methodError(String message, Object... args) {, +    if (args.length > 0) {, +      message = String.format(message, args);, +    }, +    return new IllegalArgumentException(, +        method.getDeclaringClass().getSimpleName() + "." + method.getName() + ": " + message);, +  }, +, +  private RuntimeException parameterError(int index, String message, Object... args) {, +    return methodError(message + " (parameter #" + (index + 1) + ")", args);, +  }, +, +          throw methodError("Only one HTTP method is allowed. Found: %s and %s.", requestMethod,, +              methodInfo.value());, +          throw new IllegalStateException("Failed to extract path from ", +              + " annotation on method '", +              + "'.", e);, +          throw methodError("@Headers annotation is empty.");, +          throw methodError("Only one encoding annotation is allowed.");, +          throw methodError("Only one encoding annotation is allowed.");, +      throw methodError("HTTP method annotation is required (e.g., @GET, @POST, etc.).");, +        throw methodError(, +            "Multipart can only be specified on HTTP methods with request body (e.g., @POST).");, +        throw methodError("FormUrlEncoded can only be specified on HTTP methods with request body ", +                + "(e.g., @POST).");, +      throw methodError("URL path \"%s\" must start with '/'.", path);, +        throw methodError("URL query string \"%s\" must not have replace block.", query);, +        throw methodError("Header must be in the form \"Name: Value\". Found: \"%s\"", header);, +      throw methodError("Must have return type or Callback as last argument, not both.");, +      throw methodError("Must have either a return type or Callback as last argument.");, +    throw methodError(, +        "Last parameter must be of type Callback<X> or Callback<? super X>. Found: %s.",, +        lastArgType);, +            validatePathName(i, name);, +            validatePathName(i, name);, +              throw parameterError(i, "@QueryMap parameter type must be Map.");]