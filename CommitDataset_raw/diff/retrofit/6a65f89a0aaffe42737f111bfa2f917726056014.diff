[+++ b/retrofit/src/main/java/retrofit/Platform.java, +  abstract Client.Provider defaultClient();, +    @Override Client.Provider defaultClient() {, +      final Client client;, +        client = OkClientInstantiator.instantiate();, +      } else {, +        client = new UrlConnectionClient();, +      return new Client.Provider() {, +        @Override public Client get() {, +          return client;, +        }, +      };, +    @Override Client.Provider defaultClient() {, +      final Client client;, +        client = OkClientInstantiator.instantiate();, +      } else if (Build.VERSION.SDK_INT < Build.VERSION_CODES.GINGERBREAD) {, +        client = new AndroidApacheClient();, +      } else {, +        client = new UrlConnectionClient();, +      return new Client.Provider() {, +        @Override public Client get() {, +          return client;, +      };, +    @Override Client.Provider defaultClient() {, +      final UrlFetchClient client = new UrlFetchClient();, +      return new Client.Provider() {, +        @Override public Client get() {, +          return client;, +        }, +      };, +++ b/retrofit/src/main/java/retrofit/Platform.java, +  abstract Client.Provider defaultClient();, +    @Override Client.Provider defaultClient() {, +      final Client client;, +        client = OkClientInstantiator.instantiate();, +      } else {, +        client = new UrlConnectionClient();, +      return new Client.Provider() {, +        @Override public Client get() {, +          return client;, +        }, +      };, +    @Override Client.Provider defaultClient() {, +      final Client client;, +        client = OkClientInstantiator.instantiate();, +      } else if (Build.VERSION.SDK_INT < Build.VERSION_CODES.GINGERBREAD) {, +        client = new AndroidApacheClient();, +      } else {, +        client = new UrlConnectionClient();, +      return new Client.Provider() {, +        @Override public Client get() {, +          return client;, +      };, +    @Override Client.Provider defaultClient() {, +      final UrlFetchClient client = new UrlFetchClient();, +      return new Client.Provider() {, +        @Override public Client get() {, +          return client;, +        }, +      };, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +  private final Client.Provider clientProvider;, +  private RestAdapter(Endpoint server, Client.Provider clientProvider, Executor httpExecutor,, +    this.clientProvider = clientProvider;, +        Response response = clientProvider.get().execute(request);, +   * Calling the following methods is required before calling {@link #build()}:, +   * <ul>, +   * <li>{@link #setEndpoint(Endpoint)}</li>, +   * <li>{@link #setClient(Client.Provider)}</li>, +   * <li>{@link #setConverter(Converter)}</li>, +   * </ul>, +   * <p>, +   * If you are using asynchronous execution (i.e., with {@link Callback Callbacks}) the following, +   * is also required:, +   * <ul>, +   * <li>{@link #setExecutors(java.util.concurrent.Executor, java.util.concurrent.Executor)}</li>, +   * </ul>, +    private Client.Provider clientProvider;, +    public Builder setClient(final Client client) {, +      return setClient(new Client.Provider() {, +        @Override public Client get() {, +          return client;, +        }, +      });, +    }, +, +    /** The HTTP client used for requests. */, +    public Builder setClient(Client.Provider clientProvider) {, +      if (clientProvider == null) {, +        throw new NullPointerException("Client provider may not be null.");, +      }, +      this.clientProvider = clientProvider;, +      return new RestAdapter(endpoint, clientProvider, httpExecutor, callbackExecutor,, +      if (clientProvider == null) {, +        clientProvider = Platform.get().defaultClient();, +++ b/retrofit/src/main/java/retrofit/Platform.java, +  abstract Client.Provider defaultClient();, +    @Override Client.Provider defaultClient() {, +      final Client client;, +        client = OkClientInstantiator.instantiate();]