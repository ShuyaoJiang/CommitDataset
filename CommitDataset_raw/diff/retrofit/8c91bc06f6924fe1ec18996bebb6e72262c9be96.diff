[+++ b/retrofit/src/main/java/retrofit/Callback.java, +++ b/retrofit/src/main/java/retrofit/Callback.java, +++ b/retrofit/src/main/java/retrofit/Endpoint.java, +  public static Endpoint createFixed(final String url) {, +      @Override public String url() {, +        return url;, +  public abstract String url();, +++ b/retrofit/src/main/java/retrofit/Callback.java, +++ b/retrofit/src/main/java/retrofit/Endpoint.java, +  public static Endpoint createFixed(final String url) {, +      @Override public String url() {, +        return url;, +  public abstract String url();, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +    String serverUrl = endpoint.url();, +    RequestBuilder requestBuilder = new RequestBuilder(serverUrl, methodInfo, converter);, +++ b/retrofit/src/main/java/retrofit/Callback.java, +++ b/retrofit/src/main/java/retrofit/Endpoint.java, +  public static Endpoint createFixed(final String url) {, +      @Override public String url() {, +        return url;, +  public abstract String url();, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +    String serverUrl = endpoint.url();, +    RequestBuilder requestBuilder = new RequestBuilder(serverUrl, methodInfo, converter);, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private final String apiUrl;, +  private StringBuilder queryParams;, +  RequestBuilder(String apiUrl, MethodInfo methodInfo, Converter converter) {, +    this.apiUrl = apiUrl;, +      queryParams = new StringBuilder().append('?').append(requestQuery);, +    if (name == null) {, +      throw new IllegalArgumentException("Query param name must not be null.");, +    }, +    if (value == null) {, +      throw new IllegalArgumentException("Query param \"" + name + "\" value must not be null.");, +    }, +    try {, +      StringBuilder queryParams = this.queryParams;, +      if (queryParams == null) {, +        this.queryParams = queryParams = new StringBuilder();, +      }, +, +      queryParams.append(queryParams.length() > 0 ? '&' : '?');, +, +      if (!encoded) {, +        name = URLEncoder.encode(name, "UTF-8");, +        value = URLEncoder.encode(value, "UTF-8");, +      }, +      queryParams.append(name).append('=').append(value);, +    } catch (UnsupportedEncodingException e) {, +      throw new RuntimeException(, +          "Unable to convert query parameter \"" + name + "\" value to UTF-8: " + value, e);, +    String apiUrl = this.apiUrl;, +    StringBuilder url = new StringBuilder(apiUrl);, +    if (apiUrl.endsWith("/")) {, +      // We require relative paths to start with '/'. Prevent a double-slash., +      url.deleteCharAt(url.length() - 1);, +    }, +, +    url.append(relativeUrl);, +, +    StringBuilder queryParams = this.queryParams;, +    if (queryParams != null) {, +      url.append(queryParams);, +    }, +        .url(url.toString()), +++ b/retrofit/src/main/java/retrofit/Callback.java, +++ b/retrofit/src/main/java/retrofit/Endpoint.java, +  public static Endpoint createFixed(final String url) {, +      @Override public String url() {, +        return url;, +  public abstract String url();, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +    String serverUrl = endpoint.url();, +    RequestBuilder requestBuilder = new RequestBuilder(serverUrl, methodInfo, converter);, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +  private final String apiUrl;, +  private StringBuilder queryParams;, +  RequestBuilder(String apiUrl, MethodInfo methodInfo, Converter converter) {, +    this.apiUrl = apiUrl;, +      queryParams = new StringBuilder().append('?').append(requestQuery);, +    if (name == null) {, +      throw new IllegalArgumentException("Query param name must not be null.");, +    }, +    if (value == null) {, +      throw new IllegalArgumentException("Query param \"" + name + "\" value must not be null.");, +    }, +    try {, +      StringBuilder queryParams = this.queryParams;, +      if (queryParams == null) {, +        this.queryParams = queryParams = new StringBuilder();, +      }, +, +      queryParams.append(queryParams.length() > 0 ? '&' : '?');, +, +      if (!encoded) {, +        name = URLEncoder.encode(name, "UTF-8");, +        value = URLEncoder.encode(value, "UTF-8");, +      }]