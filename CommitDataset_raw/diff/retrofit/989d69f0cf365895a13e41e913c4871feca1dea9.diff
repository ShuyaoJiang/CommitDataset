[+++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java, +import static retrofit.RestMethodInfo.ParamUsage.ENCODED_PATH;, +import static retrofit.RestMethodInfo.ParamUsage.ENCODED_QUERY;, +  @Test public void getWithEncodedPathParam() throws Exception {, +    Request request = new Helper() //, +        .setMethod("GET") //, +        .setUrl("http://example.com") //, +        .setPath("/foo/bar/{ping}/") //, +        .addEncodedPathParam("ping", "po%20ng") //, +        .build();, +    assertThat(request.getMethod()).isEqualTo("GET");, +    assertThat(request.getHeaders()).isEmpty();, +    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/po%20ng/");, +    assertThat(request.getBody()).isNull();, +  }, +, +  @Test public void getWithEncodedQueryParam() throws Exception {, +    Request request = new Helper() //, +        .setMethod("GET") //, +        .setUrl("http://example.com") //, +        .setPath("/foo/bar/") //, +        .addEncodedQueryParam("ping", "p+o+n+g") //, +        .build();, +    assertThat(request.getMethod()).isEqualTo("GET");, +    assertThat(request.getHeaders()).isEmpty();, +    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?ping=p+o+n+g");, +    assertThat(request.getBody()).isNull();, +  }, +, +    Helper addEncodedPathParam(String name, String value) {, +      paramNames.add(name);, +      paramUsages.add(ENCODED_PATH);, +      args.add(value);, +      return this;, +    }, +, +    Helper addEncodedQueryParam(String name, String value) {, +      paramNames.add(name);, +      paramUsages.add(ENCODED_QUERY);, +      args.add(value);, +      return this;, +    }, +]