[+++ b/README.md, + *  Android - Contains Android-specific utility classes., +++ b/README.md, + *  Android - Contains Android-specific utility classes., +++ /dev/null, +++ b/README.md, + *  Android - Contains Android-specific utility classes., +++ /dev/null, +++ /dev/null, +++ b/README.md, + *  Android - Contains Android-specific utility classes., +++ /dev/null, +++ /dev/null, +++ b/io/src/main/java/retrofit/io/QueueFile.java, +/*, + * Copyright (C) 2010 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit.io;, +, +import java.io.File;, +import java.io.FileNotFoundException;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.RandomAccessFile;, +import java.nio.channels.FileChannel;, +import java.util.NoSuchElementException;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +, +/**, + * A reliable, efficient, file-based, FIFO queue. Additions and removals are, + * O(1). All operations are atomic. Writes are synchronous; data will be written, + * to disk before an operation returns. The underlying file is structured to, + * survive process and even system crashes. If an I/O exception is thrown during, + * a mutating change, the change is aborted. It is safe to continue to use a, + * {@code QueueFile} instance after an exception., + * <p/>, + * <p>All operations are synchronized. In a traditional queue, the remove, + * operation returns an element. In this queue, {@link #peek} and {@link, + * #remove} are used in conjunction. Use {@code peek} to retrieve the first, + * element, and then {@code remove} to remove it after successful processing. If, + * the system crashes after {@code peek} and during processing, the element will, + * remain in the queue, to be processed when the system restarts., + * <p/>, + * <p><b><font color="red">NOTE:</font></b> The current implementation is built, + * for file systems that support atomic segment writes (like YAFFS). Most, + * conventional file systems don't support this; if the power goes out while, + * writing a segment, the segment will contain garbage and the file will be, + * corrupt. We'll add journaling support so this class can be used with more, + * file systems later., + *, + * @author Bob Lee (bob@squareup.com), + */, +public class QueueFile {, +  private static final Logger LOGGER =, +      Logger.getLogger(QueueFile.class.getName());, +, +  /** Initial file size in bytes. */, +  private static final int INITIAL_LENGTH = 4096; // one file system block, +, +  /** Length of header in bytes. */, +  static final int HEADER_LENGTH = 16;, +, +  /**, +   * The underlying file. Uses a ring buffer to store entries. Designed so that, +   * a modification isn't committed or visible until we write the header. The, +   * header is much smaller than a segment. So long as the underlying file, +   * system supports atomic segment writes, changes to the queue are atomic., +   * Storing the file length ensures we can recover from a failed expansion, +   * (i.e. if setting the file length succeeds but the process dies before the, +   * data can be copied)., +   * <p/>, +   * <pre>, +   *   Format:, +   *     Header              (16 bytes), +   *     Element Ring Buffer (File Length - 16 bytes), +   * <p/>, +   *   Header:, +   *     File Length            (4 bytes), +   *     Element Count          (4 bytes), +   *     First Element Position (4 bytes, =0 if null), +   *     Last Element Position  (4 bytes, =0 if null), +   * <p/>, +   *   Element:, +   *     Length (4 bytes), +   *     Data   (Length bytes), +   * </pre>, +   */]