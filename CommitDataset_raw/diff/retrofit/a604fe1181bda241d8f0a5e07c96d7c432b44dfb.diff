[+++ b/pom.xml, +    <robolectric.version>3.0</robolectric.version>, +++ b/pom.xml, +    <robolectric.version>3.0</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +/**, + * A {@linkplain Converter.Factory converter} for {@code Optional<T>} which delegates to another, + * converter to deserialize {@code T} and then wraps it into {@link Optional}., + */, +@IgnoreJRERequirement, +++ b/pom.xml, +    <robolectric.version>3.0</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +/**, + * A {@linkplain Converter.Factory converter} for {@code Optional<T>} which delegates to another, + * converter to deserialize {@code T} and then wraps it into {@link Optional}., + */, +@IgnoreJRERequirement, +++ b/retrofit/src/main/java/retrofit2/Platform.java, +++ b/pom.xml, +    <robolectric.version>3.0</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +/**, + * A {@linkplain Converter.Factory converter} for {@code Optional<T>} which delegates to another, + * converter to deserialize {@code T} and then wraps it into {@link Optional}., + */, +@IgnoreJRERequirement, +++ b/retrofit/src/main/java/retrofit2/Platform.java, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +  private final @Nullable String relativeUrl;, +  private final @Nullable Headers headers;, +  private final @Nullable MediaType contentType;, +    @Nullable String httpMethod;, +    @Nullable String relativeUrl;, +    @Nullable Headers headers;, +    @Nullable MediaType contentType;, +    @Nullable Set<String> relativeUrlParamNames;, +    @Nullable ParameterHandler<?>[] parameterHandlers;, +    @Nullable, +++ b/pom.xml, +    <robolectric.version>3.0</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +/**, + * A {@linkplain Converter.Factory converter} for {@code Optional<T>} which delegates to another, + * converter to deserialize {@code T} and then wraps it into {@link Optional}., + */, +@IgnoreJRERequirement, +++ b/retrofit/src/main/java/retrofit2/Platform.java, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +  private final @Nullable String relativeUrl;, +  private final @Nullable Headers headers;, +  private final @Nullable MediaType contentType;, +    @Nullable String httpMethod;, +    @Nullable String relativeUrl;, +    @Nullable Headers headers;, +    @Nullable MediaType contentType;, +    @Nullable Set<String> relativeUrlParamNames;, +    @Nullable ParameterHandler<?>[] parameterHandlers;, +    @Nullable, +++ /dev/null, +++ b/pom.xml, +    <robolectric.version>3.0</robolectric.version>, +++ b/retrofit/src/main/java/retrofit2/OptionalConverterFactory.java, +/**, + * A {@linkplain Converter.Factory converter} for {@code Optional<T>} which delegates to another, + * converter to deserialize {@code T} and then wraps it into {@link Optional}., + */, +@IgnoreJRERequirement, +++ b/retrofit/src/main/java/retrofit2/Platform.java, +++ b/retrofit/src/main/java/retrofit2/RequestFactory.java, +  private final @Nullable String relativeUrl;, +  private final @Nullable Headers headers;, +  private final @Nullable MediaType contentType;, +    @Nullable String httpMethod;, +    @Nullable String relativeUrl;, +    @Nullable Headers headers;, +    @Nullable MediaType contentType;, +    @Nullable Set<String> relativeUrlParamNames;, +    @Nullable ParameterHandler<?>[] parameterHandlers;, +    @Nullable, +++ /dev/null, +++ b/retrofit/src/test/java/retrofit2/OptionalConverterFactoryTest.java, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import javax.annotation.Nullable;, +import okhttp3.ResponseBody;, +        .addConverterFactory(new ObjectToNullConverterFactory()), +    assertThat(optional.isPresent()).isFalse();, +    assertThat(body).isNull();, +  }, +, +  static final class ObjectToNullConverterFactory extends Converter.Factory {, +    @Override public @Nullable Converter<ResponseBody, ?> responseBodyConverter(, +        Type type, Annotation[] annotations, Retrofit retrofit) {, +      if (type != Object.class) {, +        return null;, +      }, +      return new Converter<ResponseBody, Object>() {, +        @Override public Object convert(ResponseBody value) {, +          return null;]