[+++ b/retrofit-appengine/src/main/java/retrofit/appengine/UrlFetchClient.java, +  @Override public void execute(Request request, AsyncCallback callback) {, +    throw new UnsupportedOperationException("Not implemented."); // TODO, +++ b/retrofit-appengine/src/main/java/retrofit/appengine/UrlFetchClient.java, +  @Override public void execute(Request request, AsyncCallback callback) {, +    throw new UnsupportedOperationException("Not implemented."); // TODO, +++ b/retrofit-appengine/src/test/java/retrofit/appengine/UrlFetchClientTest.java, +import org.junit.Ignore;, +@Ignore // TODO Not currently implemented., +++ b/retrofit-appengine/src/main/java/retrofit/appengine/UrlFetchClient.java, +  @Override public void execute(Request request, AsyncCallback callback) {, +    throw new UnsupportedOperationException("Not implemented."); // TODO, +++ b/retrofit-appengine/src/test/java/retrofit/appengine/UrlFetchClientTest.java, +import org.junit.Ignore;, +@Ignore // TODO Not currently implemented., +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import java.util.concurrent.Executor;, +  public static MockRestAdapter from(RestAdapter restAdapter, Executor executor) {, +    return new MockRestAdapter(restAdapter, executor);, +  private final Executor executor;, +  private MockRestAdapter(RestAdapter restAdapter, Executor executor) {, +    this.executor = executor;, +      if (methodInfo.executionType == RestMethodInfo.ExecutionType.SYNC) {, +      if (methodInfo.executionType == RestMethodInfo.ExecutionType.RX) {, +            mockRxSupport = new MockRxSupport(restAdapter, executor);, +      executor.execute(new Runnable() {, +    MockRxSupport(RestAdapter restAdapter, Executor executor) {, +      httpScheduler = Schedulers.from(executor);, +++ b/retrofit-appengine/src/main/java/retrofit/appengine/UrlFetchClient.java, +  @Override public void execute(Request request, AsyncCallback callback) {, +    throw new UnsupportedOperationException("Not implemented."); // TODO, +++ b/retrofit-appengine/src/test/java/retrofit/appengine/UrlFetchClientTest.java, +import org.junit.Ignore;, +@Ignore // TODO Not currently implemented., +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import java.util.concurrent.Executor;, +  public static MockRestAdapter from(RestAdapter restAdapter, Executor executor) {, +    return new MockRestAdapter(restAdapter, executor);, +  private final Executor executor;, +  private MockRestAdapter(RestAdapter restAdapter, Executor executor) {, +    this.executor = executor;, +      if (methodInfo.executionType == RestMethodInfo.ExecutionType.SYNC) {, +      if (methodInfo.executionType == RestMethodInfo.ExecutionType.RX) {, +            mockRxSupport = new MockRxSupport(restAdapter, executor);, +      executor.execute(new Runnable() {, +    MockRxSupport(RestAdapter restAdapter, Executor executor) {, +      httpScheduler = Schedulers.from(executor);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +    Client client = new Client() {, +      @Override public void execute(Request request, AsyncCallback callback) {, +        throw new AssertionError();, +      }, +    };, +        .setCallbackExecutor(callbackExecutor), +    mockRestAdapter = MockRestAdapter.from(restAdapter, httpExecutor);, +++ b/retrofit-appengine/src/main/java/retrofit/appengine/UrlFetchClient.java, +  @Override public void execute(Request request, AsyncCallback callback) {, +    throw new UnsupportedOperationException("Not implemented."); // TODO, +++ b/retrofit-appengine/src/test/java/retrofit/appengine/UrlFetchClientTest.java, +import org.junit.Ignore;, +@Ignore // TODO Not currently implemented., +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import java.util.concurrent.Executor;, +  public static MockRestAdapter from(RestAdapter restAdapter, Executor executor) {, +    return new MockRestAdapter(restAdapter, executor);, +  private final Executor executor;, +  private MockRestAdapter(RestAdapter restAdapter, Executor executor) {, +    this.executor = executor;, +      if (methodInfo.executionType == RestMethodInfo.ExecutionType.SYNC) {, +      if (methodInfo.executionType == RestMethodInfo.ExecutionType.RX) {, +            mockRxSupport = new MockRxSupport(restAdapter, executor);, +      executor.execute(new Runnable() {, +    MockRxSupport(RestAdapter restAdapter, Executor executor) {, +      httpScheduler = Schedulers.from(executor);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +    Client client = new Client() {, +      @Override public void execute(Request request, AsyncCallback callback) {, +        throw new AssertionError();, +      }, +    };, +        .setCallbackExecutor(callbackExecutor), +    mockRestAdapter = MockRestAdapter.from(restAdapter, httpExecutor);, +++ b/retrofit/src/main/java/retrofit/Callback.java, + * @see RestAdapter.Builder#setCallbackExecutor, +++ b/retrofit-appengine/src/main/java/retrofit/appengine/UrlFetchClient.java, +  @Override public void execute(Request request, AsyncCallback callback) {, +    throw new UnsupportedOperationException("Not implemented."); // TODO, +++ b/retrofit-appengine/src/test/java/retrofit/appengine/UrlFetchClientTest.java, +import org.junit.Ignore;, +@Ignore // TODO Not currently implemented., +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +import java.util.concurrent.Executor;, +  public static MockRestAdapter from(RestAdapter restAdapter, Executor executor) {, +    return new MockRestAdapter(restAdapter, executor);, +  private final Executor executor;, +  private MockRestAdapter(RestAdapter restAdapter, Executor executor) {, +    this.executor = executor;, +      if (methodInfo.executionType == RestMethodInfo.ExecutionType.SYNC) {, +      if (methodInfo.executionType == RestMethodInfo.ExecutionType.RX) {, +            mockRxSupport = new MockRxSupport(restAdapter, executor);]