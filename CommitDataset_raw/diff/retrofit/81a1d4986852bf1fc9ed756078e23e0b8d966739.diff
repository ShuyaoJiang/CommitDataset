[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ResultTest.java, +    Response<String> response = Response.fakeSuccess("Hi");, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ResultTest.java, +    Response<String> response = Response.fakeSuccess("Hi");, +++ b/retrofit/src/main/java/retrofit/ExceptionCatchingRequestBody.java, +  void throwIfCaught() throws IOException {, +    if (thrownException != null) {, +      throw thrownException;, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ResultTest.java, +    Response<String> response = Response.fakeSuccess("Hi");, +++ b/retrofit/src/main/java/retrofit/ExceptionCatchingRequestBody.java, +  void throwIfCaught() throws IOException {, +    if (thrownException != null) {, +      throw thrownException;, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +import static retrofit.Utils.closeQueitly;, +, +    // Remove the body (the only stateful object) so we can pass the response along., +      try {, +        // Buffer the entire body to avoid future I/O., +        ResponseBody bufferedBody = Utils.readBodyToBytesIfNecessary(rawBody);, +        return Response.error(bufferedBody, rawResponse);, +      } finally {, +        closeQueitly(rawBody);, +      }, +    }, +, +    if (code == 204 || code == 205) {, +      return Response.success(null, rawResponse);, +    }, +, +      if (methodInfo.isStreaming) {, +        // Use the raw body from the request. The caller is responsible for closing., +        return Response.success((T) rawBody, rawResponse);, +      }, +, +      try {, +        // Buffer the entire body to avoid future I/O., +        ResponseBody bufferedBody = Utils.readBodyToBytesIfNecessary(rawBody);, +        //noinspection unchecked, +        return Response.success((T) bufferedBody, rawResponse);, +      } finally {, +        closeQueitly(rawBody);, +      }, +    }, +, +    ExceptionCatchingRequestBody catchingBody = new ExceptionCatchingRequestBody(rawBody);, +      T body = (T) converter.fromBody(catchingBody, responseType);, +      return Response.success(body, rawResponse);, +      // If the underlying source threw an exception, propagate that rather than indicating it was, +      // a runtime exception., +      catchingBody.throwIfCaught();, +      closeQueitly(rawBody);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ResultTest.java, +    Response<String> response = Response.fakeSuccess("Hi");, +++ b/retrofit/src/main/java/retrofit/ExceptionCatchingRequestBody.java, +  void throwIfCaught() throws IOException {, +    if (thrownException != null) {, +      throw thrownException;, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +import static retrofit.Utils.closeQueitly;, +, +    // Remove the body (the only stateful object) so we can pass the response along., +      try {, +        // Buffer the entire body to avoid future I/O., +        ResponseBody bufferedBody = Utils.readBodyToBytesIfNecessary(rawBody);, +        return Response.error(bufferedBody, rawResponse);, +      } finally {, +        closeQueitly(rawBody);, +      }, +    }, +, +    if (code == 204 || code == 205) {, +      return Response.success(null, rawResponse);, +    }, +, +      if (methodInfo.isStreaming) {, +        // Use the raw body from the request. The caller is responsible for closing., +        return Response.success((T) rawBody, rawResponse);, +      }, +, +      try {, +        // Buffer the entire body to avoid future I/O., +        ResponseBody bufferedBody = Utils.readBodyToBytesIfNecessary(rawBody);, +        //noinspection unchecked, +        return Response.success((T) bufferedBody, rawResponse);, +      } finally {, +        closeQueitly(rawBody);, +      }, +    }, +, +    ExceptionCatchingRequestBody catchingBody = new ExceptionCatchingRequestBody(rawBody);, +      T body = (T) converter.fromBody(catchingBody, responseType);, +      return Response.success(body, rawResponse);, +      // If the underlying source threw an exception, propagate that rather than indicating it was, +      // a runtime exception., +      catchingBody.throwIfCaught();, +      closeQueitly(rawBody);, +++ b/retrofit/src/main/java/retrofit/Response.java, +  public static <T, B extends T> Response<T> fakeSuccess(B body) {]