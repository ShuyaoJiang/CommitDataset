[+++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +    CallAdapter<Observable<?>> callAdapter = getCallAdapter(returnType);, +      return SingleHelper.makeSingle(callAdapter);, +  private CallAdapter<Observable<?>> getCallAdapter(Type returnType) {, +      return new ResponseCallAdapter(responseType);, +      return new ResultCallAdapter(responseType);, +    return new SimpleCallAdapter(observableType);, +  static final class ResponseCallAdapter implements CallAdapter<Observable<?>> {, +    @Override public <R> Observable<Response<R>> adapt(Call<R> call) {, +  static final class SimpleCallAdapter implements CallAdapter<Observable<?>> {, +    @Override public <R> Observable<R> adapt(Call<R> call) {, +          .flatMap(new Func1<Response<R>, Observable<R>>() {, +            @Override public Observable<R> call(Response<R> response) {, +  static final class ResultCallAdapter implements CallAdapter<Observable<?>> {, +    @Override public <R> Observable<Result<R>> adapt(Call<R> call) {, +          .map(new Func1<Response<R>, Result<R>>() {, +            @Override public Result<R> call(Response<R> response) {, +          .onErrorReturn(new Func1<Throwable, Result<R>>() {, +            @Override public Result<R> call(Throwable throwable) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +    CallAdapter<Observable<?>> callAdapter = getCallAdapter(returnType);, +      return SingleHelper.makeSingle(callAdapter);, +  private CallAdapter<Observable<?>> getCallAdapter(Type returnType) {, +      return new ResponseCallAdapter(responseType);, +      return new ResultCallAdapter(responseType);, +    return new SimpleCallAdapter(observableType);, +  static final class ResponseCallAdapter implements CallAdapter<Observable<?>> {, +    @Override public <R> Observable<Response<R>> adapt(Call<R> call) {, +  static final class SimpleCallAdapter implements CallAdapter<Observable<?>> {, +    @Override public <R> Observable<R> adapt(Call<R> call) {, +          .flatMap(new Func1<Response<R>, Observable<R>>() {, +            @Override public Observable<R> call(Response<R> response) {, +  static final class ResultCallAdapter implements CallAdapter<Observable<?>> {, +    @Override public <R> Observable<Result<R>> adapt(Call<R> call) {, +          .map(new Func1<Response<R>, Result<R>>() {, +            @Override public Result<R> call(Response<R> response) {, +          .onErrorReturn(new Func1<Throwable, Result<R>>() {, +            @Override public Result<R> call(Throwable throwable) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/SingleHelper.java, +  static CallAdapter<Single<?>> makeSingle(final CallAdapter<Observable<?>> callAdapter) {, +    return new CallAdapter<Single<?>>() {, +      @Override public <R> Single<?> adapt(Call<R> call) {, +        Observable<?> observable = callAdapter.adapt(call);, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +    CallAdapter<Observable<?>> callAdapter = getCallAdapter(returnType);, +      return SingleHelper.makeSingle(callAdapter);, +  private CallAdapter<Observable<?>> getCallAdapter(Type returnType) {, +      return new ResponseCallAdapter(responseType);, +      return new ResultCallAdapter(responseType);, +    return new SimpleCallAdapter(observableType);, +  static final class ResponseCallAdapter implements CallAdapter<Observable<?>> {, +    @Override public <R> Observable<Response<R>> adapt(Call<R> call) {, +  static final class SimpleCallAdapter implements CallAdapter<Observable<?>> {, +    @Override public <R> Observable<R> adapt(Call<R> call) {, +          .flatMap(new Func1<Response<R>, Observable<R>>() {, +            @Override public Observable<R> call(Response<R> response) {, +  static final class ResultCallAdapter implements CallAdapter<Observable<?>> {, +    @Override public <R> Observable<Result<R>> adapt(Call<R> call) {, +          .map(new Func1<Response<R>, Result<R>>() {, +            @Override public Result<R> call(Response<R> response) {, +          .onErrorReturn(new Func1<Throwable, Result<R>>() {, +            @Override public Result<R> call(Throwable throwable) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/SingleHelper.java, +  static CallAdapter<Single<?>> makeSingle(final CallAdapter<Observable<?>> callAdapter) {, +    return new CallAdapter<Single<?>>() {, +      @Override public <R> Single<?> adapt(Call<R> call) {, +        Observable<?> observable = callAdapter.adapt(call);, +++ b/retrofit/src/main/java/retrofit/CallAdapter.java, +/** Adapts a {@link Call} into the type of {@code T}. */, +  /** Returns an instance of the {@code T} which adapts the execution of {@code call}. */, +  <R> T adapt(Call<R> call);, +     * Returns a call adapter for interface methods that return {@code returnType}, or null if this, +     * factory doesn't adapt that type., +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/RxJavaCallAdapterFactory.java, +    CallAdapter<Observable<?>> callAdapter = getCallAdapter(returnType);, +      return SingleHelper.makeSingle(callAdapter);, +  private CallAdapter<Observable<?>> getCallAdapter(Type returnType) {, +      return new ResponseCallAdapter(responseType);, +      return new ResultCallAdapter(responseType);, +    return new SimpleCallAdapter(observableType);, +  static final class ResponseCallAdapter implements CallAdapter<Observable<?>> {, +    @Override public <R> Observable<Response<R>> adapt(Call<R> call) {, +  static final class SimpleCallAdapter implements CallAdapter<Observable<?>> {, +    @Override public <R> Observable<R> adapt(Call<R> call) {, +          .flatMap(new Func1<Response<R>, Observable<R>>() {, +            @Override public Observable<R> call(Response<R> response) {, +  static final class ResultCallAdapter implements CallAdapter<Observable<?>> {, +    @Override public <R> Observable<Result<R>> adapt(Call<R> call) {, +          .map(new Func1<Response<R>, Result<R>>() {, +            @Override public Result<R> call(Response<R> response) {, +          .onErrorReturn(new Func1<Throwable, Result<R>>() {, +            @Override public Result<R> call(Throwable throwable) {, +++ b/retrofit-adapters/rxjava/src/main/java/retrofit/SingleHelper.java, +  static CallAdapter<Single<?>> makeSingle(final CallAdapter<Observable<?>> callAdapter) {, +    return new CallAdapter<Single<?>>() {, +      @Override public <R> Single<?> adapt(Call<R> call) {, +        Observable<?> observable = callAdapter.adapt(call);, +++ b/retrofit/src/main/java/retrofit/CallAdapter.java, +/** Adapts a {@link Call} into the type of {@code T}. */, +  /** Returns an instance of the {@code T} which adapts the execution of {@code call}. */]