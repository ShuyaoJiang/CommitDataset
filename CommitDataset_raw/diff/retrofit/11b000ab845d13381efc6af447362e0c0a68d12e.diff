[+++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +      if (methodInfo.isObservable) {, +        if (rxSupport == null) {, +          if (Platform.HAS_RX_JAVA) {, +            rxSupport = new RxSupport(httpExecutor, errorHandler, requestInterceptor);, +          } else {, +            throw new IllegalStateException("Observable method found but no RxJava on classpath.");, +          }, +        }, +        return rxSupport.createRequestObservable(new RxSupport.Invoker() {, +          @Override public ResponseWrapper invoke(RequestInterceptor requestInterceptor) {, +            return (ResponseWrapper) invokeRequest(requestInterceptor, methodInfo, args);, +          }, +        });, +      }, +, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +      if (methodInfo.isObservable) {, +        if (rxSupport == null) {, +          if (Platform.HAS_RX_JAVA) {, +            rxSupport = new RxSupport(httpExecutor, errorHandler, requestInterceptor);, +          } else {, +            throw new IllegalStateException("Observable method found but no RxJava on classpath.");, +          }, +        }, +        return rxSupport.createRequestObservable(new RxSupport.Invoker() {, +          @Override public ResponseWrapper invoke(RequestInterceptor requestInterceptor) {, +            return (ResponseWrapper) invokeRequest(requestInterceptor, methodInfo, args);, +          }, +        });, +      }, +, +++ b/retrofit/src/main/java/retrofit/RxSupport.java, +  /** A callback into {@link RestAdapter} to actually invoke the request. */, +  interface Invoker {, +    /** Invoke the request. The interceptor will be "tape" from the time of subscription. */, +    ResponseWrapper invoke(RequestInterceptor requestInterceptor);, +  }, +, +  private final RequestInterceptor requestInterceptor;, +  RxSupport(Executor executor, ErrorHandler errorHandler, RequestInterceptor requestInterceptor) {, +    this.requestInterceptor = requestInterceptor;, +  Observable createRequestObservable(final Invoker invoker) {, +        RequestInterceptorTape interceptorTape = new RequestInterceptorTape();, +        requestInterceptor.intercept(interceptorTape);, +, +        Runnable runnable = getRunnable(subscriber, invoker, interceptorTape);, +        FutureTask<Void> task = new FutureTask<Void>(runnable, null);, +, +  private Runnable getRunnable(final Subscriber<? super Object> subscriber, final Invoker invoker,, +      final RequestInterceptorTape interceptorTape) {, +          ResponseWrapper wrapper = invoker.invoke(interceptorTape);, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +      if (methodInfo.isObservable) {, +        if (rxSupport == null) {, +          if (Platform.HAS_RX_JAVA) {, +            rxSupport = new RxSupport(httpExecutor, errorHandler, requestInterceptor);, +          } else {, +            throw new IllegalStateException("Observable method found but no RxJava on classpath.");, +          }, +        }, +        return rxSupport.createRequestObservable(new RxSupport.Invoker() {, +          @Override public ResponseWrapper invoke(RequestInterceptor requestInterceptor) {, +            return (ResponseWrapper) invokeRequest(requestInterceptor, methodInfo, args);, +          }, +        });, +      }, +, +++ b/retrofit/src/main/java/retrofit/RxSupport.java, +  /** A callback into {@link RestAdapter} to actually invoke the request. */, +  interface Invoker {, +    /** Invoke the request. The interceptor will be "tape" from the time of subscription. */, +    ResponseWrapper invoke(RequestInterceptor requestInterceptor);, +  }, +, +  private final RequestInterceptor requestInterceptor;, +  RxSupport(Executor executor, ErrorHandler errorHandler, RequestInterceptor requestInterceptor) {, +    this.requestInterceptor = requestInterceptor;, +  Observable createRequestObservable(final Invoker invoker) {, +        RequestInterceptorTape interceptorTape = new RequestInterceptorTape();, +        requestInterceptor.intercept(interceptorTape);, +, +        Runnable runnable = getRunnable(subscriber, invoker, interceptorTape);, +        FutureTask<Void> task = new FutureTask<Void>(runnable, null);, +, +  private Runnable getRunnable(final Subscriber<? super Object> subscriber, final Invoker invoker,, +      final RequestInterceptorTape interceptorTape) {, +          ResponseWrapper wrapper = invoker.invoke(interceptorTape);, +++ b/retrofit/src/test/java/retrofit/RxSupportTest.java, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +import static retrofit.RequestInterceptor.RequestFacade;, +import static retrofit.RxSupport.Invoker;, +  private Invoker invoker = spy(new Invoker() {, +    @Override public ResponseWrapper invoke(RequestInterceptor requestInterceptor) {, +  private RequestInterceptor requestInterceptor = spy(new RequestInterceptor() {, +    @Override public void intercept(RequestFacade request) {, +    }, +  });, +    rxSupport = new RxSupport(executor, ErrorHandler.DEFAULT, requestInterceptor);, +  @Test public void observableCallsOnNextOnHttpExecutor() {]