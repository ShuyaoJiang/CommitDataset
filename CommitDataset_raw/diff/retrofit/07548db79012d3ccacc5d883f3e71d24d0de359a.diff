[+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +        case PART_MAP:, +          if (value != null) { // Skip null values., +            for (Map.Entry<?, ?> entry : ((Map<?, ?>) value).entrySet()) {, +              String entryName = entry.getKey().toString();, +              Object entryValue = entry.getValue();, +              if (entryValue != null) { // Skip null values., +                if (entryValue instanceof TypedOutput) {, +                  multipartBody.addPart(entryName, (TypedOutput) entryValue);, +                } else if (entryValue instanceof String) {, +                  multipartBody.addPart(entryName, new TypedString((String) entryValue));, +                } else {, +                  multipartBody.addPart(entryName, converter.toBody(entryValue));, +                }, +              }, +            }, +          }, +          break;, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +        case PART_MAP:, +          if (value != null) { // Skip null values., +            for (Map.Entry<?, ?> entry : ((Map<?, ?>) value).entrySet()) {, +              String entryName = entry.getKey().toString();, +              Object entryValue = entry.getValue();, +              if (entryValue != null) { // Skip null values., +                if (entryValue instanceof TypedOutput) {, +                  multipartBody.addPart(entryName, (TypedOutput) entryValue);, +                } else if (entryValue instanceof String) {, +                  multipartBody.addPart(entryName, new TypedString((String) entryValue));, +                } else {, +                  multipartBody.addPart(entryName, converter.toBody(entryValue));, +                }, +              }, +            }, +          }, +          break;, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +import retrofit.http.PartMap;, +    PART_MAP,, +          } else if (annotationType == PartMap.class) {, +            if (requestType != RequestType.MULTIPART) {, +              throw parameterError(i,, +                  "@PartMap parameters can only be used with multipart encoding.");, +            }, +            if (!Map.class.isAssignableFrom(parameterType)) {, +              throw parameterError(i, "@PartMap parameter type must be Map.");, +            }, +, +            gotPart = true;, +            paramUsage[i] = ParamUsage.PART_MAP;, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +        case PART_MAP:, +          if (value != null) { // Skip null values., +            for (Map.Entry<?, ?> entry : ((Map<?, ?>) value).entrySet()) {, +              String entryName = entry.getKey().toString();, +              Object entryValue = entry.getValue();, +              if (entryValue != null) { // Skip null values., +                if (entryValue instanceof TypedOutput) {, +                  multipartBody.addPart(entryName, (TypedOutput) entryValue);, +                } else if (entryValue instanceof String) {, +                  multipartBody.addPart(entryName, new TypedString((String) entryValue));, +                } else {, +                  multipartBody.addPart(entryName, converter.toBody(entryValue));, +                }, +              }, +            }, +          }, +          break;, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +import retrofit.http.PartMap;, +    PART_MAP,, +          } else if (annotationType == PartMap.class) {, +            if (requestType != RequestType.MULTIPART) {, +              throw parameterError(i,, +                  "@PartMap parameters can only be used with multipart encoding.");, +            }, +            if (!Map.class.isAssignableFrom(parameterType)) {, +              throw parameterError(i, "@PartMap parameter type must be Map.");, +            }, +, +            gotPart = true;, +            paramUsage[i] = ParamUsage.PART_MAP;, +++ b/retrofit/src/main/java/retrofit/http/PartMap.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit.http;, +]