[+++ b/retrofit/src/main/java/retrofit/converter/GsonConverter.java, +    String charset = "UTF-8";, +    if (body.mimeType() != null) {, +      charset = MimeUtil.parseCharset(body.mimeType());, +    }, +++ b/retrofit/src/main/java/retrofit/converter/GsonConverter.java, +    String charset = "UTF-8";, +    if (body.mimeType() != null) {, +      charset = MimeUtil.parseCharset(body.mimeType());, +    }, +++ b/retrofit/src/main/java/retrofit/mime/TypedByteArray.java, +   * Constructs a new typed byte array.  Sets mimeType to {@code application/unknown} if absent., +   * @throws NullPointerException if bytes are null, +      mimeType = "application/unknown";, +++ b/retrofit/src/main/java/retrofit/converter/GsonConverter.java, +    String charset = "UTF-8";, +    if (body.mimeType() != null) {, +      charset = MimeUtil.parseCharset(body.mimeType());, +    }, +++ b/retrofit/src/main/java/retrofit/mime/TypedByteArray.java, +   * Constructs a new typed byte array.  Sets mimeType to {@code application/unknown} if absent., +   * @throws NullPointerException if bytes are null, +      mimeType = "application/unknown";, +++ b/retrofit/src/test/java/retrofit/RestAdapterTest.java, +import java.io.ByteArrayInputStream;, +import java.io.InputStream;, +import java.util.ArrayList;, +import retrofit.mime.TypedInput;, +  @Test public void logSuccessfulRequestResponseOnDebugWhenResponseBodyPresent() throws Exception {, +    final List<String> logMessages = new ArrayList<String>();, +    RestAdapter.Log log = new RestAdapter.Log() {, +      public void log(String message) {, +        logMessages.add(message);, +      }, +    };, +, +    Example example = new RestAdapter.Builder() //, +        .setClient(mockClient), +        .setExecutors(mockRequestExecutor, mockCallbackExecutor), +        .setServer("http://example.com"), +        .setProfiler(mockProfiler), +        .setLog(log), +        .setDebug(true), +        .build(), +        .create(Example.class);, +, +    when(mockClient.execute(any(Request.class))) //, +        .thenReturn(new Response(200, "OK", NO_HEADERS, new TypedString("{}")));, +, +    example.something();, +    assertThat(logMessages).hasSize(5);, +    assertThat(logMessages.get(0)).isEqualTo("---> HTTP GET http://example.com/");, +    assertThat(logMessages.get(1)).isEqualTo("---> END HTTP (0-byte body)");, +    assertThat(logMessages.get(2)).matches("<--- HTTP 200 http://example.com/ \\([0-9]+ms\\)");, +    assertThat(logMessages.get(3)).isEqualTo("{}");, +    assertThat(logMessages.get(4)).isEqualTo("<--- END HTTP (2-byte body)");, +  }, +, +  @Test public void logSuccessfulRequestResponseOnDebugWhenResponseBodyAbsent() throws Exception {, +    final List<String> logMessages = new ArrayList<String>();, +    RestAdapter.Log log = new RestAdapter.Log() {, +      public void log(String message) {, +        logMessages.add(message);, +      }, +    };, +, +    Example example = new RestAdapter.Builder() //, +        .setClient(mockClient), +        .setExecutors(mockRequestExecutor, mockCallbackExecutor), +        .setServer("http://example.com"), +        .setProfiler(mockProfiler), +        .setLog(log), +        .setDebug(true), +        .build(), +        .create(Example.class);, +, +    when(mockClient.execute(any(Request.class))) //, +        .thenReturn(new Response(200, "OK", NO_HEADERS, null));, +, +    example.something();, +    assertThat(logMessages).hasSize(4);, +    assertThat(logMessages.get(0)).isEqualTo("---> HTTP GET http://example.com/");, +    assertThat(logMessages.get(1)).isEqualTo("---> END HTTP (0-byte body)");, +    assertThat(logMessages.get(2)).matches("<--- HTTP 200 http://example.com/ \\([0-9]+ms\\)");, +    assertThat(logMessages.get(3)).isEqualTo("<--- END HTTP (0-byte body)");, +  }, +, +  /** Not all servers play nice and add content-type headers to responses. */, +  TypedInput inputMissingMimeType = new TypedInput() {, +, +    @Override public String mimeType() {, +      return null;, +    }, +, +    @Override public long length() {, +      return 2;, +    }, +, +    @Override public InputStream in() throws IOException {, +      return new ByteArrayInputStream("{}".getBytes());]