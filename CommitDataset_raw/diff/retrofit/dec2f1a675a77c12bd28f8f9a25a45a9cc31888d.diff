[+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java, +      String name = isFlowable ? "Flowable", +          : isSingle ? "Single", +          : isMaybe ? "Maybe" : "Observable";, +++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java, +      String name = isFlowable ? "Flowable", +          : isSingle ? "Single", +          : isMaybe ? "Maybe" : "Observable";, +++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package retrofit2.adapter.rxjava2;, +, +import com.google.common.reflect.TypeToken;, +import io.reactivex.Completable;, +import io.reactivex.Flowable;, +import io.reactivex.Maybe;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import java.util.List;, +import org.junit.Before;, +import org.junit.Test;, +import retrofit2.CallAdapter;, +import retrofit2.Response;, +import retrofit2.Retrofit;, +import io.reactivex.Observable;, +import io.reactivex.Single;, +import io.reactivex.Flowable;, +import io.reactivex.Maybe;, +import io.reactivex.Completable;, +, +import static org.assertj.core.api.Assertions.assertThat;, +import static org.junit.Assert.fail;, +, +public class RxJava2CallAdapterFactoryTest {, +  private static final Annotation[] NO_ANNOTATIONS = new Annotation[0];, +, +  private final CallAdapter.Factory factory = RxJava2CallAdapterFactory.create();, +  private Retrofit retrofit;, +, +  @Before public void setUp() {, +    retrofit = new Retrofit.Builder(), +        .baseUrl("http://localhost:1"), +        .addConverterFactory(new StringConverterFactory()), +        .addCallAdapterFactory(factory), +        .build();, +  }, +, +  @Test public void nullSchedulerThrows() {, +    try {, +      RxJava2CallAdapterFactory.createWithScheduler(null);, +      fail();, +    } catch (NullPointerException e) {, +      assertThat(e).hasMessage("scheduler == null");, +    }, +  }, +, +  @Test public void nonRxJavaTypeReturnsNull() {, +    CallAdapter<?, ?> adapter = factory.get(String.class, NO_ANNOTATIONS, retrofit);, +    assertThat(adapter).isNull();, +  }, +, +  @Test public void responseTypes() {, +    Type oBodyClass = new TypeToken<Observable<String>>() {}.getType();, +    assertThat(factory.get(oBodyClass, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    Type sBodyClass = new TypeToken<Single<String>>() {}.getType();, +    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();, +    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();, +    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +, +    Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();, +    assertThat(factory.get(oBodyWildcard, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    Type sBodyWildcard = new TypeToken<Single<? extends String>>() {}.getType();, +    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();, +    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType()), +        .isEqualTo(String.class);, +    Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();]