[+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +    if (methodInfo.headers != null) {, +      headers.addAll(methodInfo.headers);, +    }, +, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +    if (methodInfo.headers != null) {, +      headers.addAll(methodInfo.headers);, +    }, +, +++ b/retrofit/src/main/java/retrofit/converter/GsonConverter.java, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +  @Override public TypedOutput toBody(Object object) {, +      return new JsonTypedOutput(gson.toJson(object).getBytes("UTF-8"));, +    JsonTypedOutput(byte[] jsonBytes) {, +    @Override public String fileName() {, +    @Override public String mimeType() {, +      return "application/json; charset=UTF-8";, +    @Override public long length() {, +    @Override public void writeTo(OutputStream out) throws IOException {, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +    if (methodInfo.headers != null) {, +      headers.addAll(methodInfo.headers);, +    }, +, +++ b/retrofit/src/main/java/retrofit/converter/GsonConverter.java, +  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {, +  @Override public TypedOutput toBody(Object object) {, +      return new JsonTypedOutput(gson.toJson(object).getBytes("UTF-8"));, +    JsonTypedOutput(byte[] jsonBytes) {, +    @Override public String fileName() {, +    @Override public String mimeType() {, +      return "application/json; charset=UTF-8";, +    @Override public long length() {, +    @Override public void writeTo(OutputStream out) throws IOException {, +++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +import retrofit.converter.Converter;, +import retrofit.converter.GsonConverter;, +  @Test public void getWithInterceptorPathParam() throws Exception {, +    Request request = new Helper() //, +        .setMethod("GET") //, +        .setUrl("http://example.com") //, +        .setPath("/foo/bar/{ping}/") //, +        .addInterceptorPathParam("ping", "pong") //, +        .build();, +    assertThat(request.getMethod()).isEqualTo("GET");, +    assertThat(request.getHeaders()).isEmpty();, +    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong/");, +    assertThat(request.getBody()).isNull();, +  }, +, +  @Test public void getWithPathParamAndInterceptorPathParam() throws Exception {, +    Request request = new Helper() //, +        .setMethod("GET") //, +        .setUrl("http://example.com") //, +        .setPath("/foo/bar/{ping}/{kit}/") //, +        .addPathParam("ping", "pong") //, +        .addInterceptorPathParam("kit", "kat"), +        .build();, +    assertThat(request.getMethod()).isEqualTo("GET");, +    assertThat(request.getHeaders()).isEmpty();, +    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong/kat/");, +    assertThat(request.getBody()).isNull();, +  }, +, +  @Test public void simpleInterceptorHeaders() throws Exception {, +    Request request = new Helper() //, +        .setMethod("GET") //, +        .setUrl("http://example.com") //, +        .setPath("/foo/bar/") //, +        .addInterceptorHeader("ping", "pong") //, +        .addInterceptorHeader("kit", "kat") //, +        .build();, +    assertThat(request.getMethod()).isEqualTo("GET");, +    assertThat(request.getHeaders()) //, +        .containsExactly(new Header("ping", "pong"), new Header("kit", "kat"));, +    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");, +    assertThat(request.getBody()).isNull();, +  }, +, +  @Test public void headersAndInterceptorHeaders() throws Exception {, +    Request request = new Helper() //, +        .setMethod("GET") //, +        .setUrl("http://example.com") //, +        .setPath("/foo/bar/") //, +        .addHeader("ping", "pong") //, +        .addInterceptorHeader("kit", "kat") //, +        .build();, +    assertThat(request.getMethod()).isEqualTo("GET");, +    assertThat(request.getHeaders()) //, +        .containsExactly(new Header("ping", "pong"), new Header("kit", "kat"));, +    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");, +    assertThat(request.getBody()).isNull();, +  }, +, +  @Test public void allThreeHeaderTypes() throws Exception {, +    Request request = new Helper() //, +        .setMethod("GET") //]