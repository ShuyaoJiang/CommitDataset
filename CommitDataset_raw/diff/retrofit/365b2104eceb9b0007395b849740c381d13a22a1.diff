[+++ b/retrofit/src/main/java/retrofit/RequestAction.java, +  final RequestAction<Iterable<T>> iterable() {, +    return new RequestAction<Iterable<T>>() {, +      @Override void perform(RequestBuilder builder, Iterable<T> values) {, +        if (values == null) return; // Skip null values., +, +        for (T value : values) {, +          RequestAction.this.perform(builder, value);, +        }, +      }, +    };, +  }, +, +  final RequestAction<Object> array() {, +    return new RequestAction<Object>() {, +      @Override void perform(RequestBuilder builder, Object values) {, +        if (values == null) return; // Skip null values., +, +        for (int i = 0, size = Array.getLength(values); i < size; i++) {, +          //noinspection unchecked, +          RequestAction.this.perform(builder, (T) Array.get(values, i));, +        }, +      }, +    };, +  }, +, +++ b/retrofit/src/main/java/retrofit/RequestAction.java, +  final RequestAction<Iterable<T>> iterable() {, +    return new RequestAction<Iterable<T>>() {, +      @Override void perform(RequestBuilder builder, Iterable<T> values) {, +        if (values == null) return; // Skip null values., +, +        for (T value : values) {, +          RequestAction.this.perform(builder, value);, +        }, +      }, +    };, +  }, +, +  final RequestAction<Object> array() {, +    return new RequestAction<Object>() {, +      @Override void perform(RequestBuilder builder, Object values) {, +        if (values == null) return; // Skip null values., +, +        for (int i = 0, size = Array.getLength(values); i < size; i++) {, +          //noinspection unchecked, +          RequestAction.this.perform(builder, (T) Array.get(values, i));, +        }, +      }, +    };, +  }, +, +++ b/retrofit/src/main/java/retrofit/RequestFactoryParser.java, +, +            RequestAction<?> queryAction = new RequestAction.Query(query.value(), query.encoded());, +            Class<?> rawParameterType = Utils.getRawType(methodParameterType);, +            if (Iterable.class.isAssignableFrom(rawParameterType)) {, +              queryAction = queryAction.iterable();, +            } else if (rawParameterType.isArray()) {, +              queryAction = queryAction.array();, +            }, +, +            action = queryAction;, +, +            Class<?> rawParameterType = Utils.getRawType(methodParameterType);, +            RequestAction<?> headerAction = new RequestAction.Header(header.value());, +            if (Iterable.class.isAssignableFrom(rawParameterType)) {, +              headerAction = headerAction.iterable();, +            } else if (rawParameterType.isArray()) {, +              headerAction = headerAction.array();, +            }, +, +            action = headerAction;, +, +            RequestAction<?> fieldAction = new RequestAction.Field(field.value(), field.encoded());, +            Class<?> rawParameterType = Utils.getRawType(methodParameterType);, +            if (Iterable.class.isAssignableFrom(rawParameterType)) {, +              fieldAction = fieldAction.iterable();, +            } else if (rawParameterType.isArray()) {, +              fieldAction = fieldAction.array();, +            }, +, +            action = fieldAction;]