[+++ b/pom.xml, +    <moshi.version>1.2.0</moshi.version>, +++ b/pom.xml, +    <moshi.version>1.2.0</moshi.version>, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java, +import com.squareup.moshi.JsonQualifier;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.Set;, +import static java.util.Collections.unmodifiableSet;, +, + * <p>, + * Any {@link JsonQualifier @JsonQualifier}-annotated annotations on the parameter will be used, + * when looking up a request body converter and those on the method will be used when looking up a, + * response body converter., +    JsonAdapter<?> adapter = moshi.adapter(type, jsonAnnotations(annotations));, +    JsonAdapter<?> adapter = moshi.adapter(type, jsonAnnotations(parameterAnnotations));, +, +  private static Set<? extends Annotation> jsonAnnotations(Annotation[] annotations) {, +    Set<Annotation> result = null;, +    for (Annotation annotation : annotations) {, +      if (annotation.annotationType().isAnnotationPresent(JsonQualifier.class)) {, +        if (result == null) result = new LinkedHashSet<>();, +        result.add(annotation);, +      }, +    }, +    return result != null ? unmodifiableSet(result) : Collections.<Annotation>emptySet();, +  }, +++ b/pom.xml, +    <moshi.version>1.2.0</moshi.version>, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java, +import com.squareup.moshi.JsonQualifier;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.Set;, +import static java.util.Collections.unmodifiableSet;, +, + * <p>, + * Any {@link JsonQualifier @JsonQualifier}-annotated annotations on the parameter will be used, + * when looking up a request body converter and those on the method will be used when looking up a, + * response body converter., +    JsonAdapter<?> adapter = moshi.adapter(type, jsonAnnotations(annotations));, +    JsonAdapter<?> adapter = moshi.adapter(type, jsonAnnotations(parameterAnnotations));, +, +  private static Set<? extends Annotation> jsonAnnotations(Annotation[] annotations) {, +    Set<Annotation> result = null;, +    for (Annotation annotation : annotations) {, +      if (annotation.annotationType().isAnnotationPresent(JsonQualifier.class)) {, +        if (result == null) result = new LinkedHashSet<>();, +        result.add(annotation);, +      }, +    }, +    return result != null ? unmodifiableSet(result) : Collections.<Annotation>emptySet();, +  }, +++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java, +import com.squareup.moshi.JsonAdapter;, +import com.squareup.moshi.JsonQualifier;, +import java.lang.annotation.Annotation;, +import java.lang.annotation.Retention;, +import java.lang.reflect.Type;, +import java.util.Set;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +  @Retention(RUNTIME), +  @JsonQualifier, +  @interface Qualifier {}, +, +  @Retention(RUNTIME), +  @interface NonQualifer {}, +, +  static class Adapters {, +, +    @ToJson public void write(JsonWriter writer, @Qualifier String value) throws IOException {, +      writer.value("qualified!");, +    }, +, +    @FromJson @Qualifier public String readQualified(JsonReader reader) throws IOException {, +      String string = reader.nextString();, +      if (string.equals("qualified!")) {, +        return "it worked!";, +      }, +      throw new AssertionError("Found: " + string);, +    }, +, +    @POST("/") @Qualifier @NonQualifer //, +    Call<String> annotations(@Body @Qualifier @NonQualifer String body);, +        .add(new JsonAdapter.Factory() {, +          @Override public JsonAdapter<?> create(Type type, Set<? extends Annotation> annotations,, +              Moshi moshi) {, +            for (Annotation annotation : annotations) {, +              if (!annotation.annotationType().isAnnotationPresent(JsonQualifier.class)) {, +                throw new AssertionError("Non-@JsonQualifier annotation: " + annotation);, +              }, +            }, +            return null;, +          }, +        }), +        .add(new Adapters()), +  @Test public void annotations() throws IOException, InterruptedException {, +    server.enqueue(new MockResponse().setBody("\"qualified!\""));, +]