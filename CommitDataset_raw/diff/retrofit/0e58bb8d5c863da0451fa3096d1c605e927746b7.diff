[+++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +    super(message, url, response, null, responseType, Kind.HTTP, null);, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +    super(message, url, response, null, responseType, Kind.HTTP, null);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +      assertThat(e.getKind()).isEqualTo(RetrofitError.Kind.NETWORK);, +    assertThat(error.getKind()).isEqualTo(RetrofitError.Kind.NETWORK);, +      assertThat(e.getKind()).isEqualTo(RetrofitError.Kind.HTTP);, +    assertThat(error.getKind()).isEqualTo(RetrofitError.Kind.HTTP);, +    assertThat(error.getKind()).isEqualTo(RetrofitError.Kind.HTTP);, +    assertThat(error.getKind()).isEqualTo(RetrofitError.Kind.HTTP);, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +    super(message, url, response, null, responseType, Kind.HTTP, null);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +      assertThat(e.getKind()).isEqualTo(RetrofitError.Kind.NETWORK);, +    assertThat(error.getKind()).isEqualTo(RetrofitError.Kind.NETWORK);, +      assertThat(e.getKind()).isEqualTo(RetrofitError.Kind.HTTP);, +    assertThat(error.getKind()).isEqualTo(RetrofitError.Kind.HTTP);, +    assertThat(error.getKind()).isEqualTo(RetrofitError.Kind.HTTP);, +    assertThat(error.getKind()).isEqualTo(RetrofitError.Kind.HTTP);, +++ b/retrofit/src/main/java/retrofit/RetrofitError.java, +    return new RetrofitError(exception.getMessage(), url, null, null, null, Kind.NETWORK,, +        exception);, +    return new RetrofitError(exception.getMessage(), url, response, converter, successType,, +        Kind.CONVERSION, exception);, +    return new RetrofitError(message, url, response, converter, successType, Kind.HTTP, null);, +    return new RetrofitError(exception.getMessage(), url, null, null, null, Kind.UNEXPECTED,, +        exception);, +  }, +, +  /** Identifies the event kind which triggered a {@link RetrofitError}. */, +  public enum Kind {, +    /** An {@link IOException} occurred while communicating to the server. */, +    NETWORK,, +    /** An exception was thrown while (de)serializing a body. */, +    CONVERSION,, +    /** A non-200 HTTP status code was received from the server. */, +    HTTP,, +    /**, +     * An internal error occurred while attempting to execute a request. It is best practice to, +     * re-throw this exception so your application crashes., +     */, +    UNEXPECTED, +  private final Kind kind;, +      Type successType, Kind kind, Throwable exception) {, +    this.kind = kind;, +  /**, +   * Whether or not this error was the result of a network error., +   *, +   * @deprecated Use {@link #getKind() getKind() == Kind.NETWORK}., +   */, +  @Deprecated public boolean isNetworkError() {, +    return kind == Kind.NETWORK;, +  }, +, +  /** The event kind which triggered this error. */, +  public Kind getKind() {, +    return kind;, +   * HTTP response body converted to the type declared by either the interface method return type, +   * or the generic type of the supplied {@link Callback} parameter. {@code null} if there is no, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +    super(message, url, response, null, responseType, Kind.HTTP, null);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +      assertThat(e.getKind()).isEqualTo(RetrofitError.Kind.NETWORK);, +    assertThat(error.getKind()).isEqualTo(RetrofitError.Kind.NETWORK);, +      assertThat(e.getKind()).isEqualTo(RetrofitError.Kind.HTTP);, +    assertThat(error.getKind()).isEqualTo(RetrofitError.Kind.HTTP);, +    assertThat(error.getKind()).isEqualTo(RetrofitError.Kind.HTTP);, +    assertThat(error.getKind()).isEqualTo(RetrofitError.Kind.HTTP);, +++ b/retrofit/src/main/java/retrofit/RetrofitError.java, +    return new RetrofitError(exception.getMessage(), url, null, null, null, Kind.NETWORK,, +        exception);, +    return new RetrofitError(exception.getMessage(), url, response, converter, successType,, +        Kind.CONVERSION, exception);, +    return new RetrofitError(message, url, response, converter, successType, Kind.HTTP, null);, +    return new RetrofitError(exception.getMessage(), url, null, null, null, Kind.UNEXPECTED,, +        exception);, +  }, +, +  /** Identifies the event kind which triggered a {@link RetrofitError}. */, +  public enum Kind {, +    /** An {@link IOException} occurred while communicating to the server. */, +    NETWORK,, +    /** An exception was thrown while (de)serializing a body. */, +    CONVERSION,, +    /** A non-200 HTTP status code was received from the server. */, +    HTTP,, +    /**, +     * An internal error occurred while attempting to execute a request. It is best practice to, +     * re-throw this exception so your application crashes., +     */, +    UNEXPECTED, +  private final Kind kind;, +      Type successType, Kind kind, Throwable exception) {, +    this.kind = kind;, +  /**, +   * Whether or not this error was the result of a network error., +   *, +   * @deprecated Use {@link #getKind() getKind() == Kind.NETWORK}., +   */]