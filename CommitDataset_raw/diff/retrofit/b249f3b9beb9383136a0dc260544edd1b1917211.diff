[+++ b/retrofit/src/main/java/retrofit/MethodInfo.java, +import com.squareup.okhttp.MediaType;, +  private final Method method;, +  private final CallAdapter.Factory adapterFactory;, +  private final Converter.Factory converterFactory;, +  MediaType mediaType;, +  RequestBuilderAction[] requestBuilderActions;, +  private Set<String> requestUrlParamNames;, +        mediaType = MediaType.parse(headerValue);, +      boolean isStreaming = method.isAnnotationPresent(Streaming.class);, +   * Loads {@link #requestBuilderActions}. Must be called after {@link #parseMethodAnnotations()}., +    int count = methodParameterAnnotationArrays.length;, +    RequestBuilderAction[] requestBuilderActions = new RequestBuilderAction[count];, +          if (requestBuilderActions[i] != null) {, +            throw parameterError(i, "Multiple Retrofit annotations found, only one allowed.");, +          }, +          if (methodParameterAnnotation instanceof Path) {, +            Path path = (Path) methodParameterAnnotation;, +            String name = path.value();, +            requestBuilderActions[i] = new RequestBuilderAction.Path(name, path.encoded());, +, +          } else if (methodParameterAnnotation instanceof Query) {, +            Query query = (Query) methodParameterAnnotation;, +            requestBuilderActions[i] =, +                new RequestBuilderAction.Query(query.value(), query.encoded());, +, +          } else if (methodParameterAnnotation instanceof QueryMap) {, +            QueryMap queryMap = (QueryMap) methodParameterAnnotation;, +            requestBuilderActions[i] = new RequestBuilderAction.QueryMap(queryMap.encoded());, +, +          } else if (methodParameterAnnotation instanceof Header) {, +            Header header = (Header) methodParameterAnnotation;, +            requestBuilderActions[i] = new RequestBuilderAction.Header(header.value());, +, +          } else if (methodParameterAnnotation instanceof Field) {, +            Field field = (Field) methodParameterAnnotation;, +            requestBuilderActions[i] =, +                new RequestBuilderAction.Field(field.value(), field.encoded());, +, +          } else if (methodParameterAnnotation instanceof FieldMap) {, +            FieldMap fieldMap = (FieldMap) methodParameterAnnotation;, +            requestBuilderActions[i] = new RequestBuilderAction.FieldMap(fieldMap.encoded());, +, +          } else if (methodParameterAnnotation instanceof Part) {, +            Part part = (Part) methodParameterAnnotation;, +            com.squareup.okhttp.Headers headers = com.squareup.okhttp.Headers.of(, +                "Content-Disposition", "name=\"" + part.value() + "\"",, +                "Content-Transfer-Encoding", part.encoding());, +            Converter<?> converter;, +            if (methodParameterType == RequestBody.class) {, +              converter = new OkHttpRequestBodyConverter();, +            } else {, +              if (converterFactory == null) {, +              converter = converterFactory.get(methodParameterType);, +            }, +            requestBuilderActions[i] = new RequestBuilderAction.Part<>(headers, converter);, +, +          } else if (methodParameterAnnotation instanceof PartMap) {, +            PartMap partMap = (PartMap) methodParameterAnnotation;, +            requestBuilderActions[i] =, +                new RequestBuilderAction.PartMap(converterFactory, partMap.encoding());, +, +          } else if (methodParameterAnnotation instanceof Body) {, +, +            Converter<?> converter;, +            if (methodParameterType == RequestBody.class) {, +              converter = new OkHttpRequestBodyConverter();, +            } else {, +              if (converterFactory == null) {, +              converter = converterFactory.get(methodParameterType);, +            }, +            requestBuilderActions[i] = new RequestBuilderAction.Body<>(converter);, +      if (requestBuilderActions[i] == null) {, +      throw methodError("Non-body HTTP method cannot contain @Body.");, +    this.requestBuilderActions = requestBuilderActions;, +++ b/retrofit/src/main/java/retrofit/MethodInfo.java, +import com.squareup.okhttp.MediaType;, +  private final Method method;, +  private final CallAdapter.Factory adapterFactory;, +  private final Converter.Factory converterFactory;, +  MediaType mediaType;, +  RequestBuilderAction[] requestBuilderActions;, +  private Set<String> requestUrlParamNames;, +        mediaType = MediaType.parse(headerValue);, +      boolean isStreaming = method.isAnnotationPresent(Streaming.class);, +   * Loads {@link #requestBuilderActions}. Must be called after {@link #parseMethodAnnotations()}., +    int count = methodParameterAnnotationArrays.length;, +    RequestBuilderAction[] requestBuilderActions = new RequestBuilderAction[count];, +          if (requestBuilderActions[i] != null) {, +            throw parameterError(i, "Multiple Retrofit annotations found, only one allowed.");, +          }, +          if (methodParameterAnnotation instanceof Path) {, +            Path path = (Path) methodParameterAnnotation;, +            String name = path.value();, +            requestBuilderActions[i] = new RequestBuilderAction.Path(name, path.encoded());, +, +          } else if (methodParameterAnnotation instanceof Query) {, +            Query query = (Query) methodParameterAnnotation;, +            requestBuilderActions[i] =, +                new RequestBuilderAction.Query(query.value(), query.encoded());]