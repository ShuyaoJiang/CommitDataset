[+++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +  public static final String ENCODING = "UTF-8"; // TODO use actual encoding, +      return MimeType.JSON;, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +  public static final String ENCODING = "UTF-8"; // TODO use actual encoding, +      return MimeType.JSON;, +++ b/retrofit/src/main/java/retrofit/http/HttpMethodType.java, +          final TypedBytesEntity entity = new TypedBytesEntity(builder.getSingleEntity());, +          request.addHeader(HTTP.CONTENT_TYPE, entity.getMimeType().mimeName());, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +  public static final String ENCODING = "UTF-8"; // TODO use actual encoding, +      return MimeType.JSON;, +++ b/retrofit/src/main/java/retrofit/http/HttpMethodType.java, +          final TypedBytesEntity entity = new TypedBytesEntity(builder.getSingleEntity());, +          request.addHeader(HTTP.CONTENT_TYPE, entity.getMimeType().mimeName());, +++ b/retrofit/src/main/java/retrofit/http/TypedBytesBody.java, +/** Adapts ContentBody to TypedBytes. */, +public class TypedBytesBody extends AbstractContentBody {, +    this.name = baseName + "." + typedBytes.mimeType().extension();, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +  public static final String ENCODING = "UTF-8"; // TODO use actual encoding, +      return MimeType.JSON;, +++ b/retrofit/src/main/java/retrofit/http/HttpMethodType.java, +          final TypedBytesEntity entity = new TypedBytesEntity(builder.getSingleEntity());, +          request.addHeader(HTTP.CONTENT_TYPE, entity.getMimeType().mimeName());, +++ b/retrofit/src/main/java/retrofit/http/TypedBytesBody.java, +/** Adapts ContentBody to TypedBytes. */, +public class TypedBytesBody extends AbstractContentBody {, +    this.name = baseName + "." + typedBytes.mimeType().extension();, +++ b/retrofit/src/main/java/retrofit/http/TypedBytesEntity.java, +import retrofit.io.MimeType;, +public class TypedBytesEntity extends AbstractHttpEntity {, +  private TypedBytes typedBytes;, +, +  public MimeType getMimeType() {, +    return typedBytes.mimeType();, +  }, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +  public static final String ENCODING = "UTF-8"; // TODO use actual encoding, +      return MimeType.JSON;, +++ b/retrofit/src/main/java/retrofit/http/HttpMethodType.java, +          final TypedBytesEntity entity = new TypedBytesEntity(builder.getSingleEntity());, +          request.addHeader(HTTP.CONTENT_TYPE, entity.getMimeType().mimeName());, +++ b/retrofit/src/main/java/retrofit/http/TypedBytesBody.java, +/** Adapts ContentBody to TypedBytes. */, +public class TypedBytesBody extends AbstractContentBody {, +    this.name = baseName + "." + typedBytes.mimeType().extension();, +++ b/retrofit/src/main/java/retrofit/http/TypedBytesEntity.java, +import retrofit.io.MimeType;, +public class TypedBytesEntity extends AbstractHttpEntity {, +  private TypedBytes typedBytes;, +, +  public MimeType getMimeType() {, +    return typedBytes.mimeType();, +  }, +++ b/retrofit/src/main/java/retrofit/io/MimeType.java, +public enum MimeType {, +, +  JSON("application/json", "json"),, +  GIF("image/gif", "gif"),, +  PNG("image/png", "png"),, +  JPEG("image/jpeg", "jpg");, +, +  MimeType(String typeName, String extension) {, +  /**, +   * Returns the standard type name., +   */, +  /**, +   * Returns the standard file extension., +   */, +++ b/retrofit/src/main/java/retrofit/http/GsonConverter.java, +  public static final String ENCODING = "UTF-8"; // TODO use actual encoding, +      return MimeType.JSON;, +++ b/retrofit/src/main/java/retrofit/http/HttpMethodType.java, +          final TypedBytesEntity entity = new TypedBytesEntity(builder.getSingleEntity());, +          request.addHeader(HTTP.CONTENT_TYPE, entity.getMimeType().mimeName());, +++ b/retrofit/src/main/java/retrofit/http/TypedBytesBody.java, +/** Adapts ContentBody to TypedBytes. */, +public class TypedBytesBody extends AbstractContentBody {, +    this.name = baseName + "." + typedBytes.mimeType().extension();, +++ b/retrofit/src/main/java/retrofit/http/TypedBytesEntity.java, +import retrofit.io.MimeType;, +public class TypedBytesEntity extends AbstractHttpEntity {, +  private TypedBytes typedBytes;, +, +  public MimeType getMimeType() {, +    return typedBytes.mimeType();, +  }, +++ b/retrofit/src/main/java/retrofit/io/MimeType.java, +public enum MimeType {, +, +  JSON("application/json", "json"),, +  GIF("image/gif", "gif"),, +  PNG("image/png", "png"),, +  JPEG("image/jpeg", "jpg");, +, +  MimeType(String typeName, String extension) {, +  /**, +   * Returns the standard type name., +   */]