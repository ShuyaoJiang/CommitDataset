[+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +   * Inspects the annotations on an interface method to construct a reusable service method that, +   * speaks HTTP. This requires potentially-expensive reflection so it is best to build each service, +   * method only once and reuse it., +  static <ResponseT, ReturnT> HttpServiceMethod<ResponseT, ReturnT> parseAnnotations(, +      Retrofit retrofit, Method method, RequestFactory requestFactory) {, +    CallAdapter<ResponseT, ReturnT> callAdapter = createCallAdapter(retrofit, method);, +    Type responseType = callAdapter.responseType();, +    Converter<ResponseBody, ResponseT> responseConverter =, +        createResponseConverter(retrofit, method, responseType);, +, +    okhttp3.Call.Factory callFactory = retrofit.callFactory;, +    return new HttpServiceMethod<>(requestFactory, callFactory, callAdapter, responseConverter);, +  private static <ResponseT, ReturnT> CallAdapter<ResponseT, ReturnT> createCallAdapter(, +      Retrofit retrofit, Method method) {, +  private static <ResponseT> Converter<ResponseBody, ResponseT> createResponseConverter(, +      Retrofit retrofit, Method method, Type responseType) {, +, +  private final RequestFactory requestFactory;, +  private final okhttp3.Call.Factory callFactory;, +  private final CallAdapter<ResponseT, ReturnT> callAdapter;, +  private final Converter<ResponseBody, ResponseT> responseConverter;, +, +  private HttpServiceMethod(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,, +      CallAdapter<ResponseT, ReturnT> callAdapter,, +      Converter<ResponseBody, ResponseT> responseConverter) {, +    this.requestFactory = requestFactory;, +    this.callFactory = callFactory;, +    this.callAdapter = callAdapter;, +    this.responseConverter = responseConverter;, +  }, +, +  @Override ReturnT invoke(@Nullable Object[] args) {, +    return callAdapter.adapt(, +        new OkHttpCall<>(requestFactory, args, callFactory, responseConverter));, +++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java, +   * Inspects the annotations on an interface method to construct a reusable service method that, +   * speaks HTTP. This requires potentially-expensive reflection so it is best to build each service, +   * method only once and reuse it., +  static <ResponseT, ReturnT> HttpServiceMethod<ResponseT, ReturnT> parseAnnotations(, +      Retrofit retrofit, Method method, RequestFactory requestFactory) {, +    CallAdapter<ResponseT, ReturnT> callAdapter = createCallAdapter(retrofit, method);, +    Type responseType = callAdapter.responseType();, +    Converter<ResponseBody, ResponseT> responseConverter =, +        createResponseConverter(retrofit, method, responseType);, +, +    okhttp3.Call.Factory callFactory = retrofit.callFactory;, +    return new HttpServiceMethod<>(requestFactory, callFactory, callAdapter, responseConverter);, +  private static <ResponseT, ReturnT> CallAdapter<ResponseT, ReturnT> createCallAdapter(, +      Retrofit retrofit, Method method) {, +  private static <ResponseT> Converter<ResponseBody, ResponseT> createResponseConverter(, +      Retrofit retrofit, Method method, Type responseType) {, +, +  private final RequestFactory requestFactory;, +  private final okhttp3.Call.Factory callFactory;, +  private final CallAdapter<ResponseT, ReturnT> callAdapter;, +  private final Converter<ResponseBody, ResponseT> responseConverter;, +, +  private HttpServiceMethod(RequestFactory requestFactory, okhttp3.Call.Factory callFactory,, +      CallAdapter<ResponseT, ReturnT> callAdapter,, +      Converter<ResponseBody, ResponseT> responseConverter) {, +    this.requestFactory = requestFactory;, +    this.callFactory = callFactory;, +    this.callAdapter = callAdapter;, +    this.responseConverter = responseConverter;, +  }, +, +  @Override ReturnT invoke(@Nullable Object[] args) {, +    return callAdapter.adapt(, +        new OkHttpCall<>(requestFactory, args, callFactory, responseConverter));, +++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java, +    RequestFactory requestFactory = RequestFactory.parseAnnotations(retrofit, method);, +, +    return HttpServiceMethod.parseAnnotations(retrofit, method, requestFactory);]