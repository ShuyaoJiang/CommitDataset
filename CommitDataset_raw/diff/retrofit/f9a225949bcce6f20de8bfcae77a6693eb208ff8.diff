[+++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, +        retrofit.responseBodyConverter(innerType, annotations);, +++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, +        retrofit.responseBodyConverter(innerType, annotations);, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import javax.annotation.Nullable;, +import okhttp3.ResponseBody;, +import retrofit2.Converter;, +, +  @Test public void delegates() throws IOException {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(new Converter.Factory() {, +          @Nullable @Override public Converter<ResponseBody, ?> responseBodyConverter(Type type,, +              Annotation[] annotations, Retrofit retrofit) {, +            if (getRawType(type) != Object.class) {, +              return null;, +            }, +            return new Converter<ResponseBody, Object>() {, +              @Override public Object convert(ResponseBody value) {, +                return null;, +              }, +            };, +          }, +        }), +        .addConverterFactory(GuavaOptionalConverterFactory.create()), +        .build();, +, +    server.enqueue(new MockResponse());, +, +    Service service = retrofit.create(Service.class);, +    Optional<Object> optional = service.optional().execute().body();, +    assertThat(optional).isNotNull();, +    assertThat(optional.isPresent()).isFalse();, +  }, +++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, +        retrofit.responseBodyConverter(innerType, annotations);, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import javax.annotation.Nullable;, +import okhttp3.ResponseBody;, +import retrofit2.Converter;, +, +  @Test public void delegates() throws IOException {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(new Converter.Factory() {, +          @Nullable @Override public Converter<ResponseBody, ?> responseBodyConverter(Type type,, +              Annotation[] annotations, Retrofit retrofit) {, +            if (getRawType(type) != Object.class) {, +              return null;, +            }, +            return new Converter<ResponseBody, Object>() {, +              @Override public Object convert(ResponseBody value) {, +                return null;, +              }, +            };, +          }, +        }), +        .addConverterFactory(GuavaOptionalConverterFactory.create()), +        .build();, +, +    server.enqueue(new MockResponse());, +, +    Service service = retrofit.create(Service.class);, +    Optional<Object> optional = service.optional().execute().body();, +    assertThat(optional).isNotNull();, +    assertThat(optional.isPresent()).isFalse();, +  }, +++ b/retrofit-converters/java8/src/main/java/retrofit/converter/java8/Java8OptionalConverterFactory.java, +        retrofit.responseBodyConverter(innerType, annotations);, +++ b/retrofit-converters/guava/src/main/java/retrofit/converter/guava/GuavaOptionalConverterFactory.java, +        retrofit.responseBodyConverter(innerType, annotations);, +++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Type;, +import javax.annotation.Nullable;, +import okhttp3.ResponseBody;, +import retrofit2.Converter;, +, +  @Test public void delegates() throws IOException {, +    Retrofit retrofit = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(new Converter.Factory() {, +          @Nullable @Override public Converter<ResponseBody, ?> responseBodyConverter(Type type,, +              Annotation[] annotations, Retrofit retrofit) {, +            if (getRawType(type) != Object.class) {, +              return null;, +            }, +            return new Converter<ResponseBody, Object>() {, +              @Override public Object convert(ResponseBody value) {, +                return null;, +              }, +            };, +          }, +        }), +        .addConverterFactory(GuavaOptionalConverterFactory.create())]