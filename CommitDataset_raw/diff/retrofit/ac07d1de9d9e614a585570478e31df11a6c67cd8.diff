[+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +          if (value instanceof Iterable) {, +            for (Object iterableValue : (Iterable<?>) value) {, +              if (iterableValue != null) { // Skip null values., +                addHeader(name, iterableValue.toString());, +              }, +            }, +          } else if (value.getClass().isArray()) {, +            for (int x = 0, arrayLength = Array.getLength(value); x < arrayLength; x++) {, +              Object arrayValue = Array.get(value, x);, +              if (arrayValue != null) { // Skip null values., +                addHeader(name, arrayValue.toString());, +              }, +            }, +          } else {, +        }, +          String name = ((Field) annotation).value();, +          String name = ((Part) annotation).value();, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +          if (value instanceof Iterable) {, +            for (Object iterableValue : (Iterable<?>) value) {, +              if (iterableValue != null) { // Skip null values., +                addHeader(name, iterableValue.toString());, +              }, +            }, +          } else if (value.getClass().isArray()) {, +            for (int x = 0, arrayLength = Array.getLength(value); x < arrayLength; x++) {, +              Object arrayValue = Array.get(value, x);, +              if (arrayValue != null) { // Skip null values., +                addHeader(name, arrayValue.toString());, +              }, +            }, +          } else {, +        }, +          String name = ((Field) annotation).value();, +          String name = ((Part) annotation).value();, +++ b/retrofit/src/main/java/retrofit/http/Header.java, + * Header parameters may be {@code null} which will omit them from the request. Passing a, + * {@link java.util.List List} or array will result in a header for each non-{@code null} item., +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +          if (value instanceof Iterable) {, +            for (Object iterableValue : (Iterable<?>) value) {, +              if (iterableValue != null) { // Skip null values., +                addHeader(name, iterableValue.toString());, +              }, +            }, +          } else if (value.getClass().isArray()) {, +            for (int x = 0, arrayLength = Array.getLength(value); x < arrayLength; x++) {, +              Object arrayValue = Array.get(value, x);, +              if (arrayValue != null) { // Skip null values., +                addHeader(name, arrayValue.toString());, +              }, +            }, +          } else {, +        }, +          String name = ((Field) annotation).value();, +          String name = ((Part) annotation).value();, +++ b/retrofit/src/main/java/retrofit/http/Header.java, + * Header parameters may be {@code null} which will omit them from the request. Passing a, + * {@link java.util.List List} or array will result in a header for each non-{@code null} item., +++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java, +  @Test public void headerParamList() {, +    class Example {, +      @GET("/foo/bar/") //, +      Response method(@retrofit.http.Header("foo") List<String> kit) {, +        return null;, +      }, +    }, +    Request request = buildRequest(Example.class, Arrays.asList("bar", null, "baz"));, +    assertThat(request.getMethod()).isEqualTo("GET");, +    assertThat(request.getHeaders()) //, +        .containsExactly(new Header("foo", "bar"), new Header("foo", "baz"));, +    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");, +    assertThat(request.getBody()).isNull();, +  }, +, +  @Test public void headerParamArray() {, +    class Example {, +      @GET("/foo/bar/") //, +      Response method(@retrofit.http.Header("foo") String[] kit) {, +        return null;, +      }, +    }, +    Request request = buildRequest(Example.class, (Object) new String[] { "bar", null, "baz" });, +    assertThat(request.getMethod()).isEqualTo("GET");, +    assertThat(request.getHeaders()) //, +        .containsExactly(new Header("foo", "bar"), new Header("foo", "baz"));, +    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");, +    assertThat(request.getBody()).isNull();, +  }, +]