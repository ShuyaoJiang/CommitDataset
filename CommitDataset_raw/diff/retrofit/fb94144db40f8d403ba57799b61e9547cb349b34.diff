[+++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java, +    return new MoshiConverterFactory(moshi, false);, +  private final boolean lenient;, +  private MoshiConverterFactory(Moshi moshi, boolean lenient) {, +    this.lenient = lenient;, +  }, +, +  /** Return a new factory which uses {@linkplain JsonAdapter#lenient() lenient} adapters. */, +  public MoshiConverterFactory asLenient() {, +    return new MoshiConverterFactory(moshi, true);, +    if (lenient) {, +      adapter = adapter.lenient();, +    }, +    if (lenient) {, +      adapter = adapter.lenient();, +    }, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java, +    return new MoshiConverterFactory(moshi, false);, +  private final boolean lenient;, +  private MoshiConverterFactory(Moshi moshi, boolean lenient) {, +    this.lenient = lenient;, +  }, +, +  /** Return a new factory which uses {@linkplain JsonAdapter#lenient() lenient} adapters. */, +  public MoshiConverterFactory asLenient() {, +    return new MoshiConverterFactory(moshi, true);, +    if (lenient) {, +      adapter = adapter.lenient();, +    }, +    if (lenient) {, +      adapter = adapter.lenient();, +    }, +++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +  private Service serviceLenient;, +    MoshiConverterFactory factory = MoshiConverterFactory.create(moshi);, +    MoshiConverterFactory factoryLenient = factory.asLenient();, +        .addConverterFactory(factory), +        .build();, +    Retrofit retrofitLenient = new Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .addConverterFactory(factoryLenient), +    serviceLenient = retrofitLenient.create(Service.class);, +, +  @Test public void asLenient() throws IOException, InterruptedException {, +    MockResponse malformedResponse = new MockResponse().setBody("{\"theName\":value}");, +    server.enqueue(malformedResponse);, +    server.enqueue(malformedResponse);, +, +    Call<AnImplementation> call = service.anImplementation(new AnImplementation("value"));, +    try {, +      call.execute();, +      fail();, +    } catch (IOException e) {, +      assertEquals(e.getMessage(),, +          "Use JsonReader.setLenient(true) to accept malformed JSON at path $.theName");, +    }, +, +    Call<AnImplementation> call2 = serviceLenient.anImplementation(new AnImplementation("value"));, +    Response<AnImplementation> response = call2.execute();, +    AnImplementation body = response.body();, +    assertThat(body.theName).isEqualTo("value");, +  }]