[+++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +    super(message, url, response, null, body.getClass(), false, null);, +++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +    super(message, url, response, null, body.getClass(), false, null);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +    @GET("/") void doStuff(Callback<String> cb);, +    @GET("/") Observable<String> doStuff();, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String o, Response response) {, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hi");, +, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String result, Response response) {, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hello");, +, +      @Override public Observable<String> doStuff() {, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hello");, +, +      @Override public String doStuff() {, +      assertThat(e.getSuccessType()).isEqualTo(String.class);, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Greetings");, +, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String o, Response response) {, +    assertThat(error.getSuccessType()).isEqualTo(String.class);, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hi");, +, +      @Override public Observable<String> doStuff() {, +    assertThat(error.getSuccessType()).isEqualTo(String.class);, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String o, Response response) {, +      @Override public Observable<String> doStuff() {, +++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +    super(message, url, response, null, body.getClass(), false, null);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +    @GET("/") void doStuff(Callback<String> cb);, +    @GET("/") Observable<String> doStuff();, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String o, Response response) {, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hi");, +, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String result, Response response) {, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hello");, +, +      @Override public Observable<String> doStuff() {, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hello");, +, +      @Override public String doStuff() {, +      assertThat(e.getSuccessType()).isEqualTo(String.class);, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Greetings");, +, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String o, Response response) {, +    assertThat(error.getSuccessType()).isEqualTo(String.class);, +    @SuppressWarnings("RedundantStringConstructorCall") // Allocated on-heap., +    final String expected = new String("Hi");, +, +      @Override public Observable<String> doStuff() {, +    assertThat(error.getSuccessType()).isEqualTo(String.class);, +      @Override public void doStuff(Callback<String> cb) {, +    mockService.doStuff(new Callback<String>() {, +      @Override public void success(String o, Response response) {, +      @Override public Observable<String> doStuff() {, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +            if (methodInfo.isSynchronous) {, +              return null;, +            }, +++ b/pom.xml, +    <rxjava.version>0.18.3</rxjava.version>, +++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java, +    super(message, url, response, null, body.getClass(), false, null);, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +    @GET("/") void doStuff(Callback<String> cb);, +    @GET("/") Observable<String> doStuff();, +      @Override public void doStuff(Callback<String> cb) {]