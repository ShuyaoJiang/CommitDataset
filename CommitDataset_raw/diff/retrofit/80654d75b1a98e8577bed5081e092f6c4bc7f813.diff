[+++ b/retrofit/src/main/java/retrofit/Platform.java, +  abstract Client defaultClient();, +    @Override Client defaultClient() {, +        return OkClientInstantiator.instantiate();, +      return new UrlConnectionClient();, +    @Override Client defaultClient() {, +        return OkClientInstantiator.instantiate();, +      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.GINGERBREAD) {, +        return new AndroidApacheClient();, +      return new UrlConnectionClient();, +    @Override Client defaultClient() {, +      return new UrlFetchClient();, +++ b/retrofit/src/main/java/retrofit/Platform.java, +  abstract Client defaultClient();, +    @Override Client defaultClient() {, +        return OkClientInstantiator.instantiate();, +      return new UrlConnectionClient();, +    @Override Client defaultClient() {, +        return OkClientInstantiator.instantiate();, +      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.GINGERBREAD) {, +        return new AndroidApacheClient();, +      return new UrlConnectionClient();, +    @Override Client defaultClient() {, +      return new UrlFetchClient();, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +  private final Client client;, +  private RestAdapter(Endpoint server, Client client, Executor httpExecutor,, +    this.client = client;, +        Response response = client.execute(request);, +   * Calling {@link #setEndpoint} is required before calling {@link #build()}. All other methods, +   * are optional., +    private Client client;, +    public Builder setClient(Client client) {, +      this.client = client;, +      return new RestAdapter(endpoint, client, httpExecutor, callbackExecutor,, +      if (client == null) {, +        client = Platform.get().defaultClient();, +++ b/retrofit/src/main/java/retrofit/Platform.java, +  abstract Client defaultClient();, +    @Override Client defaultClient() {, +        return OkClientInstantiator.instantiate();, +      return new UrlConnectionClient();, +    @Override Client defaultClient() {, +        return OkClientInstantiator.instantiate();, +      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.GINGERBREAD) {, +        return new AndroidApacheClient();, +      return new UrlConnectionClient();, +    @Override Client defaultClient() {, +      return new UrlFetchClient();, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +  private final Client client;, +  private RestAdapter(Endpoint server, Client client, Executor httpExecutor,, +    this.client = client;, +        Response response = client.execute(request);, +   * Calling {@link #setEndpoint} is required before calling {@link #build()}. All other methods, +   * are optional., +    private Client client;, +    public Builder setClient(Client client) {, +      this.client = client;, +      return new RestAdapter(endpoint, client, httpExecutor, callbackExecutor,, +      if (client == null) {, +        client = Platform.get().defaultClient();, +++ b/retrofit/src/main/java/retrofit/client/Client.java]