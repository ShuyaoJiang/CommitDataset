[+++ b/retrofit/src/main/java/retrofit/ErrorHandler.java, +package retrofit;, +, +, +/**, + * A hook allowing clients to customize error exceptions for synchronous, + * requests., + *, + * @author Sam Beran sberan@gmail.com, + */, +public interface ErrorHandler {, +  /**, +   * Return a custom exception to be thrown for this RetrofitError instance., +   *, +   * If the exception is checked, any returned exceptions must be declared to be, +   * thrown on the interface method., +   *, +   * @param cause the original RetrofitError exception, +   * @return Throwable an exception which will be thrown from the client interface method, +   */, +  Throwable handleError(RetrofitError cause);, +, +  ErrorHandler DEFAULT = new ErrorHandler() {, +    @Override public Throwable handleError(RetrofitError cause) {, +      return cause;, +    }, +  };, +}, +++ b/retrofit/src/main/java/retrofit/ErrorHandler.java, +package retrofit;, +, +, +/**, + * A hook allowing clients to customize error exceptions for synchronous, + * requests., + *, + * @author Sam Beran sberan@gmail.com, + */, +public interface ErrorHandler {, +  /**, +   * Return a custom exception to be thrown for this RetrofitError instance., +   *, +   * If the exception is checked, any returned exceptions must be declared to be, +   * thrown on the interface method., +   *, +   * @param cause the original RetrofitError exception, +   * @return Throwable an exception which will be thrown from the client interface method, +   */, +  Throwable handleError(RetrofitError cause);, +, +  ErrorHandler DEFAULT = new ErrorHandler() {, +    @Override public Throwable handleError(RetrofitError cause) {, +      return cause;, +    }, +  };, +}, +++ b/retrofit/src/main/java/retrofit/RestAdapter.java, +  private final ErrorHandler errorHandler;, +      Profiler profiler, ErrorHandler errorHandler, Log log, boolean debug) {, +    this.errorHandler = errorHandler;, +        throws Throwable {, +        try {, +        } catch (RetrofitError error) {, +          throw errorHandler.handleError(error);, +        }, +    private ErrorHandler errorHandler;, +    public Builder setErrorHandler(ErrorHandler errorHandler) {, +      if (errorHandler == null) throw new NullPointerException("error handler cannot be null");, +      this.errorHandler = errorHandler;, +      return this;, +    }, +, +          converter, profiler, errorHandler, log, debug);, +      if (errorHandler == null) {, +        errorHandler = ErrorHandler.DEFAULT;, +      }, +++ b/retrofit/src/main/java/retrofit/ErrorHandler.java, +package retrofit;, +, +, +/**, + * A hook allowing clients to customize error exceptions for synchronous, + * requests., + *, + * @author Sam Beran sberan@gmail.com, + */, +public interface ErrorHandler {, +  /**, +   * Return a custom exception to be thrown for this RetrofitError instance., +   *, +   * If the exception is checked, any returned exceptions must be declared to be, +   * thrown on the interface method., +   *, +   * @param cause the original RetrofitError exception, +   * @return Throwable an exception which will be thrown from the client interface method, +   */, +  Throwable handleError(RetrofitError cause);, +, +  ErrorHandler DEFAULT = new ErrorHandler() {, +    @Override public Throwable handleError(RetrofitError cause) {]