[+++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +  private RuntimeException methodError(String message, Object... args) {, +    if (args.length > 0) {, +      message = String.format(message, args);, +    }, +    return new IllegalArgumentException(, +        method.getDeclaringClass().getSimpleName() + "." + method.getName() + ": " + message);, +  }, +, +  private RuntimeException parameterError(int index, String message, Object... args) {, +    return methodError(message + " (parameter #" + (index + 1) + ")", args);, +  }, +, +          throw methodError("Only one HTTP method is allowed. Found: %s and %s.", requestMethod,, +              methodInfo.value());, +          throw new IllegalStateException("Failed to extract path from ", +              + " annotation on method '", +              + "'.", e);, +          throw methodError("@Headers annotation is empty.");, +          throw methodError("Only one encoding annotation is allowed.");, +          throw methodError("Only one encoding annotation is allowed.");, +      throw methodError("HTTP method annotation is required (e.g., @GET, @POST, etc.).");, +        throw methodError(, +            "Multipart can only be specified on HTTP methods with request body (e.g., @POST).");, +        throw methodError("FormUrlEncoded can only be specified on HTTP methods with request body ", +                + "(e.g., @POST).");, +      throw methodError("URL path \"%s\" must start with '/'.", path);, +        throw methodError("URL query string \"%s\" must not have replace block.", query);, +        throw methodError("Header must be in the form \"Name: Value\". Found: \"%s\"", header);, +      throw methodError("Must have return type or Callback as last argument, not both.");, +      throw methodError("Must have either a return type or Callback as last argument.");, +    throw methodError(, +        "Last parameter must be of type Callback<X> or Callback<? super X>. Found: %s.",, +        lastArgType);, +            validatePathName(i, name);, +            validatePathName(i, name);, +              throw parameterError(i, "@QueryMap parameter type must be Map.");, +              throw parameterError(i, "@EncodedQueryMap parameter type must be Map.");, +              throw parameterError(i, "@Header parameter type must be String. Found: %s.",, +                  parameterType.getSimpleName());, +              throw parameterError(i, "@Field parameters can only be used with form encoding.");, +              throw parameterError(i, "@Field parameters can only be used with form encoding.");, +              throw parameterError(i, "@FieldMap parameter type must be Map.");, +              throw parameterError(i, "@Part parameters can only be used with multipart encoding.");, +              throw parameterError(i,, +              throw methodError("Multiple @Body method annotations found.");, +        throw parameterError(i, "No Retrofit annotation found.");, +      throw methodError("Non-body HTTP method cannot contain @Body or @TypedOutput.");, +      throw methodError("Form-encoded method must contain at least one @Field.");, +      throw methodError("Multipart method must contain at least one @Part.");, +  private void validatePathName(int index, String name) {, +      throw parameterError(index, "@Path parameter name must match %s. Found: %s",, +          PARAM_URL_REGEX.pattern(), name);, +      throw parameterError(index, "URL \"%s\" does not contain \"{%s}\".", requestUrl, name);, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +  private RuntimeException methodError(String message, Object... args) {, +    if (args.length > 0) {, +      message = String.format(message, args);, +    }, +    return new IllegalArgumentException(, +        method.getDeclaringClass().getSimpleName() + "." + method.getName() + ": " + message);, +  }, +, +  private RuntimeException parameterError(int index, String message, Object... args) {, +    return methodError(message + " (parameter #" + (index + 1) + ")", args);, +  }, +, +          throw methodError("Only one HTTP method is allowed. Found: %s and %s.", requestMethod,, +              methodInfo.value());, +          throw new IllegalStateException("Failed to extract path from ", +              + " annotation on method '", +              + "'.", e);, +          throw methodError("@Headers annotation is empty.");, +          throw methodError("Only one encoding annotation is allowed.");, +          throw methodError("Only one encoding annotation is allowed.");, +      throw methodError("HTTP method annotation is required (e.g., @GET, @POST, etc.).");, +        throw methodError(, +            "Multipart can only be specified on HTTP methods with request body (e.g., @POST).");, +        throw methodError("FormUrlEncoded can only be specified on HTTP methods with request body ", +                + "(e.g., @POST).");, +      throw methodError("URL path \"%s\" must start with '/'.", path);, +        throw methodError("URL query string \"%s\" must not have replace block.", query);, +        throw methodError("Header must be in the form \"Name: Value\". Found: \"%s\"", header);, +      throw methodError("Must have return type or Callback as last argument, not both.");, +      throw methodError("Must have either a return type or Callback as last argument.");, +    throw methodError(, +        "Last parameter must be of type Callback<X> or Callback<? super X>. Found: %s.",, +        lastArgType);, +            validatePathName(i, name);, +            validatePathName(i, name);, +              throw parameterError(i, "@QueryMap parameter type must be Map.");, +              throw parameterError(i, "@EncodedQueryMap parameter type must be Map.");, +              throw parameterError(i, "@Header parameter type must be String. Found: %s.",, +                  parameterType.getSimpleName());, +              throw parameterError(i, "@Field parameters can only be used with form encoding.");, +              throw parameterError(i, "@Field parameters can only be used with form encoding.");, +              throw parameterError(i, "@FieldMap parameter type must be Map.");, +              throw parameterError(i, "@Part parameters can only be used with multipart encoding.");, +              throw parameterError(i,, +              throw methodError("Multiple @Body method annotations found.");]