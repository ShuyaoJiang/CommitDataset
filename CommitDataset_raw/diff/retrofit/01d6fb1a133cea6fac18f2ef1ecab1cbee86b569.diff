[+++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  private static final String PATH_SEGMENT_ALWAYS_ENCODE_SET = " \"<>^`{}|\\?#";, +    relativeUrl = relativeUrl.replace("{" + name + "}", canonicalizeForPath(value, encoded));, +  private static String canonicalizeForPath(String input, boolean alreadyEncoded) {, +          || PATH_SEGMENT_ALWAYS_ENCODE_SET.indexOf(codePoint) != -1, +          || (!alreadyEncoded && (codePoint == '/' || codePoint == '%'))) {, +        canonicalizeForPath(out, input, i, limit, alreadyEncoded);, +  private static void canonicalizeForPath(Buffer out, String input, int pos, int limit,, +      } else if (codePoint < 0x20 || codePoint >= 0x7f, +          || PATH_SEGMENT_ALWAYS_ENCODE_SET.indexOf(codePoint) != -1, +          || (!alreadyEncoded && (codePoint == '/' || codePoint == '%'))) {, +++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java, +  private static final String PATH_SEGMENT_ALWAYS_ENCODE_SET = " \"<>^`{}|\\?#";, +    relativeUrl = relativeUrl.replace("{" + name + "}", canonicalizeForPath(value, encoded));, +  private static String canonicalizeForPath(String input, boolean alreadyEncoded) {, +          || PATH_SEGMENT_ALWAYS_ENCODE_SET.indexOf(codePoint) != -1, +          || (!alreadyEncoded && (codePoint == '/' || codePoint == '%'))) {, +        canonicalizeForPath(out, input, i, limit, alreadyEncoded);, +  private static void canonicalizeForPath(Buffer out, String input, int pos, int limit,, +      } else if (codePoint < 0x20 || codePoint >= 0x7f, +          || PATH_SEGMENT_ALWAYS_ENCODE_SET.indexOf(codePoint) != -1, +          || (!alreadyEncoded && (codePoint == '/' || codePoint == '%'))) {, +++ b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java, +  @Test public void getWithEncodedPathSegments() {, +    class Example {, +      @GET("/foo/bar/{ping}/") //, +      Call<ResponseBody> method(@Path(value = "ping", encoded = true) String ping) {, +        return null;, +      }, +    }, +    Request request = buildRequest(Example.class, "baz/pong/more");, +    assertThat(request.method()).isEqualTo("GET");, +    assertThat(request.headers().size()).isZero();, +    assertThat(request.url().toString()).isEqualTo("http://example.com/foo/bar/baz/pong/more/");, +    assertThat(request.body()).isNull();, +  }, +, +  @Test public void getWithUnencodedPathSegmentsPreventsRequestSplitting() {, +    class Example {, +      @GET("/foo/bar/{ping}/") //, +      Call<ResponseBody> method(@Path(value = "ping", encoded = false) String ping) {, +        return null;, +      }, +    }, +    Request request = buildRequest(Example.class, "baz/\r\nheader: blue");, +    assertThat(request.method()).isEqualTo("GET");, +    assertThat(request.headers().size()).isZero();, +    assertThat(request.url().toString()).isEqualTo("http://example.com/foo/bar/baz%2F%0D%0Aheader:%20blue/");, +    assertThat(request.body()).isNull();, +  }, +, +  @Test public void getWithEncodedPathStillPreventsRequestSplitting() {, +    class Example {, +      @GET("/foo/bar/{ping}/") //, +      Call<ResponseBody> method(@Path(value = "ping", encoded = true) String ping) {, +        return null;, +      }, +    }, +    Request request = buildRequest(Example.class, "baz/\r\npong");, +    assertThat(request.method()).isEqualTo("GET");, +    assertThat(request.headers().size()).isZero();, +    assertThat(request.url().toString()).isEqualTo("http://example.com/foo/bar/baz/pong/");, +    assertThat(request.body()).isNull();, +  }, +]