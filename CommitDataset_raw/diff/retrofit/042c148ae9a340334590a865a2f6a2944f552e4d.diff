[+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import static retrofit.RestMethodInfo.ParamUsage.QUERY;, +import static retrofit.RestMethodInfo.ParamUsage.QUERY_MAP;, +, +  private void addPathParam(String name, String value, boolean urlEncodeValue) {, +  private void addQueryParam(String name, String value, boolean urlEncodeValue) {, +        case ENCODED_QUERY:, +            boolean urlEncodeValue = paramUsage == QUERY;, +              for (Object iterableValue : (Iterable<?>) value) {, +                if (iterableValue != null) { // Skip null values, +                  addQueryParam(name, iterableValue.toString(), urlEncodeValue);, +                }, +              }, +            } else if (value.getClass().isArray()) {, +              for (Object arrayValue : (Object[]) value) {, +                if (arrayValue != null) { // Skip null values, +                  addQueryParam(name, arrayValue.toString(), urlEncodeValue);, +                }, +              }, +              addQueryParam(name, value.toString(), urlEncodeValue);, +        case QUERY_MAP:, +        case ENCODED_QUERY_MAP:, +            boolean urlEncodeValue = paramUsage == QUERY_MAP;, +            for (Map.Entry<?, ?> entry : ((Map<?, ?>) value).entrySet()) {, +              Object entryValue = entry.getValue();, +              if (entryValue != null) { // Skip null values., +                addQueryParam(entry.getKey().toString(), entryValue.toString(), urlEncodeValue);, +              }, +            }, +              for (Object iterableValue : (Iterable<?>) value) {, +                if (iterableValue != null) { // Skip null values., +                  formBody.addField(name, iterableValue.toString());, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import static retrofit.RestMethodInfo.ParamUsage.QUERY;, +import static retrofit.RestMethodInfo.ParamUsage.QUERY_MAP;, +, +  private void addPathParam(String name, String value, boolean urlEncodeValue) {, +  private void addQueryParam(String name, String value, boolean urlEncodeValue) {, +        case ENCODED_QUERY:, +            boolean urlEncodeValue = paramUsage == QUERY;, +              for (Object iterableValue : (Iterable<?>) value) {, +                if (iterableValue != null) { // Skip null values, +                  addQueryParam(name, iterableValue.toString(), urlEncodeValue);, +                }, +              }, +            } else if (value.getClass().isArray()) {, +              for (Object arrayValue : (Object[]) value) {, +                if (arrayValue != null) { // Skip null values, +                  addQueryParam(name, arrayValue.toString(), urlEncodeValue);, +                }, +              }, +              addQueryParam(name, value.toString(), urlEncodeValue);, +        case QUERY_MAP:, +        case ENCODED_QUERY_MAP:, +            boolean urlEncodeValue = paramUsage == QUERY_MAP;, +            for (Map.Entry<?, ?> entry : ((Map<?, ?>) value).entrySet()) {, +              Object entryValue = entry.getValue();, +              if (entryValue != null) { // Skip null values., +                addQueryParam(entry.getKey().toString(), entryValue.toString(), urlEncodeValue);, +              }, +            }, +              for (Object iterableValue : (Iterable<?>) value) {, +                if (iterableValue != null) { // Skip null values., +                  formBody.addField(name, iterableValue.toString());, +++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java, +import java.util.Map;, +import retrofit.http.EncodedQueryMap;, +import retrofit.http.QueryMap;, +    PATH,, +    ENCODED_PATH,, +    QUERY,, +    ENCODED_QUERY,, +    QUERY_MAP,, +    ENCODED_QUERY_MAP,, +    FIELD,, +    PART,, +    BODY,, +    HEADER, +          } else if (annotationType == QueryMap.class) {, +            if (!parameterType.isInstance(Map.class)) {, +              throw new IllegalStateException("@QueryMap parameter type must be Map.");, +            }, +, +            paramUsage[i] = ParamUsage.QUERY_MAP;, +          } else if (annotationType == EncodedQueryMap.class) {, +            if (!parameterType.isInstance(Map.class)) {, +              throw new IllegalStateException("@EncodedQueryMap parameter type must be Map.");, +            }, +, +            paramUsage[i] = ParamUsage.ENCODED_QUERY;, +++ b/retrofit/src/main/java/retrofit/RequestBuilder.java, +import static retrofit.RestMethodInfo.ParamUsage.QUERY;, +import static retrofit.RestMethodInfo.ParamUsage.QUERY_MAP;, +, +  private void addPathParam(String name, String value, boolean urlEncodeValue) {, +  private void addQueryParam(String name, String value, boolean urlEncodeValue) {, +        case ENCODED_QUERY:, +            boolean urlEncodeValue = paramUsage == QUERY;, +              for (Object iterableValue : (Iterable<?>) value) {, +                if (iterableValue != null) { // Skip null values]