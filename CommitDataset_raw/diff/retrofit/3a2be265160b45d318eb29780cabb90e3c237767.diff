[+++ b/retrofit/src/main/java/retrofit/Response.java, +/** An HTTP response. */, +  /** Create a synthetic successful response with {@code body} as the deserialized body. */, +        .message("OK"), +        .request(new com.squareup.okhttp.Request.Builder().url("http://localhost").build()), +   * Create a successful response from {@code rawResponse} with {@code body} as the deserialized, +   * body., +    if (rawResponse == null) throw new NullPointerException("rawResponse == null");, +    if (!rawResponse.isSuccessful()) {, +      throw new IllegalArgumentException("rawResponse must be successful response");, +    }, +   * Create a synthetic error response with an HTTP status code of {@code code} and {@code body}, +   * as the error body., +    if (code < 400) throw new IllegalArgumentException("code < 400: " + code);, +        .request(new com.squareup.okhttp.Request.Builder().url("http://localhost").build()), +  /** Create an error response from {@code rawResponse} with {@code body} as the error body. */, +    if (body == null) throw new NullPointerException("body == null");, +    if (rawResponse == null) throw new NullPointerException("rawResponse == null");, +    if (rawResponse.isSuccessful()) {, +      throw new IllegalArgumentException("rawResponse should not be successful response");, +    }, +    this.rawResponse = rawResponse;, +  /** HTTP status message or null if unknown. */, +  /** HTTP headers. */, +++ b/retrofit/src/main/java/retrofit/Response.java, +/** An HTTP response. */, +  /** Create a synthetic successful response with {@code body} as the deserialized body. */, +        .message("OK"), +        .request(new com.squareup.okhttp.Request.Builder().url("http://localhost").build()), +   * Create a successful response from {@code rawResponse} with {@code body} as the deserialized, +   * body., +    if (rawResponse == null) throw new NullPointerException("rawResponse == null");, +    if (!rawResponse.isSuccessful()) {, +      throw new IllegalArgumentException("rawResponse must be successful response");, +    }, +   * Create a synthetic error response with an HTTP status code of {@code code} and {@code body}, +   * as the error body., +    if (code < 400) throw new IllegalArgumentException("code < 400: " + code);, +        .request(new com.squareup.okhttp.Request.Builder().url("http://localhost").build()), +  /** Create an error response from {@code rawResponse} with {@code body} as the error body. */, +    if (body == null) throw new NullPointerException("body == null");, +    if (rawResponse == null) throw new NullPointerException("rawResponse == null");, +    if (rawResponse.isSuccessful()) {, +      throw new IllegalArgumentException("rawResponse should not be successful response");, +    }, +    this.rawResponse = rawResponse;, +  /** HTTP status message or null if unknown. */, +  /** HTTP headers. */, +++ b/retrofit/src/test/java/retrofit/ResponseTest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit;, +, +import com.squareup.okhttp.Protocol;, +import com.squareup.okhttp.ResponseBody;, +import org.junit.Test;, +, +import static org.assertj.core.api.Assertions.assertThat;, +import static org.junit.Assert.fail;, +, +public final class ResponseTest {, +  private final com.squareup.okhttp.Response successResponse =, +      new com.squareup.okhttp.Response.Builder() //, +          .code(200), +          .message("OK"), +          .protocol(Protocol.HTTP_1_1), +          .request(new com.squareup.okhttp.Request.Builder().url("http://localhost").build()), +          .build();, +  private final com.squareup.okhttp.Response errorResponse =, +      new com.squareup.okhttp.Response.Builder() //, +          .code(400), +          .message("Broken!"), +          .protocol(Protocol.HTTP_1_1), +          .request(new com.squareup.okhttp.Request.Builder().url("http://localhost").build()), +          .build();, +, +  @Test public void success() {, +    Object body = new Object();, +    Response<Object> response = Response.success(body);, +    assertThat(response.raw()).isNotNull();, +    assertThat(response.code()).isEqualTo(200);, +    assertThat(response.message()).isEqualTo("OK");, +    assertThat(response.headers().size()).isZero();, +    assertThat(response.isSuccess()).isTrue();, +    assertThat(response.body()).isSameAs(body);, +    assertThat(response.errorBody()).isNull();, +  }]