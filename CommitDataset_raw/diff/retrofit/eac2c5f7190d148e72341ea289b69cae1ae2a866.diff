[+++ b/pom.xml, +    <wire.version>1.7.0</wire.version>, +++ b/pom.xml, +    <wire.version>1.7.0</wire.version>, +++ b/retrofit-converters/gson/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +++ b/pom.xml, +    <wire.version>1.7.0</wire.version>, +++ b/retrofit-converters/gson/pom.xml, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterTest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +import com.google.gson.TypeAdapter;, +import com.google.gson.stream.JsonReader;, +import com.google.gson.stream.JsonToken;, +import com.google.gson.stream.JsonWriter;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;, +import org.junit.Rule;, +import retrofit.http.Body;, +import retrofit.http.POST;, +  interface AnInterface {, +  static class AnImplementation implements AnInterface {, +    AnImplementation(String name) {, +  static class AnInterfaceAdapter extends TypeAdapter<AnInterface> {, +    @Override public void write(JsonWriter jsonWriter, AnInterface anInterface) throws IOException {, +      jsonWriter.beginObject();, +      jsonWriter.name("name").value(anInterface.getName());, +      jsonWriter.endObject();, +    }, +, +    @Override public AnInterface read(JsonReader jsonReader) throws IOException {, +      jsonReader.beginObject();, +, +      String name = null;, +      while (jsonReader.peek() != JsonToken.END_OBJECT) {, +        switch (jsonReader.nextName()) {, +          case "name":, +            name = jsonReader.nextString();, +            break;, +        }, +      }, +, +      jsonReader.endObject();, +      return new AnImplementation(name);, +    }, +  }, +, +  interface Service {, +    @POST("/") Call<AnImplementation> anImplementation(@Body AnImplementation impl);, +    @POST("/") Call<AnInterface> anInterface(@Body AnInterface impl);, +  }, +, +  @Rule public final MockWebServerRule server = new MockWebServerRule();, +, +  private Service service;, +, +        .registerTypeAdapter(AnInterface.class, new AnInterfaceAdapter()), +    Converter converter = new GsonConverter(gson);, +    Retrofit retrofit = new Retrofit.Builder(), +        .endpoint(server.getUrl("/").toString()), +        .converter(converter), +        .build();, +    service = retrofit.create(Service.class);, +  @Test public void anInterface() throws IOException, InterruptedException {, +    server.enqueue(new MockResponse().setBody("{\"name\":\"value\"}"));, +, +    Call<AnInterface> call = service.anInterface(new AnImplementation("value"));, +    Response<AnInterface> response = call.execute();, +    AnInterface body = response.body();, +    assertThat(body.getName()).isEqualTo("value");, +, +    RecordedRequest request = server.takeRequest();, +    assertThat(request.getBody().readUtf8()).isEqualTo("{\"name\":\"value\"}");, +    assertThat(request.getHeader("Content-Type")).isEqualTo("application/json; charset=UTF-8");, +  @Test public void anImplementation() throws IOException, InterruptedException {, +    server.enqueue(new MockResponse().setBody("{\"theName\":\"value\"}"));, +    Call<AnImplementation> call = service.anImplementation(new AnImplementation("value"));, +    Response<AnImplementation> response = call.execute();]