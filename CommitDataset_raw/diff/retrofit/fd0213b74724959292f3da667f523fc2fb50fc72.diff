[+++ b/retrofit-converters/moshi/pom.xml, +    <!-- TODO remove this dependency once Moshi or OkHttp ships with 1.9.0 or newer. -->, +    <dependency>, +      <groupId>com.squareup.okio</groupId>, +      <artifactId>okio</artifactId>, +      <version>1.9.0</version>, +    </dependency>, +++ b/retrofit-converters/moshi/pom.xml, +    <!-- TODO remove this dependency once Moshi or OkHttp ships with 1.9.0 or newer. -->, +    <dependency>, +      <groupId>com.squareup.okio</groupId>, +      <artifactId>okio</artifactId>, +      <version>1.9.0</version>, +    </dependency>, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiResponseBodyConverter.java, +import okio.BufferedSource;, +import okio.ByteString;, +  private static final ByteString UTF8_BOM = ByteString.decodeHex("EFBBBF");, +, +    BufferedSource source = value.source();, +      // Moshi has no document-level API so the responsibility of BOM skipping falls to whatever, +      // is delegating to it. Since it's a UTF-8-only library as well we only honor the UTF-8 BOM., +      if (source.rangeEquals(0, UTF8_BOM)) {, +        source.skip(UTF8_BOM.size());, +      }, +      return adapter.fromJson(source);, +++ b/retrofit-converters/moshi/pom.xml, +    <!-- TODO remove this dependency once Moshi or OkHttp ships with 1.9.0 or newer. -->, +    <dependency>, +      <groupId>com.squareup.okio</groupId>, +      <artifactId>okio</artifactId>, +      <version>1.9.0</version>, +    </dependency>, +++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiResponseBodyConverter.java, +import okio.BufferedSource;, +import okio.ByteString;, +  private static final ByteString UTF8_BOM = ByteString.decodeHex("EFBBBF");, +, +    BufferedSource source = value.source();, +      // Moshi has no document-level API so the responsibility of BOM skipping falls to whatever, +      // is delegating to it. Since it's a UTF-8-only library as well we only honor the UTF-8 BOM., +      if (source.rangeEquals(0, UTF8_BOM)) {, +        source.skip(UTF8_BOM.size());, +      }, +      return adapter.fromJson(source);, +++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java, +import java.nio.charset.Charset;, +import okio.Buffer;, +import okio.ByteString;, +, +  @Test public void utf8BomSkipped() throws IOException {, +    Buffer responseBody = new Buffer(), +        .write(ByteString.decodeHex("EFBBBF")), +        .writeUtf8("{\"theName\":\"value\"}");, +    MockResponse malformedResponse = new MockResponse().setBody(responseBody);, +    server.enqueue(malformedResponse);, +, +    Call<AnImplementation> call = service.anImplementation(new AnImplementation("value"));, +    Response<AnImplementation> response = call.execute();, +    AnImplementation body = response.body();, +    assertThat(body.theName).isEqualTo("value");, +  }, +, +  @Test public void nonUtf8BomIsNotSkipped() throws IOException {, +    Buffer responseBody = new Buffer(), +        .write(ByteString.decodeHex("FEFF")), +        .writeString("{\"theName\":\"value\"}", Charset.forName("UTF-16"));, +    MockResponse malformedResponse = new MockResponse().setBody(responseBody);, +    server.enqueue(malformedResponse);, +, +    Call<AnImplementation> call = service.anImplementation(new AnImplementation("value"));, +    try {, +      call.execute();, +      fail();, +    } catch (IOException expected) {, +    }, +  }]