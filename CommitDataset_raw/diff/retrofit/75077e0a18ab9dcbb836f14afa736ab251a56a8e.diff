[+++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterTest.java, +      service.wrongClass();, +      service.wrongType();, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterTest.java, +      service.wrongClass();, +      service.wrongType();, +++ b/retrofit-converters/wire/src/test/java/retrofit/WireConverterTest.java, +      service.wrongClass();, +      service.wrongType();, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterTest.java, +      service.wrongClass();, +      service.wrongType();, +++ b/retrofit-converters/wire/src/test/java/retrofit/WireConverterTest.java, +      service.wrongClass();, +      service.wrongType();, +++ b/retrofit/src/main/java/retrofit/MethodInfo.java, +  Converter<?> responseConverter;, +    parseResponseType();, +  /** Loads {@link #adapter} and {@link #responseConverter}. */, +    this.adapter = adapter;, +, +    if (responseType == ResponseBody.class) {, +      responseConverter = new OkHttpResponseBodyConverter(isStreaming);, +    } else {, +      if (converterFactory == null) {, +      responseConverter = converterFactory.get(responseType);, +    }, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterTest.java, +      service.wrongClass();, +      service.wrongType();, +++ b/retrofit-converters/wire/src/test/java/retrofit/WireConverterTest.java, +      service.wrongClass();, +      service.wrongType();, +++ b/retrofit/src/main/java/retrofit/MethodInfo.java, +  Converter<?> responseConverter;, +    parseResponseType();, +  /** Loads {@link #adapter} and {@link #responseConverter}. */, +    this.adapter = adapter;, +, +    if (responseType == ResponseBody.class) {, +      responseConverter = new OkHttpResponseBodyConverter(isStreaming);, +    } else {, +      if (converterFactory == null) {, +      responseConverter = converterFactory.get(responseType);, +    }, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +  private final Endpoint endpoint;, +  private final Converter<T> responseConverter;, +  OkHttpCall(OkHttpClient client, Endpoint endpoint, Converter<T> responseConverter,, +    this.endpoint = endpoint;, +    this.responseConverter = responseConverter;, +    return new OkHttpCall<>(client, endpoint, responseConverter, methodInfo, args);, +    RequestBuilder requestBuilder = new RequestBuilder(url, methodInfo);, +      T body = responseConverter.fromBody(catchingBody);, +++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterTest.java, +      service.wrongClass();, +      service.wrongType();, +++ b/retrofit-converters/wire/src/test/java/retrofit/WireConverterTest.java, +      service.wrongClass();, +      service.wrongType();, +++ b/retrofit/src/main/java/retrofit/MethodInfo.java, +  Converter<?> responseConverter;, +    parseResponseType();, +  /** Loads {@link #adapter} and {@link #responseConverter}. */, +    this.adapter = adapter;, +, +    if (responseType == ResponseBody.class) {, +      responseConverter = new OkHttpResponseBodyConverter(isStreaming);, +    } else {, +      if (converterFactory == null) {, +      responseConverter = converterFactory.get(responseType);, +    }, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +  private final Endpoint endpoint;, +  private final Converter<T> responseConverter;, +  OkHttpCall(OkHttpClient client, Endpoint endpoint, Converter<T> responseConverter,, +    this.endpoint = endpoint;, +    this.responseConverter = responseConverter;, +    return new OkHttpCall<>(client, endpoint, responseConverter, methodInfo, args);, +    RequestBuilder requestBuilder = new RequestBuilder(url, methodInfo);, +      T body = responseConverter.fromBody(catchingBody);, +++ b/retrofit/src/main/java/retrofit/OkHttpResponseBodyConverter.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit;, +, +import com.squareup.okhttp.RequestBody;]