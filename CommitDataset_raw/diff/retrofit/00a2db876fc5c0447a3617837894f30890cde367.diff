[+++ b/modules/core/src/retrofit/core/MainThread.java, +++ b/modules/core/src/retrofit/core/MainThread.java, +++ b/modules/http/src-tests/retrofit/http/FetcherTest.java, +++ b/modules/core/src/retrofit/core/MainThread.java, +++ b/modules/http/src-tests/retrofit/http/FetcherTest.java, +++ b/modules/http/src/retrofit/http/HttpMethod.java, +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Type of HTTP request to make., + *, + * @author Rob Dickerson (rdickerson@squareup.com), + */, +@Target({ METHOD }), +@Retention(RUNTIME), +public @interface HttpMethod {, +  enum Type {GET, POST}, +  Type value();, +}, +++ b/modules/core/src/retrofit/core/MainThread.java, +++ b/modules/http/src-tests/retrofit/http/FetcherTest.java, +++ b/modules/http/src/retrofit/http/HttpMethod.java, +package retrofit.http;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.METHOD;, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +, +/**, + * Type of HTTP request to make., + *, + * @author Rob Dickerson (rdickerson@squareup.com), + */, +@Target({ METHOD }), +@Retention(RUNTIME), +public @interface HttpMethod {, +  enum Type {GET, POST}, +  Type value();, +}, +++ b/modules/http/src/retrofit/http/RestAdapter.java, +import com.google.inject.Binder;, +import com.google.inject.Inject;, +import com.google.inject.Module;, +import com.google.inject.Provider;, +import com.google.inject.Singleton;, +import org.apache.http.NameValuePair;, +import org.apache.http.client.methods.HttpGet;, +import org.apache.http.client.methods.HttpUriRequest;, +import org.apache.http.client.utils.URIUtils;, +import org.apache.http.client.utils.URLEncodedUtils;, +import java.lang.reflect.InvocationHandler;, +import java.lang.reflect.Method;, +import java.lang.reflect.ParameterizedType;, +import java.lang.reflect.Proxy;, +import java.lang.reflect.Type;, +import java.lang.reflect.WildcardType;, +import java.net.URI;, +import java.net.URISyntaxException;, +        // Construct HTTP request., +        HttpUriRequest request;, +        HttpMethod.Type requestType = getRequestType(method);, +        switch (requestType) {, +          case GET:, +            request = createGet(apiUrl, relativePath, method, args);, +            break;, +          case POST:, +            request = createPost(apiUrl, relativePath, method, args);, +            break;, +          default:, +            throw new IllegalStateException(, +                "Unrecognized HTTP Method: " + requestType);, +        }, +        headers.setHeaders(request);, +, +        // The last parameter should be of type Callback<T>. Determine T., +        Type[] genericParameterTypes = method.getGenericParameterTypes();, +        final Type resultType = getCallbackParameterType(method,, +            genericParameterTypes);, +        logger.fine(String.format("Sending " + requestType + " request to %s.",, +            request.getURI()));, +, +        final GsonResponseHandler<?> gsonResponseHandler =, +            GsonResponseHandler.create(resultType, callback);, +, +        // Optionally wrap the response handler for server call profiling., +        ResponseHandler<? extends Void> rh = (profiler == null), +            ? gsonResponseHandler, +            : new ProfilingResponseHandler(gsonResponseHandler, profiler,, +                HttpProfiler.Method.POST, apiUrl, relativePath);, +, +        httpClientProvider.get().execute(request, rh);, +      } catch (IOException e) {]