[+++ b/retrofit-adapters/rxjava/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/retrofit-adapters/rxjava/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;, +import org.junit.Before;, +import org.junit.Rule;, +import retrofit.converter.Converter;, +import retrofit.http.GET;, +import rx.observables.BlockingObservable;, +import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_AFTER_REQUEST;, +  @Rule public final MockWebServerRule server = new MockWebServerRule();, +, +  interface Service {, +    @GET("/") Observable<String> body();, +    @GET("/") Observable<Response<String>> response();, +    @GET("/") Observable<Result<String>> result();, +  }, +, +  private Service service;, +, +  @Before public void setUp() {, +    RestAdapter ra = new RestAdapter.Builder(), +        .endpoint(server.getUrl("/").toString()), +        .converter(new StringConverter()), +        .addCallAdapterFactory(ObservableCallAdapterFactory.create()), +        .build();, +    service = ra.create(Service.class);, +  }, +    server.enqueue(new MockResponse().setBody("Hi"));, +, +    BlockingObservable<String> o = service.body().toBlocking();, +    assertThat(o.first()).isEqualTo("Hi");, +    server.enqueue(new MockResponse().setResponseCode(404));, +, +    BlockingObservable<String> o = service.body().toBlocking();, +      o.first();, +    server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));, +, +    BlockingObservable<String> o = service.body().toBlocking();, +      o.first();, +      assertThat(e.getCause()).isInstanceOf(IOException.class);, +  @Test public void responseSuccess200() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +, +    BlockingObservable<Response<String>> o = service.response().toBlocking();, +    Response<String> response = o.first();, +    assertThat(response.isSuccess()).isTrue();, +    assertThat(response.body()).isEqualTo("Hi");, +, +  @Test public void responseSuccess404() throws IOException {, +    server.enqueue(new MockResponse().setResponseCode(404).setBody("Hi"));, +, +    BlockingObservable<Response<String>> o = service.response().toBlocking();, +    Response<String> response = o.first();, +    assertThat(response.isSuccess()).isFalse();, +    assertThat(response.errorBody().string()).isEqualTo("Hi");, +    server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));, +, +    BlockingObservable<Response<String>> o = service.response().toBlocking();, +      o.first();, +      assertThat(t.getCause()).isInstanceOf(IOException.class);, +  @Test public void resultSuccess200() {, +    server.enqueue(new MockResponse().setBody("Hi"));, +, +    BlockingObservable<Result<String>> o = service.result().toBlocking();, +    Result<String> result = o.first();, +    Response<String> response = result.response();, +    assertThat(response.isSuccess()).isTrue();, +    assertThat(response.body()).isEqualTo("Hi");, +  }, +, +  @Test public void resultSuccess404() throws IOException {, +    server.enqueue(new MockResponse().setResponseCode(404).setBody("Hi"));, +, +    BlockingObservable<Result<String>> o = service.result().toBlocking();, +    Result<String> result = o.first();, +    assertThat(result.isError()).isFalse();, +    Response<String> response = result.response();, +    assertThat(response.isSuccess()).isFalse();, +    assertThat(response.errorBody().string()).isEqualTo("Hi");, +    server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));, +, +    BlockingObservable<Result<String>> o = service.result().toBlocking();, +    Result<String> result = o.first();, +    assertThat(result.error()).isInstanceOf(IOException.class);, +    CallAdapter.Factory factory = ObservableCallAdapterFactory.create();, +    CallAdapter.Factory factory = ObservableCallAdapterFactory.create();, +    CallAdapter.Factory factory = ObservableCallAdapterFactory.create();]