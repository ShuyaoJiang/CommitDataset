[+++ b/retrofit/src/main/java/retrofit/BuiltInConverters.java, +  private OkHttpResponseBodyConverter streamingResponseBodyConverter;, +  private OkHttpResponseBodyConverter bufferingResponseBodyConverter;, +  private VoidConverter voidResponseBodyConverter;, +  private OkHttpRequestBodyConverter requestBodyConverter;, +, +    if (ResponseBody.class == type) {, +      if (Utils.isAnnotationPresent(annotations, Streaming.class)) {, +        OkHttpResponseBodyConverter converter = streamingResponseBodyConverter;, +        return converter != null, +            ? converter, +            : (streamingResponseBodyConverter = new OkHttpResponseBodyConverter(true));, +      } else {, +        OkHttpResponseBodyConverter converter = bufferingResponseBodyConverter;, +        return converter != null, +            ? converter, +            : (bufferingResponseBodyConverter = new OkHttpResponseBodyConverter(false));, +    }, +    if (Void.class == type) {, +      VoidConverter converter = voidResponseBodyConverter;, +      return converter != null, +          ? converter, +          : (voidResponseBodyConverter = new VoidConverter());, +    if (RequestBody.class.isAssignableFrom(Utils.getRawType(type))) {, +      return requestBodyConverter != null, +          ? requestBodyConverter, +          : (requestBodyConverter = new OkHttpRequestBodyConverter());, +++ b/retrofit/src/main/java/retrofit/BuiltInConverters.java, +  private OkHttpResponseBodyConverter streamingResponseBodyConverter;, +  private OkHttpResponseBodyConverter bufferingResponseBodyConverter;, +  private VoidConverter voidResponseBodyConverter;, +  private OkHttpRequestBodyConverter requestBodyConverter;, +, +    if (ResponseBody.class == type) {, +      if (Utils.isAnnotationPresent(annotations, Streaming.class)) {, +        OkHttpResponseBodyConverter converter = streamingResponseBodyConverter;, +        return converter != null, +            ? converter, +            : (streamingResponseBodyConverter = new OkHttpResponseBodyConverter(true));, +      } else {, +        OkHttpResponseBodyConverter converter = bufferingResponseBodyConverter;, +        return converter != null, +            ? converter, +            : (bufferingResponseBodyConverter = new OkHttpResponseBodyConverter(false));, +    }, +    if (Void.class == type) {, +      VoidConverter converter = voidResponseBodyConverter;, +      return converter != null, +          ? converter, +          : (voidResponseBodyConverter = new VoidConverter());, +    if (RequestBody.class.isAssignableFrom(Utils.getRawType(type))) {, +      return requestBodyConverter != null, +          ? requestBodyConverter, +          : (requestBodyConverter = new OkHttpRequestBodyConverter());, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/BuiltInConverters.java, +  private OkHttpResponseBodyConverter streamingResponseBodyConverter;, +  private OkHttpResponseBodyConverter bufferingResponseBodyConverter;, +  private VoidConverter voidResponseBodyConverter;, +  private OkHttpRequestBodyConverter requestBodyConverter;, +, +    if (ResponseBody.class == type) {, +      if (Utils.isAnnotationPresent(annotations, Streaming.class)) {, +        OkHttpResponseBodyConverter converter = streamingResponseBodyConverter;, +        return converter != null, +            ? converter, +            : (streamingResponseBodyConverter = new OkHttpResponseBodyConverter(true));, +      } else {, +        OkHttpResponseBodyConverter converter = bufferingResponseBodyConverter;, +        return converter != null, +            ? converter, +            : (bufferingResponseBodyConverter = new OkHttpResponseBodyConverter(false));, +    }, +    if (Void.class == type) {, +      VoidConverter converter = voidResponseBodyConverter;, +      return converter != null, +          ? converter, +          : (voidResponseBodyConverter = new VoidConverter());, +    if (RequestBody.class.isAssignableFrom(Utils.getRawType(type))) {, +      return requestBodyConverter != null, +          ? requestBodyConverter, +          : (requestBodyConverter = new OkHttpRequestBodyConverter());, +++ /dev/null, +++ b/retrofit/src/main/java/retrofit/RequestBuilderAction.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package retrofit;]