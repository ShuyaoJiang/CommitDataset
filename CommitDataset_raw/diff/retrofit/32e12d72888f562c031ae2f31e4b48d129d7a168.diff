[+++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +import java.lang.reflect.InvocationTargetException;, +        new RestHandler(type));, +    private final Class<?> declaringType;, +    private final Map<Method, MethodDetails> methodDetailsCache =, +    RestHandler(Class<?> declaringType) {, +      this.declaringType = declaringType;, +    }, +, +    @Override public Object invoke(Object proxy, Method method, final Object[] args), +        throws InvocationTargetException, IllegalAccessException {, +      // If the method is not a direct member of the interface then defer to normal invocation., +      if (method.getDeclaringClass() != declaringType) {, +        return method.invoke(this, args);, +      }, +, +++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java, +import java.lang.reflect.InvocationTargetException;, +        new RestHandler(type));, +    private final Class<?> declaringType;, +    private final Map<Method, MethodDetails> methodDetailsCache =, +    RestHandler(Class<?> declaringType) {, +      this.declaringType = declaringType;, +    }, +, +    @Override public Object invoke(Object proxy, Method method, final Object[] args), +        throws InvocationTargetException, IllegalAccessException {, +      // If the method is not a direct member of the interface then defer to normal invocation., +      if (method.getDeclaringClass() != declaringType) {, +        return method.invoke(this, args);, +      }, +, +++ b/retrofit/src/test/java/retrofit/http/RestAdapterTest.java]