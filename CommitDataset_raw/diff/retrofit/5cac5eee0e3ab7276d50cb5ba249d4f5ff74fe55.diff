[+++ b/retrofit/src/test/java/retrofit2/KotlinSuspendTest.kt, +import kotlinx.coroutines.GlobalScope, +import kotlinx.coroutines.async, +import okhttp3.OkHttpClient, +import okhttp3.mockwebserver.SocketPolicy.NO_RESPONSE, +import org.junit.Assert.assertTrue, +, +  @Test fun cancelationWorks() {, +    lateinit var call: okhttp3.Call, +, +    val okHttpClient = OkHttpClient(), +    val retrofit = Retrofit.Builder(), +        .baseUrl(server.url("/")), +        .callFactory {, +          val newCall = okHttpClient.newCall(it), +          call = newCall, +          newCall, +        }, +        .addConverterFactory(ToStringConverterFactory()), +        .build(), +    val example = retrofit.create(Service::class.java), +, +    // This leaves the connection open indefinitely allowing us to cancel without racing a body., +    server.enqueue(MockResponse().setSocketPolicy(NO_RESPONSE)), +, +    val deferred = GlobalScope.async { example.body() }, +, +    // This will block until the server has received the request ensuring it's in flight., +    server.takeRequest(), +, +    deferred.cancel(), +    assertTrue(call.isCanceled), +  }]