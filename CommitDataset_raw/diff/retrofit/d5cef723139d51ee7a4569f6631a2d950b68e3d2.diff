[+++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +import retrofit.converter.GsonConverter;, +            Response.fromError(404, ResponseBody.create(MediaType.parse("application/json"), "Hi"),, +                new GsonConverter()));, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +import retrofit.converter.GsonConverter;, +            Response.fromError(404, ResponseBody.create(MediaType.parse("application/json"), "Hi"),, +                new GsonConverter()));, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +import retrofit.converter.GsonConverter;, +            Response.fromError(404, ResponseBody.create(MediaType.parse("application/json"), "Hi"),, +                new GsonConverter()));, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +++ /dev/null, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +import retrofit.converter.GsonConverter;, +            Response.fromError(404, ResponseBody.create(MediaType.parse("application/json"), "Hi"),, +                new GsonConverter()));, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +++ /dev/null, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +import retrofit.converter.GsonConverter;, +            Response.fromError(404, ResponseBody.create(MediaType.parse("application/json"), "Hi"),, +                new GsonConverter()));, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +++ /dev/null, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +    return new Response<>(rawResponse, converted, body, converter);, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +import retrofit.converter.GsonConverter;, +            Response.fromError(404, ResponseBody.create(MediaType.parse("application/json"), "Hi"),, +                new GsonConverter()));, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +++ /dev/null, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +    return new Response<>(rawResponse, converted, body, converter);, +++ b/retrofit/src/main/java/retrofit/Response.java, +import java.io.IOException;, +import java.lang.reflect.Type;, +import retrofit.converter.Converter;, +    return new Response<T>(rawResponse, body, null, null);, +  public static Response<Object> fromError(int code, ResponseBody body, Converter converter) {, +        .build(), converter);, +  public static Response<Object> fromError(com.squareup.okhttp.Response rawResponse,, +      Converter converter) {, +    return new Response<>(rawResponse, null, errorBody, converter);, +  private final Converter converter;, +  Response(com.squareup.okhttp.Response rawResponse, T body, ResponseBody errorBody,, +      Converter converter) {, +    this.converter = converter;, +, +  /**, +   * The deserialize the response body of an {@linkplain #isSuccess() unsuccessful} response to, +   * {@code errorType}., +   * TODO warning about generics, +   */, +  @SuppressWarnings("unchecked") // Caller assumes responsibility for correct cast., +  public <E> E errorBodyAs(Type errorType) {, +    try {, +      return (E) converter.fromBody(errorBody, errorType);, +    } catch (IOException e) {, +      throw new AssertionError(e); // Body is buffered., +    }, +  }, +++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java, +import retrofit.converter.GsonConverter;, +            Response.fromError(404, ResponseBody.create(MediaType.parse("application/json"), "Hi"),, +                new GsonConverter()));, +++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java, +++ /dev/null, +++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java, +++ b/retrofit/src/main/java/retrofit/OkHttpCall.java, +    return new Response<>(rawResponse, converted, body, converter);, +++ b/retrofit/src/main/java/retrofit/Response.java, +import java.io.IOException;, +import java.lang.reflect.Type;, +import retrofit.converter.Converter;, +    return new Response<T>(rawResponse, body, null, null);, +  public static Response<Object> fromError(int code, ResponseBody body, Converter converter) {, +        .build(), converter);, +  public static Response<Object> fromError(com.squareup.okhttp.Response rawResponse,, +      Converter converter) {, +    return new Response<>(rawResponse, null, errorBody, converter);, +  private final Converter converter;, +  Response(com.squareup.okhttp.Response rawResponse, T body, ResponseBody errorBody,, +      Converter converter) {, +    this.converter = converter;, +, +  /**, +   * The deserialize the response body of an {@linkplain #isSuccess() unsuccessful} response to, +   * {@code errorType}., +   * TODO warning about generics, +   */, +  @SuppressWarnings("unchecked") // Caller assumes responsibility for correct cast., +  public <E> E errorBodyAs(Type errorType) {, +    try {]