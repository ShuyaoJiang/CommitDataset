[+++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * EventBus is a central publish/subscribe event system for Android. Events are posted ({@link #post(Object)} to the, + * bus, which delivers it to subscribers that have matching handler methods for the event type. To receive events,, + * subscribers must register themselves to the bus using the {@link #register(Object)} method. Once registered,, + * subscribers receive events until the call of {@link #unregister(Object)}. By default, subscribers will handle events, + * in methods named "onEvent"., +    /** Convenience singleton for apps using a process-wide EventBus instance. */, +    /**, +     * Configuration method that has to be called public static void skipMethodNameVerificationFor(Class<?> clazz) {, +     * SubscriberMethodFinder.skipMethodNameVerificationFor(clazz); }, +     * , +     * /** For unit test primarily., +     */, +    /**, +     * Creates a new EventBus instance; each instance is a separate scope in which events are delivered. To use a, +     * central bus, consider {@link #getDefault()}., +     */, +    /**, +     * Registers the given subscriber to receive events. Subscribers must call {@link #unregister(Object)} once they are, +     * no longer interested in receiving events., +     * , +     * Subscribers have event handling methods that are identified by their name, typically called "onEvent". Event, +     * handling methods must have exactly one parameter, the event. If the event handling method is to be called in a, +     * specific thread, a modifier is appended to the method name. Valid modifiers match one of the {@link ThreadMode}, +     * enums. For example, if a method is to be called in the UI/main thread by EventBus, it would be called, +     * "onEventMainThread"., +     */, +    /**, +     * Like {@link #register(Object)}, but allows to define a custom method name for event handler methods., +     */, +    /**, +     * Like {@link #register(Object)}, but also triggers delivery of the most recent sticky event (posted with, +     * {@link #postSticky(Object)}) to the given subscriber., +     */, +    /**, +     * Like {@link #registerSticky(Object)}, but allows to define a custom method name for event handler methods., +     */, +    /**, +     * Like {@link #register(Object)}, but only registers the subscriber for the given event types., +     */, +    /**, +     * Like {@link #register(Object, String)}, but only registers the subscriber for the given event types., +     */, +    /**, +     * Like {@link #registerSticky(Object)}, but only registers the subscriber for the given event types., +     */, +    /**, +     * Like {@link #registerSticky(Object, String)}, but only registers the subscriber for the given event types., +     */, +    /**, +     * Posts the given event to the event bus and holds on to the event (because it is sticky). The most recent sticky, +     * event of an event's type is kept in memory for future access. This can be {@link #registerSticky(Object)} or, +     * {@link #getStickyEvent(Class)}., +     */, +    /**, +     * Gets the most recent sticky event for the given type., +     * , +     * @see #postSticky(Object), +     */, +    /**, +     * Remove and gets the recent sticky event for the given type., +     * , +     * @see #postSticky(Object), +     */, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * EventBus is a central publish/subscribe event system for Android. Events are posted ({@link #post(Object)} to the, + * bus, which delivers it to subscribers that have matching handler methods for the event type. To receive events,, + * subscribers must register themselves to the bus using the {@link #register(Object)} method. Once registered,, + * subscribers receive events until the call of {@link #unregister(Object)}. By default, subscribers will handle events, + * in methods named "onEvent"., +    /** Convenience singleton for apps using a process-wide EventBus instance. */, +    /**, +     * Configuration method that has to be called public static void skipMethodNameVerificationFor(Class<?> clazz) {, +     * SubscriberMethodFinder.skipMethodNameVerificationFor(clazz); }, +     * , +     * /** For unit test primarily., +     */, +    /**, +     * Creates a new EventBus instance; each instance is a separate scope in which events are delivered. To use a, +     * central bus, consider {@link #getDefault()}., +     */, +    /**, +     * Registers the given subscriber to receive events. Subscribers must call {@link #unregister(Object)} once they are, +     * no longer interested in receiving events., +     * , +     * Subscribers have event handling methods that are identified by their name, typically called "onEvent". Event, +     * handling methods must have exactly one parameter, the event. If the event handling method is to be called in a, +     * specific thread, a modifier is appended to the method name. Valid modifiers match one of the {@link ThreadMode}, +     * enums. For example, if a method is to be called in the UI/main thread by EventBus, it would be called, +     * "onEventMainThread"., +     */, +    /**, +     * Like {@link #register(Object)}, but allows to define a custom method name for event handler methods., +     */, +    /**, +     * Like {@link #register(Object)}, but also triggers delivery of the most recent sticky event (posted with, +     * {@link #postSticky(Object)}) to the given subscriber., +     */, +    /**, +     * Like {@link #registerSticky(Object)}, but allows to define a custom method name for event handler methods.]