[+++ b/EventBus/build.gradle, +version = '2.4.1-SNAPSHOT', +++ b/EventBus/build.gradle, +version = '2.4.1-SNAPSHOT', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    public static String TAG = "Event";, +        subscriberMethodFinder = new SubscriberMethodFinder(builder.skipMethodVerificationForClasses);, +        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());, +++ b/EventBus/build.gradle, +version = '2.4.1-SNAPSHOT', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    public static String TAG = "Event";, +        subscriberMethodFinder = new SubscriberMethodFinder(builder.skipMethodVerificationForClasses);, +        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '2.4.1-SNAPSHOT', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    public static String TAG = "Event";, +        subscriberMethodFinder = new SubscriberMethodFinder(builder.skipMethodVerificationForClasses);, +        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());, +++ /dev/null, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '2.4.1-SNAPSHOT', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    public static String TAG = "Event";, +        subscriberMethodFinder = new SubscriberMethodFinder(builder.skipMethodVerificationForClasses);, +        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());, +++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethod.java, +        if (other instanceof SubscriberMethod) {, +++ b/EventBus/build.gradle, +version = '2.4.1-SNAPSHOT', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    public static String TAG = "Event";, +        subscriberMethodFinder = new SubscriberMethodFinder(builder.skipMethodVerificationForClasses);, +        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());, +++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethod.java, +        if (other instanceof SubscriberMethod) {, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +import java.util.concurrent.ConcurrentHashMap;, +    private static final String ON_EVENT_METHOD_NAME = "onEvent";, +, +    private static final Map<String, List<SubscriberMethod>> methodCache = new HashMap<String, List<SubscriberMethod>>();, +    private final Map<Class<?>, Class<?>> skipMethodVerificationForClasses;, +    SubscriberMethodFinder(List<Class<?>> skipMethodVerificationForClassesList) {, +        skipMethodVerificationForClasses = new ConcurrentHashMap<Class<?>, Class<?>>();, +        if (skipMethodVerificationForClassesList != null) {, +            for (Class<?> clazz : skipMethodVerificationForClassesList) {, +                skipMethodVerificationForClasses.put(clazz, clazz);, +        synchronized (methodCache) {, +            subscriberMethods = methodCache.get(key);, +        subscriberMethods = new ArrayList<SubscriberMethod>();, +                String methodName = method.getName();, +                if (methodName.startsWith(ON_EVENT_METHOD_NAME)) {, +                            String modifierString = methodName.substring(ON_EVENT_METHOD_NAME.length());, +                            ThreadMode threadMode;, +                            if (modifierString.length() == 0) {, +                                threadMode = ThreadMode.PostThread;, +                            } else if (modifierString.equals("MainThread")) {, +                                threadMode = ThreadMode.MainThread;, +                            } else if (modifierString.equals("BackgroundThread")) {, +                                threadMode = ThreadMode.BackgroundThread;, +                            } else if (modifierString.equals("Async")) {, +                                threadMode = ThreadMode.Async;, +                            } else {, +                                if (skipMethodVerificationForClasses.containsKey(clazz)) {, +                                    continue;, +                                } else {, +                                    throw new EventBusException("Illegal onEvent method, check for typos: " + method);, +                                }, +                            }, +                    } else if (!skipMethodVerificationForClasses.containsKey(clazz)) {, +                        Log.d(EventBus.TAG, "Skipping method (not public, static or abstract): " + clazz + ".", +                                + methodName);, +        if (subscriberMethods.isEmpty()) {, +            throw new EventBusException("Subscriber " + subscriberClass + " has no public methods called ", +                    + ON_EVENT_METHOD_NAME);, +        } else {, +            synchronized (methodCache) {, +                methodCache.put(key, subscriberMethods);, +            }, +    }, +        synchronized (methodCache) {, +            methodCache.clear();, +++ b/EventBus/build.gradle, +version = '2.4.1-SNAPSHOT', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    public static String TAG = "Event";, +        subscriberMethodFinder = new SubscriberMethodFinder(builder.skipMethodVerificationForClasses);, +        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());, +++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethod.java, +        if (other instanceof SubscriberMethod) {, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java]