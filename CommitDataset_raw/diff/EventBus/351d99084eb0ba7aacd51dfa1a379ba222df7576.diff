[+++ b/EventBusAnnotationProcessor/src/de/greenrobot/event/annotationprocessor/EventBusAnnotationProcessor.java, +import javax.lang.model.type.TypeMirror;, +    public static final String JAVA_LANG_PREFIX = "java.lang.";, +    public static final int JAVA_LANG_PREFIX_LENGTH = JAVA_LANG_PREFIX.length();, +                writeMethods(writer, entry.getValue(), methodSignatures, myPackage);, +    private String getClassString(TypeElement typeElement, String myPackage) {, +        String className = typeElement.getQualifiedName().toString();, +        int lastPeriod = className.lastIndexOf('.');, +        if (!myPackage.isEmpty() && className.startsWith(myPackage) && lastPeriod == myPackage.length()) {, +            // TODO detect nested types also, +, +            className = className.substring(myPackage.length() + 1);, +        } else if (className.startsWith(JAVA_LANG_PREFIX) && lastPeriod == JAVA_LANG_PREFIX_LENGTH - 1) {, +            className = className.substring(JAVA_LANG_PREFIX_LENGTH);, +    private void writeMethods(BufferedWriter writer, List<ExecutableElement> methods, Set<String> methodSignatures,, +                              String myPackage) throws IOException {, +            TypeMirror paramType = parameters.get(0).asType();, +            TypeElement paramElement = (TypeElement) processingEnv.getTypeUtils().asElement(paramType);, +            String eventClass = getClassString(paramElement, myPackage) + ".class";, +            String methodSignature = method + ">" + paramElement.getQualifiedName();, +                    parts.add(eventClass + lineEnd);, +                    parts.add(eventClass + ",");, +                parts.add(eventClass + ",");, +                    "(" + paramElement.getSimpleName() + ")");, +++ b/EventBusAnnotationProcessor/src/de/greenrobot/event/annotationprocessor/EventBusAnnotationProcessor.java, +import javax.lang.model.type.TypeMirror;, +    public static final String JAVA_LANG_PREFIX = "java.lang.";, +    public static final int JAVA_LANG_PREFIX_LENGTH = JAVA_LANG_PREFIX.length();, +                writeMethods(writer, entry.getValue(), methodSignatures, myPackage);, +    private String getClassString(TypeElement typeElement, String myPackage) {, +        String className = typeElement.getQualifiedName().toString();, +        int lastPeriod = className.lastIndexOf('.');, +        if (!myPackage.isEmpty() && className.startsWith(myPackage) && lastPeriod == myPackage.length()) {, +            // TODO detect nested types also, +, +            className = className.substring(myPackage.length() + 1);, +        } else if (className.startsWith(JAVA_LANG_PREFIX) && lastPeriod == JAVA_LANG_PREFIX_LENGTH - 1) {, +            className = className.substring(JAVA_LANG_PREFIX_LENGTH);, +    private void writeMethods(BufferedWriter writer, List<ExecutableElement> methods, Set<String> methodSignatures,, +                              String myPackage) throws IOException {, +            TypeMirror paramType = parameters.get(0).asType();, +            TypeElement paramElement = (TypeElement) processingEnv.getTypeUtils().asElement(paramType);, +            String eventClass = getClassString(paramElement, myPackage) + ".class";, +            String methodSignature = method + ">" + paramElement.getQualifiedName();, +                    parts.add(eventClass + lineEnd);, +                    parts.add(eventClass + ",");, +                parts.add(eventClass + ",");, +                    "(" + paramElement.getSimpleName() + ")");, +++ b/EventBusTest/src/de/greenrobot/event/test/EventBusGenericsTest.java, +package de.greenrobot.event.test;, +, +import de.greenrobot.event.EventBus;, +import de.greenrobot.event.Subscribe;, +, +public class EventBusGenericsTest extends AbstractEventBusTest {, +    public static class GenericEvent<T> {, +        T value;, +    }, +, +    public class GenericSubscriber<T> {, +        @Subscribe, +        public void onGenericEvent(GenericEvent<T> event) {, +            trackEvent(event);, +        }, +    }, +, +    public void testGenericEventAndSubscriber() {, +        GenericSubscriber<IntTestEvent> genericSubscriber = new GenericSubscriber<IntTestEvent>();, +        eventBus.register(genericSubscriber);, +        eventBus.post(new GenericEvent<Integer>());, +        eventBus.unregister(genericSubscriber);, +, +        assertEventCount(1);, +    }, +}]