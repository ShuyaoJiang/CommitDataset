[+++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +     * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., +     * The {@link de.greenrobot.event.Subscribe} annotation also allows configuration like {@link, +     * de.greenrobot.event.ThreadMode} and priority., +            subscribe(subscriber, subscriberMethod);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +        // Got to synchronize to avoid shifted positions when adding/removing concurrently, +        synchronized (subscriptions) {, +                if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {, +        }, +        if (subscriberMethod.sticky) {, +            // Got to synchronize to avoid shifted positions when adding/removing concurrently, +            synchronized (subscriptions) {, +    }, +     * {@link Subscribe#priority()}). Canceling is restricted to event handling methods running in posting thread, +     * event of an event's type is kept in memory for future access by subscribers using {@link Subscribe#sticky()}., +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +     * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., +     * The {@link de.greenrobot.event.Subscribe} annotation also allows configuration like {@link, +     * de.greenrobot.event.ThreadMode} and priority., +            subscribe(subscriber, subscriberMethod);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +        // Got to synchronize to avoid shifted positions when adding/removing concurrently, +        synchronized (subscriptions) {, +                if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {, +        }, +        if (subscriberMethod.sticky) {, +            // Got to synchronize to avoid shifted positions when adding/removing concurrently, +            synchronized (subscriptions) {, +    }, +     * {@link Subscribe#priority()}). Canceling is restricted to event handling methods running in posting thread, +     * event of an event's type is kept in memory for future access by subscribers using {@link Subscribe#sticky()}., +++ b/EventBus/src/de/greenrobot/event/Subscribe.java, +, +    /**, +     * If true, delivers the most recent sticky event (posted with, +     * {@link de.greenrobot.event.EventBus#postSticky(Object)}) to this subscriber (if event available)., +     */, +    boolean sticky() default false;, +, +    /** Subscriber priority to influence the order of event delivery., +     * Within the same delivery thread ({@link ThreadMode}), higher priority subscribers will receive events before, +     * others with a lower priority. The default priority is 0. Note: the priority does *NOT* affect the order of, +     * delivery among subscribers with different {@link ThreadMode}s! */, +    int priority() default 0;, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +     * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., +     * The {@link de.greenrobot.event.Subscribe} annotation also allows configuration like {@link, +     * de.greenrobot.event.ThreadMode} and priority., +            subscribe(subscriber, subscriberMethod);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +        // Got to synchronize to avoid shifted positions when adding/removing concurrently, +        synchronized (subscriptions) {, +                if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {, +        }, +        if (subscriberMethod.sticky) {, +            // Got to synchronize to avoid shifted positions when adding/removing concurrently, +            synchronized (subscriptions) {, +    }, +     * {@link Subscribe#priority()}). Canceling is restricted to event handling methods running in posting thread, +     * event of an event's type is kept in memory for future access by subscribers using {@link Subscribe#sticky()}., +++ b/EventBus/src/de/greenrobot/event/Subscribe.java, +, +    /**, +     * If true, delivers the most recent sticky event (posted with, +     * {@link de.greenrobot.event.EventBus#postSticky(Object)}) to this subscriber (if event available)., +     */, +    boolean sticky() default false;, +, +    /** Subscriber priority to influence the order of event delivery., +     * Within the same delivery thread ({@link ThreadMode}), higher priority subscribers will receive events before, +     * others with a lower priority. The default priority is 0. Note: the priority does *NOT* affect the order of, +     * delivery among subscribers with different {@link ThreadMode}s! */, +    int priority() default 0;, +++ b/EventBus/src/de/greenrobot/event/SubscriberIndex.java, +                                            ThreadMode threadMode, int priority, boolean sticky) {, +            return new SubscriberMethod(method, eventType, threadMode, priority, sticky);, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +     * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., +     * The {@link de.greenrobot.event.Subscribe} annotation also allows configuration like {@link, +     * de.greenrobot.event.ThreadMode} and priority.]