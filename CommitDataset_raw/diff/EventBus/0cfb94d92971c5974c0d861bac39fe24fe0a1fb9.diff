[+++ b/EventBusPerformance/res/values/strings.xml, +        <item>Register Subscribers (all, no unregister)</item>, +++ b/EventBusPerformance/res/values/strings.xml, +        <item>Register Subscribers (all, no unregister)</item>, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java, +    static final Class[] TEST_CLASSES_EVENTBUS = { TestEventBus.Post.class,//, +            TestEventBus.RegisterOneByOne.class,//, +            TestEventBus.RegisterAll.class //, +    };, +++ b/EventBusPerformance/res/values/strings.xml, +        <item>Register Subscribers (all, no unregister)</item>, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/TestSetupActivity.java, +    static final Class[] TEST_CLASSES_EVENTBUS = { TestEventBus.Post.class,//, +            TestEventBus.RegisterOneByOne.class,//, +            TestEventBus.RegisterAll.class //, +    };, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/TestEventBus.java, +import android.os.SystemClock;, +    public static class RegisterAll extends TestEventBus {, +        public RegisterAll(Context context, TestParams params) {, +            primaryResultCount = params.getSubscriberCount();, +        }, +, +        @Override, +        public String getDisplayName() {, +            return "EventBus Register Subscribers";, +        }, +    }, +, +    public static class RegisterOneByOne extends TestEventBus {, +        public RegisterOneByOne(Context context, TestParams params) {, +            super(context, params);, +        }, +, +        public void runTest() {, +            long time = 0;, +            for (Object subscriber : super.subscribers) {, +                long beforeRegister = System.nanoTime();, +                super.eventBus.register(subscriber);, +                long timeRegister = System.nanoTime() - beforeRegister;, +                time += timeRegister;, +                super.eventBus.unregister(subscriber);, +                if (canceled) {, +                    return;, +                }, +            }, +, +            primaryResultMillis = time / 1000000;, +            primaryResultCount = params.getSubscriberCount();]