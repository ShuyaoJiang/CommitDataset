[+++ b/EventBus/src/de/greenrobot/event/SubscriberInfoIndex.java, +package de.greenrobot.event;, +, +/**, + * Interface for generated indexes., + */, +public interface SubscriberInfoIndex {, +    SubscriberInfo getSubscriberInfo(Class<?> subscriberClass);, +}, +++ b/EventBus/src/de/greenrobot/event/SubscriberInfoIndex.java, +package de.greenrobot.event;, +, +/**, + * Interface for generated indexes., + */, +public interface SubscriberInfoIndex {, +    SubscriberInfo getSubscriberInfo(Class<?> subscriberClass);, +}, +++ b/EventBusAnnotationProcessor/build.gradle, +sourceCompatibility = 1.7, +++ b/EventBus/src/de/greenrobot/event/SubscriberInfoIndex.java, +package de.greenrobot.event;, +, +/**, + * Interface for generated indexes., + */, +public interface SubscriberInfoIndex {, +    SubscriberInfo getSubscriberInfo(Class<?> subscriberClass);, +}, +++ b/EventBusAnnotationProcessor/build.gradle, +sourceCompatibility = 1.7, +++ b/EventBusAnnotationProcessor/src/de/greenrobot/event/annotationprocessor/EventBusAnnotationProcessor.java, +                String index = processingEnv.getOptions().get("eventBusIndex");, +                if (index != null) {, +                    writeIndex(index);, +                }, +        List<Map.Entry<TypeElement, List<ExecutableElement>>> entries = new ArrayList<>(methodsByClass.entrySet());, +    private void writeIndex(String index) {, +        BufferedWriter writer = null;, +        try {, +            JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(index);, +            int period = index.lastIndexOf('.');, +            String myPackage = period > 0 ? index.substring(0, period) : null;, +            String clazz = index.substring(period + 1);, +            writer = new BufferedWriter(sourceFile.openWriter());, +            if (myPackage != null) {, +                writer.write("package " + myPackage + ";\n\n");, +            }, +            writer.write("import de.greenrobot.event.SubscriberInfo;\n");, +            writer.write("import de.greenrobot.event.SubscriberInfoIndex;\n\n");, +            writer.write("import java.util.HashMap;\n");, +            writer.write("import java.util.Map;\n\n");, +            writer.write("/** This class is generated by EventBus, do not edit. */\n");, +            writer.write("public class " + clazz + " implements SubscriberInfoIndex {\n");, +            writer.write("    private static final Map<Class<?>,Class<SubscriberInfo>> SUBSCRIBER_INDEX;\n\n");, +            writer.write("    static {\n");, +            writer.write("        SUBSCRIBER_INDEX = new HashMap<Class<?>,Class<SubscriberInfo>>();\n");, +            writer.write("    }\n\n");, +            writer.write("    @Override\n");, +            writer.write("    public SubscriberInfo getSubscriberInfo(Class<?> subscriberClass) {\n");, +            writer.write("        Class<SubscriberInfo> infoClass = SUBSCRIBER_INDEX.get(subscriberClass);\n");, +            writer.write("        try {\n");, +            writer.write("            return infoClass != null? infoClass.newInstance(): null;\n");, +            writer.write("        } catch(Exception ex) {\n");, +            writer.write("            throw new RuntimeException(ex);\n");, +            writer.write("        }\n");, +            writer.write("    }\n");, +            writer.write("}\n");, +        } catch (IOException e) {, +            throw new RuntimeException("Could not write source for " + index, e);, +        } finally {, +            if (writer != null) {, +                try {, +                    writer.close();, +                } catch (IOException e) {, +                    //Silent, +                }, +            }, +        }, +    }, +, +++ b/EventBus/src/de/greenrobot/event/SubscriberInfoIndex.java, +package de.greenrobot.event;, +, +/**, + * Interface for generated indexes., + */, +public interface SubscriberInfoIndex {, +    SubscriberInfo getSubscriberInfo(Class<?> subscriberClass);, +}, +++ b/EventBusAnnotationProcessor/build.gradle, +sourceCompatibility = 1.7, +++ b/EventBusAnnotationProcessor/src/de/greenrobot/event/annotationprocessor/EventBusAnnotationProcessor.java, +                String index = processingEnv.getOptions().get("eventBusIndex");, +                if (index != null) {, +                    writeIndex(index);, +                }, +        List<Map.Entry<TypeElement, List<ExecutableElement>>> entries = new ArrayList<>(methodsByClass.entrySet());, +    private void writeIndex(String index) {, +        BufferedWriter writer = null;]