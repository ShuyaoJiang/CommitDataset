[+++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    private boolean subscribed;, +    private boolean logSubscriberExceptions;, +, +        logSubscriberExceptions = true;, +    }, +, +    /**, +     * Before registering any subscribers, use this method to configure if EventBus should log exceptions thrown by, +     * subscribers (default: true)., +     */, +    public void configureLogSubscriberExceptions(boolean logSubscriberExceptions) {, +        if (subscribed) {, +            throw new EventBusException("This method must be called before any registration");, +        }, +        this.logSubscriberExceptions = logSubscriberExceptions;, +        subscribed = true;, +            if (event instanceof SubscriberExceptionEvent) {, +                // Don't send another SubscriberExceptionEvent to avoid infinite event recursion, just log, +                Log.e(TAG, "SubscriberExceptionEvent subscriber " + subscription.subscriber.getClass(), +                        + " threw an exception", cause);, +                SubscriberExceptionEvent exEvent = (SubscriberExceptionEvent) event;, +                Log.e(TAG, "Initial event " + exEvent.causingEvent + " caused exception in ", +                        + exEvent.causingSubscriber, exEvent.throwable);, +            } else {, +                if (logSubscriberExceptions) {, +                }, +                SubscriberExceptionEvent exEvent = new SubscriberExceptionEvent(cause, event, subscription.subscriber);, +                post(exEvent);, +    // Just an idea: we could provide a callback to post() to be notified, an alternative would be events, of course..., +    /* public */interface PostCallback {, +        void onPostCompleted(List<SubscriberExceptionEvent> exceptionEvents);, +    }, +, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    private boolean subscribed;, +    private boolean logSubscriberExceptions;, +, +        logSubscriberExceptions = true;, +    }, +, +    /**, +     * Before registering any subscribers, use this method to configure if EventBus should log exceptions thrown by, +     * subscribers (default: true)., +     */, +    public void configureLogSubscriberExceptions(boolean logSubscriberExceptions) {, +        if (subscribed) {, +            throw new EventBusException("This method must be called before any registration");, +        }, +        this.logSubscriberExceptions = logSubscriberExceptions;, +        subscribed = true;, +            if (event instanceof SubscriberExceptionEvent) {, +                // Don't send another SubscriberExceptionEvent to avoid infinite event recursion, just log, +                Log.e(TAG, "SubscriberExceptionEvent subscriber " + subscription.subscriber.getClass(), +                        + " threw an exception", cause);, +                SubscriberExceptionEvent exEvent = (SubscriberExceptionEvent) event;, +                Log.e(TAG, "Initial event " + exEvent.causingEvent + " caused exception in ", +                        + exEvent.causingSubscriber, exEvent.throwable);, +            } else {, +                if (logSubscriberExceptions) {, +                }, +                SubscriberExceptionEvent exEvent = new SubscriberExceptionEvent(cause, event, subscription.subscriber);, +                post(exEvent);, +    // Just an idea: we could provide a callback to post() to be notified, an alternative would be events, of course..., +    /* public */interface PostCallback {, +        void onPostCompleted(List<SubscriberExceptionEvent> exceptionEvents);, +    }, +, +++ b/EventBus/src/de/greenrobot/event/SubscriberExceptionEvent.java, +/*, + * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package de.greenrobot.event;, +, +/**, + * TODO Implement a consistent exception handling. One part of this could be posting this class as event when the, + * background thread or async poster step on an exception., + * , + * @author Markus, + */, +public final class SubscriberExceptionEvent {, +    public final Throwable throwable;, +    public final Object causingEvent;, +    public final Object causingSubscriber;, +]