[+++ b/.gitignore, +.gradle, +++ b/.gitignore, +.gradle, +++ b/EventBus/.gitignore, +/gen, +/bin, +/release, +/build, +/.gradle, +/gradle.properties, +++ b/.gitignore, +.gradle, +++ b/EventBus/.gitignore, +/gen, +/bin, +/release, +/build, +/.gradle, +/gradle.properties, +++ b/EventBus/build.gradle, +version = '2.1.0-beta-3', +++ b/.gitignore, +.gradle, +++ b/EventBus/.gitignore, +/gen, +/bin, +/release, +/build, +/.gradle, +/gradle.properties, +++ b/EventBus/build.gradle, +version = '2.1.0-beta-3', +++ b/EventBus/src/de/greenrobot/event/AsyncPoster.java, +++ b/.gitignore, +.gradle, +++ b/EventBus/.gitignore, +/gen, +/bin, +/release, +/build, +/.gradle, +/gradle.properties, +++ b/EventBus/build.gradle, +version = '2.1.0-beta-3', +++ b/EventBus/src/de/greenrobot/event/AsyncPoster.java, +++ b/EventBus/src/de/greenrobot/event/BackgroundPoster.java, +++ b/.gitignore, +.gradle, +++ b/EventBus/.gitignore, +/gen, +/bin, +/release, +/build, +/.gradle, +/gradle.properties, +++ b/EventBus/build.gradle, +version = '2.1.0-beta-3', +++ b/EventBus/src/de/greenrobot/event/AsyncPoster.java, +++ b/EventBus/src/de/greenrobot/event/BackgroundPoster.java, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers receive events until the call of {@link #unregister(Object)}. By default, subscribers will handle events, + * in methods named "onEvent"., +    private final ThreadLocal<List<Object>> currentThreadEventQueue = new ThreadLocal<List<Object>>() {, +        protected List<Object> initialValue() {, +            return new ArrayList<Object>();, +        }, +    };, +, +    private final ThreadLocal<BooleanWrapper> currentThreadIsPosting = new ThreadLocal<BooleanWrapper>() {, +        @Override, +        protected BooleanWrapper initialValue() {, +            return new BooleanWrapper();, +     * exclude subscriber classes from this check., +    public static void skipMethodNameVerificationFor(Class<?> clazz) {, +        SubscriberMethodFinder.skipMethodNameVerificationFor(clazz);, +        SubscriberMethodFinder.clearSkipMethodNameVerifications();, +        register(subscriber, defaultMethodName, false);, +     * Like {@link #register(Object)}, but allows to define a custom method name for event handler methods., +        register(subscriber, methodName, false);, +        register(subscriber, defaultMethodName, true);, +     * Like {@link #registerSticky(Object)}, but allows to define a custom method name for event handler methods., +        register(subscriber, methodName, true);, +    private void register(Object subscriber, String methodName, boolean sticky) {, +            subscribe(subscriber, subscriberMethod, sticky);, +     * Like {@link #register(Object)}, but only registers the subscriber for the given event types., +     * Like {@link #register(Object, String)}, but only registers the subscriber for the given event types., +    public synchronized void register(Object subscriber, String methodName, Class<?> eventType,, +            Class<?>... moreEventTypes) {, +     * Like {@link #registerSticky(Object)}, but only registers the subscriber for the given event types., +     * Like {@link #registerSticky(Object, String)}, but only registers the subscriber for the given event types., +    public synchronized void registerSticky(Object subscriber, String methodName, Class<?> eventType,, +            Class<?>... moreEventTypes) {, +                subscribe(subscriber, subscriberMethod, sticky);, +                        subscribe(subscriber, subscriberMethod, sticky);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod, boolean sticky) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +        subscriberMethod.method.setAccessible(true);, +        subscriptions.add(newSubscription);, +    /** Unregisters the given subscriber for the given event classes. */]