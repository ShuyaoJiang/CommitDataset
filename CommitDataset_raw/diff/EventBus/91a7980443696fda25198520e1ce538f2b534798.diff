[+++ b/EventBus/src/de/greenrobot/event/SubscriberMethod.java, +        if (other == this) {, +            return true;, +        } else if (other instanceof SubscriberMethod) {, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethod.java, +        if (other == this) {, +            return true;, +        } else if (other instanceof SubscriberMethod) {, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +import de.greenrobot.event.annotations.Subscribe;, +     * EventBus must ignore both. Their modifiers are not public but defined in the Java class file format:, +, +                // Now we find acceptable methods via annotations, +                if (method.isAnnotationPresent(Subscribe.class)) {, +                    Log.e("EventBus", "Annotation is present for " + methodName);, +                            Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);, +                            if (subscribeAnnotation != null && subscribeAnnotation.threadMode() != null) {, +                                ThreadMode threadMode = subscribeAnnotation.threadMode();, +, +, +                } else {, +                    Log.e("EventBus", "Annotation is NOT present for " + methodName);, +            }, +, +            throw new EventBusException("Subscriber " + subscriberClass, +                    + " has no public methods called with the @Subscribe annotation");, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethod.java, +        if (other == this) {, +            return true;, +        } else if (other instanceof SubscriberMethod) {, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +import de.greenrobot.event.annotations.Subscribe;, +     * EventBus must ignore both. Their modifiers are not public but defined in the Java class file format:, +, +                // Now we find acceptable methods via annotations, +                if (method.isAnnotationPresent(Subscribe.class)) {, +                    Log.e("EventBus", "Annotation is present for " + methodName);, +                            Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);, +                            if (subscribeAnnotation != null && subscribeAnnotation.threadMode() != null) {, +                                ThreadMode threadMode = subscribeAnnotation.threadMode();, +, +, +                } else {, +                    Log.e("EventBus", "Annotation is NOT present for " + methodName);, +            }, +, +            throw new EventBusException("Subscriber " + subscriberClass, +                    + " has no public methods called with the @Subscribe annotation");, +++ b/EventBus/src/de/greenrobot/event/annotations/Subscribe.java, +package de.greenrobot.event.annotations;, +, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import de.greenrobot.event.ThreadMode;, +, +@Documented, +@Retention(RetentionPolicy.RUNTIME), +@Target({ElementType.METHOD}), +public @interface Subscribe {, +    ThreadMode threadMode() default ThreadMode.PostThread;, +}, +, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethod.java, +        if (other == this) {, +            return true;, +        } else if (other instanceof SubscriberMethod) {, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +import de.greenrobot.event.annotations.Subscribe;, +     * EventBus must ignore both. Their modifiers are not public but defined in the Java class file format:, +, +                // Now we find acceptable methods via annotations, +                if (method.isAnnotationPresent(Subscribe.class)) {, +                    Log.e("EventBus", "Annotation is present for " + methodName);, +                            Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);, +                            if (subscribeAnnotation != null && subscribeAnnotation.threadMode() != null) {, +                                ThreadMode threadMode = subscribeAnnotation.threadMode();, +, +, +                } else {, +                    Log.e("EventBus", "Annotation is NOT present for " + methodName);, +            }, +, +            throw new EventBusException("Subscriber " + subscriberClass, +                    + " has no public methods called with the @Subscribe annotation");, +++ b/EventBus/src/de/greenrobot/event/annotations/Subscribe.java, +package de.greenrobot.event.annotations;, +, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import de.greenrobot.event.ThreadMode;]