[+++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        List<SubscriberMethod> subscriberMethods, +                = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass(), logSubscriberExceptions);, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        List<SubscriberMethod> subscriberMethods, +                = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass(), logSubscriberExceptions);, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethod.java, +        if (other == this) {, +            return true;, +        } else if (other instanceof SubscriberMethod) {, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        List<SubscriberMethod> subscriberMethods, +                = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass(), logSubscriberExceptions);, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethod.java, +        if (other == this) {, +            return true;, +        } else if (other instanceof SubscriberMethod) {, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +import de.greenrobot.event.annotations.Subscribe;, +    private static final int MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC;, +    List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass, boolean logSubscriberExceptions) {, +, +, +, +                /*, +                 * In newer class files, compilers may add methods. Those are called bridge or synthetic methods., +                 * EventBus must ignore both. Their modifiers are not public but defined in the Java class file format:, +                 * http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.6-200-A.1, +                 */, +                if (method.isBridge() || method.isSynthetic()) {, +, +                // Now we find acceptable methods via annotations, +                if (method.isAnnotationPresent(Subscribe.class)) {, +, +                    // make sure the method is public, +                    int modifiers = method.getModifiers();, +                    if ((modifiers & Modifier.PUBLIC) == 0) {, +                        logErrorIfEnabled(logSubscriberExceptions, methodName,, +                                "Method (%s) has subscribe annotation but is not public");, +                        continue;, +, +                    // make sure the method is not static or abstract, +                    if ((modifiers & MODIFIERS_IGNORE) != 0) {, +                        logErrorIfEnabled(logSubscriberExceptions, methodName,, +                                "Method (%s) has subscribe annotation but is either static or abstract");, +                        continue;, +                    }, +, +                    // verify that there is exactly 1 parameter (the event), +                    Class<?>[] parameterTypes = method.getParameterTypes();, +                    if (parameterTypes.length != 1) {, +                        logErrorIfEnabled(logSubscriberExceptions, methodName,, +                                "Method (%s) does not have exactly 1 parameter");, +                        continue;, +                    }, +, +                    // This method is valid, so now we get the threadMode and add to the cache, +                    Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);, +                    ThreadMode threadMode;, +                    if (subscribeAnnotation != null && subscribeAnnotation.threadMode() != null) {, +                        threadMode = subscribeAnnotation.threadMode();, +                    } else {, +                        threadMode = ThreadMode.PostThread;, +                    }, +, +, +, +            throw new EventBusException("Subscriber " + subscriberClass, +                    + " has no public methods called with the @Subscribe annotation");, +    /**, +     * If the user has enabled logging subscriber errors, log the message to log.e, +     *, +     * @param logSubscriberErrors if logSubscriberErrors is enabled, +     * @param methodName method name, +     * @param error error message, +     */, +    private void logErrorIfEnabled(boolean logSubscriberErrors, String methodName, String error) {, +        if (logSubscriberErrors) {, +            Log.e(EventBus.TAG, String.format(error, methodName));, +        }, +    }, +, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        List<SubscriberMethod> subscriberMethods, +                = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass(), logSubscriberExceptions);, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethod.java, +        if (other == this) {, +            return true;, +        } else if (other instanceof SubscriberMethod) {, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +import de.greenrobot.event.annotations.Subscribe;, +    private static final int MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC;, +    List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass, boolean logSubscriberExceptions) {, +, +, +, +                /*, +                 * In newer class files, compilers may add methods. Those are called bridge or synthetic methods., +                 * EventBus must ignore both. Their modifiers are not public but defined in the Java class file format:, +                 * http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.6-200-A.1]