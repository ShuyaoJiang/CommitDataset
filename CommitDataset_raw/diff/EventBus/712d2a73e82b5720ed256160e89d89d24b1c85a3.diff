[+++ b/EventBus/src/de/greenrobot/event/BackgroundExceptionEvent.java, +package de.greenrobot.event;, +, +public class BackgroundExceptionEvent {, +    public final Throwable throwable;, +    public final Object causingEvent;, +    public final Object causingSubscriber;, +    , +    public BackgroundExceptionEvent(Throwable throwable, Object causingEvent, Object causingSubscriber) {, +        this.throwable = throwable;, +        this.causingEvent = causingEvent;, +        this.causingSubscriber = causingSubscriber;, +    }, +, +}, +++ b/EventBus/src/de/greenrobot/event/BackgroundExceptionEvent.java, +package de.greenrobot.event;, +, +public class BackgroundExceptionEvent {, +    public final Throwable throwable;, +    public final Object causingEvent;, +    public final Object causingSubscriber;, +    , +    public BackgroundExceptionEvent(Throwable throwable, Object causingEvent, Object causingSubscriber) {, +        this.throwable = throwable;, +        this.causingEvent = causingEvent;, +        this.causingSubscriber = causingSubscriber;, +    }, +, +}, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        register(subscriber, defaultMethodName, false);, +        register(subscriber, methodName, false);, +    }, +, +    public void registerSticky(Object subscriber) {, +        register(subscriber, defaultMethodName, true);, +    }, +, +    public void registerSticky(Object subscriber, String methodName) {, +        register(subscriber, methodName, true);, +    }, +, +    private void register(Object subscriber, String methodName, boolean sticky) {, +            subscribe(subscriber, subscriberMethod, sticky);, +        register(subscriber, defaultMethodName, false, eventType, moreEventTypes);, +        register(subscriber, methodName, false, eventType, moreEventTypes);, +    }, +, +    public void registerSticky(Object subscriber, Class<?> eventType, Class<?>... moreEventTypes) {, +        register(subscriber, defaultMethodName, true, eventType, moreEventTypes);, +    }, +, +    public synchronized void registerSticky(Object subscriber, String methodName, Class<?> eventType,, +            Class<?>... moreEventTypes) {, +        register(subscriber, methodName, true, eventType, moreEventTypes);, +    }, +, +    private synchronized void register(Object subscriber, String methodName, boolean sticky, Class<?> eventType,, +            Class<?>... moreEventTypes) {, +                subscribe(subscriber, subscriberMethod, sticky);, +            } else if (moreEventTypes != null) {, +                for (Class<?> eventType2 : moreEventTypes) {, +                    if (eventType2 == subscriberMethod.eventType) {, +                        subscribe(subscriber, subscriberMethod, sticky);, +                        break;, +                    }, +                }, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod, boolean sticky) {, +        if (sticky) {, +            Object stickyEvent;, +            synchronized (stickyEvents) {, +                stickyEvent = stickyEvents.get(eventType);, +            }, +    }, +        synchronized (stickyEvents) {, +    }, +, +    /** Gets the most recent sticky event for the given type. */, +    public Object getStickyEvent(Class<?> eventType) {, +        synchronized (stickyEvents) {, +            return stickyEvents.get(eventType);, +        }, +    }, +, +    /** Remove and gets the recent sticky event for the given type. */, +    public Object removeStickyEvent(Class<?> eventType) {, +        synchronized (stickyEvents) {, +            return stickyEvents.remove(eventType);, +        }, +    }, +, +    /**, +     * Removes the sticky event if it equals to the given event., +     * , +     * @return true if the events matched and the sticky event was removed., +     */, +    public boolean removeStickyEvent(Object event) {, +        synchronized (stickyEvents) {, +            Class<? extends Object> eventType = event.getClass();]