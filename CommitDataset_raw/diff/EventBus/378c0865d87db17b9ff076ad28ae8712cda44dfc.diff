[+++ b/EventBus/src/de/greenrobot/event/AsyncPoster.java, +        eventBus.getExecutorService().execute(this);, +++ b/EventBus/src/de/greenrobot/event/AsyncPoster.java, +        eventBus.getExecutorService().execute(this);, +++ b/EventBus/src/de/greenrobot/event/BackgroundPoster.java, +    private volatile boolean executorRunning;, +, +                eventBus.getExecutorService().execute(this);, +++ b/EventBus/src/de/greenrobot/event/AsyncPoster.java, +        eventBus.getExecutorService().execute(this);, +++ b/EventBus/src/de/greenrobot/event/BackgroundPoster.java, +    private volatile boolean executorRunning;, +, +                eventBus.getExecutorService().execute(this);, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +import android.os.Looper;, +import android.util.Log;, +, + * EventBus is a central publish/subscribe event system for Android. Events are posted ({@link #post(Object)}) to the, + * bus, which delivers it to subscribers that have a matching handler method for the event type. To receive events,, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered,, + * subscribers receive events until {@link #unregister(Object)} is called. By convention, event handling methods must, +    static volatile EventBus defaultInstance;, +    private static final EventBusBuilder DEFAULT_BUILDER = new EventBusBuilder();, +    private final ExecutorService executorService;, +    private final boolean failFast;, +    private final boolean logSubscriberExceptions;, +    private final boolean logNoSubscriberMessages;, +    private final boolean sendSubscriberExceptionEvent;, +    private final boolean sendNoSubscriberEvent;, +    public static EventBusBuilder builder() {, +        return new EventBusBuilder();, +    }, +, +        this(DEFAULT_BUILDER);, +    }, +, +    EventBus(EventBusBuilder builder) {, +        subscriberMethodFinder = new SubscriberMethodFinder(builder.skipMethodVerificationForClasses);, +        logSubscriberExceptions = builder.logSubscriberExceptions;, +        logNoSubscriberMessages = builder.logNoSubscriberMessages;, +        sendSubscriberExceptionEvent = builder.sendSubscriberExceptionEvent;, +        sendNoSubscriberEvent = builder.sendNoSubscriberEvent;, +        failFast = builder.failFast;, +        executorService = builder.executorService;, +            if (sendNoSubscriberEvent && eventClass != NoSubscriberEvent.class &&, +                    eventClass != SubscriberExceptionEvent.class) {, +    void invokeSubscriber(Subscription subscription, Object event) {, +                if (failFast) {, +                    throw new EventBusException("Invoking subscriber failed", cause);, +                }, +                if(sendSubscriberExceptionEvent) {, +            }, +    ExecutorService getExecutorService() {, +        return executorService;, +    }, +, +++ b/EventBus/src/de/greenrobot/event/AsyncPoster.java, +        eventBus.getExecutorService().execute(this);, +++ b/EventBus/src/de/greenrobot/event/BackgroundPoster.java, +    private volatile boolean executorRunning;, +, +                eventBus.getExecutorService().execute(this);, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +import android.os.Looper;, +import android.util.Log;, +, + * EventBus is a central publish/subscribe event system for Android. Events are posted ({@link #post(Object)}) to the, + * bus, which delivers it to subscribers that have a matching handler method for the event type. To receive events,, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered,, + * subscribers receive events until {@link #unregister(Object)} is called. By convention, event handling methods must, +    static volatile EventBus defaultInstance;, +    private static final EventBusBuilder DEFAULT_BUILDER = new EventBusBuilder();, +    private final ExecutorService executorService;, +    private final boolean failFast;, +    private final boolean logSubscriberExceptions;, +    private final boolean logNoSubscriberMessages;, +    private final boolean sendSubscriberExceptionEvent;, +    private final boolean sendNoSubscriberEvent;, +    public static EventBusBuilder builder() {, +        return new EventBusBuilder();, +    }, +, +        this(DEFAULT_BUILDER);, +    }, +, +    EventBus(EventBusBuilder builder) {, +        subscriberMethodFinder = new SubscriberMethodFinder(builder.skipMethodVerificationForClasses);, +        logSubscriberExceptions = builder.logSubscriberExceptions;, +        logNoSubscriberMessages = builder.logNoSubscriberMessages;, +        sendSubscriberExceptionEvent = builder.sendSubscriberExceptionEvent;, +        sendNoSubscriberEvent = builder.sendNoSubscriberEvent;, +        failFast = builder.failFast;, +        executorService = builder.executorService;, +            if (sendNoSubscriberEvent && eventClass != NoSubscriberEvent.class &&, +                    eventClass != SubscriberExceptionEvent.class) {, +    void invokeSubscriber(Subscription subscription, Object event) {, +                if (failFast) {, +                    throw new EventBusException("Invoking subscriber failed", cause);, +                }]