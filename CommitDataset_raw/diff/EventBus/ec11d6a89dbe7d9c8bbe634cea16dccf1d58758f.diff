[+++ b/README.md, +An event bus eases the communication between Activities, Fragments, and background threads without introducing complex and error-prone dependencies and life cycle issues. , +EventBus propagates event to all participants (e.g. background service -> activity -> multiple fragments or helper classes)., +EventBus decouples event senders and receivers and simplifies event/data exchange between your applications components. , +, +The events are delivered to matching event handling methods based on their signature., +Using EventBus :, +, +2. The receiver registers the eventbus , +    // This method will be called when a MessageEvent is posted, +    // This method will be called when a SomeOtherMessageEvent is posted, +3. Post your event from any part of your code, +EventBus can deliver threading for you: events can be posted in threads different from the posting thread. , +A common use case is dealing with UI changes. As you may know, UI changes must be done in the UI thread and networking (or other time consumming task) must be done in other treads. EventBus will help you to do networking and synchronize with the UI thread (without having to delve into thread transistions, using AsyncTask, etc). , +, +In EventBus, each event handling method `onEvent` is associated with a ThreadMode. The ThreadMode defines in which thread the event handling `onEvent` method is called:, +You may change the order of event delivery by provinding a priority to the suscriber when registering your event bus., +You may cancel the event delivery process by calling `cancelEventDelivery(Object event)` from a subscriber's event handling method. , +Any further event delivery will be canceled: subsequent subscribers won't receive the event., +```java, +    // Called in the same thread (default), +    public void onEvent(MessageEvent event){, +    	// Process the event , +    	..., +    	, +    	EventBus.getDefault().cancelEventDelivery(event) ;, +    }, +```, +, +Events are usually cancelled by higher priority subscribers. Cancelling is restricted to event handling methods running in posting thread [ThreadMode.PostThread](#delivery-threads-and-threadmodes)., +And then you post sticky events:]