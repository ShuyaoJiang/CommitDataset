[+++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        register(subscriber, defaultMethodName, false, 0);, +        register(subscriber, methodName, false, 0);, +        register(subscriber, defaultMethodName, true, 0);, +        register(subscriber, methodName, true, 0);, +    private synchronized void register(Object subscriber, String methodName, boolean sticky, int priority) {, +            subscribe(subscriber, subscriberMethod, sticky, priority);, +                subscribe(subscriber, subscriberMethod, sticky, 0);, +                        subscribe(subscriber, subscriberMethod, sticky, 0);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod, boolean sticky, int priority) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod, priority);, +        int size = subscriptions.size();, +        for (int i = 0; i <= size; i++) {, +            if (i == size || newSubscription.priority > subscriptions.get(i).priority) {, +                subscriptions.add(i, newSubscription);, +                break;, +            }, +        }, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        register(subscriber, defaultMethodName, false, 0);, +        register(subscriber, methodName, false, 0);, +        register(subscriber, defaultMethodName, true, 0);, +        register(subscriber, methodName, true, 0);, +    private synchronized void register(Object subscriber, String methodName, boolean sticky, int priority) {, +            subscribe(subscriber, subscriberMethod, sticky, priority);, +                subscribe(subscriber, subscriberMethod, sticky, 0);, +                        subscribe(subscriber, subscriberMethod, sticky, 0);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod, boolean sticky, int priority) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod, priority);, +        int size = subscriptions.size();, +        for (int i = 0; i <= size; i++) {, +            if (i == size || newSubscription.priority > subscriptions.get(i).priority) {, +                subscriptions.add(i, newSubscription);, +                break;, +            }, +        }, +++ b/EventBus/src/de/greenrobot/event/Subscription.java, +    final int priority;, +    Subscription(Object subscriber, SubscriberMethod subscriberMethod, int priority) {, +        this.priority = priority;, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        register(subscriber, defaultMethodName, false, 0);, +        register(subscriber, methodName, false, 0);, +        register(subscriber, defaultMethodName, true, 0);, +        register(subscriber, methodName, true, 0);, +    private synchronized void register(Object subscriber, String methodName, boolean sticky, int priority) {, +            subscribe(subscriber, subscriberMethod, sticky, priority);, +                subscribe(subscriber, subscriberMethod, sticky, 0);, +                        subscribe(subscriber, subscriberMethod, sticky, 0);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod, boolean sticky, int priority) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod, priority);, +        int size = subscriptions.size();, +        for (int i = 0; i <= size; i++) {, +            if (i == size || newSubscription.priority > subscriptions.get(i).priority) {, +                subscriptions.add(i, newSubscription);, +                break;, +            }, +        }, +++ b/EventBus/src/de/greenrobot/event/Subscription.java, +    final int priority;, +    Subscription(Object subscriber, SubscriberMethod subscriberMethod, int priority) {, +        this.priority = priority;, +++ b/EventBusTest/src/de/greenrobot/event/test/EventBusOrderedSubscriptionsTest.java, +/*, + * Copyright (C) 2013 Markus Junginger, greenrobot (http://greenrobot.de), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package de.greenrobot.event.test;, +, +import java.util.ArrayList;, +import java.util.List;, +, +import de.greenrobot.event.EventBus;, +import android.util.Log;, +, +/**, + * @author Markus Junginger, greenrobot, + */, +public class EventBusOrderedSubscriptionsTest extends AbstractEventBusTest {, +, +    int lastPrio = Integer.MAX_VALUE;, +    List<PrioSubscriber> registered = new ArrayList<PrioSubscriber>();, +    private String fail;, +, +    public void testOrdered() {, +        runTestOrdered("42");, +    }, +, +    public void testOrderedMainThread() {]