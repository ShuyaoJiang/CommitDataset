[+++ b/EventBus-Publish-Subscribe.png, +++ b/EventBus-Publish-Subscribe.png, +++ b/HOWTO.md, +In the [README file](README.md), you got to know EventBus, and some of its basic principles. You also saw how to add EventBus to your project using Maven Central. Great, now let's dive deeper!, +Here we pick up on the 3 steps of the README and expand a bit on the code., +### 1: Define events ###, +Events are POJO (plain old Java object) without any specific requirements., +, +### 2: Prepare subscribers ###, +Subscribers implement event handling `onEvent` methods that will be called when an event is received. They also need to register and unregister themselves to the bus., +        Toast.makeText(getActivity(), event.message, Toast.LENGTH_SHORT).show();, +    // This method will be called when a SomeOtherEvent is posted, +        doSomethingWith(event);, +### 3: Post events ###, +Post an event from any part of your code. All subscribers matching the event type will receive it., +, +    EventBus.getDefault().post(new MessageEvent("Hello everyone!"));, +, +A common use case is dealing with UI changes. In Android, UI changes must be done in the UI (main) thread. On the other hand, networking, or any time consuming task, must not run on the main thread. EventBus helps you to deal with those tasks and synchronize with the UI thread (without having to delve into thread transitions, using AsyncTask, etc)., +* **PostThread:** Subscriber will be called in the same thread, which is posting the event. This is the default. Event delivery implies the least overhead because it avoids thread switching completely. Thus this is the recommended mode for simple tasks that are known to complete is a very short time without requiring the main thread. Event handlers using this mode should return quickly to avoid blocking the posting thread, which may be the main thread., +++ b/EventBus-Publish-Subscribe.png, +++ b/HOWTO.md, +In the [README file](README.md), you got to know EventBus, and some of its basic principles. You also saw how to add EventBus to your project using Maven Central. Great, now let's dive deeper!, +Here we pick up on the 3 steps of the README and expand a bit on the code., +### 1: Define events ###, +Events are POJO (plain old Java object) without any specific requirements., +, +### 2: Prepare subscribers ###, +Subscribers implement event handling `onEvent` methods that will be called when an event is received. They also need to register and unregister themselves to the bus., +        Toast.makeText(getActivity(), event.message, Toast.LENGTH_SHORT).show();, +    // This method will be called when a SomeOtherEvent is posted, +        doSomethingWith(event);, +### 3: Post events ###, +Post an event from any part of your code. All subscribers matching the event type will receive it., +, +    EventBus.getDefault().post(new MessageEvent("Hello everyone!"));, +, +A common use case is dealing with UI changes. In Android, UI changes must be done in the UI (main) thread. On the other hand, networking, or any time consuming task, must not run on the main thread. EventBus helps you to deal with those tasks and synchronize with the UI thread (without having to delve into thread transitions, using AsyncTask, etc)., +* **PostThread:** Subscriber will be called in the same thread, which is posting the event. This is the default. Event delivery implies the least overhead because it avoids thread switching completely. Thus this is the recommended mode for simple tasks that are known to complete is a very short time without requiring the main thread. Event handlers using this mode should return quickly to avoid blocking the posting thread, which may be the main thread., +++ b/LICENSE, +, +                                 Apache License, +                           Version 2.0, January 2004, +                        http://www.apache.org/licenses/, +, +   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION, +, +   1. Definitions., +, +      "License" shall mean the terms and conditions for use, reproduction,, +      and distribution as defined by Sections 1 through 9 of this document., +, +      "Licensor" shall mean the copyright owner or entity authorized by, +      the copyright owner that is granting the License., +, +      "Legal Entity" shall mean the union of the acting entity and all, +      other entities that control, are controlled by, or are under common, +      control with that entity. For the purposes of this definition,, +      "control" means (i) the power, direct or indirect, to cause the, +      direction or management of such entity, whether by contract or, +      otherwise, or (ii) ownership of fifty percent (50%) or more of the, +      outstanding shares, or (iii) beneficial ownership of such entity., +, +      "You" (or "Your") shall mean an individual or Legal Entity, +      exercising permissions granted by this License., +, +      "Source" form shall mean the preferred form for making modifications,, +      including but not limited to software source code, documentation, +      source, and configuration files., +, +      "Object" form shall mean any form resulting from mechanical, +      transformation or translation of a Source form, including but, +      not limited to compiled object code, generated documentation,, +      and conversions to other media types., +, +      "Work" shall mean the work of authorship, whether in Source or, +      Object form, made available under the License, as indicated by a, +      copyright notice that is included in or attached to the work, +      (an example is provided in the Appendix below)., +, +      "Derivative Works" shall mean any work, whether in Source or Object, +      form, that is based on (or derived from) the Work and for which the, +      editorial revisions, annotations, elaborations, or other modifications, +      represent, as a whole, an original work of authorship. For the purposes, +      of this License, Derivative Works shall not include works that remain, +      separable from, or merely link (or bind by name) to the interfaces of,, +      the Work and Derivative Works thereof., +, +      "Contribution" shall mean any work of authorship, including, +      the original version of the Work and any modifications or additions, +      to that Work or Derivative Works thereof, that is intentionally, +      submitted to Licensor for inclusion in the Work by the copyright owner, +      or by an individual or Legal Entity authorized to submit on behalf of, +      the copyright owner. For the purposes of this definition, "submitted", +      means any form of electronic, verbal, or written communication sent, +      to the Licensor or its representatives, including but not limited to, +      communication on electronic mailing lists, source code control systems,, +      and issue tracking systems that are managed by, or on behalf of, the, +      Licensor for the purpose of discussing and improving the Work, but, +      excluding communication that is conspicuously marked or otherwise]