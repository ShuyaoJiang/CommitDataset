[+++ b/EventBus/src/de/greenrobot/event/EventBus.java, +import android.os.Handler;, +import android.os.Looper;, +import android.os.Message;, +    public enum ThreadMode {, +        /** Subscriber will be called in the same thread, which is posting the event. */, +        PostThread,, +        /** Subscriber will be called in Android's main thread (sometimes referred to as UI thread). */, +        MainThread,, +        /* BackgroundThread */, +    }, +, +    private final ThreadLocal<List<Object>> currentThreadEventQueue = new ThreadLocal<List<Object>>() {, +    private PostViaHandler mainThreadPoster;, +, +        mainThreadPoster = new PostViaHandler(Looper.getMainLooper());, +        register(subscriber, defaultMethodName, ThreadMode.PostThread);, +    public void registerForMainThread(Object subscriber) {, +        register(subscriber, defaultMethodName, ThreadMode.MainThread);, +    }, +, +    public void register(Object subscriber, String methodName, ThreadMode threadMode) {, +            subscribe(subscriber, method, eventType, threadMode);, +        register(subscriber, defaultMethodName, ThreadMode.PostThread, eventType, moreEventTypes);, +    public void registerForMainThread(Object subscriber, Class<?> eventType, Class<?>... moreEventTypes) {, +        register(subscriber, defaultMethodName, ThreadMode.MainThread, eventType, moreEventTypes);, +    }, +, +    public synchronized void register(Object subscriber, String methodName, ThreadMode threadMode, Class<?> eventType,, +        subscribe(subscriber, method, eventType, threadMode);, +            subscribe(subscriber, method, anothereventType, threadMode);, +    private void subscribe(Object subscriber, Method subscriberMethod, Class<?> eventType, ThreadMode threadMode) {, +        Subscription subscription = new Subscription(subscriber, subscriberMethod, threadMode);, +        List<Object> eventQueue = currentThreadEventQueue.get();, +                    if (subscription.threadMode == ThreadMode.PostThread) {, +                    } else if (subscription.threadMode == ThreadMode.MainThread) {, +                        mainThreadPoster.enqueue(event, subscription);, +                    } else {, +                        throw new IllegalStateException("Unknown thread mode: " + subscription.threadMode);, +                    }, +    static void addInterfaces(List<Class<?>> eventTypes, Class<?>[] interfaces) {, +    static void postToSubscribtion(Subscription subscription, Object event) throws Error {, +        final ThreadMode threadMode;, +        Subscription(Object subscriber, Method method, ThreadMode threadMode) {, +            this.threadMode = threadMode;, +    final static class PostViaHandler extends Handler {, +, +        PostViaHandler(Looper looper) {, +            super(looper);, +        }, +, +        void enqueue(Object event, Subscription subscription) {, +            PendingPost pendingPost = PendingPost.obtainPendingPost(event, subscription);, +            Message message = obtainMessage();, +            message.obj = pendingPost;, +            if (!sendMessage(message)) {, +                throw new RuntimeException("Could not send handler message");, +            }, +        }, +, +        @Override, +        public void handleMessage(Message msg) {, +            PendingPost pendingPost = (PendingPost) msg.obj;, +            Object event = pendingPost.event;, +            Subscription subscription = pendingPost.subscription;, +            PendingPost.releasePendingPost(pendingPost);, +            postToSubscribtion(subscription, event);, +        }, +, +    }, +, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +import android.os.Handler;, +import android.os.Looper;, +import android.os.Message;, +    public enum ThreadMode {, +        /** Subscriber will be called in the same thread, which is posting the event. */, +        PostThread,, +        /** Subscriber will be called in Android's main thread (sometimes referred to as UI thread). */, +        MainThread,, +        /* BackgroundThread */, +    }, +, +    private final ThreadLocal<List<Object>> currentThreadEventQueue = new ThreadLocal<List<Object>>() {, +    private PostViaHandler mainThreadPoster;, +, +        mainThreadPoster = new PostViaHandler(Looper.getMainLooper());, +        register(subscriber, defaultMethodName, ThreadMode.PostThread);, +    public void registerForMainThread(Object subscriber) {, +        register(subscriber, defaultMethodName, ThreadMode.MainThread);, +    }, +, +    public void register(Object subscriber, String methodName, ThreadMode threadMode) {, +            subscribe(subscriber, method, eventType, threadMode);, +        register(subscriber, defaultMethodName, ThreadMode.PostThread, eventType, moreEventTypes);, +    public void registerForMainThread(Object subscriber, Class<?> eventType, Class<?>... moreEventTypes) {, +        register(subscriber, defaultMethodName, ThreadMode.MainThread, eventType, moreEventTypes);, +    }, +, +    public synchronized void register(Object subscriber, String methodName, ThreadMode threadMode, Class<?> eventType,]