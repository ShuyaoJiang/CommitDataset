[+++ b/EventBus/.classpath, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>, +++ b/EventBus/.classpath, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>, +++ b/EventBus/build.gradle, +version = '2.1.0-beta-3-SNAPSHOT', +    deployerJars, +    // deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.4', +    deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2', +            // exclude 'de/greenrobot/event/util/**', +            if(project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername') , +                && project.hasProperty('preferedPassword')) {, +                configuration = configurations.deployerJars, +                repository(url: preferedRepo) {, +                    authentication(userName: preferedUsername, password: preferedPassword), +                }, +            } else if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {, +++ b/EventBus/.classpath, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>, +++ b/EventBus/build.gradle, +version = '2.1.0-beta-3-SNAPSHOT', +    deployerJars, +    // deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.4', +    deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2', +            // exclude 'de/greenrobot/event/util/**', +            if(project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername') , +                && project.hasProperty('preferedPassword')) {, +                configuration = configurations.deployerJars, +                repository(url: preferedRepo) {, +                    authentication(userName: preferedUsername, password: preferedPassword), +                }, +            } else if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {, +++ b/EventBus/src/de/greenrobot/event/util/AsyncExecutor.java, +import android.app.Activity;, +            return buildForScope(null);, +        }, +, +        public AsyncExecutor buildForActivityScope(Activity activity) {, +            return buildForScope(activity.getClass());, +        }, +        , +        public AsyncExecutor buildForScope(Object executionContext) {, +            return new AsyncExecutor(threadPool, eventBus, failureEventType, executionContext);, +    private Object scope;, +    private AsyncExecutor(Executor threadPool, EventBus eventBus, Class<?> failureEventType, Object scope) {, +        this.scope = scope;, +                    if (e instanceof HasExecutionScope) {, +                        ((HasExecutionScope) e).setExecutionScope(scope);, +                    }, +++ b/EventBus/.classpath, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>, +	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>, +++ b/EventBus/build.gradle, +version = '2.1.0-beta-3-SNAPSHOT', +    deployerJars, +    // deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.4', +    deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2', +            // exclude 'de/greenrobot/event/util/**', +            if(project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername') , +                && project.hasProperty('preferedPassword')) {, +                configuration = configurations.deployerJars, +                repository(url: preferedRepo) {, +                    authentication(userName: preferedUsername, password: preferedPassword), +                }, +            } else if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {, +++ b/EventBus/src/de/greenrobot/event/util/AsyncExecutor.java, +import android.app.Activity;, +            return buildForScope(null);, +        }, +, +        public AsyncExecutor buildForActivityScope(Activity activity) {, +            return buildForScope(activity.getClass());, +        }, +        , +        public AsyncExecutor buildForScope(Object executionContext) {, +            return new AsyncExecutor(threadPool, eventBus, failureEventType, executionContext);, +    private Object scope;, +    private AsyncExecutor(Executor threadPool, EventBus eventBus, Class<?> failureEventType, Object scope) {, +        this.scope = scope;, +                    if (e instanceof HasExecutionScope) {, +                        ((HasExecutionScope) e).setExecutionScope(scope);, +                    }, +++ b/EventBus/src/de/greenrobot/event/util/ErrorDialogManager.java, +        private Object executionScope;, +            if (!isInExecutionScope(executionScope, event)) {, +                return;, +            }, +        public static void attachTo(Activity activity, Object executionScope, boolean finishAfterDialog,, +                Bundle argumentsForErrorDialog) {, +            fragment.executionScope = executionScope;, +        private Object executionScope;, +            if (!isInExecutionScope(executionScope, event)) {, +                return;, +            }, +        public static void attachTo(Activity activity, Object executionScope, boolean finishAfterDialog, Bundle argumentsForErrorDialog) {, +            fragment.executionScope = executionScope;, +    /** Scope is limited to the activity's class. */]