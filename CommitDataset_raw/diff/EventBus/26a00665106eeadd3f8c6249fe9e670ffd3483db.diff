[+++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +            findState.subscriberInfo = getSubscriberInfo(findState);, +            if (findState.subscriberInfo != null) {, +                SubscriberMethod[] array = findState.subscriberInfo.createSubscriberMethods();, +    private SubscriberInfo getSubscriberInfo(FindState findState) {, +        if (findState.subscriberInfo != null && findState.subscriberInfo.superSubscriberInfoClass != null) {, +            try {, +                SubscriberInfo superclassInfo = (SubscriberInfo) findState.subscriberInfo.superSubscriberInfoClass.newInstance();, +                if (findState.clazz == superclassInfo.subscriberClass) {, +                    return superclassInfo;, +                }, +            } catch (IllegalAccessException | InstantiationException e) {, +                throw new EventBusException(e);, +            }, +        }, +        String infoClass = findState.clazz.getName().replace('$', '_') + "_EventBusInfo";, +            throw new EventBusException("Could not get infos for " + findState.clazz, e);, +        public SubscriberInfo subscriberInfo;, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +            findState.subscriberInfo = getSubscriberInfo(findState);, +            if (findState.subscriberInfo != null) {, +                SubscriberMethod[] array = findState.subscriberInfo.createSubscriberMethods();, +    private SubscriberInfo getSubscriberInfo(FindState findState) {, +        if (findState.subscriberInfo != null && findState.subscriberInfo.superSubscriberInfoClass != null) {, +            try {, +                SubscriberInfo superclassInfo = (SubscriberInfo) findState.subscriberInfo.superSubscriberInfoClass.newInstance();, +                if (findState.clazz == superclassInfo.subscriberClass) {, +                    return superclassInfo;, +                }, +            } catch (IllegalAccessException | InstantiationException e) {, +                throw new EventBusException(e);, +            }, +        }, +        String infoClass = findState.clazz.getName().replace('$', '_') + "_EventBusInfo";, +            throw new EventBusException("Could not get infos for " + findState.clazz, e);, +        public SubscriberInfo subscriberInfo;, +++ b/EventBusAnnotationProcessor/src/de/greenrobot/event/annotationprocessor/EventBusAnnotationProcessor.java, +import java.io.BufferedWriter;, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +, +import de.greenrobot.event.Subscribe;, +                String infoClassName = getInfoClass(subscriberClass, myPackage);, +                String infoSuperClass = getSuperclassInfoClass(subscriberClass, myPackage);, +                writer.write("        super(" + subscriberClassName + ".class, " + infoSuperClass + ", " + next + ");\n");, +    private String getSuperclassInfoClass(TypeElement subscriberClass, String myPackage) {, +        DeclaredType superclassType = (DeclaredType) subscriberClass.getSuperclass();, +        if (superclassType != null) {, +            TypeElement superclass = (TypeElement) superclassType.asElement();, +            if (methodsByClass.containsKey(superclass) && !classesToSkip.contains(superclass)) {, +                return getInfoClass(superclass, myPackage) + ".class";, +            }, +        }, +        return "null";, +    }, +, +    private String getInfoClass(TypeElement subscriberClass, String myPackage) {, +        String subscriberClassName = getClassString(subscriberClass, myPackage);, +        return subscriberClassName.replace('.', '_') + CLASS_POSTFIX;, +    }, +, +            String nextInfoClassName = getInfoClass(nextEntry, nextPackage);, +        String className = subscriberClass.getQualifiedName().toString();, +        if (!subscriberPackage.isEmpty() && className.startsWith(subscriberPackage)) {, +            className = className.substring(subscriberPackage.length() + 1);, +        }, +        return className;]