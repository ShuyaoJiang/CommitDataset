[+++ b/CHANGELOG.md, +### V3.0.0 (201?-??-??) Annotations, +* Breaking change: switch subscriber methods to annotations, +* Using annotations, each subscriber method can set sticky behavior and priority individually, +* Annotation processor indexes annotation information for efficient subscriber registration on Android, +* TODO: Renamed package and artifact id to allow co-existence with libs using EventBus 2 internally, +, +**Note:** This is a breaking change release: there is no inter-op between EventBus versions 2 and 3; they can run in parallel though., +, +++ b/CHANGELOG.md, +### V3.0.0 (201?-??-??) Annotations, +* Breaking change: switch subscriber methods to annotations, +* Using annotations, each subscriber method can set sticky behavior and priority individually, +* Annotation processor indexes annotation information for efficient subscriber registration on Android, +* TODO: Renamed package and artifact id to allow co-existence with libs using EventBus 2 internally, +, +**Note:** This is a breaking change release: there is no inter-op between EventBus versions 2 and 3; they can run in parallel though., +, +++ b/COMPARISON.md, +        <td>Annotations (since 3.0, can be precompiled for best performance)</td>, +_**Note:** the following information is outdated, preprocessed annotations are much faster than EventBus 2.x, on which the following table is based._, +, +++ b/CHANGELOG.md, +### V3.0.0 (201?-??-??) Annotations, +* Breaking change: switch subscriber methods to annotations, +* Using annotations, each subscriber method can set sticky behavior and priority individually, +* Annotation processor indexes annotation information for efficient subscriber registration on Android, +* TODO: Renamed package and artifact id to allow co-existence with libs using EventBus 2 internally, +, +**Note:** This is a breaking change release: there is no inter-op between EventBus versions 2 and 3; they can run in parallel though., +, +++ b/COMPARISON.md, +        <td>Annotations (since 3.0, can be precompiled for best performance)</td>, +_**Note:** the following information is outdated, preprocessed annotations are much faster than EventBus 2.x, on which the following table is based._, +, +++ b/EventBus/build.gradle, +archivesBaseName = 'eventbus', +version = '3.0.0-beta2', +++ b/CHANGELOG.md, +### V3.0.0 (201?-??-??) Annotations, +* Breaking change: switch subscriber methods to annotations, +* Using annotations, each subscriber method can set sticky behavior and priority individually, +* Annotation processor indexes annotation information for efficient subscriber registration on Android, +* TODO: Renamed package and artifact id to allow co-existence with libs using EventBus 2 internally, +, +**Note:** This is a breaking change release: there is no inter-op between EventBus versions 2 and 3; they can run in parallel though., +, +++ b/COMPARISON.md, +        <td>Annotations (since 3.0, can be precompiled for best performance)</td>, +_**Note:** the following information is outdated, preprocessed annotations are much faster than EventBus 2.x, on which the following table is based._, +, +++ b/EventBus/build.gradle, +archivesBaseName = 'eventbus', +version = '3.0.0-beta2', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * Copyright (C) 2012-2015 Markus Junginger, greenrobot (http://greenrobot.de), + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +    public static String TAG = "EventBus";, +    private static final Map<Class<?>, List<Class<?>>> eventTypesCache = new HashMap<>();, +        subscriptionsByEventType = new HashMap<>();, +        typesBySubscriber = new HashMap<>();, +        stickyEvents = new ConcurrentHashMap<>();, +        subscriberMethodFinder = new SubscriberMethodFinder(builder.subscriberInfoIndexes,, +                builder.strictMethodVerification, builder.ignoreGeneratedIndex);, +     * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., +     * The {@link de.greenrobot.event.Subscribe} annotation also allows configuration like {@link, +     * de.greenrobot.event.ThreadMode} and priority., +        Class<?> subscriberClass = subscriber.getClass();, +        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);, +        synchronized (this) {, +                subscribe(subscriber, subscriberMethod);, +            }, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +            subscriptions = new CopyOnWriteArrayList<>();, +            if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {, +            subscribedEvents = new ArrayList<>();, +        if (subscriberMethod.sticky) {, +     * {@link Subscribe#priority()}). Canceling is restricted to event handling methods running in posting thread, +     * {@link ThreadMode#POSTING}., +        } else if (postingState.subscription.subscriberMethod.threadMode != ThreadMode.POSTING) {, +     * event of an event's type is kept in memory for future access by subscribers using {@link Subscribe#sticky()}., +            case POSTING:, +            case MAIN:, +            case BACKGROUND:, +            case ASYNC:, +    private static List<Class<?>> lookupAllEventTypes(Class<?> eventClass) {, +                eventTypes = new ArrayList<>();, +++ b/CHANGELOG.md, +### V3.0.0 (201?-??-??) Annotations, +* Breaking change: switch subscriber methods to annotations, +* Using annotations, each subscriber method can set sticky behavior and priority individually, +* Annotation processor indexes annotation information for efficient subscriber registration on Android, +* TODO: Renamed package and artifact id to allow co-existence with libs using EventBus 2 internally, +, +**Note:** This is a breaking change release: there is no inter-op between EventBus versions 2 and 3; they can run in parallel though., +]