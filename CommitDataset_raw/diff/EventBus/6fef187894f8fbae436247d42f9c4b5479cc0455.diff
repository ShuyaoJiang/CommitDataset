[+++ b/EventBusTest/src/de/greenrobot/greenbus/test/EventBusMultithreadedTest.java, +    /**, +     * Iteration count per test (will be divided by number of threads); run with 1000 for quick testing, and with 10000, +     * from time to time., +     */, +    private static final int COUNT = 1000;, +, +    private EventBus eventBus;, +    private String lastStringEvent;, +    public void testPost01Thread() throws InterruptedException {, +    public void testPost04Threads() throws InterruptedException {, +    public void testPost40Threads() throws InterruptedException {, +    public void testPostMixedEventType01Thread() throws InterruptedException {, +        runThreadsMixedEventType(1);, +    public void testPostMixedEventType04Threads() throws InterruptedException {, +        runThreadsMixedEventType(4);, +    }, +, +    public void testPostMixedEventType40Threads() throws InterruptedException {, +        runThreadsMixedEventType(40);, +    }, +, +    private void runThreadsSingleEventType(int threadCount) throws InterruptedException {, +        int iterations = COUNT / threadCount;, +        List<PosterThread> threads = startThreads(latch, threadCount, iterations, "Hello");, +        assertEquals("Hello", lastStringEvent);, +    private void runThreadsMixedEventType(int threadCount) throws InterruptedException {, +        int iterations = COUNT / threadCount / 2;, +        eventBus.register(this);, +, +        CountDownLatch latch = new CountDownLatch(2 * threadCount + 1);, +        List<PosterThread> threadsString = startThreads(latch, threadCount, iterations, "Hello");, +        List<PosterThread> threadsInteger = startThreads(latch, threadCount, iterations, 42);, +        List<PosterThread> threads = new ArrayList<PosterThread>();, +        threads.addAll(threadsString);, +        threads.addAll(threadsInteger);, +        long time = triggerAndWaitForThreads(threads, latch);, +, +        Log.d(EventBus.TAG, threadCount * 2 + " mixed threads posted " + iterations + " events each in " + time + "ms");, +, +        assertEquals("Hello", lastStringEvent);, +        assertEquals(42, lastIntegerEvent.intValue());, +, +        int expectedCount = threadCount * iterations;, +        assertEquals(expectedCount, countStringEvent.intValue());, +        assertEquals(expectedCount, countIntegerEvent.intValue());, +        assertEquals(expectedCount * 2, countObjectEvent.intValue());, +    }, +, +        return System.currentTimeMillis() - start;, +    private List<PosterThread> startThreads(CountDownLatch latch, int threadCount, int iterations, Object eventToPost)]