[+++ b/EventBusAnnotationProcessor/src/de/greenrobot/event/annotationprocessor/EventBusAnnotationProcessor.java, +    public static final String INFO_CLASS_POSTFIX = "_EventBusInfo";, +    private final Map<TypeElement, List<ExecutableElement>> methodsByClass = new HashMap<>();, +    private final Map<TypeElement, String> infoByClass = new HashMap<>();, +    private final Set<TypeElement> classesToSkip = new HashSet<>();, +                createInfoFiles();, +                    createInfoIndexFile(index);, +    private void createInfoFiles() {, +                infoByClass.put(subscriberClass, myPackage + "." + infoClassName);, +, +        return subscriberClassName.replace('.', '_') + INFO_CLASS_POSTFIX;, +    private void createInfoIndexFile(String index) {, +            writer.write("    private static final Map<Class<?>, Class<? extends SubscriberInfo>> SUBSCRIBER_INDEX;\n\n");, +            writer.write("        SUBSCRIBER_INDEX = new HashMap<Class<?>, Class<? extends SubscriberInfo>>();\n");, +            writeIndexLines(writer, myPackage);, +            writer.write("        Class<? extends SubscriberInfo> infoClass = SUBSCRIBER_INDEX.get(subscriberClass);\n");, +            writer.write("        if (infoClass != null) {\n");, +            writer.write("                return infoClass.newInstance();\n");, +            writer.write("        } else {\n");, +            writer.write("            return null;\n");, +            writer.write("        }\n");, +    private void writeIndexLines(BufferedWriter writer, String myPackage) throws IOException {, +        for (Map.Entry<TypeElement, String> entry : infoByClass.entrySet()) {, +            TypeElement subscriberTypeElement = entry.getKey();, +            String infoClass = entry.getValue();, +            if (!classesToSkip.contains(subscriberTypeElement)) {, +                int infoPeriod = infoClass.lastIndexOf('.');, +                String infoPackage = infoPeriod > 0 ? infoClass.substring(0, infoPeriod) : null;, +                if (infoPackage.equals(myPackage)) {, +                    infoClass = infoClass.substring(infoPeriod + 1);, +                }, +                String subscriberClass = getClassString(subscriberTypeElement, myPackage);, +                if (isVisible(myPackage, subscriberTypeElement)) {, +                    writeLine(writer, 2, "SUBSCRIBER_INDEX.put(", subscriberClass + ".class,", infoClass + ".class);\n");, +                } else {, +                    writer.write("        // Subscriber not visible to index: " + subscriberClass + "\n");, +                }, +            }, +        }, +    }, +, +    private boolean isVisible(String myPackage, TypeElement typeElement) {, +        Set<Modifier> modifiers = typeElement.getModifiers();, +        boolean visible;, +        if (modifiers.contains(Modifier.PUBLIC)) {, +            visible = true;, +        } else if (modifiers.contains(Modifier.PRIVATE) || modifiers.contains(Modifier.PROTECTED)) {, +            visible = false;, +        } else {, +            String subscriberPackage = getPackageElement(typeElement).getQualifiedName().toString();, +            if (myPackage == null) {, +                visible = subscriberPackage.length() == 0;, +            } else {, +                visible = myPackage.equals(subscriberPackage);, +            }, +        }, +        return visible;, +    }, +]