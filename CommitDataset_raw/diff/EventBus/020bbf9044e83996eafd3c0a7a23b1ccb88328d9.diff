[+++ b/README.md, +1. Implement any number of event handling methods in the subscriber:<br/>, +<code>public void onEvent(AnyEventType event) {}</code>, +2. Register subscribers:<br/>, +<code>eventBus.register(this);</code>, +3. Post events to the bus:<br/>, +<code>eventBus.post(event);</code>, +4. Unregister subscriber:<br/>, +<code>eventBus.unregister(this);</code>, +, +The API is very close to [Guava's event bus](http://code.google.com/p/guava-libraries/wiki/EventBusExplained) and its Android port [otto](http://square.github.com/otto/) ([announcement](http://corner.squareup.com/2012/07/otto.html)). Have a look at their documentation for publishers and posting events (skip producers, EventBus does not support producers because we haven't figured out valid use cases for those)., +* **Simple to use thread transitions:** Events can be received in Android's main thread, even if they were posted in a background thread. Subscribers that want to be called on the main thread call registerForMainThread() instead of register(). For example, UI updates become trivial for state changes caused by background workers. And because of the decoupling, , +* **NOT based on annotations:** Querying annotations are slow on Android, especially before Android 4.0. Have a look at this [Android bug report](http://code.google.com/p/android/issues/detail?id=7811), +* **Based on conventions:** Event handling methods are called "onEvent" (you could supply different names, but this is not encouraged)., +* **Performanced optimized:** Who wants to be the first whos benchmarks it against otto? :D, +* **Tiny:** The jar is less than 20 KBytes., +* **Convenience singleton:** You can get a process wide event bus instance by calling EventBus.getDefault(). You can still call new EventBus() to create any number of local busses., +* **Subscriber and event inheritance:** Event handler methods may be defined in super classes, and events are posted to handlers of the event's super classes including any implemented interfaces. For example, subscriber may register to events of the type Object to receive all events posted on the event bus., +* **Selective registration:** It's possible to register only for specific event types. This also allows subscribers to register only some of their event handling methods for main thread event delivery.]