[+++ b/EventBus/src/de/greenrobot/event/EventBus.java, +import java.util.concurrent.ConcurrentHashMap;, +    private static final Map<Class<?>, Class<?>> skipMethodNameVerificationForClasses = new ConcurrentHashMap<Class<?>, Class<?>>();, +    /** For unit test primarily. */, +    public static void clearCaches() {, +        methodCache.clear();, +        eventTypesCache.clear();, +    }, +, +    public static void skipMethodNameVerificationFor(Class<?> clazz) {, +        if (!methodCache.isEmpty()) {, +            throw new IllegalStateException("This method must be called before registering anything");, +        }, +        skipMethodNameVerificationForClasses.put(clazz, clazz);, +    }, +    , +    /** For unit test primarily. */, +    public static void clearSkipMethodNameVerifications() {, +        skipMethodNameVerificationForClasses.clear();, +    }, +, +                            if (skipMethodNameVerificationForClasses.containsKey(clazz)) {, +                                continue;, +                            } else {, +                        }, +            throw new EventBusException("Subscriber " + subscriberClass + " has no methods called " + eventMethodName);, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +import java.util.concurrent.ConcurrentHashMap;, +    private static final Map<Class<?>, Class<?>> skipMethodNameVerificationForClasses = new ConcurrentHashMap<Class<?>, Class<?>>();, +    /** For unit test primarily. */, +    public static void clearCaches() {, +        methodCache.clear();, +        eventTypesCache.clear();, +    }, +, +    public static void skipMethodNameVerificationFor(Class<?> clazz) {, +        if (!methodCache.isEmpty()) {, +            throw new IllegalStateException("This method must be called before registering anything");, +        }, +        skipMethodNameVerificationForClasses.put(clazz, clazz);, +    }, +    , +    /** For unit test primarily. */, +    public static void clearSkipMethodNameVerifications() {, +        skipMethodNameVerificationForClasses.clear();, +    }, +, +                            if (skipMethodNameVerificationForClasses.containsKey(clazz)) {, +                                continue;, +                            } else {, +                        }, +            throw new EventBusException("Subscriber " + subscriberClass + " has no methods called " + eventMethodName);, +++ b/EventBusTest/src/de/greenrobot/event/test/AbstractEventBusTest.java, +        EventBus.clearCaches();, +        EventBus.clearSkipMethodNameVerifications();, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +import java.util.concurrent.ConcurrentHashMap;, +    private static final Map<Class<?>, Class<?>> skipMethodNameVerificationForClasses = new ConcurrentHashMap<Class<?>, Class<?>>();, +    /** For unit test primarily. */, +    public static void clearCaches() {, +        methodCache.clear();, +        eventTypesCache.clear();, +    }, +, +    public static void skipMethodNameVerificationFor(Class<?> clazz) {, +        if (!methodCache.isEmpty()) {, +            throw new IllegalStateException("This method must be called before registering anything");, +        }, +        skipMethodNameVerificationForClasses.put(clazz, clazz);, +    }, +    , +    /** For unit test primarily. */, +    public static void clearSkipMethodNameVerifications() {, +        skipMethodNameVerificationForClasses.clear();, +    }, +, +                            if (skipMethodNameVerificationForClasses.containsKey(clazz)) {, +                                continue;, +                            } else {, +                        }, +            throw new EventBusException("Subscriber " + subscriberClass + " has no methods called " + eventMethodName);, +++ b/EventBusTest/src/de/greenrobot/event/test/AbstractEventBusTest.java, +        EventBus.clearCaches();, +        EventBus.clearSkipMethodNameVerifications();, +++ b/EventBusTest/src/de/greenrobot/event/test/EventBusMethodModifiersTest.java, +import android.os.Looper;, +import de.greenrobot.event.EventBus;, +import de.greenrobot.event.EventBusException;, +, +    public void testIllegalMethodNameThrow() {, +        try {, +            eventBus.register(new IllegalEventMethodName());, +            fail("Illegal name registered");, +        } catch (EventBusException ex) {, +            // OK, expected, +        }, +    }, +, +    public void testIllegalMethodNameSkip() {, +        EventBus.skipMethodNameVerificationFor(IllegalEventMethodName.class);]