[+++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +            Method[] methods = clazz.getDeclaredMethods();, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +            Method[] methods = clazz.getDeclaredMethods();, +++ b/README.md, +EventBus is an Android optimized publish/subscribe event bus. A typical use case for Android apps is gluing Activities, Fragments, and background threads together. Conventional wiring of those elements often introduces complex and error-prone dependencies and life cycle issues. With EventBus propagating listeners through all participants (e.g. background service -> activity -> multiple fragments or helper classes) becomes deprecated. EventBus decouples event senders and receivers and thus simplifies communication between app components. Less code, better quality. And you don't need to implement a single interface!, +General Usage and API, +In EventBus, subscribers implement event handling methods and register themselves to the bus. Posted events are delivered to matching event handling methods based on their event type (the Java class/interfaces implemented by the event)., +Using EventBus takes four simple steps:, +1. Implement any number of event handling methods in the subscriber:<br/>, +<code>public void onEvent(AnyEventType event) {}</code>, +2. Register subscribers:<br/>, +<code>eventBus.register(this);</code>, +3. Post events to the bus:<br/>, +<code>eventBus.post(event);</code>, +4. Unregister subscriber:<br/>, +<code>eventBus.unregister(this);</code>, +EventBus is pushed to [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22de.greenrobot%22%20AND%20a%3A%22eventbus%22) repository, so you can simply add a dependency (group ID "de.greenrobot" and arifact ID "eventbus"). If you do not use Maven or Gradle, download the jar from [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22de.greenrobot%22%20AND%20a%3A%22eventbus%22) and copy it into the libs folder of your Android project., +, +Delivery Threads, +----------------, +EventBus can deliver events in other threads independently from the posting thread. Threading is crucial to all Android apps, and EventBus will make threading easier. In Android development, UI changes must be done in the UI thread, while networking is forbidden here. If you want to do both networking and UI using standard Android API, you will need to take care of thread transistions, e.g. by using AsyncTask. If you use an event-based approach using EventBus, this gets simpler., +In EventBus, each event handling method is associated with a thread mode (have a look at the ThreadMode enum). The thread mode defines in which thread the event handling method is called:, +*Example:* Consider your subscriber updates the UI, but the triggering event is posted by a background thread (using `eventBus.post(event)`). The name of the event handling method should be `onEventMainThread`. EventBus takes care of calling the method in the main thread without any further code required, +*TODO. For now, this is just the javadoc for the method register(Object subscriber, int priority):*, +Like register(Object) with an additional subscriber priority to influence the order of event delivery. Within the same delivery thread (ThreadMode), higher priority subscribers will receive events before others with a lower priority. The default priority is 0. Note: the priority does *NOT* affect the order of delivery among subscribers with different ThreadModes!, +Cancelling further event delivery, +---------------------------------, +*TODO. For now, this is just the javadoc for the method cancelEventDelivery(Object event):*, +Called from a subscriber's event handling method, further event delivery will be canceled. Subsequent subscribers won't receive the event. Events are usually canceled by higher priority subscribers (see register(Object, int)). Canceling is restricted to event handling methods running in posting thread ThreadMode.PostThread., +API-wise events are made sticky by using `postSticky(Object event)` instead of `post(Object event)`. Subscribers that want to get previously posted sticky events, use `registerSticky(...)` instead of `register(...)`. Alternatively, the last sticky event of a certain event type can be queried by using `getStickyEvent(Class<?> eventType)`., +TODO, +Release History, +### V2.2.1 (2014-05-21) Bug fix release, +* Fixed an issue with AsyncExecutor and execution scope, +, +### V2.2.0 (2013-11-18) Feature release, subscriber priority, +* Register subscribers with a priority to to influence the order of event delivery (per delivery thread), +* Event delivery can be canceled by subscribers so subsequent subscribers will not receive the event, +* Added "isRegistered" and "removeAllStickyEvents" methods, +* Deprecated registration methods with custom method names and event class filters, +* Starting with EventBus 2.2 we enforced methods to be public, +* Fixed a race conditions with subscriber registration, +* Fixed NoSubscriberEvent delivery after unregister, +, +### V2.1.0 (2013-11-15) Bug fix release, experimental util package, +* Experimental: AsyncExecutor executes RunnableEx and wraps exceptions into FailureEvents, +* Experimental: exception to UI mapping (for now based on dialogs), +* Fixed race condition with queued events that were delivered after subscription was unregistered. This is important for main thread events tied to application life cycle., +* Fixed typos and improved readme (#17, #22, #37, #39), +* Make getStickyEvent and removeStickyEvent generic (#45), +* Fixed bug in SubscriberMethod.equals() (#38), +, +### V2.0.2 (2013-03-02) Bug fix release, +* Fixed build dependencies, are "provided" now, +, +### V2.0.1 (2013-02-25) Bug fix release, Gradle and Maven Central, +* Fixed #15: removeStickyEvent(...) does not remove event the first time, +* Introduced Gradle build scripts for main project, +* Maven artifacts are pushed to Maven Central starting with this version, +* Added Travis CI, +, +### V2.0.0 (2012-10-23) Major feature release, +* Event methods define for themselves in which thread they get called. This is done by providing "modifiers" to the method name, e.g. onEventMainThread is called by the main thread without further configuration. Have a look at the JavaDoc of the enum ThreadMode for all available thread modes., +* The event method modifiers replace registerForMainThread methods. Moving this information to the method itself should make things clearer., +* Using event method modifiers, subscribers can receive the same event type in different threads if they choose to., +* New "BackgroundThread" modifier for onEvent handler methods ensures that event handler methods are called in a background thread. If an event is posted from a non-main thread, handler methods will be called directly. If posted from the main thread, EventBus will use a background thread to call the handler methods., +* New "Async" modifier for onEvent handler methods ensures that each event handler method is called completely asynchronously., +* Better performance: Delivery of multiple events in the main thread got significantly faster., +* Added sticky events, which are inspired by sticky broadcasts of the Android system. EventBus keeps the most recent sticky events in memory. Subscribers registering with the new method registerSticky, will receive sticky events right away. You can also query and remove sticky events (methods getStickyEvent and removeStickyEvent)., +* By listening to SubscriberExceptionEvent, it is possible to react to Exceptions occuring in subscribers., +* Bug fixes, and internal refactorings, +, +### V1.0.1 (2012-07-31): Important bug fix release, +Please update! Now, EventBus.unregister releases all internal references to the subscriber., +, +### V1.0.0 (2012-07-16): First public release]