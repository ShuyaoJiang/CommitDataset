[+++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    private final boolean eventInheritance;, +        eventInheritance = builder.eventInheritance;, +        if (eventInheritance) {, +            List<Class<?>> eventTypes = lookupAllEventTypes(eventClass);, +                subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);, +            }, +        } else {, +            subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);, +        }, +        if (!subscriptionFound) {, +            if (logNoSubscriberMessages) {, +                Log.d(TAG, "No subscribers registered for event " + eventClass);, +            }, +            if (sendNoSubscriberEvent && eventClass != NoSubscriberEvent.class &&, +                    eventClass != SubscriberExceptionEvent.class) {, +                post(new NoSubscriberEvent(this, event));, +            }, +        }, +    }, +, +    private boolean postSingleEventForEventType(Object event, PostingThreadState postingState, Class<?> eventClass) {, +            subscriptions = subscriptionsByEventType.get(eventClass);, +            return true;, +        return false;, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    private final boolean eventInheritance;, +        eventInheritance = builder.eventInheritance;, +        if (eventInheritance) {, +            List<Class<?>> eventTypes = lookupAllEventTypes(eventClass);, +                subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);, +            }, +        } else {, +            subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);, +        }, +        if (!subscriptionFound) {, +            if (logNoSubscriberMessages) {, +                Log.d(TAG, "No subscribers registered for event " + eventClass);, +            }, +            if (sendNoSubscriberEvent && eventClass != NoSubscriberEvent.class &&, +                    eventClass != SubscriberExceptionEvent.class) {, +                post(new NoSubscriberEvent(this, event));, +            }, +        }, +    }, +, +    private boolean postSingleEventForEventType(Object event, PostingThreadState postingState, Class<?> eventClass) {, +            subscriptions = subscriptionsByEventType.get(eventClass);, +            return true;, +        return false;, +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +    boolean throwSubscriberException;, +    boolean eventInheritance = true;, +     * By default, EventBus considers the event class hierarchy (subscribers to super classes will be notified)., +     * Switching this feature off will improve posting of events. For simple event classes extending Object directly, we, +     * measured a speed up of 20%. For more complex event hierarchies, the speed up should be >20%., +     */, +    public EventBusBuilder eventInheritance(boolean eventInheritance) {, +        this.eventInheritance = eventInheritance;, +        return this;, +    }, +, +, +    /**, +    /** Builds an EventBus based on the current configuration. */]