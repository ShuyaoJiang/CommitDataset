[+++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +                        TypeMirror typeMirror = param.asType();, +                        String skipReason = null;, +                        if (!(typeMirror instanceof DeclaredType) ||, +                                !(((DeclaredType) typeMirror).asElement() instanceof TypeElement)) {, +                            skipReason = "event type is not a standard class e.g. generics";, +                        }, +                        if (skipReason == null) {, +                            TypeElement eventTypeElement = (TypeElement) ((DeclaredType) typeMirror).asElement();, +                                skipReason = "event type is not public";, +                            }, +                        }, +                        if (skipReason != null) {, +                                String msg = "Falling back to reflection because " + skipReason;, +                                if (!subscriberClass.equals(skipCandidate)) {, +                                    msg += " (found in super class for " + skipCandidate + ")";, +                                messager.printMessage(Diagnostic.Kind.NOTE, msg, method);, +++ b/EventBusAnnotationProcessor/src/org/greenrobot/eventbus/annotationprocessor/EventBusAnnotationProcessor.java, +                        TypeMirror typeMirror = param.asType();, +                        String skipReason = null;, +                        if (!(typeMirror instanceof DeclaredType) ||, +                                !(((DeclaredType) typeMirror).asElement() instanceof TypeElement)) {, +                            skipReason = "event type is not a standard class e.g. generics";, +                        }, +                        if (skipReason == null) {, +                            TypeElement eventTypeElement = (TypeElement) ((DeclaredType) typeMirror).asElement();, +                                skipReason = "event type is not public";, +                            }, +                        }, +                        if (skipReason != null) {, +                                String msg = "Falling back to reflection because " + skipReason;, +                                if (!subscriberClass.equals(skipCandidate)) {, +                                    msg += " (found in super class for " + skipCandidate + ")";, +                                messager.printMessage(Diagnostic.Kind.NOTE, msg, method);, +++ b/EventBusTest/src/org/greenrobot/eventbus/EventBusGenericsTest.java, +    public class GenericEventSubscriber<T> {, +    public class FullGenericEventSubscriber<T> {, +        @Subscribe, +        public void onGenericEvent(T event) {, +            trackEvent(event);, +        }, +    }, +, +    public class GenericNumberEventSubscriber<T extends Number> {, +        @Subscribe, +        public void onGenericEvent(T event) {, +            trackEvent(event);, +        }, +    }, +, +    public class GenericFloatEventSubscriber extends GenericNumberEventSubscriber<Float> {, +    }, +, +        GenericEventSubscriber<IntTestEvent> genericSubscriber = new GenericEventSubscriber<IntTestEvent>();, +, +    @Test, +    public void testGenericEventAndSubscriber_TypeErasure() {, +        FullGenericEventSubscriber<IntTestEvent> genericSubscriber = new FullGenericEventSubscriber<IntTestEvent>();, +        eventBus.register(genericSubscriber);, +        eventBus.post(new IntTestEvent(42));, +        eventBus.post("Type erasure!");, +        assertEventCount(2);, +    }, +, +    @Test, +    public void testGenericEventAndSubscriber_BaseType() {, +        GenericNumberEventSubscriber<Float> genericSubscriber = new GenericNumberEventSubscriber<>();, +        eventBus.register(genericSubscriber);, +        eventBus.post(new Float(42));, +        eventBus.post(new Double(23));, +        assertEventCount(2);, +        eventBus.post("Not the same base type");, +        assertEventCount(2);, +    }, +, +    @Test, +    public void testGenericEventAndSubscriber_Subclass() {, +        GenericFloatEventSubscriber genericSubscriber = new GenericFloatEventSubscriber();, +        eventBus.register(genericSubscriber);, +        eventBus.post(new Float(42));, +        eventBus.post(new Double(77));, +        assertEventCount(2);, +        eventBus.post("Not the same base type");, +        assertEventCount(2);, +    }]