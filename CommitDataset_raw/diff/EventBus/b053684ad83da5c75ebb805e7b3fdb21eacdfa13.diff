[+++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    private static Map<Class<?>, List<Class<?>>> eventTypesCache = new HashMap<Class<?>, List<Class<?>>>();, +                            // Only add if not already found in a sub class, +    private void postSingleEvent(Object event) throws Error {, +        List<Class<?>> eventTypes = findEventTypes(event.getClass());, +        int countTypes = eventTypes.size();, +        for (int h = 0; h < countTypes; h++) {, +            Class<?> clazz = eventTypes.get(h);, +                    postToSubscribtion(subscription, event);, +            Log.d(TAG, "No subscripers registered for event " + event.getClass());, +        }, +    /** Finds all Class objects including super classes and interfaces. */, +    private List<Class<?>> findEventTypes(Class<?> eventClass) {, +        synchronized (eventTypesCache) {, +            List<Class<?>> eventTypes = eventTypesCache.get(eventClass);, +            if (eventTypes == null) {, +                eventTypes = new ArrayList<Class<?>>();, +                Class<?> clazz = eventClass;, +                while (clazz != null) {, +                    eventTypes.add(clazz);, +                    addInterfaces(eventTypes, clazz.getInterfaces());, +                    clazz = clazz.getSuperclass();, +                }, +                eventTypesCache.put(eventClass, eventTypes);, +            }, +            return eventTypes;, +        }, +    }, +, +    /** Recurses through super interfaces. */, +    private void addInterfaces(List<Class<?>> eventTypes, Class<?>[] interfaces) {, +        for (Class<?> interfaceClass : interfaces) {, +            if (!eventTypes.contains(interfaceClass)) {, +                eventTypes.add(interfaceClass);, +                addInterfaces(eventTypes, interfaceClass.getInterfaces());, +            }, +        }, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    private static Map<Class<?>, List<Class<?>>> eventTypesCache = new HashMap<Class<?>, List<Class<?>>>();, +                            // Only add if not already found in a sub class, +    private void postSingleEvent(Object event) throws Error {, +        List<Class<?>> eventTypes = findEventTypes(event.getClass());, +        int countTypes = eventTypes.size();, +        for (int h = 0; h < countTypes; h++) {, +            Class<?> clazz = eventTypes.get(h);, +                    postToSubscribtion(subscription, event);, +            Log.d(TAG, "No subscripers registered for event " + event.getClass());, +        }, +    /** Finds all Class objects including super classes and interfaces. */, +    private List<Class<?>> findEventTypes(Class<?> eventClass) {, +        synchronized (eventTypesCache) {, +            List<Class<?>> eventTypes = eventTypesCache.get(eventClass);, +            if (eventTypes == null) {, +                eventTypes = new ArrayList<Class<?>>();, +                Class<?> clazz = eventClass;, +                while (clazz != null) {, +                    eventTypes.add(clazz);, +                    addInterfaces(eventTypes, clazz.getInterfaces());, +                    clazz = clazz.getSuperclass();, +                }, +                eventTypesCache.put(eventClass, eventTypes);, +            }, +            return eventTypes;, +        }, +    }, +, +    /** Recurses through super interfaces. */, +    private void addInterfaces(List<Class<?>> eventTypes, Class<?>[] interfaces) {, +        for (Class<?> interfaceClass : interfaces) {, +            if (!eventTypes.contains(interfaceClass)) {, +                eventTypes.add(interfaceClass);, +                addInterfaces(eventTypes, interfaceClass.getInterfaces());, +            }, +        }, +++ b/EventBusTest/src/de/greenrobot/greenbus/test/EventBusInheritanceTest.java, +    private int countMyEventInterface;, +    private int countMyEventInterfaceExtended;, +    public void testEventInterfaceHierarchy() {, +        eventBus.register(this);, +, +        eventBus.post(new MyEvent());, +        assertEquals(1, countMyEventInterface);, +, +        eventBus.post(new MyEventExtended());, +        assertEquals(2, countMyEventInterface);, +        assertEquals(1, countMyEventInterfaceExtended);, +    }, +, +    public void testEventSuperInterfaceHierarchy() {, +        eventBus.register(this);, +, +        eventBus.post(new MyEventInterfaceExtended() {, +        });, +        assertEquals(1, countMyEventInterface);, +        assertEquals(1, countMyEventInterfaceExtended);, +    }, +, +    public void onEvent(MyEventInterface event) {, +        countMyEventInterface++;, +    public void onEvent(MyEventInterfaceExtended event) {]