[+++ b/CHANGELOG.md, +### V2.x.x (2015-0x-xx) Future release, +* Registering for sticky events now considers sticky events of subclasses, not just the exact same event type. This makes the semantic consistent to posting events. Note, that this may lead to subscribers being called more than once if matching sticky events of event type subclasses are available., +, +++ b/CHANGELOG.md, +### V2.x.x (2015-0x-xx) Future release, +* Registering for sticky events now considers sticky events of subclasses, not just the exact same event type. This makes the semantic consistent to posting events. Note, that this may lead to subscribers being called more than once if matching sticky events of event type subclasses are available., +, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +import java.util.Set;, +            if (eventInheritance) {, +                // Existing sticky events of all subclasses of eventType have to be considered., +                // Note: Iterating over all events may be inefficient with lots of sticky events,, +                // thus data structure should be changed to allow a more efficient lookup, +                // (e.g. an additional map storing sub classes of super classes: Class -> List<Class>)., +                Set<Map.Entry<Class<?>, Object>> entries = stickyEvents.entrySet();, +                for (Map.Entry<Class<?>, Object> entry : entries) {, +                    Class<?> candidateEventType = entry.getKey();, +                    if (eventType.isAssignableFrom(candidateEventType)) {, +                        Object stickyEvent = entry.getValue();, +                        checkPostStickyEventToSubscription(newSubscription, stickyEvent);, +                }, +            } else {, +                Object stickyEvent = stickyEvents.get(eventType);, +                checkPostStickyEventToSubscription(newSubscription, stickyEvent);, +            }, +        }, +    }, +, +    private void checkPostStickyEventToSubscription(Subscription newSubscription, Object stickyEvent) {, +++ b/CHANGELOG.md, +### V2.x.x (2015-0x-xx) Future release, +* Registering for sticky events now considers sticky events of subclasses, not just the exact same event type. This makes the semantic consistent to posting events. Note, that this may lead to subscribers being called more than once if matching sticky events of event type subclasses are available., +, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +import java.util.Set;, +            if (eventInheritance) {, +                // Existing sticky events of all subclasses of eventType have to be considered., +                // Note: Iterating over all events may be inefficient with lots of sticky events,, +                // thus data structure should be changed to allow a more efficient lookup, +                // (e.g. an additional map storing sub classes of super classes: Class -> List<Class>)., +                Set<Map.Entry<Class<?>, Object>> entries = stickyEvents.entrySet();, +                for (Map.Entry<Class<?>, Object> entry : entries) {, +                    Class<?> candidateEventType = entry.getKey();, +                    if (eventType.isAssignableFrom(candidateEventType)) {, +                        Object stickyEvent = entry.getValue();, +                        checkPostStickyEventToSubscription(newSubscription, stickyEvent);, +                }, +            } else {, +                Object stickyEvent = stickyEvents.get(eventType);, +                checkPostStickyEventToSubscription(newSubscription, stickyEvent);, +            }, +        }, +    }, +, +    private void checkPostStickyEventToSubscription(Subscription newSubscription, Object stickyEvent) {, +++ b/EventBusTest/src/de/greenrobot/event/test/EventBusInheritanceDisabledTest.java, +/*, + * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package de.greenrobot.event.test;, +, +import de.greenrobot.event.EventBus;, +import junit.framework.TestCase;, +, +/**, + * @author Markus Junginger, greenrobot, + */, +public class EventBusInheritanceDisabledTest extends TestCase {, +, +    private EventBus eventBus;, +, +    protected int countMyEventExtended;, +    protected int countMyEvent;, +    protected int countObjectEvent;, +    private int countMyEventInterface;, +    private int countMyEventInterfaceExtended;, +, +    protected void setUp() throws Exception {, +        super.setUp();, +        eventBus = EventBus.builder().eventInheritance(false).build();, +    }, +, +    public void testEventClassHierarchy() {, +        eventBus.register(this);, +, +        eventBus.post("Hello");, +        assertEquals(0, countObjectEvent);]