[+++ b/EventBus/src/de/greenrobot/event/EventBus.java, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass);, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass);, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +    List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {, +, +        boolean forceReflection = isAnonymousClass(subscriberClass);, +        if (ignoreGeneratedIndex || forceReflection) {, +        } else {, +            subscriberMethods = findUsingInfo(subscriberClass);, +    private boolean isAnonymousClass(Class<?> subscriberClass) {, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        return dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +    }, +, +        String infoClass = getInfoClassName(findState);, +    // A simple replace(char, char) is surprisingly slow, +    private String getInfoClassName(FindState findState) {, +        String className = findState.clazz.getName();, +        for (int i = className.length() - 1; i >= 0; i--) {, +            char c = className.charAt(i);, +            if (c == '.') {, +                break;, +            } else if (c == '$') {, +                className = className.replace('$', '_');, +                break;, +            }, +        }, +        return className + "_EventBusInfo";, +//        return className.replace('$', '_')+ "_EventBusInfo";, +    }, +, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass);, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +    List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {, +, +        boolean forceReflection = isAnonymousClass(subscriberClass);, +        if (ignoreGeneratedIndex || forceReflection) {, +        } else {, +            subscriberMethods = findUsingInfo(subscriberClass);, +    private boolean isAnonymousClass(Class<?> subscriberClass) {, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        return dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +    }, +, +        String infoClass = getInfoClassName(findState);, +    // A simple replace(char, char) is surprisingly slow, +    private String getInfoClassName(FindState findState) {, +        String className = findState.clazz.getName();, +        for (int i = className.length() - 1; i >= 0; i--) {, +            char c = className.charAt(i);, +            if (c == '.') {, +                break;, +            } else if (c == '$') {, +                className = className.replace('$', '_');, +                break;, +            }, +        }, +        return className + "_EventBusInfo";, +//        return className.replace('$', '_')+ "_EventBusInfo";, +    }, +, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/Test.java, +    public final AtomicLong eventsReceivedCount = new AtomicLong();, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass);, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +    List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {, +, +        boolean forceReflection = isAnonymousClass(subscriberClass);, +        if (ignoreGeneratedIndex || forceReflection) {, +        } else {, +            subscriberMethods = findUsingInfo(subscriberClass);, +    private boolean isAnonymousClass(Class<?> subscriberClass) {, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        return dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +    }, +, +        String infoClass = getInfoClassName(findState);, +    // A simple replace(char, char) is surprisingly slow, +    private String getInfoClassName(FindState findState) {, +        String className = findState.clazz.getName();, +        for (int i = className.length() - 1; i >= 0; i--) {, +            char c = className.charAt(i);, +            if (c == '.') {, +                break;]