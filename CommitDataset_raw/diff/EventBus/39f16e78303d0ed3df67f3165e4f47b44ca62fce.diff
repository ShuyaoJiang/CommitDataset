[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/EventBus/src/de/greenrobot/event/util/AsyncExecutor.java, +/*, + * Copyright (C) 2012 Markus Junginger, greenrobot (http://greenrobot.de), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package de.greenrobot.event.util;, +, +import java.lang.reflect.Constructor;, +import java.util.concurrent.Executor;, +import java.util.concurrent.Executors;, +, +import de.greenrobot.event.EventBus;, +, +import android.util.Log;, +, +/**, + * Executes an {@link RunnableEx} using a thread pool. Thrown exceptions are propagated by posting failure events of any, + * given type (default is {@link ThrowableFailureEvent})., + * , + * @author Markus, + */, +public class AsyncExecutor {, +, +    public static class Builder {, +        private Executor threadPool;, +        private Class<?> failureEventType;, +        private EventBus eventBus;, +, +        private Builder() {, +        }, +, +        public Builder threadPool(Executor threadPool) {, +            this.threadPool = threadPool;, +            return this;, +        }, +, +        public Builder failureEventType(Class<?> failureEventType) {, +            this.failureEventType = failureEventType;, +            return this;, +        }, +, +        public Builder eventBus(EventBus eventBus) {, +            this.eventBus = eventBus;, +            return this;, +        }, +, +        public AsyncExecutor build() {, +            if (eventBus == null) {, +                eventBus = EventBus.getDefault();, +            }, +            if (threadPool == null) {, +                threadPool = Executors.newCachedThreadPool();, +            }, +            if (failureEventType == null) {, +                failureEventType = ThrowableFailureEvent.class;, +            }, +            return new AsyncExecutor(threadPool, eventBus, failureEventType);, +        }, +    }, +, +    /** Like {@link Runnable}, but the run method may throw an exception. */, +    public interface RunnableEx {, +        void run() throws Exception;, +    }, +, +    public static Builder builder() {, +        return new Builder();, +    }, +, +    public static AsyncExecutor create() {, +        return new Builder().build();, +    }, +, +    private final Executor threadPool;, +    private final Constructor<?> failureEventConstructor;, +    private final EventBus eventBus;, +, +    private AsyncExecutor(Executor threadPool, EventBus eventBus, Class<?> failureEventType) {, +        this.threadPool = threadPool;, +        this.eventBus = eventBus;, +        try {, +            failureEventConstructor = failureEventType.getConstructor(Throwable.class);, +        } catch (NoSuchMethodException e) {, +            throw new RuntimeException(]