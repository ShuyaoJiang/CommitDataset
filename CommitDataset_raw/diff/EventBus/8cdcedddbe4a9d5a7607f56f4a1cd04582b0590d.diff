[+++ b/.travis.yml, +  - openjdk6, +    - build-tools-22.0.1, +++ b/.travis.yml, +  - openjdk6, +    - build-tools-22.0.1, +++ /dev/null, +++ b/.travis.yml, +  - openjdk6, +    - build-tools-22.0.1, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +sourceCompatibility = 1.6, +++ b/.travis.yml, +  - openjdk6, +    - build-tools-22.0.1, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +sourceCompatibility = 1.6, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +    public static String TAG = "EventBus";, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +     * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., +     * The {@link de.greenrobot.event.Subscribe} annotation also allows configuration like {@link, +     * de.greenrobot.event.ThreadMode} and priority., +        Class<?> subscriberClass = subscriber.getClass();, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        boolean forceReflection = dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +        List<SubscriberMethod> subscriberMethods =, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass, forceReflection);, +            subscribe(subscriber, subscriberMethod);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +        // Got to synchronize to avoid shifted positions when adding/removing concurrently, +        synchronized (subscriptions) {, +                if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {, +        }, +        if (subscriberMethod.sticky) {, +            // Got to synchronize to avoid shifted positions when adding/removing concurrently, +            synchronized (subscriptions) {, +    }, +     * {@link Subscribe#priority()}). Canceling is restricted to event handling methods running in posting thread, +     * event of an event's type is kept in memory for future access by subscribers using {@link Subscribe#sticky()}., +++ b/.travis.yml, +  - openjdk6, +    - build-tools-22.0.1, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '3.0.0-beta2', +sourceCompatibility = 1.6, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers, + * receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by, + * {@link de.greenrobot.event.Subscribe}, must be public, return nothing (void), and have exactly one parameter, + * (the event)., +    public static String TAG = "EventBus";, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false, builder.ignoreGeneratedIndex);, +     * Subscribers have event handling methods that must be annotated by {@link de.greenrobot.event.Subscribe}., +     * The {@link de.greenrobot.event.Subscribe} annotation also allows configuration like {@link, +     * de.greenrobot.event.ThreadMode} and priority., +        Class<?> subscriberClass = subscriber.getClass();, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        // Note: Avoid Class.isAnonymousClass() because it is super slow (getSimpleName() is super slow, too), +        String name = subscriberClass.getName();, +        int dollarIndex = name.lastIndexOf('$');, +        boolean forceReflection = dollarIndex != -1 && dollarIndex < name.length() - 1 &&, +                Character.isDigit(name.charAt(dollarIndex + 1));, +        List<SubscriberMethod> subscriberMethods =, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass, forceReflection);, +            subscribe(subscriber, subscriberMethod);, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +        // Got to synchronize to avoid shifted positions when adding/removing concurrently, +        synchronized (subscriptions) {, +                if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {, +        }, +        if (subscriberMethod.sticky) {, +            // Got to synchronize to avoid shifted positions when adding/removing concurrently, +            synchronized (subscriptions) {, +    }, +     * {@link Subscribe#priority()}). Canceling is restricted to event handling methods running in posting thread, +     * event of an event's type is kept in memory for future access by subscribers using {@link Subscribe#sticky()}., +++ b/EventBus/src/de/greenrobot/event/EventBusBuilder.java, +    boolean ignoreGeneratedIndex;, +    /** Forces the use of reflection even if there's a generated index (default: false). */, +    public EventBusBuilder ignoreGeneratedIndex(boolean ignoreGeneratedIndex) {, +        this.ignoreGeneratedIndex = ignoreGeneratedIndex;, +        return this;, +    }, +]