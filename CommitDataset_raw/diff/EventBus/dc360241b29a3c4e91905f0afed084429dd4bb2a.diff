[+++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    private final ThreadLocal<List<Object>> eventsQueuedForCurrentThread = new ThreadLocal<List<Object>>() {, +        @Override, +        protected List<Object> initialValue() {, +            return new ArrayList<Object>();, +        }, +    };, +, +    private final ThreadLocal<Boolean> currentThreadIsPosting = new ThreadLocal<Boolean>() {, +        @Override, +        protected Boolean initialValue() {, +            return false;, +        }, +    };, +, +        List<Object> eventQueue = eventsQueuedForCurrentThread.get();, +        eventQueue.add(event);, +        if (currentThreadIsPosting.get()) {, +            return;, +        } else {, +            currentThreadIsPosting.set(true);, +            try {, +                while (!eventQueue.isEmpty()) {, +                    Object eventToPost = eventQueue.remove(0);, +                    postSingleEvent(eventToPost);, +                }, +            } finally {, +                currentThreadIsPosting.set(false);, +            }, +        }, +    }, +, +    private void postSingleEvent(Object eventToPost) throws Error {, +        Class<? extends Object> clazz = eventToPost.getClass();, +        List<Subscription> subscriptions = getSubscriptionsForEventTypeFromPool(clazz);, +        if (subscriptions.isEmpty()) {, +            Log.d(TAG, "No subscriptions registered for event " + eventToPost.getClass());, +        } else {, +            int size = subscriptions.size();, +            for (int i = 0; i < size; i++) {, +                Subscription subscription = subscriptions.get(i);, +                postToSubscribtion(subscription, eventToPost);, +            }, +            subscriptions.clear();, +        }, +        synchronized (this) {, +            postQueuePool.add(subscriptions);, +        }, +    }, +, +    private List<Subscription> getSubscriptionsForEventTypeFromPool(Class<? extends Object> clazz) {, +        return subscriptions;, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    private final ThreadLocal<List<Object>> eventsQueuedForCurrentThread = new ThreadLocal<List<Object>>() {, +        @Override, +        protected List<Object> initialValue() {, +            return new ArrayList<Object>();, +        }, +    };, +, +    private final ThreadLocal<Boolean> currentThreadIsPosting = new ThreadLocal<Boolean>() {, +        @Override, +        protected Boolean initialValue() {, +            return false;, +        }, +    };, +, +        List<Object> eventQueue = eventsQueuedForCurrentThread.get();, +        eventQueue.add(event);, +        if (currentThreadIsPosting.get()) {, +            return;, +        } else {, +            currentThreadIsPosting.set(true);, +            try {, +                while (!eventQueue.isEmpty()) {, +                    Object eventToPost = eventQueue.remove(0);, +                    postSingleEvent(eventToPost);, +                }, +            } finally {, +                currentThreadIsPosting.set(false);, +            }, +        }, +    }, +, +    private void postSingleEvent(Object eventToPost) throws Error {, +        Class<? extends Object> clazz = eventToPost.getClass();, +        List<Subscription> subscriptions = getSubscriptionsForEventTypeFromPool(clazz);, +        if (subscriptions.isEmpty()) {, +            Log.d(TAG, "No subscriptions registered for event " + eventToPost.getClass());, +        } else {, +            int size = subscriptions.size();, +            for (int i = 0; i < size; i++) {, +                Subscription subscription = subscriptions.get(i);, +                postToSubscribtion(subscription, eventToPost);, +            }, +            subscriptions.clear();, +        }, +        synchronized (this) {, +            postQueuePool.add(subscriptions);, +        }]