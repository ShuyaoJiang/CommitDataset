[+++ /dev/null, +++ /dev/null, +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, +import java.util.logging.Level;, +                eventBus.getLogger().log(Level.WARNING, Thread.currentThread().getName() + " was interruppted", e);, +++ /dev/null, +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, +import java.util.logging.Level;, +                eventBus.getLogger().log(Level.WARNING, Thread.currentThread().getName() + " was interruppted", e);, +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, +import java.util.logging.Level;, +    private final Logger logger;, +        logger = builder.initLogger();, +            logger.log(Level.WARNING, "Subscriber to unregister was not registered before: " + subscriber.getClass());, +                logger.log(Level.FINE, "No subscribers registered for event " + eventClass);, +                logger.log(Level.SEVERE, "SubscriberExceptionEvent subscriber " + subscription.subscriber.getClass(), +                logger.log(Level.SEVERE, "Initial event " + exEvent.causingEvent + " caused exception in ", +                logger.log(Level.SEVERE, "Could not dispatch event: " + event.getClass() + " to subscribing class ", +    /**, +     * For internal use only., +     */, +    public Logger getLogger() {, +        return logger;, +    }, +, +++ /dev/null, +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, +import java.util.logging.Level;, +                eventBus.getLogger().log(Level.WARNING, Thread.currentThread().getName() + " was interruppted", e);, +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, +import java.util.logging.Level;, +    private final Logger logger;, +        logger = builder.initLogger();, +            logger.log(Level.WARNING, "Subscriber to unregister was not registered before: " + subscriber.getClass());, +                logger.log(Level.FINE, "No subscribers registered for event " + eventClass);, +                logger.log(Level.SEVERE, "SubscriberExceptionEvent subscriber " + subscription.subscriber.getClass(), +                logger.log(Level.SEVERE, "Initial event " + exEvent.causingEvent + " caused exception in ", +                logger.log(Level.SEVERE, "Could not dispatch event: " + event.getClass() + " to subscribing class ", +    /**, +     * For internal use only., +     */, +    public Logger getLogger() {, +        return logger;, +    }, +, +++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java, +    Logger logger;, +     * <p/>, +    public EventBusBuilder logger(Logger logger) {, +        this.logger = logger;, +    Logger initLogger() {, +        if (logger != null) {, +            return logger;, +        } else {, +            return Logger.AndroidLogger.isAndroidLogAvailable() ? new Logger.AndroidLogger("EventBus") :, +                    new Logger.SystemOutLogger();, +        }, +++ /dev/null, +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, +import java.util.logging.Level;, +                eventBus.getLogger().log(Level.WARNING, Thread.currentThread().getName() + " was interruppted", e);, +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, +import java.util.logging.Level;, +    private final Logger logger;, +        logger = builder.initLogger();, +            logger.log(Level.WARNING, "Subscriber to unregister was not registered before: " + subscriber.getClass());, +                logger.log(Level.FINE, "No subscribers registered for event " + eventClass);, +                logger.log(Level.SEVERE, "SubscriberExceptionEvent subscriber " + subscription.subscriber.getClass(), +                logger.log(Level.SEVERE, "Initial event " + exEvent.causingEvent + " caused exception in ", +                logger.log(Level.SEVERE, "Could not dispatch event: " + event.getClass() + " to subscribing class ", +    /**, +     * For internal use only., +     */, +    public Logger getLogger() {, +        return logger;, +    }, +, +++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java, +    Logger logger;, +     * <p/>, +    public EventBusBuilder logger(Logger logger) {, +        this.logger = logger;, +    Logger initLogger() {, +        if (logger != null) {, +            return logger;, +        } else {, +            return Logger.AndroidLogger.isAndroidLogAvailable() ? new Logger.AndroidLogger("EventBus") :, +                    new Logger.SystemOutLogger();, +        }, +++ b/EventBus/src/org/greenrobot/eventbus/Logger.java, +package org.greenrobot.eventbus;, +, +import android.util.Log;, +, +import java.util.logging.Level;, +, +public interface Logger {, +, +    void log(Level level, String msg);, +]