[+++ b/README.md, +Delivery Threads, +----------------, +EventBus can deliver events in other threads independently from the posting thread. Threading is crucial to all Android apps, and EventBus will make threading easier. In Android development, UI changes must be done in the UI thread, while networking is forbidden here. If you want to do both networking and UI using standard Android API, you will need to take care of thread transistions, e.g. by using AsyncTask. If you use an event-based approach using EventBus, this gets simpler., +, +In EventBus, each event handling method is associated with a thread mode (have a look at the ThreadMode enum). The thread mode defines in which thread the event handling mehtod is called:, +* **PostThread:* Subscriber will be called in the same thread, which is posting the event. This is the default. Event delivery implies the least overhead because it avoids thread switching completely. Thus this is the recommended mode for simple tasks that are known to complete is a very short time without requiring the main thread. Event handlers using this mode must return quickly to avoid blocking the posting thread, which may be the main thread., +* **MainThread:** Subscriber will be called in Android's main thread (sometimes referred to as UI thread). If the posting thread is the main thread, event handler methods will be called directly. Event handlers using this mode must return quickly to avoid blocking the main thread., +* **BackgroundThread:** Subscriber will be called in a background thread. If posting thread is not the main thread, event handler methods will be called directly in the posting thread. If the posting thread is the main thread, EventBus uses a single background thread that will deliver all its events sequentially. Event handlers using this mode should try to return quickly to avoid blocking the background thread., +* **Async:** Event handler methods are called in a separate thread. This is always independent from the posting thread and the main thread. Posting events never wait for event handler methods using this mode. Event handler methods should use this mode if their execution might take some time, e.g. for network access. Avoid triggering a large number of long running asynchronous handler methods at the same time to limit the number of concurrent threads. EventBus uses a thread pool to efficiently reuse threads from completed asynchronous event handler notifications., +, +*Example:* Consider your subscriber updates the UI, but the triggering event is posted by a background thread (using eventBus.post(event)). The name of the event handling method should be onEventMainThread. EventBus takes care of calling the method in the main thread without any further code required, +, +Sticky Events, +-------------, +Some events carry information that is of interest after the event is posted. For example, this could be an event signalizing that some initialization is complete. Or if you have some sensor or location data and you want to hold on the most recent values. Instead of implementing your own caching, you can use sticky events. EventBus keeps the last sticky event of a certain type in memory. The sticky event can be delivered to subscribers or queried explicitly. Thus, you don't need any special logic to consider already available data., +, +API-wise events are made sticky by using postSticky(Object event) instead of post(Object event). Subscribers that want to get previously posted sticky events, use registerSticky(...) instead of register(...). Alternatively, the last sticky event of a certain event type can be queried by using getStickyEvent(Class<?> eventType)., +, +* **Performanced optimized:** It's probably the fastest event bus for Android., +* **Tiny:** The jar is less than 30 KBytes., +Comparison with Square's Otto, +-----------------------------, +Otto is another event bus library for Android; actually it's a fork of Guava's EventBus. greenrobot's EventBus and Otto share some basic semantics (register, post, unregister, ...), but there are differences which the following table summarizes:, +<table>, +    <tr>, +        <th></th>, +        <th>EventBus</th>, +        <th>Otto</th>, +    </tr>, +    <tr>, +        <th>Declare event handling methods</th>, +        <td>Name conventions</td>, +        <td>Annotations</td>, +    </tr>	, +    <tr>, +        <th>Cache recent events</th>, +        <td>Sticky events</td>, +        <td>Can be coded using producers</td>, +    </tr>	, +    <tr>, +        <th>Event delivery in posting thread</th>, +        <td>Yes (Default)</td>, +        <td>Yes</td>, +    </tr>	, +    <tr>, +        <th>Event delivery in main thread</th>, +        <td>Yes</td>, +        <td>No</td>, +    </tr>	, +    <tr>, +        <th>Event delivery in background thread</th>, +        <td>Yes</td>, +        <td>No</td>, +    </tr>	, +    <tr>, +        <th>Aynchronous event delivery</th>, +        <td>Yes</td>, +        <td>No</td>, +    </tr>, +</table>, +, +Besides features, performance is another differentiator. To compare performance, we created an Android application, which is also part of this repository (EventBusPerformance). You can also run the app on your phone to benchmark different scenarios., +, +Performance Results:, +<table>, +    <tr>, +        <th></th>, +        <th>EventBus</th>, +        <th>Otto</th>, +    </tr>, +    <tr>, +        <th>Posting 1000 events, Android 2.3 emulator</th>, +        <td>~70% faster</td>, +        <td></td>, +    </tr>, +	<tr>, +        <th>Posting 1000 events, S3 Android 4.0</th>, +        <td>~110% faster</td>, +        <td></td>, +    </tr>, +    <tr>, +        <th>Register 1000 subscribers, Android 2.3 emulator</th>, +        <td>~10% faster</td>, +        <td></td>, +    </tr>, +    <tr>, +        <th>Register 1000 subscribers, S3 Android 4.0</th>, +        <td>~70% faster</td>, +        <td></td>, +    </tr>, +    <tr>, +        <th>Register subscribers cold start, Android 2.3 emulator</th>, +        <td>~350% faster</td>, +        <td></td>, +    </tr>	, +    <tr>, +        <th>Register subscribers cold start, S3 Android 4.0</th>, +        <td colspan="2">About the same</td>, +    </tr>	]