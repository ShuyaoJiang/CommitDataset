[+++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    private static final Map<String, List<SubscriberMethod>> methodCache = new HashMap<String, List<SubscriberMethod>>();, +        register(subscriber, defaultMethodName);, +    public void register(Object subscriber, String methodName) {, +        List<SubscriberMethod> subscriberMethods = findSubscriberMethods(subscriber.getClass(), methodName);, +        for (SubscriberMethod subscriberMethod : subscriberMethods) {, +            subscribe(subscriber, subscriberMethod);, +    private List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass, String eventMethodName) {, +        List<SubscriberMethod> subscriberMethods;, +        subscriberMethods = new ArrayList<SubscriberMethod>();, +        HashSet<String> eventTypesFound = new HashSet<String>();, +                        String modifierString = methodName.substring(eventMethodName.length());, +                        ThreadMode threadMode;, +                        if (modifierString.length() == 0) {, +                            threadMode = ThreadMode.PostThread;, +                        } else if (modifierString.equals("MainThread")) {, +                            threadMode = ThreadMode.MainThread;, +                        } else if (modifierString.equals("BackgroundThread")) {, +                            threadMode = ThreadMode.BackgroundThread;, +                        } else {, +                            throw new RuntimeException("Illegal onEvent method, check for typos: " + method);, +                        Class<?> eventType = parameterTypes[0];, +                        String methodKey = methodName + ">" + eventType.getName();, +                        if (eventTypesFound.add(methodKey)) {, +                            // Only add if not already found in a sub class, +                            subscriberMethods.add(new SubscriberMethod(method, threadMode, eventType));, +        register(subscriber, defaultMethodName, eventType, moreEventTypes);, +    public synchronized void register(Object subscriber, String methodName, Class<?> eventType,, +        List<SubscriberMethod> subscriberMethods = findSubscriberMethods(subscriberClass, methodName);, +        for (SubscriberMethod subscriberMethod : subscriberMethods) {, +            if (eventType == subscriberMethod.eventType) {, +                subscribe(subscriber, subscriberMethod);, +            }, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {, +        Class<?> eventType = subscriberMethod.eventType;, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);, +                if (subscription.equals(newSubscription)) {, +        subscriberMethod.method.setAccessible(true);, +        subscriptions.add(newSubscription);, +            boolean isMainThread = Looper.getMainLooper() == Looper.myLooper();, +                    postSingleEvent(eventQueue.remove(0), isMainThread);, +    private void postSingleEvent(Object event, boolean isMainThread) throws Error {, +                    postToSubscription(subscription, event, isMainThread);, +    private void postToSubscription(Subscription subscription, Object event, boolean isMainThread) {, +        switch (subscription.subscriberMethod.threadMode) {, +        case PostThread:, +            invokeSubscriber(subscription, event);, +            break;, +        case MainThread:, +            if (isMainThread) {, +                invokeSubscriber(subscription, event);, +            } else {, +            }, +            break;, +        case BackgroundThread:, +            if (isMainThread) {, +                invokeSubscriber(subscription, event);, +            }, +            break;, +        default:, +            throw new IllegalStateException("Unknown thread mode: " + subscription.subscriberMethod.threadMode);, +        EventBus.invokeSubscriber(subscription, event);, +    static void invokeSubscriber(Subscription subscription, Object event) throws Error {, +            subscription.subscriberMethod.method.invoke(subscription.subscriber, event);, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    private static final Map<String, List<SubscriberMethod>> methodCache = new HashMap<String, List<SubscriberMethod>>();, +        register(subscriber, defaultMethodName);, +    public void register(Object subscriber, String methodName) {, +        List<SubscriberMethod> subscriberMethods = findSubscriberMethods(subscriber.getClass(), methodName);, +        for (SubscriberMethod subscriberMethod : subscriberMethods) {, +            subscribe(subscriber, subscriberMethod);, +    private List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass, String eventMethodName) {, +        List<SubscriberMethod> subscriberMethods;, +        subscriberMethods = new ArrayList<SubscriberMethod>();, +        HashSet<String> eventTypesFound = new HashSet<String>();, +                        String modifierString = methodName.substring(eventMethodName.length());, +                        ThreadMode threadMode;, +                        if (modifierString.length() == 0) {, +                            threadMode = ThreadMode.PostThread;, +                        } else if (modifierString.equals("MainThread")) {, +                            threadMode = ThreadMode.MainThread;, +                        } else if (modifierString.equals("BackgroundThread")) {, +                            threadMode = ThreadMode.BackgroundThread;, +                        } else {, +                            throw new RuntimeException("Illegal onEvent method, check for typos: " + method);, +                        Class<?> eventType = parameterTypes[0];, +                        String methodKey = methodName + ">" + eventType.getName();, +                        if (eventTypesFound.add(methodKey)) {, +                            // Only add if not already found in a sub class, +                            subscriberMethods.add(new SubscriberMethod(method, threadMode, eventType));, +        register(subscriber, defaultMethodName, eventType, moreEventTypes);, +    public synchronized void register(Object subscriber, String methodName, Class<?> eventType,, +        List<SubscriberMethod> subscriberMethods = findSubscriberMethods(subscriberClass, methodName);, +        for (SubscriberMethod subscriberMethod : subscriberMethods) {, +            if (eventType == subscriberMethod.eventType) {, +                subscribe(subscriber, subscriberMethod);, +            }, +    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {, +        Class<?> eventType = subscriberMethod.eventType;, +        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);]