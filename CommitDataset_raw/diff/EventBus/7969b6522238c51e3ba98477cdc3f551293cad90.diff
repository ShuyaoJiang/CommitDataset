[+++ b/EventBus/src/de/greenrobot/event/BackgroundPoster.java, +++ b/EventBus/src/de/greenrobot/event/BackgroundPoster.java, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        mainThreadPoster = new PostViaHandler(Looper.getMainLooper(), 10);, +++ b/EventBus/src/de/greenrobot/event/BackgroundPoster.java, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        mainThreadPoster = new PostViaHandler(Looper.getMainLooper(), 10);, +++ b/EventBus/src/de/greenrobot/event/PostViaHandler.java, +import android.os.SystemClock;, +    private final PendingPostQueue queue;, +    private final int maxMillisInsideHandleMessage;, +    private boolean handlerActive;, +, +    PostViaHandler(Looper looper, int maxMillisInsideHandleMessage) {, +        this.maxMillisInsideHandleMessage = maxMillisInsideHandleMessage;, +        queue = new PendingPostQueue();, +        synchronized (this) {, +            queue.enqueue(pendingPost);, +            if (!handlerActive) {, +                handlerActive = true;, +                if (!sendMessage(obtainMessage())) {, +                    throw new EventBusException("Could not send handler message");, +                }, +            }, +        boolean rescheduled = false;, +        try {, +            long started = SystemClock.uptimeMillis();, +            while (true) {, +                PendingPost pendingPost = queue.poll();, +                if (pendingPost == null) {, +                    synchronized (this) {, +                        // Check again, this time in synchronized, +                        pendingPost = queue.poll();, +                        if (pendingPost == null) {, +                            handlerActive = false;, +                            return;, +                    }, +                }, +                EventBus.invokeSubscriber(pendingPost);, +                long timeInMethod = SystemClock.uptimeMillis() - started;, +                if (timeInMethod >= maxMillisInsideHandleMessage) {, +                    if (!sendMessage(obtainMessage())) {, +                        throw new EventBusException("Could not send handler message");, +                    }, +                    rescheduled = true;, +                    return;, +                }, +            }, +        } finally {, +            handlerActive = rescheduled;, +        }, +    }, +++ b/EventBus/src/de/greenrobot/event/BackgroundPoster.java, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        mainThreadPoster = new PostViaHandler(Looper.getMainLooper(), 10);, +++ b/EventBus/src/de/greenrobot/event/PostViaHandler.java, +import android.os.SystemClock;, +    private final PendingPostQueue queue;, +    private final int maxMillisInsideHandleMessage;, +    private boolean handlerActive;, +, +    PostViaHandler(Looper looper, int maxMillisInsideHandleMessage) {, +        this.maxMillisInsideHandleMessage = maxMillisInsideHandleMessage;, +        queue = new PendingPostQueue();, +        synchronized (this) {, +            queue.enqueue(pendingPost);, +            if (!handlerActive) {, +                handlerActive = true;, +                if (!sendMessage(obtainMessage())) {, +                    throw new EventBusException("Could not send handler message");, +                }, +            }, +        boolean rescheduled = false;, +        try {, +            long started = SystemClock.uptimeMillis();, +            while (true) {, +                PendingPost pendingPost = queue.poll();, +                if (pendingPost == null) {, +                    synchronized (this) {, +                        // Check again, this time in synchronized, +                        pendingPost = queue.poll();, +                        if (pendingPost == null) {, +                            handlerActive = false;, +                            return;, +                    }, +                }, +                EventBus.invokeSubscriber(pendingPost);, +                long timeInMethod = SystemClock.uptimeMillis() - started;, +                if (timeInMethod >= maxMillisInsideHandleMessage) {, +                    if (!sendMessage(obtainMessage())) {, +                        throw new EventBusException("Could not send handler message");, +                    }, +                    rescheduled = true;, +                    return;, +                }, +            }, +        } finally {, +            handlerActive = rescheduled;, +        }, +    }]