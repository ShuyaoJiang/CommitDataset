[+++ b/EventBus/src/de/greenrobot/event/SubscriberInfo.java, +    // TODO move class fields into SubscriberInfo, +    private volatile Data data;, +    Data getSubscriberData() {, +++ b/EventBus/src/de/greenrobot/event/SubscriberInfo.java, +    // TODO move class fields into SubscriberInfo, +    private volatile Data data;, +    Data getSubscriberData() {, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +        if (!ignoreGeneratedIndex && !forceReflection) {, +            subscriberMethods = findUsingInfo(subscriberClass);, +            subscriberMethods = findUsingReflection(subscriberClass);, +    private List<SubscriberMethod> findUsingInfo(Class<?> subscriberClass) {, +        FindState findState = new FindState();, +        findState.initForSubscriber(subscriberClass);, +        while (findState.clazz != null) {, +            SubscriberInfo info = getSubscriberInfo(subscriberClass);, +            if (info != null) {, +                SubscriberInfo.Data subscriberData = info.getSubscriberData();, +                SubscriberMethod[] array = subscriberData.subscriberMethods;, +                    if (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) {, +                        findState.subscriberMethods.add(subscriberMethod);, +                }, +                findUsingReflectionInSingleClass(findState);, +            findState.nextClass();, +        return findState.subscriberMethods;, +    private SubscriberInfo getSubscriberInfo(Class<?> subscriberClass) {, +        SubscriberInfo info = null;, +        String infoClass = subscriberClass.getName().replace('$', '_') + "_EventBusInfo";, +        try {, +            Class<?> aClass = Class.forName(infoClass);, +            Object object = aClass.newInstance();, +            if (object instanceof SubscriberInfo) {, +                info = (SubscriberInfo) object;, +            }, +        } catch (ClassNotFoundException e) {, +            // TODO don't try again, +        } catch (Exception e) {, +            throw new EventBusException("Could not get infos for " + subscriberClass, e);, +        }, +        return info;, +    private List<SubscriberMethod> findUsingReflection(Class<?> subscriberClass) {, +        FindState findState = new FindState();, +        findState.initForSubscriber(subscriberClass);, +        while (findState.clazz != null) {, +            findUsingReflectionInSingleClass(findState);, +            findState.nextClass();, +        }, +        return findState.subscriberMethods;, +    }, +, +    private void findUsingReflectionInSingleClass(FindState findState) {, +        Method[] methods = findState.clazz.getDeclaredMethods();, +                        if (findState.checkAdd(method, eventType)) {, +                            findState.subscriberMethods.add(new SubscriberMethod(method, eventType, threadMode,, +                        String methodName = findState.clazzName + "." + method.getName();, +                    String methodName = findState.clazzName + "." + method.getName();, +    class FindState {, +        final List<SubscriberMethod> subscriberMethods = new ArrayList<SubscriberMethod>();, +        final HashSet<String> eventTypesFound = new HashSet<String>();, +        final StringBuilder methodKeyBuilder = new StringBuilder();, +        Class<?> subscriberClass;, +        Class<?> clazz;, +        String clazzName;, +, +        void initForSubscriber(Class<?> subscriberClass) {, +            this.subscriberClass = clazz = subscriberClass;, +        }, +, +        void recycle() {, +            subscriberMethods.clear();, +            methodKeyBuilder.setLength(0);, +            eventTypesFound.clear();, +        }, +, +        boolean checkAdd(Method method, Class<?> eventType) {, +            methodKeyBuilder.setLength(0);, +            methodKeyBuilder.append(method.getName());, +            methodKeyBuilder.append('>').append(eventType.getName());, +, +            String methodKey = methodKeyBuilder.toString();, +            return eventTypesFound.add(methodKey);, +        }, +, +        void nextClass() {, +            clazz = clazz.getSuperclass();, +            clazzName = clazz.getName();, +            /** Skip system classes, this just degrades performance. */, +            if (clazzName.startsWith("java.") || clazzName.startsWith("javax.") || clazzName.startsWith("android.")) {, +                clazz = null;, +                clazzName = null;, +            }, +        }, +    }, +, +++ b/EventBus/src/de/greenrobot/event/SubscriberInfo.java, +    // TODO move class fields into SubscriberInfo, +    private volatile Data data;, +    Data getSubscriberData() {, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java]