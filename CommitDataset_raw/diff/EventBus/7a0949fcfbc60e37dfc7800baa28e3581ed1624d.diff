[+++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, +class AsyncPoster implements Runnable, Poster {, +++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, +class AsyncPoster implements Runnable, Poster {, +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, +import org.greenrobot.eventbus.log.EBLog;, +final class BackgroundPoster implements Runnable, Poster {, +                EBLog.w(Thread.currentThread().getName() + " was interruppted", e);, +++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, +class AsyncPoster implements Runnable, Poster {, +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, +import org.greenrobot.eventbus.log.EBLog;, +final class BackgroundPoster implements Runnable, Poster {, +                EBLog.w(Thread.currentThread().getName() + " was interruppted", e);, +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, +import org.greenrobot.eventbus.log.AndroidLog;, +import org.greenrobot.eventbus.log.EBLog;, +import org.greenrobot.eventbus.log.SystemOutLog;, +import org.greenrobot.eventbus.util.AndroidMTCalculator;, +import org.greenrobot.eventbus.util.MainThreadCalculator;, +import org.greenrobot.eventbus.util.NonAndroidMTCalculator;, +    private final Poster mainThreadPoster;, +    private final MainThreadCalculator mtCalculator;, +        if (builder.logTarget == null) {, +            EBLog.setLogTarget(builder.nonAndroidEnvironment ? new SystemOutLog() : new AndroidLog(TAG));, +        } else {, +            EBLog.setLogTarget(builder.logTarget);, +        }, +        mainThreadPoster = (builder.nonAndroidEnvironment ? new SyncPoster(this) : new HandlerPoster(this, 10));, +        mtCalculator = (builder.nonAndroidEnvironment ? new NonAndroidMTCalculator() : new AndroidMTCalculator());, +            postToSubscription(newSubscription, stickyEvent, mtCalculator.isMainThread());, +            EBLog.w("Subscriber to unregister was not registered before: " + subscriber.getClass());, +            postingState.isMainThread = mtCalculator.isMainThread();, +                EBLog.d("No subscribers registered for event " + eventClass);, +                EBLog.e("SubscriberExceptionEvent subscriber " + subscription.subscriber.getClass(), +                EBLog.e("Initial event " + exEvent.causingEvent + " caused exception in ", +                EBLog.e("Could not dispatch event: " + event.getClass() + " to subscribing class ", +        final List<Object> eventQueue = new ArrayList<>();, +++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, +class AsyncPoster implements Runnable, Poster {, +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, +import org.greenrobot.eventbus.log.EBLog;, +final class BackgroundPoster implements Runnable, Poster {, +                EBLog.w(Thread.currentThread().getName() + " was interruppted", e);, +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, +import org.greenrobot.eventbus.log.AndroidLog;, +import org.greenrobot.eventbus.log.EBLog;, +import org.greenrobot.eventbus.log.SystemOutLog;, +import org.greenrobot.eventbus.util.AndroidMTCalculator;, +import org.greenrobot.eventbus.util.MainThreadCalculator;, +import org.greenrobot.eventbus.util.NonAndroidMTCalculator;, +    private final Poster mainThreadPoster;, +    private final MainThreadCalculator mtCalculator;, +        if (builder.logTarget == null) {, +            EBLog.setLogTarget(builder.nonAndroidEnvironment ? new SystemOutLog() : new AndroidLog(TAG));, +        } else {, +            EBLog.setLogTarget(builder.logTarget);, +        }, +        mainThreadPoster = (builder.nonAndroidEnvironment ? new SyncPoster(this) : new HandlerPoster(this, 10));, +        mtCalculator = (builder.nonAndroidEnvironment ? new NonAndroidMTCalculator() : new AndroidMTCalculator());, +            postToSubscription(newSubscription, stickyEvent, mtCalculator.isMainThread());, +            EBLog.w("Subscriber to unregister was not registered before: " + subscriber.getClass());, +            postingState.isMainThread = mtCalculator.isMainThread();, +                EBLog.d("No subscribers registered for event " + eventClass);, +                EBLog.e("SubscriberExceptionEvent subscriber " + subscription.subscriber.getClass(), +                EBLog.e("Initial event " + exEvent.causingEvent + " caused exception in ", +                EBLog.e("Could not dispatch event: " + event.getClass() + " to subscribing class ", +        final List<Object> eventQueue = new ArrayList<>();, +++ b/EventBus/src/org/greenrobot/eventbus/EventBusBuilder.java, +import org.greenrobot.eventbus.log.GenericLog;, +, +    GenericLog logTarget;, +    boolean nonAndroidEnvironment;, +     * Set a specific log handler for all EventBus logging., +     *, +     * By default all logging is via {@link android.util.Log} but if you want to use EventBus, +     * outside the Android environment then you will need to provide another log target., +     */, +    public EventBusBuilder logger(GenericLog logTarget) {, +        this.logTarget = logTarget;, +        return this;, +    }, +, +    public EventBusBuilder nonAndroidEnvironment(boolean nonAndroidEnvironment) {, +        this.nonAndroidEnvironment = nonAndroidEnvironment;, +        return this;, +    }, +, +    /**, +++ b/EventBus/src/org/greenrobot/eventbus/AsyncPoster.java, +class AsyncPoster implements Runnable, Poster {, +++ b/EventBus/src/org/greenrobot/eventbus/BackgroundPoster.java, +import org.greenrobot.eventbus.log.EBLog;, +final class BackgroundPoster implements Runnable, Poster {, +                EBLog.w(Thread.currentThread().getName() + " was interruppted", e);, +++ b/EventBus/src/org/greenrobot/eventbus/EventBus.java, +import org.greenrobot.eventbus.log.AndroidLog;, +import org.greenrobot.eventbus.log.EBLog;, +import org.greenrobot.eventbus.log.SystemOutLog;, +import org.greenrobot.eventbus.util.AndroidMTCalculator;]