[+++ b/CHANGELOG.md, +### V2.3.0 (2014-11-??) Upcoming, +* Fixes (#76), +, +++ b/CHANGELOG.md, +### V2.3.0 (2014-11-??) Upcoming, +* Fixes (#76), +, +++ b/README.md, +EventBus is publish/subscribe event bus optimized for Android., +EventBus..., + * simplifies the communication between components, +    * decouples event senders and receivers, +    * performs well with Activities, Fragments, and background threads, +    * avoids complex and error-prone dependencies and life cycle issues, + * makes your code simpler, + * is fast, + * is tiny (<50k jar), + * is proven in practice by apps with 100,000,000+ installs, + * has advanced features like delivery threads, subscriber priorities, etc., +EventBus in 3 steps, +-------------------, +1. Define event class:<br/>, +<code>public class MessageEvent { /* Additional fields if needed */ }</code>, +2. Prepare subscribers:<br/>, +<code>eventBus.register(this);</code><br/>, +<code>public void onEvent(AnyEventType event) {/* Do something */};</code>, +3. Post events to the bus:<br/>, +<code>eventBus.post(event);</code>, +**1- Define event class (aka POJO - plain old Java object)**, +    public final String message;, +**2- Subscribers register to EventBus**, +    // In case many events are subscribed, just add another method with the event type, +    public void onEvent(SomeOtherEvent event){, +**3- Post event**, +Post an event from any part of your code. All subscribers matching the event type, will receive it., +EventBus is available on Maven Central, so you simply include it as a dependency in your build. Please ensure that you are using the latest version by [checking here](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22de.greenrobot%22%20AND%20a%3A%22eventbus%22), +, +Gradle:, +Maven:, +Ivy:, +<dependency name="eventbus" org="de.greenrobot" rev="2.2.1" />, +[Or download EventBus from Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22de.greenrobot%22%20AND%20a%3A%22eventbus%22), +A common use case is dealing with UI changes. In Android, UI changes must be done in the UI thread and networking (or any time consuming task) must be done in other treads. EventBus will help you to deal with those tasks and synchronize with the UI thread (without having to delve into thread transitions, using AsyncTask, etc)., +Example:, +        log(event.message);, +Example:, +        textField.setText(event.message);, +        saveToDisk(event.message);, +    // Called in a separate thread, +        backend.send(event.message);, +You may change the order of event delivery by providing a priority to the subscriber during registration., +Let's say, an sticky event was posted some time ago:, +```java, +    EventBus.getDefault().postSticky(new MessageEvent("Hello everyone!"));, +```, +, +After that, a new Activity gets started. During registration using registerSticky, it will immediately get the previously posted sticky event:, +        EventBus.getDefault().registerSticky(this);, +    }, +, +    public void onEventMainThread(MessageEvent event) {, +        textField.setText(event.message);, +        EventBus.getDefault().unregister(this);, +You may also get the last sticky event of a certain type with:]