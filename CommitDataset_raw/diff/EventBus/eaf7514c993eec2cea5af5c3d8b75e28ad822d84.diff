[+++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    private static List<List<Subscription>> postQueuePool = new ArrayList<List<Subscription>>();, +        List<Subscription> subscriptions;, +            int countPooled = postQueuePool.size();, +            if (countPooled == 0) {, +                subscriptions = new ArrayList<EventBus.Subscription>();, +            } else {, +                subscriptions = postQueuePool.remove(countPooled - 1);, +                if (!subscriptions.isEmpty()) {, +                    throw new RuntimeException("Post queue from pool was not empty");, +                }, +            }, +, +        synchronized (this) {, +            postQueuePool.add(subscriptions);, +        }, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    private static List<List<Subscription>> postQueuePool = new ArrayList<List<Subscription>>();, +        List<Subscription> subscriptions;, +            int countPooled = postQueuePool.size();, +            if (countPooled == 0) {, +                subscriptions = new ArrayList<EventBus.Subscription>();, +            } else {, +                subscriptions = postQueuePool.remove(countPooled - 1);, +                if (!subscriptions.isEmpty()) {, +                    throw new RuntimeException("Post queue from pool was not empty");, +                }, +            }, +, +        synchronized (this) {, +            postQueuePool.add(subscriptions);, +        }, +++ b/EventBusTest/src/de/greenrobot/greenbus/test/EventBusBasicTest.java, +    public void testRegisterForEventTypeAndPost() {, +    public void testRegisterForOtherTypeThanPosted() {, +        eventBus.register(this, String.class);, +        eventBus.post(42);, +        assertEquals(0, countIntEvent);, +    }, +, +    public void testRegisterAndPostTwoTypes() {, +        eventBus.register(this);, +        eventBus.post(42);, +        eventBus.post("Hello");, +        assertEquals(1, countIntEvent);, +        assertEquals(1, countStringEvent);, +        assertEquals(42, lastIntEvent);, +        assertEquals("Hello", lastStringEvent);, +    }, +, +    public void testRegisterUnregisterAndPostTwoTypes() {, +        eventBus.register(this);, +        eventBus.unregister(this, String.class);, +        eventBus.post(42);, +        eventBus.post("Hello");, +        assertEquals(1, countIntEvent);, +        assertEquals(42, lastIntEvent);, +        assertEquals(0, countStringEvent);, +    }, +, +    public void testPostOnDifferentEventBus() {, +        eventBus.register(this);, +        new EventBus().post("Hello");, +        assertEquals(0, countStringEvent);, +    }, +, +    public void testPostInEventHandler() {, +        RepostInteger reposter = new RepostInteger();, +        eventBus.register(reposter);, +        eventBus.register(this);, +        eventBus.post(1);, +        assertEquals(10, countIntEvent);, +        // Out-of-order, +        // assertEquals(10, lastIntEvent);, +        assertEquals(10, reposter.countIntEvent);, +        assertEquals(10, reposter.lastIntEvent);, +    }, +, +    public void onEvent(Integer event) {, +    }, +    class RepostInteger {, +        public int lastIntEvent;, +        public int countIntEvent;, +, +        public void onEvent(Integer event) {, +            lastIntEvent = event;, +            countIntEvent++;, +, +            if (event < 10) {, +                eventBus.post(event + 1);, +            }, +        }]