[+++ b/EventBus/build.gradle, +archivesBaseName = 'eventbus', +++ b/EventBus/build.gradle, +archivesBaseName = 'eventbus', +++ b/EventBusAnnotationProcessor/build.gradle, +archivesBaseName = 'eventbus-annotation-processor', +++ b/EventBus/build.gradle, +archivesBaseName = 'eventbus', +++ b/EventBusAnnotationProcessor/build.gradle, +archivesBaseName = 'eventbus-annotation-processor', +++ b/EventBusAnnotationProcessor/src/de/greenrobot/event/annotationprocessor/EventBusAnnotationProcessor.java, +    public SourceVersion getSupportedSourceVersion() {, +        return SourceVersion.latest();, +    }, +, +    @Override, +//                writer.write("\nstatic {new Exception(\"" + infoClassName + "created\").printStackTrace();}\n\n");, +++ b/EventBus/build.gradle, +archivesBaseName = 'eventbus', +++ b/EventBusAnnotationProcessor/build.gradle, +archivesBaseName = 'eventbus-annotation-processor', +++ b/EventBusAnnotationProcessor/src/de/greenrobot/event/annotationprocessor/EventBusAnnotationProcessor.java, +    public SourceVersion getSupportedSourceVersion() {, +        return SourceVersion.latest();, +    }, +, +    @Override, +//                writer.write("\nstatic {new Exception(\"" + infoClassName + "created\").printStackTrace();}\n\n");, +++ b/HOWTO.md, +    @Subscribe(threadMode = ThreadMode.PostThread) // ThreadMode is optional here , +    @Subscribe(threadMode = ThreadMode.MainThread), +    @Subscribe(threadMode = ThreadMode.BackgroundThread), +    @Subscribe(threadMode = ThreadMode.Async), +*Note:* EventBus takes care of calling the `onEvent` method in the proper thread depending on its annotation., +    @Subscribe(priority = 1);, +    public void onEvent(MessageEvent event) {, +    	..., +    }, +    @Subscribe, +After that, a new Activity gets started. During registration, and sticky Subscriber methods will immediately get the previously posted sticky event:, +        EventBus.getDefault().register(this);, +    @Subscribe(sticky = true, threadMode = ThreadMode.MainThread), +    public void onEvent(MessageEvent event) {, +    	// UI updates must run on MainThread, +ProGuard obfuscates method names and may remove "unused" methods, including Subscriber methods. Use the following snip in your ProGuard configuration file (proguard.cfg) to prevent Subscribers from being removed:, +-keepattributes *Annotation*, +    @de.greenrobot.event.Subscribe public *;, +# EventBus 3.0 annotation, +-keepclassmembers class * {, +    @de.greenrobot.event.Subscribe <methods>;, +}, +-keep enum de.greenrobot.event.ThreadMode { *; }, +]