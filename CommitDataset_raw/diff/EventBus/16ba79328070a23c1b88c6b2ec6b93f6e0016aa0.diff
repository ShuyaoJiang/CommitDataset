[+++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        // Should be posted after it is putted, in case the subscriber wants to remove immediately, +        post(event);, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        // Should be posted after it is putted, in case the subscriber wants to remove immediately, +        post(event);, +++ b/EventBusTest/src/de/greenrobot/event/test/EventBusStickyEventTest.java, +    public void testRemoveStickyEventInSubscriber() throws InterruptedException {, +        eventBus.registerSticky(new Object() {, +            @SuppressWarnings("unused"), +            public void onEvent(String event) {, +                eventBus.removeStickyEvent(event);, +            }, +        });, +        eventBus.postSticky("Sticky");, +        eventBus.registerSticky(this);, +        assertNull(lastEvent);, +        assertEquals(0, eventCount.intValue());, +        assertNull(eventBus.getStickyEvent(String.class));, +    }, +, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        // Should be posted after it is putted, in case the subscriber wants to remove immediately, +        post(event);, +++ b/EventBusTest/src/de/greenrobot/event/test/EventBusStickyEventTest.java, +    public void testRemoveStickyEventInSubscriber() throws InterruptedException {, +        eventBus.registerSticky(new Object() {, +            @SuppressWarnings("unused"), +            public void onEvent(String event) {, +                eventBus.removeStickyEvent(event);, +            }, +        });, +        eventBus.postSticky("Sticky");, +        eventBus.registerSticky(this);, +        assertNull(lastEvent);, +        assertEquals(0, eventCount.intValue());, +        assertNull(eventBus.getStickyEvent(String.class));, +    }, +, +++ b/README.md, +*Example:* Consider your subscriber updates the UI, but the triggering event is posted by a background thread (using eventBus.post(event)). The name of the event handling method should be onEventMainThread. EventBus takes care of calling the method in the main thread without any further code required, +API-wise events are made sticky by using postSticky(Object event) instead of post(Object event). Subscribers that want to get previously posted sticky events, use registerSticky(...) instead of register(...). Alternatively, the last sticky event of a certain event type can be queried by using getStickyEvent(Class<?> eventType).]