[+++ b/README.md, +1. Define your event class as a POJO, +```java, +2. Register the eventbus on the class that receives the event, +```java, +        // Registring the bus for MessageEvent, +        EventBus.getDefault().registerSticky(this, MessageEvent.class);, +        // Unregistering the bus, +        EventBus.getDefault().removeStickyEvent(MessageEvent.class);, +    public void onEvent(MessageEvent event){, +        Toast.makeText(getActivity(), event.getMessage().toString(), Toast.LENGTH_SHORT).show();, +3. Post your event from any other class!, +```java, +    EventBus.getDefault().postSticky(new MessageEvent("hello!"));, +```, +This corresponds to this code:, +```java, +    // Called in the same thread (default), +    public void onEvent(MessageEvent event){, +        Toast.makeText(getActivity(), event.getMessage().toString(), Toast.LENGTH_SHORT).show();, +    }, +```, +This corresponds to this code:, +```java, +    // Called in Android UI's main thread, +    public void onEventMainThread(MessageEvent event){, +        Toast.makeText(getActivity(), event.getMessage().toString(), Toast.LENGTH_SHORT).show();, +    }, +```, +```java, +    // Called in the background thread, +    public void onEventBackgroundThread(MessageEvent event){, +        Toast.makeText(getActivity(), event.getMessage().toString(), Toast.LENGTH_SHORT).show();, +    }, +```, +```java, +    // Called in a separate thread (default), +    public void onEventAsync(MessageEvent event){, +        Toast.makeText(getActivity(), event.getMessage().toString(), Toast.LENGTH_SHORT).show();, +    }, +```, +*Note:* EventBus takes care of calling the `onEvent` method in the proper thread depending on its name (onEvent, onEventAsync, etc.)., +You may change the order of event delivery by passing a priority when registering your event bus., +, +```java, +    @Override, +    public void onCreate(Bundle savedInstanceState) {, +        super.onCreate(savedInstanceState);, +        // Registring the bus, +        int priority = 1 ; , +        EventBus.getDefault().register(this, priority);, +    }, +```, +, +Within the same delivery thread (ThreadMode), higher priority subscribers will receive events before others with a lower priority. The default priority is 0. , +, +*Note*: the priority does *NOT* affect the order of delivery among subscribers with different ThreadModes!, +*TODO. For now, this is just the javadoc for the method *, +You may cancel the event delivery by calling `cancelEventDelivery(Object event)` from a subscriber's event handling method. , +Any further event delivery will be canceled. , +Subsequent subscribers won't receive the event. , +Events are usually canceled by higher priority subscribers. Cancelling is restricted to event handling methods running in posting thread [ThreadMode.PostThread]()., +```java, +    @Override, +    public void onCreate(Bundle savedInstanceState) {, +        super.onCreate(savedInstanceState);, +        // Registring the bus for MessageEvent, +        EventBus.getDefault().registerSticky(this, MessageEvent.class);, +    }, +, +    @Override, +    public void onStop() {, +        super.onStop();, +        // Unregistering the bus, +        EventBus.getDefault().removeStickyEvent(MessageEvent.class);, +    }, +    , +A sample application is [available](ttps://github.com/kevintanhongann/EventBusSample), +(Thanks @kevintanhongann), +[Release History](Changelog.md)]