[+++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        boolean forceReflection = subscriberClass.isAnonymousClass();, +        List<SubscriberMethod> subscriberMethods =, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass, forceReflection);, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        boolean forceReflection = subscriberClass.isAnonymousClass();, +        List<SubscriberMethod> subscriberMethods =, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass, forceReflection);, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +    List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass, boolean forceReflection) {, +        if (INDEX != null && !forceReflection) {, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        boolean forceReflection = subscriberClass.isAnonymousClass();, +        List<SubscriberMethod> subscriberMethods =, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass, forceReflection);, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +    List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass, boolean forceReflection) {, +        if (INDEX != null && !forceReflection) {, +++ b/EventBusAnnotationProcessor/src/de/greenrobot/event/annotationprocessor/EventBusAnnotationProcessor.java, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        // @Subscribe in anonymous classes is invisible to annotation processing, always fall back to reflection, +        boolean forceReflection = subscriberClass.isAnonymousClass();, +        List<SubscriberMethod> subscriberMethods =, +                subscriberMethodFinder.findSubscriberMethods(subscriberClass, forceReflection);, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +    List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass, boolean forceReflection) {, +        if (INDEX != null && !forceReflection) {, +++ b/EventBusAnnotationProcessor/src/de/greenrobot/event/annotationprocessor/EventBusAnnotationProcessor.java, +++ b/EventBusTest/src/de/greenrobot/event/test/EventBusInheritanceTest.java, +import java.util.ArrayList;, +import java.util.List;, +, +    public void testSubscriberClassHierarchyAnonymousExtension() {, +        SubscriberExtended subscriber = new SubscriberExtended() {, +, +        };, +        eventBus.register(subscriber);, +, +        eventBus.post("Hello");, +        assertEquals(1, subscriber.countObjectEvent);, +    }, +, +    public void testSubscriberClassHierarchyAnonymous() {, +        final List<String> received = new ArrayList<String>();, +        Object subscriber = new Object() {, +            @Subscribe, +            public void onEvent(String event) {, +                received.add(event);, +            }, +        };, +        eventBus.register(subscriber);, +, +        eventBus.post("Hello");, +        assertEquals(1, received.size());, +        assertEquals("Hello", received.get(0));, +    }, +, +]