[+++ b/CHANGELOG.md, +* Added hasSubscriberForEvent to check if currently subscribers exist registered to a given event type, +++ b/CHANGELOG.md, +* Added hasSubscriberForEvent to check if currently subscribers exist registered to a given event type, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    public boolean hasSubscriberForEvent(Class<?> eventClass) {, +        List<Class<?>> eventTypes = lookupAllEventTypes(eventClass);, +        if (eventTypes != null) {, +            int countTypes = eventTypes.size();, +            for (int h = 0; h < countTypes; h++) {, +                Class<?> clazz = eventTypes.get(h);, +                CopyOnWriteArrayList<Subscription> subscriptions;, +                synchronized (this) {, +                    subscriptions = subscriptionsByEventType.get(clazz);, +                }, +                if (subscriptions != null && !subscriptions.isEmpty()) {, +                    return true;, +                }, +            }, +        }, +        return false;, +    }, +, +        List<Class<?>> eventTypes = lookupAllEventTypes(eventClass);, +    /** Looks up all Class objects including super classes and interfaces. Should also work for interfaces. */, +    private List<Class<?>> lookupAllEventTypes(Class<?> eventClass) {, +++ b/CHANGELOG.md, +* Added hasSubscriberForEvent to check if currently subscribers exist registered to a given event type, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    public boolean hasSubscriberForEvent(Class<?> eventClass) {, +        List<Class<?>> eventTypes = lookupAllEventTypes(eventClass);, +        if (eventTypes != null) {, +            int countTypes = eventTypes.size();, +            for (int h = 0; h < countTypes; h++) {, +                Class<?> clazz = eventTypes.get(h);, +                CopyOnWriteArrayList<Subscription> subscriptions;, +                synchronized (this) {, +                    subscriptions = subscriptionsByEventType.get(clazz);, +                }, +                if (subscriptions != null && !subscriptions.isEmpty()) {, +                    return true;, +                }, +            }, +        }, +        return false;, +    }, +, +        List<Class<?>> eventTypes = lookupAllEventTypes(eventClass);, +    /** Looks up all Class objects including super classes and interfaces. Should also work for interfaces. */, +    private List<Class<?>> lookupAllEventTypes(Class<?> eventClass) {, +++ b/EventBusTest/src/de/greenrobot/event/test/EventBusBasicTest.java, +    public void testHasSubscriberForEvent() {, +        assertFalse(eventBus.hasSubscriberForEvent(String.class));, +        eventBus.register(this);, +        assertTrue(eventBus.hasSubscriberForEvent(String.class));, +    }, +, +    public void testHasSubscriberForEventSuperclass() {, +        assertFalse(eventBus.hasSubscriberForEvent(String.class));, +        eventBus.register(new Object() {, +            public void onEvent(Object event) {, +            }, +        });, +        assertTrue(eventBus.hasSubscriberForEvent(String.class));, +    }, +, +    public void testHasSubscriberForEventImplementedInterface() {, +        assertFalse(eventBus.hasSubscriberForEvent(String.class));, +        eventBus.register(new Object() {, +            public void onEvent(CharSequence event) {, +            }, +        });, +        assertTrue(eventBus.hasSubscriberForEvent(CharSequence.class));, +        assertTrue(eventBus.hasSubscriberForEvent(String.class));, +    }, +]