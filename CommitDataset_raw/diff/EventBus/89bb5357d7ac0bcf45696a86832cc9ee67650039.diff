[+++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +import java.util.Collections;, +        SubscriberMethod[] array = INDEX.getSubscribersFor(subscriberClass);, +        if (array != null && array.length > 0) {, +            for (SubscriberMethod subscriberMethod : array) {, +        } else {, +            return Collections.EMPTY_LIST;, +        }, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +import java.util.Collections;, +        SubscriberMethod[] array = INDEX.getSubscribersFor(subscriberClass);, +        if (array != null && array.length > 0) {, +            for (SubscriberMethod subscriberMethod : array) {, +        } else {, +            return Collections.EMPTY_LIST;, +        }, +++ b/EventBusAnnotationProcessor/src/de/greenrobot/event/annotationprocessor/EventBusAnnotationProcessor.java, +import javax.lang.model.type.TypeKind;, +import java.util.HashSet;, +        collectSubscribers(annotations, env, messager);, +    private void collectSubscribers(Set<? extends TypeElement> annotations, RoundEnvironment env, Messager messager) {, +        for (TypeElement annotation : annotations) {, +            Set<? extends Element> elements = env.getElementsAnnotatedWith(annotation);, +            for (Element element : elements) {, +                if (checkElement(element, messager)) {, +                    Element classElement = element.getEnclosingElement();, +                    List<Element> methods = methodsByClass.get(classElement);, +                    if (methods == null) {, +                        methods = new ArrayList<Element>();, +                        methodsByClass.put(classElement, methods);, +                    }, +                    methods.add(element);, +                }, +            }, +        }, +    }, +, +                TypeElement subscriberClass = (TypeElement) entry.getKey();, +                writeLine(writer, 2, ifPrefix + "if(subscriberClass ==", subscriberClass.asType() + ".class) {");, +, +                Set<String> methodSignatures = new HashSet<String>();, +                writeIndexEntries(writer, null, entry.getValue(), methodSignatures);, +                while (subscriberClass.getSuperclass().getKind() == TypeKind.DECLARED) {, +                    subscriberClass = (TypeElement) processingEnv.getTypeUtils().asElement(subscriberClass.getSuperclass());, +                    List<Element> superClassMethods = methodsByClass.get(subscriberClass);, +                    if (superClassMethods != null) {, +                        writeIndexEntries(writer, subscriberClass, superClassMethods, methodSignatures);, +                    }, +                }, +    private void writeIndexEntries(BufferedWriter writer, TypeElement subscriberClass, List<Element> elements, Set<String> methodSignatures) throws IOException {, +            String methodSignature = element+">"+paramType;, +            if(!methodSignatures.add(methodSignature)) {, +                continue;, +            }, +, +            String subscriberClassString = subscriberClass == null ? "subscriberClass" :, +                    subscriberClass.asType().toString() + ".class";, +, +            Subscribe subscribe = element.getAnnotation(Subscribe.class);, +            writeLine(writer, 4, "createSubscriberMethod(" + subscriberClassString + ",",]