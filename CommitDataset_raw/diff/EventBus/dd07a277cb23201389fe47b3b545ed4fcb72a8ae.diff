[+++ b/EventBus/src/de/greenrobot/event/EventBus.java, +     * exclude subscriber classes from this check. Also disables checks for method modifiers (public, not static nor, +     * abstract)., +    public static void skipMethodVerificationFor(Class<?> clazz) {, +        SubscriberMethodFinder.skipMethodVerificationFor(clazz);, +        SubscriberMethodFinder.clearSkipMethodVerifications();, +    public void register(Object subscriber, int priority) {, +        register(subscriber, defaultMethodName, false, priority);, +    }, +, +        // Starting with EventBus 2.2 we enforced methods to be public (might change with annotations again), +        // subscriberMethod.method.setAccessible(true);, +        , +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +     * exclude subscriber classes from this check. Also disables checks for method modifiers (public, not static nor, +     * abstract)., +    public static void skipMethodVerificationFor(Class<?> clazz) {, +        SubscriberMethodFinder.skipMethodVerificationFor(clazz);, +        SubscriberMethodFinder.clearSkipMethodVerifications();, +    public void register(Object subscriber, int priority) {, +        register(subscriber, defaultMethodName, false, priority);, +    }, +, +        // Starting with EventBus 2.2 we enforced methods to be public (might change with annotations again), +        // subscriberMethod.method.setAccessible(true);, +        , +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +import java.lang.reflect.Modifier;, +import android.util.Log;, +, +    private static final int MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC;, +    private static final Map<Class<?>, Class<?>> skipMethodVerificationForClasses = new ConcurrentHashMap<Class<?>, Class<?>>();, +            // Starting with EventBus 2.2 we enforced methods to be public (might change with annotations again), +            Method[] methods = clazz.getMethods();, +                    int modifiers = method.getModifiers();, +                    if ((modifiers & Modifier.PUBLIC) != 0 && (modifiers & MODIFIERS_IGNORE) == 0) {, +                                if (skipMethodVerificationForClasses.containsKey(clazz)) {, +                    } else if (!skipMethodVerificationForClasses.containsKey(clazz)) {, +                        Log.d(EventBus.TAG, "Skipping method (not public, static or abstract): " + clazz + ".", +                                + methodName);, +                    }, +            throw new EventBusException("Subscriber " + subscriberClass + " has no public methods called ", +                    + eventMethodName);, +    static void skipMethodVerificationFor(Class<?> clazz) {, +        skipMethodVerificationForClasses.put(clazz, clazz);, +    public static void clearSkipMethodVerifications() {, +        skipMethodVerificationForClasses.clear();, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +     * exclude subscriber classes from this check. Also disables checks for method modifiers (public, not static nor, +     * abstract)., +    public static void skipMethodVerificationFor(Class<?> clazz) {, +        SubscriberMethodFinder.skipMethodVerificationFor(clazz);, +        SubscriberMethodFinder.clearSkipMethodVerifications();, +    public void register(Object subscriber, int priority) {, +        register(subscriber, defaultMethodName, false, priority);, +    }, +, +        // Starting with EventBus 2.2 we enforced methods to be public (might change with annotations again), +        // subscriberMethod.method.setAccessible(true);, +        , +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +import java.lang.reflect.Modifier;, +import android.util.Log;, +, +    private static final int MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC;, +    private static final Map<Class<?>, Class<?>> skipMethodVerificationForClasses = new ConcurrentHashMap<Class<?>, Class<?>>();, +            // Starting with EventBus 2.2 we enforced methods to be public (might change with annotations again), +            Method[] methods = clazz.getMethods();, +                    int modifiers = method.getModifiers();, +                    if ((modifiers & Modifier.PUBLIC) != 0 && (modifiers & MODIFIERS_IGNORE) == 0) {, +                                if (skipMethodVerificationForClasses.containsKey(clazz)) {, +                    } else if (!skipMethodVerificationForClasses.containsKey(clazz)) {, +                        Log.d(EventBus.TAG, "Skipping method (not public, static or abstract): " + clazz + ".", +                                + methodName);, +                    }, +            throw new EventBusException("Subscriber " + subscriberClass + " has no public methods called ", +                    + eventMethodName);, +    static void skipMethodVerificationFor(Class<?> clazz) {, +        skipMethodVerificationForClasses.put(clazz, clazz);, +    public static void clearSkipMethodVerifications() {, +        skipMethodVerificationForClasses.clear();, +++ b/EventBusTest/src/de/greenrobot/event/test/EventBusMainSubscriberLegalTest.java, +/*, + * Copyright (C) 2013 Markus Junginger, greenrobot (http://greenrobot.de), + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package de.greenrobot.event.test;, +, +import de.greenrobot.event.EventBusException;]