[+++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false);, +        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false);, +        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());, +++ b/EventBus/src/de/greenrobot/event/SubscriberMethodFinder.java, +    /*, +     * In newer class files, compilers may add methods. Those are called bridge or synthetic methods., +     * EventBus must ignore both. There modifiers are not public but defined in the Java class file format:, +     * http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.6-200-A.1, +     */, +    private static final int BRIDGE = 0x40;, +    private static final int SYNTHETIC = 0x1000;, +    private static final int MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC | BRIDGE | SYNTHETIC;, +    private final boolean strictMethodVerification;, +    SubscriberMethodFinder(boolean strictMethodVerification) {, +        this.strictMethodVerification = strictMethodVerification;, +    List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {, +                if ((modifiers & Modifier.PUBLIC) != 0 && (modifiers & MODIFIERS_IGNORE) == 0) {, +                    if (parameterTypes.length == 1) {, +                        if (subscribeAnnotation != null) {, +                            String methodName = method.getName();, +                                ThreadMode threadMode = subscribeAnnotation.threadMode();, +                    } else if (strictMethodVerification) {, +                        if (method.isAnnotationPresent(Subscribe.class)) {, +                            String methodName = name + "." + method.getName();, +                            throw new EventBusException("@Subscribe method " + methodName +, +                                    "must have exactly 1 parameter but has " + parameterTypes.length);, +                        }, +                    }, +                } else if (strictMethodVerification) {, +                    if (method.isAnnotationPresent(Subscribe.class)) {, +                        String methodName = name + "." + method.getName();, +                        throw new EventBusException(methodName +, +                                " is a illegal @Subscribe method: must be public, non-static, and non-abstract");, +                    }, +, +                }]