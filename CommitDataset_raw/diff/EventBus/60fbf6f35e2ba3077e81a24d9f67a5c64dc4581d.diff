[+++ b/EventBus/build.gradle, +version = '3.0.0-SNAPSHOT', +++ b/EventBus/build.gradle, +version = '3.0.0-SNAPSHOT', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    public static String TAG = "EventBus";, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false);, +        Class<?> subscriberClass = subscriber.getClass();, +        if(subscriberClass.isAnonymousClass()) {, +            // We cannot get @Subscribe annotations from anonymous classes, so fail fast, +            throw new EventBusException("Anonymous class cannot be registered: "+ subscriberClass);, +        }, +        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);, +++ b/EventBus/build.gradle, +version = '3.0.0-SNAPSHOT', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    public static String TAG = "EventBus";, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false);, +        Class<?> subscriberClass = subscriber.getClass();, +        if(subscriberClass.isAnonymousClass()) {, +            // We cannot get @Subscribe annotations from anonymous classes, so fail fast, +            throw new EventBusException("Anonymous class cannot be registered: "+ subscriberClass);, +        }, +        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);, +++ b/EventBus/src/de/greenrobot/event/Subscribe.java, +package de.greenrobot.event;, +, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import de.greenrobot.event.ThreadMode;, +, +@Documented, +@Retention(RetentionPolicy.RUNTIME), +@Target({ElementType.METHOD}), +public @interface Subscribe {, +    ThreadMode threadMode() default ThreadMode.PostThread;, +}, +, +++ b/EventBus/build.gradle, +version = '3.0.0-SNAPSHOT', +++ b/EventBus/src/de/greenrobot/event/EventBus.java, +    public static String TAG = "EventBus";, +        subscriberMethodFinder = new SubscriberMethodFinder(/* TODO */ false);, +        Class<?> subscriberClass = subscriber.getClass();, +        if(subscriberClass.isAnonymousClass()) {, +            // We cannot get @Subscribe annotations from anonymous classes, so fail fast, +            throw new EventBusException("Anonymous class cannot be registered: "+ subscriberClass);, +        }, +        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);, +++ b/EventBus/src/de/greenrobot/event/Subscribe.java, +package de.greenrobot.event;, +, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import de.greenrobot.event.ThreadMode;, +, +@Documented, +@Retention(RetentionPolicy.RUNTIME), +@Target({ElementType.METHOD}), +public @interface Subscribe {, +    ThreadMode threadMode() default ThreadMode.PostThread;, +}, +, +++ b/EventBus/src/de/greenrobot/event/SubscriberIndex.java, +package de.greenrobot.event;, +, +import java.lang.reflect.Method;, +import java.util.HashMap;, +import java.util.Map;, +, +/** Preprocessed index: base class for generated "MyGeneratedSubscriberIndex" class by annotation processing. */, +abstract class SubscriberIndex {, +    private Map<Class<?>, SubscriberMethod[]> map = new HashMap<Class<?>, SubscriberMethod[]>();, +, +    SubscriberMethod[] getSubscribersFor(Class<?> subscriberClass) {, +        SubscriberMethod[] entries = map.get(subscriberClass);, +        if (entries == null) {, +            entries = createSubscribersFor(subscriberClass);, +            if (entries != null) {, +                map.put(subscriberClass, entries);, +            }, +        }, +        return entries;, +    }, +, +    abstract SubscriberMethod[] createSubscribersFor(Class<?> subscriberClass);, +, +    SubscriberMethod createSubscriberMethod(Class<?> subscriberClass, String methodName, Class<?> eventType,, +                                            ThreadMode threadMode) {, +        try {]