[+++ b/EventBus/src/de/greenrobot/event/SubscriberInfo.java, +    protected SubscriberMethod createSubscriberMethod(String methodName, Class<?> eventType) {, +        return createSubscriberMethod(methodName, eventType, ThreadMode.POSTING, 0, false);, +, +    }, +, +    protected SubscriberMethod createSubscriberMethod(String methodName, Class<?> eventType, ThreadMode threadMode) {, +        return createSubscriberMethod(methodName, eventType, threadMode, 0, false);, +    }, +, +    protected SubscriberMethod createSubscriberMethod(String methodName, Class<?> eventType, ThreadMode threadMode,, +                                                      int priority, boolean sticky) {, +++ b/EventBus/src/de/greenrobot/event/SubscriberInfo.java, +    protected SubscriberMethod createSubscriberMethod(String methodName, Class<?> eventType) {, +        return createSubscriberMethod(methodName, eventType, ThreadMode.POSTING, 0, false);, +, +    }, +, +    protected SubscriberMethod createSubscriberMethod(String methodName, Class<?> eventType, ThreadMode threadMode) {, +        return createSubscriberMethod(methodName, eventType, threadMode, 0, false);, +    }, +, +    protected SubscriberMethod createSubscriberMethod(String methodName, Class<?> eventType, ThreadMode threadMode,, +                                                      int priority, boolean sticky) {, +++ b/EventBusAnnotationProcessor/src/de/greenrobot/event/annotationprocessor/EventBusAnnotationProcessor.java, +import de.greenrobot.event.ThreadMode;, +            List<String> parts = new ArrayList<String>();, +            parts.add("createSubscriberMethod(\"" + methodName + "\",");, +            String lineEnd = "),";, +            if (subscribe.priority() == 0 && !subscribe.sticky()) {, +                if (subscribe.threadMode() == ThreadMode.POSTING) {, +                    parts.add(paramType.toString() + ".class" + lineEnd);, +                } else {, +                    parts.add(paramType.toString() + ".class,");, +                    parts.add("ThreadMode." + subscribe.threadMode().name() + lineEnd);, +                }, +            } else {, +                parts.add(paramType.toString() + ".class,");, +                parts.add("ThreadMode." + subscribe.threadMode().name() + ",");, +                parts.add(subscribe.priority() + ",");, +                parts.add(subscribe.sticky() + lineEnd);, +            }, +            writeLine(writer, 3, parts.toArray(new String[parts.size()]));]