[+++ b/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/PerfTestOtto.java, +            super.registerUnregisterOneSubscribers();, +            long timeNanos = super.registerSubscribers();, +            primaryResultMicros = timeNanos / 1000;, +            if (cacheField == null) {, +                // Skip first registration unless just the first registration is tested, +                super.registerUnregisterOneSubscribers();, +            }, +    private long registerSubscribers() {, +        long time = 0;, +            long timeStart = System.nanoTime();, +            long timeEnd = System.nanoTime();, +            time += timeEnd - timeStart;, +                return 0;, +        return time;, +    }, +, +    private void registerUnregisterOneSubscribers() {, +        if (!subscribers.isEmpty()) {, +            Object subscriber = subscribers.get(0);, +            eventBus.register(subscriber);, +            eventBus.unregister(subscriber);, +        }, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/PerfTestOtto.java, +            super.registerUnregisterOneSubscribers();, +            long timeNanos = super.registerSubscribers();, +            primaryResultMicros = timeNanos / 1000;, +            if (cacheField == null) {, +                // Skip first registration unless just the first registration is tested, +                super.registerUnregisterOneSubscribers();, +            }, +    private long registerSubscribers() {, +        long time = 0;, +            long timeStart = System.nanoTime();, +            long timeEnd = System.nanoTime();, +            time += timeEnd - timeStart;, +                return 0;, +        return time;, +    }, +, +    private void registerUnregisterOneSubscribers() {, +        if (!subscribers.isEmpty()) {, +            Object subscriber = subscribers.get(0);, +            eventBus.register(subscriber);, +            eventBus.unregister(subscriber);, +        }, +++ b/EventBusPerformance/src/de/greenrobot/eventperf/testsubject/TestEventBus.java, +            super.registerUnregisterOneSubscribers();, +            long timeNanos = super.registerSubscribers();, +            primaryResultMicros = timeNanos / 1000;, +            if (clearCachesMethod == null) {, +                // Skip first registration unless just the first registration is tested, +                super.registerUnregisterOneSubscribers();, +            }, +    private long registerSubscribers() {, +        long time = 0;, +            long timeStart = System.nanoTime();, +            long timeEnd = System.nanoTime();, +            time += timeEnd - timeStart;, +                return 0;, +        return time;, +    }, +, +    private void registerUnregisterOneSubscribers() {, +        if (!subscribers.isEmpty()) {, +            Object subscriber = subscribers.get(0);, +            eventBus.register(subscriber);, +            eventBus.unregister(subscriber);, +        }]