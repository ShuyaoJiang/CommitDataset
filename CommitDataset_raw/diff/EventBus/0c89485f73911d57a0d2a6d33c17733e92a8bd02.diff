[+++ b/EventBusAnnotationProcessor/src/de/greenrobot/event/annotationprocessor/EventBusAnnotationProcessor.java, +import javax.annotation.processing.SupportedSourceVersion;, +import javax.lang.model.SourceVersion;, +import javax.lang.model.element.Modifier;, +import javax.lang.model.type.DeclaredType;, +@SupportedSourceVersion(SourceVersion.RELEASE_6), +        if (element.getModifiers().contains(Modifier.STATIC)) {, +            messager.printMessage(Diagnostic.Kind.ERROR, "Subscriber method must not be static", element);, +            return;, +        }, +, +        Set<Modifier> subscriberClassModifiers = element.getEnclosingElement().getModifiers();, +        if (!subscriberClassModifiers.contains(Modifier.PUBLIC)) {, +            messager.printMessage(Diagnostic.Kind.ERROR, "Subscriber class must be public",, +                    element.getEnclosingElement());, +            return;, +        }, +, +            messager.printMessage(Diagnostic.Kind.ERROR, "Subscriber method must have exactly 1 parameter", element);, +            return;, +, +        VariableElement param = parameters.get(0);, +        DeclaredType paramType = (DeclaredType) param.asType();, +        Set<Modifier> eventClassModifiers = paramType.asElement().getModifiers();, +        if (!eventClassModifiers.contains(Modifier.PUBLIC)) {, +            messager.printMessage(Diagnostic.Kind.ERROR, "Event type must be public: " + paramType, param);, +            return;, +        }, +, +        String subscriberClass = element.getEnclosingElement().asType().toString();, +        Name methodName = element.getSimpleName();, +        writer.append("            \"").append(methodName).append("\",\n");, +        writer.append("            ").append(paramType.toString()).append(".class,\n");, +, +        messager.printMessage(Diagnostic.Kind.NOTE, "Indexed @Subscribe at " +, +                element.getEnclosingElement().getSimpleName() + "." + methodName +, +                "(" + paramType.asElement().getSimpleName() + ")");]