[+++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +++ /dev/null, +++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '2.2.0', +++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '2.2.0', +++ b/EventBus/src/de/greenrobot/event/AsyncPoster.java, +++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '2.2.0', +++ b/EventBus/src/de/greenrobot/event/AsyncPoster.java, +++ b/EventBus/src/de/greenrobot/event/BackgroundPoster.java, +++ b/.gitignore, +.settings/, +, +, +gen/, +bin/, +release/, +build/, +, +.gradle/, +gradle.properties, +++ /dev/null, +++ b/EventBus/build.gradle, +version = '2.2.0', +++ b/EventBus/src/de/greenrobot/event/AsyncPoster.java, +++ b/EventBus/src/de/greenrobot/event/BackgroundPoster.java, +++ b/EventBus/src/de/greenrobot/event/EventBus.java, + * subscribers receive events until the call of {@link #unregister(Object)}. By convention, event handling methods must, + * be named "onEvent", be public, return nothing (void), and have exactly one parameter (the event)., +    private final ThreadLocal<PostingThreadState> currentPostingThreadState = new ThreadLocal<PostingThreadState>() {, +        protected PostingThreadState initialValue() {, +            return new PostingThreadState();, +     * exclude subscriber classes from this check. Also disables checks for method modifiers (public, not static nor, +     * abstract)., +    public static void skipMethodVerificationFor(Class<?> clazz) {, +        SubscriberMethodFinder.skipMethodVerificationFor(clazz);, +        SubscriberMethodFinder.clearSkipMethodVerifications();, +        register(subscriber, defaultMethodName, false, 0);, +     * Like {@link #register(Object)} with an additional subscriber priority to influence the order of event delivery., +     * Within the same delivery thread ({@link ThreadMode}), higher priority subscribers will receive events before, +     * others with a lower priority. The default priority is 0. Note: the priority does *NOT* affect the order of, +     * delivery among subscribers with different {@link ThreadMode}s!]