[+++ b/android/src/com/google/zxing/client/android/encode/EncodeActivity.java, +    if (!barcodesRoot.exists() && !barcodesRoot.mkdirs()) {, +    File barcodeFile = new File(barcodesRoot, makeBarcodeFileName(contents) + ".png");, +        try {, +          // do nothing, +        }, +      }, +++ b/android/src/com/google/zxing/client/android/encode/EncodeActivity.java, +    if (!barcodesRoot.exists() && !barcodesRoot.mkdirs()) {, +    File barcodeFile = new File(barcodesRoot, makeBarcodeFileName(contents) + ".png");, +        try {, +          // do nothing, +        }, +      }, +++ b/android/src/com/google/zxing/client/android/history/HistoryManager.java, +import android.os.Environment;, +import java.io.File;, +import java.io.FileOutputStream;, +import java.io.IOException;, +import java.io.OutputStreamWriter;, +import java.nio.charset.Charset;, +import android.util.Log;, +  private static final String TAG = HistoryManager.class.getSimpleName();, +, +    List<Result> items = getHistoryItems();, +    int size = items.size();, +    String[] dialogItems = new String[size + 2];, +    for (int i = 0; i < size; i++) {, +    Resources res = activity.getResources();, +    DialogInterface.OnClickListener clickListener = new HistoryClickListener(dialogItems, items);, +   * line, terminated by a line break (\r\n). The values in each line are comma-separated,, +          historyText.append('"').append(massageHistoryField(cursor.getString(col))).append("\",");, +        historyText.append('"').append(massageHistoryField(, +            EXPORT_DATE_TIME_FORMAT.format(new Date(timestamp)))).append("\"\r\n");, +  private Uri saveHistory(String history) {, +    File bsRoot = new File(Environment.getExternalStorageDirectory(), "BarcodeScanner");, +    File historyRoot = new File(bsRoot, "History");, +    if (!historyRoot.exists() && !historyRoot.mkdirs()) {, +      Log.v(TAG, "Couldn't make dir " + historyRoot);, +      return null;, +    }, +    File historyFile = new File(historyRoot, "history-" + System.currentTimeMillis() + ".csv");, +    OutputStreamWriter out = null;, +    try {, +      out = new OutputStreamWriter(new FileOutputStream(historyFile), Charset.forName("UTF-8"));, +      out.write(history);, +      return Uri.parse("file://" + historyFile.getAbsolutePath());, +    } catch (IOException ioe) {, +      Log.v(TAG, "Couldn't access file " + historyFile + " due to " + ioe);, +      return null;, +    } finally {, +      if (out != null) {, +        try {, +          out.close();, +        } catch (IOException ioe) {, +          // do nothing, +        }, +      }, +    }, +  }, +, +  private class HistoryClickListener implements DialogInterface.OnClickListener {, +, +    private final String[] dialogItems;, +    private final List<Result> items;, +, +    private HistoryClickListener(String[] dialogItems, List<Result> items) {, +      this.dialogItems = dialogItems;, +      this.items = items;, +    }, +, +    public void onClick(DialogInterface dialogInterface, int i) {, +      if (i == dialogItems.length - 1) {, +        clearHistory();, +      } else if (i == dialogItems.length - 2) {, +        CharSequence history = buildHistory();, +        Uri historyFile = saveHistory(history.toString());, +        if (historyFile == null) {, +          AlertDialog.Builder builder = new AlertDialog.Builder(activity);, +          builder.setMessage(R.string.msg_unmount_usb);, +          builder.setPositiveButton(R.string.button_ok, null);, +          builder.show();, +          return;, +        }, +        Intent intent = new Intent(Intent.ACTION_SEND, Uri.parse("mailto:"));, +        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);, +        String subject = activity.getResources().getString(R.string.history_email_title);, +        intent.putExtra(Intent.EXTRA_SUBJECT, subject);, +        intent.putExtra(Intent.EXTRA_TEXT, subject);, +        intent.putExtra(Intent.EXTRA_STREAM, historyFile);, +        intent.setType("text/csv");, +        activity.startActivity(intent);, +      } else {, +        Result result = items.get(i);, +        Message message = Message.obtain(activity.getHandler(), R.id.decode_succeeded, result);, +        message.sendToTarget();, +      }, +    }, +  }]