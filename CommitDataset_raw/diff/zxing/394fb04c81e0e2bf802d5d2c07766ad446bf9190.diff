[+++ b/android/src/com/android/barcodes/AndroidHttpClient.java, +import org.apache.http.HttpMessage;, + * <p>Subclass of the Apache {@link DefaultHttpClient} that is configured with, + * Don't create this directly, use the {@link #newInstance} factory method.</p>, + * To retain cookies, simply add a cookie store to the HttpContext:, + * </p>, +  public static final long DEFAULT_SYNC_MIN_GZIP_BYTES = 256;, +  /**, +   * Set if HTTP requests are blocked from being executed on this thread, +   */, +  /**, +   * Interceptor throws an exception if the executing thread is blocked, +   */, +   *, +        context.setAttribute(ClientContext.AUTHSCHEME_REGISTRY, getAuthSchemes());, +        context.setAttribute(ClientContext.COOKIESPEC_REGISTRY, getCookieSpecs());, +        context.setAttribute(ClientContext.CREDS_PROVIDER, getCredentialsProvider());, +   *, +   *, +  public static void modifyRequestToAcceptGzipResponse(HttpMessage request) {, +  public static InputStream getUngzippedContent(HttpEntity entity) throws IOException {, +    if (responseStream == null) {, +      return responseStream;, +    }, +    if (header == null) {, +      return responseStream;, +    }, +    if (contentEncoding == null) {, +      return responseStream;, +    }, +    if (contentEncoding.contains("gzip")) responseStream = new GZIPInputStream(responseStream);, +  public HttpResponse execute(HttpUriRequest request, HttpContext context) throws IOException {, +  public HttpResponse execute(HttpHost target, HttpRequest request) throws IOException {, +  public <T> T execute(HttpUriRequest request, ResponseHandler<? extends T> responseHandler) throws IOException {, +  public <T> T execute(HttpUriRequest request, ResponseHandler<? extends T> responseHandler, HttpContext context), +      throws IOException {, +  public <T> T execute(HttpHost target, HttpRequest request, ResponseHandler<? extends T> responseHandler), +      throws IOException {, +                       ResponseHandler<? extends T> responseHandler,, +                       HttpContext context), +      throws IOException {, +   *, +  public static AbstractHttpEntity getCompressedEntity(byte data[]) throws IOException {, +    if (data.length < getMinGzipSize()) {, +  public static long getMinGzipSize() {, +  /**, +   * cURL logging configuration., +   */, +    private String toCurl(HttpUriRequest request) throws IOException {, +      builder.append('"');, +      builder.append('"');, +            builder.append(" --data-ascii \"").append(entityString).append('"');, +, +}]