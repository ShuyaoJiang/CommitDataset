[+++ b/core/src/main/java/com/google/zxing/BinaryBitmap.java, +  @Override, +  public String toString() {, +    try {, +      return getBlackMatrix().toString();, +    } catch (NotFoundException e) {, +      return "";, +    }, +  }, +, +++ b/core/src/main/java/com/google/zxing/BinaryBitmap.java, +  @Override, +  public String toString() {, +    try {, +      return getBlackMatrix().toString();, +    } catch (NotFoundException e) {, +      return "";, +    }, +  }, +, +++ b/core/src/main/java/com/google/zxing/common/BitArray.java, +import java.util.Arrays;, +, +public final class BitArray implements Cloneable {, +  public boolean equals(Object o) {, +    if (!(o instanceof BitArray)) {, +      return false;, +    }, +    BitArray other = (BitArray) o;, +    return size == other.size && Arrays.equals(bits, other.bits);, +  }, +, +  @Override, +  public int hashCode() {, +    return 31 * size + Arrays.hashCode(bits);, +  }, +, +  @Override, +  @Override, +  public BitArray clone() {, +    return new BitArray(bits.clone(), size);, +  }, +, +++ b/core/src/main/java/com/google/zxing/BinaryBitmap.java, +  @Override, +  public String toString() {, +    try {, +      return getBlackMatrix().toString();, +    } catch (NotFoundException e) {, +      return "";, +    }, +  }, +, +++ b/core/src/main/java/com/google/zxing/common/BitArray.java, +import java.util.Arrays;, +, +public final class BitArray implements Cloneable {, +  public boolean equals(Object o) {, +    if (!(o instanceof BitArray)) {, +      return false;, +    }, +    BitArray other = (BitArray) o;, +    return size == other.size && Arrays.equals(bits, other.bits);, +  }, +, +  @Override, +  public int hashCode() {, +    return 31 * size + Arrays.hashCode(bits);, +  }, +, +  @Override, +  @Override, +  public BitArray clone() {, +    return new BitArray(bits.clone(), size);, +  }, +, +++ b/core/src/main/java/com/google/zxing/common/BitMatrix.java, +import java.util.Arrays;, +, +public final class BitMatrix implements Cloneable {, +  private BitMatrix(int width, int height, int rowSize, int[] bits) {, +    this.width = width;, +    this.height = height;, +    this.rowSize = rowSize;, +    this.bits = bits;, +  }, +, +    } else {, +      row.clear();, +   * Modifies this {@code BitMatrix} to represent the same but rotated 180 degrees, +   */, +  public void rotate180() {, +    int width = getWidth();, +    int height = getHeight();, +    BitArray topRow = new BitArray(width);, +    BitArray bottomRow = new BitArray(width);, +    for (int i = 0; i < (height+1) / 2; i++) {, +      topRow = getRow(i, topRow);, +      bottomRow = getRow(height - 1 - i, bottomRow);, +      topRow.reverse();]