[+++ b/actionscript/core/src/com/google/zxing/BarcodeFormat.as, + import com.google.zxing.common.flexdatatypes.HashTable;, + import com.google.zxing.common.flexdatatypes.IllegalArgumentException;, +, +	private static var VALUES:HashTable = new HashTable();, +, +  /** Aztec 2D barcode format. */, +  		public static var AZTEC:BarcodeFormat = new BarcodeFormat("AZTEC");, +  /** CODABAR 1D format. */, +        public static var CODABAR:BarcodeFormat = new BarcodeFormat("CODABAR");, +  /** UPC/EAN extension format. Not a stand-alone format. */, +  		public static var UPC_EAN_EXTENSION:BarcodeFormat = new BarcodeFormat("UPC_EAN_EXTENSION");, +  /** Code 93 1D format. */, +        public static var CODE_93:BarcodeFormat = new BarcodeFormat("CODE_93");, +  /** RSS 14 */, +  		public static var RSS_14:BarcodeFormat = new BarcodeFormat("RSS_14");, +  /** RSS EXPANDED */, +  		public static var RSS_EXPANDED:BarcodeFormat = new BarcodeFormat("RSS_EXPANDED");, +  /** MAXICODE */, +  		public static var MAXICODE:BarcodeFormat = new BarcodeFormat("MAXICODE");, +			VALUES._put(name, this);, +        , +        public static function valueOf(name:String):BarcodeFormat , +			if (name == null || name.length == 0) {, +			  throw new IllegalArgumentException();, +			}, +			var format:BarcodeFormat  = (VALUES._get(name) as BarcodeFormat);, +			if (format == null) , +			  throw new IllegalArgumentException();, +			return format;, +++ b/actionscript/core/src/com/google/zxing/BarcodeFormat.as, + import com.google.zxing.common.flexdatatypes.HashTable;, + import com.google.zxing.common.flexdatatypes.IllegalArgumentException;, +, +	private static var VALUES:HashTable = new HashTable();, +, +  /** Aztec 2D barcode format. */, +  		public static var AZTEC:BarcodeFormat = new BarcodeFormat("AZTEC");, +  /** CODABAR 1D format. */, +        public static var CODABAR:BarcodeFormat = new BarcodeFormat("CODABAR");, +  /** UPC/EAN extension format. Not a stand-alone format. */, +  		public static var UPC_EAN_EXTENSION:BarcodeFormat = new BarcodeFormat("UPC_EAN_EXTENSION");, +  /** Code 93 1D format. */, +        public static var CODE_93:BarcodeFormat = new BarcodeFormat("CODE_93");, +  /** RSS 14 */, +  		public static var RSS_14:BarcodeFormat = new BarcodeFormat("RSS_14");, +  /** RSS EXPANDED */, +  		public static var RSS_EXPANDED:BarcodeFormat = new BarcodeFormat("RSS_EXPANDED");, +  /** MAXICODE */, +  		public static var MAXICODE:BarcodeFormat = new BarcodeFormat("MAXICODE");, +			VALUES._put(name, this);, +        , +        public static function valueOf(name:String):BarcodeFormat , +			if (name == null || name.length == 0) {, +			  throw new IllegalArgumentException();, +			}, +			var format:BarcodeFormat  = (VALUES._get(name) as BarcodeFormat);, +			if (format == null) , +			  throw new IllegalArgumentException();, +			return format;, +++ b/actionscript/core/src/com/google/zxing/BufferedImageLuminanceSource.as, +    // todo, +++ b/actionscript/core/src/com/google/zxing/BarcodeFormat.as, + import com.google.zxing.common.flexdatatypes.HashTable;, + import com.google.zxing.common.flexdatatypes.IllegalArgumentException;, +, +	private static var VALUES:HashTable = new HashTable();, +, +  /** Aztec 2D barcode format. */, +  		public static var AZTEC:BarcodeFormat = new BarcodeFormat("AZTEC");, +  /** CODABAR 1D format. */, +        public static var CODABAR:BarcodeFormat = new BarcodeFormat("CODABAR");, +  /** UPC/EAN extension format. Not a stand-alone format. */, +  		public static var UPC_EAN_EXTENSION:BarcodeFormat = new BarcodeFormat("UPC_EAN_EXTENSION");, +  /** Code 93 1D format. */, +        public static var CODE_93:BarcodeFormat = new BarcodeFormat("CODE_93");, +  /** RSS 14 */, +  		public static var RSS_14:BarcodeFormat = new BarcodeFormat("RSS_14");, +  /** RSS EXPANDED */, +  		public static var RSS_EXPANDED:BarcodeFormat = new BarcodeFormat("RSS_EXPANDED");, +  /** MAXICODE */, +  		public static var MAXICODE:BarcodeFormat = new BarcodeFormat("MAXICODE");, +			VALUES._put(name, this);, +        , +        public static function valueOf(name:String):BarcodeFormat , +			if (name == null || name.length == 0) {, +			  throw new IllegalArgumentException();, +			}, +			var format:BarcodeFormat  = (VALUES._get(name) as BarcodeFormat);, +			if (format == null) , +			  throw new IllegalArgumentException();, +			return format;, +++ b/actionscript/core/src/com/google/zxing/BufferedImageLuminanceSource.as, +    // todo, +++ b/actionscript/core/src/com/google/zxing/ChecksumException.as, +/*, + * Copyright 2007 ZXing authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License.]