[+++ b/core/src/com/google/zxing/qrcode/detector/FinderPatternFinder.java, +                  stateCount[0] = stateCount[2];, +                  stateCount[1] = stateCount[3];, +                  stateCount[2] = stateCount[4];, +                  stateCount[3] = 1;, +                  stateCount[4] = 0;, +                  currentState = 3;, +                  continue;, +      float square = 0.0f;, +        float size = ((FinderPattern) possibleCenters.elementAt(i)).getEstimatedModuleSize();, +        totalModuleSize += size;, +        square += size * size;, +      float stdDev = (float) Math.sqrt(square / startSize - average * average);, +, +      Collections.insertionSort(possibleCenters, new FurthestFromAverageComparator(average));, +, +      float limit = Math.max(0.2f * average, stdDev);, +, +        if (Math.abs(pattern.getEstimatedModuleSize() - average) > limit) {, +, +      float totalModuleSize = 0.0f;, +      for (int i = 0; i < possibleCenters.size(); i++) {, +        totalModuleSize += ((FinderPattern) possibleCenters.elementAt(i)).getEstimatedModuleSize();, +      }, +, +      float average = totalModuleSize / (float) possibleCenters.size();, +, +      Collections.insertionSort(possibleCenters, new CenterComparator(average));, +, +   * <p>Orders by furthest from average</p>, +   */, +  private static class FurthestFromAverageComparator implements Comparator {, +    private final float average;, +    public FurthestFromAverageComparator(float f) {, +      average = f;, +    }, +    public int compare(Object center1, Object center2) {, +      float dA = Math.abs(((FinderPattern) center2).getEstimatedModuleSize() - average);, +      float dB = Math.abs(((FinderPattern) center1).getEstimatedModuleSize() - average);, +      return dA < dB ? -1 : (dA == dB ? 0 : 1);, +    }, +  }, +, +  /**, +    private final float average;, +    public CenterComparator(float f) {, +      average = f;, +    }, +      if (((FinderPattern) center2).getCount() != ((FinderPattern) center1).getCount()) {, +      } else {, +        float dA = Math.abs(((FinderPattern) center2).getEstimatedModuleSize() - average);, +        float dB = Math.abs(((FinderPattern) center1).getEstimatedModuleSize() - average);, +        return dA < dB ? 1 : (dA == dB ? 0 : -1);, +      }, +++ b/core/src/com/google/zxing/qrcode/detector/FinderPatternFinder.java, +                  stateCount[0] = stateCount[2];, +                  stateCount[1] = stateCount[3];, +                  stateCount[2] = stateCount[4];, +                  stateCount[3] = 1;, +                  stateCount[4] = 0;, +                  currentState = 3;, +                  continue;, +      float square = 0.0f;, +        float size = ((FinderPattern) possibleCenters.elementAt(i)).getEstimatedModuleSize();, +        totalModuleSize += size;, +        square += size * size;, +      float stdDev = (float) Math.sqrt(square / startSize - average * average);, +, +      Collections.insertionSort(possibleCenters, new FurthestFromAverageComparator(average));, +, +      float limit = Math.max(0.2f * average, stdDev);, +, +        if (Math.abs(pattern.getEstimatedModuleSize() - average) > limit) {, +, +      float totalModuleSize = 0.0f;, +      for (int i = 0; i < possibleCenters.size(); i++) {, +        totalModuleSize += ((FinderPattern) possibleCenters.elementAt(i)).getEstimatedModuleSize();, +      }, +, +      float average = totalModuleSize / (float) possibleCenters.size();, +, +      Collections.insertionSort(possibleCenters, new CenterComparator(average));, +, +   * <p>Orders by furthest from average</p>, +   */, +  private static class FurthestFromAverageComparator implements Comparator {, +    private final float average;, +    public FurthestFromAverageComparator(float f) {, +      average = f;, +    }, +    public int compare(Object center1, Object center2) {, +      float dA = Math.abs(((FinderPattern) center2).getEstimatedModuleSize() - average);, +      float dB = Math.abs(((FinderPattern) center1).getEstimatedModuleSize() - average);, +      return dA < dB ? -1 : (dA == dB ? 0 : 1);, +    }, +  }, +, +  /**, +    private final float average;, +    public CenterComparator(float f) {]