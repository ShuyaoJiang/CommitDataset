[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/android-integration/src/main/java/com/google/zxing/integration/android/IntentIntegrator.java, +/*, + * Copyright 2009 ZXing authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.zxing.integration.android;, +, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import android.app.Activity;, +import android.app.AlertDialog;, +import android.content.ActivityNotFoundException;, +import android.content.DialogInterface;, +import android.content.Intent;, +import android.content.pm.PackageManager;, +import android.content.pm.ResolveInfo;, +import android.net.Uri;, +import android.os.Bundle;, +import android.util.Log;, +, +/**, + * <p>A utility class which helps ease integration with Barcode Scanner via {@link Intent}s. This is a simple, + * way to invoke barcode scanning and receive the result, without any need to integrate, modify, or learn the, + * project's source code.</p>, + *, + * <h2>Initiating a barcode scan</h2>, + *, + * <p>To integrate, create an instance of {@code IntentIntegrator} and call {@link #initiateScan()} and wait, + * for the result in your app.</p>, + *, + * <p>It does require that the Barcode Scanner (or work-alike) application is installed. The, + * {@link #initiateScan()} method will prompt the user to download the application, if needed.</p>, + *, + * <p>There are a few steps to using this integration. First, your {@link Activity} must implement, + * the method {@link Activity#onActivityResult(int, int, Intent)} and include a line of code like this:</p>, + *, + * <pre>{@code, + * public void onActivityResult(int requestCode, int resultCode, Intent intent) {, + *   IntentResult scanResult = IntentIntegrator.parseActivityResult(requestCode, resultCode, intent);, + *   if (scanResult != null) {, + *     // handle scan result, + *   }, + *   // else continue with any other code you need in the method, + *   ..., + * }, + * }</pre>, + *, + * <p>This is where you will handle a scan result.</p>, + *, + * <p>Second, just call this in response to a user action somewhere to begin the scan process:</p>, + *, + * <pre>{@code, + * IntentIntegrator integrator = new IntentIntegrator(yourActivity);, + * integrator.initiateScan();, + * }</pre>, + *, + * <p>Note that {@link #initiateScan()} returns an {@link AlertDialog} which is non-null if the, + * user was prompted to download the application. This lets the calling app potentially manage the dialog., + * In particular, ideally, the app dismisses the dialog if it's still active in its {@link Activity#onPause()}, + * method.</p>, + * , + * <p>You can use {@link #setTitle(String)} to customize the title of this download prompt dialog (or, use, + * {@link #setTitleByID(int)} to set the title by string resource ID.) Likewise, the prompt message, and, + * yes/no button labels can be changed.</p>, + *, + * <p>Finally, you can use {@link #addExtra(String, Object)} to add more parameters to the Intent used, + * to invoke the scanner. This can be used to set additional options not directly exposed by this, + * simplified API.</p>, + * ]