[+++ b/core/src/com/google/zxing/oned/MultiFormatUPCEANReader.java, +      //, +      // But, don't return UPC-A if UPC-A was not a requested format!, +      boolean ean13MayBeUPCA =, +          BarcodeFormat.EAN_13.equals(result.getBarcodeFormat()) &&, +          result.getText().charAt(0) == '0';, +      Vector possibleFormats = hints == null ? null : (Vector) hints.get(DecodeHintType.POSSIBLE_FORMATS);, +      boolean canReturnUPCA = possibleFormats == null || possibleFormats.contains(BarcodeFormat.UPC_A);, +, +      if (ean13MayBeUPCA && canReturnUPCA) {, +        return new Result(result.getText().substring(1), null, result.getResultPoints(), BarcodeFormat.UPC_A);, +++ b/core/src/com/google/zxing/oned/MultiFormatUPCEANReader.java, +      //, +      // But, don't return UPC-A if UPC-A was not a requested format!, +      boolean ean13MayBeUPCA =, +          BarcodeFormat.EAN_13.equals(result.getBarcodeFormat()) &&, +          result.getText().charAt(0) == '0';, +      Vector possibleFormats = hints == null ? null : (Vector) hints.get(DecodeHintType.POSSIBLE_FORMATS);, +      boolean canReturnUPCA = possibleFormats == null || possibleFormats.contains(BarcodeFormat.UPC_A);, +, +      if (ean13MayBeUPCA && canReturnUPCA) {, +        return new Result(result.getText().substring(1), null, result.getResultPoints(), BarcodeFormat.UPC_A);, +++ b/core/test/src/com/google/zxing/oned/EAN13BlackBox1TestCase.java, +    addTest(30, 32, 0.0f);]