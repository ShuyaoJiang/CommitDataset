[+++ b/csharp/common/ByteMatrix.cs, +using System.Drawing.Imaging;, +using System.Drawing;, +using System.Runtime.InteropServices;, +, +    /// <summary>, +    /// Converts this ByteMatrix to a black and white bitmap., +    /// </summary>, +    /// <returns>A black and white bitmap converted from this ByteMatrix.</returns>, +    public Bitmap ToBitmap(), +    {, +      const byte BLACK = 0;, +      const byte WHITE = 255;, +      sbyte[][] array = this.Array;, +      int width = this.Width;, +      int height = this.Height;, +      byte[] pixels = new byte[width * height];, +, +      for (int y = 0; y < height; y++), +      {, +        int offset = y * width;, +        for (int x = 0; x < width; x++), +        {, +           ixels[offset + x] = array[y][x] == 0 ? BLACK : WHITE;, +        }, +      }, +, +      //Here create the Bitmap to the known height, width and format, +      Bitmap bmp = new Bitmap(width, height, PixelFormat.Format8bppIndexed);, +, +      //Create a BitmapData and Lock all pixels to be written, +      BitmapData bmpData =, +        bmp.LockBits(new Rectangle(0, 0, bmp.Width, bmp.Height),, +                     ImageLockMode.WriteOnly, bmp.PixelFormat);, +, +      //Copy the data from the byte array into BitmapData.Scan0, +      Marshal.Copy(pixels, 0, bmpData.Scan0, pixels.Length);, +, +      //Unlock the pixels, +      bmp.UnlockBits(bmpData);, +, +      //Return the bitmap, +      return bmp;, +    }]