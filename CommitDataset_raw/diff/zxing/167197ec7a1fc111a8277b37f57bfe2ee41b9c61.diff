[+++ b/android/src/com/google/zxing/client/android/DecodeThread.java, +import com.google.zxing.BarcodeFormat;, +import com.google.zxing.BinaryBitmap;, +import com.google.zxing.DecodeHintType;, +import com.google.zxing.MultiFormatReader;, +import com.google.zxing.ReaderException;, +import com.google.zxing.Result;, +import com.google.zxing.common.GlobalHistogramBinarizer;, +, +import android.graphics.Rect;, +    Rect rect = CameraManager.get().getFramingRect();, +    YUVLuminanceSource source = new YUVLuminanceSource(data, width, height, rect.left, rect.top,, +        rect.width(), rect.height());, +    BinaryBitmap bitmap = new BinaryBitmap(new GlobalHistogramBinarizer(source));, +      rawResult = mMultiFormatReader.decodeWithState(bitmap);, +++ b/android/src/com/google/zxing/client/android/DecodeThread.java, +import com.google.zxing.BarcodeFormat;, +import com.google.zxing.BinaryBitmap;, +import com.google.zxing.DecodeHintType;, +import com.google.zxing.MultiFormatReader;, +import com.google.zxing.ReaderException;, +import com.google.zxing.Result;, +import com.google.zxing.common.GlobalHistogramBinarizer;, +, +import android.graphics.Rect;, +    Rect rect = CameraManager.get().getFramingRect();, +    YUVLuminanceSource source = new YUVLuminanceSource(data, width, height, rect.left, rect.top,, +        rect.width(), rect.height());, +    BinaryBitmap bitmap = new BinaryBitmap(new GlobalHistogramBinarizer(source));, +      rawResult = mMultiFormatReader.decodeWithState(bitmap);, +++ b/android/src/com/google/zxing/client/android/YUVLuminanceSource.java, +/*, + * Copyright 2009 ZXing authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.zxing.client.android;, +, +import com.google.zxing.LuminanceSource;, +, +import android.graphics.Bitmap;, +, +/**, + * This object extends LuminanceSource around an array of YUV data returned from the camera driver,, + * with the option to crop to a rectangle within the full data. This can be used to exclude, + * superfluous pixels around the perimeter and speed up decoding., + *, + * @author dswitkin@google.com (Daniel Switkin), + */, +public final class YUVLuminanceSource extends LuminanceSource {, +, +  private final byte[] yuvData;, +  private final int dataWidth;, +  private final int dataHeight;, +  private final int left;, +  private final int top;, +, +  public YUVLuminanceSource(byte[] yuvData, int dataWidth, int dataHeight, int left, int top,, +      int width, int height) {, +    super(width, height);, +, +    if (left + width > dataWidth || top + height > dataHeight) {, +      throw new IllegalArgumentException("Crop rectangle does not fit within image data.");, +    }, +, +    this.yuvData = yuvData;, +    this.dataWidth = dataWidth;, +    this.dataHeight = dataHeight;, +    this.left = left;, +    this.top = top;, +  }, +, +  public byte[] getRow(int y, byte[] row) {, +    if (y < 0 || y >= getHeight()) {, +      throw new IllegalArgumentException("Requested row is outside the image: " + y);, +    }, +    int width = getWidth();, +    if (row == null || row.length < width) {, +      row = new byte[width];, +    }, +    int offset = (y + top) * dataWidth + left;, +    byte[] yuv = yuvData;, +    for (int x = 0; x < width; x++) {, +      row[x] = yuv[offset + x];, +    }, +    return row;, +  }, +, +  public byte[] getMatrix() {]