[+++ b/core/src/com/google/zxing/qrcode/decoder/BitMatrixParser.java, +    int formatInfoBits1 = 0;, +      formatInfoBits1 = copyBit(i, 8, formatInfoBits1);, +    formatInfoBits1 = copyBit(7, 8, formatInfoBits1);, +    formatInfoBits1 = copyBit(8, 8, formatInfoBits1);, +    formatInfoBits1 = copyBit(8, 7, formatInfoBits1);, +      formatInfoBits1 = copyBit(8, j, formatInfoBits1);, +    // Read the top-right/bottom-left pattern too, +    int formatInfoBits2 = 0;, +      formatInfoBits2 = copyBit(i, 8, formatInfoBits2);, +      formatInfoBits2 = copyBit(8, j, formatInfoBits2);, +    parsedFormatInfo = FormatInformation.decodeFormatInformation(formatInfoBits1, formatInfoBits2);, +++ b/core/src/com/google/zxing/qrcode/decoder/BitMatrixParser.java, +    int formatInfoBits1 = 0;, +      formatInfoBits1 = copyBit(i, 8, formatInfoBits1);, +    formatInfoBits1 = copyBit(7, 8, formatInfoBits1);, +    formatInfoBits1 = copyBit(8, 8, formatInfoBits1);, +    formatInfoBits1 = copyBit(8, 7, formatInfoBits1);, +      formatInfoBits1 = copyBit(8, j, formatInfoBits1);, +    // Read the top-right/bottom-left pattern too, +    int formatInfoBits2 = 0;, +      formatInfoBits2 = copyBit(i, 8, formatInfoBits2);, +      formatInfoBits2 = copyBit(8, j, formatInfoBits2);, +    parsedFormatInfo = FormatInformation.decodeFormatInformation(formatInfoBits1, formatInfoBits2);, +++ b/core/src/com/google/zxing/qrcode/decoder/FormatInformation.java, +   * @param maskedFormatInfo1 format info indicator, with mask still applied, +   * @param maskedFormatInfo2 second copy of same info; both are checked at the same time, +   *  to establish best match, +  static FormatInformation decodeFormatInformation(int maskedFormatInfo1, int maskedFormatInfo2) {, +    FormatInformation formatInfo = doDecodeFormatInformation(maskedFormatInfo1, maskedFormatInfo2);, +    return doDecodeFormatInformation(maskedFormatInfo1 ^ FORMAT_INFO_MASK_QR,, +                                     maskedFormatInfo2 ^ FORMAT_INFO_MASK_QR);, +  private static FormatInformation doDecodeFormatInformation(int maskedFormatInfo1, int maskedFormatInfo2) {, +      if (targetInfo == maskedFormatInfo1 || targetInfo == maskedFormatInfo2) {, +      int bitsDifference = numBitsDiffering(maskedFormatInfo1, targetInfo);, +      if (maskedFormatInfo1 != maskedFormatInfo2) {, +        // also try the other option, +        bitsDifference = numBitsDiffering(maskedFormatInfo2, targetInfo);, +        if (bitsDifference < bestDifference) {, +          bestFormatInfo = decodeInfo[1];, +          bestDifference = bitsDifference;, +        }, +      }, +++ b/core/src/com/google/zxing/qrcode/decoder/BitMatrixParser.java, +    int formatInfoBits1 = 0;, +      formatInfoBits1 = copyBit(i, 8, formatInfoBits1);, +    formatInfoBits1 = copyBit(7, 8, formatInfoBits1);, +    formatInfoBits1 = copyBit(8, 8, formatInfoBits1);, +    formatInfoBits1 = copyBit(8, 7, formatInfoBits1);, +      formatInfoBits1 = copyBit(8, j, formatInfoBits1);, +    // Read the top-right/bottom-left pattern too, +    int formatInfoBits2 = 0;, +      formatInfoBits2 = copyBit(i, 8, formatInfoBits2);, +      formatInfoBits2 = copyBit(8, j, formatInfoBits2);, +    parsedFormatInfo = FormatInformation.decodeFormatInformation(formatInfoBits1, formatInfoBits2);, +++ b/core/src/com/google/zxing/qrcode/decoder/FormatInformation.java, +   * @param maskedFormatInfo1 format info indicator, with mask still applied, +   * @param maskedFormatInfo2 second copy of same info; both are checked at the same time, +   *  to establish best match, +  static FormatInformation decodeFormatInformation(int maskedFormatInfo1, int maskedFormatInfo2) {, +    FormatInformation formatInfo = doDecodeFormatInformation(maskedFormatInfo1, maskedFormatInfo2);, +    return doDecodeFormatInformation(maskedFormatInfo1 ^ FORMAT_INFO_MASK_QR,, +                                     maskedFormatInfo2 ^ FORMAT_INFO_MASK_QR);, +  private static FormatInformation doDecodeFormatInformation(int maskedFormatInfo1, int maskedFormatInfo2) {, +      if (targetInfo == maskedFormatInfo1 || targetInfo == maskedFormatInfo2) {, +      int bitsDifference = numBitsDiffering(maskedFormatInfo1, targetInfo);, +      if (maskedFormatInfo1 != maskedFormatInfo2) {, +        // also try the other option, +        bitsDifference = numBitsDiffering(maskedFormatInfo2, targetInfo);, +        if (bitsDifference < bestDifference) {, +          bestFormatInfo = decodeInfo[1];, +          bestDifference = bitsDifference;, +        }, +      }, +++ b/core/test/src/com/google/zxing/qrcode/decoder/FormatInformationTestCase.java, +    FormatInformation expected =, +        FormatInformation.decodeFormatInformation(MASKED_TEST_FORMAT_INFO, MASKED_TEST_FORMAT_INFO);, +    assertSame(ErrorCorrectionLevel.Q, expected.getErrorCorrectionLevel());, +    assertEquals(expected,, +                 FormatInformation.decodeFormatInformation(UNMASKED_TEST_FORMAT_INFO, MASKED_TEST_FORMAT_INFO));, +  }, +  public void testDecodeWithBitDifference() {, +    FormatInformation expected =, +        FormatInformation.decodeFormatInformation(MASKED_TEST_FORMAT_INFO, MASKED_TEST_FORMAT_INFO);, +    assertEquals(expected, FormatInformation.decodeFormatInformation(, +        MASKED_TEST_FORMAT_INFO ^ 0x01, MASKED_TEST_FORMAT_INFO ^ 0x01));, +    assertEquals(expected, FormatInformation.decodeFormatInformation(, +        MASKED_TEST_FORMAT_INFO ^ 0x03, MASKED_TEST_FORMAT_INFO ^ 0x03));, +    assertEquals(expected, FormatInformation.decodeFormatInformation(, +        MASKED_TEST_FORMAT_INFO ^ 0x07, MASKED_TEST_FORMAT_INFO ^ 0x07));, +    assertNull(FormatInformation.decodeFormatInformation(, +        MASKED_TEST_FORMAT_INFO ^ 0x0F, MASKED_TEST_FORMAT_INFO ^ 0x0F));, +  }, +, +  public void testDecodeWithMisread() {, +    FormatInformation expected =, +        FormatInformation.decodeFormatInformation(MASKED_TEST_FORMAT_INFO, MASKED_TEST_FORMAT_INFO);, +    assertEquals(expected, FormatInformation.decodeFormatInformation(, +        MASKED_TEST_FORMAT_INFO ^ 0x03, MASKED_TEST_FORMAT_INFO ^ 0x0F));, +++ b/core/src/com/google/zxing/qrcode/decoder/BitMatrixParser.java]