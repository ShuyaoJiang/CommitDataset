[+++ b/javase/src/com/google/zxing/HtmlAssetTranslator.java, +import java.util.List;, + * <p>Pass the Android client assets/ directory as first argument, and the language to translate to second, + * as a comma-separated list. Specify "all" for language to try to translate for all existing translations., + * Each argument after this is the name of a file to translate; if the first one is "all", all files will, + * be translated.</p>, + * <p>Usage: {@code HtmlAssetTranslator android/assets/ (all|lang1[,lang2 ...]) (all|file1.html[ file2.html ...])}</p>, + *, + * <p>{@code android/assets/ es all} will translate .html files in subdirectory html-en to , + * directory html-es, for example. Note that only text nodes in the HTML document are translated. , + * Any text that is a child of a node with {@code class="notranslate"} will not be translated. It will , + * also add a note at the end of the translated page that indicates it was automatically translated.</p>, +    if (args.length < 3) {, +      System.err.println("Usage: HtmlAssetTranslator android/assets/ " +, +                         "(all|lang1[,lang2 ...]) (all|file1.html[ file2.html ...])");, +      return;, +    }, +    List<String> restOfArgs = Arrays.asList(args).subList(2, args.length);, +    Collection<String> fileNamesToTranslate = parseFileNamesToTranslate(assetsDir, restOfArgs);, +      translateOneLanguage(assetsDir, language, fileNamesToTranslate);, +  private static Collection<String> parseLanguagesToTranslate(File assetsDir, CharSequence languageArg) {, +  private static Collection<String> parseFileNamesToTranslate(File assetsDir, List<String> restOfArgs) {, +    if ("all".equals(restOfArgs.get(0))) {, +      File htmlEnAssetDir = new File(assetsDir, "html-en");, +      FileFilter fileFilter = new FileFilter() {, +        @Override, +        public boolean accept(File file) {, +          return file.isFile() && file.getName().endsWith(".html");, +        }, +      };, +      for (File file : htmlEnAssetDir.listFiles(fileFilter)) {, +        fileNamesToTranslate.add(file.getName());, +      }, +    } else {, +      for (String fileName : restOfArgs) {, +        fileNamesToTranslate.add(fileName);, +      }, +        if (!text.trim().isEmpty()) {, +++ b/javase/src/com/google/zxing/HtmlAssetTranslator.java, +import java.util.List;, + * <p>Pass the Android client assets/ directory as first argument, and the language to translate to second, + * as a comma-separated list. Specify "all" for language to try to translate for all existing translations., + * Each argument after this is the name of a file to translate; if the first one is "all", all files will, + * be translated.</p>, + * <p>Usage: {@code HtmlAssetTranslator android/assets/ (all|lang1[,lang2 ...]) (all|file1.html[ file2.html ...])}</p>, + *, + * <p>{@code android/assets/ es all} will translate .html files in subdirectory html-en to , + * directory html-es, for example. Note that only text nodes in the HTML document are translated. , + * Any text that is a child of a node with {@code class="notranslate"} will not be translated. It will , + * also add a note at the end of the translated page that indicates it was automatically translated.</p>, +    if (args.length < 3) {, +      System.err.println("Usage: HtmlAssetTranslator android/assets/ " +, +                         "(all|lang1[,lang2 ...]) (all|file1.html[ file2.html ...])");, +      return;, +    }, +    List<String> restOfArgs = Arrays.asList(args).subList(2, args.length);, +    Collection<String> fileNamesToTranslate = parseFileNamesToTranslate(assetsDir, restOfArgs);, +      translateOneLanguage(assetsDir, language, fileNamesToTranslate);, +  private static Collection<String> parseLanguagesToTranslate(File assetsDir, CharSequence languageArg) {, +  private static Collection<String> parseFileNamesToTranslate(File assetsDir, List<String> restOfArgs) {, +    if ("all".equals(restOfArgs.get(0))) {, +      File htmlEnAssetDir = new File(assetsDir, "html-en");, +      FileFilter fileFilter = new FileFilter() {, +        @Override, +        public boolean accept(File file) {, +          return file.isFile() && file.getName().endsWith(".html");, +        }, +      };, +      for (File file : htmlEnAssetDir.listFiles(fileFilter)) {, +        fileNamesToTranslate.add(file.getName());, +      }, +    } else {, +      for (String fileName : restOfArgs) {, +        fileNamesToTranslate.add(fileName);, +      }, +        if (!text.trim().isEmpty()) {, +++ b/javase/src/com/google/zxing/StringsResourceTranslator.java, +import java.io.BufferedWriter;, +      " Copyright (C) 2013 ZXing authors\n" +, +    resultTempFile.deleteOnExit();, +      out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(resultTempFile), UTF8));, +    } else {, +      resultTempFile.delete();, +      in = new BufferedReader(new InputStreamReader(connection.getInputStream(), UTF8));, +    SortedMap<String,String> entries = new TreeMap<String,String>();    , +    if (!file.exists()) {, +      return entries;, +    }]