[+++ b/core/src/main/java/com/google/zxing/EncodeHintType.java, +    * Specifies the exact version of QR code to be encoded., +    * (Type {@link Integer}, or {@link String} representation of the integer value)., +   QR_VERSION,, +++ b/core/src/main/java/com/google/zxing/EncodeHintType.java, +    * Specifies the exact version of QR code to be encoded., +    * (Type {@link Integer}, or {@link String} representation of the integer value)., +   QR_VERSION,, +++ b/core/src/main/java/com/google/zxing/qrcode/encoder/Encoder.java, +    Version version;, +      int versionNumber = Integer.parseInt(hints.get(EncodeHintType.QR_VERSION).toString());, +      version = Version.getVersionForNumber(versionNumber);, +      int bitsNeeded = calculateBitsNeeded(mode, headerBits, dataBits, version);, +      if (!willFit(bitsNeeded, version, ecLevel)) {, +   *, +    return chooseVersion(bitsNeeded, ecLevel);, +    return headerBits.getSize() + mode.getCharacterCountBits(version) + dataBits.getSize();, +++ b/core/src/main/java/com/google/zxing/EncodeHintType.java, +    * Specifies the exact version of QR code to be encoded., +    * (Type {@link Integer}, or {@link String} representation of the integer value)., +   QR_VERSION,, +++ b/core/src/main/java/com/google/zxing/qrcode/encoder/Encoder.java, +    Version version;, +      int versionNumber = Integer.parseInt(hints.get(EncodeHintType.QR_VERSION).toString());, +      version = Version.getVersionForNumber(versionNumber);, +      int bitsNeeded = calculateBitsNeeded(mode, headerBits, dataBits, version);, +      if (!willFit(bitsNeeded, version, ecLevel)) {, +   *, +    return chooseVersion(bitsNeeded, ecLevel);, +    return headerBits.getSize() + mode.getCharacterCountBits(version) + dataBits.getSize();, +++ b/core/src/test/java/com/google/zxing/qrcode/encoder/EncoderTestCase.java, +    Map<EncodeHintType, Object> hints = new EnumMap<>(EncodeHintType.class);, +  @Test(expected = WriterException.class), +    Map<EncodeHintType, Object> hints = new EnumMap<>(EncodeHintType.class);]