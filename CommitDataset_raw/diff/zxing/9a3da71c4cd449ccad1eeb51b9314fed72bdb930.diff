[+++ b/core/src/com/google/zxing/BarcodeFormat.java, +  , +  /** CODABAR 1D format. */, +  public static final BarcodeFormat CODABAR = new BarcodeFormat("CODABAR");, +++ b/core/src/com/google/zxing/BarcodeFormat.java, +  , +  /** CODABAR 1D format. */, +  public static final BarcodeFormat CODABAR = new BarcodeFormat("CODABAR");, +++ b/core/src/com/google/zxing/MultiFormatReader.java, +			  formats.contains(BarcodeFormat.CODABAR) ||, +++ b/core/src/com/google/zxing/BarcodeFormat.java, +  , +  /** CODABAR 1D format. */, +  public static final BarcodeFormat CODABAR = new BarcodeFormat("CODABAR");, +++ b/core/src/com/google/zxing/MultiFormatReader.java, +			  formats.contains(BarcodeFormat.CODABAR) ||, +++ b/core/src/com/google/zxing/oned/CodaBarReader.java, +/*, + * Copyright 2008 ZXing authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.zxing.oned;, +, +import com.google.zxing.BarcodeFormat;, +import com.google.zxing.FormatException;, +import com.google.zxing.NotFoundException;, +import com.google.zxing.Result;, +import com.google.zxing.ResultPoint;, +import com.google.zxing.common.BitArray;, +import java.util.Hashtable;, +, +/**, + * <p>Decodes Codabar barcodes. </p>, + *, + * @author Bas Vijfwinkel, + */, +public final class CodaBarReader extends OneDReader {, +, +	private static  final String ALPHABET_STRING = "0123456789-$:/.+ABCDTN";, +	private static final char[] ALPHABET = ALPHABET_STRING.toCharArray();, +, +	/**, +    * These represent the encodings of characters, as patterns of wide and narrow bars., +    * The 7 least-significant bits of each int correspond to the pattern of wide and narrow,, +    * with 1s representing "wide" and 0s representing narrow., +	* NOTE : c is equal to the  * pattern , +	* NOTE : d is equal to the e pattern, +    */, +, +	private static final int[] CHARACTER_ENCODINGS = {, +        0x003, 0x006, 0x009, 0x060, 0x012, 0x042, 0x021, 0x024, 0x030, 0x048, // 0-9, +        0x00c, 0x018, 0x025, 0x051, 0x054, 0x015, 0x01A, 0x029, 0x00B, 0x00E, // -$:/.+ABCD, +        0x01A,0x029 //TN              , +        };, +	, +	// multiple start/end patterns, +	// official start and end patterns, +    //private static  final char[] STARTEND_ENCODING = {'$','A','B','C','D','T','N','+'}; , +	// some codabar generator allow the codabar string to be closed by every character, +	private static  final char[] STARTEND_ENCODING = {'0','1','2','3','4','5','6','7','8','9','-','$',':','/','.','+','A','B','C','D','T','N'}; , +, +	public CodaBarReader() , +	{, +	}, +, +, +    public Result decodeRow(int rowNumber, BitArray row, Hashtable hints) throws FormatException, NotFoundException, +	{, +		int[] start;, +		start = findAsteriskPattern(row);, +		start[1] = 0; // BAS: settings this to 0 improves the recognition rate somehow?, +	    int nextStart = start[1];, +		int end = row.getSize();, +		, +		// Read off white space, +		while (nextStart < end && !row.get(nextStart)) , +		{, +			nextStart++;, +		}, +, +	    StringBuffer result = new StringBuffer();, +		//int[] counters = new int[7];, +		int[] counters;, +		char decodedChar;, +		int lastStart;, +		, +	    do , +		{]