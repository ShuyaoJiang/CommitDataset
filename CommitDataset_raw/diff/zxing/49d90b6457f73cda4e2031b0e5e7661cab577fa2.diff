[+++ b/android/src/com/google/zxing/client/android/wifi/NetworkType.java, +  NO_PASSWORD,, +  WPA2_EAP;, +      case "WPA2-EAP":, +        return WPA2_EAP;, +++ b/android/src/com/google/zxing/client/android/wifi/NetworkType.java, +  NO_PASSWORD,, +  WPA2_EAP;, +      case "WPA2-EAP":, +        return WPA2_EAP;, +++ b/android/src/com/google/zxing/client/android/wifi/WifiConfigManager.java, +import android.net.wifi.WifiEnterpriseConfig;, + * @author Steffen Kieß, +          case WPA2_EAP:, +            changeNetworkWPA2EAP(wifiManager, theWifiResult);, +            break;, +  // Adding a WPA2 enterprise (EAP) network, +  private static void changeNetworkWPA2EAP(WifiManager wifiManager, WifiParsedResult wifiResult) {, +    WifiConfiguration config = changeNetworkCommon(wifiResult);, +    // Hex passwords that are 64 bits long are not to be quoted., +    config.preSharedKey = quoteNonHex(wifiResult.getPassword(), 64);, +    config.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN);, +    config.allowedProtocols.set(WifiConfiguration.Protocol.RSN); // For WPA2, +    config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_EAP);, +    config.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);, +    config.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);, +    config.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);, +    config.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);, +    config.enterpriseConfig.setIdentity(wifiResult.getIdentity());, +    config.enterpriseConfig.setAnonymousIdentity(wifiResult.getAnonymousIdentity());, +    config.enterpriseConfig.setPassword(wifiResult.getPassword());, +    config.enterpriseConfig.setEapMethod(parseEap(wifiResult.getEapMethod()));, +    config.enterpriseConfig.setPhase2Method(parsePhase2(wifiResult.getPhase2Method()));, +    updateNetwork(wifiManager, config);, +  }, +, +  private static int parseEap(String eapString) {, +    if (eapString == null) {, +      return WifiEnterpriseConfig.Eap.NONE;, +    }, +    switch (eapString) {, +    case "NONE":, +      return WifiEnterpriseConfig.Eap.NONE;, +    case "PEAP":, +      return WifiEnterpriseConfig.Eap.PEAP;, +    case "PWD":, +      return WifiEnterpriseConfig.Eap.PWD;, +    case "TLS":, +      return WifiEnterpriseConfig.Eap.TLS;, +    case "TTLS":, +      return WifiEnterpriseConfig.Eap.TTLS;, +    default:, +      throw new IllegalArgumentException("Unknown value for EAP method: " + eapString);, +    }, +  }, +, +  private static int parsePhase2(String phase2String) {, +    if (phase2String == null) {, +      return WifiEnterpriseConfig.Phase2.NONE;, +    }, +    switch (phase2String) {, +    case "GTC":, +      return WifiEnterpriseConfig.Phase2.GTC;, +    case "MSCHAP":, +      return WifiEnterpriseConfig.Phase2.MSCHAP;, +    case "MSCHAPV2":, +      return WifiEnterpriseConfig.Phase2.MSCHAPV2;, +    case "NONE":, +      return WifiEnterpriseConfig.Phase2.NONE;, +    case "PAP":, +      return WifiEnterpriseConfig.Phase2.PAP;, +    default:, +      throw new IllegalArgumentException("Unknown value for phase 2 method: " + phase2String);, +    }, +  }, +, +++ b/android/src/com/google/zxing/client/android/wifi/NetworkType.java, +  NO_PASSWORD,, +  WPA2_EAP;, +      case "WPA2-EAP":, +        return WPA2_EAP;, +++ b/android/src/com/google/zxing/client/android/wifi/WifiConfigManager.java, +import android.net.wifi.WifiEnterpriseConfig;, + * @author Steffen Kieß, +          case WPA2_EAP:, +            changeNetworkWPA2EAP(wifiManager, theWifiResult);, +            break;, +  // Adding a WPA2 enterprise (EAP) network, +  private static void changeNetworkWPA2EAP(WifiManager wifiManager, WifiParsedResult wifiResult) {, +    WifiConfiguration config = changeNetworkCommon(wifiResult);, +    // Hex passwords that are 64 bits long are not to be quoted., +    config.preSharedKey = quoteNonHex(wifiResult.getPassword(), 64);, +    config.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN);, +    config.allowedProtocols.set(WifiConfiguration.Protocol.RSN); // For WPA2, +    config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_EAP);, +    config.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);, +    config.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);, +    config.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);, +    config.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);, +    config.enterpriseConfig.setIdentity(wifiResult.getIdentity());]