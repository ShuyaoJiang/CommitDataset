[+++ b/core/src/main/java/com/google/zxing/oned/ITFReader.java, +  private static final float MAX_INDIVIDUAL_VARIANCE = 0.5f;, +  private static final int W = 3; // Pixel width of a 3x wide line, +  private static final int w = 2; // Pixel width of a 2x wide line, +  private static final int[][] END_PATTERN_REVERSED = {, +      {N, N, w}, // 2x, +      {N, N, W}  // 3x, +  };, +, +  // See ITFWriter.PATTERNS, +  private static final int[][] PATTERNS = {, +      {N, N, w, w, N}, // 0, +      {w, N, N, N, w}, // 1, +      {N, w, N, N, w}, // 2, +      {w, w, N, N, N}, // 3, +      {N, N, w, N, w}, // 4, +      {w, N, w, N, N}, // 5, +      {N, w, w, N, N}, // 6, +      {N, N, N, w, w}, // 7, +      {w, N, N, w, N}, // 8, +      {N, w, N, w, N}, // 9, +      int[] endPattern;, +      try {, +        endPattern = findGuardPattern(row, endStart, END_PATTERN_REVERSED[0]);, +      } catch (NotFoundException nfe) {, +        endPattern = findGuardPattern(row, endStart, END_PATTERN_REVERSED[1]);, +      }, +      } else if (variance == bestVariance) {, +        // if we find a second 'best match' with the same variance, we can not reliably report to have a suitable match, +        bestMatch = -1;, +      return bestMatch % 10;, +++ b/core/src/main/java/com/google/zxing/oned/ITFReader.java, +  private static final float MAX_INDIVIDUAL_VARIANCE = 0.5f;, +  private static final int W = 3; // Pixel width of a 3x wide line, +  private static final int w = 2; // Pixel width of a 2x wide line, +  private static final int[][] END_PATTERN_REVERSED = {, +      {N, N, w}, // 2x, +      {N, N, W}  // 3x, +  };, +, +  // See ITFWriter.PATTERNS, +  private static final int[][] PATTERNS = {, +      {N, N, w, w, N}, // 0, +      {w, N, N, N, w}, // 1, +      {N, w, N, N, w}, // 2, +      {w, w, N, N, N}, // 3, +      {N, N, w, N, w}, // 4, +      {w, N, w, N, N}, // 5, +      {N, w, w, N, N}, // 6, +      {N, N, N, w, w}, // 7, +      {w, N, N, w, N}, // 8, +      {N, w, N, w, N}, // 9, +      int[] endPattern;, +      try {, +        endPattern = findGuardPattern(row, endStart, END_PATTERN_REVERSED[0]);, +      } catch (NotFoundException nfe) {, +        endPattern = findGuardPattern(row, endStart, END_PATTERN_REVERSED[1]);, +      }, +      } else if (variance == bestVariance) {, +        // if we find a second 'best match' with the same variance, we can not reliably report to have a suitable match, +        bestMatch = -1;, +      return bestMatch % 10;, +++ b/core/src/main/java/com/google/zxing/oned/ITFWriter.java, +  private static final int W = 3; // Pixel width of a 3x wide line, +  private static final int N = 1; // Pixed width of a narrow line, +, +  // See ITFReader.PATTERNS, +, +  private static final int[][] PATTERNS = {, +      {N, N, W, W, N}, // 0, +      {W, N, N, N, W}, // 1, +      {N, W, N, N, W}, // 2, +      {W, W, N, N, N}, // 3, +      {N, N, W, N, W}, // 4, +      {W, N, W, N, N}, // 5, +      {N, W, W, N, N}, // 6, +      {N, N, N, W, W}, // 7, +      {W, N, N, W, N}, // 8, +      {N, W, N, W, N}  // 9, +  };, +, +        encoding[2 * j] = PATTERNS[one][j];, +        encoding[2 * j + 1] = PATTERNS[two][j];, +++ b/core/src/main/java/com/google/zxing/oned/ITFReader.java, +  private static final float MAX_INDIVIDUAL_VARIANCE = 0.5f;, +  private static final int W = 3; // Pixel width of a 3x wide line, +  private static final int w = 2; // Pixel width of a 2x wide line, +  private static final int[][] END_PATTERN_REVERSED = {, +      {N, N, w}, // 2x, +      {N, N, W}  // 3x, +  };, +, +  // See ITFWriter.PATTERNS, +  private static final int[][] PATTERNS = {, +      {N, N, w, w, N}, // 0, +      {w, N, N, N, w}, // 1, +      {N, w, N, N, w}, // 2, +      {w, w, N, N, N}, // 3, +      {N, N, w, N, w}, // 4, +      {w, N, w, N, N}, // 5]