[+++ b/core/src/main/java/com/google/zxing/aztec/encoder/State.java, +    int newModeBitCount = this.bitCount + (HighLevelEncoder.LATCH_TABLE[this.mode][other.mode] >> 16);, +    if (this.binaryShiftByteCount < other.binaryShiftByteCount) {, +      // add additional B/S encoding cost of other, if any, +      newModeBitCount += calculateBinaryShiftCost(other) - calculateBinaryShiftCost(this);, +    } else if (this.binaryShiftByteCount > other.binaryShiftByteCount && other.binaryShiftByteCount > 0) {, +      // maximum possible additional cost (we end up exceeding the 31 byte boundary and other state can stay beneath it), +      newModeBitCount += 10; , +    return newModeBitCount <= other.bitCount;, +  private static int calculateBinaryShiftCost(State state) {, +    if (state.binaryShiftByteCount > 62) {, +      return 21; // B/S with extended length, +    }, +    if (state.binaryShiftByteCount > 31) {, +      return 20; // two B/S, +    }, +    if (state.binaryShiftByteCount > 0) {, +      return 10; // one B/S, +    }, +    return 0;, +  }, +, +++ b/core/src/main/java/com/google/zxing/aztec/encoder/State.java, +    int newModeBitCount = this.bitCount + (HighLevelEncoder.LATCH_TABLE[this.mode][other.mode] >> 16);, +    if (this.binaryShiftByteCount < other.binaryShiftByteCount) {, +      // add additional B/S encoding cost of other, if any, +      newModeBitCount += calculateBinaryShiftCost(other) - calculateBinaryShiftCost(this);, +    } else if (this.binaryShiftByteCount > other.binaryShiftByteCount && other.binaryShiftByteCount > 0) {, +      // maximum possible additional cost (we end up exceeding the 31 byte boundary and other state can stay beneath it), +      newModeBitCount += 10; , +    return newModeBitCount <= other.bitCount;, +  private static int calculateBinaryShiftCost(State state) {, +    if (state.binaryShiftByteCount > 62) {, +      return 21; // B/S with extended length, +    }, +    if (state.binaryShiftByteCount > 31) {, +      return 20; // two B/S, +    }, +    if (state.binaryShiftByteCount > 0) {, +      return 10; // one B/S, +    }, +    return 0;, +  }, +, +++ b/core/src/test/java/com/google/zxing/aztec/encoder/EncoderTest.java, +, +    sb = new StringBuilder();, +    for (int i = 0; i < 32; i++) {, +      sb.append('§'); // § forces binary encoding, +    }, +    sb.setCharAt(1, 'A');, +    // expect B/S(1) A B/S(30), +    testHighLevelEncodeString(sb.toString(), 5 + 20 + 31 * 8);, +, +    sb = new StringBuilder();, +    for (int i = 0; i < 31; i++) {, +      sb.append('§');, +    }, +    sb.setCharAt(1, 'A');, +    // expect B/S(31), +    testHighLevelEncodeString(sb.toString(), 10 + 31 * 8);, +, +    sb = new StringBuilder();, +    for (int i = 0; i < 34; i++) {, +      sb.append('§');, +    }, +    sb.setCharAt(1, 'A');, +    // expect B/S(31) B/S(3), +    testHighLevelEncodeString(sb.toString(), 20 + 34 * 8);, +, +    sb = new StringBuilder();, +    for (int i = 0; i < 64; i++) {, +      sb.append('§');, +    }, +    sb.setCharAt(30, 'A');, +    // expect B/S(64), +    testHighLevelEncodeString(sb.toString(), 21 + 64 * 8);]