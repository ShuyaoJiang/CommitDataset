[+++ b/core/src/com/google/zxing/client/result/URIResultParser.java, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +, +  private static final String PATTERN_END = , +      "(:\\d{1,5})?" + // maybe port, +      "(/|\\?|$)"; // query, path or nothing, +  private static final Pattern URL_WITH_PROTOCOL_PATTERN = Pattern.compile(, +      "[a-zA-Z0-9]{2,}://" + // protocol, +      "[a-zA-Z0-9\\-]{2,}(\\.[a-zA-Z0-9\\-]{2,})*" + // host name elements, +      PATTERN_END);, +  private static final Pattern URL_WITHOUT_PROTOCOL_PATTERN = Pattern.compile(, +      "[a-zA-Z0-9\\-]{2,}(\\.[a-zA-Z0-9\\-]{2,})+" + // host name elements, +      PATTERN_END);, +, +    return isBasicallyValidURI(rawText) ? new URIParsedResult(rawText, null) : null;, +    Matcher m = URL_WITH_PROTOCOL_PATTERN.matcher(uri);, +    if (m.find() && m.start() == 0) { // match at start only, +    m = URL_WITHOUT_PROTOCOL_PATTERN.matcher(uri);, +    return m.find() && m.start() == 0;, +  }, +++ b/core/src/com/google/zxing/client/result/URIResultParser.java, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +, +  private static final String PATTERN_END = , +      "(:\\d{1,5})?" + // maybe port, +      "(/|\\?|$)"; // query, path or nothing, +  private static final Pattern URL_WITH_PROTOCOL_PATTERN = Pattern.compile(, +      "[a-zA-Z0-9]{2,}://" + // protocol, +      "[a-zA-Z0-9\\-]{2,}(\\.[a-zA-Z0-9\\-]{2,})*" + // host name elements, +      PATTERN_END);, +  private static final Pattern URL_WITHOUT_PROTOCOL_PATTERN = Pattern.compile(, +      "[a-zA-Z0-9\\-]{2,}(\\.[a-zA-Z0-9\\-]{2,})+" + // host name elements, +      PATTERN_END);, +, +    return isBasicallyValidURI(rawText) ? new URIParsedResult(rawText, null) : null;, +    Matcher m = URL_WITH_PROTOCOL_PATTERN.matcher(uri);, +    if (m.find() && m.start() == 0) { // match at start only, +    m = URL_WITHOUT_PROTOCOL_PATTERN.matcher(uri);, +    return m.find() && m.start() == 0;, +  }, +++ b/core/test/src/com/google/zxing/client/result/ParsedReaderResultTestCase.java, +        "BEGIN:VEVENTSUMMARY:EventDTSTART:20081030T122030ZDTEND:20081030T132030ZEND:VEVENT",, +        ParsedResultType.TEXT);, +    doTestResult("BEGIN:VEVENT", "BEGIN:VEVENT", ParsedResultType.TEXT);, +++ b/core/src/com/google/zxing/client/result/URIResultParser.java, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +, +  private static final String PATTERN_END = , +      "(:\\d{1,5})?" + // maybe port, +      "(/|\\?|$)"; // query, path or nothing, +  private static final Pattern URL_WITH_PROTOCOL_PATTERN = Pattern.compile(, +      "[a-zA-Z0-9]{2,}://" + // protocol, +      "[a-zA-Z0-9\\-]{2,}(\\.[a-zA-Z0-9\\-]{2,})*" + // host name elements, +      PATTERN_END);, +  private static final Pattern URL_WITHOUT_PROTOCOL_PATTERN = Pattern.compile(, +      "[a-zA-Z0-9\\-]{2,}(\\.[a-zA-Z0-9\\-]{2,})+" + // host name elements, +      PATTERN_END);, +, +    return isBasicallyValidURI(rawText) ? new URIParsedResult(rawText, null) : null;, +    Matcher m = URL_WITH_PROTOCOL_PATTERN.matcher(uri);, +    if (m.find() && m.start() == 0) { // match at start only, +    m = URL_WITHOUT_PROTOCOL_PATTERN.matcher(uri);, +    return m.find() && m.start() == 0;, +  }, +++ b/core/test/src/com/google/zxing/client/result/ParsedReaderResultTestCase.java, +        "BEGIN:VEVENTSUMMARY:EventDTSTART:20081030T122030ZDTEND:20081030T132030ZEND:VEVENT",, +        ParsedResultType.TEXT);, +    doTestResult("BEGIN:VEVENT", "BEGIN:VEVENT", ParsedResultType.TEXT);, +++ b/core/test/src/com/google/zxing/client/result/URIParsedResultTestCase.java, +    doTestNotUri("ABC,20.3,AB,AD");]