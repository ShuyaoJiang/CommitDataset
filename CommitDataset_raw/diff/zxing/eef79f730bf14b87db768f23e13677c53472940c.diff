[+++ b/core/src/com/google/zxing/qrcode/decoder/FormatInformation.java, +   * @param maskedFormatInfo format info indicator, with mask still applied, +   * @return information about the format it specifies, or <code>null</code>, +   *  if doesn't seem to match any known pattern, +  static FormatInformation decodeFormatInformation(int maskedFormatInfo) {, +    FormatInformation formatInfo = doDecodeFormatInformation(maskedFormatInfo);, +    // do not mask this info. Try again by actually masking the pattern, +    // first, +    return doDecodeFormatInformation(maskedFormatInfo ^ FORMAT_INFO_MASK_QR);, +  private static FormatInformation doDecodeFormatInformation(int maskedFormatInfo) {, +      if (targetInfo == maskedFormatInfo) {, +      int bitsDifference = numBitsDiffering(maskedFormatInfo, targetInfo);, +    // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits, +    // differing means we found a match, +++ b/core/src/com/google/zxing/qrcode/decoder/FormatInformation.java, +   * @param maskedFormatInfo format info indicator, with mask still applied, +   * @return information about the format it specifies, or <code>null</code>, +   *  if doesn't seem to match any known pattern, +  static FormatInformation decodeFormatInformation(int maskedFormatInfo) {, +    FormatInformation formatInfo = doDecodeFormatInformation(maskedFormatInfo);, +    // do not mask this info. Try again by actually masking the pattern, +    // first, +    return doDecodeFormatInformation(maskedFormatInfo ^ FORMAT_INFO_MASK_QR);, +  private static FormatInformation doDecodeFormatInformation(int maskedFormatInfo) {, +      if (targetInfo == maskedFormatInfo) {, +      int bitsDifference = numBitsDiffering(maskedFormatInfo, targetInfo);, +    // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits, +    // differing means we found a match, +++ b/core/test/src/com/google/zxing/qrcode/decoder/FormatInformationTestCase.java, +  private static final int MASKED_TEST_FORMAT_INFO = 0x2BED;, +  private static final int UNMASKED_TEST_FORMAT_INFO = MASKED_TEST_FORMAT_INFO ^ 0x5412;, +, +  public void testDecode() {, +    FormatInformation expected = FormatInformation.decodeFormatInformation(MASKED_TEST_FORMAT_INFO);, +    assertEquals(expected, FormatInformation.decodeFormatInformation(UNMASKED_TEST_FORMAT_INFO));, +    assertEquals(expected, FormatInformation.decodeFormatInformation(MASKED_TEST_FORMAT_INFO ^ 0x01));, +    assertEquals(expected, FormatInformation.decodeFormatInformation(MASKED_TEST_FORMAT_INFO ^ 0x03));, +    assertEquals(expected, FormatInformation.decodeFormatInformation(MASKED_TEST_FORMAT_INFO ^ 0x07));, +    assertNull(FormatInformation.decodeFormatInformation(MASKED_TEST_FORMAT_INFO ^ 0x0F));]