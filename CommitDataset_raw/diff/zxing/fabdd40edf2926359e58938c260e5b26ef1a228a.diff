[+++ b/core/src/com/google/zxing/qrcode/encoder/Encoder.java, +  private static final int kAlphanumericTable[] = {, +  private static final class RSBlockInfo {, +, +    int block_info[][];, +, +    public RSBlockInfo(int num_bytes, int[][] block_info) {, +      this.num_bytes = num_bytes;, +      this.block_info = block_info;, +    }, +, +  }, +, +  // The table is from table 12 of JISX0510:2004 (p. 30). The "block_info" parts are ordered by, +  // L, M, Q, H. Within each block_info, the 0th element is num_ec_bytes, and the 1st element is, +  // num_rs_blocks. The table was doublechecked by komatsu., +  private static final RSBlockInfo kRSBlockTable[] = {, +      new RSBlockInfo(  26, new int[][]{ {  7,  1}, {  10,  1}, {  13,  1}, {  17,  1}}),  // Version  1, +      new RSBlockInfo(  44, new int[][]{ { 10,  1}, {  16,  1}, {  22,  1}, {  28,  1}}),  // Version  2, +      new RSBlockInfo(  70, new int[][]{ { 15,  1}, {  26,  1}, {  36,  2}, {  44,  2}}),  // Version  3, +      new RSBlockInfo( 100, new int[][]{ { 20,  1}, {  36,  2}, {  52,  2}, {  64,  4}}),  // Version  4, +      new RSBlockInfo( 134, new int[][]{ { 26,  1}, {  48,  2}, {  72,  4}, {  88,  4}}),  // Version  5, +      new RSBlockInfo( 172, new int[][]{ { 36,  2}, {  64,  4}, {  96,  4}, { 112,  4}}),  // Version  6, +      new RSBlockInfo( 196, new int[][]{ { 40,  2}, {  72,  4}, { 108,  6}, { 130,  5}}),  // Version  7, +      new RSBlockInfo( 242, new int[][]{ { 48,  2}, {  88,  4}, { 132,  6}, { 156,  6}}),  // Version  8, +      new RSBlockInfo( 292, new int[][]{ { 60,  2}, { 110,  5}, { 160,  8}, { 192,  8}}),  // Version  9, +      new RSBlockInfo( 346, new int[][]{ { 72,  4}, { 130,  5}, { 192,  8}, { 224,  8}}),  // Version 10, +      new RSBlockInfo( 404, new int[][]{ { 80,  4}, { 150,  5}, { 224,  8}, { 264, 11}}),  // Version 11, +      new RSBlockInfo( 466, new int[][]{ { 96,  4}, { 176,  8}, { 260, 10}, { 308, 11}}),  // Version 12, +      new RSBlockInfo( 532, new int[][]{ {104,  4}, { 198,  9}, { 288, 12}, { 352, 16}}),  // Version 13, +      new RSBlockInfo( 581, new int[][]{ {120,  4}, { 216,  9}, { 320, 16}, { 384, 16}}),  // Version 14, +      new RSBlockInfo( 655, new int[][]{ {132,  6}, { 240, 10}, { 360, 12}, { 432, 18}}),  // Version 15, +      new RSBlockInfo( 733, new int[][]{ {144,  6}, { 280, 10}, { 408, 17}, { 480, 16}}),  // Version 16, +      new RSBlockInfo( 815, new int[][]{ {168,  6}, { 308, 11}, { 448, 16}, { 532, 19}}),  // Version 17, +      new RSBlockInfo( 901, new int[][]{ {180,  6}, { 338, 13}, { 504, 18}, { 588, 21}}),  // Version 18, +      new RSBlockInfo( 991, new int[][]{ {196,  7}, { 364, 14}, { 546, 21}, { 650, 25}}),  // Version 19, +      new RSBlockInfo(1085, new int[][]{ {224,  8}, { 416, 16}, { 600, 20}, { 700, 25}}),  // Version 20, +      new RSBlockInfo(1156, new int[][]{ {224,  8}, { 442, 17}, { 644, 23}, { 750, 25}}),  // Version 21, +      new RSBlockInfo(1258, new int[][]{ {252,  9}, { 476, 17}, { 690, 23}, { 816, 34}}),  // Version 22, +      new RSBlockInfo(1364, new int[][]{ {270,  9}, { 504, 18}, { 750, 25}, { 900, 30}}),  // Version 23, +      new RSBlockInfo(1474, new int[][]{ {300, 10}, { 560, 20}, { 810, 27}, { 960, 32}}),  // Version 24, +      new RSBlockInfo(1588, new int[][]{ {312, 12}, { 588, 21}, { 870, 29}, {1050, 35}}),  // Version 25, +      new RSBlockInfo(1706, new int[][]{ {336, 12}, { 644, 23}, { 952, 34}, {1110, 37}}),  // Version 26, +      new RSBlockInfo(1828, new int[][]{ {360, 12}, { 700, 25}, {1020, 34}, {1200, 40}}),  // Version 27, +      new RSBlockInfo(1921, new int[][]{ {390, 13}, { 728, 26}, {1050, 35}, {1260, 42}}),  // Version 28, +      new RSBlockInfo(2051, new int[][]{ {420, 14}, { 784, 28}, {1140, 38}, {1350, 45}}),  // Version 29, +      new RSBlockInfo(2185, new int[][]{ {450, 15}, { 812, 29}, {1200, 40}, {1440, 48}}),  // Version 30, +      new RSBlockInfo(2323, new int[][]{ {480, 16}, { 868, 31}, {1290, 43}, {1530, 51}}),  // Version 31, +      new RSBlockInfo(2465, new int[][]{ {510, 17}, { 924, 33}, {1350, 45}, {1620, 54}}),  // Version 32, +      new RSBlockInfo(2611, new int[][]{ {540, 18}, { 980, 35}, {1440, 48}, {1710, 57}}),  // Version 33, +      new RSBlockInfo(2761, new int[][]{ {570, 19}, {1036, 37}, {1530, 51}, {1800, 60}}),  // Version 34, +      new RSBlockInfo(2876, new int[][]{ {570, 19}, {1064, 38}, {1590, 53}, {1890, 63}}),  // Version 35, +      new RSBlockInfo(3034, new int[][]{ {600, 20}, {1120, 40}, {1680, 56}, {1980, 66}}),  // Version 36, +      new RSBlockInfo(3196, new int[][]{ {630, 21}, {1204, 43}, {1770, 59}, {2100, 70}}),  // Version 37, +      new RSBlockInfo(3362, new int[][]{ {660, 22}, {1260, 45}, {1860, 62}, {2220, 74}}),  // Version 38, +      new RSBlockInfo(3532, new int[][]{ {720, 24}, {1316, 47}, {1950, 65}, {2310, 77}}),  // Version 39, +      new RSBlockInfo(3706, new int[][]{ {750, 25}, {1372, 49}, {2040, 68}, {2430, 81}}),  // Version 40, +  private static final int kMaxNumECBytes = 68;  // See the table in Appendix A., +  private static final class ECPolyInfo {, +, +    int coeffs[];, +    public ECPolyInfo(int ec_length, int[] coefficients) {, +      this.ec_length = ec_length;, +      this.coeffs = coefficients;, +    }, +, +  }, +, +// The numbers were generated using the logic found in http://www.d-project.com/qrcode/. We use, +// generated numbers instead of the logic itself (don't want to copy it). The numbers are supposed, +// to be identical to the ones in the table in Appendix A of JISX0510:2004 (p. 30). However, there, +// are some cases the spec seems to be wrong., +private static final ECPolyInfo kECPolynomials[] = {, +    new ECPolyInfo( 7,, +        new int[]{   0,  87, 229, 146, 149, 238, 102,  21 }),, +    // The spec lacks the coefficient for x^5 (a^46 x^5). Tested a QR code of Version 1-M (uses 10, +    // error correction bytes) with a cell phone and it worked., +    new ECPolyInfo( 10,, +        new int[]{   0, 251,  67,  46,  61, 118,  70,  64,  94,  32,  45 }),, +    new ECPolyInfo( 13,, +        new int[]{   0,  74, 152, 176, 100,  86, 100, 106, 104, 130, 218, 206,, +            140,  78 }),, +    new ECPolyInfo( 15,, +        new int[]{   0,   8, 183,  61,  91, 202,  37,  51,  58,  58, 237, 140,, +            124,   5,  99, 105 }),, +    new ECPolyInfo( 16,, +        new int[]{   0, 120, 104, 107, 109, 102, 161,  76,   3,  91, 191, 147,, +            169, 182, 194, 225, 120 }),, +    new ECPolyInfo( 17,, +        new int[]{   0,  43, 139, 206,  78,  43, 239, 123, 206, 214, 147,  24,, +            99, 150,  39, 243, 163, 136 }),, +    new ECPolyInfo( 18,, +        new int[]{   0, 215, 234, 158,  94, 184,  97, 118, 170,  79, 187, 152,, +            148, 252, 179,   5,  98,  96, 153 }),, +    new ECPolyInfo( 20,, +        new int[]{   0,  17,  60,  79,  50,  61, 163,  26, 187, 202, 180, 221,, +            225,  83, 239, 156, 164, 212, 212, 188, 190 }),, +    new ECPolyInfo( 22,, +        new int[]{   0, 210, 171, 247, 242,  93, 230,  14, 109, 221,  53, 200,, +            74,   8, 172,  98,  80, 219, 134, 160, 105, 165, 231 }),]