[+++ b/core/src/com/google/zxing/oned/AbstractOneDReader.java, +  // Note that we don't try rotation without the try harder flag, even if rotation was supported., +          isWhite = !isWhite;, +++ b/core/src/com/google/zxing/oned/AbstractOneDReader.java, +  // Note that we don't try rotation without the try harder flag, even if rotation was supported., +          isWhite = !isWhite;, +++ b/core/src/com/google/zxing/oned/AbstractUPCEANReader.java, +  // These two values are critical for determining how permissive the decoding will be., +  // We've arrived at these values through a lot of trial and error. Setting them any higher, +  // lets false positives creep in quickly., +        isWhite = !isWhite;, +++ b/core/src/com/google/zxing/oned/AbstractOneDReader.java, +  // Note that we don't try rotation without the try harder flag, even if rotation was supported., +          isWhite = !isWhite;, +++ b/core/src/com/google/zxing/oned/AbstractUPCEANReader.java, +  // These two values are critical for determining how permissive the decoding will be., +  // We've arrived at these values through a lot of trial and error. Setting them any higher, +  // lets false positives creep in quickly., +        isWhite = !isWhite;, +++ b/core/src/com/google/zxing/oned/EAN13Reader.java, +  protected int decodeMiddle(BitArray row, int[] startRange, StringBuffer resultString), +      throws ReaderException {, +   * Based on pattern of odd-even ('L' and 'G') patterns used to encoded the explicitly-encoded, +   * digits in a barcode, determines the implicitly encoded first digit and adds it to the, +   * result string., +  private static void determineFirstDigit(StringBuffer resultString, int lgPatternFound), +      throws ReaderException {, +++ b/core/src/com/google/zxing/oned/AbstractOneDReader.java, +  // Note that we don't try rotation without the try harder flag, even if rotation was supported., +          isWhite = !isWhite;, +++ b/core/src/com/google/zxing/oned/AbstractUPCEANReader.java, +  // These two values are critical for determining how permissive the decoding will be., +  // We've arrived at these values through a lot of trial and error. Setting them any higher, +  // lets false positives creep in quickly., +        isWhite = !isWhite;, +++ b/core/src/com/google/zxing/oned/EAN13Reader.java, +  protected int decodeMiddle(BitArray row, int[] startRange, StringBuffer resultString), +      throws ReaderException {, +   * Based on pattern of odd-even ('L' and 'G') patterns used to encoded the explicitly-encoded, +   * digits in a barcode, determines the implicitly encoded first digit and adds it to the, +   * result string., +  private static void determineFirstDigit(StringBuffer resultString, int lgPatternFound), +      throws ReaderException {, +++ b/core/src/com/google/zxing/oned/MultiFormatOneDReader.java, +    Vector possibleFormats = hints == null ? null :, +        (Vector) hints.get(DecodeHintType.POSSIBLE_FORMATS);, +    boolean useCode39CheckDigit = hints != null &&, +        hints.get(DecodeHintType.ASSUME_CODE_39_CHECK_DIGIT) != null;, +++ b/core/src/com/google/zxing/oned/AbstractOneDReader.java, +  // Note that we don't try rotation without the try harder flag, even if rotation was supported., +          isWhite = !isWhite;, +++ b/core/src/com/google/zxing/oned/AbstractUPCEANReader.java, +  // These two values are critical for determining how permissive the decoding will be., +  // We've arrived at these values through a lot of trial and error. Setting them any higher, +  // lets false positives creep in quickly., +        isWhite = !isWhite;, +++ b/core/src/com/google/zxing/oned/EAN13Reader.java, +  protected int decodeMiddle(BitArray row, int[] startRange, StringBuffer resultString), +      throws ReaderException {, +   * Based on pattern of odd-even ('L' and 'G') patterns used to encoded the explicitly-encoded, +   * digits in a barcode, determines the implicitly encoded first digit and adds it to the, +   * result string., +  private static void determineFirstDigit(StringBuffer resultString, int lgPatternFound), +      throws ReaderException {, +++ b/core/src/com/google/zxing/oned/MultiFormatOneDReader.java, +    Vector possibleFormats = hints == null ? null :, +        (Vector) hints.get(DecodeHintType.POSSIBLE_FORMATS);, +    boolean useCode39CheckDigit = hints != null &&, +        hints.get(DecodeHintType.ASSUME_CODE_39_CHECK_DIGIT) != null;, +++ b/core/src/com/google/zxing/oned/MultiFormatUPCEANReader.java, +    Vector possibleFormats = hints == null ? null :, +        (Vector) hints.get(DecodeHintType.POSSIBLE_FORMATS);, +      if (result.getBarcodeFormat().equals(BarcodeFormat.EAN_13) &&, +          result.getText().charAt(0) == '0') {, +        return new Result(result.getText().substring(1), null, result.getResultPoints(),, +            BarcodeFormat.UPC_A);, +++ b/core/src/com/google/zxing/oned/AbstractOneDReader.java, +  // Note that we don't try rotation without the try harder flag, even if rotation was supported., +          isWhite = !isWhite;, +++ b/core/src/com/google/zxing/oned/AbstractUPCEANReader.java, +  // These two values are critical for determining how permissive the decoding will be., +  // We've arrived at these values through a lot of trial and error. Setting them any higher, +  // lets false positives creep in quickly., +        isWhite = !isWhite;, +++ b/core/src/com/google/zxing/oned/EAN13Reader.java, +  protected int decodeMiddle(BitArray row, int[] startRange, StringBuffer resultString), +      throws ReaderException {, +   * Based on pattern of odd-even ('L' and 'G') patterns used to encoded the explicitly-encoded, +   * digits in a barcode, determines the implicitly encoded first digit and adds it to the, +   * result string., +  private static void determineFirstDigit(StringBuffer resultString, int lgPatternFound), +      throws ReaderException {, +++ b/core/src/com/google/zxing/oned/MultiFormatOneDReader.java, +    Vector possibleFormats = hints == null ? null :, +        (Vector) hints.get(DecodeHintType.POSSIBLE_FORMATS);, +    boolean useCode39CheckDigit = hints != null &&, +        hints.get(DecodeHintType.ASSUME_CODE_39_CHECK_DIGIT) != null;, +++ b/core/src/com/google/zxing/oned/MultiFormatUPCEANReader.java, +    Vector possibleFormats = hints == null ? null :, +        (Vector) hints.get(DecodeHintType.POSSIBLE_FORMATS);]