[+++ b/core/src/com/google/zxing/ResultPoint.java, +import com.google.zxing.common.detector.MathUtils;, +, +    return MathUtils.distance(pattern1.x, pattern1.y, pattern2.x, pattern2.y);, +++ b/core/src/com/google/zxing/ResultPoint.java, +import com.google.zxing.common.detector.MathUtils;, +, +    return MathUtils.distance(pattern1.x, pattern1.y, pattern2.x, pattern2.y);, +++ b/core/src/com/google/zxing/aztec/detector/Detector.java, +import com.google.zxing.common.detector.MathUtils;, +    int targetcx = MathUtils.round(bullEyeCornerPoints[2].x - ratio * dx);, +    int targetcy = MathUtils.round(bullEyeCornerPoints[2].y - ratio * dy);, +    int targetax = MathUtils.round(bullEyeCornerPoints[0].x + ratio * dx);, +    int targetay = MathUtils.round(bullEyeCornerPoints[0].y + ratio * dy);, +    int targetdx = MathUtils.round(bullEyeCornerPoints[3].x - ratio * dx);, +    int targetdy = MathUtils.round(bullEyeCornerPoints[3].y - ratio * dy);, +    int targetbx = MathUtils.round(bullEyeCornerPoints[1].x + ratio * dx);, +    int targetby = MathUtils.round(bullEyeCornerPoints[1].y+ratio*dy);, +    int targetcx = MathUtils.round(pinc.x-ratio*dx);, +    int targetcy = MathUtils.round(pinc.y-ratio*dy);, +    int targetax = MathUtils.round(pina.x+ratio*dx);, +    int targetay = MathUtils.round(pina.y+ratio*dy);, +    int targetdx = MathUtils.round(pind.x-ratio*dx);, +    int targetdy = MathUtils.round(pind.y-ratio*dy);, +    int targetbx = MathUtils.round(pinb.x+ratio*dx);, +    int targetby = MathUtils.round(pinb.y+ratio*dy);, +    int cx = MathUtils.round((pointA.getX() + pointD.getX() + pointB.getX() + pointC.getX())/4);, +    int cy = MathUtils.round((pointA.getY() + pointD.getY() + pointB.getY() + pointC.getY())/4);, +    cx = MathUtils.round((pointA.getX() + pointD.getX() + pointB.getX() + pointC.getX())/4);, +    cy = MathUtils.round((pointA.getY() + pointD.getY() + pointB.getY() + pointC.getY())/4);, +      res[i] = image.get(MathUtils.round(px), MathUtils.round(py));, +      if (image.get(MathUtils.round(px), MathUtils.round(py)) != colorModel) {, +    return MathUtils.distance(a.x, a.y, b.x, b.y);, +++ b/core/src/com/google/zxing/ResultPoint.java, +import com.google.zxing.common.detector.MathUtils;, +, +    return MathUtils.distance(pattern1.x, pattern1.y, pattern2.x, pattern2.y);, +++ b/core/src/com/google/zxing/aztec/detector/Detector.java, +import com.google.zxing.common.detector.MathUtils;, +    int targetcx = MathUtils.round(bullEyeCornerPoints[2].x - ratio * dx);, +    int targetcy = MathUtils.round(bullEyeCornerPoints[2].y - ratio * dy);, +    int targetax = MathUtils.round(bullEyeCornerPoints[0].x + ratio * dx);, +    int targetay = MathUtils.round(bullEyeCornerPoints[0].y + ratio * dy);, +    int targetdx = MathUtils.round(bullEyeCornerPoints[3].x - ratio * dx);, +    int targetdy = MathUtils.round(bullEyeCornerPoints[3].y - ratio * dy);, +    int targetbx = MathUtils.round(bullEyeCornerPoints[1].x + ratio * dx);, +    int targetby = MathUtils.round(bullEyeCornerPoints[1].y+ratio*dy);, +    int targetcx = MathUtils.round(pinc.x-ratio*dx);, +    int targetcy = MathUtils.round(pinc.y-ratio*dy);, +    int targetax = MathUtils.round(pina.x+ratio*dx);, +    int targetay = MathUtils.round(pina.y+ratio*dy);, +    int targetdx = MathUtils.round(pind.x-ratio*dx);, +    int targetdy = MathUtils.round(pind.y-ratio*dy);, +    int targetbx = MathUtils.round(pinb.x+ratio*dx);, +    int targetby = MathUtils.round(pinb.y+ratio*dy);, +    int cx = MathUtils.round((pointA.getX() + pointD.getX() + pointB.getX() + pointC.getX())/4);, +    int cy = MathUtils.round((pointA.getY() + pointD.getY() + pointB.getY() + pointC.getY())/4);, +    cx = MathUtils.round((pointA.getX() + pointD.getX() + pointB.getX() + pointC.getX())/4);, +    cy = MathUtils.round((pointA.getY() + pointD.getY() + pointB.getY() + pointC.getY())/4);, +      res[i] = image.get(MathUtils.round(px), MathUtils.round(py));, +      if (image.get(MathUtils.round(px), MathUtils.round(py)) != colorModel) {, +    return MathUtils.distance(a.x, a.y, b.x, b.y);, +++ b/core/src/com/google/zxing/common/detector/MathUtils.java, +/*, + * Copyright 2012 ZXing authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.zxing.common.detector;, +, +public final class MathUtils {, +, +  private MathUtils() {, +  }, +, +  /**, +   * Ends up being a bit faster than {@link Math#round(float)}. This merely rounds its, +   * argument to the nearest int, where x.5 rounds up to x+1., +   */, +  public static int round(float d) {, +    return (int) (d + 0.5f);, +  }, +, +  public static float distance(float aX, float aY, float bX, float bY) {, +    float xDiff = aX - bX;, +    float yDiff = aY - bY;, +    return (float) Math.sqrt(xDiff * xDiff + yDiff * yDiff);, +  }, +]