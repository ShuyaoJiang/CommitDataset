[+++ b/AUTHORS, +Kazuki Nishiura, +++ b/AUTHORS, +Kazuki Nishiura, +++ b/core/src/com/google/zxing/oned/CodaBarReader.java, +  static final char[] ALPHABET = ALPHABET_STRING.toCharArray();, +  static final int[] CHARACTER_ENCODINGS = {, +    int[] counters = new int[7];, +      for (int i = 0; i < counters.length; i++) {, +        counters[i] = 0;, +      }, +    if (result.length() < 2) {, +    if (!arrayContains(STARTEND_ENCODING, startchar)) {, +    for (int k = 1; k < result.length(); k++) {, +      if (result.charAt(k) == startchar) {, +        if (k + 1 != result.length()) {, +          break;, +    if (result.length() <= minCharacterLength) {, +    result.deleteCharAt(result.length() - 1);, +    result.deleteCharAt(0);, +, +  static boolean arrayContains(char[] array, char key) {, +++ b/AUTHORS, +Kazuki Nishiura, +++ b/core/src/com/google/zxing/oned/CodaBarReader.java, +  static final char[] ALPHABET = ALPHABET_STRING.toCharArray();, +  static final int[] CHARACTER_ENCODINGS = {, +    int[] counters = new int[7];, +      for (int i = 0; i < counters.length; i++) {, +        counters[i] = 0;, +      }, +    if (result.length() < 2) {, +    if (!arrayContains(STARTEND_ENCODING, startchar)) {, +    for (int k = 1; k < result.length(); k++) {, +      if (result.charAt(k) == startchar) {, +        if (k + 1 != result.length()) {, +          break;, +    if (result.length() <= minCharacterLength) {, +    result.deleteCharAt(result.length() - 1);, +    result.deleteCharAt(0);, +, +  static boolean arrayContains(char[] array, char key) {, +++ b/core/src/com/google/zxing/oned/CodaBarWriter.java, +   * @see OneDimensionalCodeWriter#encode(java.lang.String), +    int resultLength = 20;, +    char[] charsWhichAreTenLengthEachAfterDecoded = {'/', ':', '+', '.'};, +        throw new IllegalArgumentException("Cannot encode : '" + contents.charAt(i) + '\'');, +    int position = 0;, +      int code = 0;, +++ b/AUTHORS, +Kazuki Nishiura, +++ b/core/src/com/google/zxing/oned/CodaBarReader.java, +  static final char[] ALPHABET = ALPHABET_STRING.toCharArray();, +  static final int[] CHARACTER_ENCODINGS = {, +    int[] counters = new int[7];, +      for (int i = 0; i < counters.length; i++) {, +        counters[i] = 0;, +      }, +    if (result.length() < 2) {, +    if (!arrayContains(STARTEND_ENCODING, startchar)) {, +    for (int k = 1; k < result.length(); k++) {, +      if (result.charAt(k) == startchar) {, +        if (k + 1 != result.length()) {, +          break;, +    if (result.length() <= minCharacterLength) {, +    result.deleteCharAt(result.length() - 1);, +    result.deleteCharAt(0);, +, +  static boolean arrayContains(char[] array, char key) {, +++ b/core/src/com/google/zxing/oned/CodaBarWriter.java, +   * @see OneDimensionalCodeWriter#encode(java.lang.String), +    int resultLength = 20;, +    char[] charsWhichAreTenLengthEachAfterDecoded = {'/', ':', '+', '.'};, +        throw new IllegalArgumentException("Cannot encode : '" + contents.charAt(i) + '\'');, +    int position = 0;, +      int code = 0;, +++ b/core/src/com/google/zxing/oned/OneDimensionalCodeWriter.java, +, +  private final int sidesMargin;, +, +  protected OneDimensionalCodeWriter(int sidesMargin) {, +  public BitMatrix encode(String contents,, +                          BarcodeFormat format,, +                          int width,, +                          int height,, +  /**, +   * @return a byte array of horizontal pixels (0 = white, 1 = black), +   */, +  private BitMatrix renderResult(byte[] code, int width, int height) {, +   * @param startColor starting color - 0 for white, 1 for black, +   *, +   */, +++ b/AUTHORS, +Kazuki Nishiura, +++ b/core/src/com/google/zxing/oned/CodaBarReader.java, +  static final char[] ALPHABET = ALPHABET_STRING.toCharArray();, +  static final int[] CHARACTER_ENCODINGS = {, +    int[] counters = new int[7];, +      for (int i = 0; i < counters.length; i++) {, +        counters[i] = 0;]