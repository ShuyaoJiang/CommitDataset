[+++ b/core/src/com/google/zxing/common/HybridBinarizer.java, +  private static final int BLOCK_SIZE_POWER = 3;, +  private static final int BLOCK_SIZE = 1 << BLOCK_SIZE_POWER;, +  private static final int BLOCK_SIZE_MASK = BLOCK_SIZE - 1;, +  private static final int MINIMUM_DIMENSION = BLOCK_SIZE * 5;, +  private BitMatrix matrix;, +      int subWidth = width >> BLOCK_SIZE_POWER;, +      if ((width & BLOCK_SIZE_MASK) != 0) {, +      int subHeight = height >> BLOCK_SIZE_POWER;, +      if ((height & BLOCK_SIZE_MASK) != 0) {, +  private static void calculateThresholdForBlock(byte[] luminances,, +                                                 int subWidth,, +                                                 int subHeight,, +                                                 int width,, +                                                 int height,, +                                                 int[][] blackPoints,, +                                                 BitMatrix matrix) {, +      int yoffset = y << BLOCK_SIZE_POWER;, +      if ((yoffset + BLOCK_SIZE) >= height) {, +        yoffset = height - BLOCK_SIZE;, +        int xoffset = x << BLOCK_SIZE_POWER;, +        if ((xoffset + BLOCK_SIZE) >= width) {, +            xoffset = width - BLOCK_SIZE;, +          sum += blackRow[left - 2] + blackRow[left - 1] + blackRow[left] + blackRow[left + 1] + blackRow[left + 2];, +  private static void threshold8x8Block(byte[] luminances,, +                                        int xoffset,, +                                        int yoffset,, +                                        int threshold,, +                                        int stride,, +                                        BitMatrix matrix) {, +    for (int y = 0, offset = yoffset * stride + xoffset; y < BLOCK_SIZE; y++, offset += stride) {, +      for (int x = 0; x < BLOCK_SIZE; x++) {, +        if ((luminances[offset + x] & 0xFF) < threshold) {, +  private static int[][] calculateBlackPoints(byte[] luminances,, +                                              int subWidth,, +                                              int subHeight,, +                                              int width,, +                                              int height) {, +      int yoffset = y << BLOCK_SIZE_POWER;, +      if ((yoffset + BLOCK_SIZE) >= height) {, +        yoffset = height - BLOCK_SIZE;, +        int xoffset = x << BLOCK_SIZE_POWER;, +        if ((xoffset + BLOCK_SIZE) >= width) {, +            xoffset = width - BLOCK_SIZE;, +        int min = 0xFF;, +        for (int yy = 0, offset = yoffset * width + xoffset; yy < BLOCK_SIZE; yy++, offset += width) {, +          for (int xx = 0; xx < BLOCK_SIZE; xx++) {, +            int pixel = luminances[offset + xx] & 0xFF;]