[+++ b/core/src/com/google/zxing/MultiFormatReader.java, +   * Decode an image using the state set up by calling setHints() previously. Continuous scan, +   * clients will get a <b>large</b> speed increase by using this instead of decode()., +        readers.addElement(new MultiFormatOneDReader(hints));, +        readers.addElement(new MultiFormatOneDReader(hints));, +        readers.addElement(new MultiFormatOneDReader(hints));, +        readers.addElement(new MultiFormatOneDReader(hints));, +    int size = readers.size();, +    for (int i = 0; i < size; i++) {, +++ b/core/src/com/google/zxing/MultiFormatReader.java, +   * Decode an image using the state set up by calling setHints() previously. Continuous scan, +   * clients will get a <b>large</b> speed increase by using this instead of decode()., +        readers.addElement(new MultiFormatOneDReader(hints));, +        readers.addElement(new MultiFormatOneDReader(hints));, +        readers.addElement(new MultiFormatOneDReader(hints));, +        readers.addElement(new MultiFormatOneDReader(hints));, +    int size = readers.size();, +    for (int i = 0; i < size; i++) {, +++ b/core/src/com/google/zxing/oned/MultiFormatOneDReader.java, +  private Vector readers;, +  public MultiFormatOneDReader(Hashtable hints) {, +    readers = new Vector();, +        readers.addElement(new MultiFormatUPCEANReader(hints));, +      readers.addElement(new MultiFormatUPCEANReader(hints));, +  }, +  public Result decodeRow(int rowNumber, BitArray row, Hashtable hints) throws ReaderException {, +    int size = readers.size();, +    for (int i = 0; i < size; i++) {, +++ b/core/src/com/google/zxing/MultiFormatReader.java, +   * Decode an image using the state set up by calling setHints() previously. Continuous scan, +   * clients will get a <b>large</b> speed increase by using this instead of decode()., +        readers.addElement(new MultiFormatOneDReader(hints));, +        readers.addElement(new MultiFormatOneDReader(hints));, +        readers.addElement(new MultiFormatOneDReader(hints));, +        readers.addElement(new MultiFormatOneDReader(hints));, +    int size = readers.size();, +    for (int i = 0; i < size; i++) {, +++ b/core/src/com/google/zxing/oned/MultiFormatOneDReader.java, +  private Vector readers;, +  public MultiFormatOneDReader(Hashtable hints) {, +    readers = new Vector();, +        readers.addElement(new MultiFormatUPCEANReader(hints));, +      readers.addElement(new MultiFormatUPCEANReader(hints));, +  }, +  public Result decodeRow(int rowNumber, BitArray row, Hashtable hints) throws ReaderException {, +    int size = readers.size();, +    for (int i = 0; i < size; i++) {, +++ b/core/src/com/google/zxing/oned/MultiFormatUPCEANReader.java, +  private Vector readers;, +, +  public MultiFormatUPCEANReader(Hashtable hints) {, +    readers = new Vector();, +  }, +  public Result decodeRow(int rowNumber, BitArray row, Hashtable hints) throws ReaderException {, +    int size = readers.size();, +    for (int i = 0; i < size; i++) {]