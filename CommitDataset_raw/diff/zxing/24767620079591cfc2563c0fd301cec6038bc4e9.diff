[+++ b/cpp/core/src/zxing/oned/Code128Reader.cpp, +		  if (!recordPattern(row, rowOffset, counters, countersCount)) {, +		    throw ReaderException("");, +		  }, +++ b/cpp/core/src/zxing/oned/Code128Reader.cpp, +		  if (!recordPattern(row, rowOffset, counters, countersCount)) {, +		    throw ReaderException("");, +		  }, +++ b/cpp/core/src/zxing/oned/Code39Reader.cpp, +        if (!recordPattern(row, nextStart, counters, countersLen)) {, +          throw ReaderException("");, +        }, +++ b/cpp/core/src/zxing/oned/Code128Reader.cpp, +		  if (!recordPattern(row, rowOffset, counters, countersCount)) {, +		    throw ReaderException("");, +		  }, +++ b/cpp/core/src/zxing/oned/Code39Reader.cpp, +        if (!recordPattern(row, nextStart, counters, countersLen)) {, +          throw ReaderException("");, +        }, +++ b/cpp/core/src/zxing/oned/ITFReader.cpp, +        if (!recordPattern(row, payloadStart, counterDigitPair, counterDigitPairLen)) {, +          throw ReaderException("");, +        }, +++ b/cpp/core/src/zxing/oned/Code128Reader.cpp, +		  if (!recordPattern(row, rowOffset, counters, countersCount)) {, +		    throw ReaderException("");, +		  }, +++ b/cpp/core/src/zxing/oned/Code39Reader.cpp, +        if (!recordPattern(row, nextStart, counters, countersLen)) {, +          throw ReaderException("");, +        }, +++ b/cpp/core/src/zxing/oned/ITFReader.cpp, +        if (!recordPattern(row, payloadStart, counterDigitPair, counterDigitPairLen)) {, +          throw ReaderException("");, +        }, +++ b/cpp/core/src/zxing/oned/OneDReader.cpp, +              Ref<ResultPoint> pointZero(new OneDResultPoint(width - points[0]->getX() - 1,, +                  points[0]->getY()));, +              Ref<ResultPoint> pointOne(new OneDResultPoint(width - points[1]->getX() - 1,, +                  points[1]->getY()));, +              result.reset(new Result(result->getText(), result->getRawBytes(), points,, +                  result->getBarcodeFormat()));, +		unsigned int OneDReader::patternMatchVariance(int counters[], int countersSize,, +		    const int pattern[], int maxIndividualVariance) {, +		bool OneDReader::recordPattern(Ref<BitArray> row, int start, int counters[], int countersCount) {, +				return false;, +				return false;, +			return true;, +++ b/cpp/core/src/zxing/oned/Code128Reader.cpp, +		  if (!recordPattern(row, rowOffset, counters, countersCount)) {, +		    throw ReaderException("");, +		  }, +++ b/cpp/core/src/zxing/oned/Code39Reader.cpp, +        if (!recordPattern(row, nextStart, counters, countersLen)) {, +          throw ReaderException("");, +        }, +++ b/cpp/core/src/zxing/oned/ITFReader.cpp, +        if (!recordPattern(row, payloadStart, counterDigitPair, counterDigitPairLen)) {, +          throw ReaderException("");, +        }, +++ b/cpp/core/src/zxing/oned/OneDReader.cpp, +              Ref<ResultPoint> pointZero(new OneDResultPoint(width - points[0]->getX() - 1,, +                  points[0]->getY()));, +              Ref<ResultPoint> pointOne(new OneDResultPoint(width - points[1]->getX() - 1,, +                  points[1]->getY()));, +              result.reset(new Result(result->getText(), result->getRawBytes(), points,, +                  result->getBarcodeFormat()));, +		unsigned int OneDReader::patternMatchVariance(int counters[], int countersSize,, +		    const int pattern[], int maxIndividualVariance) {, +		bool OneDReader::recordPattern(Ref<BitArray> row, int start, int counters[], int countersCount) {, +				return false;, +				return false;, +			return true;, +++ b/cpp/core/src/zxing/oned/OneDReader.h, +			static bool recordPattern(Ref<BitArray> row, int start, int counters[], int countersCount);, +++ b/cpp/core/src/zxing/oned/Code128Reader.cpp, +		  if (!recordPattern(row, rowOffset, counters, countersCount)) {, +		    throw ReaderException("");, +		  }, +++ b/cpp/core/src/zxing/oned/Code39Reader.cpp, +        if (!recordPattern(row, nextStart, counters, countersLen)) {, +          throw ReaderException("");, +        }, +++ b/cpp/core/src/zxing/oned/ITFReader.cpp, +        if (!recordPattern(row, payloadStart, counterDigitPair, counterDigitPairLen)) {, +          throw ReaderException("");, +        }, +++ b/cpp/core/src/zxing/oned/OneDReader.cpp, +              Ref<ResultPoint> pointZero(new OneDResultPoint(width - points[0]->getX() - 1,, +                  points[0]->getY()));, +              Ref<ResultPoint> pointOne(new OneDResultPoint(width - points[1]->getX() - 1,, +                  points[1]->getY()));, +              result.reset(new Result(result->getText(), result->getRawBytes(), points,, +                  result->getBarcodeFormat()));, +		unsigned int OneDReader::patternMatchVariance(int counters[], int countersSize,, +		    const int pattern[], int maxIndividualVariance) {, +		bool OneDReader::recordPattern(Ref<BitArray> row, int start, int counters[], int countersCount) {, +				return false;, +				return false;]