[+++ b/core/src/com/google/zxing/oned/UPCEANReader.java, +  private static final int MAX_AVG_VARIANCE = (int) (PATTERN_MATCH_RESULT_SCALE_FACTOR * 0.48f);, +++ b/core/src/com/google/zxing/oned/UPCEANReader.java, +  private static final int MAX_AVG_VARIANCE = (int) (PATTERN_MATCH_RESULT_SCALE_FACTOR * 0.48f);, +++ b/core/test/src/com/google/zxing/common/AbstractBlackBoxTestCase.java, +  protected void addTest(int mustPassCount, int tryHarderCount, float rotation) {, +    addTest(mustPassCount, tryHarderCount, 0, 0, rotation);, +  }, +, +   * @param maxMisreads Maximum number of images which can fail due to successfully reading the wrong contents, +   * @param maxTryHarderMisreads Maximum number of images which can fail due to successfully, +   *                             reading the wrong contents using the try harder flag, +  protected void addTest(int mustPassCount,, +                         int tryHarderCount,, +                         int maxMisreads,, +                         int maxTryHarderMisreads,, +                         float rotation) {, +    testResults.add(new TestResult(mustPassCount, tryHarderCount, maxMisreads, maxTryHarderMisreads, rotation));, +, +    int[] misreadCounts = new int[testCount];, +    int[] tryHaderMisreadCounts = new int[testCount];, +, +      System.out.printf("Starting %s\n", testImage.getAbsolutePath());, +        try {, +          } else {, +            misreadCounts[x]++;, +        } catch (ReaderException re) {, +          // continue, +        }, +        try {, +          } else {, +            tryHaderMisreadCounts[x]++;, +          }, +        } catch (ReaderException re) {, +          // continue, +    int totalMisread = 0;, +    int totalMaxMisread = 0;, +, +    for (int x = 0; x < testResults.size(); x++) {, +      TestResult testResult = testResults.get(x);, +      System.out.printf("Rotation %d degrees:\n", (int) testResult.getRotation());, +      System.out.printf("  %d of %d images passed (%d required)\n",, +                        passedCounts[x], imageFiles.length, testResult.getMustPassCount());, +      int failed = imageFiles.length - passedCounts[x];, +      System.out.printf("    %d failed due to misreads, %d not detected\n",, +                        misreadCounts[x], failed - misreadCounts[x]);, +      System.out.printf("  %d of %d images passed with try harder (%d required)\n",, +                        tryHarderCounts[x], imageFiles.length, testResult.getTryHarderCount());, +      failed = imageFiles.length - tryHarderCounts[x];, +      System.out.printf("    %d failed due to misreads, %d not detected\n",, +                        tryHaderMisreadCounts[x], failed - tryHaderMisreadCounts[x]);, +      totalFound += passedCounts[x] + tryHarderCounts[x];, +      totalMustPass += testResult.getMustPassCount() + testResult.getTryHarderCount();, +      totalMisread += misreadCounts[x] + tryHaderMisreadCounts[x];, +      totalMaxMisread += testResult.getMaxMisreads() + testResult.getMaxTryHarderMisreads();, +    System.out.printf("TOTALS:\nDecoded %d images out of %d (%d%%, %d required)\n",, +                      totalFound, totalTests, totalFound * 100 / totalTests, totalMustPass);, +      System.out.printf("  +++ Test too lax by %d images\n", totalFound - totalMustPass);, +      System.out.printf("  --- Test failed by %d images\n", totalMustPass - totalFound);, +    if (totalMisread < totalMaxMisread) {, +      System.out.printf("  +++ Test expects too many misreads by %d images\n", totalMaxMisread - totalMisread);, +    } else if (totalMisread > totalMaxMisread) {, +      System.out.printf("  --- Test had too many misreads by %d images\n", totalMisread - totalMaxMisread);, +    }, +, +    System.out.flush();, +, +        TestResult testResult = testResults.get(x);, +        String label = "Rotation " + testResult.getRotation() + " degrees: Too many images failed";, +        assertTrue(label,, +                   passedCounts[x] >= testResult.getMustPassCount());, +        assertTrue("Try harder, " + label,, +                   tryHarderCounts[x] >= testResult.getTryHarderCount());, +        label = "Rotation " + testResult.getRotation() + " degrees: Too many images misread";, +        assertTrue(label,, +                   misreadCounts[x] <= testResult.getMaxMisreads());, +        assertTrue("Try harder, " + label,, +                   tryHaderMisreadCounts[x] <= testResult.getMaxTryHarderMisreads());, +                         boolean tryHarder) throws ReaderException {, +    String suffix = String.format(" (%srotation: %d)", tryHarder ? "try harder, " : "", (int) rotation);, +    Result result = barcodeReader.decode(source, hints);, +      System.out.printf("Format mismatch: expected '%s' but got '%s'%s\n",, +                        expectedFormat, result.getBarcodeFormat(), suffix);, +      System.out.printf("Content mismatch: expected '%s' but got '%s'%s\n", , +                        expectedText, resultText, suffix);, +        System.out.printf("Metadata mismatch for key '%s': expected '%s' but got '%s'\n",, +                          key, expectedValue, actualValue);, +++ b/core/src/com/google/zxing/oned/UPCEANReader.java, +  private static final int MAX_AVG_VARIANCE = (int) (PATTERN_MATCH_RESULT_SCALE_FACTOR * 0.48f);, +++ b/core/test/src/com/google/zxing/common/AbstractBlackBoxTestCase.java, +  protected void addTest(int mustPassCount, int tryHarderCount, float rotation) {, +    addTest(mustPassCount, tryHarderCount, 0, 0, rotation);, +  }, +, +   * @param maxMisreads Maximum number of images which can fail due to successfully reading the wrong contents, +   * @param maxTryHarderMisreads Maximum number of images which can fail due to successfully, +   *                             reading the wrong contents using the try harder flag, +  protected void addTest(int mustPassCount,, +                         int tryHarderCount,, +                         int maxMisreads,]