[+++ b/android/src/com/google/zxing/client/android/Intents.java, +     * Example: "EAN_13,EAN_8,QR_CODE". This overrides {@link #MODE}., +     * If a barcode is found, Barcodes returns {@link android.app.Activity#RESULT_OK} to, +     * If the user presses Back, the result code will be {@link android.app.Activity#RESULT_CANCELED}., +     * Call {@link android.content.Intent#getStringExtra(String)} with {@link #RESULT_FORMAT}, +     * to determine which barcode format was found., +     * See {@link com.google.zxing.BarcodeFormat} for possible values., +     * Call {@link android.content.Intent#getStringExtra(String)} with {@link #RESULT_UPC_EAN_EXTENSION}, +     * to return the content of any UPC extension barcode that was also found. Only applicable, +     * to {@link com.google.zxing.BarcodeFormat#UPC_A} and {@link com.google.zxing.BarcodeFormat#EAN_13}, +     * formats., +     * Call {@link android.content.Intent#getByteArrayExtra(String)} with {@link #RESULT_BYTES}, +     * to get a {@code byte[]} of raw bytes in the barcode, if available., +     * Call {@link android.content.Intent#getIntArrayExtra(String)} with {@link #RESULT_ORIENTATION}., +     * Call {@link android.content.Intent#getStringExtra(String)} with {@link #RESULT_ERROR_CORRECTION_LEVEL}., +     * Call {@link android.content.Intent#getByteArrayExtra(String)} with these keys., +     * Setting this to false will not save scanned codes in the history. Specified as a {@code boolean}., +++ b/android/src/com/google/zxing/client/android/Intents.java, +     * Example: "EAN_13,EAN_8,QR_CODE". This overrides {@link #MODE}., +     * If a barcode is found, Barcodes returns {@link android.app.Activity#RESULT_OK} to, +     * If the user presses Back, the result code will be {@link android.app.Activity#RESULT_CANCELED}., +     * Call {@link android.content.Intent#getStringExtra(String)} with {@link #RESULT_FORMAT}, +     * to determine which barcode format was found., +     * See {@link com.google.zxing.BarcodeFormat} for possible values., +     * Call {@link android.content.Intent#getStringExtra(String)} with {@link #RESULT_UPC_EAN_EXTENSION}, +     * to return the content of any UPC extension barcode that was also found. Only applicable, +     * to {@link com.google.zxing.BarcodeFormat#UPC_A} and {@link com.google.zxing.BarcodeFormat#EAN_13}, +     * formats., +     * Call {@link android.content.Intent#getByteArrayExtra(String)} with {@link #RESULT_BYTES}, +     * to get a {@code byte[]} of raw bytes in the barcode, if available., +     * Call {@link android.content.Intent#getIntArrayExtra(String)} with {@link #RESULT_ORIENTATION}., +     * Call {@link android.content.Intent#getStringExtra(String)} with {@link #RESULT_ERROR_CORRECTION_LEVEL}., +     * Call {@link android.content.Intent#getByteArrayExtra(String)} with these keys., +     * Setting this to false will not save scanned codes in the history. Specified as a {@code boolean}., +++ b/build.xml, +    <delete dir="docs/javadoc"/>, +    <javadoc failonerror="true", +             destdir="docs/javadoc", +             footer=", +               &lt;script type=&quot;text/javascript&quot;&gt;;, +               var _gaq = _gaq || [];, +               _gaq.push(['_setAccount', 'UA-788492-5']);, +               _gaq.push(['_trackPageview']);, +               (function() {, +                 var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;, +                 ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';, +                 var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);, +               })();, +               &lt;/script&gt;">]