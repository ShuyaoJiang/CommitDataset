[+++ b/android/src/com/google/zxing/client/android/DecodeHandler.java, +import android.graphics.Bitmap;, +import com.google.zxing.LuminanceSource;, +import com.google.zxing.PlanarYUVLuminanceSource;, +        Bitmap grayscaleBitmap = toBitmap(source, source.renderCroppedGreyscaleBitmap());, +        bundle.putParcelable(DecodeThread.BARCODE_BITMAP, grayscaleBitmap);, +  private static Bitmap toBitmap(LuminanceSource source, int[] pixels) {, +    int width = source.getWidth();, +    int height = source.getHeight();, +    Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);, +    bitmap.setPixels(pixels, 0, width, 0, 0, width, height);, +    return bitmap;, +  }, +, +++ b/android/src/com/google/zxing/client/android/DecodeHandler.java, +import android.graphics.Bitmap;, +import com.google.zxing.LuminanceSource;, +import com.google.zxing.PlanarYUVLuminanceSource;, +        Bitmap grayscaleBitmap = toBitmap(source, source.renderCroppedGreyscaleBitmap());, +        bundle.putParcelable(DecodeThread.BARCODE_BITMAP, grayscaleBitmap);, +  private static Bitmap toBitmap(LuminanceSource source, int[] pixels) {, +    int width = source.getWidth();, +    int height = source.getHeight();, +    Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);, +    bitmap.setPixels(pixels, 0, width, 0, 0, width, height);, +    return bitmap;, +  }, +, +++ /dev/null, +++ b/android/src/com/google/zxing/client/android/DecodeHandler.java, +import android.graphics.Bitmap;, +import com.google.zxing.LuminanceSource;, +import com.google.zxing.PlanarYUVLuminanceSource;, +        Bitmap grayscaleBitmap = toBitmap(source, source.renderCroppedGreyscaleBitmap());, +        bundle.putParcelable(DecodeThread.BARCODE_BITMAP, grayscaleBitmap);, +  private static Bitmap toBitmap(LuminanceSource source, int[] pixels) {, +    int width = source.getWidth();, +    int height = source.getHeight();, +    Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);, +    bitmap.setPixels(pixels, 0, width, 0, 0, width, height);, +    return bitmap;, +  }, +, +++ /dev/null, +++ b/android/src/com/google/zxing/client/android/camera/CameraManager.java, +import com.google.zxing.PlanarYUVLuminanceSource;, +++ b/android/src/com/google/zxing/client/android/DecodeHandler.java, +import android.graphics.Bitmap;, +import com.google.zxing.LuminanceSource;, +import com.google.zxing.PlanarYUVLuminanceSource;, +        Bitmap grayscaleBitmap = toBitmap(source, source.renderCroppedGreyscaleBitmap());, +        bundle.putParcelable(DecodeThread.BARCODE_BITMAP, grayscaleBitmap);, +  private static Bitmap toBitmap(LuminanceSource source, int[] pixels) {, +    int width = source.getWidth();, +    int height = source.getHeight();, +    Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);, +    bitmap.setPixels(pixels, 0, width, 0, 0, width, height);, +    return bitmap;, +  }, +, +++ /dev/null, +++ b/android/src/com/google/zxing/client/android/camera/CameraManager.java, +import com.google.zxing.PlanarYUVLuminanceSource;, +++ b/core/src/com/google/zxing/PlanarYUVLuminanceSource.java, +/*, + * Copyright 2009 ZXing authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.zxing;, +, +/**, + * This object extends LuminanceSource around an array of YUV data returned from the camera driver,, + * with the option to crop to a rectangle within the full data. This can be used to exclude, + * superfluous pixels around the perimeter and speed up decoding., + *, + * It works for any pixel format where the Y channel is planar and appears first, including, + * YCbCr_420_SP and YCbCr_422_SP., + *, + * @author dswitkin@google.com (Daniel Switkin), + */, +public final class PlanarYUVLuminanceSource extends LuminanceSource {, +, +  private final byte[] yuvData;, +  private final int dataWidth;, +  private final int dataHeight;, +  private final int left;, +  private final int top;, +]