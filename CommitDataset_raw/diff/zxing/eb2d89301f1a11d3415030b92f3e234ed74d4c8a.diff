[+++ b/core/src/com/google/zxing/client/result/CalendarParsedResult.java, +import java.util.regex.Matcher;, +  private static final Pattern RFC2445_DURATION =, +      Pattern.compile("P(?:(\\d+)W)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?)?");, +  private static final long[] RFC2445_DURATION_FIELD_UNITS = {, +      7 * 24 * 60 * 60 * 1000L, // 1 week, +      24 * 60 * 60 * 1000L, // 1 day, +      60 * 60 * 1000L, // 1 hour, +      60 * 1000L, // 1 minute, +      1000L, // 1 second, +  };, +, +                              String durationString,, +, +, +    if (endString == null) {, +      long durationMS = parseDurationMS(durationString);, +      end = durationMS < 0L ? null : new Date(start.getTime() + durationMS);, +    } else {, +      try {, +        this.end = parseDate(endString);, +      } catch (ParseException pe) {, +        throw new IllegalArgumentException(pe.toString());, +      }, +    }, +, +, +  private static long parseDurationMS(CharSequence durationString) {, +    if (durationString == null) {, +      return -1L;, +    }, +    Matcher m = RFC2445_DURATION.matcher(durationString);, +    if (!m.matches()) {, +      return -1L;, +    }, +    long durationMS = 0L;, +    for (int i = 0; i < RFC2445_DURATION_FIELD_UNITS.length; i++) {, +      String fieldValue = m.group(i + 1);, +      if (fieldValue != null) {, +        durationMS += RFC2445_DURATION_FIELD_UNITS[i] * Integer.parseInt(fieldValue);, +      }, +    }, +    return durationMS;, +  }, +, +++ b/core/src/com/google/zxing/client/result/CalendarParsedResult.java, +import java.util.regex.Matcher;, +  private static final Pattern RFC2445_DURATION =, +      Pattern.compile("P(?:(\\d+)W)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?)?");, +  private static final long[] RFC2445_DURATION_FIELD_UNITS = {, +      7 * 24 * 60 * 60 * 1000L, // 1 week, +      24 * 60 * 60 * 1000L, // 1 day, +      60 * 60 * 1000L, // 1 hour, +      60 * 1000L, // 1 minute, +      1000L, // 1 second, +  };, +, +                              String durationString,, +, +, +    if (endString == null) {, +      long durationMS = parseDurationMS(durationString);, +      end = durationMS < 0L ? null : new Date(start.getTime() + durationMS);, +    } else {, +      try {, +        this.end = parseDate(endString);, +      } catch (ParseException pe) {, +        throw new IllegalArgumentException(pe.toString());, +      }, +    }, +, +, +  private static long parseDurationMS(CharSequence durationString) {, +    if (durationString == null) {, +      return -1L;, +    }, +    Matcher m = RFC2445_DURATION.matcher(durationString);, +    if (!m.matches()) {, +      return -1L;, +    }, +    long durationMS = 0L;, +    for (int i = 0; i < RFC2445_DURATION_FIELD_UNITS.length; i++) {, +      String fieldValue = m.group(i + 1);, +      if (fieldValue != null) {, +        durationMS += RFC2445_DURATION_FIELD_UNITS[i] * Integer.parseInt(fieldValue);, +      }, +    }, +    return durationMS;, +  }, +, +++ b/core/src/com/google/zxing/client/result/VEventResultParser.java, +    String duration = matchSingleVCardPrefixedField("DURATION", rawText, true);, +                                      duration,, +++ b/core/src/com/google/zxing/client/result/CalendarParsedResult.java, +import java.util.regex.Matcher;, +  private static final Pattern RFC2445_DURATION =, +      Pattern.compile("P(?:(\\d+)W)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?)?");, +  private static final long[] RFC2445_DURATION_FIELD_UNITS = {, +      7 * 24 * 60 * 60 * 1000L, // 1 week, +      24 * 60 * 60 * 1000L, // 1 day]