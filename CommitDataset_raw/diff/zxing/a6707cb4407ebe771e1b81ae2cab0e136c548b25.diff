[+++ b/core/src/main/java/com/google/zxing/EncodeHintType.java, +   * In all cases, it can also be a {@link String} representation of the desired value as well., +   * most 1D formats. (Type {@link Integer}, or {@link String} representation of the integer value)., +   * Specifies whether to use compact mode for PDF417 (type {@link Boolean}, or "true" or "false", +   * {@link String} value)., +   * {@link com.google.zxing.pdf417.encoder.Compaction Compaction} or {@link String} value of one of its, +   * enum values)., +   * Specifies the required number of layers for an Aztec code., +   * A negative number (-1, -2, -3, -4) specifies a compact Aztec code., +   * 0 indicates to use the minimum number of layers (the default)., +   * A positive number (1, 2, .. 32) specifies a normal (non-compact) Aztec code., +   * (Type {@link Integer}, or {@link String} representation of the integer value)., +++ b/core/src/main/java/com/google/zxing/EncodeHintType.java, +   * In all cases, it can also be a {@link String} representation of the desired value as well., +   * most 1D formats. (Type {@link Integer}, or {@link String} representation of the integer value)., +   * Specifies whether to use compact mode for PDF417 (type {@link Boolean}, or "true" or "false", +   * {@link String} value)., +   * {@link com.google.zxing.pdf417.encoder.Compaction Compaction} or {@link String} value of one of its, +   * enum values)., +   * Specifies the required number of layers for an Aztec code., +   * A negative number (-1, -2, -3, -4) specifies a compact Aztec code., +   * 0 indicates to use the minimum number of layers (the default)., +   * A positive number (1, 2, .. 32) specifies a normal (non-compact) Aztec code., +   * (Type {@link Integer}, or {@link String} representation of the integer value)., +++ b/core/src/main/java/com/google/zxing/aztec/AztecWriter.java, +    Charset charset = DEFAULT_CHARSET;, +    int eccPercent = Encoder.DEFAULT_EC_PERCENT;, +    int layers = Encoder.DEFAULT_AZTEC_LAYERS;, +    if (hints != null) {, +      if (hints.containsKey(EncodeHintType.CHARACTER_SET)) {, +        charset = Charset.forName(hints.get(EncodeHintType.CHARACTER_SET).toString());, +      }, +      if (hints.containsKey(EncodeHintType.ERROR_CORRECTION)) {, +        eccPercent = Integer.parseInt(hints.get(EncodeHintType.ERROR_CORRECTION).toString());, +      }, +      if (hints.containsKey(EncodeHintType.AZTEC_LAYERS)) {, +        layers = Integer.parseInt(hints.get(EncodeHintType.AZTEC_LAYERS).toString());, +      }, +    }, +    return encode(contents, format, width, height, charset, eccPercent, layers);, +++ b/core/src/main/java/com/google/zxing/EncodeHintType.java, +   * In all cases, it can also be a {@link String} representation of the desired value as well., +   * most 1D formats. (Type {@link Integer}, or {@link String} representation of the integer value)., +   * Specifies whether to use compact mode for PDF417 (type {@link Boolean}, or "true" or "false", +   * {@link String} value)., +   * {@link com.google.zxing.pdf417.encoder.Compaction Compaction} or {@link String} value of one of its, +   * enum values)., +   * Specifies the required number of layers for an Aztec code., +   * A negative number (-1, -2, -3, -4) specifies a compact Aztec code., +   * 0 indicates to use the minimum number of layers (the default)., +   * A positive number (1, 2, .. 32) specifies a normal (non-compact) Aztec code., +   * (Type {@link Integer}, or {@link String} representation of the integer value)., +++ b/core/src/main/java/com/google/zxing/aztec/AztecWriter.java, +    Charset charset = DEFAULT_CHARSET;, +    int eccPercent = Encoder.DEFAULT_EC_PERCENT;, +    int layers = Encoder.DEFAULT_AZTEC_LAYERS;, +    if (hints != null) {, +      if (hints.containsKey(EncodeHintType.CHARACTER_SET)) {, +        charset = Charset.forName(hints.get(EncodeHintType.CHARACTER_SET).toString());, +      }, +      if (hints.containsKey(EncodeHintType.ERROR_CORRECTION)) {, +        eccPercent = Integer.parseInt(hints.get(EncodeHintType.ERROR_CORRECTION).toString());, +      }, +      if (hints.containsKey(EncodeHintType.AZTEC_LAYERS)) {, +        layers = Integer.parseInt(hints.get(EncodeHintType.AZTEC_LAYERS).toString());, +      }, +    }, +    return encode(contents, format, width, height, charset, eccPercent, layers);, +++ b/core/src/main/java/com/google/zxing/common/StringUtils.java, +    if (hints != null && hints.containsKey(DecodeHintType.CHARACTER_SET)) {, +      return hints.get(DecodeHintType.CHARACTER_SET).toString();, +++ b/core/src/main/java/com/google/zxing/EncodeHintType.java, +   * In all cases, it can also be a {@link String} representation of the desired value as well., +   * most 1D formats. (Type {@link Integer}, or {@link String} representation of the integer value)., +   * Specifies whether to use compact mode for PDF417 (type {@link Boolean}, or "true" or "false", +   * {@link String} value)., +   * {@link com.google.zxing.pdf417.encoder.Compaction Compaction} or {@link String} value of one of its, +   * enum values)., +   * Specifies the required number of layers for an Aztec code., +   * A negative number (-1, -2, -3, -4) specifies a compact Aztec code., +   * 0 indicates to use the minimum number of layers (the default)., +   * A positive number (1, 2, .. 32) specifies a normal (non-compact) Aztec code., +   * (Type {@link Integer}, or {@link String} representation of the integer value)., +++ b/core/src/main/java/com/google/zxing/aztec/AztecWriter.java, +    Charset charset = DEFAULT_CHARSET;, +    int eccPercent = Encoder.DEFAULT_EC_PERCENT;, +    int layers = Encoder.DEFAULT_AZTEC_LAYERS;, +    if (hints != null) {, +      if (hints.containsKey(EncodeHintType.CHARACTER_SET)) {, +        charset = Charset.forName(hints.get(EncodeHintType.CHARACTER_SET).toString());, +      }, +      if (hints.containsKey(EncodeHintType.ERROR_CORRECTION)) {, +        eccPercent = Integer.parseInt(hints.get(EncodeHintType.ERROR_CORRECTION).toString());, +      }, +      if (hints.containsKey(EncodeHintType.AZTEC_LAYERS)) {, +        layers = Integer.parseInt(hints.get(EncodeHintType.AZTEC_LAYERS).toString());, +      }, +    }, +    return encode(contents, format, width, height, charset, eccPercent, layers);, +++ b/core/src/main/java/com/google/zxing/common/StringUtils.java]