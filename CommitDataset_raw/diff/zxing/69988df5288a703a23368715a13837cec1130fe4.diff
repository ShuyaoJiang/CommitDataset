[+++ b/cpp/core/src/zxing/common/HybridBinarizer.cpp, +using namespace zxing;, +namespace {, +  const int LUMINANCE_BITS = 5;, +  const int LUMINANCE_SHIFT = 8 - LUMINANCE_BITS;, +  const int LUMINANCE_BUCKETS = 1 << LUMINANCE_BITS;, +  const int BLOCK_SIZE_POWER = 3;, +  const int BLOCK_SIZE = 1 << BLOCK_SIZE_POWER;, +  const int BLOCK_SIZE_MASK = BLOCK_SIZE - 1;, +  const int MINIMUM_DIMENSION = BLOCK_SIZE * 5;, +}, +    int subWidth = width >> BLOCK_SIZE_POWER;, +    if ((width & BLOCK_SIZE_MASK) != 0) {, +    int subHeight = height >> BLOCK_SIZE_POWER;, +    if ((height & BLOCK_SIZE_MASK) != 0) {, +    int yoffset = y << BLOCK_SIZE_POWER;, +    if (yoffset + BLOCK_SIZE >= height) {, +      yoffset = height - BLOCK_SIZE;, +      int xoffset = x << BLOCK_SIZE_POWER;, +      if (xoffset + BLOCK_SIZE >= width) {, +        xoffset = width - BLOCK_SIZE;, +  for (int y = 0, offset = yoffset * stride + xoffset;, +       y < BLOCK_SIZE;, +       y++,  offset += stride) {, +    for (int x = 0; x < BLOCK_SIZE; x++) {, +    int yoffset = y << BLOCK_SIZE_POWER;, +    if (yoffset + BLOCK_SIZE >= height) {, +      yoffset = height - BLOCK_SIZE;, +      int xoffset = x << BLOCK_SIZE_POWER;, +      if (xoffset + BLOCK_SIZE >= width) {, +        xoffset = width - BLOCK_SIZE;, +      int min = 0xFF;, +      for (int yy = 0, offset = yoffset * width + xoffset;, +           yy < BLOCK_SIZE;, +           yy++, offset += width) {, +        for (int xx = 0; xx < BLOCK_SIZE; xx++) {, +          int pixel = luminances[offset + xx] & 0xFF;]