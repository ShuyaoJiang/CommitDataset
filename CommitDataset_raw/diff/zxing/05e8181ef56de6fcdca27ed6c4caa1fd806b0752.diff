[+++ b/android-integration/src/com/google/zxing/integration/android/IntentIntegrator.java, +  public static final String ONE_D_CODE_TYPES = PRODUCT_CODE_TYPES + ",CODE_39,CODE_93,CODE_128";, +++ b/android-integration/src/com/google/zxing/integration/android/IntentIntegrator.java, +  public static final String ONE_D_CODE_TYPES = PRODUCT_CODE_TYPES + ",CODE_39,CODE_93,CODE_128";, +++ b/core/src/com/google/zxing/BarcodeFormat.java, +  /** Code 93 1D format. */, +  public static final BarcodeFormat CODE_93 = new BarcodeFormat("CODE_93");, +, +++ b/android-integration/src/com/google/zxing/integration/android/IntentIntegrator.java, +  public static final String ONE_D_CODE_TYPES = PRODUCT_CODE_TYPES + ",CODE_39,CODE_93,CODE_128";, +++ b/core/src/com/google/zxing/BarcodeFormat.java, +  /** Code 93 1D format. */, +  public static final BarcodeFormat CODE_93 = new BarcodeFormat("CODE_93");, +, +++ b/core/src/com/google/zxing/MultiFormatReader.java, +              formats.contains(BarcodeFormat.CODE_93) ||, +++ b/android-integration/src/com/google/zxing/integration/android/IntentIntegrator.java, +  public static final String ONE_D_CODE_TYPES = PRODUCT_CODE_TYPES + ",CODE_39,CODE_93,CODE_128";, +++ b/core/src/com/google/zxing/BarcodeFormat.java, +  /** Code 93 1D format. */, +  public static final BarcodeFormat CODE_93 = new BarcodeFormat("CODE_93");, +, +++ b/core/src/com/google/zxing/MultiFormatReader.java, +              formats.contains(BarcodeFormat.CODE_93) ||, +++ b/core/src/com/google/zxing/oned/Code39Reader.java, + * @see Code93Reader, +      if (result.charAt(max) != ALPHABET[total % 43]) {, +    if (result.length() == 0) {, +    String resultString;, +    if (extendedMode) {, +      resultString = decodeExtended(result);, +    } else {, +      resultString = result.toString();, +    }, +, +  private static String decodeExtended(StringBuffer encoded) throws FormatException {, +++ b/android-integration/src/com/google/zxing/integration/android/IntentIntegrator.java, +  public static final String ONE_D_CODE_TYPES = PRODUCT_CODE_TYPES + ",CODE_39,CODE_93,CODE_128";, +++ b/core/src/com/google/zxing/BarcodeFormat.java, +  /** Code 93 1D format. */, +  public static final BarcodeFormat CODE_93 = new BarcodeFormat("CODE_93");, +, +++ b/core/src/com/google/zxing/MultiFormatReader.java, +              formats.contains(BarcodeFormat.CODE_93) ||, +++ b/core/src/com/google/zxing/oned/Code39Reader.java, + * @see Code93Reader, +      if (result.charAt(max) != ALPHABET[total % 43]) {, +    if (result.length() == 0) {, +    String resultString;, +    if (extendedMode) {, +      resultString = decodeExtended(result);, +    } else {, +      resultString = result.toString();, +    }, +, +  private static String decodeExtended(StringBuffer encoded) throws FormatException {, +++ b/core/src/com/google/zxing/oned/Code93Reader.java, +/*, + * Copyright 2010 ZXing authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.zxing.oned;, +, +import java.util.Hashtable;, +, +import com.google.zxing.BarcodeFormat;, +import com.google.zxing.ChecksumException;, +import com.google.zxing.FormatException;, +import com.google.zxing.NotFoundException;, +import com.google.zxing.Result;, +import com.google.zxing.ResultPoint;, +import com.google.zxing.common.BitArray;, +, +/**, + * <p>Decodes Code 93 barcodes.</p>, + *, + * @author Sean Owen, + * @see Code39Reader, + */, +public final class Code93Reader extends OneDReader {, +, +  // Note that 'abcd' are dummy characters in place of control characters., +  private static final String ALPHABET_STRING = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%abcd*";, +  private static final char[] ALPHABET = ALPHABET_STRING.toCharArray();, +, +  /**, +   * These represent the encodings of characters, as patterns of wide and narrow bars., +   * The 9 least-significant bits of each int correspond to the pattern of wide and narrow.]