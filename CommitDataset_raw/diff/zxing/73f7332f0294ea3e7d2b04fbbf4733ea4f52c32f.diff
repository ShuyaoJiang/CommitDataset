[+++ b/actionscript/core/src/com/google/zxing/aztec/decoder/Decoder.as, +/*, + * Copyright 2010 ZXing authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.zxing.aztec.decoder, +{, +, +	import com.google.zxing.FormatException;, +	import com.google.zxing.aztec.AztecDetectorResult;, +	import com.google.zxing.common.BitMatrix;, +	import com.google.zxing.common.DecoderResult;, +	import com.google.zxing.common.flexdatatypes.StringBuilder;, +	import com.google.zxing.common.reedsolomon.GenericGF;, +	import com.google.zxing.common.reedsolomon.ReedSolomonDecoder;, +	import com.google.zxing.common.reedsolomon.ReedSolomonException;, +, +	/**, +	 * <p>The main class which implements Aztec Code decoding -- as opposed to locating and extracting, +	 * the Aztec Code from an image.</p>, +	 *, +	 * @author David Olivier, +	 */, +	public 	class Decoder , +	{, +, +  private static var UPPER:int = 0;, +  private static var LOWER:int = 1;, +  private static var MIXED:int = 2;, +  private static var DIGIT:int = 3;, +  private static var PUNCT:int = 4;, +  private static var BINARY:int = 5;, +, +  private static var NB_BITS_COMPACT:Array = [0, 104, 240, 408, 608];, +, +  private static  var NB_BITS:Array = [, +      0, 128, 288, 480, 704, 960, 1248, 1568, 1920, 2304, 2720, 3168, 3648, 4160, 4704, 5280, 5888, 6528,, +      7200, 7904, 8640, 9408, 10208, 11040, 11904, 12800, 13728, 14688, 15680, 16704, 17760, 18848, 19968, +  ];, +, +  private static  var NB_DATABLOCK_COMPACT:Array = [, +      0, 17, 40, 51, 76, +  ];, +, +  private static  var NB_DATABLOCK:Array = [, +      0, 21, 48, 60, 88, 120, 156, 196, 240, 230, 272, 316, 364, 416, 470, 528, 588, 652, 720, 790, 864,, +      940, 1020, 920, 992, 1066, 1144, 1224, 1306, 1392, 1480, 1570, 1664, +  ];, +, +  private static  var UPPER_TABLE:Array = [, +      "CTRL_PS", " ", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P",, +      "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "CTRL_LL", "CTRL_ML", "CTRL_DL", "CTRL_BS", +  ];, +, +  private static  var LOWER_TABLE:Array = [, +      "CTRL_PS", " ", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p",, +      "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "CTRL_US", "CTRL_ML", "CTRL_DL", "CTRL_BS", +  ];, +, +  private static var  MIXED_TABLE:Array = [, +      "CTRL_PS", " ", "\1", "\2", "\3", "\4", "\5", "\6", "\7", "\b", "\t", "\n",, +      "\13", "\f", "\r", "\33", "\34", "\35", "\36", "\37", "@", "\\", "^", "_",, +      "`", "|", "~", "\177", "CTRL_LL", "CTRL_UL", "CTRL_PL", "CTRL_BS", +  ];, +, +  private static var PUNCT_TABLE:Array = [, +      "", "\r", "\r\n", ". ", ", ", ": ", "!", "\"", "#", "$", "%", "&", "'", "(", ")",, +      "*", "+", ",", "-", ".", "/", ":", ";", "<", "=", ">", "?", "[", "]", "{", "}", "CTRL_UL", +  ];, +, +  private static var DIGIT_TABLE:Array = [, +    "CTRL_PS", " ", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ",", ".", "CTRL_UL", "CTRL_US", +  ];, +, +  private var numCodewords:int;, +  private var codewordSize:int;, +  private var ddata:AztecDetectorResult;, +  private var invertedBitCount:int;, +, +  public function decode( detectorResult:AztecDetectorResult):DecoderResult {, +    ddata = detectorResult;, +    var matrix:BitMatrix  = detectorResult.getBits();, +, +    if (!ddata.isCompact()) {, +      matrix = removeDashedLines(ddata.getBits());, +    }, +, +    var rawbits:Array = extractBits(matrix);]