[+++ b/core/src/com/google/zxing/pdf417/decoder/DecodedBitStreamParser.java, +            // reinitialize text compaction mode to alpha sub mode, +            textCompactionData[index++] = TEXT_COMPACTION_MODE_LATCH;, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +              subMode = Mode.ALPHA;, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +              subMode = Mode.ALPHA;, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +              subMode = Mode.ALPHA;, +++ b/core/src/com/google/zxing/pdf417/decoder/DecodedBitStreamParser.java, +            // reinitialize text compaction mode to alpha sub mode, +            textCompactionData[index++] = TEXT_COMPACTION_MODE_LATCH;, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +              subMode = Mode.ALPHA;, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +              subMode = Mode.ALPHA;, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +              subMode = Mode.ALPHA;, +++ b/core/test/data/blackbox/pdf417/09.bin, +!��	!E�	5/D?	?�FZ	c'��	mA�	�#F, +++ b/core/src/com/google/zxing/pdf417/decoder/DecodedBitStreamParser.java, +            // reinitialize text compaction mode to alpha sub mode, +            textCompactionData[index++] = TEXT_COMPACTION_MODE_LATCH;, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +              subMode = Mode.ALPHA;, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +              subMode = Mode.ALPHA;, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +              subMode = Mode.ALPHA;, +++ b/core/test/data/blackbox/pdf417/09.bin, +!��	!E�	5/D?	?�FZ	c'��	mA�	�#F, +++ b/core/test/data/blackbox/pdf417/09.png, +++ b/core/src/com/google/zxing/pdf417/decoder/DecodedBitStreamParser.java, +            // reinitialize text compaction mode to alpha sub mode, +            textCompactionData[index++] = TEXT_COMPACTION_MODE_LATCH;, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +              subMode = Mode.ALPHA;, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +              subMode = Mode.ALPHA;, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +              subMode = Mode.ALPHA;, +++ b/core/test/data/blackbox/pdf417/09.bin, +!��	!E�	5/D?	?�FZ	c'��	mA�	�#F, +++ b/core/test/data/blackbox/pdf417/09.png, +++ b/core/test/src/com/google/zxing/common/AbstractBlackBoxTestCase.java, +  private static final Charset UTF8 = Charset.forName("UTF-8");, +  private static final Charset ISO88591 = Charset.forName("ISO-8859-1");, +      String expectedText;, +      if (expectedTextFile.exists()) {, +        expectedText = readFileAsString(expectedTextFile, UTF8);, +      } else {, +        expectedTextFile = new File(testBase, fileBaseName + ".bin");, +        assertTrue(expectedTextFile.exists());, +        expectedText = readFileAsString(expectedTextFile, ISO88591);, +      }, +  private static String readFileAsString(File file, Charset charset) throws IOException {, +    InputStreamReader reader = new InputStreamReader(new FileInputStream(file), charset);, +++ b/core/src/com/google/zxing/pdf417/decoder/DecodedBitStreamParser.java, +            // reinitialize text compaction mode to alpha sub mode, +            textCompactionData[index++] = TEXT_COMPACTION_MODE_LATCH;, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +              subMode = Mode.ALPHA;, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +              subMode = Mode.ALPHA;, +            } else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {, +              subMode = Mode.ALPHA;, +++ b/core/test/data/blackbox/pdf417/09.bin, +!��	!E�	5/D?	?�FZ	c'��	mA�	�#F, +++ b/core/test/data/blackbox/pdf417/09.png, +++ b/core/test/src/com/google/zxing/common/AbstractBlackBoxTestCase.java, +  private static final Charset UTF8 = Charset.forName("UTF-8");, +  private static final Charset ISO88591 = Charset.forName("ISO-8859-1");, +      String expectedText;, +      if (expectedTextFile.exists()) {, +        expectedText = readFileAsString(expectedTextFile, UTF8);, +      } else {, +        expectedTextFile = new File(testBase, fileBaseName + ".bin");, +        assertTrue(expectedTextFile.exists());, +        expectedText = readFileAsString(expectedTextFile, ISO88591);, +      }, +  private static String readFileAsString(File file, Charset charset) throws IOException {, +    InputStreamReader reader = new InputStreamReader(new FileInputStream(file), charset);, +++ b/core/test/src/com/google/zxing/pdf417/PDF417BlackBox1TestCase.java, +    addTest(5, 5, 0.0f);, +    addTest(5, 5, 180.0f);]