[+++ b/core/src/com/google/zxing/common/BitArray.java, +   * Flips bit i., +   *, +   * @param i bit to set, +   */, +  public void flip(int i) {, +    bits[i >> 5] ^= 1 << (i & 0x1F);, +  }, +, +  /**, +++ b/core/src/com/google/zxing/common/BitArray.java, +   * Flips bit i., +   *, +   * @param i bit to set, +   */, +  public void flip(int i) {, +    bits[i >> 5] ^= 1 << (i & 0x1F);, +  }, +, +  /**, +++ b/core/src/com/google/zxing/common/BitMatrix.java, +   * <p>Flips the given bit.</p>, +   *, +   * @param i row offset, +   * @param j column offset, +   */, +  public void flip(int i, int j) {, +    int offset = i + dimension * j;, +    bits[offset >> 5] ^= 1 << (offset & 0x1F);, +  }, +, +  /**, +++ b/core/src/com/google/zxing/common/BitArray.java, +   * Flips bit i., +   *, +   * @param i bit to set, +   */, +  public void flip(int i) {, +    bits[i >> 5] ^= 1 << (i & 0x1F);, +  }, +, +  /**, +++ b/core/src/com/google/zxing/common/BitMatrix.java, +   * <p>Flips the given bit.</p>, +   *, +   * @param i row offset, +   * @param j column offset, +   */, +  public void flip(int i, int j) {, +    int offset = i + dimension * j;, +    bits[offset >> 5] ^= 1 << (offset & 0x1F);, +  }, +, +  /**, +++ b/core/src/com/google/zxing/qrcode/decoder/BitMatrixParser.java, +    dataMask.unmaskBitMatrix(bitMatrix, dimension);, +++ b/core/src/com/google/zxing/common/BitArray.java, +   * Flips bit i., +   *, +   * @param i bit to set, +   */, +  public void flip(int i) {, +    bits[i >> 5] ^= 1 << (i & 0x1F);, +  }, +, +  /**, +++ b/core/src/com/google/zxing/common/BitMatrix.java, +   * <p>Flips the given bit.</p>, +   *, +   * @param i row offset, +   * @param j column offset, +   */, +  public void flip(int i, int j) {, +    int offset = i + dimension * j;, +    bits[offset >> 5] ^= 1 << (offset & 0x1F);, +  }, +, +  /**, +++ b/core/src/com/google/zxing/qrcode/decoder/BitMatrixParser.java, +    dataMask.unmaskBitMatrix(bitMatrix, dimension);, +++ b/core/src/com/google/zxing/qrcode/decoder/DataMask.java, +import com.google.zxing.common.BitMatrix;, +, +   * @param bits representation of QR Code bits, +  final void unmaskBitMatrix(BitMatrix bits, int dimension) {, +    for (int y = 0; y < dimension; y++) {, +      for (int x = 0; x < dimension; x++) {, +        if (isMasked(x, y)) {, +          bits.flip(x, y);, +        }, +      }, +    }, +  }, +, +  abstract boolean isMasked(int x, int y);, +   * 000: mask bits for which (x + y) mod 2 == 0, +    boolean isMasked(int x, int y) {, +      return ((x + y) & 0x01) == 0;, +   * 001: mask bits for which x mod 2 == 0, +    boolean isMasked(int x, int y) {]