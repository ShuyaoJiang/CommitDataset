[+++ b/core/src/com/google/zxing/oned/Code128Reader.java, +import java.util.Vector;, +    Vector rawCodes = new Vector(20);, +, +      rawCodes.addElement(new Byte((byte) code));, +, +, +    int rawCodesSize = rawCodes.size();, +    byte[] rawBytes = new byte[rawCodesSize];, +    for (int i = 0; i < rawCodesSize; i++) {, +      rawBytes[i] = ((Byte) rawCodes.elementAt(i)).byteValue();, +    }, +, +        rawBytes,, +++ b/core/src/com/google/zxing/oned/Code128Reader.java, +import java.util.Vector;, +    Vector rawCodes = new Vector(20);, +, +      rawCodes.addElement(new Byte((byte) code));, +, +, +    int rawCodesSize = rawCodes.size();, +    byte[] rawBytes = new byte[rawCodesSize];, +    for (int i = 0; i < rawCodesSize; i++) {, +      rawBytes[i] = ((Byte) rawCodes.elementAt(i)).byteValue();, +    }, +, +        rawBytes,, +++ b/core/src/com/google/zxing/oned/Code128Writer.java, +  // Dummy characters used to specify control characters in input, +  private static final char ESCAPE_FNC_1 = 'ñ'; // 0xF1, +  private static final char ESCAPE_FNC_2 = 'ò'; // 0xF2, +  private static final char ESCAPE_FNC_3 = 'ó'; // 0xF3, +  private static final char ESCAPE_FNC_4 = 'ô'; // 0xF4, +, +  private static final int CODE_FNC_1 = 102;   // Code A, Code B, Code C, +  private static final int CODE_FNC_2 = 97;    // Code A, Code B, +  private static final int CODE_FNC_3 = 96;    // Code A, Code B, +  private static final int CODE_FNC_4_B = 100; // Code B, +, +        switch (c) {, +          case ESCAPE_FNC_1:, +          case ESCAPE_FNC_2:, +          case ESCAPE_FNC_3:, +          case ESCAPE_FNC_4:, +            break;, +          default:, +            throw new IllegalArgumentException("Bad character in input: " + c);, +        }, +      if (isDigits(contents, position, requiredDigitCount)) {, +          switch (contents.charAt(position)) {, +            case ESCAPE_FNC_1:, +              patternIndex = CODE_FNC_1;, +              position++;, +              break;, +            case ESCAPE_FNC_2:, +              patternIndex = CODE_FNC_2;, +              position++;, +              break;, +            case ESCAPE_FNC_3:, +              patternIndex = CODE_FNC_3;, +              position++;, +              break;, +            case ESCAPE_FNC_4:, +              patternIndex = CODE_FNC_4_B; // FIXME if this ever outputs Code A, +              position++;, +              break;, +            default:, +              break;, +          }, +    int last = value.length();, +    for (int i = start; i < end && i < last; i++) {, +        if (c != ESCAPE_FNC_1) {, +        end++; // ignore FNC_1, +    }, +    return end <= last; // end > last if we've run out of string]