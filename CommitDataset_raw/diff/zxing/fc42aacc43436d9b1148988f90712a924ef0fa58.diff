[+++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +import com.google.zxing.DecodeHintType;, +  private Map<DecodeHintType,?> decodeHints;, +        decodeHints = DecodeHintManager.parseDecodeHints(intent);, +        // Allow a sub-set of the hints to be specified by the caller., +        decodeHints = DecodeHintManager.parseDecodeHints(inputUri);, +        handler = new CaptureActivityHandler(this, decodeFormats, decodeHints, characterSet, cameraManager);, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +import com.google.zxing.DecodeHintType;, +  private Map<DecodeHintType,?> decodeHints;, +        decodeHints = DecodeHintManager.parseDecodeHints(intent);, +        // Allow a sub-set of the hints to be specified by the caller., +        decodeHints = DecodeHintManager.parseDecodeHints(inputUri);, +        handler = new CaptureActivityHandler(this, decodeFormats, decodeHints, characterSet, cameraManager);, +++ b/android/src/com/google/zxing/client/android/CaptureActivityHandler.java, +import com.google.zxing.DecodeHintType;, +import java.util.Map;, +                         Map<DecodeHintType,?> baseHints,, +    decodeThread = new DecodeThread(activity, decodeFormats, baseHints, characterSet,, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +import com.google.zxing.DecodeHintType;, +  private Map<DecodeHintType,?> decodeHints;, +        decodeHints = DecodeHintManager.parseDecodeHints(intent);, +        // Allow a sub-set of the hints to be specified by the caller., +        decodeHints = DecodeHintManager.parseDecodeHints(inputUri);, +        handler = new CaptureActivityHandler(this, decodeFormats, decodeHints, characterSet, cameraManager);, +++ b/android/src/com/google/zxing/client/android/CaptureActivityHandler.java, +import com.google.zxing.DecodeHintType;, +import java.util.Map;, +                         Map<DecodeHintType,?> baseHints,, +    decodeThread = new DecodeThread(activity, decodeFormats, baseHints, characterSet,, +++ b/android/src/com/google/zxing/client/android/DecodeHintManager.java, +/*, + * Copyright (C) 2013 ZXing authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.zxing.client.android;, +, +import java.util.EnumMap;, +import java.util.HashMap;, +import java.util.Map;, +import java.util.regex.Pattern;, +, +import android.content.Intent;, +import android.net.Uri;, +import android.os.Bundle;, +import android.util.Log;, +, +import com.google.zxing.DecodeHintType;, +, +/**, + * @author Lachezar Dobrev, + */, +final class DecodeHintManager {, +  , +  private static final String TAG = DecodeHintManager.class.getSimpleName();, +, +  // This pattern is used in decoding integer arrays., +  private static final Pattern COMMA = Pattern.compile(",");, +, +  private DecodeHintManager() {}, +, +  /**, +   * <p>Split a query string into a list of name-value pairs.</p>, +   * , +   * <p>This is an alternative to the {@link Uri#getQueryParameterNames()} and, +   * {@link Uri#getQueryParameters(String)}, which are quirky and not suitable, +   * for exist-only Uri parameters.</p>, +   * , +   * <p>This method ignores multiple parameters with the same name and returns the, +   * first one only. This is technically incorrect, but should be acceptable due, +   * to the method of processing Hints: no multiple values for a hint.</p>, +   * , +   * @param query query to split, +   * @return name-value pairs, +   */, +  private static Map<String,String> splitQuery(String query) {, +    Map<String,String> map = new HashMap<String,String>();, +    int pos = 0;, +    while (pos < query.length()) {, +      if (query.charAt(pos) == '&') {, +        // Skip consecutive ampersand separators., +        pos ++;, +        continue;, +      }, +      int amp = query.indexOf('&', pos);, +      int equ = query.indexOf('=', pos);, +      if (amp < 0) {]