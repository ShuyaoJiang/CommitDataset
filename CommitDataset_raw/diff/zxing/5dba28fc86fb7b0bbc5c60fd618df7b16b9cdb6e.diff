[+++ b/core/src/com/google/zxing/qrcode/encoder/BitVector.java, + * JAVAPORT: This should be combined with BitArray in the future, although that class is not yet, + * dynamically resizeable. This implementation is reasonable but there is a lot of function calling, + * in loops I'd like to get rid of., + *, +  private int sizeInBits;, +  private int bytePosition;, +  private byte[] array;, +, +  // For efficiency, start out with some room to work., +  private static final int DEFAULT_SIZE_IN_BITS = 32 * 8;, +    sizeInBits = DEFAULT_SIZE_IN_BITS;, +    bytePosition = 0;, +    array = new byte[DEFAULT_SIZE_IN_BITS / 8];, +    Debug.DCHECK_LT(index, sizeInBits);, +    final int value = array[index / 8];, +    return (value >> (7 - (index % 8))) & 1;, +    return sizeInBits;, +    return sizeInBits / 8;, +    final int num_bits_in_last_byte = sizeInBits % 8;, +    // We'll expand array if we don't have bits in the last byte., +      appendByte(0);, +    array[array.length - 1] |= (bit << (7 - num_bits_in_last_byte));, +    ++sizeInBits;, +  public void AppendBits(final int value, final int num_bits) {, +      if (sizeInBits % 8 == 0 && num_bits_left >= 8) {, +        final int newByte = (value >> (num_bits_left - 8)) & 0xff;, +        appendByte(newByte);, +        sizeInBits += 8;, +  //, +  // JAVAPORT: Uncomment and implement when a substitute for StringPiece is chosen., +//  public void AppendBytes(final StringPiece stringPiece) {, +//    for (int i = 0; i < stringPiece.size(); ++i) {, +//      AppendBits(stringPiece[i], 8);, +//    }, +//  }, +  public void AppendBitVector(final BitVector bits) {, +    int size = bits.size();, +    for (int i = 0; i < size; ++i) {, +  public void XOR(final BitVector other) {, +    Debug.DCHECK_EQ(sizeInBits, other.size());, +    for (int i = 0; i < array.length; ++i) {, +      array[i] ^= other.array[i];, +  public String toString() {, +    StringBuffer result = new StringBuffer(sizeInBits);, +    for (int i = 0; i < sizeInBits; ++i) {, +    return result.toString();, +  }, +, +  // Add a new byte to the end, possibly reallocating and doubling the size of the array if we've, +  // run out of room., +  private void appendByte(int value) {, +    if (bytePosition >= array.length) {, +      byte[] newArray = new byte[array.length * 2];, +      System.arraycopy(array, 0, newArray, 0, array.length);, +      array = newArray;, +    }, +    array[bytePosition] = (byte) value;, +    bytePosition++;]