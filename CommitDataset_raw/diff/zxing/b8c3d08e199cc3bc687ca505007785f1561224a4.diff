[+++ b/core/src/main/java/com/google/zxing/oned/UPCEReader.java, +, +  /**, +   * The pattern that marks the middle, and end, of a UPC-E pattern., +   * There is no "second half" to a UPC-E barcode., +   */, +  private static final int[] MIDDLE_END_PATTERN = {1, 1, 1, 1, 1, 1};, +, +  static final int[][] NUMSYS_AND_CHECK_DIGIT_PATTERNS = {, +++ b/core/src/main/java/com/google/zxing/oned/UPCEReader.java, +, +  /**, +   * The pattern that marks the middle, and end, of a UPC-E pattern., +   * There is no "second half" to a UPC-E barcode., +   */, +  private static final int[] MIDDLE_END_PATTERN = {1, 1, 1, 1, 1, 1};, +, +  static final int[][] NUMSYS_AND_CHECK_DIGIT_PATTERNS = {, +++ b/core/src/main/java/com/google/zxing/oned/UPCEWriter.java, +  public static void main(String[] args) throws Exception {, +    BitMatrix bm = new UPCEWriter().encode("12345670", BarcodeFormat.UPC_E, 200, 100, null);, +    System.out.println(bm);, +  }, +, +    int parities = UPCEReader.NUMSYS_AND_CHECK_DIGIT_PATTERNS[firstDigit][checkDigit];, +++ b/core/src/main/java/com/google/zxing/oned/UPCEReader.java, +, +  /**, +   * The pattern that marks the middle, and end, of a UPC-E pattern., +   * There is no "second half" to a UPC-E barcode., +   */, +  private static final int[] MIDDLE_END_PATTERN = {1, 1, 1, 1, 1, 1};, +, +  static final int[][] NUMSYS_AND_CHECK_DIGIT_PATTERNS = {, +++ b/core/src/main/java/com/google/zxing/oned/UPCEWriter.java, +  public static void main(String[] args) throws Exception {, +    BitMatrix bm = new UPCEWriter().encode("12345670", BarcodeFormat.UPC_E, 200, 100, null);, +    System.out.println(bm);, +  }, +, +    int parities = UPCEReader.NUMSYS_AND_CHECK_DIGIT_PATTERNS[firstDigit][checkDigit];, +++ b/core/src/test/java/com/google/zxing/oned/UPCEWriterTestCase.java, +    doTest("05096893",, +           "0000000000010101110010100111000101101011110110111001011101010100000000000");, +  }, +, +  @Test, +  public void testEncodeSystem1() throws WriterException {, +    doTest("12345670",, +           "0000000000010100100110111101010001101110010000101001000101010100000000000");, +    doTest("0509689",, +           "0000000000010101110010100111000101101011110110111001011101010100000000000");, +  }, +, +  private static void doTest(String content, String encoding) throws WriterException {, +    BitMatrix result = new UPCEWriter().encode(content, BarcodeFormat.UPC_E, encoding.length(), 0);, +    assertEquals(encoding, BitMatrixTestCase.matrixToString(result));]