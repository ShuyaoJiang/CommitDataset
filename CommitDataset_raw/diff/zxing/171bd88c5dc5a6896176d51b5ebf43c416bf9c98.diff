[+++ b/core/src/com/google/zxing/DecodeHintType.java, +   * Specifies what character encoding to use when decoding, where applicable (type String), +   */, +  public static final DecodeHintType CHARACTER_SET = new DecodeHintType();, +, +  /**, +++ b/core/src/com/google/zxing/DecodeHintType.java, +   * Specifies what character encoding to use when decoding, where applicable (type String), +   */, +  public static final DecodeHintType CHARACTER_SET = new DecodeHintType();, +, +  /**, +++ b/core/src/com/google/zxing/qrcode/QRCodeReader.java, +      decoderResult = decoder.decode(bits, hints);, +      decoderResult = decoder.decode(detectorResult.getBits(), hints);, +  public void reset() {, +    // do nothing, +  }, +, +++ b/core/src/com/google/zxing/DecodeHintType.java, +   * Specifies what character encoding to use when decoding, where applicable (type String), +   */, +  public static final DecodeHintType CHARACTER_SET = new DecodeHintType();, +, +  /**, +++ b/core/src/com/google/zxing/qrcode/QRCodeReader.java, +      decoderResult = decoder.decode(bits, hints);, +      decoderResult = decoder.decode(detectorResult.getBits(), hints);, +  public void reset() {, +    // do nothing, +  }, +, +++ b/core/src/com/google/zxing/qrcode/decoder/DecodedBitStreamParser.java, +import com.google.zxing.DecodeHintType;, +import java.util.Hashtable;, +  static DecoderResult decode(byte[] bytes, Version version, ErrorCorrectionLevel ecLevel, Hashtable hints), +      throws ReaderException {, +            decodeByteSegment(bits, result, count, currentCharacterSetECI, byteSegments, hints);, +                                        Vector byteSegments,, +                                        Hashtable hints) throws ReaderException {, +      encoding = guessEncoding(readBytes, hints);, +  private static String guessEncoding(byte[] bytes, Hashtable hints) {, +    if (hints != null) {, +      String characterSet = (String) hints.get(DecodeHintType.CHARACTER_SET);, +      if (characterSet != null) {, +        return characterSet;, +      }, +    }, +++ b/core/src/com/google/zxing/DecodeHintType.java, +   * Specifies what character encoding to use when decoding, where applicable (type String), +   */, +  public static final DecodeHintType CHARACTER_SET = new DecodeHintType();, +, +  /**, +++ b/core/src/com/google/zxing/qrcode/QRCodeReader.java, +      decoderResult = decoder.decode(bits, hints);, +      decoderResult = decoder.decode(detectorResult.getBits(), hints);, +  public void reset() {, +    // do nothing, +  }, +, +++ b/core/src/com/google/zxing/qrcode/decoder/DecodedBitStreamParser.java, +import com.google.zxing.DecodeHintType;, +import java.util.Hashtable;, +  static DecoderResult decode(byte[] bytes, Version version, ErrorCorrectionLevel ecLevel, Hashtable hints), +      throws ReaderException {, +            decodeByteSegment(bits, result, count, currentCharacterSetECI, byteSegments, hints);, +                                        Vector byteSegments,, +                                        Hashtable hints) throws ReaderException {, +      encoding = guessEncoding(readBytes, hints);, +  private static String guessEncoding(byte[] bytes, Hashtable hints) {, +    if (hints != null) {, +      String characterSet = (String) hints.get(DecodeHintType.CHARACTER_SET);, +      if (characterSet != null) {, +        return characterSet;, +      }, +    }, +++ b/core/src/com/google/zxing/qrcode/decoder/Decoder.java, +import java.util.Hashtable;, +, +  public DecoderResult decode(boolean[][] image) throws ReaderException {, +    return decode(image, null);, +  }, +, +  public DecoderResult decode(boolean[][] image, Hashtable hints) throws ReaderException {, +    return decode(bits, hints);, +  }, +, +  public DecoderResult decode(BitMatrix bits) throws ReaderException {, +    return decode(bits, null);, +  public DecoderResult decode(BitMatrix bits, Hashtable hints) throws ReaderException {, +    return DecodedBitStreamParser.decode(resultBytes, version, ecLevel, hints);]