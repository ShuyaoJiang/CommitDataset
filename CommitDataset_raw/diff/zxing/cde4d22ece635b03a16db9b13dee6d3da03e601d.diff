[+++ b/core/src/com/google/zxing/common/reedsolomon/GF256.java, + * the Galois Field GF(256). Operations use a given primitive polynomial in calculations.</p>, +public final class GF256 {, +  public static final GF256 QR_CODE_FIELD = new GF256(0x011D); // x^8 + x^4 + x^3 + x^2 + 1, +  public static final GF256 DATA_MATRIX_FIELD = new GF256(0x012D); // x^8 + x^5 + x^3 + x^2 + 1, +  private final int[] exp;, +  private final int[] log;, +  private final GF256Poly zero;, +  private final GF256Poly one;, +, +  /**, +   * Create a representation of GF(256) using the given primitive polynomial., +   *, +   * @param primitive irreducible polynomial whose coefficients are represented by, +   *  the bits of an int, where the least-significant bit represents the constant, +   *  coefficient, +   */, +  private GF256(int primitive) {, +    exp = new int[256];, +    log = new int[256];, +        x ^= primitive;, +    zero = new GF256Poly(this, new int[]{0});, +    one = new GF256Poly(this, new int[]{1});, +  GF256Poly getZero() {, +    return zero;, +  }, +, +  GF256Poly getOne() {, +    return one;, +  }, +, +  /**, +   * @return the monomial representing coefficient * x^degree, +   */, +  GF256Poly buildMonomial(int degree, int coefficient) {, +    if (degree < 0) {, +      throw new IllegalArgumentException();, +    }, +    if (coefficient == 0) {, +      return zero;, +    }, +    int[] coefficients = new int[degree + 1];, +    coefficients[0] = coefficient;, +    return new GF256Poly(this, coefficients);, +  int addOrSubtract(int a, int b) {, +  int exp(int a) {, +  int log(int a) {, +  int inverse(int a) {, +  int multiply(int a, int b) {, +++ b/core/src/com/google/zxing/common/reedsolomon/GF256.java, + * the Galois Field GF(256). Operations use a given primitive polynomial in calculations.</p>, +public final class GF256 {, +  public static final GF256 QR_CODE_FIELD = new GF256(0x011D); // x^8 + x^4 + x^3 + x^2 + 1, +  public static final GF256 DATA_MATRIX_FIELD = new GF256(0x012D); // x^8 + x^5 + x^3 + x^2 + 1, +  private final int[] exp;, +  private final int[] log;, +  private final GF256Poly zero;, +  private final GF256Poly one;, +, +  /**, +   * Create a representation of GF(256) using the given primitive polynomial., +   *, +   * @param primitive irreducible polynomial whose coefficients are represented by, +   *  the bits of an int, where the least-significant bit represents the constant, +   *  coefficient, +   */, +  private GF256(int primitive) {, +    exp = new int[256];, +    log = new int[256];, +        x ^= primitive;, +    zero = new GF256Poly(this, new int[]{0});, +    one = new GF256Poly(this, new int[]{1});, +  GF256Poly getZero() {, +    return zero;, +  }, +, +  GF256Poly getOne() {, +    return one;, +  }, +, +  /**, +   * @return the monomial representing coefficient * x^degree, +   */, +  GF256Poly buildMonomial(int degree, int coefficient) {, +    if (degree < 0) {, +      throw new IllegalArgumentException();, +    }, +    if (coefficient == 0) {, +      return zero;, +    }, +    int[] coefficients = new int[degree + 1];, +    coefficients[0] = coefficient;, +    return new GF256Poly(this, coefficients);, +  int addOrSubtract(int a, int b) {, +  int exp(int a) {, +  int log(int a) {, +  int inverse(int a) {, +  int multiply(int a, int b) {, +++ b/core/src/com/google/zxing/common/reedsolomon/GF256Poly.java, +  private final GF256 field;]