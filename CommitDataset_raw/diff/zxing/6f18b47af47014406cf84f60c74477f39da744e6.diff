[+++ b/core/src/com/google/zxing/aztec/detector/Detector.java, + * Encapsulates logic that can detect an Aztec Code in an image, even if the Aztec Code, + * is rotated or skewed, or partially obscured., +   * Detects an Aztec Code in an image., +   * Extracts the number of data layers and data blocks from the layer around the bull's eye., +  private void extractParameters(Point[] bullEyeCornerPoints) throws NotFoundException {, +, +    int twoCenterLayers = 2 * nbCenterLayers;, +    boolean[] resab = sampleLine(bullEyeCornerPoints[0], bullEyeCornerPoints[1], twoCenterLayers+1);, +    boolean[] resbc = sampleLine(bullEyeCornerPoints[1], bullEyeCornerPoints[2], twoCenterLayers+1);, +    boolean[] rescd = sampleLine(bullEyeCornerPoints[2], bullEyeCornerPoints[3], twoCenterLayers+1);, +    boolean[] resda = sampleLine(bullEyeCornerPoints[3], bullEyeCornerPoints[0], twoCenterLayers+1);, +    if (resab[0] && resab[twoCenterLayers]) {, +    } else if (resbc[0] && resbc[twoCenterLayers]) {, +    } else if (rescd[0] && rescd[twoCenterLayers]) {, +    } else if (resda[0] && resda[twoCenterLayers]) {, +          shiftedParameterData[i+9] = resbc[2+i];, +          shiftedParameterData[i+19] = rescd[2+i];, +          shiftedParameterData[i+29] = resda[2+i];, +   * Gets the Aztec code corners from the bull's eye corners and the parameters., +    if (!isValid(targetax, targetay) ||, +        !isValid(targetbx, targetby) ||, +        !isValid(targetcx, targetcy) ||, +        !isValid(targetdx, targetdy)) {, +    return new ResultPoint[]{, +        new ResultPoint(targetax, targetay),, +        new ResultPoint(targetbx, targetby),, +        new ResultPoint(targetcx, targetcy),, +        new ResultPoint(targetdx, targetdy), +    };, +   * Corrects the parameter bits using Reed-Solomon algorithm., +   * @param parameterData parameter bits, +   * Finds the corners of a bull-eye centered on the passed point., +    if (!isValid(targetax, targetay) ||, +        !isValid(targetbx, targetby) ||, +        !isValid(targetcx, targetcy) ||, +        !isValid(targetdx, targetdy)) {, +    return new Point[] {, +        new Point(targetax,targetay),, +        new Point(targetbx,targetby),, +        new Point(targetcx,targetcy),, +        new Point(targetdx,targetdy), +    };, +      pointA = getFirstDifferent(new Point(cx+7, cy-7), false, 1, -1).toResultPoint();, +      pointB = getFirstDifferent(new Point(cx+7, cy+7), false, 1, 1).toResultPoint();, +      pointC = getFirstDifferent(new Point(cx-7, cy+7), false, -1, 1).toResultPoint();, +      pointD = getFirstDifferent(new Point(cx-7, cy-7), false, -1, -1).toResultPoint();, +    int cx = MathUtils.round((pointA.getX() + pointD.getX() + pointB.getX() + pointC.getX()) / 4.0f);, +    int cy = MathUtils.round((pointA.getY() + pointD.getY() + pointB.getY() + pointC.getY()) / 4.0f);, +      pointA = getFirstDifferent(new Point(cx+7, cy-7), false, 1, -1).toResultPoint();, +      pointB = getFirstDifferent(new Point(cx+7, cy+7), false, 1, 1).toResultPoint();, +      pointC = getFirstDifferent(new Point(cx-7, cy+7), false, -1, 1).toResultPoint();, +      pointD = getFirstDifferent(new Point(cx-7, cy-7), false, -1, -1).toResultPoint();, +    cx = MathUtils.round((pointA.getX() + pointD.getX() + pointB.getX() + pointC.getX()) / 4.0f);, +    cy = MathUtils.round((pointA.getY() + pointD.getY() + pointB.getY() + pointC.getY()) / 4.0f);, +        nbLayers++;, +        nbDataBlocks++;, +    if (errRatio > 0.1f && errRatio < 0.9f) {, +    return (errRatio <= 0.1f) == colorModel ? 1 : -1;, +  static final class Point {, +    final int x;, +    final int y;, +, +    ResultPoint toResultPoint() {, +      return new ResultPoint(x, y);, +    }, +, +    Point(int x, int y) {, +      this.x = x;, +      this.y = y;, +    }, +  }, +, +++ b/core/src/com/google/zxing/aztec/detector/Detector.java, + * Encapsulates logic that can detect an Aztec Code in an image, even if the Aztec Code, + * is rotated or skewed, or partially obscured., +   * Detects an Aztec Code in an image., +   * Extracts the number of data layers and data blocks from the layer around the bull's eye., +  private void extractParameters(Point[] bullEyeCornerPoints) throws NotFoundException {, +, +    int twoCenterLayers = 2 * nbCenterLayers;, +    boolean[] resab = sampleLine(bullEyeCornerPoints[0], bullEyeCornerPoints[1], twoCenterLayers+1);, +    boolean[] resbc = sampleLine(bullEyeCornerPoints[1], bullEyeCornerPoints[2], twoCenterLayers+1);, +    boolean[] rescd = sampleLine(bullEyeCornerPoints[2], bullEyeCornerPoints[3], twoCenterLayers+1);, +    boolean[] resda = sampleLine(bullEyeCornerPoints[3], bullEyeCornerPoints[0], twoCenterLayers+1);, +    if (resab[0] && resab[twoCenterLayers]) {, +    } else if (resbc[0] && resbc[twoCenterLayers]) {, +    } else if (rescd[0] && rescd[twoCenterLayers]) {, +    } else if (resda[0] && resda[twoCenterLayers]) {, +          shiftedParameterData[i+9] = resbc[2+i];, +          shiftedParameterData[i+19] = rescd[2+i];, +          shiftedParameterData[i+29] = resda[2+i];, +   * Gets the Aztec code corners from the bull's eye corners and the parameters., +    if (!isValid(targetax, targetay) ||, +        !isValid(targetbx, targetby) ||, +        !isValid(targetcx, targetcy) ||, +        !isValid(targetdx, targetdy)) {, +    return new ResultPoint[]{, +        new ResultPoint(targetax, targetay),, +        new ResultPoint(targetbx, targetby),]