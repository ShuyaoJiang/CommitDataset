[+++ b/android/src/com/google/zxing/client/android/encode/QRCodeEncoder.java, +import com.google.zxing.common.BitMatrix;, +  private static final int WHITE = 0xFFFFFFFF;, +, +        BitMatrix result = new MultiFormatWriter().encode(contents, format,, +        // All are 0, or black, by default, +          int offset = y * width;, +            if (!result.get(x, y)) {, +              pixels[offset + x] = WHITE;, +            }, +++ b/android/src/com/google/zxing/client/android/encode/QRCodeEncoder.java, +import com.google.zxing.common.BitMatrix;, +  private static final int WHITE = 0xFFFFFFFF;, +, +        BitMatrix result = new MultiFormatWriter().encode(contents, format,, +        // All are 0, or black, by default, +          int offset = y * width;, +            if (!result.get(x, y)) {, +              pixels[offset + x] = WHITE;, +            }, +++ b/core/src/com/google/zxing/MultiFormatWriter.java, +import com.google.zxing.common.BitMatrix;, +  public BitMatrix encode(String contents, BarcodeFormat format, int width,, +  public BitMatrix encode(String contents, BarcodeFormat format, int width, int height,, +++ b/android/src/com/google/zxing/client/android/encode/QRCodeEncoder.java, +import com.google.zxing.common.BitMatrix;, +  private static final int WHITE = 0xFFFFFFFF;, +, +        BitMatrix result = new MultiFormatWriter().encode(contents, format,, +        // All are 0, or black, by default, +          int offset = y * width;, +            if (!result.get(x, y)) {, +              pixels[offset + x] = WHITE;, +            }, +++ b/core/src/com/google/zxing/MultiFormatWriter.java, +import com.google.zxing.common.BitMatrix;, +  public BitMatrix encode(String contents, BarcodeFormat format, int width,, +  public BitMatrix encode(String contents, BarcodeFormat format, int width, int height,, +++ b/core/src/com/google/zxing/Writer.java, +import com.google.zxing.common.BitMatrix;, +  BitMatrix encode(String contents, BarcodeFormat format, int width, int height), +  BitMatrix encode(String contents, BarcodeFormat format, int width, int height, Hashtable hints), +++ b/android/src/com/google/zxing/client/android/encode/QRCodeEncoder.java, +import com.google.zxing.common.BitMatrix;, +  private static final int WHITE = 0xFFFFFFFF;, +, +        BitMatrix result = new MultiFormatWriter().encode(contents, format,, +        // All are 0, or black, by default, +          int offset = y * width;, +            if (!result.get(x, y)) {, +              pixels[offset + x] = WHITE;, +            }, +++ b/core/src/com/google/zxing/MultiFormatWriter.java, +import com.google.zxing.common.BitMatrix;, +  public BitMatrix encode(String contents, BarcodeFormat format, int width,, +  public BitMatrix encode(String contents, BarcodeFormat format, int width, int height,, +++ b/core/src/com/google/zxing/Writer.java, +import com.google.zxing.common.BitMatrix;, +  BitMatrix encode(String contents, BarcodeFormat format, int width, int height), +  BitMatrix encode(String contents, BarcodeFormat format, int width, int height, Hashtable hints), +++ b/core/src/com/google/zxing/common/BitArray.java, +  public int size;, +, +  public BitArray() {, +    this.size = 0;, +    this.bits = new int[1];, +  }, +  public int getSizeInBytes() {, +    return (size + 7) >> 3;, +  }, +, +  private void ensureCapacity(int size) {, +    if (size > bits.length << 5) {, +      int[] newBits = makeArray(size);, +      System.arraycopy(bits, 0, newBits, 0, bits.length);, +      this.bits = newBits;, +    }, +  }, +, +  public void appendBit(boolean bit) {, +    ensureCapacity(size + 1);, +    if (bit) {, +      bits[size >> 5] |= (1 << (size & 0x1F));, +    }, +    size++;, +  }, +, +  /**, +   * Appends the least-significant bits, from value, in order from most-significant to, +   * least-significant. For example, appending 6 bits from 0x000001E will append the bits, +   * 0, 1, 1, 1, 1, 0 in that order., +   */, +  public void appendBits(int value, int numBits) {, +    if (numBits < 0 || numBits > 32) {, +      throw new IllegalArgumentException("Num bits must be between 0 and 32");, +    }, +    ensureCapacity(size + numBits);, +    for (int numBitsLeft = numBits; numBitsLeft > 0; numBitsLeft--) {, +      appendBit(((value >> (numBitsLeft - 1)) & 0x01) == 1);, +    }]