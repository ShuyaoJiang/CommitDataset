[+++ b/core/test/src/com/google/zxing/AllPositiveBlackBoxTester.java, +import java.util.logging.Logger;, +, +  private static final Logger log = Logger.getLogger(AllPositiveBlackBoxTester.class.getSimpleName());, +, +    System.setProperty("java.util.logging.SimpleFormatter.format", "%4$s: %5$s%6$s%n");, +    long start = System.currentTimeMillis();, +    log.info(results.toString());, +    log.info(String.format("Total time: %d ms", System.currentTimeMillis() - start));, +++ b/core/test/src/com/google/zxing/AllPositiveBlackBoxTester.java, +import java.util.logging.Logger;, +, +  private static final Logger log = Logger.getLogger(AllPositiveBlackBoxTester.class.getSimpleName());, +, +    System.setProperty("java.util.logging.SimpleFormatter.format", "%4$s: %5$s%6$s%n");, +    long start = System.currentTimeMillis();, +    log.info(results.toString());, +    log.info(String.format("Total time: %d ms", System.currentTimeMillis() - start));, +++ b/core/test/src/com/google/zxing/common/AbstractBlackBoxTestCase.java, +import java.util.logging.Logger;, +  private static final Logger log = Logger.getLogger(AbstractBlackBoxTestCase.class.getSimpleName());, +, +, +    System.setProperty("java.util.logging.SimpleFormatter.format", "%4$s: %5$s%6$s%n");, +      log.info(String.format("Starting %s", testImage.getAbsolutePath()));, +          log.fine(String.format("could not read at rotation %f", rotation));, +          log.fine(String.format("could not read at rotation %f w/TH", rotation));, +      log.info(String.format("Rotation %d degrees:", (int) testResult.getRotation()));, +      log.info(String.format(" %d of %d images passed (%d required)",, +                             passedCounts[x], imageFiles.length, testResult.getMustPassCount()));, +      log.info(String.format(" %d failed due to misreads, %d not detected",, +                             misreadCounts[x], failed - misreadCounts[x]));, +      log.info(String.format(" %d of %d images passed with try harder (%d required)",, +                             tryHarderCounts[x], imageFiles.length, testResult.getTryHarderCount()));, +      log.info(String.format(" %d failed due to misreads, %d not detected",, +                             tryHaderMisreadCounts[x], failed - tryHaderMisreadCounts[x]));, +    log.info(String.format("Decoded %d images out of %d (%d%%, %d required)",, +                           totalFound, totalTests, totalFound * 100 / totalTests, totalMustPass));, +      log.warning(String.format("+++ Test too lax by %d images", totalFound - totalMustPass));, +      log.warning(String.format("--- Test failed by %d images", totalMustPass - totalFound));, +      log.warning(String.format("+++ Test expects too many misreads by %d images", totalMaxMisread - totalMisread));, +      log.warning(String.format("--- Test had too many misreads by %d images", totalMisread - totalMaxMisread));, +      log.info(String.format("Format mismatch: expected '%s' but got '%s'%s",, +                             expectedFormat, result.getBarcodeFormat(), suffix));, +      log.info(String.format("Content mismatch: expected '%s' but got '%s'%s",, +                             expectedText, resultText, suffix));, +        log.info(String.format("Metadata mismatch for key '%s': expected '%s' but got '%s'",, +                               key, expectedValue, actualValue));, +++ b/core/test/src/com/google/zxing/AllPositiveBlackBoxTester.java, +import java.util.logging.Logger;, +, +  private static final Logger log = Logger.getLogger(AllPositiveBlackBoxTester.class.getSimpleName());, +, +    System.setProperty("java.util.logging.SimpleFormatter.format", "%4$s: %5$s%6$s%n");, +    long start = System.currentTimeMillis();, +    log.info(results.toString());, +    log.info(String.format("Total time: %d ms", System.currentTimeMillis() - start));, +++ b/core/test/src/com/google/zxing/common/AbstractBlackBoxTestCase.java, +import java.util.logging.Logger;, +  private static final Logger log = Logger.getLogger(AbstractBlackBoxTestCase.class.getSimpleName());, +, +, +    System.setProperty("java.util.logging.SimpleFormatter.format", "%4$s: %5$s%6$s%n");, +      log.info(String.format("Starting %s", testImage.getAbsolutePath()));, +          log.fine(String.format("could not read at rotation %f", rotation));, +          log.fine(String.format("could not read at rotation %f w/TH", rotation));, +      log.info(String.format("Rotation %d degrees:", (int) testResult.getRotation()));, +      log.info(String.format(" %d of %d images passed (%d required)",, +                             passedCounts[x], imageFiles.length, testResult.getMustPassCount()));, +      log.info(String.format(" %d failed due to misreads, %d not detected",, +                             misreadCounts[x], failed - misreadCounts[x]));, +      log.info(String.format(" %d of %d images passed with try harder (%d required)",, +                             tryHarderCounts[x], imageFiles.length, testResult.getTryHarderCount()));, +      log.info(String.format(" %d failed due to misreads, %d not detected",, +                             tryHaderMisreadCounts[x], failed - tryHaderMisreadCounts[x]));, +    log.info(String.format("Decoded %d images out of %d (%d%%, %d required)",, +                           totalFound, totalTests, totalFound * 100 / totalTests, totalMustPass));, +      log.warning(String.format("+++ Test too lax by %d images", totalFound - totalMustPass));, +      log.warning(String.format("--- Test failed by %d images", totalMustPass - totalFound));, +      log.warning(String.format("+++ Test expects too many misreads by %d images", totalMaxMisread - totalMisread));, +      log.warning(String.format("--- Test had too many misreads by %d images", totalMisread - totalMaxMisread));, +      log.info(String.format("Format mismatch: expected '%s' but got '%s'%s",, +                             expectedFormat, result.getBarcodeFormat(), suffix));, +      log.info(String.format("Content mismatch: expected '%s' but got '%s'%s",, +                             expectedText, resultText, suffix));, +        log.info(String.format("Metadata mismatch for key '%s': expected '%s' but got '%s'",, +                               key, expectedValue, actualValue));, +++ b/core/test/src/com/google/zxing/common/AbstractNegativeBlackBoxTestCase.java, +import java.util.logging.Logger;, +  private static final Logger log = Logger.getLogger(AbstractNegativeBlackBoxTestCase.class.getSimpleName());, +, +      log.info(String.format("Starting %s", testImage.getAbsolutePath()));, +      log.warning(String.format("+++ Test too lax by %d images", totalAllowed - totalFalsePositives));, +      log.warning(String.format("--- Test failed by %d images", totalFalsePositives - totalAllowed));, +      log.info(String.format("Rotation %d degrees: %d of %d images were false positives (%d allowed)",, +                             testResult.getFalsePositivesAllowed()));, +      log.info(String.format("Found false positive: '%s' with format '%s' (rotation: %d)",, +                              result.getText(), result.getBarcodeFormat(), (int) rotationInDegrees));, +      // continue, +      log.info(String.format("Try harder found false positive: '%s' with format '%s' (rotation: %d)",]