[+++ b/cpp/.gdbinit, +b __cxa_throw, +r, +++ b/cpp/.gdbinit, +b __cxa_throw, +r, +++ b/cpp/.valgrind.supp, +, +{, +   osx, +   Memcheck:Leak, +   fun:malloc_zone_malloc, +   fun:recursive_mutex_init, +   fun:_objc_init, +   fun:libSystem_initializer, +}, +, +{, +   throws, +   Memcheck:Leak, +   fun:calloc, +   fun:__cxa_get_globals, +   fun:__cxa_throw, +}, +, +{, +   osx, +   Memcheck:Leak, +   fun:malloc_zone_calloc, +   ..., +   fun:map_images, +}, +++ b/cpp/.gdbinit, +b __cxa_throw, +r, +++ b/cpp/.valgrind.supp, +, +{, +   osx, +   Memcheck:Leak, +   fun:malloc_zone_malloc, +   fun:recursive_mutex_init, +   fun:_objc_init, +   fun:libSystem_initializer, +}, +, +{, +   throws, +   Memcheck:Leak, +   fun:calloc, +   fun:__cxa_get_globals, +   fun:__cxa_throw, +}, +, +{, +   osx, +   Memcheck:Leak, +   fun:malloc_zone_calloc, +   ..., +   fun:map_images, +}, +++ b/cpp/core/src/zxing/common/BitArray.cpp, +int BitArray::makeArraySize(int size) {, +  return (size + bitsPerWord-1) >> logBits;, +BitArray::BitArray(int size_), +  : size(size_), bits(makeArraySize(size)) {}, +  return size;, +  bits[i >> logBits] = newBits;, +/*, +*/, +  int max = bits.size();, +    bits[i] = 0;, +    throw IllegalArgumentException();, +    return true; // empty range matches, +  end--; // will be easier to treat this as the last actually set bit -- inclusive, +  int firstInt = start >> logBits;, +  int lastInt = end >> logBits;, +  for (int i = firstInt; i <= lastInt; i++) {, +    int firstBit = i > firstInt ? 0 : start & bitsMask;, +    int lastBit = i < lastInt ? (bitsPerWord-1) : end & bitsMask;, +    if (firstBit == 0 && lastBit == (bitsPerWord-1)) {, +    , +    // Return false if we're looking for 1s and the masked bits[i] isn't all 1s (that is,, +    // equals the mask, or we're looking for 0s and the masked portion is not all 0s, +    if ((bits[i] & mask) != (value ? mask : 0)) {, +  return bits;, +  vector<int> newBits(bits.size());, +  int size = this->size;, +  for (int i = 0; i < size; i++) {, +    if (get(size - i - 1)) {, +      newBits[i >> logBits] |= 1 << (i & bitsMask);, +  bits = newBits;, +/*, +*/, +++ b/cpp/.gdbinit, +b __cxa_throw, +r, +++ b/cpp/.valgrind.supp, +, +{]