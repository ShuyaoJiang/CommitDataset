[+++ b/android/build.xml, +      <!-- This works around some strange Android/ProGuard problem verifying MaskUtil -->, +      <arg value="-keep class com.google.zxing.qrcode.encoder.MaskUtil { public * ; }"/>, +++ b/android/build.xml, +      <!-- This works around some strange Android/ProGuard problem verifying MaskUtil -->, +      <arg value="-keep class com.google.zxing.qrcode.encoder.MaskUtil { public * ; }"/>, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +import com.google.zxing.BarcodeFormat;, +import java.util.Vector;, +import java.util.regex.Pattern;, +, +  private static final Pattern COMMA_PATTERN = Pattern.compile(",");, +  static final Vector<BarcodeFormat> PRODUCT_FORMATS;, +  static final Vector<BarcodeFormat> ONE_D_FORMATS;, +  static final Vector<BarcodeFormat> QR_CODE_FORMATS;, +  static final Vector<BarcodeFormat> ALL_FORMATS;, +, +  static {, +    PRODUCT_FORMATS = new Vector<BarcodeFormat>(5);, +    PRODUCT_FORMATS.add(BarcodeFormat.UPC_A);, +    PRODUCT_FORMATS.add(BarcodeFormat.UPC_E);, +    PRODUCT_FORMATS.add(BarcodeFormat.EAN_13);, +    PRODUCT_FORMATS.add(BarcodeFormat.EAN_8);, +    PRODUCT_FORMATS.add(BarcodeFormat.RSS14);, +    ONE_D_FORMATS = new Vector<BarcodeFormat>(PRODUCT_FORMATS.size() + 3);, +    ONE_D_FORMATS.addAll(PRODUCT_FORMATS);, +    ONE_D_FORMATS.add(BarcodeFormat.CODE_39);, +    ONE_D_FORMATS.add(BarcodeFormat.CODE_128);, +    ONE_D_FORMATS.add(BarcodeFormat.ITF);, +    QR_CODE_FORMATS = new Vector<BarcodeFormat>(1);, +    QR_CODE_FORMATS.add(BarcodeFormat.QR_CODE);, +    ALL_FORMATS = new Vector<BarcodeFormat>(ONE_D_FORMATS.size() + QR_CODE_FORMATS.size());, +    ALL_FORMATS.addAll(ONE_D_FORMATS);, +    ALL_FORMATS.addAll(QR_CODE_FORMATS);, +  }, +, +  private Vector<BarcodeFormat> decodeFormats;, +        decodeFormats = parseDecodeFormats(intent);, +        decodeFormats = PRODUCT_FORMATS;, +        decodeFormats = null;, +        decodeFormats = null;, +      decodeFormats = null;, +  private static Vector<BarcodeFormat> parseDecodeFormats(Intent intent) {, +    String scanFormats = intent.getStringExtra(Intents.Scan.SCAN_FORMATS);, +    if (scanFormats != null) {, +      Vector<BarcodeFormat> formats = new Vector<BarcodeFormat>();, +      try {, +        for (String format : COMMA_PATTERN.split(scanFormats)) {, +          formats.add(BarcodeFormat.valueOf(format));, +        }, +      } catch (IllegalArgumentException iae) {, +        // ignore it then, +      }, +    }, +    String decodeMode = intent.getStringExtra(Intents.Scan.MODE);, +    if (decodeMode != null) {, +      if (Intents.Scan.PRODUCT_MODE.equals(decodeMode)) {, +        return PRODUCT_FORMATS;, +      }, +      if (Intents.Scan.QR_CODE_MODE.equals(decodeMode)) {, +        return QR_CODE_FORMATS;, +      }, +      if (Intents.Scan.ONE_D_MODE.equals(decodeMode)) {, +        return ONE_D_FORMATS;, +      }, +    }, +    return null;, +  }, +, +      handler = new CaptureActivityHandler(this, decodeFormats, beginScanning);, +++ b/android/build.xml, +      <!-- This works around some strange Android/ProGuard problem verifying MaskUtil -->, +      <arg value="-keep class com.google.zxing.qrcode.encoder.MaskUtil { public * ; }"/>, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +import com.google.zxing.BarcodeFormat;, +import java.util.Vector;, +import java.util.regex.Pattern;, +, +  private static final Pattern COMMA_PATTERN = Pattern.compile(",");, +  static final Vector<BarcodeFormat> PRODUCT_FORMATS;, +  static final Vector<BarcodeFormat> ONE_D_FORMATS;, +  static final Vector<BarcodeFormat> QR_CODE_FORMATS;, +  static final Vector<BarcodeFormat> ALL_FORMATS;, +, +  static {, +    PRODUCT_FORMATS = new Vector<BarcodeFormat>(5);, +    PRODUCT_FORMATS.add(BarcodeFormat.UPC_A);, +    PRODUCT_FORMATS.add(BarcodeFormat.UPC_E);, +    PRODUCT_FORMATS.add(BarcodeFormat.EAN_13);, +    PRODUCT_FORMATS.add(BarcodeFormat.EAN_8);, +    PRODUCT_FORMATS.add(BarcodeFormat.RSS14);, +    ONE_D_FORMATS = new Vector<BarcodeFormat>(PRODUCT_FORMATS.size() + 3);, +    ONE_D_FORMATS.addAll(PRODUCT_FORMATS);, +    ONE_D_FORMATS.add(BarcodeFormat.CODE_39);, +    ONE_D_FORMATS.add(BarcodeFormat.CODE_128);, +    ONE_D_FORMATS.add(BarcodeFormat.ITF);, +    QR_CODE_FORMATS = new Vector<BarcodeFormat>(1);, +    QR_CODE_FORMATS.add(BarcodeFormat.QR_CODE);, +    ALL_FORMATS = new Vector<BarcodeFormat>(ONE_D_FORMATS.size() + QR_CODE_FORMATS.size());, +    ALL_FORMATS.addAll(ONE_D_FORMATS);]