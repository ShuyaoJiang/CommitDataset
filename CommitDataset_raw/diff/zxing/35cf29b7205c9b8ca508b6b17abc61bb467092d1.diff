[+++ b/core/src/com/google/zxing/oned/Code39Reader.java, +    int[] counters = new int[9];, +    int[] start = findAsteriskPattern(row, counters);, +  private static int[] findAsteriskPattern(BitArray row, int[] counters) throws NotFoundException {, +++ b/core/src/com/google/zxing/oned/Code39Reader.java, +    int[] counters = new int[9];, +    int[] start = findAsteriskPattern(row, counters);, +  private static int[] findAsteriskPattern(BitArray row, int[] counters) throws NotFoundException {, +++ b/core/src/com/google/zxing/oned/OneDReader.java, +import java.util.Arrays;, +    Arrays.fill(counters, 0, numCounters, 0);, +++ b/core/src/com/google/zxing/oned/Code39Reader.java, +    int[] counters = new int[9];, +    int[] start = findAsteriskPattern(row, counters);, +  private static int[] findAsteriskPattern(BitArray row, int[] counters) throws NotFoundException {, +++ b/core/src/com/google/zxing/oned/OneDReader.java, +import java.util.Arrays;, +    Arrays.fill(counters, 0, numCounters, 0);, +++ b/core/src/com/google/zxing/oned/UPCEANReader.java, +import java.util.Arrays;, +    int[] counters = new int[START_END_PATTERN.length];, +      Arrays.fill(counters, 0, START_END_PATTERN.length, 0);, +      startRange = findGuardPattern(row, nextStart, false, START_END_PATTERN, counters);, +  static int[] findGuardPattern(BitArray row,, +                                int rowOffset,, +                                boolean whiteFirst,, +                                int[] pattern) throws NotFoundException {, +    return findGuardPattern(row, rowOffset, whiteFirst, pattern, new int[pattern.length]);, +  }, +, +   * @param counters array of counters, as long as pattern, to re-use, +                                int[] pattern,, +                                int[] counters) throws NotFoundException {, +++ b/core/src/com/google/zxing/oned/Code39Reader.java, +    int[] counters = new int[9];, +    int[] start = findAsteriskPattern(row, counters);, +  private static int[] findAsteriskPattern(BitArray row, int[] counters) throws NotFoundException {, +++ b/core/src/com/google/zxing/oned/OneDReader.java, +import java.util.Arrays;, +    Arrays.fill(counters, 0, numCounters, 0);, +++ b/core/src/com/google/zxing/oned/UPCEANReader.java, +import java.util.Arrays;, +    int[] counters = new int[START_END_PATTERN.length];, +      Arrays.fill(counters, 0, START_END_PATTERN.length, 0);, +      startRange = findGuardPattern(row, nextStart, false, START_END_PATTERN, counters);, +  static int[] findGuardPattern(BitArray row,, +                                int rowOffset,, +                                boolean whiteFirst,, +                                int[] pattern) throws NotFoundException {, +    return findGuardPattern(row, rowOffset, whiteFirst, pattern, new int[pattern.length]);, +  }, +, +   * @param counters array of counters, as long as pattern, to re-use, +                                int[] pattern,, +                                int[] counters) throws NotFoundException {, +++ b/core/src/com/google/zxing/pdf417/detector/Detector.java, +import java.util.Arrays;, +    int[] counters = new int[START_PATTERN.length];, +, +      int[] loc = findGuardPattern(matrix, 0, i, width, false, START_PATTERN, counters);, +        int[] loc = findGuardPattern(matrix, 0, i, width, false, START_PATTERN, counters);, +, +    counters = new int[STOP_PATTERN.length];, +, +        int[] loc = findGuardPattern(matrix, 0, i, width, false, STOP_PATTERN, counters);, +        int[] loc = findGuardPattern(matrix, 0, i, width, false, STOP_PATTERN, counters);, +    int[] counters = new int[START_PATTERN_REVERSE.length];, +    , +      int[] loc = findGuardPattern(matrix, halfWidth, i, halfWidth, true, START_PATTERN_REVERSE, counters);, +        int[] loc = findGuardPattern(matrix, halfWidth, i, halfWidth, true, START_PATTERN_REVERSE, counters);, +    , +    counters = new int[STOP_PATTERN_REVERSE.length];, +    , +        int[] loc = findGuardPattern(matrix, 0, i, halfWidth, false, STOP_PATTERN_REVERSE, counters);, +        int[] loc = findGuardPattern(matrix, 0, i, halfWidth, false, STOP_PATTERN_REVERSE, counters);, +   * @param counters array of counters, as long as pattern, to re-use , +                                        int[] pattern,, +                                        int[] counters) {, +    Arrays.fill(counters, 0, counters.length, 0);]