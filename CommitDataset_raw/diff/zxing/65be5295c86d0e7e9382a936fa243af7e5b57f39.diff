[+++ b/core/src/com/google/zxing/WriterException.java, +  public WriterException() {, +    super();, +  }, +, +++ b/core/src/com/google/zxing/WriterException.java, +  public WriterException() {, +    super();, +  }, +, +++ b/core/src/com/google/zxing/qrcode/QRCodeWriter.java, +    Encoder.Encode(new ByteArray(contents), errorCorrectionLevel, code);, +++ b/core/src/com/google/zxing/WriterException.java, +  public WriterException() {, +    super();, +  }, +, +++ b/core/src/com/google/zxing/qrcode/QRCodeWriter.java, +    Encoder.Encode(new ByteArray(contents), errorCorrectionLevel, code);, +++ b/core/src/com/google/zxing/qrcode/encoder/BitVector.java, +    if (index < 0 || index >= sizeInBits) {, +      throw new IllegalArgumentException("Bad index: " + index);, +    }, +    if (!(bit == 0 || bit == 1)) {, +      throw new IllegalArgumentException("Bad bit");, +    }, +    if (num_bits < 0 || num_bits > 32) {, +      throw new IllegalArgumentException("Num bits must be between 0 and 32");, +    }, +    if (sizeInBits != other.size()) {, +      throw new IllegalArgumentException("BitVector sizes don't match");, +    }, +        throw new IllegalArgumentException("Byte isn't 0 or 1");, +++ b/core/src/com/google/zxing/WriterException.java, +  public WriterException() {, +    super();, +  }, +, +++ b/core/src/com/google/zxing/qrcode/QRCodeWriter.java, +    Encoder.Encode(new ByteArray(contents), errorCorrectionLevel, code);, +++ b/core/src/com/google/zxing/qrcode/encoder/BitVector.java, +    if (index < 0 || index >= sizeInBits) {, +      throw new IllegalArgumentException("Bad index: " + index);, +    }, +    if (!(bit == 0 || bit == 1)) {, +      throw new IllegalArgumentException("Bad bit");, +    }, +    if (num_bits < 0 || num_bits > 32) {, +      throw new IllegalArgumentException("Num bits must be between 0 and 32");, +    }, +    if (sizeInBits != other.size()) {, +      throw new IllegalArgumentException("BitVector sizes don't match");, +    }, +        throw new IllegalArgumentException("Byte isn't 0 or 1");, +++ /dev/null, +++ b/core/src/com/google/zxing/WriterException.java, +  public WriterException() {, +    super();, +  }, +, +++ b/core/src/com/google/zxing/qrcode/QRCodeWriter.java, +    Encoder.Encode(new ByteArray(contents), errorCorrectionLevel, code);, +++ b/core/src/com/google/zxing/qrcode/encoder/BitVector.java, +    if (index < 0 || index >= sizeInBits) {, +      throw new IllegalArgumentException("Bad index: " + index);, +    }, +    if (!(bit == 0 || bit == 1)) {, +      throw new IllegalArgumentException("Bad bit");, +    }, +    if (num_bits < 0 || num_bits > 32) {, +      throw new IllegalArgumentException("Num bits must be between 0 and 32");, +    }, +    if (sizeInBits != other.size()) {, +      throw new IllegalArgumentException("BitVector sizes don't match");, +    }, +        throw new IllegalArgumentException("Byte isn't 0 or 1");, +++ /dev/null, +++ b/core/src/com/google/zxing/qrcode/encoder/Encoder.java, +import com.google.zxing.WriterException;, +    final int num_bytes;, +    final int[][] block_info;, +    private final ByteArray dataBytes;, +    private final ByteArray errorCorrectionBytes;, +  public static void Encode(final ByteArray bytes, int ec_level, QRCode qr_code) throws WriterException {, +    AppendBytes(bytes, mode, data_bits);, +    InitQRCode(num_input_bytes, ec_level, mode, qr_code);, +    AppendModeInfo(qr_code.mode(), header_and_data_bits);, +    AppendLengthInfo(bytes.size(), qr_code.version(), qr_code.mode(), header_and_data_bits);, +    TerminateBits(qr_code.num_data_bytes(), header_and_data_bits);, +      throw new WriterException("Invalid QR code: " + qr_code.toString());, +  public static int ChooseMode(final ByteArray bytes) throws WriterException {, +    if (!bytes.empty()) {, +      throw new WriterException("Bytes left over");, +    }, +      ByteMatrix matrix) throws WriterException {, +      throw new WriterException("Invalid matrix width: " + matrix.width());, +      MatrixUtil.BuildMatrix(bits, ec_level, version, mask_pattern, matrix);, +      System.out.println("mask_pattern: " + mask_pattern + ", " + "penalty: " + penalty);, +  private static void InitQRCode(int num_input_bytes, int ec_level, int mode, QRCode qr_code) throws WriterException {, +      throw new WriterException("Invalid EC level: " + ec_level);]