[+++ b/androidtest/src/com/google/zxing/client/androidtest/BenchmarkActivity.java, +  private Thread benchmarkThread;, +        benchmarkThread = new Thread(new BenchmarkThread(BenchmarkActivity.this, PATH));, +++ b/androidtest/src/com/google/zxing/client/androidtest/BenchmarkActivity.java, +  private Thread benchmarkThread;, +        benchmarkThread = new Thread(new BenchmarkThread(BenchmarkActivity.this, PATH));, +++ b/androidtest/src/com/google/zxing/client/androidtest/BenchmarkThread.java, +import android.graphics.Bitmap;, +import android.graphics.BitmapFactory;, +import com.google.zxing.RGBLuminanceSource;, +final class BenchmarkThread implements Runnable {, +, +    Bitmap imageBitmap = BitmapFactory.decodeFile(path);, +    if (imageBitmap == null) {, +      Log.e(TAG, "Couldn't open " + path);, +    int width = imageBitmap.getWidth();, +    int height = imageBitmap.getHeight();, +    int[] pixels = new int[width * height];, +    imageBitmap.getPixels(pixels, 0, width, 0, 0, width, height);, +, +    RGBLuminanceSource source = new RGBLuminanceSource(width, height, pixels);, +, +++ b/androidtest/src/com/google/zxing/client/androidtest/BenchmarkActivity.java, +  private Thread benchmarkThread;, +        benchmarkThread = new Thread(new BenchmarkThread(BenchmarkActivity.this, PATH));, +++ b/androidtest/src/com/google/zxing/client/androidtest/BenchmarkThread.java, +import android.graphics.Bitmap;, +import android.graphics.BitmapFactory;, +import com.google.zxing.RGBLuminanceSource;, +final class BenchmarkThread implements Runnable {, +, +    Bitmap imageBitmap = BitmapFactory.decodeFile(path);, +    if (imageBitmap == null) {, +      Log.e(TAG, "Couldn't open " + path);, +    int width = imageBitmap.getWidth();, +    int height = imageBitmap.getHeight();, +    int[] pixels = new int[width * height];, +    imageBitmap.getPixels(pixels, 0, width, 0, 0, width, height);, +, +    RGBLuminanceSource source = new RGBLuminanceSource(width, height, pixels);, +, +++ /dev/null, +++ b/androidtest/src/com/google/zxing/client/androidtest/BenchmarkActivity.java, +  private Thread benchmarkThread;, +        benchmarkThread = new Thread(new BenchmarkThread(BenchmarkActivity.this, PATH));, +++ b/androidtest/src/com/google/zxing/client/androidtest/BenchmarkThread.java, +import android.graphics.Bitmap;, +import android.graphics.BitmapFactory;, +import com.google.zxing.RGBLuminanceSource;, +final class BenchmarkThread implements Runnable {, +, +    Bitmap imageBitmap = BitmapFactory.decodeFile(path);, +    if (imageBitmap == null) {, +      Log.e(TAG, "Couldn't open " + path);, +    int width = imageBitmap.getWidth();, +    int height = imageBitmap.getHeight();, +    int[] pixels = new int[width * height];, +    imageBitmap.getPixels(pixels, 0, width, 0, 0, width, height);, +, +    RGBLuminanceSource source = new RGBLuminanceSource(width, height, pixels);, +, +++ /dev/null, +++ b/core/src/com/google/zxing/RGBLuminanceSource.java, +/*, + * Copyright 2009 ZXing authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.zxing;, +, +/**, + * This class is used to help decode images from files which arrive as RGB data from, + * an ARGB pixel array. It does not support cropping or rotation., + *, + * @author dswitkin@google.com (Daniel Switkin), + */, +public final class RGBLuminanceSource extends LuminanceSource {, +, +  private final byte[] luminances;, +, +  public RGBLuminanceSource(int width, int height, int[] pixels) {, +    super(width, height);, +    // In order to measure pure decoding speed, we convert the entire image to a greyscale array, +    // up front, which is the same as the Y channel of the YUVLuminanceSource in the real app., +    luminances = new byte[width * height];, +    for (int y = 0; y < height; y++) {, +      int offset = y * width;, +      for (int x = 0; x < width; x++) {, +        int pixel = pixels[offset + x];]