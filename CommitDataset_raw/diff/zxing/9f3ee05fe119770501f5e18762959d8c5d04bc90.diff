[+++ b/core/src/com/google/zxing/common/DefaultGridSampler.java, +    return sampleGrid(image, dimension, transform);, +  }, +, +  public BitMatrix sampleGrid(BitMatrix image,, +                              int dimension,, +                              PerspectiveTransform transform) throws ReaderException {, +++ b/core/src/com/google/zxing/common/DefaultGridSampler.java, +    return sampleGrid(image, dimension, transform);, +  }, +, +  public BitMatrix sampleGrid(BitMatrix image,, +                              int dimension,, +                              PerspectiveTransform transform) throws ReaderException {, +++ b/core/src/com/google/zxing/common/GridSampler.java, +  public BitMatrix sampleGrid(BitMatrix image,, +                              int dimension,, +                              PerspectiveTransform transform) throws ReaderException {, +    throw new UnsupportedOperationException();, +  }, +  , +, +++ b/core/src/com/google/zxing/common/DefaultGridSampler.java, +    return sampleGrid(image, dimension, transform);, +  }, +, +  public BitMatrix sampleGrid(BitMatrix image,, +                              int dimension,, +                              PerspectiveTransform transform) throws ReaderException {, +++ b/core/src/com/google/zxing/common/GridSampler.java, +  public BitMatrix sampleGrid(BitMatrix image,, +                              int dimension,, +                              PerspectiveTransform transform) throws ReaderException {, +    throw new UnsupportedOperationException();, +  }, +  , +, +++ b/core/src/com/google/zxing/common/PerspectiveTransform.java, +public final class PerspectiveTransform {, +  public static PerspectiveTransform quadrilateralToQuadrilateral(float x0, float y0,, +  public void transformPoints(float[] points) {, +  /** Convenience method, not optimized for performance. */, +  public void transformPoints(float[] xValues, float[] yValues) {, +    int n = xValues.length;, +    for (int i = 0; i < n; i ++) {, +      float x = xValues[i];, +      float y = yValues[i];, +      float denominator = a13 * x + a23 * y + a33;, +      xValues[i] = (a11 * x + a21 * y + a31) / denominator;, +      yValues[i] = (a12 * x + a22 * y + a32) / denominator;, +    }, +  }, +, +  public static PerspectiveTransform squareToQuadrilateral(float x0, float y0,, +  public static PerspectiveTransform quadrilateralToSquare(float x0, float y0,, +++ b/core/src/com/google/zxing/common/DefaultGridSampler.java, +    return sampleGrid(image, dimension, transform);, +  }, +, +  public BitMatrix sampleGrid(BitMatrix image,, +                              int dimension,, +                              PerspectiveTransform transform) throws ReaderException {, +++ b/core/src/com/google/zxing/common/GridSampler.java, +  public BitMatrix sampleGrid(BitMatrix image,, +                              int dimension,, +                              PerspectiveTransform transform) throws ReaderException {, +    throw new UnsupportedOperationException();, +  }, +  , +, +++ b/core/src/com/google/zxing/common/PerspectiveTransform.java, +public final class PerspectiveTransform {, +  public static PerspectiveTransform quadrilateralToQuadrilateral(float x0, float y0,, +  public void transformPoints(float[] points) {, +  /** Convenience method, not optimized for performance. */, +  public void transformPoints(float[] xValues, float[] yValues) {, +    int n = xValues.length;, +    for (int i = 0; i < n; i ++) {, +      float x = xValues[i];, +      float y = yValues[i];, +      float denominator = a13 * x + a23 * y + a33;, +      xValues[i] = (a11 * x + a21 * y + a31) / denominator;, +      yValues[i] = (a12 * x + a22 * y + a32) / denominator;, +    }, +  }, +, +  public static PerspectiveTransform squareToQuadrilateral(float x0, float y0,, +  public static PerspectiveTransform quadrilateralToSquare(float x0, float y0,, +++ b/core/src/com/google/zxing/qrcode/detector/Detector.java, +import com.google.zxing.common.PerspectiveTransform;, +  protected ResultPointCallback getResultPointCallback() {, +    return resultPointCallback;, +  }, +, +    PerspectiveTransform transform =, +        createTransform(topLeft, topRight, bottomLeft, alignmentPattern, dimension);, +, +    BitMatrix bits = sampleGrid(image, transform, dimension);, +  public PerspectiveTransform createTransform(ResultPoint topLeft,, +                                              int dimension) {]