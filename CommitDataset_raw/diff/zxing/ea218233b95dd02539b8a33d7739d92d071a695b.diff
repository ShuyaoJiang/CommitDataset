[+++ b/javase/src/com/google/zxing/HtmlAssetTranslator.java, +import org.xml.sax.SAXException;, +import javax.xml.parsers.ParserConfigurationException;, +import java.io.FileFilter;, +import java.io.IOException;, + * Specify "all" for language to try to translate for all existing translations., + * <p>This will translate .html files in subdirectory html-en to directory html-es, for example., +    Collection<String> languagesToTranslate = parseLanguagesToTranslate(assetsDir, args[1]);, +    Collection<String> filesToTranslate = parseFilesToTranslate(args);, +    for (String language : languagesToTranslate) {, +      translateOneLanguage(assetsDir, language, filesToTranslate);, +    }, +  }, +  private static Collection<String> parseLanguagesToTranslate(File assetsDir, String languageArg) {, +    Collection<String> languages = new ArrayList<String>();, +    if ("all".equals(languageArg)) {, +      FileFilter fileFilter = new FileFilter() {, +        public boolean accept(File file) {, +          return file.isDirectory() && file.getName().startsWith("html-") && !"html-en".equals(file.getName());, +        }, +      };, +      for (File languageDir : assetsDir.listFiles(fileFilter)) {, +        languages.add(languageDir.getName().substring(5));, +      }, +    } else {, +      languages.add(languageArg);, +    }, +    return languages;, +  }, +, +  private static Collection<String> parseFilesToTranslate(String[] args) {, +    Collection<String> fileNamesToTranslate = new ArrayList<String>();, +    return fileNamesToTranslate;, +  }, +, +  private static void translateOneLanguage(File assetsDir,, +                                           String language,, +                                           final Collection<String> filesToTranslate) throws IOException {, +    File targetHtmlDir = new File(assetsDir, "html-" + language);, +    targetHtmlDir.mkdirs();, +    File englishHtmlDir = new File(assetsDir, "html-en");, +, +    String translationTextTranslated =, +        StringsResourceTranslator.translateString("Translated by Google Translate.", language);, +        return name.endsWith(".html") && (filesToTranslate.isEmpty() || filesToTranslate.contains(name));, +      translateOneFile(language, targetHtmlDir, sourceFile, translationTextTranslated);, +    }, +  }, +, +  private static void translateOneFile(String language,, +                                       File targetHtmlDir,, +                                       File sourceFile,, +                                       String translationTextTranslated) throws IOException {, +    Document document;, +    try {, +      document = builder.parse(sourceFile);, +    } catch (ParserConfigurationException pce) {, +      throw new IllegalStateException(pce);, +    } catch (SAXException sae) {, +      throw new IOException(sae.toString());, +    }, +    DOMImplementationRegistry registry;, +    try {, +      registry = DOMImplementationRegistry.newInstance();, +    } catch (ClassNotFoundException cnfe) {, +      throw new IllegalStateException(cnfe);, +    } catch (InstantiationException ie) {, +      throw new IllegalStateException(ie);, +    } catch (IllegalAccessException iae) {, +      throw new IllegalStateException(iae);, +    }, +    , +    // Ignore "notranslate" nodes, +    if (attributes != null) {, +      Node classAttribute = attributes.getNamedItem("class");, +      if (classAttribute != null && "notranslate".equals(classAttribute.getTextContent())) {, +        return false;, +      }, +    }, +    // Ignore non-text snippets, +    String textContent = node.getTextContent();, +    if (textContent != null) {, +      for (int i = 0; i < textContent.length(); i++) {, +        if (Character.isLetter(textContent.charAt(i))) {, +      }, +    }, +    return false;, +++ b/javase/src/com/google/zxing/HtmlAssetTranslator.java, +import org.xml.sax.SAXException;, +import javax.xml.parsers.ParserConfigurationException;, +import java.io.FileFilter;, +import java.io.IOException;, + * Specify "all" for language to try to translate for all existing translations., + * <p>This will translate .html files in subdirectory html-en to directory html-es, for example., +    Collection<String> languagesToTranslate = parseLanguagesToTranslate(assetsDir, args[1]);, +    Collection<String> filesToTranslate = parseFilesToTranslate(args);, +    for (String language : languagesToTranslate) {, +      translateOneLanguage(assetsDir, language, filesToTranslate);, +    }, +  }]