[+++ b/cpp/core/tests/src/qrcode/FormatInformationTest.cpp, +static const int MASKED_TEST_FORMAT_INFO = 0x2BED;, +static const int UNMASKED_TEST_FORMAT_INFO = MASKED_TEST_FORMAT_INFO ^ 0x5412;, +, +  if (a == NULL || b == NULL), +  {, +	CPPUNIT_ASSERT_EQUAL(a, b);, +  }, +  else, +  {, +}, +    FormatInformation::decodeFormatInformation(MASKED_TEST_FORMAT_INFO, MASKED_TEST_FORMAT_INFO);, +               FormatInformation::decodeFormatInformation(UNMASKED_TEST_FORMAT_INFO, MASKED_TEST_FORMAT_INFO));, +, +  //TODO separate tests as in Java?, +  assertEquals(expected, FormatInformation::decodeFormatInformation(, +	MASKED_TEST_FORMAT_INFO ^ 0x01, MASKED_TEST_FORMAT_INFO ^ 0x01));, +  assertEquals(expected, FormatInformation::decodeFormatInformation(, +	MASKED_TEST_FORMAT_INFO ^ 0x03, MASKED_TEST_FORMAT_INFO ^ 0x03));, +  assertEquals(expected, FormatInformation::decodeFormatInformation(, +	MASKED_TEST_FORMAT_INFO ^ 0x07, MASKED_TEST_FORMAT_INFO ^ 0x07));, +, +  Ref<FormatInformation> expectedNull(NULL);, +  assertEquals(expectedNull, FormatInformation::decodeFormatInformation(, +	MASKED_TEST_FORMAT_INFO ^ 0x0F, MASKED_TEST_FORMAT_INFO ^ 0x0F));, +, +  // WithMisread, +  assertEquals(expected, FormatInformation::decodeFormatInformation(, +	MASKED_TEST_FORMAT_INFO ^ 0x03, MASKED_TEST_FORMAT_INFO ^ 0x0F));]