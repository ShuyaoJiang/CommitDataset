[+++ b/cpp/core/src/zxing/common/Array.h, +  /*, +  */, +++ b/cpp/core/src/zxing/common/Array.h, +  /*, +  */, +++ b/cpp/core/src/zxing/common/GreyscaleRotatedLuminanceSource.cpp, +                                int dataWidth, int dataHeight,, +++ b/cpp/core/src/zxing/common/Array.h, +  /*, +  */, +++ b/cpp/core/src/zxing/common/GreyscaleRotatedLuminanceSource.cpp, +                                int dataWidth, int dataHeight,, +++ b/cpp/core/tests/src/common/BitArrayTest.cpp, +  vector<int> words(array.getBitArray());, +  CPPUNIT_ASSERT_EQUAL(1, words[0]);, +  CPPUNIT_ASSERT_EQUAL((1 << (bits - 1)), words[1]);, +  for(int i = 0; i < test.getSize(); ++i) {, +++ b/cpp/core/src/zxing/common/Array.h, +  /*, +  */, +++ b/cpp/core/src/zxing/common/GreyscaleRotatedLuminanceSource.cpp, +                                int dataWidth, int dataHeight,, +++ b/cpp/core/tests/src/common/BitArrayTest.cpp, +  vector<int> words(array.getBitArray());, +  CPPUNIT_ASSERT_EQUAL(1, words[0]);, +  CPPUNIT_ASSERT_EQUAL((1 << (bits - 1)), words[1]);, +  for(int i = 0; i < test.getSize(); ++i) {, +++ b/cpp/core/tests/src/common/BitMatrixTest.cpp, +  int bits = numeric_limits<int>::digits;, +  for (int i = 0; i < bits + 1; i++) {, +    for (int j = 0; j < bits + 1; j++) {, +  for (int i = 0; i < bits + 1; i++) {, +    for (int j = 0; j < bits + 1; j++) {, +  ArrayRef<int> bits = matrix.getBits();, +  CPPUNIT_ASSERT_EQUAL(1, bits[0]);, +  CPPUNIT_ASSERT_EQUAL(8, bits[1]);, +++ b/cpp/core/src/zxing/common/Array.h, +  /*, +  */, +++ b/cpp/core/src/zxing/common/GreyscaleRotatedLuminanceSource.cpp, +                                int dataWidth, int dataHeight,, +++ b/cpp/core/tests/src/common/BitArrayTest.cpp, +  vector<int> words(array.getBitArray());, +  CPPUNIT_ASSERT_EQUAL(1, words[0]);, +  CPPUNIT_ASSERT_EQUAL((1 << (bits - 1)), words[1]);, +  for(int i = 0; i < test.getSize(); ++i) {, +++ b/cpp/core/tests/src/common/BitMatrixTest.cpp, +  int bits = numeric_limits<int>::digits;, +  for (int i = 0; i < bits + 1; i++) {, +    for (int j = 0; j < bits + 1; j++) {, +  for (int i = 0; i < bits + 1; i++) {, +    for (int j = 0; j < bits + 1; j++) {, +  ArrayRef<int> bits = matrix.getBits();, +  CPPUNIT_ASSERT_EQUAL(1, bits[0]);, +  CPPUNIT_ASSERT_EQUAL(8, bits[1]);, +++ b/cpp/core/tests/src/common/BitSourceTest.cpp, +typedef char byte;, +++ b/cpp/core/src/zxing/common/Array.h, +  /*, +  */, +++ b/cpp/core/src/zxing/common/GreyscaleRotatedLuminanceSource.cpp, +                                int dataWidth, int dataHeight,, +++ b/cpp/core/tests/src/common/BitArrayTest.cpp, +  vector<int> words(array.getBitArray());, +  CPPUNIT_ASSERT_EQUAL(1, words[0]);, +  CPPUNIT_ASSERT_EQUAL((1 << (bits - 1)), words[1]);, +  for(int i = 0; i < test.getSize(); ++i) {, +++ b/cpp/core/tests/src/common/BitMatrixTest.cpp, +  int bits = numeric_limits<int>::digits;, +  for (int i = 0; i < bits + 1; i++) {, +    for (int j = 0; j < bits + 1; j++) {, +  for (int i = 0; i < bits + 1; i++) {, +    for (int j = 0; j < bits + 1; j++) {, +  ArrayRef<int> bits = matrix.getBits();, +  CPPUNIT_ASSERT_EQUAL(1, bits[0]);, +  CPPUNIT_ASSERT_EQUAL(8, bits[1]);, +++ b/cpp/core/tests/src/common/BitSourceTest.cpp, +typedef char byte;, +++ b/cpp/core/tests/src/common/BlackPointEstimatorTest.cpp, +  ArrayRef<int> array (new Array<int>(histogram));, +  size_t point = GlobalHistogramBinarizer::estimateBlackPoint(array);, +    ArrayRef<int> array (new Array<int>(histogram));, +    GlobalHistogramBinarizer::estimateBlackPoint(array);, +++ b/cpp/core/src/zxing/common/Array.h, +  /*, +  */, +++ b/cpp/core/src/zxing/common/GreyscaleRotatedLuminanceSource.cpp, +                                int dataWidth, int dataHeight,, +++ b/cpp/core/tests/src/common/BitArrayTest.cpp, +  vector<int> words(array.getBitArray());, +  CPPUNIT_ASSERT_EQUAL(1, words[0]);, +  CPPUNIT_ASSERT_EQUAL((1 << (bits - 1)), words[1]);, +  for(int i = 0; i < test.getSize(); ++i) {, +++ b/cpp/core/tests/src/common/BitMatrixTest.cpp, +  int bits = numeric_limits<int>::digits;, +  for (int i = 0; i < bits + 1; i++) {, +    for (int j = 0; j < bits + 1; j++) {, +  for (int i = 0; i < bits + 1; i++) {, +    for (int j = 0; j < bits + 1; j++) {]