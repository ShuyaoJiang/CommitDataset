[+++ b/android/src/com/google/zxing/client/android/Intents.java, +     * Bundle, depending on the type and format specified. Non-QR Code formats should, +     * just use a String here. For QR Code, see Contents for details., +     * The type of data being supplied if the format is QR Code. Use, +     * Intent.putExtra(TYPE, type) with one of Contents.Type., +    /**, +     * The barcode format to be displayed. If this isn't specified or is blank, , +     * it defaults to QR Code. Use Intent.putExtra(FORMAT, format), where, +     * format is one of Contents.Format. , +     */, +    public static final String FORMAT = "com.google.zxing.client.android.ENCODE_FORMAT";, +, +++ b/android/src/com/google/zxing/client/android/Intents.java, +     * Bundle, depending on the type and format specified. Non-QR Code formats should, +     * just use a String here. For QR Code, see Contents for details., +     * The type of data being supplied if the format is QR Code. Use, +     * Intent.putExtra(TYPE, type) with one of Contents.Type., +    /**, +     * The barcode format to be displayed. If this isn't specified or is blank, , +     * it defaults to QR Code. Use Intent.putExtra(FORMAT, format), where, +     * format is one of Contents.Format. , +     */, +    public static final String FORMAT = "com.google.zxing.client.android.ENCODE_FORMAT";, +, +++ b/android/src/com/google/zxing/client/android/QRCodeEncoder.java, +  private BarcodeFormat mFormat;, +    Thread encodeThread = new EncodeThread(mContents, handler, pixelResolution,, +        mFormat);, +  public String getFormat() {, +    return mFormat.toString();, +  }, +, +  // It would be nice if the string encoding lived in the core ZXing library,, +  // but we use platform specific code like PhoneNumberUtils, so it can't., +    , +    // default to QR_CODE if no format given, +    String format = intent.getStringExtra(Intents.Encode.FORMAT);, +    if (format == null || format.length() == 0 || , +        format.equals(Contents.Format.QR_CODE)) {, +      mFormat = BarcodeFormat.QR_CODE;, +      encodeQRCodeContents(intent, type);, +    } else {, +      String data = intent.getStringExtra(Intents.Encode.DATA);, +      if (data != null && data.length() != 0) {, +        mContents = data;, +        mDisplayContents = data;, +        mTitle = mActivity.getString(R.string.contents_text);, +        if (format.equals(Contents.Format.CODE_128)), +          mFormat = BarcodeFormat.CODE_128;, +        else if (format.equals(Contents.Format.CODE_39)), +          mFormat = BarcodeFormat.CODE_39;, +        else if (format.equals(Contents.Format.EAN_8)), +          mFormat = BarcodeFormat.EAN_8;, +        else if (format.equals(Contents.Format.EAN_13)), +          mFormat = BarcodeFormat.EAN_13;, +        else if (format.equals(Contents.Format.UPC_A)), +          mFormat = BarcodeFormat.UPC_A;, +        else if (format.equals(Contents.Format.UPC_E)), +          mFormat = BarcodeFormat.UPC_E;, +      }, +    }, +    return mContents != null && mContents.length() > 0;, +  }, +  private void encodeQRCodeContents(Intent intent, String type) {, +    private final BarcodeFormat mFormat;, +    EncodeThread(String contents, Handler handler, int pixelResolution,, +        BarcodeFormat format) {, +      mFormat = format;, +        ByteMatrix result = new MultiFormatWriter().encode(mContents,, +            mFormat, mPixelResolution, mPixelResolution);, +++ b/android/src/com/google/zxing/client/android/Intents.java, +     * Bundle, depending on the type and format specified. Non-QR Code formats should, +     * just use a String here. For QR Code, see Contents for details., +     * The type of data being supplied if the format is QR Code. Use, +     * Intent.putExtra(TYPE, type) with one of Contents.Type., +    /**, +     * The barcode format to be displayed. If this isn't specified or is blank, , +     * it defaults to QR Code. Use Intent.putExtra(FORMAT, format), where, +     * format is one of Contents.Format. , +     */, +    public static final String FORMAT = "com.google.zxing.client.android.ENCODE_FORMAT";, +, +++ b/android/src/com/google/zxing/client/android/QRCodeEncoder.java, +  private BarcodeFormat mFormat;, +    Thread encodeThread = new EncodeThread(mContents, handler, pixelResolution,, +        mFormat);, +  public String getFormat() {, +    return mFormat.toString();, +  }, +, +  // It would be nice if the string encoding lived in the core ZXing library,, +  // but we use platform specific code like PhoneNumberUtils, so it can't., +    , +    // default to QR_CODE if no format given, +    String format = intent.getStringExtra(Intents.Encode.FORMAT);, +    if (format == null || format.length() == 0 || , +        format.equals(Contents.Format.QR_CODE)) {, +      mFormat = BarcodeFormat.QR_CODE;, +      encodeQRCodeContents(intent, type);, +    } else {]