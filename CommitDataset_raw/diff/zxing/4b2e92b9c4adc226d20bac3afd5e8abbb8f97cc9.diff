[+++ b/iphone/ScanTest/Classes/RootViewController.m, +	scanController = [ZXingWidgetController alloc];, +	[scanController setOneDMode:false];, +	[scanController setShowCancel:true];, +	scanController = [scanController initWithDelegate:self];, +++ b/iphone/ScanTest/Classes/RootViewController.m, +	scanController = [ZXingWidgetController alloc];, +	[scanController setOneDMode:false];, +	[scanController setShowCancel:true];, +	scanController = [scanController initWithDelegate:self];, +++ b/iphone/ZXingWidget/Decoder.mm, +//  UIImageWriteToSavedPhotosAlbum(self.subsetImage, nil, nil, nil);, +    for (int i = 0; !decoderResult && i < 4; i++) {, +++ b/iphone/ScanTest/Classes/RootViewController.m, +	scanController = [ZXingWidgetController alloc];, +	[scanController setOneDMode:false];, +	[scanController setShowCancel:true];, +	scanController = [scanController initWithDelegate:self];, +++ b/iphone/ZXingWidget/Decoder.mm, +//  UIImageWriteToSavedPhotosAlbum(self.subsetImage, nil, nil, nil);, +    for (int i = 0; !decoderResult && i < 4; i++) {, +++ b/iphone/ZXingWidget/FormatReader.mm, +++ b/iphone/ScanTest/Classes/RootViewController.m, +	scanController = [ZXingWidgetController alloc];, +	[scanController setOneDMode:false];, +	[scanController setShowCancel:true];, +	scanController = [scanController initWithDelegate:self];, +++ b/iphone/ZXingWidget/Decoder.mm, +//  UIImageWriteToSavedPhotosAlbum(self.subsetImage, nil, nil, nil);, +    for (int i = 0; !decoderResult && i < 4; i++) {, +++ b/iphone/ZXingWidget/FormatReader.mm, +++ b/iphone/ZXingWidget/MultiFormatReader.mm, +++ b/iphone/ScanTest/Classes/RootViewController.m, +	scanController = [ZXingWidgetController alloc];, +	[scanController setOneDMode:false];, +	[scanController setShowCancel:true];, +	scanController = [scanController initWithDelegate:self];, +++ b/iphone/ZXingWidget/Decoder.mm, +//  UIImageWriteToSavedPhotosAlbum(self.subsetImage, nil, nil, nil);, +    for (int i = 0; !decoderResult && i < 4; i++) {, +++ b/iphone/ZXingWidget/FormatReader.mm, +++ b/iphone/ZXingWidget/MultiFormatReader.mm, +++ b/iphone/ZXingWidget/OverlayView.h, +	BOOL oneDMode;, +@property (nonatomic, assign) BOOL oneDMode;, +++ b/iphone/ScanTest/Classes/RootViewController.m, +	scanController = [ZXingWidgetController alloc];, +	[scanController setOneDMode:false];, +	[scanController setShowCancel:true];, +	scanController = [scanController initWithDelegate:self];, +++ b/iphone/ZXingWidget/Decoder.mm, +//  UIImageWriteToSavedPhotosAlbum(self.subsetImage, nil, nil, nil);, +    for (int i = 0; !decoderResult && i < 4; i++) {, +++ b/iphone/ZXingWidget/FormatReader.mm, +++ b/iphone/ZXingWidget/MultiFormatReader.mm, +++ b/iphone/ZXingWidget/OverlayView.h, +	BOOL oneDMode;, +@property (nonatomic, assign) BOOL oneDMode;, +++ b/iphone/ZXingWidget/OverlayView.m, +@synthesize delegate, oneDMode;, +		if (oneDMode) {, +			[cancelButton setTransform:CGAffineTransformMakeRotation(M_PI/2)];, +			[cancelButton setFrame:CGRectMake(20, 175, 45, 130)];, +		}, +		else {, +		}, +, +	[cancelButton release];, +	if (oneDMode) {, +		char *text = "Place a red line over the bar code to be scanned.";, +		CGContextSelectFont(c, "Helvetica", 15, kCGEncodingMacRoman);, +		CGContextScaleCTM(c, -1.0, 1.0);, +		CGContextRotateCTM(c, M_PI/2);, +		CGContextShowTextAtPoint(c, 74.0, 285.0, text, 49);, +	}, +	else {, +		char *text = "Place a barcode inside the";, +		char *text2 = "viewfinder rectangle to scan it.";, +		CGContextRotateCTM(c, M_PI);, +	}, +	int offset = rect.size.width / 2;, +	if (oneDMode) {, +		CGFloat red[4] = {1.0f, 0.0f, 0.0f, 1.0f};, +		CGContextSetStrokeColor(c, red);, +		CGContextSetFillColor(c, red);, +		CGContextBeginPath(c);, +		//		CGContextMoveToPoint(c, rect.origin.x + kPadding, rect.origin.y + offset);, +		//		CGContextAddLineToPoint(c, rect.origin.x + rect.size.width - kPadding, rect.origin.y + offset);, +		CGContextMoveToPoint(c, rect.origin.x + offset, rect.origin.y + kPadding);, +		CGContextAddLineToPoint(c, rect.origin.x + offset, rect.origin.y + rect.size.height - kPadding);, +		CGContextStrokePath(c);, +	}, +		if (oneDMode) {, +			CGPoint val1 = [[_points objectAtIndex:0] CGPointValue];, +			CGPoint val2 = [[_points objectAtIndex:1] CGPointValue];, +			CGContextMoveToPoint(c, offset, val1.x);, +			CGContextAddLineToPoint(c, offset, val2.x);, +			CGContextStrokePath(c);, +		}, +		else {]