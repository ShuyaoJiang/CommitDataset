[+++ b/android-m3/src/com/google/zxing/client/android/BarcodeReaderCaptureActivity.java, +    workerThread = new WorkerThread(this, surfaceView, cameraManager, messageHandler);, +      workerThread = new WorkerThread(this, surfaceView, cameraManager, messageHandler);, +    } else if (keyCode == KeyEvent.KEYCODE_Q) {, +      workerThread.requestStillAndDecodeQR();, +    } else if (keyCode == KeyEvent.KEYCODE_U) {, +      workerThread.requestStillAndDecode1D();, +    } else if (keyCode == KeyEvent.KEYCODE_C) {, +      workerThread.requestStillAndSave();, +    return true;, +++ b/android-m3/src/com/google/zxing/client/android/BarcodeReaderCaptureActivity.java, +    workerThread = new WorkerThread(this, surfaceView, cameraManager, messageHandler);, +      workerThread = new WorkerThread(this, surfaceView, cameraManager, messageHandler);, +    } else if (keyCode == KeyEvent.KEYCODE_Q) {, +      workerThread.requestStillAndDecodeQR();, +    } else if (keyCode == KeyEvent.KEYCODE_U) {, +      workerThread.requestStillAndDecode1D();, +    } else if (keyCode == KeyEvent.KEYCODE_C) {, +      workerThread.requestStillAndSave();, +    return true;, +++ b/android-m3/src/com/google/zxing/client/android/WorkerThread.java, +import android.app.Application;, +import com.google.zxing.BarcodeFormat;, +import com.google.zxing.DecodeHintType;, +import java.io.File;, +import java.io.FileNotFoundException;, +import java.io.FileOutputStream;, +import java.io.IOException;, +import java.io.OutputStream;, +import java.util.Hashtable;, +import java.util.Vector;, +, +  private final BarcodeReaderCaptureActivity activity;, +    STILL_AND_DECODE_1D,, +    STILL_AND_DECODE_QR,, +    STILL_AND_SAVE,, +  WorkerThread(BarcodeReaderCaptureActivity activity, CameraSurfaceView surfaceView,, +               CameraManager cameraManager, Handler handler) {, +    this.activity = activity;, +          takeStillAndDecode(null);, +          break;, +        case STILL_AND_DECODE_1D: {, +          Hashtable<DecodeHintType, Object> hints = new Hashtable<DecodeHintType, Object>(3);, +          // TODO: This is fragile in case we add new formats. It would be better to have a new enum, +          // value which represented all 1D formats., +          Vector vector = new Vector();, +          vector.addElement(BarcodeFormat.UPC_A);, +          vector.addElement(BarcodeFormat.UPC_E);, +          vector.addElement(BarcodeFormat.EAN_13);, +          vector.addElement(BarcodeFormat.EAN_8);, +          vector.addElement(BarcodeFormat.CODE_39);, +          vector.addElement(BarcodeFormat.CODE_128);, +          hints.put(DecodeHintType.POSSIBLE_FORMATS, vector);, +          takeStillAndDecode(hints);, +        case STILL_AND_DECODE_QR: {, +          Hashtable<DecodeHintType, Object> hints = new Hashtable<DecodeHintType, Object>(3);, +          Vector vector = new Vector();, +          vector.addElement(BarcodeFormat.QR_CODE);, +          hints.put(DecodeHintType.POSSIBLE_FORMATS, vector);, +          takeStillAndDecode(hints);, +          break;, +        }, +        case STILL_AND_SAVE:, +          takeStillAndSave();, +  public void requestStillAndDecode1D() {, +    state = State.STILL_AND_DECODE_1D;, +    wakeFromIdle();, +  }, +, +  public void requestStillAndDecodeQR() {, +    state = State.STILL_AND_DECODE_QR;, +    wakeFromIdle();, +  }, +, +  public void requestStillAndSave() {, +    state = State.STILL_AND_SAVE;, +    wakeFromIdle();, +  }, +, +    } catch (InterruptedException e) {, +      // Continue, +  private void takeStillAndDecode(Hashtable<DecodeHintType, Object> hints) {, +    Bitmap bitmap = cameraManager.captureStill();, +    Result rawResult;, +    try {, +      MonochromeBitmapSource source = new RGBMonochromeBitmapSource(bitmap);, +      rawResult = new MultiFormatReader().decode(source, hints);, +    } catch (ReaderException e) {, +      Message message = Message.obtain(handler, R.id.decoding_failed_message);, +      message.sendToTarget();, +      state = State.PREVIEW_LOOP;, +      return;, +    }, +    Message message = Message.obtain(handler, R.id.decoding_succeeded_message, rawResult);, +    message.sendToTarget();, +    state = State.IDLE;, +  }, +, +  /**, +   * This is a debugging feature used to take photos and save them as JPEGs using the exact camera]