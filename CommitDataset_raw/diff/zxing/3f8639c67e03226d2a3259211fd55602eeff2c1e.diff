[+++ b/cpp/core/src/zxing/qrcode/detector/FinderPatternFinder.cpp, +class FurthestFromAverageComparator {, +  const float averageModuleSize_;, +  FurthestFromAverageComparator(float averageModuleSize) :, +    return dA > dB;, +  const float averageModuleSize_;, +  CenterComparator(float averageModuleSize) :, +    averageModuleSize_(averageModuleSize) {, +  }, +    if (a->getCount() != b->getCount()) {, +    } else {, +      float dA = abs(a->getEstimatedModuleSize() - averageModuleSize_);, +      float dB = abs(b->getEstimatedModuleSize() - averageModuleSize_);, +      return dA < dB;, +    }, +    float square = 0.0f;, +      float size = possibleCenters_[i]->getEstimatedModuleSize();, +      totalModuleSize += size;, +      square += size * size;, +    float stdDev = (float)sqrt(square / startSize - average * average);, +, +    sort(possibleCenters_.begin(), possibleCenters_.end(), FurthestFromAverageComparator(average));, +    , +    float limit = max(0.2f * average, stdDev);, +, +      if (abs(possibleCenters_[i]->getEstimatedModuleSize() - average) > limit) {, +    float totalModuleSize = 0.0f;, +    for (size_t i = 0; i < startSize; i++) {, +      float size = possibleCenters_[i]->getEstimatedModuleSize();, +      totalModuleSize += size;, +    }, +    float average = totalModuleSize / (float) startSize;, +    sort(possibleCenters_.begin(), possibleCenters_.end(), CenterComparator(average));, +                stateCount[0] = stateCount[2];, +                stateCount[1] = stateCount[3];, +                stateCount[2] = stateCount[4];, +                stateCount[3] = 1;, +                stateCount[4] = 0;, +                currentState = 3;, +                continue;]