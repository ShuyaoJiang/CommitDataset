[+++ b/zxingorg/build.xml, +        <include name="*.png"/>, +    <delete file="web/WEB-INF/lib/core.jar"/>, +    <delete file="web/WEB-INF/lib/javase.jar"/>, +    <delete file="zxingorg.war"/>, +++ b/zxingorg/build.xml, +        <include name="*.png"/>, +    <delete file="web/WEB-INF/lib/core.jar"/>, +    <delete file="web/WEB-INF/lib/javase.jar"/>, +    <delete file="zxingorg.war"/>, +++ b/zxingorg/src/com/google/zxing/web/DecodeEmailTask.java, +import java.io.IOException;, + * A {@link TimerTask} which repeatedly checks an e-mail account for messages with an attached, + * image. When one is found it attempts to decode the image and replies with the decoded messages, + * by e-mail., + *, + * @author Sean Owen (srowen@google.com), +        processMessage(session, message);, +      }, +    } catch (Throwable t) {, +      log.log(Level.WARNING, "Unexpected error", t);, +    } finally {, +      closeResources(store, inbox);, +    }, +  }, +, +  private void processMessage(Session session, Message message) throws MessagingException, IOException {, +        processMessagePart(session, message, part);, +    }, +    message.setFlag(Flags.Flag.DELETED, true);, +  }, +, +  private void processMessagePart(Session session, Message message, MimeBodyPart part), +      throws MessagingException, IOException {, +    String contentType = part.getContentType();, +    if (contentType.startsWith("image/")) {, +, +  private void closeResources(Store store, Folder inbox) {, +++ b/zxingorg/build.xml, +        <include name="*.png"/>, +    <delete file="web/WEB-INF/lib/core.jar"/>, +    <delete file="web/WEB-INF/lib/javase.jar"/>, +    <delete file="zxingorg.war"/>, +++ b/zxingorg/src/com/google/zxing/web/DecodeEmailTask.java, +import java.io.IOException;, + * A {@link TimerTask} which repeatedly checks an e-mail account for messages with an attached, + * image. When one is found it attempts to decode the image and replies with the decoded messages, + * by e-mail., + *, + * @author Sean Owen (srowen@google.com), +        processMessage(session, message);, +      }, +    } catch (Throwable t) {, +      log.log(Level.WARNING, "Unexpected error", t);, +    } finally {, +      closeResources(store, inbox);, +    }, +  }, +, +  private void processMessage(Session session, Message message) throws MessagingException, IOException {, +        processMessagePart(session, message, part);, +    }, +    message.setFlag(Flags.Flag.DELETED, true);, +  }, +, +  private void processMessagePart(Session session, Message message, MimeBodyPart part), +      throws MessagingException, IOException {, +    String contentType = part.getContentType();, +    if (contentType.startsWith("image/")) {, +, +  private void closeResources(Store store, Folder inbox) {, +++ b/zxingorg/src/com/google/zxing/web/DecodeServlet.java, +import com.google.zxing.client.result.ParsedReaderResult;, + * {@link HttpServlet} which decodes images containing barcodes. Given a URL, it will, + * retrieve the image and decode it. It can also process image files uploaded via POST., + * , + * @author Sean Owen (srowen@google.com), +  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {, +        processStream(is, request, response);, +              processStream(is, request, response);, +            response.sendRedirect("badimage.jspx");, +  private static void processStream(InputStream is, HttpServletRequest request, HttpServletResponse response), +      throws ServletException, IOException {, +    if (request.getParameter("full") == null) {, +    } else {, +      request.setAttribute("result", result);, +      ParsedReaderResult parsedReaderResult = ParsedReaderResult.parseReaderResult(result);, +      request.setAttribute("parsedReaderResult", parsedReaderResult);, +      request.getRequestDispatcher("decoderesult.jspx").forward(request, response);, +    }, +++ b/zxingorg/build.xml, +        <include name="*.png"/>, +    <delete file="web/WEB-INF/lib/core.jar"/>, +    <delete file="web/WEB-INF/lib/javase.jar"/>, +    <delete file="zxingorg.war"/>, +++ b/zxingorg/src/com/google/zxing/web/DecodeEmailTask.java, +import java.io.IOException;, + * A {@link TimerTask} which repeatedly checks an e-mail account for messages with an attached, + * image. When one is found it attempts to decode the image and replies with the decoded messages, + * by e-mail.]