[+++ b/core/src/com/google/zxing/pdf417/detector/Detector.java, +  private static final int INTEGER_MATH_SHIFT = 8;, +  private static final int PATTERN_MATCH_RESULT_SCALE_FACTOR = 1 << INTEGER_MATH_SHIFT;, +  private static final int MAX_AVG_VARIANCE = (int) (PATTERN_MATCH_RESULT_SCALE_FACTOR * 0.42f);, +  private static final int MAX_INDIVIDUAL_VARIANCE = (int) (PATTERN_MATCH_RESULT_SCALE_FACTOR * 0.8f);, +  private static final int SKEW_THRESHOLD = 3;, +    boolean tryHarder = hints != null && hints.containsKey(DecodeHintType.TRY_HARDER);, +, +    ResultPoint[] vertices = findVertices(matrix, tryHarder);, +      vertices = findVertices180(matrix, tryHarder);, +    BitMatrix bits = sampleGrid(matrix, vertices[4], vertices[5], vertices[6], vertices[7], dimension);, +    return new DetectorResult(bits, new ResultPoint[]{vertices[5], vertices[4], vertices[6], vertices[7]});, +  private static ResultPoint[] findVertices(BitMatrix matrix, boolean tryHarder) {, +    int rowStep = Math.max(1, height >> (tryHarder ? 9 : 7));, +, +    for (int i = 0; i < height; i += rowStep) {, +      for (int i = height - 1; i > 0; i -= rowStep) {, +      for (int i = 0; i < height; i += rowStep) {, +      for (int i = height - 1; i > 0; i -= rowStep) {, +  private static ResultPoint[] findVertices180(BitMatrix matrix, boolean tryHarder) {, +    int rowStep = Math.max(1, height >> (tryHarder ? 9 : 7));, +, +    for (int i = height - 1; i > 0; i -= rowStep) {, +      for (int i = 0; i < height; i += rowStep) {, +      for (int i = height - 1; i > 0; i -= rowStep) {, +      for (int i = 0; i < height; i += rowStep) {, +, +    float v0x = vertices[0].getX();, +    float v0y = vertices[0].getY();, +    float v2x = vertices[2].getX();, +    float v2y = vertices[2].getY();, +    float v4x = vertices[4].getX();, +    float v4y = vertices[4].getY();, +    float v6x = vertices[6].getX();, +    float v6y = vertices[6].getY();, +, +    float skew = v4y - v6y;, +      float deltax = v6x - v0x;, +      float deltay = v6y - v0y;, +      float delta2 = deltax * deltax + deltay * deltay;, +      float correction = (v4x - v0x) * deltax / delta2;, +      vertices[4] = new ResultPoint(v0x + correction * deltax, v0y + correction * deltay);, +      float deltax = v2x - v4x;, +      float deltay = v2y - v4y;, +      float delta2 = deltax * deltax + deltay * deltay;, +      float correction = (v2x - v6x) * deltax / delta2;, +      vertices[6] = new ResultPoint(v2x - correction * deltax, v2y - correction * deltay);, +    float v1x = vertices[1].getX();, +    float v1y = vertices[1].getY();, +    float v3x = vertices[3].getX();, +    float v3y = vertices[3].getY();, +    float v5x = vertices[5].getX();, +    float v5y = vertices[5].getY();, +    float v7x = vertices[7].getX();, +    float v7y = vertices[7].getY();, +, +    skew = v7y - v5y;, +      float deltax = v7x - v1x;, +      float deltay = v7y - v1y;, +      float delta2 = deltax * deltax + deltay * deltay;, +      float correction = (v5x - v1x) * deltax / delta2;, +      vertices[5] = new ResultPoint(v1x + correction * deltax, v1y + correction * deltay);, +      float deltax = v3x - v5x;, +      float deltay = v3y - v5y;, +      float delta2 = deltax * deltax + deltay * deltay;, +      float correction = (v3x - v7x) * deltax / delta2;, +      vertices[7] = new ResultPoint(v3x - correction * deltax, v3y - correction * deltay);, +    int unitBarWidth = (total << INTEGER_MATH_SHIFT) / patternLength;, +      int counter = counters[x] << INTEGER_MATH_SHIFT;, +++ b/core/src/com/google/zxing/pdf417/detector/Detector.java, +  private static final int INTEGER_MATH_SHIFT = 8;, +  private static final int PATTERN_MATCH_RESULT_SCALE_FACTOR = 1 << INTEGER_MATH_SHIFT;, +  private static final int MAX_AVG_VARIANCE = (int) (PATTERN_MATCH_RESULT_SCALE_FACTOR * 0.42f);, +  private static final int MAX_INDIVIDUAL_VARIANCE = (int) (PATTERN_MATCH_RESULT_SCALE_FACTOR * 0.8f);, +  private static final int SKEW_THRESHOLD = 3;, +    boolean tryHarder = hints != null && hints.containsKey(DecodeHintType.TRY_HARDER);, +, +    ResultPoint[] vertices = findVertices(matrix, tryHarder);, +      vertices = findVertices180(matrix, tryHarder);, +    BitMatrix bits = sampleGrid(matrix, vertices[4], vertices[5], vertices[6], vertices[7], dimension);, +    return new DetectorResult(bits, new ResultPoint[]{vertices[5], vertices[4], vertices[6], vertices[7]});, +  private static ResultPoint[] findVertices(BitMatrix matrix, boolean tryHarder) {, +    int rowStep = Math.max(1, height >> (tryHarder ? 9 : 7));, +, +    for (int i = 0; i < height; i += rowStep) {, +      for (int i = height - 1; i > 0; i -= rowStep) {, +      for (int i = 0; i < height; i += rowStep) {, +      for (int i = height - 1; i > 0; i -= rowStep) {, +  private static ResultPoint[] findVertices180(BitMatrix matrix, boolean tryHarder) {, +    int rowStep = Math.max(1, height >> (tryHarder ? 9 : 7));, +, +    for (int i = height - 1; i > 0; i -= rowStep) {, +      for (int i = 0; i < height; i += rowStep) {, +      for (int i = height - 1; i > 0; i -= rowStep) {, +      for (int i = 0; i < height; i += rowStep) {, +, +    float v0x = vertices[0].getX();, +    float v0y = vertices[0].getY();, +    float v2x = vertices[2].getX();, +    float v2y = vertices[2].getY();]