[+++ b/core/src/com/google/zxing/common/BitMatrix.java, + * <p>Represents a square matrix of bits. In function arguments below, and throughout the common, + * module, x is the column position, and y is the row position. The ordering is always x, y., + * The origin is at the top-left.</p>, + * <p>Internally the bits are represented in a compact 1-D array of 32-bit ints., + * The ordering of bits is row-major. Within each int, the least significant bits are used first,, + * meaning they represent lower x values. This is compatible with BitArray's implementation.</p>, + * @author dswitkin@google.com (Daniel Switkin), +   * <p>Gets the requested bit, where true means black.</p>, +   *, +   * @param x The horizontal component (i.e. which column), +   * @param y The vertical component (i.e. which row), +  public boolean get(int x, int y) {, +    int offset = y * dimension + x;, +   * @param x The horizontal component (i.e. which column), +   * @param y The vertical component (i.e. which row), +  public void set(int x, int y) {, +    int offset = y * dimension + x;, +   * @param x The horizontal component (i.e. which column), +   * @param y The vertical component (i.e. which row), +  public void flip(int x, int y) {, +    int offset = y * dimension + x;, +   * @param left The horizontal position to begin at (inclusive), +   * @param top The vertical position to begin at (inclusive), +   * @param width The width of the region, +   * @param height The height of the region, +  public void setRegion(int left, int top, int width, int height) {, +    if (top < 0 || left < 0) {, +      throw new IllegalArgumentException("left and top must be nonnegative");, +    int right = left + width;, +    int bottom = top + height;, +    if (bottom > dimension || right > dimension) {, +          "top + height and left + width must be <= matrix dimension");, +    for (int y = top; y < bottom; y++) {, +      int yoffset = dimension * y;, +      for (int x = left; x < right; x++) {, +        int xoffset = yoffset + x;, +        bits[xoffset >> 5] |= 1 << (xoffset & 0x1F);, +    for (int y = 0; y < dimension; y++) {, +      for (int x = 0; x < dimension; x++) {, +        result.append(get(x, y) ? "X " : "  ");, +++ b/core/src/com/google/zxing/common/BitMatrix.java, + * <p>Represents a square matrix of bits. In function arguments below, and throughout the common, + * module, x is the column position, and y is the row position. The ordering is always x, y., + * The origin is at the top-left.</p>, + * <p>Internally the bits are represented in a compact 1-D array of 32-bit ints., + * The ordering of bits is row-major. Within each int, the least significant bits are used first,, + * meaning they represent lower x values. This is compatible with BitArray's implementation.</p>, + * @author dswitkin@google.com (Daniel Switkin), +   * <p>Gets the requested bit, where true means black.</p>, +   *, +   * @param x The horizontal component (i.e. which column), +   * @param y The vertical component (i.e. which row), +  public boolean get(int x, int y) {, +    int offset = y * dimension + x;, +   * @param x The horizontal component (i.e. which column), +   * @param y The vertical component (i.e. which row), +  public void set(int x, int y) {, +    int offset = y * dimension + x;, +   * @param x The horizontal component (i.e. which column), +   * @param y The vertical component (i.e. which row), +  public void flip(int x, int y) {, +    int offset = y * dimension + x;, +   * @param left The horizontal position to begin at (inclusive), +   * @param top The vertical position to begin at (inclusive), +   * @param width The width of the region, +   * @param height The height of the region, +  public void setRegion(int left, int top, int width, int height) {, +    if (top < 0 || left < 0) {, +      throw new IllegalArgumentException("left and top must be nonnegative");, +    int right = left + width;, +    int bottom = top + height;, +    if (bottom > dimension || right > dimension) {, +          "top + height and left + width must be <= matrix dimension");, +    for (int y = top; y < bottom; y++) {, +      int yoffset = dimension * y;, +      for (int x = left; x < right; x++) {, +        int xoffset = yoffset + x;, +        bits[xoffset >> 5] |= 1 << (xoffset & 0x1F);, +    for (int y = 0; y < dimension; y++) {, +      for (int x = 0; x < dimension; x++) {, +        result.append(get(x, y) ? "X " : "  ");, +++ b/core/src/com/google/zxing/common/DefaultGridSampler.java, +            bits.set(j >> 1, i);, +++ b/core/src/com/google/zxing/common/BitMatrix.java, + * <p>Represents a square matrix of bits. In function arguments below, and throughout the common, + * module, x is the column position, and y is the row position. The ordering is always x, y., + * The origin is at the top-left.</p>, + * <p>Internally the bits are represented in a compact 1-D array of 32-bit ints., + * The ordering of bits is row-major. Within each int, the least significant bits are used first,, + * meaning they represent lower x values. This is compatible with BitArray's implementation.</p>, + * @author dswitkin@google.com (Daniel Switkin), +   * <p>Gets the requested bit, where true means black.</p>, +   *, +   * @param x The horizontal component (i.e. which column), +   * @param y The vertical component (i.e. which row), +  public boolean get(int x, int y) {, +    int offset = y * dimension + x;, +   * @param x The horizontal component (i.e. which column), +   * @param y The vertical component (i.e. which row)]