[+++ b/core/src/com/google/zxing/common/BitArray.java, +   *  at or beyond this given index, +   * @see #getNextUnset(int), +    // mask off lesser bits first, +    currentBits &= ~((1 << (from & 0x1F)) - 1);, +    while (currentBits == 0) {, +      if (++bitsOffset == bits.length) {, +        return size;, +      currentBits = bits[bitsOffset];, +    int result = (bitsOffset << 5) + Integer.numberOfTrailingZeros(currentBits);, +    return result > size ? size : result;, +, +  /**, +   * @see #getNextSet(int), +   */, +  public int getNextUnset(int from) {, +    if (from >= size) {, +      return size;, +    }, +    int bitsOffset = from >> 5;, +    int currentBits = ~bits[bitsOffset];, +    // mask off lesser bits first, +    currentBits &= ~((1 << (from & 0x1F)) - 1);, +    while (currentBits == 0) {, +      if (++bitsOffset == bits.length) {, +        return size;, +      }, +      currentBits = ~bits[bitsOffset];, +    }, +    int result = (bitsOffset << 5) + Integer.numberOfTrailingZeros(currentBits);, +    return result > size ? size : result;, +++ b/core/src/com/google/zxing/common/BitArray.java, +   *  at or beyond this given index, +   * @see #getNextUnset(int), +    // mask off lesser bits first, +    currentBits &= ~((1 << (from & 0x1F)) - 1);, +    while (currentBits == 0) {, +      if (++bitsOffset == bits.length) {, +        return size;, +      currentBits = bits[bitsOffset];, +    int result = (bitsOffset << 5) + Integer.numberOfTrailingZeros(currentBits);, +    return result > size ? size : result;, +, +  /**, +   * @see #getNextSet(int), +   */, +  public int getNextUnset(int from) {, +    if (from >= size) {, +      return size;, +    }, +    int bitsOffset = from >> 5;, +    int currentBits = ~bits[bitsOffset];, +    // mask off lesser bits first, +    currentBits &= ~((1 << (from & 0x1F)) - 1);, +    while (currentBits == 0) {, +      if (++bitsOffset == bits.length) {, +        return size;, +      }, +      currentBits = ~bits[bitsOffset];, +    }, +    int result = (bitsOffset << 5) + Integer.numberOfTrailingZeros(currentBits);, +    return result > size ? size : result;, +++ b/core/src/com/google/zxing/oned/Code128Reader.java, +    nextStart = row.getNextUnset(nextStart);, +    if (!row.isRange(nextStart,, +                     Math.min(row.getSize(), nextStart + (nextStart - lastStart) / 2),, +++ b/core/src/com/google/zxing/common/BitArray.java, +   *  at or beyond this given index, +   * @see #getNextUnset(int), +    // mask off lesser bits first, +    currentBits &= ~((1 << (from & 0x1F)) - 1);, +    while (currentBits == 0) {, +      if (++bitsOffset == bits.length) {, +        return size;, +      currentBits = bits[bitsOffset];, +    int result = (bitsOffset << 5) + Integer.numberOfTrailingZeros(currentBits);, +    return result > size ? size : result;, +, +  /**, +   * @see #getNextSet(int), +   */, +  public int getNextUnset(int from) {, +    if (from >= size) {, +      return size;, +    }, +    int bitsOffset = from >> 5;, +    int currentBits = ~bits[bitsOffset];, +    // mask off lesser bits first, +    currentBits &= ~((1 << (from & 0x1F)) - 1);, +    while (currentBits == 0) {, +      if (++bitsOffset == bits.length) {, +        return size;, +      }, +      currentBits = ~bits[bitsOffset];, +    }, +    int result = (bitsOffset << 5) + Integer.numberOfTrailingZeros(currentBits);, +    return result > size ? size : result;, +++ b/core/src/com/google/zxing/oned/Code128Reader.java, +    nextStart = row.getNextUnset(nextStart);, +    if (!row.isRange(nextStart,]