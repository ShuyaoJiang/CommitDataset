[+++ b/android/src/com/google/zxing/client/android/RGBMonochromeBitmapSource.java, +import com.google.zxing.common.BaseMonochromeBitmapSource;, +final class RGBMonochromeBitmapSource extends BaseMonochromeBitmapSource {, +  private final int[] rgbRow;, +  private int cachedRow;, +    rgbRow = new int[image.getWidth()];, +    cachedRow = -1;, +   * only uses shifts., +  public int getLuminance(int x, int y) {, +    int pixel;, +    if (cachedRow == y) {, +      pixel = rgbRow[x];, +    } else {, +      pixel = image.getPixel(x, y);, +    }, +, +  public void cacheRowForLuminance(int y) {, +    if (y != cachedRow) {, +      int width = image.width();, +      image.getPixels(rgbRow, 0, width, 0, y, width, 1);, +      cachedRow = y;, +    }, +  }, +, +++ b/android/src/com/google/zxing/client/android/RGBMonochromeBitmapSource.java, +import com.google.zxing.common.BaseMonochromeBitmapSource;, +final class RGBMonochromeBitmapSource extends BaseMonochromeBitmapSource {, +  private final int[] rgbRow;, +  private int cachedRow;, +    rgbRow = new int[image.getWidth()];, +    cachedRow = -1;, +   * only uses shifts., +  public int getLuminance(int x, int y) {, +    int pixel;, +    if (cachedRow == y) {, +      pixel = rgbRow[x];, +    } else {, +      pixel = image.getPixel(x, y);, +    }, +, +  public void cacheRowForLuminance(int y) {, +    if (y != cachedRow) {, +      int width = image.width();, +      image.getPixels(rgbRow, 0, width, 0, y, width, 1);, +      cachedRow = y;, +    }, +  }, +, +++ b/core/src/com/google/zxing/MonochromeBitmapSource.java, +   * Retrieves the luminance at the pixel x,y in the bitmap. This method is only used for estimating, +   * the black point and implementing getBlackRow() - it is not meant for decoding., +   *, +   * @param x The x coordinate in the image., +   * @param y The y coordinate in the image., +   * @return The luminance value between 0 and 255., +   */, +  int getLuminance(int x, int y);, +, +  /**, +   * Some implementations can be much more efficient by fetching an entire row of luminance data at, +   * a time. This method should be called once per row before calling getLuminance()., +   *, +   * @param y The row to cache., +   */, +  void cacheRowForLuminance(int y);, +, +  /**, +++ b/android/src/com/google/zxing/client/android/RGBMonochromeBitmapSource.java, +import com.google.zxing.common.BaseMonochromeBitmapSource;, +final class RGBMonochromeBitmapSource extends BaseMonochromeBitmapSource {, +  private final int[] rgbRow;, +  private int cachedRow;, +    rgbRow = new int[image.getWidth()];, +    cachedRow = -1;, +   * only uses shifts., +  public int getLuminance(int x, int y) {, +    int pixel;, +    if (cachedRow == y) {, +      pixel = rgbRow[x];, +    } else {, +      pixel = image.getPixel(x, y);, +    }, +, +  public void cacheRowForLuminance(int y) {, +    if (y != cachedRow) {, +      int width = image.width();, +      image.getPixels(rgbRow, 0, width, 0, y, width, 1);, +      cachedRow = y;, +    }, +  }, +, +++ b/core/src/com/google/zxing/MonochromeBitmapSource.java, +   * Retrieves the luminance at the pixel x,y in the bitmap. This method is only used for estimating, +   * the black point and implementing getBlackRow() - it is not meant for decoding., +   *, +   * @param x The x coordinate in the image., +   * @param y The y coordinate in the image., +   * @return The luminance value between 0 and 255., +   */, +  int getLuminance(int x, int y);]