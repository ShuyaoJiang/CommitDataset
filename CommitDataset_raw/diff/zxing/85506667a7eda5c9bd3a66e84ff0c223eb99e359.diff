[+++ b/core/src/com/google/zxing/oned/ITFReader.java, +		/**, +		 * To avoid false positives with 2D barcodes, make, +		 * an assumption that the decoded string must be at least 6 digits., +		 */, +		if (resultString.length() < 6 || resultString.length() % 2 == 1), +		validateQuietZone(row, startPattern[0]);, +, +		return startPattern;, +	}, +, +	 * , +	 * , +	 */, +	/**, +	 * , +	 * zone must be at least 10 times the width of a narrow line.  Scan back until, +	 * we either get to the start of the barcode or match the necessary number of , +	 * quiet zone pixels., +	 * , +	 * Note: Its assumed the row is reversed when using this method to find, +	 * quiet zone after the end pattern., +	 * , +	 * @param row					- The bit array representing the scanned barcode. , +	 * @param startPattern		- The index into row of the start or end pattern., +	 * @throws ReaderException - If the quiet zone cannot be found, a ReaderException is thrown., +	private void validateQuietZone(BitArray row, int startPattern) throws ReaderException {, +, +		int quietCount=this.narrowLineWidth * 10;	// expect to find this many pixels of quiet zone, +		, +		int i=0;, +		for (i=startPattern-1; quietCount>0 && i>=0; i--), +		{, +			if (row.get(i)==true), +				break;, +			quietCount--;, +		}, +		if (quietCount!=0), +		{, +			// Unable to find the necessary number of quiet zone pixels., +		if (i>this.narrowLineWidth*20), +		{, +			// The distance from the image edge to the start of the quiet zone , +			// is twice the size of the quiet zone. , +			// This is unrealistic as the barcode should mostly fill the camera viewfinder., +			// This implies that this is a false positive., +			throw ReaderException.getInstance();, +		}, +		, +		validateQuietZone(row, endPattern[0]);]