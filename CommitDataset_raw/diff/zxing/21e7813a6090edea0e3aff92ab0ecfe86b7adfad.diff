[+++ b/androidtest/src/com/google/zxing/client/androidtest/BenchmarkActivity.java, +        Log.v(TAG, item.toString());, +++ b/androidtest/src/com/google/zxing/client/androidtest/BenchmarkActivity.java, +        Log.v(TAG, item.toString());, +++ b/androidtest/src/com/google/zxing/client/androidtest/BenchmarkItem.java, +    assert(runs > 0);, +  @Override, +  public String toString() {, +    StringBuffer result = new StringBuffer();, +    result.append(mDecoded ? ("DECODED " + mFormat.toString() + ": ") : "FAILED: ");, +    result.append(mPath);, +    result.append(" (");, +    result.append(getAverageTime());, +    result.append(" ms average)\n  ");, +    int size = mTimes.length;, +    for (int x = 0; x < size; x++) {, +      result.append(mTimes[x]);, +      result.append(" ");, +    }, +    return result.toString();, +  /**, +   * Calculates the average time but throws out the maximum as an outlier first., +   *, +   * @return The average decoding time in milliseconds., +   */, +  private int getAverageTime() {, +    int max = mTimes[0];, +      int time = mTimes[x];, +      total += time;, +      if (time > max) {, +        max = time;, +    }, +    total -= max;, +    size--;, +++ b/androidtest/src/com/google/zxing/client/androidtest/BenchmarkActivity.java, +        Log.v(TAG, item.toString());, +++ b/androidtest/src/com/google/zxing/client/androidtest/BenchmarkItem.java, +    assert(runs > 0);, +  @Override, +  public String toString() {, +    StringBuffer result = new StringBuffer();, +    result.append(mDecoded ? ("DECODED " + mFormat.toString() + ": ") : "FAILED: ");, +    result.append(mPath);, +    result.append(" (");, +    result.append(getAverageTime());, +    result.append(" ms average)\n  ");, +    int size = mTimes.length;, +    for (int x = 0; x < size; x++) {, +      result.append(mTimes[x]);, +      result.append(" ");, +    }, +    return result.toString();, +  /**, +   * Calculates the average time but throws out the maximum as an outlier first., +   *, +   * @return The average decoding time in milliseconds., +   */, +  private int getAverageTime() {, +    int max = mTimes[0];, +      int time = mTimes[x];, +      total += time;, +      if (time > max) {, +        max = time;, +    }, +    total -= max;, +    size--;, +++ b/androidtest/src/com/google/zxing/client/androidtest/BenchmarkThread.java, +import android.os.Debug;, +import java.util.Arrays;, +    // Try to get in a known state before starting the benchmark, +    System.gc();, +      Arrays.sort(files);, +      // Using this call instead of getting the time should eliminate a lot of variability due to, +      // scheduling and what else is happening in the system., +      long now = Debug.threadCpuTimeNanos();, +      now = Debug.threadCpuTimeNanos() - now;, +      item.addResult((int) (now / 1000));]