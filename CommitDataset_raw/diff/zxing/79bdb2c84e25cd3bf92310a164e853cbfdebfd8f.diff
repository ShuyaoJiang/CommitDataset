[+++ b/core/src/main/java/com/google/zxing/oned/Code128Writer.java, +       if (oldCode == CODE_CODE_A) {, +         return CODE_CODE_A;, +       }, +        if (c < ' ' || (oldCode == CODE_CODE_A && (c < '`' || (c >= ESCAPE_FNC_1 && c <= ESCAPE_FNC_4)))) {, +          // can continue in code A, encodes ASCII 0 to 95 or FNC1 to FNC4, +    if (oldCode == CODE_CODE_A && lookahead == CType.FNC_1) {, +      return CODE_CODE_A;, +    }, +++ b/core/src/main/java/com/google/zxing/oned/Code128Writer.java, +       if (oldCode == CODE_CODE_A) {, +         return CODE_CODE_A;, +       }, +        if (c < ' ' || (oldCode == CODE_CODE_A && (c < '`' || (c >= ESCAPE_FNC_1 && c <= ESCAPE_FNC_4)))) {, +          // can continue in code A, encodes ASCII 0 to 95 or FNC1 to FNC4, +    if (oldCode == CODE_CODE_A && lookahead == CType.FNC_1) {, +      return CODE_CODE_A;, +    }, +++ b/core/src/test/java/com/google/zxing/oned/Code128WriterTestCase.java, +  private static final String FNC4A = "11101011110";, +  private static final String FNC4B = "10111101110";, +  private static final String LF = "10000110010";, +    String expected = QUIET_SPACE + START_CODE_B + FNC4B + "10011100110" + "11001110010" + "11001011100" + "11100011010" + STOP + QUIET_SPACE;, +  public void testEncodeWithFncsAndNumberInCodesetA() throws Exception {, +    String toEncode = "\n" + "\u00f1" + "\u00f4" + "1" + "\n";, +, +    String expected = QUIET_SPACE + START_CODE_A + LF + FNC1 + FNC4A + "10011100110" + LF + "10101111000" + STOP + QUIET_SPACE;, +, +    BitMatrix result = writer.encode(toEncode, BarcodeFormat.CODE_128, 0, 0);, +, +    String actual = BitMatrixTestCase.matrixToString(result);, +, +    assertEquals(expected, actual);, +  }, +, +  @Test]