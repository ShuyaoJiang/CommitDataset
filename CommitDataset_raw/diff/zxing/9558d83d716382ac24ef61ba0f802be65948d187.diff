[+++ b/cpp/core/src/zxing/Binarizer.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +++ b/cpp/core/src/zxing/Binarizer.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +++ b/cpp/core/src/zxing/Result.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +++ b/cpp/core/src/zxing/Binarizer.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +++ b/cpp/core/src/zxing/Result.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +++ b/cpp/core/src/zxing/common/BitArray.cpp, +    throw IllegalArgumentException("invalid call to BitArray::setRange");, +++ b/cpp/core/src/zxing/Binarizer.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +++ b/cpp/core/src/zxing/Result.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +++ b/cpp/core/src/zxing/common/BitArray.cpp, +    throw IllegalArgumentException("invalid call to BitArray::setRange");, +++ b/cpp/core/src/zxing/common/DetectorResult.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +++ b/cpp/core/src/zxing/Binarizer.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +++ b/cpp/core/src/zxing/Result.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +++ b/cpp/core/src/zxing/common/BitArray.cpp, +    throw IllegalArgumentException("invalid call to BitArray::setRange");, +++ b/cpp/core/src/zxing/common/DetectorResult.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +++ b/cpp/core/src/zxing/common/GlobalHistogramBinarizer.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +++ b/cpp/core/src/zxing/Binarizer.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +++ b/cpp/core/src/zxing/Result.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +++ b/cpp/core/src/zxing/common/BitArray.cpp, +    throw IllegalArgumentException("invalid call to BitArray::setRange");, +++ b/cpp/core/src/zxing/common/DetectorResult.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +++ b/cpp/core/src/zxing/common/GlobalHistogramBinarizer.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +++ b/cpp/core/src/zxing/common/HybridBinarizer.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +  GlobalHistogramBinarizer(source), matrix_(NULL), cached_row_(NULL), cached_row_num_(-1) {, +Ref<BitMatrix> HybridBinarizer::getBlackMatrix() {, +  // Calculates the final BitMatrix once for all requests. This could be called once from the, +  // constructor instead, but there are some advantages to doing it lazily, such as making, +  // profiling easier, and not doing heavy lifting when callers don't expect it., +  if (matrix_) {, +    return matrix_;, +  }, +  LuminanceSource& source = *getLuminanceSource();, +  if (source.getWidth() >= MINIMUM_DIMENSION && source.getHeight() >= MINIMUM_DIMENSION) {, +    unsigned char* luminances = source.getMatrix();, +    int width = source.getWidth();, +    int height = source.getHeight();, +    if ((width & 0x07) != 0) {, +    if ((height & 0x07) != 0) {, +, +    Ref<BitMatrix> newMatrix (new BitMatrix(width, height));, +    calculateThresholdForBlock(luminances, subWidth, subHeight, width, height, blackPoints, newMatrix);, +    matrix_ = newMatrix;, +, +    matrix_ = GlobalHistogramBinarizer::getBlackMatrix();, +  return matrix_;, +++ b/cpp/core/src/zxing/Binarizer.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +++ b/cpp/core/src/zxing/Result.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +++ b/cpp/core/src/zxing/common/BitArray.cpp, +    throw IllegalArgumentException("invalid call to BitArray::setRange");, +++ b/cpp/core/src/zxing/common/DetectorResult.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +++ b/cpp/core/src/zxing/common/GlobalHistogramBinarizer.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +++ b/cpp/core/src/zxing/common/HybridBinarizer.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +  GlobalHistogramBinarizer(source), matrix_(NULL), cached_row_(NULL), cached_row_num_(-1) {, +Ref<BitMatrix> HybridBinarizer::getBlackMatrix() {, +  // Calculates the final BitMatrix once for all requests. This could be called once from the, +  // constructor instead, but there are some advantages to doing it lazily, such as making, +  // profiling easier, and not doing heavy lifting when callers don't expect it., +  if (matrix_) {, +    return matrix_;, +  }, +  LuminanceSource& source = *getLuminanceSource();, +  if (source.getWidth() >= MINIMUM_DIMENSION && source.getHeight() >= MINIMUM_DIMENSION) {, +    unsigned char* luminances = source.getMatrix();, +    int width = source.getWidth();, +    int height = source.getHeight();, +    if ((width & 0x07) != 0) {, +    if ((height & 0x07) != 0) {, +, +    Ref<BitMatrix> newMatrix (new BitMatrix(width, height));, +    calculateThresholdForBlock(luminances, subWidth, subHeight, width, height, blackPoints, newMatrix);, +    matrix_ = newMatrix;, +, +    matrix_ = GlobalHistogramBinarizer::getBlackMatrix();, +  return matrix_;, +++ b/cpp/core/src/zxing/common/HybridBinarizer.h, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-]