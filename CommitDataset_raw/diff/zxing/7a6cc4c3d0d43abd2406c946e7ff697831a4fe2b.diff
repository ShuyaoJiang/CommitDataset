[+++ b/core/src/com/google/zxing/common/detector/WhiteRectangleDetector.java, +  /**, +   * @throws NotFoundException if image is too small, +   */, +  public WhiteRectangleDetector(BitMatrix image) throws NotFoundException {, +    if (upInit < 0 || leftInit < 0 || downInit >= height || rightInit >= width) {, +      throw NotFoundException.getNotFoundInstance();, +    }, +  /**, +   * @throws NotFoundException if image is too small, +   */, +  public WhiteRectangleDetector(BitMatrix image, int initSize, int x, int y) throws NotFoundException {, +    int halfsize = initSize >> 1;, +    if (upInit < 0 || leftInit < 0 || downInit >= height || rightInit >= width) {, +      throw NotFoundException.getNotFoundInstance();, +    }, +   * @return {@link ResultPoint[]} describing the corners of the rectangular, +++ b/core/src/com/google/zxing/common/detector/WhiteRectangleDetector.java, +  /**, +   * @throws NotFoundException if image is too small, +   */, +  public WhiteRectangleDetector(BitMatrix image) throws NotFoundException {, +    if (upInit < 0 || leftInit < 0 || downInit >= height || rightInit >= width) {, +      throw NotFoundException.getNotFoundInstance();, +    }, +  /**, +   * @throws NotFoundException if image is too small, +   */, +  public WhiteRectangleDetector(BitMatrix image, int initSize, int x, int y) throws NotFoundException {, +    int halfsize = initSize >> 1;, +    if (upInit < 0 || leftInit < 0 || downInit >= height || rightInit >= width) {, +      throw NotFoundException.getNotFoundInstance();, +    }, +   * @return {@link ResultPoint[]} describing the corners of the rectangular, +++ b/core/src/com/google/zxing/datamatrix/decoder/DecodedBitStreamParser.java, +        if (edifactValue == 0x1F) {  // 011111, +    int codewordPosition = 2;, +    int d1 = unrandomize255State(bits.readBits(8), codewordPosition++);, +      count = 250 * (d1 - 249) + unrandomize255State(bits.readBits(8), codewordPosition++);, +      bytes[i] = unrandomize255State(bits.readBits(8), codewordPosition++);, +++ b/core/src/com/google/zxing/common/detector/WhiteRectangleDetector.java, +  /**, +   * @throws NotFoundException if image is too small, +   */, +  public WhiteRectangleDetector(BitMatrix image) throws NotFoundException {, +    if (upInit < 0 || leftInit < 0 || downInit >= height || rightInit >= width) {, +      throw NotFoundException.getNotFoundInstance();, +    }, +  /**, +   * @throws NotFoundException if image is too small, +   */, +  public WhiteRectangleDetector(BitMatrix image, int initSize, int x, int y) throws NotFoundException {, +    int halfsize = initSize >> 1;, +    if (upInit < 0 || leftInit < 0 || downInit >= height || rightInit >= width) {, +      throw NotFoundException.getNotFoundInstance();, +    }, +   * @return {@link ResultPoint[]} describing the corners of the rectangular, +++ b/core/src/com/google/zxing/datamatrix/decoder/DecodedBitStreamParser.java, +        if (edifactValue == 0x1F) {  // 011111, +    int codewordPosition = 2;, +    int d1 = unrandomize255State(bits.readBits(8), codewordPosition++);, +      count = 250 * (d1 - 249) + unrandomize255State(bits.readBits(8), codewordPosition++);, +      bytes[i] = unrandomize255State(bits.readBits(8), codewordPosition++);, +++ b/core/src/com/google/zxing/datamatrix/detector/Detector.java, +  public Detector(BitMatrix image) throws NotFoundException {, +++ b/core/src/com/google/zxing/common/detector/WhiteRectangleDetector.java, +  /**, +   * @throws NotFoundException if image is too small, +   */, +  public WhiteRectangleDetector(BitMatrix image) throws NotFoundException {, +    if (upInit < 0 || leftInit < 0 || downInit >= height || rightInit >= width) {, +      throw NotFoundException.getNotFoundInstance();, +    }, +  /**, +   * @throws NotFoundException if image is too small, +   */, +  public WhiteRectangleDetector(BitMatrix image, int initSize, int x, int y) throws NotFoundException {, +    int halfsize = initSize >> 1;, +    if (upInit < 0 || leftInit < 0 || downInit >= height || rightInit >= width) {, +      throw NotFoundException.getNotFoundInstance();, +    }, +   * @return {@link ResultPoint[]} describing the corners of the rectangular, +++ b/core/src/com/google/zxing/datamatrix/decoder/DecodedBitStreamParser.java, +        if (edifactValue == 0x1F) {  // 011111, +    int codewordPosition = 2;, +    int d1 = unrandomize255State(bits.readBits(8), codewordPosition++);, +      count = 250 * (d1 - 249) + unrandomize255State(bits.readBits(8), codewordPosition++);, +      bytes[i] = unrandomize255State(bits.readBits(8), codewordPosition++);, +++ b/core/src/com/google/zxing/datamatrix/detector/Detector.java, +  public Detector(BitMatrix image) throws NotFoundException {, +++ b/core/src/com/google/zxing/pdf417/decoder/DecodedBitStreamParser.java, +            } else if (subModeCh == AS) {, +++ b/core/src/com/google/zxing/common/detector/WhiteRectangleDetector.java, +  /**, +   * @throws NotFoundException if image is too small, +   */, +  public WhiteRectangleDetector(BitMatrix image) throws NotFoundException {, +    if (upInit < 0 || leftInit < 0 || downInit >= height || rightInit >= width) {, +      throw NotFoundException.getNotFoundInstance();, +    }]