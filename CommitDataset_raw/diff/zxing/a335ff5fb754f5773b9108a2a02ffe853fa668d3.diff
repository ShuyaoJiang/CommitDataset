[+++ b/core/src/com/google/zxing/pdf417/encoder/PDF417.java, +  private static final float HEIGHT = 2.0f; //mm, +  private boolean compact;, +  private boolean byteCompaction;, +  private int minCols;, +  private int maxCols;, +  private int maxRows;, +  private int minRows;, +, +  public PDF417() {, +    this(false);, +  }, +  , +  public PDF417(boolean compact) {, +    this.compact = compact;, +    minCols = 2;, +    maxCols = 30;, +    maxRows = 30;, +    minRows = 2;, +  }, +      if (compact) {, +        encodeChar(STOP_PATTERN, 1, logic.getCurrentRow()); // encodes stop line for compact pdf417, +      } else {, +  }, +    String highLevel = PDF417HighLevelEncoder.encodeHighLevel(msg, byteCompaction);, +    for (int cols = minCols; cols <= maxCols; cols++) {, +      if (rows < minRows) {, +      if (rows > maxRows) {, +  /**, +   * Sets max/min row/col values, +   */, +  void setDimensions(int maxCols, int minCols, int maxRows, int minRows) {, +    this.maxCols = maxCols;, +    this.minCols = minCols;, +    this.maxRows = maxRows;, +    this.minRows = minRows;, +  }, +  , +  /**, +   * Sets byte compaction to be true or false, +   * @param byteCompaction, +   */, +  void setByteCompaction(boolean byteCompaction) {, +    this.byteCompaction = byteCompaction;, +  }, +  , +  /**, +   * Sets compact to be true or false, +   * @param compact, +   */, +  void setCompact(boolean compact) {, +    this.compact = compact;, +  }, +, +++ b/core/src/com/google/zxing/pdf417/encoder/PDF417.java, +  private static final float HEIGHT = 2.0f; //mm, +  private boolean compact;, +  private boolean byteCompaction;, +  private int minCols;, +  private int maxCols;, +  private int maxRows;, +  private int minRows;, +, +  public PDF417() {, +    this(false);, +  }, +  , +  public PDF417(boolean compact) {, +    this.compact = compact;, +    minCols = 2;, +    maxCols = 30;, +    maxRows = 30;, +    minRows = 2;, +  }, +      if (compact) {, +        encodeChar(STOP_PATTERN, 1, logic.getCurrentRow()); // encodes stop line for compact pdf417, +      } else {, +  }, +    String highLevel = PDF417HighLevelEncoder.encodeHighLevel(msg, byteCompaction);, +    for (int cols = minCols; cols <= maxCols; cols++) {, +      if (rows < minRows) {, +      if (rows > maxRows) {, +  /**, +   * Sets max/min row/col values, +   */, +  void setDimensions(int maxCols, int minCols, int maxRows, int minRows) {, +    this.maxCols = maxCols;, +    this.minCols = minCols;, +    this.maxRows = maxRows;, +    this.minRows = minRows;, +  }, +  , +  /**, +   * Sets byte compaction to be true or false, +   * @param byteCompaction, +   */, +  void setByteCompaction(boolean byteCompaction) {, +    this.byteCompaction = byteCompaction;, +  }, +  ]