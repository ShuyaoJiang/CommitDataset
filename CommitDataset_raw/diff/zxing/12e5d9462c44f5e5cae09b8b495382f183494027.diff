[+++ b/core/src/com/google/zxing/oned/AbstractOneDReader.java, +  public static final int PATTERN_MATCH_RESULT_SCALE_FACTOR = 1 << INTEGER_MATH_SHIFT;, +      return doDecode(image, hints);, +      boolean tryHarder = hints != null && hints.containsKey(DecodeHintType.TRY_HARDER);, +        Result result = doDecode(rotatedImage, hints);, +  /**, +   * We're going to examine rows from the middle outward, searching alternately above and below the, +   * middle, and farther out each time. rowStep is the number of rows between each successive, +   * attempt above and below the middle. So we'd scan row middle, then middle - rowStep, then, +   * middle + rowStep, then middle - (2 * rowStep), etc., +   * rowStep is bigger as the image is taller, but is always at least 1. We've somewhat arbitrarily, +   * decided that moving up and down by about 1/16 of the image is pretty good; we try more of the, +   * image if "trying harder"., +   *, +   * @param image The image to decode, +   * @param hints Any hints that were requested, +   * @return The contents of the decoded barcode, +   * @throws ReaderException Any spontaneous errors which occur, +   */, +  private Result doDecode(MonochromeBitmapSource image, Hashtable hints) throws ReaderException {, +    boolean tryHarder = hints != null && hints.containsKey(DecodeHintType.TRY_HARDER);, +      maxLines = height; // Look at the whole image, not just the center, +      maxLines = 9; // Nine rows spaced 1/16 apart is roughly the middle half of the image, +   * target pattern. This is reported as the ratio of the total variance from the expected pattern, +   * proportions across all pattern elements, to the length of the pattern., +   * @param maxIndividualVariance The most any counter can differ before we give up, +    maxIndividualVariance = (maxIndividualVariance * unitBarWidth) >> INTEGER_MATH_SHIFT;, +++ b/core/src/com/google/zxing/oned/AbstractOneDReader.java, +  public static final int PATTERN_MATCH_RESULT_SCALE_FACTOR = 1 << INTEGER_MATH_SHIFT;, +      return doDecode(image, hints);, +      boolean tryHarder = hints != null && hints.containsKey(DecodeHintType.TRY_HARDER);, +        Result result = doDecode(rotatedImage, hints);, +  /**, +   * We're going to examine rows from the middle outward, searching alternately above and below the, +   * middle, and farther out each time. rowStep is the number of rows between each successive, +   * attempt above and below the middle. So we'd scan row middle, then middle - rowStep, then, +   * middle + rowStep, then middle - (2 * rowStep), etc., +   * rowStep is bigger as the image is taller, but is always at least 1. We've somewhat arbitrarily, +   * decided that moving up and down by about 1/16 of the image is pretty good; we try more of the, +   * image if "trying harder"., +   *, +   * @param image The image to decode, +   * @param hints Any hints that were requested, +   * @return The contents of the decoded barcode, +   * @throws ReaderException Any spontaneous errors which occur, +   */, +  private Result doDecode(MonochromeBitmapSource image, Hashtable hints) throws ReaderException {, +    boolean tryHarder = hints != null && hints.containsKey(DecodeHintType.TRY_HARDER);, +      maxLines = height; // Look at the whole image, not just the center, +      maxLines = 9; // Nine rows spaced 1/16 apart is roughly the middle half of the image, +   * target pattern. This is reported as the ratio of the total variance from the expected pattern, +   * proportions across all pattern elements, to the length of the pattern., +   * @param maxIndividualVariance The most any counter can differ before we give up, +    maxIndividualVariance = (maxIndividualVariance * unitBarWidth) >> INTEGER_MATH_SHIFT;, +++ b/core/src/com/google/zxing/oned/AbstractUPCEANReader.java, +  private static final int MAX_INDIVIDUAL_VARIANCE = (int) (PATTERN_MATCH_RESULT_SCALE_FACTOR * 0.7f);, +    if (length == 0) return false;, +, +    int sum = 0;, +++ b/core/src/com/google/zxing/oned/AbstractOneDReader.java, +  public static final int PATTERN_MATCH_RESULT_SCALE_FACTOR = 1 << INTEGER_MATH_SHIFT;, +      return doDecode(image, hints);, +      boolean tryHarder = hints != null && hints.containsKey(DecodeHintType.TRY_HARDER);, +        Result result = doDecode(rotatedImage, hints);, +  /**, +   * We're going to examine rows from the middle outward, searching alternately above and below the, +   * middle, and farther out each time. rowStep is the number of rows between each successive, +   * attempt above and below the middle. So we'd scan row middle, then middle - rowStep, then, +   * middle + rowStep, then middle - (2 * rowStep), etc., +   * rowStep is bigger as the image is taller, but is always at least 1. We've somewhat arbitrarily, +   * decided that moving up and down by about 1/16 of the image is pretty good; we try more of the, +   * image if "trying harder"., +   *, +   * @param image The image to decode, +   * @param hints Any hints that were requested, +   * @return The contents of the decoded barcode, +   * @throws ReaderException Any spontaneous errors which occur, +   */, +  private Result doDecode(MonochromeBitmapSource image, Hashtable hints) throws ReaderException {, +    boolean tryHarder = hints != null && hints.containsKey(DecodeHintType.TRY_HARDER);, +      maxLines = height; // Look at the whole image, not just the center, +      maxLines = 9; // Nine rows spaced 1/16 apart is roughly the middle half of the image, +   * target pattern. This is reported as the ratio of the total variance from the expected pattern, +   * proportions across all pattern elements, to the length of the pattern., +   * @param maxIndividualVariance The most any counter can differ before we give up, +    maxIndividualVariance = (maxIndividualVariance * unitBarWidth) >> INTEGER_MATH_SHIFT;, +++ b/core/src/com/google/zxing/oned/AbstractUPCEANReader.java, +  private static final int MAX_INDIVIDUAL_VARIANCE = (int) (PATTERN_MATCH_RESULT_SCALE_FACTOR * 0.7f);, +    if (length == 0) return false;, +, +    int sum = 0;, +++ b/core/src/com/google/zxing/oned/Code128Reader.java, +  private static final int MAX_INDIVIDUAL_VARIANCE = (int) (PATTERN_MATCH_RESULT_SCALE_FACTOR * 0.35f);, +++ b/core/src/com/google/zxing/oned/AbstractOneDReader.java, +  public static final int PATTERN_MATCH_RESULT_SCALE_FACTOR = 1 << INTEGER_MATH_SHIFT;, +      return doDecode(image, hints);, +      boolean tryHarder = hints != null && hints.containsKey(DecodeHintType.TRY_HARDER);, +        Result result = doDecode(rotatedImage, hints);, +  /**, +   * We're going to examine rows from the middle outward, searching alternately above and below the]