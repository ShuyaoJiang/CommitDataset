[+++ b/core/src/com/google/zxing/pdf417/PDF417Reader.java, +/*, + * Copyright 2009 ZXing authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +, +    return new Result(decoderResult.getText(), decoderResult.getRawBytes(), points, BarcodeFormat.PDF417);, +++ b/core/src/com/google/zxing/pdf417/PDF417Reader.java, +/*, + * Copyright 2009 ZXing authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +, +    return new Result(decoderResult.getText(), decoderResult.getRawBytes(), points, BarcodeFormat.PDF417);, +++ b/core/src/com/google/zxing/pdf417/decoder/BitMatrixParser.java, + * Copyright 2009 ZXing authors, +, +, +  private int rows = 0;, +  private int columns = 0;, +  private int leftColumnECData = 0;, +  private int rightColumnECData = 0;, +  private int eraseCount = 0;, +  private int[] erasures = null;, +  private int ecLevel = -1;, +    int[] rowCounters = new int[width];, +    int[] codewords = new int[MAX_CW_CAPACITY];, +    int next = 0;, +    int matchingConsecutiveScans = 0;, +    boolean rowInProgress = false;, +    int rowNumber = 0;, +    int rowHeight = 0;, +   * @param array the array, +   * @param size  the size to trim it to, +  private static int[] trimArray(int[] array, int size) {, +   * @param rowCounters an array containing the counts of black pixels for each column, +   * @param rowNumber   the current row number of codewords., +   * @param rowHeight   the height of this row in pixels., +   * @param moduleWidth the size of a module in pixels., +   * @param codewords   the codeword array to save codewords into., +   * @param next        the next available index into the codewords array., +  int processRow(int[] rowCounters, int rowNumber, int rowHeight,, +                 float moduleWidth, int[] codewords, int next) throws ReaderException {, +   * @param counters  array of pixel counter corresponding to each Bar/Space pattern., +  private static long getSymbol(int[] counters, int rowNumber, float moduleWidth) {, +    int symbol = 0;, +    long cw = 0;, +    if (i == -1) {, +    } else {, +      cw = CODEWORD_TABLE[i] - 1;, +      cw %= 929;, +   * @param symbol the symbol from the barcode., +  private int findCodewordIndex(long symbol) {, +    int upto = SYMBOL_TABLE.length;, +      if (symbol < SYMBOL_TABLE[mid]) {, +      } else if (symbol > SYMBOL_TABLE[mid]) {, +   * Each PDF417 symbol character consists of four bar elements and four space, +   * elements, each of which can be one to six modules wide. The four bar and, +   * four space elements shall measure 17 modules in total., +   * @param rowCounters an array containing the counts of black pixels for each column, +   * @param rowNumber   the current row number of codewords., +   * @param rowHeight   the height of this row in pixels., +   * @param moduleWidth the size of a module in pixels., +   * @param codewords   the codeword array to save codewords into., +   * @param next        the next available index into the codewords array., +  int processRow1(int[] rowCounters, int rowNumber, int rowHeight,, +                  float moduleWidth, int[] codewords, int next) throws ReaderException {, +    int[] counters = new int[8];, +    int columnNumber = 0;, +  private static final int[] SYMBOL_TABLE = {0x1025e, 0x1027a, 0x1029e,, +  private static final int[] CODEWORD_TABLE = {2627, 1819, 2622, 2621, 1813,, +++ b/core/src/com/google/zxing/pdf417/PDF417Reader.java, +/*, + * Copyright 2009 ZXing authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");]