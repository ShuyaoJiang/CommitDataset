[+++ b/cpp/core/src/zxing/InvertedLuminanceSource.cpp, +using zxing::boolean;, +using zxing::Ref;, +using zxing::LuminanceSource;, +, +zxing::boolean InvertedLuminanceSource::isCropSupported() const {, +  return delegate->isCropSupported();, +}, +, +Ref<LuminanceSource> InvertedLuminanceSource::crop(int left, int top, int width, int height) const {, +  return Ref<LuminanceSource>(new InvertedLuminanceSource(delegate->crop(left, top, width, height)));, +}, +, +boolean InvertedLuminanceSource::isRotateSupported() const {, +  return delegate->isRotateSupported();, +}, +, +Ref<LuminanceSource> InvertedLuminanceSource::invert() const {, +  return delegate;, +}, +, +Ref<LuminanceSource> InvertedLuminanceSource::rotateCounterClockwise() const {, +  return Ref<LuminanceSource>(new InvertedLuminanceSource(delegate->rotateCounterClockwise()));, +}, +, +++ b/cpp/core/src/zxing/InvertedLuminanceSource.cpp, +using zxing::boolean;, +using zxing::Ref;, +using zxing::LuminanceSource;, +, +zxing::boolean InvertedLuminanceSource::isCropSupported() const {, +  return delegate->isCropSupported();, +}, +, +Ref<LuminanceSource> InvertedLuminanceSource::crop(int left, int top, int width, int height) const {, +  return Ref<LuminanceSource>(new InvertedLuminanceSource(delegate->crop(left, top, width, height)));, +}, +, +boolean InvertedLuminanceSource::isRotateSupported() const {, +  return delegate->isRotateSupported();, +}, +, +Ref<LuminanceSource> InvertedLuminanceSource::invert() const {, +  return delegate;, +}, +, +Ref<LuminanceSource> InvertedLuminanceSource::rotateCounterClockwise() const {, +  return Ref<LuminanceSource>(new InvertedLuminanceSource(delegate->rotateCounterClockwise()));, +}, +, +++ b/cpp/core/src/zxing/InvertedLuminanceSource.h, +#include <zxing/ZXing.h>, +, +  boolean isCropSupported() const;, +  Ref<LuminanceSource> crop(int left, int top, int width, int height) const;, +, +  boolean isRotateSupported() const;, +, +  virtual Ref<LuminanceSource> invert() const;, +, +  Ref<LuminanceSource> rotateCounterClockwise() const;, +++ b/cpp/core/src/zxing/InvertedLuminanceSource.cpp, +using zxing::boolean;, +using zxing::Ref;, +using zxing::LuminanceSource;, +, +zxing::boolean InvertedLuminanceSource::isCropSupported() const {, +  return delegate->isCropSupported();, +}, +, +Ref<LuminanceSource> InvertedLuminanceSource::crop(int left, int top, int width, int height) const {, +  return Ref<LuminanceSource>(new InvertedLuminanceSource(delegate->crop(left, top, width, height)));, +}, +, +boolean InvertedLuminanceSource::isRotateSupported() const {, +  return delegate->isRotateSupported();, +}, +, +Ref<LuminanceSource> InvertedLuminanceSource::invert() const {, +  return delegate;, +}, +, +Ref<LuminanceSource> InvertedLuminanceSource::rotateCounterClockwise() const {, +  return Ref<LuminanceSource>(new InvertedLuminanceSource(delegate->rotateCounterClockwise()));, +}, +, +++ b/cpp/core/src/zxing/InvertedLuminanceSource.h, +#include <zxing/ZXing.h>, +, +  boolean isCropSupported() const;, +  Ref<LuminanceSource> crop(int left, int top, int width, int height) const;, +, +  boolean isRotateSupported() const;, +, +  virtual Ref<LuminanceSource> invert() const;, +, +  Ref<LuminanceSource> rotateCounterClockwise() const;, +++ b/cpp/core/src/zxing/LuminanceSource.cpp, +Ref<LuminanceSource> LuminanceSource::crop(int, int, int, int) const {, +Ref<LuminanceSource> LuminanceSource::rotateCounterClockwise() const {]