[+++ b/androidtest/AndroidManifest.xml, +          android:versionName="1.12", +          android:versionCode="4">, +  <!-- We require Cupcake (Android 1.5) or later. -->, +  <!-- Donut-specific flags which allow us to run on large and high dpi screens. -->, +  <supports-screens, +      android:largeScreens="true", +      android:normalScreens="true", +      android:smallScreens="true", +      android:anyDensity="true"/>, +++ b/androidtest/AndroidManifest.xml, +          android:versionName="1.12", +          android:versionCode="4">, +  <!-- We require Cupcake (Android 1.5) or later. -->, +  <!-- Donut-specific flags which allow us to run on large and high dpi screens. -->, +  <supports-screens, +      android:largeScreens="true", +      android:normalScreens="true", +      android:smallScreens="true", +      android:anyDensity="true"/>, +++ b/androidtest/src/com/google/zxing/client/androidtest/CameraManager.java, +import android.os.Build;, +import android.util.Log;, + *, + * @author dswitkin@google.com (Daniel Switkin), +  private static final int MIN_FRAME_WIDTH = 240;, +  private static final int MIN_FRAME_HEIGHT = 240;, +  private static final int MAX_FRAME_WIDTH = 480;, +  private static final int MAX_FRAME_HEIGHT = 360;, +  private static CameraManager cameraManager;, +  private Camera camera;, +  private final Context context;, +  private Point screenResolution;, +  private Point cameraResolution;, +  private Rect framingRect;, +  private Handler previewHandler;, +  private int previewMessage;, +  private Handler autoFocusHandler;, +  private int autoFocusMessage;, +  private boolean initialized;, +  private boolean previewing;, +  private int previewFormat;, +  private String previewFormatString;, +  private boolean useOneShotPreviewCallback;, +  /**, +   * Preview frames are delivered here, which we pass on to the registered handler. Make sure to, +   * clear the handler so it will only receive one message., +   */, +  private final Camera.PreviewCallback previewCallback = new Camera.PreviewCallback() {, +    public void onPreviewFrame(byte[] data, Camera camera) {, +      if (!useOneShotPreviewCallback) {, +        camera.setPreviewCallback(null);, +      }, +      if (previewHandler != null) {, +        Message message = previewHandler.obtainMessage(previewMessage, cameraResolution.x,, +            cameraResolution.y, data);, +        message.sendToTarget();, +        previewHandler = null;, +      }, +    }, +  };, +, +  /**, +   * Autofocus callbacks arrive here, and are dispatched to the Handler which requested them., +   */, +  private final Camera.AutoFocusCallback autoFocusCallback = new Camera.AutoFocusCallback() {, +    public void onAutoFocus(boolean success, Camera camera) {, +      if (autoFocusHandler != null) {, +        Message message = autoFocusHandler.obtainMessage(autoFocusMessage, success);, +        // Barcode Scanner needs to insert a delay here because it does continuous focus,, +        // but this test app does not, so send the message immediately., +        message.sendToTarget();, +        autoFocusHandler = null;, +      }, +    }, +  };, +, +  /**, +   * Initializes this static object with the Context of the calling Activity., +   *, +   * @param context The Activity which wants to use the camera., +   */, +  public static void init(Context context) {, +    if (cameraManager == null) {, +      cameraManager = new CameraManager(context);, +  /**, +   * Gets the CameraManager singleton instance., +   *, +   * @return A reference to the CameraManager singleton., +   */, +    return cameraManager;, +    this.context = context;, +    camera = null;, +    initialized = false;, +    previewing = false;, +, +    // Camera.setOneShotPreviewCallback() has a race condition in Cupcake, so we use the older, +    // Camera.setPreviewCallback() on 1.5 and earlier. For Donut and later, we need to use, +    // the more efficient one shot callback, as the older one can swamp the system and cause it, +    // to run out of memory. We can't use SDK_INT because it was introduced in the Donut SDK.]