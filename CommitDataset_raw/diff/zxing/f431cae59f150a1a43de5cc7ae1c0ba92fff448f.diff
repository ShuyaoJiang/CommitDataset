[+++ b/core/src/com/google/zxing/oned/AbstractOneDReader.java, +      // While we have the image data in a BitArray, it's fairly cheap to reverse it in place to, +      // handle decoding upside down barcodes., +++ b/core/src/com/google/zxing/oned/AbstractOneDReader.java, +      // While we have the image data in a BitArray, it's fairly cheap to reverse it in place to, +      // handle decoding upside down barcodes., +++ b/core/test/src/com/google/zxing/common/AbstractBlackBoxTestCase.java, +import java.awt.geom.AffineTransform;, +import java.awt.image.AffineTransformOp;, +import java.util.Vector;, + * @author dswitkin@google.com (Daniel Switkin), +  private class TestResult {, +    public int mustPassCount;, +    public float rotation;, +, +    TestResult(int mustPassCount, float rotation) {, +      this.mustPassCount = mustPassCount;, +      this.rotation = rotation;, +    }, +  }, +, +  private Vector<TestResult> testResults;, +    testResults = new Vector<TestResult>();, +  }, +, +  /**, +   * Adds a new test for the current directory of images., +   *, +   * @param mustPassCount The number of images which must decode for the test to pass., +   * @param rotation The rotation in degrees clockwise to use for this test., +   */, +  protected void addTest(int mustPassCount, float rotation) {, +    testResults.add(new TestResult(mustPassCount, rotation));, +    assertTrue(testResults.size() > 0);, +    int[] passedCounts = new int[testResults.size()];, +      for (int x = 0; x < testResults.size(); x++) {, +        if (testOneImage(image, testResults.get(x).rotation, expectedText)) {, +          passedCounts[x]++;, +        }, +      }, +    }, +, +    for (int x = 0; x < testResults.size(); x++) {, +      System.out.println("Rotation " + testResults.get(x).rotation + " degrees: " + passedCounts[x] +, +          " of " + imageFiles.length + " images passed (" + testResults.get(x).mustPassCount +, +          " required)");, +      assertTrue("Rotation " + testResults.get(x).rotation + " degrees: Too many images failed",, +          passedCounts[x] >= testResults.get(x).mustPassCount);, +    }, +  }, +, +  private boolean testOneImage(BufferedImage image, float rotationInDegrees, String expectedText) {, +    BufferedImage rotatedImage = rotateImage(image, rotationInDegrees);, +    MonochromeBitmapSource source = new BufferedImageMonochromeBitmapSource(rotatedImage);, +    Result result;, +    try {, +      result = barcodeReader.decode(source);, +    } catch (ReaderException re) {, +      System.out.println(re);, +      return false;, +    }, +, +    if (expectedFormat != result.getBarcodeFormat()) {, +      System.out.println("Format mismatch: expected '" + expectedFormat + "' but got '" +, +          result.getBarcodeFormat() + "' (rotation: " + rotationInDegrees + ")");, +      return false;, +    }, +, +    String resultText = result.getText();, +    if (!expectedText.equals(resultText)) {, +      System.out.println("Mismatch: expected '" + expectedText + "' but got '" + resultText +, +          "' (rotation: " + rotationInDegrees + ")");, +      return false;, +      return false;, +          result.getBarcodeFormat() + "' (rotation: " + rotationInDegrees + ")");, +          resultText + "' (rotation: " + rotationInDegrees + ")");, +    return true;, +  private static BufferedImage rotateImage(BufferedImage original, float degrees) {, +    if (degrees != 0.0f) {, +      AffineTransform at = new AffineTransform();, +      at.rotate(Math.toRadians(degrees), original.getWidth() / 2, original.getHeight() / 2);, +      AffineTransformOp op = new AffineTransformOp(at, AffineTransformOp.TYPE_BICUBIC);, +      return op.filter(original, null);, +    } else {, +      return original;, +    }, +  }, +, +++ b/core/src/com/google/zxing/oned/AbstractOneDReader.java, +      // While we have the image data in a BitArray, it's fairly cheap to reverse it in place to, +      // handle decoding upside down barcodes., +++ b/core/test/src/com/google/zxing/common/AbstractBlackBoxTestCase.java, +import java.awt.geom.AffineTransform;, +import java.awt.image.AffineTransformOp;, +import java.util.Vector;, + * @author dswitkin@google.com (Daniel Switkin), +  private class TestResult {, +    public int mustPassCount;, +    public float rotation;, +]