[+++ b/AUTHORS, +Christoph Schulz (creatale GmbH), +Hartmut Neubauer (Schweers Informationstechnologie GmbH), +++ b/AUTHORS, +Christoph Schulz (creatale GmbH), +Hartmut Neubauer (Schweers Informationstechnologie GmbH), +++ b/core/src/com/google/zxing/pdf417/decoder/BitMatrixParser.java, +public final class BitMatrixParser {, +  //private int rows = 0;, +    //int width = bitMatrix.getWidth();, +    for (int i = 0; i < height; i++) {, +      next = processRow(rowNumber, codewords, next);, +  int processRow(int rowNumber, int[] codewords, int next) throws FormatException {, +        if (bitMatrix.get(i + (MODULES_IN_SYMBOL - 1 - mask), rowNumber)) {, +        if (rightColumnECData == leftColumnECData && leftColumnECData > 0) {, +          //ecLevel = ((rightColumnECData % 30) - rows % 3) / 3;          , +          ecLevel = (rightColumnECData % 30) / 3;, +   * Trim the array to the required size., +   *, +   * @param array the array, +   * @param size  the size to trim it to, +   * @return the new trimmed array, +   */, +  private static int[] trimArray(int[] array, int size) {, +    if (size < 0) {, +      throw new IllegalArgumentException();, +    }, +    int[] a = new int[size];, +    System.arraycopy(array, 0, a, 0, size);, +    return a;, +  }, +, +  /**, +  public static int getCodeword(long symbol) {, +    return (CODEWORD_TABLE[i] - 1) % 929; , +  public static final int[] SYMBOL_TABLE = {0x1025e, 0x1027a, 0x1029e,, +++ b/AUTHORS, +Christoph Schulz (creatale GmbH), +Hartmut Neubauer (Schweers Informationstechnologie GmbH), +++ b/core/src/com/google/zxing/pdf417/decoder/BitMatrixParser.java, +public final class BitMatrixParser {, +  //private int rows = 0;, +    //int width = bitMatrix.getWidth();, +    for (int i = 0; i < height; i++) {, +      next = processRow(rowNumber, codewords, next);, +  int processRow(int rowNumber, int[] codewords, int next) throws FormatException {, +        if (bitMatrix.get(i + (MODULES_IN_SYMBOL - 1 - mask), rowNumber)) {, +        if (rightColumnECData == leftColumnECData && leftColumnECData > 0) {, +          //ecLevel = ((rightColumnECData % 30) - rows % 3) / 3;          , +          ecLevel = (rightColumnECData % 30) / 3;, +   * Trim the array to the required size., +   *, +   * @param array the array, +   * @param size  the size to trim it to, +   * @return the new trimmed array, +   */, +  private static int[] trimArray(int[] array, int size) {, +    if (size < 0) {, +      throw new IllegalArgumentException();, +    }, +    int[] a = new int[size];, +    System.arraycopy(array, 0, a, 0, size);, +    return a;, +  }, +, +  /**, +  public static int getCodeword(long symbol) {, +    return (CODEWORD_TABLE[i] - 1) % 929; , +  public static final int[] SYMBOL_TABLE = {0x1025e, 0x1027a, 0x1029e,, +++ b/core/src/com/google/zxing/pdf417/detector/Detector.java, +import com.google.zxing.common.PerspectiveTransform;, + * @author Schweers Informationstechnologie GmbH (hartmut.neubauer@schweers.de), + * @author creatale GmbH (christoph.schulz@creatale.de), +    int rowStep = 8;, +    ResultPoint[] vertices = findVertices(matrix, rowStep);, +      vertices = findVertices180(matrix, rowStep);, +        correctVertices(matrix, vertices, true);, +      correctVertices(matrix, vertices, false);, +    int dimension = computeDimension(vertices[12], vertices[14],, +        vertices[13], vertices[15], moduleWidth);, +    int yDimension = Math.max(computeYDimension(vertices[12], vertices[14],, +        vertices[13], vertices[15], moduleWidth), dimension);, +    // Deskew and over-sample image., +    BitMatrix linesMatrix = sampleLines(vertices, dimension, yDimension);, +    BitMatrix linesGrid = new LinesSampler(linesMatrix, dimension).sample();, +, +    //TODO: verify vertex indices., +    return new DetectorResult(linesGrid, new ResultPoint[]{ , +        vertices[5], vertices[4], vertices[6], vertices[7]});, +   * @param rowStep the step size for iterating rows (every n-th row)., +  private static ResultPoint[] findVertices(BitMatrix matrix, int rowStep) {, +    ResultPoint[] result = new ResultPoint[16];, +   * @param rowStep the step size for iterating rows (every n-th row)., +  private static ResultPoint[] findVertices180(BitMatrix matrix, int rowStep) {, +, +    // TODO: Change assumption about barcode location., +, +    ResultPoint[] result = new ResultPoint[16];, +  /**, +   * <p>Correct the vertices by searching for top and bottom vertices of wide]