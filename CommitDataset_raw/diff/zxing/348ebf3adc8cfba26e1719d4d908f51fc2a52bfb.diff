[+++ b/cpp/blackboxtest.sh, +if [ "$*" != "" ]; then, +	formats="$*", +else, +fi, +	for pic in `ls ${blackboxpath}/${format}-*/*.{jpg,JPG,gif,GIF,png,PNG} 2>/dev/null | sort -n`; do, +		tmp="${pic}", +		tmp="${tmp%JPG}";, +		tmp="${tmp%jpg}";, +		tmp="${tmp%gif}";, +		tmp="${tmp%GIF}";, +		tmp="${tmp%png}";, +		tmp="${tmp%PNG}";, +		txt="${tmp}txt";, +++ b/cpp/blackboxtest.sh, +if [ "$*" != "" ]; then, +	formats="$*", +else, +fi, +	for pic in `ls ${blackboxpath}/${format}-*/*.{jpg,JPG,gif,GIF,png,PNG} 2>/dev/null | sort -n`; do, +		tmp="${pic}", +		tmp="${tmp%JPG}";, +		tmp="${tmp%jpg}";, +		tmp="${tmp%gif}";, +		tmp="${tmp%GIF}";, +		tmp="${tmp%png}";, +		tmp="${tmp%PNG}";, +		txt="${tmp}txt";, +++ b/cpp/core/src/zxing/BinaryBitmap.cpp, + *  Copyright 2010 ZXing authors All rights reserved., +, +	bool BinaryBitmap::isCropSupported() const {, +	  return getLuminanceSource()->isCropSupported();, +	}, +, +	Ref<BinaryBitmap> BinaryBitmap::crop(int left, int top, int width, int height) {, +	  return Ref<BinaryBitmap> (new BinaryBitmap(binarizer_->createBinarizer(getLuminanceSource()->crop(left, top, width, height))));, +	}, +, +	bool BinaryBitmap::isRotateSupported() const {, +	  return getLuminanceSource()->isRotateSupported();, +	}, +, +	Ref<BinaryBitmap> BinaryBitmap::rotateCounterClockwise() {, +	  return Ref<BinaryBitmap> (new BinaryBitmap(binarizer_->createBinarizer(getLuminanceSource()->rotateCounterClockwise())));, +	}, +++ b/cpp/blackboxtest.sh, +if [ "$*" != "" ]; then, +	formats="$*", +else, +fi, +	for pic in `ls ${blackboxpath}/${format}-*/*.{jpg,JPG,gif,GIF,png,PNG} 2>/dev/null | sort -n`; do, +		tmp="${pic}", +		tmp="${tmp%JPG}";, +		tmp="${tmp%jpg}";, +		tmp="${tmp%gif}";, +		tmp="${tmp%GIF}";, +		tmp="${tmp%png}";, +		tmp="${tmp%PNG}";, +		txt="${tmp}txt";, +++ b/cpp/core/src/zxing/BinaryBitmap.cpp, + *  Copyright 2010 ZXing authors All rights reserved., +, +	bool BinaryBitmap::isCropSupported() const {, +	  return getLuminanceSource()->isCropSupported();, +	}, +, +	Ref<BinaryBitmap> BinaryBitmap::crop(int left, int top, int width, int height) {, +	  return Ref<BinaryBitmap> (new BinaryBitmap(binarizer_->createBinarizer(getLuminanceSource()->crop(left, top, width, height))));, +	}, +, +	bool BinaryBitmap::isRotateSupported() const {, +	  return getLuminanceSource()->isRotateSupported();, +	}, +, +	Ref<BinaryBitmap> BinaryBitmap::rotateCounterClockwise() {, +	  return Ref<BinaryBitmap> (new BinaryBitmap(binarizer_->createBinarizer(getLuminanceSource()->rotateCounterClockwise())));, +	}, +++ b/cpp/core/src/zxing/common/HybridBinarizer.cpp, +/*, + *  HybridBinarizer.cpp, + *  zxing, + *, + *  Copyright 2010 ZXing authors All rights reserved., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +#include <zxing/common/HybridBinarizer.h>, +]