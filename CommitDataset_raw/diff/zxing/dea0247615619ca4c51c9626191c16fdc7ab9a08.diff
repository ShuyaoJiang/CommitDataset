[+++ b/core/src/com/google/zxing/common/BaseMonochromeBitmapSource.java, +        throw new IllegalArgumentException("Unknown method");, +++ b/core/src/com/google/zxing/common/BaseMonochromeBitmapSource.java, +        throw new IllegalArgumentException("Unknown method");, +++ b/core/src/com/google/zxing/qrcode/decoder/FormatInformation.java, +++ b/core/src/com/google/zxing/common/BaseMonochromeBitmapSource.java, +        throw new IllegalArgumentException("Unknown method");, +++ b/core/src/com/google/zxing/qrcode/decoder/FormatInformation.java, +++ b/core/src/com/google/zxing/qrcode/detector/AlignmentPattern.java, +    if (Math.abs(i - posY) <= moduleSize && Math.abs(j - posX) <= moduleSize) {, +      float moduleSizeDiff = Math.abs(moduleSize - estimatedModuleSize);, +      return moduleSizeDiff <= 1.0f || moduleSizeDiff / estimatedModuleSize <= 1.0f;, +    }, +    return false;, +++ b/core/src/com/google/zxing/common/BaseMonochromeBitmapSource.java, +        throw new IllegalArgumentException("Unknown method");, +++ b/core/src/com/google/zxing/qrcode/decoder/FormatInformation.java, +++ b/core/src/com/google/zxing/qrcode/detector/AlignmentPattern.java, +    if (Math.abs(i - posY) <= moduleSize && Math.abs(j - posX) <= moduleSize) {, +      float moduleSizeDiff = Math.abs(moduleSize - estimatedModuleSize);, +      return moduleSizeDiff <= 1.0f || moduleSizeDiff / estimatedModuleSize <= 1.0f;, +    }, +    return false;, +++ b/core/src/com/google/zxing/qrcode/detector/FinderPattern.java, +    if (Math.abs(i - posY) <= moduleSize && Math.abs(j - posX) <= moduleSize) {, +      float moduleSizeDiff = Math.abs(moduleSize - estimatedModuleSize);, +      return moduleSizeDiff <= 1.0f || moduleSizeDiff / estimatedModuleSize <= 1.0f;, +    }, +    return false;, +++ b/core/src/com/google/zxing/common/BaseMonochromeBitmapSource.java, +        throw new IllegalArgumentException("Unknown method");, +++ b/core/src/com/google/zxing/qrcode/decoder/FormatInformation.java, +++ b/core/src/com/google/zxing/qrcode/detector/AlignmentPattern.java, +    if (Math.abs(i - posY) <= moduleSize && Math.abs(j - posX) <= moduleSize) {, +      float moduleSizeDiff = Math.abs(moduleSize - estimatedModuleSize);, +      return moduleSizeDiff <= 1.0f || moduleSizeDiff / estimatedModuleSize <= 1.0f;, +    }, +    return false;, +++ b/core/src/com/google/zxing/qrcode/detector/FinderPattern.java, +    if (Math.abs(i - posY) <= moduleSize && Math.abs(j - posX) <= moduleSize) {, +      float moduleSizeDiff = Math.abs(moduleSize - estimatedModuleSize);, +      return moduleSizeDiff <= 1.0f || moduleSizeDiff / estimatedModuleSize <= 1.0f;, +    }, +    return false;, +++ b/zxingorg/src/com/google/zxing/web/DecodeServlet.java, +import com.google.zxing.BarcodeFormat;, +import java.util.Vector;, +    HINTS = new Hashtable<DecodeHintType, Object>(5);, +    Vector possibleFormats = new Vector();, +    possibleFormats.add(BarcodeFormat.UPC_A);, +    possibleFormats.add(BarcodeFormat.UPC_E);, +    possibleFormats.add(BarcodeFormat.EAN_8);, +    possibleFormats.add(BarcodeFormat.EAN_13);, +    possibleFormats.add(BarcodeFormat.CODE_39);, +    possibleFormats.add(BarcodeFormat.CODE_128);, +    possibleFormats.add(BarcodeFormat.ITF);, +    possibleFormats.add(BarcodeFormat.QR_CODE);, +    possibleFormats.add(BarcodeFormat.DATAMATRIX);, +    HINTS.put(DecodeHintType.POSSIBLE_FORMATS, possibleFormats);]