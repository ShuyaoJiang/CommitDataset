[+++ b/cpp/core/src/zxing/oned/Code39Reader.cpp, +  std::vector<int>& theCounters (counters);, +    int size = theCounters.size();, +    theCounters.resize(0);, +    theCounters.resize(size); }, +  std::string& result (decodeRowResult);, +  result.clear();, +  vector<int> start (findAsteriskPattern(row, theCounters));, +    recordPattern(row, nextStart, theCounters);, +    int pattern = toNarrowWidePattern(theCounters);, +    result.append(1, decodedChar);, +    for (int i = 0, end=theCounters.size(); i < end; i++) {, +      nextStart += theCounters[i];, +  result.resize(decodeRowResult.length()-1);// remove asterisk, +  for (int i = 0, e = theCounters.size(); i < e; i++) {, +    lastPatternSize += theCounters[i];, +    int max = result.length() - 1;, +    if (result[max] != ALPHABET[total % 43]) {, +    result.resize(max);, +  if (result.length() == 0) {, +    resultString = decodeExtended(result);, +    resultString = Ref<String>(new String(result));, +++ b/cpp/core/src/zxing/oned/Code39Reader.cpp, +  std::vector<int>& theCounters (counters);, +    int size = theCounters.size();, +    theCounters.resize(0);, +    theCounters.resize(size); }, +  std::string& result (decodeRowResult);, +  result.clear();, +  vector<int> start (findAsteriskPattern(row, theCounters));, +    recordPattern(row, nextStart, theCounters);, +    int pattern = toNarrowWidePattern(theCounters);, +    result.append(1, decodedChar);, +    for (int i = 0, end=theCounters.size(); i < end; i++) {, +      nextStart += theCounters[i];, +  result.resize(decodeRowResult.length()-1);// remove asterisk, +  for (int i = 0, e = theCounters.size(); i < e; i++) {, +    lastPatternSize += theCounters[i];, +    int max = result.length() - 1;, +    if (result[max] != ALPHABET[total % 43]) {, +    result.resize(max);, +  if (result.length() == 0) {, +    resultString = decodeExtended(result);, +    resultString = Ref<String>(new String(result));, +++ b/cpp/core/src/zxing/oned/Code93Reader.cpp, +Code93Reader::Code93Reader() {, +  decodeRowResult.reserve(20);, +  counters.resize(6);, +}, +, +  vector<int>& theCounters (counters);, +  { // Arrays.fill(counters, 0);, +    int size = theCounters.size();, +    theCounters.resize(0);, +    theCounters.resize(size); }, +  string& result (decodeRowResult);, +  result.clear();, +, +    recordPattern(row, nextStart, theCounters);, +    int pattern = toPattern(theCounters);, +    for(int i=0, e=theCounters.size(); i < e; ++i) {, +      nextStart += theCounters[i];, +  { // Arrays.fill(counters, 0);, +    int size = counters.size();, +    counters.resize(0);, +    counters.resize(size); }, +  vector<int>& theCounters (counters);, +, +  int patternLength = theCounters.size();, +  int counterPosition = 0;, +      theCounters[counterPosition]++;, +        if (toPattern(theCounters) == ASTERISK_ENCODING) {, +        patternStart += theCounters[0] + theCounters[1];, +          theCounters[y - 2] = theCounters[y];, +        theCounters[patternLength - 2] = 0;, +        theCounters[patternLength - 1] = 0;, +      theCounters[counterPosition] = 1;, +++ b/cpp/core/src/zxing/oned/Code39Reader.cpp, +  std::vector<int>& theCounters (counters);, +    int size = theCounters.size();, +    theCounters.resize(0);, +    theCounters.resize(size); }, +  std::string& result (decodeRowResult);, +  result.clear();, +  vector<int> start (findAsteriskPattern(row, theCounters));, +    recordPattern(row, nextStart, theCounters);, +    int pattern = toNarrowWidePattern(theCounters);, +    result.append(1, decodedChar);, +    for (int i = 0, end=theCounters.size(); i < end; i++) {, +      nextStart += theCounters[i];, +  result.resize(decodeRowResult.length()-1);// remove asterisk, +  for (int i = 0, e = theCounters.size(); i < e; i++) {, +    lastPatternSize += theCounters[i];, +    int max = result.length() - 1;, +    if (result[max] != ALPHABET[total % 43]) {, +    result.resize(max);, +  if (result.length() == 0) {, +    resultString = decodeExtended(result);, +    resultString = Ref<String>(new String(result));, +++ b/cpp/core/src/zxing/oned/Code93Reader.cpp]