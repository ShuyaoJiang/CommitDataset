[+++ b/javase/src/com/google/zxing/client/j2se/CommandLineRunner.java, +import java.util.List;, +import java.util.Locale;, +    Config config = new Config();, +    Inputs inputs = new Inputs();, +, +        config.setTryHarder(true);, +        config.setPureBarcode(true);, +        config.setProductsOnly(true);, +        config.setDumpResults(true);, +        config.setDumpBlackPoint(true);, +        config.setMulti(true);, +        config.setBrief(true);, +        config.setRecursive(true);, +        int[] crop = new int[4];, +        for (int i = 0; i < config.getCrop().length; i++) {, +          crop[i] = Integer.parseInt(tokens[i]);, +        config.setCrop(crop);, +          config.setThreads(threads);, +    config.setHints(buildHints(config));, +        addArgumentToInputs(arg, config, inputs);, +    List<DecodeThread> threads = new ArrayList<DecodeThread>(config.getThreads());, +    for (int x = 0; x < config.getThreads(); x++) {, +      DecodeThread thread = new DecodeThread(config, inputs);, +    for (int x = 0; x < config.getThreads(); x++) {, +  private static void addArgumentToInputs(String argument, Config config, Inputs inputs) {, +          String filename = singleFile.getName().toLowerCase(Locale.ENGLISH);, +            if (config.isRecursive()) {, +              addArgumentToInputs(singleFile.getAbsolutePath(), config, inputs);, +  private static Hashtable<DecodeHintType, Object> buildHints(Config config) {, +    if (!config.isProductsOnly()) {, +    if (config.isTryHarder()) {, +    if (config.isPureBarcode()) {, +++ b/javase/src/com/google/zxing/client/j2se/CommandLineRunner.java, +import java.util.List;, +import java.util.Locale;, +    Config config = new Config();, +    Inputs inputs = new Inputs();, +, +        config.setTryHarder(true);, +        config.setPureBarcode(true);, +        config.setProductsOnly(true);, +        config.setDumpResults(true);, +        config.setDumpBlackPoint(true);, +        config.setMulti(true);, +        config.setBrief(true);, +        config.setRecursive(true);, +        int[] crop = new int[4];, +        for (int i = 0; i < config.getCrop().length; i++) {, +          crop[i] = Integer.parseInt(tokens[i]);, +        config.setCrop(crop);, +          config.setThreads(threads);, +    config.setHints(buildHints(config));, +        addArgumentToInputs(arg, config, inputs);, +    List<DecodeThread> threads = new ArrayList<DecodeThread>(config.getThreads());, +    for (int x = 0; x < config.getThreads(); x++) {, +      DecodeThread thread = new DecodeThread(config, inputs);, +    for (int x = 0; x < config.getThreads(); x++) {, +  private static void addArgumentToInputs(String argument, Config config, Inputs inputs) {, +          String filename = singleFile.getName().toLowerCase(Locale.ENGLISH);, +            if (config.isRecursive()) {, +              addArgumentToInputs(singleFile.getAbsolutePath(), config, inputs);, +  private static Hashtable<DecodeHintType, Object> buildHints(Config config) {, +    if (!config.isProductsOnly()) {, +    if (config.isTryHarder()) {, +    if (config.isPureBarcode()) {, +++ b/javase/src/com/google/zxing/client/j2se/Config.java, +/*, + * Copyright 2011 ZXing authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.zxing.client.j2se;, +, +import com.google.zxing.DecodeHintType;, +, +import java.util.Hashtable;, +, +final class Config {, +, +  private Hashtable<DecodeHintType, Object> hints;, +  private boolean tryHarder;, +  private boolean pureBarcode;, +  private boolean productsOnly;, +  private boolean dumpResults;, +  private boolean dumpBlackPoint;, +  private boolean multi;, +  private boolean brief;, +  private boolean recursive;]