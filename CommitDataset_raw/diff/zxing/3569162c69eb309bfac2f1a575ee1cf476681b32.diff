[+++ b/android/src/com/google/zxing/client/android/result/CalendarResultHandler.java, +    String startString = calResult.getStart();, +    appendTime(startString, result, false, false);, +      boolean sameStartEnd = startString.equals(endString);, +      appendTime(endString, result, true, sameStartEnd);, +  private static void appendTime(String when, StringBuilder result, boolean end, boolean sameStartEnd) {, +      // if it's all-day and this is the end date, it's exclusive, so show the user, +      // that it ends on the day before to make more intuitive sense., +      // But don't do it if the event already (incorrectly?) specifies the same start/end, +      if (end && !sameStartEnd) {, +        date = new Date(date.getTime() - 24 * 60 * 60 * 1000);, +      }, +++ b/android/src/com/google/zxing/client/android/result/CalendarResultHandler.java, +    String startString = calResult.getStart();, +    appendTime(startString, result, false, false);, +      boolean sameStartEnd = startString.equals(endString);, +      appendTime(endString, result, true, sameStartEnd);, +  private static void appendTime(String when, StringBuilder result, boolean end, boolean sameStartEnd) {, +      // if it's all-day and this is the end date, it's exclusive, so show the user, +      // that it ends on the day before to make more intuitive sense., +      // But don't do it if the event already (incorrectly?) specifies the same start/end, +      if (end && !sameStartEnd) {, +        date = new Date(date.getTime() - 24 * 60 * 60 * 1000);, +      }, +++ b/android/src/com/google/zxing/client/android/result/ResultHandler.java, +        endMilliseconds = startMilliseconds;, +++ b/android/src/com/google/zxing/client/android/result/CalendarResultHandler.java, +    String startString = calResult.getStart();, +    appendTime(startString, result, false, false);, +      boolean sameStartEnd = startString.equals(endString);, +      appendTime(endString, result, true, sameStartEnd);, +  private static void appendTime(String when, StringBuilder result, boolean end, boolean sameStartEnd) {, +      // if it's all-day and this is the end date, it's exclusive, so show the user, +      // that it ends on the day before to make more intuitive sense., +      // But don't do it if the event already (incorrectly?) specifies the same start/end, +      if (end && !sameStartEnd) {, +        date = new Date(date.getTime() - 24 * 60 * 60 * 1000);, +      }, +++ b/android/src/com/google/zxing/client/android/result/ResultHandler.java, +        endMilliseconds = startMilliseconds;, +++ b/zxing.appspot.com/src/com/google/zxing/web/generator/client/CalendarEventGenerator.java, +    if (date1.after(date2)) {, +      throw new GeneratorException("End date cannot be before start date.");, +    // Specify end date as +1 day since it's exclusive, +    Date date2PlusDay = new Date(date2.getTime() + 24 * 60 * 60 * 1000);, +    output.append(isoFormatter.format(date2PlusDay));, +    if (dateTime1.after(dateTime2)) {, +      throw new GeneratorException("Ending date/time cannot be before starting date/time.");, +++ b/android/src/com/google/zxing/client/android/result/CalendarResultHandler.java, +    String startString = calResult.getStart();, +    appendTime(startString, result, false, false);, +      boolean sameStartEnd = startString.equals(endString);, +      appendTime(endString, result, true, sameStartEnd);, +  private static void appendTime(String when, StringBuilder result, boolean end, boolean sameStartEnd) {, +      // if it's all-day and this is the end date, it's exclusive, so show the user, +      // that it ends on the day before to make more intuitive sense., +      // But don't do it if the event already (incorrectly?) specifies the same start/end, +      if (end && !sameStartEnd) {, +        date = new Date(date.getTime() - 24 * 60 * 60 * 1000);, +      }, +++ b/android/src/com/google/zxing/client/android/result/ResultHandler.java, +        endMilliseconds = startMilliseconds;, +++ b/zxing.appspot.com/src/com/google/zxing/web/generator/client/CalendarEventGenerator.java, +    if (date1.after(date2)) {, +      throw new GeneratorException("End date cannot be before start date.");, +    // Specify end date as +1 day since it's exclusive, +    Date date2PlusDay = new Date(date2.getTime() + 24 * 60 * 60 * 1000);, +    output.append(isoFormatter.format(date2PlusDay));, +    if (dateTime1.after(dateTime2)) {, +      throw new GeneratorException("Ending date/time cannot be before starting date/time.");, +++ b/zxing.appspot.com/war/app.yaml, +version: 4]