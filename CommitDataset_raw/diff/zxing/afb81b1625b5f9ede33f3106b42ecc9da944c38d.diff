[+++ b/cpp/core/src/zxing/ResultPoint.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +#include <zxing/common/detector/math_utils.h>, +, +namespace math_utils = zxing::common::detector::math_utils;, +  float ResultPoint::distance(Ref<ResultPoint> pattern1, Ref<ResultPoint> pattern2) {, +  return math_utils::distance(pattern1->posX_,, +                              pattern1->posY_,, +                              pattern2->posX_,, +                              pattern2->posY_);, +++ b/cpp/core/src/zxing/ResultPoint.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +#include <zxing/common/detector/math_utils.h>, +, +namespace math_utils = zxing::common::detector::math_utils;, +  float ResultPoint::distance(Ref<ResultPoint> pattern1, Ref<ResultPoint> pattern2) {, +  return math_utils::distance(pattern1->posX_,, +                              pattern1->posY_,, +                              pattern2->posX_,, +                              pattern2->posY_);, +++ b/cpp/core/src/zxing/aztec/detector/Detector.cpp, +#include <zxing/common/detector/math_utils.h>, +namespace math_utils = zxing::common::detector::math_utils;, +  int targetcx = math_utils::round(bullEyeCornerPoints[2]->x - ratio * dx);, +  int targetcy = math_utils::round(bullEyeCornerPoints[2]->y - ratio * dy);, +  int targetax = math_utils::round(bullEyeCornerPoints[0]->x + ratio * dx);, +  int targetay = math_utils::round(bullEyeCornerPoints[0]->y + ratio * dy);, +  int targetdx = math_utils::round(bullEyeCornerPoints[3]->x - ratio * dx);, +  int targetdy = math_utils::round(bullEyeCornerPoints[3]->y - ratio * dy);, +  int targetbx = math_utils::round(bullEyeCornerPoints[1]->x + ratio * dx);, +  int targetby = math_utils::round(bullEyeCornerPoints[1]->y + ratio * dy);, +  int targetcx = math_utils::round(pinc->x - ratio * dx);, +  int targetcy = math_utils::round(pinc->y - ratio * dy);, +  int targetax = math_utils::round(pina->x + ratio * dx);, +  int targetay = math_utils::round(pina->y + ratio * dy);, +  int targetdx = math_utils::round(pind->x - ratio * dx);, +  int targetdy = math_utils::round(pind->y - ratio * dy);, +  int targetbx = math_utils::round(pinb->x + ratio * dx);, +  int targetby = math_utils::round(pinb->y + ratio * dy);, +  int cx = math_utils::round((pointA->getX() + pointD->getX() + pointB->getX() + pointC->getX()) / 4);, +  int cy = math_utils::round((pointA->getY() + pointD->getY() + pointB->getY() + pointC->getY()) / 4);, +  cx = math_utils::round((pointA->getX() + pointD->getX() + pointB->getX() + pointC->getX()) / 4);, +  cy = math_utils::round((pointA->getY() + pointD->getY() + pointB->getY() + pointC->getY()) / 4);, +    if (image_->get(math_utils::round(px), math_utils::round(py))) res->set(i);, +    if (image_->get(math_utils::round(px), math_utils::round(py)) != colorModel) {, +++ b/cpp/core/src/zxing/ResultPoint.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +#include <zxing/common/detector/math_utils.h>, +, +namespace math_utils = zxing::common::detector::math_utils;, +  float ResultPoint::distance(Ref<ResultPoint> pattern1, Ref<ResultPoint> pattern2) {, +  return math_utils::distance(pattern1->posX_,, +                              pattern1->posY_,, +                              pattern2->posX_,, +                              pattern2->posY_);, +++ b/cpp/core/src/zxing/aztec/detector/Detector.cpp, +#include <zxing/common/detector/math_utils.h>, +namespace math_utils = zxing::common::detector::math_utils;, +  int targetcx = math_utils::round(bullEyeCornerPoints[2]->x - ratio * dx);, +  int targetcy = math_utils::round(bullEyeCornerPoints[2]->y - ratio * dy);, +  int targetax = math_utils::round(bullEyeCornerPoints[0]->x + ratio * dx);, +  int targetay = math_utils::round(bullEyeCornerPoints[0]->y + ratio * dy);, +  int targetdx = math_utils::round(bullEyeCornerPoints[3]->x - ratio * dx);, +  int targetdy = math_utils::round(bullEyeCornerPoints[3]->y - ratio * dy);, +  int targetbx = math_utils::round(bullEyeCornerPoints[1]->x + ratio * dx);, +  int targetby = math_utils::round(bullEyeCornerPoints[1]->y + ratio * dy);, +  int targetcx = math_utils::round(pinc->x - ratio * dx);, +  int targetcy = math_utils::round(pinc->y - ratio * dy);, +  int targetax = math_utils::round(pina->x + ratio * dx);, +  int targetay = math_utils::round(pina->y + ratio * dy);, +  int targetdx = math_utils::round(pind->x - ratio * dx);, +  int targetdy = math_utils::round(pind->y - ratio * dy);, +  int targetbx = math_utils::round(pinb->x + ratio * dx);, +  int targetby = math_utils::round(pinb->y + ratio * dy);, +  int cx = math_utils::round((pointA->getX() + pointD->getX() + pointB->getX() + pointC->getX()) / 4);, +  int cy = math_utils::round((pointA->getY() + pointD->getY() + pointB->getY() + pointC->getY()) / 4);, +  cx = math_utils::round((pointA->getX() + pointD->getX() + pointB->getX() + pointC->getX()) / 4);, +  cy = math_utils::round((pointA->getY() + pointD->getY() + pointB->getY() + pointC->getY()) / 4);, +    if (image_->get(math_utils::round(px), math_utils::round(py))) res->set(i);, +    if (image_->get(math_utils::round(px), math_utils::round(py)) != colorModel) {, +++ b/cpp/core/src/zxing/aztec/detector/Detector.h, +++ b/cpp/core/src/zxing/ResultPoint.cpp, +// -*- mode:c++; tab-width:2; indent-tabs-mode:nil; c-basic-offset:2 -*-, +#include <zxing/common/detector/math_utils.h>, +, +namespace math_utils = zxing::common::detector::math_utils;, +  float ResultPoint::distance(Ref<ResultPoint> pattern1, Ref<ResultPoint> pattern2) {, +  return math_utils::distance(pattern1->posX_,, +                              pattern1->posY_,, +                              pattern2->posX_,, +                              pattern2->posY_);, +++ b/cpp/core/src/zxing/aztec/detector/Detector.cpp, +#include <zxing/common/detector/math_utils.h>, +namespace math_utils = zxing::common::detector::math_utils;, +  int targetcx = math_utils::round(bullEyeCornerPoints[2]->x - ratio * dx);, +  int targetcy = math_utils::round(bullEyeCornerPoints[2]->y - ratio * dy);, +  int targetax = math_utils::round(bullEyeCornerPoints[0]->x + ratio * dx);, +  int targetay = math_utils::round(bullEyeCornerPoints[0]->y + ratio * dy);, +  int targetdx = math_utils::round(bullEyeCornerPoints[3]->x - ratio * dx);, +  int targetdy = math_utils::round(bullEyeCornerPoints[3]->y - ratio * dy);]