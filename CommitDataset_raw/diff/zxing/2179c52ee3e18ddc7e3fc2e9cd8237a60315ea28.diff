[+++ b/core/src/main/java/com/google/zxing/client/result/URIParsedResult.java, +   * @deprecated see {@link URIResultParser#isPossiblyMaliciousURI(String)}, +  @Deprecated, +    return URIResultParser.isPossiblyMaliciousURI(uri);, +++ b/core/src/main/java/com/google/zxing/client/result/URIParsedResult.java, +   * @deprecated see {@link URIResultParser#isPossiblyMaliciousURI(String)}, +  @Deprecated, +    return URIResultParser.isPossiblyMaliciousURI(uri);, +++ b/core/src/main/java/com/google/zxing/client/result/URIResultParser.java, +  private static final Pattern ALLOWED_URI_CHARS_PATTERN =, +      Pattern.compile("[-._~:/?#\\[\\]@!$&'()*+,;=%A-Za-z0-9]+");, +  private static final Pattern USER_IN_HOST = Pattern.compile(":/*([^/@]+)@[^/]+");, +    if (!isBasicallyValidURI(rawText) || isPossiblyMaliciousURI(rawText)) {, +      return null;, +    }, +    return new URIParsedResult(rawText, null);, +  }, +, +  /**, +   * @return true if the URI contains suspicious patterns that may suggest it intends to, +   *  mislead the user about its true nature. At the moment this looks for the presence, +   *  of user/password syntax in the host/authority portion of a URI which may be used, +   *  in attempts to make the URI's host appear to be other than it is. Example:, +   *  http://yourbank.com@phisher.com  This URI connects to phisher.com but may appear, +   *  to connect to yourbank.com at first glance., +   */, +  static boolean isPossiblyMaliciousURI(String uri) {, +    return !ALLOWED_URI_CHARS_PATTERN.matcher(uri).matches() || USER_IN_HOST.matcher(uri).find();, +++ b/core/src/main/java/com/google/zxing/client/result/URIParsedResult.java, +   * @deprecated see {@link URIResultParser#isPossiblyMaliciousURI(String)}, +  @Deprecated, +    return URIResultParser.isPossiblyMaliciousURI(uri);, +++ b/core/src/main/java/com/google/zxing/client/result/URIResultParser.java, +  private static final Pattern ALLOWED_URI_CHARS_PATTERN =, +      Pattern.compile("[-._~:/?#\\[\\]@!$&'()*+,;=%A-Za-z0-9]+");, +  private static final Pattern USER_IN_HOST = Pattern.compile(":/*([^/@]+)@[^/]+");, +    if (!isBasicallyValidURI(rawText) || isPossiblyMaliciousURI(rawText)) {, +      return null;, +    }, +    return new URIParsedResult(rawText, null);, +  }, +, +  /**, +   * @return true if the URI contains suspicious patterns that may suggest it intends to, +   *  mislead the user about its true nature. At the moment this looks for the presence, +   *  of user/password syntax in the host/authority portion of a URI which may be used, +   *  in attempts to make the URI's host appear to be other than it is. Example:, +   *  http://yourbank.com@phisher.com  This URI connects to phisher.com but may appear, +   *  to connect to yourbank.com at first glance., +   */, +  static boolean isPossiblyMaliciousURI(String uri) {, +    return !ALLOWED_URI_CHARS_PATTERN.matcher(uri).matches() || USER_IN_HOST.matcher(uri).find();, +++ b/core/src/test/java/com/google/zxing/client/result/CalendarParsedResultTestCase.java, +    assertSame(ParsedResultType.TEXT, result.getType());, +++ b/core/src/main/java/com/google/zxing/client/result/URIParsedResult.java, +   * @deprecated see {@link URIResultParser#isPossiblyMaliciousURI(String)}, +  @Deprecated, +    return URIResultParser.isPossiblyMaliciousURI(uri);, +++ b/core/src/main/java/com/google/zxing/client/result/URIResultParser.java, +  private static final Pattern ALLOWED_URI_CHARS_PATTERN =, +      Pattern.compile("[-._~:/?#\\[\\]@!$&'()*+,;=%A-Za-z0-9]+");, +  private static final Pattern USER_IN_HOST = Pattern.compile(":/*([^/@]+)@[^/]+");, +    if (!isBasicallyValidURI(rawText) || isPossiblyMaliciousURI(rawText)) {, +      return null;, +    }, +    return new URIParsedResult(rawText, null);, +  }, +, +  /**, +   * @return true if the URI contains suspicious patterns that may suggest it intends to, +   *  mislead the user about its true nature. At the moment this looks for the presence, +   *  of user/password syntax in the host/authority portion of a URI which may be used, +   *  in attempts to make the URI's host appear to be other than it is. Example:, +   *  http://yourbank.com@phisher.com  This URI connects to phisher.com but may appear, +   *  to connect to yourbank.com at first glance., +   */, +  static boolean isPossiblyMaliciousURI(String uri) {, +    return !ALLOWED_URI_CHARS_PATTERN.matcher(uri).matches() || USER_IN_HOST.matcher(uri).find();, +++ b/core/src/test/java/com/google/zxing/client/result/CalendarParsedResultTestCase.java, +    assertSame(ParsedResultType.TEXT, result.getType());, +++ b/core/src/test/java/com/google/zxing/client/result/ParsedReaderResultTestCase.java, +        "BEGIN:VEVENT\r\nDTEND:20080505T\r\nEND:VEVENT", ParsedResultType.TEXT);, +++ b/core/src/main/java/com/google/zxing/client/result/URIParsedResult.java, +   * @deprecated see {@link URIResultParser#isPossiblyMaliciousURI(String)}, +  @Deprecated, +    return URIResultParser.isPossiblyMaliciousURI(uri);, +++ b/core/src/main/java/com/google/zxing/client/result/URIResultParser.java, +  private static final Pattern ALLOWED_URI_CHARS_PATTERN =, +      Pattern.compile("[-._~:/?#\\[\\]@!$&'()*+,;=%A-Za-z0-9]+");, +  private static final Pattern USER_IN_HOST = Pattern.compile(":/*([^/@]+)@[^/]+");, +    if (!isBasicallyValidURI(rawText) || isPossiblyMaliciousURI(rawText)) {, +      return null;, +    }, +    return new URIParsedResult(rawText, null);, +  }, +, +  /**, +   * @return true if the URI contains suspicious patterns that may suggest it intends to, +   *  mislead the user about its true nature. At the moment this looks for the presence, +   *  of user/password syntax in the host/authority portion of a URI which may be used]