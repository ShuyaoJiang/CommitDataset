[+++ b/cpp/core/src/zxing/aztec/detector/Detector.cpp, +  int dx = bullEyeCornerPoints[0]->getX() - bullEyeCornerPoints[2]->getX();, +  int dy = bullEyeCornerPoints[0]->getY() - bullEyeCornerPoints[2]->getY();, +  int targetcx = math_utils::round(bullEyeCornerPoints[2]->getX() - ratio * dx);, +  int targetcy = math_utils::round(bullEyeCornerPoints[2]->getY() - ratio * dy);, +  int targetax = math_utils::round(bullEyeCornerPoints[0]->getX() + ratio * dx);, +  int targetay = math_utils::round(bullEyeCornerPoints[0]->getY() + ratio * dy);, +  dx = bullEyeCornerPoints[1]->getX() - bullEyeCornerPoints[3]->getX();, +  dy = bullEyeCornerPoints[1]->getY() - bullEyeCornerPoints[3]->getY();, +  int targetdx = math_utils::round(bullEyeCornerPoints[3]->getX() - ratio * dx);, +  int targetdy = math_utils::round(bullEyeCornerPoints[3]->getY() - ratio * dy);, +  int targetbx = math_utils::round(bullEyeCornerPoints[1]->getX() + ratio * dx);, +  int targetby = math_utils::round(bullEyeCornerPoints[1]->getY() + ratio * dy);, +  int dx = pina->getX() - pind->getX();, +  int dy = pina->getY() - pinc->getY();, +  int targetcx = math_utils::round(pinc->getX() - ratio * dx);, +  int targetcy = math_utils::round(pinc->getY() - ratio * dy);, +  int targetax = math_utils::round(pina->getX() + ratio * dx);, +  int targetay = math_utils::round(pina->getY() + ratio * dy);, +  dx = pinb->getX() - pind->getX();, +  dy = pinb->getY() - pind->getY();, +  int targetdx = math_utils::round(pind->getX() - ratio * dx);, +  int targetdy = math_utils::round(pind->getY() - ratio * dy);, +  int targetbx = math_utils::round(pinb->getX() + ratio * dx);, +  int targetby = math_utils::round(pinb->getY() + ratio * dy);, +  float dx = moduleSize * float(p2->getX() - p1->getX())/d;, +  float dy = moduleSize * float(p2->getY() - p1->getY())/d;, +  float px = float(p1->getX());, +  float py = float(p1->getY());, +  p1 = new Point(p1->getX() - corr, p1->getY() + corr);, +  p2 = new Point(p2->getX() - corr, p2->getY() - corr);, +  p3 = new Point(p3->getX() + corr, p3->getY() - corr);, +  p4 = new Point(p4->getX() + corr, p4->getY() + corr);, +  float dx = (p2->getX() - p1->getX()) / d;, +  float dy = (p2->getY() - p1->getY()) / d;, +  float px = float(p1->getX());, +  float py = float(p1->getY());, +  bool colorModel = image_->get(p1->getX(), p1->getY());, +  int x = init->getX() + dx;, +  int y = init->getY() + dy;, +  return sqrtf((float)((a->getX() - b->getX()) * (a->getX() - b->getX()) + (a->getY() - b->getY()) * (a->getY() - b->getY())));, +++ b/cpp/core/src/zxing/aztec/detector/Detector.cpp, +  int dx = bullEyeCornerPoints[0]->getX() - bullEyeCornerPoints[2]->getX();, +  int dy = bullEyeCornerPoints[0]->getY() - bullEyeCornerPoints[2]->getY();, +  int targetcx = math_utils::round(bullEyeCornerPoints[2]->getX() - ratio * dx);, +  int targetcy = math_utils::round(bullEyeCornerPoints[2]->getY() - ratio * dy);, +  int targetax = math_utils::round(bullEyeCornerPoints[0]->getX() + ratio * dx);, +  int targetay = math_utils::round(bullEyeCornerPoints[0]->getY() + ratio * dy);, +  dx = bullEyeCornerPoints[1]->getX() - bullEyeCornerPoints[3]->getX();, +  dy = bullEyeCornerPoints[1]->getY() - bullEyeCornerPoints[3]->getY();, +  int targetdx = math_utils::round(bullEyeCornerPoints[3]->getX() - ratio * dx);, +  int targetdy = math_utils::round(bullEyeCornerPoints[3]->getY() - ratio * dy);, +  int targetbx = math_utils::round(bullEyeCornerPoints[1]->getX() + ratio * dx);, +  int targetby = math_utils::round(bullEyeCornerPoints[1]->getY() + ratio * dy);, +  int dx = pina->getX() - pind->getX();, +  int dy = pina->getY() - pinc->getY();, +  int targetcx = math_utils::round(pinc->getX() - ratio * dx);, +  int targetcy = math_utils::round(pinc->getY() - ratio * dy);, +  int targetax = math_utils::round(pina->getX() + ratio * dx);, +  int targetay = math_utils::round(pina->getY() + ratio * dy);, +  dx = pinb->getX() - pind->getX();, +  dy = pinb->getY() - pind->getY();, +  int targetdx = math_utils::round(pind->getX() - ratio * dx);, +  int targetdy = math_utils::round(pind->getY() - ratio * dy);, +  int targetbx = math_utils::round(pinb->getX() + ratio * dx);, +  int targetby = math_utils::round(pinb->getY() + ratio * dy);, +  float dx = moduleSize * float(p2->getX() - p1->getX())/d;, +  float dy = moduleSize * float(p2->getY() - p1->getY())/d;, +  float px = float(p1->getX());, +  float py = float(p1->getY());, +  p1 = new Point(p1->getX() - corr, p1->getY() + corr);, +  p2 = new Point(p2->getX() - corr, p2->getY() - corr);, +  p3 = new Point(p3->getX() + corr, p3->getY() - corr);, +  p4 = new Point(p4->getX() + corr, p4->getY() + corr);, +  float dx = (p2->getX() - p1->getX()) / d;, +  float dy = (p2->getY() - p1->getY()) / d;, +  float px = float(p1->getX());, +  float py = float(p1->getY());, +  bool colorModel = image_->get(p1->getX(), p1->getY());, +  int x = init->getX() + dx;, +  int y = init->getY() + dy;, +  return sqrtf((float)((a->getX() - b->getX()) * (a->getX() - b->getX()) + (a->getY() - b->getY()) * (a->getY() - b->getY())));, +++ b/cpp/core/src/zxing/aztec/detector/Detector.h, + private:, +  const int x;, +  const int y;, + public:, +  Point(int ax, int ay) : x(ax), y(ay) {}, +  int getX() const { return x; }, +  int getY() const { return y; }]