[+++ b/cpp/core/src/zxing/MultiFormatReader.cpp, +#include <zxing/MultiFormatReader.h>, +	MultiFormatReader::MultiFormatReader() {, +		readers.push_back(new zxing::qrcode::QRCodeReader());, +		readers.push_back(new zxing::datamatrix::DataMatrixReader());, +		readers.push_back(new zxing::oned::MultiFormatUPCEANReader());, +		readers.push_back(new zxing::oned::MultiFormatOneDReader());, +		for (unsigned int i = 0; i < readers.size(); i++) {, +				return reader[i]->decode(image);, +	, +	MultiFormatReader::~MultiFormatReader(){, +		for (unsigned int i = 0; i < readers.size(); i++) {, +			delete readers[i];, +		}, +	}, +++ b/cpp/core/src/zxing/MultiFormatReader.cpp, +#include <zxing/MultiFormatReader.h>, +	MultiFormatReader::MultiFormatReader() {, +		readers.push_back(new zxing::qrcode::QRCodeReader());, +		readers.push_back(new zxing::datamatrix::DataMatrixReader());, +		readers.push_back(new zxing::oned::MultiFormatUPCEANReader());, +		readers.push_back(new zxing::oned::MultiFormatOneDReader());, +		for (unsigned int i = 0; i < readers.size(); i++) {, +				return reader[i]->decode(image);, +	, +	MultiFormatReader::~MultiFormatReader(){, +		for (unsigned int i = 0; i < readers.size(); i++) {, +			delete readers[i];, +		}, +	}, +++ b/cpp/core/src/zxing/MultiFormatReader.h, + *  Modified by Luiz Silva on 09/02/2010., +		std::vector<Reader*>readers;, +		~MultiFormatReader();, +++ b/cpp/core/src/zxing/MultiFormatReader.cpp, +#include <zxing/MultiFormatReader.h>, +	MultiFormatReader::MultiFormatReader() {, +		readers.push_back(new zxing::qrcode::QRCodeReader());, +		readers.push_back(new zxing::datamatrix::DataMatrixReader());, +		readers.push_back(new zxing::oned::MultiFormatUPCEANReader());, +		readers.push_back(new zxing::oned::MultiFormatOneDReader());, +		for (unsigned int i = 0; i < readers.size(); i++) {, +				return reader[i]->decode(image);, +	, +	MultiFormatReader::~MultiFormatReader(){, +		for (unsigned int i = 0; i < readers.size(); i++) {, +			delete readers[i];, +		}, +	}, +++ b/cpp/core/src/zxing/MultiFormatReader.h, + *  Modified by Luiz Silva on 09/02/2010., +		std::vector<Reader*>readers;, +		~MultiFormatReader();, +++ b/cpp/core/src/zxing/datamatrix/detector/MonochromeRectangleDetector.cpp, +, +	Ref<TwoInts> lastRange(NULL);, +    Ref<TwoInts> range(NULL);, +          if (lastRange->start < centerX) {, +            if (lastRange->end > centerX) {, +			        Ref<CornerPoint> result(new CornerPoint(deltaY > 0 ? lastRange->start : lastRange->end, lastY));, +			      Ref<CornerPoint> result(new CornerPoint(lastRange->start, lastY));, +			      Ref<CornerPoint> result(new CornerPoint(lastRange->end, lastY));, +          if (lastRange->start < centerY) {, +            if (lastRange->end > centerY) {, +			        Ref<CornerPoint> result(new CornerPoint(lastX, deltaX < 0 ? lastRange->start : lastRange->end));, +			      Ref<CornerPoint> result(new CornerPoint(lastX, lastRange->start));, +			      Ref<CornerPoint> result(new CornerPoint(lastX, lastRange->end));, +Ref<TwoInts> MonochromeRectangleDetector::blackWhiteRange(int fixedDimension, int maxWhiteRun, int minDim, int maxDim,, +    Ref<TwoInts> result(NULL);, +		result = new TwoInts;, +      result->start = start;, +      result->end = end;, +++ b/cpp/core/src/zxing/MultiFormatReader.cpp, +#include <zxing/MultiFormatReader.h>, +	MultiFormatReader::MultiFormatReader() {, +		readers.push_back(new zxing::qrcode::QRCodeReader());, +		readers.push_back(new zxing::datamatrix::DataMatrixReader());, +		readers.push_back(new zxing::oned::MultiFormatUPCEANReader());, +		readers.push_back(new zxing::oned::MultiFormatOneDReader());, +		for (unsigned int i = 0; i < readers.size(); i++) {, +				return reader[i]->decode(image);, +	, +	MultiFormatReader::~MultiFormatReader(){, +		for (unsigned int i = 0; i < readers.size(); i++) {, +			delete readers[i];, +		}, +	}, +++ b/cpp/core/src/zxing/MultiFormatReader.h, + *  Modified by Luiz Silva on 09/02/2010., +		std::vector<Reader*>readers;, +		~MultiFormatReader();, +++ b/cpp/core/src/zxing/datamatrix/detector/MonochromeRectangleDetector.cpp, +, +	Ref<TwoInts> lastRange(NULL);, +    Ref<TwoInts> range(NULL);, +          if (lastRange->start < centerX) {, +            if (lastRange->end > centerX) {, +			        Ref<CornerPoint> result(new CornerPoint(deltaY > 0 ? lastRange->start : lastRange->end, lastY));, +			      Ref<CornerPoint> result(new CornerPoint(lastRange->start, lastY));, +			      Ref<CornerPoint> result(new CornerPoint(lastRange->end, lastY));]