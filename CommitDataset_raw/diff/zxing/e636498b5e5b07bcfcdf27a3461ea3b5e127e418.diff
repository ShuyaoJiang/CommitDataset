[+++ b/core/src/main/java/com/google/zxing/oned/Code93Reader.java, +  static final int ASTERISK_ENCODING = CHARACTER_ENCODINGS[47];, +++ b/core/src/main/java/com/google/zxing/oned/Code93Reader.java, +  static final int ASTERISK_ENCODING = CHARACTER_ENCODINGS[47];, +++ b/core/src/main/java/com/google/zxing/oned/Code93Writer.java, +  /**, +   * @param contents barcode contents to encode. It should not be encoded for extended characters., +   * @return a {@code boolean[]} of horizontal pixels (false = white, true = black), +   */, +    contents = convertToExtended(contents);, +        "Requested contents should be less than 80 digits long after converting to extended encoding, but got " + length);, +, +    //start character (*), +    int pos = appendPattern(result, 0, Code93Reader.ASTERISK_ENCODING);, +      pos += appendPattern(result, pos, Code93Reader.CHARACTER_ENCODINGS[indexInString]);, +    pos += appendPattern(result, pos, Code93Reader.CHARACTER_ENCODINGS[check1]);, +    pos += appendPattern(result, pos, Code93Reader.CHARACTER_ENCODINGS[check2]);, +    pos += appendPattern(result, pos, Code93Reader.ASTERISK_ENCODING);, +  private static int appendPattern(boolean[] target, int pos, int a) {, +    for (int i = 0; i < 9; i++) {, +      int temp = a & (1 << (8 - i));, +      target[pos + i] = temp != 0;, +    }, +    return 9;, +  }, +, +, +  static String convertToExtended(String contents) {, +    int length = contents.length();, +    StringBuilder extendedContent = new StringBuilder(length * 2);, +    for (int i = 0; i < length; i++) {, +      char character = contents.charAt(i);, +      // ($)=a, (%)=b, (/)=c, (+)=d. see Code93Reader.ALPHABET_STRING, +      if (character == 0) {, +        // NUL: (%)U, +        extendedContent.append("bU");, +      } else if (character <= 26) {, +        // SOH - SUB: ($)A - ($)Z, +        extendedContent.append('a');, +        extendedContent.append((char) ('A' + character - 1));, +      } else if (character <= 31) {, +        // ESC - US: (%)A - (%)E, +        extendedContent.append('b');, +        extendedContent.append((char) ('A' + character - 27));, +      } else if (character == ' ' || character == '$' || character == '%' || character == '+') {, +        // space $ % +, +        extendedContent.append(character);, +      } else if (character <= ',') {, +        // ! " # & ' ( ) * ,: (/)A - (/)L, +        extendedContent.append('c');, +        extendedContent.append((char) ('A' + character - '!'));, +      } else if (character <= '9') {, +        extendedContent.append(character);, +      } else if (character == ':') {, +        // :: (/)Z, +        extendedContent.append("cZ");, +      } else if (character <= '?') {, +        // ; - ?: (%)F - (%)J, +        extendedContent.append('b');, +        extendedContent.append((char) ('F' + character - ';'));, +      } else if (character == '@') {, +        // @: (%)V, +        extendedContent.append("bV");, +      } else if (character <= 'Z') {, +        // A - Z, +        extendedContent.append(character);, +      } else if (character <= '_') {, +        // [ - _: (%)K - (%)O, +        extendedContent.append('b');, +        extendedContent.append((char) ('K' + character - '['));, +      } else if (character == '`') {, +        // `: (%)W, +        extendedContent.append("bW");, +      } else if (character <= 'z') {, +        // a - z: (*)A - (*)Z, +        extendedContent.append('d');, +        extendedContent.append((char) ('A' + character - 'a'));, +      } else if (character <= 127) {, +        // { - DEL: (%)P - (%)T, +        extendedContent.append('b');, +        extendedContent.append((char) ('P' + character - '{'));, +      } else {, +        throw new IllegalArgumentException(, +          "Requested content contains a non-encodable character: '" + character + "'");, +      }, +    }, +    return extendedContent.toString();, +  }, +, +++ b/core/src/main/java/com/google/zxing/oned/Code93Reader.java, +  static final int ASTERISK_ENCODING = CHARACTER_ENCODINGS[47];, +++ b/core/src/main/java/com/google/zxing/oned/Code93Writer.java, +  /**, +   * @param contents barcode contents to encode. It should not be encoded for extended characters., +   * @return a {@code boolean[]} of horizontal pixels (false = white, true = black), +   */, +    contents = convertToExtended(contents);, +        "Requested contents should be less than 80 digits long after converting to extended encoding, but got " + length);, +, +    //start character (*)]