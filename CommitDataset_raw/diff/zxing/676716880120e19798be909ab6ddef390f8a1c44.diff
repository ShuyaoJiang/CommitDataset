[+++ b/core/src/com/google/zxing/oned/Code39Reader.java, +    int[] theCounters = counters;, +    Arrays.fill(theCounters, 0);, +    StringBuilder result = decodeRowResult;, +    result.setLength(0);, +    int[] start = findAsteriskPattern(row, theCounters);, +      recordPattern(row, nextStart, theCounters);, +      int pattern = toNarrowWidePattern(theCounters);, +      result.append(decodedChar);, +      for (int counter : theCounters) {, +    result.setLength(result.length() - 1); // remove asterisk, +    for (int counter : theCounters) {, +      int max = result.length() - 1;, +      if (result.charAt(max) != ALPHABET[total % 43]) {, +      result.setLength(max);, +    if (result.length() == 0) {, +      resultString = decodeExtended(result);, +      resultString = result.toString();, +++ b/core/src/com/google/zxing/oned/Code39Reader.java, +    int[] theCounters = counters;, +    Arrays.fill(theCounters, 0);, +    StringBuilder result = decodeRowResult;, +    result.setLength(0);, +    int[] start = findAsteriskPattern(row, theCounters);, +      recordPattern(row, nextStart, theCounters);, +      int pattern = toNarrowWidePattern(theCounters);, +      result.append(decodedChar);, +      for (int counter : theCounters) {, +    result.setLength(result.length() - 1); // remove asterisk, +    for (int counter : theCounters) {, +      int max = result.length() - 1;, +      if (result.charAt(max) != ALPHABET[total % 43]) {, +      result.setLength(max);, +    if (result.length() == 0) {, +      resultString = decodeExtended(result);, +      resultString = result.toString();, +++ b/core/src/com/google/zxing/oned/Code93Reader.java, +import java.util.Arrays;, +  private final StringBuilder decodeRowResult;, +  private final int[] counters;, +, +  public Code93Reader() {, +    decodeRowResult = new StringBuilder(20);, +    counters = new int[6];, +  }, +, +    int[] theCounters = counters;, +    Arrays.fill(theCounters, 0);, +    StringBuilder result = decodeRowResult;, +    result.setLength(0);, +, +      recordPattern(row, nextStart, theCounters);, +      int pattern = toPattern(theCounters);, +      for (int counter : theCounters) {, +  private int[] findAsteriskPattern(BitArray row) throws NotFoundException {, +    Arrays.fill(counters, 0);, +    int[] theCounters = counters;, +    int patternLength = theCounters.length;, +    int counterPosition = 0;, +        theCounters[counterPosition]++;, +          if (toPattern(theCounters) == ASTERISK_ENCODING) {, +          patternStart += theCounters[0] + theCounters[1];, +          System.arraycopy(theCounters, 2, theCounters, 0, patternLength - 2);, +          theCounters[patternLength - 2] = 0;, +          theCounters[patternLength - 1] = 0;, +        theCounters[counterPosition] = 1;, +++ b/core/src/com/google/zxing/oned/Code39Reader.java, +    int[] theCounters = counters;, +    Arrays.fill(theCounters, 0);, +    StringBuilder result = decodeRowResult;, +    result.setLength(0);, +    int[] start = findAsteriskPattern(row, theCounters);, +      recordPattern(row, nextStart, theCounters);, +      int pattern = toNarrowWidePattern(theCounters);, +      result.append(decodedChar);, +      for (int counter : theCounters) {, +    result.setLength(result.length() - 1); // remove asterisk, +    for (int counter : theCounters) {, +      int max = result.length() - 1;, +      if (result.charAt(max) != ALPHABET[total % 43]) {, +      result.setLength(max);, +    if (result.length() == 0) {, +      resultString = decodeExtended(result);, +      resultString = result.toString();, +++ b/core/src/com/google/zxing/oned/Code93Reader.java, +import java.util.Arrays;, +  private final StringBuilder decodeRowResult;, +  private final int[] counters;, +, +  public Code93Reader() {, +    decodeRowResult = new StringBuilder(20);, +    counters = new int[6];, +  }, +, +    int[] theCounters = counters;, +    Arrays.fill(theCounters, 0);, +    StringBuilder result = decodeRowResult;, +    result.setLength(0);, +, +      recordPattern(row, nextStart, theCounters);]