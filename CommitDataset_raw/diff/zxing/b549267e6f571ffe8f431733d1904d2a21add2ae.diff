[+++ b/cpp/core/src/zxing/ResultPoint.cpp, +using zxing::common::detector::MathUtils;, +  return MathUtils::distance(pattern1->posX_,, +++ b/cpp/core/src/zxing/ResultPoint.cpp, +using zxing::common::detector::MathUtils;, +  return MathUtils::distance(pattern1->posX_,, +++ b/cpp/core/src/zxing/aztec/detector/Detector.cpp, +using zxing::common::detector::MathUtils;, +  int targetcx = MathUtils::round(bullEyeCornerPoints[2]->getX() - ratio * dx);, +  int targetcy = MathUtils::round(bullEyeCornerPoints[2]->getY() - ratio * dy);, +  int targetax = MathUtils::round(bullEyeCornerPoints[0]->getX() + ratio * dx);, +  int targetay = MathUtils::round(bullEyeCornerPoints[0]->getY() + ratio * dy);, +  int targetdx = MathUtils::round(bullEyeCornerPoints[3]->getX() - ratio * dx);, +  int targetdy = MathUtils::round(bullEyeCornerPoints[3]->getY() - ratio * dy);, +  int targetbx = MathUtils::round(bullEyeCornerPoints[1]->getX() + ratio * dx);, +  int targetby = MathUtils::round(bullEyeCornerPoints[1]->getY() + ratio * dy);, +  int targetcx = MathUtils::round(pinc->getX() - ratio * dx);, +  int targetcy = MathUtils::round(pinc->getY() - ratio * dy);, +  int targetax = MathUtils::round(pina->getX() + ratio * dx);, +  int targetay = MathUtils::round(pina->getY() + ratio * dy);, +  int targetdx = MathUtils::round(pind->getX() - ratio * dx);, +  int targetdy = MathUtils::round(pind->getY() - ratio * dy);, +  int targetbx = MathUtils::round(pinb->getX() + ratio * dx);, +  int targetby = MathUtils::round(pinb->getY() + ratio * dy);, +  int cx = MathUtils::round((pointA->getX() + pointD->getX() + pointB->getX() + pointC->getX()) / 4.0f);, +  int cy = MathUtils::round((pointA->getY() + pointD->getY() + pointB->getY() + pointC->getY()) / 4.0f);, +  cx = MathUtils::round((pointA->getX() + pointD->getX() + pointB->getX() + pointC->getX()) / 4.0f);, +  cy = MathUtils::round((pointA->getY() + pointD->getY() + pointB->getY() + pointC->getY()) / 4.0f);, +    if (image_->get(MathUtils::round(px), MathUtils::round(py))) res->set(i);, +    if (image_->get(MathUtils::round(px), MathUtils::round(py)) != colorModel) {, +++ b/cpp/core/src/zxing/ResultPoint.cpp, +using zxing::common::detector::MathUtils;, +  return MathUtils::distance(pattern1->posX_,, +++ b/cpp/core/src/zxing/aztec/detector/Detector.cpp, +using zxing::common::detector::MathUtils;, +  int targetcx = MathUtils::round(bullEyeCornerPoints[2]->getX() - ratio * dx);, +  int targetcy = MathUtils::round(bullEyeCornerPoints[2]->getY() - ratio * dy);, +  int targetax = MathUtils::round(bullEyeCornerPoints[0]->getX() + ratio * dx);, +  int targetay = MathUtils::round(bullEyeCornerPoints[0]->getY() + ratio * dy);, +  int targetdx = MathUtils::round(bullEyeCornerPoints[3]->getX() - ratio * dx);, +  int targetdy = MathUtils::round(bullEyeCornerPoints[3]->getY() - ratio * dy);, +  int targetbx = MathUtils::round(bullEyeCornerPoints[1]->getX() + ratio * dx);, +  int targetby = MathUtils::round(bullEyeCornerPoints[1]->getY() + ratio * dy);, +  int targetcx = MathUtils::round(pinc->getX() - ratio * dx);, +  int targetcy = MathUtils::round(pinc->getY() - ratio * dy);, +  int targetax = MathUtils::round(pina->getX() + ratio * dx);, +  int targetay = MathUtils::round(pina->getY() + ratio * dy);, +  int targetdx = MathUtils::round(pind->getX() - ratio * dx);, +  int targetdy = MathUtils::round(pind->getY() - ratio * dy);, +  int targetbx = MathUtils::round(pinb->getX() + ratio * dx);, +  int targetby = MathUtils::round(pinb->getY() + ratio * dy);, +  int cx = MathUtils::round((pointA->getX() + pointD->getX() + pointB->getX() + pointC->getX()) / 4.0f);, +  int cy = MathUtils::round((pointA->getY() + pointD->getY() + pointB->getY() + pointC->getY()) / 4.0f);, +  cx = MathUtils::round((pointA->getX() + pointD->getX() + pointB->getX() + pointC->getX()) / 4.0f);, +  cy = MathUtils::round((pointA->getY() + pointD->getY() + pointB->getY() + pointC->getY()) / 4.0f);, +    if (image_->get(MathUtils::round(px), MathUtils::round(py))) res->set(i);, +    if (image_->get(MathUtils::round(px), MathUtils::round(py)) != colorModel) {, +++ b/cpp/core/src/zxing/common/Str.cpp, +String::String(int capacity) {, +  text_.reserve(capacity);, +}, +, +++ b/cpp/core/src/zxing/ResultPoint.cpp, +using zxing::common::detector::MathUtils;, +  return MathUtils::distance(pattern1->posX_,, +++ b/cpp/core/src/zxing/aztec/detector/Detector.cpp, +using zxing::common::detector::MathUtils;, +  int targetcx = MathUtils::round(bullEyeCornerPoints[2]->getX() - ratio * dx);, +  int targetcy = MathUtils::round(bullEyeCornerPoints[2]->getY() - ratio * dy);, +  int targetax = MathUtils::round(bullEyeCornerPoints[0]->getX() + ratio * dx);, +  int targetay = MathUtils::round(bullEyeCornerPoints[0]->getY() + ratio * dy);, +  int targetdx = MathUtils::round(bullEyeCornerPoints[3]->getX() - ratio * dx);, +  int targetdy = MathUtils::round(bullEyeCornerPoints[3]->getY() - ratio * dy);, +  int targetbx = MathUtils::round(bullEyeCornerPoints[1]->getX() + ratio * dx);, +  int targetby = MathUtils::round(bullEyeCornerPoints[1]->getY() + ratio * dy);, +  int targetcx = MathUtils::round(pinc->getX() - ratio * dx);, +  int targetcy = MathUtils::round(pinc->getY() - ratio * dy);, +  int targetax = MathUtils::round(pina->getX() + ratio * dx);, +  int targetay = MathUtils::round(pina->getY() + ratio * dy);, +  int targetdx = MathUtils::round(pind->getX() - ratio * dx);, +  int targetdy = MathUtils::round(pind->getY() - ratio * dy);, +  int targetbx = MathUtils::round(pinb->getX() + ratio * dx);, +  int targetby = MathUtils::round(pinb->getY() + ratio * dy);, +  int cx = MathUtils::round((pointA->getX() + pointD->getX() + pointB->getX() + pointC->getX()) / 4.0f);, +  int cy = MathUtils::round((pointA->getY() + pointD->getY() + pointB->getY() + pointC->getY()) / 4.0f);, +  cx = MathUtils::round((pointA->getX() + pointD->getX() + pointB->getX() + pointC->getX()) / 4.0f);, +  cy = MathUtils::round((pointA->getY() + pointD->getY() + pointB->getY() + pointC->getY()) / 4.0f);, +    if (image_->get(MathUtils::round(px), MathUtils::round(py))) res->set(i);, +    if (image_->get(MathUtils::round(px), MathUtils::round(py)) != colorModel) {, +++ b/cpp/core/src/zxing/common/Str.cpp, +String::String(int capacity) {, +  text_.reserve(capacity);, +}, +, +++ b/cpp/core/src/zxing/common/Str.h, +  explicit String(int);, +++ b/cpp/core/src/zxing/ResultPoint.cpp, +using zxing::common::detector::MathUtils;, +  return MathUtils::distance(pattern1->posX_,, +++ b/cpp/core/src/zxing/aztec/detector/Detector.cpp]