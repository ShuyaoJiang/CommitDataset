[+++ b/AUTHORS, +Eric Kobrin (Velocitude), +++ b/AUTHORS, +Eric Kobrin (Velocitude), +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +import java.util.Arrays;, +import java.util.List;, +  private static final String RETURN_CODE_PLACEHOLDER = "{CODE}";, +  private static final String RETURN_URL_PARAM = "ret";, +  private String returnUrlTemplate;, +      } else if (dataString != null && dataString.startsWith(ZXING_URL)) {, +        // Scan formats requested in query string (all formats if none specified)., +        // If a return URL is specified, send the results there. Otherwise, handle the results ourselves., +        Uri inputUri = Uri.parse(sourceUrl);, +        returnUrlTemplate = inputUri.getQueryParameter(RETURN_URL_PARAM);, +        decodeFormats = parseDecodeFormats(inputUri);, +    return parseDecodeFormats(, +        Arrays.asList(COMMA_PATTERN.split(intent.getStringExtra(Intents.Scan.SCAN_FORMATS))),, +        intent.getStringExtra(Intents.Scan.MODE));, +  }, +  , +  private static Vector<BarcodeFormat> parseDecodeFormats(Uri inputUri) {, +    List<String> formats = inputUri.getQueryParameters(Intents.Scan.SCAN_FORMATS);, +    if (formats.size() == 1){, +      formats = Arrays.asList(COMMA_PATTERN.split(formats.get(0)));, +    }, +    return parseDecodeFormats(formats, inputUri.getQueryParameter(Intents.Scan.MODE));, +  }, +  , +  private static Vector<BarcodeFormat> parseDecodeFormats(List<String> scanFormats,, +                                                          String decodeMode) {, +        for (String format : scanFormats) {, +          if(returnUrlTemplate == null){, +            handleDecodeInternally(rawResult, barcode);, +          } else {, +            handleDecodeExternally(rawResult, barcode);, +          }, +          break;, +    } else if (source == Source.ZXING_LINK) {, +    	// Replace each occurrence of RETURN_CODE_PLACEHOLDER in the returnUrlTemplate, +    	// with the scanned code. This allows both queries and REST-style URLs to work., +      Message message = Message.obtain(handler, R.id.launch_product_query);, +      message.obj = returnUrlTemplate.replace(RETURN_CODE_PLACEHOLDER, resultHandler.getDisplayContents().toString());, +      handler.sendMessageDelayed(message, INTENT_RESULT_DURATION);]