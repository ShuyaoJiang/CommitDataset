[+++ b/core/src/com/google/zxing/client/result/ParsedResult.java, +    if (value != null && value.length() > 0) {, +        if (value[i] != null && value[i].length() > 0) {, +  }, +++ b/core/src/com/google/zxing/client/result/ParsedResult.java, +    if (value != null && value.length() > 0) {, +        if (value[i] != null && value[i].length() > 0) {, +  }, +++ b/core/src/com/google/zxing/client/result/URIParsedResult.java, +    maybeAppend(uri, result);, +    } else if (isColonFollowedByPortNumber(uri, protocolEnd)) {, +      // Found a colon, but it looks like it is after the host, so the protocol is still missing, +      uri = "http://" + uri;, +  private static boolean isColonFollowedByPortNumber(String uri, int protocolEnd) {, +    int nextSlash = uri.indexOf('/', protocolEnd + 1);, +    if (nextSlash < 0) {, +      nextSlash = uri.length();, +    }, +    if (nextSlash <= protocolEnd + 1) {, +      return false;, +    }, +    for (int x = protocolEnd + 1; x < nextSlash; x++) {, +      if (uri.charAt(x) < '0' || uri.charAt(x) > '9') {, +        return false;, +      }, +    }, +    return true;, +  }, +, +++ b/core/src/com/google/zxing/client/result/ParsedResult.java, +    if (value != null && value.length() > 0) {, +        if (value[i] != null && value[i].length() > 0) {, +  }, +++ b/core/src/com/google/zxing/client/result/URIParsedResult.java, +    maybeAppend(uri, result);, +    } else if (isColonFollowedByPortNumber(uri, protocolEnd)) {, +      // Found a colon, but it looks like it is after the host, so the protocol is still missing, +      uri = "http://" + uri;, +  private static boolean isColonFollowedByPortNumber(String uri, int protocolEnd) {, +    int nextSlash = uri.indexOf('/', protocolEnd + 1);, +    if (nextSlash < 0) {, +      nextSlash = uri.length();, +    }, +    if (nextSlash <= protocolEnd + 1) {, +      return false;, +    }, +    for (int x = protocolEnd + 1; x < nextSlash; x++) {, +      if (uri.charAt(x) < '0' || uri.charAt(x) > '9') {, +        return false;, +      }, +    }, +    return true;, +  }, +, +++ b/core/test/src/com/google/zxing/client/result/ParsedReaderResultTestCase.java, + * @author dswitkin@google.com (Daniel Switkin), +    doTestResult("", "", ParsedResultType.TEXT);, +    doTestResult("foo", "foo", ParsedResultType.TEXT);, +    doTestResult("This is a test", "This is a test", ParsedResultType.TEXT);, +    doTestResult("This is a test\nwith newlines", "This is a test\nwith newlines",, +        ParsedResultType.TEXT);, +    doTestResult("This: a test with lots of @ nearly-random punctuation! No? OK then.",, +        "This: a test with lots of @ nearly-random punctuation! No? OK then.",, +        ParsedResultType.TEXT);, +    doTestResult("MEBKM:URL:google.com;;", "http://google.com", ParsedResultType.URI);, +    doTestResult("MEBKM:URL:google.com;TITLE:Google;;", "Google\nhttp://google.com",, +        ParsedResultType.URI);, +    doTestResult("MEBKM:TITLE:Google;URL:google.com;;", "Google\nhttp://google.com",, +        ParsedResultType.URI);, +    doTestResult("MEBKM:URL:http://google.com;;", "http://google.com", ParsedResultType.URI);, +    doTestResult("MEBKM:URL:HTTPS://google.com;;", "https://google.com", ParsedResultType.URI);, +    doTestResult("urlto:foo:bar.com", "foo\nhttp://bar.com", ParsedResultType.URI);, +    doTestResult("URLTO:foo:bar.com", "foo\nhttp://bar.com", ParsedResultType.URI);, +    doTestResult("URLTO::bar.com", "http://bar.com", ParsedResultType.URI);, +    doTestResult("URLTO::http://bar.com", "http://bar.com", ParsedResultType.URI);, +    doTestResult("MATMSG:TO:srowen@example.org;;",, +        "srowen@example.org", ParsedResultType.EMAIL_ADDRESS);, +    doTestResult("MATMSG:TO:srowen@example.org;SUB:Stuff;;", "srowen@example.org\nStuff",, +        ParsedResultType.EMAIL_ADDRESS);, +    doTestResult("MATMSG:TO:srowen@example.org;SUB:Stuff;BODY:This is some text;;",, +        "srowen@example.org\nStuff\nThis is some text", ParsedResultType.EMAIL_ADDRESS);, +    doTestResult("MATMSG:SUB:Stuff;BODY:This is some text;TO:srowen@example.org;;",, +        "srowen@example.org\nStuff\nThis is some text", ParsedResultType.EMAIL_ADDRESS);, +    doTestResult("TO:srowen@example.org;SUB:Stuff;BODY:This is some text;;",, +        "TO:srowen@example.org;SUB:Stuff;BODY:This is some text;;", ParsedResultType.TEXT);, +    doTestResult("srowen@example.org", "srowen@example.org", ParsedResultType.EMAIL_ADDRESS);, +    doTestResult("mailto:srowen@example.org", "srowen@example.org", ParsedResultType.EMAIL_ADDRESS);, +    doTestResult("MAILTO:srowen@example.org", "srowen@example.org", ParsedResultType.EMAIL_ADDRESS);, +    doTestResult("srowen@example", "srowen@example", ParsedResultType.TEXT);, +    doTestResult("srowen", "srowen", ParsedResultType.TEXT);, +    doTestResult("Let's meet @ 2", "Let's meet @ 2", ParsedResultType.TEXT);, +    doTestResult("MECARD:N:Sean Owen;;", "Sean Owen", ParsedResultType.ADDRESSBOOK);, +    doTestResult("MECARD:TEL:+12125551212;N:Sean Owen;;", "Sean Owen\n+12125551212",, +        ParsedResultType.ADDRESSBOOK);, +    doTestResult("MECARD:TEL:+12125551212;N:Sean Owen;URL:google.com;;",, +        "Sean Owen\n+12125551212\ngoogle.com", ParsedResultType.ADDRESSBOOK);, +    doTestResult("MECARD:TEL:+12125551212;N:Sean Owen;URL:google.com;EMAIL:srowen@example.org;",, +        "Sean Owen\n+12125551212\nsrowen@example.org\ngoogle.com", ParsedResultType.ADDRESSBOOK);, +    doTestResult("MECARD:ADR:76 9th Ave;N:Sean Owen;URL:google.com;EMAIL:srowen@example.org;",, +        "Sean Owen\n76 9th Ave\nsrowen@example.org\ngoogle.com", ParsedResultType.ADDRESSBOOK);]