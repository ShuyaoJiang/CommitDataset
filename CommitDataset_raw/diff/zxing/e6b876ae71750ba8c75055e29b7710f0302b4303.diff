[+++ b/cpp/core/src/zxing/oned/CodaBarReader.cpp, +Ref<Result> CodaBarReader::decodeRow(int rowNumber, Ref<BitArray> row) {, +  { // Arrays.fill(counters, 0);, +    int size = counters.size();, +    counters.resize(0);, +    counters.resize(size); }, +++ b/cpp/core/src/zxing/oned/CodaBarReader.cpp, +Ref<Result> CodaBarReader::decodeRow(int rowNumber, Ref<BitArray> row) {, +  { // Arrays.fill(counters, 0);, +    int size = counters.size();, +    counters.resize(0);, +    counters.resize(size); }, +++ b/cpp/core/src/zxing/oned/Code39Reader.cpp, +, +  std::string alphabet_string (ALPHABET_STRING);, +}, +, +void Code39Reader::init(bool usingCheckDigit_, bool extendedMode_) {, +  usingCheckDigit = usingCheckDigit_;, +  extendedMode = extendedMode_;, +  decodeRowResult.reserve(20);, +  counters.resize(9);, +Code39Reader::Code39Reader() {, +  init();, +Code39Reader::Code39Reader(bool usingCheckDigit_) {, +  init(usingCheckDigit_);, +Code39Reader::Code39Reader(bool usingCheckDigit_, bool extendedMode_) {, +  init(usingCheckDigit_, extendedMode_);, +  { // Arrays.fill(counters, 0);, +    int size = counters.size();, +    counters.resize(0);, +    counters.resize(size); }, +  decodeRowResult.clear();, +, +    decodeRowResult.append(1, decodedChar);, +  decodeRowResult.resize(decodeRowResult.length()-1);// remove asterisk, +    int max = decodeRowResult.length() - 1;, +      total += alphabet_string.find_first_of(decodeRowResult[i], 0);, +    if (decodeRowResult[max] != ALPHABET[total % 43]) {, +    decodeRowResult.resize(max);, +  if (decodeRowResult.length() == 0) {, +    resultString = decodeExtended(decodeRowResult);, +    resultString = Ref<String>(new String(decodeRowResult));, +vector<int> Code39Reader::findAsteriskPattern(Ref<BitArray> row, vector<int>& counters){, +++ b/cpp/core/src/zxing/oned/CodaBarReader.cpp, +Ref<Result> CodaBarReader::decodeRow(int rowNumber, Ref<BitArray> row) {, +  { // Arrays.fill(counters, 0);, +    int size = counters.size();, +    counters.resize(0);, +    counters.resize(size); }, +++ b/cpp/core/src/zxing/oned/Code39Reader.cpp, +, +  std::string alphabet_string (ALPHABET_STRING);, +}, +, +void Code39Reader::init(bool usingCheckDigit_, bool extendedMode_) {, +  usingCheckDigit = usingCheckDigit_;, +  extendedMode = extendedMode_;, +  decodeRowResult.reserve(20);, +  counters.resize(9);, +Code39Reader::Code39Reader() {, +  init();, +Code39Reader::Code39Reader(bool usingCheckDigit_) {, +  init(usingCheckDigit_);, +Code39Reader::Code39Reader(bool usingCheckDigit_, bool extendedMode_) {, +  init(usingCheckDigit_, extendedMode_);, +  { // Arrays.fill(counters, 0);, +    int size = counters.size();, +    counters.resize(0);, +    counters.resize(size); }, +  decodeRowResult.clear();, +, +    decodeRowResult.append(1, decodedChar);, +  decodeRowResult.resize(decodeRowResult.length()-1);// remove asterisk, +    int max = decodeRowResult.length() - 1;, +      total += alphabet_string.find_first_of(decodeRowResult[i], 0);, +    if (decodeRowResult[max] != ALPHABET[total % 43]) {, +    decodeRowResult.resize(max);, +  if (decodeRowResult.length() == 0) {, +    resultString = decodeExtended(decodeRowResult);, +    resultString = Ref<String>(new String(decodeRowResult));, +vector<int> Code39Reader::findAsteriskPattern(Ref<BitArray> row, vector<int>& counters){, +++ b/cpp/core/src/zxing/oned/Code39Reader.h, +  std::string decodeRowResult;, +  std::vector<int> counters;, +			, +  void init(bool usingCheckDigit = false, bool extendedMode = false);, +]