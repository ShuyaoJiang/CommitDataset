[+++ b/AUTHORS, +Alex Dupre, +dawalker (Google), +++ b/AUTHORS, +Alex Dupre, +dawalker (Google), +++ b/core/src/com/google/zxing/common/StringUtils.java, + * @author Alex Dupre, +    // which should be by far the most common encodings., +    //int utf8LowChars = 0;, +    int utf2BytesChars = 0;, +    int utf3BytesChars = 0;, +    int utf4BytesChars = 0;, +    int sjisBytesLeft = 0;, +    //int sjisLowChars = 0;, +    int sjisKatakanaChars = 0;, +    //int sjisDoubleBytesChars = 0;, +    int sjisCurKatakanaWordLength = 0;, +    int sjisCurDoubleBytesWordLength = 0;, +    int sjisMaxKatakanaWordLength = 0;, +    int sjisMaxDoubleBytesWordLength = 0;, +    //int isoLowChars = 0;, +    //int isoHighChars = 0;, +    int isoHighOther = 0;, +, +    boolean utf8bom = bytes.length > 3 &&, +        bytes[0] == (byte) 0xEF &&, +        bytes[1] == (byte) 0xBB &&, +        bytes[2] == (byte) 0xBF;, +      if (canBeUTF8) {, +          if ((value & 0x80) == 0) {, +            canBeUTF8 = false;, +          } else {, +        } else if ((value & 0x80) != 0) {, +          if ((value & 0x40) == 0) {, +            canBeUTF8 = false;, +            utf8BytesLeft++;, +            if ((value & 0x20) == 0) {, +              utf2BytesChars++;, +            } else {, +              utf8BytesLeft++;, +              if ((value & 0x10) == 0) {, +                utf3BytesChars++;, +              } else {, +                utf8BytesLeft++;, +                if ((value & 0x08) == 0) {, +                  utf4BytesChars++;, +                } else {, +        } //else {, +          //utf8LowChars++;, +        //}, +      }, +      if (canBeISO88591) {, +        if (value > 0x7F && value < 0xA0) {, +        } else if (value > 0x9F) {, +          if (value < 0xC0 || value == 0xD7 || value == 0xF7) {, +            isoHighOther++;, +          } //else {, +            //isoHighChars++;, +          //}, +        } //else {, +          //isoLowChars++;, +        //}, +      if (canBeShiftJIS) {, +        if (sjisBytesLeft > 0) {, +          if (value < 0x40 || value == 0x7F || value > 0xFC) {, +            canBeShiftJIS = false;, +          } else {, +            sjisBytesLeft--;, +          }, +        } else if (value == 0x80 || value == 0xA0 || value > 0xEF) {, +          canBeShiftJIS = false;, +        } else if (value > 0xA0 && value < 0xE0) {, +          sjisKatakanaChars++;, +          sjisCurDoubleBytesWordLength = 0;, +          sjisCurKatakanaWordLength++;, +          if (sjisCurKatakanaWordLength > sjisMaxKatakanaWordLength) {, +            sjisMaxKatakanaWordLength = sjisCurKatakanaWordLength;, +          }, +        } else if (value > 0x7F) {, +          sjisBytesLeft++;, +          //sjisDoubleBytesChars++;, +          sjisCurKatakanaWordLength = 0;, +          sjisCurDoubleBytesWordLength++;, +          if (sjisCurDoubleBytesWordLength > sjisMaxDoubleBytesWordLength) {, +            sjisMaxDoubleBytesWordLength = sjisCurDoubleBytesWordLength;, +          }, +        } else {, +          //sjisLowChars++;, +          sjisCurKatakanaWordLength = 0;, +          sjisCurDoubleBytesWordLength = 0;, +        }, +      }, +    }, +    if (canBeUTF8 && utf8BytesLeft > 0) {, +    if (canBeShiftJIS && sjisBytesLeft > 0) {, +      canBeShiftJIS = false;, +, +    // Easy -- if there is BOM or at least 1 valid not-single byte character (and no evidence it can't be UTF-8), done, +    if (canBeUTF8 && (utf8bom || utf2BytesChars + utf3BytesChars + utf4BytesChars > 0)) {]