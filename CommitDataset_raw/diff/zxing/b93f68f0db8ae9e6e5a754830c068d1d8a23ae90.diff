[+++ b/core/src/com/google/zxing/common/BitArray.java, +   * @param from first bit to check, +   * @return index of first bit that is set, starting from the given index, or size if none are set, +   */, +  public int getNextSet(int from) {, +    int size = this.size;, +    if (from >= size) {, +      return size;, +    }, +    int bitsOffset = from >> 5;, +    int currentBits = bits[bitsOffset];, +    int mask = 1 << (from & 0x1F);, +    while ((currentBits & mask) == 0) {, +      if (++from >= size) {, +        break;, +      }, +      if (mask == 0x80000000) {, +        mask = 1;, +        currentBits = bits[++bitsOffset];, +      } else {, +        mask <<= 1;, +      }, +    }, +    return from;, +  }, +, +  /**, +++ b/core/src/com/google/zxing/common/BitArray.java, +   * @param from first bit to check, +   * @return index of first bit that is set, starting from the given index, or size if none are set, +   */, +  public int getNextSet(int from) {, +    int size = this.size;, +    if (from >= size) {, +      return size;, +    }, +    int bitsOffset = from >> 5;, +    int currentBits = bits[bitsOffset];, +    int mask = 1 << (from & 0x1F);, +    while ((currentBits & mask) == 0) {, +      if (++from >= size) {, +        break;, +      }, +      if (mask == 0x80000000) {, +        mask = 1;, +        currentBits = bits[++bitsOffset];, +      } else {, +        mask <<= 1;, +      }, +    }, +    return from;, +  }, +, +  /**, +++ b/core/src/com/google/zxing/common/BitMatrix.java, +   * @param y row to set, +   * @param row {@link BitArray} to copy from, +   */, +  public void setRow(int y, BitArray row) {, +    System.arraycopy(row.getBitArray(), 0, bits, y * rowSize, rowSize);, +  }, +, +  /**, +++ b/core/src/com/google/zxing/common/BitArray.java, +   * @param from first bit to check, +   * @return index of first bit that is set, starting from the given index, or size if none are set, +   */, +  public int getNextSet(int from) {, +    int size = this.size;, +    if (from >= size) {, +      return size;, +    }, +    int bitsOffset = from >> 5;, +    int currentBits = bits[bitsOffset];, +    int mask = 1 << (from & 0x1F);, +    while ((currentBits & mask) == 0) {, +      if (++from >= size) {, +        break;, +      }, +      if (mask == 0x80000000) {, +        mask = 1;, +        currentBits = bits[++bitsOffset];, +      } else {, +        mask <<= 1;, +      }, +    }, +    return from;, +  }, +, +  /**, +++ b/core/src/com/google/zxing/common/BitMatrix.java, +   * @param y row to set, +   * @param row {@link BitArray} to copy from, +   */, +  public void setRow(int y, BitArray row) {, +    System.arraycopy(row.getBitArray(), 0, bits, y * rowSize, rowSize);, +  }, +, +  /**, +++ b/core/src/com/google/zxing/oned/CodaBarReader.java]