[+++ b/core/src/main/java/com/google/zxing/pdf417/PDF417Writer.java, +import java.nio.charset.Charset;, +      if (hints.containsKey(EncodeHintType.CHARACTER_SET)) {, +        String encoding = (String) hints.get(EncodeHintType.CHARACTER_SET);, +        encoder.setEncoding(Charset.forName(encoding));, +      }, +++ b/core/src/main/java/com/google/zxing/pdf417/PDF417Writer.java, +import java.nio.charset.Charset;, +      if (hints.containsKey(EncodeHintType.CHARACTER_SET)) {, +        String encoding = (String) hints.get(EncodeHintType.CHARACTER_SET);, +        encoder.setEncoding(Charset.forName(encoding));, +      }, +++ b/core/src/main/java/com/google/zxing/pdf417/encoder/PDF417.java, +import java.nio.charset.Charset;, +, +  private Charset encoding;, +    encoding = PDF417HighLevelEncoder.DEFAULT_ENCODING;, +    String highLevel = PDF417HighLevelEncoder.encodeHighLevel(msg, compaction, encoding);, +  /**, +   * Sets output encoding., +   */, +  public void setEncoding(Charset encoding) {, +    this.encoding = encoding;, +  }, +, +++ b/core/src/main/java/com/google/zxing/pdf417/PDF417Writer.java, +import java.nio.charset.Charset;, +      if (hints.containsKey(EncodeHintType.CHARACTER_SET)) {, +        String encoding = (String) hints.get(EncodeHintType.CHARACTER_SET);, +        encoder.setEncoding(Charset.forName(encoding));, +      }, +++ b/core/src/main/java/com/google/zxing/pdf417/encoder/PDF417.java, +import java.nio.charset.Charset;, +, +  private Charset encoding;, +    encoding = PDF417HighLevelEncoder.DEFAULT_ENCODING;, +    String highLevel = PDF417HighLevelEncoder.encodeHighLevel(msg, compaction, encoding);, +  /**, +   * Sets output encoding., +   */, +  public void setEncoding(Charset encoding) {, +    this.encoding = encoding;, +  }, +, +++ b/core/src/main/java/com/google/zxing/pdf417/encoder/PDF417HighLevelEncoder.java, +import com.google.zxing.common.CharacterSetECI;, +   * identifier for a user defined Extended Channel Interpretation (ECI), +   */, +  private static final int ECI_USER_DEFINED = 925;, +  , +  /**, +   * identifier for a general purpose ECO format, +   */, +  private static final int ECI_GENERAL_PURPOSE = 926;, +  , +  /** , +   * identifier for an ECI of a character set of code page, +   */, +  private static final int ECI_CHARSET = 927;, +, +  /**, +  static String encodeHighLevel(String msg, Compaction compaction, Charset encoding) throws WriterException {, +    if (!DEFAULT_ENCODING.equals(encoding)) {, +      CharacterSetECI eci = CharacterSetECI.getCharacterSetECIByName(encoding.name());, +      if (eci != null) {, +        encodingECI(eci.getValue(), sb);, +      }, +    }, +, +    byte[] bytes = null; //Fill later and only if needed, +      bytes = msg.getBytes(encoding);, +              bytes = msg.getBytes(encoding);, +  private static void encodingECI(int eci, StringBuilder sb) throws WriterException {, +    if (eci >= 0 && eci < 900) {, +      sb.append((char) ECI_CHARSET);, +      sb.append((char) eci);, +    } else if (eci < 810900) {, +      sb.append((char) ECI_GENERAL_PURPOSE);, +      sb.append((char) (eci / 900 - 1));, +      sb.append((char) (eci % 900));, +    } else if (eci < 811800) {, +      sb.append((char) ECI_USER_DEFINED);, +      sb.append((char) (810900 - eci));, +    } else {, +      throw new WriterException("ECI number not in valid range from 0..811799, but was " + eci);, +    }, +  }]