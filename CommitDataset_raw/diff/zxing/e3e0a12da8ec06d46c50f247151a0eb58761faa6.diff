[+++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +        if (intent.hasExtra(Intents.Scan.WIDTH) && intent.hasExtra(Intents.Scan.HEIGHT)) {, +          int width = intent.getIntExtra(Intents.Scan.WIDTH, 0);, +          int height = intent.getIntExtra(Intents.Scan.HEIGHT, 0);, +          if (width > 0 && height > 0) {, +            CameraManager.get().setManualFramingRect(width, height);, +          }, +        }, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +        if (intent.hasExtra(Intents.Scan.WIDTH) && intent.hasExtra(Intents.Scan.HEIGHT)) {, +          int width = intent.getIntExtra(Intents.Scan.WIDTH, 0);, +          int height = intent.getIntExtra(Intents.Scan.HEIGHT, 0);, +          if (width > 0 && height > 0) {, +            CameraManager.get().setManualFramingRect(width, height);, +          }, +        }, +++ b/android/src/com/google/zxing/client/android/DecodeFormatManager.java, +    String scanFormatsString = intent.getStringExtra(Intents.Scan.FORMATS);, +    List<String> formats = inputUri.getQueryParameters(Intents.Scan.FORMATS);, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +        if (intent.hasExtra(Intents.Scan.WIDTH) && intent.hasExtra(Intents.Scan.HEIGHT)) {, +          int width = intent.getIntExtra(Intents.Scan.WIDTH, 0);, +          int height = intent.getIntExtra(Intents.Scan.HEIGHT, 0);, +          if (width > 0 && height > 0) {, +            CameraManager.get().setManualFramingRect(width, height);, +          }, +        }, +++ b/android/src/com/google/zxing/client/android/DecodeFormatManager.java, +    String scanFormatsString = intent.getStringExtra(Intents.Scan.FORMATS);, +    List<String> formats = inputUri.getQueryParameters(Intents.Scan.FORMATS);, +++ b/android/src/com/google/zxing/client/android/DecodeHandler.java, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +        if (intent.hasExtra(Intents.Scan.WIDTH) && intent.hasExtra(Intents.Scan.HEIGHT)) {, +          int width = intent.getIntExtra(Intents.Scan.WIDTH, 0);, +          int height = intent.getIntExtra(Intents.Scan.HEIGHT, 0);, +          if (width > 0 && height > 0) {, +            CameraManager.get().setManualFramingRect(width, height);, +          }, +        }, +++ b/android/src/com/google/zxing/client/android/DecodeFormatManager.java, +    String scanFormatsString = intent.getStringExtra(Intents.Scan.FORMATS);, +    List<String> formats = inputUri.getQueryParameters(Intents.Scan.FORMATS);, +++ b/android/src/com/google/zxing/client/android/DecodeHandler.java, +++ b/android/src/com/google/zxing/client/android/Intents.java, +     * one of the values below., +     * Setting this is effectively shorthand for setting explicit formats with {@link #FORMATS}., +     * Decode only 1D barcodes., +     * Comma-separated list of formats to scan for. The values must match the names of, +     * {@link com.google.zxing.BarcodeFormat}s, e.g. {@link com.google.zxing.BarcodeFormat#EAN_13}., +     * Example: "EAN_13,EAN_8,QR_CODE", +     *, +     * This overrides {@link #MODE}., +     */, +    public static final String FORMATS = "SCAN_FORMATS";, +, +    /**, +     * @see com.google.zxing.DecodeHintType#CHARACTER_SET, +     */, +    public static final String CHARACTER_SET = "CHARACTER_SET";, +, +    /**, +     * Optional parameters to specify the width and height of the scanning rectangle in pixels., +     * The app will try to honor these, but will clamp them to the size of the preview frame., +     * You should specify both or neither, and pass the size as an int., +     */, +    public static final String WIDTH = "SCAN_WIDTH";, +    public static final String HEIGHT = "SCAN_HEIGHT";, +, +    /**, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +        if (intent.hasExtra(Intents.Scan.WIDTH) && intent.hasExtra(Intents.Scan.HEIGHT)) {, +          int width = intent.getIntExtra(Intents.Scan.WIDTH, 0);, +          int height = intent.getIntExtra(Intents.Scan.HEIGHT, 0);, +          if (width > 0 && height > 0) {, +            CameraManager.get().setManualFramingRect(width, height);, +          }, +        }, +++ b/android/src/com/google/zxing/client/android/DecodeFormatManager.java, +    String scanFormatsString = intent.getStringExtra(Intents.Scan.FORMATS);, +    List<String> formats = inputUri.getQueryParameters(Intents.Scan.FORMATS);, +++ b/android/src/com/google/zxing/client/android/DecodeHandler.java, +++ b/android/src/com/google/zxing/client/android/Intents.java, +     * one of the values below., +     * Setting this is effectively shorthand for setting explicit formats with {@link #FORMATS}., +     * Decode only 1D barcodes., +     * Comma-separated list of formats to scan for. The values must match the names of, +     * {@link com.google.zxing.BarcodeFormat}s, e.g. {@link com.google.zxing.BarcodeFormat#EAN_13}., +     * Example: "EAN_13,EAN_8,QR_CODE", +     *, +     * This overrides {@link #MODE}., +     */, +    public static final String FORMATS = "SCAN_FORMATS";, +, +    /**, +     * @see com.google.zxing.DecodeHintType#CHARACTER_SET, +     */, +    public static final String CHARACTER_SET = "CHARACTER_SET";, +, +    /**, +     * Optional parameters to specify the width and height of the scanning rectangle in pixels.]