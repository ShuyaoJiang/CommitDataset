[+++ b/android/src/com/google/zxing/client/android/camera/CameraConfigurationManager.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.Comparator;, +, +  // This is bigger than the size of a small screen, which is still supported. The routine, +  // below will still select the default (presumably 320x240) size for these. This prevents, +  // accidental selection of very low resolution on some devices., +  private static final int MIN_PREVIEW_PIXELS = 470 * 320; // normal screen, +  private static final int MAX_PREVIEW_PIXELS = 800 * 600; // more than large/HD screen, +    // Sort by size, descending, +    List<Camera.Size> supportedPreviewSizes = new ArrayList<Camera.Size>(parameters.getSupportedPreviewSizes());, +    Collections.sort(supportedPreviewSizes, new Comparator<Camera.Size>() {, +      @Override, +      public int compare(Camera.Size a, Camera.Size b) {, +        int aPixels = a.height * a.width;, +        int bPixels = b.height * b.width;, +        if (bPixels < aPixels) {, +          return -1;, +        }, +        if (bPixels > aPixels) {, +          return 1;, +        }, +        return 0;, +      }, +    });, +    Point bestSize = null;, +    float screenAspectRatio = (float) screenResolution.x / (float) screenResolution.y;, +, +    float diff = Float.POSITIVE_INFINITY;, +        Point exactPoint = new Point(realWidth, realHeight);, +        Log.i(TAG, "Found preview size exactly matching screen size: " + exactPoint);, +        return exactPoint;, +      float aspectRatio = (float) maybeFlippedWidth / (float) maybeFlippedHeight;, +      float newDiff = Math.abs(aspectRatio - screenAspectRatio);, +    Log.i(TAG, "Found best approximate preview size: " + bestSize);]