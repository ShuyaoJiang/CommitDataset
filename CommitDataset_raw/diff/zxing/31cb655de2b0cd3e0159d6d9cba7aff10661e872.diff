[+++ b/cpp/core/src/zxing/common/BitArray.cpp, +++ b/cpp/core/src/zxing/common/BitArray.cpp, +++ b/cpp/core/src/zxing/common/BitArray.h, +, +  bool get(size_t i) {, +    return (bits_[i >> logBits_] & (1 << (i & bitsMask_))) != 0;, +  }, +, +  void set(size_t i) {, +    bits_[i >> logBits_] |= 1 << (i & bitsMask_);, +  }, +, +++ b/cpp/core/src/zxing/common/BitArray.cpp, +++ b/cpp/core/src/zxing/common/BitArray.h, +, +  bool get(size_t i) {, +    return (bits_[i >> logBits_] & (1 << (i & bitsMask_))) != 0;, +  }, +, +  void set(size_t i) {, +    bits_[i >> logBits_] |= 1 << (i & bitsMask_);, +  }, +, +++ b/cpp/core/src/zxing/common/BitMatrix.cpp, +  size_t wordsForSize(size_t width,, +                      size_t height,, +                      unsigned int logBits) {, +  words_ = wordsForSize(width_, height_, logBits);, +  words_ = wordsForSize(width_, height_, logBits);, +      mask = std::numeric_limits<unsigned int>::max();, +++ b/cpp/core/src/zxing/common/BitArray.cpp, +++ b/cpp/core/src/zxing/common/BitArray.h, +, +  bool get(size_t i) {, +    return (bits_[i >> logBits_] & (1 << (i & bitsMask_))) != 0;, +  }, +, +  void set(size_t i) {, +    bits_[i >> logBits_] |= 1 << (i & bitsMask_);, +  }, +, +++ b/cpp/core/src/zxing/common/BitMatrix.cpp, +  size_t wordsForSize(size_t width,, +                      size_t height,, +                      unsigned int logBits) {, +  words_ = wordsForSize(width_, height_, logBits);, +  words_ = wordsForSize(width_, height_, logBits);, +      mask = std::numeric_limits<unsigned int>::max();, +++ b/cpp/core/src/zxing/common/BitMatrix.h, +#define ZX_LOG_DIGITS(digits) \, +    ((digits == 8) ? 3 : \, +     ((digits == 16) ? 4 : \, +      ((digits == 32) ? 5 : \, +       ((digits == 64) ? 6 : \, +        ((digits == 128) ? 7 : \, +         (-1)))))), +, +  static const unsigned int bitsPerWord =, +    std::numeric_limits<unsigned int>::digits;, +  static const unsigned int logBits = ZX_LOG_DIGITS(bitsPerWord);, +  static const unsigned int bitsMask = (1 << logBits) - 1;, +, +, +  bool get(size_t x, size_t y) const {, +    size_t offset = x + width_ * y;, +    return ((bits_[offset >> logBits] >> (offset & bitsMask)) & 0x01) != 0;, +  }, +, +  void set(size_t x, size_t y) {, +    size_t offset = x + width_ * y;, +    bits_[offset >> logBits] |= 1 << (offset & bitsMask);, +  }, +, +++ b/cpp/core/src/zxing/common/BitArray.cpp, +++ b/cpp/core/src/zxing/common/BitArray.h, +, +  bool get(size_t i) {, +    return (bits_[i >> logBits_] & (1 << (i & bitsMask_))) != 0;, +  }, +, +  void set(size_t i) {, +    bits_[i >> logBits_] |= 1 << (i & bitsMask_);, +  }, +, +++ b/cpp/core/src/zxing/common/BitMatrix.cpp, +  size_t wordsForSize(size_t width,, +                      size_t height,, +                      unsigned int logBits) {, +  words_ = wordsForSize(width_, height_, logBits);, +  words_ = wordsForSize(width_, height_, logBits);, +      mask = std::numeric_limits<unsigned int>::max();, +++ b/cpp/core/src/zxing/common/BitMatrix.h, +#define ZX_LOG_DIGITS(digits) \, +    ((digits == 8) ? 3 : \, +     ((digits == 16) ? 4 : \, +      ((digits == 32) ? 5 : \, +       ((digits == 64) ? 6 : \, +        ((digits == 128) ? 7 : \, +         (-1)))))), +]