[+++ b/AUTHORS, +Marcin G贸rny, +++ b/AUTHORS, +Marcin G贸rny, +++ b/core/src/main/java/com/google/zxing/MultiFormatWriter.java, +import com.google.zxing.oned.Code93Writer;, +      case CODE_93:, +        writer = new Code93Writer();, +        break;, +++ b/AUTHORS, +Marcin G贸rny, +++ b/core/src/main/java/com/google/zxing/MultiFormatWriter.java, +import com.google.zxing.oned.Code93Writer;, +      case CODE_93:, +        writer = new Code93Writer();, +        break;, +++ b/core/src/main/java/com/google/zxing/oned/Code93Reader.java, +  static final String ALPHABET_STRING = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%abcd*";, +  static final int[] CHARACTER_ENCODINGS = {, +++ b/AUTHORS, +Marcin G贸rny, +++ b/core/src/main/java/com/google/zxing/MultiFormatWriter.java, +import com.google.zxing.oned.Code93Writer;, +      case CODE_93:, +        writer = new Code93Writer();, +        break;, +++ b/core/src/main/java/com/google/zxing/oned/Code93Reader.java, +  static final String ALPHABET_STRING = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%abcd*";, +  static final int[] CHARACTER_ENCODINGS = {, +++ b/core/src/main/java/com/google/zxing/oned/Code93Writer.java, +/*, + * Copyright 2015 ZXing authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.google.zxing.oned;, +, +import com.google.zxing.BarcodeFormat;, +import com.google.zxing.EncodeHintType;, +import com.google.zxing.WriterException;, +import com.google.zxing.common.BitMatrix;, +, +import java.util.Map;, +, +/**, + * This object renders a CODE93 code as a BitMatrix, + */, +public class Code93Writer extends OneDimensionalCodeWriter {, +  @Override, +  public BitMatrix encode(String contents,, +                          BarcodeFormat format,, +                          int width,, +                          int height,, +                          Map<EncodeHintType,?> hints) throws WriterException {, +    if (format != BarcodeFormat.CODE_93) {, +      throw new IllegalArgumentException("Can only encode CODE_93, but got " + format);, +    }, +    return super.encode(contents, format, width, height, hints);, +  }, +, +  @Override, +  public boolean[] encode(String contents) {, +    int length = contents.length();, +    if (length > 80) {, +      throw new IllegalArgumentException(, +        "Requested contents should be less than 80 digits long, but got " + length);, +    }, +    //each character is encoded by 9 of 0/1's, +    int[] widths = new int[9];, +, +    //lenght of code + 2 start/stop characters + 2 checksums, each of 9 bits, plus a termination bar, +    int codeWidth = (contents.length() + 2 + 2) * 9 + 1;, +, +    boolean[] result = new boolean[codeWidth];, +, +    //start character (*), +    toIntArray(Code93Reader.CHARACTER_ENCODINGS[47], widths);, +    int pos = appendPattern(result, 0, widths, true);, +, +    for (int i = 0; i < length; i++) {, +      int indexInString = Code93Reader.ALPHABET_STRING.indexOf(contents.charAt(i));, +      toIntArray(Code93Reader.CHARACTER_ENCODINGS[indexInString], widths);, +      pos += appendPattern(result, pos, widths, true);, +    }, +, +    //add two checksums, +    int check1 = computeChecksumIndex(contents, 20);, +    toIntArray(Code93Reader.CHARACTER_ENCODINGS[check1], widths);, +    pos += appendPattern(result, pos, widths, true);, +]