[+++ b/core/src/com/google/zxing/common/CharacterSetECI.java, +    VALUE_TO_ECI.put(Integer.valueOf(value), eci);, +    VALUE_TO_ECI.put(Integer.valueOf(value), eci);, +    return (CharacterSetECI) VALUE_TO_ECI.get(Integer.valueOf(value));, +++ b/core/src/com/google/zxing/common/CharacterSetECI.java, +    VALUE_TO_ECI.put(Integer.valueOf(value), eci);, +    VALUE_TO_ECI.put(Integer.valueOf(value), eci);, +    return (CharacterSetECI) VALUE_TO_ECI.get(Integer.valueOf(value));, +++ b/core/src/com/google/zxing/datamatrix/detector/Detector.java, +      { Integer.valueOf(0), Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3), Integer.valueOf(4) };, +++ b/core/src/com/google/zxing/common/CharacterSetECI.java, +    VALUE_TO_ECI.put(Integer.valueOf(value), eci);, +    VALUE_TO_ECI.put(Integer.valueOf(value), eci);, +    return (CharacterSetECI) VALUE_TO_ECI.get(Integer.valueOf(value));, +++ b/core/src/com/google/zxing/datamatrix/detector/Detector.java, +      { Integer.valueOf(0), Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3), Integer.valueOf(4) };, +++ b/core/src/com/google/zxing/pdf417/decoder/BitMatrixParser.java, +  //private static final int MAX_COLUMNS = 30;, +  //private int columns = 0;, +  int[] readCodewords() {, +          next = processRow(rowCounters, rowNumber, rowHeight, codewords, next);, +      next = processRow(rowCounters, rowNumber, rowHeight, codewords, next);, +      int[] a = new int[size];, +   * Each PDF417 symbol character consists of four bar elements and four space, +   * elements, each of which can be one to six modules wide. The four bar and, +   * four space elements shall measure 17 modules in total., +  int processRow(int[] rowCounters, int rowNumber, int rowHeight, int[] codewords, int next) {, +        if (rowCounters[i + (MODULES_IN_SYMBOL - 1 - mask)] >= rowHeight >>> 1) {, +        int cw = getCodeword(symbol);, +        int cw = getCodeword(symbol);, +      //columns = columnNumber;, +      //columns--;, +   * Build a symbol from the pixels., +   *, +   * @param counters  array of pixel counter corresponding to each Bar/Space pattern., +   * @return the symbol, +  /*, +  private static long getSymbol(int[] counters, float moduleWidth) {, +   */, +  private int getCodeword(long symbol) {, +      long cw = CODEWORD_TABLE[i] - 1;, +  }, +  private static int findCodewordIndex(long symbol) {, +      int mid = (first + upto) >>> 1; // Compute mid point., +  /*, +  /*, +                  float moduleWidth, int[] codewords, int next) {, +      if (rowCounters[firstBlack] >= rowHeight >>> 1) {, +        if (rowCounters[i] >= rowHeight >>> 1 || i == width - 1) {, +        if (rowCounters[i] < rowHeight >>> 1) {, +          symbol = getSymbol(counters, moduleWidth);, +          int cw = getCodeword(symbol);, +          symbol = getSymbol(counters, moduleWidth);, +          int cw = getCodeword(symbol);, +        // Introduce some errors if (rowNumber == 0 && columnNumber == 4), +        // { codewords[next-1] = 0; erasures[eraseCount] = next-1;, +        // eraseCount++; } if (rowNumber == 0 && columnNumber == 6) {, +        // codewords[next-1] = 10; erasures[eraseCount] = next-1;, +        // eraseCount++; } if (rowNumber == 0 && columnNumber == 8) {, +        // codewords[next-1] = 10; erasures[eraseCount] = next-1;, +        // eraseCount++; }, +   */]