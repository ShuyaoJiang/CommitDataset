[+++ b/core/src/com/google/zxing/MonochromeBitmapSource.java, +  BitArray getBlackDiagonal(int x, int y, int dx, int dy, BitArray diagonal, int size);, +, +  int getLuminance(int x, int y);, +  int[] getLuminanceRow(int y, int[] row);, +  int[] getLuminanceColumn(int x, int[] column);, +++ b/core/src/com/google/zxing/MonochromeBitmapSource.java, +  BitArray getBlackDiagonal(int x, int y, int dx, int dy, BitArray diagonal, int size);, +, +  int getLuminance(int x, int y);, +  int[] getLuminanceRow(int y, int[] row);, +  int[] getLuminanceColumn(int x, int[] column);, +++ b/core/src/com/google/zxing/common/BaseMonochromeBitmapSource.java, +  public BitArray getBlackDiagonal(int x, int y, int dx, int dy, BitArray diagonal, int size) {, +    if (diagonal == null || diagonal.getSize() < size) {, +      diagonal = new BitArray(size);, +    } else {, +      diagonal.clear();, +    }, +    for (int i = 0; i < size; i++) {, +      if (isBlack(x, y)) {, +        diagonal.set(i);, +      }, +      x += dx;, +      y += dy;, +    }, +    return diagonal;, +  }, +, +++ b/core/src/com/google/zxing/MonochromeBitmapSource.java, +  BitArray getBlackDiagonal(int x, int y, int dx, int dy, BitArray diagonal, int size);, +, +  int getLuminance(int x, int y);, +  int[] getLuminanceRow(int y, int[] row);, +  int[] getLuminanceColumn(int x, int[] column);, +++ b/core/src/com/google/zxing/common/BaseMonochromeBitmapSource.java, +  public BitArray getBlackDiagonal(int x, int y, int dx, int dy, BitArray diagonal, int size) {, +    if (diagonal == null || diagonal.getSize() < size) {, +      diagonal = new BitArray(size);, +    } else {, +      diagonal.clear();, +    }, +    for (int i = 0; i < size; i++) {, +      if (isBlack(x, y)) {, +        diagonal.set(i);, +      }, +      x += dx;, +      y += dy;, +    }, +    return diagonal;, +  }, +, +++ b/core/src/com/google/zxing/common/CroppedMonochromeBitmapSource.java, + * Encapulates a cropped region of another {@link MonochromeBitmapSource}., +  public BitArray getBlackDiagonal(int x, int y, int dx, int dy, BitArray diagonal, int size) {, +    return delegate.getBlackDiagonal(left + x, top + y, dx, dy, diagonal, size);, +  }, +]