[+++ b/core/src/com/google/zxing/common/BitMatrix.java, +   * This is useful in detecting a corner of a 'pure' barcode., +   * , +   * @return {x,y} coordinate of top-left-most 1 bit, or null if it is all white, +   */, +  public int[] getTopLeftOnBit() {, +    int bitsOffset = 0;, +    while (bitsOffset < bits.length && bits[bitsOffset] == 0) {, +      bitsOffset++;, +    }, +    if (bitsOffset == bits.length) {, +      return null;, +    }, +    int y = bitsOffset / rowSize;, +    int x = (bitsOffset % rowSize) << 5;, +    , +    int theBits = bits[bitsOffset];, +    int bit = 0;, +    while ((theBits << (31-bit)) == 0) {, +      bit++;, +    }, +    x += bit;, +    return new int[] {x, y};, +  }, +, +  /**, +++ b/core/src/com/google/zxing/common/BitMatrix.java, +   * This is useful in detecting a corner of a 'pure' barcode., +   * , +   * @return {x,y} coordinate of top-left-most 1 bit, or null if it is all white, +   */, +  public int[] getTopLeftOnBit() {, +    int bitsOffset = 0;, +    while (bitsOffset < bits.length && bits[bitsOffset] == 0) {, +      bitsOffset++;, +    }, +    if (bitsOffset == bits.length) {, +      return null;, +    }, +    int y = bitsOffset / rowSize;, +    int x = (bitsOffset % rowSize) << 5;, +    , +    int theBits = bits[bitsOffset];, +    int bit = 0;, +    while ((theBits << (31-bit)) == 0) {, +      bit++;, +    }, +    x += bit;, +    return new int[] {x, y};, +  }, +, +  /**, +++ b/core/src/com/google/zxing/datamatrix/DataMatrixReader.java, +   *, +   * @see com.google.zxing.qrcode.QRCodeReader#extractPureBits(BitMatrix) , +    //int moduleEnd = borderWidth;, +    int[] leftTopBlack = image.getTopLeftOnBit();, +    if (leftTopBlack == null) {, +      throw NotFoundException.getNotFoundInstance();, +    int x = leftTopBlack[0];, +    int y = leftTopBlack[1];, +    while (x < minDimension && y < minDimension && image.get(x, y)) {, +      x++;, +    }, +    if (x == minDimension) {, +    int moduleSize = x - leftTopBlack[0];, +    // And now find where the rightmost black module on the first row ends, +    int rowEndOfSymbol = width - 1;, +    while (rowEndOfSymbol >= 0 && !image.get(rowEndOfSymbol, y)) {, +      rowEndOfSymbol--;, +    if (rowEndOfSymbol < 0) {, +    rowEndOfSymbol++;, +    if ((rowEndOfSymbol - x) % moduleSize != 0) {, +    int dimension = 2 + ((rowEndOfSymbol - x) / moduleSize);, +, +    y += moduleSize;, +    x -= moduleSize >> 1;, +    y -= moduleSize >> 1;, +    if ((x + (dimension - 1) * moduleSize) >= width ||, +        (y + (dimension - 1) * moduleSize) >= height) {, +      int iOffset = y + i * moduleSize;, +        if (image.get(x + j * moduleSize, iOffset)) {, +++ b/core/src/com/google/zxing/common/BitMatrix.java, +   * This is useful in detecting a corner of a 'pure' barcode., +   * , +   * @return {x,y} coordinate of top-left-most 1 bit, or null if it is all white, +   */, +  public int[] getTopLeftOnBit() {, +    int bitsOffset = 0;, +    while (bitsOffset < bits.length && bits[bitsOffset] == 0) {, +      bitsOffset++;, +    }, +    if (bitsOffset == bits.length) {, +      return null;, +    }, +    int y = bitsOffset / rowSize;, +    int x = (bitsOffset % rowSize) << 5;, +    , +    int theBits = bits[bitsOffset];, +    int bit = 0;]