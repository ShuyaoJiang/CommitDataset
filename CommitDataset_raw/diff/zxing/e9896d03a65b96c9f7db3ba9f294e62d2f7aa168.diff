[+++ b/core/src/main/java/com/google/zxing/aztec/decoder/Decoder.java, +    byte[] rawBytes = convertBoolArrayToByteArray(correctedBits);, +    return new DecoderResult(rawBytes, result, null, null);, +  /**, +   * Reads a code of length 8 in an array of bits, padding with zeros, +   */, +  private static byte readByte(boolean[] rawbits, int startIndex) {, +    int n = rawbits.length - startIndex;, +    if (n >= 8) {, +      return (byte) readCode(rawbits, startIndex, 8);, +    }, +    return (byte) (readCode(rawbits, startIndex, n) << (8 - n));, +  }, +, +  /**, +   * Packs a bit array into bytes, most significant bit first, +   */, +  public static byte[] convertBoolArrayToByteArray(boolean[] boolArr) {, +    byte[] byteArr = new byte[(boolArr.length + 7) / 8];, +    for (int i = 0; i < byteArr.length; i++) {, +      byteArr[i] = readByte(boolArr, 8 * i);, +    }, +    return byteArr;, +  }, +, +++ b/core/src/main/java/com/google/zxing/aztec/decoder/Decoder.java, +    byte[] rawBytes = convertBoolArrayToByteArray(correctedBits);, +    return new DecoderResult(rawBytes, result, null, null);, +  /**, +   * Reads a code of length 8 in an array of bits, padding with zeros, +   */, +  private static byte readByte(boolean[] rawbits, int startIndex) {, +    int n = rawbits.length - startIndex;, +    if (n >= 8) {, +      return (byte) readCode(rawbits, startIndex, 8);, +    }, +    return (byte) (readCode(rawbits, startIndex, n) << (8 - n));, +  }, +, +  /**, +   * Packs a bit array into bytes, most significant bit first, +   */, +  public static byte[] convertBoolArrayToByteArray(boolean[] boolArr) {, +    byte[] byteArr = new byte[(boolArr.length + 7) / 8];, +    for (int i = 0; i < byteArr.length; i++) {, +      byteArr[i] = readByte(boolArr, 8 * i);, +    }, +    return byteArr;, +  }, +, +++ b/core/src/test/java/com/google/zxing/aztec/decoder/DecoderTest.java, +import org.junit.Assert;, +public final class DecoderTest extends Assert {, +  private static void assertEqualByteArrays(byte[] b1, byte[] b2) {, +    assertEquals(b1.length, b2.length);, +    for (int i = 0; i < b1.length; i++) {, +      assertEquals(b1[i], b2[i]);, +    }, +  }, +, +  @Test, +  public void testRawBytes() {, +    boolean bool0[] = {};, +    boolean bool1[] = { true };, +    boolean bool7[] = { true, false, true, false, true, false, true };, +    boolean bool8[] = { true, false, true, false, true, false, true, false };, +    boolean bool9[] = { true, false, true, false, true, false, true, false,, +                        true };, +    boolean bool16[] = { false, true, true, false, false, false, true, true,, +                         true, true, false, false, false, false, false, true };, +    byte byte0[] = {};, +    byte byte1[] = { -128 };, +    byte byte7[] = { -86 };, +    byte byte8[] = { -86 };, +    byte byte9[] = { -86, -128 };, +    byte byte16[] = { 99, -63 };, +, +    assertEqualByteArrays(byte0, Decoder.convertBoolArrayToByteArray(bool0));, +    assertEqualByteArrays(byte1, Decoder.convertBoolArrayToByteArray(bool1));, +    assertEqualByteArrays(byte7, Decoder.convertBoolArrayToByteArray(bool7));, +    assertEqualByteArrays(byte8, Decoder.convertBoolArrayToByteArray(bool8));, +    assertEqualByteArrays(byte9, Decoder.convertBoolArrayToByteArray(bool9));, +    assertEqualByteArrays(byte16, Decoder.convertBoolArrayToByteArray(bool16));, +  }]