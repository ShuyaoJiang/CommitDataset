[+++ b/cpp/core/src/zxing/BarcodeFormat.cpp, +namespace zxing {, +, +const char *barcodeFormatNames[] = {, +    "None",, +    "QR_CODE",, +    "DATA_MATRIX",, +    "UPC_E",, +    "UPC_A",, +    "EAN_8",, +    "EAN_13",, +    "CODE_128",, +    "CODE_39",, +    "ITF", +};, +, +}, +++ b/cpp/core/src/zxing/BarcodeFormat.cpp, +namespace zxing {, +, +const char *barcodeFormatNames[] = {, +    "None",, +    "QR_CODE",, +    "DATA_MATRIX",, +    "UPC_E",, +    "UPC_A",, +    "EAN_8",, +    "EAN_13",, +    "CODE_128",, +    "CODE_39",, +    "ITF", +};, +, +}, +++ b/cpp/core/src/zxing/BarcodeFormat.h, +	/* if you update the enum, please update the name in BarcodeFormat.cpp */, +	extern const char *barcodeFormatNames[];, +++ b/cpp/core/src/zxing/BarcodeFormat.cpp, +namespace zxing {, +, +const char *barcodeFormatNames[] = {, +    "None",, +    "QR_CODE",, +    "DATA_MATRIX",, +    "UPC_E",, +    "UPC_A",, +    "EAN_8",, +    "EAN_13",, +    "CODE_128",, +    "CODE_39",, +    "ITF", +};, +, +}, +++ b/cpp/core/src/zxing/BarcodeFormat.h, +	/* if you update the enum, please update the name in BarcodeFormat.cpp */, +	extern const char *barcodeFormatNames[];, +++ b/cpp/magick/src/main.cpp, +#include <zxing/DecodeHints.h>, +static bool show_format = false;, +static bool tryHarder = false;, +static bool show_filename = false;, +Ref<Result> decode(Ref<BinaryBitmap> image, DecodeHints hints) {, +  return Ref<Result> (new Result(*reader->decode(image, hints)));, +  const char* result_format = "";, +    DecodeHints hints(hints.DEFAULT_HINTS);, +    hints.setTryHarder(tryHarder);, +    Ref<Result> result(decode(binary, hints));, +    result_format = barcodeFormatNames[result->getBarcodeFormat()];, +  if (raw_dump && !hybrid) {/* don't print twice, and global is a bit better */, +    cout << cell_result;, +    if (show_format) {, +      cout << " " << result_format;, +    }, +    cout << endl;, +  }, +    cout << "Usage: " << argv[0] << " [--dump-raw] [--show-format] [--try-harder] [--show-filename] <filename1> [<filename2> ...]" << endl;, +    if (infilename.compare("--show-format") == 0) {, +      show_format = true;, +      continue;, +    }, +    if (infilename.compare("--try-harder") == 0) {, +      tryHarder = true;, +      continue;, +    }, +    if (infilename.compare("--show-filename") == 0) {, +      show_filename = true;, +      continue;, +    }, +    if (show_filename), +      cout << infilename << " ";]