[+++ b/core/src/com/google/zxing/common/BitMatrix.java, + * <p>Represents a 2D matrix of bits. In function arguments below, and throughout the common, + * <p>Internally the bits are represented in a 1-D array of 32-bit ints. However, each row begins, + * with a new int. This is done intentionally so that we can copy out a row into a BitArray very, + * efficiently.</p>, + *, + * <p>The ordering of bits is row-major. Within each int, the least significant bits are used first,, +  // TODO: Just like BitArray, these need to be public so ProGuard can inline them., +  public final int width;, +  public final int height;, +  public final int rowSize;, +  public final int[] bits;, +  // A helper to construct a square matrix., +    this(dimension, dimension);, +, +  public BitMatrix(int width, int height) {, +    if (width < 1 || height < 1) {, +      throw new IllegalArgumentException("Both dimensions must be greater than 0");, +    this.width = width;, +    this.height = height;, +    int rowSize = width >> 5;, +    if ((width & 0x1f) != 0) {, +      rowSize++;, +    }, +    this.rowSize = rowSize;, +    bits = new int[rowSize * height];, +    int offset = y * rowSize + (x >> 5);, +    return ((bits[offset] >>> (x & 0x1f)) & 1) != 0;, +    int offset = y * rowSize + (x >> 5);, +    bits[offset] |= 1 << (x & 0x1f);, +    int offset = y * rowSize + (x >> 5);, +    bits[offset] ^= 1 << (x & 0x1f);, +      throw new IllegalArgumentException("Left and top must be nonnegative");, +      throw new IllegalArgumentException("Height and width must be at least 1");, +    if (bottom > this.height || right > this.width) {, +      throw new IllegalArgumentException("The region must fit inside the matrix");, +      int offset = y * rowSize;, +        bits[offset + (x >> 5)] |= 1 << (x & 0x1f);, +   * A fast method to retrieve one row of data from the matrix as a BitArray., +   *, +   * @param y The row to retrieve, +   * @param row An optional caller-allocated BitArray, will be allocated if null or too small, +   * @return The resulting BitArray - this reference should always be used even when passing, +   *         your own row, +   */, +  BitArray getRow(int y, BitArray row) {, +    if (row == null || row.getSize() < width) {, +      row = new BitArray(width);, +    }, +    int offset = y * rowSize;, +    for (int x = 0; x < rowSize; x++) {, +      row.setBulk(x * 32, bits[offset + x]);, +    }, +    return row;, +  }, +, +  /**, +   * @return The width of the matrix, +   */, +  public int getWidth() {, +    return width;, +  }, +, +  /**, +   * @return The height of the matrix, +   */, +  public int getHeight() {, +    return height;, +  }, +, +  /**, +   * This method is for compatibility with older code. It's only logical to call if the matrix, +   * is square, so I'm throwing if that's not the case., +   *, +    if (width != height) {, +      throw new RuntimeException("Can't call getDimension() on a non-square matrix");, +    }, +    return width;, +    StringBuffer result = new StringBuffer(height * (width + 1));, +    for (int y = 0; y < height; y++) {, +      for (int x = 0; x < width; x++) {, +++ b/core/src/com/google/zxing/common/BitMatrix.java, + * <p>Represents a 2D matrix of bits. In function arguments below, and throughout the common, + * <p>Internally the bits are represented in a 1-D array of 32-bit ints. However, each row begins, + * with a new int. This is done intentionally so that we can copy out a row into a BitArray very, + * efficiently.</p>, + *, + * <p>The ordering of bits is row-major. Within each int, the least significant bits are used first,, +  // TODO: Just like BitArray, these need to be public so ProGuard can inline them., +  public final int width;, +  public final int height;, +  public final int rowSize;, +  public final int[] bits;, +  // A helper to construct a square matrix., +    this(dimension, dimension);, +, +  public BitMatrix(int width, int height) {, +    if (width < 1 || height < 1) {, +      throw new IllegalArgumentException("Both dimensions must be greater than 0");, +    this.width = width;]