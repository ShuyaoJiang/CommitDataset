[+++ b/android/src/com/google/zxing/client/android/camera/CameraConfigurationManager.java, +import android.content.SharedPreferences;, +import android.preference.PreferenceManager;, +import com.google.zxing.client.android.PreferencesActivity;, +, +import java.util.Collection;, +  private static final String TAG = "CameraConfiguration";, +  private static final int MIN_PREVIEW_PIXELS = 320 * 240; // small screen, +    Log.i(TAG, "Screen resolution: " + screenResolution);, +    cameraResolution = findBestPreviewSizeValue(parameters, screenResolution, false);, +    Log.i(TAG, "Camera resolution: " + cameraResolution);, +, +    if (parameters == null) {, +      Log.w(TAG, "Device error: no camera parameters are available. Proceeding without configuration.");, +      return;, +    }, +, +    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);, +, +    initializeTorch(parameters, prefs);, +    String focusMode = findSettableValue(parameters.getSupportedFocusModes(),, +                                         Camera.Parameters.FOCUS_MODE_AUTO,, +                                         Camera.Parameters.FOCUS_MODE_MACRO);, +    if (focusMode != null) {, +      parameters.setFocusMode(focusMode);, +    }, +, +  void setTorch(Camera camera, boolean newSetting) {, +    Camera.Parameters parameters = camera.getParameters();, +    doSetTorch(parameters, newSetting);, +    camera.setParameters(parameters);, +    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);, +    boolean currentSetting = prefs.getBoolean(PreferencesActivity.KEY_FRONT_LIGHT, false);, +    if (currentSetting != newSetting) {, +      SharedPreferences.Editor editor = prefs.edit();, +      editor.putBoolean(PreferencesActivity.KEY_FRONT_LIGHT, newSetting);, +      editor.commit();, +    }, +  private static void initializeTorch(Camera.Parameters parameters, SharedPreferences prefs) {, +    boolean currentSetting = prefs.getBoolean(PreferencesActivity.KEY_FRONT_LIGHT, false);, +    doSetTorch(parameters, currentSetting);, +  private static void doSetTorch(Camera.Parameters parameters, boolean newSetting) {, +    String flashMode;, +    if (newSetting) {, +      flashMode = findSettableValue(parameters.getSupportedFlashModes(),, +                                    Camera.Parameters.FLASH_MODE_TORCH,, +                                    Camera.Parameters.FLASH_MODE_ON);, +    } else {, +      flashMode = findSettableValue(parameters.getSupportedFlashModes(),, +                                    Camera.Parameters.FLASH_MODE_OFF);, +    }, +    if (flashMode != null) {, +      parameters.setFlashMode(flashMode);, +    }, +  private static Point findBestPreviewSizeValue(Camera.Parameters parameters,, +                                                Point screenResolution,, +                                                boolean portrait) {, +    Point bestSize = null;, +    for (Camera.Size supportedPreviewSize : parameters.getSupportedPreviewSizes()) {, +      if (supportedPreviewSize.height * supportedPreviewSize.width < MIN_PREVIEW_PIXELS) {, +      int supportedWidth = portrait ? supportedPreviewSize.height : supportedPreviewSize.width;, +      int supportedHeight = portrait ? supportedPreviewSize.width : supportedPreviewSize.height;, +      int newDiff = Math.abs(screenResolution.x * supportedHeight - supportedWidth * screenResolution.y);, +        bestSize = new Point(supportedWidth, supportedHeight);, +      }, +      if (newDiff < diff) {, +        bestSize = new Point(supportedWidth, supportedHeight);, +    if (bestSize == null) {, +      Camera.Size defaultSize = parameters.getPreviewSize();, +      bestSize = new Point(defaultSize.width, defaultSize.height);, +    return bestSize;, +  private static String findSettableValue(Collection<String> supportedValues,, +                                          String... desiredValues) {, +    Log.i(TAG, "Supported values: " + supportedValues);, +    String result = null;, +    if (supportedValues != null) {, +      for (String desiredValue : desiredValues) {, +        if (supportedValues.contains(desiredValue)) {, +          result = desiredValue;, +          break;, +    Log.i(TAG, "Settable value: " + result);, +    return result;, +++ b/android/src/com/google/zxing/client/android/camera/CameraConfigurationManager.java, +import android.content.SharedPreferences;, +import android.preference.PreferenceManager;, +import com.google.zxing.client.android.PreferencesActivity;, +, +import java.util.Collection;, +  private static final String TAG = "CameraConfiguration";, +  private static final int MIN_PREVIEW_PIXELS = 320 * 240; // small screen, +    Log.i(TAG, "Screen resolution: " + screenResolution);, +    cameraResolution = findBestPreviewSizeValue(parameters, screenResolution, false);, +    Log.i(TAG, "Camera resolution: " + cameraResolution);, +, +    if (parameters == null) {, +      Log.w(TAG, "Device error: no camera parameters are available. Proceeding without configuration.");, +      return;, +    }, +, +    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);]