[+++ b/core/src/com/google/zxing/ReaderException.java, +  // EXCEPTION TRACKING SUPPORT, +  // Identifies who is throwing exceptions and how often. To use:, +  //, +  // 1. Uncomment these lines and the code below which uses them., +  // 2. Uncomment the two corresponding lines in j2se/CommandLineRunner.decode(), +  // 3. Change core to build as Java 1.5 temporarily, +//  private static int exceptionCount = 0;, +//  private static Map<String,Integer> throwers = new HashMap<String,Integer>(32);, +, +//    Exception e = new Exception();, +//    // Take the stack frame before this one., +//    StackTraceElement stack = e.getStackTrace()[1];, +//    String key = stack.getClassName() + "." + stack.getMethodName() + "(), line " +, +//        stack.getLineNumber();, +//    if (throwers.containsKey(key)) {, +//      Integer value = throwers.get(key);, +//      value++;, +//      throwers.put(key, value);, +//    } else {, +//      throwers.put(key, 1);, +//    }, +//    exceptionCount++;, +, +//  public static int getExceptionCountAndReset() {, +//    int temp = exceptionCount;, +//    exceptionCount = 0;, +//    return temp;, +//  }, +//, +//  public static String getThrowersAndReset() {, +//    StringBuilder builder = new StringBuilder(1024);, +//    Object[] keys = throwers.keySet().toArray();, +//    for (int x = 0; x < keys.length; x++) {, +//      String key = (String) keys[x];, +//      Integer value = throwers.get(key);, +//      builder.append(key);, +//      builder.append(": ");, +//      builder.append(value);, +//      builder.append("\n");, +//    }, +//    throwers.clear();, +//    return builder.toString();, +//  }, +, +++ b/core/src/com/google/zxing/ReaderException.java, +  // EXCEPTION TRACKING SUPPORT, +  // Identifies who is throwing exceptions and how often. To use:, +  //, +  // 1. Uncomment these lines and the code below which uses them., +  // 2. Uncomment the two corresponding lines in j2se/CommandLineRunner.decode(), +  // 3. Change core to build as Java 1.5 temporarily, +//  private static int exceptionCount = 0;, +//  private static Map<String,Integer> throwers = new HashMap<String,Integer>(32);, +, +//    Exception e = new Exception();, +//    // Take the stack frame before this one., +//    StackTraceElement stack = e.getStackTrace()[1];, +//    String key = stack.getClassName() + "." + stack.getMethodName() + "(), line " +, +//        stack.getLineNumber();, +//    if (throwers.containsKey(key)) {, +//      Integer value = throwers.get(key);, +//      value++;, +//      throwers.put(key, value);, +//    } else {, +//      throwers.put(key, 1);, +//    }, +//    exceptionCount++;, +, +//  public static int getExceptionCountAndReset() {, +//    int temp = exceptionCount;, +//    exceptionCount = 0;, +//    return temp;, +//  }, +//, +//  public static String getThrowersAndReset() {, +//    StringBuilder builder = new StringBuilder(1024);, +//    Object[] keys = throwers.keySet().toArray();, +//    for (int x = 0; x < keys.length; x++) {, +//      String key = (String) keys[x];, +//      Integer value = throwers.get(key);, +//      builder.append(key);, +//      builder.append(": ");, +//      builder.append(value);, +//      builder.append("\n");, +//    }, +//    throwers.clear();, +//    return builder.toString();, +//  }, +, +++ b/javase/src/com/google/zxing/client/j2se/CommandLineRunner.java, +    } finally {, +      // Uncomment these lines when turning on exception tracking in ReaderException., +      //System.out.println("Threw " + ReaderException.getExceptionCountAndReset() + " exceptions");, +      //System.out.println("Throwers:\n" + ReaderException.getThrowersAndReset());]