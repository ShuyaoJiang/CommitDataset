[+++ b/AUTHORS, +sanfordsquires (?), +++ b/AUTHORS, +sanfordsquires (?), +++ b/core/src/com/google/zxing/common/reedsolomon/ReedSolomonDecoder.java, + * @author sanfordsquires, +  public void decode(int[] received, int twoS) throws ReedSolomonException {, +    boolean dataMatrix = field.equals(GF256.DATA_MATRIX_FIELD);, +      // Thanks to sanfordsquires for this fix:, +    int[] errorMagnitudes = findErrorMagnitudes(omega, errorLocations, dataMatrix);, +      if (position < 0) {, +        throw new ReedSolomonException("Bad error location");, +      }, +  private int[] findErrorMagnitudes(GF256Poly errorEvaluator, int[] errorLocations, boolean dataMatrix) {, +      // Thanks to sanfordsquires for this fix:, +      if (dataMatrix) {, +        result[i] = field.multiply(result[i], xiInverse);, +      }, +++ b/AUTHORS, +sanfordsquires (?), +++ b/core/src/com/google/zxing/common/reedsolomon/ReedSolomonDecoder.java, + * @author sanfordsquires, +  public void decode(int[] received, int twoS) throws ReedSolomonException {, +    boolean dataMatrix = field.equals(GF256.DATA_MATRIX_FIELD);, +      // Thanks to sanfordsquires for this fix:, +    int[] errorMagnitudes = findErrorMagnitudes(omega, errorLocations, dataMatrix);, +      if (position < 0) {, +        throw new ReedSolomonException("Bad error location");, +      }, +  private int[] findErrorMagnitudes(GF256Poly errorEvaluator, int[] errorLocations, boolean dataMatrix) {, +      // Thanks to sanfordsquires for this fix:, +      if (dataMatrix) {, +        result[i] = field.multiply(result[i], xiInverse);, +      }, +++ b/core/src/com/google/zxing/datamatrix/decoder/Decoder.java, +      rsDecoder.decode(codewordsInts, numECCodewords);, +++ b/AUTHORS, +sanfordsquires (?), +++ b/core/src/com/google/zxing/common/reedsolomon/ReedSolomonDecoder.java, + * @author sanfordsquires, +  public void decode(int[] received, int twoS) throws ReedSolomonException {, +    boolean dataMatrix = field.equals(GF256.DATA_MATRIX_FIELD);, +      // Thanks to sanfordsquires for this fix:, +    int[] errorMagnitudes = findErrorMagnitudes(omega, errorLocations, dataMatrix);, +      if (position < 0) {, +        throw new ReedSolomonException("Bad error location");, +      }, +  private int[] findErrorMagnitudes(GF256Poly errorEvaluator, int[] errorLocations, boolean dataMatrix) {, +      // Thanks to sanfordsquires for this fix:, +      if (dataMatrix) {, +        result[i] = field.multiply(result[i], xiInverse);, +      }, +++ b/core/src/com/google/zxing/datamatrix/decoder/Decoder.java, +      rsDecoder.decode(codewordsInts, numECCodewords);, +++ b/core/src/com/google/zxing/qrcode/decoder/Decoder.java, +      rsDecoder.decode(codewordsInts, numECCodewords);, +++ b/AUTHORS, +sanfordsquires (?), +++ b/core/src/com/google/zxing/common/reedsolomon/ReedSolomonDecoder.java, + * @author sanfordsquires, +  public void decode(int[] received, int twoS) throws ReedSolomonException {, +    boolean dataMatrix = field.equals(GF256.DATA_MATRIX_FIELD);, +      // Thanks to sanfordsquires for this fix:, +    int[] errorMagnitudes = findErrorMagnitudes(omega, errorLocations, dataMatrix);, +      if (position < 0) {, +        throw new ReedSolomonException("Bad error location");, +      }, +  private int[] findErrorMagnitudes(GF256Poly errorEvaluator, int[] errorLocations, boolean dataMatrix) {, +      // Thanks to sanfordsquires for this fix:, +      if (dataMatrix) {, +        result[i] = field.multiply(result[i], xiInverse);, +      }, +++ b/core/src/com/google/zxing/datamatrix/decoder/Decoder.java, +      rsDecoder.decode(codewordsInts, numECCodewords);, +++ b/core/src/com/google/zxing/qrcode/decoder/Decoder.java, +      rsDecoder.decode(codewordsInts, numECCodewords);, +++ b/core/test/src/com/google/zxing/common/reedsolomon/AbstractReedSolomonTestCase.java, +/*, + * Copyright 2008 ZXing authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.zxing.common.reedsolomon;, +, +import junit.framework.TestCase;, +, +import java.util.BitSet;, +import java.util.Random;, +]