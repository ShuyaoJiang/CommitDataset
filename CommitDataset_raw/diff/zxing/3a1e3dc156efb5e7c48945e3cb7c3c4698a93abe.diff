[+++ b/core/src/com/google/zxing/common/reedsolomon/ReedSolomonDecoder.java, +    boolean noError = true;, +      int eval =  poly.evaluateAt(field.exp(i));, +      syndromeCoefficients[syndromeCoefficients.length - 1 - i] = eval;, +      if (eval != 0) {, +        noError = false;, +      }, +    }, +    if (noError) {, +      return;, +  private int[] findErrorLocations(GF256Poly errorLocator) throws ReedSolomonException {, +    int numErrors = errorLocator.getDegree();, +    if (numErrors == 1) { // shortcut, +      return new int[] { errorLocator.getCoefficient(1) };, +    }, +    int[] result = new int[numErrors];, +    int e = 0;, +    for (int i = 1; i < 256 && e < numErrors; i++) {, +        result[e] = field.inverse(i);, +        e++;, +    if (e != numErrors) {, +  private int[] findErrorMagnitudes(GF256Poly errorEvaluator, int[] errorLocations) {, +    if (s == 1) { // shortcut, +      return new int[] { errorEvaluator.getCoefficient(0) };, +    }, +    for (int i = 0; i < s; i++) {, +++ b/core/src/com/google/zxing/common/reedsolomon/ReedSolomonDecoder.java, +    boolean noError = true;, +      int eval =  poly.evaluateAt(field.exp(i));, +      syndromeCoefficients[syndromeCoefficients.length - 1 - i] = eval;, +      if (eval != 0) {, +        noError = false;, +      }, +    }, +    if (noError) {, +      return;, +  private int[] findErrorLocations(GF256Poly errorLocator) throws ReedSolomonException {, +    int numErrors = errorLocator.getDegree();, +    if (numErrors == 1) { // shortcut, +      return new int[] { errorLocator.getCoefficient(1) };, +    }, +    int[] result = new int[numErrors];, +    int e = 0;, +    for (int i = 1; i < 256 && e < numErrors; i++) {, +        result[e] = field.inverse(i);, +        e++;, +    if (e != numErrors) {, +  private int[] findErrorMagnitudes(GF256Poly errorEvaluator, int[] errorLocations) {, +    if (s == 1) { // shortcut, +      return new int[] { errorEvaluator.getCoefficient(0) };, +    }, +    for (int i = 0; i < s; i++) {, +++ b/core/test/src/com/google/zxing/common/reedsolomon/ReedSolomonDecoderTestCase.java, +  public void testOneError() throws ReedSolomonException {, +    int[] received = new int[QR_CODE_TEST_WITH_EC.length];, +    Random random = new Random(0xDEADBEEFL);, +    for (int i = 0; i < received.length; i++) {, +      System.arraycopy(QR_CODE_TEST_WITH_EC, 0, received, 0, received.length);, +      received[i] = random.nextInt(256);, +      checkQRRSDecode(received);, +    }, +  }, +]