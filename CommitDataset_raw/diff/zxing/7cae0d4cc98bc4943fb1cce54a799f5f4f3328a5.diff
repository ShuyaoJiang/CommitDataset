[+++ b/core/src/com/google/zxing/common/reedsolomon/GF256Poly.java, +  int[] getCoefficients() {, +    return coefficients;, +  }, +, +  GF256Poly[] divide(GF256Poly other) {, +    if (!field.equals(other.field)) {, +      throw new IllegalArgumentException("GF256Polys do not have same GF256 field");, +    }, +    if (other.isZero()) {, +      throw new IllegalArgumentException("Divide by 0");, +    }, +, +    GF256Poly quotient = field.getZero();, +    GF256Poly remainder = this;, +, +    int denominatorLeadingTerm = other.getCoefficient(other.getDegree());, +    int inverseDenominatorLeadingTerm = field.inverse(denominatorLeadingTerm);, +, +    while (remainder.getDegree() >= other.getDegree() && !remainder.isZero()) {, +      int degreeDifference = remainder.getDegree() - other.getDegree();, +      int scale = field.multiply(remainder.getCoefficient(remainder.getDegree()), inverseDenominatorLeadingTerm);, +      GF256Poly term = other.multiplyByMonomial(degreeDifference, scale);, +      GF256Poly iterationQuotient = field.buildMonomial(degreeDifference, scale);, +      quotient = quotient.addOrSubtract(iterationQuotient);, +      remainder = remainder.addOrSubtract(term);, +    }, +, +    return new GF256Poly[] { quotient, remainder };, +  }, +, +  public String toString() {, +    StringBuffer result = new StringBuffer(8 * getDegree());, +    for (int degree = getDegree(); degree >= 0; degree--) {, +      int coefficient = getCoefficient(degree);, +      if (coefficient != 0) {, +        if (coefficient < 0) {, +          result.append(" - ");, +          coefficient = -coefficient;, +        } else {, +          if (result.length() > 0) {, +            result.append(" + ");, +          }, +        }, +        if (degree == 0 || coefficient != 1) {, +          int alphaPower = field.log(coefficient);, +          if (alphaPower == 0) {, +            result.append('1');, +          } else if (alphaPower == 1) {, +            result.append('a');, +          } else {, +            result.append("a^");, +            result.append(alphaPower);, +          }, +        }, +        if (degree != 0) {, +          if (degree == 1) {, +            result.append('x');, +          } else {, +            result.append("x^");, +            result.append(degree);, +          }, +        }, +      }, +    }, +    return result.toString();, +  }, +, +++ b/core/src/com/google/zxing/common/reedsolomon/GF256Poly.java, +  int[] getCoefficients() {, +    return coefficients;, +  }, +, +  GF256Poly[] divide(GF256Poly other) {, +    if (!field.equals(other.field)) {, +      throw new IllegalArgumentException("GF256Polys do not have same GF256 field");, +    }, +    if (other.isZero()) {, +      throw new IllegalArgumentException("Divide by 0");, +    }, +, +    GF256Poly quotient = field.getZero();, +    GF256Poly remainder = this;, +, +    int denominatorLeadingTerm = other.getCoefficient(other.getDegree());, +    int inverseDenominatorLeadingTerm = field.inverse(denominatorLeadingTerm);, +, +    while (remainder.getDegree() >= other.getDegree() && !remainder.isZero()) {, +      int degreeDifference = remainder.getDegree() - other.getDegree();, +      int scale = field.multiply(remainder.getCoefficient(remainder.getDegree()), inverseDenominatorLeadingTerm);, +      GF256Poly term = other.multiplyByMonomial(degreeDifference, scale);, +      GF256Poly iterationQuotient = field.buildMonomial(degreeDifference, scale);, +      quotient = quotient.addOrSubtract(iterationQuotient);, +      remainder = remainder.addOrSubtract(term);, +    }, +, +    return new GF256Poly[] { quotient, remainder };, +  }, +, +  public String toString() {]