[+++ b/core/src/com/google/zxing/MultiFormatReader.java, +    Vector formats = hints == null ? null : (Vector) hints.get(DecodeHintType.POSSIBLE_FORMATS);, +    if (formats != null) {, +          formats.contains(BarcodeFormat.UPC_A) ||, +              formats.contains(BarcodeFormat.UPC_E) ||, +              formats.contains(BarcodeFormat.EAN_13) ||, +              formats.contains(BarcodeFormat.EAN_8) ||, +              formats.contains(BarcodeFormat.CODE_39) ||, +              formats.contains(BarcodeFormat.CODE_128) ||, +              formats.contains(BarcodeFormat.ITF);, +      if (formats.contains(BarcodeFormat.QR_CODE)) {, +      if (formats.contains(BarcodeFormat.DATAMATRIX)) {, +++ b/core/src/com/google/zxing/MultiFormatReader.java, +    Vector formats = hints == null ? null : (Vector) hints.get(DecodeHintType.POSSIBLE_FORMATS);, +    if (formats != null) {, +          formats.contains(BarcodeFormat.UPC_A) ||, +              formats.contains(BarcodeFormat.UPC_E) ||, +              formats.contains(BarcodeFormat.EAN_13) ||, +              formats.contains(BarcodeFormat.EAN_8) ||, +              formats.contains(BarcodeFormat.CODE_39) ||, +              formats.contains(BarcodeFormat.CODE_128) ||, +              formats.contains(BarcodeFormat.ITF);, +      if (formats.contains(BarcodeFormat.QR_CODE)) {, +      if (formats.contains(BarcodeFormat.DATAMATRIX)) {, +++ b/core/src/com/google/zxing/Result.java, +   * @return {@link BarcodeFormat} representing the format of the barcode that was decoded, +   * @return {@link Hashtable} mapping {@link ResultMetadataType} keys to values. May be, +   *   <code>null</code>. This contains optional metadata about what was detected about the barcode,, +   *   like orientation., +++ b/core/src/com/google/zxing/MultiFormatReader.java, +    Vector formats = hints == null ? null : (Vector) hints.get(DecodeHintType.POSSIBLE_FORMATS);, +    if (formats != null) {, +          formats.contains(BarcodeFormat.UPC_A) ||, +              formats.contains(BarcodeFormat.UPC_E) ||, +              formats.contains(BarcodeFormat.EAN_13) ||, +              formats.contains(BarcodeFormat.EAN_8) ||, +              formats.contains(BarcodeFormat.CODE_39) ||, +              formats.contains(BarcodeFormat.CODE_128) ||, +              formats.contains(BarcodeFormat.ITF);, +      if (formats.contains(BarcodeFormat.QR_CODE)) {, +      if (formats.contains(BarcodeFormat.DATAMATRIX)) {, +++ b/core/src/com/google/zxing/Result.java, +   * @return {@link BarcodeFormat} representing the format of the barcode that was decoded, +   * @return {@link Hashtable} mapping {@link ResultMetadataType} keys to values. May be, +   *   <code>null</code>. This contains optional metadata about what was detected about the barcode,, +   *   like orientation., +++ b/core/src/com/google/zxing/common/BaseMonochromeBitmapSource.java, +  public void estimateBlackPoint(BlackPointEstimationMethod method, int argument), +      throws ReaderException {, +++ b/core/src/com/google/zxing/MultiFormatReader.java, +    Vector formats = hints == null ? null : (Vector) hints.get(DecodeHintType.POSSIBLE_FORMATS);, +    if (formats != null) {, +          formats.contains(BarcodeFormat.UPC_A) ||, +              formats.contains(BarcodeFormat.UPC_E) ||, +              formats.contains(BarcodeFormat.EAN_13) ||, +              formats.contains(BarcodeFormat.EAN_8) ||, +              formats.contains(BarcodeFormat.CODE_39) ||, +              formats.contains(BarcodeFormat.CODE_128) ||, +              formats.contains(BarcodeFormat.ITF);, +      if (formats.contains(BarcodeFormat.QR_CODE)) {, +      if (formats.contains(BarcodeFormat.DATAMATRIX)) {, +++ b/core/src/com/google/zxing/Result.java, +   * @return {@link BarcodeFormat} representing the format of the barcode that was decoded, +   * @return {@link Hashtable} mapping {@link ResultMetadataType} keys to values. May be, +   *   <code>null</code>. This contains optional metadata about what was detected about the barcode,, +   *   like orientation., +++ b/core/src/com/google/zxing/common/BaseMonochromeBitmapSource.java, +  public void estimateBlackPoint(BlackPointEstimationMethod method, int argument), +      throws ReaderException {, +++ b/core/src/com/google/zxing/common/BlackPointEstimator.java, +   * @throws ReaderException if "black" and "white" appear to be very close in luminance, +++ b/core/src/com/google/zxing/MultiFormatReader.java, +    Vector formats = hints == null ? null : (Vector) hints.get(DecodeHintType.POSSIBLE_FORMATS);, +    if (formats != null) {, +          formats.contains(BarcodeFormat.UPC_A) ||, +              formats.contains(BarcodeFormat.UPC_E) ||, +              formats.contains(BarcodeFormat.EAN_13) ||, +              formats.contains(BarcodeFormat.EAN_8) ||, +              formats.contains(BarcodeFormat.CODE_39) ||, +              formats.contains(BarcodeFormat.CODE_128) ||, +              formats.contains(BarcodeFormat.ITF);, +      if (formats.contains(BarcodeFormat.QR_CODE)) {, +      if (formats.contains(BarcodeFormat.DATAMATRIX)) {, +++ b/core/src/com/google/zxing/Result.java, +   * @return {@link BarcodeFormat} representing the format of the barcode that was decoded, +   * @return {@link Hashtable} mapping {@link ResultMetadataType} keys to values. May be, +   *   <code>null</code>. This contains optional metadata about what was detected about the barcode,, +   *   like orientation., +++ b/core/src/com/google/zxing/common/BaseMonochromeBitmapSource.java, +  public void estimateBlackPoint(BlackPointEstimationMethod method, int argument), +      throws ReaderException {, +++ b/core/src/com/google/zxing/common/BlackPointEstimator.java, +   * @throws ReaderException if "black" and "white" appear to be very close in luminance, +++ b/core/src/com/google/zxing/common/CharacterSetECI.java, +   * @return {@link CharacterSetECI} representing ECI of given value, or null if it is legal but, +   *   unsupported, +   * @return {@link CharacterSetECI} representing ECI for character encoding, or null if it is legal, +   *   but unsupported, +++ b/core/src/com/google/zxing/MultiFormatReader.java, +    Vector formats = hints == null ? null : (Vector) hints.get(DecodeHintType.POSSIBLE_FORMATS);]