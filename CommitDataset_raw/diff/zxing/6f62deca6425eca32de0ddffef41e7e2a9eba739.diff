[+++ b/AUTHORS, +drejc83, +++ b/AUTHORS, +drejc83, +++ b/javase/src/com/google/zxing/client/j2se/CommandLineRunner.java, +import javax.imageio.ImageIO;, +import com.google.zxing.BarcodeFormat;, +import com.google.zxing.BinaryBitmap;, +import com.google.zxing.DecodeHintType;, +import com.google.zxing.LuminanceSource;, +import com.google.zxing.MultiFormatReader;, +import com.google.zxing.NotFoundException;, +import com.google.zxing.Result;, +import com.google.zxing.ResultPoint;, +import com.google.zxing.client.result.ParsedResult;, +import com.google.zxing.client.result.ResultParser;, +import com.google.zxing.common.BitArray;, +import com.google.zxing.common.BitMatrix;, +import com.google.zxing.common.HybridBinarizer;, +import com.google.zxing.multi.GenericMultipleBarcodeReader;, + * <p>This simple command line utility decodes files, directories of files, or URIs which are passed as arguments. By, + * default it uses the normal decoding algorithms, but you can pass --try_harder to request that hint. The raw text of, + * each barcode is printed, and when running against directories, summary statistics are also displayed.</p>, +    boolean multi = false;, +      } else if ("--multi".equals(arg)) {, +        multi = true;, +        decodeOneArgument(arg, hints, dumpResults, dumpBlackPoint, crop, multi);, +    System.err.println("  --multi: Scans image for multiple barcodes");, +                                        int[] crop,, +                                        boolean multi) throws IOException, URISyntaxException {, +          if (multi) {, +            Result[] results = decodeMulti(input.toURI(), hints, dumpBlackPoint, crop);, +            if (results != null) {, +              successful++;, +              if (dumpResults) {, +                dumpResultMulti(input, results);, +              }, +            }, +          } else {, +          }, +        if (multi) {, +          Result[] results = decodeMulti(inputFile.toURI(), hints, dumpBlackPoint, crop);, +          if (dumpResults) {, +            dumpResultMulti(inputFile, results);, +          }, +        } else {, +      }, +  private static void dumpResultMulti(File input, Result[] results) throws IOException {, +    String name = input.getAbsolutePath();, +    int pos = name.lastIndexOf('.');, +    if (pos > 0) {, +      name = name.substring(0, pos);, +    }, +    File dump = new File(name + ".txt");, +    writeResultsToFile(results, dump);, +  }, +, +  private static void writeResultsToFile(Result[] results, File file) throws IOException {, +    String newline = System.getProperty("line.separator");, +    Writer out = new OutputStreamWriter(new FileOutputStream(file), Charset.forName("UTF8"));, +    try {, +      for (Result result : results) {, +        out.write(result.getText());, +        out.write(newline);, +      }, +    } finally {, +      out.close();, +    }, +  }, +, +        System.out.println("  Point " + i + ": (" + rp.getX() + ',' + rp.getY() + ')');, +  private static Result[] decodeMulti(URI uri,, +                                      Hashtable<DecodeHintType, Object> hints,, +                                      boolean dumpBlackPoint,, +                                      int[] crop) throws IOException {, +    BufferedImage image;, +    try {, +      image = ImageIO.read(uri.toURL());, +    } catch (IllegalArgumentException iae) {, +      throw new FileNotFoundException("Resource not found: " + uri);, +    }, +    if (image == null) {, +      System.err.println(uri.toString() + ": Could not load image");, +      return null;, +    }, +    try {, +      LuminanceSource source;, +      if (crop == null) {, +        source = new BufferedImageLuminanceSource(image);, +      } else {, +        source = new BufferedImageLuminanceSource(image, crop[0],, +                                                  crop[1], crop[2], crop[3]);, +      }, +      BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));, +      if (dumpBlackPoint) {, +        dumpBlackPoint(uri, image, bitmap);, +      }, +, +      MultiFormatReader multiFormatReader = new MultiFormatReader();, +      GenericMultipleBarcodeReader reader = new GenericMultipleBarcodeReader(]