[+++ b/core/test/src/com/google/zxing/qrcode/encoder/EncoderTestCase.java, +/*, + * Copyright 2008 ZXing authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.zxing.qrcode.encoder;, +, +import com.google.zxing.qrcode.encoder.MaskUtil;, +import junit.framework.TestCase;, +, +//#include "util/array/array2d-inl.h", +//#include "wireless/qrcode/bit_vector-inl.h", +//#include "base/google.h", +//#include "Strings/Stringpiece.h", +//#include "testing/base/benchmark.h", +//#include "testing/base/gunit.h", +//#include "util/reedsolomon/galois_field.h", +//#include "util/reedsolomon/galois_poly.h", +//#include "wireless/qrcode/qrcode_encoder.h", +, +/**, + * @author satorux@google.com (Satoru Takabayashi) - creator, + * @author mysen@google.com (Chris Mysen) - ported from C++, + */, +public final class EncoderTestCase extends TestCase {, +  public void testGetAlphanumericCode() {, +    // The first ten code points are numbers., +    for (int i = 0; i < 10; ++i) {, +      assertEquals(i, Encoder.GetAlphanumericCode('0' + i));, +    }, +, +    // The next 26 code points are capital alphabet letters., +    for (int i = 10; i < 36; ++i) {, +      assertEquals(i, Encoder.GetAlphanumericCode('A' + i - 10));, +    }, +, +    // Others are symbol letters, +    assertEquals(36, Encoder.GetAlphanumericCode(' '));, +    assertEquals(37, Encoder.GetAlphanumericCode('$'));, +    assertEquals(38, Encoder.GetAlphanumericCode('%'));, +    assertEquals(39, Encoder.GetAlphanumericCode('*'));, +    assertEquals(40, Encoder.GetAlphanumericCode('+'));, +    assertEquals(41, Encoder.GetAlphanumericCode('-'));, +    assertEquals(42, Encoder.GetAlphanumericCode('.'));, +    assertEquals(43, Encoder.GetAlphanumericCode('/'));, +    assertEquals(44, Encoder.GetAlphanumericCode(':'));, +, +    // Should return -1 for other letters;, +    assertEquals(-1, Encoder.GetAlphanumericCode('a'));, +    assertEquals(-1, Encoder.GetAlphanumericCode('#'));, +    assertEquals(-1, Encoder.GetAlphanumericCode('\0'));, +  }, +, +  public void testChooseMode() {, +    // Numeric mode., +    assertEquals(QRCode.MODE_NUMERIC, Encoder.ChooseMode(new ByteArray("0")));, +    assertEquals(QRCode.MODE_NUMERIC,, +	      Encoder.ChooseMode(new ByteArray("0123456789")));, +    // Alphanumeric mode., +    assertEquals(QRCode.MODE_ALPHANUMERIC, Encoder.ChooseMode(new ByteArray("A")));, +    assertEquals(QRCode.MODE_ALPHANUMERIC,, +        Encoder.ChooseMode(, +            new ByteArray("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:")));, +    // 8-bit byte mode., +    assertEquals(QRCode.MODE_8BIT_BYTE, Encoder.ChooseMode(new ByteArray("a")));, +    assertEquals(QRCode.MODE_8BIT_BYTE, Encoder.ChooseMode(new ByteArray("#")));, +    assertEquals(QRCode.MODE_8BIT_BYTE, Encoder.ChooseMode(new ByteArray("")));, +    // Kanji mode.  We used to use MODE_KANJI for these, but we stopped, +    // doing that as we cannot distinguish Shift_JIS from other encodings, +    // from data bytes alone.  See also comments in qrcode_encoder.h., +    byte[] dat1 = {0x8,0xa,0x8,0xa,0x8,0xa,0x8,(byte)0xa6};, +    assertEquals(QRCode.MODE_8BIT_BYTE,, +	      // AIUE in Hiragana in Shift_JIS, +	      Encoder.ChooseMode(new ByteArray(dat1)));, +    byte[] dat2 = {0x9,0xf,0x9,0x7b};, +    assertEquals(QRCode.MODE_8BIT_BYTE,, +	      // Nihon in Kanji in Shift_JIS., +	      Encoder.ChooseMode(new ByteArray(dat2)));, +    byte[] dat3 = {0xe,0x4,0x9,0x5,0x9,0x61};, +    assertEquals(QRCode.MODE_8BIT_BYTE,, +	      // Sou-Utsu-Byou in Kanji in Shift_JIS., +	      Encoder.ChooseMode(new ByteArray(dat3)));, +  }, +, +  public void testEncode() {, +    QRCode qr_code = new QRCode();, +    assertTrue(Encoder.Encode(new ByteArray("ABCDEF"), QRCode.EC_LEVEL_H, qr_code));, +    // The following is a valid QR Code that can be read by cell phones.]