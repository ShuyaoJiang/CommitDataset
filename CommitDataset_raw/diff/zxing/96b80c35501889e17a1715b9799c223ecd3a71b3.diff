[+++ b/core/src/com/google/zxing/oned/MultiFormatOneDReader.java, +      if (possibleFormats.contains(BarcodeFormat.ITF)) {, +         readers.addElement(new ITFReader());, +      }, +      // TODO: Add ITFReader once it is validated as production ready, and tested for performance., +++ b/core/src/com/google/zxing/oned/MultiFormatOneDReader.java, +      if (possibleFormats.contains(BarcodeFormat.ITF)) {, +         readers.addElement(new ITFReader());, +      }, +      // TODO: Add ITFReader once it is validated as production ready, and tested for performance., +++ b/core/test/src/com/google/zxing/common/AbstractBlackBoxTestCase.java, +  protected Hashtable<DecodeHintType, Object> getHints() {, +    return null;, +  }, +, +      Hashtable<DecodeHintType, Object> hints = getHints();, +      if (tryHarder) {, +        if (hints == null) {, +          hints = TRY_HARDER_HINT;, +        } else {, +          hints.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);, +        }, +      }, +      result = getReader().decode(source, hints);, +++ b/core/src/com/google/zxing/oned/MultiFormatOneDReader.java, +      if (possibleFormats.contains(BarcodeFormat.ITF)) {, +         readers.addElement(new ITFReader());, +      }, +      // TODO: Add ITFReader once it is validated as production ready, and tested for performance., +++ b/core/test/src/com/google/zxing/common/AbstractBlackBoxTestCase.java, +  protected Hashtable<DecodeHintType, Object> getHints() {, +    return null;, +  }, +, +      Hashtable<DecodeHintType, Object> hints = getHints();, +      if (tryHarder) {, +        if (hints == null) {, +          hints = TRY_HARDER_HINT;, +        } else {, +          hints.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);, +        }, +      }, +      result = getReader().decode(source, hints);, +++ b/core/test/src/com/google/zxing/oned/ITFBlackBox1TestCase.java, +import com.google.zxing.DecodeHintType;, +import com.google.zxing.MultiFormatReader;, +import java.util.Hashtable;, +import java.util.Vector;, +  // TODO(dswitkin): This is only used for the mean time because ITF is not turned on by default., +  // The other formats are included here to make sure we don't recognize an ITF barcode as something, +  // else. Unfortunately this list is fragile. The right thing to do is profile ITF for performance,, +  // and if it doesn't impose significant overhead, turn it on by default. Then this method can be, +  // removed completely., +  @Override, +  protected Hashtable<DecodeHintType, Object> getHints() {, +    Hashtable<DecodeHintType, Object> hints = new Hashtable<DecodeHintType, Object>(3);, +    Vector<BarcodeFormat> vector = new Vector<BarcodeFormat>();, +    vector.addElement(BarcodeFormat.UPC_A);, +    vector.addElement(BarcodeFormat.UPC_E);, +    vector.addElement(BarcodeFormat.EAN_13);, +    vector.addElement(BarcodeFormat.EAN_8);, +    vector.addElement(BarcodeFormat.CODE_39);, +    vector.addElement(BarcodeFormat.CODE_128);, +    vector.addElement(BarcodeFormat.ITF);, +    vector.addElement(BarcodeFormat.QR_CODE);, +    hints.put(DecodeHintType.POSSIBLE_FORMATS, vector);, +    return hints;, +  }, +]