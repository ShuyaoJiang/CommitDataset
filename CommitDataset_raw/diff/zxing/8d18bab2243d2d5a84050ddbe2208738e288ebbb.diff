[+++ b/core/src/com/google/zxing/qrcode/encoder/MaskUtil.java, +   * Apply mask penalty rule 3 and return the penalty. Find consecutive runs of 1:1:3:1:1:4, +   * starting with black, or 4:1:1:3:1:1 starting with white, and give penalty to them.  If we, +   * find patterns like 000010111010000, we give penalty once., +    int numPenalties = 0;, +        byte[] arrayY = array[y];  // We can at least optimize this access, +        if (x + 8 < width &&, +            arrayY[x]     == 0 &&, +            arrayY[x + 1] == 1 &&, +            arrayY[x + 2] == 0 &&, +            arrayY[x + 3] == 1 &&, +            arrayY[x + 4] == 1 &&, +            arrayY[x + 5] == 1 &&, +            arrayY[x + 6] == 0 &&, +            arrayY[x + 7] == 1 &&, +            arrayY[x + 8] == 0 &&, +            ((x + 11 < width &&, +                arrayY[x +  9] == 0 &&, +                arrayY[x + 10] == 0 &&, +                arrayY[x + 11] == 0) ||, +             (x - 3 >= 0 &&, +                arrayY[x -  1] == 0 &&, +                arrayY[x -  2] == 0 &&, +                arrayY[x -  3] == 0))) {, +          numPenalties++;, +        if (y + 8 < height &&, +            array[y][x]     == 0 &&, +            array[y + 1][x] == 1 &&, +            array[y + 2][x] == 0 &&, +            array[y + 5][x] == 1 &&, +            array[y + 6][x] == 0 &&, +            array[y + 7][x] == 1 &&, +            ((y + 11 < height &&, +                array[y + 10][x] == 0 &&, +                array[y + 11][x] == 0) ||, +             (y - 3 >= 0 &&, +                array[y -  3][x] == 0))) {, +          numPenalties++;, +    return numPenalties * N3;, +    int fivePercentVariances = Math.abs(numDarkCells * 2 - numTotalCells) * 10 / numTotalCells;, +++ b/core/src/com/google/zxing/qrcode/encoder/MaskUtil.java, +   * Apply mask penalty rule 3 and return the penalty. Find consecutive runs of 1:1:3:1:1:4, +   * starting with black, or 4:1:1:3:1:1 starting with white, and give penalty to them.  If we, +   * find patterns like 000010111010000, we give penalty once., +    int numPenalties = 0;, +        byte[] arrayY = array[y];  // We can at least optimize this access, +        if (x + 8 < width &&, +            arrayY[x]     == 0 &&, +            arrayY[x + 1] == 1 &&, +            arrayY[x + 2] == 0 &&, +            arrayY[x + 3] == 1 &&, +            arrayY[x + 4] == 1 &&, +            arrayY[x + 5] == 1 &&, +            arrayY[x + 6] == 0 &&, +            arrayY[x + 7] == 1 &&, +            arrayY[x + 8] == 0 &&, +            ((x + 11 < width &&, +                arrayY[x +  9] == 0 &&, +                arrayY[x + 10] == 0 &&, +                arrayY[x + 11] == 0) ||, +             (x - 3 >= 0 &&, +                arrayY[x -  1] == 0 &&, +                arrayY[x -  2] == 0 &&, +                arrayY[x -  3] == 0))) {, +          numPenalties++;, +        if (y + 8 < height &&, +            array[y][x]     == 0 &&, +            array[y + 1][x] == 1 &&, +            array[y + 2][x] == 0 &&, +            array[y + 5][x] == 1 &&, +            array[y + 6][x] == 0 &&, +            array[y + 7][x] == 1 &&, +            ((y + 11 < height &&, +                array[y + 10][x] == 0 &&, +                array[y + 11][x] == 0) ||, +             (y - 3 >= 0 &&, +                array[y -  3][x] == 0))) {, +          numPenalties++;, +    return numPenalties * N3;, +    int fivePercentVariances = Math.abs(numDarkCells * 2 - numTotalCells) * 10 / numTotalCells;, +++ /dev/null, +++ b/core/src/com/google/zxing/qrcode/encoder/MaskUtil.java, +   * Apply mask penalty rule 3 and return the penalty. Find consecutive runs of 1:1:3:1:1:4, +   * starting with black, or 4:1:1:3:1:1 starting with white, and give penalty to them.  If we, +   * find patterns like 000010111010000, we give penalty once., +    int numPenalties = 0;, +        byte[] arrayY = array[y];  // We can at least optimize this access, +        if (x + 8 < width &&, +            arrayY[x]     == 0 &&, +            arrayY[x + 1] == 1 &&, +            arrayY[x + 2] == 0 &&, +            arrayY[x + 3] == 1 &&, +            arrayY[x + 4] == 1 &&, +            arrayY[x + 5] == 1 &&, +            arrayY[x + 6] == 0 &&, +            arrayY[x + 7] == 1 &&, +            arrayY[x + 8] == 0 &&, +            ((x + 11 < width &&, +                arrayY[x +  9] == 0 &&, +                arrayY[x + 10] == 0 &&]