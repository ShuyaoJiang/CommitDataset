[+++ b/cpp/core/tests/src/common/BitArrayTest.cpp, +#include <cstdlib>, +, +// fills the two arrays with identical random bits, +void BitArrayTest::fillRandom(BitArray& test, BitArray& reference) {, +  srandom(0xDEADBEEFL + test.getSize());, +  for(size_t i = 0; i < test.getSize(); ++i) {, +    if(random() & 0x1) {, +      test.set(i);, +      reference.set(i);, +    }, +  }, +}, +, +void BitArrayTest::testReverseHalves() {, +  // one word test, split in half, +  {, +    size_t bits = numeric_limits<unsigned int>::digits;, +    BitArray test(bits);, +, +    test.clear();, +    for(size_t i = 0; i < bits / 2; ++i) {, +      test.set(i);, +    }, +, +    test.reverse();, +    for(size_t i = 0; i < bits / 2; ++i) {, +      CPPUNIT_ASSERT_EQUAL(test.get(i), !test.get(bits - 1 - i));, +    }, +  }, +, +  // two word test, +  {, +    size_t bits2 = numeric_limits<unsigned int>::digits * 2;, +    BitArray test2(bits2);, +, +    test2.clear();, +    for(size_t i = 0; i < bits2 / 2; ++i) {, +      test2.set(i);, +    }, +, +    test2.reverse();, +    for(size_t i = 0; i < bits2 / 2; ++i) {, +      CPPUNIT_ASSERT_EQUAL(test2.get(i), !test2.get(bits2 - 1 - i));, +    }, +  }, +}, +, +void BitArrayTest::testReverseEven() {, +  size_t bits = numeric_limits<unsigned int>::digits * 8;, +  BitArray test(bits);, +  BitArray reference(bits);, +, +  test.clear();, +  reference.clear();, +, +  fillRandom(test, reference);, +, +  test.reverse();, +  for(size_t i = 0; i < bits; ++i) {, +    CPPUNIT_ASSERT_EQUAL(test.get(i), reference.get(bits - 1 - i));, +  }, +}, +, +void BitArrayTest::testReverseOdd() {, +  size_t bits = numeric_limits<unsigned int>::digits * 6 + 11;, +  BitArray test(bits);, +  BitArray reference(bits);, +, +  test.clear();, +  reference.clear();, +, +  fillRandom(test, reference);, +, +  test.reverse();, +  for(size_t i = 0; i < bits; ++i) {, +    CPPUNIT_ASSERT_EQUAL(test.get(i), reference.get(bits - 1 - i));, +  }, +}, +, +void BitArrayTest::testReverseSweep() {, +  size_t bits;, +  size_t bitsHigh = numeric_limits<unsigned int>::digits * 10;, +, +  for(bits = 1; bits < bitsHigh; ++bits) {, +    BitArray test(bits);, +    BitArray reference(bits);, +, +    test.clear();, +    reference.clear();, +, +    fillRandom(test, reference);, +, +    test.reverse();, +    for(size_t i = 0; i < bits; ++i) {, +      CPPUNIT_ASSERT_EQUAL(test.get(i), reference.get(bits - 1 - i));, +    }, +  }, +}, +]