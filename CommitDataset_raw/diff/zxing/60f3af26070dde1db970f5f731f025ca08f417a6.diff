[+++ b/core/src/com/google/zxing/qrcode/encoder/Encoder.java, +  static boolean Encode(final StringPiece& bytes, int ec_level, QRCode *qr_code) {, +    final int mode = ChooseMode(bytes);, +  static int ChooseMode(final StringPiece &bytes) {, +  private static int ChooseMaskPattern(final BitVector &bits, int ec_level, int version,, +  static boolean InitQRCode(int num_input_bytes, int ec_level, int mode, QRCode *qr_code) {, +  static boolean AppendModeInfo(int mode, BitVector *bits) {, +  static boolean AppendLengthInfo(int num_bytes, int version, int mode, BitVector *bits) {, +  // Append "bytes" in "mode" mode (encoding) into "bits". On success, store the result in "bits", +  // and return true. On error, return false., +  static boolean AppendBytes(final StringPiece &bytes, int mode, BitVector *bits) {, +  // Append "bytes" to "bits" using QRCode.MODE_NUMERIC mode. On success, store the result in "bits", +  // and return true. On error, return false., +++ b/core/src/com/google/zxing/qrcode/encoder/Encoder.java, +  static boolean Encode(final StringPiece& bytes, int ec_level, QRCode *qr_code) {, +    final int mode = ChooseMode(bytes);, +  static int ChooseMode(final StringPiece &bytes) {, +  private static int ChooseMaskPattern(final BitVector &bits, int ec_level, int version,, +  static boolean InitQRCode(int num_input_bytes, int ec_level, int mode, QRCode *qr_code) {, +  static boolean AppendModeInfo(int mode, BitVector *bits) {, +  static boolean AppendLengthInfo(int num_bytes, int version, int mode, BitVector *bits) {, +  // Append "bytes" in "mode" mode (encoding) into "bits". On success, store the result in "bits", +  // and return true. On error, return false., +  static boolean AppendBytes(final StringPiece &bytes, int mode, BitVector *bits) {, +  // Append "bytes" to "bits" using QRCode.MODE_NUMERIC mode. On success, store the result in "bits", +  // and return true. On error, return false., +++ b/core/src/com/google/zxing/qrcode/encoder/MatrixUtil.java, +                                    int ec_level,, +  public static boolean EmbedTypeInfo(int ec_level, int mask_pattern, QRCodeMatrix *matrix) {, +  public static boolean MakeTypeInfoBits(int ec_level, final int mask_pattern, BitVector *bits) {, +++ b/core/src/com/google/zxing/qrcode/encoder/Encoder.java, +  static boolean Encode(final StringPiece& bytes, int ec_level, QRCode *qr_code) {, +    final int mode = ChooseMode(bytes);, +  static int ChooseMode(final StringPiece &bytes) {, +  private static int ChooseMaskPattern(final BitVector &bits, int ec_level, int version,, +  static boolean InitQRCode(int num_input_bytes, int ec_level, int mode, QRCode *qr_code) {, +  static boolean AppendModeInfo(int mode, BitVector *bits) {, +  static boolean AppendLengthInfo(int num_bytes, int version, int mode, BitVector *bits) {, +  // Append "bytes" in "mode" mode (encoding) into "bits". On success, store the result in "bits", +  // and return true. On error, return false., +  static boolean AppendBytes(final StringPiece &bytes, int mode, BitVector *bits) {, +  // Append "bytes" to "bits" using QRCode.MODE_NUMERIC mode. On success, store the result in "bits", +  // and return true. On error, return false., +++ b/core/src/com/google/zxing/qrcode/encoder/MatrixUtil.java, +                                    int ec_level,, +  public static boolean EmbedTypeInfo(int ec_level, int mask_pattern, QRCodeMatrix *matrix) {, +  public static boolean MakeTypeInfoBits(int ec_level, final int mask_pattern, BitVector *bits) {, +++ b/core/src/com/google/zxing/qrcode/encoder/QRCode.java, +  private int mode_;, +  private int ec_level_;, +  // They call encoding "mode".  The modes are defined in 8.3 of JISX0510:2004 (p.14). It's unlikely, +  // (probably we will not support complicated modes) but if you add an item to this, please also, +  // add it to ModeToString(), GetModeCode(), GetNumBitsForLength(), Encoder.AppendBytes(), and, +  //, +  // JAVAPORT: These used to be C++ enums, but the code evaluates them as integers, and requires, +  // negative values. I don't want to take the ParsedResultType approach of a class full of statics, +  // of that class's type. The best compromise here is integer constants., +  //, +  // Formerly enum Mode, +  public static final int MODE_UNDEFINED = -1;, +  public static final int MODE_NUMERIC = 0;, +  public static final int MODE_ALPHANUMERIC = 1;, +  public static final int MODE_8BIT_BYTE = 2;, +  public static final int MODE_KANJI = 3;  // Shift_JIS, +  public static final int NUM_MODES = 4;, +  // The error correction levels are defined in the table 22 of JISX0510:2004 (p.45). It's very, +  // unlikely (we've already covered all of them!)  but if you add an item to this, please also add, +  // it to ECLevelToString() and GetECLevelCode()., +  //, +  // Formerly enum ECLevel, +  public static final int EC_LEVEL_UNDEFINED  = -1;, +  public static final int EC_LEVEL_L = 0;  //  7% of corruption can be recovered., +  public static final int EC_LEVEL_M = 1;  // 15%, +  public static final int EC_LEVEL_Q = 2;  // 25%, +  public static final int EC_LEVEL_H = 3;  // 30%, +  public static final int NUM_EC_LEVELS = 4;, +  public int mode() { return mode_; }, +  public int ec_level() { return ec_level_; }, +  public void set_mode(int value) { mode_ = value; }, +  public void set_ec_level(int value) { ec_level_ = value; }, +  public static boolean IsValidECLevel(int ec_level) {, +  public static boolean IsValidMode(final int mode) {, +  public static final String ECLevelToString(int ec_level) {, +  public static final String ModeToString(int mode) {, +  public static int GetECLevelCode(final int ec_level) {, +  public static int GetModeCode(final int mode) {, +  public static int GetNumBitsForLength(int version, int mode) {, +++ b/core/src/com/google/zxing/qrcode/encoder/Encoder.java, +  static boolean Encode(final StringPiece& bytes, int ec_level, QRCode *qr_code) {, +    final int mode = ChooseMode(bytes);, +  static int ChooseMode(final StringPiece &bytes) {, +  private static int ChooseMaskPattern(final BitVector &bits, int ec_level, int version,, +  static boolean InitQRCode(int num_input_bytes, int ec_level, int mode, QRCode *qr_code) {, +  static boolean AppendModeInfo(int mode, BitVector *bits) {, +  static boolean AppendLengthInfo(int num_bytes, int version, int mode, BitVector *bits) {, +  // Append "bytes" in "mode" mode (encoding) into "bits". On success, store the result in "bits", +  // and return true. On error, return false., +  static boolean AppendBytes(final StringPiece &bytes, int mode, BitVector *bits) {, +  // Append "bytes" to "bits" using QRCode.MODE_NUMERIC mode. On success, store the result in "bits", +  // and return true. On error, return false.]