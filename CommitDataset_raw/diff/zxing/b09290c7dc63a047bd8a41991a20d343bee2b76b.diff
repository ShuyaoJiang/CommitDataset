[+++ b/core/src/main/java/com/google/zxing/pdf417/encoder/PDF417.java, +    encoding = null; // Use default, +++ b/core/src/main/java/com/google/zxing/pdf417/encoder/PDF417.java, +    encoding = null; // Use default, +++ b/core/src/main/java/com/google/zxing/pdf417/encoder/PDF417HighLevelEncoder.java, +import java.nio.charset.UnsupportedCharsetException;, +import java.util.List;, +  private static final List<String> DEFAULT_ENCODING_NAMES = Arrays.asList("Cp437", "IBM437");, +   * @param compaction compaction mode to use, +   * @param encoding character encoding used to encode in default or byte compaction, +   *  or {@code null} for default / not applicable, +    if (encoding != null || !DEFAULT_ENCODING_NAMES.contains(encoding.name())) {, +      bytes = toBytes(msg, encoding);, +              bytes = toBytes(msg, encoding);, +  private static byte[] toBytes(String msg, Charset encoding) throws WriterException {, +    // Defer instantiating default Charset until needed, since it may be for an unsupported, +    // encoding. For example the default of Cp437 doesn't seem to exist on Android., +    if (encoding == null) {, +      for (String encodingName : DEFAULT_ENCODING_NAMES) {, +        try {, +          encoding = Charset.forName(encodingName);, +        } catch (UnsupportedCharsetException uce) {, +          // continue, +        }, +      }, +      if (encoding == null) {, +        throw new WriterException("No support for any encoding: " + DEFAULT_ENCODING_NAMES);, +      }, +    }, +    return msg.getBytes(encoding);, +  }, +]