[+++ b/android/src/com/google/zxing/client/android/HttpHelper.java, +import android.util.Log;, +, +  private static final String TAG = HttpHelper.class.getSimpleName();, +, +    Log.i(TAG, "Downloading " + uri);, +++ b/android/src/com/google/zxing/client/android/HttpHelper.java, +import android.util.Log;, +, +  private static final String TAG = HttpHelper.class.getSimpleName();, +, +    Log.i(TAG, "Downloading " + uri);, +++ /dev/null, +++ b/android/src/com/google/zxing/client/android/HttpHelper.java, +import android.util.Log;, +, +  private static final String TAG = HttpHelper.class.getSimpleName();, +, +    Log.i(TAG, "Downloading " + uri);, +++ /dev/null, +++ b/android/src/com/google/zxing/client/android/book/SearchBookContentsActivity.java, +import android.os.AsyncTask;, +import com.google.zxing.client.android.HttpHelper;, +import java.io.IOException;, +      NetworkTask networkTask = new NetworkTask();, +      networkTask.execute(query, isbn);, +, +  private final class NetworkTask extends AsyncTask<String,Object,JSONObject> {, +, +    @Override, +    protected JSONObject doInBackground(String... args) {, +      try {, +        // These return a JSON result which describes if and where the query was found. This API may, +        // break or disappear at any time in the future. Since this is an API call rather than a, +        // website, we don't use LocaleManager to change the TLD., +        String theQuery = args[0];, +        String theIsbn = args[1];, +        String uri;, +        if (LocaleManager.isBookSearchUrl(theIsbn)) {, +          int equals = theIsbn.indexOf('=');, +          String volumeId = theIsbn.substring(equals + 1);, +          uri = "http://www.google.com/books?id=" + volumeId + "&jscmd=SearchWithinVolume2&q=" + theQuery;, +        } else {, +          uri = "http://www.google.com/books?vid=isbn" + theIsbn + "&jscmd=SearchWithinVolume2&q=" + theQuery;, +        }, +        String content = HttpHelper.downloadViaHttp(uri, HttpHelper.ContentType.JSON);, +        return new JSONObject(content);, +      } catch (IOException ioe) {, +        Log.w(TAG, "Error accessing book search", ioe);, +        return null;, +      } catch (JSONException je) {, +        Log.w(TAG, "Error accessing book search", je);, +        return null;, +      }, +    }, +, +    @Override, +    protected void onPostExecute(JSONObject result) {, +      if (result == null) {, +        headerView.setText(R.string.msg_sbc_failed);, +      } else {, +        handleSearchResults(result);, +      }, +      queryTextView.setEnabled(true);, +      queryTextView.selectAll();, +      queryButton.setEnabled(true);, +          resultListView.setOnItemClickListener(new BrowseBookListener(SearchBookContentsActivity.this, items));, +          resultListView.setAdapter(new SearchBookContentsAdapter(SearchBookContentsActivity.this, items));, +, +  }, +]