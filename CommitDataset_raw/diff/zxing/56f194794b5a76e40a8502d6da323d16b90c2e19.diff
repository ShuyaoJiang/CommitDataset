[+++ b/AUTHORS, +Kevin O'Sullivan (SITA), +++ b/AUTHORS, +Kevin O'Sullivan (SITA), +++ b/core/src/com/google/zxing/BarcodeFormat.java, +  /** ITF-14 1D format. */, +  public static final BarcodeFormat ITF_14 = new BarcodeFormat("ITF_14");, +, +++ b/AUTHORS, +Kevin O'Sullivan (SITA), +++ b/core/src/com/google/zxing/BarcodeFormat.java, +  /** ITF-14 1D format. */, +  public static final BarcodeFormat ITF_14 = new BarcodeFormat("ITF_14");, +, +++ b/core/src/com/google/zxing/oned/AbstractUPCEANReader.java, +   * @return {@link #checkStandardUPCEANChecksum(String)} , +   */, +  boolean checkChecksum(String s) throws ReaderException {, +    return checkStandardUPCEANChecksum(s);, +  }, +, +  /**, +  public static boolean checkStandardUPCEANChecksum(String s) throws ReaderException {, +++ b/AUTHORS, +Kevin O'Sullivan (SITA), +++ b/core/src/com/google/zxing/BarcodeFormat.java, +  /** ITF-14 1D format. */, +  public static final BarcodeFormat ITF_14 = new BarcodeFormat("ITF_14");, +, +++ b/core/src/com/google/zxing/oned/AbstractUPCEANReader.java, +   * @return {@link #checkStandardUPCEANChecksum(String)} , +   */, +  boolean checkChecksum(String s) throws ReaderException {, +    return checkStandardUPCEANChecksum(s);, +  }, +, +  /**, +  public static boolean checkStandardUPCEANChecksum(String s) throws ReaderException {, +++ b/core/src/com/google/zxing/oned/ITF14Reader.java, +/*, + * Copyright 2008 ZXing authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.zxing.oned;, +, +import com.google.zxing.BarcodeFormat;, +import com.google.zxing.ReaderException;, +import com.google.zxing.Result;, +import com.google.zxing.ResultPoint;, +import com.google.zxing.common.BitArray;, +import com.google.zxing.common.GenericResultPoint;, +, +import java.util.Hashtable;, +, +/**, + * <p>Implements decoding of the ITF-14 format.</p>, + * <p/>, + * <p>"ITF" stands for Interleaved Two of Five. The "-14" part indicates there are 14 digits encoded in the barcode.</p>, + * <p/>, + * <p><a href="http://en.wikipedia.org/wiki/Interleaved_2_of_5">http://en.wikipedia.org/wiki/Interleaved_2_of_5</a>, + * is a great reference for Interleaved 2 of 5 information. </p>, + * <p/>, + * <p>TODO: ITF-14 is an implementation of, + * <a href="http://en.wikipedia.org/wiki/Interleaved_2_of_5">Interleaved 2 of 5</a> barcode., + * It stipulates that there is 14 digits in the bar code. A more abstract class should be implemented, + * which will scan an arbritary number of digits encoded in two of five format.</p>, + *, + * @author kevin.osullivan@sita.aero, + */, +public final class ITF14Reader extends AbstractOneDReader {, +, +  private static final int MAX_AVG_VARIANCE = (int) (PATTERN_MATCH_RESULT_SCALE_FACTOR * 0.42f);, +  private static final int MAX_INDIVIDUAL_VARIANCE = (int) (PATTERN_MATCH_RESULT_SCALE_FACTOR * 0.7f);, +, +  private static final int W = 3; // Pixel width of a wide line, +  private static final int N = 1; // Pixed width of a narrow line, +, +  private final int DIGIT_COUNT = 14;  // There are 14 digits in ITF-14, +  /**, +   * Start/end guard pattern., +   * <p/>, +   * Note: The end pattern is reversed because the, +   * row is reversed before searching for the END_PATTERN, +   */, +  private static final int[] START_PATTERN = {N, N, N, N};, +  private static final int[] END_PATTERN_REVERSED = {N, N, W};, +, +  /**]