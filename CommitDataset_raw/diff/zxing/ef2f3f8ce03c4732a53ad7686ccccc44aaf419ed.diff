[+++ b/core/src/com/google/zxing/client/result/CalendarParsedResult.java, +   * as <code>java.text.SimpleDateFormat</code>.</p> See validateDate() for the return format., +   * @return start time formatted as a RFC 2445 DATE or DATE-TIME.</p>, +   * @see #getStart(). May return null if the event has no duration., +  /**, +   * RFC 2445 allows the start and end fields to be of type DATE (e.g. 20081021) or DATE-TIME, +   * (e.g. 20081021T123000 for local time, or 20081021T123000Z for UTC)., +   *, +   * @param date The string to validate, +   */, +      int length = date.length();, +      if (length != 8 && length != 15 && length != 16) {, +      if (length > 8) {, +        if (length == 16 && date.charAt(15) != 'Z') {, +  }, +++ b/core/src/com/google/zxing/client/result/CalendarParsedResult.java, +   * as <code>java.text.SimpleDateFormat</code>.</p> See validateDate() for the return format., +   * @return start time formatted as a RFC 2445 DATE or DATE-TIME.</p>, +   * @see #getStart(). May return null if the event has no duration., +  /**, +   * RFC 2445 allows the start and end fields to be of type DATE (e.g. 20081021) or DATE-TIME, +   * (e.g. 20081021T123000 for local time, or 20081021T123000Z for UTC)., +   *, +   * @param date The string to validate, +   */, +      int length = date.length();, +      if (length != 8 && length != 15 && length != 16) {, +      if (length > 8) {, +        if (length == 16 && date.charAt(15) != 'Z') {, +  }, +++ b/core/test/src/com/google/zxing/client/result/ParsedReaderResultTestCase.java, +  public void testISBN() {, +    doTestResult("9784567890123", ParsedResultType.ISBN, BarcodeFormat.EAN_13);, +    doTestResult("9794567890123", ParsedResultType.ISBN, BarcodeFormat.EAN_13);, +    doTestResult("97845678901", ParsedResultType.TEXT);, +    doTestResult("97945678901", ParsedResultType.TEXT);, +  }, +, +    // UTC times, +    // Local times, +    doTestResult("BEGIN:VEVENT\r\nSUMMARY:foo\r\nDTSTART:20080504T123456\r\n" +, +        "DTEND:20080505T234555\r\nEND:VEVENT", ParsedResultType.CALENDAR);, +    // Date only (all day event), +    doTestResult("BEGIN:VEVENT\r\nSUMMARY:foo\r\nDTSTART:20080504\r\n" +, +        "DTEND:20080505\r\nEND:VEVENT", ParsedResultType.CALENDAR);, +    // Start time only, +    doTestResult("BEGIN:VEVENT\r\nSUMMARY:foo\r\nDTSTART:20080504T123456Z\r\nEND:VEVENT",, +        ParsedResultType.CALENDAR);, +    doTestResult("BEGIN:VEVENT\r\nSUMMARY:foo\r\nDTSTART:20080504T123456\r\nEND:VEVENT",, +        ParsedResultType.CALENDAR);, +    doTestResult("BEGIN:VEVENT\r\nSUMMARY:foo\r\nDTSTART:20080504\r\nEND:VEVENT",, +        ParsedResultType.CALENDAR);, +++ b/core/src/com/google/zxing/client/result/CalendarParsedResult.java, +   * as <code>java.text.SimpleDateFormat</code>.</p> See validateDate() for the return format., +   * @return start time formatted as a RFC 2445 DATE or DATE-TIME.</p>, +   * @see #getStart(). May return null if the event has no duration., +  /**, +   * RFC 2445 allows the start and end fields to be of type DATE (e.g. 20081021) or DATE-TIME, +   * (e.g. 20081021T123000 for local time, or 20081021T123000Z for UTC)., +   *, +   * @param date The string to validate, +   */, +      int length = date.length();, +      if (length != 8 && length != 15 && length != 16) {, +      if (length > 8) {, +        if (length == 16 && date.charAt(15) != 'Z') {, +  }, +++ b/core/test/src/com/google/zxing/client/result/ParsedReaderResultTestCase.java, +  public void testISBN() {, +    doTestResult("9784567890123", ParsedResultType.ISBN, BarcodeFormat.EAN_13);, +    doTestResult("9794567890123", ParsedResultType.ISBN, BarcodeFormat.EAN_13);, +    doTestResult("97845678901", ParsedResultType.TEXT);, +    doTestResult("97945678901", ParsedResultType.TEXT);, +  }, +, +    // UTC times, +    // Local times, +    doTestResult("BEGIN:VEVENT\r\nSUMMARY:foo\r\nDTSTART:20080504T123456\r\n" +, +        "DTEND:20080505T234555\r\nEND:VEVENT", ParsedResultType.CALENDAR);, +    // Date only (all day event), +    doTestResult("BEGIN:VEVENT\r\nSUMMARY:foo\r\nDTSTART:20080504\r\n" +, +        "DTEND:20080505\r\nEND:VEVENT", ParsedResultType.CALENDAR);, +    // Start time only, +    doTestResult("BEGIN:VEVENT\r\nSUMMARY:foo\r\nDTSTART:20080504T123456Z\r\nEND:VEVENT",, +        ParsedResultType.CALENDAR);, +    doTestResult("BEGIN:VEVENT\r\nSUMMARY:foo\r\nDTSTART:20080504T123456\r\nEND:VEVENT",, +        ParsedResultType.CALENDAR);, +    doTestResult("BEGIN:VEVENT\r\nSUMMARY:foo\r\nDTSTART:20080504\r\nEND:VEVENT",, +        ParsedResultType.CALENDAR);, +++ b/core/test/src/com/google/zxing/oned/EAN13BlackBox1TestCase.java, +    addTest(25, 31, 180.0f);]