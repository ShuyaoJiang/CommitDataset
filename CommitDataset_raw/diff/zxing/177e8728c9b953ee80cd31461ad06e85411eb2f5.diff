[+++ b/androidtest/src/com/google/zxing/client/androidtest/RGBLuminanceSource.java, +++ b/androidtest/src/com/google/zxing/client/androidtest/RGBLuminanceSource.java, +++ b/core/src/com/google/zxing/LuminanceSource.java, +  public String toString() {, +    byte[] row = new byte[width];, +    StringBuffer result = new StringBuffer(height * (width + 1));, +    for (int y = 0; y < height; y++) {, +      row = getRow(y, row);, +      for (int x = 0; x < width; x++) {, +        int luminance = row[x] & 0xFF;, +        char c;, +        if (luminance < 0x40) {, +          c = '#';, +        } else if (luminance < 0x80) {, +          c = '+';, +        } else if (luminance < 0xC0) {, +          c = '.';, +        } else {, +          c = ' ';, +        }, +        result.append(c);, +      }, +      result.append('\n');, +    }, +    return result.toString();, +  }, +, +++ b/androidtest/src/com/google/zxing/client/androidtest/RGBLuminanceSource.java, +++ b/core/src/com/google/zxing/LuminanceSource.java, +  public String toString() {, +    byte[] row = new byte[width];, +    StringBuffer result = new StringBuffer(height * (width + 1));, +    for (int y = 0; y < height; y++) {, +      row = getRow(y, row);, +      for (int x = 0; x < width; x++) {, +        int luminance = row[x] & 0xFF;, +        char c;, +        if (luminance < 0x40) {, +          c = '#';, +        } else if (luminance < 0x80) {, +          c = '+';, +        } else if (luminance < 0xC0) {, +          c = '.';, +        } else {, +          c = ' ';, +        }, +        result.append(c);, +      }, +      result.append('\n');, +    }, +    return result.toString();, +  }, +, +++ b/core/src/com/google/zxing/common/BitArray.java, +   * Sets a range of bits., +   *, +   * @param start start of range, inclusive., +   * @param end end of range, exclusive, +   */, +  public void setRange(int start, int end) {, +    if (end < start) {, +      throw new IllegalArgumentException();, +    }, +    if (end == start) {, +      return;, +    }, +    end--; // will be easier to treat this as the last actually set bit -- inclusive, +    int firstInt = start >> 5;, +    int lastInt = end >> 5;, +    for (int i = firstInt; i <= lastInt; i++) {, +      int firstBit = i > firstInt ? 0 : start & 0x1F;, +      int lastBit = i < lastInt ? 31 : end & 0x1F;, +      int mask;, +      if (firstBit == 0 && lastBit == 31) {, +        mask = -1;, +      } else {, +        mask = 0;, +        for (int j = firstBit; j <= lastBit; j++) {, +          mask |= 1 << j;, +        }, +      }, +      bits[i] |= mask;, +    }, +  }, +, +  /**]