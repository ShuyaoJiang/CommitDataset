[+++ b/core/src/com/google/zxing/EncodeHintType.java, +   * Specifies margin, in pixels, to use when generating the barcode. The meaning can vary, +   * by format; for example it controls margin before and after the barcode horizontally for, +   * most 1D formats. (Type {@link Integer})., +   */, +  MARGIN,, +, +  /**, +++ b/core/src/com/google/zxing/EncodeHintType.java, +   * Specifies margin, in pixels, to use when generating the barcode. The meaning can vary, +   * by format; for example it controls margin before and after the barcode horizontally for, +   * most 1D formats. (Type {@link Integer})., +   */, +  MARGIN,, +, +  /**, +++ b/core/src/com/google/zxing/oned/CodaBarWriter.java, +import java.util.Arrays;, +, +  private static final char[] START_CHARS = {'A', 'B', 'C', 'D'};, +  private static final char[] END_CHARS = {'T', 'N', '*', 'E'};, +   * @see OneDimensionalCodeWriter#encode(String), +  public boolean[] encode(String contents) {, +    if (!CodaBarReader.arrayContains(START_CHARS, Character.toUpperCase(contents.charAt(0)))) {, +          "Codabar should start with one of the following: " + Arrays.toString(START_CHARS));, +    if (!CodaBarReader.arrayContains(END_CHARS, Character.toUpperCase(contents.charAt(contents.length() - 1)))) {, +          "Codabar should end with one of the following: " + Arrays.toString(END_CHARS));, +    boolean[] result = new boolean[resultLength];, +      boolean color = true;, +          color = !color; // Flip the color., +        result[position] = false;, +++ b/core/src/com/google/zxing/EncodeHintType.java, +   * Specifies margin, in pixels, to use when generating the barcode. The meaning can vary, +   * by format; for example it controls margin before and after the barcode horizontally for, +   * most 1D formats. (Type {@link Integer})., +   */, +  MARGIN,, +, +  /**, +++ b/core/src/com/google/zxing/oned/CodaBarWriter.java, +import java.util.Arrays;, +, +  private static final char[] START_CHARS = {'A', 'B', 'C', 'D'};, +  private static final char[] END_CHARS = {'T', 'N', '*', 'E'};, +   * @see OneDimensionalCodeWriter#encode(String), +  public boolean[] encode(String contents) {, +    if (!CodaBarReader.arrayContains(START_CHARS, Character.toUpperCase(contents.charAt(0)))) {, +          "Codabar should start with one of the following: " + Arrays.toString(START_CHARS));, +    if (!CodaBarReader.arrayContains(END_CHARS, Character.toUpperCase(contents.charAt(contents.length() - 1)))) {, +          "Codabar should end with one of the following: " + Arrays.toString(END_CHARS));, +    boolean[] result = new boolean[resultLength];, +      boolean color = true;, +          color = !color; // Flip the color., +        result[position] = false;, +++ b/core/src/com/google/zxing/oned/Code128Writer.java, +public final class Code128Writer extends OneDimensionalCodeWriter {, +  public boolean[] encode(String contents) {, +    boolean[] result = new boolean[codeWidth];, +      pos += appendPattern(result, pos, pattern, true);, +++ b/core/src/com/google/zxing/EncodeHintType.java, +   * Specifies margin, in pixels, to use when generating the barcode. The meaning can vary, +   * by format; for example it controls margin before and after the barcode horizontally for, +   * most 1D formats. (Type {@link Integer})., +   */, +  MARGIN,, +, +  /**, +++ b/core/src/com/google/zxing/oned/CodaBarWriter.java, +import java.util.Arrays;, +, +  private static final char[] START_CHARS = {'A', 'B', 'C', 'D'};, +  private static final char[] END_CHARS = {'T', 'N', '*', 'E'};, +   * @see OneDimensionalCodeWriter#encode(String), +  public boolean[] encode(String contents) {, +    if (!CodaBarReader.arrayContains(START_CHARS, Character.toUpperCase(contents.charAt(0)))) {, +          "Codabar should start with one of the following: " + Arrays.toString(START_CHARS));, +    if (!CodaBarReader.arrayContains(END_CHARS, Character.toUpperCase(contents.charAt(contents.length() - 1)))) {, +          "Codabar should end with one of the following: " + Arrays.toString(END_CHARS));, +    boolean[] result = new boolean[resultLength];, +      boolean color = true;, +          color = !color; // Flip the color., +        result[position] = false;, +++ b/core/src/com/google/zxing/oned/Code128Writer.java, +public final class Code128Writer extends OneDimensionalCodeWriter {, +  public boolean[] encode(String contents) {, +    boolean[] result = new boolean[codeWidth];, +      pos += appendPattern(result, pos, pattern, true);, +++ b/core/src/com/google/zxing/oned/Code39Writer.java, +public final class Code39Writer extends OneDimensionalCodeWriter {, +  public boolean[] encode(String contents) {, +    boolean[] result = new boolean[codeWidth];, +    int pos = appendPattern(result, 0, widths, true);, +    pos += appendPattern(result, pos, narrowWhite, false);, +      pos += appendPattern(result, pos, widths, true);, +      pos += appendPattern(result, pos, narrowWhite, false);, +    pos += appendPattern(result, pos, widths, true);, +++ b/core/src/com/google/zxing/EncodeHintType.java, +   * Specifies margin, in pixels, to use when generating the barcode. The meaning can vary, +   * by format; for example it controls margin before and after the barcode horizontally for, +   * most 1D formats. (Type {@link Integer}).]