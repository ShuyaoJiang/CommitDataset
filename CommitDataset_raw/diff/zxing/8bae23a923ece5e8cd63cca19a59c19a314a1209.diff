[+++ b/core/src/main/java/com/google/zxing/ChecksumException.java, +    return isStackTrace ? new ChecksumException() : INSTANCE;, +    return isStackTrace ? new ChecksumException(cause) : INSTANCE;, +++ b/core/src/main/java/com/google/zxing/ChecksumException.java, +    return isStackTrace ? new ChecksumException() : INSTANCE;, +    return isStackTrace ? new ChecksumException(cause) : INSTANCE;, +++ b/core/src/main/java/com/google/zxing/FormatException.java, +    return isStackTrace ? new FormatException() : INSTANCE;, +    return isStackTrace ? new FormatException(cause) : INSTANCE;, +++ b/core/src/main/java/com/google/zxing/ChecksumException.java, +    return isStackTrace ? new ChecksumException() : INSTANCE;, +    return isStackTrace ? new ChecksumException(cause) : INSTANCE;, +++ b/core/src/main/java/com/google/zxing/FormatException.java, +    return isStackTrace ? new FormatException() : INSTANCE;, +    return isStackTrace ? new FormatException(cause) : INSTANCE;, +++ b/core/src/main/java/com/google/zxing/ReaderException.java, +  protected static final boolean isStackTrace =, +++ b/core/src/main/java/com/google/zxing/ChecksumException.java, +    return isStackTrace ? new ChecksumException() : INSTANCE;, +    return isStackTrace ? new ChecksumException(cause) : INSTANCE;, +++ b/core/src/main/java/com/google/zxing/FormatException.java, +    return isStackTrace ? new FormatException() : INSTANCE;, +    return isStackTrace ? new FormatException(cause) : INSTANCE;, +++ b/core/src/main/java/com/google/zxing/ReaderException.java, +  protected static final boolean isStackTrace =, +++ b/core/src/main/java/com/google/zxing/common/BitMatrix.java, +   * @return string representation of entire matrix utilizing given strings and line separator, +++ b/core/src/main/java/com/google/zxing/ChecksumException.java, +    return isStackTrace ? new ChecksumException() : INSTANCE;, +    return isStackTrace ? new ChecksumException(cause) : INSTANCE;, +++ b/core/src/main/java/com/google/zxing/FormatException.java, +    return isStackTrace ? new FormatException() : INSTANCE;, +    return isStackTrace ? new FormatException(cause) : INSTANCE;, +++ b/core/src/main/java/com/google/zxing/ReaderException.java, +  protected static final boolean isStackTrace =, +++ b/core/src/main/java/com/google/zxing/common/BitMatrix.java, +   * @return string representation of entire matrix utilizing given strings and line separator, +++ b/core/src/main/java/com/google/zxing/datamatrix/DataMatrixWriter.java, +      if ((y % symbolInfo.matrixHeight) == 0) {, +        if ((x % symbolInfo.matrixWidth) == 0) {, +        if ((x % symbolInfo.matrixWidth) == symbolInfo.matrixWidth - 1) {, +      if ((y % symbolInfo.matrixHeight) == symbolInfo.matrixHeight - 1) {, +++ b/core/src/main/java/com/google/zxing/ChecksumException.java, +    return isStackTrace ? new ChecksumException() : INSTANCE;, +    return isStackTrace ? new ChecksumException(cause) : INSTANCE;, +++ b/core/src/main/java/com/google/zxing/FormatException.java, +    return isStackTrace ? new FormatException() : INSTANCE;, +    return isStackTrace ? new FormatException(cause) : INSTANCE;, +++ b/core/src/main/java/com/google/zxing/ReaderException.java, +  protected static final boolean isStackTrace =, +++ b/core/src/main/java/com/google/zxing/common/BitMatrix.java, +   * @return string representation of entire matrix utilizing given strings and line separator, +++ b/core/src/main/java/com/google/zxing/datamatrix/DataMatrixWriter.java, +      if ((y % symbolInfo.matrixHeight) == 0) {, +        if ((x % symbolInfo.matrixWidth) == 0) {, +        if ((x % symbolInfo.matrixWidth) == symbolInfo.matrixWidth - 1) {, +      if ((y % symbolInfo.matrixHeight) == symbolInfo.matrixHeight - 1) {, +++ b/core/src/main/java/com/google/zxing/datamatrix/encoder/SymbolInfo.java, +  public final int matrixWidth;, +  public final int matrixHeight;, +++ b/core/src/main/java/com/google/zxing/ChecksumException.java, +    return isStackTrace ? new ChecksumException() : INSTANCE;, +    return isStackTrace ? new ChecksumException(cause) : INSTANCE;, +++ b/core/src/main/java/com/google/zxing/FormatException.java, +    return isStackTrace ? new FormatException() : INSTANCE;, +    return isStackTrace ? new FormatException(cause) : INSTANCE;, +++ b/core/src/main/java/com/google/zxing/ReaderException.java, +  protected static final boolean isStackTrace =, +++ b/core/src/main/java/com/google/zxing/common/BitMatrix.java, +   * @return string representation of entire matrix utilizing given strings and line separator, +++ b/core/src/main/java/com/google/zxing/datamatrix/DataMatrixWriter.java, +      if ((y % symbolInfo.matrixHeight) == 0) {, +        if ((x % symbolInfo.matrixWidth) == 0) {, +        if ((x % symbolInfo.matrixWidth) == symbolInfo.matrixWidth - 1) {, +      if ((y % symbolInfo.matrixHeight) == symbolInfo.matrixHeight - 1) {, +++ b/core/src/main/java/com/google/zxing/datamatrix/encoder/SymbolInfo.java, +  public final int matrixWidth;, +  public final int matrixHeight;, +++ b/core/src/test/java/com/google/zxing/datamatrix/encoder/SymbolInfoTestCase.java, +    assertEquals(8, info.matrixWidth);, +    assertEquals(8, info.matrixHeight);, +    assertEquals(16, info.matrixWidth);, +    assertEquals(6, info.matrixHeight);, +    assertEquals(14, info.matrixWidth);, +    assertEquals(6, info.matrixHeight);, +    assertEquals(14, info.matrixWidth);, +    assertEquals(14, info.matrixHeight);, +++ b/core/src/main/java/com/google/zxing/ChecksumException.java, +    return isStackTrace ? new ChecksumException() : INSTANCE;, +    return isStackTrace ? new ChecksumException(cause) : INSTANCE;, +++ b/core/src/main/java/com/google/zxing/FormatException.java, +    return isStackTrace ? new FormatException() : INSTANCE;, +    return isStackTrace ? new FormatException(cause) : INSTANCE;, +++ b/core/src/main/java/com/google/zxing/ReaderException.java, +  protected static final boolean isStackTrace =, +++ b/core/src/main/java/com/google/zxing/common/BitMatrix.java, +   * @return string representation of entire matrix utilizing given strings and line separator, +++ b/core/src/main/java/com/google/zxing/datamatrix/DataMatrixWriter.java, +      if ((y % symbolInfo.matrixHeight) == 0) {, +        if ((x % symbolInfo.matrixWidth) == 0) {]