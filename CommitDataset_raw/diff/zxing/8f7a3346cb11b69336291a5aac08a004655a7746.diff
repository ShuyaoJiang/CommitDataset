[+++ b/core/src/com/google/zxing/BarcodeFormat.java, +  /** 1D barcode format family. */, +  public static final BarcodeFormat ONED = new BarcodeFormat();, +++ b/core/src/com/google/zxing/BarcodeFormat.java, +  /** 1D barcode format family. */, +  public static final BarcodeFormat ONED = new BarcodeFormat();, +++ b/core/src/com/google/zxing/MultiFormatReader.java, +import com.google.zxing.oned.MultiFormatOneDReader;, +    boolean tryOneD;, +      tryOneD = true;, +      tryOneD = possibleFormats.contains(BarcodeFormat.ONED);, +    if (!(tryOneD || tryQR)) {, +    if (tryOneD) {, +        return new MultiFormatOneDReader().decode(image, hints);, +    throw new ReaderException("No barcode was detected in this image.");, +++ b/core/src/com/google/zxing/BarcodeFormat.java, +  /** 1D barcode format family. */, +  public static final BarcodeFormat ONED = new BarcodeFormat();, +++ b/core/src/com/google/zxing/MultiFormatReader.java, +import com.google.zxing.oned.MultiFormatOneDReader;, +    boolean tryOneD;, +      tryOneD = true;, +      tryOneD = possibleFormats.contains(BarcodeFormat.ONED);, +    if (!(tryOneD || tryQR)) {, +    if (tryOneD) {, +        return new MultiFormatOneDReader().decode(image, hints);, +    throw new ReaderException("No barcode was detected in this image.");, +++ b/core/src/com/google/zxing/common/BlackPointEstimator.java, + * @author dswitkin@google.com (Daniel Switkin), +   * @param biasTowardsWhite values higher than 1.0 suggest that a higher black point is desirable (e.g., +   *  more values are considered black); less than 1.0 suggests that lower is desirable. Must be greater, +   *  than 0.0; 1.0 is a good "default", +  public static int estimate(int[] histogram, float biasTowardsWhite) {, +, +	  if (Float.isNaN(biasTowardsWhite) || biasTowardsWhite <= 0.0f) {, +		  throw new IllegalArgumentException("Illegal biasTowardsWhite: " + biasTowardsWhite);, +	  }, +      int fromFirst = (int) (biasTowardsWhite * (i - firstPeak));, +++ b/core/src/com/google/zxing/BarcodeFormat.java, +  /** 1D barcode format family. */, +  public static final BarcodeFormat ONED = new BarcodeFormat();, +++ b/core/src/com/google/zxing/MultiFormatReader.java, +import com.google.zxing.oned.MultiFormatOneDReader;, +    boolean tryOneD;, +      tryOneD = true;, +      tryOneD = possibleFormats.contains(BarcodeFormat.ONED);, +    if (!(tryOneD || tryQR)) {, +    if (tryOneD) {, +        return new MultiFormatOneDReader().decode(image, hints);, +    throw new ReaderException("No barcode was detected in this image.");, +++ b/core/src/com/google/zxing/common/BlackPointEstimator.java, + * @author dswitkin@google.com (Daniel Switkin), +   * @param biasTowardsWhite values higher than 1.0 suggest that a higher black point is desirable (e.g., +   *  more values are considered black); less than 1.0 suggests that lower is desirable. Must be greater, +   *  than 0.0; 1.0 is a good "default", +  public static int estimate(int[] histogram, float biasTowardsWhite) {, +, +	  if (Float.isNaN(biasTowardsWhite) || biasTowardsWhite <= 0.0f) {, +		  throw new IllegalArgumentException("Illegal biasTowardsWhite: " + biasTowardsWhite);, +	  }, +      int fromFirst = (int) (biasTowardsWhite * (i - firstPeak));, +++ b/core/src/com/google/zxing/common/GenericResultPoint.java, +/*, + * Copyright 2008 Google Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.zxing.common;, +, +import com.google.zxing.ResultPoint;, +, +/**, + * <p>Simple implementation of {@link ResultPoint} for applications that don't need, + * to use anything more complex.</p>, + * , + * @author dswitkin@google.com (Daniel Switkin), + */, +public final class GenericResultPoint implements ResultPoint {, +, +  private final float posX;, +  private final float posY;, +, +  public GenericResultPoint(float posX, float posY) {, +    this.posX = posX;, +    this.posY = posY;, +  }, +, +  public float getX() {, +    return posX;]