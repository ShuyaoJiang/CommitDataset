[+++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +    DISPLAYABLE_METADATA_TYPES = new HashSet<ResultMetadataType>(5);, +    DISPLAYABLE_METADATA_TYPES.add(ResultMetadataType.POSSIBLE_COUNTRY);, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +    DISPLAYABLE_METADATA_TYPES = new HashSet<ResultMetadataType>(5);, +    DISPLAYABLE_METADATA_TYPES.add(ResultMetadataType.POSSIBLE_COUNTRY);, +++ b/core/src/com/google/zxing/ResultMetadataType.java, +  /**, +   * For some products, the possible country of manufacture as a {@link String} denoting the, +   * ISO country code. Some map to multiple possible countries, like "US/CA"., +   */, +  public static final ResultMetadataType POSSIBLE_COUNTRY = new ResultMetadataType("POSSIBLE_COUNTRY");, +, +++ b/android/src/com/google/zxing/client/android/CaptureActivity.java, +    DISPLAYABLE_METADATA_TYPES = new HashSet<ResultMetadataType>(5);, +    DISPLAYABLE_METADATA_TYPES.add(ResultMetadataType.POSSIBLE_COUNTRY);, +++ b/core/src/com/google/zxing/ResultMetadataType.java, +  /**, +   * For some products, the possible country of manufacture as a {@link String} denoting the, +   * ISO country code. Some map to multiple possible countries, like "US/CA"., +   */, +  public static final ResultMetadataType POSSIBLE_COUNTRY = new ResultMetadataType("POSSIBLE_COUNTRY");, +, +++ b/core/src/com/google/zxing/oned/EANManufacturerOrgSupport.java, +/*, + * Copyright (C) 2010 ZXing authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.zxing.oned;, +, +import java.util.Vector;, +, +/**, + * Records EAN prefix to GS1 Member Organization, where the member organization, + * correlates strongly with a country. This is an imperfect means of identifying, + * a country of origin by EAN-13 barcode value. See, + * <a href="http://en.wikipedia.org/wiki/List_of_GS1_country_codes">, + * http://en.wikipedia.org/wiki/List_of_GS1_country_codes</a>., + *, + * @author Sean Owen, + */, +final class EANManufacturerOrgSupport {, +, +  private final Vector ranges = new Vector();, +  private final Vector countryIdentifiers = new Vector();, +, +  String lookupCountryIdentifier(String productCode) {, +    initIfNeeded();, +    int prefix = Integer.parseInt(productCode.substring(0, 3));, +    int max = ranges.size();, +    for (int i = 0; i < max; i++) {, +      int[] range = (int[]) ranges.elementAt(i);, +      int start = range[0];, +      if (prefix < start) {, +        return null;, +      }, +      int end = range.length == 1 ? start : range[1];, +      if (prefix <= end) {, +        return (String) countryIdentifiers.elementAt(i);, +      }, +    }, +    return null;, +  }, +  , +  private void add(int[] range, String id) {, +    ranges.addElement(range);, +    countryIdentifiers.addElement(id);, +  }, +  , +  private synchronized void initIfNeeded() {, +    if (!ranges.isEmpty()) {, +      return;, +    }, +    add(new int[] {0,19},    "US/CA");, +    add(new int[] {30,39},   "US");, +    add(new int[] {60,139},  "US/CA");, +    add(new int[] {300,379}, "FR");, +    add(new int[] {380},     "BG");, +    add(new int[] {383},     "SI");, +    add(new int[] {385},     "HR");, +    add(new int[] {387},     "BA");, +    add(new int[] {400,440}, "DE");, +    add(new int[] {450,459}, "JP");, +    add(new int[] {460,469}, "RU");, +    add(new int[] {471},     "TW");, +    add(new int[] {474},     "EE");, +    add(new int[] {475},     "LV");, +    add(new int[] {476},     "AZ");]