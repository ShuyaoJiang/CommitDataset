[+++ b/core/src/com/google/zxing/common/BitMatrix.java, +  public BitArray getRow(int y, BitArray row) {, +      row.setBulk(x << 5, bits[offset + x]);, +++ b/core/src/com/google/zxing/common/BitMatrix.java, +  public BitArray getRow(int y, BitArray row) {, +      row.setBulk(x << 5, bits[offset + x]);, +++ b/core/src/com/google/zxing/common/DefaultGridSampler.java, +  public BitMatrix sampleGrid(BitMatrix image,, +      // sufficient to check the endpoints, +          if (image.get((int) points[j], (int) points[j + 1])) {, +++ b/core/src/com/google/zxing/common/BitMatrix.java, +  public BitArray getRow(int y, BitArray row) {, +      row.setBulk(x << 5, bits[offset + x]);, +++ b/core/src/com/google/zxing/common/DefaultGridSampler.java, +  public BitMatrix sampleGrid(BitMatrix image,, +      // sufficient to check the endpoints, +          if (image.get((int) points[j], (int) points[j + 1])) {, +++ b/core/src/com/google/zxing/common/GridSampler.java, +  public abstract BitMatrix sampleGrid(BitMatrix image,, +  protected static void checkAndNudgePoints(BitMatrix image, float[] points), +++ b/core/src/com/google/zxing/common/BitMatrix.java, +  public BitArray getRow(int y, BitArray row) {, +      row.setBulk(x << 5, bits[offset + x]);, +++ b/core/src/com/google/zxing/common/DefaultGridSampler.java, +  public BitMatrix sampleGrid(BitMatrix image,, +      // sufficient to check the endpoints, +          if (image.get((int) points[j], (int) points[j + 1])) {, +++ b/core/src/com/google/zxing/common/GridSampler.java, +  public abstract BitMatrix sampleGrid(BitMatrix image,, +  protected static void checkAndNudgePoints(BitMatrix image, float[] points), +++ b/core/src/com/google/zxing/common/detector/MonochromeRectangleDetector.java, +import com.google.zxing.common.BitMatrix;, +  private final BitMatrix image;, +  public MonochromeRectangleDetector(BitMatrix image) {, +      boolean horizontal) {, +      if (horizontal ? image.get(start, fixedDimension) : image.get(fixedDimension, start)) {, +        } while (start >= minDim && !(horizontal ? image.get(start, fixedDimension) : image.get(fixedDimension, start)));, +      if (horizontal ? image.get(end, fixedDimension) : image.get(fixedDimension, end)) {, +        } while (end < maxDim && !(horizontal ? image.get(end, fixedDimension) : image.get(fixedDimension, end)));, +++ b/core/src/com/google/zxing/common/BitMatrix.java, +  public BitArray getRow(int y, BitArray row) {, +      row.setBulk(x << 5, bits[offset + x]);, +++ b/core/src/com/google/zxing/common/DefaultGridSampler.java, +  public BitMatrix sampleGrid(BitMatrix image,, +      // sufficient to check the endpoints, +          if (image.get((int) points[j], (int) points[j + 1])) {, +++ b/core/src/com/google/zxing/common/GridSampler.java, +  public abstract BitMatrix sampleGrid(BitMatrix image,, +  protected static void checkAndNudgePoints(BitMatrix image, float[] points), +++ b/core/src/com/google/zxing/common/detector/MonochromeRectangleDetector.java, +import com.google.zxing.common.BitMatrix;, +  private final BitMatrix image;, +  public MonochromeRectangleDetector(BitMatrix image) {, +      boolean horizontal) {, +      if (horizontal ? image.get(start, fixedDimension) : image.get(fixedDimension, start)) {, +        } while (start >= minDim && !(horizontal ? image.get(start, fixedDimension) : image.get(fixedDimension, start)));, +      if (horizontal ? image.get(end, fixedDimension) : image.get(fixedDimension, end)) {, +        } while (end < maxDim && !(horizontal ? image.get(end, fixedDimension) : image.get(fixedDimension, end)));, +++ b/core/src/com/google/zxing/datamatrix/DataMatrixReader.java, +      BitMatrix bits = extractPureBits(image.getBlackMatrix());, +      DetectorResult detectorResult = new Detector(image.getBlackMatrix()).detect();, +  private static BitMatrix extractPureBits(BitMatrix image) throws ReaderException {, +    while (borderWidth < minDimension && !image.get(borderWidth, borderWidth)) {, +    while (moduleEnd < width && image.get(moduleEnd, borderWidth)) {, +    while (columnEndOfSymbol >= 0 && !image.get(borderWidth, columnEndOfSymbol)) {, +        if (image.get(borderWidth + j * moduleSize, iOffset)) {, +++ b/core/src/com/google/zxing/common/BitMatrix.java, +  public BitArray getRow(int y, BitArray row) {, +      row.setBulk(x << 5, bits[offset + x]);, +++ b/core/src/com/google/zxing/common/DefaultGridSampler.java, +  public BitMatrix sampleGrid(BitMatrix image,, +      // sufficient to check the endpoints, +          if (image.get((int) points[j], (int) points[j + 1])) {, +++ b/core/src/com/google/zxing/common/GridSampler.java, +  public abstract BitMatrix sampleGrid(BitMatrix image,, +  protected static void checkAndNudgePoints(BitMatrix image, float[] points), +++ b/core/src/com/google/zxing/common/detector/MonochromeRectangleDetector.java, +import com.google.zxing.common.BitMatrix;, +  private final BitMatrix image;, +  public MonochromeRectangleDetector(BitMatrix image) {, +      boolean horizontal) {, +      if (horizontal ? image.get(start, fixedDimension) : image.get(fixedDimension, start)) {, +        } while (start >= minDim && !(horizontal ? image.get(start, fixedDimension) : image.get(fixedDimension, start)));, +      if (horizontal ? image.get(end, fixedDimension) : image.get(fixedDimension, end)) {, +        } while (end < maxDim && !(horizontal ? image.get(end, fixedDimension) : image.get(fixedDimension, end)));, +++ b/core/src/com/google/zxing/datamatrix/DataMatrixReader.java, +      BitMatrix bits = extractPureBits(image.getBlackMatrix());, +      DetectorResult detectorResult = new Detector(image.getBlackMatrix()).detect();, +  private static BitMatrix extractPureBits(BitMatrix image) throws ReaderException {, +    while (borderWidth < minDimension && !image.get(borderWidth, borderWidth)) {, +    while (moduleEnd < width && image.get(moduleEnd, borderWidth)) {, +    while (columnEndOfSymbol >= 0 && !image.get(borderWidth, columnEndOfSymbol)) {, +        if (image.get(borderWidth + j * moduleSize, iOffset)) {, +++ b/core/src/com/google/zxing/datamatrix/detector/Detector.java, +  private final BitMatrix image;, +  public Detector(BitMatrix image) {, +  private static BitMatrix sampleGrid(BitMatrix image,, +    boolean inBlack = image.get(steep ? fromY : fromX, steep ? fromX : fromY);, +      boolean isBlack = image.get(steep ? y : x, steep ? x : y);, +++ b/core/src/com/google/zxing/common/BitMatrix.java]