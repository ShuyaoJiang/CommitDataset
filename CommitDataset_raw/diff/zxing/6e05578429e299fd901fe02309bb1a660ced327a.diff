[+++ b/AUTHORS, +Erik Barbara, +++ b/AUTHORS, +Erik Barbara, +++ b/core/src/com/google/zxing/MultiFormatWriter.java, +import com.google.zxing.oned.Code128Writer;, +import com.google.zxing.oned.Code39Writer;, +import com.google.zxing.oned.ITFWriter;, +    Writer writer;, +      writer = new EAN8Writer();, +      writer = new EAN13Writer();, +      writer = new QRCodeWriter();, +    } else if (format == BarcodeFormat.CODE_39) {, +      writer = new Code39Writer();, +    } else if (format == BarcodeFormat.CODE_128) {, +      writer = new Code128Writer();, +    } else if (format == BarcodeFormat.ITF) {, +      writer = new ITFWriter();, +    } else {, +    return writer.encode(contents, format, width, height, hints);, +++ b/AUTHORS, +Erik Barbara, +++ b/core/src/com/google/zxing/MultiFormatWriter.java, +import com.google.zxing.oned.Code128Writer;, +import com.google.zxing.oned.Code39Writer;, +import com.google.zxing.oned.ITFWriter;, +    Writer writer;, +      writer = new EAN8Writer();, +      writer = new EAN13Writer();, +      writer = new QRCodeWriter();, +    } else if (format == BarcodeFormat.CODE_39) {, +      writer = new Code39Writer();, +    } else if (format == BarcodeFormat.CODE_128) {, +      writer = new Code128Writer();, +    } else if (format == BarcodeFormat.ITF) {, +      writer = new ITFWriter();, +    } else {, +    return writer.encode(contents, format, width, height, hints);, +++ b/core/src/com/google/zxing/oned/Code128Reader.java, +  static final int[][] CODE_PATTERNS = {, +++ b/AUTHORS, +Erik Barbara, +++ b/core/src/com/google/zxing/MultiFormatWriter.java, +import com.google.zxing.oned.Code128Writer;, +import com.google.zxing.oned.Code39Writer;, +import com.google.zxing.oned.ITFWriter;, +    Writer writer;, +      writer = new EAN8Writer();, +      writer = new EAN13Writer();, +      writer = new QRCodeWriter();, +    } else if (format == BarcodeFormat.CODE_39) {, +      writer = new Code39Writer();, +    } else if (format == BarcodeFormat.CODE_128) {, +      writer = new Code128Writer();, +    } else if (format == BarcodeFormat.ITF) {, +      writer = new ITFWriter();, +    } else {, +    return writer.encode(contents, format, width, height, hints);, +++ b/core/src/com/google/zxing/oned/Code128Reader.java, +  static final int[][] CODE_PATTERNS = {, +++ b/core/src/com/google/zxing/oned/Code128Writer.java, +/*, + * Copyright 2010 ZXing authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.zxing.oned;, +, +import java.util.Hashtable;, +import com.google.zxing.BarcodeFormat;, +import com.google.zxing.WriterException;, +import com.google.zxing.common.BitMatrix;, +, +/**, + * This object renders a CODE128 code as a {@link BitMatrix}., + * , + * @author erik.barbara@gmail.com (Erik Barbara), + */, +public final class Code128Writer extends UPCEANWriter {, +, +	  public BitMatrix encode(String contents,, +                            BarcodeFormat format,, +                            int width,, +                            int height,, +                            Hashtable hints) throws WriterException {, +	    if (format != BarcodeFormat.CODE_128) {, +	      throw new IllegalArgumentException("Can only encode CODE_128, but got " + format);, +	    }, +	    return super.encode(contents, format, width, height, hints);]