[+++ b/core/src/com/google/zxing/qrcode/decoder/BitMatrixParser.java, +   * @param bitMatrix {@link BitMatrix} to parse, +   * @throws ReaderException if dimension is not >= 21 and 1 mod 4, +  /**, +   * <p>Reads format information from one of its two locations within the QR Code.</p>, +   *, +   * @return {@link FormatInformation} encapsulating the QR Code's format info, +   * @throws ReaderException if both format information locations cannot be parsed as, +   *  the valid encoding of format information, +   */, +  /**, +   * <p>Reads version information from one of its two locations within the QR Code.</p>, +   *, +   * @return {@link Version} encapsulating the QR Code's version, +   * @throws ReaderException if both version information locations cannot be parsed as, +   *  the valid encoding of version information, +   */, +  /**, +   * <p>Reads the bits in the {@link BitMatrix} representing the finder pattern in the, +   * correct order in order to reconstitute the codewords bytes contained within the, +   * QR Code.</p>, +   *, +   * @return bytes encoded within the QR Code, +   * @throws ReaderException if the exact number of bytes expected is not read, +   */, +    // Get the data mask for the format used in this QR Code. This will exclude, +    // some bits from reading as we wind through the bit matrix., +    // Read columns in pairs, from right to left, +      // Read alternatingly from bottom to top then top to bottom, +          // Ignore bits covered by the function pattern, +            // Read a bit, +            // If we've made a whole byte, save it off, +++ b/core/src/com/google/zxing/qrcode/decoder/BitMatrixParser.java, +   * @param bitMatrix {@link BitMatrix} to parse, +   * @throws ReaderException if dimension is not >= 21 and 1 mod 4, +  /**, +   * <p>Reads format information from one of its two locations within the QR Code.</p>, +   *, +   * @return {@link FormatInformation} encapsulating the QR Code's format info, +   * @throws ReaderException if both format information locations cannot be parsed as, +   *  the valid encoding of format information, +   */, +  /**, +   * <p>Reads version information from one of its two locations within the QR Code.</p>, +   *, +   * @return {@link Version} encapsulating the QR Code's version, +   * @throws ReaderException if both version information locations cannot be parsed as, +   *  the valid encoding of version information, +   */, +  /**, +   * <p>Reads the bits in the {@link BitMatrix} representing the finder pattern in the, +   * correct order in order to reconstitute the codewords bytes contained within the, +   * QR Code.</p>, +   *, +   * @return bytes encoded within the QR Code, +   * @throws ReaderException if the exact number of bytes expected is not read, +   */, +    // Get the data mask for the format used in this QR Code. This will exclude, +    // some bits from reading as we wind through the bit matrix., +    // Read columns in pairs, from right to left, +      // Read alternatingly from bottom to top then top to bottom, +          // Ignore bits covered by the function pattern, +            // Read a bit, +            // If we've made a whole byte, save it off, +++ b/core/src/com/google/zxing/qrcode/decoder/BitSource.java, + * <p>This provides an easy abstraction to read bits at a time from a sequence of bytes, where the, + * number of bits read is not often a multiple of 8.</p>, + *, + * <p>This class is not thread-safe.</p>, +  /**, +   * @param bytes bytes from which this will read bits. Bits will be read from the first byte first., +   *  Bits are read within a byte from most-significant to least-significant bit., +   */, +   * @param numBits number of bits to read, +   * @return int representing the bits read. The bits will appear as the least-significant, +   *  bits of the int, +  /**, +   * @return number of bits that can be read successfully, +   */, +++ b/core/src/com/google/zxing/qrcode/decoder/BitMatrixParser.java, +   * @param bitMatrix {@link BitMatrix} to parse, +   * @throws ReaderException if dimension is not >= 21 and 1 mod 4, +  /**, +   * <p>Reads format information from one of its two locations within the QR Code.</p>, +   *, +   * @return {@link FormatInformation} encapsulating the QR Code's format info, +   * @throws ReaderException if both format information locations cannot be parsed as, +   *  the valid encoding of format information, +   */, +  /**, +   * <p>Reads version information from one of its two locations within the QR Code.</p>, +   *, +   * @return {@link Version} encapsulating the QR Code's version, +   * @throws ReaderException if both version information locations cannot be parsed as, +   *  the valid encoding of version information, +   */, +  /**, +   * <p>Reads the bits in the {@link BitMatrix} representing the finder pattern in the, +   * correct order in order to reconstitute the codewords bytes contained within the, +   * QR Code.</p>]