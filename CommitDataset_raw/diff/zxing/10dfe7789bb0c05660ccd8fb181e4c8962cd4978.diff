[+++ b/core/src/com/google/zxing/common/LocalBlockBinarizer.java, + * NOTE: This class is still experimental and may not be ready for prime time yet., + *, +  // TODO: Consider a different strategy for 1D Readers., +  // TODO: If getBlackRow() calculates its own values, removing sharpening here., +        int pixel = ((center << 2) - left - right) >> 1;, +        // Must clamp values to 0..255 so they will fit in a byte., +        if (pixel > 255) {, +          pixel = 255;, +        } else if (pixel < 0) {, +          pixel = 0;, +        }, +        luminances[offset + x] = (byte)pixel;, +++ b/core/src/com/google/zxing/common/LocalBlockBinarizer.java, + * NOTE: This class is still experimental and may not be ready for prime time yet., + *, +  // TODO: Consider a different strategy for 1D Readers., +  // TODO: If getBlackRow() calculates its own values, removing sharpening here., +        int pixel = ((center << 2) - left - right) >> 1;, +        // Must clamp values to 0..255 so they will fit in a byte., +        if (pixel > 255) {, +          pixel = 255;, +        } else if (pixel < 0) {, +          pixel = 0;, +        }, +        luminances[offset + x] = (byte)pixel;, +++ b/core/src/com/google/zxing/pdf417/detector/Detector.java, +, +    // FIXME: Temporary fix calling getBlackMatrix() inline here. It should be called once, +    // and the result matrix passed down into sampleGrid() and throughout the reader., +    return sampler.sampleGrid(image.getBlackMatrix(), dimension, 0.0f, // p1ToX, +++ b/core/src/com/google/zxing/common/LocalBlockBinarizer.java, + * NOTE: This class is still experimental and may not be ready for prime time yet., + *, +  // TODO: Consider a different strategy for 1D Readers., +  // TODO: If getBlackRow() calculates its own values, removing sharpening here., +        int pixel = ((center << 2) - left - right) >> 1;, +        // Must clamp values to 0..255 so they will fit in a byte., +        if (pixel > 255) {, +          pixel = 255;, +        } else if (pixel < 0) {, +          pixel = 0;, +        }, +        luminances[offset + x] = (byte)pixel;, +++ b/core/src/com/google/zxing/pdf417/detector/Detector.java, +, +    // FIXME: Temporary fix calling getBlackMatrix() inline here. It should be called once, +    // and the result matrix passed down into sampleGrid() and throughout the reader., +    return sampler.sampleGrid(image.getBlackMatrix(), dimension, 0.0f, // p1ToX, +++ b/core/test/src/com/google/zxing/AllPositiveBlackBoxTester.java, +import com.google.zxing.pdf417.PDF417BlackBox1TestCase;, +    new PDF417BlackBox1TestCase(),, +      results.add(TESTS[x].testBlackBoxCountingResults(false));, +++ b/core/src/com/google/zxing/common/LocalBlockBinarizer.java, + * NOTE: This class is still experimental and may not be ready for prime time yet., + *, +  // TODO: Consider a different strategy for 1D Readers., +  // TODO: If getBlackRow() calculates its own values, removing sharpening here., +        int pixel = ((center << 2) - left - right) >> 1;, +        // Must clamp values to 0..255 so they will fit in a byte., +        if (pixel > 255) {, +          pixel = 255;, +        } else if (pixel < 0) {, +          pixel = 0;, +        }, +        luminances[offset + x] = (byte)pixel;, +++ b/core/src/com/google/zxing/pdf417/detector/Detector.java, +, +    // FIXME: Temporary fix calling getBlackMatrix() inline here. It should be called once, +    // and the result matrix passed down into sampleGrid() and throughout the reader., +    return sampler.sampleGrid(image.getBlackMatrix(), dimension, 0.0f, // p1ToX, +++ b/core/test/src/com/google/zxing/AllPositiveBlackBoxTester.java, +import com.google.zxing.pdf417.PDF417BlackBox1TestCase;, +    new PDF417BlackBox1TestCase(),, +      results.add(TESTS[x].testBlackBoxCountingResults(false));, +++ b/core/test/src/com/google/zxing/common/AbstractBlackBoxTestCase.java, +    testBlackBoxCountingResults(true);, +  public SummaryResults testBlackBoxCountingResults(boolean assertOnFailure) throws IOException {, +    if (assertOnFailure) {, +    }]