[+++ b/cpp/.svnignore, +testout, +build, +report.html, +.sconsign.dblite, +, +++ b/cpp/.svnignore, +testout, +build, +report.html, +.sconsign.dblite, +, +++ b/cpp/README, +An simple example application is now also included, but no compilation instructions yet., +, +To profile the code (very useful to optimize the code):, + - Install valgrind, + - "valgrind --tool=callgrind build/zxing - path/to/test/data/*.jpg > report.html", + - kcachegrind is a very nice tool to analize the output, +++ b/cpp/.svnignore, +testout, +build, +report.html, +.sconsign.dblite, +, +++ b/cpp/README, +An simple example application is now also included, but no compilation instructions yet., +, +To profile the code (very useful to optimize the code):, + - Install valgrind, + - "valgrind --tool=callgrind build/zxing - path/to/test/data/*.jpg > report.html", + - kcachegrind is a very nice tool to analize the output, +++ b/cpp/SConscript, +app_files = ['magick/src/MagickBitmapSource.cpp', 'magick/src/main.cpp'], +++ b/cpp/.svnignore, +testout, +build, +report.html, +.sconsign.dblite, +, +++ b/cpp/README, +An simple example application is now also included, but no compilation instructions yet., +, +To profile the code (very useful to optimize the code):, + - Install valgrind, + - "valgrind --tool=callgrind build/zxing - path/to/test/data/*.jpg > report.html", + - kcachegrind is a very nice tool to analize the output, +++ b/cpp/SConscript, +app_files = ['magick/src/MagickBitmapSource.cpp', 'magick/src/main.cpp'], +++ b/cpp/core/src/zxing/common/EdgeDetector.cpp, +/*, + *  EdgeDetector.cpp, + *  zxing, + *, + *  Created by Ralf Kistner on 7/12/2009., + *  Copyright 2008 ZXing authors All rights reserved., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +#include <zxing/common/EdgeDetector.h>, +#include <algorithm>, +, +using namespace std;, +, +namespace zxing {, +namespace EdgeDetector {, +, +void findEdgePoints(std::vector<Point>& points, const BitMatrix& image, Point start, Point end, bool invert, int skip, float deviation) {, +  float xdist = end.x - start.x;, +  float ydist = end.y - start.y;, +  float length = sqrt(xdist * xdist + ydist * ydist);, +, +, +  int var;, +, +  if (abs(xdist) > abs(ydist)) {, +    // Horizontal, +    if (xdist < 0), +      skip = -skip;, +, +    var = int(abs(deviation * length / xdist));, +, +    float dy = ydist / xdist * skip;, +    bool left = (skip < 0) ^ invert;, +    int x = int(start.x);, +, +    int steps = int(xdist / skip);, +    for (int i = 0; i < steps; i++) {, +      x += skip;]