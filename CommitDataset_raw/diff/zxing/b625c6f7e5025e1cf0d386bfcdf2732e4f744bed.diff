[+++ b/core/src/com/google/zxing/qrcode/encoder/Matrix.java, +  public final void clear(byte value) {, +    for (int y = 0; y < height; ++y) {, +      for (int x = 0; x < width; ++x) {, +        bytes[y][x] = value;, +      }, +    }, +  }, +, +  public final String toString() {, +    StringBuffer result = new StringBuffer();, +    for (int y = 0; y < height; ++y) {, +      for (int x = 0; x < width; ++x) {, +        switch (bytes[y][x]) {, +          case 0:, +            result.append(" 0");, +            break;, +          case 1:, +            result.append(" 1");, +            break;, +          default:, +            result.append("  ");, +            break;, +        }, +      }, +      result.append("\n");, +    }, +    return result.toString();, +  }, +, +++ b/core/src/com/google/zxing/qrcode/encoder/Matrix.java, +  public final void clear(byte value) {, +    for (int y = 0; y < height; ++y) {, +      for (int x = 0; x < width; ++x) {, +        bytes[y][x] = value;, +      }, +    }, +  }, +, +  public final String toString() {, +    StringBuffer result = new StringBuffer();, +    for (int y = 0; y < height; ++y) {, +      for (int x = 0; x < width; ++x) {, +        switch (bytes[y][x]) {, +          case 0:, +            result.append(" 0");, +            break;, +          case 1:, +            result.append(" 1");, +            break;, +          default:, +            result.append("  ");, +            break;, +        }, +      }, +      result.append("\n");, +    }, +    return result.toString();, +  }, +, +++ b/core/src/com/google/zxing/qrcode/encoder/MatrixUtil.java, +  private static final int kVersionInfoPoly = 0x1f25;  // 1 1111 0010 0101, +  private static final int kTypeInfoPoly = 0x537;, +  private static final int kTypeInfoMaskPattern = 0x5412;, +  //, +  // JAVAPORT: We shouldn't need to do this at all. The code should be rewritten to begin encoding, +  // with the Matrix initialized all to zero., +    matrix.clear((byte) -1);, +  public static boolean BuildMatrix(final BitVector data_bits, int ec_level, int version,, +      int mask_pattern, Matrix matrix) {, +    BitVector type_info_bits = new BitVector();, +    if (!MakeTypeInfoBits(ec_level, mask_pattern, type_info_bits)) {, +    BitVector version_info_bits = new BitVector();, +    if (!MakeVersionInfoBits(version, version_info_bits)) {, +        final int bit = version_info_bits.at(bit_index);, +        bit_index--;, +  public static boolean EmbedDataBits(final BitVector data_bits, int mask_pattern, Matrix matrix) {, +  public static int FindMSBSet(int value) {, +  public static int CalculateBCHCode(int value, int poly) {, +  public static boolean MakeTypeInfoBits(int ec_level, final int mask_pattern, BitVector bits) {, +    final int type_info = (ec_code << 3) | mask_pattern;, +    final int bch_code = MatrixUtil.CalculateBCHCode(type_info, kTypeInfoPoly);, +    BitVector mask_bits = new BitVector();, +  public static boolean MakeVersionInfoBits(int version, BitVector bits) {, +    final int bch_code = MatrixUtil.CalculateBCHCode(version, kVersionInfoPoly);, +, +    Debug.DCHECK_EQ(8, kHorizontalSeparationPattern[0].length);, +    Debug.DCHECK_EQ(1, kHorizontalSeparationPattern.length);, +    Debug.DCHECK_EQ(1, kVerticalSeparationPattern[0].length);, +    Debug.DCHECK_EQ(7, kVerticalSeparationPattern.length);, +    Debug.DCHECK_EQ(5, kPositionAdjustmentPattern[0].length);, +    Debug.DCHECK_EQ(5, kPositionAdjustmentPattern.length);, +    Debug.DCHECK_EQ(7, kPositionDetectionPattern[0].length);, +    Debug.DCHECK_EQ(7, kPositionDetectionPattern.length);, +    final int pdp_width = kPositionDetectionPattern[0].length;, +    final int hsp_width = kHorizontalSeparationPattern[0].length;, +    final int vsp_size = kVerticalSeparationPattern.length;, +    EmbedVerticalSeparationPattern(vsp_size, 0, matrix);, +    EmbedVerticalSeparationPattern(matrix.height() - vsp_size - 1, 0, matrix);, +    EmbedVerticalSeparationPattern(vsp_size, matrix.height() - vsp_size,]