[+++ b/AUTHORS, +Guenther Grau, +++ b/AUTHORS, +Guenther Grau, +++ b/javase/src/com/google/zxing/client/j2se/CommandLineRunner.java, +  private static final String POSSIBLE_FORMATS_ARG = "--possibleFormats=";, +      } else if (arg.startsWith(POSSIBLE_FORMATS_ARG)) {, +        config.setPossibleFormats(COMMA.split(arg.substring(POSSIBLE_FORMATS_ARG.length())));, +    Collection<BarcodeFormat> possibleFormats = new ArrayList<BarcodeFormat>();, +    String[] possibleFormatsNames = config.getPossibleFormats();, +    if (possibleFormatsNames != null && possibleFormatsNames.length > 0) {, +      for (String format : possibleFormatsNames) {, +        possibleFormats.add(BarcodeFormat.valueOf(format));, +      }, +    } else {, +      possibleFormats.add(BarcodeFormat.UPC_A);, +      possibleFormats.add(BarcodeFormat.UPC_E);, +      possibleFormats.add(BarcodeFormat.EAN_13);, +      possibleFormats.add(BarcodeFormat.EAN_8);, +      possibleFormats.add(BarcodeFormat.RSS_14);, +      possibleFormats.add(BarcodeFormat.RSS_EXPANDED);, +        possibleFormats.add(BarcodeFormat.CODE_39);, +        possibleFormats.add(BarcodeFormat.CODE_93);, +        possibleFormats.add(BarcodeFormat.CODE_128);, +        possibleFormats.add(BarcodeFormat.ITF);, +        possibleFormats.add(BarcodeFormat.QR_CODE);, +        possibleFormats.add(BarcodeFormat.DATA_MATRIX);, +        possibleFormats.add(BarcodeFormat.AZTEC);, +        possibleFormats.add(BarcodeFormat.PDF_417);, +        possibleFormats.add(BarcodeFormat.CODABAR);, +        possibleFormats.add(BarcodeFormat.MAXICODE);, +      }, +    hints.put(DecodeHintType.POSSIBLE_FORMATS, possibleFormats);, +    StringBuilder builder = new StringBuilder(, +        "  " + POSSIBLE_FORMATS_ARG + "barcodeFormat[,barcodeFormat2...] where barcodeFormat is any of: ");, +    for (BarcodeFormat format : BarcodeFormat.values()) {, +      builder.append(format).append(',');, +    }, +    builder.setLength(builder.length() - 1);, +    System.err.println(builder);, +++ b/AUTHORS, +Guenther Grau, +++ b/javase/src/com/google/zxing/client/j2se/CommandLineRunner.java, +  private static final String POSSIBLE_FORMATS_ARG = "--possibleFormats=";, +      } else if (arg.startsWith(POSSIBLE_FORMATS_ARG)) {, +        config.setPossibleFormats(COMMA.split(arg.substring(POSSIBLE_FORMATS_ARG.length())));, +    Collection<BarcodeFormat> possibleFormats = new ArrayList<BarcodeFormat>();, +    String[] possibleFormatsNames = config.getPossibleFormats();, +    if (possibleFormatsNames != null && possibleFormatsNames.length > 0) {, +      for (String format : possibleFormatsNames) {, +        possibleFormats.add(BarcodeFormat.valueOf(format));, +      }, +    } else {, +      possibleFormats.add(BarcodeFormat.UPC_A);, +      possibleFormats.add(BarcodeFormat.UPC_E);, +      possibleFormats.add(BarcodeFormat.EAN_13);, +      possibleFormats.add(BarcodeFormat.EAN_8);, +      possibleFormats.add(BarcodeFormat.RSS_14);, +      possibleFormats.add(BarcodeFormat.RSS_EXPANDED);, +        possibleFormats.add(BarcodeFormat.CODE_39);, +        possibleFormats.add(BarcodeFormat.CODE_93);, +        possibleFormats.add(BarcodeFormat.CODE_128);, +        possibleFormats.add(BarcodeFormat.ITF);, +        possibleFormats.add(BarcodeFormat.QR_CODE);, +        possibleFormats.add(BarcodeFormat.DATA_MATRIX);, +        possibleFormats.add(BarcodeFormat.AZTEC);, +        possibleFormats.add(BarcodeFormat.PDF_417);, +        possibleFormats.add(BarcodeFormat.CODABAR);, +        possibleFormats.add(BarcodeFormat.MAXICODE);, +      }, +    hints.put(DecodeHintType.POSSIBLE_FORMATS, possibleFormats);, +    StringBuilder builder = new StringBuilder(, +        "  " + POSSIBLE_FORMATS_ARG + "barcodeFormat[,barcodeFormat2...] where barcodeFormat is any of: ");, +    for (BarcodeFormat format : BarcodeFormat.values()) {, +      builder.append(format).append(',');, +    }, +    builder.setLength(builder.length() - 1);, +    System.err.println(builder);, +++ b/javase/src/com/google/zxing/client/j2se/Config.java, +  private String[] possibleFormats;, +  String[] getPossibleFormats() {, +    return possibleFormats;, +  }, +, +  void setPossibleFormats(String[] possibleFormats) {, +    this.possibleFormats = possibleFormats;, +  }, +]