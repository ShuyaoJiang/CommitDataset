[+++ b/core/src/com/google/zxing/common/BitMatrix.java, +  public int[] getBottomRightOnBit() {, +    int bitsOffset = bits.length - 1;, +    while (bitsOffset >= 0 && bits[bitsOffset] == 0) {, +      bitsOffset--;, +    }, +    if (bitsOffset < 0) {, +      return null;, +    }, +, +    int y = bitsOffset / rowSize;, +    int x = (bitsOffset % rowSize) << 5;, +, +    int theBits = bits[bitsOffset];, +    int bit = 31;, +    while ((theBits >>> bit) == 0) {, +      bit--;, +    }, +    x += bit;, +, +    return new int[] {x, y};, +  }, +, +++ b/core/src/com/google/zxing/common/BitMatrix.java, +  public int[] getBottomRightOnBit() {, +    int bitsOffset = bits.length - 1;, +    while (bitsOffset >= 0 && bits[bitsOffset] == 0) {, +      bitsOffset--;, +    }, +    if (bitsOffset < 0) {, +      return null;, +    }, +, +    int y = bitsOffset / rowSize;, +    int x = (bitsOffset % rowSize) << 5;, +, +    int theBits = bits[bitsOffset];, +    int bit = 31;, +    while ((theBits >>> bit) == 0) {, +      bit--;, +    }, +    x += bit;, +, +    return new int[] {x, y};, +  }, +, +++ b/core/src/com/google/zxing/datamatrix/DataMatrixReader.java, +   * This method detects a code in a "pure" image -- that is, pure monochrome image, +   * which contains only an unrotated, unskewed, image of a code, with some white border, +   * @see com.google.zxing.pdf417.PDF417Reader#extractPureBits(BitMatrix), +    int[] rightBottomBlack = image.getBottomRightOnBit();, +    if (leftTopBlack == null || rightBottomBlack == null) {, +    int moduleSize = moduleSize(leftTopBlack, image);, +    int top = leftTopBlack[1];, +    int bottom = rightBottomBlack[1];, +    int left = leftTopBlack[0];, +    int right = rightBottomBlack[0];, +, +    int matrixWidth = (right - left + 1) / moduleSize;, +    int matrixHeight = (bottom - top + 1) / moduleSize;, +    if (matrixWidth == 0 || matrixHeight == 0) {, +    int nudge = moduleSize >> 1;, +    top += nudge;, +    left += nudge;, +    BitMatrix bits = new BitMatrix(matrixWidth, matrixHeight);, +    for (int y = 0; y < matrixHeight; y++) {, +      int iOffset = top + y * moduleSize;, +      for (int x = 0; x < matrixWidth; x++) {, +        if (image.get(left + x * moduleSize, iOffset)) {, +          bits.set(x, y);, +  private static int moduleSize(int[] leftTopBlack, BitMatrix image) throws NotFoundException {, +    int width = image.getWidth();, +    int x = leftTopBlack[0];, +    int y = leftTopBlack[1];, +    while (x < width && image.get(x, y)) {, +      x++;, +    }, +    if (x == width) {, +      throw NotFoundException.getNotFoundInstance();, +    }, +, +    int moduleSize = x - leftTopBlack[0];, +    if (moduleSize == 0) {, +      throw NotFoundException.getNotFoundInstance();, +    }, +    return moduleSize;, +  }, +, +++ b/core/src/com/google/zxing/common/BitMatrix.java, +  public int[] getBottomRightOnBit() {, +    int bitsOffset = bits.length - 1;, +    while (bitsOffset >= 0 && bits[bitsOffset] == 0) {, +      bitsOffset--;, +    }, +    if (bitsOffset < 0) {, +      return null;, +    }, +, +    int y = bitsOffset / rowSize;, +    int x = (bitsOffset % rowSize) << 5;]