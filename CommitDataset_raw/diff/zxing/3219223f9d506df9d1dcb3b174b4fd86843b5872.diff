[+++ b/core/src/com/google/zxing/DecodeHintType.java, +  /**, +   * Skip the first n barcodes found. Currently applies only to 1D formats. This, +   * enables a caller to repeatedly decode and find multiple barcodes. Maps, +   * to an {@link Integer}., +   */, +  public static final DecodeHintType SKIP_N_BARCODES = new DecodeHintType();, +, +++ b/core/src/com/google/zxing/DecodeHintType.java, +  /**, +   * Skip the first n barcodes found. Currently applies only to 1D formats. This, +   * enables a caller to repeatedly decode and find multiple barcodes. Maps, +   * to an {@link Integer}., +   */, +  public static final DecodeHintType SKIP_N_BARCODES = new DecodeHintType();, +, +++ b/core/src/com/google/zxing/oned/AbstractOneDReader.java, +    int barcodesToSkip = 0;, +    if (hints != null) {, +      Integer number = (Integer) hints.get(DecodeHintType.SKIP_N_BARCODES);, +      if (number != null) {, +        barcodesToSkip = number.intValue();, +      }, +    }, +, +    int maxLines;, +    if (barcodesToSkip > 0) {, +      maxLines = height; // Look at the whole image; looking for more than one barcode, +    } else {, +      maxLines = tryHarder ? 15 : 7; // If "trying harder", examine more lines, +    }, +        Result result = decodeRow(rowNumber, row, hints);, +        if (barcodesToSkip > 0) { // See if we should skip and keep looking, +          barcodesToSkip--;, +        } else {, +          return result;, +        }, +            Result result = decodeRow(rowNumber, row, hints);, +            if (barcodesToSkip > 0) { // See if we should skip and keep looking, +              barcodesToSkip--;, +            } else {, +              return result;, +            }]