[+++ b/cpp/README, +This is only tested on Linux. With some trouble, it might work on Windows as well., +, +To build the library only:, +- Install scons, +- Run "scons lib" in this folder (cpp)., +, +To build the unit tests:, +- Install cppunit (libcppunit-dev on Ubuntu), +- Run "scons tests", +- Run "testrunner" in the build folder, +, +To build the test utility:, +- Install Magick++ (libmagick++-dev on Ubuntu), +- Run "scons zxing", +, +To clean:, +- Run "scons -c all", +, +To use the test utility:, +- Basic usage:, +  - "mkdir testout", +  - "zxing testout *.jpg > report.html", +- With the zxing test data, from the cpp folder:, +  - "mkdir testout", +  - "build/zxing testout ../core/test/data/blackbox/qrcode-*/* > report.html", +, +To format the code:, + - Install astyle, + - Run ./format, +, +++ b/cpp/README, +This is only tested on Linux. With some trouble, it might work on Windows as well., +, +To build the library only:, +- Install scons, +- Run "scons lib" in this folder (cpp)., +, +To build the unit tests:, +- Install cppunit (libcppunit-dev on Ubuntu), +- Run "scons tests", +- Run "testrunner" in the build folder, +, +To build the test utility:, +- Install Magick++ (libmagick++-dev on Ubuntu), +- Run "scons zxing", +, +To clean:, +- Run "scons -c all", +, +To use the test utility:, +- Basic usage:, +  - "mkdir testout", +  - "zxing testout *.jpg > report.html", +- With the zxing test data, from the cpp folder:, +  - "mkdir testout", +  - "build/zxing testout ../core/test/data/blackbox/qrcode-*/* > report.html", +, +To format the code:, + - Install astyle, + - Run ./format, +, +++ b/cpp/SConscript, +Decider('MD5'), +, +env = Environment(), +, +debug = True, +compile_options = {}, +flags = [], +if debug:, +	#compile_options['CPPDEFINES'] = "-DDEBUG", +	flags.append("-O0 -g3 -Wall"), +compile_options['CXXFLAGS'] = ' '.join(flags), +, +, +def all_files(dir, ext='.cpp', level=5):, +	files = [], +	for i in range(level):, +		files += Glob(dir + ('/*' * i) + ext) , +	return files, +, +, +, +magick_include = ['/usr/include/ImageMagick/'], +magick_libs = ['Magick++', 'MagickWand', 'MagickCore'], +, +cppunit_libs = ['cppunit'], +, +zxing_files = all_files('core/src'), +, +zxing_include = ['core/src'], +zxing_libs = env.Library('zxing', source=zxing_files, CPPPATH=zxing_include, **compile_options), +, +app_files = all_files('magick/src'), +app_executable = env.Program('zxing', app_files, CPPPATH=magick_include + zxing_include, LIBS=magick_libs + zxing_libs, **compile_options), +, +test_files = all_files('core/tests/src'), +test_executable = env.Program('testrunner', test_files, CPPPATH=zxing_include, LIBS=zxing_libs + cppunit_libs, **compile_options), +]