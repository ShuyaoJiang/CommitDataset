[+++ b/android/src/com/google/zxing/client/android/YUVMonochromeBitmapSource.java, + *, + * @author Sean Owen, + * @author Daniel Switkin, +public final class YUVMonochromeBitmapSource extends BaseMonochromeBitmapSource {, +  private final int mCropTop;, +  private final int mCropLeft;, +  private final int mCropBottom;, +  private final int mCropRight;, +   * Builds an object around a YUV buffer from the camera. The image is not cropped., +   *, +   * @param yuvData    A byte array of planar Y data, followed by interleaved U and V, +   * @param dataWidth  The width of the Y data, +   * @param dataHeight The height of the Y data, +   */, +  public YUVMonochromeBitmapSource(byte[] yuvData, int dataWidth, int dataHeight) {, +    this(yuvData, dataWidth, dataHeight, 0, 0, dataHeight, dataWidth);, +  }, +, +  /**, +   * Builds an object around a YUV buffer from the camera. THe image is cropped and only, +   * that part of the image is evaluated., +  public YUVMonochromeBitmapSource(byte[] yuvData, int dataWidth, int dataHeight, Rect crop) {, +    this(yuvData, dataWidth, dataHeight, crop.top, crop.left, crop.bottom, crop.right);, +  }, +, +  /**, +   * Builds an object around a YUV buffer from the camera. The image is cropped and only , +   * that part of the image is evaluated., +   *, +   * @param yuvData    A byte array of planar Y data, followed by interleaved U and V, +   * @param dataWidth  The width of the Y data, +   * @param dataHeight The height of the Y data, +   * @param cropTop    Top coordinate of rectangle to crop, +   * @param cropLeft   Left coordinate of rectangle to crop, +   * @param cropBottom Bottom coordinate of rectangle to crop, +   * @param cropRight  Right coordinate of rectangle to crop, +   */, +  public YUVMonochromeBitmapSource(byte[] yuvData,, +                                   int dataWidth,, +                                   int dataHeight,, +                                   int cropTop,, +                                   int cropLeft,, +                                   int cropBottom,, +                                   int cropRight) {, +    if (cropRight - cropLeft > dataWidth || cropBottom - cropTop > dataHeight) {, +    this.mCropTop = cropTop;, +    this.mCropLeft = cropLeft;, +    this.mCropBottom = cropBottom;, +    this.mCropRight = cropRight;, +    return mCropBottom - mCropTop;, +    return mCropRight - mCropLeft;, +    return mYUVData[(y + mCropTop) * mDataWidth + x + mCropLeft] & 0xff;, +    int offset = (y + mCropTop) * mDataWidth + mCropLeft;, +    byte[] yuvData = mYUVData;, +      row[x] = yuvData[offset + x] & 0xff;, +    int dataWidth = mDataWidth;, +    int offset = mCropTop * dataWidth + mCropLeft + x;, +    byte[] yuvData = mYUVData;, +      column[y] = yuvData[offset] & 0xff;, +      offset += dataWidth;, +    int width = getWidth();, +    int height = getHeight();, +    byte[] yuvData = mYUVData;, +    for (int y = 0, base = mCropTop * mDataWidth + mCropLeft; y < height; y++, base += mDataWidth) {, +        int grey = yuvData[base + x] & 0xff;]