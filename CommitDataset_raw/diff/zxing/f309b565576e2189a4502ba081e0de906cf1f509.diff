[+++ b/AUTHORS, +Betaminos, +++ b/AUTHORS, +Betaminos, +++ b/android/src/com/google/zxing/client/android/LocaleManager.java, +++ b/AUTHORS, +Betaminos, +++ b/android/src/com/google/zxing/client/android/LocaleManager.java, +++ b/core/src/com/google/zxing/RGBLuminanceSource.java, + * an ARGB pixel array. It does not support rotation., + * @author Betaminos, +  private final int dataWidth;, +  private final int dataHeight;, +  private final int left;, +  private final int top;, +, +    dataWidth = width;, +    dataHeight = height;, +    left = 0;, +    top = 0;, +, +  private RGBLuminanceSource(byte[] pixels,, +                             int dataWidth,, +                             int dataHeight,, +                             int left,, +                             int top,, +                             int width,, +                             int height) {, +    super(width, height);, +    if (left + width > dataWidth || top + height > dataHeight) {, +      throw new IllegalArgumentException("Crop rectangle does not fit within image data.");, +    }, +    this.luminances = pixels;, +    this.dataWidth = dataWidth;, +    this.dataHeight = dataHeight;, +    this.left = left;, +    this.top = top;, +  }, +, +    int offset = (y + top) * dataWidth + left;, +    System.arraycopy(luminances, offset, row, 0, width);, +    int width = getWidth();, +    int height = getHeight();, +, +    // If the caller asks for the entire underlying image, save the copy and give them the, +    // original data. The docs specifically warn that result.length must be ignored., +    if (width == dataWidth && height == dataHeight) {, +    int area = width * height;, +    byte[] matrix = new byte[area];, +    int inputOffset = top * dataWidth + left;, +, +    // If the width matches the full width of the underlying data, perform a single copy., +    if (width == dataWidth) {, +      System.arraycopy(luminances, inputOffset, matrix, 0, area);, +      return matrix;, +    }, +, +    // Otherwise copy one cropped row at a time., +    byte[] rgb = luminances;, +    for (int y = 0; y < height; y++) {, +      int outputOffset = y * width;, +      System.arraycopy(rgb, inputOffset, matrix, outputOffset, width);, +      inputOffset += dataWidth;, +    }, +    return matrix;, +  }, +  , +  @Override, +  public boolean isCropSupported() {, +    return true;, +  }, +, +  @Override, +  public LuminanceSource crop(int left, int top, int width, int height) {, +    return new RGBLuminanceSource(luminances,, +                                  dataWidth,, +                                  dataHeight,, +                                  this.left + left,, +                                  this.top + top,, +                                  width,, +                                  height);, +  }, +, +++ b/AUTHORS, +Betaminos, +++ b/android/src/com/google/zxing/client/android/LocaleManager.java, +++ b/core/src/com/google/zxing/RGBLuminanceSource.java, + * an ARGB pixel array. It does not support rotation., + * @author Betaminos, +  private final int dataWidth;, +  private final int dataHeight;, +  private final int left;, +  private final int top;, +, +    dataWidth = width;, +    dataHeight = height;, +    left = 0;, +    top = 0;, +, +  private RGBLuminanceSource(byte[] pixels,]