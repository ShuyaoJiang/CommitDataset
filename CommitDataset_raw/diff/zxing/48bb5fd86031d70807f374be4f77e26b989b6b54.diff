[+++ b/core/src/main/java/com/google/zxing/oned/EAN13Writer.java, +    checkNumeric(contents);, +++ b/core/src/main/java/com/google/zxing/oned/EAN13Writer.java, +    checkNumeric(contents);, +++ b/core/src/main/java/com/google/zxing/oned/EAN8Writer.java, +    checkNumeric(contents);, +, +++ b/core/src/main/java/com/google/zxing/oned/EAN13Writer.java, +    checkNumeric(contents);, +++ b/core/src/main/java/com/google/zxing/oned/EAN8Writer.java, +    checkNumeric(contents);, +, +++ b/core/src/main/java/com/google/zxing/oned/ITFWriter.java, +, +    checkNumeric(contents);, +, +++ b/core/src/main/java/com/google/zxing/oned/EAN13Writer.java, +    checkNumeric(contents);, +++ b/core/src/main/java/com/google/zxing/oned/EAN8Writer.java, +    checkNumeric(contents);, +, +++ b/core/src/main/java/com/google/zxing/oned/ITFWriter.java, +, +    checkNumeric(contents);, +, +++ b/core/src/main/java/com/google/zxing/oned/OneDimensionalCodeWriter.java, +import java.util.regex.Pattern;, +  private static final Pattern NUMERIC = Pattern.compile("[0-9]+");, +  /**, +   * Throw IllegalArgumentException if input contains characters other than digits 0-9., +   */, +  protected static final void checkNumeric(String contents) throws IllegalArgumentException {, +    if (!NUMERIC.matcher(contents).matches()) {, +      throw new IllegalArgumentException("Input should only contain digits 0-9");, +    }, +  }, +++ b/core/src/main/java/com/google/zxing/oned/EAN13Writer.java, +    checkNumeric(contents);, +++ b/core/src/main/java/com/google/zxing/oned/EAN8Writer.java, +    checkNumeric(contents);, +, +++ b/core/src/main/java/com/google/zxing/oned/ITFWriter.java, +, +    checkNumeric(contents);, +, +++ b/core/src/main/java/com/google/zxing/oned/OneDimensionalCodeWriter.java, +import java.util.regex.Pattern;, +  private static final Pattern NUMERIC = Pattern.compile("[0-9]+");, +  /**, +   * Throw IllegalArgumentException if input contains characters other than digits 0-9., +   */, +  protected static final void checkNumeric(String contents) throws IllegalArgumentException {, +    if (!NUMERIC.matcher(contents).matches()) {, +      throw new IllegalArgumentException("Input should only contain digits 0-9");, +    }, +  }, +++ b/core/src/main/java/com/google/zxing/oned/UPCEWriter.java, +    checkNumeric(contents);, +, +++ b/core/src/main/java/com/google/zxing/oned/EAN13Writer.java, +    checkNumeric(contents);, +++ b/core/src/main/java/com/google/zxing/oned/EAN8Writer.java, +    checkNumeric(contents);, +, +++ b/core/src/main/java/com/google/zxing/oned/ITFWriter.java, +, +    checkNumeric(contents);, +, +++ b/core/src/main/java/com/google/zxing/oned/OneDimensionalCodeWriter.java, +import java.util.regex.Pattern;, +  private static final Pattern NUMERIC = Pattern.compile("[0-9]+");, +  /**, +   * Throw IllegalArgumentException if input contains characters other than digits 0-9., +   */, +  protected static final void checkNumeric(String contents) throws IllegalArgumentException {, +    if (!NUMERIC.matcher(contents).matches()) {, +      throw new IllegalArgumentException("Input should only contain digits 0-9");, +    }, +  }, +++ b/core/src/main/java/com/google/zxing/oned/UPCEWriter.java, +    checkNumeric(contents);, +, +++ b/core/src/test/java/com/google/zxing/oned/EAN13WriterTestCase.java, +  @Test(expected = IllegalArgumentException.class), +  public void testEncodeIllegalCharacters() throws WriterException {, +    new EAN13Writer().encode("5901234123abc", BarcodeFormat.EAN_13, 0, 0);, +  }, +++ b/core/src/main/java/com/google/zxing/oned/EAN13Writer.java, +    checkNumeric(contents);, +++ b/core/src/main/java/com/google/zxing/oned/EAN8Writer.java, +    checkNumeric(contents);, +, +++ b/core/src/main/java/com/google/zxing/oned/ITFWriter.java, +, +    checkNumeric(contents);, +, +++ b/core/src/main/java/com/google/zxing/oned/OneDimensionalCodeWriter.java, +import java.util.regex.Pattern;, +  private static final Pattern NUMERIC = Pattern.compile("[0-9]+");, +  /**]