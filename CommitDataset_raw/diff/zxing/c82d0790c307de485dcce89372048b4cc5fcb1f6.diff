[+++ b/core/src/com/google/zxing/qrcode/detector/AlignmentPatternFinder.java, +    float maxVariance = moduleSize / 2.0f;, +  private float crossCheckVertical(int startI, int centerJ, int maxCount, int originalStateCountTotal) {, +    int stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];, +    if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= originalStateCountTotal) {, +      return Float.NaN;, +    }, +, +    int stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];, +    float centerI = crossCheckVertical(i, (int) centerJ, 2 * stateCount[1], stateCountTotal);, +++ b/core/src/com/google/zxing/qrcode/detector/AlignmentPatternFinder.java, +    float maxVariance = moduleSize / 2.0f;, +  private float crossCheckVertical(int startI, int centerJ, int maxCount, int originalStateCountTotal) {, +    int stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];, +    if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= originalStateCountTotal) {, +      return Float.NaN;, +    }, +, +    int stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];, +    float centerI = crossCheckVertical(i, (int) centerJ, 2 * stateCount[1], stateCountTotal);, +++ b/core/src/com/google/zxing/qrcode/detector/Detector.java, +      // Guess where a "bottom right" finder pattern would have been, +      float bottomRightX = topRight.getX() - topLeft.getX() + bottomLeft.getX();, +      float bottomRightY = topRight.getY() - topLeft.getY() + bottomLeft.getY();, +, +++ b/core/src/com/google/zxing/qrcode/detector/AlignmentPatternFinder.java, +    float maxVariance = moduleSize / 2.0f;, +  private float crossCheckVertical(int startI, int centerJ, int maxCount, int originalStateCountTotal) {, +    int stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];, +    if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= originalStateCountTotal) {, +      return Float.NaN;, +    }, +, +    int stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];, +    float centerI = crossCheckVertical(i, (int) centerJ, 2 * stateCount[1], stateCountTotal);, +++ b/core/src/com/google/zxing/qrcode/detector/Detector.java, +      // Guess where a "bottom right" finder pattern would have been, +      float bottomRightX = topRight.getX() - topLeft.getX() + bottomLeft.getX();, +      float bottomRightY = topRight.getY() - topLeft.getY() + bottomLeft.getY();, +, +++ b/core/src/com/google/zxing/qrcode/detector/FinderPatternFinder.java, +    float maxVariance = moduleSize / 2.0f;, +    // Allow less than 50% variance from 1-1-3-1-1 proportions, +  private float crossCheckVertical(int startI, int centerJ, int maxCount, int originalStateCountTotal) {, +    // If we found a finder-pattern-like section, but its size is more than 20% different than, +    // the original, assume it's a false positive, +    int stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];, +    if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= originalStateCountTotal) {, +      return Float.NaN;, +    }, +, +   * <p>Like {@link #crossCheckVertical(int, int, int, int)}, and in fact is basically identical,, +  private float crossCheckHorizontal(int startJ, int centerI, int maxCount, int originalStateCountTotal) {, +    // If we found a finder-pattern-like section, but its size is significantly different than, +    // the original, assume it's a false positive, +    int stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];, +    if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= originalStateCountTotal) {, +      return Float.NaN;, +    }, +, +    int stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];, +    float centerI = crossCheckVertical(i, (int) centerJ, stateCount[2], stateCountTotal);, +      centerJ = crossCheckHorizontal((int) centerJ, (int) centerI, stateCount[2], stateCountTotal);, +        float estimatedModuleSize = (float) stateCountTotal / 7.0f;]