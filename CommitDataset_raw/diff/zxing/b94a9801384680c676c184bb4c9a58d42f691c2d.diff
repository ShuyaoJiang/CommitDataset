[+++ b/.gitignore, +++ b/.gitignore, +++ b/android/src/com/google/zxing/client/android/PreferencesFragment.java, +      // Before validating, remove custom placeholders, which will not, +      // be considered valid parts of the URL in some locations:, +      // Blank %d and %s:, +      valueString = valueString.replaceAll("%[sd]", "");, +      // Blank %f but not if followed by digit or a-f as it may be a hex sequence, +      valueString = valueString.replaceAll("%f(?![0-9a-f])", "");, +++ b/.gitignore, +++ b/android/src/com/google/zxing/client/android/PreferencesFragment.java, +      // Before validating, remove custom placeholders, which will not, +      // be considered valid parts of the URL in some locations:, +      // Blank %d and %s:, +      valueString = valueString.replaceAll("%[sd]", "");, +      // Blank %f but not if followed by digit or a-f as it may be a hex sequence, +      valueString = valueString.replaceAll("%f(?![0-9a-f])", "");, +++ b/android/src/com/google/zxing/client/android/result/ResultHandler.java, +    String url = text;, +      // Replace %f but only if it doesn't seem to be a hex escape sequence. This remains, +      // problematic but avoids the more surprising problem of breaking escapes, +      url = url.replace("%f(?![0-9a-f])", rawResult.getBarcodeFormat().toString());, +    // Replace %s last as it might contain itself %f or %t, +    url = customProductSearch.replace("%s", url);, +++ b/.gitignore, +++ b/android/src/com/google/zxing/client/android/PreferencesFragment.java, +      // Before validating, remove custom placeholders, which will not, +      // be considered valid parts of the URL in some locations:, +      // Blank %d and %s:, +      valueString = valueString.replaceAll("%[sd]", "");, +      // Blank %f but not if followed by digit or a-f as it may be a hex sequence, +      valueString = valueString.replaceAll("%f(?![0-9a-f])", "");, +++ b/android/src/com/google/zxing/client/android/result/ResultHandler.java, +    String url = text;, +      // Replace %f but only if it doesn't seem to be a hex escape sequence. This remains, +      // problematic but avoids the more surprising problem of breaking escapes, +      url = url.replace("%f(?![0-9a-f])", rawResult.getBarcodeFormat().toString());, +    // Replace %s last as it might contain itself %f or %t, +    url = customProductSearch.replace("%s", url);, +++ /dev/null, +++ b/.gitignore, +++ b/android/src/com/google/zxing/client/android/PreferencesFragment.java, +      // Before validating, remove custom placeholders, which will not, +      // be considered valid parts of the URL in some locations:, +      // Blank %d and %s:, +      valueString = valueString.replaceAll("%[sd]", "");, +      // Blank %f but not if followed by digit or a-f as it may be a hex sequence, +      valueString = valueString.replaceAll("%f(?![0-9a-f])", "");, +++ b/android/src/com/google/zxing/client/android/result/ResultHandler.java, +    String url = text;, +      // Replace %f but only if it doesn't seem to be a hex escape sequence. This remains, +      // problematic but avoids the more surprising problem of breaking escapes, +      url = url.replace("%f(?![0-9a-f])", rawResult.getBarcodeFormat().toString());, +    // Replace %s last as it might contain itself %f or %t, +    url = customProductSearch.replace("%s", url);, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/android/src/com/google/zxing/client/android/PreferencesFragment.java, +      // Before validating, remove custom placeholders, which will not, +      // be considered valid parts of the URL in some locations:, +      // Blank %d and %s:, +      valueString = valueString.replaceAll("%[sd]", "");, +      // Blank %f but not if followed by digit or a-f as it may be a hex sequence, +      valueString = valueString.replaceAll("%f(?![0-9a-f])", "");, +++ b/android/src/com/google/zxing/client/android/result/ResultHandler.java, +    String url = text;, +      // Replace %f but only if it doesn't seem to be a hex escape sequence. This remains, +      // problematic but avoids the more surprising problem of breaking escapes, +      url = url.replace("%f(?![0-9a-f])", rawResult.getBarcodeFormat().toString());, +    // Replace %s last as it might contain itself %f or %t, +    url = customProductSearch.replace("%s", url);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/android/src/com/google/zxing/client/android/PreferencesFragment.java, +      // Before validating, remove custom placeholders, which will not, +      // be considered valid parts of the URL in some locations:, +      // Blank %d and %s:, +      valueString = valueString.replaceAll("%[sd]", "");, +      // Blank %f but not if followed by digit or a-f as it may be a hex sequence, +      valueString = valueString.replaceAll("%f(?![0-9a-f])", "");, +++ b/android/src/com/google/zxing/client/android/result/ResultHandler.java, +    String url = text;, +      // Replace %f but only if it doesn't seem to be a hex escape sequence. This remains, +      // problematic but avoids the more surprising problem of breaking escapes, +      url = url.replace("%f(?![0-9a-f])", rawResult.getBarcodeFormat().toString());, +    // Replace %s last as it might contain itself %f or %t, +    url = customProductSearch.replace("%s", url);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +++ b/android/src/com/google/zxing/client/android/PreferencesFragment.java, +      // Before validating, remove custom placeholders, which will not, +      // be considered valid parts of the URL in some locations:, +      // Blank %d and %s:, +      valueString = valueString.replaceAll("%[sd]", "");]