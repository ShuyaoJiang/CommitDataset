[+++ b/core/src/com/google/zxing/qrcode/detector/DefaultGridSampler.java, +    PerspectiveTransform transform = PerspectiveTransform.quadrilateralToQuadrilateral(, +      transform.transformPoints(points);, +++ b/core/src/com/google/zxing/qrcode/detector/DefaultGridSampler.java, +    PerspectiveTransform transform = PerspectiveTransform.quadrilateralToQuadrilateral(, +      transform.transformPoints(points);, +++ b/core/src/com/google/zxing/qrcode/detector/GridSampler.java, +  private static final String DEFAULT_IMPL_CLASS = "com.google.zxing.qrcode.detector.DefaultGridSampler";, +  /**, +   * <p>Sets the (fully-qualified) name of the implementation of {@link GridSampler} which will be, +   * returned from {@link #getInstance()}.</p>, +   *, +   * @param className {@link GridSampler} implementation to instantiate, +   */, +  /**, +   * @return the current implementation of {@link GridSampler}, instantiating one if one does, +   *  not already exist. The class which is instantied may be set by, +   *  {@link #setGridSamplerClassName(String)}, +   */, +      // We don't need to synchronize this -- don't really care if two threads initialize at once., +      // The second one will win., +        // The exceptions below would represent bad programming errors;, +        // For J2ME we're punting them out with RuntimeException, +  /**, +   * <p>Given an image, locations of a QR Code's finder patterns and bottom-right alignment pattern,, +   * and the presumed dimension in modules of the QR Code, implemntations of this method extract, +   * the QR Code from the image by sampling the points in the image which should correspond to the, +   * modules of the QR Code.</p>, +   *, +   * @param image image to sample, +   * @param topLeft top-left finder pattern location, +   * @param topRight top-right finder pattern location, +   * @param bottomLeft bottom-left finder pattern location, +   * @param alignmentPattern bottom-right alignment pattern location, +   * @param dimension dimension of QR Code, +   * @return {@link BitMatrix} representing QR Code's modules, +   * @throws ReaderException if QR Code cannot be reasonably sampled -- for example if the location, +   *  of the finder patterns imply a transformation that would require sampling off the image, +   */, +  /**, +   * <p>Checks a set of points that have been transformed to sample points on an image against, +   * the image's dimensions to see if the endpoints are even within the image., +   * This method actually only checks the endpoints since the points are assumed to lie, +   * on a line.</p>, +   *, +   * @param image image into which the points should map, +   * @param points actual points in x1,y1,...,xn,yn form, +   * @throws ReaderException if an endpoint is lies outside the image boundaries, +   */, +  protected static void checkEndpoint(MonochromeBitmapSource image, float[] points) throws ReaderException {, +++ b/core/src/com/google/zxing/qrcode/detector/DefaultGridSampler.java, +    PerspectiveTransform transform = PerspectiveTransform.quadrilateralToQuadrilateral(, +      transform.transformPoints(points);, +++ b/core/src/com/google/zxing/qrcode/detector/GridSampler.java, +  private static final String DEFAULT_IMPL_CLASS = "com.google.zxing.qrcode.detector.DefaultGridSampler";, +  /**, +   * <p>Sets the (fully-qualified) name of the implementation of {@link GridSampler} which will be, +   * returned from {@link #getInstance()}.</p>, +   *, +   * @param className {@link GridSampler} implementation to instantiate, +   */, +  /**, +   * @return the current implementation of {@link GridSampler}, instantiating one if one does, +   *  not already exist. The class which is instantied may be set by, +   *  {@link #setGridSamplerClassName(String)}, +   */, +      // We don't need to synchronize this -- don't really care if two threads initialize at once., +      // The second one will win., +        // The exceptions below would represent bad programming errors;, +        // For J2ME we're punting them out with RuntimeException, +  /**, +   * <p>Given an image, locations of a QR Code's finder patterns and bottom-right alignment pattern,, +   * and the presumed dimension in modules of the QR Code, implemntations of this method extract, +   * the QR Code from the image by sampling the points in the image which should correspond to the, +   * modules of the QR Code.</p>, +   *, +   * @param image image to sample, +   * @param topLeft top-left finder pattern location, +   * @param topRight top-right finder pattern location, +   * @param bottomLeft bottom-left finder pattern location, +   * @param alignmentPattern bottom-right alignment pattern location, +   * @param dimension dimension of QR Code, +   * @return {@link BitMatrix} representing QR Code's modules, +   * @throws ReaderException if QR Code cannot be reasonably sampled -- for example if the location, +   *  of the finder patterns imply a transformation that would require sampling off the image, +   */, +  /**, +   * <p>Checks a set of points that have been transformed to sample points on an image against, +   * the image's dimensions to see if the endpoints are even within the image., +   * This method actually only checks the endpoints since the points are assumed to lie, +   * on a line.</p>, +   *, +   * @param image image into which the points should map, +   * @param points actual points in x1,y1,...,xn,yn form, +   * @throws ReaderException if an endpoint is lies outside the image boundaries, +   */, +  protected static void checkEndpoint(MonochromeBitmapSource image, float[] points) throws ReaderException {, +++ /dev/null, +++ b/core/src/com/google/zxing/qrcode/detector/DefaultGridSampler.java, +    PerspectiveTransform transform = PerspectiveTransform.quadrilateralToQuadrilateral(]