[+++ b/core/src/main/java/com/google/zxing/oned/Code128Writer.java, +  private static final int CODE_START_A = 103;, +  private static final int CODE_CODE_A = 101;, +  private static final int CODE_FNC_4_A = 101; // Code A, +          if (c > 127) {, +            // support for FNC4 isn't implemented, no full Latin-1 character set available at the moment, +            if (codeSet == CODE_CODE_A) {, +              patternIndex = CODE_FNC_4_A;, +            } else {, +              patternIndex = CODE_FNC_4_B;, +            }, +            switch (codeSet) {, +              case CODE_CODE_A:, +                if (patternIndex < 0) {, +                  // everything below a space character comes behind the underscore in the code patterns table, +                  patternIndex += '`';, +                }, +                break;, +              case CODE_CODE_B:, +                patternIndex = contents.charAt(position) - ' ';, +                break;, +              default:, +                // CODE_CODE_C, +                break;, +          switch (newCodeSet) {, +            case CODE_CODE_A:, +              patternIndex = CODE_START_A;, +              break;, +            case CODE_CODE_B:, +              break;, +            default:, +              break;, +    if (lookahead == CType.ONE_DIGIT) {, +       return CODE_CODE_B;, +    }, +    if (lookahead == CType.UNCODABLE) {, +      if (start < value.length()) {, +        char c = value.charAt(start);, +        if (c < ' ' || (oldCode == CODE_CODE_A && c < '`')) {, +          // can continue in code A, encodes ASCII 0 to 95, +          return CODE_CODE_A;, +        }, +      }, +++ b/core/src/main/java/com/google/zxing/oned/Code128Writer.java, +  private static final int CODE_START_A = 103;, +  private static final int CODE_CODE_A = 101;, +  private static final int CODE_FNC_4_A = 101; // Code A, +          if (c > 127) {, +            // support for FNC4 isn't implemented, no full Latin-1 character set available at the moment, +            if (codeSet == CODE_CODE_A) {, +              patternIndex = CODE_FNC_4_A;, +            } else {, +              patternIndex = CODE_FNC_4_B;, +            }, +            switch (codeSet) {, +              case CODE_CODE_A:, +                if (patternIndex < 0) {, +                  // everything below a space character comes behind the underscore in the code patterns table, +                  patternIndex += '`';, +                }, +                break;, +              case CODE_CODE_B:, +                patternIndex = contents.charAt(position) - ' ';, +                break;, +              default:, +                // CODE_CODE_C, +                break;, +          switch (newCodeSet) {, +            case CODE_CODE_A:, +              patternIndex = CODE_START_A;, +              break;, +            case CODE_CODE_B:, +              break;, +            default:, +              break;, +    if (lookahead == CType.ONE_DIGIT) {, +       return CODE_CODE_B;, +    }, +    if (lookahead == CType.UNCODABLE) {, +      if (start < value.length()) {, +        char c = value.charAt(start);, +        if (c < ' ' || (oldCode == CODE_CODE_A && c < '`')) {, +          // can continue in code A, encodes ASCII 0 to 95, +          return CODE_CODE_A;, +        }, +      }, +++ b/core/src/test/java/com/google/zxing/oned/Code128WriterTestCase.java, +  private static final String START_CODE_A = "11010000100";, +  private static final String SWITCH_CODE_A = "11101011110";, +  @Test, +  public void testEncodeSwitchBetweenCodesetsAAndB() throws Exception {, +    // start with A switch to B and back to A, +    //                                                      "\0"            "A"             "B"             Switch to B     "a"             "b"             Switch to A     "\u0010"        check digit, +    testEncode("\0ABab\u0010", QUIET_SPACE + START_CODE_A + "10100001100" + "10100011000" + "10001011000" + SWITCH_CODE_B + "10010110000" + "10010000110" + SWITCH_CODE_A + "10100111100" + "11001110100" + STOP + QUIET_SPACE);, +    // start with B switch to A and back to B, +    //                                                "a"             "b"             Switch to A     "\0             "Switch to B"   "a"             "b"             check digit, +    testEncode("ab\0ab", QUIET_SPACE + START_CODE_B + "10010110000" + "10010000110" + SWITCH_CODE_A + "10100001100" + SWITCH_CODE_B + "10010110000" + "10010000110" + "11010001110" + STOP + QUIET_SPACE);, +  }, +  , +  private void testEncode(String toEncode, String expected) throws Exception {]