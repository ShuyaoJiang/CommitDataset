[+++ b/core/src/com/google/zxing/oned/MultiFormatUPCEANReader.java, +      } else if (possibleFormats.contains(BarcodeFormat.UPC_A)) {, +      // UPC-A is covered by EAN-13, +      // Individually these are correct and their readers will both read such a code, +      // and correctly call it EAN-13, or UPC-A, respectively., +      // In this case, if we've been looking for both types, we'd like to call it, +      // a UPC-A code. But for efficiency we only run the EAN-13 decoder to also read, +      // UPC-A. So we special case it here, and convert an EAN-13 result to a UPC-A, +      // result if appropriate., +      if (result.getBarcodeFormat().equals(BarcodeFormat.EAN_13) && result.getText().charAt(0) == '0') {, +++ b/core/src/com/google/zxing/oned/MultiFormatUPCEANReader.java, +      } else if (possibleFormats.contains(BarcodeFormat.UPC_A)) {, +      // UPC-A is covered by EAN-13, +      // Individually these are correct and their readers will both read such a code, +      // and correctly call it EAN-13, or UPC-A, respectively., +      // In this case, if we've been looking for both types, we'd like to call it, +      // a UPC-A code. But for efficiency we only run the EAN-13 decoder to also read, +      // UPC-A. So we special case it here, and convert an EAN-13 result to a UPC-A, +      // result if appropriate., +      if (result.getBarcodeFormat().equals(BarcodeFormat.EAN_13) && result.getText().charAt(0) == '0') {, +++ b/core/src/com/google/zxing/oned/UPCAReader.java, +import com.google.zxing.MonochromeBitmapSource;, +import com.google.zxing.ReaderException;, +import com.google.zxing.Result;, +import java.util.Hashtable;, +, +public final class UPCAReader implements UPCEANReader {, +  private final UPCEANReader ean13Reader = new EAN13Reader();, +, +  public Result decodeRow(int rowNumber, BitArray row, int[] startGuardRange) throws ReaderException {, +    return maybeReturnResult(ean13Reader.decodeRow(rowNumber, row, startGuardRange));, +  public Result decodeRow(int rowNumber, BitArray row, Hashtable hints) throws ReaderException {, +    return maybeReturnResult(ean13Reader.decodeRow(rowNumber, row, hints));, +  public Result decode(MonochromeBitmapSource image) throws ReaderException {, +    return maybeReturnResult(ean13Reader.decode(image));, +  }, +, +  public Result decode(MonochromeBitmapSource image, Hashtable hints) throws ReaderException {, +    return maybeReturnResult(ean13Reader.decode(image, hints));, +  }, +, +  private static Result maybeReturnResult(Result result) throws ReaderException {, +    String text = result.getText();, +    if (text.charAt(0) == '0') {, +      return new Result(text.substring(1), null, result.getResultPoints(), BarcodeFormat.UPC_A);, +    } else {, +      throw new ReaderException("Found EAN-13 code but was not a UPC-A code");, +    }]