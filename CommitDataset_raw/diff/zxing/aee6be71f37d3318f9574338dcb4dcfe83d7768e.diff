[+++ b/AUTHORS, +Steven Parkes, +Yakov Okshtein (Google), +++ b/AUTHORS, +Steven Parkes, +Yakov Okshtein (Google), +++ b/core/test/src/com/google/zxing/common/AbstractBlackBoxTestCase.java, +import java.awt.geom.Rectangle2D;, +      double radians = Math.toRadians(degrees);, +, +      // Transform simply to find out the new bounding box (don't actually run the image through it), +      at.rotate(radians, original.getWidth() / 2.0, original.getHeight() / 2.0);, +, +      Rectangle2D r = op.getBounds2D(original);, +      int width = (int) Math.ceil(r.getWidth());, +      int height = (int) Math.ceil(r.getHeight());, +, +      // Real transform, now that we know the size of the new image and how to translate after we rotate, +      // to keep it centered, +      at = new AffineTransform();, +      at.rotate(radians, width / 2.0, height / 2.0);, +      at.translate(((width - original.getWidth()) / 2.0),, +                   ((height - original.getHeight()) / 2.0));, +      op = new AffineTransformOp(at, AffineTransformOp.TYPE_BICUBIC);, +, +++ b/AUTHORS, +Steven Parkes, +Yakov Okshtein (Google), +++ b/core/test/src/com/google/zxing/common/AbstractBlackBoxTestCase.java, +import java.awt.geom.Rectangle2D;, +      double radians = Math.toRadians(degrees);, +, +      // Transform simply to find out the new bounding box (don't actually run the image through it), +      at.rotate(radians, original.getWidth() / 2.0, original.getHeight() / 2.0);, +, +      Rectangle2D r = op.getBounds2D(original);, +      int width = (int) Math.ceil(r.getWidth());, +      int height = (int) Math.ceil(r.getHeight());, +, +      // Real transform, now that we know the size of the new image and how to translate after we rotate, +      // to keep it centered, +      at = new AffineTransform();, +      at.rotate(radians, width / 2.0, height / 2.0);, +      at.translate(((width - original.getWidth()) / 2.0),, +                   ((height - original.getHeight()) / 2.0));, +      op = new AffineTransformOp(at, AffineTransformOp.TYPE_BICUBIC);, +, +++ b/core/test/src/com/google/zxing/negative/FalsePositivesBlackBoxTestCase.java, +    addTest(1, 90.0f);, +    addTest(2, 270.0f);, +++ b/AUTHORS, +Steven Parkes, +Yakov Okshtein (Google), +++ b/core/test/src/com/google/zxing/common/AbstractBlackBoxTestCase.java, +import java.awt.geom.Rectangle2D;, +      double radians = Math.toRadians(degrees);, +, +      // Transform simply to find out the new bounding box (don't actually run the image through it), +      at.rotate(radians, original.getWidth() / 2.0, original.getHeight() / 2.0);, +, +      Rectangle2D r = op.getBounds2D(original);, +      int width = (int) Math.ceil(r.getWidth());, +      int height = (int) Math.ceil(r.getHeight());, +, +      // Real transform, now that we know the size of the new image and how to translate after we rotate, +      // to keep it centered, +      at = new AffineTransform();, +      at.rotate(radians, width / 2.0, height / 2.0);, +      at.translate(((width - original.getWidth()) / 2.0),, +                   ((height - original.getHeight()) / 2.0));, +      op = new AffineTransformOp(at, AffineTransformOp.TYPE_BICUBIC);, +, +++ b/core/test/src/com/google/zxing/negative/FalsePositivesBlackBoxTestCase.java, +    addTest(1, 90.0f);, +    addTest(2, 270.0f);, +++ b/core/test/src/com/google/zxing/negative/PartialBlackBoxTestCase.java, +    addTest(1, 270.0f);, +++ b/AUTHORS, +Steven Parkes, +Yakov Okshtein (Google), +++ b/core/test/src/com/google/zxing/common/AbstractBlackBoxTestCase.java, +import java.awt.geom.Rectangle2D;, +      double radians = Math.toRadians(degrees);, +, +      // Transform simply to find out the new bounding box (don't actually run the image through it), +      at.rotate(radians, original.getWidth() / 2.0, original.getHeight() / 2.0);, +, +      Rectangle2D r = op.getBounds2D(original);, +      int width = (int) Math.ceil(r.getWidth());, +      int height = (int) Math.ceil(r.getHeight());, +, +      // Real transform, now that we know the size of the new image and how to translate after we rotate, +      // to keep it centered, +      at = new AffineTransform();, +      at.rotate(radians, width / 2.0, height / 2.0);, +      at.translate(((width - original.getWidth()) / 2.0),, +                   ((height - original.getHeight()) / 2.0));, +      op = new AffineTransformOp(at, AffineTransformOp.TYPE_BICUBIC);, +, +++ b/core/test/src/com/google/zxing/negative/FalsePositivesBlackBoxTestCase.java]