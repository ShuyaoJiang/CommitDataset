[+++ b/build.xml, +        <exclude name="zxingorg/resources/private/**"/>        , +++ b/build.xml, +        <exclude name="zxingorg/resources/private/**"/>        , +++ b/pom.xml, +    <resources>, +      <resource>, +        <directory>resources</directory>, +      </resource>, +    </resources>, +++ b/build.xml, +        <exclude name="zxingorg/resources/private/**"/>        , +++ b/pom.xml, +    <resources>, +      <resource>, +        <directory>resources</directory>, +      </resource>, +    </resources>, +++ b/zxingorg/pom.xml, +++ b/build.xml, +        <exclude name="zxingorg/resources/private/**"/>        , +++ b/pom.xml, +    <resources>, +      <resource>, +        <directory>resources</directory>, +      </resource>, +    </resources>, +++ b/zxingorg/pom.xml, +++ b/zxingorg/src/com/google/zxing/web/DecodeServlet.java, +import java.io.BufferedReader;, +import java.io.InputStreamReader;, +import java.util.logging.Level;, +  private Collection<String> blockedURLSubstrings;, +  public void init(ServletConfig servletConfig) throws ServletException {, +    , +    blockedURLSubstrings = new ArrayList<String>();, +    InputStream in = DecodeServlet.class.getResourceAsStream("/private/uri-block-substrings.txt");, +    if (in != null) {, +      try {, +        BufferedReader reader = new BufferedReader(new InputStreamReader(in, Charset.forName("UTF-8")));, +        try {, +          String line;, +          while ((line = reader.readLine()) != null) {, +            blockedURLSubstrings.add(line);, +          }, +        } finally {, +          reader.close();, +        }, +      } catch (IOException ioe) {, +        throw new ServletException(ioe);, +      }, +    }, +    log.info("Blocking URIs containing: " + blockedURLSubstrings);, +    for (String substring : blockedURLSubstrings) {, +      if (imageURIString.contains(substring)) {, +        log.info("Disallowed URI " + imageURIString);        , +        response.sendRedirect("badurl.jspx");, +        return;, +      }, +    }, +, +      try {, +    } catch (RuntimeException re) {, +      // Call out unexpected errors in the log clearly, +      log.log(Level.WARNING, "Unexpected exception from library", re);, +      throw new ServletException(re);, +    }, +]