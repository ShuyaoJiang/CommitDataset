[+++ b/javase/src/com/google/zxing/client/j2se/CommandLineRunner.java, +import java.awt.image.BufferedImage;, +import java.io.File;, +import java.io.FileNotFoundException;, +import java.io.FileOutputStream;, +import java.io.IOException;, +import java.io.OutputStream;, +import java.io.OutputStreamWriter;, +import java.io.Writer;, +import java.net.URI;, +import java.net.URISyntaxException;, +import java.nio.charset.Charset;, +import java.util.Hashtable;, +import java.util.Vector;, +, +import javax.imageio.ImageIO;, +, + * This simple command line utility decodes files, directories of files, or URIs which are passed, + * as arguments. By default it uses the normal decoding algorithms, but you can pass --try_harder, + * to request that hint. The raw text of each barcode is printed, and when running against, + * directories, summary statistics are also displayed., +  private static class Config {, +    public boolean tryHarder = false;, +    public boolean pureBarcode = false;, +    public boolean productsOnly = false;, +    public boolean dumpResults = false;, +    public boolean dumpBlackPoint = false;, +    public boolean multi = false;, +    public int[] crop = null;, +  }, +, +  private static Config config = new Config();, +, +        config.tryHarder = true;, +        config.pureBarcode = true;, +        config.productsOnly = true;, +        config.dumpResults = true;, +        config.dumpBlackPoint = true;, +        config.multi = true;, +        config.crop = new int[4];, +        for (int i = 0; i < config.crop.length; i++) {, +          config.crop[i] = Integer.parseInt(tokens[i]);, +    Hashtable<DecodeHintType, Object> hints = buildHints();, +        decodeOneArgument(arg, hints);, +  private static Hashtable<DecodeHintType, Object> buildHints() {, +    if (!config.productsOnly) {, +    if (config.tryHarder) {, +    if (config.pureBarcode) {, +  private static void decodeOneArgument(String argument, Hashtable<DecodeHintType, Object> hints), +      throws IOException, URISyntaxException {, +          if (config.multi) {, +            Result[] results = decodeMulti(input.toURI(), hints);, +              if (config.dumpResults) {, +            Result result = decode(input.toURI(), hints);, +              if (config.dumpResults) {, +        if (config.multi) {, +          Result[] results = decodeMulti(inputFile.toURI(), hints);, +          if (config.dumpResults) {, +          Result result = decode(inputFile.toURI(), hints);, +          if (config.dumpResults) {, +      decode(new URI(argument), hints);, +  private static Result decode(URI uri, Hashtable<DecodeHintType, Object> hints), +      throws IOException {, +      if (config.crop == null) {, +        source = new BufferedImageLuminanceSource(image, config.crop[0], config.crop[1],, +            config.crop[2], config.crop[3]);, +      if (config.dumpBlackPoint) {, +      System.out.println(uri.toString() + " (format: " + result.getBarcodeFormat() + ", type: " +, +          parsedResult.getType() + "):\nRaw result:\n" + result.getText() + "\nParsed result:\n" +, +          parsedResult.getDisplayResult());, +  private static Result[] decodeMulti(URI uri, Hashtable<DecodeHintType, Object> hints), +      throws IOException {, +      if (config.crop == null) {, +        source = new BufferedImageLuminanceSource(image, config.crop[0], config.crop[1],, +            config.crop[2], config.crop[3]);, +      if (config.dumpBlackPoint) {, +        System.out.println("Found " + result.getResultPoints().length + " result points.");, +    writeResultImage(stride, height, pixels, uri, inputName, ".mono.png");, +  }, +, +  private static void writeResultImage(int stride, int height, int[] pixels, URI uri,, +      String inputName, String suffix) {, +    resultName += suffix;]