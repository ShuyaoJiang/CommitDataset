[+++ b/javase/src/com/google/zxing/client/j2se/CommandLineRunner.java, +import java.util.ArrayList;, +    public Hashtable<DecodeHintType, Object> hints = null;, +    public boolean brief = false;, +    public int threads = 1;, +  }, +, +  // Represents the collection of all images files/URLs to decode., +  private static class Inputs {, +    Vector<String> inputs = new Vector<String>(10);, +    int position = 0;, +, +    public synchronized void addInput(String pathOrUrl) {, +      inputs.add(pathOrUrl);, +    }, +, +    public synchronized String getNextInput() {, +      if (position < inputs.size()) {, +        String result = inputs.get(position);, +        position++;, +        return result;, +      } else {, +        return null;, +      }, +    }, +, +    public synchronized int getInputCount() {, +      return inputs.size();, +    }, +  }, +, +  // One of a pool of threads which pulls images off the Inputs queue and decodes them in parallel., +  private static class DecodeThread extends Thread {, +    private int successful = 0;, +, +    @Override, +    public void run() {, +      while (true) {, +        String input = inputs.getNextInput();, +        if (input == null) {, +          break;, +        }, +, +        File inputFile = new File(input);, +        if (inputFile.exists()) {, +          try {, +            if (config.multi) {, +              Result[] results = decodeMulti(inputFile.toURI(), config.hints);, +              if (results != null) {, +                successful++;, +                if (config.dumpResults) {, +                  dumpResultMulti(inputFile, results);, +                }, +              }, +            } else {, +              Result result = decode(inputFile.toURI(), config.hints);, +              if (result != null) {, +                successful++;, +                if (config.dumpResults) {, +                  dumpResult(inputFile, result);, +                }, +              }, +            }, +          } catch (IOException e) {, +          }, +        } else {, +          try {, +            Result result = decode(new URI(input), config.hints);, +            if (result != null) {, +              successful++;, +            }, +          } catch (Exception e) {, +          }, +        }, +      }, +    }, +, +    public int getSuccessful() {, +      return successful;, +    }, +  private static Inputs inputs = new Inputs();, +      } else if ("--brief".equals(arg)) {, +        config.brief = true;, +      } else if (arg.startsWith("--threads") && arg.length() >= 10) {, +        int threads = Integer.parseInt(arg.substring(10));, +        if (threads > 1) {, +          config.threads = threads;, +        }, +    config.hints = buildHints();, +        addArgumentToInputs(arg);, +, +    ArrayList<DecodeThread> threads = new ArrayList<DecodeThread>(config.threads);, +    for (int x = 0; x < config.threads; x++) {, +      DecodeThread thread = new DecodeThread();, +      threads.add(thread);, +      thread.start();, +    }, +, +    int successful = 0;, +    for (int x = 0; x < config.threads; x++) {]