[+++ b/core/src/com/google/zxing/pdf417/detector/Detector.java, + * <p>Encapsulates logic that can detect a PDF417 Code in an image, even if the, + * PDF417 Code is rotated or skewed, or partially obscured.</p>, +   * <p>Detects a PDF417 Code in an image, simply.</p>, +   * @return {@link DetectorResult} encapsulating results of detecting a PDF417 Code, +   * <p>Detects a PDF417 Code in an image. Only checks 0 and 180 degree rotations.</p>, +   * @return {@link DetectorResult} encapsulating results of detecting a PDF417 Code, +    // Try to find the vertices assuming the image is upright., +    if (vertices == null) {, +, +      // Deskew and sample image., +   * @return an array containing the vertices:, +   *           vertices[0] x, y top left barcode, +   *           vertices[1] x, y bottom left barcode, +   *           vertices[2] x, y top right barcode, +   *           vertices[3] x, y bottom right barcode, +   *           vertices[4] x, y top left codeword area, +   *           vertices[5] x, y bottom left codeword area, +   *           vertices[6] x, y top right codeword area, +   *           vertices[7] x, y bottom right codeword area, +   * @return an array containing the vertices:, +   *           vertices[0] x, y top left barcode, +   *           vertices[1] x, y bottom left barcode, +   *           vertices[2] x, y top right barcode, +   *           vertices[3] x, y bottom right barcode, +   *           vertices[4] x, y top left codeword area, +   *           vertices[5] x, y bottom left codeword area, +   *           vertices[6] x, y top right codeword area, +   *           vertices[7] x, y bottom right codeword area, +   * <p>Estimates module size (pixels in a module) based on the Start and End, +   * @param vertices an array of vertices:, +   *           vertices[0] x, y top left barcode, +   *           vertices[1] x, y bottom left barcode, +   *           vertices[2] x, y top right barcode, +   *           vertices[3] x, y bottom right barcode, +   *           vertices[4] x, y top left codeword area, +   *           vertices[5] x, y bottom left codeword area, +   *           vertices[6] x, y top right codeword area, +   *           vertices[7] x, y bottom right codeword area, +    int topRowDimension = round(ResultPoint.distance(topLeft, topRight) / moduleWidth);, +    int bottomRowDimension = round(ResultPoint.distance(bottomLeft, bottomRight) / moduleWidth);, +    // Note that unlike the QR Code sampler, we didn't find the center of modules, but the, +    // TODO: Find a way to cache this array, as this method is called hundreds of times, +    // per image, and we want to allocate as seldom as possible., +  public static int patternMatchVariance(int[] counters, int[] pattern, int maxIndividualVariance) {, +      // is too small to reliably match, so fail:, +    // We're going to fake floating-point math in integers. We just need to use more bits., +    // Scale up patternLength so that intermediate values below like scaledCounter will have, +    // more "significant digits"., +      int variance = counter > scaledPattern ? counter - scaledPattern : scaledPattern - counter;]