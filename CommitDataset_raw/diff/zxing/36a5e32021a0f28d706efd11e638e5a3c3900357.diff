[+++ b/core/src/com/google/zxing/client/result/AbstractDoCoMoResult.java, + * <p>See, + * DoCoMo's documentation</a> about the result types represented by subclasses of this class.</p>, + *, + * <p>Thanks to Jeff Griffin for proposing rewrite of these classes that relies less, + * on exception-based mechanisms during parsing.</p>, +    if (matches == null || matches.isEmpty()) {, +++ b/core/src/com/google/zxing/client/result/AbstractDoCoMoResult.java, + * <p>See, + * DoCoMo's documentation</a> about the result types represented by subclasses of this class.</p>, + *, + * <p>Thanks to Jeff Griffin for proposing rewrite of these classes that relies less, + * on exception-based mechanisms during parsing.</p>, +    if (matches == null || matches.isEmpty()) {, +++ b/core/src/com/google/zxing/client/result/AddressBookDoCoMoResult.java, +  private AddressBookDoCoMoResult(String name, String[] phoneNumbers, String email, String note, String address) {, +    this.name = name;, +    this.phoneNumbers = phoneNumbers;, +    this.email = email;, +    this.note = note;, +    this.address = address;, +, +  public static AddressBookDoCoMoResult parse(String rawText) {, +    if (!rawText.startsWith("MECARD:")) {, +      return null;, +    }, +    String[] rawName = matchPrefixedField("N:", rawText);, +    if (rawName == null) {, +      return null;, +    }, +    String name = parseName(rawName[0]);, +    String[] phoneNumbers = matchPrefixedField("TEL:", rawText);, +    String email = matchSinglePrefixedField("EMAIL:", rawText);, +    String note = matchSinglePrefixedField("NOTE:", rawText);, +    String address = matchSinglePrefixedField("ADR:", rawText);, +    return new AddressBookDoCoMoResult(name, phoneNumbers, email, note, address);, +++ b/core/src/com/google/zxing/client/result/AbstractDoCoMoResult.java, + * <p>See, + * DoCoMo's documentation</a> about the result types represented by subclasses of this class.</p>, + *, + * <p>Thanks to Jeff Griffin for proposing rewrite of these classes that relies less, + * on exception-based mechanisms during parsing.</p>, +    if (matches == null || matches.isEmpty()) {, +++ b/core/src/com/google/zxing/client/result/AddressBookDoCoMoResult.java, +  private AddressBookDoCoMoResult(String name, String[] phoneNumbers, String email, String note, String address) {, +    this.name = name;, +    this.phoneNumbers = phoneNumbers;, +    this.email = email;, +    this.note = note;, +    this.address = address;, +, +  public static AddressBookDoCoMoResult parse(String rawText) {, +    if (!rawText.startsWith("MECARD:")) {, +      return null;, +    }, +    String[] rawName = matchPrefixedField("N:", rawText);, +    if (rawName == null) {, +      return null;, +    }, +    String name = parseName(rawName[0]);, +    String[] phoneNumbers = matchPrefixedField("TEL:", rawText);, +    String email = matchSinglePrefixedField("EMAIL:", rawText);, +    String note = matchSinglePrefixedField("NOTE:", rawText);, +    String address = matchSinglePrefixedField("ADR:", rawText);, +    return new AddressBookDoCoMoResult(name, phoneNumbers, email, note, address);, +++ b/core/src/com/google/zxing/client/result/BookmarkDoCoMoResult.java, +  private BookmarkDoCoMoResult(String title, String uri) {, +    this.title = title;, +    this.uri = uri;, +  }, +, +  public static BookmarkDoCoMoResult parse(String rawText) {, +      return null;, +    String title = matchSinglePrefixedField("TITLE:", rawText);, +    String[] rawUri = matchPrefixedField("URL:", rawText);, +    if (rawUri == null) {, +      return null;, +    String uri = rawUri[0];, +    if (!URIParsedResult.isBasicallyValidURI(uri)) {, +      return null;, +    }, +    return new BookmarkDoCoMoResult(title, uri);, +++ b/core/src/com/google/zxing/client/result/AbstractDoCoMoResult.java, + * <p>See, + * DoCoMo's documentation</a> about the result types represented by subclasses of this class.</p>, + *, + * <p>Thanks to Jeff Griffin for proposing rewrite of these classes that relies less, + * on exception-based mechanisms during parsing.</p>, +    if (matches == null || matches.isEmpty()) {, +++ b/core/src/com/google/zxing/client/result/AddressBookDoCoMoResult.java, +  private AddressBookDoCoMoResult(String name, String[] phoneNumbers, String email, String note, String address) {, +    this.name = name;, +    this.phoneNumbers = phoneNumbers;, +    this.email = email;, +    this.note = note;, +    this.address = address;, +, +  public static AddressBookDoCoMoResult parse(String rawText) {, +    if (!rawText.startsWith("MECARD:")) {, +      return null;]