[+++ b/core/src/com/google/zxing/MultiFormatReader.java, +              //formats.contains(BarcodeFormat.CODABAR) ||, +++ b/core/src/com/google/zxing/MultiFormatReader.java, +              //formats.contains(BarcodeFormat.CODABAR) ||, +++ b/core/src/com/google/zxing/oned/CodaBarReader.java, +import java.util.Hashtable;, +, +   * These represent the encodings of characters, as patterns of wide and narrow bars. The 7 least-significant bits of, +   * each int correspond to the pattern of wide and narrow, with 1s representing "wide" and 0s representing narrow. NOTE, +   * : c is equal to the  * pattern NOTE : d is equal to the e pattern, +  private static final char[] STARTEND_ENCODING = {, +      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '$', ':', '/', '.', '+', 'A', 'B', 'C', 'D', 'T', 'N'};, +  public Result decodeRow(int rowNumber, BitArray row, Hashtable hints) throws NotFoundException {, +    int[] start = findAsteriskPattern(row);, +    while (nextStart < end && !row.get(nextStart)) {, +    do {, +      char decodedChar = toNarrowWidePattern(counters);, +      if (decodedChar == '!') {, +      for (int i = 0; i < counters.length; i++) {, +      while (nextStart < end && !row.get(nextStart)) {, +    for (int k = result.length() - 1; k >= 0; k--) {, +      if (arrayContains(STARTEND_ENCODING, result.charAt(k))) {, +      } else {, +    if (result.length() > 0) {, +      result.deleteCharAt(0);, +    }, +    for (int i = 0; i < counters.length; i++) {, +    if ((nextStart) != end && (whiteSpaceAfterEnd / 2 < lastPatternSize)) {, +    if (resultString.length() == 0) {, +            if (arrayContains(STARTEND_ENCODING, toNarrowWidePattern(counters))) {, +  private static boolean arrayContains(char[] array, char key) {, +    if (array != null) {, +      for (int i = 0; i < array.length; i++) {, +        if (array[i] == key) {, +          return true;, +        }, +    for (int i = 0; i < numCounters; i++) {, +      if (counters[i] < minCounter) {, +        minCounter = counters[i];, +      }, +      if (counters[i] > maxNarrowCounter) {, +        maxNarrowCounter = counters[i];, +      }, +    do {, +      int wideCounters = 0;, +      if ((wideCounters == 2) || (wideCounters == 3)) {, +        for (int i = 0; i < CHARACTER_ENCODINGS.length; i++) {, +          if (CHARACTER_ENCODINGS[i] == pattern) {, +++ b/core/src/com/google/zxing/MultiFormatReader.java, +              //formats.contains(BarcodeFormat.CODABAR) ||, +++ b/core/src/com/google/zxing/oned/CodaBarReader.java, +import java.util.Hashtable;, +, +   * These represent the encodings of characters, as patterns of wide and narrow bars. The 7 least-significant bits of, +   * each int correspond to the pattern of wide and narrow, with 1s representing "wide" and 0s representing narrow. NOTE, +   * : c is equal to the  * pattern NOTE : d is equal to the e pattern, +  private static final char[] STARTEND_ENCODING = {, +      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '$', ':', '/', '.', '+', 'A', 'B', 'C', 'D', 'T', 'N'};, +  public Result decodeRow(int rowNumber, BitArray row, Hashtable hints) throws NotFoundException {, +    int[] start = findAsteriskPattern(row);, +    while (nextStart < end && !row.get(nextStart)) {, +    do {, +      char decodedChar = toNarrowWidePattern(counters);, +      if (decodedChar == '!') {, +      for (int i = 0; i < counters.length; i++) {, +      while (nextStart < end && !row.get(nextStart)) {, +    for (int k = result.length() - 1; k >= 0; k--) {, +      if (arrayContains(STARTEND_ENCODING, result.charAt(k))) {, +      } else {, +    if (result.length() > 0) {, +      result.deleteCharAt(0);, +    }, +    for (int i = 0; i < counters.length; i++) {, +    if ((nextStart) != end && (whiteSpaceAfterEnd / 2 < lastPatternSize)) {, +    if (resultString.length() == 0) {, +            if (arrayContains(STARTEND_ENCODING, toNarrowWidePattern(counters))) {, +  private static boolean arrayContains(char[] array, char key) {, +    if (array != null) {, +      for (int i = 0; i < array.length; i++) {, +        if (array[i] == key) {, +          return true;, +        }, +    for (int i = 0; i < numCounters; i++) {, +      if (counters[i] < minCounter) {, +        minCounter = counters[i];, +      }, +      if (counters[i] > maxNarrowCounter) {, +        maxNarrowCounter = counters[i];, +      }, +    do {, +      int wideCounters = 0;, +      if ((wideCounters == 2) || (wideCounters == 3)) {, +        for (int i = 0; i < CHARACTER_ENCODINGS.length; i++) {, +          if (CHARACTER_ENCODINGS[i] == pattern) {, +++ b/core/src/com/google/zxing/oned/MultiFormatOneDReader.java, +      //readers.addElement(new CodaBarReader());, +++ b/core/src/com/google/zxing/MultiFormatReader.java, +              //formats.contains(BarcodeFormat.CODABAR) ||, +++ b/core/src/com/google/zxing/oned/CodaBarReader.java, +import java.util.Hashtable;]