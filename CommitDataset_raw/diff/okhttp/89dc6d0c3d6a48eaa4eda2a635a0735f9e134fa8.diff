[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.Platform;, +  /** Synthetic response header: the local time when the request was sent. */, +  private static final String SENT_MILLIS = Platform.get().getPrefix() + "-Sent-Millis";, +, +  /** Synthetic response header: the local time when the response was received. */, +  private static final String RECEIVED_MILLIS = Platform.get().getPrefix() + "-Received-Millis";, +, +        .add(SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis())), +        .add(RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis())), +        if (name.equals(SENT_MILLIS)) {, +        if (name.equals(RECEIVED_MILLIS)) {, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.Platform;, +  /** Synthetic response header: the local time when the request was sent. */, +  private static final String SENT_MILLIS = Platform.get().getPrefix() + "-Sent-Millis";, +, +  /** Synthetic response header: the local time when the response was received. */, +  private static final String RECEIVED_MILLIS = Platform.get().getPrefix() + "-Received-Millis";, +, +        .add(SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis())), +        .add(RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis())), +        if (name.equals(SENT_MILLIS)) {, +        if (name.equals(RECEIVED_MILLIS)) {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +import okhttp3.internal.Platform;, +  /** Synthetic response header: the local time when the request was sent. */, +  private static final String SENT_MILLIS = Platform.get().getPrefix() + "-Sent-Millis";, +, +  /** Synthetic response header: the local time when the response was received. */, +  private static final String RECEIVED_MILLIS = Platform.get().getPrefix() + "-Received-Millis";, +, +        .add(SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis())), +        .add(RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis())), +        if (name.equals(SENT_MILLIS)) {, +        if (name.equals(RECEIVED_MILLIS)) {, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +    assertFalse(connection instanceof OkHttpURLConnection);, +    assertFalse(connection2 instanceof OkHttpURLConnection);, +++ b/okhttp-tests/src/test/java/okhttp3/CipherSuiteTest.java, +/*, + * Copyright (C) 2016 Google Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import org.junit.Test;, +, +import static okhttp3.CipherSuite.TLS_KRB5_WITH_DES_CBC_MD5;, +import static okhttp3.CipherSuite.TLS_RSA_EXPORT_WITH_RC4_40_MD5;, +import static okhttp3.CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA256;, +import static okhttp3.CipherSuite.forJavaName;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotEquals;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.fail;, +, +public class CipherSuiteTest {, +  @Test public void nullCipherName() {, +    try {, +      forJavaName(null);, +      fail("Should have thrown");, +    } catch (NullPointerException expected) {, +    }, +  }, +, +  @Test public void hashCode_usesIdentityHashCode_legacyCase() {, +    CipherSuite cs = TLS_RSA_EXPORT_WITH_RC4_40_MD5; // This one's javaName starts with "SSL_"., +    assertEquals(cs.toString(), System.identityHashCode(cs), cs.hashCode());, +  }, +, +  @Test public void hashCode_usesIdentityHashCode_regularCase() {, +    CipherSuite cs = TLS_RSA_WITH_AES_128_CBC_SHA256; // This one's javaName matches the identifier., +    assertEquals(cs.toString(), System.identityHashCode(cs), cs.hashCode());]