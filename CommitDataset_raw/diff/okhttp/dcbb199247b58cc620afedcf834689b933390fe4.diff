[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.net.ProtocolException;, +        } catch (IOException e) {, +          logger.info(MockWebServer.this + " connection from ", +              + raw.getInetAddress() + " failed: " + e);, +          logger.log(Level.SEVERE, MockWebServer.this + " connection from ", +              + raw.getInetAddress() + " crashed", e);, +        if (response.getSocketPolicy() == SocketPolicy.NO_RESPONSE) {, +          // This read should block until the socket is closed. (Because nobody is writing.), +          if (in.read() == -1) return false;, +          throw new ProtocolException("unexpected data");, +        }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.net.ProtocolException;, +        } catch (IOException e) {, +          logger.info(MockWebServer.this + " connection from ", +              + raw.getInetAddress() + " failed: " + e);, +          logger.log(Level.SEVERE, MockWebServer.this + " connection from ", +              + raw.getInetAddress() + " crashed", e);, +        if (response.getSocketPolicy() == SocketPolicy.NO_RESPONSE) {, +          // This read should block until the socket is closed. (Because nobody is writing.), +          if (in.read() == -1) return false;, +          throw new ProtocolException("unexpected data");, +        }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.DoubleInetAddressNetwork;, +import java.io.InterruptedIOException;, +  @Test public void timeoutsNotRetried() throws Exception {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.NO_RESPONSE));, +    server.enqueue(new MockResponse(), +        .setBody("unreachable!"));, +, +    Internal.instance.setNetwork(client, new DoubleInetAddressNetwork());, +    client.setReadTimeout(100, TimeUnit.MILLISECONDS);, +, +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    try {, +      // If this succeeds, too many requests were made., +      client.newCall(request).execute();, +      fail();, +    } catch (InterruptedIOException expected) {, +    }, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.net.ProtocolException;, +        } catch (IOException e) {, +          logger.info(MockWebServer.this + " connection from ", +              + raw.getInetAddress() + " failed: " + e);, +          logger.log(Level.SEVERE, MockWebServer.this + " connection from ", +              + raw.getInetAddress() + " crashed", e);, +        if (response.getSocketPolicy() == SocketPolicy.NO_RESPONSE) {, +          // This read should block until the socket is closed. (Because nobody is writing.), +          if (in.read() == -1) return false;, +          throw new ProtocolException("unexpected data");, +        }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.DoubleInetAddressNetwork;, +import java.io.InterruptedIOException;, +  @Test public void timeoutsNotRetried() throws Exception {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.NO_RESPONSE));, +    server.enqueue(new MockResponse(), +        .setBody("unreachable!"));, +, +    Internal.instance.setNetwork(client, new DoubleInetAddressNetwork());, +    client.setReadTimeout(100, TimeUnit.MILLISECONDS);, +, +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    try {, +      // If this succeeds, too many requests were made., +      client.newCall(request).execute();, +      fail();, +    } catch (InterruptedIOException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DoubleInetAddressNetwork.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal;, +, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +, +/**]