[+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +     * --> END GET, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +     * --> END GET, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +     * --> END GET, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +     * --> END GET, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HpackTest.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +     * --> END GET, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HpackTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, +  @Test, +  @Ignore("Working through making this work with the new HPACK encoder."), +  public void peerHttp2ServerZerosCompressionTable() throws Exception {, +    // verify the peer's settings were read and applied., +    Http2.Reader frameReader = (Http2.Reader) connection.readerRunnable.frameReader;, +    assertEquals(0, frameReader.hpackReader.maxDynamicTableByteCount());, +    // TODO: when supported, check the frameWriter's compression table is unaffected., +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +     * --> END GET, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HpackTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, +  @Test, +  @Ignore("Working through making this work with the new HPACK encoder."), +  public void peerHttp2ServerZerosCompressionTable() throws Exception {, +    // verify the peer's settings were read and applied., +    Http2.Reader frameReader = (Http2.Reader) connection.readerRunnable.frameReader;, +    assertEquals(0, frameReader.hpackReader.maxDynamicTableByteCount());, +    // TODO: when supported, check the frameWriter's compression table is unaffected., +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2Test.java, +    writer.ackSettings(new Settings().set(Settings.MAX_FRAME_SIZE, 0, newMaxFrameSize));, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +     * --> END GET, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HpackTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, +  @Test, +  @Ignore("Working through making this work with the new HPACK encoder."), +  public void peerHttp2ServerZerosCompressionTable() throws Exception {, +    // verify the peer's settings were read and applied., +    Http2.Reader frameReader = (Http2.Reader) connection.readerRunnable.frameReader;, +    assertEquals(0, frameReader.hpackReader.maxDynamicTableByteCount());, +    // TODO: when supported, check the frameWriter's compression table is unaffected., +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2Test.java, +    writer.ackSettings(new Settings().set(Settings.MAX_FRAME_SIZE, 0, newMaxFrameSize));, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +     * --> END GET, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HpackTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, +  @Test, +  @Ignore("Working through making this work with the new HPACK encoder."), +  public void peerHttp2ServerZerosCompressionTable() throws Exception {, +    // verify the peer's settings were read and applied., +    Http2.Reader frameReader = (Http2.Reader) connection.readerRunnable.frameReader;, +    assertEquals(0, frameReader.hpackReader.maxDynamicTableByteCount());, +    // TODO: when supported, check the frameWriter's compression table is unaffected., +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2Test.java, +    writer.ackSettings(new Settings().set(Settings.MAX_FRAME_SIZE, 0, newMaxFrameSize));, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +++ b/okhttp/src/main/java/okhttp3/Headers.java, +import java.util.LinkedHashMap;, +    Map<String, List<String>> result = new LinkedHashMap<>();, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +     * --> END GET, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HpackTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, +  @Test, +  @Ignore("Working through making this work with the new HPACK encoder."), +  public void peerHttp2ServerZerosCompressionTable() throws Exception {, +    // verify the peer's settings were read and applied., +    Http2.Reader frameReader = (Http2.Reader) connection.readerRunnable.frameReader;, +    assertEquals(0, frameReader.hpackReader.maxDynamicTableByteCount());, +    // TODO: when supported, check the frameWriter's compression table is unaffected., +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2Test.java, +    writer.ackSettings(new Settings().set(Settings.MAX_FRAME_SIZE, 0, newMaxFrameSize));, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +++ b/okhttp/src/main/java/okhttp3/Headers.java, +import java.util.LinkedHashMap;, +    Map<String, List<String>> result = new LinkedHashMap<>();, +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, + * "/square/okhttp/issues/1486" and decompose into a list of segments like ["square", "okhttp",, + * "issues", "1486"]., + *]