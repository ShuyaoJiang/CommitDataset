[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void successfulExpectContinuePermitsConnectionReuse() throws Exception {, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .header("Expect", "100-continue"), +        .post(RequestBody.create(MediaType.parse("text/plain"), "abc")), +        .build());, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .build());, +  @Test public void successfulExpectContinuePermitsConnectionReuseWithHttp2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    successfulExpectContinuePermitsConnectionReuse();, +  }, +, +  @Test public void unsuccessfulExpectContinuePreventsConnectionReuse() throws Exception {, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .header("Expect", "100-continue"), +        .post(RequestBody.create(MediaType.parse("text/plain"), "abc")), +        .build());, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .build());, +, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +  }, +, +  @Test public void unsuccessfulExpectContinuePermitsConnectionReuseWithHttp2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +, +    server.enqueue(new MockResponse());, +    server.enqueue(new MockResponse());, +, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .header("Expect", "100-continue"), +        .post(RequestBody.create(MediaType.parse("text/plain"), "abc")), +        .build());, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .build());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void successfulExpectContinuePermitsConnectionReuse() throws Exception {, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .header("Expect", "100-continue"), +        .post(RequestBody.create(MediaType.parse("text/plain"), "abc")), +        .build());, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .build());, +  @Test public void successfulExpectContinuePermitsConnectionReuseWithHttp2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    successfulExpectContinuePermitsConnectionReuse();, +  }, +, +  @Test public void unsuccessfulExpectContinuePreventsConnectionReuse() throws Exception {, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .header("Expect", "100-continue"), +        .post(RequestBody.create(MediaType.parse("text/plain"), "abc")), +        .build());, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .build());, +, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +  }, +, +  @Test public void unsuccessfulExpectContinuePermitsConnectionReuseWithHttp2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +, +    server.enqueue(new MockResponse());, +    server.enqueue(new MockResponse());, +, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .header("Expect", "100-continue"), +        .post(RequestBody.create(MediaType.parse("text/plain"), "abc")), +        .build());, +    executeSynchronously(new Request.Builder(), +        .url(server.url("/")), +        .build());, +++ b/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java, +import okhttp3.internal.connection.RealConnection;, +    RealInterceptorChain realChain = (RealInterceptorChain) chain;, +    HttpCodec httpCodec = realChain.httpStream();, +    StreamAllocation streamAllocation = realChain.streamAllocation();, +    RealConnection connection = (RealConnection) realChain.connection();, +    Request request = realChain.request();, +        // Write the request body if the "Expect: 100-continue" expectation was met., +      } else if (!connection.isMultiplexed()) {, +        // If the "Expect: 100-continue" expectation wasn't met, prevent the HTTP/1 connection from, +        // being reused. Otherwise we're still obligated to transmit the request body to leave the, +        // connection in a consistent state., +        streamAllocation.noNewStreams();]