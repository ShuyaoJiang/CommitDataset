[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +  private long throttleBytesPerPeriod = Long.MAX_VALUE;, +  private long throttlePeriodAmount = 1;, +  private TimeUnit throttlePeriodUnit = TimeUnit.SECONDS;, +  private long bodyDelayAmount = 0;, +  private TimeUnit bodyDelayUnit = TimeUnit.MILLISECONDS;, +  public MockResponse throttleBody(long bytesPerPeriod, long period, TimeUnit unit) {, +    this.throttlePeriodAmount = period;, +    this.throttlePeriodUnit = unit;, +  public long getThrottleBytesPerPeriod() {, +  public long getThrottlePeriod(TimeUnit unit) {, +    return unit.convert(throttlePeriodAmount, throttlePeriodUnit);, +  public MockResponse setBodyDelay(long delay, TimeUnit unit) {, +    bodyDelayAmount = delay;, +    bodyDelayUnit = unit;, +  public long getBodyDelay(TimeUnit unit) {, +    return unit.convert(bodyDelayAmount, bodyDelayUnit);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +  private long throttleBytesPerPeriod = Long.MAX_VALUE;, +  private long throttlePeriodAmount = 1;, +  private TimeUnit throttlePeriodUnit = TimeUnit.SECONDS;, +  private long bodyDelayAmount = 0;, +  private TimeUnit bodyDelayUnit = TimeUnit.MILLISECONDS;, +  public MockResponse throttleBody(long bytesPerPeriod, long period, TimeUnit unit) {, +    this.throttlePeriodAmount = period;, +    this.throttlePeriodUnit = unit;, +  public long getThrottleBytesPerPeriod() {, +  public long getThrottlePeriod(TimeUnit unit) {, +    return unit.convert(throttlePeriodAmount, throttlePeriodUnit);, +  public MockResponse setBodyDelay(long delay, TimeUnit unit) {, +    bodyDelayAmount = delay;, +    bodyDelayUnit = unit;, +  public long getBodyDelay(TimeUnit unit) {, +    return unit.convert(bodyDelayAmount, bodyDelayUnit);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    long delayMs = response.getBodyDelay(TimeUnit.MILLISECONDS);, +    if (delayMs != 0) {, +        Thread.sleep(delayMs);, +    long bytesPerPeriod = throttlePolicy.getThrottleBytesPerPeriod();, +    long periodDelayMs = throttlePolicy.getThrottlePeriod(TimeUnit.MILLISECONDS);, +      if (periodDelayMs != 0) {, +          Thread.sleep(periodDelayMs);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +  private long throttleBytesPerPeriod = Long.MAX_VALUE;, +  private long throttlePeriodAmount = 1;, +  private TimeUnit throttlePeriodUnit = TimeUnit.SECONDS;, +  private long bodyDelayAmount = 0;, +  private TimeUnit bodyDelayUnit = TimeUnit.MILLISECONDS;, +  public MockResponse throttleBody(long bytesPerPeriod, long period, TimeUnit unit) {, +    this.throttlePeriodAmount = period;, +    this.throttlePeriodUnit = unit;, +  public long getThrottleBytesPerPeriod() {, +  public long getThrottlePeriod(TimeUnit unit) {, +    return unit.convert(throttlePeriodAmount, throttlePeriodUnit);, +  public MockResponse setBodyDelay(long delay, TimeUnit unit) {, +    bodyDelayAmount = delay;, +    bodyDelayUnit = unit;, +  public long getBodyDelay(TimeUnit unit) {, +    return unit.convert(bodyDelayAmount, bodyDelayUnit);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    long delayMs = response.getBodyDelay(TimeUnit.MILLISECONDS);, +    if (delayMs != 0) {, +        Thread.sleep(delayMs);, +    long bytesPerPeriod = throttlePolicy.getThrottleBytesPerPeriod();, +    long periodDelayMs = throttlePolicy.getThrottlePeriod(TimeUnit.MILLISECONDS);, +      if (periodDelayMs != 0) {, +          Thread.sleep(periodDelayMs);, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +import static java.util.concurrent.TimeUnit.SECONDS;, +   * Delay the response body by sleeping 1s., +        .setBodyDelay(1, SECONDS));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +  private long throttleBytesPerPeriod = Long.MAX_VALUE;, +  private long throttlePeriodAmount = 1;, +  private TimeUnit throttlePeriodUnit = TimeUnit.SECONDS;, +  private long bodyDelayAmount = 0;, +  private TimeUnit bodyDelayUnit = TimeUnit.MILLISECONDS;, +  public MockResponse throttleBody(long bytesPerPeriod, long period, TimeUnit unit) {, +    this.throttlePeriodAmount = period;, +    this.throttlePeriodUnit = unit;, +  public long getThrottleBytesPerPeriod() {, +  public long getThrottlePeriod(TimeUnit unit) {, +    return unit.convert(throttlePeriodAmount, throttlePeriodUnit);, +  public MockResponse setBodyDelay(long delay, TimeUnit unit) {, +    bodyDelayAmount = delay;, +    bodyDelayUnit = unit;, +  public long getBodyDelay(TimeUnit unit) {, +    return unit.convert(bodyDelayAmount, bodyDelayUnit);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    long delayMs = response.getBodyDelay(TimeUnit.MILLISECONDS);, +    if (delayMs != 0) {, +        Thread.sleep(delayMs);, +    long bytesPerPeriod = throttlePolicy.getThrottleBytesPerPeriod();, +    long periodDelayMs = throttlePolicy.getThrottlePeriod(TimeUnit.MILLISECONDS);, +      if (periodDelayMs != 0) {, +          Thread.sleep(periodDelayMs);, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +import static java.util.concurrent.TimeUnit.SECONDS;, +   * Delay the response body by sleeping 1s., +        .setBodyDelay(1, SECONDS));]