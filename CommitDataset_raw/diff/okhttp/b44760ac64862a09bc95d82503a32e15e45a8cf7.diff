[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/MultipartBuilderTest.java, +import java.io.IOException;, +import okio.BufferedSink;, +    assertEquals(53, requestBody.contentLength());, +    assertEquals(buffer.size(), requestBody.contentLength());, +    assertEquals(112, requestBody.contentLength());, +    assertEquals(buffer.size(), requestBody.contentLength());, +        + "Content-Length: 337\r\n", +    assertEquals(568, requestBody.contentLength());, +    assertEquals(buffer.size(), requestBody.contentLength());, +  @Test public void streamingPartHasNoLength() throws Exception {, +    class StreamingBody extends RequestBody {, +      private final String body;, +, +      StreamingBody(String body) {, +        this.body = body;, +      }, +, +      @Override public MediaType contentType() {, +        return null;, +      }, +, +      @Override public void writeTo(BufferedSink sink) throws IOException {, +        sink.writeUtf8(body);, +      }, +    }, +, +    String expected = "", +        + "--123\r\n", +        + "Content-Length: 5\r\n", +        + "\r\n", +        + "Quick\r\n", +        + "--123\r\n", +        + "\r\n", +        + "Brown\r\n", +        + "--123\r\n", +        + "Content-Length: 3\r\n", +        + "\r\n", +        + "Fox\r\n", +        + "--123--\r\n";, +, +    RequestBody requestBody = new MultipartBuilder("123"), +        .addPart(RequestBody.create(null, "Quick")), +        .addPart(new StreamingBody("Brown")), +        .addPart(RequestBody.create(null, "Fox")), +        .build();, +, +    assertEquals("multipart/mixed; boundary=123", requestBody.contentType().toString());, +, +    Buffer buffer = new Buffer();, +    requestBody.writeTo(buffer);, +    assertEquals(expected, buffer.readUtf8());, +    assertEquals(-1, requestBody.contentLength());, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/MultipartBuilderTest.java, +import java.io.IOException;, +import okio.BufferedSink;, +    assertEquals(53, requestBody.contentLength());, +    assertEquals(buffer.size(), requestBody.contentLength());, +    assertEquals(112, requestBody.contentLength());, +    assertEquals(buffer.size(), requestBody.contentLength());, +        + "Content-Length: 337\r\n", +    assertEquals(568, requestBody.contentLength());, +    assertEquals(buffer.size(), requestBody.contentLength());, +  @Test public void streamingPartHasNoLength() throws Exception {, +    class StreamingBody extends RequestBody {, +      private final String body;, +, +      StreamingBody(String body) {, +        this.body = body;, +      }, +, +      @Override public MediaType contentType() {, +        return null;, +      }, +, +      @Override public void writeTo(BufferedSink sink) throws IOException {, +        sink.writeUtf8(body);, +      }, +    }, +, +    String expected = "", +        + "--123\r\n", +        + "Content-Length: 5\r\n", +        + "\r\n", +        + "Quick\r\n", +        + "--123\r\n", +        + "\r\n", +        + "Brown\r\n", +        + "--123\r\n", +        + "Content-Length: 3\r\n", +        + "\r\n", +        + "Fox\r\n", +        + "--123--\r\n";, +, +    RequestBody requestBody = new MultipartBuilder("123"), +        .addPart(RequestBody.create(null, "Quick")), +        .addPart(new StreamingBody("Brown")), +        .addPart(RequestBody.create(null, "Fox"))]