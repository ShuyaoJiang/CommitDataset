[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.Internal;, +import com.squareup.okhttp.internal.SingleInetAddressNetwork;, +import java.net.SocketException;, +import javax.net.ssl.SSLProtocolException;, +    Internal.instance.setNetwork(client, new SingleInetAddressNetwork());, +  @Test public void noRecoveryFromTlsHandshakeFailureWhenTlsFallbackIsDisabled() throws Exception {, +    client.setConnectionConfigurations(Arrays.asList(, +        ConnectionConfiguration.MODERN_TLS, ConnectionConfiguration.CLEARTEXT));, +, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.FAIL_HANDSHAKE));, +    server.play();, +, +    client.setSslSocketFactory(sslContext.getSocketFactory());, +    client.setHostnameVerifier(new RecordingHostnameVerifier());, +    Internal.instance.setNetwork(client, new SingleInetAddressNetwork());, +, +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (SSLProtocolException expected) {, +    }, +  }, +, +  @Test public void cleartextCallsFailWhenCleartextIsDisabled() throws Exception {, +    // Configure the client with only TLS configurations. No cleartext!, +    client.setConnectionConfigurations(Arrays.asList(, +        ConnectionConfiguration.MODERN_TLS, ConnectionConfiguration.COMPATIBLE_TLS));, +, +    server.enqueue(new MockResponse());, +    server.play();, +, +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (SocketException expected) {, +      assertTrue(expected.getMessage().contains("exhausted connection configurations"));, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.Internal;, +import com.squareup.okhttp.internal.SingleInetAddressNetwork;, +import java.net.SocketException;, +import javax.net.ssl.SSLProtocolException;, +    Internal.instance.setNetwork(client, new SingleInetAddressNetwork());, +  @Test public void noRecoveryFromTlsHandshakeFailureWhenTlsFallbackIsDisabled() throws Exception {, +    client.setConnectionConfigurations(Arrays.asList(, +        ConnectionConfiguration.MODERN_TLS, ConnectionConfiguration.CLEARTEXT));, +, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.FAIL_HANDSHAKE));, +    server.play();, +, +    client.setSslSocketFactory(sslContext.getSocketFactory());, +    client.setHostnameVerifier(new RecordingHostnameVerifier());, +    Internal.instance.setNetwork(client, new SingleInetAddressNetwork());, +, +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (SSLProtocolException expected) {, +    }, +  }, +, +  @Test public void cleartextCallsFailWhenCleartextIsDisabled() throws Exception {, +    // Configure the client with only TLS configurations. No cleartext!, +    client.setConnectionConfigurations(Arrays.asList(, +        ConnectionConfiguration.MODERN_TLS, ConnectionConfiguration.COMPATIBLE_TLS));, +, +    server.enqueue(new MockResponse());, +    server.play();, +, +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (SocketException expected) {, +      assertTrue(expected.getMessage().contains("exhausted connection configurations"));, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +import java.util.List;, +    List<ConnectionConfiguration> connectionConfigurations = Util.immutableList(, +        ConnectionConfiguration.MODERN_TLS, ConnectionConfiguration.CLEARTEXT);, +, +        Util.immutableList(Protocol.SPDY_3, Protocol.HTTP_1_1), connectionConfigurations);, +        Util.immutableList(Protocol.SPDY_3, Protocol.HTTP_1_1), connectionConfigurations);, +        ConnectionConfiguration.CLEARTEXT);, +        ConnectionConfiguration.MODERN_TLS);, +        ConnectionConfiguration.CLEARTEXT));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.Internal;, +import com.squareup.okhttp.internal.SingleInetAddressNetwork;, +import java.net.SocketException;]