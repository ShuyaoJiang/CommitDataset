[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +  public Headers getHeaders() {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +  public Headers getHeaders() {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        .headers(response.getHeaders()), +    Headers headers = response.getHeaders();, +      sink.writeUtf8(headers.name(i));, +      sink.writeUtf8(": ");, +      sink.writeUtf8(headers.value(i));, +      Headers headers = response.getHeaders();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +  public Headers getHeaders() {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        .headers(response.getHeaders()), +    Headers headers = response.getHeaders();, +      sink.writeUtf8(headers.name(i));, +      sink.writeUtf8(": ");, +      sink.writeUtf8(headers.value(i));, +      Headers headers = response.getHeaders();, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +import java.util.ArrayList;, +    assertEquals(Arrays.asList("Content-Length: 0"), headersToList(response));, +    assertEquals(Arrays.asList("Content-Length: 3"), headersToList(response));, +    assertEquals(Arrays.asList("Cookie: s=square", "Cookie: a=android"), headersToList(response));, +    assertEquals(Arrays.asList("Cookies: delicious", "cookie: r=robot"), headersToList(response));, +, +  private List<String> headersToList(MockResponse response) {, +    Headers headers = response.getHeaders();, +    int size = headers.size();, +    List<String> headerList = new ArrayList<>(size);, +    for (int i = 0; i < size; i++) {, +      headerList.add(headers.name(i) + ": " + headers.value(i));, +    }, +    return headerList;, +  }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +  public Headers getHeaders() {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        .headers(response.getHeaders()), +    Headers headers = response.getHeaders();, +      sink.writeUtf8(headers.name(i));, +      sink.writeUtf8(": ");, +      sink.writeUtf8(headers.value(i));, +      Headers headers = response.getHeaders();, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +import java.util.ArrayList;, +    assertEquals(Arrays.asList("Content-Length: 0"), headersToList(response));, +    assertEquals(Arrays.asList("Content-Length: 3"), headersToList(response));, +    assertEquals(Arrays.asList("Cookie: s=square", "Cookie: a=android"), headersToList(response));, +    assertEquals(Arrays.asList("Cookies: delicious", "cookie: r=robot"), headersToList(response));, +, +  private List<String> headersToList(MockResponse response) {, +    Headers headers = response.getHeaders();, +    int size = headers.size();, +    List<String> headerList = new ArrayList<>(size);, +    for (int i = 0; i < size; i++) {, +      headerList.add(headers.name(i) + ": " + headers.value(i));, +    }, +    return headerList;, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    Headers headers = response.getHeaders();, +    response.setHeaders(headers);, +        response.removeHeader("Content-Length");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +  public Headers getHeaders() {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        .headers(response.getHeaders()), +    Headers headers = response.getHeaders();, +      sink.writeUtf8(headers.name(i));, +      sink.writeUtf8(": ");, +      sink.writeUtf8(headers.value(i));, +      Headers headers = response.getHeaders();, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +import java.util.ArrayList;, +    assertEquals(Arrays.asList("Content-Length: 0"), headersToList(response));, +    assertEquals(Arrays.asList("Content-Length: 3"), headersToList(response));, +    assertEquals(Arrays.asList("Cookie: s=square", "Cookie: a=android"), headersToList(response));, +    assertEquals(Arrays.asList("Cookies: delicious", "cookie: r=robot"), headersToList(response));, +, +  private List<String> headersToList(MockResponse response) {, +    Headers headers = response.getHeaders();, +    int size = headers.size();, +    List<String> headerList = new ArrayList<>(size);, +    for (int i = 0; i < size; i++) {, +      headerList.add(headers.name(i) + ": " + headers.value(i));, +    }, +    return headerList;, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    Headers headers = response.getHeaders();, +    response.setHeaders(headers);, +        response.removeHeader("Content-Length");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +        response.removeHeader("Content-Length");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +  public Headers getHeaders() {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        .headers(response.getHeaders())]