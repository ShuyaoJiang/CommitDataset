[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, +  private NewWebSocket.Listener webSocketListener;, +  public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, +  public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, +  private NewWebSocket.Listener webSocketListener;, +  public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, +  public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealNewWebSocket;, +    RealNewWebSocket.Streams streams = new RealNewWebSocket.Streams(false, source, sink) {, +      @Override public void close() {, +    RealNewWebSocket webSocket = new RealNewWebSocket(fancyRequest,, +        response.getWebSocketListener(), new SecureRandom());, +    response.getWebSocketListener().onOpen(webSocket, fancyResponse);, +    webSocket.initReaderAndWriter(streams);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, +  private NewWebSocket.Listener webSocketListener;, +  public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, +  public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealNewWebSocket;, +    RealNewWebSocket.Streams streams = new RealNewWebSocket.Streams(false, source, sink) {, +      @Override public void close() {, +    RealNewWebSocket webSocket = new RealNewWebSocket(fancyRequest,, +        response.getWebSocketListener(), new SecureRandom());, +    response.getWebSocketListener().onOpen(webSocket, fancyResponse);, +    webSocket.initReaderAndWriter(streams);, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private NewWebSocket newWebSocket(String path, NewWebSocket.Listener listener) {, +    return client.newWebSocket(request, listener);, +    newWebSocket("/runCase?case=" + number + "&agent=okhttp", new NewWebSocket.Listener() {, +      @Override public void onOpen(NewWebSocket webSocket, Response response) {, +      @Override public void onMessage(final NewWebSocket webSocket, final ByteString bytes) {, +        webSocket.send(bytes);, +      @Override public void onMessage(final NewWebSocket webSocket, final String text) {, +        webSocket.send(text);, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +        webSocket.close(1000, null);, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/getCaseCount", new NewWebSocket.Listener() {, +      @Override public void onMessage(NewWebSocket webSocket, String text) {, +        countRef.set(Long.parseLong(text));, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +        webSocket.close(1000, null);, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/updateReports?agent=" + Version.userAgent(), new NewWebSocket.Listener() {, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +        webSocket.close(code, null);, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, +  private NewWebSocket.Listener webSocketListener;, +  public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, +  public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealNewWebSocket;, +    RealNewWebSocket.Streams streams = new RealNewWebSocket.Streams(false, source, sink) {, +      @Override public void close() {, +    RealNewWebSocket webSocket = new RealNewWebSocket(fancyRequest,, +        response.getWebSocketListener(), new SecureRandom());, +    response.getWebSocketListener().onOpen(webSocket, fancyResponse);, +    webSocket.initReaderAndWriter(streams);, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private NewWebSocket newWebSocket(String path, NewWebSocket.Listener listener) {, +    return client.newWebSocket(request, listener);, +    newWebSocket("/runCase?case=" + number + "&agent=okhttp", new NewWebSocket.Listener() {, +      @Override public void onOpen(NewWebSocket webSocket, Response response) {, +      @Override public void onMessage(final NewWebSocket webSocket, final ByteString bytes) {, +        webSocket.send(bytes);, +      @Override public void onMessage(final NewWebSocket webSocket, final String text) {, +        webSocket.send(text);, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +        webSocket.close(1000, null);, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/getCaseCount", new NewWebSocket.Listener() {, +      @Override public void onMessage(NewWebSocket webSocket, String text) {, +        countRef.set(Long.parseLong(text));, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +        webSocket.close(1000, null);, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/updateReports?agent=" + Version.userAgent(), new NewWebSocket.Listener() {, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +        webSocket.close(code, null);, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, +  private NewWebSocket.Listener webSocketListener;, +  public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, +  public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealNewWebSocket;, +    RealNewWebSocket.Streams streams = new RealNewWebSocket.Streams(false, source, sink) {, +      @Override public void close() {, +    RealNewWebSocket webSocket = new RealNewWebSocket(fancyRequest,, +        response.getWebSocketListener(), new SecureRandom());]