[+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +  public void requestFailed(Call call, IOException ioe) {, +    logWithTime("requestFailed: " + ioe);, +  }, +, +  @Override, +  public void responseFailed(Call call, IOException ioe) {, +    logWithTime("responseFailed: " + ioe);, +  }, +, +  @Override, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +  public void requestFailed(Call call, IOException ioe) {, +    logWithTime("requestFailed: " + ioe);, +  }, +, +  @Override, +  public void responseFailed(Call call, IOException ioe) {, +    logWithTime("responseFailed: " + ioe);, +  }, +, +  @Override, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.RecordingEventListener.CallEnd;, +import okhttp3.RecordingEventListener.ConnectionAcquired;, +import okhttp3.RecordingEventListener.ConnectionReleased;, +import okhttp3.RecordingEventListener.ResponseFailed;, +  private final RecordingEventListener listener = new RecordingEventListener();, +  private OkHttpClient client = defaultClient().newBuilder(), +      .eventListener(listener), +      .build();, +, +    // The call that seeds the connection pool., +    listener.removeUpToEvent(CallEnd.class);, +, +    // The ResponseFailed event is not necessarily fatal!, +    listener.removeUpToEvent(ConnectionAcquired.class);, +    listener.removeUpToEvent(ResponseFailed.class);, +    listener.removeUpToEvent(ConnectionReleased.class);, +    listener.removeUpToEvent(ConnectionAcquired.class);, +    listener.removeUpToEvent(ConnectionReleased.class);, +    listener.removeUpToEvent(CallEnd.class);, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +  public void requestFailed(Call call, IOException ioe) {, +    logWithTime("requestFailed: " + ioe);, +  }, +, +  @Override, +  public void responseFailed(Call call, IOException ioe) {, +    logWithTime("responseFailed: " + ioe);, +  }, +, +  @Override, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.RecordingEventListener.CallEnd;, +import okhttp3.RecordingEventListener.ConnectionAcquired;, +import okhttp3.RecordingEventListener.ConnectionReleased;, +import okhttp3.RecordingEventListener.ResponseFailed;, +  private final RecordingEventListener listener = new RecordingEventListener();, +  private OkHttpClient client = defaultClient().newBuilder(), +      .eventListener(listener), +      .build();, +, +    // The call that seeds the connection pool., +    listener.removeUpToEvent(CallEnd.class);, +, +    // The ResponseFailed event is not necessarily fatal!, +    listener.removeUpToEvent(ConnectionAcquired.class);, +    listener.removeUpToEvent(ResponseFailed.class);, +    listener.removeUpToEvent(ConnectionReleased.class);, +    listener.removeUpToEvent(ConnectionAcquired.class);, +    listener.removeUpToEvent(ConnectionReleased.class);, +    listener.removeUpToEvent(CallEnd.class);, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +        "ResponseBodyEnd", "ConnectionReleased", "CallEnd", "RequestFailed");, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +  public void requestFailed(Call call, IOException ioe) {, +    logWithTime("requestFailed: " + ioe);, +  }, +, +  @Override, +  public void responseFailed(Call call, IOException ioe) {, +    logWithTime("responseFailed: " + ioe);, +  }, +, +  @Override, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.RecordingEventListener.CallEnd;, +import okhttp3.RecordingEventListener.ConnectionAcquired;, +import okhttp3.RecordingEventListener.ConnectionReleased;, +import okhttp3.RecordingEventListener.ResponseFailed;, +  private final RecordingEventListener listener = new RecordingEventListener();, +  private OkHttpClient client = defaultClient().newBuilder(), +      .eventListener(listener), +      .build();, +, +    // The call that seeds the connection pool., +    listener.removeUpToEvent(CallEnd.class);, +, +    // The ResponseFailed event is not necessarily fatal!]