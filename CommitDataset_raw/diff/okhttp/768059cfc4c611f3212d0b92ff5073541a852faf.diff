[+++ b/src/main/java/com/squareup/okhttp/internal/net/http/SpdyTransport.java, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/SpdyTransport.java, +++ b/src/main/java/com/squareup/okhttp/internal/net/spdy/SpdyConnection.java, +import java.net.ProtocolException;, +                try {, +                } catch (ProtocolException e) {, +                    Streams.skipByReading(in, length);, +                    dataStream.closeLater(SpdyStream.RST_FLOW_CONTROL_ERROR);, +                }, +                previous.closeLater(SpdyStream.RST_PROTOCOL_ERROR);, +                removeStream(streamId);, +                try {, +                } catch (ProtocolException e) {, +                    replyStream.closeLater(SpdyStream.RST_PROTOCOL_ERROR);, +                }, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/SpdyTransport.java, +++ b/src/main/java/com/squareup/okhttp/internal/net/spdy/SpdyConnection.java, +import java.net.ProtocolException;, +                try {, +                } catch (ProtocolException e) {, +                    Streams.skipByReading(in, length);, +                    dataStream.closeLater(SpdyStream.RST_FLOW_CONTROL_ERROR);, +                }, +                previous.closeLater(SpdyStream.RST_PROTOCOL_ERROR);, +                removeStream(streamId);, +                try {, +                } catch (ProtocolException e) {, +                    replyStream.closeLater(SpdyStream.RST_PROTOCOL_ERROR);, +                }, +++ b/src/main/java/com/squareup/okhttp/internal/net/spdy/SpdyStream.java, +import java.net.ProtocolException;, +    public synchronized List<String> getResponseHeaders() throws IOException {, +        try {, +            if (responseHeaders != null) {, +            throw new IOException("stream was reset: " + rstStatusCode);, +        } catch (InterruptedException e) {, +            InterruptedIOException rethrow = new InterruptedIOException();, +            rethrow.initCause(e);, +            throw rethrow;, +        }, +    }, +        if (!closeInternal(rstStatusCode)) {, +            return; // Already closed., +        }, +        connection.writeSynReset(id, rstStatusCode);, +    }, +, +    void closeLater(int rstStatusCode) {, +        if (!closeInternal(rstStatusCode)) {, +            return; // Already closed., +        }, +        connection.writeSynResetLater(id, rstStatusCode);, +    }, +, +    /**, +     * Returns true if this stream was closed., +     */, +    private boolean closeInternal(int rstStatusCode) {, +                return false;, +        return true;, +            throw new ProtocolException();, +, +            int pos;, +            int limit;, +            int firstNewByte;, +            boolean finished;, +            synchronized (SpdyStream.this) {, +                finished = this.finished;, +                firstNewByte = this.limit;, +                limit = this.limit;, +                if (byteCount > buffer.length - available()) {, +                    throw new ProtocolException();, +                }, +            }, +, +            // Discard data received after the stream is finished. It's probably a benign race., +            if (finished) {, +                Streams.skipByReading(in, byteCount);, +                return;, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/SpdyTransport.java, +++ b/src/main/java/com/squareup/okhttp/internal/net/spdy/SpdyConnection.java, +import java.net.ProtocolException;, +                try {, +                } catch (ProtocolException e) {, +                    Streams.skipByReading(in, length);, +                    dataStream.closeLater(SpdyStream.RST_FLOW_CONTROL_ERROR);, +                }, +                previous.closeLater(SpdyStream.RST_PROTOCOL_ERROR);, +                removeStream(streamId);, +                try {, +                } catch (ProtocolException e) {, +                    replyStream.closeLater(SpdyStream.RST_PROTOCOL_ERROR);, +                }, +++ b/src/main/java/com/squareup/okhttp/internal/net/spdy/SpdyStream.java, +import java.net.ProtocolException;, +    public synchronized List<String> getResponseHeaders() throws IOException {, +        try {, +            if (responseHeaders != null) {, +            throw new IOException("stream was reset: " + rstStatusCode);, +        } catch (InterruptedException e) {]