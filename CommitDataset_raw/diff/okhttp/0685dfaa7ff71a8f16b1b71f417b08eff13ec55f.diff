[+++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionSpecSelectorTest.java, +    SSLSocket socket = createSocketWithEnabledProtocols(, +        TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);, +    ConnectionSpec sslV3 = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +    TlsVersion[] enabledSocketTlsVersions = {, +        TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0, +    };, +    assertEnabledProtocols(socket, TlsVersion.TLS_1_2);, +    assertEnabledProtocols(socket, TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionSpecSelectorTest.java, +    SSLSocket socket = createSocketWithEnabledProtocols(, +        TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);, +    ConnectionSpec sslV3 = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +    TlsVersion[] enabledSocketTlsVersions = {, +        TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0, +    };, +    assertEnabledProtocols(socket, TlsVersion.TLS_1_2);, +    assertEnabledProtocols(socket, TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionSpecSelectorTest.java, +    SSLSocket socket = createSocketWithEnabledProtocols(, +        TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);, +    ConnectionSpec sslV3 = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +    TlsVersion[] enabledSocketTlsVersions = {, +        TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0, +    };, +    assertEnabledProtocols(socket, TlsVersion.TLS_1_2);, +    assertEnabledProtocols(socket, TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java, + *, + * <p>The configuration of each spec changes with each OkHttp release. This is annoying: upgrading, + * your OkHttp library can break connectivity to certain web servers! But itâ€™s a necessary annoyance, + * because the TLS ecosystem is dynamic and staying up to date is necessary to stay secure. See, + * <a href="https://github.com/square/okhttp/wiki/TLS-Configuration-History">OkHttp's TLS, + * Configuration History</a> to track these changes., +  /** A secure TLS connection that requires a recent client platform and a recent server. */, +  /**, +   * A modern TLS configuration that works on most client platforms and can connect to most servers., +   * This is OkHttp's default configuration., +   */, +      .tlsVersions(TlsVersion.TLS_1_3, TlsVersion.TLS_1_2), +  /**, +   * A backwards-compatible fallback configuration that works on obsolete client platforms and can, +   * connect to obsolete servers. When possible, prefer to upgrade your client platform or server, +   * rather than using this configuration., +   */, +      .tlsVersions(TlsVersion.TLS_1_3, TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0), +    /**, +     * @deprecated since OkHttp 3.13 all TLS-connections are expected to support TLS extensions., +     *     In a future release setting this to true will be unnecessary and setting it to false will, +     *     have no effect., +     */]