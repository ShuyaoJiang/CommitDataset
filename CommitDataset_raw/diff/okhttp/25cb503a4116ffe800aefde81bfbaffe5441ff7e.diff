[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/Deadline.java, +import java.io.IOException;, +, +  public void throwIfReached() throws IOException {, +    // TODO: a more catchable exception type?, +    if (reached()) throw new IOException("Deadline reached");, +  }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/Deadline.java, +import java.io.IOException;, +, +  public void throwIfReached() throws IOException {, +    // TODO: a more catchable exception type?, +    if (reached()) throw new IOException("Deadline reached");, +  }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/OkBuffer.java, +  Segment head;, +  long byteCount;, +    checkByteCount(byteCount);, +      Segment tail = writableSegment();, +  /** Returns a tail segment that we can write bytes to, creating it if necessary. */, +  Segment writableSegment() {, +    if (head == null) {, +      head = SegmentPool.INSTANCE.take(); // Acquire a first segment., +      return head.next = head.prev = head;, +    }, +, +    Segment tail = head.prev;, +    if (tail.limit == Segment.SIZE) {, +      tail = tail.push(SegmentPool.INSTANCE.take()); // Append a new empty segment to fill up., +    }, +    return tail;, +  }, +, +    source.checkByteCount(byteCount);, +  /**, +   * Returns the index of {@code b} in this, or -1 if this buffer does not, +   * contain {@code b}., +   */, +  public long indexOf(byte b) throws IOException {, +, +  /** Throws if this has fewer bytes than {@code requested}. */, +  void checkByteCount(long requested) {, +    if (requested < 0) {, +      throw new IllegalArgumentException("requested < 0: " + requested);, +    }, +    if (requested > this.byteCount) {, +      throw new IllegalArgumentException(, +          String.format("requested %s > available %s", requested, this.byteCount));, +    }, +  }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/Deadline.java, +import java.io.IOException;, +, +  public void throwIfReached() throws IOException {, +    // TODO: a more catchable exception type?, +    if (reached()) throw new IOException("Deadline reached");, +  }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/OkBuffer.java, +  Segment head;, +  long byteCount;, +    checkByteCount(byteCount);, +      Segment tail = writableSegment();, +  /** Returns a tail segment that we can write bytes to, creating it if necessary. */, +  Segment writableSegment() {, +    if (head == null) {, +      head = SegmentPool.INSTANCE.take(); // Acquire a first segment., +      return head.next = head.prev = head;, +    }, +, +    Segment tail = head.prev;, +    if (tail.limit == Segment.SIZE) {, +      tail = tail.push(SegmentPool.INSTANCE.take()); // Append a new empty segment to fill up., +    }, +    return tail;, +  }, +, +    source.checkByteCount(byteCount);, +  /**, +   * Returns the index of {@code b} in this, or -1 if this buffer does not, +   * contain {@code b}., +   */, +  public long indexOf(byte b) throws IOException {, +, +  /** Throws if this has fewer bytes than {@code requested}. */, +  void checkByteCount(long requested) {, +    if (requested < 0) {, +      throw new IllegalArgumentException("requested < 0: " + requested);, +    }, +    if (requested > this.byteCount) {, +      throw new IllegalArgumentException(, +          String.format("requested %s > available %s", requested, this.byteCount));, +    }, +  }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/OkBuffers.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at]