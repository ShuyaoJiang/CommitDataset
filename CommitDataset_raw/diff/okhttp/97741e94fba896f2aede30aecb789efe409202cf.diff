[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/ByteString.java, +    if (ascii == null || data.length != ascii.length()) {, +      return false;, +    }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/ByteString.java, +    if (ascii == null || data.length != ascii.length()) {, +      return false;, +    }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +        int priority, List<Header> nameValueBlock, HeadersMode headersMode);, +    void ping(boolean reply, int payload1, int payload2);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/ByteString.java, +    if (ascii == null || data.length != ascii.length()) {, +      return false;, +    }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +        int priority, List<Header> nameValueBlock, HeadersMode headersMode);, +    void ping(boolean reply, int payload1, int payload2);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +      int priority, int slot, List<Header> nameValueBlock) throws IOException;, +  void synReply(boolean outFinished, int streamId, List<Header> nameValueBlock), +  void headers(int streamId, List<Header> nameValueBlock) throws IOException;, +  void ping(boolean reply, int payload1, int payload2) throws IOException;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/ByteString.java, +    if (ascii == null || data.length != ascii.length()) {, +      return false;, +    }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +        int priority, List<Header> nameValueBlock, HeadersMode headersMode);, +    void ping(boolean reply, int payload1, int payload2);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +      int priority, int slot, List<Header> nameValueBlock) throws IOException;, +  void synReply(boolean outFinished, int streamId, List<Header> nameValueBlock), +  void headers(int streamId, List<Header> nameValueBlock) throws IOException;, +  void ping(boolean reply, int payload1, int payload2) throws IOException;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +import java.io.DataInputStream;, +  // TODO: huffman encoding!, +  static class Reader {, +    private final DataInputStream in;, +    private long bytesLeft = 0;, +    Reader(boolean client, int maxHeaderTableByteCount, DataInputStream in) {, +    /** Evicts entries as needed. */, +      if (newMaxHeaderTableByteCount < headerTableByteCount) {, +        evictToRecoverBytes(headerTableByteCount - newMaxHeaderTableByteCount);, +      }, +    public void readHeaders(int byteCount) throws IOException {, +      bytesLeft += byteCount;, +      // TODO: limit to 'byteCount' bytes?, +, +      while (bytesLeft > 0) {, +        int b = readByte();, +, +    public void emitReferenceSet() {, +    public List<Header> getAndReset() {, +        clearReferenceSet();, +        Arrays.fill(headerTable, null);, +        nextHeaderIndex = headerTable.length - 1;, +        headerCount = 0;, +        headerTableByteCount = 0;, +      bytesLeft--;, +      return in.readByte() & 0xff;, +    public ByteString readByteString(boolean asciiLowercase) throws IOException {, +        bytesLeft -= length;, +      bytesLeft -= length;, +  static class Writer {, +    public void writeHeaders(List<Header> nameValueBlock) throws IOException {, +      for (int i = 0, size = nameValueBlock.size(); i < size; i++) {, +        writeByteString(nameValueBlock.get(i).name);, +        writeByteString(nameValueBlock.get(i).value);, +    public void writeInt(int value, int prefixMask, int bits) throws IOException {, +    public void writeByteString(ByteString data) throws IOException {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/ByteString.java, +    if (ascii == null || data.length != ascii.length()) {, +      return false;, +    }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +        int priority, List<Header> nameValueBlock, HeadersMode headersMode);, +    void ping(boolean reply, int payload1, int payload2);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +      int priority, int slot, List<Header> nameValueBlock) throws IOException;, +  void synReply(boolean outFinished, int streamId, List<Header> nameValueBlock), +  void headers(int streamId, List<Header> nameValueBlock) throws IOException;, +  void ping(boolean reply, int payload1, int payload2) throws IOException;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +import java.io.DataInputStream;, +  // TODO: huffman encoding!, +  static class Reader {, +    private final DataInputStream in;, +    private long bytesLeft = 0;, +    Reader(boolean client, int maxHeaderTableByteCount, DataInputStream in) {, +    /** Evicts entries as needed. */, +      if (newMaxHeaderTableByteCount < headerTableByteCount) {, +        evictToRecoverBytes(headerTableByteCount - newMaxHeaderTableByteCount);, +      }, +    public void readHeaders(int byteCount) throws IOException {, +      bytesLeft += byteCount;, +      // TODO: limit to 'byteCount' bytes?, +, +      while (bytesLeft > 0) {]