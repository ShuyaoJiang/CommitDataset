[+++ b/build.gradle, +      'kotlin': '1.3.20',, +      'kotlinStdlib': "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",, +    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}", +  apply plugin: 'org.jetbrains.kotlin.platform.jvm', +++ b/build.gradle, +      'kotlin': '1.3.20',, +      'kotlinStdlib': "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",, +    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}", +  apply plugin: 'org.jetbrains.kotlin.platform.jvm', +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionSpecTest.java, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +    assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +    assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +    assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +        new String[] {TlsVersion.TLS_1_2.javaName(), TlsVersion.TLS_1_1.javaName()});, +    socket.setEnabledProtocols(new String[] {TlsVersion.TLS_1_1.javaName()});, +++ b/build.gradle, +      'kotlin': '1.3.20',, +      'kotlinStdlib': "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",, +    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}", +  apply plugin: 'org.jetbrains.kotlin.platform.jvm', +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionSpecTest.java, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +    assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +    assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +    assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +        new String[] {TlsVersion.TLS_1_2.javaName(), TlsVersion.TLS_1_1.javaName()});, +    socket.setEnabledProtocols(new String[] {TlsVersion.TLS_1_1.javaName()});, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/RouteSelectorTest.java, +import okhttp3.Call;, +import okhttp3.Request;, +import okhttp3.TestUtil;, +  private Call call;, +    call = TestUtil.defaultClient().newCall(new Request.Builder(), +        .url("https://" + uriHost + ":" + uriPort + "/"), +        .build());, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    routeSelector = new RouteSelector(address, routeDatabase, call, EventListener.NONE);, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    routeSelector = new RouteSelector(address, routeDatabase, call, EventListener.NONE);, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    routeSelector = new RouteSelector(address, routeDatabase, call, EventListener.NONE);, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +++ b/build.gradle, +      'kotlin': '1.3.20',, +      'kotlinStdlib': "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",, +    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}", +  apply plugin: 'org.jetbrains.kotlin.platform.jvm', +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionSpecTest.java, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +    assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +    assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +    assertThat(socket.getEnabledProtocols()).containsExactly(TlsVersion.TLS_1_2.javaName());, +        TlsVersion.TLS_1_2.javaName(),, +        TlsVersion.TLS_1_1.javaName(),, +        new String[] {TlsVersion.TLS_1_2.javaName(), TlsVersion.TLS_1_1.javaName()});, +    socket.setEnabledProtocols(new String[] {TlsVersion.TLS_1_1.javaName()});, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/RouteSelectorTest.java, +import okhttp3.Call;, +import okhttp3.Request;, +import okhttp3.TestUtil;, +  private Call call;, +    call = TestUtil.defaultClient().newCall(new Request.Builder(), +        .url("https://" + uriHost + ":" + uriPort + "/"), +        .build());, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    routeSelector = new RouteSelector(address, routeDatabase, call, EventListener.NONE);, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase, call,]