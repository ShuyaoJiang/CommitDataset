[+++ b/src/main/java/libcore/io/DiskLruCache.java, +import java.io.BufferedInputStream;, +        InputStream in = new BufferedInputStream(new FileInputStream(journalFile));, +            String magic = Streams.readAsciiLine(in);, +            String version = Streams.readAsciiLine(in);, +            String appVersionString = Streams.readAsciiLine(in);, +            String valueCountString = Streams.readAsciiLine(in);, +            String blank = Streams.readAsciiLine(in);, +                    readJournalLine(Streams.readAsciiLine(in));, +            IoUtils.closeQuietly(in);, +++ b/src/main/java/libcore/io/DiskLruCache.java, +import java.io.BufferedInputStream;, +        InputStream in = new BufferedInputStream(new FileInputStream(journalFile));, +            String magic = Streams.readAsciiLine(in);, +            String version = Streams.readAsciiLine(in);, +            String appVersionString = Streams.readAsciiLine(in);, +            String valueCountString = Streams.readAsciiLine(in);, +            String blank = Streams.readAsciiLine(in);, +                    readJournalLine(Streams.readAsciiLine(in));, +            IoUtils.closeQuietly(in);, +++ /dev/null, +++ b/src/main/java/libcore/io/DiskLruCache.java, +import java.io.BufferedInputStream;, +        InputStream in = new BufferedInputStream(new FileInputStream(journalFile));, +            String magic = Streams.readAsciiLine(in);, +            String version = Streams.readAsciiLine(in);, +            String appVersionString = Streams.readAsciiLine(in);, +            String valueCountString = Streams.readAsciiLine(in);, +            String blank = Streams.readAsciiLine(in);, +                    readJournalLine(Streams.readAsciiLine(in));, +            IoUtils.closeQuietly(in);, +++ /dev/null, +++ b/src/main/java/libcore/net/http/HttpResponseCache.java, +            entry = new Entry(new BufferedInputStream(snapshot.getInputStream(ENTRY_METADATA)));, +                uri = Streams.readAsciiLine(in);, +                requestMethod = Streams.readAsciiLine(in);, +                int varyRequestHeaderLineCount = readInt(in);, +                    varyHeaders.addLine(Streams.readAsciiLine(in));, +                responseHeaders.setStatusLine(Streams.readAsciiLine(in));, +                int responseHeaderLineCount = readInt(in);, +                    responseHeaders.addLine(Streams.readAsciiLine(in));, +                    String blank = Streams.readAsciiLine(in);, +                    if (blank.length() != 0) {, +                    cipherSuite = Streams.readAsciiLine(in);, +                    peerCertificates = readCertArray(in);, +                    localCertificates = readCertArray(in);, +        private int readInt(InputStream in) throws IOException {, +            String intString = Streams.readAsciiLine(in);, +            try {, +                return Integer.parseInt(intString);, +            } catch (NumberFormatException e) {, +                throw new IOException("expected an int but was \"" + intString + "\"");, +            }, +        }, +, +        private Certificate[] readCertArray(InputStream in) throws IOException {, +            int length = readInt(in);, +                    String line = Streams.readAsciiLine(in);, +++ b/src/main/java/libcore/io/DiskLruCache.java, +import java.io.BufferedInputStream;, +        InputStream in = new BufferedInputStream(new FileInputStream(journalFile));, +            String magic = Streams.readAsciiLine(in);, +            String version = Streams.readAsciiLine(in);, +            String appVersionString = Streams.readAsciiLine(in);, +            String valueCountString = Streams.readAsciiLine(in);, +            String blank = Streams.readAsciiLine(in);, +                    readJournalLine(Streams.readAsciiLine(in));, +            IoUtils.closeQuietly(in);, +++ /dev/null, +++ b/src/main/java/libcore/net/http/HttpResponseCache.java, +            entry = new Entry(new BufferedInputStream(snapshot.getInputStream(ENTRY_METADATA)));, +                uri = Streams.readAsciiLine(in);, +                requestMethod = Streams.readAsciiLine(in);, +                int varyRequestHeaderLineCount = readInt(in);, +                    varyHeaders.addLine(Streams.readAsciiLine(in));, +                responseHeaders.setStatusLine(Streams.readAsciiLine(in));, +                int responseHeaderLineCount = readInt(in);, +                    responseHeaders.addLine(Streams.readAsciiLine(in));, +                    String blank = Streams.readAsciiLine(in);, +                    if (blank.length() != 0) {, +                    cipherSuite = Streams.readAsciiLine(in);, +                    peerCertificates = readCertArray(in);, +                    localCertificates = readCertArray(in);, +        private int readInt(InputStream in) throws IOException {, +            String intString = Streams.readAsciiLine(in);, +            try {, +                return Integer.parseInt(intString);, +            } catch (NumberFormatException e) {, +                throw new IOException("expected an int but was \"" + intString + "\"");, +            }, +        }, +, +        private Certificate[] readCertArray(InputStream in) throws IOException {, +            int length = readInt(in);, +                    String line = Streams.readAsciiLine(in);, +++ b/src/main/java/libcore/util/Libcore.java, +++ b/src/main/java/libcore/io/DiskLruCache.java, +import java.io.BufferedInputStream;, +        InputStream in = new BufferedInputStream(new FileInputStream(journalFile));, +            String magic = Streams.readAsciiLine(in);]