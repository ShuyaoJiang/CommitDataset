[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.Internal;, +  static {, +    Internal.initializeInstanceForTests();, +  }, +, +      Internal.instance.addLenient(headers, header);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.Internal;, +  static {, +    Internal.initializeInstanceForTests();, +  }, +, +      Internal.instance.addLenient(headers, header);, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +, +  @Test public void etagConditionCanBeNonAscii() throws Exception {, +    server.enqueue(new MockResponse(), +        .addHeaderLenient("Etag", "α"), +        .addHeader("Cache-Control: max-age=0"), +        .setBody("abcd"));, +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +, +    Response response1 = get(server.url("/"));, +    assertEquals("abcd", response1.body().string());, +, +    Response response2 = get(server.url("/"));, +    assertEquals("abcd", response2.body().string());, +, +    assertEquals(null, server.takeRequest().getHeader("If-None-Match"));, +    assertEquals("α", server.takeRequest().getHeader("If-None-Match"));, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.Internal;, +  static {, +    Internal.initializeInstanceForTests();, +  }, +, +      Internal.instance.addLenient(headers, header);, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +, +  @Test public void etagConditionCanBeNonAscii() throws Exception {, +    server.enqueue(new MockResponse(), +        .addHeaderLenient("Etag", "α"), +        .addHeader("Cache-Control: max-age=0"), +        .setBody("abcd"));, +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +, +    Response response1 = get(server.url("/"));, +    assertEquals("abcd", response1.body().string());, +, +    Response response2 = get(server.url("/"));, +    assertEquals("abcd", response2.body().string());, +, +    assertEquals(null, server.takeRequest().getHeader("If-None-Match"));, +    assertEquals("α", server.takeRequest().getHeader("If-None-Match"));, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, +  @Test public void peerHttp2ServerZerosCompressionTable() throws Exception {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.Internal;, +  static {, +    Internal.initializeInstanceForTests();, +  }, +, +      Internal.instance.addLenient(headers, header);, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +, +  @Test public void etagConditionCanBeNonAscii() throws Exception {, +    server.enqueue(new MockResponse(), +        .addHeaderLenient("Etag", "α"), +        .addHeader("Cache-Control: max-age=0"), +        .setBody("abcd"));, +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +, +    Response response1 = get(server.url("/"));, +    assertEquals("abcd", response1.body().string());, +, +    Response response2 = get(server.url("/"));, +    assertEquals("abcd", response2.body().string());, +, +    assertEquals(null, server.takeRequest().getHeader("If-None-Match"));, +    assertEquals("α", server.takeRequest().getHeader("If-None-Match"));, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, +  @Test public void peerHttp2ServerZerosCompressionTable() throws Exception {, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheStrategy.java, +import okhttp3.internal.Internal;, +      // Find a condition to add to the request. If the condition is satisfied, the response body, +      // will not be transmitted., +      String conditionName;, +      String conditionValue;, +        conditionName = "If-None-Match";, +        conditionValue = etag;]