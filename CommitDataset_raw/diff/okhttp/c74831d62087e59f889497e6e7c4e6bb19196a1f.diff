[+++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +  @Test public void spaceInName() throws Exception {, +    assertEquals("a b", Cookie.parse(url, "a b=cd").name());, +  }, +, +  @Test public void spaceInValue() throws Exception {, +    assertEquals("c d", Cookie.parse(url, "ab=c d").value());, +  }, +, +  @Test public void invalidCharacters() throws Exception {, +    assertEquals(null, Cookie.parse(url, "a\u0000b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0000d"));, +    assertEquals(null, Cookie.parse(url, "a\u0001b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0001d"));, +    assertEquals(null, Cookie.parse(url, "a\u0009b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0009d"));, +    assertEquals(null, Cookie.parse(url, "a\u001fb=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u001fd"));, +    assertEquals(null, Cookie.parse(url, "a\u007fb=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u007fd"));, +    assertEquals(null, Cookie.parse(url, "a\u0080b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0080d"));, +    assertEquals(null, Cookie.parse(url, "a\u00ffb=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u00ffd"));, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +  @Test public void spaceInName() throws Exception {, +    assertEquals("a b", Cookie.parse(url, "a b=cd").name());, +  }, +, +  @Test public void spaceInValue() throws Exception {, +    assertEquals("c d", Cookie.parse(url, "ab=c d").value());, +  }, +, +  @Test public void invalidCharacters() throws Exception {, +    assertEquals(null, Cookie.parse(url, "a\u0000b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0000d"));, +    assertEquals(null, Cookie.parse(url, "a\u0001b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0001d"));, +    assertEquals(null, Cookie.parse(url, "a\u0009b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0009d"));, +    assertEquals(null, Cookie.parse(url, "a\u001fb=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u001fd"));, +    assertEquals(null, Cookie.parse(url, "a\u007fb=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u007fd"));, +    assertEquals(null, Cookie.parse(url, "a\u0080b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0080d"));, +    assertEquals(null, Cookie.parse(url, "a\u00ffb=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u00ffd"));, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Call.java, +   * avoid leaking resources callers must {@linkplain ResponseBody close the response body}., +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +  @Test public void spaceInName() throws Exception {, +    assertEquals("a b", Cookie.parse(url, "a b=cd").name());, +  }, +, +  @Test public void spaceInValue() throws Exception {, +    assertEquals("c d", Cookie.parse(url, "ab=c d").value());, +  }, +, +  @Test public void invalidCharacters() throws Exception {, +    assertEquals(null, Cookie.parse(url, "a\u0000b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0000d"));, +    assertEquals(null, Cookie.parse(url, "a\u0001b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0001d"));, +    assertEquals(null, Cookie.parse(url, "a\u0009b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0009d"));, +    assertEquals(null, Cookie.parse(url, "a\u001fb=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u001fd"));, +    assertEquals(null, Cookie.parse(url, "a\u007fb=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u007fd"));, +    assertEquals(null, Cookie.parse(url, "a\u0080b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0080d"));, +    assertEquals(null, Cookie.parse(url, "a\u00ffb=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u00ffd"));, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Call.java, +   * avoid leaking resources callers must {@linkplain ResponseBody close the response body}., +++ b/okhttp/src/main/java/okhttp3/Cookie.java, +import static okhttp3.internal.Util.indexOfControlOrNonAscii;, +    if (cookieName.isEmpty() || indexOfControlOrNonAscii(cookieName) != -1) return null;, +    if (indexOfControlOrNonAscii(cookieValue) != -1) return null;, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +  @Test public void spaceInName() throws Exception {, +    assertEquals("a b", Cookie.parse(url, "a b=cd").name());, +  }, +, +  @Test public void spaceInValue() throws Exception {, +    assertEquals("c d", Cookie.parse(url, "ab=c d").value());, +  }, +, +  @Test public void invalidCharacters() throws Exception {, +    assertEquals(null, Cookie.parse(url, "a\u0000b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0000d"));, +    assertEquals(null, Cookie.parse(url, "a\u0001b=cd"));, +    assertEquals(null, Cookie.parse(url, "ab=c\u0001d"));]