[+++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +            return;, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +            return;, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +            return;, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/RawHeaders.java, +            // Drop headers that are ignored when layering HTTP over SPDY., +            if (name.equals("connection") || name.equals("accept-encoding")) {, +                continue;, +            }, +, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +            return;, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/RawHeaders.java, +            // Drop headers that are ignored when layering HTTP over SPDY., +            if (name.equals("connection") || name.equals("accept-encoding")) {, +                continue;, +            }, +, +++ b/src/main/java/com/squareup/okhttp/internal/net/spdy/SpdyConnection.java, +import java.util.Iterator;, +    private int lastGoodStreamId;, +    private boolean shutdown;, +                if (shutdown) {, +                    throw new IOException("shutdown");, +                }, +    /**, +     * Degrades this connection such that new streams can neither be created, +     * locally, nor accepted from the remote peer. Existing streams are not, +     * impacted. This is intended to permit an endpoint to gracefully stop, +     * accepting new requests without harming previously established streams., +     */, +    public void shutdown() throws IOException {, +        synchronized (spdyWriter) {, +            int lastGoodStreamId;, +            synchronized (this) {, +                shutdown = true;, +                lastGoodStreamId = this.lastGoodStreamId;, +            }, +            spdyWriter.goAway(0, lastGoodStreamId);, +        }, +    }, +, +                if (shutdown) {, +                    return;, +                }, +                lastGoodStreamId = streamId;, +, +        @Override public void goAway(int flags, int lastGoodStreamId) {, +            synchronized (SpdyConnection.this) {, +                shutdown = true;, +, +                // Fail all streams created after the last good stream ID., +                for (Iterator<Map.Entry<Integer, SpdyStream>> i = streams.entrySet().iterator();, +                        i.hasNext();) {, +                    Map.Entry<Integer, SpdyStream> entry = i.next();, +                    int streamId = entry.getKey();, +                    if (streamId > lastGoodStreamId && entry.getValue().isLocallyInitiated()) {, +                        entry.getValue().receiveRstStream(SpdyStream.RST_REFUSED_STREAM);, +                        i.remove();, +                    }, +                }, +            }, +        }, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +            return;, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/RawHeaders.java, +            // Drop headers that are ignored when layering HTTP over SPDY., +            if (name.equals("connection") || name.equals("accept-encoding")) {, +                continue;, +            }, +, +++ b/src/main/java/com/squareup/okhttp/internal/net/spdy/SpdyConnection.java, +import java.util.Iterator;, +    private int lastGoodStreamId;, +    private boolean shutdown;, +                if (shutdown) {, +                    throw new IOException("shutdown");, +                }, +    /**, +     * Degrades this connection such that new streams can neither be created, +     * locally, nor accepted from the remote peer. Existing streams are not, +     * impacted. This is intended to permit an endpoint to gracefully stop, +     * accepting new requests without harming previously established streams., +     */, +    public void shutdown() throws IOException {, +        synchronized (spdyWriter) {, +            int lastGoodStreamId;, +            synchronized (this) {, +                shutdown = true;, +                lastGoodStreamId = this.lastGoodStreamId;, +            }, +            spdyWriter.goAway(0, lastGoodStreamId);, +        }, +    }]