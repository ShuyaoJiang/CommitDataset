[+++ b/README.md, +OkHttp requires Java 7 to build and run tests. Runtime compatibility with Java 6 is enforced as, +part of the build to ensure compliance with Android and older versions of the JVM., +, +, +, +Testing, +-------, +, +++ b/README.md, +OkHttp requires Java 7 to build and run tests. Runtime compatibility with Java 6 is enforced as, +part of the build to ensure compliance with Android and older versions of the JVM., +, +, +, +Testing, +-------, +, +++ b/okcurl/README.md, +OkCurl, +======, +, +_A curl for the next-generation web._, +, +OkCurl is an OkHttp-backed curl clone which allows you to test OkHttp's HTTP engine (including, +SPDY and HTTP/2) against web servers., +++ b/README.md, +OkHttp requires Java 7 to build and run tests. Runtime compatibility with Java 6 is enforced as, +part of the build to ensure compliance with Android and older versions of the JVM., +, +, +, +Testing, +-------, +, +++ b/okcurl/README.md, +OkCurl, +======, +, +_A curl for the next-generation web._, +, +OkCurl is an OkHttp-backed curl clone which allows you to test OkHttp's HTTP engine (including, +SPDY and HTTP/2) against web servers., +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +import com.squareup.okhttp.MediaType;, +  static Main fromArgs(String... args) {, +    return SingleCommand.singleCommand(Main.class).parse(args);, +  }, +, +    fromArgs(args).run();, +  @Option(name = { "-X", "--request" }, description = "Specify request command to use"), +  public String method;, +, +  @Option(name = { "-d", "--data" }, description = "HTTP POST data"), +  public String data;, +    client = createClient();, +    Request request = createRequest();, +  private OkHttpClient createClient() {, +  private String getRequestMethod() {, +    if (method != null) {, +      return method;, +    }, +    if (data != null) {, +      return "POST";, +    }, +    return "GET";, +  }, +, +  private Request.Body getRequestBody() {, +    if (data == null) {, +      return null;, +    }, +    String bodyData = data;, +, +    String mimeType = "application/x-form-urlencoded";, +    if (headers != null) {, +      for (String header : headers) {, +        String[] parts = header.split(":", -1);, +        if ("Content-Type".equalsIgnoreCase(parts[0])) {, +          mimeType = parts[1].trim();, +          headers.remove(header);, +          break;, +        }, +      }, +    }]