[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +      while (in.available() > 0) {, +        int b = in.read() & 0xff;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +      while (in.available() > 0) {, +        int b = in.read() & 0xff;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +  static final byte TYPE_DATA = 0x0;, +  static final byte TYPE_HEADERS = 0x1;, +  static final byte TYPE_PRIORITY = 0x2;, +  static final byte TYPE_RST_STREAM = 0x3;, +  static final byte TYPE_SETTINGS = 0x4;, +  static final byte TYPE_PUSH_PROMISE = 0x5;, +  static final byte TYPE_PING = 0x6;, +  static final byte TYPE_GOAWAY = 0x7;, +  static final byte TYPE_WINDOW_UPDATE = 0x9;, +  static final byte TYPE_CONTINUATION = 0xa;, +  static final byte FLAG_NONE = 0x0;, +  static final byte FLAG_ACK = 0x1;, +  static final byte FLAG_END_STREAM = 0x1;, +  static final byte FLAG_END_HEADERS = 0x4; // Used for headers and continuation., +  static final byte FLAG_END_PUSH_PROMISE = 0x4;, +  static final byte FLAG_PRIORITY = 0x8;, +      this.continuation = new ContinuationInputStream(this.in);, +      Util.readFully(in, connectionHeader);, +        throw ioException("Expected a connection header but was %s",, +            Arrays.toString(connectionHeader));, +, +      // boolean r = (w1 & 0xc0000000) != 0; // Reserved: Ignore first 2 bits., +      short length = (short) ((w1 & 0x3fff0000) >> 16); // 14-bit unsigned == max 16383, +      // boolean r = (w2 & 0x80000000) != 0; // Reserved: Ignore first bit., +      int streamId = (w2 & 0x7fffffff); // 31-bit opaque identifier., +          break;, +          break;, +          break;, +          break;, +          break;, +          break;, +          break;, +          break;, +          break;, +        default:, +          // Implementations MUST ignore frames of unsupported or unrecognized types., +          Util.skipByReading(in, length);, +      }, +      return true;, +      int priority = -1;, +      if ((flags & FLAG_PRIORITY) != 0) {, +        priority = in.readInt() & 0x7fffffff;, +        length -= 4; // account for above read., +      }, +, +      List<Header> headerBlock = readHeaderBlock(length, flags, streamId);, +    private List<Header> readHeaderBlock(short length, byte flags, int streamId), +      continuation.length = continuation.left = length;, +      continuation.flags = flags;, +      length -= 4; // account for above read., +      List<Header> headerBlock = readHeaderBlock(length, flags, streamId);, +      int length = 0;, +      byte type = TYPE_SETTINGS;, +      byte flags = FLAG_ACK;, +      int streamId = 0;, +      frameHeader(length, type, flags, streamId);, +    public synchronized void pushPromise(int streamId, int promisedStreamId,, +        List<Header> requestHeaders), +, +      int length = 4 + hpackBuffer.size();, +      byte type = TYPE_PUSH_PROMISE;, +      byte flags = FLAG_END_HEADERS;, +      frameHeader(length, type, flags, streamId); // TODO: CONTINUATION, +, +      byte type = TYPE_HEADERS;, +      byte flags = FLAG_END_HEADERS;, +      if (priority != -1) length += 4;, +      frameHeader(length, type, flags, streamId); // TODO: CONTINUATION, +, +      byte type = TYPE_RST_STREAM;, +      byte flags = FLAG_NONE;, +      frameHeader(length, type, flags, streamId);, +    @Override public synchronized void data(boolean outFinished, int streamId, byte[] data), +        throws IOException {, +      byte flags = FLAG_NONE;, +      dataFrame(streamId, flags, data, offset, byteCount); // TODO: Implement looping strategy, +    void dataFrame(int streamId, byte flags, byte[] data, int offset, int length), +      byte type = TYPE_DATA;, +      frameHeader(length, type, flags, streamId);, +      out.write(data, offset, length);, +      byte type = TYPE_SETTINGS;, +      byte flags = FLAG_NONE;, +      frameHeader(length, type, flags, streamId);, +      int length = 8;, +      byte type = TYPE_PING;, +      byte flags = ack ? FLAG_ACK : FLAG_NONE;, +      int streamId = 0;, +      frameHeader(length, type, flags, streamId);, +      if (errorCode.httpCode == -1) throw illegalArgument("errorCode.httpCode == -1");, +      byte type = TYPE_GOAWAY;, +      byte flags = FLAG_NONE;, +      int streamId = 0;, +      frameHeader(length, type, flags, streamId);]