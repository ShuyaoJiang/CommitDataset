[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    callback.await(server.url("/a")).assertFailure("Canceled");, +    callback.await(server.url("/")).assertFailure("Canceled");, +    client.dispatcher().setMaxRequests(1); // Force requests to be executed serially., +    callback.await(requestB.url()).assertFailure("Canceled");, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    callback.await(server.url("/a")).assertFailure("Canceled");, +    callback.await(server.url("/")).assertFailure("Canceled");, +    client.dispatcher().setMaxRequests(1); // Force requests to be executed serially., +    callback.await(requestB.url()).assertFailure("Canceled");, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, +import java.util.Collection;, +import java.util.LinkedHashSet;, +import java.util.Set;, +  public static <T> Set<T> setOf(T... elements) {, +    return setOf(Arrays.asList(elements));, +  }, +, +  public static <T> Set<T> setOf(Collection<T> elements) {, +    return new LinkedHashSet<>(elements);, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    callback.await(server.url("/a")).assertFailure("Canceled");, +    callback.await(server.url("/")).assertFailure("Canceled");, +    client.dispatcher().setMaxRequests(1); // Force requests to be executed serially., +    callback.await(requestB.url()).assertFailure("Canceled");, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, +import java.util.Collection;, +import java.util.LinkedHashSet;, +import java.util.Set;, +  public static <T> Set<T> setOf(T... elements) {, +    return setOf(Arrays.asList(elements));, +  }, +, +  public static <T> Set<T> setOf(Collection<T> elements) {, +    return new LinkedHashSet<>(elements);, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +import static okhttp3.internal.huc.OkHttpURLConnection.SELECTED_PROTOCOL;, +  /** Confirm that runtime exceptions thrown inside of OkHttp propagate to the caller. */, +  @Test public void unexpectedExceptionSync() throws Exception {, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .dns(new Dns() {, +          @Override public List<InetAddress> lookup(String hostname) {, +            throw new RuntimeException("boom!");, +          }, +        }), +        .build());, +, +    server.enqueue(new MockResponse());, +, +    HttpURLConnection connection = urlFactory.open(server.url("/").url());, +    try {, +      connection.getResponseCode(); // Use the synchronous implementation., +      fail();, +    } catch (RuntimeException expected) {, +      assertEquals("boom!", expected.getMessage());, +    }, +  }, +, +  /** Confirm that runtime exceptions thrown inside of OkHttp propagate to the caller. */, +  @Test public void unexpectedExceptionAsync() throws Exception {, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .dns(new Dns() {, +          @Override public List<InetAddress> lookup(String hostname) {, +            throw new RuntimeException("boom!");, +          }, +        }), +        .build());, +, +    server.enqueue(new MockResponse());, +, +    HttpURLConnection connection = urlFactory.open(server.url("/").url());, +    try {, +      connection.connect(); // Force the async implementation., +      fail();, +    } catch (RuntimeException expected) {, +      assertEquals("boom!", expected.getMessage());, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    callback.await(server.url("/a")).assertFailure("Canceled");, +    callback.await(server.url("/")).assertFailure("Canceled");, +    client.dispatcher().setMaxRequests(1); // Force requests to be executed serially., +    callback.await(requestB.url()).assertFailure("Canceled");, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, +import java.util.Collection;, +import java.util.LinkedHashSet;, +import java.util.Set;, +  public static <T> Set<T> setOf(T... elements) {, +    return setOf(Arrays.asList(elements));, +  }, +, +  public static <T> Set<T> setOf(Collection<T> elements) {, +    return new LinkedHashSet<>(elements);, +  }, +]