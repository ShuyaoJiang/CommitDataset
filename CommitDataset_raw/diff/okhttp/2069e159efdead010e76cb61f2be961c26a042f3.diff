[+++ b/okhttp-ws-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java, +import okhttp3.RequestBody;, +import static org.junit.Assert.assertTrue;, +    BufferedSink sink = Okio.buffer(serverWriter.newMessageSink(OPCODE_TEXT, -1));, +  @Test public void serverSmallBufferedPayloadWrittenAsOneFrame() throws IOException {, +    int length = 5;, +    byte[] bytes = binaryData(length);, +, +    RequestBody body = RequestBody.create(null, bytes);, +    BufferedSink sink = Okio.buffer(serverWriter.newMessageSink(OPCODE_TEXT, length));, +    body.writeTo(sink);, +    sink.close();, +, +    assertData("8105");, +    assertData(bytes);, +    assertTrue(data.exhausted());, +  }, +, +  @Test public void serverLargeBufferedPayloadWrittenAsOneFrame() throws IOException {, +    int length = 12345;, +    byte[] bytes = binaryData(length);, +, +    RequestBody body = RequestBody.create(null, bytes);, +    BufferedSink sink = Okio.buffer(serverWriter.newMessageSink(OPCODE_TEXT, length));, +    body.writeTo(sink);, +    sink.close();, +, +    assertData("817e");, +    assertData(String.format("%04x", length));, +    assertData(bytes);, +    assertTrue(data.exhausted());, +  }, +, +  @Test public void serverLargeNonBufferedPayloadWrittenAsMultipleFrames() throws IOException {, +    int length = 100_000;, +    Buffer bytes = new Buffer().write(binaryData(length));, +, +    BufferedSink sink = Okio.buffer(serverWriter.newMessageSink(OPCODE_TEXT, length));, +    Buffer body = bytes.clone();, +    sink.write(body.readByteString(20_000));, +    sink.write(body.readByteString(20_000));, +    sink.write(body.readByteString(20_000));, +    sink.write(body.readByteString(20_000));, +    sink.write(body.readByteString(20_000));, +    sink.close();, +, +    assertData("017e4800");, +    assertData(bytes.readByteArray(18_432));, +    assertData("007e5000");, +    assertData(bytes.readByteArray(20_480));, +    assertData("007e5000");, +    assertData(bytes.readByteArray(20_480));, +    assertData("007e5000");, +    assertData(bytes.readByteArray(20_480));, +    assertData("007e4800");, +    assertData(bytes.readByteArray(18_432));, +    assertData("807e06a0");, +    assertData(bytes.readByteArray(1_696));, +    assertTrue(data.exhausted());, +  }, +, +    BufferedSink sink = Okio.buffer(serverWriter.newMessageSink(OPCODE_TEXT, -1));, +    Sink sink = serverWriter.newMessageSink(OPCODE_TEXT, -1);, +    BufferedSink sink = Okio.buffer(clientWriter.newMessageSink(OPCODE_TEXT, -1));, +    BufferedSink sink = Okio.buffer(serverWriter.newMessageSink(OPCODE_BINARY, -1));, +    Sink sink = serverWriter.newMessageSink(OPCODE_BINARY, -1);, +    Sink sink = serverWriter.newMessageSink(OPCODE_BINARY, -1);, +    BufferedSink sink = Okio.buffer(clientWriter.newMessageSink(OPCODE_BINARY, -1));, +    clientWriter.newMessageSink(OPCODE_TEXT, -1);, +      clientWriter.newMessageSink(OPCODE_TEXT, -1);, +++ b/okhttp-ws-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java, +import okhttp3.RequestBody;, +import static org.junit.Assert.assertTrue;, +    BufferedSink sink = Okio.buffer(serverWriter.newMessageSink(OPCODE_TEXT, -1));, +  @Test public void serverSmallBufferedPayloadWrittenAsOneFrame() throws IOException {, +    int length = 5;, +    byte[] bytes = binaryData(length);, +, +    RequestBody body = RequestBody.create(null, bytes);, +    BufferedSink sink = Okio.buffer(serverWriter.newMessageSink(OPCODE_TEXT, length));, +    body.writeTo(sink);, +    sink.close();, +, +    assertData("8105");, +    assertData(bytes);, +    assertTrue(data.exhausted());, +  }, +, +  @Test public void serverLargeBufferedPayloadWrittenAsOneFrame() throws IOException {, +    int length = 12345;, +    byte[] bytes = binaryData(length);, +, +    RequestBody body = RequestBody.create(null, bytes);, +    BufferedSink sink = Okio.buffer(serverWriter.newMessageSink(OPCODE_TEXT, length));, +    body.writeTo(sink);, +    sink.close();, +, +    assertData("817e");, +    assertData(String.format("%04x", length));, +    assertData(bytes);]