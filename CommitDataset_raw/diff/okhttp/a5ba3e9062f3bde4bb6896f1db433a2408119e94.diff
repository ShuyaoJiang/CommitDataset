[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          pushedHeaders.add(new Header(headerParts[0], headerParts[1].trim()));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          pushedHeaders.add(new Header(headerParts[0], headerParts[1].trim()));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ExternalHttp2Example.java, +    URL url = new URL("https://http2.iijplus.jp/push/test1");, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          pushedHeaders.add(new Header(headerParts[0], headerParts[1].trim()));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ExternalHttp2Example.java, +    URL url = new URL("https://http2.iijplus.jp/push/test1");, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +import java.util.ArrayList;, +import java.util.List;, +import okio.BufferedSource;, +    SpdyConnection connection = connection(peer, SPDY3);, +    SpdyConnection connection = connection(peer, SPDY3);, +    SpdyConnection connection = connection(peer, SPDY3);, +    final List<Header> pushHeaders = headerEntries(, +        ":scheme", "https",, +        ":host", "localhost:8888",, +        ":method", "GET",, +        ":path", "/index.html",, +        ":status", "200",, +        ":version", "HTTP/1.1",, +        "content-type", "text/html");, +    peer.sendFrame().synStream(false, false, 2, 0, 5, 129, pushHeaders);, +        assertEquals(pushHeaders, stream.getRequestHeaders());, +, +    connectionBuilder(peer, SPDY3).handler(handler).build();, +    assertEquals(HeadersMode.SPDY_REPLY, reply.headersMode);, +    SpdyStream stream = connection.newStream(headerEntries("a", "android"), false, true);, +    peer.sendFrame().data(true, 41, new OkBuffer().writeUtf8("bogus"));, +    assertEquals(41, rstStream.streamId);, +    peer.sendFrame().synReply(false, 41, headerEntries("a", "android"));, +    assertEquals(41, rstStream.streamId);, +    SpdyConnection connection = connection(peer, SPDY3);, +    SpdyConnection connection = connection(peer, SPDY3);, +    SpdyConnection connection = connection(peer, SPDY3);, +    SpdyConnection connection = connection(peer, SPDY3);, +    SpdyConnection connection = connection(peer, SPDY3);, +    SpdyConnection connection = connection(peer, SPDY3);, +    SpdyConnection connection = connection(peer, SPDY3);, +    SpdyConnection connection = connection(peer, SPDY3);, +    SpdyConnection connection = connection(peer, SPDY3);, +    SpdyConnection connection = connection(peer, SPDY3);, +    SpdyConnection connection = connection(peer, SPDY3);, +    SpdyConnection connection = connection(peer, SPDY3);, +    SpdyConnection connection = connection(peer, SPDY3);, +    SpdyConnection connection = connection(peer, SPDY3);, +    SpdyConnection connection = connection(peer, SPDY3);, +    SpdyConnection connection = connection(peer, SPDY3);, +  @Test public void pushPromiseStream() throws Exception {, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, false);, +, +    // write the mocking script, +    peer.acceptFrame(); // SYN_STREAM, +    peer.sendFrame().synReply(false, 1, headerEntries("a", "android"));, +    final List<Header> expectedRequestHeaders = Arrays.asList(, +        new Header(Header.TARGET_METHOD, "GET"),, +        new Header(Header.TARGET_SCHEME, "https"),, +        new Header(Header.TARGET_AUTHORITY, "squareup.com"),, +        new Header(Header.TARGET_PATH, "/cached"), +    );, +    peer.sendFrame().pushPromise(1, 2, expectedRequestHeaders);, +    final List<Header> expectedResponseHeaders = Arrays.asList(, +        new Header(Header.RESPONSE_STATUS, "200"), +    );, +    peer.sendFrame().synReply(true, 2, expectedResponseHeaders);, +    peer.sendFrame().data(true, 1, data(0));, +    peer.play();, +, +    final List events = new ArrayList();, +    PushObserver observer = new PushObserver() {, +, +      @Override public boolean onRequest(int streamId, List<Header> requestHeaders) {, +        assertEquals(2, streamId);, +        events.add(requestHeaders);, +        return false;, +      }, +, +      @Override public boolean onHeaders(int streamId, List<Header> responseHeaders, boolean last) {, +        assertEquals(2, streamId);, +        assertTrue(last);, +        events.add(responseHeaders);, +        return false;, +      }, +, +      @Override public boolean onData(int streamId, BufferedSource source, int byteCount,, +          boolean last) throws IOException {, +        events.add(new AssertionError("onData"));, +        return false;, +      }, +, +      @Override public void onReset(int streamId, ErrorCode errorCode) {, +        events.add(new AssertionError("onReset"));, +      }, +    };, +]