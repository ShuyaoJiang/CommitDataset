[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +      @Override protected void closeConnection() throws IOException {, +      @Override protected void closeConnection() throws IOException {, +    client.readMessage(); // Detects error, send close., +    client.readMessage();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +      @Override protected void closeConnection() throws IOException {, +      @Override protected void closeConnection() throws IOException {, +    client.readMessage(); // Detects error, send close., +    client.readMessage();, +++ b/okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java, +    boolean closeConnection;, +      closeConnection = readerSentClose;, +    if (closeConnection) {, +      closeConnection();, +      closeConnection();, +    boolean writeCloseResponse;, +      // If the writer has not closed we will close the connection., +      writeCloseResponse = !writerSentClose;, +    if (writeCloseResponse) {, +      if (e instanceof ProtocolException) {, +    }, +      closeConnection();, +  /** Perform any tear-down work on the connection (close the socket, recycle, etc.). */, +  protected abstract void closeConnection() throws IOException;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void closeConnection() throws IOException {, +++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +      @Override protected void closeConnection() throws IOException {, +      @Override protected void closeConnection() throws IOException {, +    client.readMessage(); // Detects error, send close., +    client.readMessage();, +++ b/okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java, +    boolean closeConnection;, +      closeConnection = readerSentClose;, +    if (closeConnection) {, +      closeConnection();, +      closeConnection();, +    boolean writeCloseResponse;, +      // If the writer has not closed we will close the connection., +      writeCloseResponse = !writerSentClose;, +    if (writeCloseResponse) {, +      if (e instanceof ProtocolException) {, +    }, +      closeConnection();, +  /** Perform any tear-down work on the connection (close the socket, recycle, etc.). */, +  protected abstract void closeConnection() throws IOException;, +++ b/okhttp-ws/src/main/java/com/squareup/okhttp/ws/WebSocketCall.java, +import java.util.concurrent.Executor;, +        Random random, Executor replyExecutor, WebSocketListener listener, String url) {, +    @Override protected void closeConnection() throws IOException {]