[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private InetAddress inetAddress;, +    if (inetAddress == null) throw new IllegalStateException("Call start() before getHostName()");, +    return inetAddress.getHostName();, +    if (inetAddress == null) {, +    return new Proxy(Proxy.Type.HTTP, new InetSocketAddress(inetAddress, getPort()));, +   * Starts the server., +    inetAddress = InetAddress.getByName("localhost");, +    serverSocket.setReuseAddress(port != 0); // Reuse the port if the port number was specified., +    serverSocket.bind(new InetSocketAddress(inetAddress, port), 50);, +    this.port = serverSocket.getLocalPort();, +    executor.execute(new NamedRunnable("MockWebServer %s", this.port) {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private InetAddress inetAddress;, +    if (inetAddress == null) throw new IllegalStateException("Call start() before getHostName()");, +    return inetAddress.getHostName();, +    if (inetAddress == null) {, +    return new Proxy(Proxy.Type.HTTP, new InetSocketAddress(inetAddress, getPort()));, +   * Starts the server., +    inetAddress = InetAddress.getByName("localhost");, +    serverSocket.setReuseAddress(port != 0); // Reuse the port if the port number was specified., +    serverSocket.bind(new InetSocketAddress(inetAddress, port), 50);, +    this.port = serverSocket.getLocalPort();, +    executor.execute(new NamedRunnable("MockWebServer %s", this.port) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheControlTest.java, +    assertFalse(cacheControl.isPrivate());, +    assertFalse(cacheControl.isPrivate());, +    String header = "no-cache, no-store, max-age=1, s-maxage=2, private, public, must-revalidate, ", +    assertTrue(cacheControl.isPrivate());, +  @Test public void parseIgnoreCacheControlExtensions() throws Exception {, +    // Example from http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.6, +    String header = "private, community=\"UCI\"";, +    CacheControl cacheControl = CacheControl.parse(new Headers.Builder(), +        .set("Cache-Control", header), +        .build());, +    assertFalse(cacheControl.noCache());, +    assertFalse(cacheControl.noStore());, +    assertEquals(-1, cacheControl.maxAgeSeconds());, +    assertEquals(-1, cacheControl.sMaxAgeSeconds());, +    assertTrue(cacheControl.isPrivate());, +    assertFalse(cacheControl.isPublic());, +    assertFalse(cacheControl.mustRevalidate());, +    assertEquals(-1, cacheControl.maxStaleSeconds());, +    assertEquals(-1, cacheControl.minFreshSeconds());, +    assertFalse(cacheControl.onlyIfCached());, +    assertFalse(cacheControl.noTransform());, +    assertEquals(header, cacheControl.toString());, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private InetAddress inetAddress;, +    if (inetAddress == null) throw new IllegalStateException("Call start() before getHostName()");, +    return inetAddress.getHostName();, +    if (inetAddress == null) {, +    return new Proxy(Proxy.Type.HTTP, new InetSocketAddress(inetAddress, getPort()));, +   * Starts the server., +    inetAddress = InetAddress.getByName("localhost");, +    serverSocket.setReuseAddress(port != 0); // Reuse the port if the port number was specified., +    serverSocket.bind(new InetSocketAddress(inetAddress, port), 50);, +    this.port = serverSocket.getLocalPort();, +    executor.execute(new NamedRunnable("MockWebServer %s", this.port) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheControlTest.java, +    assertFalse(cacheControl.isPrivate());, +    assertFalse(cacheControl.isPrivate());, +    String header = "no-cache, no-store, max-age=1, s-maxage=2, private, public, must-revalidate, ", +    assertTrue(cacheControl.isPrivate());, +  @Test public void parseIgnoreCacheControlExtensions() throws Exception {, +    // Example from http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.6, +    String header = "private, community=\"UCI\"";, +    CacheControl cacheControl = CacheControl.parse(new Headers.Builder(), +        .set("Cache-Control", header), +        .build());, +    assertFalse(cacheControl.noCache());, +    assertFalse(cacheControl.noStore());, +    assertEquals(-1, cacheControl.maxAgeSeconds());, +    assertEquals(-1, cacheControl.sMaxAgeSeconds());, +    assertTrue(cacheControl.isPrivate());, +    assertFalse(cacheControl.isPublic());, +    assertFalse(cacheControl.mustRevalidate());, +    assertEquals(-1, cacheControl.maxStaleSeconds());, +    assertEquals(-1, cacheControl.minFreshSeconds());, +    assertFalse(cacheControl.onlyIfCached());, +    assertFalse(cacheControl.noTransform());, +    assertEquals(header, cacheControl.toString());, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/CacheControl.java, +  private final boolean isPrivate;, +      boolean isPrivate, boolean isPublic, boolean mustRevalidate, int maxStaleSeconds,, +      int minFreshSeconds, boolean onlyIfCached, boolean noTransform, String headerValue) {, +    this.isPrivate = isPrivate;, +    this.isPrivate = false;, +  public boolean isPrivate() {, +    return isPrivate;, +  }, +, +    boolean isPrivate = false;, +        } else if ("private".equalsIgnoreCase(directive)) {, +          isPrivate = true;, +    return new CacheControl(noCache, noStore, maxAgeSeconds, sMaxAgeSeconds, isPrivate, isPublic,]