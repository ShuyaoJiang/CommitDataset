[+++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString(buffer.size()).toByteArray(),, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString(buffer.size()).toByteArray(),, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +    return buffer.readByteString(buffer.size()).hex();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString(buffer.size()).toByteArray(),, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +    return buffer.readByteString(buffer.size()).hex();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDraft05Test.java, +    ByteString actual = bytesOut.readByteString(bytesOut.size());, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString(buffer.size()).toByteArray(),, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +    return buffer.readByteString(buffer.size()).hex();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDraft05Test.java, +    ByteString actual = bytesOut.readByteString(bytesOut.size());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java, +    byte[] outBytes = bytesOut.readByteString(bytesOut.size()).toByteArray();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString(buffer.size()).toByteArray(),, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +    return buffer.readByteString(buffer.size()).hex();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDraft05Test.java, +    ByteString actual = bytesOut.readByteString(bytesOut.size());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java, +    byte[] outBytes = bytesOut.readByteString(bytesOut.size()).toByteArray();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +    String actual = buffer.readUtf8(buffer.size());, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString(buffer.size()).toByteArray(),, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +    return buffer.readByteString(buffer.size()).hex();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDraft05Test.java, +    ByteString actual = bytesOut.readByteString(bytesOut.size());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java, +    byte[] outBytes = bytesOut.readByteString(bytesOut.size()).toByteArray();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +    String actual = buffer.readUtf8(buffer.size());, +++ b/okio/src/main/java/okio/BufferedSource.java, +  ByteString readByteString(long byteCount) throws IOException;, +  String readUtf8(long byteCount) throws IOException;, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString(buffer.size()).toByteArray(),, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +    return buffer.readByteString(buffer.size()).hex();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDraft05Test.java, +    ByteString actual = bytesOut.readByteString(bytesOut.size());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java, +    byte[] outBytes = bytesOut.readByteString(bytesOut.size()).toByteArray();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +    String actual = buffer.readUtf8(buffer.size());, +++ b/okio/src/main/java/okio/BufferedSource.java, +  ByteString readByteString(long byteCount) throws IOException;, +  String readUtf8(long byteCount) throws IOException;, +++ b/okio/src/main/java/okio/OkBuffer.java, +  public ByteString readByteString(long byteCount) {, +  public String readUtf8(long byteCount) {, +    if (byteCount > Integer.MAX_VALUE) {, +      throw new IllegalArgumentException("byteCount > Integer.MAX_VALUE: " + byteCount);, +    }, +    String result = new String(head.data, head.pos, (int) byteCount, UTF_8);, +      return size != 0 ? readUtf8(size) : null;, +      String result = readUtf8((newline - 1));, +      String result = readUtf8(newline);, +  private byte[] readBytes(long byteCount) {, +    if (byteCount > Integer.MAX_VALUE) {, +      throw new IllegalArgumentException("byteCount > Integer.MAX_VALUE: " + byteCount);, +    }, +    byte[] result = new byte[(int) byteCount];, +      int toCopy = (int) Math.min(byteCount - offset, head.limit - head.pos);, +      ByteString data = clone().readByteString(size);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString(buffer.size()).toByteArray(),, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +    return buffer.readByteString(buffer.size()).hex();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDraft05Test.java, +    ByteString actual = bytesOut.readByteString(bytesOut.size());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java, +    byte[] outBytes = bytesOut.readByteString(bytesOut.size()).toByteArray();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +    String actual = buffer.readUtf8(buffer.size());, +++ b/okio/src/main/java/okio/BufferedSource.java, +  ByteString readByteString(long byteCount) throws IOException;, +  String readUtf8(long byteCount) throws IOException;, +++ b/okio/src/main/java/okio/OkBuffer.java, +  public ByteString readByteString(long byteCount) {, +  public String readUtf8(long byteCount) {, +    if (byteCount > Integer.MAX_VALUE) {, +      throw new IllegalArgumentException("byteCount > Integer.MAX_VALUE: " + byteCount);, +    }, +    String result = new String(head.data, head.pos, (int) byteCount, UTF_8);, +      return size != 0 ? readUtf8(size) : null;, +      String result = readUtf8((newline - 1));, +      String result = readUtf8(newline);, +  private byte[] readBytes(long byteCount) {, +    if (byteCount > Integer.MAX_VALUE) {, +      throw new IllegalArgumentException("byteCount > Integer.MAX_VALUE: " + byteCount);, +    }]