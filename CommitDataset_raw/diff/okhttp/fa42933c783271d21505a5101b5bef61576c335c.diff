[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Test public void http10SelectedProtocol() throws Exception {, +    server.enqueue(new MockResponse().setStatus("HTTP/1.0 200 OK"));, +    server.play();, +    connection = client.open(server.getUrl("/"));, +    List<String> protocolValues = connection.getHeaderFields().get(SELECTED_PROTOCOL);, +    assertEquals(Arrays.asList("http/1.0"), protocolValues);, +  }, +, +  @Test public void http11SelectedProtocol() throws Exception {, +    server.enqueue(new MockResponse().setStatus("HTTP/1.1 200 OK"));, +    server.play();, +    connection = client.open(server.getUrl("/"));, +    List<String> protocolValues = connection.getHeaderFields().get(SELECTED_PROTOCOL);, +    assertEquals(Arrays.asList("http/1.1"), protocolValues);, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Test public void http10SelectedProtocol() throws Exception {, +    server.enqueue(new MockResponse().setStatus("HTTP/1.0 200 OK"));, +    server.play();, +    connection = client.open(server.getUrl("/"));, +    List<String> protocolValues = connection.getHeaderFields().get(SELECTED_PROTOCOL);, +    assertEquals(Arrays.asList("http/1.0"), protocolValues);, +  }, +, +  @Test public void http11SelectedProtocol() throws Exception {, +    server.enqueue(new MockResponse().setStatus("HTTP/1.1 200 OK"));, +    server.play();, +    connection = client.open(server.getUrl("/"));, +    List<String> protocolValues = connection.getHeaderFields().get(SELECTED_PROTOCOL);, +    assertEquals(Arrays.asList("http/1.1"), protocolValues);, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +   * non-null list that contains minimally {@link Protocol#HTTP_1_1}., +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Test public void http10SelectedProtocol() throws Exception {, +    server.enqueue(new MockResponse().setStatus("HTTP/1.0 200 OK"));, +    server.play();, +    connection = client.open(server.getUrl("/"));, +    List<String> protocolValues = connection.getHeaderFields().get(SELECTED_PROTOCOL);, +    assertEquals(Arrays.asList("http/1.0"), protocolValues);, +  }, +, +  @Test public void http11SelectedProtocol() throws Exception {, +    server.enqueue(new MockResponse().setStatus("HTTP/1.1 200 OK"));, +    server.play();, +    connection = client.open(server.getUrl("/"));, +    List<String> protocolValues = connection.getHeaderFields().get(SELECTED_PROTOCOL);, +    assertEquals(Arrays.asList("http/1.1"), protocolValues);, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +   * non-null list that contains minimally {@link Protocol#HTTP_1_1}., +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    if (selectedProtocol == Protocol.SPDY_3 || selectedProtocol == Protocol.HTTP_2) {, +    } else {, +      httpConnection = new HttpConnection(pool, this, socket, readTimeout, writeTimeout);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Test public void http10SelectedProtocol() throws Exception {, +    server.enqueue(new MockResponse().setStatus("HTTP/1.0 200 OK"));, +    server.play();, +    connection = client.open(server.getUrl("/"));, +    List<String> protocolValues = connection.getHeaderFields().get(SELECTED_PROTOCOL);, +    assertEquals(Arrays.asList("http/1.0"), protocolValues);, +  }, +, +  @Test public void http11SelectedProtocol() throws Exception {, +    server.enqueue(new MockResponse().setStatus("HTTP/1.1 200 OK"));, +    server.play();, +    connection = client.open(server.getUrl("/"));, +    List<String> protocolValues = connection.getHeaderFields().get(SELECTED_PROTOCOL);, +    assertEquals(Arrays.asList("http/1.1"), protocolValues);, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +   * non-null list that contains minimally {@link Protocol#HTTP_1_1}., +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    if (selectedProtocol == Protocol.SPDY_3 || selectedProtocol == Protocol.HTTP_2) {, +    } else {, +      httpConnection = new HttpConnection(pool, this, socket, readTimeout, writeTimeout);, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +   *     must contain {@link Protocol#HTTP_1_1}. It must not contain null., +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Test public void http10SelectedProtocol() throws Exception {, +    server.enqueue(new MockResponse().setStatus("HTTP/1.0 200 OK"));, +    server.play();, +    connection = client.open(server.getUrl("/"));, +    List<String> protocolValues = connection.getHeaderFields().get(SELECTED_PROTOCOL);, +    assertEquals(Arrays.asList("http/1.0"), protocolValues);, +  }, +, +  @Test public void http11SelectedProtocol() throws Exception {, +    server.enqueue(new MockResponse().setStatus("HTTP/1.1 200 OK"));, +    server.play();, +    connection = client.open(server.getUrl("/"));, +    List<String> protocolValues = connection.getHeaderFields().get(SELECTED_PROTOCOL);, +    assertEquals(Arrays.asList("http/1.1"), protocolValues);, +  }]