[+++ b/okhttp-tests/src/test/java/okhttp3/internal/cache2/FileOperatorTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.cache2;, +, +import java.io.File;, +import java.io.IOException;, +import java.io.RandomAccessFile;, +import java.util.Random;, +import okio.Buffer;, +import okio.BufferedSink;, +import okio.BufferedSource;, +import okio.ByteString;, +import okio.Okio;, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.TemporaryFolder;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +, +public final class FileOperatorTest {, +  @Rule public final TemporaryFolder tempDir = new TemporaryFolder();, +, +  private File file;, +  private RandomAccessFile randomAccessFile;, +, +  @Before public void setUp() throws Exception {, +    file = tempDir.newFile();, +    randomAccessFile = new RandomAccessFile(file, "rw");, +  }, +, +  @After public void tearDown() throws Exception {, +    randomAccessFile.close();, +  }, +, +  @Test public void read() throws Exception {, +    write(ByteString.encodeUtf8("Hello, World"));, +, +    FileOperator operator = new FileOperator(randomAccessFile.getChannel());, +, +    Buffer buffer = new Buffer();, +    operator.read(0, buffer, 5);, +    assertEquals("Hello", buffer.readUtf8());, +, +    operator.read(4, buffer, 5);, +    assertEquals("o, Wo", buffer.readUtf8());, +  }, +, +  @Test public void write() throws Exception {, +    FileOperator operator = new FileOperator(randomAccessFile.getChannel());, +, +    Buffer buffer1 = new Buffer().writeUtf8("Hello, World");, +    operator.write(0, buffer1, 5);, +    assertEquals(", World", buffer1.readUtf8());, +, +    Buffer buffer2 = new Buffer().writeUtf8("icopter!");, +    operator.write(3, buffer2, 7);, +    assertEquals("!", buffer2.readUtf8());, +, +    assertEquals(ByteString.encodeUtf8("Helicopter"), snapshot());, +  }, +, +  @Test public void readAndWrite() throws Exception {, +    FileOperator operator = new FileOperator(randomAccessFile.getChannel());, +, +    write(ByteString.encodeUtf8("woman god creates dinosaurs destroys. "));, +    Buffer buffer = new Buffer();, +    operator.read(6, buffer, 21);, +    operator.read(36, buffer, 1);, +    operator.read(5, buffer, 5);, +    operator.read(28, buffer, 8);, +    operator.read(17, buffer, 10);, +    operator.read(36, buffer, 2);, +    operator.read(2, buffer, 4);, +    operator.write(0, buffer, buffer.size());, +    operator.read(0, buffer, 12);, +    operator.read(47, buffer, 3);, +    operator.read(45, buffer, 2);, +    operator.read(47, buffer, 3);, +    operator.read(26, buffer, 10);, +    operator.read(23, buffer, 3);, +    operator.write(47, buffer, buffer.size());, +    operator.read(62, buffer, 6);, +    operator.read(4, buffer, 19);]