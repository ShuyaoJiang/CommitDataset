[+++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java, +          // All of these suites are available on Android 5.0; earlier releases support a subset of, +, +          // Note that the following cipher suites are all on HTTP/2's bad cipher suites list. We'll, +          // continue to include them until better suites are commonly available. For example, none, +          // of the better cipher suites listed above shipped with Android 4.4 or Java 7., +          CipherSuite.TLS_RSA_WITH_3DES_EDE_CBC_SHA, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java, +          // All of these suites are available on Android 5.0; earlier releases support a subset of, +, +          // Note that the following cipher suites are all on HTTP/2's bad cipher suites list. We'll, +          // continue to include them until better suites are commonly available. For example, none, +          // of the better cipher suites listed above shipped with Android 4.4 or Java 7., +          CipherSuite.TLS_RSA_WITH_3DES_EDE_CBC_SHA, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java, + * Access to Platform-specific features necessary for SPDY and advanced TLS., + * This includes Server Name Indication (SNI) and session tickets., + * <h3>ALPN</h3>, + * This class uses TLS extension ALPN to negotiate the upgrade from HTTP/1.1, + * (the default protocol to use with TLS on port 443) to either SPDY or HTTP/2., + * <p>ALPN (Application Layer Protocol Negotiation) first arrived in Android 4.4,, + * ALPN is supported on OpenJDK 7 and 8 (via the Jetty ALPN-boot library)., +      } catch (ClassNotFoundException ignored) {, +      // Attempt to find Android 4.0+ APIs., +      } catch (NoSuchMethodException ignored) {, +      return new Android(trafficStatsTagSocket, trafficStatsUntagSocket);, +    try { // to find the Jetty's ALPN extension for OpenJDK., +    } catch (ClassNotFoundException ignored) {, +    } catch (NoSuchMethodException ignored) { // The ALPN version isn't what we expect., +  /**, +   * Android 2.3 or better. Version 2.3 supports TLS session tickets and server, +   * name indication (SNI). Versions 4.4 supports ALPN., +   */, +, +    // setUseSessionTickets(boolean), +    private static final OptionalMethod<Socket> SET_USE_SESSION_TICKETS =, +        new OptionalMethod<Socket>(null, "setUseSessionTickets", Boolean.TYPE);, +    // setHostname(String), +    private static final OptionalMethod<Socket> SET_HOSTNAME =, +        new OptionalMethod<Socket>(null, "setHostname", String.class);, +    // byte[] getAlpnSelectedProtocol(), +    private static final OptionalMethod<Socket> GET_ALPN_SELECTED_PROTOCOL =, +        new OptionalMethod<Socket>(byte[].class, "getAlpnSelectedProtocol");, +    // setAlpnSelectedProtocol(byte[]), +    private static final OptionalMethod<Socket> SET_ALPN_PROTOCOLS =, +        new OptionalMethod<Socket>(null, "setAlpnProtocols", byte[].class);, +    private Android(Method trafficStatsTagSocket, Method trafficStatsUntagSocket) {, +        SET_USE_SESSION_TICKETS.invokeOptionalWithoutCheckedException(sslSocket, true);, +        SET_HOSTNAME.invokeOptionalWithoutCheckedException(sslSocket, hostname);, +      boolean alpnSupported = SET_ALPN_PROTOCOLS.isSupported(sslSocket);, +      if (!alpnSupported) {, +        return;, +, +      Object[] parameters = { concatLengthPrefixed(protocols) };, +      SET_ALPN_PROTOCOLS.invokeWithoutCheckedException(sslSocket, parameters);, +      boolean alpnSupported = GET_ALPN_SELECTED_PROTOCOL.isSupported(socket);, +      if (!alpnSupported) {, +        return null;, +      }, +      byte[] alpnResult =, +          (byte[]) GET_ALPN_SELECTED_PROTOCOL.invokeWithoutCheckedException(socket);, +      if (alpnResult != null) {, +        return new String(alpnResult, Util.UTF_8);, +      }, +      return null;, +      } catch (InvocationTargetException e) {, +        throw new AssertionError(e);, +      } catch (IllegalAccessException e) {, +      } catch (IllegalAccessException ignored) {, +        throw new AssertionError();, +      } catch (InvocationTargetException ignored) {, +      } catch (InvocationTargetException e) {, +        throw new AssertionError();, +      } catch (IllegalAccessException e) {]