[+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import static okhttp3.TestUtil.defaultClient;, +    client = defaultClient().newBuilder(), +    // Ensure that the (shared) connection pool is in a consistent state., +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().idleConnectionCount());, +, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import static okhttp3.TestUtil.defaultClient;, +    client = defaultClient().newBuilder(), +    // Ensure that the (shared) connection pool is in a consistent state., +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().idleConnectionCount());, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    OkHttpClient c = defaultClient().newBuilder(), +    client = defaultClient().newBuilder(), +    client = defaultClient().newBuilder(), +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import static okhttp3.TestUtil.defaultClient;, +    client = defaultClient().newBuilder(), +    // Ensure that the (shared) connection pool is in a consistent state., +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().idleConnectionCount());, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    OkHttpClient c = defaultClient().newBuilder(), +    client = defaultClient().newBuilder(), +    client = defaultClient().newBuilder(), +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import java.io.Closeable;, +import java.util.concurrent.atomic.AtomicReference;, +   * <p>This test leaks a response body by not closing it., +   *, +    Call call = client.newCall(request);, +      call.execute();, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import static okhttp3.TestUtil.defaultClient;, +    client = defaultClient().newBuilder(), +    // Ensure that the (shared) connection pool is in a consistent state., +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().idleConnectionCount());, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    OkHttpClient c = defaultClient().newBuilder(), +    client = defaultClient().newBuilder(), +    client = defaultClient().newBuilder(), +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import java.io.Closeable;, +import java.util.concurrent.atomic.AtomicReference;, +   * <p>This test leaks a response body by not closing it., +   *, +    Call call = client.newCall(request);, +      call.execute();, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +import static okhttp3.TestUtil.defaultClient;, +  OkHttpClient client = defaultClient().newBuilder(), +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import static okhttp3.TestUtil.defaultClient;, +    client = defaultClient().newBuilder(), +    // Ensure that the (shared) connection pool is in a consistent state., +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().idleConnectionCount());, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    OkHttpClient c = defaultClient().newBuilder(), +    client = defaultClient().newBuilder(), +    client = defaultClient().newBuilder(), +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import java.io.Closeable;, +import java.util.concurrent.atomic.AtomicReference;, +   * <p>This test leaks a response body by not closing it., +   *, +    Call call = client.newCall(request);, +      call.execute();, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +import static okhttp3.TestUtil.defaultClient;, +  OkHttpClient client = defaultClient().newBuilder(), +++ b/okhttp-tests/src/test/java/okhttp3/SocksProxyTest.java, +import static okhttp3.TestUtil.defaultClient;, +    OkHttpClient client = defaultClient().newBuilder(), +    OkHttpClient client = defaultClient().newBuilder(), +    OkHttpClient client = defaultClient().newBuilder(), +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import static okhttp3.TestUtil.defaultClient;, +    client = defaultClient().newBuilder(), +    // Ensure that the (shared) connection pool is in a consistent state., +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().idleConnectionCount());, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    OkHttpClient c = defaultClient().newBuilder(), +    client = defaultClient().newBuilder(), +    client = defaultClient().newBuilder(), +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import java.io.Closeable;, +import java.util.concurrent.atomic.AtomicReference;, +   * <p>This test leaks a response body by not closing it., +   *, +    Call call = client.newCall(request);]