[+++ /dev/null, +++ /dev/null, +++ b/okio/src/main/java/okio/ByteString.java, +import java.io.EOFException;, +import java.security.MessageDigest;, +import java.security.NoSuchAlgorithmException;, +  /** A singleton empty {@code ByteString}. */, +  public static final ByteString EMPTY = ByteString.of();, +, +  ByteString(byte[] data) {, +    this.data = data; // Trusted internal constructor doesn't clone data., +  }, +  public static ByteString read(InputStream in, int byteCount) throws IOException {, +    byte[] result = new byte[byteCount];, +    for (int offset = 0, read; offset < byteCount; offset += read) {, +      read = in.read(result, offset, byteCount - offset);, +      if (read == -1) throw new EOFException();, +    }, +, +  @Override public String toString() {, +    if (data.length == 0) {, +      return "ByteString[size=0]";, +    }, +, +    if (data.length <= 16) {, +      return String.format("ByteString[size=%s data=%s]", data.length, hex());, +    }, +, +    try {, +      return String.format("ByteString[size=%s md5=%s]", data.length,, +          ByteString.of(MessageDigest.getInstance("MD5").digest(data)).hex());, +    } catch (NoSuchAlgorithmException e) {, +      throw new AssertionError();, +    }, +  }, +++ /dev/null, +++ b/okio/src/main/java/okio/ByteString.java, +import java.io.EOFException;, +import java.security.MessageDigest;, +import java.security.NoSuchAlgorithmException;, +  /** A singleton empty {@code ByteString}. */, +  public static final ByteString EMPTY = ByteString.of();, +, +  ByteString(byte[] data) {, +    this.data = data; // Trusted internal constructor doesn't clone data., +  }, +  public static ByteString read(InputStream in, int byteCount) throws IOException {, +    byte[] result = new byte[byteCount];, +    for (int offset = 0, read; offset < byteCount; offset += read) {, +      read = in.read(result, offset, byteCount - offset);, +      if (read == -1) throw new EOFException();, +    }, +, +  @Override public String toString() {, +    if (data.length == 0) {, +      return "ByteString[size=0]";, +    }, +, +    if (data.length <= 16) {, +      return String.format("ByteString[size=%s data=%s]", data.length, hex());, +    }, +, +    try {, +      return String.format("ByteString[size=%s md5=%s]", data.length,, +          ByteString.of(MessageDigest.getInstance("MD5").digest(data)).hex());, +    } catch (NoSuchAlgorithmException e) {, +      throw new AssertionError();, +    }, +  }, +++ b/okio/src/main/java/okio/OkBuffer.java, +  @Override public boolean equals(Object o) {, +    if (!(o instanceof OkBuffer)) return false;, +    OkBuffer that = (OkBuffer) o;, +    if (byteCount != that.byteCount) return false;, +    if (byteCount == 0) return true; // Both buffers are empty., +, +    Segment sa = this.head;, +    Segment sb = that.head;, +    int posA = sa.pos;, +    int posB = sb.pos;, +, +    for (long pos = 0, count; pos < byteCount; pos += count) {, +      count = Math.min(sa.limit - posA, sb.limit - posB);, +, +      for (int i = 0; i < count; i++) {, +        if (sa.data[posA++] != sb.data[posB++]) return false;, +      }, +, +      if (posA == sa.limit) {, +        sa = sa.next;, +        posA = sa.pos;, +      }, +, +      if (posB == sb.limit) {, +        sb = sb.next;, +        posB = sb.pos;, +      }, +    }, +, +    return true;]