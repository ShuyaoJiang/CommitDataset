[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import java.io.ByteArrayOutputStream;, +import java.io.OutputStream;, +import java.util.zip.GZIPOutputStream;, +    server.play();, +    byte[] body = new byte[bodyByteCount];, +    random.nextBytes(body);, +      body = gzip(body);, +      result.setChunkedBody(new Buffer().write(body), 1024);, +, +  /** Returns a gzipped copy of {@code bytes}. */, +  private byte[] gzip(byte[] bytes) throws IOException {, +    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();, +    OutputStream gzippedOut = new GZIPOutputStream(bytesOut);, +    gzippedOut.write(bytes);, +    gzippedOut.close();, +    return bytesOut.toByteArray();, +  }, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import java.io.ByteArrayOutputStream;, +import java.io.OutputStream;, +import java.util.zip.GZIPOutputStream;, +    server.play();, +    byte[] body = new byte[bodyByteCount];, +    random.nextBytes(body);, +      body = gzip(body);, +      result.setChunkedBody(new Buffer().write(body), 1024);, +, +  /** Returns a gzipped copy of {@code bytes}. */, +  private byte[] gzip(byte[] bytes) throws IOException {, +    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();, +    OutputStream gzippedOut = new GZIPOutputStream(bytesOut);, +    gzippedOut.write(bytes);, +    gzippedOut.close();, +    return bytesOut.toByteArray();, +  }, +++ b/mockwebserver/README.md, +  server.play();, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import java.io.ByteArrayOutputStream;, +import java.io.OutputStream;, +import java.util.zip.GZIPOutputStream;, +    server.play();, +    byte[] body = new byte[bodyByteCount];, +    random.nextBytes(body);, +      body = gzip(body);, +      result.setChunkedBody(new Buffer().write(body), 1024);, +, +  /** Returns a gzipped copy of {@code bytes}. */, +  private byte[] gzip(byte[] bytes) throws IOException {, +    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();, +    OutputStream gzippedOut = new GZIPOutputStream(bytesOut);, +    gzippedOut.write(bytes);, +    gzippedOut.close();, +    return bytesOut.toByteArray();, +  }, +++ b/mockwebserver/README.md, +  server.play();, +++ b/mockwebserver/pom.xml, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import java.io.ByteArrayOutputStream;, +import java.io.OutputStream;, +import java.util.zip.GZIPOutputStream;, +    server.play();, +    byte[] body = new byte[bodyByteCount];, +    random.nextBytes(body);, +      body = gzip(body);, +      result.setChunkedBody(new Buffer().write(body), 1024);, +, +  /** Returns a gzipped copy of {@code bytes}. */, +  private byte[] gzip(byte[] bytes) throws IOException {, +    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();, +    OutputStream gzippedOut = new GZIPOutputStream(bytesOut);, +    gzippedOut.write(bytes);, +    gzippedOut.close();, +    return bytesOut.toByteArray();, +  }, +++ b/mockwebserver/README.md, +  server.play();, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java, +, +  /** @deprecated replaced with {@link #peek}. */, +  protected final SocketPolicy peekSocketPolicy() {, +    throw new UnsupportedOperationException("This API is obsolete. Override peek() instead!");, +  }, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import java.io.ByteArrayOutputStream;, +import java.io.OutputStream;, +import java.util.zip.GZIPOutputStream;, +    server.play();, +    byte[] body = new byte[bodyByteCount];, +    random.nextBytes(body);, +      body = gzip(body);, +      result.setChunkedBody(new Buffer().write(body), 1024);, +, +  /** Returns a gzipped copy of {@code bytes}. */, +  private byte[] gzip(byte[] bytes) throws IOException {, +    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();, +    OutputStream gzippedOut = new GZIPOutputStream(bytesOut);]