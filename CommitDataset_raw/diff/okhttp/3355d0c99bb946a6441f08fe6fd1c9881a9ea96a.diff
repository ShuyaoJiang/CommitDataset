[+++ b/src/main/java/libcore/net/Dns.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package libcore.net;, +, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +, +/**, + * Domain name service. Prefer this over {@link InetAddress#getAllByName} to, + * make code more testable., + */, +public interface Dns {, +    Dns DEFAULT = new Dns() {, +        @Override public InetAddress[] getAllByName(String host) throws UnknownHostException {, +            return InetAddress.getAllByName(host);, +        }, +    };, +, +    InetAddress[] getAllByName(String host) throws UnknownHostException;, +}, +++ b/src/main/java/libcore/net/Dns.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package libcore.net;, +, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +, +/**, + * Domain name service. Prefer this over {@link InetAddress#getAllByName} to, + * make code more testable., + */, +public interface Dns {, +    Dns DEFAULT = new Dns() {, +        @Override public InetAddress[] getAllByName(String host) throws UnknownHostException {, +            return InetAddress.getAllByName(host);, +        }, +    };, +, +    InetAddress[] getAllByName(String host) throws UnknownHostException;, +}, +++ b/src/main/java/libcore/net/http/HttpConnection.java, +    /** First try a TLS connection with various extensions enabled. */, +    public static final int TLS_MODE_AGGRESSIVE = 1;, +, +    /**, +     * If that TLS connection fails (and its not unheard of that it will), +     * fall back to a basic SSLv3 connection., +     */, +    public static final int TLS_MODE_COMPATIBLE = 0;, +, +    /**, +     * Unknown TLS mode., +     */, +    public static final int TLS_MODE_NULL = -1;, +, +    final Address address;, +    final Proxy proxy;, +    final InetSocketAddress inetSocketAddress;, +    final int tlsMode;, +, +    HttpConnection(Address address, Proxy proxy, InetSocketAddress inetSocketAddress, int tlsMode) {, +        if (address == null || proxy == null || inetSocketAddress == null) {, +            throw new IllegalArgumentException();, +        }, +        this.address = address;, +        this.proxy = proxy;, +        this.inetSocketAddress = inetSocketAddress;, +        this.tlsMode = tlsMode;, +    public void connect(int connectTimeout, int readTimeout, TunnelConfig tunnelConfig), +            throws IOException {, +        socket = (proxy.type() != Proxy.Type.HTTP), +                ? new Socket(proxy)]