[+++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/Http20Draft09Test.java, +    OkBuffer frame = new OkBuffer();, +    frame.writeShort(4); // has a 4-byte field, +    frame.writeByte(99); // type 99, +    frame.writeByte(0); // no flags, +    frame.writeInt(expectedStreamId);, +    frame.writeInt(111111111); // custom data, +    FrameReader fr = new Http20Draft09.Reader(frame, 4096, false);, +    OkBuffer frame = new OkBuffer();, +      OkBuffer headerBytes = literalHeaders(sentHeaders);, +      frame.writeShort((int) headerBytes.byteCount());, +      frame.writeByte(Http20Draft09.TYPE_HEADERS);, +      frame.writeByte(Http20Draft09.FLAG_END_HEADERS | Http20Draft09.FLAG_END_STREAM);, +      frame.writeInt(expectedStreamId & 0x7fffffff);, +      frame.write(headerBytes, headerBytes.byteCount());, +    FrameReader fr = new Http20Draft09.Reader(frame, 4096, false);, +    OkBuffer frame = new OkBuffer();, +      OkBuffer headerBytes = literalHeaders(sentHeaders);, +      frame.writeShort((int) (headerBytes.byteCount() + 4));, +      frame.writeByte(Http20Draft09.TYPE_HEADERS);, +      frame.writeByte(Http20Draft09.FLAG_END_HEADERS | Http20Draft09.FLAG_PRIORITY);, +      frame.writeInt(expectedStreamId & 0x7fffffff);, +      frame.writeInt(0); // Highest priority is 0., +      frame.write(headerBytes, headerBytes.byteCount());, +    FrameReader fr = new Http20Draft09.Reader(frame, 4096, false);, +    OkBuffer frame = new OkBuffer();, +    OkBuffer headerBlock = literalHeaders(headerEntries("foo", "barrr", "baz", "qux"));, +      frame.writeShort((int) (headerBlock.byteCount() / 2));, +      frame.writeByte(Http20Draft09.TYPE_HEADERS);, +      frame.writeByte(0); // no flags, +      frame.writeInt(expectedStreamId & 0x7fffffff);, +      frame.write(headerBlock, headerBlock.byteCount() / 2);, +      frame.writeShort((int) headerBlock.byteCount());, +      frame.writeByte(Http20Draft09.TYPE_CONTINUATION);, +      frame.writeByte(Http20Draft09.FLAG_END_HEADERS);, +      frame.writeInt(expectedStreamId & 0x7fffffff);, +      frame.write(headerBlock, headerBlock.byteCount());, +    FrameReader fr = new Http20Draft09.Reader(frame, 4096, false);, +    OkBuffer frame = new OkBuffer();, +      OkBuffer headerBytes = literalHeaders(pushPromise);, +      frame.writeShort((int) (headerBytes.byteCount() + 4));, +      frame.writeByte(Http20Draft09.TYPE_PUSH_PROMISE);, +      frame.writeByte(Http20Draft09.FLAG_END_PUSH_PROMISE);, +      frame.writeInt(expectedStreamId & 0x7fffffff);, +      frame.writeInt(expectedPromisedStreamId & 0x7fffffff);, +      frame.write(headerBytes, headerBytes.byteCount());, +    FrameReader fr = new Http20Draft09.Reader(frame, 4096, false);, +    OkBuffer frame = new OkBuffer();, +    OkBuffer headerBlock = literalHeaders(pushPromise);, +    int firstFrameLength = (int) (headerBlock.byteCount() - 1);, +      frame.writeShort(firstFrameLength + 4);, +      frame.writeByte(Http20Draft09.TYPE_PUSH_PROMISE);, +      frame.writeByte(0); // no flags, +      frame.writeInt(expectedStreamId & 0x7fffffff);, +      frame.writeInt(expectedPromisedStreamId & 0x7fffffff);, +      frame.write(headerBlock, firstFrameLength);, +      frame.writeShort(1);, +      frame.writeByte(Http20Draft09.TYPE_CONTINUATION);, +      frame.writeByte(Http20Draft09.FLAG_END_HEADERS);, +      frame.writeInt(expectedStreamId & 0x7fffffff);, +      frame.write(headerBlock, 1);, +    FrameReader fr = new Http20Draft09.Reader(frame, 4096, false);, +    OkBuffer frame = new OkBuffer();, +    frame.writeShort(4);, +    frame.writeByte(Http20Draft09.TYPE_RST_STREAM);, +    frame.writeByte(0); // No flags, +    frame.writeInt(expectedStreamId & 0x7fffffff);, +    frame.writeInt(ErrorCode.COMPRESSION_ERROR.httpCode);, +    FrameReader fr = new Http20Draft09.Reader(frame, 4096, false);, +    OkBuffer frame = new OkBuffer();, +    frame.writeShort(16); // 2 settings * 4 bytes for the code and 4 for the value., +    frame.writeByte(Http20Draft09.TYPE_SETTINGS);, +    frame.writeByte(0); // No flags, +    frame.writeInt(0 & 0x7fffffff); // Settings are always on the connection stream 0., +    frame.writeInt(Settings.HEADER_TABLE_SIZE & 0xffffff);, +    frame.writeInt(reducedTableSizeBytes);, +    frame.writeInt(Settings.ENABLE_PUSH & 0xffffff);, +    frame.writeInt(0);, +    final Http20Draft09.Reader fr = new Http20Draft09.Reader(frame, 4096, false);, +    OkBuffer frame = new OkBuffer();, +    frame.writeShort(8); // length, +    frame.writeByte(Http20Draft09.TYPE_PING);, +    frame.writeByte(Http20Draft09.FLAG_ACK);, +    frame.writeInt(0); // connection-level, +    frame.writeInt(expectedPayload1);, +    frame.writeInt(expectedPayload2);, +    assertEquals(frame, sendPingFrame(true, expectedPayload1, expectedPayload2));, +    FrameReader fr = new Http20Draft09.Reader(frame, 4096, false);, +    OkBuffer frame = new OkBuffer();, +    frame.writeShort(expectedData.length);, +    frame.writeByte(Http20Draft09.TYPE_DATA);, +    frame.writeByte(0); // no flags, +    frame.writeInt(expectedStreamId & 0x7fffffff);, +    frame.write(expectedData);, +    assertEquals(frame, sendDataFrame(new OkBuffer().write(expectedData)));, +    FrameReader fr = new Http20Draft09.Reader(frame, 4096, false);, +    OkBuffer frame = new OkBuffer();, +    frame.writeShort(4); // length, +    frame.writeByte(Http20Draft09.TYPE_WINDOW_UPDATE);, +    frame.writeByte(0); // No flags.]