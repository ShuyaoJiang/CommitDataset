[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SettingsTest.java, +    assertEquals(-1, settings.getInitialWindowSize());, +    assertEquals(108, settings.getInitialWindowSize());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SettingsTest.java, +    assertEquals(-1, settings.getInitialWindowSize());, +    assertEquals(108, settings.getInitialWindowSize());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +import static com.squareup.okhttp.internal.spdy.SpdyConnection.INITIAL_WINDOW_SIZE;, +    assertEquals(3368, connection.peerSettings.getInitialWindowSize());, +    int windowUpdateThreshold = INITIAL_WINDOW_SIZE / 2;, +    connection.okHttpSettings.set(Settings.INITIAL_WINDOW_SIZE, 0, INITIAL_WINDOW_SIZE);, +    int framesThatFillWindow = roundUp(INITIAL_WINDOW_SIZE, HTTP_20_DRAFT_09.maxFrameSize());, +    out.write(new byte[INITIAL_WINDOW_SIZE]);, +    int framesThatFillWindow = roundUp(INITIAL_WINDOW_SIZE, HTTP_20_DRAFT_09.maxFrameSize());, +    out.write(new byte[INITIAL_WINDOW_SIZE]);, +    initial.set(Settings.INITIAL_WINDOW_SIZE, PERSIST_VALUE, INITIAL_WINDOW_SIZE + 1);, +    next.set(Settings.INITIAL_WINDOW_SIZE, PERSIST_VALUE, INITIAL_WINDOW_SIZE + 2);, +    int framesThatFillWindow = roundUp(INITIAL_WINDOW_SIZE, SPDY3.maxFrameSize());, +    out1.write(new byte[INITIAL_WINDOW_SIZE]);, +    assertEquals(INITIAL_WINDOW_SIZE - 3, connection.getStream(3).bytesLeftInWriteWindow);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SettingsTest.java, +    assertEquals(-1, settings.getInitialWindowSize());, +    assertEquals(108, settings.getInitialWindowSize());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +import static com.squareup.okhttp.internal.spdy.SpdyConnection.INITIAL_WINDOW_SIZE;, +    assertEquals(3368, connection.peerSettings.getInitialWindowSize());, +    int windowUpdateThreshold = INITIAL_WINDOW_SIZE / 2;, +    connection.okHttpSettings.set(Settings.INITIAL_WINDOW_SIZE, 0, INITIAL_WINDOW_SIZE);, +    int framesThatFillWindow = roundUp(INITIAL_WINDOW_SIZE, HTTP_20_DRAFT_09.maxFrameSize());, +    out.write(new byte[INITIAL_WINDOW_SIZE]);, +    int framesThatFillWindow = roundUp(INITIAL_WINDOW_SIZE, HTTP_20_DRAFT_09.maxFrameSize());, +    out.write(new byte[INITIAL_WINDOW_SIZE]);, +    initial.set(Settings.INITIAL_WINDOW_SIZE, PERSIST_VALUE, INITIAL_WINDOW_SIZE + 1);, +    next.set(Settings.INITIAL_WINDOW_SIZE, PERSIST_VALUE, INITIAL_WINDOW_SIZE + 2);, +    int framesThatFillWindow = roundUp(INITIAL_WINDOW_SIZE, SPDY3.maxFrameSize());, +    out1.write(new byte[INITIAL_WINDOW_SIZE]);, +    assertEquals(INITIAL_WINDOW_SIZE - 3, connection.getStream(3).bytesLeftInWriteWindow);, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +        url = source.readUtf8Line(true);, +        requestMethod = source.readUtf8Line(true);, +          varyHeadersBuilder.addLine(source.readUtf8Line(true));, +        statusLine = source.readUtf8Line(true);, +          responseHeadersBuilder.addLine(source.readUtf8Line(true));, +          String blank = source.readUtf8Line(true);, +          String cipherSuite = source.readUtf8Line(true);, +          String line = source.readUtf8Line(true);, +    String line = source.readUtf8Line(true);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SettingsTest.java, +    assertEquals(-1, settings.getInitialWindowSize());, +    assertEquals(108, settings.getInitialWindowSize());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +import static com.squareup.okhttp.internal.spdy.SpdyConnection.INITIAL_WINDOW_SIZE;, +    assertEquals(3368, connection.peerSettings.getInitialWindowSize());, +    int windowUpdateThreshold = INITIAL_WINDOW_SIZE / 2;, +    connection.okHttpSettings.set(Settings.INITIAL_WINDOW_SIZE, 0, INITIAL_WINDOW_SIZE);, +    int framesThatFillWindow = roundUp(INITIAL_WINDOW_SIZE, HTTP_20_DRAFT_09.maxFrameSize());, +    out.write(new byte[INITIAL_WINDOW_SIZE]);, +    int framesThatFillWindow = roundUp(INITIAL_WINDOW_SIZE, HTTP_20_DRAFT_09.maxFrameSize());, +    out.write(new byte[INITIAL_WINDOW_SIZE]);, +    initial.set(Settings.INITIAL_WINDOW_SIZE, PERSIST_VALUE, INITIAL_WINDOW_SIZE + 1);, +    next.set(Settings.INITIAL_WINDOW_SIZE, PERSIST_VALUE, INITIAL_WINDOW_SIZE + 2);, +    int framesThatFillWindow = roundUp(INITIAL_WINDOW_SIZE, SPDY3.maxFrameSize());, +    out1.write(new byte[INITIAL_WINDOW_SIZE]);, +    assertEquals(INITIAL_WINDOW_SIZE - 3, connection.getStream(3).bytesLeftInWriteWindow);, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +        url = source.readUtf8Line(true);, +        requestMethod = source.readUtf8Line(true);, +          varyHeadersBuilder.addLine(source.readUtf8Line(true));, +        statusLine = source.readUtf8Line(true);, +          responseHeadersBuilder.addLine(source.readUtf8Line(true));, +          String blank = source.readUtf8Line(true);, +          String cipherSuite = source.readUtf8Line(true);, +          String line = source.readUtf8Line(true);, +    String line = source.readUtf8Line(true);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/DiskLruCache.java, +      String magic = source.readUtf8Line(true);, +      String version = source.readUtf8Line(true);, +      String appVersionString = source.readUtf8Line(true);, +      String valueCountString = source.readUtf8Line(true);, +      String blank = source.readUtf8Line(true);, +          readJournalLine(source.readUtf8Line(true));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SettingsTest.java, +    assertEquals(-1, settings.getInitialWindowSize());, +    assertEquals(108, settings.getInitialWindowSize());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +import static com.squareup.okhttp.internal.spdy.SpdyConnection.INITIAL_WINDOW_SIZE;, +    assertEquals(3368, connection.peerSettings.getInitialWindowSize());, +    int windowUpdateThreshold = INITIAL_WINDOW_SIZE / 2;, +    connection.okHttpSettings.set(Settings.INITIAL_WINDOW_SIZE, 0, INITIAL_WINDOW_SIZE);, +    int framesThatFillWindow = roundUp(INITIAL_WINDOW_SIZE, HTTP_20_DRAFT_09.maxFrameSize());, +    out.write(new byte[INITIAL_WINDOW_SIZE]);, +    int framesThatFillWindow = roundUp(INITIAL_WINDOW_SIZE, HTTP_20_DRAFT_09.maxFrameSize());, +    out.write(new byte[INITIAL_WINDOW_SIZE]);, +    initial.set(Settings.INITIAL_WINDOW_SIZE, PERSIST_VALUE, INITIAL_WINDOW_SIZE + 1);, +    next.set(Settings.INITIAL_WINDOW_SIZE, PERSIST_VALUE, INITIAL_WINDOW_SIZE + 2);, +    int framesThatFillWindow = roundUp(INITIAL_WINDOW_SIZE, SPDY3.maxFrameSize());, +    out1.write(new byte[INITIAL_WINDOW_SIZE]);, +    assertEquals(INITIAL_WINDOW_SIZE - 3, connection.getStream(3).bytesLeftInWriteWindow);, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +        url = source.readUtf8Line(true);]