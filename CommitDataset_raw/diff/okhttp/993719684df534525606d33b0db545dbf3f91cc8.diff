[+++ b/CHANGELOG.md, +, +++ b/CHANGELOG.md, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          SpdySocketHandler spdySocketHandler = new SpdySocketHandler(socket);, +          SpdyConnection spdyConnection = new SpdyConnection.Builder(false, socket), +              .handler(spdySocketHandler), +              .build();, +    HTTP_11, SPDY_3, +++ b/CHANGELOG.md, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          SpdySocketHandler spdySocketHandler = new SpdySocketHandler(socket);, +          SpdyConnection spdyConnection = new SpdyConnection.Builder(false, socket), +              .handler(spdySocketHandler), +              .build();, +    HTTP_11, SPDY_3, +++ /dev/null, +++ b/CHANGELOG.md, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          SpdySocketHandler spdySocketHandler = new SpdySocketHandler(socket);, +          SpdyConnection spdyConnection = new SpdyConnection.Builder(false, socket), +              .handler(spdySocketHandler), +              .build();, +    HTTP_11, SPDY_3, +++ /dev/null, +++ /dev/null, +++ b/CHANGELOG.md, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          SpdySocketHandler spdySocketHandler = new SpdySocketHandler(socket);, +          SpdyConnection spdyConnection = new SpdyConnection.Builder(false, socket), +              .handler(spdySocketHandler), +              .build();, +    HTTP_11, SPDY_3, +++ /dev/null, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +    spdyReader = new SpdyReader(builder.in);, +    spdyWriter = new SpdyWriter(builder.out);, +  /** Writes a complete data frame. */, +    synchronized (spdyWriter) {, +      spdyWriter.out.write(bytes, offset, length);, +    }, +    synchronized (spdyWriter) {, +      spdyWriter.out.flush();, +    }, +    public boolean client;, +++ b/CHANGELOG.md, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          SpdySocketHandler spdySocketHandler = new SpdySocketHandler(socket);, +          SpdyConnection spdyConnection = new SpdyConnection.Builder(false, socket), +              .handler(spdySocketHandler), +              .build();, +    HTTP_11, SPDY_3, +++ /dev/null, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +    spdyReader = new SpdyReader(builder.in);, +    spdyWriter = new SpdyWriter(builder.out);, +  /** Writes a complete data frame. */, +    synchronized (spdyWriter) {, +      spdyWriter.out.write(bytes, offset, length);, +    }, +    synchronized (spdyWriter) {, +      spdyWriter.out.flush();, +    }, +    public boolean client;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyReader.java, +import com.squareup.okhttp.internal.Util;, +import java.io.DataInputStream;, +import java.io.UnsupportedEncodingException;, +import java.net.ProtocolException;, +import java.util.ArrayList;, +import java.util.logging.Logger;, +import java.util.zip.DataFormatException;, +import java.util.zip.Inflater;, +import java.util.zip.InflaterInputStream;, +/** Read spdy/3 frames. */, +final class SpdyReader implements Closeable {, +  static final byte[] DICTIONARY;, +  static {, +    try {, +      DICTIONARY = ("\u0000\u0000\u0000\u0007options\u0000\u0000\u0000\u0004hea", +          + "d\u0000\u0000\u0000\u0004post\u0000\u0000\u0000\u0003put\u0000\u0000\u0000\u0006dele", +          + "te\u0000\u0000\u0000\u0005trace\u0000\u0000\u0000\u0006accept\u0000\u0000\u0000", +          + "\u000Eaccept-charset\u0000\u0000\u0000\u000Faccept-encoding\u0000\u0000\u0000\u000Fa", +          + "ccept-language\u0000\u0000\u0000\raccept-ranges\u0000\u0000\u0000\u0003age\u0000", +          + "\u0000\u0000\u0005allow\u0000\u0000\u0000\rauthorization\u0000\u0000\u0000\rcache-co", +          + "ntrol\u0000\u0000\u0000\nconnection\u0000\u0000\u0000\fcontent-base\u0000\u0000", +          + "\u0000\u0010content-encoding\u0000\u0000\u0000\u0010content-language\u0000\u0000", +          + "\u0000\u000Econtent-length\u0000\u0000\u0000\u0010content-location\u0000\u0000\u0000", +          + "\u000Bcontent-md5\u0000\u0000\u0000\rcontent-range\u0000\u0000\u0000\fcontent-type", +          + "\u0000\u0000\u0000\u0004date\u0000\u0000\u0000\u0004etag\u0000\u0000\u0000\u0006expe", +          + "ct\u0000\u0000\u0000\u0007expires\u0000\u0000\u0000\u0004from\u0000\u0000\u0000", +          + "\u0004host\u0000\u0000\u0000\bif-match\u0000\u0000\u0000\u0011if-modified-since", +          + "\u0000\u0000\u0000\rif-none-match\u0000\u0000\u0000\bif-range\u0000\u0000\u0000"]