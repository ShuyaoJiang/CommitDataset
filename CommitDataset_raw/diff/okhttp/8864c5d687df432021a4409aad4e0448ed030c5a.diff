[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +        .header("Host", "square.com"), +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +        .header("Host", "square.com"), +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +  /** https://github.com/square/okhttp/issues/3103 */, +  @Test public void domainFronting() throws Exception {, +    client = client.newBuilder(), +        .addNetworkInterceptor(new Interceptor() {, +          @Override public Response intercept(Chain chain) throws IOException {, +            Request request = chain.request().newBuilder(), +                .header("Host", "privateobject.com"), +                .build();, +            return chain.proceed(request);, +          }, +        }), +        .build();, +, +    server.enqueue(new MockResponse());, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +, +    Response response = call.execute();, +    assertEquals("", response.body().string());, +, +    RecordedRequest recordedRequest = server.takeRequest();, +    assertEquals("privateobject.com", recordedRequest.getHeader(":authority"));, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +        .header("Host", "square.com"), +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +  /** https://github.com/square/okhttp/issues/3103 */, +  @Test public void domainFronting() throws Exception {, +    client = client.newBuilder(), +        .addNetworkInterceptor(new Interceptor() {, +          @Override public Response intercept(Chain chain) throws IOException {, +            Request request = chain.request().newBuilder(), +                .header("Host", "privateobject.com"), +                .build();, +            return chain.proceed(request);, +          }, +        }), +        .build();, +, +    server.enqueue(new MockResponse());, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +, +    Response response = call.execute();, +    assertEquals("", response.body().string());, +, +    RecordedRequest recordedRequest = server.takeRequest();, +    assertEquals("privateobject.com", recordedRequest.getHeader(":authority"));, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java, +    String host = request.header("Host");, +    if (host != null) {, +      result.add(new Header(TARGET_AUTHORITY, host)); // Optional., +    }]