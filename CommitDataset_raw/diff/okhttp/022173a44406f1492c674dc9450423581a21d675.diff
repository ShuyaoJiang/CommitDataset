[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      server.setProtocols(protocols);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      server.setProtocols(protocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().setProtocols(sslSocket, spdyProtocols);, +    String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      server.setProtocols(protocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().setProtocols(sslSocket, spdyProtocols);, +    String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +   * When {@link MockWebServer#setProtocols(java.util.List) protocols}, +   * include {@linkplain com.squareup.okhttp.Protocol#HTTP_2}, this attaches a, +   * pushed stream to this response., +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      server.setProtocols(protocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().setProtocols(sslSocket, spdyProtocols);, +    String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +   * When {@link MockWebServer#setProtocols(java.util.List) protocols}, +   * include {@linkplain com.squareup.okhttp.Protocol#HTTP_2}, this attaches a, +   * pushed stream to this response., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private boolean protocolNegotiationEnabled = true;, +   * @deprecated Use {@link #setProtocolNegotiationEnabled}., +    this.protocolNegotiationEnabled = npnEnabled;, +  }, +, +  /**, +   * Sets whether ALPN or NPN is used on incoming HTTPS connections to, +   * negotiate a protocol like HTTP/1.1 or HTTP/2. Call this method to disable, +   * negotiation and restrict connections to HTTP/1.1., +   */, +  public void setProtocolNegotiationEnabled(boolean protocolNegotiationEnabled) {, +    this.protocolNegotiationEnabled = protocolNegotiationEnabled;, +   * @deprecated Use {@link #setProtocols(java.util.List)}., +    setProtocols(protocols);, +  }, +, +  /**, +   * Indicates the protocols supported by NPN or ALPN on incoming HTTPS, +   * connections. This list is ignored when, +   * {@link #setProtocolNegotiationEnabled negotiation is disabled}., +   *, +   * @param protocols the protocols to use, in order of preference. The list, +   *     must contain {@linkplain Protocol#HTTP_1_1}. It must not contain null., +   */, +  public void setProtocols(List<Protocol> protocols) {, +    this.npnProtocols = protocols;, +          if (protocolNegotiationEnabled) {, +            Platform.get().setProtocols(sslSocket, npnProtocols);, +          if (protocolNegotiationEnabled) {, +            String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      server.setProtocols(protocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().setProtocols(sslSocket, spdyProtocols);, +    String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +   * When {@link MockWebServer#setProtocols(java.util.List) protocols}, +   * include {@linkplain com.squareup.okhttp.Protocol#HTTP_2}, this attaches a, +   * pushed stream to this response., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private boolean protocolNegotiationEnabled = true;, +   * @deprecated Use {@link #setProtocolNegotiationEnabled}., +    this.protocolNegotiationEnabled = npnEnabled;, +  }, +, +  /**, +   * Sets whether ALPN or NPN is used on incoming HTTPS connections to, +   * negotiate a protocol like HTTP/1.1 or HTTP/2. Call this method to disable, +   * negotiation and restrict connections to HTTP/1.1., +   */, +  public void setProtocolNegotiationEnabled(boolean protocolNegotiationEnabled) {, +    this.protocolNegotiationEnabled = protocolNegotiationEnabled;, +   * @deprecated Use {@link #setProtocols(java.util.List)}., +    setProtocols(protocols);, +  }, +, +  /**, +   * Indicates the protocols supported by NPN or ALPN on incoming HTTPS, +   * connections. This list is ignored when, +   * {@link #setProtocolNegotiationEnabled negotiation is disabled}., +   *, +   * @param protocols the protocols to use, in order of preference. The list, +   *     must contain {@linkplain Protocol#HTTP_1_1}. It must not contain null., +   */, +  public void setProtocols(List<Protocol> protocols) {, +    this.npnProtocols = protocols;, +          if (protocolNegotiationEnabled) {, +            Platform.get().setProtocols(sslSocket, npnProtocols);, +          if (protocolNegotiationEnabled) {, +            String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    server.setProtocols(client.getProtocols());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      server.setProtocols(protocols);]