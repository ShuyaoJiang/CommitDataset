[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +  @Test public void newBuilderResolve() throws Exception {, +    // Non-exhaustive tests because implementation is the same as resolve., +    HttpUrl base = HttpUrl.parse("http://host/a/b");, +    assertEquals(HttpUrl.parse("https://host2/"), base.newBuilder("https://host2").build());, +    assertEquals(HttpUrl.parse("http://host2/"), base.newBuilder("//host2").build());, +    assertEquals(HttpUrl.parse("http://host/path"), base.newBuilder("/path").build());, +    assertEquals(HttpUrl.parse("http://host/a/path"), base.newBuilder("path").build());, +    assertEquals(HttpUrl.parse("http://host/a/b?query"), base.newBuilder("?query").build());, +    assertEquals(HttpUrl.parse("http://host/a/b#fragment"), base.newBuilder("#fragment").build());, +    assertEquals(HttpUrl.parse("http://host/a/b"), base.newBuilder("").build());, +    assertEquals(null, base.newBuilder("ftp://b"));, +    assertEquals(null, base.newBuilder("ht+tp://b"));, +    assertEquals(null, base.newBuilder("ht-tp://b"));, +    assertEquals(null, base.newBuilder("ht.tp://b"));, +  }, +, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +  @Test public void newBuilderResolve() throws Exception {, +    // Non-exhaustive tests because implementation is the same as resolve., +    HttpUrl base = HttpUrl.parse("http://host/a/b");, +    assertEquals(HttpUrl.parse("https://host2/"), base.newBuilder("https://host2").build());, +    assertEquals(HttpUrl.parse("http://host2/"), base.newBuilder("//host2").build());, +    assertEquals(HttpUrl.parse("http://host/path"), base.newBuilder("/path").build());, +    assertEquals(HttpUrl.parse("http://host/a/path"), base.newBuilder("path").build());, +    assertEquals(HttpUrl.parse("http://host/a/b?query"), base.newBuilder("?query").build());, +    assertEquals(HttpUrl.parse("http://host/a/b#fragment"), base.newBuilder("#fragment").build());, +    assertEquals(HttpUrl.parse("http://host/a/b"), base.newBuilder("").build());, +    assertEquals(null, base.newBuilder("ftp://b"));, +    assertEquals(null, base.newBuilder("ht+tp://b"));, +    assertEquals(null, base.newBuilder("ht-tp://b"));, +    assertEquals(null, base.newBuilder("ht.tp://b"));, +  }, +, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +  @Test public void newBuilderResolve() throws Exception {, +    // Non-exhaustive tests because implementation is the same as resolve., +    HttpUrl base = HttpUrl.parse("http://host/a/b");, +    assertEquals(HttpUrl.parse("https://host2/"), base.newBuilder("https://host2").build());, +    assertEquals(HttpUrl.parse("http://host2/"), base.newBuilder("//host2").build());, +    assertEquals(HttpUrl.parse("http://host/path"), base.newBuilder("/path").build());, +    assertEquals(HttpUrl.parse("http://host/a/path"), base.newBuilder("path").build());, +    assertEquals(HttpUrl.parse("http://host/a/b?query"), base.newBuilder("?query").build());, +    assertEquals(HttpUrl.parse("http://host/a/b#fragment"), base.newBuilder("#fragment").build());, +    assertEquals(HttpUrl.parse("http://host/a/b"), base.newBuilder("").build());, +    assertEquals(null, base.newBuilder("ftp://b"));, +    assertEquals(null, base.newBuilder("ht+tp://b"));, +    assertEquals(null, base.newBuilder("ht-tp://b"));, +    assertEquals(null, base.newBuilder("ht.tp://b"));, +  }, +, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, +      int segmentEnd = delimiterOffset(url, i, pathEnd, "/");, +    int queryEnd = delimiterOffset(url, queryStart + 1, url.length(), "#");, +  /**, +   * Returns the URL that would be retrieved by following {@code link} from this URL, or null if, +   * the resulting URL is not well-formed., +   */, +    Builder builder = newBuilder(link);, +    return builder != null ? builder.build() : null;, +   * Returns a builder for the URL that would be retrieved by following {@code link} from this URL,, +   * or null if the resulting URL is not well-formed., +   */, +  public Builder newBuilder(String link) {, +    Builder builder = new Builder();, +    Builder.ParseResult result = builder.parse(this, link);, +    return result == Builder.ParseResult.SUCCESS ? builder : null;, +  }, +, +  /**, +                    input, pos, componentDelimiterOffset, ":");, +        int queryDelimiterOffset = delimiterOffset(input, pos, limit, "#");, +     * Increments {@code pos} until {@code input[pos]} is not ASCII whitespace. Stops at {@code, +     * limit}., +     */, +    private int skipLeadingAsciiWhitespace(String input, int pos, int limit) {, +      for (int i = pos; i < limit; i++) {, +        switch (input.charAt(i)) {, +          case '\t':, +          case '\n':, +          case '\f':, +          case '\r':, +          case ' ':, +            continue;, +          default:, +            return i;, +        }, +      }, +      return limit;, +    }, +, +    /**, +     * Decrements {@code limit} until {@code input[limit - 1]} is not ASCII whitespace. Stops at, +     * {@code pos}.]