[+++ b/src/main/java/com/squareup/okhttp/Connection.java, +    private long idleStartTimeNs;, +     * Returns true if this connection is alive., +    public boolean isAlive() {, +        return !socket.isClosed() && !socket.isInputShutdown() && !socket.isOutputShutdown();, +    public void resetIdleStartTime() {, +        if (spdyConnection != null) {, +            throw new IllegalStateException("spdyConnection != null");, +        }, +        this.idleStartTimeNs = System.nanoTime();, +     * Returns true if this connection is idle., +    public boolean isIdle() {, +        return spdyConnection == null || spdyConnection.isIdle();, +    }, +, +    /**, +     * Returns true if this connection has been idle for longer than, +     * {@code keepAliveDurationNs}., +     */, +    public boolean isExpired(long keepAliveDurationNs) {, +        return isIdle() && System.nanoTime() - getIdleStartTimeNs() > keepAliveDurationNs;, +    }, +, +    /**, +     * Returns the time in ns when this connection became idle. Undefined if, +     * this connection is not idle., +     */, +    public long getIdleStartTimeNs() {, +        return spdyConnection == null ? idleStartTimeNs : spdyConnection.getIdleStartTimeNs();, +    public SpdyConnection getSpdyConnection() {, +       return spdyConnection;, +    }, +, +++ b/src/main/java/com/squareup/okhttp/Connection.java, +    private long idleStartTimeNs;, +     * Returns true if this connection is alive., +    public boolean isAlive() {, +        return !socket.isClosed() && !socket.isInputShutdown() && !socket.isOutputShutdown();, +    public void resetIdleStartTime() {, +        if (spdyConnection != null) {, +            throw new IllegalStateException("spdyConnection != null");, +        }, +        this.idleStartTimeNs = System.nanoTime();, +     * Returns true if this connection is idle., +    public boolean isIdle() {, +        return spdyConnection == null || spdyConnection.isIdle();, +    }, +, +    /**, +     * Returns true if this connection has been idle for longer than, +     * {@code keepAliveDurationNs}., +     */, +    public boolean isExpired(long keepAliveDurationNs) {, +        return isIdle() && System.nanoTime() - getIdleStartTimeNs() > keepAliveDurationNs;, +    }, +, +    /**, +     * Returns the time in ns when this connection became idle. Undefined if, +     * this connection is not idle., +     */, +    public long getIdleStartTimeNs() {, +        return spdyConnection == null ? idleStartTimeNs : spdyConnection.getIdleStartTimeNs();, +    public SpdyConnection getSpdyConnection() {, +       return spdyConnection;, +    }, +, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +import java.util.Iterator;, +import java.util.LinkedList;, +import java.util.concurrent.Callable;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.LinkedBlockingQueue;, +import java.util.concurrent.ThreadPoolExecutor;, +import java.util.concurrent.TimeUnit;, + * Manages reuse of HTTP and SPDY connections for reduced network latency. HTTP requests that share, + * the same {@link com.squareup.okhttp.Address} may share a {@link com.squareup.okhttp.Connection}., + * This class implements the policy of which connections to keep open for future use., + * <p>The {@link #getDefault() system-wide default} uses system properties for tuning parameters:, + * <li>{@code http.keepAlive} true if HTTP and SPDY connections should be pooled at all., + * Default is true., + * <li>{@code http.keepAliveDuration} Time in milliseconds to keep the connection alive in the pool, + * before closing it. Default is 20000., + * <li>{@code http.maxConnections} maximum number of idle connections to each to keep in the pool., + * Default is 5., + * <p>The default instance <i>doesn't</i> adjust its configuration as system properties are changed., + * This assumes that the applications that set these parameters do so before making HTTP, + * connections, and that this class is initialized lazily., +public class ConnectionPool {, +  private static final int MAX_CONNECTIONS_TO_CLEANUP = 2;, +  private static final long DEFAULT_KEEP_ALIVE_DURATION_MS = 5 * 60 * 1000; // 5 min, +, +, +    String keepAliveDuration = System.getProperty("http.keepAliveDuration");, +    String maxIdleConnections = System.getProperty("http.maxConnections");, +    long keepAliveDurationMs = keepAliveDuration != null ? Long.parseLong(keepAliveDuration), +        : DEFAULT_KEEP_ALIVE_DURATION_MS;, +      systemDefault = new ConnectionPool(0, keepAliveDurationMs);, +    } else if (maxIdleConnections != null) {, +      systemDefault = new ConnectionPool(Integer.parseInt(maxIdleConnections), keepAliveDurationMs);, +      systemDefault = new ConnectionPool(5, keepAliveDurationMs);]