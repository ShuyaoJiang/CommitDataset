[+++ b/src/main/java/libcore/net/http/HttpEngine.java, +            RawHeaders rawResponseHeaders, +                    = RawHeaders.fromMultimap(cacheResponse.getHeaders(), true);, +                requestHeaders.getHeaders().toMultimap(false));, +        RawHeaders rawResponseHeaders = RawHeaders.fromMultimap(responseHeadersMap, true);, +            requestHeaders.getHeaders().setRequestLine(getRequestLine());, +        requestHeaders.getHeaders().setRequestLine(getRequestLine());, +                    cookieHandler.get(uri, requestHeaders.getHeaders().toMultimap(false)));, +++ b/src/main/java/libcore/net/http/HttpEngine.java, +            RawHeaders rawResponseHeaders, +                    = RawHeaders.fromMultimap(cacheResponse.getHeaders(), true);, +                requestHeaders.getHeaders().toMultimap(false));, +        RawHeaders rawResponseHeaders = RawHeaders.fromMultimap(responseHeadersMap, true);, +            requestHeaders.getHeaders().setRequestLine(getRequestLine());, +        requestHeaders.getHeaders().setRequestLine(getRequestLine());, +                    cookieHandler.get(uri, requestHeaders.getHeaders().toMultimap(false)));, +++ b/src/main/java/libcore/net/http/HttpResponseCache.java, +    @Override public void update(CacheResponse conditionalCacheHit, OkHttpConnection httpConnection), +            throws IOException {, +        public Entry(URI uri, RawHeaders varyHeaders, OkHttpConnection httpConnection), +                throws IOException {, +            this.responseHeaders = RawHeaders.fromMultimap(httpConnection.getHeaderFields(), true);, +                            .varyMatches(varyHeaders.toMultimap(false), requestHeaders);, +            return entry.responseHeaders.toMultimap(true);, +            return entry.responseHeaders.toMultimap(true);, +++ b/src/main/java/libcore/net/http/HttpEngine.java, +            RawHeaders rawResponseHeaders, +                    = RawHeaders.fromMultimap(cacheResponse.getHeaders(), true);, +                requestHeaders.getHeaders().toMultimap(false));, +        RawHeaders rawResponseHeaders = RawHeaders.fromMultimap(responseHeadersMap, true);, +            requestHeaders.getHeaders().setRequestLine(getRequestLine());, +        requestHeaders.getHeaders().setRequestLine(getRequestLine());, +                    cookieHandler.get(uri, requestHeaders.getHeaders().toMultimap(false)));, +++ b/src/main/java/libcore/net/http/HttpResponseCache.java, +    @Override public void update(CacheResponse conditionalCacheHit, OkHttpConnection httpConnection), +            throws IOException {, +        public Entry(URI uri, RawHeaders varyHeaders, OkHttpConnection httpConnection), +                throws IOException {, +            this.responseHeaders = RawHeaders.fromMultimap(httpConnection.getHeaderFields(), true);, +                            .varyMatches(varyHeaders.toMultimap(false), requestHeaders);, +            return entry.responseHeaders.toMultimap(true);, +            return entry.responseHeaders.toMultimap(true);, +++ b/src/main/java/libcore/net/http/HttpTransport.java, +        byte[] bytes = headersToSend.toRequestHeader().getBytes("ISO-8859-1");, +        result.setRequestLine("CONNECT " + url.getHost() + ":" + Libcore.getEffectivePort(url), +            cookieHandler.put(httpEngine.uri, headers.toMultimap(true));, +++ b/src/main/java/libcore/net/http/HttpEngine.java, +            RawHeaders rawResponseHeaders, +                    = RawHeaders.fromMultimap(cacheResponse.getHeaders(), true);, +                requestHeaders.getHeaders().toMultimap(false));, +        RawHeaders rawResponseHeaders = RawHeaders.fromMultimap(responseHeadersMap, true);, +            requestHeaders.getHeaders().setRequestLine(getRequestLine());, +        requestHeaders.getHeaders().setRequestLine(getRequestLine());, +                    cookieHandler.get(uri, requestHeaders.getHeaders().toMultimap(false)));, +++ b/src/main/java/libcore/net/http/HttpResponseCache.java, +    @Override public void update(CacheResponse conditionalCacheHit, OkHttpConnection httpConnection), +            throws IOException {, +        public Entry(URI uri, RawHeaders varyHeaders, OkHttpConnection httpConnection), +                throws IOException {, +            this.responseHeaders = RawHeaders.fromMultimap(httpConnection.getHeaderFields(), true);, +                            .varyMatches(varyHeaders.toMultimap(false), requestHeaders);, +            return entry.responseHeaders.toMultimap(true);, +            return entry.responseHeaders.toMultimap(true);, +++ b/src/main/java/libcore/net/http/HttpTransport.java, +        byte[] bytes = headersToSend.toRequestHeader().getBytes("ISO-8859-1");, +        result.setRequestLine("CONNECT " + url.getHost() + ":" + Libcore.getEffectivePort(url), +            cookieHandler.put(httpEngine.uri, headers.toMultimap(true));, +++ b/src/main/java/libcore/net/http/HttpURLConnectionImpl.java, +            return getResponse().getResponseHeaders().getHeaders().toMultimap(true);, +        return rawRequestHeaders.toMultimap(false);, +++ b/src/main/java/libcore/net/http/HttpEngine.java, +            RawHeaders rawResponseHeaders, +                    = RawHeaders.fromMultimap(cacheResponse.getHeaders(), true);, +                requestHeaders.getHeaders().toMultimap(false));, +        RawHeaders rawResponseHeaders = RawHeaders.fromMultimap(responseHeadersMap, true);, +            requestHeaders.getHeaders().setRequestLine(getRequestLine());, +        requestHeaders.getHeaders().setRequestLine(getRequestLine());, +                    cookieHandler.get(uri, requestHeaders.getHeaders().toMultimap(false)));, +++ b/src/main/java/libcore/net/http/HttpResponseCache.java, +    @Override public void update(CacheResponse conditionalCacheHit, OkHttpConnection httpConnection), +            throws IOException {, +        public Entry(URI uri, RawHeaders varyHeaders, OkHttpConnection httpConnection), +                throws IOException {, +            this.responseHeaders = RawHeaders.fromMultimap(httpConnection.getHeaderFields(), true);, +                            .varyMatches(varyHeaders.toMultimap(false), requestHeaders);, +            return entry.responseHeaders.toMultimap(true);, +            return entry.responseHeaders.toMultimap(true);, +++ b/src/main/java/libcore/net/http/HttpTransport.java, +        byte[] bytes = headersToSend.toRequestHeader().getBytes("ISO-8859-1");, +        result.setRequestLine("CONNECT " + url.getHost() + ":" + Libcore.getEffectivePort(url), +            cookieHandler.put(httpEngine.uri, headers.toMultimap(true));, +++ b/src/main/java/libcore/net/http/HttpURLConnectionImpl.java, +            return getResponse().getResponseHeaders().getHeaders().toMultimap(true);, +        return rawRequestHeaders.toMultimap(false);, +++ b/src/main/java/libcore/net/http/RawHeaders.java, +    private String requestLine;, +     * Sets the request line (like "GET / HTTP/1.1")., +    public void setRequestLine(String requestLine) {, +        requestLine = requestLine.trim();, +        this.requestLine = requestLine;]