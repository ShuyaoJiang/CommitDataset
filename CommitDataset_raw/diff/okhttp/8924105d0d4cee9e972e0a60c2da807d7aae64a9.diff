[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java, +    int windowUpdateThreshold = DEFAULT_INITIAL_WINDOW_SIZE / 2;, +      // Send frames summing to windowUpdateThreshold., +      for (int sent = 0, count; sent < windowUpdateThreshold; sent += count) {, +        count = Math.min(HTTP_2.maxFrameSize(), windowUpdateThreshold - sent);, +        peer.sendFrame().data(false, 3, data(count));, +      }, +    while (in.read(buffer, 1024) != -1) {, +      if (buffer.size() == 3 * windowUpdateThreshold) break;, +    }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java, +    int windowUpdateThreshold = DEFAULT_INITIAL_WINDOW_SIZE / 2;, +      // Send frames summing to windowUpdateThreshold., +      for (int sent = 0, count; sent < windowUpdateThreshold; sent += count) {, +        count = Math.min(HTTP_2.maxFrameSize(), windowUpdateThreshold - sent);, +        peer.sendFrame().data(false, 3, data(count));, +      }, +    while (in.read(buffer, 1024) != -1) {, +      if (buffer.size() == 3 * windowUpdateThreshold) break;, +    }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Spdy3ConnectionTest.java, +    int windowUpdateThreshold = DEFAULT_INITIAL_WINDOW_SIZE / 2;, +      // Send frames summing to windowUpdateThreshold., +      for (int sent = 0, count; sent < windowUpdateThreshold; sent += count) {, +        count = Math.min(SPDY3.maxFrameSize(), windowUpdateThreshold - sent);, +        peer.sendFrame().data(false, 1, data(count));, +      }, +    while (in.read(buffer, 1024) != -1) {, +      if (buffer.size() == 3 * windowUpdateThreshold) break;, +    }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java, +    int windowUpdateThreshold = DEFAULT_INITIAL_WINDOW_SIZE / 2;, +      // Send frames summing to windowUpdateThreshold., +      for (int sent = 0, count; sent < windowUpdateThreshold; sent += count) {, +        count = Math.min(HTTP_2.maxFrameSize(), windowUpdateThreshold - sent);, +        peer.sendFrame().data(false, 3, data(count));, +      }, +    while (in.read(buffer, 1024) != -1) {, +      if (buffer.size() == 3 * windowUpdateThreshold) break;, +    }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Spdy3ConnectionTest.java, +    int windowUpdateThreshold = DEFAULT_INITIAL_WINDOW_SIZE / 2;, +      // Send frames summing to windowUpdateThreshold., +      for (int sent = 0, count; sent < windowUpdateThreshold; sent += count) {, +        count = Math.min(SPDY3.maxFrameSize(), windowUpdateThreshold - sent);, +        peer.sendFrame().data(false, 1, data(count));, +      }, +    while (in.read(buffer, 1024) != -1) {, +      if (buffer.size() == 3 * windowUpdateThreshold) break;, +    }, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +            .message("Unsatisfiable Request (only-if-cached)"), +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java, +    int windowUpdateThreshold = DEFAULT_INITIAL_WINDOW_SIZE / 2;, +      // Send frames summing to windowUpdateThreshold., +      for (int sent = 0, count; sent < windowUpdateThreshold; sent += count) {, +        count = Math.min(HTTP_2.maxFrameSize(), windowUpdateThreshold - sent);, +        peer.sendFrame().data(false, 3, data(count));, +      }, +    while (in.read(buffer, 1024) != -1) {, +      if (buffer.size() == 3 * windowUpdateThreshold) break;, +    }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Spdy3ConnectionTest.java, +    int windowUpdateThreshold = DEFAULT_INITIAL_WINDOW_SIZE / 2;, +      // Send frames summing to windowUpdateThreshold., +      for (int sent = 0, count; sent < windowUpdateThreshold; sent += count) {, +        count = Math.min(SPDY3.maxFrameSize(), windowUpdateThreshold - sent);, +        peer.sendFrame().data(false, 1, data(count));, +      }, +    while (in.read(buffer, 1024) != -1) {, +      if (buffer.size() == 3 * windowUpdateThreshold) break;, +    }, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +            .message("Unsatisfiable Request (only-if-cached)"), +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +      okHttpSettings.set(Settings.INITIAL_WINDOW_SIZE, 0, 16 * 1024 * 1024);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java, +    int windowUpdateThreshold = DEFAULT_INITIAL_WINDOW_SIZE / 2;, +      // Send frames summing to windowUpdateThreshold., +      for (int sent = 0, count; sent < windowUpdateThreshold; sent += count) {, +        count = Math.min(HTTP_2.maxFrameSize(), windowUpdateThreshold - sent);, +        peer.sendFrame().data(false, 3, data(count));, +      }, +    while (in.read(buffer, 1024) != -1) {, +      if (buffer.size() == 3 * windowUpdateThreshold) break;, +    }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Spdy3ConnectionTest.java, +    int windowUpdateThreshold = DEFAULT_INITIAL_WINDOW_SIZE / 2;, +      // Send frames summing to windowUpdateThreshold., +      for (int sent = 0, count; sent < windowUpdateThreshold; sent += count) {, +        count = Math.min(SPDY3.maxFrameSize(), windowUpdateThreshold - sent);, +        peer.sendFrame().data(false, 1, data(count));, +      }, +    while (in.read(buffer, 1024) != -1) {, +      if (buffer.size() == 3 * windowUpdateThreshold) break;, +    }, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +            .message("Unsatisfiable Request (only-if-cached)"), +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +      okHttpSettings.set(Settings.INITIAL_WINDOW_SIZE, 0, 16 * 1024 * 1024);]