[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import okhttp3.HttpUrl;, +  private final HttpUrl requestUrl;, +, +      String scheme = socket instanceof SSLSocket ? "https" : "http";, +      String hostname = socket.getInetAddress().getHostName();, +      int port = socket.getLocalPort();, +      this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, +      this.requestUrl = null;, +  public HttpUrl getRequestUrl() {, +    return requestUrl;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import okhttp3.HttpUrl;, +  private final HttpUrl requestUrl;, +, +      String scheme = socket instanceof SSLSocket ? "https" : "http";, +      String hostname = socket.getInetAddress().getHostName();, +      int port = socket.getLocalPort();, +      this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, +      this.requestUrl = null;, +  public HttpUrl getRequestUrl() {, +    return requestUrl;, +  }, +, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.HttpUrl;, +, +  @Test public void requestUrlReconstructed() throws Exception {, +    server.enqueue(new MockResponse().setBody("hello world"));, +, +    URL url = server.url("/a/deep/path?key=foo%20bar").url();, +    HttpURLConnection connection = (HttpURLConnection) url.openConnection();, +    InputStream in = connection.getInputStream();, +    BufferedReader reader = new BufferedReader(new InputStreamReader(in));, +    assertEquals(HttpURLConnection.HTTP_OK, connection.getResponseCode());, +    assertEquals("hello world", reader.readLine());, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("GET /a/deep/path?key=foo%20bar HTTP/1.1", request.getRequestLine());, +, +    HttpUrl requestUrl = request.getRequestUrl();, +    assertEquals("http", requestUrl.scheme());, +    assertEquals(server.getHostName(), requestUrl.host());, +    assertEquals(server.getPort(), requestUrl.port());, +    assertEquals("/a/deep/path", requestUrl.encodedPath());, +    assertEquals("foo bar", requestUrl.queryParameter("key"));, +  }]