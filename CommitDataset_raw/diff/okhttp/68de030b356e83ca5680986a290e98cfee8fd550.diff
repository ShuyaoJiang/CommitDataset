[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] HTTP_20_DRAFT_09 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '9', '/', '2', '.', '0', +  };, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_09)) {, +              transport = Transport.HTTP_20_DRAFT_09;, +        if (transport == Transport.HTTP_20_DRAFT_09 || transport == Transport.SPDY_3) {, +          if (transport == Transport.HTTP_20_DRAFT_09) {, +            builder.http20Draft09();, +            builder.spdy3();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_09, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] HTTP_20_DRAFT_09 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '9', '/', '2', '.', '0', +  };, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_09)) {, +              transport = Transport.HTTP_20_DRAFT_09;, +        if (transport == Transport.HTTP_20_DRAFT_09 || transport == Transport.SPDY_3) {, +          if (transport == Transport.HTTP_20_DRAFT_09) {, +            builder.http20Draft09();, +            builder.spdy3();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_09, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] HTTP_20_DRAFT_09 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '9', '/', '2', '.', '0', +  };, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_09)) {, +              transport = Transport.HTTP_20_DRAFT_09;, +        if (transport == Transport.HTTP_20_DRAFT_09 || transport == Transport.SPDY_3) {, +          if (transport == Transport.HTTP_20_DRAFT_09) {, +            builder.http20Draft09();, +            builder.spdy3();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_09, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +package com.squareup.okhttp.internal.spdy;, +, +import java.io.DataInputStream;, +import java.io.IOException;, +import java.io.OutputStream;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.BitSet;, +import java.util.List;, +import java.util.ListIterator;, +, +/**, + * Read and write HPACK v05., + * http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-05, + */, +final class HpackDraft05 {, +, +  // Visible for testing., +  static class HeaderEntry implements Cloneable {, +    final String name;, +    final String value;, +    final int size;, +    boolean referenced = true;, +, +    HeaderEntry(String name, String value) {, +      this.name = name;, +      this.value = value;, +      // TODO: This needs to be the size in bytes, not the length in chars., +      this.size = 32 + name.length() + value.length();, +    }, +, +    /** Adds name and value, if this entry is referenced. */, +    void addTo(List<String> out) {, +      if (!referenced) return;, +      out.add(name);, +      out.add(value);, +    }, +, +    @Override public HeaderEntry clone() {, +      try {, +        return (HeaderEntry) super.clone();, +      } catch (CloneNotSupportedException e) {, +        throw new AssertionError();, +      }, +    }, +  }, +, +  static final int PREFIX_5_BITS = 0x1f;, +  static final int PREFIX_6_BITS = 0x3f;, +  static final int PREFIX_7_BITS = 0x7f;, +  static final int PREFIX_8_BITS = 0xff;, +, +  static final List<HeaderEntry> STATIC_HEADER_TABLE = Arrays.asList(, +      new HeaderEntry(":authority", ""),, +      new HeaderEntry(":method", "GET"),, +      new HeaderEntry(":method", "POST"),, +      new HeaderEntry(":path", "/"),, +      new HeaderEntry(":path", "/index.html"),, +      new HeaderEntry(":scheme", "http"),, +      new HeaderEntry(":scheme", "https"),, +      new HeaderEntry(":status", "200"),, +      new HeaderEntry(":status", "500"),, +      new HeaderEntry(":status", "404"),, +      new HeaderEntry(":status", "403"),]