[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +import java.util.Arrays;, + *, + *, + * This implementation uses an array for the header table with a bitset for, + * references.  Dynamic entries are added to the array, starting in the last, + * position moving forward.  When the array fills, it is doubled, up to the, + * supported maximum of 64 headers.  HTTP requests or responses that require, + * more than 64 headers are hence not currently supported., +    HeaderEntry(String name, String value) {, +      this(ByteString.encodeUtf8(name), ByteString.encodeUtf8(value));, +    HeaderEntry(ByteString name, ByteString value) {, +      this(name, value, 32 + name.size() + value.size());, +    }, +, +    private HeaderEntry(ByteString name, ByteString value, int size) {, +      new HeaderEntry(":authority", ""),, +      new HeaderEntry(":method", "GET"),, +      new HeaderEntry(":method", "POST"),, +      new HeaderEntry(":path", "/"),, +      new HeaderEntry(":path", "/index.html"),, +      new HeaderEntry(":scheme", "http"),, +      new HeaderEntry(":scheme", "https"),, +      new HeaderEntry(":status", "200"),, +      new HeaderEntry(":status", "500"),, +      new HeaderEntry(":status", "404"),, +      new HeaderEntry(":status", "403"),, +      new HeaderEntry(":status", "400"),, +      new HeaderEntry(":status", "401"),, +      new HeaderEntry("accept-charset", ""),, +      new HeaderEntry("accept-encoding", ""),, +      new HeaderEntry("accept-language", ""),, +      new HeaderEntry("accept-ranges", ""),, +      new HeaderEntry("accept", ""),, +      new HeaderEntry("access-control-allow-origin", ""),, +      new HeaderEntry("age", ""),, +      new HeaderEntry("allow", ""),, +      new HeaderEntry("authorization", ""),, +      new HeaderEntry("cache-control", ""),, +      new HeaderEntry("content-disposition", ""),, +      new HeaderEntry("content-encoding", ""),, +      new HeaderEntry("content-language", ""),, +      new HeaderEntry("content-length", ""),, +      new HeaderEntry("content-location", ""),, +      new HeaderEntry("content-range", ""),, +      new HeaderEntry("content-type", ""),, +      new HeaderEntry("cookie", ""),, +      new HeaderEntry("date", ""),, +      new HeaderEntry("etag", ""),, +      new HeaderEntry("expect", ""),, +      new HeaderEntry("expires", ""),, +      new HeaderEntry("from", ""),, +      new HeaderEntry("host", ""),, +      new HeaderEntry("if-match", ""),, +      new HeaderEntry("if-modified-since", ""),, +      new HeaderEntry("if-none-match", ""),, +      new HeaderEntry("if-range", ""),, +      new HeaderEntry("if-unmodified-since", ""),, +      new HeaderEntry("last-modified", ""),, +      new HeaderEntry("link", ""),, +      new HeaderEntry("location", ""),, +      new HeaderEntry("max-forwards", ""),, +      new HeaderEntry("proxy-authenticate", ""),, +      new HeaderEntry("proxy-authorization", ""),, +      new HeaderEntry("range", ""),, +      new HeaderEntry("referer", ""),, +      new HeaderEntry("refresh", ""),, +      new HeaderEntry("retry-after", ""),, +      new HeaderEntry("server", ""),, +      new HeaderEntry("set-cookie", ""),, +      new HeaderEntry("strict-transport-security", ""),, +      new HeaderEntry("transfer-encoding", ""),, +      new HeaderEntry("user-agent", ""),, +      new HeaderEntry("vary", ""),, +      new HeaderEntry("via", ""),, +      new HeaderEntry("www-authenticate", ""), +    HeaderEntry[] headerTable = new HeaderEntry[8]; // must be less than 64, +    // Array is populated back to front, so new entries always have lowest index., +    int nextHeaderIndex = headerTable.length - 1;, +    int headerCount = 0;, +, +    /**, +     * Set bit positions indicate {@code headerTable[pos]} should be emitted., +     */, +    // Using a long since the reference table < 64 entries., +    long referencedHeaders = 0x0000000000000000L;, +, +    /**, +     * Set bit positions indicate {@code STATIC_HEADER_TABLE[pos]} should be, +     * emitted., +     */, +    // Using a long since the static table < 64 entries., +    long referencedStaticHeaders = 0x0000000000000000L;, +    int headerTableByteCount = 0;, +    int maxHeaderTableByteCount = 4096; // TODO: needs to come from SETTINGS_HEADER_TABLE_SIZE.]