[+++ b/src/main/java/libcore/net/spdy/SpdyConnection.java, +    public Ping ping() throws IOException {, +        int pingId;, +        synchronized (this) {, +            pingId = nextPingId;, +        }, +        writePing(pingId, ping);, +        synchronized (spdyWriter) {, +    /**, +     * Sends a noop frame to the peer., +     */, +    public void noop() throws IOException {, +        synchronized (spdyWriter) {, +            spdyWriter.noop();, +        }, +    }, +, +                return true;, +++ b/src/main/java/libcore/net/spdy/SpdyConnection.java, +    public Ping ping() throws IOException {, +        int pingId;, +        synchronized (this) {, +            pingId = nextPingId;, +        }, +        writePing(pingId, ping);, +        synchronized (spdyWriter) {, +    /**, +     * Sends a noop frame to the peer., +     */, +    public void noop() throws IOException {, +        synchronized (spdyWriter) {, +            spdyWriter.noop();, +        }, +    }, +, +                return true;, +++ b/src/main/java/libcore/net/spdy/SpdyReader.java, +            case SpdyConnection.TYPE_NOOP:, +              if (length != 0) throw ioException("TYPE_NOOP length: %d != 0", length);, +              return SpdyConnection.TYPE_NOOP;, +, +        if (length != 4) throw ioException("TYPE_PING length: %d != 4", length);, +            throw ioException("TYPE_SETTINGS length: %d != 4 + 8 * %d", length, numberOfEntries);, +, +    private static IOException ioException(String message, Object... args) throws IOException {, +        throw new IOException(String.format(message, args));, +    }, +++ b/src/main/java/libcore/net/spdy/SpdyConnection.java, +    public Ping ping() throws IOException {, +        int pingId;, +        synchronized (this) {, +            pingId = nextPingId;, +        }, +        writePing(pingId, ping);, +        synchronized (spdyWriter) {, +    /**, +     * Sends a noop frame to the peer., +     */, +    public void noop() throws IOException {, +        synchronized (spdyWriter) {, +            spdyWriter.noop();, +        }, +    }, +, +                return true;, +++ b/src/main/java/libcore/net/spdy/SpdyReader.java, +            case SpdyConnection.TYPE_NOOP:, +              if (length != 0) throw ioException("TYPE_NOOP length: %d != 0", length);, +              return SpdyConnection.TYPE_NOOP;, +, +        if (length != 4) throw ioException("TYPE_PING length: %d != 4", length);, +            throw ioException("TYPE_SETTINGS length: %d != 4 + 8 * %d", length, numberOfEntries);, +, +    private static IOException ioException(String message, Object... args) throws IOException {, +        throw new IOException(String.format(message, args));, +    }, +++ b/src/main/java/libcore/net/spdy/SpdyWriter.java, +    public void noop() throws IOException {, +        int type = SpdyConnection.TYPE_NOOP;, +        int length = 0;, +        int flags = 0;, +        out.writeInt(0x80000000 | (SpdyConnection.VERSION & 0x7fff) << 16 | type & 0xffff);, +        out.writeInt((flags & 0xff) << 24 | length & 0xffffff);, +        out.flush();, +    }, +, +++ b/src/main/java/libcore/net/spdy/SpdyConnection.java, +    public Ping ping() throws IOException {, +        int pingId;, +        synchronized (this) {, +            pingId = nextPingId;, +        }, +        writePing(pingId, ping);, +        synchronized (spdyWriter) {, +    /**, +     * Sends a noop frame to the peer., +     */, +    public void noop() throws IOException {, +        synchronized (spdyWriter) {, +            spdyWriter.noop();]