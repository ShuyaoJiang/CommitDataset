[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate);, +    assertEquals(list(root), cleaner.clean(list(root)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get();, +      cleaner.clean(list(root));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate);, +    assertEquals(list(certB, certA, root), cleaner.clean(list(certB, certA, root)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate);, +    assertEquals(list(certB, certA, root), cleaner.clean(list(certB, certA))); // Root is added!, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate);, +    assertEquals(list(certC, certB, certA, root), cleaner.clean(list(certC, certA, root, certB)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate);, +    assertEquals(list(certC, certB, certA, root), cleaner.clean(list(certC, certA, certB)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate);, +        cleaner.clean(list(certB, certUnnecessary, certA, root)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(, +        selfSigned.certificate, trusted.certificate);, +        cleaner.clean(list(certB, certA)));, +        cleaner.clean(list(certB, certA, trusted)));, +        cleaner.clean(list(certB, certA, trusted, selfSigned)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(trusted.certificate);, +        cleaner.clean(list(certificate, intermediateCa)));, +        cleaner.clean(list(certificate, intermediateCa, trusted)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root);, +    assertEquals(certificates, cleaner.clean(certificates));, +    assertEquals(certificates, cleaner.clean(certificates.subList(0, 9)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root);, +      cleaner.clean(certificates);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate);, +    assertEquals(list(root), cleaner.clean(list(root)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get();, +      cleaner.clean(list(root));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate);, +    assertEquals(list(certB, certA, root), cleaner.clean(list(certB, certA, root)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate);, +    assertEquals(list(certB, certA, root), cleaner.clean(list(certB, certA))); // Root is added!, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate);, +    assertEquals(list(certC, certB, certA, root), cleaner.clean(list(certC, certA, root, certB)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate);, +    assertEquals(list(certC, certB, certA, root), cleaner.clean(list(certC, certA, certB)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate);, +        cleaner.clean(list(certB, certUnnecessary, certA, root)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(, +        selfSigned.certificate, trusted.certificate);, +        cleaner.clean(list(certB, certA)));, +        cleaner.clean(list(certB, certA, trusted)));, +        cleaner.clean(list(certB, certA, trusted, selfSigned)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(trusted.certificate);, +        cleaner.clean(list(certificate, intermediateCa)));, +        cleaner.clean(list(certificate, intermediateCa, trusted)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root);, +    assertEquals(certificates, cleaner.clean(certificates));, +    assertEquals(certificates, cleaner.clean(certificates.subList(0, 9)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root);, +      cleaner.clean(certificates);, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +  private final CertificateChainCleaner certificateChainCleaner;, +    this.certificateChainCleaner = builder.certificateChainCleaner;, +    if (certificateChainCleaner != null) {, +      peerCertificates = certificateChainCleaner.clean(peerCertificates);, +    private CertificateChainCleaner certificateChainCleaner;, +      this.certificateChainCleaner = certificatePinner.certificateChainCleaner;, +    public Builder certificateChainCleaner(CertificateChainCleaner certificateChainCleaner) {, +      this.certificateChainCleaner = certificateChainCleaner;, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate);, +    assertEquals(list(root), cleaner.clean(list(root)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get();, +      cleaner.clean(list(root));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate);, +    assertEquals(list(certB, certA, root), cleaner.clean(list(certB, certA, root)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate);, +    assertEquals(list(certB, certA, root), cleaner.clean(list(certB, certA))); // Root is added!, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate);, +    assertEquals(list(certC, certB, certA, root), cleaner.clean(list(certC, certA, root, certB)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate);, +    assertEquals(list(certC, certB, certA, root), cleaner.clean(list(certC, certA, certB)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate);, +        cleaner.clean(list(certB, certUnnecessary, certA, root)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(, +        selfSigned.certificate, trusted.certificate);, +        cleaner.clean(list(certB, certA)));, +        cleaner.clean(list(certB, certA, trusted)));, +        cleaner.clean(list(certB, certA, trusted, selfSigned)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(trusted.certificate);, +        cleaner.clean(list(certificate, intermediateCa)));, +        cleaner.clean(list(certificate, intermediateCa, trusted)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root);, +    assertEquals(certificates, cleaner.clean(certificates));, +    assertEquals(certificates, cleaner.clean(certificates.subList(0, 9)));, +    CertificateChainCleaner cleaner = CertificateChainCleaner.get(root);, +      cleaner.clean(certificates);, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +  private final CertificateChainCleaner certificateChainCleaner;, +    this.certificateChainCleaner = builder.certificateChainCleaner;]