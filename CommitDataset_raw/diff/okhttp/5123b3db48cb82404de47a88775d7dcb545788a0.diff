[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        new Buffer().write(requestBody.toByteArray()), sequenceNumber, socket);, +      Buffer body = new Buffer();, +      body.writeAll(stream.getSource());, +      body.close();, +      return new RecordedRequest(requestLine, httpHeaders, chunkSizes, body.size(), body,, +          sequenceNumber.getAndIncrement(), socket);, +            new Buffer(), sequenceNumber.getAndIncrement(), socket));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        new Buffer().write(requestBody.toByteArray()), sequenceNumber, socket);, +      Buffer body = new Buffer();, +      body.writeAll(stream.getSource());, +      body.close();, +      return new RecordedRequest(requestLine, httpHeaders, chunkSizes, body.size(), body,, +          sequenceNumber.getAndIncrement(), socket);, +            new Buffer(), sequenceNumber.getAndIncrement(), socket));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/RecordedRequest.java, +import okio.Buffer;, +  private final Buffer body;, +      long bodySize, Buffer body, int sequenceNumber, Socket socket) {, +        ? TlsVersion.forJavaName(((SSLSocket) socket).getSession().getProtocol()), +  public Buffer getBody() {, +  /** @deprecated Use {@link #getBody() getBody().readUtf8()}. */, +    return getBody().readUtf8();, +    return tlsVersion != null ? Internal.instance.tlsVersionJavaName(tlsVersion) : null;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        new Buffer().write(requestBody.toByteArray()), sequenceNumber, socket);, +      Buffer body = new Buffer();, +      body.writeAll(stream.getSource());, +      body.close();, +      return new RecordedRequest(requestLine, httpHeaders, chunkSizes, body.size(), body,, +          sequenceNumber.getAndIncrement(), socket);, +            new Buffer(), sequenceNumber.getAndIncrement(), socket));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/RecordedRequest.java, +import okio.Buffer;, +  private final Buffer body;, +      long bodySize, Buffer body, int sequenceNumber, Socket socket) {, +        ? TlsVersion.forJavaName(((SSLSocket) socket).getSession().getProtocol()), +  public Buffer getBody() {, +  /** @deprecated Use {@link #getBody() getBody().readUtf8()}. */, +    return getBody().readUtf8();, +    return tlsVersion != null ? Internal.instance.tlsVersionJavaName(tlsVersion) : null;, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +import okio.Buffer;, +    Buffer body = new Buffer().writeUtf8("ABC");, +        requestLine, headers, chunkSizes, body.size(), body, 0, null);, +    assertEquals("ABC", request.getBody().readUtf8());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        new Buffer().write(requestBody.toByteArray()), sequenceNumber, socket);, +      Buffer body = new Buffer();, +      body.writeAll(stream.getSource());, +      body.close();, +      return new RecordedRequest(requestLine, httpHeaders, chunkSizes, body.size(), body,, +          sequenceNumber.getAndIncrement(), socket);, +            new Buffer(), sequenceNumber.getAndIncrement(), socket));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/RecordedRequest.java, +import okio.Buffer;, +  private final Buffer body;, +      long bodySize, Buffer body, int sequenceNumber, Socket socket) {, +        ? TlsVersion.forJavaName(((SSLSocket) socket).getSession().getProtocol()), +  public Buffer getBody() {, +  /** @deprecated Use {@link #getBody() getBody().readUtf8()}. */, +    return getBody().readUtf8();, +    return tlsVersion != null ? Internal.instance.tlsVersionJavaName(tlsVersion) : null;, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +import okio.Buffer;, +    Buffer body = new Buffer().writeUtf8("ABC");, +        requestLine, headers, chunkSizes, body.size(), body, 0, null);, +    assertEquals("ABC", request.getBody().readUtf8());, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +    assertEquals("Hello, world!", request.getBody().readUtf8());, +    assertEquals("Hello, world!", request.getBody().readUtf8());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        new Buffer().write(requestBody.toByteArray()), sequenceNumber, socket);, +      Buffer body = new Buffer();, +      body.writeAll(stream.getSource());, +      body.close();, +      return new RecordedRequest(requestLine, httpHeaders, chunkSizes, body.size(), body,, +          sequenceNumber.getAndIncrement(), socket);, +            new Buffer(), sequenceNumber.getAndIncrement(), socket));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/RecordedRequest.java, +import okio.Buffer;, +  private final Buffer body;, +      long bodySize, Buffer body, int sequenceNumber, Socket socket) {, +        ? TlsVersion.forJavaName(((SSLSocket) socket).getSession().getProtocol()), +  public Buffer getBody() {, +  /** @deprecated Use {@link #getBody() getBody().readUtf8()}. */, +    return getBody().readUtf8();, +    return tlsVersion != null ? Internal.instance.tlsVersionJavaName(tlsVersion) : null;, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +import okio.Buffer;, +    Buffer body = new Buffer().writeUtf8("ABC");, +        requestLine, headers, chunkSizes, body.size(), body, 0, null);, +    assertEquals("ABC", request.getBody().readUtf8());, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +    assertEquals("Hello, world!", request.getBody().readUtf8());, +    assertEquals("Hello, world!", request.getBody().readUtf8());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    assertEquals(0, recordedRequest.getBody().size());, +    assertEquals(0, recordedRequest.getBody().size());]