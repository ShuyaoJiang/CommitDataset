[+++ b/okhttp/src/main/java/com/squareup/okhttp/Job.java, +    // Copy body metadata to the appropriate request headers., +    // Create the initial HTTP engine. Retries and redirects need new engine for each attempt., +    engine = new HttpEngine(client, request, false, null, null, null);, +, +    while (true) {, +      if (canceled) return null;, +, +      try {, +      } catch (IOException e) {, +        HttpEngine retryEngine = engine.recover(e);, +        if (retryEngine != null) {, +          engine = retryEngine;, +          continue;, +        }, +, +        // Give up; recovery is not possible., +        throw e;, +      }, +      Connection connection = engine.getConnection();, +      engine = new HttpEngine(client, request, false, connection, null, null);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Job.java, +    // Copy body metadata to the appropriate request headers., +    // Create the initial HTTP engine. Retries and redirects need new engine for each attempt., +    engine = new HttpEngine(client, request, false, null, null, null);, +, +    while (true) {, +      if (canceled) return null;, +, +      try {, +      } catch (IOException e) {, +        HttpEngine retryEngine = engine.recover(e);, +        if (retryEngine != null) {, +          engine = retryEngine;, +          continue;, +        }, +, +        // Give up; recovery is not possible., +        throw e;, +      }, +      Connection connection = engine.getConnection();, +      engine = new HttpEngine(client, request, false, connection, null, null);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +import java.net.ProtocolException;, +import java.security.cert.CertificateException;, +import javax.net.ssl.SSLHandshakeException;, +  private Connection connection;, +  private RouteSelector routeSelector;, +   * @param routeSelector the route selector used for a failed attempt, +   *     immediately preceding this attempt, or null if this request doesn't, +   *     recover from a failure., +      Connection connection, RouteSelector routeSelector, RetryableOutputStream requestBodyOut) {, +    this.routeSelector = routeSelector;, +   * Report and attempt to recover from {@code e}. Returns a new HTTP engine, +   * that should be used for the retry if {@code e} is recoverable, or null if, +   * the failure is permanent., +   */, +  public HttpEngine recover(IOException e) {, +    if (routeSelector != null && connection != null) {, +      routeSelector.connectFailed(connection, e);, +    }, +, +    boolean canRetryRequestBody = requestBodyOut == null, +        || requestBodyOut instanceof RetryableOutputStream;, +    if (routeSelector == null && connection == null // No connection., +        || routeSelector != null && !routeSelector.hasNext() // No more routes to attempt., +        || !isRecoverable(e), +        || !canRetryRequestBody) {, +      return null;, +    }, +, +    release(true);, +, +    // For failure recovery, use the same route selector with a new connection., +    return new HttpEngine(client, request, bufferRequestBody, null, routeSelector,, +        (RetryableOutputStream) requestBodyOut);, +  }, +, +  private boolean isRecoverable(IOException e) {, +    // If the problem was a CertificateException from the X509TrustManager,, +    // do not retry, we didn't have an abrupt server initiated exception., +    boolean sslFailure =, +        e instanceof SSLHandshakeException && e.getCause() instanceof CertificateException;, +    boolean protocolFailure = e instanceof ProtocolException;, +    return !sslFailure && !protocolFailure;, +  }, +, +  /**, +++ b/okhttp/src/main/java/com/squareup/okhttp/Job.java, +    // Copy body metadata to the appropriate request headers., +    // Create the initial HTTP engine. Retries and redirects need new engine for each attempt., +    engine = new HttpEngine(client, request, false, null, null, null);, +, +    while (true) {, +      if (canceled) return null;, +, +      try {, +      } catch (IOException e) {, +        HttpEngine retryEngine = engine.recover(e);, +        if (retryEngine != null) {]