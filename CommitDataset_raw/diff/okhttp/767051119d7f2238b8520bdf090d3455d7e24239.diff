[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal;, +, +import java.io.BufferedReader;, +import java.io.File;, +import java.io.FileReader;, +import java.io.FileWriter;, +import java.io.IOException;, +import java.io.Reader;, +import java.io.StringWriter;, +import java.io.Writer;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +import okio.BufferedSink;, +import okio.BufferedSource;, +import okio.Okio;, +import okio.Source;, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.TemporaryFolder;, +, +import static com.squareup.okhttp.internal.DiskLruCache.JOURNAL_FILE;, +import static com.squareup.okhttp.internal.DiskLruCache.JOURNAL_FILE_BACKUP;, +import static com.squareup.okhttp.internal.DiskLruCache.MAGIC;, +import static com.squareup.okhttp.internal.DiskLruCache.VERSION_1;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +public final class DiskLruCacheTest {, +  private final int appVersion = 100;, +  private File cacheDir;, +  private File journalFile;, +  private File journalBkpFile;, +  private DiskLruCache cache;, +, +  @Rule public TemporaryFolder tempDir = new TemporaryFolder();, +, +  @Before public void setUp() throws Exception {, +    cacheDir = tempDir.newFolder("DiskLruCacheTest");, +    journalFile = new File(cacheDir, JOURNAL_FILE);, +    journalBkpFile = new File(cacheDir, JOURNAL_FILE_BACKUP);, +    for (File file : cacheDir.listFiles()) {, +      file.delete();, +    }, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, Integer.MAX_VALUE);, +  }, +, +  @After public void tearDown() throws Exception {, +    cache.close();, +  }, +, +  @Test public void emptyCache() throws Exception {, +    cache.close();, +    assertJournalEquals();, +  }, +, +  @Test public void validateKey() throws Exception {, +    String key = null;, +    try {, +      key = "has_space ";, +      cache.edit(key);, +      fail("Exepcting an IllegalArgumentException as the key was invalid.");, +    } catch (IllegalArgumentException iae) {, +      assertEquals("keys must match regex [a-z0-9_-]{1,120}: \"" + key + "\"", iae.getMessage());, +    }, +    try {, +      key = "has_CR\r";, +      cache.edit(key);, +      fail("Exepcting an IllegalArgumentException as the key was invalid.");, +    } catch (IllegalArgumentException iae) {, +      assertEquals("keys must match regex [a-z0-9_-]{1,120}: \"" + key + "\"", iae.getMessage());, +    }, +    try {, +      key = "has_LF\n";, +      cache.edit(key);, +      fail("Exepcting an IllegalArgumentException as the key was invalid.");, +    } catch (IllegalArgumentException iae) {, +      assertEquals("keys must match regex [a-z0-9_-]{1,120}: \"" + key + "\"", iae.getMessage());]