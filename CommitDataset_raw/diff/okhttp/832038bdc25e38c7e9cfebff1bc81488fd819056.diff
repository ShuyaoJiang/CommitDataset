[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClient.java, +import com.squareup.okhttp.HttpUrl;, +  @Override public Runnable request(HttpUrl url) {, +    return new ApacheHttpClientRequest(url.url());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClient.java, +import com.squareup.okhttp.HttpUrl;, +  @Override public Runnable request(HttpUrl url) {, +    return new ApacheHttpClientRequest(url.url());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import com.squareup.okhttp.HttpUrl;, +    HttpUrl url = server.url("/");, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClient.java, +import com.squareup.okhttp.HttpUrl;, +  @Override public Runnable request(HttpUrl url) {, +    return new ApacheHttpClientRequest(url.url());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import com.squareup.okhttp.HttpUrl;, +    HttpUrl url = server.url("/");, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/HttpClient.java, +import com.squareup.okhttp.HttpUrl;, +  void enqueue(HttpUrl url) throws Exception;, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClient.java, +import com.squareup.okhttp.HttpUrl;, +  @Override public Runnable request(HttpUrl url) {, +    return new ApacheHttpClientRequest(url.url());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import com.squareup.okhttp.HttpUrl;, +    HttpUrl url = server.url("/");, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/HttpClient.java, +import com.squareup.okhttp.HttpUrl;, +  void enqueue(HttpUrl url) throws Exception;, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/NettyHttpClient.java, +import com.squareup.okhttp.HttpUrl;, +  private final Deque<HttpUrl> backlog = new ArrayDeque<>();, +  @Override public void enqueue(HttpUrl url) throws Exception {, +      Channel channel = bootstrap.connect(url.host(), url.port()), +    HttpUrl url;, +    private void sendRequest(HttpUrl url) {, +          HttpVersion.HTTP_1_1, HttpMethod.GET, url.encodedPath());, +      request.headers().set(HttpHeaders.Names.HOST, url.host());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClient.java, +import com.squareup.okhttp.HttpUrl;, +  @Override public Runnable request(HttpUrl url) {, +    return new ApacheHttpClientRequest(url.url());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import com.squareup.okhttp.HttpUrl;, +    HttpUrl url = server.url("/");, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/HttpClient.java, +import com.squareup.okhttp.HttpUrl;, +  void enqueue(HttpUrl url) throws Exception;, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/NettyHttpClient.java, +import com.squareup.okhttp.HttpUrl;, +  private final Deque<HttpUrl> backlog = new ArrayDeque<>();, +  @Override public void enqueue(HttpUrl url) throws Exception {, +      Channel channel = bootstrap.connect(url.host(), url.port()), +    HttpUrl url;, +    private void sendRequest(HttpUrl url) {, +          HttpVersion.HTTP_1_1, HttpMethod.GET, url.encodedPath());, +      request.headers().set(HttpHeaders.Names.HOST, url.host());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttp.java, +import com.squareup.okhttp.HttpUrl;, +  @Override public Runnable request(HttpUrl url) {, +    private final HttpUrl url;, +    public OkHttpRequest(HttpUrl url) {, +        HttpURLConnection urlConnection = new OkUrlFactory(client).open(url.url());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClient.java, +import com.squareup.okhttp.HttpUrl;, +  @Override public Runnable request(HttpUrl url) {, +    return new ApacheHttpClientRequest(url.url());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import com.squareup.okhttp.HttpUrl;, +    HttpUrl url = server.url("/");, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/HttpClient.java, +import com.squareup.okhttp.HttpUrl;, +  void enqueue(HttpUrl url) throws Exception;, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/NettyHttpClient.java, +import com.squareup.okhttp.HttpUrl;, +  private final Deque<HttpUrl> backlog = new ArrayDeque<>();, +  @Override public void enqueue(HttpUrl url) throws Exception {, +      Channel channel = bootstrap.connect(url.host(), url.port()), +    HttpUrl url;, +    private void sendRequest(HttpUrl url) {, +          HttpVersion.HTTP_1_1, HttpMethod.GET, url.encodedPath());, +      request.headers().set(HttpHeaders.Names.HOST, url.host());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttp.java, +import com.squareup.okhttp.HttpUrl;, +  @Override public Runnable request(HttpUrl url) {, +    private final HttpUrl url;, +    public OkHttpRequest(HttpUrl url) {, +        HttpURLConnection urlConnection = new OkUrlFactory(client).open(url.url());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +import com.squareup.okhttp.HttpUrl;, +  @Override public void enqueue(HttpUrl url) throws Exception {, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClient.java, +import com.squareup.okhttp.HttpUrl;, +  @Override public Runnable request(HttpUrl url) {, +    return new ApacheHttpClientRequest(url.url());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +import com.squareup.okhttp.HttpUrl;, +    HttpUrl url = server.url("/");]