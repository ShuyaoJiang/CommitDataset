[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    callback.await(requestA.url()).assertFailure(, +        "Canceled", "stream was reset: CANCEL", "Socket closed");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    callback.await(requestA.url()).assertFailure(, +        "Canceled", "stream was reset: CANCEL", "Socket closed");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +  public void assertFailure(String... messages) {, +    assertTrue(failure.getMessage(), Arrays.asList(messages).contains(failure.getMessage()));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    callback.await(requestA.url()).assertFailure(, +        "Canceled", "stream was reset: CANCEL", "Socket closed");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +  public void assertFailure(String... messages) {, +    assertTrue(failure.getMessage(), Arrays.asList(messages).contains(failure.getMessage()));, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    callback.await(requestA.url()).assertFailure(, +        "Canceled", "stream was reset: CANCEL", "Socket closed");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +  public void assertFailure(String... messages) {, +    assertTrue(failure.getMessage(), Arrays.asList(messages).contains(failure.getMessage()));, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java, +  private static final String TLS_1_2 = "TLSv1.2"; // 2008., +  private static final String TLS_1_1 = "TLSv1.1"; // 2006., +  private static final String TLS_1_0 = "TLSv1";   // 1999., +  private static final String SSL_3_0 = "SSLv3";   // 1996., +          "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", // 0xC0,0x2B  Android L, +          "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",   // 0xC0,0x2F  Android L, +          "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",     // 0x00,0x9E  Android L, +          "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",    // 0xC0,0x0A  Android 4.0, +          "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",    // 0xC0,0x09  Android 4.0, +          "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",      // 0xC0,0x13  Android 4.0, +          "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",      // 0xC0,0x14  Android 4.0, +          "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA",        // 0xC0,0x07  Android 4.0, +          "TLS_ECDHE_RSA_WITH_RC4_128_SHA",          // 0xC0,0x11  Android 4.0, +          "TLS_DHE_RSA_WITH_AES_128_CBC_SHA",        // 0x00,0x33  Android 2.3, +          "TLS_DHE_DSS_WITH_AES_128_CBC_SHA",        // 0x00,0x32  Android 2.3, +          "TLS_DHE_RSA_WITH_AES_256_CBC_SHA",        // 0x00,0x39  Android 2.3, +          "TLS_RSA_WITH_AES_128_GCM_SHA256",         // 0x00,0x9C  Android L, +          "TLS_RSA_WITH_AES_128_CBC_SHA",            // 0x00,0x2F  Android 2.3, +          "TLS_RSA_WITH_AES_256_CBC_SHA",            // 0x00,0x35  Android 2.3, +          "SSL_RSA_WITH_3DES_EDE_CBC_SHA",           // 0x00,0x0A  Android 2.3  (Deprecated in L), +          "SSL_RSA_WITH_RC4_128_SHA",                // 0x00,0x05  Android 2.3, +          "SSL_RSA_WITH_RC4_128_MD5"                 // 0x00,0x04  Android 2.3  (Deprecated in L), +      .tlsVersions(TLS_1_2, TLS_1_1, TLS_1_0, SSL_3_0), +      .tlsVersions(SSL_3_0), +  public List<String> cipherSuites() {, +    return Util.immutableList(cipherSuites);, +  public List<String> tlsVersions() {, +    return Util.immutableList(tlsVersions);, +      return "ConnectionSpec(cipherSuites=" + Arrays.toString(cipherSuites), +          + ", tlsVersions=" + Arrays.toString(tlsVersions), +    public Builder cipherSuites(String... cipherSuites) {, +      this.cipherSuites = cipherSuites.clone(); // Defensive copy., +    public Builder tlsVersions(String... tlsVersions) {, +      this.tlsVersions = tlsVersions.clone(); // Defensive copy., +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    callback.await(requestA.url()).assertFailure(, +        "Canceled", "stream was reset: CANCEL", "Socket closed");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +  public void assertFailure(String... messages) {, +    assertTrue(failure.getMessage(), Arrays.asList(messages).contains(failure.getMessage()));, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java, +  private static final String TLS_1_2 = "TLSv1.2"; // 2008., +  private static final String TLS_1_1 = "TLSv1.1"; // 2006., +  private static final String TLS_1_0 = "TLSv1";   // 1999., +  private static final String SSL_3_0 = "SSLv3";   // 1996., +          "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", // 0xC0,0x2B  Android L, +          "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",   // 0xC0,0x2F  Android L, +          "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",     // 0x00,0x9E  Android L, +          "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",    // 0xC0,0x0A  Android 4.0, +          "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",    // 0xC0,0x09  Android 4.0, +          "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",      // 0xC0,0x13  Android 4.0, +          "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",      // 0xC0,0x14  Android 4.0, +          "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA",        // 0xC0,0x07  Android 4.0, +          "TLS_ECDHE_RSA_WITH_RC4_128_SHA",          // 0xC0,0x11  Android 4.0, +          "TLS_DHE_RSA_WITH_AES_128_CBC_SHA",        // 0x00,0x33  Android 2.3, +          "TLS_DHE_DSS_WITH_AES_128_CBC_SHA",        // 0x00,0x32  Android 2.3, +          "TLS_DHE_RSA_WITH_AES_256_CBC_SHA",        // 0x00,0x39  Android 2.3, +          "TLS_RSA_WITH_AES_128_GCM_SHA256",         // 0x00,0x9C  Android L, +          "TLS_RSA_WITH_AES_128_CBC_SHA",            // 0x00,0x2F  Android 2.3, +          "TLS_RSA_WITH_AES_256_CBC_SHA",            // 0x00,0x35  Android 2.3, +          "SSL_RSA_WITH_3DES_EDE_CBC_SHA",           // 0x00,0x0A  Android 2.3  (Deprecated in L), +          "SSL_RSA_WITH_RC4_128_SHA",                // 0x00,0x05  Android 2.3, +          "SSL_RSA_WITH_RC4_128_MD5"                 // 0x00,0x04  Android 2.3  (Deprecated in L), +      .tlsVersions(TLS_1_2, TLS_1_1, TLS_1_0, SSL_3_0), +      .tlsVersions(SSL_3_0), +  public List<String> cipherSuites() {, +    return Util.immutableList(cipherSuites);, +  public List<String> tlsVersions() {, +    return Util.immutableList(tlsVersions);, +      return "ConnectionSpec(cipherSuites=" + Arrays.toString(cipherSuites), +          + ", tlsVersions=" + Arrays.toString(tlsVersions), +    public Builder cipherSuites(String... cipherSuites) {, +      this.cipherSuites = cipherSuites.clone(); // Defensive copy., +    public Builder tlsVersions(String... tlsVersions) {, +      this.tlsVersions = tlsVersions.clone(); // Defensive copy.]