[+++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.HttpsURLConnection;, +import javax.net.ssl.SSLSocketFactory;, +    private SSLSocketFactory sslSocketFactory;, +    private HostnameVerifier hostnameVerifier;, +    /**, +     * Sets the socket factory used to secure HTTPS connections., +     *, +     * <p>If unset, the {@link HttpsURLConnection#getDefaultSSLSocketFactory(), +     * system-wide default} SSL socket factory will be used., +     */, +    public OkHttpClient setSSLSocketFactory(SSLSocketFactory sslSocketFactory) {, +        this.sslSocketFactory = sslSocketFactory;, +        return this;, +    }, +, +    /**, +     * Sets the verifier used to confirm that response certificates apply to, +     * requested hostnames for HTTPS connections., +     *, +     * <p>If unset, the {@link HttpsURLConnection#getDefaultHostnameVerifier(), +     * system-wide default} hostname verifier will be used., +     */, +    public OkHttpClient setHostnameVerifier(HostnameVerifier hostnameVerifier) {, +        this.hostnameVerifier = hostnameVerifier;, +        return this;, +    }, +, +            HttpsURLConnectionImpl result = new HttpsURLConnectionImpl(, +            result.setSSLSocketFactory(this.sslSocketFactory != null, +                    ? this.sslSocketFactory, +                    : HttpsURLConnection.getDefaultSSLSocketFactory());, +            result.setHostnameVerifier(this.hostnameVerifier != null, +                    ? this.hostnameVerifier, +                    : HttpsURLConnection.getDefaultHostnameVerifier());, +            return result;, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.HttpsURLConnection;, +import javax.net.ssl.SSLSocketFactory;, +    private SSLSocketFactory sslSocketFactory;, +    private HostnameVerifier hostnameVerifier;, +    /**, +     * Sets the socket factory used to secure HTTPS connections., +     *, +     * <p>If unset, the {@link HttpsURLConnection#getDefaultSSLSocketFactory(), +     * system-wide default} SSL socket factory will be used., +     */, +    public OkHttpClient setSSLSocketFactory(SSLSocketFactory sslSocketFactory) {, +        this.sslSocketFactory = sslSocketFactory;, +        return this;, +    }, +, +    /**, +     * Sets the verifier used to confirm that response certificates apply to, +     * requested hostnames for HTTPS connections., +     *, +     * <p>If unset, the {@link HttpsURLConnection#getDefaultHostnameVerifier(), +     * system-wide default} hostname verifier will be used., +     */, +    public OkHttpClient setHostnameVerifier(HostnameVerifier hostnameVerifier) {, +        this.hostnameVerifier = hostnameVerifier;, +        return this;, +    }, +, +            HttpsURLConnectionImpl result = new HttpsURLConnectionImpl(, +            result.setSSLSocketFactory(this.sslSocketFactory != null, +                    ? this.sslSocketFactory, +                    : HttpsURLConnection.getDefaultSSLSocketFactory());, +            result.setHostnameVerifier(this.hostnameVerifier != null, +                    ? this.hostnameVerifier, +                    : HttpsURLConnection.getDefaultHostnameVerifier());, +            return result;, +++ b/src/test/java/com/squareup/okhttp/internal/net/http/URLConnectionTest.java, +        HttpURLConnection urlConnection = client.open(server.getUrl("/"));, +        HttpURLConnection urlConnection = client.open(server.getUrl("/"));, +        HttpURLConnection urlConnection = client.open(server.getUrl("/"));, +        HttpURLConnection urlConnection = client.open(server.getUrl("/"));, +        HttpURLConnection urlConnection = client.open(server.getUrl("/"));, +        HttpURLConnection urlConnection = client.open(server.getUrl("/"));, +        HttpURLConnection urlConnection = client.open(server.getUrl("/"));, +        HttpURLConnection connection = client.open(url);, +        HttpURLConnection connection = client.open(server.getUrl("/def"));, +        HttpURLConnection connection = client.open(server.getUrl("/"));, +        HttpURLConnection connection = client.open(server.getUrl("/"));, +        assertContent("ABCDE", client.open(server.getUrl("/")), 5);, +        assertContent("ABCDE", client.open(server.getUrl("/")), 5);, +        assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.getUrl("/foo")));, +        assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.getUrl("/bar?baz=quux")));, +        assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.getUrl("/z")));, +        assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.getUrl("/foo")));, +        assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.getUrl("/bar?baz=quux")));, +        assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.getUrl("/z")));, +        assertContent("This connection won't pool properly", client.open(server.getUrl("/a")));, +        assertContent("This comes after a busted connection", client.open(server.getUrl("/b")));, +        HttpURLConnection conn = client.open(server.getUrl("/"));, +        HttpURLConnection conn = client.open(url);, +        client.setSSLSocketFactory(sslContext.getSocketFactory());, +        client.setHostnameVerifier(new RecordingHostnameVerifier());]