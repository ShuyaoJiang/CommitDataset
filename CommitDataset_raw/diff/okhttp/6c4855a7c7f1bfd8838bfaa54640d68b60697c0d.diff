[+++ b/mockwebserver/pom.xml, +    <dependency>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/mockwebserver/pom.xml, +    <dependency>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +import static org.assertj.core.api.Assertions.assertThat;, +    assertThat(requestsMade.size()).isEqualTo(0);, +    assertThat(requestsMade.size()).isEqualTo(1);, +    // First response is still waiting., +    assertThat(firstResponseCode.get()).isEqualTo(0);, +    // Second response is done., +    assertThat(secondResponseCode.get()).isEqualTo(200);, +    // And now it's done!, +    assertThat(firstResponseCode.get()).isEqualTo(200);, +    // (Still done)., +    assertThat(secondResponseCode.get()).isEqualTo(200);, +++ b/mockwebserver/pom.xml, +    <dependency>, +      <groupId>org.assertj</groupId>, +      <artifactId>assertj-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +import static org.assertj.core.api.Assertions.assertThat;, +    assertThat(requestsMade.size()).isEqualTo(0);, +    assertThat(requestsMade.size()).isEqualTo(1);, +    // First response is still waiting., +    assertThat(firstResponseCode.get()).isEqualTo(0);, +    // Second response is done., +    assertThat(secondResponseCode.get()).isEqualTo(200);, +    // And now it's done!, +    assertThat(firstResponseCode.get()).isEqualTo(200);, +    // (Still done)., +    assertThat(secondResponseCode.get()).isEqualTo(200);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static org.assertj.core.api.Assertions.assertThat;, +import static org.assertj.core.data.Offset.offset;, +    assertThat(headersToList(response)).containsExactly("Content-Length: 0");, +    assertThat(response.getStatus()).isEqualTo("HTTP/1.1 200 OK");, +      assertThat(response.getStatus()).isEqualTo(("HTTP/1.1 " + i + " " + expectedReason));, +      assertThat(headersToList(response)).containsExactly("Content-Length: 0");, +    assertThat(headersToList(response)).containsExactly("Content-Length: 0");, +    assertThat(response.getStatus()).isEqualTo("HTTP/1.1 202 That'll do pig");, +    assertThat(headersToList(response)).containsExactly("Content-Length: 3");, +    assertThat(response.getBody().readUtf8()).isEqualTo("ABC");, +    assertThat(headersToList(response)).containsExactly("Cookie: s=square", "Cookie: a=android");, +    assertThat(headersToList(response)).containsExactly("Cookies: delicious", "cookie: r=robot");, +    assertThat(headersToList(response)).containsExactly("Cookie: a=android");, +    assertThat(connection.getResponseCode()).isEqualTo(HttpURLConnection.HTTP_OK);, +    assertThat(reader.readLine()).isEqualTo("hello world");, +    assertThat(request.getRequestLine()).isEqualTo("GET / HTTP/1.1");, +    assertThat(request.getHeader("Accept-Language")).isEqualTo("en-US");, +    assertThat(reader.readLine()).isEqualTo("This is the new location!");, +    assertThat(first.getRequestLine()).isEqualTo("GET / HTTP/1.1");, +    assertThat(redirect.getRequestLine()).isEqualTo("GET /new-path HTTP/1.1");, +    assertThat(reader.readLine()).isEqualTo("enqueued in the background");, +    assertThat(in.read()).isEqualTo('A');, +    assertThat(in.read()).isEqualTo('B');, +    assertThat(in.read()).isEqualTo('C');, +    assertThat(in2.read()).isEqualTo('D');, +    assertThat(in2.read()).isEqualTo('E');, +    assertThat(in2.read()).isEqualTo('F');, +    assertThat(in2.read()).isEqualTo(-1);, +    assertThat(server.takeRequest().getSequenceNumber()).isEqualTo(0);, +    assertThat(server.takeRequest().getSequenceNumber()).isEqualTo(0);, +    assertThat(in.read()).isEqualTo(-1);, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(in.read()).isEqualTo('A');, +    assertThat(in.read()).isEqualTo('B');, +    assertThat(in.read()).isEqualTo('C');, +    assertThat(in.read()).isEqualTo('D');, +    assertThat(in.read()).isEqualTo('E');, +    assertThat(in.read()).isEqualTo('F');, +    assertThat(in.read()).isEqualTo(-1);, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(in.read()).isEqualTo('A');, +    assertThat(elapsedMillis >= 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    // Halfway +/- 0.5%, +    assertThat((float) i).isCloseTo(512f, offset(5f));, +    assertThat(connection.getContentLength()).isEqualTo(2);, +    assertThat(in.read()).isEqualTo('a');, +      assertThat(byteRead).isEqualTo(-1);, +    assertThat(server.getPort() > 0).isTrue();, +    assertThat(server.getHostName()).isNotNull();, +    assertThat(server.toProxyAddress()).isNotNull();]