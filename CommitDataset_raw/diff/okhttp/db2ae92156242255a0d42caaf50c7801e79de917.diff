[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +    assertEquals(TlsVersion.TLS_1_2, fallbackRequest.getTlsVersion());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +    assertEquals(TlsVersion.TLS_1_2, fallbackRequest.getTlsVersion());, +++ b/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java, +import java.security.interfaces.RSAPrivateKey;, +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc5208">PKCS, +   * #8</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc8017">PKCS, +   * #1</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +    if (!(keyPair.getPrivate() instanceof RSAPrivateKey)) {, +      throw new IllegalStateException("PKCS1 only supports RSA keys");, +    }, +  /** Build a held certificate with reasonable defaults. */, +    private String keyAlgorithm;, +    private int keySize;, +, +    public Builder() {, +      ecdsa256();, +    }, +    /**, +     * Configure the certificate to generate a 256-bit ECDSA key, which provides about 128 bits of, +     * security. ECDSA keys are noticeably faster than RSA keys., +     *, +     * <p>This is the default configuration and has been since this API was introduced in OkHttp, +     * 3.11.0. Note that the default may change in future releases., +     */, +    public Builder ecdsa256() {, +      keyAlgorithm = "ECDSA";, +      keySize = 256;, +      return this;, +    }, +, +    /**, +     * Configure the certificate to generate a 2048-bit RSA key, which provides about 112 bits of, +     * security. RSA keys are interoperable with very old clients that don't support ECDSA., +     */, +    public Builder rsa2048() {, +      keyAlgorithm = "RSA";, +      keySize = 2048;, +      return this;, +    }, +, +      generator.setSignatureAlgorithm(signedByKeyPair.getPrivate() instanceof RSAPrivateKey, +          ? "SHA256WithRSAEncryption", +          : "SHA256withECDSA");, +        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(keyAlgorithm, "BC");, +        keyPairGenerator.initialize(keySize, new SecureRandom());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +        // Attempt RESTRICTED_TLS then fall back to MODERN_TLS., +        .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS)), +    assertEquals(TlsVersion.TLS_1_2, fallbackRequest.getTlsVersion());, +++ b/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java, +import java.security.interfaces.RSAPrivateKey;, +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc5208">PKCS, +   * #8</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc8017">PKCS, +   * #1</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +    if (!(keyPair.getPrivate() instanceof RSAPrivateKey)) {, +      throw new IllegalStateException("PKCS1 only supports RSA keys");, +    }, +  /** Build a held certificate with reasonable defaults. */, +    private String keyAlgorithm;, +    private int keySize;, +, +    public Builder() {, +      ecdsa256();, +    }]