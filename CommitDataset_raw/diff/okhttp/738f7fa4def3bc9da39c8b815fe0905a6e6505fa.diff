[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertEquals("CLEARTEXT communication not enabled for client", expected.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertEquals("CLEARTEXT communication not enabled for client", expected.getMessage());, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +  private static final List<ConnectionSpec> DEFAULT_CONNECTION_SPECS = Util.immutableList(, +      ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS, ConnectionSpec.CLEARTEXT);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertEquals("CLEARTEXT communication not enabled for client", expected.getMessage());, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +  private static final List<ConnectionSpec> DEFAULT_CONNECTION_SPECS = Util.immutableList(, +      ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS, ConnectionSpec.CLEARTEXT);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +    if (route.address().sslSocketFactory() == null) {, +      if (!connectionSpecs.contains(ConnectionSpec.CLEARTEXT)) {, +            "CLEARTEXT communication not enabled for client"));, +      }, +      String host = route.address().url().host();, +      if (!Platform.get().isCleartextTrafficPermitted(host)) {, +        throw new RouteException(new UnknownServiceException(, +            "CLEARTEXT communication to " + host + " not permitted by network security policy"));, +      }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertEquals("CLEARTEXT communication not enabled for client", expected.getMessage());, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +  private static final List<ConnectionSpec> DEFAULT_CONNECTION_SPECS = Util.immutableList(, +      ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS, ConnectionSpec.CLEARTEXT);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +    if (route.address().sslSocketFactory() == null) {, +      if (!connectionSpecs.contains(ConnectionSpec.CLEARTEXT)) {, +            "CLEARTEXT communication not enabled for client"));, +      }, +      String host = route.address().url().host();, +      if (!Platform.get().isCleartextTrafficPermitted(host)) {, +        throw new RouteException(new UnknownServiceException(, +            "CLEARTEXT communication to " + host + " not permitted by network security policy"));, +      }, +++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java, +  @Override public boolean isCleartextTrafficPermitted(String hostname) {, +          .getMethod("isCleartextTrafficPermitted", String.class);, +      return (boolean) isCleartextTrafficPermittedMethod.invoke(networkSecurityPolicy, hostname);, +    } catch (ClassNotFoundException | NoSuchMethodException e) {, +      return super.isCleartextTrafficPermitted(hostname);, +    } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertEquals("CLEARTEXT communication not enabled for client", expected.getMessage());, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +  private static final List<ConnectionSpec> DEFAULT_CONNECTION_SPECS = Util.immutableList(, +      ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS, ConnectionSpec.CLEARTEXT);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +    if (route.address().sslSocketFactory() == null) {, +      if (!connectionSpecs.contains(ConnectionSpec.CLEARTEXT)) {, +            "CLEARTEXT communication not enabled for client"));, +      }, +      String host = route.address().url().host();, +      if (!Platform.get().isCleartextTrafficPermitted(host)) {, +        throw new RouteException(new UnknownServiceException(, +            "CLEARTEXT communication to " + host + " not permitted by network security policy"));, +      }, +++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java, +  @Override public boolean isCleartextTrafficPermitted(String hostname) {, +          .getMethod("isCleartextTrafficPermitted", String.class);, +      return (boolean) isCleartextTrafficPermittedMethod.invoke(networkSecurityPolicy, hostname);, +    } catch (ClassNotFoundException | NoSuchMethodException e) {, +      return super.isCleartextTrafficPermitted(hostname);, +    } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {, +++ b/okhttp/src/main/java/okhttp3/internal/platform/Platform.java, +  public boolean isCleartextTrafficPermitted(String hostname) {]