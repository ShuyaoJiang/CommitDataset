[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +          // not filtering out illegal headers on read., +      for (int i = 0, size = nameValueBlock.size(); i < size; i += 2) {, +        String name = nameValueBlock.get(i);, +        // our SpdyTransport.writeNameValueBlock hard-codes :host, +        // TODO: is :authority literally the same value as :host?, +        // https://github.com/http2/http2-spec/issues/334, +        if (":host".equals(name)) {, +          nameValueBlock.set(i, ":authority");, +        } else if (shouldDropHeader(name)) {, +          //TODO: Avoid creating headers like these., +          nameValueBlock.remove(i);, +          nameValueBlock.remove(i);, +          i -= 2;, +        }, +      }, +, +  /**, +   * Leniently drop as opposed to throwing malformed., +   * http://tools.ietf.org/html/draft-ietf-httpbis-http2-09#section-8.1.3, +   */, +  private static boolean shouldDropHeader(String name) {, +    return name.equals("connection"), +        || name.equals("host") // host is not supported in http/2, +        || name.equals("keep-alive"), +        || name.equals("proxy-connection"), +        || name.equals("te"), +        || name.equals("transfer-encoding"), +        || name.equals("encoding"), +        || name.equals("upgrade");, +  }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +          // not filtering out illegal headers on read., +      for (int i = 0, size = nameValueBlock.size(); i < size; i += 2) {, +        String name = nameValueBlock.get(i);, +        // our SpdyTransport.writeNameValueBlock hard-codes :host, +        // TODO: is :authority literally the same value as :host?, +        // https://github.com/http2/http2-spec/issues/334, +        if (":host".equals(name)) {, +          nameValueBlock.set(i, ":authority");, +        } else if (shouldDropHeader(name)) {, +          //TODO: Avoid creating headers like these., +          nameValueBlock.remove(i);, +          nameValueBlock.remove(i);, +          i -= 2;, +        }, +      }, +, +  /**, +   * Leniently drop as opposed to throwing malformed., +   * http://tools.ietf.org/html/draft-ietf-httpbis-http2-09#section-8.1.3, +   */, +  private static boolean shouldDropHeader(String name) {, +    return name.equals("connection"), +        || name.equals("host") // host is not supported in http/2, +        || name.equals("keep-alive"), +        || name.equals("proxy-connection"), +        || name.equals("te"), +        || name.equals("transfer-encoding"), +        || name.equals("encoding"), +        || name.equals("upgrade");, +  }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Spdy3.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +          // not filtering out illegal headers on read., +      for (int i = 0, size = nameValueBlock.size(); i < size; i += 2) {, +        String name = nameValueBlock.get(i);, +        // our SpdyTransport.writeNameValueBlock hard-codes :host, +        // TODO: is :authority literally the same value as :host?, +        // https://github.com/http2/http2-spec/issues/334, +        if (":host".equals(name)) {, +          nameValueBlock.set(i, ":authority");, +        } else if (shouldDropHeader(name)) {, +          //TODO: Avoid creating headers like these., +          nameValueBlock.remove(i);, +          nameValueBlock.remove(i);, +          i -= 2;, +        }, +      }, +, +  /**, +   * Leniently drop as opposed to throwing malformed., +   * http://tools.ietf.org/html/draft-ietf-httpbis-http2-09#section-8.1.3, +   */, +  private static boolean shouldDropHeader(String name) {, +    return name.equals("connection"), +        || name.equals("host") // host is not supported in http/2, +        || name.equals("keep-alive"), +        || name.equals("proxy-connection"), +        || name.equals("te"), +        || name.equals("transfer-encoding"), +        || name.equals("encoding"), +        || name.equals("upgrade");, +  }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Spdy3.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +          // not filtering out illegal headers on read., +      for (int i = 0, size = nameValueBlock.size(); i < size; i += 2) {, +        String name = nameValueBlock.get(i);]