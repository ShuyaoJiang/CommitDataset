[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private InetAddress inetAddress;, +    if (inetAddress == null) throw new IllegalStateException("Call start() before getHostName()");, +    return inetAddress.getHostName();, +    if (inetAddress == null) {, +    return new Proxy(Proxy.Type.HTTP, new InetSocketAddress(inetAddress, getPort()));, +   * Starts the server., +    inetAddress = InetAddress.getByName("localhost");, +    serverSocket.setReuseAddress(port != 0); // Reuse the port if the port number was specified., +    serverSocket.bind(new InetSocketAddress(inetAddress, port), 50);, +    this.port = serverSocket.getLocalPort();, +    executor.execute(new NamedRunnable("MockWebServer %s", this.port) {, +        // See warnings associated with these socket policies in SocketPolicy., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private InetAddress inetAddress;, +    if (inetAddress == null) throw new IllegalStateException("Call start() before getHostName()");, +    return inetAddress.getHostName();, +    if (inetAddress == null) {, +    return new Proxy(Proxy.Type.HTTP, new InetSocketAddress(inetAddress, getPort()));, +   * Starts the server., +    inetAddress = InetAddress.getByName("localhost");, +    serverSocket.setReuseAddress(port != 0); // Reuse the port if the port number was specified., +    serverSocket.bind(new InetSocketAddress(inetAddress, port), 50);, +    this.port = serverSocket.getLocalPort();, +    executor.execute(new NamedRunnable("MockWebServer %s", this.port) {, +        // See warnings associated with these socket policies in SocketPolicy., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/**, + * What should be done with the incoming socket., + *, + * <p>Be careful when using values like {@link #DISCONNECT_AT_END}, {@link #SHUTDOWN_INPUT_AT_END}, + * and {@link #SHUTDOWN_OUTPUT_AT_END} that close a socket after a response, and where there are, + * follow-up requests. The client is unblocked and free to continue as soon as it has received the, + * entire response body. If and when the client makes a subsequent request using a pooled socket the, + * server may not have had time to close the socket. The socket will be closed at an indeterminate, + * point before or during the second request. It may be closed after client has started sending the, + * request body. If a request body is not retryable then the client may fail the request, making, + * client behavior non-deterministic. Add delays in the client to improve the chances that the, + * server has closed the socket before follow up requests are made., + */, +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +   * Don't respond to the request but keep the socket open. For testing, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private InetAddress inetAddress;, +    if (inetAddress == null) throw new IllegalStateException("Call start() before getHostName()");, +    return inetAddress.getHostName();, +    if (inetAddress == null) {, +    return new Proxy(Proxy.Type.HTTP, new InetSocketAddress(inetAddress, getPort()));, +   * Starts the server., +    inetAddress = InetAddress.getByName("localhost");, +    serverSocket.setReuseAddress(port != 0); // Reuse the port if the port number was specified., +    serverSocket.bind(new InetSocketAddress(inetAddress, port), 50);, +    this.port = serverSocket.getLocalPort();, +    executor.execute(new NamedRunnable("MockWebServer %s", this.port) {, +        // See warnings associated with these socket policies in SocketPolicy., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/**, + * What should be done with the incoming socket., + *, + * <p>Be careful when using values like {@link #DISCONNECT_AT_END}, {@link #SHUTDOWN_INPUT_AT_END}, + * and {@link #SHUTDOWN_OUTPUT_AT_END} that close a socket after a response, and where there are, + * follow-up requests. The client is unblocked and free to continue as soon as it has received the, + * entire response body. If and when the client makes a subsequent request using a pooled socket the, + * server may not have had time to close the socket. The socket will be closed at an indeterminate, + * point before or during the second request. It may be closed after client has started sending the, + * request body. If a request body is not retryable then the client may fail the request, making, + * client behavior non-deterministic. Add delays in the client to improve the chances that the, + * server has closed the socket before follow up requests are made., + */, +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +   * Don't respond to the request but keep the socket open. For testing, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java, +import static org.junit.Assert.assertSame;, +    assertEquals(lastModifiedDate, conditionalRequest.getHeader("If-Modified-Since"));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private InetAddress inetAddress;, +    if (inetAddress == null) throw new IllegalStateException("Call start() before getHostName()");, +    return inetAddress.getHostName();, +    if (inetAddress == null) {, +    return new Proxy(Proxy.Type.HTTP, new InetSocketAddress(inetAddress, getPort()));, +   * Starts the server., +    inetAddress = InetAddress.getByName("localhost");, +    serverSocket.setReuseAddress(port != 0); // Reuse the port if the port number was specified., +    serverSocket.bind(new InetSocketAddress(inetAddress, port), 50);, +    this.port = serverSocket.getLocalPort();, +    executor.execute(new NamedRunnable("MockWebServer %s", this.port) {, +        // See warnings associated with these socket policies in SocketPolicy., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/**, + * What should be done with the incoming socket.]