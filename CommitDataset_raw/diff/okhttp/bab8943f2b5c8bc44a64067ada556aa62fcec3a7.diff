[+++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +    Headers okHeaders = extractOkResponseHeaders(httpUrlConnection, okResponseBuilder);, +    Headers okHeaders = extractOkHeaders(javaResponse, okResponseBuilder);, +      Headers headers = extractOkHeaders(requestHeaders, null);, +    final Headers headers = withSyntheticHeaders(response);, +    okResponse = okResponse.newBuilder(), +        .body(null), +        .headers(withSyntheticHeaders(okResponse)), +        .build();, +  private static Headers withSyntheticHeaders(Response okResponse) {, +    return okResponse.headers().newBuilder(), +        .add(OkHeaders.SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis())), +        .add(OkHeaders.RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis())), +        .build();, +  }, +, +  private static Headers extractOkHeaders(, +      CacheResponse javaResponse, Response.Builder okResponseBuilder) throws IOException {, +    return extractOkHeaders(javaResponseHeaders, okResponseBuilder);, +  private static Headers extractOkResponseHeaders(, +      HttpURLConnection httpUrlConnection, Response.Builder okResponseBuilder) {, +    return extractOkHeaders(javaResponseHeaders, okResponseBuilder);, +   * entry (one with a {@code null} key) is discarded. Special internal headers used to track cache, +   * metadata are omitted from the result and added to {@code okResponseBuilder} instead., +  static Headers extractOkHeaders(, +      Map<String, List<String>> javaHeaders, Response.Builder okResponseBuilder) {, +      if (okResponseBuilder != null && javaHeader.getValue().size() == 1) {, +        if (name.equals(OkHeaders.SENT_MILLIS)) {, +          okResponseBuilder.sentRequestAtMillis(Long.valueOf(javaHeader.getValue().get(0)));, +          continue;, +        }, +        if (name.equals(OkHeaders.RECEIVED_MILLIS)) {, +          okResponseBuilder.receivedResponseAtMillis(Long.valueOf(javaHeader.getValue().get(0)));, +          continue;, +        }, +      }, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +      System.out.println(e.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +    return responseQueue.take();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +    Headers okHeaders = extractOkResponseHeaders(httpUrlConnection, okResponseBuilder);, +    Headers okHeaders = extractOkHeaders(javaResponse, okResponseBuilder);, +      Headers headers = extractOkHeaders(requestHeaders, null);, +    final Headers headers = withSyntheticHeaders(response);, +    okResponse = okResponse.newBuilder(), +        .body(null), +        .headers(withSyntheticHeaders(okResponse)), +        .build();, +  private static Headers withSyntheticHeaders(Response okResponse) {, +    return okResponse.headers().newBuilder(), +        .add(OkHeaders.SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis())), +        .add(OkHeaders.RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis())), +        .build();, +  }, +, +  private static Headers extractOkHeaders(, +      CacheResponse javaResponse, Response.Builder okResponseBuilder) throws IOException {, +    return extractOkHeaders(javaResponseHeaders, okResponseBuilder);, +  private static Headers extractOkResponseHeaders(, +      HttpURLConnection httpUrlConnection, Response.Builder okResponseBuilder) {, +    return extractOkHeaders(javaResponseHeaders, okResponseBuilder);, +   * entry (one with a {@code null} key) is discarded. Special internal headers used to track cache, +   * metadata are omitted from the result and added to {@code okResponseBuilder} instead., +  static Headers extractOkHeaders(, +      Map<String, List<String>> javaHeaders, Response.Builder okResponseBuilder) {, +      if (okResponseBuilder != null && javaHeader.getValue().size() == 1) {, +        if (name.equals(OkHeaders.SENT_MILLIS)) {]