[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private String status;, +    setResponseCode(200);, +    String reason = "Mock Response";, +    if (code >= 100 && code < 200) {, +      reason = "Informational";, +    } else if (code >= 200 && code < 300) {, +      reason = "OK";, +    } else if (code >= 300 && code < 400) {, +      reason = "Redirection";, +    } else if (code >= 400 && code < 500) {, +      reason = "Client Error";, +    } else if (code >= 500 && code < 600) {, +      reason = "Server Error";, +    }, +    return setStatus("HTTP/1.1 " + code + " " + reason);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private String status;, +    setResponseCode(200);, +    String reason = "Mock Response";, +    if (code >= 100 && code < 200) {, +      reason = "Informational";, +    } else if (code >= 200 && code < 300) {, +      reason = "OK";, +    } else if (code >= 300 && code < 400) {, +      reason = "Redirection";, +    } else if (code >= 400 && code < 500) {, +      reason = "Client Error";, +    } else if (code >= 500 && code < 600) {, +      reason = "Server Error";, +    }, +    return setStatus("HTTP/1.1 " + code + " " + reason);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void setResponseMockReason() {, +    String[] reasons = {, +        "Mock Response",, +        "Informational",, +        "OK",, +        "Redirection",, +        "Client Error",, +        "Server Error",, +        "Mock Response", +    };, +    for (int i = 0; i < 600; i++) {, +      MockResponse response = new MockResponse().setResponseCode(i);, +      String expectedReason = reasons[i / 100];, +      assertEquals("HTTP/1.1 " + i + " " + expectedReason, response.getStatus());, +      assertEquals(Arrays.asList("Content-Length: 0"), headersToList(response));, +    }, +  }, +, +  @Test public void setStatusControlsWholeStatusLine() {, +    MockResponse response = new MockResponse().setStatus("HTTP/1.1 202 That'll do pig");, +    assertEquals(Arrays.asList("Content-Length: 0"), headersToList(response));, +    assertEquals("HTTP/1.1 202 That'll do pig", response.getStatus());, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private String status;, +    setResponseCode(200);, +    String reason = "Mock Response";, +    if (code >= 100 && code < 200) {, +      reason = "Informational";, +    } else if (code >= 200 && code < 300) {, +      reason = "OK";, +    } else if (code >= 300 && code < 400) {, +      reason = "Redirection";, +    } else if (code >= 400 && code < 500) {, +      reason = "Client Error";, +    } else if (code >= 500 && code < 600) {, +      reason = "Server Error";, +    }, +    return setStatus("HTTP/1.1 " + code + " " + reason);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void setResponseMockReason() {, +    String[] reasons = {, +        "Mock Response",, +        "Informational",, +        "OK",, +        "Redirection",, +        "Client Error",, +        "Server Error",, +        "Mock Response", +    };, +    for (int i = 0; i < 600; i++) {, +      MockResponse response = new MockResponse().setResponseCode(i);, +      String expectedReason = reasons[i / 100];, +      assertEquals("HTTP/1.1 " + i + " " + expectedReason, response.getStatus());, +      assertEquals(Arrays.asList("Content-Length: 0"), headersToList(response));, +    }, +  }, +, +  @Test public void setStatusControlsWholeStatusLine() {, +    MockResponse response = new MockResponse().setStatus("HTTP/1.1 202 That'll do pig");, +    assertEquals(Arrays.asList("Content-Length: 0"), headersToList(response));, +    assertEquals("HTTP/1.1 202 That'll do pig", response.getStatus());, +  }, +, +++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java, +    server.enqueue(new MockResponse().setResponseCode(200));]