[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void dnsReturnsZeroIpAddresses() throws Exception {, +    // Configure a DNS that returns our local MockWebServer for android.com., +    FakeDns dns = new FakeDns();, +    List<InetAddress> ipAddresses = new ArrayList<>();, +    dns.set("android.com", ipAddresses);, +    client = client.newBuilder(), +        .dns(dns), +        .build();, +, +    server.enqueue(new MockResponse());, +    Request request = new Request.Builder(), +        .url(server.url("/").newBuilder().host("android.com").build()), +        .build();, +    executeSynchronously(request).assertFailure(dns + " returned no addresses for android.com");, +, +    dns.assertRequests("android.com");, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void dnsReturnsZeroIpAddresses() throws Exception {, +    // Configure a DNS that returns our local MockWebServer for android.com., +    FakeDns dns = new FakeDns();, +    List<InetAddress> ipAddresses = new ArrayList<>();, +    dns.set("android.com", ipAddresses);, +    client = client.newBuilder(), +        .dns(dns), +        .build();, +, +    server.enqueue(new MockResponse());, +    Request request = new Request.Builder(), +        .url(server.url("/").newBuilder().host("android.com").build()), +        .build();, +    executeSynchronously(request).assertFailure(dns + " returned no addresses for android.com");, +, +    dns.assertRequests("android.com");, +  }, +++ b/okhttp/src/main/java/okhttp3/Headers.java, +      if (value == null) throw new NullPointerException("value == null");, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void dnsReturnsZeroIpAddresses() throws Exception {, +    // Configure a DNS that returns our local MockWebServer for android.com., +    FakeDns dns = new FakeDns();, +    List<InetAddress> ipAddresses = new ArrayList<>();, +    dns.set("android.com", ipAddresses);, +    client = client.newBuilder(), +        .dns(dns), +        .build();, +, +    server.enqueue(new MockResponse());, +    Request request = new Request.Builder(), +        .url(server.url("/").newBuilder().host("android.com").build()), +        .build();, +    executeSynchronously(request).assertFailure(dns + " returned no addresses for android.com");, +, +    dns.assertRequests("android.com");, +  }, +++ b/okhttp/src/main/java/okhttp3/Headers.java, +      if (value == null) throw new NullPointerException("value == null");, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteSelector.java, +import java.net.UnknownHostException;, +      if (addresses.isEmpty()) {, +        throw new UnknownHostException(address.dns() + " returned no addresses for " + socketHost);, +      }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void dnsReturnsZeroIpAddresses() throws Exception {, +    // Configure a DNS that returns our local MockWebServer for android.com., +    FakeDns dns = new FakeDns();, +    List<InetAddress> ipAddresses = new ArrayList<>();, +    dns.set("android.com", ipAddresses);, +    client = client.newBuilder(), +        .dns(dns), +        .build();, +, +    server.enqueue(new MockResponse());, +    Request request = new Request.Builder(), +        .url(server.url("/").newBuilder().host("android.com").build()), +        .build();, +    executeSynchronously(request).assertFailure(dns + " returned no addresses for android.com");, +, +    dns.assertRequests("android.com");, +  }, +++ b/okhttp/src/main/java/okhttp3/Headers.java, +      if (value == null) throw new NullPointerException("value == null");, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteSelector.java, +import java.net.UnknownHostException;, +      if (addresses.isEmpty()) {, +        throw new UnknownHostException(address.dns() + " returned no addresses for " + socketHost);, +      }, +, +++ b/pom.xml]