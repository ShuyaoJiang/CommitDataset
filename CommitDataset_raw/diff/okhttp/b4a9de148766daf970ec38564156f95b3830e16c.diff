[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import java.net.UnknownServiceException;, +    } catch (UnknownServiceException expected) {, +      assertTrue(expected.getMessage().contains("no connection specs"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import java.net.UnknownServiceException;, +    } catch (UnknownServiceException expected) {, +      assertTrue(expected.getMessage().contains("no connection specs"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java, +  @Test, +  public void tls_stringCiphersAndVersions() throws Exception {, +    // Supporting arbitrary input strings allows users to enable suites and versions that are not, +    // yet known to the library, but are supported by the platform., +    ConnectionSpec tlsSpec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +        .cipherSuites("MAGIC-CIPHER"), +        .tlsVersions("TLS9k"), +        .build();, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import java.net.UnknownServiceException;, +    } catch (UnknownServiceException expected) {, +      assertTrue(expected.getMessage().contains("no connection specs"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java, +  @Test, +  public void tls_stringCiphersAndVersions() throws Exception {, +    // Supporting arbitrary input strings allows users to enable suites and versions that are not, +    // yet known to the library, but are supported by the platform., +    ConnectionSpec tlsSpec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +        .cipherSuites("MAGIC-CIPHER"), +        .tlsVersions("TLS9k"), +        .build();, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import java.util.concurrent.TimeUnit;, +  @Test public void timeoutValidRange() {, +    OkHttpClient client = new OkHttpClient();, +    try {, +      client.setConnectTimeout(1, TimeUnit.NANOSECONDS);, +    } catch (IllegalArgumentException ignored) {, +    }, +    try {, +      client.setWriteTimeout(1, TimeUnit.NANOSECONDS);, +    } catch (IllegalArgumentException ignored) {, +    }, +    try {, +      client.setReadTimeout(1, TimeUnit.NANOSECONDS);, +    } catch (IllegalArgumentException ignored) {, +    }, +    try {, +      client.setConnectTimeout(365, TimeUnit.DAYS);, +    } catch (IllegalArgumentException ignored) {, +    }, +    try {, +      client.setWriteTimeout(365, TimeUnit.DAYS);, +    } catch (IllegalArgumentException ignored) {, +    }, +    try {, +      client.setReadTimeout(365, TimeUnit.DAYS);, +    } catch (IllegalArgumentException ignored) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import java.net.UnknownServiceException;, +    } catch (UnknownServiceException expected) {, +      assertTrue(expected.getMessage().contains("no connection specs"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java, +  @Test, +  public void tls_stringCiphersAndVersions() throws Exception {, +    // Supporting arbitrary input strings allows users to enable suites and versions that are not, +    // yet known to the library, but are supported by the platform., +    ConnectionSpec tlsSpec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +        .cipherSuites("MAGIC-CIPHER"), +        .tlsVersions("TLS9k"), +        .build();, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import java.util.concurrent.TimeUnit;, +  @Test public void timeoutValidRange() {, +    OkHttpClient client = new OkHttpClient();, +    try {, +      client.setConnectTimeout(1, TimeUnit.NANOSECONDS);, +    } catch (IllegalArgumentException ignored) {, +    }, +    try {, +      client.setWriteTimeout(1, TimeUnit.NANOSECONDS);, +    } catch (IllegalArgumentException ignored) {, +    }, +    try {, +      client.setReadTimeout(1, TimeUnit.NANOSECONDS);, +    } catch (IllegalArgumentException ignored) {, +    }, +    try {, +      client.setConnectTimeout(365, TimeUnit.DAYS);, +    } catch (IllegalArgumentException ignored) {, +    }, +    try {]