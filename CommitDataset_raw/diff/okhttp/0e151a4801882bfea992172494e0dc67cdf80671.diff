[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Rule public final TestRule timeout = new Timeout(30_000);, +        .assertFailureMatches("unexpected end of stream on Connection.*", +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Rule public final TestRule timeout = new Timeout(30_000);, +        .assertFailureMatches("unexpected end of stream on Connection.*", +++ b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java, +  public RecordedResponse assertFailureMatches(String pattern) {, +    assertTrue(failure.getMessage(), failure.getMessage().matches(pattern));, +    return this;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Rule public final TestRule timeout = new Timeout(30_000);, +        .assertFailureMatches("unexpected end of stream on Connection.*", +++ b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java, +  public RecordedResponse assertFailureMatches(String pattern) {, +    assertTrue(failure.getMessage(), failure.getMessage().matches(pattern));, +    return this;, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +  @Ignore // See https://github.com/square/okhttp/issues/578, +  @Test(timeout = 3000) public void readResponseHeaderTimeout() throws Exception {, +    Call call = client.newCall(new Request.Builder(), +    Response response = call.execute();, +    assertEquals("A", response.body().string());, +    char[] body = new char[2048]; // 2KiB to read., +    Arrays.fill(body, 'y');, +        .setBody(new String(body)), +    Call call = client.newCall(new Request.Builder(), +    Response response = call.execute();, +, +      response.body().string();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Rule public final TestRule timeout = new Timeout(30_000);, +        .assertFailureMatches("unexpected end of stream on Connection.*", +++ b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java, +  public RecordedResponse assertFailureMatches(String pattern) {, +    assertTrue(failure.getMessage(), failure.getMessage().matches(pattern));, +    return this;, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +  @Ignore // See https://github.com/square/okhttp/issues/578, +  @Test(timeout = 3000) public void readResponseHeaderTimeout() throws Exception {, +    Call call = client.newCall(new Request.Builder(), +    Response response = call.execute();, +    assertEquals("A", response.body().string());, +    char[] body = new char[2048]; // 2KiB to read., +    Arrays.fill(body, 'y');, +        .setBody(new String(body)), +    Call call = client.newCall(new Request.Builder(), +    Response response = call.execute();, +, +      response.body().string();, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +    PingRunnable() {, +    }, +, +  void writePingFrame() {]