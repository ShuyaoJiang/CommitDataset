[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +      InetAddress inetAddress = socket.getLocalAddress();, +      int localPort = socket.getLocalPort();, +      this.requestUrl =, +          HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, localPort, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +      InetAddress inetAddress = socket.getLocalAddress();, +      int localPort = socket.getLocalPort();, +      this.requestUrl =, +          HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, localPort, path));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +import java.net.Inet4Address;, +import java.net.InetSocketAddress;, +import java.util.Random;, +    private final InetAddress localAddress;, +    private final int remotePort;, +    private final InetAddress remoteAddress;, +    private final int localPort;, +    private FakeSocket(int localPort) {, +      this(Inet4Address.getLoopbackAddress(), localPort);, +    }, +, +    private FakeSocket(InetAddress inetAddress, int localPort) {, +      this(inetAddress, localPort, inetAddress, 1234);, +    }, +, +    private FakeSocket(InetAddress localAddress, int localPort, InetAddress remoteAddress, int remotePort) {, +      this.localAddress = localAddress;, +      this.localPort = localPort;, +      this.remoteAddress = remoteAddress;, +      this.remotePort = remotePort;, +      return remoteAddress;, +    }, +, +    @Override public InetAddress getLocalAddress() {, +      return localAddress;, +      return localPort;, +    }, +, +    @Override public int getPort() {, +      return remotePort;, +, +  @Test public void testUsesLocal() throws UnknownHostException {, +    Socket socket =, +        new FakeSocket(InetAddress.getByAddress("127.0.0.1", new byte[] { 127, 0, 0, 1 }), 80);, +, +    RecordedRequest request =, +        new RecordedRequest("GET / HTTP/1.1", headers, Collections.<Integer>emptyList(), 0,, +            new Buffer(), 0, socket);, +, +    assertEquals("http://127.0.0.1/", request.getRequestUrl().toString());, +  }]