[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/NewConnectionPoolTest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import com.squareup.okhttp.internal.SslContextBuilder;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.MockWebServer;, +import com.squareup.okhttp.mockwebserver.SocketPolicy;, +import com.squareup.okhttp.testing.RecordingHostnameVerifier;, +import java.util.Arrays;, +import java.util.concurrent.TimeUnit;, +import javax.net.ssl.SSLContext;, +import org.junit.Ignore;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.TestRule;, +import org.junit.rules.Timeout;, +, +import static org.junit.Assert.assertEquals;, +, +public final class NewConnectionPoolTest {, +  @Rule public final TestRule timeout = new Timeout(30_000);, +  @Rule public final MockWebServer server = new MockWebServer();, +, +  private SSLContext sslContext = SslContextBuilder.localhost();, +  private OkHttpClient client = new OkHttpClient();, +, +  @Test public void connectionsAreReused() throws Exception {, +    server.enqueue(new MockResponse().setBody("a"));, +    server.enqueue(new MockResponse().setBody("b"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    assertConnectionReused(request, request);, +  }, +, +  @Test public void connectionsAreReusedWithHttp2() throws Exception {, +    enableHttp2();, +    server.enqueue(new MockResponse().setBody("a"));, +    server.enqueue(new MockResponse().setBody("b"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    assertConnectionReused(request, request);, +  }, +, +  @Test public void connectionsAreNotReusedWithRequestConnectionClose() throws Exception {, +    server.enqueue(new MockResponse().setBody("a"));, +    server.enqueue(new MockResponse().setBody("b"));, +, +    Request requestA = new Request.Builder(), +        .url(server.url("/")), +        .header("Connection", "close"), +        .build();, +    Request requestB = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    assertConnectionNotReused(requestA, requestB);, +  }, +, +  @Test public void connectionsAreNotReusedWithResponseConnectionClose() throws Exception {, +    server.enqueue(new MockResponse(), +        .addHeader("Connection", "close"), +        .setBody("a"));, +    server.enqueue(new MockResponse().setBody("b"));, +, +    Request requestA = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Request requestB = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    assertConnectionNotReused(requestA, requestB);, +  }, +, +  @Test public void connectionsAreNotReusedWithUnknownLengthResponseBody() throws Exception {, +    server.enqueue(new MockResponse(), +        .setBody("a"), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .clearHeaders());, +    server.enqueue(new MockResponse().setBody("b"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/"))]