[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/FormBodyTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import java.io.IOException;, +import okio.Buffer;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public final class FormBodyTest {, +  @Test public void urlEncoding() throws Exception {, +    FormBody body = new FormBody.Builder(), +        .add("a+=& b", "c+=& d"), +        .add("space, the", "final frontier"), +        .add("%25", "%25"), +        .build();, +, +    assertEquals(3, body.size());, +, +    assertEquals("a%2B%3D%26%20b", body.encodedName(0));, +    assertEquals("space%2C%20the", body.encodedName(1));, +    assertEquals("%2525", body.encodedName(2));, +, +    assertEquals("a+=& b", body.name(0));, +    assertEquals("space, the", body.name(1));, +    assertEquals("%25", body.name(2));, +, +    assertEquals("c%2B%3D%26%20d", body.encodedValue(0));, +    assertEquals("final%20frontier", body.encodedValue(1));, +    assertEquals("%2525", body.encodedValue(2));, +, +    assertEquals("c+=& d", body.value(0));, +    assertEquals("final frontier", body.value(1));, +    assertEquals("%25", body.value(2));, +, +    assertEquals("application/x-www-form-urlencoded", body.contentType().toString());, +, +    String expected = "a%2B%3D%26%20b=c%2B%3D%26%20d&space%2C%20the=final%20frontier&%2525=%2525";, +    assertEquals(expected.length(), body.contentLength());, +, +    Buffer out = new Buffer();, +    body.writeTo(out);, +    assertEquals(expected, out.readUtf8());, +  }, +, +  @Test public void addEncoded() throws Exception {, +    FormBody body = new FormBody.Builder(), +        .addEncoded("a+=& b", "c+=& d"), +        .addEncoded("e+=& f", "g+=& h"), +        .addEncoded("%25", "%25"), +        .build();, +, +    String expected = "a+%3D%26%20b=c+%3D%26%20d&e+%3D%26%20f=g+%3D%26%20h&%25=%25";, +    Buffer out = new Buffer();, +    body.writeTo(out);, +    assertEquals(expected, out.readUtf8());, +  }, +, +  @Test public void encodedPair() throws Exception {, +    FormBody body = new FormBody.Builder(), +        .add("sim", "ple"), +        .build();, +, +    String expected = "sim=ple";, +    assertEquals(expected.length(), body.contentLength());, +, +    Buffer buffer = new Buffer();, +    body.writeTo(buffer);, +    assertEquals(expected, buffer.readUtf8());, +  }, +, +  @Test public void encodeMultiplePairs() throws Exception {, +    FormBody body = new FormBody.Builder(), +        .add("sim", "ple"), +        .add("hey", "there"), +        .add("help", "me"), +        .build();, +, +    String expected = "sim=ple&hey=there&help=me";, +    assertEquals(expected.length(), body.contentLength());, +, +    Buffer buffer = new Buffer();, +    body.writeTo(buffer);, +    assertEquals(expected, buffer.readUtf8());, +  }]