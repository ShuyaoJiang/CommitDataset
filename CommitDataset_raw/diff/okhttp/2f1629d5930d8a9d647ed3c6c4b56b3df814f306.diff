[+++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +    for (ListIterator<Connection> i = connections.listIterator(connections.size());, +        i.hasPrevious(); ) {, +      Connection connection = i.previous();, +, +  /** Close and remove all connections in the pool. */, +  public void evictAll() {, +    List<Connection> connections;, +    synchronized (this) {, +      connections = new ArrayList<Connection>(this.connections);, +      this.connections.clear();, +    }, +, +    for (Connection connection : connections) {, +      Util.closeQuietly(connection);, +    }, +  }, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +    for (ListIterator<Connection> i = connections.listIterator(connections.size());, +        i.hasPrevious(); ) {, +      Connection connection = i.previous();, +, +  /** Close and remove all connections in the pool. */, +  public void evictAll() {, +    List<Connection> connections;, +    synchronized (this) {, +      connections = new ArrayList<Connection>(this.connections);, +      this.connections.clear();, +    }, +, +    for (Connection connection : connections) {, +      Util.closeQuietly(connection);, +    }, +  }, +++ b/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +      responseHeaders.setResponseSource(responseSource);, +    responseHeaders.setResponseSource(responseSource);, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +    for (ListIterator<Connection> i = connections.listIterator(connections.size());, +        i.hasPrevious(); ) {, +      Connection connection = i.previous();, +, +  /** Close and remove all connections in the pool. */, +  public void evictAll() {, +    List<Connection> connections;, +    synchronized (this) {, +      connections = new ArrayList<Connection>(this.connections);, +      this.connections.clear();, +    }, +, +    for (Connection connection : connections) {, +      Util.closeQuietly(connection);, +    }, +  }, +++ b/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +      responseHeaders.setResponseSource(responseSource);, +    responseHeaders.setResponseSource(responseSource);, +++ b/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +, +  /** Numeric status code, 307: Temporary Redirect. */, +  static final int HTTP_TEMP_REDIRECT = 307;, +, +    final int responseCode = getResponseCode();, +    switch (responseCode) {, +      case HTTP_TEMP_REDIRECT:, +        if (responseCode == HTTP_TEMP_REDIRECT && !method.equals("GET") && !method.equals("HEAD")) {, +          // "If the 307 status code is received in response to a request other than GET or HEAD,, +          // the user agent MUST NOT automatically redirect the request", +          return Retry.NONE;, +        }, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +    for (ListIterator<Connection> i = connections.listIterator(connections.size());, +        i.hasPrevious(); ) {, +      Connection connection = i.previous();, +, +  /** Close and remove all connections in the pool. */, +  public void evictAll() {, +    List<Connection> connections;, +    synchronized (this) {, +      connections = new ArrayList<Connection>(this.connections);, +      this.connections.clear();, +    }, +, +    for (Connection connection : connections) {, +      Util.closeQuietly(connection);, +    }, +  }, +++ b/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +      responseHeaders.setResponseSource(responseSource);, +    responseHeaders.setResponseSource(responseSource);, +++ b/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +, +  /** Numeric status code, 307: Temporary Redirect. */, +  static final int HTTP_TEMP_REDIRECT = 307;, +, +    final int responseCode = getResponseCode();, +    switch (responseCode) {, +      case HTTP_TEMP_REDIRECT:, +        if (responseCode == HTTP_TEMP_REDIRECT && !method.equals("GET") && !method.equals("HEAD")) {, +          // "If the 307 status code is received in response to a request other than GET or HEAD,]