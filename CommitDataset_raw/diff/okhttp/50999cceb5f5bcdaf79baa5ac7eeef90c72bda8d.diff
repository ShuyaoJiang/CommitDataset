[+++ b/pom.xml, +++ b/pom.xml, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.net.http.HttpURLConnectionImpl;, +import com.squareup.okhttp.internal.net.http.HttpsURLConnectionImpl;, +            return new HttpURLConnectionImpl(url, 80, proxy);, +            return new HttpsURLConnectionImpl(url, 443, proxy);, +++ b/pom.xml, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.net.http.HttpURLConnectionImpl;, +import com.squareup.okhttp.internal.net.http.HttpsURLConnectionImpl;, +            return new HttpURLConnectionImpl(url, 80, proxy);, +            return new HttpsURLConnectionImpl(url, 443, proxy);, +++ b/src/main/java/com/squareup/okhttp/internal/Platform.java, +/*, + * Copyright (C) 2012 Square, Inc., + * Copyright (C) 2012 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal;, +, +import com.squareup.okhttp.OkHttpClient;, +import java.io.OutputStream;, +import java.io.UnsupportedEncodingException;, +import java.lang.reflect.Constructor;, +import java.lang.reflect.InvocationHandler;, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +import java.lang.reflect.Proxy;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +import java.util.zip.Deflater;, +import java.util.zip.DeflaterOutputStream;, +import javax.net.ssl.SSLSocket;, +, +/**, + * Access to Platform-specific features necessary for SPDY and advanced TLS., + *, + * <h3>SPDY</h3>, + * SPDY requires a TLS extension called NPN (Next Protocol Negotiation) that's, + * available in Android 4.1+ and OpenJDK 7+ (with the npn-boot extension). It, + * also requires a recent version of {@code DeflaterOutputStream} that is, + * public API in Java 7 and callable via reflection in Android 4.1+., + */, +public class Platform {, +    private static final Platform PLATFORM = findPlatform();, +, +    private Constructor<DeflaterOutputStream> deflaterConstructor;, +, +    public static Platform get() {, +        return PLATFORM;, +    }, +, +    public void makeTlsTolerant(SSLSocket socket, String uriHost, boolean tlsTolerant) {, +        if (!tlsTolerant) {, +            socket.setEnabledProtocols(new String[]{"SSLv3"});, +        }, +    }, +, +    /**, +     * Returns the negotiated protocol, or null if no protocol was negotiated., +     */, +    public byte[] getNpnSelectedProtocol(SSLSocket socket) {, +        return null;, +    }, +, +    /**, +     * Sets client-supported protocols on a socket to send to a server. The, +     * protocols are only sent if the socket implementation supports NPN., +     */, +    public void setNpnProtocols(SSLSocket socket, byte[] npnProtocols) {, +    }, +, +    /**, +     * Returns a deflater output stream that supports SYNC_FLUSH for SPDY name, +     * value blocks. This throws an {@link UnsupportedOperationException} on, +     * Java 6 and earlier where there is no built-in API to do SYNC_FLUSH., +     */, +    public OutputStream newDeflaterOutputStream(, +            OutputStream out, Deflater deflater, boolean syncFlush) {, +        try {, +            Constructor<DeflaterOutputStream> constructor = deflaterConstructor;, +            if (constructor == null) {, +                constructor = deflaterConstructor = DeflaterOutputStream.class.getConstructor(, +                        OutputStream.class, Deflater.class, boolean.class);, +            }, +            return constructor.newInstance(out, deflater, syncFlush);]