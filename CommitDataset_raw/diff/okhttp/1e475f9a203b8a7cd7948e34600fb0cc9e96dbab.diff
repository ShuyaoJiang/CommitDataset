[+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/DiskLruCache.java, +import okio.BufferedSink;, +import okio.OkBuffer;, +  private BufferedSink journalWriter;, +        cache.journalWriter = Okio.buffer(Okio.sink(new FileOutputStream(cache.journalFile, true)));, +    BufferedSink writer = Okio.buffer(Okio.sink(new FileOutputStream(journalFileTmp)));, +      writer.writeUtf8(MAGIC);, +      writer.writeUtf8("\n");, +      writer.writeUtf8(VERSION_1);, +      writer.writeUtf8("\n");, +      writer.writeUtf8(Integer.toString(appVersion));, +      writer.writeUtf8("\n");, +      writer.writeUtf8(Integer.toString(valueCount));, +      writer.writeUtf8("\n");, +      writer.writeUtf8("\n");, +          writer.writeUtf8(DIRTY + ' ' + entry.key + '\n');, +          writer.writeUtf8(CLEAN + ' ' + entry.key + entry.getLengths() + '\n');, +    journalWriter = Okio.buffer(Okio.sink(new FileOutputStream(journalFile, true)));, +    journalWriter.writeUtf8(READ + ' ' + key + '\n');, +    journalWriter.writeUtf8(DIRTY + ' ' + key + '\n');, +      journalWriter.writeUtf8(CLEAN + ' ' + entry.key + entry.getLengths() + '\n');, +      journalWriter.writeUtf8(REMOVE + ' ' + entry.key + '\n');, +    journalWriter.writeUtf8(REMOVE + ' ' + key + '\n');, +    OkBuffer buffer = Util.readFully(Okio.source(in));, +    return buffer.readUtf8(buffer.size());, +      BufferedSink writer = null;, +        writer = Okio.buffer(Okio.sink(newOutputStream(index)));, +        writer.writeUtf8(value);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/DiskLruCache.java, +import okio.BufferedSink;, +import okio.OkBuffer;, +  private BufferedSink journalWriter;, +        cache.journalWriter = Okio.buffer(Okio.sink(new FileOutputStream(cache.journalFile, true)));, +    BufferedSink writer = Okio.buffer(Okio.sink(new FileOutputStream(journalFileTmp)));, +      writer.writeUtf8(MAGIC);, +      writer.writeUtf8("\n");, +      writer.writeUtf8(VERSION_1);, +      writer.writeUtf8("\n");, +      writer.writeUtf8(Integer.toString(appVersion));, +      writer.writeUtf8("\n");, +      writer.writeUtf8(Integer.toString(valueCount));, +      writer.writeUtf8("\n");, +      writer.writeUtf8("\n");, +          writer.writeUtf8(DIRTY + ' ' + entry.key + '\n');, +          writer.writeUtf8(CLEAN + ' ' + entry.key + entry.getLengths() + '\n');, +    journalWriter = Okio.buffer(Okio.sink(new FileOutputStream(journalFile, true)));, +    journalWriter.writeUtf8(READ + ' ' + key + '\n');, +    journalWriter.writeUtf8(DIRTY + ' ' + key + '\n');, +      journalWriter.writeUtf8(CLEAN + ' ' + entry.key + entry.getLengths() + '\n');, +      journalWriter.writeUtf8(REMOVE + ' ' + entry.key + '\n');, +    journalWriter.writeUtf8(REMOVE + ' ' + key + '\n');, +    OkBuffer buffer = Util.readFully(Okio.source(in));, +    return buffer.readUtf8(buffer.size());, +      BufferedSink writer = null;, +        writer = Okio.buffer(Okio.sink(newOutputStream(index)));, +        writer.writeUtf8(value);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +  /** Returns the remainder of 'source' as a buffer, closing it when done. */, +  public static OkBuffer readFully(Source source) throws IOException {, +    OkBuffer result = new OkBuffer();, +    while (source.read(result, 2048) != -1) {, +    source.close();, +    return result;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/DiskLruCache.java, +import okio.BufferedSink;, +import okio.OkBuffer;, +  private BufferedSink journalWriter;, +        cache.journalWriter = Okio.buffer(Okio.sink(new FileOutputStream(cache.journalFile, true)));, +    BufferedSink writer = Okio.buffer(Okio.sink(new FileOutputStream(journalFileTmp)));, +      writer.writeUtf8(MAGIC);, +      writer.writeUtf8("\n");, +      writer.writeUtf8(VERSION_1);, +      writer.writeUtf8("\n");, +      writer.writeUtf8(Integer.toString(appVersion));, +      writer.writeUtf8("\n");, +      writer.writeUtf8(Integer.toString(valueCount));, +      writer.writeUtf8("\n");, +      writer.writeUtf8("\n");, +          writer.writeUtf8(DIRTY + ' ' + entry.key + '\n');, +          writer.writeUtf8(CLEAN + ' ' + entry.key + entry.getLengths() + '\n');, +    journalWriter = Okio.buffer(Okio.sink(new FileOutputStream(journalFile, true)));, +    journalWriter.writeUtf8(READ + ' ' + key + '\n');, +    journalWriter.writeUtf8(DIRTY + ' ' + key + '\n');, +      journalWriter.writeUtf8(CLEAN + ' ' + entry.key + entry.getLengths() + '\n');, +      journalWriter.writeUtf8(REMOVE + ' ' + entry.key + '\n');, +    journalWriter.writeUtf8(REMOVE + ' ' + key + '\n');, +    OkBuffer buffer = Util.readFully(Okio.source(in));, +    return buffer.readUtf8(buffer.size());, +      BufferedSink writer = null;, +        writer = Okio.buffer(Okio.sink(newOutputStream(index)));, +        writer.writeUtf8(value);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +  /** Returns the remainder of 'source' as a buffer, closing it when done. */, +  public static OkBuffer readFully(Source source) throws IOException {, +    OkBuffer result = new OkBuffer();, +    while (source.read(result, 2048) != -1) {, +    source.close();, +    return result;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/DiskLruCache.java]