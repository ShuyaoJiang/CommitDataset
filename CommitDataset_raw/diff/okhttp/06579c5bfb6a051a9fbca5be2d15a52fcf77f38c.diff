[+++ b/src/main/java/com/squareup/okhttp/Connection.java, +            6, 's', 'p', 'd', 'y', '/', '3',, +    private static final byte[] SPDY3 = new byte[] {, +            's', 'p', 'd', 'y', '/', '3',, +            if (Arrays.equals(selectedProtocol, SPDY3)) {, +++ b/src/main/java/com/squareup/okhttp/Connection.java, +            6, 's', 'p', 'd', 'y', '/', '3',, +    private static final byte[] SPDY3 = new byte[] {, +            's', 'p', 'd', 'y', '/', '3',, +            if (Arrays.equals(selectedProtocol, SPDY3)) {, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +                boolean usable = connection.isEligibleForRecycling();, +                if (usable && !connection.isSpdy()) {, +                        usable = false;, +                }, +, +                if (!connection.isSpdy() || !usable) {, +                    connections.remove(connections.size() - 1);, +                    if (connections.isEmpty()) {, +                        connectionPool.remove(address);, +                        connections = null;, +                    }, +                }, +, +                if (usable) {, +                } else {, +                    Util.closeQuietly(connection);, +                }, +++ b/src/main/java/com/squareup/okhttp/Connection.java, +            6, 's', 'p', 'd', 'y', '/', '3',, +    private static final byte[] SPDY3 = new byte[] {, +            's', 'p', 'd', 'y', '/', '3',, +            if (Arrays.equals(selectedProtocol, SPDY3)) {, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +                boolean usable = connection.isEligibleForRecycling();, +                if (usable && !connection.isSpdy()) {, +                        usable = false;, +                }, +, +                if (!connection.isSpdy() || !usable) {, +                    connections.remove(connections.size() - 1);, +                    if (connections.isEmpty()) {, +                        connectionPool.remove(address);, +                        connections = null;, +                    }, +                }, +, +                if (usable) {, +                } else {, +                    Util.closeQuietly(connection);, +                }, +++ b/src/main/java/com/squareup/okhttp/internal/http/RawHeaders.java, +            if (":status".equals(name)) {, +            } else if (":version".equals(name)) {, +            throw new ProtocolException("Expected ':status' and ':version' headers not present");, +     * @param path like "/foo/bar.html", +     * @param host like "www.android.com:1234", +     * @param scheme like "https", +    public void addSpdyRequestHeaders(, +            String method, String path, String version, String host, String scheme) {, +        add(":method", method);, +        add(":scheme", scheme);, +        add(":path", path);, +        add(":version", version);, +        add(":host", host);, +            // Drop headers that are forbidden when layering HTTP over SPDY., +            if (name.equals("connection") || name.equals("host") || name.equals("keep-alive"), +                    || name.equals("proxy-connection") || name.equals("transfer-encoding")) {, +++ b/src/main/java/com/squareup/okhttp/Connection.java, +            6, 's', 'p', 'd', 'y', '/', '3',, +    private static final byte[] SPDY3 = new byte[] {, +            's', 'p', 'd', 'y', '/', '3',, +            if (Arrays.equals(selectedProtocol, SPDY3)) {, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +                boolean usable = connection.isEligibleForRecycling();, +                if (usable && !connection.isSpdy()) {, +                        usable = false;, +                }, +, +                if (!connection.isSpdy() || !usable) {, +                    connections.remove(connections.size() - 1);, +                    if (connections.isEmpty()) {, +                        connectionPool.remove(address);, +                        connections = null;, +                    }, +                }, +, +                if (usable) {, +                } else {, +                    Util.closeQuietly(connection);, +                }, +++ b/src/main/java/com/squareup/okhttp/internal/http/RawHeaders.java, +            if (":status".equals(name)) {, +            } else if (":version".equals(name)) {, +            throw new ProtocolException("Expected ':status' and ':version' headers not present");, +     * @param path like "/foo/bar.html", +     * @param host like "www.android.com:1234", +     * @param scheme like "https", +    public void addSpdyRequestHeaders(, +            String method, String path, String version, String host, String scheme) {]