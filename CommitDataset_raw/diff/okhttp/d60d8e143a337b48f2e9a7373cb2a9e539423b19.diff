[+++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/ByteString.java, +  /**, +   * Returns a byte string equal to this byte string, but with the bytes 'A', +   * through 'Z' replaced with the corresponding byte in 'a' through 'z'., +   * Returns this byte string if it contains no bytes in 'A' through 'Z'., +   */, +  public ByteString toAsciiLowercase() {, +    // Search for an uppercase character. If we don't find one, return this., +    for (int i = 0; i < data.length; i++) {, +      byte c = data[i];, +      if (c < 'A' || c > 'Z') continue;, +, +      // If we reach this point, this string is not not lowercase. Create and, +      // return a new byte string., +      byte[] lowercase = data.clone();, +      lowercase[i++] = (byte) (c - ('A' - 'a'));, +      for (; i < lowercase.length; i++) {, +        c = lowercase[i];, +        if (c < 'A' || c > 'Z') continue;, +        lowercase[i] = (byte) (c - ('A' - 'a'));, +      }, +      return new ByteString(lowercase);, +    }, +    return this;, +  }, +, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/ByteString.java, +  /**, +   * Returns a byte string equal to this byte string, but with the bytes 'A', +   * through 'Z' replaced with the corresponding byte in 'a' through 'z'., +   * Returns this byte string if it contains no bytes in 'A' through 'Z'., +   */, +  public ByteString toAsciiLowercase() {, +    // Search for an uppercase character. If we don't find one, return this., +    for (int i = 0; i < data.length; i++) {, +      byte c = data[i];, +      if (c < 'A' || c > 'Z') continue;, +, +      // If we reach this point, this string is not not lowercase. Create and, +      // return a new byte string., +      byte[] lowercase = data.clone();, +      lowercase[i++] = (byte) (c - ('A' - 'a'));, +      for (; i < lowercase.length; i++) {, +        c = lowercase[i];, +        if (c < 'A' || c > 'Z') continue;, +        lowercase[i] = (byte) (c - ('A' - 'a'));, +      }, +      return new ByteString(lowercase);, +    }, +    return this;, +  }, +, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/InflaterSource.java, +      boolean sourceExhausted = refill(deadline);, +  /**, +   * Refills the inflater with compressed data if it needs input. (And only if, +   * it needs input). Returns true if the inflater required input but the source, +   * was exhausted., +   */, +  public boolean refill(Deadline deadline) throws IOException {, +    if (!inflater.needsInput()) return false;, +, +    releaseInflatedBytes();, +    if (inflater.getRemaining() != 0) throw new IllegalStateException("?"); // TODO: possible?, +, +    // Refill the buffer with compressed data from the source., +    if (buffer.byteCount == 0) {, +      if (source.read(buffer, Segment.SIZE, deadline) == -1) return true;, +    }, +, +    // Assign buffer bytes to the inflater., +    Segment head = buffer.head;, +    bufferBytesHeldByInflater = head.limit - head.pos;, +    inflater.setInput(head.data, head.pos, bufferBytesHeldByInflater);, +    return false;, +  }, +, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/ByteString.java, +  /**, +   * Returns a byte string equal to this byte string, but with the bytes 'A', +   * through 'Z' replaced with the corresponding byte in 'a' through 'z'., +   * Returns this byte string if it contains no bytes in 'A' through 'Z'., +   */, +  public ByteString toAsciiLowercase() {, +    // Search for an uppercase character. If we don't find one, return this., +    for (int i = 0; i < data.length; i++) {, +      byte c = data[i];, +      if (c < 'A' || c > 'Z') continue;, +, +      // If we reach this point, this string is not not lowercase. Create and, +      // return a new byte string., +      byte[] lowercase = data.clone();, +      lowercase[i++] = (byte) (c - ('A' - 'a'));, +      for (; i < lowercase.length; i++) {, +        c = lowercase[i];, +        if (c < 'A' || c > 'Z') continue;]