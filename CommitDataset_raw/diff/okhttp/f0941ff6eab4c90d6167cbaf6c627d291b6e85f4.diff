[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        && !request.startsWith("PATCH "), +        && !request.startsWith("DELETE ")) { // Permitted as spec is ambiguous., +      byte[] body = response.getBody();, +      boolean closeStreamAfterHeaders = body.length > 0 || !response.getPushPromises().isEmpty();, +      if (body.length > 0) {, +        sink.write(body);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        && !request.startsWith("PATCH "), +        && !request.startsWith("DELETE ")) { // Permitted as spec is ambiguous., +      byte[] body = response.getBody();, +      boolean closeStreamAfterHeaders = body.length > 0 || !response.getPushPromises().isEmpty();, +      if (body.length > 0) {, +        sink.write(body);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        && !request.startsWith("PATCH "), +        && !request.startsWith("DELETE ")) { // Permitted as spec is ambiguous., +      byte[] body = response.getBody();, +      boolean closeStreamAfterHeaders = body.length > 0 || !response.getPushPromises().isEmpty();, +      if (body.length > 0) {, +        sink.write(body);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  }, +, +  /**, +   * The RFC is unclear in this regard as it only specifies that this should, +   * invalidate the cache entry (if any)., +   */, +  @Test public void bodyPermittedOnDelete() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    HttpURLConnection connection = client.open(server.getUrl("/"));, +    connection.setRequestMethod("DELETE");, +    connection.setDoOutput(true);, +    connection.getOutputStream().write("BODY".getBytes(UTF_8));, +    assertEquals(200, connection.getResponseCode());, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("DELETE", request.getMethod());, +    assertEquals("BODY", new String(request.getBody(), UTF_8));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        && !request.startsWith("PATCH "), +        && !request.startsWith("DELETE ")) { // Permitted as spec is ambiguous., +      byte[] body = response.getBody();, +      boolean closeStreamAfterHeaders = body.length > 0 || !response.getPushPromises().isEmpty();, +      if (body.length > 0) {, +        sink.write(body);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  }, +, +  /**, +   * The RFC is unclear in this regard as it only specifies that this should, +   * invalidate the cache entry (if any)., +   */, +  @Test public void bodyPermittedOnDelete() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    HttpURLConnection connection = client.open(server.getUrl("/"));, +    connection.setRequestMethod("DELETE");, +    connection.setDoOutput(true);, +    connection.getOutputStream().write("BODY".getBytes(UTF_8));, +    assertEquals(200, connection.getResponseCode());, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("DELETE", request.getMethod());, +    assertEquals("BODY", new String(request.getBody(), UTF_8));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpMethod.java, +        || method.equals("PATCH"), +        || method.equals("DELETE"); // Permitted as spec is ambiguous., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        && !request.startsWith("PATCH "), +        && !request.startsWith("DELETE ")) { // Permitted as spec is ambiguous., +      byte[] body = response.getBody();, +      boolean closeStreamAfterHeaders = body.length > 0 || !response.getPushPromises().isEmpty();, +      if (body.length > 0) {, +        sink.write(body);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  }, +, +  /**, +   * The RFC is unclear in this regard as it only specifies that this should, +   * invalidate the cache entry (if any)., +   */, +  @Test public void bodyPermittedOnDelete() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    HttpURLConnection connection = client.open(server.getUrl("/"));, +    connection.setRequestMethod("DELETE");, +    connection.setDoOutput(true);, +    connection.getOutputStream().write("BODY".getBytes(UTF_8));, +    assertEquals(200, connection.getResponseCode());, +, +    RecordedRequest request = server.takeRequest();]