[+++ b/src/main/java/com/squareup/okhttp/internal/io/IoUtils.java, +     * Closes {@code a} and {@code b}. If either close fails, this completes, +     * the other close and rethrows the first encountered exception., +     */, +    public static void closeAll(Closeable a, Closeable b) throws IOException {, +        Throwable thrown = null;, +        try {, +            a.close();, +        } catch (Throwable e) {, +            thrown = e;, +        }, +        try {, +            b.close();, +        } catch (Throwable e) {, +            if (thrown == null) thrown = e;, +        }, +        if (thrown == null) return;, +        if (thrown instanceof IOException) throw (IOException) thrown;, +        if (thrown instanceof RuntimeException) throw (RuntimeException) thrown;, +        if (thrown instanceof Error) throw (Error) thrown;, +        throw new AssertionError(thrown);, +    }, +, +    /**, +++ b/src/main/java/com/squareup/okhttp/internal/io/IoUtils.java, +     * Closes {@code a} and {@code b}. If either close fails, this completes, +     * the other close and rethrows the first encountered exception., +     */, +    public static void closeAll(Closeable a, Closeable b) throws IOException {, +        Throwable thrown = null;, +        try {, +            a.close();, +        } catch (Throwable e) {, +            thrown = e;, +        }, +        try {, +            b.close();, +        } catch (Throwable e) {, +            if (thrown == null) thrown = e;, +        }, +        if (thrown == null) return;, +        if (thrown instanceof IOException) throw (IOException) thrown;, +        if (thrown instanceof RuntimeException) throw (RuntimeException) thrown;, +        if (thrown instanceof Error) throw (Error) thrown;, +        throw new AssertionError(thrown);, +    }, +, +    /**, +++ b/src/main/java/com/squareup/okhttp/internal/net/spdy/Ping.java, +    void cancel() {, +        if (received != -1 || sent == -1) throw new IllegalStateException();, +        received = sent - 1;, +        latch.countDown();, +    }, +, +     * response to arrive if necessary. Returns -1 if the response was, +     * cancelled., +     * response was cancelled, or -2 if the timeout elapsed before the round, +     * trip completed., +            return -2;, +++ b/src/main/java/com/squareup/okhttp/internal/io/IoUtils.java, +     * Closes {@code a} and {@code b}. If either close fails, this completes, +     * the other close and rethrows the first encountered exception., +     */, +    public static void closeAll(Closeable a, Closeable b) throws IOException {, +        Throwable thrown = null;, +        try {, +            a.close();, +        } catch (Throwable e) {, +            thrown = e;, +        }, +        try {, +            b.close();, +        } catch (Throwable e) {, +            if (thrown == null) thrown = e;, +        }, +        if (thrown == null) return;, +        if (thrown instanceof IOException) throw (IOException) thrown;, +        if (thrown instanceof RuntimeException) throw (RuntimeException) thrown;, +        if (thrown instanceof Error) throw (Error) thrown;, +        throw new AssertionError(thrown);, +    }, +, +    /**, +++ b/src/main/java/com/squareup/okhttp/internal/net/spdy/Ping.java, +    void cancel() {, +        if (received != -1 || sent == -1) throw new IllegalStateException();, +        received = sent - 1;, +        latch.countDown();, +    }, +, +     * response to arrive if necessary. Returns -1 if the response was, +     * cancelled., +     * response was cancelled, or -2 if the timeout elapsed before the round, +     * trip completed., +            return -2;, +++ b/src/main/java/com/squareup/okhttp/internal/net/spdy/SpdyConnection.java, +import com.squareup.okhttp.internal.io.IoUtils;, +            if (shutdown) {, +                throw new IOException("shutdown");]