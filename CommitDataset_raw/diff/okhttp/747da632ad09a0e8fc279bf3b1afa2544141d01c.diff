[+++ b/src/main/java/libcore/net/spdy/SpdyConnection.java, +        String prefix = builder.client ? "Spdy Client " : "Spdy Server ";, +                new SynchronousQueue<Runnable>(), newThreadFactory(prefix + "Reader", false));, +                new LinkedBlockingQueue<Runnable>(), newThreadFactory(prefix + "Writer", false));, +                new SynchronousQueue<Runnable>(), newThreadFactory(prefix + "Callbacks", false));, +    void writeSynReply(int streamId, int flags, List<String> alternating) throws IOException {, +++ b/src/main/java/libcore/net/spdy/SpdyConnection.java, +        String prefix = builder.client ? "Spdy Client " : "Spdy Server ";, +                new SynchronousQueue<Runnable>(), newThreadFactory(prefix + "Reader", false));, +                new LinkedBlockingQueue<Runnable>(), newThreadFactory(prefix + "Writer", false));, +                new SynchronousQueue<Runnable>(), newThreadFactory(prefix + "Callbacks", false));, +    void writeSynReply(int streamId, int flags, List<String> alternating) throws IOException {, +++ b/src/main/java/libcore/net/spdy/SpdyReader.java, +++ b/src/main/java/libcore/net/spdy/SpdyConnection.java, +        String prefix = builder.client ? "Spdy Client " : "Spdy Server ";, +                new SynchronousQueue<Runnable>(), newThreadFactory(prefix + "Reader", false));, +                new LinkedBlockingQueue<Runnable>(), newThreadFactory(prefix + "Writer", false));, +                new SynchronousQueue<Runnable>(), newThreadFactory(prefix + "Callbacks", false));, +    void writeSynReply(int streamId, int flags, List<String> alternating) throws IOException {, +++ b/src/main/java/libcore/net/spdy/SpdyReader.java, +++ b/src/main/java/libcore/net/spdy/SpdyServer.java, +    private void run() throws Exception {, +        SpdyConnection connection = new SpdyConnection.Builder(false, socket), +, +        // Chrome doesn't seem to like pings coming from the server:, +        // https://groups.google.com/forum/?fromgroups=#!topic/spdy-dev/NgTHYUQKWBY, +        // System.out.println("PING RTT TIME " + connection.ping().roundTripTime());, +    public static void main(String... args) throws Exception {, +++ b/src/main/java/libcore/net/spdy/SpdyConnection.java, +        String prefix = builder.client ? "Spdy Client " : "Spdy Server ";, +                new SynchronousQueue<Runnable>(), newThreadFactory(prefix + "Reader", false));, +                new LinkedBlockingQueue<Runnable>(), newThreadFactory(prefix + "Writer", false));, +                new SynchronousQueue<Runnable>(), newThreadFactory(prefix + "Callbacks", false));, +    void writeSynReply(int streamId, int flags, List<String> alternating) throws IOException {, +++ b/src/main/java/libcore/net/spdy/SpdyReader.java, +++ b/src/main/java/libcore/net/spdy/SpdyServer.java, +    private void run() throws Exception {, +        SpdyConnection connection = new SpdyConnection.Builder(false, socket), +, +        // Chrome doesn't seem to like pings coming from the server:, +        // https://groups.google.com/forum/?fromgroups=#!topic/spdy-dev/NgTHYUQKWBY, +        // System.out.println("PING RTT TIME " + connection.ping().roundTripTime());, +    public static void main(String... args) throws Exception {, +++ b/src/main/java/libcore/net/spdy/SpdyStream.java, +     * Sends a reply with 0 or more bytes of data to follow, which should be, +     * written to the returned output stream., +        reply(responseHeaders, 0);, +        return out;, +, +    /**, +     * Sends a reply with 0 bytes to follow., +     */, +    public void replyNoContent(List<String> responseHeaders) throws IOException {, +        reply(responseHeaders, SpdyConnection.FLAG_FIN);, +        outFinished = true;, +    }, +, +    private void reply(List<String> responseHeaders, int flags) throws IOException {, +        if (responseHeaders == null) throw new NullPointerException("responseHeaders == null");, +        connection.writeSynReply(id, flags, responseHeaders);, +++ b/src/main/java/libcore/net/spdy/SpdyConnection.java, +        String prefix = builder.client ? "Spdy Client " : "Spdy Server ";, +                new SynchronousQueue<Runnable>(), newThreadFactory(prefix + "Reader", false));, +                new LinkedBlockingQueue<Runnable>(), newThreadFactory(prefix + "Writer", false));, +                new SynchronousQueue<Runnable>(), newThreadFactory(prefix + "Callbacks", false));, +    void writeSynReply(int streamId, int flags, List<String> alternating) throws IOException {, +++ b/src/main/java/libcore/net/spdy/SpdyReader.java, +++ b/src/main/java/libcore/net/spdy/SpdyServer.java, +    private void run() throws Exception {, +        SpdyConnection connection = new SpdyConnection.Builder(false, socket), +, +        // Chrome doesn't seem to like pings coming from the server:, +        // https://groups.google.com/forum/?fromgroups=#!topic/spdy-dev/NgTHYUQKWBY, +        // System.out.println("PING RTT TIME " + connection.ping().roundTripTime());, +    public static void main(String... args) throws Exception {, +++ b/src/main/java/libcore/net/spdy/SpdyStream.java, +     * Sends a reply with 0 or more bytes of data to follow, which should be, +     * written to the returned output stream., +        reply(responseHeaders, 0);, +        return out;, +, +    /**, +     * Sends a reply with 0 bytes to follow., +     */, +    public void replyNoContent(List<String> responseHeaders) throws IOException {, +        reply(responseHeaders, SpdyConnection.FLAG_FIN);, +        outFinished = true;, +    }, +, +    private void reply(List<String> responseHeaders, int flags) throws IOException {, +        if (responseHeaders == null) throw new NullPointerException("responseHeaders == null");, +        connection.writeSynReply(id, flags, responseHeaders);, +++ b/src/test/java/libcore/net/spdy/SpdyConnectionTest.java, +import static libcore.net.spdy.SpdyConnection.FLAG_FIN;, +    public void testReplyWithNoData() throws Exception {, +        // write the mocking script, +        peer.sendFrame().synStream(0, 2, 0, 0, Arrays.asList("a", "android"));, +        peer.acceptFrame();, +        peer.play();, +]