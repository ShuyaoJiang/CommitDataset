[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import java.util.concurrent.CountDownLatch;, +import okhttp3.RecordingEventListener.CallEnd;, +import static org.hamcrest.CoreMatchers.either;, +  @Test public void successfulCallEventSequenceForEnqueue() throws Exception {, +    server.enqueue(new MockResponse(), +        .setBody("abc"));, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +, +    final CountDownLatch completionLatch = new CountDownLatch(1);, +    Callback callback = new Callback() {, +      @Override public void onFailure(Call call, IOException e) {, +        completionLatch.countDown();, +      }, +, +      @Override public void onResponse(Call call, Response response) throws IOException {, +        response.close();, +        completionLatch.countDown();, +      }, +    };, +, +    call.enqueue(callback);, +, +    completionLatch.await();, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",, +        "ConnectionAcquired", "ConnectStart", "ConnectEnd", "RequestHeadersStart",, +        "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +  @Test public void failedCallEventSequence() throws IOException {, +    server.enqueue(new MockResponse().setBodyDelay(2, TimeUnit.SECONDS));, +, +    client = client.newBuilder().readTimeout(250, TimeUnit.MILLISECONDS).build();, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    try {, +      call.execute();, +      fail();, +    } catch (IOException expected) {, +      assertThat(expected.getMessage(), either(equalTo("timeout")).or(equalTo("Read timed out")));, +    }, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",, +        "ConnectionAcquired", "ConnectStart", "ConnectEnd", "RequestHeadersStart",, +        "RequestHeadersEnd", "ResponseHeadersStart", "ConnectionReleased", "CallFailed");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +  @Test public void secondCallEventSequence() throws IOException {, +    enableTlsWithTunnel(false);, +    server.setProtocols(Arrays.asList(Protocol.HTTP_2, Protocol.HTTP_1_1));, +    server.enqueue(new MockResponse());, +    server.enqueue(new MockResponse());, +, +    client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build()).execute().close();, +, +    listener.removeUpToEvent(CallEnd.class);, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    response.close();, +, +    List<String> expectedEvents = asList("CallStart", "ConnectionAcquired",, +        "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd",, +        "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +]