[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import org.junit.Ignore;, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import org.junit.Ignore;, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import org.junit.Ignore;, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +      if (!httpEngine.sameConnection(followUp)) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import org.junit.Ignore;, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +      if (!httpEngine.sameConnection(followUp)) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java, +      if (!engine.sameConnection(followUp)) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import org.junit.Ignore;, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +      if (!httpEngine.sameConnection(followUp)) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java, +      if (!engine.sameConnection(followUp)) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Response.java, +   * The wire-level request that initiated this HTTP response. This is not, +   * necessarily the same request issued by the application:, +   *         may copy headers like {@code Content-Length} from the request body., +   *     <li>It may be the request generated in response to an HTTP redirect or, +   *         authentication challenge. In this case the request URL may be, +   *         different than the initial request URL., +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import org.junit.Ignore;, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +      if (!httpEngine.sameConnection(followUp)) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java, +      if (!engine.sameConnection(followUp)) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Response.java, +   * The wire-level request that initiated this HTTP response. This is not, +   * necessarily the same request issued by the application:, +   *         may copy headers like {@code Content-Length} from the request body., +   *     <li>It may be the request generated in response to an HTTP redirect or, +   *         authentication challenge. In this case the request URL may be, +   *         different than the initial request URL., +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +    if (transport != null && connection != null && !transport.canReuseConnection()) {, +   * Returns true if an HTTP request for {@code followUp} can use the same, +   * engine as this connection., +  public boolean sameConnection(Request followUp) {, +    URL a = userRequest.url();, +    URL b = followUp.url();, +    return a.getHost().equals(b.getHost()), +        && getEffectivePort(a) == getEffectivePort(b), +        && a.getProtocol().equals(b.getProtocol());]