[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        List<Header> continueHeaders = Collections.singletonList(, +            new Header(Header.RESPONSE_STATUS, ByteString.encodeUtf8("100 Continue")));, +        stream.writeHeaders(continueHeaders, false, true);, +      boolean outFinished = body == null, +          && response.getPushPromises().isEmpty(), +          && !response.isDuplex();, +      boolean flushHeaders = body == null;, +      if (outFinished && trailers.size() > 0) {, +      stream.writeHeaders(http2Headers, outFinished, flushHeaders);, +        BufferedSink sink = Okio.buffer(stream.getSink());, +        BufferedSource source = Okio.buffer(stream.getSource());, +        DuplexResponseBody duplexResponseBody = response.getDuplexResponseBody();, +      } else if (!outFinished) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        List<Header> continueHeaders = Collections.singletonList(, +            new Header(Header.RESPONSE_STATUS, ByteString.encodeUtf8("100 Continue")));, +        stream.writeHeaders(continueHeaders, false, true);, +      boolean outFinished = body == null, +          && response.getPushPromises().isEmpty(), +          && !response.isDuplex();, +      boolean flushHeaders = body == null;, +      if (outFinished && trailers.size() > 0) {, +      stream.writeHeaders(http2Headers, outFinished, flushHeaders);, +        BufferedSink sink = Okio.buffer(stream.getSink());, +        BufferedSource source = Okio.buffer(stream.getSource());, +        DuplexResponseBody duplexResponseBody = response.getDuplexResponseBody();, +      } else if (!outFinished) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/DuplexResponseBody.java, +  void onRequest(RecordedRequest request, BufferedSource requestBody, BufferedSink responseBody), +      throws IOException;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        List<Header> continueHeaders = Collections.singletonList(, +            new Header(Header.RESPONSE_STATUS, ByteString.encodeUtf8("100 Continue")));, +        stream.writeHeaders(continueHeaders, false, true);, +      boolean outFinished = body == null, +          && response.getPushPromises().isEmpty(), +          && !response.isDuplex();, +      boolean flushHeaders = body == null;, +      if (outFinished && trailers.size() > 0) {, +      stream.writeHeaders(http2Headers, outFinished, flushHeaders);, +        BufferedSink sink = Okio.buffer(stream.getSink());, +        BufferedSource source = Okio.buffer(stream.getSource());, +        DuplexResponseBody duplexResponseBody = response.getDuplexResponseBody();, +      } else if (!outFinished) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/DuplexResponseBody.java, +  void onRequest(RecordedRequest request, BufferedSource requestBody, BufferedSink responseBody), +      throws IOException;, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    stream.writeHeaders(responseHeaders, false, false);, +    stream.writeHeaders(responseHeaders, false, false);, +    stream.writeHeaders(responseHeaders, false, false);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        List<Header> continueHeaders = Collections.singletonList(, +            new Header(Header.RESPONSE_STATUS, ByteString.encodeUtf8("100 Continue")));, +        stream.writeHeaders(continueHeaders, false, true);, +      boolean outFinished = body == null, +          && response.getPushPromises().isEmpty(), +          && !response.isDuplex();, +      boolean flushHeaders = body == null;, +      if (outFinished && trailers.size() > 0) {, +      stream.writeHeaders(http2Headers, outFinished, flushHeaders);, +        BufferedSink sink = Okio.buffer(stream.getSink());, +        BufferedSource source = Okio.buffer(stream.getSource());, +        DuplexResponseBody duplexResponseBody = response.getDuplexResponseBody();, +      } else if (!outFinished) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/DuplexResponseBody.java, +  void onRequest(RecordedRequest request, BufferedSource requestBody, BufferedSink responseBody), +      throws IOException;, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    stream.writeHeaders(responseHeaders, false, false);, +    stream.writeHeaders(responseHeaders, false, false);, +    stream.writeHeaders(responseHeaders, false, false);, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +import static org.junit.Assert.assertNull;, +  @Test public void trueDuplexClientWritesFirst() throws IOException {, +    MockResponse mockResponse = new MockResponse();, +    mockResponse.clearHeaders();, +    MwsDuplexAccess.instance.setBody(mockResponse, new DuplexResponseBody() {, +      @Override public void onRequest(RecordedRequest request,, +          BufferedSource requestBody, BufferedSink responseBody) throws IOException {, +, +        assertEquals("request A", requestBody.readUtf8Line());, +        responseBody.writeUtf8("response B\n");, +        responseBody.flush();, +, +        assertEquals("request C", requestBody.readUtf8Line());, +        responseBody.writeUtf8("response D\n");, +        responseBody.flush();, +, +        assertEquals("request E", requestBody.readUtf8Line());, +        responseBody.writeUtf8("response F\n");, +        responseBody.flush();, +, +        assertNull(requestBody.readUtf8Line());, +        requestBody.close();, +        responseBody.close();, +      }, +    });, +    server.enqueue(mockResponse);]