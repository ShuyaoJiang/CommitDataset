[+++ b/okhttp-testing-support/src/main/java/com/squareup/okhttp/internal/io/InMemoryFileSystem.java, +import java.util.ArrayList;, +import java.util.IdentityHashMap;, +import java.util.List;, +import okio.ForwardingSink;, +import okio.ForwardingSource;, +import org.junit.rules.TestRule;, +import org.junit.runner.Description;, +import org.junit.runners.model.Statement;, +public final class InMemoryFileSystem implements FileSystem, TestRule {, +  private final Map<Source, File> openSources = new IdentityHashMap<>();, +  private final Map<Sink, File> openSinks = new IdentityHashMap<>();, +, +  @Override public Statement apply(final Statement base, Description description) {, +    return new Statement() {, +      @Override public void evaluate() throws Throwable {, +        base.evaluate();, +        ensureResourcesClosed();, +      }, +    };, +  }, +, +  public void ensureResourcesClosed() {, +    List<String> openResources = new ArrayList<>();, +    for (File file : openSources.values()) {, +      openResources.add("Source for " + file);, +    }, +    for (File file : openSinks.values()) {, +      openResources.add("Sink for " + file);, +    }, +    if (!openResources.isEmpty()) {, +      StringBuilder builder = new StringBuilder("Resources acquired but not closed:");, +      for (String resource : openResources) {, +        builder.append("\n * ").append(resource);, +      }, +      throw new IllegalStateException(builder.toString());, +    }, +  }, +, +    final Source source = result.clone();, +    openSources.put(source, file);, +, +    return new ForwardingSource(source) {, +      @Override public void close() throws IOException {, +        openSources.remove(source);, +        super.close();, +      }, +    };, +    return sink(file, false);, +    return sink(file, true);, +  }, +, +  private Sink sink(File file, boolean appending) {, +    Buffer result = null;, +    if (appending) {, +      result = files.get(file);, +    }, +    if (result == null) {, +      result = new Buffer();, +    }, +    files.put(file, result);, +, +    final Sink sink = result;, +    openSinks.put(sink, file);, +, +    return new ForwardingSink(sink) {, +      @Override public void close() throws IOException {, +        openSinks.remove(sink);, +        super.close();, +      }, +    };, +++ b/okhttp-testing-support/src/main/java/com/squareup/okhttp/internal/io/InMemoryFileSystem.java, +import java.util.ArrayList;, +import java.util.IdentityHashMap;, +import java.util.List;, +import okio.ForwardingSink;, +import okio.ForwardingSource;, +import org.junit.rules.TestRule;, +import org.junit.runner.Description;, +import org.junit.runners.model.Statement;, +public final class InMemoryFileSystem implements FileSystem, TestRule {, +  private final Map<Source, File> openSources = new IdentityHashMap<>();, +  private final Map<Sink, File> openSinks = new IdentityHashMap<>();, +, +  @Override public Statement apply(final Statement base, Description description) {, +    return new Statement() {, +      @Override public void evaluate() throws Throwable {, +        base.evaluate();, +        ensureResourcesClosed();, +      }, +    };, +  }, +, +  public void ensureResourcesClosed() {, +    List<String> openResources = new ArrayList<>();, +    for (File file : openSources.values()) {, +      openResources.add("Source for " + file);, +    }, +    for (File file : openSinks.values()) {, +      openResources.add("Sink for " + file);]