[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +        } else if (response.getSocketPolicy() == SHUTDOWN_SERVER_AFTER_RESPONSE) {, +          shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +        } else if (response.getSocketPolicy() == SHUTDOWN_SERVER_AFTER_RESPONSE) {, +          shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Shutdown {@link MockWebServer} after writing response., +   */, +  SHUTDOWN_SERVER_AFTER_RESPONSE,, +, +  /**, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +        } else if (response.getSocketPolicy() == SHUTDOWN_SERVER_AFTER_RESPONSE) {, +          shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Shutdown {@link MockWebServer} after writing response., +   */, +  SHUTDOWN_SERVER_AFTER_RESPONSE,, +, +  /**, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void shutdownServerAfterRequest() throws Exception {, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE));, +, +    URL url = server.url("/").url();, +, +    HttpURLConnection connection = (HttpURLConnection) url.openConnection();, +    assertEquals(HttpURLConnection.HTTP_OK, connection.getResponseCode());, +, +    HttpURLConnection refusedConnection = (HttpURLConnection) url.openConnection();, +, +    try {, +      refusedConnection.getResponseCode();, +      fail("Second connection should be refused");, +    } catch (ConnectException e ) {, +      assertTrue(e.getMessage().contains("refused"));, +    }, +  }, +]