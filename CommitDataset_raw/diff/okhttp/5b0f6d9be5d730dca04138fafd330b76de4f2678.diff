[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    // Limit the size of the request body that the server holds in memory to an arbitrary, +    // 3.5 MBytes so this test can pass on devices with little memory., +    server.setBodyLimit(7 * 512 * 1024);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    // Limit the size of the request body that the server holds in memory to an arbitrary, +    // 3.5 MBytes so this test can pass on devices with little memory., +    server.setBodyLimit(7 * 512 * 1024);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    } else if (responseCode == HttpURLConnection.HTTP_NO_CONTENT, +        || responseCode == HttpURLConnection.HTTP_RESET) {, +      mockResponse.setBody(""); // We forbid bodies for 204 and 205., +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    // Limit the size of the request body that the server holds in memory to an arbitrary, +    // 3.5 MBytes so this test can pass on devices with little memory., +    server.setBodyLimit(7 * 512 * 1024);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    } else if (responseCode == HttpURLConnection.HTTP_NO_CONTENT, +        || responseCode == HttpURLConnection.HTTP_RESET) {, +      mockResponse.setBody(""); // We forbid bodies for 204 and 205., +++ b/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java, +, +  @Test public void successfulFindMatchingPinsIgnoresCase() {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("EXAMPLE.com", certA1Sha256Pin), +        .add("*.MyExample.Com", certB1Sha256Pin), +        .build();, +, +    List<Pin> expectedPin1 = Arrays.asList(new Pin("EXAMPLE.com", certA1Sha256Pin));, +    assertEquals(expectedPin1, certificatePinner.findMatchingPins("example.com"));, +, +    List<Pin> expectedPin2 = Arrays.asList(new Pin("*.MyExample.Com", certB1Sha256Pin));, +    assertEquals(expectedPin2, certificatePinner.findMatchingPins("a.myexample.com"));, +  }, +, +  @Test public void successfulFindMatchingPinPunycode() {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("σkhttp.com", certA1Sha256Pin), +        .build();, +, +    List<Pin> expectedPin = Arrays.asList(new Pin("σkhttp.com", certA1Sha256Pin));, +    assertEquals(expectedPin, certificatePinner.findMatchingPins("xn--khttp-fde.com"));, +  }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    // Limit the size of the request body that the server holds in memory to an arbitrary, +    // 3.5 MBytes so this test can pass on devices with little memory., +    server.setBodyLimit(7 * 512 * 1024);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    } else if (responseCode == HttpURLConnection.HTTP_NO_CONTENT, +        || responseCode == HttpURLConnection.HTTP_RESET) {, +      mockResponse.setBody(""); // We forbid bodies for 204 and 205., +++ b/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java, +, +  @Test public void successfulFindMatchingPinsIgnoresCase() {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("EXAMPLE.com", certA1Sha256Pin), +        .add("*.MyExample.Com", certB1Sha256Pin), +        .build();, +, +    List<Pin> expectedPin1 = Arrays.asList(new Pin("EXAMPLE.com", certA1Sha256Pin));, +    assertEquals(expectedPin1, certificatePinner.findMatchingPins("example.com"));, +, +    List<Pin> expectedPin2 = Arrays.asList(new Pin("*.MyExample.Com", certB1Sha256Pin));, +    assertEquals(expectedPin2, certificatePinner.findMatchingPins("a.myexample.com"));, +  }, +, +  @Test public void successfulFindMatchingPinPunycode() {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("σkhttp.com", certA1Sha256Pin), +        .build();, +, +    List<Pin> expectedPin = Arrays.asList(new Pin("σkhttp.com", certA1Sha256Pin));, +    assertEquals(expectedPin, certificatePinner.findMatchingPins("xn--khttp-fde.com"));, +  }, +++ /dev/null, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    // Limit the size of the request body that the server holds in memory to an arbitrary, +    // 3.5 MBytes so this test can pass on devices with little memory., +    server.setBodyLimit(7 * 512 * 1024);, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    } else if (responseCode == HttpURLConnection.HTTP_NO_CONTENT, +        || responseCode == HttpURLConnection.HTTP_RESET) {, +      mockResponse.setBody(""); // We forbid bodies for 204 and 205., +++ b/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java, +, +  @Test public void successfulFindMatchingPinsIgnoresCase() {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("EXAMPLE.com", certA1Sha256Pin), +        .add("*.MyExample.Com", certB1Sha256Pin), +        .build();, +, +    List<Pin> expectedPin1 = Arrays.asList(new Pin("EXAMPLE.com", certA1Sha256Pin));, +    assertEquals(expectedPin1, certificatePinner.findMatchingPins("example.com"));, +, +    List<Pin> expectedPin2 = Arrays.asList(new Pin("*.MyExample.Com", certB1Sha256Pin));, +    assertEquals(expectedPin2, certificatePinner.findMatchingPins("a.myexample.com"));, +  }, +, +  @Test public void successfulFindMatchingPinPunycode() {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder()]