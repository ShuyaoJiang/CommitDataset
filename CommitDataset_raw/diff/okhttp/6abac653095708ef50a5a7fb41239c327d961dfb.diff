[+++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +  final OkAuthenticator authenticator;, +      HostnameVerifier hostnameVerifier, OkAuthenticator authenticator, Proxy proxy), +      throws UnknownHostException {, +    if (authenticator == null) throw new IllegalArgumentException("authenticator == null");, +    this.authenticator = authenticator;, +, +  /**, +   * Returns the client's authenticator. This method never returns null., +   */, +  public OkAuthenticator getAuthenticator() {, +    return authenticator;, +  }, +, +          && equal(this.hostnameVerifier, that.hostnameVerifier), +          && equal(this.authenticator, that.authenticator);, +    result = 31 * result + (authenticator != null ? authenticator.hashCode() : 0);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +  final OkAuthenticator authenticator;, +      HostnameVerifier hostnameVerifier, OkAuthenticator authenticator, Proxy proxy), +      throws UnknownHostException {, +    if (authenticator == null) throw new IllegalArgumentException("authenticator == null");, +    this.authenticator = authenticator;, +, +  /**, +   * Returns the client's authenticator. This method never returns null., +   */, +  public OkAuthenticator getAuthenticator() {, +    return authenticator;, +  }, +, +          && equal(this.hostnameVerifier, that.hostnameVerifier), +          && equal(this.authenticator, that.authenticator);, +    result = 31 * result + (authenticator != null ? authenticator.hashCode() : 0);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +          boolean credentialsFound = HttpAuthenticator.processAuthHeader(, +              route.address.authenticator, HTTP_PROXY_AUTH, responseHeaders, requestHeaders,, +              route.proxy, url);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +  final OkAuthenticator authenticator;, +      HostnameVerifier hostnameVerifier, OkAuthenticator authenticator, Proxy proxy), +      throws UnknownHostException {, +    if (authenticator == null) throw new IllegalArgumentException("authenticator == null");, +    this.authenticator = authenticator;, +, +  /**, +   * Returns the client's authenticator. This method never returns null., +   */, +  public OkAuthenticator getAuthenticator() {, +    return authenticator;, +  }, +, +          && equal(this.hostnameVerifier, that.hostnameVerifier), +          && equal(this.authenticator, that.authenticator);, +    result = 31 * result + (authenticator != null ? authenticator.hashCode() : 0);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +          boolean credentialsFound = HttpAuthenticator.processAuthHeader(, +              route.address.authenticator, HTTP_PROXY_AUTH, responseHeaders, requestHeaders,, +              route.proxy, url);, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkAuthenticator.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import com.squareup.okhttp.internal.Base64;, +import java.io.IOException;, +import java.io.UnsupportedEncodingException;, +import java.net.Proxy;, +import java.net.URL;, +import java.util.List;, +, +/**, + * Responds to authentication challenges from the remote web or proxy server by, + * returning credentials., + */, +public interface OkAuthenticator {, +  /**, +   * Returns a credential that satisfies the authentication challenge made by, +   * {@code url}. Returns null if the challenge cannot be satisfied. This method, +   * is called in response to an HTTP 401 unauthorized status code sent by the, +   * origin server., +   *, +   * @param challenges parsed "WWW-Authenticate" challenge headers from the HTTP, +   *     response., +   */, +  Credential authenticate(Proxy proxy, URL url, List<Challenge> challenges) throws IOException;, +]