[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.mockwebserver.QueueDispatcher;, +  private RecordingEventListener listener = new RecordingEventListener();, +    // Set to 2 because the seeding request will count down before the retried request does., +    CountDownLatch requestFinished = new CountDownLatch(2);, +, +    QueueDispatcher dispatcher = new QueueDispatcher() {, +      @Override public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +        if (peek().getSocketPolicy() == SocketPolicy.DISCONNECT_AFTER_REQUEST) {, +          requestFinished.await();, +        }, +        return super.dispatch(request);, +      }, +    };, +    dispatcher.enqueueResponse(new MockResponse().setBody("seed connection pool"));, +    dispatcher.enqueueResponse(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    dispatcher.enqueueResponse(new MockResponse().setBody("retry success"));, +    server.setDispatcher(dispatcher);, +, +    listener = new RecordingEventListener() {, +      @Override public void responseHeadersStart(Call call) {, +        requestFinished.countDown();, +        super.responseHeadersStart(call);, +      }, +    };, +        .eventListener(listener), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.mockwebserver.QueueDispatcher;, +  private RecordingEventListener listener = new RecordingEventListener();, +    // Set to 2 because the seeding request will count down before the retried request does., +    CountDownLatch requestFinished = new CountDownLatch(2);, +, +    QueueDispatcher dispatcher = new QueueDispatcher() {, +      @Override public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +        if (peek().getSocketPolicy() == SocketPolicy.DISCONNECT_AFTER_REQUEST) {, +          requestFinished.await();, +        }, +        return super.dispatch(request);, +      }, +    };, +    dispatcher.enqueueResponse(new MockResponse().setBody("seed connection pool"));, +    dispatcher.enqueueResponse(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    dispatcher.enqueueResponse(new MockResponse().setBody("retry success"));, +    server.setDispatcher(dispatcher);, +, +    listener = new RecordingEventListener() {, +      @Override public void responseHeadersStart(Call call) {, +        requestFinished.countDown();, +        super.responseHeadersStart(call);, +      }, +    };, +        .eventListener(listener), +++ b/okhttp/src/main/java/okhttp3/CacheControl.kt, +  private val noCache: Boolean,, +  private val noStore: Boolean,, +  private val maxAgeSeconds: Int,, +  private val sMaxAgeSeconds: Int,, +  private val mustRevalidate: Boolean,, +  private val maxStaleSeconds: Int,, +  private val minFreshSeconds: Int,, +  private val onlyIfCached: Boolean,, +  private val noTransform: Boolean,, +  private val immutable: Boolean,]