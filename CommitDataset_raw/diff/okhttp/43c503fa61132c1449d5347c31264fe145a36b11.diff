[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import static org.junit.Assert.assertNotNull;, +  @Test public void cancelWithInterceptor() throws Exception {, +    client.interceptors().add(new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        chain.proceed(chain.request());, +        throw new AssertionError(); // We expect an exception., +      }, +    });, +, +    Call call = client.newCall(new Request.Builder().url(server.getUrl("/a")).build());, +    call.cancel();, +, +    try {, +      call.execute();, +      fail();, +    } catch (IOException expected) {, +    }, +    assertEquals(0, server.getRequestCount());, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import static org.junit.Assert.assertNotNull;, +  @Test public void cancelWithInterceptor() throws Exception {, +    client.interceptors().add(new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        chain.proceed(chain.request());, +        throw new AssertionError(); // We expect an exception., +      }, +    });, +, +    Call call = client.newCall(new Request.Builder().url(server.getUrl("/a")).build());, +    call.cancel();, +, +    try {, +      call.execute();, +      fail();, +    } catch (IOException expected) {, +    }, +    assertEquals(0, server.getRequestCount());, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java, +        throw new IOException("Canceled");]