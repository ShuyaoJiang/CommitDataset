[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +      fail("Expected an IOException because the stream is closed.");, +    } catch (IOException expected) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +      fail("Expected an IOException because the stream is closed.");, +    } catch (IOException expected) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ResponseCacheTest.java, +      fail("Expected an IOException because the stream is closed.");, +    } catch (IOException expected) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +      fail("Expected an IOException because the stream is closed.");, +    } catch (IOException expected) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ResponseCacheTest.java, +      fail("Expected an IOException because the stream is closed.");, +    } catch (IOException expected) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +    } catch (IOException expected) {, +    } catch (IOException expected) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +      fail("Expected an IOException because the stream is closed.");, +    } catch (IOException expected) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ResponseCacheTest.java, +      fail("Expected an IOException because the stream is closed.");, +    } catch (IOException expected) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +    } catch (IOException expected) {, +    } catch (IOException expected) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +    if (bufferedRequestBody != null) {, +      // This also closes the wrapped requestBodyOut., +      closeQuietly(bufferedRequestBody);, +    } else if (requestBodyOut != null) {, +      closeQuietly(requestBodyOut);, +    }, +, +    // Flush the request body if there's data outstanding., +      if (bufferedRequestBody != null) {, +        // This also closes the wrapped requestBodyOut., +        bufferedRequestBody.close();, +      } else {, +      }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +      fail("Expected an IOException because the stream is closed.");, +    } catch (IOException expected) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ResponseCacheTest.java, +      fail("Expected an IOException because the stream is closed.");, +    } catch (IOException expected) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +    } catch (IOException expected) {, +    } catch (IOException expected) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +    if (bufferedRequestBody != null) {, +      // This also closes the wrapped requestBodyOut., +      closeQuietly(bufferedRequestBody);, +    } else if (requestBodyOut != null) {, +      closeQuietly(requestBodyOut);, +    }, +, +    // Flush the request body if there's data outstanding., +      if (bufferedRequestBody != null) {, +        // This also closes the wrapped requestBodyOut., +        bufferedRequestBody.close();, +      } else {, +      }, +++ b/okio/src/main/java/okio/RealBufferedSink.java, +    checkNotClosed();, +    checkNotClosed();, +    checkNotClosed();, +    checkNotClosed();, +    checkNotClosed();, +    checkNotClosed();, +    checkNotClosed();, +    checkNotClosed();, +    checkNotClosed();, +        checkNotClosed();, +        checkNotClosed();, +        // For backwards compatibility, a flush() on a closed stream is a no-op., +        if (!RealBufferedSink.this.closed) {, +      }, +, +      private void checkNotClosed() throws IOException {, +        // By convention in java.io, IOException and not IllegalStateException is used., +        if (RealBufferedSink.this.closed) {, +          throw new IOException("closed");, +        }, +      }, +    checkNotClosed();, +, +  private void checkNotClosed() {, +    if (closed) {, +      throw new IllegalStateException("closed");, +    }, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +      fail("Expected an IOException because the stream is closed.");, +    } catch (IOException expected) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ResponseCacheTest.java, +      fail("Expected an IOException because the stream is closed.");, +    } catch (IOException expected) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java]