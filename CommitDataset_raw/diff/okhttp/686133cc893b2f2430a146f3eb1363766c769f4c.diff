[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import com.squareup.okhttp.internal.bytes.Deadline;, +        source.close(Deadline.NONE);, +        sink.close(Deadline.NONE);, +      long read = in.read(skipBuffer, 2048, Deadline.NONE);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import com.squareup.okhttp.internal.bytes.Deadline;, +        source.close(Deadline.NONE);, +        sink.close(Deadline.NONE);, +      long read = in.read(skipBuffer, 2048, Deadline.NONE);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/BufferedSink.java, +  @Override public void write(OkBuffer source, long byteCount, Deadline deadline), +    buffer.write(source, byteCount, deadline);, +    emitCompleteSegments(deadline);, +  public void write(ByteString byteString, Deadline deadline) throws IOException {, +    emitCompleteSegments(deadline);, +  public void writeUtf8(String string, Deadline deadline) throws IOException {, +    emitCompleteSegments(deadline);, +  public void write(byte[] data, int offset, int byteCount, Deadline deadline) throws IOException {, +    emitCompleteSegments(deadline);, +  public void writeByte(int b, Deadline deadline) throws IOException {, +    emitCompleteSegments(deadline);, +  public void writeShort(int s, Deadline deadline) throws IOException {, +    emitCompleteSegments(deadline);, +  public void writeInt(int i, Deadline deadline) throws IOException {, +    emitCompleteSegments(deadline);, +  void emitCompleteSegments(Deadline deadline) throws IOException {, +    sink.write(buffer, byteCount, deadline);, +        emitCompleteSegments(Deadline.NONE);, +        emitCompleteSegments(Deadline.NONE);, +        BufferedSink.this.flush(Deadline.NONE);, +        BufferedSink.this.close(Deadline.NONE);, +  @Override public void flush(Deadline deadline) throws IOException {, +      sink.write(buffer, buffer.byteCount, deadline);, +    sink.flush(deadline);, +  @Override public void close(Deadline deadline) throws IOException {, +    flush(deadline);, +    sink.close(deadline);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import com.squareup.okhttp.internal.bytes.Deadline;, +        source.close(Deadline.NONE);, +        sink.close(Deadline.NONE);, +      long read = in.read(skipBuffer, 2048, Deadline.NONE);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/BufferedSink.java, +  @Override public void write(OkBuffer source, long byteCount, Deadline deadline), +    buffer.write(source, byteCount, deadline);, +    emitCompleteSegments(deadline);, +  public void write(ByteString byteString, Deadline deadline) throws IOException {, +    emitCompleteSegments(deadline);, +  public void writeUtf8(String string, Deadline deadline) throws IOException {, +    emitCompleteSegments(deadline);, +  public void write(byte[] data, int offset, int byteCount, Deadline deadline) throws IOException {, +    emitCompleteSegments(deadline);, +  public void writeByte(int b, Deadline deadline) throws IOException {, +    emitCompleteSegments(deadline);, +  public void writeShort(int s, Deadline deadline) throws IOException {, +    emitCompleteSegments(deadline);, +  public void writeInt(int i, Deadline deadline) throws IOException {, +    emitCompleteSegments(deadline);, +  void emitCompleteSegments(Deadline deadline) throws IOException {, +    sink.write(buffer, byteCount, deadline);, +        emitCompleteSegments(Deadline.NONE);, +        emitCompleteSegments(Deadline.NONE);, +        BufferedSink.this.flush(Deadline.NONE);, +        BufferedSink.this.close(Deadline.NONE);, +  @Override public void flush(Deadline deadline) throws IOException {, +      sink.write(buffer, buffer.byteCount, deadline);, +    sink.flush(deadline);, +  @Override public void close(Deadline deadline) throws IOException {, +    flush(deadline);, +    sink.close(deadline);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/BufferedSource.java, +  @Override public long read(OkBuffer sink, long byteCount, Deadline deadline), +      long read = source.read(buffer, Segment.SIZE, deadline);, +    return buffer.read(sink, toRead, deadline);, +  public boolean exhausted(Deadline deadline) throws IOException {, +    return buffer.byteCount() == 0 && source.read(buffer, Segment.SIZE, deadline) == -1;, +  void require(long byteCount, Deadline deadline) throws IOException {, +      if (source.read(buffer, Segment.SIZE, deadline) == -1) throw new EOFException();, +    require(1, Deadline.NONE);, +    require(byteCount, Deadline.NONE);, +    require(2, Deadline.NONE);, +    require(2, Deadline.NONE);, +    require(4, Deadline.NONE);, +    require(4, Deadline.NONE);, +  public void skip(long byteCount, Deadline deadline) throws IOException {, +      if (buffer.byteCount == 0 && source.read(buffer, Segment.SIZE, deadline) == -1) {, +  public long seek(byte b, Deadline deadline) throws IOException {, +      if (source.read(buffer, Segment.SIZE, deadline) == -1) throw new EOFException();, +          long count = source.read(buffer, Segment.SIZE, Deadline.NONE);, +          long count = source.read(buffer, Segment.SIZE, Deadline.NONE);, +        BufferedSource.this.close(Deadline.NONE);, +  @Override public void close(Deadline deadline) throws IOException {, +    source.close(deadline);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import com.squareup.okhttp.internal.bytes.Deadline;, +        source.close(Deadline.NONE);, +        sink.close(Deadline.NONE);, +      long read = in.read(skipBuffer, 2048, Deadline.NONE);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/BufferedSink.java]