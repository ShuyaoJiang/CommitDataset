[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java, +import com.squareup.okhttp.internal.Version;, +  /** https://github.com/square/okhttp/issues/891 */, +  @Test public void userAgentSystemPropertyIsNotAscii() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +, +    System.setProperty("http.agent", "a\nb\ud83c\udf69c\ud83c\udf68d\u007fe");, +    assertContent("abc", client.open(server.getUrl("/")));, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("a?b?c?d?e", request.getHeader("User-Agent"));, +  }, +, +  @Test public void userAgentDefaultsToOkHttpVersion() throws Exception {, +    assertEquals(Version.userAgent(), request.getHeader("User-Agent"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java, +import com.squareup.okhttp.internal.Version;, +  /** https://github.com/square/okhttp/issues/891 */, +  @Test public void userAgentSystemPropertyIsNotAscii() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +, +    System.setProperty("http.agent", "a\nb\ud83c\udf69c\ud83c\udf68d\u007fe");, +    assertContent("abc", client.open(server.getUrl("/")));, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("a?b?c?d?e", request.getHeader("User-Agent"));, +  }, +, +  @Test public void userAgentDefaultsToOkHttpVersion() throws Exception {, +    assertEquals(Version.userAgent(), request.getHeader("User-Agent"));, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +import com.squareup.okhttp.internal.Util;, +import com.squareup.okhttp.internal.Version;, +    return agent != null ? Util.toHumanReadableAscii(agent) : Version.userAgent();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java, +import com.squareup.okhttp.internal.Version;, +  /** https://github.com/square/okhttp/issues/891 */, +  @Test public void userAgentSystemPropertyIsNotAscii() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +, +    System.setProperty("http.agent", "a\nb\ud83c\udf69c\ud83c\udf68d\u007fe");, +    assertContent("abc", client.open(server.getUrl("/")));, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("a?b?c?d?e", request.getHeader("User-Agent"));, +  }, +, +  @Test public void userAgentDefaultsToOkHttpVersion() throws Exception {, +    assertEquals(Version.userAgent(), request.getHeader("User-Agent"));, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +import com.squareup.okhttp.internal.Util;, +import com.squareup.okhttp.internal.Version;, +    return agent != null ? Util.toHumanReadableAscii(agent) : Version.userAgent();, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +, +  /** Returns {@code s} with control characters and non-ASCII characters replaced with '?'. */, +  public static String toHumanReadableAscii(String s) {, +    for (int i = 0, length = s.length(), c; i < length; i += Character.charCount(c)) {, +      c = s.codePointAt(i);, +      if (c > '\u001f' && c < '\u007f') continue;, +, +      Buffer buffer = new Buffer();, +      buffer.writeUtf8(s, 0, i);, +      for (int j = i; j < length; j += Character.charCount(c)) {, +        c = s.codePointAt(j);, +        buffer.writeUtf8CodePoint(c > '\u001f' && c < '\u007f' ? c : '?');, +      }, +      return buffer.readUtf8();, +    }, +    return s;, +  }]