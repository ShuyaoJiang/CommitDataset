[+++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnectionNoEvents(c1);, +    assertTrue(c1.noNewExchanges); // Can't allocate once a leak has been detected., +      transmitter.acquireConnectionNoEvents(connection);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnectionNoEvents(c1);, +    assertTrue(c1.noNewExchanges); // Can't allocate once a leak has been detected., +      transmitter.acquireConnectionNoEvents(connection);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.connection.Exchange;, +      @Override public void initExchange(, +          Response.Builder responseBuilder, Exchange exchange) {, +        responseBuilder.initExchange(exchange);, +      }, +, +      @Override public @Nullable Exchange exchange(Response response) {, +        return response.exchange;, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnectionNoEvents(c1);, +    assertTrue(c1.noNewExchanges); // Can't allocate once a leak has been detected., +      transmitter.acquireConnectionNoEvents(connection);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.connection.Exchange;, +      @Override public void initExchange(, +          Response.Builder responseBuilder, Exchange exchange) {, +        responseBuilder.initExchange(exchange);, +      }, +, +      @Override public @Nullable Exchange exchange(Response response) {, +        return response.exchange;, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +      return getResponseWithInterceptorChain();, +        transmitter.noMoreExchanges(ioException);, +        if (transmitter.isCanceled()) throw new IOException("Canceled");, +    IOException ioException = null;, +    } catch (IOException e) {, +      ioException = e;, +      throw e;, +      transmitter.noMoreExchanges(ioException);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnectionNoEvents(c1);, +    assertTrue(c1.noNewExchanges); // Can't allocate once a leak has been detected., +      transmitter.acquireConnectionNoEvents(connection);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.connection.Exchange;, +      @Override public void initExchange(, +          Response.Builder responseBuilder, Exchange exchange) {, +        responseBuilder.initExchange(exchange);, +      }, +, +      @Override public @Nullable Exchange exchange(Response response) {, +        return response.exchange;, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +      return getResponseWithInterceptorChain();, +        transmitter.noMoreExchanges(ioException);, +        if (transmitter.isCanceled()) throw new IOException("Canceled");, +    IOException ioException = null;, +    } catch (IOException e) {, +      ioException = e;, +      throw e;, +      transmitter.noMoreExchanges(ioException);, +++ b/okhttp/src/main/java/okhttp3/Response.java, +import okhttp3.internal.connection.Exchange;, +  final @Nullable Exchange exchange;, +    this.exchange = builder.exchange;, +    if (exchange == null) throw new IllegalStateException("trailers not available");, +    return exchange.trailers();, +    @Nullable Exchange exchange;, +      this.exchange = response.exchange;, +    void initExchange(Exchange deferredTrailers) {, +      this.exchange = deferredTrailers;, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +      transmitter.acquireConnectionNoEvents(c1);, +    assertTrue(c1.noNewExchanges); // Can't allocate once a leak has been detected., +      transmitter.acquireConnectionNoEvents(connection);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.connection.Exchange;, +      @Override public void initExchange(, +          Response.Builder responseBuilder, Exchange exchange) {, +        responseBuilder.initExchange(exchange);, +      }, +, +      @Override public @Nullable Exchange exchange(Response response) {, +        return response.exchange;, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +      return getResponseWithInterceptorChain();, +        transmitter.noMoreExchanges(ioException);, +        if (transmitter.isCanceled()) throw new IOException("Canceled");, +    IOException ioException = null;, +    } catch (IOException e) {, +      ioException = e;, +      throw e;, +      transmitter.noMoreExchanges(ioException);, +++ b/okhttp/src/main/java/okhttp3/Response.java, +import okhttp3.internal.connection.Exchange;, +  final @Nullable Exchange exchange;, +    this.exchange = builder.exchange;, +    if (exchange == null) throw new IllegalStateException("trailers not available");, +    return exchange.trailers();, +    @Nullable Exchange exchange;]