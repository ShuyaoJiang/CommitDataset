[+++ b/okhttp/src/main/java/okhttp3/Cookie.kt, +class Cookie private constructor(, +  override fun equals(other: Any?): Boolean {, +    if (other !is Cookie) return false, +    val that = other as Cookie?, +    return (that!!.name == name, +        && that.value == value, +        && that.domain == domain, +        && that.path == path, +        && that.expiresAt == expiresAt, +        && that.secure == secure, +        && that.httpOnly == httpOnly, +        && that.persistent == persistent, +        && that.hostOnly == hostOnly), +  }, +, +  override fun hashCode(): Int {, +    var hash = 17, +    hash = 31 * hash + name.hashCode(), +    hash = 31 * hash + value.hashCode(), +    hash = 31 * hash + domain.hashCode(), +    hash = 31 * hash + path.hashCode(), +    hash = 31 * hash + (expiresAt xor expiresAt.ushr(32)).toInt(), +    hash = 31 * hash + if (secure) 0 else 1, +    hash = 31 * hash + if (httpOnly) 0 else 1, +    hash = 31 * hash + if (persistent) 0 else 1, +    hash = 31 * hash + if (hostOnly) 0 else 1, +    return hash, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Cookie.kt, +class Cookie private constructor(, +  override fun equals(other: Any?): Boolean {, +    if (other !is Cookie) return false, +    val that = other as Cookie?, +    return (that!!.name == name, +        && that.value == value, +        && that.domain == domain, +        && that.path == path, +        && that.expiresAt == expiresAt, +        && that.secure == secure, +        && that.httpOnly == httpOnly, +        && that.persistent == persistent, +        && that.hostOnly == hostOnly), +  }, +, +  override fun hashCode(): Int {, +    var hash = 17, +    hash = 31 * hash + name.hashCode(), +    hash = 31 * hash + value.hashCode(), +    hash = 31 * hash + domain.hashCode(), +    hash = 31 * hash + path.hashCode(), +    hash = 31 * hash + (expiresAt xor expiresAt.ushr(32)).toInt(), +    hash = 31 * hash + if (secure) 0 else 1, +    hash = 31 * hash + if (httpOnly) 0 else 1, +    hash = 31 * hash + if (persistent) 0 else 1, +    hash = 31 * hash + if (hostOnly) 0 else 1, +    return hash, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Handshake.kt, +data class Handshake private constructor(]