[+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +import java.io.EOFException;, +import okio.BufferedSource;, +, +  public static void readFully(BufferedSource source, byte[] sink) throws IOException {, +    int read = 0;, +    do {, +      int got = source.read(sink, read, sink.length - read);, +      if (got == -1) throw new EOFException();, +      read += got;, +    } while (read < sink.length);, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +import java.io.EOFException;, +import okio.BufferedSource;, +, +  public static void readFully(BufferedSource source, byte[] sink) throws IOException {, +    int read = 0;, +    do {, +      int got = source.read(sink, read, sink.length - read);, +      if (got == -1) throw new EOFException();, +      read += got;, +    } while (read < sink.length);, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +import java.io.EOFException;, +import okio.BufferedSource;, +, +  public static void readFully(BufferedSource source, byte[] sink) throws IOException {, +    int read = 0;, +    do {, +      int got = source.read(sink, read, sink.length - read);, +      if (got == -1) throw new EOFException();, +      read += got;, +    } while (read < sink.length);, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/ws/WebSocketReader.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +import static com.squareup.okhttp.internal.Util.readFully;, +import static com.squareup.okhttp.internal.ws.Protocol.PAYLOAD_MAX;, +      readFully(source, maskKey);]