[+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RawHeaders.java, +  /** Returns headers for a name value block containing a SPDY response. */, +  public static RawHeaders fromNameValueBlock(List<String> nameValueBlock) throws IOException {, +    String status = null;, +    String version = null;, +        String value = values.substring(start, end);, +        if (":status".equals(name)) {, +          status = value;, +        } else if (":version".equals(name)) {, +          version = value;, +        } else {, +          result.namesAndValues.add(value);, +        }, +    if (status == null) throw new ProtocolException("Expected ':status' header not present");, +    if (version == null) throw new ProtocolException("Expected ':version' header not present");, +    result.setStatusLine(version + " " + status);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RawHeaders.java, +  /** Returns headers for a name value block containing a SPDY response. */, +  public static RawHeaders fromNameValueBlock(List<String> nameValueBlock) throws IOException {, +    String status = null;, +    String version = null;, +        String value = values.substring(start, end);, +        if (":status".equals(name)) {, +          status = value;, +        } else if (":version".equals(name)) {, +          version = value;, +        } else {, +          result.namesAndValues.add(value);, +        }, +    if (status == null) throw new ProtocolException("Expected ':status' header not present");, +    if (version == null) throw new ProtocolException("Expected ':version' header not present");, +    result.setStatusLine(version + " " + status);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RawHeaders.java, +  /** Returns headers for a name value block containing a SPDY response. */, +  public static RawHeaders fromNameValueBlock(List<String> nameValueBlock) throws IOException {, +    String status = null;, +    String version = null;, +        String value = values.substring(start, end);, +        if (":status".equals(name)) {, +          status = value;, +        } else if (":version".equals(name)) {, +          version = value;, +        } else {, +          result.namesAndValues.add(value);, +        }, +    if (status == null) throw new ProtocolException("Expected ':status' header not present");, +    if (version == null) throw new ProtocolException("Expected ':version' header not present");, +    result.setStatusLine(version + " " + status);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/RawHeadersTest.java, +  @Test public void parseNameValueBlock() throws IOException {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RawHeaders.java, +  /** Returns headers for a name value block containing a SPDY response. */, +  public static RawHeaders fromNameValueBlock(List<String> nameValueBlock) throws IOException {, +    String status = null;, +    String version = null;, +        String value = values.substring(start, end);, +        if (":status".equals(name)) {, +          status = value;, +        } else if (":version".equals(name)) {, +          version = value;, +        } else {, +          result.namesAndValues.add(value);, +        }, +    if (status == null) throw new ProtocolException("Expected ':status' header not present");, +    if (version == null) throw new ProtocolException("Expected ':version' header not present");, +    result.setStatusLine(version + " " + status);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/RawHeadersTest.java, +  @Test public void parseNameValueBlock() throws IOException {, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/spdy/HttpOverSpdyTest.java, +    MockResponse response = new MockResponse().setBody("ABCDE").setStatus("HTTP/1.1 200 Sweet");, +    assertEquals(200, connection.getResponseCode());, +    assertEquals("Sweet", connection.getResponseMessage());, +  @Test public void conditionalCache() throws IOException {, +    client.setResponseCache(cache);, +, +    server.enqueue(new MockResponse().addHeader("ETag: v1").setBody("A"));, +    server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +    server.play();, +, +    assertContent("A", client.open(server.getUrl("/")), Integer.MAX_VALUE);, +    assertEquals(1, cache.getRequestCount());, +    assertEquals(1, cache.getNetworkCount());, +    assertEquals(0, cache.getHitCount());, +    assertContent("A", client.open(server.getUrl("/")), Integer.MAX_VALUE);, +    assertEquals(2, cache.getRequestCount());, +    assertEquals(2, cache.getNetworkCount());, +    assertEquals(1, cache.getHitCount());, +  }, +]