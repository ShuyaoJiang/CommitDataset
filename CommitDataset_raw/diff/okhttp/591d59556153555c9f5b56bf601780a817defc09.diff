[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +, +  @Test public void headersToString() {, +    Headers headers = new Headers.Builder(), +        .add("A", "a"), +        .add("B", "bb"), +        .build();, +    assertEquals("A: a\nB: bb\n", headers.toString());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +, +  @Test public void headersToString() {, +    Headers headers = new Headers.Builder(), +        .add("A", "a"), +        .add("B", "bb"), +        .build();, +    assertEquals("A: a\nB: bb\n", headers.toString());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HpackTest.java, +    hpackWriter = new Hpack.Writer(bytesOut);, +    Hpack.Writer writer = new Hpack.Writer(110, bytesOut);, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +, +  @Test public void headersToString() {, +    Headers headers = new Headers.Builder(), +        .add("A", "a"), +        .add("B", "bb"), +        .build();, +    assertEquals("A: a\nB: bb\n", headers.toString());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HpackTest.java, +    hpackWriter = new Hpack.Writer(bytesOut);, +    Hpack.Writer writer = new Hpack.Writer(110, bytesOut);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HuffmanTest.java, +import java.io.ByteArrayOutputStream;, +import java.io.DataOutputStream;, +      assertRoundTrip(s.substring(0, i).getBytes());, +    assertRoundTrip(buf);, +  private void assertRoundTrip(byte[] buf) throws IOException {, +    ByteArrayOutputStream baos = new ByteArrayOutputStream();, +    DataOutputStream dos = new DataOutputStream(baos);, +    Huffman.get().encode(buf, dos);, +    assertEquals(baos.size(), Huffman.get().encodedLength(buf));, +, +    byte[] decodedBytes = Huffman.get().decode(baos.toByteArray());, +    assertTrue(Arrays.equals(buf, decodedBytes));, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +, +  @Test public void headersToString() {, +    Headers headers = new Headers.Builder(), +        .add("A", "a"), +        .add("B", "bb"), +        .build();, +    assertEquals("A: a\nB: bb\n", headers.toString());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HpackTest.java, +    hpackWriter = new Hpack.Writer(bytesOut);, +    Hpack.Writer writer = new Hpack.Writer(110, bytesOut);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HuffmanTest.java, +import java.io.ByteArrayOutputStream;, +import java.io.DataOutputStream;, +      assertRoundTrip(s.substring(0, i).getBytes());, +    assertRoundTrip(buf);, +  private void assertRoundTrip(byte[] buf) throws IOException {, +    ByteArrayOutputStream baos = new ByteArrayOutputStream();, +    DataOutputStream dos = new DataOutputStream(baos);, +    Huffman.get().encode(buf, dos);, +    assertEquals(baos.size(), Huffman.get().encodedLength(buf));, +, +    byte[] decodedBytes = Huffman.get().decode(baos.toByteArray());, +    assertTrue(Arrays.equals(buf, decodedBytes));, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +, +  @Test public void headersToString() {, +    Headers headers = new Headers.Builder(), +        .add("A", "a"), +        .add("B", "bb"), +        .build();, +    assertEquals("A: a\nB: bb\n", headers.toString());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HpackTest.java, +    hpackWriter = new Hpack.Writer(bytesOut);, +    Hpack.Writer writer = new Hpack.Writer(110, bytesOut);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HuffmanTest.java, +import java.io.ByteArrayOutputStream;, +import java.io.DataOutputStream;, +      assertRoundTrip(s.substring(0, i).getBytes());, +    assertRoundTrip(buf);, +  private void assertRoundTrip(byte[] buf) throws IOException {, +    ByteArrayOutputStream baos = new ByteArrayOutputStream();, +    DataOutputStream dos = new DataOutputStream(baos);, +    Huffman.get().encode(buf, dos);, +    assertEquals(baos.size(), Huffman.get().encodedLength(buf));, +, +    byte[] decodedBytes = Huffman.get().decode(baos.toByteArray());, +    assertTrue(Arrays.equals(buf, decodedBytes));, +++ /dev/null, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +  @Override public void setInstanceFollowRedirects(boolean followRedirects) {]