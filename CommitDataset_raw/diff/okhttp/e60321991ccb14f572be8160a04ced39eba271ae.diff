[+++ b/src/main/java/libcore/io/DiskLruCache.java, +        StrictLineReader reader = new StrictLineReader(new FileInputStream(journalFile),, +                Charsets.US_ASCII);, +            String magic = reader.readLine();, +            String version = reader.readLine();, +            String appVersionString = reader.readLine();, +            String valueCountString = reader.readLine();, +            String blank = reader.readLine();, +                    readJournalLine(reader.readLine());, +            IoUtils.closeQuietly(reader);, +++ b/src/main/java/libcore/io/DiskLruCache.java, +        StrictLineReader reader = new StrictLineReader(new FileInputStream(journalFile),, +                Charsets.US_ASCII);, +            String magic = reader.readLine();, +            String version = reader.readLine();, +            String appVersionString = reader.readLine();, +            String valueCountString = reader.readLine();, +            String blank = reader.readLine();, +                    readJournalLine(reader.readLine());, +            IoUtils.closeQuietly(reader);, +++ b/src/main/java/libcore/io/StrictLineReader.java, +/*, + * Copyright (C) 2012 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package libcore.io;, +, +import java.io.ByteArrayOutputStream;, +import java.io.Closeable;, +import java.io.EOFException;, +import java.io.IOException;, +import java.io.InputStream;, +import java.nio.charset.Charset;, +import libcore.util.Charsets;, +, +/**, + * Buffers input from an {@link InputStream} for reading lines., + *, + * This class is used for buffered reading of lines. For purposes of this class, a line ends with, + * "\n" or "\r\n". End of input is reported by throwing {@code EOFException}. Unterminated line at, + * end of input is invalid and will be ignored, the caller may use {@code hasUnterminatedLine()}, + * to detect it after catching the {@code EOFException}., + *, + * This class is intended for reading input that strictly consists of lines, such as line-based, + * cache entries or cache journal. Unlike the {@link BufferedReader} which in conjunction with, + * {@link InputStreamReader} provides similar functionality, this class uses different, + * end-of-input reporting and a more restrictive definition of a line., + *, + * This class supports only charsets that encode '\r' and '\n' as a single byte with value 13, + * and 10, respectively, and the representation of no other character contains these values., + * We currently check in constructor that the charset is one of US-ASCII, UTF-8 and ISO-8859-1., + * The default charset is US_ASCII., + */, +public class StrictLineReader implements Closeable {, +    private static final byte CR = (byte)'\r';, +    private static final byte LF = (byte)'\n';, +, +    private final InputStream in;, +    private final Charset charset;, +, +    /*, +     * Buffered data is stored in {@code buf}. As long as no exception occurs, 0 <= pos <= end, +     * and the data in the range [pos, end) is buffered for reading. At end of input, if there is, +     * an unterminated line, we set end == -1, otherwise end == pos. If the underlying, +     * {@code InputStream} throws an {@code IOException}, end may remain as either pos or -1., +     */, +    private byte[] buf;, +    private int pos;, +    private int end;, +, +    /**, +     * Constructs a new {@code StrictLineReader} with the default capacity and charset., +     *, +     * @param in the {@code InputStream} to read data from., +     * @throws NullPointerException if {@code in} is null., +     */, +    public StrictLineReader(InputStream in) {, +        this(in, 8192);, +    }, +, +    /**, +     * Constructs a new {@code LineReader} with the specified capacity and the default charset., +     *, +     * @param in the {@code InputStream} to read data from., +     * @param capacity the capacity of the buffer., +     * @throws NullPointerException if {@code in} is null., +     * @throws IllegalArgumentException for negative or zero {@code capacity}., +     */]