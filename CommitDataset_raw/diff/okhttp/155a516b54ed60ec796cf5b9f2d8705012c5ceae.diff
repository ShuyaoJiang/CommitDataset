[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +    void synStream(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId,, +        int priority, int slot, List<String> nameValueBlock);, +    void synReply(boolean inFinished, int streamId, List<String> nameValueBlock) throws IOException;, +    void headers(int streamId, List<String> nameValueBlock) throws IOException;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +    void synStream(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId,, +        int priority, int slot, List<String> nameValueBlock);, +    void synReply(boolean inFinished, int streamId, List<String> nameValueBlock) throws IOException;, +    void headers(int streamId, List<String> nameValueBlock) throws IOException;, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +    void synStream(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId,, +        int priority, int slot, List<String> nameValueBlock);, +    void synReply(boolean inFinished, int streamId, List<String> nameValueBlock) throws IOException;, +    void headers(int streamId, List<String> nameValueBlock) throws IOException;, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft04.java, +          handler.headers(streamId, namesAndValues);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +    void synStream(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId,, +        int priority, int slot, List<String> nameValueBlock);, +    void synReply(boolean inFinished, int streamId, List<String> nameValueBlock) throws IOException;, +    void headers(int streamId, List<String> nameValueBlock) throws IOException;, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft04.java, +          handler.headers(streamId, namesAndValues);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Spdy3.java, +      handler.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,, +          nameValueBlock);, +      handler.synReply(inFinished, streamId, nameValueBlock);, +      handler.headers(streamId, nameValueBlock);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +    void synStream(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId,, +        int priority, int slot, List<String> nameValueBlock);, +    void synReply(boolean inFinished, int streamId, List<String> nameValueBlock) throws IOException;, +    void headers(int streamId, List<String> nameValueBlock) throws IOException;, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft04.java, +          handler.headers(streamId, namesAndValues);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Spdy3.java, +      handler.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,, +          nameValueBlock);, +      handler.synReply(inFinished, streamId, nameValueBlock);, +      handler.headers(streamId, nameValueBlock);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +        stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, slot,, +            requestHeaders, settings);, +    @Override public void synStream(boolean outFinished, boolean inFinished, int streamId,, +        int associatedStreamId, int priority, int slot, List<String> nameValueBlock) {, +      final SpdyStream synStream;, +      final SpdyStream previous;, +        synStream = new SpdyStream(streamId, SpdyConnection.this, outFinished, inFinished, priority,, +            slot, nameValueBlock, settings);, +        if (shutdown) {, +          return;, +        }, +        lastGoodStreamId = streamId;, +        previous = streams.put(streamId, synStream);, +      }, +      if (previous != null) {, +        previous.closeLater(ErrorCode.PROTOCOL_ERROR);, +        removeStream(streamId);, +      executor.submit(new NamedRunnable("OkHttp SPDY Callback %s stream %d", hostName, streamId) {, +            handler.receive(synStream);, +    }, +, +    @Override public void synReply(boolean inFinished, int streamId, List<String> nameValueBlock), +        throws IOException {, +      SpdyStream replyStream = getStream(streamId);, +      if (replyStream == null) {, +        writeSynResetLater(streamId, ErrorCode.INVALID_STREAM);, +      replyStream.receiveReply(nameValueBlock);, +      if (inFinished) {, +        replyStream.receiveFin();, +      }, +    @Override public void headers(int streamId, List<String> nameValueBlock), +        throws IOException {, +      SpdyStream replyStream = getStream(streamId);, +      if (replyStream != null) {, +        replyStream.receiveHeaders(nameValueBlock);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +    void synStream(boolean outFinished, boolean inFinished, int streamId, int associatedStreamId,, +        int priority, int slot, List<String> nameValueBlock);, +    void synReply(boolean inFinished, int streamId, List<String> nameValueBlock) throws IOException;, +    void headers(int streamId, List<String> nameValueBlock) throws IOException;, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft04.java, +          handler.headers(streamId, namesAndValues);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Spdy3.java, +      handler.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,, +          nameValueBlock);, +      handler.synReply(inFinished, streamId, nameValueBlock);, +      handler.headers(streamId, nameValueBlock);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +        stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, slot,, +            requestHeaders, settings);, +    @Override public void synStream(boolean outFinished, boolean inFinished, int streamId,, +        int associatedStreamId, int priority, int slot, List<String> nameValueBlock) {, +      final SpdyStream synStream;]