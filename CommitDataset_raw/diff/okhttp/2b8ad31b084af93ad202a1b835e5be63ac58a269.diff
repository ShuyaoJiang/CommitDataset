[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.util.concurrent.LinkedBlockingDeque;, +import java.util.concurrent.ThreadPoolExecutor;, +import static java.util.concurrent.TimeUnit.SECONDS;, +        Util.closeQuietly(serverSocket);, +          Util.closeQuietly(s.next());, +          Util.closeQuietly(s.next());, +    String name = request.getPath();, +    ThreadPoolExecutor replyExecutor =, +        new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>(),, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket Replier", name), true));, +    replyExecutor.allowCoreThreadTimeOut(true);, +, +    replyExecutor.shutdown();, +    Util.closeQuietly(sink);, +    Util.closeQuietly(source);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.util.concurrent.LinkedBlockingDeque;, +import java.util.concurrent.ThreadPoolExecutor;, +import static java.util.concurrent.TimeUnit.SECONDS;, +        Util.closeQuietly(serverSocket);, +          Util.closeQuietly(s.next());, +          Util.closeQuietly(s.next());, +    String name = request.getPath();, +    ThreadPoolExecutor replyExecutor =, +        new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>(),, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket Replier", name), true));, +    replyExecutor.allowCoreThreadTimeOut(true);, +, +    replyExecutor.shutdown();, +    Util.closeQuietly(sink);, +    Util.closeQuietly(source);, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketHttpTest.java, +import okhttp3.internal.ws.RealWebSocket;, +    WebSocket client = enqueueClientWebSocket();, +    client.send("Hello, WebSockets!");, +    RealWebSocket client = enqueueClientWebSocket();, +    client.send(ByteString.encodeUtf8("Hello!"));, +    RealWebSocket client = enqueueClientWebSocket();, +      client.send((String) null);, +    RealWebSocket client = enqueueClientWebSocket();, +      client.send((ByteString) null);, +    enqueueClientWebSocket();, +    enqueueClientWebSocket();, +    enqueueClientWebSocket();, +    enqueueClientWebSocket();, +    enqueueClientWebSocket();, +    enqueueClientWebSocket();, +    enqueueClientWebSocket();, +    RealWebSocket client = enqueueClientWebSocket();, +    client.send("abc");, +    enqueueClientWebSocket();, +    enqueueClientWebSocket();, +    enqueueClientWebSocket();, +    enqueueClientWebSocket();, +    enqueueClientWebSocket();, +    enqueueClientWebSocket();, +    RealWebSocket webSocket = enqueueClientWebSocket(request);, +  private RealWebSocket enqueueClientWebSocket() {, +    return enqueueClientWebSocket(new Request.Builder().get().url(webServer.url("/")).build());, +  private RealWebSocket enqueueClientWebSocket(Request request) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.util.concurrent.LinkedBlockingDeque;, +import java.util.concurrent.ThreadPoolExecutor;, +import static java.util.concurrent.TimeUnit.SECONDS;, +        Util.closeQuietly(serverSocket);, +          Util.closeQuietly(s.next());, +          Util.closeQuietly(s.next());, +    String name = request.getPath();, +    ThreadPoolExecutor replyExecutor =, +        new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>(),, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket Replier", name), true));, +    replyExecutor.allowCoreThreadTimeOut(true);, +, +    replyExecutor.shutdown();, +    Util.closeQuietly(sink);, +    Util.closeQuietly(source);, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketHttpTest.java, +import okhttp3.internal.ws.RealWebSocket;, +    WebSocket client = enqueueClientWebSocket();, +    client.send("Hello, WebSockets!");, +    RealWebSocket client = enqueueClientWebSocket();, +    client.send(ByteString.encodeUtf8("Hello!"));, +    RealWebSocket client = enqueueClientWebSocket();, +      client.send((String) null);, +    RealWebSocket client = enqueueClientWebSocket();, +      client.send((ByteString) null);, +    enqueueClientWebSocket();, +    enqueueClientWebSocket();, +    enqueueClientWebSocket();, +    enqueueClientWebSocket();, +    enqueueClientWebSocket();, +    enqueueClientWebSocket();, +    enqueueClientWebSocket();, +    RealWebSocket client = enqueueClientWebSocket();, +    client.send("abc");, +    enqueueClientWebSocket();, +    enqueueClientWebSocket();, +    enqueueClientWebSocket();, +    enqueueClientWebSocket();]