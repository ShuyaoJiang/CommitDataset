[+++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, +      call.execute();, +++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, +      call.execute();, +++ b/okhttp/src/main/java/okhttp3/internal/Transmitter.java, +import okhttp3.internal.http.RealResponseBody;, +import okio.ForwardingSource;, +import okio.Okio;, +import okio.Source;, +    String contentType = response.header("Content-Type");, +    HttpCodec codec = streamAllocation.codec();, +    long contentLength = codec.reportedContentLength(response);, +    Source rawSource = codec.openResponseBodySource(response);, +    ResponseBodySource source = new ResponseBodySource(rawSource, contentLength);, +    return new RealResponseBody(contentType, contentLength, Okio.buffer(source));, +    private long contentLength;, +    private long bytesReceived;, +    private boolean closed;, +    RequestBodySink(Sink delegate, long contentLength) {, +      this.contentLength = contentLength;, +      if (contentLength != -1L && bytesReceived + byteCount > contentLength) {, +        throw new ProtocolException("expected " + contentLength, +      if (contentLength != -1L && bytesReceived != contentLength) {, +  /** A response body that fires events when it completes. */, +  final class ResponseBodySource extends ForwardingSource {, +    private long contentLength;, +    private long bytesReceived;, +    private boolean completed;, +    private boolean closed;, +, +    ResponseBodySource(Source delegate, long contentLength) {, +      super(delegate);, +      this.contentLength = contentLength;, +, +      if (contentLength == 0L) {, +        complete(null);, +      }, +    }, +, +    @Override public long read(Buffer sink, long byteCount) throws IOException {, +      if (closed) throw new IllegalStateException("closed");, +      try {, +        long read = delegate().read(sink, byteCount);, +        if (read == -1L) {, +          complete(null);, +          return -1L;, +        }, +, +        long newBytesReceived = bytesReceived + read;, +        if (contentLength != -1L && newBytesReceived > contentLength) {, +          throw new ProtocolException("expected " + contentLength, +              + " bytes but received " + newBytesReceived);, +        }, +, +        bytesReceived = newBytesReceived;, +        if (newBytesReceived == contentLength) {, +          complete(null);, +        }, +, +        return read;, +      } catch (IOException e) {, +        complete(e);, +        throw e;, +      }, +    }, +, +    @Override public void close() throws IOException {, +      if (closed) return;, +      closed = true;, +      super.close();, +      complete(null);, +    }, +, +    void complete(IOException e) {, +      if (completed) return;, +      completed = true;, +      responseBodyComplete(bytesReceived, e);, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, +      call.execute();, +++ b/okhttp/src/main/java/okhttp3/internal/Transmitter.java, +import okhttp3.internal.http.RealResponseBody;, +import okio.ForwardingSource;, +import okio.Okio;, +import okio.Source;, +    String contentType = response.header("Content-Type");, +    HttpCodec codec = streamAllocation.codec();, +    long contentLength = codec.reportedContentLength(response);, +    Source rawSource = codec.openResponseBodySource(response);, +    ResponseBodySource source = new ResponseBodySource(rawSource, contentLength);, +    return new RealResponseBody(contentType, contentLength, Okio.buffer(source));, +    private long contentLength;, +    private long bytesReceived;, +    private boolean closed;, +    RequestBodySink(Sink delegate, long contentLength) {, +      this.contentLength = contentLength;, +      if (contentLength != -1L && bytesReceived + byteCount > contentLength) {, +        throw new ProtocolException("expected " + contentLength]