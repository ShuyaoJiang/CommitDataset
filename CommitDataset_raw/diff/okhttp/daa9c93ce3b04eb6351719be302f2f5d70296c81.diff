[+++ b/src/main/java/com/google/mockwebserver/MockResponse.java, +import static com.google.mockwebserver.MockWebServer.ASCII;, +, +    /**, +     * Creates a new mock response with an empty body., +     */, +    /**, +     * Removes all HTTP headers including any "Content-Length" and, +     * "Transfer-encoding" headers that were added by default., +     */, +    /**, +     * Adds {@code header} as an HTTP header. For well-formed HTTP {@code, +     * header} should contain a name followed by a colon and a value., +     */, +    /**, +     * Adds a new header with the name and value. This may be used to add, +     * multiple headers with the same name., +     */, +    /**, +     * Removes all headers named {@code name}, then adds a new header with the, +     * name and value., +     */, +    /**, +     * Removes all headers named {@code name}., +     */, +     * Returns the raw HTTP payload., +    /**, +     * Sets the response body to the UTF-8 encoded bytes of {@code body}., +     */, +            return setBody(body.getBytes("UTF-8"));, +    /**, +     * Sets the response body to {@code body}, chunked every {@code, +     * maxChunkSize} bytes., +     */, +    public MockResponse setChunkedBody(byte[] body, int maxChunkSize) {, +        try {, +        } catch (IOException e) {, +            throw new AssertionError(); // In-memory I/O doesn't throw IOExceptions., +        }, +    /**, +     * Sets the response body to the UTF-8 encoded bytes of {@code body},, +     * chunked every {@code maxChunkSize} bytes., +     */, +    public MockResponse setChunkedBody(String body, int maxChunkSize) {, +        try {, +            return setChunkedBody(body.getBytes("UTF-8"), maxChunkSize);, +        } catch (UnsupportedEncodingException e) {, +            throw new AssertionError();, +        }, +     * Set simulated network speed, in bytes per second. This applies to the, +     * response body only; response headers are not throttled., +++ b/src/main/java/com/google/mockwebserver/MockResponse.java, +import static com.google.mockwebserver.MockWebServer.ASCII;, +, +    /**, +     * Creates a new mock response with an empty body., +     */, +    /**, +     * Removes all HTTP headers including any "Content-Length" and, +     * "Transfer-encoding" headers that were added by default., +     */, +    /**, +     * Adds {@code header} as an HTTP header. For well-formed HTTP {@code, +     * header} should contain a name followed by a colon and a value., +     */, +    /**, +     * Adds a new header with the name and value. This may be used to add, +     * multiple headers with the same name., +     */, +    /**, +     * Removes all headers named {@code name}, then adds a new header with the, +     * name and value., +     */, +    /**, +     * Removes all headers named {@code name}., +     */, +     * Returns the raw HTTP payload., +    /**, +     * Sets the response body to the UTF-8 encoded bytes of {@code body}., +     */, +            return setBody(body.getBytes("UTF-8"));, +    /**, +     * Sets the response body to {@code body}, chunked every {@code, +     * maxChunkSize} bytes., +     */, +    public MockResponse setChunkedBody(byte[] body, int maxChunkSize) {, +        try {, +        } catch (IOException e) {, +            throw new AssertionError(); // In-memory I/O doesn't throw IOExceptions., +        }, +    /**, +     * Sets the response body to the UTF-8 encoded bytes of {@code body},, +     * chunked every {@code maxChunkSize} bytes., +     */, +    public MockResponse setChunkedBody(String body, int maxChunkSize) {, +        try {, +            return setChunkedBody(body.getBytes("UTF-8"), maxChunkSize);, +        } catch (UnsupportedEncodingException e) {, +            throw new AssertionError();, +        }]