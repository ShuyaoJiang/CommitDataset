[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +        } else if (response.getSocketPolicy() == SHUTDOWN_SERVER_AFTER_RESPONSE) {, +          shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +        } else if (response.getSocketPolicy() == SHUTDOWN_SERVER_AFTER_RESPONSE) {, +          shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import java.net.Inet6Address;, +import java.net.InetAddress;, +      String path = requestLine.substring(methodEnd + 1, pathEnd);, +      if (!path.startsWith("/")) {, +        path = "/";, +      }, +      this.path = path;, +      InetAddress inetAddress = socket.getLocalAddress();, +, +      String hostname = inetAddress.getHostName();, +      if (inetAddress instanceof Inet6Address) {, +        hostname = "[" + hostname + "]";, +      }, +, +      int localPort = socket.getLocalPort();, +      // Allow null in failure case to allow for testing bad requests, +      this.requestUrl =, +          HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, localPort, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +        } else if (response.getSocketPolicy() == SHUTDOWN_SERVER_AFTER_RESPONSE) {, +          shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import java.net.Inet6Address;, +import java.net.InetAddress;, +      String path = requestLine.substring(methodEnd + 1, pathEnd);, +      if (!path.startsWith("/")) {, +        path = "/";, +      }, +      this.path = path;, +      InetAddress inetAddress = socket.getLocalAddress();, +, +      String hostname = inetAddress.getHostName();, +      if (inetAddress instanceof Inet6Address) {, +        hostname = "[" + hostname + "]";, +      }, +, +      int localPort = socket.getLocalPort();, +      // Allow null in failure case to allow for testing bad requests, +      this.requestUrl =, +          HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, localPort, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Shutdown {@link MockWebServer} after writing response., +   */, +  SHUTDOWN_SERVER_AFTER_RESPONSE,, +, +  /**, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +        } else if (response.getSocketPolicy() == SHUTDOWN_SERVER_AFTER_RESPONSE) {, +          shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +import java.net.Inet6Address;, +import java.net.InetAddress;, +      String path = requestLine.substring(methodEnd + 1, pathEnd);, +      if (!path.startsWith("/")) {, +        path = "/";, +      }, +      this.path = path;, +      InetAddress inetAddress = socket.getLocalAddress();, +, +      String hostname = inetAddress.getHostName();, +      if (inetAddress instanceof Inet6Address) {, +        hostname = "[" + hostname + "]";, +      }, +, +      int localPort = socket.getLocalPort();, +      // Allow null in failure case to allow for testing bad requests, +      this.requestUrl =, +          HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, localPort, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Shutdown {@link MockWebServer} after writing response., +   */, +  SHUTDOWN_SERVER_AFTER_RESPONSE,, +, +  /**, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void shutdownServerAfterRequest() throws Exception {, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE));, +, +    URL url = server.url("/").url();, +, +    HttpURLConnection connection = (HttpURLConnection) url.openConnection();, +    assertEquals(HttpURLConnection.HTTP_OK, connection.getResponseCode());, +, +    HttpURLConnection refusedConnection = (HttpURLConnection) url.openConnection();, +, +    try {, +      refusedConnection.getResponseCode();, +      fail("Second connection should be refused");, +    } catch (ConnectException e ) {]