[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  // This test is ignored because we don't (yet) reliably recover for large request bodies., +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  // This test is ignored because we don't (yet) reliably recover for large request bodies., +++ b/okhttp/src/main/java/com/squareup/okhttp/Cache.java, +import java.io.ByteArrayInputStream;, +        writeCertArray(sink, handshake.peerCertificates());, +        writeCertArray(sink, handshake.localCertificates());, +          byte[] bytes = ByteString.decodeBase64(line).toByteArray();, +          result.add(certificateFactory.generateCertificate(new ByteArrayInputStream(bytes)));, +    private void writeCertArray(BufferedSink sink, List<Certificate> certificates), +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  // This test is ignored because we don't (yet) reliably recover for large request bodies., +++ b/okhttp/src/main/java/com/squareup/okhttp/Cache.java, +import java.io.ByteArrayInputStream;, +        writeCertArray(sink, handshake.peerCertificates());, +        writeCertArray(sink, handshake.localCertificates());, +          byte[] bytes = ByteString.decodeBase64(line).toByteArray();, +          result.add(certificateFactory.generateCertificate(new ByteArrayInputStream(bytes)));, +    private void writeCertArray(BufferedSink sink, List<Certificate> certificates), +++ b/samples/crawler/src/main/java/com/squareup/okhttp/sample/Crawler.java, +import com.squareup.okhttp.internal.NamedRunnable;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.atomic.AtomicInteger;, +  private final ConcurrentHashMap<String, AtomicInteger> hostnames = new ConcurrentHashMap<>();, +      executor.execute(new NamedRunnable("Crawler %s", i) {, +        @Override protected void execute() {, +    // Skip hosts that we've visited many times., +    AtomicInteger hostnameCount = new AtomicInteger();, +    AtomicInteger previous = hostnames.putIfAbsent(url.getHost(), hostnameCount);, +    if (previous != null) hostnameCount = previous;, +    if (hostnameCount.incrementAndGet() > 100) return;, +, +        ? ("(network: " + response.networkResponse().code() + " over " + response.protocol() + ")"), +      URL link = parseUrl(response.request().url(), href);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  // This test is ignored because we don't (yet) reliably recover for large request bodies., +++ b/okhttp/src/main/java/com/squareup/okhttp/Cache.java, +import java.io.ByteArrayInputStream;, +        writeCertArray(sink, handshake.peerCertificates());, +        writeCertArray(sink, handshake.localCertificates());, +          byte[] bytes = ByteString.decodeBase64(line).toByteArray();, +          result.add(certificateFactory.generateCertificate(new ByteArrayInputStream(bytes)));, +    private void writeCertArray(BufferedSink sink, List<Certificate> certificates), +++ b/samples/crawler/src/main/java/com/squareup/okhttp/sample/Crawler.java, +import com.squareup.okhttp.internal.NamedRunnable;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.atomic.AtomicInteger;, +  private final ConcurrentHashMap<String, AtomicInteger> hostnames = new ConcurrentHashMap<>();, +      executor.execute(new NamedRunnable("Crawler %s", i) {, +        @Override protected void execute() {, +    // Skip hosts that we've visited many times., +    AtomicInteger hostnameCount = new AtomicInteger();, +    AtomicInteger previous = hostnames.putIfAbsent(url.getHost(), hostnameCount);, +    if (previous != null) hostnameCount = previous;, +    if (hostnameCount.incrementAndGet() > 100) return;, +, +        ? ("(network: " + response.networkResponse().code() + " over " + response.protocol() + ")"), +      URL link = parseUrl(response.request().url(), href);, +++ /dev/null]