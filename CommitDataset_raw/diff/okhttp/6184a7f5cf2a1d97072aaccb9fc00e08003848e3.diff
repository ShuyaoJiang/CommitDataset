[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.Locale;, +import okio.Buffer;, +import okio.BufferedSink;, +import okio.ForwardingSink;, +import okio.ForwardingSource;, +import okio.Okio;, +import okio.Sink;, +import okio.Source;, +import org.junit.Rule;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertSame;, +, +public final class InterceptorTest {, +  @Rule public MockWebServerRule server = new MockWebServerRule();, +, +  private OkHttpClient client = new OkHttpClient();, +  private RecordingCallback callback = new RecordingCallback();, +, +  @Test public void shortCircuitResponseBeforeConnection() throws Exception {, +    server.get().shutdown(); // Accept no connections., +, +    Request request = new Request.Builder(), +        .url("https://localhost:0/"), +        .build();, +, +    final Response interceptorResponse = new Response.Builder(), +        .request(request), +        .protocol(Protocol.HTTP_1_1), +        .code(200), +        .message("Intercepted!"), +        .body(ResponseBody.create(MediaType.parse("text/plain; charset=utf-8"), "abc")), +        .build();, +, +    client.interceptors().add(new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        return interceptorResponse;, +      }, +    });, +, +    Response response = client.newCall(request).execute();, +    assertSame(interceptorResponse, response);, +  }, +, +  @Test public void rewriteRequestToServer() throws Exception {, +    server.enqueue(new MockResponse());, +, +    client.interceptors().add(new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        Request originalRequest = chain.request();, +        return chain.proceed(originalRequest.newBuilder(), +            .method("POST", uppercase(originalRequest.body())), +            .addHeader("OkHttp-Intercepted", "yep"), +            .build());, +      }, +    });, +, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .addHeader("Original-Header", "foo"), +        .method("PUT", RequestBody.create(MediaType.parse("text/plain"), "abc")), +        .build();, +, +    client.newCall(request).execute();, +, +    RecordedRequest recordedRequest = server.takeRequest();, +    assertEquals("ABC", recordedRequest.getUtf8Body());, +    assertEquals("foo", recordedRequest.getHeader("Original-Header"));, +    assertEquals("yep", recordedRequest.getHeader("OkHttp-Intercepted"));, +    assertEquals("POST", recordedRequest.getMethod());, +  }, +, +  @Test public void rewriteResponseFromServer() throws Exception {, +    server.enqueue(new MockResponse(), +        .addHeader("Original-Header: foo"), +        .setBody("abc"));]