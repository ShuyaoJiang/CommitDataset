[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private int http2ErrorCode = -1;, +  public int getHttp2ErrorCode() {, +    return http2ErrorCode;, +  }, +, +  /**, +   * Sets the <a href="https://tools.ietf.org/html/rfc7540#section-7">HTTP/2 error code</a> to be, +   * returned when resetting the stream. This is only valid with {@link, +   * SocketPolicy#RESET_STREAM_AT_START}., +   */, +  public MockResponse setHttp2ErrorCode(int http2ErrorCode) {, +    this.http2ErrorCode = http2ErrorCode;, +    return this;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private int http2ErrorCode = -1;, +  public int getHttp2ErrorCode() {, +    return http2ErrorCode;, +  }, +, +  /**, +   * Sets the <a href="https://tools.ietf.org/html/rfc7540#section-7">HTTP/2 error code</a> to be, +   * returned when resetting the stream. This is only valid with {@link, +   * SocketPolicy#RESET_STREAM_AT_START}., +   */, +  public MockResponse setHttp2ErrorCode(int http2ErrorCode) {, +    this.http2ErrorCode = http2ErrorCode;, +    return this;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +import static okhttp3.mockwebserver.SocketPolicy.RESET_STREAM_AT_START;, +    RecordedRequest request = new RecordedRequest(, +        null, null, null, -1, null, sequenceNumber, socket);, +    requestQueue.add(request);, +    dispatcher.dispatch(request);, +      MockResponse peekedResponse = dispatcher.peek();, +      if (peekedResponse.getSocketPolicy() == RESET_STREAM_AT_START) {, +        try {, +          dispatchBookkeepingRequest(sequenceNumber.getAndIncrement(), socket);, +          stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()));, +          return;, +        } catch (InterruptedException e) {, +          throw new InterruptedIOException();, +        }, +      }, +, +      requestCount.incrementAndGet();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private int http2ErrorCode = -1;, +  public int getHttp2ErrorCode() {, +    return http2ErrorCode;, +  }, +, +  /**, +   * Sets the <a href="https://tools.ietf.org/html/rfc7540#section-7">HTTP/2 error code</a> to be, +   * returned when resetting the stream. This is only valid with {@link, +   * SocketPolicy#RESET_STREAM_AT_START}., +   */, +  public MockResponse setHttp2ErrorCode(int http2ErrorCode) {, +    this.http2ErrorCode = http2ErrorCode;, +    return this;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import java.io.InterruptedIOException;, +import static okhttp3.mockwebserver.SocketPolicy.RESET_STREAM_AT_START;, +    RecordedRequest request = new RecordedRequest(, +        null, null, null, -1, null, sequenceNumber, socket);, +    requestQueue.add(request);, +    dispatcher.dispatch(request);, +      MockResponse peekedResponse = dispatcher.peek();, +      if (peekedResponse.getSocketPolicy() == RESET_STREAM_AT_START) {, +        try {, +          dispatchBookkeepingRequest(sequenceNumber.getAndIncrement(), socket);, +          stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()));, +          return;, +        } catch (InterruptedException e) {, +          throw new InterruptedIOException();, +        }, +      }, +, +      requestCount.incrementAndGet();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +  NO_RESPONSE,, +, +  /**, +   * Fail HTTP/2 requests without processing them by sending an {@linkplain, +   * MockResponse#getHttp2ErrorCode() HTTP/2 error code}., +   */, +  RESET_STREAM_AT_START, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private int http2ErrorCode = -1;, +  public int getHttp2ErrorCode() {, +    return http2ErrorCode;, +  }, +]