[+++ b/.circleci/config.yml, +      - image: circleci/openjdk:11.0.3-jdk-stretch, +      - image: circleci/openjdk:11.0.3-jdk-stretch, +++ b/.circleci/config.yml, +      - image: circleci/openjdk:11.0.3-jdk-stretch, +      - image: circleci/openjdk:11.0.3-jdk-stretch, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt, +  @Volatile private var level = Level.NONE, +  /** Change the level at which this interceptor logs.  */, +        if (isPlaintext(buffer)) {, +        if (!isPlaintext(buffer)) {, +     * Returns true if the body in question probably contains human readable text. Uses a small sample, +     * of code points to detect unicode control characters commonly used in binary file signatures., +    @JvmStatic, +    fun isPlaintext(buffer: Buffer): Boolean {, +        val byteCount = if (buffer.size < 64) buffer.size else 64, +        buffer.copyTo(prefix, 0, byteCount), +        for (i in 0..15) {, +++ b/.circleci/config.yml, +      - image: circleci/openjdk:11.0.3-jdk-stretch, +      - image: circleci/openjdk:11.0.3-jdk-stretch, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt, +  @Volatile private var level = Level.NONE, +  /** Change the level at which this interceptor logs.  */, +        if (isPlaintext(buffer)) {, +        if (!isPlaintext(buffer)) {, +     * Returns true if the body in question probably contains human readable text. Uses a small sample, +     * of code points to detect unicode control characters commonly used in binary file signatures., +    @JvmStatic, +    fun isPlaintext(buffer: Buffer): Boolean {, +        val byteCount = if (buffer.size < 64) buffer.size else 64, +        buffer.copyTo(prefix, 0, byteCount), +        for (i in 0..15) {, +++ /dev/null, +++ b/.circleci/config.yml, +      - image: circleci/openjdk:11.0.3-jdk-stretch, +      - image: circleci/openjdk:11.0.3-jdk-stretch, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt, +  @Volatile private var level = Level.NONE, +  /** Change the level at which this interceptor logs.  */, +        if (isPlaintext(buffer)) {, +        if (!isPlaintext(buffer)) {, +     * Returns true if the body in question probably contains human readable text. Uses a small sample, +     * of code points to detect unicode control characters commonly used in binary file signatures., +    @JvmStatic, +    fun isPlaintext(buffer: Buffer): Boolean {, +        val byteCount = if (buffer.size < 64) buffer.size else 64, +        buffer.copyTo(prefix, 0, byteCount), +        for (i in 0..15) {, +++ /dev/null, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +  @Test public void isPlaintext() {, +    assertThat(HttpLoggingInterceptor.isPlaintext(new Buffer())).isTrue();, +    assertThat(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("abc"))).isTrue();, +    assertThat(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("new\r\nlines"))).isTrue();, +    assertThat(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("white\t space"))).isTrue();, +    assertThat(HttpLoggingInterceptor.isPlaintext(new Buffer().writeByte(0x80))).isTrue();, +    assertThat(HttpLoggingInterceptor.isPlaintext(new Buffer().writeByte(0x00))).isFalse();, +    assertThat(HttpLoggingInterceptor.isPlaintext(new Buffer().writeByte(0xc0))).isFalse();, +  }, +, +++ b/.circleci/config.yml, +      - image: circleci/openjdk:11.0.3-jdk-stretch, +      - image: circleci/openjdk:11.0.3-jdk-stretch, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt, +  @Volatile private var level = Level.NONE, +  /** Change the level at which this interceptor logs.  */, +        if (isPlaintext(buffer)) {, +        if (!isPlaintext(buffer)) {, +     * Returns true if the body in question probably contains human readable text. Uses a small sample, +     * of code points to detect unicode control characters commonly used in binary file signatures., +    @JvmStatic, +    fun isPlaintext(buffer: Buffer): Boolean {, +        val byteCount = if (buffer.size < 64) buffer.size else 64, +        buffer.copyTo(prefix, 0, byteCount), +        for (i in 0..15) {, +++ /dev/null, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +  @Test public void isPlaintext() {, +    assertThat(HttpLoggingInterceptor.isPlaintext(new Buffer())).isTrue();, +    assertThat(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("abc"))).isTrue();, +    assertThat(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("new\r\nlines"))).isTrue();, +    assertThat(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("white\t space"))).isTrue();, +    assertThat(HttpLoggingInterceptor.isPlaintext(new Buffer().writeByte(0x80))).isTrue();, +    assertThat(HttpLoggingInterceptor.isPlaintext(new Buffer().writeByte(0x00))).isFalse();, +    assertThat(HttpLoggingInterceptor.isPlaintext(new Buffer().writeByte(0xc0))).isFalse();, +  }, +, +++ b/okhttp/src/test/java/okhttp3/KotlinSourceCompatibilityTest.kt, +    val address: Address = Address(, +        "",, +        0,, +        Dns.SYSTEM,, +        SocketFactory.getDefault(),, +        localhost().sslSocketFactory(),, +        OkHostnameVerifier.INSTANCE,, +        CertificatePinner.DEFAULT,, +        Authenticator.NONE,, +        Proxy.NO_PROXY,, +        listOf(Protocol.HTTP_1_1),]