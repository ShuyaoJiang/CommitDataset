[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/CookiesTest.java, +/*, + * Copyright (C) 2010 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.squareup.okhttp.internal.http;, +, +import com.squareup.okhttp.OkHttpClient;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.MockWebServer;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +, +import java.io.IOException;, +import java.net.CookieHandler;, +import java.net.CookieManager;, +import java.net.HttpCookie;, +import java.net.HttpURLConnection;, +import java.net.URI;, +import java.net.URLConnection;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import static java.net.CookiePolicy.ACCEPT_ORIGINAL_SERVER;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +/** Android's CookiesTest. */, +public class CookiesTest {, +, +  private OkHttpClient client;, +, +  @Before, +  public void setUp() throws Exception {, +    client = new OkHttpClient();, +  }, +, +  @After, +  public void tearDown() throws Exception {, +    CookieHandler.setDefault(null);, +  }, +, +  @Test, +  public void testNetscapeResponse() throws Exception {, +    CookieManager cookieManager = new CookieManager(null, ACCEPT_ORIGINAL_SERVER);, +    CookieHandler.setDefault(cookieManager);, +    MockWebServer server = new MockWebServer();, +    server.play();, +, +    server.enqueue(new MockResponse().addHeader("Set-Cookie: a=android; ", +        + "expires=Fri, 31-Dec-9999 23:59:59 GMT; ", +        + "path=/path; ", +        + "domain=" + server.getCookieDomain() + "; ", +        + "secure"));, +    get(server, "/path/foo");, +, +    List<HttpCookie> cookies = cookieManager.getCookieStore().getCookies();, +    assertEquals(1, cookies.size());, +    HttpCookie cookie = cookies.get(0);, +    assertEquals("a", cookie.getName());, +    assertEquals("android", cookie.getValue());, +    assertEquals(null, cookie.getComment());, +    assertEquals(null, cookie.getCommentURL());, +    assertEquals(false, cookie.getDiscard());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertTrue(cookie.getMaxAge() > 100000000000L);, +    assertEquals("/path", cookie.getPath());, +    assertEquals(true, cookie.getSecure());, +    assertEquals(0, cookie.getVersion());, +  }, +, +  @Test public void testRfc2109Response() throws Exception {, +    CookieManager cookieManager = new CookieManager(null, ACCEPT_ORIGINAL_SERVER);, +    CookieHandler.setDefault(cookieManager);, +    MockWebServer server = new MockWebServer();, +    server.play();, +, +    server.enqueue(new MockResponse().addHeader("Set-Cookie: a=android; ", +        + "Comment=this cookie is delicious; ", +        + "Domain=" + server.getCookieDomain() + "; "]