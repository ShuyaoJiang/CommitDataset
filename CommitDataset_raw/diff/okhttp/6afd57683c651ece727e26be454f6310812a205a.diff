[+++ b/CHANGELOG.md, + *  Fix: Don't leak connections! There was a regression in 2.0.0-RC1 where, +++ b/CHANGELOG.md, + *  Fix: Don't leak connections! There was a regression in 2.0.0-RC1 where, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, IOException e) {, +        System.out.println("Failed: " + e);, +++ b/CHANGELOG.md, + *  Fix: Don't leak connections! There was a regression in 2.0.0-RC1 where, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, IOException e) {, +        System.out.println("Failed: " + e);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +      @Override public void onFailure(Request request, IOException e) {, +      @Override public void onFailure(Request request, IOException e) {, +      @Override public void onFailure(Request request, IOException e) {, +      @Override public void onFailure(Request request, IOException e) {, +++ b/CHANGELOG.md, + *  Fix: Don't leak connections! There was a regression in 2.0.0-RC1 where, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, IOException e) {, +        System.out.println("Failed: " + e);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +      @Override public void onFailure(Request request, IOException e) {, +      @Override public void onFailure(Request request, IOException e) {, +      @Override public void onFailure(Request request, IOException e) {, +      @Override public void onFailure(Request request, IOException e) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +import java.io.IOException;, +  public final IOException failure;, +  RecordedResponse(Request request, Response response, String body, IOException failure) {, +++ b/CHANGELOG.md, + *  Fix: Don't leak connections! There was a regression in 2.0.0-RC1 where, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, IOException e) {, +        System.out.println("Failed: " + e);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +      @Override public void onFailure(Request request, IOException e) {, +      @Override public void onFailure(Request request, IOException e) {, +      @Override public void onFailure(Request request, IOException e) {, +      @Override public void onFailure(Request request, IOException e) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +import java.io.IOException;, +  public final IOException failure;, +  RecordedResponse(Request request, Response response, String body, IOException failure) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java, +  @Override public synchronized void onFailure(Request request, IOException e) {, +    responses.add(new RecordedResponse(request, null, null, e));, +++ b/CHANGELOG.md, + *  Fix: Don't leak connections! There was a regression in 2.0.0-RC1 where, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, IOException e) {, +        System.out.println("Failed: " + e);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +      @Override public void onFailure(Request request, IOException e) {, +      @Override public void onFailure(Request request, IOException e) {, +      @Override public void onFailure(Request request, IOException e) {, +      @Override public void onFailure(Request request, IOException e) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +import java.io.IOException;, +  public final IOException failure;, +  RecordedResponse(Request request, Response response, String body, IOException failure) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java, +  @Override public synchronized void onFailure(Request request, IOException e) {, +    responses.add(new RecordedResponse(request, null, null, e));, +++ b/okhttp/src/main/java/com/squareup/okhttp/Callback.java, +  void onFailure(Request request, IOException e);, +++ b/CHANGELOG.md, + *  Fix: Don't leak connections! There was a regression in 2.0.0-RC1 where, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, IOException e) {, +        System.out.println("Failed: " + e);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +      @Override public void onFailure(Request request, IOException e) {, +      @Override public void onFailure(Request request, IOException e) {, +      @Override public void onFailure(Request request, IOException e) {, +      @Override public void onFailure(Request request, IOException e) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +import java.io.IOException;, +  public final IOException failure;, +  RecordedResponse(Request request, Response response, String body, IOException failure) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java, +  @Override public synchronized void onFailure(Request request, IOException e) {, +    responses.add(new RecordedResponse(request, null, null, e));, +++ b/okhttp/src/main/java/com/squareup/okhttp/Callback.java, +  void onFailure(Request request, IOException e);, +++ b/samples/guide/src/main/java/com/squareup/okhttp/recipes/AsynchronousGet.java, +      @Override public void onFailure(Request request, IOException e) {, +        e.printStackTrace();, +++ b/CHANGELOG.md, + *  Fix: Don't leak connections! There was a regression in 2.0.0-RC1 where, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, IOException e) {, +        System.out.println("Failed: " + e);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +      @Override public void onFailure(Request request, IOException e) {, +      @Override public void onFailure(Request request, IOException e) {, +      @Override public void onFailure(Request request, IOException e) {, +      @Override public void onFailure(Request request, IOException e) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java]