[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    MockResponse policy = dispatcher.peek();, +      throttledTransfer(policy, socket, source, Okio.buffer(requestBody), contentLength, true);, +        throttledTransfer(policy, socket, source, Okio.buffer(requestBody), chunkSize, true);, +    if (request.startsWith("OPTIONS "), +        || request.startsWith("GET "), +        || request.startsWith("HEAD "), +        || request.startsWith("TRACE "), +        || request.startsWith("CONNECT ")) {, +      if (hasBody) {, +    } else if (!request.startsWith("POST "), +        && !request.startsWith("PUT "), +        && !request.startsWith("PATCH "), +        && !request.startsWith("DELETE ")) { // Permitted as spec is ambiguous., +      throw new UnsupportedOperationException("Unexpected method: " + request);, +    }, +    throttledTransfer(response, socket, body, sink, body.size(), false);, +   * throttled according to {@code policy}., +  private void throttledTransfer(MockResponse policy, Socket socket, BufferedSource source,, +      BufferedSink sink, long byteCount, boolean isRequest) throws IOException {, +    long bytesPerPeriod = policy.getThrottleBytesPerPeriod();, +    long periodDelayMs = policy.getThrottlePeriod(TimeUnit.MILLISECONDS);, +    boolean disconnectHalfway =, +        !isRequest && policy.getSocketPolicy() == DISCONNECT_DURING_RESPONSE_BODY;, +        throttledTransfer(response, socket, body, sink, bodyLimit, false);]