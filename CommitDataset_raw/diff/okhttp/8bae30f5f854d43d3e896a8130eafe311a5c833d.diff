[+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +     * --> POST /greeting http/1.1 (3-byte body), +     * <-- 200 OK (22ms, 6-byte body), +     * --> POST /greeting http/1.1, +     * <-- 200 OK (22ms), +     * --> POST /greeting http/1.1, +     * <-- 200 OK (22ms), +    String requestStartMessage = "--> " + request.method() + ' ' + request.url() + ' ' + protocol;, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +     * --> POST /greeting http/1.1 (3-byte body), +     * <-- 200 OK (22ms, 6-byte body), +     * --> POST /greeting http/1.1, +     * <-- 200 OK (22ms), +     * --> POST /greeting http/1.1, +     * <-- 200 OK (22ms), +    String requestStartMessage = "--> " + request.method() + ' ' + request.url() + ' ' + protocol;, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> POST " + url + " http/1.1 (3-byte body)"), +        .assertLogEqual("--> POST " + url + " http/1.1 (3-byte body)"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> POST " + url + " http/1.1"), +        .assertLogEqual("--> POST " + url + " http/1.1"), +        .assertLogEqual("--> POST " + url + " http/1.1"), +        .assertLogEqual("--> POST " + url + " http/1.1"), +        .assertLogEqual("--> POST " + url + " http/1.1"), +        .assertLogEqual("--> POST " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> POST " + url + " http/1.1"), +        .assertLogEqual("--> POST " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +     * --> POST /greeting http/1.1 (3-byte body), +     * <-- 200 OK (22ms, 6-byte body), +     * --> POST /greeting http/1.1, +     * <-- 200 OK (22ms), +     * --> POST /greeting http/1.1, +     * <-- 200 OK (22ms), +    String requestStartMessage = "--> " + request.method() + ' ' + request.url() + ' ' + protocol;, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> POST " + url + " http/1.1 (3-byte body)"), +        .assertLogEqual("--> POST " + url + " http/1.1 (3-byte body)"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> POST " + url + " http/1.1"), +        .assertLogEqual("--> POST " + url + " http/1.1"), +        .assertLogEqual("--> POST " + url + " http/1.1"), +        .assertLogEqual("--> POST " + url + " http/1.1"), +        .assertLogEqual("--> POST " + url + " http/1.1"), +        .assertLogEqual("--> POST " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> POST " + url + " http/1.1"), +        .assertLogEqual("--> POST " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +        .assertLogEqual("--> GET " + url + " http/1.1"), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void interceptorGetsFramedProtocol() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +, +    // Capture the protocol as it is observed by the interceptor., +    final AtomicReference<Protocol> protocolRef = new AtomicReference<>();, +    Interceptor interceptor = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        protocolRef.set(chain.connection().protocol());, +        return chain.proceed(chain.request());, +      }, +    };, +    client = client.newBuilder(), +        .addNetworkInterceptor(interceptor)]