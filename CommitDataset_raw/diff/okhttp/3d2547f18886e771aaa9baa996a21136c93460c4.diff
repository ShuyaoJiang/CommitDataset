[+++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +            return new HttpsURLConnectionImpl(, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +            return new HttpsURLConnectionImpl(, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpConnectionPool.java, +                    Libcore.tagSocket(connection.getSocket());, +            Libcore.untagSocket(connection.getSocket());, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +            return new HttpsURLConnectionImpl(, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpConnectionPool.java, +                    Libcore.tagSocket(connection.getSocket());, +            Libcore.untagSocket(connection.getSocket());, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +        connected(connection);, +     * Called after a socket connection has been created or retrieved from the, +     * pool. Subclasses use this hook to get a reference to the TLS data., +     */, +    protected void connected(HttpConnection connection) {, +    }, +, +    /**, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +            return new HttpsURLConnectionImpl(, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpConnectionPool.java, +                    Libcore.tagSocket(connection.getSocket());, +            Libcore.untagSocket(connection.getSocket());, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +        connected(connection);, +     * Called after a socket connection has been created or retrieved from the, +     * pool. Subclasses use this hook to get a reference to the TLS data., +     */, +    protected void connected(HttpConnection connection) {, +    }, +, +    /**, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpsURLConnectionImpl.java, +         * Stash of HttpsEngine.connection.socket to implement requests like, +         * {@link #getCipherSuite} even after the connection has been recycled., +        @Override protected void connected(HttpConnection connection) {, +            this.sslSocket = (SSLSocket) connection.getSocket();, +        }, +, +++ b/src/main/java/com/squareup/okhttp/OkHttpClient.java, +            return new HttpsURLConnectionImpl(, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpConnectionPool.java, +                    Libcore.tagSocket(connection.getSocket());, +            Libcore.untagSocket(connection.getSocket());, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +        connected(connection);, +     * Called after a socket connection has been created or retrieved from the, +     * pool. Subclasses use this hook to get a reference to the TLS data., +     */, +    protected void connected(HttpConnection connection) {, +    }, +, +    /**, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpsURLConnectionImpl.java, +         * Stash of HttpsEngine.connection.socket to implement requests like, +         * {@link #getCipherSuite} even after the connection has been recycled., +        @Override protected void connected(HttpConnection connection) {, +            this.sslSocket = (SSLSocket) connection.getSocket();, +        }, +, +++ b/src/test/java/com/squareup/okhttp/internal/net/http/HttpResponseCacheTest.java, +import com.squareup.okhttp.internal.net.ssl.SslContextBuilder;, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +import java.security.GeneralSecurityException;, +import java.security.Principal;, +import java.security.cert.Certificate;, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.HttpsURLConnection;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLSession;, +    private static final HostnameVerifier NULL_HOSTNAME_VERIFIER = new HostnameVerifier() {, +        @Override public boolean verify(String s, SSLSession sslSession) {, +            return true;, +        }, +    };, +    private final OkHttpClient client = new OkHttpClient();, +    private static final SSLContext sslContext;, +    static {, +        try {, +            sslContext = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +        } catch (GeneralSecurityException e) {, +            throw new RuntimeException(e);, +        } catch (UnknownHostException e) {, +            throw new RuntimeException(e);, +        }, +    }, +, +    private HttpURLConnection openConnection(URL url) {, +        return client.open(url);, +    public void testSecureResponseCaching() throws IOException {, +        server.useHttps(sslContext.getSocketFactory(), false);, +        server.enqueue(new MockResponse(), +                .addHeader("Last-Modified: " + formatDate(-1, TimeUnit.HOURS)), +                .addHeader("Expires: " + formatDate(1, TimeUnit.HOURS)), +                .setBody("ABC"));, +        server.play();]