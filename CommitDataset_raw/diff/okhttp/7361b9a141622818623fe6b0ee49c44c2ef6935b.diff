[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRule.java, +  public String getHostName() {, +    if (!started) before();, +    return server.getHostName();, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRule.java, +  public String getHostName() {, +    if (!started) before();, +    return server.getHostName();, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import org.junit.rules.TemporaryFolder;, +  @Rule public final TemporaryFolder tempDir = new TemporaryFolder();, +  @Rule public final TestRule timeout = new Timeout(30_000);, +  @Rule public final MockWebServerRule server = new MockWebServerRule();, +  @Rule public final MockWebServerRule server2 = new MockWebServerRule();, +    cache = new Cache(tempDir.getRoot(), Integer.MAX_VALUE);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRule.java, +  public String getHostName() {, +    if (!started) before();, +    return server.getHostName();, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import org.junit.rules.TemporaryFolder;, +  @Rule public final TemporaryFolder tempDir = new TemporaryFolder();, +  @Rule public final TestRule timeout = new Timeout(30_000);, +  @Rule public final MockWebServerRule server = new MockWebServerRule();, +  @Rule public final MockWebServerRule server2 = new MockWebServerRule();, +    cache = new Cache(tempDir.getRoot(), Integer.MAX_VALUE);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverHttp20Draft16Test.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRule.java, +  public String getHostName() {, +    if (!started) before();, +    return server.getHostName();, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import org.junit.rules.TemporaryFolder;, +  @Rule public final TemporaryFolder tempDir = new TemporaryFolder();, +  @Rule public final TestRule timeout = new Timeout(30_000);, +  @Rule public final MockWebServerRule server = new MockWebServerRule();, +  @Rule public final MockWebServerRule server2 = new MockWebServerRule();, +    cache = new Cache(tempDir.getRoot(), Integer.MAX_VALUE);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverHttp20Draft16Test.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;, +import org.junit.Rule;, +import org.junit.rules.TemporaryFolder;, +  private static final SSLContext sslContext = SslContextBuilder.localhost();, +  @Rule public final TemporaryFolder tempDir = new TemporaryFolder();, +  @Rule public final MockWebServerRule server = new MockWebServerRule();, +, +  /** Protocol to test, for example {@link com.squareup.okhttp.Protocol#SPDY_3} */, +  private final Protocol protocol;, +  protected String hostHeader = ":host";, +, +  protected HttpOverSpdyTest(Protocol protocol){, +    this.protocol = protocol;, +  }, +, +    server.get().useHttps(sslContext.getSocketFactory(), false);, +    cache = new Cache(tempDir.getRoot(), Integer.MAX_VALUE);, +    server.enqueue(new MockResponse().setBody("ABCDE"));, +    server.enqueue(new MockResponse().setBody("ABCDE"));, +    server.enqueue(new MockResponse().setBody("ABCDE"));, +    server.enqueue(new MockResponse().setBody("ABCDE"));, +    server.enqueue(, +        new MockResponse().addHeader("Content-Encoding: gzip").setBody(gzip("ABCABCABC")));, +    server.enqueue(new MockResponse().setBody(new String(body)).throttleBody(1024, 1, SECONDS)); // slow connection 1KiB/second, +, +        .addHeader("set-cookie: c=oreo; domain=" + server.get().getCookieDomain()), +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRule.java, +  public String getHostName() {, +    if (!started) before();, +    return server.getHostName();, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import org.junit.rules.TemporaryFolder;, +  @Rule public final TemporaryFolder tempDir = new TemporaryFolder();, +  @Rule public final TestRule timeout = new Timeout(30_000);, +  @Rule public final MockWebServerRule server = new MockWebServerRule();, +  @Rule public final MockWebServerRule server2 = new MockWebServerRule();, +    cache = new Cache(tempDir.getRoot(), Integer.MAX_VALUE);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverHttp20Draft16Test.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;, +import org.junit.Rule;, +import org.junit.rules.TemporaryFolder;, +  private static final SSLContext sslContext = SslContextBuilder.localhost();, +  @Rule public final TemporaryFolder tempDir = new TemporaryFolder();, +  @Rule public final MockWebServerRule server = new MockWebServerRule();, +, +  /** Protocol to test, for example {@link com.squareup.okhttp.Protocol#SPDY_3} */, +  private final Protocol protocol;, +  protected String hostHeader = ":host";, +]