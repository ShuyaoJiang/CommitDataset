[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_DURING_REQUEST_BODY;, +    boolean disconnectHalfway = isRequest, +        ? policy.getSocketPolicy() == DISCONNECT_DURING_REQUEST_BODY, +        : policy.getSocketPolicy() == DISCONNECT_DURING_RESPONSE_BODY;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_DURING_REQUEST_BODY;, +    boolean disconnectHalfway = isRequest, +        ? policy.getSocketPolicy() == DISCONNECT_DURING_REQUEST_BODY, +        : policy.getSocketPolicy() == DISCONNECT_DURING_RESPONSE_BODY;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +  /** Close connection after reading half of the request body (if present). */, +  DISCONNECT_DURING_REQUEST_BODY,, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_DURING_REQUEST_BODY;, +    boolean disconnectHalfway = isRequest, +        ? policy.getSocketPolicy() == DISCONNECT_DURING_REQUEST_BODY, +        : policy.getSocketPolicy() == DISCONNECT_DURING_RESPONSE_BODY;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +  /** Close connection after reading half of the request body (if present). */, +  DISCONNECT_DURING_REQUEST_BODY,, +, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +import java.io.OutputStream;, +  @Test public void disconnectRequestHalfway() throws IOException {, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_DURING_REQUEST_BODY));, +, +    HttpURLConnection connection = (HttpURLConnection) server.getUrl("/").openConnection();, +    connection.setRequestMethod("POST");, +    connection.setDoOutput(true);, +    connection.setFixedLengthStreamingMode(1024 * 1024 * 1024); // 1 GB, +    connection.connect();, +    OutputStream out = connection.getOutputStream();, +, +    byte[] data = new byte[1024 * 1024];, +    int i;, +    for (i = 0; i < 1024; i++) {, +      try {, +        out.write(data);, +        out.flush();, +      } catch (IOException e) {, +        break;, +      }, +    }, +    assertEquals(512f, i, 10f); // Halfway +/- 1%, +  }, +, +  @Test public void disconnectResponseHalfway() throws IOException {]