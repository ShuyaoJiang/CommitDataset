[+++ b/.gitignore, +*.ipr, +*.iws, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +          hostnameVerifier, policy.authenticator, policy.requestedProxy, policy.getTransports());, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +          hostnameVerifier, policy.authenticator, policy.requestedProxy, policy.getTransports());, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, +    RawHeaders rawHeaders = RawHeaders.fromBytes(socketIn);, +    httpEngine.connection.setHttpMinorVersion(rawHeaders.getHttpMinorVersion());, +    httpEngine.receiveHeaders(rawHeaders);, +, +    ResponseHeaders headers = new ResponseHeaders(httpEngine.uri, rawHeaders);, +    headers.setTransport("http/1.1");, +    return headers;, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +          hostnameVerifier, policy.authenticator, policy.requestedProxy, policy.getTransports());, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, +    RawHeaders rawHeaders = RawHeaders.fromBytes(socketIn);, +    httpEngine.connection.setHttpMinorVersion(rawHeaders.getHttpMinorVersion());, +    httpEngine.receiveHeaders(rawHeaders);, +, +    ResponseHeaders headers = new ResponseHeaders(httpEngine.uri, rawHeaders);, +    headers.setTransport("http/1.1");, +    return headers;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +import java.util.ArrayList;, +  private List<String> transports;, +  List<String> getTransports() {, +    return transports;, +  }, +, +    if ("X-Android-Transports".equals(field)) {, +      setTransports(newValue, false /* append */);, +    } else {, +  }, +, +    if ("X-Android-Transports".equals(field)) {, +      setTransports(value, true /* append */);, +    } else {, +, +  /*, +   * Splits and validates a comma-separated string of transports., +   * When append == false, we require that the transport list contains "http/1.1"., +   */, +  private void setTransports(String transportsString, boolean append) {, +    if (transportsString == null) {, +      throw new NullPointerException("transportsString == null");, +    }, +, +    String[] transports = transportsString.split(",", -1);, +    ArrayList<String> transportsList = new ArrayList<String>();, +    if (!append) {, +      // If we're not appending to the list, we need to make sure, +      // the list contains "http/1.1". We do this in a separate loop, +      // to avoid modifying any state before we validate the input., +      boolean containsHttp = false;, +      for (int i = 0; i < transports.length; ++i) {, +        if ("http/1.1".equals(transports[i])) {, +          containsHttp = true;, +          break;, +        }, +      }, +, +      if (!containsHttp) {, +        throw new IllegalArgumentException("Transport list doesn't contain http/1.1");, +      }, +    } else {, +      transportsList.addAll(this.transports);, +    }, +, +    for (int i = 0; i < transports.length; ++i) {, +      if (transports[i].length() == 0) {, +        throw new IllegalArgumentException("Transport list contains an empty transport");, +      }, +, +      if (!transportsList.contains(transports[i])) {, +        transportsList.add(transports[i]);, +      }, +    }, +, +    this.transports = Util.immutableList(transportsList);, +  }, +}, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +          hostnameVerifier, policy.authenticator, policy.requestedProxy, policy.getTransports());, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, +    RawHeaders rawHeaders = RawHeaders.fromBytes(socketIn);]