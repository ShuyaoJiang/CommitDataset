[+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.kt, +      Platform.get().configureTrustManager(trustManager), +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.kt, +      Platform.get().configureTrustManager(trustManager), +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +import okhttp3.internal.platform.Platform;, +    return Platform.get().platformTrustManager();, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.kt, +      Platform.get().configureTrustManager(trustManager), +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +import okhttp3.internal.platform.Platform;, +    return Platform.get().platformTrustManager();, +++ b/okhttp/src/main/java/okhttp3/internal/platform/ConscryptPlatform.kt, + * Requires org.conscrypt:conscrypt-openjdk-uber >= 2.1.0 on the classpath., +    get() {, +      // n.b. We should consider defaulting to OpenJDK 11 trust manager, +      // https://groups.google.com/forum/#!topic/conscrypt/3vYzbesjOb4, +      return Conscrypt.newProviderBuilder().provideTrustManager(true).build(), +    }, +, +  // See release notes https://groups.google.com/forum/#!forum/conscrypt, +  // for version differences, +  override fun getSSLContext(): SSLContext =, +      // supports TLSv1.3 by default (version api is >= 1.4.0), +, +  override fun platformTrustManager(): X509TrustManager {, +    return Conscrypt.getDefaultX509TrustManager(), +  override fun configureTrustManager(trustManager: X509TrustManager?) {, +    if (Conscrypt.isConscrypt(trustManager)) {, +      // OkHttp will verify, +      Conscrypt.setHostnameVerifier(trustManager) { hostname, session -> true }, +    }, +  }, +, +      Class.forName("org.conscrypt.Conscrypt\$Version"), +        Conscrypt.isAvailable() && atLeastVersion(2, 1, 0) -> ConscryptPlatform(), +, +    @JvmStatic @JvmOverloads, +    fun atLeastVersion(major: Int, minor: Int = 0, patch: Int = 0): Boolean {, +      val conscryptVersion = Conscrypt.version(), +, +      if (conscryptVersion.major() != major) {, +        return conscryptVersion.major() > major, +      }, +, +      if (conscryptVersion.minor() != minor) {, +        return conscryptVersion.minor() > minor, +      }, +, +      return conscryptVersion.patch() >= patch, +    }, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.kt, +      Platform.get().configureTrustManager(trustManager), +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +import okhttp3.internal.platform.Platform;, +    return Platform.get().platformTrustManager();, +++ b/okhttp/src/main/java/okhttp3/internal/platform/ConscryptPlatform.kt, + * Requires org.conscrypt:conscrypt-openjdk-uber >= 2.1.0 on the classpath., +    get() {, +      // n.b. We should consider defaulting to OpenJDK 11 trust manager, +      // https://groups.google.com/forum/#!topic/conscrypt/3vYzbesjOb4, +      return Conscrypt.newProviderBuilder().provideTrustManager(true).build(), +    }, +, +  // See release notes https://groups.google.com/forum/#!forum/conscrypt, +  // for version differences, +  override fun getSSLContext(): SSLContext =, +      // supports TLSv1.3 by default (version api is >= 1.4.0), +, +  override fun platformTrustManager(): X509TrustManager {, +    return Conscrypt.getDefaultX509TrustManager(), +  override fun configureTrustManager(trustManager: X509TrustManager?) {, +    if (Conscrypt.isConscrypt(trustManager)) {, +      // OkHttp will verify, +      Conscrypt.setHostnameVerifier(trustManager) { hostname, session -> true }, +    }, +  }, +, +      Class.forName("org.conscrypt.Conscrypt\$Version"), +        Conscrypt.isAvailable() && atLeastVersion(2, 1, 0) -> ConscryptPlatform(), +, +    @JvmStatic @JvmOverloads, +    fun atLeastVersion(major: Int, minor: Int = 0, patch: Int = 0): Boolean {, +      val conscryptVersion = Conscrypt.version(), +, +      if (conscryptVersion.major() != major) {, +        return conscryptVersion.major() > major, +      }, +, +      if (conscryptVersion.minor() != minor) {, +        return conscryptVersion.minor() > minor, +      }, +, +      return conscryptVersion.patch() >= patch, +    }, +++ b/okhttp/src/main/java/okhttp3/internal/platform/Platform.kt, +import java.security.GeneralSecurityException, +import java.security.KeyStore, +import java.util.Arrays, +import javax.net.ssl.TrustManagerFactory]