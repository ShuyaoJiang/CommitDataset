[+++ b/README.md, +    --classpath ~/.m2/repository/com/google/mockwebserver/mockwebserver/20130122/mockwebserver-20130122.jar \, +++ b/README.md, +    --classpath ~/.m2/repository/com/google/mockwebserver/mockwebserver/20130122/mockwebserver-20130122.jar \, +++ b/src/main/java/com/squareup/okhttp/Connection.java, +    private boolean connected = false;, +        if (connected) {, +            throw new IllegalStateException("already connected");, +        }, +        connected = true;, +    /**, +     * Returns true if {@link #connect} has been attempted on this connection., +     */, +    public boolean isConnected() {, +        return connected;, +    }, +, +++ b/README.md, +    --classpath ~/.m2/repository/com/google/mockwebserver/mockwebserver/20130122/mockwebserver-20130122.jar \, +++ b/src/main/java/com/squareup/okhttp/Connection.java, +    private boolean connected = false;, +        if (connected) {, +            throw new IllegalStateException("already connected");, +        }, +        connected = true;, +    /**, +     * Returns true if {@link #connect} has been attempted on this connection., +     */, +    public boolean isConnected() {, +        return connected;, +    }, +, +++ b/src/main/java/com/squareup/okhttp/internal/Platform.java, +            Class<?> serverProviderClass = Class.forName(npnClassName + "$ServerProvider");, +            return new JdkWithJettyNpnPlatform(putMethod, getMethod,, +                    clientProviderClass, serverProviderClass);, +        private final Class<?> serverProviderClass;, +        public JdkWithJettyNpnPlatform(Method putMethod, Method getMethod,, +                Class<?> clientProviderClass, Class<?> serverProviderClass) {, +            this.serverProviderClass = serverProviderClass;, +                        new Class[] {clientProviderClass, serverProviderClass},, +                        new JettyNpnProvider(strings));, +        private final List<String> protocols;, +        public JettyNpnProvider(List<String> protocols) {, +            this.protocols = protocols;, +            if (args == null) {, +                args = Util.EMPTY_STRING_ARRAY;, +            }, +            } else if (methodName.equals("protocols") && args.length == 0) {, +                return protocols;, +                this.selected = protocols.get(0);, +            } else if (methodName.equals("protocolSelected") && args.length == 1) {, +                this.selected = (String) args[0];, +                return null;, +++ b/README.md, +    --classpath ~/.m2/repository/com/google/mockwebserver/mockwebserver/20130122/mockwebserver-20130122.jar \, +++ b/src/main/java/com/squareup/okhttp/Connection.java, +    private boolean connected = false;, +        if (connected) {, +            throw new IllegalStateException("already connected");, +        }, +        connected = true;, +    /**, +     * Returns true if {@link #connect} has been attempted on this connection., +     */, +    public boolean isConnected() {, +        return connected;, +    }, +, +++ b/src/main/java/com/squareup/okhttp/internal/Platform.java, +            Class<?> serverProviderClass = Class.forName(npnClassName + "$ServerProvider");, +            return new JdkWithJettyNpnPlatform(putMethod, getMethod,, +                    clientProviderClass, serverProviderClass);, +        private final Class<?> serverProviderClass;, +        public JdkWithJettyNpnPlatform(Method putMethod, Method getMethod,, +                Class<?> clientProviderClass, Class<?> serverProviderClass) {, +            this.serverProviderClass = serverProviderClass;, +                        new Class[] {clientProviderClass, serverProviderClass},, +                        new JettyNpnProvider(strings));, +        private final List<String> protocols;, +        public JettyNpnProvider(List<String> protocols) {, +            this.protocols = protocols;, +            if (args == null) {, +                args = Util.EMPTY_STRING_ARRAY;, +            }, +            } else if (methodName.equals("protocols") && args.length == 0) {, +                return protocols;, +                this.selected = protocols.get(0);, +            } else if (methodName.equals("protocolSelected") && args.length == 1) {, +                this.selected = (String) args[0];, +                return null;, +++ b/src/main/java/com/squareup/okhttp/internal/Util.java, +import java.net.Socket;, +    public static final String[] EMPTY_STRING_ARRAY = new String[0];, +     * Closes {@code closeable}, ignoring any checked exceptions. Does nothing, +     * if {@code closeable} is null., +     * Closes {@code socket}, ignoring any checked exceptions. Does nothing if, +     * {@code socket} is null., +     */, +    public static void closeQuietly(Socket socket) {]