[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, +      if (response.getSocketPolicy() == DISCONNECT_AFTER_REQUEST) {, +        socket.close();, +        return;, +      }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, +      if (response.getSocketPolicy() == DISCONNECT_AFTER_REQUEST) {, +        socket.close();, +        return;, +      }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Rule public final TestRule timeout = new Timeout(30_000, TimeUnit.MILLISECONDS);, +  @Test public void recoverWhenRetryOnConnectionFailureIsTrue_HTTP2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    recoverWhenRetryOnConnectionFailureIsTrue();, +  }, +, +        .assertFailureMatches("stream was reset: CANCEL",, +            "unexpected end of stream on Connection.*", +  @Test public void recoverWhenRetryOnConnectionFailureIsFalse_HTTP2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    noRecoverWhenRetryOnConnectionFailureIsFalse();, +  }, +, +  @Test public void postBodyRetransmittedOnFailureRecovery_HTTP2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    postBodyRetransmittedOnFailureRecovery();, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, +      if (response.getSocketPolicy() == DISCONNECT_AFTER_REQUEST) {, +        socket.close();, +        return;, +      }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Rule public final TestRule timeout = new Timeout(30_000, TimeUnit.MILLISECONDS);, +  @Test public void recoverWhenRetryOnConnectionFailureIsTrue_HTTP2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    recoverWhenRetryOnConnectionFailureIsTrue();, +  }, +, +        .assertFailureMatches("stream was reset: CANCEL",, +            "unexpected end of stream on Connection.*", +  @Test public void recoverWhenRetryOnConnectionFailureIsFalse_HTTP2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    noRecoverWhenRetryOnConnectionFailureIsFalse();, +  }, +, +  @Test public void postBodyRetransmittedOnFailureRecovery_HTTP2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    postBodyRetransmittedOnFailureRecovery();, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java, +  public RecordedResponse assertFailureMatches(String... patterns) {, +    for (String pattern : patterns) {, +      if (failure.getMessage().matches(pattern)) return this;, +    }, +    throw new AssertionError(failure.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, +      if (response.getSocketPolicy() == DISCONNECT_AFTER_REQUEST) {, +        socket.close();, +        return;, +      }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Rule public final TestRule timeout = new Timeout(30_000, TimeUnit.MILLISECONDS);, +  @Test public void recoverWhenRetryOnConnectionFailureIsTrue_HTTP2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    recoverWhenRetryOnConnectionFailureIsTrue();, +  }, +, +        .assertFailureMatches("stream was reset: CANCEL",, +            "unexpected end of stream on Connection.*", +  @Test public void recoverWhenRetryOnConnectionFailureIsFalse_HTTP2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    noRecoverWhenRetryOnConnectionFailureIsFalse();, +  }, +, +  @Test public void postBodyRetransmittedOnFailureRecovery_HTTP2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    postBodyRetransmittedOnFailureRecovery();, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java, +  public RecordedResponse assertFailureMatches(String... patterns) {, +    for (String pattern : patterns) {, +      if (failure.getMessage().matches(pattern)) return this;, +    }, +    throw new AssertionError(failure.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import okhttp3.TestUtil;, +  @Test public void readResponseHeaderTimeout() throws Exception {, +    // Make a call expecting a timeout reading the response headers., +    Call call1 = client.newCall(new Request.Builder(), +    try {, +      call1.execute();]