[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.OkBuffers;, +      InputStream bodyIn = OkBuffers.buffer(stream.getSource()).inputStream();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.OkBuffers;, +      InputStream bodyIn = OkBuffers.buffer(stream.getSource()).inputStream();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +public class Main extends HelpOption implements Runnable {, +    try {, +      Response response = client.execute(request);, +      if (showHeaders) {, +        System.out.println(response.statusLine());, +        Headers headers = response.headers();, +        for (int i = 0, count = headers.size(); i < count; i++) {, +          System.out.println(headers.name(i) + ": " + headers.value(i));, +        }, +        System.out.println();, +      }, +      Response.Body body = response.body();, +      byte[] buffer = new byte[1024];, +      while (body.ready()) {, +        int c = body.byteStream().read(buffer);, +        if (c == -1) {, +          return;, +        }, +        System.out.write(buffer, 0, c);, +      }, +      body.close();, +    } catch (IOException e) {, +      e.printStackTrace();, +    } finally {, +      close();, +    }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.OkBuffers;, +      InputStream bodyIn = OkBuffers.buffer(stream.getSource()).inputStream();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +public class Main extends HelpOption implements Runnable {, +    try {, +      Response response = client.execute(request);, +      if (showHeaders) {, +        System.out.println(response.statusLine());, +        Headers headers = response.headers();, +        for (int i = 0, count = headers.size(); i < count; i++) {, +          System.out.println(headers.name(i) + ": " + headers.value(i));, +        }, +        System.out.println();, +      }, +      Response.Body body = response.body();, +      byte[] buffer = new byte[1024];, +      while (body.ready()) {, +        int c = body.byteStream().read(buffer);, +        if (c == -1) {, +          return;, +        }, +        System.out.write(buffer, 0, c);, +      }, +      body.close();, +    } catch (IOException e) {, +      e.printStackTrace();, +    } finally {, +      close();, +    }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +  private static final char[] DIGITS =, +      { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };, +, +      return bytesToHexString(md5bytes);, +  private static String bytesToHexString(byte[] bytes) {, +    char[] digits = DIGITS;, +    char[] buf = new char[bytes.length * 2];, +    int c = 0;, +    for (byte b : bytes) {, +      buf[c++] = digits[(b >> 4) & 0xf];, +      buf[c++] = digits[b & 0xf];, +    }, +    return new String(buf);, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.OkBuffers;, +      InputStream bodyIn = OkBuffers.buffer(stream.getSource()).inputStream();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +public class Main extends HelpOption implements Runnable {, +    try {, +      Response response = client.execute(request);, +      if (showHeaders) {, +        System.out.println(response.statusLine());, +        Headers headers = response.headers();, +        for (int i = 0, count = headers.size(); i < count; i++) {, +          System.out.println(headers.name(i) + ": " + headers.value(i));, +        }, +        System.out.println();, +      }, +      Response.Body body = response.body();, +      byte[] buffer = new byte[1024];, +      while (body.ready()) {, +        int c = body.byteStream().read(buffer);, +        if (c == -1) {, +          return;]