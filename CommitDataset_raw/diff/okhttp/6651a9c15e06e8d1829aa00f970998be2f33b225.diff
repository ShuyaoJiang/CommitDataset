[+++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "FramedServer connection failure: " + e);, +        logger.log(Level.WARNING, "FramedServer unexpected failure", e);, +  @Override public void onStream(final Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +      System.out.println("Usage: FramedServer <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "FramedServer connection failure: " + e);, +        logger.log(Level.WARNING, "FramedServer unexpected failure", e);, +  @Override public void onStream(final Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +      System.out.println("Usage: FramedServer <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          FramedSocketHandler framedSocketListener = new FramedSocketHandler(socket, protocol);, +              .listener(framedSocketListener), +  /** Processes HTTP requests layered over framed protocols. */, +  private class FramedSocketHandler extends Http2Connection.Listener {, +    private FramedSocketHandler(Socket socket, Protocol protocol) {, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "FramedServer connection failure: " + e);, +        logger.log(Level.WARNING, "FramedServer unexpected failure", e);, +  @Override public void onStream(final Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +      System.out.println("Usage: FramedServer <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          FramedSocketHandler framedSocketListener = new FramedSocketHandler(socket, protocol);, +              .listener(framedSocketListener), +  /** Processes HTTP requests layered over framed protocols. */, +  private class FramedSocketHandler extends Http2Connection.Listener {, +    private FramedSocketHandler(Socket socket, Protocol protocol) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "FramedServer connection failure: " + e);, +        logger.log(Level.WARNING, "FramedServer unexpected failure", e);, +  @Override public void onStream(final Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +      System.out.println("Usage: FramedServer <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          FramedSocketHandler framedSocketListener = new FramedSocketHandler(socket, protocol);, +              .listener(framedSocketListener), +  /** Processes HTTP requests layered over framed protocols. */, +  private class FramedSocketHandler extends Http2Connection.Listener {, +    private FramedSocketHandler(Socket socket, Protocol protocol) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +        .setBody("Body with unknown charset"));, +        .assertLogEqual("Body with unknown charset"), +        .assertLogEqual("<-- END HTTP (25-byte body)"), +        .assertLogEqual("Body with unknown charset"), +        .assertLogEqual("<-- END HTTP (25-byte body)"), +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "FramedServer connection failure: " + e);, +        logger.log(Level.WARNING, "FramedServer unexpected failure", e);, +  @Override public void onStream(final Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +      System.out.println("Usage: FramedServer <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          FramedSocketHandler framedSocketListener = new FramedSocketHandler(socket, protocol);, +              .listener(framedSocketListener), +  /** Processes HTTP requests layered over framed protocols. */, +  private class FramedSocketHandler extends Http2Connection.Listener {, +    private FramedSocketHandler(Socket socket, Protocol protocol) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +        .setBody("Body with unknown charset"));, +        .assertLogEqual("Body with unknown charset"), +        .assertLogEqual("<-- END HTTP (25-byte body)"), +        .assertLogEqual("Body with unknown charset"), +        .assertLogEqual("<-- END HTTP (25-byte body)"), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void interceptorGetsFramedProtocol() throws Exception {, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "FramedServer connection failure: " + e);, +        logger.log(Level.WARNING, "FramedServer unexpected failure", e);, +  @Override public void onStream(final Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +      System.out.println("Usage: FramedServer <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          FramedSocketHandler framedSocketListener = new FramedSocketHandler(socket, protocol);, +              .listener(framedSocketListener), +  /** Processes HTTP requests layered over framed protocols. */, +  private class FramedSocketHandler extends Http2Connection.Listener {, +    private FramedSocketHandler(Socket socket, Protocol protocol) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +        .setBody("Body with unknown charset"));, +        .assertLogEqual("Body with unknown charset"), +        .assertLogEqual("<-- END HTTP (25-byte body)"), +        .assertLogEqual("Body with unknown charset"), +        .assertLogEqual("<-- END HTTP (25-byte body)"), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void interceptorGetsFramedProtocol() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/MediaTypeTest.java, +    assertNull(MediaType.parse("text/plain; charset=utf-8; charset=utf-16"));, +    assertNull(mediaType.charset());, +    assertNull(mediaType.charset());, +    assertNull(mediaType.charset());, +    assertNull(mediaType.charset());, +    assertNull(mediaType.charset());, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java]