[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    final CountDownLatch latch = new CountDownLatch(1);, +    client = client.newBuilder(), +        .addNetworkInterceptor(new Interceptor() {, +          @Override public Response intercept(Chain chain) throws IOException {, +            try {, +              latch.await();, +            } catch (InterruptedException e) {, +              throw new AssertionError(e);, +            }, +            return chain.proceed(chain.request());, +          }, +        }), +        .build();, +, +    latch.countDown();, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    final CountDownLatch latch = new CountDownLatch(1);, +    client = client.newBuilder(), +        .addNetworkInterceptor(new Interceptor() {, +          @Override public Response intercept(Chain chain) throws IOException {, +            try {, +              latch.await();, +            } catch (InterruptedException e) {, +              throw new AssertionError(e);, +            }, +            return chain.proceed(chain.request());, +          }, +        }), +        .build();, +, +    latch.countDown();, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    final CountDownLatch latch = new CountDownLatch(1);, +    client = client.newBuilder(), +        .addNetworkInterceptor(new Interceptor() {, +          @Override public Response intercept(Chain chain) throws IOException {, +            try {, +              latch.await();, +            } catch (InterruptedException e) {, +              throw new AssertionError(e);, +            }, +            return chain.proceed(chain.request());, +          }, +        }), +        .build();, +, +    latch.countDown();, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +  private static final int OKHTTP_CLIENT_WINDOW_SIZE = 16 * 1024 * 1024;, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    final CountDownLatch latch = new CountDownLatch(1);, +    client = client.newBuilder(), +        .addNetworkInterceptor(new Interceptor() {, +          @Override public Response intercept(Chain chain) throws IOException {, +            try {, +              latch.await();, +            } catch (InterruptedException e) {, +              throw new AssertionError(e);, +            }, +            return chain.proceed(chain.request());, +          }, +        }), +        .build();, +, +    latch.countDown();, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +  private static final int OKHTTP_CLIENT_WINDOW_SIZE = 16 * 1024 * 1024;, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.java, +      long read;, +        checkNotClosed();, +        if (readBuffer.size() == 0) return -1; // This source is exhausted., +        // Flow control: notify the peer that we're ready for more data!, +        unacknowledgedBytesRead += read;, +        if (unacknowledgedBytesRead, +            >= connection.okHttpSettings.getInitialWindowSize() / 2) {, +, +    private void checkNotClosed() throws IOException {, +      if (closed) {, +        throw new IOException("stream closed");, +      }, +      if (errorCode != null) {, +        throw new StreamResetException(errorCode);, +      }, +    }]