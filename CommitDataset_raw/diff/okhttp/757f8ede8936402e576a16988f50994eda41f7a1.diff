[+++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/src/main/java/libcore/net/spdy/SpdyConnection.java, +    private final SpdyReader spdyReader;, +    private final SpdyWriter spdyWriter;, +    private final ExecutorService readExecutor;, +    private final ExecutorService writeExecutor;, +    private final ExecutorService callbackExecutor;, +        handler = builder.handler;, +        callbackExecutor = new ThreadPoolExecutor(1, Integer.MAX_VALUE, 60, TimeUnit.SECONDS,, +    /**, +     * Returns true if this peer initiated the connection., +     */, +    public synchronized boolean isClient() {, +        return nextStreamId % 2 == 1;, +    }, +, +            SpdyStream previous;, +            if (isClient() != (streamId % 2 == 1)) {, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/src/main/java/libcore/net/spdy/SpdyConnection.java, +    private final SpdyReader spdyReader;, +    private final SpdyWriter spdyWriter;, +    private final ExecutorService readExecutor;, +    private final ExecutorService writeExecutor;, +    private final ExecutorService callbackExecutor;, +        handler = builder.handler;, +        callbackExecutor = new ThreadPoolExecutor(1, Integer.MAX_VALUE, 60, TimeUnit.SECONDS,, +    /**, +     * Returns true if this peer initiated the connection., +     */, +    public synchronized boolean isClient() {, +        return nextStreamId % 2 == 1;, +    }, +, +            SpdyStream previous;, +            if (isClient() != (streamId % 2 == 1)) {, +++ b/src/main/java/libcore/net/spdy/SpdyServer.java, +        OutputStream out = stream.reply(responseHeaders);, +        OutputStream out = stream.reply(Arrays.asList(, +        ));, +++ b/.travis.yml, +language: java, +, +notifications:, +  email: false, +, +jdk:, +  - oraclejdk7, +++ b/src/main/java/libcore/net/spdy/SpdyConnection.java, +    private final SpdyReader spdyReader;, +    private final SpdyWriter spdyWriter;, +    private final ExecutorService readExecutor;, +    private final ExecutorService writeExecutor;, +    private final ExecutorService callbackExecutor;, +        handler = builder.handler;, +        callbackExecutor = new ThreadPoolExecutor(1, Integer.MAX_VALUE, 60, TimeUnit.SECONDS,, +    /**, +     * Returns true if this peer initiated the connection., +     */, +    public synchronized boolean isClient() {, +        return nextStreamId % 2 == 1;, +    }, +, +            SpdyStream previous;, +            if (isClient() != (streamId % 2 == 1)) {, +++ b/src/main/java/libcore/net/spdy/SpdyServer.java, +        OutputStream out = stream.reply(responseHeaders);, +        OutputStream out = stream.reply(Arrays.asList(, +        ));, +++ b/src/main/java/libcore/net/spdy/SpdyStream.java, +    /**, +     * True if either side has shut down the input stream. We will receive no, +     * more bytes beyond those already in the buffer. Guarded by this., +     */, +    private boolean inFinished;, +, +    /**, +     * True if either side has shut down the output stream. We will write no]