[+++ b/src/main/java/libcore/io/DiskLruCache.java, +                if (!editor.written[i]) {, +                    editor.abort();, +                    throw new IllegalStateException(, +                            "Newly created entry didn't create value for index " + i);, +                }, +                    Libcore.logW(, +                            "DiskLruCache: Newly created entry doesn't have file for index " + i);, +                    return;, +        private final boolean[] written;, +            this.written = (entry.readable) ? null : new boolean[valueCount];, +                if (!entry.readable) {, +                    written[index] = true;, +                }, +++ b/src/main/java/libcore/io/DiskLruCache.java, +                if (!editor.written[i]) {, +                    editor.abort();, +                    throw new IllegalStateException(, +                            "Newly created entry didn't create value for index " + i);, +                }, +                    Libcore.logW(, +                            "DiskLruCache: Newly created entry doesn't have file for index " + i);, +                    return;, +        private final boolean[] written;, +            this.written = (entry.readable) ? null : new boolean[valueCount];, +                if (!entry.readable) {, +                    written[index] = true;, +                }, +++ b/src/main/java/libcore/net/http/HttpConnection.java, +        Libcore.makeTlsTolerant(sslSocket, address.socketHost, tlsTolerant);, +++ b/src/main/java/libcore/io/DiskLruCache.java, +                if (!editor.written[i]) {, +                    editor.abort();, +                    throw new IllegalStateException(, +                            "Newly created entry didn't create value for index " + i);, +                }, +                    Libcore.logW(, +                            "DiskLruCache: Newly created entry doesn't have file for index " + i);, +                    return;, +        private final boolean[] written;, +            this.written = (entry.readable) ? null : new boolean[valueCount];, +                if (!entry.readable) {, +                    written[index] = true;, +                }, +++ b/src/main/java/libcore/net/http/HttpConnection.java, +        Libcore.makeTlsTolerant(sslSocket, address.socketHost, tlsTolerant);, +++ b/src/main/java/libcore/net/http/HttpResponseCache.java, +            OutputStream out = editor.newOutputStream(ENTRY_METADATA);, +++ b/src/main/java/libcore/io/DiskLruCache.java, +                if (!editor.written[i]) {, +                    editor.abort();, +                    throw new IllegalStateException(, +                            "Newly created entry didn't create value for index " + i);, +                }, +                    Libcore.logW(, +                            "DiskLruCache: Newly created entry doesn't have file for index " + i);, +                    return;, +        private final boolean[] written;, +            this.written = (entry.readable) ? null : new boolean[valueCount];, +                if (!entry.readable) {, +                    written[index] = true;, +                }, +++ b/src/main/java/libcore/net/http/HttpConnection.java, +        Libcore.makeTlsTolerant(sslSocket, address.socketHost, tlsTolerant);, +++ b/src/main/java/libcore/net/http/HttpResponseCache.java, +            OutputStream out = editor.newOutputStream(ENTRY_METADATA);, +++ b/src/main/java/libcore/util/Libcore.java, +    public static void makeTlsTolerant(SSLSocket socket, String socketHost, boolean tlsTolerant) {, +                setHostname.invoke(socket, socketHost);, +++ b/src/main/java/libcore/io/DiskLruCache.java, +                if (!editor.written[i]) {, +                    editor.abort();, +                    throw new IllegalStateException(, +                            "Newly created entry didn't create value for index " + i);, +                }, +                    Libcore.logW(, +                            "DiskLruCache: Newly created entry doesn't have file for index " + i);, +                    return;, +        private final boolean[] written;, +            this.written = (entry.readable) ? null : new boolean[valueCount];, +                if (!entry.readable) {, +                    written[index] = true;, +                }, +++ b/src/main/java/libcore/net/http/HttpConnection.java, +        Libcore.makeTlsTolerant(sslSocket, address.socketHost, tlsTolerant);, +++ b/src/main/java/libcore/net/http/HttpResponseCache.java, +            OutputStream out = editor.newOutputStream(ENTRY_METADATA);, +++ b/src/main/java/libcore/util/Libcore.java, +    public static void makeTlsTolerant(SSLSocket socket, String socketHost, boolean tlsTolerant) {, +                setHostname.invoke(socket, socketHost);, +++ b/src/test/java/libcore/io/DiskLruCacheTest.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *]