[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2Codec;, +    Response response = Http2Codec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2Codec.http2HeadersList(request));, +    assertEquals(expected, Http2Codec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2Codec;, +    Response response = Http2Codec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2Codec.http2HeadersList(request));, +    assertEquals(expected, Http2Codec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +  @Test public void proxySelectorHttpWithConnectionReuse() throws IOException {, +    server.enqueue(new MockResponse(), +        .setBody("response 1"));, +    server.enqueue(new MockResponse(), +        .setResponseCode(407));, +, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .proxySelector(new ProxySelector() {, +          @Override public List<Proxy> select(URI uri) {, +            return Collections.singletonList(server.toProxyAddress());, +          }, +, +          @Override public void connectFailed(, +              URI uri, SocketAddress socketAddress, IOException e) {, +          }, +        }).build());, +    URL url = new URL("http://android.com/foo");, +    assertContent("response 1", urlFactory.open(url));, +    assertEquals(407, urlFactory.open(url).getResponseCode());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2Codec;, +    Response response = Http2Codec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2Codec.http2HeadersList(request));, +    assertEquals(expected, Http2Codec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +  @Test public void proxySelectorHttpWithConnectionReuse() throws IOException {, +    server.enqueue(new MockResponse(), +        .setBody("response 1"));, +    server.enqueue(new MockResponse(), +        .setResponseCode(407));, +, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .proxySelector(new ProxySelector() {, +          @Override public List<Proxy> select(URI uri) {, +            return Collections.singletonList(server.toProxyAddress());, +          }, +, +          @Override public void connectFailed(, +              URI uri, SocketAddress socketAddress, IOException e) {, +          }, +        }).build());, +    URL url = new URL("http://android.com/foo");, +    assertContent("response 1", urlFactory.open(url));, +    assertEquals(407, urlFactory.open(url).getResponseCode());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +import okhttp3.internal.Transmitter;, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2Codec;, +    Response response = Http2Codec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2Codec.http2HeadersList(request));, +    assertEquals(expected, Http2Codec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +  @Test public void proxySelectorHttpWithConnectionReuse() throws IOException {, +    server.enqueue(new MockResponse(), +        .setBody("response 1"));, +    server.enqueue(new MockResponse(), +        .setResponseCode(407));, +, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .proxySelector(new ProxySelector() {, +          @Override public List<Proxy> select(URI uri) {, +            return Collections.singletonList(server.toProxyAddress());, +          }, +, +          @Override public void connectFailed(, +              URI uri, SocketAddress socketAddress, IOException e) {, +          }, +        }).build());, +    URL url = new URL("http://android.com/foo");, +    assertContent("response 1", urlFactory.open(url));, +    assertEquals(407, urlFactory.open(url).getResponseCode());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +import okhttp3.internal.Transmitter;, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.Transmitter;, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2Codec;, +    Response response = Http2Codec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2Codec.http2HeadersList(request));, +    assertEquals(expected, Http2Codec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +  @Test public void proxySelectorHttpWithConnectionReuse() throws IOException {, +    server.enqueue(new MockResponse()]