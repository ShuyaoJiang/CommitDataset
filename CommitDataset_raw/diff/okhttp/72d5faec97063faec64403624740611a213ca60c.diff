[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +     *     sending this message. If {@code lastGoodStreamId} is zero, the peer, +     *     processed no frames., +    void goAway(int lastGoodStreamId, ErrorCode errorCode, ByteString debugData);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +     *     sending this message. If {@code lastGoodStreamId} is zero, the peer, +     *     processed no frames., +    void goAway(int lastGoodStreamId, ErrorCode errorCode, ByteString debugData);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +import com.squareup.okhttp.internal.bytes.Deadline;, +import com.squareup.okhttp.internal.bytes.OkBuffer;, +import com.squareup.okhttp.internal.bytes.OkBuffers;, +import com.squareup.okhttp.internal.bytes.Source;, +    private final Source source;, +    private final OkBuffer buffer = new OkBuffer();, +    Reader(boolean client, int maxHeaderTableByteCount, Source source) {, +      this.source = source;, +      while (buffer.byteCount() > 0, +          || source.read(buffer, 2048, Deadline.NONE) != -1) {, +        int b = buffer.readByte() & 0xff;, +      OkBuffers.require(source, buffer, 1, Deadline.NONE);, +      return buffer.readByte() & 0xff;, +, +      boolean huffmanDecode = false;, +        huffmanDecode = true;, +, +      OkBuffers.require(source, buffer, length, Deadline.NONE);, +      ByteString byteString = buffer.readByteString(length);, +, +      if (huffmanDecode) {, +        byteString = huffmanCodec.decode(byteString); // TODO: streaming Huffman!, +      }, +, +      if (asciiLowercase) {, +        byteString = byteString.toAsciiLowercase();, +      }, +, +      return byteString;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +     *     sending this message. If {@code lastGoodStreamId} is zero, the peer, +     *     processed no frames., +    void goAway(int lastGoodStreamId, ErrorCode errorCode, ByteString debugData);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +import com.squareup.okhttp.internal.bytes.Deadline;, +import com.squareup.okhttp.internal.bytes.OkBuffer;, +import com.squareup.okhttp.internal.bytes.OkBuffers;, +import com.squareup.okhttp.internal.bytes.Source;, +    private final Source source;, +    private final OkBuffer buffer = new OkBuffer();, +    Reader(boolean client, int maxHeaderTableByteCount, Source source) {, +      this.source = source;, +      while (buffer.byteCount() > 0, +          || source.read(buffer, 2048, Deadline.NONE) != -1) {, +        int b = buffer.readByte() & 0xff;, +      OkBuffers.require(source, buffer, 1, Deadline.NONE);, +      return buffer.readByte() & 0xff;, +, +      boolean huffmanDecode = false;, +        huffmanDecode = true;, +, +      OkBuffers.require(source, buffer, length, Deadline.NONE);, +      ByteString byteString = buffer.readByteString(length);, +, +      if (huffmanDecode) {, +        byteString = huffmanCodec.decode(byteString); // TODO: streaming Huffman!, +      }, +, +      if (asciiLowercase) {, +        byteString = byteString.toAsciiLowercase();, +      }, +, +      return byteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +import com.squareup.okhttp.internal.bytes.Deadline;, +import com.squareup.okhttp.internal.bytes.OkBuffer;, +import com.squareup.okhttp.internal.bytes.OkBuffers;, +import com.squareup.okhttp.internal.bytes.Source;, +  private static final ByteString CONNECTION_HEADER, +      = ByteString.encodeUtf8("PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n");, +    return new Reader(OkBuffers.source(in), 4096, client);, +    private final OkBuffer buffer = new OkBuffer();, +    private final Source source;, +    private final ContinuationSource continuation;, +    Reader(Source source, int headerTableSize, boolean client) {, +      this.source = source;, +      this.continuation = new ContinuationSource(source, buffer);, +      OkBuffers.require(source, buffer, CONNECTION_HEADER.size(), Deadline.NONE);, +      ByteString connectionHeader = buffer.readByteString(CONNECTION_HEADER.size());, +      if (!CONNECTION_HEADER.equals(connectionHeader)) {, +        throw ioException("Expected a connection header but was %s", connectionHeader.utf8());, +        OkBuffers.require(source, buffer, 8, Deadline.NONE);, +      int w1 = buffer.readInt();]