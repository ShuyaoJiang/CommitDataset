[+++ b/.travis.yml, +#  - openjdk11, +++ b/.travis.yml, +#  - openjdk11, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import javax.net.ssl.SSLException;, +import static okhttp3.internal.platform.PlatformTest.getPlatform;, +            SSLException.class, // JDK 11 response to the FAIL_HANDSHAKE, +    } catch (SSLException expected) {, +      // JDK 11 response to the FAIL_HANDSHAKE, +      String jvmVersion = System.getProperty("java.specification.version");, +      assertEquals("11", jvmVersion);, +++ b/.travis.yml, +#  - openjdk11, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import javax.net.ssl.SSLException;, +import static okhttp3.internal.platform.PlatformTest.getPlatform;, +            SSLException.class, // JDK 11 response to the FAIL_HANDSHAKE, +    } catch (SSLException expected) {, +      // JDK 11 response to the FAIL_HANDSHAKE, +      String jvmVersion = System.getProperty("java.specification.version");, +      assertEquals("11", jvmVersion);, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    } catch (SSLException expected) {, +      // JDK 1.9 response to the FAIL_HANDSHAKE, +      // javax.net.ssl.SSLException: Unexpected handshake message: client_hello, +++ b/.travis.yml, +#  - openjdk11, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import javax.net.ssl.SSLException;, +import static okhttp3.internal.platform.PlatformTest.getPlatform;, +            SSLException.class, // JDK 11 response to the FAIL_HANDSHAKE, +    } catch (SSLException expected) {, +      // JDK 11 response to the FAIL_HANDSHAKE, +      String jvmVersion = System.getProperty("java.specification.version");, +      assertEquals("11", jvmVersion);, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    } catch (SSLException expected) {, +      // JDK 1.9 response to the FAIL_HANDSHAKE, +      // javax.net.ssl.SSLException: Unexpected handshake message: client_hello, +++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java, +import javax.net.ssl.SSLException;, +import static org.junit.Assert.assertTrue;, +    } catch (SSLException expected) {, +      String jvmVersion = System.getProperty("java.specification.version");, +      assertEquals("11", jvmVersion);, +    } catch (SSLException expected) {, +      // javax.net.ssl.SSLException: readRecord, +      String jvmVersion = System.getProperty("java.specification.version");, +      assertEquals("11", jvmVersion);, +++ b/.travis.yml, +#  - openjdk11, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import javax.net.ssl.SSLException;, +import static okhttp3.internal.platform.PlatformTest.getPlatform;, +            SSLException.class, // JDK 11 response to the FAIL_HANDSHAKE, +    } catch (SSLException expected) {, +      // JDK 11 response to the FAIL_HANDSHAKE, +      String jvmVersion = System.getProperty("java.specification.version");, +      assertEquals("11", jvmVersion);, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    } catch (SSLException expected) {, +      // JDK 1.9 response to the FAIL_HANDSHAKE, +      // javax.net.ssl.SSLException: Unexpected handshake message: client_hello, +++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java, +import javax.net.ssl.SSLException;, +import static org.junit.Assert.assertTrue;, +    } catch (SSLException expected) {, +      String jvmVersion = System.getProperty("java.specification.version");, +      assertEquals("11", jvmVersion);, +    } catch (SSLException expected) {, +      // javax.net.ssl.SSLException: readRecord, +      String jvmVersion = System.getProperty("java.specification.version");, +      assertEquals("11", jvmVersion);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ConnectionSpecSelector.java, +import javax.net.ssl.SSLException;, +    return (e instanceof SSLHandshakeException, +        || e instanceof SSLProtocolException, +        || e instanceof SSLException);]