[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    } else if (responseCode == HttpURLConnection.HTTP_NO_CONTENT, +        || responseCode == HttpURLConnection.HTTP_RESET) {, +      mockResponse.setBody(""); // We forbid bodies for 204 and 205., +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    } else if (responseCode == HttpURLConnection.HTTP_NO_CONTENT, +        || responseCode == HttpURLConnection.HTTP_RESET) {, +      mockResponse.setBody(""); // We forbid bodies for 204 and 205., +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .dns(new FakeDns()), +        .build());, +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_NO_CONTENT), +    try {, +      connection.getInputStream();, +      fail();, +    } catch (IOException expected) {, +      assertEquals("HTTP 204 had non-zero Content-Length: 25", expected.getMessage());, +    }, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .dns(new FakeDns()), +        .build());, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    } else if (responseCode == HttpURLConnection.HTTP_NO_CONTENT, +        || responseCode == HttpURLConnection.HTTP_RESET) {, +      mockResponse.setBody(""); // We forbid bodies for 204 and 205., +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .dns(new FakeDns()), +        .build());, +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_NO_CONTENT), +    try {, +      connection.getInputStream();, +      fail();, +    } catch (IOException expected) {, +      assertEquals("HTTP 204 had non-zero Content-Length: 25", expected.getMessage());, +    }, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .dns(new FakeDns()), +        .build());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/io/PipeTest.java, +    pipe.sink.timeout().timeout(1000, TimeUnit.MILLISECONDS);, +    assertElapsed(1000.0, start);, +    pipe.source.timeout().timeout(1000, TimeUnit.MILLISECONDS);, +    assertElapsed(1000.0, start);, +   * sleeping 1000 ms, then reading 3 bytes. That should make for an approximate timeline like, +   * this:, +   *    0: writer writes 'abc', blocks 0: reader sleeps until 1000, +   * 1000: reader reads 'abc', sleeps until 2000, +   * 1000: writer writes 'def', blocks, +   * 2000: reader reads 'def', sleeps until 3000, +   * 2000: writer writes 'ghi', blocks, +   * 3000: reader reads 'ghi', sleeps until 4000, +   * 3000: writer writes 'jkl', returns, +   * 24000: reader reads 'jkl', returns, +          Thread.sleep(1000L);, +          Thread.sleep(1000L);, +          Thread.sleep(1000L);, +          Thread.sleep(1000L);, +    assertElapsed(3000.0, start);, +    }, 1000, TimeUnit.MILLISECONDS);, +      assertElapsed(1000.0, start);, +          Thread.sleep(1000);, +          Thread.sleep(1000);, +    assertElapsed(2000.0, start);, +          Thread.sleep(1000);, +          Thread.sleep(1000);, +      assertElapsed(2000.0, start);, +          Thread.sleep(1000);, +          Thread.sleep(1000);, +      assertElapsed(2000.0, start);, +    }, 1000, TimeUnit.MILLISECONDS);, +    assertElapsed(1000.0, start);, +   * The writer has 12 bytes to write. It alternates sleeping 1000 ms, then writing 3 bytes. The, +   *    0: writer sleeps until 1000, +   *    0: reader blocks, +   * 1000: writer writes 'abc', sleeps until 2000, +   * 1000: reader reads 'abc', +   * 2000: writer writes 'def', sleeps until 3000, +   * 2000: reader reads 'def', +   * 3000: writer writes 'ghi', sleeps until 4000, +   * 3000: reader reads 'ghi', +   * 4000: writer writes 'jkl', returns, +   * 4000: reader reads 'jkl', returns, +          Thread.sleep(1000L);, +          Thread.sleep(1000L);, +          Thread.sleep(1000L);, +          Thread.sleep(1000L);, +    assertElapsed(1000.0, start);, +    assertElapsed(2000.0, start);, +    assertElapsed(3000.0, start);, +    assertElapsed(4000.0, start);, +   * -50..+450 milliseconds., +    assertEquals(duration, now() - start - 200d, 250.0);]