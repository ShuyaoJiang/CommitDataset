[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private Headers.Builder trailers = new Headers.Builder();, +  public Headers getTrailers() {, +    return trailers.build();, +  }, +, +  /** Replaces all headers with those specified. */, +  /** Replaces all trailers with those specified. */, +  public MockResponse setTrailers(Headers trailers) {, +    this.trailers = trailers.newBuilder();, +    return this;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private Headers.Builder trailers = new Headers.Builder();, +  public Headers getTrailers() {, +    return trailers.build();, +  }, +, +  /** Replaces all headers with those specified. */, +  /** Replaces all trailers with those specified. */, +  public MockResponse setTrailers(Headers trailers) {, +    this.trailers = trailers.newBuilder();, +    return this;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      Headers trailers = response.getTrailers();, +      if (!hasResponseBody && trailers.size() > 0) {, +        throw new IllegalStateException("unsupported: no body and non-empty trailers " + trailers);, +      }, +      if (trailers.size() > 0) {, +        stream.enqueueTrailers(trailers);, +      }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private Headers.Builder trailers = new Headers.Builder();, +  public Headers getTrailers() {, +    return trailers.build();, +  }, +, +  /** Replaces all headers with those specified. */, +  /** Replaces all trailers with those specified. */, +  public MockResponse setTrailers(Headers trailers) {, +    this.trailers = trailers.newBuilder();, +    return this;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      Headers trailers = response.getTrailers();, +      if (!hasResponseBody && trailers.size() > 0) {, +        throw new IllegalStateException("unsupported: no body and non-empty trailers " + trailers);, +      }, +      if (trailers.size() > 0) {, +        stream.enqueueTrailers(trailers);, +      }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  // Coming soon, +  @Test @Ignore public void clientReadsHeadersDataTrailersHttp1ChunkedTransferEncoding() throws IOException {, +    MockResponse mockResponse = new MockResponse(), +        .clearHeaders(), +        .addHeader("h1", "v1"), +        .addHeader("h2", "v2"), +        .setChunkedBody("HelloBonjour", 1024), +        .setTrailers(Headers.of("trailers", "boom"));, +    server.enqueue(mockResponse);, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +, +    Response response = call.execute();, +    BufferedSource source = response.body().source();, +, +    assertEquals("v1", response.header("h1"));, +    assertEquals("v2", response.header("h2"));, +, +    assertEquals("Hello", source.readUtf8(5));, +    assertEquals("Bonjour", source.readUtf8(7));, +, +    assertTrue(source.exhausted());, +    assertEquals(Headers.of("trailers", "boom"), response.trailers());, +  }, +, +  @Test public void clientReadsHeadersDataTrailersHttp2() throws IOException {, +    MockResponse mockResponse = new MockResponse(), +        .clearHeaders(), +        .addHeader("h1", "v1"), +        .addHeader("h2", "v2"), +        .setBody("HelloBonjour"), +        .setTrailers(Headers.of("trailers", "boom"));, +    server.enqueue(mockResponse);, +    enableProtocol(Protocol.HTTP_2);, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +, +    Response response = call.execute();, +    BufferedSource source = response.body().source();, +]