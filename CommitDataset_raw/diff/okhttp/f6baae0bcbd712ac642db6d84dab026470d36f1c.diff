[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName("localhost").getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName("localhost").getHostName()).build();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +  @Test public void byteArrayRange() throws Exception {, +    MediaType contentType = MediaType.parse("text/plain");, +    RequestBody body = RequestBody.create(contentType, ".abcd".getBytes(Util.UTF_8), 1, 3);, +    assertEquals(contentType, body.contentType());, +    assertEquals(3, body.contentLength());, +    assertEquals("616263", bodyToHex(body));, +    assertEquals("Retransmit body", "616263", bodyToHex(body));, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName("localhost").getHostName()).build();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +  @Test public void byteArrayRange() throws Exception {, +    MediaType contentType = MediaType.parse("text/plain");, +    RequestBody body = RequestBody.create(contentType, ".abcd".getBytes(Util.UTF_8), 1, 3);, +    assertEquals(contentType, body.contentType());, +    assertEquals(3, body.contentLength());, +    assertEquals("616263", bodyToHex(body));, +    assertEquals("Retransmit body", "616263", bodyToHex(body));, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/RequestBody.java, +    return create(contentType, content, 0, content.length);, +  }, +  /** Returns a new request body that transmits {@code content}. */, +  public static RequestBody create(final MediaType contentType, final byte[] content,, +      final int offset, final int byteCount) {, +    if (content == null) throw new NullPointerException("content == null");, +    Util.checkOffsetAndCount(content.length, offset, byteCount);, +        return byteCount;, +        sink.write(content, offset, byteCount);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName("localhost").getHostName()).build();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +  @Test public void byteArrayRange() throws Exception {, +    MediaType contentType = MediaType.parse("text/plain");, +    RequestBody body = RequestBody.create(contentType, ".abcd".getBytes(Util.UTF_8), 1, 3);, +    assertEquals(contentType, body.contentType());, +    assertEquals(3, body.contentLength());, +    assertEquals("616263", bodyToHex(body));, +    assertEquals("Retransmit body", "616263", bodyToHex(body));, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/RequestBody.java, +    return create(contentType, content, 0, content.length);, +  }, +  /** Returns a new request body that transmits {@code content}. */, +  public static RequestBody create(final MediaType contentType, final byte[] content,, +      final int offset, final int byteCount) {, +    if (content == null) throw new NullPointerException("content == null");, +    Util.checkOffsetAndCount(content.length, offset, byteCount);, +        return byteCount;, +        sink.write(content, offset, byteCount);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java, + * Access to platform-specific features., + * <h3>Server name indication (SNI)</h3>, + * Supported on Android 2.3+., + * <h3>Session Tickets</h3>, + * Supported on Android 2.3+., + *, + * <h3>Android Traffic Stats (Socket Tagging)</h3>, + * Supported on Android 4.0+., + *, + * <h3>ALPN (Application Layer Protocol Negotiation)</h3>, + * Supported on Android 5.0+. The APIs were present in Android 4.4, but that implementation was, + * unstable., + *, + * Supported on OpenJDK 7 and 8 (via the JettyALPN-boot library)., +      } catch (ClassNotFoundException e) {, +      OptionalMethod<Socket> setUseSessionTickets, +          = new OptionalMethod<>(null, "setUseSessionTickets", boolean.class);, +      OptionalMethod<Socket> setHostname, +          = new OptionalMethod<>(null, "setHostname", String.class);, +      OptionalMethod<Socket> getAlpnSelectedProtocol = null;, +      OptionalMethod<Socket> setAlpnProtocols = null;, +, +      // Attempt to find Android 4.0+ APIs., +, +        // Attempt to find Android 5.0+ APIs., +        try {, +          Class.forName("android.net.Network"); // Arbitrary class added in Android 5.0., +          getAlpnSelectedProtocol = new OptionalMethod<>(byte[].class, "getAlpnSelectedProtocol");, +          setAlpnProtocols = new OptionalMethod<>(null, "setAlpnProtocols", byte[].class);, +        }, +      } catch (ClassNotFoundException | NoSuchMethodException ignored) {, +      return new Android(setUseSessionTickets, setHostname, trafficStatsTagSocket,, +          trafficStatsUntagSocket, getAlpnSelectedProtocol, setAlpnProtocols);, +    // Find Jetty's ALPN extension for OpenJDK., +    try {, +    } catch (ClassNotFoundException | NoSuchMethodException ignored) {, +  /** Android 2.3 or better. */, +    private final OptionalMethod<Socket> setUseSessionTickets;, +    private final OptionalMethod<Socket> setHostname;, +    // Non-null on Android 5.0+., +    private final OptionalMethod<Socket> getAlpnSelectedProtocol;]