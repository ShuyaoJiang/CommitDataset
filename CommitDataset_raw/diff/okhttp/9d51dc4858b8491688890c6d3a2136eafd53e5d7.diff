[+++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import static org.junit.Assert.assertNotNull;, +  /**, +   * These public suffixes were selected by inspecting the publicsuffix.org list. It's possible they, +   * may change in the future. If this test begins to fail, please double check they are still, +   * present in the public suffix list., +   */, +  @Test public void domainIsPublicSuffix() {, +    HttpUrl ascii = HttpUrl.parse("https://foo1.foo.bar.elb.amazonaws.com");, +    assertNotNull(Cookie.parse(ascii, "a=b; domain=foo.bar.elb.amazonaws.com"));, +    assertNull(Cookie.parse(ascii, "a=b; domain=bar.elb.amazonaws.com"));, +    assertNull(Cookie.parse(ascii, "a=b; domain=com"));, +, +    HttpUrl unicode = HttpUrl.parse("https://長.長.長崎.jp");, +    assertNotNull(Cookie.parse(unicode, "a=b; domain=長.長崎.jp"));, +    assertNull(Cookie.parse(unicode, "a=b; domain=長崎.jp"));, +, +    HttpUrl punycode = HttpUrl.parse("https://xn--ue5a.xn--ue5a.xn--8ltr62k.jp");, +    assertNotNull(Cookie.parse(punycode, "a=b; domain=xn--ue5a.xn--8ltr62k.jp"));, +    assertNull(Cookie.parse(punycode, "a=b; domain=xn--8ltr62k.jp"));, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import static org.junit.Assert.assertNotNull;, +  /**, +   * These public suffixes were selected by inspecting the publicsuffix.org list. It's possible they, +   * may change in the future. If this test begins to fail, please double check they are still, +   * present in the public suffix list., +   */, +  @Test public void domainIsPublicSuffix() {, +    HttpUrl ascii = HttpUrl.parse("https://foo1.foo.bar.elb.amazonaws.com");, +    assertNotNull(Cookie.parse(ascii, "a=b; domain=foo.bar.elb.amazonaws.com"));, +    assertNull(Cookie.parse(ascii, "a=b; domain=bar.elb.amazonaws.com"));, +    assertNull(Cookie.parse(ascii, "a=b; domain=com"));, +, +    HttpUrl unicode = HttpUrl.parse("https://長.長.長崎.jp");, +    assertNotNull(Cookie.parse(unicode, "a=b; domain=長.長崎.jp"));, +    assertNull(Cookie.parse(unicode, "a=b; domain=長崎.jp"));, +, +    HttpUrl punycode = HttpUrl.parse("https://xn--ue5a.xn--ue5a.xn--8ltr62k.jp");, +    assertNotNull(Cookie.parse(punycode, "a=b; domain=xn--ue5a.xn--8ltr62k.jp"));, +    assertNull(Cookie.parse(punycode, "a=b; domain=xn--8ltr62k.jp"));, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Cookie.java, +import okhttp3.internal.publicsuffix.PublicSuffixDatabase;, +        : domainMatch(url.host(), domain);, +  private static boolean domainMatch(String urlHost, String domain) {, +    String urlHost = url.host();, +      domain = urlHost;, +    } else if (!domainMatch(urlHost, domain)) {, +    // If the domain is a suffix of the url host, it must not be a public suffix., +    if (urlHost.length() != domain.length(), +        && PublicSuffixDatabase.get().getEffectiveTldPlusOne(domain) == null) {, +      return null;, +    }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import static org.junit.Assert.assertNotNull;, +  /**, +   * These public suffixes were selected by inspecting the publicsuffix.org list. It's possible they, +   * may change in the future. If this test begins to fail, please double check they are still, +   * present in the public suffix list., +   */, +  @Test public void domainIsPublicSuffix() {, +    HttpUrl ascii = HttpUrl.parse("https://foo1.foo.bar.elb.amazonaws.com");, +    assertNotNull(Cookie.parse(ascii, "a=b; domain=foo.bar.elb.amazonaws.com"));, +    assertNull(Cookie.parse(ascii, "a=b; domain=bar.elb.amazonaws.com"));, +    assertNull(Cookie.parse(ascii, "a=b; domain=com"));, +, +    HttpUrl unicode = HttpUrl.parse("https://長.長.長崎.jp");, +    assertNotNull(Cookie.parse(unicode, "a=b; domain=長.長崎.jp"));, +    assertNull(Cookie.parse(unicode, "a=b; domain=長崎.jp"));, +, +    HttpUrl punycode = HttpUrl.parse("https://xn--ue5a.xn--ue5a.xn--8ltr62k.jp");, +    assertNotNull(Cookie.parse(punycode, "a=b; domain=xn--ue5a.xn--8ltr62k.jp"));, +    assertNull(Cookie.parse(punycode, "a=b; domain=xn--8ltr62k.jp"));, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Cookie.java, +import okhttp3.internal.publicsuffix.PublicSuffixDatabase;, +        : domainMatch(url.host(), domain);, +  private static boolean domainMatch(String urlHost, String domain) {, +    String urlHost = url.host();, +      domain = urlHost;, +    } else if (!domainMatch(urlHost, domain)) {, +    // If the domain is a suffix of the url host, it must not be a public suffix., +    if (urlHost.length() != domain.length(), +        && PublicSuffixDatabase.get().getEffectiveTldPlusOne(domain) == null) {, +      return null;, +    }, +, +++ b/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.java, +  private static final PublicSuffixDatabase instance = new PublicSuffixDatabase();, +, +  public static PublicSuffixDatabase get() {, +    return instance;, +  }, +]