[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +import java.net.URL;, +import java.util.List;, +import okio.GzipSink;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.fail;, +  @Test public void applicationInterceptorsCanShortCircuitResponses() throws Exception {, +        .url("https://localhost:1/"), +  @Test public void networkInterceptorsCannotShortCircuitResponses() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(500));, +, +    Interceptor interceptor = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        return new Response.Builder(), +            .request(chain.request()), +            .protocol(Protocol.HTTP_1_1), +            .code(200), +            .message("Intercepted!"), +            .body(ResponseBody.create(MediaType.parse("text/plain; charset=utf-8"), "abc")), +            .build();, +      }, +    };, +    client.networkInterceptors().add(interceptor);, +, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .build();, +, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("network interceptor " + interceptor + " must call proceed() exactly once",, +          expected.getMessage());, +    }, +  }, +, +  @Test public void networkInterceptorsCannotCallProceedMultipleTimes() throws Exception {, +    server.enqueue(new MockResponse());, +    Interceptor interceptor = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        chain.proceed(chain.request());, +        return chain.proceed(chain.request());, +      }, +    };, +    client.networkInterceptors().add(interceptor);, +, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .build();, +, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (IllegalStateException expected) {, +      expected.printStackTrace();, +      assertEquals("network interceptor " + interceptor + " must call proceed() exactly once",, +          expected.getMessage());, +    }, +  }, +, +  @Test public void networkInterceptorsCannotChangeServerAddress() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(500));, +, +    Interceptor interceptor = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        Address address = chain.connection().getRoute().getAddress();, +        String sameHost = address.getUriHost();, +        int differentPort = address.getUriPort() + 1;, +        return chain.proceed(chain.request().newBuilder(), +            .url(new URL("http://" + sameHost + ":" + differentPort + "/")), +            .build());, +      }, +    };, +    client.networkInterceptors().add(interceptor);, +, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .build();, +, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("network interceptor " + interceptor + " must retain the same host and port",, +          expected.getMessage());, +    }, +  }, +, +  @Test public void networkInterceptorsHaveConnectionAccess() throws Exception {, +    server.enqueue(new MockResponse());, +, +    client.networkInterceptors().add(new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        Connection connection = chain.connection();, +        assertNotNull(connection);, +        return chain.proceed(chain.request());, +      }, +    });]