[+++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java, +    callback.assertClose(1000, "");, +  }, +, +  @Test public void closeLengthOfOneThrows() throws IOException {, +    data.write(ByteString.decodeHex("880100")); // Close with invalid 1-byte payload, +    try {, +      clientReader.processNextFrame();, +      fail();, +    } catch (ProtocolException e) {, +      assertEquals("Malformed close payload length of 1.", e.getMessage());, +    }, +++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java, +    callback.assertClose(1000, "");, +  }, +, +  @Test public void closeLengthOfOneThrows() throws IOException {, +    data.write(ByteString.decodeHex("880100")); // Close with invalid 1-byte payload, +    try {, +      clientReader.processNextFrame();, +      fail();, +    } catch (ProtocolException e) {, +      assertEquals("Malformed close payload length of 1.", e.getMessage());, +    }, +++ b/okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/WebSocketReader.java, +        int code = 1000;, +          long bufferSize = buffer.size();, +          if (bufferSize == 1) {, +            throw new ProtocolException("Malformed close payload length of 1.");, +          } else if (bufferSize != 0) {, +        }]