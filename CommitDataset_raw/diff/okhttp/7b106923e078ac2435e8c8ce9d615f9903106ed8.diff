[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.OkBuffer;, +      OkBuffer body = new OkBuffer();, +      if (response.getBody() != null) {, +        body.write(response.getBody());, +      }, +      boolean closeStreamAfterHeaders = body.size() > 0 || !response.getPushPromises().isEmpty();, +      if (body.size() > 0) {, +        if (response.getThrottleBytesPerPeriod() == Integer.MAX_VALUE) {, +          sink.write(body, body.size());, +          sink.flush();, +        } else {, +          while (body.size() > 0) {, +            long toWrite = Math.min(body.size(), response.getThrottleBytesPerPeriod());, +            sink.write(body, toWrite);, +            sink.flush();, +            try {, +              long delayMs = response.getThrottleUnit().toMillis(response.getThrottlePeriod());, +              if (delayMs != 0) Thread.sleep(delayMs);, +            } catch (InterruptedException e) {, +              throw new AssertionError();, +            }, +          }, +        }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.OkBuffer;, +      OkBuffer body = new OkBuffer();, +      if (response.getBody() != null) {, +        body.write(response.getBody());, +      }, +      boolean closeStreamAfterHeaders = body.size() > 0 || !response.getPushPromises().isEmpty();, +      if (body.size() > 0) {, +        if (response.getThrottleBytesPerPeriod() == Integer.MAX_VALUE) {, +          sink.write(body, body.size());, +          sink.flush();, +        } else {, +          while (body.size() > 0) {, +            long toWrite = Math.min(body.size(), response.getThrottleBytesPerPeriod());, +            sink.write(body, toWrite);, +            sink.flush();, +            try {, +              long delayMs = response.getThrottleUnit().toMillis(response.getThrottlePeriod());, +              if (delayMs != 0) Thread.sleep(delayMs);, +            } catch (InterruptedException e) {, +              throw new AssertionError();, +            }, +          }, +        }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +import static java.util.concurrent.TimeUnit.SECONDS;, +  /**, +   * Test to ensure we don't  throw a read timeout on responses that are, +   * progressing.  For this case, we take a 4KiB body and throttle it to, +   * 1KiB/second.  We set the read timeout to two seconds.  If our, +   * implementation is acting correctly, it will not throw, as it is, +   * progressing., +   */, +  @Test public void readTimeoutMoreGranularThanBodySize() throws Exception {, +    char[] body = new char[4096]; // 4KiB to read, +    Arrays.fill(body, 'y');, +    server.enqueue(new MockResponse(), +        .setBody(new String(body)), +        .throttleBody(1024, 1, SECONDS)); // slow connection 1KiB/second, +    server.play();, +, +    connection = client.open(server.getUrl("/"));, +    connection.setReadTimeout(2000); // 2 seconds to read something., +    assertContent(new String(body), connection, Integer.MAX_VALUE);, +  }, +, +  /**, +   * Test to ensure we throw a read timeout on responses that are progressing, +   * too slowly.  For this case, we take a 2KiB body and throttle it to, +   * 1KiB/second.  We set the read timeout to half a second.  If our, +   * implementation is acting correctly, it will throw, as a byte doesn't, +   * arrive in time., +   */, +  @Test public void readTimeoutOnSlowConnection() throws Exception {, +    char[] body = new char[2048]; // 2KiB to read, +    Arrays.fill(body, 'y');, +    server.enqueue(new MockResponse(), +        .setBody(new String(body)), +        .throttleBody(1024, 1, SECONDS)); // slow connection 1KiB/second, +    server.play();, +, +    connection = client.open(server.getUrl("/"));, +    connection.setReadTimeout(500); // half a second to read something, +    connection.connect();, +    try {, +      readAscii(connection.getInputStream(), Integer.MAX_VALUE);, +      fail("Should have timed out!");, +    } catch (IOException e){, +      assertEquals("Read timed out", e.getMessage());, +    }, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.OkBuffer;, +      OkBuffer body = new OkBuffer();, +      if (response.getBody() != null) {]