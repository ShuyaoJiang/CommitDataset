[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import java.util.concurrent.TimeUnit;, +import static java.util.Arrays.asList;, +  private void assertSuccessfulEventOrder() throws IOException {, +    response.body().string();, +    List<String> expectedEvents = asList("FetchStart", "DnsStart", "DnsEnd", "ConnectionAcquired",, +            "ConnectStart", "SecureConnectStart", "SecureConnectEnd", "ConnectEnd",, +            "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd",, +            "ResponseBodyStart", "FetchEnd", "ResponseBodyEnd", "ConnectionReleased");, +, +  @Test public void successfulEmptyH2CallEventSequence() throws IOException {, +    enableTlsWithTunnel(false);, +    server.setProtocols(Arrays.asList(Protocol.HTTP_2, Protocol.HTTP_1_1));, +    server.enqueue(new MockResponse());, +, +    assertSuccessfulEventOrder();, +  }, +, +  @Test public void successfulEmptyHttpsCallEventSequence() throws IOException {, +    enableTlsWithTunnel(false);, +    server.setProtocols(Arrays.asList(Protocol.HTTP_1_1));, +    server.enqueue(new MockResponse(), +        .setBody("abc"));, +, +    assertSuccessfulEventOrder();, +  }, +, +  @Test public void successfulChunkedHttpsCallEventSequence() throws IOException {, +    enableTlsWithTunnel(false);, +    server.setProtocols(Arrays.asList(Protocol.HTTP_1_1));, +    server.enqueue(, +        new MockResponse().setBodyDelay(100, TimeUnit.MILLISECONDS).setChunkedBody("Hello!", 2));, +, +    assertSuccessfulEventOrder();, +  }, +, +  @Test public void successfulChunkedH2CallEventSequence() throws IOException {, +    enableTlsWithTunnel(false);, +    server.setProtocols(Arrays.asList(Protocol.HTTP_2, Protocol.HTTP_1_1));, +    server.enqueue(, +            new MockResponse().setBodyDelay(100, TimeUnit.MILLISECONDS).setChunkedBody("Hello!", 2));, +, +    assertSuccessfulEventOrder();, +  }, +]