[+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/StatusLine.java, +    // Parse protocol like "HTTP/1.1" followed by a space., +    int codeStart;, +    int httpMinorVersion;, +    if (statusLine.startsWith("HTTP/1.")) {, +      if (statusLine.length() < 9 || statusLine.charAt(8) != ' ') {, +      httpMinorVersion = statusLine.charAt(7) - '0';, +      codeStart = 9;, +    } else if (statusLine.startsWith("ICY ")) {, +      // Shoutcast uses ICY instead of "HTTP/1.0"., +      httpMinorVersion = 0;, +      codeStart = 4;, +    } else {, +      throw new ProtocolException("Unexpected status line: " + statusLine);, +    }, +, +    // Parse response code like "200". Always 3 digits., +    if (statusLine.length() < codeStart + 3) {, +      throw new ProtocolException("Unexpected status line: " + statusLine);, +    }, +      responseCode = Integer.parseInt(statusLine.substring(codeStart, codeStart + 3));, +, +    // Parse an optional response message like "OK" or "Not Modified". If it, +    // exists, it is separated from the response code by a space., +    String responseMessage = "";, +    if (statusLine.length() > codeStart + 3) {, +      if (statusLine.charAt(codeStart + 3) != ' ') {, +        throw new ProtocolException("Unexpected status line: " + statusLine);, +      }, +      responseMessage = statusLine.substring(codeStart + 4);, +    }, +, +    this.responseMessage = responseMessage;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/StatusLine.java, +    // Parse protocol like "HTTP/1.1" followed by a space., +    int codeStart;, +    int httpMinorVersion;, +    if (statusLine.startsWith("HTTP/1.")) {, +      if (statusLine.length() < 9 || statusLine.charAt(8) != ' ') {, +      httpMinorVersion = statusLine.charAt(7) - '0';, +      codeStart = 9;, +    } else if (statusLine.startsWith("ICY ")) {, +      // Shoutcast uses ICY instead of "HTTP/1.0"., +      httpMinorVersion = 0;, +      codeStart = 4;, +    } else {, +      throw new ProtocolException("Unexpected status line: " + statusLine);, +    }, +, +    // Parse response code like "200". Always 3 digits., +    if (statusLine.length() < codeStart + 3) {, +      throw new ProtocolException("Unexpected status line: " + statusLine);, +    }, +      responseCode = Integer.parseInt(statusLine.substring(codeStart, codeStart + 3));, +, +    // Parse an optional response message like "OK" or "Not Modified". If it, +    // exists, it is separated from the response code by a space., +    String responseMessage = "";, +    if (statusLine.length() > codeStart + 3) {, +      if (statusLine.charAt(codeStart + 3) != ' ') {, +        throw new ProtocolException("Unexpected status line: " + statusLine);, +      }, +      responseMessage = statusLine.substring(codeStart + 4);, +    }, +, +    this.responseMessage = responseMessage;, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/StatusLineTest.java, +import java.net.ProtocolException;, +import static junit.framework.Assert.fail;, +, +  // https://github.com/square/okhttp/issues/386, +  @Test public void shoutcast() throws IOException {, +    StatusLine statusLine = new StatusLine("ICY 200 OK");, +    assertEquals("OK", statusLine.message());, +    assertEquals(0, statusLine.httpMinorVersion());, +    assertEquals(200, statusLine.code());, +  }, +, +  @Test public void missingProtocol() throws IOException {, +    assertInvalid("");, +    assertInvalid(" ");, +    assertInvalid("200 OK");, +    assertInvalid(" 200 OK");, +  }, +, +  @Test public void protocolVersions() throws IOException {, +    assertInvalid("HTTP/2.0 200 OK");, +    assertInvalid("HTTP/2.1 200 OK");, +    assertInvalid("HTTP/-.1 200 OK");, +    assertInvalid("HTTP/1.- 200 OK");, +    assertInvalid("HTTP/0.1 200 OK");, +    assertInvalid("HTTP/101 200 OK");, +    assertInvalid("HTTP/1.1_200 OK");, +  }, +, +  @Test public void nonThreeDigitCode() throws IOException {, +    assertInvalid("HTTP/1.1  OK");, +    assertInvalid("HTTP/1.1 2 OK");, +    assertInvalid("HTTP/1.1 20 OK");, +    assertInvalid("HTTP/1.1 2000 OK");]