[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java, +import java.util.Arrays;, +  @Test public void addParsing() {, +    Headers headers = new Headers.Builder(), +        .add("foo: bar"), +        .add(" foo: baz") // Name leading whitespace is trimmed., +        .add("foo : bak") // Name trailing whitespace is trimmed., +        .add("ping:  pong  ") // Value whitespace is trimmed., +        .add("kit:kat") // Space after colon is not required., +        .build();, +    assertEquals(Arrays.asList("bar", "baz", "bak"), headers.values("foo"));, +    assertEquals(Arrays.asList("pong"), headers.values("ping"));, +    assertEquals(Arrays.asList("kat"), headers.values("kit"));, +  }, +, +  @Test public void addThrowsOnEmptyName() {, +    try {, +      new Headers.Builder().add(": bar");, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +    try {, +      new Headers.Builder().add(" : bar");, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @Test public void addThrowsOnNoColon() {, +    try {, +      new Headers.Builder().add("foo bar");, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @Test public void addThrowsOnMultiColon() {, +    try {, +      new Headers.Builder().add(":status: 200 OK");, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java, +import java.util.Arrays;, +  @Test public void addParsing() {, +    Headers headers = new Headers.Builder(), +        .add("foo: bar"), +        .add(" foo: baz") // Name leading whitespace is trimmed., +        .add("foo : bak") // Name trailing whitespace is trimmed., +        .add("ping:  pong  ") // Value whitespace is trimmed., +        .add("kit:kat") // Space after colon is not required., +        .build();, +    assertEquals(Arrays.asList("bar", "baz", "bak"), headers.values("foo"));, +    assertEquals(Arrays.asList("pong"), headers.values("ping"));, +    assertEquals(Arrays.asList("kat"), headers.values("kit"));, +  }, +, +  @Test public void addThrowsOnEmptyName() {, +    try {, +      new Headers.Builder().add(": bar");, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +    try {, +      new Headers.Builder().add(" : bar");, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @Test public void addThrowsOnNoColon() {, +    try {, +      new Headers.Builder().add("foo bar");, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @Test public void addThrowsOnMultiColon() {, +    try {, +      new Headers.Builder().add(":status: 200 OK");, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener) {, +    server = new RealWebSocket(false, client2Server, server2client, random, serverListener) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java, +import java.util.Arrays;, +  @Test public void addParsing() {, +    Headers headers = new Headers.Builder(), +        .add("foo: bar"), +        .add(" foo: baz") // Name leading whitespace is trimmed., +        .add("foo : bak") // Name trailing whitespace is trimmed., +        .add("ping:  pong  ") // Value whitespace is trimmed., +        .add("kit:kat") // Space after colon is not required.]