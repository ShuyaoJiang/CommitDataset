[+++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final Hpack.Reader hpackReader = new Hpack.Reader(4096, bytesIn);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final Hpack.Reader hpackReader = new Hpack.Reader(4096, bytesIn);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java, +  private Hpack.Writer hpackWriter = new Hpack.Writer(bytesOut);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final Hpack.Reader hpackReader = new Hpack.Reader(4096, bytesIn);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java, +  private Hpack.Writer hpackWriter = new Hpack.Writer(bytesOut);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/HpackJsonUtil.java, +  /** Earliest draft that is code-compatible with latest. */, +  private static final int BASE_DRAFT = 9;, +          if (firstStory.getDraft() >= BASE_DRAFT) {, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final Hpack.Reader hpackReader = new Hpack.Reader(4096, bytesIn);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java, +  private Hpack.Writer hpackWriter = new Hpack.Writer(bytesOut);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/HpackJsonUtil.java, +  /** Earliest draft that is code-compatible with latest. */, +  private static final int BASE_DRAFT = 9;, +          if (firstStory.getDraft() >= BASE_DRAFT) {, +++ /dev/null, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http2;, +    Logger logger = Logger.getLogger(Http2.class.getName() + "$FrameLogger");, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java, +  private final Hpack.Reader hpackReader = new Hpack.Reader(4096, bytesIn);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java, +  private Hpack.Writer hpackWriter = new Hpack.Writer(bytesOut);, +++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/HpackJsonUtil.java, +  /** Earliest draft that is code-compatible with latest. */, +  private static final int BASE_DRAFT = 9;, +          if (firstStory.getDraft() >= BASE_DRAFT) {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverHttp2Test.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.http;, +, +import com.squareup.okhttp.Headers;, +import com.squareup.okhttp.Protocol;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.PushPromise;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public class HttpOverHttp2Test extends HttpOverSpdyTest {, +, +  public HttpOverHttp2Test() {, +    super(Protocol.HTTP_2);, +    this.hostHeader = ":authority";, +  }, +, +  @Test public void serverSendsPushPromise_GET() throws Exception {]