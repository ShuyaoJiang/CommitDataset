[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener,, +        "http://example.com/websocket") {, +    server = new RealWebSocket(false, client2Server, server2client, random, serverListener,, +        "http://example.com/websocket") {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener,, +        "http://example.com/websocket") {, +    server = new RealWebSocket(false, client2Server, server2client, random, serverListener,, +        "http://example.com/websocket") {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Cache.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener,, +        "http://example.com/websocket") {, +    server = new RealWebSocket(false, client2Server, server2client, random, serverListener,, +        "http://example.com/websocket") {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Cache.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java, +import com.squareup.okhttp.internal.Util;, +      final WebSocketListener listener, final String url) {, +    final ThreadPoolExecutor pongExecutor = new ThreadPoolExecutor(1, 1, 1, SECONDS,, +        new LinkedBlockingDeque<Runnable>(),, +        Util.threadFactory(String.format("OkHttp %s WebSocket", url), true));, +        pongExecutor.execute(new NamedRunnable("OkHttp %s WebSocket Pong", url) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener,, +        "http://example.com/websocket") {, +    server = new RealWebSocket(false, client2Server, server2client, random, serverListener,, +        "http://example.com/websocket") {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Cache.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java, +import com.squareup.okhttp.internal.Util;, +      final WebSocketListener listener, final String url) {, +    final ThreadPoolExecutor pongExecutor = new ThreadPoolExecutor(1, 1, 1, SECONDS,, +        new LinkedBlockingDeque<Runnable>(),, +        Util.threadFactory(String.format("OkHttp %s WebSocket", url), true));, +        pongExecutor.execute(new NamedRunnable("OkHttp %s WebSocket Pong", url) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/ws/WebSocketCall.java, +        new ConnectionWebSocket(response, connection, source, sink, random, listener);, +    new Thread(new NamedRunnable("OkHttp WebSocket reader %s", request.urlString()) {, +    public ConnectionWebSocket(Response response, Connection connection, BufferedSource source,, +        BufferedSink sink, Random random, WebSocketListener listener) {, +      super(true /* is client */, source, sink, random, listener, response.request().urlString());]