[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +    /** This peer's supported protocols. */, +    /** Set when remote peer notifies NPN is unsupported. */, +    /** The protocol the client selected. */, +        return true; // Client supports NPN., +        this.unsupported = true; // Remote peer doesn't support NPN., +        return protocols; // Server advertises these protocols., +      } else if (methodName.equals("selectProtocol") // Called when client., +        List<String> serverProtocols = (List) args[0];, +        // Pick the first protocol the server advertises and client knows., +        for (int i = 0, size = serverProtocols.size(); i < size; i++) {, +          if (protocols.contains(serverProtocols.get(i))) {, +            return selected = serverProtocols.get(i);, +          }, +        }, +        // On no intersection, try client's first protocol., +        return selected = protocols.get(0);, +        this.selected = (String) args[0]; // Client selected this protocol., +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +    /** This peer's supported protocols. */, +    /** Set when remote peer notifies NPN is unsupported. */, +    /** The protocol the client selected. */, +        return true; // Client supports NPN., +        this.unsupported = true; // Remote peer doesn't support NPN., +        return protocols; // Server advertises these protocols., +      } else if (methodName.equals("selectProtocol") // Called when client., +        List<String> serverProtocols = (List) args[0];, +        // Pick the first protocol the server advertises and client knows., +        for (int i = 0, size = serverProtocols.size(); i < size; i++) {, +          if (protocols.contains(serverProtocols.get(i))) {, +            return selected = serverProtocols.get(i);, +          }, +        }, +        // On no intersection, try client's first protocol., +        return selected = protocols.get(0);, +        this.selected = (String) args[0]; // Client selected this protocol., +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/ExternalHttp2Example.java, +import java.util.List;, +import static com.squareup.okhttp.internal.http.OkHeaders.SELECTED_PROTOCOL;, +, +    List<String> protocolValues = connection.getHeaderFields().get(SELECTED_PROTOCOL);, +    // If null, probably you didn't add jetty's npn jar to your boot classpath!, +    if (protocolValues != null && !protocolValues.isEmpty()) {, +      System.out.println("PROTOCOL " + protocolValues.get(0));, +    }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +    /** This peer's supported protocols. */, +    /** Set when remote peer notifies NPN is unsupported. */, +    /** The protocol the client selected. */, +        return true; // Client supports NPN., +        this.unsupported = true; // Remote peer doesn't support NPN., +        return protocols; // Server advertises these protocols., +      } else if (methodName.equals("selectProtocol") // Called when client., +        List<String> serverProtocols = (List) args[0];, +        // Pick the first protocol the server advertises and client knows., +        for (int i = 0, size = serverProtocols.size(); i < size; i++) {, +          if (protocols.contains(serverProtocols.get(i))) {, +            return selected = serverProtocols.get(i);, +          }, +        }, +        // On no intersection, try client's first protocol., +        return selected = protocols.get(0);, +        this.selected = (String) args[0]; // Client selected this protocol., +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/ExternalHttp2Example.java, +import java.util.List;, +import static com.squareup.okhttp.internal.http.OkHeaders.SELECTED_PROTOCOL;, +, +    List<String> protocolValues = connection.getHeaderFields().get(SELECTED_PROTOCOL);, +    // If null, probably you didn't add jetty's npn jar to your boot classpath!, +    if (protocolValues != null && !protocolValues.isEmpty()) {, +      System.out.println("PROTOCOL " + protocolValues.get(0));, +    }, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/ExternalSpdyExample.java, +import java.util.List;, +import static com.squareup.okhttp.internal.http.OkHeaders.SELECTED_PROTOCOL;, +, +    List<String> protocolValues = connection.getHeaderFields().get(SELECTED_PROTOCOL);, +    // If null, probably you didn't add jetty's npn jar to your boot classpath!, +    if (protocolValues != null && !protocolValues.isEmpty()) {, +      System.out.println("PROTOCOL " + protocolValues.get(0));, +    }]