[+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +  @Test public void unplannedCloseHandledByCloseWithoutFailure() {, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +    newWebSocket();, +, +    clientListener.assertOpen();, +    WebSocket server = serverListener.assertOpen();, +    clientListener.setNextEventDelegate(new WebSocketListener() {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +        webSocket.close(1000, null);, +      }, +    });, +, +    server.close(1001, "bye");, +    clientListener.assertClosed(1001, "bye");, +    clientListener.assertExhausted();, +    serverListener.assertClosing(1000,  "");, +    serverListener.assertClosed(1000,  "");, +    serverListener.assertExhausted();, +  }, +, +  @Test public void unplannedCloseHandledWithoutFailure() {, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +    newWebSocket();, +, +    clientListener.assertOpen();, +    WebSocket server = serverListener.assertOpen();, +, +    server.close(1001, "bye");, +    clientListener.assertClosing(1001, "bye");, +    clientListener.assertExhausted();, +    serverListener.assertExhausted();, +  }, +, +  @Test public void clientTimeoutClosesBody() {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +  @Test public void unplannedCloseHandledByCloseWithoutFailure() {, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +    newWebSocket();, +, +    clientListener.assertOpen();, +    WebSocket server = serverListener.assertOpen();, +    clientListener.setNextEventDelegate(new WebSocketListener() {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +        webSocket.close(1000, null);, +      }, +    });, +, +    server.close(1001, "bye");, +    clientListener.assertClosed(1001, "bye");, +    clientListener.assertExhausted();, +    serverListener.assertClosing(1000,  "");, +    serverListener.assertClosed(1000,  "");, +    serverListener.assertExhausted();, +  }, +, +  @Test public void unplannedCloseHandledWithoutFailure() {, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +    newWebSocket();, +, +    clientListener.assertOpen();, +    WebSocket server = serverListener.assertOpen();, +, +    server.close(1001, "bye");, +    clientListener.assertClosing(1001, "bye");, +    clientListener.assertExhausted();, +    serverListener.assertExhausted();, +  }, +, +  @Test public void clientTimeoutClosesBody() {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, +  @Test public void closeIncompleteCallsCallback() throws IOException {, +    data.write(ByteString.decodeHex("880703e948656c6c6f")); // Close with code and reason, +    data.close();, +    clientReader.processNextFrame();, +    callback.assertClosing(1001, "Hello");, +  }, +]