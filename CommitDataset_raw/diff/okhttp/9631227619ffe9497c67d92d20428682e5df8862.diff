[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    return new RecordedResponse(request, response, null, response.body().string(), null);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    return new RecordedResponse(request, response, null, response.body().string(), null);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +import com.squareup.okhttp.internal.ws.WebSocket;, +public final class RecordedResponse {, +  public final WebSocket webSocket;, +  public RecordedResponse(Request request, Response response, WebSocket webSocket, String body,, +      IOException failure) {, +    this.webSocket = webSocket;, +    return new RecordedResponse(priorResponse.request(), priorResponse, null, null, null);, +    return new RecordedResponse(networkResponse.request(), networkResponse, null, null, null);, +    return new RecordedResponse(cacheResponse.request(), cacheResponse, null, null, null);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    return new RecordedResponse(request, response, null, response.body().string(), null);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +import com.squareup.okhttp.internal.ws.WebSocket;, +public final class RecordedResponse {, +  public final WebSocket webSocket;, +  public RecordedResponse(Request request, Response response, WebSocket webSocket, String body,, +      IOException failure) {, +    this.webSocket = webSocket;, +    return new RecordedResponse(priorResponse.request(), priorResponse, null, null, null);, +    return new RecordedResponse(networkResponse.request(), networkResponse, null, null, null);, +    return new RecordedResponse(cacheResponse.request(), cacheResponse, null, null, null);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java, +    responses.add(new RecordedResponse(request, null, null, null, e));, +    responses.add(new RecordedResponse(response.request(), response, null, buffer.readUtf8(), null));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    return new RecordedResponse(request, response, null, response.body().string(), null);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +import com.squareup.okhttp.internal.ws.WebSocket;, +public final class RecordedResponse {, +  public final WebSocket webSocket;, +  public RecordedResponse(Request request, Response response, WebSocket webSocket, String body,, +      IOException failure) {, +    this.webSocket = webSocket;, +    return new RecordedResponse(priorResponse.request(), priorResponse, null, null, null);, +    return new RecordedResponse(networkResponse.request(), networkResponse, null, null, null);, +    return new RecordedResponse(cacheResponse.request(), cacheResponse, null, null, null);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java, +    responses.add(new RecordedResponse(request, null, null, null, e));, +    responses.add(new RecordedResponse(response.request(), response, null, buffer.readUtf8(), null));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.ws;, +, +import java.io.IOException;, +import java.net.ProtocolException;, +import java.util.Random;, +import okio.Buffer;, +import okio.BufferedSink;, +import okio.ByteString;, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType.BINARY;, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType.TEXT;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +public final class RealWebSocketTest {, +  // NOTE: Types are named 'client' and 'server' for cognitive simplicity. This differentiation has, +  // zero effect on the behavior of the WebSocket API which is why tests are only written once, +  // from the perspective of a single peer., +, +  private RealWebSocket client;, +  private boolean clientConnectionClosed;, +  private final Buffer client2Server = new Buffer();, +  private final WebSocketRecorder clientListener = new WebSocketRecorder();, +, +  private RealWebSocket server;, +  private final Buffer server2client = new Buffer();, +  private final WebSocketRecorder serverListener = new WebSocketRecorder();, +, +  @Before public void setUp() {, +    Random random = new Random(0);, +, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener) {, +      @Override protected void closeConnection() throws IOException {, +        clientConnectionClosed = true;, +      }]