[+++ b/src/main/java/com/squareup/okhttp/internal/spdy/Settings.java, +    /**, +     * From the spdy/3 spec, the default initial window size for all streams is, +     * 64 KiB. (Chrome 25 uses 10 MiB)., +     */, +++ b/src/main/java/com/squareup/okhttp/internal/spdy/Settings.java, +    /**, +     * From the spdy/3 spec, the default initial window size for all streams is, +     * 64 KiB. (Chrome 25 uses 10 MiB)., +     */, +++ b/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +                stream = new SpdyStream(streamId, this, flags, priority, slot, requestHeaders,, +                        settings);, +            final SpdyStream synStream;, +                synStream = new SpdyStream(streamId, SpdyConnection.this, flags, priority, slot,, +                        nameValueBlock, settings);, +            SpdyStream[] streamsToNotify = null;, +                if (!streams.isEmpty()) {, +                    streamsToNotify = streams.values().toArray(new SpdyStream[streams.size()]);, +                }, +            }, +            if (streamsToNotify != null) {, +                for (SpdyStream stream : streamsToNotify) {, +                    // The synchronization here is ugly. We need to synchronize on 'this' to guard, +                    // reads to 'settings'. We synchronize on 'stream' to guard the state change., +                    // And we need to acquire the 'stream' lock first, since that may block., +                    synchronized (stream) {, +                        synchronized (this) {, +                            stream.receiveSettings(settings);, +                        }, +                    }, +                }, +            SpdyStream stream = getStream(streamId);, +            if (stream != null) {, +                stream.receiveWindowUpdate(deltaWindowSize);, +            }, +++ b/src/main/java/com/squareup/okhttp/internal/spdy/Settings.java, +    /**, +     * From the spdy/3 spec, the default initial window size for all streams is, +     * 64 KiB. (Chrome 25 uses 10 MiB)., +     */, +++ b/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +                stream = new SpdyStream(streamId, this, flags, priority, slot, requestHeaders,, +                        settings);, +            final SpdyStream synStream;, +                synStream = new SpdyStream(streamId, SpdyConnection.this, flags, priority, slot,, +                        nameValueBlock, settings);, +            SpdyStream[] streamsToNotify = null;, +                if (!streams.isEmpty()) {, +                    streamsToNotify = streams.values().toArray(new SpdyStream[streams.size()]);, +                }, +            }, +            if (streamsToNotify != null) {, +                for (SpdyStream stream : streamsToNotify) {, +                    // The synchronization here is ugly. We need to synchronize on 'this' to guard, +                    // reads to 'settings'. We synchronize on 'stream' to guard the state change., +                    // And we need to acquire the 'stream' lock first, since that may block., +                    synchronized (stream) {, +                        synchronized (this) {, +                            stream.receiveSettings(settings);, +                        }, +                    }, +                }, +            SpdyStream stream = getStream(streamId);, +            if (stream != null) {, +                stream.receiveWindowUpdate(deltaWindowSize);, +            }, +++ b/src/main/java/com/squareup/okhttp/internal/spdy/SpdyReader.java, +            int idFlags = (w1 & 0xff000000) >>> 24;, +            int id = w1 & 0xffffff;, +++ b/src/main/java/com/squareup/okhttp/internal/spdy/Settings.java, +    /**, +     * From the spdy/3 spec, the default initial window size for all streams is, +     * 64 KiB. (Chrome 25 uses 10 MiB)., +     */, +++ b/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +                stream = new SpdyStream(streamId, this, flags, priority, slot, requestHeaders,, +                        settings);, +            final SpdyStream synStream;, +                synStream = new SpdyStream(streamId, SpdyConnection.this, flags, priority, slot,, +                        nameValueBlock, settings);, +            SpdyStream[] streamsToNotify = null;, +                if (!streams.isEmpty()) {, +                    streamsToNotify = streams.values().toArray(new SpdyStream[streams.size()]);, +                }, +            }, +            if (streamsToNotify != null) {, +                for (SpdyStream stream : streamsToNotify) {, +                    // The synchronization here is ugly. We need to synchronize on 'this' to guard, +                    // reads to 'settings'. We synchronize on 'stream' to guard the state change., +                    // And we need to acquire the 'stream' lock first, since that may block., +                    synchronized (stream) {, +                        synchronized (this) {, +                            stream.receiveSettings(settings);, +                        }, +                    }, +                }, +            SpdyStream stream = getStream(streamId);, +            if (stream != null) {, +                stream.receiveWindowUpdate(deltaWindowSize);]