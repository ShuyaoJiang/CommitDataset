[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +, +    // Ensure the test has released all connections., +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().connectionCount());, +, +    callback.await(request.url()).assertSuccessful();, +    try (Response response = call.execute()) {, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +, +    // Ensure the test has released all connections., +    client.connectionPool().evictAll();, +    assertEquals(0, client.connectionPool().connectionCount());, +, +    callback.await(request.url()).assertSuccessful();, +    try (Response response = call.execute()) {, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    client = client.newBuilder(), +        // Since this test knowingly leaks a connection, avoid using the default shared connection, +        // pool, which should remain clean for subsequent tests., +        .connectionPool(new ConnectionPool()), +        .addNetworkInterceptor(, +            new Interceptor() {, +              @Override, +              public Response intercept(Chain chain) throws IOException {, +                return response, +                    .newBuilder(), +            }), +        .build();]