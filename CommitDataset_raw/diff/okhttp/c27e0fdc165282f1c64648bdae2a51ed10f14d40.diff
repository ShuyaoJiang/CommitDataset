[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().configureTlsExtensions(sslSocket, null, spdyProtocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().configureTlsExtensions(sslSocket, null, spdyProtocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            Platform.get().configureTlsExtensions(sslSocket, null, protocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().configureTlsExtensions(sslSocket, null, spdyProtocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            Platform.get().configureTlsExtensions(sslSocket, null, protocols);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    Route httpRoute = new Route(httpAddress, Proxy.NO_PROXY, httpSocketAddress,, +        TlsConfiguration.PREFERRED);, +    Route spdyRoute = new Route(spdyAddress, Proxy.NO_PROXY, spdySocketAddress,, +        TlsConfiguration.PREFERRED);, +    connection = new Connection(pool, new Route(httpAddress, Proxy.NO_PROXY, httpSocketAddress,, +        TlsConfiguration.PREFERRED));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().configureTlsExtensions(sslSocket, null, spdyProtocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            Platform.get().configureTlsExtensions(sslSocket, null, protocols);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    Route httpRoute = new Route(httpAddress, Proxy.NO_PROXY, httpSocketAddress,, +        TlsConfiguration.PREFERRED);, +    Route spdyRoute = new Route(spdyAddress, Proxy.NO_PROXY, spdySocketAddress,, +        TlsConfiguration.PREFERRED);, +    connection = new Connection(pool, new Route(httpAddress, Proxy.NO_PROXY, httpSocketAddress,, +        TlsConfiguration.PREFERRED));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.TlsConfiguration;, +        uriPort, TlsConfiguration.FALLBACK);, +        uriPort, TlsConfiguration.FALLBACK);, +        proxyAPort, TlsConfiguration.FALLBACK);, +        proxyAPort, TlsConfiguration.FALLBACK);, +        uriPort, TlsConfiguration.FALLBACK);, +        uriPort, TlsConfiguration.FALLBACK);, +        uriPort, TlsConfiguration.FALLBACK);, +        uriPort, TlsConfiguration.FALLBACK);, +        uriPort, TlsConfiguration.FALLBACK);, +        TlsConfiguration.FALLBACK);, +        TlsConfiguration.FALLBACK);, +        TlsConfiguration.FALLBACK);, +        TlsConfiguration.FALLBACK);, +        TlsConfiguration.FALLBACK);, +    assertConnection(routeSelector.nextUnconnected(), address, proxyA, dns.inetAddresses[0],, +        proxyAPort, TlsConfiguration.FALLBACK);, +    assertConnection(routeSelector.nextUnconnected(), address, proxyA, dns.inetAddresses[0],, +        proxyAPort, TlsConfiguration.FALLBACK);, +    assertConnection(routeSelector.nextUnconnected(), address, NO_PROXY, dns.inetAddresses[0],, +        uriPort, TlsConfiguration.FALLBACK);, +    assertEquals(RouteSelector.TLS_CONFIGURATIONS.size(), routeDatabase.failedRoutesCount());, +        proxyAPort, TlsConfiguration.PREFERRED);, +        proxyAPort, TlsConfiguration.FALLBACK);, +        proxyAPort, TlsConfiguration.PREFERRED);, +        proxyAPort, TlsConfiguration.FALLBACK);, +        proxyBPort, TlsConfiguration.PREFERRED);, +        proxyBPort, TlsConfiguration.FALLBACK);, +        proxyBPort, TlsConfiguration.PREFERRED);, +        proxyBPort, TlsConfiguration.FALLBACK);, +        uriPort, TlsConfiguration.PREFERRED);, +        uriPort, TlsConfiguration.FALLBACK);, +        uriPort, TlsConfiguration.PREFERRED);, +        uriPort, TlsConfiguration.FALLBACK);, +      InetAddress socketAddress, int socketPort, TlsConfiguration tlsConfiguration) {, +    assertEquals(tlsConfiguration, connection.getRoute().getTlsConfiguration());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().configureTlsExtensions(sslSocket, null, spdyProtocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            Platform.get().configureTlsExtensions(sslSocket, null, protocols);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    Route httpRoute = new Route(httpAddress, Proxy.NO_PROXY, httpSocketAddress,, +        TlsConfiguration.PREFERRED);, +    Route spdyRoute = new Route(spdyAddress, Proxy.NO_PROXY, spdySocketAddress,, +        TlsConfiguration.PREFERRED);, +    connection = new Connection(pool, new Route(httpAddress, Proxy.NO_PROXY, httpSocketAddress,, +        TlsConfiguration.PREFERRED));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.TlsConfiguration;, +        uriPort, TlsConfiguration.FALLBACK);, +        uriPort, TlsConfiguration.FALLBACK);, +        proxyAPort, TlsConfiguration.FALLBACK);, +        proxyAPort, TlsConfiguration.FALLBACK);, +        uriPort, TlsConfiguration.FALLBACK);, +        uriPort, TlsConfiguration.FALLBACK);, +        uriPort, TlsConfiguration.FALLBACK);, +        uriPort, TlsConfiguration.FALLBACK);, +        uriPort, TlsConfiguration.FALLBACK);, +        TlsConfiguration.FALLBACK);, +        TlsConfiguration.FALLBACK);, +        TlsConfiguration.FALLBACK);, +        TlsConfiguration.FALLBACK);, +        TlsConfiguration.FALLBACK);, +    assertConnection(routeSelector.nextUnconnected(), address, proxyA, dns.inetAddresses[0],, +        proxyAPort, TlsConfiguration.FALLBACK);, +    assertConnection(routeSelector.nextUnconnected(), address, proxyA, dns.inetAddresses[0],, +        proxyAPort, TlsConfiguration.FALLBACK);, +    assertConnection(routeSelector.nextUnconnected(), address, NO_PROXY, dns.inetAddresses[0],, +        uriPort, TlsConfiguration.FALLBACK);, +    assertEquals(RouteSelector.TLS_CONFIGURATIONS.size(), routeDatabase.failedRoutesCount());, +        proxyAPort, TlsConfiguration.PREFERRED);]