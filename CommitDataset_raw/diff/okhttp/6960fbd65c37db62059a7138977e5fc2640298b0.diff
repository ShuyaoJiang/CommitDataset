[+++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HpackTest.java, +    List<Header> headerBlock =, +        headerEntries(, +            "custom-foo", "custom-header",, +            "custom-bar", "custom-header",, +            "custom-baz", "custom-header");, +, +    // Use a new Writer because we don't support change the dynamic table, +    // size after Writer constructed., +    Hpack.Writer writer = new Hpack.Writer(110, bytesOut);, +    writer.writeHeaders(headerBlock);, +, +    assertEquals(bytesIn, bytesOut);, +    assertEquals(2, writer.headerCount);, +, +    int tableLength = writer.dynamicTable.length;, +    Header entry = writer.dynamicTable[tableLength - 1];, +    checkEntry(entry, "custom-bar", "custom-header", 55);, +, +    entry = writer.dynamicTable[tableLength - 2];, +    checkEntry(entry, "custom-baz", "custom-header", 55);, +, +    // Set to only support 110 bytes (enough for 2 headers)., +    entry = hpackReader.dynamicTable[readerHeaderTableLength() - 1];, +    entry = hpackReader.dynamicTable[readerHeaderTableLength() - 2];, +    assertEquals(headerBlock, hpackReader.getAndResetHeaderList());, +    Header entry = hpackReader.dynamicTable[readerHeaderTableLength() - 1];, +    Header entry = hpackReader.dynamicTable[readerHeaderTableLength() - 1];, +    List<Header> headerBlock = headerEntries("custom-key", "custom-header");, +, +    assertEquals(headerBlock, hpackReader.getAndResetHeaderList());, +  }, +, +  @Test public void literalHeaderFieldWithIncrementalIndexingIndexedName() throws IOException {, +    List<Header> headerBlock = headerEntries(":path", "/sample/path");, +, +    bytesIn.writeByte(0x44); // Indexed name (idx = 4) -> :path, +    bytesIn.writeByte(0x0c); // Literal value (len = 12), +    bytesIn.writeUtf8("/sample/path");, +, +    hpackReader.readHeaders();, +, +    assertEquals(1, hpackReader.headerCount);, +, +    assertEquals(headerBlock, hpackReader.getAndResetHeaderList());, +  }, +, +  @Test public void literalHeaderFieldWithIncrementalIndexingNewName() throws IOException {, +    List<Header> headerBlock = headerEntries("custom-key", "custom-header");, +, +    bytesIn.writeByte(0x40); // Never indexed, +    bytesIn.writeByte(0x0a); // Literal name (len = 10), +    bytesIn.writeUtf8("custom-key");, +, +    bytesIn.writeByte(0x0d); // Literal value (len = 13), +    bytesIn.writeUtf8("custom-header");, +, +    hpackWriter.writeHeaders(headerBlock);, +    assertEquals(bytesIn, bytesOut);, +, +    assertEquals(1, hpackWriter.headerCount);, +, +    Header entry = hpackWriter.dynamicTable[hpackWriter.dynamicTable.length - 1];, +    checkEntry(entry, "custom-key", "custom-header", 55);, +, +    hpackReader.readHeaders();, +, +    assertEquals(1, hpackReader.headerCount);, +, +    assertEquals(headerBlock, hpackReader.getAndResetHeaderList());, +  }, +, +  @Test public void theSameHeaderAfterOneIncrementalIndexed() throws IOException {, +    List<Header> headerBlock =, +        headerEntries(, +            "custom-key", "custom-header",, +            "custom-key", "custom-header");, +, +    bytesIn.writeByte(0x40); // Never indexed, +    bytesIn.writeByte(0x0a); // Literal name (len = 10), +    bytesIn.writeUtf8("custom-key");, +, +    bytesIn.writeByte(0x0d); // Literal value (len = 13), +    bytesIn.writeUtf8("custom-header");, +, +    bytesIn.writeByte(0xbe); // Indexed name and value (idx = 63), +, +    hpackWriter.writeHeaders(headerBlock);, +    assertEquals(bytesIn, bytesOut);, +, +    assertEquals(1, hpackWriter.headerCount);, +, +    Header entry = hpackWriter.dynamicTable[hpackWriter.dynamicTable.length - 1];, +    checkEntry(entry, "custom-key", "custom-header", 55);, +, +    hpackReader.readHeaders();, +, +    assertEquals(1, hpackReader.headerCount);, +, +    assertEquals(headerBlock, hpackReader.getAndResetHeaderList());]