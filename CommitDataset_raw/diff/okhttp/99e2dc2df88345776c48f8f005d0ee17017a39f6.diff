[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +    String method = request.method();, +    if (method.equals("POST") || method.equals("PUT") || method.equals("DELETE")) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +    String method = request.method();, +    if (method.equals("POST") || method.equals("PUT") || method.equals("DELETE")) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +    String method = request.method();, +    return method.equals("POST") || method.equals("PUT") || method.equals("PATCH");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +    String method = request.method();, +    if (method.equals("POST") || method.equals("PUT") || method.equals("DELETE")) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +    String method = request.method();, +    return method.equals("POST") || method.equals("PUT") || method.equals("PATCH");, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +    String method = request.method();, +    if (method.equals("POST") || method.equals("PUT") || method.equals("DELETE")) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +    String method = request.method();, +    return method.equals("POST") || method.equals("PUT") || method.equals("PATCH");, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +        } else if (!method.equals("POST") && !method.equals("PUT") && !method.equals("PATCH")) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +    String method = request.method();, +    if (method.equals("POST") || method.equals("PUT") || method.equals("DELETE")) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +    String method = request.method();, +    return method.equals("POST") || method.equals("PUT") || method.equals("PATCH");, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +        } else if (!method.equals("POST") && !method.equals("PUT") && !method.equals("PATCH")) {, +++ b/okio/src/main/java/okio/RealBufferedSink.java, +    // Emit buffered data to the underlying sink. If this fails, we still need, +    // to close the sink; otherwise we risk leaking resources., +    } catch (Throwable e) {, +    try {, +    } catch (Throwable e) {, +      if (thrown == null) thrown = e;, +    }, +    if (thrown != null) Util.sneakyRethrow(thrown);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +    String method = request.method();, +    if (method.equals("POST") || method.equals("PUT") || method.equals("DELETE")) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +    String method = request.method();, +    return method.equals("POST") || method.equals("PUT") || method.equals("PATCH");, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +        } else if (!method.equals("POST") && !method.equals("PUT") && !method.equals("PATCH")) {, +++ b/okio/src/main/java/okio/RealBufferedSink.java, +    // Emit buffered data to the underlying sink. If this fails, we still need, +    // to close the sink; otherwise we risk leaking resources., +    } catch (Throwable e) {, +    try {, +    } catch (Throwable e) {, +      if (thrown == null) thrown = e;, +    }, +    if (thrown != null) Util.sneakyRethrow(thrown);, +++ b/okio/src/main/java/okio/Util.java, +, +  /**, +   * Throws {@code t}, even if the declared throws clause doesn't permit it., +   * This is a terrible – but terribly convenient – hack that makes it easy to, +   * catch and rethrow exceptions after cleanup. See Java Puzzlers #43., +   */, +  public static void sneakyRethrow(Throwable t) {, +    Util.<Error>sneakyThrow2(t);, +  }, +, +  @SuppressWarnings("unchecked"), +  private static <T extends Throwable> void sneakyThrow2(Throwable t) throws T {, +    throw (T) t;, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +    String method = request.method();, +    if (method.equals("POST") || method.equals("PUT") || method.equals("DELETE")) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +    String method = request.method();, +    return method.equals("POST") || method.equals("PUT") || method.equals("PATCH");, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +        } else if (!method.equals("POST") && !method.equals("PUT") && !method.equals("PATCH")) {, +++ b/okio/src/main/java/okio/RealBufferedSink.java, +    // Emit buffered data to the underlying sink. If this fails, we still need, +    // to close the sink; otherwise we risk leaking resources., +    } catch (Throwable e) {, +    try {, +    } catch (Throwable e) {, +      if (thrown == null) thrown = e;]