[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/ByteString.java, +    if (ascii == this.utf8) {, +      return true;, +    }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/ByteString.java, +    if (ascii == this.utf8) {, +      return true;, +    }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +     * (highest) thru 2^31-1 (lowest), defaulting to 2^30., +        int priority, List<Header> headerBlock, HeadersMode headersMode);, +, +    /**, +     *  Read a connection-level ping from the peer.  {@code ack} indicates this, +     *  is a reply.  Payload parameters are different between SPDY/3 and HTTP/2., +     *  <p/>, +     *  In SPDY/3, only the first {@code payload1} parameter is set.  If the, +     *  reader is a client, it is an unsigned even number.  Likewise, a server, +     *  will receive an odd number., +     *  <p/>, +     *  In HTTP/2, both {@code payload1} and {@code payload2} parameters are, +     *  set. The data is opaque binary, and there are no rules on the content., +     */, +    void ping(boolean ack, int payload1, int payload2);, +, +    /**, +     * HTTP/2 only. Receive a push promise header block., +     * <p/>, +     * A push promise contains all the headers that pertain to a server-initiated, +     * request, and a {@code promisedStreamId} to which response frames will be, +     * delivered. Push promise frames are sent as a part of the response to, +     * {@code streamId}.  The {@code promisedStreamId} has a priority of one, +     * greater than {@code streamId}., +     *, +     * @param streamId client-initiated stream ID.  Must be an odd number., +     * @param promisedStreamId server-initiated stream ID.  Must be an even, +     * number., +     * @param requestHeaders minimally includes {@code :method}, {@code :scheme},, +     * {@code :authority}, and (@code :path}., +     */, +    void pushPromise(int streamId, int promisedStreamId, List<Header> requestHeaders), +        throws IOException;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/ByteString.java, +    if (ascii == this.utf8) {, +      return true;, +    }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +     * (highest) thru 2^31-1 (lowest), defaulting to 2^30., +        int priority, List<Header> headerBlock, HeadersMode headersMode);, +, +    /**, +     *  Read a connection-level ping from the peer.  {@code ack} indicates this, +     *  is a reply.  Payload parameters are different between SPDY/3 and HTTP/2., +     *  <p/>, +     *  In SPDY/3, only the first {@code payload1} parameter is set.  If the, +     *  reader is a client, it is an unsigned even number.  Likewise, a server, +     *  will receive an odd number., +     *  <p/>, +     *  In HTTP/2, both {@code payload1} and {@code payload2} parameters are, +     *  set. The data is opaque binary, and there are no rules on the content., +     */, +    void ping(boolean ack, int payload1, int payload2);, +, +    /**, +     * HTTP/2 only. Receive a push promise header block., +     * <p/>, +     * A push promise contains all the headers that pertain to a server-initiated, +     * request, and a {@code promisedStreamId} to which response frames will be, +     * delivered. Push promise frames are sent as a part of the response to, +     * {@code streamId}.  The {@code promisedStreamId} has a priority of one, +     * greater than {@code streamId}., +     *, +     * @param streamId client-initiated stream ID.  Must be an odd number., +     * @param promisedStreamId server-initiated stream ID.  Must be an even, +     * number., +     * @param requestHeaders minimally includes {@code :method}, {@code :scheme},, +     * {@code :authority}, and (@code :path}., +     */, +    void pushPromise(int streamId, int promisedStreamId, List<Header> requestHeaders), +        throws IOException;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +  /**, +   * HTTP/2 only. Send a push promise header block., +   * <p/>, +   * A push promise contains all the headers that pertain to a server-initiated, +   * request, and a {@code promisedStreamId} to which response frames will be, +   * delivered. Push promise frames are sent as a part of the response to, +   * {@code streamId}.  The {@code promisedStreamId} has a priority of one, +   * greater than {@code streamId}., +   *, +   * @param streamId client-initiated stream ID.  Must be an odd number., +   * @param promisedStreamId server-initiated stream ID.  Must be an even, +   * number., +   * @param requestHeaders minimally includes {@code :method}, {@code :scheme},, +   * {@code :authority}, and (@code :path}., +   */, +  void pushPromise(int streamId, int promisedStreamId, List<Header> requestHeaders), +      throws IOException;, +, +      int priority, int slot, List<Header> headerBlock) throws IOException;]