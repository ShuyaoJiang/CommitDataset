[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    assertCached(true, 302);, +    assertCached(false, 303);, +    assertCached(false, 304);, +    assertCached(false, 305);, +    assertCached(false, 306);, +    assertCached(true, 307);, +  @Test public void foundCachedWithExpiresHeader() throws Exception {, +    temporaryRedirectCachedWithCachingHeader(302, "Expires", formatDate(1, TimeUnit.HOURS));, +  }, +, +  @Test public void foundCachedWithCacheControlHeader() throws Exception {, +    temporaryRedirectCachedWithCachingHeader(302, "Cache-Control", "max-age=60");, +  }, +, +  @Test public void temporaryRedirectCachedWithExpiresHeader() throws Exception {, +    temporaryRedirectCachedWithCachingHeader(307, "Expires", formatDate(1, TimeUnit.HOURS));, +  }, +, +  @Test public void temporaryRedirectCachedWithCacheControlHeader() throws Exception {, +    temporaryRedirectCachedWithCachingHeader(307, "Cache-Control", "max-age=60");, +  }, +, +  @Test public void foundNotCachedWithoutCacheHeader() throws Exception {, +    temporaryRedirectNotCachedWithoutCachingHeader(302);, +  }, +, +  @Test public void temporaryRedirectNotCachedWithoutCacheHeader() throws Exception {, +    temporaryRedirectNotCachedWithoutCachingHeader(307);, +  }, +, +  private void temporaryRedirectCachedWithCachingHeader(, +      int responseCode, String headerName, String headerValue) throws Exception {, +    server.enqueue(new MockResponse(), +        .setResponseCode(responseCode), +        .addHeader(headerName, headerValue), +        .addHeader("Location", "/a"));, +    server.enqueue(new MockResponse(), +        .addHeader(headerName, headerValue), +        .setBody("a"));, +    server.enqueue(new MockResponse(), +        .setBody("b"));, +    server.enqueue(new MockResponse(), +        .setBody("c"));, +, +    URL url = server.getUrl("/");, +    assertEquals("a", get(url).body().string());, +    assertEquals("a", get(url).body().string());, +  }, +, +  private void temporaryRedirectNotCachedWithoutCachingHeader(int responseCode) throws Exception {, +    server.enqueue(new MockResponse(), +        .setResponseCode(responseCode), +        .addHeader("Location", "/a"));, +    server.enqueue(new MockResponse(), +        .setBody("a"));, +    server.enqueue(new MockResponse(), +        .setBody("b"));, +, +    URL url = server.getUrl("/");, +    assertEquals("a", get(url).body().string());, +    assertEquals("b", get(url).body().string());, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    assertCached(true, 302);, +    assertCached(false, 303);, +    assertCached(false, 304);, +    assertCached(false, 305);, +    assertCached(false, 306);, +    assertCached(true, 307);, +  @Test public void foundCachedWithExpiresHeader() throws Exception {, +    temporaryRedirectCachedWithCachingHeader(302, "Expires", formatDate(1, TimeUnit.HOURS));, +  }, +, +  @Test public void foundCachedWithCacheControlHeader() throws Exception {, +    temporaryRedirectCachedWithCachingHeader(302, "Cache-Control", "max-age=60");, +  }, +, +  @Test public void temporaryRedirectCachedWithExpiresHeader() throws Exception {, +    temporaryRedirectCachedWithCachingHeader(307, "Expires", formatDate(1, TimeUnit.HOURS));, +  }, +, +  @Test public void temporaryRedirectCachedWithCacheControlHeader() throws Exception {, +    temporaryRedirectCachedWithCachingHeader(307, "Cache-Control", "max-age=60");, +  }, +, +  @Test public void foundNotCachedWithoutCacheHeader() throws Exception {, +    temporaryRedirectNotCachedWithoutCachingHeader(302);, +  }, +, +  @Test public void temporaryRedirectNotCachedWithoutCacheHeader() throws Exception {, +    temporaryRedirectNotCachedWithoutCachingHeader(307);, +  }, +, +  private void temporaryRedirectCachedWithCachingHeader(, +      int responseCode, String headerName, String headerValue) throws Exception {, +    server.enqueue(new MockResponse(), +        .setResponseCode(responseCode), +        .addHeader(headerName, headerValue)]