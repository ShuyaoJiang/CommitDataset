[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +  private static final Variant HTTP_2 = new Http20Draft12();, +    peer.setVariantAndClient(HTTP_2, false);, +    connection(peer, HTTP_2);, +    peer.setVariantAndClient(HTTP_2, false);, +    SpdyConnection connection = connection(peer, HTTP_2);, +    peer.setVariantAndClient(HTTP_2, false);, +    SpdyConnection connection = connection(peer, HTTP_2);, +    receiveGoAway(HTTP_2);, +    connection.ping().roundTripTime(); // Ensure the GO_AWAY that resets stream2 has been received., +    assertTrue(stream1.isOpen());, +    assertFalse(stream2.isOpen());, +    readSendsWindowUpdate(HTTP_2);, +    serverSendsEmptyDataClientDoesntSendWindowUpdate(HTTP_2);, +    clientSendsEmptyDataServerDoesntSendWindowUpdate(HTTP_2);, +    int framesThatFillWindow = roundUp(DEFAULT_INITIAL_WINDOW_SIZE, HTTP_2.maxFrameSize());, +    int framesThatFillWindow = roundUp(DEFAULT_INITIAL_WINDOW_SIZE, HTTP_2.maxFrameSize());, +    peer.setVariantAndClient(HTTP_2, false);, +    byte[] buff = new byte[HTTP_2.maxFrameSize() + 1];, +    SpdyConnection connection = connection(peer, HTTP_2);, +    assertEquals(HTTP_2.maxFrameSize(), data.data.length);, +    peer.setVariantAndClient(HTTP_2, false);, +    SpdyConnection connection = connectionBuilder(peer, HTTP_2), +    peer.setVariantAndClient(HTTP_2, false);, +    SpdyConnection connection = connectionBuilder(peer, HTTP_2).build();, +    peer.setVariantAndClient(HTTP_2, false);, +    connectionBuilder(peer, HTTP_2), +    peer.setVariantAndClient(HTTP_2, client);, +    SpdyConnection connection = connection(peer, HTTP_2);]