[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIPv6() throws UnknownHostException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIPv6() throws UnknownHostException {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test, +  public void cancelWhileRequestHeadersAreSent() throws Exception {, +    server.enqueue(new MockResponse().setBody("A"));, +, +    EventListener listener =, +        new EventListener() {, +          @Override, +          public void requestHeadersStart(Call call) {, +            try {, +              // Cancel call from another thread to avoid reentrance., +              cancelLater(call, 0).join();, +            } catch (InterruptedException e) {, +              throw new AssertionError();, +            }, +          }, +        };, +    client = client.newBuilder().eventListener(listener).build();, +, +    Call call = client.newCall(new Request.Builder().url(server.url("/a")).build());, +    try {, +      call.execute();, +      fail();, +    } catch (IOException expected) {, +    }, +  }, +, +  @Ignore(, +      "Canceling an HTTP/2 request while request headers are sent has no effect. The request completes successfully and the response can be read."), +  @Test, +  public void cancelWhileRequestHeadersAreSent_HTTP_2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    cancelWhileRequestHeadersAreSent();, +  }, +, +  private Thread cancelLater(final Call call, final long delay) {, +    Thread thread = new Thread("canceler") {, +    };, +    thread.start();, +    return thread;, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIPv6() throws UnknownHostException {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test, +  public void cancelWhileRequestHeadersAreSent() throws Exception {, +    server.enqueue(new MockResponse().setBody("A"));, +, +    EventListener listener =, +        new EventListener() {, +          @Override, +          public void requestHeadersStart(Call call) {, +            try {, +              // Cancel call from another thread to avoid reentrance., +              cancelLater(call, 0).join();, +            } catch (InterruptedException e) {, +              throw new AssertionError();, +            }, +          }, +        };, +    client = client.newBuilder().eventListener(listener).build();, +, +    Call call = client.newCall(new Request.Builder().url(server.url("/a")).build());, +    try {, +      call.execute();, +      fail();, +    } catch (IOException expected) {, +    }, +  }, +, +  @Ignore(, +      "Canceling an HTTP/2 request while request headers are sent has no effect. The request completes successfully and the response can be read."), +  @Test, +  public void cancelWhileRequestHeadersAreSent_HTTP_2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    cancelWhileRequestHeadersAreSent();, +  }, +, +  private Thread cancelLater(final Call call, final long delay) {, +    Thread thread = new Thread("canceler") {, +    };, +    thread.start();, +    return thread;, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +  @Test public void hostIPv6Builder() throws Exception {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIPv6() throws UnknownHostException {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test, +  public void cancelWhileRequestHeadersAreSent() throws Exception {, +    server.enqueue(new MockResponse().setBody("A"));, +, +    EventListener listener =, +        new EventListener() {, +          @Override, +          public void requestHeadersStart(Call call) {, +            try {]