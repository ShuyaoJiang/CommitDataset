[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +     * <p/>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +     * <p/>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +    Settings settings = initialPeerSettings(client);, +    if (client) { // TODO: we don't yet support reading push., +      settings.set(Settings.ENABLE_PUSH, 0, 0);, +    if (client) { // client specifies whether or not it accepts push., +      settings.set(Settings.ENABLE_PUSH, 0, 1);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +     * <p/>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +    Settings settings = initialPeerSettings(client);, +    if (client) { // TODO: we don't yet support reading push., +      settings.set(Settings.ENABLE_PUSH, 0, 0);, +    if (client) { // client specifies whether or not it accepts push., +      settings.set(Settings.ENABLE_PUSH, 0, 1);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +  // TODO: Do we want to dynamically adjust settings, or KISS and only set once?, +  // Settings we might send include toggling push, adjusting compression table size., +  // TODO: MWS will need to guard on this setting before attempting to push., +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +     * <p/>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +    Settings settings = initialPeerSettings(client);, +    if (client) { // TODO: we don't yet support reading push., +      settings.set(Settings.ENABLE_PUSH, 0, 0);, +    if (client) { // client specifies whether or not it accepts push., +      settings.set(Settings.ENABLE_PUSH, 0, 1);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +  // TODO: Do we want to dynamically adjust settings, or KISS and only set once?, +  // Settings we might send include toggling push, adjusting compression table size., +  // TODO: MWS will need to guard on this setting before attempting to push., +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Variant.java, +   * Default settings used for reading or writing frames to the peer., +   * @param okHttpSettings settings sent to the peer, such compression header table size., +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +     * <p/>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +    Settings settings = initialPeerSettings(client);, +    if (client) { // TODO: we don't yet support reading push., +      settings.set(Settings.ENABLE_PUSH, 0, 0);, +    if (client) { // client specifies whether or not it accepts push., +      settings.set(Settings.ENABLE_PUSH, 0, 1);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +  // TODO: Do we want to dynamically adjust settings, or KISS and only set once?, +  // Settings we might send include toggling push, adjusting compression table size., +  // TODO: MWS will need to guard on this setting before attempting to push., +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Variant.java, +   * Default settings used for reading or writing frames to the peer., +   * @param okHttpSettings settings sent to the peer, such compression header table size., +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/Http20Draft09Test.java, +    dataOut.writeShort(16); // 2 settings * 4 bytes for the code and 4 for the value., +    dataOut.writeInt(Settings.ENABLE_PUSH & 0xffffff);, +    dataOut.writeInt(0);, +        assertEquals(false, settings.getEnablePush(true));, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +     * <p/>, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +    Settings settings = initialPeerSettings(client);, +    if (client) { // TODO: we don't yet support reading push., +      settings.set(Settings.ENABLE_PUSH, 0, 0);, +    if (client) { // client specifies whether or not it accepts push., +      settings.set(Settings.ENABLE_PUSH, 0, 1);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +  // TODO: Do we want to dynamically adjust settings, or KISS and only set once?, +  // Settings we might send include toggling push, adjusting compression table size., +  // TODO: MWS will need to guard on this setting before attempting to push., +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Variant.java, +   * Default settings used for reading or writing frames to the peer., +   * @param okHttpSettings settings sent to the peer, such compression header table size., +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/Http20Draft09Test.java, +    dataOut.writeShort(16); // 2 settings * 4 bytes for the code and 4 for the value., +    dataOut.writeInt(Settings.ENABLE_PUSH & 0xffffff);, +    dataOut.writeInt(0);, +        assertEquals(false, settings.getEnablePush(true));, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +  @Test public void peerHttp2ServerZerosCompressionTable() throws Exception {, +    boolean client = false; // Peer is server, so we are client., +    Settings settings = Variant.HTTP_20_DRAFT_09.initialPeerSettings(client);, +    settings.set(Settings.HEADER_TABLE_SIZE, PERSIST_VALUE, 0);, +    SpdyConnection connection = sendHttp2SettingsAndCheckForAck(client, settings);, +      assertEquals(0, connection.peerSettings.getHeaderTableSize());, +      assertEquals(0, frameReader.hpackReader.maxHeaderTableByteCount());, +      // TODO: when supported, check the frameWriter's compression table is unaffected., +  }, +, +  @Test public void peerHttp2ClientDisablesPush() throws Exception {, +    boolean client = false; // Peer is client, so we are server., +    Settings settings = Variant.HTTP_20_DRAFT_09.initialPeerSettings(client);, +    settings.set(Settings.ENABLE_PUSH, 0, 0); // The peer client disables push., +, +    SpdyConnection connection = sendHttp2SettingsAndCheckForAck(client, settings);, +, +    // verify the peer's settings were read and applied., +    synchronized (connection) {, +      assertFalse(connection.peerSettings.getEnablePush(true));, +    }, +  private SpdyConnection sendHttp2SettingsAndCheckForAck(boolean client, Settings settings)]