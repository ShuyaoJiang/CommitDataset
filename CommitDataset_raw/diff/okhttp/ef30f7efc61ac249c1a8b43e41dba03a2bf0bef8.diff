[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +  void ackSettings() throws IOException;, +  /** Write okhttp's settings to the peer. */, +  void settings(Settings okHttpSettings) throws IOException;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +  void ackSettings() throws IOException;, +  /** Write okhttp's settings to the peer. */, +  void settings(Settings okHttpSettings) throws IOException;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +    private int maxHeaderTableByteCount;, +    Reader(boolean client, int maxHeaderTableByteCount, DataInputStream in) {, +      this.maxHeaderTableByteCount = maxHeaderTableByteCount;, +    int maxHeaderTableByteCount() {, +      return maxHeaderTableByteCount;, +    }, +, +    /** Evicts entries as needed. */, +    void maxHeaderTableByteCount(int newMaxHeaderTableByteCount) {, +      if (newMaxHeaderTableByteCount < headerTableByteCount) {, +        evictToRecoverBytes(headerTableByteCount - newMaxHeaderTableByteCount);, +      }, +      this.maxHeaderTableByteCount = newMaxHeaderTableByteCount;, +    }, +, +    /** Returns the count of entries evicted. */, +    private int evictToRecoverBytes(int bytesToRecover) {, +      int entriesToEvict = 0;, +      if (bytesToRecover > 0) {, +        // determine how many headers need to be evicted., +        for (int j = headerTable.length - 1; j >= nextHeaderIndex && bytesToRecover > 0; j--) {, +          bytesToRecover -= headerTable[j].size;, +          headerTableByteCount -= headerTable[j].size;, +          headerCount--;, +          entriesToEvict++;, +        }, +        referencedHeaders.shiftLeft(entriesToEvict);, +        System.arraycopy(headerTable, nextHeaderIndex + 1, headerTable,, +            nextHeaderIndex + 1 + entriesToEvict, headerCount);, +        nextHeaderIndex += entriesToEvict;, +      }, +      return entriesToEvict;, +    }, +, +      int entriesEvicted = evictToRecoverBytes(bytesToRecover);, +        index += headerTableIndex(index) + entriesEvicted;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +  void ackSettings() throws IOException;, +  /** Write okhttp's settings to the peer. */, +  void settings(Settings okHttpSettings) throws IOException;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +    private int maxHeaderTableByteCount;, +    Reader(boolean client, int maxHeaderTableByteCount, DataInputStream in) {, +      this.maxHeaderTableByteCount = maxHeaderTableByteCount;, +    int maxHeaderTableByteCount() {, +      return maxHeaderTableByteCount;, +    }, +, +    /** Evicts entries as needed. */, +    void maxHeaderTableByteCount(int newMaxHeaderTableByteCount) {, +      if (newMaxHeaderTableByteCount < headerTableByteCount) {, +        evictToRecoverBytes(headerTableByteCount - newMaxHeaderTableByteCount);, +      }, +      this.maxHeaderTableByteCount = newMaxHeaderTableByteCount;, +    }, +, +    /** Returns the count of entries evicted. */, +    private int evictToRecoverBytes(int bytesToRecover) {, +      int entriesToEvict = 0;, +      if (bytesToRecover > 0) {, +        // determine how many headers need to be evicted., +        for (int j = headerTable.length - 1; j >= nextHeaderIndex && bytesToRecover > 0; j--) {, +          bytesToRecover -= headerTable[j].size;, +          headerTableByteCount -= headerTable[j].size;, +          headerCount--;, +          entriesToEvict++;, +        }, +        referencedHeaders.shiftLeft(entriesToEvict);, +        System.arraycopy(headerTable, nextHeaderIndex + 1, headerTable,, +            nextHeaderIndex + 1 + entriesToEvict, headerCount);, +        nextHeaderIndex += entriesToEvict;, +      }, +      return entriesToEvict;, +    }, +, +      int entriesEvicted = evictToRecoverBytes(bytesToRecover);, +        index += headerTableIndex(index) + entriesEvicted;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +  // http://tools.ietf.org/html/draft-ietf-httpbis-http2-09#section-6.5, +  @Override public Settings defaultOkHttpSettings(boolean client) {, +    Settings settings = new Settings();, +    settings.set(Settings.HEADER_TABLE_SIZE, 0, 4096);, +    if (!client) { // client doesn't send push requests., +      settings.set(Settings.ENABLE_PUSH, 0, 0); // TODO: support writing push., +    }, +    settings.set(Settings.INITIAL_WINDOW_SIZE, 0, 65535);, +    return settings;, +  }, +, +  @Override public Settings initialPeerSettings(boolean client) {, +    Settings settings = new Settings();]