[+++ b/README.md, + [5]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST&c=jar-with-dependencies, +++ b/README.md, + [5]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST&c=jar-with-dependencies, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Settings.java, +  Settings set(int id, int idFlags, int value) {, +      return this; // Discard unknown settings., +    return this;, +++ b/README.md, + [5]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST&c=jar-with-dependencies, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Settings.java, +  Settings set(int id, int idFlags, int value) {, +      return this; // Discard unknown settings., +    return this;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +  static final int INITIAL_WINDOW_SIZE = 65535;, +, +   * The total number of bytes consumed by the application, but not yet, +   * acknowledged by sending a {@code WINDOW_UPDATE} frame on this connection., +  // Visible for testing, +  long unacknowledgedBytesRead = 0;, +  long bytesLeftInWriteWindow;, +  /** Settings we communicate to the peer. */, +  final Settings okHttpSettings = new Settings(), +      .set(Settings.INITIAL_WINDOW_SIZE, 0, INITIAL_WINDOW_SIZE);, +      // TODO: implement stream limit, +      // okHttpSettings.set(Settings.MAX_CONCURRENT_STREAMS, 0, max);, +, +  /** Settings we receive from the peer. */, +  final Settings peerSettings = new Settings(), +      .set(Settings.INITIAL_WINDOW_SIZE, 0, INITIAL_WINDOW_SIZE);, +, +    bytesLeftInWriteWindow = peerSettings.getInitialWindowSize();, +    bufferPool = new ByteArrayPool(INITIAL_WINDOW_SIZE * 8); // TODO: revisit size limit!, +        stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);, +  void writeWindowUpdateLater(final int streamId, final long unacknowledgedBytesRead) {, +    executor.submit(new NamedRunnable("OkHttp Window Update %s stream %d", hostName, streamId) {, +          frameWriter.windowUpdate(streamId, unacknowledgedBytesRead);, +              inFinished, priority, headerBlock);, +        int priorWriteWindowSize = peerSettings.getInitialWindowSize();, +        if (peerInitialWindowSize != -1 && peerInitialWindowSize != priorWriteWindowSize) {, +          delta = peerInitialWindowSize - priorWriteWindowSize;, +++ b/README.md, + [5]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=mockwebserver&v=LATEST&c=jar-with-dependencies, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Settings.java, +  Settings set(int id, int idFlags, int value) {, +      return this; // Discard unknown settings., +    return this;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +  static final int INITIAL_WINDOW_SIZE = 65535;, +, +   * The total number of bytes consumed by the application, but not yet, +   * acknowledged by sending a {@code WINDOW_UPDATE} frame on this connection., +  // Visible for testing, +  long unacknowledgedBytesRead = 0;, +  long bytesLeftInWriteWindow;, +  /** Settings we communicate to the peer. */, +  final Settings okHttpSettings = new Settings(), +      .set(Settings.INITIAL_WINDOW_SIZE, 0, INITIAL_WINDOW_SIZE);, +      // TODO: implement stream limit, +      // okHttpSettings.set(Settings.MAX_CONCURRENT_STREAMS, 0, max);, +, +  /** Settings we receive from the peer. */, +  final Settings peerSettings = new Settings(), +      .set(Settings.INITIAL_WINDOW_SIZE, 0, INITIAL_WINDOW_SIZE);, +, +    bytesLeftInWriteWindow = peerSettings.getInitialWindowSize();, +    bufferPool = new ByteArrayPool(INITIAL_WINDOW_SIZE * 8); // TODO: revisit size limit!, +        stream = new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);, +  void writeWindowUpdateLater(final int streamId, final long unacknowledgedBytesRead) {, +    executor.submit(new NamedRunnable("OkHttp Window Update %s stream %d", hostName, streamId) {, +          frameWriter.windowUpdate(streamId, unacknowledgedBytesRead);, +              inFinished, priority, headerBlock);, +        int priorWriteWindowSize = peerSettings.getInitialWindowSize();, +        if (peerInitialWindowSize != -1 && peerInitialWindowSize != priorWriteWindowSize) {, +          delta = peerInitialWindowSize - priorWriteWindowSize;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, +   * The total number of bytes consumed by the application, +   * (with {@link SpdyDataInputStream#read}), but not yet acknowledged by, +   * sending a {@code WINDOW_UPDATE} frame on this stream., +  // Visible for testing, +  long unacknowledgedBytesRead = 0;, +  long bytesLeftInWriteWindow;, +      int priority, List<Header> requestHeaders) {, +    this.bytesLeftInWriteWindow = connection.peerSettings.getInitialWindowSize();, +    this.in = new SpdyDataInputStream(connection.okHttpSettings.getInitialWindowSize());, +      int copied = 0;, +        unacknowledgedBytesRead += copied;, +        if (unacknowledgedBytesRead >= connection.okHttpSettings.getInitialWindowSize() / 2) {, +          connection.writeWindowUpdateLater(id, unacknowledgedBytesRead);, +          unacknowledgedBytesRead = 0;, +      // Update connection.unacknowledgedBytesRead outside the stream lock., +      synchronized (connection) { // Multiple application threads may hit this section., +        connection.unacknowledgedBytesRead += copied;, +        if (connection.unacknowledgedBytesRead, +            >= connection.okHttpSettings.getInitialWindowSize() / 2) {, +          connection.writeWindowUpdateLater(0, connection.unacknowledgedBytesRead);, +          connection.unacknowledgedBytesRead = 0;, +        }, +      }]