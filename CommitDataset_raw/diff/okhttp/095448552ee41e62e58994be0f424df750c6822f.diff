[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.Failure;, +public class Main extends HelpOption implements Runnable, Response.Receiver {, +    client.enqueue(request, this);, +    // Immediately begin triggering an executor shutdown so that after execution of the above, +    // request the threads do not stick around until timeout., +    client.getDispatcher().getExecutorService().shutdown();, +  @Override public void onFailure(Failure failure) {, +    failure.exception().printStackTrace();, +    close();, +  }, +, +  @Override public boolean onResponse(Response response) throws IOException {, +    if (showHeaders) {, +      System.out.println(response.statusLine());, +      Headers headers = response.headers();, +      for (int i = 0, count = headers.size(); i < count; i++) {, +        System.out.println(headers.name(i) + ": " + headers.value(i));, +      }, +      System.out.println();, +    }, +, +    Response.Body body = response.body();, +    byte[] buffer = new byte[1024];, +    while (body.ready()) {, +      int c = body.byteStream().read(buffer);, +      if (c == -1) {, +        close();, +        return true;, +      }, +, +      System.out.write(buffer, 0, c);, +    }, +    close();, +    return false;, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.Failure;, +public class Main extends HelpOption implements Runnable, Response.Receiver {, +    client.enqueue(request, this);, +    // Immediately begin triggering an executor shutdown so that after execution of the above, +    // request the threads do not stick around until timeout., +    client.getDispatcher().getExecutorService().shutdown();, +  @Override public void onFailure(Failure failure) {, +    failure.exception().printStackTrace();, +    close();, +  }, +, +  @Override public boolean onResponse(Response response) throws IOException {, +    if (showHeaders) {, +      System.out.println(response.statusLine());, +      Headers headers = response.headers();, +      for (int i = 0, count = headers.size(); i < count; i++) {, +        System.out.println(headers.name(i) + ": " + headers.value(i));, +      }, +      System.out.println();, +    }, +, +    Response.Body body = response.body();, +    byte[] buffer = new byte[1024];, +    while (body.ready()) {, +      int c = body.byteStream().read(buffer);, +      if (c == -1) {, +        close();, +        return true;, +      }, +, +      System.out.write(buffer, 0, c);, +    }, +    close();, +    return false;, +  }, +, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.ByteString;, +      return ByteString.of(md5bytes).hex();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.Failure;, +public class Main extends HelpOption implements Runnable, Response.Receiver {, +    client.enqueue(request, this);, +    // Immediately begin triggering an executor shutdown so that after execution of the above, +    // request the threads do not stick around until timeout., +    client.getDispatcher().getExecutorService().shutdown();, +  @Override public void onFailure(Failure failure) {, +    failure.exception().printStackTrace();, +    close();, +  }]