[+++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        dispatcher.shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        dispatcher.shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +  /**, +   * Enqueued on shutdown to release threads waiting on {@link #dispatch}. Note that this response, +   * isn't transmitted because the connection is closed before this response is returned., +   */, +  private static final MockResponse DEAD_LETTER = new MockResponse(), +      .setStatus("HTTP/1.1 " + 503 + " shutting down");, +, +    MockResponse result = responseQueue.take();, +, +    // If take() returned because we're shutting down, then enqueue another dead letter so that any, +    // other threads waiting on take() will also return., +    if (result == DEAD_LETTER) responseQueue.add(DEAD_LETTER);, +, +    return result;, +  @Override public void shutdown() {, +    responseQueue.add(DEAD_LETTER);, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import static okhttp3.internal.Platform.INFO;, +, +      Platform.get().log(INFO, "Failure serving FramedStream: " + e.getMessage(), null);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java, +, +  /**, +   * Release any resources held by this dispatcher. Any requests that are currently being dispatched, +   * should return immediately. Responses returned after shutdown will not be transmitted: their, +   * socket connections have already been closed., +   */, +  public void shutdown() {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +        dispatcher.shutdown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java, +  /**, +   * Enqueued on shutdown to release threads waiting on {@link #dispatch}. Note that this response, +   * isn't transmitted because the connection is closed before this response is returned., +   */, +  private static final MockResponse DEAD_LETTER = new MockResponse(), +      .setStatus("HTTP/1.1 " + 503 + " shutting down");, +, +    MockResponse result = responseQueue.take();, +, +    // If take() returned because we're shutting down, then enqueue another dead letter so that any, +    // other threads waiting on take() will also return., +    if (result == DEAD_LETTER) responseQueue.add(DEAD_LETTER);, +, +    return result;, +  @Override public void shutdown() {, +    responseQueue.add(DEAD_LETTER);, +  }, +]