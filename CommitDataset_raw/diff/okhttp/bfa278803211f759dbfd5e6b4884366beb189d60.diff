[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +    /** This peer's supported protocols. */, +    /** Set when remote peer notifies NPN is unsupported. */, +    /** When server, this is the protocol the client selected. */, +        return true; // Client supports NPN., +        this.unsupported = true; // Remote peer doesn't support NPN., +        return protocols; // Server advertises these protocols., +      } else if (methodName.equals("selectProtocol") // Called when client., +        List<String> serverProtocols = (List) args[0];, +        // Pick the first protocol the server advertises and client knows., +        for (int i = 0, size = serverProtocols.size(); i < size; i++) {, +          if (protocols.contains(serverProtocols.get(i))) {, +            return serverProtocols.get(i);, +          }, +        }, +        // On no intersection, try client's first protocol., +        return protocols.get(0);, +        this.selected = (String) args[0]; // Client selected this protocol., +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +    /** This peer's supported protocols. */, +    /** Set when remote peer notifies NPN is unsupported. */, +    /** When server, this is the protocol the client selected. */, +        return true; // Client supports NPN., +        this.unsupported = true; // Remote peer doesn't support NPN., +        return protocols; // Server advertises these protocols., +      } else if (methodName.equals("selectProtocol") // Called when client., +        List<String> serverProtocols = (List) args[0];, +        // Pick the first protocol the server advertises and client knows., +        for (int i = 0, size = serverProtocols.size(); i < size; i++) {, +          if (protocols.contains(serverProtocols.get(i))) {, +            return serverProtocols.get(i);, +          }, +        }, +        // On no intersection, try client's first protocol., +        return protocols.get(0);, +        this.selected = (String) args[0]; // Client selected this protocol., +++ b/okhttp/src/main/java/com/squareup/okhttp/Headers.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +    /** This peer's supported protocols. */, +    /** Set when remote peer notifies NPN is unsupported. */, +    /** When server, this is the protocol the client selected. */, +        return true; // Client supports NPN., +        this.unsupported = true; // Remote peer doesn't support NPN., +        return protocols; // Server advertises these protocols., +      } else if (methodName.equals("selectProtocol") // Called when client., +        List<String> serverProtocols = (List) args[0];, +        // Pick the first protocol the server advertises and client knows., +        for (int i = 0, size = serverProtocols.size(); i < size; i++) {, +          if (protocols.contains(serverProtocols.get(i))) {, +            return serverProtocols.get(i);, +          }, +        }, +        // On no intersection, try client's first protocol., +        return protocols.get(0);, +        this.selected = (String) args[0]; // Client selected this protocol., +++ b/okhttp/src/main/java/com/squareup/okhttp/Headers.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/AbstractHttpInputStream.java, +  private final OutputStream cacheBody;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +    /** This peer's supported protocols. */, +    /** Set when remote peer notifies NPN is unsupported. */, +    /** When server, this is the protocol the client selected. */, +        return true; // Client supports NPN., +        this.unsupported = true; // Remote peer doesn't support NPN., +        return protocols; // Server advertises these protocols., +      } else if (methodName.equals("selectProtocol") // Called when client., +        List<String> serverProtocols = (List) args[0];, +        // Pick the first protocol the server advertises and client knows., +        for (int i = 0, size = serverProtocols.size(); i < size; i++) {, +          if (protocols.contains(serverProtocols.get(i))) {, +            return serverProtocols.get(i);, +          }, +        }, +        // On no intersection, try client's first protocol., +        return protocols.get(0);, +        this.selected = (String) args[0]; // Client selected this protocol., +++ b/okhttp/src/main/java/com/squareup/okhttp/Headers.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/AbstractHttpInputStream.java, +  private final OutputStream cacheBody;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, +  /**, +   * The timeout to use while discarding a stream of input data. Since this is, +   * used for connection reuse, this timeout should be significantly less than, +   * the time it takes to establish a new connection., +   */, +  private static final int DISCARD_STREAM_TIMEOUT_MILLIS = 100;, +, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +    /** This peer's supported protocols. */, +    /** Set when remote peer notifies NPN is unsupported. */, +    /** When server, this is the protocol the client selected. */, +        return true; // Client supports NPN., +        this.unsupported = true; // Remote peer doesn't support NPN., +        return protocols; // Server advertises these protocols., +      } else if (methodName.equals("selectProtocol") // Called when client., +        List<String> serverProtocols = (List) args[0];, +        // Pick the first protocol the server advertises and client knows., +        for (int i = 0, size = serverProtocols.size(); i < size; i++) {, +          if (protocols.contains(serverProtocols.get(i))) {, +            return serverProtocols.get(i);]