[+++ b/okhttp/build.gradle, +      'okhttp3.Address#certificatePinner()',, +      'okhttp3.Address#connectionSpecs()',, +      'okhttp3.Address#dns()',, +      'okhttp3.Address#hostnameVerifier()',, +      'okhttp3.Address#protocols()',, +      'okhttp3.Address#proxy()',, +      'okhttp3.Address#proxyAuthenticator()',, +      'okhttp3.Address#proxySelector()',, +      'okhttp3.Address#sslSocketFactory()',, +      'okhttp3.Address#url()',, +      'okhttp3.Address#socketFactory()',, +++ b/okhttp/build.gradle, +      'okhttp3.Address#certificatePinner()',, +      'okhttp3.Address#connectionSpecs()',, +      'okhttp3.Address#dns()',, +      'okhttp3.Address#hostnameVerifier()',, +      'okhttp3.Address#protocols()',, +      'okhttp3.Address#proxy()',, +      'okhttp3.Address#proxyAuthenticator()',, +      'okhttp3.Address#proxySelector()',, +      'okhttp3.Address#sslSocketFactory()',, +      'okhttp3.Address#url()',, +      'okhttp3.Address#socketFactory()',, +++ /dev/null, +++ b/okhttp/build.gradle, +      'okhttp3.Address#certificatePinner()',, +      'okhttp3.Address#connectionSpecs()',, +      'okhttp3.Address#dns()',, +      'okhttp3.Address#hostnameVerifier()',, +      'okhttp3.Address#protocols()',, +      'okhttp3.Address#proxy()',, +      'okhttp3.Address#proxyAuthenticator()',, +      'okhttp3.Address#proxySelector()',, +      'okhttp3.Address#sslSocketFactory()',, +      'okhttp3.Address#url()',, +      'okhttp3.Address#socketFactory()',, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/Address.kt, +/*, + * Copyright (C) 2019 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3, +, +import java.net.Proxy, +import java.net.ProxySelector, +import java.util.Objects, +import javax.net.SocketFactory, +import javax.net.ssl.HostnameVerifier, +import javax.net.ssl.SSLSocketFactory, +import okhttp3.internal.Util, +, +/**, + * A specification for a connection to an origin server. For simple connections, this is the, + * server's hostname and port. If an explicit proxy is requested (or [no proxy][Proxy.NO_PROXY] is explicitly requested),, + * this also includes that proxy information. For secure connections the address also includes the SSL socket factory,, + * hostname verifier, and certificate pinner., + *, + * HTTP requests that share the same `Address` may also share the same [Connection]., + */, +class Address(, +    uriHost: String,, +    uriPort: Int,, +    private val dns: Dns,, +    private val socketFactory: SocketFactory,, +    private val sslSocketFactory: SSLSocketFactory?,, +    private val hostnameVerifier: HostnameVerifier?,, +    private val certificatePinner: CertificatePinner?,, +    private val proxyAuthenticator: Authenticator,, +    private val proxy: Proxy?,, +    protocols: List<Protocol>,, +    connectionSpecs: List<ConnectionSpec>,, +    private val proxySelector: ProxySelector, +) {, +  private val url: HttpUrl = HttpUrl.Builder(), +      .scheme(if (sslSocketFactory != null) "https" else "http"), +      .host(uriHost), +      .port(uriPort), +      .build(), +, +  /**, +   * The protocols the client supports. This method always returns a non-null list that, +   * contains minimally [Protocol.HTTP_1_1]., +   */, +  private val protocols: List<Protocol> = Util.immutableList(protocols), +, +  private val connectionSpecs: List<ConnectionSpec> = Util.immutableList(connectionSpecs), +]