[+++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +      for (int i = 0, size = expiredConnections.size(); i < size; i++) {, +        Util.closeQuietly(expiredConnections.get(i).getSocket());, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +      for (int i = 0, size = expiredConnections.size(); i < size; i++) {, +        Util.closeQuietly(expiredConnections.get(i).getSocket());, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java, +    List<String> supportedCipherSuites =, +        Util.intersect(cipherSuites, sslSocket.getSupportedCipherSuites());, +    List<String> supportedTlsVersions =, +        Util.intersect(tlsVersions, sslSocket.getSupportedProtocols());, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +      for (int i = 0, size = expiredConnections.size(); i < size; i++) {, +        Util.closeQuietly(expiredConnections.get(i).getSocket());, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java, +    List<String> supportedCipherSuites =, +        Util.intersect(cipherSuites, sslSocket.getSupportedCipherSuites());, +    List<String> supportedTlsVersions =, +        Util.intersect(tlsVersions, sslSocket.getSupportedProtocols());, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +   * Returns a mutable copy of {@code first} containing only elements also in {@code second}. The, +   * returned elements are in the same order as in {@code first}., +  public static <T> List<T> intersect(T[] first, T[] second) {, +    for (T a : first) {, +      for (T b : second) {, +        if (a.equals(b)) {, +          result.add(b);, +          break;, +    }, +    return result;, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +      for (int i = 0, size = expiredConnections.size(); i < size; i++) {, +        Util.closeQuietly(expiredConnections.get(i).getSocket());, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java, +    List<String> supportedCipherSuites =, +        Util.intersect(cipherSuites, sslSocket.getSupportedCipherSuites());, +    List<String> supportedTlsVersions =, +        Util.intersect(tlsVersions, sslSocket.getSupportedProtocols());, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +   * Returns a mutable copy of {@code first} containing only elements also in {@code second}. The, +   * returned elements are in the same order as in {@code first}., +  public static <T> List<T> intersect(T[] first, T[] second) {, +    for (T a : first) {, +      for (T b : second) {, +        if (a.equals(b)) {, +          result.add(b);, +          break;, +    }, +    return result;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteSelector.java, +    List<ConnectionSpec> specs = address.getConnectionSpecs();, +    for (int i = 0, size = specs.size(); i < size; i++) {, +      ConnectionSpec spec = specs.get(i);, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +      for (int i = 0, size = expiredConnections.size(); i < size; i++) {, +        Util.closeQuietly(expiredConnections.get(i).getSocket());, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java, +    List<String> supportedCipherSuites =, +        Util.intersect(cipherSuites, sslSocket.getSupportedCipherSuites());, +    List<String> supportedTlsVersions =, +        Util.intersect(tlsVersions, sslSocket.getSupportedProtocols());, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +   * Returns a mutable copy of {@code first} containing only elements also in {@code second}. The, +   * returned elements are in the same order as in {@code first}., +  public static <T> List<T> intersect(T[] first, T[] second) {, +    for (T a : first) {, +      for (T b : second) {, +        if (a.equals(b)) {, +          result.add(b);, +          break;, +    }, +    return result;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteSelector.java, +    List<ConnectionSpec> specs = address.getConnectionSpecs();, +    for (int i = 0, size = specs.size(); i < size; i++) {, +      ConnectionSpec spec = specs.get(i);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/tls/OkHostnameVerifier.java, +    List<String> altNames = getSubjectAltNames(certificate, ALT_IPA_NAME);, +    for (int i = 0, size = altNames.size(); i < size; i++) {, +      if (ipAddress.equalsIgnoreCase(altNames.get(i))) {, +    List<String> altNames = getSubjectAltNames(certificate, ALT_DNS_NAME);, +    for (int i = 0, size = altNames.size(); i < size; i++) {, +      if (verifyHostName(hostName, altNames.get(i))) {, +    List<String> altIpaNames = getSubjectAltNames(certificate, ALT_IPA_NAME);, +    List<String> altDnsNames = getSubjectAltNames(certificate, ALT_DNS_NAME);, +    List<String> result = new ArrayList<>(altIpaNames.size() + altDnsNames.size());, +    result.addAll(altIpaNames);, +    result.addAll(altDnsNames);]