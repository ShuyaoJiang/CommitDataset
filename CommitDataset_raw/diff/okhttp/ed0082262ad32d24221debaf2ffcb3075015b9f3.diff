[+++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java, +import java.util.ArrayList;, +import java.util.Collections;, + * the SSL socket. For example, if an SSL socket does not have TLS 1.3 enabled, it will not be used, +      .tlsVersions(TlsVersion.TLS_1_3, TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0), +    List<CipherSuite> result = new ArrayList<>(cipherSuites.length);, +    for (String cipherSuite : cipherSuites) {, +      result.add(CipherSuite.forJavaName(cipherSuite));, +    return Collections.unmodifiableList(result);, +    List<TlsVersion> result = new ArrayList<>(tlsVersions.length);, +    for (String tlsVersion : tlsVersions) {, +      result.add(TlsVersion.forJavaName(tlsVersion));, +    return Collections.unmodifiableList(result);, +++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java, +import java.util.ArrayList;, +import java.util.Collections;, + * the SSL socket. For example, if an SSL socket does not have TLS 1.3 enabled, it will not be used, +      .tlsVersions(TlsVersion.TLS_1_3, TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0), +    List<CipherSuite> result = new ArrayList<>(cipherSuites.length);, +    for (String cipherSuite : cipherSuites) {, +      result.add(CipherSuite.forJavaName(cipherSuite));, +    return Collections.unmodifiableList(result);, +    List<TlsVersion> result = new ArrayList<>(tlsVersions.length);, +    for (String tlsVersion : tlsVersions) {, +      result.add(TlsVersion.forJavaName(tlsVersion));, +    return Collections.unmodifiableList(result);, +++ b/okhttp/src/main/java/okhttp3/TlsVersion.java, +  TLS_1_3("TLSv1.3"), // 2016., +      case "TLSv1.3":, +        return TLS_1_3;]