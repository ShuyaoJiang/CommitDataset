[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            : Header.TARGET_AUTHORITY, url(pushPromise.path()).host()));, +        pushedHeaders.add(new Header(Header.TARGET_METHOD, pushPromise.method()));, +        pushedHeaders.add(new Header(Header.TARGET_PATH, pushPromise.path()));, +        Headers pushPromiseHeaders = pushPromise.headers();, +        String requestLine = pushPromise.method() + ' ' + pushPromise.path() + " HTTP/1.1";, +        requestQueue.add(new RecordedRequest(requestLine, pushPromise.headers(), chunkSizes, 0,, +        boolean hasBody = pushPromise.response().getBody() != null;, +        writeResponse(pushedStream, pushPromise.response());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            : Header.TARGET_AUTHORITY, url(pushPromise.path()).host()));, +        pushedHeaders.add(new Header(Header.TARGET_METHOD, pushPromise.method()));, +        pushedHeaders.add(new Header(Header.TARGET_PATH, pushPromise.path()));, +        Headers pushPromiseHeaders = pushPromise.headers();, +        String requestLine = pushPromise.method() + ' ' + pushPromise.path() + " HTTP/1.1";, +        requestQueue.add(new RecordedRequest(requestLine, pushPromise.headers(), chunkSizes, 0,, +        boolean hasBody = pushPromise.response().getBody() != null;, +        writeResponse(pushedStream, pushPromise.response());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/PushPromise.java, +  public String method() {, +  public String path() {, +  public Headers headers() {, +  public MockResponse response() {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            : Header.TARGET_AUTHORITY, url(pushPromise.path()).host()));, +        pushedHeaders.add(new Header(Header.TARGET_METHOD, pushPromise.method()));, +        pushedHeaders.add(new Header(Header.TARGET_PATH, pushPromise.path()));, +        Headers pushPromiseHeaders = pushPromise.headers();, +        String requestLine = pushPromise.method() + ' ' + pushPromise.path() + " HTTP/1.1";, +        requestQueue.add(new RecordedRequest(requestLine, pushPromise.headers(), chunkSizes, 0,, +        boolean hasBody = pushPromise.response().getBody() != null;, +        writeResponse(pushedStream, pushPromise.response());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/PushPromise.java, +  public String method() {, +  public String path() {, +  public Headers headers() {, +  public MockResponse response() {, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, + * Implements Apache's {@link HttpClient} API using {@link OkHttpClient}., + * <p>, + * <strong>Warning:</strong> Many core features of Apache HTTP client are not implemented by this, + * API. This includes the keep-alive strategy, cookie store, credentials provider, route planner, + * and others.]