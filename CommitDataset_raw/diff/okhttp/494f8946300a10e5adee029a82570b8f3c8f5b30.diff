[+++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import okio.BufferedSource;, +import okio.Okio;, +        BufferedSource source = Okio.buffer(Okio.source(in));, +        url = source.readUtf8Line(true);, +        requestMethod = source.readUtf8Line(true);, +        int varyRequestHeaderLineCount = readInt(source);, +          varyHeadersBuilder.addLine(source.readUtf8Line(true));, +        statusLine = source.readUtf8Line(true);, +        int responseHeaderLineCount = readInt(source);, +          responseHeadersBuilder.addLine(source.readUtf8Line(true));, +          String blank = source.readUtf8Line(true);, +          String cipherSuite = source.readUtf8Line(true);, +          List<Certificate> peerCertificates = readCertificateList(source);, +          List<Certificate> localCertificates = readCertificateList(source);, +    private List<Certificate> readCertificateList(BufferedSource source) throws IOException {, +      int length = readInt(source);, +          String line = source.readUtf8Line(true);, +  private static int readInt(BufferedSource source) throws IOException {, +    String line = source.readUtf8Line(true);, +    try {, +      return Integer.parseInt(line);, +    } catch (NumberFormatException e) {, +      throw new IOException("Expected an integer but was \"" + line + "\"");, +    }, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import okio.BufferedSource;, +import okio.Okio;, +        BufferedSource source = Okio.buffer(Okio.source(in));, +        url = source.readUtf8Line(true);, +        requestMethod = source.readUtf8Line(true);, +        int varyRequestHeaderLineCount = readInt(source);, +          varyHeadersBuilder.addLine(source.readUtf8Line(true));, +        statusLine = source.readUtf8Line(true);, +        int responseHeaderLineCount = readInt(source);, +          responseHeadersBuilder.addLine(source.readUtf8Line(true));, +          String blank = source.readUtf8Line(true);, +          String cipherSuite = source.readUtf8Line(true);, +          List<Certificate> peerCertificates = readCertificateList(source);, +          List<Certificate> localCertificates = readCertificateList(source);, +    private List<Certificate> readCertificateList(BufferedSource source) throws IOException {, +      int length = readInt(source);, +          String line = source.readUtf8Line(true);, +  private static int readInt(BufferedSource source) throws IOException {, +    String line = source.readUtf8Line(true);, +    try {, +      return Integer.parseInt(line);, +    } catch (NumberFormatException e) {, +      throw new IOException("Expected an integer but was \"" + line + "\"");, +    }, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/DiskLruCache.java, +import okio.BufferedSource;, +import okio.Okio;, +    BufferedSource source = Okio.buffer(Okio.source(new FileInputStream(journalFile)));, +      String magic = source.readUtf8Line(true);, +      String version = source.readUtf8Line(true);, +      String appVersionString = source.readUtf8Line(true);, +      String valueCountString = source.readUtf8Line(true);, +      String blank = source.readUtf8Line(true);, +          readJournalLine(source.readUtf8Line(true));, +      Util.closeQuietly(source);, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import okio.BufferedSource;, +import okio.Okio;, +        BufferedSource source = Okio.buffer(Okio.source(in));, +        url = source.readUtf8Line(true);, +        requestMethod = source.readUtf8Line(true);, +        int varyRequestHeaderLineCount = readInt(source);, +          varyHeadersBuilder.addLine(source.readUtf8Line(true));, +        statusLine = source.readUtf8Line(true);, +        int responseHeaderLineCount = readInt(source);, +          responseHeadersBuilder.addLine(source.readUtf8Line(true));, +          String blank = source.readUtf8Line(true);, +          String cipherSuite = source.readUtf8Line(true);, +          List<Certificate> peerCertificates = readCertificateList(source);, +          List<Certificate> localCertificates = readCertificateList(source);, +    private List<Certificate> readCertificateList(BufferedSource source) throws IOException {, +      int length = readInt(source);, +          String line = source.readUtf8Line(true);, +  private static int readInt(BufferedSource source) throws IOException {, +    String line = source.readUtf8Line(true);, +    try {, +      return Integer.parseInt(line);, +    } catch (NumberFormatException e) {, +      throw new IOException("Expected an integer but was \"" + line + "\"");, +    }, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/DiskLruCache.java, +import okio.BufferedSource;, +import okio.Okio;, +    BufferedSource source = Okio.buffer(Okio.source(new FileInputStream(journalFile)));, +      String magic = source.readUtf8Line(true);, +      String version = source.readUtf8Line(true);, +      String appVersionString = source.readUtf8Line(true);, +      String valueCountString = source.readUtf8Line(true);]