[+++ b/pom.xml, +    <version>20120819</version>, +++ b/pom.xml, +    <version>20120819</version>, +++ b/src/main/java/com/google/mockwebserver/Dispatcher.java, +     * Returns a response to satisfy {@code request}. This method may block (for, +     * instance, to wait on a CountdownLatch)., +     * Returns the socket policy of the next request.  Default implementation, +     * returns {@link SocketPolicy#KEEP_OPEN}. Mischievous implementations can, +     * return other values to test HTTP edge cases., +++ b/pom.xml, +    <version>20120819</version>, +++ b/src/main/java/com/google/mockwebserver/Dispatcher.java, +     * Returns a response to satisfy {@code request}. This method may block (for, +     * instance, to wait on a CountdownLatch)., +     * Returns the socket policy of the next request.  Default implementation, +     * returns {@link SocketPolicy#KEEP_OPEN}. Mischievous implementations can, +     * return other values to test HTTP edge cases., +++ b/src/main/java/com/google/mockwebserver/MockWebServer.java, +import java.io.BufferedInputStream;, +import java.io.BufferedOutputStream;, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.net.MalformedURLException;, +import java.net.Proxy;, +import java.net.ServerSocket;, +import java.net.Socket;, +import java.net.SocketException;, +import java.net.URL;, +import java.net.UnknownHostException;, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.LinkedBlockingQueue;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLSocket;, +import javax.net.ssl.SSLSocketFactory;, +import javax.net.ssl.TrustManager;, +import javax.net.ssl.X509TrustManager;, +    /**, +     * Scripts {@code response} to be returned to a request made in sequence., +     * The first request is served by the first enqueued response; the second, +     * request by the second enqueued response; and so on., +     *, +     * @throws ClassCastException if the default dispatcher has been replaced, +     *     with {@link #setDispatcher(Dispatcher)}., +     */, +    /**, +     * Sets the dispatcher used to match incoming requests to mock responses., +     * The default dispatcher simply serves a fixed sequence of responses from, +     * a {@link #enqueue(MockResponse) queue}; custom dispatchers can vary the, +     * response based on timing or the content of the request., +     */, +        if (dispatcher == null) {, +            throw new NullPointerException();, +        }, +++ b/pom.xml, +    <version>20120819</version>, +++ b/src/main/java/com/google/mockwebserver/Dispatcher.java, +     * Returns a response to satisfy {@code request}. This method may block (for, +     * instance, to wait on a CountdownLatch)., +     * Returns the socket policy of the next request.  Default implementation, +     * returns {@link SocketPolicy#KEEP_OPEN}. Mischievous implementations can, +     * return other values to test HTTP edge cases., +++ b/src/main/java/com/google/mockwebserver/MockWebServer.java, +import java.io.BufferedInputStream;, +import java.io.BufferedOutputStream;, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.net.MalformedURLException;, +import java.net.Proxy;, +import java.net.ServerSocket;, +import java.net.Socket;, +import java.net.SocketException;, +import java.net.URL;, +import java.net.UnknownHostException;, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.LinkedBlockingQueue;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLSocket;, +import javax.net.ssl.SSLSocketFactory;, +import javax.net.ssl.TrustManager;, +import javax.net.ssl.X509TrustManager;, +    /**, +     * Scripts {@code response} to be returned to a request made in sequence., +     * The first request is served by the first enqueued response; the second, +     * request by the second enqueued response; and so on., +     *]