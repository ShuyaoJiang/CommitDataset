[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.ConnectionSpec;, +import com.squareup.okhttp.Route;, +    RouteSelector routeSelector = RouteSelector.get(address, httpRequest, client);, +    assertRoute(routeSelector.next(), address, NO_PROXY, dns.inetAddresses[0],, +      routeSelector.next();, +    RouteSelector routeSelector = RouteSelector.get(address, httpRequest, client);, +    Route route = routeSelector.next();, +    routeDatabase.failed(route);, +    routeSelector = RouteSelector.get(address, httpRequest, client);, +    assertRoute(routeSelector.next(), address, NO_PROXY, dns.inetAddresses[0],, +      routeSelector.next();, +    RouteSelector routeSelector = RouteSelector.get(address, httpRequest, client);, +    assertRoute(routeSelector.next(), address, proxyA, dns.inetAddresses[0],, +    assertRoute(routeSelector.next(), address, proxyA, dns.inetAddresses[1],, +    RouteSelector routeSelector = RouteSelector.get(address, httpRequest, client);, +    assertRoute(routeSelector.next(), address, NO_PROXY, dns.inetAddresses[0],, +    assertRoute(routeSelector.next(), address, NO_PROXY, dns.inetAddresses[1],, +    RouteSelector routeSelector = RouteSelector.get(address, httpRequest, client);, +    assertRoute(routeSelector.next(), address, NO_PROXY, dns.inetAddresses[0],, +    RouteSelector routeSelector = RouteSelector.get(address, httpRequest, client);, +    assertRoute(routeSelector.next(), address, NO_PROXY, dns.inetAddresses[0],, +    assertRoute(routeSelector.next(), address, NO_PROXY, dns.inetAddresses[1],, +    RouteSelector routeSelector = RouteSelector.get(address, httpRequest, client);, +    assertRoute(routeSelector.next(), address, proxyA, dns.inetAddresses[0], proxyAPort,, +    assertRoute(routeSelector.next(), address, proxyA, dns.inetAddresses[1], proxyAPort,, +    assertRoute(routeSelector.next(), address, proxyB, dns.inetAddresses[0],, +        proxyBPort,, +    assertRoute(routeSelector.next(), address, NO_PROXY, dns.inetAddresses[0], uriPort,, +    RouteSelector routeSelector = RouteSelector.get(address, httpRequest, client);, +    assertRoute(routeSelector.next(), address, NO_PROXY, dns.inetAddresses[0], uriPort,, +    RouteSelector routeSelector = RouteSelector.get(address, httpRequest, client);, +    assertRoute(routeSelector.next(), address, proxyA, dns.inetAddresses[0],, +      routeSelector.next();, +    assertRoute(routeSelector.next(), address, proxyA, dns.inetAddresses[0],, +    assertRoute(routeSelector.next(), address, NO_PROXY, dns.inetAddresses[0],, +    Address address = httpsAddress();, +    RouteSelector routeSelector = RouteSelector.get(address, httpsRequest, client);, +    Route route = routeSelector.next();, +    routeSelector.connectFailed(route, new IOException("Non SSL exception"));, +    Address address = httpsAddress();, +    RouteSelector routeSelector = RouteSelector.get(address, httpsRequest, client);, +    Route route = routeSelector.next();, +    routeSelector.connectFailed(route, new SSLHandshakeException("SSL exception"));, +    Address address = httpsAddress();, +    RouteSelector routeSelector = RouteSelector.get(address, httpsRequest, client);, +    assertRoute(routeSelector.next(), address, proxyA, dns.inetAddresses[0],, +    assertRoute(routeSelector.next(), address, proxyA, dns.inetAddresses[0],, +    assertRoute(routeSelector.next(), address, proxyA, dns.inetAddresses[1],, +    assertRoute(routeSelector.next(), address, proxyA, dns.inetAddresses[1],, +    assertRoute(routeSelector.next(), address, proxyB, dns.inetAddresses[0],, +    assertRoute(routeSelector.next(), address, proxyB, dns.inetAddresses[0],, +    assertRoute(routeSelector.next(), address, proxyB, dns.inetAddresses[1],, +    assertRoute(routeSelector.next(), address, proxyB, dns.inetAddresses[1],, +    assertRoute(routeSelector.next(), address, NO_PROXY, dns.inetAddresses[0],, +    assertRoute(routeSelector.next(), address, NO_PROXY, dns.inetAddresses[0],, +    assertRoute(routeSelector.next(), address, NO_PROXY, dns.inetAddresses[1],, +    assertRoute(routeSelector.next(), address, NO_PROXY, dns.inetAddresses[1],, +    Address address = httpsAddress();, +    RouteSelector routeSelector = RouteSelector.get(address, httpsRequest, client);, +    List<Route> regularRoutes = new ArrayList<>();, +      regularRoutes.add(routeSelector.next());, +    routeDatabase.failed(regularRoutes.get(0));, +    routeSelector = RouteSelector.get(address, httpsRequest, client);, +    List<Route> routesWithFailedRoute = new ArrayList<>();, +      routesWithFailedRoute.add(routeSelector.next());, +    assertEquals(regularRoutes.get(0),, +        routesWithFailedRoute.get(routesWithFailedRoute.size() - 1));, +  private void assertRoute(Route route, Address address, Proxy proxy,, +    assertEquals(address, route.getAddress());, +    assertEquals(proxy, route.getProxy());, +    assertEquals(socketAddress, route.getSocketAddress().getAddress());, +    assertEquals(socketPort, route.getSocketAddress().getPort());, +    assertEquals(connectionSpec, route.getConnectionSpec());, +  private Address httpsAddress() {, +    return new Address(uriHost, uriPort, socketFactory, sslSocketFactory,, +        hostnameVerifier, null, authenticator, null, protocols, connectionSpecs, proxySelector);, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.ConnectionSpec;, +import com.squareup.okhttp.Route;, +    RouteSelector routeSelector = RouteSelector.get(address, httpRequest, client);, +    assertRoute(routeSelector.next(), address, NO_PROXY, dns.inetAddresses[0],, +      routeSelector.next();, +    RouteSelector routeSelector = RouteSelector.get(address, httpRequest, client);, +    Route route = routeSelector.next();, +    routeDatabase.failed(route);, +    routeSelector = RouteSelector.get(address, httpRequest, client);, +    assertRoute(routeSelector.next(), address, NO_PROXY, dns.inetAddresses[0],, +      routeSelector.next();, +    RouteSelector routeSelector = RouteSelector.get(address, httpRequest, client);, +    assertRoute(routeSelector.next(), address, proxyA, dns.inetAddresses[0],, +    assertRoute(routeSelector.next(), address, proxyA, dns.inetAddresses[1],, +    RouteSelector routeSelector = RouteSelector.get(address, httpRequest, client);, +    assertRoute(routeSelector.next(), address, NO_PROXY, dns.inetAddresses[0],, +    assertRoute(routeSelector.next(), address, NO_PROXY, dns.inetAddresses[1],, +    RouteSelector routeSelector = RouteSelector.get(address, httpRequest, client);, +    assertRoute(routeSelector.next(), address, NO_PROXY, dns.inetAddresses[0],, +    RouteSelector routeSelector = RouteSelector.get(address, httpRequest, client);]