[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Internal;, +  static {, +    Internal.initializeInstanceForTests();, +  }, +, +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Internal;, +  static {, +    Internal.initializeInstanceForTests();, +  }, +, +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Internal;, +  static {, +    Internal.initializeInstanceForTests();, +  }, +, +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Internal;, +  static {, +    Internal.initializeInstanceForTests();, +  }, +, +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java, +import okhttp3.JavaNetAuthenticator;, +    assertEquals(1, client.client().getConnectionPool().getMultiplexedConnectionCount());, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Internal;, +  static {, +    Internal.initializeInstanceForTests();, +  }, +, +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started., +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java, +import okhttp3.JavaNetAuthenticator;]