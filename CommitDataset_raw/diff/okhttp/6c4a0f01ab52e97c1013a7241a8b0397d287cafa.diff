[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +  private int bodyDelayTimeMs = 0;, +  /**, +   * Set the delayed time of the response body to {@code delay}. This applies to the, +   * response body only; response headers are not affected., +   */, +  public MockResponse setBodyDelayTimeMs(int delay) {, +    bodyDelayTimeMs = delay;, +    return this;, +  }, +, +  public int getBodyDelayTimeMs() {, +    return bodyDelayTimeMs;, +  }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +  private int bodyDelayTimeMs = 0;, +  /**, +   * Set the delayed time of the response body to {@code delay}. This applies to the, +   * response body only; response headers are not affected., +   */, +  public MockResponse setBodyDelayTimeMs(int delay) {, +    bodyDelayTimeMs = delay;, +    return this;, +  }, +, +  public int getBodyDelayTimeMs() {, +    return bodyDelayTimeMs;, +  }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        if (response.getBodyDelayTimeMs() != 0) {, +          try {, +            Thread.sleep(response.getBodyDelayTimeMs());, +          } catch (InterruptedException e) {, +            throw new AssertionError(e);, +          }, +        }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +  private int bodyDelayTimeMs = 0;, +  /**, +   * Set the delayed time of the response body to {@code delay}. This applies to the, +   * response body only; response headers are not affected., +   */, +  public MockResponse setBodyDelayTimeMs(int delay) {, +    bodyDelayTimeMs = delay;, +    return this;, +  }, +, +  public int getBodyDelayTimeMs() {, +    return bodyDelayTimeMs;, +  }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        if (response.getBodyDelayTimeMs() != 0) {, +          try {, +            Thread.sleep(response.getBodyDelayTimeMs());, +          } catch (InterruptedException e) {, +            throw new AssertionError(e);, +          }, +        }, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    connected = true;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +  private int bodyDelayTimeMs = 0;, +  /**, +   * Set the delayed time of the response body to {@code delay}. This applies to the, +   * response body only; response headers are not affected., +   */, +  public MockResponse setBodyDelayTimeMs(int delay) {, +    bodyDelayTimeMs = delay;, +    return this;, +  }, +, +  public int getBodyDelayTimeMs() {, +    return bodyDelayTimeMs;, +  }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        if (response.getBodyDelayTimeMs() != 0) {, +          try {, +            Thread.sleep(response.getBodyDelayTimeMs());, +          } catch (InterruptedException e) {, +            throw new AssertionError(e);, +          }, +        }, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    connected = true;, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +  @Test public void spdyConnectionTimeout() throws Exception {, +    MockResponse response = new MockResponse().setBody("A");, +    response.setBodyDelayTimeMs(1000);, +    server.enqueue(response);, +    server.play();, +, +    HttpURLConnection connection1 = client.open(server.getUrl("/"));, +    connection1.setReadTimeout(2000);, +    HttpURLConnection connection2 = client.open(server.getUrl("/"));, +    connection2.setReadTimeout(200);, +    connection1.connect();, +    connection2.connect();, +    assertContent("A", connection1, Integer.MAX_VALUE);, +  }, +]