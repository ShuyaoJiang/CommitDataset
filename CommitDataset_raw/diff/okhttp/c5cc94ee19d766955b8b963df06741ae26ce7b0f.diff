[+++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +  @Test public void chainGoesAllTheWayToSelfSignedRoot() throws Exception {, +    HeldCertificate selfSigned = new HeldCertificate.Builder(), +    HeldCertificate trusted = new HeldCertificate.Builder(), +        .issuedBy(selfSigned), +        .issuedBy(trusted), +        new RealTrustRootIndex(selfSigned.certificate, trusted.certificate));, +    assertEquals(list(certB, certA, trusted, selfSigned),, +        council.clean(list(certB, certA)));, +    assertEquals(list(certB, certA, trusted, selfSigned),, +        council.clean(list(certB, certA, trusted)));, +    assertEquals(list(certB, certA, trusted, selfSigned),, +        council.clean(list(certB, certA, trusted, selfSigned)));, +++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +  @Test public void chainGoesAllTheWayToSelfSignedRoot() throws Exception {, +    HeldCertificate selfSigned = new HeldCertificate.Builder(), +    HeldCertificate trusted = new HeldCertificate.Builder(), +        .issuedBy(selfSigned), +        .issuedBy(trusted), +        new RealTrustRootIndex(selfSigned.certificate, trusted.certificate));, +    assertEquals(list(certB, certA, trusted, selfSigned),, +        council.clean(list(certB, certA)));, +    assertEquals(list(certB, certA, trusted, selfSigned),, +        council.clean(list(certB, certA, trusted)));, +    assertEquals(list(certB, certA, trusted, selfSigned),, +        council.clean(list(certB, certA, trusted, selfSigned)));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.tls;, +, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLHandshakeException;, +import javax.net.ssl.SSLPeerUnverifiedException;, +import okhttp3.Call;, +import okhttp3.CertificatePinner;, +import okhttp3.OkHttpClient;, +import okhttp3.RecordingHostnameVerifier;, +import okhttp3.Request;, +import okhttp3.Response;, +import okhttp3.internal.HeldCertificate;, +import okhttp3.internal.SslContextBuilder;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.SocketPolicy;, +import org.junit.Rule;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +public final class CertificatePinnerChainValidationTest {, +  @Rule public final MockWebServer server = new MockWebServer();, +, +  /** The pinner should pull the root certificate from the trust manager. */, +  @Test public void pinRootNotPresentInChain() throws Exception {, +    HeldCertificate rootCa = new HeldCertificate.Builder(), +        .serialNumber("1"), +        .ca(3), +        .commonName("root"), +        .build();, +    HeldCertificate intermediateCa = new HeldCertificate.Builder(), +        .issuedBy(rootCa), +        .ca(2), +        .serialNumber("2"), +        .commonName("intermediate_ca"), +        .build();, +    HeldCertificate certificate = new HeldCertificate.Builder(), +        .issuedBy(intermediateCa), +        .serialNumber("3"), +        .commonName(server.getHostName()), +        .build();, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add(server.getHostName(), CertificatePinner.pin(rootCa.certificate)), +        .build();, +    SSLContext clientContext = new SslContextBuilder(), +        .addTrustedCertificate(rootCa.certificate), +        .build();, +    OkHttpClient client = new OkHttpClient.Builder(), +        .sslSocketFactory(clientContext.getSocketFactory()), +        .hostnameVerifier(new RecordingHostnameVerifier()), +        .certificatePinner(certificatePinner), +        .build();, +, +    SSLContext serverSslContext = new SslContextBuilder(), +        .certificateChain(certificate, intermediateCa)]