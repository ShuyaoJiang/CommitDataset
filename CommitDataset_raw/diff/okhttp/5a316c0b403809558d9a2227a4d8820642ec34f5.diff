[+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +        .addHeader("Cache-Control", "immutable"), +        .addHeader("Cache-Control", "immutable"), +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +        .addHeader("Cache-Control", "immutable"), +        .addHeader("Cache-Control", "immutable"), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        .authenticator(new RecordingOkAuthenticator(credential, null)), +        .authenticator(new RecordingOkAuthenticator(credential, null)), +        .authenticator(new RecordingOkAuthenticator(credential, null)), +    RecordingOkAuthenticator authenticator = new RecordingOkAuthenticator(null, null);, +        .authenticator(new RecordingOkAuthenticator(Credentials.basic("jesse", "secret"), null)), +        .authenticator(new RecordingOkAuthenticator("password", null)), +        .proxyAuthenticator(new RecordingOkAuthenticator("password", "Basic")), +        .proxyAuthenticator(new RecordingOkAuthenticator("password", "Basic")), +        .proxyAuthenticator(new RecordingOkAuthenticator("password", "Basic")), +        .proxyAuthenticator(new RecordingOkAuthenticator("password", "Basic")), +  @Test public void noPreemptiveProxyAuthorization() throws Exception {, +    RecordedRequest connect1 = server.takeRequest();, +    assertNull(connect1.getHeader("Proxy-Authorization"));, +, +    RecordedRequest connect2 = server.takeRequest();, +    assertEquals("password", connect2.getHeader("Proxy-Authorization"));, +  }, +, +  /** Confirm that we can send authentication information without being prompted first. */, +  @Test public void preemptiveProxyAuthentication() throws Exception {, +    server.useHttps(handshakeCertificates.sslSocketFactory(), true);, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END), +        .clearHeaders());, +    server.enqueue(new MockResponse(), +        .setBody("encrypted response from the origin server"));, +, +    final String credential = Credentials.basic("jesse", "password1");, +, +    client = client.newBuilder(), +        .sslSocketFactory(, +            handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager()), +        .proxy(server.toProxyAddress()), +        .hostnameVerifier(new RecordingHostnameVerifier()), +        .proxyAuthenticator(new Authenticator() {, +          @Override public Request authenticate(Route route, Response response) {, +            assertEquals("CONNECT", response.request().method());, +            assertEquals(HttpURLConnection.HTTP_PROXY_AUTH, response.code());, +            assertEquals("android.com", response.request().url().host());, +, +            List<Challenge> challenges = response.challenges();, +            assertEquals("OkHttp-Preemptive", challenges.get(0).scheme());, +, +            return response.request().newBuilder(), +                .header("Proxy-Authorization", credential), +                .build();, +          }, +        }), +        .build();, +, +    Request request = new Request.Builder(), +        .url("https://android.com/foo"), +        .build();, +, +    executeSynchronously(request).assertSuccessful();, +, +    assertEquals("CONNECT", connect.getMethod());, +    assertEquals(credential, connect.getHeader("Proxy-Authorization"));, +    assertEquals("/", connect.getPath());, +    assertEquals("GET", get.getMethod());, +    assertNull(get.getHeader("Proxy-Authorization"));, +    assertEquals("/foo", get.getPath());, +  }, +, +  @Test public void preemptiveThenReactiveProxyAuthentication() throws Exception {, +    server.useHttps(handshakeCertificates.sslSocketFactory(), true);, +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_PROXY_AUTH), +        .addHeader("Proxy-Authenticate", "Basic realm=\"localhost\""), +        .setBody("proxy auth required"));, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END), +        .clearHeaders());, +    server.enqueue(new MockResponse());, +, +    final List<String> challengeSchemes = new ArrayList<>();, +    final String credential = Credentials.basic("jesse", "password1");, +, +    client = client.newBuilder(), +        .sslSocketFactory(, +            handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager()), +        .proxy(server.toProxyAddress()), +        .hostnameVerifier(new RecordingHostnameVerifier()), +        .proxyAuthenticator(new Authenticator() {, +          @Override public Request authenticate(Route route, Response response) {, +            List<Challenge> challenges = response.challenges();, +            challengeSchemes.add(challenges.get(0).scheme());, +            return response.request().newBuilder(), +                .header("Proxy-Authorization", credential), +                .build();, +          }, +        }), +        .build();]