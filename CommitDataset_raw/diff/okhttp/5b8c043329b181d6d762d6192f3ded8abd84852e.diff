[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    callback.await(server.url("/a")).assertFailure("Canceled", "Socket closed");, +    callback.await(server.url("/")).assertFailure("Canceled", "Socket closed");, +    // Force requests to be executed serially., +    okhttp3.Dispatcher dispatcher = new okhttp3.Dispatcher(client.dispatcher().executorService());, +    dispatcher.setMaxRequests(1);, +    client = client.newBuilder(), +        .dispatcher(dispatcher), +        .build();, +    callback.await(requestB.url()).assertFailure("Canceled", "Socket closed");, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    callback.await(server.url("/a")).assertFailure("Canceled", "Socket closed");, +    callback.await(server.url("/")).assertFailure("Canceled", "Socket closed");, +    // Force requests to be executed serially., +    okhttp3.Dispatcher dispatcher = new okhttp3.Dispatcher(client.dispatcher().executorService());, +    dispatcher.setMaxRequests(1);, +    client = client.newBuilder(), +        .dispatcher(dispatcher), +        .build();, +    callback.await(requestB.url()).assertFailure("Canceled", "Socket closed");, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, +  private static final Dispatcher dispatcher = new Dispatcher();, +        .dispatcher(dispatcher), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    callback.await(server.url("/a")).assertFailure("Canceled", "Socket closed");, +    callback.await(server.url("/")).assertFailure("Canceled", "Socket closed");, +    // Force requests to be executed serially., +    okhttp3.Dispatcher dispatcher = new okhttp3.Dispatcher(client.dispatcher().executorService());, +    dispatcher.setMaxRequests(1);, +    client = client.newBuilder(), +        .dispatcher(dispatcher), +        .build();, +    callback.await(requestB.url()).assertFailure("Canceled", "Socket closed");, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, +  private static final Dispatcher dispatcher = new Dispatcher();, +        .dispatcher(dispatcher), +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, +      call.cancel();, +      call.cancel();, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    callback.await(server.url("/a")).assertFailure("Canceled", "Socket closed");, +    callback.await(server.url("/")).assertFailure("Canceled", "Socket closed");, +    // Force requests to be executed serially., +    okhttp3.Dispatcher dispatcher = new okhttp3.Dispatcher(client.dispatcher().executorService());, +    dispatcher.setMaxRequests(1);, +    client = client.newBuilder(), +        .dispatcher(dispatcher), +        .build();, +    callback.await(requestB.url()).assertFailure("Canceled", "Socket closed");, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, +  private static final Dispatcher dispatcher = new Dispatcher();, +        .dispatcher(dispatcher), +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, +      call.cancel();, +      call.cancel();, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +        return ((RealCall) call).engine.streamAllocation;, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    callback.await(server.url("/a")).assertFailure("Canceled", "Socket closed");, +    callback.await(server.url("/")).assertFailure("Canceled", "Socket closed");, +    // Force requests to be executed serially., +    okhttp3.Dispatcher dispatcher = new okhttp3.Dispatcher(client.dispatcher().executorService());, +    dispatcher.setMaxRequests(1);, +    client = client.newBuilder(), +        .dispatcher(dispatcher), +        .build();, +    callback.await(requestB.url()).assertFailure("Canceled", "Socket closed");, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, +  private static final Dispatcher dispatcher = new Dispatcher();, +        .dispatcher(dispatcher), +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, +      call.cancel();, +      call.cancel();, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +        return ((RealCall) call).engine.streamAllocation;, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import java.net.HttpRetryException;, +import java.net.ProtocolException;, +import okhttp3.internal.http.HttpEngine;, +import okhttp3.internal.http.RouteException;, +import okhttp3.internal.http.UnrepeatableRequestBody;, +import static okhttp3.internal.http.HttpEngine.MAX_FOLLOW_UPS;, +  volatile boolean canceled;, +  private boolean forWebSocket;, +  HttpEngine engine;, +    this.forWebSocket = true;, +    canceled = true;, +    if (engine != null) engine.cancel();, +    return canceled;, +    void cancel() {, +      RealCall.this.cancel();, +    }, +, +        if (canceled) {, +    String string = canceled ? "canceled call" : "call";, +    interceptors.add(new RetryAndFollowUpInterceptor());, +    if (!forWebSocket) {, +    interceptors.add(new HttpEngine.CallServerInterceptor(forWebSocket));, +, +  /**]