[+++ b/okhttp-testing-support/src/main/java/okhttp3/FakeDns.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +  private final Map<String, List<InetAddress>> hostAddresses = new LinkedHashMap<>();, +  private final List<String> requestedHosts = new ArrayList<>();, +  private int nextAddress = 100;, +  /** Sets the results for {@code hostname}. */, +  public FakeDns set(String hostname, List<InetAddress> addresses) {, +    hostAddresses.put(hostname, addresses);, +  /** Clears the results for {@code hostname}. */, +  public FakeDns clear(String hostname) {, +    hostAddresses.remove(hostname);, +  public InetAddress lookup(String hostname, int index) throws UnknownHostException {, +    return hostAddresses.get(hostname).get(index);, +, +    List<InetAddress> result = hostAddresses.get(hostname);, +    if (result != null) return result;, +, +    throw new UnknownHostException();, +, +  /** Allocates and returns {@code count} fake addresses like [255.0.0.100, 255.0.0.101]. */, +  public List<InetAddress> allocate(int count) {, +    try {, +      List<InetAddress> result = new ArrayList<>();, +      for (int i = 0; i < count; i++) {, +        if (nextAddress > 255) {, +          throw new AssertionError("too many addresses allocated");, +        }, +        result.add(InetAddress.getByAddress(, +            new byte[] {(byte) 255, (byte) 0, (byte) 0, (byte) nextAddress++}));, +      }, +      return result;, +    } catch (UnknownHostException e) {, +      throw new AssertionError();, +    }, +  }, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeDns.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +  private final Map<String, List<InetAddress>> hostAddresses = new LinkedHashMap<>();, +  private final List<String> requestedHosts = new ArrayList<>();, +  private int nextAddress = 100;, +  /** Sets the results for {@code hostname}. */, +  public FakeDns set(String hostname, List<InetAddress> addresses) {, +    hostAddresses.put(hostname, addresses);, +  /** Clears the results for {@code hostname}. */, +  public FakeDns clear(String hostname) {, +    hostAddresses.remove(hostname);, +  public InetAddress lookup(String hostname, int index) throws UnknownHostException {, +    return hostAddresses.get(hostname).get(index);, +, +    List<InetAddress> result = hostAddresses.get(hostname);, +    if (result != null) return result;, +, +    throw new UnknownHostException();, +, +  /** Allocates and returns {@code count} fake addresses like [255.0.0.100, 255.0.0.101]. */, +  public List<InetAddress> allocate(int count) {, +    try {, +      List<InetAddress> result = new ArrayList<>();, +      for (int i = 0; i < count; i++) {, +        if (nextAddress > 255) {, +          throw new AssertionError("too many addresses allocated");, +        }, +        result.add(InetAddress.getByAddress(, +            new byte[] {(byte) 255, (byte) 0, (byte) 0, (byte) nextAddress++}));, +      }, +      return result;, +    } catch (UnknownHostException e) {, +      throw new AssertionError();, +    }, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        .dns(new FakeDns()), +    // Configure a DNS that returns our local MockWebServer for android.com., +    dns.set("android.com", Dns.SYSTEM.lookup(server.url("/").host()));, +++ b/okhttp-testing-support/src/main/java/okhttp3/FakeDns.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +  private final Map<String, List<InetAddress>> hostAddresses = new LinkedHashMap<>();, +  private final List<String> requestedHosts = new ArrayList<>();, +  private int nextAddress = 100;, +  /** Sets the results for {@code hostname}. */, +  public FakeDns set(String hostname, List<InetAddress> addresses) {, +    hostAddresses.put(hostname, addresses);, +  /** Clears the results for {@code hostname}. */, +  public FakeDns clear(String hostname) {, +    hostAddresses.remove(hostname);, +  public InetAddress lookup(String hostname, int index) throws UnknownHostException {, +    return hostAddresses.get(hostname).get(index);, +, +    List<InetAddress> result = hostAddresses.get(hostname);, +    if (result != null) return result;, +, +    throw new UnknownHostException();, +, +  /** Allocates and returns {@code count} fake addresses like [255.0.0.100, 255.0.0.101]. */, +  public List<InetAddress> allocate(int count) {, +    try {, +      List<InetAddress> result = new ArrayList<>();]