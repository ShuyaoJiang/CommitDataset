[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +  private Response.Callback callback;, +    callback = new Response.Callback() {, +    client.call(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +  private Response.Callback callback;, +    callback = new Response.Callback() {, +    client.call(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, +  private RecordingCallback callback = new RecordingCallback();, +    client.call(request).execute(callback);, +    callback.await(request.url()), +    client.call(new Request.Builder().url(server.getUrl("/a")).build()).execute(callback);, +    callback.await(server.getUrl("/a")).assertBody("abc");, +    client.call(new Request.Builder().url(server.getUrl("/b")).build()).execute(callback);, +    callback.await(server.getUrl("/b")).assertBody("def");, +    client.call(new Request.Builder().url(server.getUrl("/c")).build()).execute(callback);, +    callback.await(server.getUrl("/c")).assertBody("ghi");, +    client.call(request).execute(callback);, +    callback.await(request.url()).assertHandshake();, +    client.call(request).execute(callback);, +    callback.await(request.url()).assertBody("abc");, +    client.call(request).execute(callback);, +    callback.await(request.url()), +    client.call(request1).execute(callback);, +    callback.await(request1.url()).assertCode(200).assertBody("A");, +    client.call(request2).execute(callback);, +    callback.await(request2.url()).assertCode(200).assertBody("A");, +    client.call(request1).execute(callback);, +    callback.await(request1.url()).assertCode(200).assertBody("A");, +    client.call(request2).execute(callback);, +    callback.await(request2.url()).assertCode(200).assertBody("B");, +    client.call(request).execute(callback);, +    callback.await(server.getUrl("/c")), +    client.call(request).execute(callback);, +    callback.await(server.getUrl("/20")), +    client.call(request).execute(callback);, +    callback.await(server.getUrl("/20")).assertFailure("Too many redirects: 21");, +    client.call(requestA).execute(callback);, +    client.call(requestB).execute(callback);, +    callback.await(requestA.url()).assertBody("A");, +    // At this point we know the callback is ready, and that it will receive a cancel failure., +    callback.await(requestB.url()).assertFailure("Canceled");, +    client.call(requestA).execute(callback);, +    callback.await(requestA.url()).assertFailure("Canceled");, +    final Call call = client.call(request);, +    call.execute(new Response.Callback() {, +        call.cancel();, +    client.call(request).execute(new Response.Callback() {, +        client.call(new Request.Builder().url(server.getUrl("/b")).build()).execute(callback);, +    callback.await(server.getUrl("/b")).assertCode(200).assertBody("def");, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +  private Response.Callback callback;, +    callback = new Response.Callback() {, +    client.call(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, +  private RecordingCallback callback = new RecordingCallback();, +    client.call(request).execute(callback);, +    callback.await(request.url()), +    client.call(new Request.Builder().url(server.getUrl("/a")).build()).execute(callback);, +    callback.await(server.getUrl("/a")).assertBody("abc");, +    client.call(new Request.Builder().url(server.getUrl("/b")).build()).execute(callback);, +    callback.await(server.getUrl("/b")).assertBody("def");, +    client.call(new Request.Builder().url(server.getUrl("/c")).build()).execute(callback);, +    callback.await(server.getUrl("/c")).assertBody("ghi");, +    client.call(request).execute(callback);, +    callback.await(request.url()).assertHandshake();, +    client.call(request).execute(callback);, +    callback.await(request.url()).assertBody("abc");, +    client.call(request).execute(callback);, +    callback.await(request.url()), +    client.call(request1).execute(callback);, +    callback.await(request1.url()).assertCode(200).assertBody("A");, +    client.call(request2).execute(callback);, +    callback.await(request2.url()).assertCode(200).assertBody("A");, +    client.call(request1).execute(callback);, +    callback.await(request1.url()).assertCode(200).assertBody("A");, +    client.call(request2).execute(callback);, +    callback.await(request2.url()).assertCode(200).assertBody("B");, +    client.call(request).execute(callback);, +    callback.await(server.getUrl("/c")), +    client.call(request).execute(callback);, +    callback.await(server.getUrl("/20")), +    client.call(request).execute(callback);, +    callback.await(server.getUrl("/20")).assertFailure("Too many redirects: 21");, +    client.call(requestA).execute(callback);, +    client.call(requestB).execute(callback);, +    callback.await(requestA.url()).assertBody("A");, +    // At this point we know the callback is ready, and that it will receive a cancel failure., +    callback.await(requestB.url()).assertFailure("Canceled");, +    client.call(requestA).execute(callback);, +    callback.await(requestA.url()).assertFailure("Canceled");, +    final Call call = client.call(request);, +    call.execute(new Response.Callback() {, +        call.cancel();, +    client.call(request).execute(new Response.Callback() {, +        client.call(new Request.Builder().url(server.getUrl("/b")).build()).execute(callback);, +    callback.await(server.getUrl("/b")).assertCode(200).assertBody("def");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/DispatcherTest.java, +  RecordingCallback callback = new RecordingCallback();]