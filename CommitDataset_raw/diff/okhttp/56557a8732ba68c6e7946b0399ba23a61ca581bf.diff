[+++ b/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.java, +  /** Returns true if there is a failure that retrying might fix. */, +  boolean hasStreamFailure() {, +      return hasStreamFailure;, +    }, +  }, +  /** Returns true if a current route is still good or if there are routes we haven't tried yet. */, +  boolean hasRouteToTry() {, +    synchronized (connectionPool) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.java, +  /** Returns true if there is a failure that retrying might fix. */, +  boolean hasStreamFailure() {, +      return hasStreamFailure;, +    }, +  }, +  /** Returns true if a current route is still good or if there are routes we haven't tried yet. */, +  boolean hasRouteToTry() {, +    synchronized (connectionPool) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Transmitter.java, +      if (sameConnection(this.request.url(), request.url()) && exchangeFinder.hasRouteToTry()) {, +        return; // Already ready., +      }, +    return exchangeFinder.hasStreamFailure() && exchangeFinder.hasRouteToTry();, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.java, +  /** Returns true if there is a failure that retrying might fix. */, +  boolean hasStreamFailure() {, +      return hasStreamFailure;, +    }, +  }, +  /** Returns true if a current route is still good or if there are routes we haven't tried yet. */, +  boolean hasRouteToTry() {, +    synchronized (connectionPool) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Transmitter.java, +      if (sameConnection(this.request.url(), request.url()) && exchangeFinder.hasRouteToTry()) {, +        return; // Already ready., +      }, +    return exchangeFinder.hasStreamFailure() && exchangeFinder.hasRouteToTry();, +++ b/okhttp/src/test/java/okhttp3/CallTest.java, +  /** https://github.com/square/okhttp/issues/4875 */, +  @Test public void interceptorRecoversWhenRoutesExhausted() throws Exception {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_START));, +    server.enqueue(new MockResponse());, +, +    client = client.newBuilder(), +        .addInterceptor(new Interceptor() {, +          @Override public Response intercept(Chain chain) throws IOException {, +            try {, +              chain.proceed(chain.request());, +              throw new AssertionError();, +            } catch (IOException expected) {, +              return chain.proceed(chain.request());, +            }, +          }, +        }), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    executeSynchronously(request), +        .assertCode(200);, +  }, +]