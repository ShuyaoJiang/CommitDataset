[+++ b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java, +      if (hasRequestBody) {, +        // Request body headers are only present when installed as a network interceptor. Force, +        // them to be included (when available) so there values are known., +        if (requestBody.contentType() != null) {, +          logger.log("Content-Type: " + requestBody.contentType());, +        }, +        if (requestBody.contentLength() != -1) {, +          logger.log("Content-Length: " + requestBody.contentLength());, +        }, +      }, +, +        String name = headers.name(i);, +        // Skip headers from the request body as they are explicitly logged above., +        if (!"Content-Type".equalsIgnoreCase(name) && !"Content-Length".equalsIgnoreCase(name)) {, +          logger.log(name + ": " + headers.value(i));, +        }, +++ b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java, +      if (hasRequestBody) {, +        // Request body headers are only present when installed as a network interceptor. Force, +        // them to be included (when available) so there values are known., +        if (requestBody.contentType() != null) {, +          logger.log("Content-Type: " + requestBody.contentType());, +        }, +        if (requestBody.contentLength() != -1) {, +          logger.log("Content-Length: " + requestBody.contentLength());, +        }, +      }, +, +        String name = headers.name(i);, +        // Skip headers from the request body as they are explicitly logged above., +        if (!"Content-Type".equalsIgnoreCase(name) && !"Content-Length".equalsIgnoreCase(name)) {, +          logger.log(name + ": " + headers.value(i));, +        }, +++ b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java, +import okio.BufferedSink;, +        .assertLogEqual("Content-Type: text/plain; charset=utf-8"), +        .assertLogEqual("Content-Length: 3"), +  @Test public void headersPostNoContentType() throws IOException {, +    setLevel(Level.HEADERS);, +, +    server.enqueue(new MockResponse());, +    client.newCall(request().post(RequestBody.create(null, "Hi?")).build()).execute();, +, +    applicationLogs, +        .assertLogEqual("--> POST / HTTP/1.1"), +        .assertLogEqual("Content-Length: 3"), +        .assertLogEqual("--> END POST"), +        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)"), +        .assertLogEqual("Content-Length: 0"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogMatch("OkHttp-Sent-Millis: \\d+"), +        .assertLogMatch("OkHttp-Received-Millis: \\d+"), +        .assertLogEqual("<-- END HTTP"), +        .assertNoMoreLogs();, +, +    networkLogs, +        .assertLogEqual("--> POST / HTTP/1.1"), +        .assertLogEqual("Content-Length: 3"), +        .assertLogEqual("Host: " + host), +        .assertLogEqual("Connection: Keep-Alive"), +        .assertLogEqual("Accept-Encoding: gzip"), +        .assertLogMatch("User-Agent: okhttp/.+"), +        .assertLogEqual("--> END POST"), +        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)"), +        .assertLogEqual("Content-Length: 0"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogMatch("OkHttp-Sent-Millis: \\d+"), +        .assertLogMatch("OkHttp-Received-Millis: \\d+"), +        .assertLogEqual("<-- END HTTP"), +        .assertNoMoreLogs();, +  }, +, +  @Test public void headersPostNoLength() throws IOException {, +    setLevel(Level.HEADERS);, +, +    server.enqueue(new MockResponse());, +    RequestBody body = new RequestBody() {, +      @Override public MediaType contentType() {, +        return PLAIN;, +      }, +, +      @Override public void writeTo(BufferedSink sink) throws IOException {, +        sink.writeUtf8("Hi!");, +      }, +    };, +    client.newCall(request().post(body).build()).execute();, +, +    applicationLogs, +        .assertLogEqual("--> POST / HTTP/1.1"), +        .assertLogEqual("Content-Type: text/plain; charset=utf-8"), +        .assertLogEqual("--> END POST"), +        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)"), +        .assertLogEqual("Content-Length: 0"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogMatch("OkHttp-Sent-Millis: \\d+"), +        .assertLogMatch("OkHttp-Received-Millis: \\d+"), +        .assertLogEqual("<-- END HTTP"), +        .assertNoMoreLogs();, +]