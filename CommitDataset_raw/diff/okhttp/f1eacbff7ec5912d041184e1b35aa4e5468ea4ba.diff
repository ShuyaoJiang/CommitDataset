[+++ b/pom.xml, +                    <consoleOutput>true</consoleOutput>, +++ b/pom.xml, +                    <consoleOutput>true</consoleOutput>, +++ b/src/main/java/libcore/net/http/HttpsURLConnectionImpl.java, +            // Get a connection. This may return a pooled connection!, +            // If the TLS connection is ready, use it., +            // The TLS connection isn't ready. Build a tunnel if necessary and then handshake., +            if (connection.getAddress().requiresTunnel()) {, +                makeTunnel(policy, connection, getRequestHeaders());, +            }, +++ b/pom.xml, +                    <consoleOutput>true</consoleOutput>, +++ b/src/main/java/libcore/net/http/HttpsURLConnectionImpl.java, +            // Get a connection. This may return a pooled connection!, +            // If the TLS connection is ready, use it., +            // The TLS connection isn't ready. Build a tunnel if necessary and then handshake., +            if (connection.getAddress().requiresTunnel()) {, +                makeTunnel(policy, connection, getRequestHeaders());, +            }, +++ b/src/test/java/libcore/net/http/URLConnectionTest.java, +    public void testProxyWithConnectionReuse() throws IOException {, +        SSLSocketFactory socketFactory = sslContext.getSocketFactory();, +        RecordingHostnameVerifier hostnameVerifier = new RecordingHostnameVerifier();, +, +        server.useHttps(socketFactory, true);, +        server.enqueue(new MockResponse(), +                .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END), +                .clearHeaders());, +        server.enqueue(new MockResponse().setBody("response 1"));, +        server.enqueue(new MockResponse().setBody("response 2"));, +        server.play();, +, +        URL url = new URL("https://android.com/foo");, +        OkHttpsConnection connection1 = (OkHttpsConnection) openConnection(, +                url, server.toProxyAddress());, +        connection1.setSSLSocketFactory(socketFactory);, +        connection1.setHostnameVerifier(hostnameVerifier);, +        assertContent("response 1", connection1);, +, +        OkHttpsConnection connection2 = (OkHttpsConnection) openConnection(, +                url, server.toProxyAddress());, +        connection2.setSSLSocketFactory(socketFactory);, +        connection2.setHostnameVerifier(hostnameVerifier);, +        assertContent("response 2", connection2);, +    }, +]