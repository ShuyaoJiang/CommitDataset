[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java, +/** Handler for mock server requests. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java, +/** Handler for mock server requests. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.Util;, +/** A scripted response to be replayed by the mock web server. */, +  /** Creates a new mock response with an empty body. */, +  /** Returns the HTTP response line, such as "HTTP/1.1 200 OK". */, +  /** Returns the HTTP headers, such as "Content-Length: 0". */, +   * Adds {@code header} as an HTTP header. For well-formed HTTP {@code header}, +   * should contain a name followed by a colon and a value., +   * Adds a new header with the name and value. This may be used to add multiple, +   * headers with the same name., +  /** Removes all headers named {@code name}. */, +  /** Returns the raw HTTP payload, or null if this response is streamed. */, +  /** Returns an input stream containing the raw HTTP payload. */, +  /** Sets the response body to the UTF-8 encoded bytes of {@code body}. */, +   * Sets the response body to {@code body}, chunked every {@code maxChunkSize}, +   * bytes., +        bytesOut.write(Integer.toHexString(chunkSize).getBytes(Util.US_ASCII));, +        bytesOut.write("\r\n".getBytes(Util.US_ASCII));, +        bytesOut.write("\r\n".getBytes(Util.US_ASCII));, +      bytesOut.write("0\r\n\r\n".getBytes(Util.US_ASCII)); // Last chunk + empty trailer + crlf., +   * Sets the response body to the UTF-8 encoded bytes of {@code body}, chunked, +   * every {@code maxChunkSize} bytes., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java, +/** Handler for mock server requests. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.Util;, +/** A scripted response to be replayed by the mock web server. */, +  /** Creates a new mock response with an empty body. */, +  /** Returns the HTTP response line, such as "HTTP/1.1 200 OK". */, +  /** Returns the HTTP headers, such as "Content-Length: 0". */, +   * Adds {@code header} as an HTTP header. For well-formed HTTP {@code header}, +   * should contain a name followed by a colon and a value., +   * Adds a new header with the name and value. This may be used to add multiple, +   * headers with the same name., +  /** Removes all headers named {@code name}. */, +  /** Returns the raw HTTP payload, or null if this response is streamed. */, +  /** Returns an input stream containing the raw HTTP payload. */, +  /** Sets the response body to the UTF-8 encoded bytes of {@code body}. */, +   * Sets the response body to {@code body}, chunked every {@code maxChunkSize}, +   * bytes., +        bytesOut.write(Integer.toHexString(chunkSize).getBytes(Util.US_ASCII));, +        bytesOut.write("\r\n".getBytes(Util.US_ASCII));, +        bytesOut.write("\r\n".getBytes(Util.US_ASCII));, +      bytesOut.write("0\r\n\r\n".getBytes(Util.US_ASCII)); // Last chunk + empty trailer + crlf., +   * Sets the response body to the UTF-8 encoded bytes of {@code body}, chunked, +   * every {@code maxChunkSize} bytes., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, + * Copyright (C) 2013 Square, Inc., +  private static final X509TrustManager UNTRUSTED_TRUST_MANAGER = new X509TrustManager() {, +    @Override public void checkClientTrusted(X509Certificate[] chain, String authType), +        throws CertificateException {, +      throw new CertificateException();, +    }, +, +    @Override public void checkServerTrusted(X509Certificate[] chain, String authType) {, +      throw new AssertionError();, +    }, +, +    @Override public X509Certificate[] getAcceptedIssuers() {, +      throw new AssertionError();, +    }, +  };, +, +  private final BlockingQueue<RecordedRequest> requestQueue =, +      new LinkedBlockingQueue<RecordedRequest>();, +, +    if (port == -1) throw new IllegalStateException("Cannot retrieve port before calling play()");, +   * non-loopback host name if it is known. Otherwise this returns ".local" for, +   * this server's loopback name., +   * @param tunnelProxy true to expect the HTTP CONNECT method before, +   * use this to verify the request was sent as intended., +   * Returns the number of HTTP requests received thus far by this server. This, +   * may exceed the number of HTTP connections when connection reuse is in, +   * practice., +   * Scripts {@code response} to be returned to a request made in sequence. The, +   * first request is served by the first enqueued response; the second request, +   * by the second enqueued response; and so on., +  /** Equivalent to {@code play(0)}. */, +   * Starts the server, serves all enqueued requests, and shuts the server down., +   * @param port the port to listen to, or 0 for any available port. Automated, +   *     tests should always use port 0 to avoid flakiness when a specific port, +   *     is unavailable., +    if (executor != null) throw new IllegalStateException("play() already called");, +        // This gnarly block of code will release all sockets and all thread,, +        // even if any close fails., +        Util.closeQuietly(serverSocket);, +          Util.closeQuietly(s.next());, +        for (Iterator<SpdyConnection> s = openSpdyConnections.keySet().iterator(); s.hasNext(); ) {, +          Util.closeQuietly(s.next());, +          SocketPolicy socketPolicy = dispatcher.peekSocketPolicy();, +      serverSocket.close(); // Should cause acceptConnections() to break out., +          SocketPolicy socketPolicy = dispatcher.peekSocketPolicy();, +              throw new IllegalStateException(, +                  "Unexpected transport: " + new String(selectedProtocol, Util.US_ASCII));, +       * Respond to CONNECT requests until a SWITCH_TO_SSL_AT_END response is, +       * dispatched.]