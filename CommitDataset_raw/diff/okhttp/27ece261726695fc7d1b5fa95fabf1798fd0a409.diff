[+++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +import javax.net.ssl.SSLSocketFactory;, +import javax.net.ssl.X509TrustManager;, +import okhttp3.internal.platform.Platform;, +  @Test public void equalsFromCertificate() throws Exception {, +    HeldCertificate rootA = new HeldCertificate.Builder(), +        .serialNumber("1"), +        .build();, +    HeldCertificate rootB = new HeldCertificate.Builder(), +        .serialNumber("2"), +        .build();, +    assertEquals(, +        CertificateChainCleaner.get(rootA.certificate, rootB.certificate),, +        CertificateChainCleaner.get(rootB.certificate, rootA.certificate));, +  }, +, +  @Test public void equalsFromTrustManager() throws Exception {, +    Platform platform = Platform.get();, +    X509TrustManager x509TrustManager = platform.trustManager(, +        (SSLSocketFactory) SSLSocketFactory.getDefault());, +    assertEquals(, +        CertificateChainCleaner.get(x509TrustManager),, +        CertificateChainCleaner.get(x509TrustManager));, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +import javax.net.ssl.SSLSocketFactory;, +import javax.net.ssl.X509TrustManager;, +import okhttp3.internal.platform.Platform;, +  @Test public void equalsFromCertificate() throws Exception {, +    HeldCertificate rootA = new HeldCertificate.Builder(), +        .serialNumber("1"), +        .build();, +    HeldCertificate rootB = new HeldCertificate.Builder(), +        .serialNumber("2"), +        .build();, +    assertEquals(, +        CertificateChainCleaner.get(rootA.certificate, rootB.certificate),, +        CertificateChainCleaner.get(rootB.certificate, rootA.certificate));, +  }, +, +  @Test public void equalsFromTrustManager() throws Exception {, +    Platform platform = Platform.get();, +    X509TrustManager x509TrustManager = platform.trustManager(, +        (SSLSocketFactory) SSLSocketFactory.getDefault());, +    assertEquals(, +        CertificateChainCleaner.get(x509TrustManager),, +        CertificateChainCleaner.get(x509TrustManager));, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +, +  @Test public void certificatePinnerEquality() {, +    OkHttpClient clientA = TestUtil.defaultClient();, +    OkHttpClient clientB = TestUtil.defaultClient();, +    assertEquals(clientA.certificatePinner(), clientB.certificatePinner());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +import javax.net.ssl.SSLSocketFactory;, +import javax.net.ssl.X509TrustManager;, +import okhttp3.internal.platform.Platform;, +  @Test public void equalsFromCertificate() throws Exception {, +    HeldCertificate rootA = new HeldCertificate.Builder(), +        .serialNumber("1"), +        .build();, +    HeldCertificate rootB = new HeldCertificate.Builder(), +        .serialNumber("2"), +        .build();, +    assertEquals(, +        CertificateChainCleaner.get(rootA.certificate, rootB.certificate),, +        CertificateChainCleaner.get(rootB.certificate, rootA.certificate));, +  }, +, +  @Test public void equalsFromTrustManager() throws Exception {, +    Platform platform = Platform.get();, +    X509TrustManager x509TrustManager = platform.trustManager(, +        (SSLSocketFactory) SSLSocketFactory.getDefault());, +    assertEquals(, +        CertificateChainCleaner.get(x509TrustManager),, +        CertificateChainCleaner.get(x509TrustManager));, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +, +  @Test public void certificatePinnerEquality() {, +    OkHttpClient clientA = TestUtil.defaultClient();, +    OkHttpClient clientB = TestUtil.defaultClient();, +    assertEquals(clientA.certificatePinner(), clientB.certificatePinner());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +import java.net.CookieManager;, +  @Test public void connectViaHttpsReusingConnections() throws Exception {, +    connectViaHttpsReusingConnections(false);, +  }, +, +  @Test public void connectViaHttpsReusingConnectionsAfterRebuildingClient() throws Exception {, +    connectViaHttpsReusingConnections(true);, +  }, +, +  private void connectViaHttpsReusingConnections(boolean rebuildClient) throws Exception {]