[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.squareup.okhttp.internal.framed;, +, +import com.squareup.okhttp.Protocol;, +import com.squareup.okhttp.internal.Platform;, +import com.squareup.okhttp.internal.SslContextBuilder;, +import com.squareup.okhttp.internal.Util;, +import java.io.File;, +import java.io.IOException;, +import java.net.ProtocolException;, +import java.net.ServerSocket;, +import java.net.Socket;, +import java.util.Arrays;, +import java.util.List;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +import javax.net.ssl.SSLSocket;, +import javax.net.ssl.SSLSocketFactory;, +import okio.BufferedSink;, +import okio.Okio;, +import okio.Source;, +, +/** A basic SPDY/HTTP_2 server that serves the contents of a local directory. */, +public final class FramedServer implements IncomingStreamHandler {, +  static final Logger logger = Logger.getLogger(FramedServer.class.getName());, +, +  private final List<Protocol> framedProtocols =, +      Util.immutableList(Protocol.HTTP_2, Protocol.SPDY_3);, +, +  private final File baseDirectory;, +  private final SSLSocketFactory sslSocketFactory;, +, +  public FramedServer(File baseDirectory, SSLSocketFactory sslSocketFactory) {, +    this.baseDirectory = baseDirectory;, +    this.sslSocketFactory = sslSocketFactory;, +  }, +, +  private void run() throws Exception {, +    ServerSocket serverSocket = new ServerSocket(8888);, +    serverSocket.setReuseAddress(true);, +, +    while (true) {, +      Socket socket = null;, +      try {, +        socket = serverSocket.accept();, +, +        SSLSocket sslSocket = doSsl(socket);, +        String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +        Protocol protocol = protocolString != null ? Protocol.get(protocolString) : null;, +        if (protocol == null || !framedProtocols.contains(protocol)) {, +          throw new ProtocolException("Protocol " + protocol + " unsupported");, +        }, +        FramedConnection framedConnection = new FramedConnection.Builder(false, sslSocket), +            .protocol(protocol), +            .handler(this), +            .build();, +        framedConnection.sendConnectionPreface();, +      } catch (IOException e) {, +        logger.log(Level.INFO, "FramedServer connection failure: " + e);, +        Util.closeQuietly(socket);, +      } catch (Exception e) {, +        logger.log(Level.WARNING, "FramedServer unexpected failure", e);, +        Util.closeQuietly(socket);, +      }, +    }, +  }, +, +  private SSLSocket doSsl(Socket socket) throws IOException {, +    SSLSocket sslSocket = (SSLSocket) sslSocketFactory.createSocket(, +        socket, socket.getInetAddress().getHostAddress(), socket.getPort(), true);, +    sslSocket.setUseClientMode(false);, +    Platform.get().configureTlsExtensions(sslSocket, null, framedProtocols);, +    sslSocket.startHandshake();, +    return sslSocket;, +  }, +, +  @Override public void receive(final FramedStream stream) throws IOException {, +    try {, +      List<Header> requestHeaders = stream.getRequestHeaders();, +      String path = null;, +      for (int i = 0, size = requestHeaders.size(); i < size; i++) {, +        if (requestHeaders.get(i).name.equals(Header.TARGET_PATH)) {, +          path = requestHeaders.get(i).value.utf8();, +          break;]