[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +        "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +        "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +        "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +        streamAllocation.streamFinished(true, streamAllocation.codec(), -1L, null);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +        "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +        streamAllocation.streamFinished(true, streamAllocation.codec(), -1L, null);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +  public void streamFinished(boolean noNewStreams, HttpCodec codec, long bytesRead, IOException e) {, +    eventListener.responseBodyEnd(call, bytesRead);, +, +    boolean callEnd;, +      callEnd = this.released;, +, +    if (e != null) {, +      eventListener.callFailed(call, e);, +    } else if (callEnd) {, +      eventListener.callEnd(call);, +    }, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +        "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +        streamAllocation.streamFinished(true, streamAllocation.codec(), -1L, null);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +  public void streamFinished(boolean noNewStreams, HttpCodec codec, long bytesRead, IOException e) {, +    eventListener.responseBodyEnd(call, bytesRead);, +, +    boolean callEnd;, +      callEnd = this.released;, +, +    if (e != null) {, +      eventListener.callFailed(call, e);, +    } else if (callEnd) {, +      eventListener.callEnd(call);, +    }, +++ b/okhttp/src/main/java/okhttp3/internal/http1/Http1Codec.java, +        streamAllocation.streamFinished(!reuseConnection, Http1Codec.this, bytesRead, e);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +        "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +        streamAllocation.streamFinished(true, streamAllocation.codec(), -1L, null);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +  public void streamFinished(boolean noNewStreams, HttpCodec codec, long bytesRead, IOException e) {, +    eventListener.responseBodyEnd(call, bytesRead);, +, +    boolean callEnd;, +      callEnd = this.released;, +, +    if (e != null) {, +      eventListener.callFailed(call, e);, +    } else if (callEnd) {, +      eventListener.callEnd(call);, +    }, +++ b/okhttp/src/main/java/okhttp3/internal/http1/Http1Codec.java, +        streamAllocation.streamFinished(!reuseConnection, Http1Codec.this, bytesRead, e);, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java, +      streamAllocation.streamFinished(false, Http2Codec.this, bytesRead, e);]