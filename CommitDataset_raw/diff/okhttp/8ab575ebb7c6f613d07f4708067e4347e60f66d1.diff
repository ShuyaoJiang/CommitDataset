[+++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.atomic.AtomicInteger;, +import okhttp3.internal.ws.RealWebSocket;, +import static java.util.concurrent.TimeUnit.SECONDS;, +import static org.junit.Assert.assertTrue;, +  @Test public void writingOnReaderThreadThrows() throws IOException, InterruptedException {, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +, +    Request request = new Request.Builder().get().url(webServer.url("/")).build();, +    RealWebSocketCall call = new RealWebSocketCall(client, request, random);, +, +    final AtomicInteger count = new AtomicInteger();, +    final CountDownLatch latch = new CountDownLatch(1);, +    call.enqueue(new WebSocketListener() {, +      private WebSocket webSocket;, +, +      @Override public void onOpen(WebSocket webSocket, Response response) {, +        this.webSocket = webSocket;, +, +        try {, +          webSocket.close(1000, "");, +          fail();, +        } catch (IllegalStateException e) {, +          assertEquals("attempting to write from reader thread", e.getMessage());, +        } catch (IOException e) {, +          throw new AssertionError(e);, +        }, +, +        count.getAndIncrement();, +      }, +, +      @Override public void onMessage(ResponseBody message) throws IOException {, +        try {, +          webSocket.message(RequestBody.create(TEXT, "hey"));, +          fail();, +        } catch (IllegalStateException e) {, +          assertEquals("attempting to write from reader thread", e.getMessage());, +        }, +, +        message.close();, +        count.getAndIncrement();, +      }, +, +      @Override public void onPong(ByteString payload) {, +        try {, +          webSocket.ping(ByteString.EMPTY);, +          fail();, +        } catch (IllegalStateException e) {, +          assertEquals("attempting to write from reader thread", e.getMessage());, +        } catch (IOException e) {, +          throw new AssertionError(e);, +        }, +, +        count.getAndIncrement();, +      }, +, +      @Override public void onClose(int code, String reason) {, +        latch.countDown();, +      }, +, +      @Override public void onFailure(Throwable t, Response response) {, +        t.printStackTrace();, +      }, +    });, +, +    WebSocket server = serverListener.assertOpen();, +    server.message(RequestBody.create(TEXT, "hi"));, +    ((RealWebSocket) server).pong(ByteString.EMPTY);, +    server.close(1000, "");, +, +    assertTrue(latch.await(10, SECONDS));, +    // Verify we hit all three callbacks and attempted to write in them., +    assertEquals(3, count.get());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.atomic.AtomicInteger;, +import okhttp3.internal.ws.RealWebSocket;, +import static java.util.concurrent.TimeUnit.SECONDS;, +import static org.junit.Assert.assertTrue;, +  @Test public void writingOnReaderThreadThrows() throws IOException, InterruptedException {, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +, +    Request request = new Request.Builder().get().url(webServer.url("/")).build();, +    RealWebSocketCall call = new RealWebSocketCall(client, request, random);, +, +    final AtomicInteger count = new AtomicInteger();, +    final CountDownLatch latch = new CountDownLatch(1);, +    call.enqueue(new WebSocketListener() {, +      private WebSocket webSocket;, +, +      @Override public void onOpen(WebSocket webSocket, Response response) {, +        this.webSocket = webSocket;, +, +        try {, +          webSocket.close(1000, "");, +          fail();, +        } catch (IllegalStateException e) {]