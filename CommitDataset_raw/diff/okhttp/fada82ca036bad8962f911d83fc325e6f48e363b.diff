[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +  @Test public void relativePathWithTrailingSlash() throws Exception {, +    HttpUrl base = HttpUrl.parse("http://host/a/b/c/");, +    assertEquals(HttpUrl.parse("http://host/a/b/"), base.resolve(".."));, +    assertEquals(HttpUrl.parse("http://host/a/b/"), base.resolve("../"));, +    assertEquals(HttpUrl.parse("http://host/a/"), base.resolve("../.."));, +    assertEquals(HttpUrl.parse("http://host/a/"), base.resolve("../../"));, +    assertEquals(HttpUrl.parse("http://host/"), base.resolve("../../.."));, +    assertEquals(HttpUrl.parse("http://host/"), base.resolve("../../../"));, +    assertEquals(HttpUrl.parse("http://host/"), base.resolve("../../../.."));, +    assertEquals(HttpUrl.parse("http://host/"), base.resolve("../../../../"));, +    assertEquals(HttpUrl.parse("http://host/a"), base.resolve("../../../../a"));, +    assertEquals(HttpUrl.parse("http://host/"), base.resolve("../../../../a/.."));, +    assertEquals(HttpUrl.parse("http://host/a/"), base.resolve("../../../../a/b/.."));, +  }, +, +    assertEquals("", HttpUrl.parse("http://user:@host/").decodePassword());, +    assertEquals("", url.password());, +, +  @Test public void composeMixingPathSegments() throws Exception {, +    HttpUrl url = new HttpUrl.Builder(), +        .scheme("http"), +        .host("host"), +        .encodedPath("/a%2fb/c"), +        .addPathSegment("d%25e"), +        .addEncodedPathSegment("f%25g"), +        .build();, +    assertEquals("http://host/a%2fb/c/d%2525e/f%25g", url.toString());, +    assertEquals("/a%2fb/c/d%2525e/f%25g", url.path());, +    assertEquals(Arrays.asList("a%2fb", "c", "d%2525e", "f%25g"), url.pathSegments());, +    assertEquals(Arrays.asList("a/b", "c", "d%25e", "f%g"), url.decodePathSegments());, +  }, +, +  @Test public void composeWithAddSegment() throws Exception {, +    HttpUrl base = HttpUrl.parse("http://host/a/b/c");, +    assertEquals("/a/b/c/", base.newBuilder().addPathSegment("").build().path());, +    assertEquals("/a/b/c/d",, +        base.newBuilder().addPathSegment("").addPathSegment("d").build().path());, +    assertEquals("/a/b/", base.newBuilder().addPathSegment("..").build().path());, +    assertEquals("/a/b/", base.newBuilder().addPathSegment("%2e.").build().path());, +    assertEquals("/a/",, +        base.newBuilder().addPathSegment("%2e.").addPathSegment("..").build().path());, +    assertEquals("/a/b/", base.newBuilder().addPathSegment("").addPathSegment("..").build().path());, +    assertEquals("/a/b/c/", base.newBuilder().addPathSegment("").addPathSegment("").build().path());, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +  @Test public void relativePathWithTrailingSlash() throws Exception {, +    HttpUrl base = HttpUrl.parse("http://host/a/b/c/");, +    assertEquals(HttpUrl.parse("http://host/a/b/"), base.resolve(".."));, +    assertEquals(HttpUrl.parse("http://host/a/b/"), base.resolve("../"));, +    assertEquals(HttpUrl.parse("http://host/a/"), base.resolve("../.."));, +    assertEquals(HttpUrl.parse("http://host/a/"), base.resolve("../../"));, +    assertEquals(HttpUrl.parse("http://host/"), base.resolve("../../.."));, +    assertEquals(HttpUrl.parse("http://host/"), base.resolve("../../../"));, +    assertEquals(HttpUrl.parse("http://host/"), base.resolve("../../../.."));, +    assertEquals(HttpUrl.parse("http://host/"), base.resolve("../../../../"));, +    assertEquals(HttpUrl.parse("http://host/a"), base.resolve("../../../../a"));, +    assertEquals(HttpUrl.parse("http://host/"), base.resolve("../../../../a/.."));, +    assertEquals(HttpUrl.parse("http://host/a/"), base.resolve("../../../../a/b/.."));, +  }, +, +    assertEquals("", HttpUrl.parse("http://user:@host/").decodePassword());, +    assertEquals("", url.password());, +, +  @Test public void composeMixingPathSegments() throws Exception {, +    HttpUrl url = new HttpUrl.Builder(), +        .scheme("http"), +        .host("host"), +        .encodedPath("/a%2fb/c"), +        .addPathSegment("d%25e"), +        .addEncodedPathSegment("f%25g"), +        .build();, +    assertEquals("http://host/a%2fb/c/d%2525e/f%25g", url.toString());, +    assertEquals("/a%2fb/c/d%2525e/f%25g", url.path());, +    assertEquals(Arrays.asList("a%2fb", "c", "d%2525e", "f%25g"), url.pathSegments());, +    assertEquals(Arrays.asList("a/b", "c", "d%25e", "f%g"), url.decodePathSegments());, +  }, +, +  @Test public void composeWithAddSegment() throws Exception {, +    HttpUrl base = HttpUrl.parse("http://host/a/b/c");, +    assertEquals("/a/b/c/", base.newBuilder().addPathSegment("").build().path());, +    assertEquals("/a/b/c/d",, +        base.newBuilder().addPathSegment("").addPathSegment("d").build().path());, +    assertEquals("/a/b/", base.newBuilder().addPathSegment("..").build().path());, +    assertEquals("/a/b/", base.newBuilder().addPathSegment("%2e.").build().path());, +    assertEquals("/a/",, +        base.newBuilder().addPathSegment("%2e.").addPathSegment("..").build().path());, +    assertEquals("/a/b/", base.newBuilder().addPathSegment("").addPathSegment("..").build().path());, +    assertEquals("/a/b/c/", base.newBuilder().addPathSegment("").addPathSegment("").build().path());, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpUrl.java, + * In addition to composing URLs from their component parts and decomposing URLs into their, + * to retrieve the resource. Although URLs have many schemes ({@code mailto}, {@code file}, {@code, + * ftp}), this class only supports {@code http} and {@code https}. Use {@link URI java.net.URI} for, + * URLs with arbitrary schemes., +  /** Canonical username. */, +  /** Canonical password. */, +  /** Canonical hostname. */, +  /**, +   * A list of canonical path segments. This list always contains at least one element, which may]