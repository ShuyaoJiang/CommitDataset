[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +     * (highest) thru 2^31-1 (lowest), defaulting to 2^30., +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +     * (highest) thru 2^31-1 (lowest), defaulting to 2^30., +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +      boolean endStream = (flags & FLAG_END_STREAM) != 0;, +      int priority = ((flags & FLAG_PRIORITY) != 0) ? in.readInt() & 0x7fffffff : -1;, +          handler.headers(false, endStream, streamId, -1, priority, nameValueBlock,, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +     * (highest) thru 2^31-1 (lowest), defaulting to 2^30., +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +      boolean endStream = (flags & FLAG_END_STREAM) != 0;, +      int priority = ((flags & FLAG_PRIORITY) != 0) ? in.readInt() & 0x7fffffff : -1;, +          handler.headers(false, endStream, streamId, -1, priority, nameValueBlock,, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/Http20Draft09Test.java, +  @Test public void headersWithPriority() throws IOException {, +    ByteArrayOutputStream out = new ByteArrayOutputStream();, +    DataOutputStream dataOut = new DataOutputStream(out);, +, +    final List<Header> sentHeaders = headerEntries("name", "value");, +, +    { // Write the headers frame, specifying priority flag and value., +      byte[] headerBytes = literalHeaders(sentHeaders);, +      dataOut.writeShort(headerBytes.length);, +      dataOut.write(Http20Draft09.TYPE_HEADERS);, +      dataOut.write(Http20Draft09.FLAG_END_HEADERS | Http20Draft09.FLAG_PRIORITY);, +      dataOut.writeInt(expectedStreamId & 0x7fffffff); // stream with reserved bit set, +      dataOut.writeInt(0); // Highest priority is 0., +      dataOut.write(headerBytes);, +    }, +, +    FrameReader fr = newReader(out);, +, +    // Consume the headers frame., +    fr.nextFrame(new BaseTestHandler() {, +, +      @Override, +      public void headers(boolean outFinished, boolean inFinished, int streamId,, +          int associatedStreamId, int priority, List<Header> nameValueBlock,, +          HeadersMode headersMode) {, +        assertFalse(outFinished);, +        assertFalse(inFinished);, +        assertEquals(expectedStreamId, streamId);, +        assertEquals(-1, associatedStreamId);, +        assertEquals(0, priority);, +        assertEquals(sentHeaders, nameValueBlock);, +        assertEquals(HeadersMode.HTTP_20_HEADERS, headersMode);, +      }, +    });, +  }, +]