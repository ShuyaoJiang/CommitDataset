[+++ b/.travis.yml, +before_install:, + - mvn -version, +, +++ b/.travis.yml, +before_install:, + - mvn -version, +, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java, +import java.util.concurrent.ExecutorService;, +  private boolean client = false;, +  private Variant variant = new Spdy3();, +  private FrameWriter frameWriter = variant.newWriter(bytesOut, client);;, +  private final ExecutorService executor = Executors.newCachedThreadPool(, +  public void setVariantAndClient(Variant variant, boolean client) {, +    if (this.variant.getProtocol() == variant.getProtocol() && this.client == client) {, +      return;, +    }, +    port = serverSocket.getLocalPort();, +          Util.closeQuietly(MockSpdyPeer.this);, +  @Override public synchronized void close() throws IOException {, +    executor.shutdown();, +      Util.closeQuietly(socket);, +      Util.closeQuietly(serverSocket);, +++ b/.travis.yml, +before_install:, + - mvn -version, +, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java, +import java.util.concurrent.ExecutorService;, +  private boolean client = false;, +  private Variant variant = new Spdy3();, +  private FrameWriter frameWriter = variant.newWriter(bytesOut, client);;, +  private final ExecutorService executor = Executors.newCachedThreadPool(, +  public void setVariantAndClient(Variant variant, boolean client) {, +    if (this.variant.getProtocol() == variant.getProtocol() && this.client == client) {, +      return;, +    }, +    port = serverSocket.getLocalPort();, +          Util.closeQuietly(MockSpdyPeer.this);, +  @Override public synchronized void close() throws IOException {, +    executor.shutdown();, +      Util.closeQuietly(socket);, +      Util.closeQuietly(serverSocket);, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +  private final MockSpdyPeer peer = new MockSpdyPeer();, +    peer.setVariantAndClient(variant, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, false);, +, +    peer.setVariantAndClient(variant, false);, +    peer.setVariantAndClient(variant, false);, +, +    peer.setVariantAndClient(variant, false);, +    peer.setVariantAndClient(variant, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, client);, +++ b/.travis.yml, +before_install:, + - mvn -version, +, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java, +import java.util.concurrent.ExecutorService;, +  private boolean client = false;, +  private Variant variant = new Spdy3();, +  private FrameWriter frameWriter = variant.newWriter(bytesOut, client);;, +  private final ExecutorService executor = Executors.newCachedThreadPool(, +  public void setVariantAndClient(Variant variant, boolean client) {, +    if (this.variant.getProtocol() == variant.getProtocol() && this.client == client) {, +      return;, +    }, +    port = serverSocket.getLocalPort();, +          Util.closeQuietly(MockSpdyPeer.this);, +  @Override public synchronized void close() throws IOException {, +    executor.shutdown();, +      Util.closeQuietly(socket);, +      Util.closeQuietly(serverSocket);, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +  private final MockSpdyPeer peer = new MockSpdyPeer();, +    peer.setVariantAndClient(variant, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, false);, +, +    peer.setVariantAndClient(variant, false);, +    peer.setVariantAndClient(variant, false);, +, +    peer.setVariantAndClient(variant, false);, +    peer.setVariantAndClient(variant, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, false);, +    peer.setVariantAndClient(HTTP_20_DRAFT_09, client);, +++ b/okhttp/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    httpA.connect(200, 200, null);, +    httpB.connect(200, 200, null);, +    httpC.connect(200, 200, null);, +    httpD.connect(200, 200, null);, +    httpE.connect(200, 200, null);]