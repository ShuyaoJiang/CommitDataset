[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener) {, +    server = new RealWebSocket(false, client2Server, server2client, random, serverListener) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener) {, +    server = new RealWebSocket(false, client2Server, server2client, random, serverListener) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Cache.java, +  // TODO: add APIs to iterate the cache?, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener) {, +    server = new RealWebSocket(false, client2Server, server2client, random, serverListener) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Cache.java, +  // TODO: add APIs to iterate the cache?, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpConnection.java, + *   <li>Write to and then close that sink., + *   <li>Open a source to read the response body. Either {@link, + *   <li>Read from and close that source., + * the request body. Exchanges that do not have a response body can call {@link, + * #newFixedLengthSource(long) newFixedLengthSource(0)} and may skip reading and, + * closing that source., +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener) {, +    server = new RealWebSocket(false, client2Server, server2client, random, serverListener) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Cache.java, +  // TODO: add APIs to iterate the cache?, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpConnection.java, + *   <li>Write to and then close that sink., + *   <li>Open a source to read the response body. Either {@link, + *   <li>Read from and close that source., + * the request body. Exchanges that do not have a response body can call {@link, + * #newFixedLengthSource(long) newFixedLengthSource(0)} and may skip reading and, + * closing that source., +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java, +      final WebSocketListener listener) {, +    final ThreadPoolExecutor pongExecutor =, +        new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>());, +        pongExecutor.execute(new NamedRunnable("WebSocket PongWriter") {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener) {, +    server = new RealWebSocket(false, client2Server, server2client, random, serverListener) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Cache.java, +  // TODO: add APIs to iterate the cache?, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpConnection.java, + *   <li>Write to and then close that sink., + *   <li>Open a source to read the response body. Either {@link, + *   <li>Read from and close that source., + * the request body. Exchanges that do not have a response body can call {@link, + * #newFixedLengthSource(long) newFixedLengthSource(0)} and may skip reading and, + * closing that source., +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java, +      final WebSocketListener listener) {, +    final ThreadPoolExecutor pongExecutor =, +        new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>());, +        pongExecutor.execute(new NamedRunnable("WebSocket PongWriter") {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/ws/WebSocketCall.java, +        new ConnectionWebSocket(connection, source, sink, random, listener);, +    new Thread(new NamedRunnable("WebSocketReader " + request.urlString()) {, +    public ConnectionWebSocket(Connection connection, BufferedSource source, BufferedSink sink,, +        Random random, WebSocketListener listener) {, +      super(true /* is client */, source, sink, random, listener);]