[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java, +import java.util.concurrent.CopyOnWriteArraySet;, +import org.junit.Test;, +import static org.junit.Assert.fail;, +  @Test public void noTlsVersions() throws Exception {, +    try {, +      new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +          .tlsVersions(new TlsVersion[0]), +          .build();, +      fail();, +    } catch (IllegalArgumentException expected) {, +      assertEquals("At least one TLS version is required", expected.getMessage());, +    }, +  }, +  @Test public void noCipherSuites() throws Exception {, +    try {, +      new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +          .cipherSuites(new CipherSuite[0]), +          .build();, +      fail();, +    } catch (IllegalArgumentException expected) {, +      assertEquals("At least one cipher suite is required", expected.getMessage());, +    }, +  }, +, +  @Test public void cleartextBuilder() throws Exception {, +  @Test public void tlsBuilder_explicitCiphers() throws Exception {, +  @Test public void tlsBuilder_defaultCiphers() throws Exception {, +  @Test public void tls_defaultCiphers_noFallbackIndicator() throws Exception {, +    assertEquals(set(TlsVersion.TLS_1_2.javaName), set(socket.getEnabledProtocols()));, +        set(, +  @Test public void tls_defaultCiphers_withFallbackIndicator() throws Exception {, +    assertEquals(set(TlsVersion.TLS_1_2.javaName), set(socket.getEnabledProtocols()));, +        set(, +  @Test public void tls_explicitCiphers() throws Exception {, +    assertEquals(set(TlsVersion.TLS_1_2.javaName), set(socket.getEnabledProtocols()));, +    Set<String> expectedCipherSet = set(CipherSuite.TLS_RSA_WITH_RC4_128_MD5.javaName);, +  @Test public void tls_stringCiphersAndVersions() throws Exception {, +  @Test public void tls_missingRequiredCipher() throws Exception {, +  @Test public void allEnabledCipherSuites() throws Exception {, +    ConnectionSpec tlsSpec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +        .allEnabledCipherSuites(), +        .build();, +    assertNull(tlsSpec.cipherSuites());, +, +    SSLSocket sslSocket = (SSLSocket) SSLSocketFactory.getDefault().createSocket();, +    sslSocket.setEnabledCipherSuites(new String[] {, +        CipherSuite.TLS_RSA_WITH_RC4_128_SHA.javaName,, +        CipherSuite.TLS_RSA_WITH_RC4_128_MD5.javaName,, +    });, +, +    tlsSpec.apply(sslSocket, false);, +    assertEquals(Arrays.asList(, +            CipherSuite.TLS_RSA_WITH_RC4_128_SHA.javaName,, +            CipherSuite.TLS_RSA_WITH_RC4_128_MD5.javaName),, +        Arrays.asList(sslSocket.getEnabledCipherSuites()));, +  }, +, +  @Test public void allEnabledTlsVersions() throws Exception {, +    ConnectionSpec tlsSpec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +        .allEnabledTlsVersions(), +        .build();, +    assertNull(tlsSpec.tlsVersions());, +, +    SSLSocket sslSocket = (SSLSocket) SSLSocketFactory.getDefault().createSocket();, +    sslSocket.setEnabledProtocols(new String[] {, +        TlsVersion.SSL_3_0.javaName(),, +        TlsVersion.TLS_1_1.javaName(), +    });, +, +    tlsSpec.apply(sslSocket, false);, +    assertEquals(Arrays.asList(TlsVersion.SSL_3_0.javaName(), TlsVersion.TLS_1_1.javaName()),, +        Arrays.asList(sslSocket.getEnabledProtocols()));, +  }, +, +  @Test public void tls_missingTlsVersion() throws Exception {, +  @Test public void equalsAndHashCode() throws Exception {, +    ConnectionSpec allCipherSuites = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +        .allEnabledCipherSuites(), +        .build();, +    ConnectionSpec allTlsVersions = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +        .allEnabledTlsVersions(), +        .build();, +, +    Set<Object> set = new CopyOnWriteArraySet<>();, +    assertTrue(set.add(ConnectionSpec.MODERN_TLS));, +    assertTrue(set.add(ConnectionSpec.COMPATIBLE_TLS));, +    assertTrue(set.add(ConnectionSpec.CLEARTEXT));, +    assertTrue(set.add(allTlsVersions));, +    assertTrue(set.add(allCipherSuites));, +, +    assertTrue(set.remove(ConnectionSpec.MODERN_TLS));, +    assertTrue(set.remove(ConnectionSpec.COMPATIBLE_TLS));, +    assertTrue(set.remove(ConnectionSpec.CLEARTEXT));, +    assertTrue(set.remove(allTlsVersions));, +    assertTrue(set.remove(allCipherSuites));, +    assertTrue(set.isEmpty());, +  }, +, +  @Test public void allEnabledToString() throws Exception {]