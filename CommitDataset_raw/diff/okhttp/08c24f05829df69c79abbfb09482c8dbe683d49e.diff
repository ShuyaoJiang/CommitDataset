[+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/PushObserver.java, + * Processes server-initiated HTTP requests on the client. Implementations must, + * quickly dispatch callbacks to avoid creating a bottleneck., + * <p>While {@link #onReset} may occur at any time, the following callbacks are, + * expected in order, correlated by stream ID., + * <ul>, + *   <li>{@link #onRequest}</li>, + *   <li>{@link #onHeaders} (unless canceled)</li>, + *   <li>{@link #onData} (optional sequence of data frames)</li>, + * </ul>, + *, + * <p>As a stream ID is scoped to a single HTTP/2 connection, implementations, + * which target multiple connections should expect repetition of stream IDs., +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/PushObserver.java, + * Processes server-initiated HTTP requests on the client. Implementations must, + * quickly dispatch callbacks to avoid creating a bottleneck., + * <p>While {@link #onReset} may occur at any time, the following callbacks are, + * expected in order, correlated by stream ID., + * <ul>, + *   <li>{@link #onRequest}</li>, + *   <li>{@link #onHeaders} (unless canceled)</li>, + *   <li>{@link #onData} (optional sequence of data frames)</li>, + * </ul>, + *, + * <p>As a stream ID is scoped to a single HTTP/2 connection, implementations, + * which target multiple connections should expect repetition of stream IDs., +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +import java.util.concurrent.LinkedBlockingQueue;, +  /** Ensures push promise callbacks events are sent in order per stream. */, +  private final ExecutorService pushExecutor;, +, +      // Like newSingleThreadExecutor, except lazy creates the thread., +      pushExecutor = new ThreadPoolExecutor(0, 1,, +          0L, TimeUnit.MILLISECONDS,, +          new LinkedBlockingQueue<Runnable>(),, +          Util.threadFactory(String.format("OkHttp %s Push Observer", hostName), true));, +      pushExecutor = null;, +    pushExecutor.submit(new NamedRunnable("OkHttp %s Push Request[%s]", hostName, streamId) {, +    pushExecutor.submit(new NamedRunnable("OkHttp %s Push Headers[%s]", hostName, streamId) {, +    pushExecutor.submit(new NamedRunnable("OkHttp %s Push Data[%s]", hostName, streamId) {, +    pushExecutor.submit(new NamedRunnable("OkHttp %s Push Reset[%s]", hostName, streamId) {]