[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.Util;, +, +  @Test public void basicChallenge() {, +    Headers headers = new Headers.Builder(), +        .add("WWW-Authenticate: Basic realm=\"protected area\""), +        .build();, +    assertEquals(Arrays.asList(new Challenge("Basic", "protected area")),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +  }, +, +  @Test public void basicChallengeWithCharset() {, +    Headers headers = new Headers.Builder(), +        .add("WWW-Authenticate: Basic realm=\"protected area\", charset=\"UTF-8\""), +        .build();, +    assertEquals(Arrays.asList(new Challenge("Basic", "protected area").withCharset(Util.UTF_8)),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +  }, +, +  @Test public void basicChallengeWithUnexpectedCharset() {, +    Headers headers = new Headers.Builder(), +        .add("WWW-Authenticate: Basic realm=\"protected area\", charset=\"US-ASCII\""), +        .build();, +    assertEquals(Collections.emptyList(), HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.Util;, +, +  @Test public void basicChallenge() {, +    Headers headers = new Headers.Builder(), +        .add("WWW-Authenticate: Basic realm=\"protected area\""), +        .build();, +    assertEquals(Arrays.asList(new Challenge("Basic", "protected area")),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +  }, +, +  @Test public void basicChallengeWithCharset() {, +    Headers headers = new Headers.Builder(), +        .add("WWW-Authenticate: Basic realm=\"protected area\", charset=\"UTF-8\""), +        .build();, +    assertEquals(Arrays.asList(new Challenge("Basic", "protected area").withCharset(Util.UTF_8)),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +  }, +, +  @Test public void basicChallengeWithUnexpectedCharset() {, +    Headers headers = new Headers.Builder(), +        .add("WWW-Authenticate: Basic realm=\"protected area\", charset=\"US-ASCII\""), +        .build();, +    assertEquals(Collections.emptyList(), HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +import java.net.PasswordAuthentication;, +  @Test public void authenticateWithCharset() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(401), +        .addHeader("WWW-Authenticate: Basic realm=\"protected area\", charset=\"UTF-8\""), +        .setBody("Please authenticate with UTF-8."));, +    server.enqueue(new MockResponse().setResponseCode(401), +        .addHeader("WWW-Authenticate: Basic realm=\"protected area\""), +        .setBody("Please authenticate with ISO-8859-1."));, +    server.enqueue(new MockResponse(), +        .setBody("Successful auth!"));, +, +    Authenticator.setDefault(new RecordingAuthenticator(, +        new PasswordAuthentication("username", "m√∂torhead".toCharArray())));, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .authenticator(new JavaNetAuthenticator()), +        .build());, +    connection = urlFactory.open(server.url("/").url());, +    assertEquals("Successful auth!", readAscii(connection.getInputStream(), Integer.MAX_VALUE));, +, +    // No authorization header for the first request..., +    RecordedRequest request1 = server.takeRequest();, +    assertNull(request1.getHeader("Authorization"));, +, +    // UTF-8 encoding for the first credential., +    RecordedRequest request2 = server.takeRequest();, +    assertEquals("Basic dXNlcm5hbWU6bcO2dG9yaGVhZA==", request2.getHeader("Authorization"));, +, +    // ISO-8859-1 encoding for the second credential., +    RecordedRequest request3 = server.takeRequest();, +    assertEquals("Basic dXNlcm5hbWU6bfZ0b3JoZWFk", request3.getHeader("Authorization"));, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.Util;, +, +  @Test public void basicChallenge() {, +    Headers headers = new Headers.Builder(), +        .add("WWW-Authenticate: Basic realm=\"protected area\""), +        .build();, +    assertEquals(Arrays.asList(new Challenge("Basic", "protected area")),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +  }, +, +  @Test public void basicChallengeWithCharset() {, +    Headers headers = new Headers.Builder(), +        .add("WWW-Authenticate: Basic realm=\"protected area\", charset=\"UTF-8\""), +        .build();, +    assertEquals(Arrays.asList(new Challenge("Basic", "protected area").withCharset(Util.UTF_8)),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));]