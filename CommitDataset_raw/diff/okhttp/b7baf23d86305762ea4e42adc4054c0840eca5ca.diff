[+++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/AndroidShimResponseCache.java, +    Response okResponse = JavaApiConverter.createOkResponseForCachePut(uri, urlConnection);, +    if (okResponse == null) {, +      // The URLConnection is not cacheable or could not be converted. Stop., +      return null;, +    }, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/AndroidShimResponseCache.java, +    Response okResponse = JavaApiConverter.createOkResponseForCachePut(uri, urlConnection);, +    if (okResponse == null) {, +      // The URLConnection is not cacheable or could not be converted. Stop., +      return null;, +    }, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/CacheAdapter.java, +    return JavaApiConverter.createOkResponseForCacheGet(request, javaResponse);, +    HttpURLConnection connection = JavaApiConverter.createJavaUrlConnectionForCachePut(response);, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/AndroidShimResponseCache.java, +    Response okResponse = JavaApiConverter.createOkResponseForCachePut(uri, urlConnection);, +    if (okResponse == null) {, +      // The URLConnection is not cacheable or could not be converted. Stop., +      return null;, +    }, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/CacheAdapter.java, +    return JavaApiConverter.createOkResponseForCacheGet(request, javaResponse);, +    HttpURLConnection connection = JavaApiConverter.createJavaUrlConnectionForCachePut(response);, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +import com.squareup.okhttp.internal.Internal;, +import java.util.Set;, +   * to supply the data. The URLConnection is assumed to already be connected. If this method, +   * returns {@code null} the response is uncacheable., +  public static Response createOkResponseForCachePut(URI uri, URLConnection urlConnection), +      throws IOException {, +, +    Headers responseHeaders = createHeaders(urlConnection.getHeaderFields());, +    // Some request headers are needed for Vary caching., +    Headers varyHeaders = varyHeaders(urlConnection, responseHeaders);, +    if (varyHeaders == null) {, +      return null;, +    }, +, +    // OkHttp's Call API requires a placeholder body; the real body will be streamed separately., +    String requestMethod = httpUrlConnection.getRequestMethod();, +    RequestBody placeholderBody = HttpMethod.requiresRequestBody(requestMethod), +        ? EMPTY_REQUEST_BODY, +        : null;, +, +    Request okRequest = new Request.Builder(), +        .url(uri.toString()), +        .method(requestMethod, placeholderBody), +        .headers(varyHeaders), +        .build();, +    // A network response is required for the Cache to find any Vary headers it needs., +    Response networkResponse = okResponseBuilder.build();, +    okResponseBuilder.networkResponse(networkResponse);, +, +   * Returns headers for the header names and values in the {@link Map}., +   */, +  private static Headers createHeaders(Map<String, List<String>> headers) {, +    Headers.Builder builder = new Headers.Builder();, +    for (Map.Entry<String, List<String>> header : headers.entrySet()) {, +      if (header.getKey() == null || header.getValue() == null) {, +        continue;, +      }, +      String name = header.getKey().trim();, +      for (String value : header.getValue()) {, +        String trimmedValue = value.trim();, +        Internal.instance.addLenient(builder, name, trimmedValue);, +      }, +    }, +    return builder.build();, +  }, +, +  private static Headers varyHeaders(URLConnection urlConnection, Headers responseHeaders) {, +    if (OkHeaders.hasVaryAll(responseHeaders)) {, +      // "*" means that this will be treated as uncacheable anyway., +      return null;, +    }, +    Set<String> varyFields = OkHeaders.varyFields(responseHeaders);, +    if (varyFields.isEmpty()) {, +      return new Headers.Builder().build();, +    }, +, +    // This probably indicates another HTTP stack is trying to use the shared ResponseCache., +    // We cannot guarantee this case will work properly because we cannot reliably extract *all*, +    // the request header values, and we can't get multiple Vary request header values., +    // We also can't be sure about the Accept-Encoding behavior of other stacks., +    if (!(urlConnection instanceof CacheHttpURLConnection, +        || urlConnection instanceof CacheHttpsURLConnection)) {, +      return null;, +    }, +, +    // This is the case we expect: The URLConnection is from a call to, +    // JavaApiConverter.createJavaUrlConnection() and we have access to the user's request headers., +    Map<String, List<String>> requestProperties = urlConnection.getRequestProperties();, +    Headers.Builder result = new Headers.Builder();, +    for (String fieldName : varyFields) {, +      List<String> fieldValues = requestProperties.get(fieldName);, +      if (fieldValues == null) {, +        if (fieldName.equals("Accept-Encoding")) {, +          // Accept-Encoding is special. If OkHttp sees Accept-Encoding is unset it will add, +          // "gzip". We don't have access to the request that was actually made so we must do the]