[+++ /dev/null, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpDate.java, +  private static final String[] BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS = new String[] {, +  private static final DateFormat[] BROWSER_COMPATIBLE_DATE_FORMATS =, +      new DateFormat[BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS.length];, +, +  /** Returns the date for {@code value}. Returns null if the value couldn't be parsed. */, +    } catch (ParseException ignored) {, +    synchronized (BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS) {, +      for (int i = 0, count = BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS.length; i < count; i++) {, +        DateFormat format = BROWSER_COMPATIBLE_DATE_FORMATS[i];, +        if (format == null) {, +          format = new SimpleDateFormat(BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS[i], Locale.US);, +          BROWSER_COMPATIBLE_DATE_FORMATS[i] = format;, +        }, +          return format.parse(value);, +        } catch (ParseException ignored) {, +        }, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpDate.java, +  private static final String[] BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS = new String[] {, +  private static final DateFormat[] BROWSER_COMPATIBLE_DATE_FORMATS =, +      new DateFormat[BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS.length];, +, +  /** Returns the date for {@code value}. Returns null if the value couldn't be parsed. */, +    } catch (ParseException ignored) {, +    synchronized (BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS) {, +      for (int i = 0, count = BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS.length; i < count; i++) {, +        DateFormat format = BROWSER_COMPATIBLE_DATE_FORMATS[i];, +        if (format == null) {, +          format = new SimpleDateFormat(BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS[i], Locale.US);, +          BROWSER_COMPATIBLE_DATE_FORMATS[i] = format;, +        }, +          return format.parse(value);, +        } catch (ParseException ignored) {, +        }, +++ /dev/null]