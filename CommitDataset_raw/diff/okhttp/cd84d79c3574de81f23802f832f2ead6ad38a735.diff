[+++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java, +import javax.net.ssl.SSLPeerUnverifiedException;, +        .subjectAlternativeName("root_ca.com"), +        .subjectAlternativeName("intermediate_ca.com"), +        .commonName("Local Host"), +        .subjectAlternativeName(server.getHostName()), +        .subjectAlternativeName("root_ca.com"), +        .subjectAlternativeName("intermediate_ca.com"), +        .subjectAlternativeName("jethrowillis.com"), +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +  @Test public void commonNameIsNotTrusted() throws Exception {, +    serverCert = new HeldCertificate.Builder(), +        .issuedBy(serverIntermediateCa), +        .serialNumber("3"), +        .commonName(server.getHostName()), +        .subjectAlternativeName("different-host.com"), +        .build();, +, +    OkHttpClient client = buildClient(clientCert, clientIntermediateCa);, +, +    SSLSocketFactory socketFactory = buildServerSslSocketFactory(ClientAuth.NEEDS);, +, +    server.useHttps(socketFactory, false);, +, +    Call call = client.newCall(new Request.Builder().url(server.url("/")).build());, +, +    try {, +      call.execute();, +      fail();, +    } catch (SSLPeerUnverifiedException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java, +import javax.net.ssl.SSLPeerUnverifiedException;, +        .subjectAlternativeName("root_ca.com"), +        .subjectAlternativeName("intermediate_ca.com"), +        .commonName("Local Host"), +        .subjectAlternativeName(server.getHostName()), +        .subjectAlternativeName("root_ca.com"), +        .subjectAlternativeName("intermediate_ca.com"), +        .subjectAlternativeName("jethrowillis.com"), +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +  @Test public void commonNameIsNotTrusted() throws Exception {, +    serverCert = new HeldCertificate.Builder(), +        .issuedBy(serverIntermediateCa), +        .serialNumber("3"), +        .commonName(server.getHostName()), +        .subjectAlternativeName("different-host.com"), +        .build();, +, +    OkHttpClient client = buildClient(clientCert, clientIntermediateCa);, +, +    SSLSocketFactory socketFactory = buildServerSslSocketFactory(ClientAuth.NEEDS);, +, +    server.useHttps(socketFactory, false);, +, +    Call call = client.newCall(new Request.Builder().url(server.url("/")).build());, +, +    try {, +      call.execute();, +      fail();, +    } catch (SSLPeerUnverifiedException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/HostnameVerifierTest.java, +    assertFalse(verifier.verify("foo.com", session));, +    assertFalse(verifier.verify("\u82b1\u5b50.co.jp", session));, +    assertFalse(verifier.verify("\u82b1\u5b50.co.jp", session));, +    assertFalse(verifier.verify("www.foo.com", session));, +    assertFalse(verifier.verify("\u82b1\u5b50.foo.com", session));, +    assertFalse(verifier.verify("foo.co.jp", session));, +    assertFalse(verifier.verify("\u82b1\u5b50.co.jp", session));, +    assertFalse(verifier.verify("google.com", session));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java, +import javax.net.ssl.SSLPeerUnverifiedException;, +        .subjectAlternativeName("root_ca.com"), +        .subjectAlternativeName("intermediate_ca.com"), +        .commonName("Local Host"), +        .subjectAlternativeName(server.getHostName()), +        .subjectAlternativeName("root_ca.com"), +        .subjectAlternativeName("intermediate_ca.com"), +        .subjectAlternativeName("jethrowillis.com"), +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +    assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal());, +  @Test public void commonNameIsNotTrusted() throws Exception {, +    serverCert = new HeldCertificate.Builder(), +        .issuedBy(serverIntermediateCa), +        .serialNumber("3"), +        .commonName(server.getHostName()), +        .subjectAlternativeName("different-host.com")]