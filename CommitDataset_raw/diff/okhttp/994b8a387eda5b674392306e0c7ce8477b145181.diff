[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +  @Test public void composeEncodesWhitespace() throws Exception {, +    HttpUrl url = new HttpUrl.Builder(), +        .scheme("http"), +        .username("a\r\n\f\t b"), +        .password("c\r\n\f\t d"), +        .host("host"), +        .addPathSegment("e\r\n\f\t f"), +        .query("g\r\n\f\t h"), +        .fragment("i\r\n\f\t j"), +        .build();, +    assertEquals("http://a%0D%0A%0C%09%20b:c%0D%0A%0C%09%20d@host", +        + "/e%0D%0A%0C%09%20f?g%0D%0A%0C%09%20h#i%0D%0A%0C%09 j", url.toString());, +    assertEquals("a\r\n\f\t b", url.username());, +    assertEquals("c\r\n\f\t d", url.password());, +    assertEquals("e\r\n\f\t f", url.pathSegments().get(0));, +    assertEquals("g\r\n\f\t h", url.query());, +    assertEquals("i\r\n\f\t j", url.fragment());, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +  @Test public void composeEncodesWhitespace() throws Exception {, +    HttpUrl url = new HttpUrl.Builder(), +        .scheme("http"), +        .username("a\r\n\f\t b"), +        .password("c\r\n\f\t d"), +        .host("host"), +        .addPathSegment("e\r\n\f\t f"), +        .query("g\r\n\f\t h"), +        .fragment("i\r\n\f\t j"), +        .build();, +    assertEquals("http://a%0D%0A%0C%09%20b:c%0D%0A%0C%09%20d@host", +        + "/e%0D%0A%0C%09%20f?g%0D%0A%0C%09%20h#i%0D%0A%0C%09 j", url.toString());, +    assertEquals("a\r\n\f\t b", url.username());, +    assertEquals("c\r\n\f\t d", url.password());, +    assertEquals("e\r\n\f\t f", url.pathSegments().get(0));, +    assertEquals("g\r\n\f\t h", url.query());, +    assertEquals("i\r\n\f\t j", url.fragment());, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/UrlComponentEncodingTester.java, +      testEncodeAndDecode(codePoint, component);, +      if (encoding == Encoding.SKIP) continue;, +  private void testEncodeAndDecode(int codePoint, Component component) {, +    String expected = Encoding.IDENTITY.encode(codePoint);, +    HttpUrl.Builder builder = HttpUrl.parse("http://host/").newBuilder();, +    component.set(builder, expected);, +    HttpUrl url = builder.build();, +    String actual = component.get(url);, +    if (!expected.equals(actual)) {, +      fail(String.format("Roundtrip %s %#x %s", component, codePoint, url));, +    }, +  }, +, +      @Override public void set(HttpUrl.Builder builder, String value) {, +        builder.username(value);, +      }, +      @Override public String get(HttpUrl url) {, +        return url.username();, +      }, +      @Override public void set(HttpUrl.Builder builder, String value) {, +        builder.password(value);, +      }, +      @Override public String get(HttpUrl url) {, +        return url.password();, +      }, +      @Override public void set(HttpUrl.Builder builder, String value) {, +        builder.addPathSegment("a" + value + "z");, +      }, +      @Override public String get(HttpUrl url) {, +        String pathSegment = url.pathSegments().get(0);, +        return pathSegment.substring(1, pathSegment.length() - 1);, +      }, +      @Override public void set(HttpUrl.Builder builder, String value) {, +        builder.query(value);, +      }, +      @Override public String get(HttpUrl url) {, +        return url.query();, +      }, +      @Override public void set(HttpUrl.Builder builder, String value) {, +        builder.fragment(value);, +      }, +      @Override public String get(HttpUrl url) {, +        return url.fragment();, +      }, +, +    public abstract void set(HttpUrl.Builder builder, String value);, +, +    public abstract String get(HttpUrl url);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +  @Test public void composeEncodesWhitespace() throws Exception {, +    HttpUrl url = new HttpUrl.Builder(), +        .scheme("http"), +        .username("a\r\n\f\t b"), +        .password("c\r\n\f\t d"), +        .host("host"), +        .addPathSegment("e\r\n\f\t f"), +        .query("g\r\n\f\t h"), +        .fragment("i\r\n\f\t j"), +        .build();]