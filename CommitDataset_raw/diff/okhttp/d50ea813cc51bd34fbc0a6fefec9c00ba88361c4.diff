[+++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +    BufferedSink requestBody = duplexRequestBody.createSink();, +    try (Response response = call.execute()) {, +    BufferedSink requestBody = duplexRequestBody.createSink();, +    try (Response response = call.execute()) {, +    BufferedSink sink = ((DuplexRequestBody) request.body).createSink();, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +    BufferedSink requestBody = duplexRequestBody.createSink();, +    try (Response response = call.execute()) {, +    BufferedSink requestBody = duplexRequestBody.createSink();, +    try (Response response = call.execute()) {, +    BufferedSink sink = ((DuplexRequestBody) request.body).createSink();, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +    BufferedSink requestBody = duplexRequestBody.createSink();, +    try (Response response = call.execute()) {, +    BufferedSink requestBody = duplexRequestBody.createSink();, +    try (Response response = call.execute()) {, +    BufferedSink sink = ((DuplexRequestBody) request.body).createSink();, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +++ b/okhttp/src/main/java/okhttp3/internal/duplex/DuplexRequestBody.java, + * completed streaming. Interleaving of request and response data is why this mechanism is called, + * duplex. Though any call may be initiated as a duplex call, only web servers that are specially, + * designed for this nonstandard interaction will use it. As of 2019-01, the only widely-used, + * implementation of this pattern is gRPC., + * {@code okhttp3.logging.HttpLoggingInterceptor logging interceptor}., +public final class DuplexRequestBody extends RequestBody {, +  public BufferedSink createSink() {]