[+++ b/README.md, +  <version>2.2.0</version>, +compile 'com.squareup.okhttp:okhttp:2.2.0', +  <version>2.2.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.2.0', +++ b/README.md, +  <version>2.2.0</version>, +compile 'com.squareup.okhttp:okhttp:2.2.0', +  <version>2.2.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.2.0', +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +   * As per the spec, the status line is held as the header with the null key. Throws a, +   * {@link ProtocolException} if there is no status line., +  static String extractStatusLine(Map<String, List<String>> javaResponseHeaders), +      throws ProtocolException {, +      // The status line is missing. This suggests a badly behaving cache., +      throw new ProtocolException(, +          "CacheResponse is missing a \'null\' header containing the status line. Headers=", +          + javaResponseHeaders);, +++ b/README.md, +  <version>2.2.0</version>, +compile 'com.squareup.okhttp:okhttp:2.2.0', +  <version>2.2.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.2.0', +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +   * As per the spec, the status line is held as the header with the null key. Throws a, +   * {@link ProtocolException} if there is no status line., +  static String extractStatusLine(Map<String, List<String>> javaResponseHeaders), +      throws ProtocolException {, +      // The status line is missing. This suggests a badly behaving cache., +      throw new ProtocolException(, +          "CacheResponse is missing a \'null\' header containing the status line. Headers=", +          + javaResponseHeaders);, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java, +  /** Test for https://code.google.com/p/android/issues/detail?id=160522 */, +  @Test public void createOkResponse_fromCacheResponseWithMissingStatusLine() throws Exception {, +    URI uri = new URI("http://foo/bar");, +    Request request = new Request.Builder().url(uri.toURL()).build();, +    CacheResponse cacheResponse = new CacheResponse() {, +      @Override public Map<String, List<String>> getHeaders() throws IOException {, +        Map<String, List<String>> headers = new HashMap<>();, +        // Headers is deliberately missing an entry with a null key., +        headers.put("xyzzy", Arrays.asList("bar", "baz"));, +        return headers;, +      }, +, +      @Override public InputStream getBody() throws IOException {, +        return null; // Should never be called, +      }, +    };, +, +    try {, +      JavaApiConverter.createOkResponse(request, cacheResponse);, +      fail();, +    } catch (IOException expected) {, +    }, +  }, +, +  @Test public void extractStatusLine() throws Exception {, +    try {, +      JavaApiConverter.extractStatusLine(Collections.<String, List<String>>emptyMap());, +      fail();, +    } catch (IOException expected) {, +    }, +++ b/README.md, +  <version>2.2.0</version>, +compile 'com.squareup.okhttp:okhttp:2.2.0', +  <version>2.2.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.2.0', +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +   * As per the spec, the status line is held as the header with the null key. Throws a, +   * {@link ProtocolException} if there is no status line., +  static String extractStatusLine(Map<String, List<String>> javaResponseHeaders), +      throws ProtocolException {, +      // The status line is missing. This suggests a badly behaving cache., +      throw new ProtocolException(, +          "CacheResponse is missing a \'null\' header containing the status line. Headers=", +          + javaResponseHeaders);, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java, +  /** Test for https://code.google.com/p/android/issues/detail?id=160522 */, +  @Test public void createOkResponse_fromCacheResponseWithMissingStatusLine() throws Exception {, +    URI uri = new URI("http://foo/bar");, +    Request request = new Request.Builder().url(uri.toURL()).build();, +    CacheResponse cacheResponse = new CacheResponse() {, +      @Override public Map<String, List<String>> getHeaders() throws IOException {, +        Map<String, List<String>> headers = new HashMap<>();, +        // Headers is deliberately missing an entry with a null key., +        headers.put("xyzzy", Arrays.asList("bar", "baz"));, +        return headers;, +      }, +, +      @Override public InputStream getBody() throws IOException {, +        return null; // Should never be called, +      }, +    };, +, +    try {, +      JavaApiConverter.createOkResponse(request, cacheResponse);, +      fail();, +    } catch (IOException expected) {]