[+++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java, +public final class RecordingEventListener extends EventListener {, +  public <T> T removeUpToEvent(Class<T> eventClass) {, +  public List<String> recordedEventTypes() {, +  public void clearAllEvents() {, +++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java, +public final class RecordingEventListener extends EventListener {, +  public <T> T removeUpToEvent(Class<T> eventClass) {, +  public List<String> recordedEventTypes() {, +  public void clearAllEvents() {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +import java.util.Collections;, +import okhttp3.RecordingEventListener;, +  @Test public void webSocketsDontTriggerEventListener() throws IOException {, +    RecordingEventListener listener = new RecordingEventListener();, +, +    client = client.newBuilder(), +        .eventListener(listener), +        .build();, +, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +    WebSocket webSocket = newWebSocket();, +, +    clientListener.assertOpen();, +    WebSocket server = serverListener.assertOpen();, +, +    webSocket.send("Web Sockets and Events?!");, +    serverListener.assertTextMessage("Web Sockets and Events?!");, +, +    webSocket.close(1000, "");, +    serverListener.assertClosing(1000, "");, +, +    server.close(1000, "");, +    clientListener.assertClosing(1000, "");, +    clientListener.assertClosed(1000, "");, +    serverListener.assertClosed(1000, "");, +, +    assertEquals(Collections.emptyList(), listener.recordedEventTypes());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java, +public final class RecordingEventListener extends EventListener {, +  public <T> T removeUpToEvent(Class<T> eventClass) {, +  public List<String> recordedEventTypes() {, +  public void clearAllEvents() {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +import java.util.Collections;, +import okhttp3.RecordingEventListener;, +  @Test public void webSocketsDontTriggerEventListener() throws IOException {, +    RecordingEventListener listener = new RecordingEventListener();, +, +    client = client.newBuilder(), +        .eventListener(listener), +        .build();, +, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +    WebSocket webSocket = newWebSocket();, +, +    clientListener.assertOpen();, +    WebSocket server = serverListener.assertOpen();, +, +    webSocket.send("Web Sockets and Events?!");, +    serverListener.assertTextMessage("Web Sockets and Events?!");, +, +    webSocket.close(1000, "");, +    serverListener.assertClosing(1000, "");, +, +    server.close(1000, "");, +    clientListener.assertClosing(1000, "");, +    clientListener.assertClosed(1000, "");, +    serverListener.assertClosed(1000, "");, +, +    assertEquals(Collections.emptyList(), listener.recordedEventTypes());, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +import okhttp3.EventListener;, +        .eventListener(EventListener.NONE)]