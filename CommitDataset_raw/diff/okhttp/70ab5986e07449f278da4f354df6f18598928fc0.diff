[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +    for (int j = 0; j < 2; j++) {, +      try {, +        break;, +      } catch (IOException socketException) {, +        // If there's a socket exception, this must have a streamed request body., +        assertEquals(0, j);, +        assertTrue(transferKind == TransferKind.CHUNKED, +            || transferKind == TransferKind.FIXED_LENGTH);, +      }, +    }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +    for (int j = 0; j < 2; j++) {, +      try {, +        break;, +      } catch (IOException socketException) {, +        // If there's a socket exception, this must have a streamed request body., +        assertEquals(0, j);, +        assertTrue(transferKind == TransferKind.CHUNKED, +            || transferKind == TransferKind.FIXED_LENGTH);, +      }, +    }, +++ b/okhttp/src/main/java/com/squareup/okhttp/Cache.java, +import okio.Buffer;, +        writeCertList(sink, handshake.peerCertificates());, +        writeCertList(sink, handshake.localCertificates());, +          Buffer bytes = new Buffer();, +          bytes.write(ByteString.decodeBase64(line));, +          result.add(certificateFactory.generateCertificate(bytes.inputStream()));, +    private void writeCertList(BufferedSink sink, List<Certificate> certificates), +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +    for (int j = 0; j < 2; j++) {, +      try {, +        break;, +      } catch (IOException socketException) {, +        // If there's a socket exception, this must have a streamed request body., +        assertEquals(0, j);, +        assertTrue(transferKind == TransferKind.CHUNKED, +            || transferKind == TransferKind.FIXED_LENGTH);, +      }, +    }, +++ b/okhttp/src/main/java/com/squareup/okhttp/Cache.java, +import okio.Buffer;, +        writeCertList(sink, handshake.peerCertificates());, +        writeCertList(sink, handshake.localCertificates());, +          Buffer bytes = new Buffer();, +          bytes.write(ByteString.decodeBase64(line));, +          result.add(certificateFactory.generateCertificate(bytes.inputStream()));, +    private void writeCertList(BufferedSink sink, List<Certificate> certificates), +++ b/samples/guide/src/main/java/com/squareup/okhttp/recipes/CustomTrust.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.recipes;, +, +import com.squareup.okhttp.CertificatePinner;, +import com.squareup.okhttp.Headers;, +import com.squareup.okhttp.OkHttpClient;, +import com.squareup.okhttp.Request;, +import com.squareup.okhttp.Response;, +import java.io.IOException;, +import java.io.InputStream;, +import java.security.GeneralSecurityException;, +import java.security.KeyStore;, +import java.security.SecureRandom;, +import java.security.cert.Certificate;, +import java.security.cert.CertificateFactory;, +import java.util.Collection;, +import javax.net.ssl.KeyManagerFactory;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.TrustManagerFactory;, +import okio.Buffer;, +, +public final class CustomTrust {, +  private final OkHttpClient client;, +, +  public CustomTrust() {, +    client = new OkHttpClient();, +    SSLContext sslContext = sslContextForTrustedCertificates(trustedCertificatesInputStream());, +    client.setSslSocketFactory(sslContext.getSocketFactory());, +  }, +, +  public void run() throws Exception {, +    Request request = new Request.Builder(), +        .url("https://publicobject.com/helloworld.txt"), +        .build();, +, +    Response response = client.newCall(request).execute();]