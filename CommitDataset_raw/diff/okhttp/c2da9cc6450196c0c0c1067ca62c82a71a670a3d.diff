[+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, +    long fixedContentLength = httpEngine.policy.getFixedContentLength();, +    long contentLength = httpEngine.requestHeaders.getContentLength();, +    if (contentLength > Integer.MAX_VALUE) {, +      throw new IllegalArgumentException("Use setFixedLengthStreamingMode() or ", +          + "setChunkedStreamingMode() for requests larger than 2 GiB.");, +    }, +, +      return new RetryableOutputStream((int) contentLength);, +    private long bytesRemaining;, +    private FixedLengthOutputStream(OutputStream socketOut, long bytesRemaining) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, +    long fixedContentLength = httpEngine.policy.getFixedContentLength();, +    long contentLength = httpEngine.requestHeaders.getContentLength();, +    if (contentLength > Integer.MAX_VALUE) {, +      throw new IllegalArgumentException("Use setFixedLengthStreamingMode() or ", +          + "setChunkedStreamingMode() for requests larger than 2 GiB.");, +    }, +, +      return new RetryableOutputStream((int) contentLength);, +    private long bytesRemaining;, +    private FixedLengthOutputStream(OutputStream socketOut, long bytesRemaining) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +  /** Like the superclass field of the same name, but a long and available on all platforms. */, +  private long fixedContentLength = -1;, +  final long getFixedContentLength() {, +, +  @Override public void setFixedLengthStreamingMode(int contentLength) {, +    setFixedLengthStreamingMode((long) contentLength);, +  }, +, +  // @Override Don't override: this overload method doesn't exist prior to Java 1.7., +  public void setFixedLengthStreamingMode(long contentLength) {, +    if (super.connected) throw new IllegalStateException("Already connected");, +    if (chunkLength > 0) throw new IllegalStateException("Already in chunked mode");, +    if (contentLength < 0) throw new IllegalArgumentException("contentLength < 0");, +    this.fixedContentLength = contentLength;, +    super.fixedContentLength = (int) Math.min(contentLength, Integer.MAX_VALUE);, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, +    long fixedContentLength = httpEngine.policy.getFixedContentLength();, +    long contentLength = httpEngine.requestHeaders.getContentLength();, +    if (contentLength > Integer.MAX_VALUE) {, +      throw new IllegalArgumentException("Use setFixedLengthStreamingMode() or ", +          + "setChunkedStreamingMode() for requests larger than 2 GiB.");, +    }, +, +      return new RetryableOutputStream((int) contentLength);, +    private long bytesRemaining;, +    private FixedLengthOutputStream(OutputStream socketOut, long bytesRemaining) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +  /** Like the superclass field of the same name, but a long and available on all platforms. */, +  private long fixedContentLength = -1;, +  final long getFixedContentLength() {, +, +  @Override public void setFixedLengthStreamingMode(int contentLength) {, +    setFixedLengthStreamingMode((long) contentLength);, +  }, +, +  // @Override Don't override: this overload method doesn't exist prior to Java 1.7., +  public void setFixedLengthStreamingMode(long contentLength) {, +    if (super.connected) throw new IllegalStateException("Already connected");, +    if (chunkLength > 0) throw new IllegalStateException("Already in chunked mode");, +    if (contentLength < 0) throw new IllegalArgumentException("contentLength < 0");, +    this.fixedContentLength = contentLength;, +    super.fixedContentLength = (int) Math.min(contentLength, Integer.MAX_VALUE);, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RequestHeaders.java, +  private long contentLength = -1;, +  public long getContentLength() {, +  public void setContentLength(long contentLength) {, +    headers.add("Content-Length", Long.toString(contentLength));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, +    long fixedContentLength = httpEngine.policy.getFixedContentLength();, +    long contentLength = httpEngine.requestHeaders.getContentLength();, +    if (contentLength > Integer.MAX_VALUE) {, +      throw new IllegalArgumentException("Use setFixedLengthStreamingMode() or ", +          + "setChunkedStreamingMode() for requests larger than 2 GiB.");, +    }, +, +      return new RetryableOutputStream((int) contentLength);, +    private long bytesRemaining;, +    private FixedLengthOutputStream(OutputStream socketOut, long bytesRemaining) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +  /** Like the superclass field of the same name, but a long and available on all platforms. */, +  private long fixedContentLength = -1;, +  final long getFixedContentLength() {, +, +  @Override public void setFixedLengthStreamingMode(int contentLength) {, +    setFixedLengthStreamingMode((long) contentLength);, +  }, +, +  // @Override Don't override: this overload method doesn't exist prior to Java 1.7., +  public void setFixedLengthStreamingMode(long contentLength) {, +    if (super.connected) throw new IllegalStateException("Already connected");, +    if (chunkLength > 0) throw new IllegalStateException("Already in chunked mode");, +    if (contentLength < 0) throw new IllegalArgumentException("contentLength < 0");, +    this.fixedContentLength = contentLength;, +    super.fixedContentLength = (int) Math.min(contentLength, Integer.MAX_VALUE);, +  }]