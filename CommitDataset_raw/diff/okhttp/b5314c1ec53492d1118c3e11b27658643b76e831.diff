[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        ConnectStart.class, ConnectEnd.class,, +        ConnectionFound.class);, +        SecureConnectEnd.class, ConnectEnd.class,, +        ConnectionFound.class);, +  @Test public void successfulConnectionFound() throws IOException {, +    server.enqueue(new MockResponse());, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    response.body().close();, +, +    ConnectionFound connectionFound = listener.removeUpToEvent(ConnectionFound.class);, +    assertSame(call, connectionFound.call);, +    assertNotNull(connectionFound.connection);, +  }, +, +  @Test public void noConnectionFoundOnFollowUp() throws IOException {, +    server.enqueue(new MockResponse(), +        .setResponseCode(301), +        .addHeader("Location", "/foo"));, +    server.enqueue(new MockResponse(), +        .setBody("ABC"));, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals("ABC", response.body().string());, +, +    listener.removeUpToEvent(ConnectionFound.class);, +, +    List<Class<?>> remainingEvents = listener.recordedEventTypes();, +    assertFalse(remainingEvents.contains(ConnectionFound.class));, +  }, +, +  @Test public void pooledConnectionFound() throws IOException {, +    server.enqueue(new MockResponse());, +    server.enqueue(new MockResponse());, +, +    // Seed the pool., +    Call call1 = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response1 = call1.execute();, +    assertEquals(200, response1.code());, +    response1.body().close();, +, +    ConnectionFound connectionFound1 = listener.removeUpToEvent(ConnectionFound.class);, +    listener.clearAllEvents();, +, +    Call call2 = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response2 = call2.execute();, +    assertEquals(200, response2.code());, +    response2.body().close();, +, +    ConnectionFound connectionFound2 = listener.removeUpToEvent(ConnectionFound.class);, +    assertSame(connectionFound1.connection, connectionFound2.connection);, +  }, +, +  @Test public void multipleConnectionsFoundForSingleCall() throws IOException {, +    server.enqueue(new MockResponse(), +        .setResponseCode(301), +        .addHeader("Location", "/foo"), +        .addHeader("Connection", "Close"));, +    server.enqueue(new MockResponse(), +        .setBody("ABC"));, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals("ABC", response.body().string());, +, +    listener.removeUpToEvent(ConnectionFound.class);, +    listener.removeUpToEvent(ConnectionFound.class);, +  }, +, +  static final class ConnectionFound {, +    final Call call;, +    final Connection connection;, +, +    ConnectionFound(Call call, Connection connection) {, +      this.call = call;, +      this.connection = connection;, +    }, +  }, +, +, +    @Override public void connectionFound(Call call, Connection connection) {, +      eventSequence.offer(new ConnectionFound(call, connection));, +    }, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        ConnectStart.class, ConnectEnd.class,, +        ConnectionFound.class);]