[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket", request.getPath()),, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket", request.getPath()),, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.internal.Util;, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 1000);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket", request.getPath()),, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.internal.Util;, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 1000);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.internal.Util;, +        return Util.format("%s%n", record.getMessage());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket", request.getPath()),, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.internal.Util;, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 1000);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.internal.Util;, +        return Util.format("%s%n", record.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertTrue(Util.format("Timed out: %sms", elapsedMillis), elapsedMillis < 500);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket", request.getPath()),, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.internal.Util;, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 1000);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.internal.Util;, +        return Util.format("%s%n", record.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertTrue(Util.format("Timed out: %sms", elapsedMillis), elapsedMillis < 500);, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    assertTrue(Util.format("Time to close: %sms", elapsedMillis), elapsedMillis < 500);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket", request.getPath()),, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.internal.Util;, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 1000);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.internal.Util;, +        return Util.format("%s%n", record.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertTrue(Util.format("Timed out: %sms", elapsedMillis), elapsedMillis < 500);, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    assertTrue(Util.format("Time to close: %sms", elapsedMillis), elapsedMillis < 500);, +++ b/okhttp-tests/src/test/java/okhttp3/UrlComponentEncodingTester.java, +import okhttp3.internal.Util;, +      fail(Util.format("Encoding %s %#x using %s", component, codePoint, encoding));, +      fail(Util.format("Roundtrip %s %#x %s", component, codePoint, url));, +      fail(Util.format("Encoding %s %#02x using %s", component, codePoint, encoding));, +      fail(Util.format("Encoding %s %#x using %s", component, codePoint, encoding));, +      fail(Util.format("Encoding %s %#x using %s", component, codePoint, encoding));, +        fail(Util.format("Encoding %s %#x using %s", component, codePoint, encoding));, +        fail(Util.format("Encoding %s %#x using %s", component, codePoint, encoding));, +        fail(Util.format("Encoding %s %#x using %s", component, codePoint, encoding));, +        fail(Util.format("Encoding %s %#x using %s", component, codePoint, encoding));, +          percentEncoded.writeUtf8(Util.format("%%%02X", utf8.getByte(i) & 0xff));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket", request.getPath()),, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.internal.Util;, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 500);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis < 1000);, +    assertTrue(Util.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 1000);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.internal.Util;, +        return Util.format("%s%n", record.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +      assertTrue(Util.format("Timed out: %sms", elapsedMillis), elapsedMillis < 500);, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    assertTrue(Util.format("Time to close: %sms", elapsedMillis), elapsedMillis < 500);, +++ b/okhttp-tests/src/test/java/okhttp3/UrlComponentEncodingTester.java, +import okhttp3.internal.Util;, +      fail(Util.format("Encoding %s %#x using %s", component, codePoint, encoding));]