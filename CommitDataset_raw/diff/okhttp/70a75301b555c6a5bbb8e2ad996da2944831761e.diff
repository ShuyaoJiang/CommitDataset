[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIpv6() throws UnknownHostException {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIpv6() throws UnknownHostException {, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +    assertEquals("192.168.1.254", parse("http://[::ffff:c0a8:1fe]/").host());, +  @Test public void hostIpv6Builder() throws Exception {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIpv6() throws UnknownHostException {, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +    assertEquals("192.168.1.254", parse("http://[::ffff:c0a8:1fe]/").host());, +  @Test public void hostIpv6Builder() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionSpecSelectorTest.java, +    SSLSocket socket = createSocketWithEnabledProtocols(TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);, +    ConnectionSpec sslV3 =, +        new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +    TlsVersion[] enabledSocketTlsVersions = {TlsVersion.TLS_1_1, TlsVersion.TLS_1_0};, +    assertEnabledProtocols(socket, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);, +    assertEnabledProtocols(socket, TlsVersion.TLS_1_0);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIpv6() throws UnknownHostException {, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +    assertEquals("192.168.1.254", parse("http://[::ffff:c0a8:1fe]/").host());, +  @Test public void hostIpv6Builder() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionSpecSelectorTest.java, +    SSLSocket socket = createSocketWithEnabledProtocols(TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);, +    ConnectionSpec sslV3 =, +        new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +    TlsVersion[] enabledSocketTlsVersions = {TlsVersion.TLS_1_1, TlsVersion.TLS_1_0};, +    assertEnabledProtocols(socket, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);, +    assertEnabledProtocols(socket, TlsVersion.TLS_1_0);, +++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java, +  /** A secure TLS connection assuming a modern client platform and server. */, +  /** A modern TLS connection with extensions like SNI and ALPN available. */, +      .tlsVersions(TlsVersion.TLS_1_3, TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0), +  /** A backwards-compatible fallback connection for interop with obsolete servers. */, +      .tlsVersions(TlsVersion.TLS_1_0), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java, +  @Test public void testIpv6() throws UnknownHostException {, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +    assertEquals("192.168.1.254", parse("http://[::ffff:c0a8:1fe]/").host());, +  @Test public void hostIpv6Builder() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionSpecSelectorTest.java, +    SSLSocket socket = createSocketWithEnabledProtocols(TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);, +    ConnectionSpec sslV3 =, +        new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +    TlsVersion[] enabledSocketTlsVersions = {TlsVersion.TLS_1_1, TlsVersion.TLS_1_0};, +    assertEnabledProtocols(socket, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);, +    assertEnabledProtocols(socket, TlsVersion.TLS_1_0);, +++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java, +  /** A secure TLS connection assuming a modern client platform and server. */, +  /** A modern TLS connection with extensions like SNI and ALPN available. */, +      .tlsVersions(TlsVersion.TLS_1_3, TlsVersion.TLS_1_2, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0), +  /** A backwards-compatible fallback connection for interop with obsolete servers. */, +      .tlsVersions(TlsVersion.TLS_1_0), +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +      if (address.length == 4) return inetAddress.getHostAddress(); // An IPv4-mapped IPv6 address.]