[+++ b/src/main/java/com/squareup/okhttp/Connection.java, +                sslSocket.setSoTimeout(0); // SPDY timeouts are set per-stream., +++ b/src/main/java/com/squareup/okhttp/Connection.java, +                sslSocket.setSoTimeout(0); // SPDY timeouts are set per-stream., +++ b/src/main/java/com/squareup/okhttp/internal/net/http/SpdyTransport.java, +        stream.setReadTimeout(httpEngine.policy.getReadTimeout());, +++ b/src/main/java/com/squareup/okhttp/Connection.java, +                sslSocket.setSoTimeout(0); // SPDY timeouts are set per-stream., +++ b/src/main/java/com/squareup/okhttp/internal/net/http/SpdyTransport.java, +        stream.setReadTimeout(httpEngine.policy.getReadTimeout());, +++ b/src/main/java/com/squareup/okhttp/internal/net/spdy/SpdyStream.java, +import java.net.SocketTimeoutException;, +    private long readTimeoutMillis = 0;, +     * Sets the maximum time to wait on input stream reads before failing with a, +     * {@code SocketTimeoutException}, or {@code 0} to wait indefinitely., +     */, +    public void setReadTimeout(long readTimeoutMillis) {, +        this.readTimeoutMillis = readTimeoutMillis;, +    }, +, +    public long getReadTimeoutMillis() {, +        return readTimeoutMillis;, +    }, +, +    /**, +                waitUntilReadable();, +        /**, +         * Returns once the input stream is either readable or finished. Throws, +         * a {@link SocketTimeoutException} if the read timeout elapses before, +         * that happens., +         */, +        private void waitUntilReadable() throws IOException {, +            long start = 0;, +            long remaining = 0;, +            if (readTimeoutMillis != 0) {, +                start = (System.nanoTime() / 1000000);, +                remaining = readTimeoutMillis;, +            }, +            try {, +                while (pos == -1 && !finished && !closed && rstStatusCode == -1) {, +                    if (readTimeoutMillis == 0) {, +                        SpdyStream.this.wait();, +                    } else if (remaining > 0) {, +                        SpdyStream.this.wait(remaining);, +                        remaining = start + readTimeoutMillis - (System.nanoTime() / 1000000);, +                    } else {, +                        throw new SocketTimeoutException();, +                    }, +                }, +            } catch (InterruptedException e) {, +                throw new InterruptedIOException();, +            }, +        }, +, +++ b/src/main/java/com/squareup/okhttp/Connection.java, +                sslSocket.setSoTimeout(0); // SPDY timeouts are set per-stream., +++ b/src/main/java/com/squareup/okhttp/internal/net/http/SpdyTransport.java, +        stream.setReadTimeout(httpEngine.policy.getReadTimeout());, +++ b/src/main/java/com/squareup/okhttp/internal/net/spdy/SpdyStream.java, +import java.net.SocketTimeoutException;, +    private long readTimeoutMillis = 0;, +     * Sets the maximum time to wait on input stream reads before failing with a, +     * {@code SocketTimeoutException}, or {@code 0} to wait indefinitely., +     */, +    public void setReadTimeout(long readTimeoutMillis) {, +        this.readTimeoutMillis = readTimeoutMillis;, +    }, +, +    public long getReadTimeoutMillis() {, +        return readTimeoutMillis;, +    }, +, +    /**, +                waitUntilReadable();, +        /**, +         * Returns once the input stream is either readable or finished. Throws, +         * a {@link SocketTimeoutException} if the read timeout elapses before, +         * that happens., +         */, +        private void waitUntilReadable() throws IOException {, +            long start = 0;, +            long remaining = 0;, +            if (readTimeoutMillis != 0) {, +                start = (System.nanoTime() / 1000000);, +                remaining = readTimeoutMillis;, +            }, +            try {, +                while (pos == -1 && !finished && !closed && rstStatusCode == -1) {, +                    if (readTimeoutMillis == 0) {, +                        SpdyStream.this.wait();, +                    } else if (remaining > 0) {, +                        SpdyStream.this.wait(remaining);, +                        remaining = start + readTimeoutMillis - (System.nanoTime() / 1000000);, +                    } else {, +                        throw new SocketTimeoutException();, +                    }, +                }, +            } catch (InterruptedException e) {, +                throw new InterruptedIOException();, +            }]