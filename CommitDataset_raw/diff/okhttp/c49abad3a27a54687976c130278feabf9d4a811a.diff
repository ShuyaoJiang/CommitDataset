[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/duplex/AsyncRequestBody.java, +public final class AsyncRequestBody extends RequestBody {, +  @Override public boolean isDuplex() {, +    return true;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/duplex/AsyncRequestBody.java, +public final class AsyncRequestBody extends RequestBody {, +  @Override public boolean isDuplex() {, +    return true;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/duplex/AsyncRequestBody.java, +public final class AsyncRequestBody extends RequestBody {, +  @Override public boolean isDuplex() {, +    return true;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +  @Test public void callTimeoutIsNotApplied() throws Exception {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/duplex/AsyncRequestBody.java, +public final class AsyncRequestBody extends RequestBody {, +  @Override public boolean isDuplex() {, +    return true;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +  @Test public void callTimeoutIsNotApplied() throws Exception {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.io.IOException;, +      @Override public @Nullable IOException timeoutExit(Call call, @Nullable IOException e) {, +        return ((RealCall) call).timeoutExit(e);, +      }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/duplex/AsyncRequestBody.java, +public final class AsyncRequestBody extends RequestBody {, +  @Override public boolean isDuplex() {, +    return true;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +  @Test public void callTimeoutIsNotApplied() throws Exception {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.io.IOException;, +      @Override public @Nullable IOException timeoutExit(Call call, @Nullable IOException e) {, +        return ((RealCall) call).timeoutExit(e);, +      }, +, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import javax.annotation.Nullable;, +import okio.AsyncTimeout;, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +  final AsyncTimeout timeout;, +    this.timeout = new AsyncTimeout() {, +      @Override protected void timedOut() {, +        cancel();, +      }, +    };, +    this.timeout.timeout(client.callTimeoutMillis(), MILLISECONDS);, +    timeout.enter();, +  @Nullable IOException timeoutExit(@Nullable IOException cause) {, +    if (!timeout.exit()) return cause;, +, +    InterruptedIOException e = new InterruptedIOException("timeout");, +    if (cause != null) {, +      e.initCause(cause);, +    }, +    return e;, +  }, +, +    return timeout;, +      timeout.enter();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-testing-support/src/main/java/okhttp3/internal/duplex/AsyncRequestBody.java, +public final class AsyncRequestBody extends RequestBody {, +  @Override public boolean isDuplex() {, +    return true;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +  @Test public void callTimeoutIsNotApplied() throws Exception {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.io.IOException;, +      @Override public @Nullable IOException timeoutExit(Call call, @Nullable IOException e) {, +        return ((RealCall) call).timeoutExit(e);, +      }, +, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import javax.annotation.Nullable;]