[+++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.text.ParseException;, +import java.text.SimpleDateFormat;, +import java.util.Date;, +import okhttp3.internal.Util;, +import org.junit.Ignore;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +, +public class CookieTest {, +  HttpUrl url = HttpUrl.parse("http://example.com/");, +, +  @Test public void test() throws Exception {, +    Cookie cookie = Cookie.parse(url, "SID=31d4d96e407aad42");, +    assertEquals("SID=31d4d96e407aad42", cookie.toString());, +  }, +, +  @Test public void noEqualsSign() throws Exception {, +    assertNull(Cookie.parse(url, "foo"));, +    assertNull(Cookie.parse(url, "foo; Path=/"));, +  }, +, +  @Test public void emptyName() throws Exception {, +    assertNull(Cookie.parse(url, "=b"));, +    assertNull(Cookie.parse(url, " =b"));, +    assertNull(Cookie.parse(url, "\r\t \n=b"));, +  }, +, +  @Test public void trimLeadingAndTrailingWhitespaceFromName() throws Exception {, +    assertEquals("a", Cookie.parse(url, " a=b").name());, +    assertEquals("a", Cookie.parse(url, "a =b").name());, +    assertEquals("a", Cookie.parse(url, "\r\t \na\n\t \n=b").name());, +  }, +, +  @Test public void emptyValue() throws Exception {, +    assertEquals("", Cookie.parse(url, "a=").value());, +    assertEquals("", Cookie.parse(url, "a= ").value());, +    assertEquals("", Cookie.parse(url, "a=\r\t \n").value());, +  }, +, +  @Test public void trimLeadingAndTrailingWhitespaceFromValue() throws Exception {, +    assertEquals("", Cookie.parse(url, "a= ").value());, +    assertEquals("b", Cookie.parse(url, "a= b").value());, +    assertEquals("b", Cookie.parse(url, "a=b ").value());, +    assertEquals("b", Cookie.parse(url, "a=\r\t \nb\n\t \n").value());, +  }, +, +  @Test public void maxAge() throws Exception {, +    assertEquals(51000L,, +        Cookie.parse(50000L, url, "a=b; Max-Age=1").expiresAt());, +    assertEquals(9223372036854774000L,, +        Cookie.parse(50000L, url, "a=b; Max-Age=9223372036854724").expiresAt());, +    assertEquals(9223372036854775000L,, +        Cookie.parse(50000L, url, "a=b; Max-Age=9223372036854725").expiresAt());, +    assertEquals(Long.MAX_VALUE,, +        Cookie.parse(50000L, url, "a=b; Max-Age=9223372036854726").expiresAt());, +    assertEquals(9223372036854774807L,, +        Cookie.parse(9223372036854773807L, url, "a=b; Max-Age=1").expiresAt());, +    assertEquals(Long.MAX_VALUE,, +        Cookie.parse(9223372036854773807L, url, "a=b; Max-Age=2").expiresAt());, +    assertEquals(Long.MAX_VALUE,, +        Cookie.parse(9223372036854773807L, url, "a=b; Max-Age=3").expiresAt());, +    assertEquals(Long.MAX_VALUE,, +        Cookie.parse(50000L, url, "a=b; Max-Age=10000000000000000000").expiresAt());, +  }, +, +  @Test public void maxAgeNonPositive() throws Exception {, +    assertEquals(Long.MIN_VALUE,, +        Cookie.parse(50000L, url, "a=b; Max-Age=-1").expiresAt());, +    assertEquals(Long.MIN_VALUE,, +        Cookie.parse(50000L, url, "a=b; Max-Age=0").expiresAt());, +    assertEquals(Long.MIN_VALUE,, +        Cookie.parse(50000L, url, "a=b; Max-Age=-9223372036854775808").expiresAt());, +    assertEquals(Long.MIN_VALUE,, +        Cookie.parse(50000L, url, "a=b; Max-Age=-9223372036854775809").expiresAt());, +    assertEquals(Long.MIN_VALUE,, +        Cookie.parse(50000L, url, "a=b; Max-Age=-10000000000000000000").expiresAt());, +  }, +]