[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/RecordedRequest.java, +import com.squareup.okhttp.TlsVersion;, +import com.squareup.okhttp.internal.Internal;, +  private final TlsVersion tlsVersion;, +    this.tlsVersion = socket instanceof SSLSocket, +        ? Internal.instance.tlsVersionForJavaName(((SSLSocket) socket).getSession().getProtocol()), +  /** @deprecated Use {@link #getTlsVersion()}. */, +    return tlsVersion != null ? tlsVersion.name() : null;, +  }, +, +  /** Returns the connection's TLS version or null if the connection doesn't use SSL. */, +  public TlsVersion getTlsVersion() {, +    return tlsVersion;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/RecordedRequest.java, +import com.squareup.okhttp.TlsVersion;, +import com.squareup.okhttp.internal.Internal;, +  private final TlsVersion tlsVersion;, +    this.tlsVersion = socket instanceof SSLSocket, +        ? Internal.instance.tlsVersionForJavaName(((SSLSocket) socket).getSession().getProtocol()), +  /** @deprecated Use {@link #getTlsVersion()}. */, +    return tlsVersion != null ? tlsVersion.name() : null;, +  }, +, +  /** Returns the connection's TLS version or null if the connection doesn't use SSL. */, +  public TlsVersion getTlsVersion() {, +    return tlsVersion;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +import com.squareup.okhttp.TlsVersion;, +import java.util.EnumSet;, +    Set<TlsVersion> tlsVersions =, +        EnumSet.of(TlsVersion.TLS_1_0, TlsVersion.TLS_1_2); // v1.2 on OpenJDK 8., +, +    assertTrue(tlsVersions.contains(request1.getTlsVersion()));, +    assertTrue(tlsVersions.contains(request2.getTlsVersion()));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/RecordedRequest.java, +import com.squareup.okhttp.TlsVersion;, +import com.squareup.okhttp.internal.Internal;, +  private final TlsVersion tlsVersion;, +    this.tlsVersion = socket instanceof SSLSocket, +        ? Internal.instance.tlsVersionForJavaName(((SSLSocket) socket).getSession().getProtocol()), +  /** @deprecated Use {@link #getTlsVersion()}. */, +    return tlsVersion != null ? tlsVersion.name() : null;, +  }, +, +  /** Returns the connection's TLS version or null if the connection doesn't use SSL. */, +  public TlsVersion getTlsVersion() {, +    return tlsVersion;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +import com.squareup.okhttp.TlsVersion;, +import java.util.EnumSet;, +    Set<TlsVersion> tlsVersions =, +        EnumSet.of(TlsVersion.TLS_1_0, TlsVersion.TLS_1_2); // v1.2 on OpenJDK 8., +, +    assertTrue(tlsVersions.contains(request1.getTlsVersion()));, +    assertTrue(tlsVersions.contains(request2.getTlsVersion()));, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +      @Override public TlsVersion tlsVersionForJavaName(String name) {, +        return TlsVersion.forJavaName(name);, +      }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/RecordedRequest.java, +import com.squareup.okhttp.TlsVersion;, +import com.squareup.okhttp.internal.Internal;, +  private final TlsVersion tlsVersion;, +    this.tlsVersion = socket instanceof SSLSocket, +        ? Internal.instance.tlsVersionForJavaName(((SSLSocket) socket).getSession().getProtocol()), +  /** @deprecated Use {@link #getTlsVersion()}. */, +    return tlsVersion != null ? tlsVersion.name() : null;, +  }, +, +  /** Returns the connection's TLS version or null if the connection doesn't use SSL. */, +  public TlsVersion getTlsVersion() {, +    return tlsVersion;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +import com.squareup.okhttp.TlsVersion;, +import java.util.EnumSet;, +    Set<TlsVersion> tlsVersions =, +        EnumSet.of(TlsVersion.TLS_1_0, TlsVersion.TLS_1_2); // v1.2 on OpenJDK 8., +, +    assertTrue(tlsVersions.contains(request1.getTlsVersion()));, +    assertTrue(tlsVersions.contains(request2.getTlsVersion()));, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +      @Override public TlsVersion tlsVersionForJavaName(String name) {, +        return TlsVersion.forJavaName(name);, +      }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Internal.java, +import com.squareup.okhttp.TlsVersion;, +  public abstract TlsVersion tlsVersionForJavaName(String name);, +]