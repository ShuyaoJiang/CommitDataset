[+++ b/src/main/java/com/squareup/okhttp/Address.java, +import static com.squareup.okhttp.internal.Util.equal;, +            return equal(this.proxy, that.proxy), +                    && equal(this.sslSocketFactory, that.sslSocketFactory), +                    && equal(this.hostnameVerifier, that.hostnameVerifier);, +++ b/src/main/java/com/squareup/okhttp/Address.java, +import static com.squareup.okhttp.internal.Util.equal;, +            return equal(this.proxy, that.proxy), +                    && equal(this.sslSocketFactory, that.sslSocketFactory), +                    && equal(this.hostnameVerifier, that.hostnameVerifier);, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +import com.squareup.okhttp.internal.Platform;, +                if (!connection.isEligibleForRecycling()) {, +                    IoUtils.closeQuietly(connection);, +                    continue;, +                try {, +                    Platform.get().tagSocket(connection.getSocket());, +                } catch (SocketException e) {, +                    // When unable to tag, skip recycling and close, +                    Platform.get().logW("Unable to tagSocket(): " + e);, +                    IoUtils.closeQuietly(connection);, +                    continue;, +                }, +                return connection;, +            Platform.get().untagSocket(connection.getSocket());, +            Platform.get().logW("Unable to untagSocket(): " + e);, +++ b/src/main/java/com/squareup/okhttp/Address.java, +import static com.squareup.okhttp.internal.Util.equal;, +            return equal(this.proxy, that.proxy), +                    && equal(this.sslSocketFactory, that.sslSocketFactory), +                    && equal(this.hostnameVerifier, that.hostnameVerifier);, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +import com.squareup.okhttp.internal.Platform;, +                if (!connection.isEligibleForRecycling()) {, +                    IoUtils.closeQuietly(connection);, +                    continue;, +                try {, +                    Platform.get().tagSocket(connection.getSocket());, +                } catch (SocketException e) {, +                    // When unable to tag, skip recycling and close, +                    Platform.get().logW("Unable to tagSocket(): " + e);, +                    IoUtils.closeQuietly(connection);, +                    continue;, +                }, +                return connection;, +            Platform.get().untagSocket(connection.getSocket());, +            Platform.get().logW("Unable to untagSocket(): " + e);, +++ b/src/main/java/com/squareup/okhttp/TunnelRequest.java, +import static com.squareup.okhttp.internal.Util.getDefaultPort;, +        result.set("Host", port == getDefaultPort("https") ? host : (host + ":" + port));, +++ b/src/main/java/com/squareup/okhttp/Address.java, +import static com.squareup.okhttp.internal.Util.equal;, +            return equal(this.proxy, that.proxy), +                    && equal(this.sslSocketFactory, that.sslSocketFactory), +                    && equal(this.hostnameVerifier, that.hostnameVerifier);, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +import com.squareup.okhttp.internal.Platform;, +                if (!connection.isEligibleForRecycling()) {, +                    IoUtils.closeQuietly(connection);, +                    continue;, +                try {, +                    Platform.get().tagSocket(connection.getSocket());, +                } catch (SocketException e) {, +                    // When unable to tag, skip recycling and close, +                    Platform.get().logW("Unable to tagSocket(): " + e);, +                    IoUtils.closeQuietly(connection);, +                    continue;, +                }, +                return connection;, +            Platform.get().untagSocket(connection.getSocket());, +            Platform.get().logW("Unable to untagSocket(): " + e);, +++ b/src/main/java/com/squareup/okhttp/TunnelRequest.java, +import static com.squareup.okhttp.internal.Util.getDefaultPort;, +        result.set("Host", port == getDefaultPort("https") ? host : (host + ":" + port));, +++ b/src/main/java/com/squareup/okhttp/internal/Platform.java, +import java.net.Socket;, +import java.net.SocketException;, +import java.net.URI;, +import java.net.URISyntaxException;, +import java.net.URL;, +    public void logW(String warning) {, +        System.out.println(warning);, +    }, +, +    public void tagSocket(Socket socket) throws SocketException {, +    }, +, +    public void untagSocket(Socket socket) throws SocketException {, +    }, +, +    public URI toUriLenient(URL url) throws URISyntaxException {, +        return url.toURI(); // this isn't as good as the built-in toUriLenient, +    }, +, +++ b/src/main/java/com/squareup/okhttp/Address.java, +import static com.squareup.okhttp.internal.Util.equal;, +            return equal(this.proxy, that.proxy), +                    && equal(this.sslSocketFactory, that.sslSocketFactory), +                    && equal(this.hostnameVerifier, that.hostnameVerifier);, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java]