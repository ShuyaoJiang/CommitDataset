[+++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +  @Option(, +      name = "--call-timeout",, +      description = "Maximum time allowed for the entire call (seconds)"), +  public int callTimeout = DEFAULT_TIMEOUT;, +, +    if (callTimeout != DEFAULT_TIMEOUT) {, +      builder.callTimeout(callTimeout, SECONDS);, +    }, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +  @Option(, +      name = "--call-timeout",, +      description = "Maximum time allowed for the entire call (seconds)"), +  public int callTimeout = DEFAULT_TIMEOUT;, +, +    if (callTimeout != DEFAULT_TIMEOUT) {, +      builder.callTimeout(callTimeout, SECONDS);, +    }, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +  final String hostname;, +    hostname = builder.hostname;, +        Util.threadFactory(Util.format("OkHttp %s Writer", hostname), false));, +        Util.threadFactory(Util.format("OkHttp %s Push Observer", hostname), true));, +      writerExecutor.execute(new NamedRunnable("OkHttp %s stream %d", hostname, streamId) {, +          new NamedRunnable("OkHttp Window Update %s stream %d", hostname, streamId) {, +      super("OkHttp %s ping %08x%08x", hostname, payload1, payload2);, +    String hostname;, +      return socket(socket, ((InetSocketAddress) socket.getRemoteSocketAddress()).getHostName(),, +        Socket socket, String hostname, BufferedSource source, BufferedSink sink) {, +      this.hostname = hostname;, +      super("OkHttp %s", hostname);, +          listenerExecutor.execute(new NamedRunnable("OkHttp %s stream %d", hostname, streamId) {, +                Platform.get().log(INFO, "Http2Connection.Listener failure for " + hostname, e);, +        listenerExecutor.execute(new NamedRunnable("OkHttp %s settings", hostname) {, +        writerExecutor.execute(new NamedRunnable("OkHttp %s ACK Settings", hostname) {, +      pushExecutorExecute(new NamedRunnable("OkHttp %s Push Request[%s]", hostname, streamId) {, +      pushExecutorExecute(new NamedRunnable("OkHttp %s Push Headers[%s]", hostname, streamId) {, +    pushExecutorExecute(new NamedRunnable("OkHttp %s Push Data[%s]", hostname, streamId) {, +    pushExecutorExecute(new NamedRunnable("OkHttp %s Push Reset[%s]", hostname, streamId) {, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +  @Option(, +      name = "--call-timeout",, +      description = "Maximum time allowed for the entire call (seconds)"), +  public int callTimeout = DEFAULT_TIMEOUT;, +, +    if (callTimeout != DEFAULT_TIMEOUT) {, +      builder.callTimeout(callTimeout, SECONDS);, +    }, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +  final String hostname;, +    hostname = builder.hostname;, +        Util.threadFactory(Util.format("OkHttp %s Writer", hostname), false));, +        Util.threadFactory(Util.format("OkHttp %s Push Observer", hostname), true));, +      writerExecutor.execute(new NamedRunnable("OkHttp %s stream %d", hostname, streamId) {, +          new NamedRunnable("OkHttp Window Update %s stream %d", hostname, streamId) {, +      super("OkHttp %s ping %08x%08x", hostname, payload1, payload2);, +    String hostname;, +      return socket(socket, ((InetSocketAddress) socket.getRemoteSocketAddress()).getHostName(),, +        Socket socket, String hostname, BufferedSource source, BufferedSink sink) {, +      this.hostname = hostname;, +      super("OkHttp %s", hostname);, +          listenerExecutor.execute(new NamedRunnable("OkHttp %s stream %d", hostname, streamId) {, +                Platform.get().log(INFO, "Http2Connection.Listener failure for " + hostname, e);, +        listenerExecutor.execute(new NamedRunnable("OkHttp %s settings", hostname) {, +        writerExecutor.execute(new NamedRunnable("OkHttp %s ACK Settings", hostname) {, +      pushExecutorExecute(new NamedRunnable("OkHttp %s Push Request[%s]", hostname, streamId) {, +      pushExecutorExecute(new NamedRunnable("OkHttp %s Push Headers[%s]", hostname, streamId) {, +    pushExecutorExecute(new NamedRunnable("OkHttp %s Push Data[%s]", hostname, streamId) {, +    pushExecutorExecute(new NamedRunnable("OkHttp %s Push Reset[%s]", hostname, streamId) {, +++ /dev/null, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +  @Option(, +      name = "--call-timeout",, +      description = "Maximum time allowed for the entire call (seconds)"), +  public int callTimeout = DEFAULT_TIMEOUT;, +, +    if (callTimeout != DEFAULT_TIMEOUT) {, +      builder.callTimeout(callTimeout, SECONDS);, +    }, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +  final String hostname;, +    hostname = builder.hostname;, +        Util.threadFactory(Util.format("OkHttp %s Writer", hostname), false));, +        Util.threadFactory(Util.format("OkHttp %s Push Observer", hostname), true));, +      writerExecutor.execute(new NamedRunnable("OkHttp %s stream %d", hostname, streamId) {, +          new NamedRunnable("OkHttp Window Update %s stream %d", hostname, streamId) {, +      super("OkHttp %s ping %08x%08x", hostname, payload1, payload2);, +    String hostname;, +      return socket(socket, ((InetSocketAddress) socket.getRemoteSocketAddress()).getHostName(),, +        Socket socket, String hostname, BufferedSource source, BufferedSink sink) {, +      this.hostname = hostname;, +      super("OkHttp %s", hostname);, +          listenerExecutor.execute(new NamedRunnable("OkHttp %s stream %d", hostname, streamId) {, +                Platform.get().log(INFO, "Http2Connection.Listener failure for " + hostname, e);, +        listenerExecutor.execute(new NamedRunnable("OkHttp %s settings", hostname) {, +        writerExecutor.execute(new NamedRunnable("OkHttp %s ACK Settings", hostname) {, +      pushExecutorExecute(new NamedRunnable("OkHttp %s Push Request[%s]", hostname, streamId) {, +      pushExecutorExecute(new NamedRunnable("OkHttp %s Push Headers[%s]", hostname, streamId) {, +    pushExecutorExecute(new NamedRunnable("OkHttp %s Push Data[%s]", hostname, streamId) {, +    pushExecutorExecute(new NamedRunnable("OkHttp %s Push Reset[%s]", hostname, streamId) {]