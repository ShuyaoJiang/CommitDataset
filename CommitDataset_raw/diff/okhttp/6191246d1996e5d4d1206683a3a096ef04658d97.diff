[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +import com.squareup.okhttp.ConnectionPool;, +  @Test public void conditionalCacheHitIsNotDoublePooled() throws Exception {, +    server.enqueue(new MockResponse().addHeader("ETag: v1").setBody("A"));, +    server.enqueue(new MockResponse(), +        .clearHeaders(), +        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +    server.play();, +, +    ConnectionPool pool = ConnectionPool.getDefault();, +    pool.evictAll();, +    client.setConnectionPool(pool);, +, +    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));, +    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));, +    assertEquals(1, client.getConnectionPool().getConnectionCount());, +  }, +, +++ b/CHANGELOG.md, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +import com.squareup.okhttp.ConnectionPool;, +  @Test public void conditionalCacheHitIsNotDoublePooled() throws Exception {, +    server.enqueue(new MockResponse().addHeader("ETag: v1").setBody("A"));, +    server.enqueue(new MockResponse(), +        .clearHeaders(), +        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +    server.play();, +, +    ConnectionPool pool = ConnectionPool.getDefault();, +    pool.evictAll();, +    client.setConnectionPool(pool);, +, +    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));, +    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));, +    assertEquals(1, client.getConnectionPool().getConnectionCount());, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +    if (transport != null && connection != null) {]