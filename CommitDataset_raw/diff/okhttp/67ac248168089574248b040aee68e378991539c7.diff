[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java, +import java.util.ArrayDeque;, +import java.util.Deque;, +import java.util.concurrent.Executor;, +import org.junit.rules.Timeout;, +  @Rule public final TemporaryFolder tempDir = new TemporaryFolder();, +  @Rule public final Timeout timeout = new Timeout(30 * 1000);, +, +  private final TestExecutor executor = new TestExecutor();, +  private DiskLruCache cache;, +  private final Deque<DiskLruCache> toClose = new ArrayDeque<>();, +, +  private void createNewCache() throws IOException {, +    createNewCacheWithSize(Integer.MAX_VALUE);, +  }, +, +  private void createNewCacheWithSize(int maxSize) throws IOException {, +    cache = new DiskLruCache(cacheDir, appVersion, 2, maxSize, executor);, +    cache.initialize();, +    toClose.add(cache);, +  }, +    cacheDir = tempDir.getRoot();, +    createNewCache();, +    while (!toClose.isEmpty()) {, +      toClose.pop().close();, +    }, +    createNewCache();, +    createNewCache();, +    DiskLruCache.Snapshot snapshot = cache.get("k1");, +    createNewCache();, +    createNewCache();, +    createNewCache();, +    createNewCache();, +    createNewCache();, +    createNewCache();, +    createNewCache();, +    createNewCache();, +, +    createNewCache();, +    createNewCache();, +    createNewCacheWithSize(10);, +    createNewCacheWithSize(20);, +    assertEquals(1, executor.jobs.size());, +    createNewCacheWithSize(10);, +    createNewCacheWithSize(10);, +    createNewCacheWithSize(10);, +    createNewCacheWithSize(10);, +    createNewCacheWithSize(10);, +    createNewCacheWithSize(10);, +    while (executor.jobs.isEmpty()) {, +    while (executor.jobs.isEmpty()) {, +    executor.jobs.removeFirst().run();, +    while (executor.jobs.isEmpty()) {, +      createNewCache();, +    while (executor.jobs.isEmpty()) {, +      createNewCache();, +    createNewCache();, +    createNewCache();, +    createNewCacheWithSize(10);, +    createNewCacheWithSize(10);, +    assertFalse(getCleanFile("g1", 0).exists());, +    assertFalse(getCleanFile("g1", 1).exists());, +    assertFalse(getCleanFile("g2", 0).exists());, +    assertFalse(getCleanFile("g2", 1).exists());, +    assertFalse(new File(cacheDir, "otherFile0").exists());, +    assertFalse(new File(cacheDir, "dir1").exists());, +    assertFalse(getCleanFile(key, 0).exists());, +    assertFalse(getCleanFile(key, 1).exists());, +    assertFalse(getDirtyFile(key, 0).exists());, +    assertFalse(getDirtyFile(key, 1).exists());, +    assertTrue(getCleanFile(key, 0).exists());, +    assertTrue(getCleanFile(key, 1).exists());, +, +  private static class TestExecutor implements Executor {, +    final Deque<Runnable> jobs = new ArrayDeque<>();, +, +    @Override public void execute(Runnable command) {, +      jobs.addLast(command);, +    }, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java, +import java.util.ArrayDeque;, +import java.util.Deque;, +import java.util.concurrent.Executor;, +import org.junit.rules.Timeout;, +  @Rule public final TemporaryFolder tempDir = new TemporaryFolder();, +  @Rule public final Timeout timeout = new Timeout(30 * 1000);, +, +  private final TestExecutor executor = new TestExecutor();, +  private DiskLruCache cache;, +  private final Deque<DiskLruCache> toClose = new ArrayDeque<>();, +, +  private void createNewCache() throws IOException {, +    createNewCacheWithSize(Integer.MAX_VALUE);, +  }, +, +  private void createNewCacheWithSize(int maxSize) throws IOException {, +    cache = new DiskLruCache(cacheDir, appVersion, 2, maxSize, executor);, +    cache.initialize();, +    toClose.add(cache);]