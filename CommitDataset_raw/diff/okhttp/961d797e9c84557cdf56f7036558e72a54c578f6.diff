[+++ b/src/main/java/libcore/net/spdy/SpdyConnection.java, +    private class Reader implements Runnable, SpdyReader.Handler {, +                while (spdyReader.nextFrame(this)) {, +        @Override public void data(int flags, int streamId, InputStream in, int length), +                throws IOException {, +            SpdyStream dataStream = getStream(streamId);, +                dataStream.receiveData(in, flags, length);, +                writeSynResetLater(streamId, SpdyStream.RST_INVALID_STREAM);, +                Streams.skipByReading(in, length);, +        }, +        @Override public void synStream(int flags, int streamId, int associatedStreamId,, +                int priority, List<String> nameValueBlock) {, +            final SpdyStream synStream = new SpdyStream(streamId, SpdyConnection.this,, +                    nameValueBlock, flags);, +            SpdyStream previous;, +            synchronized (SpdyConnection.this) {, +                previous = streams.put(streamId, synStream);, +            }, +                return;, +        }, +        @Override public void synReply(int flags, int streamId, List<String> nameValueBlock), +                throws IOException {, +            SpdyStream replyStream = getStream(streamId);, +                replyStream.receiveReply(nameValueBlock);, +                writeSynResetLater(streamId, SpdyStream.RST_INVALID_STREAM);, +        }, +        @Override public void rstStream(int flags, int streamId, int statusCode) {, +            SpdyStream rstStream = removeStream(streamId);, +                rstStream.receiveRstStream(statusCode);, +        }, +        @Override public void settings(int flags, Settings newSettings) {, +            synchronized (SpdyConnection.this) {, +                if (settings == null, +                        || (flags & Settings.FLAG_CLEAR_PREVIOUSLY_PERSISTED_SETTINGS) != 0) {, +                    settings = newSettings;, +                    settings.merge(newSettings);, +                }, +            }, +        }, +, +        @Override public void noop() {, +        }, +, +        @Override public void ping(int flags, int streamId) {, +            if (isClient() != (streamId % 2 == 1)) {, +                // Respond to a client ping if this is a server and vice versa., +                writePingLater(streamId, null);, +            } else {, +                Ping ping = removePing(streamId);, +++ b/src/main/java/libcore/net/spdy/SpdyConnection.java, +    private class Reader implements Runnable, SpdyReader.Handler {, +                while (spdyReader.nextFrame(this)) {, +        @Override public void data(int flags, int streamId, InputStream in, int length), +                throws IOException {, +            SpdyStream dataStream = getStream(streamId);, +                dataStream.receiveData(in, flags, length);, +                writeSynResetLater(streamId, SpdyStream.RST_INVALID_STREAM);, +                Streams.skipByReading(in, length);, +        }, +        @Override public void synStream(int flags, int streamId, int associatedStreamId,, +                int priority, List<String> nameValueBlock) {, +            final SpdyStream synStream = new SpdyStream(streamId, SpdyConnection.this,, +                    nameValueBlock, flags);, +            SpdyStream previous;, +            synchronized (SpdyConnection.this) {, +                previous = streams.put(streamId, synStream);, +            }, +                return;, +        }, +        @Override public void synReply(int flags, int streamId, List<String> nameValueBlock), +                throws IOException {, +            SpdyStream replyStream = getStream(streamId);, +                replyStream.receiveReply(nameValueBlock);, +                writeSynResetLater(streamId, SpdyStream.RST_INVALID_STREAM);, +        }, +        @Override public void rstStream(int flags, int streamId, int statusCode) {, +            SpdyStream rstStream = removeStream(streamId);, +                rstStream.receiveRstStream(statusCode);, +        }, +        @Override public void settings(int flags, Settings newSettings) {, +            synchronized (SpdyConnection.this) {, +                if (settings == null, +                        || (flags & Settings.FLAG_CLEAR_PREVIOUSLY_PERSISTED_SETTINGS) != 0) {, +                    settings = newSettings;, +                    settings.merge(newSettings);, +                }, +            }, +        }, +, +        @Override public void noop() {, +        }, +, +        @Override public void ping(int flags, int streamId) {, +            if (isClient() != (streamId % 2 == 1)) {, +                // Respond to a client ping if this is a server and vice versa., +                writePingLater(streamId, null);, +            } else {, +                Ping ping = removePing(streamId);, +++ b/src/main/java/libcore/net/spdy/SpdyReader.java, +    private final DataInputStream in;]