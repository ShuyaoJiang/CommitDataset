[+++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +import java.security.GeneralSecurityException;, +import javax.net.ssl.SSLContext;, +   * <p>If unset, a lazily created SSL socket factory will be used., +   * <p>If unset, the, +   * {@link javax.net.ssl.HttpsURLConnection#getDefaultHostnameVerifier(), +      result.sslSocketFactory = getDefaultSSLSocketFactory();, +  /**, +   * Java and Android programs default to using a single global SSL context,, +   * accessible to HTTP clients as {@link SSLSocketFactory#getDefault()}. If we, +   * used the shared SSL context, when OkHttp enables NPN for its SPDY-related, +   * stuff, it would also enable NPN for other usages, which might crash them, +   * because NPN is enabled when it isn't expected to be., +   * <p>, +   * This code avoids that by defaulting to an OkHttp created SSL context. The, +   * significant drawback of this approach is that apps that customize the, +   * global SSL context will lose these customizations., +   */, +  private synchronized SSLSocketFactory getDefaultSSLSocketFactory() {, +    if (sslSocketFactory == null) {, +      try {, +        SSLContext sslContext = SSLContext.getInstance("TLS");, +        sslContext.init(null, null, null);, +        sslSocketFactory = sslContext.getSocketFactory();, +      } catch (GeneralSecurityException e) {, +        throw new AssertionError(); // The system has no TLS. Just give up., +      }, +    }, +    return sslSocketFactory;, +  }, +]