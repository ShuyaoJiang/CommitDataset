[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +        .add("\tkey\t:\tvalue\t") // '\t' also counts as whitespace, +    assertEquals(Arrays.asList("value"), headers.values("key"));, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +        .add("\tkey\t:\tvalue\t") // '\t' also counts as whitespace, +    assertEquals(Arrays.asList("value"), headers.values("key"));, +++ b/okhttp-tests/src/test/java/okhttp3/RequestTest.java, +  @Test public void headerAllowsTabOnlyInValues() throws Exception {, +    Request.Builder builder = new Request.Builder();, +    builder.header("key", "sample\tvalue");, +    try {, +      builder.header("sample\tkey", "value");, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +        .add("\tkey\t:\tvalue\t") // '\t' also counts as whitespace, +    assertEquals(Arrays.asList("value"), headers.values("key"));, +++ b/okhttp-tests/src/test/java/okhttp3/RequestTest.java, +  @Test public void headerAllowsTabOnlyInValues() throws Exception {, +    Request.Builder builder = new Request.Builder();, +    builder.header("key", "sample\tvalue");, +    try {, +      builder.header("sample\tkey", "value");, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Headers.java, +        if ((c <= '\u001f' && c != '\u0009' /* htab */) || c >= '\u007f') {]