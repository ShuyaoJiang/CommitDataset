[+++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +      writer.write(Integer.toString(varyHeaders.size()) + '\n');, +      for (int i = 0; i < varyHeaders.size(); i++) {, +        writer.write(varyHeaders.name(i) + ": " + varyHeaders.value(i) + '\n');, +      writer.write(Integer.toString(responseHeaders.size()) + '\n');, +      for (int i = 0; i < responseHeaders.size(); i++) {, +        writer.write(responseHeaders.name(i) + ": " + responseHeaders.value(i) + '\n');, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +      writer.write(Integer.toString(varyHeaders.size()) + '\n');, +      for (int i = 0; i < varyHeaders.size(); i++) {, +        writer.write(varyHeaders.name(i) + ": " + varyHeaders.value(i) + '\n');, +      writer.write(Integer.toString(responseHeaders.size()) + '\n');, +      for (int i = 0; i < responseHeaders.size(); i++) {, +        writer.write(responseHeaders.name(i) + ": " + responseHeaders.value(i) + '\n');, +++ b/okhttp/src/main/java/com/squareup/okhttp/Job.java, +          requestBuilder.header("Transfer-Encoding", "chunked");, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +      writer.write(Integer.toString(varyHeaders.size()) + '\n');, +      for (int i = 0; i < varyHeaders.size(); i++) {, +        writer.write(varyHeaders.name(i) + ": " + varyHeaders.value(i) + '\n');, +      writer.write(Integer.toString(responseHeaders.size()) + '\n');, +      for (int i = 0; i < responseHeaders.size(); i++) {, +        writer.write(responseHeaders.name(i) + ": " + responseHeaders.value(i) + '\n');, +++ b/okhttp/src/main/java/com/squareup/okhttp/Job.java, +          requestBuilder.header("Transfer-Encoding", "chunked");, +++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java, +    return headers.size();, +    return headers.name(index);, +    return headers.value(index);, +  public boolean getNoCache() {, +  public boolean getOnlyIfCached() {, +      for (int i = 0; i < headers.size(); i++) {, +        String fieldName = headers.name(i);, +        String value = headers.value(i);, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +      writer.write(Integer.toString(varyHeaders.size()) + '\n');, +      for (int i = 0; i < varyHeaders.size(); i++) {, +        writer.write(varyHeaders.name(i) + ": " + varyHeaders.value(i) + '\n');, +      writer.write(Integer.toString(responseHeaders.size()) + '\n');, +      for (int i = 0; i < responseHeaders.size(); i++) {, +        writer.write(responseHeaders.name(i) + ": " + responseHeaders.value(i) + '\n');, +++ b/okhttp/src/main/java/com/squareup/okhttp/Job.java, +          requestBuilder.header("Transfer-Encoding", "chunked");, +++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java, +    return headers.size();, +    return headers.name(index);, +    return headers.value(index);, +  public boolean getNoCache() {, +  public boolean getOnlyIfCached() {, +      for (int i = 0; i < headers.size(); i++) {, +        String fieldName = headers.name(i);, +        String value = headers.value(i);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Response.java, +    return headers.size();, +    return headers.name(index);, +  // TODO: this shouldn't be public?, +    return headers.value(index);, +  // TODO: should not be public?, +  // TODO: should not be public?, +  public long getAgeSeconds() {, +    return parsedHeaders().ageSeconds;, +  }, +, +      for (int i = 0; i < headers.size(); i++) {, +        String fieldName = headers.name(i);, +        String value = headers.value(i);, +    public Builder removeHeader(String name) {, +      headers.removeAll(name);, +      return this;, +    }, +, +    // TODO: this shouldn't be public?, +    public Builder redirectedBy(Response redirectedBy) {, +      this.redirectedBy = redirectedBy;, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +      writer.write(Integer.toString(varyHeaders.size()) + '\n');, +      for (int i = 0; i < varyHeaders.size(); i++) {, +        writer.write(varyHeaders.name(i) + ": " + varyHeaders.value(i) + '\n');, +      writer.write(Integer.toString(responseHeaders.size()) + '\n');, +      for (int i = 0; i < responseHeaders.size(); i++) {, +        writer.write(responseHeaders.name(i) + ": " + responseHeaders.value(i) + '\n');, +++ b/okhttp/src/main/java/com/squareup/okhttp/Job.java, +          requestBuilder.header("Transfer-Encoding", "chunked");, +++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java, +    return headers.size();, +    return headers.name(index);, +    return headers.value(index);, +  public boolean getNoCache() {, +  public boolean getOnlyIfCached() {, +      for (int i = 0; i < headers.size(); i++) {, +        String fieldName = headers.name(i);, +        String value = headers.value(i);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Response.java, +    return headers.size();, +    return headers.name(index);, +  // TODO: this shouldn't be public?, +    return headers.value(index);, +  // TODO: should not be public?, +  // TODO: should not be public?, +  public long getAgeSeconds() {]