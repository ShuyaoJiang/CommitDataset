[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        // See warnings associated with these socket policies in SocketPolicy., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        // See warnings associated with these socket policies in SocketPolicy., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/**, + * What should be done with the incoming socket., + *, + * <p>Be careful when using values like {@link #DISCONNECT_AT_END}, {@link #SHUTDOWN_INPUT_AT_END}, + * and {@link #SHUTDOWN_OUTPUT_AT_END} that close a socket after a response, and where there are, + * follow-up requests. The client is unblocked and free to continue as soon as it has received the, + * entire response body. If and when the client makes a subsequent request using a pooled socket the, + * server may not have had time to close the socket. The socket will be closed at an indeterminate, + * point before or during the second request. It may be closed after client has started sending the, + * request body. If a request body is not retryable then the client may fail the request, making, + * client behavior non-deterministic. Add delays in the client to improve the chances that the, + * server has closed the socket before follow up requests are made., + */, +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        // See warnings associated with these socket policies in SocketPolicy., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/**, + * What should be done with the incoming socket., + *, + * <p>Be careful when using values like {@link #DISCONNECT_AT_END}, {@link #SHUTDOWN_INPUT_AT_END}, + * and {@link #SHUTDOWN_OUTPUT_AT_END} that close a socket after a response, and where there are, + * follow-up requests. The client is unblocked and free to continue as soon as it has received the, + * entire response body. If and when the client makes a subsequent request using a pooled socket the, + * server may not have had time to close the socket. The socket will be closed at an indeterminate, + * point before or during the second request. It may be closed after client has started sending the, + * request body. If a request body is not retryable then the client may fail the request, making, + * client behavior non-deterministic. Add delays in the client to improve the chances that the, + * server has closed the socket before follow up requests are made., + */, +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +import com.squareup.okhttp.CipherSuite;, +      String cipherSuiteString = httpsUrlConnection.getCipherSuite();, +      CipherSuite cipherSuite = CipherSuite.forJavaName(cipherSuiteString);, +      Handshake handshake = Handshake.get(cipherSuite, nullSafeImmutableList(peerCertificates),, +, +      String cipherSuiteString = javaSecureCacheResponse.getCipherSuite();, +      CipherSuite cipherSuite = CipherSuite.forJavaName(cipherSuiteString);, +      Handshake handshake = Handshake.get(cipherSuite, peerCertificates, localCertificates);, +          return handshake != null ? handshake.cipherSuite().javaName() : null;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        // See warnings associated with these socket policies in SocketPolicy., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/**, + * What should be done with the incoming socket., + *, + * <p>Be careful when using values like {@link #DISCONNECT_AT_END}, {@link #SHUTDOWN_INPUT_AT_END}, + * and {@link #SHUTDOWN_OUTPUT_AT_END} that close a socket after a response, and where there are, + * follow-up requests. The client is unblocked and free to continue as soon as it has received the, + * entire response body. If and when the client makes a subsequent request using a pooled socket the, + * server may not have had time to close the socket. The socket will be closed at an indeterminate, + * point before or during the second request. It may be closed after client has started sending the, + * request body. If a request body is not retryable then the client may fail the request, making, + * client behavior non-deterministic. Add delays in the client to improve the chances that the, + * server has closed the socket before follow up requests are made., + */, +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +import com.squareup.okhttp.CipherSuite;, +      String cipherSuiteString = httpsUrlConnection.getCipherSuite();, +      CipherSuite cipherSuite = CipherSuite.forJavaName(cipherSuiteString);, +      Handshake handshake = Handshake.get(cipherSuite, nullSafeImmutableList(peerCertificates),, +, +      String cipherSuiteString = javaSecureCacheResponse.getCipherSuite();, +      CipherSuite cipherSuite = CipherSuite.forJavaName(cipherSuiteString);, +      Handshake handshake = Handshake.get(cipherSuite, peerCertificates, localCertificates);, +          return handshake != null ? handshake.cipherSuite().javaName() : null;, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java, +import com.squareup.okhttp.CipherSuite;, +        return "SSL_RSA_WITH_NULL_MD5";, +    assertNotNullAndEquals(CipherSuite.TLS_RSA_WITH_NULL_MD5, handshake.cipherSuite());, +    Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,, +        Arrays.<Certificate>asList(SERVER_CERT), Arrays.<Certificate>asList(LOCAL_CERT));, +    assertEquals("SSL_RSA_WITH_NULL_MD5", httpsUrlConnection.getCipherSuite());, +    Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,, +        Arrays.<Certificate>asList(SERVER_CERT), Arrays.<Certificate>asList(LOCAL_CERT));, +    assertEquals(handshake.cipherSuite().javaName(), javaCacheResponse.getCipherSuite());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        // See warnings associated with these socket policies in SocketPolicy.]