[+++ b/okhttp/src/main/java/okhttp3/RealWebSocketCall.java, +  /** The application's original request unadulterated by web socket headers. */, +  private final Request originalRequest;, +    originalRequest = request;, +  @Override public Request request() {, +    return originalRequest;, +  }, +, +  @Override public void cancel() {, +    call.cancel();, +  }, +, +  @Override public boolean isExecuted() {, +    return call.isExecuted();, +  }, +, +  @Override public boolean isCanceled() {, +    return call.isCanceled();, +  }, +, +  @Override public WebSocketCall clone() {, +    return new RealWebSocketCall(call.client, originalRequest, random);, +  }, +, +++ b/okhttp/src/main/java/okhttp3/RealWebSocketCall.java, +  /** The application's original request unadulterated by web socket headers. */, +  private final Request originalRequest;, +    originalRequest = request;, +  @Override public Request request() {, +    return originalRequest;, +  }, +, +  @Override public void cancel() {, +    call.cancel();, +  }, +, +  @Override public boolean isExecuted() {, +    return call.isExecuted();, +  }, +, +  @Override public boolean isCanceled() {, +    return call.isCanceled();, +  }, +, +  @Override public WebSocketCall clone() {, +    return new RealWebSocketCall(call.client, originalRequest, random);, +  }, +, +++ b/okhttp/src/main/java/okhttp3/WebSocketCall.java, +public interface WebSocketCall extends Cloneable {, +  /** Returns the original request that initiated this call. */, +  Request request();, +, +  /**, +   * Returns true if this call has been {@linkplain #enqueue(WebSocketListener) enqueued}. It is an, +   * error to enqueue a call more than once., +   */, +  boolean isExecuted();, +, +  boolean isCanceled();, +, +  /**, +   * Create a new, identical call to this one which can be enqueued even if this call has already, +   * been., +   */, +  WebSocketCall clone();, +]