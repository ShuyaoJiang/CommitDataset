[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.Internal;, +   * Adds a new header with the name and value. This may be used to add multiple, +   * headers with the same name. Unlike {@link #addHeader(String, Object)} this, +   * does not validate the name and value., +   */, +  public MockResponse addHeaderLenient(String name, Object value) {, +    Internal.instance.addLenient(headers, name, String.valueOf(value));, +    return this;, +  }, +, +  /**, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.Internal;, +   * Adds a new header with the name and value. This may be used to add multiple, +   * headers with the same name. Unlike {@link #addHeader(String, Object)} this, +   * does not validate the name and value., +   */, +  public MockResponse addHeaderLenient(String name, Object value) {, +    Internal.instance.addLenient(headers, name, String.valueOf(value));, +    return this;, +  }, +, +  /**, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +import java.net.ProtocolException;, +    assertEquals(2, connection.getContentLength());, +    try {, +      int byteRead = in.read();, +      // OpenJDK behavior: end of stream., +      assertEquals(-1, byteRead);, +    } catch (ProtocolException e) {, +      // On Android, HttpURLConnection is implemented by OkHttp v2. OkHttp, +      // treats an incomplete response body as a ProtocolException., +    }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.Internal;, +   * Adds a new header with the name and value. This may be used to add multiple, +   * headers with the same name. Unlike {@link #addHeader(String, Object)} this, +   * does not validate the name and value., +   */, +  public MockResponse addHeaderLenient(String name, Object value) {, +    Internal.instance.addLenient(headers, name, String.valueOf(value));, +    return this;, +  }, +, +  /**, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +import java.net.ProtocolException;, +    assertEquals(2, connection.getContentLength());, +    try {, +      int byteRead = in.read();, +      // OpenJDK behavior: end of stream., +      assertEquals(-1, byteRead);, +    } catch (ProtocolException e) {, +      // On Android, HttpURLConnection is implemented by OkHttp v2. OkHttp, +      // treats an incomplete response body as a ProtocolException., +    }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/DelegatingSSLSocketFactory.java, +    return configureSocket(sslSocket);, +    return configureSocket(sslSocket);, +    return configureSocket(sslSocket);, +    return configureSocket(sslSocket);, +    return configureSocket(sslSocket);, +    return configureSocket(sslSocket);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.Internal;, +   * Adds a new header with the name and value. This may be used to add multiple, +   * headers with the same name. Unlike {@link #addHeader(String, Object)} this, +   * does not validate the name and value., +   */, +  public MockResponse addHeaderLenient(String name, Object value) {, +    Internal.instance.addLenient(headers, name, String.valueOf(value));, +    return this;, +  }, +, +  /**, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +import java.net.ProtocolException;, +    assertEquals(2, connection.getContentLength());, +    try {, +      int byteRead = in.read();, +      // OpenJDK behavior: end of stream., +      assertEquals(-1, byteRead);, +    } catch (ProtocolException e) {, +      // On Android, HttpURLConnection is implemented by OkHttp v2. OkHttp, +      // treats an incomplete response body as a ProtocolException., +    }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/DelegatingSSLSocketFactory.java, +    return configureSocket(sslSocket);, +    return configureSocket(sslSocket);, +    return configureSocket(sslSocket);, +    return configureSocket(sslSocket);, +    return configureSocket(sslSocket);, +    return configureSocket(sslSocket);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +import static org.junit.Assert.assertNull;, +  @Test public void parseHostAsciiNonPrintable() throws Exception {, +    String host = "host\u0001";, +    assertNull(HttpUrl.parse("http://" + host + "/"));]