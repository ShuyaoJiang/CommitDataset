[+++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import java.util.concurrent.TimeUnit;, +  private int connectTimeout;, +  private int readTimeout;, +   * Sets the default connect timeout for new connections. A value of 0 means no timeout., +   *, +   * @see URLConnection#setConnectTimeout(int), +   */, +  public void setConnectTimeout(long timeout, TimeUnit unit) {, +    if (timeout < 0) {, +      throw new IllegalArgumentException("timeout < 0");, +    }, +    if (unit == null) {, +      throw new IllegalArgumentException("unit == null");, +    }, +    long millis = unit.toMillis(timeout);, +    if (millis > Integer.MAX_VALUE) {, +      throw new IllegalArgumentException("Timeout too large.");, +    }, +    connectTimeout = (int) millis;, +  }, +, +  /** Default connect timeout (in milliseconds). */, +  public int getConnectTimeout() {, +    return connectTimeout;, +  }, +, +  /**, +   * Sets the default read timeout for new connections. A value of 0 means no timeout., +   *, +   * @see URLConnection#setReadTimeout(int), +   */, +  public void setReadTimeout(long timeout, TimeUnit unit) {, +    if (timeout < 0) {, +      throw new IllegalArgumentException("timeout < 0");, +    }, +    if (unit == null) {, +      throw new IllegalArgumentException("unit == null");, +    }, +    long millis = unit.toMillis(timeout);, +    if (millis > Integer.MAX_VALUE) {, +      throw new IllegalArgumentException("Timeout too large.");, +    }, +    connectTimeout = (int) millis;, +  }, +, +  /** Default read timeout (in milliseconds). */, +  public int getReadTimeout() {, +    return readTimeout;, +  }, +, +  /**, +, +    HttpURLConnection connection;, +      connection = new HttpURLConnectionImpl(url, copy, copy.okResponseCache(), copy.failedRoutes);, +      connection = new HttpsURLConnectionImpl(url, copy, copy.okResponseCache(), copy.failedRoutes);, +, +    connection.setReadTimeout(readTimeout);, +    connection.setConnectTimeout(connectTimeout);, +    return connection;, +    result.connectTimeout = connectTimeout;, +    result.readTimeout = readTimeout;, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import java.util.concurrent.TimeUnit;, +  private int connectTimeout;, +  private int readTimeout;, +   * Sets the default connect timeout for new connections. A value of 0 means no timeout., +   *, +   * @see URLConnection#setConnectTimeout(int), +   */, +  public void setConnectTimeout(long timeout, TimeUnit unit) {, +    if (timeout < 0) {, +      throw new IllegalArgumentException("timeout < 0");, +    }, +    if (unit == null) {, +      throw new IllegalArgumentException("unit == null");, +    }, +    long millis = unit.toMillis(timeout);, +    if (millis > Integer.MAX_VALUE) {, +      throw new IllegalArgumentException("Timeout too large.");, +    }, +    connectTimeout = (int) millis;, +  }, +, +  /** Default connect timeout (in milliseconds). */, +  public int getConnectTimeout() {, +    return connectTimeout;, +  }, +, +  /**, +   * Sets the default read timeout for new connections. A value of 0 means no timeout., +   *, +   * @see URLConnection#setReadTimeout(int), +   */, +  public void setReadTimeout(long timeout, TimeUnit unit) {, +    if (timeout < 0) {, +      throw new IllegalArgumentException("timeout < 0");, +    }, +    if (unit == null) {, +      throw new IllegalArgumentException("unit == null");]