[+++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +    assertEquals(list(root), cleaner.clean(list(root), "hostname"));, +      cleaner.clean(list(root), "hostname");, +    assertEquals(list(certB, certA, root), cleaner.clean(list(certB, certA, root), "hostname"));, +    assertEquals(list(certB, certA, root),, +        cleaner.clean(list(certB, certA), "hostname")); // Root is added!, +    assertEquals(list(certC, certB, certA, root),, +        cleaner.clean(list(certC, certA, root, certB), "hostname"));, +    assertEquals(list(certC, certB, certA, root),, +        cleaner.clean(list(certC, certA, certB), "hostname"));, +        cleaner.clean(list(certB, certUnnecessary, certA, root), "hostname"));, +        cleaner.clean(list(certB, certA), "hostname"));, +        cleaner.clean(list(certB, certA, trusted), "hostname"));, +        cleaner.clean(list(certB, certA, trusted, selfSigned), "hostname"));, +        cleaner.clean(list(certificate, intermediateCa), "hostname"));, +        cleaner.clean(list(certificate, intermediateCa, trusted), "hostname"));, +    assertEquals(certificates, cleaner.clean(certificates, "hostname"));, +    assertEquals(certificates, cleaner.clean(certificates.subList(0, 9), "hostname"));, +      cleaner.clean(certificates, "hostname");, +++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +    assertEquals(list(root), cleaner.clean(list(root), "hostname"));, +      cleaner.clean(list(root), "hostname");, +    assertEquals(list(certB, certA, root), cleaner.clean(list(certB, certA, root), "hostname"));, +    assertEquals(list(certB, certA, root),, +        cleaner.clean(list(certB, certA), "hostname")); // Root is added!, +    assertEquals(list(certC, certB, certA, root),, +        cleaner.clean(list(certC, certA, root, certB), "hostname"));, +    assertEquals(list(certC, certB, certA, root),, +        cleaner.clean(list(certC, certA, certB), "hostname"));, +        cleaner.clean(list(certB, certUnnecessary, certA, root), "hostname"));, +        cleaner.clean(list(certB, certA), "hostname"));, +        cleaner.clean(list(certB, certA, trusted), "hostname"));, +        cleaner.clean(list(certB, certA, trusted, selfSigned), "hostname"));, +        cleaner.clean(list(certificate, intermediateCa), "hostname"));, +        cleaner.clean(list(certificate, intermediateCa, trusted), "hostname"));, +    assertEquals(certificates, cleaner.clean(certificates, "hostname"));, +    assertEquals(certificates, cleaner.clean(certificates.subList(0, 9), "hostname"));, +      cleaner.clean(certificates, "hostname");, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +      peerCertificates = certificateChainCleaner.clean(peerCertificates, hostname);, +++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +    assertEquals(list(root), cleaner.clean(list(root), "hostname"));, +      cleaner.clean(list(root), "hostname");, +    assertEquals(list(certB, certA, root), cleaner.clean(list(certB, certA, root), "hostname"));, +    assertEquals(list(certB, certA, root),, +        cleaner.clean(list(certB, certA), "hostname")); // Root is added!, +    assertEquals(list(certC, certB, certA, root),, +        cleaner.clean(list(certC, certA, root, certB), "hostname"));, +    assertEquals(list(certC, certB, certA, root),, +        cleaner.clean(list(certC, certA, certB), "hostname"));, +        cleaner.clean(list(certB, certUnnecessary, certA, root), "hostname"));, +        cleaner.clean(list(certB, certA), "hostname"));, +        cleaner.clean(list(certB, certA, trusted), "hostname"));, +        cleaner.clean(list(certB, certA, trusted, selfSigned), "hostname"));, +        cleaner.clean(list(certificate, intermediateCa), "hostname"));, +        cleaner.clean(list(certificate, intermediateCa, trusted), "hostname"));, +    assertEquals(certificates, cleaner.clean(certificates, "hostname"));, +    assertEquals(certificates, cleaner.clean(certificates.subList(0, 9), "hostname"));, +      cleaner.clean(certificates, "hostname");, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +      peerCertificates = certificateChainCleaner.clean(peerCertificates, hostname);, +++ b/okhttp/src/main/java/okhttp3/internal/tls/CertificateChainCleaner.java, +import java.lang.reflect.Constructor;, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +  public abstract List<Certificate> clean(List<Certificate> chain, String hostname), +    try {, +      Class<?> extensionsClass = Class.forName("android.net.http.X509TrustManagerExtensions");, +      Constructor<?> constructor = extensionsClass.getConstructor(X509TrustManager.class);, +      Object extensions = constructor.newInstance(trustManager);, +      Method checkServerTrusted = extensionsClass.getMethod(, +          "checkServerTrusted", X509Certificate[].class, String.class, String.class);, +      return new AndroidCertificateChainCleaner(extensions, checkServerTrusted);, +    } catch (Exception e) {, +  }, +   * chain. This class duplicates the clean chain building performed during the TLS handshake. We, +   * prefer other mechanisms where they exist, such as with {@link AndroidCertificateChainCleaner}., +    @Override public List<Certificate> clean(List<Certificate> chain, String hostname), +, +  /**, +   * X509TrustManagerExtensions was added to Android in API 17 (Android 4.2, released in late 2012)., +   * This is the best way to get a clean chain on Android because it uses the same code as the TLS, +   * handshake., +   */, +  static final class AndroidCertificateChainCleaner extends CertificateChainCleaner {, +    private final Object x509TrustManagerExtensions;, +    private final Method checkServerTrusted;, +, +    AndroidCertificateChainCleaner(Object x509TrustManagerExtensions, Method checkServerTrusted) {, +      this.x509TrustManagerExtensions = x509TrustManagerExtensions;, +      this.checkServerTrusted = checkServerTrusted;, +    }, +, +    @SuppressWarnings({"unchecked", "SuspiciousToArrayCall"}) // Reflection on List<Certificate>., +    @Override public List<Certificate> clean(List<Certificate> chain, String hostname), +        throws SSLPeerUnverifiedException {, +      try {, +        X509Certificate[] certificates = chain.toArray(new X509Certificate[chain.size()]);, +        return (List<Certificate>) checkServerTrusted.invoke(, +            x509TrustManagerExtensions, certificates, "RSA", hostname);]