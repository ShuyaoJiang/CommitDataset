[+++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionConfiguration.java, +  private static final String TLS_1_2 = "TLSv1.2"; // 2008., +  private static final String TLS_1_1 = "TLSv1.1"; // 2006., +  private static final String TLS_1_0 = "TLSv1";   // 1999., +  private static final String SSL_3_0 = "SSLv3";   // 1996., +, +  /** A modern TLS configuration with extensions like SNI and ALPN available. */, +  public static final ConnectionConfiguration MODERN_TLS = new Builder(true), +      .cipherSuites(, +          // This is a subset of the cipher suites supported in Chrome 37, current as of 2014-10-5., +          // All of these suites are available on Android L; earlier releases support a subset of, +          // these suites. https://github.com/square/okhttp/issues/330, +      ), +      .tlsVersions(TLS_1_2, TLS_1_1, TLS_1_0, SSL_3_0), +      .supportsTlsExtensions(true), +      .build();, +  public static final ConnectionConfiguration COMPATIBLE_TLS = new Builder(MODERN_TLS), +      .tlsVersions(SSL_3_0), +      .build();, +  public static final ConnectionConfiguration CLEARTEXT = new Builder(false).build();, +  final boolean tls;, +  final boolean supportsTlsExtensions;, +  private ConnectionConfiguration(Builder builder) {, +    this.tls = builder.tls;, +    this.cipherSuites = builder.cipherSuites;, +    this.tlsVersions = builder.tlsVersions;, +    this.supportsTlsExtensions = builder.supportsTlsExtensions;, +  void apply(SSLSocket sslSocket, Route route) {, +    return new Builder(this), +        .cipherSuites(supportedCipherSuites.toArray(new String[supportedCipherSuites.size()])), +        .tlsVersions(supportedTlsVersions.toArray(new String[supportedTlsVersions.size()])), +        .build();, +  }, +, +  @Override public boolean equals(Object other) {, +    if (!(other instanceof ConnectionConfiguration)) return false;, +, +    ConnectionConfiguration that = (ConnectionConfiguration) other;, +    if (this.tls != that.tls) return false;, +, +    if (tls) {, +      if (!Arrays.equals(this.cipherSuites, that.cipherSuites)) return false;, +      if (!Arrays.equals(this.tlsVersions, that.tlsVersions)) return false;, +      if (this.supportsTlsExtensions != that.supportsTlsExtensions) return false;, +    }, +, +    return true;, +  }, +, +  @Override public int hashCode() {, +    int result = 17;, +    if (tls) {, +      result = 31 * result + Arrays.hashCode(cipherSuites);, +      result = 31 * result + Arrays.hashCode(tlsVersions);, +      result = 31 * result + (supportsTlsExtensions ? 0 : 1);, +    }, +    return result;, +    if (tls) {, +      return "ConnectionConfiguration(cipherSuites=" + Arrays.toString(cipherSuites), +    } else {, +      return "ConnectionConfiguration()";, +    }, +  }, +, +  public static final class Builder {, +    private boolean tls;, +    private String[] cipherSuites;, +    private String[] tlsVersions;, +    private boolean supportsTlsExtensions;, +, +    private Builder(boolean tls) {, +      this.tls = tls;, +    }, +, +    public Builder(ConnectionConfiguration connectionConfiguration) {, +      this.tls = connectionConfiguration.tls;, +      this.cipherSuites = connectionConfiguration.cipherSuites;, +      this.tlsVersions = connectionConfiguration.tlsVersions;, +      this.supportsTlsExtensions = connectionConfiguration.supportsTlsExtensions;, +    }, +, +    public Builder cipherSuites(String... cipherSuites) {, +      if (!tls) throw new IllegalStateException("no cipher suites for cleartext connections");, +      this.cipherSuites = cipherSuites.clone(); // Defensive copy., +      return this;, +    }, +, +    public Builder tlsVersions(String... tlsVersions) {, +      if (!tls) throw new IllegalStateException("no TLS versions for cleartext connections");, +      this.tlsVersions = tlsVersions.clone(); // Defensive copy., +      return this;, +    }, +, +    public Builder supportsTlsExtensions(boolean supportsTlsExtensions) {, +      if (!tls) throw new IllegalStateException("no TLS extensions for cleartext connections");, +      this.supportsTlsExtensions = supportsTlsExtensions;, +      return this;, +    }, +, +    public ConnectionConfiguration build() {]