[+++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +import static okhttp3.internal.huc.OkHttpURLConnection.SELECTED_PROTOCOL;, +  /** Confirm that runtime exceptions thrown inside of OkHttp propagate to the caller. */, +  @Test public void unexpectedExceptionSync() throws Exception {, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .dns(new Dns() {, +          @Override public List<InetAddress> lookup(String hostname) {, +            throw new RuntimeException("boom!");, +          }, +        }), +        .build());, +, +    server.enqueue(new MockResponse());, +, +    HttpURLConnection connection = urlFactory.open(server.url("/").url());, +    try {, +      connection.getResponseCode(); // Use the synchronous implementation., +      fail();, +    } catch (RuntimeException expected) {, +      assertEquals("boom!", expected.getMessage());, +    }, +  }, +, +  /** Confirm that runtime exceptions thrown inside of OkHttp propagate to the caller. */, +  @Test public void unexpectedExceptionAsync() throws Exception {, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .dns(new Dns() {, +          @Override public List<InetAddress> lookup(String hostname) {, +            throw new RuntimeException("boom!");, +          }, +        }), +        .build());, +, +    server.enqueue(new MockResponse());, +, +    HttpURLConnection connection = urlFactory.open(server.url("/").url());, +    try {, +      connection.connect(); // Force the async implementation., +      fail();, +    } catch (RuntimeException expected) {, +      assertEquals("boom!", expected.getMessage());, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +import static okhttp3.internal.huc.OkHttpURLConnection.SELECTED_PROTOCOL;, +  /** Confirm that runtime exceptions thrown inside of OkHttp propagate to the caller. */, +  @Test public void unexpectedExceptionSync() throws Exception {, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .dns(new Dns() {, +          @Override public List<InetAddress> lookup(String hostname) {, +            throw new RuntimeException("boom!");, +          }, +        }), +        .build());, +, +    server.enqueue(new MockResponse());, +, +    HttpURLConnection connection = urlFactory.open(server.url("/").url());, +    try {, +      connection.getResponseCode(); // Use the synchronous implementation., +      fail();, +    } catch (RuntimeException expected) {, +      assertEquals("boom!", expected.getMessage());, +    }, +  }, +, +  /** Confirm that runtime exceptions thrown inside of OkHttp propagate to the caller. */, +  @Test public void unexpectedExceptionAsync() throws Exception {, +    urlFactory.setClient(urlFactory.client().newBuilder(), +        .dns(new Dns() {, +          @Override public List<InetAddress> lookup(String hostname) {, +            throw new RuntimeException("boom!");, +          }, +        }), +        .build());, +, +    server.enqueue(new MockResponse());, +, +    HttpURLConnection connection = urlFactory.open(server.url("/").url());, +    try {, +      connection.connect(); // Force the async implementation., +      fail();, +    } catch (RuntimeException expected) {, +      assertEquals("boom!", expected.getMessage());, +    }, +  }, +, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +  private Throwable callFailure;, +          throw propagate(callFailure);, +    clientBuilder.interceptors().add(UnexpectedException.INTERCEPTOR);, +      throw propagate(callFailure);, +      if (callFailure != null) throw propagate(callFailure);, +      this.callFailure = (e instanceof UnexpectedException) ? e.getCause() : e;, +  static final class UnexpectedException extends IOException {, +    static final Interceptor INTERCEPTOR = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        try {, +          return chain.proceed(chain.request());]