[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +        return Arrays.asList("spdy/3");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +        return Arrays.asList("spdy/3");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.Arrays;, +  private static final byte[] HTTP_20_DRAFT_09 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '9', '/', '2', '.', '0', +  };, +  private static final byte[] SPDY3 = new byte[] {, +      's', 'p', 'd', 'y', '/', '3', +  };, +  private static final byte[] HTTP_11 = new byte[] {, +      'h', 't', 't', 'p', '/', '1', '.', '1', +  };, +  private static final byte[] NPN_PROTOCOLS = joinNpnProtocols(HTTP_20_DRAFT_09, SPDY3, HTTP_11);, +, +  private static byte[] joinNpnProtocols(byte[]... protocols) {, +    try {, +      ByteArrayOutputStream baos = new ByteArrayOutputStream();, +      for (byte[] protocol : protocols) {, +        baos.write(protocol.length);, +        baos.write(protocol);, +      }, +      return baos.toByteArray();, +    } catch (IOException e) {, +      throw new AssertionError(e);, +    }, +  }, +   * transport like HTTP/1.1 or SPDY/3. Call this method to disable NPN and, +        Transport transport = Transport.HTTP_11;, +            Platform.get().setNpnProtocols(sslSocket, NPN_PROTOCOLS);, +            byte[] selectedProtocol = Platform.get().getNpnSelectedProtocol(sslSocket);, +            if (selectedProtocol == null || Arrays.equals(selectedProtocol, HTTP_11)) {, +              transport = Transport.HTTP_11;, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_09)) {, +              transport = Transport.HTTP_20_DRAFT_09;, +            } else if (Arrays.equals(selectedProtocol, SPDY3)) {, +              transport = Transport.SPDY_3;, +            } else {, +              throw new IllegalStateException(, +                  "Unexpected transport: " + new String(selectedProtocol, Util.US_ASCII));, +            }, +        if (transport == Transport.HTTP_20_DRAFT_09 || transport == Transport.SPDY_3) {, +          SpdySocketHandler spdySocketHandler = new SpdySocketHandler(socket, transport);, +          SpdyConnection.Builder builder = new SpdyConnection.Builder(false, socket), +              .handler(spdySocketHandler);, +          if (transport == Transport.HTTP_20_DRAFT_09) {, +            builder.http20Draft09();, +          } else {, +            builder.spdy3();, +          }, +          SpdyConnection spdyConnection = builder.build();, +    private final Transport transport;, +    private SpdySocketHandler(Socket socket, Transport transport) {, +      this.transport = transport;, +          + " transport is " + transport);, +, +  enum Transport {, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_09, +  }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +        return Arrays.asList("spdy/3");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.Arrays;, +  private static final byte[] HTTP_20_DRAFT_09 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '9', '/', '2', '.', '0', +  };, +  private static final byte[] SPDY3 = new byte[] {, +      's', 'p', 'd', 'y', '/', '3', +  };, +  private static final byte[] HTTP_11 = new byte[] {, +      'h', 't', 't', 'p', '/', '1', '.', '1', +  };, +  private static final byte[] NPN_PROTOCOLS = joinNpnProtocols(HTTP_20_DRAFT_09, SPDY3, HTTP_11);, +, +  private static byte[] joinNpnProtocols(byte[]... protocols) {, +    try {, +      ByteArrayOutputStream baos = new ByteArrayOutputStream();, +      for (byte[] protocol : protocols) {, +        baos.write(protocol.length);, +        baos.write(protocol);, +      }, +      return baos.toByteArray();, +    } catch (IOException e) {, +      throw new AssertionError(e);, +    }, +  }, +   * transport like HTTP/1.1 or SPDY/3. Call this method to disable NPN and, +        Transport transport = Transport.HTTP_11;, +            Platform.get().setNpnProtocols(sslSocket, NPN_PROTOCOLS);, +            byte[] selectedProtocol = Platform.get().getNpnSelectedProtocol(sslSocket);, +            if (selectedProtocol == null || Arrays.equals(selectedProtocol, HTTP_11)) {, +              transport = Transport.HTTP_11;, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_09)) {, +              transport = Transport.HTTP_20_DRAFT_09;, +            } else if (Arrays.equals(selectedProtocol, SPDY3)) {, +              transport = Transport.SPDY_3;, +            } else {, +              throw new IllegalStateException(]