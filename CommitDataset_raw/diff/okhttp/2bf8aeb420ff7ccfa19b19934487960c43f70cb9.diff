[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.RecordingOkAuthenticator;, +import org.junit.Ignore;, +  private MockWebServer server2 = new MockWebServer();, +    server2.shutdown();, +    server2.enqueue(new MockResponse().setBody("Page 2"));, +    server2.play();, +        .addHeader("Location: " + server2.getUrl("/")));, +    RecordedRequest request2 = server2.takeRequest();, +  @Ignore // https://github.com/square/okhttp/issues/810, +  @Test public void redirectsDoNotIncludeTooManyAuthHeaders() throws Exception {, +    server2.enqueue(new MockResponse().setBody("Page 2"));, +    server2.play();, +, +    server.enqueue(new MockResponse().setResponseCode(401));, +    server.enqueue(new MockResponse().setResponseCode(302), +        .addHeader("Location: " + server2.getUrl("/b")));, +    server.play();, +, +    client.setAuthenticator(new RecordingOkAuthenticator(Credentials.basic("jesse", "secret")));, +, +    Request request = new Request.Builder().url(server.getUrl("/a")).build();, +    Response response = client.newCall(request).execute();, +    assertEquals("Page 2", response.body().string());, +, +    RecordedRequest redirectRequest = server2.takeRequest();, +    assertContainsNoneMatching(redirectRequest.getHeaders(), "Authorization.*");, +    assertEquals("/b", redirectRequest.getPath());, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.RecordingOkAuthenticator;, +import org.junit.Ignore;, +  private MockWebServer server2 = new MockWebServer();, +    server2.shutdown();, +    server2.enqueue(new MockResponse().setBody("Page 2"));, +    server2.play();, +        .addHeader("Location: " + server2.getUrl("/")));, +    RecordedRequest request2 = server2.takeRequest();, +  @Ignore // https://github.com/square/okhttp/issues/810, +  @Test public void redirectsDoNotIncludeTooManyAuthHeaders() throws Exception {, +    server2.enqueue(new MockResponse().setBody("Page 2"));, +    server2.play();, +, +    server.enqueue(new MockResponse().setResponseCode(401));, +    server.enqueue(new MockResponse().setResponseCode(302), +        .addHeader("Location: " + server2.getUrl("/b")));, +    server.play();, +, +    client.setAuthenticator(new RecordingOkAuthenticator(Credentials.basic("jesse", "secret")));, +, +    Request request = new Request.Builder().url(server.getUrl("/a")).build();, +    Response response = client.newCall(request).execute();, +    assertEquals("Page 2", response.body().string());, +, +    RecordedRequest redirectRequest = server2.takeRequest();, +    assertContainsNoneMatching(redirectRequest.getHeaders(), "Authorization.*");, +    assertEquals("/b", redirectRequest.getPath());, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingAuthenticator.java, +    this.calls, +        .add("host=", +            + getRequestingHost(), +            + " port=", +            + getRequestingPort(), +            + " site=", +            + getRequestingSite(), +            + " url=", +            + getRequestingURL(), +            + " type=", +            + getRequestorType(), +            + " prompt=", +            + getRequestingPrompt(), +            + " protocol=", +            + getRequestingProtocol(), +            + " scheme=", +            + getRequestingScheme());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.RecordingOkAuthenticator;, +import org.junit.Ignore;, +  private MockWebServer server2 = new MockWebServer();, +    server2.shutdown();, +    server2.enqueue(new MockResponse().setBody("Page 2"));, +    server2.play();, +        .addHeader("Location: " + server2.getUrl("/")));, +    RecordedRequest request2 = server2.takeRequest();, +  @Ignore // https://github.com/square/okhttp/issues/810, +  @Test public void redirectsDoNotIncludeTooManyAuthHeaders() throws Exception {, +    server2.enqueue(new MockResponse().setBody("Page 2"));, +    server2.play();, +, +    server.enqueue(new MockResponse().setResponseCode(401));, +    server.enqueue(new MockResponse().setResponseCode(302), +        .addHeader("Location: " + server2.getUrl("/b")));, +    server.play();, +, +    client.setAuthenticator(new RecordingOkAuthenticator(Credentials.basic("jesse", "secret")));, +, +    Request request = new Request.Builder().url(server.getUrl("/a")).build();]