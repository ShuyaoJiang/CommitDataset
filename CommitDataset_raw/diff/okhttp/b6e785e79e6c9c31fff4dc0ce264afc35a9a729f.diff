[+++ b/src/main/java/libcore/net/spdy/SpdyConnection.java, +    /**, +     * True if this peer initiated the connection., +     */, +    final boolean client;, +    private final SpdyReader spdyReader;, +    private final SpdyWriter spdyWriter;, +    private final ExecutorService readExecutor;, +    private final ExecutorService writeExecutor;, +    private final ExecutorService callbackExecutor;, +, +        client = builder.client;, +        handler = builder.handler;, +        callbackExecutor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60, TimeUnit.SECONDS,, +            final SpdyStream previous;, +                writeExecutor.execute(new Runnable() {, +                    @Override public void run() {, +                        try {, +                        } catch (IOException ignored) {, +                        }, +                    }, +                });, +            if (client != (streamId % 2 == 1)) {, +++ b/src/main/java/libcore/net/spdy/SpdyConnection.java, +    /**, +     * True if this peer initiated the connection., +     */, +    final boolean client;, +    private final SpdyReader spdyReader;, +    private final SpdyWriter spdyWriter;, +    private final ExecutorService readExecutor;, +    private final ExecutorService writeExecutor;, +    private final ExecutorService callbackExecutor;, +, +        client = builder.client;, +        handler = builder.handler;, +        callbackExecutor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60, TimeUnit.SECONDS,, +            final SpdyStream previous;, +                writeExecutor.execute(new Runnable() {, +                    @Override public void run() {, +                        try {, +                        } catch (IOException ignored) {, +                        }, +                    }, +                });, +            if (client != (streamId % 2 == 1)) {, +++ b/src/main/java/libcore/net/spdy/SpdyServer.java, +        stream.reply(responseHeaders, true);, +        OutputStream out = stream.getOutputStream();, +        stream.reply(Arrays.asList(, +        ), true);, +        OutputStream out = stream.getOutputStream();, +++ b/src/main/java/libcore/net/spdy/SpdyConnection.java, +    /**, +     * True if this peer initiated the connection., +     */, +    final boolean client;, +    private final SpdyReader spdyReader;, +    private final SpdyWriter spdyWriter;, +    private final ExecutorService readExecutor;, +    private final ExecutorService writeExecutor;, +    private final ExecutorService callbackExecutor;, +, +        client = builder.client;, +        handler = builder.handler;, +        callbackExecutor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60, TimeUnit.SECONDS,, +            final SpdyStream previous;, +                writeExecutor.execute(new Runnable() {, +                    @Override public void run() {, +                        try {, +                        } catch (IOException ignored) {, +                        }, +                    }, +                });, +            if (client != (streamId % 2 == 1)) {, +++ b/src/main/java/libcore/net/spdy/SpdyServer.java, +        stream.reply(responseHeaders, true);, +        OutputStream out = stream.getOutputStream();, +        stream.reply(Arrays.asList(, +        ), true);, +        OutputStream out = stream.getOutputStream();, +++ b/src/main/java/libcore/net/spdy/SpdyStream.java, +            in.finished = (flags & SpdyConnection.FLAG_UNIDIRECTIONAL) != 0;, +            out.finished = (flags & SpdyConnection.FLAG_FIN) != 0;, +            in.finished = (flags & SpdyConnection.FLAG_FIN) != 0;, +            out.finished = (flags & SpdyConnection.FLAG_UNIDIRECTIONAL) != 0;, +        return connection.client == streamIsClient;, +    /**, +     * Returns the stream's response headers, blocking if necessary if they, +     * have not been received yet., +     */, +        // TODO: throw InterruptedIOException?, +        // TODO: throw if responseHeaders == null, +     * Sends a reply to an incoming stream., +     *, +     * @param out true to create an output stream that we can use to send data, +     *     to the remote peer. Corresponds to {@code FLAG_FIN}., +    public void reply(List<String> responseHeaders, boolean out) throws IOException {, +        int flags = 0;, +        synchronized (this) {]