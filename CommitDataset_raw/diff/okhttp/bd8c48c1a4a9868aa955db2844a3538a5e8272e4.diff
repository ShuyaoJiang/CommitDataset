[+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +  @Test public void networkErrorReportedAsCloseNotFailure() {, +    server2client.close();, +    client.processNextFrame();, +    clientListener.assertClose(1006, "");, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +  @Test public void networkErrorReportedAsCloseNotFailure() {, +    server2client.close();, +    client.processNextFrame();, +    clientListener.assertClose(1006, "");, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, +    callback.assertClose(1005, "");, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +  @Test public void networkErrorReportedAsCloseNotFailure() {, +    server2client.close();, +    client.processNextFrame();, +    clientListener.assertClose(1006, "");, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, +    callback.assertClose(1005, "");, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +import static okhttp3.internal.ws.WebSocketProtocol.CLOSE_ABNORMAL_TERMINATION;, +import static okhttp3.internal.ws.WebSocketProtocol.CLOSE_CLIENT_GOING_AWAY;, +import static okhttp3.internal.ws.WebSocketProtocol.CLOSE_PROTOCOL_EXCEPTION;, +      if (t instanceof IOException && !(t instanceof ProtocolException)) {, +        readerListener.onClose(CLOSE_ABNORMAL_TERMINATION, "");, +      } else {, +      }, +            int code = protocolException ? CLOSE_PROTOCOL_EXCEPTION : CLOSE_CLIENT_GOING_AWAY;, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +  @Test public void networkErrorReportedAsCloseNotFailure() {, +    server2client.close();, +    client.processNextFrame();, +    clientListener.assertClose(1006, "");, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, +    callback.assertClose(1005, "");, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +import static okhttp3.internal.ws.WebSocketProtocol.CLOSE_ABNORMAL_TERMINATION;, +import static okhttp3.internal.ws.WebSocketProtocol.CLOSE_CLIENT_GOING_AWAY;, +import static okhttp3.internal.ws.WebSocketProtocol.CLOSE_PROTOCOL_EXCEPTION;, +      if (t instanceof IOException && !(t instanceof ProtocolException)) {, +        readerListener.onClose(CLOSE_ABNORMAL_TERMINATION, "");, +      } else {, +      }, +            int code = protocolException ? CLOSE_PROTOCOL_EXCEPTION : CLOSE_CLIENT_GOING_AWAY;, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java, +import java.io.IOException;, +  /** Used when an unchecked exception was thrown in a listener. */, +  static final int CLOSE_CLIENT_GOING_AWAY = 1001;, +  /** Used when a {@link ProtocolException} was thrown by the reader or writer. */, +  static final int CLOSE_PROTOCOL_EXCEPTION = 1002;, +  /** Used when an empty close frame was received (i.e., without a status code). */, +  static final int CLOSE_NO_STATUS_CODE = 1005;, +  /** Used when a non-{@link ProtocolException} {@link IOException} was thrown by the reader. */, +  static final int CLOSE_ABNORMAL_TERMINATION = 1006;, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +  @Test public void networkErrorReportedAsCloseNotFailure() {, +    server2client.close();, +    client.processNextFrame();, +    clientListener.assertClose(1006, "");, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java, +    callback.assertClose(1005, "");, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +import static okhttp3.internal.ws.WebSocketProtocol.CLOSE_ABNORMAL_TERMINATION;, +import static okhttp3.internal.ws.WebSocketProtocol.CLOSE_CLIENT_GOING_AWAY;, +import static okhttp3.internal.ws.WebSocketProtocol.CLOSE_PROTOCOL_EXCEPTION;, +      if (t instanceof IOException && !(t instanceof ProtocolException)) {, +        readerListener.onClose(CLOSE_ABNORMAL_TERMINATION, "");, +      } else {, +      }, +            int code = protocolException ? CLOSE_PROTOCOL_EXCEPTION : CLOSE_CLIENT_GOING_AWAY;, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java, +import java.io.IOException;, +  /** Used when an unchecked exception was thrown in a listener. */, +  static final int CLOSE_CLIENT_GOING_AWAY = 1001;, +  /** Used when a {@link ProtocolException} was thrown by the reader or writer. */, +  static final int CLOSE_PROTOCOL_EXCEPTION = 1002;, +  /** Used when an empty close frame was received (i.e., without a status code). */, +  static final int CLOSE_NO_STATUS_CODE = 1005;, +  /** Used when a non-{@link ProtocolException} {@link IOException} was thrown by the reader. */, +  static final int CLOSE_ABNORMAL_TERMINATION = 1006;, +, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketReader.java, +import static okhttp3.internal.ws.WebSocketProtocol.CLOSE_NO_STATUS_CODE;, +        int code = CLOSE_NO_STATUS_CODE;]