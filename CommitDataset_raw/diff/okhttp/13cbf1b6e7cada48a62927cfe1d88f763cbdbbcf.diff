[+++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +    public SslClient.Builder certificateChain(KeyPair keyPair, X509Certificate keyCert,, +        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +    public SslClient.Builder certificateChain(KeyPair keyPair, X509Certificate keyCert,, +        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +    public SslClient.Builder certificateChain(KeyPair keyPair, X509Certificate keyCert,, +        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    SSLContext sslContext2 = SSLContext.getInstance("TLS");, +    sslContext2.init(null, null, null);, +    SSLSocketFactory sslSocketFactory2 = sslContext2.getSocketFactory();, +        .sslSocketFactory(sslSocketFactory2), +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +    public SslClient.Builder certificateChain(KeyPair keyPair, X509Certificate keyCert,, +        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    SSLContext sslContext2 = SSLContext.getInstance("TLS");, +    sslContext2.init(null, null, null);, +    SSLSocketFactory sslSocketFactory2 = sslContext2.getSocketFactory();, +        .sslSocketFactory(sslSocketFactory2), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +    public SslClient.Builder certificateChain(KeyPair keyPair, X509Certificate keyCert,, +        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    SSLContext sslContext2 = SSLContext.getInstance("TLS");, +    sslContext2.init(null, null, null);, +    SSLSocketFactory sslSocketFactory2 = sslContext2.getSocketFactory();, +        .sslSocketFactory(sslSocketFactory2), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, +    // Default is 64KiB - 1., +    assertEquals(65535, connection.peerSettings.getInitialWindowSize(-1));, +, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +    public SslClient.Builder certificateChain(KeyPair keyPair, X509Certificate keyCert,, +        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    SSLContext sslContext2 = SSLContext.getInstance("TLS");, +    sslContext2.init(null, null, null);, +    SSLSocketFactory sslSocketFactory2 = sslContext2.getSocketFactory();, +        .sslSocketFactory(sslSocketFactory2), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, +    // Default is 64KiB - 1., +    assertEquals(65535, connection.peerSettings.getInitialWindowSize(-1));, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java, +    SslClient serverSslContext = new SslClient.Builder(), +        .certificateChain(rogueCertificate.keyPair, rogueCertificate.certificate, compromisedIntermediateCa.certificate, goodCertificate.certificate, rootCa.certificate), +    SslClient serverSslContext = new SslClient.Builder(), +        .certificateChain(, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +    public SslClient.Builder certificateChain(KeyPair keyPair, X509Certificate keyCert,, +        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    SSLContext sslContext2 = SSLContext.getInstance("TLS");, +    sslContext2.init(null, null, null);, +    SSLSocketFactory sslSocketFactory2 = sslContext2.getSocketFactory();, +        .sslSocketFactory(sslSocketFactory2), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java, +    // Default is 64KiB - 1., +    assertEquals(65535, connection.peerSettings.getInitialWindowSize(-1));, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java, +    SslClient serverSslContext = new SslClient.Builder(), +        .certificateChain(rogueCertificate.keyPair, rogueCertificate.certificate, compromisedIntermediateCa.certificate, goodCertificate.certificate, rootCa.certificate), +    SslClient serverSslContext = new SslClient.Builder(), +        .certificateChain(, +++ b/okhttp/src/main/java/okhttp3/CipherSuite.java, +  // Last updated 2016-07-03 using cipher suites from Android 24 and Java 9., +  // public static final CipherSuite TLS_NULL_WITH_NULL_NULL = of("TLS_NULL_WITH_NULL_NULL", 0x0000);, +  public static final CipherSuite TLS_RSA_WITH_NULL_MD5 = of("SSL_RSA_WITH_NULL_MD5", 0x0001);, +  public static final CipherSuite TLS_RSA_WITH_NULL_SHA = of("SSL_RSA_WITH_NULL_SHA", 0x0002);, +  public static final CipherSuite TLS_RSA_EXPORT_WITH_RC4_40_MD5 = of("SSL_RSA_EXPORT_WITH_RC4_40_MD5", 0x0003);, +  public static final CipherSuite TLS_RSA_WITH_RC4_128_MD5 = of("SSL_RSA_WITH_RC4_128_MD5", 0x0004);, +  public static final CipherSuite TLS_RSA_WITH_RC4_128_SHA = of("SSL_RSA_WITH_RC4_128_SHA", 0x0005);, +  // public static final CipherSuite TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5 = of("SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5", 0x0006);, +  // public static final CipherSuite TLS_RSA_WITH_IDEA_CBC_SHA = of("TLS_RSA_WITH_IDEA_CBC_SHA", 0x0007);, +  public static final CipherSuite TLS_RSA_EXPORT_WITH_DES40_CBC_SHA = of("SSL_RSA_EXPORT_WITH_DES40_CBC_SHA", 0x0008);, +  public static final CipherSuite TLS_RSA_WITH_DES_CBC_SHA = of("SSL_RSA_WITH_DES_CBC_SHA", 0x0009);, +  public static final CipherSuite TLS_RSA_WITH_3DES_EDE_CBC_SHA = of("SSL_RSA_WITH_3DES_EDE_CBC_SHA", 0x000a);, +  // public static final CipherSuite TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA = of("SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA", 0x000b);, +  // public static final CipherSuite TLS_DH_DSS_WITH_DES_CBC_SHA = of("TLS_DH_DSS_WITH_DES_CBC_SHA", 0x000c);, +  // public static final CipherSuite TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA = of("TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA", 0x000d);, +  // public static final CipherSuite TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA = of("SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA", 0x000e);, +  // public static final CipherSuite TLS_DH_RSA_WITH_DES_CBC_SHA = of("TLS_DH_RSA_WITH_DES_CBC_SHA", 0x000f);, +  // public static final CipherSuite TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA = of("TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA", 0x0010);, +  public static final CipherSuite TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA = of("SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA", 0x0011);, +  public static final CipherSuite TLS_DHE_DSS_WITH_DES_CBC_SHA = of("SSL_DHE_DSS_WITH_DES_CBC_SHA", 0x0012);, +  public static final CipherSuite TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA = of("SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA", 0x0013);]