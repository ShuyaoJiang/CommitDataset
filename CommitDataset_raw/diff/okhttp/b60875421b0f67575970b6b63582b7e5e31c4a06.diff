[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/SyncApiTest.java, +import java.util.concurrent.TimeUnit;, +import okio.BufferedSource;, +  @Test public void timeoutsUpdatedOnReusedConnections() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setBody("def").throttleBody(1, 750, TimeUnit.MILLISECONDS));, +    server.play();, +, +    // First request: time out after 1000ms., +    client.setReadTimeout(1000, TimeUnit.MILLISECONDS);, +    onSuccess(new Request.Builder().url(server.getUrl("/a")).build()).assertBody("abc");, +, +    // Second request: time out after 250ms., +    client.setReadTimeout(250, TimeUnit.MILLISECONDS);, +    Request request = new Request.Builder().url(server.getUrl("/b")).build();, +    Response response = client.execute(request);, +    BufferedSource bodySource = response.body().source();, +    assertEquals('d', bodySource.readByte());, +, +    // The second byte of this request will be delayed by 750ms so we should time out after 250ms., +    long startNanos = System.nanoTime();, +    try {, +      bodySource.readByte();, +      fail();, +    } catch (IOException expected) {, +      // Timed out as expected., +      long elapsedNanos = System.nanoTime() - startNanos;, +      long elapsedMillis = TimeUnit.NANOSECONDS.toMillis(elapsedNanos);, +      assertTrue(String.format("Timed out: %sms", elapsedMillis), elapsedMillis < 500);, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/SyncApiTest.java, +import java.util.concurrent.TimeUnit;, +import okio.BufferedSource;, +  @Test public void timeoutsUpdatedOnReusedConnections() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setBody("def").throttleBody(1, 750, TimeUnit.MILLISECONDS));, +    server.play();, +, +    // First request: time out after 1000ms., +    client.setReadTimeout(1000, TimeUnit.MILLISECONDS);, +    onSuccess(new Request.Builder().url(server.getUrl("/a")).build()).assertBody("abc");, +, +    // Second request: time out after 250ms., +    client.setReadTimeout(250, TimeUnit.MILLISECONDS);, +    Request request = new Request.Builder().url(server.getUrl("/b")).build();, +    Response response = client.execute(request);, +    BufferedSource bodySource = response.body().source();, +    assertEquals('d', bodySource.readByte());, +, +    // The second byte of this request will be delayed by 750ms so we should time out after 250ms., +    long startNanos = System.nanoTime();, +    try {, +      bodySource.readByte();, +      fail();, +    } catch (IOException expected) {, +      // Timed out as expected., +      long elapsedNanos = System.nanoTime() - startNanos;, +      long elapsedMillis = TimeUnit.NANOSECONDS.toMillis(elapsedNanos);, +      assertTrue(String.format("Timed out: %sms", elapsedMillis), elapsedMillis < 500);, +    }, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +import java.net.URL;, +  public void connect(int connectTimeout, int readTimeout, int writeTimeout, Request tunnelRequest), +      throws IOException {, +      httpConnection = new HttpConnection(pool, this, socket);, +  private void upgradeToTls(Request tunnelRequest, int readTimeout, int writeTimeout), +    if (tunnelRequest != null) {, +      httpConnection = new HttpConnection(pool, this, socket);, +  public void setTimeouts(int readTimeoutMillis, int writeTimeoutMillis) throws IOException {, +    if (!connected) throw new IllegalStateException("setTimeouts - not connected");, +    // Don't set timeouts on shared SPDY connections., +    if (httpConnection != null) {, +      socket.setSoTimeout(readTimeoutMillis);, +      httpConnection.setTimeouts(readTimeoutMillis, writeTimeoutMillis);, +    }, +  private void makeTunnel(Request request, int readTimeout, int writeTimeout), +    HttpConnection tunnelConnection = new HttpConnection(pool, this, socket);, +    tunnelConnection.setTimeouts(readTimeout, writeTimeout);, +    URL url = request.url();, +    String requestLine = "CONNECT " + url.getHost() + ":" + url.getPort() + " HTTP/1.1";, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/SyncApiTest.java, +import java.util.concurrent.TimeUnit;, +import okio.BufferedSource;, +  @Test public void timeoutsUpdatedOnReusedConnections() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setBody("def").throttleBody(1, 750, TimeUnit.MILLISECONDS));, +    server.play();, +, +    // First request: time out after 1000ms., +    client.setReadTimeout(1000, TimeUnit.MILLISECONDS);, +    onSuccess(new Request.Builder().url(server.getUrl("/a")).build()).assertBody("abc");, +, +    // Second request: time out after 250ms., +    client.setReadTimeout(250, TimeUnit.MILLISECONDS);, +    Request request = new Request.Builder().url(server.getUrl("/b")).build();, +    Response response = client.execute(request);]