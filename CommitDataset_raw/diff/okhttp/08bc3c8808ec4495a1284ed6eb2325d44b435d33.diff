[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      server.setNpnProtocols(protocols);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      server.setNpnProtocols(protocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private List<Protocol> npnProtocols = Protocol.HTTP2_SPDY3_AND_HTTP;, +   * Indicates the protocols supported by NPN on incoming HTTPS connections., +   * This list is ignored when npn is disabled., +   *, +   * @param protocols the protocols to use, in order of preference. The list, +   *     must contain "http/1.1". It must not contain null., +   */, +  public void setNpnProtocols(List<Protocol> protocols) {, +    protocols = Util.immutableList(protocols);, +    if (!protocols.contains(Protocol.HTTP_11)) {, +      throw new IllegalArgumentException("protocols doesn't contain http/1.1: " + protocols);, +    }, +    if (protocols.contains(null)) {, +      throw new IllegalArgumentException("protocols must not contain null");, +    }, +    if (protocols.contains(ByteString.EMPTY)) {, +      throw new IllegalArgumentException("protocols contains an empty string");, +    }, +    this.npnProtocols = Util.immutableList(protocols);, +  }, +, +  /**, +            Platform.get().setNpnProtocols(sslSocket, npnProtocols);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      server.setNpnProtocols(protocols);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private List<Protocol> npnProtocols = Protocol.HTTP2_SPDY3_AND_HTTP;, +   * Indicates the protocols supported by NPN on incoming HTTPS connections., +   * This list is ignored when npn is disabled., +   *, +   * @param protocols the protocols to use, in order of preference. The list, +   *     must contain "http/1.1". It must not contain null., +   */, +  public void setNpnProtocols(List<Protocol> protocols) {, +    protocols = Util.immutableList(protocols);, +    if (!protocols.contains(Protocol.HTTP_11)) {, +      throw new IllegalArgumentException("protocols doesn't contain http/1.1: " + protocols);, +    }, +    if (protocols.contains(null)) {, +      throw new IllegalArgumentException("protocols must not contain null");, +    }, +    if (protocols.contains(ByteString.EMPTY)) {, +      throw new IllegalArgumentException("protocols contains an empty string");, +    }, +    this.npnProtocols = Util.immutableList(protocols);, +  }, +, +  /**, +            Platform.get().setNpnProtocols(sslSocket, npnProtocols);, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.setNpnEnabled(true);, +    server.setNpnProtocols(client.getProtocols());]