[+++ b/okhttp/build.gradle, +      'okhttp3.OkHttpClient$Builder#addInterceptor(okhttp3.Interceptor)',, +      'okhttp3.OkHttpClient$Builder#addNetworkInterceptor(okhttp3.Interceptor)',, +      'okhttp3.OkHttpClient$Builder#authenticator(okhttp3.Authenticator)',, +      'okhttp3.OkHttpClient$Builder#build()',, +      'okhttp3.OkHttpClient$Builder#cache(okhttp3.Cache)',, +      'okhttp3.OkHttpClient$Builder#callTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#callTimeout(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#certificatePinner(okhttp3.CertificatePinner)',, +      'okhttp3.OkHttpClient$Builder#connectionPool(okhttp3.ConnectionPool)',, +      'okhttp3.OkHttpClient$Builder#connectionSpecs(java.util.List)',, +      'okhttp3.OkHttpClient$Builder#connectTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#connectTimeout(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#cookieJar(okhttp3.CookieJar)',, +      'okhttp3.OkHttpClient$Builder#dispatcher(okhttp3.Dispatcher)',, +      'okhttp3.OkHttpClient$Builder#dns(okhttp3.Dns)',, +      'okhttp3.OkHttpClient$Builder#eventListener(okhttp3.EventListener)',, +      'okhttp3.OkHttpClient$Builder#eventListenerFactory(okhttp3.EventListener$Factory)',, +      'okhttp3.OkHttpClient$Builder#followRedirects(boolean)',, +      'okhttp3.OkHttpClient$Builder#followSslRedirects(boolean)',, +      'okhttp3.OkHttpClient$Builder#hostnameVerifier(javax.net.ssl.HostnameVerifier)',, +      'okhttp3.OkHttpClient$Builder#interceptors()',, +      'okhttp3.OkHttpClient$Builder#networkInterceptors()',, +      'okhttp3.OkHttpClient$Builder#pingInterval(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#pingInterval(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#protocols(java.util.List)',, +      'okhttp3.OkHttpClient$Builder#proxy(java.net.Proxy)',, +      'okhttp3.OkHttpClient$Builder#proxyAuthenticator(okhttp3.Authenticator)',, +      'okhttp3.OkHttpClient$Builder#proxySelector(java.net.ProxySelector)',, +      'okhttp3.OkHttpClient$Builder#readTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#readTimeout(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#retryOnConnectionFailure(boolean)',, +      'okhttp3.OkHttpClient$Builder#socketFactory(javax.net.SocketFactory)',, +      'okhttp3.OkHttpClient$Builder#sslSocketFactory(javax.net.ssl.SSLSocketFactory)',, +      'okhttp3.OkHttpClient$Builder#sslSocketFactory(javax.net.ssl.SSLSocketFactory, javax.net.ssl.X509TrustManager)',, +      'okhttp3.OkHttpClient$Builder#writeTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#writeTimeout(java.time.Duration)',, +++ b/okhttp/build.gradle, +      'okhttp3.OkHttpClient$Builder#addInterceptor(okhttp3.Interceptor)',, +      'okhttp3.OkHttpClient$Builder#addNetworkInterceptor(okhttp3.Interceptor)',, +      'okhttp3.OkHttpClient$Builder#authenticator(okhttp3.Authenticator)',, +      'okhttp3.OkHttpClient$Builder#build()',, +      'okhttp3.OkHttpClient$Builder#cache(okhttp3.Cache)',, +      'okhttp3.OkHttpClient$Builder#callTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#callTimeout(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#certificatePinner(okhttp3.CertificatePinner)',, +      'okhttp3.OkHttpClient$Builder#connectionPool(okhttp3.ConnectionPool)',, +      'okhttp3.OkHttpClient$Builder#connectionSpecs(java.util.List)',, +      'okhttp3.OkHttpClient$Builder#connectTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#connectTimeout(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#cookieJar(okhttp3.CookieJar)',, +      'okhttp3.OkHttpClient$Builder#dispatcher(okhttp3.Dispatcher)',, +      'okhttp3.OkHttpClient$Builder#dns(okhttp3.Dns)',, +      'okhttp3.OkHttpClient$Builder#eventListener(okhttp3.EventListener)',, +      'okhttp3.OkHttpClient$Builder#eventListenerFactory(okhttp3.EventListener$Factory)',, +      'okhttp3.OkHttpClient$Builder#followRedirects(boolean)',, +      'okhttp3.OkHttpClient$Builder#followSslRedirects(boolean)',, +      'okhttp3.OkHttpClient$Builder#hostnameVerifier(javax.net.ssl.HostnameVerifier)',, +      'okhttp3.OkHttpClient$Builder#interceptors()',, +      'okhttp3.OkHttpClient$Builder#networkInterceptors()',, +      'okhttp3.OkHttpClient$Builder#pingInterval(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#pingInterval(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#protocols(java.util.List)',, +      'okhttp3.OkHttpClient$Builder#proxy(java.net.Proxy)',, +      'okhttp3.OkHttpClient$Builder#proxyAuthenticator(okhttp3.Authenticator)',, +      'okhttp3.OkHttpClient$Builder#proxySelector(java.net.ProxySelector)',, +      'okhttp3.OkHttpClient$Builder#readTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#readTimeout(java.time.Duration)',, +      'okhttp3.OkHttpClient$Builder#retryOnConnectionFailure(boolean)',, +      'okhttp3.OkHttpClient$Builder#socketFactory(javax.net.SocketFactory)',, +      'okhttp3.OkHttpClient$Builder#sslSocketFactory(javax.net.ssl.SSLSocketFactory)',, +      'okhttp3.OkHttpClient$Builder#sslSocketFactory(javax.net.ssl.SSLSocketFactory, javax.net.ssl.X509TrustManager)',, +      'okhttp3.OkHttpClient$Builder#writeTimeout(long, java.util.concurrent.TimeUnit)',, +      'okhttp3.OkHttpClient$Builder#writeTimeout(java.time.Duration)',, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.kt, + * Factory for [calls][Call], which can be used to send HTTP requests and read their responses., + * OkHttpClients Should Be Shared, + * ------------------------------, + * OkHttp performs best when you create a single `OkHttpClient` instance and reuse it for all of, + * your HTTP calls. This is because each client holds its own connection pool and thread pools., + * Reusing connections and threads reduces latency and saves memory. Conversely, creating a client, + * for each request wastes resources on idle pools., + *, + *, + * Customize Your Client With newBuilder(), + * ---------------------------------------, + * You can customize a shared OkHttpClient instance with [newBuilder]. This builds a client that, + * shares the same connection pool, thread pools, and configuration. Use the builder methods to, + * configure the derived client for a specific purpose., + *, + * Shutdown Isn't Necessary, + * ------------------------, + * The threads and connections that are held will be released automatically if they remain idle. But, + * if you are writing a application that needs to aggressively release unused resources you may do, + * so., + * Shutdown the dispatcher's executor service with [shutdown()][ExecutorService.shutdown]. This will, + * also cause future calls to the client to be rejected., + *, + * Clear the connection pool with [evictAll()][ConnectionPool.evictAll]. Note that the connection, + * pool's daemon thread may not exit immediately.]