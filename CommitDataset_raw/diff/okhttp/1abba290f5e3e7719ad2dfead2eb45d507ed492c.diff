[+++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +    Request request = fromArgs("-X", "PUT", "-d", "foo", "http://example.com").createRequest();, +    assertEquals(3, request.body().contentLength());, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +    Request request = fromArgs("-X", "PUT", "-d", "foo", "http://example.com").createRequest();, +    assertEquals(3, request.body().contentLength());, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.internal.http.HttpMethod;, +  private static final RequestBody EMPTY_REQUEST_BODY = RequestBody.create(null, new byte[0]);, +    // OkHttp's Call API requires a placeholder body; the real body will be streamed separately., +    RequestBody placeholderBody = HttpMethod.requiresRequestBody(requestMethod), +        ? EMPTY_REQUEST_BODY, +        : null;, +        .method(requestMethod, placeholderBody);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +    Request request = fromArgs("-X", "PUT", "-d", "foo", "http://example.com").createRequest();, +    assertEquals(3, request.body().contentLength());, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.internal.http.HttpMethod;, +  private static final RequestBody EMPTY_REQUEST_BODY = RequestBody.create(null, new byte[0]);, +    // OkHttp's Call API requires a placeholder body; the real body will be streamed separately., +    RequestBody placeholderBody = HttpMethod.requiresRequestBody(requestMethod), +        ? EMPTY_REQUEST_BODY, +        : null;, +        .method(requestMethod, placeholderBody);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import java.util.Collection;, +        .method("POST", RequestBody.create(null, new byte[0])), +      assertTrue(expected.getMessage().contains("no connection specs"));, +  private void assertContains(Collection<String> collection, String element) {, +    for (String c : collection) {, +      if (c != null && c.equalsIgnoreCase(element)) return;, +    }, +    fail("No " + element + " in " + collection);, +  }, +, +  private void assertContainsNoneMatching(List<String> headers, String pattern) {, +    for (String header : headers) {, +      if (header.matches(pattern)) {, +        fail("Header " + header + " matches " + pattern);, +      }, +    }, +  }, +, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +    Request request = fromArgs("-X", "PUT", "-d", "foo", "http://example.com").createRequest();, +    assertEquals(3, request.body().contentLength());, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +import com.squareup.okhttp.RequestBody;, +import com.squareup.okhttp.internal.http.HttpMethod;, +  private static final RequestBody EMPTY_REQUEST_BODY = RequestBody.create(null, new byte[0]);, +    // OkHttp's Call API requires a placeholder body; the real body will be streamed separately., +    RequestBody placeholderBody = HttpMethod.requiresRequestBody(requestMethod), +        ? EMPTY_REQUEST_BODY, +        : null;, +        .method(requestMethod, placeholderBody);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import java.util.Collection;, +        .method("POST", RequestBody.create(null, new byte[0])), +      assertTrue(expected.getMessage().contains("no connection specs"));, +  private void assertContains(Collection<String> collection, String element) {, +    for (String c : collection) {, +      if (c != null && c.equalsIgnoreCase(element)) return;, +    }, +    fail("No " + element + " in " + collection);, +  }, +, +  private void assertContainsNoneMatching(List<String> headers, String pattern) {, +    for (String header : headers) {, +      if (header.matches(pattern)) {, +        fail("Header " + header + " matches " + pattern);, +      }, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    List<ConnectionSpec> connectionSpecs = Util.immutableList(, +        ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT);, +, +        Util.immutableList(Protocol.SPDY_3, Protocol.HTTP_1_1), connectionSpecs, proxySelector);, +        connectionSpecs, proxySelector);, +    Route httpRoute = new Route(httpAddress, Proxy.NO_PROXY, httpSocketAddress,, +        ConnectionSpec.CLEARTEXT);, +    Route spdyRoute = new Route(spdyAddress, Proxy.NO_PROXY, spdySocketAddress,, +        ConnectionSpec.MODERN_TLS);, +    httpA.connect(200, 200, 200, null);, +    httpB.connect(200, 200, 200, null);, +    httpC.connect(200, 200, 200, null);, +    httpD.connect(200, 200, 200, null);, +    httpE.connect(200, 200, 200, null);, +    spdyA.connect(20000, 20000, 2000, null);, +    connection = new Connection(pool, new Route(httpAddress, Proxy.NO_PROXY, httpSocketAddress,, +        ConnectionSpec.CLEARTEXT));, +    connection.connect(200, 200, 200, null);, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +    Request request = fromArgs("-X", "PUT", "-d", "foo", "http://example.com").createRequest();, +    assertEquals(3, request.body().contentLength());, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java]