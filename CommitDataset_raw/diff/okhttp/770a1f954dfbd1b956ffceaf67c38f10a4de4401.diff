[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRule.java, +  private boolean started;, +    if (started) return;, +    started = true;, +      server.play();, +    if (!started) before();, +    return server.getPort();, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRule.java, +  private boolean started;, +    if (started) return;, +    started = true;, +      server.play();, +    if (!started) before();, +    return server.getPort();, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRuleTest.java, +  @Test public void whenRuleCreatedPortIsAvailable() throws IOException {, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRule.java, +  private boolean started;, +    if (started) return;, +    started = true;, +      server.play();, +    if (!started) before();, +    return server.getPort();, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRuleTest.java, +  @Test public void whenRuleCreatedPortIsAvailable() throws IOException {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +      call.execute(callback);, +    call.execute(callback);, +      call.execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(new Request.Builder().url(server.getUrl("/a")).build()).execute(callback);, +    client.newCall(new Request.Builder().url(server.getUrl("/b")).build()).execute(callback);, +    client.newCall(new Request.Builder().url(server.getUrl("/c")).build()).execute(callback);, +    client.newCall(request).execute(new Response.Callback() {, +        client.newCall(new Request.Builder().url(server.getUrl("/b")).build()).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(request1).execute(callback);, +    client.newCall(request2).execute(callback);, +    client.newCall(request1).execute(callback);, +    client.newCall(request2).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(requestA).execute(callback);, +    client.newCall(requestB).execute(callback);, +    client.newCall(requestA).execute(callback);, +    call.execute(new Response.Callback() {, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRule.java, +  private boolean started;, +    if (started) return;, +    started = true;, +      server.play();, +    if (!started) before();, +    return server.getPort();, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRuleTest.java, +  @Test public void whenRuleCreatedPortIsAvailable() throws IOException {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +      call.execute(callback);, +    call.execute(callback);, +      call.execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(new Request.Builder().url(server.getUrl("/a")).build()).execute(callback);, +    client.newCall(new Request.Builder().url(server.getUrl("/b")).build()).execute(callback);, +    client.newCall(new Request.Builder().url(server.getUrl("/c")).build()).execute(callback);, +    client.newCall(request).execute(new Response.Callback() {, +        client.newCall(new Request.Builder().url(server.getUrl("/b")).build()).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(request1).execute(callback);, +    client.newCall(request2).execute(callback);, +    client.newCall(request1).execute(callback);, +    client.newCall(request2).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(request).execute(callback);, +    client.newCall(requestA).execute(callback);, +    client.newCall(requestB).execute(callback);, +    client.newCall(requestA).execute(callback);, +    call.execute(new Response.Callback() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/DispatcherTest.java, +    client.newCall(newRequest("http://a/1")).execute(callback);, +    client.newCall(newRequest("http://a/1")).execute(callback);, +    client.newCall(newRequest("http://a/2")).execute(callback);, +    client.newCall(newRequest("http://b/1")).execute(callback);, +    client.newCall(newRequest("http://b/2")).execute(callback);, +    client.newCall(newRequest("http://a/1")).execute(callback);, +    client.newCall(newRequest("http://a/2")).execute(callback);]