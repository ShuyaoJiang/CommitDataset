[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import java.time.Instant;, +    Date expected = new Date(0L);, +    assertEquals(new Date(0L), headers.getDate("testDate"));, +  @Test public void addInstant() {, +    Instant expected = Instant.ofEpochMilli(0L);, +    Headers headers = new Headers.Builder(), +        .add("Test-Instant", expected), +        .build();, +    assertEquals("Thu, 01 Jan 1970 00:00:00 GMT", headers.get("Test-Instant"));, +    assertEquals(expected, headers.getInstant("Test-Instant"));, +  }, +, +  @Test public void addInstantNull() {, +    try {, +      new Headers.Builder(), +          .add("Test-Instant", (Instant) null), +          .build();, +      fail();, +    } catch (NullPointerException expected) {, +      assertEquals("value for name Test-Instant == null", expected.getMessage());, +    }, +  }, +, +        .add("testDate", new Date(0L)), +    assertEquals(expected, headers.getDate("testDate"));, +, +  @Test public void setInstant() {, +    Instant expected = Instant.ofEpochMilli(1000L);, +    Headers headers = new Headers.Builder(), +        .add("Test-Instant", Instant.ofEpochMilli(0L)), +        .set("Test-Instant", expected), +        .build();, +    assertEquals("Thu, 01 Jan 1970 00:00:01 GMT", headers.get("Test-Instant"));, +    assertEquals(expected, headers.getInstant("Test-Instant"));, +  }, +, +  @Test public void setInstantNull() {, +    try {, +      new Headers.Builder(), +          .set("Test-Instant", (Instant) null), +          .build();, +      fail();, +    } catch (NullPointerException expected) {, +      assertEquals("value for name Test-Instant == null", expected.getMessage());, +    }, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import java.time.Instant;, +    Date expected = new Date(0L);, +    assertEquals(new Date(0L), headers.getDate("testDate"));, +  @Test public void addInstant() {, +    Instant expected = Instant.ofEpochMilli(0L);, +    Headers headers = new Headers.Builder(), +        .add("Test-Instant", expected), +        .build();, +    assertEquals("Thu, 01 Jan 1970 00:00:00 GMT", headers.get("Test-Instant"));, +    assertEquals(expected, headers.getInstant("Test-Instant"));, +  }, +, +  @Test public void addInstantNull() {, +    try {, +      new Headers.Builder(), +          .add("Test-Instant", (Instant) null), +          .build();, +      fail();, +    } catch (NullPointerException expected) {, +      assertEquals("value for name Test-Instant == null", expected.getMessage());, +    }, +  }, +, +        .add("testDate", new Date(0L)), +    assertEquals(expected, headers.getDate("testDate"));, +, +  @Test public void setInstant() {, +    Instant expected = Instant.ofEpochMilli(1000L);, +    Headers headers = new Headers.Builder(), +        .add("Test-Instant", Instant.ofEpochMilli(0L)), +        .set("Test-Instant", expected), +        .build();, +    assertEquals("Thu, 01 Jan 1970 00:00:01 GMT", headers.get("Test-Instant"));, +    assertEquals(expected, headers.getInstant("Test-Instant"));, +  }, +, +  @Test public void setInstantNull() {, +    try {, +      new Headers.Builder(), +          .set("Test-Instant", (Instant) null), +          .build();, +      fail();, +    } catch (NullPointerException expected) {, +      assertEquals("value for name Test-Instant == null", expected.getMessage());, +    }, +  }, +++ b/okhttp/src/main/java/okhttp3/Headers.java, +import java.time.Instant;, +import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;, +  /**, +   * Returns the last value corresponding to the specified field parsed as an HTTP date, or null if, +   * either the field is absent or cannot be parsed as a date.]