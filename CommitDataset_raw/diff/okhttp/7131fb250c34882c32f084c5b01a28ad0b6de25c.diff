[+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +      StreamAllocation streamAllocation = new StreamAllocation(pool, addressA, null,, +          EventListener.NONE, null);, +      StreamAllocation leak = new StreamAllocation(pool, connection.route().address(), null,, +          EventListener.NONE, null);, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +      StreamAllocation streamAllocation = new StreamAllocation(pool, addressA, null,, +          EventListener.NONE, null);, +      StreamAllocation leak = new StreamAllocation(pool, connection.route().address(), null,, +          EventListener.NONE, null);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +import java.util.ArrayDeque;, +import java.util.Collections;, +import java.util.Deque;, +import java.util.List;, +import okhttp3.internal.SingleInetAddressDns;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +public final class EventListenerTest {, +  @Rule public final MockWebServer server = new MockWebServer();, +, +  private OkHttpClient client;, +  private final RecordingEventListener listener = new RecordingEventListener();, +, +  @Before public void setUp() {, +    client = new OkHttpClient.Builder(), +        .dns(new SingleInetAddressDns()), +        .eventListener(listener), +        .build();, +  }, +, +  @Test public void successfulDnsLookup() throws IOException {, +    server.enqueue(new MockResponse());, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    response.body().close();, +, +    DnsStart dnsStart = listener.expectNextEvent(DnsStart.class);, +    assertSame(call, dnsStart.call);, +    assertEquals("localhost", dnsStart.domainName);, +, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    assertSame(call, dnsEnd.call);, +    assertEquals("localhost", dnsEnd.domainName);, +    assertEquals(1, dnsEnd.inetAddressList.size());, +    assertNull(dnsEnd.throwable);, +  }, +, +  @Test public void failedDnsLookup() {, +    client = client.newBuilder(), +        .dns(new FakeDns()), +        .build();, +    Call call = client.newCall(new Request.Builder(), +        .url("http://fakeurl/"), +        .build());, +    try {, +      call.execute();, +      fail();, +    } catch (IOException expected) {, +    }, +, +    listener.expectNextEvent(DnsStart.class);, +, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    assertSame(call, dnsEnd.call);, +    assertEquals("fakeurl", dnsEnd.domainName);]