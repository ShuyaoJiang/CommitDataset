[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +  private final Address addressC = newAddress("c");, +  private final Route routeC1 = newRoute(addressC);, +    ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);, +, +    RealConnection c1 = newConnection(routeA1, 50L);, +    ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);, +, +    RealConnection c1 = newConnection(routeA1, 50L);, +    ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);, +, +    RealConnection c1 = newConnection(routeA1, 75L);, +    RealConnection c2 = newConnection(routeB1, 50L);, +  @Test public void oldestConnectionsEvictedIfIdleLimitExceeded() throws Exception {, +    ConnectionPool pool = new ConnectionPool(2, 100L, TimeUnit.NANOSECONDS);, +    pool.setCleanupRunnableForTest(emptyRunnable);, +, +    RealConnection c1 = newConnection(routeA1, 50L);, +    pool.put(c1);, +, +    RealConnection c2 = newConnection(routeB1, 75L);, +    pool.put(c2);, +, +    // With 2 connections, there's no need to evict until the connections time out., +    assertEquals(50L, pool.cleanup(100L));, +    assertEquals(2, pool.getConnectionCount());, +    assertFalse(c1.socket.isClosed());, +    assertFalse(c2.socket.isClosed());, +, +    // Add a third connection, +    RealConnection c3 = newConnection(routeC1, 75L);, +    pool.put(c3);, +, +    // The third connection bounces the first., +    assertEquals(0L, pool.cleanup(100L));, +    assertEquals(2, pool.getConnectionCount());, +    assertTrue(c1.socket.isClosed());, +    assertFalse(c2.socket.isClosed());, +    assertFalse(c3.socket.isClosed());, +  }, +, +  private RealConnection newConnection(Route route, long idleAtNanos) {, +    RealConnection connection = new RealConnection(route);, +    connection.idleAtNanos = idleAtNanos;, +    connection.socket = new Socket();, +    return connection;, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +  private final Address addressC = newAddress("c");, +  private final Route routeC1 = newRoute(addressC);, +    ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);, +, +    RealConnection c1 = newConnection(routeA1, 50L);, +    ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);, +, +    RealConnection c1 = newConnection(routeA1, 50L);, +    ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);, +, +    RealConnection c1 = newConnection(routeA1, 75L);, +    RealConnection c2 = newConnection(routeB1, 50L);, +  @Test public void oldestConnectionsEvictedIfIdleLimitExceeded() throws Exception {, +    ConnectionPool pool = new ConnectionPool(2, 100L, TimeUnit.NANOSECONDS);, +    pool.setCleanupRunnableForTest(emptyRunnable);, +, +    RealConnection c1 = newConnection(routeA1, 50L);, +    pool.put(c1);, +, +    RealConnection c2 = newConnection(routeB1, 75L);, +    pool.put(c2);, +, +    // With 2 connections, there's no need to evict until the connections time out., +    assertEquals(50L, pool.cleanup(100L));, +    assertEquals(2, pool.getConnectionCount());, +    assertFalse(c1.socket.isClosed());, +    assertFalse(c2.socket.isClosed());, +, +    // Add a third connection, +    RealConnection c3 = newConnection(routeC1, 75L);, +    pool.put(c3);, +, +    // The third connection bounces the first., +    assertEquals(0L, pool.cleanup(100L));, +    assertEquals(2, pool.getConnectionCount());, +    assertTrue(c1.socket.isClosed());, +    assertFalse(c2.socket.isClosed());, +    assertFalse(c3.socket.isClosed());, +  }, +, +  private RealConnection newConnection(Route route, long idleAtNanos) {, +    RealConnection connection = new RealConnection(route);, +    connection.idleAtNanos = idleAtNanos;, +    connection.socket = new Socket();, +    return connection;, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionReuseTest.java]