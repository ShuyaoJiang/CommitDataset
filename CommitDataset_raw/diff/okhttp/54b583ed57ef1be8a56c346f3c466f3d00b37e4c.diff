[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +, +    listener.forbidLock(client.connectionPool());, +    listener.forbidLock(client.dispatcher());, +    server.enqueue(new MockResponse(), +        .setBody("abc"));, +    assertEquals("abc", response.body().string());, +    List<String> expectedEvents = Arrays.asList("FetchStart", "DnsStart", "DnsEnd",, +        "ConnectionAcquired", "ConnectStart", "ConnectEnd", "RequestHeadersStart",, +        "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "FetchEnd", "ResponseBodyEnd", "ConnectionReleased");, +    server.enqueue(new MockResponse(), +        .setBody("abc"));, +    assertEquals("abc", response.body().string());, +    List<String> expectedEvents = Arrays.asList("FetchStart", "DnsStart", "DnsEnd",, +        "ConnectionAcquired", "ConnectStart", "SecureConnectStart", "SecureConnectEnd",, +        "ConnectEnd", "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart",, +        "ResponseHeadersEnd", "ResponseBodyStart", "FetchEnd", "ResponseBodyEnd",, +        "ConnectionReleased");, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +, +    listener.forbidLock(client.connectionPool());, +    listener.forbidLock(client.dispatcher());, +    server.enqueue(new MockResponse(), +        .setBody("abc"));, +    assertEquals("abc", response.body().string());, +    List<String> expectedEvents = Arrays.asList("FetchStart", "DnsStart", "DnsEnd",, +        "ConnectionAcquired", "ConnectStart", "ConnectEnd", "RequestHeadersStart",, +        "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "FetchEnd", "ResponseBodyEnd", "ConnectionReleased");, +    server.enqueue(new MockResponse(), +        .setBody("abc"));, +    assertEquals("abc", response.body().string());, +    List<String> expectedEvents = Arrays.asList("FetchStart", "DnsStart", "DnsEnd",, +        "ConnectionAcquired", "ConnectStart", "SecureConnectStart", "SecureConnectEnd",, +        "ConnectEnd", "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart",, +        "ResponseHeadersEnd", "ResponseBodyStart", "FetchEnd", "ResponseBodyEnd",, +        "ConnectionReleased");, +++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java, +import static org.junit.Assert.assertFalse;, +  final List<Object> forbiddenLocks = new ArrayList<>();, +, +  /** Confirm that the thread does not hold a lock on {@code lock} during the callback. */, +  public void forbidLock(Object lock) {, +    forbiddenLocks.add(lock);, +  }, +, +    for (Object lock : forbiddenLocks) {, +      assertFalse(lock.toString(), Thread.holdsLock(lock));, +    }, +, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +, +    listener.forbidLock(client.connectionPool());, +    listener.forbidLock(client.dispatcher());, +    server.enqueue(new MockResponse(), +        .setBody("abc"));, +    assertEquals("abc", response.body().string());, +    List<String> expectedEvents = Arrays.asList("FetchStart", "DnsStart", "DnsEnd",, +        "ConnectionAcquired", "ConnectStart", "ConnectEnd", "RequestHeadersStart",, +        "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "FetchEnd", "ResponseBodyEnd", "ConnectionReleased");, +    server.enqueue(new MockResponse(), +        .setBody("abc"));, +    assertEquals("abc", response.body().string());, +    List<String> expectedEvents = Arrays.asList("FetchStart", "DnsStart", "DnsEnd",, +        "ConnectionAcquired", "ConnectStart", "SecureConnectStart", "SecureConnectEnd",, +        "ConnectEnd", "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart",, +        "ResponseHeadersEnd", "ResponseBodyStart", "FetchEnd", "ResponseBodyEnd",, +        "ConnectionReleased");, +++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java, +import static org.junit.Assert.assertFalse;, +  final List<Object> forbiddenLocks = new ArrayList<>();, +, +  /** Confirm that the thread does not hold a lock on {@code lock} during the callback. */, +  public void forbidLock(Object lock) {, +    forbiddenLocks.add(lock);, +  }, +, +    for (Object lock : forbiddenLocks) {, +      assertFalse(lock.toString(), Thread.holdsLock(lock));, +    }, +, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +import okhttp3.Connection;, +    boolean foundPooledConnection = false;, +    RealConnection result = null;, +    Route selectedRoute = null;, +        foundPooledConnection = true;, +        result = connection;, +      } else {, +        selectedRoute = route;, +      }, +    // If we found a pooled connection, we're done., +    if (foundPooledConnection) {, +      eventListener.connectionAcquired(call, result);, +      return result;, +            foundPooledConnection = true;, +            result = connection;, +            break;]