[+++ b/okhttp-tests/src/test/java/okhttp3/DelegatingSSLSocketFactory.java, +  @Override public SSLSocket createSocket() throws IOException {, +  @Override public SSLSocket createSocket(String host, int port) throws IOException {, +  @Override public SSLSocket createSocket(, +      String host, int port, InetAddress localAddress, int localPort) throws IOException {, +  @Override public SSLSocket createSocket(InetAddress host, int port) throws IOException {, +  @Override public SSLSocket createSocket(, +      InetAddress host, int port, InetAddress localAddress, int localPort) throws IOException {, +  @Override public String[] getDefaultCipherSuites() {, +  @Override public String[] getSupportedCipherSuites() {, +  @Override public SSLSocket createSocket(, +      Socket socket, String host, int port, boolean autoClose) throws IOException {, +++ b/okhttp-tests/src/test/java/okhttp3/DelegatingSSLSocketFactory.java, +  @Override public SSLSocket createSocket() throws IOException {, +  @Override public SSLSocket createSocket(String host, int port) throws IOException {, +  @Override public SSLSocket createSocket(, +      String host, int port, InetAddress localAddress, int localPort) throws IOException {, +  @Override public SSLSocket createSocket(InetAddress host, int port) throws IOException {, +  @Override public SSLSocket createSocket(, +      InetAddress host, int port, InetAddress localAddress, int localPort) throws IOException {, +  @Override public String[] getDefaultCipherSuites() {, +  @Override public String[] getSupportedCipherSuites() {, +  @Override public SSLSocket createSocket(, +      Socket socket, String host, int port, boolean autoClose) throws IOException {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import javax.net.ssl.X509TrustManager;, +import okhttp3.internal.Platform;, +  final X509TrustManager trustManager;, +    boolean isTLS = false;, +    if (this.sslSocketFactory != null) {, +      this.trustManager = Platform.get().trustManager(sslSocketFactory);, +      if (trustManager == null) {, +        throw new IllegalStateException("Unable to extract the trust manager on " + Platform.get(), +            + ", sslSocketFactory is " + sslSocketFactory.getClass());, +      }, +    } else {, +      this.trustManager = null;, +    }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DelegatingSSLSocketFactory.java, +  @Override public SSLSocket createSocket() throws IOException {, +  @Override public SSLSocket createSocket(String host, int port) throws IOException {, +  @Override public SSLSocket createSocket(, +      String host, int port, InetAddress localAddress, int localPort) throws IOException {, +  @Override public SSLSocket createSocket(InetAddress host, int port) throws IOException {, +  @Override public SSLSocket createSocket(, +      InetAddress host, int port, InetAddress localAddress, int localPort) throws IOException {, +  @Override public String[] getDefaultCipherSuites() {, +  @Override public String[] getSupportedCipherSuites() {, +  @Override public SSLSocket createSocket(, +      Socket socket, String host, int port, boolean autoClose) throws IOException {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import javax.net.ssl.X509TrustManager;, +import okhttp3.internal.Platform;, +  final X509TrustManager trustManager;, +    boolean isTLS = false;, +    if (this.sslSocketFactory != null) {, +      this.trustManager = Platform.get().trustManager(sslSocketFactory);, +      if (trustManager == null) {, +        throw new IllegalStateException("Unable to extract the trust manager on " + Platform.get(), +            + ", sslSocketFactory is " + sslSocketFactory.getClass());, +      }, +    } else {, +      this.trustManager = null;, +    }, +, +++ b/okhttp/src/main/java/okhttp3/internal/Platform.java, +import java.lang.reflect.Field;, +import javax.net.ssl.SSLSocketFactory;, +import javax.net.ssl.X509TrustManager;, + *, + * <h3>Trust Manager Extraction</h3>, + *, + * <p>Supported on Android 2.3+ and OpenJDK 7+. There are no public APIs to recover the trust, + * manager that was used to create an {@link SSLSocketFactory}., +  public X509TrustManager trustManager(SSLSocketFactory sslSocketFactory) {, +    return null;, +  }, +, +      Class<?> sslParametersClass;, +        sslParametersClass = Class.forName("com.android.org.conscrypt.SSLParametersImpl");, +        sslParametersClass = Class.forName(, +            "org.apache.harmony.xnet.provider.jsse.SSLParametersImpl");, +      return new Android(sslParametersClass, setUseSessionTickets, setHostname,, +          trafficStatsTagSocket, trafficStatsUntagSocket, getAlpnSelectedProtocol,, +          setAlpnProtocols);, +    // Find an Oracle JDK., +    try {, +      Class<?> sslContextClass = Class.forName("sun.security.ssl.SSLContextImpl");, +, +        return new JdkWithJettyBootPlatform(sslContextClass,, +      return new JdkPlatform(sslContextClass);, +    } catch (ClassNotFoundException ignored) {, +    }, +, +    private final Class<?> sslParametersClass;, +    public Android(Class<?> sslParametersClass, OptionalMethod<Socket> setUseSessionTickets,, +        OptionalMethod<Socket> setHostname, Method trafficStatsTagSocket,, +        Method trafficStatsUntagSocket, OptionalMethod<Socket> getAlpnSelectedProtocol,, +        OptionalMethod<Socket> setAlpnProtocols) {]