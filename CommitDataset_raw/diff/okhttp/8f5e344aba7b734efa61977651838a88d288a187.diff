[+++ b/mockwebserver/pom.xml, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import org.junit.rules.TestRule;, +import org.junit.runner.Description;, +import org.junit.runners.model.Statement;, +public final class MockWebServer implements TestRule {, +  private boolean started;, +, +  private synchronized void maybeStart() {, +    if (started) return;, +    try {, +      start();, +    } catch (IOException e) {, +      throw new RuntimeException(e);, +    }, +  }, +, +  @Override public Statement apply(final Statement base, Description description) {, +    return new Statement() {, +      @Override public void evaluate() throws Throwable {, +        maybeStart();, +        try {, +          base.evaluate();, +        } finally {, +          try {, +            shutdown();, +          } catch (IOException e) {, +            logger.log(Level.WARNING, "MockWebServer shutdown failed", e);, +          }, +        }, +      }, +    };, +    maybeStart();, +    maybeStart();, +    maybeStart();, +  public void setServerSocketFactory(ServerSocketFactory serverSocketFactory) {, +    this.serverSocketFactory = serverSocketFactory;, +  }, +, +    return url(path).url();, +        .build(), +        .resolve(path);, +  private synchronized void start(InetSocketAddress inetSocketAddress) throws IOException {, +    if (started) throw new IllegalStateException("start() already called");, +    started = true;, +, +  public synchronized void shutdown() throws IOException {, +    if (!started) return;, +            : Header.TARGET_AUTHORITY, url(pushPromise.getPath()).host()));, +++ b/mockwebserver/pom.xml, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import org.junit.rules.TestRule;, +import org.junit.runner.Description;, +import org.junit.runners.model.Statement;, +public final class MockWebServer implements TestRule {, +  private boolean started;, +, +  private synchronized void maybeStart() {, +    if (started) return;, +    try {, +      start();, +    } catch (IOException e) {, +      throw new RuntimeException(e);, +    }, +  }, +, +  @Override public Statement apply(final Statement base, Description description) {, +    return new Statement() {, +      @Override public void evaluate() throws Throwable {, +        maybeStart();, +        try {, +          base.evaluate();, +        } finally {, +          try {, +            shutdown();, +          } catch (IOException e) {, +            logger.log(Level.WARNING, "MockWebServer shutdown failed", e);, +          }, +        }, +      }, +    };, +    maybeStart();, +    maybeStart();, +    maybeStart();, +  public void setServerSocketFactory(ServerSocketFactory serverSocketFactory) {, +    this.serverSocketFactory = serverSocketFactory;, +  }, +, +    return url(path).url();, +        .build(), +        .resolve(path);, +  private synchronized void start(InetSocketAddress inetSocketAddress) throws IOException {, +    if (started) throw new IllegalStateException("start() already called");, +    started = true;, +, +  public synchronized void shutdown() throws IOException {, +    if (!started) return;, +            : Header.TARGET_AUTHORITY, url(pushPromise.getPath()).host()));, +++ /dev/null]