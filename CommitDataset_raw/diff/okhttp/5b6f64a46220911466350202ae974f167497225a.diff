[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        if (response.getSocketPolicy() == SocketPolicy.DISCONNECT_AFTER_REQUEST) {, +          socket.close();, +          return false;, +        }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        if (response.getSocketPolicy() == SocketPolicy.DISCONNECT_AFTER_REQUEST) {, +          socket.close();, +          return false;, +        }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +  /**, +   * Close connection after reading the request but before writing the response., +   * Use this to simulate late connection pool failures., +   */, +  DISCONNECT_AFTER_REQUEST,, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        if (response.getSocketPolicy() == SocketPolicy.DISCONNECT_AFTER_REQUEST) {, +          socket.close();, +          return false;, +        }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +  /**, +   * Close connection after reading the request but before writing the response., +   * Use this to simulate late connection pool failures., +   */, +  DISCONNECT_AFTER_REQUEST,, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        if (response.getSocketPolicy() == SocketPolicy.DISCONNECT_AFTER_REQUEST) {, +          socket.close();, +          return false;, +        }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +  /**, +   * Close connection after reading the request but before writing the response., +   * Use this to simulate late connection pool failures., +   */, +  DISCONNECT_AFTER_REQUEST,, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/SyncApiTest.java, +  @Test public void postBodyRetransmittedOnFailureRecovery() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    server.enqueue(new MockResponse().setBody("def"));, +    // Seed the connection pool so we have something that can fail., +    Request request1 = new Request.Builder().url(server.getUrl("/")).build();, +    Response response1 = client.execute(request1);, +    assertEquals("abc", response1.body().string());, +, +    Request request2 = new Request.Builder(), +    Response response2 = client.execute(request2);, +    assertEquals("def", response2.body().string());, +    RecordedRequest get = server.takeRequest();, +    assertEquals(0, get.getSequenceNumber());, +    RecordedRequest post1 = server.takeRequest();, +    assertEquals("body!", post1.getUtf8Body());, +    assertEquals(1, post1.getSequenceNumber());, +    RecordedRequest post2 = server.takeRequest();, +    assertEquals("body!", post2.getUtf8Body());, +    assertEquals(0, post2.getSequenceNumber());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        if (response.getSocketPolicy() == SocketPolicy.DISCONNECT_AFTER_REQUEST) {, +          socket.close();, +          return false;, +        }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +  /**, +   * Close connection after reading the request but before writing the response., +   * Use this to simulate late connection pool failures., +   */, +  DISCONNECT_AFTER_REQUEST,, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/SyncApiTest.java, +  @Test public void postBodyRetransmittedOnFailureRecovery() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    server.enqueue(new MockResponse().setBody("def"));, +    // Seed the connection pool so we have something that can fail., +    Request request1 = new Request.Builder().url(server.getUrl("/")).build();, +    Response response1 = client.execute(request1);, +    assertEquals("abc", response1.body().string());, +, +    Request request2 = new Request.Builder(), +    Response response2 = client.execute(request2);, +    assertEquals("def", response2.body().string());, +    RecordedRequest get = server.takeRequest();, +    assertEquals(0, get.getSequenceNumber());, +    RecordedRequest post1 = server.takeRequest();, +    assertEquals("body!", post1.getUtf8Body());, +    assertEquals(1, post1.getSequenceNumber());, +    RecordedRequest post2 = server.takeRequest();, +    assertEquals("body!", post2.getUtf8Body());, +    assertEquals(0, post2.getSequenceNumber());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +import com.squareup.okhttp.MediaType;]