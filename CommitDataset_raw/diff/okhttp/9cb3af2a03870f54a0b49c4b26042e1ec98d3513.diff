[+++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +import okhttp3.internal.platform.Platform;, +    private SSLContext sslContext;, +    public Builder sslContext(SSLContext sslContext) {, +      this.sslContext = sslContext;, +      return this;, +    }, +, +        SSLContext activeSslContext =, +            this.sslContext != null ? this.sslContext : Platform.get().getSSLContext();, +        activeSslContext.init(keyManagerFactory.getKeyManagers(), trustManagers,, +            new SecureRandom());, +        return new SslClient(activeSslContext, (X509TrustManager) trustManagers[0]);, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +import okhttp3.internal.platform.Platform;, +    private SSLContext sslContext;, +    public Builder sslContext(SSLContext sslContext) {, +      this.sslContext = sslContext;, +      return this;, +    }, +, +        SSLContext activeSslContext =, +            this.sslContext != null ? this.sslContext : Platform.get().getSSLContext();, +        activeSslContext.init(keyManagerFactory.getKeyManagers(), trustManagers,, +            new SecureRandom());, +        return new SslClient(activeSslContext, (X509TrustManager) trustManagers[0]);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.internal.platform.Platform;, +      SSLContext context = Platform.get().getSSLContext();, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +import okhttp3.internal.platform.Platform;, +    private SSLContext sslContext;, +    public Builder sslContext(SSLContext sslContext) {, +      this.sslContext = sslContext;, +      return this;, +    }, +, +        SSLContext activeSslContext =, +            this.sslContext != null ? this.sslContext : Platform.get().getSSLContext();, +        activeSslContext.init(keyManagerFactory.getKeyManagers(), trustManagers,, +            new SecureRandom());, +        return new SslClient(activeSslContext, (X509TrustManager) trustManagers[0]);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.internal.platform.Platform;, +      SSLContext context = Platform.get().getSSLContext();, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +import java.net.SocketException;, +import okhttp3.internal.platform.Platform;, +    SSLContext sslContext2 = Platform.get().getSSLContext();, +    SSLContext sslContext = Platform.get().getSSLContext();, +    } catch (SocketException expected) {, +      // Conscrypt's response to the FAIL_HANDSHAKE, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +import okhttp3.internal.platform.Platform;, +    private SSLContext sslContext;, +    public Builder sslContext(SSLContext sslContext) {, +      this.sslContext = sslContext;, +      return this;, +    }, +, +        SSLContext activeSslContext =, +            this.sslContext != null ? this.sslContext : Platform.get().getSSLContext();, +        activeSslContext.init(keyManagerFactory.getKeyManagers(), trustManagers,, +            new SecureRandom());, +        return new SslClient(activeSslContext, (X509TrustManager) trustManagers[0]);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.internal.platform.Platform;, +      SSLContext context = Platform.get().getSSLContext();, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +import java.net.SocketException;, +import okhttp3.internal.platform.Platform;, +    SSLContext sslContext2 = Platform.get().getSSLContext();, +    SSLContext sslContext = Platform.get().getSSLContext();, +    } catch (SocketException expected) {, +      // Conscrypt's response to the FAIL_HANDSHAKE, +++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java, +import java.security.NoSuchAlgorithmException;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLException;, +import static okhttp3.internal.platform.PlatformTest.getPlatform;, +import static org.junit.Assert.assertTrue;, +      assertTrue(getPlatform().equals("jdk9"));, +      assertTrue(getPlatform().equals("jdk9"));, +    // The test uses JDK default SSL Context instead of the Platform provided one, +    // as Conscrypt seems to have some differences, we only want to test client side here., +        .sslContext(getSslContext()), +, +  private SSLContext getSslContext() {, +    try {, +      return SSLContext.getInstance("TLS");, +    } catch (NoSuchAlgorithmException e) {, +      throw new IllegalStateException("unable to build JDK default SSLContext");, +    }, +  }, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/SslClient.java, +import okhttp3.internal.platform.Platform;, +    private SSLContext sslContext;, +    public Builder sslContext(SSLContext sslContext) {, +      this.sslContext = sslContext;, +      return this;]