[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +      this.path = requestLine.substring(methodEnd + 1, pathEnd);, +      String hostname = socket.getInetAddress().getHostName();, +      int port = socket.getLocalPort();, +      this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +      this.path = requestLine.substring(methodEnd + 1, pathEnd);, +      String hostname = socket.getInetAddress().getHostName();, +      int port = socket.getLocalPort();, +      this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +      this.path = requestLine.substring(methodEnd + 1, pathEnd);, +      String hostname = socket.getInetAddress().getHostName();, +      int port = socket.getLocalPort();, +      this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +      this.path = requestLine.substring(methodEnd + 1, pathEnd);, +      String hostname = socket.getInetAddress().getHostName();, +      int port = socket.getLocalPort();, +      this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +      this.path = requestLine.substring(methodEnd + 1, pathEnd);, +      String hostname = socket.getInetAddress().getHostName();, +      int port = socket.getLocalPort();, +      this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ /dev/null, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import java.util.concurrent.TimeUnit;, + * Implementation of https://tools.ietf.org/html/draft-ietf-doh-dns-over-https-11, +  public static final MediaType UDPWIREFORMAT = MediaType.get("application/dns-udpwireformat");, +  private final MediaType contentType;, +    this.contentType = builder.contentType;, +  public MediaType contentType() {, +    return contentType;, +  }, +, +    UnknownHostException firstUhe = null;, +, +      ByteString query = DnsRecordCodec.encodeQuery(hostname, includeIPv6);, +      Request request = buildRequest(query);, +      Response response = executeRequest(request);, +, +      return readResponse(hostname, response);, +    } catch (UnknownHostException uhe) {, +      throw uhe;, +      unknownHostException.initCause(e);, +  }, +  private Response executeRequest(Request request) throws IOException {, +    // cached request, +      CacheControl cacheControl =, +          new CacheControl.Builder().maxStale(Integer.MAX_VALUE, TimeUnit.SECONDS).build();, +      Request cacheRequest = request.newBuilder().cacheControl(cacheControl).build();, +      Response response = client.newCall(cacheRequest).execute();, +      if (response.isSuccessful()) {, +        return response;, +    return client.newCall(request).execute();, +  private Request buildRequest(ByteString query) {, +    Request.Builder requestBuilder = new Request.Builder().header("Accept", contentType.toString());, +      requestBuilder = requestBuilder.url(url).post(RequestBody.create(contentType, query));, +    MediaType contentType = DNS_MESSAGE;, +    public Builder contentType(MediaType contentType) {, +      this.contentType = contentType;, +      return this;, +    }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java, +      this.path = requestLine.substring(methodEnd + 1, pathEnd);, +      String hostname = socket.getInetAddress().getHostName();, +      int port = socket.getLocalPort();, +      this.requestUrl = HttpUrl.parse(String.format("%s://%s:%s%s", scheme, hostname, port, path));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +++ /dev/null, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import java.util.concurrent.TimeUnit;, + * Implementation of https://tools.ietf.org/html/draft-ietf-doh-dns-over-https-11, +  public static final MediaType UDPWIREFORMAT = MediaType.get("application/dns-udpwireformat");, +  private final MediaType contentType;, +    this.contentType = builder.contentType;, +  public MediaType contentType() {, +    return contentType;, +  }, +, +    UnknownHostException firstUhe = null;, +]