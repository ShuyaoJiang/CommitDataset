[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.internal.DoubleInetAddressDns;, +import static org.junit.Assert.assertFalse;, +  private final SingleInetAddressDns singleDns = new SingleInetAddressDns();, +        .dns(singleDns), +    DnsStart dnsStart = listener.removeUpToEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.removeUpToEvent(DnsEnd.class);, +  @Test public void noDnsLookupOnPooledConnection() throws IOException {, +    server.enqueue(new MockResponse());, +    server.enqueue(new MockResponse());, +, +    // Seed the pool., +    Call call1 = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response1 = call1.execute();, +    assertEquals(200, response1.code());, +    response1.body().close();, +, +    listener.clearAllEvents();, +, +    Call call2 = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response2 = call2.execute();, +    assertEquals(200, response2.code());, +    response2.body().close();, +, +    List<Class<?>> recordedEvents = listener.recordedEventTypes();, +    assertFalse(recordedEvents.contains(DnsStart.class));, +    assertFalse(recordedEvents.contains(DnsEnd.class));, +  }, +, +  @Test public void multipleDnsLookupsForSingleCall() throws IOException {, +    server.enqueue(new MockResponse(), +        .setResponseCode(301), +        .setHeader("Location", "http://www.fakeurl:" + server.getPort()));, +    server.enqueue(new MockResponse());, +, +    FakeDns dns = new FakeDns();, +    dns.set("fakeurl", singleDns.lookup(server.getHostName()));, +    dns.set("www.fakeurl", singleDns.lookup(server.getHostName()));, +, +    client = client.newBuilder(), +        .dns(dns), +        .build();, +, +    Call call = client.newCall(new Request.Builder(), +        .url("http://fakeurl:" + server.getPort()), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    response.body().close();, +, +    listener.removeUpToEvent(DnsStart.class);, +    listener.removeUpToEvent(DnsEnd.class);, +    listener.removeUpToEvent(DnsStart.class);, +    listener.removeUpToEvent(DnsEnd.class);, +  }, +, +    listener.removeUpToEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.removeUpToEvent(DnsEnd.class);, +    listener.removeUpToEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.removeUpToEvent(DnsEnd.class);, +    SecureConnectStart secureStart = listener.removeUpToEvent(SecureConnectStart.class);, +    SecureConnectEnd secureEnd = listener.removeUpToEvent(SecureConnectEnd.class);, +    SecureConnectStart secureStart = listener.removeUpToEvent(SecureConnectStart.class);, +    SecureConnectEnd secureEnd = listener.removeUpToEvent(SecureConnectEnd.class);, +    SecureConnectStart secureStart = listener.removeUpToEvent(SecureConnectStart.class);, +    SecureConnectEnd secureEnd = listener.removeUpToEvent(SecureConnectEnd.class);, +  @Test public void multipleSecureConnectsForSingleCall() throws IOException {, +    enableTls(false);, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.FAIL_HANDSHAKE));, +    server.enqueue(new MockResponse());, +, +    client = client.newBuilder(), +        .dns(new DoubleInetAddressDns()), +        .build();, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    response.body().close();, +, +    listener.removeUpToEvent(SecureConnectStart.class);, +    listener.removeUpToEvent(SecureConnectEnd.class);, +, +    listener.removeUpToEvent(SecureConnectStart.class);, +    listener.removeUpToEvent(SecureConnectEnd.class);, +  }, +, +  @Test public void noSecureConnectsOnPooledConnection() throws IOException {, +    enableTls(false);, +    server.enqueue(new MockResponse());, +    server.enqueue(new MockResponse());, +, +    client = client.newBuilder()]