[+++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.http.StatusLine;, +        System.out.println(StatusLine.get(response));, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.http.StatusLine;, +        System.out.println(StatusLine.get(response));, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +    String message = response.message();, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.http.StatusLine;, +        System.out.println(StatusLine.get(response));, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +    String message = response.message();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java, +    assertEquals(Protocol.HTTP_1_1, response.protocol());, +    assertEquals(200, response.code());, +    assertEquals("OK", response.message());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.http.StatusLine;, +        System.out.println(StatusLine.get(response));, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +    String message = response.message();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java, +    assertEquals(Protocol.HTTP_1_1, response.protocol());, +    assertEquals(200, response.code());, +    assertEquals("OK", response.message());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/JavaApiConverterTest.java, +import com.squareup.okhttp.Protocol;, +    assertEquals(Protocol.HTTP_1_1, response.protocol());, +    assertEquals(200, response.code());, +    assertEquals("Fantastic", response.message());, +    assertEquals(Protocol.HTTP_1_1, response.protocol());, +    assertEquals(200, response.code());, +    assertEquals("Fantastic", response.message());, +    assertEquals(Protocol.HTTP_1_1, response.protocol());, +    assertEquals(200, response.code());, +    assertEquals("Fantastic", response.message());, +        .protocol(Protocol.HTTP_1_1), +        .code(200), +        .message("Fantastic"), +    assertEquals("HTTP/1.1 200 Fantastic", httpUrlConnection.getHeaderField(null));, +    assertEquals(Arrays.asList("HTTP/1.1 200 Fantastic"), responseHeaders.get(null));, +    assertHeadersContainsMapping(responseHeaders, null, "HTTP/1.1 200 Fantastic");, +    assertEquals("HTTP/1.1 200 Fantastic", httpUrlConnection.getHeaderField(0));, +        .protocol(Protocol.HTTP_1_1), +        .code(200), +        .message("Fantastic"), +    assertEquals(Arrays.asList("HTTP/1.1 200 Fantastic"), javaHeaders.get(null));, +        .protocol(Protocol.HTTP_1_1), +        .code(200), +        .message("Fantastic"), +    assertEquals(Arrays.asList("HTTP/1.1 200 Fantastic"), javaHeaders.get(null));, +        .protocol(Protocol.HTTP_1_1), +        .code(200), +        .message("Fantastic"), +    assertEquals(Arrays.asList("HTTP/1.1 200 Fantastic"), javaHeaders.get(null));, +        .protocol(Protocol.HTTP_1_1), +        .code(200), +        .message("Arbitrary"), +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.http.StatusLine;, +        System.out.println(StatusLine.get(response));, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +    String message = response.message();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java, +    assertEquals(Protocol.HTTP_1_1, response.protocol());, +    assertEquals(200, response.code());, +    assertEquals("OK", response.message());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/JavaApiConverterTest.java, +import com.squareup.okhttp.Protocol;, +    assertEquals(Protocol.HTTP_1_1, response.protocol());, +    assertEquals(200, response.code());, +    assertEquals("Fantastic", response.message());, +    assertEquals(Protocol.HTTP_1_1, response.protocol());, +    assertEquals(200, response.code());, +    assertEquals("Fantastic", response.message());, +    assertEquals(Protocol.HTTP_1_1, response.protocol());, +    assertEquals(200, response.code());, +    assertEquals("Fantastic", response.message());, +        .protocol(Protocol.HTTP_1_1), +        .code(200), +        .message("Fantastic"), +    assertEquals("HTTP/1.1 200 Fantastic", httpUrlConnection.getHeaderField(null));, +    assertEquals(Arrays.asList("HTTP/1.1 200 Fantastic"), responseHeaders.get(null));, +    assertHeadersContainsMapping(responseHeaders, null, "HTTP/1.1 200 Fantastic");, +    assertEquals("HTTP/1.1 200 Fantastic", httpUrlConnection.getHeaderField(0));, +        .protocol(Protocol.HTTP_1_1), +        .code(200), +        .message("Fantastic"), +    assertEquals(Arrays.asList("HTTP/1.1 200 Fantastic"), javaHeaders.get(null));, +        .protocol(Protocol.HTTP_1_1), +        .code(200), +        .message("Fantastic"), +    assertEquals(Arrays.asList("HTTP/1.1 200 Fantastic"), javaHeaders.get(null));, +        .protocol(Protocol.HTTP_1_1), +        .code(200), +        .message("Fantastic"), +    assertEquals(Arrays.asList("HTTP/1.1 200 Fantastic"), javaHeaders.get(null));, +        .protocol(Protocol.HTTP_1_1), +        .code(200)]