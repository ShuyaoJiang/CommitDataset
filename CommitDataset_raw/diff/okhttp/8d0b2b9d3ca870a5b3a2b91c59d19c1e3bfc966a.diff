[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName("localhost").getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName("localhost").getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    if (serverSocket == null) throw new IllegalStateException("shutdown() before start()");, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName("localhost").getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    if (serverSocket == null) throw new IllegalStateException("shutdown() before start()");, +, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +, +  @Test public void shutdownWithoutStart() throws IOException {, +    MockWebServer server = new MockWebServer();, +    try {, +      server.shutdown();, +      fail();, +    } catch (IllegalStateException expected) {, +    }, +  }, +, +  @Test public void shutdownWithoutEnqueue() throws IOException {, +    MockWebServer server = new MockWebServer();, +    server.start();, +    server.shutdown();, +  }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName("localhost").getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    if (serverSocket == null) throw new IllegalStateException("shutdown() before start()");, +, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +, +  @Test public void shutdownWithoutStart() throws IOException {, +    MockWebServer server = new MockWebServer();, +    try {, +      server.shutdown();, +      fail();, +    } catch (IllegalStateException expected) {, +    }, +  }, +, +  @Test public void shutdownWithoutEnqueue() throws IOException {, +    MockWebServer server = new MockWebServer();, +    server.start();, +    server.shutdown();, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void deleteWithRequestBody() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .method("DELETE", RequestBody.create(MediaType.parse("text/plain"), "def")), +        .build();, +, +    executeSynchronously(request), +        .assertCode(200), +        .assertBody("abc");, +, +    RecordedRequest recordedRequest = server.takeRequest();, +    assertEquals("DELETE", recordedRequest.getMethod());, +    assertEquals("def", recordedRequest.getBody().readUtf8());, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName("localhost").getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    if (serverSocket == null) throw new IllegalStateException("shutdown() before start()");, +, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +, +  @Test public void shutdownWithoutStart() throws IOException {, +    MockWebServer server = new MockWebServer();, +    try {, +      server.shutdown();, +      fail();, +    } catch (IllegalStateException expected) {, +    }, +  }, +, +  @Test public void shutdownWithoutEnqueue() throws IOException {, +    MockWebServer server = new MockWebServer();, +    server.start();, +    server.shutdown();, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void deleteWithRequestBody() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .method("DELETE", RequestBody.create(MediaType.parse("text/plain"), "def")), +        .build();, +, +    executeSynchronously(request), +        .assertCode(200), +        .assertBody("abc");]