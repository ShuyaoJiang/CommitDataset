[+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +  @Test public void previouslyNotGzippedContentIsNotModifiedAndSpecifiesGzipEncoding() throws Exception {, +    server.enqueue(new MockResponse(), +            .setBody("ABCABCABC"), +            .addHeader("Content-Type: text/plain"), +            .addHeader("Last-Modified: " + formatDate(-2, TimeUnit.HOURS)), +            .addHeader("Expires: " + formatDate(-1, TimeUnit.HOURS)));, +    server.enqueue(new MockResponse(), +            .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED), +            .addHeader("Content-Type: text/plain"), +            .addHeader("Content-Encoding: gzip"));, +    server.enqueue(new MockResponse(), +            .setBody("DEFDEFDEF"));, +, +    assertEquals("ABCABCABC", get(server.url("/")).body().string());, +    assertEquals("ABCABCABC", get(server.url("/")).body().string());, +    assertEquals("DEFDEFDEF", get(server.url("/")).body().string());, +  }, +, +  @Test public void changedGzippedContentIsNotModifiedAndSpecifiesNewEncoding() throws Exception {, +    server.enqueue(new MockResponse(), +            .setBody(gzip("ABCABCABC")), +            .addHeader("Content-Type: text/plain"), +            .addHeader("Last-Modified: " + formatDate(-2, TimeUnit.HOURS)), +            .addHeader("Expires: " + formatDate(-1, TimeUnit.HOURS)), +            .addHeader("Content-Encoding: gzip"));, +    server.enqueue(new MockResponse(), +            .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED), +            .addHeader("Content-Type: text/plain"), +            .addHeader("Content-Encoding: identity"));, +    server.enqueue(new MockResponse(), +            .setBody("DEFDEFDEF"));, +, +    assertEquals("ABCABCABC", get(server.url("/")).body().string());, +    assertEquals("ABCABCABC", get(server.url("/")).body().string());, +    assertEquals("DEFDEFDEF", get(server.url("/")).body().string());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +  @Test public void previouslyNotGzippedContentIsNotModifiedAndSpecifiesGzipEncoding() throws Exception {, +    server.enqueue(new MockResponse(), +            .setBody("ABCABCABC"), +            .addHeader("Content-Type: text/plain"), +            .addHeader("Last-Modified: " + formatDate(-2, TimeUnit.HOURS)), +            .addHeader("Expires: " + formatDate(-1, TimeUnit.HOURS)));, +    server.enqueue(new MockResponse(), +            .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED), +            .addHeader("Content-Type: text/plain"), +            .addHeader("Content-Encoding: gzip"));, +    server.enqueue(new MockResponse(), +            .setBody("DEFDEFDEF"));, +, +    assertEquals("ABCABCABC", get(server.url("/")).body().string());, +    assertEquals("ABCABCABC", get(server.url("/")).body().string());, +    assertEquals("DEFDEFDEF", get(server.url("/")).body().string());, +  }, +, +  @Test public void changedGzippedContentIsNotModifiedAndSpecifiesNewEncoding() throws Exception {, +    server.enqueue(new MockResponse(), +            .setBody(gzip("ABCABCABC")), +            .addHeader("Content-Type: text/plain"), +            .addHeader("Last-Modified: " + formatDate(-2, TimeUnit.HOURS)), +            .addHeader("Expires: " + formatDate(-1, TimeUnit.HOURS)), +            .addHeader("Content-Encoding: gzip"));, +    server.enqueue(new MockResponse(), +            .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED), +            .addHeader("Content-Type: text/plain"), +            .addHeader("Content-Encoding: identity"));, +    server.enqueue(new MockResponse(), +            .setBody("DEFDEFDEF"));, +, +    assertEquals("ABCABCABC", get(server.url("/")).body().string());, +    assertEquals("ABCABCABC", get(server.url("/")).body().string());, +    assertEquals("DEFDEFDEF", get(server.url("/")).body().string());, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +      if (isContentSpecificHeader(fieldName) || !isEndToEnd(fieldName), +              || networkHeaders.get(fieldName) == null) {, +      if (!isContentSpecificHeader(fieldName) && isEndToEnd(fieldName)) {, +, +  /**, +   * Returns true if {@code fieldName} is content specific and therefore should always be used, +   * from cached headers., +   */, +  static boolean isContentSpecificHeader(String fieldName) {, +    return "Content-Length".equalsIgnoreCase(fieldName), +        || "Content-Encoding".equalsIgnoreCase(fieldName), +        || "Content-Type".equalsIgnoreCase(fieldName);, +  }]