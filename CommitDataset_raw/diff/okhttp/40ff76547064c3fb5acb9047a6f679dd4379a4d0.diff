[+++ /dev/null, +++ /dev/null, +++ b/src/main/java/libcore/net/http/HeaderParser.java, +    public static int skipUntil(String input, int pos, String characters) {, +    public static int skipWhitespace(String input, int pos) {, +++ /dev/null, +++ b/src/main/java/libcore/net/http/HeaderParser.java, +    public static int skipUntil(String input, int pos, String characters) {, +    public static int skipWhitespace(String input, int pos) {, +++ b/src/main/java/libcore/net/http/HttpAuthenticator.java, +/*, + * Copyright (C) 2012 Square, Inc., + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package libcore.net.http;, +, +import static com.squareup.okhttp.OkHttpConnection.HTTP_PROXY_AUTH;, +import static com.squareup.okhttp.OkHttpConnection.HTTP_UNAUTHORIZED;, +import java.io.IOException;, +import java.net.Authenticator;, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.net.PasswordAuthentication;, +import java.net.Proxy;, +import java.net.URL;, +import java.util.ArrayList;, +import java.util.List;, +import libcore.io.Base64;, +, +/**, + * Handles HTTP authentication headers from origin and proxy servers., + */, +public final class HttpAuthenticator {, +    /**, +     * React to a failed authorization response by looking up new credentials., +     *, +     * @return true if credentials have been added to successorRequestHeaders, +     *     and another request should be attempted., +     */, +    public static final boolean processAuthHeader(int responseCode, RawHeaders responeHeaders,, +            RawHeaders successorRequestHeaders, Proxy proxy, URL url) throws IOException {, +        if (responseCode != HTTP_PROXY_AUTH && responseCode != HTTP_UNAUTHORIZED) {, +            throw new IllegalArgumentException();, +        }, +, +        // Keep asking for username/password until authorized., +        String challengeHeader = responseCode == HTTP_PROXY_AUTH, +                ? "Proxy-Authenticate", +                : "WWW-Authenticate";, +        String credentials = getCredentials(responeHeaders, challengeHeader, proxy, url);, +        if (credentials == null) {, +            return false; // Could not find credentials so end the request cycle., +        }, +, +        // Add authorization credentials, bypassing the already-connected check., +        String fieldName = responseCode == HTTP_PROXY_AUTH, +                ? "Proxy-Authorization", +                : "Authorization";, +        successorRequestHeaders.set(fieldName, credentials);, +        return true;, +    }, +, +    /**, +     * Returns the authorization credentials that may satisfy the challenge., +     * Returns null if a challenge header was not provided or if credentials, +     * were not available., +     */, +    private static String getCredentials(RawHeaders responseHeaders,, +            String challengeHeader, Proxy proxy, URL url) throws IOException {, +        List<Challenge> challenges = parseChallenges(responseHeaders, challengeHeader);, +        if (challenges.isEmpty()) {, +            return null;, +        }, +, +        for (Challenge challenge : challenges) {, +            // Use the global authenticator to get the password., +            PasswordAuthentication auth;, +            if (responseHeaders.getResponseCode() == HTTP_PROXY_AUTH) {, +                InetSocketAddress proxyAddress = (InetSocketAddress) proxy.address();, +                auth = Authenticator.requestPasswordAuthentication(, +                        proxyAddress.getHostName(), getConnectToInetAddress(proxy, url),, +                        proxyAddress.getPort(), url.getProtocol(), challenge.realm,, +                        challenge.scheme, url, Authenticator.RequestorType.PROXY);, +            } else {, +                auth = Authenticator.requestPasswordAuthentication(, +                        url.getHost(), getConnectToInetAddress(proxy, url), url.getPort(),, +                        url.getProtocol(), challenge.realm, challenge.scheme, url,, +                        Authenticator.RequestorType.SERVER);]