[+++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +  @Test public void applicationInterceptorResponseMustHaveBody() throws Exception {, +    server.enqueue(new MockResponse());, +, +    Interceptor interceptor = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        return chain.proceed(chain.request()).newBuilder().body(null).build();, +      }, +    };, +    client = client.newBuilder(), +        .addInterceptor(interceptor), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("interceptor " + interceptor + " returned a response with no body",, +          expected.getMessage());, +    }, +  }, +, +  @Test public void networkInterceptorResponseMustHaveBody() throws Exception {, +    server.enqueue(new MockResponse());, +, +    Interceptor interceptor = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        return chain.proceed(chain.request()).newBuilder().body(null).build();, +      }, +    };, +    client = client.newBuilder(), +        .addNetworkInterceptor(interceptor), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("interceptor " + interceptor + " returned a response with no body",, +          expected.getMessage());, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +  @Test public void applicationInterceptorResponseMustHaveBody() throws Exception {, +    server.enqueue(new MockResponse());, +, +    Interceptor interceptor = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        return chain.proceed(chain.request()).newBuilder().body(null).build();, +      }, +    };, +    client = client.newBuilder(), +        .addInterceptor(interceptor), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("interceptor " + interceptor + " returned a response with no body",, +          expected.getMessage());, +    }, +  }, +, +  @Test public void networkInterceptorResponseMustHaveBody() throws Exception {, +    server.enqueue(new MockResponse());, +, +    Interceptor interceptor = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        return chain.proceed(chain.request()).newBuilder().body(null).build();, +      }, +    };, +    client = client.newBuilder(), +        .addNetworkInterceptor(interceptor), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("interceptor " + interceptor + " returned a response with no body",, +          expected.getMessage());, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java]