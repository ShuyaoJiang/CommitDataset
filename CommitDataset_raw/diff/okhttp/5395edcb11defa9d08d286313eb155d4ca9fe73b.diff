[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      if (response.getSocketPolicy() == SocketPolicy.NO_RESPONSE) {, +        return;, +      }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      if (response.getSocketPolicy() == SocketPolicy.NO_RESPONSE) {, +        return;, +      }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +  SHUTDOWN_OUTPUT_AT_END,, +, +  /**, +   * Don't response to the request but keep the socket open. For testing, +   * read response header timeout issue., +   */, +  NO_RESPONSE, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      if (response.getSocketPolicy() == SocketPolicy.NO_RESPONSE) {, +        return;, +      }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +  SHUTDOWN_OUTPUT_AT_END,, +, +  /**, +   * Don't response to the request but keep the socket open. For testing, +   * read response header timeout issue., +   */, +  NO_RESPONSE, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      if (response.getSocketPolicy() == SocketPolicy.NO_RESPONSE) {, +        return;, +      }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +  SHUTDOWN_OUTPUT_AT_END,, +, +  /**, +   * Don't response to the request but keep the socket open. For testing, +   * read response header timeout issue., +   */, +  NO_RESPONSE, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +import com.squareup.okhttp.mockwebserver.SocketPolicy;, +, +  @Test(timeout = 3000) public void readResponseHeaderTimeout() throws Exception {, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.NO_RESPONSE));, +    server.enqueue(new MockResponse().setBody("A"));, +    server.play();, +, +    HttpURLConnection connection = client.open(server.getUrl("/"));, +    connection.setReadTimeout(1000);, +    assertContent("A", connection, Integer.MAX_VALUE);, +  }, +]