[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +      new Request.Builder().url("ftp://hostname/path");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +      new Request.Builder().url("ftp://hostname/path");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java, +    int windowSize = 100;, +    int windowUpdateThreshold = 50;, +      // Send frames of summing to size 50, which is windowUpdateThreshold., +      peer.sendFrame().data(false, 3, data(24));, +      peer.sendFrame().data(false, 3, data(25));, +      peer.sendFrame().data(false, 3, data(1));, +    connection.okHttpSettings.set(Settings.INITIAL_WINDOW_SIZE, 0, windowSize);, +    buffer.writeAll(in);, +    assertEquals(150, buffer.size());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +      new Request.Builder().url("ftp://hostname/path");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java, +    int windowSize = 100;, +    int windowUpdateThreshold = 50;, +      // Send frames of summing to size 50, which is windowUpdateThreshold., +      peer.sendFrame().data(false, 3, data(24));, +      peer.sendFrame().data(false, 3, data(25));, +      peer.sendFrame().data(false, 3, data(1));, +    connection.okHttpSettings.set(Settings.INITIAL_WINDOW_SIZE, 0, windowSize);, +    buffer.writeAll(in);, +    assertEquals(150, buffer.size());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Spdy3ConnectionTest.java, +    int windowSize = 100;, +    int windowUpdateThreshold = 50;, +      // Send frames of summing to size 50, which is windowUpdateThreshold., +      peer.sendFrame().data(false, 1, data(24));, +      peer.sendFrame().data(false, 1, data(25));, +      peer.sendFrame().data(false, 1, data(1));, +    connection.okHttpSettings.set(Settings.INITIAL_WINDOW_SIZE, 0, windowSize);, +    buffer.writeAll(in);, +    assertEquals(150, buffer.size());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +      new Request.Builder().url("ftp://hostname/path");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java, +    int windowSize = 100;, +    int windowUpdateThreshold = 50;, +      // Send frames of summing to size 50, which is windowUpdateThreshold., +      peer.sendFrame().data(false, 3, data(24));, +      peer.sendFrame().data(false, 3, data(25));, +      peer.sendFrame().data(false, 3, data(1));, +    connection.okHttpSettings.set(Settings.INITIAL_WINDOW_SIZE, 0, windowSize);, +    buffer.writeAll(in);, +    assertEquals(150, buffer.size());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Spdy3ConnectionTest.java, +    int windowSize = 100;, +    int windowUpdateThreshold = 50;, +      // Send frames of summing to size 50, which is windowUpdateThreshold., +      peer.sendFrame().data(false, 1, data(24));, +      peer.sendFrame().data(false, 1, data(25));, +      peer.sendFrame().data(false, 1, data(1));, +    connection.okHttpSettings.set(Settings.INITIAL_WINDOW_SIZE, 0, windowSize);, +    buffer.writeAll(in);, +    assertEquals(150, buffer.size());, +++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java, +  private final URL url;, +    this.url = builder.url;, +    return url;, +    return url.toString();, +      try {, +        return url(new URL(url));, +      } catch (MalformedURLException e) {, +        throw new IllegalArgumentException("Malformed URL: " + url, e);, +      }, +      if (url == null) throw new IllegalStateException("url == null");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +      new Request.Builder().url("ftp://hostname/path");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java, +    int windowSize = 100;, +    int windowUpdateThreshold = 50;, +      // Send frames of summing to size 50, which is windowUpdateThreshold., +      peer.sendFrame().data(false, 3, data(24));, +      peer.sendFrame().data(false, 3, data(25));, +      peer.sendFrame().data(false, 3, data(1));, +    connection.okHttpSettings.set(Settings.INITIAL_WINDOW_SIZE, 0, windowSize);, +    buffer.writeAll(in);, +    assertEquals(150, buffer.size());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Spdy3ConnectionTest.java, +    int windowSize = 100;, +    int windowUpdateThreshold = 50;, +      // Send frames of summing to size 50, which is windowUpdateThreshold., +      peer.sendFrame().data(false, 1, data(24));, +      peer.sendFrame().data(false, 1, data(25));, +      peer.sendFrame().data(false, 1, data(1));, +    connection.okHttpSettings.set(Settings.INITIAL_WINDOW_SIZE, 0, windowSize);, +    buffer.writeAll(in);, +    assertEquals(150, buffer.size());, +++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java, +  private final URL url;, +    this.url = builder.url;, +    return url;, +    return url.toString();, +      try {, +        return url(new URL(url));, +      } catch (MalformedURLException e) {, +        throw new IllegalArgumentException("Malformed URL: " + url, e);]