[+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    long contentLength = responseBody.contentLength();, +    String bodySize = contentLength != -1 ? contentLength + "-byte" : "unknown-length";, +        + bodySize + " body" : "") + ')');, +        if (contentLength != 0) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    long contentLength = responseBody.contentLength();, +    String bodySize = contentLength != -1 ? contentLength + "-byte" : "unknown-length";, +        + bodySize + " body" : "") + ')');, +        if (contentLength != 0) {, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +  @Test public void basicChunkedResponseBody() throws IOException {, +    setLevel(Level.BASIC);, +, +    server.enqueue(new MockResponse(), +        .setChunkedBody("Hello!", 2), +        .setHeader("Content-Type", PLAIN));, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +, +    applicationLogs, +        .assertLogEqual("--> GET " + url + " HTTP/1.1"), +        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, unknown-length body\\)"), +        .assertNoMoreLogs();, +, +    networkLogs, +        .assertLogEqual("--> GET " + url + " HTTP/1.1"), +        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, unknown-length body\\)"), +        .assertNoMoreLogs();, +  }, +, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    long contentLength = responseBody.contentLength();, +    String bodySize = contentLength != -1 ? contentLength + "-byte" : "unknown-length";, +        + bodySize + " body" : "") + ')');, +        if (contentLength != 0) {, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +  @Test public void basicChunkedResponseBody() throws IOException {, +    setLevel(Level.BASIC);, +, +    server.enqueue(new MockResponse(), +        .setChunkedBody("Hello!", 2), +        .setHeader("Content-Type", PLAIN));, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +, +    applicationLogs, +        .assertLogEqual("--> GET " + url + " HTTP/1.1"), +        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, unknown-length body\\)"), +        .assertNoMoreLogs();, +, +    networkLogs, +        .assertLogEqual("--> GET " + url + " HTTP/1.1"), +        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, unknown-length body\\)"), +        .assertNoMoreLogs();, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Cache.java, +public final class Cache {, +  public void flush() throws IOException {, +  public void close() throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    long contentLength = responseBody.contentLength();, +    String bodySize = contentLength != -1 ? contentLength + "-byte" : "unknown-length";, +        + bodySize + " body" : "") + ')');, +        if (contentLength != 0) {, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +  @Test public void basicChunkedResponseBody() throws IOException {, +    setLevel(Level.BASIC);, +, +    server.enqueue(new MockResponse(), +        .setChunkedBody("Hello!", 2), +        .setHeader("Content-Type", PLAIN));, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +, +    applicationLogs, +        .assertLogEqual("--> GET " + url + " HTTP/1.1"), +        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, unknown-length body\\)"), +        .assertNoMoreLogs();, +, +    networkLogs, +        .assertLogEqual("--> GET " + url + " HTTP/1.1"), +        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, unknown-length body\\)"), +        .assertNoMoreLogs();, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Cache.java, +public final class Cache {, +  public void flush() throws IOException {, +  public void close() throws IOException {, +++ b/okhttp/src/main/java/okhttp3/internal/DiskLruCache.java, +public final class DiskLruCache implements Closeable {, +  public synchronized void flush() throws IOException {, +  public synchronized void close() throws IOException {]