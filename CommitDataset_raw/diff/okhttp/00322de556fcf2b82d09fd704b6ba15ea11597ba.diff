[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/CookiesTest.java, +import java.net.CookieHandler;, +import okhttp3.JavaNetCookieJar;, +    HttpUrl serverUrl = urlWithIpAddress(server, "/");, +    cookieA.setDomain(serverUrl.host());, +    cookieManager.getCookieStore().add(serverUrl.uri(), cookieA);, +    cookieB.setDomain(serverUrl.host());, +    cookieManager.getCookieStore().add(serverUrl.uri(), cookieB);, +    get(serverUrl);, +    RecordedRequest request = server.takeRequest();, +, +    assertEquals("a=android; b=banana", request.getHeader("Cookie"));, +  }, +, +  @Test public void cookieHandlerLikeAndroid() throws Exception {, +    final MockWebServer server = new MockWebServer();, +    server.enqueue(new MockResponse());, +    server.start();, +    final HttpUrl serverUrl = urlWithIpAddress(server, "/");, +, +    CookieHandler androidCookieHandler = new CookieHandler() {, +      @Override public Map<String, List<String>> get(URI uri, Map<String, List<String>> map), +          throws IOException {, +        return Collections.singletonMap("Cookie", Collections.singletonList("$Version=\"1\"; ", +            + "a=\"android\";$Path=\"/\";$Domain=\"" + serverUrl.host() + "\"; ", +            + "b=\"banana\";$Path=\"/\";$Domain=\"" + serverUrl.host() + "\""));, +      }, +, +      @Override public void put(URI uri, Map<String, List<String>> map) throws IOException {, +      }, +    };, +, +    client = client.newBuilder(), +        .cookieJar(new JavaNetCookieJar(androidCookieHandler)), +        .build();, +, +    get(serverUrl);, +    HttpUrl redirectTargetUrl = urlWithIpAddress(redirectTarget, "/");, +        .addHeader("Location: " + redirectTargetUrl));, +    HttpUrl redirectSourceUrl = urlWithIpAddress(redirectSource, "/");, +    cookie.setDomain(redirectSourceUrl.host());, +    cookieManager.getCookieStore().add(redirectSourceUrl.uri(), cookie);, +    get(redirectSourceUrl);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/CookiesTest.java, +import java.net.CookieHandler;, +import okhttp3.JavaNetCookieJar;, +    HttpUrl serverUrl = urlWithIpAddress(server, "/");, +    cookieA.setDomain(serverUrl.host());, +    cookieManager.getCookieStore().add(serverUrl.uri(), cookieA);, +    cookieB.setDomain(serverUrl.host());, +    cookieManager.getCookieStore().add(serverUrl.uri(), cookieB);, +    get(serverUrl);, +    RecordedRequest request = server.takeRequest();, +, +    assertEquals("a=android; b=banana", request.getHeader("Cookie"));, +  }, +, +  @Test public void cookieHandlerLikeAndroid() throws Exception {, +    final MockWebServer server = new MockWebServer();, +    server.enqueue(new MockResponse());, +    server.start();, +    final HttpUrl serverUrl = urlWithIpAddress(server, "/");, +, +    CookieHandler androidCookieHandler = new CookieHandler() {, +      @Override public Map<String, List<String>> get(URI uri, Map<String, List<String>> map), +          throws IOException {, +        return Collections.singletonMap("Cookie", Collections.singletonList("$Version=\"1\"; ", +            + "a=\"android\";$Path=\"/\";$Domain=\"" + serverUrl.host() + "\"; ", +            + "b=\"banana\";$Path=\"/\";$Domain=\"" + serverUrl.host() + "\""));, +      }, +, +      @Override public void put(URI uri, Map<String, List<String>> map) throws IOException {, +      }, +    };, +, +    client = client.newBuilder(), +        .cookieJar(new JavaNetCookieJar(androidCookieHandler)), +        .build();, +, +    get(serverUrl);, +    HttpUrl redirectTargetUrl = urlWithIpAddress(redirectTarget, "/");, +        .addHeader("Location: " + redirectTargetUrl));, +    HttpUrl redirectSourceUrl = urlWithIpAddress(redirectSource, "/");, +    cookie.setDomain(redirectSourceUrl.host());, +    cookieManager.getCookieStore().add(redirectSourceUrl.uri(), cookie);, +    get(redirectSourceUrl);, +++ b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetCookieJar.java, +import static okhttp3.internal.Util.delimiterOffset;, +import static okhttp3.internal.Util.trimSubstring;, +    for (int pos = 0, limit = header.length(), pairEnd; pos < limit; pos = pairEnd + 1) {, +      pairEnd = delimiterOffset(header, pos, limit, ";,");, +      int equalsSign = delimiterOffset(header, pos, pairEnd, '=');, +      String name = trimSubstring(header, pos, equalsSign);, +      if (name.startsWith("$")) continue;, +, +      // We have either name=value or just a name., +      String value = equalsSign < pairEnd, +          ? trimSubstring(header, equalsSign + 1, pairEnd), +          : "";, +]