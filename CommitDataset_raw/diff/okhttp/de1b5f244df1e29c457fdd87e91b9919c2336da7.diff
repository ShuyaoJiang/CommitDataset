[+++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +    // The following currently fails because ContentLength(-1) is returned from the entity, +    // assertNull(response1.getEntity().getContentLength());, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +    // The following currently fails because ContentLength(-1) is returned from the entity, +    // assertNull(response1.getEntity().getContentLength());, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +import java.net.SocketTimeoutException;, +  /**, +   * Returns true if we are confident that we can read data from this, +   * connection. This is more expensive and more accurate than {@link, +   * #isAlive()}; callers should check {@link #isAlive()} first., +   */, +  public boolean isReadable() {, +    if (!(in instanceof BufferedInputStream)) {, +      return true; // Optimistic., +    }, +    if (isSpdy()) {, +      return true; // Optimistic. We can't test SPDY because its streams are in use., +    }, +    BufferedInputStream bufferedInputStream = (BufferedInputStream) in;, +    try {, +      int readTimeout = socket.getSoTimeout();, +      try {, +        socket.setSoTimeout(1);, +        bufferedInputStream.mark(1);, +        if (bufferedInputStream.read() == -1) {, +          return false; // Stream is exhausted; socket is closed., +        }, +        bufferedInputStream.reset();, +        return true;, +      } finally {, +        socket.setSoTimeout(readTimeout);, +      }, +    } catch (SocketTimeoutException ignored) {, +      return true; // Read timed out; socket is good., +    } catch (IOException e) {, +      return false; // Couldn't read; socket is closed., +    }, +  }, +, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +    // The following currently fails because ContentLength(-1) is returned from the entity, +    // assertNull(response1.getEntity().getContentLength());, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +import java.net.SocketTimeoutException;, +  /**, +   * Returns true if we are confident that we can read data from this, +   * connection. This is more expensive and more accurate than {@link, +   * #isAlive()}; callers should check {@link #isAlive()} first., +   */, +  public boolean isReadable() {, +    if (!(in instanceof BufferedInputStream)) {, +      return true; // Optimistic., +    }, +    if (isSpdy()) {, +      return true; // Optimistic. We can't test SPDY because its streams are in use., +    }, +    BufferedInputStream bufferedInputStream = (BufferedInputStream) in;, +    try {, +      int readTimeout = socket.getSoTimeout();, +      try {, +        socket.setSoTimeout(1);, +        bufferedInputStream.mark(1);, +        if (bufferedInputStream.read() == -1) {, +          return false; // Stream is exhausted; socket is closed., +        }, +        bufferedInputStream.reset();, +        return true;, +      } finally {, +        socket.setSoTimeout(readTimeout);, +      }, +    } catch (SocketTimeoutException ignored) {, +      return true; // Read timed out; socket is good., +    } catch (IOException e) {, +      return false; // Couldn't read; socket is closed., +    }, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +, +    executorService.submit(connectionsCleanupCallable);, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +    // The following currently fails because ContentLength(-1) is returned from the entity, +    // assertNull(response1.getEntity().getContentLength());, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +import java.net.SocketTimeoutException;, +  /**, +   * Returns true if we are confident that we can read data from this, +   * connection. This is more expensive and more accurate than {@link, +   * #isAlive()}; callers should check {@link #isAlive()} first., +   */, +  public boolean isReadable() {, +    if (!(in instanceof BufferedInputStream)) {, +      return true; // Optimistic., +    }, +    if (isSpdy()) {, +      return true; // Optimistic. We can't test SPDY because its streams are in use., +    }, +    BufferedInputStream bufferedInputStream = (BufferedInputStream) in;]