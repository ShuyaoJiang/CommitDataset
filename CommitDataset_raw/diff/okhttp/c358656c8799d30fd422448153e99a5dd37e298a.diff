[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    assertEquals(1, client.getConnectionPool().getIdleConnectionCount());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    assertEquals(1, client.getConnectionPool().getIdleConnectionCount());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    executeSynchronously(request).assertBody("seed connection pool");, +    executeSynchronously(request).assertBody("retry success");, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    executeSynchronously(request).assertBody("seed connection pool");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    assertEquals(1, client.getConnectionPool().getIdleConnectionCount());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    executeSynchronously(request).assertBody("seed connection pool");, +    executeSynchronously(request).assertBody("retry success");, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    executeSynchronously(request).assertBody("seed connection pool");, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    assertEquals(1, client.getConnectionPool().getIdleConnectionCount());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    executeSynchronously(request).assertBody("seed connection pool");, +    executeSynchronously(request).assertBody("retry success");, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    executeSynchronously(request).assertBody("seed connection pool");, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java, +    assertEquals(0, client.client().getConnectionPool().getIdleConnectionCount());, +    assertEquals(Arrays.asList(server.getUrl("/").toURI(), server2.getUrl("/").toURI()),, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    assertEquals(1, client.getConnectionPool().getIdleConnectionCount());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    executeSynchronously(request).assertBody("seed connection pool");, +    executeSynchronously(request).assertBody("retry success");, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    executeSynchronously(request).assertBody("seed connection pool");, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java, +    assertEquals(0, client.client().getConnectionPool().getIdleConnectionCount());, +    assertEquals(Arrays.asList(server.getUrl("/").toURI(), server2.getUrl("/").toURI()),, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java, +    Response response = Http2xStream.readSpdy3HeadersList(headerBlock).request(request).build();, +    Response response = Http2xStream.readSpdy3HeadersList(headerBlock).request(request).build();, +    Response response = Http2xStream.readHttp2HeadersList(headerBlock).request(request).build();, +    List<Header> headerBlock = Http2xStream.spdy3HeadersList(request);, +    assertEquals(expected, Http2xStream.spdy3HeadersList(request));, +    assertEquals(expected, Http2xStream.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    assertEquals(1, client.getConnectionPool().getIdleConnectionCount());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    executeSynchronously(request).assertBody("seed connection pool");, +    executeSynchronously(request).assertBody("retry success");, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    executeSynchronously(request).assertBody("seed connection pool");, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java, +    assertEquals(0, client.client().getConnectionPool().getIdleConnectionCount());, +    assertEquals(Arrays.asList(server.getUrl("/").toURI(), server2.getUrl("/").toURI()),, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java, +    Response response = Http2xStream.readSpdy3HeadersList(headerBlock).request(request).build();, +    Response response = Http2xStream.readSpdy3HeadersList(headerBlock).request(request).build();, +    Response response = Http2xStream.readHttp2HeadersList(headerBlock).request(request).build();, +    List<Header> headerBlock = Http2xStream.spdy3HeadersList(request);, +    assertEquals(expected, Http2xStream.spdy3HeadersList(request));, +    assertEquals(expected, Http2xStream.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +  private static final String proxyAHost = "proxya";, +      new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved(proxyAHost, proxyAPort));, +  private static final String proxyBHost = "proxyb";, +      new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved(proxyBHost, proxyBPort));, +  private String uriHost = "hosta";, +  private RouteDatabase routeDatabase = new RouteDatabase();, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase);, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase);, +    routeSelector = new RouteSelector(address, routeDatabase);, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase);, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase);, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase);, +    proxySelector.assertRequests(address.url().uri());, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase);, +    proxySelector.assertRequests(address.url().uri());, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase);, +    proxySelector.assertRequests(address.url().uri());, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase);, +    proxySelector.assertRequests(address.url().uri());, +    RouteSelector routeSelector = new RouteSelector(address, routeDatabase);]