[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      if (!readBody && peek.getSocketPolicy() == EXPECT_CONTINUE) {, +      if (readBody && !peek.isDuplex()) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      if (!readBody && peek.getSocketPolicy() == EXPECT_CONTINUE) {, +      if (readBody && !peek.isDuplex()) {, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +import okhttp3.mockwebserver.SocketPolicy;, +  @Test public void duplexWith100Continue() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +, +    MockDuplexResponseBody mockDuplexResponseBody = enqueueResponseWithBody(, +        new MockResponse(), +            .clearHeaders(), +            .setSocketPolicy(SocketPolicy.EXPECT_CONTINUE),, +        new MockDuplexResponseBody(), +            .receiveRequest("request body\n"), +            .sendResponse("response body\n"), +            .exhaustRequest());, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .header("Expect", "100-continue"), +        .post(new AsyncRequestBody()), +        .build());, +, +    try (Response response = call.execute()) {, +      BufferedSink requestBody = ((AsyncRequestBody) call.request().body()).takeSink();, +      requestBody.writeUtf8("request body\n");, +      requestBody.flush();, +, +      BufferedSource responseBody = response.body().source();, +      assertEquals("response body", responseBody.readUtf8Line());, +, +      requestBody.close();, +      assertNull(responseBody.readUtf8Line());, +    }, +, +    mockDuplexResponseBody.awaitSuccess();, +  }, +]