[+++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, + *   System.out.println(HttpUrl.parse(attack).encodedPath());, +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, + *   System.out.println(HttpUrl.parse(attack).encodedPath());, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, + * responses. Most applications can use a single OkHttpClient for all of their HTTP requests,, + * benefiting from a shared response cache, thread pool, connection re-use, etc., + * <p>To create an {@code OkHttpClient} with the default settings, use the {@linkplain, + * #OkHttpClient() default constructor}. Or create a configured instance with {@link, + * OkHttpClient.Builder}. To adjust an existing client before making a request, use {@link, + * #newBuilder()}. This example shows a call with a 30 second timeout:, + *   OkHttpClient client = ..., + *   OkHttpClient clientWith30sTimeout = client.newBuilder(), + *       .readTimeout(30, TimeUnit.SECONDS), + *   Response response = clientWith30sTimeout.newCall(request).execute();]