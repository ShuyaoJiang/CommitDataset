[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import static com.squareup.okhttp.internal.Util.headerEntries;, +    List<Header> requestHeaders = stream.getRequestHeaders();, +    for (int i = 0; i < requestHeaders.size(); i++) {, +      if (requestHeaders.get(i).name.equals(Header.TARGET_PATH)) {, +        path = requestHeaders.get(i).value.utf8();, +    List<Header> responseHeaders =, +        headerEntries(":status", "404", ":version", "HTTP/1.1", "content-type", "text/plain");, +    List<Header> responseHeaders =, +        headerEntries(":status", "200", ":version", "HTTP/1.1", "content-type",, +        headerEntries(":status", "200", ":version", "HTTP/1.1", "content-type", contentType(file)),, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import static com.squareup.okhttp.internal.Util.headerEntries;, +    List<Header> requestHeaders = stream.getRequestHeaders();, +    for (int i = 0; i < requestHeaders.size(); i++) {, +      if (requestHeaders.get(i).name.equals(Header.TARGET_PATH)) {, +        path = requestHeaders.get(i).value.utf8();, +    List<Header> responseHeaders =, +        headerEntries(":status", "404", ":version", "HTTP/1.1", "content-type", "text/plain");, +    List<Header> responseHeaders =, +        headerEntries(":status", "200", ":version", "HTTP/1.1", "content-type",, +        headerEntries(":status", "200", ":version", "HTTP/1.1", "content-type", contentType(file)),, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.spdy.Header;, +      List<Header> spdyHeaders = stream.getRequestHeaders();, +      String version = protocol == Protocol.SPDY_3 ? "<:version omitted>" : "HTTP/1.1";, +      for (int i = 0, size = spdyHeaders.size(); i < size; i++) {, +        String name = spdyHeaders.get(i).name.utf8();, +        String value = spdyHeaders.get(i).value.utf8();, +      List<Header> spdyHeaders = new ArrayList<Header>();, +      spdyHeaders.add(new Header(Header.RESPONSE_STATUS, statusParts[1]));, +      if (protocol == Protocol.SPDY_3) {, +        spdyHeaders.add(new Header(Header.VERSION, statusParts[0]));, +      }, +        spdyHeaders.add(new Header(headerParts[0].toLowerCase(Locale.US).trim(),, +            headerParts[1].trim()));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import static com.squareup.okhttp.internal.Util.headerEntries;, +    List<Header> requestHeaders = stream.getRequestHeaders();, +    for (int i = 0; i < requestHeaders.size(); i++) {, +      if (requestHeaders.get(i).name.equals(Header.TARGET_PATH)) {, +        path = requestHeaders.get(i).value.utf8();, +    List<Header> responseHeaders =, +        headerEntries(":status", "404", ":version", "HTTP/1.1", "content-type", "text/plain");, +    List<Header> responseHeaders =, +        headerEntries(":status", "200", ":version", "HTTP/1.1", "content-type",, +        headerEntries(":status", "200", ":version", "HTTP/1.1", "content-type", contentType(file)),, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.spdy.Header;, +      List<Header> spdyHeaders = stream.getRequestHeaders();, +      String version = protocol == Protocol.SPDY_3 ? "<:version omitted>" : "HTTP/1.1";, +      for (int i = 0, size = spdyHeaders.size(); i < size; i++) {, +        String name = spdyHeaders.get(i).name.utf8();, +        String value = spdyHeaders.get(i).value.utf8();, +      List<Header> spdyHeaders = new ArrayList<Header>();, +      spdyHeaders.add(new Header(Header.RESPONSE_STATUS, statusParts[1]));, +      if (protocol == Protocol.SPDY_3) {, +        spdyHeaders.add(new Header(Header.VERSION, statusParts[0]));, +      }, +        spdyHeaders.add(new Header(headerParts[0].toLowerCase(Locale.US).trim(),, +            headerParts[1].trim()));, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/ByteString.java, +  /** Returns a new byte string containing the {@code UTF-8} bytes of {@code s}. */, +  /** Constructs a new {@code String} by decoding the bytes as {@code UTF-8}. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import static com.squareup.okhttp.internal.Util.headerEntries;, +    List<Header> requestHeaders = stream.getRequestHeaders();, +    for (int i = 0; i < requestHeaders.size(); i++) {, +      if (requestHeaders.get(i).name.equals(Header.TARGET_PATH)) {, +        path = requestHeaders.get(i).value.utf8();, +    List<Header> responseHeaders =, +        headerEntries(":status", "404", ":version", "HTTP/1.1", "content-type", "text/plain");, +    List<Header> responseHeaders =, +        headerEntries(":status", "200", ":version", "HTTP/1.1", "content-type",, +        headerEntries(":status", "200", ":version", "HTTP/1.1", "content-type", contentType(file)),, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.spdy.Header;, +      List<Header> spdyHeaders = stream.getRequestHeaders();, +      String version = protocol == Protocol.SPDY_3 ? "<:version omitted>" : "HTTP/1.1";, +      for (int i = 0, size = spdyHeaders.size(); i < size; i++) {, +        String name = spdyHeaders.get(i).name.utf8();, +        String value = spdyHeaders.get(i).value.utf8();, +      List<Header> spdyHeaders = new ArrayList<Header>();, +      spdyHeaders.add(new Header(Header.RESPONSE_STATUS, statusParts[1]));, +      if (protocol == Protocol.SPDY_3) {, +        spdyHeaders.add(new Header(Header.VERSION, statusParts[0]));, +      }, +        spdyHeaders.add(new Header(headerParts[0].toLowerCase(Locale.US).trim(),, +            headerParts[1].trim()));, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/ByteString.java, +  /** Returns a new byte string containing the {@code UTF-8} bytes of {@code s}. */, +  /** Constructs a new {@code String} by decoding the bytes as {@code UTF-8}. */, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import com.squareup.okhttp.internal.spdy.Header;, +  public static List<Header> headerEntries(String... elements) {, +    List<Header> result = new ArrayList<Header>(elements.length / 2);, +    for (int i = 0; i < elements.length; i += 2) {, +      result.add(new Header(elements[i], elements[i + 1]));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import static com.squareup.okhttp.internal.Util.headerEntries;]