[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/QueueDispatcher.java, +import java.util.logging.Logger;, +  private static final Logger logger = Logger.getLogger(QueueDispatcher.class.getName());, +      logger.info("served " + requestLine);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/QueueDispatcher.java, +import java.util.logging.Logger;, +  private static final Logger logger = Logger.getLogger(QueueDispatcher.class.getName());, +      logger.info("served " + requestLine);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +    String mimeType = "application/x-www-form-urlencoded";, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/QueueDispatcher.java, +import java.util.logging.Logger;, +  private static final Logger logger = Logger.getLogger(QueueDispatcher.class.getName());, +      logger.info("served " + requestLine);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +    String mimeType = "application/x-www-form-urlencoded";, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +    assertEquals("application/x-www-form-urlencoded; charset=utf-8", body.contentType().toString());, +    assertEquals("application/x-www-form-urlencoded; charset=utf-8", body.contentType().toString());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/QueueDispatcher.java, +import java.util.logging.Logger;, +  private static final Logger logger = Logger.getLogger(QueueDispatcher.class.getName());, +      logger.info("served " + requestLine);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +    String mimeType = "application/x-www-form-urlencoded";, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +    assertEquals("application/x-www-form-urlencoded; charset=utf-8", body.contentType().toString());, +    assertEquals("application/x-www-form-urlencoded; charset=utf-8", body.contentType().toString());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +  @Test public void toUriSpecialPathCharacters() throws Exception {, +    HttpUrl url = new HttpUrl.Builder(), +        .scheme("http"), +        .host("example.com"), +        .addPathSegment("data=[out:json];node[\"name\"~\"Karlsruhe\"]" +, +            "[\"place\"~\"city|village|town\"];out body;"), +        .build();, +    URI uri = url.uri();, +    assertEquals("http://example.com/data=%5Bout:json%5D;node%5B%22name%22~%22Karlsruhe%22%5D" +, +            "%5B%22place%22~%22city%7Cvillage%7Ctown%22%5D;out%20body;",, +        uri.toString());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/QueueDispatcher.java, +import java.util.logging.Logger;, +  private static final Logger logger = Logger.getLogger(QueueDispatcher.class.getName());, +      logger.info("served " + requestLine);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +    String mimeType = "application/x-www-form-urlencoded";, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +    assertEquals("application/x-www-form-urlencoded; charset=utf-8", body.contentType().toString());, +    assertEquals("application/x-www-form-urlencoded; charset=utf-8", body.contentType().toString());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +  @Test public void toUriSpecialPathCharacters() throws Exception {, +    HttpUrl url = new HttpUrl.Builder(), +        .scheme("http"), +        .host("example.com"), +        .addPathSegment("data=[out:json];node[\"name\"~\"Karlsruhe\"]" +, +            "[\"place\"~\"city|village|town\"];out body;"), +        .build();, +    URI uri = url.uri();, +    assertEquals("http://example.com/data=%5Bout:json%5D;node%5B%22name%22~%22Karlsruhe%22%5D" +, +            "%5B%22place%22~%22city%7Cvillage%7Ctown%22%5D;out%20body;",, +        uri.toString());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java, +    } catch (IllegalStateException expected) {, +  @Test public void instanceFollowsRedirects() throws Exception {, +    testInstanceFollowsRedirects("http://www.google.com/");, +    testInstanceFollowsRedirects("https://www.google.com/");, +  }, +, +  private void testInstanceFollowsRedirects(String spec) throws Exception {, +    URL url = new URL(spec);, +    HttpURLConnection urlConnection = client.open(url);, +    urlConnection.setInstanceFollowRedirects(true);, +    assertTrue(urlConnection.getInstanceFollowRedirects());, +    urlConnection.setInstanceFollowRedirects(false);, +    assertFalse(urlConnection.getInstanceFollowRedirects());, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/QueueDispatcher.java, +import java.util.logging.Logger;, +  private static final Logger logger = Logger.getLogger(QueueDispatcher.class.getName());, +      logger.info("served " + requestLine);, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +    String mimeType = "application/x-www-form-urlencoded";, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +    assertEquals("application/x-www-form-urlencoded; charset=utf-8", body.contentType().toString());, +    assertEquals("application/x-www-form-urlencoded; charset=utf-8", body.contentType().toString());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +  @Test public void toUriSpecialPathCharacters() throws Exception {, +    HttpUrl url = new HttpUrl.Builder(), +        .scheme("http"), +        .host("example.com"), +        .addPathSegment("data=[out:json];node[\"name\"~\"Karlsruhe\"]" +, +            "[\"place\"~\"city|village|town\"];out body;"), +        .build();, +    URI uri = url.uri();, +    assertEquals("http://example.com/data=%5Bout:json%5D;node%5B%22name%22~%22Karlsruhe%22%5D" +, +            "%5B%22place%22~%22city%7Cvillage%7Ctown%22%5D;out%20body;",, +        uri.toString());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java, +    } catch (IllegalStateException expected) {]