[+++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "Http2Server connection failure: " + e);, +        logger.log(Level.WARNING, "Http2Server unexpected failure", e);, +  @Override public void onStream(Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving Http2Stream: " + e.getMessage(), null);, +      System.out.println("Usage: Http2Server <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "Http2Server connection failure: " + e);, +        logger.log(Level.WARNING, "Http2Server unexpected failure", e);, +  @Override public void onStream(Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving Http2Stream: " + e.getMessage(), null);, +      System.out.println("Usage: Http2Server <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          Http2SocketHandler http2SocketHandler = new Http2SocketHandler(socket, protocol);, +              .listener(http2SocketHandler), +  /** Processes HTTP requests layered over HTTP/2. */, +  private class Http2SocketHandler extends Http2Connection.Listener {, +    private Http2SocketHandler(Socket socket, Protocol protocol) {, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "Http2Server connection failure: " + e);, +        logger.log(Level.WARNING, "Http2Server unexpected failure", e);, +  @Override public void onStream(Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving Http2Stream: " + e.getMessage(), null);, +      System.out.println("Usage: Http2Server <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          Http2SocketHandler http2SocketHandler = new Http2SocketHandler(socket, protocol);, +              .listener(http2SocketHandler), +  /** Processes HTTP requests layered over HTTP/2. */, +  private class Http2SocketHandler extends Http2Connection.Listener {, +    private Http2SocketHandler(Socket socket, Protocol protocol) {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void interceptorGetsHttp2() throws Exception {, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "Http2Server connection failure: " + e);, +        logger.log(Level.WARNING, "Http2Server unexpected failure", e);, +  @Override public void onStream(Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving Http2Stream: " + e.getMessage(), null);, +      System.out.println("Usage: Http2Server <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          Http2SocketHandler http2SocketHandler = new Http2SocketHandler(socket, protocol);, +              .listener(http2SocketHandler), +  /** Processes HTTP requests layered over HTTP/2. */, +  private class Http2SocketHandler extends Http2Connection.Listener {, +    private Http2SocketHandler(Socket socket, Protocol protocol) {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void interceptorGetsHttp2() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +            sink.flush(); // Http2Connection.writeData subject to write window, +            sink.close(); // Http2Connection.writeData empty frame, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "Http2Server connection failure: " + e);, +        logger.log(Level.WARNING, "Http2Server unexpected failure", e);, +  @Override public void onStream(Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving Http2Stream: " + e.getMessage(), null);, +      System.out.println("Usage: Http2Server <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          Http2SocketHandler http2SocketHandler = new Http2SocketHandler(socket, protocol);, +              .listener(http2SocketHandler), +  /** Processes HTTP requests layered over HTTP/2. */, +  private class Http2SocketHandler extends Http2Connection.Listener {, +    private Http2SocketHandler(Socket socket, Protocol protocol) {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void interceptorGetsHttp2() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +            sink.flush(); // Http2Connection.writeData subject to write window, +            sink.close(); // Http2Connection.writeData empty frame, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +      socket.setSoTimeout(0); // HTTP/2 connection timeouts are set per-stream., +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "Http2Server connection failure: " + e);, +        logger.log(Level.WARNING, "Http2Server unexpected failure", e);, +  @Override public void onStream(Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving Http2Stream: " + e.getMessage(), null);, +      System.out.println("Usage: Http2Server <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          Http2SocketHandler http2SocketHandler = new Http2SocketHandler(socket, protocol);, +              .listener(http2SocketHandler), +  /** Processes HTTP requests layered over HTTP/2. */, +  private class Http2SocketHandler extends Http2Connection.Listener {, +    private Http2SocketHandler(Socket socket, Protocol protocol) {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void interceptorGetsHttp2() throws Exception {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +            sink.flush(); // Http2Connection.writeData subject to write window, +            sink.close(); // Http2Connection.writeData empty frame, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +      socket.setSoTimeout(0); // HTTP/2 connection timeouts are set per-stream., +++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java, +      Util.threadFactory("OkHttp Http2Connection", true));, +                Platform.get().log(INFO, "Http2Connection.Listener failure for " + hostname, e);, +++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java, +        logger.log(Level.INFO, "Http2Server connection failure: " + e);, +        logger.log(Level.WARNING, "Http2Server unexpected failure", e);, +  @Override public void onStream(Http2Stream stream) throws IOException {, +      Platform.get().log(INFO, "Failure serving Http2Stream: " + e.getMessage(), null);, +      System.out.println("Usage: Http2Server <base directory>");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +          Http2SocketHandler http2SocketHandler = new Http2SocketHandler(socket, protocol);, +              .listener(http2SocketHandler), +  /** Processes HTTP requests layered over HTTP/2. */]