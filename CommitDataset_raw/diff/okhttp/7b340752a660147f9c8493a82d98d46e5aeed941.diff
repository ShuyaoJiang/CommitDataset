[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +        return true;, +        this.unsupported = true;, +        return protocols;, +      } else if (methodName.equals("selectProtocol"), +        // TODO: use OpenSSL's algorithm which uses both lists, +        List<?> serverProtocols = (List) args[0];, +        this.selected = protocols.get(0);, +        return selected;, +        this.selected = (String) args[0];, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +        return true;, +        this.unsupported = true;, +        return protocols;, +      } else if (methodName.equals("selectProtocol"), +        // TODO: use OpenSSL's algorithm which uses both lists, +        List<?> serverProtocols = (List) args[0];, +        this.selected = protocols.get(0);, +        return selected;, +        this.selected = (String) args[0];, +++ b/okhttp/src/main/java/com/squareup/okhttp/Headers.java, +  @Override public String toString() {, +    StringBuilder result = new StringBuilder();, +    for (int i = 0; i < size(); i++) {, +      result.append(name(i)).append(": ").append(value(i)).append("\n");, +    }, +    return result.toString();, +  }, +, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +        return true;, +        this.unsupported = true;, +        return protocols;, +      } else if (methodName.equals("selectProtocol"), +        // TODO: use OpenSSL's algorithm which uses both lists, +        List<?> serverProtocols = (List) args[0];, +        this.selected = protocols.get(0);, +        return selected;, +        this.selected = (String) args[0];, +++ b/okhttp/src/main/java/com/squareup/okhttp/Headers.java, +  @Override public String toString() {, +    StringBuilder result = new StringBuilder();, +    for (int i = 0; i < size(); i++) {, +      result.append(name(i)).append(": ").append(value(i)).append("\n");, +    }, +    return result.toString();, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/AbstractHttpInputStream.java, +  protected final OutputStream cacheBody;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +        return true;, +        this.unsupported = true;, +        return protocols;, +      } else if (methodName.equals("selectProtocol"), +        // TODO: use OpenSSL's algorithm which uses both lists, +        List<?> serverProtocols = (List) args[0];, +        this.selected = protocols.get(0);, +        return selected;, +        this.selected = (String) args[0];, +++ b/okhttp/src/main/java/com/squareup/okhttp/Headers.java, +  @Override public String toString() {, +    StringBuilder result = new StringBuilder();, +    for (int i = 0; i < size(); i++) {, +      result.append(name(i)).append(": ").append(value(i)).append("\n");, +    }, +    return result.toString();, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/AbstractHttpInputStream.java, +  protected final OutputStream cacheBody;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, +        return true;, +        this.unsupported = true;, +        return protocols;, +      } else if (methodName.equals("selectProtocol"), +        // TODO: use OpenSSL's algorithm which uses both lists, +        List<?> serverProtocols = (List) args[0];, +        this.selected = protocols.get(0);, +        return selected;, +        this.selected = (String) args[0];, +++ b/okhttp/src/main/java/com/squareup/okhttp/Headers.java, +  @Override public String toString() {, +    StringBuilder result = new StringBuilder();, +    for (int i = 0; i < size(); i++) {, +      result.append(name(i)).append(": ").append(value(i)).append("\n");, +    }, +    return result.toString();, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/AbstractHttpInputStream.java, +  protected final OutputStream cacheBody;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java, +import com.squareup.okhttp.Protocol;, +import com.squareup.okhttp.internal.Util;, +import static com.squareup.okhttp.internal.Util.checkOffsetAndCount;, +, +    return new SpdyInputStream(stream, cacheRequest, httpEngine);]