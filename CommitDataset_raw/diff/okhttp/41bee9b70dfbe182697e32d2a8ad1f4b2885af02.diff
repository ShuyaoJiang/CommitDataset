[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +import java.util.concurrent.atomic.AtomicReference;, +  @Test public void networkInterceptorInvokedForConditionalGet() throws Exception {, +    server.enqueue(new MockResponse(), +        .addHeader("ETag: v1"), +        .setBody("A"));, +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +, +    // Seed the cache., +    URL url = server.getUrl("/");, +    assertEquals("A", get(url).body().string());, +, +    final AtomicReference<String> ifNoneMatch = new AtomicReference<>();, +    client.networkInterceptors().add(new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        ifNoneMatch.compareAndSet(null, chain.request().header("If-None-Match"));, +        return chain.proceed(chain.request());, +      }, +    });, +, +    // Confirm the value is cached and intercepted., +    assertEquals("A", get(url).body().string());, +    assertEquals("v1", ifNoneMatch.get());, +  }, +, +  @Test public void networkInterceptorNotInvokedForFullyCached() throws Exception {, +    server.enqueue(new MockResponse(), +        .addHeader("Cache-Control: max-age=60"), +        .setBody("A"));, +, +    // Seed the cache., +    URL url = server.getUrl("/");, +    assertEquals("A", get(url).body().string());, +, +    // Confirm the interceptor isn't exercised., +    client.networkInterceptors().add(new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        throw new AssertionError();, +      }, +    });, +    assertEquals("A", get(url).body().string());, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +import java.util.concurrent.atomic.AtomicReference;, +  @Test public void networkInterceptorInvokedForConditionalGet() throws Exception {, +    server.enqueue(new MockResponse(), +        .addHeader("ETag: v1"), +        .setBody("A"));, +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +, +    // Seed the cache., +    URL url = server.getUrl("/");, +    assertEquals("A", get(url).body().string());, +, +    final AtomicReference<String> ifNoneMatch = new AtomicReference<>();, +    client.networkInterceptors().add(new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        ifNoneMatch.compareAndSet(null, chain.request().header("If-None-Match"));, +        return chain.proceed(chain.request());, +      }, +    });, +, +    // Confirm the value is cached and intercepted., +    assertEquals("A", get(url).body().string());, +    assertEquals("v1", ifNoneMatch.get());, +  }, +, +  @Test public void networkInterceptorNotInvokedForFullyCached() throws Exception {, +    server.enqueue(new MockResponse(), +        .addHeader("Cache-Control: max-age=60"), +        .setBody("A"));, +, +    // Seed the cache., +    URL url = server.getUrl("/");, +    assertEquals("A", get(url).body().string());, +, +    // Confirm the interceptor isn't exercised., +    client.networkInterceptors().add(new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        throw new AssertionError();, +      }, +    });, +    assertEquals("A", get(url).body().string());, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +import com.squareup.okhttp.Interceptor;, +  @Test public void interceptorsNotInvoked() throws Exception {, +    Interceptor interceptor = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        throw new AssertionError();, +      }, +    };, +    client.client().interceptors().add(interceptor);, +    client.client().networkInterceptors().add(interceptor);, +, +    server.enqueue(new MockResponse().setBody("abc"));]