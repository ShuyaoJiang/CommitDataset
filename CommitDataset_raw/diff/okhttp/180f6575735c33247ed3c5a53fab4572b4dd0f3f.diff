[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java, +  @Rule public TemporaryFolder tempDir = new TemporaryFolder();, +    cacheDir = tempDir.newFolder("DiskLruCacheTest");, +    for (File file : cacheDir.listFiles()) {, +      file.delete();, +    }, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, Integer.MAX_VALUE);, +    cache.close();, +  static class X<T> {, +    private T t;, +, +    public X(T t) {, +      this.t = t;, +    }, +  }, +, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, Integer.MAX_VALUE);, +    DiskLruCache cache2 = DiskLruCache.open(cacheDir, appVersion, 2, Integer.MAX_VALUE);, +    DiskLruCache.Snapshot snapshot = cache2.get("k1");, +    cache2.close();, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, Integer.MAX_VALUE);, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, Integer.MAX_VALUE);, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, Integer.MAX_VALUE);, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, Integer.MAX_VALUE);, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, Integer.MAX_VALUE);, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, Integer.MAX_VALUE);, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, Integer.MAX_VALUE);, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, Integer.MAX_VALUE);, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, Integer.MAX_VALUE);, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, Integer.MAX_VALUE);, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, 10);, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, 20);, +    assertEquals(1, cache.executorService.getQueue().size());, +    cache.executorService.purge();, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, 10);, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, 10);, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, 10);, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, 10);, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, 10);, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, 10);, +    long lastJournalLength = 0;, +    while (true) {, +      long journalLength = journalFile.length();, +      if (journalLength < lastJournalLength) {, +        System.out, +            .printf("Journal compacted from %s bytes to %s bytes\n", lastJournalLength,, +                journalLength);, +        break; // Test passed!, +      }, +      lastJournalLength = journalLength;, +    long lastJournalLength = 0;, +    while (true) {, +      long journalLength = journalFile.length();, +      if (journalLength < lastJournalLength) {, +        System.out, +            .printf("Journal compacted from %s bytes to %s bytes\n", lastJournalLength,, +                journalLength);, +        break;, +      lastJournalLength = journalLength;, +    }, +    long lastJournalLength = 0;, +    while (true) {, +      long journalLength = journalFile.length();, +      cache = DiskLruCache.open(cacheDir, appVersion, 2, Integer.MAX_VALUE);, +      if (journalLength < lastJournalLength) {, +        System.out, +            .printf("Journal compacted from %s bytes to %s bytes\n", lastJournalLength,, +                journalLength);, +        break; // Test passed!, +      }, +      lastJournalLength = journalLength;, +    long lastJournalLength = 0;, +    while (true) {, +      long journalLength = journalFile.length();, +      cache = DiskLruCache.open(cacheDir, appVersion, 2, Integer.MAX_VALUE);, +      if (journalLength < lastJournalLength) {, +        System.out, +            .printf("Journal compacted from %s bytes to %s bytes\n", lastJournalLength,, +                journalLength);, +        break;, +      }, +      lastJournalLength = journalLength;, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, Integer.MAX_VALUE);, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, Integer.MAX_VALUE);, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, 10);, +    cache = DiskLruCache.open(cacheDir, appVersion, 2, 10);, +    assertFalse((getCleanFile("g1", 0)).exists());, +    assertFalse((getCleanFile("g1", 1)).exists());, +    assertFalse((getCleanFile("g2", 0)).exists());, +    assertFalse((getCleanFile("g2", 1)).exists());, +    assertFalse((new File(cacheDir, "otherFile0")).exists());, +    assertFalse((new File(cacheDir, "dir1")).exists());, +    assertFalse((getCleanFile(key, 0)).exists());, +    assertFalse((getCleanFile(key, 1)).exists());, +    assertFalse((getDirtyFile(key, 0)).exists());, +    assertFalse((getDirtyFile(key, 1)).exists());, +    assertTrue((getCleanFile(key, 0)).exists());, +    assertTrue((getCleanFile(key, 1)).exists());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java, +  @Rule public TemporaryFolder tempDir = new TemporaryFolder();]