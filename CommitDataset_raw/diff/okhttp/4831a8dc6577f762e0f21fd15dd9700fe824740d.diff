[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +  public static int getDefaultPort(String protocol) {, +    if ("http".equals(protocol)) return 80;, +    if ("https".equals(protocol)) return 443;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +  public static int getDefaultPort(String protocol) {, +    if ("http".equals(protocol)) return 80;, +    if ("https".equals(protocol)) return 443;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +      HttpTransport.writeRequest(out, request.headers(), requestLine);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +  public static int getDefaultPort(String protocol) {, +    if ("http".equals(protocol)) return 80;, +    if ("https".equals(protocol)) return 443;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +      HttpTransport.writeRequest(out, request.headers(), requestLine);, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import com.squareup.okhttp.internal.http.Headers;, +    private final Headers varyHeaders;, +    private final Headers responseHeaders;, +        Headers.Builder varyHeadersBuilder = new Headers.Builder();, +        Headers.Builder responseHeadersBuilder = new Headers.Builder();, +      this.varyHeaders = response.request().headers().getAll(response.getVaryFields());, +      this.responseHeaders = response.headers();, +          .headers(responseHeaders), +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +  public static int getDefaultPort(String protocol) {, +    if ("http".equals(protocol)) return 80;, +    if ("https".equals(protocol)) return 443;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +      HttpTransport.writeRequest(out, request.headers(), requestLine);, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import com.squareup.okhttp.internal.http.Headers;, +    private final Headers varyHeaders;, +    private final Headers responseHeaders;, +        Headers.Builder varyHeadersBuilder = new Headers.Builder();, +        Headers.Builder responseHeadersBuilder = new Headers.Builder();, +      this.varyHeaders = response.request().headers().getAll(response.getVaryFields());, +      this.responseHeaders = response.headers();, +          .headers(responseHeaders), +++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java, +import com.squareup.okhttp.internal.http.Headers;, +  private final Headers headers;, +  Headers headers() {, +        .headers(headers), +  public Headers getHeaders() {, +    public ParsedHeaders(Headers headers) {, +    private Headers.Builder headers = new Headers.Builder();, +    public Builder headers(Headers headers) {, +      this.headers = headers.newBuilder();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +  public static int getDefaultPort(String protocol) {, +    if ("http".equals(protocol)) return 80;, +    if ("https".equals(protocol)) return 443;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +      HttpTransport.writeRequest(out, request.headers(), requestLine);, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import com.squareup.okhttp.internal.http.Headers;, +    private final Headers varyHeaders;, +    private final Headers responseHeaders;, +        Headers.Builder varyHeadersBuilder = new Headers.Builder();, +        Headers.Builder responseHeadersBuilder = new Headers.Builder();, +      this.varyHeaders = response.request().headers().getAll(response.getVaryFields());, +      this.responseHeaders = response.headers();, +          .headers(responseHeaders), +++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java, +import com.squareup.okhttp.internal.http.Headers;, +  private final Headers headers;, +  Headers headers() {, +        .headers(headers), +  public Headers getHeaders() {, +    public ParsedHeaders(Headers headers) {, +    private Headers.Builder headers = new Headers.Builder();, +    public Builder headers(Headers headers) {, +      this.headers = headers.newBuilder();, +++ b/okhttp/src/main/java/com/squareup/okhttp/Response.java, +import com.squareup.okhttp.internal.http.Headers;, +  private final Headers headers;, +  public Headers headers() {, +        .headers(headers), +  public boolean varyMatches(Headers varyHeaders, Request newRequest) {, +    Headers.Builder result = new Headers.Builder();, +    return newBuilder().headers(result.build()).build();, +    private ParsedHeaders(Headers headers) {, +    private Headers.Builder headers = new Headers.Builder();, +    public Builder headers(Headers headers) {, +      this.headers = headers.newBuilder();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +  public static int getDefaultPort(String protocol) {, +    if ("http".equals(protocol)) return 80;, +    if ("https".equals(protocol)) return 443;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +      HttpTransport.writeRequest(out, request.headers(), requestLine);, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import com.squareup.okhttp.internal.http.Headers;, +    private final Headers varyHeaders;, +    private final Headers responseHeaders;, +        Headers.Builder varyHeadersBuilder = new Headers.Builder();, +        Headers.Builder responseHeadersBuilder = new Headers.Builder();, +      this.varyHeaders = response.request().headers().getAll(response.getVaryFields());]