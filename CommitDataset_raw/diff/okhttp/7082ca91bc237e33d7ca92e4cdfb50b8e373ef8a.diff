[+++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import java.util.Arrays;, +import java.util.Objects;, +  @Test public void equalsAndHashCode() throws Exception {, +    List<String> cookieStrings = Arrays.asList(, +        "a=b; Path=/c; Domain=example.com; Max-Age=5; Secure; HttpOnly",, +        "a= ; Path=/c; Domain=example.com; Max-Age=5; Secure; HttpOnly",, +        "a=b;          Domain=example.com; Max-Age=5; Secure; HttpOnly",, +        "a=b; Path=/c;                     Max-Age=5; Secure; HttpOnly",, +        "a=b; Path=/c; Domain=example.com;            Secure; HttpOnly",, +        "a=b; Path=/c; Domain=example.com; Max-Age=5;         HttpOnly",, +        "a=b; Path=/c; Domain=example.com; Max-Age=5; Secure;         ", +    );, +    for (String stringA : cookieStrings) {, +      Cookie cookieA = Cookie.parse(0, url, stringA);, +      for (String stringB : cookieStrings) {, +        Cookie cookieB = Cookie.parse(0, url, stringB);, +        if (Objects.equals(stringA, stringB)) {, +          assertEquals(cookieA.hashCode(), cookieB.hashCode());, +          assertEquals(cookieA, cookieB);, +        } else {, +          assertFalse(cookieA.hashCode() == cookieB.hashCode());, +          assertFalse(cookieA.equals(cookieB));, +        }, +      }, +      assertFalse(cookieA.equals(null));, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import java.util.Arrays;, +import java.util.Objects;, +  @Test public void equalsAndHashCode() throws Exception {, +    List<String> cookieStrings = Arrays.asList(, +        "a=b; Path=/c; Domain=example.com; Max-Age=5; Secure; HttpOnly",, +        "a= ; Path=/c; Domain=example.com; Max-Age=5; Secure; HttpOnly",, +        "a=b;          Domain=example.com; Max-Age=5; Secure; HttpOnly",, +        "a=b; Path=/c;                     Max-Age=5; Secure; HttpOnly",, +        "a=b; Path=/c; Domain=example.com;            Secure; HttpOnly",, +        "a=b; Path=/c; Domain=example.com; Max-Age=5;         HttpOnly",, +        "a=b; Path=/c; Domain=example.com; Max-Age=5; Secure;         ", +    );, +    for (String stringA : cookieStrings) {, +      Cookie cookieA = Cookie.parse(0, url, stringA);, +      for (String stringB : cookieStrings) {, +        Cookie cookieB = Cookie.parse(0, url, stringB);, +        if (Objects.equals(stringA, stringB)) {, +          assertEquals(cookieA.hashCode(), cookieB.hashCode());, +          assertEquals(cookieA, cookieB);, +        } else {, +          assertFalse(cookieA.hashCode() == cookieB.hashCode());, +          assertFalse(cookieA.equals(cookieB));, +        }, +      }, +      assertFalse(cookieA.equals(null));, +    }, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Cookie.java, +, +  @Override public boolean equals(Object other) {, +    if (!(other instanceof Cookie)) return false;, +    Cookie that = (Cookie) other;, +    return that.name.equals(name), +        && that.value.equals(value), +        && that.domain.equals(domain), +        && that.path.equals(path), +        && that.expiresAt == expiresAt, +        && that.secure == secure, +        && that.httpOnly == httpOnly, +        && that.persistent == persistent, +        && that.hostOnly == hostOnly;, +  }, +, +  @Override public int hashCode() {, +    int hash = 17;, +    hash = 31 * hash + name.hashCode();, +    hash = 31 * hash + value.hashCode();, +    hash = 31 * hash + domain.hashCode();, +    hash = 31 * hash + path.hashCode();, +    hash = 31 * hash + (int) (expiresAt ^ (expiresAt >>> 32));, +    hash = 31 * hash + (secure ? 0 : 1);, +    hash = 31 * hash + (httpOnly ? 0 : 1);, +    hash = 31 * hash + (persistent ? 0 : 1);, +    hash = 31 * hash + (hostOnly ? 0 : 1);, +    return hash;, +  }]