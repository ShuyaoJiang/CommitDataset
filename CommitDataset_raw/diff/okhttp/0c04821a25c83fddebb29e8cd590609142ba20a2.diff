[+++ b/README.md, +A library for testing HTTP, HTTPS, and HTTP/2 clients., +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2 so that code can be shared., +++ b/README.md, +A library for testing HTTP, HTTPS, and HTTP/2 clients., +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2 so that code can be shared., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +  /** Don't combine chunked with HTTP_2; that's not allowed. */, +++ b/README.md, +A library for testing HTTP, HTTPS, and HTTP/2 clients., +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2 so that code can be shared., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +  /** Don't combine chunked with HTTP_2; that's not allowed. */, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import java.util.Collections;, +/** A basic HTTP_2 server that serves the contents of a local directory. */, +        if (protocol != Protocol.HTTP_2) {, +    Platform.get().configureTlsExtensions(sslSocket, null,, +        Collections.singletonList(Protocol.HTTP_2));, +++ b/README.md, +A library for testing HTTP, HTTPS, and HTTP/2 clients., +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2 so that code can be shared., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +  /** Don't combine chunked with HTTP_2; that's not allowed. */, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import java.util.Collections;, +/** A basic HTTP_2 server that serves the contents of a local directory. */, +        if (protocol != Protocol.HTTP_2) {, +    Platform.get().configureTlsExtensions(sslSocket, null,, +        Collections.singletonList(Protocol.HTTP_2));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +  private List<Protocol> protocols = Util.immutableList(Protocol.HTTP_2, Protocol.HTTP_1_1);, +        if (protocol == Protocol.HTTP_2) {, +        } else if (protocol != Protocol.HTTP_1_1) {, +          throw new AssertionError();, +      String requestLine = method + ' ' + path + " HTTP/1.1";, +      List<Integer> chunkSizes = Collections.emptyList(); // No chunked encoding for HTTP/2., +      List<Header> http2Headers = new ArrayList<>();, +      http2Headers.add(new Header(Header.RESPONSE_STATUS, statusParts[1]));, +        http2Headers.add(new Header(headers.name(i), headers.value(i)));, +      stream.reply(http2Headers, closeStreamAfterHeaders);, +        pushedHeaders.add(new Header(Header.TARGET_AUTHORITY, url(pushPromise.path()).host()));, +        List<Integer> chunkSizes = Collections.emptyList(); // No chunked encoding for HTTP/2., +++ b/README.md, +A library for testing HTTP, HTTPS, and HTTP/2 clients., +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2 so that code can be shared., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +  /** Don't combine chunked with HTTP_2; that's not allowed. */, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import java.util.Collections;, +/** A basic HTTP_2 server that serves the contents of a local directory. */, +        if (protocol != Protocol.HTTP_2) {, +    Platform.get().configureTlsExtensions(sslSocket, null,, +        Collections.singletonList(Protocol.HTTP_2));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +  private List<Protocol> protocols = Util.immutableList(Protocol.HTTP_2, Protocol.HTTP_1_1);, +        if (protocol == Protocol.HTTP_2) {, +        } else if (protocol != Protocol.HTTP_1_1) {, +          throw new AssertionError();, +      String requestLine = method + ' ' + path + " HTTP/1.1";, +      List<Integer> chunkSizes = Collections.emptyList(); // No chunked encoding for HTTP/2., +      List<Header> http2Headers = new ArrayList<>();, +      http2Headers.add(new Header(Header.RESPONSE_STATUS, statusParts[1]));, +        http2Headers.add(new Header(headers.name(i), headers.value(i)));, +      stream.reply(http2Headers, closeStreamAfterHeaders);, +        pushedHeaders.add(new Header(Header.TARGET_AUTHORITY, url(pushPromise.path()).host()));, +        List<Integer> chunkSizes = Collections.emptyList(); // No chunked encoding for HTTP/2., +++ b/okcurl/README.md, +HTTP/2) against web servers., +++ b/README.md, +A library for testing HTTP, HTTPS, and HTTP/2 clients., +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2 so that code can be shared., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java, +  /** Don't combine chunked with HTTP_2; that's not allowed. */, +++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java, +import java.util.Collections;, +/** A basic HTTP_2 server that serves the contents of a local directory. */, +        if (protocol != Protocol.HTTP_2) {, +    Platform.get().configureTlsExtensions(sslSocket, null,, +        Collections.singletonList(Protocol.HTTP_2));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +  private List<Protocol> protocols = Util.immutableList(Protocol.HTTP_2, Protocol.HTTP_1_1);, +        if (protocol == Protocol.HTTP_2) {, +        } else if (protocol != Protocol.HTTP_1_1) {, +          throw new AssertionError();, +      String requestLine = method + ' ' + path + " HTTP/1.1";, +      List<Integer> chunkSizes = Collections.emptyList(); // No chunked encoding for HTTP/2., +      List<Header> http2Headers = new ArrayList<>();, +      http2Headers.add(new Header(Header.RESPONSE_STATUS, statusParts[1]));, +        http2Headers.add(new Header(headers.name(i), headers.value(i)));, +      stream.reply(http2Headers, closeStreamAfterHeaders);, +        pushedHeaders.add(new Header(Header.TARGET_AUTHORITY, url(pushPromise.path()).host()));, +        List<Integer> chunkSizes = Collections.emptyList(); // No chunked encoding for HTTP/2., +++ b/okcurl/README.md, +HTTP/2) against web servers., +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/README.md, +A library for testing HTTP, HTTPS, and HTTP/2 clients., +MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2 so that code can be shared., +++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java]