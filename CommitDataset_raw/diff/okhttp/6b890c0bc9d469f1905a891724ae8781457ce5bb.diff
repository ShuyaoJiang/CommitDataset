[+++ b/.travis.yml, +  - ./mvnw dependency:resolve -B, +  - ./mvnw checkstyle:check -B, +  - ./mvnw test -B, +  - ./mvnw javadoc:jar source:jar -B, +++ b/.travis.yml, +  - ./mvnw dependency:resolve -B, +  - ./mvnw checkstyle:check -B, +  - ./mvnw test -B, +  - ./mvnw javadoc:jar source:jar -B, +++ b/CHANGELOG.md, +_RELEASE TBD_, +++ b/.travis.yml, +  - ./mvnw dependency:resolve -B, +  - ./mvnw checkstyle:check -B, +  - ./mvnw test -B, +  - ./mvnw javadoc:jar source:jar -B, +++ b/CHANGELOG.md, +_RELEASE TBD_, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.13.1"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.13.1"), +++ b/.travis.yml, +  - ./mvnw dependency:resolve -B, +  - ./mvnw checkstyle:check -B, +  - ./mvnw test -B, +  - ./mvnw javadoc:jar source:jar -B, +++ b/CHANGELOG.md, +_RELEASE TBD_, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.13.1"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.13.1"), +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/.travis.yml, +  - ./mvnw dependency:resolve -B, +  - ./mvnw checkstyle:check -B, +  - ./mvnw test -B, +  - ./mvnw javadoc:jar source:jar -B, +++ b/CHANGELOG.md, +_RELEASE TBD_, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.13.1"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.13.1"), +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.util.Arrays;, +import okhttp3.internal.Util;, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis >= 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(server.getPort() > 0).isTrue();, +      assertThat(e.getMessage().contains("refused")).isTrue();, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/.travis.yml, +  - ./mvnw dependency:resolve -B, +  - ./mvnw checkstyle:check -B, +  - ./mvnw test -B, +  - ./mvnw javadoc:jar source:jar -B, +++ b/CHANGELOG.md, +_RELEASE TBD_, +++ b/README.md, +implementation("com.squareup.okhttp3:okhttp:3.13.1"), +testImplementation("com.squareup.okhttp3:mockwebserver:3.13.1"), +++ b/mockwebserver/pom.xml, +    <version>3.14.0-SNAPSHOT</version>, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.util.Arrays;, +import okhttp3.internal.Util;, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis >= 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(server.getPort() > 0).isTrue();, +      assertThat(e.getMessage().contains("refused")).isTrue();, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    List<Header> responseHeaders = Arrays.asList(]