[+++ b/okhttp-tests/src/test/java/okhttp3/NewWebSocketTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import java.net.ProtocolException;, +import java.util.Random;, +import java.util.logging.Logger;, +import okhttp3.internal.tls.SslClient;, +import okhttp3.internal.ws.NewWebSocketRecorder;, +import okhttp3.internal.ws.RealNewWebSocket;, +import okhttp3.internal.ws.WebSocketRecorder;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okio.ByteString;, +import org.junit.After;, +import org.junit.Ignore;, +import org.junit.Rule;, +import org.junit.Test;, +, +import static okhttp3.TestUtil.defaultClient;, +import static okhttp3.WebSocket.TEXT;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.fail;, +, +public final class NewWebSocketTest {, +  @Rule public final MockWebServer webServer = new MockWebServer();, +, +  private final SslClient sslClient = SslClient.localhost();, +  private final NewWebSocketRecorder clientListener = new NewWebSocketRecorder("client");, +  private final WebSocketRecorder serverListener = new WebSocketRecorder("server");, +  private final Random random = new Random(0);, +  private OkHttpClient client = defaultClient().newBuilder(), +      .addInterceptor(new Interceptor() {, +        @Override public Response intercept(Chain chain) throws IOException {, +          Response response = chain.proceed(chain.request());, +          assertNotNull(response.body()); // Ensure application interceptors never see a null body., +          return response;, +        }, +      }), +      .build();, +, +  @After public void tearDown() {, +    clientListener.assertExhausted();, +  }, +, +  @Test public void textMessage() throws IOException {, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +    NewWebSocket client = enqueueClientWebSocket();, +, +    clientListener.assertOpen();, +    serverListener.assertOpen();, +, +    client.send("Hello, WebSockets!");, +    serverListener.assertTextMessage("Hello, WebSockets!");, +  }, +, +  @Test public void binaryMessage() throws IOException {, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +    RealNewWebSocket client = enqueueClientWebSocket();, +, +    clientListener.assertOpen();, +    serverListener.assertOpen();, +, +    client.send(ByteString.encodeUtf8("Hello!"));, +    serverListener.assertBinaryMessage(new byte[] {'H', 'e', 'l', 'l', 'o', '!'});, +  }, +, +  @Test public void nullStringThrows() throws IOException {, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +    RealNewWebSocket client = enqueueClientWebSocket();, +, +    clientListener.assertOpen();, +    try {, +      client.send((String) null);, +      fail();, +    } catch (NullPointerException e) {, +      assertEquals("text == null", e.getMessage());, +    }, +  }, +, +  @Test public void nullByteStringThrows() throws IOException {, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +    RealNewWebSocket client = enqueueClientWebSocket();, +]