[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.SynchronousQueue;, +  @Test public void getWithRequestBody() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    try {, +      new Request.Builder().method("GET", RequestBody.create(MediaType.parse("text/plain"), "abc"));, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @Test public void asyncResponseCanBeConsumedLater() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setBody("def"));, +    server.play();, +, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .header("User-Agent", "SyncApiTest"), +        .build();, +, +    final BlockingQueue<Response> responseRef = new SynchronousQueue<Response>();, +    client.newCall(request).enqueue(new Callback() {, +      @Override public void onFailure(Request request, Throwable throwable) {, +        throw new AssertionError();, +      }, +, +      @Override public void onResponse(Response response) throws IOException {, +        try {, +          responseRef.put(response);, +        } catch (InterruptedException e) {, +          throw new AssertionError();, +        }, +      }, +    });, +, +    Response response = responseRef.take();, +    assertEquals(200, response.code());, +    assertEquals("abc", response.body().string());, +, +    // Make another request just to confirm that that connection can be reused..., +    executeSynchronously(new Request.Builder().url(server.getUrl("/")).build()).assertBody("def");, +    assertEquals(0, server.takeRequest().getSequenceNumber()); // New connection., +    assertEquals(1, server.takeRequest().getSequenceNumber()); // Connection reused., +, +    // ... even before we close the response body!, +    response.body().close();, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.SynchronousQueue;, +  @Test public void getWithRequestBody() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    try {, +      new Request.Builder().method("GET", RequestBody.create(MediaType.parse("text/plain"), "abc"));, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @Test public void asyncResponseCanBeConsumedLater() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setBody("def"));, +    server.play();, +, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .header("User-Agent", "SyncApiTest"), +        .build();, +, +    final BlockingQueue<Response> responseRef = new SynchronousQueue<Response>();, +    client.newCall(request).enqueue(new Callback() {, +      @Override public void onFailure(Request request, Throwable throwable) {, +        throw new AssertionError();, +      }, +, +      @Override public void onResponse(Response response) throws IOException {, +        try {, +          responseRef.put(response);, +        } catch (InterruptedException e) {, +          throw new AssertionError();, +        }, +      }, +    });, +, +    Response response = responseRef.take();, +    assertEquals(200, response.code());, +    assertEquals("abc", response.body().string());, +, +    // Make another request just to confirm that that connection can be reused..., +    executeSynchronously(new Request.Builder().url(server.getUrl("/")).build()).assertBody("def");, +    assertEquals(0, server.takeRequest().getSequenceNumber()); // New connection., +    assertEquals(1, server.takeRequest().getSequenceNumber()); // Connection reused., +]