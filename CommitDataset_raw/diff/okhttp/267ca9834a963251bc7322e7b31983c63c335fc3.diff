[+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpConnection.java, +      String statusLineString = source.readUtf8Line(true);, +    for (String line; (line = source.readUtf8Line(true)).length() != 0; ) {, +        source.readUtf8Line(true);, +      String chunkSizeString = source.readUtf8Line(true);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpConnection.java, +      String statusLineString = source.readUtf8Line(true);, +    for (String line; (line = source.readUtf8Line(true)).length() != 0; ) {, +        source.readUtf8Line(true);, +      String chunkSizeString = source.readUtf8Line(true);, +++ b/okio/src/main/java/okio/BufferedSource.java, +  /** Removes a byte from the front of this buffer and returns it. */, +  /** Removes a Big-Endian short from the front of this buffer and returns it. */, +  /** Removes a Little-Endian short from the front of this buffer and returns it. */, +  /** Removes a Big-Endian int from the front of this buffer and returns it. */, +  /** Removes a Little-Endian int from the front of this buffer and returns it. */, +  /** Removes {@code byteCount} bytes from this and returns them as a byte string. */, +  /**, +   * Removes {@code byteCount} bytes from this, decodes them as UTF-8 and, +   * returns the string., +   */, +   * Removes and returns characters up to but not including the next line break., +   * A line break is either {@code "\n"} or {@code "\r\n"}; these characters are, +   * not included in the result., +   *, +   * <p>This method supports two ways to handle the end of the stream:, +   * <ul>, +   *   <li><strong>Throw on EOF.</strong> Every call must consume either '\r\n', +   *       or '\n'. If these characters are absent in the stream, an {@link, +   *       java.io.EOFException} is thrown. Use this for machine-generated data, +   *       where a missing line break implies truncated input., +   *   <li><strong>Don't throw, just like BufferedReader.</strong> If the source, +   *       doesn't end with a line break then an implicit line break is assumed., +   *       Null is returned once the source is exhausted. Use this for, +   *       human-generated data, where a trailing line breaks are optional., +   * </ul>, +   */, +  String readUtf8Line(boolean throwOnEof) throws IOException;, +, +  /**, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpConnection.java, +      String statusLineString = source.readUtf8Line(true);, +    for (String line; (line = source.readUtf8Line(true)).length() != 0; ) {, +        source.readUtf8Line(true);, +      String chunkSizeString = source.readUtf8Line(true);, +++ b/okio/src/main/java/okio/BufferedSource.java, +  /** Removes a byte from the front of this buffer and returns it. */, +  /** Removes a Big-Endian short from the front of this buffer and returns it. */, +  /** Removes a Little-Endian short from the front of this buffer and returns it. */, +  /** Removes a Big-Endian int from the front of this buffer and returns it. */, +  /** Removes a Little-Endian int from the front of this buffer and returns it. */, +  /** Removes {@code byteCount} bytes from this and returns them as a byte string. */, +  /**, +   * Removes {@code byteCount} bytes from this, decodes them as UTF-8 and, +   * returns the string., +   */, +   * Removes and returns characters up to but not including the next line break., +   * A line break is either {@code "\n"} or {@code "\r\n"}; these characters are, +   * not included in the result., +   *, +   * <p>This method supports two ways to handle the end of the stream:, +   * <ul>, +   *   <li><strong>Throw on EOF.</strong> Every call must consume either '\r\n', +   *       or '\n'. If these characters are absent in the stream, an {@link, +   *       java.io.EOFException} is thrown. Use this for machine-generated data, +   *       where a missing line break implies truncated input., +   *   <li><strong>Don't throw, just like BufferedReader.</strong> If the source, +   *       doesn't end with a line break then an implicit line break is assumed., +   *       Null is returned once the source is exhausted. Use this for, +   *       human-generated data, where a trailing line breaks are optional., +   * </ul>, +   */, +  String readUtf8Line(boolean throwOnEof) throws IOException;, +, +  /**, +++ b/okio/src/main/java/okio/OkBuffer.java, +  @Override public String readUtf8Line(boolean throwOnEof) throws EOFException {, +    long newline = indexOf((byte) '\n');, +, +    if (newline == -1) {, +      if (throwOnEof) throw new EOFException();, +      return byteCount != 0 ? readUtf8((int) byteCount) : null;, +    }, +, +    if (newline > 0 && getByte(newline - 1) == '\r') {, +      // Read everything until '\r\n', then skip the '\r\n'., +      String result = readUtf8((int) (newline - 1));, +      skip(2);, +      return result;, +, +    } else {, +      // Read everything until '\n', then skip the '\n'., +      String result = readUtf8((int) (newline));, +      skip(1);, +      return result;, +    }, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpConnection.java, +      String statusLineString = source.readUtf8Line(true);]