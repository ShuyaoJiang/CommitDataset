[+++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/tls/HeldCertificate.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.mockwebserver.internal.tls;, +, +import java.math.BigInteger;, +import java.security.GeneralSecurityException;, +import java.security.KeyPair;, +import java.security.KeyPairGenerator;, +import java.security.SecureRandom;, +import java.security.Security;, +import java.security.cert.X509Certificate;, +import java.util.ArrayList;, +import java.util.Date;, +import java.util.List;, +import java.util.UUID;, +import javax.security.auth.x500.X500Principal;, +import org.bouncycastle.asn1.ASN1Encodable;, +import org.bouncycastle.asn1.DERSequence;, +import org.bouncycastle.asn1.x509.BasicConstraints;, +import org.bouncycastle.asn1.x509.GeneralName;, +import org.bouncycastle.asn1.x509.X509Extensions;, +import org.bouncycastle.jce.provider.BouncyCastleProvider;, +import org.bouncycastle.x509.X509V3CertificateGenerator;, +, +import static okhttp3.internal.Util.verifyAsIpAddress;, +, +/**, + * A certificate and its private key. This can be used on the server side by HTTPS servers, or on, + * the client side to verify those HTTPS servers. A held certificate can also be used to sign other, + * held certificates, as done in practice by certificate authorities., + */, +public final class HeldCertificate {, +  public final X509Certificate certificate;, +  public final KeyPair keyPair;, +, +  public HeldCertificate(X509Certificate certificate, KeyPair keyPair) {, +    this.certificate = certificate;, +    this.keyPair = keyPair;, +  }, +, +  public static final class Builder {, +    static {, +      Security.addProvider(new BouncyCastleProvider());, +    }, +, +    private final long duration = 1000L * 60 * 60 * 24; // One day., +    private String hostname;, +    private List<String> altNames = new ArrayList<>();, +    private String serialNumber = "1";, +    private KeyPair keyPair;, +    private HeldCertificate issuedBy;, +    private int maxIntermediateCas;, +, +    public Builder serialNumber(String serialNumber) {, +      this.serialNumber = serialNumber;, +      return this;, +    }, +, +    /**, +     * Set this certificate's name. Typically this is the URL hostname for TLS certificates. This is, +     * the CN (common name) in the certificate. Will be a random string if no value is provided., +     */, +    public Builder commonName(String hostname) {, +      this.hostname = hostname;, +      return this;, +    }, +, +    public Builder keyPair(KeyPair keyPair) {, +      this.keyPair = keyPair;, +      return this;, +    }, +, +    /**, +     * Set the certificate that signs this certificate. If unset, a self-signed certificate will be, +     * generated., +     */, +    public Builder issuedBy(HeldCertificate signedBy) {, +      this.issuedBy = signedBy;, +      return this;, +    }, +, +    /**, +     * Set this certificate to be a certificate authority, with up to {@code maxIntermediateCas}, +     * intermediate certificate authorities beneath it.]