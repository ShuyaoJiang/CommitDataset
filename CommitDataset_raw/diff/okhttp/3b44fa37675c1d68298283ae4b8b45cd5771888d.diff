[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.net.Proxy;, +import okhttp3.internal.http.RecordingProxySelector;, +    client.setDns(new SingleInetAddressDns()); // Prevent unexpected fallback addresses., +  @Test public void tlsTimeoutsNotRetried() throws Exception {, +    enableTls();, +  /**, +   * Make a request with two routes. The first route will time out because it's connecting via a, +   * null proxy server. The second will succeed., +   */, +  @Test public void connectTimeoutsAttemptsAlternateRoute() throws Exception {, +    InetSocketAddress nullServerAddress = startNullServer();, +, +    RecordingProxySelector proxySelector = new RecordingProxySelector();, +    proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, nullServerAddress));, +    proxySelector.proxies.add(server.toProxyAddress());, +, +    server.enqueue(new MockResponse(), +        .setBody("success!"));, +, +    client.setProxySelector(proxySelector);, +    client.setReadTimeout(100, TimeUnit.MILLISECONDS);, +, +    Request request = new Request.Builder().url("http://android.com/").build();, +    executeSynchronously(request), +        .assertCode(200), +        .assertBody("success!");, +  }, +, +    OkHttpClient nonRetryingClient = client.clone().setRetryOnConnectionFailure(false);, +    Call call = nonRetryingClient.newCall(new Request.Builder(), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.net.Proxy;, +import okhttp3.internal.http.RecordingProxySelector;, +    client.setDns(new SingleInetAddressDns()); // Prevent unexpected fallback addresses., +  @Test public void tlsTimeoutsNotRetried() throws Exception {, +    enableTls();, +  /**, +   * Make a request with two routes. The first route will time out because it's connecting via a, +   * null proxy server. The second will succeed., +   */, +  @Test public void connectTimeoutsAttemptsAlternateRoute() throws Exception {, +    InetSocketAddress nullServerAddress = startNullServer();, +, +    RecordingProxySelector proxySelector = new RecordingProxySelector();, +    proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, nullServerAddress));, +    proxySelector.proxies.add(server.toProxyAddress());, +, +    server.enqueue(new MockResponse(), +        .setBody("success!"));, +, +    client.setProxySelector(proxySelector);, +    client.setReadTimeout(100, TimeUnit.MILLISECONDS);, +, +    Request request = new Request.Builder().url("http://android.com/").build();, +    executeSynchronously(request), +        .assertCode(200), +        .assertBody("success!");, +  }, +, +    OkHttpClient nonRetryingClient = client.clone().setRetryOnConnectionFailure(false);, +    Call call = nonRetryingClient.newCall(new Request.Builder(), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    MockResponse response = new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP), +    server.enqueue(new MockResponse(), +        .setBody("This is the new location!"));, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.net.Proxy;, +import okhttp3.internal.http.RecordingProxySelector;, +    client.setDns(new SingleInetAddressDns()); // Prevent unexpected fallback addresses., +  @Test public void tlsTimeoutsNotRetried() throws Exception {, +    enableTls();, +  /**, +   * Make a request with two routes. The first route will time out because it's connecting via a, +   * null proxy server. The second will succeed., +   */, +  @Test public void connectTimeoutsAttemptsAlternateRoute() throws Exception {, +    InetSocketAddress nullServerAddress = startNullServer();, +, +    RecordingProxySelector proxySelector = new RecordingProxySelector();, +    proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, nullServerAddress));, +    proxySelector.proxies.add(server.toProxyAddress());, +, +    server.enqueue(new MockResponse(), +        .setBody("success!"));, +, +    client.setProxySelector(proxySelector);, +    client.setReadTimeout(100, TimeUnit.MILLISECONDS);, +, +    Request request = new Request.Builder().url("http://android.com/").build();, +    executeSynchronously(request), +        .assertCode(200), +        .assertBody("success!");, +  }, +, +    OkHttpClient nonRetryingClient = client.clone().setRetryOnConnectionFailure(false);, +    Call call = nonRetryingClient.newCall(new Request.Builder(), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    MockResponse response = new MockResponse()]