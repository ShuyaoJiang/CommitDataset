[+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RawHeaders.java, +      addLenient("", line);, +      addLenient(line.substring(0, index), line.substring(index + 1));, +    if (fieldName == null) throw new IllegalArgumentException("fieldname == null");, +    if (value == null) throw new IllegalArgumentException("value == null");, +    if (fieldName.length() == 0 || fieldName.indexOf('\0') != -1 || value.indexOf('\0') != -1) {, +      throw new IllegalArgumentException("Unexpected header: " + fieldName + ": " + value);, +    addLenient(fieldName, value);, +, +  /**, +   * Add a field with the specified value without any validation. Only, +   * appropriate for headers from the remote peer., +   */, +  private void addLenient(String fieldName, String value) {, +        for (String value : values) {, +          result.addLenient(fieldName, value);, +        }, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RawHeaders.java, +      addLenient("", line);, +      addLenient(line.substring(0, index), line.substring(index + 1));, +    if (fieldName == null) throw new IllegalArgumentException("fieldname == null");, +    if (value == null) throw new IllegalArgumentException("value == null");, +    if (fieldName.length() == 0 || fieldName.indexOf('\0') != -1 || value.indexOf('\0') != -1) {, +      throw new IllegalArgumentException("Unexpected header: " + fieldName + ": " + value);, +    addLenient(fieldName, value);, +, +  /**, +   * Add a field with the specified value without any validation. Only, +   * appropriate for headers from the remote peer., +   */, +  private void addLenient(String fieldName, String value) {, +        for (String value : values) {, +          result.addLenient(fieldName, value);, +        }, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +  @Test public void emptyResponseHeaderNameFromCacheIsLenient() throws Exception {, +    server.enqueue(new MockResponse(), +        .addHeader("Cache-Control: max-age=120"), +        .addHeader(": A"), +        .setBody("body"));, +    server.play();, +    HttpURLConnection connection = client.open(server.getUrl("/"));, +    assertEquals("A", connection.getHeaderField(""));, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RawHeaders.java, +      addLenient("", line);, +      addLenient(line.substring(0, index), line.substring(index + 1));, +    if (fieldName == null) throw new IllegalArgumentException("fieldname == null");, +    if (value == null) throw new IllegalArgumentException("value == null");, +    if (fieldName.length() == 0 || fieldName.indexOf('\0') != -1 || value.indexOf('\0') != -1) {, +      throw new IllegalArgumentException("Unexpected header: " + fieldName + ": " + value);, +    addLenient(fieldName, value);, +, +  /**, +   * Add a field with the specified value without any validation. Only, +   * appropriate for headers from the remote peer., +   */, +  private void addLenient(String fieldName, String value) {, +        for (String value : values) {, +          result.addLenient(fieldName, value);, +        }, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +  @Test public void emptyResponseHeaderNameFromCacheIsLenient() throws Exception {, +    server.enqueue(new MockResponse(), +        .addHeader("Cache-Control: max-age=120"), +        .addHeader(": A"), +        .setBody("body"));, +    server.play();, +    HttpURLConnection connection = client.open(server.getUrl("/"));, +    assertEquals("A", connection.getHeaderField(""));, +  }, +, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +    try {, +      urlConnection.setRequestProperty("NullValue", null);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +    try {, +      urlConnection.addRequestProperty("AnotherNullValue", null);, +      fail();, +    } catch (Exception expected) {, +    }, +  @Test public void emptyRequestHeaderValueIsAllowed() throws Exception {, +    server.enqueue(new MockResponse().setBody("body"));, +    server.play();, +    HttpURLConnection urlConnection = client.open(server.getUrl("/"));, +    urlConnection.addRequestProperty("B", "");, +    assertContent("body", urlConnection);, +    assertEquals("", urlConnection.getRequestProperty("B"));, +  @Test public void emptyResponseHeaderValueIsAllowed() throws Exception {, +    server.enqueue(new MockResponse().addHeader("A:").setBody("body"));, +    server.play();, +    HttpURLConnection urlConnection = client.open(server.getUrl("/"));, +    assertContent("body", urlConnection);, +    assertEquals("", urlConnection.getHeaderField("A"));, +  }, +, +  @Test public void emptyRequestHeaderNameIsStrict() throws Exception {]