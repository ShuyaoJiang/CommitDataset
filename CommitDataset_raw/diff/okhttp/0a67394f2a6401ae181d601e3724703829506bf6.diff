[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +  // NOTE: Fields are named 'client' and 'server' for cognitive simplicity. This differentiation has, +  private boolean clientConnectionCloseThrows;, +    String url = "http://example.com/websocket";, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener, url) {, +        if (clientConnectionCloseThrows) {, +          throw new IOException("Oops!");, +        }, +    server = new RealWebSocket(false, client2Server, server2client, random, serverListener, url) {, +, +  @Test public void peerConnectionCloseThrowingDoesNotPropagate() throws IOException {, +    clientConnectionCloseThrows = true;, +, +    server.close(1000, "Bye!");, +    client.readMessage();, +    clientListener.assertClose(1000, "Bye!");, +    assertTrue(clientConnectionClosed);, +, +    server.readMessage();, +    serverListener.assertClose(1000, "Bye!");, +  }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +  // NOTE: Fields are named 'client' and 'server' for cognitive simplicity. This differentiation has, +  private boolean clientConnectionCloseThrows;, +    String url = "http://example.com/websocket";, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener, url) {, +        if (clientConnectionCloseThrows) {, +          throw new IOException("Oops!");, +        }, +    server = new RealWebSocket(false, client2Server, server2client, random, serverListener, url) {, +, +  @Test public void peerConnectionCloseThrowingDoesNotPropagate() throws IOException {, +    clientConnectionCloseThrows = true;, +, +    server.close(1000, "Bye!");, +    client.readMessage();, +    clientListener.assertClose(1000, "Bye!");, +    assertTrue(clientConnectionClosed);, +, +    server.readMessage();, +    serverListener.assertClose(1000, "Bye!");, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/RequestBody.java, +, +        return content.length;, +        sink.write(content);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +  // NOTE: Fields are named 'client' and 'server' for cognitive simplicity. This differentiation has, +  private boolean clientConnectionCloseThrows;, +    String url = "http://example.com/websocket";, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener, url) {, +        if (clientConnectionCloseThrows) {, +          throw new IOException("Oops!");, +        }, +    server = new RealWebSocket(false, client2Server, server2client, random, serverListener, url) {, +, +  @Test public void peerConnectionCloseThrowingDoesNotPropagate() throws IOException {, +    clientConnectionCloseThrows = true;, +, +    server.close(1000, "Bye!");, +    client.readMessage();, +    clientListener.assertClose(1000, "Bye!");, +    assertTrue(clientConnectionClosed);, +, +    server.readMessage();, +    serverListener.assertClose(1000, "Bye!");, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/RequestBody.java, +, +        return content.length;, +        sink.write(content);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java, + * Access to Platform-specific features necessary for SPDY and advanced TLS., + * This includes Server Name Indication (SNI) and session tickets., + * <h3>ALPN</h3>, + * This class uses TLS extension ALPN to negotiate the upgrade from HTTP/1.1, + * (the default protocol to use with TLS on port 443) to either SPDY or HTTP/2., + * <p>ALPN (Application Layer Protocol Negotiation) first arrived in Android 4.4,, + * ALPN is supported on OpenJDK 7 and 8 (via the Jetty ALPN-boot library)., +      } catch (ClassNotFoundException ignored) {, +      // Attempt to find Android 4.0+ APIs., +      } catch (NoSuchMethodException ignored) {, +      return new Android(trafficStatsTagSocket, trafficStatsUntagSocket);, +    try { // to find the Jetty's ALPN extension for OpenJDK., +    } catch (ClassNotFoundException ignored) {, +    } catch (NoSuchMethodException ignored) { // The ALPN version isn't what we expect.]