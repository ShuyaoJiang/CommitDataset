[+++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpConnection.java, +import java.io.Closeable;, + * which isn't so much a connection as a single request/response exchange., + *, + * <h3>Modern TLS</h3>, + * There are tradeoffs when selecting which options to include when negotiating, + * a secure connection to a remote host. Newer TLS options are quite useful:, + * <ul>, + *   <li>Server Name Indication (SNI) enables one IP address to negotiate secure, + *       connections for multiple domain names., + *   <li>Next Protocol Negotiation (NPN) enables the HTTPS port (443) to be used, + *       for both HTTP and SPDY transports., + * </ul>, + * Unfortunately, older HTTPS servers refuse to connect when such options are, + * presented. Rather than avoiding these options entirely, this class allows a, + * connection to be attempted with modern options and then retried without them, + * should the attempt fail., +public final class HttpConnection implements Closeable {, +    private final Address address;, +    private final Proxy proxy;, +    private final InetSocketAddress inetSocketAddress;, +    private final boolean modernTls;, +    private int httpMinorVersion = 1; // Assume HTTP/1.1, +    public HttpConnection(Address address, Proxy proxy, InetSocketAddress inetSocketAddress,, +            boolean modernTls) {, +        this.modernTls = modernTls;, +        platform.makeTlsTolerant(sslSocket, address.uriHost, modernTls);, +        if (modernTls) {, +        if (modernTls, +    @Override public void close() throws IOException {, +        socket.close();, +    public InetSocketAddress getSocketAddress() {, +        return inetSocketAddress;, +    }, +, +    public boolean isModernTls() {, +        return modernTls;, +    }, +, +    /**, +     * Returns the socket that this connection uses, or null if the connection, +     * is not currently connected., +     */, +    public Object newTransport(HttpEngine httpEngine) throws IOException {, +    /**, +     * Returns the minor HTTP version that should be used for future requests on, +     * this connection. Either 0 for HTTP/1.0, or 1 for HTTP/1.1. The default, +     * value is 1 for new connections., +     */, +    public int getHttpMinorVersion() {, +        return httpMinorVersion;, +    }, +, +    public void setHttpMinorVersion(int httpMinorVersion) {, +        this.httpMinorVersion = httpMinorVersion;, +    }, +, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpConnection.java, +import java.io.Closeable;, + * which isn't so much a connection as a single request/response exchange., + *, + * <h3>Modern TLS</h3>, + * There are tradeoffs when selecting which options to include when negotiating, + * a secure connection to a remote host. Newer TLS options are quite useful:, + * <ul>, + *   <li>Server Name Indication (SNI) enables one IP address to negotiate secure, + *       connections for multiple domain names., + *   <li>Next Protocol Negotiation (NPN) enables the HTTPS port (443) to be used, + *       for both HTTP and SPDY transports., + * </ul>, + * Unfortunately, older HTTPS servers refuse to connect when such options are, + * presented. Rather than avoiding these options entirely, this class allows a, + * connection to be attempted with modern options and then retried without them, + * should the attempt fail., +public final class HttpConnection implements Closeable {, +    private final Address address;, +    private final Proxy proxy;, +    private final InetSocketAddress inetSocketAddress;, +    private final boolean modernTls;, +    private int httpMinorVersion = 1; // Assume HTTP/1.1, +    public HttpConnection(Address address, Proxy proxy, InetSocketAddress inetSocketAddress,, +            boolean modernTls) {, +        this.modernTls = modernTls;, +        platform.makeTlsTolerant(sslSocket, address.uriHost, modernTls);, +        if (modernTls) {, +        if (modernTls, +    @Override public void close() throws IOException {, +        socket.close();, +    public InetSocketAddress getSocketAddress() {, +        return inetSocketAddress;, +    }, +, +    public boolean isModernTls() {, +        return modernTls;, +    }, +, +    /**, +     * Returns the socket that this connection uses, or null if the connection, +     * is not currently connected., +     */]