[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import static java.lang.Thread.UncaughtExceptionHandler;, +  private UncaughtExceptionHandler defaultUncaughtExceptionHandler;, +    defaultUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();, +    Thread.setDefaultUncaughtExceptionHandler(defaultUncaughtExceptionHandler);, +  @Test public void onResponseThrowsIsHandledByUncaughtExceptionHandler() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .build();, +, +    final AtomicReference<Throwable> uncaughtExceptionRef = new AtomicReference<Throwable>();, +    final CountDownLatch latch = new CountDownLatch(1);, +, +    Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler() {, +      @Override public void uncaughtException(Thread thread, Throwable throwable) {, +        uncaughtExceptionRef.set(throwable);, +        latch.countDown();, +      }, +    });, +, +    client.newCall(request).enqueue(new Callback() {, +      @Override public void onFailure(Request request, Throwable throwable) {, +        fail();, +      }, +, +      @Override public void onResponse(Response response) throws IOException {, +        throw new IOException("a");, +      }, +    });, +, +    latch.await();, +    Throwable uncaughtException = uncaughtExceptionRef.get();, +    assertEquals(RuntimeException.class, uncaughtException.getClass());, +    assertEquals(IOException.class, uncaughtException.getCause().getClass());, +    assertEquals("a", uncaughtException.getCause().getMessage());, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import static java.lang.Thread.UncaughtExceptionHandler;, +  private UncaughtExceptionHandler defaultUncaughtExceptionHandler;, +    defaultUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();, +    Thread.setDefaultUncaughtExceptionHandler(defaultUncaughtExceptionHandler);, +  @Test public void onResponseThrowsIsHandledByUncaughtExceptionHandler() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .build();, +, +    final AtomicReference<Throwable> uncaughtExceptionRef = new AtomicReference<Throwable>();, +    final CountDownLatch latch = new CountDownLatch(1);, +, +    Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler() {, +      @Override public void uncaughtException(Thread thread, Throwable throwable) {, +        uncaughtExceptionRef.set(throwable);, +        latch.countDown();, +      }, +    });, +, +    client.newCall(request).enqueue(new Callback() {, +      @Override public void onFailure(Request request, Throwable throwable) {, +        fail();, +      }, +, +      @Override public void onResponse(Response response) throws IOException {, +        throw new IOException("a");, +      }, +    });, +, +    latch.await();, +    Throwable uncaughtException = uncaughtExceptionRef.get();, +    assertEquals(RuntimeException.class, uncaughtException.getClass());, +    assertEquals(IOException.class, uncaughtException.getCause().getClass());, +    assertEquals("a", uncaughtException.getCause().getMessage());, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java, +        if (signalledCallback) throw new RuntimeException(e); // Do not signal the callback twice!, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import static java.lang.Thread.UncaughtExceptionHandler;, +  private UncaughtExceptionHandler defaultUncaughtExceptionHandler;, +    defaultUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();, +    Thread.setDefaultUncaughtExceptionHandler(defaultUncaughtExceptionHandler);, +  @Test public void onResponseThrowsIsHandledByUncaughtExceptionHandler() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .build();, +, +    final AtomicReference<Throwable> uncaughtExceptionRef = new AtomicReference<Throwable>();, +    final CountDownLatch latch = new CountDownLatch(1);, +, +    Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler() {, +      @Override public void uncaughtException(Thread thread, Throwable throwable) {]