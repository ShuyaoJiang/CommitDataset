[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import static java.util.Collections.singletonList;, +        .override(Encoding.SKIP, '#', ' '), +, +  @Test public void composeQueryWithComponents() throws Exception {, +    HttpUrl base = HttpUrl.parse("http://host/");, +    HttpUrl url = base.newBuilder().addQueryParameter("a+=& b", "c+=& d").build();, +    assertEquals("http://host/?a%2B%3D%26+b=c%2B%3D%26+d", url.toString());, +    assertEquals("c+=& d", url.queryParameterValue(0));, +    assertEquals("a+=& b", url.queryParameterName(0));, +    assertEquals("c+=& d", url.queryParameter("a+=& b"));, +    assertEquals(Collections.singleton("a+=& b"), url.queryParameterNames());, +    assertEquals(singletonList("c+=& d"), url.queryParameterValues("a+=& b"));, +    assertEquals(1, url.querySize());, +    assertEquals("a+=& b=c+=& d", url.decodeQuery()); // Ambiguous! (Though working as designed.), +    assertEquals("a%2B%3D%26+b=c%2B%3D%26+d", url.query());, +  }, +, +  @Test public void composeQueryWithEncodedComponents() throws Exception {, +    HttpUrl base = HttpUrl.parse("http://host/");, +    HttpUrl url = base.newBuilder().addEncodedQueryParameter("a+=& b", "c+=& d").build();, +    assertEquals("http://host/?a+%3D%26+b=c+%3D%26+d", url.toString());, +    assertEquals("c =& d", url.queryParameter("a =& b"));, +  }, +, +  @Test public void composeQueryRemoveQueryParameter() throws Exception {, +    HttpUrl url = HttpUrl.parse("http://host/").newBuilder(), +        .addQueryParameter("a+=& b", "c+=& d"), +        .removeAllQueryParameters("a+=& b"), +        .build();, +    assertEquals("http://host/", url.toString());, +    assertEquals(null, url.queryParameter("a+=& b"));, +  }, +, +  @Test public void composeQueryRemoveEncodedQueryParameter() throws Exception {, +    HttpUrl url = HttpUrl.parse("http://host/").newBuilder(), +        .addEncodedQueryParameter("a+=& b", "c+=& d"), +        .removeAllEncodedQueryParameters("a+=& b"), +        .build();, +    assertEquals("http://host/", url.toString());, +    assertEquals(null, url.queryParameter("a =& b"));, +  }, +, +  @Test public void composeQuerySetQueryParameter() throws Exception {, +    HttpUrl url = HttpUrl.parse("http://host/").newBuilder(), +        .addQueryParameter("a+=& b", "c+=& d"), +        .setQueryParameter("a+=& b", "ef"), +        .build();, +    assertEquals("http://host/?a%2B%3D%26+b=ef", url.toString());, +    assertEquals("ef", url.queryParameter("a+=& b"));, +  }, +, +  @Test public void composeQuerySetEncodedQueryParameter() throws Exception {, +    HttpUrl url = HttpUrl.parse("http://host/").newBuilder(), +        .addEncodedQueryParameter("a+=& b", "c+=& d"), +        .setEncodedQueryParameter("a+=& b", "ef"), +        .build();, +    assertEquals("http://host/?a+%3D%26+b=ef", url.toString());, +    assertEquals("ef", url.queryParameter("a =& b"));, +  }, +, +  @Test public void composeQueryMultipleEncodedValuesForParameter() throws Exception {, +    HttpUrl url = HttpUrl.parse("http://host/").newBuilder(), +        .addQueryParameter("a+=& b", "c+=& d"), +        .addQueryParameter("a+=& b", "e+=& f"), +        .build();, +    assertEquals("http://host/?a%2B%3D%26+b=c%2B%3D%26+d&a%2B%3D%26+b=e%2B%3D%26+f",, +        url.toString());, +    assertEquals(2, url.querySize());, +    assertEquals(Collections.singleton("a+=& b"), url.queryParameterNames());, +    assertEquals(Arrays.asList("c+=& d", "e+=& f"), url.queryParameterValues("a+=& b"));, +  }, +, +  @Test public void absentQueryIsZeroNameValuePairs() throws Exception {, +    HttpUrl url = HttpUrl.parse("http://host/").newBuilder(), +        .query(null), +        .build();, +    assertEquals(0, url.querySize());, +  }, +, +  @Test public void emptyQueryIsSingleNameValuePairWithEmptyKey() throws Exception {, +    HttpUrl url = HttpUrl.parse("http://host/").newBuilder(), +        .query(""), +        .build();, +    assertEquals(1, url.querySize());, +    assertEquals("", url.queryParameterName(0));, +    assertEquals(null, url.queryParameterValue(0));, +  }, +, +  @Test public void ampersandQueryIsTwoNameValuePairsWithEmptyKeys() throws Exception {, +    HttpUrl url = HttpUrl.parse("http://host/").newBuilder(), +        .query("&"), +        .build();, +    assertEquals(2, url.querySize());, +    assertEquals("", url.queryParameterName(0));, +    assertEquals(null, url.queryParameterValue(0));, +    assertEquals("", url.queryParameterName(1));, +    assertEquals(null, url.queryParameterValue(1));]