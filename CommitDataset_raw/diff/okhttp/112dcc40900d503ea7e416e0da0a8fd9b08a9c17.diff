[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, +import java.util.Arrays;, +  /**, +   * This test puts a request in front of one that is to be canceled, so that it is canceled, +   * before I/O takes place., +   */, +  @Test public void canceledBeforeIOSignalsOnFailure() throws Exception {, +        client.cancel("request B");, +    receiver.await(requestA.url()).assertBody("A");, +    // At this point we know the receiver is ready, and that it will receive a cancel failure., +    receiver.await(requestB.url()).assertFailure("Canceled");, +  @Test public void canceledBeforeIOSignalsOnFailure_HTTP_2() throws Exception {, +    enableNpn(Protocol.HTTP_2);, +    canceledBeforeIOSignalsOnFailure();, +  }, +, +  @Test public void canceledBeforeIOSignalsOnFailure_SPDY_3() throws Exception {, +    enableNpn(Protocol.SPDY_3);, +    canceledBeforeIOSignalsOnFailure();, +  }, +, +, +  @Test public void canceledBeforeResponseReadSignalsOnFailure() throws Exception {, +    server.setDispatcher(new Dispatcher() {, +      @Override public MockResponse dispatch(RecordedRequest request) {, +        client.cancel("request A");, +        return new MockResponse().setBody("A");, +      }, +    });, +    server.play();, +, +    Request requestA = new Request.Builder().url(server.getUrl("/a")).tag("request A").build();, +    client.enqueue(requestA, receiver);, +    assertEquals("/a", server.takeRequest().getPath());, +, +    receiver.await(requestA.url()).assertFailure("Canceled");, +  }, +, +  @Test public void canceledBeforeResponseReadSignalsOnFailure_HTTP_2() throws Exception {, +    enableNpn(Protocol.HTTP_2);, +    canceledBeforeResponseReadSignalsOnFailure();, +  }, +, +  @Test public void canceledBeforeResponseReadSignalsOnFailure_SPDY_3() throws Exception {, +    enableNpn(Protocol.SPDY_3);, +    canceledBeforeResponseReadSignalsOnFailure();, +  }, +, +  /**, +   * There's a race condition where the cancel may apply after the stream has already been, +   * processed., +   */, +  @Test public void canceledAfterResponseIsDeliveredBreaksStreamButSignalsOnce() throws Exception {, +    final AtomicReference<Failure> failureRef = new AtomicReference<Failure>();, +        latch.countDown();, +        failureRef.set(failure); // This should never occur as we don't signal twice., +        try {, +        } catch (IOException e) { // It is ok if this broke the stream., +          bodyRef.set("A");, +          throw e; // We expect to not loop into onFailure in this case., +        } finally {, +      }, +    assertNull(failureRef.get());, +  }, +, +  @Test public void canceledAfterResponseIsDeliveredBreaksStreamButSignalsOnce_HTTP_2(), +      throws Exception {, +    enableNpn(Protocol.HTTP_2);, +    canceledAfterResponseIsDeliveredBreaksStreamButSignalsOnce();, +  }, +, +  @Test public void canceledAfterResponseIsDeliveredBreaksStreamButSignalsOnce_SPDY_3(), +      throws Exception {, +    enableNpn(Protocol.SPDY_3);, +    canceledAfterResponseIsDeliveredBreaksStreamButSignalsOnce();, +, +, +  /**, +   * Tests that use this will fail unless boot classpath is set. Ex. {@code, +   * -Xbootclasspath/p:/tmp/npn-boot-1.1.7.v20140316.jar}, +   */, +  private void enableNpn(Protocol protocol) {, +    client.setSslSocketFactory(sslContext.getSocketFactory());, +    client.setHostnameVerifier(new RecordingHostnameVerifier());, +    client.setProtocols(Arrays.asList(protocol, Protocol.HTTP_1_1));, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.setNpnEnabled(true);, +    server.setNpnProtocols(client.getProtocols());, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AsyncApiTest.java, +import java.util.Arrays;, +  /**, +   * This test puts a request in front of one that is to be canceled, so that it is canceled, +   * before I/O takes place., +   */, +  @Test public void canceledBeforeIOSignalsOnFailure() throws Exception {, +        client.cancel("request B");, +    receiver.await(requestA.url()).assertBody("A");, +    // At this point we know the receiver is ready, and that it will receive a cancel failure., +    receiver.await(requestB.url()).assertFailure("Canceled");]