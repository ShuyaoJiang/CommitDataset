[+++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.net.Socket;, +  Socket deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.net.Socket;, +  Socket deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.net.Socket;, +      @Override public Socket deduplicate(, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.net.Socket;, +  Socket deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.net.Socket;, +      @Override public Socket deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +import java.net.Socket;, +  public abstract Socket deduplicate(, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.net.Socket;, +  Socket deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.net.Socket;, +      @Override public Socket deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +import java.net.Socket;, +  public abstract Socket deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +import java.net.Socket;, +    Socket socket = null;, +        socket = Internal.instance.deduplicate(connectionPool, address, this);, +    closeQuietly(socket);, +    Socket socket;, +      socket = deallocate(noNewStreams, false, true);, +    closeQuietly(socket);, +    Socket socket;, +      socket = deallocate(false, true, false);, +    closeQuietly(socket);, +    Socket socket;, +      socket = deallocate(true, false, false);, +    closeQuietly(socket);, +  private Socket deallocate(boolean noNewStreams, boolean released, boolean streamFinished) {, +    Socket socket = null;, +            socket = connection.socket();, +    return socket;, +    Socket socket;, +      socket = deallocate(noNewStreams, false, true);, +    closeQuietly(socket);, +  public Socket releaseAndAcquire(RealConnection newConnection) {, +    Socket socket = deallocate(true, false, false);, +    return socket;, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import java.net.Socket;, +  Socket deduplicate(Address address, StreamAllocation streamAllocation) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.net.Socket;, +      @Override public Socket deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +import java.net.Socket;, +  public abstract Socket deduplicate(, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +import java.net.Socket;, +    Socket socket = null;, +        socket = Internal.instance.deduplicate(connectionPool, address, this);, +    closeQuietly(socket);, +    Socket socket;, +      socket = deallocate(noNewStreams, false, true);, +    closeQuietly(socket);, +    Socket socket;, +      socket = deallocate(false, true, false);, +    closeQuietly(socket);, +    Socket socket;, +      socket = deallocate(true, false, false);, +    closeQuietly(socket);, +  private Socket deallocate(boolean noNewStreams, boolean released, boolean streamFinished) {, +    Socket socket = null;, +            socket = connection.socket();, +    return socket;, +    Socket socket;, +      socket = deallocate(noNewStreams, false, true);, +    closeQuietly(socket);, +  public Socket releaseAndAcquire(RealConnection newConnection) {, +    Socket socket = deallocate(true, false, false);, +    return socket;, +++ b/pom.xml, +]