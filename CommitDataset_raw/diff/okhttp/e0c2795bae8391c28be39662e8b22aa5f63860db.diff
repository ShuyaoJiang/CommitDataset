[+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import java.io.EOFException;, +        if (isPlaintext(buffer)) {, +        } else {, +          logger.log("--> END " + request.method() + " (binary ", +              + requestBody.contentLength() + "-byte body omitted)");, +        }, +        if (!isPlaintext(buffer)) {, +          logger.log("");, +          logger.log("<-- END HTTP (binary " + buffer.size() + "-byte body omitted)");, +          return response;, +        }, +, +  /**, +   * Returns true if the body in question probably contains human readable text. Uses a small sample, +   * of code points to detect unicode control characters commonly used in binary file signatures., +   */, +  static boolean isPlaintext(Buffer buffer) throws EOFException {, +    try {, +      Buffer prefix = new Buffer();, +      long byteCount = buffer.size() < 64 ? buffer.size() : 64;, +      buffer.copyTo(prefix, 0, byteCount);, +      for (int i = 0; i < 16; i++) {, +        if (prefix.exhausted()) {, +          break;, +        }, +        if (Character.isISOControl(prefix.readUtf8CodePoint())) {, +          return false;, +        }, +      }, +      return true;, +    } catch (EOFException e) {, +      return false; // Truncated UTF-8 sequence., +    }, +  }, +, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import java.io.EOFException;, +        if (isPlaintext(buffer)) {, +        } else {, +          logger.log("--> END " + request.method() + " (binary ", +              + requestBody.contentLength() + "-byte body omitted)");, +        }, +        if (!isPlaintext(buffer)) {, +          logger.log("");, +          logger.log("<-- END HTTP (binary " + buffer.size() + "-byte body omitted)");, +          return response;, +        }, +, +  /**, +   * Returns true if the body in question probably contains human readable text. Uses a small sample, +   * of code points to detect unicode control characters commonly used in binary file signatures., +   */, +  static boolean isPlaintext(Buffer buffer) throws EOFException {, +    try {, +      Buffer prefix = new Buffer();, +      long byteCount = buffer.size() < 64 ? buffer.size() : 64;, +      buffer.copyTo(prefix, 0, byteCount);, +      for (int i = 0; i < 16; i++) {, +        if (prefix.exhausted()) {, +          break;, +        }, +        if (Character.isISOControl(prefix.readUtf8CodePoint())) {, +          return false;, +        }, +      }, +      return true;, +    } catch (EOFException e) {, +      return false; // Truncated UTF-8 sequence., +    }, +  }, +, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +import static org.junit.Assert.assertFalse;, +  @Test public void isPlaintext() throws IOException {, +    assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer()));, +    assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("abc")));, +    assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer().writeByte(0x80)));, +    assertFalse(HttpLoggingInterceptor.isPlaintext(new Buffer().writeByte(0x00)));, +    assertFalse(HttpLoggingInterceptor.isPlaintext(new Buffer().writeByte(0xc0)));, +  }, +, +  @Test public void responseBodyIsBinary() throws IOException {, +    setLevel(Level.BODY);, +    Buffer buffer = new Buffer();, +    buffer.writeUtf8CodePoint(0x89);, +    buffer.writeUtf8CodePoint(0x50);, +    buffer.writeUtf8CodePoint(0x4e);, +    buffer.writeUtf8CodePoint(0x47);, +    buffer.writeUtf8CodePoint(0x0d);, +    buffer.writeUtf8CodePoint(0x0a);, +    buffer.writeUtf8CodePoint(0x1a);, +    buffer.writeUtf8CodePoint(0x0a);, +    server.enqueue(new MockResponse(), +        .setBody(buffer), +        .setHeader("Content-Type", "image/png; charset=utf-8"));, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +, +    applicationLogs]