[+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java, + * Access to platform-specific features., + * <h3>Server name indication (SNI)</h3>, + * Supported on Android 2.3+., + * <h3>Session Tickets</h3>, + * Supported on Android 2.3+., + *, + * <h3>Android Traffic Stats (Socket Tagging)</h3>, + * Supported on Android 4.0+., + *, + * <h3>ALPN (Application Layer Protocol Negotiation)</h3>, + * Supported on Android 5.0+. The APIs were present in Android 4.4, but that implementation was, + * unstable., + *, + * Supported on OpenJDK 7 and 8 (via the JettyALPN-boot library)., +      } catch (ClassNotFoundException e) {, +      OptionalMethod<Socket> setUseSessionTickets, +          = new OptionalMethod<>(null, "setUseSessionTickets", boolean.class);, +      OptionalMethod<Socket> setHostname, +          = new OptionalMethod<>(null, "setHostname", String.class);, +      OptionalMethod<Socket> getAlpnSelectedProtocol = null;, +      OptionalMethod<Socket> setAlpnProtocols = null;, +, +      // Attempt to find Android 4.0+ APIs., +, +        // Attempt to find Android 5.0+ APIs., +        try {, +          Class.forName("android.net.Network"); // Arbitrary class added in Android 5.0., +          getAlpnSelectedProtocol = new OptionalMethod<>(byte[].class, "getAlpnSelectedProtocol");, +          setAlpnProtocols = new OptionalMethod<>(null, "setAlpnProtocols", byte[].class);, +        }, +      } catch (ClassNotFoundException | NoSuchMethodException ignored) {, +      return new Android(setUseSessionTickets, setHostname, trafficStatsTagSocket,, +          trafficStatsUntagSocket, getAlpnSelectedProtocol, setAlpnProtocols);, +    // Find Jetty's ALPN extension for OpenJDK., +    try {, +    } catch (ClassNotFoundException | NoSuchMethodException ignored) {, +  /** Android 2.3 or better. */, +    private final OptionalMethod<Socket> setUseSessionTickets;, +    private final OptionalMethod<Socket> setHostname;, +    // Non-null on Android 5.0+., +    private final OptionalMethod<Socket> getAlpnSelectedProtocol;, +    private final OptionalMethod<Socket> setAlpnProtocols;, +, +    public Android(OptionalMethod<Socket> setUseSessionTickets, OptionalMethod<Socket> setHostname,, +        Method trafficStatsTagSocket, Method trafficStatsUntagSocket,, +        OptionalMethod<Socket> getAlpnSelectedProtocol, OptionalMethod<Socket> setAlpnProtocols) {, +      this.setUseSessionTickets = setUseSessionTickets;, +      this.setHostname = setHostname;, +      this.getAlpnSelectedProtocol = getAlpnSelectedProtocol;, +      this.setAlpnProtocols = setAlpnProtocols;, +        setUseSessionTickets.invokeOptionalWithoutCheckedException(sslSocket, true);, +        setHostname.invokeOptionalWithoutCheckedException(sslSocket, hostname);, +      if (setAlpnProtocols != null && setAlpnProtocols.isSupported(sslSocket)) {, +        setAlpnProtocols.invokeWithoutCheckedException(sslSocket, parameters);, +      }, +      if (getAlpnSelectedProtocol == null) return null;, +      if (!getAlpnSelectedProtocol.isSupported(socket)) return null;, +      byte[] alpnResult = (byte[]) getAlpnSelectedProtocol.invokeWithoutCheckedException(socket);, +      return alpnResult != null ? new String(alpnResult, Util.UTF_8) : null;, +      } catch (InvocationTargetException | IllegalAccessException e) {, +      } catch (IllegalAccessException | InvocationTargetException ignored) {, +      } catch (InvocationTargetException | IllegalAccessException e) {]