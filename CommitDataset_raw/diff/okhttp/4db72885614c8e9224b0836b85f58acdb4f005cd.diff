[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      17, 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0',, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      17, 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0',, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Hpack.java, +, +  static class HeaderEntry {, +    private final String name;, +    private final String value;, +, +    HeaderEntry(String name, String value) {, +      this.name = name;, +      this.value = value;, +    }, +, +    // TODO: This needs to be the length in UTF-8 bytes, not the length in chars., +    int length() {, +      return 32 + name.length() + value.length();, +    }, +  }, +, +  static final List<HeaderEntry> INITIAL_CLIENT_TO_SERVER_HEADER_TABLE = Arrays.asList(, +      new HeaderEntry(":scheme", "http"),, +      new HeaderEntry(":scheme", "https"),, +      new HeaderEntry(":host", ""),, +      new HeaderEntry(":path", "/"),, +      new HeaderEntry(":method", "GET"),, +      new HeaderEntry("accept", ""),, +      new HeaderEntry("accept-charset", ""),, +      new HeaderEntry("accept-encoding", ""),, +      new HeaderEntry("accept-language", ""),, +      new HeaderEntry("cookie", ""),, +      new HeaderEntry("if-modified-since", ""),, +      new HeaderEntry("user-agent", ""),, +      new HeaderEntry("referer", ""),, +      new HeaderEntry("authorization", ""),, +      new HeaderEntry("allow", ""),, +      new HeaderEntry("cache-control", ""),, +      new HeaderEntry("connection", ""),, +      new HeaderEntry("content-length", ""),, +      new HeaderEntry("content-type", ""),, +      new HeaderEntry("date", ""),, +      new HeaderEntry("expect", ""),, +      new HeaderEntry("from", ""),, +      new HeaderEntry("if-match", ""),, +      new HeaderEntry("if-none-match", ""),, +      new HeaderEntry("if-range", ""),, +      new HeaderEntry("if-unmodified-since", ""),, +      new HeaderEntry("max-forwards", ""),, +      new HeaderEntry("proxy-authorization", ""),, +      new HeaderEntry("range", ""),, +      new HeaderEntry("via", ""), +  static final List<HeaderEntry> INITIAL_SERVER_TO_CLIENT_HEADER_TABLE = Arrays.asList(, +      new HeaderEntry(":status", "200"),, +      new HeaderEntry("age", ""),, +      new HeaderEntry("cache-control", ""),, +      new HeaderEntry("content-length", ""),, +      new HeaderEntry("content-type", ""),, +      new HeaderEntry("date", ""),, +      new HeaderEntry("etag", ""),, +      new HeaderEntry("expires", ""),, +      new HeaderEntry("last-modified", ""),, +      new HeaderEntry("server", ""),, +      new HeaderEntry("set-cookie", ""),, +      new HeaderEntry("vary", ""),, +      new HeaderEntry("via", ""),, +      new HeaderEntry("access-control-allow-origin", ""),, +      new HeaderEntry("accept-ranges", ""),, +      new HeaderEntry("allow", ""),, +      new HeaderEntry("connection", ""),, +      new HeaderEntry("content-disposition", ""),, +      new HeaderEntry("content-encoding", ""),, +      new HeaderEntry("content-language", ""),, +      new HeaderEntry("content-location", ""),, +      new HeaderEntry("content-range", ""),, +      new HeaderEntry("link", ""),, +      new HeaderEntry("location", ""),, +      new HeaderEntry("proxy-authenticate", ""),, +      new HeaderEntry("refresh", ""),, +      new HeaderEntry("retry-after", ""),, +      new HeaderEntry("strict-transport-security", ""),, +      new HeaderEntry("transfer-encoding", ""),, +      new HeaderEntry("www-authenticate", ""), +  // Update these when initial tables change to sum of each entry length., +  static final int INITIAL_CLIENT_TO_SERVER_HEADER_TABLE_LENGTH = 1262;, +  static final int INITIAL_SERVER_TO_CLIENT_HEADER_TABLE_LENGTH = 1304;, +, +    private final List<HeaderEntry> headerTable;, +    private long bufferSize = 0;, +      if (client) {  // we are reading from the server, +        this.headerTable = new ArrayList<HeaderEntry>(INITIAL_SERVER_TO_CLIENT_HEADER_TABLE);, +        this.bufferSize = INITIAL_SERVER_TO_CLIENT_HEADER_TABLE_LENGTH;, +      } else {, +        this.headerTable = new ArrayList<HeaderEntry>(INITIAL_CLIENT_TO_SERVER_HEADER_TABLE);, +        this.bufferSize = INITIAL_CLIENT_TO_SERVER_HEADER_TABLE_LENGTH;, +      }, +      int index = headerTable.size(); // append to tail, +      insertIntoHeaderTable(index, new HeaderEntry(name, value));, +      int index = headerTable.size(); // append to tail, +      insertIntoHeaderTable(index, new HeaderEntry(name, value));]