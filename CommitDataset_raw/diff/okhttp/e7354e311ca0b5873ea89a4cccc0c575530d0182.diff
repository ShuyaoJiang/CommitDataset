[+++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString((int) buffer.size()).toByteArray(),, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString((int) buffer.size()).toByteArray(),, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +      if (hpackBuffer.size() != 0) throw new IllegalStateException();, +      int length = (int) (4 + hpackBuffer.size());, +      sink.write(hpackBuffer, hpackBuffer.size());, +      if (hpackBuffer.size() != 0) throw new IllegalStateException();, +      int length = (int) hpackBuffer.size();, +      sink.write(hpackBuffer, hpackBuffer.size());, +      data(outFinished, streamId, source, (int) source.size());, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString((int) buffer.size()).toByteArray(),, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +      if (hpackBuffer.size() != 0) throw new IllegalStateException();, +      int length = (int) (4 + hpackBuffer.size());, +      sink.write(hpackBuffer, hpackBuffer.size());, +      if (hpackBuffer.size() != 0) throw new IllegalStateException();, +      int length = (int) hpackBuffer.size();, +      sink.write(hpackBuffer, hpackBuffer.size());, +      data(outFinished, streamId, source, (int) source.size());, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Spdy3.java, +      int length = (int) (10 + headerBlockBuffer.size());, +      sink.write(headerBlockBuffer, headerBlockBuffer.size());, +      int length = (int) (headerBlockBuffer.size() + 4);, +      sink.write(headerBlockBuffer, headerBlockBuffer.size());, +      int length = (int) (headerBlockBuffer.size() + 4);, +      sink.write(headerBlockBuffer, headerBlockBuffer.size());, +      data(outFinished, streamId, source, (int) source.size());, +      if (headerBlockBuffer.size() != 0) throw new IllegalStateException();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString((int) buffer.size()).toByteArray(),, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +      if (hpackBuffer.size() != 0) throw new IllegalStateException();, +      int length = (int) (4 + hpackBuffer.size());, +      sink.write(hpackBuffer, hpackBuffer.size());, +      if (hpackBuffer.size() != 0) throw new IllegalStateException();, +      int length = (int) hpackBuffer.size();, +      sink.write(hpackBuffer, hpackBuffer.size());, +      data(outFinished, streamId, source, (int) source.size());, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Spdy3.java, +      int length = (int) (10 + headerBlockBuffer.size());, +      sink.write(headerBlockBuffer, headerBlockBuffer.size());, +      int length = (int) (headerBlockBuffer.size() + 4);, +      sink.write(headerBlockBuffer, headerBlockBuffer.size());, +      int length = (int) (headerBlockBuffer.size() + 4);, +      sink.write(headerBlockBuffer, headerBlockBuffer.size());, +      data(outFinished, streamId, source, (int) source.size());, +      if (headerBlockBuffer.size() != 0) throw new IllegalStateException();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, +        if (readBuffer.size() == 0) return -1; // This source is exhausted., +        read = readBuffer.read(sink, Math.min(byteCount, readBuffer.size()));, +        while (readBuffer.size() == 0 && !finished && !closed && errorCode == null) {, +          flowControlError = byteCount + readBuffer.size() > maxByteCount;, +          boolean wasEmpty = readBuffer.size() == 0;, +          readBuffer.write(receiveBuffer, receiveBuffer.size());, +      writeFrame(false, buffer.size());, +        writeFrame(true, buffer.size());, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString((int) buffer.size()).toByteArray(),, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +      if (hpackBuffer.size() != 0) throw new IllegalStateException();, +      int length = (int) (4 + hpackBuffer.size());, +      sink.write(hpackBuffer, hpackBuffer.size());, +      if (hpackBuffer.size() != 0) throw new IllegalStateException();, +      int length = (int) hpackBuffer.size();, +      sink.write(hpackBuffer, hpackBuffer.size());, +      data(outFinished, streamId, source, (int) source.size());, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Spdy3.java, +      int length = (int) (10 + headerBlockBuffer.size());, +      sink.write(headerBlockBuffer, headerBlockBuffer.size());, +      int length = (int) (headerBlockBuffer.size() + 4);, +      sink.write(headerBlockBuffer, headerBlockBuffer.size());, +      int length = (int) (headerBlockBuffer.size() + 4);, +      sink.write(headerBlockBuffer, headerBlockBuffer.size());, +      data(outFinished, streamId, source, (int) source.size());, +      if (headerBlockBuffer.size() != 0) throw new IllegalStateException();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, +        if (readBuffer.size() == 0) return -1; // This source is exhausted., +        read = readBuffer.read(sink, Math.min(byteCount, readBuffer.size()));, +        while (readBuffer.size() == 0 && !finished && !closed && errorCode == null) {, +          flowControlError = byteCount + readBuffer.size() > maxByteCount;, +          boolean wasEmpty = readBuffer.size() == 0;, +          readBuffer.write(receiveBuffer, receiveBuffer.size());, +      writeFrame(false, buffer.size());, +        writeFrame(true, buffer.size());, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/HpackDraft05Test.java, +    bytesIn.write(out, out.size());, +    bytesIn.write(out, out.size());, +    bytesIn.write(out, out.size());, +    bytesIn.write(out, out.size());, +    bytesIn.write(out, out.size());, +    bytesIn.write(bytesOut, bytesOut.size());, +    bytesIn.write(bytesOut, bytesOut.size());, +    bytesIn.write(out, out.size());, +    bytesIn.write(out, out.size());, +    bytesIn.write(out, out.size());, +    bytesIn.write(out, out.size());, +    bytesIn.write(out, out.size());]