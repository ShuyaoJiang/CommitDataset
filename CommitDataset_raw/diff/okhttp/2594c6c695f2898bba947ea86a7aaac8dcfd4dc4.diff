[+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +      transmitter.prepareToConnect(call.request());, +      transmitter.acquireConnection(c1, true);, +      transmitter.prepareToConnect(call.request());, +      transmitter.acquireConnection(connection, true);, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +      transmitter.prepareToConnect(call.request());, +      transmitter.acquireConnection(c1, true);, +      transmitter.prepareToConnect(call.request());, +      transmitter.acquireConnection(connection, true);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +, +  @Test public void applicationInterceptorProceedsMultipleTimes() throws Exception {, +    server.enqueue(new MockResponse().setBody("a"));, +    server.enqueue(new MockResponse().setBody("b"));, +, +    client = client.newBuilder(), +        .addInterceptor(chain -> {, +          try (Response a = chain.proceed(chain.request())) {, +            assertEquals("a", a.body().string());, +          }, +          return chain.proceed(chain.request());, +        }), +        .build();, +, +    Call call = client.newCall(new Request.Builder().url(server.url("/")).build());, +    Response response = call.execute();, +    assertEquals("b", response.body().string());, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",, +        "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, +        "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "ResponseBodyEnd", "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart",, +        "ResponseHeadersEnd", "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased",, +        "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +    assertEquals(1, server.takeRequest().getSequenceNumber());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +      transmitter.prepareToConnect(call.request());, +      transmitter.acquireConnection(c1, true);, +      transmitter.prepareToConnect(call.request());, +      transmitter.acquireConnection(connection, true);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +, +  @Test public void applicationInterceptorProceedsMultipleTimes() throws Exception {, +    server.enqueue(new MockResponse().setBody("a"));, +    server.enqueue(new MockResponse().setBody("b"));, +, +    client = client.newBuilder(), +        .addInterceptor(chain -> {, +          try (Response a = chain.proceed(chain.request())) {, +            assertEquals("a", a.body().string());, +          }, +          return chain.proceed(chain.request());, +        }), +        .build();, +, +    Call call = client.newCall(new Request.Builder().url(server.url("/")).build());, +    Response response = call.execute();, +    assertEquals("b", response.body().string());, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",, +        "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, +        "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "ResponseBodyEnd", "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart",, +        "ResponseHeadersEnd", "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased",, +        "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +    assertEquals(1, server.takeRequest().getSequenceNumber());, +  }, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +   * Attempts to acquire a recycled connection to {@code address} for {@code transmitter}. If, +   * non-null {@code route} is the resolved route for a connection. Returns true if a connection was, +   * acquired., +  boolean transmitterAcquirePooledConnection(, +      Address address, Transmitter transmitter, @Nullable Route route) {, +        transmitter.acquireConnection(connection, true);, +        return true;, +    return false;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +      transmitter.prepareToConnect(call.request());, +      transmitter.acquireConnection(c1, true);, +      transmitter.prepareToConnect(call.request());, +      transmitter.acquireConnection(connection, true);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +, +  @Test public void applicationInterceptorProceedsMultipleTimes() throws Exception {, +    server.enqueue(new MockResponse().setBody("a"));, +    server.enqueue(new MockResponse().setBody("b"));, +, +    client = client.newBuilder(), +        .addInterceptor(chain -> {, +          try (Response a = chain.proceed(chain.request())) {, +            assertEquals("a", a.body().string());, +          }]