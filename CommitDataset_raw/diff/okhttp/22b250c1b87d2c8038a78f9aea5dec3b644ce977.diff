[+++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9001",, +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9001",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 NON-STRICT", +"5.15 NON-STRICT", +"7.1.5 FAILED", +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9001",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 NON-STRICT", +"5.15 NON-STRICT", +"7.1.5 FAILED", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private static final String HOST = "ws://localhost:9001";, +        webSocket.close(code, null);, +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9001",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 NON-STRICT", +"5.15 NON-STRICT", +"7.1.5 FAILED", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private static final String HOST = "ws://localhost:9001";, +        webSocket.close(code, null);, +++ b/okhttp-tests/src/test/java/okhttp3/ResponseBodyTest.java, +    ResponseBody body = body("efbbbf68656c6c6f");, +    ResponseBody body = body("efbbbf68656c6c6f");, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, source.readByte() & 0xff);, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, bytes[2] & 0xff);, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, bytes.read());, +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9001",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 NON-STRICT", +"5.15 NON-STRICT", +"7.1.5 FAILED", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private static final String HOST = "ws://localhost:9001";, +        webSocket.close(code, null);, +++ b/okhttp-tests/src/test/java/okhttp3/ResponseBodyTest.java, +    ResponseBody body = body("efbbbf68656c6c6f");, +    ResponseBody body = body("efbbbf68656c6c6f");, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, source.readByte() & 0xff);, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, bytes[2] & 0xff);, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, bytes.read());, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +  private static final ByteString UTF_8_BOM = ByteString.decodeHex("efbbbf");, +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9001",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 NON-STRICT", +"5.15 NON-STRICT", +"7.1.5 FAILED", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private static final String HOST = "ws://localhost:9001";, +        webSocket.close(code, null);, +++ b/okhttp-tests/src/test/java/okhttp3/ResponseBodyTest.java, +    ResponseBody body = body("efbbbf68656c6c6f");, +    ResponseBody body = body("efbbbf68656c6c6f");, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, source.readByte() & 0xff);, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, bytes[2] & 0xff);, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, bytes.read());, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +  private static final ByteString UTF_8_BOM = ByteString.decodeHex("efbbbf");, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +  private static final long MAX_QUEUE_SIZE = 1024 * 1024; // 1 MiB., +++ b/okhttp-tests/fuzzingserver-config.json, +  "url": "ws://127.0.0.1:9001",, +++ b/okhttp-tests/fuzzingserver-expected.txt, +"4.2.4 NON-STRICT", +"5.15 NON-STRICT", +"7.1.5 FAILED", +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private static final String HOST = "ws://localhost:9001";, +        webSocket.close(code, null);, +++ b/okhttp-tests/src/test/java/okhttp3/ResponseBodyTest.java, +    ResponseBody body = body("efbbbf68656c6c6f");, +    ResponseBody body = body("efbbbf68656c6c6f");, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, source.readByte() & 0xff);, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, bytes[2] & 0xff);, +    ResponseBody body = body("efbbbf68656c6c6f");, +    assertEquals(0xbf, bytes.read());, +++ b/okhttp/src/main/java/okhttp3/internal/Util.java, +  private static final ByteString UTF_8_BOM = ByteString.decodeHex("efbbbf");, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +  private static final long MAX_QUEUE_SIZE = 1024 * 1024; // 1 MiB., +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java]