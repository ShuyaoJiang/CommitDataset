[+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +import java.net.InetSocketAddress;, +import java.net.Proxy;, +import java.util.concurrent.atomic.AtomicInteger;, +    final AtomicInteger connectCount = new AtomicInteger();, +    EventListener listener = new EventListener() {, +      @Override public void connectStart(Call call, InetSocketAddress inetSocketAddress,, +          Proxy proxy) {, +        connectCount.getAndIncrement();, +      }, +    };, +    client = client.newBuilder(), +        .eventListener(listener), +        .build();, +, +    assertEquals(1, connectCount.get());, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +import java.net.InetSocketAddress;, +import java.net.Proxy;, +import java.util.concurrent.atomic.AtomicInteger;, +    final AtomicInteger connectCount = new AtomicInteger();, +    EventListener listener = new EventListener() {, +      @Override public void connectStart(Call call, InetSocketAddress inetSocketAddress,, +          Proxy proxy) {, +        connectCount.getAndIncrement();, +      }, +    };, +    client = client.newBuilder(), +        .eventListener(listener), +        .build();, +, +    assertEquals(1, connectCount.get());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/RouteSelectorTest.java, +import static org.junit.Assert.assertSame;, +    RouteSelector.Selection selection = routeSelector.next();, +    assertRoute(selection.next(), address, NO_PROXY, dns.lookup(uriHost, 0), uriPort);, +    assertFalse(selection.hasNext());, +    try {, +      selection.next();, +      fail();, +    } catch (NoSuchElementException expected) {, +    }, +    RouteSelector.Selection selection = routeSelector.next();, +    Route route = selection.next();, +    selection = routeSelector.next();, +    assertRoute(selection.next(), address, NO_PROXY, dns.lookup(uriHost, 0), uriPort);, +    assertFalse(selection.hasNext());, +, +    try {, +      selection.next();, +      fail();, +    } catch (NoSuchElementException expected) {, +    }, +, +    RouteSelector.Selection selection = routeSelector.next();, +    assertRoute(selection.next(), address, proxyA, dns.lookup(proxyAHost, 0), proxyAPort);, +    assertRoute(selection.next(), address, proxyA, dns.lookup(proxyAHost, 1), proxyAPort);, +    assertFalse(selection.hasNext());, +    RouteSelector.Selection selection = routeSelector.next();, +    assertRoute(selection.next(), address, NO_PROXY, dns.lookup(uriHost, 0), uriPort);, +    assertRoute(selection.next(), address, NO_PROXY, dns.lookup(uriHost, 1), uriPort);, +    assertFalse(selection.hasNext());, +    RouteSelector.Selection selection = routeSelector.next();, +    assertRoute(selection.next(), address, NO_PROXY, dns.lookup(uriHost, 0), uriPort);, +    assertFalse(selection.hasNext());, +    RouteSelector.Selection selection = routeSelector.next();, +    assertRoute(selection.next(), address, NO_PROXY, dns.lookup(uriHost, 0), uriPort);, +    assertRoute(selection.next(), address, NO_PROXY, dns.lookup(uriHost, 1), uriPort);, +    assertFalse(selection.hasNext());, +    RouteSelector.Selection selection1 = routeSelector.next();, +    assertRoute(selection1.next(), address, proxyA, dns.lookup(proxyAHost, 0), proxyAPort);, +    assertRoute(selection1.next(), address, proxyA, dns.lookup(proxyAHost, 1), proxyAPort);, +    assertFalse(selection1.hasNext());, +    RouteSelector.Selection selection2 = routeSelector.next();, +    assertRoute(selection2.next(), address, proxyB, dns.lookup(proxyBHost, 0), proxyBPort);, +    assertFalse(selection2.hasNext());, +    RouteSelector.Selection selection = routeSelector.next();, +    assertRoute(selection.next(), address, NO_PROXY, dns.lookup(uriHost, 0), uriPort);, +    assertFalse(selection.hasNext());, +    RouteSelector.Selection selection1 = routeSelector.next();, +    assertRoute(selection1.next(), address, proxyA, dns.lookup(proxyAHost, 0), proxyAPort);, +    assertFalse(selection1.hasNext());, +    RouteSelector.Selection selection2 = routeSelector.next();, +    assertRoute(selection2.next(), address, proxyA, dns.lookup(proxyAHost, 0), proxyAPort);, +    assertFalse(selection2.hasNext());, +    RouteSelector.Selection selection1 = routeSelector.next();, +    assertRoute(selection1.next(), address, proxyA, dns.lookup(proxyAHost, 0), proxyAPort);, +    assertRoute(selection1.next(), address, proxyA, dns.lookup(proxyAHost, 1), proxyAPort);, +    assertFalse(selection1.hasNext());, +    RouteSelector.Selection selection2 = routeSelector.next();, +    assertRoute(selection2.next(), address, proxyB, dns.lookup(proxyBHost, 0), proxyBPort);, +    assertRoute(selection2.next(), address, proxyB, dns.lookup(proxyBHost, 1), proxyBPort);, +    assertFalse(selection2.hasNext());, +  @Test public void failedRouteWithSingleProxy() throws Exception {, +    RouteSelector.Selection selection1 = routeSelector.next();, +    List<Route> regularRoutes = selection1.getAll();, +    // The first selection prioritizes the non-failed routes., +    RouteSelector.Selection selection2 = routeSelector.next();, +    assertEquals(regularRoutes.get(1), selection2.next());, +    assertFalse(selection2.hasNext());]