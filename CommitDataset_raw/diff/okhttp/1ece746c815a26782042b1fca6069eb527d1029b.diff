[+++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +  private final Route route;, +  public Connection(Route route) {, +    this.route = route;, +    socket = (route.proxy.type() != Proxy.Type.HTTP) ? new Socket(route.proxy) : new Socket();, +    socket.connect(route.inetSocketAddress, connectTimeout);, +    if (route.address.sslSocketFactory != null) {, +    socket = route.address.sslSocketFactory, +        .createSocket(socket, route.address.uriHost, route.address.uriPort, true /* autoClose */);, +    if (route.modernTls) {, +      platform.enableTlsExtensions(sslSocket, route.address.uriHost);, +    if (route.modernTls) {, +    if (!route.address.hostnameVerifier.verify(route.address.uriHost, sslSocket.getSession())) {, +      throw new IOException("Hostname '" + route.address.uriHost + "' was not verified");, +    if (route.modernTls && (selectedProtocol = platform.getNpnSelectedProtocol(sslSocket)) != null) {, +        spdyConnection = new SpdyConnection.Builder(route.address.getUriHost(), true, in, out), +            .build();, +  /** Returns the route used by this connection. */, +  public Route getRoute() {, +    return route;, +    return route.address.sslSocketFactory != null && route.proxy.type() == Proxy.Type.HTTP;, +          boolean credentialsFound = HttpAuthenticator.processAuthHeader(HTTP_PROXY_AUTH,, +              responseHeaders, requestHeaders, route.proxy, url);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +  private final Route route;, +  public Connection(Route route) {, +    this.route = route;, +    socket = (route.proxy.type() != Proxy.Type.HTTP) ? new Socket(route.proxy) : new Socket();, +    socket.connect(route.inetSocketAddress, connectTimeout);, +    if (route.address.sslSocketFactory != null) {, +    socket = route.address.sslSocketFactory, +        .createSocket(socket, route.address.uriHost, route.address.uriPort, true /* autoClose */);, +    if (route.modernTls) {, +      platform.enableTlsExtensions(sslSocket, route.address.uriHost);, +    if (route.modernTls) {, +    if (!route.address.hostnameVerifier.verify(route.address.uriHost, sslSocket.getSession())) {, +      throw new IOException("Hostname '" + route.address.uriHost + "' was not verified");, +    if (route.modernTls && (selectedProtocol = platform.getNpnSelectedProtocol(sslSocket)) != null) {, +        spdyConnection = new SpdyConnection.Builder(route.address.getUriHost(), true, in, out), +            .build();, +  /** Returns the route used by this connection. */, +  public Route getRoute() {, +    return route;, +    return route.address.sslSocketFactory != null && route.proxy.type() == Proxy.Type.HTTP;, +          boolean credentialsFound = HttpAuthenticator.processAuthHeader(HTTP_PROXY_AUTH,, +              responseHeaders, requestHeaders, route.proxy, url);, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +      if (!connection.getRoute().getAddress().equals(address), +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +  private final Route route;, +  public Connection(Route route) {, +    this.route = route;, +    socket = (route.proxy.type() != Proxy.Type.HTTP) ? new Socket(route.proxy) : new Socket();, +    socket.connect(route.inetSocketAddress, connectTimeout);, +    if (route.address.sslSocketFactory != null) {, +    socket = route.address.sslSocketFactory, +        .createSocket(socket, route.address.uriHost, route.address.uriPort, true /* autoClose */);, +    if (route.modernTls) {, +      platform.enableTlsExtensions(sslSocket, route.address.uriHost);, +    if (route.modernTls) {, +    if (!route.address.hostnameVerifier.verify(route.address.uriHost, sslSocket.getSession())) {, +      throw new IOException("Hostname '" + route.address.uriHost + "' was not verified");, +    if (route.modernTls && (selectedProtocol = platform.getNpnSelectedProtocol(sslSocket)) != null) {, +        spdyConnection = new SpdyConnection.Builder(route.address.getUriHost(), true, in, out), +            .build();, +  /** Returns the route used by this connection. */, +  public Route getRoute() {, +    return route;, +    return route.address.sslSocketFactory != null && route.proxy.type() == Proxy.Type.HTTP;, +          boolean credentialsFound = HttpAuthenticator.processAuthHeader(HTTP_PROXY_AUTH,, +              responseHeaders, requestHeaders, route.proxy, url);, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +      if (!connection.getRoute().getAddress().equals(address), +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.Set;, +  private Set<Route> failedRoutes = Collections.synchronizedSet(new LinkedHashSet<Route>());, +      return new HttpURLConnectionImpl(url, copy, copy.okResponseCache(), copy.failedRoutes);, +      return new HttpsURLConnectionImpl(url, copy, copy.okResponseCache(), copy.failedRoutes);, +   * Returns a shallow copy of this OkHttpClient that uses the system-wide default for, +    result.failedRoutes = failedRoutes;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +  private final Route route;, +  public Connection(Route route) {, +    this.route = route;, +    socket = (route.proxy.type() != Proxy.Type.HTTP) ? new Socket(route.proxy) : new Socket();, +    socket.connect(route.inetSocketAddress, connectTimeout);, +    if (route.address.sslSocketFactory != null) {, +    socket = route.address.sslSocketFactory, +        .createSocket(socket, route.address.uriHost, route.address.uriPort, true /* autoClose */);, +    if (route.modernTls) {, +      platform.enableTlsExtensions(sslSocket, route.address.uriHost);, +    if (route.modernTls) {, +    if (!route.address.hostnameVerifier.verify(route.address.uriHost, sslSocket.getSession())) {, +      throw new IOException("Hostname '" + route.address.uriHost + "' was not verified");, +    if (route.modernTls && (selectedProtocol = platform.getNpnSelectedProtocol(sslSocket)) != null) {, +        spdyConnection = new SpdyConnection.Builder(route.address.getUriHost(), true, in, out), +            .build();, +  /** Returns the route used by this connection. */]