[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java, +      peer.sendFrame().data(false, 3, data(24), 24);, +      peer.sendFrame().data(false, 3, data(25), 25);, +      peer.sendFrame().data(false, 3, data(1), 1);, +    peer.sendFrame().data(true, 3, data(0), 0);, +    peer.sendFrame().data(true, 3, data(0), 0);, +    byte[] buff = new byte[peer.maxOutboundDataLength() + 1];, +    assertEquals(peer.maxOutboundDataLength(), data.data.length);, +    peer.sendFrame().data(true, 3, data(0), 0);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java, +      peer.sendFrame().data(false, 3, data(24), 24);, +      peer.sendFrame().data(false, 3, data(25), 25);, +      peer.sendFrame().data(false, 3, data(1), 1);, +    peer.sendFrame().data(true, 3, data(0), 0);, +    peer.sendFrame().data(true, 3, data(0), 0);, +    byte[] buff = new byte[peer.maxOutboundDataLength() + 1];, +    assertEquals(peer.maxOutboundDataLength(), data.data.length);, +    peer.sendFrame().data(true, 3, data(0), 0);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java, +  /** Maximum length of an outbound data frame. */, +  public int maxOutboundDataLength() {, +    return frameWriter.maxDataLength();, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java, +      peer.sendFrame().data(false, 3, data(24), 24);, +      peer.sendFrame().data(false, 3, data(25), 25);, +      peer.sendFrame().data(false, 3, data(1), 1);, +    peer.sendFrame().data(true, 3, data(0), 0);, +    peer.sendFrame().data(true, 3, data(0), 0);, +    byte[] buff = new byte[peer.maxOutboundDataLength() + 1];, +    assertEquals(peer.maxOutboundDataLength(), data.data.length);, +    peer.sendFrame().data(true, 3, data(0), 0);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java, +  /** Maximum length of an outbound data frame. */, +  public int maxOutboundDataLength() {, +    return frameWriter.maxDataLength();, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Spdy3ConnectionTest.java, +    peer.sendFrame().data(true, 1, new Buffer().writeUtf8("robot"), 5);, +    peer.sendFrame().data(true, 41, new Buffer().writeUtf8("bogus"), 5);, +    peer.sendFrame().data(true, 1, new Buffer().writeUtf8("square"), 6);, +    peer.sendFrame().data(true, 1, new Buffer().writeUtf8("robot"), 5);, +    peer.sendFrame().data(true, 1, new Buffer().writeUtf8("c3po"), 4); // Ignored., +    int dataLength = 64 * 1024 + 1;, +    peer.sendFrame().data(false, 1, new Buffer().write(new byte[dataLength]), dataLength);, +      peer.sendFrame().data(false, 1, data(24), 24);, +      peer.sendFrame().data(false, 1, data(25), 25);, +      peer.sendFrame().data(false, 1, data(1), 1);, +    peer.sendFrame().data(true, 1, data(0), 0);, +    peer.sendFrame().data(true, 1, data(0), 0);, +    peer.sendTruncatedFrame(8 + 100).data(false, 1, data(1024), 1024);, +    int framesThatFillWindow = roundUp(DEFAULT_INITIAL_WINDOW_SIZE, peer.maxOutboundDataLength());, +    peer.sendFrame().data(true, 1, new Buffer().writeUtf8("robot"), 5);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java, +      peer.sendFrame().data(false, 3, data(24), 24);, +      peer.sendFrame().data(false, 3, data(25), 25);, +      peer.sendFrame().data(false, 3, data(1), 1);, +    peer.sendFrame().data(true, 3, data(0), 0);, +    peer.sendFrame().data(true, 3, data(0), 0);, +    byte[] buff = new byte[peer.maxOutboundDataLength() + 1];, +    assertEquals(peer.maxOutboundDataLength(), data.data.length);, +    peer.sendFrame().data(true, 3, data(0), 0);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java, +  /** Maximum length of an outbound data frame. */, +  public int maxOutboundDataLength() {, +    return frameWriter.maxDataLength();, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Spdy3ConnectionTest.java, +    peer.sendFrame().data(true, 1, new Buffer().writeUtf8("robot"), 5);, +    peer.sendFrame().data(true, 41, new Buffer().writeUtf8("bogus"), 5);, +    peer.sendFrame().data(true, 1, new Buffer().writeUtf8("square"), 6);, +    peer.sendFrame().data(true, 1, new Buffer().writeUtf8("robot"), 5);, +    peer.sendFrame().data(true, 1, new Buffer().writeUtf8("c3po"), 4); // Ignored., +    int dataLength = 64 * 1024 + 1;, +    peer.sendFrame().data(false, 1, new Buffer().write(new byte[dataLength]), dataLength);, +      peer.sendFrame().data(false, 1, data(24), 24);, +      peer.sendFrame().data(false, 1, data(25), 25);, +      peer.sendFrame().data(false, 1, data(1), 1);, +    peer.sendFrame().data(true, 1, data(0), 0);, +    peer.sendFrame().data(true, 1, data(0), 0);, +    peer.sendTruncatedFrame(8 + 100).data(false, 1, data(1024), 1024);, +    int framesThatFillWindow = roundUp(DEFAULT_INITIAL_WINDOW_SIZE, peer.maxOutboundDataLength());, +    peer.sendFrame().data(true, 1, new Buffer().writeUtf8("robot"), 5);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +  /** The maximum size of bytes that may be sent in a single call to {@link #data}. */, +  int maxDataLength();, +, +   * {@code source.length} may be longer than the max length of the variant's data frame., +   * @param byteCount must be between 0 and the minimum of {code source.length}, +   * and {@link #maxDataLength}., +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java, +      peer.sendFrame().data(false, 3, data(24), 24);, +      peer.sendFrame().data(false, 3, data(25), 25);, +      peer.sendFrame().data(false, 3, data(1), 1);, +    peer.sendFrame().data(true, 3, data(0), 0);, +    peer.sendFrame().data(true, 3, data(0), 0);, +    byte[] buff = new byte[peer.maxOutboundDataLength() + 1];]