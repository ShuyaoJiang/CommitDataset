[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.spdy;, +, +import com.squareup.okhttp.internal.Util;, +import java.io.IOException;, +import java.io.InterruptedIOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicInteger;, +import okio.Buffer;, +import okio.BufferedSink;, +import okio.BufferedSource;, +import okio.ByteString;, +import okio.Okio;, +import okio.Sink;, +import okio.Source;, +import org.junit.After;, +import org.junit.Test;, +, +import static com.squareup.okhttp.internal.Util.headerEntries;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.CANCEL;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.INTERNAL_ERROR;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.INVALID_STREAM;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.PROTOCOL_ERROR;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.REFUSED_STREAM;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.STREAM_IN_USE;, +import static com.squareup.okhttp.internal.spdy.Settings.DEFAULT_INITIAL_WINDOW_SIZE;, +import static com.squareup.okhttp.internal.spdy.Settings.PERSIST_VALUE;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_DATA;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_GOAWAY;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_PING;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_RST_STREAM;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_SETTINGS;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_WINDOW_UPDATE;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +public final class SpdyConnectionTest {, +  private static final Variant SPDY3 = new Spdy3();, +  private static final Variant HTTP_2 = new Http20Draft12();, +  private final MockSpdyPeer peer = new MockSpdyPeer();, +, +  @After public void tearDown() throws Exception {, +    peer.close();, +  }, +, +  @Test public void clientCreatesStreamAndServerReplies() throws Exception {, +    // write the mocking script, +    peer.acceptFrame(); // SYN_STREAM, +    peer.sendFrame(), +        .synReply(false, 3, headerEntries("a", "android"));, +    peer.sendFrame().data(true, 3, new Buffer().writeUtf8("robot"));, +    peer.acceptFrame(); // DATA, +    peer.play();, +, +    // play it back, +    SpdyConnection connection = connection(peer, SPDY3);, +    SpdyStream stream = connection.newStream(headerEntries("b", "banana"), true, true);, +    assertEquals(headerEntries("a", "android"), stream.getResponseHeaders());, +    assertStreamData("robot", stream.getSource());, +    BufferedSink out = Okio.buffer(stream.getSink());, +    out.writeUtf8("c3po");, +    out.close();, +    assertEquals(0, connection.openStreamCount());, +, +    // verify the peer received what was expected, +    MockSpdyPeer.InFrame synStream = peer.takeFrame();, +    assertEquals(TYPE_HEADERS, synStream.type);, +    assertEquals(HeadersMode.SPDY_SYN_STREAM, synStream.headersMode);, +    assertFalse(synStream.inFinished);, +    assertFalse(synStream.outFinished);]