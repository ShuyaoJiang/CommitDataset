[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/MultipartBuilderTest.java, +            Headers.of("Content-Disposition", "form-data; name=\"submit-name\""),, +            Headers.of("Content-Disposition", "form-data; name=\"files\""),, +                    Headers.of("Content-Disposition", "file; filename=\"file1.txt\""),, +                    Headers.of(, +      new MultipartBuilder().addPart(, +          Headers.of("Content-Type", "text/plain"),, +          RequestBody.create(null, "Hello, World!"));, +      new MultipartBuilder().addPart(, +          Headers.of("Content-Length", "13"),, +          RequestBody.create(null, "Hello, World!"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/MultipartBuilderTest.java, +            Headers.of("Content-Disposition", "form-data; name=\"submit-name\""),, +            Headers.of("Content-Disposition", "form-data; name=\"files\""),, +                    Headers.of("Content-Disposition", "file; filename=\"file1.txt\""),, +                    Headers.of(, +      new MultipartBuilder().addPart(, +          Headers.of("Content-Type", "text/plain"),, +          RequestBody.create(null, "Hello, World!"));, +      new MultipartBuilder().addPart(, +          Headers.of("Content-Length", "13"),, +          RequestBody.create(null, "Hello, World!"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java, +import static org.junit.Assert.fail;, +, +  @Test public void ofTrims() {, +    Headers headers = Headers.of("\t User-Agent \n", " \r OkHttp ");, +    assertEquals("User-Agent", headers.name(0));, +    assertEquals("OkHttp", headers.value(0));, +  }, +, +  @Test public void ofThrowsOddNumberOfHeaders() {, +    try {, +      Headers.of("User-Agent", "OkHttp", "Content-Length");, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @Test public void ofThrowsOnNull() {, +    try {, +      Headers.of("User-Agent", null);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @Test public void ofThrowsOnEmptyName() {, +    try {, +      Headers.of("", "OkHttp");, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @Test public void ofAcceptsEmptyValue() {, +    Headers headers = Headers.of("User-Agent", "");, +    assertEquals("", headers.value(0));, +  }, +, +  @Test public void ofMakesDefensiveCopy() {, +    String[] namesAndValues = {, +        "User-Agent",, +        "OkHttp", +    };, +    Headers headers = Headers.of(namesAndValues);, +    namesAndValues[1] = "Chrome";, +    assertEquals("OkHttp", headers.value(0));, +  }, +, +  @Test public void ofRejectsNulChar() {, +    try {, +      Headers.of("User-Agent", "Square\u0000OkHttp");, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/MultipartBuilderTest.java, +            Headers.of("Content-Disposition", "form-data; name=\"submit-name\""),, +            Headers.of("Content-Disposition", "form-data; name=\"files\""),, +                    Headers.of("Content-Disposition", "file; filename=\"file1.txt\""),, +                    Headers.of(, +      new MultipartBuilder().addPart(, +          Headers.of("Content-Type", "text/plain"),, +          RequestBody.create(null, "Hello, World!"));, +      new MultipartBuilder().addPart(, +          Headers.of("Content-Length", "13"),, +          RequestBody.create(null, "Hello, World!"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java, +import static org.junit.Assert.fail;, +, +  @Test public void ofTrims() {, +    Headers headers = Headers.of("\t User-Agent \n", " \r OkHttp ");, +    assertEquals("User-Agent", headers.name(0));, +    assertEquals("OkHttp", headers.value(0));, +  }, +, +  @Test public void ofThrowsOddNumberOfHeaders() {, +    try {, +      Headers.of("User-Agent", "OkHttp", "Content-Length");]