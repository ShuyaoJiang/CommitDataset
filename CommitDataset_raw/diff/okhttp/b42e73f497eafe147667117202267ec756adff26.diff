[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.Util;, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.net.ServerSocket;, +import javax.net.ServerSocketFactory;, +  private Cache cache = new Cache(new File("/cache/"), Integer.MAX_VALUE, fileSystem);, +  private ServerSocket nullServer;, +    Util.closeQuietly(nullServer);, +  @Test public void cancelDuringHttpConnect() throws Exception {, +    cancelDuringConnect("http");, +  }, +, +  @Test public void cancelDuringHttpsConnect() throws Exception {, +    cancelDuringConnect("https");, +  }, +, +  /** Cancel a call that's waiting for connect to complete. */, +  private void cancelDuringConnect(String scheme) throws Exception {, +    InetSocketAddress socketAddress = startNullServer();, +, +    HttpUrl url = new HttpUrl.Builder(), +        .scheme(scheme), +        .host(socketAddress.getHostName()), +        .port(socketAddress.getPort()), +        .build();, +, +    long cancelDelayMillis = 300L;, +    Call call = client.newCall(new Request.Builder().url(url).build());, +    cancelLater(call, cancelDelayMillis);, +, +    long startNanos = System.nanoTime();, +    try {, +      call.execute();, +      fail();, +    } catch (IOException expected) {, +    }, +    long elapsedNanos = System.nanoTime() - startNanos;, +    assertEquals(cancelDelayMillis, TimeUnit.NANOSECONDS.toMillis(elapsedNanos), 100f);, +  }, +, +  private InetSocketAddress startNullServer() throws IOException {, +    InetSocketAddress address = new InetSocketAddress(InetAddress.getByName("localhost"), 0);, +    nullServer = ServerSocketFactory.getDefault().createServerSocket();, +    nullServer.bind(address);, +    return new InetSocketAddress(address.getAddress(), nullServer.getLocalPort());, +  }, +, +  private void cancelLater(final Call call, final long delay) {, +    new Thread("canceler") {, +      @Override public void run() {, +        try {, +          Thread.sleep(delay);, +        } catch (InterruptedException e) {, +          throw new AssertionError();, +        }, +        call.cancel();, +      }, +    }.start();, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.internal.Util;, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.net.ServerSocket;, +import javax.net.ServerSocketFactory;, +  private Cache cache = new Cache(new File("/cache/"), Integer.MAX_VALUE, fileSystem);, +  private ServerSocket nullServer;, +    Util.closeQuietly(nullServer);, +  @Test public void cancelDuringHttpConnect() throws Exception {, +    cancelDuringConnect("http");, +  }, +, +  @Test public void cancelDuringHttpsConnect() throws Exception {, +    cancelDuringConnect("https");, +  }, +, +  /** Cancel a call that's waiting for connect to complete. */, +  private void cancelDuringConnect(String scheme) throws Exception {, +    InetSocketAddress socketAddress = startNullServer();, +, +    HttpUrl url = new HttpUrl.Builder(), +        .scheme(scheme), +        .host(socketAddress.getHostName()), +        .port(socketAddress.getPort()), +        .build();, +, +    long cancelDelayMillis = 300L;, +    Call call = client.newCall(new Request.Builder().url(url).build());, +    cancelLater(call, cancelDelayMillis);, +, +    long startNanos = System.nanoTime();, +    try {, +      call.execute();, +      fail();, +    } catch (IOException expected) {, +    }, +    long elapsedNanos = System.nanoTime() - startNanos;, +    assertEquals(cancelDelayMillis, TimeUnit.NANOSECONDS.toMillis(elapsedNanos), 100f);]