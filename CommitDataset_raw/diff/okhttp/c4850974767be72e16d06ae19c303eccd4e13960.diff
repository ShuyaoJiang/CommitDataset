[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/SocksProxy.java, +  public final String HOSTNAME_THAT_ONLY_THE_PROXY_KNOWS = "onlyProxyCanResolveMe.org";, +, +, +        // mockup for DNS resolving at the proxy, +        if (domainName.equalsIgnoreCase(HOSTNAME_THAT_ONLY_THE_PROXY_KNOWS)), +          toAddress = InetAddress.getLoopbackAddress(); // resolve, +          // HOSTNAME_THAT_ONLY_THE_PROXY_KNOWS to localhost, +        else, +          toAddress = InetAddress.getByName(domainName);  // really resolve the address, +, +        logger.log(Level.INFO, "SocksProxy resolved " + domainName + " to " + toAddress);, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/SocksProxy.java, +  public final String HOSTNAME_THAT_ONLY_THE_PROXY_KNOWS = "onlyProxyCanResolveMe.org";, +, +, +        // mockup for DNS resolving at the proxy, +        if (domainName.equalsIgnoreCase(HOSTNAME_THAT_ONLY_THE_PROXY_KNOWS)), +          toAddress = InetAddress.getLoopbackAddress(); // resolve, +          // HOSTNAME_THAT_ONLY_THE_PROXY_KNOWS to localhost, +        else, +          toAddress = InetAddress.getByName(domainName);  // really resolve the address, +, +        logger.log(Level.INFO, "SocksProxy resolved " + domainName + " to " + toAddress);, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/SocksProxyTest.java, +import java.net.URL;, +, +, +, +  @Test, +  public void checkRemoteDNSResolve() throws Exception {, +    // this testcase will fail, if the target is resolved locally instead of through the proxy, +, +    server.enqueue(new MockResponse().setBody("abc"));, +, +    OkHttpClient client = new OkHttpClient(), +            .setProxy(socksProxy.proxy());, +, +    URL url = (new HttpUrl.Builder().scheme("http"), +            .host(socksProxy.HOSTNAME_THAT_ONLY_THE_PROXY_KNOWS), +            .port(server.getPort()), +            .build(), +            .resolve("/")).url();, +, +    Request request1 = new Request.Builder().url(url).build();, +    Response response1 = client.newCall(request1).execute();, +    assertEquals("abc", response1.body().string());, +, +    assertEquals(1, socksProxy.connectionCount());, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/SocksProxy.java, +  public final String HOSTNAME_THAT_ONLY_THE_PROXY_KNOWS = "onlyProxyCanResolveMe.org";, +, +, +        // mockup for DNS resolving at the proxy, +        if (domainName.equalsIgnoreCase(HOSTNAME_THAT_ONLY_THE_PROXY_KNOWS)), +          toAddress = InetAddress.getLoopbackAddress(); // resolve, +          // HOSTNAME_THAT_ONLY_THE_PROXY_KNOWS to localhost, +        else, +          toAddress = InetAddress.getByName(domainName);  // really resolve the address, +, +        logger.log(Level.INFO, "SocksProxy resolved " + domainName + " to " + toAddress);, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/SocksProxyTest.java, +import java.net.URL;, +, +, +, +  @Test, +  public void checkRemoteDNSResolve() throws Exception {, +    // this testcase will fail, if the target is resolved locally instead of through the proxy, +, +    server.enqueue(new MockResponse().setBody("abc"));, +, +    OkHttpClient client = new OkHttpClient(), +            .setProxy(socksProxy.proxy());, +, +    URL url = (new HttpUrl.Builder().scheme("http"), +            .host(socksProxy.HOSTNAME_THAT_ONLY_THE_PROXY_KNOWS), +            .port(server.getPort()), +            .build(), +            .resolve("/")).url();, +, +    Request request1 = new Request.Builder().url(url).build();, +    Response response1 = client.newCall(request1).execute();, +    assertEquals("abc", response1.body().string());, +, +    assertEquals(1, socksProxy.connectionCount());, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +, +, +, +        + route.inetSocketAddress.toString(), +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/SocksProxy.java, +  public final String HOSTNAME_THAT_ONLY_THE_PROXY_KNOWS = "onlyProxyCanResolveMe.org";, +, +]