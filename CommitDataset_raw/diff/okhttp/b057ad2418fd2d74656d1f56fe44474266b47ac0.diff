[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      server.setNpnEnabled(true);, +      server.setNpnProtocols(protocols);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      server.setNpnEnabled(true);, +      server.setNpnProtocols(protocols);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).enqueue(callback);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      server.setNpnEnabled(true);, +      server.setNpnProtocols(protocols);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).enqueue(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().setNpnProtocols(sslSocket, spdyProtocols);, +    String protocolString = Platform.get().getNpnSelectedProtocol(sslSocket);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      server.setNpnEnabled(true);, +      server.setNpnProtocols(protocols);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).enqueue(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().setNpnProtocols(sslSocket, spdyProtocols);, +    String protocolString = Platform.get().getNpnSelectedProtocol(sslSocket);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +   * When {@link MockWebServer#setNpnProtocols(java.util.List) protocols}, +   * include a SPDY variant, this attaches a pushed stream to this response., +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      server.setNpnEnabled(true);, +      server.setNpnProtocols(protocols);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).enqueue(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().setNpnProtocols(sslSocket, spdyProtocols);, +    String protocolString = Platform.get().getNpnSelectedProtocol(sslSocket);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +   * When {@link MockWebServer#setNpnProtocols(java.util.List) protocols}, +   * include a SPDY variant, this attaches a pushed stream to this response., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private boolean npnEnabled = true;, +    this.npnEnabled = npnEnabled;, +    this.npnProtocols = Util.immutableList(protocols);, +          if (npnEnabled) {, +            Platform.get().setNpnProtocols(sslSocket, npnProtocols);, +          if (npnEnabled) {, +            String protocolString = Platform.get().getNpnSelectedProtocol(sslSocket);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      server.setNpnEnabled(true);, +      server.setNpnProtocols(protocols);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).enqueue(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().setNpnProtocols(sslSocket, spdyProtocols);, +    String protocolString = Platform.get().getNpnSelectedProtocol(sslSocket);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +   * When {@link MockWebServer#setNpnProtocols(java.util.List) protocols}, +   * include a SPDY variant, this attaches a pushed stream to this response., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private boolean npnEnabled = true;, +    this.npnEnabled = npnEnabled;, +    this.npnProtocols = Util.immutableList(protocols);, +          if (npnEnabled) {, +            Platform.get().setNpnProtocols(sslSocket, npnProtocols);, +          if (npnEnabled) {, +            String protocolString = Platform.get().getNpnSelectedProtocol(sslSocket);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRule.java, +import com.squareup.okhttp.internal.Util;, +import java.net.ServerSocket;, +  private final int port = pickPort();, +      server.play(port);, +    return port;, +, +  private static int pickPort() {, +    ServerSocket socket = null;, +    try {, +      socket = new ServerSocket(0);, +      return socket.getLocalPort();, +    } catch (IOException e) {, +      throw new RuntimeException(e);, +    } finally {, +      Util.closeQuietly(socket);, +    }, +  }, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +      server.setNpnEnabled(true);, +      server.setNpnProtocols(protocols);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).enqueue(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    Platform.get().setNpnProtocols(sslSocket, spdyProtocols);, +    String protocolString = Platform.get().getNpnSelectedProtocol(sslSocket);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +   * When {@link MockWebServer#setNpnProtocols(java.util.List) protocols}, +   * include a SPDY variant, this attaches a pushed stream to this response., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private boolean npnEnabled = true;, +    this.npnEnabled = npnEnabled;, +    this.npnProtocols = Util.immutableList(protocols);, +          if (npnEnabled) {, +            Platform.get().setNpnProtocols(sslSocket, npnProtocols);]