[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.mockwebserver.QueueDispatcher;, +  private RecordingEventListener listener = new RecordingEventListener();, +    // Set to 2 because the seeding request will count down before the retried request does., +    CountDownLatch requestFinished = new CountDownLatch(2);, +, +    QueueDispatcher dispatcher = new QueueDispatcher() {, +      @Override public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +        if (peek().getSocketPolicy() == SocketPolicy.DISCONNECT_AFTER_REQUEST) {, +          requestFinished.await();, +        }, +        return super.dispatch(request);, +      }, +    };, +    dispatcher.enqueueResponse(new MockResponse().setBody("seed connection pool"));, +    dispatcher.enqueueResponse(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    dispatcher.enqueueResponse(new MockResponse().setBody("retry success"));, +    server.setDispatcher(dispatcher);, +, +    listener = new RecordingEventListener() {, +      @Override public void responseHeadersStart(Call call) {, +        requestFinished.countDown();, +        super.responseHeadersStart(call);, +      }, +    };, +        .eventListener(listener), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.mockwebserver.QueueDispatcher;, +  private RecordingEventListener listener = new RecordingEventListener();, +    // Set to 2 because the seeding request will count down before the retried request does., +    CountDownLatch requestFinished = new CountDownLatch(2);, +, +    QueueDispatcher dispatcher = new QueueDispatcher() {, +      @Override public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +        if (peek().getSocketPolicy() == SocketPolicy.DISCONNECT_AFTER_REQUEST) {, +          requestFinished.await();, +        }, +        return super.dispatch(request);, +      }, +    };, +    dispatcher.enqueueResponse(new MockResponse().setBody("seed connection pool"));, +    dispatcher.enqueueResponse(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    dispatcher.enqueueResponse(new MockResponse().setBody("retry success"));, +    server.setDispatcher(dispatcher);, +, +    listener = new RecordingEventListener() {, +      @Override public void responseHeadersStart(Call call) {, +        requestFinished.countDown();, +        super.responseHeadersStart(call);, +      }, +    };, +        .eventListener(listener), +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import java.util.Arrays;, +    assertThat(Cookie.parse(50000L, url, "a=b; Max-Age=1").expiresAt()).isEqualTo(51000L);, +    assertThat(Cookie.parse(50000L, url, "a=b; Max-Age=9223372036854724").expiresAt()).isEqualTo(, +    assertThat(Cookie.parse(50000L, url, "a=b; Max-Age=9223372036854725").expiresAt()).isEqualTo(, +    assertThat(Cookie.parse(50000L, url, "a=b; Max-Age=9223372036854726").expiresAt()).isEqualTo(, +    assertThat(Cookie.parse(9223372036854773807L, url, "a=b; Max-Age=1").expiresAt()).isEqualTo(, +    assertThat(Cookie.parse(9223372036854773807L, url, "a=b; Max-Age=2").expiresAt()).isEqualTo(, +    assertThat(Cookie.parse(9223372036854773807L, url, "a=b; Max-Age=3").expiresAt()).isEqualTo(, +    assertThat(Cookie.parse(50000L, url, "a=b; Max-Age=10000000000000000000").expiresAt()).isEqualTo(, +    assertThat(Cookie.parse(50000L, url, "a=b; Max-Age=-1").expiresAt()).isEqualTo(Long.MIN_VALUE);, +    assertThat(Cookie.parse(50000L, url, "a=b; Max-Age=0").expiresAt()).isEqualTo(Long.MIN_VALUE);, +    assertThat(Cookie.parse(50000L, url, "a=b; Max-Age=-9223372036854775808").expiresAt()).isEqualTo(, +    assertThat(Cookie.parse(50000L, url, "a=b; Max-Age=-9223372036854775809").expiresAt()).isEqualTo(, +    assertThat(Cookie.parse(50000L, url, "a=b; Max-Age=-10000000000000000000").expiresAt()).isEqualTo(, +    assertThat(Cookie.parse(, +    assertThat(Cookie.parse(, +    assertThat(Cookie.parse(, +    assertThat(Cookie.parse(, +    assertThat(Cookie.parse(, +    assertThat(Cookie.parse(0L, url, "a=b; ", +    assertThat(Cookie.parse(0L, url, "a=b").persistent()).isFalse();, +    assertThat(Cookie.parse(0L, url, "a=b; Max-Age=1").persistent()).isTrue();, +    assertThat(Cookie.parse(0L, url, "a=b; Expires=Thu, 01 Jan 1970 00:00:01 GMT").persistent()).isTrue();, +    } catch (NullPointerException expected) {, +    } catch (NullPointerException expected) {, +    } catch (NullPointerException expected) {, +    } catch (NullPointerException expected) {, +      Cookie cookieA = Cookie.parse(0, url, stringA);, +        Cookie cookieB = Cookie.parse(0, url, stringB);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.mockwebserver.QueueDispatcher;, +  private RecordingEventListener listener = new RecordingEventListener();, +    // Set to 2 because the seeding request will count down before the retried request does., +    CountDownLatch requestFinished = new CountDownLatch(2);, +, +    QueueDispatcher dispatcher = new QueueDispatcher() {, +      @Override public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +        if (peek().getSocketPolicy() == SocketPolicy.DISCONNECT_AFTER_REQUEST) {, +          requestFinished.await();, +        }, +        return super.dispatch(request);, +      }, +    };, +    dispatcher.enqueueResponse(new MockResponse().setBody("seed connection pool"));, +    dispatcher.enqueueResponse(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    dispatcher.enqueueResponse(new MockResponse().setBody("retry success"));, +    server.setDispatcher(dispatcher);]