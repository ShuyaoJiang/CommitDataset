[+++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.publicsuffix;, +, +import java.io.IOException;, +import java.io.InputStream;, +import okio.Buffer;, +import okio.BufferedSource;, +import okio.GzipSource;, +import okio.Okio;, +import org.junit.Test;, +, +import static okhttp3.internal.publicsuffix.PublicSuffixDatabase.PUBLIC_SUFFIX_RESOURCE;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +, +public final class PublicSuffixDatabaseTest {, +  private final PublicSuffixDatabase publicSuffixDatabase = new PublicSuffixDatabase();, +, +  @Test public void longestMatchWins() {, +    Buffer buffer = new Buffer(), +        .writeUtf8("com\n"), +        .writeUtf8("my.square.com\n"), +        .writeUtf8("square.com\n");, +    publicSuffixDatabase.setListBytes(buffer.readByteArray(), new byte[]{});, +, +    assertEquals("example.com", publicSuffixDatabase.getEffectiveTldPlusOne("example.com"));, +    assertEquals("example.com", publicSuffixDatabase.getEffectiveTldPlusOne("foo.example.com"));, +    assertEquals("bar.square.com",, +        publicSuffixDatabase.getEffectiveTldPlusOne("foo.bar.square.com"));, +    assertEquals("foo.my.square.com",, +        publicSuffixDatabase.getEffectiveTldPlusOne("foo.my.square.com"));, +  }, +, +  @Test public void wildcardMatch() {, +    Buffer buffer = new Buffer(), +        .writeUtf8("*.square.com\n"), +        .writeUtf8("com\n"), +        .writeUtf8("example.com\n");, +    publicSuffixDatabase.setListBytes(buffer.readByteArray(), new byte[]{});, +, +    assertNull(publicSuffixDatabase.getEffectiveTldPlusOne("my.square.com"));, +    assertEquals("foo.my.square.com",, +        publicSuffixDatabase.getEffectiveTldPlusOne("foo.my.square.com"));, +    assertEquals("foo.my.square.com",, +        publicSuffixDatabase.getEffectiveTldPlusOne("bar.foo.my.square.com"));, +  }, +, +  @Test public void boundarySearches() {, +    Buffer buffer = new Buffer(), +        .writeUtf8("bbb\n"), +        .writeUtf8("ddd\n"), +        .writeUtf8("fff\n");, +    publicSuffixDatabase.setListBytes(buffer.readByteArray(), new byte[]{});, +, +    assertNull(publicSuffixDatabase.getEffectiveTldPlusOne("aaa"));, +    assertNull(publicSuffixDatabase.getEffectiveTldPlusOne("ggg"));, +    assertNull(publicSuffixDatabase.getEffectiveTldPlusOne("ccc"));, +    assertNull(publicSuffixDatabase.getEffectiveTldPlusOne("eee"));, +  }, +, +  @Test public void exceptionRule() {, +    Buffer exception = new Buffer(), +        .writeUtf8("my.square.jp\n");, +    Buffer buffer = new Buffer(), +        .writeUtf8("*.jp\n"), +        .writeUtf8("*.square.jp\n"), +        .writeUtf8("example.com\n"), +        .writeUtf8("square.com\n");, +    publicSuffixDatabase.setListBytes(buffer.readByteArray(), exception.readByteArray());, +, +    assertEquals("my.square.jp", publicSuffixDatabase.getEffectiveTldPlusOne("my.square.jp"));, +    assertEquals("my.square.jp", publicSuffixDatabase.getEffectiveTldPlusOne("foo.my.square.jp"));, +    assertNull(publicSuffixDatabase.getEffectiveTldPlusOne("my1.square.jp"));, +  }, +, +  @Test public void noEffectiveTldPlusOne() {, +    Buffer exception = new Buffer(), +        .writeUtf8("my.square.jp\n");, +    Buffer buffer = new Buffer(), +        .writeUtf8("*.jp\n"), +        .writeUtf8("*.square.jp\n"), +        .writeUtf8("example.com\n"), +        .writeUtf8("square.com\n");, +    publicSuffixDatabase.setListBytes(buffer.readByteArray(), exception.readByteArray());, +]