[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private InetAddress inetAddress;, +    if (inetAddress == null) throw new IllegalStateException("Call start() before getHostName()");, +    return inetAddress.getHostName();, +    if (inetAddress == null) {, +    return new Proxy(Proxy.Type.HTTP, new InetSocketAddress(inetAddress, getPort()));, +   * Starts the server., +    inetAddress = InetAddress.getByName("localhost");, +    serverSocket.setReuseAddress(port != 0); // Reuse the port if the port number was specified., +    serverSocket.bind(new InetSocketAddress(inetAddress, port), 50);, +    this.port = serverSocket.getLocalPort();, +    executor.execute(new NamedRunnable("MockWebServer %s", this.port) {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private InetAddress inetAddress;, +    if (inetAddress == null) throw new IllegalStateException("Call start() before getHostName()");, +    return inetAddress.getHostName();, +    if (inetAddress == null) {, +    return new Proxy(Proxy.Type.HTTP, new InetSocketAddress(inetAddress, getPort()));, +   * Starts the server., +    inetAddress = InetAddress.getByName("localhost");, +    serverSocket.setReuseAddress(port != 0); // Reuse the port if the port number was specified., +    serverSocket.bind(new InetSocketAddress(inetAddress, port), 50);, +    this.port = serverSocket.getLocalPort();, +    executor.execute(new NamedRunnable("MockWebServer %s", this.port) {, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java, +    assertNull(conditionalRequest.getHeader("If-Modified-Since"));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private InetAddress inetAddress;, +    if (inetAddress == null) throw new IllegalStateException("Call start() before getHostName()");, +    return inetAddress.getHostName();, +    if (inetAddress == null) {, +    return new Proxy(Proxy.Type.HTTP, new InetSocketAddress(inetAddress, getPort()));, +   * Starts the server., +    inetAddress = InetAddress.getByName("localhost");, +    serverSocket.setReuseAddress(port != 0); // Reuse the port if the port number was specified., +    serverSocket.bind(new InetSocketAddress(inetAddress, port), 50);, +    this.port = serverSocket.getLocalPort();, +    executor.execute(new NamedRunnable("MockWebServer %s", this.port) {, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java, +    assertNull(conditionalRequest.getHeader("If-Modified-Since"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheControlTest.java, +    String header = "no-cache, no-store, max-age=1, s-maxage=2, public, must-revalidate, ", +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private InetAddress inetAddress;, +    if (inetAddress == null) throw new IllegalStateException("Call start() before getHostName()");, +    return inetAddress.getHostName();, +    if (inetAddress == null) {, +    return new Proxy(Proxy.Type.HTTP, new InetSocketAddress(inetAddress, getPort()));, +   * Starts the server., +    inetAddress = InetAddress.getByName("localhost");, +    serverSocket.setReuseAddress(port != 0); // Reuse the port if the port number was specified., +    serverSocket.bind(new InetSocketAddress(inetAddress, port), 50);, +    this.port = serverSocket.getLocalPort();, +    executor.execute(new NamedRunnable("MockWebServer %s", this.port) {, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java, +    assertNull(conditionalRequest.getHeader("If-Modified-Since"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheControlTest.java, +    String header = "no-cache, no-store, max-age=1, s-maxage=2, public, must-revalidate, ", +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLSession;, +import okio.Buffer;, +import okio.BufferedSink;, +import okio.BufferedSource;, +import okio.GzipSink;, +import okio.Okio;, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.TemporaryFolder;, +  /** If both If-Modified-Since and If-None-Match conditions apply, send only If-None-Match. */, +    assertNull(conditionalRequest.getHeader("If-Modified-Since"));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private InetAddress inetAddress;, +    if (inetAddress == null) throw new IllegalStateException("Call start() before getHostName()");, +    return inetAddress.getHostName();, +    if (inetAddress == null) {, +    return new Proxy(Proxy.Type.HTTP, new InetSocketAddress(inetAddress, getPort()));, +   * Starts the server., +    inetAddress = InetAddress.getByName("localhost");, +    serverSocket.setReuseAddress(port != 0); // Reuse the port if the port number was specified., +    serverSocket.bind(new InetSocketAddress(inetAddress, port), 50);, +    this.port = serverSocket.getLocalPort();, +    executor.execute(new NamedRunnable("MockWebServer %s", this.port) {, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java, +    assertNull(conditionalRequest.getHeader("If-Modified-Since"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheControlTest.java, +    String header = "no-cache, no-store, max-age=1, s-maxage=2, public, must-revalidate, ", +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLSession;, +import okio.Buffer;, +import okio.BufferedSink;, +import okio.BufferedSource;, +import okio.GzipSink;, +import okio.Okio;, +import org.junit.After;]