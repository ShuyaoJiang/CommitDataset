[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        new RealWebSocket(false, source, sink, new SecureRandom(), listener,, +            request.getPath()) {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        new RealWebSocket(false, source, sink, new SecureRandom(), listener,, +            request.getPath()) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener, url) {, +    server = new RealWebSocket(false, client2Server, server2client, random, serverListener, url) {, +    Thread.sleep(1000); // Wait for pong to be written., +    server.readMessage(); // Read the ping, enqueue the pong., +    Thread.sleep(1000); // Wait for pong to be written., +    client.readMessage();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        new RealWebSocket(false, source, sink, new SecureRandom(), listener,, +            request.getPath()) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener, url) {, +    server = new RealWebSocket(false, client2Server, server2client, random, serverListener, url) {, +    Thread.sleep(1000); // Wait for pong to be written., +    server.readMessage(); // Read the ping, enqueue the pong., +    Thread.sleep(1000); // Wait for pong to be written., +    client.readMessage();, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java, +          // All of these suites are available on Android 5.0; earlier releases support a subset of, +, +          // Note that the following cipher suites are all on HTTP/2's bad cipher suites list. We'll, +          // continue to include them until better suites are commonly available. For example, none, +          // of the better cipher suites listed above shipped with Android 4.4 or Java 7., +          CipherSuite.TLS_RSA_WITH_3DES_EDE_CBC_SHA, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        new RealWebSocket(false, source, sink, new SecureRandom(), listener,, +            request.getPath()) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener, url) {, +    server = new RealWebSocket(false, client2Server, server2client, random, serverListener, url) {, +    Thread.sleep(1000); // Wait for pong to be written., +    server.readMessage(); // Read the ping, enqueue the pong., +    Thread.sleep(1000); // Wait for pong to be written., +    client.readMessage();, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java, +          // All of these suites are available on Android 5.0; earlier releases support a subset of, +, +          // Note that the following cipher suites are all on HTTP/2's bad cipher suites list. We'll, +          // continue to include them until better suites are commonly available. For example, none, +          // of the better cipher suites listed above shipped with Android 4.4 or Java 7., +          CipherSuite.TLS_RSA_WITH_3DES_EDE_CBC_SHA, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java, +import com.squareup.okhttp.internal.Util;, +import java.util.concurrent.LinkedBlockingDeque;, +import java.util.concurrent.ThreadPoolExecutor;, +import static java.util.concurrent.TimeUnit.SECONDS;, +      final WebSocketListener listener, final String url) {, +    // Pings come in on the reader thread. This executor contends with callers for writing pongs., +    final ThreadPoolExecutor pongExecutor = new ThreadPoolExecutor(1, 1, 1, SECONDS,, +        new LinkedBlockingDeque<Runnable>(),, +        Util.threadFactory(String.format("OkHttp %s WebSocket", url), true));, +    pongExecutor.allowCoreThreadTimeOut(true);, +, +        pongExecutor.execute(new NamedRunnable("OkHttp %s WebSocket Pong", url) {, +      @Override public void onClose(int code, String reason) {, +  /** Called on the reader thread when a close frame is encountered. */, +        // The reader thread will read no more frames so use it to send the response., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        new RealWebSocket(false, source, sink, new SecureRandom(), listener,, +            request.getPath()) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener, url) {, +    server = new RealWebSocket(false, client2Server, server2client, random, serverListener, url) {, +    Thread.sleep(1000); // Wait for pong to be written., +    server.readMessage(); // Read the ping, enqueue the pong., +    Thread.sleep(1000); // Wait for pong to be written., +    client.readMessage();, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java, +          // All of these suites are available on Android 5.0; earlier releases support a subset of, +, +          // Note that the following cipher suites are all on HTTP/2's bad cipher suites list. We'll, +          // continue to include them until better suites are commonly available. For example, none, +          // of the better cipher suites listed above shipped with Android 4.4 or Java 7., +          CipherSuite.TLS_RSA_WITH_3DES_EDE_CBC_SHA, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java, +import com.squareup.okhttp.internal.Util;, +import java.util.concurrent.LinkedBlockingDeque;, +import java.util.concurrent.ThreadPoolExecutor;, +import static java.util.concurrent.TimeUnit.SECONDS;, +      final WebSocketListener listener, final String url) {, +    // Pings come in on the reader thread. This executor contends with callers for writing pongs., +    final ThreadPoolExecutor pongExecutor = new ThreadPoolExecutor(1, 1, 1, SECONDS,, +        new LinkedBlockingDeque<Runnable>(),, +        Util.threadFactory(String.format("OkHttp %s WebSocket", url), true));, +    pongExecutor.allowCoreThreadTimeOut(true);, +, +        pongExecutor.execute(new NamedRunnable("OkHttp %s WebSocket Pong", url) {, +      @Override public void onClose(int code, String reason) {, +  /** Called on the reader thread when a close frame is encountered. */, +        // The reader thread will read no more frames so use it to send the response., +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/ws/WebSocketCall.java, +        new ConnectionWebSocket(response, connection, source, sink, random, listener);, +    public ConnectionWebSocket(Response response, Connection connection, BufferedSource source,, +        BufferedSink sink, Random random, WebSocketListener listener) {]