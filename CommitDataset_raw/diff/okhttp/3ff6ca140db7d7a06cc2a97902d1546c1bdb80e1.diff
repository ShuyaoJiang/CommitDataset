[+++ b/pom.xml, +        <mockwebserver.version>20120731</mockwebserver.version>, +++ b/pom.xml, +        <mockwebserver.version>20120731</mockwebserver.version>, +++ b/src/main/java/com/squareup/okhttp/OkHttpConnection.java, +    /**, +     * Returns a new OkHttpConnection or OkHttpsConnection to {@code url}., +     */, +        String protocol = url.getProtocol();, +        if (protocol.equals("http")) {, +            return new libcore.net.http.HttpURLConnectionImpl(url, 80);, +        } else if (protocol.equals("https")) {, +            return new libcore.net.http.HttpsURLConnectionImpl(url, 443);, +        } else {, +            throw new IllegalArgumentException();, +        }, +    /**, +     * Returns a new OkHttpConnection or OkHttpsConnection to {@code url} that, +     * connects via {@code proxy}., +     */, +        String protocol = url.getProtocol();, +        if (protocol.equals("http")) {, +            return new libcore.net.http.HttpURLConnectionImpl(url, 80, proxy);, +        } else if (protocol.equals("https")) {, +            return new libcore.net.http.HttpsURLConnectionImpl(url, 443, proxy);, +        } else {, +            throw new IllegalArgumentException();, +        }, +++ b/pom.xml, +        <mockwebserver.version>20120731</mockwebserver.version>, +++ b/src/main/java/com/squareup/okhttp/OkHttpConnection.java, +    /**, +     * Returns a new OkHttpConnection or OkHttpsConnection to {@code url}., +     */, +        String protocol = url.getProtocol();, +        if (protocol.equals("http")) {, +            return new libcore.net.http.HttpURLConnectionImpl(url, 80);, +        } else if (protocol.equals("https")) {, +            return new libcore.net.http.HttpsURLConnectionImpl(url, 443);, +        } else {, +            throw new IllegalArgumentException();, +        }, +    /**, +     * Returns a new OkHttpConnection or OkHttpsConnection to {@code url} that, +     * connects via {@code proxy}., +     */, +        String protocol = url.getProtocol();, +        if (protocol.equals("http")) {, +            return new libcore.net.http.HttpURLConnectionImpl(url, 80, proxy);, +        } else if (protocol.equals("https")) {, +            return new libcore.net.http.HttpsURLConnectionImpl(url, 443, proxy);, +        } else {, +            throw new IllegalArgumentException();, +        }, +++ b/src/main/java/com/squareup/okhttp/OkHttpsConnection.java, +++ b/pom.xml, +        <mockwebserver.version>20120731</mockwebserver.version>, +++ b/src/main/java/com/squareup/okhttp/OkHttpConnection.java, +    /**, +     * Returns a new OkHttpConnection or OkHttpsConnection to {@code url}., +     */, +        String protocol = url.getProtocol();, +        if (protocol.equals("http")) {, +            return new libcore.net.http.HttpURLConnectionImpl(url, 80);, +        } else if (protocol.equals("https")) {, +            return new libcore.net.http.HttpsURLConnectionImpl(url, 443);, +        } else {, +            throw new IllegalArgumentException();, +        }, +    /**, +     * Returns a new OkHttpConnection or OkHttpsConnection to {@code url} that, +     * connects via {@code proxy}., +     */, +        String protocol = url.getProtocol();, +        if (protocol.equals("http")) {, +            return new libcore.net.http.HttpURLConnectionImpl(url, 80, proxy);, +        } else if (protocol.equals("https")) {, +            return new libcore.net.http.HttpsURLConnectionImpl(url, 443, proxy);, +        } else {, +            throw new IllegalArgumentException();, +        }, +++ b/src/main/java/com/squareup/okhttp/OkHttpsConnection.java, +++ b/src/test/java/libcore/net/http/ExternalSpdyExample.java, +import com.squareup.okhttp.OkHttpConnection;, +        OkHttpsConnection connection = (OkHttpsConnection) OkHttpConnection.open(url);, +++ b/pom.xml, +        <mockwebserver.version>20120731</mockwebserver.version>, +++ b/src/main/java/com/squareup/okhttp/OkHttpConnection.java, +    /**, +     * Returns a new OkHttpConnection or OkHttpsConnection to {@code url}., +     */, +        String protocol = url.getProtocol();, +        if (protocol.equals("http")) {, +            return new libcore.net.http.HttpURLConnectionImpl(url, 80);, +        } else if (protocol.equals("https")) {, +            return new libcore.net.http.HttpsURLConnectionImpl(url, 443);, +        } else {, +            throw new IllegalArgumentException();, +        }, +    /**]