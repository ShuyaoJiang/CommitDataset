[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/FormEncodingBuilderTest.java, +        .add("%25", "%25"), +    String expected = "a%26b=c%3Dd&space,%20the=final%20frontier&%2525=%2525";, +  @Test public void addEncoded() throws Exception {, +    RequestBody formEncoding = new FormEncodingBuilder(), +        .addEncoded("a+=& b", "c+=& d"), +        .addEncoded("e+=& f", "g+=& h"), +        .addEncoded("%25", "%25"), +        .build();, +, +    String expected = "a%20%3D%26%20b=c%20%3D%26%20d&e%20%3D%26%20f=g%20%3D%26%20h&%25=%25";, +    Buffer out = new Buffer();, +    formEncoding.writeTo(out);, +    assertEquals(expected, out.readUtf8());, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/FormEncodingBuilderTest.java, +        .add("%25", "%25"), +    String expected = "a%26b=c%3Dd&space,%20the=final%20frontier&%2525=%2525";, +  @Test public void addEncoded() throws Exception {, +    RequestBody formEncoding = new FormEncodingBuilder(), +        .addEncoded("a+=& b", "c+=& d"), +        .addEncoded("e+=& f", "g+=& h"), +        .addEncoded("%25", "%25"), +        .build();, +, +    String expected = "a%20%3D%26%20b=c%20%3D%26%20d&e%20%3D%26%20f=g%20%3D%26%20h&%25=%25";, +    Buffer out = new Buffer();, +    formEncoding.writeTo(out);, +    assertEquals(expected, out.readUtf8());, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/FormEncodingBuilder.java, +    HttpUrl.canonicalize(content, name, 0, name.length(),, +        HttpUrl.QUERY_COMPONENT_ENCODE_SET, false, true);, +    HttpUrl.canonicalize(content, value, 0, value.length(),, +        HttpUrl.QUERY_COMPONENT_ENCODE_SET, false, true);, +    return this;, +, +  /** Add new key-value pair. */, +  public FormEncodingBuilder addEncoded(String name, String value) {, +    if (content.size() > 0) {, +      content.writeByte('&');, +    }, +    HttpUrl.canonicalize(content, name, 0, name.length(),, +        HttpUrl.QUERY_COMPONENT_ENCODE_SET, true, true);, +    content.writeByte('=');, +    HttpUrl.canonicalize(content, value, 0, value.length(),, +        HttpUrl.QUERY_COMPONENT_ENCODE_SET, true, true);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/FormEncodingBuilderTest.java, +        .add("%25", "%25"), +    String expected = "a%26b=c%3Dd&space,%20the=final%20frontier&%2525=%2525";, +  @Test public void addEncoded() throws Exception {, +    RequestBody formEncoding = new FormEncodingBuilder(), +        .addEncoded("a+=& b", "c+=& d"), +        .addEncoded("e+=& f", "g+=& h"), +        .addEncoded("%25", "%25"), +        .build();, +, +    String expected = "a%20%3D%26%20b=c%20%3D%26%20d&e%20%3D%26%20f=g%20%3D%26%20h&%25=%25";, +    Buffer out = new Buffer();, +    formEncoding.writeTo(out);, +    assertEquals(expected, out.readUtf8());, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/FormEncodingBuilder.java, +    HttpUrl.canonicalize(content, name, 0, name.length(),, +        HttpUrl.QUERY_COMPONENT_ENCODE_SET, false, true);, +    HttpUrl.canonicalize(content, value, 0, value.length(),, +        HttpUrl.QUERY_COMPONENT_ENCODE_SET, false, true);, +    return this;, +, +  /** Add new key-value pair. */, +  public FormEncodingBuilder addEncoded(String name, String value) {, +    if (content.size() > 0) {, +      content.writeByte('&');, +    }, +    HttpUrl.canonicalize(content, name, 0, name.length(),, +        HttpUrl.QUERY_COMPONENT_ENCODE_SET, true, true);, +    content.writeByte('=');, +    HttpUrl.canonicalize(content, value, 0, value.length(),, +        HttpUrl.QUERY_COMPONENT_ENCODE_SET, true, true);, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpUrl.java, +  static final String USERNAME_ENCODE_SET = " \"':;<=>@[]^`{}|/\\?#";, +  static final String PASSWORD_ENCODE_SET = " \"':;<=>@[]\\^`{}|/\\?#";, +  static final String PATH_SEGMENT_ENCODE_SET = " \"<>^`{}|/\\?#";, +  static final String QUERY_ENCODE_SET = " \"'<>#";, +  static final String QUERY_COMPONENT_ENCODE_SET = " \"'<>#&=";, +  static final String FRAGMENT_ENCODE_SET = "";, +        Buffer out = new Buffer();, +        out.writeUtf8(input, pos, i);, +        return out.readUtf8();, +  static void canonicalize(Buffer out, String input, int pos, int limit,, +        out.writeUtf8(alreadyEncoded ? "%20" : "%2B");, +          out.writeByte('%');, +          out.writeByte(HEX_DIGITS[(b >> 4) & 0xf]);, +          out.writeByte(HEX_DIGITS[b & 0xf]);, +        out.writeUtf8CodePoint(codePoint);]