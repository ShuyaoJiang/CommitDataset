[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    assertEquals(0, pool.getSpdyConnectionCount());, +    assertEquals(0, pool.getSpdyConnectionCount());, +    assertEquals(0, pool.getSpdyConnectionCount());, +    assertEquals(0, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(0, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(0, pool.getSpdyConnectionCount());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    assertEquals(0, pool.getSpdyConnectionCount());, +    assertEquals(0, pool.getSpdyConnectionCount());, +    assertEquals(0, pool.getSpdyConnectionCount());, +    assertEquals(0, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(0, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(0, pool.getSpdyConnectionCount());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +import com.squareup.okhttp.ConnectionPool;, +  /** https://github.com/square/okhttp/issues/1191 */, +  @Test public void disconnectWithStreamNotEstablished() throws Exception {, +    ConnectionPool connectionPool = new ConnectionPool(5, 5000);, +    client.client().setConnectionPool(connectionPool);, +, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.play();, +, +    // Disconnect before the stream is created. A connection is still established!, +    HttpURLConnection connection1 = client.open(server.getUrl("/"));, +    connection1.connect();, +    connection1.disconnect();, +, +    // That connection is pooled, and it works., +    assertEquals(1, connectionPool.getSpdyConnectionCount());, +    HttpURLConnection connection2 = client.open(server.getUrl("/"));, +    assertContent("abc", connection2, 3);, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    assertEquals(0, pool.getSpdyConnectionCount());, +    assertEquals(0, pool.getSpdyConnectionCount());, +    assertEquals(0, pool.getSpdyConnectionCount());, +    assertEquals(0, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(0, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +    assertEquals(0, pool.getSpdyConnectionCount());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +import com.squareup.okhttp.ConnectionPool;, +  /** https://github.com/square/okhttp/issues/1191 */, +  @Test public void disconnectWithStreamNotEstablished() throws Exception {, +    ConnectionPool connectionPool = new ConnectionPool(5, 5000);, +    client.client().setConnectionPool(connectionPool);, +, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.play();, +, +    // Disconnect before the stream is created. A connection is still established!, +    HttpURLConnection connection1 = client.open(server.getUrl("/"));, +    connection1.connect();, +    connection1.disconnect();, +, +    // That connection is pooled, and it works., +    assertEquals(1, connectionPool.getSpdyConnectionCount());, +    HttpURLConnection connection2 = client.open(server.getUrl("/"));, +    assertContent("abc", connection2, 3);, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +      for (Connection expiredConnection : expiredConnections) {, +        Util.closeQuietly(expiredConnection.getSocket());, +  /** Returns total number of spdy connections in the pool. */, +    int total = 0;, +    for (Connection connection : connections) {, +      if (!connection.isSpdy()) total++;, +    }]