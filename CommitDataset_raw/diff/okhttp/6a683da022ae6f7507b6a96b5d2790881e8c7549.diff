[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java, +  private final FaultyFileSystem fileSystem = new FaultyFileSystem(FileSystem.SYSTEM);, +  @Test public void journalWriteFailsDuringEdit() throws Exception {, +    set("a", "a", "a");, +    set("b", "b", "b");, +, +    // We can't begin the edit if writing 'DIRTY' fails., +    fileSystem.setFaulty(journalFile, true);, +    assertNull(cache.edit("c"));, +, +    // Once the journal has a failure, subsequent writes aren't permitted., +    fileSystem.setFaulty(journalFile, false);, +    assertNull(cache.edit("d"));, +, +    // Confirm that the fault didn't corrupt entries stored before the fault was introduced., +    cache.close();, +    cache = new DiskLruCache(fileSystem, cacheDir, appVersion, 2, Integer.MAX_VALUE, executor);, +    assertValue("a", "a", "a");, +    assertValue("b", "b", "b");, +    assertAbsent("c");, +    assertAbsent("d");, +  }, +, +  /**, +   * We had a bug where the cache was left in an inconsistent state after a journal write failed., +   * https://github.com/square/okhttp/issues/1211, +   */, +  @Test public void journalWriteFailsDuringEditorCommit() throws Exception {, +    set("a", "a", "a");, +    set("b", "b", "b");, +, +    // Create an entry that fails to write to the journal during commit., +    DiskLruCache.Editor editor = cache.edit("c");, +    setString(editor, 0, "c");, +    setString(editor, 1, "c");, +    fileSystem.setFaulty(journalFile, true);, +    editor.commit();, +, +    // Once the journal has a failure, subsequent writes aren't permitted., +    fileSystem.setFaulty(journalFile, false);, +    assertNull(cache.edit("d"));, +, +    // Confirm that the fault didn't corrupt entries stored before the fault was introduced., +    cache.close();, +    cache = new DiskLruCache(fileSystem, cacheDir, appVersion, 2, Integer.MAX_VALUE, executor);, +    assertValue("a", "a", "a");, +    assertValue("b", "b", "b");, +    assertAbsent("c");, +    assertAbsent("d");, +  }, +, +  @Test public void journalWriteFailsDuringEditorAbort() throws Exception {, +    set("a", "a", "a");, +    set("b", "b", "b");, +, +    // Create an entry that fails to write to the journal during abort., +    DiskLruCache.Editor editor = cache.edit("c");, +    setString(editor, 0, "c");, +    setString(editor, 1, "c");, +    fileSystem.setFaulty(journalFile, true);, +    editor.abort();, +, +    // Once the journal has a failure, subsequent writes aren't permitted., +    fileSystem.setFaulty(journalFile, false);, +    assertNull(cache.edit("d"));, +, +    // Confirm that the fault didn't corrupt entries stored before the fault was introduced., +    cache.close();, +    cache = new DiskLruCache(fileSystem, cacheDir, appVersion, 2, Integer.MAX_VALUE, executor);, +    assertValue("a", "a", "a");, +    assertValue("b", "b", "b");, +    assertAbsent("c");, +    assertAbsent("d");, +  }, +, +  @Test public void journalWriteFailsDuringRemove() throws Exception {, +    set("a", "a", "a");, +    set("b", "b", "b");, +, +    // Remove, but the journal write will fail., +    fileSystem.setFaulty(journalFile, true);, +    assertTrue(cache.remove("a"));, +, +    // Confirm that the entry was still removed., +    fileSystem.setFaulty(journalFile, false);, +    cache.close();, +    cache = new DiskLruCache(fileSystem, cacheDir, appVersion, 2, Integer.MAX_VALUE, executor);, +    assertAbsent("a");, +    assertValue("b", "b", "b");, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java, +  private final FaultyFileSystem fileSystem = new FaultyFileSystem(FileSystem.SYSTEM);, +  @Test public void journalWriteFailsDuringEdit() throws Exception {, +    set("a", "a", "a");, +    set("b", "b", "b");, +, +    // We can't begin the edit if writing 'DIRTY' fails., +    fileSystem.setFaulty(journalFile, true);, +    assertNull(cache.edit("c"));]