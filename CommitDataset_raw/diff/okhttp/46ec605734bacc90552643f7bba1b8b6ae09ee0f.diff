[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +            "unexpected end of stream on " + server.url("/").redact());, +        .assertFailureMatches(".*unexpected end of stream on " + server.url("/").redact());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +            "unexpected end of stream on " + server.url("/").redact());, +        .assertFailureMatches(".*unexpected end of stream on " + server.url("/").redact());, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Transmitter;, +      OkHttpClient client = new OkHttpClient.Builder(), +          .connectionPool(pool), +          .build();, +      Call call = client.newCall(newRequest(addressA));, +      Transmitter transmitter = new Transmitter(client, call);, +      transmitter.newStreamAllocation(addressA);, +      transmitter.acquire(c1, true);, +    assertEquals(Collections.emptyList(), c1.transmitters);, +      OkHttpClient client = new OkHttpClient.Builder(), +          .connectionPool(pool), +          .build();, +      Call call = client.newCall(newRequest(connection.route().address()));, +      Transmitter transmitter = new Transmitter(client, call);, +      transmitter.newStreamAllocation(call.request());, +      transmitter.acquire(connection, true);, +, +  private Request newRequest(Address address) {, +    return new Request.Builder(), +        .url(address.url), +        .build();, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +            "unexpected end of stream on " + server.url("/").redact());, +        .assertFailureMatches(".*unexpected end of stream on " + server.url("/").redact());, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Transmitter;, +      OkHttpClient client = new OkHttpClient.Builder(), +          .connectionPool(pool), +          .build();, +      Call call = client.newCall(newRequest(addressA));, +      Transmitter transmitter = new Transmitter(client, call);, +      transmitter.newStreamAllocation(addressA);, +      transmitter.acquire(c1, true);, +    assertEquals(Collections.emptyList(), c1.transmitters);, +      OkHttpClient client = new OkHttpClient.Builder(), +          .connectionPool(pool), +          .build();, +      Call call = client.newCall(newRequest(connection.route().address()));, +      Transmitter transmitter = new Transmitter(client, call);, +      transmitter.newStreamAllocation(call.request());, +      transmitter.acquire(connection, true);, +, +  private Request newRequest(Address address) {, +    return new Request.Builder(), +        .url(address.url), +        .build();, +  }, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import okhttp3.internal.Transmitter;, +import okhttp3.internal.Transmitter.TransmitterReference;, +      if (connection.transmitters.isEmpty()) total++;, +  void acquire(Address address, Transmitter transmitter, @Nullable Route route) {, +        transmitter.acquire(connection, true);, +  @Nullable Socket deduplicate(Address address, Transmitter transmitter) {, +          && connection != transmitter.connection()) {, +        return transmitter.releaseAndAcquire(connection);, +        if (connection.transmitters.isEmpty()) {, +   * Prunes any leaked transmitters and then returns the number of remaining live transmitters on, +   * {@code connection}. Transmitters are leaked if the connection is tracking them but the, +    List<Reference<Transmitter>> references = connection.transmitters;, +      Reference<Transmitter> reference = references.get(i);, +      // We've discovered a leaked transmitter. This is an application bug., +      TransmitterReference transmitterRef = (TransmitterReference) reference;, +      Platform.get().logCloseableLeak(message, transmitterRef.callStackTrace);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +            "unexpected end of stream on " + server.url("/").redact());, +        .assertFailureMatches(".*unexpected end of stream on " + server.url("/").redact());, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +import okhttp3.internal.Transmitter;, +      OkHttpClient client = new OkHttpClient.Builder(), +          .connectionPool(pool), +          .build();, +      Call call = client.newCall(newRequest(addressA));, +      Transmitter transmitter = new Transmitter(client, call);, +      transmitter.newStreamAllocation(addressA);, +      transmitter.acquire(c1, true);, +    assertEquals(Collections.emptyList(), c1.transmitters);, +      OkHttpClient client = new OkHttpClient.Builder(), +          .connectionPool(pool), +          .build();, +      Call call = client.newCall(newRequest(connection.route().address()));, +      Transmitter transmitter = new Transmitter(client, call);, +      transmitter.newStreamAllocation(call.request());, +      transmitter.acquire(connection, true);, +, +  private Request newRequest(Address address) {, +    return new Request.Builder(), +        .url(address.url), +        .build();, +  }, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +import okhttp3.internal.Transmitter;]