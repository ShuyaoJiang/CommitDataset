[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, +      if (response.getSocketPolicy() == DISCONNECT_AT_END) {, +        Http2Connection connection = stream.getConnection();, +        connection.shutdown(ErrorCode.NO_ERROR);, +      }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, +      if (response.getSocketPolicy() == DISCONNECT_AT_END) {, +        Http2Connection connection = stream.getConnection();, +        connection.shutdown(ErrorCode.NO_ERROR);, +      }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Close the socket after the response. This is the default HTTP/1.0 behavior. For HTTP/2, +   * connections, this sends a <a href="https://tools.ietf.org/html/rfc7540#section-6.8">GOAWAY, +   * frame</a> immediately after the response and will close the connection when the client's socket, +   * is exhausted., +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, +      if (response.getSocketPolicy() == DISCONNECT_AT_END) {, +        Http2Connection connection = stream.getConnection();, +        connection.shutdown(ErrorCode.NO_ERROR);, +      }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Close the socket after the response. This is the default HTTP/1.0 behavior. For HTTP/2, +   * connections, this sends a <a href="https://tools.ietf.org/html/rfc7540#section-6.8">GOAWAY, +   * frame</a> immediately after the response and will close the connection when the client's socket, +   * is exhausted., +++ b/okhttp/src/main/java/okhttp3/Cache.java, +  private final DiskLruCache cache;, +  private int writeSuccessCount;, +  private int writeAbortCount;, +  private CacheRequest put(Response response) {, +  private void remove(Request request) throws IOException {, +  private void update(Response cached, Response network) {, +  private synchronized void trackResponse(CacheStrategy cacheStrategy) {, +  private synchronized void trackConditionalCacheHit() {, +    private boolean done;, +  private static int readInt(BufferedSource source) throws IOException {, +    private final DiskLruCache.Snapshot snapshot;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, +      if (response.getSocketPolicy() == DISCONNECT_AT_END) {, +        Http2Connection connection = stream.getConnection();, +        connection.shutdown(ErrorCode.NO_ERROR);, +      }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Close the socket after the response. This is the default HTTP/1.0 behavior. For HTTP/2, +   * connections, this sends a <a href="https://tools.ietf.org/html/rfc7540#section-6.8">GOAWAY, +   * frame</a> immediately after the response and will close the connection when the client's socket, +   * is exhausted., +++ b/okhttp/src/main/java/okhttp3/Cache.java, +  private final DiskLruCache cache;, +  private int writeSuccessCount;, +  private int writeAbortCount;, +  private CacheRequest put(Response response) {, +  private void remove(Request request) throws IOException {, +  private void update(Response cached, Response network) {, +  private synchronized void trackResponse(CacheStrategy cacheStrategy) {, +  private synchronized void trackConditionalCacheHit() {, +    private boolean done;, +  private static int readInt(BufferedSource source) throws IOException {, +    private final DiskLruCache.Snapshot snapshot;, +++ b/okhttp/src/main/java/okhttp3/Request.java, +  private final HttpUrl url;, +  private final String method;, +  private final Headers headers;, +  private final RequestBody body;, +  private final Object tag;, +  private Request(Builder builder) {, +    private HttpUrl url;, +    private String method;, +    private Headers.Builder headers;, +    private RequestBody body;, +    private Object tag;, +    private Builder(Request request) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +, +      if (response.getSocketPolicy() == DISCONNECT_AT_END) {, +        Http2Connection connection = stream.getConnection();, +        connection.shutdown(ErrorCode.NO_ERROR);, +      }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * Close the socket after the response. This is the default HTTP/1.0 behavior. For HTTP/2, +   * connections, this sends a <a href="https://tools.ietf.org/html/rfc7540#section-6.8">GOAWAY, +   * frame</a> immediately after the response and will close the connection when the client's socket, +   * is exhausted., +++ b/okhttp/src/main/java/okhttp3/Cache.java, +  private final DiskLruCache cache;, +  private int writeSuccessCount;, +  private int writeAbortCount;, +  private CacheRequest put(Response response) {, +  private void remove(Request request) throws IOException {, +  private void update(Response cached, Response network) {, +  private synchronized void trackResponse(CacheStrategy cacheStrategy) {, +  private synchronized void trackConditionalCacheHit() {, +    private boolean done;, +  private static int readInt(BufferedSource source) throws IOException {, +    private final DiskLruCache.Snapshot snapshot;, +++ b/okhttp/src/main/java/okhttp3/Request.java]