[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AbstractResponseCache.java, +public abstract class AbstractResponseCache extends ResponseCache {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AbstractResponseCache.java, +public abstract class AbstractResponseCache extends ResponseCache {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AbstractResponseCache.java, +public abstract class AbstractResponseCache extends ResponseCache {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +      assertEquals("timeout", e.getMessage());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AbstractResponseCache.java, +public abstract class AbstractResponseCache extends ResponseCache {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +      assertEquals("timeout", e.getMessage());, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AbstractResponseCache.java, +public abstract class AbstractResponseCache extends ResponseCache {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +      assertEquals("timeout", e.getMessage());, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import java.net.ProxySelector;, +import java.net.SocketAddress;, +  private final FakeProxySelector proxySelector = new FakeProxySelector();, +, +  private static class FakeProxySelector extends ProxySelector {, +    List<URI> requestedUris = new ArrayList<URI>();, +    List<Proxy> proxies = new ArrayList<Proxy>();, +    List<String> failures = new ArrayList<String>();, +, +    @Override public List<Proxy> select(URI uri) {, +      requestedUris.add(uri);, +      return proxies;, +    }, +, +    public void assertRequests(URI... expectedUris) {, +      assertEquals(Arrays.asList(expectedUris), requestedUris);, +      requestedUris.clear();, +    }, +, +    @Override public void connectFailed(URI uri, SocketAddress sa, IOException ioe) {, +      InetSocketAddress socketAddress = (InetSocketAddress) sa;, +      failures.add(, +          String.format("%s %s:%d %s", uri, socketAddress.getHostName(), socketAddress.getPort(),, +              ioe.getMessage()));, +    }, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/AbstractResponseCache.java, +public abstract class AbstractResponseCache extends ResponseCache {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +      assertEquals("timeout", e.getMessage());, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import java.net.ProxySelector;, +import java.net.SocketAddress;, +  private final FakeProxySelector proxySelector = new FakeProxySelector();, +, +  private static class FakeProxySelector extends ProxySelector {, +    List<URI> requestedUris = new ArrayList<URI>();, +    List<Proxy> proxies = new ArrayList<Proxy>();, +    List<String> failures = new ArrayList<String>();, +, +    @Override public List<Proxy> select(URI uri) {, +      requestedUris.add(uri);, +      return proxies;, +    }, +, +    public void assertRequests(URI... expectedUris) {, +      assertEquals(Arrays.asList(expectedUris), requestedUris);, +      requestedUris.clear();, +    }, +, +    @Override public void connectFailed(URI uri, SocketAddress sa, IOException ioe) {, +      InetSocketAddress socketAddress = (InetSocketAddress) sa;, +      failures.add(, +          String.format("%s %s:%d %s", uri, socketAddress.getHostName(), socketAddress.getPort(),, +              ioe.getMessage()));, +    }, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +import okio.Sink;, +  @Test public void getResponseHeadersTimesOut() throws Exception {, +    peer.acceptFrame(); // RST_STREAM, +    stream.readTimeout().timeout(500, TimeUnit.MILLISECONDS);, +    long startNanos = System.nanoTime();, +    try {, +      stream.getResponseHeaders();, +      fail();, +    } catch (InterruptedIOException expected) {, +    }, +    long elapsedNanos = System.nanoTime() - startNanos;, +    assertEquals(500d, TimeUnit.NANOSECONDS.toMillis(elapsedNanos), 200d /* 200ms delta */);, +    assertEquals(0, connection.openStreamCount());, +, +    // verify the peer received what was expected, +    assertEquals(TYPE_HEADERS, peer.takeFrame().type);, +    assertEquals(TYPE_RST_STREAM, peer.takeFrame().type);]