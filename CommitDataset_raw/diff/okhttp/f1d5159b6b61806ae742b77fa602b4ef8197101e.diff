[+++ b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java, +    assertEquals(3, headers.size());, +    assertEquals("cache-control", headers.name(0));, +    assertEquals("no-cache, no-store", headers.value(0));, +    assertEquals("set-cookie", headers.name(1));, +    assertEquals("Cookie1", headers.value(1));, +    assertEquals("Cookie2", headers.value(2));, +    assertEquals(0, headers.size());, +    assertEquals(1, headers.size());, +    assertEquals(":version", headers.name(0));, +    assertEquals("HTTP/1.1", headers.value(0));, +++ b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java, +    assertEquals(3, headers.size());, +    assertEquals("cache-control", headers.name(0));, +    assertEquals("no-cache, no-store", headers.value(0));, +    assertEquals("set-cookie", headers.name(1));, +    assertEquals("Cookie1", headers.value(1));, +    assertEquals("Cookie2", headers.value(2));, +    assertEquals(0, headers.size());, +    assertEquals(1, headers.size());, +    assertEquals(":version", headers.name(0));, +    assertEquals("HTTP/1.1", headers.value(0));, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +          .add(OkHeaders.SELECTED_PROTOCOL, response.protocol().toString()), +          .add(OkHeaders.RESPONSE_SOURCE, responseSourceHeader(response)), +++ b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java, +    assertEquals(3, headers.size());, +    assertEquals("cache-control", headers.name(0));, +    assertEquals("no-cache, no-store", headers.value(0));, +    assertEquals("set-cookie", headers.name(1));, +    assertEquals("Cookie1", headers.value(1));, +    assertEquals("Cookie2", headers.value(2));, +    assertEquals(0, headers.size());, +    assertEquals(1, headers.size());, +    assertEquals(":version", headers.name(0));, +    assertEquals("HTTP/1.1", headers.value(0));, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +          .add(OkHeaders.SELECTED_PROTOCOL, response.protocol().toString()), +          .add(OkHeaders.RESPONSE_SOURCE, responseSourceHeader(response)), +++ b/okhttp-urlconnection/src/test/java/com/squareup/okhttp/OkUrlFactoryTest.java, +import com.squareup.okhttp.internal.http.OkHeaders;, +    assertEquals(expected, connection.getHeaderField(OkHeaders.RESPONSE_SOURCE));, +++ b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java, +    assertEquals(3, headers.size());, +    assertEquals("cache-control", headers.name(0));, +    assertEquals("no-cache, no-store", headers.value(0));, +    assertEquals("set-cookie", headers.name(1));, +    assertEquals("Cookie1", headers.value(1));, +    assertEquals("Cookie2", headers.value(2));, +    assertEquals(0, headers.size());, +    assertEquals(1, headers.size());, +    assertEquals(":version", headers.name(0));, +    assertEquals("HTTP/1.1", headers.value(0));, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +          .add(OkHeaders.SELECTED_PROTOCOL, response.protocol().toString()), +          .add(OkHeaders.RESPONSE_SOURCE, responseSourceHeader(response)), +++ b/okhttp-urlconnection/src/test/java/com/squareup/okhttp/OkUrlFactoryTest.java, +import com.squareup.okhttp.internal.http.OkHeaders;, +    assertEquals(expected, connection.getHeaderField(OkHeaders.RESPONSE_SOURCE));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/FramedTransport.java, +++ b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java, +    assertEquals(3, headers.size());, +    assertEquals("cache-control", headers.name(0));, +    assertEquals("no-cache, no-store", headers.value(0));, +    assertEquals("set-cookie", headers.name(1));, +    assertEquals("Cookie1", headers.value(1));, +    assertEquals("Cookie2", headers.value(2));, +    assertEquals(0, headers.size());, +    assertEquals(1, headers.size());, +    assertEquals(":version", headers.name(0));, +    assertEquals("HTTP/1.1", headers.value(0));, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +          .add(OkHeaders.SELECTED_PROTOCOL, response.protocol().toString()), +          .add(OkHeaders.RESPONSE_SOURCE, responseSourceHeader(response)), +++ b/okhttp-urlconnection/src/test/java/com/squareup/okhttp/OkUrlFactoryTest.java, +import com.squareup.okhttp.internal.http.OkHeaders;, +    assertEquals(expected, connection.getHeaderField(OkHeaders.RESPONSE_SOURCE));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/FramedTransport.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpConnection.java, +            .message(statusLine.message), +            .headers(readHeaders());, +  /** Reads headers or trailers. */, +  public Headers readHeaders() throws IOException {, +    Headers.Builder headers = new Headers.Builder();, +      Internal.instance.addLenient(headers, line);, +    return headers.build();, +        httpEngine.receiveHeaders(readHeaders());, +++ b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java, +    assertEquals(3, headers.size());, +    assertEquals("cache-control", headers.name(0));, +    assertEquals("no-cache, no-store", headers.value(0));, +    assertEquals("set-cookie", headers.name(1));, +    assertEquals("Cookie1", headers.value(1));]