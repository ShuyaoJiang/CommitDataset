[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDraft07Test.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.spdy;, +, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.List;, +import okio.Buffer;, +import okio.ByteString;, +import org.junit.Before;, +import org.junit.Test;, +, +import static com.squareup.okhttp.internal.Util.headerEntries;, +import static okio.ByteString.decodeHex;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +public class HpackDraft07Test {, +, +  private final Buffer bytesIn = new Buffer();, +  private HpackDraft07.Reader hpackReader;, +  private Buffer bytesOut = new Buffer();, +  private HpackDraft07.Writer hpackWriter;, +, +  @Before public void reset() {, +    hpackReader = newReader(bytesIn);, +    hpackWriter = new HpackDraft07.Writer(bytesOut);, +  }, +, +  /**, +   * Variable-length quantity special cases strings which are longer than 127, +   * bytes.  Values such as cookies can be 4KiB, and should be possible to send., +   *, +   * <p> http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-07#section-4.1.1, +   */, +  @Test public void largeHeaderValue() throws IOException {, +    char[] value = new char[4096];, +    Arrays.fill(value, '!');, +    List<Header> headerBlock = headerEntries("cookie", new String(value));, +, +    hpackWriter.writeHeaders(headerBlock);, +    bytesIn.writeAll(bytesOut);, +    hpackReader.readHeaders();, +    hpackReader.emitReferenceSet();, +, +    assertEquals(0, hpackReader.headerCount);, +, +    assertEquals(headerBlock, hpackReader.getAndReset());, +  }, +, +  /**, +   * HPACK has a max header table size, which can be smaller than the max header message., +   * Ensure the larger header content is not lost., +   */, +  @Test public void tooLargeToHPackIsStillEmitted() throws IOException {, +    bytesIn.writeByte(0x00); // Literal indexed, +    bytesIn.writeByte(0x0a); // Literal name (len = 10), +    bytesIn.writeUtf8("custom-key");, +, +    bytesIn.writeByte(0x0d); // Literal value (len = 13), +    bytesIn.writeUtf8("custom-header");, +, +    hpackReader.maxHeaderTableByteCountSetting(1);, +    hpackReader.readHeaders();, +    hpackReader.emitReferenceSet();, +, +    assertEquals(0, hpackReader.headerCount);, +, +    assertEquals(headerEntries("custom-key", "custom-header"), hpackReader.getAndReset());, +  }, +, +  /** Oldest entries are evicted to support newer ones. */, +  @Test public void testEviction() throws IOException {, +    bytesIn.writeByte(0x40); // Literal indexed, +    bytesIn.writeByte(0x0a); // Literal name (len = 10), +    bytesIn.writeUtf8("custom-foo");, +, +    bytesIn.writeByte(0x0d); // Literal value (len = 13), +    bytesIn.writeUtf8("custom-header");, +, +    bytesIn.writeByte(0x40); // Literal indexed, +    bytesIn.writeByte(0x0a); // Literal name (len = 10)]