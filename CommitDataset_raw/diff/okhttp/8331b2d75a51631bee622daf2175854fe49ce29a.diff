[+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertTrue(c1.socket().isClosed());, +    assertTrue(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertTrue(c2.socket().isClosed());, +    assertTrue(c1.socket().isClosed());, +    assertTrue(c2.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c2.socket().isClosed());, +    assertTrue(c1.socket().isClosed());, +    assertFalse(c2.socket().isClosed());, +    assertFalse(c3.socket().isClosed());, +    RealConnection result = RealConnection.testConnection(pool, route, new Socket(), idleAtNanos);, +      pool.put(result);, +    return result;, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertTrue(c1.socket().isClosed());, +    assertTrue(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertTrue(c2.socket().isClosed());, +    assertTrue(c1.socket().isClosed());, +    assertTrue(c2.socket().isClosed());, +    assertFalse(c1.socket().isClosed());, +    assertFalse(c2.socket().isClosed());, +    assertTrue(c1.socket().isClosed());, +    assertFalse(c2.socket().isClosed());, +    assertFalse(c3.socket().isClosed());, +    RealConnection result = RealConnection.testConnection(pool, route, new Socket(), idleAtNanos);, +      pool.put(result);, +    return result;, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +import java.net.SocketException;, +import okhttp3.ConnectionPool;, +import okhttp3.OkHttpClient;, +import okhttp3.internal.http.HttpCodec;, +import okhttp3.internal.http2.Http2Codec;, +import okhttp3.internal.ws.RealWebSocket;, +  private final ConnectionPool connectionPool;, +  // The fields below are initialized by connect() and never reassigned., +, +  private Socket socket;, +  private Http2Connection http2Connection;, +  private BufferedSource source;, +  private BufferedSink sink;, +, +  // The fields below track connection state and are guarded by connectionPool., +, +  /** If true, no new streams can be created on this connection. Once true this is always true. */, +, +  public int successCount;, +, +  /**, +   * The maximum number of concurrent streams that can be carried by this connection. If {@code, +   * allocations.size() < allocationLimit} then new streams can be created on this connection., +   */, +  public int allocationLimit = 1;, +, +  /** Current streams carried by this connection. */, +  public final List<Reference<StreamAllocation>> allocations = new ArrayList<>();, +, +  /** Nanotime timestamp when {@code allocations.size()} reached zero. */, +  public RealConnection(ConnectionPool connectionPool, Route route) {, +    this.connectionPool = connectionPool;, +  public static RealConnection testConnection(, +      ConnectionPool connectionPool, Route route, Socket socket, long idleAtNanos) {, +    RealConnection result = new RealConnection(connectionPool, route);, +    result.socket = socket;, +    result.idleAtNanos = idleAtNanos;, +    return result;, +  }, +, +    while (true) {, +          connectTunnel(connectTimeout, readTimeout, writeTimeout);, +          connectSocket(connectTimeout, readTimeout);, +        establishProtocol(connectionSpecSelector);, +        break;, +        http2Connection = null;, +, +    if (http2Connection != null) {, +      synchronized (connectionPool) {, +        allocationLimit = http2Connection.maxConcurrentStreams();, +      }, +    }, +  private void connectTunnel(int connectTimeout, int readTimeout, int writeTimeout), +      throws IOException {, +  private void establishProtocol(ConnectionSpecSelector connectionSpecSelector) throws IOException {, +    if (route.address().sslSocketFactory() == null) {, +      return;]