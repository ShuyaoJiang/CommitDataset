[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",, +        "CallEnd", "ResponseBodyEnd", "ConnectionReleased");, +    List<String> expectedEvents = asList("CallStart", "DnsStart", "DnsEnd", "ConnectionAcquired",, +        "ResponseBodyStart", "CallEnd", "ResponseBodyEnd", "ConnectionReleased");, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",, +        "CallEnd", "ResponseBodyEnd", "ConnectionReleased");, +    List<String> expectedEvents = asList("CallStart", "DnsStart", "DnsEnd", "ConnectionAcquired",, +        "ResponseBodyStart", "CallEnd", "ResponseBodyEnd", "ConnectionReleased");, +++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java, +  @Override public void callStart(Call call) {, +    logEvent(new CallStart(call));, +  @Override public void callEnd(Call call, Throwable throwable) {, +    logEvent(new CallEnd(call, throwable));, +  static final class CallStart extends CallEvent {, +    CallStart(Call call) {, +  static final class CallEnd extends CallEvent {, +    CallEnd(Call call, Throwable throwable) {, +      return new CallStart(call);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",, +        "CallEnd", "ResponseBodyEnd", "ConnectionReleased");, +    List<String> expectedEvents = asList("CallStart", "DnsStart", "DnsEnd", "ConnectionAcquired",, +        "ResponseBodyStart", "CallEnd", "ResponseBodyEnd", "ConnectionReleased");, +++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java, +  @Override public void callStart(Call call) {, +    logEvent(new CallStart(call));, +  @Override public void callEnd(Call call, Throwable throwable) {, +    logEvent(new CallEnd(call, throwable));, +  static final class CallStart extends CallEvent {, +    CallStart(Call call) {, +  static final class CallEnd extends CallEvent {, +    CallEnd(Call call, Throwable throwable) {, +      return new CallStart(call);, +++ b/okhttp/src/main/java/okhttp3/EventListener.java, +   * or redirects will be handled within the boundaries of a single callStart and, +   * {@link #callEnd(Call, Throwable)} pair., +  public void callStart(Call call) {, +   * <p>This method is always invoked after {@link #callStart(Call)}., +  public void callEnd(Call call, @Nullable Throwable throwable) {, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",, +        "CallEnd", "ResponseBodyEnd", "ConnectionReleased");, +    List<String> expectedEvents = asList("CallStart", "DnsStart", "DnsEnd", "ConnectionAcquired",, +        "ResponseBodyStart", "CallEnd", "ResponseBodyEnd", "ConnectionReleased");, +++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java, +  @Override public void callStart(Call call) {, +    logEvent(new CallStart(call));, +  @Override public void callEnd(Call call, Throwable throwable) {, +    logEvent(new CallEnd(call, throwable));, +  static final class CallStart extends CallEvent {, +    CallStart(Call call) {, +  static final class CallEnd extends CallEvent {, +    CallEnd(Call call, Throwable throwable) {, +      return new CallStart(call);, +++ b/okhttp/src/main/java/okhttp3/EventListener.java, +   * or redirects will be handled within the boundaries of a single callStart and, +   * {@link #callEnd(Call, Throwable)} pair., +  public void callStart(Call call) {, +   * <p>This method is always invoked after {@link #callStart(Call)}., +  public void callEnd(Call call, @Nullable Throwable throwable) {, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +    eventListener.callStart(this);, +      eventListener.callEnd(this, null);, +      eventListener.callEnd(this, e);, +    eventListener.callStart(this);, +        eventListener.callEnd(RealCall.this, null);, +          eventListener.callEnd(RealCall.this, e);]