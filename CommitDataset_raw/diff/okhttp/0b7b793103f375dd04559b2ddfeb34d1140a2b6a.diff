[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        // See warnings associated with these socket policies in SocketPolicy., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        // See warnings associated with these socket policies in SocketPolicy., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/**, + * What should be done with the incoming socket., + *, + * <p>Be careful when using values like {@link #DISCONNECT_AT_END}, {@link #SHUTDOWN_INPUT_AT_END}, + * and {@link #SHUTDOWN_OUTPUT_AT_END} that close a socket after a response, and where there are, + * follow-up requests. The client is unblocked and free to continue as soon as it has received the, + * entire response body. If and when the client makes a subsequent request using a pooled socket the, + * server may not have had time to close the socket. The socket will be closed at an indeterminate, + * point before or during the second request. It may be closed after client has started sending the, + * request body. If a request body is not retryable then the client may fail the request, making, + * client behavior non-deterministic. Add delays in the client to improve the chances that the, + * server has closed the socket before follow up requests are made., + */, +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        // See warnings associated with these socket policies in SocketPolicy., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/**, + * What should be done with the incoming socket., + *, + * <p>Be careful when using values like {@link #DISCONNECT_AT_END}, {@link #SHUTDOWN_INPUT_AT_END}, + * and {@link #SHUTDOWN_OUTPUT_AT_END} that close a socket after a response, and where there are, + * follow-up requests. The client is unblocked and free to continue as soon as it has received the, + * entire response body. If and when the client makes a subsequent request using a pooled socket the, + * server may not have had time to close the socket. The socket will be closed at an indeterminate, + * point before or during the second request. It may be closed after client has started sending the, + * request body. If a request body is not retryable then the client may fail the request, making, + * client behavior non-deterministic. Add delays in the client to improve the chances that the, + * server has closed the socket before follow up requests are made., + */, +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +   *, +   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it., +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java, +, +    // Give the server time to enact the socket policy if it's one that could happen after the, +    // client has received the response., +    Thread.sleep(500);, +, +, +    // Give the server time to disconnect., +    Thread.sleep(500);, +, +    // Give the server time to disconnect., +    Thread.sleep(500);, +, +    // Give the server time to disconnect., +    Thread.sleep(500);, +]