[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/OptionalMethodTest.java, +/*, + *  Licensed to the Apache Software Foundation (ASF) under one or more, + *  contributor license agreements.  See the NOTICE file distributed with, + *  this work for additional information regarding copyright ownership., + *  The ASF licenses this file to You under the Apache License, Version 2.0, + *  (the "License"); you may not use this file except in compliance with, + *  the License.  You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *, + *  Unless required by applicable law or agreed to in writing, software, + *  distributed under the License is distributed on an "AS IS" BASIS,, + *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + *  See the License for the specific language governing permissions and, + *  limitations under the License., + */, +, +package com.squareup.okhttp.internal;, +, +import org.junit.Test;, +, +import java.io.IOException;, +import java.lang.reflect.InvocationTargetException;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +/**, + * Tests for {@link OptionalMethod}., + */, +public class OptionalMethodTest {, +  @SuppressWarnings("unused"), +  private static class BaseClass {, +    public String stringMethod() {, +      return "string";, +    }, +, +    public void voidMethod() {}, +  }, +, +  @SuppressWarnings("unused"), +  private static class SubClass1 extends BaseClass {, +    public String subclassMethod() {, +      return "subclassMethod1";, +    }, +, +    public String methodWithArgs(String arg) {, +      return arg;, +    }, +  }, +, +  @SuppressWarnings("unused"), +  private static class SubClass2 extends BaseClass {, +    public int subclassMethod() {, +      return 1234;, +    }, +, +    public String methodWithArgs(String arg) {, +      return arg;, +    }, +, +    public void throwsException() throws IOException {, +      throw new IOException();, +    }, +, +    public void throwsRuntimeException() throws Exception {, +      throw new NumberFormatException();, +    }, +, +    protected void nonPublic() {}, +  }, +, +  private final static OptionalMethod<BaseClass> STRING_METHOD_RETURNS_ANY =, +      new OptionalMethod<BaseClass>(null, "stringMethod");, +  private final static OptionalMethod<BaseClass> STRING_METHOD_RETURNS_STRING =, +      new OptionalMethod<BaseClass>(String.class, "stringMethod");, +  private final static OptionalMethod<BaseClass> STRING_METHOD_RETURNS_INT =, +      new OptionalMethod<BaseClass>(Integer.TYPE, "stringMethod");, +  private final static OptionalMethod<BaseClass> VOID_METHOD_RETURNS_ANY =, +      new OptionalMethod<BaseClass>(null, "voidMethod");, +  private final static OptionalMethod<BaseClass> VOID_METHOD_RETURNS_VOID =, +      new OptionalMethod<BaseClass>(Void.TYPE, "voidMethod");, +  private final static OptionalMethod<BaseClass> SUBCLASS_METHOD_RETURNS_ANY =, +      new OptionalMethod<BaseClass>(null, "subclassMethod");, +  private final static OptionalMethod<BaseClass> SUBCLASS_METHOD_RETURNS_STRING =, +      new OptionalMethod<BaseClass>(String.class, "subclassMethod");, +  private final static OptionalMethod<BaseClass> SUBCLASS_METHOD_RETURNS_INT =, +      new OptionalMethod<BaseClass>(Integer.TYPE, "subclassMethod");, +  private final static OptionalMethod<BaseClass> METHOD_WITH_ARGS_WRONG_PARAMS =, +      new OptionalMethod<BaseClass>(null, "methodWithArgs", Integer.class);, +  private final static OptionalMethod<BaseClass> METHOD_WITH_ARGS_CORRECT_PARAMS =, +      new OptionalMethod<BaseClass>(null, "methodWithArgs", String.class);, +, +  private final static OptionalMethod<BaseClass> THROWS_EXCEPTION =, +      new OptionalMethod<BaseClass>(null, "throwsException");, +  private final static OptionalMethod<BaseClass> THROWS_RUNTIME_EXCEPTION =]