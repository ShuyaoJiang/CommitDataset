[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import java.util.ArrayList;, +import javax.net.ssl.SSLHandshakeException;, +import javax.net.ssl.SSLSocket;, +import javax.net.ssl.SSLSocketFactory;, +, +    server = new MockWebServer();, +    server2 = new MockWebServer();, +    client = new OkHttpClient();, +    callback = new RecordingCallback();, +    logHandler = new TestLogHandler();, +, +    suppressTlsFallbackScsv(client);, +  @Test public void recoverFromTlsHandshakeFailure_tlsFallbackScsvEnabled() throws Exception {, +    final String tlsFallbackScsv = "TLS_FALLBACK_SCSV";, +    List<String> supportedCiphers =, +        Arrays.asList(sslContext.getSocketFactory().getSupportedCipherSuites());, +    if (!supportedCiphers.contains(tlsFallbackScsv)) {, +      // This only works if the client socket supports TLS_FALLBACK_SCSV., +      return;, +    }, +, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.FAIL_HANDSHAKE));, +    server.play();, +, +    RecordingSSLSocketFactory clientSocketFactory =, +        new RecordingSSLSocketFactory(sslContext.getSocketFactory());, +    client.setSslSocketFactory(clientSocketFactory);, +    client.setHostnameVerifier(new RecordingHostnameVerifier());, +    Internal.instance.setNetwork(client, new SingleInetAddressNetwork());, +, +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (SSLHandshakeException expected) {, +    }, +, +    List<SSLSocket> clientSockets = clientSocketFactory.getSocketsCreated();, +    SSLSocket firstSocket = clientSockets.get(0);, +    assertFalse(Arrays.asList(firstSocket.getEnabledCipherSuites()).contains(tlsFallbackScsv));, +    SSLSocket secondSocket = clientSockets.get(1);, +    assertTrue(Arrays.asList(secondSocket.getEnabledCipherSuites()).contains(tlsFallbackScsv));, +  }, +, +    suppressTlsFallbackScsv(client);, +    suppressTlsFallbackScsv(client);, +      // RI response to the FAIL_HANDSHAKE, +    } catch (SSLHandshakeException expected) {, +      // Android's response to the FAIL_HANDSHAKE, +, +  private static class RecordingSSLSocketFactory extends DelegatingSSLSocketFactory {, +, +    private List<SSLSocket> socketsCreated = new ArrayList<SSLSocket>();, +, +    public RecordingSSLSocketFactory(SSLSocketFactory delegate) {, +      super(delegate);, +    }, +, +    @Override, +    protected void configureSocket(SSLSocket sslSocket) throws IOException {, +      socketsCreated.add(sslSocket);, +    }, +, +    public List<SSLSocket> getSocketsCreated() {, +      return socketsCreated;, +    }, +  }, +, +  /**, +   * Used during tests that involve TLS connection fallback attempts. OkHttp includes the, +   * TLS_FALLBACK_SCSV cipher on fallback connections. See, +   * {@link com.squareup.okhttp.FallbackTestClientSocketFactory} for details., +   */, +  private static void suppressTlsFallbackScsv(OkHttpClient client) {, +    FallbackTestClientSocketFactory clientSocketFactory =, +        new FallbackTestClientSocketFactory(sslContext.getSocketFactory());, +    client.setSslSocketFactory(clientSocketFactory);, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import java.util.ArrayList;, +import javax.net.ssl.SSLHandshakeException;, +import javax.net.ssl.SSLSocket;, +import javax.net.ssl.SSLSocketFactory;, +, +    server = new MockWebServer();, +    server2 = new MockWebServer();, +    client = new OkHttpClient();, +    callback = new RecordingCallback();, +    logHandler = new TestLogHandler();, +, +    suppressTlsFallbackScsv(client);, +  @Test public void recoverFromTlsHandshakeFailure_tlsFallbackScsvEnabled() throws Exception {, +    final String tlsFallbackScsv = "TLS_FALLBACK_SCSV";, +    List<String> supportedCiphers =, +        Arrays.asList(sslContext.getSocketFactory().getSupportedCipherSuites());, +    if (!supportedCiphers.contains(tlsFallbackScsv)) {, +      // This only works if the client socket supports TLS_FALLBACK_SCSV., +      return;]