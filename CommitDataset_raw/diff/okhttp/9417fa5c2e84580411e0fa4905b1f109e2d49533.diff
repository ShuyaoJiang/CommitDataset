[+++ /dev/null, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, +    private final byte[] buffer = new byte[Settings.DEFAULT_INITIAL_WINDOW_SIZE];, +    private final byte[] buffer = new byte[8192];, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, +    private final byte[] buffer = new byte[Settings.DEFAULT_INITIAL_WINDOW_SIZE];, +    private final byte[] buffer = new byte[8192];, +++ /dev/null, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, +    private final byte[] buffer = new byte[Settings.DEFAULT_INITIAL_WINDOW_SIZE];, +    private final byte[] buffer = new byte[8192];, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, + * The sockets and streams of an HTTP, HTTPS, or HTTPS+SPDY connection. May be, + * used for multiple HTTP request/response exchanges. Connections may be direct, + * to the origin server or via a proxy., +    if (spdyConnection != null) throw new IllegalStateException("spdyConnection != null");, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, +    private final byte[] buffer = new byte[Settings.DEFAULT_INITIAL_WINDOW_SIZE];, +    private final byte[] buffer = new byte[8192];, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, + * The sockets and streams of an HTTP, HTTPS, or HTTPS+SPDY connection. May be, + * used for multiple HTTP request/response exchanges. Connections may be direct, + * to the origin server or via a proxy., +    if (spdyConnection != null) throw new IllegalStateException("spdyConnection != null");, +++ b/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, +    private final byte[] buffer = new byte[Settings.DEFAULT_INITIAL_WINDOW_SIZE];, +    private final byte[] buffer = new byte[8192];, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, + * The sockets and streams of an HTTP, HTTPS, or HTTPS+SPDY connection. May be, + * used for multiple HTTP request/response exchanges. Connections may be direct, + * to the origin server or via a proxy., +    if (spdyConnection != null) throw new IllegalStateException("spdyConnection != null");, +++ b/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/Headers.java, +/*, + *  Licensed to the Apache Software Foundation (ASF) under one or more, + *  contributor license agreements.  See the NOTICE file distributed with, + *  this work for additional information regarding copyright ownership., + *  The ASF licenses this file to You under the Apache License, Version 2.0, + *  (the "License"); you may not use this file except in compliance with, + *  the License.  You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *, + *  Unless required by applicable law or agreed to in writing, software, + *  distributed under the License is distributed on an "AS IS" BASIS,, + *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + *  See the License for the specific language governing permissions and, + *  limitations under the License., + */, +, +package com.squareup.okhttp;, +, +import com.squareup.okhttp.internal.Util;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import java.util.Set;, +import java.util.TreeSet;, +, +/**, + * The header fields of a single HTTP message. Values are uninterpreted strings;, + * use {@code Request} and {@code Response} for interpreted headers. This class, + * maintains the order of the header fields within the HTTP message., + *, + * <p>This class tracks header values line-by-line. A field with multiple comma-, + * separated values on the same line will be treated as a field with a single, + * value by this class. It is the caller's responsibility to detect and split, + * on commas if their field permits multiple values. This simplifies use of, + * single-valued fields whose values routinely contain commas, such as cookies, + * or dates., + *, + * <p>This class trims whitespace from values. It never returns values with, + * leading or trailing whitespace., + *, + * <p>Instances of this class are immutable. Use {@link Builder} to create, + * instances., + */, +public final class Headers {, +  private final List<String> namesAndValues;, +, +  private Headers(Builder builder) {, +    this.namesAndValues = Util.immutableList(builder.namesAndValues);, +  }]