[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +, +    /**, +     * The peer tells us to stop creating streams.  It is safe to replay, +     * streams with {@code ID > lastGoodStreamId} on a new connection.  In-, +     * flight streams with {@code ID <= lastGoodStreamId} can only be replayed, +     * on a new connection if they are idempotent., +     *, +     * @param lastGoodStreamId the last stream ID the peer processed before, +     * sending this message. If {@lastGoodStreamId} is zero, the peer processed no frames., +     * @param errorCode reason for closing the connection., +     * @param debugData only valid for http/2; opaque debug data to send., +     */, +    void goAway(int lastGoodStreamId, ErrorCode errorCode, byte[] debugData);, +     * sent on {@code streamId}, or the connection if {@code streamId} is zero., +    void windowUpdate(int streamId, long windowSizeIncrement);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +, +    /**, +     * The peer tells us to stop creating streams.  It is safe to replay, +     * streams with {@code ID > lastGoodStreamId} on a new connection.  In-, +     * flight streams with {@code ID <= lastGoodStreamId} can only be replayed, +     * on a new connection if they are idempotent., +     *, +     * @param lastGoodStreamId the last stream ID the peer processed before, +     * sending this message. If {@lastGoodStreamId} is zero, the peer processed no frames., +     * @param errorCode reason for closing the connection., +     * @param debugData only valid for http/2; opaque debug data to send., +     */, +    void goAway(int lastGoodStreamId, ErrorCode errorCode, byte[] debugData);, +     * sent on {@code streamId}, or the connection if {@code streamId} is zero., +    void windowUpdate(int streamId, long windowSizeIncrement);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +, +, +  /**, +   * Tell the peer to stop creating streams and that we last processed, +   * {@code lastGoodStreamId}, or zero if no streams were processed., +   *, +   * @param lastGoodStreamId the last stream ID processed, or zero if no, +   * streams were processed., +   * @param errorCode reason for closing the connection., +   * @param debugData only valid for http/2; opaque debug data to send., +   */, +  void goAway(int lastGoodStreamId, ErrorCode errorCode, byte[] debugData) throws IOException;, +, +   * sent on {@code streamId}, or the connection if {@code streamId} is zero., +  void windowUpdate(int streamId, long windowSizeIncrement) throws IOException;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +, +    /**, +     * The peer tells us to stop creating streams.  It is safe to replay, +     * streams with {@code ID > lastGoodStreamId} on a new connection.  In-, +     * flight streams with {@code ID <= lastGoodStreamId} can only be replayed, +     * on a new connection if they are idempotent., +     *, +     * @param lastGoodStreamId the last stream ID the peer processed before, +     * sending this message. If {@lastGoodStreamId} is zero, the peer processed no frames., +     * @param errorCode reason for closing the connection., +     * @param debugData only valid for http/2; opaque debug data to send., +     */, +    void goAway(int lastGoodStreamId, ErrorCode errorCode, byte[] debugData);, +     * sent on {@code streamId}, or the connection if {@code streamId} is zero., +    void windowUpdate(int streamId, long windowSizeIncrement);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +, +, +  /**, +   * Tell the peer to stop creating streams and that we last processed, +   * {@code lastGoodStreamId}, or zero if no streams were processed., +   *, +   * @param lastGoodStreamId the last stream ID processed, or zero if no, +   * streams were processed., +   * @param errorCode reason for closing the connection., +   * @param debugData only valid for http/2; opaque debug data to send., +   */, +  void goAway(int lastGoodStreamId, ErrorCode errorCode, byte[] debugData) throws IOException;, +, +   * sent on {@code streamId}, or the connection if {@code streamId} is zero., +  void windowUpdate(int streamId, long windowSizeIncrement) throws IOException;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +      if (length > 16383) {, +      if (streamId != 0) throw ioException("TYPE_GOAWAY streamId != 0");, +        throw ioException("TYPE_GOAWAY unexpected error code: %d", errorCodeInt);, +      byte[] debugData = Util.EMPTY_BYTE_ARRAY;, +      if (opaqueDataLength > 0) { // Must read debug data in order to not corrupt the connection., +        debugData = new byte[opaqueDataLength];, +        Util.readFully(in, debugData);, +      handler.goAway(lastStreamId, errorCode, debugData);, +      long increment = (in.readInt() & 0x7fffffff);, +    @Override, +    public synchronized void goAway(int lastGoodStreamId, ErrorCode errorCode, byte[] debugData), +      if (errorCode.httpCode == -1) {, +        throw new IllegalArgumentException("errorCode.httpCode == -1");, +      }, +      int length = 8 + debugData.length;, +      checkFrameSize(length);, +      out.writeInt((length & 0x3fff) << 16 | (TYPE_GOAWAY & 0xff) << 8);, +      out.writeInt(0); // connection-level, +      out.writeInt(lastGoodStreamId);]