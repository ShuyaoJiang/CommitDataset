[+++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +import java.io.InterruptedIOException;, +import java.util.concurrent.RejectedExecutionException;, +  RecordingEventListener listener = new RecordingEventListener();, +      .eventListener(listener), +    listener.forbidLock(dispatcher);, +  @Test public void executionRejectedImmediately() throws Exception {, +    Request request = newRequest("http://a/1");, +    executor.shutdown();, +    client.newCall(request).enqueue(callback);, +    callback.await(request.url()).assertFailure(InterruptedIOException.class);, +    assertEquals(Arrays.asList("CallStart", "CallFailed"), listener.recordedEventTypes());, +  }, +, +  @Test public void executionRejectedAfterMaxRequestsChange() throws Exception {, +    Request request1 = newRequest("http://a/1");, +    Request request2 = newRequest("http://a/2");, +    dispatcher.setMaxRequests(1);, +    client.newCall(request1).enqueue(callback);, +    executor.shutdown();, +    client.newCall(request2).enqueue(callback);, +    dispatcher.setMaxRequests(2); // Trigger promotion., +    callback.await(request2.url()).assertFailure(InterruptedIOException.class);, +, +    assertEquals(Arrays.asList("CallStart", "CallStart", "CallFailed"),, +        listener.recordedEventTypes());, +  }, +, +  @Test public void executionRejectedAfterMaxRequestsPerHostChange() throws Exception {, +    Request request1 = newRequest("http://a/1");, +    Request request2 = newRequest("http://a/2");, +    dispatcher.setMaxRequestsPerHost(1);, +    client.newCall(request1).enqueue(callback);, +    executor.shutdown();, +    client.newCall(request2).enqueue(callback);, +    dispatcher.setMaxRequestsPerHost(2); // Trigger promotion., +    callback.await(request2.url()).assertFailure(InterruptedIOException.class);, +    assertEquals(Arrays.asList("CallStart", "CallStart", "CallFailed"),, +        listener.recordedEventTypes());, +  }, +, +  @Test public void executionRejectedAfterPrecedingCallFinishes() throws Exception {, +    Request request1 = newRequest("http://a/1");, +    Request request2 = newRequest("http://a/2");, +    dispatcher.setMaxRequests(1);, +    client.newCall(request1).enqueue(callback);, +    executor.shutdown();, +    client.newCall(request2).enqueue(callback);, +    executor.finishJob("http://a/1"); // Trigger promotion., +    callback.await(request2.url()).assertFailure(InterruptedIOException.class);, +    assertEquals(Arrays.asList("CallStart", "CallStart", "CallFailed"),, +        listener.recordedEventTypes());, +  }, +, +    private boolean shutdown;, +      if (shutdown) throw new RejectedExecutionException();, +      shutdown = true;, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +import java.io.InterruptedIOException;, +import java.util.concurrent.RejectedExecutionException;, +  RecordingEventListener listener = new RecordingEventListener();, +      .eventListener(listener), +    listener.forbidLock(dispatcher);, +  @Test public void executionRejectedImmediately() throws Exception {, +    Request request = newRequest("http://a/1");, +    executor.shutdown();, +    client.newCall(request).enqueue(callback);, +    callback.await(request.url()).assertFailure(InterruptedIOException.class);, +    assertEquals(Arrays.asList("CallStart", "CallFailed"), listener.recordedEventTypes());, +  }, +, +  @Test public void executionRejectedAfterMaxRequestsChange() throws Exception {, +    Request request1 = newRequest("http://a/1");, +    Request request2 = newRequest("http://a/2");, +    dispatcher.setMaxRequests(1);, +    client.newCall(request1).enqueue(callback);, +    executor.shutdown();, +    client.newCall(request2).enqueue(callback);, +    dispatcher.setMaxRequests(2); // Trigger promotion., +    callback.await(request2.url()).assertFailure(InterruptedIOException.class);, +, +    assertEquals(Arrays.asList("CallStart", "CallStart", "CallFailed"),, +        listener.recordedEventTypes());, +  }, +, +  @Test public void executionRejectedAfterMaxRequestsPerHostChange() throws Exception {, +    Request request1 = newRequest("http://a/1");, +    Request request2 = newRequest("http://a/2");, +    dispatcher.setMaxRequestsPerHost(1);, +    client.newCall(request1).enqueue(callback);, +    executor.shutdown();, +    client.newCall(request2).enqueue(callback);, +    dispatcher.setMaxRequestsPerHost(2); // Trigger promotion., +    callback.await(request2.url()).assertFailure(InterruptedIOException.class);, +    assertEquals(Arrays.asList("CallStart", "CallStart", "CallFailed"),, +        listener.recordedEventTypes());, +  }, +, +  @Test public void executionRejectedAfterPrecedingCallFinishes() throws Exception {, +    Request request1 = newRequest("http://a/1");]