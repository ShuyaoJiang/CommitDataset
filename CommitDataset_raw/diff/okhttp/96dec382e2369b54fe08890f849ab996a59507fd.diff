[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.BufferedSource;, +        requestBody.toByteArray(), sequenceNumber, socket);, +      BufferedSource bodyIn = Okio.buffer(stream.getSource());, +      byte[] bodyOut = bodyIn.readByteArray();, +      bodyIn.close();, +      return new RecordedRequest(requestLine, httpHeaders, chunkSizes, bodyOut.length,, +          bodyOut, sequenceNumber.getAndIncrement(), socket);, +            Util.EMPTY_BYTE_ARRAY, sequenceNumber.getAndIncrement(), socket));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.BufferedSource;, +        requestBody.toByteArray(), sequenceNumber, socket);, +      BufferedSource bodyIn = Okio.buffer(stream.getSource());, +      byte[] bodyOut = bodyIn.readByteArray();, +      bodyIn.close();, +      return new RecordedRequest(requestLine, httpHeaders, chunkSizes, bodyOut.length,, +          bodyOut, sequenceNumber.getAndIncrement(), socket);, +            Util.EMPTY_BYTE_ARRAY, sequenceNumber.getAndIncrement(), socket));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/RecordedRequest.java, +import java.io.UnsupportedEncodingException;, +  private final byte[] body;, +      long bodySize, byte[] body, int sequenceNumber, Socket socket) {, +        ? Internal.instance.tlsVersionForJavaName(((SSLSocket) socket).getSession().getProtocol()), +  public byte[] getBody() {, +  /** Returns the body of this POST request decoded as a UTF-8 string. */, +    try {, +      return new String(body, "UTF-8");, +    } catch (UnsupportedEncodingException e) {, +      throw new AssertionError();, +    }, +    return tlsVersion != null ? tlsVersion.name() : null;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.BufferedSource;, +        requestBody.toByteArray(), sequenceNumber, socket);, +      BufferedSource bodyIn = Okio.buffer(stream.getSource());, +      byte[] bodyOut = bodyIn.readByteArray();, +      bodyIn.close();, +      return new RecordedRequest(requestLine, httpHeaders, chunkSizes, bodyOut.length,, +          bodyOut, sequenceNumber.getAndIncrement(), socket);, +            Util.EMPTY_BYTE_ARRAY, sequenceNumber.getAndIncrement(), socket));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/RecordedRequest.java, +import java.io.UnsupportedEncodingException;, +  private final byte[] body;, +      long bodySize, byte[] body, int sequenceNumber, Socket socket) {, +        ? Internal.instance.tlsVersionForJavaName(((SSLSocket) socket).getSession().getProtocol()), +  public byte[] getBody() {, +  /** Returns the body of this POST request decoded as a UTF-8 string. */, +    try {, +      return new String(body, "UTF-8");, +    } catch (UnsupportedEncodingException e) {, +      throw new AssertionError();, +    }, +    return tlsVersion != null ? tlsVersion.name() : null;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRule.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.BufferedSource;, +        requestBody.toByteArray(), sequenceNumber, socket);, +      BufferedSource bodyIn = Okio.buffer(stream.getSource());, +      byte[] bodyOut = bodyIn.readByteArray();, +      bodyIn.close();, +      return new RecordedRequest(requestLine, httpHeaders, chunkSizes, bodyOut.length,, +          bodyOut, sequenceNumber.getAndIncrement(), socket);, +            Util.EMPTY_BYTE_ARRAY, sequenceNumber.getAndIncrement(), socket));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/RecordedRequest.java, +import java.io.UnsupportedEncodingException;, +  private final byte[] body;, +      long bodySize, byte[] body, int sequenceNumber, Socket socket) {, +        ? Internal.instance.tlsVersionForJavaName(((SSLSocket) socket).getSession().getProtocol()), +  public byte[] getBody() {, +  /** Returns the body of this POST request decoded as a UTF-8 string. */, +    try {, +      return new String(body, "UTF-8");, +    } catch (UnsupportedEncodingException e) {, +      throw new AssertionError();, +    }, +    return tlsVersion != null ? tlsVersion.name() : null;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/rule/MockWebServerRule.java, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +    byte[] body = {'A', 'B', 'C'};, +        requestLine, headers, chunkSizes, body.length, body, 0, null);, +    assertEquals("ABC", request.getUtf8Body());, +  /**, +   * Clients who adhere to <a, +   * href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html#sec8.2.3">100, +   * Status</a> expect the server to send an interim response with status code, +   * 100 before they send their payload., +   *, +   * <h4>Note</h4>, +   *, +   * JRE 6 only passes this test if, +   * {@code -Dsun.net.http.allowRestrictedHeaders=true} is set., +   */, +  @Test public void expect100ContinueWithBody() throws Exception {, +    server.enqueue(new MockResponse());, +, +    URL url = server.getUrl("/");, +    HttpURLConnection connection = (HttpURLConnection) url.openConnection();, +    connection.setRequestMethod("PUT");, +    connection.setAllowUserInteraction(false);, +    connection.setRequestProperty("Expect", "100-continue");]