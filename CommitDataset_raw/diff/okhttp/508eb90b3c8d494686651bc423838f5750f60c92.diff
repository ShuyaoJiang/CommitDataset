[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    String name = request.getPath();, +    ThreadPoolExecutor replyExecutor =, +        new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>(),, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket Replier", name), true));, +    replyExecutor.allowCoreThreadTimeOut(true);, +    final CountDownLatch connectionClose = new CountDownLatch(1);, +    RealWebSocket webSocket =, +        new RealWebSocket(false /* is server */, source, sink, new SecureRandom(), replyExecutor,, +            response.getWebSocketListener(), fancyResponse, name) {, +          @Override protected void shutdown() {, +            connectionClose.countDown();, +        };, +, +    webSocket.loopReader();, +    } catch (InterruptedException ignored) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    String name = request.getPath();, +    ThreadPoolExecutor replyExecutor =, +        new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>(),, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket Replier", name), true));, +    replyExecutor.allowCoreThreadTimeOut(true);, +    final CountDownLatch connectionClose = new CountDownLatch(1);, +    RealWebSocket webSocket =, +        new RealWebSocket(false /* is server */, source, sink, new SecureRandom(), replyExecutor,, +            response.getWebSocketListener(), fancyResponse, name) {, +          @Override protected void shutdown() {, +            connectionClose.countDown();, +        };, +, +    webSocket.loopReader();, +    } catch (InterruptedException ignored) {, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private void runTest(final long number, final long count) {, +          @Override public void onFailure(Throwable t, Response response) {, +            t.printStackTrace(System.out);, +    final AtomicReference<Throwable> failureRef = new AtomicReference<>();, +      @Override public void onFailure(Throwable t, Response response) {, +        failureRef.set(t);, +    Throwable failure = failureRef.get();, +      throw new RuntimeException(failure);, +      @Override public void onFailure(Throwable t, Response response) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    String name = request.getPath();, +    ThreadPoolExecutor replyExecutor =, +        new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>(),, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket Replier", name), true));, +    replyExecutor.allowCoreThreadTimeOut(true);, +    final CountDownLatch connectionClose = new CountDownLatch(1);, +    RealWebSocket webSocket =, +        new RealWebSocket(false /* is server */, source, sink, new SecureRandom(), replyExecutor,, +            response.getWebSocketListener(), fancyResponse, name) {, +          @Override protected void shutdown() {, +            connectionClose.countDown();, +        };, +, +    webSocket.loopReader();, +    } catch (InterruptedException ignored) {, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private void runTest(final long number, final long count) {, +          @Override public void onFailure(Throwable t, Response response) {, +            t.printStackTrace(System.out);, +    final AtomicReference<Throwable> failureRef = new AtomicReference<>();, +      @Override public void onFailure(Throwable t, Response response) {, +        failureRef.set(t);, +    Throwable failure = failureRef.get();, +      throw new RuntimeException(failure);, +      @Override public void onFailure(Throwable t, Response response) {, +++ b/okhttp-tests/src/test/java/okhttp3/TestLogHandler.java, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.LinkedBlockingQueue;, +import java.util.concurrent.TimeUnit;, +  private final BlockingQueue<String> logs = new LinkedBlockingQueue<>();, +  @Override public void publish(LogRecord logRecord) {, +  @Override public void close() {, +  public String take() throws InterruptedException {, +    String message = logs.poll(10, TimeUnit.SECONDS);, +    if (message == null) {, +      throw new AssertionError("Timed out waiting for log message.");, +    return message;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    String name = request.getPath();, +    ThreadPoolExecutor replyExecutor =, +        new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>(),, +            Util.threadFactory(Util.format("MockWebServer %s WebSocket Replier", name), true));, +    replyExecutor.allowCoreThreadTimeOut(true);, +    final CountDownLatch connectionClose = new CountDownLatch(1);, +    RealWebSocket webSocket =, +        new RealWebSocket(false /* is server */, source, sink, new SecureRandom(), replyExecutor,, +            response.getWebSocketListener(), fancyResponse, name) {, +          @Override protected void shutdown() {, +            connectionClose.countDown();, +        };, +, +    webSocket.loopReader();, +    } catch (InterruptedException ignored) {, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private void runTest(final long number, final long count) {, +          @Override public void onFailure(Throwable t, Response response) {, +            t.printStackTrace(System.out);]