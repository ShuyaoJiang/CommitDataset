[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import com.squareup.okhttp.internal.ByteString;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import com.squareup.okhttp.internal.ByteString;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.Protocol;, +        String name = spdyHeaders.get(i).name.utf8();, +        if (":method".equals(name)) {, +        } else if (":path".equals(name)) {, +        } else if (":version".equals(name)) {, +          httpHeaders.add(name + ": " + value);, +        spdyHeaders.add(new Header(headerParts[0].toLowerCase(Locale.US).trim(),, +            headerParts[1].trim()));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import com.squareup.okhttp.internal.ByteString;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.Protocol;, +        String name = spdyHeaders.get(i).name.utf8();, +        if (":method".equals(name)) {, +        } else if (":path".equals(name)) {, +        } else if (":version".equals(name)) {, +          httpHeaders.add(name + ": " + value);, +        spdyHeaders.add(new Header(headerParts[0].toLowerCase(Locale.US).trim(),, +            headerParts[1].trim()));, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/ByteString.java, +import java.io.EOFException;, +  /**, +   * A singleton empty {@code ByteString}., +   */, +   * Returns a new byte string containing the bytes of {@code data}, or, +   * {@link #EMPTY} if {@code data} is an empty array., +  /**, +   * Returns a new byte string containing the bytes of {@code data}, +   * from {@code offset} to {@code offset + count - 1}, inclusive, or, +   * {@link #EMPTY} if {@code count} is zero., +   */, +  public static ByteString of(byte[] data, int offset, int count) {, +    byte[] bytes = new byte[count];, +    System.arraycopy(data, offset, bytes, 0, count);, +    return new ByteString(bytes);, +  }, +, +   * Returns true when {@code s} is not null and its {@code UTF-8} encoded, +   * bytes are equivalent to the bytes wrapped by this byte string., +  public boolean utf8Equals(String s) {, +    if (s == null) return false;, +    // TODO: avoid allocation, +    return utf8().equals(s);, +   * @throws EOFException if {@code in} has fewer than {@code count} bytes to, +   * read., +    for (int c = 0; c < count; ) {, +      int read = in.read(result, c, count - c);, +      if (read == -1) throw new EOFException("Expected " + count + "; received " + c);, +      c += read;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import com.squareup.okhttp.internal.ByteString;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.Protocol;, +        String name = spdyHeaders.get(i).name.utf8();, +        if (":method".equals(name)) {, +        } else if (":path".equals(name)) {, +        } else if (":version".equals(name)) {, +          httpHeaders.add(name + ": " + value);, +        spdyHeaders.add(new Header(headerParts[0].toLowerCase(Locale.US).trim(),, +            headerParts[1].trim()));, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/ByteString.java, +import java.io.EOFException;, +  /**, +   * A singleton empty {@code ByteString}., +   */, +   * Returns a new byte string containing the bytes of {@code data}, or, +   * {@link #EMPTY} if {@code data} is an empty array., +  /**, +   * Returns a new byte string containing the bytes of {@code data}, +   * from {@code offset} to {@code offset + count - 1}, inclusive, or, +   * {@link #EMPTY} if {@code count} is zero., +   */, +  public static ByteString of(byte[] data, int offset, int count) {, +    byte[] bytes = new byte[count];, +    System.arraycopy(data, offset, bytes, 0, count);, +    return new ByteString(bytes);, +  }, +, +   * Returns true when {@code s} is not null and its {@code UTF-8} encoded, +   * bytes are equivalent to the bytes wrapped by this byte string., +  public boolean utf8Equals(String s) {, +    if (s == null) return false;, +    // TODO: avoid allocation, +    return utf8().equals(s);, +   * @throws EOFException if {@code in} has fewer than {@code count} bytes to, +   * read., +    for (int c = 0; c < count; ) {, +      int read = in.read(result, c, count - c);, +      if (read == -1) throw new EOFException("Expected " + count + "; received " + c);, +      c += read;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import com.squareup.okhttp.internal.ByteString;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.Protocol;]