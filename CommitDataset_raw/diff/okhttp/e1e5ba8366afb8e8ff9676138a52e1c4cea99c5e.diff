[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      HttpLoggingInterceptor.Logger logger = System.out::println;, +    return (name, session) -> true;, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      HttpLoggingInterceptor.Logger logger = System.out::println;, +    return (name, session) -> true;, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Logger DEFAULT = message -> Platform.get().log(INFO, message, null);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      HttpLoggingInterceptor.Logger logger = System.out::println;, +    return (name, session) -> true;, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Logger DEFAULT = message -> Platform.get().log(INFO, message, null);, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +        .dns(hostname -> { throw new UnknownHostException("reason"); }), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      HttpLoggingInterceptor.Logger logger = System.out::println;, +    return (name, session) -> true;, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Logger DEFAULT = message -> Platform.get().log(INFO, message, null);, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +        .dns(hostname -> { throw new UnknownHostException("reason"); }), +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    client = new OkHttpClient.Builder(), +        .dns(hostname -> { throw new UnknownHostException("reason"); }), +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {, +      URL url = mockWebServer.url(path).url();, +      HttpURLConnection conn;, +      } catch (IOException ignored) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    new Thread(() -> {, +    }).start();, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +      HttpLoggingInterceptor.Logger logger = System.out::println;, +    return (name, session) -> true;, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    Logger DEFAULT = message -> Platform.get().log(INFO, message, null);, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +        .dns(hostname -> { throw new UnknownHostException("reason"); }), +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    client = new OkHttpClient.Builder(), +        .dns(hostname -> { throw new UnknownHostException("reason"); }), +++ b/okhttp-sse/src/main/java/okhttp3/sse/EventSources.java, +    return (request, listener) -> {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java, +  private Thread buildRequestThread(String path, AtomicInteger responseCode) {, +    return new Thread(() -> {]