[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteSelector.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteSelector.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +   *, +   * @param source the buffer to draw bytes from. May be null if byteCount is 0., +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteSelector.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +   *, +   * @param source the buffer to draw bytes from. May be null if byteCount is 0., +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +    void dataFrame(int streamId, byte flags, OkBuffer buffer, int byteCount) throws IOException {, +      frameHeader(byteCount, type, flags, streamId);, +      if (byteCount > 0) {, +        sink.write(buffer, byteCount);, +      }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteSelector.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +   *, +   * @param source the buffer to draw bytes from. May be null if byteCount is 0., +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +    void dataFrame(int streamId, byte flags, OkBuffer buffer, int byteCount) throws IOException {, +      frameHeader(byteCount, type, flags, streamId);, +      if (byteCount > 0) {, +        sink.write(buffer, byteCount);, +      }, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/Spdy3.java, +      if (byteCount > 0) {, +    }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteSelector.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +   *, +   * @param source the buffer to draw bytes from. May be null if byteCount is 0., +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +    void dataFrame(int streamId, byte flags, OkBuffer buffer, int byteCount) throws IOException {, +      frameHeader(byteCount, type, flags, streamId);, +      if (byteCount > 0) {, +        sink.write(buffer, byteCount);, +      }, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/Spdy3.java, +      if (byteCount > 0) {, +    }, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, +  final SpdyDataSink sink;, +    this.sink = new SpdyDataSink();, +   * A sink that writes outgoing data frames of a stream. This class is not, +   * thread safe., +  final class SpdyDataSink implements Sink {, +        connection.writeData(id, false, source, toWrite);, +, +    @Override public void flush() throws IOException {, +      assert (!Thread.holdsLock(SpdyStream.this));, +      synchronized (SpdyStream.this) {, +        checkOutNotClosed();, +      }, +      connection.flush();, +    }, +, +    @Override public Sink deadline(Deadline deadline) {, +      // TODO: honor deadlines., +      return this;, +    }, +, +    @Override public void close() throws IOException {, +      assert (!Thread.holdsLock(SpdyStream.this));, +      synchronized (SpdyStream.this) {, +        if (closed) return;, +      }, +      if (!sink.finished) {, +        connection.writeData(id, true, null, 0);, +      }, +      synchronized (SpdyStream.this) {, +        closed = true;, +      }, +      connection.flush();, +      cancelStreamIfNecessary();, +    }]