[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  /** We forbid non-ASCII characters in outgoing request headers, but accept UTF-8. */, +  @Test public void responseHeaderParsingIsLenient() throws Exception {, +    Headers headers = new Headers.Builder(), +        .add("Content-Length", "0"), +        .addLenient("a\tb: c\u007fd"), +        .addLenient(": ef"), +        .addLenient("\ud83c\udf69: \u2615\ufe0f"), +        .build();, +    server.enqueue(new MockResponse().setHeaders(headers));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    executeSynchronously(request), +        .assertHeader("a\tb", "c\u007fd"), +        .assertHeader("\ud83c\udf69", "\u2615\ufe0f"), +        .assertHeader("", "ef");, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  /** We forbid non-ASCII characters in outgoing request headers, but accept UTF-8. */, +  @Test public void responseHeaderParsingIsLenient() throws Exception {, +    Headers headers = new Headers.Builder(), +        .add("Content-Length", "0"), +        .addLenient("a\tb: c\u007fd"), +        .addLenient(": ef"), +        .addLenient("\ud83c\udf69: \u2615\ufe0f"), +        .build();, +    server.enqueue(new MockResponse().setHeaders(headers));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    executeSynchronously(request), +        .assertHeader("a\tb", "c\u007fd"), +        .assertHeader("\ud83c\udf69", "\u2615\ufe0f"), +        .assertHeader("", "ef");, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +    assertEquals(HttpUrl.parse("http://host/"), HttpUrl.parse("http://host:/"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  /** We forbid non-ASCII characters in outgoing request headers, but accept UTF-8. */, +  @Test public void responseHeaderParsingIsLenient() throws Exception {, +    Headers headers = new Headers.Builder(), +        .add("Content-Length", "0"), +        .addLenient("a\tb: c\u007fd"), +        .addLenient(": ef"), +        .addLenient("\ud83c\udf69: \u2615\ufe0f"), +        .build();, +    server.enqueue(new MockResponse().setHeaders(headers));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    executeSynchronously(request), +        .assertHeader("a\tb", "c\u007fd"), +        .assertHeader("\ud83c\udf69", "\u2615\ufe0f"), +        .assertHeader("", "ef");, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +    assertEquals(HttpUrl.parse("http://host/"), HttpUrl.parse("http://host:/"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +import static org.junit.Assert.fail;, +    Request builtRequestWithCache = requestWithCache.newBuilder().url(, +        "http://localhost/api/foo").build();, +  @Test public void headerAcceptsPermittedCharacters() throws Exception {, +    Request.Builder builder = new Request.Builder();, +    builder.header("AZab09 ~", "AZab09 ~");, +    builder.addHeader("AZab09 ~", "AZab09 ~");, +  }, +, +  @Test public void emptyNameForbidden() throws Exception {, +    Request.Builder builder = new Request.Builder();, +    try {, +      builder.header("", "Value");, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +    try {, +      builder.addHeader("", "Value");, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @Test public void headerForbidsControlCharacters() throws Exception {, +    assertForbiddenHeader(null);, +    assertForbiddenHeader("\u0000");, +    assertForbiddenHeader("\r");, +    assertForbiddenHeader("\n");, +    assertForbiddenHeader("\t");, +    assertForbiddenHeader("\u001f");, +    assertForbiddenHeader("\u007f");, +    assertForbiddenHeader("\u0080");]