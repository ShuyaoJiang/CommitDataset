[+++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +  static ResponseBody uppercase(ResponseBody original) {, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +  static ResponseBody uppercase(ResponseBody original) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java, +    synchronized (cache) {, +    }, +      DiskLruCache.create(cacheDir, appVersion, 2, 0);, +      DiskLruCache.create(cacheDir, appVersion, 0, 10);, +    cache = DiskLruCache.create(dir, appVersion, 2, Integer.MAX_VALUE);, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +  static ResponseBody uppercase(ResponseBody original) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java, +    synchronized (cache) {, +    }, +      DiskLruCache.create(cacheDir, appVersion, 2, 0);, +      DiskLruCache.create(cacheDir, appVersion, 0, 10);, +    cache = DiskLruCache.create(dir, appVersion, 2, Integer.MAX_VALUE);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Cache.java, +  public Cache(File directory, long maxSize) {, +    cache = DiskLruCache.create(directory, VERSION, ENTRY_COUNT, maxSize);, +  public Iterator<String> urls() throws IOException {, +  public long getSize() throws IOException {, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +  static ResponseBody uppercase(ResponseBody original) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java, +    synchronized (cache) {, +    }, +      DiskLruCache.create(cacheDir, appVersion, 2, 0);, +      DiskLruCache.create(cacheDir, appVersion, 0, 10);, +    cache = DiskLruCache.create(dir, appVersion, 2, Integer.MAX_VALUE);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Cache.java, +  public Cache(File directory, long maxSize) {, +    cache = DiskLruCache.create(directory, VERSION, ENTRY_COUNT, maxSize);, +  public Iterator<String> urls() throws IOException {, +  public long getSize() throws IOException {, +++ b/okhttp/src/main/java/com/squareup/okhttp/ResponseBody.java, +  public abstract long contentLength();, +  public final InputStream byteStream() {, +  public abstract BufferedSource source();, +  public final Reader charStream() {, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +  private static HttpResponse transformResponse(Response response) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +  static ResponseBody uppercase(ResponseBody original) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java, +    synchronized (cache) {, +    }, +      DiskLruCache.create(cacheDir, appVersion, 2, 0);, +      DiskLruCache.create(cacheDir, appVersion, 0, 10);, +    cache = DiskLruCache.create(dir, appVersion, 2, Integer.MAX_VALUE);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Cache.java, +  public Cache(File directory, long maxSize) {, +    cache = DiskLruCache.create(directory, VERSION, ENTRY_COUNT, maxSize);, +  public Iterator<String> urls() throws IOException {, +  public long getSize() throws IOException {, +++ b/okhttp/src/main/java/com/squareup/okhttp/ResponseBody.java, +  public abstract long contentLength();, +  public final InputStream byteStream() {, +  public abstract BufferedSource source();, +  public final Reader charStream() {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/DiskLruCache.java, +  // Must be read and written when synchronized on 'this'., +  private boolean initialized;, +, +        if (isClosed()) {, +    assert Thread.holdsLock(this);, +, +    if (initialized) {, +      return; // Already initialized., +    }, +, +        initialized = true;, +, +    initialized = true;, +   * Create a cache which will reside in {@code directory}. This cache is lazily initialized on, +   * first access and will be created if it does not exist., +  public static DiskLruCache create(File directory, int appVersion, int valueCount, long maxSize) {, +    return new DiskLruCache(directory, appVersion, valueCount, maxSize, executor);, +    initialize();, +, +    initialize();, +, +  public synchronized long size() throws IOException {, +    initialize();, +    initialize();, +, +  public synchronized boolean isClosed() {, +  private synchronized void checkNotClosed() {, +    if (isClosed()) {]