[+++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import com.squareup.okhttp.internal.http.OkResponseCache;, + * Caches HTTP and HTTPS responses to the filesystem so they may be reused,, + * saving time and bandwidth., + *, + * <h3>Cache Optimization</h3>, + * To measure cache effectiveness, this class tracks three statistics:, + * <ul>, + *     <li><strong>{@link #getRequestCount() Request Count:}</strong> the number, + *         of HTTP requests issued since this cache was created., + *     <li><strong>{@link #getNetworkCount() Network Count:}</strong> the, + *         number of those requests that required network use., + *     <li><strong>{@link #getHitCount() Hit Count:}</strong> the number of, + *         those requests whose responses were served by the cache., + * </ul>, + * Sometimes a request will result in a conditional cache hit. If the cache, + * contains a stale copy of the response, the client will issue a conditional, + * {@code GET}. The server will then send either the updated response if it has, + * changed, or a short 'not modified' response if the client's copy is still, + * valid. Such responses increment both the network count and hit count., + *, + * <p>The best way to improve the cache hit rate is by configuring the web, + * server to return cacheable responses. Although this client honors all <a, + * href="http://www.ietf.org/rfc/rfc2616.txt">HTTP/1.1 (RFC 2068)</a> cache, + * headers, it doesn't cache partial responses., + *, + * <h3>Force a Network Response</h3>, + * In some situations, such as after a user clicks a 'refresh' button, it may be, + * necessary to skip the cache, and fetch data directly from the server. To force, + * a full refresh, add the {@code no-cache} directive: <pre>   {@code, + *         connection.addRequestProperty("Cache-Control", "no-cache");, + * }</pre>, + * If it is only necessary to force a cached response to be validated by the, + * server, use the more efficient {@code max-age=0} instead: <pre>   {@code, + *         connection.addRequestProperty("Cache-Control", "max-age=0");, + * }</pre>, + *, + * <h3>Force a Cache Response</h3>, + * Sometimes you'll want to show resources if they are available immediately,, + * but not otherwise. This can be used so your application can show, + * <i>something</i> while waiting for the latest data to be downloaded. To, + * restrict a request to locally-cached resources, add the {@code, + * only-if-cached} directive: <pre>   {@code, + *     try {, + *         connection.addRequestProperty("Cache-Control", "only-if-cached");, + *         InputStream cached = connection.getInputStream();, + *         // the resource was cached! show it, + *     } catch (FileNotFoundException e) {, + *         // the resource was not cached, + *     }, + * }</pre>, + * This technique works even better in situations where a stale response is, + * better than no response. To permit stale cached responses, use the {@code, + * max-stale} directive with the maximum staleness in seconds: <pre>   {@code, + *         int maxStale = 60 * 60 * 24 * 28; // tolerate 4-weeks stale, + *         connection.addRequestProperty("Cache-Control", "max-stale=" + maxStale);, + * }</pre>, +  /**, +   * Although this class only exposes the limited ResponseCache API, it, +   * implements the full OkResponseCache interface. This field is used as a, +   * package private handle to the complete implementation. It delegates to, +   * public and private members of this type., +   */, +  final OkResponseCache okResponseCache = new OkResponseCache() {, +    @Override public CacheResponse get(URI uri, String requestMethod,, +        Map<String, List<String>> requestHeaders) throws IOException {, +      return HttpResponseCache.this.get(uri, requestMethod, requestHeaders);, +    }, +, +    @Override public CacheRequest put(URI uri, URLConnection connection) throws IOException {, +      return HttpResponseCache.this.put(uri, connection);, +    }, +, +    @Override public void update(, +        CacheResponse conditionalCacheHit, HttpURLConnection connection) throws IOException {, +      HttpResponseCache.this.update(conditionalCacheHit, connection);, +    }, +, +    @Override public void trackConditionalCacheHit() {, +      HttpResponseCache.this.trackConditionalCacheHit();, +    }, +, +    @Override public void trackResponse(ResponseSource source) {, +      HttpResponseCache.this.trackResponse(source);, +    }, +  };, +, +  private void update(CacheResponse conditionalCacheHit, HttpURLConnection httpConnection), +  /**, +   * Closes the cache and deletes all of its stored values. This will delete, +   * all files in the cache directory including files that weren't created by, +   * the cache., +   */, +  public void delete() throws IOException {, +    cache.delete();, +  private synchronized void trackResponse(ResponseSource source) {, +  private synchronized void trackConditionalCacheHit() {, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import com.squareup.okhttp.internal.http.OkResponseCache;, + * Caches HTTP and HTTPS responses to the filesystem so they may be reused,]