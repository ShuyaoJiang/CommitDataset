[+++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +import java.io.InterruptedIOException;, +import static org.junit.Assert.assertTrue;, +  @Test public void threadIsInterruptedOnFirstRead() {, +    Thread.currentThread().interrupt();, +    try {, +      String result = publicSuffixDatabase.getEffectiveTldPlusOne("squareup.com");, +      assertEquals("squareup.com", result);, +    } finally {, +      assertTrue(Thread.interrupted());, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +import java.io.InterruptedIOException;, +import static org.junit.Assert.assertTrue;, +  @Test public void threadIsInterruptedOnFirstRead() {, +    Thread.currentThread().interrupt();, +    try {, +      String result = publicSuffixDatabase.getEffectiveTldPlusOne("squareup.com");, +      assertEquals("squareup.com", result);, +    } finally {, +      assertTrue(Thread.interrupted());, +    }, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.java, +import java.io.InterruptedIOException;, +      readTheListUninterruptibly();, +  /**, +   * Reads the public suffix list treating the operation as uninterruptible. We always want to read, +   * the list otherwise we'll be left in a bad state. If the thread was interrupted prior to this, +   * operation, it will be re-interrupted after the list is read., +   */, +  private void readTheListUninterruptibly() {, +    boolean interrupted = false;, +    try {, +      while (true) {, +        try {, +          readTheList();, +          return;, +        } catch (InterruptedIOException e) {, +          interrupted = true;, +        } catch (IOException e) {, +          Platform.get().log(Platform.WARN, "Failed to read public suffix list", e);, +          return;, +        }, +      }, +    } finally {, +      if (interrupted) {, +        Thread.currentThread().interrupt();, +      }, +    }, +  }, +  private void readTheList() throws IOException {, +    byte[] publicSuffixListBytes;, +    byte[] publicSuffixExceptionListBytes;, +, +    InputStream resource = PublicSuffixDatabase.class.getClassLoader().getResourceAsStream(, +    if (resource == null) return;, +    BufferedSource bufferedSource = Okio.buffer(new GzipSource(Okio.source(resource)));]