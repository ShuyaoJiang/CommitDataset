[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +  private WebSocketListener webSocketListener;, +    return setStatus("HTTP/1.1 " + code + " OK");, +    if (bodyStream != null) {, +      return bodyStream;, +    }, +    Buffer body = getBody();, +    return body != null ? body.inputStream() : null;, +  /**, +   * Attempts to perform a web socket upgrade on the connection. This will overwrite any previously, +   * set status or body., +   */, +  public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, +    setStatus("HTTP/1.1 101 Switching Protocols");, +    setHeader("Connection", "Upgrade");, +    setHeader("Upgrade", "websocket");, +    body = null;, +    bodyStream = null;, +    webSocketListener = listener;, +    return this;, +  }, +, +  public WebSocketListener getWebSocketListener() {, +    return webSocketListener;, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +  private WebSocketListener webSocketListener;, +    return setStatus("HTTP/1.1 " + code + " OK");, +    if (bodyStream != null) {, +      return bodyStream;, +    }, +    Buffer body = getBody();, +    return body != null ? body.inputStream() : null;, +  /**, +   * Attempts to perform a web socket upgrade on the connection. This will overwrite any previously, +   * set status or body., +   */, +  public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, +    setStatus("HTTP/1.1 101 Switching Protocols");, +    setHeader("Connection", "Upgrade");, +    setHeader("Upgrade", "websocket");, +    body = null;, +    bodyStream = null;, +    webSocketListener = listener;, +    return this;, +  }, +, +  public WebSocketListener getWebSocketListener() {, +    return webSocketListener;, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.Headers;, +import com.squareup.okhttp.Request;, +import com.squareup.okhttp.Response;, +import com.squareup.okhttp.internal.ws.RealWebSocket;, +import com.squareup.okhttp.internal.ws.WebSocketListener;, +import com.squareup.okhttp.internal.ws.WebSocketProtocol;, +import java.util.concurrent.CountDownLatch;, +import okio.BufferedSource;, +, +, +, +        boolean requestWantsWebSockets = "Upgrade".equalsIgnoreCase(request.getHeader("Connection")), +            && "websocket".equalsIgnoreCase(request.getHeader("Upgrade"));, +        boolean responseWantsWebSockets = response.getWebSocketListener() != null;, +        if (requestWantsWebSockets && responseWantsWebSockets) {, +          handleWebSocketUpgrade(socket, in, out, request, response);, +        } else {, +          writeHttpResponse(socket, out, response);, +        }, +, +, +  private void handleWebSocketUpgrade(Socket socket, InputStream in, OutputStream out,, +      RecordedRequest request, MockResponse response) throws IOException {, +    String key = request.getHeader("Sec-WebSocket-Key");, +    String acceptKey = Util.shaBase64(key + WebSocketProtocol.ACCEPT_MAGIC);, +    response.setHeader("Sec-WebSocket-Accept", acceptKey);, +, +    writeHttpResponse(socket, out, response);, +, +    BufferedSource source = Okio.buffer(Okio.source(in));, +    BufferedSink sink = Okio.buffer(Okio.sink(out));, +, +    final WebSocketListener listener = response.getWebSocketListener();, +    final CountDownLatch connectionClose = new CountDownLatch(1);, +    final RealWebSocket webSocket =, +        new RealWebSocket(false, source, sink, new SecureRandom(), listener,, +            request.getPath()) {, +          @Override protected void closeConnection() throws IOException {, +            connectionClose.countDown();, +          }, +        };, +, +    // Adapt the request and response into our Request and Response domain model., +    Request.Builder fancyRequestBuilder = new Request.Builder(), +        .get().url(request.getPath());]