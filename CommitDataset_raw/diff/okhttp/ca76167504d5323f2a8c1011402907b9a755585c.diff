[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +      if (connection.allocations.size() < connection.allocationLimit, +          && address.equals(connection.route().address), +          && !connection.noNewStreams) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +      if (connection.allocations.size() < connection.allocationLimit, +          && address.equals(connection.route().address), +          && !connection.noNewStreams) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +      if (connection.allocations.size() < connection.allocationLimit, +          && address.equals(connection.route().address), +          && !connection.noNewStreams) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +      if (connection.allocations.size() < connection.allocationLimit, +          && address.equals(connection.route().address), +          && !connection.noNewStreams) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +  public void connect(int connectTimeout, int readTimeout, int writeTimeout,, +      List<ConnectionSpec> connectionSpecs, boolean connectionRetryEnabled) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +      if (connection.allocations.size() < connection.allocationLimit, +          && address.equals(connection.route().address), +          && !connection.noNewStreams) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +  public void connect(int connectTimeout, int readTimeout, int writeTimeout,, +      List<ConnectionSpec> connectionSpecs, boolean connectionRetryEnabled) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +      RealConnection pooledConnection = Internal.instance.get(connectionPool, address, this);, +      if (pooledConnection != null) {, +        this.connection = pooledConnection;, +        return pooledConnection;, +      }, +    }, +    RealConnection newConnection = new RealConnection(connectionPool, selectedRoute);, +, +    synchronized (connectionPool) {, +      acquire(newConnection);, +      Internal.instance.put(connectionPool, newConnection);, +      this.connection = newConnection;, +    newConnection.connect(connectTimeout, readTimeout, writeTimeout, address.connectionSpecs(),, +        connectionRetryEnabled);, +    routeDatabase().connected(newConnection.route());, +    return newConnection;, +    deallocate(noNewStreams, false, true);, +    deallocate(false, true, false);, +    deallocate(true, false, false);, +   * connection will be detached or closed., +  private void deallocate(boolean noNewStreams, boolean released, boolean streamFinished) {, +    RealConnection connectionToClose = null;, +    synchronized (connectionPool) {, +              connectionToClose = connection;, +    }, +    if (connectionToClose != null) {, +      Util.closeQuietly(connectionToClose.socket());, +    }, +      } else if (connection != null && !connection.isMultiplexed(), +          || e instanceof ConnectionShutdownException) {, +    deallocate(noNewStreams, false, true);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +      if (connection.allocations.size() < connection.allocationLimit, +          && address.equals(connection.route().address), +          && !connection.noNewStreams) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +  public void connect(int connectTimeout, int readTimeout, int writeTimeout,, +      List<ConnectionSpec> connectionSpecs, boolean connectionRetryEnabled) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +      RealConnection pooledConnection = Internal.instance.get(connectionPool, address, this);, +      if (pooledConnection != null) {, +        this.connection = pooledConnection;, +        return pooledConnection;, +      }, +    }, +    RealConnection newConnection = new RealConnection(connectionPool, selectedRoute);, +, +    synchronized (connectionPool) {, +      acquire(newConnection);, +      Internal.instance.put(connectionPool, newConnection);, +      this.connection = newConnection;, +    newConnection.connect(connectTimeout, readTimeout, writeTimeout, address.connectionSpecs(),, +        connectionRetryEnabled);, +    routeDatabase().connected(newConnection.route());, +    return newConnection;, +    deallocate(noNewStreams, false, true);, +    deallocate(false, true, false);]