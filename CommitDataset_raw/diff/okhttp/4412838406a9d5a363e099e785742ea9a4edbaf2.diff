[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +  @Test public void clonedInterceptorsListsAreIndependent() throws Exception {, +    OkHttpClient original = new OkHttpClient();, +    OkHttpClient clone = original.clone();, +    clone.interceptors().add(null);, +    clone.networkInterceptors().add(null);, +    assertEquals(0, original.interceptors().size());, +    assertEquals(0, original.networkInterceptors().size());, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +  @Test public void clonedInterceptorsListsAreIndependent() throws Exception {, +    OkHttpClient original = new OkHttpClient();, +    OkHttpClient clone = original.clone();, +    clone.interceptors().add(null);, +    clone.networkInterceptors().add(null);, +    assertEquals(0, original.interceptors().size());, +    assertEquals(0, original.networkInterceptors().size());, +  }, +, +++ b/okhttp-ws/src/main/java/com/squareup/okhttp/ws/WebSocketCall.java, +public final class WebSocketCall {, +  WebSocketCall(OkHttpClient client, Request request) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +  @Test public void clonedInterceptorsListsAreIndependent() throws Exception {, +    OkHttpClient original = new OkHttpClient();, +    OkHttpClient clone = original.clone();, +    clone.interceptors().add(null);, +    clone.networkInterceptors().add(null);, +    assertEquals(0, original.interceptors().size());, +    assertEquals(0, original.networkInterceptors().size());, +  }, +, +++ b/okhttp-ws/src/main/java/com/squareup/okhttp/ws/WebSocketCall.java, +public final class WebSocketCall {, +  WebSocketCall(OkHttpClient client, Request request) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java, +public final class Call {, +  Call(OkHttpClient client, Request originalRequest) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +  @Test public void clonedInterceptorsListsAreIndependent() throws Exception {, +    OkHttpClient original = new OkHttpClient();, +    OkHttpClient clone = original.clone();, +    clone.interceptors().add(null);, +    clone.networkInterceptors().add(null);, +    assertEquals(0, original.interceptors().size());, +    assertEquals(0, original.networkInterceptors().size());, +  }, +, +++ b/okhttp-ws/src/main/java/com/squareup/okhttp/ws/WebSocketCall.java, +public final class WebSocketCall {, +  WebSocketCall(OkHttpClient client, Request request) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java, +public final class Call {, +  Call(OkHttpClient client, Request originalRequest) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +public final class OkHttpClient implements Cloneable {, +  public void setConnectTimeout(long timeout, TimeUnit unit) {, +  public int getConnectTimeout() {, +  public void setReadTimeout(long timeout, TimeUnit unit) {, +  public int getReadTimeout() {, +  public void setWriteTimeout(long timeout, TimeUnit unit) {, +  public int getWriteTimeout() {, +  public OkHttpClient setProxy(Proxy proxy) {, +  public Proxy getProxy() {, +  public OkHttpClient setProxySelector(ProxySelector proxySelector) {, +  public ProxySelector getProxySelector() {, +  public OkHttpClient setCookieHandler(CookieHandler cookieHandler) {, +  public CookieHandler getCookieHandler() {, +  void setInternalCache(InternalCache internalCache) {, +  InternalCache internalCache() {, +  public OkHttpClient setCache(Cache cache) {, +  public Cache getCache() {, +  public OkHttpClient setSocketFactory(SocketFactory socketFactory) {, +  public SocketFactory getSocketFactory() {, +  public OkHttpClient setSslSocketFactory(SSLSocketFactory sslSocketFactory) {, +  public SSLSocketFactory getSslSocketFactory() {, +  public OkHttpClient setHostnameVerifier(HostnameVerifier hostnameVerifier) {, +  public HostnameVerifier getHostnameVerifier() {, +  public OkHttpClient setCertificatePinner(CertificatePinner certificatePinner) {, +  public CertificatePinner getCertificatePinner() {, +  public OkHttpClient setAuthenticator(Authenticator authenticator) {, +  public Authenticator getAuthenticator() {, +  public OkHttpClient setConnectionPool(ConnectionPool connectionPool) {, +  public ConnectionPool getConnectionPool() {, +  public OkHttpClient setFollowSslRedirects(boolean followProtocolRedirects) {, +  public boolean getFollowSslRedirects() {, +  public void setFollowRedirects(boolean followRedirects) {, +  public boolean getFollowRedirects() {, +  public void setRetryOnConnectionFailure(boolean retryOnConnectionFailure) {, +  public boolean getRetryOnConnectionFailure() {, +  RouteDatabase routeDatabase() {, +  public OkHttpClient setDispatcher(Dispatcher dispatcher) {, +  public Dispatcher getDispatcher() {, +  public OkHttpClient setProtocols(List<Protocol> protocols) {, +  public List<Protocol> getProtocols() {, +  public OkHttpClient setConnectionSpecs(List<ConnectionSpec> connectionSpecs) {, +  public List<ConnectionSpec> getConnectionSpecs() {, +  OkHttpClient copyWithDefaults() {, +  @Override public OkHttpClient clone() {]