[+++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/ByteArrayPoolTest.java, +import static org.junit.Assert.assertTrue;, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/ByteArrayPoolTest.java, +import static org.junit.Assert.assertTrue;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Route.java, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/ByteArrayPoolTest.java, +import static org.junit.Assert.assertTrue;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Route.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/RouteDatabase.java, +  public synchronized void failed(Route failedRoute) {, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/ByteArrayPoolTest.java, +import static org.junit.Assert.assertTrue;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Route.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/RouteDatabase.java, +  public synchronized void failed(Route failedRoute) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteSelector.java, +import javax.net.ssl.SSLHandshakeException;, +    routeDatabase.failed(failedRoute);, +, +    // If the previously returned route's problem was not related to TLS, and, +    // the next route only changes the TLS mode, we shouldn't even attempt it., +    // This suppresses it in both this selector and also in the route database., +    if (hasNextTlsMode() && !(failure instanceof SSLHandshakeException)) {, +      boolean modernTls = nextTlsMode() == TLS_MODE_MODERN;, +      Route routeToSuppress = new Route(address, lastProxy, lastInetSocketAddress, modernTls);, +      routeDatabase.failed(routeToSuppress);, +    }, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/ByteArrayPoolTest.java, +import static org.junit.Assert.assertTrue;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Route.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/RouteDatabase.java, +  public synchronized void failed(Route failedRoute) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteSelector.java, +import javax.net.ssl.SSLHandshakeException;, +    routeDatabase.failed(failedRoute);, +, +    // If the previously returned route's problem was not related to TLS, and, +    // the next route only changes the TLS mode, we shouldn't even attempt it., +    // This suppresses it in both this selector and also in the route database., +    if (hasNextTlsMode() && !(failure instanceof SSLHandshakeException)) {, +      boolean modernTls = nextTlsMode() == TLS_MODE_MODERN;, +      Route routeToSuppress = new Route(address, lastProxy, lastInetSocketAddress, modernTls);, +      routeDatabase.failed(routeToSuppress);, +    }, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/ByteArrayPoolTest.java, +import static org.junit.Assert.assertTrue;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Route.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/RouteDatabase.java, +  public synchronized void failed(Route failedRoute) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteSelector.java, +import javax.net.ssl.SSLHandshakeException;, +    routeDatabase.failed(failedRoute);, +, +    // If the previously returned route's problem was not related to TLS, and, +    // the next route only changes the TLS mode, we shouldn't even attempt it., +    // This suppresses it in both this selector and also in the route database., +    if (hasNextTlsMode() && !(failure instanceof SSLHandshakeException)) {, +      boolean modernTls = nextTlsMode() == TLS_MODE_MODERN;, +      Route routeToSuppress = new Route(address, lastProxy, lastInetSocketAddress, modernTls);, +      routeDatabase.failed(routeToSuppress);, +    }, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +    routeDatabase.failed(connection.getRoute());, +  // https://github.com/square/okhttp/issues/442, +    assertFalse(routeSelector.hasNext());, +    assertTrue(routeSelector.hasNext());, +    routeDatabase.failed(regularRoutes.get(0).getRoute());]