[+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +      return bootstrapDnsHosts(bootstrapDnsHosts.toList()), +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +      return bootstrapDnsHosts(bootstrapDnsHosts.toList()), +++ b/okhttp/build.gradle, +      'okhttp3.CertificatePinner#check(java.lang.String, java.util.List)',, +      'okhttp3.CertificatePinner#check(java.lang.String, java.security.cert.Certificate\\[\\])',, +      'okhttp3.CertificatePinner$Builder#add(java.lang.String, java.lang.String\\[\\])',, +      'okhttp3.CertificatePinner$Builder#build()',, +      'okhttp3.CertificatePinner$Pin#matches(java.lang.String)',, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +      return bootstrapDnsHosts(bootstrapDnsHosts.toList()), +++ b/okhttp/build.gradle, +      'okhttp3.CertificatePinner#check(java.lang.String, java.util.List)',, +      'okhttp3.CertificatePinner#check(java.lang.String, java.security.cert.Certificate\\[\\])',, +      'okhttp3.CertificatePinner$Builder#add(java.lang.String, java.lang.String\\[\\])',, +      'okhttp3.CertificatePinner$Builder#build()',, +      'okhttp3.CertificatePinner$Pin#matches(java.lang.String)',, +++ /dev/null, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +      return bootstrapDnsHosts(bootstrapDnsHosts.toList()), +++ b/okhttp/build.gradle, +      'okhttp3.CertificatePinner#check(java.lang.String, java.util.List)',, +      'okhttp3.CertificatePinner#check(java.lang.String, java.security.cert.Certificate\\[\\])',, +      'okhttp3.CertificatePinner$Builder#add(java.lang.String, java.lang.String\\[\\])',, +      'okhttp3.CertificatePinner$Builder#build()',, +      'okhttp3.CertificatePinner$Pin#matches(java.lang.String)',, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.kt, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3, +, +import okhttp3.internal.tls.CertificateChainCleaner, +import okio.ByteString, +import java.security.cert.Certificate, +import java.security.cert.X509Certificate, +import java.util.Objects, +import javax.net.ssl.SSLPeerUnverifiedException, +, +/**, + * Constrains which certificates are trusted. Pinning certificates defends against attacks on, + * certificate authorities. It also prevents connections through man-in-the-middle certificate, + * authorities either known or unknown to the application's user., + *, + * This class currently pins a certificate's Subject Public Key Info as described on [Adam Langley's, + * Weblog](http://goo.gl/AIx3e5). Pins are either base64 SHA-256 hashes as in [HTTP Public Key, + * Pinning (HPKP)](http://tools.ietf.org/html/rfc7469) or SHA-1 base64 hashes as in Chromium's, + * [static certificates](http://goo.gl/XDh6je)., + *, + * Setting up Certificate Pinning, + * ------------------------------, + *, + * The easiest way to pin a host is turn on pinning with a broken configuration and read the, + * expected configuration when the connection fails. Be sure to do this on a trusted network, and, + * without man-in-the-middle tools like [Charles](http://charlesproxy.com) or, + * [Fiddler](http://fiddlertool.com)., + *, + * For example, to pin `https://publicobject.com`, start with a broken configuration:, + *, + * ```, + * String hostname = "publicobject.com";, + * CertificatePinner certificatePinner = new CertificatePinner.Builder(), + *     .add(hostname, "sha256/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="), + *     .build();, + * OkHttpClient client = OkHttpClient.Builder(), + *     .certificatePinner(certificatePinner), + *     .build();, + *, + * Request request = new Request.Builder(), + *     .url("https://" + hostname), + *     .build();, + * client.newCall(request).execute();, + * ```, + *, + * As expected, this fails with a certificate pinning exception:, + *, + * ```, + * javax.net.ssl.SSLPeerUnverifiedException: Certificate pinning failure!, + * Peer certificate chain:, + *     sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=: CN=publicobject.com, OU=PositiveSSL, + *     sha256/klO23nT2ehFDXCfx3eHTDRESMz3asj1muO+4aIdjiuY=: CN=COMODO RSA Secure Server CA, + *     sha256/grX4Ta9HpZx6tSHkmCrvpApTQGo67CYDnvprLg5yRME=: CN=COMODO RSA Certification Authority, + *     sha256/lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=: CN=AddTrust External CA Root, + * Pinned certificates for publicobject.com:, + *     sha256/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=, + *   at okhttp3.CertificatePinner.check(CertificatePinner.java)]