[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import java.util.concurrent.TimeUnit;, +import okhttp3.mockwebserver.internal.tls.SslClient;, +  @Test public void pingsTransmitted() throws Exception {, +    // Ping every 500 ms, starting at 500 ms., +    client = client.newBuilder(), +        .pingInterval(500, TimeUnit.MILLISECONDS), +        .build();, +, +    // Delay the response to give 1 ping enough time to be sent and replied to., +    server.enqueue(new MockResponse(), +        .setBodyDelay(750, TimeUnit.MILLISECONDS), +        .setBody("ABC"));, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals("ABC", response.body().string());, +, +    assertEquals(Protocol.HTTP_2, response.protocol());, +, +    // Confirm a single ping was sent and received, and its reply was sent and received., +    List<String> logs = http2Handler.takeAll();, +    assertEquals(1, countFrames(logs, "FINE: >> 0x00000000     8 PING          "));, +    assertEquals(1, countFrames(logs, "FINE: << 0x00000000     8 PING          "));, +    assertEquals(1, countFrames(logs, "FINE: >> 0x00000000     8 PING          ACK"));, +    assertEquals(1, countFrames(logs, "FINE: << 0x00000000     8 PING          ACK"));, +  }, +, +    for (String log: logs) {, +      if (log.contains(type)) {, +        return log;, +  private int countFrames(List<String> logs, String message) {, +    int result = 0;, +    for (String log: logs) {, +      if (log.equals(message)) {, +        result++;, +      }, +    }, +    return result;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import java.util.concurrent.TimeUnit;, +import okhttp3.mockwebserver.internal.tls.SslClient;, +  @Test public void pingsTransmitted() throws Exception {, +    // Ping every 500 ms, starting at 500 ms., +    client = client.newBuilder(), +        .pingInterval(500, TimeUnit.MILLISECONDS), +        .build();, +, +    // Delay the response to give 1 ping enough time to be sent and replied to., +    server.enqueue(new MockResponse(), +        .setBodyDelay(750, TimeUnit.MILLISECONDS), +        .setBody("ABC"));, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals("ABC", response.body().string());, +, +    assertEquals(Protocol.HTTP_2, response.protocol());, +, +    // Confirm a single ping was sent and received, and its reply was sent and received., +    List<String> logs = http2Handler.takeAll();, +    assertEquals(1, countFrames(logs, "FINE: >> 0x00000000     8 PING          "));, +    assertEquals(1, countFrames(logs, "FINE: << 0x00000000     8 PING          "));, +    assertEquals(1, countFrames(logs, "FINE: >> 0x00000000     8 PING          ACK"));, +    assertEquals(1, countFrames(logs, "FINE: << 0x00000000     8 PING          ACK"));, +  }, +, +    for (String log: logs) {, +      if (log.contains(type)) {, +        return log;, +  private int countFrames(List<String> logs, String message) {, +    int result = 0;, +    for (String log: logs) {, +      if (log.equals(message)) {, +        result++;, +      }, +    }, +    return result;, +  }, +, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +     * Sets the interval between HTTP/2 and web socket pings initiated by this client. Use this to, +     * automatically send ping frames until either the connection fails or it is closed. This keeps, +     * the connection alive and may detect connectivity failures., +     * client will assume that connectivity has been lost. When this happens on a web socket the, +     * connection is canceled and its listener is {@linkplain WebSocketListener#onFailure notified, +     * of the failure}. When it happens on an HTTP/2 connection the connection is closed and any, +     * calls it is carrying {@linkplain java.io.IOException will fail with an IOException}., +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import java.util.concurrent.TimeUnit;, +import okhttp3.mockwebserver.internal.tls.SslClient;, +  @Test public void pingsTransmitted() throws Exception {, +    // Ping every 500 ms, starting at 500 ms., +    client = client.newBuilder()]