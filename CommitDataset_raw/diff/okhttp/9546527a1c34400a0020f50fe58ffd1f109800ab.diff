[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            String protocolString = Platform.get().getNpnSelectedProtocol(sslSocket);, +            protocol = protocolString != null, +                ? Protocol.get(protocolString), +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            String protocolString = Platform.get().getNpnSelectedProtocol(sslSocket);, +            protocol = protocolString != null, +                ? Protocol.get(protocolString), +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/StatusLineTest.java, +import com.squareup.okhttp.Protocol;, +    assertEquals(Protocol.HTTP_1_1, statusLine.protocol());, +    assertEquals(Protocol.HTTP_1_1, statusLine.protocol());, +    assertEquals(Protocol.HTTP_1_1, statusLine.protocol());, +    assertEquals(Protocol.HTTP_1_0, statusLine.protocol());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            String protocolString = Platform.get().getNpnSelectedProtocol(sslSocket);, +            protocol = protocolString != null, +                ? Protocol.get(protocolString), +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/StatusLineTest.java, +import com.squareup.okhttp.Protocol;, +    assertEquals(Protocol.HTTP_1_1, statusLine.protocol());, +    assertEquals(Protocol.HTTP_1_1, statusLine.protocol());, +    assertEquals(Protocol.HTTP_1_1, statusLine.protocol());, +    assertEquals(Protocol.HTTP_1_0, statusLine.protocol());, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +  private Protocol protocol = Protocol.HTTP_1_1;, +    String maybeProtocol;, +      protocol = Protocol.get(maybeProtocol); // Throws IOE on unknown., +    if (protocol == Protocol.SPDY_3 || protocol == Protocol.HTTP_2) {, +          .protocol(protocol).build();, +   * Returns the protocol negotiated by this connection, or {@link, +   * Protocol#HTTP_1_1} if no protocol has been negotiated., +  public Protocol getProtocol() {, +    return protocol;, +  /**, +   * Sets the protocol negotiated by this connection. Typically this is used, +   * when an HTTP/1.1 request is sent and an HTTP/1.0 response is received., +   */, +  public void setProtocol(Protocol protocol) {, +    if (protocol == null) throw new IllegalArgumentException("protocol == null");, +    this.protocol = protocol;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            String protocolString = Platform.get().getNpnSelectedProtocol(sslSocket);, +            protocol = protocolString != null, +                ? Protocol.get(protocolString), +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/StatusLineTest.java, +import com.squareup.okhttp.Protocol;, +    assertEquals(Protocol.HTTP_1_1, statusLine.protocol());, +    assertEquals(Protocol.HTTP_1_1, statusLine.protocol());, +    assertEquals(Protocol.HTTP_1_1, statusLine.protocol());, +    assertEquals(Protocol.HTTP_1_0, statusLine.protocol());, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +  private Protocol protocol = Protocol.HTTP_1_1;, +    String maybeProtocol;, +      protocol = Protocol.get(maybeProtocol); // Throws IOE on unknown., +    if (protocol == Protocol.SPDY_3 || protocol == Protocol.HTTP_2) {, +          .protocol(protocol).build();, +   * Returns the protocol negotiated by this connection, or {@link, +   * Protocol#HTTP_1_1} if no protocol has been negotiated., +  public Protocol getProtocol() {, +    return protocol;, +  /**, +   * Sets the protocol negotiated by this connection. Typically this is used, +   * when an HTTP/1.1 request is sent and an HTTP/1.0 response is received., +   */, +  public void setProtocol(Protocol protocol) {, +    if (protocol == null) throw new IllegalArgumentException("protocol == null");, +    this.protocol = protocol;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Response.java, +  public Protocol protocol() {, +    return statusLine.protocol();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            String protocolString = Platform.get().getNpnSelectedProtocol(sslSocket);, +            protocol = protocolString != null, +                ? Protocol.get(protocolString), +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/StatusLineTest.java, +import com.squareup.okhttp.Protocol;, +    assertEquals(Protocol.HTTP_1_1, statusLine.protocol());, +    assertEquals(Protocol.HTTP_1_1, statusLine.protocol());, +    assertEquals(Protocol.HTTP_1_1, statusLine.protocol());, +    assertEquals(Protocol.HTTP_1_0, statusLine.protocol());, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +  private Protocol protocol = Protocol.HTTP_1_1;, +    String maybeProtocol;, +      protocol = Protocol.get(maybeProtocol); // Throws IOE on unknown., +    if (protocol == Protocol.SPDY_3 || protocol == Protocol.HTTP_2) {, +          .protocol(protocol).build();, +   * Returns the protocol negotiated by this connection, or {@link, +   * Protocol#HTTP_1_1} if no protocol has been negotiated., +  public Protocol getProtocol() {, +    return protocol;, +  /**, +   * Sets the protocol negotiated by this connection. Typically this is used, +   * when an HTTP/1.1 request is sent and an HTTP/1.0 response is received., +   */, +  public void setProtocol(Protocol protocol) {, +    if (protocol == null) throw new IllegalArgumentException("protocol == null");, +    this.protocol = protocol;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Response.java, +  public Protocol protocol() {]