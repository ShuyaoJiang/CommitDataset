[+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // 1. seed the cache (potentially), +    // 2. expect a cache hit or miss, +    // 1. seed the cache, +    // 2. invalidate it, +    // 3. expect a cache miss, +    // 1. seed the cache, +    // 2. invalidate it with uncacheable response, +    // 3. expect a cache miss, +    // 1. request a range, +    // 2. request a full document, expecting a cache miss, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // 1. seed the cache (potentially), +    // 2. expect a cache hit or miss, +    // 1. seed the cache, +    // 2. invalidate it, +    // 3. expect a cache miss, +    // 1. seed the cache, +    // 2. invalidate it with uncacheable response, +    // 3. expect a cache miss, +    // 1. request a range, +    // 2. request a full document, expecting a cache miss, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +    server.listener.assertFailure(EOFException.class);, +    client.listener.assertFailure(EOFException.class);, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // 1. seed the cache (potentially), +    // 2. expect a cache hit or miss, +    // 1. seed the cache, +    // 2. invalidate it, +    // 3. expect a cache miss, +    // 1. seed the cache, +    // 2. invalidate it with uncacheable response, +    // 3. expect a cache miss, +    // 1. request a range, +    // 2. request a full document, expecting a cache miss, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +    server.listener.assertFailure(EOFException.class);, +    client.listener.assertFailure(EOFException.class);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +import java.io.EOFException;, +    serverListener.assertFailure(EOFException.class);, +    clientListener.assertFailure(SocketTimeoutException.class, "timeout", "Read timed out");, +    clientListener.assertFailure(SocketTimeoutException.class, "timeout", "Read timed out");, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // 1. seed the cache (potentially), +    // 2. expect a cache hit or miss, +    // 1. seed the cache, +    // 2. invalidate it, +    // 3. expect a cache miss, +    // 1. seed the cache, +    // 2. invalidate it with uncacheable response, +    // 3. expect a cache miss, +    // 1. request a range, +    // 2. request a full document, expecting a cache miss, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +    server.listener.assertFailure(EOFException.class);, +    client.listener.assertFailure(EOFException.class);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +import java.io.EOFException;, +    serverListener.assertFailure(EOFException.class);, +    clientListener.assertFailure(SocketTimeoutException.class, "timeout", "Read timed out");, +    clientListener.assertFailure(SocketTimeoutException.class, "timeout", "Read timed out");, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketRecorder.java, +import java.util.Arrays;, +  public void assertFailure(Class<? extends IOException> cls, String... messages) {, +    if (messages.length > 0) {, +      assertTrue(failure.t.getMessage(), Arrays.asList(messages).contains(failure.t.getMessage()));, +    }, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // 1. seed the cache (potentially), +    // 2. expect a cache hit or miss, +    // 1. seed the cache, +    // 2. invalidate it, +    // 3. expect a cache miss, +    // 1. seed the cache, +    // 2. invalidate it with uncacheable response, +    // 3. expect a cache miss, +    // 1. request a range, +    // 2. request a full document, expecting a cache miss, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +    server.listener.assertFailure(EOFException.class);, +    client.listener.assertFailure(EOFException.class);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +import java.io.EOFException;, +    serverListener.assertFailure(EOFException.class);, +    clientListener.assertFailure(SocketTimeoutException.class, "timeout", "Read timed out");, +    clientListener.assertFailure(SocketTimeoutException.class, "timeout", "Read timed out");, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketRecorder.java, +import java.util.Arrays;, +  public void assertFailure(Class<? extends IOException> cls, String... messages) {, +    if (messages.length > 0) {, +      assertTrue(failure.t.getMessage(), Arrays.asList(messages).contains(failure.t.getMessage()));, +    }, +++ b/okhttp/src/main/java/okhttp3/CookieJar.java, + * accept and which to reject. A reasonable policy is to reject all cookies, though that may be, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // 1. seed the cache (potentially), +    // 2. expect a cache hit or miss, +    // 1. seed the cache]