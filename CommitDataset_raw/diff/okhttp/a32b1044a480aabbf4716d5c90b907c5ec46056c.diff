[+++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +import java.net.SocketTimeoutException;, +  @Test public void chainWithReadTimeout() throws Exception {, +    Interceptor interceptor1 = new Interceptor() {, +      @Override public Response intercept(Chain chainA) throws IOException {, +        assertEquals(5000, chainA.readTimeoutMillis());, +, +        Chain chainB = chainA.withReadTimeout(100, TimeUnit.MILLISECONDS);, +        assertEquals(100, chainB.readTimeoutMillis());, +, +        return chainB.proceed(chainA.request());, +      }, +    };, +, +    Interceptor interceptor2 = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        assertEquals(100, chain.readTimeoutMillis());, +        return chain.proceed(chain.request());, +      }, +    };, +, +    client = client.newBuilder(), +        .readTimeout(5, TimeUnit.SECONDS), +        .addInterceptor(interceptor1), +        .addInterceptor(interceptor2), +        .build();, +, +    server.enqueue(new MockResponse(), +        .setBody("abc"), +        .throttleBody(1, 1, TimeUnit.SECONDS));, +, +    Request request1 = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Call call = client.newCall(request1);, +    Response response = call.execute();, +    ResponseBody body = response.body();, +    try {, +      body.string();, +      fail();, +    } catch (SocketTimeoutException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +import java.net.SocketTimeoutException;, +  @Test public void chainWithReadTimeout() throws Exception {, +    Interceptor interceptor1 = new Interceptor() {, +      @Override public Response intercept(Chain chainA) throws IOException {, +        assertEquals(5000, chainA.readTimeoutMillis());, +, +        Chain chainB = chainA.withReadTimeout(100, TimeUnit.MILLISECONDS);, +        assertEquals(100, chainB.readTimeoutMillis());, +, +        return chainB.proceed(chainA.request());, +      }, +    };, +, +    Interceptor interceptor2 = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        assertEquals(100, chain.readTimeoutMillis());, +        return chain.proceed(chain.request());, +      }, +    };, +, +    client = client.newBuilder(), +        .readTimeout(5, TimeUnit.SECONDS), +        .addInterceptor(interceptor1), +        .addInterceptor(interceptor2), +        .build();, +, +    server.enqueue(new MockResponse(), +        .setBody("abc"), +        .throttleBody(1, 1, TimeUnit.SECONDS));, +, +    Request request1 = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Call call = client.newCall(request1);, +    Response response = call.execute();, +    ResponseBody body = response.body();, +    try {, +      body.string();, +      fail();, +    } catch (SocketTimeoutException expected) {, +    }, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Interceptor.java, +import java.util.concurrent.TimeUnit;, +, +    int readTimeoutMillis();, +, +    Chain withReadTimeout(int timeout, TimeUnit unit);, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +import java.net.SocketTimeoutException;, +  @Test public void chainWithReadTimeout() throws Exception {, +    Interceptor interceptor1 = new Interceptor() {, +      @Override public Response intercept(Chain chainA) throws IOException {, +        assertEquals(5000, chainA.readTimeoutMillis());]