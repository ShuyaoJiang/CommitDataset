[+++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +import okhttp3.internal.tls.CertificateAuthorityCouncil;, +  private final CertificateAuthorityCouncil certificateAuthorityCouncil;, +    this.hostnameToPins = Util.immutableMap(builder.hostnameToPins);, +    this.certificateAuthorityCouncil = builder.certificateAuthorityCouncil;, +    if (certificateAuthorityCouncil != null) {, +      peerCertificates = certificateAuthorityCouncil.normalizeCertificateChain(peerCertificates);, +    }, +  Builder newBuilder() {, +    return new Builder(this);, +  }, +, +    private CertificateAuthorityCouncil certificateAuthorityCouncil;, +, +    public Builder() {, +    }, +, +    Builder(CertificatePinner certificatePinner) {, +      this.hostnameToPins.putAll(certificatePinner.hostnameToPins);, +      this.certificateAuthorityCouncil = certificatePinner.certificateAuthorityCouncil;, +    }, +, +    Builder certificateAuthorityCouncil(CertificateAuthorityCouncil certificateAuthorityCouncil) {, +      this.certificateAuthorityCouncil = certificateAuthorityCouncil;, +      return this;, +    }, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +import okhttp3.internal.tls.CertificateAuthorityCouncil;, +  private final CertificateAuthorityCouncil certificateAuthorityCouncil;, +    this.hostnameToPins = Util.immutableMap(builder.hostnameToPins);, +    this.certificateAuthorityCouncil = builder.certificateAuthorityCouncil;, +    if (certificateAuthorityCouncil != null) {, +      peerCertificates = certificateAuthorityCouncil.normalizeCertificateChain(peerCertificates);, +    }, +  Builder newBuilder() {, +    return new Builder(this);, +  }, +, +    private CertificateAuthorityCouncil certificateAuthorityCouncil;, +, +    public Builder() {, +    }, +, +    Builder(CertificatePinner certificatePinner) {, +      this.hostnameToPins.putAll(certificatePinner.hostnameToPins);, +      this.certificateAuthorityCouncil = certificatePinner.certificateAuthorityCouncil;, +    }, +, +    Builder certificateAuthorityCouncil(CertificateAuthorityCouncil certificateAuthorityCouncil) {, +      this.certificateAuthorityCouncil = certificateAuthorityCouncil;, +      return this;, +    }, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.tls.CertificateAuthorityCouncil;, +  final CertificateAuthorityCouncil certificateAuthorityCouncil;, +    if (sslSocketFactory != null && builder.certificateAuthorityCouncil == null) {, +      X509TrustManager trustManager = Platform.get().trustManager(sslSocketFactory);, +      this.certificateAuthorityCouncil, +          = new CertificateAuthorityCouncil(trustManager.getAcceptedIssuers());, +      this.certificatePinner = builder.certificatePinner.newBuilder(), +          .certificateAuthorityCouncil(certificateAuthorityCouncil), +          .build();, +      this.certificateAuthorityCouncil = builder.certificateAuthorityCouncil;, +    }, +    this.hostnameVerifier = builder.hostnameVerifier;, +    CertificateAuthorityCouncil certificateAuthorityCouncil;, +      this.certificateAuthorityCouncil = okHttpClient.certificateAuthorityCouncil;, +      this.certificateAuthorityCouncil = null;]