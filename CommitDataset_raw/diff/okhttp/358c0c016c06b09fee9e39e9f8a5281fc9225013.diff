[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/JavaApiConverterTest.java, +  // Older versions of OkHttp would store the "request line" as a header with a, +  // null key. To support the Android usecase where an old version of OkHttp uses, +  // a newer, Android-bundled, version of HttpResponseCache the null key must be, +  // explicitly ignored., +  @Test public void createOkRequest_nullRequestHeaderKey() throws Exception {, +    URI uri = new URI("https://foo/bar");, +, +    Map<String,List<String>> javaRequestHeaders = new HashMap<String, List<String>>();, +    javaRequestHeaders.put(null, Arrays.asList("GET / HTTP 1.1"));, +    javaRequestHeaders.put("Foo", Arrays.asList("Bar"));, +    Request request = JavaApiConverter.createOkRequest(uri, "POST", javaRequestHeaders);, +    assertTrue(request.isHttps());, +    assertEquals(uri, request.uri());, +    assertNull(request.body());, +    Headers okRequestHeaders = request.headers();, +    assertEquals(1, okRequestHeaders.size());, +    assertEquals("Bar", okRequestHeaders.get("Foo"));, +    assertEquals("POST", request.method());, +  }, +, +  @Test public void extractOkHeaders() {, +    Headers okHeaders = JavaApiConverter.extractOkHeaders(javaResponseHeaders);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/JavaApiConverterTest.java, +  // Older versions of OkHttp would store the "request line" as a header with a, +  // null key. To support the Android usecase where an old version of OkHttp uses, +  // a newer, Android-bundled, version of HttpResponseCache the null key must be, +  // explicitly ignored., +  @Test public void createOkRequest_nullRequestHeaderKey() throws Exception {, +    URI uri = new URI("https://foo/bar");, +, +    Map<String,List<String>> javaRequestHeaders = new HashMap<String, List<String>>();, +    javaRequestHeaders.put(null, Arrays.asList("GET / HTTP 1.1"));, +    javaRequestHeaders.put("Foo", Arrays.asList("Bar"));, +    Request request = JavaApiConverter.createOkRequest(uri, "POST", javaRequestHeaders);, +    assertTrue(request.isHttps());, +    assertEquals(uri, request.uri());, +    assertNull(request.body());, +    Headers okRequestHeaders = request.headers();, +    assertEquals(1, okRequestHeaders.size());, +    assertEquals("Bar", okRequestHeaders.get("Foo"));, +    assertEquals("POST", request.method());, +  }, +, +  @Test public void extractOkHeaders() {, +    Headers okHeaders = JavaApiConverter.extractOkHeaders(javaResponseHeaders);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/JavaApiConverter.java, +      Headers headers = extractOkHeaders(requestHeaders);, +    return extractOkHeaders(javaResponseHeaders);, +    return extractOkHeaders(javaResponseHeaders);, +   * extracted. Any entry (one with a {@code null} key) is discarded., +  static Headers extractOkHeaders(Map<String, List<String>> javaHeaders) {, +    for (Map.Entry<String, List<String>> javaHeader : javaHeaders.entrySet()) {, +      String name = javaHeader.getKey();, +        // The Java API uses the null key to store the status line in responses., +        // Earlier versions of OkHttp would use the null key to store the "request line" in, +        // requests. e.g. "GET / HTTP 1.1". Although this is no longer the case it must be, +        // explicitly ignored because Headers.Builder does not support null keys., +      for (String value : javaHeader.getValue()) {]