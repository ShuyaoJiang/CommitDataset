[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +/**, + * Android's HttpResponseCacheTest. This tests both the {@link HttpResponseCache} implementation and, + * the behavior of {@link com.squareup.okhttp.OkResponseCache} classes generally., + */, +      fail("Expected an IllegalStateException because the stream is closed.");, +    client.setOkResponseCache(cache);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +/**, + * Android's HttpResponseCacheTest. This tests both the {@link HttpResponseCache} implementation and, + * the behavior of {@link com.squareup.okhttp.OkResponseCache} classes generally., + */, +      fail("Expected an IllegalStateException because the stream is closed.");, +    client.setOkResponseCache(cache);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ResponseCacheAdapterTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.http;, +, +import com.squareup.okhttp.OkHttpClient;, +import com.squareup.okhttp.internal.SslContextBuilder;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.MockWebServer;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +, +import java.io.IOException;, +import java.net.CacheRequest;, +import java.net.CacheResponse;, +import java.net.HttpURLConnection;, +import java.net.ResponseCache;, +import java.net.URI;, +import java.net.URISyntaxException;, +import java.net.URL;, +import java.net.URLConnection;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.HttpsURLConnection;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLSession;, +, +import static org.junit.Assert.assertArrayEquals;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +/**, + * A white-box test for {@link ResponseCacheAdapter}. See also {@link ResponseCacheTest} for, + * black-box tests that check that {@link ResponseCache} classes are called correctly by OkHttp., + */, +public class ResponseCacheAdapterTest {, +, +  private static final SSLContext sslContext = SslContextBuilder.localhost();, +  private static final HostnameVerifier NULL_HOSTNAME_VERIFIER = new HostnameVerifier() {, +    public boolean verify(String hostname, SSLSession session) {, +      return true;, +    }, +  };, +, +  private MockWebServer server;, +, +  private OkHttpClient client;, +, +  private HttpURLConnection connection;, +, +  @Before, +  public void setUp() throws Exception {, +    server = new MockWebServer();, +    client = new OkHttpClient();, +  }, +, +  @After, +  public void tearDown() throws Exception {, +    if (connection != null) {, +      connection.disconnect();]