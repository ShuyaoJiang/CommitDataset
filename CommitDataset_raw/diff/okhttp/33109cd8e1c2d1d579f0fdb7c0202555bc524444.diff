[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import okhttp3.internal.tls.SslClient;, +import okhttp3.mockwebserver.SocketPolicy;, +import static org.junit.Assert.assertNotNull;, +  private final SslClient sslClient = SslClient.localhost();, +  @Test public void successfulCallEventSequence() throws IOException {, +    server.enqueue(new MockResponse());, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    response.body().close();, +, +    List<Class<?>> expectedEvents = Arrays.asList(DnsStart.class, DnsEnd.class);, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +  @Test public void successfulHttpsCallEventSequence() throws IOException {, +    enableTls(false);, +    server.enqueue(new MockResponse());, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    response.body().close();, +, +    List<Class<?>> expectedEvents = Arrays.asList(, +        DnsStart.class, DnsEnd.class,, +        SecureConnectStart.class, SecureConnectEnd.class);, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +    DnsStart dnsStart = listener.findNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.findNextEvent(DnsEnd.class);, +    listener.findNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.findNextEvent(DnsEnd.class);, +    listener.findNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.findNextEvent(DnsEnd.class);, +  @Test public void successfulSecureConnect() throws IOException {, +    enableTls(false);, +    server.enqueue(new MockResponse());, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    response.body().close();, +, +    SecureConnectStart secureStart = listener.findNextEvent(SecureConnectStart.class);, +    assertSame(call, secureStart.call);, +, +    SecureConnectEnd secureEnd = listener.findNextEvent(SecureConnectEnd.class);, +    assertSame(call, secureEnd.call);, +    assertNotNull(secureEnd.handshake);, +    assertNull(secureEnd.throwable);, +  }, +, +  @Test public void failedSecureConnect() {, +    enableTls(false);, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.FAIL_HANDSHAKE));, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    try {, +      call.execute();, +      fail();, +    } catch (IOException expected) {, +    }, +, +    SecureConnectStart secureStart = listener.findNextEvent(SecureConnectStart.class);, +    assertSame(call, secureStart.call);, +, +    SecureConnectEnd secureEnd = listener.findNextEvent(SecureConnectEnd.class);, +    assertSame(call, secureEnd.call);, +    assertNull(secureEnd.handshake);, +    assertTrue(secureEnd.throwable instanceof IOException);, +  }, +, +  @Test public void secureConnectWithTunnel() throws IOException {, +    enableTls(true);, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END));, +    server.enqueue(new MockResponse());, +, +    client = client.newBuilder(), +        .proxy(server.toProxyAddress()), +        .build();, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());]