[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void cancelImmediatelyAfterEnqueue() throws Exception {, +    call.cancel();, +  @Test public void cancelAll() throws Exception {, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    call.enqueue(callback);, +    client.dispatcher().cancelAll();, +    callback.await(server.url("/")).assertFailure("Canceled");, +  }, +, +    Request request = new Request.Builder().url(server.url("/a")).build();, +    final Call call = client.newCall(request);, +, +        call.cancel();, +      call.execute();, +, +    Request requestA = new Request.Builder().url(server.url("/a")).build();, +    Request requestB = new Request.Builder().url(server.url("/b")).build();, +    final Call callA = client.newCall(requestA);, +    final Call callB = client.newCall(requestB);, +, +        callB.cancel();, +    callA.enqueue(callback);, +    callB.enqueue(callback);, +    Request requestA = new Request.Builder().url(server.url("/a")).build();, +    Request request = new Request.Builder().url(server.url("/a")).build();, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void cancelImmediatelyAfterEnqueue() throws Exception {, +    call.cancel();, +  @Test public void cancelAll() throws Exception {, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    call.enqueue(callback);, +    client.dispatcher().cancelAll();, +    callback.await(server.url("/")).assertFailure("Canceled");, +  }, +, +    Request request = new Request.Builder().url(server.url("/a")).build();, +    final Call call = client.newCall(request);, +, +        call.cancel();, +      call.execute();, +, +    Request requestA = new Request.Builder().url(server.url("/a")).build();, +    Request requestB = new Request.Builder().url(server.url("/b")).build();, +    final Call callA = client.newCall(requestA);, +    final Call callB = client.newCall(requestB);, +, +        callB.cancel();, +    callA.enqueue(callback);, +    callB.enqueue(callback);, +    Request requestA = new Request.Builder().url(server.url("/a")).build();, +    Request request = new Request.Builder().url(server.url("/a")).build();, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +import java.io.IOException;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.Set;, +import java.util.concurrent.CountDownLatch;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +    Call c1 = client.newCall(newRequest("http://a/1", "tag1"));, +    Call c2 = client.newCall(newRequest("http://a/2"));, +    c1.enqueue(callback);, +    c2.enqueue(callback);, +    c1.cancel();, +  @Test public void asyncCallAccessors() throws Exception {, +    dispatcher.setMaxRequests(3);, +    Call a1 = client.newCall(newRequest("http://a/1"));, +    Call a2 = client.newCall(newRequest("http://a/2"));, +    Call a3 = client.newCall(newRequest("http://a/3"));, +    Call a4 = client.newCall(newRequest("http://a/4"));, +    Call a5 = client.newCall(newRequest("http://a/5"));, +    a1.enqueue(callback);, +    a2.enqueue(callback);, +    a3.enqueue(callback);, +    a4.enqueue(callback);, +    a5.enqueue(callback);, +    assertEquals(3, dispatcher.runningCallsCount());, +    assertEquals(2, dispatcher.queuedCallsCount());, +    assertEquals(set(a1, a2, a3), set(dispatcher.runningCalls()));, +    assertEquals(set(a4, a5), set(dispatcher.queuedCalls()));, +  }, +, +  @Test public void synchronousCallAccessors() throws Exception {, +    final CountDownLatch ready = new CountDownLatch(2);, +    final CountDownLatch waiting = new CountDownLatch(1);, +    client = client.newBuilder(), +        .addInterceptor(, +            new Interceptor() {, +              @Override public Response intercept(Chain chain) throws IOException {, +                try {, +                  ready.countDown();, +                  waiting.await();, +                } catch (InterruptedException e) {, +                  throw new AssertionError();, +                }]