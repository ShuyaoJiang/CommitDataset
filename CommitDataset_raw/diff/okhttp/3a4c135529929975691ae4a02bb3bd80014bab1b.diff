[+++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/CacheAdapter.java, +import com.squareup.okhttp.internal.http.CacheRequest;, +import java.io.OutputStream;, +import okio.Okio;, +import okio.Sink;, +    final java.net.CacheRequest request = delegate.put(uri, connection);, +    if (request == null) {, +      return null;, +    }, +    return new CacheRequest() {, +      @Override public Sink body() throws IOException {, +        OutputStream body = request.getBody();, +        return body != null ? Okio.sink(body) : null;, +      }, +, +      @Override public void abort() {, +        request.abort();, +      }, +    };, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/CacheAdapter.java, +import com.squareup.okhttp.internal.http.CacheRequest;, +import java.io.OutputStream;, +import okio.Okio;, +import okio.Sink;, +    final java.net.CacheRequest request = delegate.put(uri, connection);, +    if (request == null) {, +      return null;, +    }, +    return new CacheRequest() {, +      @Override public Sink body() throws IOException {, +        OutputStream body = request.getBody();, +        return body != null ? Okio.sink(body) : null;, +      }, +, +      @Override public void abort() {, +        request.abort();, +      }, +    };, +++ b/okhttp/src/main/java/com/squareup/okhttp/Cache.java, +import com.squareup.okhttp.internal.http.CacheRequest;, +import okio.BufferedSink;, +import okio.ForwardingSink;, +import okio.Sink;, +  private static String urlToKey(Request request) {, +    return Util.hash(request.urlString());, +      entry = new Entry(snapshot.getSource(ENTRY_METADATA));, +  private final class CacheRequestImpl implements CacheRequest {, +    private Sink cacheOut;, +    private Sink body;, +      this.cacheOut = editor.newSink(ENTRY_BODY);, +      this.body = new ForwardingSink(cacheOut) {, +    @Override public Sink body() {, +    public Entry(Source in) throws IOException {, +        BufferedSource source = Okio.buffer(in);, +      BufferedSink sink = Okio.buffer(editor.newSink(ENTRY_METADATA));, +      sink.writeUtf8(url);, +      sink.writeByte('\n');, +      sink.writeUtf8(requestMethod);, +      sink.writeByte('\n');, +      sink.writeUtf8(Integer.toString(varyHeaders.size()));, +      sink.writeByte('\n');, +        sink.writeUtf8(varyHeaders.name(i));, +        sink.writeUtf8(": ");, +        sink.writeUtf8(varyHeaders.value(i));, +        sink.writeByte('\n');, +      sink.writeUtf8(new StatusLine(protocol, code, message).toString());, +      sink.writeByte('\n');, +      sink.writeUtf8(Integer.toString(responseHeaders.size()));, +      sink.writeByte('\n');, +        sink.writeUtf8(responseHeaders.name(i));, +        sink.writeUtf8(": ");, +        sink.writeUtf8(responseHeaders.value(i));, +        sink.writeByte('\n');, +        sink.writeByte('\n');, +        sink.writeUtf8(handshake.cipherSuite());, +        sink.writeByte('\n');, +        writeCertArray(sink, handshake.peerCertificates());, +        writeCertArray(sink, handshake.localCertificates());, +      sink.close();, +    private void writeCertArray(BufferedSink sink, List<Certificate> certificates), +        throws IOException {, +        sink.writeUtf8(Integer.toString(certificates.size()));, +        sink.writeByte('\n');, +          sink.writeUtf8(line);, +          sink.writeByte('\n');, +      Source source = snapshot.getSource(ENTRY_BODY);, +      bodySource = Okio.buffer(new ForwardingSource(source) {, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/CacheAdapter.java, +import com.squareup.okhttp.internal.http.CacheRequest;, +import java.io.OutputStream;, +import okio.Okio;, +import okio.Sink;, +    final java.net.CacheRequest request = delegate.put(uri, connection);, +    if (request == null) {, +      return null;, +    }, +    return new CacheRequest() {, +      @Override public Sink body() throws IOException {, +        OutputStream body = request.getBody();, +        return body != null ? Okio.sink(body) : null;]