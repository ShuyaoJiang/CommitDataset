[+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverHttp2Test.java, +import okhttp3.Call;, +import okhttp3.Request;, +import okhttp3.Response;, +    server.enqueue(new MockResponse(), +        .withPush(pushPromise));, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/foo")), +        .build());, +    Response response = call.execute();, +, +    assertEquals("ABCDE", response.body().string());, +    assertEquals(200, response.code());, +    assertEquals("Sweet", response.message());, +    server.enqueue(new MockResponse(), +        .withPush(pushPromise));, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/foo")), +        .build());, +    Response response = call.execute();, +    assertEquals("ABCDE", response.body().string());, +    assertEquals(200, response.code());, +    assertEquals("Sweet", response.message());, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals("", response.body().string());, +    server.enqueue(new MockResponse(), +        .setBody("ABC"));, +    server.enqueue(new MockResponse(), +        .setBody("DEF"));, +    server.enqueue(new MockResponse(), +        .setBody("GHI"));, +, +    Call call1 = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response1 = call1.execute();, +, +    Call call2 = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response2 = call2.execute();, +, +    Call call3 = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response3 = call3.execute();, +, +    assertEquals("ABC", response1.body().string());, +    assertEquals("DEF", response2.body().string());, +    assertEquals("GHI", response3.body().string());, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverHttp2Test.java, +import okhttp3.Call;, +import okhttp3.Request;, +import okhttp3.Response;, +    server.enqueue(new MockResponse(), +        .withPush(pushPromise));, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/foo")), +        .build());, +    Response response = call.execute();, +, +    assertEquals("ABCDE", response.body().string());, +    assertEquals(200, response.code());, +    assertEquals("Sweet", response.message());, +    server.enqueue(new MockResponse(), +        .withPush(pushPromise));, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/foo")), +        .build());, +    Response response = call.execute();, +    assertEquals("ABCDE", response.body().string());, +    assertEquals(200, response.code());, +    assertEquals("Sweet", response.message());, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals("", response.body().string());, +    server.enqueue(new MockResponse(), +        .setBody("ABC"));, +    server.enqueue(new MockResponse(), +        .setBody("DEF"));, +    server.enqueue(new MockResponse(), +        .setBody("GHI"));, +, +    Call call1 = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response1 = call1.execute();, +, +    Call call2 = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response2 = call2.execute();]