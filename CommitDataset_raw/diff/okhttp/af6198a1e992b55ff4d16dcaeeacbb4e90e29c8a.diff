[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.STALL_SOCKET_AT_START;, +        SocketPolicy socketPolicy = dispatcher.peek().getSocketPolicy();, +        if (socketPolicy == STALL_SOCKET_AT_START) {, +          return; // Ignore the socket until the server is shut down!, +        }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.STALL_SOCKET_AT_START;, +        SocketPolicy socketPolicy = dispatcher.peek().getSocketPolicy();, +        if (socketPolicy == STALL_SOCKET_AT_START) {, +          return; // Ignore the socket until the server is shut down!, +        }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * After accepting the connection and doing TLS (if configured) don't do HTTP/1.1 or HTTP/2, +   * framing. Ignore the socket completely until the server is shut down., +   */, +  STALL_SOCKET_AT_START,, +, +  /**, +   * Read the request but don't respond to it. Just keep the socket open. For testing read response, +   * header timeout issue., +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.STALL_SOCKET_AT_START;, +        SocketPolicy socketPolicy = dispatcher.peek().getSocketPolicy();, +        if (socketPolicy == STALL_SOCKET_AT_START) {, +          return; // Ignore the socket until the server is shut down!, +        }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * After accepting the connection and doing TLS (if configured) don't do HTTP/1.1 or HTTP/2, +   * framing. Ignore the socket completely until the server is shut down., +   */, +  STALL_SOCKET_AT_START,, +, +  /**, +   * Read the request but don't respond to it. Just keep the socket open. For testing read response, +   * header timeout issue., +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.STALL_SOCKET_AT_START));, +    server2.enqueue(new MockResponse(), +        .setBody("success!"));, +    proxySelector.proxies.add(server2.toProxyAddress());, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.STALL_SOCKET_AT_START));, +        .url(server.url("/").newBuilder().scheme(scheme).build()), +    client = client.newBuilder(), +        .readTimeout(1, TimeUnit.SECONDS), +        .build();, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.STALL_SOCKET_AT_START;, +        SocketPolicy socketPolicy = dispatcher.peek().getSocketPolicy();, +        if (socketPolicy == STALL_SOCKET_AT_START) {, +          return; // Ignore the socket until the server is shut down!, +        }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * After accepting the connection and doing TLS (if configured) don't do HTTP/1.1 or HTTP/2, +   * framing. Ignore the socket completely until the server is shut down., +   */, +  STALL_SOCKET_AT_START,, +, +  /**, +   * Read the request but don't respond to it. Just keep the socket open. For testing read response, +   * header timeout issue., +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.STALL_SOCKET_AT_START));, +    server2.enqueue(new MockResponse(), +        .setBody("success!"));, +    proxySelector.proxies.add(server2.toProxyAddress());, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.STALL_SOCKET_AT_START));, +        .url(server.url("/").newBuilder().scheme(scheme).build()), +    client = client.newBuilder(), +        .readTimeout(1, TimeUnit.SECONDS), +        .build();, +, +++ /dev/null, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.STALL_SOCKET_AT_START;, +        SocketPolicy socketPolicy = dispatcher.peek().getSocketPolicy();, +        if (socketPolicy == STALL_SOCKET_AT_START) {, +          return; // Ignore the socket until the server is shut down!, +        }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +   * After accepting the connection and doing TLS (if configured) don't do HTTP/1.1 or HTTP/2, +   * framing. Ignore the socket completely until the server is shut down., +   */, +  STALL_SOCKET_AT_START,, +, +  /**, +   * Read the request but don't respond to it. Just keep the socket open. For testing read response, +   * header timeout issue., +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    server.enqueue(new MockResponse()]