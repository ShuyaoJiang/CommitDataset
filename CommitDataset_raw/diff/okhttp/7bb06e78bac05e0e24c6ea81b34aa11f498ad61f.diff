[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +    assertNotNull(a.routeDatabase());, +    assertSame(a.routeDatabase(), b.routeDatabase());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +    assertNotNull(a.routeDatabase());, +    assertSame(a.routeDatabase(), b.routeDatabase());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.OkHttpClient;, +import com.squareup.okhttp.Request;, +import com.squareup.okhttp.internal.Internal;, +import org.junit.Before;, +  private String uriHost = "hostA";, +  private int uriPort = 1003;, +  private SocketFactory socketFactory;, +  private final SSLContext sslContext = SslContextBuilder.localhost();, +  private final SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();, +  private HostnameVerifier hostnameVerifier;, +  private OkHttpClient client;, +  private RouteDatabase routeDatabase;, +  private Request httpRequest;, +  private Request httpsRequest;, +, +  @Before public void setUp() throws Exception {, +    socketFactory = SocketFactory.getDefault();, +    hostnameVerifier = HttpsURLConnection.getDefaultHostnameVerifier();, +, +    client = new OkHttpClient(), +        .setAuthenticator(authenticator), +        .setProxySelector(proxySelector), +        .setSocketFactory(socketFactory), +        .setSslSocketFactory(sslSocketFactory), +        .setHostnameVerifier(hostnameVerifier), +        .setProtocols(protocols), +        .setConnectionPool(ConnectionPool.getDefault());, +    routeDatabase = Internal.instance.routeDatabase(client);, +, +    httpRequest = new Request.Builder(), +        .url("http://" + uriHost + ":" + uriPort + "/path"), +        .build();, +    httpsRequest = new Request.Builder(), +        .url("https://" + uriHost + ":" + uriPort + "/path"), +        .build();, +  }, +    Address address = httpAddress();, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client, dns);, +    assertConnection(routeSelector.nextUnconnected(), address, NO_PROXY, dns.inetAddresses[0],, +        uriPort, SSL_V3);, +      routeSelector.nextUnconnected();, +    Address address = httpAddress();, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client, dns);, +    Connection connection = routeSelector.nextUnconnected();, +    routeSelector = RouteSelector.get(httpRequest, client, dns);, +    assertConnection(routeSelector.nextUnconnected(), address, NO_PROXY, dns.inetAddresses[0],, +        uriPort, SSL_V3);, +      routeSelector.nextUnconnected();, +  @Test public void explicitProxyTriesThatProxysAddressesOnly() throws Exception {, +    client.setProxy(proxyA);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client, dns);, +    assertConnection(routeSelector.nextUnconnected(), address, proxyA, dns.inetAddresses[0],, +        proxyAPort, SSL_V3);, +    assertConnection(routeSelector.nextUnconnected(), address, proxyA, dns.inetAddresses[1],, +        proxyAPort, SSL_V3);, +    client.setProxy(NO_PROXY);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client, dns);, +    assertConnection(routeSelector.nextUnconnected(), address, NO_PROXY, dns.inetAddresses[0],, +        uriPort, SSL_V3);, +    assertConnection(routeSelector.nextUnconnected(), address, NO_PROXY, dns.inetAddresses[1],, +        uriPort, SSL_V3);, +    dns.assertRequests(uriHost);, +    Address address = httpAddress();, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client, dns);, +    proxySelector.assertRequests(httpRequest.uri());, +    assertConnection(routeSelector.nextUnconnected(), address, NO_PROXY, dns.inetAddresses[0],, +        uriPort, SSL_V3);, +    Address address = httpAddress();, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client, dns);, +    assertConnection(routeSelector.nextUnconnected(), address, NO_PROXY, dns.inetAddresses[0],, +        uriPort, SSL_V3);, +    assertConnection(routeSelector.nextUnconnected(), address, NO_PROXY, dns.inetAddresses[1],, +        uriPort, SSL_V3);, +    dns.assertRequests(uriHost);, +    proxySelector.assertRequests(httpRequest.uri());, +    Address address = httpAddress();, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client, dns);, +    proxySelector.assertRequests(httpRequest.uri());, +    assertConnection(routeSelector.nextUnconnected(), address, proxyA, dns.inetAddresses[0], proxyAPort,, +    assertConnection(routeSelector.nextUnconnected(), address, proxyA, dns.inetAddresses[1], proxyAPort,, +    assertConnection(routeSelector.nextUnconnected(), address, proxyB, dns.inetAddresses[0], proxyBPort,, +    assertConnection(routeSelector.nextUnconnected(), address, NO_PROXY, dns.inetAddresses[0], uriPort,, +    Address address = httpAddress();, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client, dns);, +    proxySelector.assertRequests(httpRequest.uri());, +    assertConnection(routeSelector.nextUnconnected(), address, NO_PROXY, dns.inetAddresses[0], uriPort,, +    Address address = httpAddress();, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client, dns);, +    proxySelector.assertRequests(httpRequest.uri());, +    assertConnection(routeSelector.nextUnconnected(), address, proxyA, dns.inetAddresses[0], proxyAPort,, +      routeSelector.nextUnconnected();, +    assertConnection(routeSelector.nextUnconnected(), address, proxyA, dns.inetAddresses[0], proxyAPort,, +    assertConnection(routeSelector.nextUnconnected(), address, NO_PROXY, dns.inetAddresses[0], uriPort,]