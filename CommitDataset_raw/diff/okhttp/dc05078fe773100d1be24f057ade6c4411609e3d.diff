[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer implements IncomingStreamHandler {, +            .handler(this), +  @Override public void receive(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer implements IncomingStreamHandler {, +            .handler(this), +  @Override public void receive(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.framed.IncomingStreamHandler;, +          FramedSocketHandler framedSocketHandler = new FramedSocketHandler(socket, protocol);, +              .handler(framedSocketHandler), +  private class FramedSocketHandler implements IncomingStreamHandler {, +    @Override public void receive(FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer implements IncomingStreamHandler {, +            .handler(this), +  @Override public void receive(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.framed.IncomingStreamHandler;, +          FramedSocketHandler framedSocketHandler = new FramedSocketHandler(socket, protocol);, +              .handler(framedSocketHandler), +  private class FramedSocketHandler implements IncomingStreamHandler {, +    @Override public void receive(FramedStream stream) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java, +      String endMessage = "--> END " + request.method();, +      if (logBody && hasRequestBody) {, +        endMessage += " (" + requestBody.contentLength() + "-byte body)";, +      logger.log(endMessage);, +      String endMessage = "<-- END HTTP";, +      if (logBody && HttpEngine.hasBody(response)) {, +        endMessage += " (" + buffer.size() + "-byte body)";, +      logger.log(endMessage);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer implements IncomingStreamHandler {, +            .handler(this), +  @Override public void receive(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.framed.IncomingStreamHandler;, +          FramedSocketHandler framedSocketHandler = new FramedSocketHandler(socket, protocol);, +              .handler(framedSocketHandler), +  private class FramedSocketHandler implements IncomingStreamHandler {, +    @Override public void receive(FramedStream stream) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java, +      String endMessage = "--> END " + request.method();, +      if (logBody && hasRequestBody) {, +        endMessage += " (" + requestBody.contentLength() + "-byte body)";, +      logger.log(endMessage);, +      String endMessage = "<-- END HTTP";, +      if (logBody && HttpEngine.hasBody(response)) {, +        endMessage += " (" + buffer.size() + "-byte body)";, +      logger.log(endMessage);, +++ b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java, +    client.newCall(request().build()).execute();, +    client.newCall(request().build()).execute();, +    client.newCall(request().post(RequestBody.create(PLAIN, "Hi?")).build()).execute();, +    client.newCall(request().post(RequestBody.create(null, "Hi?")).build()).execute();, +    client.newCall(request().post(body).build()).execute();, +    client.newCall(request().build()).execute();, +    client.newCall(request().build()).execute();, +    client.newCall(request().build()).execute();, +    client.newCall(request().post(RequestBody.create(PLAIN, "Hi?")).build()).execute();, +    client.newCall(request().build()).execute();, +    client.newCall(request().build()).execute();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer implements IncomingStreamHandler {, +            .handler(this), +  @Override public void receive(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.framed.IncomingStreamHandler;, +          FramedSocketHandler framedSocketHandler = new FramedSocketHandler(socket, protocol);, +              .handler(framedSocketHandler), +  private class FramedSocketHandler implements IncomingStreamHandler {, +    @Override public void receive(FramedStream stream) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java, +      String endMessage = "--> END " + request.method();, +      if (logBody && hasRequestBody) {, +        endMessage += " (" + requestBody.contentLength() + "-byte body)";, +      logger.log(endMessage);, +      String endMessage = "<-- END HTTP";, +      if (logBody && HttpEngine.hasBody(response)) {, +        endMessage += " (" + buffer.size() + "-byte body)";, +      logger.log(endMessage);, +++ b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java, +    client.newCall(request().build()).execute();, +    client.newCall(request().build()).execute();, +    client.newCall(request().post(RequestBody.create(PLAIN, "Hi?")).build()).execute();, +    client.newCall(request().post(RequestBody.create(null, "Hi?")).build()).execute();, +    client.newCall(request().post(body).build()).execute();, +    client.newCall(request().build()).execute();, +    client.newCall(request().build()).execute();, +    client.newCall(request().build()).execute();, +    client.newCall(request().post(RequestBody.create(PLAIN, "Hi?")).build()).execute();, +    client.newCall(request().build()).execute();, +    client.newCall(request().build()).execute();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import org.junit.Ignore;, +    call.execute();, +    server.enqueue(new MockResponse().setResponseCode(301).addHeader("Location: http://square.com"));, +  @Ignore // TODO(jwilson): fix HttpEngine connection cleanups.]