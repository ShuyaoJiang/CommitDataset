[+++ b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java, +      if (!logBody || !hasRequestBody) {, +        logger.log("--> END " + request.method());, +      } else if (bodyEncoded(request.headers())) {, +        logger.log("--> END " + request.method() + " (encoded body omitted)");, +      } else {, +        logger.log("--> END " + request.method(), +            + " (" + requestBody.contentLength() + "-byte body)");, +      if (!logBody || !HttpEngine.hasBody(response)) {, +        logger.log("<-- END HTTP");, +      } else if (bodyEncoded(response.headers())) {, +        logger.log("<-- END HTTP (encoded body omitted)");, +      } else {, +        logger.log("<-- END HTTP (" + buffer.size() + "-byte body)");, +  private boolean bodyEncoded(Headers headers) {, +    String contentEncoding = headers.get("Content-Encoding");, +    return contentEncoding != null && !contentEncoding.equalsIgnoreCase("identity");, +  }, +, +++ b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java, +      if (!logBody || !hasRequestBody) {, +        logger.log("--> END " + request.method());, +      } else if (bodyEncoded(request.headers())) {, +        logger.log("--> END " + request.method() + " (encoded body omitted)");, +      } else {, +        logger.log("--> END " + request.method(), +            + " (" + requestBody.contentLength() + "-byte body)");, +      if (!logBody || !HttpEngine.hasBody(response)) {, +        logger.log("<-- END HTTP");, +      } else if (bodyEncoded(response.headers())) {, +        logger.log("<-- END HTTP (encoded body omitted)");, +      } else {, +        logger.log("<-- END HTTP (" + buffer.size() + "-byte body)");, +  private boolean bodyEncoded(Headers headers) {, +    String contentEncoding = headers.get("Content-Encoding");, +    return contentEncoding != null && !contentEncoding.equalsIgnoreCase("identity");, +  }, +, +++ b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java, +import okio.Buffer;, +import okio.ByteString;, +  @Test public void bodyResponseNotIdentityEncoded() throws IOException {, +    setLevel(Level.BODY);, +, +    server.enqueue(new MockResponse(), +        .setHeader("Content-Encoding", "gzip"), +        .setHeader("Content-Type", PLAIN), +        .setBody(new Buffer().write(ByteString.decodeBase64(, +            "H4sIAAAAAAAAAPNIzcnJ11HwQKIAdyO+9hMAAAA="))));, +    client.newCall(request().build()).execute();, +, +    networkLogs, +        .assertLogEqual("--> GET " + url + " HTTP/1.1"), +        .assertLogEqual("Host: " + host), +        .assertLogEqual("Connection: Keep-Alive"), +        .assertLogEqual("Accept-Encoding: gzip"), +        .assertLogMatch("User-Agent: okhttp/.+"), +        .assertLogEqual("--> END GET"), +        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)"), +        .assertLogEqual("Content-Encoding: gzip"), +        .assertLogEqual("Content-Type: text/plain; charset=utf-8"), +        .assertLogMatch("Content-Length: \\d+"), +        .assertLogMatch("OkHttp-Sent-Millis: \\d+"), +        .assertLogMatch("OkHttp-Received-Millis: \\d+"), +        .assertLogEqual("<-- END HTTP (encoded body omitted)"), +        .assertNoMoreLogs();, +, +    applicationLogs, +        .assertLogEqual("--> GET " + url + " HTTP/1.1"), +        .assertLogEqual("--> END GET"), +        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)"), +        .assertLogEqual("Content-Type: text/plain; charset=utf-8"), +        .assertLogMatch("OkHttp-Sent-Millis: \\d+"), +        .assertLogMatch("OkHttp-Received-Millis: \\d+"), +        .assertLogEqual(""), +        .assertLogEqual("Hello, Hello, Hello"), +        .assertLogEqual("<-- END HTTP (19-byte body)"), +        .assertNoMoreLogs();, +  }, +, +++ b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java, +      if (!logBody || !hasRequestBody) {, +        logger.log("--> END " + request.method());, +      } else if (bodyEncoded(request.headers())) {, +        logger.log("--> END " + request.method() + " (encoded body omitted)");, +      } else {, +        logger.log("--> END " + request.method(), +            + " (" + requestBody.contentLength() + "-byte body)");, +      if (!logBody || !HttpEngine.hasBody(response)) {, +        logger.log("<-- END HTTP");, +      } else if (bodyEncoded(response.headers())) {, +        logger.log("<-- END HTTP (encoded body omitted)");, +      } else {, +        logger.log("<-- END HTTP (" + buffer.size() + "-byte body)");, +  private boolean bodyEncoded(Headers headers) {, +    String contentEncoding = headers.get("Content-Encoding");, +    return contentEncoding != null && !contentEncoding.equalsIgnoreCase("identity");, +  }, +, +++ b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java]