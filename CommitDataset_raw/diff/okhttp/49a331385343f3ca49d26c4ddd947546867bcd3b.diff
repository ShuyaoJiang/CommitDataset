[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/allocations/ConnectionTest.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.allocations;, +, +import com.squareup.okhttp.ConnectionPool;, +import org.junit.Test;, +, +import static junit.framework.TestCase.assertEquals;, +import static org.junit.Assert.assertNotEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.fail;, +, +public final class ConnectionTest {, +  ConnectionPool connectionPool = new ConnectionPool(1, 1000L);, +, +  @Test public void reserveCreateCompleteRelease() throws Exception {, +    Connection connection = new Connection(connectionPool);, +    connection.setAllocationLimit(1);, +, +    Connection.StreamAllocation a = connection.reserve("a");, +    Connection.Stream a1 = a.newStream("a1");, +    assertNotNull(a1);, +    a.streamComplete(a1);, +    assertEquals(1, connection.size()); // Still allocated., +, +    connection.release(a);, +    assertEquals(0, connection.size());, +  }, +, +  @Test public void reserveCreateReleaseComplete() throws Exception {, +    Connection connection = new Connection(connectionPool);, +    connection.setAllocationLimit(1);, +, +    Connection.StreamAllocation a = connection.reserve("a");, +    Connection.Stream a1 = a.newStream("a1");, +    assertNotNull(a1);, +    connection.release(a);, +    assertEquals(1, connection.size()); // Still allocated., +, +    a.streamComplete(a1);, +    assertEquals(0, connection.size());, +  }, +, +  @Test public void reuseAllocation() throws Exception {, +    Connection connection = new Connection(connectionPool);, +    connection.setAllocationLimit(1);, +, +    Connection.StreamAllocation a = connection.reserve("a");, +    Connection.Stream a1 = a.newStream("a1");, +    assertNotNull(a1);, +    a.streamComplete(a1);, +    assertEquals(1, connection.size());, +, +    Connection.Stream a2 = a.newStream("a2");, +    assertNotNull(a2);, +    a.streamComplete(a2);, +    assertEquals(1, connection.size());, +, +    connection.release(a);, +    assertEquals(0, connection.size());, +  }, +, +  @Test public void cannotReuseAllocationAfterRelease() throws Exception {, +    Connection connection = new Connection(connectionPool);, +    connection.setAllocationLimit(1);, +, +    Connection.StreamAllocation a = connection.reserve("a");, +    Connection.Stream a1 = a.newStream("a1");, +    a.streamComplete(a1);, +    connection.release(a);, +, +    try {, +      a.newStream("a2");, +      fail();, +    } catch (IllegalStateException expected) {, +    }, +  }, +, +  @Test public void createReturnsNullAfterNoNewStreams() throws Exception {, +    Connection connection = new Connection(connectionPool);, +    connection.setAllocationLimit(1);, +, +    Connection.StreamAllocation a = connection.reserve("a");]