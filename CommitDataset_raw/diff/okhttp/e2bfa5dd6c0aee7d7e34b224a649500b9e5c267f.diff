[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +  private static SSLContext localhost; // Lazily initialized., +, +  /** Returns a new SSL context for this host's current localhost address. */, +  public static synchronized SSLContext localhost() {, +    if (localhost == null) {, +      try {, +        localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +      } catch (GeneralSecurityException e) {, +        throw new RuntimeException(e);, +      } catch (UnknownHostException e) {, +        throw new RuntimeException(e);, +      }, +    }, +    return localhost;, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +  private static SSLContext localhost; // Lazily initialized., +, +  /** Returns a new SSL context for this host's current localhost address. */, +  public static synchronized SSLContext localhost() {, +    if (localhost == null) {, +      try {, +        localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +      } catch (GeneralSecurityException e) {, +        throw new RuntimeException(e);, +      } catch (UnknownHostException e) {, +        throw new RuntimeException(e);, +      }, +    }, +    return localhost;, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    server.useHttps(SslContextBuilder.localhost().getSocketFactory());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +  private static SSLContext localhost; // Lazily initialized., +, +  /** Returns a new SSL context for this host's current localhost address. */, +  public static synchronized SSLContext localhost() {, +    if (localhost == null) {, +      try {, +        localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +      } catch (GeneralSecurityException e) {, +        throw new RuntimeException(e);, +      } catch (UnknownHostException e) {, +        throw new RuntimeException(e);, +      }, +    }, +    return localhost;, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    server.useHttps(SslContextBuilder.localhost().getSocketFactory());, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import java.net.Socket;, +import java.util.Arrays;, +  /** Returns an immutable list containing {@code elements}. */, +  public static <T> List<T> immutableList(T[] elements) {, +    return Collections.unmodifiableList(Arrays.asList(elements.clone()));, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +  private static SSLContext localhost; // Lazily initialized., +, +  /** Returns a new SSL context for this host's current localhost address. */, +  public static synchronized SSLContext localhost() {, +    if (localhost == null) {, +      try {, +        localhost = new SslContextBuilder(InetAddress.getLocalHost().getHostName()).build();, +      } catch (GeneralSecurityException e) {, +        throw new RuntimeException(e);, +      } catch (UnknownHostException e) {, +        throw new RuntimeException(e);, +      }, +    }, +    return localhost;, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +    server.useHttps(SslContextBuilder.localhost().getSocketFactory());, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import java.net.Socket;, +import java.util.Arrays;, +  /** Returns an immutable list containing {@code elements}. */, +  public static <T> List<T> immutableList(T[] elements) {, +    return Collections.unmodifiableList(Arrays.asList(elements.clone()));, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Handshake.java, +/*]