[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.connection.Transmitter;, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.connection.Transmitter;, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.connection.Transmitter;, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +import okhttp3.internal.http.ExchangeCodec;, +            && !discard(this, ExchangeCodec.DISCARD_STREAM_TIMEOUT_MILLIS, MILLISECONDS)) {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.connection.Transmitter;, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +import okhttp3.internal.http.ExchangeCodec;, +            && !discard(this, ExchangeCodec.DISCARD_STREAM_TIMEOUT_MILLIS, MILLISECONDS)) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.connection.Transmitter;, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +import okhttp3.internal.http.ExchangeCodec;, +            && !discard(this, ExchangeCodec.DISCARD_STREAM_TIMEOUT_MILLIS, MILLISECONDS)) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ConnectionSpecSelector.java, +final class ConnectionSpecSelector {, +  ConnectionSpecSelector(List<ConnectionSpec> connectionSpecs) {, +  ConnectionSpec configureSecureSocket(SSLSocket sslSocket) throws IOException {, +  boolean connectionFailed(IOException e) {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http2.Http2ExchangeCodec;, +    Response response = Http2ExchangeCodec.readHttp2HeadersList(headerBlock, Protocol.HTTP_2).request(request).build();, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +    assertEquals(expected, Http2ExchangeCodec.http2HeadersList(request));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.connection.Transmitter;, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +import okhttp3.internal.http.ExchangeCodec;, +            && !discard(this, ExchangeCodec.DISCARD_STREAM_TIMEOUT_MILLIS, MILLISECONDS)) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/ConnectionSpecSelector.java, +final class ConnectionSpecSelector {, +  ConnectionSpecSelector(List<ConnectionSpec> connectionSpecs) {, +  ConnectionSpec configureSecureSocket(SSLSocket sslSocket) throws IOException {, +  boolean connectionFailed(IOException e) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Exchange.java, +import okhttp3.internal.http.ExchangeCodec;]