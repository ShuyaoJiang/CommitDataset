[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java, +  @Test, +  public void tls_stringCiphersAndVersions() throws Exception {, +    // Supporting arbitrary input strings allows users to enable suites and versions that are not, +    // yet known to the library, but are supported by the platform., +    ConnectionSpec tlsSpec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +        .cipherSuites("MAGIC-CIPHER"), +        .tlsVersions("TLS9k"), +        .build();, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java, +  @Test, +  public void tls_stringCiphersAndVersions() throws Exception {, +    // Supporting arbitrary input strings allows users to enable suites and versions that are not, +    // yet known to the library, but are supported by the platform., +    ConnectionSpec tlsSpec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS), +        .cipherSuites("MAGIC-CIPHER"), +        .tlsVersions("TLS9k"), +        .build();, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java, +      this.cipherSuites = strings;, +      return this;, +    public Builder cipherSuites(String... cipherSuites) {, +      if (!tls) throw new IllegalStateException("no cipher suites for cleartext connections");, +, +      if (cipherSuites == null) {, +        this.cipherSuites = null;, +      } else {, +        // This makes a defensive copy!, +        this.cipherSuites = cipherSuites.clone();, +      }, +, +      this.tlsVersions = strings;, +      return this;, +    public Builder tlsVersions(String... tlsVersions) {, +      if (!tls) throw new IllegalStateException("no TLS versions for cleartext connections");, +, +      if (tlsVersions == null) {, +        this.tlsVersions = null;, +      } else {, +        // This makes a defensive copy!, +        this.tlsVersions = tlsVersions.clone();, +      }, +]