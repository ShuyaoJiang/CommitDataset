[+++ b/README.md, +++ b/README.md, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +    SingleCommand.singleCommand(Main.class).parse(args).run();, +  @Option(name = { "-X", "--request" }, description = "Specify request command to use",, +      allowedValues = { "GET", "HEAD" }), +  public String method = "GET";, +    client = getConfiguredClient();, +    Request request = getConfiguredRequest();, +  private OkHttpClient getConfiguredClient() {, +  private Request getConfiguredRequest() {, +    request.method(method, null);, +++ b/README.md, +++ /dev/null, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +    SingleCommand.singleCommand(Main.class).parse(args).run();, +  @Option(name = { "-X", "--request" }, description = "Specify request command to use",, +      allowedValues = { "GET", "HEAD" }), +  public String method = "GET";, +    client = getConfiguredClient();, +    Request request = getConfiguredRequest();, +  private OkHttpClient getConfiguredClient() {, +  private Request getConfiguredRequest() {, +    request.method(method, null);, +++ /dev/null, +++ b/README.md, +++ /dev/null, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +    SingleCommand.singleCommand(Main.class).parse(args).run();, +  @Option(name = { "-X", "--request" }, description = "Specify request command to use",, +      allowedValues = { "GET", "HEAD" }), +  public String method = "GET";, +    client = getConfiguredClient();, +    Request request = getConfiguredRequest();, +  private OkHttpClient getConfiguredClient() {, +  private Request getConfiguredRequest() {, +    request.method(method, null);, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +import com.squareup.okhttp.internal.http.HttpConnection;, +  private HttpConnection httpConnection;, +      httpConnection = new HttpConnection(in, out);, +    Protocol selectedProtocol = Protocol.HTTP_11;, +      selectedProtocol = Protocol.find(maybeProtocol); // Throws IOE on unknown., +    }, +, +    } else {, +      httpConnection = new HttpConnection(in, out);, +        : new HttpTransport(httpEngine, httpConnection);, +    HttpConnection tunnelConnection = new HttpConnection(in, out);, +      tunnelConnection.writeRequest(request.headers(), requestLine);, +      Response response = tunnelConnection.readResponse().request(request).build();, +++ b/README.md, +++ /dev/null, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +    SingleCommand.singleCommand(Main.class).parse(args).run();, +  @Option(name = { "-X", "--request" }, description = "Specify request command to use",, +      allowedValues = { "GET", "HEAD" }), +  public String method = "GET";, +    client = getConfiguredClient();, +    Request request = getConfiguredRequest();, +  private OkHttpClient getConfiguredClient() {, +  private Request getConfiguredRequest() {, +    request.method(method, null);, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +import com.squareup.okhttp.internal.http.HttpConnection;, +  private HttpConnection httpConnection;, +      httpConnection = new HttpConnection(in, out);, +    Protocol selectedProtocol = Protocol.HTTP_11;, +      selectedProtocol = Protocol.find(maybeProtocol); // Throws IOE on unknown., +    }, +, +    } else {, +      httpConnection = new HttpConnection(in, out);, +        : new HttpTransport(httpEngine, httpConnection);, +    HttpConnection tunnelConnection = new HttpConnection(in, out);, +      tunnelConnection.writeRequest(request.headers(), requestLine);, +      Response response = tunnelConnection.readResponse().request(request).build();, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpConnection.java, +/*, + * Copyright (C) 2012 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */]