[+++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketRecorder.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.LinkedBlockingQueue;, +import java.util.concurrent.TimeUnit;, +import okhttp3.MediaType;, +import okhttp3.Response;, +import okhttp3.ResponseBody;, +import okhttp3.WebSocket;, +import okhttp3.WebSocketListener;, +import okhttp3.internal.ws.WebSocketReader;, +import okio.Buffer;, +, +import static okhttp3.WebSocket.BINARY;, +import static okhttp3.WebSocket.TEXT;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertTrue;, +, +public final class WebSocketRecorder implements WebSocketReader.FrameCallback, WebSocketListener {, +  public interface MessageDelegate {, +    void onMessage(ResponseBody message) throws IOException;, +  }, +, +  private final BlockingQueue<Object> events = new LinkedBlockingQueue<>();, +  private MessageDelegate delegate;, +  private Response response;, +, +  /** Sets a delegate for the next call to {@link #onMessage}. Cleared after invoked. */, +  public void setNextMessageDelegate(MessageDelegate delegate) {, +    this.delegate = delegate;, +  }, +, +  @Override public void onOpen(WebSocket webSocket, Response response) {, +  }, +, +  @Override public void onMessage(ResponseBody message) throws IOException {, +    if (delegate != null) {, +      delegate.onMessage(message);, +      delegate = null;, +    } else {, +      Message event = new Message(message.contentType());, +      message.source().readAll(event.buffer);, +      message.close();, +      events.add(event);, +    }, +  }, +, +  @Override public void onPing(Buffer buffer) {, +    events.add(new Ping(buffer));, +  }, +, +  @Override public void onPong(Buffer buffer) {, +    events.add(new Pong(buffer));, +  }, +, +  @Override public void onClose(int code, String reason) {, +    events.add(new Close(code, reason));, +  }, +, +  @Override public void onFailure(IOException e, Response response) {, +    events.add(e);, +    this.response = response;, +  }, +, +  private Object nextEvent() {, +    try {, +      Object event = events.poll(10, TimeUnit.SECONDS);, +      if (event == null) {, +        throw new AssertionError("Timed out.");, +      }, +      return event;, +    } catch (InterruptedException e) {, +      throw new AssertionError(e);, +    }, +  }, +, +  public void assertTextMessage(String payload) throws IOException {, +    Message message = new Message(TEXT);, +    message.buffer.writeUtf8(payload);, +    Object actual = nextEvent();]