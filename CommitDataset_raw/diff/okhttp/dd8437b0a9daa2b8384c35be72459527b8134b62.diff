[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/TestUtil.java, +, +  public static String repeat(char c, int count) {, +    char[] array = new char[count];, +    Arrays.fill(array, c);, +    return new String(array);, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/TestUtil.java, +, +  public static String repeat(char c, int count) {, +    char[] array = new char[count];, +    Arrays.fill(array, c);, +    return new String(array);, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/Http2ConnectionTest.java, +import java.net.Socket;, +import static com.squareup.okhttp.TestUtil.repeat;, +  /**, +   * When writing a set of headers fails due to an {@code IOException}, make sure the writer is left, +   * in a consistent state so the next writer also gets an {@code IOException} also instead of, +   * something worse (like an {@link IllegalStateException}., +   *, +   * <p>See https://github.com/square/okhttp/issues/1651, +   */, +  @Test public void socketExceptionWhileWritingHeaders() throws Exception {, +    peer.setVariantAndClient(HTTP_2, false);, +    peer.acceptFrame(); // SYN_STREAM., +    peer.play();, +, +    String longString = repeat('a', Http2.INITIAL_MAX_FRAME_SIZE + 1);, +    Socket socket = peer.openSocket();, +    FramedConnection connection = new FramedConnection.Builder(true, socket), +        .pushObserver(IGNORE), +        .protocol(HTTP_2.getProtocol()), +        .build();, +    socket.shutdownOutput();, +    try {, +      connection.newStream(headerEntries("a", longString), false, true);, +      fail();, +    } catch (IOException expected) {, +    }, +    try {, +      connection.newStream(headerEntries("b", longString), false, true);, +      fail();, +    } catch (IOException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/TestUtil.java, +, +  public static String repeat(char c, int count) {, +    char[] array = new char[count];, +    Arrays.fill(array, c);, +    return new String(array);, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/Http2ConnectionTest.java, +import java.net.Socket;, +import static com.squareup.okhttp.TestUtil.repeat;, +  /**, +   * When writing a set of headers fails due to an {@code IOException}, make sure the writer is left, +   * in a consistent state so the next writer also gets an {@code IOException} also instead of, +   * something worse (like an {@link IllegalStateException}., +   *, +   * <p>See https://github.com/square/okhttp/issues/1651, +   */, +  @Test public void socketExceptionWhileWritingHeaders() throws Exception {, +    peer.setVariantAndClient(HTTP_2, false);, +    peer.acceptFrame(); // SYN_STREAM., +    peer.play();, +, +    String longString = repeat('a', Http2.INITIAL_MAX_FRAME_SIZE + 1);, +    Socket socket = peer.openSocket();, +    FramedConnection connection = new FramedConnection.Builder(true, socket), +        .pushObserver(IGNORE), +        .protocol(HTTP_2.getProtocol()), +        .build();, +    socket.shutdownOutput();, +    try {, +      connection.newStream(headerEntries("a", longString), false, true);, +      fail();, +    } catch (IOException expected) {, +    }, +    try {, +      connection.newStream(headerEntries("b", longString), false, true);, +      fail();, +    } catch (IOException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/Spdy3ConnectionTest.java, +import java.net.Socket;, +import java.util.Random;, +  @Test public void socketExceptionWhileWritingHeaders() throws Exception {, +    peer.acceptFrame(); // SYN_STREAM., +    peer.play();, +, +    String longString = ByteString.of(randomBytes(2048)).base64();, +    Socket socket = peer.openSocket();, +    FramedConnection connection = new FramedConnection.Builder(true, socket), +        .protocol(SPDY3.getProtocol())]