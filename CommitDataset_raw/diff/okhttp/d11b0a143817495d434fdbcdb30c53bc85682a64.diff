[+++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ b/build.gradle, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +    // While MockWebServer waits to read the client's HEADERS frame before sending the response, it, +    // doesn't wait to read the client's DATA frame and may send a DATA frame before the client, +    // does. So we can't assume the client's empty DATA will be logged first., +    assertThat(countFrames(logs, "FINE: >> 0x00000003     0 DATA          END_STREAM")), +        .isEqualTo((long) 2);, +    assertThat(countFrames(logs, "FINE: >> 0x00000003     3 DATA          ")), +        .isEqualTo((long) 1);, +++ /dev/null, +++ b/build.gradle, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +    // While MockWebServer waits to read the client's HEADERS frame before sending the response, it, +    // doesn't wait to read the client's DATA frame and may send a DATA frame before the client, +    // does. So we can't assume the client's empty DATA will be logged first., +    assertThat(countFrames(logs, "FINE: >> 0x00000003     0 DATA          END_STREAM")), +        .isEqualTo((long) 2);, +    assertThat(countFrames(logs, "FINE: >> 0x00000003     3 DATA          ")), +        .isEqualTo((long) 1);, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +    // While MockWebServer waits to read the client's HEADERS frame before sending the response, it, +    // doesn't wait to read the client's DATA frame and may send a DATA frame before the client, +    // does. So we can't assume the client's empty DATA will be logged first., +    assertThat(countFrames(logs, "FINE: >> 0x00000003     0 DATA          END_STREAM")), +        .isEqualTo((long) 2);, +    assertThat(countFrames(logs, "FINE: >> 0x00000003     3 DATA          ")), +        .isEqualTo((long) 1);, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteException.kt, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.connection, +, +import java.io.IOException;, +, +/**, + * An exception thrown to indicate a problem connecting via a single Route. Multiple attempts may, + * have been made with alternative protocols, none of which were successful., + */, +class RouteException internal constructor(val firstConnectException: IOException) :, +    RuntimeException(firstConnectException) {, +  var lastConnectException: IOException = firstConnectException, +, +  fun addConnectException(e: IOException) {, +    firstConnectException.addSuppressed(e), +    lastConnectException = e, +  }, +}, +++ /dev/null, +++ b/build.gradle, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +    // While MockWebServer waits to read the client's HEADERS frame before sending the response, it, +    // doesn't wait to read the client's DATA frame and may send a DATA frame before the client, +    // does. So we can't assume the client's empty DATA will be logged first., +    assertThat(countFrames(logs, "FINE: >> 0x00000003     0 DATA          END_STREAM")), +        .isEqualTo((long) 2);, +    assertThat(countFrames(logs, "FINE: >> 0x00000003     3 DATA          ")), +        .isEqualTo((long) 1);, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteException.kt, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.connection, +, +import java.io.IOException;, +, +/**]