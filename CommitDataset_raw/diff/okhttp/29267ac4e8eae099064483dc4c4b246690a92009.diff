[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        ConnectionAcquired.class);, +        ConnectionAcquired.class);, +    ConnectionAcquired connectionAcquired = listener.removeUpToEvent(ConnectionAcquired.class);, +    assertSame(call, connectionAcquired.call);, +    assertNotNull(connectionAcquired.connection);, +    listener.removeUpToEvent(ConnectionAcquired.class);, +    assertFalse(remainingEvents.contains(ConnectionAcquired.class));, +    ConnectionAcquired connectionAcquired1 = listener.removeUpToEvent(ConnectionAcquired.class);, +    ConnectionAcquired connectionAcquired2 = listener.removeUpToEvent(ConnectionAcquired.class);, +    assertSame(connectionAcquired1.connection, connectionAcquired2.connection);, +    listener.removeUpToEvent(ConnectionAcquired.class);, +    listener.removeUpToEvent(ConnectionAcquired.class);, +  static final class ConnectionAcquired {, +    ConnectionAcquired(Call call, Connection connection) {, +      this.call = call;, +      this.connection = connection;, +    }, +  }, +, +  static final class ConnectionReleased {, +    final Call call;, +    final Connection connection;, +, +    ConnectionReleased(Call call, Connection connection) {, +        Proxy proxy, Protocol protocol, Throwable throwable) {, +    @Override public void connectionAcquired(Call call, Connection connection) {, +      eventSequence.offer(new ConnectionAcquired(call, connection));, +    }, +, +    @Override public void connectionReleased(Call call, Connection connection) {, +      eventSequence.offer(new ConnectionReleased(call, connection));, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        ConnectionAcquired.class);, +        ConnectionAcquired.class);, +    ConnectionAcquired connectionAcquired = listener.removeUpToEvent(ConnectionAcquired.class);, +    assertSame(call, connectionAcquired.call);, +    assertNotNull(connectionAcquired.connection);, +    listener.removeUpToEvent(ConnectionAcquired.class);, +    assertFalse(remainingEvents.contains(ConnectionAcquired.class));, +    ConnectionAcquired connectionAcquired1 = listener.removeUpToEvent(ConnectionAcquired.class);, +    ConnectionAcquired connectionAcquired2 = listener.removeUpToEvent(ConnectionAcquired.class);, +    assertSame(connectionAcquired1.connection, connectionAcquired2.connection);, +    listener.removeUpToEvent(ConnectionAcquired.class);, +    listener.removeUpToEvent(ConnectionAcquired.class);, +  static final class ConnectionAcquired {, +    ConnectionAcquired(Call call, Connection connection) {, +      this.call = call;, +      this.connection = connection;, +    }, +  }, +, +  static final class ConnectionReleased {, +    final Call call;, +    final Connection connection;, +, +    ConnectionReleased(Call call, Connection connection) {, +        Proxy proxy, Protocol protocol, Throwable throwable) {, +    @Override public void connectionAcquired(Call call, Connection connection) {, +      eventSequence.offer(new ConnectionAcquired(call, connection));, +    }, +, +    @Override public void connectionReleased(Call call, Connection connection) {, +      eventSequence.offer(new ConnectionReleased(call, connection));, +++ b/okhttp/src/main/java/okhttp3/EventListener.java, +  /**, +   * Invoked as soon as a call is enqueued or executed by a client. In case of thread or stream, +   * limits, this call may be executed well before processing the request is able to begin., +   *, +   * <p>This will be invoked only once for a single {@link Call}. Retries of different routes, +   * or redirects will be handled within the boundaries of a single fetchStart and, +   * {@link #fetchEnd(Call, Throwable)} pair., +   */, +   * <p>{@code protocol} and {@code proxy} will be non-null and {@code throwable} will be null when, +   * the connection is successfully established., +   * <p>{@code protocol} and {@code proxy} will be null and {@code throwable} will be non-null in, +   * the case of a failed connection attempt., +      Proxy proxy, @Nullable Protocol protocol, @Nullable Throwable throwable) {, +  public void connectionAcquired(Call call, Connection connection) {, +  /**, +   * Invoked after a connection has been released for the {@code call}., +   *, +   * <p>This method is always invoked after {@link #connectionAcquired(Call, Connection)}., +   *, +   * <p>This can be invoked more than 1 time for a single {@link Call}. For example, if the response, +   * to the {@link Call#request()} is a redirect to a different address., +   */, +  public void connectionReleased(Call call, Connection connection) {, +  }, +, +  /**, +   * Invoked just prior to sending request headers., +   *, +   * <p>The connection is implicit, and will generally relate to the last, +   * {@link #connectionAcquired(Call, Connection)} event., +   *, +   * <p>This can be invoked more than 1 time for a single {@link Call}. For example, if the response, +   * to the {@link Call#request()} is a redirect to a different address., +   */, +  /**]