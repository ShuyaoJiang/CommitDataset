[+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // 1. Seed the cache (potentially)., +    // 2. Expect a cache hit or miss., +    // 1. Seed the cache., +    // 2. Invalidate it., +    // 3. Expect a cache miss., +    // 1. Seed the cache., +    // 2. Invalidate it with an uncacheable response., +    // 3. Expect a cache miss., +  @Test public void putInvalidatesWithNoContentResponse() throws Exception {, +    // 1. Seed the cache., +    // 2. Invalidate it., +    // 3. Expect a cache miss., +    server.enqueue(new MockResponse(), +        .setBody("A"), +        .addHeader("Expires: " + formatDate(1, TimeUnit.HOURS)));, +    server.enqueue(new MockResponse(), +        .clearHeaders(), +        .setResponseCode(HttpURLConnection.HTTP_NO_CONTENT));, +    server.enqueue(new MockResponse(), +        .setBody("C"));, +, +    HttpUrl url = server.url("/");, +, +    assertEquals("A", get(url).body().string());, +, +    Request request = new Request.Builder(), +        .url(url), +        .put(RequestBody.create(MediaType.parse("text/plain"), "foo")), +        .build();, +    Response invalidate = client.newCall(request).execute();, +    assertEquals("", invalidate.body().string());, +, +    assertEquals("C", get(url).body().string());, +  }, +, +    // 1. Request a range., +    // 2. Request a full document, expecting a cache miss., +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // 1. Seed the cache (potentially)., +    // 2. Expect a cache hit or miss., +    // 1. Seed the cache., +    // 2. Invalidate it., +    // 3. Expect a cache miss., +    // 1. Seed the cache., +    // 2. Invalidate it with an uncacheable response., +    // 3. Expect a cache miss., +  @Test public void putInvalidatesWithNoContentResponse() throws Exception {, +    // 1. Seed the cache., +    // 2. Invalidate it., +    // 3. Expect a cache miss., +    server.enqueue(new MockResponse(), +        .setBody("A"), +        .addHeader("Expires: " + formatDate(1, TimeUnit.HOURS)));, +    server.enqueue(new MockResponse(), +        .clearHeaders(), +        .setResponseCode(HttpURLConnection.HTTP_NO_CONTENT));, +    server.enqueue(new MockResponse(), +        .setBody("C"));, +, +    HttpUrl url = server.url("/");, +, +    assertEquals("A", get(url).body().string());, +, +    Request request = new Request.Builder(), +        .url(url), +        .put(RequestBody.create(MediaType.parse("text/plain"), "foo")), +        .build();, +    Response invalidate = client.newCall(request).execute();, +    assertEquals("", invalidate.body().string());, +, +    assertEquals("C", get(url).body().string());, +  }, +, +    // 1. Request a range., +    // 2. Request a full document, expecting a cache miss., +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +, +  @Test public void topPrivateDomain() {, +    assertEquals("google.com", HttpUrl.parse("https://google.com").topPrivateDomain());, +    assertEquals("google.co.uk", HttpUrl.parse("https://adwords.google.co.uk").topPrivateDomain());, +    assertEquals("xn--ewv.xn--4pvxs.jp", HttpUrl.parse("https://栃.栃木.jp").topPrivateDomain());, +    assertEquals("xn--ewv.xn--4pvxs.jp",, +        HttpUrl.parse("https://xn--ewv.xn--4pvxs.jp").topPrivateDomain());, +, +    assertNull(HttpUrl.parse("https://co.uk").topPrivateDomain());, +    assertNull(HttpUrl.parse("https://square").topPrivateDomain());, +    assertNull(HttpUrl.parse("https://栃木.jp").topPrivateDomain());, +    assertNull(HttpUrl.parse("https://xn--4pvxs.jp").topPrivateDomain());, +    assertNull(HttpUrl.parse("https://localhost").topPrivateDomain());, +    assertNull(HttpUrl.parse("https://127.0.0.1").topPrivateDomain());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    // 1. Seed the cache (potentially)., +    // 2. Expect a cache hit or miss., +    // 1. Seed the cache., +    // 2. Invalidate it., +    // 3. Expect a cache miss., +    // 1. Seed the cache., +    // 2. Invalidate it with an uncacheable response.]