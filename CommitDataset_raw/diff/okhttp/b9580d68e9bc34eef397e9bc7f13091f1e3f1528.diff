[+++ b/src/main/java/com/squareup/okhttp/internal/Util.java, +import java.util.concurrent.ThreadFactory;, +, +    public static ThreadFactory newThreadFactory(final String name, final boolean daemon) {, +        return new ThreadFactory() {, +            @Override public Thread newThread(Runnable r) {, +                Thread result = new Thread(r, name);, +                result.setDaemon(daemon);, +                return result;, +            }, +        };, +    }, +++ b/src/main/java/com/squareup/okhttp/internal/Util.java, +import java.util.concurrent.ThreadFactory;, +, +    public static ThreadFactory newThreadFactory(final String name, final boolean daemon) {, +        return new ThreadFactory() {, +            @Override public Thread newThread(Runnable r) {, +                Thread result = new Thread(r, name);, +                result.setDaemon(daemon);, +                return result;, +            }, +        };, +    }, +++ b/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +                new SynchronousQueue<Runnable>(), Util.newThreadFactory(prefix + "Reader", false));, +                new LinkedBlockingQueue<Runnable>(), Util.newThreadFactory(prefix + "Writer", false));, +                new SynchronousQueue<Runnable>(), Util.newThreadFactory(prefix + "Callbacks", false));, +        close(GOAWAY_OK, SpdyStream.RST_CANCEL);, +    }, +, +    private void close(int shutdownStatusCode, int rstStatusCode) throws IOException {, +        assert (!Thread.holdsLock(this));, +        IOException thrown = null;, +        try {, +            shutdown(shutdownStatusCode);, +        } catch (IOException e) {, +            thrown = e;, +        }, +                    stream.close(rstStatusCode);, +                } catch (IOException e) {, +                    if (thrown != null) thrown = e;, +        try {, +            spdyReader.close();, +        } catch (IOException e) {, +            thrown = e;, +        }, +        try {, +            spdyWriter.close();, +        } catch (IOException e) {, +            if (thrown == null) thrown = e;, +        }, +        if (thrown != null) throw thrown;, +            int shutdownStatusCode = GOAWAY_INTERNAL_ERROR;, +            int rstStatusCode = SpdyStream.RST_INTERNAL_ERROR;, +                shutdownStatusCode = GOAWAY_OK;, +                rstStatusCode = SpdyStream.RST_CANCEL;, +                shutdownStatusCode = GOAWAY_PROTOCOL_ERROR;, +                rstStatusCode = SpdyStream.RST_PROTOCOL_ERROR;, +                try {, +                    close(shutdownStatusCode, rstStatusCode);, +                } catch (IOException ignored) {, +                }, +++ b/src/main/java/com/squareup/okhttp/internal/Util.java, +import java.util.concurrent.ThreadFactory;, +, +    public static ThreadFactory newThreadFactory(final String name, final boolean daemon) {, +        return new ThreadFactory() {, +            @Override public Thread newThread(Runnable r) {, +                Thread result = new Thread(r, name);, +                result.setDaemon(daemon);, +                return result;, +            }, +        };, +    }, +++ b/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +                new SynchronousQueue<Runnable>(), Util.newThreadFactory(prefix + "Reader", false));, +                new LinkedBlockingQueue<Runnable>(), Util.newThreadFactory(prefix + "Writer", false));, +                new SynchronousQueue<Runnable>(), Util.newThreadFactory(prefix + "Callbacks", false));, +        close(GOAWAY_OK, SpdyStream.RST_CANCEL);, +    }, +, +    private void close(int shutdownStatusCode, int rstStatusCode) throws IOException {, +        assert (!Thread.holdsLock(this));, +        IOException thrown = null;, +        try {, +            shutdown(shutdownStatusCode);, +        } catch (IOException e) {, +            thrown = e;, +        }, +                    stream.close(rstStatusCode);, +                } catch (IOException e) {, +                    if (thrown != null) thrown = e;, +        try {, +            spdyReader.close();, +        } catch (IOException e) {, +            thrown = e;, +        }, +        try {, +            spdyWriter.close();]