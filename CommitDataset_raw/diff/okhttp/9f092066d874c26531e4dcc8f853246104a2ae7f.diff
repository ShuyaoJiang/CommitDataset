[+++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +  private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,, +      60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),, +      Util.daemonThreadFactory("OkHttp ConnectionPool"));, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +  private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,, +      60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),, +      Util.daemonThreadFactory("OkHttp ConnectionPool"));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/NamedRunnable.java, +  private final String name;, +  public NamedRunnable(String format, Object... args) {, +    this.name = String.format(format, args);, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +  private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,, +      60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),, +      Util.daemonThreadFactory("OkHttp ConnectionPool"));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/NamedRunnable.java, +  private final String name;, +  public NamedRunnable(String format, Object... args) {, +    this.name = String.format(format, args);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +import java.util.concurrent.ThreadFactory;, +, +  public static ThreadFactory daemonThreadFactory(final String name) {, +    return new ThreadFactory() {, +      @Override public Thread newThread(Runnable runnable) {, +        Thread result = new Thread(runnable, name);, +        result.setDaemon(true);, +        return result;, +      }, +    };, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +  private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,, +      60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),, +      Util.daemonThreadFactory("OkHttp ConnectionPool"));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/NamedRunnable.java, +  private final String name;, +  public NamedRunnable(String format, Object... args) {, +    this.name = String.format(format, args);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +import java.util.concurrent.ThreadFactory;, +, +  public static ThreadFactory daemonThreadFactory(final String name) {, +    return new ThreadFactory() {, +      @Override public Thread newThread(Runnable runnable) {, +        Thread result = new Thread(runnable, name);, +        result.setDaemon(true);, +        return result;, +      }, +    };, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +  private static final ExecutorService executor = new ThreadPoolExecutor(0,, +      Integer.MAX_VALUE, 60, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),, +      Util.daemonThreadFactory("OkHttp SpdyConnection"));, +    executor.submit(new NamedRunnable("OkHttp SPDY Writer %s stream %d", hostName, streamId) {, +    executor.submit(new NamedRunnable("OkHttp SPDY Writer %s stream %d", hostName, streamId) {, +    executor.submit(new NamedRunnable("OkHttp SPDY Writer %s ping %d", hostName, streamId) {, +      executor.submit(new NamedRunnable("OkHttp SPDY Callback %s stream %d", hostName, streamId) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +  private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,, +      60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),, +      Util.daemonThreadFactory("OkHttp ConnectionPool"));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/NamedRunnable.java, +  private final String name;, +  public NamedRunnable(String format, Object... args) {, +    this.name = String.format(format, args);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +import java.util.concurrent.ThreadFactory;, +, +  public static ThreadFactory daemonThreadFactory(final String name) {, +    return new ThreadFactory() {, +      @Override public Thread newThread(Runnable runnable) {, +        Thread result = new Thread(runnable, name);, +        result.setDaemon(true);, +        return result;, +      }, +    };, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +  private static final ExecutorService executor = new ThreadPoolExecutor(0,, +      Integer.MAX_VALUE, 60, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),, +      Util.daemonThreadFactory("OkHttp SpdyConnection"));, +    executor.submit(new NamedRunnable("OkHttp SPDY Writer %s stream %d", hostName, streamId) {, +    executor.submit(new NamedRunnable("OkHttp SPDY Writer %s stream %d", hostName, streamId) {, +    executor.submit(new NamedRunnable("OkHttp SPDY Writer %s ping %d", hostName, streamId) {, +      executor.submit(new NamedRunnable("OkHttp SPDY Callback %s stream %d", hostName, streamId) {, +++ b/pom.xml, +    <mockwebserver.version>20130505</mockwebserver.version>, +    <bouncycastle.version>1.48</bouncycastle.version>, +    <gson.version>2.2.3</gson.version>, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +  private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,, +      60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),, +      Util.daemonThreadFactory("OkHttp ConnectionPool"));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/NamedRunnable.java, +  private final String name;, +  public NamedRunnable(String format, Object... args) {, +    this.name = String.format(format, args);]