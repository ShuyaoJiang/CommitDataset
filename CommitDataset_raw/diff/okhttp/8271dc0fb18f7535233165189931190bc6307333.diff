[+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        int codePoint = prefix.readUtf8CodePoint();, +        if (Character.isISOControl(codePoint) && !Character.isWhitespace(codePoint)) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        int codePoint = prefix.readUtf8CodePoint();, +        if (Character.isISOControl(codePoint) && !Character.isWhitespace(codePoint)) {, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +    assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("new\r\nlines")));, +    assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("white\t space")));, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        int codePoint = prefix.readUtf8CodePoint();, +        if (Character.isISOControl(codePoint) && !Character.isWhitespace(codePoint)) {, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +    assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("new\r\nlines")));, +    assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("white\t space")));, +++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java, +  @Test public void okButNotOk() {, +    server.enqueue(new MockResponse().setResponseCode(200));, +  @Test public void notFound() {, +        listener.onFailure(e, null);, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        int codePoint = prefix.readUtf8CodePoint();, +        if (Character.isISOControl(codePoint) && !Character.isWhitespace(codePoint)) {, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +    assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("new\r\nlines")));, +    assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("white\t space")));, +++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java, +  @Test public void okButNotOk() {, +    server.enqueue(new MockResponse().setResponseCode(200));, +  @Test public void notFound() {, +        listener.onFailure(e, null);, +++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketRecorder.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        int codePoint = prefix.readUtf8CodePoint();, +        if (Character.isISOControl(codePoint) && !Character.isWhitespace(codePoint)) {, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +    assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("new\r\nlines")));, +    assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("white\t space")));, +++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java, +  @Test public void okButNotOk() {, +    server.enqueue(new MockResponse().setResponseCode(200));, +  @Test public void notFound() {, +        listener.onFailure(e, null);, +++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketRecorder.java, +++ b/okhttp-ws/src/main/java/okhttp3/ws/WebSocketCall.java, +      Util.closeQuietly(response.body());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        int codePoint = prefix.readUtf8CodePoint();, +        if (Character.isISOControl(codePoint) && !Character.isWhitespace(codePoint)) {, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +    assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("new\r\nlines")));, +    assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("white\t space")));, +++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java, +  @Test public void okButNotOk() {, +    server.enqueue(new MockResponse().setResponseCode(200));, +  @Test public void notFound() {, +        listener.onFailure(e, null);, +++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketRecorder.java, +++ b/okhttp-ws/src/main/java/okhttp3/ws/WebSocketCall.java, +      Util.closeQuietly(response.body());, +++ b/okhttp/src/main/java/okhttp3/internal/http/HttpEngine.java, +    if (!forWebSocket) {]