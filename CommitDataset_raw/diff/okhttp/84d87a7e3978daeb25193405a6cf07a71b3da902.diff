[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java, +import java.util.LinkedHashSet;, +    return new LinkedHashSet<String>(Arrays.asList(values));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java, +import java.util.LinkedHashSet;, +    return new LinkedHashSet<String>(Arrays.asList(values));, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java, +  /**, +   * Return the cipher suites to use with the connection. This method can return {@code null} if the, +   * ciphers enabled by default should be used., +   */, +        String[] oldEnabledCipherSuites = cipherSuitesToEnable != null, +            ? cipherSuitesToEnable, +            : sslSocket.getEnabledCipherSuites();, +      cipherSuitesToEnable =, +          Util.intersect(String.class, cipherSuites, cipherSuitesToSelectFrom);, +    String[] tlsVersionsToEnable = Util.intersect(String.class, tlsVersions, protocolsToSelectFrom);, +        .tlsVersions(tlsVersionsToEnable), +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java, +import java.util.LinkedHashSet;, +    return new LinkedHashSet<String>(Arrays.asList(values));, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java, +  /**, +   * Return the cipher suites to use with the connection. This method can return {@code null} if the, +   * ciphers enabled by default should be used., +   */, +        String[] oldEnabledCipherSuites = cipherSuitesToEnable != null, +            ? cipherSuitesToEnable, +            : sslSocket.getEnabledCipherSuites();, +      cipherSuitesToEnable =, +          Util.intersect(String.class, cipherSuites, cipherSuitesToSelectFrom);, +    String[] tlsVersionsToEnable = Util.intersect(String.class, tlsVersions, protocolsToSelectFrom);, +        .tlsVersions(tlsVersionsToEnable), +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java, +import java.lang.reflect.Array;, +   * Returns an array containing containing only elements found in {@code first}  and also in, +   * {@code second}. The returned elements are in the same order as in {@code first}., +  @SuppressWarnings("unchecked"), +  public static <T> T[] intersect(Class<T> arrayType, T[] first, T[] second) {, +    List<T> result = intersect(first, second);, +    return result.toArray((T[]) Array.newInstance(arrayType, result.size()));, +  }, +, +  /**, +   * Returns a list containing containing only elements found in {@code first}  and also in, +   * {@code second}. The returned elements are in the same order as in {@code first}., +   */, +  private static <T> List<T> intersect(T[] first, T[] second) {]