[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.util.Collections;, +    assertEquals("android.com:443", connect.getHeader("Host"));, +  /** https://github.com/square/okhttp/issues/2344 */, +  @Test public void ipv6HostHasSquareBraces() throws Exception {, +    // Use a proxy to fake IPv6 connectivity, even if localhost doesn't have IPv6., +    server.useHttps(sslContext.getSocketFactory(), true);, +    server.setProtocols(Collections.singletonList(Protocol.HTTP_1_1));, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END), +        .clearHeaders());, +    server.enqueue(new MockResponse(), +        .setBody("response body"));, +, +    client = client.newBuilder(), +        .sslSocketFactory(sslContext.getSocketFactory()), +        .hostnameVerifier(new RecordingHostnameVerifier()), +        .proxy(server.toProxyAddress()), +        .build();, +, +    Request request = new Request.Builder(), +        .url("https://[::1]/"), +        .build();, +    Response response = client.newCall(request).execute();, +    assertEquals("response body", response.body().string());, +, +    RecordedRequest connect = server.takeRequest();, +    assertEquals("CONNECT [::1]:443 HTTP/1.1", connect.getRequestLine());, +    assertEquals("[::1]:443", connect.getHeader("Host"));, +, +    RecordedRequest get = server.takeRequest();, +    assertEquals("GET / HTTP/1.1", get.getRequestLine());, +    assertEquals("[::1]", get.getHeader("Host"));, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.util.Collections;, +    assertEquals("android.com:443", connect.getHeader("Host"));, +  /** https://github.com/square/okhttp/issues/2344 */, +  @Test public void ipv6HostHasSquareBraces() throws Exception {, +    // Use a proxy to fake IPv6 connectivity, even if localhost doesn't have IPv6., +    server.useHttps(sslContext.getSocketFactory(), true);, +    server.setProtocols(Collections.singletonList(Protocol.HTTP_1_1));, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END), +        .clearHeaders());, +    server.enqueue(new MockResponse(), +        .setBody("response body"));, +, +    client = client.newBuilder(), +        .sslSocketFactory(sslContext.getSocketFactory()), +        .hostnameVerifier(new RecordingHostnameVerifier()), +        .proxy(server.toProxyAddress()), +        .build();, +, +    Request request = new Request.Builder(), +        .url("https://[::1]/"), +        .build();, +    Response response = client.newCall(request).execute();, +    assertEquals("response body", response.body().string());, +, +    RecordedRequest connect = server.takeRequest();, +    assertEquals("CONNECT [::1]:443 HTTP/1.1", connect.getRequestLine());, +    assertEquals("[::1]:443", connect.getHeader("Host"));, +, +    RecordedRequest get = server.takeRequest();, +    assertEquals("GET / HTTP/1.1", get.getRequestLine());, +    assertEquals("[::1]", get.getHeader("Host"));, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +  /** The builder permits square braces but does not require them. */, +  @Test public void hostIPv6Builder() throws Exception {, +    HttpUrl base = HttpUrl.parse("http://example.com/");, +    assertEquals("http://[::1]/", base.newBuilder().host("[::1]").build().toString());, +    assertEquals("http://[::1]/", base.newBuilder().host("[::0001]").build().toString());, +    assertEquals("http://[::1]/", base.newBuilder().host("::1").build().toString());, +    assertEquals("http://[::1]/", base.newBuilder().host("::0001").build().toString());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.util.Collections;, +    assertEquals("android.com:443", connect.getHeader("Host"));, +  /** https://github.com/square/okhttp/issues/2344 */, +  @Test public void ipv6HostHasSquareBraces() throws Exception {, +    // Use a proxy to fake IPv6 connectivity, even if localhost doesn't have IPv6., +    server.useHttps(sslContext.getSocketFactory(), true);, +    server.setProtocols(Collections.singletonList(Protocol.HTTP_1_1));, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END), +        .clearHeaders());, +    server.enqueue(new MockResponse(), +        .setBody("response body"));, +, +    client = client.newBuilder(), +        .sslSocketFactory(sslContext.getSocketFactory()), +        .hostnameVerifier(new RecordingHostnameVerifier()), +        .proxy(server.toProxyAddress()), +        .build();, +]