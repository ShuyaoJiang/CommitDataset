[+++ /dev/null, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +      int b;, +      while ((b = in.read()) != -1) {, +        b &= 0xff;, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +      int b;, +      while ((b = in.read()) != -1) {, +        b &= 0xff;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +  @Override public Settings defaultOkHttpSettings(boolean client) {, +    return initialPeerSettings(client);, +  }, +, +  @Override public Settings initialPeerSettings(boolean client) {, +  static final int TYPE_DATA = 0x0;, +  static final int TYPE_HEADERS = 0x1;, +  static final int TYPE_PRIORITY = 0x2;, +  static final int TYPE_RST_STREAM = 0x3;, +  static final int TYPE_SETTINGS = 0x4;, +  static final int TYPE_PUSH_PROMISE = 0x5;, +  static final int TYPE_PING = 0x6;, +  static final int TYPE_GOAWAY = 0x7;, +  static final int TYPE_WINDOW_UPDATE = 0x9;, +  static final int TYPE_CONTINUATION = 0xa;, +  static final int FLAG_END_STREAM = 0x1;, +  /** Used for headers and continuation. */, +  static final int FLAG_END_HEADERS = 0x4;, +  static final int FLAG_END_PUSH_PROMISE = 0x4;, +  static final int FLAG_PRIORITY = 0x8;, +  static final int FLAG_ACK = 0x1;, +, +  @Override public FrameReader newReader(InputStream in, Settings peerSettings, boolean client) {, +    return new Reader(in, peerSettings.getHeaderTableSize(), client);, +  @Override public FrameWriter newWriter(OutputStream out, Settings ignored, boolean client) {, +      this.client = client;, +      in.readFully(connectionHeader);, +        throw ioException("Expected a connection header but was ", +            + Arrays.toString(connectionHeader));, +      // boolean r = (w1 & 0xc0000000) != 0; // Reserved., +      short length = (short) ((w1 & 0x3fff0000) >> 16); // 14-bit unsigned., +      if (length < 0 || length > 16383) {, +        throw new IOException("FRAME_SIZE_ERROR max size is 16383: " + length);, +      }, +      // boolean r = (w2 & 0x80000000) != 0; // Reserved., +      int streamId = (w2 & 0x7fffffff);, +          return true;, +          return true;, +          return true;, +          return true;, +          return true;, +          return true;, +          return true;, +          return true;, +      throw new UnsupportedOperationException(Integer.toBinaryString(type));, +    }, +, +      boolean endHeaders = (flags & FLAG_END_HEADERS) != 0;, +      int priority = ((flags & FLAG_PRIORITY) != 0) ? in.readInt() & 0x7fffffff : -1;, +      List<Header> headerBlock = readHeaderBlock(length, endHeaders, streamId);, +    private List<Header> readHeaderBlock(short length, boolean endHeaders, int streamId), +      continuation.bytesLeft = length;, +      continuation.endHeaders = endHeaders;, +      boolean endHeaders = (flags & FLAG_END_PUSH_PROMISE) != 0;, +, +      List<Header> headerBlock = readHeaderBlock(length, endHeaders, streamId);, +, +      // ACK the settings frame., +      out.writeInt(0 | (TYPE_SETTINGS & 0xff) << 8 | (FLAG_ACK & 0xff));, +      out.writeInt(0);, +    public void pushPromise(int streamId, int promisedStreamId, List<Header> requestHeaders), +      int type = TYPE_PUSH_PROMISE;, +      // TODO: implement CONTINUATION, +      int length = hpackBuffer.size();, +      checkFrameSize(length);, +      int flags = FLAG_END_HEADERS;, +      out.writeInt((length & 0x3fff) << 16 | (type & 0xff) << 8 | (flags & 0xff));, +      out.writeInt(streamId & 0x7fffffff);, +      int type = TYPE_HEADERS;, +      // TODO: implement CONTINUATION, +      checkFrameSize(length);, +      int flags = FLAG_END_HEADERS;, +      out.writeInt((length & 0x3fff) << 16 | (type & 0xff) << 8 | (flags & 0xff));, +      out.writeInt(streamId & 0x7fffffff);, +      int flags = 0;, +      int type = TYPE_RST_STREAM;, +      out.writeInt((length & 0x3fff) << 16 | (type & 0xff) << 8 | (flags & 0xff));, +      out.writeInt(streamId & 0x7fffffff);, +    @Override public void data(boolean outFinished, int streamId, byte[] data) throws IOException {, +      int flags = 0;, +      // TODO: Implement looping strategy., +      sendDataFrame(streamId, flags, data, offset, byteCount);, +    void sendDataFrame(int streamId, int flags, byte[] data, int offset, int byteCount), +      checkFrameSize(byteCount);, +      out.writeInt((byteCount & 0x3fff) << 16 | (TYPE_DATA & 0xff) << 8 | (flags & 0xff));, +      out.writeInt(streamId & 0x7fffffff);, +      out.write(data, offset, byteCount);, +      int type = TYPE_SETTINGS;]