[+++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java, +      // This is SSLParameters.setServerNames() in API 24+., +    if (setAlpnProtocols.isSupported(sslSocket)) {, +      throw new AssertionError(e);, +  public static @Nullable Platform buildIfSupported() {, +    // Attempt to find Android 5+ APIs., +      Class<?> sslParametersClass = Class.forName("com.android.org.conscrypt.SSLParametersImpl");, +      OptionalMethod<Socket> getAlpnSelectedProtocol = new OptionalMethod<>(, +          byte[].class, "getAlpnSelectedProtocol");, +      OptionalMethod<Socket> setAlpnProtocols = new OptionalMethod<>(, +          null, "setAlpnProtocols", byte[].class);, +      return null; // Not an Android runtime., +++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java, +      // This is SSLParameters.setServerNames() in API 24+., +    if (setAlpnProtocols.isSupported(sslSocket)) {, +      throw new AssertionError(e);, +  public static @Nullable Platform buildIfSupported() {, +    // Attempt to find Android 5+ APIs., +      Class<?> sslParametersClass = Class.forName("com.android.org.conscrypt.SSLParametersImpl");, +      OptionalMethod<Socket> getAlpnSelectedProtocol = new OptionalMethod<>(, +          byte[].class, "getAlpnSelectedProtocol");, +      OptionalMethod<Socket> setAlpnProtocols = new OptionalMethod<>(, +          null, "setAlpnProtocols", byte[].class);, +      return null; // Not an Android runtime., +++ b/okhttp/src/main/java/okhttp3/internal/platform/Platform.java, +    return new BasicCertificateChainCleaner(trustManager.getAcceptedIssuers());, +++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java, +      // This is SSLParameters.setServerNames() in API 24+., +    if (setAlpnProtocols.isSupported(sslSocket)) {, +      throw new AssertionError(e);, +  public static @Nullable Platform buildIfSupported() {, +    // Attempt to find Android 5+ APIs., +      Class<?> sslParametersClass = Class.forName("com.android.org.conscrypt.SSLParametersImpl");, +      OptionalMethod<Socket> getAlpnSelectedProtocol = new OptionalMethod<>(, +          byte[].class, "getAlpnSelectedProtocol");, +      OptionalMethod<Socket> setAlpnProtocols = new OptionalMethod<>(, +          null, "setAlpnProtocols", byte[].class);, +      return null; // Not an Android runtime., +++ b/okhttp/src/main/java/okhttp3/internal/platform/Platform.java, +    return new BasicCertificateChainCleaner(trustManager.getAcceptedIssuers());, +++ b/okhttp/src/main/java/okhttp3/internal/tls/BasicCertificateChainCleaner.java, +import java.security.PublicKey;, +import java.util.LinkedHashMap;, +import java.util.LinkedHashSet;, +import java.util.Map;, +import java.util.Set;, +import javax.security.auth.x500.X500Principal;, +  /** A simple index that of trusted root certificates that have been loaded into memory. */, +  private final Map<X500Principal, Set<X509Certificate>> subjectToCaCerts;, +  public BasicCertificateChainCleaner(X509Certificate... caCerts) {, +    subjectToCaCerts = new LinkedHashMap<>();, +    for (X509Certificate caCert : caCerts) {, +      X500Principal subject = caCert.getSubjectX500Principal();, +      Set<X509Certificate> subjectCaCerts = subjectToCaCerts.get(subject);, +      if (subjectCaCerts == null) {, +        subjectCaCerts = new LinkedHashSet<>(1);, +        subjectToCaCerts.put(subject, subjectCaCerts);, +      }, +      subjectCaCerts.add(caCert);, +    }, +      X509Certificate trustedCert = findByIssuerAndSignature(toVerify);, +  /** Returns the trusted CA certificate that signed {@code cert}. */, +  private X509Certificate findByIssuerAndSignature(X509Certificate cert) {, +    X500Principal issuer = cert.getIssuerX500Principal();, +    Set<X509Certificate> subjectCaCerts = subjectToCaCerts.get(issuer);, +    if (subjectCaCerts == null) return null;, +, +    for (X509Certificate caCert : subjectCaCerts) {, +      PublicKey publicKey = caCert.getPublicKey();, +      try {, +        cert.verify(publicKey);, +        return caCert;, +      } catch (Exception ignored) {, +      }, +    }, +, +    return null;, +  }, +, +    return subjectToCaCerts.hashCode();, +        && ((BasicCertificateChainCleaner) other).subjectToCaCerts.equals(subjectToCaCerts);, +++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java, +      // This is SSLParameters.setServerNames() in API 24+., +    if (setAlpnProtocols.isSupported(sslSocket)) {, +      throw new AssertionError(e);, +  public static @Nullable Platform buildIfSupported() {, +    // Attempt to find Android 5+ APIs., +      Class<?> sslParametersClass = Class.forName("com.android.org.conscrypt.SSLParametersImpl");, +      OptionalMethod<Socket> getAlpnSelectedProtocol = new OptionalMethod<>(, +          byte[].class, "getAlpnSelectedProtocol");, +      OptionalMethod<Socket> setAlpnProtocols = new OptionalMethod<>(, +          null, "setAlpnProtocols", byte[].class);, +      return null; // Not an Android runtime., +++ b/okhttp/src/main/java/okhttp3/internal/platform/Platform.java, +    return new BasicCertificateChainCleaner(trustManager.getAcceptedIssuers());, +++ b/okhttp/src/main/java/okhttp3/internal/tls/BasicCertificateChainCleaner.java, +import java.security.PublicKey;, +import java.util.LinkedHashMap;, +import java.util.LinkedHashSet;, +import java.util.Map;]