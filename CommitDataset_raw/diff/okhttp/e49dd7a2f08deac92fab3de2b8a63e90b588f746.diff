[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          logger.log(Level.WARNING, MockWebServer.this + " connection from ", +              + raw.getInetAddress() + " failed", e);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          logger.log(Level.WARNING, MockWebServer.this + " connection from ", +              + raw.getInetAddress() + " failed", e);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void attemptAuthorization20Times() throws Exception {, +    for (int i = 0; i < 20; i++) {, +      server.enqueue(new MockResponse().setResponseCode(401));, +    }, +    server.enqueue(new MockResponse().setBody("Success!"));, +, +    String credential = Credentials.basic("jesse", "secret");, +    client.setAuthenticator(new RecordingOkAuthenticator(credential));, +, +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    executeSynchronously(request), +        .assertCode(200), +        .assertBody("Success!");, +  }, +, +  @Test public void doesNotAttemptAuthorization21Times() throws Exception {, +    for (int i = 0; i < 21; i++) {, +      server.enqueue(new MockResponse().setResponseCode(401));, +    }, +, +    String credential = Credentials.basic("jesse", "secret");, +    client.setAuthenticator(new RecordingOkAuthenticator(credential));, +, +    try {, +      client.newCall(new Request.Builder().url(server.getUrl("/0")).build()).execute();, +      fail();, +    } catch (IOException expected) {, +      assertEquals("Too many follow-up requests: 21", expected.getMessage());, +    }, +  }, +, +      assertEquals("Too many follow-up requests: 21", expected.getMessage());, +    callback.await(server.getUrl("/20")).assertFailure("Too many follow-up requests: 21");, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          logger.log(Level.WARNING, MockWebServer.this + " connection from ", +              + raw.getInetAddress() + " failed", e);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void attemptAuthorization20Times() throws Exception {, +    for (int i = 0; i < 20; i++) {, +      server.enqueue(new MockResponse().setResponseCode(401));, +    }, +    server.enqueue(new MockResponse().setBody("Success!"));, +, +    String credential = Credentials.basic("jesse", "secret");, +    client.setAuthenticator(new RecordingOkAuthenticator(credential));, +, +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    executeSynchronously(request), +        .assertCode(200), +        .assertBody("Success!");, +  }, +, +  @Test public void doesNotAttemptAuthorization21Times() throws Exception {, +    for (int i = 0; i < 21; i++) {, +      server.enqueue(new MockResponse().setResponseCode(401));, +    }, +, +    String credential = Credentials.basic("jesse", "secret");, +    client.setAuthenticator(new RecordingOkAuthenticator(credential));, +, +    try {, +      client.newCall(new Request.Builder().url(server.getUrl("/0")).build()).execute();, +      fail();, +    } catch (IOException expected) {, +      assertEquals("Too many follow-up requests: 21", expected.getMessage());, +    }, +  }, +, +      assertEquals("Too many follow-up requests: 21", expected.getMessage());, +    callback.await(server.getUrl("/20")).assertFailure("Too many follow-up requests: 21");, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          logger.log(Level.WARNING, MockWebServer.this + " connection from ", +              + raw.getInetAddress() + " failed", e);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void attemptAuthorization20Times() throws Exception {, +    for (int i = 0; i < 20; i++) {, +      server.enqueue(new MockResponse().setResponseCode(401));, +    }, +    server.enqueue(new MockResponse().setBody("Success!"));, +, +    String credential = Credentials.basic("jesse", "secret");, +    client.setAuthenticator(new RecordingOkAuthenticator(credential));, +, +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    executeSynchronously(request), +        .assertCode(200), +        .assertBody("Success!");, +  }, +, +  @Test public void doesNotAttemptAuthorization21Times() throws Exception {, +    for (int i = 0; i < 21; i++) {, +      server.enqueue(new MockResponse().setResponseCode(401));]