[+++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +  @Test public void nullSSLSocketFactory_throws() throws Exception {, +    server.useHttps(sslClient.socketFactory, false /* tunnelProxy */);, +    HttpsURLConnection connection = (HttpsURLConnection) server.url("/").url().openConnection();, +    try {, +      connection.setSSLSocketFactory(null);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +  @Test public void nullSSLSocketFactory_throws() throws Exception {, +    server.useHttps(sslClient.socketFactory, false /* tunnelProxy */);, +    HttpsURLConnection connection = (HttpsURLConnection) server.url("/").url().openConnection();, +    try {, +      connection.setSSLSocketFactory(null);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +import org.hamcrest.CoreMatchers;, +    for (String l: logs) {, +      if (l.contains(type)) {, +        return l;, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +  @Test public void nullSSLSocketFactory_throws() throws Exception {, +    server.useHttps(sslClient.socketFactory, false /* tunnelProxy */);, +    HttpsURLConnection connection = (HttpsURLConnection) server.url("/").url().openConnection();, +    try {, +      connection.setSSLSocketFactory(null);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +import org.hamcrest.CoreMatchers;, +    for (String l: logs) {, +      if (l.contains(type)) {, +        return l;, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpsURLConnection.java, +    if (sslSocketFactory == null) {, +        throw new IllegalArgumentException("null sslSocketFactory");, +    }, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +  @Test public void nullSSLSocketFactory_throws() throws Exception {, +    server.useHttps(sslClient.socketFactory, false /* tunnelProxy */);, +    HttpsURLConnection connection = (HttpsURLConnection) server.url("/").url().openConnection();, +    try {, +      connection.setSSLSocketFactory(null);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +import org.hamcrest.CoreMatchers;, +    for (String l: logs) {, +      if (l.contains(type)) {, +        return l;, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpsURLConnection.java, +    if (sslSocketFactory == null) {, +        throw new IllegalArgumentException("null sslSocketFactory");, +    }, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +     * Sets the interval between web socket pings initiated by this client. Use this to, +     * automatically send web socket ping frames until either the web socket fails or it is closed., +     * This keeps the connection alive and may detect connectivity failures., +     * client will assume that connectivity has been lost. When this happens the connection is, +     * canceled and its listener is {@linkplain WebSocketListener#onFailure notified of the, +     * failure}., +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +  @Test public void nullSSLSocketFactory_throws() throws Exception {, +    server.useHttps(sslClient.socketFactory, false /* tunnelProxy */);, +    HttpsURLConnection connection = (HttpsURLConnection) server.url("/").url().openConnection();, +    try {, +      connection.setSSLSocketFactory(null);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +import org.hamcrest.CoreMatchers;, +    for (String l: logs) {, +      if (l.contains(type)) {, +        return l;, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpsURLConnection.java, +    if (sslSocketFactory == null) {, +        throw new IllegalArgumentException("null sslSocketFactory");, +    }, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +     * Sets the interval between web socket pings initiated by this client. Use this to]