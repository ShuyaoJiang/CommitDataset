[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer extends FramedConnection.Listener {, +            .listener(this), +  @Override public void onStream(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer extends FramedConnection.Listener {, +            .listener(this), +  @Override public void onStream(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          FramedSocketHandler framedSocketListener = new FramedSocketHandler(socket, protocol);, +              .listener(framedSocketListener), +  private class FramedSocketHandler extends FramedConnection.Listener {, +    @Override public void onStream(FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer extends FramedConnection.Listener {, +            .listener(this), +  @Override public void onStream(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          FramedSocketHandler framedSocketListener = new FramedSocketHandler(socket, protocol);, +              .listener(framedSocketListener), +  private class FramedSocketHandler extends FramedConnection.Listener {, +    @Override public void onStream(FramedStream stream) throws IOException {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/Spdy3ConnectionTest.java, +    FramedConnection.Listener handler = new FramedConnection.Listener() {, +      @Override public void onStream(FramedStream stream) throws IOException {, +        .listener(handler), +    FramedConnection.Listener listener = new FramedConnection.Listener() {, +      @Override public void onStream(FramedStream stream) throws IOException {, +    connectionBuilder(peer, SPDY3).listener(listener).build();, +    final Settings settings = new Settings();, +    final AtomicInteger maxConcurrentStreams = new AtomicInteger();, +    FramedConnection.Listener listener = new FramedConnection.Listener() {, +      @Override public void onStream(FramedStream stream) throws IOException {, +        throw new AssertionError();, +      }, +      @Override public void onSettings(FramedConnection connection) {, +        maxConcurrentStreams.set(connection.maxConcurrentStreams());, +      }, +    };, +    FramedConnection connection = connectionBuilder(peer, SPDY3), +        .listener(listener), +        .build();, +    assertEquals(10, maxConcurrentStreams.get());, +    FramedConnection.Listener listener = new FramedConnection.Listener() {, +      @Override public void onStream(FramedStream stream) throws IOException {, +        .listener(listener), +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer extends FramedConnection.Listener {, +            .listener(this), +  @Override public void onStream(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          FramedSocketHandler framedSocketListener = new FramedSocketHandler(socket, protocol);, +              .listener(framedSocketListener), +  private class FramedSocketHandler extends FramedConnection.Listener {, +    @Override public void onStream(FramedStream stream) throws IOException {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/Spdy3ConnectionTest.java, +    FramedConnection.Listener handler = new FramedConnection.Listener() {, +      @Override public void onStream(FramedStream stream) throws IOException {, +        .listener(handler), +    FramedConnection.Listener listener = new FramedConnection.Listener() {, +      @Override public void onStream(FramedStream stream) throws IOException {, +    connectionBuilder(peer, SPDY3).listener(listener).build();, +    final Settings settings = new Settings();, +    final AtomicInteger maxConcurrentStreams = new AtomicInteger();, +    FramedConnection.Listener listener = new FramedConnection.Listener() {, +      @Override public void onStream(FramedStream stream) throws IOException {, +        throw new AssertionError();, +      }, +      @Override public void onSettings(FramedConnection connection) {, +        maxConcurrentStreams.set(connection.maxConcurrentStreams());, +      }, +    };, +    FramedConnection connection = connectionBuilder(peer, SPDY3), +        .listener(listener), +        .build();, +    assertEquals(10, maxConcurrentStreams.get());, +    FramedConnection.Listener listener = new FramedConnection.Listener() {, +      @Override public void onStream(FramedStream stream) throws IOException {, +        .listener(listener), +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/framed/FramedConnection.java, +   * User code to run in response to incoming streams or settings. Calls to this are always invoked, +   * on {@link #executor}., +  private final Listener listener;, +    listener = builder.listener;, +    private Listener listener = Listener.REFUSE_INCOMING_STREAMS;, +    public Builder listener(Listener listener) {, +      this.listener = listener;, +                listener.onStream(newStream);, +                logger.log(Level.INFO, "FramedConnection.Listener failure for " + hostName, e);, +        executor.execute(new NamedRunnable("OkHttp %s settings", hostName) {, +          @Override public void execute() {, +            listener.onSettings(FramedConnection.this);, +          }, +        });, +, +  /** Listener of streams and settings initiated by the peer. */, +  public abstract static class Listener {, +    public static final Listener REFUSE_INCOMING_STREAMS = new Listener() {, +      @Override public void onStream(FramedStream stream) throws IOException {, +        stream.close(ErrorCode.REFUSED_STREAM);]