[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/GzipSource.java, +    byte flags = buffer.getByte(3);, +      long index = seek((byte) 0, deadline);, +      long index = seek((byte) 0, deadline);, +  /** Returns the next index of {@code b}, reading data into the buffer as necessary. */, +  private long seek(byte b, Deadline deadline) throws IOException {, +    long start = 0;, +    long index;, +    while ((index = buffer.indexOf(b, start)) == -1) {, +      start = buffer.byteCount;, +      if (source.read(buffer, Segment.SIZE, deadline) == -1) throw new EOFException();, +    }, +    return index;, +  }, +, +          "%s: actual %#08x != expected %#08x", name, actual, expected));, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/GzipSource.java, +    byte flags = buffer.getByte(3);, +      long index = seek((byte) 0, deadline);, +      long index = seek((byte) 0, deadline);, +  /** Returns the next index of {@code b}, reading data into the buffer as necessary. */, +  private long seek(byte b, Deadline deadline) throws IOException {, +    long start = 0;, +    long index;, +    while ((index = buffer.indexOf(b, start)) == -1) {, +      start = buffer.byteCount;, +      if (source.read(buffer, Segment.SIZE, deadline) == -1) throw new EOFException();, +    }, +    return index;, +  }, +, +          "%s: actual %#08x != expected %#08x", name, actual, expected));, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/OkBuffer.java, +  public byte getByte(long i) {, +        Segment tail = head.prev;, +        if (byteCount + (tail.limit - tail.pos) > Segment.SIZE) {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/GzipSource.java, +    byte flags = buffer.getByte(3);, +      long index = seek((byte) 0, deadline);, +      long index = seek((byte) 0, deadline);, +  /** Returns the next index of {@code b}, reading data into the buffer as necessary. */, +  private long seek(byte b, Deadline deadline) throws IOException {, +    long start = 0;, +    long index;, +    while ((index = buffer.indexOf(b, start)) == -1) {, +      start = buffer.byteCount;, +      if (source.read(buffer, Segment.SIZE, deadline) == -1) throw new EOFException();, +    }, +    return index;, +  }, +, +          "%s: actual %#08x != expected %#08x", name, actual, expected));, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/OkBuffer.java, +  public byte getByte(long i) {, +        Segment tail = head.prev;, +        if (byteCount + (tail.limit - tail.pos) > Segment.SIZE) {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/OkBuffers.java, +        return buffer.readByte();, +        super.close();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/GzipSource.java, +    byte flags = buffer.getByte(3);, +      long index = seek((byte) 0, deadline);, +      long index = seek((byte) 0, deadline);, +  /** Returns the next index of {@code b}, reading data into the buffer as necessary. */, +  private long seek(byte b, Deadline deadline) throws IOException {, +    long start = 0;, +    long index;, +    while ((index = buffer.indexOf(b, start)) == -1) {, +      start = buffer.byteCount;, +      if (source.read(buffer, Segment.SIZE, deadline) == -1) throw new EOFException();, +    }, +    return index;, +  }, +, +          "%s: actual %#08x != expected %#08x", name, actual, expected));, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/OkBuffer.java, +  public byte getByte(long i) {, +        Segment tail = head.prev;, +        if (byteCount + (tail.limit - tail.pos) > Segment.SIZE) {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/OkBuffers.java, +        return buffer.readByte();, +        super.close();, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/bytes/GzipSourceTest.java, +      assertEquals("FHCRC: actual 0x00261d != expected 0x000000", e.getMessage());, +      assertEquals("CRC: actual 0x37ad8f8d != expected 0x1234567", e.getMessage());, +      assertEquals("ISIZE: actual 0x000020 != expected 0x123456", e.getMessage());, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/GzipSource.java, +    byte flags = buffer.getByte(3);, +      long index = seek((byte) 0, deadline);, +      long index = seek((byte) 0, deadline);, +  /** Returns the next index of {@code b}, reading data into the buffer as necessary. */, +  private long seek(byte b, Deadline deadline) throws IOException {, +    long start = 0;, +    long index;, +    while ((index = buffer.indexOf(b, start)) == -1) {, +      start = buffer.byteCount;, +      if (source.read(buffer, Segment.SIZE, deadline) == -1) throw new EOFException();, +    }, +    return index;, +  }]