[+++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +    Executor synchronousExecutor = new Executor() {, +      @Override public void execute(Runnable command) {, +        command.run();, +      }, +    };, +, +    client = new RealWebSocket(true, server2client, client2Server, random, synchronousExecutor,, +    server = new RealWebSocket(false, client2Server, server2client, random, synchronousExecutor,, +    server.readMessage(); // This will trigger a close response., +    client.readMessage();, +    client.readMessage();, +++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +    Executor synchronousExecutor = new Executor() {, +      @Override public void execute(Runnable command) {, +        command.run();, +      }, +    };, +, +    client = new RealWebSocket(true, server2client, client2Server, random, synchronousExecutor,, +    server = new RealWebSocket(false, client2Server, server2client, random, synchronousExecutor,, +    server.readMessage(); // This will trigger a close response., +    client.readMessage();, +    client.readMessage();, +++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketWriterTest.java, +    try {, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertEquals("Code required to include reason.", e.getMessage());, +    }, +++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +    Executor synchronousExecutor = new Executor() {, +      @Override public void execute(Runnable command) {, +        command.run();, +      }, +    };, +, +    client = new RealWebSocket(true, server2client, client2Server, random, synchronousExecutor,, +    server = new RealWebSocket(false, client2Server, server2client, random, synchronousExecutor,, +    server.readMessage(); // This will trigger a close response., +    client.readMessage();, +    client.readMessage();, +++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketWriterTest.java, +    try {, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertEquals("Code required to include reason.", e.getMessage());, +    }, +++ /dev/null, +++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +    Executor synchronousExecutor = new Executor() {, +      @Override public void execute(Runnable command) {, +        command.run();, +      }, +    };, +, +    client = new RealWebSocket(true, server2client, client2Server, random, synchronousExecutor,, +    server = new RealWebSocket(false, client2Server, server2client, random, synchronousExecutor,, +    server.readMessage(); // This will trigger a close response., +    client.readMessage();, +    client.readMessage();, +++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketWriterTest.java, +    try {, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertEquals("Code required to include reason.", e.getMessage());, +    }, +++ /dev/null, +++ b/okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java, +            peerClose(code, reason);, +  private void peerClose(int code, String reason) {, +    boolean writeCloseResponse;, +    synchronized (closeLock) {, +      readerSentClose = true;, +, +      // If the writer has not indicated a desire to close we will write a close response., +      writeCloseResponse = !writerSentClose;, +    }, +, +++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +    Executor synchronousExecutor = new Executor() {, +      @Override public void execute(Runnable command) {, +        command.run();, +      }, +    };, +, +    client = new RealWebSocket(true, server2client, client2Server, random, synchronousExecutor,, +    server = new RealWebSocket(false, client2Server, server2client, random, synchronousExecutor,, +    server.readMessage(); // This will trigger a close response., +    client.readMessage();, +    client.readMessage();, +++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketWriterTest.java, +    try {, +      fail();, +    } catch (IllegalArgumentException e) {, +      assertEquals("Code required to include reason.", e.getMessage());, +    }, +++ /dev/null, +++ b/okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java, +            peerClose(code, reason);]