[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    EventListener listener = new EventListener() {, +      @Override public void requestHeadersStart(Call call) {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    EventListener listener = new EventListener() {, +      @Override public void requestHeadersStart(Call call) {, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +      @Override public void connectStart(, +          Call call, InetSocketAddress inetSocketAddress, Proxy proxy) {, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    EventListener listener = new EventListener() {, +      @Override public void requestHeadersStart(Call call) {, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +      @Override public void connectStart(, +          Call call, InetSocketAddress inetSocketAddress, Proxy proxy) {, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    client = client.newBuilder(), +        .addNetworkInterceptor(new HttpLoggingInterceptor(), +            .setLevel(HttpLoggingInterceptor.Level.BODY)), +        .build();, +    call.execute();, +, +  @Test public void applicationInterceptorShortCircuit() throws Exception {, +    client = client.newBuilder(), +        .addInterceptor(chain -> new Response.Builder(), +            .request(chain.request()), +            .protocol(Protocol.HTTP_1_1), +            .code(200), +            .message("OK"), +            .body(ResponseBody.create(null, "a")), +            .build()), +        .build();, +, +    Call call = client.newCall(new Request.Builder().url(server.url("/")).build());, +    Response response = call.execute();, +    assertEquals("a", response.body().string());, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }]