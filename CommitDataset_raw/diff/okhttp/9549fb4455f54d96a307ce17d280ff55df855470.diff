[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +    @Override public boolean maybeRemove(Request request) throws IOException {, +      return false;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +    @Override public boolean maybeRemove(Request request) throws IOException {, +      return false;, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +    if (maybeRemove(response.request())) {, +  @Override public boolean maybeRemove(Request request) {, +    if (HttpMethod.invalidatesCache(request.method())) {, +      try {, +      } catch (IOException ignored) {, +        // The cache cannot be written., +      }, +      return true;, +    }, +    return false;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +    @Override public boolean maybeRemove(Request request) throws IOException {, +      return false;, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +    if (maybeRemove(response.request())) {, +  @Override public boolean maybeRemove(Request request) {, +    if (HttpMethod.invalidatesCache(request.method())) {, +      try {, +      } catch (IOException ignored) {, +        // The cache cannot be written., +      }, +      return true;, +    }, +    return false;, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +   * <h3>Non-blocking responses</h3>, +   *, +   * <p>Receivers do not need to block while waiting for the response body to, +   * download. Instead, they can get called back as data arrives. Use {@link, +   * Response.Body#ready} to check if bytes should be read immediately. While, +   * there is data ready, read it., +   *, +   * <p>The current implementation of {@link Response.Body#ready} always, +   * returns true when the underlying transport is HTTP/1. This results in, +   * blocking on that transport. For effective non-blocking your server must, +   * support {@link Protocol#SPDY_3} or {@link Protocol#HTTP_2}., +   *, +   * @throws IOException when the request could not be executed due to a, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +    @Override public boolean maybeRemove(Request request) throws IOException {, +      return false;, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +    if (maybeRemove(response.request())) {, +  @Override public boolean maybeRemove(Request request) {, +    if (HttpMethod.invalidatesCache(request.method())) {, +      try {, +      } catch (IOException ignored) {, +        // The cache cannot be written., +      }, +      return true;, +    }, +    return false;, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +   * <h3>Non-blocking responses</h3>, +   *, +   * <p>Receivers do not need to block while waiting for the response body to, +   * download. Instead, they can get called back as data arrives. Use {@link, +   * Response.Body#ready} to check if bytes should be read immediately. While, +   * there is data ready, read it., +   *, +   * <p>The current implementation of {@link Response.Body#ready} always, +   * returns true when the underlying transport is HTTP/1. This results in, +   * blocking on that transport. For effective non-blocking your server must, +   * support {@link Protocol#SPDY_3} or {@link Protocol#HTTP_2}., +   *, +   * @throws IOException when the request could not be executed due to a, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkResponseCache.java, +   * Remove any cache entries for the supplied {@code uri}. Returns true if the, +   * supplied {@code requestMethod} potentially invalidates an entry in the, +   * cache., +  // TODO: this shouldn't return a boolean., +  boolean maybeRemove(Request request) throws IOException;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +    @Override public boolean maybeRemove(Request request) throws IOException {, +      return false;, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +    if (maybeRemove(response.request())) {, +  @Override public boolean maybeRemove(Request request) {, +    if (HttpMethod.invalidatesCache(request.method())) {, +      try {, +      } catch (IOException ignored) {, +        // The cache cannot be written., +      }, +      return true;, +    }, +    return false;, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +   * <h3>Non-blocking responses</h3>, +   *, +   * <p>Receivers do not need to block while waiting for the response body to, +   * download. Instead, they can get called back as data arrives. Use {@link, +   * Response.Body#ready} to check if bytes should be read immediately. While, +   * there is data ready, read it.]