[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +        return Arrays.asList(Protocol.SPDY_3.name.utf8());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +        return Arrays.asList(Protocol.SPDY_3.name.utf8());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            ByteString selectedProtocol = Platform.get().getNpnSelectedProtocol(sslSocket);, +            protocol = Protocol.find(selectedProtocol);, +            + " protocol is " + protocol.name.utf8());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +        return Arrays.asList(Protocol.SPDY_3.name.utf8());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            ByteString selectedProtocol = Platform.get().getNpnSelectedProtocol(sslSocket);, +            protocol = Protocol.find(selectedProtocol);, +            + " protocol is " + protocol.name.utf8());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.google.common.base.Function;, +import com.google.common.collect.Lists;, +import java.util.Arrays;, +    return Joiner.on(", ").join(Lists.transform(Arrays.asList(Protocol.values()),, +        new Function<Protocol, String>() {, +          @Override public String apply(Protocol protocol) {, +            return protocol.name.utf8();, +          }, +        }));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +        return Arrays.asList(Protocol.SPDY_3.name.utf8());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            ByteString selectedProtocol = Platform.get().getNpnSelectedProtocol(sslSocket);, +            protocol = Protocol.find(selectedProtocol);, +            + " protocol is " + protocol.name.utf8());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.google.common.base.Function;, +import com.google.common.collect.Lists;, +import java.util.Arrays;, +    return Joiner.on(", ").join(Lists.transform(Arrays.asList(Protocol.values()),, +        new Function<Protocol, String>() {, +          @Override public String apply(Protocol protocol) {, +            return protocol.name.utf8();, +          }, +        }));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java, +    assertEquals(Protocol.SPDY_3.name.utf8(), headers.get(OkHeaders.SELECTED_PROTOCOL));, +    assertEquals(Protocol.SPDY_3.name.utf8(), headers.value(0));, +    assertEquals(Protocol.SPDY_3.name.utf8(), headers.value(0));, +    assertEquals(Protocol.HTTP_2.name.utf8(), headers.value(0));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +        return Arrays.asList(Protocol.SPDY_3.name.utf8());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            ByteString selectedProtocol = Platform.get().getNpnSelectedProtocol(sslSocket);, +            protocol = Protocol.find(selectedProtocol);, +            + " protocol is " + protocol.name.utf8());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.google.common.base.Function;, +import com.google.common.collect.Lists;, +import java.util.Arrays;, +    return Joiner.on(", ").join(Lists.transform(Arrays.asList(Protocol.values()),, +        new Function<Protocol, String>() {, +          @Override public String apply(Protocol protocol) {, +            return protocol.name.utf8();, +          }, +        }));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java, +    assertEquals(Protocol.SPDY_3.name.utf8(), headers.get(OkHeaders.SELECTED_PROTOCOL));, +    assertEquals(Protocol.SPDY_3.name.utf8(), headers.value(0));, +    assertEquals(Protocol.SPDY_3.name.utf8(), headers.value(0));, +    assertEquals(Protocol.HTTP_2.name.utf8(), headers.value(0));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +    assertEquals(Arrays.asList(protocol.name.utf8()), protocolValues);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +        return Arrays.asList(Protocol.SPDY_3.name.utf8());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            ByteString selectedProtocol = Platform.get().getNpnSelectedProtocol(sslSocket);, +            protocol = Protocol.find(selectedProtocol);, +            + " protocol is " + protocol.name.utf8());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.google.common.base.Function;, +import com.google.common.collect.Lists;, +import java.util.Arrays;, +    return Joiner.on(", ").join(Lists.transform(Arrays.asList(Protocol.values()),, +        new Function<Protocol, String>() {, +          @Override public String apply(Protocol protocol) {, +            return protocol.name.utf8();, +          }, +        }));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java, +    assertEquals(Protocol.SPDY_3.name.utf8(), headers.get(OkHeaders.SELECTED_PROTOCOL));, +    assertEquals(Protocol.SPDY_3.name.utf8(), headers.value(0));, +    assertEquals(Protocol.SPDY_3.name.utf8(), headers.value(0));, +    assertEquals(Protocol.HTTP_2.name.utf8(), headers.value(0));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +    assertEquals(Arrays.asList(protocol.name.utf8()), protocolValues);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +      selectedProtocol = Protocol.find(maybeProtocol); // Throws IOE on unknown., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +        return Arrays.asList(Protocol.SPDY_3.name.utf8());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +            ByteString selectedProtocol = Platform.get().getNpnSelectedProtocol(sslSocket);, +            protocol = Protocol.find(selectedProtocol);, +            + " protocol is " + protocol.name.utf8());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java]