[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private InetAddress inetAddress;, +    if (inetAddress == null) throw new IllegalStateException("Call start() before getHostName()");, +    return inetAddress.getHostName();, +    if (inetAddress == null) {, +    return new Proxy(Proxy.Type.HTTP, new InetSocketAddress(inetAddress, getPort()));, +   * Starts the server., +    inetAddress = InetAddress.getByName("localhost");, +    serverSocket.setReuseAddress(port != 0); // Reuse the port if the port number was specified., +    serverSocket.bind(new InetSocketAddress(inetAddress, port), 50);, +    this.port = serverSocket.getLocalPort();, +    executor.execute(new NamedRunnable("MockWebServer %s", this.port) {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private InetAddress inetAddress;, +    if (inetAddress == null) throw new IllegalStateException("Call start() before getHostName()");, +    return inetAddress.getHostName();, +    if (inetAddress == null) {, +    return new Proxy(Proxy.Type.HTTP, new InetSocketAddress(inetAddress, getPort()));, +   * Starts the server., +    inetAddress = InetAddress.getByName("localhost");, +    serverSocket.setReuseAddress(port != 0); // Reuse the port if the port number was specified., +    serverSocket.bind(new InetSocketAddress(inetAddress, port), 50);, +    this.port = serverSocket.getLocalPort();, +    executor.execute(new NamedRunnable("MockWebServer %s", this.port) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheControlTest.java, +    String header = "no-cache, no-store, max-age=1, s-maxage=2, public, must-revalidate, ", +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private InetAddress inetAddress;, +    if (inetAddress == null) throw new IllegalStateException("Call start() before getHostName()");, +    return inetAddress.getHostName();, +    if (inetAddress == null) {, +    return new Proxy(Proxy.Type.HTTP, new InetSocketAddress(inetAddress, getPort()));, +   * Starts the server., +    inetAddress = InetAddress.getByName("localhost");, +    serverSocket.setReuseAddress(port != 0); // Reuse the port if the port number was specified., +    serverSocket.bind(new InetSocketAddress(inetAddress, port), 50);, +    this.port = serverSocket.getLocalPort();, +    executor.execute(new NamedRunnable("MockWebServer %s", this.port) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheControlTest.java, +    String header = "no-cache, no-store, max-age=1, s-maxage=2, public, must-revalidate, ", +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +  /** Make sure interceptors can interact with the OkHttp client. */, +  @Test public void interceptorMakesAnUnrelatedRequest() throws Exception {, +    server.enqueue(new MockResponse().setBody("a")); // Fetched by interceptor., +    server.enqueue(new MockResponse().setBody("b")); // Fetched directly., +, +    client.interceptors().add(new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        if (chain.request().url().getPath().equals("/b")) {, +          Request requestA = new Request.Builder(), +              .url(server.getUrl("/a")), +              .build();, +          Response responseA = client.newCall(requestA).execute();, +          assertEquals("a", responseA.body().string());, +        }, +, +        return chain.proceed(chain.request());, +      }, +    });, +, +    Request requestB = new Request.Builder(), +        .url(server.getUrl("/b")), +        .build();, +    Response responseB = client.newCall(requestB).execute();, +    assertEquals("b", responseB.body().string());, +  }, +, +  /** Make sure interceptors can interact with the OkHttp client asynchronously. */, +  @Test public void interceptorMakesAnUnrelatedAsyncRequest() throws Exception {, +    server.enqueue(new MockResponse().setBody("a")); // Fetched by interceptor., +    server.enqueue(new MockResponse().setBody("b")); // Fetched directly., +, +    client.interceptors().add(new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        if (chain.request().url().getPath().equals("/b")) {, +          Request requestA = new Request.Builder(), +              .url(server.getUrl("/a")), +              .build();, +, +          try {, +            RecordingCallback callbackA = new RecordingCallback();, +            client.newCall(requestA).enqueue(callbackA);, +            callbackA.await(requestA.url()).assertBody("a");, +          } catch (Exception e) {, +            throw new RuntimeException(e);, +          }, +        }, +, +        return chain.proceed(chain.request());, +      }, +    });, +, +    Request requestB = new Request.Builder(), +        .url(server.getUrl("/b")), +        .build();, +    RecordingCallback callbackB = new RecordingCallback();, +    client.newCall(requestB).enqueue(callbackB);, +    callbackB.await(requestB.url()).assertBody("b");, +  }, +]