[+++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +  @Test public void put() {, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +  @Test public void put() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +      @Override public long contentLength() {, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +  @Test public void put() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +      @Override public long contentLength() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/MultipartBuilderTest.java, +    assertEquals(53, requestBody.contentLength());, +    assertEquals(buffer.size(), requestBody.contentLength());, +    assertEquals(112, requestBody.contentLength());, +    assertEquals(buffer.size(), requestBody.contentLength());, +        + "Content-Length: 337\r\n", +    assertEquals(568, requestBody.contentLength());, +    assertEquals(buffer.size(), requestBody.contentLength());, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +  @Test public void put() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +      @Override public long contentLength() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/MultipartBuilderTest.java, +    assertEquals(53, requestBody.contentLength());, +    assertEquals(buffer.size(), requestBody.contentLength());, +    assertEquals(112, requestBody.contentLength());, +    assertEquals(buffer.size(), requestBody.contentLength());, +        + "Content-Length: 337\r\n", +    assertEquals(568, requestBody.contentLength());, +    assertEquals(buffer.size(), requestBody.contentLength());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +  @Test public void crudVerbs() {, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +  @Test public void put() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +      @Override public long contentLength() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/MultipartBuilderTest.java, +    assertEquals(53, requestBody.contentLength());, +    assertEquals(buffer.size(), requestBody.contentLength());, +    assertEquals(112, requestBody.contentLength());, +    assertEquals(buffer.size(), requestBody.contentLength());, +        + "Content-Length: 337\r\n", +    assertEquals(568, requestBody.contentLength());, +    assertEquals(buffer.size(), requestBody.contentLength());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +  @Test public void crudVerbs() {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java, +import java.util.ArrayDeque;, +import java.util.Deque;, +import java.util.concurrent.Executor;, +import org.junit.rules.Timeout;, +  @Rule public final TemporaryFolder tempDir = new TemporaryFolder();, +  @Rule public final Timeout timeout = new Timeout(30 * 1000);, +, +  private final TestExecutor executor = new TestExecutor();, +  private DiskLruCache cache;, +  private final Deque<DiskLruCache> toClose = new ArrayDeque<>();, +, +  private void createNewCache() throws IOException {, +    createNewCacheWithSize(Integer.MAX_VALUE);, +  }, +, +  private void createNewCacheWithSize(int maxSize) throws IOException {, +    cache = new DiskLruCache(cacheDir, appVersion, 2, maxSize, executor);, +    cache.initialize();, +    toClose.add(cache);, +  }, +    cacheDir = tempDir.getRoot();, +    createNewCache();, +    while (!toClose.isEmpty()) {, +      toClose.pop().close();, +    }, +    createNewCache();, +    createNewCache();, +    DiskLruCache.Snapshot snapshot = cache.get("k1");, +    createNewCache();, +    createNewCache();, +    createNewCache();, +    createNewCache();, +    createNewCache();, +    createNewCache();, +    createNewCache();, +    createNewCache();, +, +    createNewCache();, +    createNewCache();, +    createNewCacheWithSize(10);, +    createNewCacheWithSize(20);, +    assertEquals(1, executor.jobs.size());, +    createNewCacheWithSize(10);, +    createNewCacheWithSize(10);, +    createNewCacheWithSize(10);, +    createNewCacheWithSize(10);, +    createNewCacheWithSize(10);, +    createNewCacheWithSize(10);, +    while (executor.jobs.isEmpty()) {, +    while (executor.jobs.isEmpty()) {, +    executor.jobs.removeFirst().run();, +    while (executor.jobs.isEmpty()) {, +      createNewCache();]