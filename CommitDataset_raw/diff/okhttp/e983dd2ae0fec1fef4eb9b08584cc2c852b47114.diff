[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/HeldCertificate.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.mockwebserver;, +, +import java.io.IOException;, +import java.math.BigInteger;, +import java.security.GeneralSecurityException;, +import java.security.KeyPair;, +import java.security.KeyPairGenerator;, +import java.security.PrivateKey;, +import java.security.PublicKey;, +import java.security.SecureRandom;, +import java.security.Security;, +import java.security.cert.CertificateEncodingException;, +import java.security.cert.X509Certificate;, +import java.util.ArrayList;, +import java.util.Date;, +import java.util.List;, +import java.util.UUID;, +import java.util.concurrent.TimeUnit;, +import javax.security.auth.x500.X500Principal;, +import okio.ByteString;, +import org.bouncycastle.asn1.ASN1Encodable;, +import org.bouncycastle.asn1.DERSequence;, +import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;, +import org.bouncycastle.asn1.x509.BasicConstraints;, +import org.bouncycastle.asn1.x509.GeneralName;, +import org.bouncycastle.asn1.x509.X509Extensions;, +import org.bouncycastle.jce.provider.BouncyCastleProvider;, +import org.bouncycastle.x509.X509V3CertificateGenerator;, +, +import static okhttp3.internal.Util.verifyAsIpAddress;, +, +/**, + * A certificate and its private key., + *, + * <p>Typically the certificate and private key combination would be used by MockWebServer (or, + * another HTTPS server) to identify itself in the TLS handshake. The certificate alone can be used, + * by OkHttp (or another HTTPS client) to verify the identity of that server., + *, + * <p>The trust challenge is reversed for mutual auth. In this case the client has both the private, + * key and the certificate, and the server has a certificate only., + *, + * <p>In addition to the TLS handshake, a held certificate can be used to sign a different, + * certificate. In such cases the held certificate represents a certificate authority., + *, + * <p>This class is intended to be used for testing. It uses small keys (1024 bit RSA) because they, + * are quick to generate., + */, +public final class HeldCertificate {, +  private final X509Certificate certificate;, +  private final KeyPair keyPair;, +, +  private HeldCertificate(X509Certificate certificate, KeyPair keyPair) {, +    this.certificate = certificate;, +    this.keyPair = keyPair;, +  }, +, +  public X509Certificate certificate() {, +    return certificate;, +  }, +, +  public KeyPair keyPair() {, +    return keyPair;, +  }, +, +  /**, +   * Returns the certificate encoded in <a href="https://tools.ietf.org/html/rfc7468">PEM, +   * format</a>., +   */, +  public String certificatePem() {, +    try {, +      StringBuilder result = new StringBuilder();, +      result.append("-----BEGIN CERTIFICATE-----\n");, +      encodeBase64Lines(result, ByteString.of(certificate.getEncoded()));, +      result.append("-----END CERTIFICATE-----\n");, +      return result.toString();, +    } catch (CertificateEncodingException e) {, +      throw new AssertionError(e);, +    }, +  }, +, +  /**, +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc8017">PKCS, +   * #1</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +   */]