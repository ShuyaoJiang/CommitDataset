[+++ b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java, +import com.squareup.okhttp.HttpUrl;, +        "--> " + request.method() + ' ' + requestPath(request.httpUrl()) + ' ' + protocol(protocol);, +        logger.log(headers.name(i) + ": " + headers.value(i));, +, +  private static String requestPath(HttpUrl url) {, +    String path = url.encodedPath();, +    String query = url.encodedQuery();, +    return query != null ? (path + '?' + query) : path;, +  }, +++ b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java, +import com.squareup.okhttp.HttpUrl;, +        "--> " + request.method() + ' ' + requestPath(request.httpUrl()) + ' ' + protocol(protocol);, +        logger.log(headers.name(i) + ": " + headers.value(i));, +, +  private static String requestPath(HttpUrl url) {, +    String path = url.encodedPath();, +    String query = url.encodedQuery();, +    return query != null ? (path + '?' + query) : path;, +  }, +++ b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java, +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("--> POST / HTTP/1.1 (3-byte body)"), +        .assertLogEqual("--> POST / HTTP/1.1 (3-byte body)"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> POST / HTTP/1.1"), +        // TODO force content-type and content-length to show here, +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> POST / HTTP/1.1"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> POST / HTTP/1.1"), +        // TODO force content-type and content-length to show here, +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> POST / HTTP/1.1"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +    return new Request.Builder().url(server.url("/"));, +++ b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java, +import com.squareup.okhttp.HttpUrl;, +        "--> " + request.method() + ' ' + requestPath(request.httpUrl()) + ' ' + protocol(protocol);, +        logger.log(headers.name(i) + ": " + headers.value(i));, +, +  private static String requestPath(HttpUrl url) {, +    String path = url.encodedPath();, +    String query = url.encodedQuery();, +    return query != null ? (path + '?' + query) : path;, +  }, +++ b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java, +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("--> POST / HTTP/1.1 (3-byte body)"), +        .assertLogEqual("--> POST / HTTP/1.1 (3-byte body)"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> POST / HTTP/1.1"), +        // TODO force content-type and content-length to show here, +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> POST / HTTP/1.1"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1"), +        .assertLogEqual("--> GET / HTTP/1.1"), +        .assertLogEqual("OkHttp-Selected-Protocol: http/1.1")]