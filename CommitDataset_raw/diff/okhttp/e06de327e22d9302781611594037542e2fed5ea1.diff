[+++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import org.junit.Before;, +  private final MockWebServer server = new MockWebServer();, +, +  @Before public void setUp() throws Exception {, +    server.start();, +  }, +    server.shutdown();, +, +  @Test public void nullDefaultProxySelector() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +, +    ProxySelector.setDefault(null);, +, +    OkHttpClient client = defaultClient().newBuilder(), +        .build();, +, +    Request request = new Request.Builder().url(server.url("/")).build();, +    Response response = client.newCall(request).execute();, +    assertEquals("abc", response.body().string());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import org.junit.Before;, +  private final MockWebServer server = new MockWebServer();, +, +  @Before public void setUp() throws Exception {, +    server.start();, +  }, +    server.shutdown();, +, +  @Test public void nullDefaultProxySelector() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +, +    ProxySelector.setDefault(null);, +, +    OkHttpClient client = defaultClient().newBuilder(), +        .build();, +, +    Request request = new Request.Builder().url(server.url("/")).build();, +    Response response = client.newCall(request).execute();, +    assertEquals("abc", response.body().string());, +  }, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.proxy.NullProxySelector;, +      if (proxySelector == null) {, +        proxySelector = new NullProxySelector();, +      }, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import org.junit.Before;, +  private final MockWebServer server = new MockWebServer();, +, +  @Before public void setUp() throws Exception {, +    server.start();, +  }, +    server.shutdown();, +, +  @Test public void nullDefaultProxySelector() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +, +    ProxySelector.setDefault(null);, +, +    OkHttpClient client = defaultClient().newBuilder(), +        .build();, +, +    Request request = new Request.Builder().url(server.url("/")).build();, +    Response response = client.newCall(request).execute();, +    assertEquals("abc", response.body().string());, +  }, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.proxy.NullProxySelector;, +      if (proxySelector == null) {, +        proxySelector = new NullProxySelector();, +      }, +++ b/okhttp/src/main/java/okhttp3/internal/proxy/NullProxySelector.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.proxy;, +, +import java.io.IOException;, +import java.net.Proxy;, +import java.net.ProxySelector;]