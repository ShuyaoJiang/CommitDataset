[+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java, +    ByteString data = ByteString.decodeHex("", +        + "60b420bb3851d9d47acb933dbe70399bf6c92da33af01d4fb7", +        + "70e98c0325f41d3ebaf8986da712c82bcd4d554bf0b54023c2");, +, +    sink.write(data).flush();, +    assertData(data);, +    sink.write(data).flush();, +    assertData(data);, +    ByteString data = ByteString.decodeHex("", +        + "60b420bb3851d9d47acb933dbe70399bf6c92da33af01d4fb7", +        + "70e98c0325f41d3ebaf8986da712c82bcd4d554bf0b54023c2");, +    sink.write(data).flush();, +    assertData("60b420bb");, +    assertData("", +        + "0000000058e5f96f1a7fb386dec41920967d0d185a443df4d7", +        + "c4c9376391d4a65e0ed8230d1332734b796dee2b4495fb4376");, +    sink.write(data).close();, +    assertData("3851d9d4");, +    assertData("", +        + "58e5f96f00000000429a4ae98621e04fce98f47702a1c49b8f", +        + "2130583b742dc906eb214c55f6cb1c139c948173a16c941b93");, +    assertData(ByteString.decodeHex(hex));, +  }, +, +  private void assertData(ByteString expected) throws EOFException {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java, +    ByteString data = ByteString.decodeHex("", +        + "60b420bb3851d9d47acb933dbe70399bf6c92da33af01d4fb7", +        + "70e98c0325f41d3ebaf8986da712c82bcd4d554bf0b54023c2");, +, +    sink.write(data).flush();, +    assertData(data);, +    sink.write(data).flush();, +    assertData(data);, +    ByteString data = ByteString.decodeHex("", +        + "60b420bb3851d9d47acb933dbe70399bf6c92da33af01d4fb7", +        + "70e98c0325f41d3ebaf8986da712c82bcd4d554bf0b54023c2");, +    sink.write(data).flush();, +    assertData("60b420bb");, +    assertData("", +        + "0000000058e5f96f1a7fb386dec41920967d0d185a443df4d7", +        + "c4c9376391d4a65e0ed8230d1332734b796dee2b4495fb4376");, +    sink.write(data).close();, +    assertData("3851d9d4");, +    assertData("", +        + "58e5f96f00000000429a4ae98621e04fce98f47702a1c49b8f", +        + "2130583b742dc906eb214c55f6cb1c139c948173a16c941b93");, +    assertData(ByteString.decodeHex(hex));, +  }, +, +  private void assertData(ByteString expected) throws EOFException {, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java, +    ByteString data = ByteString.decodeHex("", +        + "60b420bb3851d9d47acb933dbe70399bf6c92da33af01d4fb7", +        + "70e98c0325f41d3ebaf8986da712c82bcd4d554bf0b54023c2");, +, +    sink.write(data).flush();, +    assertData(data);, +    sink.write(data).flush();, +    assertData(data);, +    ByteString data = ByteString.decodeHex("", +        + "60b420bb3851d9d47acb933dbe70399bf6c92da33af01d4fb7", +        + "70e98c0325f41d3ebaf8986da712c82bcd4d554bf0b54023c2");, +    sink.write(data).flush();, +    assertData("60b420bb");, +    assertData("", +        + "0000000058e5f96f1a7fb386dec41920967d0d185a443df4d7", +        + "c4c9376391d4a65e0ed8230d1332734b796dee2b4495fb4376");, +    sink.write(data).close();, +    assertData("3851d9d4");, +    assertData("", +        + "58e5f96f00000000429a4ae98621e04fce98f47702a1c49b8f", +        + "2130583b742dc906eb214c55f6cb1c139c948173a16c941b93");, +    assertData(ByteString.decodeHex(hex));, +  }, +, +  private void assertData(ByteString expected) throws EOFException {, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java, +++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketReader.java, +  private final Buffer controlFrameBuffer = new Buffer();, +  private final Buffer messageFrameBuffer = new Buffer();, +, +  private final byte[] maskKey;, +  private final byte[] maskBuffer;, +, +    // Masks are only a concern for server writers., +    maskKey = isClient ? null : new byte[4];, +    maskBuffer = isClient ? null : new byte[8192];, +    boolean isMasked = (b1 & B1_FLAG_MASK) != 0;, +    if (frameLength > 0L) {, +        source.readFully(controlFrameBuffer, frameLength);, +        for (long frameBytesRead = 0L; frameBytesRead < frameLength; ) {, +          controlFrameBuffer.write(maskBuffer, 0, read);, +        frameCallback.onReadPing(controlFrameBuffer.readByteString());, +        frameCallback.onReadPong(controlFrameBuffer.readByteString());, +        long bufferSize = controlFrameBuffer.size();, +          code = controlFrameBuffer.readShort();, +          reason = controlFrameBuffer.readUtf8();]