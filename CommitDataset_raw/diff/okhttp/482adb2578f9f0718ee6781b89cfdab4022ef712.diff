[+++ /dev/null, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.kt, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3, +, +import okhttp3.Protocol.HTTP_1_1, +import okhttp3.Protocol.HTTP_2, +import okhttp3.internal.Internal, +import okhttp3.internal.Util, +import okhttp3.internal.Util.checkDuration, +import okhttp3.internal.cache.InternalCache, +import okhttp3.internal.connection.Exchange, +import okhttp3.internal.platform.Platform, +import okhttp3.internal.proxy.NullProxySelector, +import okhttp3.internal.tls.CertificateChainCleaner, +import okhttp3.internal.tls.OkHostnameVerifier, +import okhttp3.internal.ws.RealWebSocket, +import okio.Sink, +import okio.Source, +import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement, +import java.net.Proxy, +import java.net.ProxySelector, +import java.net.Socket, +import java.security.GeneralSecurityException, +import java.time.Duration, +import java.util.Collections, +import java.util.Random, +import java.util.concurrent.ExecutorService, +import java.util.concurrent.TimeUnit, +import javax.net.SocketFactory, +import javax.net.ssl.HostnameVerifier, +import javax.net.ssl.SSLSocketFactory, +import javax.net.ssl.TrustManager, +import javax.net.ssl.X509TrustManager, +import kotlin.DeprecationLevel.ERROR, +, +/**, + * Factory for [calls][Call], which can be used to send HTTP requests and read their, + * responses., + *, + * ## OkHttpClients should be shared, + *, + * OkHttp performs best when you create a single `OkHttpClient` instance and reuse it for, + * all of your HTTP calls. This is because each client holds its own connection pool and thread, + * pools. Reusing connections and threads reduces latency and saves memory. Conversely, creating a, + * client for each request wastes resources on idle pools., + *, + * Use `new OkHttpClient()` to create a shared instance with the default settings:, + * ```, + * // The singleton HTTP client., + * public final OkHttpClient client = new OkHttpClient();, + * ```, + *, + * Or use `new OkHttpClient.Builder()` to create a shared instance with custom settings:, + * ```, + * // The singleton HTTP client., + * public final OkHttpClient client = new OkHttpClient.Builder(), + *     .addInterceptor(new HttpLoggingInterceptor()), + *     .cache(new Cache(cacheDir, cacheSize)), + *     .build();, + * ```, + *, + * ## Customize your client with newBuilder(), + *, + * You can customize a shared OkHttpClient instance with [newBuilder]. This builds a, + * client that shares the same connection pool, thread pools, and configuration. Use the builder, + * methods to configure the derived client for a specific purpose., + *, + * This example shows a call with a short 500 millisecond timeout:, + * ```, + * OkHttpClient eagerClient = client.newBuilder(), + *     .readTimeout(500, TimeUnit.MILLISECONDS), + *     .build();, + * Response response = eagerClient.newCall(request).execute();, + * ```, + *, + * ## Shutdown isn't necessary, + *, + * The threads and connections that are held will be released automatically if they remain idle., + * But if you are writing a application that needs to aggressively release unused resources you may, + * do so., + *, + * Shutdown the dispatcher's executor service with [shutdown()][ExecutorService.shutdown]., + * This will also cause future calls to the client to be rejected., + * ```]