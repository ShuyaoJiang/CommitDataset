[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java, +    outFrames.add(new OutFrame(frameCount++, bytesOut.size(), false));, +    outFrames.add(new OutFrame(frameCount++, bytesOut.size(), false));, +   * Shortens the last frame from its original length to {@code length}. This, +   * will cause the peer to close the socket as soon as this frame has been, +   * written; otherwise the peer stays open until explicitly closed., +  public FrameWriter truncateLastFrame(int length) {, +    OutFrame lastFrame = outFrames.remove(outFrames.size() - 1);, +    if (length >= bytesOut.size() - lastFrame.start) throw new IllegalArgumentException();, +, +    // Move everything from bytesOut into a new buffer., +    Buffer fullBuffer = new Buffer();, +    bytesOut.read(fullBuffer, bytesOut.size());, +, +    // Copy back all but what we're truncating., +    fullBuffer.read(bytesOut, lastFrame.start + length);, +, +    outFrames.add(new OutFrame(lastFrame.sequence, lastFrame.start, true));, +        boolean truncated;, +          truncated = false;, +          truncated = nextOutFrame.truncated;, +        // Write a frame., +        int length = (int) (end - start);, +, +        // If the last frame was truncated, immediately close the connection., +        if (truncated) {, +          socket.close();, +        }, +    private final boolean truncated;, +    private OutFrame(int sequence, long start, boolean truncated) {, +      this.truncated = truncated;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java, +    outFrames.add(new OutFrame(frameCount++, bytesOut.size(), false));, +    outFrames.add(new OutFrame(frameCount++, bytesOut.size(), false));, +   * Shortens the last frame from its original length to {@code length}. This, +   * will cause the peer to close the socket as soon as this frame has been, +   * written; otherwise the peer stays open until explicitly closed., +  public FrameWriter truncateLastFrame(int length) {, +    OutFrame lastFrame = outFrames.remove(outFrames.size() - 1);, +    if (length >= bytesOut.size() - lastFrame.start) throw new IllegalArgumentException();, +, +    // Move everything from bytesOut into a new buffer., +    Buffer fullBuffer = new Buffer();, +    bytesOut.read(fullBuffer, bytesOut.size());, +, +    // Copy back all but what we're truncating., +    fullBuffer.read(bytesOut, lastFrame.start + length);, +, +    outFrames.add(new OutFrame(lastFrame.sequence, lastFrame.start, true));, +        boolean truncated;, +          truncated = false;, +          truncated = nextOutFrame.truncated;, +        // Write a frame., +        int length = (int) (end - start);, +, +        // If the last frame was truncated, immediately close the connection., +        if (truncated) {, +          socket.close();, +        }, +    private final boolean truncated;, +    private OutFrame(int sequence, long start, boolean truncated) {, +      this.truncated = truncated;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Spdy3ConnectionTest.java, +    peer.sendFrame().data(false, 1, data(1024), 1024);, +    peer.truncateLastFrame(8 + 100);]