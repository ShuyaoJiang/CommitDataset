[+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +      streamAllocation.acquire(c1, true);, +      leak.acquire(connection, true);, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +      streamAllocation.acquire(c1, true);, +      leak.acquire(connection, true);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, +        "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, +        "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, +    List<String> expectedEvents = asList("CallStart", "DnsStart", "DnsEnd", "ConnectStart",, +        "SecureConnectStart", "SecureConnectEnd", "ConnectEnd", "ConnectionAcquired",, +      assertFalse("Found RequestHeadersEnd",, +          listener.recordedEventTypes().contains("RequestHeadersEnd"));, +      assertFalse("Found ResponseHeadersEnd",, +          listener.recordedEventTypes().contains("ResponseHeadersEnd"));, +      assertFalse("Found ResponseBodyEnd",, +          listener.recordedEventTypes().contains("ResponseBodyEnd"));, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +      streamAllocation.acquire(c1, true);, +      leak.acquire(connection, true);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, +        "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, +        "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, +    List<String> expectedEvents = asList("CallStart", "DnsStart", "DnsEnd", "ConnectStart",, +        "SecureConnectStart", "SecureConnectEnd", "ConnectEnd", "ConnectionAcquired",, +      assertFalse("Found RequestHeadersEnd",, +          listener.recordedEventTypes().contains("RequestHeadersEnd"));, +      assertFalse("Found ResponseHeadersEnd",, +          listener.recordedEventTypes().contains("ResponseHeadersEnd"));, +      assertFalse("Found ResponseBodyEnd",, +          listener.recordedEventTypes().contains("ResponseBodyEnd"));, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +        streamAllocation.acquire(connection, true);, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java, +      streamAllocation.acquire(c1, true);, +      leak.acquire(connection, true);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, +        "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, +        "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, +    List<String> expectedEvents = asList("CallStart", "DnsStart", "DnsEnd", "ConnectStart",, +        "SecureConnectStart", "SecureConnectEnd", "ConnectEnd", "ConnectionAcquired",, +      assertFalse("Found RequestHeadersEnd",, +          listener.recordedEventTypes().contains("RequestHeadersEnd"));, +      assertFalse("Found ResponseHeadersEnd",, +          listener.recordedEventTypes().contains("ResponseHeadersEnd"));, +      assertFalse("Found ResponseBodyEnd",, +          listener.recordedEventTypes().contains("ResponseBodyEnd"));, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +        streamAllocation.acquire(connection, true);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +  private boolean reportedAcquired;, +      if (!reportedAcquired) {, +        // If the connection was never reported acquired, don't report it as released!, +        releasedConnection = null;, +      }, +        acquire(result, false);, +      eventListener.connectionAcquired(call, result);, +      reportedAcquired = true;, +, +    eventListener.connectionAcquired(call, result);, +      if (connection != null || !reportedAcquired) releasedConnection = null;, +  public void acquire(RealConnection connection, boolean reportedAcquired) {, +    this.reportedAcquired = reportedAcquired;]