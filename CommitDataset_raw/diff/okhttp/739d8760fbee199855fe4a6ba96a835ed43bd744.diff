[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SettingsTest.java, +import static com.squareup.okhttp.internal.spdy.Settings.DEFAULT_INITIAL_WINDOW_SIZE;, +    assertEquals(DEFAULT_INITIAL_WINDOW_SIZE,, +        settings.getInitialWindowSize(DEFAULT_INITIAL_WINDOW_SIZE));, +    assertEquals(108, settings.getInitialWindowSize(DEFAULT_INITIAL_WINDOW_SIZE));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SettingsTest.java, +import static com.squareup.okhttp.internal.spdy.Settings.DEFAULT_INITIAL_WINDOW_SIZE;, +    assertEquals(DEFAULT_INITIAL_WINDOW_SIZE,, +        settings.getInitialWindowSize(DEFAULT_INITIAL_WINDOW_SIZE));, +    assertEquals(108, settings.getInitialWindowSize(DEFAULT_INITIAL_WINDOW_SIZE));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +import static com.squareup.okhttp.internal.spdy.Settings.DEFAULT_INITIAL_WINDOW_SIZE;, +    assertEquals(3368, connection.peerSettings.getInitialWindowSize(DEFAULT_INITIAL_WINDOW_SIZE));, +  @Test public void clearSettingsBeforeMerge() throws Exception {, +    // write the mocking script, +    Settings settings1 = new Settings();, +    settings1.set(Settings.UPLOAD_BANDWIDTH, PERSIST_VALUE, 100);, +    settings1.set(Settings.DOWNLOAD_BANDWIDTH, PERSIST_VALUE, 200);, +    settings1.set(Settings.DOWNLOAD_RETRANS_RATE, 0, 300);, +    peer.sendFrame().settings(settings1);, +    peer.sendFrame().ping(false, 2, 0);, +    peer.acceptFrame();, +    peer.play();, +, +    // play it back, +    SpdyConnection connection = connection(peer, SPDY3);, +, +    peer.takeFrame(); // Guarantees that the Settings frame has been processed., +, +    // fake a settings frame with clear flag set., +    Settings settings2 = new Settings();, +    settings2.set(Settings.MAX_CONCURRENT_STREAMS, PERSIST_VALUE, 600);, +    connection.readerRunnable.settings(true, settings2);, +, +    synchronized (connection) {, +      assertEquals(-1, connection.peerSettings.getUploadBandwidth(-1));, +      assertEquals(-1, connection.peerSettings.getDownloadBandwidth(-1));, +      assertEquals(-1, connection.peerSettings.getDownloadRetransRate(-1));, +      assertEquals(600, connection.peerSettings.getMaxConcurrentStreams(-1));, +    }, +  }, +, +    int windowUpdateThreshold = DEFAULT_INITIAL_WINDOW_SIZE / 2;, +    int framesThatFillWindow = roundUp(DEFAULT_INITIAL_WINDOW_SIZE, HTTP_20_DRAFT_09.maxFrameSize());, +    out.write(new byte[DEFAULT_INITIAL_WINDOW_SIZE]);, +    int framesThatFillWindow = roundUp(DEFAULT_INITIAL_WINDOW_SIZE, HTTP_20_DRAFT_09.maxFrameSize());, +    out.write(new byte[DEFAULT_INITIAL_WINDOW_SIZE]);, +    initial.set(Settings.INITIAL_WINDOW_SIZE, PERSIST_VALUE, DEFAULT_INITIAL_WINDOW_SIZE + 1);, +    next.set(Settings.INITIAL_WINDOW_SIZE, PERSIST_VALUE, DEFAULT_INITIAL_WINDOW_SIZE + 2);, +    int framesThatFillWindow = roundUp(DEFAULT_INITIAL_WINDOW_SIZE, SPDY3.maxFrameSize());, +    out1.write(new byte[DEFAULT_INITIAL_WINDOW_SIZE]);, +    assertEquals(DEFAULT_INITIAL_WINDOW_SIZE - 3, connection.getStream(3).bytesLeftInWriteWindow);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SettingsTest.java, +import static com.squareup.okhttp.internal.spdy.Settings.DEFAULT_INITIAL_WINDOW_SIZE;, +    assertEquals(DEFAULT_INITIAL_WINDOW_SIZE,, +        settings.getInitialWindowSize(DEFAULT_INITIAL_WINDOW_SIZE));, +    assertEquals(108, settings.getInitialWindowSize(DEFAULT_INITIAL_WINDOW_SIZE));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +import static com.squareup.okhttp.internal.spdy.Settings.DEFAULT_INITIAL_WINDOW_SIZE;, +    assertEquals(3368, connection.peerSettings.getInitialWindowSize(DEFAULT_INITIAL_WINDOW_SIZE));, +  @Test public void clearSettingsBeforeMerge() throws Exception {, +    // write the mocking script, +    Settings settings1 = new Settings();, +    settings1.set(Settings.UPLOAD_BANDWIDTH, PERSIST_VALUE, 100);, +    settings1.set(Settings.DOWNLOAD_BANDWIDTH, PERSIST_VALUE, 200);, +    settings1.set(Settings.DOWNLOAD_RETRANS_RATE, 0, 300);, +    peer.sendFrame().settings(settings1);, +    peer.sendFrame().ping(false, 2, 0);, +    peer.acceptFrame();, +    peer.play();, +, +    // play it back, +    SpdyConnection connection = connection(peer, SPDY3);, +, +    peer.takeFrame(); // Guarantees that the Settings frame has been processed., +, +    // fake a settings frame with clear flag set., +    Settings settings2 = new Settings();, +    settings2.set(Settings.MAX_CONCURRENT_STREAMS, PERSIST_VALUE, 600);, +    connection.readerRunnable.settings(true, settings2);, +, +    synchronized (connection) {, +      assertEquals(-1, connection.peerSettings.getUploadBandwidth(-1));, +      assertEquals(-1, connection.peerSettings.getDownloadBandwidth(-1));, +      assertEquals(-1, connection.peerSettings.getDownloadRetransRate(-1));, +      assertEquals(600, connection.peerSettings.getMaxConcurrentStreams(-1));, +    }, +  }, +, +    int windowUpdateThreshold = DEFAULT_INITIAL_WINDOW_SIZE / 2;, +    int framesThatFillWindow = roundUp(DEFAULT_INITIAL_WINDOW_SIZE, HTTP_20_DRAFT_09.maxFrameSize());, +    out.write(new byte[DEFAULT_INITIAL_WINDOW_SIZE]);, +    int framesThatFillWindow = roundUp(DEFAULT_INITIAL_WINDOW_SIZE, HTTP_20_DRAFT_09.maxFrameSize());, +    out.write(new byte[DEFAULT_INITIAL_WINDOW_SIZE]);, +    initial.set(Settings.INITIAL_WINDOW_SIZE, PERSIST_VALUE, DEFAULT_INITIAL_WINDOW_SIZE + 1);, +    next.set(Settings.INITIAL_WINDOW_SIZE, PERSIST_VALUE, DEFAULT_INITIAL_WINDOW_SIZE + 2);, +    int framesThatFillWindow = roundUp(DEFAULT_INITIAL_WINDOW_SIZE, SPDY3.maxFrameSize());, +    out1.write(new byte[DEFAULT_INITIAL_WINDOW_SIZE]);, +    assertEquals(DEFAULT_INITIAL_WINDOW_SIZE - 3, connection.getStream(3).bytesLeftInWriteWindow);, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java]