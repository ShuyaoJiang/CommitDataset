[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer extends FramedConnection.Listener {, +            .listener(this), +  @Override public void onStream(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer extends FramedConnection.Listener {, +            .listener(this), +  @Override public void onStream(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          FramedSocketHandler framedSocketListener = new FramedSocketHandler(socket, protocol);, +              .listener(framedSocketListener), +  private class FramedSocketHandler extends FramedConnection.Listener {, +    @Override public void onStream(FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer extends FramedConnection.Listener {, +            .listener(this), +  @Override public void onStream(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          FramedSocketHandler framedSocketListener = new FramedSocketHandler(socket, protocol);, +              .listener(framedSocketListener), +  private class FramedSocketHandler extends FramedConnection.Listener {, +    @Override public void onStream(FramedStream stream) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java, +      if (!logBody || !hasRequestBody) {, +        logger.log("--> END " + request.method());, +      } else if (bodyEncoded(request.headers())) {, +        logger.log("--> END " + request.method() + " (encoded body omitted)");, +      } else {, +        logger.log("--> END " + request.method(), +            + " (" + requestBody.contentLength() + "-byte body)");, +      if (!logBody || !HttpEngine.hasBody(response)) {, +        logger.log("<-- END HTTP");, +      } else if (bodyEncoded(response.headers())) {, +        logger.log("<-- END HTTP (encoded body omitted)");, +      } else {, +        logger.log("<-- END HTTP (" + buffer.size() + "-byte body)");, +  private boolean bodyEncoded(Headers headers) {, +    String contentEncoding = headers.get("Content-Encoding");, +    return contentEncoding != null && !contentEncoding.equalsIgnoreCase("identity");, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java, +public final class FramedServer extends FramedConnection.Listener {, +            .listener(this), +  @Override public void onStream(final FramedStream stream) throws IOException {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          FramedSocketHandler framedSocketListener = new FramedSocketHandler(socket, protocol);, +              .listener(framedSocketListener), +  private class FramedSocketHandler extends FramedConnection.Listener {, +    @Override public void onStream(FramedStream stream) throws IOException {, +++ b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java, +      if (!logBody || !hasRequestBody) {, +        logger.log("--> END " + request.method());, +      } else if (bodyEncoded(request.headers())) {, +        logger.log("--> END " + request.method() + " (encoded body omitted)");, +      } else {, +        logger.log("--> END " + request.method(), +            + " (" + requestBody.contentLength() + "-byte body)");, +      if (!logBody || !HttpEngine.hasBody(response)) {, +        logger.log("<-- END HTTP");, +      } else if (bodyEncoded(response.headers())) {, +        logger.log("<-- END HTTP (encoded body omitted)");, +      } else {, +        logger.log("<-- END HTTP (" + buffer.size() + "-byte body)");, +  private boolean bodyEncoded(Headers headers) {, +    String contentEncoding = headers.get("Content-Encoding");, +    return contentEncoding != null && !contentEncoding.equalsIgnoreCase("identity");, +  }, +, +++ b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java, +import com.squareup.okhttp.Response;, +import okio.Buffer;, +import okio.ByteString;, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +    Request request = request().post(RequestBody.create(PLAIN, "Hi?")).build();, +    Response response = client.newCall(request).execute();, +    response.body().close();, +    Request request = request().post(RequestBody.create(null, "Hi?")).build();, +    Response response = client.newCall(request).execute();, +    response.body().close();, +    Response response = client.newCall(request().post(body).build()).execute();, +    response.body().close();, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +    Request request = request().post(RequestBody.create(PLAIN, "Hi?")).build();, +    Response response = client.newCall(request).execute();, +    response.body().close();, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +    Response response = client.newCall(request().build()).execute();, +    response.body().close();, +  @Test public void bodyResponseNotIdentityEncoded() throws IOException {, +    setLevel(Level.BODY);]