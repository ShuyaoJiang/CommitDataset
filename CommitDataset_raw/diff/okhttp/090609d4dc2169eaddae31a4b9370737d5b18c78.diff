[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/MultipartTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import java.io.IOException;, +import okio.Buffer;, +import okio.BufferedSink;, +import org.junit.Test;, +, +import static com.squareup.okhttp.internal.Util.UTF_8;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +, +public final class MultipartTest {, +  @Test public void onePartRequired() throws Exception {, +    try {, +      new Multipart.Builder().build();, +      fail();, +    } catch (IllegalStateException e) {, +      assertEquals("Multipart body must have at least one part.", e.getMessage());, +    }, +  }, +, +  @Test public void singlePart() throws Exception {, +    String expected = "", +        + "--123\r\n", +        + "Content-Length: 13\r\n", +        + "\r\n", +        + "Hello, World!\r\n", +        + "--123--\r\n";, +, +    Multipart multipart = new Multipart.Builder("123"), +        .addPart(RequestBody.create(null, "Hello, World!")), +        .build();, +, +    assertEquals("123", multipart.boundary());, +    assertEquals(Multipart.MIXED, multipart.type());, +    assertEquals("multipart/mixed; boundary=123", multipart.contentType().toString());, +    assertEquals(1, multipart.parts().size());, +    assertEquals(53, multipart.contentLength());, +, +    Buffer buffer = new Buffer();, +    multipart.writeTo(buffer);, +    assertEquals(buffer.size(), multipart.contentLength());, +    assertEquals(expected, buffer.readUtf8());, +  }, +, +  @Test public void threeParts() throws Exception {, +    String expected = "", +        + "--123\r\n", +        + "Content-Length: 5\r\n", +        + "\r\n", +        + "Quick\r\n", +        + "--123\r\n", +        + "Content-Length: 5\r\n", +        + "\r\n", +        + "Brown\r\n", +        + "--123\r\n", +        + "Content-Length: 3\r\n", +        + "\r\n", +        + "Fox\r\n", +        + "--123--\r\n";, +, +    Multipart multipart = new Multipart.Builder("123"), +        .addPart(RequestBody.create(null, "Quick")), +        .addPart(RequestBody.create(null, "Brown")), +        .addPart(RequestBody.create(null, "Fox")), +        .build();, +, +    assertEquals("123", multipart.boundary());, +    assertEquals(Multipart.MIXED, multipart.type());, +    assertEquals("multipart/mixed; boundary=123", multipart.contentType().toString());, +    assertEquals(3, multipart.parts().size());, +    assertEquals(112, multipart.contentLength());, +, +    Buffer buffer = new Buffer();, +    multipart.writeTo(buffer);, +    assertEquals(buffer.size(), multipart.contentLength());, +    assertEquals(expected, buffer.readUtf8());, +  }, +, +  @Test public void fieldAndTwoFiles() throws Exception {, +    String expected = "", +        + "--AaB03x\r\n"]