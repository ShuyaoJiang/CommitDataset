[+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +import com.squareup.okhttp.Handshake;, +  /**, +   * The most recently received TLS handshake. This will be null if we haven't, +   * connected yet, or if the most recent connection was HTTP (and not HTTPS)., +   */, +  Handshake handshake;, +, +      handshake = httpEngine.getConnection() != null, +          ? httpEngine.getConnection().getHandshake(), +          : null;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +import com.squareup.okhttp.Handshake;, +  /**, +   * The most recently received TLS handshake. This will be null if we haven't, +   * connected yet, or if the most recent connection was HTTP (and not HTTPS)., +   */, +  Handshake handshake;, +, +      handshake = httpEngine.getConnection() != null, +          ? httpEngine.getConnection().getHandshake(), +          : null;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpsURLConnectionImpl.java, +, +    // If there's a response, get the handshake from there so that caching, +    // works. Otherwise get the handshake from the connection because we might, +    // have not connected yet., +    return delegate.httpEngine.hasResponse(), +        ? delegate.httpEngine.getResponse().handshake(), +        : delegate.handshake;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +import com.squareup.okhttp.Handshake;, +  /**, +   * The most recently received TLS handshake. This will be null if we haven't, +   * connected yet, or if the most recent connection was HTTP (and not HTTPS)., +   */, +  Handshake handshake;, +, +      handshake = httpEngine.getConnection() != null, +          ? httpEngine.getConnection().getHandshake(), +          : null;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpsURLConnectionImpl.java, +, +    // If there's a response, get the handshake from there so that caching, +    // works. Otherwise get the handshake from the connection because we might, +    // have not connected yet., +    return delegate.httpEngine.hasResponse(), +        ? delegate.httpEngine.getResponse().handshake(), +        : delegate.handshake;, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +import static org.junit.Assert.assertNotNull;, +  @Test public void inspectHandshakeThroughoutRequestLifecycle() throws Exception {, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.enqueue(new MockResponse());, +    server.play();, +, +    client.setSslSocketFactory(sslContext.getSocketFactory());, +    client.setHostnameVerifier(new RecordingHostnameVerifier());, +, +    HttpsURLConnection httpsConnection = (HttpsURLConnection) client.open(server.getUrl("/foo"));, +, +    // Prior to calling connect(), getting the cipher suite is forbidden., +    try {, +      httpsConnection.getCipherSuite();, +      fail();, +    } catch (IllegalStateException expected) {, +    }, +, +    // Calling connect establishes a handshake..., +    httpsConnection.connect();, +    assertNotNull(httpsConnection.getCipherSuite());, +, +    // ...which remains after we read the response body..., +    assertContent("", httpsConnection);, +    assertNotNull(httpsConnection.getCipherSuite());, +, +    // ...and after we disconnect., +    httpsConnection.disconnect();, +    assertNotNull(httpsConnection.getCipherSuite());, +  }, +]