[+++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/mockwebserver/pom.xml, +++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ /dev/null, +++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ /dev/null, +++ /dev/null, +++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/pom.xml, +++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/mockwebserver/pom.xml, +++ b/okcurl/pom.xml, +++ b/okhttp-android-support/pom.xml, +++ b/okhttp-apache/pom.xml, +++ b/okhttp-hpacktests/pom.xml, +    <version>2.3.0-SNAPSHOT</version>, +++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +import org.junit.Ignore;, +@Ignore // HttpUrl isn't implemented yet., +  @Ignore // Need to define expected results., +    assertEquals(null, HttpUrl.parse("http://host/\u000b")); // line tabulation, +    assertEquals(null, HttpUrl.parse("http://host/\u001c")); // information separator 4, +    assertEquals(null, HttpUrl.parse("http://host/\u001d")); // information separator 3, +    assertEquals(null, HttpUrl.parse("http://host/\u001e")); // information separator 2, +    assertEquals(null, HttpUrl.parse("http://host/\u001f")); // information separator 1, +    assertEquals(null, HttpUrl.parse("http://host/\u0085")); // next line, +    assertEquals(null, HttpUrl.parse("http://host/\u00a0")); // non-breaking space, +    assertEquals(null, HttpUrl.parse("http://host/\u1680")); // ogham space mark, +    assertEquals(null, HttpUrl.parse("http://host/\u180e")); // mongolian vowel separator, +    assertEquals(null, HttpUrl.parse("http://host/\u2000")); // en quad, +    assertEquals(null, HttpUrl.parse("http://host/\u2001")); // em quad, +    assertEquals(null, HttpUrl.parse("http://host/\u2002")); // en space, +    assertEquals(null, HttpUrl.parse("http://host/\u2003")); // em space, +    assertEquals(null, HttpUrl.parse("http://host/\u2004")); // three-per-em space, +    assertEquals(null, HttpUrl.parse("http://host/\u2005")); // four-per-em space, +    assertEquals(null, HttpUrl.parse("http://host/\u2006")); // six-per-em space, +    assertEquals(null, HttpUrl.parse("http://host/\u2007")); // figure space, +    assertEquals(null, HttpUrl.parse("http://host/\u2008")); // punctuation space, +    assertEquals(null, HttpUrl.parse("http://host/\u2009")); // thin space, +    assertEquals(null, HttpUrl.parse("http://host/\u200a")); // hair space, +    assertEquals(null, HttpUrl.parse("http://host/\u200b")); // zero-width space, +    assertEquals(null, HttpUrl.parse("http://host/\u200c")); // zero-width non-joiner, +    assertEquals(null, HttpUrl.parse("http://host/\u200d")); // zero-width joiner, +    assertEquals(null, HttpUrl.parse("http://host/\u200e")); // left-to-right mark, +    assertEquals(null, HttpUrl.parse("http://host/\u200f")); // right-to-left mark, +    assertEquals(null, HttpUrl.parse("http://host/\u2028")); // line separator, +    assertEquals(null, HttpUrl.parse("http://host/\u2029")); // paragraph separator]