[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +import java.net.Socket;, +import javax.net.SocketFactory;, +  public void testConnectViaSocketFactory(boolean useHttps) throws IOException {, +    SocketFactory uselessSocketFactory = new SocketFactory() {, +      public Socket createSocket() { throw new IllegalArgumentException("useless"); }, +      public Socket createSocket(InetAddress host, int port) { return null; }, +      public Socket createSocket(InetAddress address, int port, InetAddress localAddress,, +          int localPort) { return null; }, +      public Socket createSocket(String host, int port) { return null; }, +      public Socket createSocket(String host, int port, InetAddress localHost, int localPort) {, +        return null;, +      }, +    };, +, +    if (useHttps) {, +      server.useHttps(sslContext.getSocketFactory(), false);, +      client.client().setSslSocketFactory(sslContext.getSocketFactory());, +      client.client().setHostnameVerifier(new RecordingHostnameVerifier());, +    }, +, +    server.enqueue(new MockResponse().setStatus("HTTP/1.1 200 OK"));, +    server.play();, +, +    client.client().setSocketFactory(uselessSocketFactory);, +    connection = client.open(server.getUrl("/"));, +    try {, +      connection.getResponseCode();, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +, +    client.client().setSocketFactory(SocketFactory.getDefault());, +    connection = client.open(server.getUrl("/"));, +    assertEquals(200, connection.getResponseCode());, +  }, +, +  @Test public void connectHttpViaSocketFactory() throws Exception {, +    testConnectViaSocketFactory(false);, +  }, +, +  @Test public void connectHttpsViaSocketFactory() throws Exception {, +    testConnectViaSocketFactory(true);, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +import java.net.Socket;, +import javax.net.SocketFactory;, +  public void testConnectViaSocketFactory(boolean useHttps) throws IOException {, +    SocketFactory uselessSocketFactory = new SocketFactory() {, +      public Socket createSocket() { throw new IllegalArgumentException("useless"); }, +      public Socket createSocket(InetAddress host, int port) { return null; }, +      public Socket createSocket(InetAddress address, int port, InetAddress localAddress,, +          int localPort) { return null; }, +      public Socket createSocket(String host, int port) { return null; }, +      public Socket createSocket(String host, int port, InetAddress localHost, int localPort) {, +        return null;, +      }, +    };, +, +    if (useHttps) {, +      server.useHttps(sslContext.getSocketFactory(), false);, +      client.client().setSslSocketFactory(sslContext.getSocketFactory());, +      client.client().setHostnameVerifier(new RecordingHostnameVerifier());, +    }, +, +    server.enqueue(new MockResponse().setStatus("HTTP/1.1 200 OK"));, +    server.play();, +, +    client.client().setSocketFactory(uselessSocketFactory);, +    connection = client.open(server.getUrl("/"));, +    try {, +      connection.getResponseCode();, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +, +    client.client().setSocketFactory(SocketFactory.getDefault());, +    connection = client.open(server.getUrl("/"));, +    assertEquals(200, connection.getResponseCode());, +  }, +, +  @Test public void connectHttpViaSocketFactory() throws Exception {, +    testConnectViaSocketFactory(false);, +  }, +, +  @Test public void connectHttpsViaSocketFactory() throws Exception {, +    testConnectViaSocketFactory(true);, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    if (route.proxy.type() == Proxy.Type.DIRECT || route.proxy.type() == Proxy.Type.HTTP) {, +    } else {, +      socket = new Socket(route.proxy);]