[+++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import static okhttp3.internal.InternalKtKt.parseCookie;, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=1").expiresAt()).isEqualTo(51000L);, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=9223372036854724").expiresAt()).isEqualTo(, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=9223372036854725").expiresAt()).isEqualTo(, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=9223372036854726").expiresAt()).isEqualTo(, +    assertThat(parseCookie(9223372036854773807L, url, "a=b; Max-Age=1").expiresAt()).isEqualTo(, +    assertThat(parseCookie(9223372036854773807L, url, "a=b; Max-Age=2").expiresAt()).isEqualTo(, +    assertThat(parseCookie(9223372036854773807L, url, "a=b; Max-Age=3").expiresAt()).isEqualTo(, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=10000000000000000000").expiresAt()).isEqualTo(, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=-1").expiresAt()).isEqualTo(Long.MIN_VALUE);, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=0").expiresAt()).isEqualTo(Long.MIN_VALUE);, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=-9223372036854775808").expiresAt()).isEqualTo(, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=-9223372036854775809").expiresAt()).isEqualTo(, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=-10000000000000000000").expiresAt()).isEqualTo(, +    assertThat(parseCookie(, +    assertThat(parseCookie(, +    assertThat(parseCookie(, +    assertThat(parseCookie(, +    assertThat(parseCookie(, +    assertThat(parseCookie(0L, url, "a=b; ", +    assertThat(parseCookie(0L, url, "a=b").persistent()).isFalse();, +    assertThat(parseCookie(0L, url, "a=b; Max-Age=1").persistent()).isTrue();, +    assertThat(parseCookie(0L, url, "a=b; Expires=Thu, 01 Jan 1970 00:00:01 GMT").persistent()).isTrue();, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +      Cookie cookieA = parseCookie(0, url, stringA);, +        Cookie cookieB = parseCookie(0, url, stringB);, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import static okhttp3.internal.InternalKtKt.parseCookie;, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=1").expiresAt()).isEqualTo(51000L);, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=9223372036854724").expiresAt()).isEqualTo(, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=9223372036854725").expiresAt()).isEqualTo(, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=9223372036854726").expiresAt()).isEqualTo(, +    assertThat(parseCookie(9223372036854773807L, url, "a=b; Max-Age=1").expiresAt()).isEqualTo(, +    assertThat(parseCookie(9223372036854773807L, url, "a=b; Max-Age=2").expiresAt()).isEqualTo(, +    assertThat(parseCookie(9223372036854773807L, url, "a=b; Max-Age=3").expiresAt()).isEqualTo(, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=10000000000000000000").expiresAt()).isEqualTo(, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=-1").expiresAt()).isEqualTo(Long.MIN_VALUE);, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=0").expiresAt()).isEqualTo(Long.MIN_VALUE);, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=-9223372036854775808").expiresAt()).isEqualTo(, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=-9223372036854775809").expiresAt()).isEqualTo(, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=-10000000000000000000").expiresAt()).isEqualTo(, +    assertThat(parseCookie(, +    assertThat(parseCookie(, +    assertThat(parseCookie(, +    assertThat(parseCookie(, +    assertThat(parseCookie(, +    assertThat(parseCookie(0L, url, "a=b; ", +    assertThat(parseCookie(0L, url, "a=b").persistent()).isFalse();, +    assertThat(parseCookie(0L, url, "a=b; Max-Age=1").persistent()).isTrue();, +    assertThat(parseCookie(0L, url, "a=b; Expires=Thu, 01 Jan 1970 00:00:01 GMT").persistent()).isTrue();, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +      Cookie cookieA = parseCookie(0, url, stringA);, +        Cookie cookieB = parseCookie(0, url, stringB);, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import static okhttp3.internal.InternalKtKt.parseCookie;, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=1").expiresAt()).isEqualTo(51000L);, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=9223372036854724").expiresAt()).isEqualTo(, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=9223372036854725").expiresAt()).isEqualTo(, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=9223372036854726").expiresAt()).isEqualTo(, +    assertThat(parseCookie(9223372036854773807L, url, "a=b; Max-Age=1").expiresAt()).isEqualTo(, +    assertThat(parseCookie(9223372036854773807L, url, "a=b; Max-Age=2").expiresAt()).isEqualTo(, +    assertThat(parseCookie(9223372036854773807L, url, "a=b; Max-Age=3").expiresAt()).isEqualTo(, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=10000000000000000000").expiresAt()).isEqualTo(, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=-1").expiresAt()).isEqualTo(Long.MIN_VALUE);, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=0").expiresAt()).isEqualTo(Long.MIN_VALUE);, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=-9223372036854775808").expiresAt()).isEqualTo(, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=-9223372036854775809").expiresAt()).isEqualTo(, +    assertThat(parseCookie(50000L, url, "a=b; Max-Age=-10000000000000000000").expiresAt()).isEqualTo(, +    assertThat(parseCookie(, +    assertThat(parseCookie(, +    assertThat(parseCookie(, +    assertThat(parseCookie(, +    assertThat(parseCookie(, +    assertThat(parseCookie(0L, url, "a=b; ", +    assertThat(parseCookie(0L, url, "a=b").persistent()).isFalse();, +    assertThat(parseCookie(0L, url, "a=b; Max-Age=1").persistent()).isTrue();, +    assertThat(parseCookie(0L, url, "a=b; Expires=Thu, 01 Jan 1970 00:00:01 GMT").persistent()).isTrue();, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +      Cookie cookieA = parseCookie(0, url, stringA);, +        Cookie cookieB = parseCookie(0, url, stringB);, +++ /dev/null, +++ b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetCookieJar.kt, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *]