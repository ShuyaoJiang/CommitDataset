[+++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java, +  @Test public void non101RetainsBody() throws IOException {, +    server.enqueue(new MockResponse().setResponseCode(200).setBody("Body"));, +    listener.assertResponse(200, "Body");, +  @Test public void notFound() throws IOException {, +    listener.assertResponse(404, "");, +  }, +, +  @Test public void clientTimeoutClosesBody() throws IOException {, +    server.enqueue(new MockResponse().setResponseCode(408));, +    WebSocketListener serverListener = new EmptyWebSocketListener();, +    server.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +, +    WebSocket webSocket = awaitWebSocket();, +    webSocket.sendPing(new Buffer().writeUtf8("WebSockets are fun!"));, +    listener.assertPong(new Buffer().writeUtf8("WebSockets are fun!"));, +        listener.onFailure(e, response);, +++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java, +  @Test public void non101RetainsBody() throws IOException {, +    server.enqueue(new MockResponse().setResponseCode(200).setBody("Body"));, +    listener.assertResponse(200, "Body");, +  @Test public void notFound() throws IOException {, +    listener.assertResponse(404, "");, +  }, +, +  @Test public void clientTimeoutClosesBody() throws IOException {, +    server.enqueue(new MockResponse().setResponseCode(408));, +    WebSocketListener serverListener = new EmptyWebSocketListener();, +    server.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +, +    WebSocket webSocket = awaitWebSocket();, +    webSocket.sendPing(new Buffer().writeUtf8("WebSockets are fun!"));, +    listener.assertPong(new Buffer().writeUtf8("WebSockets are fun!"));, +        listener.onFailure(e, response);, +++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketRecorder.java, +  private Response response;, +    this.response = response;, +  public void assertResponse(int code, String body) throws IOException {, +    assertNotNull(response);, +    assertEquals(code, response.code());, +    assertEquals(body, response.body().string());, +  }, +, +++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java, +  @Test public void non101RetainsBody() throws IOException {, +    server.enqueue(new MockResponse().setResponseCode(200).setBody("Body"));, +    listener.assertResponse(200, "Body");, +  @Test public void notFound() throws IOException {, +    listener.assertResponse(404, "");, +  }, +, +  @Test public void clientTimeoutClosesBody() throws IOException {, +    server.enqueue(new MockResponse().setResponseCode(408));, +    WebSocketListener serverListener = new EmptyWebSocketListener();, +    server.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +, +    WebSocket webSocket = awaitWebSocket();, +    webSocket.sendPing(new Buffer().writeUtf8("WebSockets are fun!"));, +    listener.assertPong(new Buffer().writeUtf8("WebSockets are fun!"));, +        listener.onFailure(e, response);, +++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketRecorder.java, +  private Response response;, +    this.response = response;, +  public void assertResponse(int code, String body) throws IOException {, +    assertNotNull(response);, +    assertEquals(code, response.code());, +    assertEquals(body, response.body().string());, +  }, +, +++ b/okhttp-ws/src/main/java/okhttp3/ws/WebSocketCall.java, +++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java, +  @Test public void non101RetainsBody() throws IOException {, +    server.enqueue(new MockResponse().setResponseCode(200).setBody("Body"));, +    listener.assertResponse(200, "Body");, +  @Test public void notFound() throws IOException {, +    listener.assertResponse(404, "");, +  }, +, +  @Test public void clientTimeoutClosesBody() throws IOException {, +    server.enqueue(new MockResponse().setResponseCode(408));, +    WebSocketListener serverListener = new EmptyWebSocketListener();, +    server.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +, +    WebSocket webSocket = awaitWebSocket();, +    webSocket.sendPing(new Buffer().writeUtf8("WebSockets are fun!"));, +    listener.assertPong(new Buffer().writeUtf8("WebSockets are fun!"));, +        listener.onFailure(e, response);, +++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketRecorder.java, +  private Response response;, +    this.response = response;, +  public void assertResponse(int code, String body) throws IOException {, +    assertNotNull(response);, +    assertEquals(code, response.code());, +    assertEquals(body, response.body().string());, +  }, +, +++ b/okhttp-ws/src/main/java/okhttp3/ws/WebSocketCall.java, +++ b/okhttp/src/main/java/okhttp3/internal/http/HttpEngine.java, +    if (!forWebSocket || networkResponse.code() != 101) {]