[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http20Draft12Test.java, +    frame.writeShort(15); // 3 settings * 1 bytes for the code and 4 for the value., +    frame.writeByte(5); // SETTINGS_COMPRESS_DATA, +    frame.writeInt(0);, +        assertEquals(false, settings.getCompressData(true));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http20Draft12Test.java, +    frame.writeShort(15); // 3 settings * 1 bytes for the code and 4 for the value., +    frame.writeByte(5); // SETTINGS_COMPRESS_DATA, +    frame.writeInt(0);, +        assertEquals(false, settings.getCompressData(true));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SettingsTest.java, +    settings.set(Settings.ENABLE_PUSH, 0, 1);, +    assertEquals(true, settings.getEnablePush(false));, +    settings.clear();, +    assertEquals(-3, settings.getDownloadBandwidth(-3));, +    // WARNING: clash on flags between spdy/3 and HTTP/2!, +    settings.clear();, +    assertEquals(true, settings.getCompressData(true));, +    settings.set(Settings.COMPRESS_DATA, 0, 1);, +    assertEquals(true, settings.getCompressData(false));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http20Draft12Test.java, +    frame.writeShort(15); // 3 settings * 1 bytes for the code and 4 for the value., +    frame.writeByte(5); // SETTINGS_COMPRESS_DATA, +    frame.writeInt(0);, +        assertEquals(false, settings.getCompressData(true));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SettingsTest.java, +    settings.set(Settings.ENABLE_PUSH, 0, 1);, +    assertEquals(true, settings.getEnablePush(false));, +    settings.clear();, +    assertEquals(-3, settings.getDownloadBandwidth(-3));, +    // WARNING: clash on flags between spdy/3 and HTTP/2!, +    settings.clear();, +    assertEquals(true, settings.getCompressData(true));, +    settings.set(Settings.COMPRESS_DATA, 0, 1);, +    assertEquals(true, settings.getCompressData(false));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft12.java, +          case 5: // SETTINGS_COMPRESS_DATA, +            break;, +      long maxAge = source.readInt() & 0xffff;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http20Draft12Test.java, +    frame.writeShort(15); // 3 settings * 1 bytes for the code and 4 for the value., +    frame.writeByte(5); // SETTINGS_COMPRESS_DATA, +    frame.writeInt(0);, +        assertEquals(false, settings.getCompressData(true));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SettingsTest.java, +    settings.set(Settings.ENABLE_PUSH, 0, 1);, +    assertEquals(true, settings.getEnablePush(false));, +    settings.clear();, +    assertEquals(-3, settings.getDownloadBandwidth(-3));, +    // WARNING: clash on flags between spdy/3 and HTTP/2!, +    settings.clear();, +    assertEquals(true, settings.getCompressData(true));, +    settings.set(Settings.COMPRESS_DATA, 0, 1);, +    assertEquals(true, settings.getCompressData(false));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft12.java, +          case 5: // SETTINGS_COMPRESS_DATA, +            break;, +      long maxAge = source.readInt() & 0xffff;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/Settings.java, +  /** HTTP/2: The peer must not send a PUSH_PROMISE frame when this is 0. */, +  /** HTTP/2: The peer must not gzip a DATA frame when this is 0. */, +  static final int COMPRESS_DATA = 5;, +  /** HTTP/2 only. */, +  // TODO: honor this setting in HTTP/2., +  boolean getCompressData(boolean defaultValue) {, +    int bit = 1 << COMPRESS_DATA;, +    return ((bit & set) != 0 ? values[COMPRESS_DATA] : defaultValue ? 1 : 0) == 1;, +  }, +]