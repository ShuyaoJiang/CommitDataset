[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +        .synReply(false, 3, headerEntries("a", "android"));, +    peer.sendFrame().data(true, 3, new Buffer().writeUtf8("robot"));, +    assertEquals(3, synStream.streamId);, +    peer.sendFrame().synReply(false, 3, headerEntries("b", "banana"));, +    peer.sendFrame().synReply(true, 3, headerEntries("a", "android"));, +    peer.sendFrame().synReply(false, 3, headerEntries("b", "banana"));, +    peer.sendFrame().rstStream(3, CANCEL);, +    peer.sendFrame().synReply(false, 3, headerEntries("b", "banana"));, +    peer.sendFrame().data(true, 3, new Buffer().writeUtf8("square"));, +    peer.sendFrame().synReply(false, 3, headerEntries("a", "android"));, +    peer.sendFrame().synReply(false, 3, headerEntries("b", "banana"));, +    assertEquals(3, rstStream.streamId);, +    peer.sendFrame().synReply(false, 3, headerEntries("a", "android"));, +    peer.sendFrame().data(true, 3, new Buffer().writeUtf8("robot"));, +    peer.sendFrame().data(true, 3, new Buffer().writeUtf8("c3po")); // Ignored., +    peer.sendFrame().synReply(false, 3, headerEntries("b", "banana"));, +    peer.sendFrame().data(false, 3, new Buffer().write(new byte[64 * 1024 + 1]));, +    peer.sendFrame().rstStream(3, REFUSED_STREAM);, +    peer.acceptFrame(); // SYN_STREAM 5, +    peer.sendFrame().goAway(3, PROTOCOL_ERROR, Util.EMPTY_BYTE_ARRAY);, +    peer.acceptFrame(); // DATA STREAM 3, +    assertEquals(3, data1.streamId);, +    peer.acceptFrame(); // SYN_STREAM 3, +    assertEquals(3, rstStream.streamId);, +    peer.sendFrame().synReply(false, 3, headerEntries("a", "android"));, +    peer.sendFrame().synReply(false, 3, headerEntries("a", "android"));, +    peer.sendFrame().headers(3, headerEntries("c", "c3po"));, +    peer.sendFrame().headers(3, headerEntries("c", "c3po"));, +    peer.sendFrame().synReply(false, 3, headerEntries("a", "android"));, +        peer.sendFrame().data(false, 3, data(count));, +    peer.sendFrame().data(true, 3, data(0));, +      assertTrue(windowUpdateStreamIds.contains(3)); // stream, +    peer.sendFrame().synReply(false, 3, headerEntries("a", "android"));, +    peer.sendFrame().data(true, 3, data(0));, +    peer.sendFrame().synReply(false, 3, headerEntries("a", "android"));, +    assertEquals(0, connection.getStream(3).bytesLeftInWriteWindow);, +    connection.readerRunnable.windowUpdate(3, 1);, +      peer.acceptFrame(); // DATA on stream 3, +    assertEquals(0, connection.getStream(3).bytesLeftInWriteWindow);, +    assertEquals(1, connection.getStream(3).bytesLeftInWriteWindow);, +    assertEquals(0, connection.getStream(3).bytesLeftInWriteWindow);, +    assertEquals(1, connection.getStream(3).bytesLeftInWriteWindow);, +    peer.sendFrame().synReply(false, 3, headerEntries("a", "android"));, +    peer.sendTruncatedFrame(8 + 100).data(false, 3, data(1024));, +    peer.acceptFrame(); // SYN_STREAM on stream 3, +      peer.acceptFrame(); // DATA on stream 3, +    peer.acceptFrame(); // SYN_STREAM on stream 5, +    peer.acceptFrame(); // DATA on stream 5, +    assertEquals(0, connection.getStream(3).bytesLeftInWriteWindow);, +    assertEquals(0, connection.getStream(3).bytesLeftInWriteWindow);, +    assertEquals(0, connection.getStream(3).bytesLeftInWriteWindow);, +    assertEquals(DEFAULT_INITIAL_WINDOW_SIZE - 3, connection.getStream(5).bytesLeftInWriteWindow);, +    peer.sendFrame().synReply(false, 3, headerEntries("a", "android"));, +    peer.acceptFrame(); // DATA, +    peer.acceptFrame(); // DATA, +    byte[] trailingCompressedBytes = ByteString.decodeBase64(frame).toByteArray();, +    trailingCompressedBytes[11] = 3; // Set SPDY/3 stream ID to 3., +    peer.sendFrame(trailingCompressedBytes);, +    peer.sendFrame().data(true, 3, new Buffer().writeUtf8("robot"));, +    peer.sendFrame().synReply(false, 3, headerEntries("a", "android"));, +    peer.sendFrame().pushPromise(3, 2, expectedRequestHeaders);, +    peer.sendFrame().data(true, 3, data(0));, +    peer.sendFrame().pushPromise(3, 2, headerEntries("a", "android"));, +    peer.sendFrame().pushPromise(3, 2, headerEntries("b", "banana"));, +    peer.sendFrame().pushPromise(3, 2, Arrays.asList(, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +        .synReply(false, 3, headerEntries("a", "android"));, +    peer.sendFrame().data(true, 3, new Buffer().writeUtf8("robot"));, +    assertEquals(3, synStream.streamId);, +    peer.sendFrame().synReply(false, 3, headerEntries("b", "banana"));, +    peer.sendFrame().synReply(true, 3, headerEntries("a", "android"));, +    peer.sendFrame().synReply(false, 3, headerEntries("b", "banana"));, +    peer.sendFrame().rstStream(3, CANCEL);, +    peer.sendFrame().synReply(false, 3, headerEntries("b", "banana"));, +    peer.sendFrame().data(true, 3, new Buffer().writeUtf8("square"));, +    peer.sendFrame().synReply(false, 3, headerEntries("a", "android"));, +    peer.sendFrame().synReply(false, 3, headerEntries("b", "banana"));, +    assertEquals(3, rstStream.streamId);, +    peer.sendFrame().synReply(false, 3, headerEntries("a", "android"));, +    peer.sendFrame().data(true, 3, new Buffer().writeUtf8("robot"));, +    peer.sendFrame().data(true, 3, new Buffer().writeUtf8("c3po")); // Ignored., +    peer.sendFrame().synReply(false, 3, headerEntries("b", "banana"));, +    peer.sendFrame().data(false, 3, new Buffer().write(new byte[64 * 1024 + 1]));, +    peer.sendFrame().rstStream(3, REFUSED_STREAM);, +    peer.acceptFrame(); // SYN_STREAM 5, +    peer.sendFrame().goAway(3, PROTOCOL_ERROR, Util.EMPTY_BYTE_ARRAY);, +    peer.acceptFrame(); // DATA STREAM 3, +    assertEquals(3, data1.streamId);, +    peer.acceptFrame(); // SYN_STREAM 3, +    assertEquals(3, rstStream.streamId);, +    peer.sendFrame().synReply(false, 3, headerEntries("a", "android"));, +    peer.sendFrame().synReply(false, 3, headerEntries("a", "android"));, +    peer.sendFrame().headers(3, headerEntries("c", "c3po"));, +    peer.sendFrame().headers(3, headerEntries("c", "c3po"));, +    peer.sendFrame().synReply(false, 3, headerEntries("a", "android"));, +        peer.sendFrame().data(false, 3, data(count));, +    peer.sendFrame().data(true, 3, data(0));, +      assertTrue(windowUpdateStreamIds.contains(3)); // stream, +    peer.sendFrame().synReply(false, 3, headerEntries("a", "android"));]