[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +        int priority, List<Header> headerBlock, HeadersMode headersMode);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +        int priority, List<Header> headerBlock, HeadersMode headersMode);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +      int priority, int slot, List<Header> headerBlock) throws IOException;, +  void synReply(boolean outFinished, int streamId, List<Header> headerBlock), +  void headers(int streamId, List<Header> headerBlock) throws IOException;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +        int priority, List<Header> headerBlock, HeadersMode headersMode);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +      int priority, int slot, List<Header> headerBlock) throws IOException;, +  void synReply(boolean outFinished, int streamId, List<Header> headerBlock), +  void headers(int streamId, List<Header> headerBlock) throws IOException;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +import java.io.InputStream;, +  static final class Reader {, +    private final InputStream in;, +    Reader(boolean client, int maxHeaderTableByteCount, InputStream in) {, +    void readHeaders() throws IOException {, +      int b;, +      while ((b = in.read()) != -1) {, +        b &= 0xff;, +    void emitReferenceSet() {, +    List<Header> getAndReset() {, +      return in.read() & 0xff;, +    ByteString readByteString(boolean asciiLowercase) throws IOException {, +  static final class Writer {, +    void writeHeaders(List<Header> headerBlock) throws IOException {, +      for (int i = 0, size = headerBlock.size(); i < size; i++) {, +        writeByteString(headerBlock.get(i).name);, +        writeByteString(headerBlock.get(i).value);, +    void writeInt(int value, int prefixMask, int bits) throws IOException {, +    void writeByteString(ByteString data) throws IOException {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameReader.java, +        int priority, List<Header> headerBlock, HeadersMode headersMode);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +      int priority, int slot, List<Header> headerBlock) throws IOException;, +  void synReply(boolean outFinished, int streamId, List<Header> headerBlock), +  void headers(int streamId, List<Header> headerBlock) throws IOException;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +import java.io.InputStream;, +  static final class Reader {, +    private final InputStream in;, +    Reader(boolean client, int maxHeaderTableByteCount, InputStream in) {, +    void readHeaders() throws IOException {, +      int b;, +      while ((b = in.read()) != -1) {, +        b &= 0xff;, +    void emitReferenceSet() {, +    List<Header> getAndReset() {, +      return in.read() & 0xff;, +    ByteString readByteString(boolean asciiLowercase) throws IOException {, +  static final class Writer {, +    void writeHeaders(List<Header> headerBlock) throws IOException {, +      for (int i = 0, size = headerBlock.size(); i < size; i++) {, +        writeByteString(headerBlock.get(i).name);, +        writeByteString(headerBlock.get(i).value);, +    void writeInt(int value, int prefixMask, int bits) throws IOException {, +    void writeByteString(ByteString data) throws IOException {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +import java.io.EOFException;, +    private final ContinuationInputStream continuation;, +      this.continuation = new ContinuationInputStream(this.in);, +      this.hpackReader = new HpackDraft05.Reader(client, headerTableSize, continuation);, +      if (streamId == 0) throw ioException("PROTOCOL_ERROR: TYPE_HEADERS streamId == 0");, +      boolean endHeaders = (flags & FLAG_END_HEADERS) != 0;, +      List<Header> headerBlock = readHeaderBlock(length, endHeaders, streamId);, +      handler.headers(false, endStream, streamId, -1, priority, headerBlock,, +          HeadersMode.HTTP_20_HEADERS);, +    }, +, +    private List<Header> readHeaderBlock(int length, boolean endHeaders, int streamId), +        throws IOException {, +      continuation.bytesLeft = length;, +      continuation.endHeaders = endHeaders;, +      continuation.streamId = streamId;, +, +      hpackReader.readHeaders();, +      return hpackReader.getAndReset();, +        int associatedStreamId, int priority, int slot, List<Header> headerBlock), +      headers(outFinished, streamId, priority, headerBlock);, +        List<Header> headerBlock) throws IOException {, +      headers(outFinished, streamId, -1, headerBlock);, +    @Override public synchronized void headers(int streamId, List<Header> headerBlock), +      headers(false, streamId, -1, headerBlock);, +        List<Header> headerBlock) throws IOException {, +      hpackWriter.writeHeaders(headerBlock);, +, +  /**, +   * Decompression of the header block occurs above the framing layer.  This, +   * class lazily reads continuation frames as they are needed by, +   * {@link HpackDraft05.Reader#readHeaders()}., +   */, +  static final class ContinuationInputStream extends InputStream {, +    private final DataInputStream in;, +, +    int bytesLeft;, +    boolean endHeaders;, +    int streamId;]