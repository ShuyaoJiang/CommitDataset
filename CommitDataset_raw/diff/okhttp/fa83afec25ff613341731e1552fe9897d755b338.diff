[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    String name = "MockWebServer WebSocket " + request.getPath();, +    webSocket.initReaderAndWriter(name, 0, streams);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    String name = "MockWebServer WebSocket " + request.getPath();, +    webSocket.initReaderAndWriter(name, 0, streams);, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +  @Test public void durationDefaults() {, +    assertEquals(0, client.pingIntervalMillis());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    String name = "MockWebServer WebSocket " + request.getPath();, +    webSocket.initReaderAndWriter(name, 0, streams);, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +  @Test public void durationDefaults() {, +    assertEquals(0, client.pingIntervalMillis());, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketHttpTest.java, +  @Test public void clientPingsServerOnInterval() throws Exception {, +    client = client.newBuilder(), +        .pingInterval(500, TimeUnit.MILLISECONDS), +        .build();, +, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +    RealWebSocket webSocket = newWebSocket();, +, +    clientListener.assertOpen();, +    RealWebSocket server = (RealWebSocket) serverListener.assertOpen();, +, +    long startNanos = System.nanoTime();, +    while (webSocket.pongCount() < 3) {, +      Thread.sleep(50);, +    }, +, +    long elapsedUntilPong3 = System.nanoTime() - startNanos;, +    assertEquals(1500, TimeUnit.NANOSECONDS.toMillis(elapsedUntilPong3), 250d);, +, +    // The client pinged the server 3 times, and it has ponged back 3 times., +    assertEquals(3, server.pingCount());, +    assertEquals(3, webSocket.pongCount());, +, +    // The server has never pinged the client., +    assertEquals(0, server.pongCount());, +    assertEquals(0, webSocket.pingCount());, +  }, +, +  @Test public void clientDoesNotPingServerByDefault() throws Exception {, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +    RealWebSocket webSocket = newWebSocket();, +, +    clientListener.assertOpen();, +    RealWebSocket server = (RealWebSocket) serverListener.assertOpen();, +, +    Thread.sleep(1000);, +, +    // No pings and no pongs., +    assertEquals(0, server.pingCount());, +    assertEquals(0, webSocket.pongCount());, +    assertEquals(0, server.pongCount());, +    assertEquals(0, webSocket.pingCount());, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    String name = "MockWebServer WebSocket " + request.getPath();, +    webSocket.initReaderAndWriter(name, 0, streams);, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +  @Test public void durationDefaults() {, +    assertEquals(0, client.pingIntervalMillis());, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketHttpTest.java, +  @Test public void clientPingsServerOnInterval() throws Exception {, +    client = client.newBuilder(), +        .pingInterval(500, TimeUnit.MILLISECONDS), +        .build();, +, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +    RealWebSocket webSocket = newWebSocket();, +, +    clientListener.assertOpen();, +    RealWebSocket server = (RealWebSocket) serverListener.assertOpen();, +, +    long startNanos = System.nanoTime();, +    while (webSocket.pongCount() < 3) {, +      Thread.sleep(50);, +    }, +, +    long elapsedUntilPong3 = System.nanoTime() - startNanos;, +    assertEquals(1500, TimeUnit.NANOSECONDS.toMillis(elapsedUntilPong3), 250d);, +, +    // The client pinged the server 3 times, and it has ponged back 3 times., +    assertEquals(3, server.pingCount());, +    assertEquals(3, webSocket.pongCount());, +, +    // The server has never pinged the client., +    assertEquals(0, server.pongCount());, +    assertEquals(0, webSocket.pingCount());, +  }, +, +  @Test public void clientDoesNotPingServerByDefault() throws Exception {, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));, +    RealWebSocket webSocket = newWebSocket();, +, +    clientListener.assertOpen();]