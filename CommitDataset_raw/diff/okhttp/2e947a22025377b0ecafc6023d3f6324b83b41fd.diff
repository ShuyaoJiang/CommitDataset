[+++ b/.circleci/config.yml, +      - image: circleci/openjdk:11.0.2-jdk, +      - image: circleci/openjdk:11.0.2-jdk, +++ b/.circleci/config.yml, +      - image: circleci/openjdk:11.0.2-jdk, +      - image: circleci/openjdk:11.0.2-jdk, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt, +  @Volatile @set:JvmName("-deprecated_setLevel") var level = Level.NONE, +      // This lambda conversion is for Kotlin callers expecting a Java SAM (single-abstract-method)., +      @JvmName("-deprecated_Logger"), +      inline operator fun invoke(, +        crossinline block: (message: String) -> Unit, +      ): Logger = object : Logger {, +        override fun log(message: String) = block(message), +      }, +, +  @JvmName("-deprecated_getLevel"), +        if (buffer.isUtf8()) {, +        if (!buffer.isUtf8()) {, +     * Returns true if the body in question probably contains human readable text. Uses a small, +     * sample of code points to detect unicode control characters commonly used in binary file, +     * signatures., +    internal fun Buffer.isUtf8(): Boolean {, +        val byteCount = if (size < 64) size else 64, +        copyTo(prefix, 0, byteCount), +        for (i in 0 until 16) {, +++ b/.circleci/config.yml, +      - image: circleci/openjdk:11.0.2-jdk, +      - image: circleci/openjdk:11.0.2-jdk, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt, +  @Volatile @set:JvmName("-deprecated_setLevel") var level = Level.NONE, +      // This lambda conversion is for Kotlin callers expecting a Java SAM (single-abstract-method)., +      @JvmName("-deprecated_Logger"), +      inline operator fun invoke(, +        crossinline block: (message: String) -> Unit, +      ): Logger = object : Logger {, +        override fun log(message: String) = block(message), +      }, +, +  @JvmName("-deprecated_getLevel"), +        if (buffer.isUtf8()) {, +        if (!buffer.isUtf8()) {, +     * Returns true if the body in question probably contains human readable text. Uses a small, +     * sample of code points to detect unicode control characters commonly used in binary file, +     * signatures., +    internal fun Buffer.isUtf8(): Boolean {, +        val byteCount = if (size < 64) size else 64, +        copyTo(prefix, 0, byteCount), +        for (i in 0 until 16) {, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorKotlinTest.kt, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.logging, +, +import okhttp3.logging.HttpLoggingInterceptor.Companion.isUtf8, +import okio.Buffer, +import org.assertj.core.api.Assertions.assertThat, +import org.junit.Test, +, +class HttpLoggingInterceptorKotlinTest {, +  @Test fun isPlaintext() {, +    assertThat(Buffer().isUtf8()).isTrue(), +    assertThat(Buffer().writeUtf8("abc").isUtf8()).isTrue(), +    assertThat(Buffer().writeUtf8("new\r\nlines").isUtf8()).isTrue(), +    assertThat(Buffer().writeUtf8("white\t space").isUtf8()).isTrue(), +    assertThat(Buffer().writeByte(0x80).isUtf8()).isTrue(), +    assertThat(Buffer().writeByte(0x00).isUtf8()).isFalse(), +    assertThat(Buffer().writeByte(0xc0).isUtf8()).isFalse(), +  }, +}, +++ b/.circleci/config.yml, +      - image: circleci/openjdk:11.0.2-jdk, +      - image: circleci/openjdk:11.0.2-jdk, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt, +  @Volatile @set:JvmName("-deprecated_setLevel") var level = Level.NONE, +      // This lambda conversion is for Kotlin callers expecting a Java SAM (single-abstract-method)., +      @JvmName("-deprecated_Logger"), +      inline operator fun invoke(, +        crossinline block: (message: String) -> Unit, +      ): Logger = object : Logger {, +        override fun log(message: String) = block(message), +      }, +, +  @JvmName("-deprecated_getLevel"), +        if (buffer.isUtf8()) {, +        if (!buffer.isUtf8()) {, +     * Returns true if the body in question probably contains human readable text. Uses a small]