[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        } else if (protocol == Protocol.SPDY_3) {, +          for (String s : value.split("\u0000", -1)) {, +            httpHeaders.add(name.utf8(), s);, +          }, +        } else if (protocol == Protocol.HTTP_2) {, +        } else {, +          throw new IllegalStateException();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        } else if (protocol == Protocol.SPDY_3) {, +          for (String s : value.split("\u0000", -1)) {, +            httpHeaders.add(name.utf8(), s);, +          }, +        } else if (protocol == Protocol.HTTP_2) {, +        } else {, +          throw new IllegalStateException();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void repeatedHeaderNames() throws Exception {, +    server.enqueue(new MockResponse(), +        .addHeader("B", "123"), +        .addHeader("B", "234"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .addHeader("A", "345"), +        .addHeader("A", "456"), +        .build();, +, +    executeSynchronously(request), +        .assertCode(200), +        .assertHeader("B", "123", "234");, +, +    RecordedRequest recordedRequest = server.takeRequest();, +    assertEquals(Arrays.asList("345", "456"), recordedRequest.getHeaders().values("A"));, +  }, +, +  @Test public void repeatedHeaderNames_SPDY_3() throws Exception {, +    enableProtocol(Protocol.SPDY_3);, +    repeatedHeaderNames();, +  }, +, +  @Test public void repeatedHeaderNames_HTTP_2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    repeatedHeaderNames();, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        } else if (protocol == Protocol.SPDY_3) {, +          for (String s : value.split("\u0000", -1)) {, +            httpHeaders.add(name.utf8(), s);, +          }, +        } else if (protocol == Protocol.HTTP_2) {, +        } else {, +          throw new IllegalStateException();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void repeatedHeaderNames() throws Exception {, +    server.enqueue(new MockResponse(), +        .addHeader("B", "123"), +        .addHeader("B", "234"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .addHeader("A", "345"), +        .addHeader("A", "456"), +        .build();, +, +    executeSynchronously(request), +        .assertCode(200), +        .assertHeader("B", "123", "234");, +, +    RecordedRequest recordedRequest = server.takeRequest();, +    assertEquals(Arrays.asList("345", "456"), recordedRequest.getHeaders().values("A"));, +  }, +, +  @Test public void repeatedHeaderNames_SPDY_3() throws Exception {, +    enableProtocol(Protocol.SPDY_3);, +    repeatedHeaderNames();, +  }, +, +  @Test public void repeatedHeaderNames_HTTP_2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    repeatedHeaderNames();, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java, +    Response response = FramedTransport.readSpdy3HeadersList(headerBlock).request(request).build();, +    Response response = FramedTransport.readSpdy3HeadersList(headerBlock).request(request).build();, +    Response response = FramedTransport.readHttp2HeadersList(headerBlock).request(request).build();, +    assertEquals(2, headers.size());, +    assertEquals(":version", headers.name(1));, +    assertEquals("HTTP/1.1", headers.value(1));, +  @Test public void spdy3HeadersList() {, +    List<Header> headerBlock = FramedTransport.spdy3HeadersList(request);, +  @Test public void spdy3HeadersListDropsForbiddenHeadersSpdy3() {, +    assertEquals(expected, FramedTransport.spdy3HeadersList(request));, +  @Test public void http2HeadersListDropsForbiddenHeadersHttp2() {, +    assertEquals(expected, FramedTransport.http2HeadersList(request));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        } else if (protocol == Protocol.SPDY_3) {, +          for (String s : value.split("\u0000", -1)) {]