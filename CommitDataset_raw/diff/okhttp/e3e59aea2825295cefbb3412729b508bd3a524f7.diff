[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.takeHeaders();, +        stream.writeHeaders(Collections.singletonList(, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.takeHeaders();, +        stream.writeHeaders(Collections.singletonList(, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.takeHeaders();, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.takeHeaders();, +        stream.writeHeaders(Collections.singletonList(, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.takeHeaders();, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.takeHeaders();, +        stream.writeHeaders(Collections.singletonList(, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.takeHeaders();, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-logging-interceptor/README.md, +You can change the log level at any time by calling `setLevel()`., +**Warning**: The logs generated by this interceptor when using the `HEADERS` or `BODY` levels have, +You can redact headers that may contain sensitive information by calling `redactHeader()`., +```java, +logging.redactHeader("Authorization");, +logging.redactHeader("Cookie");, +```, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.takeHeaders();, +        stream.writeHeaders(Collections.singletonList(, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.takeHeaders();, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-logging-interceptor/README.md, +You can change the log level at any time by calling `setLevel()`., +**Warning**: The logs generated by this interceptor when using the `HEADERS` or `BODY` levels have, +You can redact headers that may contain sensitive information by calling `redactHeader()`., +```java, +logging.redactHeader("Authorization");, +logging.redactHeader("Cookie");, +```, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import java.util.Collections;, +import java.util.Set;, +import java.util.TreeSet;, +  private volatile Set<String> headersToRedact = Collections.emptySet();, +, +  public void redactHeader(String name) {, +    Set<String> newHeadersToRedact = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);, +    newHeadersToRedact.addAll(headersToRedact);, +    newHeadersToRedact.add(name);, +    headersToRedact = newHeadersToRedact;, +  }, +, +          logHeader(headers, i);, +        logHeader(headers, i);, +  private void logHeader(Headers headers, int i) {, +    String value = headersToRedact.contains(headers.name(i)) ? "██" : headers.value(i);, +    logger.log(headers.name(i) + ": " + value);, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.takeHeaders();, +        stream.writeHeaders(Collections.singletonList(, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.takeHeaders();, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@okhttp3.internal.annotations.EverythingIsNonNull, +++ b/okhttp-logging-interceptor/README.md, +You can change the log level at any time by calling `setLevel()`., +**Warning**: The logs generated by this interceptor when using the `HEADERS` or `BODY` levels have, +You can redact headers that may contain sensitive information by calling `redactHeader()`., +```java, +logging.redactHeader("Authorization");, +logging.redactHeader("Cookie");]