[+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import java.net.InetAddress;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.SSLSession;, +import okhttp3.internal.tls.HeldCertificate;, +import okhttp3.internal.tls.SslClient;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import org.junit.Before;, +import org.junit.Ignore;, +import org.junit.Rule;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +, +public final class ConnectionCoalescingTest {, +  @Rule public final MockWebServer server = new MockWebServer();, +, +  private OkHttpClient client;, +, +  private HeldCertificate rootCa;, +  private HeldCertificate certificate;, +  private FakeDns dns = new FakeDns();, +  private HttpUrl url;, +  private List<InetAddress> serverIps;, +, +  @Before public void setUp() throws Exception {, +    rootCa = new HeldCertificate.Builder(), +        .serialNumber("1"), +        .ca(3), +        .commonName("root"), +        .build();, +    certificate = new HeldCertificate.Builder(), +        .issuedBy(rootCa), +        .serialNumber("2"), +        .commonName(server.getHostName()), +        .subjectAlternativeName(server.getHostName()), +        .subjectAlternativeName("san.com"), +        .subjectAlternativeName("*.wildcard.com"), +        .subjectAlternativeName("differentdns.com"), +        .build();, +, +    serverIps = Dns.SYSTEM.lookup(server.getHostName());, +, +    dns.set(server.getHostName(), serverIps);, +    dns.set("san.com", serverIps);, +    dns.set("nonsan.com", serverIps);, +    dns.set("www.wildcard.com", serverIps);, +    dns.set("differentdns.com", Collections.<InetAddress>emptyList());, +, +    SslClient sslClient = new SslClient.Builder(), +        .addTrustedCertificate(rootCa.certificate), +        .build();, +, +    client = new OkHttpClient.Builder().dns(dns), +        .sslSocketFactory(sslClient.socketFactory, sslClient.trustManager), +        .build();, +, +    SslClient serverSslClient = new SslClient.Builder(), +        .certificateChain(certificate, rootCa), +        .build();, +    server.useHttps(serverSslClient.socketFactory, false);, +, +    url = server.url("/robots.txt");, +  }, +, +  /**, +   * Test connecting to the main host then an alternative, although only subject alternative names, +   * are used if present no special consideration of common name., +   */, +  @Test public void commonThenAlternative() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(200));, +    server.enqueue(new MockResponse().setResponseCode(200));, +, +    assert200Http2Response(execute(url), server.getHostName());, +, +    HttpUrl sanUrl = url.newBuilder().host("san.com").build();, +    assert200Http2Response(execute(sanUrl), "san.com");]