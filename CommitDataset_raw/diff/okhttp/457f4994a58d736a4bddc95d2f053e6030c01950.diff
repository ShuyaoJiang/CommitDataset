[+++ b/mockwebserver/src/main/java/okhttp3/internal/HeldCertificate.java, +import org.bouncycastle.asn1.x509.BasicConstraints;, +import org.bouncycastle.asn1.x509.X509Extensions;, +    private int maxIntermediateCas;, +     * Set this certificate's name. Typically this is the URL hostname for TLS certificates. This is, +     * the CN (common name) in the certificate. Will be a random string if no value is provided., +    public Builder commonName(String hostname) {, +    /**, +     * Set this certificate to be a certificate authority, with up to {@code maxIntermediateCas}, +     * intermediate certificate authorities beneath it., +     */, +    public Builder ca(int maxIntermediateCas) {, +      this.maxIntermediateCas = maxIntermediateCas;, +      return this;, +    }, +, +, +      if (maxIntermediateCas > 0) {, +        generator.addExtension(X509Extensions.BasicConstraints, true,, +            new BasicConstraints(maxIntermediateCas));, +      }, +, +++ b/mockwebserver/src/main/java/okhttp3/internal/HeldCertificate.java, +import org.bouncycastle.asn1.x509.BasicConstraints;, +import org.bouncycastle.asn1.x509.X509Extensions;, +    private int maxIntermediateCas;, +     * Set this certificate's name. Typically this is the URL hostname for TLS certificates. This is, +     * the CN (common name) in the certificate. Will be a random string if no value is provided., +    public Builder commonName(String hostname) {, +    /**, +     * Set this certificate to be a certificate authority, with up to {@code maxIntermediateCas}, +     * intermediate certificate authorities beneath it., +     */, +    public Builder ca(int maxIntermediateCas) {, +      this.maxIntermediateCas = maxIntermediateCas;, +      return this;, +    }, +, +, +      if (maxIntermediateCas > 0) {, +        generator.addExtension(X509Extensions.BasicConstraints, true,, +            new BasicConstraints(maxIntermediateCas));, +      }, +, +++ b/mockwebserver/src/main/java/okhttp3/internal/SslContextBuilder.java, +import java.security.cert.X509Certificate;, +import java.util.ArrayList;, +import java.util.List;, +    if (localhost != null) return localhost;, +, +      // Generate a self-signed cert for the server to serve and the client to trust., +      HeldCertificate heldCertificate = new HeldCertificate.Builder(), +          .serialNumber("1"), +          .commonName(InetAddress.getByName("localhost").getHostName()), +          .build();, +, +      localhost = new SslContextBuilder(), +          .certificateChain(heldCertificate), +          .addTrustedCertificate(heldCertificate.certificate), +          .build();, +, +      return localhost;, +, +  private HeldCertificate[] chain;, +  private List<X509Certificate> trustedCertificates = new ArrayList<>();, +, +  /**, +   * Configure the certificate chain to use when serving HTTPS responses. The first certificate, +   * in this chain is the server's certificate, further certificates are included in the handshake, +   * so the client can build a trusted path to a CA certificate., +   */, +  public SslContextBuilder certificateChain(HeldCertificate... chain) {, +    this.chain = chain;, +    return this;, +  }, +, +  /**, +   * Add a certificate authority that this client trusts. Servers that provide certificate chains, +   * signed by these roots (or their intermediates) will be accepted., +   */, +  public SslContextBuilder addTrustedCertificate(X509Certificate certificate) {, +    trustedCertificates.add(certificate);, +    return this;, +, +    if (chain != null) {, +      Certificate[] certificates = new Certificate[chain.length];, +      for (int i = 0; i < chain.length; i++) {, +        certificates[i] = chain[i].certificate;, +      }, +      keyStore.setKeyEntry("private", chain[0].keyPair.getPrivate(), password, certificates);, +    }, +, +    for (int i = 0; i < trustedCertificates.size(); i++) {, +      keyStore.setCertificateEntry("cert_" + i, trustedCertificates.get(i));, +    }, +++ b/mockwebserver/src/main/java/okhttp3/internal/HeldCertificate.java, +import org.bouncycastle.asn1.x509.BasicConstraints;, +import org.bouncycastle.asn1.x509.X509Extensions;, +    private int maxIntermediateCas;, +     * Set this certificate's name. Typically this is the URL hostname for TLS certificates. This is]