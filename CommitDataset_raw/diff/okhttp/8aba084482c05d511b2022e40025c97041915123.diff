[+++ b/okhttp/build.gradle, +      'okhttp3.Dispatcher#cancelAll()',, +      'okhttp3.Dispatcher#executorService()',, +      'okhttp3.Dispatcher#getMaxRequests()',, +      'okhttp3.Dispatcher#getMaxRequestsPerHost()',, +      'okhttp3.Dispatcher#queuedCalls()',, +      'okhttp3.Dispatcher#queuedCallsCount()',, +      'okhttp3.Dispatcher#runningCalls()',, +      'okhttp3.Dispatcher#runningCallsCount()',, +      'okhttp3.Dispatcher#setIdleCallback(java.lang.Runnable)',, +      'okhttp3.Dispatcher#setMaxRequests(int)',, +      'okhttp3.Dispatcher#setMaxRequestsPerHost(int)',, +++ b/okhttp/build.gradle, +      'okhttp3.Dispatcher#cancelAll()',, +      'okhttp3.Dispatcher#executorService()',, +      'okhttp3.Dispatcher#getMaxRequests()',, +      'okhttp3.Dispatcher#getMaxRequestsPerHost()',, +      'okhttp3.Dispatcher#queuedCalls()',, +      'okhttp3.Dispatcher#queuedCallsCount()',, +      'okhttp3.Dispatcher#runningCalls()',, +      'okhttp3.Dispatcher#runningCallsCount()',, +      'okhttp3.Dispatcher#setIdleCallback(java.lang.Runnable)',, +      'okhttp3.Dispatcher#setMaxRequests(int)',, +      'okhttp3.Dispatcher#setMaxRequestsPerHost(int)',, +++ /dev/null, +++ b/okhttp/build.gradle, +      'okhttp3.Dispatcher#cancelAll()',, +      'okhttp3.Dispatcher#executorService()',, +      'okhttp3.Dispatcher#getMaxRequests()',, +      'okhttp3.Dispatcher#getMaxRequestsPerHost()',, +      'okhttp3.Dispatcher#queuedCalls()',, +      'okhttp3.Dispatcher#queuedCallsCount()',, +      'okhttp3.Dispatcher#runningCalls()',, +      'okhttp3.Dispatcher#runningCallsCount()',, +      'okhttp3.Dispatcher#setIdleCallback(java.lang.Runnable)',, +      'okhttp3.Dispatcher#setMaxRequests(int)',, +      'okhttp3.Dispatcher#setMaxRequestsPerHost(int)',, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.kt, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3, +, +import okhttp3.RealCall.AsyncCall, +import okhttp3.internal.Util, +import java.util.ArrayDeque, +import java.util.ArrayList, +import java.util.Collections, +import java.util.Deque, +import java.util.concurrent.ExecutorService, +import java.util.concurrent.SynchronousQueue, +import java.util.concurrent.ThreadPoolExecutor, +import java.util.concurrent.TimeUnit, +, +/**, + * Policy on when async requests are executed., + *, + *, + * Each dispatcher uses an [ExecutorService] to run calls internally. If you supply your own, + * executor, it should be able to run [the configured maximum][maxRequests] number of calls, + * concurrently., + */, +class Dispatcher constructor() {, +  /**, +   * Set the maximum number of requests to execute concurrently. Above this requests queue in, +   * memory, waiting for the running calls to complete., +   *, +   * If more than `maxRequests` requests are in flight when this is invoked, those requests, +   * will remain in flight., +   */, +  @get:Synchronized var maxRequests = 64, +    set(maxRequests) {, +      require(maxRequests >= 1) { "max < 1: $maxRequests" }, +      synchronized(this) {, +        field = maxRequests, +      }, +      promoteAndExecute(), +    }, +, +  /**, +   * Set the maximum number of requests for each host to execute concurrently. This limits requests, +   * by the URL's host name. Note that concurrent requests to a single IP address may still exceed, +   * this limit: multiple hostnames may share an IP address or be routed through the same HTTP, +   * proxy., +   *, +   * If more than `maxRequestsPerHost` requests are in flight when this is invoked, those, +   * requests will remain in flight.]