[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void recoverWhenRetryOnConnectionFailureIsTrue() throws Exception {, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AT_START));, +    server.enqueue(new MockResponse().setBody("retry success"));, +, +    Internal.instance.setNetwork(client, new DoubleInetAddressNetwork());, +    assertTrue(client.getRetryOnConnectionFailure());, +, +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    Response response = client.newCall(request).execute();, +    assertEquals("retry success", response.body().string());, +  }, +, +  @Test public void noRecoverWhenRetryOnConnectionFailureIsFalse() throws Exception {, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AT_START));, +    server.enqueue(new MockResponse().setBody("unreachable!"));, +, +    Internal.instance.setNetwork(client, new DoubleInetAddressNetwork());, +    client.setRetryOnConnectionFailure(false);, +, +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    try {, +      // If this succeeds, too many requests were made., +      client.newCall(request).execute();, +      fail();, +    } catch (IOException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void recoverWhenRetryOnConnectionFailureIsTrue() throws Exception {, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AT_START));, +    server.enqueue(new MockResponse().setBody("retry success"));, +, +    Internal.instance.setNetwork(client, new DoubleInetAddressNetwork());, +    assertTrue(client.getRetryOnConnectionFailure());, +, +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    Response response = client.newCall(request).execute();, +    assertEquals("retry success", response.body().string());, +  }, +, +  @Test public void noRecoverWhenRetryOnConnectionFailureIsFalse() throws Exception {, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AT_START));, +    server.enqueue(new MockResponse().setBody("unreachable!"));, +, +    Internal.instance.setNetwork(client, new DoubleInetAddressNetwork());, +    client.setRetryOnConnectionFailure(false);, +, +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    try {, +      // If this succeeds, too many requests were made., +      client.newCall(request).execute();, +      fail();, +    } catch (IOException expected) {, +    }, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +  private boolean retryOnConnectionFailure = true;, +    this.retryOnConnectionFailure = okHttpClient.retryOnConnectionFailure;, +  /**, +   * Configure this client to retry or not when a connectivity problem is encountered. By default,, +   * this client silently recovers from the following problems:, +   *, +   * <ul>, +   *   <li><strong>Unreachable IP addresses.</strong> If the URL's host has multiple IP addresses,, +   *       failure to reach any individual IP address doesn't fail the overall request. This can, +   *       increase availability of multi-homed services., +   *   <li><strong>Stale pooled connections.</strong> The {@link ConnectionPool} reuses sockets, +   *       to decrease request latency, but these connections will occasionally time out., +   *   <li><strong>Unreachable proxy servers.</strong> A {@link ProxySelector} can be used to, +   *       attempt multiple proxy servers in sequence, eventually falling back to a direct, +   *       connection., +   * </ul>, +   *, +   * Set this to false to avoid retrying requests when doing so is destructive. In this case the, +   * calling application should do its own recovery of connectivity failures., +   */, +  public final void setRetryOnConnectionFailure(boolean retryOnConnectionFailure) {, +    this.retryOnConnectionFailure = retryOnConnectionFailure;, +  }, +, +  public final boolean getRetryOnConnectionFailure() {, +    return retryOnConnectionFailure;, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void recoverWhenRetryOnConnectionFailureIsTrue() throws Exception {, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AT_START));, +    server.enqueue(new MockResponse().setBody("retry success"));, +, +    Internal.instance.setNetwork(client, new DoubleInetAddressNetwork());, +    assertTrue(client.getRetryOnConnectionFailure());, +, +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    Response response = client.newCall(request).execute();, +    assertEquals("retry success", response.body().string());, +  }, +]