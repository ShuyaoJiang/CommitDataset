[+++ b/src/main/java/com/squareup/okhttp/Address.java, +import static com.squareup.okhttp.internal.Util.equal;, +, +  /** Returns the hostname of the origin server. */, +++ b/src/main/java/com/squareup/okhttp/Address.java, +import static com.squareup.okhttp.internal.Util.equal;, +, +  /** Returns the hostname of the origin server. */, +++ b/src/main/java/com/squareup/okhttp/Connection.java, +import static java.net.HttpURLConnection.HTTP_OK;, +import static java.net.HttpURLConnection.HTTP_PROXY_AUTH;, +, +  private static final byte[] NPN_PROTOCOLS =, +      new byte[] { 6, 's', 'p', 'd', 'y', '/', '3', 8, 'h', 't', 't', 'p', '/', '1', '.', '1', };, +  private static final byte[] SPDY3 = new byte[] { 's', 'p', 'd', 'y', '/', '3', };, +  private static final byte[] HTTP_11 = new byte[] { 'h', 't', 't', 'p', '/', '1', '.', '1', };, +    socket = (proxy.type() != Proxy.Type.HTTP) ? new Socket(proxy) : new Socket();, +    socket = address.sslSocketFactory, +        .createSocket(socket, address.uriHost, address.uriPort, true /* autoClose */);, +    if (modernTls && (selectedProtocol = platform.getNpnSelectedProtocol(sslSocket)) != null) {, +        throw new IOException(, +            "Unexpected NPN transport " + new String(selectedProtocol, "ISO-8859-1"));, +  /** Returns true if {@link #connect} has been attempted on this connection. */, +  /** Returns true if this connection is alive. */, +  /** Returns true if this connection is idle. */, +  /** Returns the transport appropriate for this connection. */, +    return (spdyConnection != null) ? new SpdyTransport(httpEngine, spdyConnection), +          boolean credentialsFound =, +              HttpAuthenticator.processAuthHeader(HTTP_PROXY_AUTH, responseHeaders, requestHeaders,, +                  proxy, url);, +          throw new IOException(, +              "Unexpected response code for CONNECT: " + responseHeaders.getResponseCode());, +++ b/src/main/java/com/squareup/okhttp/Address.java, +import static com.squareup.okhttp.internal.Util.equal;, +, +  /** Returns the hostname of the origin server. */, +++ b/src/main/java/com/squareup/okhttp/Connection.java, +import static java.net.HttpURLConnection.HTTP_OK;, +import static java.net.HttpURLConnection.HTTP_PROXY_AUTH;, +, +  private static final byte[] NPN_PROTOCOLS =, +      new byte[] { 6, 's', 'p', 'd', 'y', '/', '3', 8, 'h', 't', 't', 'p', '/', '1', '.', '1', };, +  private static final byte[] SPDY3 = new byte[] { 's', 'p', 'd', 'y', '/', '3', };, +  private static final byte[] HTTP_11 = new byte[] { 'h', 't', 't', 'p', '/', '1', '.', '1', };, +    socket = (proxy.type() != Proxy.Type.HTTP) ? new Socket(proxy) : new Socket();, +    socket = address.sslSocketFactory, +        .createSocket(socket, address.uriHost, address.uriPort, true /* autoClose */);, +    if (modernTls && (selectedProtocol = platform.getNpnSelectedProtocol(sslSocket)) != null) {, +        throw new IOException(, +            "Unexpected NPN transport " + new String(selectedProtocol, "ISO-8859-1"));, +  /** Returns true if {@link #connect} has been attempted on this connection. */, +  /** Returns true if this connection is alive. */, +  /** Returns true if this connection is idle. */, +  /** Returns the transport appropriate for this connection. */, +    return (spdyConnection != null) ? new SpdyTransport(httpEngine, spdyConnection), +          boolean credentialsFound =, +              HttpAuthenticator.processAuthHeader(HTTP_PROXY_AUTH, responseHeaders, requestHeaders,, +                  proxy, url);, +          throw new IOException(, +              "Unexpected response code for CONNECT: " + responseHeaders.getResponseCode());, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, + * Manages reuse of HTTP and SPDY connections for reduced network latency. HTTP, + * requests that share the same {@link com.squareup.okhttp.Address} may share a, + * {@link com.squareup.okhttp.Connection}. This class implements the policy of, + * which connections to keep open for future use., + * <p>The {@link #getDefault() system-wide default} uses system properties for, + * tuning parameters:, + *     <li>{@code http.keepAlive} true if HTTP and SPDY connections should be, + *         pooled at all. Default is true., + *     <li>{@code http.maxConnections} maximum number of idle connections to, + *         each to keep in the pool. Default is 5., + *     <li>{@code http.keepAliveDuration} Time in milliseconds to keep the, + *         connection alive in the pool before closing it. Default is 5 minutes., + *         This property isn't used by {@code HttpURLConnection}., + * <p>The default instance <i>doesn't</i> adjust its configuration as system, + * properties are changed. This assumes that the applications that set these, + * parameters do so before making HTTP connections, and that this class is, + * initialized lazily., +        for (Iterator<Connection> i = connections.descendingIterator();, +            i.hasNext() && idleConnectionCount > maxIdleConnections; ) {, +  /** Returns total number of connections in the pool. */, +  /** Returns total number of spdy connections in the pool. */, +  /** Returns total number of http connections in the pool. */, +++ b/src/main/java/com/squareup/okhttp/Address.java, +import static com.squareup.okhttp.internal.Util.equal;, +, +  /** Returns the hostname of the origin server. */, +++ b/src/main/java/com/squareup/okhttp/Connection.java, +import static java.net.HttpURLConnection.HTTP_OK;, +import static java.net.HttpURLConnection.HTTP_PROXY_AUTH;, +, +  private static final byte[] NPN_PROTOCOLS =, +      new byte[] { 6, 's', 'p', 'd', 'y', '/', '3', 8, 'h', 't', 't', 'p', '/', '1', '.', '1', };, +  private static final byte[] SPDY3 = new byte[] { 's', 'p', 'd', 'y', '/', '3', };, +  private static final byte[] HTTP_11 = new byte[] { 'h', 't', 't', 'p', '/', '1', '.', '1', };, +    socket = (proxy.type() != Proxy.Type.HTTP) ? new Socket(proxy) : new Socket();, +    socket = address.sslSocketFactory, +        .createSocket(socket, address.uriHost, address.uriPort, true /* autoClose */);, +    if (modernTls && (selectedProtocol = platform.getNpnSelectedProtocol(sslSocket)) != null) {, +        throw new IOException(]