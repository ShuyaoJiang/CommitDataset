[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Test public void customBasicAuthenticator() throws Exception {, +  @Test public void customTokenAuthenticator() throws Exception {, +    MockResponse pleaseAuthenticate = new MockResponse().setResponseCode(401), +            .addHeader("WWW-Authenticate: Bearer realm=\"oauthed\""), +            .setBody("Please authenticate.");, +    server.enqueue(pleaseAuthenticate);, +    server.enqueue(new MockResponse().setBody("A"));, +    server.play();, +, +    Credential credential = Credential.oauth("oauthed", "abc123");, +    RecordingOkAuthenticator authenticator = new RecordingOkAuthenticator(credential);, +    client.setAuthenticator(authenticator);, +    assertContent("A", client.open(server.getUrl("/private")));, +, +    assertContainsNoneMatching(server.takeRequest().getHeaders(), "Authorization: .*");, +    assertContains(server.takeRequest().getHeaders(),, +            "Authorization: " + credential.getHeaderValue());, +, +    assertEquals(1, authenticator.calls.size());, +    String call = authenticator.calls.get(0);, +    assertTrue(call, call.contains("proxy=DIRECT"));, +    assertTrue(call, call.contains("url=" + server.getUrl("/private")));, +    assertTrue(call, call.contains("challenges=[Bearer realm=\"oauthed\"]"));, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Test public void customBasicAuthenticator() throws Exception {, +  @Test public void customTokenAuthenticator() throws Exception {, +    MockResponse pleaseAuthenticate = new MockResponse().setResponseCode(401), +            .addHeader("WWW-Authenticate: Bearer realm=\"oauthed\""), +            .setBody("Please authenticate.");, +    server.enqueue(pleaseAuthenticate);, +    server.enqueue(new MockResponse().setBody("A"));, +    server.play();, +, +    Credential credential = Credential.oauth("oauthed", "abc123");, +    RecordingOkAuthenticator authenticator = new RecordingOkAuthenticator(credential);, +    client.setAuthenticator(authenticator);, +    assertContent("A", client.open(server.getUrl("/private")));, +, +    assertContainsNoneMatching(server.takeRequest().getHeaders(), "Authorization: .*");, +    assertContains(server.takeRequest().getHeaders(),, +            "Authorization: " + credential.getHeaderValue());, +, +    assertEquals(1, authenticator.calls.size());, +    String call = authenticator.calls.get(0);, +    assertTrue(call, call.contains("proxy=DIRECT"));, +    assertTrue(call, call.contains("url=" + server.getUrl("/private")));, +    assertTrue(call, call.contains("challenges=[Bearer realm=\"oauthed\"]"));, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkAuthenticator.java, +    public Credential(String headerValue) {, +    public static Credential oauth(String bearer, String token) {, +      return new Credential(bearer + " " + token);, +    }, +]