[+++ b/okcurl/pom.xml, +      <artifactId>logging-interceptor</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +++ b/okcurl/pom.xml, +      <artifactId>logging-interceptor</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.logging.HttpLoggingInterceptor;, +import okhttp3.logging.LoggingEventListener;, +  @Option(, +      name = {"-v", "--verbose"},, +      description = "Makes " + NAME + " verbose during the operation"), +  public boolean verbose;, +, +    if (verbose) {, +      HttpLoggingInterceptor.Logger logger =, +          new HttpLoggingInterceptor.Logger() {, +            @Override, +            public void log(String message) {, +              System.out.println(message);, +            }, +          };, +      builder.eventListenerFactory(new LoggingEventListener.Factory(logger));, +    }, +++ b/okcurl/pom.xml, +      <artifactId>logging-interceptor</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +import okhttp3.logging.HttpLoggingInterceptor;, +import okhttp3.logging.LoggingEventListener;, +  @Option(, +      name = {"-v", "--verbose"},, +      description = "Makes " + NAME + " verbose during the operation"), +  public boolean verbose;, +, +    if (verbose) {, +      HttpLoggingInterceptor.Logger logger =, +          new HttpLoggingInterceptor.Logger() {, +            @Override, +            public void log(String message) {, +              System.out.println(message);, +            }, +          };, +      builder.eventListenerFactory(new LoggingEventListener.Factory(logger));, +    }, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.logging;, +, +import java.io.IOException;, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.net.Proxy;, +import java.util.List;, +import java.util.concurrent.TimeUnit;, +import javax.annotation.Nullable;, +import okhttp3.Call;, +import okhttp3.Connection;, +import okhttp3.EventListener;, +import okhttp3.Handshake;, +import okhttp3.OkHttpClient;, +import okhttp3.Protocol;, +import okhttp3.Request;, +import okhttp3.Response;, +, +/**, + * An OkHttp EventListener, which logs call events. Can be applied as an, + * {@linkplain OkHttpClient#eventListenerFactory() event listener factory}., + *, + * <p>The format of the logs created by this class should not be considered stable and may change, + * slightly between releases. If you need a stable logging format, use your own event listener., + */, +public final class LoggingEventListener extends EventListener {, +  private final HttpLoggingInterceptor.Logger logger;, +  private long startNs;, +, +  private LoggingEventListener(HttpLoggingInterceptor.Logger logger) {]