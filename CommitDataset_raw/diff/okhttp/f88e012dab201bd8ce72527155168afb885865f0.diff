[+++ b/mockwebserver/src/main/java/okhttp3/internal/tls/HeldCertificate.java, +import java.util.ArrayList;, +import java.util.List;, +import org.bouncycastle.asn1.ASN1Encodable;, +import org.bouncycastle.asn1.DERSequence;, +import org.bouncycastle.asn1.x509.GeneralName;, +import static okhttp3.internal.Util.verifyAsIpAddress;, +, +    private List<String> altNames = new ArrayList<>();, +    /**, +     * Adds a subject alternative name to the certificate. This is usually a hostname or IP address., +     * If no subject alternative names are added that extension will not be used., +     */, +    public Builder subjectAlternativeName(String altName) {, +      altNames.add(altName);, +      return this;, +    }, +, +      if (!altNames.isEmpty()) {, +        ASN1Encodable[] encodableAltNames = new ASN1Encodable[altNames.size()];, +        for (int i = 0, size = altNames.size(); i < size; i++) {, +          String altName = altNames.get(i);, +          int tag = verifyAsIpAddress(altName), +              ? GeneralName.iPAddress, +              : GeneralName.dNSName;, +          encodableAltNames[i] = new GeneralName(tag, altName);, +        }, +        generator.addExtension(X509Extensions.SubjectAlternativeName, true,, +            new DERSequence(encodableAltNames));, +      }, +, +++ b/mockwebserver/src/main/java/okhttp3/internal/tls/HeldCertificate.java, +import java.util.ArrayList;, +import java.util.List;, +import org.bouncycastle.asn1.ASN1Encodable;, +import org.bouncycastle.asn1.DERSequence;, +import org.bouncycastle.asn1.x509.GeneralName;, +import static okhttp3.internal.Util.verifyAsIpAddress;, +, +    private List<String> altNames = new ArrayList<>();, +    /**, +     * Adds a subject alternative name to the certificate. This is usually a hostname or IP address., +     * If no subject alternative names are added that extension will not be used., +     */, +    public Builder subjectAlternativeName(String altName) {, +      altNames.add(altName);, +      return this;, +    }, +, +      if (!altNames.isEmpty()) {, +        ASN1Encodable[] encodableAltNames = new ASN1Encodable[altNames.size()];, +        for (int i = 0, size = altNames.size(); i < size; i++) {, +          String altName = altNames.get(i);, +          int tag = verifyAsIpAddress(altName), +              ? GeneralName.iPAddress, +              : GeneralName.dNSName;, +          encodableAltNames[i] = new GeneralName(tag, altName);, +        }, +        generator.addExtension(X509Extensions.SubjectAlternativeName, true,, +            new DERSequence(encodableAltNames));, +      }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.internal.tls.HeldCertificate;, +  @Test public void httpsWithIpAddress() throws Exception {, +    String localIpAddress = InetAddress.getLoopbackAddress().getHostAddress();, +, +    // Create a certificate with an IP address in the subject alt name., +    HeldCertificate heldCertificate = new HeldCertificate.Builder(), +        .commonName("example.com"), +        .subjectAlternativeName(localIpAddress), +        .build();, +    SslClient sslClient = new SslClient.Builder(), +        .certificateChain(heldCertificate.keyPair, heldCertificate.certificate), +        .addTrustedCertificate(heldCertificate.certificate), +        .build();, +, +    // Use that certificate on the server and trust it on the client., +    server.useHttps(sslClient.socketFactory, false);, +    client = client.newBuilder(), +        .sslSocketFactory(sslClient.socketFactory, sslClient.trustManager), +        .hostnameVerifier(new RecordingHostnameVerifier()), +        .protocols(Collections.singletonList(Protocol.HTTP_1_1)), +        .build();, +, +    // Make a request., +    server.enqueue(new MockResponse());, +    HttpUrl url = server.url("/").newBuilder(), +        .host(localIpAddress), +        .build();, +    Request request = new Request.Builder(), +        .url(url), +        .build();, +    executeSynchronously(request), +        .assertCode(200);, +, +    // Confirm that the IP address was used in the host header., +    RecordedRequest recordedRequest = server.takeRequest();, +    assertEquals(localIpAddress + ":" + server.getPort(), recordedRequest.getHeader("Host"));, +  }]