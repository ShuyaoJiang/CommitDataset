[+++ b/okhttp-tests/src/test/java/okhttp3/internal/DiskLruCacheTest.java, +  @Test public void rebuildJournalFailurePreventsEditors() throws Exception {, +    while (executor.jobs.isEmpty()) {, +      set("a", "a", "a");, +      set("b", "b", "b");, +    }, +, +    // Cause the rebuild action to fail., +    fileSystem.setFaultyRename(new File(cacheDir, DiskLruCache.JOURNAL_FILE_BACKUP), true);, +    executor.jobs.removeFirst().run();, +, +    // Don't allow edits under any circumstances., +    assertNull(cache.edit("a"));, +    assertNull(cache.edit("c"));, +    DiskLruCache.Snapshot snapshot = cache.get("a");, +    assertNull(snapshot.edit());, +    snapshot.close();, +  }, +, +  @Test public void rebuildJournalFailureIsRetried() throws Exception {, +    while (executor.jobs.isEmpty()) {, +      set("a", "a", "a");, +      set("b", "b", "b");, +    }, +, +    // Cause the rebuild action to fail., +    fileSystem.setFaultyRename(new File(cacheDir, DiskLruCache.JOURNAL_FILE_BACKUP), true);, +    executor.jobs.removeFirst().run();, +, +    // The rebuild is retried on cache hits and on cache edits., +    DiskLruCache.Snapshot snapshot = cache.get("b");, +    snapshot.close();, +    assertNull(cache.edit("d"));, +    assertEquals(2, executor.jobs.size());, +, +    // On cache misses, no retry job is queued., +    assertNull(cache.get("c"));, +    assertEquals(2, executor.jobs.size());, +, +    // Let the rebuild complete successfully., +    fileSystem.setFaultyRename(new File(cacheDir, DiskLruCache.JOURNAL_FILE_BACKUP), false);, +    executor.jobs.removeFirst().run();, +    assertJournalEquals("CLEAN a 1 1", "CLEAN b 1 1");, +  }, +, +  @Test public void rebuildJournalFailureWithInFlightEditors() throws Exception {, +    while (executor.jobs.isEmpty()) {, +      set("a", "a", "a");, +      set("b", "b", "b");, +    }, +    DiskLruCache.Editor commitEditor = cache.edit("c");, +    DiskLruCache.Editor abortEditor = cache.edit("d");, +    cache.edit("e"); // Grab an editor, but don't do anything with it., +, +    // Cause the rebuild action to fail., +    fileSystem.setFaultyRename(new File(cacheDir, DiskLruCache.JOURNAL_FILE_BACKUP), true);, +    executor.jobs.removeFirst().run();, +, +    // In-flight editors can commit and have their values retained., +    setString(commitEditor, 0, "c");, +    setString(commitEditor, 1, "c");, +    commitEditor.commit();, +    assertValue("c", "c", "c");, +, +    abortEditor.abort();, +, +    // Let the rebuild complete successfully., +    fileSystem.setFaultyRename(new File(cacheDir, DiskLruCache.JOURNAL_FILE_BACKUP), false);, +    executor.jobs.removeFirst().run();, +    assertJournalEquals("CLEAN a 1 1", "CLEAN b 1 1", "DIRTY e", "CLEAN c 1 1");, +  }, +, +  @Test public void rebuildJournalFailureWithEditorsInFlightThenClose() throws Exception {, +    while (executor.jobs.isEmpty()) {, +      set("a", "a", "a");, +      set("b", "b", "b");, +    }, +    DiskLruCache.Editor commitEditor = cache.edit("c");, +    DiskLruCache.Editor abortEditor = cache.edit("d");, +    cache.edit("e"); // Grab an editor, but don't do anything with it., +, +    // Cause the rebuild action to fail., +    fileSystem.setFaultyRename(new File(cacheDir, DiskLruCache.JOURNAL_FILE_BACKUP), true);, +    executor.jobs.removeFirst().run();, +, +    setString(commitEditor, 0, "c");, +    setString(commitEditor, 1, "c");, +    commitEditor.commit();, +    assertValue("c", "c", "c");, +, +    abortEditor.abort();, +, +    cache.close();, +    createNewCache();, +, +    // Although 'c' successfully committed above, the journal wasn't available to issue a CLEAN op., +    // Because the last state of 'c' was DIRTY before the journal failed, it should be removed, +    // entirely on a subsequent open., +    assertEquals(4, cache.size());, +    assertAbsent("c");]