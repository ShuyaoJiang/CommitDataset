[+++ b/build.gradle, +++ b/build.gradle, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, + * DNS over HTTPS implementation., + *, + * Implementation of https://tools.ietf.org/html/draft-ietf-doh-dns-over-https-13, + *, +++ b/build.gradle, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, + * DNS over HTTPS implementation., + *, + * Implementation of https://tools.ietf.org/html/draft-ietf-doh-dns-over-https-13, + *, +++ b/okhttp-logging-interceptor/build.gradle, +  methodExcludes = [, +    // Became 'final' in 4.0.0:, +    'okhttp3.logging.HttpLoggingInterceptor#redactHeader(java.lang.String)',, +    'okhttp3.logging.HttpLoggingInterceptor#getLevel()',, +    'okhttp3.logging.HttpLoggingInterceptor#setLevel(okhttp3.logging.HttpLoggingInterceptor$Level)', +  ], +++ b/build.gradle, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, + * DNS over HTTPS implementation., + *, + * Implementation of https://tools.ietf.org/html/draft-ietf-doh-dns-over-https-13, + *, +++ b/okhttp-logging-interceptor/build.gradle, +  methodExcludes = [, +    // Became 'final' in 4.0.0:, +    'okhttp3.logging.HttpLoggingInterceptor#redactHeader(java.lang.String)',, +    'okhttp3.logging.HttpLoggingInterceptor#getLevel()',, +    'okhttp3.logging.HttpLoggingInterceptor#setLevel(okhttp3.logging.HttpLoggingInterceptor$Level)', +  ], +++ /dev/null, +++ b/build.gradle, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, + * DNS over HTTPS implementation., + *, + * Implementation of https://tools.ietf.org/html/draft-ietf-doh-dns-over-https-13, + *, +++ b/okhttp-logging-interceptor/build.gradle, +  methodExcludes = [, +    // Became 'final' in 4.0.0:, +    'okhttp3.logging.HttpLoggingInterceptor#redactHeader(java.lang.String)',, +    'okhttp3.logging.HttpLoggingInterceptor#getLevel()',, +    'okhttp3.logging.HttpLoggingInterceptor#setLevel(okhttp3.logging.HttpLoggingInterceptor$Level)', +  ], +++ /dev/null, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.logging, +, +import okhttp3.Headers, +import okhttp3.Interceptor, +import okhttp3.OkHttpClient, +import okhttp3.Response, +import okhttp3.internal.http.HttpHeaders, +import okhttp3.internal.platform.Platform, +import okhttp3.internal.platform.Platform.Companion.INFO, +import okio.Buffer, +import okio.GzipSource, +import java.io.EOFException, +import java.io.IOException, +import java.nio.charset.Charset, +import java.nio.charset.StandardCharsets, +import java.util.TreeSet, +import java.util.concurrent.TimeUnit, +, +/**, + * An OkHttp interceptor which logs request and response information. Can be applied as an, + * [application interceptor][OkHttpClient.interceptors] or as a [OkHttpClient.networkInterceptors]., + *, + * The format of the logs created by this class should not be considered stable and may, + * change slightly between releases. If you need a stable logging format, use your own interceptor., + */, +class HttpLoggingInterceptor @JvmOverloads constructor(, +  private val logger: Logger = Logger.DEFAULT, +) : Interceptor {, +, +  @Volatile private var headersToRedact = emptySet<String>(), +, +  @Volatile private var level = Level.NONE, +, +  enum class Level {, +    /** No logs. */, +    NONE,]