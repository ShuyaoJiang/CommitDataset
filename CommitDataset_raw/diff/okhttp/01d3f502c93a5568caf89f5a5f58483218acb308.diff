[+++ b/okhttp/build.gradle, +      'okhttp3.CipherSuite#javaName()',, +++ b/okhttp/build.gradle, +      'okhttp3.CipherSuite#javaName()',, +++ /dev/null, +++ b/okhttp/build.gradle, +      'okhttp3.CipherSuite#javaName()',, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/CipherSuite.kt, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3, +, +import java.util.ArrayList, +import java.util.Collections, +, +/**, + * [TLS cipher suites](https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml)., + *, + * **Not all cipher suites are supported on all platforms.** As newer cipher suites are created (for, + * stronger privacy, better performance, etc.) they will be adopted by the platform and then exposed, + * here. Cipher suites that are not available on either Android (through API level 24) or Java, + * (through JDK 9) are omitted for brevity., + *, + * See [Android SSLEngine](https://developer.android.com/reference/javax/net/ssl/SSLEngine.html), + * which lists the cipher suites supported by Android., + *, + * See [JDK 10 Providers](https://docs.oracle.com/javase/10/security/oracle-providers.htm), + * which lists the cipher suites supported by Oracle., + *, + * See [NativeCrypto.java](https://github.com/google/conscrypt/blob/master/common/src/main/java/org/conscrypt/NativeCrypto.java), + * from Conscrypt, which lists the cipher suites supported by Conscrypt., + */, +class CipherSuite private constructor(, +  private val javaName: String, +) {, +  /**, +   * Returns the Java name of this cipher suite. For some older cipher suites the Java name has the, +   * prefix `SSL_`, causing the Java name to be different from the instance name which is always, +   * prefixed `TLS_`. For example, `TLS_RSA_EXPORT_WITH_RC4_40_MD5.javaName()` is, +   * `"SSL_RSA_EXPORT_WITH_RC4_40_MD5"`., +   */, +  fun javaName(): String = javaName, +, +  override fun toString(): String = javaName, +, +  companion object {, +    /**, +     * Compares cipher suites names like "TLS_RSA_WITH_NULL_MD5" and "SSL_RSA_WITH_NULL_MD5",, +     * ignoring the "TLS_" or "SSL_" prefix which is not consistent across platforms. In particular, +     * some IBM JVMs use the "SSL_" prefix everywhere whereas Oracle JVMs mix "TLS_" and "SSL_"., +     */, +    internal val ORDER_BY_NAME = object: Comparator<String> {, +      override fun compare(a: String, b: String): Int {, +        var i = 4, +        val limit = Math.min(a.length, b.length), +        while (i < limit) {, +          val charA = a.get(i), +          val charB = b.get(i), +          if (charA != charB) return if (charA < charB) -1 else 1, +          i++, +        }, +        val lengthA = a.length, +        val lengthB = b.length, +        if (lengthA != lengthB) return if (lengthA < lengthB) -1 else 1, +        return 0, +      }, +    }, +, +    /**, +     * Holds interned instances. This needs to be above the init() calls below so that it's, +     * initialized by the time those parts of `<clinit>()` run. Guarded by CipherSuite.class., +     */, +    private val INSTANCES = mutableMapOf<String, CipherSuite>(), +, +    // Last updated 2016-07-03 using cipher suites from Android 24 and Java 9., +, +    // @JvmField val TLS_NULL_WITH_NULL_NULL = init("TLS_NULL_WITH_NULL_NULL", 0x0000), +    @JvmField val TLS_RSA_WITH_NULL_MD5 = init("SSL_RSA_WITH_NULL_MD5", 0x0001), +    @JvmField val TLS_RSA_WITH_NULL_SHA = init("SSL_RSA_WITH_NULL_SHA", 0x0002), +    @JvmField val TLS_RSA_EXPORT_WITH_RC4_40_MD5 = init("SSL_RSA_EXPORT_WITH_RC4_40_MD5", 0x0003), +    @JvmField val TLS_RSA_WITH_RC4_128_MD5 = init("SSL_RSA_WITH_RC4_128_MD5", 0x0004), +    @JvmField val TLS_RSA_WITH_RC4_128_SHA = init("SSL_RSA_WITH_RC4_128_SHA", 0x0005), +    // @JvmField val TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5 = init("SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5", 0x0006), +    // @JvmField val TLS_RSA_WITH_IDEA_CBC_SHA = init("TLS_RSA_WITH_IDEA_CBC_SHA", 0x0007), +    @JvmField val TLS_RSA_EXPORT_WITH_DES40_CBC_SHA = init("SSL_RSA_EXPORT_WITH_DES40_CBC_SHA", 0x0008), +    @JvmField val TLS_RSA_WITH_DES_CBC_SHA = init("SSL_RSA_WITH_DES_CBC_SHA", 0x0009)]