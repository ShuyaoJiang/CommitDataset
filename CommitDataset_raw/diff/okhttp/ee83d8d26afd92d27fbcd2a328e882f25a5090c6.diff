[+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      if (position == 0 || position > response.headers().size()) {, +      if (position > response.headers().size()) {, +        return null;, +      }, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      if (position == 0 || position > response.headers().size()) {, +      if (position > response.headers().size()) {, +        return null;, +      }, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +  @Test public void connectViaHttpsReusingConnectionsDifferentFactories() throws Exception {, +    SSLContext sslContext2 = SSLContext.getInstance("TLS");, +    sslContext2.init(null, null, null);, +    SSLSocketFactory sslSocketFactory2 = sslContext2.getSocketFactory();, +        .sslSocketFactory(sslSocketFactory2), +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      if (position == 0 || position > response.headers().size()) {, +      if (position > response.headers().size()) {, +        return null;, +      }, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +  @Test public void connectViaHttpsReusingConnectionsDifferentFactories() throws Exception {, +    SSLContext sslContext2 = SSLContext.getInstance("TLS");, +    sslContext2.init(null, null, null);, +    SSLSocketFactory sslSocketFactory2 = sslContext2.getSocketFactory();, +        .sslSocketFactory(sslSocketFactory2), +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/HeadersTest.java, +, +  @Test public void nameIndexesAreStrict() {, +    Headers headers = Headers.of("a", "b", "c", "d");, +    try {, +      headers.name(-1);, +      fail();, +    } catch (IndexOutOfBoundsException expected) {, +    }, +    assertEquals("a", headers.name(0));, +    assertEquals("c", headers.name(1));, +    try {, +      headers.name(2);, +      fail();, +    } catch (IndexOutOfBoundsException expected) {, +    }, +  }, +, +  @Test public void valueIndexesAreStrict() {, +    Headers headers = Headers.of("a", "b", "c", "d");, +    try {, +      headers.value(-1);, +      fail();, +    } catch (IndexOutOfBoundsException expected) {, +    }, +    assertEquals("b", headers.value(0));, +    assertEquals("d", headers.value(1));, +    try {, +      headers.value(2);, +      fail();, +    } catch (IndexOutOfBoundsException expected) {, +    }, +  }, +++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java, +      if (position == 0 || position > response.headers().size()) {, +      if (position > response.headers().size()) {, +        return null;, +      }, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +  @Test public void connectViaHttpsReusingConnectionsDifferentFactories() throws Exception {, +    SSLContext sslContext2 = SSLContext.getInstance("TLS");, +    sslContext2.init(null, null, null);, +    SSLSocketFactory sslSocketFactory2 = sslContext2.getSocketFactory();, +        .sslSocketFactory(sslSocketFactory2), +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/HeadersTest.java, +, +  @Test public void nameIndexesAreStrict() {, +    Headers headers = Headers.of("a", "b", "c", "d");, +    try {, +      headers.name(-1);, +      fail();, +    } catch (IndexOutOfBoundsException expected) {, +    }, +    assertEquals("a", headers.name(0));, +    assertEquals("c", headers.name(1));, +    try {, +      headers.name(2);, +      fail();, +    } catch (IndexOutOfBoundsException expected) {, +    }, +  }, +, +  @Test public void valueIndexesAreStrict() {, +    Headers headers = Headers.of("a", "b", "c", "d");, +    try {, +      headers.value(-1);, +      fail();, +    } catch (IndexOutOfBoundsException expected) {, +    }, +    assertEquals("b", headers.value(0));, +    assertEquals("d", headers.value(1));, +    try {, +      headers.value(2);]