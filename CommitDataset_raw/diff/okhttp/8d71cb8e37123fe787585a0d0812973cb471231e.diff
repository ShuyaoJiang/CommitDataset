[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/FormEncodingBuilderTest.java, +        .add("a+=& b", "c+=& d"), +    String expected = "a%2B%3D%26%20b=c%2B%3D%26%20d&space%2C%20the=final%20frontier&%2525=%2525";, +    String expected = "a+%3D%26%20b=c+%3D%26%20d&e+%3D%26%20f=g+%3D%26%20h&%25=%25";, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/FormEncodingBuilderTest.java, +        .add("a+=& b", "c+=& d"), +    String expected = "a%2B%3D%26%20b=c%2B%3D%26%20d&space%2C%20the=final%20frontier&%2525=%2525";, +    String expected = "a+%3D%26%20b=c+%3D%26%20d&e+%3D%26%20f=g+%3D%26%20h&%25=%25";, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +    assertEquals("http://host/?a+%3D%26%20b=c+%3D%26%20d", url.toString());, +    assertEquals("http://host/?a+%3D%26%20b=ef", url.toString());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/FormEncodingBuilderTest.java, +        .add("a+=& b", "c+=& d"), +    String expected = "a%2B%3D%26%20b=c%2B%3D%26%20d&space%2C%20the=final%20frontier&%2525=%2525";, +    String expected = "a+%3D%26%20b=c+%3D%26%20d&e+%3D%26%20f=g+%3D%26%20h&%25=%25";, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +    assertEquals("http://host/?a+%3D%26%20b=c+%3D%26%20d", url.toString());, +    assertEquals("http://host/?a+%3D%26%20b=ef", url.toString());, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpUrl.java, +    this.username = percentDecode(builder.encodedUsername, false);, +    this.password = percentDecode(builder.encodedPassword, false);, +    this.pathSegments = percentDecode(builder.encodedPathSegments, false);, +        ? percentDecode(builder.encodedQueryNamesAndValues, true), +        ? percentDecode(builder.encodedFragment, false), +      String percentDecoded = percentDecode(input, pos, limit, false);, +  static String percentDecode(String encoded, boolean plusIsSpace) {, +    return percentDecode(encoded, 0, encoded.length(), plusIsSpace);, +  private List<String> percentDecode(List<String> list, boolean plusIsSpace) {, +      result.add(s != null ? percentDecode(s, plusIsSpace) : null);, +  static String percentDecode(String encoded, int pos, int limit, boolean plusIsSpace) {, +      if (c == '%' || (c == '+' && plusIsSpace)) {, +        percentDecode(out, encoded, i, limit, plusIsSpace);, +  static void percentDecode(Buffer out, String encoded, int pos, int limit, boolean plusIsSpace) {, +      } else if (codePoint == '+' && plusIsSpace) {, +        out.writeByte(' ');, +        continue;, +   * @param plusIsSpace true to encode '+' as "%2B" if it is not already encoded., +      boolean alreadyEncoded, boolean plusIsSpace, boolean asciiOnly) {, +          || (codePoint == '+' && plusIsSpace)) {, +        canonicalize(out, input, i, limit, encodeSet, alreadyEncoded, plusIsSpace, asciiOnly);, +      String encodeSet, boolean alreadyEncoded, boolean plusIsSpace, boolean asciiOnly) {, +      } else if (codePoint == '+' && plusIsSpace) {, +        // Encode '+' as '%2B' since we permit ' ' to be encoded as either '+' or '%20'., +        out.writeUtf8(alreadyEncoded ? "+" : "%2B");, +  static String canonicalize(String input, String encodeSet, boolean alreadyEncoded,, +      boolean plusIsSpace, boolean asciiOnly) {, +    return canonicalize(, +        input, 0, input.length(), encodeSet, alreadyEncoded, plusIsSpace, asciiOnly);]