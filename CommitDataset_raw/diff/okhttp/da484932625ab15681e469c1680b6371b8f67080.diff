[+++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +import java.net.URL;, +  public void connect(int connectTimeout, int readTimeout, int writeTimeout, Request tunnelRequest), +      throws IOException {, +  private void upgradeToTls(Request tunnelRequest, int readTimeout, int writeTimeout), +    if (tunnelRequest != null) {, +  private void makeTunnel(Request request, int readTimeout, int writeTimeout), +    URL url = request.url();, +    String requestLine = "CONNECT " + url.getHost() + ":" + url.getPort() + " HTTP/1.1";, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +import java.net.URL;, +  public void connect(int connectTimeout, int readTimeout, int writeTimeout, Request tunnelRequest), +      throws IOException {, +  private void upgradeToTls(Request tunnelRequest, int readTimeout, int writeTimeout), +    if (tunnelRequest != null) {, +  private void makeTunnel(Request request, int readTimeout, int writeTimeout), +    URL url = request.url();, +    String requestLine = "CONNECT " + url.getHost() + ":" + url.getPort() + " HTTP/1.1";, +++ b/okhttp/src/main/java/com/squareup/okhttp/Route.java, +  /**, +   * Returns true if this route tunnels HTTPS through an HTTP proxy. See <a, +   * href="http://www.ietf.org/rfc/rfc2817.txt">RFC 2817, Section 5.2</a>., +   */, +  public boolean requiresTunnel() {, +    return address.sslSocketFactory != null && proxy.type() == Proxy.Type.HTTP;, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +import java.net.URL;, +  public void connect(int connectTimeout, int readTimeout, int writeTimeout, Request tunnelRequest), +      throws IOException {, +  private void upgradeToTls(Request tunnelRequest, int readTimeout, int writeTimeout), +    if (tunnelRequest != null) {, +  private void makeTunnel(Request request, int readTimeout, int writeTimeout), +    URL url = request.url();, +    String requestLine = "CONNECT " + url.getHost() + ":" + url.getPort() + " HTTP/1.1";, +++ b/okhttp/src/main/java/com/squareup/okhttp/Route.java, +  /**, +   * Returns true if this route tunnels HTTPS through an HTTP proxy. See <a, +   * href="http://www.ietf.org/rfc/rfc2817.txt">RFC 2817, Section 5.2</a>., +   */, +  public boolean requiresTunnel() {, +    return address.sslSocketFactory != null && proxy.type() == Proxy.Type.HTTP;, +  }, +, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +import java.net.URL;, +  public void connect(int connectTimeout, int readTimeout, int writeTimeout, Request tunnelRequest), +      throws IOException {, +  private void upgradeToTls(Request tunnelRequest, int readTimeout, int writeTimeout), +    if (tunnelRequest != null) {, +  private void makeTunnel(Request request, int readTimeout, int writeTimeout), +    URL url = request.url();, +    String requestLine = "CONNECT " + url.getHost() + ":" + url.getPort() + " HTTP/1.1";, +++ b/okhttp/src/main/java/com/squareup/okhttp/Route.java, +  /**, +   * Returns true if this route tunnels HTTPS through an HTTP proxy. See <a, +   * href="http://www.ietf.org/rfc/rfc2817.txt">RFC 2817, Section 5.2</a>., +   */, +  public boolean requiresTunnel() {, +    return address.sslSocketFactory != null && proxy.type() == Proxy.Type.HTTP;, +  }, +, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +          client.getWriteTimeout(), tunnelRequest(connection, request));, +  /**, +   * Returns a request that creates a TLS tunnel via an HTTP proxy, or null if, +   * no tunnel is necessary. Everything in the tunnel request is sent, +   * unencrypted to the proxy server, so tunnels include only the minimum set of, +   * headers. This avoids sending potentially sensitive data like HTTP cookies, +   * to the proxy unencrypted., +   */, +  private Request tunnelRequest(Connection connection, Request request) throws IOException {, +    if (!connection.getRoute().requiresTunnel()) return null;, +    String host = request.url().getHost();, +    int port = getEffectivePort(request.url());, +    String authority = (port == getDefaultPort("https")) ? host : (host + ":" + port);, +    Request.Builder result = new Request.Builder(), +        .url(new URL("https", host, port, "/")), +        .header("Host", authority), +        .header("User-Agent", userAgent), +        .header("Proxy-Connection", "Keep-Alive"); // For HTTP/1.0 proxies like Squid., +, +    // Copy over the Proxy-Authorization header if it exists., +    String proxyAuthorization = request.header("Proxy-Authorization");, +    if (proxyAuthorization != null) {, +      result.header("Proxy-Authorization", proxyAuthorization);, +    }, +, +    return result.build();]