[+++ b/src/main/java/libcore/net/http/HttpTransport.java, +import java.net.Socket;, +    /**, +     * The timeout to use while discarding a stream of input data. Since this is, +     * used for connection reuse, this timeout should be significantly less than, +     * the time it takes to establish a new connection., +     */, +    private static final int DISCARD_STREAM_TIMEOUT_MILLIS = 30;, +, +            return discardStream(httpEngine, responseBodyIn);, +    /**, +     * Discards the response body so that the connection can be reused. This, +     * needs to be done judiciously, since it delays the current request in, +     * order to speed up a potential future request that may never occur., +     */, +    private static boolean discardStream(HttpEngine httpEngine, InputStream responseBodyIn) {, +        HttpConnection connection = httpEngine.connection;, +        if (connection == null) return false;, +        Socket socket = connection.getSocket();, +        if (socket == null) return false;, +        try {, +            int socketTimeout = socket.getSoTimeout();, +            socket.setSoTimeout(DISCARD_STREAM_TIMEOUT_MILLIS);, +            try {, +                Streams.skipAll(responseBodyIn);, +                return true;, +            } finally {, +                socket.setSoTimeout(socketTimeout);, +            }, +        } catch (IOException e) {, +            return false;, +        }, +    }, +, +            if (bytesRemaining != 0 && !discardStream(httpEngine, this)) {, +            closed = true;, +            if (hasMoreChunks && !discardStream(httpEngine, this)) {, +            closed = true;, +++ b/src/main/java/libcore/net/http/HttpTransport.java, +import java.net.Socket;, +    /**, +     * The timeout to use while discarding a stream of input data. Since this is, +     * used for connection reuse, this timeout should be significantly less than, +     * the time it takes to establish a new connection., +     */, +    private static final int DISCARD_STREAM_TIMEOUT_MILLIS = 30;, +, +            return discardStream(httpEngine, responseBodyIn);, +    /**, +     * Discards the response body so that the connection can be reused. This, +     * needs to be done judiciously, since it delays the current request in, +     * order to speed up a potential future request that may never occur., +     */, +    private static boolean discardStream(HttpEngine httpEngine, InputStream responseBodyIn) {, +        HttpConnection connection = httpEngine.connection;, +        if (connection == null) return false;, +        Socket socket = connection.getSocket();, +        if (socket == null) return false;, +        try {, +            int socketTimeout = socket.getSoTimeout();, +            socket.setSoTimeout(DISCARD_STREAM_TIMEOUT_MILLIS);, +            try {, +                Streams.skipAll(responseBodyIn);, +                return true;, +            } finally {, +                socket.setSoTimeout(socketTimeout);, +            }, +        } catch (IOException e) {, +            return false;, +        }, +    }, +, +            if (bytesRemaining != 0 && !discardStream(httpEngine, this)) {, +            closed = true;, +            if (hasMoreChunks && !discardStream(httpEngine, this)) {, +            closed = true;, +++ b/src/test/java/libcore/net/http/HttpResponseCacheTest.java, +        // Setting a low transfer speed ensures that stream discarding will time out., +        MockResponse response = new MockResponse().setBytesPerSecond(6);, +++ b/src/main/java/libcore/net/http/HttpTransport.java, +import java.net.Socket;, +    /**, +     * The timeout to use while discarding a stream of input data. Since this is, +     * used for connection reuse, this timeout should be significantly less than, +     * the time it takes to establish a new connection., +     */, +    private static final int DISCARD_STREAM_TIMEOUT_MILLIS = 30;, +, +            return discardStream(httpEngine, responseBodyIn);, +    /**, +     * Discards the response body so that the connection can be reused. This, +     * needs to be done judiciously, since it delays the current request in, +     * order to speed up a potential future request that may never occur., +     */, +    private static boolean discardStream(HttpEngine httpEngine, InputStream responseBodyIn) {, +        HttpConnection connection = httpEngine.connection;, +        if (connection == null) return false;, +        Socket socket = connection.getSocket();, +        if (socket == null) return false;, +        try {]