[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  // This test is ignored because we don't (yet) reliably recover for large request bodies., +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  // This test is ignored because we don't (yet) reliably recover for large request bodies., +++ b/okhttp/src/main/java/com/squareup/okhttp/Cache.java, +import java.io.ByteArrayInputStream;, +        writeCertArray(sink, handshake.peerCertificates());, +        writeCertArray(sink, handshake.localCertificates());, +          byte[] bytes = ByteString.decodeBase64(line).toByteArray();, +          result.add(certificateFactory.generateCertificate(new ByteArrayInputStream(bytes)));, +    private void writeCertArray(BufferedSink sink, List<Certificate> certificates), +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  // This test is ignored because we don't (yet) reliably recover for large request bodies., +++ b/okhttp/src/main/java/com/squareup/okhttp/Cache.java, +import java.io.ByteArrayInputStream;, +        writeCertArray(sink, handshake.peerCertificates());, +        writeCertArray(sink, handshake.localCertificates());, +          byte[] bytes = ByteString.decodeBase64(line).toByteArray();, +          result.add(certificateFactory.generateCertificate(new ByteArrayInputStream(bytes)));, +    private void writeCertArray(BufferedSink sink, List<Certificate> certificates), +++ b/samples/guide/src/main/java/com/squareup/okhttp/recipes/CustomTrust.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.recipes;, +, +import com.squareup.okhttp.CertificatePinner;, +import com.squareup.okhttp.Headers;, +import com.squareup.okhttp.OkHttpClient;, +import com.squareup.okhttp.Request;, +import com.squareup.okhttp.Response;, +import java.io.IOException;, +import java.io.InputStream;, +import java.security.GeneralSecurityException;, +import java.security.KeyStore;, +import java.security.SecureRandom;, +import java.security.cert.Certificate;, +import java.security.cert.CertificateFactory;, +import java.util.Collection;, +import javax.net.ssl.KeyManagerFactory;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.TrustManagerFactory;, +import okio.Buffer;, +, +public final class CustomTrust {, +  private final OkHttpClient client;, +, +  public CustomTrust() {, +    client = new OkHttpClient();, +    SSLContext sslContext = sslContextForTrustedCertificates(trustedCertificatesInputStream());, +    client.setSslSocketFactory(sslContext.getSocketFactory());, +  }, +, +  public void run() throws Exception {, +    Request request = new Request.Builder(), +        .url("https://publicobject.com/helloworld.txt"), +        .build();, +, +    Response response = client.newCall(request).execute();, +    if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);, +, +    Headers responseHeaders = response.headers();, +    for (int i = 0; i < responseHeaders.size(); i++) {, +      System.out.println(responseHeaders.name(i) + ": " + responseHeaders.value(i));, +    }, +, +    System.out.println(response.body().string());, +  }, +, +  /**, +   * Returns an input stream containing one or more certificate PEM files. This implementation just, +   * embeds the PEM files in Java strings; most applications will instead read this from a resource, +   * file that gets bundled with the application., +   */, +  private InputStream trustedCertificatesInputStream() {, +    // PEM files for root certificates of Comodo and Entrust. These two CAs are sufficient to view, +    // https://publicobject.com (Comodo) and https://squareup.com (Entrust). But they aren't, +    // sufficient to connect to most HTTPS sites including https://godaddy.com and https://visa.com., +    // Typically developers will need to get a PEM file from their organization's TLS administrator., +    String comodoRsaCertificationAuthority = "", +        + "-----BEGIN CERTIFICATE-----\n", +        + "MIIF2DCCA8CgAwIBAgIQTKr5yttjb+Af907YWwOGnTANBgkqhkiG9w0BAQwFADCB\n", +        + "hTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G\n", +        + "A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxKzApBgNV\n", +        + "BAMTIkNPTU9ETyBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTAwMTE5\n", +        + "MDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCBhTELMAkGA1UEBhMCR0IxGzAZBgNVBAgT\n", +        + "EkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UEBxMHU2FsZm9yZDEaMBgGA1UEChMR\n", +        + "Q09NT0RPIENBIExpbWl0ZWQxKzApBgNVBAMTIkNPTU9ETyBSU0EgQ2VydGlmaWNh\n"]