[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.internal.InternalKtKt;, +    InternalKtKt.addHeaderLenient(headers, name, String.valueOf(value));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.internal.InternalKtKt;, +    InternalKtKt.addHeaderLenient(headers, name, String.valueOf(value));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.internal.InternalKtKt.addHeaderLenient;, +      addHeaderLenient(headers, header);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.internal.InternalKtKt;, +    InternalKtKt.addHeaderLenient(headers, name, String.valueOf(value));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.internal.InternalKtKt.addHeaderLenient;, +      addHeaderLenient(headers, header);, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import okhttp3.internal.InternalKtKt;, +    InternalKtKt.addHeaderLenient(headers, ": A");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.internal.InternalKtKt;, +    InternalKtKt.addHeaderLenient(headers, name, String.valueOf(value));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.internal.InternalKtKt.addHeaderLenient;, +      addHeaderLenient(headers, header);, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import okhttp3.internal.InternalKtKt;, +    InternalKtKt.addHeaderLenient(headers, ": A");, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static okhttp3.internal.InternalKtKt.addHeaderLenient;, +  private final RecordingEventListener listener = new RecordingEventListener();, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    server.enqueue(new MockResponse().setBody("retry success"));, +    Headers.Builder headersBuilder = new Headers.Builder();, +    headersBuilder.add("Content-Length", "0");, +    addHeaderLenient(headersBuilder, "a\tb: c\u007fd");, +    addHeaderLenient(headersBuilder, ": ef");, +    addHeaderLenient(headersBuilder, "\ud83c\udf69: \u2615\ufe0f");, +    Headers headers = headersBuilder.build();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.internal.InternalKtKt;, +    InternalKtKt.addHeaderLenient(headers, name, String.valueOf(value));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.internal.InternalKtKt.addHeaderLenient;, +      addHeaderLenient(headers, header);, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import okhttp3.internal.InternalKtKt;, +    InternalKtKt.addHeaderLenient(headers, ": A");, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static okhttp3.internal.InternalKtKt.addHeaderLenient;, +  private final RecordingEventListener listener = new RecordingEventListener();, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    server.enqueue(new MockResponse().setBody("retry success"));, +    Headers.Builder headersBuilder = new Headers.Builder();, +    headersBuilder.add("Content-Length", "0");, +    addHeaderLenient(headersBuilder, "a\tb: c\u007fd");, +    addHeaderLenient(headersBuilder, ": ef");, +    addHeaderLenient(headersBuilder, "\ud83c\udf69: \u2615\ufe0f");, +    Headers headers = headersBuilder.build();, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +    } catch (NullPointerException expected) {, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.internal.InternalKtKt;, +    InternalKtKt.addHeaderLenient(headers, name, String.valueOf(value));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.internal.InternalKtKt.addHeaderLenient;, +      addHeaderLenient(headers, header);, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import okhttp3.internal.InternalKtKt;, +    InternalKtKt.addHeaderLenient(headers, ": A");, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static okhttp3.internal.InternalKtKt.addHeaderLenient;, +  private final RecordingEventListener listener = new RecordingEventListener();, +    server.enqueue(new MockResponse().setBody("seed connection pool"));, +    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));, +    server.enqueue(new MockResponse().setBody("retry success"));, +    Headers.Builder headersBuilder = new Headers.Builder();, +    headersBuilder.add("Content-Length", "0");, +    addHeaderLenient(headersBuilder, "a\tb: c\u007fd");, +    addHeaderLenient(headersBuilder, ": ef");, +    addHeaderLenient(headersBuilder, "\ud83c\udf69: \u2615\ufe0f");, +    Headers headers = headersBuilder.build();, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +    } catch (NullPointerException expected) {, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +++ b/okhttp-tests/src/test/java/okhttp3/RequestTest.java, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +    } catch (IllegalArgumentException expected) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.internal.InternalKtKt;]