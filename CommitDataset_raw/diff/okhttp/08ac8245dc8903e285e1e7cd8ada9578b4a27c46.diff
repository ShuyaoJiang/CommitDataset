[+++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import javax.net.ssl.SSLSocket;, +      SSLSocket sslSocket = getSslSocket(httpConnection);, +      if (sslSocket != null) {, +        cipherSuite = sslSocket.getSession().getCipherSuite();, +          peerCertificatesNonFinal = sslSocket.getSession().getPeerCertificates();, +        localCertificates = sslSocket.getSession().getLocalCertificates();, +    /**, +     * Returns the SSL socket used by {@code httpConnection} for HTTPS, nor null, +     * if the connection isn't using HTTPS. Since we permit redirects across, +     * protocols (HTTP to HTTPS or vice versa), the implementation type of the, +     * connection doesn't necessarily match the implementation type of its HTTP, +     * engine., +     */, +    private SSLSocket getSslSocket(HttpURLConnection httpConnection) {, +      HttpEngine engine = httpConnection instanceof HttpsURLConnectionImpl, +          ? ((HttpsURLConnectionImpl) httpConnection).getHttpEngine(), +          : ((HttpURLConnectionImpl) httpConnection).getHttpEngine();, +      return engine instanceof HttpsURLConnectionImpl.HttpsEngine, +          ? ((HttpsURLConnectionImpl.HttpsEngine) engine).getSslSocket(), +          : null;, +    }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import javax.net.ssl.SSLSocket;, +      SSLSocket sslSocket = getSslSocket(httpConnection);, +      if (sslSocket != null) {, +        cipherSuite = sslSocket.getSession().getCipherSuite();, +          peerCertificatesNonFinal = sslSocket.getSession().getPeerCertificates();, +        localCertificates = sslSocket.getSession().getLocalCertificates();, +    /**, +     * Returns the SSL socket used by {@code httpConnection} for HTTPS, nor null, +     * if the connection isn't using HTTPS. Since we permit redirects across, +     * protocols (HTTP to HTTPS or vice versa), the implementation type of the, +     * connection doesn't necessarily match the implementation type of its HTTP, +     * engine., +     */, +    private SSLSocket getSslSocket(HttpURLConnection httpConnection) {, +      HttpEngine engine = httpConnection instanceof HttpsURLConnectionImpl, +          ? ((HttpsURLConnectionImpl) httpConnection).getHttpEngine(), +          : ((HttpURLConnectionImpl) httpConnection).getHttpEngine();, +      return engine instanceof HttpsURLConnectionImpl.HttpsEngine, +          ? ((HttpsURLConnectionImpl.HttpsEngine) engine).getSslSocket(), +          : null;, +    }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpsURLConnectionImpl.java, +    public SSLSocket getSslSocket() {, +      return sslSocket;, +    }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import javax.net.ssl.SSLSocket;, +      SSLSocket sslSocket = getSslSocket(httpConnection);, +      if (sslSocket != null) {, +        cipherSuite = sslSocket.getSession().getCipherSuite();, +          peerCertificatesNonFinal = sslSocket.getSession().getPeerCertificates();, +        localCertificates = sslSocket.getSession().getLocalCertificates();, +    /**, +     * Returns the SSL socket used by {@code httpConnection} for HTTPS, nor null, +     * if the connection isn't using HTTPS. Since we permit redirects across, +     * protocols (HTTP to HTTPS or vice versa), the implementation type of the, +     * connection doesn't necessarily match the implementation type of its HTTP, +     * engine., +     */, +    private SSLSocket getSslSocket(HttpURLConnection httpConnection) {, +      HttpEngine engine = httpConnection instanceof HttpsURLConnectionImpl, +          ? ((HttpsURLConnectionImpl) httpConnection).getHttpEngine(), +          : ((HttpURLConnectionImpl) httpConnection).getHttpEngine();, +      return engine instanceof HttpsURLConnectionImpl.HttpsEngine, +          ? ((HttpsURLConnectionImpl.HttpsEngine) engine).getSslSocket(), +          : null;, +    }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpsURLConnectionImpl.java, +    public SSLSocket getSslSocket() {, +      return sslSocket;, +    }, +, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +  private MockWebServer server2 = new MockWebServer();, +    server2.shutdown();, +, +  /**, +   * We've had bugs where caching and cross-protocol redirects yield class, +   * cast exceptions internal to the cache because we incorrectly assumed that, +   * HttpsURLConnection was always HTTPS and HttpURLConnection was always HTTP;, +   * in practice redirects mean that each can do either., +   *, +   * https://github.com/square/okhttp/issues/214, +   */, +  @Test public void secureResponseCachingAndProtocolRedirects() throws IOException {, +    server2.useHttps(sslContext.getSocketFactory(), false);, +    server2.enqueue(new MockResponse().addHeader("Last-Modified: " + formatDate(-1, TimeUnit.HOURS)), +        .addHeader("Expires: " + formatDate(1, TimeUnit.HOURS)), +        .setBody("ABC"));, +    server2.enqueue(new MockResponse().setBody("DEF"));, +    server2.play();, +, +    server.enqueue(new MockResponse().addHeader("Last-Modified: " + formatDate(-1, TimeUnit.HOURS))]