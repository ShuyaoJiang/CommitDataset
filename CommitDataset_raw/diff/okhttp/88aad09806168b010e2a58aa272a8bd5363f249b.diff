[+++ b/okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java, +import java.util.Arrays;, +  public void check(String hostname, List<Certificate> peerCertificates), +    for (int i = 0, size = peerCertificates.size(); i < size; i++) {, +      X509Certificate x509Certificate = (X509Certificate) peerCertificates.get(i);, +    for (int i = 0, size = peerCertificates.size(); i < size; i++) {, +      X509Certificate x509Certificate = (X509Certificate) peerCertificates.get(i);, +    for (int i = 0, size = pins.size(); i < size; i++) {, +      ByteString pin = pins.get(i);, +  /** @deprecated replaced with {@link #check(String, List)}. */, +  public void check(String hostname, Certificate... peerCertificates), +      throws SSLPeerUnverifiedException {, +    check(hostname, Arrays.asList(peerCertificates));, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java, +import java.util.Arrays;, +  public void check(String hostname, List<Certificate> peerCertificates), +    for (int i = 0, size = peerCertificates.size(); i < size; i++) {, +      X509Certificate x509Certificate = (X509Certificate) peerCertificates.get(i);, +    for (int i = 0, size = peerCertificates.size(); i < size; i++) {, +      X509Certificate x509Certificate = (X509Certificate) peerCertificates.get(i);, +    for (int i = 0, size = pins.size(); i < size; i++) {, +      ByteString pin = pins.get(i);, +  /** @deprecated replaced with {@link #check(String, List)}. */, +  public void check(String hostname, Certificate... peerCertificates), +      throws SSLPeerUnverifiedException {, +    check(hostname, Arrays.asList(peerCertificates));, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    try {, +      String maybeProtocol;, +      if (route.connectionSpec.supportsTlsExtensions(), +          && (maybeProtocol = platform.getSelectedProtocol(sslSocket)) != null) {, +        protocol = Protocol.get(maybeProtocol); // Throws IOE on unknown., +      }, +    } finally {, +      platform.afterHandshake(sslSocket);, +    }, +, +    handshake = Handshake.get(sslSocket.getSession());, +, +    route.address.certificatePinner.check(route.address.uriHost, handshake.peerCertificates());, +++ b/okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java, +import java.util.Arrays;, +  public void check(String hostname, List<Certificate> peerCertificates), +    for (int i = 0, size = peerCertificates.size(); i < size; i++) {, +      X509Certificate x509Certificate = (X509Certificate) peerCertificates.get(i);, +    for (int i = 0, size = peerCertificates.size(); i < size; i++) {, +      X509Certificate x509Certificate = (X509Certificate) peerCertificates.get(i);, +    for (int i = 0, size = pins.size(); i < size; i++) {, +      ByteString pin = pins.get(i);, +  /** @deprecated replaced with {@link #check(String, List)}. */, +  public void check(String hostname, Certificate... peerCertificates), +      throws SSLPeerUnverifiedException {, +    check(hostname, Arrays.asList(peerCertificates));, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    try {, +      String maybeProtocol;, +      if (route.connectionSpec.supportsTlsExtensions(), +          && (maybeProtocol = platform.getSelectedProtocol(sslSocket)) != null) {, +        protocol = Protocol.get(maybeProtocol); // Throws IOE on unknown., +      }, +    } finally {, +      platform.afterHandshake(sslSocket);, +    }, +, +    handshake = Handshake.get(sslSocket.getSession());, +, +    route.address.certificatePinner.check(route.address.uriHost, handshake.peerCertificates());, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java, +  /**, +   * Called after the TLS handshake to release resources allocated by {@link, +   * #configureTlsExtensions}., +   */, +  public void afterHandshake(SSLSocket sslSocket) {, +  }, +, +      Method removeMethod = negoClass.getMethod("remove", SSLSocket.class);, +          putMethod, getMethod, removeMethod, clientProviderClass, serverProviderClass);, +    private final Method getMethod;, +    private final Method removeMethod;, +    public JdkWithJettyBootPlatform(Method putMethod, Method getMethod, Method removeMethod,, +      this.removeMethod = removeMethod;, +    @Override public void afterHandshake(SSLSocket sslSocket) {, +      try {, +        removeMethod.invoke(null, sslSocket);, +      } catch (IllegalAccessException ignored) {, +        throw new AssertionError();, +      } catch (InvocationTargetException ignored) {, +        throw new AssertionError();, +      }, +    }, +]