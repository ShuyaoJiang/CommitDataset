[+++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ /dev/null, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ /dev/null, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +++ /dev/null, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +++ /dev/null, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/Http20Draft09Test.java, +import java.io.ByteArrayOutputStream;, +import java.io.DataOutputStream;, +import static org.junit.Assert.assertArrayEquals;, +    ByteArrayOutputStream out = new ByteArrayOutputStream();, +    DataOutputStream dataOut = new DataOutputStream(out);, +    dataOut.writeShort(4); // has a 4-byte field, +    dataOut.write(99); // type 99, +    dataOut.write(0); // no flags, +    dataOut.writeInt(expectedStreamId);, +    dataOut.writeInt(111111111); // custom data, +    FrameReader fr = newReader(out);, +    ByteArrayOutputStream out = new ByteArrayOutputStream();, +    DataOutputStream dataOut = new DataOutputStream(out);, +      byte[] headerBytes = literalHeaders(sentHeaders);, +      dataOut.writeShort(headerBytes.length);, +      dataOut.write(Http20Draft09.TYPE_HEADERS);, +      dataOut.write(Http20Draft09.FLAG_END_HEADERS | Http20Draft09.FLAG_END_STREAM);, +      dataOut.writeInt(expectedStreamId & 0x7fffffff);, +      dataOut.write(headerBytes);, +    FrameReader fr = newReader(out);, +    ByteArrayOutputStream out = new ByteArrayOutputStream();, +    DataOutputStream dataOut = new DataOutputStream(out);, +      byte[] headerBytes = literalHeaders(sentHeaders);, +      dataOut.writeShort(headerBytes.length + 4);, +      dataOut.write(Http20Draft09.TYPE_HEADERS);, +      dataOut.write(Http20Draft09.FLAG_END_HEADERS | Http20Draft09.FLAG_PRIORITY);, +      dataOut.writeInt(expectedStreamId & 0x7fffffff);, +      dataOut.writeInt(0); // Highest priority is 0., +      dataOut.write(headerBytes);, +    FrameReader fr = newReader(out);, +    ByteArrayOutputStream out = new ByteArrayOutputStream();, +    DataOutputStream dataOut = new DataOutputStream(out);, +    byte[] headerBlock = literalHeaders(headerEntries("foo", "barrr", "baz", "qux"));, +      dataOut.writeShort(headerBlock.length / 2);, +      dataOut.write(Http20Draft09.TYPE_HEADERS);, +      dataOut.write(0); // no flags, +      dataOut.writeInt(expectedStreamId & 0x7fffffff);, +      dataOut.write(headerBlock, 0, headerBlock.length / 2);, +      dataOut.writeShort(headerBlock.length / 2);, +      dataOut.write(Http20Draft09.TYPE_CONTINUATION);, +      dataOut.write(Http20Draft09.FLAG_END_HEADERS);, +      dataOut.writeInt(expectedStreamId & 0x7fffffff);, +      dataOut.write(headerBlock, headerBlock.length / 2, headerBlock.length / 2);, +    FrameReader fr = newReader(out);, +    ByteArrayOutputStream out = new ByteArrayOutputStream();, +    DataOutputStream dataOut = new DataOutputStream(out);, +      byte[] headerBytes = literalHeaders(pushPromise);, +      dataOut.writeShort(headerBytes.length + 4);, +      dataOut.write(Http20Draft09.TYPE_PUSH_PROMISE);, +      dataOut.write(Http20Draft09.FLAG_END_PUSH_PROMISE);, +      dataOut.writeInt(expectedStreamId & 0x7fffffff);, +      dataOut.writeInt(expectedPromisedStreamId & 0x7fffffff);, +      dataOut.write(headerBytes);, +    FrameReader fr = newReader(out);, +    ByteArrayOutputStream out = new ByteArrayOutputStream();, +    DataOutputStream dataOut = new DataOutputStream(out);, +    byte[] headerBlock = literalHeaders(pushPromise);, +    int firstFrameLength = headerBlock.length - 1;, +      dataOut.writeShort(firstFrameLength + 4);, +      dataOut.write(Http20Draft09.TYPE_PUSH_PROMISE);, +      dataOut.write(0); // no flags, +      dataOut.writeInt(expectedStreamId & 0x7fffffff);, +      dataOut.writeInt(expectedPromisedStreamId & 0x7fffffff);, +      dataOut.write(headerBlock, 0, firstFrameLength);, +      dataOut.writeShort(1);, +      dataOut.write(Http20Draft09.TYPE_CONTINUATION);, +      dataOut.write(Http20Draft09.FLAG_END_HEADERS);, +      dataOut.writeInt(expectedStreamId & 0x7fffffff);, +      dataOut.write(headerBlock, firstFrameLength, 1);, +    FrameReader fr = newReader(out);, +    ByteArrayOutputStream out = new ByteArrayOutputStream();, +    DataOutputStream dataOut = new DataOutputStream(out);, +    dataOut.writeShort(4);, +    dataOut.write(Http20Draft09.TYPE_RST_STREAM);, +    dataOut.write(0); // No flags, +    dataOut.writeInt(expectedStreamId & 0x7fffffff);, +    dataOut.writeInt(ErrorCode.COMPRESSION_ERROR.httpCode);, +    FrameReader fr = newReader(out);, +    ByteArrayOutputStream out = new ByteArrayOutputStream();, +    DataOutputStream dataOut = new DataOutputStream(out);, +    dataOut.writeShort(16); // 2 settings * 4 bytes for the code and 4 for the value., +    dataOut.write(Http20Draft09.TYPE_SETTINGS);, +    dataOut.write(0); // No flags, +    dataOut.writeInt(0 & 0x7fffffff); // Settings are always on the connection stream 0., +    dataOut.writeInt(Settings.HEADER_TABLE_SIZE & 0xffffff);]