[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    serverSocket = serverSocketFactory.createServerSocket(port, 50, inetAddress);, +    serverSocket.setReuseAddress(true);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    serverSocket = serverSocketFactory.createServerSocket(port, 50, inetAddress);, +    serverSocket.setReuseAddress(true);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    // Give the cleanup callable time to run and settle down., +    Thread.sleep(100);, +, +  @Test public void maxIdleConnectionsLimitEnforced() throws Exception {, +    ConnectionPool pool = new ConnectionPool(2, KEEP_ALIVE_DURATION_MS);, +, +    // Hit the max idle connections limit of 2., +    pool.recycle(httpA);, +    pool.recycle(httpB);, +    Thread.sleep(100); // Give the cleanup callable time to run., +    assertPooled(pool, httpB, httpA);, +, +    // Adding httpC bumps httpA., +    pool.recycle(httpC);, +    Thread.sleep(100); // Give the cleanup callable time to run., +    assertPooled(pool, httpC, httpB);, +, +    // Adding httpD bumps httpB., +    pool.recycle(httpD);, +    Thread.sleep(100); // Give the cleanup callable time to run., +    assertPooled(pool, httpD, httpC);, +, +    // Adding httpE bumps httpC., +    pool.recycle(httpE);, +    Thread.sleep(100); // Give the cleanup callable time to run., +    assertPooled(pool, httpE, httpD);, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    serverSocket = serverSocketFactory.createServerSocket(port, 50, inetAddress);, +    serverSocket.setReuseAddress(true);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    // Give the cleanup callable time to run and settle down., +    Thread.sleep(100);, +, +  @Test public void maxIdleConnectionsLimitEnforced() throws Exception {, +    ConnectionPool pool = new ConnectionPool(2, KEEP_ALIVE_DURATION_MS);, +, +    // Hit the max idle connections limit of 2., +    pool.recycle(httpA);, +    pool.recycle(httpB);, +    Thread.sleep(100); // Give the cleanup callable time to run., +    assertPooled(pool, httpB, httpA);, +, +    // Adding httpC bumps httpA., +    pool.recycle(httpC);, +    Thread.sleep(100); // Give the cleanup callable time to run., +    assertPooled(pool, httpC, httpB);, +, +    // Adding httpD bumps httpB., +    pool.recycle(httpD);, +    Thread.sleep(100); // Give the cleanup callable time to run., +    assertPooled(pool, httpD, httpC);, +, +    // Adding httpE bumps httpC., +    pool.recycle(httpE);, +    Thread.sleep(100); // Give the cleanup callable time to run., +    assertPooled(pool, httpE, httpD);, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java, +import java.util.Iterator;, +import java.util.NoSuchElementException;, +  @Test public void iterator() throws Exception {, +    set("a", "a1", "a2");, +    set("b", "b1", "b2");, +    set("c", "c1", "c2");, +    Iterator<DiskLruCache.Snapshot> iterator = cache.snapshots();, +, +    assertTrue(iterator.hasNext());, +    DiskLruCache.Snapshot a = iterator.next();, +    assertEquals("a", a.key());, +    assertEquals("a1", a.getString(0));, +    assertEquals("a2", a.getString(1));, +, +    assertTrue(iterator.hasNext());, +    DiskLruCache.Snapshot b = iterator.next();, +    assertEquals("b", b.key());, +    assertEquals("b1", b.getString(0));, +    assertEquals("b2", b.getString(1));, +, +    assertTrue(iterator.hasNext());, +    DiskLruCache.Snapshot c = iterator.next();, +    assertEquals("c", c.key());, +    assertEquals("c1", c.getString(0));, +    assertEquals("c2", c.getString(1));, +, +    assertFalse(iterator.hasNext());, +    try {, +      iterator.next();, +      fail();, +    } catch (NoSuchElementException expected) {, +    }]