[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          logger.info(MockWebServer.this + " starting to accept connections");, +          logger.log(Level.WARNING, MockWebServer.this + " failed unexpectedly", e);, +        // Release all sockets and all threads, even if any close fails., +            logger.info(MockWebServer.this + " done accepting connections: " + e.getMessage());, +          logger.log(Level.WARNING, MockWebServer.this + " connection from ", +              + raw.getInetAddress() + " failed", e);, +          logger.warning(MockWebServer.this + " connection from " + raw.getInetAddress(), +              + " didn't make a request");, +          logger.info(MockWebServer.this + " received request: " + request, +              + " and responded: " + response);, +  @Override public String toString() {, +    return "MockWebServer[" + port + "]";, +  }, +, +        logger.info(MockWebServer.this + " received request: " + request, +            + " and responded: " + response + " protocol is " + protocol.toString());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          logger.info(MockWebServer.this + " starting to accept connections");, +          logger.log(Level.WARNING, MockWebServer.this + " failed unexpectedly", e);, +        // Release all sockets and all threads, even if any close fails., +            logger.info(MockWebServer.this + " done accepting connections: " + e.getMessage());, +          logger.log(Level.WARNING, MockWebServer.this + " connection from ", +              + raw.getInetAddress() + " failed", e);, +          logger.warning(MockWebServer.this + " connection from " + raw.getInetAddress(), +              + " didn't make a request");, +          logger.info(MockWebServer.this + " received request: " + request, +              + " and responded: " + response);, +  @Override public String toString() {, +    return "MockWebServer[" + port + "]";, +  }, +, +        logger.info(MockWebServer.this + " received request: " + request, +            + " and responded: " + response + " protocol is " + protocol.toString());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;, +import org.junit.Rule;, +import org.junit.rules.TestRule;, +import org.junit.rules.Timeout;, +  private static final SSLContext sslContext = SslContextBuilder.localhost();, +, +  @Rule public TestRule timeout = new Timeout(30_000);, +, +  @Rule public MockWebServerRule server = new MockWebServerRule();, +  @Rule public MockWebServerRule server2 = new MockWebServerRule();, +    server.get().useHttps(sslContext.getSocketFactory(), false);, +    server.get().useHttps(sslContext.getSocketFactory(), false);, +    server.get().useHttps(sslContext.getSocketFactory(), false);, +    server.get().useHttps(sslContext.getSocketFactory(), false);, +    server.get().useHttps(sslContext.getSocketFactory(), false);, +    server.get().useHttps(sslContext.getSocketFactory(), false);, +    server.get().useHttps(sslContext.getSocketFactory(), false);, +    server.get().useHttps(sslContext.getSocketFactory(), false);, +      certificatePinnerBuilder.add(server.get().getHostName(), CertificatePinner.pin(certificate));, +    server.get().useHttps(sslContext.getSocketFactory(), false);, +, +    // Pin publicobject.com's cert., +        .add(server.get().getHostName(), "sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw="), +    cookie.setDomain(server.get().getCookieDomain());, +        + "c=\"cookie\";$Path=\"/\";$Domain=\"" + server.get().getCookieDomain(), +    } catch (IOException expected) {, +      assertEquals("Too many redirects: 21", expected.getMessage());, +    } catch (IOException expected) {, +    } catch (IOException expected) {, +    server.get().setDispatcher(new Dispatcher() {, +    } catch (IOException expected) {, +    server.get().setDispatcher(new Dispatcher() {, +    server.get().setDispatcher(new Dispatcher() {, +    server.get().useHttps(sslContext.getSocketFactory(), false);, +    server.get().setProtocols(client.getProtocols());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          logger.info(MockWebServer.this + " starting to accept connections");, +          logger.log(Level.WARNING, MockWebServer.this + " failed unexpectedly", e);, +        // Release all sockets and all threads, even if any close fails., +            logger.info(MockWebServer.this + " done accepting connections: " + e.getMessage());, +          logger.log(Level.WARNING, MockWebServer.this + " connection from ", +              + raw.getInetAddress() + " failed", e);, +          logger.warning(MockWebServer.this + " connection from " + raw.getInetAddress(), +              + " didn't make a request");, +          logger.info(MockWebServer.this + " received request: " + request, +              + " and responded: " + response);, +  @Override public String toString() {, +    return "MockWebServer[" + port + "]";, +  }, +, +        logger.info(MockWebServer.this + " received request: " + request, +            + " and responded: " + response + " protocol is " + protocol.toString());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;, +import org.junit.Rule;, +import org.junit.rules.TestRule;, +import org.junit.rules.Timeout;, +  private static final SSLContext sslContext = SslContextBuilder.localhost();, +, +  @Rule public TestRule timeout = new Timeout(30_000);, +, +  @Rule public MockWebServerRule server = new MockWebServerRule();, +  @Rule public MockWebServerRule server2 = new MockWebServerRule();, +    server.get().useHttps(sslContext.getSocketFactory(), false);, +    server.get().useHttps(sslContext.getSocketFactory(), false);]