[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertEquals("digest", challenges.get(0).scheme());, +++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import java.io.InterruptedIOException;, +import java.net.HttpURLConnection;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicReference;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okio.BufferedSink;, +import org.junit.Rule;, +import org.junit.Test;, +, +import static okhttp3.TestUtil.defaultClient;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +public final class WholeOperationTimeoutTest {, +  /** A large response body. Smaller bodies might successfully read after the socket is closed! */, +  private static final String BIG_ENOUGH_BODY = TestUtil.repeat('a', 64 * 1024);, +, +  @Rule public final MockWebServer server = new MockWebServer();, +, +  private OkHttpClient client = defaultClient();, +, +  @Test public void timeoutWritingRequest() throws Exception {, +    server.enqueue(new MockResponse());, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .post(sleepingRequestBody(500)), +        .build();, +, +    Call call = client.newCall(request);, +    call.timeout().timeout(250, TimeUnit.MILLISECONDS);, +    try {, +      call.execute();, +      fail();, +    } catch (IOException e) {, +      assertTrue(call.isCanceled());, +    }, +  }, +, +  @Test public void timeoutWritingRequestWithEnqueue() throws Exception {, +    server.enqueue(new MockResponse());, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .post(sleepingRequestBody(500)), +        .build();, +, +    final CountDownLatch latch = new CountDownLatch(1);, +    final AtomicReference<Throwable> exceptionRef = new AtomicReference<>();, +, +    Call call = client.newCall(request);, +    call.timeout().timeout(250, TimeUnit.MILLISECONDS);, +    call.enqueue(new Callback() {, +      @Override public void onFailure(Call call, IOException e) {, +        exceptionRef.set(e);]