[+++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +import org.apache.http.message.BasicHeader;, +    // Get the response body ready to stream., +    InputStream responseBody =, +        responseCode < HttpURLConnection.HTTP_BAD_REQUEST ? connection.getInputStream(), +            : connection.getErrorStream();, +    InputStreamEntity entity = new InputStreamEntity(responseBody, connection.getContentLength());, +      BasicHeader header = new BasicHeader(name, connection.getHeaderField(i));, +      response.addHeader(header);, +      if (name.equalsIgnoreCase("Content-Type")) {, +          entity.setContentType(header);, +      } else if (name.equalsIgnoreCase("Content-Encoding")) {, +          entity.setContentEncoding(header);, +    }, +    response.setEntity(entity);, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +import org.apache.http.message.BasicHeader;, +    // Get the response body ready to stream., +    InputStream responseBody =, +        responseCode < HttpURLConnection.HTTP_BAD_REQUEST ? connection.getInputStream(), +            : connection.getErrorStream();, +    InputStreamEntity entity = new InputStreamEntity(responseBody, connection.getContentLength());, +      BasicHeader header = new BasicHeader(name, connection.getHeaderField(i));, +      response.addHeader(header);, +      if (name.equalsIgnoreCase("Content-Type")) {, +          entity.setContentType(header);, +      } else if (name.equalsIgnoreCase("Content-Encoding")) {, +          entity.setContentEncoding(header);, +    }, +    response.setEntity(entity);, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +import java.io.ByteArrayOutputStream;, +import java.io.InputStream;, +import java.io.OutputStreamWriter;, +import java.nio.charset.Charset;, +import java.util.zip.GZIPInputStream;, +import java.util.zip.GZIPOutputStream;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +, +  @Test public void contentType() throws Exception {, +    server.enqueue(new MockResponse().setBody("<html><body><h1>Hello, World!</h1></body></html>"), +        .setHeader("Content-Type", "text/html"));, +    server.enqueue(new MockResponse().setBody("{\"Message\": { \"text\": \"Hello, World!\" } }"), +        .setHeader("Content-Type", "application/json"));, +    server.enqueue(new MockResponse().setBody("Hello, World!"));, +, +    HttpGet request1 = new HttpGet(server.getUrl("/").toURI());, +    HttpResponse response1 = client.execute(request1);, +    Header[] headers1 = response1.getHeaders("Content-Type");, +    assertEquals(1, headers1.length);, +    assertEquals("text/html", headers1[0].getValue());, +    assertNotNull(response1.getEntity().getContentType());, +    assertEquals("text/html", response1.getEntity().getContentType().getValue());, +, +    HttpGet request2 = new HttpGet(server.getUrl("/").toURI());, +    HttpResponse response2 = client.execute(request2);, +    Header[] headers2 = response2.getHeaders("Content-Type");, +    assertEquals(1, headers2.length);, +    assertEquals("application/json", headers2[0].getValue());, +    assertNotNull(response2.getEntity().getContentType());, +    assertEquals("application/json", response2.getEntity().getContentType().getValue());, +, +    HttpGet request3 = new HttpGet(server.getUrl("/").toURI());, +    HttpResponse response3 = client.execute(request3);, +    Header[] headers3 = response3.getHeaders("Content-Type");, +    assertEquals(0, headers3.length);, +    assertNull(response3.getEntity().getContentType());, +  }, +, +  @Test public void contentEncoding() throws Exception {, +    String text = "{\"Message\": { \"text\": \"Hello, World!\" } }";, +    ByteArrayOutputStream bodyBytes = new ByteArrayOutputStream();, +    OutputStreamWriter body = new OutputStreamWriter(new GZIPOutputStream(bodyBytes),, +        Charset.forName("UTF-8"));, +    body.write(text);, +    body.close();, +    server.enqueue(new MockResponse().setBody(bodyBytes.toByteArray()), +        .setHeader("Content-Encoding", "gzip"));, +, +    byte[] tmp = new byte[32];, +, +    HttpGet request1 = new HttpGet(server.getUrl("/").toURI());, +    request1.setHeader("Accept-encoding", "gzip"); // not transparent gzip, +    HttpResponse response1 = client.execute(request1);, +    Header[] headers1 = response1.getHeaders("Content-Encoding");, +    assertEquals(1, headers1.length);, +    assertEquals("gzip", headers1[0].getValue());, +    assertNotNull(response1.getEntity().getContentEncoding());, +    assertEquals("gzip", response1.getEntity().getContentEncoding().getValue());, +    InputStream content = new GZIPInputStream(response1.getEntity().getContent());, +    ByteArrayOutputStream rspBodyBytes = new ByteArrayOutputStream();, +    for (int len = content.read(tmp); len >= 0; len = content.read(tmp)) {, +      rspBodyBytes.write(tmp, 0, len);, +    }, +    String decodedContent = rspBodyBytes.toString("UTF-8");, +    assertEquals(text, decodedContent);, +  }, +, +  @Test public void jsonGzipResponse() throws Exception {]