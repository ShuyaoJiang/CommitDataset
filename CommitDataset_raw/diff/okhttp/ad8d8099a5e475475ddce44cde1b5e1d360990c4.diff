[+++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java, +import java.security.cert.TrustAnchor;, +import okhttp3.internal.tls.BasicTrustRootIndex;, +import okhttp3.internal.tls.TrustRootIndex;, +  private final Class<?> sslSocketClass;, +  AndroidPlatform(Class<?> sslParametersClass, Class<?> sslSocketClass, Method setUseSessionTickets,, +      Method setHostname, Method getAlpnSelectedProtocol, Method setAlpnProtocols) {, +    this.sslSocketClass = sslSocketClass;, +    if (!sslSocketClass.isInstance(sslSocket)) {, +      return; // No TLS extensions if the socket class is custom., +    }, +    if (!sslSocketClass.isInstance(socket)) {, +      return null; // No TLS extensions if the socket class is custom., +    }, +      return super.buildCertificateChainCleaner(trustManager);, +        return new AndroidPlatform(sslParametersClass, sslSocketClass, setUseSessionTickets,, +            setHostname, getAlpnSelectedProtocol, setAlpnProtocols);, +  @Override public TrustRootIndex buildTrustRootIndex(X509TrustManager trustManager) {, +    try {, +      // From org.conscrypt.TrustManagerImpl, we want the method with this signature:, +      // private TrustAnchor findTrustAnchorByIssuerAndSignature(X509Certificate lastCert);, +      Method method = trustManager.getClass().getDeclaredMethod(, +          "findTrustAnchorByIssuerAndSignature", X509Certificate.class);, +      method.setAccessible(true);, +      return new CustomTrustRootIndex(trustManager, method);, +    } catch (NoSuchMethodException e) {, +      return super.buildTrustRootIndex(trustManager);, +    }, +  }, +, +  /**, +   * A trust manager for Android applications that customize the trust manager., +   *, +   * <p>This class exploits knowledge of Android implementation details. This class is potentially, +   * much faster to initialize than {@link BasicTrustRootIndex} because it doesn't need to load and, +   * index trusted CA certificates., +   */, +  static final class CustomTrustRootIndex implements TrustRootIndex {, +    private final X509TrustManager trustManager;, +    private final Method findByIssuerAndSignatureMethod;, +, +    CustomTrustRootIndex(X509TrustManager trustManager, Method findByIssuerAndSignatureMethod) {, +      this.findByIssuerAndSignatureMethod = findByIssuerAndSignatureMethod;, +      this.trustManager = trustManager;, +    }, +, +    @Override public X509Certificate findByIssuerAndSignature(X509Certificate cert) {, +      try {, +        TrustAnchor trustAnchor = (TrustAnchor) findByIssuerAndSignatureMethod.invoke(, +            trustManager, cert);, +        return trustAnchor != null, +            ? trustAnchor.getTrustedCert(), +            : null;, +      } catch (IllegalAccessException e) {, +        throw new AssertionError("unable to get issues and signature", e);, +      } catch (InvocationTargetException e) {, +        return null;, +      }, +    }, +, +    @Override public boolean equals(Object obj) {, +      if (obj == this) {, +        return true;, +      }, +      if (!(obj instanceof CustomTrustRootIndex)) {, +        return false;, +      }, +      CustomTrustRootIndex that = (CustomTrustRootIndex) obj;, +      return trustManager.equals(that.trustManager), +          && findByIssuerAndSignatureMethod.equals(that.findByIssuerAndSignatureMethod);, +    }, +, +    @Override public int hashCode() {, +      return trustManager.hashCode() + 31 * findByIssuerAndSignatureMethod.hashCode();, +    }, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java, +import java.security.cert.TrustAnchor;, +import okhttp3.internal.tls.BasicTrustRootIndex;, +import okhttp3.internal.tls.TrustRootIndex;, +  private final Class<?> sslSocketClass;, +  AndroidPlatform(Class<?> sslParametersClass, Class<?> sslSocketClass, Method setUseSessionTickets,, +      Method setHostname, Method getAlpnSelectedProtocol, Method setAlpnProtocols) {, +    this.sslSocketClass = sslSocketClass;, +    if (!sslSocketClass.isInstance(sslSocket)) {, +      return; // No TLS extensions if the socket class is custom., +    }, +    if (!sslSocketClass.isInstance(socket)) {, +      return null; // No TLS extensions if the socket class is custom., +    }, +      return super.buildCertificateChainCleaner(trustManager);, +        return new AndroidPlatform(sslParametersClass, sslSocketClass, setUseSessionTickets,, +            setHostname, getAlpnSelectedProtocol, setAlpnProtocols);, +  @Override public TrustRootIndex buildTrustRootIndex(X509TrustManager trustManager) {, +    try {, +      // From org.conscrypt.TrustManagerImpl, we want the method with this signature:, +      // private TrustAnchor findTrustAnchorByIssuerAndSignature(X509Certificate lastCert);, +      Method method = trustManager.getClass().getDeclaredMethod(, +          "findTrustAnchorByIssuerAndSignature", X509Certificate.class);]