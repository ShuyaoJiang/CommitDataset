[+++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +    Platform platform = Platform.get();, +    X509TrustManager x509TrustManager = platform.trustManager(, +        (SSLSocketFactory) SSLSocketFactory.getDefault());, +++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java, +    Platform platform = Platform.get();, +    X509TrustManager x509TrustManager = platform.trustManager(, +        (SSLSocketFactory) SSLSocketFactory.getDefault());, +++ b/okhttp-tests/src/test/java/okhttp3/internal/SocketRecorder.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal;, +, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +import java.net.Socket;, +import java.util.Deque;, +import java.util.concurrent.LinkedBlockingDeque;, +import javax.net.ssl.SSLSocket;, +import javax.net.ssl.SSLSocketFactory;, +import okhttp3.DelegatingSSLSocket;, +import okhttp3.DelegatingSSLSocketFactory;, +import okio.Buffer;, +import okio.ByteString;, +, +/** Records all bytes written and read from a socket and makes them available for inspection. */, +public final class SocketRecorder {, +  private final Deque<RecordedSocket> recordedSockets = new LinkedBlockingDeque<>();, +, +  /** Returns an SSLSocketFactory whose sockets will record all transmitted bytes. */, +  public SSLSocketFactory sslSocketFactory(SSLSocketFactory delegate) {, +    return new DelegatingSSLSocketFactory(delegate) {, +      @Override protected SSLSocket configureSocket(SSLSocket sslSocket) throws IOException {, +        RecordedSocket recordedSocket = new RecordedSocket();, +        recordedSockets.add(recordedSocket);, +        return new RecordingSSLSocket(sslSocket, recordedSocket);, +      }, +    };, +  }, +, +  public RecordedSocket takeSocket() {, +    return recordedSockets.remove();, +  }, +, +  /** A bidirectional transfer of unadulterated bytes over a socket. */, +  public static final class RecordedSocket {, +    private final Buffer bytesWritten = new Buffer();, +    private final Buffer bytesRead = new Buffer();, +, +    synchronized void byteWritten(int b) {, +      bytesWritten.writeByte(b);, +    }, +, +    synchronized void byteRead(int b) {, +      bytesRead.writeByte(b);, +    }, +, +    synchronized void bytesWritten(byte[] bytes, int offset, int length) {, +      bytesWritten.write(bytes, offset, length);, +    }, +, +    synchronized void bytesRead(byte[] bytes, int offset, int length) {, +      bytesRead.write(bytes, offset, length);, +    }, +, +    /** Returns all bytes that have been written to this socket. */, +    public synchronized ByteString bytesWritten() {, +      return bytesWritten.readByteString();, +    }, +, +    /** Returns all bytes that have been read from this socket. */, +    public synchronized ByteString bytesRead() {, +      return bytesRead.readByteString();, +    }, +  }, +, +  static final class RecordingInputStream extends InputStream {, +    private final Socket socket;, +    private final RecordedSocket recordedSocket;, +, +    RecordingInputStream(Socket socket, RecordedSocket recordedSocket) {, +      this.socket = socket;, +      this.recordedSocket = recordedSocket;, +    }]