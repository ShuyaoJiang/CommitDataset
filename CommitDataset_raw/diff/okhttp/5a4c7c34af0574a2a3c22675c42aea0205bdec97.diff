[+++ b/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +      responseHeaders.setResponseSource(responseSource);, +    responseHeaders.setResponseSource(responseSource);, +++ b/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +      responseHeaders.setResponseSource(responseSource);, +    responseHeaders.setResponseSource(responseSource);, +++ b/src/main/java/com/squareup/okhttp/internal/http/ResponseHeaders.java, +  /** HTTP synthetic header with the response source. */, +  static final String RESPONSE_SOURCE = "X-Android-Response-Source";, +, +  public void setResponseSource(ResponseSource responseSource) {, +    headers.set(RESPONSE_SOURCE, responseSource.toString() + " " + headers.getResponseCode());, +  }, +, +++ b/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +      responseHeaders.setResponseSource(responseSource);, +    responseHeaders.setResponseSource(responseSource);, +++ b/src/main/java/com/squareup/okhttp/internal/http/ResponseHeaders.java, +  /** HTTP synthetic header with the response source. */, +  static final String RESPONSE_SOURCE = "X-Android-Response-Source";, +, +  public void setResponseSource(ResponseSource responseSource) {, +    headers.set(RESPONSE_SOURCE, responseSource.toString() + " " + headers.getResponseCode());, +  }, +, +++ b/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +import com.squareup.okhttp.ResponseSource;, +    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));, +  @Test public void responseSourceHeaderCached() throws IOException {, +    server.enqueue(new MockResponse().setBody("A"), +        .addHeader("Cache-Control: max-age=30"), +        .addHeader("Date: " + formatDate(0, TimeUnit.MINUTES)));, +    server.play();, +, +    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));, +    URLConnection connection = openConnection(server.getUrl("/"));, +    connection.addRequestProperty("Cache-Control", "only-if-cached");, +    assertEquals("A", readAscii(connection));, +, +    String source = connection.getHeaderField(ResponseHeaders.RESPONSE_SOURCE);, +    assertEquals(ResponseSource.CACHE.toString() + " 200", source);, +  }, +, +  @Test public void responseSourceHeaderConditionalCacheFetched() throws IOException {, +    server.enqueue(new MockResponse().setBody("A"), +        .addHeader("Cache-Control: max-age=30"), +        .addHeader("Date: " + formatDate(-31, TimeUnit.MINUTES)));, +    server.enqueue(new MockResponse().setBody("B"), +        .addHeader("Cache-Control: max-age=30"), +        .addHeader("Date: " + formatDate(0, TimeUnit.MINUTES)));, +    server.play();, +, +    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));, +    HttpURLConnection connection = openConnection(server.getUrl("/"));, +    assertEquals("B", readAscii(connection));, +, +    String source = connection.getHeaderField(ResponseHeaders.RESPONSE_SOURCE);, +    assertEquals(ResponseSource.CONDITIONAL_CACHE.toString() + " 200", source);, +  }, +, +  @Test public void responseSourceHeaderConditionalCacheNotFetched() throws IOException {, +    server.enqueue(new MockResponse().setBody("A"), +        .addHeader("Cache-Control: max-age=0"), +        .addHeader("Date: " + formatDate(0, TimeUnit.MINUTES)));, +    server.enqueue(new MockResponse().setResponseCode(304));, +    server.play();, +, +    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));, +    HttpURLConnection connection = openConnection(server.getUrl("/"));, +    assertEquals("A", readAscii(connection));, +, +    String source = connection.getHeaderField(ResponseHeaders.RESPONSE_SOURCE);, +    assertEquals(ResponseSource.CONDITIONAL_CACHE.toString() + " 304", source);, +  }, +, +  @Test public void responseSourceHeaderFetched() throws IOException {, +    server.enqueue(new MockResponse().setBody("A"));, +    server.play();, +, +    URLConnection connection = openConnection(server.getUrl("/"));, +    assertEquals("A", readAscii(connection));, +, +    String source = connection.getHeaderField(ResponseHeaders.RESPONSE_SOURCE);, +    assertEquals(ResponseSource.NETWORK.toString() + " 200", source);, +  }, +]