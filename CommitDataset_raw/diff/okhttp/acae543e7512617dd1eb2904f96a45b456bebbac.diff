[+++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, +      assertEquals("timeout", e.getMessage());, +      assertEquals("timeout", e.getMessage());, +      assertEquals("timeout", e.getMessage());, +      assertEquals("timeout", e.getMessage());, +      assertEquals("timeout", e.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, +      assertEquals("timeout", e.getMessage());, +      assertEquals("timeout", e.getMessage());, +      assertEquals("timeout", e.getMessage());, +      assertEquals("timeout", e.getMessage());, +      assertEquals("timeout", e.getMessage());, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +    boolean calledNoMoreExchanges = false;, +      calledNoMoreExchanges = true;, +      throw transmitter.noMoreExchanges(e);, +      if (!calledNoMoreExchanges) {, +        transmitter.noMoreExchanges(null);, +      }, +++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, +      assertEquals("timeout", e.getMessage());, +      assertEquals("timeout", e.getMessage());, +      assertEquals("timeout", e.getMessage());, +      assertEquals("timeout", e.getMessage());, +      assertEquals("timeout", e.getMessage());, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +    boolean calledNoMoreExchanges = false;, +      calledNoMoreExchanges = true;, +      throw transmitter.noMoreExchanges(e);, +      if (!calledNoMoreExchanges) {, +        transmitter.noMoreExchanges(null);, +      }, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Exchange.java, +  @Nullable IOException bodyComplete(, +    return transmitter.exchangeMessageDone(this, requestDone, responseDone, e);, +        throw complete(e);, +        throw complete(e);, +      try {, +      } catch (IOException e) {, +        throw complete(e);, +      }, +    private @Nullable IOException complete(@Nullable IOException e) {, +      if (completed) return e;, +      return bodyComplete(bytesReceived, false, true, e);, +        throw complete(e);, +      try {, +      } catch (IOException e) {, +        throw complete(e);, +      }, +    @Nullable IOException complete(@Nullable IOException e) {, +      if (completed) return e;, +      return bodyComplete(bytesReceived, true, false, e);, +++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, +      assertEquals("timeout", e.getMessage());, +      assertEquals("timeout", e.getMessage());, +      assertEquals("timeout", e.getMessage());, +      assertEquals("timeout", e.getMessage());, +      assertEquals("timeout", e.getMessage());, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +    boolean calledNoMoreExchanges = false;, +      calledNoMoreExchanges = true;, +      throw transmitter.noMoreExchanges(e);, +      if (!calledNoMoreExchanges) {, +        transmitter.noMoreExchanges(null);, +      }, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Exchange.java, +  @Nullable IOException bodyComplete(, +    return transmitter.exchangeMessageDone(this, requestDone, responseDone, e);, +        throw complete(e);, +        throw complete(e);, +      try {, +      } catch (IOException e) {, +        throw complete(e);, +      }, +    private @Nullable IOException complete(@Nullable IOException e) {, +      if (completed) return e;, +      return bodyComplete(bytesReceived, false, true, e);, +        throw complete(e);, +      try {, +      } catch (IOException e) {, +        throw complete(e);, +      }, +    @Nullable IOException complete(@Nullable IOException e) {, +      if (completed) return e;, +      return bodyComplete(bytesReceived, true, false, e);, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Transmitter.java, +  /**, +   * Releases resources held with the request or response of {@code exchange}. This should be called, +   * when the request completes normally or when it fails due to an exception, in which case {@code, +   * e} should be non-null., +   *, +   * <p>If the exchange was canceled or timed out, this will wrap {@code e} in an exception that, +   * provides that additional context. Otherwise {@code e} is returned as-is., +   */, +  @Nullable IOException exchangeMessageDone(, +        return e; // This exchange was detached violently!, +      e = maybeReleaseConnection(e, false);, +    return e;, +  public @Nullable IOException noMoreExchanges(@Nullable IOException e) {, +    return maybeReleaseConnection(e, false);]