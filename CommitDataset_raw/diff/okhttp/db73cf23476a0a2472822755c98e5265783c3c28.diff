[+++ b/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java, +, +  /** https://github.com/square/okhttp/issues/3324 */, +  @Test public void checkSubstringMatch() throws Exception {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("*.example.com", certA1Sha256Pin), +        .build();, +, +    assertEquals(Collections.emptyList(),, +        certificatePinner.findMatchingPins("a.example.com.notexample.com"));, +    assertEquals(Collections.emptyList(),, +        certificatePinner.findMatchingPins("example.com.notexample.com"));, +    assertEquals(Collections.emptyList(),, +        certificatePinner.findMatchingPins("notexample.com"));, +    assertEquals(Collections.emptyList(),, +        certificatePinner.findMatchingPins("example.com"));, +    assertEquals(Collections.emptyList(),, +        certificatePinner.findMatchingPins("a.b.example.com"));, +    assertEquals(Collections.emptyList(),, +        certificatePinner.findMatchingPins("ple.com"));, +    assertEquals(Collections.emptyList(),, +        certificatePinner.findMatchingPins("com"));, +, +    Pin expectedPin = new Pin("*.example.com", certA1Sha256Pin);, +    assertEquals(Collections.singletonList(expectedPin),, +        certificatePinner.findMatchingPins("a.example.com"));, +    assertEquals(Collections.singletonList(expectedPin),, +        certificatePinner.findMatchingPins("example.example.com"));, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java, +, +  /** https://github.com/square/okhttp/issues/3324 */, +  @Test public void checkSubstringMatch() throws Exception {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("*.example.com", certA1Sha256Pin), +        .build();, +, +    assertEquals(Collections.emptyList(),, +        certificatePinner.findMatchingPins("a.example.com.notexample.com"));, +    assertEquals(Collections.emptyList(),, +        certificatePinner.findMatchingPins("example.com.notexample.com"));, +    assertEquals(Collections.emptyList(),, +        certificatePinner.findMatchingPins("notexample.com"));, +    assertEquals(Collections.emptyList(),, +        certificatePinner.findMatchingPins("example.com"));, +    assertEquals(Collections.emptyList(),, +        certificatePinner.findMatchingPins("a.b.example.com"));, +    assertEquals(Collections.emptyList(),, +        certificatePinner.findMatchingPins("ple.com"));, +    assertEquals(Collections.emptyList(),, +        certificatePinner.findMatchingPins("com"));, +, +    Pin expectedPin = new Pin("*.example.com", certA1Sha256Pin);, +    assertEquals(Collections.singletonList(expectedPin),, +        certificatePinner.findMatchingPins("a.example.com"));, +    assertEquals(Collections.singletonList(expectedPin),, +        certificatePinner.findMatchingPins("example.example.com"));, +  }, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +        return (hostname.length() - firstDot - 1) == canonicalHostname.length(), +            && hostname.regionMatches(false, firstDot + 1, canonicalHostname, 0,, +++ b/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java, +, +  /** https://github.com/square/okhttp/issues/3324 */, +  @Test public void checkSubstringMatch() throws Exception {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("*.example.com", certA1Sha256Pin), +        .build();, +, +    assertEquals(Collections.emptyList(),, +        certificatePinner.findMatchingPins("a.example.com.notexample.com"));, +    assertEquals(Collections.emptyList(),, +        certificatePinner.findMatchingPins("example.com.notexample.com"));, +    assertEquals(Collections.emptyList(),, +        certificatePinner.findMatchingPins("notexample.com"));, +    assertEquals(Collections.emptyList(),, +        certificatePinner.findMatchingPins("example.com"));, +    assertEquals(Collections.emptyList(),, +        certificatePinner.findMatchingPins("a.b.example.com"));, +    assertEquals(Collections.emptyList(),, +        certificatePinner.findMatchingPins("ple.com"));, +    assertEquals(Collections.emptyList(),, +        certificatePinner.findMatchingPins("com"));, +, +    Pin expectedPin = new Pin("*.example.com", certA1Sha256Pin);, +    assertEquals(Collections.singletonList(expectedPin),, +        certificatePinner.findMatchingPins("a.example.com"));, +    assertEquals(Collections.singletonList(expectedPin),, +        certificatePinner.findMatchingPins("example.example.com"));, +  }, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +        return (hostname.length() - firstDot - 1) == canonicalHostname.length(), +            && hostname.regionMatches(false, firstDot + 1, canonicalHostname, 0,, +++ b/okhttp/src/main/java/okhttp3/Response.java, +  /** Closes the response body. Equivalent to {@code body().close()}. */, +++ b/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java, +, +  /** https://github.com/square/okhttp/issues/3324 */, +  @Test public void checkSubstringMatch() throws Exception {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder()]