[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +  private WebSocketListener webSocketListener;, +  public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, +  public WebSocketListener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +  private WebSocketListener webSocketListener;, +  public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, +  public WebSocketListener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealWebSocket;, +    RealWebSocket.Streams streams = new RealWebSocket.Streams(false, source, sink) {, +    RealWebSocket webSocket = new RealWebSocket(fancyRequest,, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +  private WebSocketListener webSocketListener;, +  public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, +  public WebSocketListener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealWebSocket;, +    RealWebSocket.Streams streams = new RealWebSocket.Streams(false, source, sink) {, +    RealWebSocket webSocket = new RealWebSocket(fancyRequest,, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private WebSocket newWebSocket(String path, WebSocketListener listener) {, +    newWebSocket("/runCase?case=" + number + "&agent=okhttp", new WebSocketListener() {, +      @Override public void onOpen(WebSocket webSocket, Response response) {, +      @Override public void onMessage(final WebSocket webSocket, final ByteString bytes) {, +      @Override public void onMessage(final WebSocket webSocket, final String text) {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/getCaseCount", new WebSocketListener() {, +      @Override public void onMessage(WebSocket webSocket, String text) {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/updateReports?agent=" + Version.userAgent(), new WebSocketListener() {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +  private WebSocketListener webSocketListener;, +  public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, +  public WebSocketListener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealWebSocket;, +    RealWebSocket.Streams streams = new RealWebSocket.Streams(false, source, sink) {, +    RealWebSocket webSocket = new RealWebSocket(fancyRequest,, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private WebSocket newWebSocket(String path, WebSocketListener listener) {, +    newWebSocket("/runCase?case=" + number + "&agent=okhttp", new WebSocketListener() {, +      @Override public void onOpen(WebSocket webSocket, Response response) {, +      @Override public void onMessage(final WebSocket webSocket, final ByteString bytes) {, +      @Override public void onMessage(final WebSocket webSocket, final String text) {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/getCaseCount", new WebSocketListener() {, +      @Override public void onMessage(WebSocket webSocket, String text) {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/updateReports?agent=" + Version.userAgent(), new WebSocketListener() {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +++ b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java, +  public final WebSocket webSocket;, +  public RecordedResponse(Request request, Response response, WebSocket webSocket, String body,, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.WebSocketListener;, +  private WebSocketListener webSocketListener;, +  public MockResponse withWebSocketUpgrade(WebSocketListener listener) {, +  public WebSocketListener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealWebSocket;, +    RealWebSocket.Streams streams = new RealWebSocket.Streams(false, source, sink) {, +    RealWebSocket webSocket = new RealWebSocket(fancyRequest,, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private WebSocket newWebSocket(String path, WebSocketListener listener) {, +    newWebSocket("/runCase?case=" + number + "&agent=okhttp", new WebSocketListener() {, +      @Override public void onOpen(WebSocket webSocket, Response response) {, +      @Override public void onMessage(final WebSocket webSocket, final ByteString bytes) {, +      @Override public void onMessage(final WebSocket webSocket, final String text) {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/getCaseCount", new WebSocketListener() {, +      @Override public void onMessage(WebSocket webSocket, String text) {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/updateReports?agent=" + Version.userAgent(), new WebSocketListener() {, +      @Override public void onClosing(WebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {, +++ b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java, +  public final WebSocket webSocket;, +  public RecordedResponse(Request request, Response response, WebSocket webSocket, String body,, +++ b/okhttp-tests/src/test/java/okhttp3/WebSocketHttpTest.java, +import okhttp3.internal.ws.WebSocketRecorder;, +import okhttp3.internal.ws.RealWebSocket;, +  private final WebSocketRecorder clientListener = new WebSocketRecorder("client");, +  private final WebSocketRecorder serverListener = new WebSocketRecorder("server");, +    WebSocket client = enqueueClientWebSocket();, +    RealWebSocket client = enqueueClientWebSocket();, +    RealWebSocket client = enqueueClientWebSocket();]