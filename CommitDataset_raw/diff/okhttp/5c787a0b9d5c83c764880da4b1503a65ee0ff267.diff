[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import com.squareup.okhttp.internal.ByteString;, +import static com.squareup.okhttp.internal.Util.asByteStringList;, +, +    List<ByteString> requestHeaders = stream.getRequestHeaders();, +      ByteString s = requestHeaders.get(i);, +      if (s.utf8Equals(":path")) {, +        path = requestHeaders.get(i + 1).utf8();, +    List<ByteString> responseHeaders =, +        asByteStringList(":status", "404", ":version", "HTTP/1.1", "content-type", "text/plain");, +    List<ByteString> responseHeaders =, +        asByteStringList(":status", "200", ":version", "HTTP/1.1", "content-type",, +    stream.reply(asByteStringList(":status", "200", ":version", "HTTP/1.1", "content-type",, +        contentType(file)), true);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import com.squareup.okhttp.internal.ByteString;, +import static com.squareup.okhttp.internal.Util.asByteStringList;, +, +    List<ByteString> requestHeaders = stream.getRequestHeaders();, +      ByteString s = requestHeaders.get(i);, +      if (s.utf8Equals(":path")) {, +        path = requestHeaders.get(i + 1).utf8();, +    List<ByteString> responseHeaders =, +        asByteStringList(":status", "404", ":version", "HTTP/1.1", "content-type", "text/plain");, +    List<ByteString> responseHeaders =, +        asByteStringList(":status", "200", ":version", "HTTP/1.1", "content-type",, +    stream.reply(asByteStringList(":status", "200", ":version", "HTTP/1.1", "content-type",, +        contentType(file)), true);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ByteString;, +      List<ByteString> spdyHeaders = stream.getRequestHeaders();, +        String name = spdyHeaders.get(i).utf8();, +        String value = spdyHeaders.get(i + 1).utf8();, +      List<ByteString> spdyHeaders = new ArrayList<ByteString>();, +      // TODO: constants for well-known header names., +      spdyHeaders.add(ByteString.encodeUtf8(":status"));, +      spdyHeaders.add(ByteString.encodeUtf8(statusParts[1]));, +      spdyHeaders.add(ByteString.encodeUtf8(":version"));, +      spdyHeaders.add(ByteString.encodeUtf8(statusParts[0]));, +        spdyHeaders.add(ByteString.encodeUtf8(headerParts[0].toLowerCase(Locale.US).trim()));, +        spdyHeaders.add(ByteString.encodeUtf8(headerParts[1].trim()));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import com.squareup.okhttp.internal.ByteString;, +import static com.squareup.okhttp.internal.Util.asByteStringList;, +, +    List<ByteString> requestHeaders = stream.getRequestHeaders();, +      ByteString s = requestHeaders.get(i);, +      if (s.utf8Equals(":path")) {, +        path = requestHeaders.get(i + 1).utf8();, +    List<ByteString> responseHeaders =, +        asByteStringList(":status", "404", ":version", "HTTP/1.1", "content-type", "text/plain");, +    List<ByteString> responseHeaders =, +        asByteStringList(":status", "200", ":version", "HTTP/1.1", "content-type",, +    stream.reply(asByteStringList(":status", "200", ":version", "HTTP/1.1", "content-type",, +        contentType(file)), true);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ByteString;, +      List<ByteString> spdyHeaders = stream.getRequestHeaders();, +        String name = spdyHeaders.get(i).utf8();, +        String value = spdyHeaders.get(i + 1).utf8();, +      List<ByteString> spdyHeaders = new ArrayList<ByteString>();, +      // TODO: constants for well-known header names., +      spdyHeaders.add(ByteString.encodeUtf8(":status"));, +      spdyHeaders.add(ByteString.encodeUtf8(statusParts[1]));, +      spdyHeaders.add(ByteString.encodeUtf8(":version"));, +      spdyHeaders.add(ByteString.encodeUtf8(statusParts[0]));, +        spdyHeaders.add(ByteString.encodeUtf8(headerParts[0].toLowerCase(Locale.US).trim()));, +        spdyHeaders.add(ByteString.encodeUtf8(headerParts[1].trim()));, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/ByteString.java, +    ByteString byteString = new ByteString(s.getBytes(Util.UTF_8));, +    byteString.utf8 = s;, +    return byteString;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import com.squareup.okhttp.internal.ByteString;, +import static com.squareup.okhttp.internal.Util.asByteStringList;, +, +    List<ByteString> requestHeaders = stream.getRequestHeaders();, +      ByteString s = requestHeaders.get(i);, +      if (s.utf8Equals(":path")) {, +        path = requestHeaders.get(i + 1).utf8();, +    List<ByteString> responseHeaders =, +        asByteStringList(":status", "404", ":version", "HTTP/1.1", "content-type", "text/plain");, +    List<ByteString> responseHeaders =, +        asByteStringList(":status", "200", ":version", "HTTP/1.1", "content-type",, +    stream.reply(asByteStringList(":status", "200", ":version", "HTTP/1.1", "content-type",, +        contentType(file)), true);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.ByteString;, +      List<ByteString> spdyHeaders = stream.getRequestHeaders();, +        String name = spdyHeaders.get(i).utf8();, +        String value = spdyHeaders.get(i + 1).utf8();, +      List<ByteString> spdyHeaders = new ArrayList<ByteString>();, +      // TODO: constants for well-known header names., +      spdyHeaders.add(ByteString.encodeUtf8(":status"));, +      spdyHeaders.add(ByteString.encodeUtf8(statusParts[1]));, +      spdyHeaders.add(ByteString.encodeUtf8(":version"));, +      spdyHeaders.add(ByteString.encodeUtf8(statusParts[0]));, +        spdyHeaders.add(ByteString.encodeUtf8(headerParts[0].toLowerCase(Locale.US).trim()));, +        spdyHeaders.add(ByteString.encodeUtf8(headerParts[1].trim()));, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/ByteString.java]