[+++ b/.gitignore, +++ b/.gitignore, +++ b/okhttp/build.gradle, +++ b/.gitignore, +++ b/okhttp/build.gradle, +++ b/okhttp/src/main/java/okhttp3/Address.java, +/*, + * Copyright (C) 2012 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.net.Proxy;, +import java.net.ProxySelector;, +import java.util.List;, +import java.util.Objects;, +import javax.annotation.Nullable;, +import javax.net.SocketFactory;, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.SSLSocketFactory;, +import okhttp3.internal.Util;, +, +/**, + * A specification for a connection to an origin server. For simple connections, this is the, + * server's hostname and port. If an explicit proxy is requested (or {@linkplain Proxy#NO_PROXY no, + * proxy} is explicitly requested), this also includes that proxy information. For secure, + * connections the address also includes the SSL socket factory, hostname verifier, and certificate, + * pinner., + *, + * <p>HTTP requests that share the same {@code Address} may also share the same {@link Connection}., + */, +public final class Address {, +  final HttpUrl url;, +  final Dns dns;, +  final SocketFactory socketFactory;, +  final Authenticator proxyAuthenticator;, +  final List<Protocol> protocols;, +  final List<ConnectionSpec> connectionSpecs;, +  final ProxySelector proxySelector;, +  final @Nullable Proxy proxy;, +  final @Nullable SSLSocketFactory sslSocketFactory;, +  final @Nullable HostnameVerifier hostnameVerifier;, +  final @Nullable CertificatePinner certificatePinner;, +, +  public Address(String uriHost, int uriPort, Dns dns, SocketFactory socketFactory,, +      @Nullable SSLSocketFactory sslSocketFactory, @Nullable HostnameVerifier hostnameVerifier,, +      @Nullable CertificatePinner certificatePinner, Authenticator proxyAuthenticator,, +      @Nullable Proxy proxy, List<Protocol> protocols, List<ConnectionSpec> connectionSpecs,, +      ProxySelector proxySelector) {, +    this.url = new HttpUrl.Builder(), +        .scheme(sslSocketFactory != null ? "https" : "http"), +        .host(uriHost), +        .port(uriPort), +        .build();, +, +    if (dns == null) throw new NullPointerException("dns == null");, +    this.dns = dns;, +, +    if (socketFactory == null) throw new NullPointerException("socketFactory == null");, +    this.socketFactory = socketFactory;, +, +    if (proxyAuthenticator == null) {, +      throw new NullPointerException("proxyAuthenticator == null");, +    }, +    this.proxyAuthenticator = proxyAuthenticator;, +, +    if (protocols == null) throw new NullPointerException("protocols == null");, +    this.protocols = Util.immutableList(protocols);, +, +    if (connectionSpecs == null) throw new NullPointerException("connectionSpecs == null");, +    this.connectionSpecs = Util.immutableList(connectionSpecs);, +, +    if (proxySelector == null) throw new NullPointerException("proxySelector == null");, +    this.proxySelector = proxySelector;, +, +    this.proxy = proxy;, +    this.sslSocketFactory = sslSocketFactory;, +    this.hostnameVerifier = hostnameVerifier;, +    this.certificatePinner = certificatePinner;, +  }, +, +  /**, +   * Returns a URL with the hostname and port of the origin server. The path, query, and fragment of, +   * this URL are always empty, since they are not significant for planning a route., +   */, +  public HttpUrl url() {, +    return url;, +  }, +]