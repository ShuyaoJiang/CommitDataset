[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +  @Before public void setUp() {, +      @Override public void onResponse(Call call, Response response) {, +  @Test public void failedCallEventSequence() {, +  @Test public void failedDribbledCallEventSequence() throws IOException {, +    server.enqueue(new MockResponse().setBody("0123456789"), +        .throttleBody(2, 100, TimeUnit.MILLISECONDS), +        .setSocketPolicy(SocketPolicy.DISCONNECT_DURING_RESPONSE_BODY));, +, +    client = client.newBuilder(), +        .protocols(Collections.singletonList(Protocol.HTTP_1_1)), +        .readTimeout(250, TimeUnit.MILLISECONDS), +        .build();, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +, +    Response response = call.execute();, +    try {, +      response.body.string();, +      fail();, +    } catch (IOException expected) {, +      assertThat(expected.getMessage(), equalTo("unexpected end of stream"));, +    }, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",, +        "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, +        "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "ResponseBodyEnd", "ConnectionReleased", "CallFailed");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +    ResponseBodyEnd bodyEnd = listener.removeUpToEvent(ResponseBodyEnd.class);, +    assertEquals(5, bodyEnd.bytesRead);, +  }, +, +  @Test public void canceledCallEventSequence() {, +      @Override public List<InetAddress> lookup(String hostname) {, +  private void requestBodyFail() {, +      @Override public long contentLength() {, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.mockwebserver.internal.tls.SslClient;, +  @Before public void setUp() {, +      @Override public void onResponse(Call call, Response response) {, +  @Test public void failedCallEventSequence() {, +  @Test public void failedDribbledCallEventSequence() throws IOException {, +    server.enqueue(new MockResponse().setBody("0123456789"), +        .throttleBody(2, 100, TimeUnit.MILLISECONDS), +        .setSocketPolicy(SocketPolicy.DISCONNECT_DURING_RESPONSE_BODY));, +, +    client = client.newBuilder(), +        .protocols(Collections.singletonList(Protocol.HTTP_1_1)), +        .readTimeout(250, TimeUnit.MILLISECONDS), +        .build();, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +, +    Response response = call.execute();, +    try {, +      response.body.string();, +      fail();, +    } catch (IOException expected) {, +      assertThat(expected.getMessage(), equalTo("unexpected end of stream"));, +    }, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",, +        "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, +        "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "ResponseBodyEnd", "ConnectionReleased", "CallFailed");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +    ResponseBodyEnd bodyEnd = listener.removeUpToEvent(ResponseBodyEnd.class);, +    assertEquals(5, bodyEnd.bytesRead);, +  }, +, +  @Test public void canceledCallEventSequence() {, +      @Override public List<InetAddress> lookup(String hostname) {, +  private void requestBodyFail() {, +      @Override public long contentLength() {, +++ b/okhttp/src/main/java/okhttp3/EventListener.java, + * <h3>Warning: This is a non-final API.</h3>, + *, + * <p><strong>As of OkHttp 3.10, this feature is an unstable preview: the API is subject to change,, + * and the implementation is incomplete. We expect that OkHttp 3.11 or 3.12 will finalize this API., + * Until then, expect API and behavior changes when you update your OkHttp dependency.</strong>, + *, +  /**, +   * <h3>Warning: This is a non-final API.</h3>, +   *, +   * <p><strong>As of OkHttp 3.10, this feature is an unstable preview: the API is subject to, +   * change, and the implementation is incomplete. We expect that OkHttp 3.11 or 3.12 will finalize, +   * this API. Until then, expect API and behavior changes when you update your OkHttp, +   * dependency.</strong>, +   */]