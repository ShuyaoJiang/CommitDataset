[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void customMethodWithBody() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .method("CUSTOM", RequestBody.create(MediaType.parse("text/plain"), "def")), +        .build();, +, +    executeSynchronously(request), +        .assertCode(200), +        .assertBody("abc");, +, +    RecordedRequest recordedRequest = server.takeRequest();, +    assertEquals("CUSTOM", recordedRequest.getMethod());, +    assertEquals("def", recordedRequest.getBody().readUtf8());, +    assertEquals("3", recordedRequest.getHeader("Content-Length"));, +    assertEquals("text/plain; charset=utf-8", recordedRequest.getHeader("Content-Type"));, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void customMethodWithBody() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .method("CUSTOM", RequestBody.create(MediaType.parse("text/plain"), "def")), +        .build();, +, +    executeSynchronously(request), +        .assertCode(200), +        .assertBody("abc");, +, +    RecordedRequest recordedRequest = server.takeRequest();, +    assertEquals("CUSTOM", recordedRequest.getMethod());, +    assertEquals("def", recordedRequest.getBody().readUtf8());, +    assertEquals("3", recordedRequest.getHeader("Content-Length"));, +    assertEquals("text/plain; charset=utf-8", recordedRequest.getHeader("Content-Type"));, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/http/HttpMethod.java, +    return !(method.equals("GET") || method.equals("HEAD"));]