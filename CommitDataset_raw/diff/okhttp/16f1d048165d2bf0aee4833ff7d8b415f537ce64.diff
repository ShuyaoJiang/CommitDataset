[+++ b/mockwebserver/README.md, +  HttpUrl baseUrl = server.url("/v1/chat/");, +++ b/mockwebserver/README.md, +  HttpUrl baseUrl = server.url("/v1/chat/");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +  @Test public void toUriForbiddenCharacter() throws Exception {, +    HttpUrl httpUrl = HttpUrl.parse("http://host/a[b");, +    try {, +      httpUrl.uri();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("not valid as a java.net.URI: http://host/a[b", expected.getMessage());, +    }, +++ b/mockwebserver/README.md, +  HttpUrl baseUrl = server.url("/v1/chat/");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +  @Test public void toUriForbiddenCharacter() throws Exception {, +    HttpUrl httpUrl = HttpUrl.parse("http://host/a[b");, +    try {, +      httpUrl.uri();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("not valid as a java.net.URI: http://host/a[b", expected.getMessage());, +    }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java, +    } catch (UnknownHostException expected) {, +++ b/mockwebserver/README.md, +  HttpUrl baseUrl = server.url("/v1/chat/");, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +  @Test public void toUriForbiddenCharacter() throws Exception {, +    HttpUrl httpUrl = HttpUrl.parse("http://host/a[b");, +    try {, +      httpUrl.uri();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("not valid as a java.net.URI: http://host/a[b", expected.getMessage());, +    }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java, +    } catch (UnknownHostException expected) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpUrl.java, +  static final String CONVERT_TO_URI_ENCODE_SET = "^`{}|\\";, +      String uriSafeUrl = canonicalize(url, CONVERT_TO_URI_ENCODE_SET, true, false);, +      return new URI(uriSafeUrl);]