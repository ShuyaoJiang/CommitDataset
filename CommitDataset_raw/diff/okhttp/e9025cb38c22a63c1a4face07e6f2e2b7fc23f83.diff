[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2Test.java, +  @Test public void dataFrameNotAssociateWithStream() throws IOException {, +    byte[] payload = new byte[] {0x01, 0x02};, +, +    writeMedium(frame, payload.length);, +    frame.writeByte(Http2.TYPE_DATA);, +    frame.writeByte(Http2.FLAG_NONE);, +    frame.writeInt(0);, +    frame.write(payload);, +, +    try {, +      reader.nextFrame(false, new BaseTestHandler());, +      fail();, +    } catch (IOException e) {, +      assertEquals("PROTOCOL_ERROR: TYPE_DATA streamId == 0", e.getMessage());, +    }, +  }, +, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2Test.java, +  @Test public void dataFrameNotAssociateWithStream() throws IOException {, +    byte[] payload = new byte[] {0x01, 0x02};, +, +    writeMedium(frame, payload.length);, +    frame.writeByte(Http2.TYPE_DATA);, +    frame.writeByte(Http2.FLAG_NONE);, +    frame.writeInt(0);, +    frame.write(payload);, +, +    try {, +      reader.nextFrame(false, new BaseTestHandler());, +      fail();, +    } catch (IOException e) {, +      assertEquals("PROTOCOL_ERROR: TYPE_DATA streamId == 0", e.getMessage());, +    }, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Address.java, +    if (other instanceof Address) {, +      Address that = (Address) other;, +      return this.url.equals(that.url), +          && this.dns.equals(that.dns), +          && this.proxyAuthenticator.equals(that.proxyAuthenticator), +          && this.protocols.equals(that.protocols), +          && this.connectionSpecs.equals(that.connectionSpecs), +          && this.proxySelector.equals(that.proxySelector), +          && equal(this.proxy, that.proxy), +          && equal(this.sslSocketFactory, that.sslSocketFactory), +          && equal(this.hostnameVerifier, that.hostnameVerifier), +          && equal(this.certificatePinner, that.certificatePinner);, +    }, +    return false;, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2Test.java, +  @Test public void dataFrameNotAssociateWithStream() throws IOException {, +    byte[] payload = new byte[] {0x01, 0x02};, +, +    writeMedium(frame, payload.length);, +    frame.writeByte(Http2.TYPE_DATA);, +    frame.writeByte(Http2.FLAG_NONE);, +    frame.writeInt(0);, +    frame.write(payload);, +, +    try {, +      reader.nextFrame(false, new BaseTestHandler());, +      fail();, +    } catch (IOException e) {, +      assertEquals("PROTOCOL_ERROR: TYPE_DATA streamId == 0", e.getMessage());, +    }, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Address.java, +    if (other instanceof Address) {, +      Address that = (Address) other;, +      return this.url.equals(that.url), +          && this.dns.equals(that.dns), +          && this.proxyAuthenticator.equals(that.proxyAuthenticator), +          && this.protocols.equals(that.protocols), +          && this.connectionSpecs.equals(that.connectionSpecs), +          && this.proxySelector.equals(that.proxySelector), +          && equal(this.proxy, that.proxy), +          && equal(this.sslSocketFactory, that.sslSocketFactory), +          && equal(this.hostnameVerifier, that.hostnameVerifier), +          && equal(this.certificatePinner, that.certificatePinner);, +    }, +    return false;, +++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java, +  /** Returns a recycled connection to {@code address}, or null if no such connection exists. */, +  RealConnection get(Address address, StreamAllocation streamAllocation) {, +      if (connection.isEligible(address)) {, +      if (connection.isEligible(address), +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2Test.java, +  @Test public void dataFrameNotAssociateWithStream() throws IOException {, +    byte[] payload = new byte[] {0x01, 0x02};, +, +    writeMedium(frame, payload.length);, +    frame.writeByte(Http2.TYPE_DATA);]