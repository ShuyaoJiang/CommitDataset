[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +++ /dev/null, +++ b/okhttp-urlconnection/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +++ /dev/null, +++ b/okhttp-urlconnection/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +  /** Lazily created (with synthetic headers) on first call to getHeaders(). */, +  private Headers responseHeaders;, +  private Headers getHeaders() throws IOException {, +    if (responseHeaders == null) {, +      Response response = getResponse().getResponse();, +      Headers headers = response.headers();, +, +      responseHeaders = headers.newBuilder(), +          .add(Platform.get().getPrefix() + "-Response-Source", responseSourceHeader(response)), +          .build();, +    }, +    return responseHeaders;, +  }, +, +  private static String responseSourceHeader(Response response) {, +    if (response.networkResponse() == null) {, +      if (response.cacheResponse() == null) {, +        return "NONE";, +      }, +      return "CACHE " + response.code();, +    }, +    if (response.cacheResponse() == null) {, +      return "NETWORK " + response.code();, +    }, +    return "CONDITIONAL_CACHE " + response.networkResponse().code();, +  }, +, +      return getHeaders().value(position);, +          ? StatusLine.get(getResponse().getResponse()).toString(), +          : getHeaders().get(fieldName);, +      return getHeaders().name(position);, +      return OkHeaders.toMultimap(getHeaders(),, +          StatusLine.get(getResponse().getResponse()).toString());, +  // @Override Don't override: this overload method doesn't exist prior to Java 1.7., +  public void setFixedLengthStreamingMode(long contentLength) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +++ /dev/null, +++ b/okhttp-urlconnection/pom.xml, +    <dependency>, +      <groupId>com.squareup.okhttp</groupId>, +      <artifactId>mockwebserver</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +  /** Lazily created (with synthetic headers) on first call to getHeaders(). */, +  private Headers responseHeaders;, +  private Headers getHeaders() throws IOException {, +    if (responseHeaders == null) {, +      Response response = getResponse().getResponse();, +      Headers headers = response.headers();, +, +      responseHeaders = headers.newBuilder(), +          .add(Platform.get().getPrefix() + "-Response-Source", responseSourceHeader(response)), +          .build();, +    }, +    return responseHeaders;, +  }, +, +  private static String responseSourceHeader(Response response) {, +    if (response.networkResponse() == null) {, +      if (response.cacheResponse() == null) {, +        return "NONE";, +      }, +      return "CACHE " + response.code();, +    }, +    if (response.cacheResponse() == null) {, +      return "NETWORK " + response.code();, +    }, +    return "CONDITIONAL_CACHE " + response.networkResponse().code();, +  }, +]