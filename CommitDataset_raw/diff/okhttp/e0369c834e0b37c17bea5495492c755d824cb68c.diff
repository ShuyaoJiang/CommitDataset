[+++ b/okhttp-tests/src/test/java/okhttp3/internal/DiskLruCacheTest.java, +    fileSystem.setFaultyWrite(journalFile, true);, +    fileSystem.setFaultyWrite(journalFile, false);, +    fileSystem.setFaultyWrite(journalFile, true);, +    fileSystem.setFaultyWrite(journalFile, false);, +    fileSystem.setFaultyWrite(journalFile, true);, +    fileSystem.setFaultyWrite(journalFile, false);, +    fileSystem.setFaultyWrite(journalFile, true);, +    fileSystem.setFaultyWrite(journalFile, false);, +  @Test public void cleanupTrimFailurePreventsNewEditors() throws Exception {, +    cache.setMaxSize(8);, +    executor.jobs.pop();, +    set("a", "aa", "aa");, +    set("b", "bb", "bbb");, +, +    // Cause the cache trim job to fail., +    fileSystem.setFaultyDelete(new File(cacheDir, "a.0"), true);, +    executor.jobs.pop().run();, +, +    // Confirm that edits are prevented after a cache trim failure., +    assertNull(cache.edit("a"));, +    assertNull(cache.edit("b"));, +    assertNull(cache.edit("c"));, +, +    // Allow the test to clean up., +    fileSystem.setFaultyDelete(new File(cacheDir, "a.0"), false);, +  }, +, +  @Test public void cleanupTrimFailureRetriedOnEditors() throws Exception {, +    cache.setMaxSize(8);, +    executor.jobs.pop();, +    set("a", "aa", "aa");, +    set("b", "bb", "bbb");, +, +    // Cause the cache trim job to fail., +    fileSystem.setFaultyDelete(new File(cacheDir, "a.0"), true);, +    executor.jobs.pop().run();, +, +    // An edit should now add a job to clean up if the most recent trim failed., +    assertNull(cache.edit("b"));, +    executor.jobs.pop().run();, +, +    // Confirm a successful cache trim now allows edits., +    fileSystem.setFaultyDelete(new File(cacheDir, "a.0"), false);, +    assertNull(cache.edit("c"));, +    executor.jobs.pop().run();, +    set("c", "cc", "cc");, +    assertValue("c", "cc", "cc");, +  }, +, +  @Test public void cleanupTrimFailureWithInFlightEditor() throws Exception {, +    cache.setMaxSize(8);, +    executor.jobs.pop();, +    set("a", "aa", "aaa");, +    set("b", "bb", "bb");, +    DiskLruCache.Editor inFlightEditor = cache.edit("c");, +, +    // Cause the cache trim job to fail., +    fileSystem.setFaultyDelete(new File(cacheDir, "a.0"), true);, +    executor.jobs.pop().run();, +, +    // The in-flight editor can still write after a trim failure., +    setString(inFlightEditor, 0, "cc");, +    setString(inFlightEditor, 1, "cc");, +    inFlightEditor.commit();, +, +    // Confirm the committed values are present after a successful cache trim., +    fileSystem.setFaultyDelete(new File(cacheDir, "a.0"), false);, +    executor.jobs.pop().run();, +    assertValue("c", "cc", "cc");, +  }, +, +  @Test public void cleanupTrimFailureAllowsSnapshotReads() throws Exception {, +    cache.setMaxSize(8);, +    executor.jobs.pop();, +    set("a", "aa", "aa");, +    set("b", "bb", "bbb");, +, +    // Cause the cache trim job to fail., +    fileSystem.setFaultyDelete(new File(cacheDir, "a.0"), true);, +    executor.jobs.pop().run();, +, +    // Confirm we still allow snapshot reads after a trim failure., +    assertValue("a", "aa", "aa");, +    assertValue("b", "bb", "bbb");, +, +    // Allow the test to clean up., +    fileSystem.setFaultyDelete(new File(cacheDir, "a.0"), false);, +  }, +, +  @Test public void cleanupTrimFailurePreventsSnapshotWrites() throws Exception {, +    cache.setMaxSize(8);, +    executor.jobs.pop();, +    set("a", "aa", "aa");, +    set("b", "bb", "bbb");, +, +    // Cause the cache trim job to fail., +    fileSystem.setFaultyDelete(new File(cacheDir, "a.0"), true);, +    executor.jobs.pop().run();, +]