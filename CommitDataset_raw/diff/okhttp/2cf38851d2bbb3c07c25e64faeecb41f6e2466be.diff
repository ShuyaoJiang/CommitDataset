[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test, +  public void setFollowRedirectsFalse() throws Exception {, +    server.enqueue(new MockResponse(), +        .setResponseCode(302), +        .addHeader("Location: /b"), +        .setBody("A"));, +    server.enqueue(new MockResponse(), +        .setBody("B"));, +    server.play();, +, +    client.setFollowRedirects(false);, +    RecordedResponse recordedResponse = executeSynchronously(, +        new Request.Builder().url(server.getUrl("/a")).build());, +, +    recordedResponse, +        .assertBody("A"), +        .assertCode(302);, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test, +  public void setFollowRedirectsFalse() throws Exception {, +    server.enqueue(new MockResponse(), +        .setResponseCode(302), +        .addHeader("Location: /b"), +        .setBody("A"));, +    server.enqueue(new MockResponse(), +        .setBody("B"));, +    server.play();, +, +    client.setFollowRedirects(false);, +    RecordedResponse recordedResponse = executeSynchronously(, +        new Request.Builder().url(server.getUrl("/a")).build());, +, +    recordedResponse, +        .assertBody("A"), +        .assertCode(302);, +  }, +, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +  @Override, +  public void setInstanceFollowRedirects(boolean followRedirects) {, +    client.setFollowRedirects(followRedirects);, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test, +  public void setFollowRedirectsFalse() throws Exception {, +    server.enqueue(new MockResponse(), +        .setResponseCode(302), +        .addHeader("Location: /b"), +        .setBody("A"));, +    server.enqueue(new MockResponse(), +        .setBody("B"));, +    server.play();, +, +    client.setFollowRedirects(false);, +    RecordedResponse recordedResponse = executeSynchronously(, +        new Request.Builder().url(server.getUrl("/a")).build());, +, +    recordedResponse, +        .assertBody("A"), +        .assertCode(302);, +  }, +, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +  @Override, +  public void setInstanceFollowRedirects(boolean followRedirects) {, +    client.setFollowRedirects(followRedirects);, +  }, +, +++ b/okhttp-urlconnection/src/test/java/com/squareup/okhttp/OkUrlFactoryTest.java, +  @Test, +  public void setInstanceFollowRedirectsFalse() throws Exception {, +    server.enqueue(new MockResponse(), +        .setResponseCode(302), +        .addHeader("Location: /b"), +        .setBody("A"));, +    server.enqueue(new MockResponse(), +        .setBody("B"));, +, +    HttpURLConnection connection = factory.open(server.getUrl("/a"));, +    connection.setInstanceFollowRedirects(false);, +    assertResponseBody(connection, "A");, +    assertResponseCode(connection, 302);, +  }, +, +  private void assertResponseCode(HttpURLConnection connection, int expected) throws IOException {, +    assertEquals(expected, connection.getResponseCode());, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test, +  public void setFollowRedirectsFalse() throws Exception {, +    server.enqueue(new MockResponse(), +        .setResponseCode(302), +        .addHeader("Location: /b"), +        .setBody("A"));, +    server.enqueue(new MockResponse()]