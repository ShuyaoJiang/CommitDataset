[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import static com.squareup.okhttp.internal.Util.asByteStringList;, +        asByteStringList(":status", "404", ":version", "HTTP/1.1", "content-type", "text/plain");, +        asByteStringList(":status", "200", ":version", "HTTP/1.1", "content-type",, +    stream.reply(asByteStringList(":status", "200", ":version", "HTTP/1.1", "content-type",, +        contentType(file)), true);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import static com.squareup.okhttp.internal.Util.asByteStringList;, +        asByteStringList(":status", "404", ":version", "HTTP/1.1", "content-type", "text/plain");, +        asByteStringList(":status", "200", ":version", "HTTP/1.1", "content-type",, +    stream.reply(asByteStringList(":status", "200", ":version", "HTTP/1.1", "content-type",, +        contentType(file)), true);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +  private int bodyDelayTimeMs = 0;, +  /**, +   * Set the delayed time of the response body to {@code delay}. This applies to the, +   * response body only; response headers are not affected., +   */, +  public MockResponse setBodyDelayTimeMs(int delay) {, +    bodyDelayTimeMs = delay;, +    return this;, +  }, +, +  public int getBodyDelayTimeMs() {, +    return bodyDelayTimeMs;, +  }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import static com.squareup.okhttp.internal.Util.asByteStringList;, +        asByteStringList(":status", "404", ":version", "HTTP/1.1", "content-type", "text/plain");, +        asByteStringList(":status", "200", ":version", "HTTP/1.1", "content-type",, +    stream.reply(asByteStringList(":status", "200", ":version", "HTTP/1.1", "content-type",, +        contentType(file)), true);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +  private int bodyDelayTimeMs = 0;, +  /**, +   * Set the delayed time of the response body to {@code delay}. This applies to the, +   * response body only; response headers are not affected., +   */, +  public MockResponse setBodyDelayTimeMs(int delay) {, +    bodyDelayTimeMs = delay;, +    return this;, +  }, +, +  public int getBodyDelayTimeMs() {, +    return bodyDelayTimeMs;, +  }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] NPN_PROTOCOLS = {, +      17, 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0',, +      6, 's', 'p', 'd', 'y', '/', '3',, +      8, 'h', 't', 't', 'p', '/', '1', '.', '1', +  };, +        if (response.getBodyDelayTimeMs() != 0) {, +          try {, +            Thread.sleep(response.getBodyDelayTimeMs());, +          } catch (InterruptedException e) {, +            throw new AssertionError(e);, +          }, +        }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import static com.squareup.okhttp.internal.Util.asByteStringList;, +        asByteStringList(":status", "404", ":version", "HTTP/1.1", "content-type", "text/plain");, +        asByteStringList(":status", "200", ":version", "HTTP/1.1", "content-type",, +    stream.reply(asByteStringList(":status", "200", ":version", "HTTP/1.1", "content-type",, +        contentType(file)), true);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +  private int bodyDelayTimeMs = 0;, +  /**, +   * Set the delayed time of the response body to {@code delay}. This applies to the, +   * response body only; response headers are not affected., +   */, +  public MockResponse setBodyDelayTimeMs(int delay) {, +    bodyDelayTimeMs = delay;, +    return this;, +  }, +, +  public int getBodyDelayTimeMs() {, +    return bodyDelayTimeMs;, +  }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] NPN_PROTOCOLS = {, +      17, 'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0',, +      6, 's', 'p', 'd', 'y', '/', '3',, +      8, 'h', 't', 't', 'p', '/', '1', '.', '1', +  };, +        if (response.getBodyDelayTimeMs() != 0) {, +          try {, +            Thread.sleep(response.getBodyDelayTimeMs());, +          } catch (InterruptedException e) {, +            throw new AssertionError(e);, +          }, +        }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/ByteString.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import static com.squareup.okhttp.internal.Util.asByteStringList;, +        asByteStringList(":status", "404", ":version", "HTTP/1.1", "content-type", "text/plain");, +        asByteStringList(":status", "200", ":version", "HTTP/1.1", "content-type",, +    stream.reply(asByteStringList(":status", "200", ":version", "HTTP/1.1", "content-type",, +        contentType(file)), true);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java]