[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/CookiesTest.java, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/CookiesTest.java, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.HostResolver;, +        .setConnectionPool(ConnectionPool.getDefault()), +        .setHostResolver(dns);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpsRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpsRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpsRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpsRequest, client);, +    routeSelector = RouteSelector.get(httpsRequest, client);, +  private static class FakeDns implements HostResolver {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/CookiesTest.java, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.HostResolver;, +        .setConnectionPool(ConnectionPool.getDefault()), +        .setHostResolver(dns);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpsRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpsRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpsRequest, client);, +    RouteSelector routeSelector = RouteSelector.get(httpsRequest, client);, +    routeSelector = RouteSelector.get(httpsRequest, client);, +  private static class FakeDns implements HostResolver {, +++ b/okhttp/src/main/java/com/squareup/okhttp/HostResolver.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +, +/**, + * Domain name service. Prefer this over {@link InetAddress#getAllByName} to, + * make code more testable., + */, +public interface HostResolver {, +  HostResolver DEFAULT = new HostResolver() {, +    @Override public InetAddress[] getAllByName(String host) throws UnknownHostException {, +      if (host == null) throw new UnknownHostException("host == null");, +      return InetAddress.getAllByName(host);, +    }, +  };, +, +  InetAddress[] getAllByName(String host) throws UnknownHostException;, +}, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/CookiesTest.java, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +    assertEquals(server.getCookieDomain(), cookie.getDomain());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java, +import com.squareup.okhttp.HostResolver;, +        .setConnectionPool(ConnectionPool.getDefault()), +        .setHostResolver(dns);, +    RouteSelector routeSelector = RouteSelector.get(httpRequest, client);]