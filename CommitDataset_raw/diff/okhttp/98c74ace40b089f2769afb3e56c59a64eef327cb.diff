[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    // Give the cleanup callable time to run and settle down., +    Thread.sleep(100);, +, +  @Test public void maxIdleConnectionsLimitEnforced() throws Exception {, +    ConnectionPool pool = new ConnectionPool(2, KEEP_ALIVE_DURATION_MS);, +, +    // Hit the max idle connections limit of 2., +    pool.recycle(httpA);, +    pool.recycle(httpB);, +    Thread.sleep(100); // Give the cleanup callable time to run., +    assertPooled(pool, httpB, httpA);, +, +    // Adding httpC bumps httpA., +    pool.recycle(httpC);, +    Thread.sleep(100); // Give the cleanup callable time to run., +    assertPooled(pool, httpC, httpB);, +, +    // Adding httpD bumps httpB., +    pool.recycle(httpD);, +    Thread.sleep(100); // Give the cleanup callable time to run., +    assertPooled(pool, httpD, httpC);, +, +    // Adding httpE bumps httpC., +    pool.recycle(httpE);, +    Thread.sleep(100); // Give the cleanup callable time to run., +    assertPooled(pool, httpE, httpD);, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    // Give the cleanup callable time to run and settle down., +    Thread.sleep(100);, +, +  @Test public void maxIdleConnectionsLimitEnforced() throws Exception {, +    ConnectionPool pool = new ConnectionPool(2, KEEP_ALIVE_DURATION_MS);, +, +    // Hit the max idle connections limit of 2., +    pool.recycle(httpA);, +    pool.recycle(httpB);, +    Thread.sleep(100); // Give the cleanup callable time to run., +    assertPooled(pool, httpB, httpA);, +, +    // Adding httpC bumps httpA., +    pool.recycle(httpC);, +    Thread.sleep(100); // Give the cleanup callable time to run., +    assertPooled(pool, httpC, httpB);, +, +    // Adding httpD bumps httpB., +    pool.recycle(httpD);, +    Thread.sleep(100); // Give the cleanup callable time to run., +    assertPooled(pool, httpD, httpC);, +, +    // Adding httpE bumps httpC., +    pool.recycle(httpE);, +    Thread.sleep(100); // Give the cleanup callable time to run., +    assertPooled(pool, httpE, httpD);, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    // Give the cleanup callable time to run and settle down., +    Thread.sleep(100);, +, +  @Test public void maxIdleConnectionsLimitEnforced() throws Exception {, +    ConnectionPool pool = new ConnectionPool(2, KEEP_ALIVE_DURATION_MS);, +, +    // Hit the max idle connections limit of 2., +    pool.recycle(httpA);, +    pool.recycle(httpB);, +    Thread.sleep(100); // Give the cleanup callable time to run., +    assertPooled(pool, httpB, httpA);, +, +    // Adding httpC bumps httpA., +    pool.recycle(httpC);, +    Thread.sleep(100); // Give the cleanup callable time to run., +    assertPooled(pool, httpC, httpB);, +, +    // Adding httpD bumps httpB., +    pool.recycle(httpD);, +    Thread.sleep(100); // Give the cleanup callable time to run., +    assertPooled(pool, httpD, httpC);, +, +    // Adding httpE bumps httpC., +    pool.recycle(httpE);, +    Thread.sleep(100); // Give the cleanup callable time to run., +    assertPooled(pool, httpE, httpD);, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +      runCleanupUntilPoolIsEmpty();, +      addConnection(connection);, +    }, +  }, +, +  private void addConnection(Connection connection) {, +    boolean empty = connections.isEmpty();, +    connections.addFirst(connection);, +    if (empty) {, +      executor.execute(connectionsCleanupRunnable);]