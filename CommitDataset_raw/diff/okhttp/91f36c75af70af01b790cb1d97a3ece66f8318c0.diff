[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +      ByteArrayOutputStream bodyOut = new ByteArrayOutputStream();, +      byte[] buffer = new byte[8192];, +      int count;, +      while ((count = bodyIn.read(buffer)) != -1) {, +        bodyOut.write(buffer, 0, count);, +      }, +      return new RecordedRequest(requestLine, httpHeaders, chunkSizes, bodyOut.size(),, +          bodyOut.toByteArray(), sequenceNumber.getAndIncrement(), socket);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +      ByteArrayOutputStream bodyOut = new ByteArrayOutputStream();, +      byte[] buffer = new byte[8192];, +      int count;, +      while ((count = bodyIn.read(buffer)) != -1) {, +        bodyOut.write(buffer, 0, count);, +      }, +      return new RecordedRequest(requestLine, httpHeaders, chunkSizes, bodyOut.size(),, +          bodyOut.toByteArray(), sequenceNumber.getAndIncrement(), socket);, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java, +import org.junit.After;, +import org.junit.Test;, +import static org.junit.Assert.assertEquals;, +public class CustomDispatcherTest {, +  @After public void tearDown() throws Exception {, +  @Test public void simpleDispatch() throws Exception {, +  @Test public void outOfOrderResponses() throws Exception {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +      ByteArrayOutputStream bodyOut = new ByteArrayOutputStream();, +      byte[] buffer = new byte[8192];, +      int count;, +      while ((count = bodyIn.read(buffer)) != -1) {, +        bodyOut.write(buffer, 0, count);, +      }, +      return new RecordedRequest(requestLine, httpHeaders, chunkSizes, bodyOut.size(),, +          bodyOut.toByteArray(), sequenceNumber.getAndIncrement(), socket);, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java, +import org.junit.After;, +import org.junit.Test;, +import static org.junit.Assert.assertEquals;, +public class CustomDispatcherTest {, +  @After public void tearDown() throws Exception {, +  @Test public void simpleDispatch() throws Exception {, +  @Test public void outOfOrderResponses() throws Exception {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +        .assertSuccessful(), +  @Test public void getReturns500() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(500));, +    server.play();, +, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .build();, +, +    executeSynchronously(request), +        .assertCode(500), +        .assertNotSuccessful();, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +      ByteArrayOutputStream bodyOut = new ByteArrayOutputStream();, +      byte[] buffer = new byte[8192];, +      int count;, +      while ((count = bodyIn.read(buffer)) != -1) {, +        bodyOut.write(buffer, 0, count);, +      }, +      return new RecordedRequest(requestLine, httpHeaders, chunkSizes, bodyOut.size(),, +          bodyOut.toByteArray(), sequenceNumber.getAndIncrement(), socket);, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java, +import org.junit.After;, +import org.junit.Test;, +import static org.junit.Assert.assertEquals;, +public class CustomDispatcherTest {, +  @After public void tearDown() throws Exception {, +  @Test public void simpleDispatch() throws Exception {, +  @Test public void outOfOrderResponses() throws Exception {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +        .assertSuccessful(), +  @Test public void getReturns500() throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(500));, +    server.play();, +, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .build();, +, +    executeSynchronously(request), +        .assertCode(500), +        .assertNotSuccessful();, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +  public RecordedResponse assertSuccessful() {, +    assertTrue(response.isSuccessful());, +    return this;]