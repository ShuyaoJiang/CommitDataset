[+++ b/samples/guide/src/main/java/okhttp3/recipes/PrintEvents.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.recipes;, +, +import java.io.IOException;, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.net.Proxy;, +import java.util.List;, +import java.util.concurrent.atomic.AtomicLong;, +import okhttp3.Call;, +import okhttp3.Callback;, +import okhttp3.Connection;, +import okhttp3.EventListener;, +import okhttp3.Handshake;, +import okhttp3.OkHttpClient;, +import okhttp3.Protocol;, +import okhttp3.Request;, +import okhttp3.Response;, +import okhttp3.ResponseBody;, +, +public final class PrintEvents {, +  private final OkHttpClient client = new OkHttpClient.Builder(), +      .eventListenerFactory(PrintingEventListener.FACTORY), +      .build();, +, +  public void run() throws Exception {, +    Request washingtonPostRequest = new Request.Builder(), +        .url("https://www.washingtonpost.com/"), +        .build();, +    client.newCall(washingtonPostRequest).enqueue(new Callback() {, +      @Override public void onFailure(Call call, IOException e) {, +      }, +, +      @Override public void onResponse(Call call, Response response) throws IOException {, +        try (ResponseBody body = response.body()) {, +          // Consume and discard the response body., +          body.source().readByteString();, +        }, +      }, +    });, +, +    Request newYorkTimesRequest = new Request.Builder(), +        .url("https://www.nytimes.com/"), +        .build();, +    client.newCall(newYorkTimesRequest).enqueue(new Callback() {, +      @Override public void onFailure(Call call, IOException e) {, +      }, +, +      @Override public void onResponse(Call call, Response response) throws IOException {, +        try (ResponseBody body = response.body()) {, +          // Consume and discard the response body., +          body.source().readByteString();, +        }, +      }, +    });, +  }, +, +  public static void main(String... args) throws Exception {, +    new PrintEvents().run();, +  }, +, +  private static final class PrintingEventListener extends EventListener {, +    private static final Factory FACTORY = new Factory() {, +      final AtomicLong nextCallId = new AtomicLong(1L);, +, +      @Override public EventListener create(Call call) {, +        long callId = nextCallId.getAndIncrement();, +        System.out.printf("%04d %s%n", callId, call.request().url());, +        return new PrintingEventListener(callId, System.nanoTime());, +      }, +    };, +, +    final long callId;, +    final long callStartNanos;, +, +    public PrintingEventListener(long callId, long callStartNanos) {, +      this.callId = callId;, +      this.callStartNanos = callStartNanos;, +    }, +, +    private void printEvent(String name) {, +      long elapsedNanos = System.nanoTime() - callStartNanos;, +      System.out.printf("%04d %.3f %s%n", callId, elapsedNanos / 1000000000d, name);, +    }, +]