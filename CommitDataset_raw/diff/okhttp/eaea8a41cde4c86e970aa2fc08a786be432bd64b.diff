[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static java.util.Arrays.asList;, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isGreaterThanOrEqualTo(1000L);, +    assertThat(server.getPort()).isGreaterThan(0);, +      assertThat(e.getMessage()).contains("refused");, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static java.util.Arrays.asList;, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isGreaterThanOrEqualTo(1000L);, +    assertThat(server.getPort()).isGreaterThan(0);, +      assertThat(e.getMessage()).contains("refused");, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import static java.util.Arrays.asList;, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static java.util.Arrays.asList;, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isGreaterThanOrEqualTo(1000L);, +    assertThat(server.getPort()).isGreaterThan(0);, +      assertThat(e.getMessage()).contains("refused");, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import static java.util.Arrays.asList;, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import static java.util.Arrays.asList;, +, +      return bootstrapDnsHosts(asList(bootstrapDnsHosts));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static java.util.Arrays.asList;, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isGreaterThanOrEqualTo(1000L);, +    assertThat(server.getPort()).isGreaterThan(0);, +      assertThat(e.getMessage()).contains("refused");, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import static java.util.Arrays.asList;, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import static java.util.Arrays.asList;, +, +      return bootstrapDnsHosts(asList(bootstrapDnsHosts));, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java, +    assertThat(result).contains(address("157.240.1.18"));, +    assertThat(result).contains(address("2a03:2880:f029:11:face:b00c:0:2"));, +    assertThat(asList(request1.getPath(), request2.getPath())).containsExactlyInAnyOrder(, +        "/lookup?ct&dns=AAABAAABAAAAAAAABmdvb2dsZQNjb20AAAEAAQ",, +        "/lookup?ct&dns=AAABAAABAAAAAAAABmdvb2dsZQNjb20AABwAAQ");, +      assertThat(cause).isInstanceOf(IOException.class);, +      assertThat(cause).hasMessage("response size exceeds limit (65536 bytes): 65537 bytes");, +      assertThat(ioe).hasMessage("google.com");, +      assertThat(ioe.getCause()).isInstanceOf(RuntimeException.class);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import static java.util.Arrays.asList;, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isBetween(500L, 1000L);, +    assertThat(elapsedMillis).isGreaterThanOrEqualTo(1000L);, +    assertThat(server.getPort()).isGreaterThan(0);, +      assertThat(e.getMessage()).contains("refused");, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import static java.util.Arrays.asList;, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +    List<Header> responseHeaders = asList(, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import static java.util.Arrays.asList;, +, +      return bootstrapDnsHosts(asList(bootstrapDnsHosts));, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java, +    assertThat(result).contains(address("157.240.1.18"));, +    assertThat(result).contains(address("2a03:2880:f029:11:face:b00c:0:2"));, +    assertThat(asList(request1.getPath(), request2.getPath())).containsExactlyInAnyOrder(, +        "/lookup?ct&dns=AAABAAABAAAAAAAABmdvb2dsZQNjb20AAAEAAQ",, +        "/lookup?ct&dns=AAABAAABAAAAAAAABmdvb2dsZQNjb20AABwAAQ");, +      assertThat(cause).isInstanceOf(IOException.class);, +      assertThat(cause).hasMessage("response size exceeds limit (65536 bytes): 65537 bytes");]