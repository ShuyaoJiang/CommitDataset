[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    boolean expectContinue = false;, +        expectContinue = true;, +    if (expectContinue && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, +    if (contentLength != -1) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    boolean expectContinue = false;, +        expectContinue = true;, +    if (expectContinue && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, +    if (contentLength != -1) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.nio.charset.StandardCharsets;, +, +  @Test public void http100Continue() throws Exception {, +    server.enqueue(new MockResponse().setBody("response"));, +, +    URL url = server.url("/").url();, +    HttpURLConnection connection = (HttpURLConnection) url.openConnection();, +    connection.setDoOutput(true);, +    connection.setRequestProperty("Expect", "100-Continue");, +    connection.getOutputStream().write("request".getBytes(StandardCharsets.UTF_8));, +, +    InputStream in = connection.getInputStream();, +    BufferedReader reader = new BufferedReader(new InputStreamReader(in));, +    assertEquals("response", reader.readLine());, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("request", request.getBody().readUtf8());, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    boolean expectContinue = false;, +        expectContinue = true;, +    if (expectContinue && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {, +    if (contentLength != -1) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.nio.charset.StandardCharsets;, +, +  @Test public void http100Continue() throws Exception {, +    server.enqueue(new MockResponse().setBody("response"));, +, +    URL url = server.url("/").url();, +    HttpURLConnection connection = (HttpURLConnection) url.openConnection();, +    connection.setDoOutput(true);, +    connection.setRequestProperty("Expect", "100-Continue");, +    connection.getOutputStream().write("request".getBytes(StandardCharsets.UTF_8));, +, +    InputStream in = connection.getInputStream();, +    BufferedReader reader = new BufferedReader(new InputStreamReader(in));, +    assertEquals("response", reader.readLine());, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("request", request.getBody().readUtf8());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/RecordingProxySelector.java, +    failures.add(Util.format("%s %s:%d %s",, +        uri, socketAddress, socketAddress.getPort(), ioe.getMessage()));]