[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.getBuffer().getByte(0)) {, +      byte nextByte = source.getBuffer().getByte(key.size());, +        && source.getBuffer().getByte(0) == '\n') {, +    if (source.getBuffer().getByte(0) == ':') {, +      if (source.getBuffer().getByte(0) == ' ') {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.getBuffer().getByte(0)) {, +      byte nextByte = source.getBuffer().getByte(key.size());, +        && source.getBuffer().getByte(0) == '\n') {, +    if (source.getBuffer().getByte(0) == ':') {, +      if (source.getBuffer().getByte(0) == ' ') {, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/Event.java, +    int result = Objects.hashCode(id);, +    result = 31 * result + Objects.hashCode(type);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.getBuffer().getByte(0)) {, +      byte nextByte = source.getBuffer().getByte(key.size());, +        && source.getBuffer().getByte(0) == '\n') {, +    if (source.getBuffer().getByte(0) == ':') {, +      if (source.getBuffer().getByte(0) == ' ') {, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/Event.java, +    int result = Objects.hashCode(id);, +    result = 31 * result + Objects.hashCode(type);, +++ b/okhttp-tests/src/main/java/okhttp3/TestTls13Request.java, +    try (Response response = client.newCall(request).execute()) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.getBuffer().getByte(0)) {, +      byte nextByte = source.getBuffer().getByte(key.size());, +        && source.getBuffer().getByte(0) == '\n') {, +    if (source.getBuffer().getByte(0) == ':') {, +      if (source.getBuffer().getByte(0) == ' ') {, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/Event.java, +    int result = Objects.hashCode(id);, +    result = 31 * result + Objects.hashCode(type);, +++ b/okhttp-tests/src/main/java/okhttp3/TestTls13Request.java, +    try (Response response = client.newCall(request).execute()) {, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +import static org.junit.Assert.assertNotEquals;, +    assertTrue(cookie.secure());, +    assertTrue(cookie.httpOnly());, +          assertNotEquals(cookieA.hashCode(), cookieB.hashCode());, +          assertNotEquals(cookieA, cookieB);, +      assertNotEquals(null, cookieA);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    try (Source source = Okio.source(file); BufferedSink sink = Okio.buffer(stream.getSink())) {, +      sink.writeAll(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.getBuffer(), source.getBuffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.getBuffer();, +          try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {]