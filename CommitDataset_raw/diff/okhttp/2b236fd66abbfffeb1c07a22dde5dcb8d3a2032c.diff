[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    String scheme = request.getTlsVersion() != null ? "https" : "http";, +    String authority = request.getHeader("Host"); // Has host and port., +        .url(scheme + "://" + authority + "/"), +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    String scheme = request.getTlsVersion() != null ? "https" : "http";, +    String authority = request.getHeader("Host"); // Has host and port., +        .url(scheme + "://" + authority + "/"), +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    String scheme = request.getTlsVersion() != null ? "https" : "http";, +    String authority = request.getHeader("Host"); // Has host and port., +        .url(scheme + "://" + authority + "/"), +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void buildRequestUsingHttpUrl() throws Exception {, +    server.enqueue(new MockResponse());, +    HttpUrl httpUrl = HttpUrl.get(server.getUrl("/"));, +    Request request = new Request.Builder(), +        .url(httpUrl), +    assertEquals(httpUrl, request.httpUrl());, +, +    executeSynchronously(request).assertSuccessful();, +    Request.Builder requestBuilder = new Request.Builder();, +      requestBuilder.url("ftp://hostname/path");, +      assertEquals(expected.getMessage(), "unexpected url: ftp://hostname/path");, +    Request.Builder requestBuilder = new Request.Builder();, +    try {, +      requestBuilder.url("http://localhost:65536/");, +      fail();, +    } catch (IllegalArgumentException expected) {, +      assertEquals(expected.getMessage(), "unexpected url: http://localhost:65536/");, +    }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    String scheme = request.getTlsVersion() != null ? "https" : "http";, +    String authority = request.getHeader("Host"); // Has host and port., +        .url(scheme + "://" + authority + "/"), +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void buildRequestUsingHttpUrl() throws Exception {, +    server.enqueue(new MockResponse());, +    HttpUrl httpUrl = HttpUrl.get(server.getUrl("/"));, +    Request request = new Request.Builder(), +        .url(httpUrl), +    assertEquals(httpUrl, request.httpUrl());, +, +    executeSynchronously(request).assertSuccessful();, +    Request.Builder requestBuilder = new Request.Builder();, +      requestBuilder.url("ftp://hostname/path");, +      assertEquals(expected.getMessage(), "unexpected url: ftp://hostname/path");, +    Request.Builder requestBuilder = new Request.Builder();, +    try {, +      requestBuilder.url("http://localhost:65536/");, +      fail();, +    } catch (IllegalArgumentException expected) {, +      assertEquals(expected.getMessage(), "unexpected url: http://localhost:65536/");, +    }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +        .override(Encoding.SKIP, '#', ' '), +    assertEquals("http://host/?a%2B%3D%26+b=c%2B%3D%26+d", url.toString());, +    assertEquals("a%2B%3D%26+b=c%2B%3D%26+d", url.encodedQuery());, +    assertEquals("http://host/?a+%3D%26+b=c+%3D%26+d", url.toString());, +    assertEquals("http://host/?a%2B%3D%26+b=ef", url.toString());, +    assertEquals("http://host/?a+%3D%26+b=ef", url.toString());, +    assertEquals("http://host/?a%2B%3D%26+b=c%2B%3D%26+d&a%2B%3D%26+b=e%2B%3D%26+f",, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    String scheme = request.getTlsVersion() != null ? "https" : "http";, +    String authority = request.getHeader("Host"); // Has host and port., +        .url(scheme + "://" + authority + "/"), +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +    assertEquals("http://example.com/", request.urlString());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void buildRequestUsingHttpUrl() throws Exception {]