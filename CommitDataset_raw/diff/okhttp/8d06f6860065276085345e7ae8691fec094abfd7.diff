[+++ b/src/main/java/libcore/net/http/HttpEngine.java, +    private static final CacheResponse GATEWAY_TIMEOUT_RESPONSE = new CacheResponse() {, +            result.put(null, Collections.singletonList("HTTP/1.1 504 Gateway Timeout"));, +         * response and use a GATEWAY_TIMEOUT response instead, as specified, +         * by http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.4., +            this.cacheResponse = GATEWAY_TIMEOUT_RESPONSE;, +++ b/src/main/java/libcore/net/http/HttpEngine.java, +    private static final CacheResponse GATEWAY_TIMEOUT_RESPONSE = new CacheResponse() {, +            result.put(null, Collections.singletonList("HTTP/1.1 504 Gateway Timeout"));, +         * response and use a GATEWAY_TIMEOUT response instead, as specified, +         * by http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.4., +            this.cacheResponse = GATEWAY_TIMEOUT_RESPONSE;, +++ b/src/main/java/libcore/net/http/HttpURLConnectionImpl.java, +++ b/src/main/java/libcore/net/http/HttpEngine.java, +    private static final CacheResponse GATEWAY_TIMEOUT_RESPONSE = new CacheResponse() {, +            result.put(null, Collections.singletonList("HTTP/1.1 504 Gateway Timeout"));, +         * response and use a GATEWAY_TIMEOUT response instead, as specified, +         * by http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.4., +            this.cacheResponse = GATEWAY_TIMEOUT_RESPONSE;, +++ b/src/main/java/libcore/net/http/HttpURLConnectionImpl.java, +++ b/src/test/java/libcore/net/http/HttpResponseCacheTest.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package libcore.net.http;, +, +import com.google.mockwebserver.MockResponse;, +import com.google.mockwebserver.MockWebServer;, +import com.google.mockwebserver.RecordedRequest;, +import com.squareup.okhttp.OkHttpConnection;, +import java.io.BufferedReader;, +import java.io.ByteArrayOutputStream;, +import java.io.File;, +import java.io.FileNotFoundException;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.InputStreamReader;, +import java.io.OutputStream;, +import java.net.CacheRequest;, +import java.net.CacheResponse;, +import java.net.CookieHandler;, +import java.net.CookieManager;, +import java.net.HttpCookie;, +import java.net.HttpURLConnection;, +import java.net.ResponseCache;, +import java.net.SecureCacheResponse;, +import java.net.URI;, +import java.net.URISyntaxException;, +import java.net.URL;, +import java.net.URLConnection;, +import java.text.DateFormat;, +import java.text.SimpleDateFormat;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.Date;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +import java.util.TimeZone;, +import java.util.UUID;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.concurrent.atomic.AtomicReference;, +import java.util.zip.GZIPOutputStream;, +import junit.framework.TestCase;, +, +import static com.google.mockwebserver.SocketPolicy.DISCONNECT_AT_END;, +, +/**, + * Android's HttpResponseCacheTest., + */, +public final class HttpResponseCacheTest extends TestCase {, +    private MockWebServer server = new MockWebServer();, +    private HttpResponseCache cache;, +//    private final MockOs mockOs = new MockOs();, +    private final CookieManager cookieManager = new CookieManager();, +, +    @Override protected void setUp() throws Exception {, +        super.setUp();, +, +        String tmp = System.getProperty("java.io.tmpdir");, +        File cacheDir = new File(tmp, "HttpCache-" + UUID.randomUUID());, +        cache = new HttpResponseCache(cacheDir, Integer.MAX_VALUE);, +        ResponseCache.setDefault(cache);, +//        mockOs.install();]