[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketWriterTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.ws;, +, +import java.io.EOFException;, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.Random;, +import okio.Buffer;, +import okio.BufferedSink;, +import okio.ByteString;, +import org.junit.After;, +import org.junit.Test;, +, +import static com.squareup.okhttp.WebSocket.PayloadType.BINARY;, +import static com.squareup.okhttp.WebSocket.PayloadType.TEXT;, +import static com.squareup.okhttp.internal.ws.Protocol.toggleMask;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +, +public class WebSocketWriterTest {, +  private final Buffer data = new Buffer();, +  private final Random random = new Random(0);, +, +  // Mutually exclusive. Use the one corresponding to the peer whose behavior you wish to test., +  private final WebSocketWriter serverWriter = new WebSocketWriter(false, data, random);, +  private final WebSocketWriter clientWriter = new WebSocketWriter(true, data, random);, +, +  @After public void tearDown() throws IOException {, +    assertEquals("Data not empty", "", data.readByteString().hex());, +  }, +, +  @Test public void serverSendSimpleHello() throws IOException {, +    Buffer payload = new Buffer().writeUtf8("Hello");, +    serverWriter.sendMessage(TEXT, payload);, +    assertData("810548656c6c6f");, +  }, +, +  @Test public void clientSendSimpleHello() throws IOException {, +    Buffer payload = new Buffer().writeUtf8("Hello");, +    clientWriter.sendMessage(TEXT, payload);, +    assertData("818560b420bb28d14cd70f");, +  }, +, +  @Test public void serverStreamSimpleHello() throws IOException {, +    BufferedSink sink = serverWriter.newMessageSink(TEXT);, +, +    sink.writeUtf8("Hel").flush();, +    assertData("010348656c");, +, +    sink.writeUtf8("lo").flush();, +    assertData("00026c6f");, +, +    sink.close();, +    assertData("8000");, +  }, +, +  @Test public void serverStreamCloseFlushes() throws IOException {, +    BufferedSink sink = serverWriter.newMessageSink(TEXT);, +, +    sink.writeUtf8("Hel").flush();, +    assertData("010348656c");, +, +    sink.writeUtf8("lo").close();, +    assertData("00026c6f");, +    assertData("8000");, +  }, +, +  @Test public void clientStreamSimpleHello() throws IOException {, +    BufferedSink sink = clientWriter.newMessageSink(TEXT);, +, +    sink.writeUtf8("Hel").flush();, +    assertData("018360b420bb28d14c");, +, +    sink.writeUtf8("lo").flush();, +    assertData("00823851d9d4543e");, +, +    sink.close();, +    assertData("80807acb933d");, +  }, +, +  @Test public void serverSendBinary() throws IOException {, +    byte[] payload = binaryData(100);, +    serverWriter.sendMessage(BINARY, new Buffer().write(payload));, +    assertData("8264");, +    assertData(payload);]