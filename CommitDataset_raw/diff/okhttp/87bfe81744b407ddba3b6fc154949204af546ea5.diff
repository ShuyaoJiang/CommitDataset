[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +import java.util.concurrent.CountDownLatch;, +    return sendResponse(s, new CountDownLatch(0));, +  }, +, +    public MockDuplexResponseBody sendResponse(String s, CountDownLatch responseSent) {, +      responseSent.countDown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +import java.util.concurrent.CountDownLatch;, +    return sendResponse(s, new CountDownLatch(0));, +  }, +, +    public MockDuplexResponseBody sendResponse(String s, CountDownLatch responseSent) {, +      responseSent.countDown();, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +import java.util.concurrent.CountDownLatch;, +  private RecordingEventListener listener = new RecordingEventListener();, +    CountDownLatch duplexResponseSent = new CountDownLatch(1);, +    listener = new RecordingEventListener() {, +      @Override public void responseHeadersEnd(Call call, Response response) {, +        try {, +          // Wait for the server to send the duplex response before acting on the 301 response, +          // and resetting the stream., +          duplexResponseSent.await();, +        } catch (InterruptedException e) {, +          throw new AssertionError();, +        }, +        super.responseHeadersEnd(call, response);, +      }, +    };, +, +    client = client.newBuilder(), +        .eventListener(listener), +        .build();, +, +            .sendResponse("/a has moved!\n", duplexResponseSent), +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +import java.util.concurrent.CountDownLatch;, +    return sendResponse(s, new CountDownLatch(0));, +  }, +, +    public MockDuplexResponseBody sendResponse(String s, CountDownLatch responseSent) {, +      responseSent.countDown();, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +import java.util.concurrent.CountDownLatch;, +  private RecordingEventListener listener = new RecordingEventListener();, +    CountDownLatch duplexResponseSent = new CountDownLatch(1);, +    listener = new RecordingEventListener() {, +      @Override public void responseHeadersEnd(Call call, Response response) {, +        try {, +          // Wait for the server to send the duplex response before acting on the 301 response, +          // and resetting the stream., +          duplexResponseSent.await();, +        } catch (InterruptedException e) {, +          throw new AssertionError();, +        }, +        super.responseHeadersEnd(call, response);, +      }, +    };, +, +    client = client.newBuilder(), +        .eventListener(listener), +        .build();, +, +            .sendResponse("/a has moved!\n", duplexResponseSent), +++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java, +public class RecordingEventListener extends EventListener {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +import java.util.concurrent.CountDownLatch;, +    return sendResponse(s, new CountDownLatch(0));, +  }, +, +    public MockDuplexResponseBody sendResponse(String s, CountDownLatch responseSent) {, +      responseSent.countDown();, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +import java.util.concurrent.CountDownLatch;, +  private RecordingEventListener listener = new RecordingEventListener();, +    CountDownLatch duplexResponseSent = new CountDownLatch(1);, +    listener = new RecordingEventListener() {, +      @Override public void responseHeadersEnd(Call call, Response response) {, +        try {, +          // Wait for the server to send the duplex response before acting on the 301 response, +          // and resetting the stream., +          duplexResponseSent.await();, +        } catch (InterruptedException e) {, +          throw new AssertionError();, +        }, +        super.responseHeadersEnd(call, response);, +      }, +    };, +, +    client = client.newBuilder(), +        .eventListener(listener), +        .build();, +, +            .sendResponse("/a has moved!\n", duplexResponseSent), +++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java, +public class RecordingEventListener extends EventListener {, +++ b/okhttp/src/main/java/okhttp3/Credentials.java, +/*]