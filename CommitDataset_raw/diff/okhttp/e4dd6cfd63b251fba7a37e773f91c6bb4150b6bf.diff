[+++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +    String mimeType = "application/x-form-urlencoded";, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +    String mimeType = "application/x-form-urlencoded";, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +    assertEquals("application/x-form-urlencoded; charset=utf-8", body.contentType().toString());, +    assertEquals("application/x-form-urlencoded; charset=utf-8", body.contentType().toString());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +    String mimeType = "application/x-form-urlencoded";, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +    assertEquals("application/x-form-urlencoded; charset=utf-8", body.contentType().toString());, +    assertEquals("application/x-form-urlencoded; charset=utf-8", body.contentType().toString());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +  @Test public void toUriForbiddenCharacter() throws Exception {, +    HttpUrl httpUrl = HttpUrl.parse("http://host/a[b");, +    try {, +      httpUrl.uri();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("not valid as a java.net.URI: http://host/a[b", expected.getMessage());, +    }, +, +  @Test public void clearFragment() throws Exception {, +    HttpUrl url = HttpUrl.parse("http://host/#fragment"), +        .newBuilder(), +        .fragment(null), +        .build();, +    assertEquals("http://host/", url.toString());, +    assertEquals(null, url.fragment());, +    assertEquals(null, url.encodedFragment());, +  }, +, +  @Test public void clearEncodedFragment() throws Exception {, +    HttpUrl url = HttpUrl.parse("http://host/#fragment"), +        .newBuilder(), +        .encodedFragment(null), +        .build();, +    assertEquals("http://host/", url.toString());, +    assertEquals(null, url.fragment());, +    assertEquals(null, url.encodedFragment());, +  }, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +    String mimeType = "application/x-form-urlencoded";, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +    assertEquals("application/x-form-urlencoded; charset=utf-8", body.contentType().toString());, +    assertEquals("application/x-form-urlencoded; charset=utf-8", body.contentType().toString());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +  @Test public void toUriForbiddenCharacter() throws Exception {, +    HttpUrl httpUrl = HttpUrl.parse("http://host/a[b");, +    try {, +      httpUrl.uri();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("not valid as a java.net.URI: http://host/a[b", expected.getMessage());, +    }, +, +  @Test public void clearFragment() throws Exception {, +    HttpUrl url = HttpUrl.parse("http://host/#fragment"), +        .newBuilder(), +        .fragment(null), +        .build();, +    assertEquals("http://host/", url.toString());, +    assertEquals(null, url.fragment());, +    assertEquals(null, url.encodedFragment());, +  }, +, +  @Test public void clearEncodedFragment() throws Exception {, +    HttpUrl url = HttpUrl.parse("http://host/#fragment"), +        .newBuilder(), +        .encodedFragment(null), +        .build();, +    assertEquals("http://host/", url.toString());, +    assertEquals(null, url.fragment());, +    assertEquals(null, url.encodedFragment());, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java, +    } catch (UnknownHostException expected) {, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +    String mimeType = "application/x-form-urlencoded";, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +    assertEquals("application/x-form-urlencoded; charset=utf-8", body.contentType().toString());, +    assertEquals("application/x-form-urlencoded; charset=utf-8", body.contentType().toString());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +  @Test public void toUriForbiddenCharacter() throws Exception {, +    HttpUrl httpUrl = HttpUrl.parse("http://host/a[b");, +    try {, +      httpUrl.uri();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("not valid as a java.net.URI: http://host/a[b", expected.getMessage());, +    }, +, +  @Test public void clearFragment() throws Exception {, +    HttpUrl url = HttpUrl.parse("http://host/#fragment"), +        .newBuilder(), +        .fragment(null), +        .build();, +    assertEquals("http://host/", url.toString());, +    assertEquals(null, url.fragment());, +    assertEquals(null, url.encodedFragment());]