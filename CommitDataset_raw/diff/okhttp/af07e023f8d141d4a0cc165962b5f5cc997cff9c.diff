[+++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +    assertEquals(0, client.callTimeoutMillis());, +      builder.callTimeout(1, TimeUnit.NANOSECONDS);, +    } catch (IllegalArgumentException ignored) {, +    }, +    try {, +      builder.callTimeout(365, TimeUnit.DAYS);, +    } catch (IllegalArgumentException ignored) {, +    }, +    try {, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +    assertEquals(0, client.callTimeoutMillis());, +      builder.callTimeout(1, TimeUnit.NANOSECONDS);, +    } catch (IllegalArgumentException ignored) {, +    }, +    try {, +      builder.callTimeout(365, TimeUnit.DAYS);, +    } catch (IllegalArgumentException ignored) {, +    }, +    try {, +++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, +import static org.junit.Assert.assertEquals;, +  @Test public void defaultConfigIsNoTimeout() throws Exception {, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Call call = client.newCall(request);, +    assertEquals(0, call.timeout().timeoutNanos());, +  }, +, +  @Test public void configureClientDefault() throws Exception {, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    OkHttpClient timeoutClient = client.newBuilder(), +        .callTimeout(456, TimeUnit.MILLISECONDS), +        .build();, +, +    Call call = timeoutClient.newCall(request);, +    assertEquals(TimeUnit.MILLISECONDS.toNanos(456), call.timeout().timeoutNanos());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +    assertEquals(0, client.callTimeoutMillis());, +      builder.callTimeout(1, TimeUnit.NANOSECONDS);, +    } catch (IllegalArgumentException ignored) {, +    }, +    try {, +      builder.callTimeout(365, TimeUnit.DAYS);, +    } catch (IllegalArgumentException ignored) {, +    }, +    try {, +++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, +import static org.junit.Assert.assertEquals;, +  @Test public void defaultConfigIsNoTimeout() throws Exception {, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Call call = client.newCall(request);, +    assertEquals(0, call.timeout().timeoutNanos());, +  }, +, +  @Test public void configureClientDefault() throws Exception {, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    OkHttpClient timeoutClient = client.newBuilder(), +        .callTimeout(456, TimeUnit.MILLISECONDS), +        .build();, +, +    Call call = timeoutClient.newCall(request);, +    assertEquals(TimeUnit.MILLISECONDS.toNanos(456), call.timeout().timeoutNanos());, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Call.java, +   * Returns a timeout that spans the entire call: resolving DNS, connecting, writing the request, +   * body, server processing, and reading the response body. If the call requires redirects or, +   * retries all must complete within one timeout period., +   *, +   * <p>Configure the client's default timeout with {@link OkHttpClient.Builder#callTimeout}., +++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java, +    assertEquals(0, client.callTimeoutMillis());, +      builder.callTimeout(1, TimeUnit.NANOSECONDS);, +    } catch (IllegalArgumentException ignored) {, +    }, +    try {, +      builder.callTimeout(365, TimeUnit.DAYS);, +    } catch (IllegalArgumentException ignored) {, +    }, +    try {, +++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java, +import static org.junit.Assert.assertEquals;, +  @Test public void defaultConfigIsNoTimeout() throws Exception {, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Call call = client.newCall(request);, +    assertEquals(0, call.timeout().timeoutNanos());]