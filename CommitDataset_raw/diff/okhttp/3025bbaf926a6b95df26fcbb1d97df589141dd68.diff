[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +        .override(Encoding.SKIP, '#', '+'), +    assertEquals("http://host/?a%2B%3D%26%20b=c%2B%3D%26%20d", url.toString());, +    assertEquals("a%2B%3D%26%20b=c%2B%3D%26%20d", url.encodedQuery());, +    assertEquals("http://host/?a%20%3D%26%20b=c%20%3D%26%20d", url.toString());, +    assertEquals("http://host/?a%2B%3D%26%20b=ef", url.toString());, +    assertEquals("http://host/?a%20%3D%26%20b=ef", url.toString());, +    assertEquals("http://host/?a%2B%3D%26%20b=c%2B%3D%26%20d&a%2B%3D%26%20b=e%2B%3D%26%20f",, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +        .override(Encoding.SKIP, '#', '+'), +    assertEquals("http://host/?a%2B%3D%26%20b=c%2B%3D%26%20d", url.toString());, +    assertEquals("a%2B%3D%26%20b=c%2B%3D%26%20d", url.encodedQuery());, +    assertEquals("http://host/?a%20%3D%26%20b=c%20%3D%26%20d", url.toString());, +    assertEquals("http://host/?a%2B%3D%26%20b=ef", url.toString());, +    assertEquals("http://host/?a%20%3D%26%20b=ef", url.toString());, +    assertEquals("http://host/?a%2B%3D%26%20b=c%2B%3D%26%20d&a%2B%3D%26%20b=e%2B%3D%26%20f",, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/WebPlatformUrlTest.java, +      "Parsing: <http://[2001::1]:80> against <http://example.org/foo/bar>", +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +        .override(Encoding.SKIP, '#', '+'), +    assertEquals("http://host/?a%2B%3D%26%20b=c%2B%3D%26%20d", url.toString());, +    assertEquals("a%2B%3D%26%20b=c%2B%3D%26%20d", url.encodedQuery());, +    assertEquals("http://host/?a%20%3D%26%20b=c%20%3D%26%20d", url.toString());, +    assertEquals("http://host/?a%2B%3D%26%20b=ef", url.toString());, +    assertEquals("http://host/?a%20%3D%26%20b=ef", url.toString());, +    assertEquals("http://host/?a%2B%3D%26%20b=c%2B%3D%26%20d&a%2B%3D%26%20b=e%2B%3D%26%20f",, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/WebPlatformUrlTest.java, +      "Parsing: <http://[2001::1]:80> against <http://example.org/foo/bar>", +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpUrl.java, +import java.util.Arrays;, + *     https://www.google.com/search?q=polar%20bears, +    return percentDecode(username);, +    return password != null ? percentDecode(password) : null;, +      result.add(percentDecode(pathSegments.get(i)));, +      percentDecode(result, name, 0, name.length());, +        percentDecode(result, value, 0, value.length());, +        return value != null ? percentDecode(value) : null;, +      result.add(percentDecode(queryNamesAndValues.get(i)));, +        result.add(value != null ? percentDecode(value) : null);, +    return percentDecode(queryNamesAndValues.get(index * 2));, +    return value != null ? percentDecode(value) : null;, +    return fragment != null ? percentDecode(fragment) : null;, +      String percentDecoded = percentDecode(input, pos, limit);, +  static String percentDecode(String encoded) {, +    return percentDecode(encoded, 0, encoded.length());, +  static String percentDecode(String encoded, int pos, int limit) {, +      if (c == '%') {, +        percentDecode(out, encoded, i, limit);, +  static void percentDecode(Buffer out, String encoded, int pos, int limit) {, +          || (query && codePoint == '+')) {, +        // HTML permits space to be encoded as '+'. We use '%20' to avoid special cases., +        out.append(alreadyEncoded ? "%20" : "%2B");]