[+++ b/build.gradle, +import net.ltgt.gradle.errorprone.CheckSeverity, +, +, +    testLogging {, +      exceptionFormat = 'full', +    }, +  tasks.withType(JavaCompile).configureEach {, +    options.errorprone {, +      check("MissingOverride", CheckSeverity.ERROR), +    }, +  }, +++ b/build.gradle, +import net.ltgt.gradle.errorprone.CheckSeverity, +, +, +    testLogging {, +      exceptionFormat = 'full', +    }, +  tasks.withType(JavaCompile).configureEach {, +    options.errorprone {, +      check("MissingOverride", CheckSeverity.ERROR), +    }, +  }, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    @Override LogRecorder assertLogMatch(String pattern) {, +++ b/build.gradle, +import net.ltgt.gradle.errorprone.CheckSeverity, +, +, +    testLogging {, +      exceptionFormat = 'full', +    }, +  tasks.withType(JavaCompile).configureEach {, +    options.errorprone {, +      check("MissingOverride", CheckSeverity.ERROR), +    }, +  }, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    @Override LogRecorder assertLogMatch(String pattern) {, +++ b/okhttp/src/main/java/okhttp3/Handshake.kt, +class Handshake private constructor(, +  override fun equals(other: Any?): Boolean {, +    return other is Handshake, +        && tlsVersion == other.tlsVersion, +        && cipherSuite == other.cipherSuite, +        && peerCertificates == other.peerCertificates, +        && localCertificates == other.localCertificates, +  }, +, +  override fun hashCode(): Int {, +    var result = 17, +    result = 31 * result + tlsVersion.hashCode(), +    result = 31 * result + cipherSuite.hashCode(), +    result = 31 * result + peerCertificates.hashCode(), +    result = 31 * result + localCertificates.hashCode(), +    return result, +  }, +, +++ b/build.gradle, +import net.ltgt.gradle.errorprone.CheckSeverity, +, +, +    testLogging {, +      exceptionFormat = 'full', +    }, +  tasks.withType(JavaCompile).configureEach {, +    options.errorprone {, +      check("MissingOverride", CheckSeverity.ERROR), +    }, +  }, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    @Override LogRecorder assertLogMatch(String pattern) {, +++ b/okhttp/src/main/java/okhttp3/Handshake.kt, +class Handshake private constructor(, +  override fun equals(other: Any?): Boolean {, +    return other is Handshake, +        && tlsVersion == other.tlsVersion, +        && cipherSuite == other.cipherSuite, +        && peerCertificates == other.peerCertificates, +        && localCertificates == other.localCertificates, +  }, +, +  override fun hashCode(): Int {, +    var result = 17, +    result = 31 * result + tlsVersion.hashCode(), +    result = 31 * result + cipherSuite.hashCode(), +    result = 31 * result + peerCertificates.hashCode(), +    result = 31 * result + localCertificates.hashCode(), +    return result, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Route.kt, +data class Route(, +  fun requiresTunnel(): Boolean = address.sslSocketFactory() != null && proxy.type() == Proxy.Type.HTTP, +++ b/build.gradle, +import net.ltgt.gradle.errorprone.CheckSeverity, +, +, +    testLogging {]