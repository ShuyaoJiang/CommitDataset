[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void lazilyEvaluateRequestUrl() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.play();, +, +    Request request1 = new Request.Builder(), +        .url("foo://bar?baz"), +        .build();, +    Request request2 = request1.newBuilder(), +        .url(server.getUrl("/")), +        .build();, +    executeSynchronously(request2), +        .assertCode(200), +        .assertSuccessful(), +        .assertBody("abc");, +  }, +, +      Request request = new Request.Builder(), +          .url("ftp://hostname/path"), +          .build();, +      executeSynchronously(request);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void lazilyEvaluateRequestUrl() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.play();, +, +    Request request1 = new Request.Builder(), +        .url("foo://bar?baz"), +        .build();, +    Request request2 = request1.newBuilder(), +        .url(server.getUrl("/")), +        .build();, +    executeSynchronously(request2), +        .assertCode(200), +        .assertSuccessful(), +        .assertBody("abc");, +  }, +, +      Request request = new Request.Builder(), +          .url("ftp://hostname/path"), +          .build();, +      executeSynchronously(request);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java, +    int windowSize = 100;, +    int windowUpdateThreshold = 50;, +      // Send frames of summing to size 50, which is windowUpdateThreshold., +      peer.sendFrame().data(false, 3, data(24));, +      peer.sendFrame().data(false, 3, data(25));, +      peer.sendFrame().data(false, 3, data(1));, +    connection.okHttpSettings.set(Settings.INITIAL_WINDOW_SIZE, 0, windowSize);, +    buffer.writeAll(in);, +    assertEquals(150, buffer.size());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void lazilyEvaluateRequestUrl() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.play();, +, +    Request request1 = new Request.Builder(), +        .url("foo://bar?baz"), +        .build();, +    Request request2 = request1.newBuilder(), +        .url(server.getUrl("/")), +        .build();, +    executeSynchronously(request2), +        .assertCode(200), +        .assertSuccessful(), +        .assertBody("abc");, +  }, +, +      Request request = new Request.Builder(), +          .url("ftp://hostname/path"), +          .build();, +      executeSynchronously(request);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java, +    int windowSize = 100;, +    int windowUpdateThreshold = 50;, +      // Send frames of summing to size 50, which is windowUpdateThreshold., +      peer.sendFrame().data(false, 3, data(24));, +      peer.sendFrame().data(false, 3, data(25));, +      peer.sendFrame().data(false, 3, data(1));, +    connection.okHttpSettings.set(Settings.INITIAL_WINDOW_SIZE, 0, windowSize);, +    buffer.writeAll(in);, +    assertEquals(150, buffer.size());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Spdy3ConnectionTest.java, +    int windowSize = 100;, +    int windowUpdateThreshold = 50;, +      // Send frames of summing to size 50, which is windowUpdateThreshold., +      peer.sendFrame().data(false, 1, data(24));, +      peer.sendFrame().data(false, 1, data(25));, +      peer.sendFrame().data(false, 1, data(1));, +    connection.okHttpSettings.set(Settings.INITIAL_WINDOW_SIZE, 0, windowSize);, +    buffer.writeAll(in);, +    assertEquals(150, buffer.size());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void lazilyEvaluateRequestUrl() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.play();, +, +    Request request1 = new Request.Builder(), +        .url("foo://bar?baz")]