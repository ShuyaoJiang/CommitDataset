[+++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +/*, + * Copyright (C) 2010 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.squareup.okhttp;, +, +import com.squareup.okhttp.internal.Base64;, +import com.squareup.okhttp.internal.DiskLruCache;, +import com.squareup.okhttp.internal.StrictLineReader;, +import com.squareup.okhttp.internal.Util;, +import com.squareup.okhttp.internal.http.HttpEngine;, +import com.squareup.okhttp.internal.http.HttpURLConnectionImpl;, +import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;, +import com.squareup.okhttp.internal.http.RawHeaders;, +import com.squareup.okhttp.internal.http.ResponseHeaders;, +import java.io.BufferedWriter;, +import java.io.ByteArrayInputStream;, +import java.io.File;, +import java.io.FilterInputStream;, +import java.io.FilterOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.io.OutputStreamWriter;, +import java.io.UnsupportedEncodingException;, +import java.io.Writer;, +import java.net.CacheRequest;, +import java.net.CacheResponse;, +import java.net.HttpURLConnection;, +import java.net.ResponseCache;, +import java.net.SecureCacheResponse;, +import java.net.URI;, +import java.net.URLConnection;, +import java.security.MessageDigest;, +import java.security.NoSuchAlgorithmException;, +import java.security.Principal;, +import java.security.cert.Certificate;, +import java.security.cert.CertificateEncodingException;, +import java.security.cert.CertificateException;, +import java.security.cert.CertificateFactory;, +import java.security.cert.X509Certificate;, +import java.util.Arrays;, +import java.util.List;, +import java.util.Map;, +import javax.net.ssl.HttpsURLConnection;, +import javax.net.ssl.SSLPeerUnverifiedException;, +, +import static com.squareup.okhttp.internal.Util.US_ASCII;, +import static com.squareup.okhttp.internal.Util.UTF_8;, +, +/**, + * Cache responses in a directory on the file system. Most clients should use, + * {@code android.net.HttpResponseCache}, the stable, documented front end for, + * this., + */, +public final class HttpResponseCache extends ResponseCache {, +  private static final char[] DIGITS =, +      { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };, +, +  // TODO: add APIs to iterate the cache?, +  private static final int VERSION = 201105;, +  private static final int ENTRY_METADATA = 0;, +  private static final int ENTRY_BODY = 1;, +  private static final int ENTRY_COUNT = 2;, +, +  private final DiskLruCache cache;, +, +  /* read and write statistics, all guarded by 'this' */, +  private int writeSuccessCount;, +  private int writeAbortCount;, +  private int networkCount;, +  private int hitCount;, +  private int requestCount;, +, +  public HttpResponseCache(File directory, long maxSize) throws IOException {, +    cache = DiskLruCache.open(directory, VERSION, ENTRY_COUNT, maxSize);, +  }, +, +  private String uriToKey(URI uri) {, +    try {, +      MessageDigest messageDigest = MessageDigest.getInstance("MD5");, +      byte[] md5bytes = messageDigest.digest(uri.toString().getBytes("UTF-8"));, +      return bytesToHexString(md5bytes);, +    } catch (NoSuchAlgorithmException e) {, +      throw new AssertionError(e);, +    } catch (UnsupportedEncodingException e) {, +      throw new AssertionError(e);]