[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private InetSocketAddress inetSocketAddress;, +    if (inetSocketAddress == null) {, +      throw new IllegalStateException("Call start() before getHostName()");, +    }, +    return inetSocketAddress.getHostName();, +    if (inetSocketAddress == null) {, +    InetSocketAddress address = new InetSocketAddress(inetSocketAddress.getAddress(), getPort());, +    return new Proxy(Proxy.Type.HTTP, address);, +   * Starts the server on the loopback interface for the given port., +    start(InetAddress.getByName("localhost"), port);, +  }, +, +  /**, +   * Starts the server on the given address and port., +   *, +   * @param inetAddress the address to create the server socket on, +   *, +   * @param port the port to listen to, or 0 for any available port. Automated, +   *     tests should always use port 0 to avoid flakiness when a specific port, +   *     is unavailable., +   */, +  public void start(InetAddress inetAddress, int port) throws IOException {, +    start(new InetSocketAddress(inetAddress, port));, +  }, +, +  /**, +   * Starts the server and binds to the given socket address., +   *, +   * @param inetSocketAddress the socket address to bind the server on, +   */, +  private void start(InetSocketAddress inetSocketAddress) throws IOException {, +    this.inetSocketAddress = inetSocketAddress;, +    // Reuse if the user specified a port, +    serverSocket.setReuseAddress(inetSocketAddress.getPort() != 0);, +    serverSocket.bind(inetSocketAddress, 50);, +    port = serverSocket.getLocalPort();, +    executor.execute(new NamedRunnable("MockWebServer %s", port) {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private InetSocketAddress inetSocketAddress;, +    if (inetSocketAddress == null) {, +      throw new IllegalStateException("Call start() before getHostName()");, +    }, +    return inetSocketAddress.getHostName();, +    if (inetSocketAddress == null) {, +    InetSocketAddress address = new InetSocketAddress(inetSocketAddress.getAddress(), getPort());, +    return new Proxy(Proxy.Type.HTTP, address);, +   * Starts the server on the loopback interface for the given port., +    start(InetAddress.getByName("localhost"), port);, +  }, +, +  /**, +   * Starts the server on the given address and port., +   *, +   * @param inetAddress the address to create the server socket on, +   *, +   * @param port the port to listen to, or 0 for any available port. Automated, +   *     tests should always use port 0 to avoid flakiness when a specific port, +   *     is unavailable., +   */, +  public void start(InetAddress inetAddress, int port) throws IOException {, +    start(new InetSocketAddress(inetAddress, port));, +  }, +, +  /**, +   * Starts the server and binds to the given socket address., +   *, +   * @param inetSocketAddress the socket address to bind the server on, +   */, +  private void start(InetSocketAddress inetSocketAddress) throws IOException {, +    this.inetSocketAddress = inetSocketAddress;, +    // Reuse if the user specified a port, +    serverSocket.setReuseAddress(inetSocketAddress.getPort() != 0);, +    serverSocket.bind(inetSocketAddress, 50);, +    port = serverSocket.getLocalPort();, +    executor.execute(new NamedRunnable("MockWebServer %s", port) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheControlTest.java, +    assertFalse(cacheControl.isPrivate());, +    assertFalse(cacheControl.isPrivate());, +    String header = "no-cache, no-store, max-age=1, s-maxage=2, private, public, must-revalidate, ", +    assertTrue(cacheControl.isPrivate());, +  @Test public void parseIgnoreCacheControlExtensions() throws Exception {, +    // Example from http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.6, +    String header = "private, community=\"UCI\"";, +    CacheControl cacheControl = CacheControl.parse(new Headers.Builder(), +        .set("Cache-Control", header), +        .build());, +    assertFalse(cacheControl.noCache());, +    assertFalse(cacheControl.noStore());, +    assertEquals(-1, cacheControl.maxAgeSeconds());, +    assertEquals(-1, cacheControl.sMaxAgeSeconds());, +    assertTrue(cacheControl.isPrivate());, +    assertFalse(cacheControl.isPublic());, +    assertFalse(cacheControl.mustRevalidate());, +    assertEquals(-1, cacheControl.maxStaleSeconds());, +    assertEquals(-1, cacheControl.minFreshSeconds());, +    assertFalse(cacheControl.onlyIfCached());, +    assertFalse(cacheControl.noTransform());, +    assertEquals(header, cacheControl.toString());, +  }]