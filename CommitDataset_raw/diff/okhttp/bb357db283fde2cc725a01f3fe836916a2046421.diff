[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http.HttpHeaders;, +, +  /** See https://github.com/square/okhttp/issues/2780. */, +  @Test public void testDigestChallenges() {, +    // Strict RFC 2617 header., +    Headers headers = new Headers.Builder(), +        .add("WWW-Authenticate", "Digest realm=\"myrealm\", nonce=\"fjalskdflwejrlaskdfjlaskdjflaks", +            + "jdflkasdf\", qop=\"auth\", stale=\"FALSE\""), +        .build();, +    List<Challenge> challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals(1, challenges.size());, +    assertEquals("Digest", challenges.get(0).scheme());, +    assertEquals("myrealm", challenges.get(0).realm());, +, +    // Not strict RFC 2617 header., +    headers = new Headers.Builder(), +        .add("WWW-Authenticate", "Digest qop=\"auth\", realm=\"myrealm\", nonce=\"fjalskdflwejrlask", +            + "dfjlaskdjflaksjdflkasdf\", stale=\"FALSE\""), +        .build();, +    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals(1, challenges.size());, +    assertEquals("Digest", challenges.get(0).scheme());, +    assertEquals("myrealm", challenges.get(0).realm());, +, +    // Not strict RFC 2617 header #2., +    headers = new Headers.Builder(), +        .add("WWW-Authenticate", "Digest qop=\"auth\", nonce=\"fjalskdflwejrlaskdfjlaskdjflaksjdflk", +            + "asdf\", realm=\"myrealm\", stale=\"FALSE\""), +        .build();, +    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals(1, challenges.size());, +    assertEquals("Digest", challenges.get(0).scheme());, +    assertEquals("myrealm", challenges.get(0).realm());, +, +    // Wrong header., +    headers = new Headers.Builder(), +        .add("WWW-Authenticate", "Digest qop=\"auth\", underrealm=\"myrealm\", nonce=\"fjalskdflwej", +            + "rlaskdfjlaskdjflaksjdflkasdf\", stale=\"FALSE\""), +        .build();, +    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals(0, challenges.size());, +, +    // Not strict RFC 2617 header with some spaces., +    headers = new Headers.Builder(), +        .add("WWW-Authenticate", "Digest qop=\"auth\",    realm=\"myrealm\", nonce=\"fjalskdflwejrl", +            + "askdfjlaskdjflaksjdflkasdf\", stale=\"FALSE\""), +        .build();, +    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals(1, challenges.size());, +    assertEquals("Digest", challenges.get(0).scheme());, +    assertEquals("myrealm", challenges.get(0).realm());, +, +    // Strict RFC 2617 header with some spaces., +    headers = new Headers.Builder(), +        .add("WWW-Authenticate", "Digest    realm=\"myrealm\", nonce=\"fjalskdflwejrlaskdfjlaskdjfl", +            + "aksjdflkasdf\", qop=\"auth\", stale=\"FALSE\""), +        .build();, +    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals(1, challenges.size());, +    assertEquals("Digest", challenges.get(0).scheme());, +    assertEquals("myrealm", challenges.get(0).realm());, +, +    // Not strict RFC 2617 camelcased., +    headers = new Headers.Builder(), +        .add("WWW-Authenticate", "DiGeSt qop=\"auth\", rEaLm=\"myrealm\", nonce=\"fjalskdflwejrlask", +            + "dfjlaskdjflaksjdflkasdf\", stale=\"FALSE\""), +        .build();, +    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals(1, challenges.size());, +    assertEquals("DiGeSt", challenges.get(0).scheme());, +    assertEquals("myrealm", challenges.get(0).realm());, +, +    // Strict RFC 2617 camelcased., +    headers = new Headers.Builder(), +        .add("WWW-Authenticate", "DIgEsT rEaLm=\"myrealm\", nonce=\"fjalskdflwejrlaskdfjlaskdjflaks", +            + "jdflkasdf\", qop=\"auth\", stale=\"FALSE\""), +        .build();, +    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals(1, challenges.size());, +    assertEquals("DIgEsT", challenges.get(0).scheme());, +    assertEquals("myrealm", challenges.get(0).realm());, +, +    // Unquoted., +    headers = new Headers.Builder(), +        .add("WWW-Authenticate", "Digest realm=myrealm").build();, +    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals(0, challenges.size());, +, +    // Scheme only., +    headers = new Headers.Builder(), +        .add("WWW-Authenticate", "Digest").build();, +    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals(0, challenges.size());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import okhttp3.internal.http.HttpHeaders;, +, +  /** See https://github.com/square/okhttp/issues/2780. */, +  @Test public void testDigestChallenges() {]