[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        .headers(request.getNewHeaders()), +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        .headers(request.getNewHeaders()), +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/RecordedRequest.java, +import com.squareup.okhttp.TlsVersion;, +import java.util.ArrayList;, +  public List<String> getHeaders() {, +    int size = headers.size();, +    List<String> headerList = new ArrayList<>(size);, +    for (int i = 0; i < size; i++) {, +      headerList.add(headers.name(i) + ": " + headers.value(i));, +    }, +    return headerList;, +  }, +, +  Headers getNewHeaders() {, +  /**, +   * Returns the first header named {@code name}, or null if no such header, +   * exists., +   */, +  /** Returns the headers named {@code name}. */, +  public List<String> getHeaders(String name) {, +    return headers.values(name);, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        .headers(request.getNewHeaders()), +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/RecordedRequest.java, +import com.squareup.okhttp.TlsVersion;, +import java.util.ArrayList;, +  public List<String> getHeaders() {, +    int size = headers.size();, +    List<String> headerList = new ArrayList<>(size);, +    for (int i = 0; i < size; i++) {, +      headerList.add(headers.name(i) + ": " + headers.value(i));, +    }, +    return headerList;, +  }, +, +  Headers getNewHeaders() {, +  /**, +   * Returns the first header named {@code name}, or null if no such header, +   * exists., +   */, +  /** Returns the headers named {@code name}. */, +  public List<String> getHeaders(String name) {, +    return headers.values(name);, +  }, +, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +import java.util.Collections;, +import okio.Buffer;, +  @Test public void recordedRequestAccessors() {, +    Headers headers = new Headers.Builder(), +        .add("User-Agent", "okhttp"), +        .add("Cookie", "s=square"), +        .add("Cookie", "a=android"), +        .add("X-Whitespace", " left"), +        .add("X-Whitespace", "right "), +        .add("X-Whitespace", " both "), +        .build();, +    List<Integer> chunkSizes = Collections.emptyList();, +    Buffer body = new Buffer().writeUtf8("ABC");, +    String requestLine = "GET / HTTP/1.1";, +    RecordedRequest request = new RecordedRequest(, +        requestLine, headers, chunkSizes, body.size(), body, 0, null);, +    assertEquals("s=square", request.getHeader("cookie"));, +    assertEquals(Arrays.asList("s=square", "a=android"), request.getHeaders("cookie"));, +    assertEquals("left", request.getHeader("x-whitespace"));, +    assertEquals(Arrays.asList("left", "right", "both"), request.getHeaders("x-whitespace"));, +    assertEquals("ABC", request.getBody().readUtf8());, +  }, +, +    assertTrue(request.getHeaders().contains("Accept-Language: en-US"));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +        .headers(request.getNewHeaders()), +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/RecordedRequest.java, +import com.squareup.okhttp.TlsVersion;, +import java.util.ArrayList;, +  public List<String> getHeaders() {, +    int size = headers.size();, +    List<String> headerList = new ArrayList<>(size);, +    for (int i = 0; i < size; i++) {, +      headerList.add(headers.name(i) + ": " + headers.value(i));, +    }, +    return headerList;, +  }, +, +  Headers getNewHeaders() {, +  /**, +   * Returns the first header named {@code name}, or null if no such header, +   * exists., +   */, +  /** Returns the headers named {@code name}. */, +  public List<String> getHeaders(String name) {, +    return headers.values(name);, +  }, +, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java]