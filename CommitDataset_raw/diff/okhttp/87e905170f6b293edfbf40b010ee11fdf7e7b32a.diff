[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/CookiesTest.java, +import okhttp3.JavaNetCookieJar;, +    cookieA.setDomain(server.getHostName());, +    cookieManager.getCookieStore().add(server.url("/").uri(), cookieA);, +    cookieB.setDomain(server.getHostName());, +    cookieManager.getCookieStore().add(server.url("/").uri(), cookieB);, +    get(server.url("/"));, +  @Test public void receiveAndSendMultipleCookies() throws Exception {, +    MockWebServer server = new MockWebServer();, +    server.enqueue(new MockResponse(), +        .addHeader("Set-Cookie", "a=android"), +        .addHeader("Set-Cookie", "b=banana"));, +    CookieManager cookieManager = new CookieManager(null, ACCEPT_ORIGINAL_SERVER);, +        .cookieJar(new JavaNetCookieJar(cookieManager)), +    get(urlWithIpAddress(server, "/"));, +    RecordedRequest request1 = server.takeRequest();, +    assertNull(request1.getHeader("Cookie"));, +    get(urlWithIpAddress(server, "/"));, +    RecordedRequest request2 = server.takeRequest();, +    assertEquals("a=android; b=banana", request2.getHeader("Cookie"));, +        .addHeader("Location: " + redirectTarget.url("/")));, +    cookie.setDomain(redirectSource.getHostName());, +    cookieManager.getCookieStore().add(redirectSource.url("/").uri(), cookie);, +    get(redirectSource.url("/"));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http/CookiesTest.java, +import okhttp3.JavaNetCookieJar;, +    cookieA.setDomain(server.getHostName());, +    cookieManager.getCookieStore().add(server.url("/").uri(), cookieA);, +    cookieB.setDomain(server.getHostName());, +    cookieManager.getCookieStore().add(server.url("/").uri(), cookieB);, +    get(server.url("/"));, +  @Test public void receiveAndSendMultipleCookies() throws Exception {, +    MockWebServer server = new MockWebServer();, +    server.enqueue(new MockResponse(), +        .addHeader("Set-Cookie", "a=android"), +        .addHeader("Set-Cookie", "b=banana"));, +    CookieManager cookieManager = new CookieManager(null, ACCEPT_ORIGINAL_SERVER);, +        .cookieJar(new JavaNetCookieJar(cookieManager)), +    get(urlWithIpAddress(server, "/"));, +    RecordedRequest request1 = server.takeRequest();, +    assertNull(request1.getHeader("Cookie"));, +    get(urlWithIpAddress(server, "/"));, +    RecordedRequest request2 = server.takeRequest();, +    assertEquals("a=android; b=banana", request2.getHeader("Cookie"));, +        .addHeader("Location: " + redirectTarget.url("/")));, +    cookie.setDomain(redirectSource.getHostName());, +    cookieManager.getCookieStore().add(redirectSource.url("/").uri(), cookie);, +    get(redirectSource.url("/"));, +++ b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetCookieJar.java, +    List<HttpCookie> javaNetCookies;, +    try {, +      javaNetCookies = HttpCookie.parse(header);, +    } catch (IllegalArgumentException e) {, +      // Unfortunately sometimes java.net gives a Cookie like "$Version=1" which it can't parse!, +      Internal.logger.log(WARNING, "Parsing request cookie failed for " + url.resolve("/..."), e);, +      return Collections.emptyList();, +    List<Cookie> result = new ArrayList<>();, +    for (HttpCookie javaNetCookie : javaNetCookies) {, +          .name(javaNetCookie.getName()), +          .value(javaNetCookie.getValue())]