[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.write(body, body.size());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.write(body, body.size());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +      Response response = client.newCall(request).execute();, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.write(body, body.size());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +      Response response = client.newCall(request).execute();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString(buffer.size()).toByteArray(),, +          body.contentType().charset());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.write(body, body.size());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +      Response response = client.newCall(request).execute();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString(buffer.size()).toByteArray(),, +          body.contentType().charset());, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +    Response okResponse = client.newCall(okRequest).execute();, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.write(body, body.size());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +      Response response = client.newCall(request).execute();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString(buffer.size()).toByteArray(),, +          body.contentType().charset());, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +    Response okResponse = client.newCall(okRequest).execute();, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +    return buffer.readUtf8(buffer.size());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.write(body, body.size());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +      Response response = client.newCall(request).execute();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString(buffer.size()).toByteArray(),, +          body.contentType().charset());, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +    Response okResponse = client.newCall(okRequest).execute();, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +    return buffer.readUtf8(buffer.size());, +++ /dev/null, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +    client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).execute(callback);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          sink.write(body, body.size());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +      Response response = client.newCall(request).execute();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString(buffer.size()).toByteArray(),, +          body.contentType().charset());, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +    Response okResponse = client.newCall(okRequest).execute();, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +    return buffer.readUtf8(buffer.size());, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +/*, + * Copyright (C) 2013 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import com.squareup.okhttp.internal.RecordingHostnameVerifier;, +import com.squareup.okhttp.internal.SslContextBuilder;, +import com.squareup.okhttp.mockwebserver.Dispatcher;, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.MockWebServer;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import com.squareup.okhttp.mockwebserver.SocketPolicy;, +import java.io.File;, +import java.io.IOException;]