[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.RecordingEventListener.CallEvent;, +import okhttp3.RecordingEventListener.ConnectEnd;, +import okhttp3.RecordingEventListener.ConnectStart;, +import okhttp3.RecordingEventListener.ConnectionAcquired;, +import okhttp3.RecordingEventListener.ConnectionReleased;, +import okhttp3.RecordingEventListener.DnsEnd;, +import okhttp3.RecordingEventListener.DnsStart;, +import okhttp3.RecordingEventListener.FetchEnd;, +import okhttp3.RecordingEventListener.FetchStart;, +import okhttp3.RecordingEventListener.RequestHeadersEnd;, +import okhttp3.RecordingEventListener.RequestHeadersStart;, +import okhttp3.RecordingEventListener.ResponseBodyEnd;, +import okhttp3.RecordingEventListener.ResponseBodyStart;, +import okhttp3.RecordingEventListener.ResponseHeadersEnd;, +import okhttp3.RecordingEventListener.ResponseHeadersStart;, +import okhttp3.RecordingEventListener.SecureConnectEnd;, +import okhttp3.RecordingEventListener.SecureConnectStart;, +    // TODO ResponseBodyEnd should not be last event, +    List<String> expectedEvents = Arrays.asList("FetchStart",, +        "DnsStart", "DnsEnd", "ConnectStart", "ConnectEnd",, +        "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd",, +        "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "ConnectionReleased", "FetchEnd", "ResponseBodyEnd");, +    // TODO ResponseBodyEnd should not be last event, +    List<String> expectedEvents = Arrays.asList("FetchStart",, +        "DnsStart", "DnsEnd", "ConnectStart", "SecureConnectStart",, +        "SecureConnectEnd", "ConnectEnd",, +        "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd",, +        "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "ConnectionReleased", "FetchEnd", "ResponseBodyEnd");, +    List<String> recordedEvents = listener.recordedEventTypes();, +    assertFalse(recordedEvents.contains("DnsStart"));, +    assertFalse(recordedEvents.contains("DnsEnd"));, +    List<String> recordedEvents = listener.recordedEventTypes();, +    assertFalse(recordedEvents.contains("SecureConnectStart"));, +    assertFalse(recordedEvents.contains("SecureConnectEnd"));, +    List<String> remainingEvents = listener.recordedEventTypes();, +    assertFalse(remainingEvents.contains("ConnectionAcquired"));, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.RecordingEventListener.CallEvent;, +import okhttp3.RecordingEventListener.ConnectEnd;, +import okhttp3.RecordingEventListener.ConnectStart;, +import okhttp3.RecordingEventListener.ConnectionAcquired;, +import okhttp3.RecordingEventListener.ConnectionReleased;, +import okhttp3.RecordingEventListener.DnsEnd;, +import okhttp3.RecordingEventListener.DnsStart;, +import okhttp3.RecordingEventListener.FetchEnd;, +import okhttp3.RecordingEventListener.FetchStart;, +import okhttp3.RecordingEventListener.RequestHeadersEnd;, +import okhttp3.RecordingEventListener.RequestHeadersStart;, +import okhttp3.RecordingEventListener.ResponseBodyEnd;, +import okhttp3.RecordingEventListener.ResponseBodyStart;, +import okhttp3.RecordingEventListener.ResponseHeadersEnd;, +import okhttp3.RecordingEventListener.ResponseHeadersStart;, +import okhttp3.RecordingEventListener.SecureConnectEnd;, +import okhttp3.RecordingEventListener.SecureConnectStart;, +    // TODO ResponseBodyEnd should not be last event, +    List<String> expectedEvents = Arrays.asList("FetchStart",, +        "DnsStart", "DnsEnd", "ConnectStart", "ConnectEnd",, +        "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd",, +        "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "ConnectionReleased", "FetchEnd", "ResponseBodyEnd");, +    // TODO ResponseBodyEnd should not be last event, +    List<String> expectedEvents = Arrays.asList("FetchStart",, +        "DnsStart", "DnsEnd", "ConnectStart", "SecureConnectStart",, +        "SecureConnectEnd", "ConnectEnd",, +        "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd",, +        "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "ConnectionReleased", "FetchEnd", "ResponseBodyEnd");, +    List<String> recordedEvents = listener.recordedEventTypes();, +    assertFalse(recordedEvents.contains("DnsStart"));, +    assertFalse(recordedEvents.contains("DnsEnd"));, +    List<String> recordedEvents = listener.recordedEventTypes();, +    assertFalse(recordedEvents.contains("SecureConnectStart"));, +    assertFalse(recordedEvents.contains("SecureConnectEnd"));, +    List<String> remainingEvents = listener.recordedEventTypes();, +    assertFalse(remainingEvents.contains("ConnectionAcquired"));, +++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java, +/*, + * Copyright (C) 2017 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.net.Proxy;, +import java.util.ArrayDeque;]