[+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.DeferredTrailers;, +import okhttp3.internal.Transmitter;, +      @Override public Transmitter transmitter(Call call) {, +        return ((RealCall) call).transmitter();, +      @Override public void initDeferredTrailers(, +          Response.Builder responseBuilder, DeferredTrailers deferredTrailers) {, +        responseBuilder.initDeferredTrailers(deferredTrailers);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.DeferredTrailers;, +import okhttp3.internal.Transmitter;, +      @Override public Transmitter transmitter(Call call) {, +        return ((RealCall) call).transmitter();, +      @Override public void initDeferredTrailers(, +          Response.Builder responseBuilder, DeferredTrailers deferredTrailers) {, +        responseBuilder.initDeferredTrailers(deferredTrailers);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.Transmitter;, +   * There is a cycle between the {@link Call} and {@link Transmitter} that makes this awkward., +   * This is set after immediately after creating the call instance., +  private Transmitter transmitter;, +    call.transmitter = new Transmitter(client, call);, +    transmitter.callStart();, +      transmitter.callFailed(e);, +    transmitter.setCallStackTrace(, +        Platform.get().getStackTraceForCloseable("response.body().close()"));, +    transmitter.callStart();, +    transmitter.cancel();, +    return transmitter.isCanceled();, +  Transmitter transmitter() {, +    return transmitter;, +        transmitter.callFailed(ioException);, +        if (transmitter.isCanceled()) {, +          transmitter.callFailed(e);, +    interceptors.add(new RetryAndFollowUpInterceptor(client));, +    Interceptor.Chain chain = new RealInterceptorChain(interceptors, transmitter, null, 0,, +        originalRequest, this, client.connectTimeoutMillis(),, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.DeferredTrailers;, +import okhttp3.internal.Transmitter;, +      @Override public Transmitter transmitter(Call call) {, +        return ((RealCall) call).transmitter();, +      @Override public void initDeferredTrailers(, +          Response.Builder responseBuilder, DeferredTrailers deferredTrailers) {, +        responseBuilder.initDeferredTrailers(deferredTrailers);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.Transmitter;, +   * There is a cycle between the {@link Call} and {@link Transmitter} that makes this awkward., +   * This is set after immediately after creating the call instance., +  private Transmitter transmitter;, +    call.transmitter = new Transmitter(client, call);, +    transmitter.callStart();, +      transmitter.callFailed(e);, +    transmitter.setCallStackTrace(, +        Platform.get().getStackTraceForCloseable("response.body().close()"));, +    transmitter.callStart();, +    transmitter.cancel();, +    return transmitter.isCanceled();, +  Transmitter transmitter() {, +    return transmitter;, +        transmitter.callFailed(ioException);, +        if (transmitter.isCanceled()) {, +          transmitter.callFailed(e);, +    interceptors.add(new RetryAndFollowUpInterceptor(client));, +    Interceptor.Chain chain = new RealInterceptorChain(interceptors, transmitter, null, 0,, +        originalRequest, this, client.connectTimeoutMillis(),, +++ b/okhttp/src/main/java/okhttp3/Response.java, +import okhttp3.internal.DeferredTrailers;, +  final @Nullable DeferredTrailers deferredTrailers;, +    this.deferredTrailers = builder.deferredTrailers;, +    return deferredTrailers.trailers();, +    @Nullable DeferredTrailers deferredTrailers;, +      this.deferredTrailers = response.deferredTrailers;, +    void initDeferredTrailers(DeferredTrailers deferredTrailers) {, +      this.deferredTrailers = deferredTrailers;, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import okhttp3.internal.DeferredTrailers;, +import okhttp3.internal.Transmitter;, +      @Override public Transmitter transmitter(Call call) {, +        return ((RealCall) call).transmitter();, +      @Override public void initDeferredTrailers(, +          Response.Builder responseBuilder, DeferredTrailers deferredTrailers) {, +        responseBuilder.initDeferredTrailers(deferredTrailers);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.Transmitter;, +   * There is a cycle between the {@link Call} and {@link Transmitter} that makes this awkward., +   * This is set after immediately after creating the call instance., +  private Transmitter transmitter;, +    call.transmitter = new Transmitter(client, call);, +    transmitter.callStart();, +      transmitter.callFailed(e);, +    transmitter.setCallStackTrace(, +        Platform.get().getStackTraceForCloseable("response.body().close()"));, +    transmitter.callStart();, +    transmitter.cancel();, +    return transmitter.isCanceled();, +  Transmitter transmitter() {, +    return transmitter;, +        transmitter.callFailed(ioException);, +        if (transmitter.isCanceled()) {]