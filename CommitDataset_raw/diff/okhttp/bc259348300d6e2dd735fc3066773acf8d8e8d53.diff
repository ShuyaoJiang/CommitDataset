[+++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java, +import junit.framework.TestCase;, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java, +import junit.framework.TestCase;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    Request request = tunnelRequest.getRequest();, +    String requestLine = tunnelRequest.requestLine();, +      out.write(request.rawHeaders().toBytes(requestLine));, +      Response response = HttpTransport.readResponse(request, in).build();, +      switch (response.code()) {, +          request = HttpAuthenticator.processAuthHeader(, +              route.address.authenticator, response, route.proxy);, +          if (request != null) continue;, +              "Unexpected response code for CONNECT: " + response.code());, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java, +import junit.framework.TestCase;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    Request request = tunnelRequest.getRequest();, +    String requestLine = tunnelRequest.requestLine();, +      out.write(request.rawHeaders().toBytes(requestLine));, +      Response response = HttpTransport.readResponse(request, in).build();, +      switch (response.code()) {, +          request = HttpAuthenticator.processAuthHeader(, +              route.address.authenticator, response, route.proxy);, +          if (request != null) continue;, +              "Unexpected response code for CONNECT: " + response.code());, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +    private final String statusLine;, +        statusLine = reader.readLine();, +      this.statusLine = response.statusLine();, +      writer.write(statusLine + '\n');, +      return new Response.Builder(request), +          .statusLine(statusLine), +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java, +import junit.framework.TestCase;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    Request request = tunnelRequest.getRequest();, +    String requestLine = tunnelRequest.requestLine();, +      out.write(request.rawHeaders().toBytes(requestLine));, +      Response response = HttpTransport.readResponse(request, in).build();, +      switch (response.code()) {, +          request = HttpAuthenticator.processAuthHeader(, +              route.address.authenticator, response, route.proxy);, +          if (request != null) continue;, +              "Unexpected response code for CONNECT: " + response.code());, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +    private final String statusLine;, +        statusLine = reader.readLine();, +      this.statusLine = response.statusLine();, +      writer.write(statusLine + '\n');, +      return new Response.Builder(request), +          .statusLine(statusLine), +++ b/okhttp/src/main/java/com/squareup/okhttp/Job.java, +    return new HttpEngine(client, this, request, connection, null);, +        return HttpAuthenticator.processAuthHeader(, +            client.getAuthenticator(), response, selectedProxy);, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java, +import junit.framework.TestCase;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    Request request = tunnelRequest.getRequest();, +    String requestLine = tunnelRequest.requestLine();, +      out.write(request.rawHeaders().toBytes(requestLine));, +      Response response = HttpTransport.readResponse(request, in).build();, +      switch (response.code()) {, +          request = HttpAuthenticator.processAuthHeader(, +              route.address.authenticator, response, route.proxy);, +          if (request != null) continue;, +              "Unexpected response code for CONNECT: " + response.code());, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +    private final String statusLine;, +        statusLine = reader.readLine();, +      this.statusLine = response.statusLine();, +      writer.write(statusLine + '\n');, +      return new Response.Builder(request), +          .statusLine(statusLine), +++ b/okhttp/src/main/java/com/squareup/okhttp/Job.java, +    return new HttpEngine(client, this, request, connection, null);, +        return HttpAuthenticator.processAuthHeader(, +            client.getAuthenticator(), response, selectedProxy);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java, +  public boolean isHttps() {, +    return url().getProtocol().equals("https");, +  }, +, +      headers.set(":method", method);, +      headers.set(":scheme", scheme);, +      headers.set(":path", path);, +      headers.set(":version", version);, +      headers.set(":host", host);, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java, +import junit.framework.TestCase;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    Request request = tunnelRequest.getRequest();, +    String requestLine = tunnelRequest.requestLine();, +      out.write(request.rawHeaders().toBytes(requestLine));, +      Response response = HttpTransport.readResponse(request, in).build();, +      switch (response.code()) {, +          request = HttpAuthenticator.processAuthHeader(, +              route.address.authenticator, response, route.proxy);, +          if (request != null) continue;]