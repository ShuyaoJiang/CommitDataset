[+++ b/checkstyle.xml, +    <module name="MethodLength">, +      <property name="max" value="200"/>, +    </module>, +++ b/checkstyle.xml, +    <module name="MethodLength">, +      <property name="max" value="200"/>, +    </module>, +++ b/okhttp-tests/pom.xml, +    <dependency>, +      <groupId>com.google.code.gson</groupId>, +      <artifactId>gson</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/checkstyle.xml, +    <module name="MethodLength">, +      <property name="max" value="200"/>, +    </module>, +++ b/okhttp-tests/pom.xml, +    <dependency>, +      <groupId>com.google.code.gson</groupId>, +      <artifactId>gson</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +import com.squareup.okhttp.UrlComponentEncodingTester.Component;, +import com.squareup.okhttp.UrlComponentEncodingTester.Encoding;, +import java.util.Arrays;, +    assertEquals(expected, HttpUrl.parse("    http://host/    ")); // Both., +    assertEquals(expected, HttpUrl.parse("http://host/").resolve("   "));, +    assertEquals(expected, HttpUrl.parse("http://host/").resolve("  .  "));, +    assertEquals("/%0B", HttpUrl.parse("http://h/\u000b").path()); // line tabulation, +    assertEquals("/%1C", HttpUrl.parse("http://h/\u001c").path()); // information separator 4, +    assertEquals("/%1D", HttpUrl.parse("http://h/\u001d").path()); // information separator 3, +    assertEquals("/%1E", HttpUrl.parse("http://h/\u001e").path()); // information separator 2, +    assertEquals("/%1F", HttpUrl.parse("http://h/\u001f").path()); // information separator 1, +    assertEquals("/%C2%85", HttpUrl.parse("http://h/\u0085").path()); // next line, +    assertEquals("/%C2%A0", HttpUrl.parse("http://h/\u00a0").path()); // non-breaking space, +    assertEquals("/%E1%9A%80", HttpUrl.parse("http://h/\u1680").path()); // ogham space mark, +    assertEquals("/%E1%A0%8E", HttpUrl.parse("http://h/\u180e").path()); // mongolian vowel separator, +    assertEquals("/%E2%80%80", HttpUrl.parse("http://h/\u2000").path()); // en quad, +    assertEquals("/%E2%80%81", HttpUrl.parse("http://h/\u2001").path()); // em quad, +    assertEquals("/%E2%80%82", HttpUrl.parse("http://h/\u2002").path()); // en space, +    assertEquals("/%E2%80%83", HttpUrl.parse("http://h/\u2003").path()); // em space, +    assertEquals("/%E2%80%84", HttpUrl.parse("http://h/\u2004").path()); // three-per-em space, +    assertEquals("/%E2%80%85", HttpUrl.parse("http://h/\u2005").path()); // four-per-em space, +    assertEquals("/%E2%80%86", HttpUrl.parse("http://h/\u2006").path()); // six-per-em space, +    assertEquals("/%E2%80%87", HttpUrl.parse("http://h/\u2007").path()); // figure space, +    assertEquals("/%E2%80%88", HttpUrl.parse("http://h/\u2008").path()); // punctuation space, +    assertEquals("/%E2%80%89", HttpUrl.parse("http://h/\u2009").path()); // thin space, +    assertEquals("/%E2%80%8A", HttpUrl.parse("http://h/\u200a").path()); // hair space, +    assertEquals("/%E2%80%8B", HttpUrl.parse("http://h/\u200b").path()); // zero-width space, +    assertEquals("/%E2%80%8C", HttpUrl.parse("http://h/\u200c").path()); // zero-width non-joiner, +    assertEquals("/%E2%80%8D", HttpUrl.parse("http://h/\u200d").path()); // zero-width joiner, +    assertEquals("/%E2%80%8E", HttpUrl.parse("http://h/\u200e").path()); // left-to-right mark, +    assertEquals("/%E2%80%8F", HttpUrl.parse("http://h/\u200f").path()); // right-to-left mark, +    assertEquals("/%E2%80%A8", HttpUrl.parse("http://h/\u2028").path()); // line separator, +    assertEquals("/%E2%80%A9", HttpUrl.parse("http://h/\u2029").path()); // paragraph separator, +    assertEquals("/%E2%80%AF", HttpUrl.parse("http://h/\u202f").path()); // narrow non-breaking space, +    assertEquals("/%E2%81%9F", HttpUrl.parse("http://h/\u205f").path()); // medium mathematical space, +    assertEquals("/%E3%80%80", HttpUrl.parse("http://h/\u3000").path()); // ideographic space, +    assertEquals("password%40", HttpUrl.parse("http://:password@@host/path").password());, +    assertEquals("/%00", HttpUrl.parse("http://host/\u0000").path());, +    assertEquals("/%08", HttpUrl.parse("http://host/\u0008").path());, +    assertEquals("/%EF%BF%BD", HttpUrl.parse("http://host/\ufffd").path());, +        .override(Encoding.PERCENT, '[', ']', '{', '}', '|', '^', '\'', ';', '=', '@'), +        .override(Encoding.SKIP, ':', '/', '\\', '?', '#'), +        .test(Component.USER);, +        .override(Encoding.PERCENT, '[', ']', '{', '}', '|', '^', '\'', ':', ';', '=', '@'), +        .override(Encoding.SKIP, '/', '\\', '?', '#'), +        .test(Component.PASSWORD);, +  }, +, +  @Test public void hostContainsIllegalCharacter() throws Exception {, +    assertEquals(null, HttpUrl.parse("http://\n/"));, +    assertEquals(null, HttpUrl.parse("http:// /"));, +    assertEquals(null, HttpUrl.parse("http://%20/"));, +  }, +, +  @Test public void hostIpv6() throws Exception {, +    // Square braces are absent from host()..., +    assertEquals("::1", HttpUrl.parse("http://[::1]/").host());, +, +    // ... but they're included in toString()., +    assertEquals("http://[::1]/", HttpUrl.parse("http://[::1]/").toString());, +, +    // IPv6 colons don't interfere with port numbers or passwords., +    assertEquals(8080, HttpUrl.parse("http://[::1]:8080/").port());, +    assertEquals("password", HttpUrl.parse("http://user:password@[::1]/").password());, +    assertEquals("::1", HttpUrl.parse("http://user:password@[::1]:8080/").host());, +, +    // Permit the contents of IPv6 addresses to be percent-encoded..., +    assertEquals("::1", HttpUrl.parse("http://[%3A%3A%31]/").host());, +, +    // Including the Square braces themselves! (This is what Chrome does.), +    assertEquals("::1", HttpUrl.parse("http://%5B%3A%3A1%5D/").host());, +  }, +, +  @Test public void port() throws Exception {, +    assertEquals(HttpUrl.parse("http://host/"), HttpUrl.parse("http://host:80/"));]