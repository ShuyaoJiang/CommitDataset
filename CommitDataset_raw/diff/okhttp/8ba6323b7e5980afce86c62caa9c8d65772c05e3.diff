[+++ b/okhttp-tls/src/main/java/okhttp3/tls/TlsNode.java, +import java.security.KeyManagementException;, +  private final X509KeyManager keyManager;, +  private TlsNode(X509KeyManager keyManager, X509TrustManager trustManager) {, +    this.keyManager = keyManager;, +  public X509KeyManager keyManager() {, +    return keyManager;, +  public SSLSocketFactory sslSocketFactory() {, +    return sslContext().getSocketFactory();, +  public SSLContext sslContext() {, +    try {, +      SSLContext sslContext = Platform.get().getSSLContext();, +      sslContext.init(new KeyManager[] { keyManager }, new TrustManager[] { trustManager },, +          new SecureRandom());, +      return sslContext;, +    } catch (KeyManagementException e) {, +      throw new AssertionError(e);, +    }, +  }, +, +  public static final class Builder {, +        return new TlsNode(keyManager, trustManager);, +++ b/okhttp-tls/src/main/java/okhttp3/tls/TlsNode.java, +import java.security.KeyManagementException;, +  private final X509KeyManager keyManager;, +  private TlsNode(X509KeyManager keyManager, X509TrustManager trustManager) {, +    this.keyManager = keyManager;, +  public X509KeyManager keyManager() {, +    return keyManager;, +  public SSLSocketFactory sslSocketFactory() {, +    return sslContext().getSocketFactory();, +  public SSLContext sslContext() {, +    try {, +      SSLContext sslContext = Platform.get().getSSLContext();, +      sslContext.init(new KeyManager[] { keyManager }, new TrustManager[] { trustManager },, +          new SecureRandom());, +      return sslContext;, +    } catch (KeyManagementException e) {, +      throw new AssertionError(e);, +    }, +  }, +, +  public static final class Builder {, +        return new TlsNode(keyManager, trustManager);, +++ b/okhttp-tls/src/test/java/okhttp3/tls/HeldCertificateTest.java, +public final class HeldCertificateTest {, +++ b/okhttp-tls/src/main/java/okhttp3/tls/TlsNode.java, +import java.security.KeyManagementException;, +  private final X509KeyManager keyManager;, +  private TlsNode(X509KeyManager keyManager, X509TrustManager trustManager) {, +    this.keyManager = keyManager;, +  public X509KeyManager keyManager() {, +    return keyManager;, +  public SSLSocketFactory sslSocketFactory() {, +    return sslContext().getSocketFactory();, +  public SSLContext sslContext() {, +    try {, +      SSLContext sslContext = Platform.get().getSSLContext();, +      sslContext.init(new KeyManager[] { keyManager }, new TrustManager[] { trustManager },, +          new SecureRandom());, +      return sslContext;, +    } catch (KeyManagementException e) {, +      throw new AssertionError(e);, +    }, +  }, +, +  public static final class Builder {, +        return new TlsNode(keyManager, trustManager);, +++ b/okhttp-tls/src/test/java/okhttp3/tls/HeldCertificateTest.java, +public final class HeldCertificateTest {, +++ b/okhttp-tls/src/test/java/okhttp3/tls/TlsNodeTest.java, +/*, + * Copyright (C) 2018 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.tls;, +, +import java.io.IOException;, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.net.ServerSocket;, +import java.net.Socket;, +import java.security.PrivateKey;, +import java.util.Arrays;, +import java.util.concurrent.Callable;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.Future;, +import javax.net.ServerSocketFactory;]