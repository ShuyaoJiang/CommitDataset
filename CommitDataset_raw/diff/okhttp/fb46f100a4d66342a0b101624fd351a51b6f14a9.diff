[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +  private List<PushPromise> promises = new ArrayList<PushPromise>();, +, +      result.headers = new ArrayList<String>(headers);, +      result.promises = new ArrayList<PushPromise>(promises);, +  /**, +   * When {@link MockWebServer#setNpnProtocols(java.util.List) protocols}, +   * include a SPDY variant, this attaches a pushed stream to this response., +   */, +  public MockResponse withPush(PushPromise promise) {, +    this.promises.add(promise);, +    return this;, +  }, +, +  /** Returns the streams the server will push with this response. */, +  public List<PushPromise> getPushPromises() {, +    return promises;, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +  private List<PushPromise> promises = new ArrayList<PushPromise>();, +, +      result.headers = new ArrayList<String>(headers);, +      result.promises = new ArrayList<PushPromise>(promises);, +  /**, +   * When {@link MockWebServer#setNpnProtocols(java.util.List) protocols}, +   * include a SPDY variant, this attaches a pushed stream to this response., +   */, +  public MockResponse withPush(PushPromise promise) {, +    this.promises.add(promise);, +    return this;, +  }, +, +  /** Returns the streams the server will push with this response. */, +  public List<PushPromise> getPushPromises() {, +    return promises;, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.spdy.ErrorCode;, +      boolean closeStreamAfterHeaders = body.length > 0 || !response.getPushPromises().isEmpty();, +      stream.reply(spdyHeaders, closeStreamAfterHeaders);, +      pushPromises(stream, response.getPushPromises());, +      } else if (closeStreamAfterHeaders) {, +        stream.close(ErrorCode.NO_ERROR);, +      }, +    }, +, +    private void pushPromises(SpdyStream stream, List<PushPromise> promises) throws IOException {, +      for (PushPromise pushPromise : promises) {, +        List<Header> pushedHeaders = new ArrayList<Header>();, +        pushedHeaders.add(new Header(stream.getConnection().getProtocol() == Protocol.SPDY_3, +            ? Header.TARGET_HOST, +            : Header.TARGET_AUTHORITY, getUrl(pushPromise.getPath()).getHost()));, +        pushedHeaders.add(new Header(Header.TARGET_METHOD, pushPromise.getMethod()));, +        pushedHeaders.add(new Header(Header.TARGET_PATH, pushPromise.getPath()));, +        for (int i = 0, size = pushPromise.getHeaders().size(); i < size; i++) {, +          String header = pushPromise.getHeaders().get(i);, +          String[] headerParts = header.split(":", 2);, +          if (headerParts.length != 2) {, +            throw new AssertionError("Unexpected header: " + header);, +          }, +          pushedHeaders.add(new Header(headerParts[0], headerParts[1]));, +        }, +        String requestLine = pushPromise.getMethod() + ' ' + pushPromise.getPath() + " HTTP/1.1";, +        List<Integer> chunkSizes = Collections.emptyList(); // No chunked encoding for SPDY., +        requestQueue.add(new RecordedRequest(requestLine, pushPromise.getHeaders(), chunkSizes, 0,, +            Util.EMPTY_BYTE_ARRAY, sequenceNumber.getAndIncrement(), socket));, +        byte[] pushedBody = pushPromise.getResponse().getBody();, +        SpdyStream pushedStream =, +            stream.getConnection().pushStream(stream.getId(), pushedHeaders, pushedBody.length > 0);, +        writeResponse(pushedStream, pushPromise.getResponse());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +  private List<PushPromise> promises = new ArrayList<PushPromise>();, +, +      result.headers = new ArrayList<String>(headers);, +      result.promises = new ArrayList<PushPromise>(promises);, +  /**, +   * When {@link MockWebServer#setNpnProtocols(java.util.List) protocols}, +   * include a SPDY variant, this attaches a pushed stream to this response., +   */, +  public MockResponse withPush(PushPromise promise) {, +    this.promises.add(promise);, +    return this;, +  }, +, +  /** Returns the streams the server will push with this response. */, +  public List<PushPromise> getPushPromises() {, +    return promises;, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.spdy.ErrorCode;, +      boolean closeStreamAfterHeaders = body.length > 0 || !response.getPushPromises().isEmpty();, +      stream.reply(spdyHeaders, closeStreamAfterHeaders);, +      pushPromises(stream, response.getPushPromises());, +      } else if (closeStreamAfterHeaders) {, +        stream.close(ErrorCode.NO_ERROR);, +      }, +    }]