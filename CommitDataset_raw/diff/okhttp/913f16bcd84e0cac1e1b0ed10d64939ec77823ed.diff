[+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +        + "OkHttp-Received-Millis: " + System.currentTimeMillis() + "\n", +        + "OkHttp-Sent-Millis: " + System.currentTimeMillis() + "\n", +        + "OkHttp-Received-Millis: " + System.currentTimeMillis() + "\n", +        + "OkHttp-Sent-Millis: " + System.currentTimeMillis() + "\n", +        + "OkHttp-Received-Millis: " + System.currentTimeMillis() + "\n", +        + "OkHttp-Sent-Millis: " + System.currentTimeMillis() + "\n";, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +        + "OkHttp-Received-Millis: " + System.currentTimeMillis() + "\n", +        + "OkHttp-Sent-Millis: " + System.currentTimeMillis() + "\n", +        + "OkHttp-Received-Millis: " + System.currentTimeMillis() + "\n", +        + "OkHttp-Sent-Millis: " + System.currentTimeMillis() + "\n", +        + "OkHttp-Received-Millis: " + System.currentTimeMillis() + "\n", +        + "OkHttp-Sent-Millis: " + System.currentTimeMillis() + "\n";, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +        + "OkHttp-Received-Millis: " + System.currentTimeMillis() + "\n", +        + "OkHttp-Sent-Millis: " + System.currentTimeMillis() + "\n", +        + "OkHttp-Received-Millis: " + System.currentTimeMillis() + "\n", +        + "OkHttp-Sent-Millis: " + System.currentTimeMillis() + "\n", +        + "OkHttp-Received-Millis: " + System.currentTimeMillis() + "\n", +        + "OkHttp-Sent-Millis: " + System.currentTimeMillis() + "\n";, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/cache2/RelayTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.cache2;, +, +import java.io.File;, +import java.io.IOException;, +import java.util.concurrent.Callable;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.Future;, +import okio.Buffer;, +import okio.BufferedSink;, +import okio.BufferedSource;, +import okio.ByteString;, +import okio.Okio;, +import okio.Pipe;, +import okio.Source;, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.TemporaryFolder;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +public final class RelayTest {, +  @Rule public final TemporaryFolder tempDir = new TemporaryFolder();, +, +  private ExecutorService executor = Executors.newCachedThreadPool();, +  private ByteString metadata = ByteString.encodeUtf8("great metadata!");, +  private File file;, +, +  @Before public void setUp() throws Exception {, +    file = tempDir.newFile();, +  }, +, +  @After public void tearDown() throws Exception {, +    executor.shutdown();, +  }, +, +  @Test public void singleSource() throws Exception {, +    Buffer upstream = new Buffer();, +    upstream.writeUtf8("abcdefghijklm");, +, +    Relay relay = Relay.edit(file, upstream, metadata, 1024);, +    Source source = relay.newSource();, +    Buffer sourceBuffer = new Buffer();, +, +    assertEquals(5, source.read(sourceBuffer, 5));, +    assertEquals("abcde", sourceBuffer.readUtf8());, +, +    assertEquals(8, source.read(sourceBuffer, 1024));, +    assertEquals("fghijklm", sourceBuffer.readUtf8());, +, +    assertEquals(-1, source.read(sourceBuffer, 1024));, +    assertEquals(0, sourceBuffer.size());, +, +    source.close();, +    assertTrue(relay.isClosed());]