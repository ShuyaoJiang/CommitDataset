[+++ b/okhttp/pom.xml, +++ b/okhttp/pom.xml, +++ /dev/null, +++ b/okhttp/pom.xml, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpsURLConnectionImpl.java, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.net.ProtocolException;, +import java.security.Permission;, +import java.security.Principal;, +import java.security.cert.Certificate;, +import java.util.List;, +import java.util.Map;, +import javax.net.ssl.HttpsURLConnection;, +import javax.net.ssl.SSLPeerUnverifiedException;, +public final class HttpsURLConnectionImpl extends HttpsURLConnection {, +, +  /** Reuse HttpURLConnectionImpl. */, +    super(url);, +    delegate = new HttpURLConnectionImpl(url, client);, +  @Override public String getCipherSuite() {, +    Handshake handshake = handshake();, +    return handshake != null ? handshake.cipherSuite() : null;, +  @Override public Certificate[] getLocalCertificates() {, +    Handshake handshake = handshake();, +    if (handshake == null) return null;, +    List<Certificate> result = handshake.localCertificates();, +    return !result.isEmpty() ? result.toArray(new Certificate[result.size()]) : null;, +  }, +, +  @Override public Certificate[] getServerCertificates() throws SSLPeerUnverifiedException {, +    Handshake handshake = handshake();, +    if (handshake == null) return null;, +    List<Certificate> result = handshake.peerCertificates();, +    return !result.isEmpty() ? result.toArray(new Certificate[result.size()]) : null;, +  }, +, +  @Override public Principal getPeerPrincipal() throws SSLPeerUnverifiedException {, +    Handshake handshake = handshake();, +    return handshake != null ? handshake.peerPrincipal() : null;, +  }, +, +  @Override public Principal getLocalPrincipal() {, +    Handshake handshake = handshake();, +    return handshake != null ? handshake.localPrincipal() : null;, +  }, +, +  private Handshake handshake() {, +  @Override public void disconnect() {, +    delegate.disconnect();, +  }, +, +  @Override public InputStream getErrorStream() {, +    return delegate.getErrorStream();, +  }, +, +  @Override public String getRequestMethod() {, +    return delegate.getRequestMethod();, +  }, +, +  @Override public int getResponseCode() throws IOException {, +    return delegate.getResponseCode();, +  }, +, +  @Override public String getResponseMessage() throws IOException {, +    return delegate.getResponseMessage();, +  }, +, +  @Override public void setRequestMethod(String method) throws ProtocolException {, +    delegate.setRequestMethod(method);, +  }, +, +  @Override public boolean usingProxy() {, +    return delegate.usingProxy();, +  }, +, +  @Override public boolean getInstanceFollowRedirects() {, +    return delegate.getInstanceFollowRedirects();, +  }, +, +  @Override public void setInstanceFollowRedirects(boolean followRedirects) {, +    delegate.setInstanceFollowRedirects(followRedirects);, +  }, +, +  @Override public void connect() throws IOException {, +    connected = true;, +    delegate.connect();, +  }, +, +  @Override public boolean getAllowUserInteraction() {, +    return delegate.getAllowUserInteraction();, +  }, +, +  @Override public Object getContent() throws IOException {, +    return delegate.getContent();, +  }, +, +  @SuppressWarnings("unchecked") // Spec does not generify]