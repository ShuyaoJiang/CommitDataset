[+++ b/okhttp-tests/src/test/java/okhttp3/ResponseBodyTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.InputStreamReader;, +import java.io.Reader;, +import java.util.concurrent.atomic.AtomicBoolean;, +import okio.Buffer;, +import okio.BufferedSource;, +import okio.ByteString;, +import okio.ForwardingSource;, +import okio.Okio;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +public final class ResponseBodyTest {, +  @Test public void stringEmpty() throws IOException {, +    ResponseBody body = body("");, +    assertEquals("", body.string());, +  }, +, +  @Test public void stringLooksLikeBomButTooShort() throws IOException {, +    ResponseBody body = body("000048");, +    assertEquals("\0\0H", body.string());, +  }, +, +  @Test public void stringDefaultsToUtf8() throws IOException {, +    ResponseBody body = body("68656c6c6f");, +    assertEquals("hello", body.string());, +  }, +, +  @Test public void stringExplicitCharset() throws IOException {, +    ResponseBody body = body("00000068000000650000006c0000006c0000006f", "utf-32be");, +    assertEquals("hello", body.string());, +  }, +, +  @Test public void stringBomOverridesExplicitCharset() throws IOException {, +    ResponseBody body = body("0000ffff00000068000000650000006c0000006c0000006f", "utf-8");, +    assertEquals("hello", body.string());, +  }, +, +  @Test public void stringBomUtf8() throws IOException {, +    ResponseBody body = body("efbbff68656c6c6f");, +    assertEquals("hello", body.string());, +  }, +, +  @Test public void stringBomUtf16Be() throws IOException {, +    ResponseBody body = body("feff00680065006c006c006f");, +    assertEquals("hello", body.string());, +  }, +, +  @Test public void stringBomUtf16Le() throws IOException {, +    ResponseBody body = body("fffe680065006c006c006f00");, +    assertEquals("hello", body.string());, +  }, +, +  @Test public void stringBomUtf32Be() throws IOException {, +    ResponseBody body = body("0000ffff00000068000000650000006c0000006c0000006f");, +    assertEquals("hello", body.string());, +  }, +, +  @Test public void stringBomUtf32Le() throws IOException {, +    ResponseBody body = body("ffff000068000000650000006c0000006c0000006f000000");, +    assertEquals("hello", body.string());, +  }, +, +  @Test public void stringClosesUnderlyingSource() throws IOException {, +    final AtomicBoolean closed = new AtomicBoolean();, +    ResponseBody body = new ResponseBody() {, +      @Override public MediaType contentType() {, +        return null;, +      }, +, +      @Override public long contentLength() {, +        return 5;, +      }, +, +      @Override public BufferedSource source() {, +        Buffer source = new Buffer().writeUtf8("hello");, +        return Okio.buffer(new ForwardingSource(source) {, +          @Override public void close() throws IOException {]