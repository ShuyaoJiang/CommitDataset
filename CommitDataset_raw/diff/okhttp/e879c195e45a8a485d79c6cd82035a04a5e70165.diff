[+++ b/okio/src/main/java/okio/DeflaterSink.java, +  private boolean closed;, +      if (deflated > 0) {, +      } else if (deflater.needsInput()) {, +        return;, +      }, +    if (closed) return;, +, +    // Emit deflated data to the underlying sink. If this fails, we still need, +    // to close the deflater and the sink; otherwise we risk leaking resources., +    Throwable thrown = null;, +    try {, +    } catch (Throwable e) {, +      thrown = e;, +    }, +, +    try {, +      deflater.end();, +    } catch (Throwable e) {, +      if (thrown == null) thrown = e;, +    }, +, +    try {, +    } catch (Throwable e) {, +      if (thrown == null) thrown = e;, +    }, +    closed = true;, +, +    if (thrown != null) Util.sneakyRethrow(thrown);, +++ b/okio/src/main/java/okio/DeflaterSink.java, +  private boolean closed;, +      if (deflated > 0) {, +      } else if (deflater.needsInput()) {, +        return;, +      }, +    if (closed) return;, +, +    // Emit deflated data to the underlying sink. If this fails, we still need, +    // to close the deflater and the sink; otherwise we risk leaking resources., +    Throwable thrown = null;, +    try {, +    } catch (Throwable e) {, +      thrown = e;, +    }, +, +    try {, +      deflater.end();, +    } catch (Throwable e) {, +      if (thrown == null) thrown = e;, +    }, +, +    try {, +    } catch (Throwable e) {, +      if (thrown == null) thrown = e;, +    }, +    closed = true;, +, +    if (thrown != null) Util.sneakyRethrow(thrown);, +++ b/okio/src/main/java/okio/OkBuffer.java, +    if (s == null) return -1;, +++ b/okio/src/main/java/okio/DeflaterSink.java, +  private boolean closed;, +      if (deflated > 0) {, +      } else if (deflater.needsInput()) {, +        return;, +      }, +    if (closed) return;, +, +    // Emit deflated data to the underlying sink. If this fails, we still need, +    // to close the deflater and the sink; otherwise we risk leaking resources., +    Throwable thrown = null;, +    try {, +    } catch (Throwable e) {, +      thrown = e;, +    }, +, +    try {, +      deflater.end();, +    } catch (Throwable e) {, +      if (thrown == null) thrown = e;, +    }, +, +    try {, +    } catch (Throwable e) {, +      if (thrown == null) thrown = e;, +    }, +    closed = true;, +, +    if (thrown != null) Util.sneakyRethrow(thrown);, +++ b/okio/src/main/java/okio/OkBuffer.java, +    if (s == null) return -1;, +++ b/okio/src/test/java/okio/DeflaterSinkTest.java, +import static org.junit.Assert.fail;, +  @Test public void multipleSegmentsWithoutCompression() throws IOException {, +    OkBuffer buffer = new OkBuffer();, +    Deflater deflater = new Deflater();, +    deflater.setLevel(Deflater.NO_COMPRESSION);, +    DeflaterSink deflaterSink = new DeflaterSink(buffer, deflater);, +    int byteCount = Segment.SIZE * 4;, +    deflaterSink.write(new OkBuffer().writeUtf8(repeat('a', byteCount)), byteCount);]