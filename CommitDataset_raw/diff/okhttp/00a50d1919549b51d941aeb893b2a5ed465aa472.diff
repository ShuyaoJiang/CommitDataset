[+++ /dev/null, +++ /dev/null, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.Platform;, +import com.squareup.okhttp.internal.Util;, +import com.squareup.okhttp.internal.spdy.IncomingStreamHandler;, +import com.squareup.okhttp.internal.spdy.SpdyConnection;, +import com.squareup.okhttp.internal.spdy.SpdyStream;, +import java.util.Arrays;, +import java.util.Collections;, +import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_AT_START;, +import static com.squareup.okhttp.mockwebserver.SocketPolicy.FAIL_HANDSHAKE;, +, +    private static final byte[] NPN_PROTOCOLS = {, +        6, 's', 'p', 'd', 'y', '/', '3',, +        8, 'h', 't', 't', 'p', '/', '1', '.', '1', +    };, +    private static final byte[] SPDY3 = new byte[] {, +        's', 'p', 'd', 'y', '/', '3', +    };, +    private static final byte[] HTTP_11 = new byte[] {, +        'h', 't', 't', 'p', '/', '1', '.', '1', +    };, +    private final Map<SpdyConnection, Boolean> openSpdyConnections, +            = new ConcurrentHashMap<SpdyConnection, Boolean>();, +    private boolean npnEnabled = true;, +     * Sets whether NPN is used on incoming HTTPS connections to negotiate a, +     * transport like HTTP/1.1 or SPDY/3. Call this method to disable NPN and, +     * SPDY., +     */, +    public void setNpnEnabled(boolean npnEnabled) {, +        this.npnEnabled = npnEnabled;, +    }, +, +    /**, +                for (Iterator<SpdyConnection> s = openSpdyConnections.keySet().iterator();, +                    s.hasNext(); ) {, +                    try {, +                        s.next().close();, +                        s.remove();, +                    } catch (Throwable e) {, +                        logger.log(Level.WARNING, "MockWebServer SPDY connection close failed", e);, +                    }, +                }, +                Transport transport = Transport.HTTP_11;, +                        processHandshakeFailure(raw);, +                    SSLSocket sslSocket = (SSLSocket) socket;, +                    sslSocket.setUseClientMode(false);, +, +                    if (npnEnabled) {, +                        Platform.get().setNpnProtocols(sslSocket, NPN_PROTOCOLS);, +                    }, +, +                    sslSocket.startHandshake();, +, +                    if (npnEnabled) {, +                        byte[] selectedProtocol = Platform.get().getNpnSelectedProtocol(sslSocket);, +                        if (selectedProtocol == null || Arrays.equals(selectedProtocol, HTTP_11)) {, +                            transport = Transport.HTTP_11;, +                        } else if (Arrays.equals(selectedProtocol, SPDY3)) {, +                            transport = Transport.SPDY_3;, +                        } else {, +                            throw new IllegalStateException("Unexpected transport: ", +                                + new String(selectedProtocol, Util.US_ASCII));, +                        }, +                    }, +                if (transport == Transport.SPDY_3) {, +                    SpdySocketHandler spdySocketHandler = new SpdySocketHandler(socket);, +                    SpdyConnection spdyConnection = new SpdyConnection.Builder(false, socket), +                            .handler(spdySocketHandler), +                            .build();, +                    openSpdyConnections.put(spdyConnection, Boolean.TRUE);, +                    openClientSockets.remove(socket);, +                    return;, +                }, +, +    private void processHandshakeFailure(Socket raw) throws Exception {, +, +    /** Processes HTTP requests layered over SPDY/3. */, +    private class SpdySocketHandler implements IncomingStreamHandler {, +        private final Socket socket;, +, +        private SpdySocketHandler(Socket socket) {, +            this.socket = socket;, +        }, +, +        @Override public void receive(final SpdyStream stream) throws IOException {, +            RecordedRequest request = readRequest(stream);, +            requestQueue.add(request);, +            MockResponse response;, +            try {, +                response = dispatcher.dispatch(request);, +            } catch (InterruptedException e) {, +                throw new AssertionError(e);, +            }, +            writeResponse(stream, response);, +            logger.info("Received request: " + request + " and responded: " + response);, +        }, +, +        private RecordedRequest readRequest(SpdyStream stream) throws IOException {]