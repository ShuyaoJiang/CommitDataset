[+++ b/okhttp-tests/src/test/java/okhttp3/internal/io/WaitUntilNotifiedTest.java, +    assertEquals(duration, now() - start - 200d, 250.0);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/io/WaitUntilNotifiedTest.java, +    assertEquals(duration, now() - start - 200d, 250.0);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.http.UnrepeatableRequestBody;, +    engine = new HttpEngine(client, request, false, forWebSocket, null, null);, +        HttpEngine retryEngine = engine.recover(e.getLastConnectException(), true);, +        HttpEngine retryEngine = engine.recover(e, false);, +      engine = new HttpEngine(client, request, false, forWebSocket, streamAllocation, response);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/io/WaitUntilNotifiedTest.java, +    assertEquals(duration, now() - start - 200d, 250.0);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.http.UnrepeatableRequestBody;, +    engine = new HttpEngine(client, request, false, forWebSocket, null, null);, +        HttpEngine retryEngine = engine.recover(e.getLastConnectException(), true);, +        HttpEngine retryEngine = engine.recover(e, false);, +      engine = new HttpEngine(client, request, false, forWebSocket, streamAllocation, response);, +++ b/okhttp/src/main/java/okhttp3/internal/RouteDatabase.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/io/WaitUntilNotifiedTest.java, +    assertEquals(duration, now() - start - 200d, 250.0);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.http.UnrepeatableRequestBody;, +    engine = new HttpEngine(client, request, false, forWebSocket, null, null);, +        HttpEngine retryEngine = engine.recover(e.getLastConnectException(), true);, +        HttpEngine retryEngine = engine.recover(e, false);, +      engine = new HttpEngine(client, request, false, forWebSocket, streamAllocation, response);, +++ b/okhttp/src/main/java/okhttp3/internal/RouteDatabase.java, +++ b/okhttp/src/main/java/okhttp3/internal/http/Http1xStream.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/io/WaitUntilNotifiedTest.java, +    assertEquals(duration, now() - start - 200d, 250.0);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.http.UnrepeatableRequestBody;, +    engine = new HttpEngine(client, request, false, forWebSocket, null, null);, +        HttpEngine retryEngine = engine.recover(e.getLastConnectException(), true);, +        HttpEngine retryEngine = engine.recover(e, false);, +      engine = new HttpEngine(client, request, false, forWebSocket, streamAllocation, response);, +++ b/okhttp/src/main/java/okhttp3/internal/RouteDatabase.java, +++ b/okhttp/src/main/java/okhttp3/internal/http/Http1xStream.java, +++ b/okhttp/src/main/java/okhttp3/internal/http/Http2xStream.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/io/WaitUntilNotifiedTest.java, +    assertEquals(duration, now() - start - 200d, 250.0);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.http.UnrepeatableRequestBody;, +    engine = new HttpEngine(client, request, false, forWebSocket, null, null);, +        HttpEngine retryEngine = engine.recover(e.getLastConnectException(), true);, +        HttpEngine retryEngine = engine.recover(e, false);, +      engine = new HttpEngine(client, request, false, forWebSocket, streamAllocation, response);, +++ b/okhttp/src/main/java/okhttp3/internal/RouteDatabase.java, +++ b/okhttp/src/main/java/okhttp3/internal/http/Http1xStream.java, +++ b/okhttp/src/main/java/okhttp3/internal/http/Http2xStream.java, +++ b/okhttp/src/main/java/okhttp3/internal/http/HttpEngine.java, + * Handles a single HTTP request/response pair. Each HTTP engine follows this lifecycle:, + *, + * <ol>, + *     <li>It is created., + *     <li>The HTTP request message is sent with sendRequest(). Once the request is sent it is an, + *         error to modify the request headers. After sendRequest() has been called the request body, + *         can be written to if it exists., + *     <li>The HTTP response message is read with readResponse(). After the response has been read, + *         the response headers and body can be read. All responses have a response body input, + *         stream, though in some instances this stream is empty., + * </ol>, +      boolean forWebSocket, StreamAllocation streamAllocation, Response priorResponse) {, +  public void sendRequest() throws RouteException, IOException {, +  private HttpStream connect() throws RouteException, IOException {, +  public HttpEngine recover(IOException e, boolean routeException) {, +    return new HttpEngine(client, userRequest, bufferRequestBody,, +        forWebSocket, streamAllocation, priorResponse);, +    } else {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/io/WaitUntilNotifiedTest.java, +    assertEquals(duration, now() - start - 200d, 250.0);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.http.UnrepeatableRequestBody;, +    engine = new HttpEngine(client, request, false, forWebSocket, null, null);, +        HttpEngine retryEngine = engine.recover(e.getLastConnectException(), true);, +        HttpEngine retryEngine = engine.recover(e, false);, +      engine = new HttpEngine(client, request, false, forWebSocket, streamAllocation, response);, +++ b/okhttp/src/main/java/okhttp3/internal/RouteDatabase.java, +++ b/okhttp/src/main/java/okhttp3/internal/http/Http1xStream.java, +++ b/okhttp/src/main/java/okhttp3/internal/http/Http2xStream.java, +++ b/okhttp/src/main/java/okhttp3/internal/http/HttpEngine.java, + * Handles a single HTTP request/response pair. Each HTTP engine follows this lifecycle:, + *, + * <ol>, + *     <li>It is created., + *     <li>The HTTP request message is sent with sendRequest(). Once the request is sent it is an, + *         error to modify the request headers. After sendRequest() has been called the request body, + *         can be written to if it exists., + *     <li>The HTTP response message is read with readResponse(). After the response has been read, + *         the response headers and body can be read. All responses have a response body input, + *         stream, though in some instances this stream is empty., + * </ol>, +      boolean forWebSocket, StreamAllocation streamAllocation, Response priorResponse) {, +  public void sendRequest() throws RouteException, IOException {, +  private HttpStream connect() throws RouteException, IOException {, +  public HttpEngine recover(IOException e, boolean routeException) {, +    return new HttpEngine(client, userRequest, bufferRequestBody,, +        forWebSocket, streamAllocation, priorResponse);, +    } else {]