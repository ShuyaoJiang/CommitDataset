[+++ b/okhttp-tests/pom.xml, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>logging-interceptor</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-tests/pom.xml, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>logging-interceptor</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.logging.HttpLoggingInterceptor;, +  @Test public void successfulCallEventSequenceWithListener() throws IOException {, +    server.enqueue(new MockResponse().setBody("abc"));, +, +    client = client.newBuilder().addNetworkInterceptor(new HttpLoggingInterceptor().setLevel(, +        HttpLoggingInterceptor.Level.BODY)).build();, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    assertEquals("abc", response.body().string());, +    response.body().close();, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",, +        "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, +        "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +++ b/okhttp-tests/pom.xml, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>logging-interceptor</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.logging.HttpLoggingInterceptor;, +  @Test public void successfulCallEventSequenceWithListener() throws IOException {, +    server.enqueue(new MockResponse().setBody("abc"));, +, +    client = client.newBuilder().addNetworkInterceptor(new HttpLoggingInterceptor().setLevel(, +        HttpLoggingInterceptor.Level.BODY)).build();, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    assertEquals("abc", response.body().string());, +    response.body().close();, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",, +        "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, +        "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/ResponseBodyTest.java, +    return ResponseBody.create(mediaType, ByteString.decodeHex(hex));, +++ b/okhttp-tests/pom.xml, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>logging-interceptor</artifactId>, +      <version>${project.version}</version>, +      <scope>test</scope>, +    </dependency>, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.logging.HttpLoggingInterceptor;, +  @Test public void successfulCallEventSequenceWithListener() throws IOException {, +    server.enqueue(new MockResponse().setBody("abc"));, +, +    client = client.newBuilder().addNetworkInterceptor(new HttpLoggingInterceptor().setLevel(, +        HttpLoggingInterceptor.Level.BODY)).build();, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response = call.execute();, +    assertEquals(200, response.code());, +    assertEquals("abc", response.body().string());, +    response.body().close();, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",, +        "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",, +        "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",, +        "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/ResponseBodyTest.java]