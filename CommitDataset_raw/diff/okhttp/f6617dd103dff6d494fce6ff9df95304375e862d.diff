[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RecordingWebSocketListener.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RecordingWebSocketListener.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RecordingWebSocketListener.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketWriterTest.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType.BINARY;, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType.TEXT;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RecordingWebSocketListener.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketWriterTest.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType.BINARY;, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType.TEXT;, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +, +      @Override public Call newCall(OkHttpClient client, Request request) {, +        return new Call(client, request);, +      }, +, +      @Override public Response callGetResponse(Call call, boolean forWebSocket), +          throws IOException {, +        return call.getResponse(forWebSocket);, +      }, +, +      @Override public void callEngineReleaseConnection(Call call) throws IOException {, +        call.engine.releaseConnection();, +      }, +, +      @Override public Connection callEngineGetConnection(Call call) {, +        return call.engine.getConnection();, +      }, +, +      @Override public boolean connectionClearOwner(Connection connection) {, +        return connection.clearOwner();, +      }, +, +      @Override public void connectionSetOwner(Connection connection, Object owner) {, +        connection.setOwner(owner);, +      }, +, +      @Override public void connectionCloseIfOwnedBy(Connection connection, Object owner), +          throws IOException {, +        connection.closeIfOwnedBy(owner);, +      }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RecordingWebSocketListener.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketWriterTest.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType.BINARY;, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType.TEXT;, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +, +      @Override public Call newCall(OkHttpClient client, Request request) {, +        return new Call(client, request);, +      }, +, +      @Override public Response callGetResponse(Call call, boolean forWebSocket), +          throws IOException {, +        return call.getResponse(forWebSocket);, +      }, +, +      @Override public void callEngineReleaseConnection(Call call) throws IOException {, +        call.engine.releaseConnection();, +      }, +, +      @Override public Connection callEngineGetConnection(Call call) {, +        return call.engine.getConnection();, +      }, +, +      @Override public boolean connectionClearOwner(Connection connection) {, +        return connection.clearOwner();, +      }, +, +      @Override public void connectionSetOwner(Connection connection, Object owner) {, +        connection.setOwner(owner);, +      }, +, +      @Override public void connectionCloseIfOwnedBy(Connection connection, Object owner), +          throws IOException {, +        connection.closeIfOwnedBy(owner);, +      }, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RecordingWebSocketListener.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketWriterTest.java, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType.BINARY;, +import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType.TEXT;, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +, +      @Override public Call newCall(OkHttpClient client, Request request) {]