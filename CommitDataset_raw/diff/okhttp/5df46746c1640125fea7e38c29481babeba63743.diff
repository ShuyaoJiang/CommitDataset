[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +    assertEquals("/%0B", HttpUrl.parse("http://h/\u000b").encodedPath()); // line tabulation, +    assertEquals("/%1C", HttpUrl.parse("http://h/\u001c").encodedPath()); // information separator 4, +    assertEquals("/%1D", HttpUrl.parse("http://h/\u001d").encodedPath()); // information separator 3, +    assertEquals("/%1E", HttpUrl.parse("http://h/\u001e").encodedPath()); // information separator 2, +    assertEquals("/%1F", HttpUrl.parse("http://h/\u001f").encodedPath()); // information separator 1, +    assertEquals("/%C2%85", HttpUrl.parse("http://h/\u0085").encodedPath()); // next line, +    assertEquals("/%C2%A0", HttpUrl.parse("http://h/\u00a0").encodedPath()); // non-breaking space, +    assertEquals("/%E1%9A%80", HttpUrl.parse("http://h/\u1680").encodedPath()); // ogham space mark, +    assertEquals("/%E1%A0%8E", HttpUrl.parse("http://h/\u180e").encodedPath()); // mongolian vowel separator, +    assertEquals("/%E2%80%80", HttpUrl.parse("http://h/\u2000").encodedPath()); // en quad, +    assertEquals("/%E2%80%81", HttpUrl.parse("http://h/\u2001").encodedPath()); // em quad, +    assertEquals("/%E2%80%82", HttpUrl.parse("http://h/\u2002").encodedPath()); // en space, +    assertEquals("/%E2%80%83", HttpUrl.parse("http://h/\u2003").encodedPath()); // em space, +    assertEquals("/%E2%80%84", HttpUrl.parse("http://h/\u2004").encodedPath()); // three-per-em space, +    assertEquals("/%E2%80%85", HttpUrl.parse("http://h/\u2005").encodedPath()); // four-per-em space, +    assertEquals("/%E2%80%86", HttpUrl.parse("http://h/\u2006").encodedPath()); // six-per-em space, +    assertEquals("/%E2%80%87", HttpUrl.parse("http://h/\u2007").encodedPath()); // figure space, +    assertEquals("/%E2%80%88", HttpUrl.parse("http://h/\u2008").encodedPath()); // punctuation space, +    assertEquals("/%E2%80%89", HttpUrl.parse("http://h/\u2009").encodedPath()); // thin space, +    assertEquals("/%E2%80%8A", HttpUrl.parse("http://h/\u200a").encodedPath()); // hair space, +    assertEquals("/%E2%80%8B", HttpUrl.parse("http://h/\u200b").encodedPath()); // zero-width space, +    assertEquals("/%E2%80%8C", HttpUrl.parse("http://h/\u200c").encodedPath()); // zero-width non-joiner, +    assertEquals("/%E2%80%8D", HttpUrl.parse("http://h/\u200d").encodedPath()); // zero-width joiner, +    assertEquals("/%E2%80%8E", HttpUrl.parse("http://h/\u200e").encodedPath()); // left-to-right mark, +    assertEquals("/%E2%80%8F", HttpUrl.parse("http://h/\u200f").encodedPath()); // right-to-left mark, +    assertEquals("/%E2%80%A8", HttpUrl.parse("http://h/\u2028").encodedPath()); // line separator, +    assertEquals("/%E2%80%A9", HttpUrl.parse("http://h/\u2029").encodedPath()); // paragraph separator, +    assertEquals("/%E2%80%AF", HttpUrl.parse("http://h/\u202f").encodedPath()); // narrow non-breaking space, +    assertEquals("/%E2%81%9F", HttpUrl.parse("http://h/\u205f").encodedPath()); // medium mathematical space, +    assertEquals("/%E3%80%80", HttpUrl.parse("http://h/\u3000").encodedPath()); // ideographic space, +    assertEquals("password%40", HttpUrl.parse("http://:password@@host/path").encodedPassword());, +    assertEquals("/%00", HttpUrl.parse("http://host/\u0000").encodedPath());, +    assertEquals("/%08", HttpUrl.parse("http://host/\u0008").encodedPath());, +    assertEquals("/%EF%BF%BD", HttpUrl.parse("http://host/\ufffd").encodedPath());, +    assertEquals("user", HttpUrl.parse("http://user@host/").username());, +    assertEquals("\uD83C\uDF69", HttpUrl.parse("http://%F0%9F%8D%A9@host/").username());, +    assertEquals("password", HttpUrl.parse("http://user:password@host/").password());, +    assertEquals("", HttpUrl.parse("http://user:@host/").password());, +    assertEquals("\uD83C\uDF69", HttpUrl.parse("http://user:%F0%9F%8D%A9@host/").password());, +        HttpUrl.parse("http://host/a%2Fb%2Fc").pathSegments());, +        HttpUrl.parse("http://host/").pathSegments());, +        HttpUrl.parse("http://host/%00").pathSegments());, +        HttpUrl.parse("http://host/a/%E2%98%83/c").pathSegments());, +        HttpUrl.parse("http://host/a/%F0%9F%8D%A9/c").pathSegments());, +        HttpUrl.parse("http://host/a/%62/c").pathSegments());, +        HttpUrl.parse("http://host/a/%7A/c").pathSegments());, +        HttpUrl.parse("http://host/a/%7a/c").pathSegments());, +        HttpUrl.parse("http://host/a%f/b").pathSegments());, +        HttpUrl.parse("http://host/%/b").pathSegments());, +        HttpUrl.parse("http://host/%").pathSegments());, +        HttpUrl.parse("http://host/a/%E2%98x/c").pathSegments());, +    assertEquals("/", url.encodedPath());, +    assertEquals("/path", url.encodedPath());, +    assertEquals("a:\u0001@/\\?#%b", url.username());, +    assertEquals("c:\u0001@/\\?#%d", url.password());, +    assertEquals(Arrays.asList("g:\u0001@/\\?#%h"), url.pathSegments());, +    assertEquals("i:\u0001@/\\?#%j", url.query());, +    assertEquals("k:\u0001@/\\?#%l", url.fragment());, +    assertEquals("a%3A%01%40%2F%5C%3F%23%25b", url.encodedUsername());, +    assertEquals("c%3A%01%40%2F%5C%3F%23%25d", url.encodedPassword());, +    assertEquals("/g:%01@%2F%5C%3F%23%25h", url.encodedPath());, +    assertEquals("i:%01@/\\?%23%25j", url.encodedQuery());, +    assertEquals("k:%01@/\\?#%25l", url.encodedFragment());, +    assertEquals("a:\u0001@/\\?#%b", url.username());, +    assertEquals("c:\u0001@/\\?#%d", url.password());, +    assertEquals(Arrays.asList("g:\u0001@/\\?#%h"), url.pathSegments());, +    assertEquals("i:\u0001@/\\?#%j", url.query());, +    assertEquals("k:\u0001@/\\?#%l", url.fragment());, +    assertEquals("a%3A%01%40%2F%5C%3F%23%25b", url.encodedUsername());, +    assertEquals("c%3A%01%40%2F%5C%3F%23%25d", url.encodedPassword());, +    assertEquals("/g:%01@%2F%5C%3F%23%25h", url.encodedPath());, +    assertEquals("i:%01@/\\?%23%25j", url.encodedQuery());, +    assertEquals("k:%01@/\\?#%25l", url.encodedFragment());, +    assertEquals("/a%2Fb/c", url.encodedPath());, +    assertEquals(Arrays.asList("a/b", "c"), url.pathSegments());, +    assertEquals("/a%2fb/c/d%2525e/f%25g", url.encodedPath());, +    assertEquals(Arrays.asList("a%2fb", "c", "d%2525e", "f%25g"), url.encodedPathSegments());, +    assertEquals(Arrays.asList("a/b", "c", "d%25e", "f%g"), url.pathSegments());, +    assertEquals("/a/b/c/", base.newBuilder().addPathSegment("").build().encodedPath());, +        base.newBuilder().addPathSegment("").addPathSegment("d").build().encodedPath());, +    assertEquals("/a/b/", base.newBuilder().addPathSegment("..").build().encodedPath());, +    assertEquals("/a/b/", base.newBuilder().addPathSegment("%2e.").build().encodedPath());, +    assertEquals("/a/", base.newBuilder().addPathSegment("%2e.").addPathSegment("..").build(), +        .encodedPath());, +    assertEquals("/a/b/", base.newBuilder().addPathSegment("").addPathSegment("..").build(), +        .encodedPath());, +    assertEquals("/a/b/c/", base.newBuilder().addPathSegment("").addPathSegment("").build(), +        .encodedPath());, +    assertEquals("a+=& b=c+=& d", url.query()); // Ambiguous! (Though working as designed.), +    assertEquals("a%2B%3D%26+b=c%2B%3D%26+d", url.encodedQuery());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +    assertEquals("/%0B", HttpUrl.parse("http://h/\u000b").encodedPath()); // line tabulation, +    assertEquals("/%1C", HttpUrl.parse("http://h/\u001c").encodedPath()); // information separator 4, +    assertEquals("/%1D", HttpUrl.parse("http://h/\u001d").encodedPath()); // information separator 3, +    assertEquals("/%1E", HttpUrl.parse("http://h/\u001e").encodedPath()); // information separator 2, +    assertEquals("/%1F", HttpUrl.parse("http://h/\u001f").encodedPath()); // information separator 1, +    assertEquals("/%C2%85", HttpUrl.parse("http://h/\u0085").encodedPath()); // next line, +    assertEquals("/%C2%A0", HttpUrl.parse("http://h/\u00a0").encodedPath()); // non-breaking space, +    assertEquals("/%E1%9A%80", HttpUrl.parse("http://h/\u1680").encodedPath()); // ogham space mark]