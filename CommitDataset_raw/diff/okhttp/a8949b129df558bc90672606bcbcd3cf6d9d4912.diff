[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  private Cache cache;, +    client = new OkHttpClient();, +    callback = new RecordingCallback();, +    logHandler = new TestLogHandler();, +, +    cache = new Cache(new File("/cache/"), Integer.MAX_VALUE, fileSystem);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  private Cache cache;, +    client = new OkHttpClient();, +    callback = new RecordingCallback();, +    logHandler = new TestLogHandler();, +, +    cache = new Cache(new File("/cache/"), Integer.MAX_VALUE, fileSystem);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +    assertEquals("::1", HttpUrl.parse("http://[::1]/").host());, +    assertEquals("http://[::1]/", HttpUrl.parse("http://[::1]/").toString());, +    assertEquals("::1", HttpUrl.parse("http://user:password@[::1]:8080/").host());, +    assertEquals("::1", HttpUrl.parse("http://[%3A%3A%31]/").host());, +    assertEquals("::1", HttpUrl.parse("http://%5B%3A%3A1%5D/").host());, +    String a3 = "2001:db8::1:0:0:1";, +    assertEquals("::1", HttpUrl.parse("http://[::0001]").host());, +    assertEquals("::1", HttpUrl.parse("http://[0000::0001]").host());, +    assertEquals("::1", HttpUrl.parse("http://[0000:0000:0000:0000:0000:0000:0000:0001]").host());, +    assertEquals("::1", HttpUrl.parse("http://[0000:0000:0000:0000:0000:0000::0001]").host());, +    assertEquals("1::", HttpUrl.parse("http://[0001:0000::]").host());, +    assertEquals("1::", HttpUrl.parse("http://[0001::0000]").host());, +    assertEquals("1::", HttpUrl.parse("http://[0001::]").host());, +    assertEquals("1::", HttpUrl.parse("http://[1::]").host());, +    assertEquals("::1:ffff:ffff", HttpUrl.parse("http://[::1:255.255.255.255]/").host());, +    assertEquals("::1:0:0", HttpUrl.parse("http://[0:0:0:0:0:1:0.0.0.0]/").host());, +  @Test public void hostIpv6CanonicalForm() throws Exception {, +    assertEquals("abcd:ef01:2345:6789:abcd:ef01:2345:6789",, +        HttpUrl.parse("http://[abcd:ef01:2345:6789:abcd:ef01:2345:6789]/").host());, +    assertEquals("a::b:0:0:0", HttpUrl.parse("http://[a:0:0:0:b:0:0:0]/").host());, +    assertEquals("a:b:0:0:c::", HttpUrl.parse("http://[a:b:0:0:c:0:0:0]/").host());, +    assertEquals("a:b::c:0:0", HttpUrl.parse("http://[a:b:0:0:0:c:0:0]/").host());, +    assertEquals("a::b:0:0:0", HttpUrl.parse("http://[a:0:0:0:b:0:0:0]/").host());, +    assertEquals("::a:b:0:0:0", HttpUrl.parse("http://[0:0:0:a:b:0:0:0]/").host());, +    assertEquals("::a:0:0:0:b", HttpUrl.parse("http://[0:0:0:a:0:0:0:b]/").host());, +    assertEquals("::a:b:c:d:e:f:1", HttpUrl.parse("http://[0:a:b:c:d:e:f:1]/").host());, +    assertEquals("a:b:c:d:e:f:1::", HttpUrl.parse("http://[a:b:c:d:e:f:1:0]/").host());, +    assertEquals("ff01::101", HttpUrl.parse("http://[FF01:0:0:0:0:0:0:101]/").host());, +    assertEquals("1::", HttpUrl.parse("http://[1:0:0:0:0:0:0:0]/").host());, +    assertEquals("::1", HttpUrl.parse("http://[0:0:0:0:0:0:0:1]/").host());, +    assertEquals("::", HttpUrl.parse("http://[0:0:0:0:0:0:0:0]/").host());, +  }, +, +  @Test public void hostIpv4CanonicalForm() throws Exception {, +    assertEquals("255.255.255.255", HttpUrl.parse("http://255.255.255.255/").host());, +    assertEquals("1.2.3.4", HttpUrl.parse("http://1.2.3.4/").host());, +    assertEquals("0.0.0.0", HttpUrl.parse("http://0.0.0.0/").host());, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  private Cache cache;, +    client = new OkHttpClient();, +    callback = new RecordingCallback();, +    logHandler = new TestLogHandler();, +, +    cache = new Cache(new File("/cache/"), Integer.MAX_VALUE, fileSystem);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +    assertEquals("::1", HttpUrl.parse("http://[::1]/").host());, +    assertEquals("http://[::1]/", HttpUrl.parse("http://[::1]/").toString());, +    assertEquals("::1", HttpUrl.parse("http://user:password@[::1]:8080/").host());, +    assertEquals("::1", HttpUrl.parse("http://[%3A%3A%31]/").host());, +    assertEquals("::1", HttpUrl.parse("http://%5B%3A%3A1%5D/").host());, +    String a3 = "2001:db8::1:0:0:1";, +    assertEquals("::1", HttpUrl.parse("http://[::0001]").host());, +    assertEquals("::1", HttpUrl.parse("http://[0000::0001]").host());, +    assertEquals("::1", HttpUrl.parse("http://[0000:0000:0000:0000:0000:0000:0000:0001]").host());, +    assertEquals("::1", HttpUrl.parse("http://[0000:0000:0000:0000:0000:0000::0001]").host());, +    assertEquals("1::", HttpUrl.parse("http://[0001:0000::]").host());, +    assertEquals("1::", HttpUrl.parse("http://[0001::0000]").host());, +    assertEquals("1::", HttpUrl.parse("http://[0001::]").host());, +    assertEquals("1::", HttpUrl.parse("http://[1::]").host());, +    assertEquals("::1:ffff:ffff", HttpUrl.parse("http://[::1:255.255.255.255]/").host());, +    assertEquals("::1:0:0", HttpUrl.parse("http://[0:0:0:0:0:1:0.0.0.0]/").host());, +  @Test public void hostIpv6CanonicalForm() throws Exception {, +    assertEquals("abcd:ef01:2345:6789:abcd:ef01:2345:6789",, +        HttpUrl.parse("http://[abcd:ef01:2345:6789:abcd:ef01:2345:6789]/").host());, +    assertEquals("a::b:0:0:0", HttpUrl.parse("http://[a:0:0:0:b:0:0:0]/").host());, +    assertEquals("a:b:0:0:c::", HttpUrl.parse("http://[a:b:0:0:c:0:0:0]/").host());, +    assertEquals("a:b::c:0:0", HttpUrl.parse("http://[a:b:0:0:0:c:0:0]/").host());, +    assertEquals("a::b:0:0:0", HttpUrl.parse("http://[a:0:0:0:b:0:0:0]/").host());, +    assertEquals("::a:b:0:0:0", HttpUrl.parse("http://[0:0:0:a:b:0:0:0]/").host());, +    assertEquals("::a:0:0:0:b", HttpUrl.parse("http://[0:0:0:a:0:0:0:b]/").host());, +    assertEquals("::a:b:c:d:e:f:1", HttpUrl.parse("http://[0:a:b:c:d:e:f:1]/").host());, +    assertEquals("a:b:c:d:e:f:1::", HttpUrl.parse("http://[a:b:c:d:e:f:1:0]/").host());, +    assertEquals("ff01::101", HttpUrl.parse("http://[FF01:0:0:0:0:0:0:101]/").host());, +    assertEquals("1::", HttpUrl.parse("http://[1:0:0:0:0:0:0:0]/").host());, +    assertEquals("::1", HttpUrl.parse("http://[0:0:0:0:0:0:0:1]/").host());, +    assertEquals("::", HttpUrl.parse("http://[0:0:0:0:0:0:0:0]/").host());, +  }, +, +  @Test public void hostIpv4CanonicalForm() throws Exception {, +    assertEquals("255.255.255.255", HttpUrl.parse("http://255.255.255.255/").host());, +    assertEquals("1.2.3.4", HttpUrl.parse("http://1.2.3.4/").host());, +    assertEquals("0.0.0.0", HttpUrl.parse("http://0.0.0.0/").host());, +  }]