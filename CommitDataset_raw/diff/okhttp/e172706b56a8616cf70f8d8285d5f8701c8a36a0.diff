[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    try {, +    } catch (IOException e) {, +      webSocket.failWebSocket(e, null);, +    } finally {, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    try {, +    } catch (IOException e) {, +      webSocket.failWebSocket(e, null);, +    } finally {, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    try {, +    } catch (IOException e) {, +      webSocket.failWebSocket(e, null);, +    } finally {, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +  @After public void tearDown() throws Exception {, +    server.source.close();, +    client.source.close();, +    server.webSocket.tearDown();, +    client.webSocket.tearDown();, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    try {, +    } catch (IOException e) {, +      webSocket.failWebSocket(e, null);, +    } finally {, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +  @After public void tearDown() throws Exception {, +    server.source.close();, +    client.source.close();, +    server.webSocket.tearDown();, +    client.webSocket.tearDown();, +++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java, +  /**, +   * For testing: force this web socket to release its threads., +   */, +  void tearDown() throws InterruptedException {, +    if (cancelFuture != null) {, +      cancelFuture.cancel(false);, +    }, +    executor.shutdown();, +    executor.awaitTermination(10, TimeUnit.SECONDS);, +  }, +, +  public void failWebSocket(Exception e, Response response) {]