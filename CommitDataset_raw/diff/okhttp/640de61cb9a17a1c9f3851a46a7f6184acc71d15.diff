[+++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +  @Test public void chainWithWriteTimeout() throws Exception {, +    Interceptor interceptor1 = new Interceptor() {, +      @Override public Response intercept(Chain chainA) throws IOException {, +        assertEquals(5000, chainA.writeTimeoutMillis());, +, +        Chain chainB = chainA.withWriteTimeout(100, TimeUnit.MILLISECONDS);, +        assertEquals(100, chainB.writeTimeoutMillis());, +, +        return chainB.proceed(chainA.request());, +      }, +    };, +, +    Interceptor interceptor2 = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        assertEquals(100, chain.writeTimeoutMillis());, +        return chain.proceed(chain.request());, +      }, +    };, +, +    client = client.newBuilder(), +        .writeTimeout(5, TimeUnit.SECONDS), +        .addInterceptor(interceptor1), +        .addInterceptor(interceptor2), +        .build();, +, +    server.enqueue(new MockResponse(), +        .setBody("abc"), +        .throttleBody(1, 1, TimeUnit.SECONDS));, +, +    byte[] data = new byte[2 * 1024 * 1024]; // 2 MiB., +    Request request1 = new Request.Builder(), +        .url(server.url("/")), +        .post(RequestBody.create(MediaType.parse("text/plain"), data)), +        .build();, +    Call call = client.newCall(request1);, +, +    try {, +      Response response = call.execute(); // we want this call to throw a SocketTimeoutException, +      fail();, +    } catch (SocketTimeoutException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +  @Test public void chainWithWriteTimeout() throws Exception {, +    Interceptor interceptor1 = new Interceptor() {, +      @Override public Response intercept(Chain chainA) throws IOException {, +        assertEquals(5000, chainA.writeTimeoutMillis());, +, +        Chain chainB = chainA.withWriteTimeout(100, TimeUnit.MILLISECONDS);, +        assertEquals(100, chainB.writeTimeoutMillis());, +, +        return chainB.proceed(chainA.request());, +      }, +    };, +, +    Interceptor interceptor2 = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        assertEquals(100, chain.writeTimeoutMillis());, +        return chain.proceed(chain.request());, +      }, +    };, +, +    client = client.newBuilder(), +        .writeTimeout(5, TimeUnit.SECONDS), +        .addInterceptor(interceptor1), +        .addInterceptor(interceptor2), +        .build();, +, +    server.enqueue(new MockResponse(), +        .setBody("abc"), +        .throttleBody(1, 1, TimeUnit.SECONDS));, +, +    byte[] data = new byte[2 * 1024 * 1024]; // 2 MiB., +    Request request1 = new Request.Builder(), +        .url(server.url("/")), +        .post(RequestBody.create(MediaType.parse("text/plain"), data)), +        .build();, +    Call call = client.newCall(request1);, +, +    try {, +      Response response = call.execute(); // we want this call to throw a SocketTimeoutException, +      fail();, +    } catch (SocketTimeoutException expected) {, +    }, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Interceptor.java, +, +    int writeTimeoutMillis();, +, +    Chain withWriteTimeout(int timeout, TimeUnit unit);, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +  @Test public void chainWithWriteTimeout() throws Exception {, +    Interceptor interceptor1 = new Interceptor() {, +      @Override public Response intercept(Chain chainA) throws IOException {, +        assertEquals(5000, chainA.writeTimeoutMillis());, +, +        Chain chainB = chainA.withWriteTimeout(100, TimeUnit.MILLISECONDS);]