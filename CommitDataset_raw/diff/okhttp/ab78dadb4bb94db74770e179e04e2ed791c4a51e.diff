[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +import okio.OkBuffer;, +    private final OkBuffer out;, +    Writer(OkBuffer out) {, +          out.writeByte(0x40); // Literal Header without Indexing - New Name., +        out.writeByte(bits | value);, +      out.writeByte(bits | prefixMask);, +        out.writeByte(b | 0x80);, +      out.writeByte(value);, +      out.write(data);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +import okio.OkBuffer;, +    private final OkBuffer out;, +    Writer(OkBuffer out) {, +          out.writeByte(0x40); // Literal Header without Indexing - New Name., +        out.writeByte(bits | value);, +      out.writeByte(bits | prefixMask);, +        out.writeByte(b | 0x80);, +      out.writeByte(value);, +      out.write(data);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +import okio.BufferedSink;, +  @Override public FrameWriter newWriter(BufferedSink sink, boolean client) {, +    return new Writer(sink, client);, +    private final BufferedSink sink;, +    private final OkBuffer hpackBuffer;, +    Writer(BufferedSink sink, boolean client) {, +      this.sink = sink;, +      this.hpackBuffer = new OkBuffer();, +      sink.flush();, +      sink.flush();, +      sink.write(CONNECTION_HEADER.toByteArray());, +      sink.flush();, +    @Override public synchronized void synStream(boolean outFinished, boolean inFinished,, +        int streamId, int associatedStreamId, int priority, int slot, List<Header> headerBlock), +    @Override public synchronized void pushPromise(int streamId, int promisedStreamId,, +      if (hpackBuffer.byteCount() != 0) throw new IllegalStateException();, +      int length = (int) (4 + hpackBuffer.byteCount());, +      sink.writeInt(promisedStreamId & 0x7fffffff);, +      sink.write(hpackBuffer, hpackBuffer.byteCount());, +      if (hpackBuffer.byteCount() != 0) throw new IllegalStateException();, +      int length = (int) hpackBuffer.byteCount();, +      if (priority != -1) sink.writeInt(priority & 0x7fffffff);, +      sink.write(hpackBuffer, hpackBuffer.byteCount());, +      sink.writeInt(errorCode.httpCode);, +      sink.flush();, +      sink.write(data, offset, length);, +        sink.writeInt(i & 0xffffff);, +        sink.writeInt(settings.get(i));, +      sink.flush();, +      sink.writeInt(payload1);, +      sink.writeInt(payload2);, +      sink.flush();, +    @Override public synchronized void goAway(int lastGoodStreamId, ErrorCode errorCode,, +        byte[] debugData) throws IOException {, +      sink.writeInt(lastGoodStreamId);, +      sink.writeInt(errorCode.httpCode);, +        sink.write(debugData);, +      sink.flush();, +      sink.writeInt((int) windowSizeIncrement);, +      sink.flush();, +    @Override public synchronized void close() throws IOException {, +      sink.close();, +      sink.writeInt((length & 0x3fff) << 16 | (type & 0xff) << 8 | (flags & 0xff));, +      sink.writeInt(streamId & 0x7fffffff);, +    @Override public long read(OkBuffer sink, long byteCount) throws IOException {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +import okio.OkBuffer;, +    private final OkBuffer out;, +    Writer(OkBuffer out) {, +          out.writeByte(0x40); // Literal Header without Indexing - New Name., +        out.writeByte(bits | value);, +      out.writeByte(bits | prefixMask);, +        out.writeByte(b | 0x80);, +      out.writeByte(value);, +      out.write(data);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +import okio.BufferedSink;, +  @Override public FrameWriter newWriter(BufferedSink sink, boolean client) {, +    return new Writer(sink, client);, +    private final BufferedSink sink;, +    private final OkBuffer hpackBuffer;, +    Writer(BufferedSink sink, boolean client) {, +      this.sink = sink;, +      this.hpackBuffer = new OkBuffer();, +      sink.flush();, +      sink.flush();, +      sink.write(CONNECTION_HEADER.toByteArray());, +      sink.flush();, +    @Override public synchronized void synStream(boolean outFinished, boolean inFinished,, +        int streamId, int associatedStreamId, int priority, int slot, List<Header> headerBlock), +    @Override public synchronized void pushPromise(int streamId, int promisedStreamId,, +      if (hpackBuffer.byteCount() != 0) throw new IllegalStateException();, +      int length = (int) (4 + hpackBuffer.byteCount());, +      sink.writeInt(promisedStreamId & 0x7fffffff);, +      sink.write(hpackBuffer, hpackBuffer.byteCount());, +      if (hpackBuffer.byteCount() != 0) throw new IllegalStateException();, +      int length = (int) hpackBuffer.byteCount();, +      if (priority != -1) sink.writeInt(priority & 0x7fffffff);, +      sink.write(hpackBuffer, hpackBuffer.byteCount());]