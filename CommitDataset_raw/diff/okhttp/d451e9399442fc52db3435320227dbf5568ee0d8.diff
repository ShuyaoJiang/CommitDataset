[+++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +      writer.write(Integer.toString(varyHeaders.length()) + '\n');, +      for (int i = 0; i < varyHeaders.length(); i++) {, +        writer.write(varyHeaders.getFieldName(i) + ": " + varyHeaders.getValue(i) + '\n');, +      writer.write(Integer.toString(responseHeaders.length()) + '\n');, +      for (int i = 0; i < responseHeaders.length(); i++) {, +        writer.write(responseHeaders.getFieldName(i) + ": " + responseHeaders.getValue(i) + '\n');, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +      writer.write(Integer.toString(varyHeaders.length()) + '\n');, +      for (int i = 0; i < varyHeaders.length(); i++) {, +        writer.write(varyHeaders.getFieldName(i) + ": " + varyHeaders.getValue(i) + '\n');, +      writer.write(Integer.toString(responseHeaders.length()) + '\n');, +      for (int i = 0; i < responseHeaders.length(); i++) {, +        writer.write(responseHeaders.getFieldName(i) + ": " + responseHeaders.getValue(i) + '\n');, +++ b/okhttp/src/main/java/com/squareup/okhttp/Job.java, +          requestBuilder.setChunked();, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +      writer.write(Integer.toString(varyHeaders.length()) + '\n');, +      for (int i = 0; i < varyHeaders.length(); i++) {, +        writer.write(varyHeaders.getFieldName(i) + ": " + varyHeaders.getValue(i) + '\n');, +      writer.write(Integer.toString(responseHeaders.length()) + '\n');, +      for (int i = 0; i < responseHeaders.length(); i++) {, +        writer.write(responseHeaders.getFieldName(i) + ": " + responseHeaders.getValue(i) + '\n');, +++ b/okhttp/src/main/java/com/squareup/okhttp/Job.java, +          requestBuilder.setChunked();, +++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java, +    return headers.length();, +    return headers.getFieldName(index);, +    return headers.getValue(index);, +  public boolean isChunked() {, +    return "chunked".equalsIgnoreCase(parsedHeaders().transferEncoding);, +  }, +, +  public boolean hasConnectionClose() {, +    return "close".equalsIgnoreCase(parsedHeaders().connection);, +  }, +, +  public boolean isNoCache() {, +  public boolean isOnlyIfCached() {, +  public boolean hasAuthorization() {, +    return parsedHeaders().hasAuthorization;, +  }, +, +  public String getTransferEncoding() {, +    return parsedHeaders().transferEncoding;, +  }, +, +  public String getHost() {, +    return parsedHeaders().host;, +  }, +, +  public String getConnection() {, +    return parsedHeaders().connection;, +  }, +, +  public String getAcceptEncoding() {, +    return parsedHeaders().acceptEncoding;, +  }, +, +  public String getIfModifiedSince() {, +    return parsedHeaders().ifModifiedSince;, +  }, +, +  public String getIfNoneMatch() {, +    return parsedHeaders().ifNoneMatch;, +  }, +, +  /**, +   * Returns true if the request contains conditions that save the server from, +   * sending a response that the client has locally. When a request is enqueued, +   * with conditions, built-in response caches won't be used for that request., +   */, +  public boolean hasConditions() {, +    return parsedHeaders().ifModifiedSince != null || parsedHeaders().ifNoneMatch != null;, +  }, +, +    /**, +     * True if the request contains an authorization field. Although this isn't, +     * necessarily a shared cache, it follows the spec's strict requirements for, +     * shared caches., +     */, +    private boolean hasAuthorization;, +, +    private String transferEncoding;, +    private String host;, +    private String connection;, +    private String acceptEncoding;, +    private String ifModifiedSince;, +    private String ifNoneMatch;, +      for (int i = 0; i < headers.length(); i++) {, +        String fieldName = headers.getFieldName(i);, +        String value = headers.getValue(i);, +        } else if ("If-None-Match".equalsIgnoreCase(fieldName)) {, +          ifNoneMatch = value;, +        } else if ("If-Modified-Since".equalsIgnoreCase(fieldName)) {, +          ifModifiedSince = value;, +        } else if ("Authorization".equalsIgnoreCase(fieldName)) {, +          hasAuthorization = true;, +        } else if ("Transfer-Encoding".equalsIgnoreCase(fieldName)) {, +          transferEncoding = value;]