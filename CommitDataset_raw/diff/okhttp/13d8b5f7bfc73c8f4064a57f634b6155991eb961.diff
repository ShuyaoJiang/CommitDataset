[+++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +import java.io.BufferedOutputStream;, +    // Use MTU-sized buffers to send fewer packets., +    int mtu = Platform.get().getMtu(socket);, +    in = new BufferedInputStream(in, mtu);, +    out = new BufferedOutputStream(out, mtu);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +import java.io.BufferedOutputStream;, +    // Use MTU-sized buffers to send fewer packets., +    int mtu = Platform.get().getMtu(socket);, +    in = new BufferedInputStream(in, mtu);, +    out = new BufferedOutputStream(out, mtu);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java, +import java.io.IOException;, +import java.net.NetworkInterface;, +  /**, +   * Returns the maximum transmission unit of the network interface used by, +   * {@code socket}, or a reasonable default if this platform doesn't expose the, +   * MTU to the application layer., +   *, +   * <p>The returned value should only be used as an optimization; such as to, +   * size buffers efficiently., +   */, +  public int getMtu(Socket socket) throws IOException {, +    return 1400; // Smaller than 1500 to leave room for headers on interfaces like PPPoE., +  }, +, +    Method getMtu;, +    try {, +      getMtu = NetworkInterface.class.getMethod("getMTU");, +    } catch (NoSuchMethodException e) {, +      return new Platform(); // No Java 1.6 APIs. It's either Java 1.5, Android 2.2 or earlier., +    }, +, +        return new Android41(getMtu, openSslSocketClass, setUseSessionTickets, setHostname,, +            setNpnProtocols, getNpnSelectedProtocol);, +        return new Android23(getMtu, openSslSocketClass, setUseSessionTickets, setHostname);, +      return new JdkWithJettyNpnPlatform(getMtu, putMethod, getMethod, clientProviderClass,, +      // NPN isn't on the classpath., +      // The NPN version isn't what we expect., +    }, +, +    return getMtu != null ? new Java5(getMtu) : new Platform();, +  }, +, +  private static class Java5 extends Platform {, +    private final Method getMtu;, +, +    private Java5(Method getMtu) {, +      this.getMtu = getMtu;, +    }, +, +    @Override public int getMtu(Socket socket) throws IOException {, +      try {, +        NetworkInterface networkInterface = NetworkInterface.getByInetAddress(, +            socket.getLocalAddress());, +        return (Integer) getMtu.invoke(networkInterface);, +      } catch (IllegalAccessException e) {, +        throw new AssertionError(e);, +      } catch (InvocationTargetException e) {, +        if (e.getCause() instanceof IOException) throw (IOException) e.getCause();, +        throw new RuntimeException(e.getCause());, +      }, +  private static class Android23 extends Java5 {, +    private Android23(Method getMtu, Class<?> openSslSocketClass, Method setUseSessionTickets,, +      super(getMtu);, +    private Android41(Method getMtu, Class<?> openSslSocketClass, Method setUseSessionTickets,, +        Method setHostname, Method setNpnProtocols, Method getNpnSelectedProtocol) {, +      super(getMtu, openSslSocketClass, setUseSessionTickets, setHostname);, +  private static class JdkWithJettyNpnPlatform extends Java5 {, +    public JdkWithJettyNpnPlatform(Method getMtu, Method putMethod, Method getMethod,, +        Class<?> clientProviderClass, Class<?> serverProviderClass) {, +      super(getMtu);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +import java.io.BufferedOutputStream;, +    // Use MTU-sized buffers to send fewer packets., +    int mtu = Platform.get().getMtu(socket);, +    in = new BufferedInputStream(in, mtu);, +    out = new BufferedOutputStream(out, mtu);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java, +import java.io.IOException;, +import java.net.NetworkInterface;, +  /**, +   * Returns the maximum transmission unit of the network interface used by, +   * {@code socket}, or a reasonable default if this platform doesn't expose the, +   * MTU to the application layer., +   *, +   * <p>The returned value should only be used as an optimization; such as to, +   * size buffers efficiently., +   */, +  public int getMtu(Socket socket) throws IOException {, +    return 1400; // Smaller than 1500 to leave room for headers on interfaces like PPPoE., +  }, +, +    Method getMtu;, +    try {, +      getMtu = NetworkInterface.class.getMethod("getMTU");, +    } catch (NoSuchMethodException e) {, +      return new Platform(); // No Java 1.6 APIs. It's either Java 1.5, Android 2.2 or earlier., +    }]