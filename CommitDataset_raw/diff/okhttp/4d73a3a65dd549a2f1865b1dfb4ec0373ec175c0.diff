[+++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +  @Ignore // TODO: recover gracefully when a connection is shutdown., +  @Test public void streamedBodyIsRetriedOnHttp2Shutdown() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setBody("abc"));, +    server.enqueue(new MockResponse(), +        .setBody("def"));, +, +    HttpURLConnection connection1 = urlFactory.open(server.url("/").url());, +    connection1.setChunkedStreamingMode(4096);, +    connection1.setRequestMethod("POST");, +    connection1.connect(); // Establish healthy HTTP/2 connection, but don't write yet., +, +    // Send a separate request which will trigger a GOAWAY frame on the healthy connection., +    HttpURLConnection connection2 = urlFactory.open(server.url("/").url());, +    assertContent("abc", connection2);, +, +    OutputStream os = connection1.getOutputStream();, +    os.write(new byte[] { '1', '2', '3' });, +    os.close();, +    assertContent("def", connection1);, +, +    RecordedRequest request1 = server.takeRequest();, +    assertEquals(0, request1.getSequenceNumber());, +, +    RecordedRequest request2 = server.takeRequest();, +    assertEquals("123", request2.getBody().readUtf8());, +    assertEquals(0, request2.getSequenceNumber());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +  @Ignore // TODO: recover gracefully when a connection is shutdown., +  @Test public void streamedBodyIsRetriedOnHttp2Shutdown() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setBody("abc"));, +    server.enqueue(new MockResponse(), +        .setBody("def"));, +, +    HttpURLConnection connection1 = urlFactory.open(server.url("/").url());, +    connection1.setChunkedStreamingMode(4096);, +    connection1.setRequestMethod("POST");, +    connection1.connect(); // Establish healthy HTTP/2 connection, but don't write yet., +, +    // Send a separate request which will trigger a GOAWAY frame on the healthy connection., +    HttpURLConnection connection2 = urlFactory.open(server.url("/").url());, +    assertContent("abc", connection2);, +, +    OutputStream os = connection1.getOutputStream();, +    os.write(new byte[] { '1', '2', '3' });, +    os.close();, +    assertContent("def", connection1);, +, +    RecordedRequest request1 = server.takeRequest();, +    assertEquals(0, request1.getSequenceNumber());, +, +    RecordedRequest request2 = server.takeRequest();, +    assertEquals("123", request2.getBody().readUtf8());, +    assertEquals(0, request2.getSequenceNumber());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import okhttp3.Interceptor;, +  @Ignore // TODO: recover gracefully when a connection is shutdown., +  @Test public void connectionNotReusedAfterShutdown() throws Exception {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setBody("ABC"));, +    server.enqueue(new MockResponse(), +        .setBody("DEF"));, +, +    Call call1 = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response1 = call1.execute();, +    assertEquals("ABC", response1.body().string());, +, +    Call call2 = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response2 = call2.execute();, +    assertEquals("DEF", response2.body().string());, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +  }, +, +  /**, +   * This simulates a race condition where we receive a healthy HTTP/2 connection and just prior to, +   * writing our request, we get a GOAWAY frame from the server., +   */, +  @Test public void connectionShutdownAfterHealthCheck() throws Exception {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setBody("ABC"));, +    server.enqueue(new MockResponse(), +        .setBody("DEF"));, +]