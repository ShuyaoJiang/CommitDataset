[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +  static Settings defaultSettings(boolean client) {, +  @Override public FrameReader newReader(InputStream in, boolean client) {, +    return new Reader(in, 4096, client);, +  @Override public FrameWriter newWriter(OutputStream out, boolean client) {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +  static Settings defaultSettings(boolean client) {, +  @Override public FrameReader newReader(InputStream in, boolean client) {, +    return new Reader(in, 4096, client);, +  @Override public FrameWriter newWriter(OutputStream out, boolean client) {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Spdy3.java, +  static Settings defaultSettings(boolean client) {, +  @Override public FrameReader newReader(InputStream in, boolean client) {, +  @Override public FrameWriter newWriter(OutputStream out, boolean client) {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +  static Settings defaultSettings(boolean client) {, +  @Override public FrameReader newReader(InputStream in, boolean client) {, +    return new Reader(in, 4096, client);, +  @Override public FrameWriter newWriter(OutputStream out, boolean client) {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Spdy3.java, +  static Settings defaultSettings(boolean client) {, +  @Override public FrameReader newReader(InputStream in, boolean client) {, +  @Override public FrameWriter newWriter(OutputStream out, boolean client) {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +  final Protocol protocol;, +    protocol = builder.protocol;, +    Variant variant;, +    if (protocol == Protocol.HTTP_2) {, +      okHttpSettings = Http20Draft09.defaultSettings(client);, +      variant = new Http20Draft09(); // connection-specific settings here!, +    } else if (protocol == Protocol.SPDY_3) {, +      okHttpSettings = Spdy3.defaultSettings(client);, +      variant = new Spdy3(); // connection-specific settings here!, +    } else {, +      throw new AssertionError(protocol);, +    }, +, +    // TODO: implement stream limit, +    // okHttpSettings.set(Settings.MAX_CONCURRENT_STREAMS, 0, max);, +    peerSettings = okHttpSettings;, +    bufferPool = new ByteArrayPool(peerSettings.getInitialWindowSize() * 8);, +    frameReader = variant.newReader(builder.in, client);, +    frameWriter = variant.newWriter(builder.out, client);, +, +     return protocol;, +    private Protocol protocol = Protocol.SPDY_3;, +      this.protocol = protocol;, +        if (getProtocol() == Protocol.HTTP_2) {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +  static Settings defaultSettings(boolean client) {, +  @Override public FrameReader newReader(InputStream in, boolean client) {, +    return new Reader(in, 4096, client);, +  @Override public FrameWriter newWriter(OutputStream out, boolean client) {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Spdy3.java, +  static Settings defaultSettings(boolean client) {, +  @Override public FrameReader newReader(InputStream in, boolean client) {, +  @Override public FrameWriter newWriter(OutputStream out, boolean client) {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +  final Protocol protocol;, +    protocol = builder.protocol;, +    Variant variant;, +    if (protocol == Protocol.HTTP_2) {, +      okHttpSettings = Http20Draft09.defaultSettings(client);, +      variant = new Http20Draft09(); // connection-specific settings here!, +    } else if (protocol == Protocol.SPDY_3) {, +      okHttpSettings = Spdy3.defaultSettings(client);, +      variant = new Spdy3(); // connection-specific settings here!, +    } else {, +      throw new AssertionError(protocol);, +    }, +, +    // TODO: implement stream limit, +    // okHttpSettings.set(Settings.MAX_CONCURRENT_STREAMS, 0, max);, +    peerSettings = okHttpSettings;, +    bufferPool = new ByteArrayPool(peerSettings.getInitialWindowSize() * 8);, +    frameReader = variant.newReader(builder.in, client);, +    frameWriter = variant.newWriter(builder.out, client);, +, +     return protocol;, +    private Protocol protocol = Protocol.SPDY_3;, +      this.protocol = protocol;, +        if (getProtocol() == Protocol.HTTP_2) {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Variant.java, +  FrameReader newReader(InputStream in, boolean client);, +  FrameWriter newWriter(OutputStream out, boolean client);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +  static Settings defaultSettings(boolean client) {, +  @Override public FrameReader newReader(InputStream in, boolean client) {, +    return new Reader(in, 4096, client);, +  @Override public FrameWriter newWriter(OutputStream out, boolean client) {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Spdy3.java, +  static Settings defaultSettings(boolean client) {, +  @Override public FrameReader newReader(InputStream in, boolean client) {, +  @Override public FrameWriter newWriter(OutputStream out, boolean client) {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +  final Protocol protocol;, +    protocol = builder.protocol;, +    Variant variant;, +    if (protocol == Protocol.HTTP_2) {, +      okHttpSettings = Http20Draft09.defaultSettings(client);]