[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +    // Static entries can be shared safely, as long as {@code referenced} is not mutated., +    final boolean isStatic;, +    // Only read when in headerTable., +    // Mutable to avoid needing another BitSet for referenced header indexes.  Using a BitSet for, +    // reference entries sounds good, except that entries are added at index zero.  This implies, +    // shifting the BitSet, which would be expensive to implement., +    HeaderEntry(ByteString name, ByteString value, boolean isStatic) {, +      this(name, value, 32 + name.size() + value.size(), isStatic);, +    private HeaderEntry(ByteString name, ByteString value, int size, boolean isStatic) {, +      this.isStatic = isStatic;, +    /** Copies this header entry and designates it as not a static entry. */, +      return new HeaderEntry(name, value, size, false);, +      staticEntry(":authority", ""),, +      staticEntry(":method", "GET"),, +      staticEntry(":method", "POST"),, +      staticEntry(":path", "/"),, +      staticEntry(":path", "/index.html"),, +      staticEntry(":scheme", "http"),, +      staticEntry(":scheme", "https"),, +      staticEntry(":status", "200"),, +      staticEntry(":status", "500"),, +      staticEntry(":status", "404"),, +      staticEntry(":status", "403"),, +      staticEntry(":status", "400"),, +      staticEntry(":status", "401"),, +      staticEntry("accept-charset", ""),, +      staticEntry("accept-encoding", ""),, +      staticEntry("accept-language", ""),, +      staticEntry("accept-ranges", ""),, +      staticEntry("accept", ""),, +      staticEntry("access-control-allow-origin", ""),, +      staticEntry("age", ""),, +      staticEntry("allow", ""),, +      staticEntry("authorization", ""),, +      staticEntry("cache-control", ""),, +      staticEntry("content-disposition", ""),, +      staticEntry("content-encoding", ""),, +      staticEntry("content-language", ""),, +      staticEntry("content-length", ""),, +      staticEntry("content-location", ""),, +      staticEntry("content-range", ""),, +      staticEntry("content-type", ""),, +      staticEntry("cookie", ""),, +      staticEntry("date", ""),, +      staticEntry("etag", ""),, +      staticEntry("expect", ""),, +      staticEntry("expires", ""),, +      staticEntry("from", ""),, +      staticEntry("host", ""),, +      staticEntry("if-match", ""),, +      staticEntry("if-modified-since", ""),, +      staticEntry("if-none-match", ""),, +      staticEntry("if-range", ""),, +      staticEntry("if-unmodified-since", ""),, +      staticEntry("last-modified", ""),, +      staticEntry("link", ""),, +      staticEntry("location", ""),, +      staticEntry("max-forwards", ""),, +      staticEntry("proxy-authenticate", ""),, +      staticEntry("proxy-authorization", ""),, +      staticEntry("range", ""),, +      staticEntry("referer", ""),, +      staticEntry("refresh", ""),, +      staticEntry("retry-after", ""),, +      staticEntry("server", ""),, +      staticEntry("set-cookie", ""),, +      staticEntry("strict-transport-security", ""),, +      staticEntry("transfer-encoding", ""),, +      staticEntry("user-agent", ""),, +      staticEntry("vary", ""),, +      staticEntry("via", ""),, +      staticEntry("www-authenticate", ""), +        HeaderEntry entry = headerTable.get(i);, +        if (entry.isStatic) { // lazy clone static entries on mutation., +          entry = entry.clone();, +          entry.referenced = false;, +          headerTable.set(i, entry);, +        } else {, +          entry.referenced = false;, +        }, +          insertIntoHeaderTable(-1, staticEntry);, +      insertIntoHeaderTable(-1, new HeaderEntry(name, value, false));, +      insertIntoHeaderTable(-1, new HeaderEntry(name, value, false));, +, +  private static HeaderEntry staticEntry(String name, String value) {, +    return new HeaderEntry(ByteString.encodeUtf8(name), ByteString.encodeUtf8(value), true);, +  }]