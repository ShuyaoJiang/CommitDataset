[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +    X509Certificate certificate = selfSignedCertificate(keyPair, "1");, +  public KeyPair generateKeyPair() throws GeneralSecurityException {, +  public X509Certificate selfSignedCertificate(KeyPair keyPair, String serialNumber), +      throws GeneralSecurityException {, +    generator.setSerialNumber(new BigInteger(serialNumber));, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +    X509Certificate certificate = selfSignedCertificate(keyPair, "1");, +  public KeyPair generateKeyPair() throws GeneralSecurityException {, +  public X509Certificate selfSignedCertificate(KeyPair keyPair, String serialNumber), +      throws GeneralSecurityException {, +    generator.setSerialNumber(new BigInteger(serialNumber));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import java.security.cert.Certificate;, +import javax.net.ssl.SSLPeerUnverifiedException;, +import static org.junit.Assert.assertNotSame;, +  @Test public void matchingPinnedCertificate() throws Exception {, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.enqueue(new MockResponse());, +    server.enqueue(new MockResponse());, +    server.play();, +, +    client.setSslSocketFactory(sslContext.getSocketFactory());, +    client.setHostnameVerifier(new RecordingHostnameVerifier());, +, +    // Make a first request without certificate pinning. Use it to collect certificates to pin., +    Request request1 = new Request.Builder().url(server.getUrl("/")).build();, +    Response response1 = client.newCall(request1).execute();, +    CertificatePinner.Builder certificatePinnerBuilder = new CertificatePinner.Builder();, +    for (Certificate certificate : response1.handshake().peerCertificates()) {, +      certificatePinnerBuilder.add(server.getHostName(), CertificatePinner.pin(certificate));, +    }, +, +    // Make another request with certificate pinning. It should complete normally., +    client.setCertificatePinner(certificatePinnerBuilder.build());, +    Request request2 = new Request.Builder().url(server.getUrl("/")).build();, +    Response response2 = client.newCall(request2).execute();, +    assertNotSame(response2.handshake(), response1.handshake());, +  }, +, +  @Test public void unmatchingPinnedCertificate() throws Exception {, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.enqueue(new MockResponse());, +    server.play();, +, +    client.setSslSocketFactory(sslContext.getSocketFactory());, +    client.setHostnameVerifier(new RecordingHostnameVerifier());, +    client.setCertificatePinner( new CertificatePinner.Builder(), +        .add(server.getHostName(), "sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=") // publicobject.com's cert., +        .build());, +, +    // When we pin the wrong certificate, connectivity fails., +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    try {, +      client.newCall(request).execute();, +      fail();, +    } catch (SSLPeerUnverifiedException expected) {, +      assertTrue(expected.getMessage().startsWith("Certificate pinning failure!"));, +    }, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +    X509Certificate certificate = selfSignedCertificate(keyPair, "1");, +  public KeyPair generateKeyPair() throws GeneralSecurityException {, +  public X509Certificate selfSignedCertificate(KeyPair keyPair, String serialNumber), +      throws GeneralSecurityException {, +    generator.setSerialNumber(new BigInteger(serialNumber));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import java.security.cert.Certificate;, +import javax.net.ssl.SSLPeerUnverifiedException;, +import static org.junit.Assert.assertNotSame;, +  @Test public void matchingPinnedCertificate() throws Exception {, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.enqueue(new MockResponse());, +    server.enqueue(new MockResponse());, +    server.play();, +, +    client.setSslSocketFactory(sslContext.getSocketFactory());, +    client.setHostnameVerifier(new RecordingHostnameVerifier());, +, +    // Make a first request without certificate pinning. Use it to collect certificates to pin., +    Request request1 = new Request.Builder().url(server.getUrl("/")).build();, +    Response response1 = client.newCall(request1).execute();, +    CertificatePinner.Builder certificatePinnerBuilder = new CertificatePinner.Builder();, +    for (Certificate certificate : response1.handshake().peerCertificates()) {, +      certificatePinnerBuilder.add(server.getHostName(), CertificatePinner.pin(certificate));, +    }, +, +    // Make another request with certificate pinning. It should complete normally., +    client.setCertificatePinner(certificatePinnerBuilder.build());, +    Request request2 = new Request.Builder().url(server.getUrl("/")).build();, +    Response response2 = client.newCall(request2).execute();, +    assertNotSame(response2.handshake(), response1.handshake());, +  }, +, +  @Test public void unmatchingPinnedCertificate() throws Exception {, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.enqueue(new MockResponse());, +    server.play();, +]