[+++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import java.net.HttpCookie;, +import java.util.ArrayList;, +import java.util.Arrays;, +  public void assertCookies(HttpUrl url, String... expectedCookies) throws Exception {, +    List<String> actualCookies = new ArrayList<>();, +    for (HttpCookie cookie : cookieManager.getCookieStore().get(url.uri())) {, +      actualCookies.add(cookie.toString());, +    }, +    assertEquals(Arrays.asList(expectedCookies), actualCookies);, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import java.net.HttpCookie;, +import java.util.ArrayList;, +import java.util.Arrays;, +  public void assertCookies(HttpUrl url, String... expectedCookies) throws Exception {, +    List<String> actualCookies = new ArrayList<>();, +    for (HttpCookie cookie : cookieManager.getCookieStore().get(url.uri())) {, +      actualCookies.add(cookie.toString());, +    }, +    assertEquals(Arrays.asList(expectedCookies), actualCookies);, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    executeSynchronously("/").assertFailure(IOException.class);, +  @Test public void requestHeaderNameWithSpaceForbidden() throws Exception {, +    try {, +      new Request.Builder().addHeader("a b", "c");, +      fail();, +    } catch (IllegalArgumentException expected) {, +      assertEquals("Unexpected char 0x20 at 1 in header name: a b", expected.getMessage());, +    }, +  }, +, +  @Test public void requestHeaderNameWithTabForbidden() throws Exception {, +    try {, +      new Request.Builder().addHeader("a\tb", "c");, +      fail();, +    } catch (IllegalArgumentException expected) {, +      assertEquals("Unexpected char 0x09 at 1 in header name: a\tb", expected.getMessage());, +    }, +  }, +, +  @Test public void responseHeaderNameWithSpacePermitted() throws Exception {, +    server.enqueue(new MockResponse(), +        .clearHeaders(), +        .addHeader("content-length: 0"), +        .addHeaderLenient("a b", "c"));, +, +    Call call = client.newCall(new Request.Builder().url(server.url("/")).build());, +    Response response = call.execute();, +    assertEquals("c", response.header("a b"));, +  }, +, +  @Test public void responseHeaderNameWithTabPermitted() throws Exception {, +    server.enqueue(new MockResponse(), +        .clearHeaders(), +        .addHeader("content-length: 0"), +        .addHeaderLenient("a\tb", "c"));, +, +    Call call = client.newCall(new Request.Builder().url(server.url("/")).build());, +    Response response = call.execute();, +    assertEquals("c", response.header("a\tb"));, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +import java.net.HttpCookie;, +import java.util.ArrayList;, +import java.util.Arrays;, +  public void assertCookies(HttpUrl url, String... expectedCookies) throws Exception {, +    List<String> actualCookies = new ArrayList<>();, +    for (HttpCookie cookie : cookieManager.getCookieStore().get(url.uri())) {, +      actualCookies.add(cookie.toString());, +    }, +    assertEquals(Arrays.asList(expectedCookies), actualCookies);, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    executeSynchronously("/").assertFailure(IOException.class);, +  @Test public void requestHeaderNameWithSpaceForbidden() throws Exception {, +    try {, +      new Request.Builder().addHeader("a b", "c");, +      fail();, +    } catch (IllegalArgumentException expected) {, +      assertEquals("Unexpected char 0x20 at 1 in header name: a b", expected.getMessage());, +    }, +  }, +, +  @Test public void requestHeaderNameWithTabForbidden() throws Exception {, +    try {, +      new Request.Builder().addHeader("a\tb", "c");, +      fail();, +    } catch (IllegalArgumentException expected) {, +      assertEquals("Unexpected char 0x09 at 1 in header name: a\tb", expected.getMessage());, +    }]