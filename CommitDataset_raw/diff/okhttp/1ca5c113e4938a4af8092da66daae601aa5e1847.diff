[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void failedAuthenticatorReleasesConnection() throws IOException {, +    server.enqueue(new MockResponse(), +        .setResponseCode(401));, +, +    client.connectionPool().evictAll();, +    client = client.newBuilder(), +        .authenticator(new Authenticator() {, +          @Override public Request authenticate(Route route, Response response) throws IOException {, +            throw new IOException("IOException!");, +          }, +        }), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    executeSynchronously(request), +        .assertFailure(IOException.class);, +, +    assertEquals(1, client.connectionPool().idleConnectionCount());, +  }, +, +  @Test public void failedProxyAuthenticatorReleasesConnection() throws IOException {, +    server.enqueue(new MockResponse(), +        .setResponseCode(407));, +, +    client.connectionPool().evictAll();, +    client = client.newBuilder(), +        .proxyAuthenticator(new Authenticator() {, +          @Override public Request authenticate(Route route, Response response) throws IOException {, +            throw new IOException("IOException!");, +          }, +        }), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    executeSynchronously(request), +        .assertFailure(IOException.class);, +, +    assertEquals(1, client.connectionPool().idleConnectionCount());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void failedAuthenticatorReleasesConnection() throws IOException {, +    server.enqueue(new MockResponse(), +        .setResponseCode(401));, +, +    client.connectionPool().evictAll();, +    client = client.newBuilder(), +        .authenticator(new Authenticator() {, +          @Override public Request authenticate(Route route, Response response) throws IOException {, +            throw new IOException("IOException!");, +          }, +        }), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    executeSynchronously(request), +        .assertFailure(IOException.class);, +, +    assertEquals(1, client.connectionPool().idleConnectionCount());, +  }, +, +  @Test public void failedProxyAuthenticatorReleasesConnection() throws IOException {, +    server.enqueue(new MockResponse(), +        .setResponseCode(407));, +, +    client.connectionPool().evictAll();, +    client = client.newBuilder(), +        .proxyAuthenticator(new Authenticator() {, +          @Override public Request authenticate(Route route, Response response) throws IOException {, +            throw new IOException("IOException!");, +          }, +        }), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    executeSynchronously(request), +        .assertFailure(IOException.class);, +, +    assertEquals(1, client.connectionPool().idleConnectionCount());, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java, +      Request followUp;, +      try {, +        followUp = followUpRequest(response, streamAllocation.route());, +      } catch (IOException e) {, +        streamAllocation.release();]