[+++ b/okhttp-sse/pom.xml, +++ b/okhttp-sse/pom.xml, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +++ b/okhttp-sse/pom.xml, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +  private final EventSource.Factory factory = EventSources.createFactory(new OkHttpClient());, +++ b/okhttp-sse/pom.xml, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +  private final EventSource.Factory factory = EventSources.createFactory(new OkHttpClient());, +++ /dev/null, +++ b/okhttp-sse/pom.xml, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +  private final EventSource.Factory factory = EventSources.createFactory(new OkHttpClient());, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.internal.SingleInetAddressDns;, +        .dns(new SingleInetAddressDns()), +        .dns(new SingleInetAddressDns()), +        .dns(new SingleInetAddressDns()), +++ b/okhttp-sse/pom.xml, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +  private final EventSource.Factory factory = EventSources.createFactory(new OkHttpClient());, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.internal.SingleInetAddressDns;, +        .dns(new SingleInetAddressDns()), +        .dns(new SingleInetAddressDns()), +        .dns(new SingleInetAddressDns()), +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.internal.SingleInetAddressDns;, +  private final SingleInetAddressDns singleDns = new SingleInetAddressDns();, +        .dns(singleDns), +    dns.set("fakeurl", singleDns.lookup(server.getHostName()));, +    dns.set("www.fakeurl", singleDns.lookup(server.getHostName()));, +    InetAddress address = singleDns.lookup(server.getHostName()).get(0);, +    InetAddress address = singleDns.lookup(server.getHostName()).get(0);, +    InetAddress address = singleDns.lookup(server.getHostName()).get(0);, +++ b/okhttp-sse/pom.xml, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java, +++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java, +  private final EventSource.Factory factory = EventSources.createFactory(new OkHttpClient());, +++ /dev/null, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okhttp3.internal.SingleInetAddressDns;, +        .dns(new SingleInetAddressDns()), +        .dns(new SingleInetAddressDns()), +        .dns(new SingleInetAddressDns()), +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.internal.SingleInetAddressDns;, +  private final SingleInetAddressDns singleDns = new SingleInetAddressDns();, +        .dns(singleDns), +    dns.set("fakeurl", singleDns.lookup(server.getHostName()));, +    dns.set("www.fakeurl", singleDns.lookup(server.getHostName()));, +    InetAddress address = singleDns.lookup(server.getHostName()).get(0);, +    InetAddress address = singleDns.lookup(server.getHostName()).get(0);, +    InetAddress address = singleDns.lookup(server.getHostName()).get(0);, +++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java, +package okhttp3;, +, +import java.net.InetSocketAddress;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +import okhttp3.internal.SingleInetAddressDns;, +import okhttp3.internal.http2.Header;, +, +public final class TestUtil {, +  public static final InetSocketAddress UNREACHABLE_ADDRESS, +      = new InetSocketAddress("198.51.100.1", 8080);, +, +  private TestUtil() {, +  }, +, +  private static final ConnectionPool connectionPool = new ConnectionPool();, +  private static final Dispatcher dispatcher = new Dispatcher();, +, +  /**, +   * Returns an OkHttpClient for all tests to use as a starting point., +   *, +   * <p>The shared instance allows all tests to share a single connection pool, which prevents idle, +   * connections from consuming unnecessary resources while connections wait to be evicted., +   *, +   * <p>This client is also configured to be slightly more deterministic, returning a single IP, +   * address for all hosts, regardless of the actual number of IP addresses reported by DNS., +   */, +  public static OkHttpClient defaultClient() {, +    return new OkHttpClient.Builder(), +        .connectionPool(connectionPool), +        .dispatcher(dispatcher), +        .dns(new SingleInetAddressDns()) // Prevent unexpected fallback addresses., +        .build();, +  }, +, +  public static List<Header> headerEntries(String... elements) {, +    List<Header> result = new ArrayList<>(elements.length / 2);, +    for (int i = 0; i < elements.length; i += 2) {]