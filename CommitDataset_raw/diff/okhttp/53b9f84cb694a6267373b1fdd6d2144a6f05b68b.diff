[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, Throwable throwable) {, +        System.out.println("Failed: " + throwable);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, Throwable throwable) {, +        System.out.println("Failed: " + throwable);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import static org.junit.Assert.assertFalse;, +      @Override public void onFailure(Request request, Throwable throwable) {, +    final AtomicBoolean failureRef = new AtomicBoolean();, +      @Override public void onFailure(Request request, Throwable throwable) {, +        failureRef.set(true);, +    assertFalse(failureRef.get());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, Throwable throwable) {, +        System.out.println("Failed: " + throwable);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import static org.junit.Assert.assertFalse;, +      @Override public void onFailure(Request request, Throwable throwable) {, +    final AtomicBoolean failureRef = new AtomicBoolean();, +      @Override public void onFailure(Request request, Throwable throwable) {, +        failureRef.set(true);, +    assertFalse(failureRef.get());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +  public final Throwable failure;, +  RecordedResponse(Request request, Response response, String body, Throwable failure) {, +    assertEquals(message, failure.getMessage());, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, Throwable throwable) {, +        System.out.println("Failed: " + throwable);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import static org.junit.Assert.assertFalse;, +      @Override public void onFailure(Request request, Throwable throwable) {, +    final AtomicBoolean failureRef = new AtomicBoolean();, +      @Override public void onFailure(Request request, Throwable throwable) {, +        failureRef.set(true);, +    assertFalse(failureRef.get());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +  public final Throwable failure;, +  RecordedResponse(Request request, Response response, String body, Throwable failure) {, +    assertEquals(message, failure.getMessage());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java, +  @Override public synchronized void onFailure(Request request, Throwable throwable) {, +    responses.add(new RecordedResponse(request, null, null, throwable));, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, Throwable throwable) {, +        System.out.println("Failed: " + throwable);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import static org.junit.Assert.assertFalse;, +      @Override public void onFailure(Request request, Throwable throwable) {, +    final AtomicBoolean failureRef = new AtomicBoolean();, +      @Override public void onFailure(Request request, Throwable throwable) {, +        failureRef.set(true);, +    assertFalse(failureRef.get());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +  public final Throwable failure;, +  RecordedResponse(Request request, Response response, String body, Throwable failure) {, +    assertEquals(message, failure.getMessage());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java, +  @Override public synchronized void onFailure(Request request, Throwable throwable) {, +    responses.add(new RecordedResponse(request, null, null, throwable));, +++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java, +          responseCallback.onFailure(request, new IOException("Canceled"));, +        responseCallback.onFailure(request, e);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, Throwable throwable) {, +        System.out.println("Failed: " + throwable);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import static org.junit.Assert.assertFalse;, +      @Override public void onFailure(Request request, Throwable throwable) {, +    final AtomicBoolean failureRef = new AtomicBoolean();, +      @Override public void onFailure(Request request, Throwable throwable) {, +        failureRef.set(true);, +    assertFalse(failureRef.get());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java, +  public final Throwable failure;, +  RecordedResponse(Request request, Response response, String body, Throwable failure) {, +    assertEquals(message, failure.getMessage());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java, +  @Override public synchronized void onFailure(Request request, Throwable throwable) {, +    responses.add(new RecordedResponse(request, null, null, throwable));, +++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java, +          responseCallback.onFailure(request, new IOException("Canceled"));, +        responseCallback.onFailure(request, e);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Callback.java, +  void onFailure(Request request, Throwable throwable);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, Throwable throwable) {, +        System.out.println("Failed: " + throwable);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import static org.junit.Assert.assertFalse;, +      @Override public void onFailure(Request request, Throwable throwable) {, +    final AtomicBoolean failureRef = new AtomicBoolean();, +      @Override public void onFailure(Request request, Throwable throwable) {]