[+++ b/okhttp/build.gradle, +++ b/okhttp/build.gradle, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +/*, + * Copyright (C) 2012 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.net.Proxy;, +import java.net.ProxySelector;, +import java.net.Socket;, +import java.security.GeneralSecurityException;, +import java.time.Duration;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import java.util.Random;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.TimeUnit;, +import javax.annotation.Nullable;, +import javax.net.SocketFactory;, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLSocketFactory;, +import javax.net.ssl.TrustManager;, +import javax.net.ssl.X509TrustManager;, +import okhttp3.internal.Internal;, +import okhttp3.internal.InternalKtKt;, +import okhttp3.internal.Util;, +import okhttp3.internal.cache.InternalCache;, +import okhttp3.internal.connection.Exchange;, +import okhttp3.internal.connection.RealConnectionPool;, +import okhttp3.internal.platform.Platform;, +import okhttp3.internal.proxy.NullProxySelector;, +import okhttp3.internal.tls.CertificateChainCleaner;, +import okhttp3.internal.tls.OkHostnameVerifier;, +import okhttp3.internal.ws.RealWebSocket;, +import okio.Sink;, +import okio.Source;, +import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;, +, +import static okhttp3.internal.InternalKtKt.addressEqualsNonHost;, +import static okhttp3.internal.InternalKtKt.certificatePinnerWithCertificateChainCleaner;, +import static okhttp3.internal.Util.checkDuration;, +, +/**, + * Factory for {@linkplain Call calls}, which can be used to send HTTP requests and read their, + * responses., + *, + * <h3>OkHttpClients should be shared</h3>, + *, + * <p>OkHttp performs best when you create a single {@code OkHttpClient} instance and reuse it for, + * all of your HTTP calls. This is because each client holds its own connection pool and thread, + * pools. Reusing connections and threads reduces latency and saves memory. Conversely, creating a, + * client for each request wastes resources on idle pools., + *, + * <p>Use {@code new OkHttpClient()} to create a shared instance with the default settings:, + * <pre>   {@code, + *, + *   // The singleton HTTP client., + *   public final OkHttpClient client = new OkHttpClient();, + * }</pre>, + *, + * <p>Or use {@code new OkHttpClient.Builder()} to create a shared instance with custom settings:, + * <pre>   {@code, + *, + *   // The singleton HTTP client., + *   public final OkHttpClient client = new OkHttpClient.Builder(), + *       .addInterceptor(new HttpLoggingInterceptor()), + *       .cache(new Cache(cacheDir, cacheSize)), + *       .build();, + * }</pre>, + *, + * <h3>Customize your client with newBuilder()</h3>, + *, + * <p>You can customize a shared OkHttpClient instance with {@link #newBuilder()}. This builds a, + * client that shares the same connection pool, thread pools, and configuration. Use the builder, + * methods to configure the derived client for a specific purpose., + *, + * <p>This example shows a call with a short 500 millisecond timeout: <pre>   {@code, + *, + *   OkHttpClient eagerClient = client.newBuilder(), + *       .readTimeout(500, TimeUnit.MILLISECONDS), + *       .build();, + *   Response response = eagerClient.newCall(request).execute();, + * }</pre>, + *, + * <h3>Shutdown isn't necessary</h3>]