[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        "ResponseBodyEnd", "ConnectionReleased", "FetchEnd");, +        "ResponseBodyEnd", "ConnectionReleased", "FetchEnd");, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        "ResponseBodyEnd", "ConnectionReleased", "FetchEnd");, +        "ResponseBodyEnd", "ConnectionReleased", "FetchEnd");, +++ b/okhttp/src/main/java/okhttp3/internal/http1/Http1Codec.java, +    Source source = getTransferStream(response);, +    @Override public long read(Buffer sink, long byteCount) throws IOException {, +      try {, +        return source.read(sink, byteCount);, +      } catch (IOException e) {, +        endOfInput(false, e);, +        throw e;, +      }, +    }, +, +    protected final void endOfInput(boolean reuseConnection, IOException e) throws IOException {, +        streamAllocation.eventListener.responseBodyEnd(streamAllocation.call, e);, +        endOfInput(true, null);, +      long read = super.read(sink, Math.min(bytesRemaining, byteCount));, +        ProtocolException e = new ProtocolException("unexpected end of stream");, +        endOfInput(false, e); // The server didn't supply the promised content length., +        throw e;, +        endOfInput(true, null);, +        endOfInput(false, null);, +      long read = super.read(sink, Math.min(byteCount, bytesRemainingInChunk));, +        ProtocolException e = new ProtocolException("unexpected end of stream");, +        endOfInput(false, e); // The server didn't supply the promised chunk length., +        throw e;, +        endOfInput(true, null);, +        endOfInput(false, null);, +      long read = super.read(sink, byteCount);, +        endOfInput(true, null);, +        endOfInput(false, null);]