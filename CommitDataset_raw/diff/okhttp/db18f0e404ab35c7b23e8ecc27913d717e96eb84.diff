[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    if (protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE) && protocols.size() > 1) {, +      // when using h2_prior_knowledge, no other protocol should be supported., +      throw new IllegalArgumentException(, +          "protocols containing h2_prior_knowledge cannot use other protocols: " + protocols);, +    } else if (!protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE), +        && !protocols.contains(Protocol.HTTP_1_1)) {, +        } else if (protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE)) {, +          protocol = Protocol.H2_PRIOR_KNOWLEDGE;, +        if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2_PRIOR_KNOWLEDGE) {, +        } else if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2_PRIOR_KNOWLEDGE) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    if (protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE) && protocols.size() > 1) {, +      // when using h2_prior_knowledge, no other protocol should be supported., +      throw new IllegalArgumentException(, +          "protocols containing h2_prior_knowledge cannot use other protocols: " + protocols);, +    } else if (!protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE), +        && !protocols.contains(Protocol.HTTP_1_1)) {, +        } else if (protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE)) {, +          protocol = Protocol.H2_PRIOR_KNOWLEDGE;, +        if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2_PRIOR_KNOWLEDGE) {, +        } else if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2_PRIOR_KNOWLEDGE) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void testH2PriorKnowledgeServerFallback() {, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      fail();, +      assertEquals("protocols containing h2_prior_knowledge cannot use other protocols: ", +              + "[h2_prior_knowledge, http/1.1]", expected.getMessage());, +  @Test public void testH2PriorKnowledgeServerDuplicates() {, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +      fail();, +      assertEquals("protocols containing h2_prior_knowledge cannot use other protocols: ", +          + "[h2_prior_knowledge, h2_prior_knowledge]", expected.getMessage());, +  @Test public void testMockWebServerH2PriorKnowledgeProtocol() {, +    server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE));, +    assertEquals(Protocol.H2_PRIOR_KNOWLEDGE, server.protocols().get(0));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    if (protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE) && protocols.size() > 1) {, +      // when using h2_prior_knowledge, no other protocol should be supported., +      throw new IllegalArgumentException(, +          "protocols containing h2_prior_knowledge cannot use other protocols: " + protocols);, +    } else if (!protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE), +        && !protocols.contains(Protocol.HTTP_1_1)) {, +        } else if (protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE)) {, +          protocol = Protocol.H2_PRIOR_KNOWLEDGE;, +        if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2_PRIOR_KNOWLEDGE) {, +        } else if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2_PRIOR_KNOWLEDGE) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void testH2PriorKnowledgeServerFallback() {, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      fail();, +      assertEquals("protocols containing h2_prior_knowledge cannot use other protocols: ", +              + "[h2_prior_knowledge, http/1.1]", expected.getMessage());, +  @Test public void testH2PriorKnowledgeServerDuplicates() {, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +      fail();, +      assertEquals("protocols containing h2_prior_knowledge cannot use other protocols: ", +          + "[h2_prior_knowledge, h2_prior_knowledge]", expected.getMessage());, +  @Test public void testMockWebServerH2PriorKnowledgeProtocol() {, +    server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE));, +    assertEquals(Protocol.H2_PRIOR_KNOWLEDGE, server.protocols().get(0));, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void httpsCallsFailWhenProtocolIsH2PriorKnowledge() throws Exception {, +    client = client.newBuilder(), +        .protocols(Collections.singletonList(Protocol.H2_PRIOR_KNOWLEDGE)), +        .build();, +, +    server.useHttps(sslClient.socketFactory, false);, +    server.enqueue(new MockResponse());, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    try {, +      call.execute();, +      fail();, +    } catch (UnknownServiceException expected) {, +      assertEquals("H2_PRIOR_KNOWLEDGE cannot be used with HTTPS", expected.getMessage());, +    }, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    if (protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE) && protocols.size() > 1) {, +      // when using h2_prior_knowledge, no other protocol should be supported., +      throw new IllegalArgumentException(, +          "protocols containing h2_prior_knowledge cannot use other protocols: " + protocols);, +    } else if (!protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE), +        && !protocols.contains(Protocol.HTTP_1_1)) {, +        } else if (protocols.contains(Protocol.H2_PRIOR_KNOWLEDGE)) {, +          protocol = Protocol.H2_PRIOR_KNOWLEDGE;, +        if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2_PRIOR_KNOWLEDGE) {, +        } else if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2_PRIOR_KNOWLEDGE) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +  @Test public void testH2PriorKnowledgeServerFallback() {, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      fail();, +      assertEquals("protocols containing h2_prior_knowledge cannot use other protocols: ", +              + "[h2_prior_knowledge, http/1.1]", expected.getMessage());, +  @Test public void testH2PriorKnowledgeServerDuplicates() {, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));]