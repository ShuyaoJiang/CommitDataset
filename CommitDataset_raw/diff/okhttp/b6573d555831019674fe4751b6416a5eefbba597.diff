[+++ b/build.gradle, +  id 'me.champeau.gradle.japicmp' version '0.2.6', +, +/**, + * Returns a .jar file for the golden version of this project., + * https://github.com/Visistema/Groovy1/blob/ba5eb9b2f19ca0cc8927359ce414c4e1974b7016/gradle/binarycompatibility.gradle#L48, + */, +ext.baselineJar = { project, version ->, +  def group = project.property("GROUP"), +  def artifactId = project.property("POM_ARTIFACT_ID"), +  try {, +    String jarFile = "$artifactId-${version}.jar", +    project.group = 'virtual_group_for_japicmp' // Prevent it from resolving the current version., +    def dependency = project.dependencies.create("$group:$artifactId:$version@jar"), +    return project.configurations.detachedConfiguration(dependency).files, +        .find { (it.name == jarFile) }, +  } finally {, +    project.group = group, +  }, +}, +ext.baselineVersion = "3.14.0", +++ b/build.gradle, +  id 'me.champeau.gradle.japicmp' version '0.2.6', +, +/**, + * Returns a .jar file for the golden version of this project., + * https://github.com/Visistema/Groovy1/blob/ba5eb9b2f19ca0cc8927359ce414c4e1974b7016/gradle/binarycompatibility.gradle#L48, + */, +ext.baselineJar = { project, version ->, +  def group = project.property("GROUP"), +  def artifactId = project.property("POM_ARTIFACT_ID"), +  try {, +    String jarFile = "$artifactId-${version}.jar", +    project.group = 'virtual_group_for_japicmp' // Prevent it from resolving the current version., +    def dependency = project.dependencies.create("$group:$artifactId:$version@jar"), +    return project.configurations.detachedConfiguration(dependency).files, +        .find { (it.name == jarFile) }, +  } finally {, +    project.group = group, +  }, +}, +ext.baselineVersion = "3.14.0", +++ b/mockwebserver/build.gradle, +, +apply plugin: 'me.champeau.gradle.japicmp', +task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask, dependsOn: 'jar') {, +  oldClasspath = files(baselineJar(project, baselineVersion)), +  newClasspath = files(jar.archivePath), +  onlyBinaryIncompatibleModified = true, +  failOnModification = true, +  txtOutputFile = file("$buildDir/reports/japi.txt"), +  ignoreMissingClasses = true, +  includeSynthetic = true, +}, +check.dependsOn(japicmp), +++ b/build.gradle, +  id 'me.champeau.gradle.japicmp' version '0.2.6', +, +/**, + * Returns a .jar file for the golden version of this project., + * https://github.com/Visistema/Groovy1/blob/ba5eb9b2f19ca0cc8927359ce414c4e1974b7016/gradle/binarycompatibility.gradle#L48, + */, +ext.baselineJar = { project, version ->, +  def group = project.property("GROUP"), +  def artifactId = project.property("POM_ARTIFACT_ID"), +  try {, +    String jarFile = "$artifactId-${version}.jar", +    project.group = 'virtual_group_for_japicmp' // Prevent it from resolving the current version., +    def dependency = project.dependencies.create("$group:$artifactId:$version@jar"), +    return project.configurations.detachedConfiguration(dependency).files, +        .find { (it.name == jarFile) }, +  } finally {, +    project.group = group, +  }, +}, +ext.baselineVersion = "3.14.0", +++ b/mockwebserver/build.gradle, +, +apply plugin: 'me.champeau.gradle.japicmp', +task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask, dependsOn: 'jar') {, +  oldClasspath = files(baselineJar(project, baselineVersion)), +  newClasspath = files(jar.archivePath), +  onlyBinaryIncompatibleModified = true, +  failOnModification = true, +  txtOutputFile = file("$buildDir/reports/japi.txt"), +  ignoreMissingClasses = true, +  includeSynthetic = true, +}, +check.dependsOn(japicmp), +++ b/okhttp-logging-interceptor/build.gradle, +, +apply plugin: 'me.champeau.gradle.japicmp', +task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask, dependsOn: 'jar') {, +  oldClasspath = files(baselineJar(project, baselineVersion)), +  newClasspath = files(jar.archivePath), +  onlyBinaryIncompatibleModified = true, +  failOnModification = true, +  txtOutputFile = file("$buildDir/reports/japi.txt"), +  ignoreMissingClasses = true, +  includeSynthetic = true]