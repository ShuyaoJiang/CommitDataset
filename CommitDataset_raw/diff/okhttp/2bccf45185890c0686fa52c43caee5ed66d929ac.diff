[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.getRequestHeaders();, +        stream.sendResponseHeaders(Collections.singletonList(, +      stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.getRequestHeaders();, +        stream.sendResponseHeaders(Collections.singletonList(, +      stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.getRequestHeaders();, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.getRequestHeaders();, +        stream.sendResponseHeaders(Collections.singletonList(, +      stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.getRequestHeaders();, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@javax.annotation.ParametersAreNonnullByDefault, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.getRequestHeaders();, +        stream.sendResponseHeaders(Collections.singletonList(, +      stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.getRequestHeaders();, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@javax.annotation.ParametersAreNonnullByDefault, +++ b/okhttp-logging-interceptor/README.md, +You can change the log level at any time by calling `setLevel`., +**Warning**: The logs generated by this interceptor when using the `HEADERS` or `BODY` levels has, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.getRequestHeaders();, +        stream.sendResponseHeaders(Collections.singletonList(, +      stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.getRequestHeaders();, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@javax.annotation.ParametersAreNonnullByDefault, +++ b/okhttp-logging-interceptor/README.md, +You can change the log level at any time by calling `setLevel`., +**Warning**: The logs generated by this interceptor when using the `HEADERS` or `BODY` levels has, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +          logger.log(name + ": " + headers.value(i));, +        logger.log(headers.name(i) + ": " + headers.value(i));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.getRequestHeaders();, +        stream.sendResponseHeaders(Collections.singletonList(, +      stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.getRequestHeaders();, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@javax.annotation.ParametersAreNonnullByDefault, +++ b/okhttp-logging-interceptor/README.md, +You can change the log level at any time by calling `setLevel`., +**Warning**: The logs generated by this interceptor when using the `HEADERS` or `BODY` levels has, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +          logger.log(name + ": " + headers.value(i));, +        logger.log(headers.name(i) + ": " + headers.value(i));, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +@javax.annotation.ParametersAreNonnullByDefault, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.getRequestHeaders();, +        stream.sendResponseHeaders(Collections.singletonList(, +      stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.getRequestHeaders();, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +    stream.sendResponseHeaders(responseHeaders, true);, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/package-info.java, +@javax.annotation.ParametersAreNonnullByDefault, +++ b/okhttp-logging-interceptor/README.md, +You can change the log level at any time by calling `setLevel`., +**Warning**: The logs generated by this interceptor when using the `HEADERS` or `BODY` levels has, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +          logger.log(name + ": " + headers.value(i));, +        logger.log(headers.name(i) + ": " + headers.value(i));, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/package-info.java, +@javax.annotation.ParametersAreNonnullByDefault, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.getRequestHeaders();, +        stream.sendResponseHeaders(Collections.singletonList(, +      stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.getRequestHeaders();]