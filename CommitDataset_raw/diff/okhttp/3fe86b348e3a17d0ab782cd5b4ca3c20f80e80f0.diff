[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void httpWithExcessiveHeaders() throws IOException {, +    String longLine = "HTTP/1.1 200 " + stringFill('O', 256 * 1024) + "K";, +, +    server.setProtocols(Collections.singletonList(Protocol.HTTP_1_1));, +, +    server.enqueue(new MockResponse(), +        .setStatus(longLine), +        .setBody("I'm not even supposed to be here today."));, +, +    executeSynchronously("/"), +        .assertFailureMatches(".*unexpected end of stream on Connection.*");, +  }, +, +  private String stringFill(char fillChar, int length) {, +    char[] value = new char[length];, +    Arrays.fill(value, fillChar);, +    return new String(value);, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void httpWithExcessiveHeaders() throws IOException {, +    String longLine = "HTTP/1.1 200 " + stringFill('O', 256 * 1024) + "K";, +, +    server.setProtocols(Collections.singletonList(Protocol.HTTP_1_1));, +, +    server.enqueue(new MockResponse(), +        .setStatus(longLine), +        .setBody("I'm not even supposed to be here today."));, +, +    executeSynchronously("/"), +        .assertFailureMatches(".*unexpected end of stream on Connection.*");, +  }, +, +  private String stringFill(char fillChar, int length) {, +    char[] value = new char[length];, +    Arrays.fill(value, fillChar);, +    return new String(value);, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java, +    assertNotNull("No failure found", failure);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void httpWithExcessiveHeaders() throws IOException {, +    String longLine = "HTTP/1.1 200 " + stringFill('O', 256 * 1024) + "K";, +, +    server.setProtocols(Collections.singletonList(Protocol.HTTP_1_1));, +, +    server.enqueue(new MockResponse(), +        .setStatus(longLine), +        .setBody("I'm not even supposed to be here today."));, +, +    executeSynchronously("/"), +        .assertFailureMatches(".*unexpected end of stream on Connection.*");, +  }, +, +  private String stringFill(char fillChar, int length) {, +    char[] value = new char[length];, +    Arrays.fill(value, fillChar);, +    return new String(value);, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java, +    assertNotNull("No failure found", failure);, +++ b/okhttp/src/main/java/okhttp3/internal/http1/Http1Codec.java, +  private static final int HEADER_LIMIT = Integer.getInteger("okhttp.headerlimit", 256 * 1024);, +  private long headerLimit = HEADER_LIMIT;, +      StatusLine statusLine = StatusLine.parse(readHeaderLine());, +  private String readHeaderLine() throws IOException {, +    String line = source.readUtf8LineStrict(headerLimit);, +    headerLimit -= line.length();, +    return line;, +  }, +, +    for (String line; (line = readHeaderLine()).length() != 0; ) {]