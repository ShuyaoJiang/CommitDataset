[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    private final AtomicInteger sequenceNumber = new AtomicInteger();, +          bodyOut.toByteArray(), sequenceNumber.getAndIncrement(), socket);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    private final AtomicInteger sequenceNumber = new AtomicInteger();, +          bodyOut.toByteArray(), sequenceNumber.getAndIncrement(), socket);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +    idleStartTimeNs = value ? System.nanoTime() : Long.MAX_VALUE;, +    return idleStartTimeNs != Long.MAX_VALUE;, +  /**, +   * Returns the time in ns when this connection became idle or Long.MAX_VALUE, +   * if connection is not idle., +   */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    private final AtomicInteger sequenceNumber = new AtomicInteger();, +          bodyOut.toByteArray(), sequenceNumber.getAndIncrement(), socket);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +    idleStartTimeNs = value ? System.nanoTime() : Long.MAX_VALUE;, +    return idleStartTimeNs != Long.MAX_VALUE;, +  /**, +   * Returns the time in ns when this connection became idle or Long.MAX_VALUE, +   * if connection is not idle., +   */, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    return getIdleStartTimeNs() < System.nanoTime() - keepAliveDurationNs;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    private final AtomicInteger sequenceNumber = new AtomicInteger();, +          bodyOut.toByteArray(), sequenceNumber.getAndIncrement(), socket);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +    idleStartTimeNs = value ? System.nanoTime() : Long.MAX_VALUE;, +    return idleStartTimeNs != Long.MAX_VALUE;, +  /**, +   * Returns the time in ns when this connection became idle or Long.MAX_VALUE, +   * if connection is not idle., +   */, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    return getIdleStartTimeNs() < System.nanoTime() - keepAliveDurationNs;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +        setResponse(combinedHeaders, cachedResponseBody);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    private final AtomicInteger sequenceNumber = new AtomicInteger();, +          bodyOut.toByteArray(), sequenceNumber.getAndIncrement(), socket);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +    idleStartTimeNs = value ? System.nanoTime() : Long.MAX_VALUE;, +    return idleStartTimeNs != Long.MAX_VALUE;, +  /**, +   * Returns the time in ns when this connection became idle or Long.MAX_VALUE, +   * if connection is not idle., +   */, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    return getIdleStartTimeNs() < System.nanoTime() - keepAliveDurationNs;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +        setResponse(combinedHeaders, cachedResponseBody);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +      return null;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    private final AtomicInteger sequenceNumber = new AtomicInteger();, +          bodyOut.toByteArray(), sequenceNumber.getAndIncrement(), socket);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +    idleStartTimeNs = value ? System.nanoTime() : Long.MAX_VALUE;, +    return idleStartTimeNs != Long.MAX_VALUE;, +  /**, +   * Returns the time in ns when this connection became idle or Long.MAX_VALUE, +   * if connection is not idle., +   */, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    return getIdleStartTimeNs() < System.nanoTime() - keepAliveDurationNs;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +        setResponse(combinedHeaders, cachedResponseBody);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +      return null;, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +    assertEquals(1, server.takeRequest().getSequenceNumber());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    private final AtomicInteger sequenceNumber = new AtomicInteger();, +          bodyOut.toByteArray(), sequenceNumber.getAndIncrement(), socket);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +    idleStartTimeNs = value ? System.nanoTime() : Long.MAX_VALUE;, +    return idleStartTimeNs != Long.MAX_VALUE;, +  /**, +   * Returns the time in ns when this connection became idle or Long.MAX_VALUE, +   * if connection is not idle., +   */, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    return getIdleStartTimeNs() < System.nanoTime() - keepAliveDurationNs;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +        setResponse(combinedHeaders, cachedResponseBody);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +      return null;, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +    assertEquals(1, server.takeRequest().getSequenceNumber());, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    private final AtomicInteger sequenceNumber = new AtomicInteger();, +          bodyOut.toByteArray(), sequenceNumber.getAndIncrement(), socket);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +    idleStartTimeNs = value ? System.nanoTime() : Long.MAX_VALUE;, +    return idleStartTimeNs != Long.MAX_VALUE;, +  /**, +   * Returns the time in ns when this connection became idle or Long.MAX_VALUE]