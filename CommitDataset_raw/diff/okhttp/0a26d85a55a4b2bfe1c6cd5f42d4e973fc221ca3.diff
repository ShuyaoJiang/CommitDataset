[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.ByteString;, +      return ByteString.of(md5bytes).hex();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.ByteString;, +      return ByteString.of(md5bytes).hex();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +import okio.Okio;, +      this.source = Okio.buffer(source);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.ByteString;, +      return ByteString.of(md5bytes).hex();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +import okio.Okio;, +      this.source = Okio.buffer(source);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/NameValueBlockReader.java, +import okio.Okio;, +    this.source = Okio.buffer(inflaterSource);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.ByteString;, +      return ByteString.of(md5bytes).hex();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +import okio.Okio;, +      this.source = Okio.buffer(source);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/NameValueBlockReader.java, +import okio.Okio;, +    this.source = Okio.buffer(inflaterSource);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +import okio.Okio;, +      this("", client, Okio.buffer(Okio.source(socket.getInputStream())),, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import okio.ByteString;, +      return ByteString.of(md5bytes).hex();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +import okio.Okio;, +      this.source = Okio.buffer(source);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/NameValueBlockReader.java, +import okio.Okio;, +    this.source = Okio.buffer(inflaterSource);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +import okio.Okio;, +      this("", client, Okio.buffer(Okio.source(socket.getInputStream())),, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/ByteStringTest.java, +import static org.junit.Assert.fail;, +    ByteString byteString = ByteString.decodeHex("000102");, +    assertTrue(byteString.equals(ByteString.decodeHex("000102")));, +    assertFalse(byteString.equals(ByteString.decodeHex("000201")));, +    ByteString byteString = ByteString.decodeHex("0102");, +    assertEquals(byteString.hashCode(), ByteString.decodeHex("0102").hashCode());, +    assertEquals(ByteString.decodeHex("6162"), ByteString.read(in, 2));, +    assertEquals(ByteString.decodeHex("63"), ByteString.read(in, 1));, +    ByteString.decodeHex("616263").write(out);, +    assertEquals(ByteString.decodeHex("ff"), ByteString.decodeBase64("//=="));, +    assertEquals(ByteString.decodeHex("ffff"), ByteString.decodeBase64("///="));, +    assertEquals(ByteString.decodeHex("ffffff"), ByteString.decodeBase64("////"));, +    assertEquals(ByteString.decodeHex("ffffffffffff"), ByteString.decodeBase64("////////"));, +  @Test public void decodeBase64WithWhitespace() {, +  @Test public void encodeHex() throws Exception {, +    assertEquals("000102", ByteString.of((byte) 0x0, (byte) 0x1, (byte) 0x2).hex());, +, +  @Test public void decodeHex() throws Exception {, +    assertEquals(ByteString.of((byte) 0x0, (byte) 0x1, (byte) 0x2), ByteString.decodeHex("000102"));, +  }, +, +  @Test public void decodeHexOddNumberOfChars() throws Exception {, +    try {, +      ByteString.decodeHex("aaa");, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @Test public void decodeHexInvalidChar() throws Exception {, +    try {, +      ByteString.decodeHex("a\u0000");, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.Okio;, +      InputStream bodyIn = Okio.buffer(stream.getSource()).inputStream();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java]