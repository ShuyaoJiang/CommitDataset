[+++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +import java.util.List;, +  private final RecordingEventListener listener = new RecordingEventListener();, +  private OkHttpClient client = defaultClient(), +      .newBuilder(), +      .eventListener(listener), +      .build();, +, +  @Test public void requestBodyEndsAfterResponseBody() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    MockDuplexResponseBody mockDuplexResponseBody = enqueueResponseWithBody(, +        new MockResponse(), +            .clearHeaders(),, +        new MockDuplexResponseBody(), +            .exhaustResponse(), +            .receiveRequest("request A\n"), +            .exhaustRequest());, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .post(new AsyncRequestBody()), +        .build());, +, +    try (Response response = call.execute()) {, +      BufferedSource responseBody = response.body().source();, +      assertTrue(responseBody.exhausted());, +, +      BufferedSink requestBody = ((AsyncRequestBody) call.request().body()).takeSink();, +      requestBody.writeUtf8("request A\n");, +      requestBody.close();, +    }, +, +    mockDuplexResponseBody.awaitSuccess();, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd", "ConnectStart",, +        "SecureConnectStart", "SecureConnectEnd", "ConnectEnd", "ConnectionAcquired",, +        "RequestHeadersStart", "RequestHeadersEnd", "RequestBodyStart", "ResponseHeadersStart",, +        "ResponseHeadersEnd", "ResponseBodyStart", "ResponseBodyEnd", "RequestBodyEnd",, +        "ConnectionReleased", "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +import java.util.List;, +  private final RecordingEventListener listener = new RecordingEventListener();, +  private OkHttpClient client = defaultClient(), +      .newBuilder(), +      .eventListener(listener), +      .build();, +, +  @Test public void requestBodyEndsAfterResponseBody() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    MockDuplexResponseBody mockDuplexResponseBody = enqueueResponseWithBody(, +        new MockResponse(), +            .clearHeaders(),, +        new MockDuplexResponseBody(), +            .exhaustResponse(), +            .receiveRequest("request A\n"), +            .exhaustRequest());, +, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .post(new AsyncRequestBody()), +        .build());, +, +    try (Response response = call.execute()) {, +      BufferedSource responseBody = response.body().source();, +      assertTrue(responseBody.exhausted());, +, +      BufferedSink requestBody = ((AsyncRequestBody) call.request().body()).takeSink();, +      requestBody.writeUtf8("request A\n");, +      requestBody.close();, +    }, +, +    mockDuplexResponseBody.awaitSuccess();, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd", "ConnectStart",, +        "SecureConnectStart", "SecureConnectEnd", "ConnectEnd", "ConnectionAcquired",, +        "RequestHeadersStart", "RequestHeadersEnd", "RequestBodyStart", "ResponseHeadersStart",, +        "ResponseHeadersEnd", "ResponseBodyStart", "ResponseBodyEnd", "RequestBodyEnd",, +        "ConnectionReleased", "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +        return 1024 * 1024 * 256;, +          sink.write(new byte[1024 * 256]);, +  @Test public void requestBodyMultipleFailuresReportedOnlyOnce() {, +    RequestBody requestBody = new RequestBody() {, +      @Override public MediaType contentType() {, +        return MediaType.get("text/plain");, +      }, +, +      @Override public long contentLength() {, +        return 1024 * 1024 * 256;, +      }, +, +      @Override public void writeTo(BufferedSink sink) throws IOException {, +        int failureCount = 0;, +        for (int i = 0; i < 1024; i++) {]