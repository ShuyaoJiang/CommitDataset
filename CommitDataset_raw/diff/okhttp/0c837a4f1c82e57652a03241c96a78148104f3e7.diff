[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http20Draft12Test.java, +    assertEquals(frame, sendHeaderFrames(true, sentHeaders)); // Check writer sends the same bytes., +, +    final List<Header> sentHeaders = largeHeaders();, +, +    Buffer headerBlock = literalHeaders(sentHeaders);, +    frame.writeShort(Http20Draft12.MAX_FRAME_SIZE);, +    frame.write(headerBlock, Http20Draft12.MAX_FRAME_SIZE);, +    assertEquals(frame, sendHeaderFrames(false, sentHeaders)); // Check writer sends the same bytes., +, +        assertEquals(sentHeaders, headerBlock);, +    assertEquals(frame, sendPushPromiseFrames(expectedPromisedStreamId, pushPromise));, +, +    final List<Header> pushPromise = largeHeaders();, +, +    frame.writeShort(Http20Draft12.MAX_FRAME_SIZE);, +    frame.write(headerBlock, 16379);, +    frame.writeShort((int) headerBlock.size());, +    frame.writeAll(headerBlock);, +, +    assertEquals(frame, sendPushPromiseFrames(expectedPromisedStreamId, pushPromise));, +    final byte[] expectedData = new byte[Http20Draft12.MAX_FRAME_SIZE];, +        assertEquals(Http20Draft12.MAX_FRAME_SIZE, length);, +    byte[] expectedData = new byte[Http20Draft12.MAX_FRAME_SIZE];, +   * Padding is encoded over 2 bytes, so maximum value is 65535, but maximum frame size is Http20Draft12.MAX_FRAME_SIZE., +   * Padding is encoded over 2 bytes, so maximum value is 65535, but maximum frame size is Http20Draft12.MAX_FRAME_SIZE., +   * Padding is encoded over 2 bytes, so maximum value is 65535, but maximum frame size is Http20Draft12.MAX_FRAME_SIZE., +      writer.frameHeader(streamId, Http20Draft12.MAX_FRAME_SIZE, Http20Draft12.TYPE_DATA, FLAG_NONE);, +  private Buffer sendHeaderFrames(boolean outFinished, List<Header> headers) throws IOException {, +    Buffer out = new Buffer();, +    new Http20Draft12.Writer(out, true).headers(outFinished, expectedStreamId, headers);, +    return out;, +  }, +, +  private Buffer sendPushPromiseFrames(int streamId, List<Header> headers) throws IOException {, +    Buffer out = new Buffer();, +    new Http20Draft12.Writer(out, true).pushPromise(expectedStreamId, streamId, headers);, +    return out;, +  }, +, +, +  /** Create a sufficiently large header set to overflow Http20Draft12.MAX_FRAME_SIZE bytes. */, +  private static List<Header> largeHeaders() {, +    String[] nameValues = new String[32];, +    char[] chars = new char[512];, +    for (int i = 0; i < nameValues.length;) {, +      Arrays.fill(chars, (char) i);, +      nameValues[i++] = nameValues[i++] = String.valueOf(chars);, +    }, +    return headerEntries(nameValues);, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http20Draft12Test.java, +    assertEquals(frame, sendHeaderFrames(true, sentHeaders)); // Check writer sends the same bytes., +, +    final List<Header> sentHeaders = largeHeaders();, +, +    Buffer headerBlock = literalHeaders(sentHeaders);, +    frame.writeShort(Http20Draft12.MAX_FRAME_SIZE);, +    frame.write(headerBlock, Http20Draft12.MAX_FRAME_SIZE);, +    assertEquals(frame, sendHeaderFrames(false, sentHeaders)); // Check writer sends the same bytes., +, +        assertEquals(sentHeaders, headerBlock);, +    assertEquals(frame, sendPushPromiseFrames(expectedPromisedStreamId, pushPromise));, +, +    final List<Header> pushPromise = largeHeaders();, +, +    frame.writeShort(Http20Draft12.MAX_FRAME_SIZE);, +    frame.write(headerBlock, 16379);, +    frame.writeShort((int) headerBlock.size());, +    frame.writeAll(headerBlock);, +, +    assertEquals(frame, sendPushPromiseFrames(expectedPromisedStreamId, pushPromise));, +    final byte[] expectedData = new byte[Http20Draft12.MAX_FRAME_SIZE];, +        assertEquals(Http20Draft12.MAX_FRAME_SIZE, length);, +    byte[] expectedData = new byte[Http20Draft12.MAX_FRAME_SIZE];, +   * Padding is encoded over 2 bytes, so maximum value is 65535, but maximum frame size is Http20Draft12.MAX_FRAME_SIZE., +   * Padding is encoded over 2 bytes, so maximum value is 65535, but maximum frame size is Http20Draft12.MAX_FRAME_SIZE., +   * Padding is encoded over 2 bytes, so maximum value is 65535, but maximum frame size is Http20Draft12.MAX_FRAME_SIZE., +      writer.frameHeader(streamId, Http20Draft12.MAX_FRAME_SIZE, Http20Draft12.TYPE_DATA, FLAG_NONE);, +  private Buffer sendHeaderFrames(boolean outFinished, List<Header> headers) throws IOException {, +    Buffer out = new Buffer();, +    new Http20Draft12.Writer(out, true).headers(outFinished, expectedStreamId, headers);, +    return out;, +  }, +, +  private Buffer sendPushPromiseFrames(int streamId, List<Header> headers) throws IOException {, +    Buffer out = new Buffer();, +    new Http20Draft12.Writer(out, true).pushPromise(expectedStreamId, streamId, headers);, +    return out;, +  }, +, +, +  /** Create a sufficiently large header set to overflow Http20Draft12.MAX_FRAME_SIZE bytes. */, +  private static List<Header> largeHeaders() {, +    String[] nameValues = new String[32];, +    char[] chars = new char[512];, +    for (int i = 0; i < nameValues.length;) {, +      Arrays.fill(chars, (char) i);, +      nameValues[i++] = nameValues[i++] = String.valueOf(chars);, +    }]