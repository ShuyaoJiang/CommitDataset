[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void close() throws IOException {, +    replyExecutor.shutdown();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void close() throws IOException {, +    replyExecutor.shutdown();, +++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +      @Override protected void close() throws IOException {, +      @Override protected void close() throws IOException {, +    client.readMessage(); // Detects error, send close, close connection., +    assertFalse(clientConnectionClosed); // Not closed until close reply is received., +    client.readMessage(); // Detects error, closes connection immediately since close already sent., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void close() throws IOException {, +    replyExecutor.shutdown();, +++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +      @Override protected void close() throws IOException {, +      @Override protected void close() throws IOException {, +    client.readMessage(); // Detects error, send close, close connection., +    assertFalse(clientConnectionClosed); // Not closed until close reply is received., +    client.readMessage(); // Detects error, closes connection immediately since close already sent., +++ b/okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java, +    boolean performClose;, +      performClose = readerSentClose;, +    if (performClose) {, +      close();, +      close();, +    boolean canSendClose;, +      // If the writer has not closed we may inform the server of the close., +      canSendClose = !writerSentClose;, +    if (canSendClose && e instanceof ProtocolException) {, +      close();, +  /** Perform any tear-down work (close the connection, shutdown executors). */, +  protected abstract void close() throws IOException;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          @Override protected void close() throws IOException {, +    replyExecutor.shutdown();, +++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +      @Override protected void close() throws IOException {, +      @Override protected void close() throws IOException {, +    client.readMessage(); // Detects error, send close, close connection., +    assertFalse(clientConnectionClosed); // Not closed until close reply is received., +    client.readMessage(); // Detects error, closes connection immediately since close already sent., +++ b/okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java, +    boolean performClose;, +      performClose = readerSentClose;, +    if (performClose) {, +      close();, +      close();, +    boolean canSendClose;, +      // If the writer has not closed we may inform the server of the close., +      canSendClose = !writerSentClose;, +    if (canSendClose && e instanceof ProtocolException) {, +      close();, +  /** Perform any tear-down work (close the connection, shutdown executors). */, +  protected abstract void close() throws IOException;, +++ b/okhttp-ws/src/main/java/com/squareup/okhttp/ws/WebSocketCall.java, +import java.util.concurrent.ExecutorService;, +  private final Request request;, +    this.request = request;, +    private final ExecutorService replyExecutor;, +        Random random, ExecutorService replyExecutor, WebSocketListener listener, String url) {, +      this.replyExecutor = replyExecutor;, +    @Override protected void close() throws IOException {, +      replyExecutor.shutdown();]