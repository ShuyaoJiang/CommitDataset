[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.BufferedSource;, +      InputStream bodyIn = new BufferedSource(stream.getSource()).inputStream();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.BufferedSource;, +      InputStream bodyIn = new BufferedSource(stream.getSource()).inputStream();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.BufferedSource;, +      InputStream bodyIn = new BufferedSource(stream.getSource()).inputStream();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import com.squareup.okhttp.internal.bytes.Deadline;, +import com.squareup.okhttp.internal.bytes.OkBuffer;, +import com.squareup.okhttp.internal.bytes.Source;, +   * Closes {@code source}, ignoring any checked exceptions. Does nothing if, +   * {@code source} is null., +   */, +  public static void closeQuietly(Source source) {, +    if (source != null) {, +      try {, +        source.close(Deadline.NONE);, +      } catch (RuntimeException rethrown) {, +        throw rethrown;, +      } catch (Exception ignored) {, +      }, +    }, +  }, +, +  /**, +  /** Reads until {@code in} is exhausted or the timeout has elapsed. */, +  public static boolean skipAll(Source in, int timeoutMillis) throws IOException {, +    // TODO: Implement deadlines everywhere so they can do this work., +    long startNanos = System.nanoTime();, +    OkBuffer skipBuffer = new OkBuffer();, +    while (NANOSECONDS.toMillis(System.nanoTime() - startNanos) < timeoutMillis) {, +      long read = in.read(skipBuffer, 2048, Deadline.NONE);, +      if (read == -1) return true; // Successfully exhausted the stream., +      skipBuffer.clear();, +    return false; // Ran out of time., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.BufferedSource;, +      InputStream bodyIn = new BufferedSource(stream.getSource()).inputStream();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import com.squareup.okhttp.internal.bytes.Deadline;, +import com.squareup.okhttp.internal.bytes.OkBuffer;, +import com.squareup.okhttp.internal.bytes.Source;, +   * Closes {@code source}, ignoring any checked exceptions. Does nothing if, +   * {@code source} is null., +   */, +  public static void closeQuietly(Source source) {, +    if (source != null) {, +      try {, +        source.close(Deadline.NONE);, +      } catch (RuntimeException rethrown) {, +        throw rethrown;, +      } catch (Exception ignored) {, +      }, +    }, +  }, +, +  /**, +  /** Reads until {@code in} is exhausted or the timeout has elapsed. */, +  public static boolean skipAll(Source in, int timeoutMillis) throws IOException {, +    // TODO: Implement deadlines everywhere so they can do this work., +    long startNanos = System.nanoTime();, +    OkBuffer skipBuffer = new OkBuffer();, +    while (NANOSECONDS.toMillis(System.nanoTime() - startNanos) < timeoutMillis) {, +      long read = in.read(skipBuffer, 2048, Deadline.NONE);, +      if (read == -1) return true; // Successfully exhausted the stream., +      skipBuffer.clear();, +    return false; // Ran out of time., +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/BufferedSource.java, +  public BufferedSource(Source source) {, +    this(source, new OkBuffer());, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.bytes.BufferedSource;, +      InputStream bodyIn = new BufferedSource(stream.getSource()).inputStream();, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/Protocol.java, +import com.squareup.okhttp.internal.bytes.ByteString;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +import com.squareup.okhttp.internal.bytes.Deadline;, +import com.squareup.okhttp.internal.bytes.OkBuffer;, +import com.squareup.okhttp.internal.bytes.Source;, +   * Closes {@code source}, ignoring any checked exceptions. Does nothing if, +   * {@code source} is null., +   */, +  public static void closeQuietly(Source source) {, +    if (source != null) {, +      try {, +        source.close(Deadline.NONE);, +      } catch (RuntimeException rethrown) {, +        throw rethrown;, +      } catch (Exception ignored) {]