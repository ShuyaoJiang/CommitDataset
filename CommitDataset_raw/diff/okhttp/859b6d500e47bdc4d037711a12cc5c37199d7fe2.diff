[+++ b/okhttp/src/test/java/okhttp3/KotlinSourceCompatibilityTest.kt, +import okhttp3.internal.http2.Settings, +import okhttp3.mockwebserver.MockResponse, +import okhttp3.mockwebserver.MockWebServer, +import okhttp3.mockwebserver.PushPromise, +import okhttp3.mockwebserver.QueueDispatcher, +import okhttp3.mockwebserver.RecordedRequest, +import okhttp3.mockwebserver.SocketPolicy, +import javax.net.ServerSocketFactory, +  fun dispatcherFromMockWebServer() {, +    val dispatcher = object : okhttp3.mockwebserver.Dispatcher() {, +      override fun dispatch(request: RecordedRequest?): MockResponse = TODO(), +      override fun peek(): MockResponse = TODO(), +      override fun shutdown() = TODO(), +    }, +  }, +, +  @Test @Ignore, +  fun mockResponse() {, +    var mockResponse: MockResponse = MockResponse(), +    var status: String = mockResponse.getStatus(), +    status = mockResponse.status, +    mockResponse = mockResponse.setStatus(""), +    mockResponse.status = "", +    mockResponse = mockResponse.setResponseCode(0), +    var headers: Headers = mockResponse.getHeaders(), +    headers = mockResponse.headers, +    var trailers: Headers = mockResponse.getTrailers(), +    trailers = mockResponse.trailers, +    mockResponse = mockResponse.clearHeaders(), +    mockResponse = mockResponse.addHeader(""), +    mockResponse = mockResponse.addHeader("", ""), +    mockResponse = mockResponse.addHeaderLenient("", Any()), +    mockResponse = mockResponse.setHeader("", Any()), +    mockResponse = mockResponse.setHeaders(Headers.of()), +    mockResponse = mockResponse.setTrailers(Headers.of()), +    mockResponse = mockResponse.removeHeader(""), +    var body: Buffer? = mockResponse.getBody(), +    body = mockResponse.body, +    mockResponse = mockResponse.setBody(Buffer()), +    mockResponse.body = Buffer(), +    mockResponse = mockResponse.setChunkedBody(Buffer(), 0), +    mockResponse = mockResponse.setChunkedBody("", 0), +    var socketPolicy: SocketPolicy = mockResponse.getSocketPolicy(), +    socketPolicy = mockResponse.socketPolicy, +    mockResponse = mockResponse.setSocketPolicy(SocketPolicy.KEEP_OPEN), +    var http2ErrorCode: Int = mockResponse.getHttp2ErrorCode(), +    http2ErrorCode = mockResponse.http2ErrorCode, +    mockResponse = mockResponse.setHttp2ErrorCode(0), +    mockResponse.http2ErrorCode = 0, +    mockResponse = mockResponse.throttleBody(0L, 0L, TimeUnit.SECONDS), +    var throttleBytesPerPeriod: Long = mockResponse.getThrottleBytesPerPeriod(), +    throttleBytesPerPeriod = mockResponse.throttleBytesPerPeriod, +    var throttlePeriod: Long = mockResponse.getThrottlePeriod(TimeUnit.SECONDS), +    mockResponse = mockResponse.setBodyDelay(0L, TimeUnit.SECONDS), +    val bodyDelay: Long = mockResponse.getBodyDelay(TimeUnit.SECONDS), +    mockResponse = mockResponse.setHeadersDelay(0L, TimeUnit.SECONDS), +    val headersDelay: Long = mockResponse.getHeadersDelay(TimeUnit.SECONDS), +    mockResponse = mockResponse.withPush(PushPromise("", "", Headers.of(), MockResponse())), +    var pushPromises: List<PushPromise> = mockResponse.getPushPromises(), +    pushPromises = mockResponse.pushPromises, +    mockResponse = mockResponse.withSettings(Settings()), +    var settings: Settings = mockResponse.getSettings(), +    settings = mockResponse.settings, +    mockResponse = mockResponse.withWebSocketUpgrade(object : WebSocketListener() {, +    }), +    var webSocketListener: WebSocketListener = mockResponse.getWebSocketListener(), +    webSocketListener = mockResponse.webSocketListener, +  }, +, +  @Test @Ignore, +  fun mockWebServer() {, +    val mockWebServer: MockWebServer = MockWebServer(), +    var port: Int = mockWebServer.getPort(), +    port = mockWebServer.port, +    var hostName: String = mockWebServer.getHostName(), +    hostName = mockWebServer.hostName, +    val toProxyAddress: Proxy = mockWebServer.toProxyAddress(), +    mockWebServer.setServerSocketFactory(ServerSocketFactory.getDefault()), +    val url: HttpUrl = mockWebServer.url(""), +    mockWebServer.setBodyLimit(0L), +    mockWebServer.setProtocolNegotiationEnabled(false), +    mockWebServer.setProtocols(listOf<Protocol>()), +    val protocols: List<Protocol> = mockWebServer.protocols(), +    mockWebServer.useHttps(SSLSocketFactory.getDefault() as SSLSocketFactory?, false), +    mockWebServer.noClientAuth(), +    mockWebServer.requestClientAuth(), +    mockWebServer.requireClientAuth(), +    var request: RecordedRequest = mockWebServer.takeRequest(), +    request = mockWebServer.takeRequest(0L, TimeUnit.SECONDS), +    var requestCount: Int = mockWebServer.getRequestCount(), +    requestCount = mockWebServer.requestCount, +    mockWebServer.enqueue(MockResponse()), +    mockWebServer.start(), +    mockWebServer.start(0), +    mockWebServer.start(InetAddress.getLocalHost(), 0), +    mockWebServer.shutdown(), +    var dispatcher: okhttp3.mockwebserver.Dispatcher = mockWebServer.getDispatcher(), +    dispatcher = mockWebServer.dispatcher, +    mockWebServer.setDispatcher(QueueDispatcher())]