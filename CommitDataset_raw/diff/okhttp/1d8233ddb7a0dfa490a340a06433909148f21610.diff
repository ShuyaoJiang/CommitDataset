[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  private NullServer nullServer = new NullServer();, +    nullServer.shutdown();, +    proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, TestUtil.UNREACHABLE_ADDRESS));, +    nullServer.start();, +    proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, nullServer.address()));, +    nullServer.start();, +    Call call = client.newCall(new Request.Builder(), +        .url(nullServer.url(scheme)), +        .build());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  private NullServer nullServer = new NullServer();, +    nullServer.shutdown();, +    proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, TestUtil.UNREACHABLE_ADDRESS));, +    nullServer.start();, +    proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, nullServer.address()));, +    nullServer.start();, +    Call call = client.newCall(new Request.Builder(), +        .url(nullServer.url(scheme)), +        .build());, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +  @Test public void connectTimeout() throws Exception {, +    Interceptor interceptor1 = new Interceptor() {, +      @Override public Response intercept(Chain chainA) throws IOException {, +        assertEquals(5000, chainA.connectTimeoutMillis());, +, +        Chain chainB = chainA.withConnectTimeout(100, TimeUnit.MILLISECONDS);, +        assertEquals(100, chainB.connectTimeoutMillis());, +, +        return chainB.proceed(chainA.request());, +      }, +    };, +, +    Interceptor interceptor2 = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        assertEquals(100, chain.connectTimeoutMillis());, +        return chain.proceed(chain.request());, +      }, +    };, +, +    client = client.newBuilder(), +        .connectTimeout(5, TimeUnit.SECONDS), +        .addInterceptor(interceptor1), +        .addInterceptor(interceptor2), +        .build();, +, +    Request request1 = new Request.Builder(), +        .url("http://" + TestUtil.UNREACHABLE_ADDRESS), +        .build();, +    Call call = client.newCall(request1);, +, +    try {, +      call.execute();, +      fail();, +    } catch (SocketTimeoutException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  private NullServer nullServer = new NullServer();, +    nullServer.shutdown();, +    proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, TestUtil.UNREACHABLE_ADDRESS));, +    nullServer.start();, +    proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, nullServer.address()));, +    nullServer.start();, +    Call call = client.newCall(new Request.Builder(), +        .url(nullServer.url(scheme)), +        .build());, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +  @Test public void connectTimeout() throws Exception {, +    Interceptor interceptor1 = new Interceptor() {, +      @Override public Response intercept(Chain chainA) throws IOException {, +        assertEquals(5000, chainA.connectTimeoutMillis());, +, +        Chain chainB = chainA.withConnectTimeout(100, TimeUnit.MILLISECONDS);, +        assertEquals(100, chainB.connectTimeoutMillis());, +, +        return chainB.proceed(chainA.request());, +      }, +    };, +, +    Interceptor interceptor2 = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        assertEquals(100, chain.connectTimeoutMillis());, +        return chain.proceed(chain.request());, +      }, +    };, +, +    client = client.newBuilder(), +        .connectTimeout(5, TimeUnit.SECONDS), +        .addInterceptor(interceptor1), +        .addInterceptor(interceptor2), +        .build();, +, +    Request request1 = new Request.Builder(), +        .url("http://" + TestUtil.UNREACHABLE_ADDRESS), +        .build();, +    Call call = client.newCall(request1);, +, +    try {]