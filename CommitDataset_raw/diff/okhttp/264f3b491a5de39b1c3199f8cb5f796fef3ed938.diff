[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.Internal;, +   * Adds a new header with the name and value. This may be used to add multiple, +   * headers with the same name. Unlike {@link #addHeader(String, Object)} this, +   * does not validate the name and value., +   */, +  public MockResponse addHeaderLenient(String name, Object value) {, +    Internal.instance.addLenient(headers, name, String.valueOf(value));, +    return this;, +  }, +, +  /**, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.Internal;, +   * Adds a new header with the name and value. This may be used to add multiple, +   * headers with the same name. Unlike {@link #addHeader(String, Object)} this, +   * does not validate the name and value., +   */, +  public MockResponse addHeaderLenient(String name, Object value) {, +    Internal.instance.addLenient(headers, name, String.valueOf(value));, +    return this;, +  }, +, +  /**, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +    assertEquals(2, connection.getHeaderFieldLong("Content-Length", -1));, +    assertEquals(-1, in.read());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.Internal;, +   * Adds a new header with the name and value. This may be used to add multiple, +   * headers with the same name. Unlike {@link #addHeader(String, Object)} this, +   * does not validate the name and value., +   */, +  public MockResponse addHeaderLenient(String name, Object value) {, +    Internal.instance.addLenient(headers, name, String.valueOf(value));, +    return this;, +  }, +, +  /**, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +    assertEquals(2, connection.getHeaderFieldLong("Content-Length", -1));, +    assertEquals(-1, in.read());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +import static org.junit.Assert.assertNull;, +  @Test public void parseHostAsciiNonPrintable() throws Exception {, +    String host = "host\u0001";, +    assertNull(HttpUrl.parse("http://" + host + "/"));, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.Internal;, +   * Adds a new header with the name and value. This may be used to add multiple, +   * headers with the same name. Unlike {@link #addHeader(String, Object)} this, +   * does not validate the name and value., +   */, +  public MockResponse addHeaderLenient(String name, Object value) {, +    Internal.instance.addLenient(headers, name, String.valueOf(value));, +    return this;, +  }, +, +  /**, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +    assertEquals(2, connection.getHeaderFieldLong("Content-Length", -1));, +    assertEquals(-1, in.read());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +import static org.junit.Assert.assertNull;, +  @Test public void parseHostAsciiNonPrintable() throws Exception {, +    String host = "host\u0001";, +    assertNull(HttpUrl.parse("http://" + host + "/"));, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java, +  @Test public void urlRedirectToHostWithNul() throws Exception {, +    String redirectUrl = "http://host\u0000/";, +    server.enqueue(new MockResponse().setResponseCode(302), +        .addHeaderLenient("Location", redirectUrl));, +, +    HttpURLConnection urlConnection = client.open(server.getUrl("/"));, +    assertEquals(302, urlConnection.getResponseCode());, +    assertEquals(redirectUrl, urlConnection.getHeaderField("Location"));, +  }, +, +  @Test public void urlWithBadAsciiHost() throws Exception {, +    URLConnection urlConnection = client.open(new URL("http://host\u0001/"));, +    try {, +      urlConnection.getInputStream();, +      fail();, +    } catch (UnknownHostException expected) {, +    }, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import com.squareup.okhttp.internal.Internal;, +   * Adds a new header with the name and value. This may be used to add multiple, +   * headers with the same name. Unlike {@link #addHeader(String, Object)} this, +   * does not validate the name and value., +   */, +  public MockResponse addHeaderLenient(String name, Object value) {, +    Internal.instance.addLenient(headers, name, String.valueOf(value));, +    return this;]