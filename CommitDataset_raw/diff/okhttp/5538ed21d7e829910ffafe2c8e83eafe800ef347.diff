[+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +        this.responseHeaders = combinedHeaders;, +, +        // Update the cache after applying the combined headers but before initializing the content, +        // stream, otherwise the Content-Encoding header (if present) will be stripped from the, +        // combined headers and not end up in the cache file if transparent gzip compression is, +        // turned on., +, +        initContentStream(cachedResponseBody);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +        this.responseHeaders = combinedHeaders;, +, +        // Update the cache after applying the combined headers but before initializing the content, +        // stream, otherwise the Content-Encoding header (if present) will be stripped from the, +        // combined headers and not end up in the cache file if transparent gzip compression is, +        // turned on., +, +        initContentStream(cachedResponseBody);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +import java.util.Collections;, +      return Collections.emptyMap();, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +        this.responseHeaders = combinedHeaders;, +, +        // Update the cache after applying the combined headers but before initializing the content, +        // stream, otherwise the Content-Encoding header (if present) will be stripped from the, +        // combined headers and not end up in the cache file if transparent gzip compression is, +        // turned on., +, +        initContentStream(cachedResponseBody);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +import java.util.Collections;, +      return Collections.emptyMap();, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +    server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +, +    // At least three request/response pairs are required because after the first request is cached, +    // a different execution path might be taken. Thus modifications to the cache applied during, +    // the second request might not be visible until another request is performed., +    assertEquals("ABCABCABC", readAscii(openConnection(server.getUrl("/"))));, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +        this.responseHeaders = combinedHeaders;, +, +        // Update the cache after applying the combined headers but before initializing the content, +        // stream, otherwise the Content-Encoding header (if present) will be stripped from the, +        // combined headers and not end up in the cache file if transparent gzip compression is, +        // turned on., +, +        initContentStream(cachedResponseBody);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +import java.util.Collections;, +      return Collections.emptyMap();, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +    server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +, +    // At least three request/response pairs are required because after the first request is cached, +    // a different execution path might be taken. Thus modifications to the cache applied during, +    // the second request might not be visible until another request is performed., +    assertEquals("ABCABCABC", readAscii(openConnection(server.getUrl("/"))));, +++ b/website/index.html, +            <p><a href="http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&c=jar-with-dependencies&v=LATEST" class="dl version-href">&darr; <span class="version-tag">Latest</span> JAR</a></p>, +        $.fn.artifactVersion({, +          'groupId': 'com.squareup.okhttp',, +          'artifactId': 'okhttp',, +          'classifier': 'jar-with-dependencies', +        }, function(version, url) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +        this.responseHeaders = combinedHeaders;, +, +        // Update the cache after applying the combined headers but before initializing the content, +        // stream, otherwise the Content-Encoding header (if present) will be stripped from the, +        // combined headers and not end up in the cache file if transparent gzip compression is, +        // turned on., +, +        initContentStream(cachedResponseBody);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +import java.util.Collections;, +      return Collections.emptyMap();, +++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +    server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +, +    // At least three request/response pairs are required because after the first request is cached, +    // a different execution path might be taken. Thus modifications to the cache applied during, +    // the second request might not be visible until another request is performed., +    assertEquals("ABCABCABC", readAscii(openConnection(server.getUrl("/"))));, +++ b/website/index.html, +            <p><a href="http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.okhttp&a=okhttp&c=jar-with-dependencies&v=LATEST" class="dl version-href">&darr; <span class="version-tag">Latest</span> JAR</a></p>, +        $.fn.artifactVersion({, +          'groupId': 'com.squareup.okhttp',, +          'artifactId': 'okhttp',, +          'classifier': 'jar-with-dependencies', +        }, function(version, url) {, +++ b/website/static/jquery-maven-artifact.min.js, + * Version: 2.0.0, + */(function(e){function n(e,t){var n=e.groupId.replace(/\./g,"/"),r="http://repo1.maven.org/maven2/"+n+"/"+e.artifactId+"/"+t+"/"+e.artifactId+"-"+t;return typeof e.classifier!="undefined"&&(r+="-"+e.classifier),r+="."+e.packaging,r}function r(e){var t={groupId:"g",artifactId:"a",packaging:"p",classifier:"l"},n="";for(var r in t)t.hasOwnProperty(r)&&e.hasOwnProperty(r)&&(n!==""&&(n+="+AND+"),n+=t[r]+':"'+e[r]+'"');return n}var t={packaging:"jar"};e.fn.artifactVersion=function(i,s){if(typeof i=="undefined"){alert("Error: config object is required.");return}if(typeof s=="undefined"){alert("Error: callback function required.");return}var i=e.extend({},t,i),o="http://search.maven.org/solrsearch/select/?q="+r(i)+"&wt=json&json.wrf=?";e.getJSON(o,function(e){var t=e.response.docs;if(t.length==0)return;var r=t[0].latestVersion||t[0].v,o=n(i,r);s(r,o)})},e.fn.artifactVersions=function(i,s){if(typeof i=="undefined"){alert("Error: config object is required.");return}if(typeof s=="undefined"){alert("Error: callback function required.");return}var i=e.extend({},t,i),o="http://search.maven.org/solrsearch/select/?q="+r(i)+"&wt=json&rows=10&core=gav&json.wrf=?";e.getJSON(o,function(e){var t=e.response.docs;if(t.length==0)return;t.sort(function(e,t){return e.v>t.v?-1:1});var r=[];for(var o=0;o<t.length;o++){var u=t[o].v;r.push({name:u,url:n(i,u)})}s(r)})}})(jQuery);]