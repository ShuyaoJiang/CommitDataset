[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +  private SSLSocketFactory sslSocketFactory;, +  private Protocol protocol;, +  public SpdyServer(File baseDirectory) {, +  }, +, +  public void useHttps(SSLSocketFactory sslSocketFactory) {, +      Socket socket = serverSocket.accept();, +      if (sslSocketFactory != null) {, +        socket = doSsl(socket);, +      new SpdyConnection.Builder(false, socket).protocol(protocol).handler(this).build();, +  private Socket doSsl(Socket socket) throws IOException {, +    SSLSocket sslSocket =, +        (SSLSocket) sslSocketFactory.createSocket(socket, socket.getInetAddress().getHostAddress(),, +            socket.getPort(), true);, +    String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +    protocol = protocolString != null ? Protocol.get(protocolString) : null;, +    if (protocol == null || !spdyProtocols.contains(protocol)) {, +      throw new IllegalStateException("Protocol " + protocol + " unsupported");, +    }, +      serveDirectory(stream, file.list());, +  private void serveDirectory(SpdyStream stream, String[] files) throws IOException {, +    for (String file : files) {, +      out.writeUtf8("<a href='" + file + "'>" + file + "</a><br>");, +    return file.getName().endsWith(".html") ? "text/html" : "text/plain";, +    SpdyServer server = new SpdyServer(new File(args[0]));, +    server.useHttps(SslContextBuilder.localhost().getSocketFactory());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +  private SSLSocketFactory sslSocketFactory;, +  private Protocol protocol;, +  public SpdyServer(File baseDirectory) {, +  }, +, +  public void useHttps(SSLSocketFactory sslSocketFactory) {, +      Socket socket = serverSocket.accept();, +      if (sslSocketFactory != null) {, +        socket = doSsl(socket);, +      new SpdyConnection.Builder(false, socket).protocol(protocol).handler(this).build();, +  private Socket doSsl(Socket socket) throws IOException {, +    SSLSocket sslSocket =, +        (SSLSocket) sslSocketFactory.createSocket(socket, socket.getInetAddress().getHostAddress(),, +            socket.getPort(), true);, +    String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +    protocol = protocolString != null ? Protocol.get(protocolString) : null;, +    if (protocol == null || !spdyProtocols.contains(protocol)) {, +      throw new IllegalStateException("Protocol " + protocol + " unsupported");, +    }, +      serveDirectory(stream, file.list());, +  private void serveDirectory(SpdyStream stream, String[] files) throws IOException {, +    for (String file : files) {, +      out.writeUtf8("<a href='" + file + "'>" + file + "</a><br>");, +    return file.getName().endsWith(".html") ? "text/html" : "text/plain";, +    SpdyServer server = new SpdyServer(new File(args[0]));, +    server.useHttps(SslContextBuilder.localhost().getSocketFactory());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +      response.body().source().readAll(Okio.sink(System.out));, +      System.out.flush();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +  private SSLSocketFactory sslSocketFactory;, +  private Protocol protocol;, +  public SpdyServer(File baseDirectory) {, +  }, +, +  public void useHttps(SSLSocketFactory sslSocketFactory) {, +      Socket socket = serverSocket.accept();, +      if (sslSocketFactory != null) {, +        socket = doSsl(socket);, +      new SpdyConnection.Builder(false, socket).protocol(protocol).handler(this).build();, +  private Socket doSsl(Socket socket) throws IOException {, +    SSLSocket sslSocket =, +        (SSLSocket) sslSocketFactory.createSocket(socket, socket.getInetAddress().getHostAddress(),, +            socket.getPort(), true);, +    String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +    protocol = protocolString != null ? Protocol.get(protocolString) : null;, +    if (protocol == null || !spdyProtocols.contains(protocol)) {, +      throw new IllegalStateException("Protocol " + protocol + " unsupported");, +    }, +      serveDirectory(stream, file.list());, +  private void serveDirectory(SpdyStream stream, String[] files) throws IOException {, +    for (String file : files) {, +      out.writeUtf8("<a href='" + file + "'>" + file + "</a><br>");, +    return file.getName().endsWith(".html") ? "text/html" : "text/plain";, +    SpdyServer server = new SpdyServer(new File(args[0]));, +    server.useHttps(SslContextBuilder.localhost().getSocketFactory());, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +      response.body().source().readAll(Okio.sink(System.out));, +      System.out.flush();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.LinkedBlockingQueue;, +import java.util.concurrent.SynchronousQueue;, +import java.util.concurrent.ThreadPoolExecutor;, +import java.util.concurrent.TimeUnit;, +  @Test public void applicationkInterceptorThrowsRuntimeExceptionSynchronous() throws Exception {, +    interceptorThrowsRuntimeExceptionSynchronous(client.interceptors());, +  }, +, +  @Test public void networkInterceptorThrowsRuntimeExceptionSynchronous() throws Exception {, +    interceptorThrowsRuntimeExceptionSynchronous(client.networkInterceptors());, +  }]