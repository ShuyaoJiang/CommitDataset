[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +    connection(peer);, +    Http2Connection connection = connection(peer);, +    Http2Connection connection = connection(peer);, +    // Verify the peer received the ACK., +    ackFrame = peer.takeFrame();, +    assertEquals(Http2.TYPE_SETTINGS, ackFrame.type);, +    assertEquals(0, ackFrame.streamId);, +    assertTrue(ackFrame.ack);, +    Http2Connection connection = sendHttp2SettingsAndCheckForAck(client, settings);, +    Http2Connection connection = sendHttp2SettingsAndCheckForAck(client, settings);, +    Http2Connection connection = sendHttp2SettingsAndCheckForAck(true, settings);, +    peer.acceptFrame(); // PING or SETTINGS ACK, +    peer.acceptFrame(); // PING or SETTINGS ACK, +    Http2Connection connection = connection(peer);, +    peer.takeFrame(); // PING or SETTINGS ACK, +    peer.takeFrame(); // PING or SETTINGS ACK, +    Http2Connection connection = connection(peer);, +    Http2Connection connection = connection(peer);, +    Http2Connection connection = connection(peer);, +    assertEquals(3, peer.frameCount());, +    Http2Connection connection = connection(peer);, +    assertEquals(3, peer.frameCount());, +    Http2Connection connection = connection(peer);, +    Http2Connection connection = connectionBuilder(peer), +        .pushObserver(observer), +        .build();, +    connection.start(false);, +    Http2Connection connection = connectionBuilder(peer).build();, +    connection.start(false);, +    Http2Connection connection = connectionBuilder(peer), +        .pushObserver(PushObserver.CANCEL), +        .build();, +    connection.start(false);, +    Http2Connection connection = connection(peer);, +    Http2Connection connection = connection(peer);, +    connection(peer);, +    Http2Connection connection = connection(peer);, +    connection(peer);, +    Http2Connection connection = connectionBuilder(peer), +        .listener(listener), +        .build();, +    connection.start(false);, +    peer.takeFrame(); // Guarantees that the peer Settings frame has been processed., +    Http2Connection connection = connection(peer);, +    assertEquals(Http2.TYPE_SETTINGS, peer.takeFrame().type);, +    Http2Connection connection = connection(peer);, +, +    peer.takeFrame(); // Guarantees that the Settings frame has been processed., +    connection(peer);, +    connection(peer);, +    Http2Connection connection = connection(peer);, +    Http2Connection connection = connection(peer);, +    Http2Connection connection = connection(peer);, +    Http2Connection connection = connection(peer);, +    Http2Connection connection = connection(peer);, +    Http2Connection connection = connection(peer);, +    Http2Connection connection = connection(peer);, +    Http2Connection connection = connection(peer);, +    Http2Connection connection = connection(peer);, +    Http2Connection connection = connection(peer);, +    Http2Connection connection = connection(peer);, +    Http2Connection connection = connection(peer);, +    Http2Connection connection = connection(peer);, +    Http2Connection connection = connection(peer);, +    Http2Connection connection = connection(peer);, +    peer.acceptFrame(); // PING, +    Http2Connection connection = connection(peer);, +    assertEquals(Http2.TYPE_SETTINGS, peer.takeFrame().type);, +    peer.acceptFrame(); // PING, +    Http2Connection connection = connection(peer);, +    assertEquals(Http2.TYPE_SETTINGS, peer.takeFrame().type);, +    Http2Connection connection = connection(peer);, +    Http2Connection connection = connection(peer);, +    Http2Connection connection = connection(peer);, +    Http2Connection connection = connection(peer);, +    assertEquals(3, peer.frameCount());, +    Http2Connection connection = connection(peer);, +    assertEquals(3, peer.frameCount());, +    Http2Connection connection = connection(peer);, +    Http2Connection connection = connection(peer);, +  private Http2Connection sendHttp2SettingsAndCheckForAck(boolean client, Settings settings), +      throws IOException, InterruptedException {, +    peer.acceptFrame(); // PING, +    peer.sendFrame().ping(true, 1, 0);, +    // play it back, +    Http2Connection connection = connection(peer);, +    connection.ping().roundTripTime(); // Ensure that settings have been applied before returning., +  private Http2Connection connection(MockHttp2Peer peer) throws IOException {, +    Http2Connection connection = connectionBuilder(peer).build();, +    connection.start(false);, +    return connection;, +  }, +, +  private Http2Connection.Builder connectionBuilder(MockHttp2Peer peer) throws IOException {, +    return new Http2Connection.Builder(true), +        .socket(peer.openSocket()), +        .pushObserver(IGNORE);, +  }, +]