[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.util.Arrays;, +import okhttp3.internal.Util;, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis >= 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(server.getPort() > 0).isTrue();, +      assertThat(e.getMessage().contains("refused")).isTrue();, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.util.Arrays;, +import okhttp3.internal.Util;, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis >= 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(server.getPort() > 0).isTrue();, +      assertThat(e.getMessage().contains("refused")).isTrue();, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    List<Header> responseHeaders = Arrays.asList(, +    List<Header> responseHeaders = Arrays.asList(, +    List<Header> responseHeaders = Arrays.asList(, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.util.Arrays;, +import okhttp3.internal.Util;, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis >= 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(server.getPort() > 0).isTrue();, +      assertThat(e.getMessage().contains("refused")).isTrue();, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    List<Header> responseHeaders = Arrays.asList(, +    List<Header> responseHeaders = Arrays.asList(, +    List<Header> responseHeaders = Arrays.asList(, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import java.util.Arrays;, +      return bootstrapDnsHosts(Arrays.asList(bootstrapDnsHosts));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import java.util.Arrays;, +import okhttp3.internal.Util;, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +, +    assertThat(elapsedMillis >= 500).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis < 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(elapsedMillis >= 1000).overridingErrorMessage(, +        Util.format("Request + Response: %sms", elapsedMillis)).isTrue();, +    assertThat(server.getPort() > 0).isTrue();, +      assertThat(e.getMessage().contains("refused")).isTrue();, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1));, +      server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE));, +    server.setProtocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE));, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    List<Header> responseHeaders = Arrays.asList(, +    List<Header> responseHeaders = Arrays.asList(, +    List<Header> responseHeaders = Arrays.asList(, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java, +import java.util.Arrays;, +      return bootstrapDnsHosts(Arrays.asList(bootstrapDnsHosts));, +++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java, +import java.util.HashSet;]