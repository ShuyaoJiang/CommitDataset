[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    sleepIfDelayed(response);, +  private void sleepIfDelayed(MockResponse response) {, +    if (response.getBodyDelayTimeMs() != 0) {, +      try {, +        Thread.sleep(response.getBodyDelayTimeMs());, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +      }, +    }, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    sleepIfDelayed(response);, +  private void sleepIfDelayed(MockResponse response) {, +    if (response.getBodyDelayTimeMs() != 0) {, +      try {, +        Thread.sleep(response.getBodyDelayTimeMs());, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +      }, +    }, +  }, +, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +, +    /**, +     * Delay the response body by sleeping 1000ms., +     */, +    public void testDelayResponse() throws IOException {, +        server.enqueue(new MockResponse(), +                .setBody("ABCDEF"), +                .setBodyDelayTimeMs(1000));, +        server.play();, +, +        long startNanos = System.nanoTime();, +        URLConnection connection = server.getUrl("/").openConnection();, +        InputStream in = connection.getInputStream();, +        assertEquals('A', in.read());, +        assertEquals('B', in.read());, +        assertEquals('C', in.read());, +        assertEquals('D', in.read());, +        assertEquals('E', in.read());, +        assertEquals('F', in.read());, +        assertEquals(-1, in.read());, +        long elapsedNanos = System.nanoTime() - startNanos;, +        long elapsedMillis = NANOSECONDS.toMillis(elapsedNanos);, +, +        assertTrue(String.format("Request + Response: %sms", elapsedMillis), elapsedMillis >= 1000);, +        assertTrue(String.format("Request + Response: %sms", elapsedMillis), elapsedMillis <= 1100);, +    }]