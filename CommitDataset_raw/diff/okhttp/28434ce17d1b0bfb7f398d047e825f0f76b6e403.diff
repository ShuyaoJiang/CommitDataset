[+++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/okhttp-tests/pom.xml, +++ b/checkstyle.xml, +    <module name="MethodLength"/>, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CertificatePinnerTest.java, +import java.util.Set;, +import okio.ByteString;, +import static com.squareup.okhttp.TestUtil.setOf;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +  static ByteString keypairACertificate1PinBase64;, +  static ByteString keypairBCertificate1PinBase64;, +, +  static KeyPair keyPairC;, +  static X509Certificate keypairCCertificate1;, +  static String keypairCCertificate1Pin;, +      keypairACertificate1PinBase64 = pinToBase64(keypairACertificate1Pin);, +      keypairBCertificate1PinBase64 = pinToBase64(keypairBCertificate1Pin);, +, +      keyPairC = sslContextBuilder.generateKeyPair();, +      keypairCCertificate1 = sslContextBuilder.selfSignedCertificate(keyPairC, "1");, +      keypairCCertificate1Pin = CertificatePinner.pin(keypairCCertificate1);, +  static ByteString pinToBase64(String pin) {, +    return ByteString.decodeBase64(pin.substring("sha1/".length()));, +  }, +, +, +  @Test public void successfulCheckForWildcardHostname() throws Exception {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("*.example.com", keypairACertificate1Pin), +        .build();, +, +    certificatePinner.check("a.example.com", keypairACertificate1);, +  }, +, +  @Test public void successfulMatchAcceptsAnyMatchingCertificateForWildcardHostname() throws Exception {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("*.example.com", keypairBCertificate1Pin), +        .build();, +, +    certificatePinner.check("a.example.com", keypairACertificate1, keypairBCertificate1);, +  }, +, +  @Test public void unsuccessfulCheckForWildcardHostname() throws Exception {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("*.example.com", keypairACertificate1Pin), +        .build();, +, +    try {, +      certificatePinner.check("a.example.com", keypairBCertificate1);, +      fail();, +    } catch (SSLPeerUnverifiedException expected) {, +    }, +  }, +, +  @Test public void multipleCertificatesForOneWildcardHostname() throws Exception {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("*.example.com", keypairACertificate1Pin, keypairBCertificate1Pin), +        .build();, +, +    certificatePinner.check("a.example.com", keypairACertificate1);, +    certificatePinner.check("a.example.com", keypairBCertificate1);, +  }, +, +  @Test public void successfulCheckForOneHostnameWithWildcardAndDirectCertificate() throws Exception {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("*.example.com", keypairACertificate1Pin), +        .add("a.example.com", keypairBCertificate1Pin), +        .build();, +, +    certificatePinner.check("a.example.com", keypairACertificate1);, +    certificatePinner.check("a.example.com", keypairBCertificate1);, +  }, +, +  @Test public void unsuccessfulCheckForOneHostnameWithWildcardAndDirectCertificate() throws Exception {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("*.example.com", keypairACertificate1Pin), +        .add("a.example.com", keypairBCertificate1Pin), +        .build();, +, +    try {, +      certificatePinner.check("a.example.com", keypairCCertificate1);, +      fail();, +    } catch (SSLPeerUnverifiedException expected) {, +    }, +  }, +, +  @Test public void successfulFindMatchingPins() {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("first.com", keypairACertificate1Pin, keypairBCertificate1Pin), +        .add("second.com", keypairCCertificate1Pin), +        .build();, +, +    Set<ByteString> expectedPins = setOf(keypairACertificate1PinBase64, keypairBCertificate1PinBase64);, +    Set<ByteString> matchedPins  = certificatePinner.findMatchingPins("first.com");, +]