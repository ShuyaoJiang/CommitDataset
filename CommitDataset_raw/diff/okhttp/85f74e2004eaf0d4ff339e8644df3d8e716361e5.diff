[+++ b/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java, +import okhttp3.internal.URLFilter;, +++ b/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java, +import okhttp3.internal.URLFilter;, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +  private CertificatePinner(List<Pin> pins, CertificateChainCleaner certificateChainCleaner) {, +    this.pins = pins;, +    this.certificateChainCleaner = certificateChainCleaner;, +  /** Returns a certificate pinner that uses {@code certificateChainCleaner}. */, +  CertificatePinner withCertificateChainCleaner(CertificateChainCleaner certificateChainCleaner) {, +    return this.certificateChainCleaner != certificateChainCleaner, +        ? new CertificatePinner(pins, certificateChainCleaner), +        : this;, +      return new CertificatePinner(Util.immutableList(pins), null);, +++ b/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java, +import okhttp3.internal.URLFilter;, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +  private CertificatePinner(List<Pin> pins, CertificateChainCleaner certificateChainCleaner) {, +    this.pins = pins;, +    this.certificateChainCleaner = certificateChainCleaner;, +  /** Returns a certificate pinner that uses {@code certificateChainCleaner}. */, +  CertificatePinner withCertificateChainCleaner(CertificateChainCleaner certificateChainCleaner) {, +    return this.certificateChainCleaner != certificateChainCleaner, +        ? new CertificatePinner(pins, certificateChainCleaner), +        : this;, +      return new CertificatePinner(Util.immutableList(pins), null);, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +import java.security.KeyStore;, +import java.util.Arrays;, +import javax.net.ssl.TrustManager;, +import javax.net.ssl.TrustManagerFactory;, +    } else {, +      X509TrustManager trustManager = systemDefaultTrustManager();, +      this.sslSocketFactory = systemDefaultSslSocketFactory(trustManager);, +      this.certificateChainCleaner = CertificateChainCleaner.get(trustManager);, +, +    this.certificatePinner = builder.certificatePinner.withCertificateChainCleaner(, +        certificateChainCleaner);, +  private X509TrustManager systemDefaultTrustManager() {, +    try {, +      TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(, +          TrustManagerFactory.getDefaultAlgorithm());, +      trustManagerFactory.init((KeyStore) null);, +      TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();, +      if (trustManagers.length != 1 || !(trustManagers[0] instanceof X509TrustManager)) {, +        throw new IllegalStateException("Unexpected default trust managers:", +            + Arrays.toString(trustManagers));, +      }, +      return (X509TrustManager) trustManagers[0];, +    } catch (GeneralSecurityException e) {, +      throw new AssertionError(); // The system has no TLS. Just give up., +    }, +  }, +, +  private SSLSocketFactory systemDefaultSslSocketFactory(X509TrustManager trustManager) {, +    try {, +      SSLContext sslContext = SSLContext.getInstance("TLS");, +      sslContext.init(null, new TrustManager[] { trustManager }, null);, +      return sslContext.getSocketFactory();, +    } catch (GeneralSecurityException e) {, +      throw new AssertionError(); // The system has no TLS. Just give up., +    }, +  }, +, +     * Sets the socket factory used to secure HTTPS connections. If unset, the system default will, +     * be used., +     * @deprecated {@code SSLSocketFactory} does not expose its {@link X509TrustManager}, which is, +     *     a field that OkHttp needs to build a clean certificate chain. This method instead must, +     *     use reflection to extract the trust manager. Applications should prefer to call {@link, +     *     #sslSocketFactory(SSLSocketFactory, X509TrustManager)}, which avoids such reflection., +      X509TrustManager trustManager = Platform.get().trustManager(sslSocketFactory);, +      if (trustManager == null) {, +        throw new IllegalStateException("Unable to extract the trust manager on " + Platform.get(), +            + ", sslSocketFactory is " + sslSocketFactory.getClass());, +      }, +      this.certificateChainCleaner = CertificateChainCleaner.get(trustManager);, +      return this;, +    }, +, +    /**, +     * Sets the socket factory and trust manager used to secure HTTPS connections. If unset, the, +     * system defaults will be used., +     *, +     * <p>Most applications should not call this method, and instead use the system defaults. Those, +     * classes include special optimizations that can be lost if the implementations are decorated., +     *, +     * <p>If necessary, you can create and configure the defaults yourself with the following code:, +     *, +     * <pre>   {@code, +     *, +     *   TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(, +     *       TrustManagerFactory.getDefaultAlgorithm());, +     *   trustManagerFactory.init((KeyStore) null);, +     *   TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();, +     *   if (trustManagers.length != 1 || !(trustManagers[0] instanceof X509TrustManager)) {, +     *     throw new IllegalStateException("Unexpected default trust managers:", +     *         + Arrays.toString(trustManagers));, +     *   }, +     *   X509TrustManager trustManager = (X509TrustManager) trustManagers[0];, +     *]