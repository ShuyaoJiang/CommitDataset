[+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import okio.GzipSource;, +      } else if (bodyHasUnknownEncoding(request.headers())) {, +      } else if (bodyHasUnknownEncoding(response.headers())) {, +        Long gzippedLength = null;, +        if ("gzip".equalsIgnoreCase(headers.get("Content-Encoding"))) {, +          gzippedLength = buffer.size();, +          GzipSource gzippedResponseBody = null;, +          try {, +            gzippedResponseBody = new GzipSource(buffer.clone());, +            buffer = new Buffer();, +            buffer.writeAll(gzippedResponseBody);, +          } finally {, +            if (gzippedResponseBody != null) {, +              gzippedResponseBody.close();, +            }, +          }, +        }, +, +        if (gzippedLength != null) {, +            logger.log("<-- END HTTP (" + buffer.size() + "-byte, ", +                + gzippedLength + "-gzipped-byte body)");, +        } else {, +    }, +  private boolean bodyHasUnknownEncoding(Headers headers) {, +    return contentEncoding != null, +        && !contentEncoding.equalsIgnoreCase("identity"), +        && !contentEncoding.equalsIgnoreCase("gzip");, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import okio.GzipSource;, +      } else if (bodyHasUnknownEncoding(request.headers())) {, +      } else if (bodyHasUnknownEncoding(response.headers())) {, +        Long gzippedLength = null;, +        if ("gzip".equalsIgnoreCase(headers.get("Content-Encoding"))) {, +          gzippedLength = buffer.size();, +          GzipSource gzippedResponseBody = null;, +          try {, +            gzippedResponseBody = new GzipSource(buffer.clone());, +            buffer = new Buffer();, +            buffer.writeAll(gzippedResponseBody);, +          } finally {, +            if (gzippedResponseBody != null) {, +              gzippedResponseBody.close();, +            }, +          }, +        }, +, +        if (gzippedLength != null) {, +            logger.log("<-- END HTTP (" + buffer.size() + "-byte, ", +                + gzippedLength + "-gzipped-byte body)");, +        } else {, +    }, +  private boolean bodyHasUnknownEncoding(Headers headers) {, +    return contentEncoding != null, +        && !contentEncoding.equalsIgnoreCase("identity"), +        && !contentEncoding.equalsIgnoreCase("gzip");, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +import okhttp3.ResponseBody;, +  @Test public void bodyResponseGzipEncoded() throws IOException {, +, +    ResponseBody responseBody = response.body();, +    assertEquals("Expected response body to be valid","Hello, Hello, Hello", responseBody.string());, +    responseBody.close();, +        .assertLogEqual(""), +        .assertLogEqual("Hello, Hello, Hello"), +        .assertLogEqual("<-- END HTTP (19-byte, 29-gzipped-byte body)"), +  @Test public void bodyResponseUnknownEncoded() throws IOException {, +      setLevel(Level.BODY);, +, +      server.enqueue(new MockResponse(), +          // It's invalid to return this if not requested, but the server might anyway, +          .setHeader("Content-Encoding", "br"), +          .setHeader("Content-Type", PLAIN), +          .setBody(new Buffer().write(ByteString.decodeBase64(, +              "iwmASGVsbG8sIEhlbGxvLCBIZWxsbwoD"))));, +      Response response = client.newCall(request().build()).execute();, +      response.body().close();, +, +      networkLogs, +          .assertLogEqual("--> GET " + url + " http/1.1"), +          .assertLogEqual("Host: " + host), +          .assertLogEqual("Connection: Keep-Alive"), +          .assertLogEqual("Accept-Encoding: gzip"), +          .assertLogMatch("User-Agent: okhttp/.+"), +          .assertLogEqual("--> END GET"), +          .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)"), +          .assertLogEqual("Content-Encoding: br"), +          .assertLogEqual("Content-Type: text/plain; charset=utf-8"), +          .assertLogMatch("Content-Length: \\d+"), +          .assertLogEqual("<-- END HTTP (encoded body omitted)"), +          .assertNoMoreLogs();, +, +      applicationLogs, +          .assertLogEqual("--> GET " + url), +          .assertLogEqual("--> END GET"), +          .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)"), +          .assertLogEqual("Content-Encoding: br"), +          .assertLogEqual("Content-Type: text/plain; charset=utf-8"), +          .assertLogMatch("Content-Length: \\d+"), +          .assertLogEqual("<-- END HTTP (encoded body omitted)")]