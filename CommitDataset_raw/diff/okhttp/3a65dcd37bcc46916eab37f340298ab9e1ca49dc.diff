[+++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/AndroidInternal.java, + * Back doors to enable the use of OkHttp within the Android platform libraries. OkHttp is used to, + * provide the default {@link java.net.HttpURLConnection} / {@link javax.net.ssl.HttpsURLConnection}, + * implementation including support for a custom {@link ResponseCache}., +    OkHttpClient client = okUrlFactory.client();, +    if (responseCache instanceof OkCacheContainer) {, +      // Avoid adding layers of wrappers. Rather than wrap the ResponseCache in yet another layer to, +      // make the ResponseCache look like an InternalCache, we can unwrap the Cache instead., +      // This means that Cache stats will be correctly updated., +      OkCacheContainer okCacheContainer = (OkCacheContainer) responseCache;, +      client.setCache(okCacheContainer.getCache());, +    } else {, +      client.setInternalCache(responseCache != null ? new CacheAdapter(responseCache) : null);, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/AndroidInternal.java, + * Back doors to enable the use of OkHttp within the Android platform libraries. OkHttp is used to, + * provide the default {@link java.net.HttpURLConnection} / {@link javax.net.ssl.HttpsURLConnection}, + * implementation including support for a custom {@link ResponseCache}., +    OkHttpClient client = okUrlFactory.client();, +    if (responseCache instanceof OkCacheContainer) {, +      // Avoid adding layers of wrappers. Rather than wrap the ResponseCache in yet another layer to, +      // make the ResponseCache look like an InternalCache, we can unwrap the Cache instead., +      // This means that Cache stats will be correctly updated., +      OkCacheContainer okCacheContainer = (OkCacheContainer) responseCache;, +      client.setCache(okCacheContainer.getCache());, +    } else {, +      client.setInternalCache(responseCache != null ? new CacheAdapter(responseCache) : null);, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/AndroidShimResponseCache.java, +/*, + * Copyright (C) 2015 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import com.squareup.okhttp.internal.huc.JavaApiConverter;, +, +import java.io.File;, +import java.io.IOException;, +import java.net.CacheRequest;, +import java.net.CacheResponse;, +import java.net.ResponseCache;, +import java.net.URI;, +import java.net.URLConnection;, +import java.util.List;, +import java.util.Map;, +, +/**, + * A class provided for use by Android so that it can continue supporting a {@link ResponseCache}, + * with stats., + */, +public class AndroidShimResponseCache extends ResponseCache {, +, +  private final Cache delegate;, +, +  private AndroidShimResponseCache(Cache delegate) {, +    this.delegate = delegate;, +  }, +, +  public static AndroidShimResponseCache create(File directory, long maxSize) throws IOException {, +    Cache cache = new Cache(directory, maxSize);, +    return new AndroidShimResponseCache(cache);, +  }, +, +  public boolean isEquivalent(File directory, long maxSize) {, +    Cache installedCache = getCache();, +    return (installedCache.getDirectory().equals(directory), +        && installedCache.getMaxSize() == maxSize, +        && !installedCache.isClosed());, +  }, +, +  public Cache getCache() {, +    return delegate;, +  }, +, +  @Override public CacheResponse get(URI uri, String requestMethod,, +      Map<String, List<String>> requestHeaders) throws IOException {, +    Request okRequest = JavaApiConverter.createOkRequest(uri, requestMethod, requestHeaders);, +    Response okResponse = delegate.internalCache.get(okRequest);, +    if (okResponse == null) {, +      return null;, +    }, +    return JavaApiConverter.createJavaCacheResponse(okResponse);, +  }, +, +  @Override public CacheRequest put(URI uri, URLConnection urlConnection) throws IOException {, +    Response okResponse = JavaApiConverter.createOkResponse(uri, urlConnection);, +    com.squareup.okhttp.internal.http.CacheRequest okCacheRequest =, +        delegate.internalCache.put(okResponse);, +    if (okCacheRequest == null) {, +      return null;]