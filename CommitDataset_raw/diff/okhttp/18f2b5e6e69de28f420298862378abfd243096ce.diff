[+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt, +      } else if (requestBody.isDuplex()) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt, +      } else if (requestBody.isDuplex()) {, +++ b/okhttp/src/main/java/okhttp3/Authenticator.kt, +, +    // This lambda conversion is for Kotlin callers expecting a Java SAM (single-abstract-method)., +    @JvmName("-deprecated_Authenticator"), +    inline operator fun invoke(, +      crossinline block: (route: Route?, response: Response) -> Request?, +    ): Authenticator = object: Authenticator {, +      override fun authenticate(route: Route?, response: Response) = block(route, response), +    }, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt, +      } else if (requestBody.isDuplex()) {, +++ b/okhttp/src/main/java/okhttp3/Authenticator.kt, +, +    // This lambda conversion is for Kotlin callers expecting a Java SAM (single-abstract-method)., +    @JvmName("-deprecated_Authenticator"), +    inline operator fun invoke(, +      crossinline block: (route: Route?, response: Response) -> Request?, +    ): Authenticator = object: Authenticator {, +      override fun authenticate(route: Route?, response: Response) = block(route, response), +    }, +++ b/okhttp/src/main/java/okhttp3/Call.kt, +  fun isExecuted(): Boolean, +  fun isCanceled(): Boolean, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt, +      } else if (requestBody.isDuplex()) {, +++ b/okhttp/src/main/java/okhttp3/Authenticator.kt, +, +    // This lambda conversion is for Kotlin callers expecting a Java SAM (single-abstract-method)., +    @JvmName("-deprecated_Authenticator"), +    inline operator fun invoke(, +      crossinline block: (route: Route?, response: Response) -> Request?, +    ): Authenticator = object: Authenticator {, +      override fun authenticate(route: Route?, response: Response) = block(route, response), +    }, +++ b/okhttp/src/main/java/okhttp3/Call.kt, +  fun isExecuted(): Boolean, +  fun isCanceled(): Boolean, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.kt, +  // This lambda conversion is for Kotlin callers expecting a Java SAM (single-abstract-method)., +  @JvmName("-deprecated_setIdleCallback"), +  inline fun setIdleCallback(crossinline idleCallback: () -> Unit) =, +      setIdleCallback(Runnable { idleCallback() }), +, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt, +      } else if (requestBody.isDuplex()) {, +++ b/okhttp/src/main/java/okhttp3/Authenticator.kt, +, +    // This lambda conversion is for Kotlin callers expecting a Java SAM (single-abstract-method)., +    @JvmName("-deprecated_Authenticator"), +    inline operator fun invoke(, +      crossinline block: (route: Route?, response: Response) -> Request?, +    ): Authenticator = object: Authenticator {, +      override fun authenticate(route: Route?, response: Response) = block(route, response), +    }, +++ b/okhttp/src/main/java/okhttp3/Call.kt, +  fun isExecuted(): Boolean, +  fun isCanceled(): Boolean, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.kt, +  // This lambda conversion is for Kotlin callers expecting a Java SAM (single-abstract-method)., +  @JvmName("-deprecated_setIdleCallback"), +  inline fun setIdleCallback(crossinline idleCallback: () -> Unit) =, +      setIdleCallback(Runnable { idleCallback() }), +, +++ b/okhttp/src/main/java/okhttp3/Dns.kt, +, +    // This lambda conversion is for Kotlin callers expecting a Java SAM (single-abstract-method)., +    @JvmName("-deprecated_Dns"), +    inline operator fun invoke(, +      crossinline block: (String) -> List<InetAddress>, +    ): Dns = object : Dns {, +      override fun lookup(hostname: String): List<InetAddress> = block(hostname), +    }, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt, +      } else if (requestBody.isDuplex()) {, +++ b/okhttp/src/main/java/okhttp3/Authenticator.kt, +, +    // This lambda conversion is for Kotlin callers expecting a Java SAM (single-abstract-method)., +    @JvmName("-deprecated_Authenticator"), +    inline operator fun invoke(, +      crossinline block: (route: Route?, response: Response) -> Request?, +    ): Authenticator = object: Authenticator {, +      override fun authenticate(route: Route?, response: Response) = block(route, response), +    }, +++ b/okhttp/src/main/java/okhttp3/Call.kt, +  fun isExecuted(): Boolean, +  fun isCanceled(): Boolean, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.kt, +  // This lambda conversion is for Kotlin callers expecting a Java SAM (single-abstract-method)., +  @JvmName("-deprecated_setIdleCallback"), +  inline fun setIdleCallback(crossinline idleCallback: () -> Unit) =, +      setIdleCallback(Runnable { idleCallback() }), +, +++ b/okhttp/src/main/java/okhttp3/Dns.kt, +, +    // This lambda conversion is for Kotlin callers expecting a Java SAM (single-abstract-method)., +    @JvmName("-deprecated_Dns")]