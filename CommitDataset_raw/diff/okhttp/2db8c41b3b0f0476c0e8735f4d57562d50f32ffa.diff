[+++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +import okio.Buffer;, +    return agent != null ? toHumanReadableAscii(agent) : Version.userAgent();, +  }, +, +  /** Returns {@code s} with control characters and non-ASCII characters replaced with '?'. */, +  private static String toHumanReadableAscii(String s) {, +    for (int i = 0, length = s.length(), c; i < length; i += Character.charCount(c)) {, +      c = s.codePointAt(i);, +      if (c > '\u001f' && c < '\u007f') continue;, +, +      Buffer buffer = new Buffer();, +      buffer.writeUtf8(s, 0, i);, +      buffer.writeUtf8CodePoint('?');, +      for (int j = i + Character.charCount(c); j < length; j += Character.charCount(c)) {, +        c = s.codePointAt(j);, +        buffer.writeUtf8CodePoint(c > '\u001f' && c < '\u007f' ? c : '?');, +      }, +      return buffer.readUtf8();, +    }, +    return s;, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +import okio.Buffer;, +    return agent != null ? toHumanReadableAscii(agent) : Version.userAgent();, +  }, +, +  /** Returns {@code s} with control characters and non-ASCII characters replaced with '?'. */, +  private static String toHumanReadableAscii(String s) {, +    for (int i = 0, length = s.length(), c; i < length; i += Character.charCount(c)) {, +      c = s.codePointAt(i);, +      if (c > '\u001f' && c < '\u007f') continue;, +, +      Buffer buffer = new Buffer();, +      buffer.writeUtf8(s, 0, i);, +      buffer.writeUtf8CodePoint('?');, +      for (int j = i + Character.charCount(c); j < length; j += Character.charCount(c)) {, +        c = s.codePointAt(j);, +        buffer.writeUtf8CodePoint(c > '\u001f' && c < '\u007f' ? c : '?');, +      }, +      return buffer.readUtf8();, +    }, +    return s;, +++ b/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java, +import java.io.InputStream;, +import okhttp3.mockwebserver.RecordedRequest;, +import okhttp3.mockwebserver.internal.tls.SslClient;, +  @Test public void usesValidHeaderValueForDefaultUserAgent() throws Exception {, +    String userAgent =  "🍩 " + "\u001F" + ('\u001f' + 1) + ('\u007f' - 1)+ '\u007f' + " 🍩";, +    String expected = "? ?" + ('\u001f' + 1) + ('\u007f' - 1) + "? ?";, +, +    System.setProperty("http.agent", userAgent);, +    server.enqueue(new MockResponse().setResponseCode(200));, +    InputStream inputStream = factory.open(server.url("/").url()).getInputStream();, +    long skipped;, +    do {, +      skipped = inputStream.skip(Long.MAX_VALUE);, +    } while (skipped != 0);, +    RecordedRequest recordedRequest = server.takeRequest();, +    assertEquals(expected, recordedRequest.getHeader("User-Agent"));, +  }, +, +  @Test public void usesSimpleDefaultUserAgentWithoutModification() throws Exception {, +    String userAgent = "OkHttp";, +    String expected = "OkHttp";, +, +    System.setProperty("http.agent", userAgent);, +    server.enqueue(new MockResponse().setResponseCode(200));, +    InputStream inputStream = factory.open(server.url("/").url()).getInputStream();, +    long skipped;, +    do {, +      skipped = inputStream.skip(Long.MAX_VALUE);, +    } while (skipped != 0);, +    RecordedRequest recordedRequest = server.takeRequest();, +    assertEquals(expected, recordedRequest.getHeader("User-Agent"));, +  }, +, +  @Test public void handlesBadUnicodeStringsInDefaultUserAgent() throws Exception {, +    String userAgent =  "🔊".substring(0, 1);, +    String expected = "?";, +, +    System.setProperty("http.agent", userAgent);, +    server.enqueue(new MockResponse().setResponseCode(200));, +    InputStream inputStream = factory.open(server.url("/").url()).getInputStream();, +    long skipped;, +    do {, +      skipped = inputStream.skip(Long.MAX_VALUE);, +    } while (skipped != 0);, +    RecordedRequest recordedRequest = server.takeRequest();, +    assertEquals(expected, recordedRequest.getHeader("User-Agent"));, +  }, +, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +import okio.Buffer;, +    return agent != null ? toHumanReadableAscii(agent) : Version.userAgent();, +  }, +, +  /** Returns {@code s} with control characters and non-ASCII characters replaced with '?'. */, +  private static String toHumanReadableAscii(String s) {, +    for (int i = 0, length = s.length(), c; i < length; i += Character.charCount(c)) {, +      c = s.codePointAt(i);]