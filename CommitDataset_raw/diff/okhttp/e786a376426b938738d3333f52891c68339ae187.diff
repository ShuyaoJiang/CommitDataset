[+++ b/okhttp-tests/src/test/java/okhttp3/CipherSuiteTest.java, +import static org.junit.Assert.assertArrayEquals;, +   * On the Oracle JVM some older cipher suites have the "SSL_" prefix and others have the "TLS_", +   * prefix. On the IBM JVM all cipher suites have the "SSL_" prefix., +   *, +   * <p>Prior to OkHttp 3.3.1 we accepted either form and consider them equivalent. And since OkHttp, +   * 3.7.0 this is also true. But OkHttp 3.3.1 through 3.6.0 treated these as different., +    assertEquals(, +    assertEquals(, +    assertEquals(, +, +  @Test public void applyIntersectionRetainsSslPrefixes() throws Exception {, +    FakeSslSocket socket = new FakeSslSocket();, +    socket.setEnabledProtocols(new String[] { "TLSv1" });, +    socket.setSupportedCipherSuites(new String[] { "SSL_A", "SSL_B", "SSL_C", "SSL_D", "SSL_E" });, +    socket.setEnabledCipherSuites(new String[] { "SSL_A", "SSL_B", "SSL_C" });, +, +    ConnectionSpec connectionSpec = new ConnectionSpec.Builder(true), +        .tlsVersions(TlsVersion.TLS_1_0), +        .cipherSuites("TLS_A", "TLS_C", "TLS_E"), +        .build();, +    connectionSpec.apply(socket, false);, +, +    assertArrayEquals(new String[] { "SSL_A", "SSL_C" }, socket.enabledCipherSuites);, +  }, +, +  @Test public void applyIntersectionRetainsTlsPrefixes() throws Exception {, +    FakeSslSocket socket = new FakeSslSocket();, +    socket.setEnabledProtocols(new String[] { "TLSv1" });, +    socket.setSupportedCipherSuites(new String[] { "TLS_A", "TLS_B", "TLS_C", "TLS_D", "TLS_E" });, +    socket.setEnabledCipherSuites(new String[] { "TLS_A", "TLS_B", "TLS_C" });, +, +    ConnectionSpec connectionSpec = new ConnectionSpec.Builder(true), +        .tlsVersions(TlsVersion.TLS_1_0), +        .cipherSuites("SSL_A", "SSL_C", "SSL_E"), +        .build();, +    connectionSpec.apply(socket, false);, +, +    assertArrayEquals(new String[] { "TLS_A", "TLS_C" }, socket.enabledCipherSuites);, +  }, +, +  @Test public void applyIntersectionAddsSslScsvForFallback() throws Exception {, +    FakeSslSocket socket = new FakeSslSocket();, +    socket.setEnabledProtocols(new String[] { "TLSv1" });, +    socket.setSupportedCipherSuites(new String[] { "SSL_A", "SSL_FALLBACK_SCSV" });, +    socket.setEnabledCipherSuites(new String[] { "SSL_A" });, +, +    ConnectionSpec connectionSpec = new ConnectionSpec.Builder(true), +        .tlsVersions(TlsVersion.TLS_1_0), +        .cipherSuites("SSL_A"), +        .build();, +    connectionSpec.apply(socket, true);, +, +    assertArrayEquals(new String[] { "SSL_A", "SSL_FALLBACK_SCSV" }, socket.enabledCipherSuites);, +  }, +, +  @Test public void applyIntersectionAddsTlsScsvForFallback() throws Exception {, +    FakeSslSocket socket = new FakeSslSocket();, +    socket.setEnabledProtocols(new String[] { "TLSv1" });, +    socket.setSupportedCipherSuites(new String[] { "TLS_A", "TLS_FALLBACK_SCSV" });, +    socket.setEnabledCipherSuites(new String[] { "TLS_A" });, +, +    ConnectionSpec connectionSpec = new ConnectionSpec.Builder(true), +        .tlsVersions(TlsVersion.TLS_1_0), +        .cipherSuites("TLS_A"), +        .build();, +    connectionSpec.apply(socket, true);, +, +    assertArrayEquals(new String[] { "TLS_A", "TLS_FALLBACK_SCSV" }, socket.enabledCipherSuites);, +  }, +, +  @Test public void applyIntersectionToProtocolVersion() throws Exception {, +    FakeSslSocket socket = new FakeSslSocket();, +    socket.setEnabledProtocols(new String[] { "TLSv1", "TLSv1.1", "TLSv1.2" });, +    socket.setSupportedCipherSuites(new String[] { "TLS_A" });, +    socket.setEnabledCipherSuites(new String[] { "TLS_A" });, +, +    ConnectionSpec connectionSpec = new ConnectionSpec.Builder(true), +        .tlsVersions(TlsVersion.TLS_1_1, TlsVersion.TLS_1_2, TlsVersion.TLS_1_3), +        .cipherSuites("TLS_A"), +        .build();, +    connectionSpec.apply(socket, false);, +, +    assertArrayEquals(new String[] { "TLSv1.1", "TLSv1.2" }, socket.enabledProtocols);, +  }, +, +  static final class FakeSslSocket extends DelegatingSSLSocket {, +    private String[] enabledProtocols;, +    private String[] supportedCipherSuites;, +    private String[] enabledCipherSuites;, +, +    FakeSslSocket() {, +      super(null);, +    }, +, +    @Override public String[] getEnabledProtocols() {, +      return enabledProtocols;, +    }, +, +    @Override public void setEnabledProtocols(String[] enabledProtocols) {]