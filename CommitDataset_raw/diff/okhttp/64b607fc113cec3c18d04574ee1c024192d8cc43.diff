[+++ b/mockwebserver/README.md, +```, +```, +```, +```, +```, +++ b/mockwebserver/README.md, +```, +```, +```, +```, +```, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/README.md, +```, +```, +```, +```, +```, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +++ b/mockwebserver/README.md, +```, +```, +```, +```, +```, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +    assertEquals(0, request.body().contentLength());, +++ b/mockwebserver/README.md, +```, +```, +```, +```, +```, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +    assertEquals(0, request.body().contentLength());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  @Test public void postBodyRetransmittedAfterAuthorizationFail() throws Exception {, +    postBodyRetransmittedAfterAuthorizationFail("abc");, +  }, +, +  @Test public void postBodyRetransmittedAfterAuthorizationFail_SPDY_3() throws Exception {, +    enableProtocol(Protocol.SPDY_3);, +    postBodyRetransmittedAfterAuthorizationFail("abc");, +  }, +, +  @Test public void postBodyRetransmittedAfterAuthorizationFail_HTTP_2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    postBodyRetransmittedAfterAuthorizationFail("abc");, +  }, +, +  /** Don't explode when resending an empty post. https://github.com/square/okhttp/issues/1131 */, +  @Test public void postEmptyBodyRetransmittedAfterAuthorizationFail() throws Exception {, +    postBodyRetransmittedAfterAuthorizationFail("");, +  }, +, +  @Test public void postEmptyBodyRetransmittedAfterAuthorizationFail_SPDY_3() throws Exception {, +    enableProtocol(Protocol.SPDY_3);, +    postBodyRetransmittedAfterAuthorizationFail("");, +  }, +, +  @Test public void postEmptyBodyRetransmittedAfterAuthorizationFail_HTTP_2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    postBodyRetransmittedAfterAuthorizationFail("");, +  }, +, +  private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exception {, +    server.enqueue(new MockResponse().setResponseCode(401));, +    server.enqueue(new MockResponse());, +    server.play();, +, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .method("POST", RequestBody.create(null, body)), +        .build();, +, +    String credential = Credentials.basic("jesse", "secret");, +    client.setAuthenticator(new RecordingOkAuthenticator(credential));, +, +    Response response = client.newCall(request).execute();, +    assertEquals(200, response.code());, +, +    RecordedRequest recordedRequest1 = server.takeRequest();, +    assertEquals("POST", recordedRequest1.getMethod());, +    assertEquals(body, recordedRequest1.getUtf8Body());, +    assertNull(recordedRequest1.getHeader("Authorization"));, +, +    RecordedRequest recordedRequest2 = server.takeRequest();, +    assertEquals("POST", recordedRequest2.getMethod());, +    assertEquals(body, recordedRequest2.getUtf8Body());, +    assertEquals(credential, recordedRequest2.getHeader("Authorization"));, +  }, +, +++ b/mockwebserver/README.md, +```]