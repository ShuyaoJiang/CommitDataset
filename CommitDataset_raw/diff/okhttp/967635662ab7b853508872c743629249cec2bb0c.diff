[+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +import java.util.Arrays.asList, +      return bootstrapDnsHosts(asList(*bootstrapDnsHosts)), +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +import java.util.Arrays.asList, +      return bootstrapDnsHosts(asList(*bootstrapDnsHosts)), +++ b/okhttp/build.gradle, +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +import java.util.Arrays.asList, +      return bootstrapDnsHosts(asList(*bootstrapDnsHosts)), +++ b/okhttp/build.gradle, +++ b/okhttp/src/main/java/okhttp3/Address.kt, +    return other is Address, +        && equalsNonHost(other), +    return this.dns == that.dns, +        && this.url().port() == that.url().port(), +    return "Address{" +, +        "${url.host()}:${url.port()}, " +, +        (if (proxy != null) "proxy=$proxy" else "proxySelector=$proxySelector") +, +        "}", +++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt, +import java.util.Arrays.asList, +      return bootstrapDnsHosts(asList(*bootstrapDnsHosts)), +++ b/okhttp/build.gradle, +++ b/okhttp/src/main/java/okhttp3/Address.kt, +    return other is Address, +        && equalsNonHost(other), +    return this.dns == that.dns, +        && this.url().port() == that.url().port(), +    return "Address{" +, +        "${url.host()}:${url.port()}, " +, +        (if (proxy != null) "proxy=$proxy" else "proxySelector=$proxySelector") +, +        "}", +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.security.cert.Certificate;, +import java.security.cert.X509Certificate;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.Objects;, +import java.util.Set;, +import javax.annotation.Nullable;, +import javax.net.ssl.SSLPeerUnverifiedException;, +import okhttp3.internal.tls.CertificateChainCleaner;, +import okio.ByteString;, +, +import static java.util.Arrays.asList;, +, +/**, + * Constrains which certificates are trusted. Pinning certificates defends against attacks on, + * certificate authorities. It also prevents connections through man-in-the-middle certificate, + * authorities either known or unknown to the application's user., + *, + * <p>This class currently pins a certificate's Subject Public Key Info as described on <a, + * href="http://goo.gl/AIx3e5">Adam Langley's Weblog</a>. Pins are either base64 SHA-256 hashes as, + * in <a href="http://tools.ietf.org/html/rfc7469">HTTP Public Key Pinning (HPKP)</a> or SHA-1, + * base64 hashes as in Chromium's <a href="http://goo.gl/XDh6je">static certificates</a>., + *, + * <h3>Setting up Certificate Pinning</h3>, + *, + * <p>The easiest way to pin a host is turn on pinning with a broken configuration and read the, + * expected configuration when the connection fails. Be sure to do this on a trusted network, and, + * without man-in-the-middle tools like <a href="http://charlesproxy.com">Charles</a> or <a, + * href="http://fiddlertool.com">Fiddler</a>., + *, + * <p>For example, to pin {@code https://publicobject.com}, start with a broken, + * configuration: <pre>   {@code, + *, + *     String hostname = "publicobject.com";, + *     CertificatePinner certificatePinner = new CertificatePinner.Builder(), + *         .add(hostname, "sha256/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="), + *         .build();, + *     OkHttpClient client = OkHttpClient.Builder(), + *         .certificatePinner(certificatePinner), + *         .build();, + *, + *     Request request = new Request.Builder(), + *         .url("https://" + hostname), + *         .build();, + *     client.newCall(request).execute();, + * }</pre>, + *]