[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          logger.log(Level.WARNING, "MockWebServer connection failed", e);, +        // This gnarly block of code will release all sockets and all thread,, +        // even if any close fails., +    if (serverSocket == null) return;, +, +    serverSocket = null;, +          logger.log(Level.WARNING, "MockWebServer connection failed", e);, +          logger.warning("MockWebServer connection didn't make a request");, +          logger.info("Received request: " + request + " and responded: " + response);, +        logger.info("Received request: " + request + " and responded: " + response, +            + " protocol is " + protocol.toString());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +          logger.log(Level.WARNING, "MockWebServer connection failed", e);, +        // This gnarly block of code will release all sockets and all thread,, +        // even if any close fails., +    if (serverSocket == null) return;, +, +    serverSocket = null;, +          logger.log(Level.WARNING, "MockWebServer connection failed", e);, +          logger.warning("MockWebServer connection didn't make a request");, +          logger.info("Received request: " + request + " and responded: " + response);, +        logger.info("Received request: " + request + " and responded: " + response, +            + " protocol is " + protocol.toString());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import com.squareup.okhttp.mockwebserver.MockWebServer;, +, +import static java.lang.Thread.UncaughtExceptionHandler;, +  private MockWebServer server = new MockWebServer();, +  private MockWebServer server2 = new MockWebServer();, +  private UncaughtExceptionHandler defaultUncaughtExceptionHandler;, +, +  private static final SSLContext sslContext = SslContextBuilder.localhost();, +    server = new MockWebServer();, +    server2 = new MockWebServer();, +    defaultUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();, +    server.shutdown();, +    server2.shutdown();, +    Thread.setDefaultUncaughtExceptionHandler(defaultUncaughtExceptionHandler);, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.play();, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.play();, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.play();, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.play();, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.play();, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.play();, +    server.play();, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.play();, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.play();, +      certificatePinnerBuilder.add(server.getHostName(), CertificatePinner.pin(certificate));, +    server.useHttps(sslContext.getSocketFactory(), false);, +    server.play();, +        .add(server.getHostName(), "sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=") // publicobject.com's cert., +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +    server.play();, +, +    server.play();, +    server.play();, +    server2.play();, +, +    server.play();, +    cookie.setDomain(server.getCookieDomain());, +        + "c=\"cookie\";$Path=\"/\";$Domain=\"" + server.getCookieDomain(), +    server2.play();, +, +    server.play();, +    server.play();]