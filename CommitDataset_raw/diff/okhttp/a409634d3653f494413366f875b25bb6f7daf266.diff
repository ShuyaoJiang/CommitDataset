[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +import java.util.NoSuchElementException;, +  @Test public void iterateCache() throws Exception {, +    // Put some responses in the cache., +    server.enqueue(new MockResponse(), +        .setBody("a"));, +    URL urlA = server.getUrl("/a");, +    assertEquals("a", get(urlA).body().string());, +, +    server.enqueue(new MockResponse(), +        .setBody("b"));, +    URL urlB = server.getUrl("/b");, +    assertEquals("b", get(urlB).body().string());, +, +    server.enqueue(new MockResponse(), +        .setBody("c"));, +    URL urlC = server.getUrl("/c");, +    assertEquals("c", get(urlC).body().string());, +, +    // Confirm the iterator returns those responses..., +    Iterator<String> i = cache.urls();, +    assertTrue(i.hasNext());, +    assertEquals(urlA.toString(), i.next());, +    assertTrue(i.hasNext());, +    assertEquals(urlB.toString(), i.next());, +    assertTrue(i.hasNext());, +    assertEquals(urlC.toString(), i.next());, +, +    // ... and nothing else., +    assertFalse(i.hasNext());, +    try {, +      i.next();, +      fail();, +    } catch (NoSuchElementException expected) {, +    }, +  }, +, +  @Test public void iteratorRemoveFromCache() throws Exception {, +    // Put a response in the cache., +    server.enqueue(new MockResponse(), +        .addHeader("Cache-Control: max-age=60"), +        .setBody("a"));, +    URL url = server.getUrl("/a");, +    assertEquals("a", get(url).body().string());, +, +    // Remove it with iteration., +    Iterator<String> i = cache.urls();, +    assertEquals(url.toString(), i.next());, +    i.remove();, +, +    // Confirm that subsequent requests suffer a cache miss., +    server.enqueue(new MockResponse(), +        .setBody("b"));, +    assertEquals("b", get(url).body().string());, +  }, +, +  @Test public void iteratorRemoveWithoutNextThrows() throws Exception {, +    // Put a response in the cache., +    server.enqueue(new MockResponse(), +        .setBody("a"));, +    URL url = server.getUrl("/a");, +    assertEquals("a", get(url).body().string());, +, +    Iterator<String> i = cache.urls();, +    assertTrue(i.hasNext());, +    try {, +      i.remove();, +      fail();, +    } catch (IllegalStateException expected) {, +    }, +  }, +, +  @Test public void iteratorRemoveOncePerCallToNext() throws Exception {, +    // Put a response in the cache., +    server.enqueue(new MockResponse(), +        .setBody("a"));, +    URL url = server.getUrl("/a");, +    assertEquals("a", get(url).body().string());, +, +    Iterator<String> i = cache.urls();, +    assertEquals(url.toString(), i.next());, +    i.remove();, +, +    // Too many calls to remove()., +    try {, +      i.remove();, +      fail();, +    } catch (IllegalStateException expected) {, +    }, +  }, +, +  @Test public void elementEvictedBetweenHasNextAndNext() throws Exception {, +    // Put a response in the cache., +    server.enqueue(new MockResponse(), +        .setBody("a"));, +    URL url = server.getUrl("/a");, +    assertEquals("a", get(url).body().string());, +, +    // The URL will remain available if hasNext() returned true..., +    Iterator<String> i = cache.urls();]