[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +      if (!httpEngine.sameConnection(followUp.url())) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +      if (!httpEngine.sameConnection(followUp.url())) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java, +      if (!engine.sameConnection(followUp.url())) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +      if (!httpEngine.sameConnection(followUp.url())) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java, +      if (!engine.sameConnection(followUp.url())) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +        // When redirecting across hosts, drop all authentication headers. This, +        // is potentially annoying to the application layer since they have no, +        // way to retain them., +        if (!sameConnection(url)) {, +          requestBuilder.removeHeader("Authorization");, +        }, +, +   * Returns true if an HTTP request for {@code followUp} can reuse the, +   * connection used by this engine., +  public boolean sameConnection(URL followUp) {, +    URL url = userRequest.url();, +    return url.getHost().equals(followUp.getHost()), +        && getEffectivePort(url) == getEffectivePort(followUp), +        && url.getProtocol().equals(followUp.getProtocol());]