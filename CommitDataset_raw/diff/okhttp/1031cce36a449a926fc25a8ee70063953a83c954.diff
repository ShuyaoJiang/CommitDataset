[+++ b/.gitmodules, +[submodule "okhttp-hpacktests/src/test/resources/hpack-test-case"], +	path = okhttp-hpacktests/src/test/resources/hpack-test-case, +	url = git://github.com/http2jp/hpack-test-case.git, +++ b/.gitmodules, +[submodule "okhttp-hpacktests/src/test/resources/hpack-test-case"], +	path = okhttp-hpacktests/src/test/resources/hpack-test-case, +	url = git://github.com/http2jp/hpack-test-case.git, +++ b/CHANGELOG.md, +## Version 2.0.0, +, +This release commits to a stable 2.0 API. Read the 2.0.0-RC1 changes for advice, +on upgrading from 1.x to 2.x., +, +_2014-06-21_, +, + *  **API Change**: Use `IOException` in `Callback.onFailure()`. This is, +    a source-incompatible change, and is different from OkHttp 2.0.0-RC2 which, +    used `Throwable`., + *  Fix: Fixed a caching bug where we weren't storing rewritten request headers, +    like `Accept-Encoding`., + *  Fix: Fixed bugs in handling the SPDY window size. This was stalling certain, +    large downloads, + *  Update the language level to Java 7. (OkHttp requires Android 2.3+ or Java 7+.), +, +## Version 2.0.0-RC2, +, +_2014-06-11_, +, +This update fixes problems in 2.0.0-RC1. Read the 2.0.0-RC1 changes for, +advice on upgrading from 1.x to 2.x., +, + *  Fix: Don't leak connections! There was a regression in 2.0.0-RC1 where, +    connections were neither closed nor pooled., + *  Fix: Revert builder-style return types from OkHttpClient's timeout methods, +    for binary compatibility with OkHttp 1.x., + *  Fix: Don't skip client stream 1 on SPDY/3.1. This fixes SPDY connectivity to, +    `https://google.com`, which doesn't follow the SPDY/3.1 spec!, + *  Fix: Always configure NPN headers. This fixes connectivity to, +    `https://facebook.com` when SPDY and HTTP/2 are both disabled. Otherwise an, +    unexpected NPN response is received and OkHttp crashes., + *  Fix: Write continuation frames when HPACK data is larger than 16383 bytes., + *  Fix: Don't drop uncaught exceptions thrown in async calls., + *  Fix: Throw an exception eagerly when a request body is not legal. Previously, +    we ignored the problem at request-building time, only to crash later with a, +    `NullPointerException`., + *  Fix: Include a backwards-compatible `OkHttp-Response-Source` header with, +    `OkUrlFactory `responses., + *  Fix: Don't include a default User-Agent header in requests made with the Call, +    API. Requests made with OkUrlFactory will continue to have a default user, +    agent., + *  New: Guava-like API to create headers:, +, +    ```, +    Headers headers = Headers.of(name1, value1, name2, value2, ...)., +    ```, +, + *  New: Make the content-type header optional for request bodies., + *  New: `Response.isSuccessful()` is a convenient API to check response codes., + *  New: The response body can now be read outside of the callback. Response, +    bodies must always be closed, otherwise they will leak connections!, + *  New: APIs to create multipart request bodies (`MultipartBuilder`) and form, +    encoding bodies (`FormEncodingBuilder`)., +, +## Version 2.0.0-RC1, +, +_2014-05-23_, +, +OkHttp 2 is designed around a new API that is true to HTTP, with classes for, +requests, responses, headers, and calls. It uses modern Java patterns like, +immutability and chained builders. The API now offers asynchronous callbacks, +in addition to synchronous blocking calls., +, +#### API Changes, +, + *  **New Request and Response types,** each with their own builder. There's also, +    a `RequestBody` class to write the request body to the network and a, +    `ResponseBody` to read the response body from the network. The standalone, +    `Headers` class offers full access to the HTTP headers., +, + *  **Okio dependency added.** OkHttp now depends on, +    [Okio](https://github.com/square/okio), an I/O library that makes it easier, +    to access, store and process data. Using this library internally makes OkHttp, +    faster while consuming less memory. You can write a `RequestBody` as an Okio, +    `BufferedSink` and a `ResponseBody` as an Okio `BufferedSource`. Standard, +    `InputStream` and `OutputStream` access is also available., +, + *  **New Call and Callback types** execute requests and receive their, +    responses. Both types of calls can be canceled via the `Call` or the, +    `OkHttpClient`., +, + *  **URLConnection support has moved to the okhttp-urlconnection module.**, +    If you're upgrading from 1.x, this change will impact you. You will need to, +    add the `okhttp-urlconnection` module to your project and use the, +    `OkUrlFactory` to create new instances of `HttpURLConnection`:, +, +    ```, +    // OkHttp 1.x:, +    HttpURLConnection connection = client.open(url);, +]