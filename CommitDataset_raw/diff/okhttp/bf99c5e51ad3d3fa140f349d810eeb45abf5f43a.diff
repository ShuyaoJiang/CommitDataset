[+++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    int expectedResponseCode = responseCode;, +, +, +    if (responseCode == HttpURLConnection.HTTP_CLIENT_TIMEOUT) {, +      // 408's are a bit of an outlier because we may repeat the request if we encounter this, +      // response code. In this scenario, there are 2 responses: the initial 408 and then the 200, +      // because of the retry. We just want to ensure the initial 408 isn't cached., +      expectedResponseCode = 200;, +      server.enqueue(new MockResponse(), +          .setHeader("Cache-Control", "no-store"), +          .setBody("FGHIJ"));, +    }, +, +    assertEquals(expectedResponseCode, connection.getResponseCode());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    int expectedResponseCode = responseCode;, +, +, +    if (responseCode == HttpURLConnection.HTTP_CLIENT_TIMEOUT) {, +      // 408's are a bit of an outlier because we may repeat the request if we encounter this, +      // response code. In this scenario, there are 2 responses: the initial 408 and then the 200, +      // because of the retry. We just want to ensure the initial 408 isn't cached., +      expectedResponseCode = 200;, +      server.enqueue(new MockResponse(), +          .setHeader("Cache-Control", "no-store"), +          .setBody("FGHIJ"));, +    }, +, +    assertEquals(expectedResponseCode, connection.getResponseCode());, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    int expectedResponseCode = responseCode;, +, +, +    if (responseCode == HttpURLConnection.HTTP_CLIENT_TIMEOUT) {, +      // 408's are a bit of an outlier because we may repeat the request if we encounter this, +      // response code. In this scenario, there are 2 responses: the initial 408 and then the 200, +      // because of the retry. We just want to ensure the initial 408 isn't cached., +      expectedResponseCode = 200;, +      server.enqueue(new MockResponse(), +          .setHeader("Cache-Control", "no-store"), +          .setBody("FGHIJ"));, +    }, +, +    assertEquals(expectedResponseCode, response.code());, +++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java, +    int expectedResponseCode = responseCode;, +, +, +    if (responseCode == HttpURLConnection.HTTP_CLIENT_TIMEOUT) {, +      // 408's are a bit of an outlier because we may repeat the request if we encounter this, +      // response code. In this scenario, there are 2 responses: the initial 408 and then the 200, +      // because of the retry. We just want to ensure the initial 408 isn't cached., +      expectedResponseCode = 200;, +      server.enqueue(new MockResponse(), +          .setHeader("Cache-Control", "no-store"), +          .setBody("FGHIJ"));, +    }, +, +    assertEquals(expectedResponseCode, connection.getResponseCode());, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +    int expectedResponseCode = responseCode;, +, +, +    if (responseCode == HttpURLConnection.HTTP_CLIENT_TIMEOUT) {, +      // 408's are a bit of an outlier because we may repeat the request if we encounter this, +      // response code. In this scenario, there are 2 responses: the initial 408 and then the 200, +      // because of the retry. We just want to ensure the initial 408 isn't cached., +      expectedResponseCode = 200;, +      server.enqueue(new MockResponse(), +          .setHeader("Cache-Control", "no-store"), +          .setBody("FGHIJ"));, +    }, +, +    assertEquals(expectedResponseCode, response.code());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void getClientRequestTimeout() throws Exception {, +    enqueueRequestTimeoutResponses();, +, +    Response response = client.newCall(new Request.Builder(), +        .url(server.url("/")).build()).execute();, +, +    assertEquals("Body", response.body().string());, +  }, +, +  private void enqueueRequestTimeoutResponses() {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setResponseCode(HttpURLConnection.HTTP_CLIENT_TIMEOUT), +        .setHeader("Connection", "Close"), +        .setBody("You took too long!"));, +    server.enqueue(new MockResponse().setBody("Body"));, +  }, +, +  @Test public void requestBodyRetransmittedOnClientRequestTimeout() throws Exception {, +    enqueueRequestTimeoutResponses();, +, +    Response response = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .post(RequestBody.create(MediaType.parse("text/plain"), "Hello"))]