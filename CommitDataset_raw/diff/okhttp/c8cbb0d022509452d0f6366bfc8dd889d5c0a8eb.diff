[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.takeHeaders();, +        stream.writeHeaders(Collections.singletonList(, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.takeHeaders();, +        stream.writeHeaders(Collections.singletonList(, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.takeHeaders();, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      List<Header> streamHeaders = stream.takeHeaders();, +        stream.writeHeaders(Collections.singletonList(, +      stream.writeHeaders(http2Headers, closeStreamAfterHeaders);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +      List<Header> requestHeaders = stream.takeHeaders();, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +    stream.writeHeaders(responseHeaders, true);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +import java.util.ArrayDeque;, +import okio.Utf8;, +    assertEquals(headerEntries("a", "android"), stream.takeHeaders());, +    assertEquals(headerEntries("a", "android"), stream.takeHeaders());, +  static final class RecordingHeadersListener implements Header.Listener {, +    final ArrayDeque<Header> receivedHeaders = new ArrayDeque<>();, +, +    @Override public void onHeaders(List<Header> headers) {, +      for (Header header : headers) {, +        if (header == null) continue; // TODO: deliver Headers, not List<Header>, +        receivedHeaders.add(header);, +      }, +    }, +, +    public List<Header> takeAll() {, +      List<Header> result = new ArrayList<>();, +      for (Header header; (header = receivedHeaders.poll()) != null; ) {, +        result.add(header);, +      }, +      return result;, +    }, +  }, +, +  @Test public void clientReadsHeadersDataHeadersData() throws Exception {, +    peer.sendFrame().settings(new Settings());, +    peer.acceptFrame(); // ACK, +    peer.acceptFrame(); // SYN_STREAM, +    peer.sendFrame().synReply(false, 3, headerEntries("a", "android"));, +    peer.sendFrame().data(false, 3, new Buffer().writeUtf8("robot"), 5);, +    peer.sendFrame().synReply(false, 3, headerEntries("b", "banana"));, +    peer.sendFrame().data(true, 3, new Buffer().writeUtf8("cyborg"), 6);, +    peer.acceptFrame(); // PING, +    peer.sendFrame().ping(true, 1, 0); // PONG, +    peer.play();, +, +    RecordingHeadersListener headersListener = new RecordingHeadersListener();, +, +    Http2Connection connection = connect(peer);, +    Http2Stream stream = connection.newStream(headerEntries(), false);, +    stream.setHeadersListener(headersListener);, +    assertStreamData("robotcyborg", stream.getSource());, +    assertEquals(headerEntries("a", "android", "b", "banana"), headersListener.takeAll());, +    connection.writePingAndAwaitPong();, +    assertEquals(0, connection.openStreamCount());, +  }, +, +  @Test public void clientReadsHeadersDataPingPongHeadersData() throws Exception {, +    peer.sendFrame().settings(new Settings());, +    peer.acceptFrame(); // ACK, +    peer.acceptFrame(); // SYN_STREAM, +    peer.sendFrame().synReply(false, 3, headerEntries("a", "android"));, +    peer.sendFrame().data(false, 3, new Buffer().writeUtf8("robot"), 5);, +    peer.acceptFrame(); // PING, +    peer.sendFrame().ping(true, 1, 0); // PONG, +    peer.sendFrame().synReply(false, 3, headerEntries("b", "banana"));, +    peer.sendFrame().data(true, 3, new Buffer().writeUtf8("cyborg"), 6);, +    peer.acceptFrame(); // PING, +    peer.sendFrame().ping(true, 1, 0); // PONG, +    peer.play();, +, +    RecordingHeadersListener headersListener = new RecordingHeadersListener();, +, +    Http2Connection connection = connect(peer);, +    Http2Stream stream = connection.newStream(headerEntries(), false);, +    stream.setHeadersListener(headersListener);, +    BufferedSource source = Okio.buffer(stream.getSource());, +, +    assertStreamPrefix("robot", source);, +    assertEquals(headerEntries("a", "android"), headersListener.takeAll());, +    connection.writePingAndAwaitPong();, +, +    assertStreamPrefix("cyborg", source);, +    assertEquals(headerEntries("b", "banana"), headersListener.takeAll());, +    connection.writePingAndAwaitPong();, +, +    assertEquals(0, connection.openStreamCount());, +  }]