[+++ b/src/main/java/libcore/net/http/HttpURLConnectionImpl.java, +            PasswordAuthentication auth;, +            if (responseHeaders.getResponseCode() == HTTP_PROXY_AUTH) {, +                InetSocketAddress proxyAddress = (InetSocketAddress) proxy.address();, +                auth = Authenticator.requestPasswordAuthentication(, +                        proxyAddress.getHostName(), getConnectToInetAddress(),, +                        proxyAddress.getPort(), url.getProtocol(), challenge.realm,, +                        challenge.scheme, url, Authenticator.RequestorType.PROXY);, +            } else {, +                auth = Authenticator.requestPasswordAuthentication(, +                        url.getHost(), getConnectToInetAddress(), url.getPort(), url.getProtocol(),, +                        challenge.realm, challenge.scheme, url, Authenticator.RequestorType.SERVER);, +            }, +++ b/src/main/java/libcore/net/http/HttpURLConnectionImpl.java, +            PasswordAuthentication auth;, +            if (responseHeaders.getResponseCode() == HTTP_PROXY_AUTH) {, +                InetSocketAddress proxyAddress = (InetSocketAddress) proxy.address();, +                auth = Authenticator.requestPasswordAuthentication(, +                        proxyAddress.getHostName(), getConnectToInetAddress(),, +                        proxyAddress.getPort(), url.getProtocol(), challenge.realm,, +                        challenge.scheme, url, Authenticator.RequestorType.PROXY);, +            } else {, +                auth = Authenticator.requestPasswordAuthentication(, +                        url.getHost(), getConnectToInetAddress(), url.getPort(), url.getProtocol(),, +                        challenge.realm, challenge.scheme, url, Authenticator.RequestorType.SERVER);, +            }, +++ b/src/test/java/libcore/net/http/URLConnectionTest.java, +        Authenticator.setDefault(new RecordingAuthenticator());, +        Authenticator.setDefault(new RecordingAuthenticator());, +        List<String> calls = authCallsForHeader("WWW-Authenticate: Foo");, +        assertEquals(Collections.<String>emptyList(), calls);, +        List<String> calls = authCallsForHeader("WWW-Authenticate: Foo realm=\"Bar\"");, +        assertEquals(1, calls.size());, +        String call = calls.get(0);, +        assertTrue(call, call.contains("scheme=Foo"));, +        assertTrue(call, call.contains("prompt=Bar"));, +    }, +, +    // Digest auth is currently unsupported. Test that digest requests should fail reasonably., +    // http://code.google.com/p/android/issues/detail?id=11140, +    public void testDigestAuthentication() throws Exception {, +        List<String> calls = authCallsForHeader("WWW-Authenticate: Digest ", +                + "realm=\"testrealm@host.com\", qop=\"auth,auth-int\", ", +                + "nonce=\"dcd98b7102dd2f0e8b11d0f600bfb0c093\", ", +                + "opaque=\"5ccc069c403ebaf9f0171e9517f40e41\"");, +        assertEquals(1, calls.size());, +        String call = calls.get(0);, +        assertTrue(call, call.contains("scheme=Digest"));, +        assertTrue(call, call.contains("prompt=testrealm@host.com"));, +    }, +, +    public void testAllAttributesSetInServerAuthenticationCallbacks() throws Exception {, +        List<String> calls = authCallsForHeader("WWW-Authenticate: Basic realm=\"Bar\"");, +        assertEquals(1, calls.size());, +        URL url = server.getUrl("/");, +        String call = calls.get(0);, +        assertTrue(call, call.contains("host=" + url.getHost()));, +        assertTrue(call, call.contains("port=" + url.getPort()));, +        assertTrue(call, call.contains("site=" + InetAddress.getAllByName(url.getHost())[0]));, +        assertTrue(call, call.contains("url=" + url));, +        assertTrue(call, call.contains("type=" + Authenticator.RequestorType.SERVER));, +        assertTrue(call, call.contains("prompt=Bar"));, +        assertTrue(call, call.contains("protocol=http"));, +        assertTrue(call, call.toLowerCase().contains("scheme=basic")); // lowercase for the RI., +    }, +, +    public void testAllAttributesSetInProxyAuthenticationCallbacks() throws Exception {, +        List<String> calls = authCallsForHeader("Proxy-Authenticate: Basic realm=\"Bar\"");, +        assertEquals(1, calls.size());, +        URL url = server.getUrl("/");, +        String call = calls.get(0);, +        assertTrue(call, call.contains("host=" + url.getHost()));, +        assertTrue(call, call.contains("port=" + url.getPort()));, +        assertTrue(call, call.contains("site=" + InetAddress.getAllByName(url.getHost())[0]));, +        assertTrue(call, call.contains("url=http://android.com"));, +        assertTrue(call, call.contains("type=" + Authenticator.RequestorType.PROXY));, +        assertTrue(call, call.contains("prompt=Bar"));, +        assertTrue(call, call.contains("protocol=http"));, +        assertTrue(call, call.toLowerCase().contains("scheme=basic")); // lowercase for the RI., +    }, +, +    private List<String> authCallsForHeader(String authHeader) throws IOException {, +        boolean proxy = authHeader.startsWith("Proxy-");, +        int responseCode = proxy ? 407 : 401;, +        RecordingAuthenticator authenticator = new RecordingAuthenticator(null);, +                .setResponseCode(responseCode), +                .addHeader(authHeader), +        OkHttpConnection connection = proxy, +                ? openConnection(new URL("http://android.com"), server.toProxyAddress()), +                : openConnection(server.getUrl("/"));, +        assertEquals(responseCode, connection.getResponseCode());, +        return authenticator.calls;, +        Authenticator.setDefault(new RecordingAuthenticator());, +        Authenticator.setDefault(new RecordingAuthenticator());, +        private final PasswordAuthentication authentication;, +, +        public RecordingAuthenticator(PasswordAuthentication authentication) {, +            this.authentication = authentication;, +        }, +]