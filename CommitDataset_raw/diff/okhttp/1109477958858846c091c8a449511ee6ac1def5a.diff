[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +import java.net.URI;, +import java.net.URL;, +        .skipForUri('%'), +        .skipForUri('%'), +        .skipForUri('%', '[', ']'), +        .skipForUri('%', '\\', '^', '`', '{', '|', '}'), +        .skipForUri('%', ' ', '"', '#', '<', '>', '\\', '^', '`', '{', '|', '}'), +, +  @Test public void toJavaNetUrl() throws Exception {, +    HttpUrl httpUrl = HttpUrl.parse("http://username:password@host/path?query#fragment");, +    URL javaNetUrl = httpUrl.url();, +    assertEquals("http://username:password@host/path?query#fragment", javaNetUrl.toString());, +  }, +, +  @Test public void toUri() throws Exception {, +    HttpUrl httpUrl = HttpUrl.parse("http://username:password@host/path?query#fragment");, +    URI uri = httpUrl.uri();, +    assertEquals("http://username:password@host/path?query#fragment", uri.toString());, +  }, +, +  @Test public void toUriForbiddenCharacter() throws Exception {, +    HttpUrl httpUrl = HttpUrl.parse("http://host/a[b");, +    try {, +      httpUrl.uri();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("not valid as a java.net.URI: http://host/a[b", expected.getMessage());, +    }, +  }, +, +  @Test public void fromJavaNetUrl() throws Exception {, +    URL javaNetUrl = new URL("http://username:password@host/path?query#fragment");, +    HttpUrl httpUrl = HttpUrl.get(javaNetUrl);, +    assertEquals("http://username:password@host/path?query#fragment", httpUrl.toString());, +  }, +, +  @Test public void fromJavaNetUrlUnsupportedScheme() throws Exception {, +    URL javaNetUrl = new URL("mailto:user@example.com");, +    assertEquals(null, HttpUrl.get(javaNetUrl));, +  }, +, +  @Test public void fromUri() throws Exception {, +    URI uri = new URI("http://username:password@host/path?query#fragment");, +    HttpUrl httpUrl = HttpUrl.get(uri);, +    assertEquals("http://username:password@host/path?query#fragment", httpUrl.toString());, +  }, +, +  @Test public void fromUriUnsupportedScheme() throws Exception {, +    URI uri = new URI("mailto:user@example.com");, +    assertEquals(null, HttpUrl.get(uri));, +  }, +, +  @Test public void fromUriPartial() throws Exception {, +    URI uri = new URI("/path");, +    assertEquals(null, HttpUrl.get(uri));, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +import java.net.URI;, +import java.net.URL;, +        .skipForUri('%'), +        .skipForUri('%'), +        .skipForUri('%', '[', ']'), +        .skipForUri('%', '\\', '^', '`', '{', '|', '}'), +        .skipForUri('%', ' ', '"', '#', '<', '>', '\\', '^', '`', '{', '|', '}'), +, +  @Test public void toJavaNetUrl() throws Exception {, +    HttpUrl httpUrl = HttpUrl.parse("http://username:password@host/path?query#fragment");, +    URL javaNetUrl = httpUrl.url();, +    assertEquals("http://username:password@host/path?query#fragment", javaNetUrl.toString());, +  }, +, +  @Test public void toUri() throws Exception {, +    HttpUrl httpUrl = HttpUrl.parse("http://username:password@host/path?query#fragment");, +    URI uri = httpUrl.uri();, +    assertEquals("http://username:password@host/path?query#fragment", uri.toString());, +  }, +, +  @Test public void toUriForbiddenCharacter() throws Exception {, +    HttpUrl httpUrl = HttpUrl.parse("http://host/a[b");, +    try {, +      httpUrl.uri();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("not valid as a java.net.URI: http://host/a[b", expected.getMessage());, +    }, +  }, +, +  @Test public void fromJavaNetUrl() throws Exception {, +    URL javaNetUrl = new URL("http://username:password@host/path?query#fragment");, +    HttpUrl httpUrl = HttpUrl.get(javaNetUrl);, +    assertEquals("http://username:password@host/path?query#fragment", httpUrl.toString());, +  }, +, +  @Test public void fromJavaNetUrlUnsupportedScheme() throws Exception {, +    URL javaNetUrl = new URL("mailto:user@example.com");, +    assertEquals(null, HttpUrl.get(javaNetUrl));, +  }, +, +  @Test public void fromUri() throws Exception {]