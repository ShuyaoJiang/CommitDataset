[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    DnsStart dnsStart = listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    <T> T expectNextEvent(Class<T> eventClass) {, +      if (!eventClass.isInstance(event)) {, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    DnsStart dnsStart = listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    <T> T expectNextEvent(Class<T> eventClass) {, +      if (!eventClass.isInstance(event)) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +    InputStream resource = PublicSuffixDatabaseTest.class, +    InputStream resource = PublicSuffixDatabaseTest.class, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    DnsStart dnsStart = listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    <T> T expectNextEvent(Class<T> eventClass) {, +      if (!eventClass.isInstance(event)) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +    InputStream resource = PublicSuffixDatabaseTest.class, +    InputStream resource = PublicSuffixDatabaseTest.class, +++ b/okhttp/src/main/java/okhttp3/EventListener.java, +  public void secureConnectEnd(Call call, Handshake handshake,, +      Throwable throwable) {, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    DnsStart dnsStart = listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    <T> T expectNextEvent(Class<T> eventClass) {, +      if (!eventClass.isInstance(event)) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +    InputStream resource = PublicSuffixDatabaseTest.class, +    InputStream resource = PublicSuffixDatabaseTest.class, +++ b/okhttp/src/main/java/okhttp3/EventListener.java, +  public void secureConnectEnd(Call call, Handshake handshake,, +      Throwable throwable) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +  public void connect(, +      int connectTimeout, int readTimeout, int writeTimeout, boolean connectionRetryEnabled) {, +        establishProtocol(connectionSpecSelector);, +  private void establishProtocol(ConnectionSpecSelector connectionSpecSelector) throws IOException {, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    DnsStart dnsStart = listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    <T> T expectNextEvent(Class<T> eventClass) {, +      if (!eventClass.isInstance(event)) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +    InputStream resource = PublicSuffixDatabaseTest.class, +    InputStream resource = PublicSuffixDatabaseTest.class, +++ b/okhttp/src/main/java/okhttp3/EventListener.java, +  public void secureConnectEnd(Call call, Handshake handshake,, +      Throwable throwable) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +  public void connect(, +      int connectTimeout, int readTimeout, int writeTimeout, boolean connectionRetryEnabled) {, +        establishProtocol(connectionSpecSelector);, +  private void establishProtocol(ConnectionSpecSelector connectionSpecSelector) throws IOException {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +    result.connect(connectTimeout, readTimeout, writeTimeout, connectionRetryEnabled);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +    DnsStart dnsStart = listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    listener.expectNextEvent(DnsStart.class);, +    DnsEnd dnsEnd = listener.expectNextEvent(DnsEnd.class);, +    <T> T expectNextEvent(Class<T> eventClass) {, +      if (!eventClass.isInstance(event)) {, +++ b/okhttp-tests/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixDatabaseTest.java, +    InputStream resource = PublicSuffixDatabaseTest.class, +    InputStream resource = PublicSuffixDatabaseTest.class, +++ b/okhttp/src/main/java/okhttp3/EventListener.java, +  public void secureConnectEnd(Call call, Handshake handshake,, +      Throwable throwable) {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java, +  public void connect(, +      int connectTimeout, int readTimeout, int writeTimeout, boolean connectionRetryEnabled) {, +        establishProtocol(connectionSpecSelector);, +  private void establishProtocol(ConnectionSpecSelector connectionSpecSelector) throws IOException {, +++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java, +    result.connect(connectTimeout, readTimeout, writeTimeout, connectionRetryEnabled);]