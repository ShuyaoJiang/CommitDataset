[+++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +  @Override public void setFixedLengthStreamingMode(long contentLength) {, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +  @Override public void setFixedLengthStreamingMode(long contentLength) {, +++ b/samples/guide/pom.xml, +    <dependency>, +      <groupId>com.google.code.gson</groupId>, +      <artifactId>gson</artifactId>, +    </dependency>, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +  @Override public void setFixedLengthStreamingMode(long contentLength) {, +++ b/samples/guide/pom.xml, +    <dependency>, +      <groupId>com.google.code.gson</groupId>, +      <artifactId>gson</artifactId>, +    </dependency>, +++ b/samples/guide/src/main/java/com/squareup/okhttp/guide/Recipes.java, +import com.google.gson.Gson;, +import com.squareup.okhttp.Cache;, +import java.io.File;, +import java.util.Map;, +  public void parseResponseWithGson() throws Exception {, +    OkHttpClient client = new OkHttpClient();, +    Gson gson = new Gson();, +, +    Request request = new Request.Builder(), +        .url("https://api.github.com/gists/c2a7c39532239ff261be"), +        .build();, +    Response response = client.newCall(request).execute();, +    Gist gist = gson.fromJson(response.body().charStream(), Gist.class);, +    for (Map.Entry<String, GistFile> entry : gist.files.entrySet()) {, +      System.out.println(entry.getKey());, +      System.out.println(entry.getValue().content);, +    }, +  }, +, +  static class Gist {, +    Map<String, GistFile> files;, +  }, +, +  static class GistFile {, +    String content;, +  }, +, +  public void cacheResponse() throws Exception {, +    File cacheDirectory = new File(getClass().getName() + ".cacheResponse.tmp");, +    int cacheSize = 10 * 1024 * 1024; // 10 MiB, +    Cache cache = new Cache(cacheDirectory, cacheSize);, +, +    OkHttpClient client = new OkHttpClient();, +    client.setCache(cache);, +, +    Request request = new Request.Builder(), +        .url("http://publicobject.com/helloworld.txt"), +        .build();, +, +    Response response1 = client.newCall(request).execute();, +    if (response1.code() < 200 || response1.code() >= 300) {, +      throw new IOException("Unexpected code " + response1);, +    }, +    String response1Body = response1.body().string();, +    System.out.println("Response 1 response:          " + response1);, +    System.out.println("Response 1 cache response:    " + response1.cacheResponse());, +    System.out.println("Response 1 network response:  " + response1.networkResponse());, +, +    Response response2 = client.newCall(request).execute();, +    if (response2.code() < 200 || response2.code() >= 300) {, +      throw new IOException("Unexpected code " + response2);, +    }, +    String response2Body = response2.body().string();, +    System.out.println("Response 2 response:          " + response2);, +    System.out.println("Response 2 cache response:    " + response2.cacheResponse());, +    System.out.println("Response 2 network response:  " + response2.networkResponse());, +, +    System.out.println("Response 2 equals Response 1? " + response1Body.equals(response2Body));, +  }, +, +    recipes.parseResponseWithGson();, +    recipes.cacheResponse();]