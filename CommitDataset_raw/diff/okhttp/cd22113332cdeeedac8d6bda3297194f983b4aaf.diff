[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private long headersDelayAmount = 0;, +  private TimeUnit headersDelayUnit = TimeUnit.MILLISECONDS;, +, +  public MockResponse setHeadersDelay(long delay, TimeUnit unit) {, +    headersDelayAmount = delay;, +    headersDelayUnit = unit;, +    return this;, +  }, +, +  public long getHeadersDelay(TimeUnit unit) {, +    return unit.convert(headersDelayAmount, headersDelayUnit);, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private long headersDelayAmount = 0;, +  private TimeUnit headersDelayUnit = TimeUnit.MILLISECONDS;, +, +  public MockResponse setHeadersDelay(long delay, TimeUnit unit) {, +    headersDelayAmount = delay;, +    headersDelayUnit = unit;, +    return this;, +  }, +, +  public long getHeadersDelay(TimeUnit unit) {, +    return unit.convert(headersDelayAmount, headersDelayUnit);, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    sleepIfDelayed(response.getBodyDelay(TimeUnit.MILLISECONDS));, +    sleepIfDelayed(response.getBodyDelay(TimeUnit.MILLISECONDS));, +  private void sleepIfDelayed(long delayMs) {, +      sleepIfDelayed(response.getHeadersDelay(TimeUnit.MILLISECONDS));, +, +        sleepIfDelayed(response.getBodyDelay(TimeUnit.MILLISECONDS));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private long headersDelayAmount = 0;, +  private TimeUnit headersDelayUnit = TimeUnit.MILLISECONDS;, +, +  public MockResponse setHeadersDelay(long delay, TimeUnit unit) {, +    headersDelayAmount = delay;, +    headersDelayUnit = unit;, +    return this;, +  }, +, +  public long getHeadersDelay(TimeUnit unit) {, +    return unit.convert(headersDelayAmount, headersDelayUnit);, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    sleepIfDelayed(response.getBodyDelay(TimeUnit.MILLISECONDS));, +    sleepIfDelayed(response.getBodyDelay(TimeUnit.MILLISECONDS));, +  private void sleepIfDelayed(long delayMs) {, +      sleepIfDelayed(response.getHeadersDelay(TimeUnit.MILLISECONDS));, +, +        sleepIfDelayed(response.getBodyDelay(TimeUnit.MILLISECONDS));, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.SynchronousQueue;, +, +import okhttp3.Callback;, +  @Test public void responseHeadersAfterGoaway() throws Exception {, +    server.enqueue(new MockResponse(), +        .setHeadersDelay(1, SECONDS), +        .setBody("ABC"));, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .setBody("DEF"));, +, +    final BlockingQueue<String> bodies = new SynchronousQueue<>();, +    Callback callback = new Callback() {, +      @Override public void onResponse(Call call, Response response) throws IOException {, +        bodies.add(response.body().string());, +      }, +      @Override public void onFailure(Call call, IOException e) {, +        System.out.println(e);, +      }, +    };, +    client.newCall(new Request.Builder().url(server.url("/")).build()).enqueue(callback);, +    client.newCall(new Request.Builder().url(server.url("/")).build()).enqueue(callback);, +, +    assertEquals("DEF", bodies.poll(2, SECONDS));, +    assertEquals("ABC", bodies.poll(2, SECONDS));, +    assertEquals(2, server.getRequestCount());, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private long headersDelayAmount = 0;, +  private TimeUnit headersDelayUnit = TimeUnit.MILLISECONDS;, +, +  public MockResponse setHeadersDelay(long delay, TimeUnit unit) {, +    headersDelayAmount = delay;, +    headersDelayUnit = unit;, +    return this;, +  }, +, +  public long getHeadersDelay(TimeUnit unit) {, +    return unit.convert(headersDelayAmount, headersDelayUnit);, +  }, +]