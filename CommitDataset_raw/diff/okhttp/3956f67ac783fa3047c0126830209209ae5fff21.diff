[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +    Http20Draft10.Reader frameReader = (Http20Draft10.Reader) connection.readerRunnable.frameReader;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +    Http20Draft10.Reader frameReader = (Http20Draft10.Reader) connection.readerRunnable.frameReader;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Protocol.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +    Http20Draft10.Reader frameReader = (Http20Draft10.Reader) connection.readerRunnable.frameReader;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Protocol.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +  final Variant variant;, +  final Socket socket;, +  private SpdyConnection(Builder builder) throws IOException {, +    socket = builder.socket;, +    frameWriter = variant.newWriter(Okio.buffer(Okio.sink(builder.socket)), client);, +    // Close the writer to release its resources (such as deflaters)., +    // Close the socket to break out the reader thread, which will clean up after itself., +    try {, +      socket.close();, +    } catch (IOException e) {, +      thrown = e;, +    }, +, +    private Socket socket;, +      this.socket = socket;, +    public SpdyConnection build() throws IOException {, +    FrameReader frameReader;, +, +        frameReader = variant.newReader(Okio.buffer(Okio.source(socket)), client);, +        Util.closeQuietly(frameReader);]