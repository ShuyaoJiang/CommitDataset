[+++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +    assertEquals("0:a:b:c:d:e:f:1", HttpUrl.parse("http://[0:a:b:c:d:e:f:1]/").host());, +    assertEquals("a:b:c:d:e:f:1:0", HttpUrl.parse("http://[a:b:c:d:e:f:1:0]/").host());, +    assertEquals("2001:db8::1", HttpUrl.parse("http://[2001:db8::1]/").host());, +    assertEquals("2001:db8::2:1", HttpUrl.parse("http://[2001:db8:0:0:0:0:2:1]/").host());, +    assertEquals("2001:db8:0:1:1:1:1:1", HttpUrl.parse("http://[2001:db8:0:1:1:1:1:1]/").host());, +    assertEquals("2001:db8::1:0:0:1", HttpUrl.parse("http://[2001:db8:0:0:1:0:0:1]/").host());, +    assertEquals("2001:0:0:1::1", HttpUrl.parse("http://[2001:0:0:1:0:0:0:1]/").host());, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +    assertEquals("0:a:b:c:d:e:f:1", HttpUrl.parse("http://[0:a:b:c:d:e:f:1]/").host());, +    assertEquals("a:b:c:d:e:f:1:0", HttpUrl.parse("http://[a:b:c:d:e:f:1:0]/").host());, +    assertEquals("2001:db8::1", HttpUrl.parse("http://[2001:db8::1]/").host());, +    assertEquals("2001:db8::2:1", HttpUrl.parse("http://[2001:db8:0:0:0:0:2:1]/").host());, +    assertEquals("2001:db8:0:1:1:1:1:1", HttpUrl.parse("http://[2001:db8:0:1:1:1:1:1]/").host());, +    assertEquals("2001:db8::1:0:0:1", HttpUrl.parse("http://[2001:db8:0:0:1:0:0:1]/").host());, +    assertEquals("2001:0:0:1::1", HttpUrl.parse("http://[2001:0:0:1:0:0:0:1]/").host());, +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, +    /** Encodes an IPv6 address in canonical form according to RFC 5952. */, +      // A run must be longer than one group (section 4.2.2)., +      // If there are multiple equal runs, the first one must be used (section 4.2.3)., +        if (currentRunLength > longestRunLength && currentRunLength >= 4) {]