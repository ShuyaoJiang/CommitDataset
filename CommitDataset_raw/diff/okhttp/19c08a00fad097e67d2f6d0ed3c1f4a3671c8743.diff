[+++ b/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java, +, +  @Test public void successfulFindMatchingPinsIgnoresCase() {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("EXAMPLE.com", certA1Sha256Pin), +        .add("*.MyExample.Com", certB1Sha256Pin), +        .build();, +, +    List<Pin> expectedPin1 = Arrays.asList(new Pin("EXAMPLE.com", certA1Sha256Pin));, +    assertEquals(expectedPin1, certificatePinner.findMatchingPins("example.com"));, +, +    List<Pin> expectedPin2 = Arrays.asList(new Pin("*.MyExample.Com", certB1Sha256Pin));, +    assertEquals(expectedPin2, certificatePinner.findMatchingPins("a.myexample.com"));, +  }, +, +  @Test public void successfulFindMatchingPinPunycode() {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("σkhttp.com", certA1Sha256Pin), +        .build();, +, +    List<Pin> expectedPin = Arrays.asList(new Pin("σkhttp.com", certA1Sha256Pin));, +    assertEquals(expectedPin, certificatePinner.findMatchingPins("xn--khttp-fde.com"));, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java, +, +  @Test public void successfulFindMatchingPinsIgnoresCase() {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("EXAMPLE.com", certA1Sha256Pin), +        .add("*.MyExample.Com", certB1Sha256Pin), +        .build();, +, +    List<Pin> expectedPin1 = Arrays.asList(new Pin("EXAMPLE.com", certA1Sha256Pin));, +    assertEquals(expectedPin1, certificatePinner.findMatchingPins("example.com"));, +, +    List<Pin> expectedPin2 = Arrays.asList(new Pin("*.MyExample.Com", certB1Sha256Pin));, +    assertEquals(expectedPin2, certificatePinner.findMatchingPins("a.myexample.com"));, +  }, +, +  @Test public void successfulFindMatchingPinPunycode() {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("σkhttp.com", certA1Sha256Pin), +        .build();, +, +    List<Pin> expectedPin = Arrays.asList(new Pin("σkhttp.com", certA1Sha256Pin));, +    assertEquals(expectedPin, certificatePinner.findMatchingPins("xn--khttp-fde.com"));, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/internal/io/PipeTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.io;, +, +import java.io.IOException;, +import java.io.InterruptedIOException;, +import java.util.Random;, +import java.util.concurrent.Callable;, +import java.util.concurrent.Executors;, +import java.util.concurrent.Future;, +import java.util.concurrent.ScheduledExecutorService;, +import java.util.concurrent.TimeUnit;, +import okio.Buffer;, +import okio.ByteString;, +import okio.HashingSink;, +import okio.Source;, +import org.junit.After;, +import org.junit.Test;, +, +import static junit.framework.TestCase.fail;, +import static org.junit.Assert.assertEquals;, +, +public final class PipeTest {, +  final ScheduledExecutorService executorService = Executors.newScheduledThreadPool(2);, +, +  @After public void tearDown() throws Exception {, +    executorService.shutdown();, +  }, +, +  @Test public void test() throws Exception {, +    Pipe pipe = new Pipe(6);, +    pipe.sink.write(new Buffer().writeUtf8("abc"), 3L);, +, +    Source source = pipe.source;, +    Buffer readBuffer = new Buffer();, +    assertEquals(3L, source.read(readBuffer, 6L));, +    assertEquals("abc", readBuffer.readUtf8());, +, +    pipe.sink.close();, +    assertEquals(-1L, source.read(readBuffer, 6L));]