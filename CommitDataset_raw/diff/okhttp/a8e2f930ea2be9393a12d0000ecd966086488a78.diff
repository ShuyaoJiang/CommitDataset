[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Platform.java, + * <h3>ALPN and NPN</h3>, + * This class uses TLS extensions ALPN and NPN to negotiate the upgrade from, + * HTTP/1.1 (the default protocol to use with TLS on port 443) to either SPDY, + * or HTTP/2.0., + *, + * <p>NPN (Next Protocol Negotiation) was developed for SPDY. It is widely, + * available and we support it on both Android (4.1+) and OpenJDK 7 (via the, + * Jetty NPN-boot library)., + *, + * <p>ALPN (Application Layer Protocol Negotiation) is the successor to NPN. It, + * has some technical advantages over NPN. We support it on Android (4.4+) only., + *, + * <p>On platforms that support both extensions, OkHttp will use both,, + * preferring ALPN's result. Future versions of OkHttp will drop support NPN., + *, + * <h3>Deflater Sync Flush</h3>, + * SPDY header compression requires a recent version of {@code, + * DeflaterOutputStream} that is public API in Java 7 and callable via, + * reflection in Android 4.1+., +      Method setAlpnProtocols = null;, +      Method getAlpnSelectedProtocol = null;, +        try {, +          setAlpnProtocols = openSslSocketClass.getMethod("setAlpnProtocols", byte[].class);, +          getAlpnSelectedProtocol = openSslSocketClass.getMethod("getAlpnSelectedProtocol");, +        } catch (NoSuchMethodException ignored) {, +        }, +          getNpnSelectedProtocol, setAlpnProtocols, getAlpnSelectedProtocol);, +    // Non-null on Android 4.1+., +    // Non-null on Android 4.4+., +    private final Method setAlpnProtocols;, +    private final Method getAlpnSelectedProtocol;, +, +        Method setNpnProtocols, Method getNpnSelectedProtocol, Method setAlpnProtocols,, +        Method getAlpnSelectedProtocol) {, +      this.setAlpnProtocols = setAlpnProtocols;, +      this.getAlpnSelectedProtocol = getAlpnSelectedProtocol;, +        Object[] parameters = { npnProtocols };, +        if (setAlpnProtocols != null) {, +          setAlpnProtocols.invoke(socket, parameters);, +        }, +        setNpnProtocols.invoke(socket, parameters);, +        if (getAlpnSelectedProtocol != null) {, +          // Prefer ALPN's result if it is present., +          byte[] alpnResult = (byte[]) getAlpnSelectedProtocol.invoke(socket);, +          if (alpnResult != null) return alpnResult;, +        }]