[+++ b/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import okhttp3.CertificatePinner.Pin;, +  static String certA1Sha256Pin;, +  static String certB1Sha256Pin;, +  static String certC1Sha256Pin;, +      certA1Sha256Pin = "sha256/" + CertificatePinner.sha256(certA1.certificate).base64();, +      certB1Sha256Pin = "sha256/" + CertificatePinner.sha256(certB1.certificate).base64();, +      certC1Sha256Pin = "sha256/" + CertificatePinner.sha256(certC1.certificate).base64();, +    assertTrue(certA1Sha256Pin.equals(keypairACertificate2Pin));, +    assertTrue(certB1Sha256Pin.equals(keypairBCertificate2Pin));, +    assertFalse(certA1Sha256Pin.equals(certB1Sha256Pin));, +        .add("example.com", certA1Sha256Pin), +        .build();, +, +    certificatePinner.check("example.com", certA1.certificate);, +  }, +, +  @Test public void successfulCheckSha1Pin() throws Exception {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("example.com", "sha1/" + CertificatePinner.sha1(certA1.certificate).base64()), +        .add("example.com", certB1Sha256Pin), +        .add("example.com", certA1Sha256Pin), +        .add("example.com", certA1Sha256Pin, certB1Sha256Pin), +        .add("example.com", certA1Sha256Pin), +        .add("www.example.com", certA1Sha256Pin), +        .add("*.example.com", certA1Sha256Pin), +        .add("*.example.com", certB1Sha256Pin), +        .add("*.example.com", certA1Sha256Pin), +        .add("*.example.com", certA1Sha256Pin, certB1Sha256Pin), +        .add("*.example.com", certA1Sha256Pin), +        .add("a.example.com", certB1Sha256Pin), +        .add("*.example.com", certA1Sha256Pin), +        .add("a.example.com", certB1Sha256Pin), +        .add("first.com", certA1Sha256Pin, certB1Sha256Pin), +        .add("second.com", certC1Sha256Pin), +    List<Pin> expectedPins = Arrays.asList(, +        new Pin("first.com", certA1Sha256Pin),, +        new Pin("first.com", certB1Sha256Pin));, +    assertEquals(expectedPins, certificatePinner.findMatchingPins("first.com"));, +        .add("*.example.com", certA1Sha256Pin), +        .add("a.example.com", certB1Sha256Pin), +        .add("b.example.com", certC1Sha256Pin), +    List<Pin> expectedPins = Arrays.asList(, +        new Pin("*.example.com", certA1Sha256Pin),, +        new Pin("a.example.com", certB1Sha256Pin));, +    assertEquals(expectedPins, certificatePinner.findMatchingPins("a.example.com"));, +        .add("*.example.com", certA1Sha256Pin), +    assertEquals(Collections.emptyList(), certificatePinner.findMatchingPins("example.com"));, +    assertEquals(Collections.emptyList(), certificatePinner.findMatchingPins("a.b.example.com"));, +++ b/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import okhttp3.CertificatePinner.Pin;, +  static String certA1Sha256Pin;, +  static String certB1Sha256Pin;, +  static String certC1Sha256Pin;, +      certA1Sha256Pin = "sha256/" + CertificatePinner.sha256(certA1.certificate).base64();, +      certB1Sha256Pin = "sha256/" + CertificatePinner.sha256(certB1.certificate).base64();, +      certC1Sha256Pin = "sha256/" + CertificatePinner.sha256(certC1.certificate).base64();, +    assertTrue(certA1Sha256Pin.equals(keypairACertificate2Pin));, +    assertTrue(certB1Sha256Pin.equals(keypairBCertificate2Pin));, +    assertFalse(certA1Sha256Pin.equals(certB1Sha256Pin));, +        .add("example.com", certA1Sha256Pin), +        .build();, +, +    certificatePinner.check("example.com", certA1.certificate);, +  }, +, +  @Test public void successfulCheckSha1Pin() throws Exception {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("example.com", "sha1/" + CertificatePinner.sha1(certA1.certificate).base64()), +        .add("example.com", certB1Sha256Pin), +        .add("example.com", certA1Sha256Pin), +        .add("example.com", certA1Sha256Pin, certB1Sha256Pin), +        .add("example.com", certA1Sha256Pin), +        .add("www.example.com", certA1Sha256Pin), +        .add("*.example.com", certA1Sha256Pin), +        .add("*.example.com", certB1Sha256Pin), +        .add("*.example.com", certA1Sha256Pin), +        .add("*.example.com", certA1Sha256Pin, certB1Sha256Pin), +        .add("*.example.com", certA1Sha256Pin), +        .add("a.example.com", certB1Sha256Pin), +        .add("*.example.com", certA1Sha256Pin), +        .add("a.example.com", certB1Sha256Pin), +        .add("first.com", certA1Sha256Pin, certB1Sha256Pin), +        .add("second.com", certC1Sha256Pin), +    List<Pin> expectedPins = Arrays.asList(, +        new Pin("first.com", certA1Sha256Pin),, +        new Pin("first.com", certB1Sha256Pin));, +    assertEquals(expectedPins, certificatePinner.findMatchingPins("first.com"));, +        .add("*.example.com", certA1Sha256Pin), +        .add("a.example.com", certB1Sha256Pin), +        .add("b.example.com", certC1Sha256Pin), +    List<Pin> expectedPins = Arrays.asList(, +        new Pin("*.example.com", certA1Sha256Pin),, +        new Pin("a.example.com", certB1Sha256Pin));]