[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp.internal.spdy;, +, +import com.squareup.okhttp.internal.Util;, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +import java.util.concurrent.TimeUnit;, +import okio.Buffer;, +import okio.BufferedSink;, +import okio.BufferedSource;, +import okio.Okio;, +import okio.Source;, +import org.junit.After;, +import org.junit.Test;, +, +import static com.squareup.okhttp.internal.Util.headerEntries;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.CANCEL;, +import static com.squareup.okhttp.internal.spdy.ErrorCode.PROTOCOL_ERROR;, +import static com.squareup.okhttp.internal.spdy.Settings.DEFAULT_INITIAL_WINDOW_SIZE;, +import static com.squareup.okhttp.internal.spdy.Settings.PERSIST_VALUE;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_DATA;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_PING;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_RST_STREAM;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_SETTINGS;, +import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_WINDOW_UPDATE;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +public final class Http2ConnectionTest {, +  private static final Variant HTTP_2 = new Http20Draft12();, +  private final MockSpdyPeer peer = new MockSpdyPeer();, +, +  @After public void tearDown() throws Exception {, +    peer.close();, +  }, +, +  @Test public void serverPingsClientHttp2() throws Exception {, +    peer.setVariantAndClient(HTTP_2, false);, +, +    // write the mocking script, +    peer.sendFrame().ping(false, 2, 3);, +    peer.acceptFrame(); // PING, +    peer.play();, +, +    // play it back, +    connection(peer, HTTP_2);, +, +    // verify the peer received what was expected, +    MockSpdyPeer.InFrame ping = peer.takeFrame();, +    assertEquals(TYPE_PING, ping.type);, +    assertEquals(0, ping.streamId);, +    assertEquals(2, ping.payload1);, +    assertEquals(3, ping.payload2);, +    assertTrue(ping.ack);, +  }, +, +  @Test public void clientPingsServerHttp2() throws Exception {, +    peer.setVariantAndClient(HTTP_2, false);, +, +    // write the mocking script, +    peer.acceptFrame(); // PING, +    peer.sendFrame().ping(true, 1, 5);, +    peer.play();, +, +    // play it back, +    SpdyConnection connection = connection(peer, HTTP_2);, +    Ping ping = connection.ping();, +    assertTrue(ping.roundTripTime() > 0);, +    assertTrue(ping.roundTripTime() < TimeUnit.SECONDS.toNanos(1));, +, +    // verify the peer received what was expected, +    MockSpdyPeer.InFrame pingFrame = peer.takeFrame();, +    assertEquals(0, pingFrame.streamId);, +    assertEquals(1, pingFrame.payload1);, +    assertEquals(0x4f4b6f6b, pingFrame.payload2); // connection.ping() sets this., +    assertFalse(pingFrame.ack);, +  }, +, +  @Test public void peerHttp2ServerLowersInitialWindowSize() throws Exception {, +    peer.setVariantAndClient(HTTP_2, false);]