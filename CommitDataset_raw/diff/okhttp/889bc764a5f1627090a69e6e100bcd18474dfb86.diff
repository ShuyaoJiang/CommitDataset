[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +    Http20Draft10.Reader frameReader = (Http20Draft10.Reader) connection.readerRunnable.frameReader;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +    Http20Draft10.Reader frameReader = (Http20Draft10.Reader) connection.readerRunnable.frameReader;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Headers.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +    Http20Draft10.Reader frameReader = (Http20Draft10.Reader) connection.readerRunnable.frameReader;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Headers.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +    if (response.hasVaryAll()) {, +      this.varyHeaders = response.request().headers().getAll(response.getVaryFields());, +          && response.varyMatches(varyHeaders, request);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +    Http20Draft10.Reader frameReader = (Http20Draft10.Reader) connection.readerRunnable.frameReader;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Headers.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +    if (response.hasVaryAll()) {, +      this.varyHeaders = response.request().headers().getAll(response.getVaryFields());, +          && response.varyMatches(varyHeaders, request);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Protocol.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/SpdyConnectionTest.java, +    Http20Draft10.Reader frameReader = (Http20Draft10.Reader) connection.readerRunnable.frameReader;, +++ b/okhttp/src/main/java/com/squareup/okhttp/Headers.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +    if (response.hasVaryAll()) {, +      this.varyHeaders = response.request().headers().getAll(response.getVaryFields());, +          && response.varyMatches(varyHeaders, request);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Protocol.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/Response.java, +import com.squareup.okhttp.internal.http.HttpDate;, +import java.net.HttpURLConnection;, +import java.util.Collections;, +import java.util.Date;, +import java.util.Set;, +import java.util.TreeSet;, +import static com.squareup.okhttp.internal.Util.equal;, +  private volatile ParsedHeaders parsedHeaders; // Lazily initialized., +  // TODO: move out of public API, +  public Set<String> getVaryFields() {, +    return parsedHeaders().varyFields;, +  }, +, +  /**, +   * Returns true if a Vary header contains an asterisk. Such responses cannot, +   * be cached., +   */, +  // TODO: move out of public API, +  public boolean hasVaryAll() {, +    return parsedHeaders().varyFields.contains("*");, +  }, +, +  /**, +   * Returns true if none of the Vary headers on this response have changed, +   * between {@code cachedRequest} and {@code newRequest}., +   */, +  // TODO: move out of public API, +  public boolean varyMatches(Headers varyHeaders, Request newRequest) {, +    for (String field : parsedHeaders().varyFields) {, +      if (!equal(varyHeaders.values(field), newRequest.headers(field))) return false;, +    }, +    return true;, +  }, +, +  /**, +   * Returns true if this cached response should be used; false if the, +   * network response should be used., +   */, +  // TODO: move out of public API, +  public boolean validate(Response network) {, +    if (network.code() == HttpURLConnection.HTTP_NOT_MODIFIED) {, +      return true;, +    }, +, +    // The HTTP spec says that if the network's response is older than our, +    // cached response, we may return the cache's response. Like Chrome (but, +    // unlike Firefox), this client prefers to return the newer response., +    ParsedHeaders networkHeaders = network.parsedHeaders();, +    if (parsedHeaders().lastModified != null, +        && networkHeaders.lastModified != null, +        && networkHeaders.lastModified.getTime() < parsedHeaders().lastModified.getTime()) {, +      return true;, +    }, +, +    return false;, +  }, +, +  private ParsedHeaders parsedHeaders() {, +    ParsedHeaders result = parsedHeaders;, +    return result != null ? result : (parsedHeaders = new ParsedHeaders(headers));, +  }, +, +  /** Parsed response headers, computed on-demand and cached. */, +  private static class ParsedHeaders {, +    /** The last modified date of the response, if known. */, +    Date lastModified;, +, +    /** Case-insensitive set of field names. */, +    private Set<String> varyFields = Collections.emptySet();, +, +    private ParsedHeaders(Headers headers) {]