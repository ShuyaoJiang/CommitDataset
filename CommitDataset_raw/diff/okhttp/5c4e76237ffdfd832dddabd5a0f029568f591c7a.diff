[+++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +public final class CookieTest {, +  HttpUrl url = HttpUrl.parse("https://example.com/");, +  @Test public void idnDomainMatches() throws Exception {, +    Cookie cookie = Cookie.parse(HttpUrl.parse("http://☃.net/"), "a=b; domain=☃.net");, +    assertTrue(cookie.matches(HttpUrl.parse("http://☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://xn--n3h.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.xn--n3h.net/")));, +  }, +, +  @Test public void punycodeDomainMatches() throws Exception {, +    Cookie cookie = Cookie.parse(HttpUrl.parse("http://xn--n3h.net/"), "a=b; domain=xn--n3h.net");, +    assertTrue(cookie.matches(HttpUrl.parse("http://☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://xn--n3h.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.xn--n3h.net/")));, +  }, +, +  @Test public void domainMatchesIpAddress() throws Exception {, +    HttpUrl urlWithIp = HttpUrl.parse("http://123.45.234.56/");, +    assertNull(Cookie.parse(urlWithIp, "a=b; domain=234.56"));, +    assertEquals("123.45.234.56", Cookie.parse(urlWithIp, "a=b; domain=123.45.234.56").domain());, +  }, +, +  @Test public void hostOnly() throws Exception {, +    assertTrue(Cookie.parse(url, "a=b").hostOnly());, +    assertFalse(Cookie.parse(url, "a=b; domain=example.com").hostOnly());, +  }, +, +  @Test public void defaultPath() throws Exception {, +    assertEquals("/foo", Cookie.parse(HttpUrl.parse("http://example.com/foo/bar"), "a=b").path());, +    assertEquals("/foo", Cookie.parse(HttpUrl.parse("http://example.com/foo/"), "a=b").path());, +    assertEquals("/", Cookie.parse(HttpUrl.parse("http://example.com/foo"), "a=b").path());, +    assertEquals("/", Cookie.parse(HttpUrl.parse("http://example.com/"), "a=b").path());, +  }, +, +  @Test public void defaultPathIsUsedIfPathDoesntHaveLeadingSlash() throws Exception {, +    assertEquals("/foo", Cookie.parse(HttpUrl.parse("http://example.com/foo/bar"),, +        "a=b; path=quux").path());, +    assertEquals("/foo", Cookie.parse(HttpUrl.parse("http://example.com/foo/bar"),, +        "a=b; path=").path());, +  }, +, +  @Test public void pathAttributeDoesntNeedToMatch() throws Exception {, +    assertEquals("/quux", Cookie.parse(HttpUrl.parse("http://example.com/"),, +        "a=b; path=/quux").path());, +    assertEquals("/quux", Cookie.parse(HttpUrl.parse("http://example.com/foo/bar"),, +        "a=b; path=/quux").path());, +  }, +, +  @Test public void httpOnly() throws Exception {, +    assertFalse(Cookie.parse(url, "a=b").httpOnly());, +    assertTrue(Cookie.parse(url, "a=b; HttpOnly").httpOnly());, +  }, +, +  @Test public void secure() throws Exception {, +    assertFalse(Cookie.parse(url, "a=b").secure());, +    assertTrue(Cookie.parse(url, "a=b; Secure").secure());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CookieTest.java, +public final class CookieTest {, +  HttpUrl url = HttpUrl.parse("https://example.com/");, +  @Test public void idnDomainMatches() throws Exception {, +    Cookie cookie = Cookie.parse(HttpUrl.parse("http://☃.net/"), "a=b; domain=☃.net");, +    assertTrue(cookie.matches(HttpUrl.parse("http://☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://xn--n3h.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.xn--n3h.net/")));, +  }, +, +  @Test public void punycodeDomainMatches() throws Exception {, +    Cookie cookie = Cookie.parse(HttpUrl.parse("http://xn--n3h.net/"), "a=b; domain=xn--n3h.net");, +    assertTrue(cookie.matches(HttpUrl.parse("http://☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://xn--n3h.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.☃.net/")));, +    assertTrue(cookie.matches(HttpUrl.parse("http://www.xn--n3h.net/")));, +  }, +, +  @Test public void domainMatchesIpAddress() throws Exception {, +    HttpUrl urlWithIp = HttpUrl.parse("http://123.45.234.56/");, +    assertNull(Cookie.parse(urlWithIp, "a=b; domain=234.56"));, +    assertEquals("123.45.234.56", Cookie.parse(urlWithIp, "a=b; domain=123.45.234.56").domain());, +  }, +, +  @Test public void hostOnly() throws Exception {, +    assertTrue(Cookie.parse(url, "a=b").hostOnly());, +    assertFalse(Cookie.parse(url, "a=b; domain=example.com").hostOnly());, +  }, +, +  @Test public void defaultPath() throws Exception {, +    assertEquals("/foo", Cookie.parse(HttpUrl.parse("http://example.com/foo/bar"), "a=b").path());, +    assertEquals("/foo", Cookie.parse(HttpUrl.parse("http://example.com/foo/"), "a=b").path());, +    assertEquals("/", Cookie.parse(HttpUrl.parse("http://example.com/foo"), "a=b").path());, +    assertEquals("/", Cookie.parse(HttpUrl.parse("http://example.com/"), "a=b").path());, +  }, +, +  @Test public void defaultPathIsUsedIfPathDoesntHaveLeadingSlash() throws Exception {, +    assertEquals("/foo", Cookie.parse(HttpUrl.parse("http://example.com/foo/bar"),]