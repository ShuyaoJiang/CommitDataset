[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +      Headers streamHeaders = stream.takeHeaders();, +        String name = streamHeaders.name(i);, +        String value = streamHeaders.value(i);, +        if (name.equals(Header.TARGET_METHOD_UTF8)) {, +        } else if (name.equals(Header.TARGET_PATH_UTF8)) {, +          httpHeaders.add(name, value);, +        if (name.equals("expect") && value.equalsIgnoreCase("100-continue")) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +      Headers streamHeaders = stream.takeHeaders();, +        String name = streamHeaders.name(i);, +        String value = streamHeaders.value(i);, +        if (name.equals(Header.TARGET_METHOD_UTF8)) {, +        } else if (name.equals(Header.TARGET_PATH_UTF8)) {, +          httpHeaders.add(name, value);, +        if (name.equals("expect") && value.equalsIgnoreCase("100-continue")) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import okhttp3.Headers;, +      Headers requestHeaders = stream.takeHeaders();, +        if (requestHeaders.name(i).equals(Header.TARGET_PATH_UTF8)) {, +          path = requestHeaders.value(i);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +      Headers streamHeaders = stream.takeHeaders();, +        String name = streamHeaders.name(i);, +        String value = streamHeaders.value(i);, +        if (name.equals(Header.TARGET_METHOD_UTF8)) {, +        } else if (name.equals(Header.TARGET_PATH_UTF8)) {, +          httpHeaders.add(name, value);, +        if (name.equals("expect") && value.equalsIgnoreCase("100-continue")) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import okhttp3.Headers;, +      Headers requestHeaders = stream.takeHeaders();, +        if (requestHeaders.name(i).equals(Header.TARGET_PATH_UTF8)) {, +          path = requestHeaders.value(i);, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +    Headers headerBlock = Headers.of(, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +      Headers streamHeaders = stream.takeHeaders();, +        String name = streamHeaders.name(i);, +        String value = streamHeaders.value(i);, +        if (name.equals(Header.TARGET_METHOD_UTF8)) {, +        } else if (name.equals(Header.TARGET_PATH_UTF8)) {, +          httpHeaders.add(name, value);, +        if (name.equals("expect") && value.equalsIgnoreCase("100-continue")) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import okhttp3.Headers;, +      Headers requestHeaders = stream.takeHeaders();, +        if (requestHeaders.name(i).equals(Header.TARGET_PATH_UTF8)) {, +          path = requestHeaders.value(i);, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +    Headers headerBlock = Headers.of(, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +import okhttp3.Headers;, +    assertEquals(Headers.of("a", "android"), stream.takeHeaders());, +    assertEquals(Headers.of("a", "android"), stream.takeHeaders());, +    final ArrayDeque<Headers> receivedHeaders = new ArrayDeque<>();, +    @Override public void onHeaders(Headers headers) {, +      receivedHeaders.add(headers);, +    public List<Headers> takeAll() {, +      List<Headers> result = new ArrayList<>();, +      for (Headers headers; (headers = receivedHeaders.poll()) != null; ) {, +        result.add(headers);, +    assertEquals(Arrays.asList(Headers.of("a", "android"), Headers.of("b", "banana")),, +        headersListener.takeAll());, +    assertEquals(Arrays.asList(Headers.of("a", "android")), headersListener.takeAll());, +    assertEquals(Arrays.asList(Headers.of("b", "banana")), headersListener.takeAll());, +    assertEquals(Arrays.asList(Headers.of("a", "android")), headersListener.takeAll());, +    assertEquals(Arrays.asList(Headers.of("b", "banana")), headersListener.takeAll());, +    assertEquals(Headers.of("a", "android"), stream.takeHeaders());, +    assertEquals(Headers.of("a", "android"), stream.takeHeaders());, +    assertEquals(Headers.of("b", "banana"), stream.takeHeaders());, +    assertEquals(Headers.of("a", "android"), stream.takeHeaders());, +    assertEquals(Headers.of("c", "c3po"), stream.takeHeaders());, +    assertEquals(Headers.of("a", "android"), stream.takeHeaders());, +    assertEquals(Headers.of("c", "cola"), stream.takeHeaders());, +    assertEquals(Headers.of("a", "android"), stream.takeHeaders());, +    assertEquals(Headers.of("a", "android"), stream.takeHeaders());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;, +      Headers streamHeaders = stream.takeHeaders();, +        String name = streamHeaders.name(i);, +        String value = streamHeaders.value(i);, +        if (name.equals(Header.TARGET_METHOD_UTF8)) {, +        } else if (name.equals(Header.TARGET_PATH_UTF8)) {, +          httpHeaders.add(name, value);, +        if (name.equals("expect") && value.equalsIgnoreCase("100-continue")) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +import okhttp3.Headers;, +      Headers requestHeaders = stream.takeHeaders();, +        if (requestHeaders.name(i).equals(Header.TARGET_PATH_UTF8)) {, +          path = requestHeaders.value(i);, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +    Headers headerBlock = Headers.of(, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +import okhttp3.Headers;, +    assertEquals(Headers.of("a", "android"), stream.takeHeaders());]