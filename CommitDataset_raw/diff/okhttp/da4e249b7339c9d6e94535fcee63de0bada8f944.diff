[+++ b/okhttp-tests/src/test/java/okhttp3/FormBodyTest.java, +import java.nio.charset.Charset;, +, +  @Test public void manualCharset() throws Exception {, +    FormBody body = new FormBody.Builder(Charset.forName("ISO-8859-1")), +        .add("name", "Nicolás"), +        .build();, +, +    String expected = "name=Nicol%E1s";, +    assertEquals(expected.length(), body.contentLength());, +, +    Buffer out = new Buffer();, +    body.writeTo(out);, +    assertEquals(expected, out.readUtf8());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/FormBodyTest.java, +import java.nio.charset.Charset;, +, +  @Test public void manualCharset() throws Exception {, +    FormBody body = new FormBody.Builder(Charset.forName("ISO-8859-1")), +        .add("name", "Nicolás"), +        .build();, +, +    String expected = "name=Nicol%E1s";, +    assertEquals(expected.length(), body.contentLength());, +, +    Buffer out = new Buffer();, +    body.writeTo(out);, +    assertEquals(expected, out.readUtf8());, +  }, +++ b/okhttp/src/main/java/okhttp3/FormBody.java, +import java.nio.charset.Charset;, +    private final Charset charset;, +, +    public Builder() {, +      this(null);, +    }, +, +    public Builder(Charset charset) {, +      this.charset = charset;, +    }, +      names.add(HttpUrl.canonicalize(name, FORM_ENCODE_SET, false, false, true, true, charset));, +      values.add(HttpUrl.canonicalize(value, FORM_ENCODE_SET, false, false, true, true, charset));, +      names.add(HttpUrl.canonicalize(name, FORM_ENCODE_SET, true, false, true, true, charset));, +      values.add(HttpUrl.canonicalize(value, FORM_ENCODE_SET, true, false, true, true, charset));, +++ b/okhttp-tests/src/test/java/okhttp3/FormBodyTest.java, +import java.nio.charset.Charset;, +, +  @Test public void manualCharset() throws Exception {, +    FormBody body = new FormBody.Builder(Charset.forName("ISO-8859-1")), +        .add("name", "Nicolás"), +        .build();, +, +    String expected = "name=Nicol%E1s";, +    assertEquals(expected.length(), body.contentLength());, +, +    Buffer out = new Buffer();, +    body.writeTo(out);, +    assertEquals(expected, out.readUtf8());, +  }, +++ b/okhttp/src/main/java/okhttp3/FormBody.java, +import java.nio.charset.Charset;, +    private final Charset charset;, +, +    public Builder() {, +      this(null);, +    }, +, +    public Builder(Charset charset) {, +      this.charset = charset;, +    }, +      names.add(HttpUrl.canonicalize(name, FORM_ENCODE_SET, false, false, true, true, charset));, +      values.add(HttpUrl.canonicalize(value, FORM_ENCODE_SET, false, false, true, true, charset));, +      names.add(HttpUrl.canonicalize(name, FORM_ENCODE_SET, true, false, true, true, charset));, +      values.add(HttpUrl.canonicalize(value, FORM_ENCODE_SET, true, false, true, true, charset));, +++ b/okhttp/src/main/java/okhttp3/HttpUrl.java, +import java.nio.charset.Charset;, +import okhttp3.internal.Util;, +          pathSegment, 0, pathSegment.length(), PATH_SEGMENT_ENCODE_SET, false, false, false, true,, +              null);, +          0, encodedPathSegment.length(), PATH_SEGMENT_ENCODE_SET, true, false, false, true,, +          null);, +                    input, pos, passwordColonOffset, USERNAME_ENCODE_SET, true, false, false, true,, +                    null);, +                      componentDelimiterOffset, PASSWORD_ENCODE_SET, true, false, false, true,, +                      null);, +                    componentDelimiterOffset, PASSWORD_ENCODE_SET, true, false, false, true,, +                    null);, +            input, pos + 1, queryDelimiterOffset, QUERY_ENCODE_SET, true, false, true, true, null));, +            input, pos + 1, limit, FRAGMENT_ENCODE_SET, true, false, false, false, null);, +          input, pos, limit, PATH_SEGMENT_ENCODE_SET, alreadyEncoded, false, false, true, null);, +        String portString = canonicalize(input, pos, limit, "", false, false, false, true, null);, +   * @param charset which charset to use, null equals UTF-8., +      boolean alreadyEncoded, boolean strict, boolean plusIsSpace, boolean asciiOnly,, +      Charset charset) {, +            asciiOnly, charset);, +      boolean alreadyEncoded, boolean strict, boolean plusIsSpace, boolean asciiOnly,, +      Charset charset) {, +    Buffer encodedCharBuffer = null; // Lazily allocated., +        if (encodedCharBuffer == null) {]