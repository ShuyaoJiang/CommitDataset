[+++ b/checkstyle.xml, +    <module name="MethodLength">, +      <property name="max" value="200"/>, +    </module>, +++ b/checkstyle.xml, +    <module name="MethodLength">, +      <property name="max" value="200"/>, +    </module>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +    assertEquals(expected, HttpUrl.parse("    http://host/    ")); // Both., +    assertEquals(expected, HttpUrl.parse("http://host/").resolve("   "));, +    assertEquals(expected, HttpUrl.parse("http://host/").resolve("  .  "));, +  @Ignore // TODO(jwilson): implement character encoding., +  @Ignore // TODO(jwilson): implement character encoding., +    assertEquals("password%40", HttpUrl.parse("http://:password@@host/path").password());, +  @Ignore // TODO(jwilson): implement character encoding., +    assertEquals("/%00", HttpUrl.parse("http://host/\u0000").path());, +    assertEquals("/%08", HttpUrl.parse("http://host/\u0008").path());, +    assertEquals("/%EF%BF%BD", HttpUrl.parse("http://host/\ufffd").path());, +  @Test public void port() throws Exception {, +    assertEquals(HttpUrl.parse("http://host/"), HttpUrl.parse("http://host:80/"));, +    assertEquals(HttpUrl.parse("http://host:99/"), HttpUrl.parse("http://host:99/"));, +    assertEquals(65535, HttpUrl.parse("http://host:65535/").port());, +    assertEquals(null, HttpUrl.parse("http://host:0/"));, +    assertEquals(null, HttpUrl.parse("http://host:65536/"));, +    assertEquals(null, HttpUrl.parse("http://host:-1/"));, +    assertEquals(null, HttpUrl.parse("http://host:a/"));, +    assertEquals(null, HttpUrl.parse("http://host:%39%39/"));, +  }, +, +  @Ignore // TODO(jwilson): implement character encoding., +  @Ignore // TODO(jwilson): implement character encoding., +  @Ignore // TODO(jwilson): implement character encoding., +, +  @Test public void relativePath() throws Exception {, +    HttpUrl base = HttpUrl.parse("http://host/a/b/c");, +    assertEquals(HttpUrl.parse("http://host/a/b/d/e/f"), base.resolve("d/e/f"));, +    assertEquals(HttpUrl.parse("http://host/d/e/f"), base.resolve("../../d/e/f"));, +    assertEquals(HttpUrl.parse("http://host/a/"), base.resolve(".."));, +    assertEquals(HttpUrl.parse("http://host/"), base.resolve("../.."));, +    assertEquals(HttpUrl.parse("http://host/"), base.resolve("../../.."));, +    assertEquals(HttpUrl.parse("http://host/a/b/"), base.resolve("."));, +    assertEquals(HttpUrl.parse("http://host/a/"), base.resolve("././.."));, +    assertEquals(HttpUrl.parse("http://host/a/b/c/"), base.resolve("c/d/../e/../"));, +    assertEquals(HttpUrl.parse("http://host/a/b/..e/"), base.resolve("..e/"));, +    assertEquals(HttpUrl.parse("http://host/a/b/e/f../"), base.resolve("e/f../"));, +    assertEquals(HttpUrl.parse("http://host/a/"), base.resolve("%2E."));, +    assertEquals(HttpUrl.parse("http://host/a/"), base.resolve(".%2E"));, +    assertEquals(HttpUrl.parse("http://host/a/"), base.resolve("%2E%2E"));, +    assertEquals(HttpUrl.parse("http://host/a/"), base.resolve("%2e."));, +    assertEquals(HttpUrl.parse("http://host/a/"), base.resolve(".%2e"));, +    assertEquals(HttpUrl.parse("http://host/a/"), base.resolve("%2e%2e"));, +    assertEquals(HttpUrl.parse("http://host/a/b/"), base.resolve("%2E"));, +    assertEquals(HttpUrl.parse("http://host/a/b/"), base.resolve("%2e"));, +  }, +, +  @Test public void pathWithBackslash() throws Exception {, +    HttpUrl base = HttpUrl.parse("http://host/a/b/c");, +    assertEquals(HttpUrl.parse("http://host/a/b/d/e/f"), base.resolve("d\\e\\f"));, +    assertEquals(HttpUrl.parse("http://host/d/e/f"), base.resolve("../..\\d\\e\\f"));, +    assertEquals(HttpUrl.parse("http://host/"), base.resolve("..\\.."));, +  }, +, +  @Test public void relativePathWithSameScheme() throws Exception {, +    HttpUrl base = HttpUrl.parse("http://host/a/b/c");, +    assertEquals(HttpUrl.parse("http://host/a/b/d/e/f"), base.resolve("http:d/e/f"));, +    assertEquals(HttpUrl.parse("http://host/d/e/f"), base.resolve("http:../../d/e/f"));, +  }, +++ b/checkstyle.xml, +    <module name="MethodLength">, +      <property name="max" value="200"/>, +    </module>, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +    assertEquals(expected, HttpUrl.parse("    http://host/    ")); // Both., +    assertEquals(expected, HttpUrl.parse("http://host/").resolve("   "));, +    assertEquals(expected, HttpUrl.parse("http://host/").resolve("  .  "));, +  @Ignore // TODO(jwilson): implement character encoding., +  @Ignore // TODO(jwilson): implement character encoding., +    assertEquals("password%40", HttpUrl.parse("http://:password@@host/path").password());, +  @Ignore // TODO(jwilson): implement character encoding., +    assertEquals("/%00", HttpUrl.parse("http://host/\u0000").path());, +    assertEquals("/%08", HttpUrl.parse("http://host/\u0008").path());, +    assertEquals("/%EF%BF%BD", HttpUrl.parse("http://host/\ufffd").path());, +  @Test public void port() throws Exception {, +    assertEquals(HttpUrl.parse("http://host/"), HttpUrl.parse("http://host:80/"));, +    assertEquals(HttpUrl.parse("http://host:99/"), HttpUrl.parse("http://host:99/"));, +    assertEquals(65535, HttpUrl.parse("http://host:65535/").port());, +    assertEquals(null, HttpUrl.parse("http://host:0/"));, +    assertEquals(null, HttpUrl.parse("http://host:65536/"));, +    assertEquals(null, HttpUrl.parse("http://host:-1/"));, +    assertEquals(null, HttpUrl.parse("http://host:a/"));, +    assertEquals(null, HttpUrl.parse("http://host:%39%39/"));, +  }, +, +  @Ignore // TODO(jwilson): implement character encoding., +  @Ignore // TODO(jwilson): implement character encoding., +  @Ignore // TODO(jwilson): implement character encoding., +, +  @Test public void relativePath() throws Exception {, +    HttpUrl base = HttpUrl.parse("http://host/a/b/c");]