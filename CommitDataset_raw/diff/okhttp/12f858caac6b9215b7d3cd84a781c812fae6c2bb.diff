[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private InetAddress inetAddress;, +    if (port == -1) throw new IllegalStateException("Call play() before getPort()");, +    if (inetAddress == null) throw new IllegalStateException("Call play() before getHostName()");, +    return inetAddress.getHostName();, +    if (inetAddress == null) throw new IllegalStateException("Call play() before toProxyAddress()");, +    return new Proxy(Proxy.Type.HTTP, new InetSocketAddress(inetAddress, getPort()));, +    inetAddress = InetAddress.getLocalHost();, +    serverSocket = new ServerSocket(port, 50, inetAddress);, +    executor.execute(new NamedRunnable("MockWebServer %s", this.port) {, +    if (serverSocket == null) return;, +, +    // Cause acceptConnections() to break out., +    serverSocket.close();, +, +    // Await shutdown., +    try {, +      if (!executor.awaitTermination(5, TimeUnit.SECONDS)) {, +        throw new IOException("Gave up waiting for executor to shut down");, +      }, +    } catch (InterruptedException e) {, +      throw new AssertionError();, +        writeResponse(socket, out, response);, +      throttledTransfer(throttlePolicy, socket, in, requestBody, contentLength);, +        throttledTransfer(throttlePolicy, socket, in, requestBody, chunkSize);, +  private void writeResponse(Socket socket, OutputStream out, MockResponse response), +      throws IOException {, +    throttledTransfer(response, socket, in, out, Long.MAX_VALUE);, +  private void throttledTransfer(MockResponse throttlePolicy, Socket socket, InputStream in,, +      OutputStream out, long limit) throws IOException {, +    while (!socket.isClosed()) {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private InetAddress inetAddress;, +    if (port == -1) throw new IllegalStateException("Call play() before getPort()");, +    if (inetAddress == null) throw new IllegalStateException("Call play() before getHostName()");, +    return inetAddress.getHostName();, +    if (inetAddress == null) throw new IllegalStateException("Call play() before toProxyAddress()");, +    return new Proxy(Proxy.Type.HTTP, new InetSocketAddress(inetAddress, getPort()));, +    inetAddress = InetAddress.getLocalHost();, +    serverSocket = new ServerSocket(port, 50, inetAddress);, +    executor.execute(new NamedRunnable("MockWebServer %s", this.port) {, +    if (serverSocket == null) return;, +, +    // Cause acceptConnections() to break out., +    serverSocket.close();, +, +    // Await shutdown., +    try {, +      if (!executor.awaitTermination(5, TimeUnit.SECONDS)) {, +        throw new IOException("Gave up waiting for executor to shut down");, +      }, +    } catch (InterruptedException e) {, +      throw new AssertionError();, +        writeResponse(socket, out, response);, +      throttledTransfer(throttlePolicy, socket, in, requestBody, contentLength);, +        throttledTransfer(throttlePolicy, socket, in, requestBody, chunkSize);, +  private void writeResponse(Socket socket, OutputStream out, MockResponse response), +      throws IOException {, +    throttledTransfer(response, socket, in, out, Long.MAX_VALUE);, +  private void throttledTransfer(MockResponse throttlePolicy, Socket socket, InputStream in,, +      OutputStream out, long limit) throws IOException {, +    while (!socket.isClosed()) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverHttp20Draft14Test.java, +    assertContains(request.getHeaders(), hostHeader + ": ", +        + server.getHostName() + ":" + server.getPort());, +    assertContains(request.getHeaders(), hostHeader + ": ", +        + server.getHostName() + ":" + server.getPort());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private InetAddress inetAddress;, +    if (port == -1) throw new IllegalStateException("Call play() before getPort()");, +    if (inetAddress == null) throw new IllegalStateException("Call play() before getHostName()");, +    return inetAddress.getHostName();, +    if (inetAddress == null) throw new IllegalStateException("Call play() before toProxyAddress()");, +    return new Proxy(Proxy.Type.HTTP, new InetSocketAddress(inetAddress, getPort()));, +    inetAddress = InetAddress.getLocalHost();, +    serverSocket = new ServerSocket(port, 50, inetAddress);, +    executor.execute(new NamedRunnable("MockWebServer %s", this.port) {, +    if (serverSocket == null) return;, +, +    // Cause acceptConnections() to break out., +    serverSocket.close();, +, +    // Await shutdown., +    try {, +      if (!executor.awaitTermination(5, TimeUnit.SECONDS)) {, +        throw new IOException("Gave up waiting for executor to shut down");, +      }, +    } catch (InterruptedException e) {, +      throw new AssertionError();, +        writeResponse(socket, out, response);, +      throttledTransfer(throttlePolicy, socket, in, requestBody, contentLength);, +        throttledTransfer(throttlePolicy, socket, in, requestBody, chunkSize);, +  private void writeResponse(Socket socket, OutputStream out, MockResponse response), +      throws IOException {, +    throttledTransfer(response, socket, in, out, Long.MAX_VALUE);, +  private void throttledTransfer(MockResponse throttlePolicy, Socket socket, InputStream in,, +      OutputStream out, long limit) throws IOException {, +    while (!socket.isClosed()) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpOverHttp20Draft14Test.java, +    assertContains(request.getHeaders(), hostHeader + ": "]