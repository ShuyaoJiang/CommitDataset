[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import java.util.concurrent.TimeUnit;, +  private int throttleBytesPerPeriod = Integer.MAX_VALUE;, +  private long throttlePeriod = 1;, +  private TimeUnit throttleUnit = TimeUnit.SECONDS;, +, +, +   * Throttles the response body writer to sleep for the given period after each, +   * series of {@code bytesPerPeriod} bytes are written. Use this to simulate, +   * network behavior., +  public MockResponse throttleBody(int bytesPerPeriod, long period, TimeUnit unit) {, +    this.throttleBytesPerPeriod = bytesPerPeriod;, +    this.throttlePeriod = period;, +    this.throttleUnit = unit;, +, +  public int getThrottleBytesPerPeriod() {, +    return throttleBytesPerPeriod;, +  }, +, +  public long getThrottlePeriod() {, +    return throttlePeriod;, +  }, +, +  public TimeUnit getThrottleUnit() {, +    return throttleUnit;, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import java.util.concurrent.TimeUnit;, +  private int throttleBytesPerPeriod = Integer.MAX_VALUE;, +  private long throttlePeriod = 1;, +  private TimeUnit throttleUnit = TimeUnit.SECONDS;, +, +, +   * Throttles the response body writer to sleep for the given period after each, +   * series of {@code bytesPerPeriod} bytes are written. Use this to simulate, +   * network behavior., +  public MockResponse throttleBody(int bytesPerPeriod, long period, TimeUnit unit) {, +    this.throttleBytesPerPeriod = bytesPerPeriod;, +    this.throttlePeriod = period;, +    this.throttleUnit = unit;, +, +  public int getThrottleBytesPerPeriod() {, +    return throttleBytesPerPeriod;, +  }, +, +  public long getThrottlePeriod() {, +    return throttlePeriod;, +  }, +, +  public TimeUnit getThrottleUnit() {, +    return throttleUnit;, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    // Stream data in MTU-sized increments, sleeping every bytesPerPeriod bytes., +    byte[] buffer = new byte[1452];, +    while (true) {, +      int bytesPerPeriod = response.getThrottleBytesPerPeriod();, +      for (int b = 0; b < bytesPerPeriod; ) {, +        int read = in.read(buffer, 0, Math.min(buffer.length, bytesPerPeriod - b));, +        if (read == -1) return;, +        b += read;, +      }, +        long delayMs = response.getThrottleUnit().toMillis(response.getThrottlePeriod());, +        if (delayMs != 0) Thread.sleep(delayMs);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +import java.util.concurrent.TimeUnit;, +  private int throttleBytesPerPeriod = Integer.MAX_VALUE;, +  private long throttlePeriod = 1;, +  private TimeUnit throttleUnit = TimeUnit.SECONDS;, +, +, +   * Throttles the response body writer to sleep for the given period after each, +   * series of {@code bytesPerPeriod} bytes are written. Use this to simulate, +   * network behavior., +  public MockResponse throttleBody(int bytesPerPeriod, long period, TimeUnit unit) {, +    this.throttleBytesPerPeriod = bytesPerPeriod;, +    this.throttlePeriod = period;, +    this.throttleUnit = unit;, +, +  public int getThrottleBytesPerPeriod() {, +    return throttleBytesPerPeriod;, +  }, +, +  public long getThrottlePeriod() {, +    return throttlePeriod;, +  }, +, +  public TimeUnit getThrottleUnit() {, +    return throttleUnit;, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    // Stream data in MTU-sized increments, sleeping every bytesPerPeriod bytes., +    byte[] buffer = new byte[1452];, +    while (true) {, +      int bytesPerPeriod = response.getThrottleBytesPerPeriod();, +      for (int b = 0; b < bytesPerPeriod; ) {, +        int read = in.read(buffer, 0, Math.min(buffer.length, bytesPerPeriod - b));]