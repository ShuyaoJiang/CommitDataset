[+++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString((int) buffer.size()).toByteArray(),, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString((int) buffer.size()).toByteArray(),, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +    return buffer.readByteString((int) buffer.size()).hex();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString((int) buffer.size()).toByteArray(),, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +    return buffer.readByteString((int) buffer.size()).hex();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +  /**, +   * Confirm that {@link URLConnection#setIfModifiedSince} causes an, +   * If-Modified-Since header with a GMT timestamp., +   *, +   * https://code.google.com/p/android/issues/detail?id=66135, +   */, +    connection.setIfModifiedSince(1393666200000L);, +    String ifModifiedSinceHeader = request.getHeader("If-Modified-Since");, +    assertEquals("Sat, 01 Mar 2014 09:30:00 GMT", ifModifiedSinceHeader);, +  }, +, +  /**, +   * For Last-Modified and Date headers, we should echo the date back in the, +   * exact format we were served., +   */, +  @Test public void retainServedDateFormat() throws Exception {, +    // Serve a response with a non-standard date format that OkHttp supports., +    Date lastModifiedDate = new Date(System.currentTimeMillis() + TimeUnit.HOURS.toMillis(-1));, +    Date servedDate = new Date(System.currentTimeMillis() + TimeUnit.HOURS.toMillis(-2));, +    DateFormat dateFormat = new SimpleDateFormat("EEE dd-MMM-yyyy HH:mm:ss z", Locale.US);, +    dateFormat.setTimeZone(TimeZone.getTimeZone("EDT"));, +    String lastModifiedString = dateFormat.format(lastModifiedDate);, +    String servedString = dateFormat.format(servedDate);, +, +    // This response should be conditionally cached., +    server.enqueue(new MockResponse(), +        .addHeader("Last-Modified: " + lastModifiedString), +        .addHeader("Expires: " + servedString), +        .setBody("A"));, +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +    server.play();, +, +    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));, +    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));, +, +    // The first request has no conditions., +    RecordedRequest request1 = server.takeRequest();, +    assertNull(request1.getHeader("If-Modified-Since"));, +, +    // The 2nd request uses the server's date format., +    RecordedRequest request2 = server.takeRequest();, +    assertEquals(lastModifiedString, request2.getHeader("If-Modified-Since"));, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +      return new String(buffer.readByteString((int) buffer.size()).toByteArray(),, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +    return buffer.readByteString((int) buffer.size()).hex();, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +  /**, +   * Confirm that {@link URLConnection#setIfModifiedSince} causes an, +   * If-Modified-Since header with a GMT timestamp., +   *, +   * https://code.google.com/p/android/issues/detail?id=66135, +   */, +    connection.setIfModifiedSince(1393666200000L);, +    String ifModifiedSinceHeader = request.getHeader("If-Modified-Since");, +    assertEquals("Sat, 01 Mar 2014 09:30:00 GMT", ifModifiedSinceHeader);, +  }, +, +  /**, +   * For Last-Modified and Date headers, we should echo the date back in the, +   * exact format we were served., +   */, +  @Test public void retainServedDateFormat() throws Exception {, +    // Serve a response with a non-standard date format that OkHttp supports., +    Date lastModifiedDate = new Date(System.currentTimeMillis() + TimeUnit.HOURS.toMillis(-1));, +    Date servedDate = new Date(System.currentTimeMillis() + TimeUnit.HOURS.toMillis(-2));, +    DateFormat dateFormat = new SimpleDateFormat("EEE dd-MMM-yyyy HH:mm:ss z", Locale.US);, +    dateFormat.setTimeZone(TimeZone.getTimeZone("EDT"));, +    String lastModifiedString = dateFormat.format(lastModifiedDate);, +    String servedString = dateFormat.format(servedDate);, +, +    // This response should be conditionally cached., +    server.enqueue(new MockResponse(), +        .addHeader("Last-Modified: " + lastModifiedString), +        .addHeader("Expires: " + servedString), +        .setBody("A"));, +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));, +    server.play();, +, +    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));, +    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));, +, +    // The first request has no conditions., +    RecordedRequest request1 = server.takeRequest();, +    assertNull(request1.getHeader("If-Modified-Since"));, +, +    // The 2nd request uses the server's date format.]