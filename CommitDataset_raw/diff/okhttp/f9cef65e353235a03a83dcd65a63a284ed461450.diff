[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +  /**, +   * Confirm that we account for discarded data frames. It's possible that data frames are in-flight, +   * just prior to us canceling a stream., +   */, +  @Test public void discardedDataFramesAreCounted() throws Exception {, +    // Write the mocking script., +    peer.sendFrame().settings(new Settings());, +    peer.acceptFrame(); // ACK, +    peer.acceptFrame(); // SYN_STREAM 3, +    peer.sendFrame().headers(3, headerEntries("a", "apple"));, +    peer.sendFrame().data(false, 3, data(1024), 1024);, +    peer.acceptFrame(); // RST_STREAM, +    peer.sendFrame().data(true, 3, data(1024), 1024);, +    peer.acceptFrame(); // RST_STREAM, +    peer.play();, +, +    Http2Connection connection = connect(peer);, +    Http2Stream stream1 = connection.newStream(headerEntries("b", "bark"), false);, +    Source source = stream1.getSource();, +    Buffer buffer = new Buffer();, +    while (buffer.size() != 1024) source.read(buffer, 1024);, +    stream1.close(ErrorCode.CANCEL);, +, +    InFrame frame1 = peer.takeFrame();, +    assertEquals(Http2.TYPE_HEADERS, frame1.type);, +    InFrame frame2 = peer.takeFrame();, +    assertEquals(Http2.TYPE_RST_STREAM, frame2.type);, +    InFrame frame3 = peer.takeFrame();, +    assertEquals(Http2.TYPE_RST_STREAM, frame3.type);, +, +    assertEquals(2048, connection.unacknowledgedBytesRead);, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java, +  /**, +   * Confirm that we account for discarded data frames. It's possible that data frames are in-flight, +   * just prior to us canceling a stream., +   */, +  @Test public void discardedDataFramesAreCounted() throws Exception {, +    // Write the mocking script., +    peer.sendFrame().settings(new Settings());, +    peer.acceptFrame(); // ACK, +    peer.acceptFrame(); // SYN_STREAM 3, +    peer.sendFrame().headers(3, headerEntries("a", "apple"));, +    peer.sendFrame().data(false, 3, data(1024), 1024);, +    peer.acceptFrame(); // RST_STREAM, +    peer.sendFrame().data(true, 3, data(1024), 1024);, +    peer.acceptFrame(); // RST_STREAM, +    peer.play();, +, +    Http2Connection connection = connect(peer);, +    Http2Stream stream1 = connection.newStream(headerEntries("b", "bark"), false);, +    Source source = stream1.getSource();, +    Buffer buffer = new Buffer();, +    while (buffer.size() != 1024) source.read(buffer, 1024);, +    stream1.close(ErrorCode.CANCEL);, +, +    InFrame frame1 = peer.takeFrame();, +    assertEquals(Http2.TYPE_HEADERS, frame1.type);, +    InFrame frame2 = peer.takeFrame();, +    assertEquals(Http2.TYPE_RST_STREAM, frame2.type);, +    InFrame frame3 = peer.takeFrame();, +    assertEquals(Http2.TYPE_RST_STREAM, frame3.type);, +, +    assertEquals(2048, connection.unacknowledgedBytesRead);, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +  @Test public void connectionWindowUpdateOnClose() throws Exception {, +    server.enqueue(new MockResponse(), +        .setBody(new Buffer().write(new byte[Http2Connection.OKHTTP_CLIENT_WINDOW_SIZE + 1])));, +    server.enqueue(new MockResponse(), +        .setBody("abc"));, +, +    Call call1 = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response1 = call1.execute();, +, +    // Wait until the server has completely filled the stream and connection flow-control windows., +    int expectedFrameCount = Http2Connection.OKHTTP_CLIENT_WINDOW_SIZE / 16384;, +    int dataFrameCount = 0;, +    while (dataFrameCount < expectedFrameCount) {, +      String log = http2Handler.take();, +      if (log.equals("FINE: << 0x00000003 16384 DATA          ")) {, +        dataFrameCount++;, +      }, +    }, +, +    // Cancel the call and close the response body. This should discard the buffered data and update, +    // the connnection flow-control window., +    call1.cancel();, +    response1.close();, +, +    Call call2 = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    Response response2 = call2.execute();, +    assertEquals("abc", response2.body().string());]