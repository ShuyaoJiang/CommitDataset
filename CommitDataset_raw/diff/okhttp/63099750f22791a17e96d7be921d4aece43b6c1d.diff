[+++ b/.gitignore, +*.ipr, +*.iws, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +      if (entity != null) {, +          // Buffer short, fixed-length request bodies. This costs memory, but permits the request, +          // to be transparently retried if there is a connection failure., +    }, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +      if (entity != null) {, +          // Buffer short, fixed-length request bodies. This costs memory, but permits the request, +          // to be transparently retried if there is a connection failure., +    }, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +import org.apache.http.client.methods.HttpPost;, +, +  @Test public void noEntity() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    HttpPost post = new HttpPost(server.getUrl("/").toURI());, +    client.execute(post);, +  }, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +      if (entity != null) {, +          // Buffer short, fixed-length request bodies. This costs memory, but permits the request, +          // to be transparently retried if there is a connection failure., +    }, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +import org.apache.http.client.methods.HttpPost;, +, +  @Test public void noEntity() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    HttpPost post = new HttpPost(server.getUrl("/").toURI());, +    client.execute(post);, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +  public long getSize() {, +    return cache.size();, +  }, +, +  public long getMaxSize() {, +    return cache.getMaxSize();, +  }, +, +  public void flush() throws IOException {, +    cache.flush();, +  }, +, +  public void close() throws IOException {, +    cache.close();, +  }, +, +  public File getDirectory() {, +    return cache.getDirectory();, +  }, +, +  public boolean isClosed() {, +    return cache.isClosed();, +  }, +, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +      if (entity != null) {, +          // Buffer short, fixed-length request bodies. This costs memory, but permits the request, +          // to be transparently retried if there is a connection failure., +    }, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +import org.apache.http.client.methods.HttpPost;, +, +  @Test public void noEntity() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    HttpPost post = new HttpPost(server.getUrl("/").toURI());, +    client.execute(post);, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +  public long getSize() {, +    return cache.size();, +  }, +, +  public long getMaxSize() {, +    return cache.getMaxSize();, +  }, +, +  public void flush() throws IOException {]