[+++ b/CHANGELOG.md, +## Version 2.7.2, +, +_2016-01-07_, +, + *  Fix: Don't eagerly release stream allocations on cache hits. We might still, +    need them to handle redirects., +, +, +++ b/CHANGELOG.md, +## Version 2.7.2, +, +_2016-01-07_, +, + *  Fix: Don't eagerly release stream allocations on cache hits. We might still, +    need them to handle redirects., +, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private String status = "HTTP/1.1 200 OK";, +    return setStatus("HTTP/1.1 " + code + " OK");, +++ b/CHANGELOG.md, +## Version 2.7.2, +, +_2016-01-07_, +, + *  Fix: Don't eagerly release stream allocations on cache hits. We might still, +    need them to handle redirects., +, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private String status = "HTTP/1.1 200 OK";, +    return setStatus("HTTP/1.1 " + code + " OK");, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    assertEquals("HTTP/1.1 200 OK", response.getStatus());, +++ b/CHANGELOG.md, +## Version 2.7.2, +, +_2016-01-07_, +, + *  Fix: Don't eagerly release stream allocations on cache hits. We might still, +    need them to handle redirects., +, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private String status = "HTTP/1.1 200 OK";, +    return setStatus("HTTP/1.1 " + code + " OK");, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    assertEquals("HTTP/1.1 200 OK", response.getStatus());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +          contentType.charset(UTF8);, +++ b/CHANGELOG.md, +## Version 2.7.2, +, +_2016-01-07_, +, + *  Fix: Don't eagerly release stream allocations on cache hits. We might still, +    need them to handle redirects., +, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +  private String status = "HTTP/1.1 200 OK";, +    return setStatus("HTTP/1.1 " + code + " OK");, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +    assertEquals("HTTP/1.1 200 OK", response.getStatus());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +          contentType.charset(UTF8);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.net.UnknownHostException;, +  @Test public void networkDropsOnConditionalGet() throws IOException {, +    client = client.newBuilder(), +        .cache(cache), +        .build();, +, +    // Seed the cache., +    server.enqueue(new MockResponse(), +        .addHeader("ETag: v1"), +        .setBody("A"));, +    Request cacheStoreRequest = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    executeSynchronously(cacheStoreRequest), +        .assertCode(200), +        .assertBody("A");, +, +    // Attempt conditional cache validation and a DNS miss., +    client.connectionPool().evictAll();, +    client = client.newBuilder(), +        .dns(new FakeDns().unknownHost()), +        .build();, +    Request conditionalGetRequest = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    try {, +      executeSynchronously(conditionalGetRequest);, +      fail();, +    } catch (UnknownHostException expected) {, +    }, +  }, +]