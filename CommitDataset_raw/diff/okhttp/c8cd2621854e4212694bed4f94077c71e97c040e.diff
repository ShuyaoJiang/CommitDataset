[+++ b/src/main/java/com/squareup/okhttp/internal/http/RawHeaders.java, +    if (this.responseMessage != null) {, +      throw new IllegalStateException("statusLine is already set");, +    }, +    // We allow empty message without leading white space since some servers, +    // do not send the white space when the message is empty., +    boolean hasMessage = statusLine.length() > 13;, +        || statusLine.length() < 12, +        || (hasMessage && statusLine.charAt(12) != ' ')) {, +    this.responseMessage = hasMessage ? statusLine.substring(13) : "";, +++ b/src/main/java/com/squareup/okhttp/internal/http/RawHeaders.java, +    if (this.responseMessage != null) {, +      throw new IllegalStateException("statusLine is already set");, +    }, +    // We allow empty message without leading white space since some servers, +    // do not send the white space when the message is empty., +    boolean hasMessage = statusLine.length() > 13;, +        || statusLine.length() < 12, +        || (hasMessage && statusLine.charAt(12) != ' ')) {, +    this.responseMessage = hasMessage ? statusLine.substring(13) : "";, +++ b/src/test/java/com/squareup/okhttp/internal/http/RawHeadersTest.java, +import java.io.IOException;, +import static org.junit.Assert.assertTrue;, +, +  @Test public void statusMessage() throws IOException {, +    RawHeaders rawHeaders = new RawHeaders();, +    final String message = "Temporary Redirect";, +    final int version = 1;, +    final int code = 200;, +    rawHeaders.setStatusLine("HTTP/1." + version + " " + code + " " + message);, +    assertEquals(message, rawHeaders.getResponseMessage());, +    assertEquals(version, rawHeaders.getHttpMinorVersion());, +    assertEquals(code, rawHeaders.getResponseCode());, +  }, +, +  @Test public void statusMessageWithEmptyMessage() throws IOException {, +    RawHeaders rawHeaders = new RawHeaders();, +    final int version = 1;, +    final int code = 503;, +    rawHeaders.setStatusLine("HTTP/1." + version + " " + code + " ");, +    assertTrue(rawHeaders.getResponseMessage().isEmpty());, +    assertEquals(version, rawHeaders.getHttpMinorVersion());, +    assertEquals(code, rawHeaders.getResponseCode());, +  }, +, +  /**, +   * This is not defined in the protocol but some servers won't add the leading, +   * empty space when the message is empty., +   * http://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html#sec6.1, +   */, +  @Test public void statusMessageWithEmptyMessageAndNoLeadingSpace() throws IOException {, +    RawHeaders rawHeaders = new RawHeaders();, +    final int version = 1;, +    final int code = 503;, +    rawHeaders.setStatusLine("HTTP/1." + version + " " + code);, +    assertTrue(rawHeaders.getResponseMessage().isEmpty());, +    assertEquals(version, rawHeaders.getHttpMinorVersion());, +    assertEquals(code, rawHeaders.getResponseCode());, +  }]