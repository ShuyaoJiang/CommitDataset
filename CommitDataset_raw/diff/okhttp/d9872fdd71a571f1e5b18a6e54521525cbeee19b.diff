[+++ b/README.md, +Downloadable .jars can be found on the [GitHub download page][1]., +, +You can also depend on the .jar through Maven:, +    <groupId>com.squareup</groupId>, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with HTTPS., +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets were broken, and so HTTPS tests will time out when run on such devices., +Run OkHttp tests on the desktop with Maven. Running SPDY tests on the desktop uses [Jetty-NPN](http://wiki.eclipse.org/Jetty/Feature/NPN) which requires OpenJDK 7+., +Test on a USB-attached Android using [Vogar](https://code.google.com/p/vogar/). Unfortunately `dx` requires that you build with Java 6, otherwise the test class will be silently omitted from the `.dex` file., + [1]: http://github.com/square/okhttp/downloads, +++ b/README.md, +Downloadable .jars can be found on the [GitHub download page][1]., +, +You can also depend on the .jar through Maven:, +    <groupId>com.squareup</groupId>, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with HTTPS., +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets were broken, and so HTTPS tests will time out when run on such devices., +Run OkHttp tests on the desktop with Maven. Running SPDY tests on the desktop uses [Jetty-NPN](http://wiki.eclipse.org/Jetty/Feature/NPN) which requires OpenJDK 7+., +Test on a USB-attached Android using [Vogar](https://code.google.com/p/vogar/). Unfortunately `dx` requires that you build with Java 6, otherwise the test class will be silently omitted from the `.dex` file., + [1]: http://github.com/square/okhttp/downloads, +++ b/deploy_website.sh, +#!/bin/bash, +, +set -ex, +, +DIR=temp-clone, +, +# Delete any existing temporary website clone, +rm -rf $DIR, +, +# Clone the current repo into temp folder, +git clone git@github.com:square/okhttp.git $DIR, +, +# Move working directory into temp folder, +cd $DIR, +, +# Checkout and track the gh-pages branch, +git checkout -t origin/gh-pages, +, +# Delete everything, +rm -rf *, +, +# Copy website files from real repo, +cp -R ../website/* ., +, +# Stage all files in git and create a commit, +git add ., +git add -u, +git commit -m "Website at $(date)", +, +# Push the new files up to GitHub, +git push origin gh-pages, +, +# Delete our temp folder, +cd .., +rm -rf $DIR, +++ b/README.md, +Downloadable .jars can be found on the [GitHub download page][1]., +, +You can also depend on the .jar through Maven:, +    <groupId>com.squareup</groupId>, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with HTTPS., +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets were broken, and so HTTPS tests will time out when run on such devices., +Run OkHttp tests on the desktop with Maven. Running SPDY tests on the desktop uses [Jetty-NPN](http://wiki.eclipse.org/Jetty/Feature/NPN) which requires OpenJDK 7+., +Test on a USB-attached Android using [Vogar](https://code.google.com/p/vogar/). Unfortunately `dx` requires that you build with Java 6, otherwise the test class will be silently omitted from the `.dex` file., + [1]: http://github.com/square/okhttp/downloads, +++ b/deploy_website.sh, +#!/bin/bash, +, +set -ex, +, +DIR=temp-clone, +, +# Delete any existing temporary website clone, +rm -rf $DIR, +, +# Clone the current repo into temp folder, +git clone git@github.com:square/okhttp.git $DIR, +, +# Move working directory into temp folder, +cd $DIR, +, +# Checkout and track the gh-pages branch, +git checkout -t origin/gh-pages, +, +# Delete everything, +rm -rf *, +, +# Copy website files from real repo, +cp -R ../website/* ., +, +# Stage all files in git and create a commit, +git add ., +git add -u, +git commit -m "Website at $(date)", +, +# Push the new files up to GitHub, +git push origin gh-pages, +, +# Delete our temp folder]