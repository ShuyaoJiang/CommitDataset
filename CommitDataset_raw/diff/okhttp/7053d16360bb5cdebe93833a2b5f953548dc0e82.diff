[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  // https://github.com/square/okhttp/issues/442, +      assertTrue(expected.getMessage().contains("CLEARTEXT communication not supported"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  // https://github.com/square/okhttp/issues/442, +      assertTrue(expected.getMessage().contains("CLEARTEXT communication not supported"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +import com.squareup.okhttp.internal.Internal;, +  static {, +    Internal.initializeInstanceForTests();, +  }, +, +  private static final List<ConnectionSpec> CONNECTION_SPECS = Util.immutableList(, +      ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT);, +, +        Util.immutableList(Protocol.SPDY_3, Protocol.HTTP_1_1), CONNECTION_SPECS, proxySelector);, +        CONNECTION_SPECS, proxySelector);, +    Route httpRoute = new Route(httpAddress, Proxy.NO_PROXY, httpSocketAddress);, +    Route spdyRoute = new Route(spdyAddress, Proxy.NO_PROXY, spdySocketAddress);, +    httpA.connect(200, 200, 200, null, CONNECTION_SPECS, false /* connectionRetryEnabled */);, +    httpB.connect(200, 200, 200, null, CONNECTION_SPECS, false /* connectionRetryEnabled */);, +    httpC.connect(200, 200, 200, null, CONNECTION_SPECS, false /* connectionRetryEnabled */);, +    httpD.connect(200, 200, 200, null, CONNECTION_SPECS, false /* connectionRetryEnabled */);, +    httpE.connect(200, 200, 200, null, CONNECTION_SPECS, false /* connectionRetryEnabled */);, +    spdyA.connect(20000, 20000, 2000, null, CONNECTION_SPECS, false /* connectionRetryEnabled */);, +    connection = new Connection(pool, new Route(httpAddress, Proxy.NO_PROXY, httpSocketAddress));, +    connection.connect(200, 200, 200, null, CONNECTION_SPECS, false /* connectionRetryEnabled */);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +  // https://github.com/square/okhttp/issues/442, +      assertTrue(expected.getMessage().contains("CLEARTEXT communication not supported"));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +import com.squareup.okhttp.internal.Internal;, +  static {, +    Internal.initializeInstanceForTests();, +  }, +, +  private static final List<ConnectionSpec> CONNECTION_SPECS = Util.immutableList(, +      ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT);, +, +        Util.immutableList(Protocol.SPDY_3, Protocol.HTTP_1_1), CONNECTION_SPECS, proxySelector);, +        CONNECTION_SPECS, proxySelector);, +    Route httpRoute = new Route(httpAddress, Proxy.NO_PROXY, httpSocketAddress);, +    Route spdyRoute = new Route(spdyAddress, Proxy.NO_PROXY, spdySocketAddress);, +    httpA.connect(200, 200, 200, null, CONNECTION_SPECS, false /* connectionRetryEnabled */);, +    httpB.connect(200, 200, 200, null, CONNECTION_SPECS, false /* connectionRetryEnabled */);, +    httpC.connect(200, 200, 200, null, CONNECTION_SPECS, false /* connectionRetryEnabled */);, +    httpD.connect(200, 200, 200, null, CONNECTION_SPECS, false /* connectionRetryEnabled */);, +    httpE.connect(200, 200, 200, null, CONNECTION_SPECS, false /* connectionRetryEnabled */);, +    spdyA.connect(20000, 20000, 2000, null, CONNECTION_SPECS, false /* connectionRetryEnabled */);, +    connection = new Connection(pool, new Route(httpAddress, Proxy.NO_PROXY, httpSocketAddress));, +    connection.connect(200, 200, 200, null, CONNECTION_SPECS, false /* connectionRetryEnabled */);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java, +    assertTrue(tlsSpec.isCompatible(socket));, +    tlsSpec.apply(socket, false /* isFallback */);, +    assertTrue(tlsSpec.isCompatible(socket));, +    tlsSpec.apply(socket, true /* isFallback */);, +    assertTrue(tlsSpec.isCompatible(socket));, +    tlsSpec.apply(socket, true /* isFallback */);, +  public void tls_missingRequiredCipher() throws Exception {, +    ConnectionSpec tlsSpec = new ConnectionSpec.Builder(true), +        .cipherSuites(CipherSuite.TLS_RSA_WITH_RC4_128_MD5), +        .tlsVersions(TlsVersion.TLS_1_2), +        .supportsTlsExtensions(false), +        .build();, +, +    SSLSocket socket = (SSLSocket) SSLSocketFactory.getDefault().createSocket();, +    socket.setEnabledProtocols(new String[] {, +        TlsVersion.TLS_1_2.javaName,, +        TlsVersion.TLS_1_1.javaName,, +    });, +, +    socket.setEnabledCipherSuites(new String[] {, +        CipherSuite.TLS_RSA_WITH_RC4_128_SHA.javaName,, +        CipherSuite.TLS_RSA_WITH_RC4_128_MD5.javaName,, +    });, +    assertTrue(tlsSpec.isCompatible(socket));, +, +    socket.setEnabledCipherSuites(new String[] {, +        CipherSuite.TLS_RSA_WITH_RC4_128_SHA.javaName,, +    });, +    assertFalse(tlsSpec.isCompatible(socket));, +  }, +, +  @Test, +  public void tls_missingTlsVersion() throws Exception {, +    ConnectionSpec tlsSpec = new ConnectionSpec.Builder(true), +        .cipherSuites(CipherSuite.TLS_RSA_WITH_RC4_128_MD5), +        .tlsVersions(TlsVersion.TLS_1_2), +        .supportsTlsExtensions(false), +        .build();, +, +    SSLSocket socket = (SSLSocket) SSLSocketFactory.getDefault().createSocket();, +    socket.setEnabledCipherSuites(new String[] {, +        CipherSuite.TLS_RSA_WITH_RC4_128_MD5.javaName,, +    });, +, +    socket.setEnabledProtocols(, +        new String[] { TlsVersion.TLS_1_2.javaName, TlsVersion.TLS_1_1.javaName });, +    assertTrue(tlsSpec.isCompatible(socket));, +]