[+++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +      client.sendMessage(RequestBody.create(TEXT, "Hello!"));, +      fail();, +    } catch (IllegalStateException e) {, +      assertEquals("must call close()", e.getMessage());, +    }, +    try {, +      assertEquals("must call close()", e.getMessage());, +      client.sendMessage(RequestBody.create(TEXT, "Hello!"));, +      assertEquals("must call close()", e.getMessage());, +      assertEquals("must call close()", e.getMessage());, +    client.readMessage(); // Read server close, send client close, close connection., +    clientListener.assertFailure(ProtocolException.class, "Control frames must be final.");, +    clientListener.assertFailure(ProtocolException.class, "Control frames must be final.");, +, +    serverListener.assertExhausted(); // Client should not have sent second close., +  }, +, +  @Test public void closeThrowingClosesConnection() {, +    client2Server.close();, +, +    try {, +      client.close(1000, null);, +      fail();, +    } catch (IOException ignored) {, +    }, +    assertTrue(clientConnectionClosed);, +++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +      client.sendMessage(RequestBody.create(TEXT, "Hello!"));, +      fail();, +    } catch (IllegalStateException e) {, +      assertEquals("must call close()", e.getMessage());, +    }, +    try {, +      assertEquals("must call close()", e.getMessage());, +      client.sendMessage(RequestBody.create(TEXT, "Hello!"));, +      assertEquals("must call close()", e.getMessage());, +      assertEquals("must call close()", e.getMessage());, +    client.readMessage(); // Read server close, send client close, close connection., +    clientListener.assertFailure(ProtocolException.class, "Control frames must be final.");, +    clientListener.assertFailure(ProtocolException.class, "Control frames must be final.");, +, +    serverListener.assertExhausted(); // Client should not have sent second close., +  }, +, +  @Test public void closeThrowingClosesConnection() {, +    client2Server.close();, +, +    try {, +      client.close(1000, null);, +      fail();, +    } catch (IOException ignored) {, +    }, +    assertTrue(clientConnectionClosed);, +++ b/okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java, +  /** True after {@link IOException}. {@link #close(int, String)} becomes only valid call. */, +  private boolean writerWantsClose;, +    if (writerWantsClose) throw new IllegalStateException("must call close()");, +      writerWantsClose = true;, +    if (writerWantsClose) throw new IllegalStateException("must call close()");, +, +      writerWantsClose = true;, +    if (writerWantsClose) throw new IllegalStateException("must call close()");, +, +      writerWantsClose = true;, +++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +      client.sendMessage(RequestBody.create(TEXT, "Hello!"));, +      fail();, +    } catch (IllegalStateException e) {, +      assertEquals("must call close()", e.getMessage());, +    }, +    try {, +      assertEquals("must call close()", e.getMessage());, +      client.sendMessage(RequestBody.create(TEXT, "Hello!"));, +      assertEquals("must call close()", e.getMessage());, +      assertEquals("must call close()", e.getMessage());, +    client.readMessage(); // Read server close, send client close, close connection., +    clientListener.assertFailure(ProtocolException.class, "Control frames must be final.");, +    clientListener.assertFailure(ProtocolException.class, "Control frames must be final.");, +, +    serverListener.assertExhausted(); // Client should not have sent second close., +  }, +, +  @Test public void closeThrowingClosesConnection() {, +    client2Server.close();, +, +    try {, +      client.close(1000, null);, +      fail();, +    } catch (IOException ignored) {, +    }, +    assertTrue(clientConnectionClosed);, +++ b/okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java, +  /** True after {@link IOException}. {@link #close(int, String)} becomes only valid call. */, +  private boolean writerWantsClose;, +    if (writerWantsClose) throw new IllegalStateException("must call close()");, +      writerWantsClose = true;, +    if (writerWantsClose) throw new IllegalStateException("must call close()");, +, +      writerWantsClose = true;]