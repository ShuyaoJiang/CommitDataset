[+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import okhttp3.internal.http.OkHeaders;, +      if (!logBody || !OkHeaders.hasBody(response)) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import okhttp3.internal.http.OkHeaders;, +      if (!logBody || !OkHeaders.hasBody(response)) {, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    // Give the socket a chance to become stale., +    Thread.sleep(250);, +, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import okhttp3.internal.http.OkHeaders;, +      if (!logBody || !OkHeaders.hasBody(response)) {, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    // Give the socket a chance to become stale., +    Thread.sleep(250);, +, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +import okhttp3.internal.http.OkHeaders;, +      if (OkHeaders.hasBody(response) && response.code() >= HTTP_BAD_REQUEST) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import okhttp3.internal.http.OkHeaders;, +      if (!logBody || !OkHeaders.hasBody(response)) {, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    // Give the socket a chance to become stale., +    Thread.sleep(250);, +, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +import okhttp3.internal.http.OkHeaders;, +      if (OkHeaders.hasBody(response) && response.code() >= HTTP_BAD_REQUEST) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import okhttp3.internal.http.OkHeaders;, +      if (!logBody || !OkHeaders.hasBody(response)) {, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    // Give the socket a chance to become stale., +    Thread.sleep(250);, +, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +import okhttp3.internal.http.OkHeaders;, +      if (OkHeaders.hasBody(response) && response.code() >= HTTP_BAD_REQUEST) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.http.BridgeInterceptor;, +import okhttp3.internal.http.CacheInterceptor;, +import okhttp3.internal.http.ConnectInterceptor;, +    interceptors.add(new BridgeInterceptor(client.cookieJar()));, +    interceptors.add(new CacheInterceptor(client.internalCache()));, +    interceptors.add(new ConnectInterceptor(client));, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import okhttp3.internal.http.OkHeaders;, +      if (!logBody || !OkHeaders.hasBody(response)) {, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    // Give the socket a chance to become stale., +    Thread.sleep(250);, +, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +import okhttp3.internal.http.OkHeaders;, +      if (OkHeaders.hasBody(response) && response.code() >= HTTP_BAD_REQUEST) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.http.BridgeInterceptor;, +import okhttp3.internal.http.CacheInterceptor;, +import okhttp3.internal.http.ConnectInterceptor;, +    interceptors.add(new BridgeInterceptor(client.cookieJar()));, +    interceptors.add(new CacheInterceptor(client.internalCache()));, +    interceptors.add(new ConnectInterceptor(client));, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +import okhttp3.internal.http.OkHeaders;, +      if (!logBody || !OkHeaders.hasBody(response)) {, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +    // Give the socket a chance to become stale., +    Thread.sleep(250);, +, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +import okhttp3.internal.http.OkHeaders;, +      if (OkHeaders.hasBody(response) && response.code() >= HTTP_BAD_REQUEST) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import okhttp3.internal.http.BridgeInterceptor;, +import okhttp3.internal.http.CacheInterceptor;, +import okhttp3.internal.http.ConnectInterceptor;, +    interceptors.add(new BridgeInterceptor(client.cookieJar()));, +    interceptors.add(new CacheInterceptor(client.internalCache()));, +    interceptors.add(new ConnectInterceptor(client));, +++ b/okhttp/src/main/java/okhttp3/internal/Internal.java, +++ b/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java, +/*, + *  Licensed to the Apache Software Foundation (ASF) under one or more, + *  contributor license agreements.  See the NOTICE file distributed with, + *  this work for additional information regarding copyright ownership., + *  The ASF licenses this file to You under the Apache License, Version 2.0, + *  (the "License"); you may not use this file except in compliance with, + *  the License.  You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *, + *  Unless required by applicable law or agreed to in writing, software, + *  distributed under the License is distributed on an "AS IS" BASIS,]