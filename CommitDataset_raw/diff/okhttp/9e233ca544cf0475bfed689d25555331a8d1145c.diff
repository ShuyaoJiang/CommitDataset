[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import org.junit.Ignore;, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import org.junit.Ignore;, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import org.junit.Ignore;, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +      if (!httpEngine.sameConnection(followUp)) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import org.junit.Ignore;, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +      if (!httpEngine.sameConnection(followUp)) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java, +      if (!engine.sameConnection(followUp)) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import org.junit.Ignore;, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +      if (!httpEngine.sameConnection(followUp)) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java, +      if (!engine.sameConnection(followUp)) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import org.junit.Ignore;, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +      if (!httpEngine.sameConnection(followUp)) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java, +      if (!engine.sameConnection(followUp)) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/Response.java, +   * The wire-level request that initiated this HTTP response. This is usually, +   * <strong>not</strong> the same request instance provided to the HTTP client:, +   *         may have added its own {@code Content-Encoding} header to enable, +   *         response compression., +   *     <li>It may be the request generated in response to an HTTP redirect., +   *         In this case the request URL may be different than the initial, +   *         request URL., +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import org.junit.Ignore;, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +      if (!httpEngine.sameConnection(followUp)) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java, +      if (!engine.sameConnection(followUp)) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/Response.java, +   * The wire-level request that initiated this HTTP response. This is usually, +   * <strong>not</strong> the same request instance provided to the HTTP client:, +   *         may have added its own {@code Content-Encoding} header to enable, +   *         response compression., +   *     <li>It may be the request generated in response to an HTTP redirect., +   *         In this case the request URL may be different than the initial, +   *         request URL., +++ b/okhttp/src/main/java/com/squareup/okhttp/Route.java, +   * when it is null. When the address's proxy is null, the proxy selector is, +   * used., +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +import org.junit.Ignore;, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Ignore // https://github.com/square/okhttp/issues/810, +++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java, +      if (!httpEngine.sameConnection(followUp)) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java, +      if (!engine.sameConnection(followUp)) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java, +++ b/okhttp/src/main/java/com/squareup/okhttp/Response.java, +   * The wire-level request that initiated this HTTP response. This is usually, +   * <strong>not</strong> the same request instance provided to the HTTP client:, +   *         may have added its own {@code Content-Encoding} header to enable, +   *         response compression., +   *     <li>It may be the request generated in response to an HTTP redirect., +   *         In this case the request URL may be different than the initial, +   *         request URL., +++ b/okhttp/src/main/java/com/squareup/okhttp/Route.java, +   * when it is null. When the address's proxy is null, the proxy selector is, +   * used., +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +    if (transport != null && !transport.canReuseConnection()) {, +   * Returns true if an HTTP request for {@code followUp} can use the same, +   * engine as this connection., +  public boolean sameConnection(Request followUp) {, +    URL a = userRequest.url();]