[+++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +final class HttpDate {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +final class HttpDate {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/RequestHeaders.java, +final class RequestHeaders {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +final class HttpDate {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/RequestHeaders.java, +final class RequestHeaders {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/ResponseHeaders.java, +final class ResponseHeaders {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +final class HttpDate {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/RequestHeaders.java, +final class RequestHeaders {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/ResponseHeaders.java, +final class ResponseHeaders {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/RouteSelector.java, +final class RouteSelector {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +final class HttpDate {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/RequestHeaders.java, +final class RequestHeaders {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/ResponseHeaders.java, +final class ResponseHeaders {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/RouteSelector.java, +final class RouteSelector {, +++ b/src/test/java/com/squareup/okhttp/internal/net/http/NewURLConnectionTest.java, +    // TODO: test that request bodies are retransmitted on IP address failures, +, +    // TODO: pooled proxy failures are not reported to the proxy selector, +, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpDate.java, +final class HttpDate {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/RequestHeaders.java, +final class RequestHeaders {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/ResponseHeaders.java, +final class ResponseHeaders {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/RouteSelector.java, +final class RouteSelector {, +++ b/src/test/java/com/squareup/okhttp/internal/net/http/NewURLConnectionTest.java, +    // TODO: test that request bodies are retransmitted on IP address failures, +, +    // TODO: pooled proxy failures are not reported to the proxy selector, +, +++ b/src/test/java/com/squareup/okhttp/internal/net/http/URLConnectionTest.java, +import javax.net.ssl.SSLHandshakeException;, +    public void testServerShutdownOutput() throws Exception {, +        MockResponse responseAfter = new MockResponse(), +                .setBody("This comes after a busted connection");, +        server.enqueue(responseAfter);, +        server.enqueue(responseAfter); // Enqueue 2x because the broken connection may be reused., +        HttpURLConnection connection1 = client.open(server.getUrl("/a"));, +        connection1.setReadTimeout(100);, +        assertContent("This connection won't pool properly", connection1);, +        HttpURLConnection connection2 = client.open(server.getUrl("/b"));, +        connection2.setReadTimeout(100);, +        assertContent("This comes after a busted connection", connection2);, +, +        // Check that a fresh connection was created, either immediately or after attempting reuse., +        RecordedRequest requestAfter = server.takeRequest();, +        if (server.getRequestCount() == 3) {, +            requestAfter = server.takeRequest(); // The failure consumed a response., +        }, +        assertEquals(0, requestAfter.getSequenceNumber());, +    public void test_fixedLengthUpload_byteByByte() throws Exception {, +    public void testConnectViaHttpsToUntrustedServer() throws IOException, InterruptedException {, +        server.useHttps(sslContext.getSocketFactory(), false);, +        server.enqueue(new MockResponse()); // unused, +        server.play();, +, +        HttpURLConnection connection = client.open(server.getUrl("/foo"));, +        try {, +            connection.getInputStream();, +            fail();, +        } catch (SSLHandshakeException expected) {, +            assertTrue(expected.getCause() instanceof CertificateException);, +        }, +        assertEquals(0, server.getRequestCount());, +    }, +    public void testUnauthorizedResponseHandling() throws IOException {, +    public void testRedirectToAnotherOriginServer() throws Exception {, +                readAscii(client.open(server.getUrl("/")).getInputStream(), Integer.MAX_VALUE));, +    public void testGetKeepAlive() throws Exception {, +        URLConnection connection1 = client.open(server.getUrl(""));, +        connection1.setReadTimeout(100);, +        InputStream input = connection1.getInputStream();, +        server.shutdown();, +            HttpURLConnection connection2 = client.open(server.getUrl(""));, +            connection2.setReadTimeout(100);, +            connection2.getInputStream();]