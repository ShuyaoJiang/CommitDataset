[+++ b/build.gradle, +++ b/build.gradle, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    LogRecorder assertLogMatch(String pattern) {, +++ b/build.gradle, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    LogRecorder assertLogMatch(String pattern) {, +++ b/okhttp/src/main/java/okhttp3/Route.kt, +class Route(, +  fun requiresTunnel(): Boolean {, +    return address.sslSocketFactory() != null && proxy.type() == Proxy.Type.HTTP, +  }, +, +  override fun equals(other: Any?): Boolean {, +    return other is Route, +        && other.address == address, +        && other.proxy == proxy, +        && other.inetSocketAddress == inetSocketAddress, +  }, +, +  override fun hashCode(): Int {, +    var result = 17, +    result = 31 * result + address.hashCode(), +    result = 31 * result + proxy.hashCode(), +    result = 31 * result + inetSocketAddress.hashCode(), +    return result, +  }, +++ b/build.gradle, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java, +    LogRecorder assertLogMatch(String pattern) {, +++ b/okhttp/src/main/java/okhttp3/Route.kt, +class Route(, +  fun requiresTunnel(): Boolean {, +    return address.sslSocketFactory() != null && proxy.type() == Proxy.Type.HTTP, +  }, +, +  override fun equals(other: Any?): Boolean {, +    return other is Route, +        && other.address == address, +        && other.proxy == proxy, +        && other.inetSocketAddress == inetSocketAddress, +  }, +, +  override fun hashCode(): Int {, +    var result = 17, +    result = 31 * result + address.hashCode(), +    result = 31 * result + proxy.hashCode(), +    result = 31 * result + inetSocketAddress.hashCode(), +    return result, +  }, +++ b/okhttp/src/main/java/okhttp3/internal/http/RealInterceptorChain.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.http;, +, +import java.io.IOException;, +import java.util.List;, +import java.util.concurrent.TimeUnit;, +import javax.annotation.Nullable;, +import okhttp3.Call;, +import okhttp3.Connection;, +import okhttp3.Interceptor;, +import okhttp3.Request;, +import okhttp3.Response;, +import okhttp3.internal.connection.Exchange;, +import okhttp3.internal.connection.Transmitter;, +, +import static okhttp3.internal.Util.checkDuration;, +, +/**, + * A concrete interceptor chain that carries the entire interceptor chain: all application, + * interceptors, the OkHttp core, all network interceptors, and finally the network caller., + *, + * <p>If the chain is for an application interceptor then {@link #connection} must be null., + * Otherwise it is for a network interceptor and {@link #connection} must be non-null., + */, +public final class RealInterceptorChain implements Interceptor.Chain {, +  private final List<Interceptor> interceptors;, +  private final Transmitter transmitter;, +  private final @Nullable Exchange exchange;, +  private final int index;, +  private final Request request;, +  private final Call call;, +  private final int connectTimeout;, +  private final int readTimeout;, +  private final int writeTimeout;, +  private int calls;]