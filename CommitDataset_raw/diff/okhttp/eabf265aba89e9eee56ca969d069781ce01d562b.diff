[+++ /dev/null, +++ /dev/null, +++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.kt, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3.internal.platform;, +, +import android.os.Build;, +import android.util.Log;, +import java.io.IOException;, +import java.lang.reflect.Constructor;, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +import java.net.InetSocketAddress;, +import java.net.Socket;, +import java.security.NoSuchAlgorithmException;, +import java.security.cert.Certificate;, +import java.security.cert.TrustAnchor;, +import java.security.cert.X509Certificate;, +import java.util.List;, +import javax.annotation.Nullable;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLPeerUnverifiedException;, +import javax.net.ssl.SSLSocket;, +import javax.net.ssl.SSLSocketFactory;, +import javax.net.ssl.X509TrustManager;, +import okhttp3.Protocol;, +import okhttp3.internal.Util;, +import okhttp3.internal.tls.BasicTrustRootIndex;, +import okhttp3.internal.tls.CertificateChainCleaner;, +import okhttp3.internal.tls.TrustRootIndex;, +, +import static java.nio.charset.StandardCharsets.UTF_8;, +, +/** Android 5+. */, +class AndroidPlatform extends Platform {, +  private static final int MAX_LOG_LENGTH = 4000;, +, +  private final Class<?> sslParametersClass;, +  private final Class<?> sslSocketClass;, +  private final Method setUseSessionTickets;, +  private final Method setHostname;, +  private final Method getAlpnSelectedProtocol;, +  private final Method setAlpnProtocols;, +, +  private final CloseGuard closeGuard = CloseGuard.get();, +, +  AndroidPlatform(Class<?> sslParametersClass, Class<?> sslSocketClass, Method setUseSessionTickets,, +      Method setHostname, Method getAlpnSelectedProtocol, Method setAlpnProtocols) {, +    this.sslParametersClass = sslParametersClass;, +    this.sslSocketClass = sslSocketClass;, +    this.setUseSessionTickets = setUseSessionTickets;, +    this.setHostname = setHostname;, +    this.getAlpnSelectedProtocol = getAlpnSelectedProtocol;, +    this.setAlpnProtocols = setAlpnProtocols;, +  }, +, +  @Override public void connectSocket(Socket socket, InetSocketAddress address,, +      int connectTimeout) throws IOException {, +    try {, +      socket.connect(address, connectTimeout);, +    } catch (AssertionError e) {, +      if (Util.isAndroidGetsocknameError(e)) throw new IOException(e);, +      throw e;, +    } catch (ClassCastException e) {, +      // On android 8.0, socket.connect throws a ClassCastException due to a bug, +      // see https://issuetracker.google.com/issues/63649622, +      if (Build.VERSION.SDK_INT == 26) {, +        throw new IOException("Exception in connect", e);, +      } else {, +        throw e;, +      }, +    }, +  }, +, +  @Override protected @Nullable X509TrustManager trustManager(SSLSocketFactory sslSocketFactory) {, +    Object context = readFieldOrNull(sslSocketFactory, sslParametersClass, "sslParameters");, +    if (context == null) {, +      // If that didn't work, try the Google Play Services SSL provider before giving up. This, +      // must be loaded by the SSLSocketFactory's class loader., +      try {, +        Class<?> gmsSslParametersClass = Class.forName(, +            "com.google.android.gms.org.conscrypt.SSLParametersImpl", false,, +            sslSocketFactory.getClass().getClassLoader());, +        context = readFieldOrNull(sslSocketFactory, gmsSslParametersClass, "sslParameters");, +      } catch (ClassNotFoundException e) {, +        return super.trustManager(sslSocketFactory);]