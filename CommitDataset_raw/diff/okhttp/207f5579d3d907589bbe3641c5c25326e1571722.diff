[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      String[] statusParts = response.getStatus().split(" ", 3);, +      if (statusParts.length < 2) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      String[] statusParts = response.getStatus().split(" ", 3);, +      if (statusParts.length < 2) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    logger.log("<-- ", +        + response.code(), +        + (response.message().isEmpty() ? "" : ' ' + response.message()), +        + ' ' + response.request().url(), +        + " (" + tookMs + "ms" + (!logHeaders ? ", " + bodySize + " body" : "") + ')');, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      String[] statusParts = response.getStatus().split(" ", 3);, +      if (statusParts.length < 2) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    logger.log("<-- ", +        + response.code(), +        + (response.message().isEmpty() ? "" : ' ' + response.message()), +        + ' ' + response.request().url(), +        + " (" + tookMs + "ms" + (!logHeaders ? ", " + bodySize + " body" : "") + ')');, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +import static org.hamcrest.CoreMatchers.equalTo;, +import static org.junit.Assume.assumeThat;, +    assumeThat(response.protocol(), equalTo(Protocol.HTTP_2));, +        .assertLogMatch("<-- 200 " + url + " \\(\\d+ms, 0-byte body\\)"), +        .assertLogMatch("<-- 200 " + url + " \\(\\d+ms, 0-byte body\\)"), +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      String[] statusParts = response.getStatus().split(" ", 3);, +      if (statusParts.length < 2) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    logger.log("<-- ", +        + response.code(), +        + (response.message().isEmpty() ? "" : ' ' + response.message()), +        + ' ' + response.request().url(), +        + " (" + tookMs + "ms" + (!logHeaders ? ", " + bodySize + " body" : "") + ')');, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +import static org.hamcrest.CoreMatchers.equalTo;, +import static org.junit.Assume.assumeThat;, +    assumeThat(response.protocol(), equalTo(Protocol.HTTP_2));, +        .assertLogMatch("<-- 200 " + url + " \\(\\d+ms, 0-byte body\\)"), +        .assertLogMatch("<-- 200 " + url + " \\(\\d+ms, 0-byte body\\)"), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      String[] statusParts = response.getStatus().split(" ", 3);, +      if (statusParts.length < 2) {, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +    logger.log("<-- ", +        + response.code(), +        + (response.message().isEmpty() ? "" : ' ' + response.message()), +        + ' ' + response.request().url(), +        + " (" + tookMs + "ms" + (!logHeaders ? ", " + bodySize + " body" : "") + ')');, +++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java, +import static org.hamcrest.CoreMatchers.equalTo;, +import static org.junit.Assume.assumeThat;, +    assumeThat(response.protocol(), equalTo(Protocol.HTTP_2));, +        .assertLogMatch("<-- 200 " + url + " \\(\\d+ms, 0-byte body\\)"), +        .assertLogMatch("<-- 200 " + url + " \\(\\d+ms, 0-byte body\\)"), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java, +    assertEquals("", response.message());, +    assertEquals("", response.message());, +    assertEquals("", response.message());]