[+++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +      if (entity != null) {, +          // Buffer short, fixed-length request bodies. This costs memory, but permits the request, +          // to be transparently retried if there is a connection failure., +    }, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +      if (entity != null) {, +          // Buffer short, fixed-length request bodies. This costs memory, but permits the request, +          // to be transparently retried if there is a connection failure., +    }, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +import org.apache.http.client.methods.HttpPost;, +, +  @Test public void noEntity() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    HttpPost post = new HttpPost(server.getUrl("/").toURI());, +    client.execute(post);, +  }, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +      if (entity != null) {, +          // Buffer short, fixed-length request bodies. This costs memory, but permits the request, +          // to be transparently retried if there is a connection failure., +    }, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +import org.apache.http.client.methods.HttpPost;, +, +  @Test public void noEntity() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    HttpPost post = new HttpPost(server.getUrl("/").toURI());, +    client.execute(post);, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +      if (entity != null) {, +          // Buffer short, fixed-length request bodies. This costs memory, but permits the request, +          // to be transparently retried if there is a connection failure., +    }, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +import org.apache.http.client.methods.HttpPost;, +, +  @Test public void noEntity() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    HttpPost post = new HttpPost(server.getUrl("/").toURI());, +    client.execute(post);, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +++ /dev/null, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +      if (entity != null) {, +          // Buffer short, fixed-length request bodies. This costs memory, but permits the request, +          // to be transparently retried if there is a connection failure., +    }, +++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java, +import org.apache.http.client.methods.HttpPost;, +, +  @Test public void noEntity() throws Exception {, +    server.enqueue(new MockResponse());, +    server.play();, +, +    HttpPost post = new HttpPost(server.getUrl("/").toURI());, +    client.execute(post);, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java, +    return getMtu != null ? new Java5(getMtu) : new Platform();, +  private static class Java5 extends Platform {, +    private Java5(Method getMtu) {, +  /**, +   * Android version 2.3 and newer support TLS session tickets and server name, +   * indication (SNI)., +   */, +  private static class Android23 extends Java5 {, +  /**, +   * OpenJDK 7 plus {@code org.mortbay.jetty.npn/npn-boot} on the boot class, +   * path., +   */, +  private static class JdkWithJettyNpnPlatform extends Java5 {]