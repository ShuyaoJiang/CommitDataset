[+++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import okio.Buffer;, +import okio.Timeout;, +      // This source closes the snapshot when it is closed., +      bodySource = Okio.buffer(new Source() {, +        @Override public long read(Buffer sink, long byteCount) throws IOException {, +          return in.read(sink, byteCount);, +        }, +        @Override public Timeout timeout() {, +          return in.timeout();, +        }, +          in.close();, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import okio.Buffer;, +import okio.Timeout;, +      // This source closes the snapshot when it is closed., +      bodySource = Okio.buffer(new Source() {, +        @Override public long read(Buffer sink, long byteCount) throws IOException {, +          return in.read(sink, byteCount);, +        }, +        @Override public Timeout timeout() {, +          return in.timeout();, +        }, +          in.close();, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +    if (network.code() == HTTP_NOT_MODIFIED) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import okio.Buffer;, +import okio.Timeout;, +      // This source closes the snapshot when it is closed., +      bodySource = Okio.buffer(new Source() {, +        @Override public long read(Buffer sink, long byteCount) throws IOException {, +          return in.read(sink, byteCount);, +        }, +        @Override public Timeout timeout() {, +          return in.timeout();, +        }, +          in.close();, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +    if (network.code() == HTTP_NOT_MODIFIED) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/NameValueBlockReader.java, +import okio.Timeout;, +  public NameValueBlockReader(final BufferedSource source) {, +    Source throttleSource = new Source() {, +      @Override public long read(Buffer sink, long byteCount), +          throws IOException {, +        long read = source.read(sink, Math.min(byteCount, compressedLimit));, +, +      @Override public void close() throws IOException {, +        source.close();, +      }, +, +      @Override public Timeout timeout() {, +        return source.timeout();, +      }]