[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, +  private NewWebSocket.Listener webSocketListener;, +  public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, +  public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, +  private NewWebSocket.Listener webSocketListener;, +  public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, +  public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealNewWebSocket;, +    RealNewWebSocket.Streams streams = new RealNewWebSocket.Streams(false, source, sink) {, +    RealNewWebSocket webSocket = new RealNewWebSocket(fancyRequest,, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, +  private NewWebSocket.Listener webSocketListener;, +  public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, +  public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealNewWebSocket;, +    RealNewWebSocket.Streams streams = new RealNewWebSocket.Streams(false, source, sink) {, +    RealNewWebSocket webSocket = new RealNewWebSocket(fancyRequest,, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private NewWebSocket newWebSocket(String path, NewWebSocket.Listener listener) {, +    newWebSocket("/runCase?case=" + number + "&agent=okhttp", new NewWebSocket.Listener() {, +      @Override public void onOpen(NewWebSocket webSocket, Response response) {, +      @Override public void onMessage(final NewWebSocket webSocket, final ByteString bytes) {, +      @Override public void onMessage(final NewWebSocket webSocket, final String text) {, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/getCaseCount", new NewWebSocket.Listener() {, +      @Override public void onMessage(NewWebSocket webSocket, String text) {, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/updateReports?agent=" + Version.userAgent(), new NewWebSocket.Listener() {, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, +  private NewWebSocket.Listener webSocketListener;, +  public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, +  public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealNewWebSocket;, +    RealNewWebSocket.Streams streams = new RealNewWebSocket.Streams(false, source, sink) {, +    RealNewWebSocket webSocket = new RealNewWebSocket(fancyRequest,, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private NewWebSocket newWebSocket(String path, NewWebSocket.Listener listener) {, +    newWebSocket("/runCase?case=" + number + "&agent=okhttp", new NewWebSocket.Listener() {, +      @Override public void onOpen(NewWebSocket webSocket, Response response) {, +      @Override public void onMessage(final NewWebSocket webSocket, final ByteString bytes) {, +      @Override public void onMessage(final NewWebSocket webSocket, final String text) {, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/getCaseCount", new NewWebSocket.Listener() {, +      @Override public void onMessage(NewWebSocket webSocket, String text) {, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/updateReports?agent=" + Version.userAgent(), new NewWebSocket.Listener() {, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +++ b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java, +  public final NewWebSocket webSocket;, +  public RecordedResponse(Request request, Response response, NewWebSocket webSocket, String body,, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, +  private NewWebSocket.Listener webSocketListener;, +  public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {, +  public NewWebSocket.Listener getWebSocketListener() {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import okhttp3.internal.ws.RealNewWebSocket;, +    RealNewWebSocket.Streams streams = new RealNewWebSocket.Streams(false, source, sink) {, +    RealNewWebSocket webSocket = new RealNewWebSocket(fancyRequest,, +++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java, +  private NewWebSocket newWebSocket(String path, NewWebSocket.Listener listener) {, +    newWebSocket("/runCase?case=" + number + "&agent=okhttp", new NewWebSocket.Listener() {, +      @Override public void onOpen(NewWebSocket webSocket, Response response) {, +      @Override public void onMessage(final NewWebSocket webSocket, final ByteString bytes) {, +      @Override public void onMessage(final NewWebSocket webSocket, final String text) {, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/getCaseCount", new NewWebSocket.Listener() {, +      @Override public void onMessage(NewWebSocket webSocket, String text) {, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +    newWebSocket("/updateReports?agent=" + Version.userAgent(), new NewWebSocket.Listener() {, +      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {, +      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {, +++ b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java, +  public final NewWebSocket webSocket;, +  public RecordedResponse(Request request, Response response, NewWebSocket webSocket, String body,, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    // Ensure the GOAWAY frame has time to be read and processed., +    Thread.sleep(500);, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java, +import okhttp3.NewWebSocket;, +  private NewWebSocket.Listener webSocketListener;, +  public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {]