[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java, +  private final ExecutorService executor = Executors.newCachedThreadPool(, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java, +  private final ExecutorService executor = Executors.newCachedThreadPool(, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +      httpConnection = new HttpConnection(pool, this, socket);, +    boolean useNpn = false;, +    if (route.modernTls) {, +      boolean http2 = route.address.protocols.contains(Protocol.HTTP_2);, +      boolean spdy3 = route.address.protocols.contains(Protocol.SPDY_3);, +      if (http2 && spdy3) {, +        useNpn = true;, +      } else if (http2) {, +        useNpn = true;, +      } else if (spdy3) {, +        useNpn = true;, +      spdyConnection = new SpdyConnection.Builder(route.address.getUriHost(), true, socket), +      httpConnection = new HttpConnection(pool, this, socket);, +    if (httpConnection != null) return httpConnection.isReadable();, +    return true; // SPDY connections, and connections before connect() are both optimistic., +    HttpConnection tunnelConnection = new HttpConnection(pool, this, socket);, +          if (tunnelConnection.bufferSize() > 0) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java, +  private final ExecutorService executor = Executors.newCachedThreadPool(, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +      httpConnection = new HttpConnection(pool, this, socket);, +    boolean useNpn = false;, +    if (route.modernTls) {, +      boolean http2 = route.address.protocols.contains(Protocol.HTTP_2);, +      boolean spdy3 = route.address.protocols.contains(Protocol.SPDY_3);, +      if (http2 && spdy3) {, +        useNpn = true;, +      } else if (http2) {, +        useNpn = true;, +      } else if (spdy3) {, +        useNpn = true;, +      spdyConnection = new SpdyConnection.Builder(route.address.getUriHost(), true, socket), +      httpConnection = new HttpConnection(pool, this, socket);, +    if (httpConnection != null) return httpConnection.isReadable();, +    return true; // SPDY connections, and connections before connect() are both optimistic., +    HttpConnection tunnelConnection = new HttpConnection(pool, this, socket);, +          if (tunnelConnection.bufferSize() > 0) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpConnection.java, +import java.net.SocketTimeoutException;, +  private final Socket socket;, +  public HttpConnection(ConnectionPool pool, Connection connection, Socket socket), +      throws IOException {, +    this.socket = socket;, +    this.source = Okio.buffer(Okio.source(socket.getInputStream()));, +    this.sink = Okio.buffer(Okio.sink(socket.getOutputStream()));, +  /** Returns the number of buffered bytes immediately readable. */, +  public long bufferSize() {, +    return source.buffer().size();, +  }, +, +  /** Test for a stale socket. */, +  public boolean isReadable() {, +    try {, +      int readTimeout = socket.getSoTimeout();, +      try {, +        socket.setSoTimeout(1);, +        if (source.exhausted()) {, +          return false; // Stream is exhausted; socket is closed., +        }, +        return true;, +      } finally {, +        socket.setSoTimeout(readTimeout);, +      }, +    } catch (SocketTimeoutException ignored) {, +      return true; // Read timed out; socket is good., +    } catch (IOException e) {, +      return false; // Couldn't read; socket is closed., +    }, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java, +  private final ExecutorService executor = Executors.newCachedThreadPool(, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +      httpConnection = new HttpConnection(pool, this, socket);, +    boolean useNpn = false;, +    if (route.modernTls) {, +      boolean http2 = route.address.protocols.contains(Protocol.HTTP_2);, +      boolean spdy3 = route.address.protocols.contains(Protocol.SPDY_3);, +      if (http2 && spdy3) {, +        useNpn = true;, +      } else if (http2) {, +        useNpn = true;, +      } else if (spdy3) {, +        useNpn = true;, +      spdyConnection = new SpdyConnection.Builder(route.address.getUriHost(), true, socket), +      httpConnection = new HttpConnection(pool, this, socket);, +    if (httpConnection != null) return httpConnection.isReadable();, +    return true; // SPDY connections, and connections before connect() are both optimistic., +    HttpConnection tunnelConnection = new HttpConnection(pool, this, socket);, +          if (tunnelConnection.bufferSize() > 0) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpConnection.java, +import java.net.SocketTimeoutException;, +  private final Socket socket;, +  public HttpConnection(ConnectionPool pool, Connection connection, Socket socket), +      throws IOException {]