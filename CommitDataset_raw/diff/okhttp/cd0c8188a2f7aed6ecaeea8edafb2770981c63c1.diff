[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Platform.get().afterHandshake(sslSocket);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Platform.get().afterHandshake(sslSocket);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +import static org.junit.Assert.fail;, +  public MockDuplexResponseBody requestIOException() {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        requestBody.exhausted();, +        fail();, +      } catch (IOException expected) {, +      }, +    });, +    return this;, +  }, +, +  public MockDuplexResponseBody sleep(long duration, TimeUnit unit) {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        Thread.sleep(unit.toMillis(duration));, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +      }, +    });, +    return this;, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Platform.get().afterHandshake(sslSocket);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +import static org.junit.Assert.fail;, +  public MockDuplexResponseBody requestIOException() {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        requestBody.exhausted();, +        fail();, +      } catch (IOException expected) {, +      }, +    });, +    return this;, +  }, +, +  public MockDuplexResponseBody sleep(long duration, TimeUnit unit) {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        Thread.sleep(unit.toMillis(duration));, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +      }, +    });, +    return this;, +  }, +, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +      } else if (requestBody.isDuplex()) {, +        logger.log("--> END " + request.method() + " (duplex request body omitted)");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Platform.get().afterHandshake(sslSocket);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +import static org.junit.Assert.fail;, +  public MockDuplexResponseBody requestIOException() {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        requestBody.exhausted();, +        fail();, +      } catch (IOException expected) {, +      }, +    });, +    return this;, +  }, +, +  public MockDuplexResponseBody sleep(long duration, TimeUnit unit) {, +    actions.add((request, requestBody, responseBody) -> {, +      try {, +        Thread.sleep(unit.toMillis(duration));, +      } catch (InterruptedException e) {, +        throw new AssertionError(e);, +      }, +    });, +    return this;, +  }, +, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +      } else if (requestBody.isDuplex()) {, +        logger.log("--> END " + request.method() + " (duplex request body omitted)");, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +  public void requestFailed(Call call, IOException ioe) {, +    logWithTime("requestFailed: " + ioe);, +  }, +, +  @Override, +  public void responseFailed(Call call, IOException ioe) {, +    logWithTime("responseFailed: " + ioe);, +  }, +, +  @Override, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +            Platform.get().afterHandshake(sslSocket);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java]