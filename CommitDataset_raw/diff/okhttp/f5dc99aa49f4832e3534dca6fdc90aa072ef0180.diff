[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Spdy3ConnectionTest.java, +    sink.write(new Buffer().writeUtf8("f"), 1);, +      sink.flush(); // This will time out waiting on the write window., +  @Test public void outgoingWritesAreBatched() throws Exception {, +    // write the mocking script, +    peer.acceptFrame(); // SYN_STREAM, +    peer.sendFrame().synReply(false, 1, headerEntries("a", "android"));, +    peer.acceptFrame(); // DATA, +    peer.play();, +, +    // play it back, +    SpdyConnection connection = connection(peer, SPDY3);, +    SpdyStream stream = connection.newStream(headerEntries("b", "banana"), true, true);, +, +    // two outgoing writes, +    Sink sink = stream.getSink();, +    sink.write(new Buffer().writeUtf8("abcde"), 5);, +    sink.write(new Buffer().writeUtf8("fghij"), 5);, +    sink.close();, +, +    // verify the peer received one incoming frame, +    assertEquals(TYPE_HEADERS, peer.takeFrame().type);, +    MockSpdyPeer.InFrame data = peer.takeFrame();, +    assertEquals(TYPE_DATA, data.type);, +    assertTrue(Arrays.equals("abcdefghij".getBytes("UTF-8"), data.data));, +    assertTrue(data.inFinished);, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Spdy3ConnectionTest.java, +    sink.write(new Buffer().writeUtf8("f"), 1);, +      sink.flush(); // This will time out waiting on the write window., +  @Test public void outgoingWritesAreBatched() throws Exception {, +    // write the mocking script, +    peer.acceptFrame(); // SYN_STREAM, +    peer.sendFrame().synReply(false, 1, headerEntries("a", "android"));, +    peer.acceptFrame(); // DATA, +    peer.play();, +, +    // play it back, +    SpdyConnection connection = connection(peer, SPDY3);, +    SpdyStream stream = connection.newStream(headerEntries("b", "banana"), true, true);, +, +    // two outgoing writes, +    Sink sink = stream.getSink();, +    sink.write(new Buffer().writeUtf8("abcde"), 5);, +    sink.write(new Buffer().writeUtf8("fghij"), 5);, +    sink.close();, +, +    // verify the peer received one incoming frame, +    assertEquals(TYPE_HEADERS, peer.takeFrame().type);, +    MockSpdyPeer.InFrame data = peer.takeFrame();, +    assertEquals(TYPE_DATA, data.type);, +    assertTrue(Arrays.equals("abcdefghij".getBytes("UTF-8"), data.data));, +    assertTrue(data.inFinished);, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java, +    private static final long EMIT_BUFFER_SIZE = 16384;, +, +    /**, +     * Buffer of outgoing data. This batches writes of small writes into this sink as larges, +     * frames written to the outgoing connection. Batching saves the (small) framing overhead., +     */, +    private final Buffer sendBuffer = new Buffer();, +, +      sendBuffer.write(source, byteCount);, +      while (sendBuffer.size() >= EMIT_BUFFER_SIZE) {, +        emitDataFrame(false);, +      }, +    }, +, +    /**, +     * Emit a single data frame to the connection. The frame's size be limited by this stream's, +     * write window. This method will block until the write window is nonempty., +     */, +    private void emitDataFrame(boolean outFinished) throws IOException {, +        toWrite = Math.min(bytesLeftInWriteWindow, sendBuffer.size());, +      connection.writeData(id, outFinished && toWrite == sendBuffer.size(), sendBuffer, toWrite);, +      while (sendBuffer.size() > 0) {, +        emitDataFrame(false);, +      }, +        // Emit the remaining data, setting the END_STREAM flag on the last frame., +        if (sendBuffer.size() > 0) {, +          while (sendBuffer.size() > 0) {, +            emitDataFrame(true);, +          }, +        } else {, +          // Send an empty frame just so we can set the END_STREAM flag., +      }]