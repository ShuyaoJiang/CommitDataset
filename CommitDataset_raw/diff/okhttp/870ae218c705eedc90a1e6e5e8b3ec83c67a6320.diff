[+++ b/README.md, +Downloadable .jars can be found on the [GitHub download page][1]., +, +You can also depend on the .jar through Maven:, +    <groupId>com.squareup</groupId>, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with HTTPS., +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets were broken, and so HTTPS tests will time out when run on such devices., +Run OkHttp tests on the desktop with Maven. Running SPDY tests on the desktop uses [Jetty-NPN](http://wiki.eclipse.org/Jetty/Feature/NPN) which requires OpenJDK 7+., +Test on a USB-attached Android using [Vogar](https://code.google.com/p/vogar/). Unfortunately `dx` requires that you build with Java 6, otherwise the test class will be silently omitted from the `.dex` file., + [1]: http://github.com/square/okhttp/downloads, +++ b/README.md, +Downloadable .jars can be found on the [GitHub download page][1]., +, +You can also depend on the .jar through Maven:, +    <groupId>com.squareup</groupId>, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with HTTPS., +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets were broken, and so HTTPS tests will time out when run on such devices., +Run OkHttp tests on the desktop with Maven. Running SPDY tests on the desktop uses [Jetty-NPN](http://wiki.eclipse.org/Jetty/Feature/NPN) which requires OpenJDK 7+., +Test on a USB-attached Android using [Vogar](https://code.google.com/p/vogar/). Unfortunately `dx` requires that you build with Java 6, otherwise the test class will be silently omitted from the `.dex` file., + [1]: http://github.com/square/okhttp/downloads, +++ /dev/null, +++ b/README.md, +Downloadable .jars can be found on the [GitHub download page][1]., +, +You can also depend on the .jar through Maven:, +    <groupId>com.squareup</groupId>, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with HTTPS., +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets were broken, and so HTTPS tests will time out when run on such devices., +Run OkHttp tests on the desktop with Maven. Running SPDY tests on the desktop uses [Jetty-NPN](http://wiki.eclipse.org/Jetty/Feature/NPN) which requires OpenJDK 7+., +Test on a USB-attached Android using [Vogar](https://code.google.com/p/vogar/). Unfortunately `dx` requires that you build with Java 6, otherwise the test class will be silently omitted from the `.dex` file., + [1]: http://github.com/square/okhttp/downloads, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +      HostnameVerifier hostnameVerifier, OkAuthenticator authenticator, Proxy proxy), +      throws UnknownHostException {, +          && equal(this.authenticator, that.authenticator);, +++ b/README.md, +Downloadable .jars can be found on the [GitHub download page][1]., +, +You can also depend on the .jar through Maven:, +    <groupId>com.squareup</groupId>, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with HTTPS., +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets were broken, and so HTTPS tests will time out when run on such devices., +Run OkHttp tests on the desktop with Maven. Running SPDY tests on the desktop uses [Jetty-NPN](http://wiki.eclipse.org/Jetty/Feature/NPN) which requires OpenJDK 7+., +Test on a USB-attached Android using [Vogar](https://code.google.com/p/vogar/). Unfortunately `dx` requires that you build with Java 6, otherwise the test class will be silently omitted from the `.dex` file., + [1]: http://github.com/square/okhttp/downloads, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +      HostnameVerifier hostnameVerifier, OkAuthenticator authenticator, Proxy proxy), +      throws UnknownHostException {, +          && equal(this.authenticator, that.authenticator);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    if (route.modernTls) {, +    if (route.modernTls, +        && (selectedProtocol = platform.getNpnSelectedProtocol(sslSocket)) != null) {, +++ b/README.md, +Downloadable .jars can be found on the [GitHub download page][1]., +, +You can also depend on the .jar through Maven:, +    <groupId>com.squareup</groupId>, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with HTTPS., +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets were broken, and so HTTPS tests will time out when run on such devices., +Run OkHttp tests on the desktop with Maven. Running SPDY tests on the desktop uses [Jetty-NPN](http://wiki.eclipse.org/Jetty/Feature/NPN) which requires OpenJDK 7+., +Test on a USB-attached Android using [Vogar](https://code.google.com/p/vogar/). Unfortunately `dx` requires that you build with Java 6, otherwise the test class will be silently omitted from the `.dex` file., + [1]: http://github.com/square/okhttp/downloads, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +      HostnameVerifier hostnameVerifier, OkAuthenticator authenticator, Proxy proxy), +      throws UnknownHostException {, +          && equal(this.authenticator, that.authenticator);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    if (route.modernTls) {, +    if (route.modernTls, +        && (selectedProtocol = platform.getNpnSelectedProtocol(sslSocket)) != null) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.tls.OkHostnameVerifier;, +  private Set<Route> failedRoutes = Collections.synchronizedSet(new LinkedHashSet<Route>());, +   * <p>If unset, the {@link Authenticator#setDefault system-wide default}, +    OkHttpClient result = new OkHttpClient();, +    result.failedRoutes = failedRoutes;, +        : new OkHostnameVerifier();, +++ b/README.md, +Downloadable .jars can be found on the [GitHub download page][1]., +, +You can also depend on the .jar through Maven:, +    <groupId>com.squareup</groupId>, +OkHttp uses the platform's [ProxySelector][2]. Prior to Android 4.0, `ProxySelector` didn't honor the `proxyHost` and `proxyPort` system properties for HTTPS connections. Work around this by specifying the `https.proxyHost` and `https.proxyPort` system properties when using a proxy with HTTPS., +OkHttp's test suite creates an in-process HTTPS server. Prior to Android 2.3, SSL server sockets were broken, and so HTTPS tests will time out when run on such devices., +Run OkHttp tests on the desktop with Maven. Running SPDY tests on the desktop uses [Jetty-NPN](http://wiki.eclipse.org/Jetty/Feature/NPN) which requires OpenJDK 7+., +Test on a USB-attached Android using [Vogar](https://code.google.com/p/vogar/). Unfortunately `dx` requires that you build with Java 6, otherwise the test class will be silently omitted from the `.dex` file., + [1]: http://github.com/square/okhttp/downloads, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +      HostnameVerifier hostnameVerifier, OkAuthenticator authenticator, Proxy proxy), +      throws UnknownHostException {, +          && equal(this.authenticator, that.authenticator);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    if (route.modernTls) {, +    if (route.modernTls, +        && (selectedProtocol = platform.getNpnSelectedProtocol(sslSocket)) != null) {]