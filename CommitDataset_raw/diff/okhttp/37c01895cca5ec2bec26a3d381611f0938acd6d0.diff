[+++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    //Use MTU-sized buffers to send fewer packets., +    int mtu = Platform.get().getMtu(socket);, +    if (mtu < 1024) mtu = 1024;, +    if (mtu > 8192) mtu = 8192;, +    in = new BufferedInputStream(in, mtu);, +    out = new BufferedOutputStream(out, mtu);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    //Use MTU-sized buffers to send fewer packets., +    int mtu = Platform.get().getMtu(socket);, +    if (mtu < 1024) mtu = 1024;, +    if (mtu > 8192) mtu = 8192;, +    in = new BufferedInputStream(in, mtu);, +    out = new BufferedOutputStream(out, mtu);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java, +import com.squareup.okhttp.internal.http.ResponseHeaders;, +      OkHttpClient client, Request request, Response.Receiver responseReceiver) {, +    Job job = new Job(this, client, request, responseReceiver);, +    List<Job> jobs = enqueuedJobs.get(job.tag());, +    private final ResponseHeaders responseHeaders;, +    RealResponseBody(ResponseHeaders responseHeaders, InputStream in) {, +      this.responseHeaders = responseHeaders;, +    @Override public boolean ready() throws IOException {, +      return true;, +    }, +, +    @Override public MediaType contentType() {, +      String contentType = responseHeaders.getContentType();, +      return contentType != null ? MediaType.parse(contentType) : null;, +      return responseHeaders.getContentLength();, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    //Use MTU-sized buffers to send fewer packets., +    int mtu = Platform.get().getMtu(socket);, +    if (mtu < 1024) mtu = 1024;, +    if (mtu > 8192) mtu = 8192;, +    in = new BufferedInputStream(in, mtu);, +    out = new BufferedOutputStream(out, mtu);, +++ b/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java, +import com.squareup.okhttp.internal.http.ResponseHeaders;, +      OkHttpClient client, Request request, Response.Receiver responseReceiver) {, +    Job job = new Job(this, client, request, responseReceiver);, +    List<Job> jobs = enqueuedJobs.get(job.tag());, +    private final ResponseHeaders responseHeaders;, +    RealResponseBody(ResponseHeaders responseHeaders, InputStream in) {, +      this.responseHeaders = responseHeaders;, +    @Override public boolean ready() throws IOException {, +      return true;, +    }, +, +    @Override public MediaType contentType() {, +      String contentType = responseHeaders.getContentType();, +      return contentType != null ? MediaType.parse(contentType) : null;, +      return responseHeaders.getContentLength();, +++ b/okhttp/src/main/java/com/squareup/okhttp/Job.java, +import com.squareup.okhttp.internal.http.HttpAuthenticator;, +import com.squareup.okhttp.internal.http.HttpEngine;, +import com.squareup.okhttp.internal.http.HttpTransport;, +import com.squareup.okhttp.internal.http.HttpsEngine;, +import com.squareup.okhttp.internal.http.Policy;, +import com.squareup.okhttp.internal.http.RawHeaders;, +import java.net.ProtocolException;, +import java.net.Proxy;, +import java.net.URL;, +import static com.squareup.okhttp.internal.Util.getEffectivePort;, +import static com.squareup.okhttp.internal.http.HttpURLConnectionImpl.HTTP_MOVED_PERM;, +import static com.squareup.okhttp.internal.http.HttpURLConnectionImpl.HTTP_MOVED_TEMP;, +import static com.squareup.okhttp.internal.http.HttpURLConnectionImpl.HTTP_MULT_CHOICE;, +import static com.squareup.okhttp.internal.http.HttpURLConnectionImpl.HTTP_PROXY_AUTH;, +import static com.squareup.okhttp.internal.http.HttpURLConnectionImpl.HTTP_SEE_OTHER;, +import static com.squareup.okhttp.internal.http.HttpURLConnectionImpl.HTTP_TEMP_REDIRECT;, +import static com.squareup.okhttp.internal.http.HttpURLConnectionImpl.HTTP_UNAUTHORIZED;, +final class Job implements Runnable, Policy {, +  private final Dispatcher dispatcher;, +  private final OkHttpClient client;, +  private final Response.Receiver responseReceiver;, +, +  /** The request; possibly a consequence of redirects or auth headers. */, +  private Request request;, +, +  public Job(Dispatcher dispatcher, OkHttpClient client, Request request,, +    this.client = client;, +  @Override public int getChunkLength() {, +    return request.body().contentLength() == -1 ? HttpTransport.DEFAULT_CHUNK_LENGTH : -1;, +  }, +, +  @Override public long getFixedContentLength() {, +    return request.body().contentLength();, +  }, +, +  @Override public boolean getUseCaches() {, +    return false; // TODO., +  }, +, +  @Override public HttpURLConnection getHttpConnectionToCache() {, +    return null;, +  }, +, +  @Override public URL getURL() {, +    return request.url();, +  }]