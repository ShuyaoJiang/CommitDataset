[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +      bytesOut.writeHexadecimalUnsignedLong(chunkSize);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +      bytesOut.writeHexadecimalUnsignedLong(chunkSize);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +      bytesOut.writeHexadecimalUnsignedLong(chunkSize);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +      bytesOut.writeHexadecimalUnsignedLong(chunkSize);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Test public void malformedChunkSize() throws IOException {, +    server.enqueue(new MockResponse().setBody("5:x\r\nABCDE\r\n0\r\n\r\n"), +        .clearHeaders(), +        .addHeader("Transfer-encoding: chunked"));, +, +    URLConnection connection = client.open(server.getUrl("/"));, +    try {, +      readAscii(connection.getInputStream(), Integer.MAX_VALUE);, +      fail();, +    } catch (IOException e) {, +    }, +  }, +, +  @Test public void extensionAfterChunkSize() throws IOException {, +    server.enqueue(new MockResponse().setBody("5;x\r\nABCDE\r\n0\r\n\r\n"), +        .clearHeaders(), +        .addHeader("Transfer-encoding: chunked"));, +, +    HttpURLConnection connection = client.open(server.getUrl("/"));, +    assertContent("ABCDE", connection);, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +      bytesOut.writeHexadecimalUnsignedLong(chunkSize);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Test public void malformedChunkSize() throws IOException {, +    server.enqueue(new MockResponse().setBody("5:x\r\nABCDE\r\n0\r\n\r\n"), +        .clearHeaders(), +        .addHeader("Transfer-encoding: chunked"));, +, +    URLConnection connection = client.open(server.getUrl("/"));, +    try {, +      readAscii(connection.getInputStream(), Integer.MAX_VALUE);, +      fail();, +    } catch (IOException e) {, +    }, +  }, +, +  @Test public void extensionAfterChunkSize() throws IOException {, +    server.enqueue(new MockResponse().setBody("5;x\r\nABCDE\r\n0\r\n\r\n"), +        .clearHeaders(), +        .addHeader("Transfer-encoding: chunked"));, +, +    HttpURLConnection connection = client.open(server.getUrl("/"));, +    assertContent("ABCDE", connection);, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Cache.java, +      sink.writeDecimalLong(varyHeaders.size());, +      sink.writeDecimalLong(responseHeaders.size());, +        sink.writeDecimalLong(certificates.size());, +      long result = source.readDecimalLong();, +      String line = source.readUtf8LineStrict();, +      if (result < 0 || result > Integer.MAX_VALUE || !line.isEmpty()) {, +        throw new IOException("expected an int but was \"" + result + line + "\"");, +      }, +      return (int) result;, +      throw new IOException(e.getMessage());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java, +        localhost = new SslContextBuilder(InetAddress.getByName(null).getHostName()).build();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +      bytesOut.writeHexadecimalUnsignedLong(chunkSize);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  @Test public void malformedChunkSize() throws IOException {, +    server.enqueue(new MockResponse().setBody("5:x\r\nABCDE\r\n0\r\n\r\n"), +        .clearHeaders(), +        .addHeader("Transfer-encoding: chunked"));, +, +    URLConnection connection = client.open(server.getUrl("/"));, +    try {]