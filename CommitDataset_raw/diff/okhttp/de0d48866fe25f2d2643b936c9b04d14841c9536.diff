[+++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +  @Test public void addPathSegments() throws Exception {, +    HttpUrl base = HttpUrl.parse("http://host/a/b/c");, +, +    // Add a string with zero slashes: resulting URL gains one slash., +    assertEquals("/a/b/c/", base.newBuilder().addPathSegments("").build().encodedPath());, +    assertEquals("/a/b/c/d", base.newBuilder().addPathSegments("d").build().encodedPath());, +, +    // Add a string with one slash: resulting URL gains two slashes., +    assertEquals("/a/b/c//", base.newBuilder().addPathSegments("/").build().encodedPath());, +    assertEquals("/a/b/c/d/", base.newBuilder().addPathSegments("d/").build().encodedPath());, +    assertEquals("/a/b/c//d", base.newBuilder().addPathSegments("/d").build().encodedPath());, +, +    // Add a string with two slashes: resulting URL gains three slashes., +    assertEquals("/a/b/c///", base.newBuilder().addPathSegments("//").build().encodedPath());, +    assertEquals("/a/b/c//d/", base.newBuilder().addPathSegments("/d/").build().encodedPath());, +    assertEquals("/a/b/c/d//", base.newBuilder().addPathSegments("d//").build().encodedPath());, +    assertEquals("/a/b/c///d", base.newBuilder().addPathSegments("//d").build().encodedPath());, +    assertEquals("/a/b/c/d/e/f", base.newBuilder().addPathSegments("d/e/f").build().encodedPath());, +  }, +, +  @Test public void addPathSegmentsOntoTrailingSlash() throws Exception {, +    HttpUrl base = HttpUrl.parse("http://host/a/b/c/");, +, +    // Add a string with zero slashes: resulting URL gains zero slashes., +    assertEquals("/a/b/c/", base.newBuilder().addPathSegments("").build().encodedPath());, +    assertEquals("/a/b/c/d", base.newBuilder().addPathSegments("d").build().encodedPath());, +, +    // Add a string with one slash: resulting URL gains one slash., +    assertEquals("/a/b/c//", base.newBuilder().addPathSegments("/").build().encodedPath());, +    assertEquals("/a/b/c/d/", base.newBuilder().addPathSegments("d/").build().encodedPath());, +    assertEquals("/a/b/c//d", base.newBuilder().addPathSegments("/d").build().encodedPath());, +, +    // Add a string with two slashes: resulting URL gains two slashes., +    assertEquals("/a/b/c///", base.newBuilder().addPathSegments("//").build().encodedPath());, +    assertEquals("/a/b/c//d/", base.newBuilder().addPathSegments("/d/").build().encodedPath());, +    assertEquals("/a/b/c/d//", base.newBuilder().addPathSegments("d//").build().encodedPath());, +    assertEquals("/a/b/c///d", base.newBuilder().addPathSegments("//d").build().encodedPath());, +    assertEquals("/a/b/c/d/e/f", base.newBuilder().addPathSegments("d/e/f").build().encodedPath());, +  }, +, +  @Test public void addPathSegmentsWithBackslash() throws Exception {, +    HttpUrl base = HttpUrl.parse("http://host/");, +    assertEquals("/d/e", base.newBuilder().addPathSegments("d\\e").build().encodedPath());, +    assertEquals("/d/e", base.newBuilder().addEncodedPathSegments("d\\e").build().encodedPath());, +  }, +, +  @Test public void addPathSegmentsWithEmptyPaths() throws Exception {, +    HttpUrl base = HttpUrl.parse("http://host/a/b/c");, +    assertEquals("/a/b/c//d/e///f",, +        base.newBuilder().addPathSegments("/d/e///f").build().encodedPath());, +  }, +, +  @Test public void addEncodedPathSegments() throws Exception {, +    HttpUrl base = HttpUrl.parse("http://host/a/b/c");, +    assertEquals("/a/b/c/d/e/%20/",, +        base.newBuilder().addEncodedPathSegments("d/e/%20/\n").build().encodedPath());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +  @Test public void addPathSegments() throws Exception {, +    HttpUrl base = HttpUrl.parse("http://host/a/b/c");, +, +    // Add a string with zero slashes: resulting URL gains one slash., +    assertEquals("/a/b/c/", base.newBuilder().addPathSegments("").build().encodedPath());, +    assertEquals("/a/b/c/d", base.newBuilder().addPathSegments("d").build().encodedPath());, +, +    // Add a string with one slash: resulting URL gains two slashes., +    assertEquals("/a/b/c//", base.newBuilder().addPathSegments("/").build().encodedPath());, +    assertEquals("/a/b/c/d/", base.newBuilder().addPathSegments("d/").build().encodedPath());, +    assertEquals("/a/b/c//d", base.newBuilder().addPathSegments("/d").build().encodedPath());, +, +    // Add a string with two slashes: resulting URL gains three slashes., +    assertEquals("/a/b/c///", base.newBuilder().addPathSegments("//").build().encodedPath());, +    assertEquals("/a/b/c//d/", base.newBuilder().addPathSegments("/d/").build().encodedPath());, +    assertEquals("/a/b/c/d//", base.newBuilder().addPathSegments("d//").build().encodedPath());, +    assertEquals("/a/b/c///d", base.newBuilder().addPathSegments("//d").build().encodedPath());, +    assertEquals("/a/b/c/d/e/f", base.newBuilder().addPathSegments("d/e/f").build().encodedPath());, +  }, +, +  @Test public void addPathSegmentsOntoTrailingSlash() throws Exception {, +    HttpUrl base = HttpUrl.parse("http://host/a/b/c/");, +, +    // Add a string with zero slashes: resulting URL gains zero slashes., +    assertEquals("/a/b/c/", base.newBuilder().addPathSegments("").build().encodedPath());, +    assertEquals("/a/b/c/d", base.newBuilder().addPathSegments("d").build().encodedPath());, +, +    // Add a string with one slash: resulting URL gains one slash., +    assertEquals("/a/b/c//", base.newBuilder().addPathSegments("/").build().encodedPath());, +    assertEquals("/a/b/c/d/", base.newBuilder().addPathSegments("d/").build().encodedPath());, +    assertEquals("/a/b/c//d", base.newBuilder().addPathSegments("/d").build().encodedPath());, +, +    // Add a string with two slashes: resulting URL gains two slashes., +    assertEquals("/a/b/c///", base.newBuilder().addPathSegments("//").build().encodedPath());, +    assertEquals("/a/b/c//d/", base.newBuilder().addPathSegments("/d/").build().encodedPath());, +    assertEquals("/a/b/c/d//", base.newBuilder().addPathSegments("d//").build().encodedPath());, +    assertEquals("/a/b/c///d", base.newBuilder().addPathSegments("//d").build().encodedPath());, +    assertEquals("/a/b/c/d/e/f", base.newBuilder().addPathSegments("d/e/f").build().encodedPath());, +  }, +]