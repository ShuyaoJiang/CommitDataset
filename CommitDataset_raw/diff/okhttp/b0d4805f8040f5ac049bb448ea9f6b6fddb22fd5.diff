[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +import com.squareup.okhttp.ConnectionPool;, +  @Test public void transparentGzipWorksAfterExceptionRecovery() throws Exception {, +    server.enqueue(new MockResponse(), +        .setBody("a"), +        .setSocketPolicy(SHUTDOWN_INPUT_AT_END));, +    server.enqueue(new MockResponse(), +        .addHeader("Content-Encoding: gzip"), +        .setBody(gzip("b".getBytes(UTF_8))));, +    server.play();, +, +    // Seed the pool with a bad connection., +    assertContent("a", client.open(server.getUrl("/")));, +, +    // This connection will need to be recovered. When it is, transparent gzip should still work!, +    assertContent("b", client.open(server.getUrl("/")));, +, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +    assertEquals(0, server.takeRequest().getSequenceNumber()); // Connection is not pooled., +  }, +, +  @Test public void endOfStreamResponseIsNotPooled() throws Exception {, +    server.enqueue(new MockResponse(), +        .setBody("{}"), +        .clearHeaders(), +        .setSocketPolicy(DISCONNECT_AT_END));, +    server.play();, +, +    ConnectionPool pool = ConnectionPool.getDefault();, +    pool.evictAll();, +    client.setConnectionPool(pool);, +, +    HttpURLConnection connection = client.open(server.getUrl("/"));, +    assertContent("{}", connection);, +    assertEquals(0, client.getConnectionPool().getConnectionCount());, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +import com.squareup.okhttp.ConnectionPool;, +  @Test public void transparentGzipWorksAfterExceptionRecovery() throws Exception {, +    server.enqueue(new MockResponse(), +        .setBody("a"), +        .setSocketPolicy(SHUTDOWN_INPUT_AT_END));, +    server.enqueue(new MockResponse(), +        .addHeader("Content-Encoding: gzip"), +        .setBody(gzip("b".getBytes(UTF_8))));, +    server.play();, +, +    // Seed the pool with a bad connection., +    assertContent("a", client.open(server.getUrl("/")));, +, +    // This connection will need to be recovered. When it is, transparent gzip should still work!, +    assertContent("b", client.open(server.getUrl("/")));, +, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +    assertEquals(0, server.takeRequest().getSequenceNumber()); // Connection is not pooled., +  }, +, +  @Test public void endOfStreamResponseIsNotPooled() throws Exception {, +    server.enqueue(new MockResponse(), +        .setBody("{}"), +        .clearHeaders(), +        .setSocketPolicy(DISCONNECT_AT_END));, +    server.play();, +, +    ConnectionPool pool = ConnectionPool.getDefault();, +    pool.evictAll();, +    client.setConnectionPool(pool);, +, +    HttpURLConnection connection = client.open(server.getUrl("/"));, +    assertContent("{}", connection);, +    assertEquals(0, client.getConnectionPool().getConnectionCount());, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpConnection.java, +    protected final void endOfInput(boolean recyclable) throws IOException {, +      if (recyclable && onIdle == ON_IDLE_POOL) {, +        endOfInput(true);, +        endOfInput(true);, +        endOfInput(true);, +        endOfInput(false);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +import com.squareup.okhttp.ConnectionPool;, +  @Test public void transparentGzipWorksAfterExceptionRecovery() throws Exception {, +    server.enqueue(new MockResponse(), +        .setBody("a"), +        .setSocketPolicy(SHUTDOWN_INPUT_AT_END));, +    server.enqueue(new MockResponse(), +        .addHeader("Content-Encoding: gzip"), +        .setBody(gzip("b".getBytes(UTF_8))));, +    server.play();, +, +    // Seed the pool with a bad connection., +    assertContent("a", client.open(server.getUrl("/")));, +, +    // This connection will need to be recovered. When it is, transparent gzip should still work!, +    assertContent("b", client.open(server.getUrl("/")));, +, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +    assertEquals(0, server.takeRequest().getSequenceNumber()); // Connection is not pooled.]