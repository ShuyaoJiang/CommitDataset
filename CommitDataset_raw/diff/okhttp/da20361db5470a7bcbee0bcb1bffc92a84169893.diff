[+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okio.ForwardingSource;, +  private OkHttpClient client = defaultClient();, +  /** https://github.com/square/okhttp/issues/4583 */, +  @Test public void lateCancelCallsOnFailure() throws Exception {, +    server.enqueue(new MockResponse(), +        .setBody("abc"));, +, +    AtomicBoolean closed = new AtomicBoolean();, +, +    client = client.newBuilder(), +        .addInterceptor(new Interceptor() {, +          @Override public Response intercept(Chain chain) throws IOException {, +            Response response = chain.proceed(chain.request());, +            chain.call().cancel(); // Cancel after we have the response., +            ForwardingSource closeTrackingSource = new ForwardingSource(response.body().source()) {, +              @Override public void close() throws IOException {, +                closed.set(true);, +                super.close();, +              }, +            };, +            return response.newBuilder(), +                .body(ResponseBody.create(null, -1L, Okio.buffer(closeTrackingSource))), +                .build();, +          }, +        }), +        .build();, +, +    executeSynchronously("/").assertFailure("Canceled");, +    assertTrue(closed.get());, +  }, +, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okio.ForwardingSource;, +  private OkHttpClient client = defaultClient();, +  /** https://github.com/square/okhttp/issues/4583 */, +  @Test public void lateCancelCallsOnFailure() throws Exception {, +    server.enqueue(new MockResponse(), +        .setBody("abc"));, +, +    AtomicBoolean closed = new AtomicBoolean();, +, +    client = client.newBuilder(), +        .addInterceptor(new Interceptor() {, +          @Override public Response intercept(Chain chain) throws IOException {, +            Response response = chain.proceed(chain.request());, +            chain.call().cancel(); // Cancel after we have the response., +            ForwardingSource closeTrackingSource = new ForwardingSource(response.body().source()) {, +              @Override public void close() throws IOException {, +                closed.set(true);, +                super.close();, +              }, +            };, +            return response.newBuilder(), +                .body(ResponseBody.create(null, -1L, Okio.buffer(closeTrackingSource))), +                .build();, +          }, +        }), +        .build();, +, +    executeSynchronously("/").assertFailure("Canceled");, +    assertTrue(closed.get());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +        "ResponseBodyEnd", "ConnectionReleased", "CallEnd", "RequestBodyEnd");, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import okio.ForwardingSource;, +  private OkHttpClient client = defaultClient();, +  /** https://github.com/square/okhttp/issues/4583 */, +  @Test public void lateCancelCallsOnFailure() throws Exception {, +    server.enqueue(new MockResponse(), +        .setBody("abc"));, +, +    AtomicBoolean closed = new AtomicBoolean();, +, +    client = client.newBuilder(), +        .addInterceptor(new Interceptor() {, +          @Override public Response intercept(Chain chain) throws IOException {, +            Response response = chain.proceed(chain.request());, +            chain.call().cancel(); // Cancel after we have the response., +            ForwardingSource closeTrackingSource = new ForwardingSource(response.body().source()) {, +              @Override public void close() throws IOException {, +                closed.set(true);, +                super.close();, +              }, +            };, +            return response.newBuilder(), +                .body(ResponseBody.create(null, -1L, Okio.buffer(closeTrackingSource))), +                .build();, +          }, +        }), +        .build();, +, +    executeSynchronously("/").assertFailure("Canceled");, +    assertTrue(closed.get());]