[+++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +import java.net.Proxy;, +, +  @Test public void addressToString() throws Exception {, +    Address address = new Address("square.com", 80, dns, socketFactory, null, null, null,, +        authenticator, null, protocols, connectionSpecs, proxySelector);, +    assertEquals("Address{square.com:80, proxySelector=RecordingProxySelector}",, +        address.toString());, +  }, +, +  @Test public void addressWithProxyToString() throws Exception {, +    Address address = new Address("square.com", 80, dns, socketFactory, null, null, null,, +        authenticator, Proxy.NO_PROXY, protocols, connectionSpecs, proxySelector);, +    assertEquals("Address{square.com:80, proxy=" + Proxy.NO_PROXY + "}", address.toString());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +import java.net.Proxy;, +, +  @Test public void addressToString() throws Exception {, +    Address address = new Address("square.com", 80, dns, socketFactory, null, null, null,, +        authenticator, null, protocols, connectionSpecs, proxySelector);, +    assertEquals("Address{square.com:80, proxySelector=RecordingProxySelector}",, +        address.toString());, +  }, +, +  @Test public void addressWithProxyToString() throws Exception {, +    Address address = new Address("square.com", 80, dns, socketFactory, null, null, null,, +        authenticator, Proxy.NO_PROXY, protocols, connectionSpecs, proxySelector);, +    assertEquals("Address{square.com:80, proxy=" + Proxy.NO_PROXY + "}", address.toString());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    executeSynchronously("/"), +        .assertFailure(IOException.class), +        .assertFailureMatches("unexpected end of stream on Connection.*", +            + server.getHostName() + ":" + server.getPort() + ".*");, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +import java.net.Proxy;, +, +  @Test public void addressToString() throws Exception {, +    Address address = new Address("square.com", 80, dns, socketFactory, null, null, null,, +        authenticator, null, protocols, connectionSpecs, proxySelector);, +    assertEquals("Address{square.com:80, proxySelector=RecordingProxySelector}",, +        address.toString());, +  }, +, +  @Test public void addressWithProxyToString() throws Exception {, +    Address address = new Address("square.com", 80, dns, socketFactory, null, null, null,, +        authenticator, Proxy.NO_PROXY, protocols, connectionSpecs, proxySelector);, +    assertEquals("Address{square.com:80, proxy=" + Proxy.NO_PROXY + "}", address.toString());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    executeSynchronously("/"), +        .assertFailure(IOException.class), +        .assertFailureMatches("unexpected end of stream on Connection.*", +            + server.getHostName() + ":" + server.getPort() + ".*");, +++ b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java, +  public RecordedResponse assertFailureMatches(String pattern) {, +    assertNotNull(failure);, +    assertTrue(failure.getMessage(), failure.getMessage().matches(pattern));, +    return this;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +import java.net.Proxy;, +, +  @Test public void addressToString() throws Exception {, +    Address address = new Address("square.com", 80, dns, socketFactory, null, null, null,, +        authenticator, null, protocols, connectionSpecs, proxySelector);, +    assertEquals("Address{square.com:80, proxySelector=RecordingProxySelector}",, +        address.toString());, +  }, +, +  @Test public void addressWithProxyToString() throws Exception {, +    Address address = new Address("square.com", 80, dns, socketFactory, null, null, null,, +        authenticator, Proxy.NO_PROXY, protocols, connectionSpecs, proxySelector);, +    assertEquals("Address{square.com:80, proxy=" + Proxy.NO_PROXY + "}", address.toString());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +    executeSynchronously("/"), +        .assertFailure(IOException.class), +        .assertFailureMatches("unexpected end of stream on Connection.*", +            + server.getHostName() + ":" + server.getPort() + ".*");, +++ b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java, +  public RecordedResponse assertFailureMatches(String pattern) {, +    assertNotNull(failure);, +    assertTrue(failure.getMessage(), failure.getMessage().matches(pattern));, +    return this;, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/RouteSelectorTest.java, +  @Test public void routeToString() throws Exception {, +    Route route = new Route(httpAddress(), Proxy.NO_PROXY,, +        InetSocketAddress.createUnresolved("host", 1234));, +    assertEquals("Route{host:1234}", route.toString());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java, +import java.net.Proxy;, +, +  @Test public void addressToString() throws Exception {]