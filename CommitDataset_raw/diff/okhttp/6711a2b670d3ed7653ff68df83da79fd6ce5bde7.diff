[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/** What should be done with the incoming socket. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/** What should be done with the incoming socket. */, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(, +          httpsUrlConnection.getCipherSuite(), nullSafeImmutableList(peerCertificates),, +      Handshake handshake = Handshake.get(, +          javaSecureCacheResponse.getCipherSuite(), peerCertificates, localCertificates);, +          return handshake != null ? handshake.cipherSuite() : null;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/** What should be done with the incoming socket. */, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(, +          httpsUrlConnection.getCipherSuite(), nullSafeImmutableList(peerCertificates),, +      Handshake handshake = Handshake.get(, +          javaSecureCacheResponse.getCipherSuite(), peerCertificates, localCertificates);, +          return handshake != null ? handshake.cipherSuite() : null;, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java, +        return "SuperSecure";, +    assertNotNullAndEquals("SuperSecure", handshake.cipherSuite());, +    Handshake handshake = Handshake.get("SecureCipher", Arrays.<Certificate>asList(SERVER_CERT),, +        Arrays.<Certificate>asList(LOCAL_CERT));, +    assertEquals("SecureCipher", httpsUrlConnection.getCipherSuite());, +    Handshake handshake = Handshake.get("SecureCipher", Arrays.<Certificate>asList(SERVER_CERT),, +        Arrays.<Certificate>asList(LOCAL_CERT));, +    assertEquals(handshake.cipherSuite(), javaCacheResponse.getCipherSuite());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/** What should be done with the incoming socket. */, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(, +          httpsUrlConnection.getCipherSuite(), nullSafeImmutableList(peerCertificates),, +      Handshake handshake = Handshake.get(, +          javaSecureCacheResponse.getCipherSuite(), peerCertificates, localCertificates);, +          return handshake != null ? handshake.cipherSuite() : null;, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java, +        return "SuperSecure";, +    assertNotNullAndEquals("SuperSecure", handshake.cipherSuite());, +    Handshake handshake = Handshake.get("SecureCipher", Arrays.<Certificate>asList(SERVER_CERT),, +        Arrays.<Certificate>asList(LOCAL_CERT));, +    assertEquals("SecureCipher", httpsUrlConnection.getCipherSuite());, +    Handshake handshake = Handshake.get("SecureCipher", Arrays.<Certificate>asList(SERVER_CERT),, +        Arrays.<Certificate>asList(LOCAL_CERT));, +    assertEquals(handshake.cipherSuite(), javaCacheResponse.getCipherSuite());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    String suite = response1.handshake().cipherSuite();, +    assertEquals(suite, response2.handshake().cipherSuite());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +/** What should be done with the incoming socket. */, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +      Handshake handshake = Handshake.get(, +          httpsUrlConnection.getCipherSuite(), nullSafeImmutableList(peerCertificates),, +      Handshake handshake = Handshake.get(, +          javaSecureCacheResponse.getCipherSuite(), peerCertificates, localCertificates);, +          return handshake != null ? handshake.cipherSuite() : null;, +++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java, +        return "SuperSecure";, +    assertNotNullAndEquals("SuperSecure", handshake.cipherSuite());, +    Handshake handshake = Handshake.get("SecureCipher", Arrays.<Certificate>asList(SERVER_CERT),, +        Arrays.<Certificate>asList(LOCAL_CERT));, +    assertEquals("SecureCipher", httpsUrlConnection.getCipherSuite());, +    Handshake handshake = Handshake.get("SecureCipher", Arrays.<Certificate>asList(SERVER_CERT),, +        Arrays.<Certificate>asList(LOCAL_CERT));, +    assertEquals(handshake.cipherSuite(), javaCacheResponse.getCipherSuite());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    String suite = response1.handshake().cipherSuite();, +    assertEquals(suite, response2.handshake().cipherSuite());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/FormBodyTest.java, +/*, + * Copyright (C) 2014 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import java.io.IOException;, +import okio.Buffer;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public final class FormBodyTest {, +  @Test public void urlEncoding() throws Exception {, +    FormBody body = new FormBody.Builder()]