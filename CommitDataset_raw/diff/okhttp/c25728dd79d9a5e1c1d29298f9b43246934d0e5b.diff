[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +       * Reads a request and writes its response. Returns true if further calls should be attempted, +       * on the socket., +        if (logger.isLoggable(Level.INFO)) {, +          logger.info(MockWebServer.this + " received request: " + request, +              + " and responded: " + response);, +        }, +, +          return false;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +       * Reads a request and writes its response. Returns true if further calls should be attempted, +       * on the socket., +        if (logger.isLoggable(Level.INFO)) {, +          logger.info(MockWebServer.this + " received request: " + request, +              + " and responded: " + response);, +        }, +, +          return false;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +       * Reads a request and writes its response. Returns true if further calls should be attempted, +       * on the socket., +        if (logger.isLoggable(Level.INFO)) {, +          logger.info(MockWebServer.this + " received request: " + request, +              + " and responded: " + response);, +        }, +, +          return false;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +  // NOTE: Types are named 'client' and 'server' for cognitive simplicity. This differentiation has, +, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener,, +        "http://example.com/websocket") {, +    server = new RealWebSocket(false, client2Server, server2client, random, serverListener,, +        "http://example.com/websocket") {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +       * Reads a request and writes its response. Returns true if further calls should be attempted, +       * on the socket., +        if (logger.isLoggable(Level.INFO)) {, +          logger.info(MockWebServer.this + " received request: " + request, +              + " and responded: " + response);, +        }, +, +          return false;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +  // NOTE: Types are named 'client' and 'server' for cognitive simplicity. This differentiation has, +, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener,, +        "http://example.com/websocket") {, +    server = new RealWebSocket(false, client2Server, server2client, random, serverListener,, +        "http://example.com/websocket") {, +++ b/okhttp/src/main/java/com/squareup/okhttp/RequestBody.java, +, +        return content.length;, +        sink.write(content);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +       * Reads a request and writes its response. Returns true if further calls should be attempted, +       * on the socket., +        if (logger.isLoggable(Level.INFO)) {, +          logger.info(MockWebServer.this + " received request: " + request, +              + " and responded: " + response);, +        }, +, +          return false;, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +  // NOTE: Types are named 'client' and 'server' for cognitive simplicity. This differentiation has, +, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener,, +        "http://example.com/websocket") {, +    server = new RealWebSocket(false, client2Server, server2client, random, serverListener,, +        "http://example.com/websocket") {, +++ b/okhttp/src/main/java/com/squareup/okhttp/RequestBody.java, +, +        return content.length;, +        sink.write(content);, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java, + * Access to Platform-specific features necessary for SPDY and advanced TLS., + * This includes Server Name Indication (SNI) and session tickets., + * <h3>ALPN</h3>, + * This class uses TLS extension ALPN to negotiate the upgrade from HTTP/1.1, + * (the default protocol to use with TLS on port 443) to either SPDY or HTTP/2., + * <p>ALPN (Application Layer Protocol Negotiation) first arrived in Android 4.4,, + * ALPN is supported on OpenJDK 7 and 8 (via the Jetty ALPN-boot library)., +      } catch (ClassNotFoundException ignored) {, +      // Attempt to find Android 4.0+ APIs., +      } catch (NoSuchMethodException ignored) {, +      return new Android(trafficStatsTagSocket, trafficStatsUntagSocket);, +    try { // to find the Jetty's ALPN extension for OpenJDK., +    } catch (ClassNotFoundException ignored) {, +    } catch (NoSuchMethodException ignored) { // The ALPN version isn't what we expect., +  /**, +   * Android 2.3 or better. Version 2.3 supports TLS session tickets and server, +   * name indication (SNI). Versions 4.4 supports ALPN., +   */, +, +    // setUseSessionTickets(boolean), +    private static final OptionalMethod<Socket> SET_USE_SESSION_TICKETS =]