[+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +  /** How many requests to enqueue to await threads to execute them. */, +  @Param({ "10" }), +  int targetBacklog;, +, +      sleep(1);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +  /** How many requests to enqueue to await threads to execute them. */, +  @Param({ "10" }), +  int targetBacklog;, +, +      sleep(1);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Client.java, +  OkHttpAsync {, +    @Override HttpClient create() {, +      return new OkHttpAsync();, +    }, +  },, +, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +  /** How many requests to enqueue to await threads to execute them. */, +  @Param({ "10" }), +  int targetBacklog;, +, +      sleep(1);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Client.java, +  OkHttpAsync {, +    @Override HttpClient create() {, +      return new OkHttpAsync();, +    }, +  },, +, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/NettyHttpClient.java, +import java.util.ArrayDeque;, +import java.util.Deque;, +  private final Deque<HttpChannel> freeChannels = new ArrayDeque<HttpChannel>();, +  private final Deque<URL> backlog = new ArrayDeque<URL>();, +  private int totalChannels = 0;, +  private int targetBacklog;, +    this.targetBacklog = benchmark.targetBacklog;, +    bootstrap.group(new NioEventLoopGroup(concurrencyLevel)), +    HttpChannel httpChannel = null;, +    synchronized (this) {, +      if (!freeChannels.isEmpty()) {, +        httpChannel = freeChannels.pop();, +      } else if (totalChannels < concurrencyLevel) {, +        totalChannels++; // Create a new channel. (outside of the synchronized block)., +      } else {, +        backlog.add(url); // Enqueue this for later, to be picked up when another request completes., +        return;, +      }, +    }, +    if (httpChannel == null) {, +      Channel channel = bootstrap.connect(url.getHost(), Util.getEffectivePort(url)), +          .sync().channel();, +      httpChannel = (HttpChannel) channel.pipeline().last();, +    }, +    httpChannel.sendRequest(url);, +    return backlog.size() < targetBacklog || hasFreeChannels();, +  }, +, +  private boolean hasFreeChannels() {, +  private void release(HttpChannel httpChannel) {, +    URL url;, +      url = backlog.pop();, +      if (url == null) {, +        // There were no URLs in the backlog. Pool this channel for later., +        freeChannels.push(httpChannel);, +        return;, +    // We removed a URL from the backlog. Schedule it right away., +    httpChannel.sendRequest(url);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java, +  /** How many requests to enqueue to await threads to execute them. */, +  @Param({ "10" }), +  int targetBacklog;, +, +      sleep(1);, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Client.java, +  OkHttpAsync {, +    @Override HttpClient create() {, +      return new OkHttpAsync();, +    }, +  },, +, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/NettyHttpClient.java, +import java.util.ArrayDeque;, +import java.util.Deque;, +  private final Deque<HttpChannel> freeChannels = new ArrayDeque<HttpChannel>();, +  private final Deque<URL> backlog = new ArrayDeque<URL>();, +  private int totalChannels = 0;, +  private int targetBacklog;, +    this.targetBacklog = benchmark.targetBacklog;, +    bootstrap.group(new NioEventLoopGroup(concurrencyLevel)), +    HttpChannel httpChannel = null;, +    synchronized (this) {, +      if (!freeChannels.isEmpty()) {, +        httpChannel = freeChannels.pop();, +      } else if (totalChannels < concurrencyLevel) {, +        totalChannels++; // Create a new channel. (outside of the synchronized block)., +      } else {]