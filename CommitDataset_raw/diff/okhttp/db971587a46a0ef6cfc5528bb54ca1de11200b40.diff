[+++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java, +import java.util.regex.Pattern;, +import static org.junit.Assert.assertTrue;, +  @Test public void closeOutOfRangeThrows() throws IOException {, +    data.write(ByteString.decodeHex("88020001")); // Close with code 1, +    try {, +      clientReader.processNextFrame();, +      fail();, +    } catch (ProtocolException e) {, +      assertEquals("Code must be in range [1000,5000): 1", e.getMessage());, +    }, +    data.write(ByteString.decodeHex("88021388")); // Close with code 5000, +    try {, +      clientReader.processNextFrame();, +      fail();, +    } catch (ProtocolException e) {, +      assertEquals("Code must be in range [1000,5000): 5000", e.getMessage());, +    }, +  }, +, +  @Test public void closeReservedSetThrows() throws IOException {, +    data.write(ByteString.decodeHex("880203ec")); // Close with code 1004, +    data.write(ByteString.decodeHex("880203ed")); // Close with code 1005, +    data.write(ByteString.decodeHex("880203ee")); // Close with code 1006, +    for (int i = 1012; i <= 2999; i++) {, +      data.write(ByteString.decodeHex("8802" + String.format("%04X", i))); // Close with code 'i', +    }, +, +    int count = 0;, +    for (; !data.exhausted(); count++) {, +      try {, +        clientReader.processNextFrame();, +        fail();, +      } catch (ProtocolException e) {, +        String message = e.getMessage();, +        assertTrue(message, Pattern.matches("Code \\d+ is reserved and may not be used.", message));, +      }, +    }, +    assertEquals(1991, count);, +  }, +, +++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java, +import java.util.regex.Pattern;, +import static org.junit.Assert.assertTrue;, +  @Test public void closeOutOfRangeThrows() throws IOException {, +    data.write(ByteString.decodeHex("88020001")); // Close with code 1, +    try {, +      clientReader.processNextFrame();, +      fail();, +    } catch (ProtocolException e) {, +      assertEquals("Code must be in range [1000,5000): 1", e.getMessage());, +    }, +    data.write(ByteString.decodeHex("88021388")); // Close with code 5000, +    try {, +      clientReader.processNextFrame();, +      fail();, +    } catch (ProtocolException e) {, +      assertEquals("Code must be in range [1000,5000): 5000", e.getMessage());, +    }, +  }, +, +  @Test public void closeReservedSetThrows() throws IOException {, +    data.write(ByteString.decodeHex("880203ec")); // Close with code 1004, +    data.write(ByteString.decodeHex("880203ed")); // Close with code 1005, +    data.write(ByteString.decodeHex("880203ee")); // Close with code 1006, +    for (int i = 1012; i <= 2999; i++) {, +      data.write(ByteString.decodeHex("8802" + String.format("%04X", i))); // Close with code 'i', +    }, +, +    int count = 0;, +    for (; !data.exhausted(); count++) {, +      try {, +        clientReader.processNextFrame();, +        fail();, +      } catch (ProtocolException e) {, +        String message = e.getMessage();, +        assertTrue(message, Pattern.matches("Code \\d+ is reserved and may not be used.", message));, +      }, +    }, +    assertEquals(1991, count);, +  }, +, +++ b/okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/WebSocketReader.java, +          if ((code >= 1004 && code <= 1006) || (code >= 1012 && code <= 2999)) {, +            throw new ProtocolException("Code " + code + " is reserved and may not be used.");, +          }]