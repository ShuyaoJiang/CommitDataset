[+++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/AndroidInternal.java, +import com.squareup.okhttp.internal.InternalCache;, + * A class for back doors for Android's use of OkHttp within the Android platform., +    okUrlFactory.client().setInternalCache(, +        responseCache != null ? new CacheAdapter(responseCache) : null);, +, +  public static ResponseCache getResponseCache(OkUrlFactory okUrlFactory) {, +    InternalCache cache = okUrlFactory.client().internalCache();, +    return cache instanceof CacheAdapter ? ((CacheAdapter) cache).getDelegate() : null;, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/AndroidInternal.java, +import com.squareup.okhttp.internal.InternalCache;, + * A class for back doors for Android's use of OkHttp within the Android platform., +    okUrlFactory.client().setInternalCache(, +        responseCache != null ? new CacheAdapter(responseCache) : null);, +, +  public static ResponseCache getResponseCache(OkUrlFactory okUrlFactory) {, +    InternalCache cache = okUrlFactory.client().internalCache();, +    return cache instanceof CacheAdapter ? ((CacheAdapter) cache).getDelegate() : null;, +++ /dev/null, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/AndroidInternal.java, +import com.squareup.okhttp.internal.InternalCache;, + * A class for back doors for Android's use of OkHttp within the Android platform., +    okUrlFactory.client().setInternalCache(, +        responseCache != null ? new CacheAdapter(responseCache) : null);, +, +  public static ResponseCache getResponseCache(OkUrlFactory okUrlFactory) {, +    InternalCache cache = okUrlFactory.client().internalCache();, +    return cache instanceof CacheAdapter ? ((CacheAdapter) cache).getDelegate() : null;, +++ /dev/null, +++ /dev/null, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/AndroidInternal.java, +import com.squareup.okhttp.internal.InternalCache;, + * A class for back doors for Android's use of OkHttp within the Android platform., +    okUrlFactory.client().setInternalCache(, +        responseCache != null ? new CacheAdapter(responseCache) : null);, +, +  public static ResponseCache getResponseCache(OkUrlFactory okUrlFactory) {, +    InternalCache cache = okUrlFactory.client().internalCache();, +    return cache instanceof CacheAdapter ? ((CacheAdapter) cache).getDelegate() : null;, +++ /dev/null, +++ /dev/null, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +    ResponseBody okBody = createOkBody(okHeaders, urlConnection.getInputStream());, +    ResponseBody okBody = createOkBody(okHeaders, javaResponse.getBody());, +  private static ResponseBody createOkBody(final Headers okHeaders, InputStream body) {, +    final BufferedSource source = Okio.buffer(Okio.source(body));, +      @Override public MediaType contentType() {, +      @Override public long contentLength() {, +      @Override public BufferedSource source() {, +        return source;, +      this.doOutput = response.body() == null;, +      return true;, +      return request.body() != null;, +      return 0;, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/AndroidInternal.java, +import com.squareup.okhttp.internal.InternalCache;, + * A class for back doors for Android's use of OkHttp within the Android platform., +    okUrlFactory.client().setInternalCache(, +        responseCache != null ? new CacheAdapter(responseCache) : null);, +, +  public static ResponseCache getResponseCache(OkUrlFactory okUrlFactory) {, +    InternalCache cache = okUrlFactory.client().internalCache();, +    return cache instanceof CacheAdapter ? ((CacheAdapter) cache).getDelegate() : null;, +++ /dev/null, +++ /dev/null, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +    ResponseBody okBody = createOkBody(okHeaders, urlConnection.getInputStream());, +    ResponseBody okBody = createOkBody(okHeaders, javaResponse.getBody());, +  private static ResponseBody createOkBody(final Headers okHeaders, InputStream body) {, +    final BufferedSource source = Okio.buffer(Okio.source(body));, +      @Override public MediaType contentType() {, +      @Override public long contentLength() {, +      @Override public BufferedSource source() {, +        return source;, +      this.doOutput = response.body() == null;, +      return true;, +      return request.body() != null;, +      return 0;, +++ /dev/null, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/AndroidInternal.java, +import com.squareup.okhttp.internal.InternalCache;, + * A class for back doors for Android's use of OkHttp within the Android platform., +    okUrlFactory.client().setInternalCache(, +        responseCache != null ? new CacheAdapter(responseCache) : null);, +, +  public static ResponseCache getResponseCache(OkUrlFactory okUrlFactory) {, +    InternalCache cache = okUrlFactory.client().internalCache();, +    return cache instanceof CacheAdapter ? ((CacheAdapter) cache).getDelegate() : null;, +++ /dev/null, +++ /dev/null, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +    ResponseBody okBody = createOkBody(okHeaders, urlConnection.getInputStream());, +    ResponseBody okBody = createOkBody(okHeaders, javaResponse.getBody());, +  private static ResponseBody createOkBody(final Headers okHeaders, InputStream body) {, +    final BufferedSource source = Okio.buffer(Okio.source(body));, +      @Override public MediaType contentType() {, +      @Override public long contentLength() {, +      @Override public BufferedSource source() {, +        return source;, +      this.doOutput = response.body() == null;]