[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +import static org.junit.Assert.assertFalse;, +  private MockWebServer spdyServer;, +  private MockWebServer httpServer;, +  private ConnectionPool pool;, +  private Object owner;, +, +    setUp(2);, +  }, +, +  private void setUp(int poolSize) throws Exception {, +    spdyServer = new MockWebServer();, +    httpServer = new MockWebServer();, +    pool = new ConnectionPool(poolSize, KEEP_ALIVE_DURATION_MS);, +    httpA = new Connection(pool, httpRoute);, +    httpB = new Connection(pool, httpRoute);, +    httpC = new Connection(pool, httpRoute);, +    httpD = new Connection(pool, httpRoute);, +    httpE = new Connection(pool, httpRoute);, +    spdyA = new Connection(pool, spdyRoute);, +, +    owner = new Object();, +    httpA.setOwner(owner);, +    httpB.setOwner(owner);, +    httpC.setOwner(owner);, +    httpD.setOwner(owner);, +    httpE.setOwner(owner);, +  private void resetWithPoolSize(int poolSize) throws Exception {, +    tearDown();, +    setUp(poolSize);, +  }, +, +  @Test public void poolSingleHttpConnection() throws Exception {, +    resetWithPoolSize(1);, +        pool, new Route(httpAddress, Proxy.NO_PROXY, httpSocketAddress, true));, +    connection.setOwner(owner);, +, +    assertNull(connection.getOwner());, +    assertNull(connection.getOwner());, +    recycledHttpConnection.setOwner(owner);, +  @Test public void evictAllConnections() throws Exception {, +    resetWithPoolSize(10);, +  @Test public void closeIfOwnedBy() throws Exception {, +    httpA.closeIfOwnedBy(owner);, +    assertFalse(httpA.isAlive());, +    assertFalse(httpA.clearOwner());, +  }, +, +  @Test public void closeIfOwnedByDoesNothingIfNotOwner() throws Exception {, +    httpA.closeIfOwnedBy(new Object());, +    assertTrue(httpA.isAlive());, +    assertTrue(httpA.clearOwner());, +  }, +, +  @Test public void closeIfOwnedByFailsForSpdyConnections() throws Exception {, +    try {, +      spdyA.closeIfOwnedBy(owner);, +      fail();, +    } catch (IllegalStateException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +import static org.junit.Assert.assertFalse;, +  private MockWebServer spdyServer;, +  private MockWebServer httpServer;, +  private ConnectionPool pool;, +  private Object owner;, +, +    setUp(2);, +  }, +, +  private void setUp(int poolSize) throws Exception {, +    spdyServer = new MockWebServer();, +    httpServer = new MockWebServer();, +    pool = new ConnectionPool(poolSize, KEEP_ALIVE_DURATION_MS);, +    httpA = new Connection(pool, httpRoute);, +    httpB = new Connection(pool, httpRoute);, +    httpC = new Connection(pool, httpRoute);, +    httpD = new Connection(pool, httpRoute);, +    httpE = new Connection(pool, httpRoute);, +    spdyA = new Connection(pool, spdyRoute);, +, +    owner = new Object();, +    httpA.setOwner(owner);, +    httpB.setOwner(owner);, +    httpC.setOwner(owner);, +    httpD.setOwner(owner);, +    httpE.setOwner(owner);, +  private void resetWithPoolSize(int poolSize) throws Exception {, +    tearDown();, +    setUp(poolSize);, +  }, +, +  @Test public void poolSingleHttpConnection() throws Exception {, +    resetWithPoolSize(1);, +        pool, new Route(httpAddress, Proxy.NO_PROXY, httpSocketAddress, true));, +    connection.setOwner(owner);, +, +    assertNull(connection.getOwner());]