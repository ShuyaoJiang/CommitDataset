[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.CONTINUE_ALWAYS;, +    final SocketPolicy socketPolicy = dispatcher.peek().getSocketPolicy();, +    if (expectContinue && socketPolicy == EXPECT_CONTINUE || socketPolicy == CONTINUE_ALWAYS) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.CONTINUE_ALWAYS;, +    final SocketPolicy socketPolicy = dispatcher.peek().getSocketPolicy();, +    if (expectContinue && socketPolicy == EXPECT_CONTINUE || socketPolicy == CONTINUE_ALWAYS) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +  EXPECT_CONTINUE,, +, +  /**, +   * Transmit a {@code HTTP/1.1 100 Continue} response before reading the HTTP request body even, +   * if the client does not send the header {@code Expect: 100-continue} in its request., +   */, +  CONTINUE_ALWAYS, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.CONTINUE_ALWAYS;, +    final SocketPolicy socketPolicy = dispatcher.peek().getSocketPolicy();, +    if (expectContinue && socketPolicy == EXPECT_CONTINUE || socketPolicy == CONTINUE_ALWAYS) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +  EXPECT_CONTINUE,, +, +  /**, +   * Transmit a {@code HTTP/1.1 100 Continue} response before reading the HTTP request body even, +   * if the client does not send the header {@code Expect: 100-continue} in its request., +   */, +  CONTINUE_ALWAYS, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        .setSocketPolicy(SocketPolicy.CONTINUE_ALWAYS));, +    executeSynchronously(request), +        .assertCode(200), +        .assertSuccessful();, +  @Test public void serverRespondsWith100ContinueOnly() throws Exception {, +    server.enqueue(new MockResponse(), +            .setStatus("HTTP/1.1 100 Continue"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .post(RequestBody.create(MediaType.parse("text/plain"), "abc")), +        .build();, +, +    Call call = client.newCall(request);, +    try {, +      call.execute();, +      fail();, +    } catch (SocketTimeoutException expected) {, +    }, +, +    RecordedRequest recordedRequest = server.takeRequest();, +    assertEquals("abc", recordedRequest.getBody().readUtf8());, +  }, +, +  @Test public void serverRespondsWith100ContinueOnly_HTTP2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    serverRespondsWith100ContinueOnly();, +  }, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.CONTINUE_ALWAYS;, +    final SocketPolicy socketPolicy = dispatcher.peek().getSocketPolicy();, +    if (expectContinue && socketPolicy == EXPECT_CONTINUE || socketPolicy == CONTINUE_ALWAYS) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java, +  EXPECT_CONTINUE,, +, +  /**, +   * Transmit a {@code HTTP/1.1 100 Continue} response before reading the HTTP request body even, +   * if the client does not send the header {@code Expect: 100-continue} in its request., +   */, +  CONTINUE_ALWAYS, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        .setSocketPolicy(SocketPolicy.CONTINUE_ALWAYS));, +    executeSynchronously(request), +        .assertCode(200), +        .assertSuccessful();, +  @Test public void serverRespondsWith100ContinueOnly() throws Exception {, +    server.enqueue(new MockResponse(), +            .setStatus("HTTP/1.1 100 Continue"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .post(RequestBody.create(MediaType.parse("text/plain"), "abc")), +        .build();, +, +    Call call = client.newCall(request);, +    try {, +      call.execute();, +      fail();, +    } catch (SocketTimeoutException expected) {, +    }, +, +    RecordedRequest recordedRequest = server.takeRequest();, +    assertEquals("abc", recordedRequest.getBody().readUtf8());, +  }, +, +  @Test public void serverRespondsWith100ContinueOnly_HTTP2() throws Exception {, +    enableProtocol(Protocol.HTTP_2);, +    serverRespondsWith100ContinueOnly();, +  }, +]