[+++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +      assertEquals("interceptor " + interceptor + " returned null", expected.getMessage());, +      assertEquals("interceptor " + interceptor + " returned null", expected.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +      assertEquals("interceptor " + interceptor + " returned null", expected.getMessage());, +      assertEquals("interceptor " + interceptor + " returned null", expected.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +import static okhttp3.internal.huc.OkHttpURLConnection.SELECTED_PROTOCOL;, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +      assertEquals("interceptor " + interceptor + " returned null", expected.getMessage());, +      assertEquals("interceptor " + interceptor + " returned null", expected.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +import static okhttp3.internal.huc.OkHttpURLConnection.SELECTED_PROTOCOL;, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +  private IOException callFailure;, +          throw callFailure;, +      throw callFailure;, +      if (callFailure != null) throw callFailure;, +      this.callFailure = e;, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +      assertEquals("interceptor " + interceptor + " returned null", expected.getMessage());, +      assertEquals("interceptor " + interceptor + " returned null", expected.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +import static okhttp3.internal.huc.OkHttpURLConnection.SELECTED_PROTOCOL;, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +  private IOException callFailure;, +          throw callFailure;, +      throw callFailure;, +      if (callFailure != null) throw callFailure;, +      this.callFailure = e;, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import java.util.ArrayList;, +import java.util.List;, +import okhttp3.internal.http.RealInterceptorChain;, +    // Build a full stack of interceptors., +    List<Interceptor> interceptors = new ArrayList<>();, +    interceptors.addAll(client.interceptors());, +    interceptors.add(new RetryAndFollowUpInterceptor());, +    if (!forWebSocket) {, +      interceptors.addAll(client.networkInterceptors());, +    }, +    interceptors.add(new HttpEngine.CallServerInterceptor(forWebSocket));, +, +    Interceptor.Chain chain = new RealInterceptorChain(, +        interceptors, null, null, null, 0, originalRequest);, +          response = engine.proceed(request, (RealInterceptorChain) chain);, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +      assertEquals("interceptor " + interceptor + " returned null", expected.getMessage());, +      assertEquals("interceptor " + interceptor + " returned null", expected.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +import static okhttp3.internal.huc.OkHttpURLConnection.SELECTED_PROTOCOL;, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +  private IOException callFailure;, +          throw callFailure;, +      throw callFailure;, +      if (callFailure != null) throw callFailure;, +      this.callFailure = e;, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import java.util.ArrayList;, +import java.util.List;, +import okhttp3.internal.http.RealInterceptorChain;, +    // Build a full stack of interceptors., +    List<Interceptor> interceptors = new ArrayList<>();, +    interceptors.addAll(client.interceptors());, +    interceptors.add(new RetryAndFollowUpInterceptor());, +    if (!forWebSocket) {, +      interceptors.addAll(client.networkInterceptors());, +    }, +    interceptors.add(new HttpEngine.CallServerInterceptor(forWebSocket));, +, +    Interceptor.Chain chain = new RealInterceptorChain(, +        interceptors, null, null, null, 0, originalRequest);, +          response = engine.proceed(request, (RealInterceptorChain) chain);, +++ b/okhttp/src/main/java/okhttp3/internal/http/Http1xStream.java, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +      assertEquals("interceptor " + interceptor + " returned null", expected.getMessage());, +      assertEquals("interceptor " + interceptor + " returned null", expected.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +import static okhttp3.internal.huc.OkHttpURLConnection.SELECTED_PROTOCOL;, +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java, +  private IOException callFailure;, +          throw callFailure;, +      throw callFailure;, +      if (callFailure != null) throw callFailure;, +      this.callFailure = e;, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +import java.util.ArrayList;, +import java.util.List;, +import okhttp3.internal.http.RealInterceptorChain;, +    // Build a full stack of interceptors., +    List<Interceptor> interceptors = new ArrayList<>();, +    interceptors.addAll(client.interceptors());, +    interceptors.add(new RetryAndFollowUpInterceptor());, +    if (!forWebSocket) {, +      interceptors.addAll(client.networkInterceptors());, +    }, +    interceptors.add(new HttpEngine.CallServerInterceptor(forWebSocket));, +, +    Interceptor.Chain chain = new RealInterceptorChain(, +        interceptors, null, null, null, 0, originalRequest);]