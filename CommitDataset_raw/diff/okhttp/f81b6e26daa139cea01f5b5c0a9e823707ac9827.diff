[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void cancelTagImmediatelyAfterEnqueue() throws Exception {, +        .tag("request"), +    client.cancel("request");, +        client.cancel("request");, +    Request request = new Request.Builder().url(server.url("/a")).tag("request").build();, +      client.newCall(request).execute();, +        client.cancel("request B");, +    Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, +    client.newCall(requestA).enqueue(callback);, +    Request requestB = new Request.Builder().url(server.url("/b")).tag("request B").build();, +    client.newCall(requestB).enqueue(callback);, +, +    Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, +    Request request = new Request.Builder().url(server.url("/a")).tag("request A").build();, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void cancelTagImmediatelyAfterEnqueue() throws Exception {, +        .tag("request"), +    client.cancel("request");, +        client.cancel("request");, +    Request request = new Request.Builder().url(server.url("/a")).tag("request").build();, +      client.newCall(request).execute();, +        client.cancel("request B");, +    Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, +    client.newCall(requestA).enqueue(callback);, +    Request requestB = new Request.Builder().url(server.url("/b")).tag("request B").build();, +    client.newCall(requestB).enqueue(callback);, +, +    Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, +    Request request = new Request.Builder().url(server.url("/a")).tag("request A").build();, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +    client.newCall(newRequest("http://a/1", "tag1")).enqueue(callback);, +    client.newCall(newRequest("http://a/2")).enqueue(callback);, +    dispatcher.cancel("tag1");, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void cancelTagImmediatelyAfterEnqueue() throws Exception {, +        .tag("request"), +    client.cancel("request");, +        client.cancel("request");, +    Request request = new Request.Builder().url(server.url("/a")).tag("request").build();, +      client.newCall(request).execute();, +        client.cancel("request B");, +    Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, +    client.newCall(requestA).enqueue(callback);, +    Request requestB = new Request.Builder().url(server.url("/b")).tag("request B").build();, +    client.newCall(requestB).enqueue(callback);, +, +    Request requestA = new Request.Builder().url(server.url("/a")).tag("request A").build();, +    Request request = new Request.Builder().url(server.url("/a")).tag("request A").build();, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +    client.newCall(newRequest("http://a/1", "tag1")).enqueue(callback);, +    client.newCall(newRequest("http://a/2")).enqueue(callback);, +    dispatcher.cancel("tag1");, +++ b/okhttp-tests/src/test/java/okhttp3/ResponseTest.java, +/*, + * Copyright (C) 2016 Square, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package okhttp3;, +, +import java.io.IOException;, +import okio.Buffer;, +import okio.BufferedSource;, +import okio.Okio;, +import okio.Source;, +import okio.Timeout;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +, +public final class ResponseTest {, +  @Test public void peekShorterThanResponse() throws Exception {, +    Response response = newResponse(responseBody("abcdef"));, +    ResponseBody peekedBody = response.peekBody(3);, +    assertEquals("abc", peekedBody.string());, +    assertEquals("abcdef", response.body().string());, +  }, +, +  @Test public void peekLongerThanResponse() throws Exception {, +    Response response = newResponse(responseBody("abc"));, +    ResponseBody peekedBody = response.peekBody(6);, +    assertEquals("abc", peekedBody.string());, +    assertEquals("abc", response.body().string());, +  }, +, +  @Test public void peekAfterReadingResponse() throws Exception {, +    Response response = newResponse(responseBody("abc"));, +    assertEquals("abc", response.body().string());]