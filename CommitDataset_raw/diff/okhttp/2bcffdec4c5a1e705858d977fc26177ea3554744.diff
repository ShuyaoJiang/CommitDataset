[+++ b/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +      Address address = new Address(uriHost, getEffectivePort(uri), getSslSocketFactory(),, +          getHostnameVerifier(), policy.requestedProxy);, +    if (connection.getProxy() != policy.requestedProxy) {, +      // Update the request line if the proxy changed; it may need a host name., +    return connection == null, +        ? policy.usingProxy() // A proxy was requested., +        : connection.getProxy().type() == Proxy.Type.HTTP; // A proxy was selected., +++ b/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +      Address address = new Address(uriHost, getEffectivePort(uri), getSslSocketFactory(),, +          getHostnameVerifier(), policy.requestedProxy);, +    if (connection.getProxy() != policy.requestedProxy) {, +      // Update the request line if the proxy changed; it may need a host name., +    return connection == null, +        ? policy.usingProxy() // A proxy was requested., +        : connection.getProxy().type() == Proxy.Type.HTTP; // A proxy was selected., +++ b/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +  /** The proxy requested by the client, or null for a proxy to be selected automatically. */, +  final Proxy requestedProxy;, +, +    this.requestedProxy = proxy;, +    String hostName = getURL().getHost();, +    int hostPort = Util.getEffectivePort(getURL());, +    if (usingProxy()) {, +      InetSocketAddress proxyAddress = (InetSocketAddress) requestedProxy.address();, +      hostName = proxyAddress.getHostName();, +      hostPort = proxyAddress.getPort();, +    return new SocketPermission(hostName + ":" + hostPort, "connect, resolve");, +    Proxy selectedProxy = httpEngine.connection != null, +        ? httpEngine.connection.getProxy(), +        : requestedProxy;, +        if (selectedProxy.type() != Proxy.Type.HTTP) {, +            httpEngine.getResponseHeaders().getHeaders(), rawRequestHeaders, selectedProxy, url);, +    return (requestedProxy != null && requestedProxy.type() != Proxy.Type.DIRECT);, +++ b/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +      Address address = new Address(uriHost, getEffectivePort(uri), getSslSocketFactory(),, +          getHostnameVerifier(), policy.requestedProxy);, +    if (connection.getProxy() != policy.requestedProxy) {, +      // Update the request line if the proxy changed; it may need a host name., +    return connection == null, +        ? policy.usingProxy() // A proxy was requested., +        : connection.getProxy().type() == Proxy.Type.HTTP; // A proxy was selected., +++ b/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +  /** The proxy requested by the client, or null for a proxy to be selected automatically. */, +  final Proxy requestedProxy;, +, +    this.requestedProxy = proxy;, +    String hostName = getURL().getHost();, +    int hostPort = Util.getEffectivePort(getURL());, +    if (usingProxy()) {, +      InetSocketAddress proxyAddress = (InetSocketAddress) requestedProxy.address();, +      hostName = proxyAddress.getHostName();, +      hostPort = proxyAddress.getPort();, +    return new SocketPermission(hostName + ":" + hostPort, "connect, resolve");, +    Proxy selectedProxy = httpEngine.connection != null, +        ? httpEngine.connection.getProxy(), +        : requestedProxy;, +        if (selectedProxy.type() != Proxy.Type.HTTP) {, +            httpEngine.getResponseHeaders().getHeaders(), rawRequestHeaders, selectedProxy, url);, +    return (requestedProxy != null && requestedProxy.type() != Proxy.Type.DIRECT);, +++ b/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +    redirectToAnotherOriginServer(false);, +  }, +, +  @Test public void redirectToAnotherOriginServerWithHttps() throws Exception {, +    redirectToAnotherOriginServer(true);, +  }, +, +  private void redirectToAnotherOriginServer(boolean https) throws Exception {, +    server2 = new MockWebServer();, +    if (https) {, +      server.useHttps(sslContext.getSocketFactory(), false);, +      server2.useHttps(sslContext.getSocketFactory(), false);, +      client.setSSLSocketFactory(sslContext.getSocketFactory());, +      client.setHostnameVerifier(new RecordingHostnameVerifier());, +    }, +, +    server2.enqueue(new MockResponse().setBody("This is the 2nd server, again!"));, +    assertContent("This is the 2nd server!", connection);, +    assertContent("This is the first server again!", client.open(server.getUrl("/")));, +    assertContent("This is the 2nd server, again!", client.open(server2.getUrl("/")));, +    String server1Host = hostName + ":" + server.getPort();, +    String server2Host = hostName + ":" + server2.getPort();, +    assertContains(server.takeRequest().getHeaders(), "Host: " + server1Host);, +    assertContains(server2.takeRequest().getHeaders(), "Host: " + server2Host);, +    assertEquals("Expected connection reuse", 1, server.takeRequest().getSequenceNumber());, +    assertEquals("Expected connection reuse", 1, server2.takeRequest().getSequenceNumber());, +  }, +, +  @Test public void redirectWithProxySelector() throws Exception {, +    final List<URI> proxySelectionRequests = new ArrayList<URI>();, +    client.setProxySelector(new ProxySelector() {, +      @Override public List<Proxy> select(URI uri) {, +        proxySelectionRequests.add(uri);, +        MockWebServer proxyServer = (uri.getPort() == server.getPort()) ? server : server2;, +        return Arrays.asList(proxyServer.toProxyAddress());, +      }, +      @Override public void connectFailed(URI uri, SocketAddress address, IOException failure) {, +        throw new AssertionError();, +      }]