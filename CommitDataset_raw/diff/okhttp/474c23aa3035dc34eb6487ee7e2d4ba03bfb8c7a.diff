[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import static java.util.Collections.emptyList;, +import static java.util.Collections.emptyMap;, +import static java.util.Collections.singletonList;, +import static java.util.Collections.singletonMap;, +import static org.junit.Assert.assertNull;, +      Headers.of(singletonMap("", "OkHttp"));, +      Headers.of(singletonMap(" ", "OkHttp"));, +    Headers headers = Headers.of(singletonMap("User-Agent", ""));, +    Headers headers = Headers.of(singletonMap(" User-Agent ", "OkHttp"));, +    Headers headers = Headers.of(singletonMap("User-Agent", " OkHttp "));, +      Headers.of(singletonMap("User-\u0000Agent", "OkHttp"));, +      Headers.of(singletonMap("User-Agent", "Square\u0000OkHttp"));, +  @Test public void testDigestChallengeWithStrictRfc2617Header() {, +    assertEquals("digest", challenges.get(0).scheme());, +    Map<String, String> expectedAuthParams = new LinkedHashMap<>();, +    expectedAuthParams.put("realm", "myrealm");, +    expectedAuthParams.put("nonce", "fjalskdflwejrlaskdfjlaskdjflaksjdflkasdf");, +    expectedAuthParams.put("qop", "auth");, +    expectedAuthParams.put("stale", "FALSE");, +    assertEquals(expectedAuthParams, challenges.get(0).authParams());, +  }, +  @Test public void testDigestChallengeWithDifferentlyOrderedAuthParams() {, +    Headers headers = new Headers.Builder(), +    List<Challenge> challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals("digest", challenges.get(0).scheme());, +    Map<String, String> expectedAuthParams = new LinkedHashMap<>();, +    expectedAuthParams.put("realm", "myrealm");, +    expectedAuthParams.put("nonce", "fjalskdflwejrlaskdfjlaskdjflaksjdflkasdf");, +    expectedAuthParams.put("qop", "auth");, +    expectedAuthParams.put("stale", "FALSE");, +    assertEquals(expectedAuthParams, challenges.get(0).authParams());, +  }, +  @Test public void testDigestChallengeWithDifferentlyOrderedAuthParams2() {, +    Headers headers = new Headers.Builder(), +    List<Challenge> challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals("digest", challenges.get(0).scheme());, +    Map<String, String> expectedAuthParams = new LinkedHashMap<>();, +    expectedAuthParams.put("realm", "myrealm");, +    expectedAuthParams.put("nonce", "fjalskdflwejrlaskdfjlaskdjflaksjdflkasdf");, +    expectedAuthParams.put("qop", "auth");, +    expectedAuthParams.put("stale", "FALSE");, +    assertEquals(expectedAuthParams, challenges.get(0).authParams());, +  }, +  @Test public void testDigestChallengeWithMissingRealm() {, +    Headers headers = new Headers.Builder(), +    List<Challenge> challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals(1, challenges.size());, +    assertEquals("digest", challenges.get(0).scheme());, +    assertNull(challenges.get(0).realm());, +    Map<String, String> expectedAuthParams = new LinkedHashMap<>();, +    expectedAuthParams.put("underrealm", "myrealm");, +    expectedAuthParams.put("nonce", "fjalskdflwejrlaskdfjlaskdjflaksjdflkasdf");, +    expectedAuthParams.put("qop", "auth");, +    expectedAuthParams.put("stale", "FALSE");, +    assertEquals(expectedAuthParams, challenges.get(0).authParams());, +  }, +  @Test public void testDigestChallengeWithAdditionalSpaces() {, +    Headers headers = new Headers.Builder(), +    List<Challenge> challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals("digest", challenges.get(0).scheme());, +    Map<String, String> expectedAuthParams = new LinkedHashMap<>();, +    expectedAuthParams.put("realm", "myrealm");, +    expectedAuthParams.put("nonce", "fjalskdflwejrlaskdfjlaskdjflaksjdflkasdf");, +    expectedAuthParams.put("qop", "auth");, +    expectedAuthParams.put("stale", "FALSE");, +    assertEquals(expectedAuthParams, challenges.get(0).authParams());, +  }, +  @Test public void testDigestChallengeWithAdditionalSpacesBeforeFirstAuthParam() {, +    Headers headers = new Headers.Builder(), +    List<Challenge> challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals("digest", challenges.get(0).scheme());, +    Map<String, String> expectedAuthParams = new LinkedHashMap<>();, +    expectedAuthParams.put("realm", "myrealm");, +    expectedAuthParams.put("nonce", "fjalskdflwejrlaskdfjlaskdjflaksjdflkasdf");, +    expectedAuthParams.put("qop", "auth");, +    expectedAuthParams.put("stale", "FALSE");, +    assertEquals(expectedAuthParams, challenges.get(0).authParams());, +  }, +  @Test public void testDigestChallengeWithCamelCasedNames() {, +    Headers headers = new Headers.Builder(), +    List<Challenge> challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals("digest", challenges.get(0).scheme());, +    Map<String, String> expectedAuthParams = new LinkedHashMap<>();, +    expectedAuthParams.put("realm", "myrealm");, +    expectedAuthParams.put("nonce", "fjalskdflwejrlaskdfjlaskdjflaksjdflkasdf");, +    expectedAuthParams.put("qop", "auth");, +    expectedAuthParams.put("stale", "FALSE");, +    assertEquals(expectedAuthParams, challenges.get(0).authParams());, +  }, +  @Test public void testDigestChallengeWithCamelCasedNames2() {, +    Headers headers = new Headers.Builder(), +    List<Challenge> challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");, +    assertEquals("digest", challenges.get(0).scheme());, +    Map<String, String> expectedAuthParams = new LinkedHashMap<>();, +    expectedAuthParams.put("realm", "myrealm");, +    expectedAuthParams.put("nonce", "fjalskdflwejrlaskdfjlaskdjflaksjdflkasdf");, +    expectedAuthParams.put("qop", "auth");, +    expectedAuthParams.put("stale", "FALSE");, +    assertEquals(expectedAuthParams, challenges.get(0).authParams());]