[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +        .identityForNonAscii(), +  }, +, +  @Test public void fragmentNonAscii() throws Exception {, +    HttpUrl url = HttpUrl.parse("http://host/#Σ");, +    assertEquals("http://host/#Σ", url.toString());, +    assertEquals("Σ", url.fragment());, +    assertEquals("Σ", url.encodedFragment());, +    assertEquals("http://host/#Σ", url.uri().toString());, +  }, +, +  @Test public void fragmentNonAsciiThatOffendsJavaNetUri() throws Exception {, +    HttpUrl url = HttpUrl.parse("http://host/#\u0080");, +    assertEquals("http://host/#\u0080", url.toString());, +    assertEquals("\u0080", url.fragment());, +    assertEquals("\u0080", url.encodedFragment());, +    try {, +      url.uri();, +      fail();, +    } catch (IllegalStateException expected) {, +      // Possibly a bug in java.net.URI. Many non-ASCII code points work, this one doesn't!, +    }, +  }, +, +  @Test public void fragmentPercentEncodedNonAscii() throws Exception {, +    HttpUrl url = HttpUrl.parse("http://host/#%C2%80");, +    assertEquals("http://host/#%C2%80", url.toString());, +    assertEquals("\u0080", url.fragment());, +    assertEquals("%C2%80", url.encodedFragment());, +    assertEquals("http://host/#%C2%80", url.uri().toString());, +  }, +, +  @Test public void fragmentPercentEncodedPartialCodePoint() throws Exception {, +    HttpUrl url = HttpUrl.parse("http://host/#%80");, +    assertEquals("http://host/#%80", url.toString());, +    assertEquals("\ufffd", url.fragment()); // Unicode replacement character., +    assertEquals("%80", url.encodedFragment());, +    assertEquals("http://host/#%80", url.uri().toString());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +        .identityForNonAscii(), +  }, +, +  @Test public void fragmentNonAscii() throws Exception {, +    HttpUrl url = HttpUrl.parse("http://host/#Σ");, +    assertEquals("http://host/#Σ", url.toString());, +    assertEquals("Σ", url.fragment());, +    assertEquals("Σ", url.encodedFragment());, +    assertEquals("http://host/#Σ", url.uri().toString());, +  }, +, +  @Test public void fragmentNonAsciiThatOffendsJavaNetUri() throws Exception {, +    HttpUrl url = HttpUrl.parse("http://host/#\u0080");, +    assertEquals("http://host/#\u0080", url.toString());, +    assertEquals("\u0080", url.fragment());, +    assertEquals("\u0080", url.encodedFragment());, +    try {, +      url.uri();, +      fail();, +    } catch (IllegalStateException expected) {, +      // Possibly a bug in java.net.URI. Many non-ASCII code points work, this one doesn't!, +    }, +  }, +, +  @Test public void fragmentPercentEncodedNonAscii() throws Exception {, +    HttpUrl url = HttpUrl.parse("http://host/#%C2%80");, +    assertEquals("http://host/#%C2%80", url.toString());, +    assertEquals("\u0080", url.fragment());, +    assertEquals("%C2%80", url.encodedFragment());, +    assertEquals("http://host/#%C2%80", url.uri().toString());, +  }, +, +  @Test public void fragmentPercentEncodedPartialCodePoint() throws Exception {, +    HttpUrl url = HttpUrl.parse("http://host/#%80");, +    assertEquals("http://host/#%80", url.toString());, +    assertEquals("\ufffd", url.fragment()); // Unicode replacement character., +    assertEquals("%80", url.encodedFragment());, +    assertEquals("http://host/#%80", url.uri().toString());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/UrlComponentEncodingTester.java, +  private static final int UNICODE_2 = 0x07ff; // Arbitrary code point that's 2 bytes in UTF-8., +  private static final int UNICODE_3 = 0xffff; // Arbitrary code point that's 3 bytes in UTF-8., +  private static final int UNICODE_4 = 0x10ffff; // Arbitrary code point that's 4 bytes in UTF-8., +, +    map.put( UNICODE_2, Encoding.PERCENT);, +    map.put( UNICODE_3, Encoding.PERCENT);, +    map.put( UNICODE_4, Encoding.PERCENT);, +  public UrlComponentEncodingTester identityForNonAscii() {, +    encodings.put(UNICODE_2, Encoding.IDENTITY);, +    encodings.put(UNICODE_3, Encoding.IDENTITY);, +    encodings.put(UNICODE_4, Encoding.IDENTITY);, +    return this;, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java, +        .identityForNonAscii(), +  }, +, +  @Test public void fragmentNonAscii() throws Exception {, +    HttpUrl url = HttpUrl.parse("http://host/#Σ");, +    assertEquals("http://host/#Σ", url.toString());]