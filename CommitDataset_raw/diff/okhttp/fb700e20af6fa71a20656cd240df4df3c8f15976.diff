[+++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +import okhttp3.RealCall.AsyncCall;, +    private List<AsyncCall> calls = new ArrayList<>();, +      calls.add((AsyncCall) command);, +      for (AsyncCall call : calls) {, +      for (Iterator<AsyncCall> i = calls.iterator(); i.hasNext(); ) {, +        AsyncCall call = i.next();, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +import okhttp3.RealCall.AsyncCall;, +    private List<AsyncCall> calls = new ArrayList<>();, +      calls.add((AsyncCall) command);, +      for (AsyncCall call : calls) {, +      for (Iterator<AsyncCall> i = calls.iterator(); i.hasNext(); ) {, +        AsyncCall call = i.next();, +++ b/okhttp/src/main/java/okhttp3/Call.java, +public interface Call {, +  Response execute() throws IOException;, +  void enqueue(Callback responseCallback);, +  void cancel();, +  boolean isExecuted();, +  boolean isCanceled();, +  interface Factory {, +    Call newCall(Request request);, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +import okhttp3.RealCall.AsyncCall;, +    private List<AsyncCall> calls = new ArrayList<>();, +      calls.add((AsyncCall) command);, +      for (AsyncCall call : calls) {, +      for (Iterator<AsyncCall> i = calls.iterator(); i.hasNext(); ) {, +        AsyncCall call = i.next();, +++ b/okhttp/src/main/java/okhttp3/Call.java, +public interface Call {, +  Response execute() throws IOException;, +  void enqueue(Callback responseCallback);, +  void cancel();, +  boolean isExecuted();, +  boolean isCanceled();, +  interface Factory {, +    Call newCall(Request request);, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, +import okhttp3.RealCall.AsyncCall;, +  private final Deque<RealCall> executedCalls = new ArrayDeque<>();, +    for (RealCall call : executedCalls) {, +  synchronized void executed(RealCall call) {, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +import okhttp3.RealCall.AsyncCall;, +    private List<AsyncCall> calls = new ArrayList<>();, +      calls.add((AsyncCall) command);, +      for (AsyncCall call : calls) {, +      for (Iterator<AsyncCall> i = calls.iterator(); i.hasNext(); ) {, +        AsyncCall call = i.next();, +++ b/okhttp/src/main/java/okhttp3/Call.java, +public interface Call {, +  Response execute() throws IOException;, +  void enqueue(Callback responseCallback);, +  void cancel();, +  boolean isExecuted();, +  boolean isCanceled();, +  interface Factory {, +    Call newCall(Request request);, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, +import okhttp3.RealCall.AsyncCall;, +  private final Deque<RealCall> executedCalls = new ArrayDeque<>();, +    for (RealCall call : executedCalls) {, +  synchronized void executed(RealCall call) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +public class OkHttpClient implements Cloneable, Call.Factory {, +        ((RealCall) call).enqueue(responseCallback, forWebSocket);, +        return ((RealCall) call).engine.streamAllocation;, +  @Override public Call newCall(Request request) {, +    return new RealCall(this, request);, +++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java, +import okhttp3.RealCall.AsyncCall;, +    private List<AsyncCall> calls = new ArrayList<>();, +      calls.add((AsyncCall) command);, +      for (AsyncCall call : calls) {, +      for (Iterator<AsyncCall> i = calls.iterator(); i.hasNext(); ) {, +        AsyncCall call = i.next();, +++ b/okhttp/src/main/java/okhttp3/Call.java, +public interface Call {, +  Response execute() throws IOException;, +  void enqueue(Callback responseCallback);, +  void cancel();, +  boolean isExecuted();, +  boolean isCanceled();, +  interface Factory {, +    Call newCall(Request request);, +++ b/okhttp/src/main/java/okhttp3/Dispatcher.java, +import okhttp3.RealCall.AsyncCall;, +  private final Deque<RealCall> executedCalls = new ArrayDeque<>();, +    for (RealCall call : executedCalls) {, +  synchronized void executed(RealCall call) {, +++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java, +public class OkHttpClient implements Cloneable, Call.Factory {, +        ((RealCall) call).enqueue(responseCallback, forWebSocket);, +        return ((RealCall) call).engine.streamAllocation;, +  @Override public Call newCall(Request request) {, +    return new RealCall(this, request);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +/*]