[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.CONTINUE_ALWAYS;, +        response.getWebSocketListener(), new SecureRandom(), 0);, +    webSocket.initReaderAndWriter(name, streams);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.CONTINUE_ALWAYS;, +        response.getWebSocketListener(), new SecureRandom(), 0);, +    webSocket.initReaderAndWriter(name, streams);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +      webSocket = new RealWebSocket(response.request(), listener, random, pingIntervalMillis);, +      webSocket.initReaderAndWriter(name, this);, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.CONTINUE_ALWAYS;, +        response.getWebSocketListener(), new SecureRandom(), 0);, +    webSocket.initReaderAndWriter(name, streams);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +      webSocket = new RealWebSocket(response.request(), listener, random, pingIntervalMillis);, +      webSocket.initReaderAndWriter(name, this);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +import java.util.concurrent.CountDownLatch;, +import okhttp3.mockwebserver.internal.tls.SslClient;, +    while (webSocket.receivedPongCount() < 3) {, +    assertEquals(3, webSocket.sentPingCount());, +    assertEquals(3, server.receivedPingCount());, +    assertEquals(3, webSocket.receivedPongCount());, +    assertEquals(0, server.receivedPongCount());, +    assertEquals(0, webSocket.receivedPingCount());, +    assertEquals(0, webSocket.sentPingCount());, +    assertEquals(0, webSocket.receivedPingCount());, +    assertEquals(0, webSocket.receivedPongCount());, +    assertEquals(0, server.sentPingCount());, +    assertEquals(0, server.receivedPingCount());, +    assertEquals(0, server.receivedPongCount());, +  }, +, +  /**, +   * Configure the websocket to send pings every 500 ms. Artificially prevent the server from, +   * responding to pings. The client should give up when attempting to send its 2nd ping, at about, +   * 1000 ms., +   */, +  @Test public void unacknowledgedPingFailsConnection() throws Exception {, +    client = client.newBuilder(), +        .pingInterval(500, TimeUnit.MILLISECONDS), +        .build();, +, +    // Stall in onOpen to prevent pongs from being sent., +    final CountDownLatch latch = new CountDownLatch(1);, +    webServer.enqueue(new MockResponse().withWebSocketUpgrade(new WebSocketListener() {, +      @Override public void onOpen(WebSocket webSocket, Response response) {, +        try {, +          latch.await(); // The server can't respond to pings!, +        } catch (InterruptedException e) {, +          throw new AssertionError(e);, +        }, +      }, +    }));, +, +    long openAtNanos = System.nanoTime();, +    newWebSocket();, +    clientListener.assertOpen();, +    clientListener.assertFailure(SocketTimeoutException.class,, +        "sent ping but didn't receive pong within 500ms (after 0 successful ping/pongs)");, +    latch.countDown();, +, +    long elapsedUntilFailure = System.nanoTime() - openAtNanos;, +    assertEquals(1000, TimeUnit.NANOSECONDS.toMillis(elapsedUntilFailure), 250d);, +    RealWebSocket webSocket = new RealWebSocket(, +        request, clientListener, random, client.pingIntervalMillis());, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +import static okhttp3.mockwebserver.SocketPolicy.CONTINUE_ALWAYS;, +        response.getWebSocketListener(), new SecureRandom(), 0);, +    webSocket.initReaderAndWriter(name, streams);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java, +      webSocket = new RealWebSocket(response.request(), listener, random, pingIntervalMillis);, +      webSocket.initReaderAndWriter(name, this);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +import java.util.concurrent.CountDownLatch;, +import okhttp3.mockwebserver.internal.tls.SslClient;, +    while (webSocket.receivedPongCount() < 3) {, +    assertEquals(3, webSocket.sentPingCount());, +    assertEquals(3, server.receivedPingCount());, +    assertEquals(3, webSocket.receivedPongCount());, +    assertEquals(0, server.receivedPongCount());, +    assertEquals(0, webSocket.receivedPingCount());, +    assertEquals(0, webSocket.sentPingCount());, +    assertEquals(0, webSocket.receivedPingCount());, +    assertEquals(0, webSocket.receivedPongCount());, +    assertEquals(0, server.sentPingCount());, +    assertEquals(0, server.receivedPingCount());, +    assertEquals(0, server.receivedPongCount());, +  }, +, +  /**, +   * Configure the websocket to send pings every 500 ms. Artificially prevent the server from, +   * responding to pings. The client should give up when attempting to send its 2nd ping, at about, +   * 1000 ms., +   */, +  @Test public void unacknowledgedPingFailsConnection() throws Exception {, +    client = client.newBuilder(), +        .pingInterval(500, TimeUnit.MILLISECONDS)]