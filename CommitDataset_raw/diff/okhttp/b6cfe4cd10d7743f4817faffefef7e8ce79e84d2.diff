[+++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +import okhttp3.mockwebserver.SocketPolicy;, +  @Test public void networkInterceptorReturnsConnectionOnEmptyBody() throws Exception {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .addHeader("Connection", "Close"));, +, +    Interceptor interceptor = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        Response response = chain.proceed(chain.request());, +        assertNotNull(chain.connection());, +        return response;, +      }, +    };, +, +    client = client.newBuilder(), +        .addNetworkInterceptor(interceptor), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    Response response = client.newCall(request).execute();, +    response.body().close();, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +import okhttp3.mockwebserver.SocketPolicy;, +  @Test public void networkInterceptorReturnsConnectionOnEmptyBody() throws Exception {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END), +        .addHeader("Connection", "Close"));, +, +    Interceptor interceptor = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        Response response = chain.proceed(chain.request());, +        assertNotNull(chain.connection());, +        return response;, +      }, +    };, +, +    client = client.newBuilder(), +        .addNetworkInterceptor(interceptor), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    Response response = client.newCall(request).execute();, +    response.body().close();, +  }, +, +++ b/okhttp/src/main/java/okhttp3/internal/http/HttpEngine.java, +      networkResponse = new NetworkInterceptorChain(0, networkRequest,, +          streamAllocation.connection()).proceed(networkRequest);, +    private final Connection connection;, +    NetworkInterceptorChain(int index, Request request, Connection connection) {, +      this.connection = connection;, +      return connection;, +        NetworkInterceptorChain chain = new NetworkInterceptorChain(index + 1, request, connection);]