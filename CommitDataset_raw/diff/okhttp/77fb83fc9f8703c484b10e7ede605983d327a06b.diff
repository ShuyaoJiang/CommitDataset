[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_DURING_RESPONSE_BODY;, +    throttledTransfer(response, socket, body, sink, body.size());, +    long halfByteCount = byteCount / 2;, +    boolean disconnectHalfway = throttlePolicy.getSocketPolicy() == DISCONNECT_DURING_RESPONSE_BODY;, +, +        // Ensure we do not read past the allotted bytes in this period., +        long toRead = Math.min(byteCount, bytesPerPeriod - b);, +        // Ensure we do not read past halfway if the policy will kill the connection., +        if (disconnectHalfway) {, +          toRead = Math.min(toRead, byteCount - halfByteCount);, +        }, +, +        if (disconnectHalfway && byteCount == halfByteCount) {, +          socket.close();, +          return;, +        }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_DURING_RESPONSE_BODY;, +    throttledTransfer(response, socket, body, sink, body.size());, +    long halfByteCount = byteCount / 2;, +    boolean disconnectHalfway = throttlePolicy.getSocketPolicy() == DISCONNECT_DURING_RESPONSE_BODY;, +, +        // Ensure we do not read past the allotted bytes in this period., +        long toRead = Math.min(byteCount, bytesPerPeriod - b);, +        // Ensure we do not read past halfway if the policy will kill the connection., +        if (disconnectHalfway) {, +          toRead = Math.min(toRead, byteCount - halfByteCount);, +        }, +, +        if (disconnectHalfway && byteCount == halfByteCount) {, +          socket.close();, +          return;, +        }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +  /** Close connection after writing half of the response body (if present). */, +  DISCONNECT_DURING_RESPONSE_BODY,, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_DURING_RESPONSE_BODY;, +    throttledTransfer(response, socket, body, sink, body.size());, +    long halfByteCount = byteCount / 2;, +    boolean disconnectHalfway = throttlePolicy.getSocketPolicy() == DISCONNECT_DURING_RESPONSE_BODY;, +, +        // Ensure we do not read past the allotted bytes in this period., +        long toRead = Math.min(byteCount, bytesPerPeriod - b);, +        // Ensure we do not read past halfway if the policy will kill the connection., +        if (disconnectHalfway) {, +          toRead = Math.min(toRead, byteCount - halfByteCount);, +        }, +, +        if (disconnectHalfway && byteCount == halfByteCount) {, +          socket.close();, +          return;, +        }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java, +  /** Close connection after writing half of the response body (if present). */, +  DISCONNECT_DURING_RESPONSE_BODY,, +, +++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java, +  @Test public void disconnectHalfway() throws IOException {, +    server.enqueue(new MockResponse(), +        .setBody("ab"), +        .setSocketPolicy(SocketPolicy.DISCONNECT_DURING_RESPONSE_BODY));, +, +    URLConnection connection = server.getUrl("/").openConnection();, +    assertEquals(2, connection.getHeaderFieldLong("Content-Length", -1));, +    InputStream in = connection.getInputStream();, +    assertEquals('a', in.read());, +    assertEquals(-1, in.read());, +  }, +]