[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java, +import com.squareup.okhttp.internal.io.FileSystem;, +import com.squareup.okhttp.internal.io.InMemoryFileSystem;, +  private final FileSystem fileSystem = FileSystem.SYSTEM;, +    cache = new DiskLruCache(fileSystem, cacheDir, appVersion, 2, maxSize, executor);, +    assertFalse(fileSystem.exists(k1));, +    assertFalse(fileSystem.exists(cleanFile0));, +    assertFalse(fileSystem.exists(cleanFile1));, +    assertFalse(fileSystem.exists(dirtyFile0));, +    assertFalse(fileSystem.exists(dirtyFile1));, +, +    BufferedSink sink = Okio.buffer(fileSystem.sink(journalFile));, +    sink.writeUtf8(MAGIC + "\n" + VERSION_1 + "\n100\n2\n\nCLEAN k1 1 1"); // no trailing newline, +    sink.close();, +    assertFalse(fileSystem.exists(getCleanFile("k1", 0)));, +    assertFalse(fileSystem.exists(getCleanFile("k1", 1)));, +    assertFalse(fileSystem.exists(getDirtyFile("k1", 0)));, +    assertFalse(fileSystem.exists(getDirtyFile("k1", 1)));, +    assertFalse(fileSystem.exists(getCleanFile("k1", 0)));, +    assertFalse(fileSystem.exists(getCleanFile("k1", 1)));, +    assertFalse(fileSystem.exists(getDirtyFile("k1", 0)));, +    assertFalse(fileSystem.exists(getDirtyFile("k1", 1)));, +      DiskLruCache.create(fileSystem, cacheDir, appVersion, 2, 0);, +      DiskLruCache.create(fileSystem, cacheDir, appVersion, 0, 10);, +    fileSystem.rename(journalFile, journalBkpFile);, +    assertFalse(fileSystem.exists(journalFile));, +    assertFalse(fileSystem.exists(journalBkpFile));, +    assertTrue(fileSystem.exists(journalFile));, +    assertTrue(fileSystem.exists(journalFile));, +    assertTrue(fileSystem.exists(journalBkpFile));, +    assertFalse(fileSystem.exists(journalBkpFile));, +    assertTrue(fileSystem.exists(journalFile));, +    cache = DiskLruCache.create(fileSystem, dir, appVersion, 2, Integer.MAX_VALUE);, +    assertTrue(fileSystem.exists(new File(dir, "a.0")));, +    assertTrue(fileSystem.exists(new File(dir, "a.1")));, +    assertTrue(fileSystem.exists(new File(dir, "journal")));, +    fileSystem.delete(getCleanFile("a", 1));, +    fileSystem.deleteContents(tempDir.getRoot());, +    fileSystem.deleteContents(tempDir.getRoot());, +    fileSystem.deleteContents(tempDir.getRoot());, +    fileSystem.deleteContents(tempDir.getRoot());, +    cache = new DiskLruCache(fileSystem, cacheDir, appVersion, 2, Integer.MAX_VALUE, executor);, +    BufferedSink sink = Okio.buffer(fileSystem.sink(journalFile));, +    sink.writeUtf8(magic + "\n");, +    sink.writeUtf8(version + "\n");, +    sink.writeUtf8(appVersion + "\n");, +    sink.writeUtf8(valueCount + "\n");, +    sink.writeUtf8(blank + "\n");, +      sink.writeUtf8(line);, +      sink.writeUtf8("\n");, +    sink.close();, +    BufferedSource source = Okio.buffer(fileSystem.source(journalFile));, +    for (String line; (line = source.readUtf8Line()) != null; ) {, +    source.close();, +  private String readFile(File file) throws Exception {, +    BufferedSource source = Okio.buffer(fileSystem.source(file));, +    String result = source.readUtf8();, +    source.close();, +    return result;, +  public void writeFile(File file, String content) throws Exception {, +    BufferedSink sink = Okio.buffer(fileSystem.sink(file));, +    sink.writeUtf8(content);, +    sink.close();, +    assertFalse(fileSystem.exists(getCleanFile("g1", 0)));, +    assertFalse(fileSystem.exists(getCleanFile("g1", 1)));, +    assertFalse(fileSystem.exists(getCleanFile("g2", 0)));, +    assertFalse(fileSystem.exists(getCleanFile("g2", 1)));, +    assertFalse(fileSystem.exists(new File(cacheDir, "otherFile0")));, +    assertFalse(fileSystem.exists(new File(cacheDir, "dir1")));, +    assertFalse(fileSystem.exists(getCleanFile(key, 0)));, +    assertFalse(fileSystem.exists(getCleanFile(key, 1)));, +    assertFalse(fileSystem.exists(getDirtyFile(key, 0)));, +    assertFalse(fileSystem.exists(getDirtyFile(key, 1)));, +    assertTrue(fileSystem.exists(getCleanFile(key, 0)));, +    assertTrue(fileSystem.exists(getCleanFile(key, 1)));, +    Source source = fileSystem.source(from);, +    BufferedSink sink = Okio.buffer(fileSystem.sink(to));, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java, +import com.squareup.okhttp.internal.io.FileSystem;, +import com.squareup.okhttp.internal.io.InMemoryFileSystem;, +  private final FileSystem fileSystem = FileSystem.SYSTEM;, +    cache = new DiskLruCache(fileSystem, cacheDir, appVersion, 2, maxSize, executor);, +    assertFalse(fileSystem.exists(k1));, +    assertFalse(fileSystem.exists(cleanFile0));, +    assertFalse(fileSystem.exists(cleanFile1));, +    assertFalse(fileSystem.exists(dirtyFile0));, +    assertFalse(fileSystem.exists(dirtyFile1));, +, +    BufferedSink sink = Okio.buffer(fileSystem.sink(journalFile));, +    sink.writeUtf8(MAGIC + "\n" + VERSION_1 + "\n100\n2\n\nCLEAN k1 1 1"); // no trailing newline, +    sink.close();, +    assertFalse(fileSystem.exists(getCleanFile("k1", 0)));, +    assertFalse(fileSystem.exists(getCleanFile("k1", 1)));, +    assertFalse(fileSystem.exists(getDirtyFile("k1", 0)));, +    assertFalse(fileSystem.exists(getDirtyFile("k1", 1)));, +    assertFalse(fileSystem.exists(getCleanFile("k1", 0)));, +    assertFalse(fileSystem.exists(getCleanFile("k1", 1)));, +    assertFalse(fileSystem.exists(getDirtyFile("k1", 0)));, +    assertFalse(fileSystem.exists(getDirtyFile("k1", 1)));, +      DiskLruCache.create(fileSystem, cacheDir, appVersion, 2, 0);]