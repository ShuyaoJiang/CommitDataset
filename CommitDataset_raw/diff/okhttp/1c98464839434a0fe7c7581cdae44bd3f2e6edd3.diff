[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.RecordingEventListener.CallFailed;, +import okhttp3.RecordingEventListener.ConnectFailed;, +import org.junit.Ignore;, +  @Test public void canceledCallEventSequence() throws IOException {, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    call.cancel();, +    try {, +      call.execute();, +      fail();, +    } catch (IOException expected) {, +      assertEquals("Canceled", expected.getMessage());, +    }, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "CallFailed");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);, +    assertSame(call, callFailed.call);, +    assertTrue(callFailed.ioe instanceof UnknownHostException);, +    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);, +    assertSame(call, callFailed.call);, +    assertTrue(callFailed.ioe instanceof UnknownHostException);, +    ConnectFailed connectFailed = listener.removeUpToEvent(ConnectFailed.class);, +    assertSame(call, connectFailed.call);, +    assertEquals(expectedAddress, connectFailed.inetSocketAddress);, +    assertNull(connectFailed.protocol);, +    assertNotNull(connectFailed.ioe);, +    listener.removeUpToEvent(ConnectFailed.class);, +    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);, +    assertSame(call, callFailed.call);, +    assertNotNull(callFailed.ioe);, +    listener.removeUpToEvent(ConnectFailed.class);, +  @Ignore("TODO(jwilson): move callEnd/callFail to follow the responseBodyEnd"), +  @Ignore("TODO(jwilson): move callEnd/callFail to follow the responseBodyEnd"), +  @Ignore("TODO(jwilson): move callEnd/callFail to follow the responseBodyEnd"), +    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);, +    assertNotNull(callFailed.ioe);, +    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);, +    assertNotNull(callFailed.ioe);, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import okhttp3.RecordingEventListener.CallFailed;, +import okhttp3.RecordingEventListener.ConnectFailed;, +import org.junit.Ignore;, +  @Test public void canceledCallEventSequence() throws IOException {, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .build());, +    call.cancel();, +    try {, +      call.execute();, +      fail();, +    } catch (IOException expected) {, +      assertEquals("Canceled", expected.getMessage());, +    }, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "CallFailed");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +, +    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);, +    assertSame(call, callFailed.call);, +    assertTrue(callFailed.ioe instanceof UnknownHostException);, +    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);, +    assertSame(call, callFailed.call);, +    assertTrue(callFailed.ioe instanceof UnknownHostException);, +    ConnectFailed connectFailed = listener.removeUpToEvent(ConnectFailed.class);, +    assertSame(call, connectFailed.call);, +    assertEquals(expectedAddress, connectFailed.inetSocketAddress);, +    assertNull(connectFailed.protocol);, +    assertNotNull(connectFailed.ioe);, +    listener.removeUpToEvent(ConnectFailed.class);, +    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);, +    assertSame(call, callFailed.call);, +    assertNotNull(callFailed.ioe);, +    listener.removeUpToEvent(ConnectFailed.class);, +  @Ignore("TODO(jwilson): move callEnd/callFail to follow the responseBodyEnd"), +  @Ignore("TODO(jwilson): move callEnd/callFail to follow the responseBodyEnd"), +  @Ignore("TODO(jwilson): move callEnd/callFail to follow the responseBodyEnd"), +    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);, +    assertNotNull(callFailed.ioe);, +    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);, +    assertNotNull(callFailed.ioe);, +++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java, +    return eventClass.cast(event);, +  @Override public void dnsEnd(Call call, String domainName, List<InetAddress> inetAddressList) {, +    logEvent(new DnsEnd(call, domainName, inetAddressList));, +  @Override public void secureConnectEnd(Call call, Handshake handshake) {, +    logEvent(new SecureConnectEnd(call, handshake));, +      @Nullable Proxy proxy, Protocol protocol) {, +    logEvent(new ConnectEnd(call, inetSocketAddress, proxy, protocol));, +  }, +, +  @Override public void connectFailed(Call call, InetSocketAddress inetSocketAddress,, +      @Nullable Proxy proxy, @Nullable Protocol protocol, @Nullable IOException ioe) {, +    logEvent(new ConnectFailed(call, inetSocketAddress, proxy, protocol, ioe));, +  @Override public void requestHeadersEnd(Call call, long headerLength) {]