[+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +  @Test public void immutableIsCached() throws Exception {, +    server.enqueue(new MockResponse(), +        .addHeader("Cache-Control", "immutable"), +        .setBody("A"));, +    server.enqueue(new MockResponse(), +        .setBody("B"));, +, +    HttpUrl url = server.url("/");, +    assertEquals("A", get(url).body().string());, +    assertEquals("A", get(url).body().string());, +  }, +, +  @Test public void immutableIsCachedAfterMultipleCalls() throws Exception {, +    server.enqueue(new MockResponse(), +        .setBody("A"));, +    server.enqueue(new MockResponse(), +        .addHeader("Cache-Control", "immutable"), +        .setBody("B"));, +    server.enqueue(new MockResponse(), +        .setBody("C"));, +, +    HttpUrl url = server.url("/");, +    assertEquals("A", get(url).body().string());, +    assertEquals("B", get(url).body().string());, +    assertEquals("B", get(url).body().string());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +  @Test public void immutableIsCached() throws Exception {, +    server.enqueue(new MockResponse(), +        .addHeader("Cache-Control", "immutable"), +        .setBody("A"));, +    server.enqueue(new MockResponse(), +        .setBody("B"));, +, +    HttpUrl url = server.url("/");, +    assertEquals("A", get(url).body().string());, +    assertEquals("A", get(url).body().string());, +  }, +, +  @Test public void immutableIsCachedAfterMultipleCalls() throws Exception {, +    server.enqueue(new MockResponse(), +        .setBody("A"));, +    server.enqueue(new MockResponse(), +        .addHeader("Cache-Control", "immutable"), +        .setBody("B"));, +    server.enqueue(new MockResponse(), +        .setBody("C"));, +, +    HttpUrl url = server.url("/");, +    assertEquals("A", get(url).body().string());, +    assertEquals("B", get(url).body().string());, +    assertEquals("B", get(url).body().string());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +  @Test public void immutableIsCached() throws Exception {, +    server.enqueue(new MockResponse(), +        .addHeader("Cache-Control", "immutable"), +        .setBody("A"));, +    server.enqueue(new MockResponse(), +        .setBody("B"));, +, +    HttpUrl url = server.url("/");, +    assertEquals("A", get(url).body().string());, +    assertEquals("A", get(url).body().string());, +  }, +, +  @Test public void immutableIsCachedAfterMultipleCalls() throws Exception {, +    server.enqueue(new MockResponse(), +        .setBody("A"));, +    server.enqueue(new MockResponse(), +        .addHeader("Cache-Control", "immutable"), +        .setBody("B"));, +    server.enqueue(new MockResponse(), +        .setBody("C"));, +, +    HttpUrl url = server.url("/");, +    assertEquals("A", get(url).body().string());, +    assertEquals("B", get(url).body().string());, +    assertEquals("B", get(url).body().string());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheStrategy.java, +      CacheControl responseCaching = cacheResponse.cacheControl();, +      if (responseCaching.immutable()) {, +        return new CacheStrategy(null, cacheResponse);, +      }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java, +  @Test public void immutableIsCached() throws Exception {, +    server.enqueue(new MockResponse(), +        .addHeader("Cache-Control", "immutable"), +        .setBody("A"));, +    server.enqueue(new MockResponse(), +        .setBody("B"));, +]