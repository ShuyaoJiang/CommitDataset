[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import static org.junit.Assert.assertTrue;, +    try {, +      call.execute();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertTrue(expected.getMessage().startsWith("Closing the body of"));, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import static org.junit.Assert.assertTrue;, +    try {, +      call.execute();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertTrue(expected.getMessage().startsWith("Closing the body of"));, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import static org.junit.Assert.assertTrue;, +    try {, +      call.execute();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertTrue(expected.getMessage().startsWith("Closing the body of"));, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Exchange.java, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import static org.junit.Assert.assertTrue;, +    try {, +      call.execute();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertTrue(expected.getMessage().startsWith("Closing the body of"));, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Exchange.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Transmitter.java, +      if (this.exchange == null) throw new IllegalStateException();, +      if (this.exchange != exchange) throw new IllegalStateException();, +      if (exchangeRequestDone && exchangeResponseDone) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import static org.junit.Assert.assertTrue;, +    try {, +      call.execute();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertTrue(expected.getMessage().startsWith("Closing the body of"));, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Exchange.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Transmitter.java, +      if (this.exchange == null) throw new IllegalStateException();, +      if (this.exchange != exchange) throw new IllegalStateException();, +      if (exchangeRequestDone && exchangeResponseDone) {, +++ b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java, +      Request followUp;, +      try {, +        followUp = followUpRequest(response, route);, +      } catch (IOException e) {, +        throw e;, +      }, +, +        throw new IllegalStateException("Closing the body of " + response, +            + " didn't close its backing stream. Bad interceptor?");, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/internal/duplex/MockDuplexResponseBody.java, +++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java, +import static org.junit.Assert.assertTrue;, +    try {, +      call.execute();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertTrue(expected.getMessage().startsWith("Closing the body of"));, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Exchange.java, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Transmitter.java, +      if (this.exchange == null) throw new IllegalStateException();, +      if (this.exchange != exchange) throw new IllegalStateException();, +      if (exchangeRequestDone && exchangeResponseDone) {, +++ b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java, +      Request followUp;, +      try {, +        followUp = followUpRequest(response, route);, +      } catch (IOException e) {, +        throw e;, +      }, +, +        throw new IllegalStateException("Closing the body of " + response, +            + " didn't close its backing stream. Bad interceptor?");, +++ b/okhttp/src/main/java/okhttp3/internal/http1/Http1ExchangeCodec.java, +      throw new ProtocolException("Duplex connections are not supported for HTTP/1");]