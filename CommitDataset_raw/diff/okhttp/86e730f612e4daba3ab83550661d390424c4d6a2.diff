[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] HTTP_20_DRAFT_06 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0', +  };, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_06)) {, +              transport = Transport.HTTP_20_DRAFT_06;, +        if (transport == Transport.SPDY_3 || transport == Transport.HTTP_20_DRAFT_06) {, +          if (transport == Transport.SPDY_3) {, +          } else {, +            builder.http20Draft06();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_06, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] HTTP_20_DRAFT_06 = new byte[] {, +      'H', 'T', 'T', 'P', '-', 'd', 'r', 'a', 'f', 't', '-', '0', '6', '/', '2', '.', '0', +  };, +            } else if (Arrays.equals(selectedProtocol, HTTP_20_DRAFT_06)) {, +              transport = Transport.HTTP_20_DRAFT_06;, +        if (transport == Transport.SPDY_3 || transport == Transport.HTTP_20_DRAFT_06) {, +          if (transport == Transport.SPDY_3) {, +          } else {, +            builder.http20Draft06();, +    HTTP_11, SPDY_3, HTTP_20_DRAFT_06, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Hpack.java, +package com.squareup.okhttp.internal.spdy;, +, +import java.io.DataInputStream;, +import java.io.IOException;, +import java.io.OutputStream;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.BitSet;, +import java.util.List;, +, +/**, + * Read and write HPACK v03., + * http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-03, + */, +final class Hpack {, +, +  static class HeaderEntry {, +    private final String name;, +    private final String value;, +, +    HeaderEntry(String name, String value) {, +      this.name = name;, +      this.value = value;, +    }, +, +    // TODO: This needs to be the length in UTF-8 bytes, not the length in chars., +    int length() {, +      return 32 + name.length() + value.length();, +    }, +  }, +, +  static final int PREFIX_5_BITS = 0x1f;, +  static final int PREFIX_6_BITS = 0x3f;, +  static final int PREFIX_7_BITS = 0x7f;, +  static final int PREFIX_8_BITS = 0xff;, +, +  static final List<HeaderEntry> INITIAL_CLIENT_TO_SERVER_HEADER_TABLE = Arrays.asList(, +      new HeaderEntry(":scheme", "http"),, +      new HeaderEntry(":scheme", "https"),, +      new HeaderEntry(":host", ""),, +      new HeaderEntry(":path", "/"),, +      new HeaderEntry(":method", "GET"),, +      new HeaderEntry("accept", ""),, +      new HeaderEntry("accept-charset", ""),, +      new HeaderEntry("accept-encoding", ""),, +      new HeaderEntry("accept-language", ""),, +      new HeaderEntry("cookie", ""),, +      new HeaderEntry("if-modified-since", ""),, +      new HeaderEntry("user-agent", ""),, +      new HeaderEntry("referer", ""),, +      new HeaderEntry("authorization", ""),, +      new HeaderEntry("allow", ""),, +      new HeaderEntry("cache-control", ""),, +      new HeaderEntry("connection", ""),, +      new HeaderEntry("content-length", ""),, +      new HeaderEntry("content-type", ""),, +      new HeaderEntry("date", ""),, +      new HeaderEntry("expect", ""),, +      new HeaderEntry("from", ""),, +      new HeaderEntry("if-match", ""),, +      new HeaderEntry("if-none-match", ""),, +      new HeaderEntry("if-range", ""),, +      new HeaderEntry("if-unmodified-since", ""),, +      new HeaderEntry("max-forwards", ""),, +      new HeaderEntry("proxy-authorization", ""),, +      new HeaderEntry("range", ""),, +      new HeaderEntry("via", ""), +  );, +, +  static final List<HeaderEntry> INITIAL_SERVER_TO_CLIENT_HEADER_TABLE = Arrays.asList(, +      new HeaderEntry(":status", "200"),, +      new HeaderEntry("age", ""),, +      new HeaderEntry("cache-control", ""),, +      new HeaderEntry("content-length", ""),, +      new HeaderEntry("content-type", ""),, +      new HeaderEntry("date", ""),, +      new HeaderEntry("etag", ""),]