[+++ b/src/main/java/libcore/net/http/HttpResponseCache.java, +++ b/src/main/java/libcore/net/http/HttpResponseCache.java, +++ b/src/main/java/libcore/net/http/HttpURLConnectionImpl.java, +import libcore.io.IoUtils;, +            // We close the response body here instead of in, +            // HttpEngine.release because that is called when input, +            // has been completely read from the underlying socket., +            // However the response body can be a GZIPInputStream that, +            // still has unread data., +            if (httpEngine.hasResponse()) {, +                IoUtils.closeQuietly(httpEngine.getResponseBody());, +            }, +++ b/src/main/java/libcore/net/http/HttpResponseCache.java, +++ b/src/main/java/libcore/net/http/HttpURLConnectionImpl.java, +import libcore.io.IoUtils;, +            // We close the response body here instead of in, +            // HttpEngine.release because that is called when input, +            // has been completely read from the underlying socket., +            // However the response body can be a GZIPInputStream that, +            // still has unread data., +            if (httpEngine.hasResponse()) {, +                IoUtils.closeQuietly(httpEngine.getResponseBody());, +            }, +++ b/src/test/java/libcore/net/http/URLConnectionTest.java, +//    public void testDisconnectAfterOnlyResponseCodeCausesNoCloseGuardWarning() throws IOException {, +//        CloseGuardGuard guard = new CloseGuardGuard();, +//        try {, +//            server.enqueue(new MockResponse(), +//                    .setBody(gzip("ABCABCABC".getBytes("UTF-8"))), +//                    .addHeader("Content-Encoding: gzip"));, +//            server.play();, +//, +//            HttpURLConnection connection = (HttpURLConnection) server.getUrl("/").openConnection();, +//            assertEquals(200, connection.getResponseCode());, +//            connection.disconnect();, +//            connection = null;, +//            assertFalse(guard.wasCloseGuardCalled());, +//        } finally {, +//            guard.close();, +//        }, +//    }, +//, +//    public static class CloseGuardGuard implements Closeable, CloseGuard.Reporter  {, +//        private final CloseGuard.Reporter oldReporter = CloseGuard.getReporter();, +//, +//        private AtomicBoolean closeGuardCalled = new AtomicBoolean();, +//, +//        public CloseGuardGuard() {, +//            CloseGuard.setReporter(this);, +//        }, +//, +//        @Override public void report(String message, Throwable allocationSite) {, +//            oldReporter.report(message, allocationSite);, +//            closeGuardCalled.set(true);, +//        }, +//, +//        public boolean wasCloseGuardCalled() {, +//            // FinalizationTester.induceFinalization();, +//            close();, +//            return closeGuardCalled.get();, +//        }, +//, +//        @Override public void close() {, +//            CloseGuard.setReporter(oldReporter);, +//        }, +//, +//    }, +]