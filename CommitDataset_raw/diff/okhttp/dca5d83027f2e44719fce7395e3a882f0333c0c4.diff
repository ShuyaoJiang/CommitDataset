[+++ b/pom.xml, +        <junit.version>4.10</junit.version>, +++ b/pom.xml, +        <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, +        String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);, +++ b/pom.xml, +        <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, +        String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +    public static String getDefaultUserAgent() {, +++ b/pom.xml, +        <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, +        String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +    public static String getDefaultUserAgent() {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpsURLConnectionImpl.java, +    public String getHeaderFieldKey(int position) {, +        return delegate.getHeaderFieldKey(position);, +++ b/pom.xml, +        <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, +        String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpEngine.java, +    public static String getDefaultUserAgent() {, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpsURLConnectionImpl.java, +    public String getHeaderFieldKey(int position) {, +        return delegate.getHeaderFieldKey(position);, +++ b/src/test/java/com/squareup/okhttp/internal/io/DiskLruCacheTest.java, +import org.junit.After;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +import org.junit.Before;, +import org.junit.Test;, +public final class DiskLruCacheTest {, +    @Before public void setUp() throws Exception {, +    @After public void tearDown() throws Exception {, +    @Test public void emptyCache() throws Exception {, +    @Test public void writeAndReadEntry() throws Exception {, +    @Test public void readAndWriteEntryAcrossCacheOpenAndClose() throws Exception {, +    @Test public void journalWithEditAndPublish() throws Exception {, +    @Test public void revertedNewFileIsRemoveInJournal() throws Exception {, +    @Test public void unterminatedEditIsRevertedOnClose() throws Exception {, +    @Test public void journalDoesNotIncludeReadOfYetUnpublishedValue() throws Exception {, +    @Test public void journalWithEditAndPublishAndRead() throws Exception {, +    @Test public void cannotOperateOnEditAfterPublish() throws Exception {, +    @Test public void cannotOperateOnEditAfterRevert() throws Exception {, +    @Test public void explicitRemoveAppliedToDiskImmediately() throws Exception {, +    @Test public void readAndWriteOverlapsMaintainConsistency() throws Exception {, +    @Test public void openWithDirtyKeyDeletesAllFilesForThatKey() throws Exception {, +    @Test public void openWithInvalidVersionClearsDirectory() throws Exception {, +    @Test public void openWithInvalidAppVersionClearsDirectory() throws Exception {, +    @Test public void openWithInvalidValueCountClearsDirectory() throws Exception {, +    @Test public void openWithInvalidBlankLineClearsDirectory() throws Exception {, +    @Test public void openWithInvalidJournalLineClearsDirectory() throws Exception {, +    @Test public void openWithInvalidFileSizeClearsDirectory() throws Exception {, +    @Test public void openWithTruncatedLineDiscardsThatLine() throws Exception {, +    @Test public void openWithTooManyFileSizesClearsDirectory() throws Exception {, +    @Test public void keyWithSpaceNotPermitted() throws Exception {, +    @Test public void keyWithNewlineNotPermitted() throws Exception {, +    @Test public void keyWithCarriageReturnNotPermitted() throws Exception {, +    @Test public void nullKeyThrows() throws Exception {, +    @Test public void createNewEntryWithTooFewValuesFails() throws Exception {, +    @Test public void createNewEntryWithMissingFileAborts() throws Exception {, +    @Test public void revertWithTooFewValues() throws Exception {, +    @Test public void updateExistingEntryWithTooFewValuesReusesPreviousValues() throws Exception {, +    @Test public void evictOnInsert() throws Exception {, +    @Test public void evictOnUpdate() throws Exception {, +    @Test public void evictionHonorsLruFromCurrentSession() throws Exception {, +    @Test public void evictionHonorsLruFromPreviousSession() throws Exception {, +    @Test public void cacheSingleEntryOfSizeGreaterThanMaxSize() throws Exception {, +    @Test public void cacheSingleValueOfSizeGreaterThanMaxSize() throws Exception {, +    @Test public void constructorDoesNotAllowZeroCacheSize() throws Exception {, +    @Test public void constructorDoesNotAllowZeroValuesPerEntry() throws Exception {, +    @Test public void removeAbsentElement() throws Exception {, +    @Test public void readingTheSameStreamMultipleTimes() throws Exception {, +    @Test public void rebuildJournalOnRepeatedReads() throws Exception {, +    @Test public void rebuildJournalOnRepeatedEdits() throws Exception {, +    @Test public void openCreatesDirectoryIfNecessary() throws Exception {, +    @Test public void fileDeletedExternally() throws Exception {, +    @Test public void editSameVersion() throws Exception {, +    @Test public void editSnapshotAfterChangeAborted() throws Exception {, +    @Test public void editSnapshotAfterChangeCommitted() throws Exception {, +    @Test public void editSinceEvicted() throws Exception {, +    @Test public void editSinceEvictedAndRecreated() throws Exception {, +++ b/pom.xml, +        <junit.version>4.10</junit.version>, +++ b/src/main/java/com/squareup/okhttp/internal/net/http/HttpAuthenticator.java, +    public static boolean processAuthHeader(int responseCode, RawHeaders responseHeaders,, +        String credentials = getCredentials(responseHeaders, challengeHeader, proxy, url);]