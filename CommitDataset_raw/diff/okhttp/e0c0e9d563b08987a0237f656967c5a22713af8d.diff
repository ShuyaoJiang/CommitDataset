[+++ b/README.md, +[Jetty-NPN][3] which requires OpenJDK 7+., + [3]: http://wiki.eclipse.org/Jetty/Feature/NPN, +++ b/README.md, +[Jetty-NPN][3] which requires OpenJDK 7+., + [3]: http://wiki.eclipse.org/Jetty/Feature/NPN, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import java.util.Arrays;, +import org.eclipse.jetty.npn.NextProtoNego;, +/** A basic SPDY server that serves the contents of a local directory. */, +      new SpdyConnection.Builder(false, socket).handler(this).build();, +    NextProtoNego.put(sslSocket, new NextProtoNego.ServerProvider() {, +      @Override public void unsupported() {, +        System.out.println("UNSUPPORTED");, +      @Override public List<String> protocols() {, +        return Arrays.asList(Protocol.SPDY_3.toString());, +      }, +      @Override public void protocolSelected(String protocol) {, +        System.out.println("PROTOCOL SELECTED: " + protocol);, +      }, +    });, +++ b/README.md, +[Jetty-NPN][3] which requires OpenJDK 7+., + [3]: http://wiki.eclipse.org/Jetty/Feature/NPN, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import java.util.Arrays;, +import org.eclipse.jetty.npn.NextProtoNego;, +/** A basic SPDY server that serves the contents of a local directory. */, +      new SpdyConnection.Builder(false, socket).handler(this).build();, +    NextProtoNego.put(sslSocket, new NextProtoNego.ServerProvider() {, +      @Override public void unsupported() {, +        System.out.println("UNSUPPORTED");, +      @Override public List<String> protocols() {, +        return Arrays.asList(Protocol.SPDY_3.toString());, +      }, +      @Override public void protocolSelected(String protocol) {, +        System.out.println("PROTOCOL SELECTED: " + protocol);, +      }, +    });, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +++ b/README.md, +[Jetty-NPN][3] which requires OpenJDK 7+., + [3]: http://wiki.eclipse.org/Jetty/Feature/NPN, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import java.util.Arrays;, +import org.eclipse.jetty.npn.NextProtoNego;, +/** A basic SPDY server that serves the contents of a local directory. */, +      new SpdyConnection.Builder(false, socket).handler(this).build();, +    NextProtoNego.put(sslSocket, new NextProtoNego.ServerProvider() {, +      @Override public void unsupported() {, +        System.out.println("UNSUPPORTED");, +      @Override public List<String> protocols() {, +        return Arrays.asList(Protocol.SPDY_3.toString());, +      }, +      @Override public void protocolSelected(String protocol) {, +        System.out.println("PROTOCOL SELECTED: " + protocol);, +      }, +    });, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +        .assertHeader("Content-Type", "text/plain"), +  @Test public void get_SPDY_3() throws Exception {, +    enableNpn(Protocol.SPDY_3);, +    get();, +  }, +, +  @Test public void get_HTTP_2() throws Exception {, +    enableNpn(Protocol.HTTP_2);, +    get();, +  }, +, +        .assertHeader("Content-Type", "text/plain");, +  @Test public void head_SPDY_3() throws Exception {, +    enableNpn(Protocol.SPDY_3);, +    head();, +  }, +, +  @Test public void head_HTTP_2() throws Exception {, +    enableNpn(Protocol.HTTP_2);, +    head();, +  }, +, +  @Test public void post_SPDY_3() throws Exception {, +    enableNpn(Protocol.SPDY_3);, +    post();, +  }, +, +  @Test public void post_HTTP_2() throws Exception {, +    enableNpn(Protocol.HTTP_2);, +    post();, +  }, +, +  @Test public void postZeroLength_SPDY_3() throws Exception {, +    enableNpn(Protocol.SPDY_3);, +    postZeroLength();, +  }, +, +  @Test public void postZerolength_HTTP_2() throws Exception {, +    enableNpn(Protocol.HTTP_2);, +    postZeroLength();]