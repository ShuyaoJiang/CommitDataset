[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    httpA.connect(200, 200, 200, null);, +    httpB.connect(200, 200, 200, null);, +    httpC.connect(200, 200, 200, null);, +    httpD.connect(200, 200, 200, null);, +    httpE.connect(200, 200, 200, null);, +    spdyA.connect(20000, 20000, 2000, null);, +    connection.connect(200, 200, 200, null);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    httpA.connect(200, 200, 200, null);, +    httpB.connect(200, 200, 200, null);, +    httpC.connect(200, 200, 200, null);, +    httpD.connect(200, 200, 200, null);, +    httpE.connect(200, 200, 200, null);, +    spdyA.connect(20000, 20000, 2000, null);, +    connection.connect(200, 200, 200, null);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  /** Confirm that an unacknowledged write times out. */, +  @Test public void writeTimeouts() throws IOException {, +    server.enqueue(new MockResponse(), +        .throttleBody(1, 3600, TimeUnit.SECONDS)); // Prevent the server from reading!, +    server.play();, +, +    client.setWriteTimeout(500, TimeUnit.MILLISECONDS);, +    connection = client.open(server.getUrl("/"));, +    connection.setDoOutput(true);, +    connection.setChunkedStreamingMode(0);, +    OutputStream out = connection.getOutputStream();, +    try {, +      byte[] data = new byte[1024 * 1024]; // 1 MiB., +      out.write(data);, +      fail();, +    } catch (IOException expected) {, +    }, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    httpA.connect(200, 200, 200, null);, +    httpB.connect(200, 200, 200, null);, +    httpC.connect(200, 200, 200, null);, +    httpD.connect(200, 200, 200, null);, +    httpE.connect(200, 200, 200, null);, +    spdyA.connect(20000, 20000, 2000, null);, +    connection.connect(200, 200, 200, null);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  /** Confirm that an unacknowledged write times out. */, +  @Test public void writeTimeouts() throws IOException {, +    server.enqueue(new MockResponse(), +        .throttleBody(1, 3600, TimeUnit.SECONDS)); // Prevent the server from reading!, +    server.play();, +, +    client.setWriteTimeout(500, TimeUnit.MILLISECONDS);, +    connection = client.open(server.getUrl("/"));, +    connection.setDoOutput(true);, +    connection.setChunkedStreamingMode(0);, +    OutputStream out = connection.getOutputStream();, +    try {, +      byte[] data = new byte[1024 * 1024]; // 1 MiB., +      out.write(data);, +      fail();, +    } catch (IOException expected) {, +    }, +  }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +  public void connect(int connectTimeout, int readTimeout, int writeTimeout,, +      TunnelRequest tunnelRequest) throws IOException {, +      upgradeToTls(tunnelRequest, readTimeout, writeTimeout);, +      httpConnection = new HttpConnection(pool, this, socket, readTimeout, writeTimeout);, +  private void upgradeToTls(TunnelRequest tunnelRequest, int readTimeout, int writeTimeout), +      throws IOException {, +      makeTunnel(tunnelRequest, readTimeout, writeTimeout);, +      httpConnection = new HttpConnection(pool, this, socket, readTimeout, writeTimeout);, +  private void makeTunnel(TunnelRequest tunnelRequest, int readTimeout, int writeTimeout), +      throws IOException {, +    HttpConnection tunnelConnection = new HttpConnection(, +        pool, this, socket, readTimeout, writeTimeout);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +    httpA.connect(200, 200, 200, null);, +    httpB.connect(200, 200, 200, null);, +    httpC.connect(200, 200, 200, null);, +    httpD.connect(200, 200, 200, null);, +    httpE.connect(200, 200, 200, null);, +    spdyA.connect(20000, 20000, 2000, null);, +    connection.connect(200, 200, 200, null);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +  /** Confirm that an unacknowledged write times out. */, +  @Test public void writeTimeouts() throws IOException {, +    server.enqueue(new MockResponse(), +        .throttleBody(1, 3600, TimeUnit.SECONDS)); // Prevent the server from reading!, +    server.play();, +, +    client.setWriteTimeout(500, TimeUnit.MILLISECONDS);, +    connection = client.open(server.getUrl("/"));, +    connection.setDoOutput(true);, +    connection.setChunkedStreamingMode(0);, +    OutputStream out = connection.getOutputStream();, +    try {, +      byte[] data = new byte[1024 * 1024]; // 1 MiB., +      out.write(data);]