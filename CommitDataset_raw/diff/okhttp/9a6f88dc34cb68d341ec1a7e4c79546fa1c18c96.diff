[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    if (protocols.contains(Protocol.H2C) && protocols.size() > 1) {, +      // when using h2c prior knowledge, no other protocol should be supported., +      throw new IllegalArgumentException("protocols containing h2c cannot use other protocols: ", +              + protocols);, +    } else if (!protocols.contains(Protocol.H2C) && !protocols.contains(Protocol.HTTP_1_1)) {, +  public List<Protocol> protocols() {, +    return protocols;, +  }, +, +        } else if (protocols.contains(Protocol.H2C)) {, +          socket = raw;, +          protocol = Protocol.H2C;, +        if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2C) {, +        } else if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2C) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    if (protocols.contains(Protocol.H2C) && protocols.size() > 1) {, +      // when using h2c prior knowledge, no other protocol should be supported., +      throw new IllegalArgumentException("protocols containing h2c cannot use other protocols: ", +              + protocols);, +    } else if (!protocols.contains(Protocol.H2C) && !protocols.contains(Protocol.HTTP_1_1)) {, +  public List<Protocol> protocols() {, +    return protocols;, +  }, +, +        } else if (protocols.contains(Protocol.H2C)) {, +          socket = raw;, +          protocol = Protocol.H2C;, +        if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2C) {, +        } else if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2C) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.Protocol;, +, +  @Test public void testH2CServerFallback() {, +    try {, +      server.setProtocols(Arrays.asList(Protocol.H2C, Protocol.HTTP_1_1));, +      fail("When H2C is specified, no other protocol can be specified");, +    } catch (IllegalArgumentException expected) {, +      assertEquals("protocols containing h2c cannot use other protocols: [h2c, http/1.1]", expected.getMessage());, +    }, +  }, +, +  @Test public void testH2CServerDuplicates() {, +    try {, +      // Treating this use case as user error, +      server.setProtocols(Arrays.asList(Protocol.H2C, Protocol.H2C));, +      fail("When H2C is specified, no other protocol can be specified");, +    } catch (IllegalArgumentException expected) {, +      assertEquals("protocols containing h2c cannot use other protocols: [h2c, h2c]", expected.getMessage());, +    }, +  }, +, +  @Test public void testMockWebServerH2CProtocol() {, +    server.setProtocols(Arrays.asList(Protocol.H2C));, +, +    assertEquals(1, server.protocols().size());, +    assertEquals(Protocol.H2C, server.protocols().get(0));, +  }, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +    if (protocols.contains(Protocol.H2C) && protocols.size() > 1) {, +      // when using h2c prior knowledge, no other protocol should be supported., +      throw new IllegalArgumentException("protocols containing h2c cannot use other protocols: ", +              + protocols);, +    } else if (!protocols.contains(Protocol.H2C) && !protocols.contains(Protocol.HTTP_1_1)) {, +  public List<Protocol> protocols() {, +    return protocols;, +  }, +, +        } else if (protocols.contains(Protocol.H2C)) {, +          socket = raw;, +          protocol = Protocol.H2C;, +        if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2C) {, +        } else if (protocol == Protocol.HTTP_2 || protocol == Protocol.H2C) {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java, +import okhttp3.Protocol;, +, +  @Test public void testH2CServerFallback() {, +    try {, +      server.setProtocols(Arrays.asList(Protocol.H2C, Protocol.HTTP_1_1));, +      fail("When H2C is specified, no other protocol can be specified");, +    } catch (IllegalArgumentException expected) {, +      assertEquals("protocols containing h2c cannot use other protocols: [h2c, http/1.1]", expected.getMessage());, +    }, +  }, +, +  @Test public void testH2CServerDuplicates() {, +    try {, +      // Treating this use case as user error, +      server.setProtocols(Arrays.asList(Protocol.H2C, Protocol.H2C));, +      fail("When H2C is specified, no other protocol can be specified");, +    } catch (IllegalArgumentException expected) {, +      assertEquals("protocols containing h2c cannot use other protocols: [h2c, h2c]", expected.getMessage());, +    }, +  }, +, +  @Test public void testMockWebServerH2CProtocol() {, +    server.setProtocols(Arrays.asList(Protocol.H2C));, +, +    assertEquals(1, server.protocols().size());, +    assertEquals(Protocol.H2C, server.protocols().get(0));]