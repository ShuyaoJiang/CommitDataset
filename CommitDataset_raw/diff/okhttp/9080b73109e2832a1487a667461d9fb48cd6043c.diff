[+++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +public class Main extends HelpOption implements Runnable {, +    try {, +      Response response = client.execute(request);, +      if (showHeaders) {, +        System.out.println(response.statusLine());, +        Headers headers = response.headers();, +        for (int i = 0, count = headers.size(); i < count; i++) {, +          System.out.println(headers.name(i) + ": " + headers.value(i));, +        }, +        System.out.println();, +      }, +      Response.Body body = response.body();, +      byte[] buffer = new byte[1024];, +      while (body.ready()) {, +        int c = body.byteStream().read(buffer);, +        if (c == -1) {, +          return;, +        }, +        System.out.write(buffer, 0, c);, +      }, +      body.close();, +    } catch (IOException e) {, +      e.printStackTrace();, +    } finally {, +      close();, +    }, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +public class Main extends HelpOption implements Runnable {, +    try {, +      Response response = client.execute(request);, +      if (showHeaders) {, +        System.out.println(response.statusLine());, +        Headers headers = response.headers();, +        for (int i = 0, count = headers.size(); i < count; i++) {, +          System.out.println(headers.name(i) + ": " + headers.value(i));, +        }, +        System.out.println();, +      }, +      Response.Body body = response.body();, +      byte[] buffer = new byte[1024];, +      while (body.ready()) {, +        int c = body.byteStream().read(buffer);, +        if (c == -1) {, +          return;, +        }, +        System.out.write(buffer, 0, c);, +      }, +      body.close();, +    } catch (IOException e) {, +      e.printStackTrace();, +    } finally {, +      close();, +    }, +++ b/okhttp/src/main/java/com/squareup/okhttp/Job.java, +  HttpEngine engine;, +  Response getResponse() throws IOException {, +            // Cache body includes original content-length and content-type data., +            .body(engine.responseSource().usesCache(), +                ? engine.getResponse().body(), +                : new RealResponseBody(response, engine.getResponseBody())), +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +public class Main extends HelpOption implements Runnable {, +    try {, +      Response response = client.execute(request);, +      if (showHeaders) {, +        System.out.println(response.statusLine());, +        Headers headers = response.headers();, +        for (int i = 0, count = headers.size(); i < count; i++) {, +          System.out.println(headers.name(i) + ": " + headers.value(i));, +        }, +        System.out.println();, +      }, +      Response.Body body = response.body();, +      byte[] buffer = new byte[1024];, +      while (body.ready()) {, +        int c = body.byteStream().read(buffer);, +        if (c == -1) {, +          return;, +        }, +        System.out.write(buffer, 0, c);, +      }, +      body.close();, +    } catch (IOException e) {, +      e.printStackTrace();, +    } finally {, +      close();, +    }, +++ b/okhttp/src/main/java/com/squareup/okhttp/Job.java, +  HttpEngine engine;, +  Response getResponse() throws IOException {, +            // Cache body includes original content-length and content-type data., +            .body(engine.responseSource().usesCache(), +                ? engine.getResponse().body(), +                : new RealResponseBody(response, engine.getResponseBody())), +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +   * Invokes {@code request} immediately, and blocks until the response can be, +   * processed or is in error., +   *, +   * <p>The caller may read the response body with the response's]