[+++ b/mockwebserver/README.md, +MockWebServer, +=============, +, +A scriptable web server for testing HTTP clients, +, +, +Motivation, +----------, +, +This library makes it easy to test that your app Does The Right Thing when it, +makes HTTP and HTTPS calls. It lets you specify which responses to return and, +then verify that requests were made as expected., +, +Because it exercises your full HTTP stack, you can be confident that you're, +testing everything. You can even copy & paste HTTP responses from your real web, +server to create representative test cases. Or test that your code survives in, +awkward-to-reproduce situations like 500 errors or slow-loading responses., +, +, +Hello World, +-----------, +, +```, +  public static void main(String[] args) throws Exception {, +    MockWebServer server = new MockWebServer();, +    server.enqueue(new MockResponse().setBody("hello, world!"));, +    server.play();, +, +    URL url = server.getUrl("/hello.json");, +    URLConnection connection = url.openConnection();, +    connection.setRequestProperty("Accept", "text/plain; charset=utf-8");, +    InputStream in = connection.getInputStream();, +    BufferedReader reader = new BufferedReader(new InputStreamReader(in));, +    assertEquals("hello, world!", reader.readLine());, +, +    RecordedRequest request = server.takeRequest();, +    assertEquals("GET /hello.json HTTP/1.1", request.getRequestLine());, +    assertTrue(request.getHeaders().contains("Accept: text/plain; charset=utf-8"));, +, +    server.shutdown();, +  }, +```, +, +, +Walking through a MockWebServer test, +------------------------------------, +, +Use MockWebServer the same way that you use mocking frameworks like, +[Mockito](https://code.google.com/p/mockito/):, +, +1. Script the mocks., +2. Run application code., +3. Verify that the expected requests were made., +, +Here's a complete example:, +, +```, +  public void test() throws Exception {, +    // Create a MockWebServer. These are lean enough that you can create a new, +    // instance for every unit test., +    MockWebServer server = new MockWebServer();, +, +    // Schedule some responses., +    server.enqueue(new MockResponse().setBody("hello, world!"));, +    server.enqueue(new MockResponse().setBody("sup, bra?"));, +    server.enqueue(new MockResponse().setBody("yo dog"));, +, +    // Start the server., +    server.play();, +, +    // Ask the server for its URL. You'll need this to make HTTP requests., +    URL baseUrl = server.getUrl("/v1/chat/");, +, +    // Exercise your application code, which should make those HTTP requests., +    // Responses are returned in the same order that they are enqueued., +    Chat chat = new Chat(baseUrl);, +, +    chat.loadMore();, +    assertEquals("hello, world!", chat.messages());, +, +    chat.loadMore();, +    chat.loadMore();, +    assertEquals("", +        + "hello, world!\n", +        + "sup, bra?\n", +        + "yo dog", chat.messages());, +, +    // Optional: confirm that your app made the HTTP requests you were expecting., +    RecordedRequest request1 = server.takeRequest();, +    assertEquals("/v1/chat/messages/", request1.getPath());, +    assertNotNull(request1.getHeader("Authorization"));, +, +    RecordedRequest request2 = server.takeRequest();, +    assertEquals("/v1/chat/messages/2", request2.getPath());, +, +    RecordedRequest request3 = server.takeRequest();, +    assertEquals("/v1/chat/messages/3", request3.getPath());, +, +    // Shut down the server. Instances cannot be reused.]