[+++ b/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java, +, +  @Test public void successfulFindMatchingPinsIgnoresCase() {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("EXAMPLE.com", certA1Sha256Pin), +        .add("*.MyExample.Com", certB1Sha256Pin), +        .build();, +, +    List<Pin> expectedPin1 = Arrays.asList(new Pin("EXAMPLE.com", certA1Sha256Pin));, +    assertEquals(expectedPin1, certificatePinner.findMatchingPins("example.com"));, +, +    List<Pin> expectedPin2 = Arrays.asList(new Pin("*.MyExample.Com", certB1Sha256Pin));, +    assertEquals(expectedPin2, certificatePinner.findMatchingPins("a.myexample.com"));, +  }, +, +  @Test public void successfulFindMatchingPinPunycode() {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("σkhttp.com", certA1Sha256Pin), +        .build();, +, +    List<Pin> expectedPin = Arrays.asList(new Pin("σkhttp.com", certA1Sha256Pin));, +    assertEquals(expectedPin, certificatePinner.findMatchingPins("xn--khttp-fde.com"));, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java, +, +  @Test public void successfulFindMatchingPinsIgnoresCase() {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("EXAMPLE.com", certA1Sha256Pin), +        .add("*.MyExample.Com", certB1Sha256Pin), +        .build();, +, +    List<Pin> expectedPin1 = Arrays.asList(new Pin("EXAMPLE.com", certA1Sha256Pin));, +    assertEquals(expectedPin1, certificatePinner.findMatchingPins("example.com"));, +, +    List<Pin> expectedPin2 = Arrays.asList(new Pin("*.MyExample.Com", certB1Sha256Pin));, +    assertEquals(expectedPin2, certificatePinner.findMatchingPins("a.myexample.com"));, +  }, +, +  @Test public void successfulFindMatchingPinPunycode() {, +    CertificatePinner certificatePinner = new CertificatePinner.Builder(), +        .add("σkhttp.com", certA1Sha256Pin), +        .build();, +, +    List<Pin> expectedPin = Arrays.asList(new Pin("σkhttp.com", certA1Sha256Pin));, +    assertEquals(expectedPin, certificatePinner.findMatchingPins("xn--khttp-fde.com"));, +  }, +++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java, +    private static final String WILDCARD = "*.";, +    /** The canonical hostname, i.e. {@code EXAMPLE.com} becomes {@code example.com}. */, +    final String canonicalHostname;, +      this.canonicalHostname = pattern.startsWith(WILDCARD), +          ? HttpUrl.parse("http://" + pattern.substring(WILDCARD.length())).host(), +          : HttpUrl.parse("http://" + pattern).host();, +      if (pattern.startsWith(WILDCARD)) {, +        return hostname.regionMatches(false, firstDot + 1, canonicalHostname, 0,, +            canonicalHostname.length());, +      }, +, +      return hostname.equals(canonicalHostname);]