[+++ b/README.md, +  <version>2.3.0</version>, +compile 'com.squareup.okhttp:okhttp:2.3.0', +  <version>2.3.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.3.0', +++ b/README.md, +  <version>2.3.0</version>, +compile 'com.squareup.okhttp:okhttp:2.3.0', +  <version>2.3.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.3.0', +++ b/mockwebserver/README.md, +You can, for example, filter the request instead of using `server.enqueue()`., +, +```java, +final Dispatcher dispatcher = new Dispatcher() {, +, +    @Override, +    public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +, +        if (request.getPath().equals("/v1/login/auth/")){, +            return new MockResponse().setResponseCode(200));, +        } else if (request.getPath().equals("v1/check/version/")){, +            return new MockResponse().setResponseCode(200).setBody("version=9");, +        } else if (request.getPath().equals("/v1/profile/info")) {, +            return new MockResponse().setResponseCode(200).setBody("{\\\"info\\\":{\\\"name\":\"Lucas Albuquerque\",\"age\":\"21\",\"gender\":\"male\"}}");, +        }, +        return new MockResponse().setResponseCode(404);, +    }, +};, +server.setDispatcher(dispatcher);, +```, +++ b/README.md, +  <version>2.3.0</version>, +compile 'com.squareup.okhttp:okhttp:2.3.0', +  <version>2.3.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.3.0', +++ b/mockwebserver/README.md, +You can, for example, filter the request instead of using `server.enqueue()`., +, +```java, +final Dispatcher dispatcher = new Dispatcher() {, +, +    @Override, +    public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +, +        if (request.getPath().equals("/v1/login/auth/")){, +            return new MockResponse().setResponseCode(200));, +        } else if (request.getPath().equals("v1/check/version/")){, +            return new MockResponse().setResponseCode(200).setBody("version=9");, +        } else if (request.getPath().equals("/v1/profile/info")) {, +            return new MockResponse().setResponseCode(200).setBody("{\\\"info\\\":{\\\"name\":\"Lucas Albuquerque\",\"age\":\"21\",\"gender\":\"male\"}}");, +        }, +        return new MockResponse().setResponseCode(404);, +    }, +};, +server.setDispatcher(dispatcher);, +```, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +   * As per the spec, the status line is held as the header with the null key. Throws a, +   * {@link ProtocolException} if there is no status line., +  static String extractStatusLine(Map<String, List<String>> javaResponseHeaders), +      throws ProtocolException {, +      // The status line is missing. This suggests a badly behaving cache., +      throw new ProtocolException(, +          "CacheResponse is missing a \'null\' header containing the status line. Headers=", +          + javaResponseHeaders);, +++ b/README.md, +  <version>2.3.0</version>, +compile 'com.squareup.okhttp:okhttp:2.3.0', +  <version>2.3.0</version>, +testCompile 'com.squareup.okhttp:mockwebserver:2.3.0', +++ b/mockwebserver/README.md, +You can, for example, filter the request instead of using `server.enqueue()`., +, +```java, +final Dispatcher dispatcher = new Dispatcher() {, +, +    @Override, +    public MockResponse dispatch(RecordedRequest request) throws InterruptedException {, +, +        if (request.getPath().equals("/v1/login/auth/")){, +            return new MockResponse().setResponseCode(200));, +        } else if (request.getPath().equals("v1/check/version/")){, +            return new MockResponse().setResponseCode(200).setBody("version=9");, +        } else if (request.getPath().equals("/v1/profile/info")) {, +            return new MockResponse().setResponseCode(200).setBody("{\\\"info\\\":{\\\"name\":\"Lucas Albuquerque\",\"age\":\"21\",\"gender\":\"male\"}}");, +        }, +        return new MockResponse().setResponseCode(404);, +    }, +};, +server.setDispatcher(dispatcher);, +```, +++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java, +   * As per the spec, the status line is held as the header with the null key. Throws a, +   * {@link ProtocolException} if there is no status line., +  static String extractStatusLine(Map<String, List<String>> javaResponseHeaders), +      throws ProtocolException {, +      // The status line is missing. This suggests a badly behaving cache., +      throw new ProtocolException(, +          "CacheResponse is missing a \'null\' header containing the status line. Headers="]