[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.net.SocketTimeoutException;, +   * Make a request with two routes. The first route will time out because it's connecting to a, +   * special address that never connects. The automatic retry will succeed., +    InetSocketAddress unreachableAddress = new InetSocketAddress("10.255.255.1", 8080);, +, +    RecordingProxySelector proxySelector = new RecordingProxySelector();, +    proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, unreachableAddress));, +    proxySelector.proxies.add(server.toProxyAddress());, +, +    server.enqueue(new MockResponse(), +        .setBody("success!"));, +, +    client = client.newBuilder(), +        .proxySelector(proxySelector), +        .readTimeout(100, TimeUnit.MILLISECONDS), +        .connectTimeout(100, TimeUnit.MILLISECONDS), +        .build();, +, +    Request request = new Request.Builder().url("http://android.com/").build();, +    executeSynchronously(request), +        .assertCode(200), +        .assertBody("success!");, +  }, +, +  /**, +   * Make a request with two routes. The first route will fail because the null server connects but, +   * never responds. The manual retry will succeed., +   */, +  @Test public void readTimeoutFails() throws Exception {, +        .assertFailure(SocketTimeoutException.class);, +    executeSynchronously(request), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.net.SocketTimeoutException;, +   * Make a request with two routes. The first route will time out because it's connecting to a, +   * special address that never connects. The automatic retry will succeed., +    InetSocketAddress unreachableAddress = new InetSocketAddress("10.255.255.1", 8080);, +, +    RecordingProxySelector proxySelector = new RecordingProxySelector();, +    proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, unreachableAddress));, +    proxySelector.proxies.add(server.toProxyAddress());, +, +    server.enqueue(new MockResponse(), +        .setBody("success!"));, +, +    client = client.newBuilder(), +        .proxySelector(proxySelector), +        .readTimeout(100, TimeUnit.MILLISECONDS), +        .connectTimeout(100, TimeUnit.MILLISECONDS), +        .build();, +, +    Request request = new Request.Builder().url("http://android.com/").build();, +    executeSynchronously(request), +        .assertCode(200), +        .assertBody("success!");, +  }, +, +  /**, +   * Make a request with two routes. The first route will fail because the null server connects but, +   * never responds. The manual retry will succeed., +   */, +  @Test public void readTimeoutFails() throws Exception {, +        .assertFailure(SocketTimeoutException.class);, +    executeSynchronously(request), +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java, +      HttpEngine retryEngine = httpEngine.recover(e.getLastConnectException(), true);, +      HttpEngine retryEngine = httpEngine.recover(e, false);, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import java.net.SocketTimeoutException;, +   * Make a request with two routes. The first route will time out because it's connecting to a, +   * special address that never connects. The automatic retry will succeed., +    InetSocketAddress unreachableAddress = new InetSocketAddress("10.255.255.1", 8080);, +, +    RecordingProxySelector proxySelector = new RecordingProxySelector();, +    proxySelector.proxies.add(new Proxy(Proxy.Type.HTTP, unreachableAddress));, +    proxySelector.proxies.add(server.toProxyAddress());, +, +    server.enqueue(new MockResponse(), +        .setBody("success!"));, +, +    client = client.newBuilder(), +        .proxySelector(proxySelector), +        .readTimeout(100, TimeUnit.MILLISECONDS), +        .connectTimeout(100, TimeUnit.MILLISECONDS), +        .build();, +, +    Request request = new Request.Builder().url("http://android.com/").build();, +    executeSynchronously(request), +        .assertCode(200), +        .assertBody("success!");, +  }, +, +  /**, +   * Make a request with two routes. The first route will fail because the null server connects but, +   * never responds. The manual retry will succeed., +   */, +  @Test public void readTimeoutFails() throws Exception {, +        .assertFailure(SocketTimeoutException.class);, +    executeSynchronously(request), +++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java]