[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import java.io.IOException;, +, +  /** We don't want to run user code inside of HttpEngine, etc. */, +  @Test public void copyWithDefaultsDoesNotReturnSubclass() throws Exception {, +    OkHttpClient subclass = new OkHttpClient() {};, +    OkHttpClient copy = subclass.copyWithDefaults();, +    assertEquals(OkHttpClient.class, copy.getClass());, +  }, +, +  @Test public void cloneReturnsSubclass() throws Exception {, +    OkHttpClient subclass = new OkHttpClient() {};, +    OkHttpClient clone = subclass.clone();, +    assertEquals(subclass.getClass(), clone.getClass());, +  }, +, +  /** Exercise a synchronous mocking case. */, +  @Test public void mock() throws Exception {, +    final Request request = new Request.Builder(), +        .url("http://example.com/"), +        .build();, +    final Response response = new Response.Builder(), +        .protocol(Protocol.HTTP_1_1), +        .request(request), +        .code(200), +        .message("Alright"), +        .build();, +, +    OkHttpClient mockClient = new OkHttpClient() {, +      @Override public Call newCall(Request request) {, +        return new Call(this, request) {, +          @Override public Response execute() throws IOException {, +            return response;, +          }, +          @Override public void enqueue(Callback responseCallback) {, +          }, +          @Override public void cancel() {, +          }, +        };, +      }, +    };, +, +    Response actualResponse = mockClient.newCall(request).execute();, +    assertSame(response, actualResponse);, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import java.io.IOException;, +, +  /** We don't want to run user code inside of HttpEngine, etc. */, +  @Test public void copyWithDefaultsDoesNotReturnSubclass() throws Exception {, +    OkHttpClient subclass = new OkHttpClient() {};, +    OkHttpClient copy = subclass.copyWithDefaults();, +    assertEquals(OkHttpClient.class, copy.getClass());, +  }, +, +  @Test public void cloneReturnsSubclass() throws Exception {, +    OkHttpClient subclass = new OkHttpClient() {};, +    OkHttpClient clone = subclass.clone();, +    assertEquals(subclass.getClass(), clone.getClass());, +  }, +, +  /** Exercise a synchronous mocking case. */, +  @Test public void mock() throws Exception {, +    final Request request = new Request.Builder(), +        .url("http://example.com/"), +        .build();, +    final Response response = new Response.Builder(), +        .protocol(Protocol.HTTP_1_1), +        .request(request), +        .code(200), +        .message("Alright"), +        .build();, +, +    OkHttpClient mockClient = new OkHttpClient() {, +      @Override public Call newCall(Request request) {, +        return new Call(this, request) {, +          @Override public Response execute() throws IOException {, +            return response;, +          }, +          @Override public void enqueue(Callback responseCallback) {, +          }, +          @Override public void cancel() {, +          }, +        };, +      }, +    };, +, +    Response actualResponse = mockClient.newCall(request).execute();, +    assertSame(response, actualResponse);, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java, +public class Call {, +  protected Call(OkHttpClient client, Request request) {, +    // Copy the client. Otherwise changes (socket factory, redirect policy,, +    // etc.) may incorrectly be reflected in the request when it is executed., +    this.client = client.copyWithDefaults();, +    client.getDispatcher().enqueue(new AsyncCall(responseCallback));, +        client.getDispatcher().finished(this);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java, +import java.io.IOException;]