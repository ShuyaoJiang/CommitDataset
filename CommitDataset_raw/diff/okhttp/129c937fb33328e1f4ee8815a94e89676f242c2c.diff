[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +      fail("Expected an IOException because the stream is closed.");, +    } catch (IOException expected) {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +      fail("Expected an IOException because the stream is closed.");, +    } catch (IOException expected) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ResponseCacheTest.java, +      fail("Expected an IOException because the stream is closed.");, +    } catch (IOException expected) {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +      fail("Expected an IOException because the stream is closed.");, +    } catch (IOException expected) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ResponseCacheTest.java, +      fail("Expected an IOException because the stream is closed.");, +    } catch (IOException expected) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +    } catch (IOException expected) {, +    } catch (IOException expected) {, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +      fail("Expected an IOException because the stream is closed.");, +    } catch (IOException expected) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ResponseCacheTest.java, +      fail("Expected an IOException because the stream is closed.");, +    } catch (IOException expected) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +    } catch (IOException expected) {, +    } catch (IOException expected) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +    if (bufferedRequestBody != null) {, +      // This also closes the wrapped requestBodyOut., +      closeQuietly(bufferedRequestBody);, +    } else if (requestBodyOut != null) {, +      closeQuietly(requestBodyOut);, +    }, +, +      Map<String, List<String>> cookies = cookieHandler.get(, +          request.uri(), OkHeaders.toMultimap(request.getHeaders(), null));, +    // Flush the request body if there's data outstanding., +      if (bufferedRequestBody != null) {, +        // This also closes the wrapped requestBodyOut., +        bufferedRequestBody.close();, +      } else {, +      }, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +      fail("Expected an IOException because the stream is closed.");, +    } catch (IOException expected) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ResponseCacheTest.java, +      fail("Expected an IOException because the stream is closed.");, +    } catch (IOException expected) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +    } catch (IOException expected) {, +    } catch (IOException expected) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +    if (bufferedRequestBody != null) {, +      // This also closes the wrapped requestBodyOut., +      closeQuietly(bufferedRequestBody);, +    } else if (requestBodyOut != null) {, +      closeQuietly(requestBodyOut);, +    }, +, +      Map<String, List<String>> cookies = cookieHandler.get(, +          request.uri(), OkHeaders.toMultimap(request.getHeaders(), null));, +    // Flush the request body if there's data outstanding., +      if (bufferedRequestBody != null) {, +        // This also closes the wrapped requestBodyOut., +        bufferedRequestBody.close();, +      } else {, +      }, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +    // For the request line property assigned to the null key, just use no proxy and HTTP 1.1., +    Request request = new Request.Builder().url(getURL()).method(method, null).build();, +    String requestLine = RequestLine.get(request, null, 1);, +    return OkHeaders.toMultimap(requestHeaders.build(), requestLine);, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpResponseCacheTest.java, +      fail("Expected an IOException because the stream is closed.");, +    } catch (IOException expected) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ResponseCacheTest.java, +      fail("Expected an IOException because the stream is closed.");, +    } catch (IOException expected) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +    } catch (IOException expected) {, +    } catch (IOException expected) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +    if (bufferedRequestBody != null) {, +      // This also closes the wrapped requestBodyOut., +      closeQuietly(bufferedRequestBody);, +    } else if (requestBodyOut != null) {, +      closeQuietly(requestBodyOut);, +    }, +, +      Map<String, List<String>> cookies = cookieHandler.get(, +          request.uri(), OkHeaders.toMultimap(request.getHeaders(), null));, +    // Flush the request body if there's data outstanding.]