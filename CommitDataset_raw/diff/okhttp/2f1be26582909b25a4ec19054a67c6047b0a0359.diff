[+++ b/okhttp-tests/src/test/java/okhttp3/RequestTest.java, +import java.util.UUID;, +import static org.junit.Assert.assertSame;, +  @Test public void newBuilderUrlResetsUrl() {, +  @Test public void cacheControl() {, +  @Test public void emptyCacheControlClearsAllCacheControlHeaders() {, +  @Test public void headerAcceptsPermittedCharacters() {, +  @Test public void emptyNameForbidden() {, +  @Test public void headerForbidsNullArguments() {, +  @Test public void headerAllowsTabOnlyInValues() {, +  @Test public void headerForbidsControlCharacters() {, +  @Test public void noTag() {, +    Request request = new Request.Builder(), +        .url("https://square.com"), +        .build();, +    assertNull(request.tag());, +    assertNull(request.tag(Object.class));, +    assertNull(request.tag(UUID.class));, +    assertNull(request.tag(String.class));, +  }, +, +  @Test public void defaultTag() {, +    UUID tag = UUID.randomUUID();, +    Request request = new Request.Builder(), +        .url("https://square.com"), +        .tag(tag), +        .build();, +    assertSame(tag, request.tag());, +    assertSame(tag, request.tag(Object.class));, +    assertNull(request.tag(UUID.class));, +    assertNull(request.tag(String.class));, +  }, +, +  @Test public void nullRemovesTag() {, +    Request request = new Request.Builder(), +        .url("https://square.com"), +        .tag("a"), +        .tag(null), +        .build();, +    assertNull(request.tag());, +  }, +, +  @Test public void removeAbsentTag() {, +    Request request = new Request.Builder(), +        .url("https://square.com"), +        .tag(null), +        .build();, +    assertNull(request.tag());, +  }, +, +  @Test public void objectTag() {, +    UUID tag = UUID.randomUUID();, +    Request request = new Request.Builder(), +        .url("https://square.com"), +        .tag(Object.class, tag), +        .build();, +    assertSame(tag, request.tag());, +    assertSame(tag, request.tag(Object.class));, +    assertNull(request.tag(UUID.class));, +    assertNull(request.tag(String.class));, +  }, +, +  @Test public void typedTag() {, +    UUID uuidTag = UUID.randomUUID();, +    Request request = new Request.Builder(), +        .url("https://square.com"), +        .tag(UUID.class, uuidTag), +        .build();, +    assertNull(request.tag());, +    assertNull(request.tag(Object.class));, +    assertSame(uuidTag, request.tag(UUID.class));, +    assertNull(request.tag(String.class));, +  }, +, +  @Test public void replaceOnlyTag() {, +    UUID uuidTag1 = UUID.randomUUID();, +    UUID uuidTag2 = UUID.randomUUID();, +    Request request = new Request.Builder(), +        .url("https://square.com"), +        .tag(UUID.class, uuidTag1), +        .tag(UUID.class, uuidTag2), +        .build();, +    assertSame(uuidTag2, request.tag(UUID.class));, +  }, +, +  @Test public void multipleTags() {, +    UUID uuidTag = UUID.randomUUID();, +    String stringTag = "dilophosaurus";, +    Long longTag = 20170815L;, +    Object objectTag = new Object();, +    Request request = new Request.Builder(), +        .url("https://square.com"), +        .tag(Object.class, objectTag), +        .tag(UUID.class, uuidTag), +        .tag(String.class, stringTag), +        .tag(Long.class, longTag), +        .build();, +    assertSame(objectTag, request.tag());, +    assertSame(objectTag, request.tag(Object.class));, +    assertSame(uuidTag, request.tag(UUID.class));]