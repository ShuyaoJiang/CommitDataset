[+++ b/okhttp/src/main/java/okhttp3/internal/Platform.java, +import javax.net.ssl.SSLParameters;, + * Supported on OpenJDK 9 via SSLParameters and SSLSocket features., + *, +  public static List<String> alpnProtocolNames(List<Protocol> protocols) {, +    List<String> names = new ArrayList<>(protocols.size());, +    for (int i = 0, size = protocols.size(); i < size; i++) {, +      Protocol protocol = protocols.get(i);, +      if (protocol == Protocol.HTTP_1_0) continue; // No HTTP/1.0 for ALPN., +      names.add(protocol.toString());, +    }, +    return names;, +  }, +, +, +    // Find JDK 9 new methods, +    try {, +      Method setProtocolMethod =, +          SSLParameters.class.getMethod("setApplicationProtocols", String[].class);, +      Method getProtocolMethod = SSLSocket.class.getMethod("getApplicationProtocol");, +, +      return new Jdk9Platform(setProtocolMethod, getProtocolMethod);, +    } catch (NoSuchMethodException ignored) {, +      // pre JDK 9, +    }, +, +   * OpenJDK 9+., +   */, +  private static final class Jdk9Platform extends Platform {, +    private final Method setProtocolMethod;, +    private final Method getProtocolMethod;, +, +    public Jdk9Platform(Method setProtocolMethod, Method getProtocolMethod) {, +      this.setProtocolMethod = setProtocolMethod;, +      this.getProtocolMethod = getProtocolMethod;, +    }, +, +    @Override, +    public void configureTlsExtensions(SSLSocket sslSocket, String hostname,, +                                       List<Protocol> protocols) {, +      try {, +        SSLParameters sslParameters = sslSocket.getSSLParameters();, +, +        List<String> names = alpnProtocolNames(protocols);, +, +        setProtocolMethod.invoke(sslParameters,, +            new Object[]{names.toArray(new String[names.size()])});, +, +        sslSocket.setSSLParameters(sslParameters);, +      } catch (IllegalAccessException | InvocationTargetException e) {, +        throw new AssertionError();, +      }, +    }, +, +    @Override, +    public String getSelectedProtocol(SSLSocket socket) {, +      try {, +        String protocol = (String) getProtocolMethod.invoke(socket);, +, +        // SSLSocket.getApplicationProtocol returns "" if application protocols values will not, +        // be used. Observed if you didn't specify SSLParameters.setApplicationProtocols, +        if (protocol == null || protocol.equals("")) {, +          return null;, +        }, +, +        return protocol;, +      } catch (IllegalAccessException | InvocationTargetException e) {, +        throw new AssertionError();, +      }, +    }, +  }, +, +, +  /**, +      List<String> names = alpnProtocolNames(protocols);, +]