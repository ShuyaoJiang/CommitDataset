[+++ b/okhttp-dnsoverhttps/pom.xml, +      <scope>test</scope>, +++ b/okhttp-dnsoverhttps/pom.xml, +      <scope>test</scope>, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-dnsoverhttps/pom.xml, +      <scope>test</scope>, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        // opt-in to fallback to COMPATIBLE_TLS, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +        // opt-in to fallback to COMPATIBLE_TLS, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +++ b/okhttp-dnsoverhttps/pom.xml, +      <scope>test</scope>, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        // opt-in to fallback to COMPATIBLE_TLS, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +        // opt-in to fallback to COMPATIBLE_TLS, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +    assertEquals(TlsVersion.TLS_1_0, fallbackRequest.getTlsVersion());, +++ b/okhttp-dnsoverhttps/pom.xml, +      <scope>test</scope>, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        // opt-in to fallback to COMPATIBLE_TLS, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +        // opt-in to fallback to COMPATIBLE_TLS, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +    assertEquals(TlsVersion.TLS_1_0, fallbackRequest.getTlsVersion());, +++ b/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java, + *, + * <p>This class is intended to be used for testing. It uses small keys (1024 bit RSA) because they, + * are quick to generate., +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc8017">PKCS, +   * #1</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc5208">PKCS, +   * #8</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +  /** Build a held certificate with reasonable defaults for testing. */, +      generator.setSignatureAlgorithm("SHA256WithRSAEncryption");, +        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA", "BC");, +        keyPairGenerator.initialize(1024, new SecureRandom());, +++ b/okhttp-dnsoverhttps/pom.xml, +      <scope>test</scope>, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        // opt-in to fallback to COMPATIBLE_TLS, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +        // opt-in to fallback to COMPATIBLE_TLS, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +    assertEquals(TlsVersion.TLS_1_0, fallbackRequest.getTlsVersion());, +++ b/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java, + *, + * <p>This class is intended to be used for testing. It uses small keys (1024 bit RSA) because they, + * are quick to generate., +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc8017">PKCS, +   * #1</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc5208">PKCS, +   * #8</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +  /** Build a held certificate with reasonable defaults for testing. */, +      generator.setSignatureAlgorithm("SHA256WithRSAEncryption");, +        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA", "BC");, +        keyPairGenerator.initialize(1024, new SecureRandom());, +++ b/okhttp-tls/src/test/java/okhttp3/tls/HeldCertificateTest.java, +++ b/okhttp-dnsoverhttps/pom.xml, +      <scope>test</scope>, +++ b/okhttp-tests/pom.xml, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +        // opt-in to fallback to COMPATIBLE_TLS, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +        // opt-in to fallback to COMPATIBLE_TLS, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS)), +    assertEquals(TlsVersion.TLS_1_0, fallbackRequest.getTlsVersion());, +++ b/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java, + *, + * <p>This class is intended to be used for testing. It uses small keys (1024 bit RSA) because they, + * are quick to generate., +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc8017">PKCS, +   * #1</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +   * Returns the RSA private key encoded in <a href="https://tools.ietf.org/html/rfc5208">PKCS, +   * #8</a> <a href="https://tools.ietf.org/html/rfc7468">PEM format</a>., +  /** Build a held certificate with reasonable defaults for testing. */, +      generator.setSignatureAlgorithm("SHA256WithRSAEncryption");, +        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA", "BC");, +        keyPairGenerator.initialize(1024, new SecureRandom());, +++ b/okhttp-tls/src/test/java/okhttp3/tls/HeldCertificateTest.java]