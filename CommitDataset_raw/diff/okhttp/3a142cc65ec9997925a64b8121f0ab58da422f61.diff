[+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HpackTest.java, +  @Test public void staticTableIndexedHeaders() throws IOException {, +, +    hpackWriter.writeHeaders(headerEntries(":method", "POST"));, +    assertBytes(0x83);, +    assertEquals(0, hpackWriter.headerCount);, +, +    hpackWriter.writeHeaders(headerEntries(":path", "/"));, +    assertBytes(0x84);, +    assertEquals(0, hpackWriter.headerCount);, +, +    hpackWriter.writeHeaders(headerEntries(":path", "/index.html"));, +    assertBytes(0x85);, +    assertEquals(0, hpackWriter.headerCount);, +, +    hpackWriter.writeHeaders(headerEntries(":scheme", "http"));, +    assertBytes(0x86);, +    assertEquals(0, hpackWriter.headerCount);, +, +    hpackWriter.writeHeaders(headerEntries(":scheme", "https"));, +    assertBytes(0x87);, +    assertEquals(0, hpackWriter.headerCount);, +    hpackWriter.writeHeaders(headerEntries(":path", "/okhttp"));, +    assertBytes(0x04, 7, '/', 'o', 'k', 'h', 't', 't', 'p');, +++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HpackTest.java, +  @Test public void staticTableIndexedHeaders() throws IOException {, +, +    hpackWriter.writeHeaders(headerEntries(":method", "POST"));, +    assertBytes(0x83);, +    assertEquals(0, hpackWriter.headerCount);, +, +    hpackWriter.writeHeaders(headerEntries(":path", "/"));, +    assertBytes(0x84);, +    assertEquals(0, hpackWriter.headerCount);, +, +    hpackWriter.writeHeaders(headerEntries(":path", "/index.html"));, +    assertBytes(0x85);, +    assertEquals(0, hpackWriter.headerCount);, +, +    hpackWriter.writeHeaders(headerEntries(":scheme", "http"));, +    assertBytes(0x86);, +    assertEquals(0, hpackWriter.headerCount);, +, +    hpackWriter.writeHeaders(headerEntries(":scheme", "https"));, +    assertBytes(0x87);, +    assertEquals(0, hpackWriter.headerCount);, +    hpackWriter.writeHeaders(headerEntries(":path", "/okhttp"));, +    assertBytes(0x04, 7, '/', 'o', 'k', 'h', 't', 't', 'p');, +++ b/okhttp/src/main/java/okhttp3/internal/http2/Hpack.java, +        if (staticIndex != null) {, +          headerNameIndex = staticIndex + 1;, +          if (headerNameIndex > 1 && headerNameIndex < 8) {, +            // it's unnecessary to waste cycles looking at them. This check is built on the, +            // observation that the header entries we care about are in adjacent pairs, and we, +            // always know the first index of the pair., +            if (Util.equal(STATIC_HEADER_TABLE[headerNameIndex - 1].value, value)) {, +              headerIndex = headerNameIndex;, +            } else if (Util.equal(STATIC_HEADER_TABLE[headerNameIndex].value, value)) {, +              headerIndex = headerNameIndex + 1;, +            }, +            if (Util.equal(dynamicTable[j].name, name)) {, +              if (Util.equal(dynamicTable[j].value, value)) {, +              } else if (headerNameIndex == -1) {, +        }]