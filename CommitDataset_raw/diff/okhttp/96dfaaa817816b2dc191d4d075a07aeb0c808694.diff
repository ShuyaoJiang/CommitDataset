[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.concurrent.LinkedBlockingDeque;, +import java.util.concurrent.ThreadPoolExecutor;, +import static java.util.concurrent.TimeUnit.SECONDS;, +, +    ThreadPoolExecutor replyExecutor =, +        new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>(),, +            Util.threadFactory(String.format("MockWebServer %s WebSocket", request.getPath()),, +                true));, +    replyExecutor.allowCoreThreadTimeOut(true);, +        new RealWebSocket(false /* is server */, source, sink, new SecureRandom(), replyExecutor,, +            listener, request.getPath()) {, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.concurrent.LinkedBlockingDeque;, +import java.util.concurrent.ThreadPoolExecutor;, +import static java.util.concurrent.TimeUnit.SECONDS;, +, +    ThreadPoolExecutor replyExecutor =, +        new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>(),, +            Util.threadFactory(String.format("MockWebServer %s WebSocket", request.getPath()),, +                true));, +    replyExecutor.allowCoreThreadTimeOut(true);, +        new RealWebSocket(false /* is server */, source, sink, new SecureRandom(), replyExecutor,, +            listener, request.getPath()) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +import java.util.concurrent.Executor;, +, +    Executor synchronousExecutor = new Executor() {, +      @Override public void execute(Runnable command) {, +        command.run();, +      }, +    };, +, +    client = new RealWebSocket(true, server2client, client2Server, random, synchronousExecutor,, +        clientListener, url) {, +    server = new RealWebSocket(false, client2Server, server2client, random, synchronousExecutor,, +        serverListener, url) {, +    server.readMessage(); // Read the ping, write the pong., +    client.readMessage(); // Read the pong., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.concurrent.LinkedBlockingDeque;, +import java.util.concurrent.ThreadPoolExecutor;, +import static java.util.concurrent.TimeUnit.SECONDS;, +, +    ThreadPoolExecutor replyExecutor =, +        new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>(),, +            Util.threadFactory(String.format("MockWebServer %s WebSocket", request.getPath()),, +                true));, +    replyExecutor.allowCoreThreadTimeOut(true);, +        new RealWebSocket(false /* is server */, source, sink, new SecureRandom(), replyExecutor,, +            listener, request.getPath()) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +import java.util.concurrent.Executor;, +, +    Executor synchronousExecutor = new Executor() {, +      @Override public void execute(Runnable command) {, +        command.run();, +      }, +    };, +, +    client = new RealWebSocket(true, server2client, client2Server, random, synchronousExecutor,, +        clientListener, url) {, +    server = new RealWebSocket(false, client2Server, server2client, random, synchronousExecutor,, +        serverListener, url) {, +    server.readMessage(); // Read the ping, write the pong., +    client.readMessage(); // Read the pong., +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java, +import java.util.concurrent.Executor;, +      final Executor replyExecutor, final WebSocketListener listener, final String url) {, +        replyExecutor.execute(new NamedRunnable("OkHttp %s WebSocket Pong Reply", url) {, +      @Override public void onClose(final int code, final String reason) {, +        replyExecutor.execute(new NamedRunnable("OkHttp %s WebSocket Close Reply", url) {, +          @Override protected void execute() {, +    });, +  }, +  /** Replies and closes this web socket when a close frame is read from the peer. */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.concurrent.LinkedBlockingDeque;, +import java.util.concurrent.ThreadPoolExecutor;, +import static java.util.concurrent.TimeUnit.SECONDS;, +, +    ThreadPoolExecutor replyExecutor =, +        new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>(),, +            Util.threadFactory(String.format("MockWebServer %s WebSocket", request.getPath()),, +                true));, +    replyExecutor.allowCoreThreadTimeOut(true);, +        new RealWebSocket(false /* is server */, source, sink, new SecureRandom(), replyExecutor,, +            listener, request.getPath()) {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +import java.util.concurrent.Executor;, +, +    Executor synchronousExecutor = new Executor() {, +      @Override public void execute(Runnable command) {, +        command.run();, +      }, +    };, +, +    client = new RealWebSocket(true, server2client, client2Server, random, synchronousExecutor,, +        clientListener, url) {, +    server = new RealWebSocket(false, client2Server, server2client, random, synchronousExecutor,]