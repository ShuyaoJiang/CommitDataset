[+++ /dev/null, +++ /dev/null, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +import okio.BufferedSource;, +/** Test caching with {@link OkUrlFactory}. */, +  private final OkHttpClient client = new OkHttpClient();, +    client.setCache(cache);, +    MockResponse mockResponse = new MockResponse(), +        .addHeader("Last-Modified: " + formatDate(-1, TimeUnit.HOURS)), +      mockResponse.addHeader("Proxy-Authenticate: Basic realm=\"protected area\"");, +      mockResponse.addHeader("WWW-Authenticate: Basic realm=\"protected area\"");, +    server.enqueue(mockResponse);, +    Request request = new Request.Builder(), +        .url(server.getUrl("/")), +        .build();, +    Response response = client.newCall(request).execute();, +    assertEquals(responseCode, response.code());, +    // Exhaust the content stream., +    response.body().string();, +    Response cached = cache.get(request);, +   * Skipping bytes in the input stream caused ResponseCache corruption., +    MockResponse mockResponse = new MockResponse(), +        .addHeader("Last-Modified: " + formatDate(-1, TimeUnit.HOURS)), +    transferKind.setBody(mockResponse, "I love puppies but hate spiders", 1);, +    server.enqueue(mockResponse);, +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    Response response1 = client.newCall(request).execute();, +, +    BufferedSource in1 = response1.body().source();, +    assertEquals("I love ", in1.readUtf8("I love ".length()));, +    in1.skip("puppies but hate ".length());, +    assertEquals("spiders", in1.readUtf8("spiders".length()));, +    assertTrue(in1.exhausted());, +    in1.close();, +    Response response2 = client.newCall(request).execute();, +    BufferedSource in2 = response2.body().source();, +        in2.readUtf8("I love puppies but hate spiders".length()));, +    assertEquals(200, response2.code());, +    assertEquals("Fantastic", response2.message());, +    assertTrue(in2.exhausted());, +    in2.close();, +    server.enqueue(new MockResponse(), +        .addHeader("Last-Modified: " + formatDate(-1, TimeUnit.HOURS)), +    client.setSslSocketFactory(sslContext.getSocketFactory());, +    client.setHostnameVerifier(NULL_HOSTNAME_VERIFIER);, +, +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    Response response1 = client.newCall(request).execute();, +    BufferedSource in = response1.body().source();, +    assertEquals("ABC", in.readUtf8());, +    String suite = response1.handshake().cipherSuite();, +    List<Certificate> localCerts = response1.handshake().localCertificates();, +    List<Certificate> serverCerts = response1.handshake().peerCertificates();, +    Principal peerPrincipal = response1.handshake().peerPrincipal();, +    Principal localPrincipal = response1.handshake().localPrincipal();, +    Response response2 = client.newCall(request).execute(); // Cached!, +    assertEquals("ABC", response2.body().source().readUtf8());, +    assertEquals(suite, response2.handshake().cipherSuite());, +    assertEquals(localCerts, response2.handshake().localCertificates());, +    assertEquals(serverCerts, response2.handshake().peerCertificates());, +    assertEquals(peerPrincipal, response2.handshake().peerPrincipal());, +    assertEquals(localPrincipal, response2.handshake().localPrincipal());, +    server.enqueue(new MockResponse(), +        .addHeader("Last-Modified: " + formatDate(-1, TimeUnit.HOURS)), +    Request request = new Request.Builder().url(server.getUrl("/")).build();, +    Response response1 = client.newCall(request).execute();, +    assertEquals("ABC", response1.body().string());, +    Response response2 = client.newCall(request).execute(); // Cached!, +    assertEquals("ABC", response2.body().string());, +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_MOVED_PERM), +    server.enqueue(new MockResponse(), +        .setBody("DEF"));, +    Request request1 = new Request.Builder().url(server.getUrl("/foo")).build();, +    Response response1 = client.newCall(request1).execute();, +    assertEquals("ABC", response1.body().string());, +    RecordedRequest recordedRequest1 = server.takeRequest();, +    assertEquals("GET /foo HTTP/1.1", recordedRequest1.getRequestLine());, +    assertEquals(0, recordedRequest1.getSequenceNumber());, +    Request request2 = new Request.Builder().url(server.getUrl("/bar")).build();, +    Response response2 = client.newCall(request2).execute();, +    assertEquals("ABC", response2.body().string());, +    RecordedRequest recordedRequest2 = server.takeRequest();, +    assertEquals("GET /bar HTTP/1.1", recordedRequest2.getRequestLine());, +    assertEquals(1, recordedRequest2.getSequenceNumber());, +    Request request3 = new Request.Builder().url(server.getUrl("/baz")).build();, +    Response response3 = client.newCall(request3).execute();, +    assertEquals("DEF", response3.body().string());, +    RecordedRequest recordedRequest3 = server.takeRequest();, +    assertEquals("GET /baz HTTP/1.1", recordedRequest3.getRequestLine());, +    assertEquals(2, recordedRequest3.getSequenceNumber());, +    server.enqueue(new MockResponse(), +        .addHeader("Last-Modified: " + formatDate(-1, TimeUnit.HOURS)), +    server.enqueue(new MockResponse(), +        .addHeader("Last-Modified: " + formatDate(-1, TimeUnit.HOURS)), +    client.setSslSocketFactory(sslContext.getSocketFactory());, +    client.setHostnameVerifier(NULL_HOSTNAME_VERIFIER);, +    Response response1 = get(server.getUrl("/"));, +    assertEquals("ABC", response1.body().string());, +    assertNotNull(response1.handshake().cipherSuite());]