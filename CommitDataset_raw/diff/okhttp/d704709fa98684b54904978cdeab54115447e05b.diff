[+++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +          if (blank.length() > 0) {, +        throw new IOException(e.getMessage());, +        throw new IOException(e.getMessage());, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +          if (blank.length() > 0) {, +        throw new IOException(e.getMessage());, +        throw new IOException(e.getMessage());, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/StrictLineReader.java, +import java.io.UnsupportedEncodingException;, + * <p>This class is used for buffered reading of lines. For purposes of this class, a line ends with, + * <p>This class is intended for reading input that strictly consists of lines, such as line-based, + * cache entries or cache journal. Unlike the {@link java.io.BufferedReader} which in conjunction, + * with {@link java.io.InputStreamReader} provides similar functionality, this class uses different, + * <p>This class supports only charsets that encode '\r' and '\n' as a single byte with value 13, +  /*, +   * Buffered data is stored in {@code buf}. As long as no exception occurs, 0 <= pos <= end, +   * and the data in the range [pos, end) is buffered for reading. At end of input, if there is, +   * an unterminated line, we set end == -1, otherwise end == pos. If the underlying, +   * {@code InputStream} throws an {@code IOException}, end may remain as either pos or -1., +   */, +   * @param charset the charset used to decode data. Only US-ASCII, UTF-8 and ISO-8859-1 are, +   *     supported., +   * @param charset the charset used to decode data. Only US-ASCII, UTF-8 and ISO-8859-1 are, +   *     supported., +    if (!(charset.equals(Util.US_ASCII))) {, +          String res = new String(buf, pos, lineEnd - pos, charset.name());, +          try {, +            return new String(buf, 0, length, charset.name());, +          } catch (UnsupportedEncodingException e) {, +            throw new AssertionError(e); // Since we control the charset this will never happen., +          }, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +          if (blank.length() > 0) {, +        throw new IOException(e.getMessage());, +        throw new IOException(e.getMessage());, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/StrictLineReader.java, +import java.io.UnsupportedEncodingException;, + * <p>This class is used for buffered reading of lines. For purposes of this class, a line ends with, + * <p>This class is intended for reading input that strictly consists of lines, such as line-based, + * cache entries or cache journal. Unlike the {@link java.io.BufferedReader} which in conjunction, + * with {@link java.io.InputStreamReader} provides similar functionality, this class uses different, + * <p>This class supports only charsets that encode '\r' and '\n' as a single byte with value 13, +  /*, +   * Buffered data is stored in {@code buf}. As long as no exception occurs, 0 <= pos <= end, +   * and the data in the range [pos, end) is buffered for reading. At end of input, if there is, +   * an unterminated line, we set end == -1, otherwise end == pos. If the underlying, +   * {@code InputStream} throws an {@code IOException}, end may remain as either pos or -1., +   */, +   * @param charset the charset used to decode data. Only US-ASCII, UTF-8 and ISO-8859-1 are, +   *     supported., +   * @param charset the charset used to decode data. Only US-ASCII, UTF-8 and ISO-8859-1 are, +   *     supported., +    if (!(charset.equals(Util.US_ASCII))) {, +          String res = new String(buf, pos, lineEnd - pos, charset.name());, +          try {, +            return new String(buf, 0, length, charset.name());, +          } catch (UnsupportedEncodingException e) {, +            throw new AssertionError(e); // Since we control the charset this will never happen., +          }, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +      throw new IOException(e.getMessage());, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +          if (blank.length() > 0) {, +        throw new IOException(e.getMessage());, +        throw new IOException(e.getMessage());, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/StrictLineReader.java, +import java.io.UnsupportedEncodingException;, + * <p>This class is used for buffered reading of lines. For purposes of this class, a line ends with, + * <p>This class is intended for reading input that strictly consists of lines, such as line-based, + * cache entries or cache journal. Unlike the {@link java.io.BufferedReader} which in conjunction, + * with {@link java.io.InputStreamReader} provides similar functionality, this class uses different, + * <p>This class supports only charsets that encode '\r' and '\n' as a single byte with value 13, +  /*, +   * Buffered data is stored in {@code buf}. As long as no exception occurs, 0 <= pos <= end, +   * and the data in the range [pos, end) is buffered for reading. At end of input, if there is, +   * an unterminated line, we set end == -1, otherwise end == pos. If the underlying, +   * {@code InputStream} throws an {@code IOException}, end may remain as either pos or -1., +   */, +   * @param charset the charset used to decode data. Only US-ASCII, UTF-8 and ISO-8859-1 are, +   *     supported., +   * @param charset the charset used to decode data. Only US-ASCII, UTF-8 and ISO-8859-1 are, +   *     supported., +    if (!(charset.equals(Util.US_ASCII))) {, +          String res = new String(buf, pos, lineEnd - pos, charset.name());, +          try {, +            return new String(buf, 0, length, charset.name());, +          } catch (UnsupportedEncodingException e) {, +            throw new AssertionError(e); // Since we control the charset this will never happen., +          }, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +      throw new IOException(e.getMessage());, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/ResponseHeaders.java, +      long oneDayMillis = 24 * 60 * 60 * 1000L;, +      if (ageMillis > oneDayMillis && isFreshnessLifetimeHeuristic()) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +          if (blank.length() > 0) {, +        throw new IOException(e.getMessage());, +        throw new IOException(e.getMessage());, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/StrictLineReader.java]