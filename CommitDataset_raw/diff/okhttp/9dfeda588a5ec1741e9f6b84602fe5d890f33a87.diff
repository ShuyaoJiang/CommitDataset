[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/GzipSource.java, +, +      // Gzip streams self-terminate: they return -1 before their underlying, +      // source returns -1. Here we attempt to force the underlying stream to, +      // return -1 which may trigger it to release its resources. If it doesn't, +      // return -1, then our Gzip data finished prematurely!, +      if (!source.exhausted(deadline)) {, +        throw new IOException("gzip finished without exhausting source");, +      }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/GzipSource.java, +, +      // Gzip streams self-terminate: they return -1 before their underlying, +      // source returns -1. Here we attempt to force the underlying stream to, +      // return -1 which may trigger it to release its resources. If it doesn't, +      // return -1, then our Gzip data finished prematurely!, +      if (!source.exhausted(deadline)) {, +        throw new IOException("gzip finished without exhausting source");, +      }, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/bytes/GzipSourceTest.java, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +  @Test public void gunzipExhaustsSource() throws Exception {, +    byte[] abcGzipped = {, +        (byte) 0x1f, (byte) 0x8b, (byte) 0x08, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,, +        (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x4b, (byte) 0x4c, (byte) 0x4a, (byte) 0x06,, +        (byte) 0x00, (byte) 0xc2, (byte) 0x41, (byte) 0x24, (byte) 0x35, (byte) 0x03, (byte) 0x00,, +        (byte) 0x00, (byte) 0x00, +    };, +    OkBuffer gzippedSource = new OkBuffer();, +    gzippedSource.write(abcGzipped, 0, abcGzipped.length);, +, +    ExhaustableSource exhaustableSource = new ExhaustableSource(gzippedSource);, +    BufferedSource gunzippedSource = new BufferedSource(new GzipSource(exhaustableSource));, +, +    assertEquals('a', gunzippedSource.readByte());, +    assertEquals('b', gunzippedSource.readByte());, +    assertEquals('c', gunzippedSource.readByte());, +    assertFalse(exhaustableSource.exhausted);, +    assertEquals(-1, gunzippedSource.read(new OkBuffer(), 1, Deadline.NONE));, +    assertTrue(exhaustableSource.exhausted);, +  }, +, +  @Test public void gunzipThrowsIfSourceIsNotExhausted() throws Exception {, +    byte[] abcGzipped = {, +        (byte) 0x1f, (byte) 0x8b, (byte) 0x08, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,, +        (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x4b, (byte) 0x4c, (byte) 0x4a, (byte) 0x06,, +        (byte) 0x00, (byte) 0xc2, (byte) 0x41, (byte) 0x24, (byte) 0x35, (byte) 0x03, (byte) 0x00,, +        (byte) 0x00, (byte) 0x00, +    };, +    OkBuffer gzippedSource = new OkBuffer();, +    gzippedSource.write(abcGzipped, 0, abcGzipped.length);, +    gzippedSource.writeByte('d'); // This byte shouldn't be here!, +, +    BufferedSource gunzippedSource = new BufferedSource(new GzipSource(gzippedSource));, +, +    assertEquals('a', gunzippedSource.readByte());, +    assertEquals('b', gunzippedSource.readByte());, +    assertEquals('c', gunzippedSource.readByte());, +    try {, +      gunzippedSource.readByte();, +      fail();, +    } catch (IOException expected) {, +    }, +  }, +, +, +  /** This source keeps track of whether its read have returned -1. */, +  static class ExhaustableSource implements Source {, +    private final Source source;, +    private boolean exhausted;, +, +    ExhaustableSource(Source source) {, +      this.source = source;, +    }, +, +    @Override public long read(OkBuffer sink, long byteCount, Deadline deadline), +        throws IOException {, +      long result = source.read(sink, byteCount, deadline);, +      if (result == -1) exhausted = true;, +      return result;, +    }, +, +    @Override public void close(Deadline deadline) throws IOException {, +      source.close(deadline);, +    }, +  }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/bytes/GzipSource.java, +, +      // Gzip streams self-terminate: they return -1 before their underlying, +      // source returns -1. Here we attempt to force the underlying stream to, +      // return -1 which may trigger it to release its resources. If it doesn't, +      // return -1, then our Gzip data finished prematurely!, +      if (!source.exhausted(deadline)) {, +        throw new IOException("gzip finished without exhausting source");, +      }, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/bytes/GzipSourceTest.java, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +  @Test public void gunzipExhaustsSource() throws Exception {, +    byte[] abcGzipped = {]