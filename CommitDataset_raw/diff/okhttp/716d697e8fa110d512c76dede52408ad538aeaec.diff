[+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    Source source = Okio.source(file);, +    try {, +      BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeAll(source);, +      out.close();, +    } finally {, +      Util.closeQuietly(source);, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    Source source = Okio.source(file);, +    try {, +      BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeAll(source);, +      out.close();, +    } finally {, +      Util.closeQuietly(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.buffer(), source.buffer().size());, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    Source source = Okio.source(file);, +    try {, +      BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeAll(source);, +      out.close();, +    } finally {, +      Util.closeQuietly(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.buffer(), source.buffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.buffer();, +          GzipSource gzippedResponseBody = null;, +          try {, +            gzippedResponseBody = new GzipSource(buffer.clone());, +          } finally {, +            if (gzippedResponseBody != null) {, +              gzippedResponseBody.close();, +            }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    Source source = Okio.source(file);, +    try {, +      BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeAll(source);, +      out.close();, +    } finally {, +      Util.closeQuietly(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.buffer(), source.buffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.buffer();, +          GzipSource gzippedResponseBody = null;, +          try {, +            gzippedResponseBody = new GzipSource(buffer.clone());, +          } finally {, +            if (gzippedResponseBody != null) {, +              gzippedResponseBody.close();, +            }, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.buffer().getByte(0)) {, +      byte nextByte = source.buffer().getByte(key.size());, +        && source.buffer().getByte(0) == '\n') {, +    if (source.buffer().getByte(0) == ':') {, +      if (source.buffer().getByte(0) == ' ') {, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    Source source = Okio.source(file);, +    try {, +      BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeAll(source);, +      out.close();, +    } finally {, +      Util.closeQuietly(source);, +++ b/okcurl/src/main/java/okhttp3/curl/Main.java, +        out.write(source.buffer(), source.buffer().size());, +++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java, +        Buffer buffer = source.buffer();, +          GzipSource gzippedResponseBody = null;, +          try {, +            gzippedResponseBody = new GzipSource(buffer.clone());, +          } finally {, +            if (gzippedResponseBody != null) {, +              gzippedResponseBody.close();, +            }, +++ b/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java, +      switch (source.buffer().getByte(0)) {, +      byte nextByte = source.buffer().getByte(key.size());, +        && source.buffer().getByte(0) == '\n') {, +    if (source.buffer().getByte(0) == ':') {, +      if (source.buffer().getByte(0) == ' ') {, +++ b/okhttp-tests/src/main/java/okhttp3/TestTls13Request.java, +      .supportsTlsExtensions(true), +    Response response = null;, +    try {, +      response = client.newCall(request).execute();, +, +    } finally {, +      if (response != null) {, +        response.close();, +      }, +++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java, +    Source source = Okio.source(file);, +    try {]