[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java, +    server.enqueue(new MockResponse(), +        .addHeader("Last-Modified: " + formatDate(-1, TimeUnit.HOURS)), +    server.enqueue(new MockResponse(), +        .setBody("DEF"));, +    server.enqueue(new MockResponse(), +        .addHeader("Cache-Control: max-age=60"), +        .setBody("ABC"));, +    server.enqueue(new MockResponse(), +        .setBody("DEF"));, +    server2.enqueue(new MockResponse(), +        .setBody("DEF"));, +    server.enqueue(new MockResponse(), +        .setBody("B"));, +    assertNotCached(new MockResponse(), +        .addHeader("Expires: " + formatDate(-1, TimeUnit.HOURS)));, +    assertFullyCached(new MockResponse(), +        .addHeader("Expires: " + formatDate(1, TimeUnit.HOURS)));, +    assertFullyCached(new MockResponse(), +        .addHeader("Date: " + formatDate(0, TimeUnit.HOURS)), +    assertNotCached(new MockResponse(), +        .addHeader("Date: " + formatDate(-120, TimeUnit.SECONDS)), +    assertFullyCached(new MockResponse(), +        .addHeader("Last-Modified: " + formatDate(-120, TimeUnit.SECONDS)), +    assertFullyCached(new MockResponse(), +        .addHeader("Last-Modified: " + formatDate(-120, TimeUnit.SECONDS)), +    assertFullyCached(new MockResponse(), +        .addHeader("Date: " + formatDate(-2, TimeUnit.MINUTES)), +    assertNotCached(new MockResponse(), +        .addHeader("Date: " + formatDate(-2, TimeUnit.MINUTES)), +    server.enqueue(new MockResponse(), +        .setBody("A"), +        .addHeader("Expires: " + formatDate(1, TimeUnit.HOURS)));, +    RecordedRequest conditionalRequest = assertConditionallyCached(new MockResponse(), +        .addHeader("ETag: v1"));, +    assertFullyCached(new MockResponse(), +        .addHeader("ETag: v1"), +    assertNotCached(new MockResponse(), +        .addHeader("Cache-Control: no-cache"));, +    assertNotCached(new MockResponse(), +        .addHeader("Pragma: no-cache"));, +    assertNotCached(new MockResponse(), +        .addHeader("Cache-Control: no-store"));, +    assertNotCached(new MockResponse(), +        .addHeader("Last-Modified: " + formatDate(-2, TimeUnit.HOURS)), +    server.enqueue(new MockResponse(), +        .setBody("BB"));, +    assertNonIdentityEncodingCached(new MockResponse(), +        .addHeader("Last-Modified: " + formatDate(-2, TimeUnit.HOURS)), +    assertNonIdentityEncodingCached(new MockResponse(), +        .addHeader("Last-Modified: " + formatDate(-2, TimeUnit.HOURS)), +    server.enqueue(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED), +    server.enqueue(new MockResponse(), +        .setBody("DEFDEFDEF"));, +    server.enqueue(new MockResponse(), +        .setBody("FAIL"));, +        .addHeader("ETag: v1"), +        .setBody("A"));, +    assertConditionallyCached(new MockResponse(), +        .addHeader("Last-Modified: " + formatDate(-1, TimeUnit.HOURS)), +    server.enqueue(new MockResponse(), +        .setBody("B"));, +    server.enqueue(new MockResponse(), +        .setBody("B"));, +    server.enqueue(new MockResponse(), +        .setBody("B"));, +        .addHeader("Cache-Control: max-age=60"), +        .setBody("A"));, +    server.enqueue(new MockResponse(), +        .addHeader("Cache-Control: max-age=60"), +    server.enqueue(new MockResponse(), +        .addHeader("Cache-Control: max-age=60"), +    server.enqueue(new MockResponse(), +        .setBody("B"));, +    server.enqueue( new MockResponse(), +        .addHeader("Cache-Control: max-age=60"), +        .addHeader("Vary: *"), +        .setBody("A"));, +    server.enqueue(new MockResponse(), +        .addHeader("Transfer-Encoding: none"), +    assertNotCached(new MockResponse(), +        .setResponseCode(HttpURLConnection.HTTP_PARTIAL), +  @Test public void evictAll() throws Exception {, +    server.enqueue(new MockResponse(), +        .addHeader("Cache-Control: max-age=60"), +        .setBody("A"));, +    server.enqueue(new MockResponse(), +        .setBody("B"));, +, +    URL url = server.getUrl("/");, +    assertEquals("A", get(url).body().string());, +    client.getCache().evictAll();, +    assertEquals(0, client.getCache().getSize());, +    assertEquals("B", get(url).body().string());, +  }, +, +    server.enqueue(response.setBody("B"), +        .setStatus("HTTP/1.1 200 B-OK"));, +        .setStatus("HTTP/1.1 200 C-OK")]