[+++ /dev/null, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +import com.squareup.okhttp.internal.Util;, +import java.util.List;, +  final List<String> transports;, +      HostnameVerifier hostnameVerifier, OkAuthenticator authenticator, Proxy proxy,, +      List<String> transports) throws UnknownHostException {, +    if (transports == null) throw new IllegalArgumentException("transports == null");, +    this.transports = Util.immutableList(transports);, +   * Returns the client's transports. This method always returns a non-null list, +   * that contains "http/1.1", possibly among other transports., +   */, +  public List<String> getTransports() {, +    return transports;, +  }, +, +  /**, +          && equal(this.authenticator, that.authenticator), +          && equal(this.transports, that.transports);, +    result = 31 * result + transports.hashCode();, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +import com.squareup.okhttp.internal.Util;, +import java.util.List;, +  final List<String> transports;, +      HostnameVerifier hostnameVerifier, OkAuthenticator authenticator, Proxy proxy,, +      List<String> transports) throws UnknownHostException {, +    if (transports == null) throw new IllegalArgumentException("transports == null");, +    this.transports = Util.immutableList(transports);, +   * Returns the client's transports. This method always returns a non-null list, +   * that contains "http/1.1", possibly among other transports., +   */, +  public List<String> getTransports() {, +    return transports;, +  }, +, +  /**, +          && equal(this.authenticator, that.authenticator), +          && equal(this.transports, that.transports);, +    result = 31 * result + transports.hashCode();, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    boolean useNpn = route.modernTls && route.address.transports.contains("spdy/3");, +    if (useNpn) {, +    if (useNpn && (selectedProtocol = platform.getNpnSelectedProtocol(sslSocket)) != null) {, +++ /dev/null, +++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java, +import com.squareup.okhttp.internal.Util;, +import java.util.List;, +  final List<String> transports;, +      HostnameVerifier hostnameVerifier, OkAuthenticator authenticator, Proxy proxy,, +      List<String> transports) throws UnknownHostException {, +    if (transports == null) throw new IllegalArgumentException("transports == null");, +    this.transports = Util.immutableList(transports);, +   * Returns the client's transports. This method always returns a non-null list, +   * that contains "http/1.1", possibly among other transports., +   */, +  public List<String> getTransports() {, +    return transports;, +  }, +, +  /**, +          && equal(this.authenticator, that.authenticator), +          && equal(this.transports, that.transports);, +    result = 31 * result + transports.hashCode();, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    boolean useNpn = route.modernTls && route.address.transports.contains("spdy/3");, +    if (useNpn) {, +    if (useNpn && (selectedProtocol = platform.getNpnSelectedProtocol(sslSocket)) != null) {, +++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java, +import com.squareup.okhttp.internal.Util;, +import java.net.Authenticator;, +import java.util.Arrays;, +import java.util.List;, +  private static final List<String> DEFAULT_TRANSPORTS, +      = Util.immutableList(Arrays.asList("spdy/3", "http/1.1"));, +, +  private List<String> transports;, +  private final Set<Route> failedRoutes;, +  public OkHttpClient() {, +    this.failedRoutes = Collections.synchronizedSet(new LinkedHashSet<Route>());, +  }, +, +  private OkHttpClient(OkHttpClient copyFrom) {, +    this.failedRoutes = copyFrom.failedRoutes; // Avoid allocating an unnecessary LinkedHashSet., +  }, +, +  /**, +   * Configure the transports used by this client to communicate with remote, +   * servers. By default this client will prefer the most efficient transport, +   * available, falling back to more ubiquitous transports. Applications should, +   * only call this method to avoid specific compatibility problems, such as web, +   * servers that behave incorrectly when SPDY is enabled., +   *, +   * <p>The following transports are currently supported:, +   * <ul>, +   *   <li><a href="http://www.w3.org/Protocols/rfc2616/rfc2616.html">http/1.1</a>, +   *   <li><a href="http://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft3">spdy/3</a>, +   * </ul>, +   *]