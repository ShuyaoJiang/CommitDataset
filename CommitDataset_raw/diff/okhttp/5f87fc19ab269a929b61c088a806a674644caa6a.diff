[+++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +  @Override public <T> T execute(HttpHost host, HttpRequest request,, +      ResponseHandler<? extends T> handler) throws IOException {, +  @Override public <T> T execute(HttpHost host, HttpRequest request,, +      ResponseHandler<? extends T> handler, HttpContext context) throws IOException {, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +  @Override public <T> T execute(HttpHost host, HttpRequest request,, +      ResponseHandler<? extends T> handler) throws IOException {, +  @Override public <T> T execute(HttpHost host, HttpRequest request,, +      ResponseHandler<? extends T> handler, HttpContext context) throws IOException {, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import com.squareup.okhttp.internal.http.HttpsEngine;, +        @Override public void write(byte[] buffer, int offset, int length) throws IOException {, +      return engine instanceof HttpsEngine, +          ? ((HttpsEngine) engine).getSslSocket(), +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +  @Override public <T> T execute(HttpHost host, HttpRequest request,, +      ResponseHandler<? extends T> handler) throws IOException {, +  @Override public <T> T execute(HttpHost host, HttpRequest request,, +      ResponseHandler<? extends T> handler, HttpContext context) throws IOException {, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import com.squareup.okhttp.internal.http.HttpsEngine;, +        @Override public void write(byte[] buffer, int offset, int length) throws IOException {, +      return engine instanceof HttpsEngine, +          ? ((HttpsEngine) engine).getSslSocket(), +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/StrictLineReader.java, +        @Override public String toString() {, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +  @Override public <T> T execute(HttpHost host, HttpRequest request,, +      ResponseHandler<? extends T> handler) throws IOException {, +  @Override public <T> T execute(HttpHost host, HttpRequest request,, +      ResponseHandler<? extends T> handler, HttpContext context) throws IOException {, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import com.squareup.okhttp.internal.http.HttpsEngine;, +        @Override public void write(byte[] buffer, int offset, int length) throws IOException {, +      return engine instanceof HttpsEngine, +          ? ((HttpsEngine) engine).getSslSocket(), +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/StrictLineReader.java, +        @Override public String toString() {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +  protected final Policy policy;, +  public HttpEngine(OkHttpClient client, Policy policy, String method, RawHeaders requestHeaders,, +    this.client = client;, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +  @Override public <T> T execute(HttpHost host, HttpRequest request,, +      ResponseHandler<? extends T> handler) throws IOException {, +  @Override public <T> T execute(HttpHost host, HttpRequest request,, +      ResponseHandler<? extends T> handler, HttpContext context) throws IOException {, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import com.squareup.okhttp.internal.http.HttpsEngine;, +        @Override public void write(byte[] buffer, int offset, int length) throws IOException {, +      return engine instanceof HttpsEngine, +          ? ((HttpsEngine) engine).getSslSocket(), +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/StrictLineReader.java, +        @Override public String toString() {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +  protected final Policy policy;, +  public HttpEngine(OkHttpClient client, Policy policy, String method, RawHeaders requestHeaders,, +    this.client = client;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +public class HttpURLConnectionImpl extends HttpURLConnection implements Policy {, +  @Override public HttpURLConnection getHttpConnectionToCache() {, +      return new HttpEngine(client, this, method, requestHeaders, connection, requestBody);, +      return new HttpsEngine(client, this, method, requestHeaders, connection, requestBody);, +  @Override public final long getFixedContentLength() {, +  @Override public final int getChunkLength() {, +++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java, +  @Override public <T> T execute(HttpHost host, HttpRequest request,, +      ResponseHandler<? extends T> handler) throws IOException {, +  @Override public <T> T execute(HttpHost host, HttpRequest request,, +      ResponseHandler<? extends T> handler, HttpContext context) throws IOException {, +++ b/okhttp/src/main/java/com/squareup/okhttp/HttpResponseCache.java, +import com.squareup.okhttp.internal.http.HttpsEngine;, +        @Override public void write(byte[] buffer, int offset, int length) throws IOException {, +      return engine instanceof HttpsEngine, +          ? ((HttpsEngine) engine).getSslSocket(), +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/StrictLineReader.java, +        @Override public String toString() {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +  protected final Policy policy;, +  public HttpEngine(OkHttpClient client, Policy policy, String method, RawHeaders requestHeaders,, +    this.client = client;, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java, +public class HttpURLConnectionImpl extends HttpURLConnection implements Policy {, +  @Override public HttpURLConnection getHttpConnectionToCache() {, +      return new HttpEngine(client, this, method, requestHeaders, connection, requestBody);, +      return new HttpsEngine(client, this, method, requestHeaders, connection, requestBody);, +  @Override public final long getFixedContentLength() {, +  @Override public final int getChunkLength() {, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpsEngine.java, +/*, + *  Licensed to the Apache Software Foundation (ASF) under one or more, + *  contributor license agreements.  See the NOTICE file distributed with, + *  this work for additional information regarding copyright ownership., + *  The ASF licenses this file to You under the Apache License, Version 2.0, + *  (the "License"); you may not use this file except in compliance with, + *  the License.  You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *]