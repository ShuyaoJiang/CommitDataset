[+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      if (peek.isDuplex()) {, +        readBody = false;, +      } else if (!readBody && peek.getSocketPolicy() == EXPECT_CONTINUE) {, +      if (readBody) {, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      if (peek.isDuplex()) {, +        readBody = false;, +      } else if (!readBody && peek.getSocketPolicy() == EXPECT_CONTINUE) {, +      if (readBody) {, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +import java.io.IOException;, +import java.net.ProtocolException;, +import static org.junit.Assert.fail;, +  @Test public void http1DoesntSupportDuplex() throws IOException {, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .post(new AsyncRequestBody()), +        .build());, +    try {, +      call.execute();, +      fail();, +    } catch (ProtocolException expected) {, +    }, +  }, +, +  // TODO(oldergod) write tests for headers discarded with 100 Continue, +, +, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      if (peek.isDuplex()) {, +        readBody = false;, +      } else if (!readBody && peek.getSocketPolicy() == EXPECT_CONTINUE) {, +      if (readBody) {, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +import java.io.IOException;, +import java.net.ProtocolException;, +import static org.junit.Assert.fail;, +  @Test public void http1DoesntSupportDuplex() throws IOException {, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .post(new AsyncRequestBody()), +        .build());, +    try {, +      call.execute();, +      fail();, +    } catch (ProtocolException expected) {, +    }, +  }, +, +  // TODO(oldergod) write tests for headers discarded with 100 Continue, +, +, +++ b/okhttp/src/main/java/okhttp3/internal/http/ExchangeCodec.java, +  Sink createRequestBody(Request request, long contentLength) throws IOException;, +++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java, +      if (peek.isDuplex()) {, +        readBody = false;, +      } else if (!readBody && peek.getSocketPolicy() == EXPECT_CONTINUE) {, +      if (readBody) {, +++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java, +import java.io.IOException;, +import java.net.ProtocolException;, +import static org.junit.Assert.fail;, +  @Test public void http1DoesntSupportDuplex() throws IOException {, +    Call call = client.newCall(new Request.Builder(), +        .url(server.url("/")), +        .post(new AsyncRequestBody()), +        .build());, +    try {, +      call.execute();, +      fail();, +    } catch (ProtocolException expected) {, +    }, +  }, +, +  // TODO(oldergod) write tests for headers discarded with 100 Continue, +, +, +++ b/okhttp/src/main/java/okhttp3/internal/http/ExchangeCodec.java, +  Sink createRequestBody(Request request, long contentLength) throws IOException;, +++ b/okhttp/src/main/java/okhttp3/internal/http1/Http1ExchangeCodec.java, +import okhttp3.internal.duplex.DuplexRequestBody;, +  @Override public Sink createRequestBody(Request request, long contentLength) throws IOException {, +    if (request.body() instanceof DuplexRequestBody) {, +      throw new ProtocolException("Duplex connections are not supported for HTTP1");, +    }, +]