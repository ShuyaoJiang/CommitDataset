[+++ b/CHANGELOG.md, +++ b/CHANGELOG.md, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, Throwable throwable) {, +        System.out.println("Failed: " + throwable);, +++ b/CHANGELOG.md, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, Throwable throwable) {, +        System.out.println("Failed: " + throwable);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.concurrent.TimeUnit;, +   * use this to verify the request was sent as intended. This method will block until the, +   * request is available, possibly forever., +   *, +   * @return the head of the request queue, +   * Awaits the next HTTP request (waiting up to the, +   * specified wait time if necessary), removes it, and returns it. Callers should, +   * use this to verify the request was sent as intended within the given time., +   *, +   * @param timeout how long to wait before giving up, in units of, +  *        {@code unit}, +   * @param unit a {@code TimeUnit} determining how to interpret the, +   *        {@code timeout} parameter, +   * @return the head of the request queue, +   */, +  public RecordedRequest takeRequest(int timeout, TimeUnit unit) throws InterruptedException {, +    return requestQueue.poll(timeout, unit);, +  }, +, +  /**, +++ b/CHANGELOG.md, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, Throwable throwable) {, +        System.out.println("Failed: " + throwable);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.concurrent.TimeUnit;, +   * use this to verify the request was sent as intended. This method will block until the, +   * request is available, possibly forever., +   *, +   * @return the head of the request queue, +   * Awaits the next HTTP request (waiting up to the, +   * specified wait time if necessary), removes it, and returns it. Callers should, +   * use this to verify the request was sent as intended within the given time., +   *, +   * @param timeout how long to wait before giving up, in units of, +  *        {@code unit}, +   * @param unit a {@code TimeUnit} determining how to interpret the, +   *        {@code timeout} parameter, +   * @return the head of the request queue, +   */, +  public RecordedRequest takeRequest(int timeout, TimeUnit unit) throws InterruptedException {, +    return requestQueue.poll(timeout, unit);, +  }, +, +  /**, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +      @Override public void onFailure(Request request, Throwable throwable) {, +      @Override public void onFailure(Request request, Throwable throwable) {, +      @Override public void onFailure(Request request, Throwable throwable) {, +++ b/CHANGELOG.md, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, Throwable throwable) {, +        System.out.println("Failed: " + throwable);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.concurrent.TimeUnit;, +   * use this to verify the request was sent as intended. This method will block until the, +   * request is available, possibly forever., +   *, +   * @return the head of the request queue, +   * Awaits the next HTTP request (waiting up to the, +   * specified wait time if necessary), removes it, and returns it. Callers should, +   * use this to verify the request was sent as intended within the given time., +   *, +   * @param timeout how long to wait before giving up, in units of, +  *        {@code unit}, +   * @param unit a {@code TimeUnit} determining how to interpret the, +   *        {@code timeout} parameter, +   * @return the head of the request queue, +   */, +  public RecordedRequest takeRequest(int timeout, TimeUnit unit) throws InterruptedException {, +    return requestQueue.poll(timeout, unit);, +  }, +, +  /**, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java, +      @Override public void onFailure(Request request, Throwable throwable) {, +      @Override public void onFailure(Request request, Throwable throwable) {, +      @Override public void onFailure(Request request, Throwable throwable) {, +++ /dev/null, +++ b/CHANGELOG.md, +++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java, +      @Override public void onFailure(Request request, Throwable throwable) {, +        System.out.println("Failed: " + throwable);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import java.util.concurrent.TimeUnit;, +   * use this to verify the request was sent as intended. This method will block until the, +   * request is available, possibly forever., +   *, +   * @return the head of the request queue, +   * Awaits the next HTTP request (waiting up to the]