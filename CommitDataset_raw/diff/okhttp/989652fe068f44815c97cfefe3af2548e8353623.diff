[+++ b/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +, +    public void receiveHeaders(RawHeaders headers) throws IOException {, +        CookieHandler cookieHandler = policy.cookieHandler;, +        if (cookieHandler != null) {, +            cookieHandler.put(uri, headers.toMultimap(true));, +        }, +    }, +++ b/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +, +    public void receiveHeaders(RawHeaders headers) throws IOException {, +        CookieHandler cookieHandler = policy.cookieHandler;, +        if (cookieHandler != null) {, +            cookieHandler.put(uri, headers.toMultimap(true));, +        }, +    }, +++ b/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, +        httpEngine.receiveHeaders(headers);, +                httpEngine.receiveHeaders(rawResponseHeaders);, +++ b/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +, +    public void receiveHeaders(RawHeaders headers) throws IOException {, +        CookieHandler cookieHandler = policy.cookieHandler;, +        if (cookieHandler != null) {, +            cookieHandler.put(uri, headers.toMultimap(true));, +        }, +    }, +++ b/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, +        httpEngine.receiveHeaders(headers);, +                httpEngine.receiveHeaders(rawResponseHeaders);, +++ b/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java, +        httpEngine.receiveHeaders(rawHeaders);, +++ b/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +, +    public void receiveHeaders(RawHeaders headers) throws IOException {, +        CookieHandler cookieHandler = policy.cookieHandler;, +        if (cookieHandler != null) {, +            cookieHandler.put(uri, headers.toMultimap(true));, +        }, +    }, +++ b/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, +        httpEngine.receiveHeaders(headers);, +                httpEngine.receiveHeaders(rawResponseHeaders);, +++ b/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java, +        httpEngine.receiveHeaders(rawHeaders);, +++ b/src/test/java/com/squareup/okhttp/internal/mockspdyserver/MockSpdyServer.java, +     * Returns a cookie domain for this server. This returns the server's, +     * non-loopback host name if it is known. Otherwise this returns ".local", +     * for this server's loopback name., +     */, +    public String getCookieDomain() {, +        String hostName = getHostName();, +        return hostName.contains(".") ? hostName : ".local";, +    }, +, +    /**, +++ b/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +, +    public void receiveHeaders(RawHeaders headers) throws IOException {, +        CookieHandler cookieHandler = policy.cookieHandler;, +        if (cookieHandler != null) {, +            cookieHandler.put(uri, headers.toMultimap(true));, +        }, +    }, +++ b/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java, +        httpEngine.receiveHeaders(headers);, +                httpEngine.receiveHeaders(rawResponseHeaders);, +++ b/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java, +        httpEngine.receiveHeaders(rawHeaders);, +++ b/src/test/java/com/squareup/okhttp/internal/mockspdyserver/MockSpdyServer.java, +     * Returns a cookie domain for this server. This returns the server's, +     * non-loopback host name if it is known. Otherwise this returns ".local", +     * for this server's loopback name., +     */, +    public String getCookieDomain() {, +        String hostName = getHostName();, +        return hostName.contains(".") ? hostName : ".local";, +    }, +, +    /**, +++ b/src/test/java/com/squareup/okhttp/internal/spdy/HttpOverSpdyTest.java, +import java.net.CookieManager;, +import java.net.URL;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.Map;, +    @Test public void emptyResponse() throws IOException {, +        server.enqueue(new MockResponse());, +        server.play();, +, +        HttpURLConnection connection = client.open(server.getUrl("/foo"));, +        assertEquals(-1, connection.getInputStream().read());, +    }, +, +    @Test public void post() throws Exception {, +        MockResponse response = new MockResponse().setBody("ABCDE");, +        server.enqueue(response);, +        server.play();, +, +        HttpURLConnection connection = client.open(server.getUrl("/foo"));]