[+++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/BitArray.java, +  public BitArray() {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/BitArray.java, +  public BitArray() {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +import com.squareup.okhttp.internal.BitArray;, + * position moving forward.  When the array fills, it is doubled., +    HeaderEntry[] headerTable = new HeaderEntry[8];, +    // Using a BitArray as it has left-shift operator., +    BitArray referencedHeaders = new BitArray();, +    BitArray referencedStaticHeaders = new BitArray();, +      referencedStaticHeaders.clear();, +      referencedHeaders.clear();, +        if (referencedStaticHeaders.get(i)) {, +        if (referencedHeaders.get(i)) {, +          referencedStaticHeaders.set(index - headerCount);, +      } else if (!referencedHeaders.get(headerTableIndex(index))) {, +        referencedHeaders.set(headerTableIndex(index));, +        clearReferenceSet();, +        referencedHeaders.shiftLeft(entriesToEvict);, +          referencedHeaders.shiftLeft(headerTable.length);, +        referencedHeaders.set(index);, +        referencedHeaders.set(index);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/BitArray.java, +  public BitArray() {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +import com.squareup.okhttp.internal.BitArray;, + * position moving forward.  When the array fills, it is doubled., +    HeaderEntry[] headerTable = new HeaderEntry[8];, +    // Using a BitArray as it has left-shift operator., +    BitArray referencedHeaders = new BitArray();, +    BitArray referencedStaticHeaders = new BitArray();, +      referencedStaticHeaders.clear();, +      referencedHeaders.clear();, +        if (referencedStaticHeaders.get(i)) {, +        if (referencedHeaders.get(i)) {, +          referencedStaticHeaders.set(index - headerCount);, +      } else if (!referencedHeaders.get(headerTableIndex(index))) {, +        referencedHeaders.set(headerTableIndex(index));, +        clearReferenceSet();, +        referencedHeaders.shiftLeft(entriesToEvict);, +          referencedHeaders.shiftLeft(headerTable.length);, +        referencedHeaders.set(index);, +        referencedHeaders.set(index);, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/BitArrayTest.java, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/BitArray.java, +  public BitArray() {, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/HpackDraft05.java, +import com.squareup.okhttp.internal.BitArray;, + * position moving forward.  When the array fills, it is doubled., +    HeaderEntry[] headerTable = new HeaderEntry[8];, +    // Using a BitArray as it has left-shift operator., +    BitArray referencedHeaders = new BitArray();, +    BitArray referencedStaticHeaders = new BitArray();, +      referencedStaticHeaders.clear();, +      referencedHeaders.clear();, +        if (referencedStaticHeaders.get(i)) {, +        if (referencedHeaders.get(i)) {, +          referencedStaticHeaders.set(index - headerCount);, +      } else if (!referencedHeaders.get(headerTableIndex(index))) {, +        referencedHeaders.set(headerTableIndex(index));, +        clearReferenceSet();, +        referencedHeaders.shiftLeft(entriesToEvict);, +          referencedHeaders.shiftLeft(headerTable.length);, +        referencedHeaders.set(index);, +        referencedHeaders.set(index);, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/BitArrayTest.java, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/HpackDraft05Test.java, +  @Test public void dynamicallyGrowsBeyond64Entries() throws IOException {, +    for (int i = 0; i < 256; i++) {, +    hpackReader.maxHeaderTableByteCount = 16384; // Lots of headers need more room!, +    assertEquals(256, hpackReader.headerCount);, +    assertHeaderReferenced(headerTableLength() - 1);, +    assertHeaderReferenced(headerTableLength() - hpackReader.headerCount);, +  @Test public void huffmanDecodingSupported() throws IOException {, +    assertTrue(hpackReader.referencedHeaders.get(index));, +    assertFalse(hpackReader.referencedHeaders.get(index));]