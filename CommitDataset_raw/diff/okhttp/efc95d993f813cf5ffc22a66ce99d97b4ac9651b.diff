[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java, +/**, + * Handler for mock server requests., + */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java, +/**, + * Handler for mock server requests., + */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +, +import static com.squareup.okhttp.mockwebserver.MockWebServer.ASCII;, +/**, + * A scripted response to be replayed by the mock web server., + */, +    /**, +     * Creates a new mock response with an empty body., +     */, +    /**, +     * Returns the HTTP response line, such as "HTTP/1.1 200 OK"., +     */, +    /**, +     * Returns the HTTP headers, such as "Content-Length: 0"., +     */, +     * Adds {@code header} as an HTTP header. For well-formed HTTP {@code, +     * header} should contain a name followed by a colon and a value., +     * Adds a new header with the name and value. This may be used to add, +     * multiple headers with the same name., +    /**, +     * Removes all headers named {@code name}., +     */, +    /**, +     * Returns the raw HTTP payload, or null if this response is streamed., +     */, +    /**, +     * Returns an input stream containing the raw HTTP payload., +     */, +    /**, +     * Sets the response body to the UTF-8 encoded bytes of {@code body}., +     */, +     * Sets the response body to {@code body}, chunked every {@code, +     * maxChunkSize} bytes., +                bytesOut.write(Integer.toHexString(chunkSize).getBytes(ASCII));, +                bytesOut.write("\r\n".getBytes(ASCII));, +                bytesOut.write("\r\n".getBytes(ASCII));, +            bytesOut.write("0\r\n\r\n".getBytes(ASCII)); // last chunk + empty trailer + crlf, +     * Sets the response body to the UTF-8 encoded bytes of {@code body},, +     * chunked every {@code maxChunkSize} bytes., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java, +/**, + * Handler for mock server requests., + */, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +, +import static com.squareup.okhttp.mockwebserver.MockWebServer.ASCII;, +/**, + * A scripted response to be replayed by the mock web server., + */, +    /**, +     * Creates a new mock response with an empty body., +     */, +    /**, +     * Returns the HTTP response line, such as "HTTP/1.1 200 OK"., +     */, +    /**, +     * Returns the HTTP headers, such as "Content-Length: 0"., +     */, +     * Adds {@code header} as an HTTP header. For well-formed HTTP {@code, +     * header} should contain a name followed by a colon and a value., +     * Adds a new header with the name and value. This may be used to add, +     * multiple headers with the same name., +    /**, +     * Removes all headers named {@code name}., +     */, +    /**, +     * Returns the raw HTTP payload, or null if this response is streamed., +     */, +    /**, +     * Returns an input stream containing the raw HTTP payload., +     */, +    /**, +     * Sets the response body to the UTF-8 encoded bytes of {@code body}., +     */, +     * Sets the response body to {@code body}, chunked every {@code, +     * maxChunkSize} bytes., +                bytesOut.write(Integer.toHexString(chunkSize).getBytes(ASCII));, +                bytesOut.write("\r\n".getBytes(ASCII));, +                bytesOut.write("\r\n".getBytes(ASCII));, +            bytesOut.write("0\r\n\r\n".getBytes(ASCII)); // last chunk + empty trailer + crlf, +     * Sets the response body to the UTF-8 encoded bytes of {@code body},, +     * chunked every {@code maxChunkSize} bytes., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +    static final String ASCII = "US-ASCII";, +    private final BlockingQueue<RecordedRequest> requestQueue, +            = new LinkedBlockingQueue<RecordedRequest>();, +        if (port == -1) {, +            throw new IllegalStateException("Cannot retrieve port before calling play()");, +        }, +     *, +     * non-loopback host name if it is known. Otherwise this returns ".local", +     * for this server's loopback name.]