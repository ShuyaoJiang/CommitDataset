[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +import javax.annotation.Nullable;, +import okhttp3.RecordingEventListener.RequestHeadersEnd;, +import okhttp3.RecordingEventListener.ResponseHeadersEnd;, +import org.hamcrest.BaseMatcher;, +import org.hamcrest.CoreMatchers;, +import org.hamcrest.Description;, +import org.hamcrest.Matcher;, +import static org.hamcrest.CoreMatchers.any;, +import static org.hamcrest.CoreMatchers.equalTo;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assume.assumeThat;, +  public static final Matcher<Response> anyResponse = CoreMatchers.any(Response.class);, +  private void assertSuccessfulEventOrder(Matcher<Response> responseMatcher) throws IOException {, +    assumeThat(response, responseMatcher);, +, +  private void assertBytesReadWritten(RecordingEventListener listener,, +      @Nullable Matcher<Long> requestHeaderLength, @Nullable Matcher<Long> requestBodyBytes,, +      @Nullable Matcher<Long> responseHeaderLength, @Nullable Matcher<Long> responseBodyBytes) {, +, +    if (requestHeaderLength != null) {, +      RequestHeadersEnd responseHeadersEnd = listener.removeUpToEvent(RequestHeadersEnd.class);, +      assertThat("request header length", responseHeadersEnd.headerLength, requestHeaderLength);, +    } else {, +      assertFalse("Found RequestHeadersEnd", listener.recordedEventTypes().contains("RequestHeadersEnd"));, +    }, +, +    if (requestBodyBytes != null) {, +      RequestBodyEnd responseBodyEnd = listener.removeUpToEvent(RequestBodyEnd.class);, +      assertThat("request body bytes", responseBodyEnd.bytesWritten, requestBodyBytes);, +    } else {, +      assertFalse("Found RequestBodyEnd", listener.recordedEventTypes().contains("RequestBodyEnd"));, +    }, +, +    if (responseHeaderLength != null) {, +      ResponseHeadersEnd responseHeadersEnd = listener.removeUpToEvent(ResponseHeadersEnd.class);, +      assertThat("response header length", responseHeadersEnd.headerLength, responseHeaderLength);, +    } else {, +      assertFalse("Found ResponseHeadersEnd", listener.recordedEventTypes().contains("ResponseHeadersEnd"));, +    }, +, +    if (responseBodyBytes != null) {, +      ResponseBodyEnd responseBodyEnd = listener.removeUpToEvent(ResponseBodyEnd.class);, +      assertThat("response body bytes", responseBodyEnd.bytesRead, responseBodyBytes);, +    } else {, +      assertFalse("Found ResponseBodyEnd", listener.recordedEventTypes().contains("ResponseBodyEnd"));, +    }, +  }, +, +  private Matcher<Long> greaterThan(final long value) {, +    return new BaseMatcher<Long>() {, +      @Override public void describeTo(Description description) {, +        description.appendText("> " + value);, +      }, +, +      @Override public boolean matches(Object o) {, +        return ((Long)o) > value;, +      }, +    };, +  }, +, +  private Matcher<Long> lessThan(final long value) {, +    return new BaseMatcher<Long>() {, +      @Override public void describeTo(Description description) {, +        description.appendText("< " + value);, +      }, +, +      @Override public boolean matches(Object o) {, +        return ((Long)o) < value;, +      }, +    };, +  }, +, +  private Matcher<Response> matchesProtocol(final Protocol protocol) {, +    return new BaseMatcher<Response>() {, +      @Override public void describeTo(Description description) {, +        description.appendText("is HTTP/2");, +      }, +, +      @Override public boolean matches(Object o) {, +        return ((Response)o).protocol == protocol;, +      }, +    };, +  }, +, +    assertSuccessfulEventOrder(matchesProtocol(Protocol.HTTP_2));, +, +    assertBytesReadWritten(listener, any(Long.class), null, greaterThan(0L),, +        equalTo(0L));, +    assertSuccessfulEventOrder(anyResponse);, +, +    assertBytesReadWritten(listener, any(Long.class), null, greaterThan(0L),, +        equalTo(3L));, +    assertSuccessfulEventOrder(anyResponse);, +, +    assertBytesReadWritten(listener, any(Long.class), null, greaterThan(0L),, +        equalTo(6L));, +    assertSuccessfulEventOrder(matchesProtocol(Protocol.HTTP_2));, +, +    assertBytesReadWritten(listener, any(Long.class), null, equalTo(0L),]