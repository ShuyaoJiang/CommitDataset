[+++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +  public void connect(int connectTimeout, int readTimeout, int writeTimeout,, +      TunnelRequest tunnelRequest) throws IOException {, +  private void upgradeToTls(TunnelRequest tunnelRequest, int readTimeout, int writeTimeout), +    if (requiresTunnel()) {, +  /**, +   * Returns true if the HTTP connection needs to tunnel one protocol over, +   * another, such as when using HTTPS through an HTTP proxy. When doing so,, +   * we must avoid buffering bytes intended for the higher-level protocol., +   */, +  public boolean requiresTunnel() {, +    return route.address.sslSocketFactory != null && route.proxy.type() == Proxy.Type.HTTP;, +  }, +, +  private void makeTunnel(TunnelRequest tunnelRequest, int readTimeout, int writeTimeout), +    Request request = tunnelRequest.getRequest();, +    String requestLine = tunnelRequest.requestLine();, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +  public void connect(int connectTimeout, int readTimeout, int writeTimeout,, +      TunnelRequest tunnelRequest) throws IOException {, +  private void upgradeToTls(TunnelRequest tunnelRequest, int readTimeout, int writeTimeout), +    if (requiresTunnel()) {, +  /**, +   * Returns true if the HTTP connection needs to tunnel one protocol over, +   * another, such as when using HTTPS through an HTTP proxy. When doing so,, +   * we must avoid buffering bytes intended for the higher-level protocol., +   */, +  public boolean requiresTunnel() {, +    return route.address.sslSocketFactory != null && route.proxy.type() == Proxy.Type.HTTP;, +  }, +, +  private void makeTunnel(TunnelRequest tunnelRequest, int readTimeout, int writeTimeout), +    Request request = tunnelRequest.getRequest();, +    String requestLine = tunnelRequest.requestLine();, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +public final class ConnectionPool {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +  public void connect(int connectTimeout, int readTimeout, int writeTimeout,, +      TunnelRequest tunnelRequest) throws IOException {, +  private void upgradeToTls(TunnelRequest tunnelRequest, int readTimeout, int writeTimeout), +    if (requiresTunnel()) {, +  /**, +   * Returns true if the HTTP connection needs to tunnel one protocol over, +   * another, such as when using HTTPS through an HTTP proxy. When doing so,, +   * we must avoid buffering bytes intended for the higher-level protocol., +   */, +  public boolean requiresTunnel() {, +    return route.address.sslSocketFactory != null && route.proxy.type() == Proxy.Type.HTTP;, +  }, +, +  private void makeTunnel(TunnelRequest tunnelRequest, int readTimeout, int writeTimeout), +    Request request = tunnelRequest.getRequest();, +    String requestLine = tunnelRequest.requestLine();, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +public final class ConnectionPool {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Route.java, +public final class Route {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +  public void connect(int connectTimeout, int readTimeout, int writeTimeout,, +      TunnelRequest tunnelRequest) throws IOException {, +  private void upgradeToTls(TunnelRequest tunnelRequest, int readTimeout, int writeTimeout), +    if (requiresTunnel()) {, +  /**, +   * Returns true if the HTTP connection needs to tunnel one protocol over, +   * another, such as when using HTTPS through an HTTP proxy. When doing so,, +   * we must avoid buffering bytes intended for the higher-level protocol., +   */, +  public boolean requiresTunnel() {, +    return route.address.sslSocketFactory != null && route.proxy.type() == Proxy.Type.HTTP;, +  }, +, +  private void makeTunnel(TunnelRequest tunnelRequest, int readTimeout, int writeTimeout), +    Request request = tunnelRequest.getRequest();, +    String requestLine = tunnelRequest.requestLine();, +++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java, +public final class ConnectionPool {, +++ b/okhttp/src/main/java/com/squareup/okhttp/Route.java, +public final class Route {, +++ b/okhttp/src/main/java/com/squareup/okhttp/TunnelRequest.java, +/*, + * Copyright (C) 2012 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.squareup.okhttp;, +, +import java.io.IOException;, +import java.net.URL;, +, +import static com.squareup.okhttp.internal.Util.getDefaultPort;]