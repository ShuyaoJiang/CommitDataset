[+++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +, +  /** Close and remove all connections in the pool. */, +  public void evictAll() {, +    List<Connection> connections;, +    synchronized (this) {, +      connections = new ArrayList<Connection>(this.connections);, +      this.connections.clear();, +    }, +, +    for (Connection connection : connections) {, +      Util.closeQuietly(connection);, +    }, +  }, +++ b/src/main/java/com/squareup/okhttp/ConnectionPool.java, +, +  /** Close and remove all connections in the pool. */, +  public void evictAll() {, +    List<Connection> connections;, +    synchronized (this) {, +      connections = new ArrayList<Connection>(this.connections);, +      this.connections.clear();, +    }, +, +    for (Connection connection : connections) {, +      Util.closeQuietly(connection);, +    }, +  }, +++ b/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +  @Test public void evictAllConnections() {, +    ConnectionPool pool = new ConnectionPool(10, KEEP_ALIVE_DURATION_MS);, +    pool.recycle(httpA);, +    Util.closeQuietly(httpA); // Include a closed connection in the pool., +    pool.recycle(httpB);, +    pool.maybeShare(spdyA);, +    assertEquals(3, pool.getConnectionCount());, +, +    pool.evictAll();, +    assertEquals(0, pool.getConnectionCount());, +  }, +]