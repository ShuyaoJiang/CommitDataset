[+++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    if (connected) throw new IllegalStateException("already connected");, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    if (connected) throw new IllegalStateException("already connected");, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Job.java, +import static com.squareup.okhttp.internal.http.StatusLine.HTTP_TEMP_REDIRECT;, +final class Job implements Runnable {, +, +        Request.Builder requestBuilder = request.newBuilder();, +        requestBuilder.header("Content-Type", contentType.toString());, +, +        long contentLength = body.contentLength();, +        if (contentLength != -1) {, +          requestBuilder.setContentLength(contentLength);, +          requestBuilder.removeHeader("Transfer-Encoding");, +        } else {, +          requestBuilder.setChunked();, +          requestBuilder.removeHeader("Content-Length");, +, +        request = requestBuilder.build();, +    return new HttpEngine(client, request, false, connection, null);, +    Proxy selectedProxy = engine.getRoute() != null, +        ? engine.getRoute().getProxy(), +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    if (connected) throw new IllegalStateException("already connected");, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Job.java, +import static com.squareup.okhttp.internal.http.StatusLine.HTTP_TEMP_REDIRECT;, +final class Job implements Runnable {, +, +        Request.Builder requestBuilder = request.newBuilder();, +        requestBuilder.header("Content-Type", contentType.toString());, +, +        long contentLength = body.contentLength();, +        if (contentLength != -1) {, +          requestBuilder.setContentLength(contentLength);, +          requestBuilder.removeHeader("Transfer-Encoding");, +        } else {, +          requestBuilder.setChunked();, +          requestBuilder.removeHeader("Content-Length");, +, +        request = requestBuilder.build();, +    return new HttpEngine(client, request, false, connection, null);, +    Proxy selectedProxy = engine.getRoute() != null, +        ? engine.getRoute().getProxy(), +++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java, +            contentLength = Long.parseLong(value);, +    public void removeHeader(String name) {, +      headers.removeAll(name);, +    }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java, +    if (connected) throw new IllegalStateException("already connected");, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/Job.java, +import static com.squareup.okhttp.internal.http.StatusLine.HTTP_TEMP_REDIRECT;, +final class Job implements Runnable {, +, +        Request.Builder requestBuilder = request.newBuilder();, +        requestBuilder.header("Content-Type", contentType.toString());, +, +        long contentLength = body.contentLength();, +        if (contentLength != -1) {, +          requestBuilder.setContentLength(contentLength);, +          requestBuilder.removeHeader("Transfer-Encoding");, +        } else {, +          requestBuilder.setChunked();, +          requestBuilder.removeHeader("Content-Length");, +, +        request = requestBuilder.build();, +    return new HttpEngine(client, request, false, connection, null);, +    Proxy selectedProxy = engine.getRoute() != null, +        ? engine.getRoute().getProxy(), +++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java, +            contentLength = Long.parseLong(value);, +    public void removeHeader(String name) {, +      headers.removeAll(name);, +    }, +, +++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java, +import com.squareup.okhttp.Route;, +  private Route route;, +  /**, +   * True if the request body must be completely buffered before transmission;, +   * false if it can be streamed. Buffering has two advantages: we don't need, +   * the content-length in advance and we can retransmit if necessary. The, +   * upside of streaming is that we can save memory., +   */, +  public final boolean bufferRequestBody;, +, +  public HttpEngine(OkHttpClient client, Request request, boolean bufferRequestBody,, +    this.bufferRequestBody = bufferRequestBody;, +    this.route = connection != null ? connection.getRoute() : null;, +    route = connection.getRoute();, +  /**, +   * Returns the route used to retrieve the response. Null if we haven't, +   * connected yet, or if no connection was necessary., +   */]