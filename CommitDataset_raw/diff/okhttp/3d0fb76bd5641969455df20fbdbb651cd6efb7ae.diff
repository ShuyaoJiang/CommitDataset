[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import java.net.ProtocolException;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +  static final Logger logger = Logger.getLogger(SpdyServer.class.getName());, +, +  private final SSLSocketFactory sslSocketFactory;, +  public SpdyServer(File baseDirectory, SSLSocketFactory sslSocketFactory) {, +      Socket socket = null;, +      try {, +        socket = serverSocket.accept();, +, +        SSLSocket sslSocket = doSsl(socket);, +        String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +        Protocol protocol = protocolString != null ? Protocol.get(protocolString) : null;, +        if (protocol == null || !spdyProtocols.contains(protocol)) {, +          throw new ProtocolException("Protocol " + protocol + " unsupported");, +        SpdyConnection spdyConnection = new SpdyConnection.Builder(false, sslSocket), +            .protocol(protocol), +            .handler(this), +            .build();, +        spdyConnection.sendConnectionPreface();, +      } catch (IOException e) {, +        logger.log(Level.INFO, "SpdyServer connection failure: " + e);, +        Util.closeQuietly(socket);, +      } catch (Exception e) {, +        logger.log(Level.WARNING, "SpdyServer unexpected failure", e);, +        Util.closeQuietly(socket);, +      }, +  private SSLSocket doSsl(Socket socket) throws IOException {, +    SSLSocket sslSocket = (SSLSocket) sslSocketFactory.createSocket(, +        socket, socket.getInetAddress().getHostAddress(), socket.getPort(), true);, +    try {, +        serveDirectory(stream, file.listFiles());, +    } catch (IOException e) {, +      System.out.println(e.getMessage());, +    }, +  private void serveDirectory(SpdyStream stream, File[] files) throws IOException {, +    for (File file : files) {, +      String target = file.isDirectory() ? (file.getName() + "/") : file.getName();, +      out.writeUtf8("<a href='" + target + "'>" + target + "</a><br>");, +    if (file.getName().endsWith(".css")) return "text/css";, +    if (file.getName().endsWith(".gif")) return "image/gif";, +    if (file.getName().endsWith(".html")) return "text/html";, +    if (file.getName().endsWith(".jpeg")) return "image/jpeg";, +    if (file.getName().endsWith(".jpg")) return "image/jpeg";, +    if (file.getName().endsWith(".js")) return "application/javascript";, +    if (file.getName().endsWith(".png")) return "image/png";, +    return "text/plain";, +    SpdyServer server = new SpdyServer(new File(args[0]),, +        SslContextBuilder.localhost().getSocketFactory());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import java.net.ProtocolException;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +  static final Logger logger = Logger.getLogger(SpdyServer.class.getName());, +, +  private final SSLSocketFactory sslSocketFactory;, +  public SpdyServer(File baseDirectory, SSLSocketFactory sslSocketFactory) {, +      Socket socket = null;, +      try {, +        socket = serverSocket.accept();, +, +        SSLSocket sslSocket = doSsl(socket);, +        String protocolString = Platform.get().getSelectedProtocol(sslSocket);, +        Protocol protocol = protocolString != null ? Protocol.get(protocolString) : null;, +        if (protocol == null || !spdyProtocols.contains(protocol)) {, +          throw new ProtocolException("Protocol " + protocol + " unsupported");, +        SpdyConnection spdyConnection = new SpdyConnection.Builder(false, sslSocket), +            .protocol(protocol), +            .handler(this), +            .build();, +        spdyConnection.sendConnectionPreface();, +      } catch (IOException e) {, +        logger.log(Level.INFO, "SpdyServer connection failure: " + e);, +        Util.closeQuietly(socket);, +      } catch (Exception e) {, +        logger.log(Level.WARNING, "SpdyServer unexpected failure", e);, +        Util.closeQuietly(socket);, +      }, +  private SSLSocket doSsl(Socket socket) throws IOException {, +    SSLSocket sslSocket = (SSLSocket) sslSocketFactory.createSocket(, +        socket, socket.getInetAddress().getHostAddress(), socket.getPort(), true);, +    try {, +        serveDirectory(stream, file.listFiles());, +    } catch (IOException e) {, +      System.out.println(e.getMessage());, +    }, +  private void serveDirectory(SpdyStream stream, File[] files) throws IOException {, +    for (File file : files) {, +      String target = file.isDirectory() ? (file.getName() + "/") : file.getName();, +      out.writeUtf8("<a href='" + target + "'>" + target + "</a><br>");, +    if (file.getName().endsWith(".css")) return "text/css";, +    if (file.getName().endsWith(".gif")) return "image/gif";, +    if (file.getName().endsWith(".html")) return "text/html";, +    if (file.getName().endsWith(".jpeg")) return "image/jpeg";, +    if (file.getName().endsWith(".jpg")) return "image/jpeg";, +    if (file.getName().endsWith(".js")) return "application/javascript";, +    if (file.getName().endsWith(".png")) return "image/png";, +    return "text/plain";]