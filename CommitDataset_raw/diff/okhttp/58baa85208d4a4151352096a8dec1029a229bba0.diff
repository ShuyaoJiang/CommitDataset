[+++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +  @Test public void put() throws IOException {, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +  @Test public void put() throws IOException {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +      @Override public long contentLength() throws IOException {, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +  @Test public void put() throws IOException {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +      @Override public long contentLength() throws IOException {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/MultipartBuilderTest.java, +    assertEquals(-1L, requestBody.contentLength());, +    assertEquals(-1L, requestBody.contentLength());, +    assertEquals(-1L, requestBody.contentLength());, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +  @Test public void put() throws IOException {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +      @Override public long contentLength() throws IOException {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/MultipartBuilderTest.java, +    assertEquals(-1L, requestBody.contentLength());, +    assertEquals(-1L, requestBody.contentLength());, +    assertEquals(-1L, requestBody.contentLength());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +  @Test public void crudVerbs() throws IOException {, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +  @Test public void put() throws IOException {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +      @Override public long contentLength() throws IOException {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/MultipartBuilderTest.java, +    assertEquals(-1L, requestBody.contentLength());, +    assertEquals(-1L, requestBody.contentLength());, +    assertEquals(-1L, requestBody.contentLength());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +  @Test public void crudVerbs() throws IOException {, +++ b/okhttp/src/main/java/com/squareup/okhttp/MultipartBuilder.java, +  // Parallel lists of nullable headers and non-null bodies., +  private final List<Headers> partHeaders = new ArrayList<>();, +    partHeaders.add(headers);, +  /** Assemble the specified parts into a request body. */, +  public RequestBody build() {, +    if (partHeaders.isEmpty()) {, +      throw new IllegalStateException("Multipart body must have at least one part.");, +    return new MultipartRequestBody(type, boundary, partHeaders, partBodies);, +  }, +, +  private static final class MultipartRequestBody extends RequestBody {, +    private final ByteString boundary;, +    private final MediaType contentType;, +    private final List<Headers> partHeaders;, +    private final List<RequestBody> partBodies;, +, +    public MultipartRequestBody(MediaType type, ByteString boundary, List<Headers> partHeaders,, +        List<RequestBody> partBodies) {, +      if (type == null) throw new NullPointerException("type == null");, +, +      this.boundary = boundary;, +      this.contentType = MediaType.parse(type + "; boundary=" + boundary.utf8());, +      this.partHeaders = Util.immutableList(partHeaders);, +      this.partBodies = Util.immutableList(partBodies);, +    }, +, +    @Override public MediaType contentType() {, +      return contentType;, +    }, +, +    @Override public long contentLength() throws IOException {, +      return -1L;, +    }, +, +    @Override public void writeTo(BufferedSink sink) throws IOException {, +      for (int p = 0, partCount = partHeaders.size(); p < partCount; p++) {, +        Headers headers = partHeaders.get(p);, +        RequestBody body = partBodies.get(p);, +, +          for (int h = 0, headerCount = headers.size(); h < headerCount; h++) {, +            sink.writeUtf8(headers.name(h)), +                .writeUtf8(headers.value(h)), +        partBodies.get(p).writeTo(sink);, +      }, +, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +  @Test public void put() throws IOException {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java, +      @Override public long contentLength() throws IOException {, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/MultipartBuilderTest.java, +    assertEquals(-1L, requestBody.contentLength());, +    assertEquals(-1L, requestBody.contentLength());, +    assertEquals(-1L, requestBody.contentLength());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +  @Test public void crudVerbs() throws IOException {, +++ b/okhttp/src/main/java/com/squareup/okhttp/MultipartBuilder.java, +  // Parallel lists of nullable headers and non-null bodies., +  private final List<Headers> partHeaders = new ArrayList<>();, +    partHeaders.add(headers);, +  /** Assemble the specified parts into a request body. */, +  public RequestBody build() {, +    if (partHeaders.isEmpty()) {, +      throw new IllegalStateException("Multipart body must have at least one part.");, +    return new MultipartRequestBody(type, boundary, partHeaders, partBodies);, +  }]