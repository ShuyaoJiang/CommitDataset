[+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +    serverListener.assertFailure(EOFException.class);, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +    serverListener.assertFailure(EOFException.class);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +    transmitter.initCallStackTrace(, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +    serverListener.assertFailure(EOFException.class);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +    transmitter.initCallStackTrace(, +++ b/okhttp/src/main/java/okhttp3/internal/Transmitter.java, +  public void initCallStackTrace(@Nullable Object callStackTrace) {, +  public void releaseStreamForException() {, +    streamAllocation.releaseStreamForException();, +  public boolean canRetry() {, +    return streamAllocation.canRetry();, +    try {, +    } catch (IOException e) {, +      streamAllocation.streamFailed(e);, +      throw e;, +    }, +    long contentLength = request.body().contentLength();, +    Sink rawRequestBody = streamAllocation.codec().createRequestBody(request, contentLength);, +    return new RequestBodySink(rawRequestBody, contentLength);, +    try {, +    } catch (IOException e) {, +      streamAllocation.streamFailed(e);, +      throw e;, +    }, +    try {, +    } catch (IOException e) {, +      streamAllocation.streamFailed(e);, +      throw e;, +    }, +    try {, +    } catch (IOException e) {, +      streamAllocation.streamFailed(e);, +      throw e;, +    }, +    try {, +    } catch (IOException e) {, +      streamAllocation.streamFailed(e);, +      throw e;, +    }, +    if (e != null) {, +      streamAllocation.streamFailed(e);, +    }, +      try {, +      } catch (IOException e) {, +        streamAllocation.streamFailed(e);, +        throw e;, +      }, +    }, +, +    @Override public void flush() throws IOException {, +      try {, +        super.flush();, +      } catch (IOException e) {, +        streamAllocation.streamFailed(e);, +        throw e;, +      }, +      try {, +      } catch (IOException e) {, +        streamAllocation.streamFailed(e);, +        throw e;, +      }, +++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java, +    serverListener.assertFailure(EOFException.class);, +++ b/okhttp/src/main/java/okhttp3/RealCall.java, +    transmitter.initCallStackTrace(, +++ b/okhttp/src/main/java/okhttp3/internal/Transmitter.java, +  public void initCallStackTrace(@Nullable Object callStackTrace) {, +  public void releaseStreamForException() {, +    streamAllocation.releaseStreamForException();, +  public boolean canRetry() {, +    return streamAllocation.canRetry();, +    try {, +    } catch (IOException e) {, +      streamAllocation.streamFailed(e);, +      throw e;, +    }, +    long contentLength = request.body().contentLength();, +    Sink rawRequestBody = streamAllocation.codec().createRequestBody(request, contentLength);, +    return new RequestBodySink(rawRequestBody, contentLength);, +    try {, +    } catch (IOException e) {, +      streamAllocation.streamFailed(e);, +      throw e;, +    }, +    try {, +    } catch (IOException e) {, +      streamAllocation.streamFailed(e);, +      throw e;, +    }, +    try {, +    } catch (IOException e) {, +      streamAllocation.streamFailed(e);, +      throw e;, +    }, +    try {]