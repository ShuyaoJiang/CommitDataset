[+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import org.junit.Ignore;, +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +  @Ignore("TODO(jwilson): reject parameters that use invalid characters"), +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +    assertEquals(Arrays.asList(, +        new Challenge("Other", singletonMap((String) null, "abc=="))),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import org.junit.Ignore;, +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +  @Ignore("TODO(jwilson): reject parameters that use invalid characters"), +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +    assertEquals(Arrays.asList(, +        new Challenge("Other", singletonMap((String) null, "abc=="))),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +import java.net.MalformedURLException;, +import java.net.UnknownHostException;, +    try {, +      new HttpUrl.Builder().scheme("http").toString();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("host == null", expected.getMessage());, +    try {, +      new HttpUrl.Builder().host("host").toString();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("scheme == null", expected.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import org.junit.Ignore;, +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +  @Ignore("TODO(jwilson): reject parameters that use invalid characters"), +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +    assertEquals(Arrays.asList(, +        new Challenge("Other", singletonMap((String) null, "abc=="))),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +import java.net.MalformedURLException;, +import java.net.UnknownHostException;, +    try {, +      new HttpUrl.Builder().scheme("http").toString();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("host == null", expected.getMessage());, +    try {, +      new HttpUrl.Builder().host("host").toString();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("scheme == null", expected.getMessage());, +++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java, +    assertEquals(Arrays.asList(new Challenge("Basic", "protected area")), response.challenges());, +    assertEquals(Arrays.asList(new Challenge("Bearer", "oauthed")), response.challenges());, +++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java, +import org.junit.Ignore;, +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +  @Ignore("TODO(jwilson): reject parameters that use invalid characters"), +    assertEquals(Arrays.asList(, +        new Challenge("Digest", Collections.<String, String>emptyMap())),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +    assertEquals(Arrays.asList(, +        new Challenge("Other", singletonMap((String) null, "abc=="))),, +        HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));, +++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java, +import java.net.MalformedURLException;, +import java.net.UnknownHostException;, +    try {, +      new HttpUrl.Builder().scheme("http").toString();, +      fail();, +    } catch (IllegalStateException expected) {, +      assertEquals("host == null", expected.getMessage());, +    try {, +      new HttpUrl.Builder().host("host").toString();, +      fail();]