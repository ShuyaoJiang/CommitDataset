[+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +, +  /** Response headers start, then the entire request body, then response headers end. */, +  @Test public void expectContinueStartsResponseHeadersEarly() throws Exception {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.EXPECT_CONTINUE));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .header("Expect", "100-continue"), +        .post(RequestBody.create(MediaType.get("text/plain"), "abc")), +        .build();, +, +    Call call = client.newCall(request);, +    call.execute();, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd", "ConnectStart",, +        "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd",, +        "ResponseHeadersStart", "RequestBodyStart", "RequestBodyEnd", "ResponseHeadersEnd",, +        "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +, +  /** Response headers start, then the entire request body, then response headers end. */, +  @Test public void expectContinueStartsResponseHeadersEarly() throws Exception {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.EXPECT_CONTINUE));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .header("Expect", "100-continue"), +        .post(RequestBody.create(MediaType.get("text/plain"), "abc")), +        .build();, +, +    Call call = client.newCall(request);, +    call.execute();, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd", "ConnectStart",, +        "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd",, +        "ResponseHeadersStart", "RequestBodyStart", "RequestBodyEnd", "ResponseHeadersEnd",, +        "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Exchange.java, +  public void responseHeadersStart() {, +  }, +, +  public @Nullable Response.Builder readResponseHeaders(boolean expectContinue) throws IOException {, +    try {, +++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java, +, +  /** Response headers start, then the entire request body, then response headers end. */, +  @Test public void expectContinueStartsResponseHeadersEarly() throws Exception {, +    server.enqueue(new MockResponse(), +        .setSocketPolicy(SocketPolicy.EXPECT_CONTINUE));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .header("Expect", "100-continue"), +        .post(RequestBody.create(MediaType.get("text/plain"), "abc")), +        .build();, +, +    Call call = client.newCall(request);, +    call.execute();, +, +    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd", "ConnectStart",, +        "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd",, +        "ResponseHeadersStart", "RequestBodyStart", "RequestBodyEnd", "ResponseHeadersEnd",, +        "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");, +    assertEquals(expectedEvents, listener.recordedEventTypes());, +  }, +++ b/okhttp/src/main/java/okhttp3/internal/connection/Exchange.java, +  public void responseHeadersStart() {, +  }, +, +  public @Nullable Response.Builder readResponseHeaders(boolean expectContinue) throws IOException {, +    try {, +++ b/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java, +    boolean responseHeadersStarted = false;, +        responseHeadersStarted = true;, +        exchange.responseHeadersStart();, +    if (!responseHeadersStarted) {, +      exchange.responseHeadersStart();, +    }, +]