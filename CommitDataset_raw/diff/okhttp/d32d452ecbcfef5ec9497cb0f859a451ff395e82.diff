[+++ b/README.md, +[Jetty-NPN][3] which requires OpenJDK 7., + [3]: https://github.com/jetty-project/jetty-npn, +++ b/README.md, +[Jetty-NPN][3] which requires OpenJDK 7., + [3]: https://github.com/jetty-project/jetty-npn, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import com.squareup.okhttp.internal.Platform;, +/** A basic SPDY/HTTP_2 server that serves the contents of a local directory. */, +  private final List<Protocol> spdyProtocols = Util.immutableList(Protocol.HTTP_2, Protocol.SPDY_3);, +, +  private Protocol protocol;, +      new SpdyConnection.Builder(false, socket).protocol(protocol).handler(this).build();, +    Platform.get().setNpnProtocols(sslSocket, spdyProtocols);, +    sslSocket.startHandshake();, +    String protocolString = Platform.get().getNpnSelectedProtocol(sslSocket);, +    protocol = protocolString != null ? Protocol.get(protocolString) : null;, +    if (protocol == null || !spdyProtocols.contains(protocol)) {, +      throw new IllegalStateException("Protocol " + protocol + " unsupported");, +++ b/README.md, +[Jetty-NPN][3] which requires OpenJDK 7., + [3]: https://github.com/jetty-project/jetty-npn, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import com.squareup.okhttp.internal.Platform;, +/** A basic SPDY/HTTP_2 server that serves the contents of a local directory. */, +  private final List<Protocol> spdyProtocols = Util.immutableList(Protocol.HTTP_2, Protocol.SPDY_3);, +, +  private Protocol protocol;, +      new SpdyConnection.Builder(false, socket).protocol(protocol).handler(this).build();, +    Platform.get().setNpnProtocols(sslSocket, spdyProtocols);, +    sslSocket.startHandshake();, +    String protocolString = Platform.get().getNpnSelectedProtocol(sslSocket);, +    protocol = protocolString != null ? Protocol.get(protocolString) : null;, +    if (protocol == null || !spdyProtocols.contains(protocol)) {, +      throw new IllegalStateException("Protocol " + protocol + " unsupported");, +++ b/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java, +import com.squareup.okhttp.internal.spdy.Http20Draft10;, +import java.util.logging.ConsoleHandler;, +import java.util.logging.Level;, +import java.util.logging.LogRecord;, +import java.util.logging.Logger;, +import java.util.logging.SimpleFormatter;, +  @Option(name = "--frames", description = "Log HTTP/2 frames to STDERR"), +  public boolean showHttp2Frames;, +, +    if (showHttp2Frames) {, +      enableHttp2FrameLogging();, +    }, +, +, +  private static void enableHttp2FrameLogging() {, +    Logger logger = Logger.getLogger(Http20Draft10.class.getName());, +    logger.setLevel(Level.FINE);, +    ConsoleHandler handler = new ConsoleHandler();, +    handler.setLevel(Level.FINE);, +    handler.setFormatter(new SimpleFormatter() {, +      @Override public String format(LogRecord record) {, +        return String.format("%s%n", record.getMessage());, +      }, +    });, +    logger.addHandler(handler);, +  }]