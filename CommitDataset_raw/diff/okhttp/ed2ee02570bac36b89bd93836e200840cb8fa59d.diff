[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import static com.squareup.okhttp.internal.Util.byteStringList;, +        byteStringList(":status", "404", ":version", "HTTP/1.1", "content-type", "text/plain");, +        byteStringList(":status", "200", ":version", "HTTP/1.1", "content-type",, +    stream.reply(, +        byteStringList(":status", "200", ":version", "HTTP/1.1", "content-type", contentType(file)),, +        true);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import static com.squareup.okhttp.internal.Util.byteStringList;, +        byteStringList(":status", "404", ":version", "HTTP/1.1", "content-type", "text/plain");, +        byteStringList(":status", "200", ":version", "HTTP/1.1", "content-type",, +    stream.reply(, +        byteStringList(":status", "200", ":version", "HTTP/1.1", "content-type", contentType(file)),, +        true);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import static com.squareup.okhttp.internal.Util.byteStringList;, +        byteStringList(":status", "404", ":version", "HTTP/1.1", "content-type", "text/plain");, +        byteStringList(":status", "200", ":version", "HTTP/1.1", "content-type",, +    stream.reply(, +        byteStringList(":status", "200", ":version", "HTTP/1.1", "content-type", contentType(file)),, +        true);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] NPN_PROTOCOLS = joinNpnProtocols(HTTP_20_DRAFT_09, SPDY3, HTTP_11);, +, +  private static byte[] joinNpnProtocols(byte[]... protocols) {, +    try {, +      ByteArrayOutputStream baos = new ByteArrayOutputStream();, +      for (byte[] protocol : protocols) {, +        baos.write(protocol.length);, +        baos.write(protocol);, +      }, +      return baos.toByteArray();, +    } catch (IOException e) {, +      throw new AssertionError(e);, +    }, +  }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import static com.squareup.okhttp.internal.Util.byteStringList;, +        byteStringList(":status", "404", ":version", "HTTP/1.1", "content-type", "text/plain");, +        byteStringList(":status", "200", ":version", "HTTP/1.1", "content-type",, +    stream.reply(, +        byteStringList(":status", "200", ":version", "HTTP/1.1", "content-type", contentType(file)),, +        true);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] NPN_PROTOCOLS = joinNpnProtocols(HTTP_20_DRAFT_09, SPDY3, HTTP_11);, +, +  private static byte[] joinNpnProtocols(byte[]... protocols) {, +    try {, +      ByteArrayOutputStream baos = new ByteArrayOutputStream();, +      for (byte[] protocol : protocols) {, +        baos.write(protocol.length);, +        baos.write(protocol);, +      }, +      return baos.toByteArray();, +    } catch (IOException e) {, +      throw new AssertionError(e);, +    }, +  }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/ByteString.java, +  public static ByteString concat(ByteString... byteStrings) {, +    int size = 0;, +    for (ByteString byteString : byteStrings) {, +      size += byteString.size();, +    }, +    byte[] result = new byte[size];, +    int pos = 0;, +    for (ByteString byteString : byteStrings) {, +      System.arraycopy(byteString.data, 0, result, pos, byteString.size());, +      pos += byteString.size();, +    }, +    return ByteString.of(result);, +  }, +, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import static com.squareup.okhttp.internal.Util.byteStringList;, +        byteStringList(":status", "404", ":version", "HTTP/1.1", "content-type", "text/plain");, +        byteStringList(":status", "200", ":version", "HTTP/1.1", "content-type",, +    stream.reply(, +        byteStringList(":status", "200", ":version", "HTTP/1.1", "content-type", contentType(file)),, +        true);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +  private static final byte[] NPN_PROTOCOLS = joinNpnProtocols(HTTP_20_DRAFT_09, SPDY3, HTTP_11);, +, +  private static byte[] joinNpnProtocols(byte[]... protocols) {, +    try {, +      ByteArrayOutputStream baos = new ByteArrayOutputStream();, +      for (byte[] protocol : protocols) {, +        baos.write(protocol.length);, +        baos.write(protocol);, +      }, +      return baos.toByteArray();, +    } catch (IOException e) {, +      throw new AssertionError(e);, +    }, +  }, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/ByteString.java]