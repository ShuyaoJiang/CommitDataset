[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +  @Test public void byteArrayRange() throws Exception {, +    MediaType contentType = MediaType.parse("text/plain");, +    RequestBody body = RequestBody.create(contentType, ".abcd".getBytes(Util.UTF_8), 1, 3);, +    assertEquals(contentType, body.contentType());, +    assertEquals(3, body.contentLength());, +    assertEquals("616263", bodyToHex(body));, +    assertEquals("Retransmit body", "616263", bodyToHex(body));, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +  @Test public void byteArrayRange() throws Exception {, +    MediaType contentType = MediaType.parse("text/plain");, +    RequestBody body = RequestBody.create(contentType, ".abcd".getBytes(Util.UTF_8), 1, 3);, +    assertEquals(contentType, body.contentType());, +    assertEquals(3, body.contentLength());, +    assertEquals("616263", bodyToHex(body));, +    assertEquals("Retransmit body", "616263", bodyToHex(body));, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +  // NOTE: Fields are named 'client' and 'server' for cognitive simplicity. This differentiation has, +  private boolean clientConnectionCloseThrows;, +    String url = "http://example.com/websocket";, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener, url) {, +        if (clientConnectionCloseThrows) {, +          throw new IOException("Oops!");, +        }, +    server = new RealWebSocket(false, client2Server, server2client, random, serverListener, url) {, +, +  @Test public void peerConnectionCloseThrowingDoesNotPropagate() throws IOException {, +    clientConnectionCloseThrows = true;, +, +    server.close(1000, "Bye!");, +    client.readMessage();, +    clientListener.assertClose(1000, "Bye!");, +    assertTrue(clientConnectionClosed);, +, +    server.readMessage();, +    serverListener.assertClose(1000, "Bye!");, +  }, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +  @Test public void byteArrayRange() throws Exception {, +    MediaType contentType = MediaType.parse("text/plain");, +    RequestBody body = RequestBody.create(contentType, ".abcd".getBytes(Util.UTF_8), 1, 3);, +    assertEquals(contentType, body.contentType());, +    assertEquals(3, body.contentLength());, +    assertEquals("616263", bodyToHex(body));, +    assertEquals("Retransmit body", "616263", bodyToHex(body));, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +  // NOTE: Fields are named 'client' and 'server' for cognitive simplicity. This differentiation has, +  private boolean clientConnectionCloseThrows;, +    String url = "http://example.com/websocket";, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener, url) {, +        if (clientConnectionCloseThrows) {, +          throw new IOException("Oops!");, +        }, +    server = new RealWebSocket(false, client2Server, server2client, random, serverListener, url) {, +, +  @Test public void peerConnectionCloseThrowingDoesNotPropagate() throws IOException {, +    clientConnectionCloseThrows = true;, +, +    server.close(1000, "Bye!");, +    client.readMessage();, +    clientListener.assertClose(1000, "Bye!");, +    assertTrue(clientConnectionClosed);, +, +    server.readMessage();, +    serverListener.assertClose(1000, "Bye!");, +  }, +++ b/okhttp/src/main/java/com/squareup/okhttp/RequestBody.java, +    return create(contentType, content, 0, content.length);, +  }, +  /** Returns a new request body that transmits {@code content}. */, +  public static RequestBody create(final MediaType contentType, final byte[] content,, +      final int offset, final int byteCount) {, +    if (content == null) throw new NullPointerException("content == null");, +    Util.checkOffsetAndCount(content.length, offset, byteCount);, +        return byteCount;, +        sink.write(content, offset, byteCount);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java, +  @Test public void byteArrayRange() throws Exception {, +    MediaType contentType = MediaType.parse("text/plain");, +    RequestBody body = RequestBody.create(contentType, ".abcd".getBytes(Util.UTF_8), 1, 3);, +    assertEquals(contentType, body.contentType());, +    assertEquals(3, body.contentLength());, +    assertEquals("616263", bodyToHex(body));, +    assertEquals("Retransmit body", "616263", bodyToHex(body));, +  }, +, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java, +  // NOTE: Fields are named 'client' and 'server' for cognitive simplicity. This differentiation has, +  private boolean clientConnectionCloseThrows;, +    String url = "http://example.com/websocket";, +    client = new RealWebSocket(true, server2client, client2Server, random, clientListener, url) {, +        if (clientConnectionCloseThrows) {, +          throw new IOException("Oops!");, +        }]