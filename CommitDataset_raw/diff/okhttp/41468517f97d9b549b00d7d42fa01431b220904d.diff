[+++ b/okhttp/src/test/java/com/squareup/okhttp/internal/http/HttpOverSpdyTest.java, +, +import java.io.DataInputStream;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.LinkedBlockingQueue;, +import java.util.concurrent.ThreadPoolExecutor;, +import java.util.concurrent.TimeUnit;, +import org.junit.Ignore;, +  @Test @Ignore public void synchronousSpdyRequest() throws Exception {, +    server.enqueue(new MockResponse().setBody("A"));, +    server.enqueue(new MockResponse().setBody("A"));, +    server.play();, +, +    ExecutorService executor = Executors.newCachedThreadPool();, +    CountDownLatch countDownLatch = new CountDownLatch(2);, +    executor.execute(new SpdyRequest("/r1", countDownLatch));, +    executor.execute(new SpdyRequest("/r2", countDownLatch));, +    countDownLatch.await();, +    assertEquals(0, server.takeRequest().getSequenceNumber());, +    assertEquals(1, server.takeRequest().getSequenceNumber());, +  }, +, +, +  class SpdyRequest implements Runnable {, +    String path;, +    CountDownLatch countDownLatch;, +    public SpdyRequest(String path, CountDownLatch countDownLatch) {, +      this.path = path;, +      this.countDownLatch = countDownLatch;, +    }, +, +    @Override public void run() {, +      try {, +        HttpURLConnection conn = null;, +        conn = (HttpURLConnection) client.open(server.getUrl(path));, +        assertEquals("A", readAscii(conn.getInputStream(), 1));, +        countDownLatch.countDown();, +      } catch (Exception e) {, +        throw new RuntimeException(e);, +      }, +    }, +  }]