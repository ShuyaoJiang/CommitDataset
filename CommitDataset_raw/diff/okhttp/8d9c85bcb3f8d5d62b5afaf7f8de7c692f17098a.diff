[+++ b/CHANGELOG.md, + * Fix: Ensure `null` is never returned from a connection's `getHeaderFields()`., +++ b/CHANGELOG.md, + * Fix: Ensure `null` is never returned from a connection's `getHeaderFields()`., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.NamedRunnable;, +    executor = Executors.newCachedThreadPool(Util.threadFactory("MockWebServer", false));, +    executor.execute(new NamedRunnable("MockWebServer %s", port) {, +      @Override protected void execute() {, +    });, +    executor.execute(new NamedRunnable("MockWebServer %s", raw.getRemoteSocketAddress()) {, +      @Override protected void execute() {, +    });, +++ b/CHANGELOG.md, + * Fix: Ensure `null` is never returned from a connection's `getHeaderFields()`., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.NamedRunnable;, +    executor = Executors.newCachedThreadPool(Util.threadFactory("MockWebServer", false));, +    executor.execute(new NamedRunnable("MockWebServer %s", port) {, +      @Override protected void execute() {, +    });, +    executor.execute(new NamedRunnable("MockWebServer %s", raw.getRemoteSocketAddress()) {, +      @Override protected void execute() {, +    });, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +  public static ThreadFactory threadFactory(final String name, final boolean daemon) {, +        result.setDaemon(daemon);, +++ b/CHANGELOG.md, + * Fix: Ensure `null` is never returned from a connection's `getHeaderFields()`., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.NamedRunnable;, +    executor = Executors.newCachedThreadPool(Util.threadFactory("MockWebServer", false));, +    executor.execute(new NamedRunnable("MockWebServer %s", port) {, +      @Override protected void execute() {, +    });, +    executor.execute(new NamedRunnable("MockWebServer %s", raw.getRemoteSocketAddress()) {, +      @Override protected void execute() {, +    });, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +  public static ThreadFactory threadFactory(final String name, final boolean daemon) {, +        result.setDaemon(daemon);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +      Util.threadFactory("OkHttp SpdyConnection", true));, +    new Thread(new Reader()).start(); // Not a daemon thread., +    executor.submit(new NamedRunnable("OkHttp %s stream %d", hostName, streamId) {, +    executor.submit(new NamedRunnable("OkHttp %s stream %d", hostName, streamId) {, +    executor.submit(new NamedRunnable("OkHttp %s ping %08x%08x",, +  private class Reader extends NamedRunnable implements FrameReader.Handler {, +    private Reader() {, +      super("OkHttp %s", hostName);, +    }, +, +    @Override protected void execute() {, +          executor.submit(new NamedRunnable("OkHttp %s stream %d", hostName, streamId) {, +++ b/CHANGELOG.md, + * Fix: Ensure `null` is never returned from a connection's `getHeaderFields()`., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.NamedRunnable;, +    executor = Executors.newCachedThreadPool(Util.threadFactory("MockWebServer", false));, +    executor.execute(new NamedRunnable("MockWebServer %s", port) {, +      @Override protected void execute() {, +    });, +    executor.execute(new NamedRunnable("MockWebServer %s", raw.getRemoteSocketAddress()) {, +      @Override protected void execute() {, +    });, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +  public static ThreadFactory threadFactory(final String name, final boolean daemon) {, +        result.setDaemon(daemon);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +      Util.threadFactory("OkHttp SpdyConnection", true));, +    new Thread(new Reader()).start(); // Not a daemon thread., +    executor.submit(new NamedRunnable("OkHttp %s stream %d", hostName, streamId) {, +    executor.submit(new NamedRunnable("OkHttp %s stream %d", hostName, streamId) {, +    executor.submit(new NamedRunnable("OkHttp %s ping %08x%08x",, +  private class Reader extends NamedRunnable implements FrameReader.Handler {, +    private Reader() {, +      super("OkHttp %s", hostName);, +    }, +, +    @Override protected void execute() {, +          executor.submit(new NamedRunnable("OkHttp %s stream %d", hostName, streamId) {, +++ b/okhttp-protocols/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java, +  private final Executor executor = Executors.newCachedThreadPool(, +      Util.threadFactory("MockSpdyPeer", false));, +++ b/CHANGELOG.md, + * Fix: Ensure `null` is never returned from a connection's `getHeaderFields()`., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import com.squareup.okhttp.internal.NamedRunnable;, +    executor = Executors.newCachedThreadPool(Util.threadFactory("MockWebServer", false));, +    executor.execute(new NamedRunnable("MockWebServer %s", port) {, +      @Override protected void execute() {, +    });, +    executor.execute(new NamedRunnable("MockWebServer %s", raw.getRemoteSocketAddress()) {, +      @Override protected void execute() {, +    });, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/Util.java, +  public static ThreadFactory threadFactory(final String name, final boolean daemon) {, +        result.setDaemon(daemon);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java, +      Util.threadFactory("OkHttp SpdyConnection", true));]