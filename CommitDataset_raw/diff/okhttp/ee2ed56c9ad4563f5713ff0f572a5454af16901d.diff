[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingOkAuthenticator.java, +  public final List<Response> responses = new ArrayList<Response>();, +  public final List<Proxy> proxies = new ArrayList<Proxy>();, +  public Response onlyResponse() {, +    if (responses.size() != 1) throw new IllegalStateException();, +    return responses.get(0);, +  }, +, +  public Proxy onlyProxy() {, +    if (proxies.size() != 1) throw new IllegalStateException();, +    return proxies.get(0);, +  }, +, +    responses.add(response);, +    proxies.add(proxy);, +    responses.add(response);, +    proxies.add(proxy);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingOkAuthenticator.java, +  public final List<Response> responses = new ArrayList<Response>();, +  public final List<Proxy> proxies = new ArrayList<Proxy>();, +  public Response onlyResponse() {, +    if (responses.size() != 1) throw new IllegalStateException();, +    return responses.get(0);, +  }, +, +  public Proxy onlyProxy() {, +    if (proxies.size() != 1) throw new IllegalStateException();, +    return proxies.get(0);, +  }, +, +    responses.add(response);, +    proxies.add(proxy);, +    responses.add(response);, +    proxies.add(proxy);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +import com.squareup.okhttp.Challenge;, +import com.squareup.okhttp.Response;, +    assertEquals(Proxy.NO_PROXY, authenticator.onlyProxy());, +    Response response = authenticator.onlyResponse();, +    assertEquals("/private", response.request().url().getPath());, +    assertEquals(Arrays.asList(new Challenge("Basic", "protected area")), response.challenges());, +    Response response = authenticator.onlyResponse();, +    assertEquals("/private", response.request().url().getPath());, +    assertEquals(Arrays.asList(new Challenge("Bearer", "oauthed")), response.challenges());, +  }, +, +  @Test public void authenticateCallsTrackedAsRedirects() throws Exception {, +    server.enqueue(new MockResponse(), +        .setResponseCode(302), +        .addHeader("Location: /b"));, +    server.enqueue(new MockResponse(), +        .setResponseCode(401), +        .addHeader("WWW-Authenticate: Basic realm=\"protected area\""));, +    server.enqueue(new MockResponse().setBody("c"));, +    server.play();, +, +    RecordingOkAuthenticator authenticator = new RecordingOkAuthenticator(, +        Credentials.basic("jesse", "peanutbutter"));, +    client.setAuthenticator(authenticator);, +    assertContent("c", client.open(server.getUrl("/a")));, +, +    Response challengeResponse = authenticator.responses.get(0);, +    assertEquals("/b", challengeResponse.request().url().getPath());, +, +    Response redirectedBy = challengeResponse.redirectedBy();, +    assertEquals("/a", redirectedBy.request().url().getPath());, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingOkAuthenticator.java, +  public final List<Response> responses = new ArrayList<Response>();, +  public final List<Proxy> proxies = new ArrayList<Proxy>();, +  public Response onlyResponse() {, +    if (responses.size() != 1) throw new IllegalStateException();, +    return responses.get(0);, +  }, +, +  public Proxy onlyProxy() {, +    if (proxies.size() != 1) throw new IllegalStateException();, +    return proxies.get(0);, +  }, +, +    responses.add(response);, +    proxies.add(proxy);, +    responses.add(response);, +    proxies.add(proxy);, +++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java, +import com.squareup.okhttp.Challenge;, +import com.squareup.okhttp.Response;, +    assertEquals(Proxy.NO_PROXY, authenticator.onlyProxy());, +    Response response = authenticator.onlyResponse();, +    assertEquals("/private", response.request().url().getPath());, +    assertEquals(Arrays.asList(new Challenge("Basic", "protected area")), response.challenges());, +    Response response = authenticator.onlyResponse();, +    assertEquals("/private", response.request().url().getPath());, +    assertEquals(Arrays.asList(new Challenge("Bearer", "oauthed")), response.challenges());, +  }, +, +  @Test public void authenticateCallsTrackedAsRedirects() throws Exception {, +    server.enqueue(new MockResponse(), +        .setResponseCode(302), +        .addHeader("Location: /b"));, +    server.enqueue(new MockResponse()]