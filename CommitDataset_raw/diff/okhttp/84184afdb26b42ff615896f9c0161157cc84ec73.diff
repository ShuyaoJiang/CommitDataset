[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import okio.BufferedSink;, +import okio.Okio;, +    BufferedSink out = Okio.buffer(stream.getSink());, +    out.writeUtf8("Not found: " + path);, +    BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeUtf8("<a href='" + file + "'>" + file + "</a><br>");, +    out.close();, +    BufferedSink out = Okio.buffer(stream.getSink());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import okio.BufferedSink;, +import okio.Okio;, +    BufferedSink out = Okio.buffer(stream.getSink());, +    out.writeUtf8("Not found: " + path);, +    BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeUtf8("<a href='" + file + "'>" + file + "</a><br>");, +    out.close();, +    BufferedSink out = Okio.buffer(stream.getSink());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.BufferedSink;, +        BufferedSink sink = Okio.buffer(stream.getSink());, +        sink.write(body);, +        sink.close();, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import okio.BufferedSink;, +import okio.Okio;, +    BufferedSink out = Okio.buffer(stream.getSink());, +    out.writeUtf8("Not found: " + path);, +    BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeUtf8("<a href='" + file + "'>" + file + "</a><br>");, +    out.close();, +    BufferedSink out = Okio.buffer(stream.getSink());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.BufferedSink;, +        BufferedSink sink = Okio.buffer(stream.getSink());, +        sink.write(body);, +        sink.close();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.OkBuffer;, +      OkBuffer buffer = new OkBuffer();, +      body.writeTo(buffer);, +      return new String(buffer.readByteString((int) buffer.byteCount()).toByteArray(),, +          body.contentType().charset());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import okio.BufferedSink;, +import okio.Okio;, +    BufferedSink out = Okio.buffer(stream.getSink());, +    out.writeUtf8("Not found: " + path);, +    BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeUtf8("<a href='" + file + "'>" + file + "</a><br>");, +    out.close();, +    BufferedSink out = Okio.buffer(stream.getSink());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.BufferedSink;, +        BufferedSink sink = Okio.buffer(stream.getSink());, +        sink.write(body);, +        sink.close();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.OkBuffer;, +      OkBuffer buffer = new OkBuffer();, +      body.writeTo(buffer);, +      return new String(buffer.readByteString((int) buffer.byteCount()).toByteArray(),, +          body.contentType().charset());, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +import okio.OkBuffer;, +  void data(boolean outFinished, int streamId, OkBuffer source, int byteCount) throws IOException;, +  void data(boolean outFinished, int streamId, OkBuffer source) throws IOException;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/internal/spdy/SpdyServer.java, +import okio.BufferedSink;, +import okio.Okio;, +    BufferedSink out = Okio.buffer(stream.getSink());, +    out.writeUtf8("Not found: " + path);, +    BufferedSink out = Okio.buffer(stream.getSink());, +      out.writeUtf8("<a href='" + file + "'>" + file + "</a><br>");, +    out.close();, +    BufferedSink out = Okio.buffer(stream.getSink());, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +import okio.BufferedSink;, +        BufferedSink sink = Okio.buffer(stream.getSink());, +        sink.write(body);, +        sink.close();, +++ b/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java, +import okio.OkBuffer;, +      OkBuffer buffer = new OkBuffer();, +      body.writeTo(buffer);, +      return new String(buffer.readByteString((int) buffer.byteCount()).toByteArray(),, +          body.contentType().charset());, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +import okio.OkBuffer;, +  void data(boolean outFinished, int streamId, OkBuffer source, int byteCount) throws IOException;, +  void data(boolean outFinished, int streamId, OkBuffer source) throws IOException;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft09.java, +  @Override public int maxFrameSize() {, +    return 16383;, +  }, +, +    private boolean closed;, +      if (closed) throw new IOException("closed");, +      if (closed) throw new IOException("closed");, +      if (closed) throw new IOException("closed");]