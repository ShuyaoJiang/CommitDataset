[+++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +import java.util.concurrent.atomic.AtomicReference;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +      call.execute(); // we want this call to throw a SocketTimeoutException, +  @Test public void chainCanCancelCall() throws Exception {, +    final AtomicReference<Call> callRef = new AtomicReference<>();, +, +    Interceptor interceptor = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        Call call = chain.call();, +        callRef.set(call);, +, +        assertFalse(call.isCanceled());, +        call.cancel();, +        assertTrue(call.isCanceled());, +, +        return chain.proceed(chain.request());, +      }, +    };, +, +    client = client.newBuilder(), +        .addInterceptor(interceptor), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Call call = client.newCall(request);, +, +    try {, +      call.execute();, +      fail();, +    } catch (IOException expected) {, +    }, +, +    assertSame(call, callRef.get());, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +import java.util.concurrent.atomic.AtomicReference;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +      call.execute(); // we want this call to throw a SocketTimeoutException, +  @Test public void chainCanCancelCall() throws Exception {, +    final AtomicReference<Call> callRef = new AtomicReference<>();, +, +    Interceptor interceptor = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        Call call = chain.call();, +        callRef.set(call);, +, +        assertFalse(call.isCanceled());, +        call.cancel();, +        assertTrue(call.isCanceled());, +, +        return chain.proceed(chain.request());, +      }, +    };, +, +    client = client.newBuilder(), +        .addInterceptor(interceptor), +        .build();, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +    Call call = client.newCall(request);, +, +    try {, +      call.execute();, +      fail();, +    } catch (IOException expected) {, +    }, +, +    assertSame(call, callRef.get());, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Interceptor.java, +    Call call();, +, +++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java, +import java.util.concurrent.atomic.AtomicReference;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +      call.execute(); // we want this call to throw a SocketTimeoutException, +  @Test public void chainCanCancelCall() throws Exception {, +    final AtomicReference<Call> callRef = new AtomicReference<>();, +, +    Interceptor interceptor = new Interceptor() {, +      @Override public Response intercept(Chain chain) throws IOException {, +        Call call = chain.call();, +        callRef.set(call);, +, +        assertFalse(call.isCanceled());, +        call.cancel();, +        assertTrue(call.isCanceled());, +, +        return chain.proceed(chain.request());, +      }]