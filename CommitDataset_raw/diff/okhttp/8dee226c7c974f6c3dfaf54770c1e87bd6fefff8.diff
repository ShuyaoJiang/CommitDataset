[+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      // TODO: no ":version" header for HTTP/2.0, only SPDY., +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      // TODO: no ":version" header for HTTP/2.0, only SPDY., +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +  void connectionHeader() throws IOException;, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      // TODO: no ":version" header for HTTP/2.0, only SPDY., +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +  void connectionHeader() throws IOException;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Hpack.java, +import java.io.OutputStream;, +    private final OutputStream out;, +    Writer(OutputStream out) {, +        out.write(0x60); // Literal Header without Indexing - New Name., +        out.write(bits | value);, +      out.write(bits | prefixMask);, +        out.write(b | 0x80);, +      out.write(value);, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      // TODO: no ":version" header for HTTP/2.0, only SPDY., +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +  void connectionHeader() throws IOException;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Hpack.java, +import java.io.OutputStream;, +    private final OutputStream out;, +    Writer(OutputStream out) {, +        out.write(0x60); // Literal Header without Indexing - New Name., +        out.write(bits | value);, +      out.write(bits | prefixMask);, +        out.write(b | 0x80);, +      out.write(value);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft04.java, +import java.io.ByteArrayOutputStream;, +    return new Writer(out, client);, +    private final boolean client;, +      this.client = client;, +      if (client) return; // Nothing to read; servers don't send connection headers!, +    private final boolean client;, +    private final ByteArrayOutputStream hpackBuffer;, +    private final Hpack.Writer hpackWriter;, +    Writer(OutputStream out, boolean client) {, +      this.client = client;, +      this.hpackBuffer = new ByteArrayOutputStream();, +      this.hpackWriter = new Hpack.Writer(hpackBuffer);, +    @Override public synchronized void connectionHeader() throws IOException {, +      if (!client) return; // Nothing to write; servers don't send connection headers!, +      out.write(CONNECTION_HEADER);, +      if (inFinished) throw new UnsupportedOperationException();, +      headers(outFinished, streamId, priority, nameValueBlock);, +      headers(outFinished, streamId, -1, nameValueBlock);, +      headers(false, streamId, -1, nameValueBlock);, +    }, +, +    private void headers(boolean outFinished, int streamId, int priority,, +        List<String> nameValueBlock) throws IOException {, +      hpackBuffer.reset();, +      hpackWriter.writeHeaders(nameValueBlock);, +      int type = TYPE_HEADERS;, +      int length = hpackBuffer.size();, +      int flags = FLAG_END_HEADERS;, +      if (outFinished) flags |= FLAG_END_STREAM;, +      if (priority != -1) flags |= FLAG_PRIORITY;, +      out.writeInt((length & 0xffff) << 16 | (type & 0xff) << 8 | (flags & 0xff));, +      out.writeInt(streamId & 0x7fffffff);, +      if (priority != -1) out.writeInt(priority & 0x7fffffff);, +      hpackBuffer.writeTo(out);, +      int type = TYPE_DATA;, +      int flags = 0;, +      if (outFinished) flags |= FLAG_END_STREAM;, +      out.writeInt((byteCount & 0xffff) << 16 | (type & 0xff) << 8 | (flags & 0xff));, +      out.writeInt(streamId & 0x7fffffff);, +      out.write(data, offset, byteCount);, +      int type = TYPE_SETTINGS;, +      int length = settings.size() * 8;, +      int flags = 0;, +      int streamId = 0;, +      out.writeInt((length & 0xffff) << 16 | (type & 0xff) << 8 | (flags & 0xff));, +      out.writeInt(streamId & 0x7fffffff);, +      for (int i = 0; i < Settings.COUNT; i++) {, +        if (!settings.isSet(i)) continue;, +        out.writeInt(i & 0xffffff);, +        out.writeInt(settings.get(i));, +      }, +++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java, +      // TODO: no ":version" header for HTTP/2.0, only SPDY., +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/FrameWriter.java, +  void connectionHeader() throws IOException;, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Hpack.java, +import java.io.OutputStream;, +    private final OutputStream out;, +    Writer(OutputStream out) {, +        out.write(0x60); // Literal Header without Indexing - New Name., +        out.write(bits | value);, +      out.write(bits | prefixMask);, +        out.write(b | 0x80);, +      out.write(value);, +++ b/okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/Http20Draft04.java, +import java.io.ByteArrayOutputStream;, +    return new Writer(out, client);]