[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static org.junit.Assert.assertArrayEquals;, +    Response response = client.newCall(headRequest).execute();, +    assertEquals(200, response.code());, +    assertArrayEquals(new byte[0], response.body().bytes());, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static org.junit.Assert.assertArrayEquals;, +    Response response = client.newCall(headRequest).execute();, +    assertEquals(200, response.code());, +    assertArrayEquals(new byte[0], response.body().bytes());, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +    String contentType = response.header("Content-Type");, +    long contentLength = response.body().contentLength();, +        .body(new RealResponseBody(contentType, contentLength, Okio.buffer(cacheWritingSource))), +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static org.junit.Assert.assertArrayEquals;, +    Response response = client.newCall(headRequest).execute();, +    assertEquals(200, response.code());, +    assertArrayEquals(new byte[0], response.body().bytes());, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +    String contentType = response.header("Content-Type");, +    long contentLength = response.body().contentLength();, +        .body(new RealResponseBody(contentType, contentLength, Okio.buffer(cacheWritingSource))), +++ b/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java, +      String contentType = networkResponse.header("Content-Type");, +      responseBuilder.body(new RealResponseBody(contentType, -1L, Okio.buffer(responseBody)));, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static org.junit.Assert.assertArrayEquals;, +    Response response = client.newCall(headRequest).execute();, +    assertEquals(200, response.code());, +    assertArrayEquals(new byte[0], response.body().bytes());, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +    String contentType = response.header("Content-Type");, +    long contentLength = response.body().contentLength();, +        .body(new RealResponseBody(contentType, contentLength, Okio.buffer(cacheWritingSource))), +++ b/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java, +      String contentType = networkResponse.header("Content-Type");, +      responseBuilder.body(new RealResponseBody(contentType, -1L, Okio.buffer(responseBody)));, +++ b/okhttp/src/main/java/okhttp3/internal/http/RealResponseBody.java, +import javax.annotation.Nullable;, +  /**, +   * Use a string to avoid parsing the content type until needed. This also defers problems caused, +   * by malformed content types., +   */, +  private final @Nullable String contentTypeString;, +  private final long contentLength;, +  public RealResponseBody(, +      @Nullable String contentTypeString, long contentLength, BufferedSource source) {, +    this.contentTypeString = contentTypeString;, +    this.contentLength = contentLength;, +    return contentTypeString != null ? MediaType.parse(contentTypeString) : null;, +    return contentLength;, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static org.junit.Assert.assertArrayEquals;, +    Response response = client.newCall(headRequest).execute();, +    assertEquals(200, response.code());, +    assertArrayEquals(new byte[0], response.body().bytes());, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +    String contentType = response.header("Content-Type");, +    long contentLength = response.body().contentLength();, +        .body(new RealResponseBody(contentType, contentLength, Okio.buffer(cacheWritingSource))), +++ b/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java, +      String contentType = networkResponse.header("Content-Type");, +      responseBuilder.body(new RealResponseBody(contentType, -1L, Okio.buffer(responseBody)));, +++ b/okhttp/src/main/java/okhttp3/internal/http/RealResponseBody.java, +import javax.annotation.Nullable;, +  /**, +   * Use a string to avoid parsing the content type until needed. This also defers problems caused, +   * by malformed content types., +   */, +  private final @Nullable String contentTypeString;, +  private final long contentLength;, +  public RealResponseBody(, +      @Nullable String contentTypeString, long contentLength, BufferedSource source) {, +    this.contentTypeString = contentTypeString;, +    this.contentLength = contentLength;, +    return contentTypeString != null ? MediaType.parse(contentTypeString) : null;, +    return contentLength;, +++ b/okhttp/src/main/java/okhttp3/internal/http1/Http1Codec.java, +    String contentType = response.header("Content-Type");, +      Source source = newFixedLengthSource(0);, +      return new RealResponseBody(contentType, 0, Okio.buffer(source));, +      Source source = newChunkedSource(response.request().url());, +      return new RealResponseBody(contentType, -1L, Okio.buffer(source));, +      Source source = newFixedLengthSource(contentLength);, +      return new RealResponseBody(contentType, contentLength, Okio.buffer(source));, +    return new RealResponseBody(contentType, -1L, Okio.buffer(newUnknownLengthSource()));, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +import static org.junit.Assert.assertArrayEquals;, +    Response response = client.newCall(headRequest).execute();, +    assertEquals(200, response.code());, +    assertArrayEquals(new byte[0], response.body().bytes());, +++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java, +    String contentType = response.header("Content-Type");, +    long contentLength = response.body().contentLength();, +        .body(new RealResponseBody(contentType, contentLength, Okio.buffer(cacheWritingSource))), +++ b/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java, +      String contentType = networkResponse.header("Content-Type");, +      responseBuilder.body(new RealResponseBody(contentType, -1L, Okio.buffer(responseBody)));, +++ b/okhttp/src/main/java/okhttp3/internal/http/RealResponseBody.java]