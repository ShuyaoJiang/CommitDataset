[+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void legalToExecuteTwiceCloning() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setBody("def"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    Call call = client.newCall(request);, +    Response response1 = call.execute();, +, +    Call cloned = call.clone();, +    Response response2 = cloned.execute();, +, +    assertEquals(response1.body().string(), "abc");, +    assertEquals(response2.body().string(), "def");, +  }, +, +  @Test public void legalToExecuteTwiceCloning_Async() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setBody("def"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    Call call = client.newCall(request);, +    call.enqueue(callback);, +, +    Call cloned = call.clone();, +    cloned.enqueue(callback);, +, +    callback.await(request.url()).assertBody("abc");, +    callback.await(request.url()).assertBody("def");, +  }, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void legalToExecuteTwiceCloning() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setBody("def"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    Call call = client.newCall(request);, +    Response response1 = call.execute();, +, +    Call cloned = call.clone();, +    Response response2 = cloned.execute();, +, +    assertEquals(response1.body().string(), "abc");, +    assertEquals(response2.body().string(), "def");, +  }, +, +  @Test public void legalToExecuteTwiceCloning_Async() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setBody("def"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    Call call = client.newCall(request);, +    call.enqueue(callback);, +, +    Call cloned = call.clone();, +    cloned.enqueue(callback);, +, +    callback.await(request.url()).assertBody("abc");, +    callback.await(request.url()).assertBody("def");, +  }, +, +++ b/okhttp/src/main/java/okhttp3/Call.java, +public interface Call extends Cloneable {, +  /**, +   * Create a new, identical call to this one which can be enqueued or executed even if this call, +   * has already been., +   */, +  Call clone();, +, +++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java, +  @Test public void legalToExecuteTwiceCloning() throws Exception {, +    server.enqueue(new MockResponse().setBody("abc"));, +    server.enqueue(new MockResponse().setBody("def"));, +, +    Request request = new Request.Builder(), +        .url(server.url("/")), +        .build();, +, +    Call call = client.newCall(request);, +    Response response1 = call.execute();, +, +    Call cloned = call.clone();, +    Response response2 = cloned.execute();, +, +    assertEquals(response1.body().string(), "abc");, +    assertEquals(response2.body().string(), "def");, +  }]