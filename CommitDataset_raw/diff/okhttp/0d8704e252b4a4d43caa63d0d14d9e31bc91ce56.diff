[+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java, +import java.util.concurrent.Executor;, +  private FakeExecutor cleanupExecutor;, +    // Disable the automatic execution of the cleanup., +    cleanupExecutor = new FakeExecutor();, +    pool.replaceCleanupExecutorForTests(cleanupExecutor);, +  @Test public void getDoesNotScheduleCleanup() {, +    Connection connection = pool.get(httpAddress);, +    assertNull(connection);, +    cleanupExecutor.assertExecutionScheduled(false);, +  }, +, +  @Test public void recycleSchedulesCleanup() {, +    cleanupExecutor.assertExecutionScheduled(false);, +    pool.recycle(httpA);, +    cleanupExecutor.assertExecutionScheduled(true);, +  }, +, +  @Test public void shareSchedulesCleanup() {, +    cleanupExecutor.assertExecutionScheduled(false);, +    pool.share(spdyA);, +    cleanupExecutor.assertExecutionScheduled(true);, +  }, +, +    assertPooled(pool, httpC, httpB, httpA);, +, +    pool.performCleanup();, +  @Test public void expiredConnectionNotReturned() throws Exception {, +, +    // Allow enough time to pass so that the connection is now expired., +, +    // The connection is held, but will not be returned., +    assertPooled(pool, httpA);, +, +    // The connection must be cleaned up., +    pool.performCleanup();, +    assertPooled(pool, httpD, httpC, httpB, httpA);, +, +    pool.performCleanup();, +, +    // Allow enough time to pass so that the connections are now expired., +    assertPooled(pool, httpB, httpA);, +, +    // The connections must be cleaned up., +    pool.performCleanup();, +, +    // Close the connection. It is an ex-connection. It has ceased to be., +    assertPooled(pool, httpA);, +, +    // The connection must be cleaned up., +    pool.performCleanup();, +, +    // The pool should remain empty, and there is no need to schedule a cleanup., +    assertPooled(pool);, +    cleanupExecutor.assertExecutionScheduled(false);, +    // The pool should remain empty, and there is no need to schedule a cleanup., +    cleanupExecutor.assertExecutionScheduled(false);, +    // The pool should remain empty, and there is no need to schedule the cleanup., +    cleanupExecutor.assertExecutionScheduled(false);, +    assertPooled(pool, spdyA); // Connection should be in the pool., +, +    Thread.sleep((long) (KEEP_ALIVE_DURATION_MS * 0.7));, +    pool.performCleanup();, +, +    Thread.sleep((long) (KEEP_ALIVE_DURATION_MS * 0.4));, +    pool.performCleanup();, +    assertPooled(pool); // Connection should have been removed., +    assertPooled(pool, httpA); // Connection should be in the pool., +    cleanupExecutor.assertExecutionScheduled(true);, +, +    Thread.sleep((long) (KEEP_ALIVE_DURATION_MS * 0.7));, +    pool.performCleanup();, +, +    Thread.sleep((long) (KEEP_ALIVE_DURATION_MS * 0.4));, +    pool.performCleanup();, +    assertPooled(pool); // Connection should have been removed., +    // http C should be added, +    assertEquals(3, pool.getConnectionCount());, +    assertEquals(3, pool.getHttpConnectionCount());, +    assertEquals(0, pool.getSpdyConnectionCount());, +, +    pool.performCleanup();, +, +    // http A should be removed by cleanup., +    // spdy A should be added, +    assertEquals(3, pool.getConnectionCount());, +    assertEquals(2, pool.getHttpConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());, +, +    pool.performCleanup();, +, +    // http B should be removed by cleanup., +    // http C should be returned., +    // spdy A will be returned but also kept in the pool., +    // http C should be added to the pool, +    // spdy A will be returned but also kept in the pool., +    // http E should be added to the pool., +    assertEquals(3, pool.getConnectionCount());, +    assertEquals(2, pool.getHttpConnectionCount());, +    assertEquals(1, pool.getSpdyConnectionCount());]