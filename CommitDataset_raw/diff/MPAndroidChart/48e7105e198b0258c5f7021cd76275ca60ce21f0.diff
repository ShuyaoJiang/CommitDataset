[+++ b/README.md, +For using a <code>LineChart, BarChart, ScatterChart or PieChart </code>, define it in .xml:, +or create it in code (and then **add it to a layout**):, +method. The baseclass <code>ChartData</code> class encapsulates all data and information that is needed for the chart during rendering. For each type of chart, a different subclass of `ChartData` (e.g. `LineData`) exists that should be used for setting data for the chart. In the constructor, you can hand over an <code>ArrayList<? extends DataSet></code> as the values to display, and an additional <code>ArrayList</code> of <code>String</code> that will describe the labels on the x-axis. Example with the class `LineData` (extends `ChartData`), which is used for adding data to a `LineChart`:, +    public LineData(ArrayList<String> xVals, ArrayList<LineDataSet> sets) { ... }, +So, what is a <code>DataSet</code> and why do you need it? That is actually pretty simple. One <code>DataSet</code> object represents a group of entries (datatype <code>Entry</code>) inside the chart that belong together. It is designed to **logically separate different groups of values in the chart**. For each type of chart, a differnt object that extends `DataSet` (e.g. `LineDataSet`) exists that allows specific styling. , +As an example, you might want to display the quarterly revenue of two different companies over one year in a `LineChart`. In that case, it would be recommended to create two different <code>LineDataSet</code> objects, each containing four values (one for each quarter). As an <code>ArrayList<String></code> to describe the labels on the x-axis, you would simply provide the four Strings "1.Q", "2.Q", "3.Q", "4.Q"., +Of course, it is also possible to provide just one <code>LineDataSet</code> object containing all 8 values for the two companys. , +, +So how to setup a <code>LineDataSet</code> object?, +    public LineDataSet(ArrayList<Entry> yVals, String label) { ... }, +When looking at the constructor, it is visible that the <code>LineDataSet</code> needs an <code>ArrayList</code> of type <code>Entry</code> and a `String` used to describe the `LineDataSet` and as a label used for the `Legend`. Furthermore this label can be used to find the `LineDataSet` amongst other `LineDataSet` objects in the `LineData` object., +The <code>ArrayList</code> of type <code>Entry</code> encapsulates all values of the chart. A <code>Entry</code> object is an additional wrapper around a value and holds the value itself, and it's position on the x-axis (the index inside the <code>ArrayList</code> of <code>String</code> of the <code>LineData</code> object the value is mapped to):, +Now that we have our lists of <code>Entry</code> objects, the <code>LineDataSet</code> objects can be created:, +    LineDataSet setComp1 = new LineDataSet(valsComp1, "Company 1");, +    LineDataSet setComp2 = new LineDataSet(valsComp2, "Company 2");, +    ArrayList<LineDataSet> dataSets = new ArrayList<LineDataSet>();, +    LineData data = new LineData(xVals, dataSets);, +    mLineChart.setData(data);, +Since release [v1.4.0](https://github.com/PhilJay/MPAndroidChart/releases/tag/v1.4.0), the `ColorTemplate` object that was responsible for setting colors in previous releases is no longer needed. Nevertheless, it still holds all predefined color arrays (e.g. `ColorTemplate.VORDIPLOM_COLORS` and provides convenience methods for transforming colors from the resources (resource integers) into "real" colors., +Instead of the `ColorTemplate`, colors can now be specified directly via `DataSet` object, which allows separate styling for each `DataSet`., +In this short example, we have our two different `LineDataSet` objects representing the quarterly revenues of two companies (previously mentioned in the **Adding data** tutorial), for which we now want to set different colors., +What we want:, + - the values of "Company 1" should be represented by four different variations of the color "red", + - the values of "Company 2" should be represented by four different variations of the color "green", +, +This is what the code looks like:, +, +  LineDataSet setComp1 = new LineDataSet(valsComp1, "Company 1");, +  , +  // sets colors for the dataset, resolution of the resource name to a "real" color is done internally, +  setComp1.setColors(new int[] { R.color.red1, R.color.red2, R.color.red3, R.color.red4 }, Context);, +  , +  LineDataSet setComp2 = new LineDataSet(valsComp2, "Company 2");, +  setComp2.setColors(new int[] { R.color.green1, R.color.green2, R.color.green3, R.color.green4 }, Context);, +Besides that, there are many other ways for setting colors for a `DataSet`. Here is the full documentation:, +, + - `setColors(int [] colors, Context c)`: Sets the colors that should be used fore this DataSet. Colors are reused as soon as the number of Entries the DataSet represents is higher than the size of the colors array. You can use "new int[] { R.color.red, R.color.green, ... }" to provide colors for this method. Internally, the colors are resolved using getResources().getColor(...)., + - `setColors(int [] colors)`: Sets the colors that should be used fore this DataSet. Colors are reused as soon as the number of Entries the DataSet represents is higher than the size of the colors array. Make sure that the colors are already prepared (by calling getResources().getColor(...)) before adding them to the DataSet., + - `setColors(ArrayList<Integer> colors)`: Sets the colors that should be used fore this DataSet. Colors are reused as soon as the number of Entries the DataSet represents is higher than the size of the colors array. Make sure that the colors are already prepared (by calling getResources().getColor(...)) before adding them to the DataSet., + - `setColor(int color)`: Sets the one and ONLY color that should be used for this DataSet. Internally, this recreates the colors array and adds the specified color., +, +`ColorTemplate` example:, +, +LineDataSet set = new LineDataSet(...);, +set.setColors(ColorTemplate.VORDIPLOM_COLORS, Context);, +, +// or:, +set.setColors(ColorTemplate.createColors(ColorTemplate.VORDIPLOM_COLORS));, +If no colors are set for a `DataSet`, default colors are used., +**Displaying / styling legends:**, +By default, all chart types support legends and will automatically generate and draw a legend after setting data for the chart. If a legend should be drawn or not can be enabled/disabled using the, +, + - `setDrawLegend(boolean enabled)`, + , +method., +, +The number of entries the automatically generated legend contains depends on the number of different colors (across all `DataSet` objects) as well as on the `DataSet` labels. The labels of the `Legend` depend on the labels set for the used `DataSet` objects in the chart. If no labels for the `DataSet` objects have been specified, the chart will automatically generate them. If multiple colors are used for one `DataSet`, those colors are grouped and only described by one label., +, +For customizing the `Legend`, use you can retreive the `Legend` object from the chart **after setting data** using the `getLegend()` method., +    l.setFormSize(10f); // set the size of the legend forms/shapes, +    l.setForm(LegendForm.CIRCLE); // set what type of form/shape should be used, +    l.setPosition(LegendPosition.BELOW_CHART_LEFT);, +    l.setXEntrySpace(5f); // set the space between the legend entries on the x-axis, +    l.setYEntrySpace(5f); // set the space between the legend entries on the y-axis, +, +**Displaying / styling labels:**, +, +Labels (classes `XLabel` and `YLabel`) are used to describe the values of the chart on the x- and y-axis. While the x-axis labels display what is handed over to the `ChartData` object as an `ArrayList<String>` ("xVals"), the y-axis labels depend on the actual values that are set for the chart., +, +Labels can be enabled/disabled, using the methods:, +, + - `setDrawXLabels(boolean enabled)`, + - `setDrawYLabels(boolean enabled)`, +, +the chart provides., +In order to apply a different styling to the labels, the methods `getYLabels()` and `getXLabels()` can be used to acquire the labels object and modify it., +, +Example:, +, +```java, +XLabels xl = mChart.getXLabels();, +xl.setPosition(XLabelPosition.BOTTOM); // set the position, +xl.setTypeface(...); // set a different font, +xl.setTextSize(12f); // set the textsize, +xl.setSpaceBetweenLabels(3); // set how many characters of space should be between the labels, +//... and more, +, +YLabels yl = mChart.getYLabels();, +yl.setPosition(YLabelPosition.BOTH_SIDED); // set the position, +yl.setTypeface(...); // set a different font, +yl.setTextSize(12f); // set the textsize, +yl.setLabelCount(6); // set how many label entries should be displayed, +//... and more, +, +```, +, +]