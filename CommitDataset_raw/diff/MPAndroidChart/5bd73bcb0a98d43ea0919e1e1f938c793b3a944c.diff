[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/DynamicalAddingActivity.java, +            data.addXValue(set.getEntryCount() + "");, +            data.addEntry(new Entry((float) (Math.random() * 10) + 50f, set.getEntryCount()), 0);, +//            mChart.setVisibleXRange(6);, +//            mChart.setVisibleYRange(30, AxisDependency.LEFT);, +//            , +//            // this automatically refreshes the chart (calls invalidate()), +//            mChart.moveViewTo(data.getXValCount()-7, 55f, AxisDependency.LEFT);, +, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/DynamicalAddingActivity.java, +            data.addXValue(set.getEntryCount() + "");, +            data.addEntry(new Entry((float) (Math.random() * 10) + 50f, set.getEntryCount()), 0);, +//            mChart.setVisibleXRange(6);, +//            mChart.setVisibleYRange(30, AxisDependency.LEFT);, +//            , +//            // this automatically refreshes the chart (calls invalidate()), +//            mChart.moveViewTo(data.getXValCount()-7, 55f, AxisDependency.LEFT);, +, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        mViewPortHandler.refresh(save, this, true);, +        mViewPortHandler.refresh(save, this, true);, +        mViewPortHandler.refresh(save, this, true);, +        mViewPortHandler.refresh(save, this, true);, +    }, +, +    // /**, +    // * Centers the viewport around the specified x-index and the specified, +    // * y-value in the chart. Centering the viewport outside the bounds of the, +    // * chart is not possible. Makes most sense in combination with the, +    // * setScaleMinima(...) method. First set the scale minima, then center the, +    // * viewport. SHOULD BE CALLED AFTER setting data for the chart., +    // *, +    // * @param xIndex the index on the x-axis to center to, +    // * @param yVal the value ont he y-axis to center to, +    // */, +    // public synchronized void centerViewPort(final int xIndex, final float, +    // yVal, AxisDependency axis) {, +    //, +    // float indicesInView = mDeltaX / mViewPortHandler.getScaleX();, +    // float valsInView = getDeltaY(axis) / mViewPortHandler.getScaleY();, +    //, +    // // Log.i(LOG_TAG, "indices: " + indicesInView + ", vals: " +, +    // // valsInView);, +    //, +    // float[] pts = new float[] {, +    // xIndex - indicesInView / 2f, yVal + valsInView / 2f, +    // };, +    //, +    // getTransformer(axis).pointValuesToPixel(pts);, +    // mViewPortHandler.centerViewPort(pts, this);, +    // }, +, +    /**, +     * Sets the size of the area (range on the x-axis) that should be maximum, +     * visible at once. If this is e.g. set to 10, no more than 10 values on the, +     * x-axis can be viewed at once without scrolling., +     * , +     * @param xRange, +     */, +    public void setVisibleXRange(float xRange) {, +        float xScale = mDeltaX / (xRange + 0.01f);, +        mViewPortHandler.setMinimumScaleX(xScale);, +     * Sets the size of the area (range on the y-axis) that should be maximum, +     * visible at once., +     * @param yRange, +     * @param axis - the axis for which this limit should apply, +    public void setVisibleYRange(float yRange, AxisDependency axis) {, +        float yScale = getDeltaY(axis) / yRange;, +        mViewPortHandler.setMinimumScaleY(yScale);, +    }, +    /**, +     * Moves the left side of the current viewport to the specified x-index., +     * , +     * @param xIndex, +     */, +    public void moveViewToX(int xIndex) {, +                xIndex, 0f, +        };, +, +        getTransformer(AxisDependency.LEFT).pointValuesToPixel(pts);, +        mViewPortHandler.centerViewPort(pts, this);, +    }, +, +    /**, +     * Centers the viewport to the specified y-value on the y-axis., +     * , +     * @param yValue, +     * @param axis - which axis should be used as a reference for the y-axis, +     */, +    public void moveViewToY(float yValue, AxisDependency axis) {, +, +        float valsInView = getDeltaY(axis) / mViewPortHandler.getScaleY();, +, +        float[] pts = new float[] {, +                0f, yValue + valsInView / 2f, +        };, +, +        getTransformer(axis).pointValuesToPixel(pts);, +        mViewPortHandler.centerViewPort(pts, this);, +    }]