[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/CombinedChartActivity.java, +import com.github.mikephil.charting.charts.CombinedChart.DrawOrder;, +        mChart.setDrawBarShadow(false);, +        , +        // draw bars behind lines, +        mChart.setDrawOrder(new DrawOrder[] {, +                DrawOrder.BAR, DrawOrder.LINE, DrawOrder.CANDLE, +        });, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/CombinedChartActivity.java, +import com.github.mikephil.charting.charts.CombinedChart.DrawOrder;, +        mChart.setDrawBarShadow(false);, +        , +        // draw bars behind lines, +        mChart.setDrawOrder(new DrawOrder[] {, +                DrawOrder.BAR, DrawOrder.LINE, DrawOrder.CANDLE, +        });, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/CombinedChart.java, +    /** the fill-formatter used for determining the position of the fill-line */, +    protected FillFormatter mFillFormatter;, +, +    /** flag that enables or disables the highlighting arrow */, +    private boolean mDrawHighlightArrow = false;, +, +    /**, +     * if set to true, all values are drawn above their bars, instead of below, +     * their top, +     */, +    private boolean mDrawValueAboveBar = true;, +, +    /**, +     * if set to true, all values of a stack are drawn individually, and not, +     * just their sum, +     */, +    private boolean mDrawValuesForWholeStack = true;, +, +    /**, +     * if set to true, a grey area is darawn behind each bar that indicates the, +     * maximum value, +     */, +    private boolean mDrawBarShadow = true;, +, +    protected DrawOrder[] mDrawOrder = new DrawOrder[] {, +            DrawOrder.BAR, DrawOrder.LINE, DrawOrder.CANDLE, DrawOrder.SCATTER, +    };, +, +    /**, +     * enum that allows to specify the order in which the different data objects, +     * for the combined-chart are drawn, +     */, +    public enum DrawOrder {, +        BAR, LINE, CANDLE, SCATTER, +    }, +        if (getBarData() != null || getCandleData() != null) {, +        return mDrawBarShadow;, +        return mDrawValueAboveBar;, +        return mDrawHighlightArrow;, +        return mDrawValuesForWholeStack;, +    }, +, +    /**, +     * set this to true to draw the highlightning arrow, +     * , +     * @param enabled, +     */, +    public void setDrawHighlightArrow(boolean enabled) {, +        mDrawHighlightArrow = enabled;, +    }, +, +    /**, +     * If set to true, all values are drawn above their bars, instead of below, +     * their top., +     * , +     * @param enabled, +     */, +    public void setDrawValueAboveBar(boolean enabled) {, +        mDrawValueAboveBar = enabled;, +    }, +, +    /**, +     * if set to true, all values of a stack are drawn individually, and not, +     * just their sum, +     * , +     * @param enabled, +     */, +    public void setDrawValuesForWholeStack(boolean enabled) {, +        mDrawValuesForWholeStack = enabled;, +    }, +, +    /**, +     * If set to true, a grey area is drawn behind each bar that indicates the, +     * maximum value. Enabling his will reduce performance by about 50%., +     * , +     * @param enabled, +     */, +    public void setDrawBarShadow(boolean enabled) {, +        mDrawBarShadow = enabled;, +    }, +, +    /**, +     * Returns the currently set draw order.]