[+++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +		, +		if(!mStartAtZero && getYMin() >= 0f) {, +		    mYChartMin = getYMin();, +		    mDeltaY = Math.abs(mYChartMax - mYChartMin);, +		}, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +		, +		if(!mStartAtZero && getYMin() >= 0f) {, +		    mYChartMin = getYMin();, +		    mDeltaY = Math.abs(mYChartMax - mYChartMin);, +		}, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +	    // additional handling for space (default 10% space), spacing only applies with non-rounded y-legend, +		float space = mDeltaY / 100f * 10f;, +			mYChartMin = mYChartMin - space;, +		mYChartMax = mYChartMax + space;, +		mDeltaY = Math.abs(mYChartMax - mYChartMin);, +			float min = mYChartMin;, +			if (step >= 1f) {, +				, +			    val = (int) (mYChartMin / step) - step;, +			    mYChartMin = val;, +			} else {, +			if(mStartAtZero) {, +			    val = 0;		, +			    mYChartMin = 0;, +			} else {, +			 , +	            if(getYMin() >= 0 && this instanceof BarChart) {, +	                val = 0;       , +	                mYChartMin = 0;, +	            }, +			}, +, +			while (val <= mDeltaY + step + min) {, +		, +		mYChartMax = yLegend.get(yLegend.size() - 1);, +		, +		, +        Log.i(LOG_TAG, "DeltaX: " + mDeltaX + ", DeltaY: " + mDeltaY);, +        Log.i(LOG_TAG, "mYCMax: " + mYChartMax + ", mYCMin: " + mYChartMin);, +        Log.i(LOG_TAG, "yMax: " + getYMax() + ", yMin: " + getYMin());, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +		, +		if(!mStartAtZero && getYMin() >= 0f) {, +		    mYChartMin = getYMin();, +		    mDeltaY = Math.abs(mYChartMax - mYChartMin);, +		}, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +	    // additional handling for space (default 10% space), spacing only applies with non-rounded y-legend, +		float space = mDeltaY / 100f * 10f;, +			mYChartMin = mYChartMin - space;, +		mYChartMax = mYChartMax + space;, +		mDeltaY = Math.abs(mYChartMax - mYChartMin);, +			float min = mYChartMin;, +			if (step >= 1f) {, +				, +			    val = (int) (mYChartMin / step) - step;, +			    mYChartMin = val;, +			} else {, +			if(mStartAtZero) {, +			    val = 0;		, +			    mYChartMin = 0;, +			} else {, +			 , +	            if(getYMin() >= 0 && this instanceof BarChart) {, +	                val = 0;       , +	                mYChartMin = 0;, +	            }, +			}, +, +			while (val <= mDeltaY + step + min) {, +		, +		mYChartMax = yLegend.get(yLegend.size() - 1);, +		, +		, +        Log.i(LOG_TAG, "DeltaX: " + mDeltaX + ", DeltaY: " + mDeltaY);, +        Log.i(LOG_TAG, "mYCMax: " + mYChartMax + ", mYCMin: " + mYChartMin);, +        Log.i(LOG_TAG, "yMax: " + getYMax() + ", yMin: " + getYMin());, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +			mYChartMax = mData.getYMax();, +		mDeltaY = Math.abs(mData.getYMax() - mData.getYMin());]