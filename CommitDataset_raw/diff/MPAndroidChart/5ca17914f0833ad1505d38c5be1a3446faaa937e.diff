[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/RealmDatabaseActivity.java, +import com.github.mikephil.charting.data.Entry;, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/RealmDatabaseActivity.java, +import com.github.mikephil.charting.data.Entry;, +++ b/MPChartLib/src/com/github/mikephil/charting/data/BaseDataSet.java, +    @Override, +    @Override, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/RealmDatabaseActivity.java, +import com.github.mikephil.charting.data.Entry;, +++ b/MPChartLib/src/com/github/mikephil/charting/data/BaseDataSet.java, +    @Override, +    @Override, +++ b/MPChartLib/src/com/github/mikephil/charting/data/DataSet.java, +        return mYVals.indexOf(e);, +//, +//        for (int i = 0; i < mYVals.size(); i++) {, +//            if (e.equalTo(mYVals.get(i))), +//                return i;, +//        }, +//, +//        return -1;, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/RealmDatabaseActivity.java, +import com.github.mikephil.charting.data.Entry;, +++ b/MPChartLib/src/com/github/mikephil/charting/data/BaseDataSet.java, +    @Override, +    @Override, +++ b/MPChartLib/src/com/github/mikephil/charting/data/DataSet.java, +        return mYVals.indexOf(e);, +//, +//        for (int i = 0; i < mYVals.size(); i++) {, +//            if (e.equalTo(mYVals.get(i))), +//                return i;, +//        }, +//, +//        return -1;, +++ b/MPChartLib/src/com/github/mikephil/charting/data/realm/RealmBarDataSet.java, +package com.github.mikephil.charting.data.realm;, +, +/**, + * Created by philipp on 07/11/15., + */, +public class RealmBarDataSet {, +}, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/RealmDatabaseActivity.java, +import com.github.mikephil.charting.data.Entry;, +++ b/MPChartLib/src/com/github/mikephil/charting/data/BaseDataSet.java, +    @Override, +    @Override, +++ b/MPChartLib/src/com/github/mikephil/charting/data/DataSet.java, +        return mYVals.indexOf(e);, +//, +//        for (int i = 0; i < mYVals.size(); i++) {, +//            if (e.equalTo(mYVals.get(i))), +//                return i;, +//        }, +//, +//        return -1;, +++ b/MPChartLib/src/com/github/mikephil/charting/data/realm/RealmBarDataSet.java, +package com.github.mikephil.charting.data.realm;, +, +/**, + * Created by philipp on 07/11/15., + */, +public class RealmBarDataSet {, +}, +++ b/MPChartLib/src/com/github/mikephil/charting/data/realm/RealmBaseDataSet.java, +import java.util.ArrayList;, +import java.util.List;, +, +    protected List<Entry> mValues;, +        mValues = new ArrayList<Entry>();, +        results.sort(xIndexField, true);, +            mValues.add(new Entry(dynamicObject.getFloat(yValuesField), dynamicObject.getInt(xIndexField)));, +        //return results.min(yValuesField).floatValue();, +        return -50;, +        //return results.max(yValuesField).floatValue();, +        return 200;, +        return mValues.size();, +        //DynamicRealmObject o = new DynamicRealmObject(results.where().equalTo(xIndexField, xIndex).findFirst());, +        //return new Entry(o.getFloat(yValuesField), o.getInt(xIndexField));, +        int index = getEntryIndex(xIndex);, +        if (index > -1), +            return mValues.get(index);, +    public Entry getEntryForIndex(int index) {, +        //DynamicRealmObject o = new DynamicRealmObject(results.get(index));, +        //return new Entry(o.getFloat(yValuesField), o.getInt(xIndexField));, +        return mValues.get(index);, +    }, +, +    @Override, +, +        int low = 0;, +        int high = mValues.size() - 1;, +        int closest = -1;, +, +        while (low <= high) {, +            int m = (high + low) / 2;, +, +            if (xIndex == mValues.get(m).getXIndex()) {, +                while (m > 0 && mValues.get(m - 1).getXIndex() == xIndex)]