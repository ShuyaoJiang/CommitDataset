[+++ b/MPChartExample/AndroidManifest.xml, +    android:versionCode="8", +    android:versionName="1.0.8" >, +++ b/MPChartExample/AndroidManifest.xml, +    android:versionCode="8", +    android:versionName="1.0.8" >, +++ b/MPChartLib/src/com/github/mikephil/charting/data/ChartData.java, +++ b/MPChartExample/AndroidManifest.xml, +    android:versionCode="8", +    android:versionName="1.0.8" >, +++ b/MPChartLib/src/com/github/mikephil/charting/data/ChartData.java, +++ b/MPChartLib/src/com/github/mikephil/charting/utils/ColorTemplate.java, +, +    /** an arraylist of color arrays (one color array per dataset) */, +    private ArrayList<ArrayList<Integer>> mDataSetColors;, +, +    /** the total amount of different colors in the template */, +    private int mColorCount = 0;, +, +    /**, +     * constructor, +     */, +    public ColorTemplate() {, +        mDataSetColors = new ArrayList<ArrayList<Integer>>();, +    }, +, +    /**, +     * returns the total amount of different colors in the template, +     * , +     * @return, +     */, +    public int getColorCount() {, +        return mColorCount;, +    }, +, +    /**, +     * Adds a new array of colors for one DataSet to the template. Make sure to, +     * use getResources().getColor(R.color.yourcolor) for the colors. Use, +     * ColorTemplate.createColors(...) to make a color arraylist., +     * , +     * @param colors, +     */, +    public void addDataSetColors(ArrayList<Integer> colors) {, +        mDataSetColors.add(colors);, +        mColorCount += colors.size();, +    }, +, +    /**, +     * Adds a new array of colors for one DataSet to the template. You can use, +     * R.color.yourcolor for the integer values. Conversion is done internally., +     * , +     * @param colors, +     * @param c, +     */, +    public void addDataSetColors(int[] colors, Context c) {, +        mDataSetColors.add(createColors(c, colors));, +        mColorCount += colors.length;, +    }, +, +    /**, +     * Adds colors to the ColorTemplate. Each of the colors will create a new, +     * DataSet color array in the template with just one color. This is, +     * especially useful when you want each of your DataSets only to be, +     * represented by one color and not multiple., +     * , +     * @param colors, +     * @param c, +     */, +    public void addColorsForDataSets(ArrayList<Integer> colors) {, +        for (int i = 0; i < colors.size(); i++) {, +, +            ArrayList<Integer> clrs = new ArrayList<Integer>();, +            clrs.add(colors.get(i));, +            addDataSetColors(clrs);, +        }, +    }, +, +    /**, +     * Adds colors to the ColorTemplate. Each of the colors will create a new, +     * dataset color array in the template with just one color. This is, +     * especially useful when you want each of your DataSets only to be, +     * represented by one color and not multiple., +     * , +     * @param colors, +     * @param c, +     */, +    public void addColorsForDataSets(int[] colors, Context c) {, +        for (int i = 0; i < colors.length; i++) {, +            addDataSetColors(new int[] {, +                    colors[i], +            }, c);, +        }, +    }, +, +    /**, +     * Adds a single color for one DataSet. Each call of this method will add, +     * one more color for one DataSet to the template., +     * , +     * @param color, +     * @param c]