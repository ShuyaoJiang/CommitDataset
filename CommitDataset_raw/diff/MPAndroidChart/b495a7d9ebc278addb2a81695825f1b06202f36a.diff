[+++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +     * Saves the current state of the chart to the gallery as a JPEG image. The, +     * filename and compression can be set. 0 == maximum compression, 100 = low, +     * @return returns true if saving was successfull, false if not, +    public boolean saveToGallery(String fileName, int quality) {, +, +        File file = new File(extBaseDir.getAbsolutePath() + "/DCIM");, +, +            b.compress(Bitmap.CompressFormat.JPEG, quality, out); // control, +            // the jpeg, +            // quality, +        values.put(Images.Media.MIME_TYPE, "image/jpeg");, +        values.put(Images.Media.DESCRIPTION, "MPAndroidChart-Library Save");, +        return getContext().getContentResolver().insert(Images.Media.EXTERNAL_CONTENT_URI, values) == null, +                ? false : true;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +     * Saves the current state of the chart to the gallery as a JPEG image. The, +     * filename and compression can be set. 0 == maximum compression, 100 = low, +     * @return returns true if saving was successfull, false if not, +    public boolean saveToGallery(String fileName, int quality) {, +, +        File file = new File(extBaseDir.getAbsolutePath() + "/DCIM");, +, +            b.compress(Bitmap.CompressFormat.JPEG, quality, out); // control, +            // the jpeg, +            // quality, +        values.put(Images.Media.MIME_TYPE, "image/jpeg");, +        values.put(Images.Media.DESCRIPTION, "MPAndroidChart-Library Save");, +        return getContext().getContentResolver().insert(Images.Media.EXTERNAL_CONTENT_URI, values) == null, +                ? false : true;, +++ b/MPChartLib/src/com/github/mikephil/charting/highlight/BarHighlighter.java, +		if (ranges == null || ranges.length == 0), +		if (values == null || values.length == 0)]