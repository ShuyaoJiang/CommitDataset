[+++ b/MPChartLib/src/main/java/com/github/mikephil/charting/highlight/BarHighlighter.java, +import com.github.mikephil.charting.interfaces.datasets.IBarDataSet;, +    protected Highlight getStackedHighlight(SelectionDetail selectionDetail, IBarDataSet set, float xVal, double yValue) {, +    protected float getDistance(float x1, float y1, float x2, float y2) {, +        return Math.abs(x1 - x2);, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/highlight/BarHighlighter.java, +import com.github.mikephil.charting.interfaces.datasets.IBarDataSet;, +    protected Highlight getStackedHighlight(SelectionDetail selectionDetail, IBarDataSet set, float xVal, double yValue) {, +    protected float getDistance(float x1, float y1, float x2, float y2) {, +        return Math.abs(x1 - x2);, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/highlight/ChartHighlighter.java, +        List<SelectionDetail> closestValues = getSelectionDetailsAtXPos(xVal);, +        float leftAxisMinDist = getMinimumDistance(closestValues, y, YAxis.AxisDependency.LEFT);, +        float rightAxisMinDist = getMinimumDistance(closestValues, y, YAxis.AxisDependency.RIGHT);, +        YAxis.AxisDependency axis = leftAxisMinDist < rightAxisMinDist ? YAxis.AxisDependency.LEFT : YAxis.AxisDependency.RIGHT;, +        SelectionDetail detail = getClosestSelectionDetailByPixel(closestValues, x, y, axis, mChart, +     * @param closestValues, +    protected float getMinimumDistance(List<SelectionDetail> closestValues, float pos, YAxis.AxisDependency axis) {, +        for (int i = 0; i < closestValues.size(); i++) {, +            SelectionDetail sel = closestValues.get(i);, +                float tempDistance = Math.abs(getSelectionPos(sel) - pos);, +                if (tempDistance < distance) {, +                    distance = tempDistance;, +     * Returns a list of SelectionDetail objects representing the entries closest to the given xVal., +     * The returned list contains two objects per DataSet (closest rounding up, closest rounding down)., +    protected List<SelectionDetail> getSelectionDetailsAtXPos(float xVal) {, +            vals.add(getDetail(dataSet, i, xVal, DataSet.Rounding.UP));, +            vals.add(getDetail(dataSet, i, xVal, DataSet.Rounding.DOWN));, +    /**, +     * Returns the SelectionDetail object corresponding to the selected xValue and dataSetIndex., +     *, +     * @param set, +     * @param dataSetIndex, +     * @param xVal, +     * @param rounding, +     * @return, +     */, +    protected SelectionDetail getDetail(IDataSet set, int dataSetIndex, float xVal, DataSet.Rounding rounding) {, +     * @param closestValues contains two values per DataSet closest to the selected x-position (determined by rounding up and, +     *                      down), +     * @param x, +     * @param y, +     * @param axis          the closest axis, +    public SelectionDetail getClosestSelectionDetailByPixel(List<SelectionDetail> closestValues, float x, float y,, +        for (int i = 0; i < closestValues.size(); i++) {, +            SelectionDetail sel = closestValues.get(i);, +    /**, +     * Calculates the distance between the two given points., +     *, +     * @param x1, +     * @param y1, +     * @param x2, +     * @param y2, +     * @return, +     */, +    protected float getDistance(float x1, float y1, float x2, float y2) {, +        return (float) Math.hypot(x1 - x2, y1 - y2);, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/highlight/BarHighlighter.java, +import com.github.mikephil.charting.interfaces.datasets.IBarDataSet;, +    protected Highlight getStackedHighlight(SelectionDetail selectionDetail, IBarDataSet set, float xVal, double yValue) {, +    protected float getDistance(float x1, float y1, float x2, float y2) {, +        return Math.abs(x1 - x2);, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/highlight/ChartHighlighter.java, +        List<SelectionDetail> closestValues = getSelectionDetailsAtXPos(xVal);, +        float leftAxisMinDist = getMinimumDistance(closestValues, y, YAxis.AxisDependency.LEFT);, +        float rightAxisMinDist = getMinimumDistance(closestValues, y, YAxis.AxisDependency.RIGHT);, +        YAxis.AxisDependency axis = leftAxisMinDist < rightAxisMinDist ? YAxis.AxisDependency.LEFT : YAxis.AxisDependency.RIGHT;, +        SelectionDetail detail = getClosestSelectionDetailByPixel(closestValues, x, y, axis, mChart, +     * @param closestValues, +    protected float getMinimumDistance(List<SelectionDetail> closestValues, float pos, YAxis.AxisDependency axis) {, +        for (int i = 0; i < closestValues.size(); i++) {, +            SelectionDetail sel = closestValues.get(i);, +                float tempDistance = Math.abs(getSelectionPos(sel) - pos);, +                if (tempDistance < distance) {, +                    distance = tempDistance;, +     * Returns a list of SelectionDetail objects representing the entries closest to the given xVal., +     * The returned list contains two objects per DataSet (closest rounding up, closest rounding down)., +    protected List<SelectionDetail> getSelectionDetailsAtXPos(float xVal) {, +            vals.add(getDetail(dataSet, i, xVal, DataSet.Rounding.UP));, +            vals.add(getDetail(dataSet, i, xVal, DataSet.Rounding.DOWN));, +    /**, +     * Returns the SelectionDetail object corresponding to the selected xValue and dataSetIndex., +     *, +     * @param set, +     * @param dataSetIndex, +     * @param xVal, +     * @param rounding, +     * @return, +     */, +    protected SelectionDetail getDetail(IDataSet set, int dataSetIndex, float xVal, DataSet.Rounding rounding) {, +     * @param closestValues contains two values per DataSet closest to the selected x-position (determined by rounding up and, +     *                      down), +     * @param x, +     * @param y, +     * @param axis          the closest axis, +    public SelectionDetail getClosestSelectionDetailByPixel(List<SelectionDetail> closestValues, float x, float y,, +        for (int i = 0; i < closestValues.size(); i++) {, +            SelectionDetail sel = closestValues.get(i);, +    /**, +     * Calculates the distance between the two given points.]