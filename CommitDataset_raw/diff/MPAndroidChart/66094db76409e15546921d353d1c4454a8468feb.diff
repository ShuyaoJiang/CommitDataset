[+++ b/MPChartLib/src/main/java/com/github/mikephil/charting/components/Legend.java, +        this.setComputedColors(colors);, +        this.setComputedLabels(labels);, +        if(mColors != null && colors.size() == mColors.length){, +            Utils.copyIntegers(colors, mColors);, +        }else {, +    }, +        if(mLabels != null && mLabels.length == labels.size()){, +            Utils.copyStrings(labels, mLabels);, +        }else {, +    }, +        if(mExtraColors != null && mExtraColors.length == colors.size()){, +            Utils.copyIntegers(colors, mExtraColors);, +        }else {, +        }, +, +        if(mExtraLabels != null && mExtraLabels.length == labels.size()){, +            Utils.copyStrings(labels, mExtraLabels);, +        }else {, +    }, +        this.setComputedColors(colors);, +        this.setComputedLabels(labels);, +    private boolean isCalculatedLineSizesArrayListResized = true;, +        if(mCalculatedLineSizes == null || isCalculatedLineSizesArrayListResized){, +, +            mCalculatedLineSizes = calculatedLineSizesForCalculateDimensions, +                    .toArray(new FSize[calculatedLineSizesForCalculateDimensions.size()]);, +, +            isCalculatedLineSizesArrayListResized = false;, +, +        }, +                if(calculatedLineSizes.size() != mCalculatedLineSizes.length) {, +                    isCalculatedLineSizesArrayListResized = true;, +                }else{, +                    for(int i = 0 ; i < mCalculatedLineSizes.length ; i++){, +                        mCalculatedLineSizes[i] = calculatedLineSizes.get(i);, +                    }, +                }, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/components/Legend.java, +        this.setComputedColors(colors);, +        this.setComputedLabels(labels);, +        if(mColors != null && colors.size() == mColors.length){, +            Utils.copyIntegers(colors, mColors);, +        }else {, +    }, +        if(mLabels != null && mLabels.length == labels.size()){, +            Utils.copyStrings(labels, mLabels);, +        }else {, +    }, +        if(mExtraColors != null && mExtraColors.length == colors.size()){, +            Utils.copyIntegers(colors, mExtraColors);, +        }else {, +        }, +, +        if(mExtraLabels != null && mExtraLabels.length == labels.size()){, +            Utils.copyStrings(labels, mExtraLabels);, +        }else {, +    }, +        this.setComputedColors(colors);, +        this.setComputedLabels(labels);, +    private boolean isCalculatedLineSizesArrayListResized = true;, +        if(mCalculatedLineSizes == null || isCalculatedLineSizesArrayListResized){, +, +            mCalculatedLineSizes = calculatedLineSizesForCalculateDimensions, +                    .toArray(new FSize[calculatedLineSizesForCalculateDimensions.size()]);, +, +            isCalculatedLineSizesArrayListResized = false;, +, +        }, +                if(calculatedLineSizes.size() != mCalculatedLineSizes.length) {, +                    isCalculatedLineSizesArrayListResized = true;, +                }else{, +                    for(int i = 0 ; i < mCalculatedLineSizes.length ; i++){, +                        mCalculatedLineSizes[i] = calculatedLineSizes.get(i);, +                    }, +                }, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/utils/Utils.java, +        copyIntegers(integers, ret);, +    public static void copyIntegers(List<Integer> from, int[] to){, +        int count = to.length < from.size() ? to.length : from.size();, +        for(int i = 0 ; i < count ; i++){, +            to[i] = from.get(i);, +        }, +    }, +, +    public static void copyStrings(List<String> from, String[] to){, +        int count = to.length < from.size() ? to.length : from.size();, +        for(int i = 0 ; i < count ; i++){, +            to[i] = from.get(i);, +        }, +    }, +]