[+++ b/MPChartLib/src/com/github/mikephil/charting/Approximator.java, +	 * apply the Douglas-Peucker-Reduction to an ArrayList of Entry with a given epsilon (tolerance), +	 * @param entries, +	private void algorithmDouglasPeucker(ArrayList<Entry> entries, double epsilon, int start, int end) {, +		Entry firstEntry = entries.get(start);, +		Entry lastEntry = entries.get(end);, +			double dist = pointToLineDistance(firstEntry, lastEntry, entries.get(i));, +			algorithmDouglasPeucker(entries, epsilon, start, maxDistIndex);, +			algorithmDouglasPeucker(entries, epsilon, maxDistIndex, end);, +	 * calculate the distance between a line between two entries and an entry (point), +	 * @param startEntry, +	 * @param endEntry, +	 * @param entryPoint, +	public double pointToLineDistance(Entry startEntry, Entry endEntry, Entry entryPoint) {, +		double normalLength = Math.sqrt((endEntry.getXIndex() - startEntry.getXIndex()), +				* (endEntry.getXIndex() - startEntry.getXIndex()) + (endEntry.getVal() - startEntry.getVal()), +				* (endEntry.getVal() - startEntry.getVal()));, +		return Math.abs((entryPoint.getXIndex() - startEntry.getXIndex()), +				* (endEntry.getVal() - startEntry.getVal()) - (entryPoint.getVal() - startEntry.getVal()), +				* (endEntry.getXIndex() - startEntry.getXIndex()))]