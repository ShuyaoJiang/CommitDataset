[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +        mChart.setHoleColor(Color.TRANSPARENT);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +        mChart.setHoleColor(Color.TRANSPARENT);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java, +import android.graphics.PorterDuff;, +import android.graphics.PorterDuffXfermode;, +     * if true, the hole will see-through to the inner ends of the slices, +    private boolean mDrawHoleTransparent = true;, +     * (if enabled). Use transparent colors to make things beneath the hole visible., +     * Set this to true to draw a hole in the pie center (the pie center is empty)., +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +        mChart.setHoleColor(Color.TRANSPARENT);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java, +import android.graphics.PorterDuff;, +import android.graphics.PorterDuffXfermode;, +     * if true, the hole will see-through to the inner ends of the slices, +    private boolean mDrawHoleTransparent = true;, +     * (if enabled). Use transparent colors to make things beneath the hole visible., +     * Set this to true to draw a hole in the pie center (the pie center is empty)., +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/LineChartRenderer.java, +        int minx = Math.max(dataSet.getEntryIndex(entryFrom) - diff - 1, 0);, +        // Take the from/to xIndex from the entries themselves,, +        // so missing entries won't screw up the filling., +        // What we need to draw is line from points of the xIndexes - not arbitrary entry indexes!, +, +        final Entry toEntry = dataSet.getEntryForIndex(to - 1);, +        final Entry fromEntry = dataSet.getEntryForIndex(from);, +        final float xTo = toEntry == null ? 0 : toEntry.getXIndex();, +        final float xFrom = fromEntry == null ? 0 : fromEntry.getXIndex();, +, +        spline.lineTo(xTo, fillMin);, +        spline.lineTo(xFrom, fillMin);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +        mChart.setHoleColor(Color.TRANSPARENT);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java, +import android.graphics.PorterDuff;, +import android.graphics.PorterDuffXfermode;, +     * if true, the hole will see-through to the inner ends of the slices, +    private boolean mDrawHoleTransparent = true;, +     * (if enabled). Use transparent colors to make things beneath the hole visible., +     * Set this to true to draw a hole in the pie center (the pie center is empty)., +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/LineChartRenderer.java, +        int minx = Math.max(dataSet.getEntryIndex(entryFrom) - diff - 1, 0);, +        // Take the from/to xIndex from the entries themselves,, +        // so missing entries won't screw up the filling., +        // What we need to draw is line from points of the xIndexes - not arbitrary entry indexes!, +, +        final Entry toEntry = dataSet.getEntryForIndex(to - 1);, +        final Entry fromEntry = dataSet.getEntryForIndex(from);, +        final float xTo = toEntry == null ? 0 : toEntry.getXIndex();, +        final float xFrom = fromEntry == null ? 0 : fromEntry.getXIndex();, +, +        spline.lineTo(xTo, fillMin);, +        spline.lineTo(xFrom, fillMin);, +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/PieChartRenderer.java, +        final float userInnerRadius = mChart.isDrawHoleEnabled() && isHoleTransparent(), +            boolean hasHoleColor = mHolePaint.getColor() != 0;, +            if (hasHoleColor) {, +            // only draw the circle if it can be seen (not covered by the hole), circle is independent of hole, +            if (mChart.getTransparentCircleRadius() > mChart.getHoleRadius()) {, +            float innerRadius = mChart.isDrawHoleEnabled() && isHoleTransparent(), +        final float userInnerRadius = mChart.isDrawHoleEnabled() && isHoleTransparent(), +     * Returns true if the hole in the center of the PieChart is transparent,, +     * false if not., +     *, +     * @return true if hole is transparent., +     */, +    private boolean isHoleTransparent() {, +        return Color.alpha(mHolePaint.getColor()) <= 0;, +    }, +, +    /**]