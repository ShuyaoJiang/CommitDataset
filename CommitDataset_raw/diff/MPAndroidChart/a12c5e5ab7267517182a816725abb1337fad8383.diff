[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/MyMarkerView.java, +    // content (user-interface), +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/MyMarkerView.java, +    // content (user-interface), +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +, +, +    @Override, +     * direction manually. This method needs to be recalled everytime a new data, +     * object is set for the chart. Provide density pixels -> they are then, +     * rendered to pixels inside the chart., +, +        mTrans.prepareMatrixValuePx(this);, +        mTrans.prepareMatrixOffset(this);, +        prepareContentRect();, +    @Override, +    public PointF getCenterOfView() {, +        return getCenter();, +    }, +, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/MyMarkerView.java, +    // content (user-interface), +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +, +, +    @Override, +     * direction manually. This method needs to be recalled everytime a new data, +     * object is set for the chart. Provide density pixels -> they are then, +     * rendered to pixels inside the chart., +, +        mTrans.prepareMatrixValuePx(this);, +        mTrans.prepareMatrixOffset(this);, +        prepareContentRect();, +    @Override, +    public PointF getCenterOfView() {, +        return getCenter();, +    }, +, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/HorizontalBarChart.java, +, +import com.github.mikephil.charting.renderer.HorizontalBarChartTransformer;, +/**, + * BarChart with horizontal bar orientation. In this implementation, x- and, + * y-axis are switched., + */, +    protected void init() {, +, +        mTrans = new HorizontalBarChartTransformer();, +//    @Override, +//    protected void prepareBar(float x, float y, float barspace) {, +//        super.prepareBar(x, y, barspace);, +//, +//        float spaceHalf = barspace / 2f;, +//, +//        float top = x + spaceHalf;, +//        float bottom = x + 1f - spaceHalf;, +//, +//        mBarRect.set(0, top, y, bottom);, +//, +//        mTrans.rectValueToPixel(mBarRect, mPhaseY);, +//, +//        // if a shadow is drawn, prepare it too, +//        if (mDrawBarShadow) {, +//            mBarShadow.set(mBarRect.left, mOffsetTop, mBarRect.right, getHeight() - mOffsetBottom);, +//        }, +//    }, +//    @Override, +//    protected void calcModulus() {, +//, +//        float[] values = new float[9];, +//        mTrans.getTouchMatrix().getValues(values);, +//, +//        mXLabels.mYAxisLabelModulus = (int) Math, +//                .ceil((mData.getXValCount() * mXLabels.mLabelHeight), +//                        / (mContentRect.height() * values[Matrix.MSCALE_Y]));, +//    }, +//, +//    @Override, +//    protected void drawXLabels(float yPos), +//    {, +//        if (!mDrawXLabels), +//            return;, +//, +//        mXLabelPaint.setTextAlign(Paint.Align.RIGHT);, +//        // pre allocate to save performance (dont allocate in loop), +//        float[] position = new float[] {, +//                0f, 0f, +//        };, +//, +//        float offset = Utils.calcTextHeight(mXLabelPaint, mData.getXVals().get(0)) / 2f;, +//, +//        int step = mData.getDataSetCount();, +//, +//        for (int i = 0; i < mData.getXValCount(); i += mXLabels.mYAxisLabelModulus) {, +//, +//            position[1] = i * step + i * mData.getGroupSpace()]