[+++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +            canvas.drawText(mNoDataText, getWidth() / 2, getHeight() / 2, mInfoPaint);, +            if (!TextUtils.isEmpty(mNoDataTextDescription)) {, +                float textOffset = -mInfoPaint.ascent() + mInfoPaint.descent();, +                canvas.drawText(mNoDataTextDescription, getWidth() / 2, (getHeight() / 2), +                        + textOffset, mInfoPaint);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +            canvas.drawText(mNoDataText, getWidth() / 2, getHeight() / 2, mInfoPaint);, +            if (!TextUtils.isEmpty(mNoDataTextDescription)) {, +                float textOffset = -mInfoPaint.ascent() + mInfoPaint.descent();, +                canvas.drawText(mNoDataTextDescription, getWidth() / 2, (getHeight() / 2), +                        + textOffset, mInfoPaint);, +++ b/MPChartLib/src/com/github/mikephil/charting/data/ScatterDataSet.java, +import com.github.mikephil.charting.utils.ColorTemplate;, +     * The radius of the hole in the shape (applies to Square, Circle and Triangle), +     * - default: 0.0, +     */, +    private float mScatterShapeHoleRadius = 0f;, +, +    /**, +     * Color for the hole in the shape., +     * Setting to `ColorTemplate.COLOR_NONE` will behave as transparent., +     * - default: ColorTemplate.COLOR_NONE, +     */, +    private int mScatterShapeHoleColor = ColorTemplate.COLOR_NONE;, +, +    /**, +        copied.mScatterShapeHoleRadius = mScatterShapeHoleRadius;, +        copied.mScatterShapeHoleColor = mScatterShapeHoleColor;, +    /**, +     * Sets the radius of the hole in the shape, +     *, +     * @param holeRadius, +     */, +    public void setScatterShapeHoleRadius(float holeRadius) {, +        mScatterShapeHoleRadius = Utils.convertDpToPixel(holeRadius);, +    }, +, +    @Override, +    public float getScatterShapeHoleRadius() {, +        return mScatterShapeHoleRadius;, +    }, +, +    /**, +     * Sets the color for the hole in the shape, +     *, +     * @param holeColor, +     */, +    public void setScatterShapeHoleColor(int holeColor) {, +        mScatterShapeHoleColor = holeColor;, +    }, +, +    @Override, +    public int getScatterShapeHoleColor() {, +        return mScatterShapeHoleColor;, +    }, +, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +            canvas.drawText(mNoDataText, getWidth() / 2, getHeight() / 2, mInfoPaint);, +            if (!TextUtils.isEmpty(mNoDataTextDescription)) {, +                float textOffset = -mInfoPaint.ascent() + mInfoPaint.descent();, +                canvas.drawText(mNoDataTextDescription, getWidth() / 2, (getHeight() / 2), +                        + textOffset, mInfoPaint);, +++ b/MPChartLib/src/com/github/mikephil/charting/data/ScatterDataSet.java, +import com.github.mikephil.charting.utils.ColorTemplate;, +     * The radius of the hole in the shape (applies to Square, Circle and Triangle), +     * - default: 0.0, +     */, +    private float mScatterShapeHoleRadius = 0f;, +, +    /**, +     * Color for the hole in the shape., +     * Setting to `ColorTemplate.COLOR_NONE` will behave as transparent., +     * - default: ColorTemplate.COLOR_NONE, +     */, +    private int mScatterShapeHoleColor = ColorTemplate.COLOR_NONE;, +, +    /**, +        copied.mScatterShapeHoleRadius = mScatterShapeHoleRadius;, +        copied.mScatterShapeHoleColor = mScatterShapeHoleColor;, +    /**, +     * Sets the radius of the hole in the shape, +     *, +     * @param holeRadius, +     */, +    public void setScatterShapeHoleRadius(float holeRadius) {, +        mScatterShapeHoleRadius = Utils.convertDpToPixel(holeRadius);, +    }, +, +    @Override, +    public float getScatterShapeHoleRadius() {, +        return mScatterShapeHoleRadius;, +    }, +, +    /**, +     * Sets the color for the hole in the shape, +     *, +     * @param holeColor, +     */, +    public void setScatterShapeHoleColor(int holeColor) {]