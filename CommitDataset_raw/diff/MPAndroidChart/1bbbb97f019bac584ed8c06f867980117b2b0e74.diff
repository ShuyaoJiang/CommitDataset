[+++ b/MPChartExample/AndroidManifest.xml, +        android:minSdkVersion="8", +        android:targetSdkVersion="18" />, +++ b/MPChartExample/AndroidManifest.xml, +        android:minSdkVersion="8", +        android:targetSdkVersion="18" />, +++ b/MPChartExample/src/com/example/mpchartexample/DrawChartActivity.java, +, + * This Activity demonstrates drawing into the Chart with the finger. Both line,, + * bar and scatter charts can be used for drawing., +public class DrawChartActivity extends Activity implements OnChartValueSelectedListener,, +        OnDrawListener {, +        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,, +                WindowManager.LayoutParams.FLAG_FULLSCREEN);, +        Log.i("VALS SELECTED",, +                "Value: " + values[0].getVal() + ", xIndex: " + highlights[0].getXIndex(), +++ b/MPChartExample/AndroidManifest.xml, +        android:minSdkVersion="8", +        android:targetSdkVersion="18" />, +++ b/MPChartExample/src/com/example/mpchartexample/DrawChartActivity.java, +, + * This Activity demonstrates drawing into the Chart with the finger. Both line,, + * bar and scatter charts can be used for drawing., +public class DrawChartActivity extends Activity implements OnChartValueSelectedListener,, +        OnDrawListener {, +        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,, +                WindowManager.LayoutParams.FLAG_FULLSCREEN);, +        Log.i("VALS SELECTED",, +                "Value: " + values[0].getVal() + ", xIndex: " + highlights[0].getXIndex(), +++ b/MPChartLib/AndroidManifest.xml, +        android:targetSdkVersion="18" />, +++ b/MPChartExample/AndroidManifest.xml, +        android:minSdkVersion="8", +        android:targetSdkVersion="18" />, +++ b/MPChartExample/src/com/example/mpchartexample/DrawChartActivity.java, +, + * This Activity demonstrates drawing into the Chart with the finger. Both line,, + * bar and scatter charts can be used for drawing., +public class DrawChartActivity extends Activity implements OnChartValueSelectedListener,, +        OnDrawListener {, +        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,, +                WindowManager.LayoutParams.FLAG_FULLSCREEN);, +        Log.i("VALS SELECTED",, +                "Value: " + values[0].getVal() + ", xIndex: " + highlights[0].getXIndex(), +++ b/MPChartLib/AndroidManifest.xml, +        android:targetSdkVersion="18" />, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +, +     * string that is drawn next to the values in the chart, indicating their, +     * unit, +     * width of the x-legend in pixels - this is calculated by the, +     * calcTextWidth() method, +     * the modulus that indicates if a value at a specified index in an, +     * array(list) for the x-legend is drawn or not. If index % modulus == 0, +     * DRAW, else dont draw., +     * flag that indicates if pinch-zoom is enabled. if true, both x and y axis, +     * can be scaled with 2 fingers, if false, x and y axis can be scaled, +     * separately, +     * if set to true, the x-legend entries will adjust themselves when scaling, +     * the graph, +     * if set to true, the highlight indicator (lines for linechart, dark bar, +     * for barchart) will be drawn upon selecting values., +     * boolean to indicate if user drawing on chart should automatically be, +     * finished, +     * the object representing the y-legend, this object is prepared in the, +     * prepareYLegend() method, +     * does all necessary preparations, needed when data is changed or flags, +     * that effect the data are changed, +     * calculates the required number of digits for the y-legend and for the, +     * values that might be drawn in the chart (if enabled), +        int length = (int) (((float) (mData.getXVals().get(0).length() + mData.getXVals(), +                .get(mData.getXValCount() - 1), +     * Sets up the y-legend. Computes the desired number of labels between the, +     * two given extremes. Unlike the prepareXLegend() method, this method needs, +     * to be called upon every refresh of the view., +        float[] position = new float[] {, +                0f, 0f, +        };, +                    mDrawCanvas.drawText(mData.getXVals().get(i), position[0], mOffsetTop - 5,, +                            mXLegendPaint);, +            String text = Utils.formatNumber(mYLegend.mEntries[i], mYLegend.mDecimals,, +                    mSeparateTousands);, +                mDrawCanvas.drawText(text + mUnit, mOffsetLeft - 10, positions[i * 2 + 1],, +                        mYLegendPaint);, +        mDrawCanvas.drawRect(mOffsetLeft, mOffsetTop, getWidth() - mOffsetRight, getHeight(), +                - mOffsetBottom,, +        Rect gridBackground = new Rect(mOffsetLeft, mOffsetTop, getWidth() - mOffsetRight,, +                getHeight() - mOffsetBottom);, +        float[] position = new float[] {, +                0f, 0f, +        };, +                    mDrawCanvas.drawLine(position[0], mOffsetTop, position[0], getHeight(), +                            - mOffsetBottom, mGridPaint);, +     * returns true if the specified point (x-axis) exceeds the limits of what, +     * is visible to the right side, +     * returns true if the specified point (x-axis) exceeds the limits of what, +     * is visible to the left side, +     * returns true if the specified point (y-axis) exceeds the limits of what, +     * is visible on the top, +     * returns true if the specified point (y-axis) exceeds the limits of what]