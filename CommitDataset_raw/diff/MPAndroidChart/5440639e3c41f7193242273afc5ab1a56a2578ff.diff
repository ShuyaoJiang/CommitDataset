[+++ b/MPChartLib/src/com/github/mikephil/charting/data/CandleDataSet.java, +import android.content.Context;, +import android.graphics.Paint;, +import com.github.mikephil.charting.utils.ColorTemplate;, +    /** paint style when open <= close */, +    protected Paint.Style mPaintStyle = Paint.Style.FILL;, +, +    /** paint style when open > close */, +    protected Paint.Style mDecreasingPaintStyle = Paint.Style.STROKE;, +, +    /** List representing all colors that are used for this DataSet when open > close */, +    protected List<Integer> mDecreasingColors;, +, +    /** shadow line color, set -1 for backward compatibility and uses default color */, +    protected int mShadowColor = -1;, +        mDecreasingColors = new ArrayList<Integer>();, +        copied.mDecreasingColors = mDecreasingColors;, +        copied.mPaintStyle = mPaintStyle;, +        copied.mDecreasingPaintStyle = mDecreasingPaintStyle;, +        copied.mShadowColor = mShadowColor;, +    //TODO, +     * It is necessary to implement ColorsList class that will encapsulate colors list functionality,, +     * because It's wrong to copy paste setColor, addColor, ... resetColors for each time when we want, +     * to add a coloring options for one of objects, +     * @author Mesrop, +, +    /** BELOW THIS COLOR HANDLING */, +, +    /**, +     * Sets the colors that should be used fore this DataSet when open > close . Colors are reused, +     * as soon as the number of Entries the DataSet represents is higher than, +     * the size of the colors array. If you are using colors from the resources,, +     * make sure that the colors are already prepared (by calling, +     * getResources().getColor(...)) before adding them to the DataSet., +     *, +     * @param colors, +     */, +    public void setDecreasingColors(List<Integer> colors) {, +        this.mDecreasingColors = colors;, +     * Sets the colors that should be used fore this DataSet when open > close. Colors are reused, +     * as soon as the number of Entries the DataSet represents is higher than, +     * the size of the colors array. If you are using colors from the resources,, +     * make sure that the colors are already prepared (by calling, +     * getResources().getColor(...)) before adding them to the DataSet., +     * @param colors, +     */, +    public void setDecreasingColors(int[] colors) {, +        this.mDecreasingColors = ColorTemplate.createColors(colors);, +    }, +, +    /**, +     * Sets the colors that should be used fore this DataSet when open > close. Colors are reused, +     * as soon as the number of Entries the DataSet represents is higher than, +     * the size of the colors array. You can use, +     * "new int[] { R.color.red, R.color.green, ... }" to provide colors for, +     * this method. Internally, the colors are resolved using, +     * getResources().getColor(...), +     *, +     * @param colors, +     */, +    public void setDecreasingColors(int[] colors, Context c) {, +, +        List<Integer> clrs = new ArrayList<Integer>();, +, +        for (int color : colors) {, +            clrs.add(c.getResources().getColor(color));, +        }, +, +        mDecreasingColors = clrs;, +    }, +, +    /**, +     * Adds a new color to the colors array of the DataSet for open > close., +     *, +     * @param color, +     */, +    public void addColor(int color) {, +        if (mDecreasingColors == null), +            mDecreasingColors = new ArrayList<Integer>();, +        mDecreasingColors.add(color);, +    }, +, +    /**, +     * Sets the one and ONLY color that should be used for this DataSet when open > close., +     * Internally, this recreates the colors array and adds the specified color., +     *, +     * @param color, +     */, +    public void setDecreasingColor(int color) {, +        resetDecreasingColors();, +        mDecreasingColors.add(color);, +    }, +, +    /**, +     * returns all the decreasing colors that are set for this DataSet, +     *, +     * @return, +     */, +    public List<Integer> getDecreasingColors() {, +        return mDecreasingColors;]