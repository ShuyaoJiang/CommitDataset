[+++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivity.java, +//        mChart.setLegendDigits(2);, +//        mChart.setValueDigits(2);, +++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivity.java, +//        mChart.setLegendDigits(2);, +//        mChart.setValueDigits(2);, +++ b/MPChartLib/src/com/github/mikephil/charting/BarLineChartBase.java, +import android.graphics.Typeface;, +    /**, +     * indicates how many digits should be used for the y-legend, -1 means, +     * automatically calculate, +     */, +    protected int mYLegendDigitsToUse = -1;, +, +    protected int mYLegendFormatDigits = -1;, +        // digits, -1 means calculate automatically, else the set value is used, +        if (mYLegendDigitsToUse == -1), +        else, +            mYLegendFormatDigits = mYLegendDigitsToUse;, +        if (mValueDigitsToUse == -1), +        else, +            mValueFormatDigits = mValueDigitsToUse;, +        // pre allocate to save performance (dont allocate in loop), +                    // Rect rect = new Rect();, +                    // mXLegendPaint.getTextBounds(mXVals.get(i), 0,, +                    // mXVals.get(i).length(), rect);, +                    //, +                    // float toRight = rect.width() / 2;, +                    //, +                    // // make sure, +                    // if(i == 0) toRight = rect.width();, +, +        float[] positions = new float[mYLegend.length * 2];, +        for (int i = 0; i < positions.length; i += 2) {, +            positions[i] = 0;, +            positions[i + 1] = mYLegend[i / 2];, +        // y-axis cannot be scaled, therefore transform without the touch matrix, +        transformPointArrayNoTouch(positions);, +        for (int i = 0; i < positions.length; i += 2) {, +            if (mYLegend[i / 2] != null) {, +, +                float yPos = positions[i + 1] + 8;, +, +                // lower the position of the top y-legend entry so that it does, +                // not interfear with the x-legend, +                if (i >= positions.length - 2), +                    yPos = positions[i + 1] + 14;, +, +                        positions[i] - 10,, +                        yPos, mYLegendPaint);, +            }, +     * , +     * , +    /**, +     * sets a typeface for the paint object of the x-legend, +     * , +     * @param t, +     */, +    public void setXLegendTypeface(Typeface t) {, +        mXLegendPaint.setTypeface(t);, +    }, +, +    /**, +     * sets a typeface for the paint object of the y-legend, +     * , +     * @param t, +     */, +    public void setYLegendTypeface(Typeface t) {, +        mYLegendPaint.setTypeface(t);, +    }, +, +    /**, +     * sets a typeface for both x and y-legend paints, +     * , +     * @param t, +     */, +    public void setLegendTypeface(Typeface t) {, +        setXLegendTypeface(t);, +        setYLegendTypeface(t);, +    }, +, +    /**, +     * sets the number of y-legend digits to use, if set to -1, digits will be, +     * automatically calculated, +     * , +     * @param digits, +     */, +    public void setLegendDigits(int digits) {, +        mYLegendDigitsToUse = digits;, +    }, +, +    /**, +     * returns the number of y-legend digits that is set to use, -1 means auto, +     * calculate, +     * , +     * @return, +     */, +    public int getLegendDigits() {, +        return mYLegendDigitsToUse;, +    }]