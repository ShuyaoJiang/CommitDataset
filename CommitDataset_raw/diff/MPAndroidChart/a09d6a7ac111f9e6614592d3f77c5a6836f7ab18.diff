[+++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +import com.github.mikephil.charting.highlight.Highlight;, +	 * if set to true, all values are drawn above their bars, instead of below their top, +	 * if set to true, all values of a stack are drawn individually, and not just their sum, +	 * if set to true, a grey area is drawn behind each bar that indicates the maximum value, +		mXAxisRenderer = new XAxisRendererBarChart(mViewPortHandler, mXAxis, mLeftAxisTransformer, this);, +	 * Returns the Highlight object (contains x-index and DataSet index) of the selected value at the given touch point, +	 * inside the BarChart., +	 * Returns the bounding box of the specified Entry in the specified DataSet. Returns null if the Entry could not be, +	 * found in the charts data., +	 * If set to true, all values are drawn above their bars, instead of below their top., +	 * If set to true, a grey area is drawn behind each bar that indicates the maximum value. Enabling his will reduce, +	 * performance by about 50%., +	 * returns true if drawing shadows (maxvalue) for each bar is enabled, false if not, +	 * Returns the lowest x-index (value on the x-axis) that is still visible on the chart., +		float[] pts = new float[] { mViewPortHandler.contentLeft(), mViewPortHandler.contentBottom() };, +	 * Returns the highest x-index (value on the x-axis) that is still visible on the chart., +		float[] pts = new float[] { mViewPortHandler.contentRight(), mViewPortHandler.contentBottom() };, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +import com.github.mikephil.charting.highlight.Highlight;, +	 * if set to true, all values are drawn above their bars, instead of below their top, +	 * if set to true, all values of a stack are drawn individually, and not just their sum, +	 * if set to true, a grey area is drawn behind each bar that indicates the maximum value, +		mXAxisRenderer = new XAxisRendererBarChart(mViewPortHandler, mXAxis, mLeftAxisTransformer, this);, +	 * Returns the Highlight object (contains x-index and DataSet index) of the selected value at the given touch point, +	 * inside the BarChart., +	 * Returns the bounding box of the specified Entry in the specified DataSet. Returns null if the Entry could not be, +	 * found in the charts data., +	 * If set to true, all values are drawn above their bars, instead of below their top., +	 * If set to true, a grey area is drawn behind each bar that indicates the maximum value. Enabling his will reduce, +	 * performance by about 50%., +	 * returns true if drawing shadows (maxvalue) for each bar is enabled, false if not, +	 * Returns the lowest x-index (value on the x-axis) that is still visible on the chart., +		float[] pts = new float[] { mViewPortHandler.contentLeft(), mViewPortHandler.contentBottom() };, +	 * Returns the highest x-index (value on the x-axis) that is still visible on the chart., +		float[] pts = new float[] { mViewPortHandler.contentRight(), mViewPortHandler.contentBottom() };, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +import com.github.mikephil.charting.highlight.Highlight;, +	 * if set to true, all values are drawn above their bars, instead of below their top, +	 * if set to true, all values of a stack are drawn individually, and not just their sum, +	 * if set to true, a grey area is drawn behind each bar that indicates the maximum value, +		mXAxisRenderer = new XAxisRendererBarChart(mViewPortHandler, mXAxis, mLeftAxisTransformer, this);, +	 * Returns the Highlight object (contains x-index and DataSet index) of the selected value at the given touch point, +	 * inside the BarChart., +	 * Returns the bounding box of the specified Entry in the specified DataSet. Returns null if the Entry could not be, +	 * found in the charts data., +	 * If set to true, all values are drawn above their bars, instead of below their top., +	 * If set to true, a grey area is drawn behind each bar that indicates the maximum value. Enabling his will reduce, +	 * performance by about 50%., +	 * returns true if drawing shadows (maxvalue) for each bar is enabled, false if not, +	 * Returns the lowest x-index (value on the x-axis) that is still visible on the chart., +		float[] pts = new float[] { mViewPortHandler.contentLeft(), mViewPortHandler.contentBottom() };, +	 * Returns the highest x-index (value on the x-axis) that is still visible on the chart., +		float[] pts = new float[] { mViewPortHandler.contentRight(), mViewPortHandler.contentBottom() };, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/HorizontalBarChart.java, +import com.github.mikephil.charting.highlight.Highlight;, + * BarChart with horizontal bar orientation. In this implementation, x- and y-axis are switched, meaning the YAxis class, + * represents the horizontal values and the XAxis class represents the vertical values., +	public HorizontalBarChart(Context context, AttributeSet attrs, int defStyle) {, +		mAxisRendererLeft = new YAxisRendererHorizontalBarChart(mViewPortHandler, mAxisLeft, mLeftAxisTransformer);, +		mAxisRendererRight = new YAxisRendererHorizontalBarChart(mViewPortHandler, mAxisRight, mRightAxisTransformer);, +		mXAxisRenderer = new XAxisRendererHorizontalBarChart(mViewPortHandler, mXAxis, mLeftAxisTransformer, this);, +			if (mLegend.getPosition() == LegendPosition.RIGHT_OF_CHART || mLegend.getPosition() == LegendPosition.RIGHT_OF_CHART_CENTER) {, +				offsetRight += Math.min(mLegend.mNeededWidth, mViewPortHandler.getChartWidth() * mLegend.getMaxSizePercent()), +						+ mLegend.getXOffset() * 2f;, +				offsetLeft += Math.min(mLegend.mNeededWidth, mViewPortHandler.getChartWidth() * mLegend.getMaxSizePercent()), +						+ mLegend.getXOffset() * 2f;, +				float yOffset = mLegend.mTextHeightMax * 2.f; // It's possible that we do not need this offset anymore, +																// as it is available through the extraOffsets, +			offsetBottom += mAxisRight.getRequiredHeightSpace(mAxisRendererRight.getPaintAxisLabels());, +		mViewPortHandler.restrainViewPort(Math.max(min, offsetLeft), Math.max(min, offsetTop), Math.max(min, offsetRight),, +				Math.max(min, offsetBottom));, +			Log.i(LOG_TAG, "offsetLeft: " + offsetLeft + ", offsetTop: " + offsetTop + ", offsetRight: " + offsetRight + ", offsetBottom: ", +					+ offsetBottom);, +		mRightAxisTransformer.prepareMatrixValuePx(mAxisRight.mAxisMinimum, mAxisRight.mAxisRange, mDeltaX, mXChartMin);, +		mLeftAxisTransformer.prepareMatrixValuePx(mAxisLeft.mAxisMinimum, mAxisLeft.mAxisRange, mDeltaX, mXChartMin);, +		mXAxis.mAxisLabelModulus = (int) Math.ceil((mData.getXValCount() * mXAxis.mLabelHeight), +		float[] vals = new float[] { e.getVal(), e.getXIndex() };, +	 * Returns the Highlight object (contains x-index and DataSet index) of the selected value at the given touch point, +	 * inside the BarChart., +	 * Returns the lowest x-index (value on the x-axis) that is still visible on the chart., +		float[] pts = new float[] { mViewPortHandler.contentLeft(), mViewPortHandler.contentBottom() };, +	 * Returns the highest x-index (value on the x-axis) that is still visible on the chart., +		float[] pts = new float[] { mViewPortHandler.contentLeft(), mViewPortHandler.contentTop() };, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +import com.github.mikephil.charting.highlight.Highlight;, +	 * if set to true, all values are drawn above their bars, instead of below their top, +	 * if set to true, all values of a stack are drawn individually, and not just their sum, +	 * if set to true, a grey area is drawn behind each bar that indicates the maximum value, +		mXAxisRenderer = new XAxisRendererBarChart(mViewPortHandler, mXAxis, mLeftAxisTransformer, this);, +	 * Returns the Highlight object (contains x-index and DataSet index) of the selected value at the given touch point, +	 * inside the BarChart., +	 * Returns the bounding box of the specified Entry in the specified DataSet. Returns null if the Entry could not be, +	 * found in the charts data., +	 * If set to true, all values are drawn above their bars, instead of below their top., +	 * If set to true, a grey area is drawn behind each bar that indicates the maximum value. Enabling his will reduce, +	 * performance by about 50%., +	 * returns true if drawing shadows (maxvalue) for each bar is enabled, false if not]