[+++ /dev/null, +++ /dev/null, +++ b/MPChartExample/libs/mpandroidchartlibrary-1-7-3.jar, +++ /dev/null, +++ b/MPChartExample/libs/mpandroidchartlibrary-1-7-3.jar, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +                    .abs(Math.abs(Math.max(Math.abs(mYChartMax), Math.abs(mYChartMin))) / 100f * 20f);, +            , +            if (Math.abs(mYChartMax - mYChartMin) < 0.00001f) {, +                    space = Math.abs(mYChartMax / 100f * 20f);, +            Log.i(LOG_TAG, "Space: " + space);, +, +++ /dev/null, +++ b/MPChartExample/libs/mpandroidchartlibrary-1-7-3.jar, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +                    .abs(Math.abs(Math.max(Math.abs(mYChartMax), Math.abs(mYChartMin))) / 100f * 20f);, +            , +            if (Math.abs(mYChartMax - mYChartMin) < 0.00001f) {, +                    space = Math.abs(mYChartMax / 100f * 20f);, +            Log.i(LOG_TAG, "Space: " + space);, +, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/LineChart.java, +import com.github.mikephil.charting.data.ChartData;, +import com.github.mikephil.charting.data.DataSet;, +import com.github.mikephil.charting.utils.FillFormatter;, +    private FillFormatter mFillFormatter;, +, +        mFillFormatter = new DefaultFillFormatter();, +, +                    Path filled = generateFilledPath(entries,, +                            mFillFormatter.getFillLinePosition(dataSet, mOriginalData, mYChartMax,, +                                    mYChartMin));, +, +    /**, +     * Default formatter that calculates the position of the filled line., +     * , +     * @author Philipp Jahoda, +     */, +    private class DefaultFillFormatter implements FillFormatter {, +, +        @Override, +        public float getFillLinePosition(LineDataSet dataSet, LineData data,, +                float chartMaxY, float chartMinY) {, +, +            float fillMin = 0f;, +, +            if (dataSet.getYMax() > 0 && dataSet.getYMin() < 0) {, +                fillMin = 0f;, +            } else {, +, +                if (!mStartAtZero) {, +, +                    float max, min;, +, +                    if (data.getYMax() > 0), +                        max = 0f;, +                    else, +                        max = chartMaxY;, +                    if (data.getYMin() < 0), +                        min = 0f;, +                    else, +                        min = chartMinY;, +, +                    fillMin = dataSet.getYMin() >= 0 ? min : max;, +                } else {, +                    fillMin = 0f;, +                }, +, +            }, +, +            return fillMin;, +        }, +    }, +++ /dev/null, +++ b/MPChartExample/libs/mpandroidchartlibrary-1-7-3.jar, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +                    .abs(Math.abs(Math.max(Math.abs(mYChartMax), Math.abs(mYChartMin))) / 100f * 20f);, +            , +            if (Math.abs(mYChartMax - mYChartMin) < 0.00001f) {, +                    space = Math.abs(mYChartMax / 100f * 20f);, +            Log.i(LOG_TAG, "Space: " + space);, +, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/LineChart.java, +import com.github.mikephil.charting.data.ChartData;, +import com.github.mikephil.charting.data.DataSet;, +import com.github.mikephil.charting.utils.FillFormatter;, +    private FillFormatter mFillFormatter;, +, +        mFillFormatter = new DefaultFillFormatter();, +, +                    Path filled = generateFilledPath(entries,, +                            mFillFormatter.getFillLinePosition(dataSet, mOriginalData, mYChartMax,, +                                    mYChartMin));, +, +    /**, +     * Default formatter that calculates the position of the filled line., +     * , +     * @author Philipp Jahoda, +     */, +    private class DefaultFillFormatter implements FillFormatter {]