[+++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivity.java, +++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivity.java, +++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivityMultiDataset.java, +++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivity.java, +++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivityMultiDataset.java, +++ b/MPChartExample/src/com/example/mpchartexample/DrawChartActivity.java, +		mChart.setYRange(10f, 40f);, +++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivity.java, +++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivityMultiDataset.java, +++ b/MPChartExample/src/com/example/mpchartexample/DrawChartActivity.java, +		mChart.setYRange(10f, 40f);, +++ b/MPChartExample/src/com/example/mpchartexample/LineChartActivity.java, +++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivity.java, +++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivityMultiDataset.java, +++ b/MPChartExample/src/com/example/mpchartexample/DrawChartActivity.java, +		mChart.setYRange(10f, 40f);, +++ b/MPChartExample/src/com/example/mpchartexample/LineChartActivity.java, +++ b/MPChartExample/src/com/example/mpchartexample/MultiLineChartActivity.java, +++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivity.java, +++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivityMultiDataset.java, +++ b/MPChartExample/src/com/example/mpchartexample/DrawChartActivity.java, +		mChart.setYRange(10f, 40f);, +++ b/MPChartExample/src/com/example/mpchartexample/LineChartActivity.java, +++ b/MPChartExample/src/com/example/mpchartexample/MultiLineChartActivity.java, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +, +import android.annotation.SuppressLint;, +     * string that is drawn next to the values in the chart, indicating their, +     * unit, +     * width of the x-legend in pixels - this is calculated by the, +     * calcTextWidth() method, +     * the modulus that indicates if a value at a specified index in an, +     * array(list) for the x-legend is drawn or not. If index % modulus == 0, +     * DRAW, else dont draw., +    protected int mXLegendGridModulus = 1;, +    /**, +     * flag that indicates if pinch-zoom is enabled. if true, both x and y axis, +     * can be scaled with 2 fingers, if false, x and y axis can be scaled, +     * separately, +     */, +     * if set to true, the x-legend entries will adjust themselves when scaling, +     * the graph, +    /**, +     * the object representing the y-legend, this object is prepared in the, +     * prepareYLegend() method, +     */, +    protected YLegend mYLegend = new YLegend();, +, +        prepareYLegend();, +, +     * does all necessary preparations, needed when data is changed or flags, +     * that effect the data are changed, +        if (!mFixedYValues), +            prepareMatrix();, +        mXLegendGridModulus = (int) Math.ceil((mData.getXValCount() * mXLegendWidth), +     * calculates the required number of digits for the y-legend and for the, +     * values that might be drawn in the chart (if enabled), +        // additional handling for space (default 10% space), spacing only, +        // applies with non-rounded y-legend, +        int length = (int) (((float) (mData.getXVals().get(0).length() + mData.getXVals(), +                .get(mData.getXValCount() - 1), +     * Sets up the y-legend. Computes the desired number of labels between the, +     * two given extremes. Unlike the prepareXLegend() method, this method needs, +     * to be called upon every refresh of the view., +     * , +     * @return, +    @SuppressLint("NewApi"), +    private void prepareYLegend() {, +        // calculate the currently visible extremes, +        PointD p1 = getValuesByTouchPoint(mContentRect.left, mContentRect.top);, +        PointD p2 = getValuesByTouchPoint(mContentRect.left, mContentRect.bottom);, +        // update the current chart dimensions on the y-axis, +        mYChartMin = (float) p2.y;, +        mYChartMax = (float) p1.y;, +        float yMin = mYChartMin;, +        float yMax = mYChartMax;, +        double range = yMax - yMin;, +        if (mYLegendCount == 0 || range <= 0) {, +            mYLegend.mEntries = new float[] {};, +            mYLegend.mEntryCount = 0;, +            return;, +        double rawInterval = range / mYLegendCount;, +        double interval = Utils.roundToNextSignificant(rawInterval);, +        double intervalMagnitude = Math.pow(10, (int) Math.log10(interval));, +        int intervalSigDigit = (int) (interval / intervalMagnitude);, +        if (intervalSigDigit > 5) {, +            // Use one order of magnitude higher, to avoid intervals like 0.9 or, +            // 90, +            interval = Math.floor(10 * intervalMagnitude);, +        }, +        double first = Math.ceil(yMin / interval) * interval;, +        double last = Math.nextUp(Math.floor(yMax / interval) * interval);, +        double f;, +        int i;, +        int n = 0;, +        for (f = first; f <= last; f += interval) {, +            ++n;, +        }, +        mYLegend.mEntryCount = n;, +]