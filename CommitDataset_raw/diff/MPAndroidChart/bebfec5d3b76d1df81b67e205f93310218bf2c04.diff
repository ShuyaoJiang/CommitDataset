[+++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        // calculate the starting and entry point of the y-labels (depending on zoom / contentrect bounds), +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        // calculate the starting and entry point of the y-labels (depending on zoom / contentrect bounds), +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java, +import com.github.mikephil.charting.utils.XLabels.XLabelPosition;, +        // setup offsets for legend, +        if (mDrawLegend) {, +            , +            float legendRight = 0f, legendBottom = 0f;, +, +                // this is the space between the legend and the chart, +                float spacing = Utils.convertDpToPixel(7f);, +, +                legendRight = mLegend.getMaximumEntryLength(mLegendLabelPaint), +                        + mLegend.getFormSize() + mLegend.getFormToTextSpace() + spacing;, +, +                legendBottom = mLegendLabelPaint.getTextSize() * 4f;, +            mLegend.setOffsetBottom(legendBottom);, +            mLegend.setOffsetRight(legendRight);, +            float min = Utils.convertDpToPixel(11f);, +            mLegend.setOffsetTop(min);, +            mLegend.setOffsetLeft(min);, +            , +            mOffsetTop = Math.max(mLegend.getFullHeight(mLegendLabelPaint), min);, +    }, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        // calculate the starting and entry point of the y-labels (depending on zoom / contentrect bounds), +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java, +import com.github.mikephil.charting.utils.XLabels.XLabelPosition;, +        // setup offsets for legend, +        if (mDrawLegend) {, +            , +            float legendRight = 0f, legendBottom = 0f;, +, +                // this is the space between the legend and the chart, +                float spacing = Utils.convertDpToPixel(7f);, +, +                legendRight = mLegend.getMaximumEntryLength(mLegendLabelPaint), +                        + mLegend.getFormSize() + mLegend.getFormToTextSpace() + spacing;, +, +                legendBottom = mLegendLabelPaint.getTextSize() * 4f;, +            mLegend.setOffsetBottom(legendBottom);, +            mLegend.setOffsetRight(legendRight);, +            float min = Utils.convertDpToPixel(11f);, +            mLegend.setOffsetTop(min);, +            mLegend.setOffsetLeft(min);, +            , +            mOffsetTop = Math.max(mLegend.getFullHeight(mLegendLabelPaint), min);, +    }, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieRadarChartBase.java, +        , +        calculateOffsets();, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        // calculate the starting and entry point of the y-labels (depending on zoom / contentrect bounds), +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java, +import com.github.mikephil.charting.utils.XLabels.XLabelPosition;, +        // setup offsets for legend, +        if (mDrawLegend) {, +            , +            float legendRight = 0f, legendBottom = 0f;, +, +                // this is the space between the legend and the chart, +                float spacing = Utils.convertDpToPixel(7f);, +, +                legendRight = mLegend.getMaximumEntryLength(mLegendLabelPaint), +                        + mLegend.getFormSize() + mLegend.getFormToTextSpace() + spacing;, +, +                legendBottom = mLegendLabelPaint.getTextSize() * 4f;, +            mLegend.setOffsetBottom(legendBottom);, +            mLegend.setOffsetRight(legendRight);, +            float min = Utils.convertDpToPixel(11f);, +            mLegend.setOffsetTop(min);, +            mLegend.setOffsetLeft(min);, +            , +            mOffsetTop = Math.max(mLegend.getFullHeight(mLegendLabelPaint), min);, +    }, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieRadarChartBase.java, +        , +        calculateOffsets();, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/RadarChart.java, +        // setup offsets for legend, +        if (mDrawLegend) {, +            , +            float legendRight = 0f, legendBottom = 0f;, +, +                // this is the space between the legend and the chart, +                float spacing = Utils.convertDpToPixel(7f);, +, +                legendRight = mLegend.getMaximumEntryLength(mLegendLabelPaint), +                        + mLegend.getFormSize() + mLegend.getFormToTextSpace() + spacing;, +, +                legendBottom = mLegendLabelPaint.getTextSize() * 5.5f;, +            mLegend.setOffsetBottom(legendBottom);, +            mLegend.setOffsetRight(legendRight);, +            // all required offsets are calculated, now find largest and apply, +            float min = Utils.convertDpToPixel(11f);, +            mOffsetBottom = Math.max(mXLabels.mLabelWidth, min);, +            mOffsetTop = Math.max(mXLabels.mLabelWidth, min);, +            mOffsetRight = Math.max(mXLabels.mLabelWidth, min);]