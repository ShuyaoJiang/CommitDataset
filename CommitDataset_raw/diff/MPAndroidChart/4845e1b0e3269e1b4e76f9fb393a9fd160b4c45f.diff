[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +++ b/MPChartLib/src/com/github/mikephil/charting/listener/BarLineChartTouchListener.java, +    /**, +     * the minimum distance between the pointers that will trigger a zoom gesture, +     */, +    private float mMinScalePointerDistance;, +, +, +        this.mMinScalePointerDistance = Utils.convertDpToPixel(3.5f);, +        // perform the transformation, update the chart, +        if (event.getPointerCount() >= 2) { // two finger zoom, +            // get the distance between the pointers of the touch event, +            if (totalDist > mMinScalePointerDistance) {, +                ViewPortHandler h = mChart.getViewPortHandler();, +                // take actions depending on the activated touch mode, +, +                            h.canZoomOutMoreX() :, +                            h.canZoomInMoreX();, +, +                    boolean canZoomMoreY = isZoomingOut ?, +                            h.canZoomOutMoreY() :, +                            h.canZoomInMoreY();, +                    if (canZoomMoreY || canZoomMoreX) {, +                            h.canZoomOutMoreX() :, +                            h.canZoomInMoreX();, +                    boolean isZoomingOut = (scaleY < 1);, +                    boolean canZoomMoreY = isZoomingOut ?, +                            h.canZoomOutMoreY() :, +                            h.canZoomInMoreY();, +                    if (canZoomMoreY) {, +, +                        mMatrix.set(mSavedMatrix);, +    }, +            mChart.highlightValue(h, true);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +++ b/MPChartLib/src/com/github/mikephil/charting/listener/BarLineChartTouchListener.java, +    /**, +     * the minimum distance between the pointers that will trigger a zoom gesture, +     */, +    private float mMinScalePointerDistance;, +, +, +        this.mMinScalePointerDistance = Utils.convertDpToPixel(3.5f);, +        // perform the transformation, update the chart, +        if (event.getPointerCount() >= 2) { // two finger zoom, +            // get the distance between the pointers of the touch event, +            if (totalDist > mMinScalePointerDistance) {, +                ViewPortHandler h = mChart.getViewPortHandler();, +                // take actions depending on the activated touch mode, +, +                            h.canZoomOutMoreX() :, +                            h.canZoomInMoreX();, +, +                    boolean canZoomMoreY = isZoomingOut ?, +                            h.canZoomOutMoreY() :, +                            h.canZoomInMoreY();, +                    if (canZoomMoreY || canZoomMoreX) {, +                            h.canZoomOutMoreX() :, +                            h.canZoomInMoreX();, +                    boolean isZoomingOut = (scaleY < 1);, +                    boolean canZoomMoreY = isZoomingOut ?, +                            h.canZoomOutMoreY() :, +                            h.canZoomInMoreY();, +                    if (canZoomMoreY) {, +, +                        mMatrix.set(mSavedMatrix);, +    }, +            mChart.highlightValue(h, true);, +++ b/MPChartLib/src/com/github/mikephil/charting/utils/ViewPortHandler.java, +     * buffer for storing the 9 matrix values of a 3x3 matrix, +        // min scale-x is 1f, +        mTransX = Math.min(Math.max(curTransX, maxTransX - mTransOffsetX), mTransOffsetX);, +        mTransY = Math.max(Math.min(curTransY, maxTransY + mTransOffsetY), -mTransOffsetY);, +    public float getMinScaleX() {, +        return mMinScaleX;, +    }, +, +    public float getMaxScaleX() {, +        return mMaxScaleX;, +    }, +, +    public float getMinScaleY() {, +        return mMinScaleY;, +    }, +, +    public float getMaxScaleY() {, +        return mMaxScaleY;, +    }, +, +    /**, +     * Returns true if the chart is not yet fully zoomed out on the y-axis, +     *, +     * @return, +     */, +    public boolean canZoomOutMoreY() {, +        return (mScaleY > mMinScaleY);, +    }, +, +    /**]