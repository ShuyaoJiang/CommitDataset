[+++ b/MPChartLib/src/com/github/mikephil/charting/renderer/PieChartRenderer.java, +        float angle = mChart.getRotationAngle();, +                            (angle + sliceSpace / 2f) * mAnimator.getPhaseY(),, +                        * Math.cos(Math.toRadians((rotationAngle + absoluteAngles[cnt] - offset), +                        * mAnimator.getPhaseY())) + center.x);, +                        * Math.sin(Math.toRadians((rotationAngle + absoluteAngles[cnt] - offset), +                        * mAnimator.getPhaseY())) + center.y);, +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/PieChartRenderer.java, +        float angle = mChart.getRotationAngle();, +                            (angle + sliceSpace / 2f) * mAnimator.getPhaseY(),, +                        * Math.cos(Math.toRadians((rotationAngle + absoluteAngles[cnt] - offset), +                        * mAnimator.getPhaseY())) + center.x);, +                        * Math.sin(Math.toRadians((rotationAngle + absoluteAngles[cnt] - offset), +                        * mAnimator.getPhaseY())) + center.y);, +++ b/MPChartLib/src/com/github/mikephil/charting/utils/Utils.java, +    private static Paint.FontMetrics mFontMetricsBuffer = new Paint.FontMetrics();, +    public static void drawText(Canvas c, String text, float x, float y,, +                                Paint paint,, +                                PointF anchor, float angleDegrees) {, +        final float lineHeight = paint.getFontMetrics(mFontMetricsBuffer);, +, +        // Android does not snap the bounds to line boundaries,, +        //  and draws from bottom to top., +        // And we want to normalize it., +        drawOffsetY += lineHeight;, +            drawOffsetY -= lineHeight * 0.5f;, +                        lineHeight,, +                drawOffsetY -= lineHeight * anchor.y;]