[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/custom/CustomScatterShapeRenderer.java, +    public void renderShape(Canvas c, IScatterDataSet dataSet, ViewPortHandler viewPortHandler,, +                            float posX, float posY, Paint renderPaint) {, +        final float shapeHalf = dataSet.getScatterShapeSize() / 2f;, +                posX - shapeHalf,, +                posY - shapeHalf,, +                posX + shapeHalf,, +                posY + shapeHalf,, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/custom/CustomScatterShapeRenderer.java, +    public void renderShape(Canvas c, IScatterDataSet dataSet, ViewPortHandler viewPortHandler,, +                            float posX, float posY, Paint renderPaint) {, +        final float shapeHalf = dataSet.getScatterShapeSize() / 2f;, +                posX - shapeHalf,, +                posY - shapeHalf,, +                posX + shapeHalf,, +                posY + shapeHalf,, +++ /dev/null, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/custom/CustomScatterShapeRenderer.java, +    public void renderShape(Canvas c, IScatterDataSet dataSet, ViewPortHandler viewPortHandler,, +                            float posX, float posY, Paint renderPaint) {, +        final float shapeHalf = dataSet.getScatterShapeSize() / 2f;, +                posX - shapeHalf,, +                posY - shapeHalf,, +                posX + shapeHalf,, +                posY + shapeHalf,, +++ /dev/null, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/ScatterChartRenderer.java, +import android.util.Log;, +    float[] mPixelBuffer = new float[2];, +, +        ViewPortHandler viewPortHandler = mViewPortHandler;, +, +        if (renderer == null) {, +            Log.i("MISSING", "There's no IShapeRenderer specified for ScatterDataSet");, +            return;, +        }, +        int max = (int)(Math.min(, +                Math.ceil((float)dataSet.getEntryCount() * mAnimator.getPhaseX()),, +                (float)dataSet.getEntryCount()));, +, +        for (int i = 0; i < max; i++) {, +, +            Entry e = dataSet.getEntryForIndex(i);, +, +            mPixelBuffer[0] = e.getX();, +            mPixelBuffer[1] = e.getY() * phaseY;, +, +            trans.pointValuesToPixel(mPixelBuffer);, +, +            if (!viewPortHandler.isInBoundsRight(mPixelBuffer[0])), +                break;, +, +            if (!viewPortHandler.isInBoundsLeft(mPixelBuffer[0]), +                    || !viewPortHandler.isInBoundsY(mPixelBuffer[1])), +                continue;, +, +            mRenderPaint.setColor(dataSet.getColor(i / 2));, +            renderer.renderShape(, +                    c, dataSet, mViewPortHandler,, +                    mPixelBuffer[0], mPixelBuffer[1],, +                    mRenderPaint);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/custom/CustomScatterShapeRenderer.java, +    public void renderShape(Canvas c, IScatterDataSet dataSet, ViewPortHandler viewPortHandler,, +                            float posX, float posY, Paint renderPaint) {, +        final float shapeHalf = dataSet.getScatterShapeSize() / 2f;, +                posX - shapeHalf,, +                posY - shapeHalf,, +                posX + shapeHalf,, +                posY + shapeHalf,, +++ /dev/null, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/ScatterChartRenderer.java, +import android.util.Log;, +    float[] mPixelBuffer = new float[2];, +, +        ViewPortHandler viewPortHandler = mViewPortHandler;, +, +        if (renderer == null) {, +            Log.i("MISSING", "There's no IShapeRenderer specified for ScatterDataSet");, +            return;, +        }, +        int max = (int)(Math.min(, +                Math.ceil((float)dataSet.getEntryCount() * mAnimator.getPhaseX()),, +                (float)dataSet.getEntryCount()));, +, +        for (int i = 0; i < max; i++) {, +, +            Entry e = dataSet.getEntryForIndex(i);, +, +            mPixelBuffer[0] = e.getX();, +            mPixelBuffer[1] = e.getY() * phaseY;, +, +            trans.pointValuesToPixel(mPixelBuffer);, +, +            if (!viewPortHandler.isInBoundsRight(mPixelBuffer[0])), +                break;, +, +            if (!viewPortHandler.isInBoundsLeft(mPixelBuffer[0]), +                    || !viewPortHandler.isInBoundsY(mPixelBuffer[1])), +                continue;, +]