[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        Log.i("", "low: " + mChart.getLowestVisibleXIndex() + ", high: " + mChart.getHighestVisibleXIndex());, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        Log.i("", "low: " + mChart.getLowestVisibleXIndex() + ", high: " + mChart.getHighestVisibleXIndex());, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +    }, +, +    /**, +     * Returns the lowest x-index (value on the x-axis) that is still visible on, +     * the chart., +     * , +     * @return, +     */, +    public int getLowestVisibleXIndex() {, +        float[] pts = new float[] {, +                mViewPortHandler.contentLeft(), mViewPortHandler.contentBottom(), +        };, +        getTransformer(AxisDependency.LEFT).pixelsToValue(pts);, +        return (pts[0] <= 0) ? 0 : (int) (pts[0] + 1);, +    }, +, +    /**, +     * Returns the highest x-index (value on the x-axis) that is still visible, +     * on the chart., +     * , +     * @return, +     */, +    public int getHighestVisibleXIndex() {, +        float[] pts = new float[] {, +                mViewPortHandler.contentRight(), mViewPortHandler.contentBottom(), +        };, +        getTransformer(AxisDependency.LEFT).pixelsToValue(pts);, +        return (pts[0] >= mData.getXValCount()) ? mData.getXValCount() - 1 : (int) pts[0];, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        Log.i("", "low: " + mChart.getLowestVisibleXIndex() + ", high: " + mChart.getHighestVisibleXIndex());, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +    }, +, +    /**, +     * Returns the lowest x-index (value on the x-axis) that is still visible on, +     * the chart., +     * , +     * @return, +     */, +    public int getLowestVisibleXIndex() {, +        float[] pts = new float[] {, +                mViewPortHandler.contentLeft(), mViewPortHandler.contentBottom(), +        };, +        getTransformer(AxisDependency.LEFT).pixelsToValue(pts);, +        return (pts[0] <= 0) ? 0 : (int) (pts[0] + 1);, +    }, +, +    /**, +     * Returns the highest x-index (value on the x-axis) that is still visible, +     * on the chart., +     * , +     * @return, +     */, +    public int getHighestVisibleXIndex() {, +        float[] pts = new float[] {, +                mViewPortHandler.contentRight(), mViewPortHandler.contentBottom(), +        };, +        getTransformer(AxisDependency.LEFT).pixelsToValue(pts);, +        return (pts[0] >= mData.getXValCount()) ? mData.getXValCount() - 1 : (int) pts[0];, +++ b/README.md, +MPAndroidChart, +=======, +A simple and powerful charting library for Android, supporting line-, bar-, scatter-, candlestick-, pie- and radarcharts (spider web), as well as scaling, dragging, selecting and animations. **Supporting Android 2.2 (API level 8)** and upwards., +Remember: *It's all about the looks.*, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        Log.i("", "low: " + mChart.getLowestVisibleXIndex() + ", high: " + mChart.getHighestVisibleXIndex());, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +    }, +, +    /**, +     * Returns the lowest x-index (value on the x-axis) that is still visible on, +     * the chart., +     * , +     * @return, +     */, +    public int getLowestVisibleXIndex() {, +        float[] pts = new float[] {, +                mViewPortHandler.contentLeft(), mViewPortHandler.contentBottom(), +        };, +        getTransformer(AxisDependency.LEFT).pixelsToValue(pts);, +        return (pts[0] <= 0) ? 0 : (int) (pts[0] + 1);, +    }, +, +    /**, +     * Returns the highest x-index (value on the x-axis) that is still visible, +     * on the chart., +     * , +     * @return, +     */, +    public int getHighestVisibleXIndex() {, +        float[] pts = new float[] {, +                mViewPortHandler.contentRight(), mViewPortHandler.contentBottom(), +        };, +        getTransformer(AxisDependency.LEFT).pixelsToValue(pts);, +        return (pts[0] >= mData.getXValCount()) ? mData.getXValCount() - 1 : (int) pts[0];]