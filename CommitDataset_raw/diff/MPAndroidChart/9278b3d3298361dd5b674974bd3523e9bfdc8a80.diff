[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        Log.i("", "low: " + mChart.getLowestVisibleXIndex() + ", high: " + mChart.getHighestVisibleXIndex());, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        Log.i("", "low: " + mChart.getLowestVisibleXIndex() + ", high: " + mChart.getHighestVisibleXIndex());, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +import com.github.mikephil.charting.data.filter.Approximator;, +import com.github.mikephil.charting.data.filter.Approximator.ApproximatorType;, +import com.github.mikephil.charting.highlight.Highlight;, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        Log.i("", "low: " + mChart.getLowestVisibleXIndex() + ", high: " + mChart.getHighestVisibleXIndex());, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +import com.github.mikephil.charting.data.filter.Approximator;, +import com.github.mikephil.charting.data.filter.Approximator.ApproximatorType;, +import com.github.mikephil.charting.highlight.Highlight;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        if (mViewPortHandler.hasChartDimens()) {, +            post(job);, +        } else {, +            mJobs.add(job);, +        }, +        if (mViewPortHandler.hasChartDimens()) {, +            post(job);, +        } else {, +            mJobs.add(job);, +        }, +     * x-index on the x-axis, and center the viewport to the specified y-value, +        if (mViewPortHandler.hasChartDimens()) {, +            post(job);, +        } else {, +            mJobs.add(job);, +     * x-index and y-value., +    public void centerViewTo(int xIndex, float yValue, AxisDependency axis) {, +        if (mViewPortHandler.hasChartDimens()) {, +            post(job);, +        } else {, +            mJobs.add(job);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        Log.i("", "low: " + mChart.getLowestVisibleXIndex() + ", high: " + mChart.getHighestVisibleXIndex());, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +import com.github.mikephil.charting.data.filter.Approximator;, +import com.github.mikephil.charting.data.filter.Approximator.ApproximatorType;, +import com.github.mikephil.charting.highlight.Highlight;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        if (mViewPortHandler.hasChartDimens()) {, +            post(job);, +        } else {, +            mJobs.add(job);, +        }, +        if (mViewPortHandler.hasChartDimens()) {, +            post(job);, +        } else {, +            mJobs.add(job);, +        }, +     * x-index on the x-axis, and center the viewport to the specified y-value, +        if (mViewPortHandler.hasChartDimens()) {, +            post(job);, +        } else {, +            mJobs.add(job);, +     * x-index and y-value., +    public void centerViewTo(int xIndex, float yValue, AxisDependency axis) {, +        if (mViewPortHandler.hasChartDimens()) {, +            post(job);, +        } else {, +            mJobs.add(job);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        Log.i("", "low: " + mChart.getLowestVisibleXIndex() + ", high: " + mChart.getHighestVisibleXIndex());, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +import com.github.mikephil.charting.data.filter.Approximator;, +import com.github.mikephil.charting.data.filter.Approximator.ApproximatorType;, +import com.github.mikephil.charting.highlight.Highlight;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        if (mViewPortHandler.hasChartDimens()) {, +            post(job);, +        } else {, +            mJobs.add(job);, +        }, +        if (mViewPortHandler.hasChartDimens()) {, +            post(job);, +        } else {, +            mJobs.add(job);, +        }, +     * x-index on the x-axis, and center the viewport to the specified y-value, +        if (mViewPortHandler.hasChartDimens()) {, +            post(job);, +        } else {, +            mJobs.add(job);, +     * x-index and y-value., +    public void centerViewTo(int xIndex, float yValue, AxisDependency axis) {, +        if (mViewPortHandler.hasChartDimens()) {, +            post(job);, +        } else {, +            mJobs.add(job);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java, +import com.github.mikephil.charting.utils.ColorTemplate;, +     * if true, the hole will see-through to the inner ends of the slices, +     */, +    private boolean mDrawHoleTransparent = true;, +]