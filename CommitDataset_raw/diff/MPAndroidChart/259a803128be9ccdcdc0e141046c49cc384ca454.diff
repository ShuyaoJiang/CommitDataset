[+++ b/MPChartExample/src/com/example/mpchartexample/LineChartActivity.java, +import com.github.mikephil.charting.charts.BarLineChartBase.BorderStyle;, +        ct.addDataSetColors(new int[] {, +            R.color.colorful_1, +        }, this);, +        mChart.setDrawBorder(true);, +        mChart.setBorderStyles(new BorderStyle[] { BorderStyle.BOTTOM });, +, +        // no description text, +        mChart.setDescription("");, +, +        // // enable / disable grid lines, +        // mChart.setDrawVerticalGrid(false);, +        // mChart.setDrawHorizontalGrid(false);, +        //, +        // // enable / disable grid background, +        // mChart.setDrawGridBackground(false);, +        //, +        // mChart.setDrawXLegend(false);, +        // mChart.setDrawYLegend(false);, +, +++ b/MPChartExample/src/com/example/mpchartexample/LineChartActivity.java, +import com.github.mikephil.charting.charts.BarLineChartBase.BorderStyle;, +        ct.addDataSetColors(new int[] {, +            R.color.colorful_1, +        }, this);, +        mChart.setDrawBorder(true);, +        mChart.setBorderStyles(new BorderStyle[] { BorderStyle.BOTTOM });, +, +        // no description text, +        mChart.setDescription("");, +, +        // // enable / disable grid lines, +        // mChart.setDrawVerticalGrid(false);, +        // mChart.setDrawHorizontalGrid(false);, +        //, +        // // enable / disable grid background, +        // mChart.setDrawGridBackground(false);, +        //, +        // mChart.setDrawXLegend(false);, +        // mChart.setDrawYLegend(false);, +, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +    protected Paint mBorderPaint;, +    /** flag indicating if the vertical grid should be drawn or not */, +    protected boolean mDrawVerticalGrid = true;, +, +    /** flag indicating if the horizontal grid should be drawn or not */, +    protected boolean mDrawHorizontalGrid = true;, +, +    /** flag indicating if the y-legend should be drawn or not */, +    protected boolean mDrawYLegend = true;, +, +    /** flag indicating if the x-legend should be drawn or not */, +    protected boolean mDrawXLegend = true;, +, +    /** flag indicating if the chart border rectangle should be drawn or not */, +    protected boolean mDrawBorder = true;, +, +    /** flag indicating if the grid background should be drawn or not */, +    protected boolean mDrawGridBackground = true;, +, +        mBorderPaint = new Paint();, +        mBorderPaint.setColor(Color.BLACK);, +        mBorderPaint.setStrokeWidth(mGridWidth * 2f);, +        mBorderPaint.setStyle(Style.STROKE);, +        // if data filtering is enabled, +//            Log.i(LOG_TAG, "Filtering disabled.");, +        drawBorder();, +, +        if (!mDrawXLegend), +            return;, +, +        if (!mDrawYLegend), +            return;, +, +        float xPos = mOffsetLeft - 10;, +, +                mDrawCanvas.drawText(text + mUnit, xPos, positions[i * 2 + 1],, +                mDrawCanvas.drawText(text, xPos, positions[i * 2 + 1], mYLegendPaint);, +    /** enums for all different border styles */, +    public enum BorderStyle {, +        LEFT, RIGHT, TOP, BOTTOM, +    }, +, +    /**, +     * array that holds positions where to draw the chart border lines, +     */, +    private BorderStyle[] mBorderStyles = new BorderStyle[] {, +            BorderStyle.BOTTOM, +    };, +, +    protected void drawBorder() {, +        if (!mDrawBorder || mBorderStyles == null), +            return;, +, +        for (int i = 0; i < mBorderStyles.length; i++) {, +, +            switch (mBorderStyles[i]) {, +                case LEFT:]