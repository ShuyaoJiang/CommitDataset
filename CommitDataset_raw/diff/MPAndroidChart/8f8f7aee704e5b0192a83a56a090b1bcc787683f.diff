[+++ b/MPChartLib/src/com/github/mikephil/charting/ColorTemplate.java, +     * DataSet color array in the template with just one color. This is, +     * Returns the color value at the given index from the DataSet at the given, +     * index. If index is outofbounds, it restart at lower indices., +        return mDataSetColors.get(dataSetIndex).get(colorIndex % mDataSetColors.get(dataSetIndex).size());, +++ b/MPChartLib/src/com/github/mikephil/charting/ColorTemplate.java, +     * DataSet color array in the template with just one color. This is, +     * Returns the color value at the given index from the DataSet at the given, +     * index. If index is outofbounds, it restart at lower indices., +        return mDataSetColors.get(dataSetIndex).get(colorIndex % mDataSetColors.get(dataSetIndex).size());, +++ b/MPChartLib/src/com/github/mikephil/charting/DataSet.java, +     * Returns the index of the Series object with the given x-index in the, +     * Series array of the DataSet. IMPORTANT: This method does calculations at, +     * runtime, do not over-use in performance critical situations., +     * , +     * @param xIndex, +     * @return, +     */, +    public int getIndexInSeries(int xIndex) {, +        , +        for(int i = 0; i < mYVals.size(); i++) {, +            if(xIndex == mYVals.get(i).getXIndex()) return i;, +        }, +        , +        return -1;, +    }, +, +    /**, +++ b/MPChartLib/src/com/github/mikephil/charting/ColorTemplate.java, +     * DataSet color array in the template with just one color. This is, +     * Returns the color value at the given index from the DataSet at the given, +     * index. If index is outofbounds, it restart at lower indices., +        return mDataSetColors.get(dataSetIndex).get(colorIndex % mDataSetColors.get(dataSetIndex).size());, +++ b/MPChartLib/src/com/github/mikephil/charting/DataSet.java, +     * Returns the index of the Series object with the given x-index in the, +     * Series array of the DataSet. IMPORTANT: This method does calculations at, +     * runtime, do not over-use in performance critical situations., +     * , +     * @param xIndex, +     * @return, +     */, +    public int getIndexInSeries(int xIndex) {, +        , +        for(int i = 0; i < mYVals.size(); i++) {, +            if(xIndex == mYVals.get(i).getXIndex()) return i;, +        }, +        , +        return -1;, +    }, +, +    /**, +++ b/MPChartLib/src/com/github/mikephil/charting/PieChart.java, +                int xIndex = mIndicesToHightlight[i].getXIndex();, +                if (xIndex >= mDrawAngles.length || xIndex > mDeltaX), +                if (xIndex == 0), +                    angle = mChartAngle + mAbsoluteAngles[xIndex - 1];, +                float sliceDegrees = mDrawAngles[xIndex];, +                DataSet set = mData.getDataSetByIndex(mIndicesToHightlight[i], +                int color = mCt.getDataSetColor(mIndicesToHightlight[i], +                        .getDataSetIndex(), set.getIndexInSeries(xIndex));, +, +                mRenderPaint.setColor(color);, +                    mRenderPaint.setColor(colors.get(j % colors.size()));, +++ b/MPChartLib/src/com/github/mikephil/charting/ColorTemplate.java, +     * DataSet color array in the template with just one color. This is, +     * Returns the color value at the given index from the DataSet at the given, +     * index. If index is outofbounds, it restart at lower indices., +        return mDataSetColors.get(dataSetIndex).get(colorIndex % mDataSetColors.get(dataSetIndex).size());, +++ b/MPChartLib/src/com/github/mikephil/charting/DataSet.java, +     * Returns the index of the Series object with the given x-index in the, +     * Series array of the DataSet. IMPORTANT: This method does calculations at, +     * runtime, do not over-use in performance critical situations., +     * , +     * @param xIndex, +     * @return, +     */, +    public int getIndexInSeries(int xIndex) {, +        , +        for(int i = 0; i < mYVals.size(); i++) {, +            if(xIndex == mYVals.get(i).getXIndex()) return i;, +        }, +        , +        return -1;, +    }, +, +    /**, +++ b/MPChartLib/src/com/github/mikephil/charting/PieChart.java, +                int xIndex = mIndicesToHightlight[i].getXIndex();, +                if (xIndex >= mDrawAngles.length || xIndex > mDeltaX), +                if (xIndex == 0), +                    angle = mChartAngle + mAbsoluteAngles[xIndex - 1];, +                float sliceDegrees = mDrawAngles[xIndex];, +                DataSet set = mData.getDataSetByIndex(mIndicesToHightlight[i], +                int color = mCt.getDataSetColor(mIndicesToHightlight[i], +                        .getDataSetIndex(), set.getIndexInSeries(xIndex));, +, +                mRenderPaint.setColor(color);, +                    mRenderPaint.setColor(colors.get(j % colors.size()));, +++ b/README.md, + - **LineChart (single line)**]