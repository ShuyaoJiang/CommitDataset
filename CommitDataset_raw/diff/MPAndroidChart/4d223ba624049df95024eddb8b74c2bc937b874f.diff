[+++ b/MPChartExample/res/layout/activity_barchart.xml, +        android:max="2000", +++ b/MPChartExample/res/layout/activity_barchart.xml, +        android:max="2000", +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +import com.github.mikephil.charting.components.YAxis.YAxisLabelPosition;, +++ b/MPChartExample/res/layout/activity_barchart.xml, +        android:max="2000", +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +import com.github.mikephil.charting.components.YAxis.YAxisLabelPosition;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +            Log.i(LOG_TAG, "Drawtime: " + drawtime + " ms, average: " + average + " ms, cycles: ", +                    + drawCycles);, +        if (mRenderer != null), +++ b/MPChartExample/res/layout/activity_barchart.xml, +        android:max="2000", +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +import com.github.mikephil.charting.components.YAxis.YAxisLabelPosition;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +            Log.i(LOG_TAG, "Drawtime: " + drawtime + " ms, average: " + average + " ms, cycles: ", +                    + drawCycles);, +        if (mRenderer != null), +++ b/MPChartLib/src/com/github/mikephil/charting/charts/CombinedChart.java, +        mRenderer.initBuffers();, +++ b/MPChartExample/res/layout/activity_barchart.xml, +        android:max="2000", +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +import com.github.mikephil.charting.components.YAxis.YAxisLabelPosition;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +            Log.i(LOG_TAG, "Drawtime: " + drawtime + " ms, average: " + average + " ms, cycles: ", +                    + drawCycles);, +        if (mRenderer != null), +++ b/MPChartLib/src/com/github/mikephil/charting/charts/CombinedChart.java, +        mRenderer.initBuffers();, +++ b/MPChartLib/src/com/github/mikephil/charting/components/YAxis.java, + * RadarChart. Customizations that affect the value range of the axis need to be, + * applied before setting data for the chart., +++ b/MPChartExample/res/layout/activity_barchart.xml, +        android:max="2000", +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +import com.github.mikephil.charting.components.YAxis.YAxisLabelPosition;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +            Log.i(LOG_TAG, "Drawtime: " + drawtime + " ms, average: " + average + " ms, cycles: ", +                    + drawCycles);, +        if (mRenderer != null), +++ b/MPChartLib/src/com/github/mikephil/charting/charts/CombinedChart.java, +        mRenderer.initBuffers();, +++ b/MPChartLib/src/com/github/mikephil/charting/components/YAxis.java, + * RadarChart. Customizations that affect the value range of the axis need to be, + * applied before setting data for the chart., +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/BarChartRenderer.java, +        calcXBounds(trans);, +        int step = mChart.getBarData().getDataSetCount();, +        float multi = (float) step + space;, +        for (int j = 0; j < entries.size() * mAnimator.getPhaseX(); j++) {, +            // check bounds, +            if (!fitsBounds(((float) e.getXIndex()) * multi, mMinX - multi, mMaxX + multi)), +                continue;, +, +            float x = e.getXIndex() + j * (step - 1) + index, +    protected void prepareBarHighlight(float x, float y, float barspace, float from,, +            Transformer trans) {, +++ b/MPChartExample/res/layout/activity_barchart.xml, +        android:max="2000", +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +import com.github.mikephil.charting.components.YAxis.YAxisLabelPosition;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +            Log.i(LOG_TAG, "Drawtime: " + drawtime + " ms, average: " + average + " ms, cycles: ", +                    + drawCycles);, +        if (mRenderer != null), +++ b/MPChartLib/src/com/github/mikephil/charting/charts/CombinedChart.java, +        mRenderer.initBuffers();, +++ b/MPChartLib/src/com/github/mikephil/charting/components/YAxis.java, + * RadarChart. Customizations that affect the value range of the axis need to be, + * applied before setting data for the chart., +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/BarChartRenderer.java, +        calcXBounds(trans);, +        int step = mChart.getBarData().getDataSetCount();, +        float multi = (float) step + space;, +        for (int j = 0; j < entries.size() * mAnimator.getPhaseX(); j++) {, +            // check bounds, +            if (!fitsBounds(((float) e.getXIndex()) * multi, mMinX - multi, mMaxX + multi)), +                continue;, +, +            float x = e.getXIndex() + j * (step - 1) + index, +    protected void prepareBarHighlight(float x, float y, float barspace, float from,, +            Transformer trans) {, +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/DataRenderer.java, +import com.github.mikephil.charting.utils.Transformer;, +    protected int mMinX = 0;, +, +    protected int mMaxX = 0;, +, +    /**, +     * Calculates the minimum and maximum x-value the chart can currently, +     * display (with the given zoom level)., +     * , +     * @param trans, +     */, +    protected void calcXBounds(Transformer trans) {]