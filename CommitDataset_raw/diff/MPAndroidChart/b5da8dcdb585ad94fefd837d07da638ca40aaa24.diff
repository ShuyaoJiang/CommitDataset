[+++ b/MPChartExample/res/layout/activity_linechart.xml, +        android:max="150", +        android:max="1500", +++ b/MPChartExample/res/layout/activity_linechart.xml, +        android:max="150", +        android:max="1500", +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        LimitLine ll1 = new LimitLine(150f, "Upper Limit");, +        leftAxis.setAxisMaxValue(200f);, +++ b/MPChartExample/res/layout/activity_linechart.xml, +        android:max="150", +        android:max="1500", +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        LimitLine ll1 = new LimitLine(150f, "Upper Limit");, +        leftAxis.setAxisMaxValue(200f);, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/LineChartRenderer.java, +    protected Path mGenerateFilledPathBuffer = new Path();, +, +        final Path filled = mGenerateFilledPathBuffer;, +, +        final int startingIndex = bounds.min;, +        final int endingIndex = bounds.range + bounds.min;, +        final int indexInterval = 128;, +, +        int currentStartIndex = 0;, +        int currentEndIndex = indexInterval;, +        int iterations = 0;, +, +        // Doing this iteratively in order to avoid OutOfMemory errors that can happen on large bounds sets., +        do{, +            currentStartIndex = startingIndex + (iterations * indexInterval);, +            currentEndIndex = currentStartIndex + indexInterval;, +            currentEndIndex = currentEndIndex > endingIndex ? endingIndex : currentEndIndex;, +, +            if(currentStartIndex <= currentEndIndex) {, +                generateFilledPath(dataSet, currentStartIndex, currentEndIndex, filled);, +, +, +            iterations++;, +, +        }while(currentStartIndex <= currentEndIndex);, +, +    }, +, +     * Generates a path that is used for filled drawing., +     * @param dataSet The dataset from which to read the entries., +     * @param startIndex The index from which to start reading the dataset, +     * @param endIndex The index from which to stop reading the dataset, +     * @param outputPath The path object that will be assigned the chart data., +     *, +    private void generateFilledPath(final ILineDataSet dataSet, final int startIndex, final int endIndex, final Path outputPath) {, +        final float fillMin = dataSet.getFillFormatter().getFillLinePosition(dataSet, mChart);, +        final float phaseY = mAnimator.getPhaseY();, +        final Path filled = outputPath;, +, +        final Entry entry = dataSet.getEntryForIndex(startIndex);, +        Entry currentEntry = null;, +        Entry previousEntry = null;, +        for (int x = startIndex + 1 ; x <= endIndex ; x++) {, +            currentEntry = dataSet.getEntryForIndex(x);, +            if (isDrawSteppedEnabled && previousEntry != null) {, +                filled.lineTo(currentEntry.getX(), previousEntry.getY() * phaseY);, +            filled.lineTo(currentEntry.getX(), currentEntry.getY() * phaseY);, +, +            previousEntry = currentEntry;, +        if(currentEntry != null) {, +            filled.lineTo(currentEntry.getX(), fillMin);, +        }, +]