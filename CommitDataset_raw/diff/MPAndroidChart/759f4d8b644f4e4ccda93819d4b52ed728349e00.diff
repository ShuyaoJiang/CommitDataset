[+++ b/MPChartLib/src/com/github/mikephil/charting/components/Legend.java, +    public enum LegendDirection {, +        LEFT_TO_RIGHT, RIGHT_TO_LEFT, +    }, +, +    /** the text direction for the legend */, +    private LegendDirection mDirection = LegendDirection.LEFT_TO_RIGHT;, +, +     * returns the text direction of the legend, +     *, +     * @return, +     */, +    public LegendDirection getDirection() {, +        return mDirection;, +    }, +, +    /**, +     * sets the text direction of the legend, +     *, +     * @param pos, +     */, +    public void setDirection(LegendDirection pos) {, +        mDirection = pos;, +    }, +, +    /**, +++ b/MPChartLib/src/com/github/mikephil/charting/components/Legend.java, +    public enum LegendDirection {, +        LEFT_TO_RIGHT, RIGHT_TO_LEFT, +    }, +, +    /** the text direction for the legend */, +    private LegendDirection mDirection = LegendDirection.LEFT_TO_RIGHT;, +, +     * returns the text direction of the legend, +     *, +     * @return, +     */, +    public LegendDirection getDirection() {, +        return mDirection;, +    }, +, +    /**, +     * sets the text direction of the legend, +     *, +     * @param pos, +     */, +    public void setDirection(LegendDirection pos) {, +        mDirection = pos;, +    }, +, +    /**, +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/LegendRenderer.java, +        int[] colors = mLegend.getColors();, +        float formToTextSpace = mLegend.getFormToTextSpace();, +        float xEntrySpace = mLegend.getXEntrySpace();, +        Legend.LegendDirection direction = mLegend.getDirection();, +        float formTextSpaceAndForm = formToTextSpace + formSize;, +        // contains the stacked legend size in pixels, +                if (direction == Legend.LegendDirection.RIGHT_TO_LEFT) {, +                    posX += mLegend.mNeededWidth;, +                }, +, +                for (int i = 0, count = labels.length; i < count; i++) {, +, +                    boolean drawingForm = colors[i] != -2;, +, +                    if (drawingForm) {, +                        if (direction == Legend.LegendDirection.RIGHT_TO_LEFT), +                            posX -= formSize;, +                        if (direction == Legend.LegendDirection.LEFT_TO_RIGHT), +                            posX += formSize;, +                    }, +, +                        // spacing between form and label, +                        if (drawingForm), +                            posX += direction == Legend.LegendDirection.RIGHT_TO_LEFT ?, +                                    -formToTextSpace :, +                                    formToTextSpace;, +                        if (direction == Legend.LegendDirection.RIGHT_TO_LEFT), +                            posX -= Utils.calcTextWidth(mLegendLabelPaint, labels[i]);, +, +                        drawLabel(c, posX, posY, labels[i]);, +, +                        if (direction == Legend.LegendDirection.LEFT_TO_RIGHT), +                            posX += Utils.calcTextWidth(mLegendLabelPaint, labels[i]);, +, +                        posX += direction == Legend.LegendDirection.RIGHT_TO_LEFT ?, +                                -xEntrySpace :, +                                xEntrySpace;, +                        posX += direction == Legend.LegendDirection.RIGHT_TO_LEFT ? -stackSpace : stackSpace;, +                for (int i = 0, count = labels.length; i < count; i++) {, +                    boolean drawingForm = colors[i] != -2;, +                    if (direction == Legend.LegendDirection.RIGHT_TO_LEFT && drawingForm) {, +                        posX -= formSize;, +                        drawForm(c, posX, posY - mLegend.mTextHeightMax / 2f, i, mLegend);, +                        posX -= formToTextSpace;, +                    if (labels[i] != null) {, +                        posX -= Utils.calcTextWidth(mLegendLabelPaint, labels[i]);, +                        drawLabel(c, posX, posY, labels[i]);]