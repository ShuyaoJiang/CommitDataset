[+++ b/MPChartLib/src/com/github/mikephil/charting/buffer/AbstractBuffer.java, +     * @param data, +    public abstract void feed(T data);, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/AbstractBuffer.java, +     * @param data, +    public abstract void feed(T data);, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CircleBuffer.java, +import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;, +public class CircleBuffer extends AbstractBuffer<ILineDataSet> {, +    public void feed(ILineDataSet data) {, +            Entry e = data.getEntryForIndex(i);, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/AbstractBuffer.java, +     * @param data, +    public abstract void feed(T data);, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CircleBuffer.java, +import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;, +public class CircleBuffer extends AbstractBuffer<ILineDataSet> {, +    public void feed(ILineDataSet data) {, +            Entry e = data.getEntryForIndex(i);, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/LineBuffer.java, +import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;, +public class LineBuffer extends AbstractBuffer<ILineDataSet> {, +    public void feed(ILineDataSet data) {, +        moveTo(data.getEntryForIndex(mFrom).getXIndex(), data.getEntryForIndex(mFrom).getVal() * phaseY);, +            Entry e = data.getEntryForIndex(i);, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/AbstractBuffer.java, +     * @param data, +    public abstract void feed(T data);, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CircleBuffer.java, +import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;, +public class CircleBuffer extends AbstractBuffer<ILineDataSet> {, +    public void feed(ILineDataSet data) {, +            Entry e = data.getEntryForIndex(i);, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/LineBuffer.java, +import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;, +public class LineBuffer extends AbstractBuffer<ILineDataSet> {, +    public void feed(ILineDataSet data) {, +        moveTo(data.getEntryForIndex(mFrom).getXIndex(), data.getEntryForIndex(mFrom).getVal() * phaseY);, +            Entry e = data.getEntryForIndex(i);, +++ b/MPChartLib/src/com/github/mikephil/charting/data/DataSet.java, +    /**, +     * Returns the array of y-values that this DataSet represents., +     *, +     * @return, +     */, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/AbstractBuffer.java, +     * @param data, +    public abstract void feed(T data);, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CircleBuffer.java, +import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;, +public class CircleBuffer extends AbstractBuffer<ILineDataSet> {, +    public void feed(ILineDataSet data) {, +            Entry e = data.getEntryForIndex(i);, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/LineBuffer.java, +import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;, +public class LineBuffer extends AbstractBuffer<ILineDataSet> {, +    public void feed(ILineDataSet data) {, +        moveTo(data.getEntryForIndex(mFrom).getXIndex(), data.getEntryForIndex(mFrom).getVal() * phaseY);, +            Entry e = data.getEntryForIndex(i);, +++ b/MPChartLib/src/com/github/mikephil/charting/data/DataSet.java, +    /**, +     * Returns the array of y-values that this DataSet represents., +     *, +     * @return, +     */, +++ b/MPChartLib/src/com/github/mikephil/charting/interfaces/datasets/IDataSet.java, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/AbstractBuffer.java, +     * @param data, +    public abstract void feed(T data);, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CircleBuffer.java, +import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;, +public class CircleBuffer extends AbstractBuffer<ILineDataSet> {, +    public void feed(ILineDataSet data) {, +            Entry e = data.getEntryForIndex(i);, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/LineBuffer.java, +import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;, +public class LineBuffer extends AbstractBuffer<ILineDataSet> {, +    public void feed(ILineDataSet data) {, +        moveTo(data.getEntryForIndex(mFrom).getXIndex(), data.getEntryForIndex(mFrom).getVal() * phaseY);, +            Entry e = data.getEntryForIndex(i);, +++ b/MPChartLib/src/com/github/mikephil/charting/data/DataSet.java, +    /**, +     * Returns the array of y-values that this DataSet represents., +     *, +     * @return, +     */, +++ b/MPChartLib/src/com/github/mikephil/charting/interfaces/datasets/IDataSet.java, +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/LineChartRenderer.java, +import com.github.mikephil.charting.interfaces.dataprovider.LineDataProvider;, +import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;, +        if (dataSet.getEntryCount() < 1), +            drawCubic(c, dataSet);, +            drawLinear(c, dataSet);, +    protected void drawCubic(Canvas c, ILineDataSet dataSet) {, +        int entryCount = dataSet.getEntryCount();, +, +                minx + 2, dataSet.getEntryIndex(entryTo) + 1), entryCount);, +            Entry prevPrev = dataSet.getEntryForIndex(minx);, +            Entry prev = prevPrev;, +            Entry cur = prev;]