[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ScatterChartActivity.java, +        set1.setScatterShape(ScatterShape.SQUARE);, +        set2.setScatterShape(ScatterShape.CIRCLE);, +        set3.setScatterShape(ScatterShape.TRIANGLE);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ScatterChartActivity.java, +        set1.setScatterShape(ScatterShape.SQUARE);, +        set2.setScatterShape(ScatterShape.CIRCLE);, +        set3.setScatterShape(ScatterShape.TRIANGLE);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/fragments/ScatterChartFrag.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ScatterChartActivity.java, +        set1.setScatterShape(ScatterShape.SQUARE);, +        set2.setScatterShape(ScatterShape.CIRCLE);, +        set3.setScatterShape(ScatterShape.TRIANGLE);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/fragments/ScatterChartFrag.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/fragments/SimpleFragment.java, +import com.github.mikephil.charting.charts.ScatterChart;, +import com.github.mikephil.charting.charts.ScatterChart.ScatterShape;, +        ScatterShape[] shapes = ScatterChart.getAllPossibleShapes();, +        , +            ds.setScatterShapeSize(12f);, +            ds.setScatterShape(shapes[i % shapes.length]);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ScatterChartActivity.java, +        set1.setScatterShape(ScatterShape.SQUARE);, +        set2.setScatterShape(ScatterShape.CIRCLE);, +        set3.setScatterShape(ScatterShape.TRIANGLE);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/fragments/ScatterChartFrag.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/fragments/SimpleFragment.java, +import com.github.mikephil.charting.charts.ScatterChart;, +import com.github.mikephil.charting.charts.ScatterChart.ScatterShape;, +        ScatterShape[] shapes = ScatterChart.getAllPossibleShapes();, +        , +            ds.setScatterShapeSize(12f);, +            ds.setScatterShape(shapes[i % shapes.length]);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +                // if only single values are drawn (sum), +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ScatterChartActivity.java, +        set1.setScatterShape(ScatterShape.SQUARE);, +        set2.setScatterShape(ScatterShape.CIRCLE);, +        set3.setScatterShape(ScatterShape.TRIANGLE);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/fragments/ScatterChartFrag.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/fragments/SimpleFragment.java, +import com.github.mikephil.charting.charts.ScatterChart;, +import com.github.mikephil.charting.charts.ScatterChart.ScatterShape;, +        ScatterShape[] shapes = ScatterChart.getAllPossibleShapes();, +        , +            ds.setScatterShapeSize(12f);, +            ds.setScatterShape(shapes[i % shapes.length]);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +                // if only single values are drawn (sum), +++ b/MPChartLib/src/com/github/mikephil/charting/charts/ScatterChart.java, +     * , +            ScatterDataSet dataSet = dataSets.get(i);, +            float shapeHalf = dataSet.getScatterShapeSize() / 2f;, +, +            ScatterShape shape = dataSet.getScatterShape();, +                    mDrawCanvas.drawCircle(pos[j], pos[j + 1], shapeHalf, mRenderPaint);, +                    Path customShape = dataSet.getCustomScatterShape();, +, +                    if (customShape == null), +                    transformPath(customShape);, +                    mDrawCanvas.drawPath(customShape, mRenderPaint);, +            ArrayList<ScatterDataSet> dataSets = (ArrayList<ScatterDataSet>) mCurrentData, +                    .getDataSets();, +                ScatterDataSet dataSet = dataSets.get(i);, +                float shapeSize = dataSet.getScatterShapeSize();, +, +                                positions[j + 1] - shapeSize, mValuePaint);, +                                positions[j + 1] - shapeSize,, +     * Returns all possible predefined scattershapes., +    public static ScatterShape[] getAllPossibleShapes() {, +        return new ScatterShape[] {, +                ScatterShape.SQUARE, ScatterShape.CIRCLE, ScatterShape.TRIANGLE, ScatterShape.CROSS, +        };, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ScatterChartActivity.java, +        set1.setScatterShape(ScatterShape.SQUARE);, +        set2.setScatterShape(ScatterShape.CIRCLE);, +        set3.setScatterShape(ScatterShape.TRIANGLE);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/fragments/ScatterChartFrag.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/fragments/SimpleFragment.java, +import com.github.mikephil.charting.charts.ScatterChart;, +import com.github.mikephil.charting.charts.ScatterChart.ScatterShape;, +        ScatterShape[] shapes = ScatterChart.getAllPossibleShapes();, +        , +            ds.setScatterShapeSize(12f);, +            ds.setScatterShape(shapes[i % shapes.length]);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +                // if only single values are drawn (sum), +++ b/MPChartLib/src/com/github/mikephil/charting/charts/ScatterChart.java, +     * , +            ScatterDataSet dataSet = dataSets.get(i);, +            float shapeHalf = dataSet.getScatterShapeSize() / 2f;, +, +            ScatterShape shape = dataSet.getScatterShape();, +                    mDrawCanvas.drawCircle(pos[j], pos[j + 1], shapeHalf, mRenderPaint);, +                    Path customShape = dataSet.getCustomScatterShape();, +, +                    if (customShape == null), +                    transformPath(customShape);, +                    mDrawCanvas.drawPath(customShape, mRenderPaint);, +            ArrayList<ScatterDataSet> dataSets = (ArrayList<ScatterDataSet>) mCurrentData]