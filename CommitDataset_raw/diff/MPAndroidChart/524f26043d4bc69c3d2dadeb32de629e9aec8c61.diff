[+++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivity.java, +            float mult = (mSeekBarY.getProgress() + 1);, +            float val = (float) (Math.random() * mult) + 3;, +++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivity.java, +            float mult = (mSeekBarY.getProgress() + 1);, +            float val = (float) (Math.random() * mult) + 3;, +++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivityMultiDataset.java, +//        mChart.setDrawLegend(false);, +++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivity.java, +            float mult = (mSeekBarY.getProgress() + 1);, +            float val = (float) (Math.random() * mult) + 3;, +++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivityMultiDataset.java, +//        mChart.setDrawLegend(false);, +++ b/MPChartExample/src/com/example/mpchartexample/LineChartActivity.java, +            float val = (float) (Math.random() * mult) + 3;// + (float), +++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivity.java, +            float mult = (mSeekBarY.getProgress() + 1);, +            float val = (float) (Math.random() * mult) + 3;, +++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivityMultiDataset.java, +//        mChart.setDrawLegend(false);, +++ b/MPChartExample/src/com/example/mpchartexample/LineChartActivity.java, +            float val = (float) (Math.random() * mult) + 3;// + (float), +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +import com.github.mikephil.charting.utils.Legend.LegendPosition;, +        mLegendFormPaint.setStrokeWidth(3f);, +        , +        calculateOffsets();, +        if(mDrawLegend) {         , +, +            if(mLegend.getPosition() == LegendPosition.LEFT_OF_CHART) {, +                , +                mOffsetRight = mLegend.getMaximumEntryLength(mLegendLabelPaint);, +                , +            } else if(mLegend.getPosition() == LegendPosition.BELOW_CHART) {, +                mOffsetBottom = (int) mLegendLabelPaint.getTextSize() * 3;, +            }, +        }, +        , +        mOffsetLeft = Utils.calcTextWidth(mYLabelPaint, (int) mDeltaY + ".0000");, +        , +        prepareContentRect();, +        prepareMatrix();, +        float textSize = Utils.convertPixelsToDp(mLegendLabelPaint.getTextSize());, +        , +        // the amount of pixels the text needs to be set down to be on the same height as the form, +        float textDrop = (textSize + formSize) / 2f;, +, +        float posX, posY;, +, +                posX = mOffsetLeft;, +                posY = getHeight() - mOffsetBottom + textSize * 2;, +                    if(labels[i] == null) break;, +                    mLegend.drawForm(mDrawCanvas, posX, posY, mLegendFormPaint, i);, +                    posX += formToTextSpace;, +                    mLegend.drawLabel(mDrawCanvas, posX, posY + textDrop, mLegendLabelPaint, i);, +                    posX += Utils.calcTextWidth(mLegendLabelPaint, labels[i]) + entrySpace;, +                posX = getWidth() - mOffsetRight + formSize;, +                posY = mOffsetTop;, +                    if(labels[i] == null) break;, +                    mLegend.drawForm(mDrawCanvas, posX, posY, mLegendFormPaint, i);, +                    mLegend.drawLabel(mDrawCanvas, posX + formToTextSpace, posY + textDrop, mLegendLabelPaint, i);, +                    posY += entrySpace;, +++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivity.java, +            float mult = (mSeekBarY.getProgress() + 1);, +            float val = (float) (Math.random() * mult) + 3;, +++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivityMultiDataset.java, +//        mChart.setDrawLegend(false);, +++ b/MPChartExample/src/com/example/mpchartexample/LineChartActivity.java, +            float val = (float) (Math.random() * mult) + 3;// + (float), +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +import com.github.mikephil.charting.utils.Legend.LegendPosition;, +        mLegendFormPaint.setStrokeWidth(3f);, +        , +        calculateOffsets();, +        if(mDrawLegend) {         , +, +            if(mLegend.getPosition() == LegendPosition.LEFT_OF_CHART) {, +                , +                mOffsetRight = mLegend.getMaximumEntryLength(mLegendLabelPaint);, +                , +            } else if(mLegend.getPosition() == LegendPosition.BELOW_CHART) {, +                mOffsetBottom = (int) mLegendLabelPaint.getTextSize() * 3;, +            }, +        }, +        , +        mOffsetLeft = Utils.calcTextWidth(mYLabelPaint, (int) mDeltaY + ".0000");, +        , +        prepareContentRect();, +        prepareMatrix();, +        float textSize = Utils.convertPixelsToDp(mLegendLabelPaint.getTextSize());, +        , +        // the amount of pixels the text needs to be set down to be on the same height as the form, +        float textDrop = (textSize + formSize) / 2f;, +, +        float posX, posY;, +, +                posX = mOffsetLeft;, +                posY = getHeight() - mOffsetBottom + textSize * 2;, +                    if(labels[i] == null) break;, +                    mLegend.drawForm(mDrawCanvas, posX, posY, mLegendFormPaint, i);]