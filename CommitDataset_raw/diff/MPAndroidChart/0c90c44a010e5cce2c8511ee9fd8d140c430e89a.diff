[+++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/LineChartRenderer.java, +import com.github.mikephil.charting.interfaces.datasets.IBarLineScatterCandleBubbleDataSet;, +                drawCubicBezier(dataSet);, +                drawHorizontalBezier(dataSet);, +    protected void drawHorizontalBezier(ILineDataSet dataSet) {, +, +        float phaseY = mAnimator.getPhaseY();, +        XBounds bounds = getXBounds(dataSet);, +        if (bounds.range >= 1) {, +            Entry prev = dataSet.getEntryForIndex(bounds.min);, +            for (int j = bounds.min + 1; j <= bounds.range + bounds.min; j++) {, +            drawCubicFill(mBitmapCanvas, dataSet, cubicFillPath, trans, bounds);, +    protected void drawCubicBezier(ILineDataSet dataSet) {, +        Transformer trans = mChart.getTransformer(dataSet.getAxisDependency());, +, +        XBounds bounds = getXBounds(dataSet);, +, +        if (bounds.range >= 1) {, +            Entry prevPrev = dataSet.getEntryForIndex(bounds.min);, +            Entry next = dataSet.getEntryForIndex(bounds.min + 1);, +            for (int j = bounds.min + 1; j <= bounds.range + bounds.min; j++) {, +                next = bounds.max > j + 1 ? dataSet.getEntryForIndex(j + 1) : cur;, +            drawCubicFill(mBitmapCanvas, dataSet, cubicFillPath, trans, bounds);, +    protected void drawCubicFill(Canvas c, ILineDataSet dataSet, Path spline, Transformer trans, XBounds bounds) {, +        spline.lineTo(bounds.min + bounds.range, fillMin);, +        spline.lineTo(bounds.min, fillMin);, +        XBounds bounds = getXBounds(dataSet);, +            for (int j = bounds.min; j <= bounds.range + bounds.min; j++) {, +                if (j < bounds.max) {, +            e1 = dataSet.getEntryForIndex(bounds.min);, +                for (int x = bounds.min; x <= bounds.range + bounds.min; x++) {, +                    final int size = Math.max((bounds.range + 1) * pointsPerEntryPair, pointsPerEntryPair) * 2;, +            drawLinearFill(c, dataSet, trans, bounds);, +    protected void drawLinearFill(Canvas c, ILineDataSet dataSet, Transformer trans, XBounds bounds) {, +        Path filled = generateFilledPath(dataSet, bounds);, +    private Path generateFilledPath(ILineDataSet dataSet, XBounds bounds) {, +        Entry entry = dataSet.getEntryForIndex(bounds.min);, +        for (int x = bounds.min + 1; x <= bounds.range + bounds.min; x++) {, +        filled.lineTo(dataSet.getEntryForIndex(bounds.range + bounds.min).getX(), fillMin);, +                XBounds bounds = getXBounds(dataSet);, +                float[] positions = trans.generateTransformedValuesLine(dataSet, mAnimator.getPhaseX(), mAnimator, +                        .getPhaseY(), bounds.min, bounds.max);, +                    Entry entry = dataSet.getEntryForIndex(j / 2 + bounds.min);, +            XBounds bounds = getXBounds(dataSet);, +            for (int j = bounds.min; j <= bounds.range + bounds.min; j++) {, +, +    private XBounds getXBounds(IBarLineScatterCandleBubbleDataSet dataSet) {, +        return new XBounds(dataSet);, +    }, +, +    private class XBounds {, +, +        public final int min;, +        public final int max;, +, +        public final int range;, +, +        public XBounds(IBarLineScatterCandleBubbleDataSet dataSet) {, +, +            float phaseX = Math.max(0.f, Math.min(1.f, mAnimator.getPhaseX()));, +, +            float low = mChart.getLowestVisibleX();, +            float high = mChart.getHighestVisibleX();, +, +            Entry entryFrom = dataSet.getEntryForXPos(low, DataSet.Rounding.DOWN);, +            Entry entryTo = dataSet.getEntryForXPos(high, DataSet.Rounding.UP);, +, +            min = dataSet.getEntryIndex(entryFrom);, +            max = dataSet.getEntryIndex(entryTo);, +            range = (int) ((max - min) * phaseX);, +        }, +    }]