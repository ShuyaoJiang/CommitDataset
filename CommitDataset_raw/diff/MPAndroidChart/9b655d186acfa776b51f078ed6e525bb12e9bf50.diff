[+++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +            if (Utils.needsDefaultFormatter(set.getValueFormatter())), +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +            if (Utils.needsDefaultFormatter(set.getValueFormatter())), +++ b/MPChartLib/src/com/github/mikephil/charting/data/BarLineScatterCandleBubbleDataSet.java, +import com.github.mikephil.charting.interfaces.datainterfaces.datasets.IBarLineScatterCandleBubbleDataSet;, +, +public abstract class BarLineScatterCandleBubbleDataSet<T extends Entry> extends DataSet<T> implements IBarLineScatterCandleBubbleDataSet<T> {, +    @Override, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +            if (Utils.needsDefaultFormatter(set.getValueFormatter())), +++ b/MPChartLib/src/com/github/mikephil/charting/data/BarLineScatterCandleBubbleDataSet.java, +import com.github.mikephil.charting.interfaces.datainterfaces.datasets.IBarLineScatterCandleBubbleDataSet;, +, +public abstract class BarLineScatterCandleBubbleDataSet<T extends Entry> extends DataSet<T> implements IBarLineScatterCandleBubbleDataSet<T> {, +    @Override, +++ b/MPChartLib/src/com/github/mikephil/charting/data/BaseDataSet.java, + * Created by Philipp Jahoda on 21/10/15., + * This is the base dataset of all DataSets. It's purpose is to implement critical methods, + * provided by the IDataSet interface., +    /**, +     * flag that indicates if the DataSet is visible or not, +     */, +    protected boolean mVisible = true;, +, +    public int getEntryPosition(T e) {, +        List<T> values = getYVals();, +, +        for (int i = 0; i < values.size(); i++) {, +            if (e.equalTo(values.get(i))), +                return i;, +        }, +, +        return -1;, +    public ValueFormatter getValueFormatter() {, +        if (mValueFormatter == null), +            return new DefaultValueFormatter(1);, +        return mValueFormatter;, +    }, +, +    @Override, +    public int getValueTextColor() {, +        return mValueColor;, +    }, +, +    @Override, +    public Typeface getValueTypeface() {, +        return mValueTypeface;, +    }, +, +    @Override, +    public float getValueTextSize() {, +        return mValueTextSize;, +    }, +, +    @Override, +, +    @Override, +    public boolean isDrawValuesEnabled() {, +        return mDrawValues;, +    }, +, +    @Override, +    public void setVisible(boolean visible) {, +        mVisible = visible;, +    }, +, +    @Override, +    public boolean isVisible() {, +        return mVisible;, +    }, +, +    @Override, +    public T getEntryForXIndex(int x) {, +, +        List<T> values = getYVals();, +, +        int index = getEntryIndex(x);, +        if (index > -1), +            return values.get(index);, +        return null;, +    }, +, +    @Override, +    public int getEntryIndex(int x) {, +, +        List<T> values = getYVals();, +, +        int low = 0;, +        int high = values.size() - 1;, +        int closest = -1;, +, +        while (low <= high) {, +            int m = (high + low) / 2;, +, +            if (x == values.get(m).getXIndex()) {, +                while (m > 0 && values.get(m - 1).getXIndex() == x), +                    m--;, +, +                return m;]