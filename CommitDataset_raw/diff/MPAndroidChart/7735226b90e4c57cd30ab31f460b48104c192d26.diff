[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/MultiLineChartActivity.java, +        , +        mChart.resetTracking();, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/MultiLineChartActivity.java, +        , +        mChart.resetTracking();, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CircleBuffer.java, +, +package com.github.mikephil.charting.buffer;, +, +import com.github.mikephil.charting.data.Entry;, +, +import java.util.ArrayList;, +, +public class CircleBuffer extends AbstractBuffer<Entry> {, +, +    public CircleBuffer(int size) {, +        super(size);, +    }, +, +    protected void addCircle(float x, float y) {, +        buffer[index++] = x;, +        buffer[index++] = y;, +    }, +, +    @Override, +    public void feed(ArrayList<Entry> entries) {, +        , +        float size = entries.size() * phaseX;, +, +        for (int i = 0; i < size; i++) {, +, +            Entry e = entries.get(i);, +            addCircle(e.getXIndex(), e.getVal() * phaseY);, +        }, +        , +        reset();, +    }, +}, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/MultiLineChartActivity.java, +        , +        mChart.resetTracking();, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CircleBuffer.java, +, +package com.github.mikephil.charting.buffer;, +, +import com.github.mikephil.charting.data.Entry;, +, +import java.util.ArrayList;, +, +public class CircleBuffer extends AbstractBuffer<Entry> {, +, +    public CircleBuffer(int size) {, +        super(size);, +    }, +, +    protected void addCircle(float x, float y) {, +        buffer[index++] = x;, +        buffer[index++] = y;, +    }, +, +    @Override, +    public void feed(ArrayList<Entry> entries) {, +        , +        float size = entries.size() * phaseX;, +, +        for (int i = 0; i < size; i++) {, +, +            Entry e = entries.get(i);, +            addCircle(e.getXIndex(), e.getVal() * phaseY);, +        }, +        , +        reset();, +    }, +}, +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/LineChartRenderer.java, +import com.github.mikephil.charting.buffer.CircleBuffer;, +    protected CircleBuffer[] mCircleBuffers;, +, +            if (size < 4), +                size = 4;, +, +        mCircleBuffers = new CircleBuffer[lineData.getDataSetCount()];, +, +        for (int i = 0; i < mCircleBuffers.length; i++) {, +            LineDataSet set = lineData.getDataSetByIndex(i);, +            mCircleBuffers[i] = new CircleBuffer(set.getEntryCount() * 2);, +        }, +        LineBuffer buffer = mLineBuffers[dataSetIndex];, +        buffer.setPhases(phaseX, phaseY);, +        buffer.feed(entries);, +, +        trans.pointValuesToPixel(buffer.buffer);, +, +            for (int j = 0; j < buffer.size() - 3; j += 2) {, +                if (!mViewPortHandler.isInBoundsRight(buffer.buffer[j])), +                if (!mViewPortHandler.isInBoundsLeft(buffer.buffer[j + 2]), +                        || (!mViewPortHandler.isInBoundsTop(buffer.buffer[j + 1]) && !mViewPortHandler, +                                .isInBoundsBottom(buffer.buffer[j + 3])), +                        || (!mViewPortHandler.isInBoundsTop(buffer.buffer[j + 1]) && !mViewPortHandler]