[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/StackedBarActivity.java, +import com.github.mikephil.charting.utils.ColorTemplate;, +		mChart.setMaxVisibleValueCount(40);, +		for(int i = 0; i < colors.length; i++) {, +			colors[i] = ColorTemplate.MATERIAL_COLORS[i];, +		}, +, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/StackedBarActivity.java, +import com.github.mikephil.charting.utils.ColorTemplate;, +		mChart.setMaxVisibleValueCount(40);, +		for(int i = 0; i < colors.length; i++) {, +			colors[i] = ColorTemplate.MATERIAL_COLORS[i];, +		}, +, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/BarBuffer.java, +    /**, +     * interval on the x-axis per group, +     */, +, +, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/StackedBarActivity.java, +import com.github.mikephil.charting.utils.ColorTemplate;, +		mChart.setMaxVisibleValueCount(40);, +		for(int i = 0; i < colors.length; i++) {, +			colors[i] = ColorTemplate.MATERIAL_COLORS[i];, +		}, +, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/BarBuffer.java, +    /**, +     * interval on the x-axis per group, +     */, +, +, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +    public float getXRange() {, +        return mXAxis.mAxisRange;, +    }, +, +    @Override, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/StackedBarActivity.java, +import com.github.mikephil.charting.utils.ColorTemplate;, +		mChart.setMaxVisibleValueCount(40);, +		for(int i = 0; i < colors.length; i++) {, +			colors[i] = ColorTemplate.MATERIAL_COLORS[i];, +		}, +, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/BarBuffer.java, +    /**, +     * interval on the x-axis per group, +     */, +, +, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +    public float getXRange() {, +        return mXAxis.mAxisRange;, +    }, +, +    @Override, +++ b/MPChartLib/src/com/github/mikephil/charting/interfaces/dataprovider/ChartInterface.java, +    float getXRange();, +, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/StackedBarActivity.java, +import com.github.mikephil.charting.utils.ColorTemplate;, +		mChart.setMaxVisibleValueCount(40);, +		for(int i = 0; i < colors.length; i++) {, +			colors[i] = ColorTemplate.MATERIAL_COLORS[i];, +		}, +, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/BarBuffer.java, +    /**, +     * interval on the x-axis per group, +     */, +, +, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +    public float getXRange() {, +        return mXAxis.mAxisRange;, +    }, +, +    @Override, +++ b/MPChartLib/src/com/github/mikephil/charting/interfaces/dataprovider/ChartInterface.java, +    float getXRange();, +, +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/BarChartRenderer.java, +    /**, +     * the rect object that is used for drawing the bars, +     */, +        buffer.setInterval(mChart.getXRange() / dataSet.getEntryCount());, +                // get the buffer, +                BarBuffer buffer = mBarBuffers[i];, +                    for (int j = 0; j < buffer.buffer.length * mAnimator.getPhaseX(); j += 4) {, +                        float x = (buffer.buffer[j] + buffer.buffer[j + 2]) / 2f;, +, +                        if (!mViewPortHandler.isInBoundsRight(x)), +                        if (!mViewPortHandler.isInBoundsY(buffer.buffer[j + 1]), +                                || !mViewPortHandler.isInBoundsLeft(x)), +                        BarEntry entry = dataSet.getEntryForIndex(j / 4);, +                        drawValue(c, dataSet.getValueFormatter(), val, entry, i, x,, +                                buffer.buffer[j + 1] + (val >= 0 ? posOffset : negOffset), dataSet.getValueTextColor, +                                        (j / 4));]