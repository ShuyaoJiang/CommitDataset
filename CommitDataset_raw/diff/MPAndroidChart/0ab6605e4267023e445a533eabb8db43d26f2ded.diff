[+++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +    private void prepareValuePxMatrix() {, +, +        if(mLogEnabled) Log.i(LOG_TAG, "Preparing Value-Px Matrix, deltaLeft: " + mDeltaYLeft + ", deltaRight: " + mDeltaYRight);, +        , +        mRightAxisTransformer.prepareMatrixValuePx(mDeltaX, mDeltaYRight,, +                mAxisRight.mAxisMinimum);, +        mLeftAxisTransformer.prepareMatrixValuePx(mDeltaX, mDeltaYLeft,, +                mAxisLeft.mAxisMinimum);, +    }, +    , +    protected void prepareOffsetMatrix() {, +, +        mRightAxisTransformer.prepareMatrixOffset(mAxisRight.isInverted());, +        mLeftAxisTransformer.prepareMatrixOffset(mAxisLeft.isInverted());, +    }, +, +    public void notifyDataSetChanged() {, +        prepareOffsetMatrix();, +        prepareValuePxMatrix();, +        mAxisLeft.mAxisMaximum = maxLeft;, +        mAxisRight.mAxisMaximum = maxRight;, +        mAxisLeft.mAxisMinimum = minLeft;, +        mAxisRight.mAxisMinimum = minRight;, +, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +    private void prepareValuePxMatrix() {, +, +        if(mLogEnabled) Log.i(LOG_TAG, "Preparing Value-Px Matrix, deltaLeft: " + mDeltaYLeft + ", deltaRight: " + mDeltaYRight);, +        , +        mRightAxisTransformer.prepareMatrixValuePx(mDeltaX, mDeltaYRight,, +                mAxisRight.mAxisMinimum);, +        mLeftAxisTransformer.prepareMatrixValuePx(mDeltaX, mDeltaYLeft,, +                mAxisLeft.mAxisMinimum);, +    }, +    , +    protected void prepareOffsetMatrix() {, +, +        mRightAxisTransformer.prepareMatrixOffset(mAxisRight.isInverted());, +        mLeftAxisTransformer.prepareMatrixOffset(mAxisLeft.isInverted());, +    }, +, +    public void notifyDataSetChanged() {, +        prepareOffsetMatrix();, +        prepareValuePxMatrix();, +        mAxisLeft.mAxisMaximum = maxLeft;, +        mAxisRight.mAxisMaximum = maxRight;, +        mAxisLeft.mAxisMinimum = minLeft;, +        mAxisRight.mAxisMinimum = minRight;, +, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +        notifyDataSetChanged();, +        notifyDataSetChanged();, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +    private void prepareValuePxMatrix() {, +, +        if(mLogEnabled) Log.i(LOG_TAG, "Preparing Value-Px Matrix, deltaLeft: " + mDeltaYLeft + ", deltaRight: " + mDeltaYRight);, +        , +        mRightAxisTransformer.prepareMatrixValuePx(mDeltaX, mDeltaYRight,, +                mAxisRight.mAxisMinimum);, +        mLeftAxisTransformer.prepareMatrixValuePx(mDeltaX, mDeltaYLeft,, +                mAxisLeft.mAxisMinimum);, +    }, +    , +    protected void prepareOffsetMatrix() {, +, +        mRightAxisTransformer.prepareMatrixOffset(mAxisRight.isInverted());, +        mLeftAxisTransformer.prepareMatrixOffset(mAxisLeft.isInverted());, +    }, +, +    public void notifyDataSetChanged() {, +        prepareOffsetMatrix();, +        prepareValuePxMatrix();, +        mAxisLeft.mAxisMaximum = maxLeft;, +        mAxisRight.mAxisMaximum = maxRight;, +        mAxisLeft.mAxisMinimum = minLeft;, +        mAxisRight.mAxisMinimum = minRight;, +, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +        notifyDataSetChanged();, +        notifyDataSetChanged();, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieRadarChartBase.java, +    public void notifyDataSetChanged() {, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +    private void prepareValuePxMatrix() {, +, +        if(mLogEnabled) Log.i(LOG_TAG, "Preparing Value-Px Matrix, deltaLeft: " + mDeltaYLeft + ", deltaRight: " + mDeltaYRight);, +        , +        mRightAxisTransformer.prepareMatrixValuePx(mDeltaX, mDeltaYRight,, +                mAxisRight.mAxisMinimum);, +        mLeftAxisTransformer.prepareMatrixValuePx(mDeltaX, mDeltaYLeft,, +                mAxisLeft.mAxisMinimum);, +    }, +    , +    protected void prepareOffsetMatrix() {, +, +        mRightAxisTransformer.prepareMatrixOffset(mAxisRight.isInverted());, +        mLeftAxisTransformer.prepareMatrixOffset(mAxisLeft.isInverted());, +    }, +]