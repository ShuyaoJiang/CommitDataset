[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/CandleStickChartActivity.java, +import android.graphics.Paint;, +        leftAxis.setStartAtZero(false);, +//        set1.setColor(Color.rgb(80, 80, 80));, +        set1.setShadowColor(Color.DKGRAY);, +        set1.setShadowWidth(0.7f);, +        set1.setDecreasingColor(Color.RED);, +        set1.setDecreasingPaintStyle(Paint.Style.STROKE);, +        set1.setIncreasingColor(Color.rgb(122, 242, 84));, +        set1.setIncreasingPaintStyle(Paint.Style.FILL);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/CandleStickChartActivity.java, +import android.graphics.Paint;, +        leftAxis.setStartAtZero(false);, +//        set1.setColor(Color.rgb(80, 80, 80));, +        set1.setShadowColor(Color.DKGRAY);, +        set1.setShadowWidth(0.7f);, +        set1.setDecreasingColor(Color.RED);, +        set1.setDecreasingPaintStyle(Paint.Style.STROKE);, +        set1.setIncreasingColor(Color.rgb(122, 242, 84));, +        set1.setIncreasingPaintStyle(Paint.Style.FILL);, +++ b/MPChartLib/src/com/github/mikephil/charting/data/CandleDataSet.java, +    protected Paint.Style mIncreasingPaintStyle = Paint.Style.FILL;, +    /** color for open <= close */, +    protected int mIncreasingColor = ColorTemplate.COLOR_NONE;, +    /** color for open > close */, +    protected int mDecreasingColor = ColorTemplate.COLOR_NONE;, +, +    /**, +     * shadow line color, set -1 for backward compatibility and uses default, +     * color, +     */, +    protected int mShadowColor = ColorTemplate.COLOR_NONE;, +        copied.mIncreasingPaintStyle = mIncreasingPaintStyle;, +     * It is necessary to implement ColorsList class that will encapsulate, +     * colors list functionality, because It's wrong to copy paste setColor,, +     * addColor, ... resetColors for each time when we want to add a coloring, +     * options for one of objects, +     * , +     * Sets the one and ONLY color that should be used for this DataSet when, +     * open > close. Internally, this recreates the colors array and adds the, +     * specified color., +        mDecreasingColor = color;, +     * Returns the decreasing color., +        return mDecreasingColor;, +     * Sets the one and ONLY color that should be used for this DataSet when, +     * open <= close. Internally, this recreates the colors array and adds the, +     * specified color., +     *, +     * @param color, +    public void setIncreasingColor(int color) {, +        mIncreasingColor = color;, +    }, +    , +    /**, +     * Returns the increasing color., +     *, +     * @return, +     */, +    public int getIncreasingColor() {, +        return mIncreasingColor;, +     * , +     * , +     * , +    public Paint.Style getIncreasingPaintStyle() {, +        return mIncreasingPaintStyle;, +     * , +    public void setIncreasingPaintStyle(Paint.Style paintStyle) {, +        this.mIncreasingPaintStyle = paintStyle;, +     * , +     * , +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/CandleStickChartActivity.java, +import android.graphics.Paint;, +        leftAxis.setStartAtZero(false);, +//        set1.setColor(Color.rgb(80, 80, 80));, +        set1.setShadowColor(Color.DKGRAY);, +        set1.setShadowWidth(0.7f);, +        set1.setDecreasingColor(Color.RED);, +        set1.setDecreasingPaintStyle(Paint.Style.STROKE);, +        set1.setIncreasingColor(Color.rgb(122, 242, 84));, +        set1.setIncreasingPaintStyle(Paint.Style.FILL);, +++ b/MPChartLib/src/com/github/mikephil/charting/data/CandleDataSet.java, +    protected Paint.Style mIncreasingPaintStyle = Paint.Style.FILL;, +    /** color for open <= close */, +    protected int mIncreasingColor = ColorTemplate.COLOR_NONE;, +    /** color for open > close */, +    protected int mDecreasingColor = ColorTemplate.COLOR_NONE;, +, +    /**, +     * shadow line color, set -1 for backward compatibility and uses default, +     * color, +     */, +    protected int mShadowColor = ColorTemplate.COLOR_NONE;, +        copied.mIncreasingPaintStyle = mIncreasingPaintStyle;, +     * It is necessary to implement ColorsList class that will encapsulate, +     * colors list functionality, because It's wrong to copy paste setColor,, +     * addColor, ... resetColors for each time when we want to add a coloring, +     * options for one of objects, +     * , +     * Sets the one and ONLY color that should be used for this DataSet when, +     * open > close. Internally, this recreates the colors array and adds the]