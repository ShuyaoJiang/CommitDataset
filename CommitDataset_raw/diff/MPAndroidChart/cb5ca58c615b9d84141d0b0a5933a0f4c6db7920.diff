[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, +import com.github.mikephil.charting.utils.LargeValueFormatter;, +        mChart.setValueFormatter(new LargeValueFormatter());, +        yl.setFormatter(new LargeValueFormatter());, +        float mult = mSeekBarY.getProgress() * 10000000f;, +, +            float val = (float) (Math.random() * mult) + 3;, +            float val = (float) (Math.random() * mult) + 3;, +            float val = (float) (Math.random() * mult) + 3;, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, +import com.github.mikephil.charting.utils.LargeValueFormatter;, +        mChart.setValueFormatter(new LargeValueFormatter());, +        yl.setFormatter(new LargeValueFormatter());, +        float mult = mSeekBarY.getProgress() * 10000000f;, +, +            float val = (float) (Math.random() * mult) + 3;, +            float val = (float) (Math.random() * mult) + 3;, +            float val = (float) (Math.random() * mult) + 3;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +import com.github.mikephil.charting.utils.LimitLine.LimitLabelPosition;, +//        String label = mYLabels.getFormattedLabel(mYLabels.mEntryCount - 1);, +        String label = mYLabels.getLongestLabel();, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, +import com.github.mikephil.charting.utils.LargeValueFormatter;, +        mChart.setValueFormatter(new LargeValueFormatter());, +        yl.setFormatter(new LargeValueFormatter());, +        float mult = mSeekBarY.getProgress() * 10000000f;, +, +            float val = (float) (Math.random() * mult) + 3;, +            float val = (float) (Math.random() * mult) + 3;, +            float val = (float) (Math.random() * mult) + 3;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +import com.github.mikephil.charting.utils.LimitLine.LimitLabelPosition;, +//        String label = mYLabels.getFormattedLabel(mYLabels.mEntryCount - 1);, +        String label = mYLabels.getLongestLabel();, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +import android.graphics.drawable.Drawable;, +     * Saves the current chart state with the given name to the given path on, +     * the sdcard leaving the path empty "" will put the saved file directly on, +     * the SD card chart is saved as a PNG image, example:, +     * saveToPath("myfilename", "foldername1/foldername2");, +        // store the details, +    /**, +     * Default formatter used for formatting values. Uses a DecimalFormat with, +     * pre-calculated number of digits (depending on max and min value)., +     * , +     * @author Philipp Jahoda, +     */, +        /** decimalformat for formatting */, +            // avoid memory allocations here (for performance), +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, +import com.github.mikephil.charting.utils.LargeValueFormatter;, +        mChart.setValueFormatter(new LargeValueFormatter());, +        yl.setFormatter(new LargeValueFormatter());, +        float mult = mSeekBarY.getProgress() * 10000000f;, +, +            float val = (float) (Math.random() * mult) + 3;, +            float val = (float) (Math.random() * mult) + 3;, +            float val = (float) (Math.random() * mult) + 3;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +import com.github.mikephil.charting.utils.LimitLine.LimitLabelPosition;, +//        String label = mYLabels.getFormattedLabel(mYLabels.mEntryCount - 1);, +        String label = mYLabels.getLongestLabel();, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +import android.graphics.drawable.Drawable;, +     * Saves the current chart state with the given name to the given path on, +     * the sdcard leaving the path empty "" will put the saved file directly on, +     * the SD card chart is saved as a PNG image, example:, +     * saveToPath("myfilename", "foldername1/foldername2");, +        // store the details, +    /**, +     * Default formatter used for formatting values. Uses a DecimalFormat with, +     * pre-calculated number of digits (depending on max and min value)., +     * , +     * @author Philipp Jahoda, +     */, +        /** decimalformat for formatting */, +            // avoid memory allocations here (for performance), +++ b/MPChartLib/src/com/github/mikephil/charting/utils/LargeValueFormatter.java, +, +package com.github.mikephil.charting.utils;, +, +import java.text.DecimalFormat;, +, +/**, + * Predefined value-formatter that formats large numbers in a pretty way., + * Outputs: 856 = 856; 1000 = 1k; 5821 = 5.8k; 10500 = 10k; 101800 = 102k;, + * 2000000 = 2m; 7800000 = 7.8m; 92150000 = 92m; 123200000 = 123m; 9999999 =, + * 10m; 1000000000 = 1b; Special thanks to Roman Gromov, + * (https://github.com/romangromov) for this piece of code., + * , + * @author Philipp Jahoda, + */, +public class LargeValueFormatter implements ValueFormatter {, +, +    private static String[] SUFFIX = new String[] {, +            "", "k", "m", "b", "t", +    };, +, +    private static int MAX_LENGTH = 4;]