[+++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +    protected void calcMinMax() {, +        super.calcMinMax();, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +    protected void calcMinMax() {, +        super.calcMinMax();, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        mAxisRendererLeft.computeAxis(mAxisLeft.mAxisMinimum, mAxisLeft.mAxisMaximum);, +        mAxisRendererRight.computeAxis(mAxisRight.mAxisMinimum, mAxisRight.mAxisMaximum);, +        if (mLogEnabled), +            Log.i(LOG_TAG, "Preparing Value-Px Matrix, deltaLeft: " + mDeltaYLeft, +                    + ", deltaRight: " + mDeltaYRight);, +        calcMinMax();, +        mAxisRendererLeft.computeAxis(mAxisLeft.mAxisMinimum, mAxisLeft.mAxisMaximum);, +        mAxisRendererRight.computeAxis(mAxisRight.mAxisMinimum, mAxisRight.mAxisMaximum);, +    protected void calcMinMax() {, +, +        float minLeft = mData.getYMin(AxisDependency.LEFT);, +        float maxLeft = mData.getYMax(AxisDependency.LEFT);, +        float minRight = mData.getYMin(AxisDependency.RIGHT);, +        float maxRight = mData.getYMax(AxisDependency.RIGHT);, +        , +        float leftRange = Math.abs(maxLeft - minLeft);, +        float rightRange = Math.abs(maxRight - minRight);, +        , +        float topSpaceLeft = leftRange / 100f * mAxisLeft.getSpaceTop();, +        float topSpaceRight = rightRange / 100f * mAxisRight.getSpaceTop();, +        float bottomSpaceLeft = leftRange / 100f * mAxisLeft.getSpaceBottom();, +        float bottomSpaceRight = rightRange / 100f * mAxisRight.getSpaceBottom();, +, +        mDeltaX = mData.getXVals().size() - 1;, +, +        mAxisLeft.mAxisMaximum = maxLeft + topSpaceLeft;, +        mAxisRight.mAxisMaximum = maxRight + topSpaceRight;, +        mAxisLeft.mAxisMinimum = minLeft - bottomSpaceLeft;, +        mAxisRight.mAxisMinimum = minRight - bottomSpaceRight;, +, +        mDeltaYLeft = Math.abs(mAxisLeft.mAxisMaximum - mAxisLeft.mAxisMinimum);, +        mDeltaYRight = Math.abs(mAxisRight.mAxisMaximum - mAxisRight.mAxisMinimum);, +, +        // // only calculate values if not fixed values, +        // if (!fixedValues) {, +        // mYChartMin = mData.getYMin();, +        // mYChartMax = mData.getYMax();, +        // }, +        //, +        // // calc delta, +        // mDeltaY = Math.abs(mYChartMax - mYChartMin);, +        // mDeltaX = mData.getXVals().size() - 1;, +        //, +        // if (!fixedValues) {, +        //, +        // // additional handling for space (default 15% space), +        // // float space = Math.abs(mDeltaY / 100f * 15f);, +        // float space = Math, +        // .abs(Math.abs(Math.max(Math.abs(mYChartMax), Math.abs(mYChartMin))) /, +        // 100f * 20f);, +        //, +        // if (Math.abs(mYChartMax - mYChartMin) < 0.00001f) {, +        // if (Math.abs(mYChartMax) < 10f), +        // space = 1f;, +        // else, +        // space = Math.abs(mYChartMax / 100f * 20f);, +        // }, +        //, +        // if (mStartAtZero) {, +        //, +        // if (mYChartMax < 0) {, +        // mYChartMax = 0;, +        // // calc delta, +        // mYChartMin = mYChartMin - space;, +        // } else {, +        // mYChartMin = 0;, +        // // calc delta, +        // mYChartMax = mYChartMax + space;, +        // }, +        // } else {, +        //, +        // mYChartMin = mYChartMin - space / 2f;, +        // mYChartMax = mYChartMax + space / 2f;, +        // }, +        // }, +        //, +        // mDeltaY = Math.abs(mYChartMax - mYChartMin);, +    }, +, +    @Override, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +    protected void calcMinMax() {, +        super.calcMinMax();, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        mAxisRendererLeft.computeAxis(mAxisLeft.mAxisMinimum, mAxisLeft.mAxisMaximum);, +        mAxisRendererRight.computeAxis(mAxisRight.mAxisMinimum, mAxisRight.mAxisMaximum);, +        if (mLogEnabled), +            Log.i(LOG_TAG, "Preparing Value-Px Matrix, deltaLeft: " + mDeltaYLeft, +                    + ", deltaRight: " + mDeltaYRight);, +        calcMinMax();, +        mAxisRendererLeft.computeAxis(mAxisLeft.mAxisMinimum, mAxisLeft.mAxisMaximum);, +        mAxisRendererRight.computeAxis(mAxisRight.mAxisMinimum, mAxisRight.mAxisMaximum);, +    protected void calcMinMax() {]