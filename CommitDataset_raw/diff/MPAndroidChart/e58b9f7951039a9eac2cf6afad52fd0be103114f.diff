[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ScatterChartActivity.java, +        set3.setScatterShape(ScatterShape.CROSS);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ScatterChartActivity.java, +        set3.setScatterShape(ScatterShape.CROSS);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/fragments/ScatterChartFrag.java, +        mChart.setData(generateScatterData(2, 10000, 400));, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ScatterChartActivity.java, +        set3.setScatterShape(ScatterShape.CROSS);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/fragments/ScatterChartFrag.java, +        mChart.setData(generateScatterData(2, 10000, 400));, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/ScatterBuffer.java, +, +package com.github.mikephil.charting.buffer;, +, +import com.github.mikephil.charting.data.Entry;, +, +import java.util.ArrayList;, +, +public class ScatterBuffer extends AbstractBuffer<Entry> {, +    , +    public ScatterBuffer(int size) {, +        super(size);, +    }, +, +    protected void addTwo(float x, float y) {, +        buffer[index++] = x;, +        buffer[index++] = y;, +    }, +, +    @Override, +    public void feed(ArrayList<Entry> entries) {, +        , +        float size = entries.size() * phaseX;, +        , +        for (int i = 0; i < size; i++) {, +, +            Entry e = entries.get(i);, +            addTwo(e.getXIndex(), e.getVal() * phaseY);, +        }, +        , +        reset();, +    }, +}, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ScatterChartActivity.java, +        set3.setScatterShape(ScatterShape.CROSS);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/fragments/ScatterChartFrag.java, +        mChart.setData(generateScatterData(2, 10000, 400));, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/ScatterBuffer.java, +, +package com.github.mikephil.charting.buffer;, +, +import com.github.mikephil.charting.data.Entry;, +, +import java.util.ArrayList;, +, +public class ScatterBuffer extends AbstractBuffer<Entry> {, +    , +    public ScatterBuffer(int size) {, +        super(size);, +    }, +, +    protected void addTwo(float x, float y) {, +        buffer[index++] = x;, +        buffer[index++] = y;, +    }, +, +    @Override, +    public void feed(ArrayList<Entry> entries) {, +        , +        float size = entries.size() * phaseX;, +        , +        for (int i = 0; i < size; i++) {, +, +            Entry e = entries.get(i);, +            addTwo(e.getXIndex(), e.getVal() * phaseY);, +        }, +        , +        reset();, +    }, +}, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/ScatterChart.java, + * Chart-View. CIRCLE and SCQUARE offer the best performance, TRIANGLE has the, + * worst performance., +    /**, +     * enum that defines the shape that is drawn where the values are, CIRCLE, +     * and SCQUARE offer the best performance, TRIANGLE has the worst, +     * performance., +     */, +        CROSS, TRIANGLE, CIRCLE, SQUARE, +     * Returns all possible predefined ScatterShapes., +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ScatterChartActivity.java, +        set3.setScatterShape(ScatterShape.CROSS);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/fragments/ScatterChartFrag.java, +        mChart.setData(generateScatterData(2, 10000, 400));, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/ScatterBuffer.java, +, +package com.github.mikephil.charting.buffer;, +, +import com.github.mikephil.charting.data.Entry;, +]