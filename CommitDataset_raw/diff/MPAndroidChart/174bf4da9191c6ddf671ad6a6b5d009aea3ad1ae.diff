[+++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +import com.github.mikephil.charting.renderer.XAxisRendererBarChart;, +        , +        mXAxisRenderer = new XAxisRendererBarChart(mViewPortHandler, mXAxis, mLeftAxisTransformer, this);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +import com.github.mikephil.charting.renderer.XAxisRendererBarChart;, +        , +        mXAxisRenderer = new XAxisRendererBarChart(mViewPortHandler, mXAxis, mLeftAxisTransformer, this);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        mXAxisRenderer = new XAxisRenderer(mViewPortHandler, mXAxis, mLeftAxisTransformer);, +, +        mXAxisRenderer.computeAxis(mData.getXValAverageLength(), mData.getXVals());, +    protected void prepareMatrix() {, +        mViewPortHandler.restrainViewPort(offsetLeft, offsetTop, offsetRight, offsetBottom);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +import com.github.mikephil.charting.renderer.XAxisRendererBarChart;, +        , +        mXAxisRenderer = new XAxisRendererBarChart(mViewPortHandler, mXAxis, mLeftAxisTransformer, this);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        mXAxisRenderer = new XAxisRenderer(mViewPortHandler, mXAxis, mLeftAxisTransformer);, +, +        mXAxisRenderer.computeAxis(mData.getXValAverageLength(), mData.getXVals());, +    protected void prepareMatrix() {, +        mViewPortHandler.restrainViewPort(offsetLeft, offsetTop, offsetRight, offsetBottom);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/ScatterChart.java, +import com.github.mikephil.charting.renderer.ScatterChartRenderer;, +    protected void init() {, +        super.init();, +, +        mRenderer = new ScatterChartRenderer(this, mAnimator, mViewPortHandler);, +    }, +, +    @Override, +    protected void calculateOffsets() {, +        super.calculateOffsets();, +        mViewPortHandler.restrainViewPort(mViewPortHandler.offsetLeft() - offset,, +                mViewPortHandler.offsetTop(), mViewPortHandler.offsetRight() - offset,, +                mViewPortHandler.offsetBottom());, +        prepareMatrix();, +     * Returns all possible predefined ScatterShapes (excluding CUSTOM)., +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +import com.github.mikephil.charting.renderer.XAxisRendererBarChart;, +        , +        mXAxisRenderer = new XAxisRendererBarChart(mViewPortHandler, mXAxis, mLeftAxisTransformer, this);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        mXAxisRenderer = new XAxisRenderer(mViewPortHandler, mXAxis, mLeftAxisTransformer);, +, +        mXAxisRenderer.computeAxis(mData.getXValAverageLength(), mData.getXVals());, +    protected void prepareMatrix() {, +        mViewPortHandler.restrainViewPort(offsetLeft, offsetTop, offsetRight, offsetBottom);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/ScatterChart.java, +import com.github.mikephil.charting.renderer.ScatterChartRenderer;, +    protected void init() {, +        super.init();, +, +        mRenderer = new ScatterChartRenderer(this, mAnimator, mViewPortHandler);, +    }, +, +    @Override, +    protected void calculateOffsets() {, +        super.calculateOffsets();, +        mViewPortHandler.restrainViewPort(mViewPortHandler.offsetLeft() - offset,, +                mViewPortHandler.offsetTop(), mViewPortHandler.offsetRight() - offset,, +                mViewPortHandler.offsetBottom());, +        prepareMatrix();, +     * Returns all possible predefined ScatterShapes (excluding CUSTOM)., +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/LineChartRenderer.java, +            float y = set.getYValForXIndex(xIndex) * mAnimator.getPhaseY(); // get, +                                                                            // the, +                    xIndex, mChart.getYChartMax(), xIndex, mChart.getYChartMin(), 0, y,, +                    mChart.getDeltaX(), y, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +import com.github.mikephil.charting.renderer.XAxisRendererBarChart;, +        , +        mXAxisRenderer = new XAxisRendererBarChart(mViewPortHandler, mXAxis, mLeftAxisTransformer, this);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        mXAxisRenderer = new XAxisRenderer(mViewPortHandler, mXAxis, mLeftAxisTransformer);, +, +        mXAxisRenderer.computeAxis(mData.getXValAverageLength(), mData.getXVals());, +    protected void prepareMatrix() {, +        mViewPortHandler.restrainViewPort(offsetLeft, offsetTop, offsetRight, offsetBottom);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/ScatterChart.java, +import com.github.mikephil.charting.renderer.ScatterChartRenderer;, +    protected void init() {, +        super.init();, +, +        mRenderer = new ScatterChartRenderer(this, mAnimator, mViewPortHandler);, +    }, +, +    @Override, +    protected void calculateOffsets() {, +        super.calculateOffsets();, +        mViewPortHandler.restrainViewPort(mViewPortHandler.offsetLeft() - offset,, +                mViewPortHandler.offsetTop(), mViewPortHandler.offsetRight() - offset,, +                mViewPortHandler.offsetBottom());, +        prepareMatrix();, +     * Returns all possible predefined ScatterShapes (excluding CUSTOM)., +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/LineChartRenderer.java, +            float y = set.getYValForXIndex(xIndex) * mAnimator.getPhaseY(); // get, +                                                                            // the]