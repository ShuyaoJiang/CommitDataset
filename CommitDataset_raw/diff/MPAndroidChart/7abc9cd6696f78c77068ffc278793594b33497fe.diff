[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivityColored.java, +        ((LineDataSet) data.getDataSetByIndex(0)).setCircleHoleColor(color);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivityColored.java, +        ((LineDataSet) data.getDataSetByIndex(0)).setCircleHoleColor(color);, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/data/BarDataSet.java, +        List<BarEntry> entries = new ArrayList<BarEntry>();, +            entries.add(mValues.get(i).copy());, +        }, +        BarDataSet copied = new BarDataSet(entries, getLabel());, +        copy(copied);, +        return copied;, +    protected void copy(BarDataSet barDataSet) {, +        super.copy(barDataSet);, +        barDataSet.mStackSize = mStackSize;, +        barDataSet.mBarShadowColor = mBarShadowColor;, +        barDataSet.mBarBorderWidth = mBarBorderWidth;, +        barDataSet.mStackLabels = mStackLabels;, +        barDataSet.mHighLightAlpha = mHighLightAlpha;, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivityColored.java, +        ((LineDataSet) data.getDataSetByIndex(0)).setCircleHoleColor(color);, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/data/BarDataSet.java, +        List<BarEntry> entries = new ArrayList<BarEntry>();, +            entries.add(mValues.get(i).copy());, +        }, +        BarDataSet copied = new BarDataSet(entries, getLabel());, +        copy(copied);, +        return copied;, +    protected void copy(BarDataSet barDataSet) {, +        super.copy(barDataSet);, +        barDataSet.mStackSize = mStackSize;, +        barDataSet.mBarShadowColor = mBarShadowColor;, +        barDataSet.mBarBorderWidth = mBarBorderWidth;, +        barDataSet.mStackLabels = mStackLabels;, +        barDataSet.mHighLightAlpha = mHighLightAlpha;, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/data/BarLineScatterCandleBubbleDataSet.java, +public abstract class BarLineScatterCandleBubbleDataSet<T extends Entry>, +        extends DataSet<T>, +        implements IBarLineScatterCandleBubbleDataSet<T> {, +    /**, +     * default highlight color, +     */, +, +    protected void copy(BarLineScatterCandleBubbleDataSet barLineScatterCandleBubbleDataSet) {, +        super.copy(barLineScatterCandleBubbleDataSet);, +        barLineScatterCandleBubbleDataSet.mHighLightColor = mHighLightColor;, +    }, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivityColored.java, +        ((LineDataSet) data.getDataSetByIndex(0)).setCircleHoleColor(color);, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/data/BarDataSet.java, +        List<BarEntry> entries = new ArrayList<BarEntry>();, +            entries.add(mValues.get(i).copy());, +        }, +        BarDataSet copied = new BarDataSet(entries, getLabel());, +        copy(copied);, +        return copied;, +    protected void copy(BarDataSet barDataSet) {, +        super.copy(barDataSet);, +        barDataSet.mStackSize = mStackSize;, +        barDataSet.mBarShadowColor = mBarShadowColor;, +        barDataSet.mBarBorderWidth = mBarBorderWidth;, +        barDataSet.mStackLabels = mStackLabels;, +        barDataSet.mHighLightAlpha = mHighLightAlpha;, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/data/BarLineScatterCandleBubbleDataSet.java, +public abstract class BarLineScatterCandleBubbleDataSet<T extends Entry>, +        extends DataSet<T>, +        implements IBarLineScatterCandleBubbleDataSet<T> {, +    /**, +     * default highlight color, +     */, +, +    protected void copy(BarLineScatterCandleBubbleDataSet barLineScatterCandleBubbleDataSet) {, +        super.copy(barLineScatterCandleBubbleDataSet);, +        barLineScatterCandleBubbleDataSet.mHighLightColor = mHighLightColor;, +    }, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/data/BaseDataSet.java, +import com.github.mikephil.charting.model.GradientColor;, +    protected GradientColor mGradientColor = null;, +    protected List<GradientColor> mGradientColors = null;, +        return mGradientColor;, +        return mGradientColors;, +        return mGradientColors.get(index % mGradientColors.size());, +        mGradientColor = new GradientColor(startColor, endColor);, +        this.mGradientColors = gradientColors;, +, +    protected void copy(BaseDataSet baseDataSet) {, +        baseDataSet.mAxisDependency = mAxisDependency;, +        baseDataSet.mColors = mColors;, +        baseDataSet.mDrawIcons = mDrawIcons;, +        baseDataSet.mDrawValues = mDrawValues;, +        baseDataSet.mForm = mForm;, +        baseDataSet.mFormLineDashEffect = mFormLineDashEffect;, +        baseDataSet.mFormLineWidth = mFormLineWidth;, +        baseDataSet.mFormSize = mFormSize;, +        baseDataSet.mGradientColor = mGradientColor;, +        baseDataSet.mGradientColors = mGradientColors;, +        baseDataSet.mHighlightEnabled = mHighlightEnabled;, +        baseDataSet.mIconsOffset = mIconsOffset;, +        baseDataSet.mValueColors = mValueColors;, +        baseDataSet.mValueFormatter = mValueFormatter;, +        baseDataSet.mValueColors = mValueColors;]