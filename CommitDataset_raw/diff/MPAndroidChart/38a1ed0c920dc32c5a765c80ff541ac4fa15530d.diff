[+++ b/MPChartExample/src/com/example/mpchartexample/LineChartActivity.java, +import android.widget.Toast;, +import com.github.mikephil.charting.data.filter.Approximator;, +import com.github.mikephil.charting.data.filter.Approximator.ApproximatorType;, +++ b/MPChartExample/src/com/example/mpchartexample/LineChartActivity.java, +import android.widget.Toast;, +import com.github.mikephil.charting.data.filter.Approximator;, +import com.github.mikephil.charting.data.filter.Approximator.ApproximatorType;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +//         if(mFilterData) mData = mZoomHandler.getFiltered(mData,, +++ b/MPChartExample/src/com/example/mpchartexample/LineChartActivity.java, +import android.widget.Toast;, +import com.github.mikephil.charting.data.filter.Approximator;, +import com.github.mikephil.charting.data.filter.Approximator.ApproximatorType;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +//         if(mFilterData) mData = mZoomHandler.getFiltered(mData,, +++ b/MPChartLib/src/com/github/mikephil/charting/data/DataSet.java, +     * the number of Entries., +++ b/MPChartExample/src/com/example/mpchartexample/LineChartActivity.java, +import android.widget.Toast;, +import com.github.mikephil.charting.data.filter.Approximator;, +import com.github.mikephil.charting.data.filter.Approximator.ApproximatorType;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +//         if(mFilterData) mData = mZoomHandler.getFiltered(mData,, +++ b/MPChartLib/src/com/github/mikephil/charting/data/DataSet.java, +     * the number of Entries., +++ b/MPChartLib/src/com/github/mikephil/charting/data/filter/Approximator.java, +import android.util.Log;, +import java.util.ArrayList;, +, +        NONE, DOUGLAS_PEUCKER, ANGLE, +    /**, +     * sets the tolerance for the approximator, if tolerance <= 0, no filtering, +     * will be done, +     */, +     * , +            case ANGLE:, +                return reduceWithAngle(points, tolerance);, +            double dist = calcPointToLineDistance(firstEntry, lastEntry, entries.get(i));, +        } // else don't keep the point..., +    , +    private ArrayList<Entry> reduceWithAngle(ArrayList<Entry> entries, double toleranceAngle) {, +        , +        for (int i = 0; i < entries.size()-1; i++) {, +            , +            // if the angle is below the tolerance, it will not be removed, +            if(calcAngle(entries.get(i), entries.get(i+1)) < toleranceAngle) {, +                keep[i+1] = true;, +            }, +        }, +        , +        // first and last always stay, +        keep[0] = true;, +        keep[entries.size() - 1] = true;, +     , +        // create a new array with series, only take the kept ones, +        ArrayList<Entry> reducedEntries = new ArrayList<Entry>();, +        for (int i = 0; i < entries.size(); i++) {, +            if (keep[i]) {, +                Entry curEntry = entries.get(i);, +                reducedEntries.add(new Entry(curEntry.getVal(), curEntry.getXIndex()));, +            }, +        }, +        return reducedEntries;, +     * @param startEntry line startpoint, +     * @param endEntry line endpoint, +     * @param entryPoint the point to which the distance is measured from the, +     *            line, +    public double calcPointToLineDistance(Entry startEntry, Entry endEntry, Entry entryPoint) {, +, +    /**, +     * calculates the angle between two Entries (points) in the chart, +     * , +     * @param p1, +     * @param p2, +     * @return, +     */, +    public double calcAngle(Entry p1, Entry p2) {, +, +        float dx = p2.getXIndex() - p1.getXIndex();, +        float dy = p2.getVal() - p1.getVal();, +        double angle = Math.atan2(Math.abs(dx), Math.abs(dy)) * 180.0 / Math.PI;, +, +        return angle;, +    }, +++ b/MPChartExample/src/com/example/mpchartexample/LineChartActivity.java, +import android.widget.Toast;, +import com.github.mikephil.charting.data.filter.Approximator;, +import com.github.mikephil.charting.data.filter.Approximator.ApproximatorType;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +//         if(mFilterData) mData = mZoomHandler.getFiltered(mData,, +++ b/MPChartLib/src/com/github/mikephil/charting/data/DataSet.java, +     * the number of Entries., +++ b/MPChartLib/src/com/github/mikephil/charting/data/filter/Approximator.java, +import android.util.Log;, +import java.util.ArrayList;, +, +        NONE, DOUGLAS_PEUCKER, ANGLE, +    /**, +     * sets the tolerance for the approximator, if tolerance <= 0, no filtering]