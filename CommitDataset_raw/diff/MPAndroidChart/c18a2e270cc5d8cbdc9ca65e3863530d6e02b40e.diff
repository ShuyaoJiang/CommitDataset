[+++ b/MPChartLib/src/main/java/com/github/mikephil/charting/highlight/ChartHighlighter.java, +        if(closestValues.isEmpty()) {, +            return null;, +        }, +, +            Highlight high = buildHighlight(dataSet, i, xVal, DataSet.Rounding.CLOSEST);, +, +            if(high != null), +                vals.add(high);, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/highlight/ChartHighlighter.java, +        if(closestValues.isEmpty()) {, +            return null;, +        }, +, +            Highlight high = buildHighlight(dataSet, i, xVal, DataSet.Rounding.CLOSEST);, +, +            if(high != null), +                vals.add(high);, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/ScatterChartRenderer.java, +                XBounds bounds = getXBounds(mChart, dataSet);, +, +                                mAnimator.getPhaseX(), mAnimator.getPhaseY(), bounds.min, bounds.max);, +                for (int j = 0; j < positions.length; j += 2) {, +                    Entry entry = dataSet.getEntryForIndex(j / 2 + bounds.min);, +                            positions[j + 1] - shapeSize, dataSet.getValueTextColor(j / 2 + bounds.min));, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/highlight/ChartHighlighter.java, +        if(closestValues.isEmpty()) {, +            return null;, +        }, +, +            Highlight high = buildHighlight(dataSet, i, xVal, DataSet.Rounding.CLOSEST);, +, +            if(high != null), +                vals.add(high);, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/ScatterChartRenderer.java, +                XBounds bounds = getXBounds(mChart, dataSet);, +, +                                mAnimator.getPhaseX(), mAnimator.getPhaseY(), bounds.min, bounds.max);, +                for (int j = 0; j < positions.length; j += 2) {, +                    Entry entry = dataSet.getEntryForIndex(j / 2 + bounds.min);, +                            positions[j + 1] - shapeSize, dataSet.getValueTextColor(j / 2 + bounds.min));, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/utils/Transformer.java, +    public float[] generateTransformedValuesScatter(IScatterDataSet data, float phaseX,, +                                                    float phaseY, int from, int to) {, +        final int count = (int) ((to - from) * phaseX + 1) * 2;, +        float[] valuePoints = new float[count];, +        for (int j = 0; j < count; j += 2) {, +, +            Entry e = data.getEntryForIndex(j / 2 + from);]