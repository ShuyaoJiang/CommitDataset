[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +import com.github.mikephil.charting.utils.AnimationEasing;, +        mChart.animateXY(1500, 1500, AnimationEasing.EasingOption.EaseOutBack);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +import com.github.mikephil.charting.utils.AnimationEasing;, +        mChart.animateXY(1500, 1500, AnimationEasing.EasingOption.EaseOutBack);, +++ b/MPChartLib/src/com/github/mikephil/charting/animation/ChartAnimator.java, +import android.os.Handler;, +import android.os.Message;, +import android.os.SystemClock;, +, +import com.github.mikephil.charting.utils.AnimationEasing;, +    private UpdateListener mListener;, +    public ChartAnimator(UpdateListener listener) {, +    private long mStartTime;, +    private FrameHandler mHandler;, +    private final Object mLock = new Object();, +    private long mXDuration = 0;, +    private long mYDuration = 0;, +    private long mEndTimeX = 0;, +    private long mEndTimeY = 0;, +    private long mEndTime = 0;, +    private boolean mEnabledX = false;, +    private boolean mEnabledY = false;, +    private AnimationEasing.EasingFunction mEasing;, +, +    private static final long FRAME_DELAY = 15;, +, +    protected void startAnimationLoop() {, +        synchronized (mLock) {, +            if (mHandler != null) {, +                mHandler.removeMessages(0);, +                mHandler = null;, +            }, +, +            mHandler = new FrameHandler();, +            mHandler.sendEmptyMessageDelayed(0, FRAME_DELAY);, +        }, +    }, +, +    public void stop() {, +        mEnabledX = false;, +        mEnabledY = false;, +, +        synchronized (mLock) {, +            if (mHandler != null) {, +                mHandler.removeMessages(0);, +                mHandler = null;, +            }, +        }, +    }, +, +    /**, +     * Animates the drawing / rendering of the chart on both x- and y-axis with, +     * the specified animation time. If animate(...) is called, no further, +     * calling of invalidate() is necessary to refresh the chart., +     *, +     * @param durationMillisX, +     * @param durationMillisY, +     * @param easing an easing function to be used on the animation phase, +     */, +    public void animateXY(int durationMillisX, int durationMillisY, final AnimationEasing.EasingFunction easing) {, +, +        stop();, +, +        mStartTime = SystemClock.uptimeMillis();, +        mXDuration = durationMillisX;, +        mYDuration = durationMillisY;, +        mEndTimeX = mStartTime + durationMillisX;, +        mEndTimeY = mStartTime + durationMillisY;, +        mEndTime = mEndTimeX > mEndTimeY ? mEndTimeX : mEndTimeY;, +        mEnabledX = durationMillisX > 0;, +        mEnabledY = durationMillisY > 0;, +, +        mEasing = easing;, +, +        if (mEnabledX || mEnabledY), +            startAnimationLoop();, +    }, +, +    /**, +     * Animates the drawing / rendering of the chart on both x- and y-axis with, +     * the specified animation time. If animate(...) is called, no further, +     * calling of invalidate() is necessary to refresh the chart., +     *, +     * @param durationMillisX, +     * @param durationMillisY, +     * @param easing an easing function option to be used on the animation phase, +     */, +    public void animateXY(int durationMillisX, int durationMillisY, AnimationEasing.EasingOption easing) {, +        animateXY(durationMillisX, durationMillisY, AnimationEasing.getEasingFunctionFromOption(easing));, +    }, +        animateXY(durationMillisX, durationMillisY, (AnimationEasing.EasingFunction)null);, +     * Animates the rendering of the chart on the y-axis with the specified, +     * @param easing an easing function to be used on the animation phase, +    public void animateY(int durationMillis, final AnimationEasing.EasingFunction easing) {, +        animateXY(0, durationMillis, easing);, +    }, +    /**, +     * Animates the rendering of the chart on the y-axis with the specified]