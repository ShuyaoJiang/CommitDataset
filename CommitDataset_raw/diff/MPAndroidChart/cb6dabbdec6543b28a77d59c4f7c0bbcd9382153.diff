[+++ b/MPChartLib/src/main/java/com/github/mikephil/charting/utils/ObjectPool.java, +package com.github.mikephil.charting.utils;, +, +import java.util.List;, +, +/**, + * An object pool for recycling of object instances extending Poolable., + *, + *, + * Cost/Benefit :, + *   Cost - The pool can only contain objects extending Poolable., + *   Benefit - The pool can very quickly determine if an object is elligable for storage without iteration., + *   Benefit - The pool can also know if an instance of Poolable is already stored in a different pool instance., + *   Benefit - The pool can grow as needed, if it is empty, + *   Cost - However, refilling the pool when it is empty might incur a time cost with sufficiently large capacity.  Set the replenishPercentage to a lower number if this is a concern., + *, + * Created by Tony Patino on 6/20/16., + */, +public class ObjectPool<T extends ObjectPool.Poolable> {, +, +    private static int ids = 0;, +, +    private int poolId;, +    private int desiredCapacity;, +    private Object[] objects;, +    private int objectsPointer;, +    private T modelObject;, +    private float replenishPercentage;, +, +, +    /**, +     * Returns the id of the given pool instance., +     *, +     * @return an integer ID belonging to this pool instance., +     */, +    public int getPoolId(){, +        return poolId;, +    }, +, +    /**, +     * Returns an ObjectPool instance, of a given starting capacity, that recycles instances of a given Poolable object., +     *, +     * @param withCapacity A positive integer value., +     * @param object An instance of the object that the pool should recycle., +     * @return, +     */, +    public static synchronized ObjectPool create(int withCapacity, Poolable object){, +        ObjectPool result = new ObjectPool(withCapacity, object);, +        result.poolId = ids;, +        ids++;, +, +        return result;, +    }, +, +    private ObjectPool(int withCapacity, T object){, +        if(withCapacity <= 0){, +            throw new IllegalArgumentException("Object Pool must be instantiated with a capacity greater than 0!");, +        }, +        this.desiredCapacity = withCapacity;, +        this.objects = new Object[this.desiredCapacity];, +        this.objectsPointer = 0;, +        this.modelObject = object;, +        this.replenishPercentage = 1.0f;, +        this.refillPool();, +    }, +, +    /**, +     * Set the percentage of the pool to replenish on empty.  Valid values are between, +     * 0.00f and 1.00f, +     *, +     * @param percentage a value between 0 and 1, representing the percentage of the pool to replenish., +     */, +    public void setReplenishPercentage(float percentage){, +        float p = percentage;, +        if(p > 1){, +            p = 1;, +        }, +        else if(p < 0f){, +            p = 0f;, +        }, +        this.replenishPercentage = p;, +    }, +, +    public float getReplenishPercentage(){, +        return replenishPercentage;, +    }, +, +    private void refillPool(){, +        this.refillPool(this.replenishPercentage);, +    }, +, +    private void refillPool(float percentage){, +        int portionOfCapacity = (int) (desiredCapacity * percentage);, +, +        if(portionOfCapacity < 1){, +            portionOfCapacity = 1;, +        }else if(portionOfCapacity > desiredCapacity){, +            portionOfCapacity = desiredCapacity;, +        }, +]