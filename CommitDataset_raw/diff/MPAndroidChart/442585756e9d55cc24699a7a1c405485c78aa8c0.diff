[+++ b/MPChartLib/src/com/github/mikephil/charting/charts/CandleStickChart.java, +import com.github.mikephil.charting.renderer.CandleStickChartRenderer;, +    protected void init() {, +        super.init();, +        , +        mRenderer = new CandleStickChartRenderer(this, mAnimator, mViewPortHandler);, +    }, +, +    @Override, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/CandleStickChart.java, +import com.github.mikephil.charting.renderer.CandleStickChartRenderer;, +    protected void init() {, +        super.init();, +        , +        mRenderer = new CandleStickChartRenderer(this, mAnimator, mViewPortHandler);, +    }, +, +    @Override, +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/CandleStickChartRenderer.java, +, +package com.github.mikephil.charting.renderer;, +, +import android.graphics.Canvas;, +import android.graphics.Paint;, +, +import com.github.mikephil.charting.animation.ChartAnimator;, +import com.github.mikephil.charting.charts.CandleStickChart;, +import com.github.mikephil.charting.data.CandleData;, +import com.github.mikephil.charting.data.CandleDataSet;, +import com.github.mikephil.charting.data.CandleEntry;, +import com.github.mikephil.charting.utils.Highlight;, +, +import java.util.ArrayList;, +, +public class CandleStickChartRenderer extends DataRenderer {, +, +    protected CandleStickChart mChart;, +, +    public CandleStickChartRenderer(CandleStickChart chart, ChartAnimator animator,, +            ViewPortHandler viewPortHandler) {, +        super(animator, viewPortHandler);, +        mChart = chart;, +    }, +, +    @Override, +    public void drawData(Canvas c) {, +, +        CandleData candleData = mChart.getData();, +, +        for (CandleDataSet set : candleData.getDataSets()) {, +, +            if (set.isVisible()), +                drawDataSet(c, set);, +        }, +    }, +, +    protected void drawDataSet(Canvas c, CandleDataSet dataSet) {, +, +        // pre allocate, +        float[] shadowPoints = new float[4];, +        float[] bodyPoints = new float[4];, +, +        ArrayList<CandleEntry> entries = dataSet.getYVals();, +, +        mRenderPaint.setStrokeWidth(dataSet.getShadowWidth());, +, +        for (int j = 0; j < entries.size() * mAnimator.getPhaseX(); j++) {, +, +            // get the color that is specified for this position from, +            // the DataSet, this will reuse colors, if the index is out, +            // of bounds, +            mRenderPaint.setColor(dataSet.getColor(j));, +, +            // get the entry, +            CandleEntry e = entries.get(j);, +, +            Transformer trans = mChart.getTransformer(dataSet.getAxisDependency());, +, +            // transform the entries values for shadow and body, +            transformShadow(shadowPoints, e, trans);, +            transformBody(bodyPoints, e, dataSet.getBodySpace(), trans);, +, +            float xShadow = shadowPoints[0];, +            float leftBody = bodyPoints[0];, +            float rightBody = bodyPoints[2];, +, +            float high = shadowPoints[1];, +            float low = shadowPoints[3];, +, +            float open = bodyPoints[1];, +            float close = bodyPoints[3];, +, +            if (!mViewPortHandler.isInBoundsRight(leftBody)), +                break;, +, +            // make sure the lines don't do shitty things outside, +            // bounds, +            if (j != 0 && !mViewPortHandler.isInBoundsLeft(rightBody), +                    && !mViewPortHandler.isInBoundsTop(low), +                    && !mViewPortHandler.isInBoundsBottom(high))]