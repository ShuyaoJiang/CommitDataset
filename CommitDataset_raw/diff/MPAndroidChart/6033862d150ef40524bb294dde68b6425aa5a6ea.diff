[+++ b/MPChartExample/libs/android-support-v4.jar, +++ b/MPChartExample/libs/android-support-v4.jar, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +		l.setPosition(LegendPosition.BELOW_CHART_LEFT);, +++ b/MPChartExample/libs/android-support-v4.jar, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +		l.setPosition(LegendPosition.BELOW_CHART_LEFT);, +++ b/MPChartLib/libs/android-support-v4.jar, +++ b/MPChartExample/libs/android-support-v4.jar, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +		l.setPosition(LegendPosition.BELOW_CHART_LEFT);, +++ b/MPChartLib/libs/android-support-v4.jar, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +        mLegendLabelPaint.setTextSize(mLegend.getTextSize());, +, +        float textSize = mLegend.getTextSize();, +++ b/MPChartExample/libs/android-support-v4.jar, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +		l.setPosition(LegendPosition.BELOW_CHART_LEFT);, +++ b/MPChartLib/libs/android-support-v4.jar, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +        mLegendLabelPaint.setTextSize(mLegend.getTextSize());, +, +        float textSize = mLegend.getTextSize();, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java, +import com.github.mikephil.charting.utils.XLabels.XLabelPosition;, +     * , +        if (mLegend == null), +            return;, +, +        // setup offsets for legend, +            mLegend.setOffsetRight(mLegend.getMaximumEntryLength(mLegendLabelPaint));, +, +            mLegend.setOffsetBottom(mLegendLabelPaint.getTextSize() * 3.5f);, +, +        if (mDrawLegend) {, +, +            mOffsetBottom = Math.max(mOffsetBottom, mLegend.getOffsetBottom());, +        mLegend.setOffsetTop(mOffsetTop);, +        mLegend.setOffsetLeft(mOffsetLeft);, +, +                PieDataSet set = (PieDataSet) mCurrentData, +                        .getDataSetByIndex(mIndicesToHightlight[i], +     * draws the hole in the center of the chart and the transparent circle /, +     * hole, +        if (p != null), +            return p;, +++ b/MPChartExample/libs/android-support-v4.jar, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +		l.setPosition(LegendPosition.BELOW_CHART_LEFT);, +++ b/MPChartLib/libs/android-support-v4.jar, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +        mLegendLabelPaint.setTextSize(mLegend.getTextSize());, +, +        float textSize = mLegend.getTextSize();, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java, +import com.github.mikephil.charting.utils.XLabels.XLabelPosition;, +     * , +        if (mLegend == null), +            return;, +, +        // setup offsets for legend, +            mLegend.setOffsetRight(mLegend.getMaximumEntryLength(mLegendLabelPaint));, +, +            mLegend.setOffsetBottom(mLegendLabelPaint.getTextSize() * 3.5f);, +, +        if (mDrawLegend) {, +, +            mOffsetBottom = Math.max(mOffsetBottom, mLegend.getOffsetBottom());, +        mLegend.setOffsetTop(mOffsetTop);, +        mLegend.setOffsetLeft(mOffsetLeft);, +, +                PieDataSet set = (PieDataSet) mCurrentData, +                        .getDataSetByIndex(mIndicesToHightlight[i], +     * draws the hole in the center of the chart and the transparent circle /, +     * hole, +        if (p != null), +            return p;, +++ b/MPChartLib/src/com/github/mikephil/charting/utils/Legend.java, +    /** the text size of the legend labels */, +    private float mTextSize = 9f;, +, +        mFormSize = Utils.convertDpToPixel(8f);, +        mFormToTextSpace = Utils.convertDpToPixel(5f);, +        mTextSize = Utils.convertDpToPixel(9f);, +        mTextSize = l.mTextSize;, +    , +    /**, +     * sets the text size of the legend labels, default 9f, +     * @param size, +     */, +    public void setTextSize(float size) {, +        mTextSize = Utils.convertDpToPixel(size);, +    }, +    , +    /**, +     * returns the text size of the legend labels, +     * @return, +     */, +    public float getTextSize() {]