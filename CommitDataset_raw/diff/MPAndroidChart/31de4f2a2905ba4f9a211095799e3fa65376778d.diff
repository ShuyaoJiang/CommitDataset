[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartPositiveNegative.java, +        set.setValueTextColors(colors);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartPositiveNegative.java, +        set.setValueTextColors(colors);, +++ b/MPChartLib/src/com/github/mikephil/charting/data/BaseDataSet.java, +     * List representing all colors that are used for drawing the actual values for this DataSet, +     */, +    protected List<Integer> mValueColors = null;, +, +    /**, +        mValueColors = new ArrayList<Integer>();, +        mValueColors.add(Color.BLACK);, +        mValueColors.clear();, +        mValueColors.add(color);, +    }, +, +    @Override, +    public void setValueTextColors(List<Integer> colors) {, +        mValueColors = colors;, +    public int getValueTextColor(int index) {, +        return mValueColors.get(index % mValueColors.size());, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartPositiveNegative.java, +        set.setValueTextColors(colors);, +++ b/MPChartLib/src/com/github/mikephil/charting/data/BaseDataSet.java, +     * List representing all colors that are used for drawing the actual values for this DataSet, +     */, +    protected List<Integer> mValueColors = null;, +, +    /**, +        mValueColors = new ArrayList<Integer>();, +        mValueColors.add(Color.BLACK);, +        mValueColors.clear();, +        mValueColors.add(color);, +    }, +, +    @Override, +    public void setValueTextColors(List<Integer> colors) {, +        mValueColors = colors;, +    public int getValueTextColor(int index) {, +        return mValueColors.get(index % mValueColors.size());, +++ b/MPChartLib/src/com/github/mikephil/charting/interfaces/datasets/IDataSet.java, +     * Sets a list of colors to be used as the colors for the drawn values., +     *, +     * @param colors, +     */, +    void setValueTextColors(List<Integer> colors);, +, +    /**, +     * Returns the color at the specified index that is used for drawing the values inside the chart., +     * Uses modulus internally., +     * @param index, +    int getValueTextColor(int index);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartPositiveNegative.java, +        set.setValueTextColors(colors);, +++ b/MPChartLib/src/com/github/mikephil/charting/data/BaseDataSet.java, +     * List representing all colors that are used for drawing the actual values for this DataSet, +     */, +    protected List<Integer> mValueColors = null;, +, +    /**, +        mValueColors = new ArrayList<Integer>();, +        mValueColors.add(Color.BLACK);, +        mValueColors.clear();, +        mValueColors.add(color);, +    }, +, +    @Override, +    public void setValueTextColors(List<Integer> colors) {, +        mValueColors = colors;, +    public int getValueTextColor(int index) {, +        return mValueColors.get(index % mValueColors.size());, +++ b/MPChartLib/src/com/github/mikephil/charting/interfaces/datasets/IDataSet.java, +     * Sets a list of colors to be used as the colors for the drawn values., +     *, +     * @param colors, +     */, +    void setValueTextColors(List<Integer> colors);, +, +    /**, +     * Returns the color at the specified index that is used for drawing the values inside the chart., +     * Uses modulus internally., +     * @param index, +    int getValueTextColor(int index);, +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/BarChartRenderer.java, +                                valuePoints[j + 1] + (val >= 0 ? posOffset : negOffset), dataSet.getValueTextColor(j / 2));, +                                    valuePoints[j + 1] + (entry.getVal() >= 0 ? posOffset : negOffset), dataSet.getValueTextColor(j / 2));, +                            int color = dataSet.getValueTextColor(j / 2);, +, +                                drawValue(c, dataSet.getValueFormatter(), vals[k / 2], entry, i, x, y, color);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartPositiveNegative.java, +        set.setValueTextColors(colors);, +++ b/MPChartLib/src/com/github/mikephil/charting/data/BaseDataSet.java, +     * List representing all colors that are used for drawing the actual values for this DataSet, +     */, +    protected List<Integer> mValueColors = null;, +, +    /**, +        mValueColors = new ArrayList<Integer>();, +        mValueColors.add(Color.BLACK);, +        mValueColors.clear();]