[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, +        yl.setPosition(YLabelPosition.BOTH_SIDED);, +            float val = (float) (Math.random() * mult);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, +        yl.setPosition(YLabelPosition.BOTH_SIDED);, +            float val = (float) (Math.random() * mult);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/DynamicalAddingActivity.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, +        yl.setPosition(YLabelPosition.BOTH_SIDED);, +            float val = (float) (Math.random() * mult);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/DynamicalAddingActivity.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity.java, +//        // dont forget to refresh the drawing, +//        mChart.invalidate();, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, +        yl.setPosition(YLabelPosition.BOTH_SIDED);, +            float val = (float) (Math.random() * mult);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/DynamicalAddingActivity.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity.java, +//        // dont forget to refresh the drawing, +//        mChart.invalidate();, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +, +        drawBorder();, +, +        prepareYLabels();, +, +        , +        calculateOffsets();, +        float legendRight = 0f, legendBottom = 0f;, +, +        // setup offsets for legend, +        if (mDrawLegend) {, +, +, +                legendRight = mLegend.getMaximumEntryLength(mLegendLabelPaint), +                        + mLegend.getFormSize() + mLegend.getFormToTextSpace() + spacing;, +, +                    legendBottom = mLegendLabelPaint.getTextSize() * 3.5f;, +                    legendBottom = mLegendLabelPaint.getTextSize() * 2.5f;, +            mLegend.setOffsetBottom(legendBottom);, +            mLegend.setOffsetRight(legendRight);, +        }, +, +        , +        String label = mYLabels.getFormattedLabel(mYLabels.mEntryCount - 1);, +, +        // calculate the maximum y-label width (including eventual offsets), +        float ylabelwidth = Utils.calcTextWidth(mYLabelPaint,, +                label + mUnit + (mYChartMin < 0 ? "----" : "+++")); // offsets, +, +        if (mDrawYLabels) {, +                yleft = ylabelwidth;, +                yright = ylabelwidth;, +                yright = ylabelwidth;, +                yleft = ylabelwidth;, +        }, +, +        float xtop = 0f, xbottom = 0f;, +, +        float xlabelheight = Utils.calcTextHeight(mXLabelPaint, "Q") * 2f;, +, +        if (mDrawXLabels) {, +                xbottom = xlabelheight;, +                xtop = xlabelheight;, +                xbottom = xlabelheight;, +                xtop = xlabelheight;, +        // all required offsets are calculated, now find largest and apply, +        float min = Utils.convertDpToPixel(11f);, +, +        mOffsetBottom = Math.max(min, xbottom + legendBottom);, +        mOffsetTop = Math.max(min, xtop);, +, +        mOffsetLeft = Math.max(min, yleft);, +        mOffsetRight = Math.max(min, yright + legendRight);, +, +            offset.setTranslate(mOffsetLeft, -mOffsetTop);, +        float yMin = 0f;, +        float yMax = 0f;, +   , +        if(mContentRect.width() > 10) {, +            , +                yMin = (float) p2.y;, +                yMax = (float) p1.y;, +                    yMin = (float) Math.min(p1.y, p2.y);, +                    yMin = 0;, +                yMax = (float) Math.max(p1.y, p2.y);, +        } else {, +            , +            if (!mInvertYAxis) {, +                yMin = mYChartMin;, +                yMax = mYChartMax;, +            } else {, +, +                if (!mStartAtZero), +                    yMin = (float) Math.min(mYChartMax, mYChartMin);, +                else, +                    yMin = 0;, +                yMax = (float) Math.max(mYChartMax, mYChartMin);, +            }  ]