[+++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +import com.github.mikephil.charting.utils.SelectionDetail;, +        List<SelectionDetail> valsAtIndex = getSelectionDetailsAtIndex(xIndex);, +     * Returns an array of SelectionDetail objects for the given x-index. The SelectionDetail, +    protected List<SelectionDetail> getSelectionDetailsAtIndex(int xIndex) {, +        List<SelectionDetail> vals = new ArrayList<SelectionDetail>();, +                vals.add(new SelectionDetail(pts[1], i, dataSet));, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +import com.github.mikephil.charting.utils.SelectionDetail;, +        List<SelectionDetail> valsAtIndex = getSelectionDetailsAtIndex(xIndex);, +     * Returns an array of SelectionDetail objects for the given x-index. The SelectionDetail, +    protected List<SelectionDetail> getSelectionDetailsAtIndex(int xIndex) {, +        List<SelectionDetail> vals = new ArrayList<SelectionDetail>();, +                vals.add(new SelectionDetail(pts[1], i, dataSet));, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieRadarChartBase.java, +import com.github.mikephil.charting.utils.SelectionDetail;, +     * Returns an array of SelectionDetail objects for the given x-index. The SelectionDetail, +    public List<SelectionDetail> getYValsAtIndex(int xIndex) {, +        List<SelectionDetail> vals = new ArrayList<SelectionDetail>();, +                vals.add(new SelectionDetail(yVal, i, dataSet));, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +import com.github.mikephil.charting.utils.SelectionDetail;, +        List<SelectionDetail> valsAtIndex = getSelectionDetailsAtIndex(xIndex);, +     * Returns an array of SelectionDetail objects for the given x-index. The SelectionDetail, +    protected List<SelectionDetail> getSelectionDetailsAtIndex(int xIndex) {, +        List<SelectionDetail> vals = new ArrayList<SelectionDetail>();, +                vals.add(new SelectionDetail(pts[1], i, dataSet));, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieRadarChartBase.java, +import com.github.mikephil.charting.utils.SelectionDetail;, +     * Returns an array of SelectionDetail objects for the given x-index. The SelectionDetail, +    public List<SelectionDetail> getYValsAtIndex(int xIndex) {, +        List<SelectionDetail> vals = new ArrayList<SelectionDetail>();, +                vals.add(new SelectionDetail(yVal, i, dataSet));, +++ b/MPChartLib/src/com/github/mikephil/charting/listener/PieRadarChartTouchListener.java, +import com.github.mikephil.charting.utils.SelectionDetail;, +                List<SelectionDetail> valsAtIndex = mChart.getYValsAtIndex(index);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +import com.github.mikephil.charting.utils.SelectionDetail;, +        List<SelectionDetail> valsAtIndex = getSelectionDetailsAtIndex(xIndex);, +     * Returns an array of SelectionDetail objects for the given x-index. The SelectionDetail, +    protected List<SelectionDetail> getSelectionDetailsAtIndex(int xIndex) {, +        List<SelectionDetail> vals = new ArrayList<SelectionDetail>();, +                vals.add(new SelectionDetail(pts[1], i, dataSet));, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieRadarChartBase.java, +import com.github.mikephil.charting.utils.SelectionDetail;, +     * Returns an array of SelectionDetail objects for the given x-index. The SelectionDetail, +    public List<SelectionDetail> getYValsAtIndex(int xIndex) {, +        List<SelectionDetail> vals = new ArrayList<SelectionDetail>();, +                vals.add(new SelectionDetail(yVal, i, dataSet));, +++ b/MPChartLib/src/com/github/mikephil/charting/listener/PieRadarChartTouchListener.java, +import com.github.mikephil.charting.utils.SelectionDetail;, +                List<SelectionDetail> valsAtIndex = mChart.getYValsAtIndex(index);, +++ /dev/null, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +import com.github.mikephil.charting.utils.SelectionDetail;, +        List<SelectionDetail> valsAtIndex = getSelectionDetailsAtIndex(xIndex);, +     * Returns an array of SelectionDetail objects for the given x-index. The SelectionDetail, +    protected List<SelectionDetail> getSelectionDetailsAtIndex(int xIndex) {, +        List<SelectionDetail> vals = new ArrayList<SelectionDetail>();, +                vals.add(new SelectionDetail(pts[1], i, dataSet));, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieRadarChartBase.java, +import com.github.mikephil.charting.utils.SelectionDetail;, +     * Returns an array of SelectionDetail objects for the given x-index. The SelectionDetail, +    public List<SelectionDetail> getYValsAtIndex(int xIndex) {, +        List<SelectionDetail> vals = new ArrayList<SelectionDetail>();, +                vals.add(new SelectionDetail(yVal, i, dataSet));, +++ b/MPChartLib/src/com/github/mikephil/charting/listener/PieRadarChartTouchListener.java, +import com.github.mikephil.charting.utils.SelectionDetail;, +                List<SelectionDetail> valsAtIndex = mChart.getYValsAtIndex(index);, +++ /dev/null, +++ b/MPChartLib/src/com/github/mikephil/charting/utils/SelectionDetail.java, +package com.github.mikephil.charting.utils;, +, +import com.github.mikephil.charting.data.DataSet;, +, +/**, + * Class that encapsulates information of a value that has been, + * selected/highlighted and its DataSet index. The SelectionDetail objects give, + * information about the value at the selected index and the DataSet it belongs, + * to. Needed only for highlighting onTouch()., + *, + * @author Philipp Jahoda, + */, +public class SelectionDetail {, +, +    public float val;, +    public int dataSetIndex;, +    public DataSet<?> dataSet;, +, +    public SelectionDetail(float val, int dataSetIndex, DataSet<?> set) {, +        this.val = val;, +        this.dataSetIndex = dataSetIndex;, +        this.dataSet = set;, +    }, +}, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +import com.github.mikephil.charting.utils.SelectionDetail;, +        List<SelectionDetail> valsAtIndex = getSelectionDetailsAtIndex(xIndex);, +     * Returns an array of SelectionDetail objects for the given x-index. The SelectionDetail, +    protected List<SelectionDetail> getSelectionDetailsAtIndex(int xIndex) {]