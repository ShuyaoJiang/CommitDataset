[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity.java, +import com.github.mikephil.charting.utils.LimitLine;, +//        LimitLine ll = new LimitLine(130f);, +//        ll.setLineWidth(4f);, +//        ll.enableDashedLine(10f, 10f, 0f);, +//        , +//        LimitLine ll1 = new LimitLine(-30f);, +//        ll1.setLineWidth(4f);, +//        ll1.enableDashedLine(10f, 10f, 0f);, +//        , +//        data.addLimitLine(ll);, +//        data.addLimitLine(ll1);, +, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity.java, +import com.github.mikephil.charting.utils.LimitLine;, +//        LimitLine ll = new LimitLine(130f);, +//        ll.setLineWidth(4f);, +//        ll.enableDashedLine(10f, 10f, 0f);, +//        , +//        LimitLine ll1 = new LimitLine(-30f);, +//        ll1.setLineWidth(4f);, +//        ll1.enableDashedLine(10f, 10f, 0f);, +//        , +//        data.addLimitLine(ll);, +//        data.addLimitLine(ll1);, +, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +import com.github.mikephil.charting.data.BarLineScatterData;, +import com.github.mikephil.charting.utils.LimitLine;, +    /** paint used for the limit lines */, +    protected Paint mLimitLinePaint;, +, +, +        mLimitLinePaint = new Paint(Paint.ANTI_ALIAS_FLAG);, +        mLimitLinePaint.setStyle(Paint.Style.STROKE);, +        drawLimitLines();, +, +     * Draws the limit lines if there are one., +     */, +    private void drawLimitLines() {, +, +        ArrayList<LimitLine> limitLines = ((BarLineScatterData) mOriginalData).getLimitLines();, +, +        if (limitLines == null), +            return;, +        , +        // pre allocate to save performance, +        float[] pts = new float[] {, +                0, 0, 0, 0, +        };, +, +        for (int i = 0; i < limitLines.size(); i++) {, +         , +            LimitLine l = limitLines.get(i);, +, +            pts[0] = 0f;, +            pts[1] = l.getLimit();, +            pts[2] = mDeltaX;, +            pts[3] = l.getLimit();, +, +            transformPointArray(pts);, +, +            mLimitLinePaint.setColor(l.getLineColor());, +            mLimitLinePaint.setPathEffect(l.getDashPathEffect());, +            mLimitLinePaint.setStrokeWidth(l.getLineWidth());, +, +            mDrawCanvas.drawLine(pts[0], pts[1], pts[2], pts[3], mLimitLinePaint);, +        }        , +    }, +, +    /**, +            case PAINT_LIMIT_LINE:, +                mLimitLinePaint = p;, +                break;, +            case PAINT_LIMIT_LINE:, +                return mLimitLinePaint;, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity.java, +import com.github.mikephil.charting.utils.LimitLine;, +//        LimitLine ll = new LimitLine(130f);, +//        ll.setLineWidth(4f);, +//        ll.enableDashedLine(10f, 10f, 0f);, +//        , +//        LimitLine ll1 = new LimitLine(-30f);, +//        ll1.setLineWidth(4f);, +//        ll1.enableDashedLine(10f, 10f, 0f);, +//        , +//        data.addLimitLine(ll);, +//        data.addLimitLine(ll1);, +, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +import com.github.mikephil.charting.data.BarLineScatterData;, +import com.github.mikephil.charting.utils.LimitLine;, +    /** paint used for the limit lines */, +    protected Paint mLimitLinePaint;, +, +, +        mLimitLinePaint = new Paint(Paint.ANTI_ALIAS_FLAG);, +        mLimitLinePaint.setStyle(Paint.Style.STROKE);, +        drawLimitLines();, +]