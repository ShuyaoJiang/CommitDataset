[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +        mSeekBarX.setProgress(4);, +        mSeekBarX.setOnSeekBarChangeListener(this);, +        mSeekBarY.setOnSeekBarChangeListener(this);, +, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +        mSeekBarX.setProgress(4);, +        mSeekBarX.setOnSeekBarChangeListener(this);, +        mSeekBarY.setOnSeekBarChangeListener(this);, +, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ScatterChartActivity.java, +        l.setXOffset(5f);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +        mSeekBarX.setProgress(4);, +        mSeekBarX.setOnSeekBarChangeListener(this);, +        mSeekBarY.setOnSeekBarChangeListener(this);, +, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ScatterChartActivity.java, +        l.setXOffset(5f);, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/components/Legend.java, +     * This property is deprecated - Use `position`, `horizontalAlignment`, `verticalAlignment`, `orientation`, `drawInside`,, +     * `direction`., +    public enum LegendHorizontalAlignment {, +    public enum LegendVerticalAlignment {, +    public enum LegendOrientation {, +    /**, +     * the legend text array. a null label will start a group., +     */, +    /**, +     * the text direction for the legend, +     */, +    /**, +     * the shape/form the legend colors are drawn in, +     */, +    /**, +     * the size of the legend forms/shapes, +     */, +    /**, +     * the space that should be left between stacked forms, +     */, +    /**, +     * the maximum relative size out of the whole chart view in percent, +     */, +    /**, +     * default constructor, +     */, +        this.mColors = Utils.convertIntegers(colors);, +        this.mLabels = Utils.convertStrings(labels);, +     *, +     *, +        mColors = Utils.convertIntegers(colors);, +        mLabels = Utils.convertStrings(labels);, +        } else if (mOrientation == LegendOrientation.HORIZONTAL) {, +        } else {, +     * the total width of the legend (needed width space), +    /**, +     * the total height of the legend (needed height space), +     */, +    /**, +     * flag that indicates if word wrapping is enabled, +     */, +    private List<FSize> mCalculatedLabelSizes = new ArrayList<>(16);, +    private List<Boolean> mCalculatedLabelBreakPoints = new ArrayList<>(16);, +    private List<FSize> mCalculatedLineSizes = new ArrayList<>(16);, +    public List<FSize> getCalculatedLabelSizes() {, +    public List<Boolean> getCalculatedLabelBreakPoints() {, +    public List<FSize> getCalculatedLineSizes() {, +                float labelLineHeight = Utils.getLineHeight(labelpaint);, +                    } else {, +                float labelLineHeight = Utils.getLineHeight(labelpaint);, +                float labelLineSpacing = Utils.getLineSpacing(labelpaint) + mYEntrySpace;, +                mCalculatedLabelBreakPoints.clear();, +                mCalculatedLabelSizes.clear();, +                mCalculatedLineSizes.clear();, +, +                    mCalculatedLabelBreakPoints.add(false);, +                    } else {, +                        mCalculatedLabelSizes.add(Utils.calcTextSize(labelpaint, mLabels[i]));, +                        requiredWidth += drawingForm ? mFormToTextSpace + mFormSize : 0.f;, +                        requiredWidth += mCalculatedLabelSizes.get(i).width;, +, +                        mCalculatedLabelSizes.add(FSize.getInstance(0.f, 0.f));, +                        } else { // It doesn't fit, we need to wrap a line, +                            mCalculatedLineSizes.add(FSize.getInstance(currentLineWidth, labelLineHeight));, +                            mCalculatedLabelBreakPoints.set(, +                                            : i, true);, +                            mCalculatedLineSizes.add(FSize.getInstance(currentLineWidth, labelLineHeight));, +                        * (float) (mCalculatedLineSizes.size()), +                        (float) (mCalculatedLineSizes.size() == 0, +                                : (mCalculatedLineSizes.size() - 1));, +, +        mNeededHeight += mYOffset;, +        mNeededWidth += mXOffset;, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +        mSeekBarX.setProgress(4);, +        mSeekBarX.setOnSeekBarChangeListener(this);, +        mSeekBarY.setOnSeekBarChangeListener(this);, +, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ScatterChartActivity.java, +        l.setXOffset(5f);]