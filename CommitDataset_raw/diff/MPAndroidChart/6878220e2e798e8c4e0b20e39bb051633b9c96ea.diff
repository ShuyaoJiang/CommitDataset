[+++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BarChart.java, +    /**, +     * Highlights the value at the given x-position in the given DataSet. Provide, +     * -1 as the dataSetIndex to undo all highlighting., +     *, +     * @param x, +     * @param dataSetIndex, +     * @param stackIndex the index inside the stack - only relevant for stacked entries, +     */, +    public void highlightValue(float x, int dataSetIndex, int stackIndex) {, +        highlightValue(new Highlight(x, dataSetIndex, stackIndex), false);, +    }, +, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BarChart.java, +    /**, +     * Highlights the value at the given x-position in the given DataSet. Provide, +     * -1 as the dataSetIndex to undo all highlighting., +     *, +     * @param x, +     * @param dataSetIndex, +     * @param stackIndex the index inside the stack - only relevant for stacked entries, +     */, +    public void highlightValue(float x, int dataSetIndex, int stackIndex) {, +        highlightValue(new Highlight(x, dataSetIndex, stackIndex), false);, +    }, +, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/data/BarEntry.java, +import com.github.mikephil.charting.highlight.Range;, +, +     * the ranges for the individual stack values - automatically calculated, +     */, +    private Range[] mRanges;, +, +    /**, +        calcRanges();, +        calcRanges();, +        calcRanges();, +     * Returns the ranges of the individual stack-entries. Will return null if this entry is not stacked., +     *, +     * @return, +     */, +    public Range[] getRanges() {, +        return mRanges;, +    }, +, +    /**, +, +    protected void calcRanges() {, +, +        float[] values = getYVals();, +, +        if (values == null || values.length == 0), +            return;, +, +        mRanges = new Range[values.length];, +, +        float negRemain = -getNegativeSum();, +        float posRemain = 0f;, +, +        for (int i = 0; i < mRanges.length; i++) {, +, +            float value = values[i];, +, +            if (value < 0) {, +                mRanges[i] = new Range(negRemain, negRemain + Math.abs(value));, +                negRemain += Math.abs(value);, +            } else {, +                mRanges[i] = new Range(posRemain, posRemain + value);, +                posRemain += value;, +        }, +    }, +}, +, +, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BarChart.java, +    /**, +     * Highlights the value at the given x-position in the given DataSet. Provide, +     * -1 as the dataSetIndex to undo all highlighting., +     *, +     * @param x, +     * @param dataSetIndex, +     * @param stackIndex the index inside the stack - only relevant for stacked entries, +     */, +    public void highlightValue(float x, int dataSetIndex, int stackIndex) {, +        highlightValue(new Highlight(x, dataSetIndex, stackIndex), false);, +    }, +, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/data/BarEntry.java, +import com.github.mikephil.charting.highlight.Range;, +, +     * the ranges for the individual stack values - automatically calculated, +     */, +    private Range[] mRanges;, +, +    /**, +        calcRanges();, +        calcRanges();, +        calcRanges();, +     * Returns the ranges of the individual stack-entries. Will return null if this entry is not stacked., +     *]