[+++ b/MPChartLib/src/com/github/mikephil/charting/components/Legend.java, +     * Returns the legend-label at the given index., +     * , +     * @param index, +     * @return, +     */, +    public String getLabel(int index) {, +        return mLabels[index];, +    }, +, +    /**, +++ b/MPChartLib/src/com/github/mikephil/charting/components/Legend.java, +     * Returns the legend-label at the given index., +     * , +     * @param index, +     * @return, +     */, +    public String getLabel(int index) {, +        return mLabels[index];, +    }, +, +    /**, +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/LegendRenderer.java, +    protected Paint mLegendLabelPaint;, +    protected Paint mLegendFormPaint;, +        mLegendLabelPaint = new Paint(Paint.ANTI_ALIAS_FLAG);, +        mLegendLabelPaint.setTextSize(Utils.convertDpToPixel(9f));, +        mLegendFormPaint = new Paint(Paint.ANTI_ALIAS_FLAG);, +        mLegendFormPaint.setStyle(Paint.Style.FILL);, +        mLegendFormPaint.setStrokeWidth(3f);, +        return mLegendLabelPaint;, +        return mLegendFormPaint;, +            mLegendLabelPaint.setTypeface(tf);, +        mLegendLabelPaint.setTextSize(legend.getTextSize());, +        mLegendLabelPaint.setColor(legend.getTextColor());, +        float textDrop = (Utils.calcTextHeight(mLegendLabelPaint, "AQJ") + formSize) / 2f;, +                        drawLabel(c, posX, posY + textDrop, legend.getLabel(i));, +                        posX += Utils.calcTextWidth(mLegendLabelPaint, labels[i]), +                        posX -= Utils.calcTextWidth(mLegendLabelPaint, labels[i]), +                        drawLabel(c, posX, posY + textDrop, legend.getLabel(i));, +                        - legend.getMaximumEntryLength(mLegendLabelPaint), +                            drawLabel(c, x, posY, legend.getLabel(i));, +                            drawLabel(c, posX, posY, legend.getLabel(i));, +                        - legend.getMaximumEntryLength(mLegendLabelPaint), +                        - legend.getFullHeight(mLegendLabelPaint) / 2f;, +                            drawLabel(c, x, posY, legend.getLabel(i));, +                            drawLabel(c, posX, posY, legend.getLabel(i));, +                float fullSize = legend.getFullWidth(mLegendLabelPaint);, +                        drawLabel(c, posX, posY + textDrop, legend.getLabel(i));, +                        posX += Utils.calcTextWidth(mLegendLabelPaint, labels[i]), +                        - (legend.getMaximumEntryLength(mLegendLabelPaint) + legend, +                        - legend.getFullHeight(mLegendLabelPaint) / 2f;, +                            drawLabel(c, x, posY, legend.getLabel(i));, +                            drawLabel(c, posX, posY, legend.getLabel(i));, +                        - legend.getMaximumEntryLength(mLegendLabelPaint), +                            drawLabel(c, x, posY, legend.getLabel(i));, +                            drawLabel(c, posX, posY, legend.getLabel(i));, +        mLegendFormPaint.setColor(legend.getColors()[index]);, +                c.drawCircle(x + half, y + half, half, mLegendFormPaint);, +                c.drawRect(x, y, x + formsize, y + formsize, mLegendFormPaint);, +                c.drawLine(x, y + half, x + formsize, y + half, mLegendFormPaint);, +, +    /**, +     * Draws the provided label at the given position., +     * , +     * @param c canvas to draw with, +     * @param x, +     * @param y, +     * @param label the label to draw, +     */, +    protected void drawLabel(Canvas c, float x, float y, String label) {, +        c.drawText(label, x, y, mLegendLabelPaint);, +    }]