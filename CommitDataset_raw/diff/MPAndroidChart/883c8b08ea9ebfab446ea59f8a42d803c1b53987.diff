[+++ b/MPChartExample/src/com/example/mpchartexample/DrawChartActivity.java, + * This Activity demonstrates drawing into the Chart with the finger. Both line, bar and scatter charts can be used for, + * drawing., +public class DrawChartActivity extends Activity implements OnChartValueSelectedListener, OnDrawListener {, +		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);, +		Log.i("VALS SELECTED", "Value: " + values[0].getVal() + ", xIndex: " + highlights[0].getXIndex(), +, +	@Override, +	public void onEntryMoved(Entry entry) {, +		Log.i(Chart.LOG_TAG, "Point moved " + entry.toString());, +	}, +++ b/MPChartExample/src/com/example/mpchartexample/DrawChartActivity.java, + * This Activity demonstrates drawing into the Chart with the finger. Both line, bar and scatter charts can be used for, + * drawing., +public class DrawChartActivity extends Activity implements OnChartValueSelectedListener, OnDrawListener {, +		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);, +		Log.i("VALS SELECTED", "Value: " + values[0].getVal() + ", xIndex: " + highlights[0].getXIndex(), +, +	@Override, +	public void onEntryMoved(Entry entry) {, +		Log.i(Chart.LOG_TAG, "Point moved " + entry.toString());, +	}, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +	 * string that is drawn next to the values in the chart, indicating their unit, +	 * width of the x-legend in pixels - this is calculated by the calcTextWidth() method, +	 * the modulus that indicates if a value at a specified index in an array(list) for the x-legend is drawn or not. If, +	 * index % modulus == 0 DRAW, else dont draw., +	 * flag that indicates if pinch-zoom is enabled. if true, both x and y axis can be scaled with 2 fingers, if false,, +	 * x and y axis can be scaled separately, +	 * if set to true, the x-legend entries will adjust themselves when scaling the graph, +	 * if set to true, the highlight indicator (lines for linechart, dark bar for barchart) will be drawn upon selecting, +	 * values., +	 * boolean to indicate if user drawing on chart should automatically be finished, +	 * the object representing the y-legend, this object is prepared in the prepareYLegend() method, +	 * does all necessary preparations, needed when data is changed or flags that effect the data are changed, +	 * calculates the required number of digits for the y-legend and for the values that might be drawn in the chart (if, +	 * enabled), +		int length = (int) (((float) (mData.getXVals().get(0).length() + mData.getXVals().get(mData.getXValCount() - 1), +	 * Sets up the y-legend. Computes the desired number of labels between the two given extremes. Unlike the, +	 * prepareXLegend() method, this method needs to be called upon every refresh of the view., +		float[] position = new float[] { 0f, 0f };, +					mDrawCanvas.drawText(mData.getXVals().get(i), position[0], mOffsetTop - 5, mXLegendPaint);, +			String text = Utils.formatNumber(mYLegend.mEntries[i], mYLegend.mDecimals, mSeparateTousands);, +				mDrawCanvas.drawText(text + mUnit, mOffsetLeft - 10, positions[i * 2 + 1], mYLegendPaint);, +		mDrawCanvas.drawRect(mOffsetLeft, mOffsetTop, getWidth() - mOffsetRight, getHeight() - mOffsetBottom,, +		Rect gridBackground = new Rect(mOffsetLeft, mOffsetTop, getWidth() - mOffsetRight, getHeight() - mOffsetBottom);, +		float[] position = new float[] { 0f, 0f };, +					mDrawCanvas.drawLine(position[0], mOffsetTop, position[0], getHeight() - mOffsetBottom, mGridPaint);, +	 * returns true if the specified point (x-axis) exceeds the limits of what is visible to the right side, +	 * returns true if the specified point (x-axis) exceeds the limits of what is visible to the left side, +	 * returns true if the specified point (y-axis) exceeds the limits of what is visible on the top, +	 * returns true if the specified point (y-axis) exceeds the limits of what is visible on the bottom, +	 * Zooms in by 1.4f, x and y are the coordinates (in pixels) of the zoom center., +	 * Zooms out by 0.7f, x and y are the coordinates (in pixels) of the zoom center., +	 * Zooms in or out by the given scale factor. x and y are the coordinates (in pixels) of the zoom center., +	 * @param scaleX, +	 *            if < 1f --> zoom out, if > 1f --> zoom in, +	 * @param scaleY, +	 *            if < 1f --> zoom out, if > 1f --> zoom in, +	 * Sets the minimum scale values for both axes. Scale 0.5f means 0.5x zoom (zoomed out by factor 2), scale 0.1f, +	 * means maximum zoomed out by factor 10, scale 2f means the user cannot zoom out further than 2x zoom, ..., +	 * set this to true to enable drawing the top y-legend entry. Disabling this can be helpful when the y-legend and, +	 * x-legend interfear with each other. default: true, +	 * Sets the effective range of y-values the chart can display. If this is set, the y-range is fixed and cannot be, +	 * changed. This means, no recalculation of the bounds of the chart concerning the y-axis will be done when adding, +	 * new data. To disable this, provide Float.NaN as a parameter or call resetYRange();, +	 * @param invalidate, +	 *            if set to true, the chart will redraw itself after calling this method, +	 * Resets the previously set y range. If new data is added, the y-range will be recalculated., +	 * @param invalidate, +	 *            if set to true, the chart will redraw itself after calling this method, +	 * if set to true, the x-legend entries will adjust themselves when scaling the graph default: true, +	 * returns true if the x-legend adjusts itself when scaling the graph, false if not, +	 * sets the number of maximum visible drawn values on the chart only active when setDrawValues() is enabled, +	 * If set to true, the highlight indicators (two lines for linechart, dark bar for barchart) will be drawn upon, +	 * selecting values. Default: true, +	 * if set to true, units are drawn next to values in the chart, default: false, +	 * returns the Highlight object (contains x-index and DataSet index) of the selected value at the given touch point., +		if ((this instanceof LineChart || this instanceof ScatterChart) && (xTouchVal < 0 || xTouchVal > mDeltaX)), +	 * @param valsAtIndex, +	 *            all the values at a specific index, +	 * Returns the x and y values in the chart at the given touch point (encapsulated in a PointD). This method, +	 * transforms pixel coordinates to coordinates / values in the chart. This is the opposite method to, +	 * Transforms the given chart values into pixels. This is the opposite method to getValuesByTouchPoint(...)., +		float[] pts = new float[] { x, y };, +	 * returns the y-value at the given touch position (must not necessarily be a value contained in one of the, +	 * datasets), +		if (h != null) {, +			return mData.getEntryForHighlight(h);, +		}, +		return null;, +	 * calcualtes the maximum x-scale value depending on the number of x-values, maximum scale is numberOfXvals / 2, +	 * Enables data filtering for the chart data, filtering will use the default Approximator. What filtering does is, +	 * reduce the data displayed in the chart with a certain tolerance. This can especially be important concerning, +	 * performance when displaying large datasets., +	 * Enables data filtering for the chart data, filtering will use the user customized Approximator handed over to, +	 * this method., +	 * if set to true, both x and y axis can be scaled with 2 fingers, if false, x and y axis can be scaled separately., +	 * default: false, +++ b/MPChartExample/src/com/example/mpchartexample/DrawChartActivity.java]