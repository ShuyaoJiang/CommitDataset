[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, +import com.github.mikephil.charting.utils.ColorTemplate;, +        //l.setCustom(ColorTemplate.VORDIPLOM_COLORS, new String[] { "a","b", "c", "d", "e" });, +        , +        Log.i("x-index", "low: " + mChart.getLowestVisibleXIndex() + ", high: " + mChart.getHighestVisibleXIndex());, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, +import com.github.mikephil.charting.utils.ColorTemplate;, +        //l.setCustom(ColorTemplate.VORDIPLOM_COLORS, new String[] { "a","b", "c", "d", "e" });, +        , +        Log.i("x-index", "low: " + mChart.getLowestVisibleXIndex() + ", high: " + mChart.getHighestVisibleXIndex());, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/MultiLineChartActivity.java, +        mChart.setDescription("");, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, +import com.github.mikephil.charting.utils.ColorTemplate;, +        //l.setCustom(ColorTemplate.VORDIPLOM_COLORS, new String[] { "a","b", "c", "d", "e" });, +        , +        Log.i("x-index", "low: " + mChart.getLowestVisibleXIndex() + ", high: " + mChart.getHighestVisibleXIndex());, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/MultiLineChartActivity.java, +        mChart.setDescription("");, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +        return (int) ((pts[0] <= getXChartMin()) ? 0 : (pts[0] / div) + 1);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, +import com.github.mikephil.charting.utils.ColorTemplate;, +        //l.setCustom(ColorTemplate.VORDIPLOM_COLORS, new String[] { "a","b", "c", "d", "e" });, +        , +        Log.i("x-index", "low: " + mChart.getLowestVisibleXIndex() + ", high: " + mChart.getHighestVisibleXIndex());, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/MultiLineChartActivity.java, +        mChart.setDescription("");, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +        return (int) ((pts[0] <= getXChartMin()) ? 0 : (pts[0] / div) + 1);, +++ b/MPChartLib/src/com/github/mikephil/charting/components/Legend.java, +    /**, +     * the legend colors array, each color is for the form drawn at the same, +     * index, +     */, +    /**, +     * colors that will be appended to the end of the colors array after, +     * calculating the legend., +     */, +    /**, +     * labels that will be appended to the end of the labels array after, +     * calculating the legend. a null label will start a group., +     */, +     * Are the legend labels/colors a custom value or auto calculated? If false,, +     * then it's auto, if true, then custom. default false (automatic legend), +        mColors = Utils.convertIntegers(colors);, +        ;, +        mLabels = Utils.convertStrings(labels);, +        ;, +    public String[] getLabels() {, +     * colors that will be appended to the end of the colors array after, +     * calculating the legend., +     * colors that will be appended to the end of the colors array after, +     * calculating the legend. (if the legend has already been calculated, you, +     * will need to call notifyDataSetChanged()), +     * labels that will be appended to the end of the labels array after, +     * calculating the legend. a null label will start a group., +     * labels that will be appended to the end of the labels array after, +     * calculating the legend. a null label will start a group. (if the legend, +     * has already been calculated, you will need to call, +     * notifyDataSetChanged()), +     * Sets a custom legend's labels and colors arrays. The colors count should, +     * match the labels count. * Each color is for the form drawn at the same, +     * index. * A null label will start a group. * A (-2) color will avoid, +     * drawing a form This will disable the feature that automatically, +     * calculates the legend labels and colors from the datasets. Call, +     * resetCustom() to re-enable automatic calculation (and then, +     * notifyDataSetChanged() is needed to auto-calculate the legend again), +    public void setCustom(int[] colors, String[] labels) {, +     * Sets a custom legend's labels and colors arrays. The colors count should, +     * match the labels count. * Each color is for the form drawn at the same, +     * index. * A null label will start a group. * A (-2) color will avoid, +     * drawing a form This will disable the feature that automatically, +     * calculates the legend labels and colors from the datasets. Call, +     * resetCustom() to re-enable automatic calculation (and then, +     * notifyDataSetChanged() is needed to auto-calculate the legend again), +    public void setCustom(List<Integer> colors, List<String> labels) {, +     * Calling this will disable the custom legend labels (set by, +     * setCustom(...)). Instead, the labels will again be calculated, +     * automatically (after notifyDataSetChanged() is called)., +    public void resetCustom() {, +     * @return true if a custom legend labels and colors has been set default, +     *         false (automatic legend), +    public boolean isLegendCustom() {, +    // * applies the state from the legend in the parameter to this legend, +    // (except, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, +import com.github.mikephil.charting.utils.ColorTemplate;, +        //l.setCustom(ColorTemplate.VORDIPLOM_COLORS, new String[] { "a","b", "c", "d", "e" });, +        , +        Log.i("x-index", "low: " + mChart.getLowestVisibleXIndex() + ", high: " + mChart.getHighestVisibleXIndex());, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/MultiLineChartActivity.java, +        mChart.setDescription("");, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +        return (int) ((pts[0] <= getXChartMin()) ? 0 : (pts[0] / div) + 1);, +++ b/MPChartLib/src/com/github/mikephil/charting/components/Legend.java, +    /**, +     * the legend colors array, each color is for the form drawn at the same, +     * index, +     */]