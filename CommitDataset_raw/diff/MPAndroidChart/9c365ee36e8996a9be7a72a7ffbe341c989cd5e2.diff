[+++ b/MPChartLib/src/com/github/mikephil/charting/formatter/LargeValueFormatter.java, +    private static String[] SUFFIX = new String[] {, +     * Set custom Suffix for the language of the country, +     * @param suff new suffix, +     */, +    public void setSuffix(String[] suff) {, +        if (suff.length == 5) {, +            SUFFIX = suff;, +        }, +    }, +, +    /**, +++ b/MPChartLib/src/com/github/mikephil/charting/formatter/LargeValueFormatter.java, +    private static String[] SUFFIX = new String[] {, +     * Set custom Suffix for the language of the country, +     * @param suff new suffix, +     */, +    public void setSuffix(String[] suff) {, +        if (suff.length == 5) {, +            SUFFIX = suff;, +        }, +    }, +, +    /**, +++ b/MPChartLib/src/com/github/mikephil/charting/utils/Utils.java, +     * @param context, +            Log.e("MPChartLib-Utils", +                    ,"Utils.init(...) PROVIDED CONTEXT OBJECT IS NULL");, +     * @param step, +	 * @param separateThousands set this to true to separate thousands values, +		return formatNumber(number, digitCount, separateThousands, '.');, +	}, +, +    /**, +     * Formats the given number to the given number of decimals, and returns the, +     * number as a string, maximum 35 characters., +     * , +     * @param number, +     * @param digitCount, +     * @param separateThousands set this to true to separate thousands values, +     * @param separateChar, +     * @return, +     */, +    public static String formatNumber(float number, int digitCount, boolean separateThousands, char separateChar) {, +                        out[ind--] = separateChar;, +                        out[ind--] = separateChar;, +     * @param strings]