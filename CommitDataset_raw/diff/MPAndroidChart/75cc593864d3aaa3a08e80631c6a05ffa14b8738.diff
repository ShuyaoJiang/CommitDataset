[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +//        mChart.invalidate();, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +//        mChart.invalidate();, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ListViewBarChartActivity.java, +import com.github.mikephil.charting.animation.AnimationEasing;, +            holder.chart.animateY(700, AnimationEasing.EasingFunctions.EaseInCubic);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +//        mChart.invalidate();, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ListViewBarChartActivity.java, +import com.github.mikephil.charting.animation.AnimationEasing;, +            holder.chart.animateY(700, AnimationEasing.EasingFunctions.EaseInCubic);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +        mChart.animateXY(1500, 1500);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +//        mChart.invalidate();, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ListViewBarChartActivity.java, +import com.github.mikephil.charting.animation.AnimationEasing;, +            holder.chart.animateY(700, AnimationEasing.EasingFunctions.EaseInCubic);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +        mChart.animateXY(1500, 1500);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/RadarChartActivitry.java, +import com.github.mikephil.charting.animation.AnimationEasing;, +                mChart.spin(2000, mChart.getRotationAngle(), mChart.getRotationAngle() + 360, AnimationEasing.EasingFunctions.EaseInCubic);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +//        mChart.invalidate();, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ListViewBarChartActivity.java, +import com.github.mikephil.charting.animation.AnimationEasing;, +            holder.chart.animateY(700, AnimationEasing.EasingFunctions.EaseInCubic);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +        mChart.animateXY(1500, 1500);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/RadarChartActivitry.java, +import com.github.mikephil.charting.animation.AnimationEasing;, +                mChart.spin(2000, mChart.getRotationAngle(), mChart.getRotationAngle() + 360, AnimationEasing.EasingFunctions.EaseInCubic);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/custom/MyEasingFunction.java, +import com.github.mikephil.charting.animation.EasingFunction;, +    public float getInterpolation(float input) {, +        return input;, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +//        mChart.invalidate();, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ListViewBarChartActivity.java, +import com.github.mikephil.charting.animation.AnimationEasing;, +            holder.chart.animateY(700, AnimationEasing.EasingFunctions.EaseInCubic);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +        mChart.animateXY(1500, 1500);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/RadarChartActivitry.java, +import com.github.mikephil.charting.animation.AnimationEasing;, +                mChart.spin(2000, mChart.getRotationAngle(), mChart.getRotationAngle() + 360, AnimationEasing.EasingFunctions.EaseInCubic);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/custom/MyEasingFunction.java, +import com.github.mikephil.charting.animation.EasingFunction;, +    public float getInterpolation(float input) {, +        return input;, +++ b/MPChartLib/src/com/github/mikephil/charting/animation/AnimationEasing.java, +    /**, +     * This class provides predefined easing functions., +     */, +            // @Override, +            // public float ease(long elapsed, long duration) {, +            // return elapsed / (float) duration;, +            // }, +, +            public float getInterpolation(float input) {, +                return input;, +            // @Override, +            // public float ease(long elapsed, long duration) {, +            // float position = elapsed / (float) duration;, +            // return position * position;, +            // }, +, +            public float getInterpolation(float input) {, +                return input * input;, +            // @Override, +            // public float ease(long elapsed, long duration) {, +            // float position = elapsed / (float) duration;, +            // return -position * (position - 2.f);, +            // }, +, +            public float getInterpolation(float input) {, +                return -input * (input - 2f);, +            // @Override, +            // public float ease(long elapsed, long duration) {, +            // float position = elapsed / (duration / 2.f);, +            // if (position < 1.f), +            // {, +            // return 0.5f * position * position;, +            // }, +            // return -0.5f * ((--position) * (position - 2.f) - 1.f);, +            // }, +, +            public float getInterpolation(float input) {, +, +                float position = input / 0.5f;, +, +                if (position < 1.f) {, +, +            // @Override, +            // public float ease(long elapsed, long duration) {, +            // float position = elapsed / (float) duration;, +            // return position * position * position;, +            // }]