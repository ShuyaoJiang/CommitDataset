[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/InvertedLineChartActivity.java, +        XLabels xl = mChart.getXLabels();, +        xl.setAvoidFirstLastClipping(true);, +, +            xVals.add((i % 30) + "/" + (i % 12) + "/14");, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/InvertedLineChartActivity.java, +        XLabels xl = mChart.getXLabels();, +        xl.setAvoidFirstLastClipping(true);, +, +            xVals.add((i % 30) + "/" + (i % 12) + "/14");, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +//        mChart.setTouchEnabled(false);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/InvertedLineChartActivity.java, +        XLabels xl = mChart.getXLabels();, +        xl.setAvoidFirstLastClipping(true);, +, +            xVals.add((i % 30) + "/" + (i % 12) + "/14");, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +//        mChart.setTouchEnabled(false);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +import android.view.MotionEvent;, +import android.view.View.OnTouchListener;, +            drawXLabels(getHeight() - mOffsetBottom + mXLabels.mXLabelHeight + yoffset * 1.6f);, +                String label = mCurrentData.getXVals().get(i);, +, +                if (mXLabels.isAvoidFirstLastClippingEnabled()) {, +, +                    // avoid clipping of the last, +                    if (i == mCurrentData.getXValCount()- 1) {, +                        float width = Utils.calcTextWidth(mXLabelPaint, label);, +, +                        if (width > getOffsetRight() * 2 && position[0] + width > getWidth()), +                            position[0] -= width / 2;, +, +                        // avoid clipping of the first, +                    } else if (i == 0) {, +, +                        float width = Utils.calcTextWidth(mXLabelPaint, label);, +                        position[0] += width / 2;, +                    }, +                }, +, +                mDrawCanvas.drawText(label, position[0],, +    /** touchlistener that handles touches and gestures on the chart */, +    protected OnTouchListener mListener;, +    , +    @Override, +    public boolean onTouchEvent(MotionEvent event) {, +, +        if (mListener == null || mDataNotSet), +            return false;, +, +        // check if touch gestures are enabled, +        if (!mTouchEnabled), +            return false;, +        else, +            return mListener.onTouch(this, event);, +    }, +, +     * set a new (e.g. custom) charttouchlistener NOTE: make sure to, +     * setTouchEnabled(true); if you need touch gestures on the chart, +     * , +     * @param l, +     */, +    public void setOnTouchListener(OnTouchListener l) {, +        this.mListener = l;, +    }, +, +    /**, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/InvertedLineChartActivity.java, +        XLabels xl = mChart.getXLabels();, +        xl.setAvoidFirstLastClipping(true);, +, +            xVals.add((i % 30) + "/" + (i % 12) + "/14");, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +//        mChart.setTouchEnabled(false);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +import android.view.MotionEvent;, +import android.view.View.OnTouchListener;, +            drawXLabels(getHeight() - mOffsetBottom + mXLabels.mXLabelHeight + yoffset * 1.6f);, +                String label = mCurrentData.getXVals().get(i);, +, +                if (mXLabels.isAvoidFirstLastClippingEnabled()) {, +, +                    // avoid clipping of the last, +                    if (i == mCurrentData.getXValCount()- 1) {, +                        float width = Utils.calcTextWidth(mXLabelPaint, label);, +, +                        if (width > getOffsetRight() * 2 && position[0] + width > getWidth()), +                            position[0] -= width / 2;, +, +                        // avoid clipping of the first, +                    } else if (i == 0) {, +, +                        float width = Utils.calcTextWidth(mXLabelPaint, label);, +                        position[0] += width / 2;, +                    }, +                }, +, +                mDrawCanvas.drawText(label, position[0],]