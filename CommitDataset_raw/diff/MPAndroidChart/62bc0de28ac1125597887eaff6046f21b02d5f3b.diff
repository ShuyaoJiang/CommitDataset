[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BarLineChartBase.java, +        // make sure the graph values and grid cannot be drawn outside the, +        // content-rect, +        int clipRestoreCount = canvas.save();, +        canvas.clipRect(mViewPortHandler.getContentRect());, +, +        clipRestoreCount = canvas.save();, +        canvas.clipRect(mViewPortHandler.getContentRect());, +, +        canvas.restoreToCount(clipRestoreCount);, +, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BarLineChartBase.java, +        // make sure the graph values and grid cannot be drawn outside the, +        // content-rect, +        int clipRestoreCount = canvas.save();, +        canvas.clipRect(mViewPortHandler.getContentRect());, +, +        clipRestoreCount = canvas.save();, +        canvas.clipRect(mViewPortHandler.getContentRect());, +, +        canvas.restoreToCount(clipRestoreCount);, +, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/PieRadarChartBase.java, +                    mViewPortHandler.getChartWidth() * mLegend.getMaxSizePercent()) +, +                    mLegend.getFormSize() + mLegend.getFormToTextSpace();, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BarLineChartBase.java, +        // make sure the graph values and grid cannot be drawn outside the, +        // content-rect, +        int clipRestoreCount = canvas.save();, +        canvas.clipRect(mViewPortHandler.getContentRect());, +, +        clipRestoreCount = canvas.save();, +        canvas.clipRect(mViewPortHandler.getContentRect());, +, +        canvas.restoreToCount(clipRestoreCount);, +, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/PieRadarChartBase.java, +                    mViewPortHandler.getChartWidth() * mLegend.getMaxSizePercent()) +, +                    mLegend.getFormSize() + mLegend.getFormToTextSpace();, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/components/Legend.java, +        SQUARE, CIRCLE, LINE, +     * the legend colors array, each color is for the form drawn at the same, +     * index, +    private int[] mColors;, +     * the legend text array. a null label will start a group., +    private String[] mLabels;, +, +    /**, +     * colors that will be appended to the end of the colors array after, +     * calculating the legend., +     */, +    private int[] mExtraColors;, +, +    /**, +     * labels that will be appended to the end of the labels array after, +     * calculating the legend. a null label will start a group., +     */, +    private String[] mExtraLabels;, +        mFormSize = Utils.convertDpToPixel(8f);, +        mXEntrySpace = Utils.convertDpToPixel(6f);, +        mYEntrySpace = Utils.convertDpToPixel(0f);, +        mFormToTextSpace = Utils.convertDpToPixel(5f);, +        mTextSize = Utils.convertDpToPixel(10f);, +        mStackSpace = Utils.convertDpToPixel(3f);, +     * Constructor. Provide colors and labels for the legend., +     * @param colors, +     * @param labels, +        this.mColors = colors;, +        this.mLabels = labels;, +    /**, +     * Constructor. Provide colors and labels for the legend., +     *, +     * @param colors, +     * @param labels, +     */, +        this();, +, +        if (colors == null || labels == null) {, +            throw new IllegalArgumentException("colors array or labels array is NULL");, +        }, +, +        if (colors.size() != labels.size()) {, +            throw new IllegalArgumentException(, +                    "colors array and labels array need to be of same size");, +        }, +, +        this.mColors = Utils.convertIntegers(colors);, +        this.mLabels = Utils.convertStrings(labels);, +     * @param colors, +    public void setComputedColors(List<Integer> colors) {, +        if (mColors != null && colors.size() == mColors.length) {, +            Utils.copyIntegers(colors, mColors);, +        } else {, +            mColors = Utils.convertIntegers(colors);, +        }, +    /**]