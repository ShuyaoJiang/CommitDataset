[+++ b/MPChartLib/src/com/github/mikephil/charting/data/ChartData.java, +     * Call this method to let the ChartData know that the underlying data has, +     * changed. Calling this performs all necessary recalculations needed when, +     * the contained data has changed., +++ b/MPChartLib/src/com/github/mikephil/charting/data/ChartData.java, +     * Call this method to let the ChartData know that the underlying data has, +     * changed. Calling this performs all necessary recalculations needed when, +     * the contained data has changed., +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/RadarChartRenderer.java, +            if (set.isVisible() && set.getEntryCount() > 0) {, +, +                int mostEntries = 0;, +, +                for (IRadarDataSet radarSet : radarData.getDataSets()) {, +                    if (set != radarSet && radarSet.getEntryCount() > mostEntries) {, +                        mostEntries = radarSet.getEntryCount();, +                drawDataSet(c, set, mostEntries);, +            }, +        }, +    }, +, +    /**, +     * Draws the RadarDataSet, +     *, +     * @param c, +     * @param dataSet, +     * @param mostEntries the entry count of the dataset with the most entries, +     */, +    protected void drawDataSet(Canvas c, IRadarDataSet dataSet, int mostEntries) {, +        // if this is the largest set, close it, +        if (dataSet.getEntryCount() >= mostEntries) {, +        } else {, +, +            // if this is not the largest set, draw a line to the center and then close it, +            surface.lineTo(center.x, center.y);, +            surface.close();, +        }]