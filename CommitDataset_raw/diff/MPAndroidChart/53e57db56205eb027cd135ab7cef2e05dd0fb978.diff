[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ScatterChartActivity.java, +        set1.setScatterShape(ScatterChart.ScatterShape.SQUARE);, +        set2.setScatterShape(ScatterChart.ScatterShape.CIRCLE);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ScatterChartActivity.java, +        set1.setScatterShape(ScatterChart.ScatterShape.SQUARE);, +        set2.setScatterShape(ScatterChart.ScatterShape.CIRCLE);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/ScatterChart.java, +        registerShapeRenderer(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.getScatterShapeNames(), +                .get(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.SQUARE), new SquareShapeRenderer());, +        registerShapeRenderer(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.getScatterShapeNames(), +                .get(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.CIRCLE), new CircleShapeRenderer());, +        registerShapeRenderer(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.getScatterShapeNames(), +                .get(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.TRIANGLE), new TriangleShapeRenderer());, +        registerShapeRenderer(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.getScatterShapeNames(), +                .get(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.CROSS), new CrossShapeRenderer());, +        registerShapeRenderer(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.getScatterShapeNames(), +                .get(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.X), new XShapeRenderer());, +        registerShapeRenderer(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.getScatterShapeNames(), +                .get(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.CHEVRON_UP), new ChevronUpShapeRenderer());, +        registerShapeRenderer(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.getScatterShapeNames(), +                .get(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.CHEVRON_DOWN), new ChevronDownShapeRenderer());, +    /**, +     * enum that defines the shape that is drawn where the values are, +     */, +    public enum ScatterShape {, +        SQUARE, CIRCLE, TRIANGLE, CROSS, X,, +    }, +, +    /**, +     * Returns all possible predefined ScatterShapes., +     *, +     * @return ScatterShape to array, +     */, +    public static ScatterShape[] getAllPossibleShapes() {, +        return new ScatterShape[] {, +                ScatterShape.SQUARE, ScatterShape.CIRCLE, ScatterShape.TRIANGLE, ScatterShape.CROSS, +        };, +    }, +, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ScatterChartActivity.java, +        set1.setScatterShape(ScatterChart.ScatterShape.SQUARE);, +        set2.setScatterShape(ScatterChart.ScatterShape.CIRCLE);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/ScatterChart.java, +        registerShapeRenderer(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.getScatterShapeNames(), +                .get(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.SQUARE), new SquareShapeRenderer());, +        registerShapeRenderer(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.getScatterShapeNames(), +                .get(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.CIRCLE), new CircleShapeRenderer());, +        registerShapeRenderer(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.getScatterShapeNames(), +                .get(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.TRIANGLE), new TriangleShapeRenderer());, +        registerShapeRenderer(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.getScatterShapeNames(), +                .get(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.CROSS), new CrossShapeRenderer());, +        registerShapeRenderer(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.getScatterShapeNames(), +                .get(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.X), new XShapeRenderer());, +        registerShapeRenderer(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.getScatterShapeNames(), +                .get(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.CHEVRON_UP), new ChevronUpShapeRenderer());, +        registerShapeRenderer(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.getScatterShapeNames(), +                .get(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.CHEVRON_DOWN), new ChevronDownShapeRenderer());, +    /**, +     * enum that defines the shape that is drawn where the values are, +     */, +    public enum ScatterShape {, +        SQUARE, CIRCLE, TRIANGLE, CROSS, X,, +    }, +, +    /**, +     * Returns all possible predefined ScatterShapes., +     *, +     * @return ScatterShape to array, +     */, +    public static ScatterShape[] getAllPossibleShapes() {, +        return new ScatterShape[] {, +                ScatterShape.SQUARE, ScatterShape.CIRCLE, ScatterShape.TRIANGLE, ScatterShape.CROSS, +        };, +    }, +, +++ b/MPChartLib/src/com/github/mikephil/charting/data/ScatterDataSet.java, +import com.github.mikephil.charting.charts.ScatterChart;, +, +    /**, +     * Sets the shape that is drawn on the position where the values are at., +     *, +     * @param shape, +     */, +    public void setScatterShape(ScatterChart.ScatterShape shape) {, +        mScatterShape = shape.toString();, +    }, +, +, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ScatterChartActivity.java, +        set1.setScatterShape(ScatterChart.ScatterShape.SQUARE);, +        set2.setScatterShape(ScatterChart.ScatterShape.CIRCLE);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/ScatterChart.java, +        registerShapeRenderer(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.getScatterShapeNames(), +                .get(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.SQUARE), new SquareShapeRenderer());, +        registerShapeRenderer(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.getScatterShapeNames(), +                .get(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.CIRCLE), new CircleShapeRenderer());, +        registerShapeRenderer(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.getScatterShapeNames(), +                .get(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.TRIANGLE), new TriangleShapeRenderer());, +        registerShapeRenderer(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.getScatterShapeNames(), +                .get(com.github.mikephil.charting.renderer.ShapeRenders.ScatterShape.CROSS), new CrossShapeRenderer());]