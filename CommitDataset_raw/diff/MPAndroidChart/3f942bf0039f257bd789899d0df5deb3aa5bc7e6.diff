[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/RealmDatabaseActivity.java, +import com.github.mikephil.charting.charts.LineChart;, +import com.github.mikephil.charting.data.LineData;, +import com.github.mikephil.charting.data.realm.implementation.RealmLineDataSet;, +import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;, +    private LineChart mChart;, +        setContentView(R.layout.activity_linechart_noseekbar);, +        mChart = (LineChart) findViewById(R.id.chart1);, +        RealmLineDataSet<RealmDemoData> set = new RealmLineDataSet<RealmDemoData>(result, "value", "xIndex");, +        set.setDrawCubic(false);, +        set.setLabel("Realm LineDataSet");, +        set.setDrawCircleHole(false);, +        ArrayList<ILineDataSet> dataSets = new ArrayList<ILineDataSet>();, +        LineData data = new LineData(result, "xValue", dataSets);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/RealmDatabaseActivity.java, +import com.github.mikephil.charting.charts.LineChart;, +import com.github.mikephil.charting.data.LineData;, +import com.github.mikephil.charting.data.realm.implementation.RealmLineDataSet;, +import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;, +    private LineChart mChart;, +        setContentView(R.layout.activity_linechart_noseekbar);, +        mChart = (LineChart) findViewById(R.id.chart1);, +        RealmLineDataSet<RealmDemoData> set = new RealmLineDataSet<RealmDemoData>(result, "value", "xIndex");, +        set.setDrawCubic(false);, +        set.setLabel("Realm LineDataSet");, +        set.setDrawCircleHole(false);, +        ArrayList<ILineDataSet> dataSets = new ArrayList<ILineDataSet>();, +        LineData data = new LineData(result, "xValue", dataSets);, +++ b/MPChartLib/src/com/github/mikephil/charting/data/realm/implementation/RealmLineDataSet.java, +import android.content.Context;, +import com.github.mikephil.charting.utils.ColorTemplate;, +import com.github.mikephil.charting.utils.Utils;, +, +import java.util.ArrayList;, +import java.util.List;, +    /** List representing all colors that are used for the circles */, +    private List<Integer> mCircleColors = null;, +, +    /** the color of the inner circles */, +    private int mCircleColorHole = Color.WHITE;, +, +    /** the radius of the circle-shaped value indicators */, +    private float mCircleSize = 8f;, +, +    /** sets the intensity of the cubic lines */, +    private float mCubicIntensity = 0.2f;, +, +    /** the path effect of this DataSet that makes dashed lines possible */, +    private DashPathEffect mDashPathEffect = null;, +, +    /** formatter for customizing the position of the fill-line */, +    /** if true, drawing circles is enabled */, +    private boolean mDrawCircles = true;, +, +    /** if true, cubic lines are drawn instead of linear */, +    private boolean mDrawCubic = false;, +, +    private boolean mDrawCircleHole = true;, +, +        mCircleColors = new ArrayList<Integer>();, +, +        // default color, +        mCircleColors.add(Color.rgb(140, 234, 255));, +, +    /**, +     * Sets the intensity for cubic lines (if enabled). Max = 1f = very cubic,, +     * Min = 0.05f = low cubic effect, Default: 0.2f, +     *, +     * @param intensity, +     */, +    public void setCubicIntensity(float intensity) {, +, +        if (intensity > 1f), +            intensity = 1f;, +        if (intensity < 0.05f), +            intensity = 0.05f;, +, +        mCubicIntensity = intensity;, +    public float getCubicIntensity() {, +        return mCubicIntensity;, +    }, +, +    /**, +     * sets the size (radius) of the circle shpaed value indicators, default, +     * size = 4f, +     *, +     * @param size, +     */, +    public void setCircleSize(float size) {, +        mCircleSize = Utils.convertDpToPixel(size);, +        return mCircleSize;, +    /**, +     * Enables the line to be drawn in dashed mode, e.g. like this, +     * "- - - - - -". THIS ONLY WORKS IF HARDWARE-ACCELERATION IS TURNED OFF., +     * Keep in mind that hardware acceleration boosts performance., +     *, +     * @param lineLength the length of the line pieces, +     * @param spaceLength the length of space in between the pieces, +     * @param phase offset, in degrees (normally, use 0), +     */]