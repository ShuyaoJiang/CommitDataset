[+++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +     * Deceleration friction coefficient in [0 ; 1] interval, higher values, +     * will stop immediately. 1 is an invalid value, and will be converted to 0.999f, +     * automatically., +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +     * Deceleration friction coefficient in [0 ; 1] interval, higher values, +     * will stop immediately. 1 is an invalid value, and will be converted to 0.999f, +     * automatically., +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java, +        float a = Utils.getNormalizedAngle(angle - getRotationAngle());, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +     * Deceleration friction coefficient in [0 ; 1] interval, higher values, +     * will stop immediately. 1 is an invalid value, and will be converted to 0.999f, +     * automatically., +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java, +        float a = Utils.getNormalizedAngle(angle - getRotationAngle());, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieRadarChartBase.java, +    /** holds the normalized version of the current rotation angle of the chart */, +    private float mRotationAngle = 270f;, +    /** holds the raw version of the current rotation angle of the chart */, +    private float mRawRotationAngle = 270f;, +        mRawRotationAngle = angle;, +        mRotationAngle = Utils.getNormalizedAngle(mRawRotationAngle);, +     * gets the raw version of the current rotation angle of the pie chart, +     * the returned value could be any value, negative or positive, outside of the 360 degrees., +     * this is used when working with rotation direction, mainly by gestures and animations., +     *, +     * @return, +     */, +    public float getRawRotationAngle() {, +        return mRawRotationAngle;, +    }, +, +    /**, +     * gets a normalized version of the current rotation angle of the pie chart,, +     * which will always be between 0.0 < 360.0, +        setRotationAngle(fromangle);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +     * Deceleration friction coefficient in [0 ; 1] interval, higher values, +     * will stop immediately. 1 is an invalid value, and will be converted to 0.999f, +     * automatically., +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java, +        float a = Utils.getNormalizedAngle(angle - getRotationAngle());, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieRadarChartBase.java, +    /** holds the normalized version of the current rotation angle of the chart */, +    private float mRotationAngle = 270f;, +    /** holds the raw version of the current rotation angle of the chart */, +    private float mRawRotationAngle = 270f;, +        mRawRotationAngle = angle;, +        mRotationAngle = Utils.getNormalizedAngle(mRawRotationAngle);, +     * gets the raw version of the current rotation angle of the pie chart, +     * the returned value could be any value, negative or positive, outside of the 360 degrees., +     * this is used when working with rotation direction, mainly by gestures and animations., +     *, +     * @return, +     */, +    public float getRawRotationAngle() {, +        return mRawRotationAngle;, +    }, +, +    /**, +     * gets a normalized version of the current rotation angle of the pie chart,, +     * which will always be between 0.0 < 360.0, +        setRotationAngle(fromangle);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/RadarChart.java, +        float a = Utils.getNormalizedAngle(angle - getRotationAngle());, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +     * Deceleration friction coefficient in [0 ; 1] interval, higher values, +     * will stop immediately. 1 is an invalid value, and will be converted to 0.999f, +     * automatically., +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java, +        float a = Utils.getNormalizedAngle(angle - getRotationAngle());, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieRadarChartBase.java, +    /** holds the normalized version of the current rotation angle of the chart */, +    private float mRotationAngle = 270f;, +    /** holds the raw version of the current rotation angle of the chart */, +    private float mRawRotationAngle = 270f;, +        mRawRotationAngle = angle;, +        mRotationAngle = Utils.getNormalizedAngle(mRawRotationAngle);, +     * gets the raw version of the current rotation angle of the pie chart, +     * the returned value could be any value, negative or positive, outside of the 360 degrees., +     * this is used when working with rotation direction, mainly by gestures and animations., +     *, +     * @return, +     */, +    public float getRawRotationAngle() {, +        return mRawRotationAngle;, +    }, +, +    /**, +     * gets a normalized version of the current rotation angle of the pie chart,, +     * which will always be between 0.0 < 360.0, +        setRotationAngle(fromangle);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/RadarChart.java, +        float a = Utils.getNormalizedAngle(angle - getRotationAngle());, +++ b/MPChartLib/src/com/github/mikephil/charting/listener/BarLineChartTouchListener.java, +    private long mDecelerationLastTime = 0;, +    private PointF mDecelerationCurrentPoint = new PointF();, +    private PointF mDecelerationVelocity = new PointF();, +                        mDecelerationLastTime = AnimationUtils.currentAnimationTimeMillis();]