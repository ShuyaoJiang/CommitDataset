[+++ b/MPChartLib/src/com/github/mikephil/charting/data/DataSet.java, +        return getEntryForXIndex(x, Rounding.CLOSEST);, +    }, +    /**, +     * Returns the first Entry object found at the given xIndex with binary, +     * search. If the no Entry at the specified x-index is found, this method, +     * returns the index as determined by the given rounding mode. Returns null, +     * if no Entry object at that index. INFORMATION: This method does, +     * calculations at runtime. Do not over-use in performance critical, +     * situations., +     *, +     * @param x, +     * @return, +     */, +    public T getEntryForXIndex(int x, Rounding rounding) {, +, +        int index = getEntryIndex(x, rounding);, +     * returns the index as determined by the given rounding mode. Returns -1 if, +     * no Entry object at that index. INFORMATION: This method does calculations, +     * at runtime. Do not over-use in performance critical situations., +    public int getEntryIndex(int x, Rounding rounding) {, +        if (closest != -1) {, +            int closestXIndex = mYVals.get(closest).getXIndex();, +            if (rounding == Rounding.UP) {, +                if (closestXIndex < x && closest < mYVals.size() - 1) {, +                    ++closest;, +                }, +            } else if (rounding == Rounding.DOWN) {, +                if (closestXIndex > x && closest > 0) {, +                    --closest;, +                }, +            }, +        }, +, +            int closestIndex = getEntryIndex(e.getXIndex(), Rounding.UP);, +, +    /**, +     * Determines how to round DataSet index values for, +     * {@link DataSet#getEntryIndex(int, Rounding)} DataSet.getEntryIndex()}, +     * when an exact x-index is not found., +     */, +    public enum Rounding {, +        UP,, +        DOWN,, +        CLOSEST,, +    }, +++ b/MPChartLib/src/com/github/mikephil/charting/data/DataSet.java, +        return getEntryForXIndex(x, Rounding.CLOSEST);, +    }, +    /**, +     * Returns the first Entry object found at the given xIndex with binary, +     * search. If the no Entry at the specified x-index is found, this method, +     * returns the index as determined by the given rounding mode. Returns null, +     * if no Entry object at that index. INFORMATION: This method does, +     * calculations at runtime. Do not over-use in performance critical, +     * situations., +     *, +     * @param x, +     * @return, +     */, +    public T getEntryForXIndex(int x, Rounding rounding) {, +, +        int index = getEntryIndex(x, rounding);, +     * returns the index as determined by the given rounding mode. Returns -1 if, +     * no Entry object at that index. INFORMATION: This method does calculations, +     * at runtime. Do not over-use in performance critical situations., +    public int getEntryIndex(int x, Rounding rounding) {, +        if (closest != -1) {, +            int closestXIndex = mYVals.get(closest).getXIndex();, +            if (rounding == Rounding.UP) {, +                if (closestXIndex < x && closest < mYVals.size() - 1) {, +                    ++closest;, +                }, +            } else if (rounding == Rounding.DOWN) {, +                if (closestXIndex > x && closest > 0) {, +                    --closest;, +                }, +            }, +        }, +, +            int closestIndex = getEntryIndex(e.getXIndex(), Rounding.UP);, +, +    /**, +     * Determines how to round DataSet index values for, +     * {@link DataSet#getEntryIndex(int, Rounding)} DataSet.getEntryIndex()}, +     * when an exact x-index is not found., +     */, +    public enum Rounding {, +        UP,, +        DOWN,, +        CLOSEST,, +    }, +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/LineChartRenderer.java, +import com.github.mikephil.charting.data.DataSet;, +        Entry entryFrom = dataSet.getEntryForXIndex((mMinX < 0) ? 0 : mMinX, DataSet.Rounding.DOWN);, +        Entry entryTo = dataSet.getEntryForXIndex(mMaxX, DataSet.Rounding.UP);, +        int minx = Math.max(dataSet.getEntryPosition(entryFrom), 0);, +        int maxx = Math.min(dataSet.getEntryPosition(entryTo) + 1, entries.size());, +        Entry entryFrom = dataSet.getEntryForXIndex((mMinX < 0) ? 0 : mMinX, DataSet.Rounding.DOWN);, +        Entry entryTo = dataSet.getEntryForXIndex(mMaxX, DataSet.Rounding.UP);]