[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/CandleStickChartActivity.java, +import android.util.Log;, +import com.github.mikephil.charting.utils.YLabels;, +        YLabels yLabels = mChart.getYLabels();, +        yLabels.setLabelCount(7);, +, +            float val = (float) (Math.sin(i) * 50) + mult;, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/CandleStickChartActivity.java, +import android.util.Log;, +import com.github.mikephil.charting.utils.YLabels;, +        YLabels yLabels = mChart.getYLabels();, +        yLabels.setLabelCount(7);, +, +            float val = (float) (Math.sin(i) * 50) + mult;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/CandleStickChart.java, +    protected void calcMinMax(boolean fixedValues) {, +        super.calcMinMax(fixedValues);, +, +        // increase deltax by 1 because the candles have a width of 1, +        mDeltaX++;, +    }, +, +    @Override, +        // pre allocate, +        float[] shadowPoints = new float[4];, +        float[] bodyPoints = new float[4];, +, +                // get the entry, +                // transform the entries values for shadow and body, +//                if (isOffContentRight(leftBody)), +//                    break;, +//, +//                // make sure the lines don't do shitty things outside bounds, +//                if (isOffContentLeft(rightBody), +//                        && isOffContentTop(low), +//                        && isOffContentBottom(high)), +//                    continue;, +                // decide weather the body is hollow or filled, +        shadowPoints[1] = e.getHigh();, +        shadowPoints[3] = e.getLow();, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/CandleStickChartActivity.java, +import android.util.Log;, +import com.github.mikephil.charting.utils.YLabels;, +        YLabels yLabels = mChart.getYLabels();, +        yLabels.setLabelCount(7);, +, +            float val = (float) (Math.sin(i) * 50) + mult;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/CandleStickChart.java, +    protected void calcMinMax(boolean fixedValues) {, +        super.calcMinMax(fixedValues);, +, +        // increase deltax by 1 because the candles have a width of 1, +        mDeltaX++;, +    }, +, +    @Override, +        // pre allocate, +        float[] shadowPoints = new float[4];, +        float[] bodyPoints = new float[4];, +, +                // get the entry, +                // transform the entries values for shadow and body, +//                if (isOffContentRight(leftBody)), +//                    break;, +//, +//                // make sure the lines don't do shitty things outside bounds, +//                if (isOffContentLeft(rightBody), +//                        && isOffContentTop(low), +//                        && isOffContentBottom(high)), +//                    continue;, +                // decide weather the body is hollow or filled, +        shadowPoints[1] = e.getHigh();, +        shadowPoints[3] = e.getLow();, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +     * Transforms multiple paths will all matrices., +     * Transform an array of points with all matrices. VERY IMPORTANT: Keep, +     * matrix order "value-touch-offset" when transforming., +     * Transform a rectangle with all matrices., +        if (r.top > 0), +            r.top *= mPhaseY;, +        else, +            r.bottom *= mPhaseY;, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/CandleStickChartActivity.java, +import android.util.Log;, +import com.github.mikephil.charting.utils.YLabels;, +        YLabels yLabels = mChart.getYLabels();, +        yLabels.setLabelCount(7);, +, +            float val = (float) (Math.sin(i) * 50) + mult;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/CandleStickChart.java, +    protected void calcMinMax(boolean fixedValues) {, +        super.calcMinMax(fixedValues);, +, +        // increase deltax by 1 because the candles have a width of 1, +        mDeltaX++;, +    }, +, +    @Override, +        // pre allocate, +        float[] shadowPoints = new float[4];]