[+++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivityMultiDataset.java, +		mChart.setDescription("");, +++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivityMultiDataset.java, +		mChart.setDescription("");, +++ b/MPChartExample/src/com/example/mpchartexample/PieChartActivity.java, +		ct.addDataSetColors(ColorTemplate.FRESH_COLORS, this);, +++ b/MPChartExample/src/com/example/mpchartexample/BarChartActivityMultiDataset.java, +		mChart.setDescription("");, +++ b/MPChartExample/src/com/example/mpchartexample/PieChartActivity.java, +		ct.addDataSetColors(ColorTemplate.FRESH_COLORS, this);, +++ b/MPChartLib/src/com/github/mikephil/charting/BarChart.java, +    @Override, +    public void setColorTemplate(ColorTemplate ct) {, +        super.setColorTemplate(ct);, +        , +        calculate3DColors();, +    }, +, +    private ArrayList<ArrayList<Integer>> mTopColors;, +    private ArrayList<ArrayList<Integer>> mSideColors;, +    /**, +     * calculates the 3D color arrays, +     */, +    protected void calculate3DColors() {, +        // generate the colors for the 3D effect, +        mTopColors = new ArrayList<ArrayList<Integer>>();, +        mSideColors = new ArrayList<ArrayList<Integer>>();, +        float[] hsv = new float[3];, +, +        for (int i = 0; i < mCt.getColors().size(); i++) {, +, +            // Get the colors for the DataSet at the current index. If the index, +            // is out of bounds, reuse DataSet colors., +            ArrayList<Integer> colors = mCt.getDataSetColors(i);, +            ArrayList<Integer> topColors = new ArrayList<Integer>();, +            ArrayList<Integer> sideColors = new ArrayList<Integer>();, +, +            for (int j = 0; j < colors.size(); j++) {, +, +                // extract the color, +                int c = colors.get(j);, +                Color.colorToHSV(c, hsv); // convert to hsv, +, +                // make brighter, +                hsv[1] = hsv[1] - 0.1f; // less saturation, +                hsv[2] = hsv[2] + 0.1f; // more brightness, +, +                // convert back, +                c = Color.HSVToColor(hsv);, +, +                // assign, +                topColors.add(c);, +, +                // get color again, +                c = colors.get(j);, +, +                // convert, +                Color.colorToHSV(c, hsv);, +, +                // make darker, +                hsv[1] = hsv[1] + 0.1f; // more saturation, +                hsv[2] = hsv[2] - 0.1f; // less brightness, +, +                // reassing, +                c = Color.HSVToColor(hsv);, +, +                sideColors.add(c);, +            }, +            , +            mTopColors.add(topColors);, +            mSideColors.add(sideColors);, +        }, +        ArrayList<DataSet> dataSets = mData.getDataSets();, +, +        // 3D drawing, +            for (int i = 0; i < mData.getDataSetCount(); i++) {, +                DataSet dataSet = dataSets.get(i);, +                ArrayList<Series> series = dataSet.getYVals();, +, +                for (int j = 0; j < series.size(); j++) {, +, +                    float x = series.get(j).getXIndex();, +                    float y = series.get(j).getVal();, +                    float left = x + mBarSpace / 2f;, +                    float right = x + 1f - mBarSpace / 2f;, +            }, +        int cnt = 0;, +        // 2D drawing, +            ArrayList<Integer> colors3DTop = mTopColors.get(i % mCt.getColors().size());, +            ArrayList<Integer> colors3DSide = mSideColors.get(i % mCt.getColors().size());, +                // avoid drawing outofbounds values, +                if(isOffContentRight(mBarRect.left)) break;, +                , +                if(isOffContentLeft(mBarRect.right)) {, +                    cnt++;, +                    continue;, +                }, +, +                    mRenderPaint.setColor(colors3DTop.get(j % colors3DTop.size()));, +                    mDrawCanvas.drawPath(topPaths.get(cnt), mRenderPaint);]