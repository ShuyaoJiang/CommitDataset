[+++ b/MPChartLib/src/main/java/com/github/mikephil/charting/components/Legend.java, +     * @param space, +     * @param labelpaint, +    ArrayList<FSize> calculatedLineSizesForCalculateDimensions = new ArrayList<>();, +, +                //ArrayList<Boolean> calculatedLabelBreakPoints = new ArrayList<Boolean>(labelCount);, +, +                if(mCalculatedLabelSizes.length != labelCount){, +                    mCalculatedLabelSizes = new FSize[labelCount];, +                }, +                int calculatedLabelSizesIndex = 0;, +, +                if(mCalculatedLabelBreakPoints.length != labelCount){, +                    mCalculatedLabelBreakPoints = new Boolean[labelCount];, +                }, +                int calculatedLabelBreakIndex = 0;, +, +                ArrayList<FSize> calculatedLineSizes = calculatedLineSizesForCalculateDimensions;, +                FSize.recycleInstances(calculatedLineSizes);, +                calculatedLineSizes.clear();, +                    mCalculatedLabelBreakPoints[calculatedLabelBreakIndex] = false;, +                    calculatedLabelBreakIndex++;, +                        if(mCalculatedLabelSizes[calculatedLabelSizesIndex] == null){, +                            mCalculatedLabelSizes[calculatedLabelSizesIndex] = Utils.calcTextSize(labelpaint, mLabels[i]);, +                        }else{, +                            Utils.calcTextSize(labelpaint, mLabels[i], mCalculatedLabelSizes[calculatedLabelSizesIndex]);, +                        }, +                        FSize labelSize = mCalculatedLabelSizes[calculatedLabelSizesIndex];, +                        calculatedLabelSizesIndex++;, +                        requiredWidth += labelSize.width;, +                        if(mCalculatedLabelSizes[calculatedLabelSizesIndex] == null){, +                            mCalculatedLabelSizes[calculatedLabelSizesIndex] = FSize.getInstance(0.f, 0.f);, +                        }else{, +                            mCalculatedLabelSizes[calculatedLabelSizesIndex].width = 0.f;, +                            mCalculatedLabelSizes[calculatedLabelSizesIndex].height = 0.f;, +                        }, +                        calculatedLabelSizesIndex++;, +                            calculatedLineSizes.add(FSize.getInstance(currentLineWidth, labelLineHeight));, +                            mCalculatedLabelBreakPoints[, +                                            : i] =  true;, +                            calculatedLineSizes.add(FSize.getInstance(currentLineWidth, labelLineHeight));, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/components/Legend.java, +     * @param space, +     * @param labelpaint, +    ArrayList<FSize> calculatedLineSizesForCalculateDimensions = new ArrayList<>();, +, +                //ArrayList<Boolean> calculatedLabelBreakPoints = new ArrayList<Boolean>(labelCount);, +, +                if(mCalculatedLabelSizes.length != labelCount){, +                    mCalculatedLabelSizes = new FSize[labelCount];, +                }, +                int calculatedLabelSizesIndex = 0;, +, +                if(mCalculatedLabelBreakPoints.length != labelCount){, +                    mCalculatedLabelBreakPoints = new Boolean[labelCount];, +                }, +                int calculatedLabelBreakIndex = 0;, +, +                ArrayList<FSize> calculatedLineSizes = calculatedLineSizesForCalculateDimensions;, +                FSize.recycleInstances(calculatedLineSizes);, +                calculatedLineSizes.clear();, +                    mCalculatedLabelBreakPoints[calculatedLabelBreakIndex] = false;, +                    calculatedLabelBreakIndex++;, +                        if(mCalculatedLabelSizes[calculatedLabelSizesIndex] == null){, +                            mCalculatedLabelSizes[calculatedLabelSizesIndex] = Utils.calcTextSize(labelpaint, mLabels[i]);, +                        }else{, +                            Utils.calcTextSize(labelpaint, mLabels[i], mCalculatedLabelSizes[calculatedLabelSizesIndex]);, +                        }, +                        FSize labelSize = mCalculatedLabelSizes[calculatedLabelSizesIndex];, +                        calculatedLabelSizesIndex++;, +                        requiredWidth += labelSize.width;, +                        if(mCalculatedLabelSizes[calculatedLabelSizesIndex] == null){, +                            mCalculatedLabelSizes[calculatedLabelSizesIndex] = FSize.getInstance(0.f, 0.f);, +                        }else{, +                            mCalculatedLabelSizes[calculatedLabelSizesIndex].width = 0.f;, +                            mCalculatedLabelSizes[calculatedLabelSizesIndex].height = 0.f;, +                        }, +                        calculatedLabelSizesIndex++;, +                            calculatedLineSizes.add(FSize.getInstance(currentLineWidth, labelLineHeight));, +                            mCalculatedLabelBreakPoints[, +                                            : i] =  true;, +                            calculatedLineSizes.add(FSize.getInstance(currentLineWidth, labelLineHeight));, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/XAxisRenderer.java, +, +        FSize.recycleInstance(labelRotatedSize);, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/components/Legend.java, +     * @param space, +     * @param labelpaint, +    ArrayList<FSize> calculatedLineSizesForCalculateDimensions = new ArrayList<>();, +, +                //ArrayList<Boolean> calculatedLabelBreakPoints = new ArrayList<Boolean>(labelCount);, +, +                if(mCalculatedLabelSizes.length != labelCount){, +                    mCalculatedLabelSizes = new FSize[labelCount];, +                }, +                int calculatedLabelSizesIndex = 0;, +, +                if(mCalculatedLabelBreakPoints.length != labelCount){, +                    mCalculatedLabelBreakPoints = new Boolean[labelCount];, +                }]