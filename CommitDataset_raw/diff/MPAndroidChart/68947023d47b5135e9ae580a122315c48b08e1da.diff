[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, +        float barSpace = 0.02f; // x3 dataset, +        float barWidth = 0.3f; // x3 dataset, +        // (0.3 + 0.02) * 3 + 0.04 = 1.00 -> interval per "group", +, +        mChart.getXAxis().setAxisMaxValue(mChart.getBarData().getGroupWidth(groupSpace, barSpace) * mSeekBarX.getProgress() + startYear);, +        mChart.groupBars(startYear, groupSpace, barSpace);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, +        float barSpace = 0.02f; // x3 dataset, +        float barWidth = 0.3f; // x3 dataset, +        // (0.3 + 0.02) * 3 + 0.04 = 1.00 -> interval per "group", +, +        mChart.getXAxis().setAxisMaxValue(mChart.getBarData().getGroupWidth(groupSpace, barSpace) * mSeekBarX.getProgress() + startYear);, +        mChart.groupBars(startYear, groupSpace, barSpace);, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/buffer/BarBuffer.java, +    public BarBuffer(int size, int dataSetCount, boolean containsStacks) {, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, +        float barSpace = 0.02f; // x3 dataset, +        float barWidth = 0.3f; // x3 dataset, +        // (0.3 + 0.02) * 3 + 0.04 = 1.00 -> interval per "group", +, +        mChart.getXAxis().setAxisMaxValue(mChart.getBarData().getGroupWidth(groupSpace, barSpace) * mSeekBarX.getProgress() + startYear);, +        mChart.groupBars(startYear, groupSpace, barSpace);, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/buffer/BarBuffer.java, +    public BarBuffer(int size, int dataSetCount, boolean containsStacks) {, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/buffer/HorizontalBarBuffer.java, +    public HorizontalBarBuffer(int size, int dataSetCount, boolean containsStacks) {, +        super(size, dataSetCount, containsStacks);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, +        float barSpace = 0.02f; // x3 dataset, +        float barWidth = 0.3f; // x3 dataset, +        // (0.3 + 0.02) * 3 + 0.04 = 1.00 -> interval per "group", +, +        mChart.getXAxis().setAxisMaxValue(mChart.getBarData().getGroupWidth(groupSpace, barSpace) * mSeekBarX.getProgress() + startYear);, +        mChart.groupBars(startYear, groupSpace, barSpace);, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/buffer/BarBuffer.java, +    public BarBuffer(int size, int dataSetCount, boolean containsStacks) {, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/buffer/HorizontalBarBuffer.java, +    public HorizontalBarBuffer(int size, int dataSetCount, boolean containsStacks) {, +        super(size, dataSetCount, containsStacks);, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BarChart.java, +, +    /**, +     * Groups all BarDataSet objects this data object holds together by modifying the x-position of their entries., +     * Leaves space as specified by the parameters., +     * Calls notifyDataSetChanged() afterwards., +     *, +     * @param fromX      the starting point on the x-axis where the grouping should begin, +     * @param groupSpace the space between groups of bars in values (not pixels) e.g. 0.8f for bar width 1f, +     * @param barSpace   the space between individual bars in values (not pixels) e.g. 0.1f for bar width 1f, +     */, +    public void groupBars(float fromX, float groupSpace, float barSpace) {, +, +        if (getBarData() == null) {, +            throw new RuntimeException("You need to set data for the chart before grouping bars.");, +        } else {, +            getBarData().groupBars(fromX, groupSpace, barSpace);, +            notifyDataSetChanged();, +        }, +    }, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivityMultiDataset.java, +        float barSpace = 0.02f; // x3 dataset, +        float barWidth = 0.3f; // x3 dataset, +        // (0.3 + 0.02) * 3 + 0.04 = 1.00 -> interval per "group", +, +        mChart.getXAxis().setAxisMaxValue(mChart.getBarData().getGroupWidth(groupSpace, barSpace) * mSeekBarX.getProgress() + startYear);, +        mChart.groupBars(startYear, groupSpace, barSpace);, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/buffer/BarBuffer.java, +    public BarBuffer(int size, int dataSetCount, boolean containsStacks) {, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/buffer/HorizontalBarBuffer.java, +    public HorizontalBarBuffer(int size, int dataSetCount, boolean containsStacks) {, +        super(size, dataSetCount, containsStacks);, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BarChart.java, +, +    /**, +     * Groups all BarDataSet objects this data object holds together by modifying the x-position of their entries., +     * Leaves space as specified by the parameters., +     * Calls notifyDataSetChanged() afterwards., +     *, +     * @param fromX      the starting point on the x-axis where the grouping should begin, +     * @param groupSpace the space between groups of bars in values (not pixels) e.g. 0.8f for bar width 1f, +     * @param barSpace   the space between individual bars in values (not pixels) e.g. 0.1f for bar width 1f, +     */, +    public void groupBars(float fromX, float groupSpace, float barSpace) {, +, +        if (getBarData() == null) {, +            throw new RuntimeException("You need to set data for the chart before grouping bars.");, +        } else {, +            getBarData().groupBars(fromX, groupSpace, barSpace);, +            notifyDataSetChanged();, +        }, +    }, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/data/BarData.java, +     * Groups all BarDataSet objects this data object holds together by modifying the x-position of their entries., +     * Leaves space as specified by the parameters., +     * Do not forget to call notifyDataSetChanged() on your BarChart object after calling this method., +     * @param fromX      the starting point on the x-axis where the grouping should begin, +        float interval = getGroupWidth(groupSpace, barSpace);, +    /**, +     * In case of grouped bars, this method returns the space an individual group of bar needs on the x-axis.]