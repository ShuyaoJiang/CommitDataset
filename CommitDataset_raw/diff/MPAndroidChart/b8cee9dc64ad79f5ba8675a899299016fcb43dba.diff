[+++ b/MPChartLib/src/com/github/mikephil/charting/renderer/BarChartRenderer.java, +            final float valueOffsetPlus = Utils.convertDpToPixel(5f);, +                boolean isInverted = mChart.isInverted(dataSet.getAxisDependency());, +, +                // calculate the correct offset depending on the draw position of, +                // the value, +                float valueTextHeight = Utils.calcTextHeight(mValuePaint, "8");, +                posOffset = (drawValueAboveBar ? -valueOffsetPlus : valueTextHeight + valueOffsetPlus);, +                negOffset = (drawValueAboveBar ? valueTextHeight + valueOffsetPlus : -valueOffsetPlus);, +, +                if (isInverted), +                {, +                    posOffset = -posOffset - valueTextHeight;, +                    negOffset = -negOffset - valueTextHeight;, +                }, +, +                        drawValue(c, formatter.getFormattedValue(val), valuePoints[j],, +                                valuePoints[j + 1] + (val >= 0 ? posOffset : negOffset));, +                            drawValue(c, formatter.getFormattedValue(e.getVal()), valuePoints[j],, +                                    valuePoints[j + 1] + (e.getVal() >= 0 ? posOffset : negOffset));, +                                drawValue(c, formatter.getFormattedValue(vals[k / 2]), x, y);, +    protected void drawValue(Canvas c, String value, float xPos, float yPos) {, +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/BarChartRenderer.java, +            final float valueOffsetPlus = Utils.convertDpToPixel(5f);, +                boolean isInverted = mChart.isInverted(dataSet.getAxisDependency());, +, +                // calculate the correct offset depending on the draw position of, +                // the value, +                float valueTextHeight = Utils.calcTextHeight(mValuePaint, "8");, +                posOffset = (drawValueAboveBar ? -valueOffsetPlus : valueTextHeight + valueOffsetPlus);, +                negOffset = (drawValueAboveBar ? valueTextHeight + valueOffsetPlus : -valueOffsetPlus);, +, +                if (isInverted), +                {, +                    posOffset = -posOffset - valueTextHeight;, +                    negOffset = -negOffset - valueTextHeight;, +                }, +, +                        drawValue(c, formatter.getFormattedValue(val), valuePoints[j],, +                                valuePoints[j + 1] + (val >= 0 ? posOffset : negOffset));, +                            drawValue(c, formatter.getFormattedValue(e.getVal()), valuePoints[j],, +                                    valuePoints[j + 1] + (e.getVal() >= 0 ? posOffset : negOffset));, +                                drawValue(c, formatter.getFormattedValue(vals[k / 2]), x, y);, +    protected void drawValue(Canvas c, String value, float xPos, float yPos) {, +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/HorizontalBarChartRenderer.java, +            final float valueOffsetPlus = Utils.convertDpToPixel(5f);, +                boolean isInverted = mChart.isInverted(dataSet.getAxisDependency());, +, +                        String valueText = formatter.getFormattedValue(val);, +                        // calculate the correct offset depending on the draw position of the value, +                        float valueTextWidth = Utils.calcTextWidth(mValuePaint, valueText);, +                        posOffset = (drawValueAboveBar ? valueOffsetPlus : -(valueTextWidth + valueOffsetPlus));, +                        negOffset = (drawValueAboveBar ? -(valueTextWidth + valueOffsetPlus) : valueOffsetPlus);, +, +                        if (isInverted), +                        {, +                            posOffset = -posOffset - valueTextWidth;, +                            negOffset = -negOffset - valueTextWidth;, +                        }, +, +                        drawValue(c, valueText, valuePoints[j] + (val >= 0 ? posOffset : negOffset),, +                                valuePoints[j + 1]);, +                            float val = e.getVal();, +                            String valueText = formatter.getFormattedValue(val);, +, +                            // calculate the correct offset depending on the draw position of the value, +                            float valueTextWidth = Utils.calcTextWidth(mValuePaint, valueText);, +                            posOffset = (drawValueAboveBar ? valueOffsetPlus : -(valueTextWidth + valueOffsetPlus));, +                            negOffset = (drawValueAboveBar ? -(valueTextWidth + valueOffsetPlus) : valueOffsetPlus);, +, +                            if (isInverted), +                            {, +                                posOffset = -posOffset - valueTextWidth;, +                                negOffset = -negOffset - valueTextWidth;, +                            }, +, +                            drawValue(c, valueText, valuePoints[j], +                                    valuePoints[j + 1]);, +                                float val = vals[k / 2];, +                                String valueText = formatter.getFormattedValue(val);, +, +                                // calculate the correct offset depending on the draw position of the value, +                                float valueTextWidth = Utils.calcTextWidth(mValuePaint, valueText);, +                                posOffset = (drawValueAboveBar ? valueOffsetPlus : -(valueTextWidth + valueOffsetPlus));, +                                negOffset = (drawValueAboveBar ? -(valueTextWidth + valueOffsetPlus) : valueOffsetPlus);, +, +                                if (isInverted), +                                {, +                                    posOffset = -posOffset - valueTextWidth;, +                                    negOffset = -negOffset - valueTextWidth;, +                                }, +, +                                        + (val >= 0 ? posOffset : negOffset);, +                                drawValue(c, valueText, x, y);, +    protected void drawValue(Canvas c, String value, float xPos, float yPos) {, +        super.drawValue(c, value, xPos, yPos + mYOffset);]