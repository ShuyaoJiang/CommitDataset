[+++ b/MPChartExample/src/com/example/mpchartexample/DrawChartActivity.java, +import com.github.mikephil.charting.utils.Utils;, +++ b/MPChartExample/src/com/example/mpchartexample/DrawChartActivity.java, +import com.github.mikephil.charting.utils.Utils;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +import java.io.FileOutputStream;, +import java.io.OutputStream;, +import java.util.ArrayList;, +import java.util.Calendar;, +import java.util.Locale;, +, +	public int getOffsetLeft() {, +        return mOffsetLeft;, +    }, +	, +	public int getOffsetBottom() {, +        return mOffsetBottom;, +    }, +	, +	public int getOffsetRight() {, +        return mOffsetRight;, +    }, +	, +	public int getOffsetTop() {, +        return mOffsetTop;, +    }, +, +++ b/MPChartExample/src/com/example/mpchartexample/DrawChartActivity.java, +import com.github.mikephil.charting.utils.Utils;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +import java.io.FileOutputStream;, +import java.io.OutputStream;, +import java.util.ArrayList;, +import java.util.Calendar;, +import java.util.Locale;, +, +	public int getOffsetLeft() {, +        return mOffsetLeft;, +    }, +	, +	public int getOffsetBottom() {, +        return mOffsetBottom;, +    }, +	, +	public int getOffsetRight() {, +        return mOffsetRight;, +    }, +	, +	public int getOffsetTop() {, +        return mOffsetTop;, +    }, +, +++ b/MPChartLib/src/com/github/mikephil/charting/listener/BarLineChartTouchListener.java, +, +, +, +                            && distance(event.getX(), mTouchStartPoint.x, event.getY(),, +                                    mTouchStartPoint.y) > 25f) {, +                        mMatrix.postTranslate(event.getX() - mTouchStartPoint.x, event.getY(), +                                - mTouchStartPoint.y);, +                    } else if (mTouchMode == X_ZOOM || mTouchMode == Y_ZOOM, +                            || mTouchMode == PINCH_ZOOM) {, +                            // get the translation, +                            PointF t = getTrans(mTouchPointCenter.x, mTouchPointCenter.y);, +, +                                mMatrix.postScale(scale, scale, t.x,, +                                        t.y);, +                                    mMatrix.postScale(scaleX, 1f, t.x,, +                                            t.y);, +                                    mMatrix.postScale(1f, scaleY, t.x,, +                                            t.y);, +     * calculates the distance on the x-axis between two pointers (fingers on, +     * the display), +     * calculates the distance on the y-axis between two pointers (fingers on, +     * the display), +     * returns the correct translation depending on the provided x and y touch, +     * points, +     * , +     * @param e, +     * @return, +     */, +    private PointF getTrans(float x, float y) {, +, +        float xTrans = x - mChart.getOffsetLeft();, +        float yTrans = -(mChart.getHeight() - y - mChart.getOffsetBottom());, +, +        return new PointF(xTrans, yTrans);, +    }, +, +    /**, +        mChart.highlightValues(new Highlight[] {, +            h, +        });, +    public boolean onDoubleTap(MotionEvent e) {, +        , +        PointF trans = getTrans(e.getX(), e.getY());, +, +        // double tap --> zoom in, +        mMatrix.postScale(1.4f, 1.4f, trans.x, trans.y);, +]