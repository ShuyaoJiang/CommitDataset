[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartPositiveNegative.java, +        private FormattedStringCache.PrimIntFloat mFormattedStringCache;, +            mFormattedStringCache = new FormattedStringCache.PrimIntFloat(new DecimalFormat("######.0"));, +            return mFormattedStringCache.getFormattedValue(value, dataSetIndex);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartPositiveNegative.java, +        private FormattedStringCache.PrimIntFloat mFormattedStringCache;, +            mFormattedStringCache = new FormattedStringCache.PrimIntFloat(new DecimalFormat("######.0"));, +            return mFormattedStringCache.getFormattedValue(value, dataSetIndex);, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/formatter/DefaultAxisValueFormatter.java, +    protected FormattedStringCache.PrimFloat mFormattedStringCache;, +        mFormattedStringCache = new FormattedStringCache.PrimFloat(new DecimalFormat("###,###,###,##0" + b.toString()));, +        return mFormattedStringCache.getFormattedValue(value);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartPositiveNegative.java, +        private FormattedStringCache.PrimIntFloat mFormattedStringCache;, +            mFormattedStringCache = new FormattedStringCache.PrimIntFloat(new DecimalFormat("######.0"));, +            return mFormattedStringCache.getFormattedValue(value, dataSetIndex);, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/formatter/DefaultAxisValueFormatter.java, +    protected FormattedStringCache.PrimFloat mFormattedStringCache;, +        mFormattedStringCache = new FormattedStringCache.PrimFloat(new DecimalFormat("###,###,###,##0" + b.toString()));, +        return mFormattedStringCache.getFormattedValue(value);, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/formatter/FormattedStringCache.java, +import java.util.ArrayList;, +    protected Format mFormat;, +    public static class PrimIntFloat extends FormattedStringCache{, +, +        public PrimIntFloat(Format format){, +            super(format);, +        }, +, +        private ArrayList<Float> cachedValues = new ArrayList<>();, +        private ArrayList<String> cachedStrings = new ArrayList<>();, +, +        public String getFormattedValue(float value, int key) {, +, +            boolean hasValueAtdataSetIndex = true;, +            if(cachedValues.size() <= key){, +                int p = key;, +                while(p >= 0){, +                    if(p == 0){, +                        cachedValues.add(value);, +                        cachedStrings.add("");, +                    }else{, +                        cachedValues.add(Float.NaN);, +                        cachedStrings.add("");, +                    }, +                    p--;, +                }, +                hasValueAtdataSetIndex = false;, +            }, +, +            if(hasValueAtdataSetIndex) {, +                Float cachedValue = cachedValues.get(key);, +                hasValueAtdataSetIndex = !(cachedValue == null || cachedValue != value);, +            }, +, +            if(!hasValueAtdataSetIndex){, +                cachedValues.set(key, value);, +                cachedStrings.set(key, mFormat.format(value));, +            }, +, +            return cachedStrings.get(key);, +        }, +, +    }, +, +    public static class PrimFloat extends FormattedStringCache{, +, +        public PrimFloat(Format format){, +            super(format);, +        }, +, +, +        private ArrayList<Float> cachedValues = new ArrayList<>();, +        private ArrayList<String> cachedStrings = new ArrayList<>();, +, +        public String getFormattedValue(float value) {, +, +            boolean alreadyHasValue = false;, +            int vCount =  cachedValues.size();, +            int sIndex = -1;, +            for(int i = 0 ; i < vCount ; i++){, +                if(cachedValues.get(i) == value){, +                    sIndex = i;, +                    alreadyHasValue = true;, +                    break;, +                }, +            }, +             if(!alreadyHasValue) {, +                 cachedValues.add(value);, +                 cachedStrings.add(mFormat.format(value));, +                 sIndex = cachedValues.size() - 1;, +             }, +, +            return cachedStrings.get(sIndex);, +        }, +, +    }, +, +, +]