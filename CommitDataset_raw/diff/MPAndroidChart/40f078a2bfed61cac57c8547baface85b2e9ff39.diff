[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/AnotherBarActivity.java, +            mChart.setFitBars(true);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/AnotherBarActivity.java, +            mChart.setFitBars(true);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ListViewBarChartActivity.java, +            holder.chart.setFitBars(true);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/AnotherBarActivity.java, +            mChart.setFitBars(true);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ListViewBarChartActivity.java, +            holder.chart.setFitBars(true);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/custom/RealmDemoData.java, +    public RealmDemoData(float xValue, float yValue) {, +    public RealmDemoData(float xValue, float[] stackValues) {, +    public RealmDemoData(float xValue, float high, float low, float open, float close) {, +    public RealmDemoData(float xValue, float yValue, float bubbleSize) {, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/AnotherBarActivity.java, +            mChart.setFitBars(true);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ListViewBarChartActivity.java, +            holder.chart.setFitBars(true);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/custom/RealmDemoData.java, +    public RealmDemoData(float xValue, float yValue) {, +    public RealmDemoData(float xValue, float[] stackValues) {, +    public RealmDemoData(float xValue, float high, float low, float open, float close) {, +    public RealmDemoData(float xValue, float yValue, float bubbleSize) {, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/listviewitems/BarChartItem.java, +        holder.chart.setFitBars(true);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/AnotherBarActivity.java, +            mChart.setFitBars(true);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ListViewBarChartActivity.java, +            holder.chart.setFitBars(true);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/custom/RealmDemoData.java, +    public RealmDemoData(float xValue, float yValue) {, +    public RealmDemoData(float xValue, float[] stackValues) {, +    public RealmDemoData(float xValue, float high, float low, float open, float close) {, +    public RealmDemoData(float xValue, float yValue, float bubbleSize) {, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/listviewitems/BarChartItem.java, +        holder.chart.setFitBars(true);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/realm/RealmBaseActivity.java, +            RealmDemoData d = new RealmDemoData(i, value);, +            RealmDemoData d = new RealmDemoData(i, stack);, +                    even ? val - close : val + close);, +            RealmDemoData d = new RealmDemoData(i, value, size);, +            RealmDemoData d = new RealmDemoData(i, values[i]);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/AnotherBarActivity.java, +            mChart.setFitBars(true);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ListViewBarChartActivity.java, +            holder.chart.setFitBars(true);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/custom/RealmDemoData.java, +    public RealmDemoData(float xValue, float yValue) {, +    public RealmDemoData(float xValue, float[] stackValues) {, +    public RealmDemoData(float xValue, float high, float low, float open, float close) {, +    public RealmDemoData(float xValue, float yValue, float bubbleSize) {, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/listviewitems/BarChartItem.java, +        holder.chart.setFitBars(true);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/realm/RealmBaseActivity.java, +            RealmDemoData d = new RealmDemoData(i, value);, +            RealmDemoData d = new RealmDemoData(i, stack);, +                    even ? val - close : val + close);, +            RealmDemoData d = new RealmDemoData(i, value, size);, +            RealmDemoData d = new RealmDemoData(i, values[i]);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/realm/RealmDatabaseActivityBar.java, +        RealmBarDataSet<RealmDemoData> set = new RealmBarDataSet<RealmDemoData>(result, "xValue", "yValue"); // stacked entries, +        mChart.setFitBars(true);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/AnotherBarActivity.java, +            mChart.setFitBars(true);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ListViewBarChartActivity.java, +            holder.chart.setFitBars(true);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/custom/RealmDemoData.java, +    public RealmDemoData(float xValue, float yValue) {, +    public RealmDemoData(float xValue, float[] stackValues) {, +    public RealmDemoData(float xValue, float high, float low, float open, float close) {, +    public RealmDemoData(float xValue, float yValue, float bubbleSize) {, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/listviewitems/BarChartItem.java, +        holder.chart.setFitBars(true);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/realm/RealmBaseActivity.java, +            RealmDemoData d = new RealmDemoData(i, value);, +            RealmDemoData d = new RealmDemoData(i, stack);, +                    even ? val - close : val + close);, +            RealmDemoData d = new RealmDemoData(i, value, size);, +            RealmDemoData d = new RealmDemoData(i, values[i]);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/realm/RealmDatabaseActivityBar.java, +        RealmBarDataSet<RealmDemoData> set = new RealmBarDataSet<RealmDemoData>(result, "xValue", "yValue"); // stacked entries, +        mChart.setFitBars(true);, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/charts/BarChart.java, +import com.github.mikephil.charting.components.YAxis;, +    /**, +     * flag that enables or disables the highlighting arrow, +     */, +    private boolean mFitBars = false;, +, +, +        if (mAutoScaleMinMaxEnabled), +            mData.calcMinMax();, +, +        if (mFitBars) {, +            mXAxis.calculate(mData.getXMin() - mData.getBarWidth() / 2f, mData.getXMax() + mData.getBarWidth() / 2f);, +        } else {, +            mXAxis.calculate(mData.getXMin(), mData.getXMax());, +        }, +]