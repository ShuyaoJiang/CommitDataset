[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/HorizontalBarChartActivity.java, +        for (int i = 0; i < count; i++) {, +            float val = (float) (Math.random() * range);, +            yVals1.add(new BarEntry(i, val));, +        }, +, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/HorizontalBarChartActivity.java, +        for (int i = 0; i < count; i++) {, +            float val = (float) (Math.random() * range);, +            yVals1.add(new BarEntry(i, val));, +        }, +, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/highlight/HorizontalBarHighlighter.java, +import com.github.mikephil.charting.interfaces.datasets.IBarDataSet;, +import com.github.mikephil.charting.utils.PointD;, +		PointD pos = getValsForTouch(x, y);, +		SelectionDetail selectionDetail = getSelectionDetail((float) pos.y, x, y);, +		IBarDataSet set = barData.getDataSetByIndex(selectionDetail.dataSetIndex);, +					(float) pos.y,, +					(float) pos.x);, +				selectionDetail.xValue,, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/HorizontalBarChartActivity.java, +        for (int i = 0; i < count; i++) {, +            float val = (float) (Math.random() * range);, +            yVals1.add(new BarEntry(i, val));, +        }, +, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/highlight/HorizontalBarHighlighter.java, +import com.github.mikephil.charting.interfaces.datasets.IBarDataSet;, +import com.github.mikephil.charting.utils.PointD;, +		PointD pos = getValsForTouch(x, y);, +		SelectionDetail selectionDetail = getSelectionDetail((float) pos.y, x, y);, +		IBarDataSet set = barData.getDataSetByIndex(selectionDetail.dataSetIndex);, +					(float) pos.y,, +					(float) pos.x);, +				selectionDetail.xValue,, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/BarChartRenderer.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/HorizontalBarChartActivity.java, +        for (int i = 0; i < count; i++) {, +            float val = (float) (Math.random() * range);, +            yVals1.add(new BarEntry(i, val));, +        }, +, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/highlight/HorizontalBarHighlighter.java, +import com.github.mikephil.charting.interfaces.datasets.IBarDataSet;, +import com.github.mikephil.charting.utils.PointD;, +		PointD pos = getValsForTouch(x, y);, +		SelectionDetail selectionDetail = getSelectionDetail((float) pos.y, x, y);, +		IBarDataSet set = barData.getDataSetByIndex(selectionDetail.dataSetIndex);, +					(float) pos.y,, +					(float) pos.x);, +				selectionDetail.xValue,, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/BarChartRenderer.java, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/HorizontalBarChartRenderer.java, +        buffer.setBarWidth(mChart.getBarData().getBarWidth());, +                // get the buffer, +                BarBuffer buffer = mBarBuffers[i];, +                    for (int j = 0; j < buffer.buffer.length * mAnimator.getPhaseX(); j += 4) {, +                        float y = (buffer.buffer[j + 1] + buffer.buffer[j + 3]) / 2f;, +, +                        if (!mViewPortHandler.isInBoundsTop(buffer.buffer[j + 1])), +                        if (!mViewPortHandler.isInBoundsX(buffer.buffer[j])), +                        if (!mViewPortHandler.isInBoundsBottom(buffer.buffer[j + 1])), +                        BarEntry e = dataSet.getEntryForIndex(j / 4);, +                        drawValue(c, formattedValue, buffer.buffer[j + 2] + (val >= 0 ? posOffset : negOffset),, +                                y + halfTextHeight, dataSet.getValueTextColor(j / 2));, +                    Transformer trans = mChart.getTransformer(dataSet.getAxisDependency());, +                    int bufferIndex = 0;, +                    int index = 0;, +                    while (index < dataSet.getEntryCount() * mAnimator.getPhaseX()) {, +, +                        BarEntry e = dataSet.getEntryForIndex(index);, +, +                        int color = dataSet.getValueTextColor(index);, +                            if (!mViewPortHandler.isInBoundsTop(buffer.buffer[bufferIndex + 1])), +                            if (!mViewPortHandler.isInBoundsX(buffer.buffer[bufferIndex])), +                            if (!mViewPortHandler.isInBoundsBottom(buffer.buffer[bufferIndex + 1])), +                            drawValue(c, formattedValue, buffer.buffer[bufferIndex + 2], +                                    buffer.buffer[bufferIndex + 1] + halfTextHeight, color);, +                                float y = (buffer.buffer[bufferIndex + 1] + buffer.buffer[bufferIndex + 3]) / 2f;, +                                drawValue(c, formattedValue, x, y + halfTextHeight, color);, +, +                        bufferIndex = vals == null ? bufferIndex + 4 : bufferIndex + 4 * vals.length;, +                        index++;, +    @Override, +    protected void prepareBarHighlight(float x, float y1, float y2, float barWidthHalf, Transformer trans) {, +        float top = x - barWidthHalf;, +        float bottom = x + barWidthHalf;, +        trans.rectValueToPixel(mBarRect, mAnimator.getPhaseY());]