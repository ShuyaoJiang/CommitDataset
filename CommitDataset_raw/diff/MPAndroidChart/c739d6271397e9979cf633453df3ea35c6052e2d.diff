[+++ b/MPChartExample/AndroidManifest.xml, +        android:hardwareAccelerated="true", +++ b/MPChartExample/AndroidManifest.xml, +        android:hardwareAccelerated="true", +++ b/MPChartExample/res/layout/activity_performance_linechart.xml, +        android:max="29000", +        android:layout_width="60dp", +++ b/MPChartExample/AndroidManifest.xml, +        android:hardwareAccelerated="true", +++ b/MPChartExample/res/layout/activity_performance_linechart.xml, +        android:max="29000", +        android:layout_width="60dp", +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        set1.setCircleSize(3f);, +        set1.setDrawCircleHole(false);, +        set1.setValueTextSize(9f);, +++ b/MPChartExample/AndroidManifest.xml, +        android:hardwareAccelerated="true", +++ b/MPChartExample/res/layout/activity_performance_linechart.xml, +        android:max="29000", +        android:layout_width="60dp", +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        set1.setCircleSize(3f);, +        set1.setDrawCircleHole(false);, +        set1.setValueTextSize(9f);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PerformanceLineChart.java, +        int count = mSeekBarValues.getProgress() + 1000;, +        mTvCount.setText("" + count);, +        mChart.resetTracking();, +, +        setData(count, 500f);, +        set1.setLineWidth(0.5f);, +        set1.setDrawCubic(false);, +        set1.setDrawFilled(false);, +++ b/MPChartExample/AndroidManifest.xml, +        android:hardwareAccelerated="true", +++ b/MPChartExample/res/layout/activity_performance_linechart.xml, +        android:max="29000", +        android:layout_width="60dp", +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        set1.setCircleSize(3f);, +        set1.setDrawCircleHole(false);, +        set1.setValueTextSize(9f);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PerformanceLineChart.java, +        int count = mSeekBarValues.getProgress() + 1000;, +        mTvCount.setText("" + count);, +        mChart.resetTracking();, +, +        setData(count, 500f);, +        set1.setLineWidth(0.5f);, +        set1.setDrawCubic(false);, +        set1.setDrawFilled(false);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/notimportant/MainActivity.java, +        objects.add(new ContentItem(, +                "Performance Line Chart",, +                "Renders up to 30.000 objects smoothly."));, +++ b/MPChartExample/AndroidManifest.xml, +        android:hardwareAccelerated="true", +++ b/MPChartExample/res/layout/activity_performance_linechart.xml, +        android:max="29000", +        android:layout_width="60dp", +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        set1.setCircleSize(3f);, +        set1.setDrawCircleHole(false);, +        set1.setValueTextSize(9f);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PerformanceLineChart.java, +        int count = mSeekBarValues.getProgress() + 1000;, +        mTvCount.setText("" + count);, +        mChart.resetTracking();, +, +        setData(count, 500f);, +        set1.setLineWidth(0.5f);, +        set1.setDrawCubic(false);, +        set1.setDrawFilled(false);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/notimportant/MainActivity.java, +        objects.add(new ContentItem(, +                "Performance Line Chart",, +                "Renders up to 30.000 objects smoothly."));, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/AbstractBuffer.java, +, +package com.github.mikephil.charting.buffer;, +, +import java.util.ArrayList;, +, +/**, + * Buffer class to boost performance while drawing., + * , + * @author Philipp Jahoda, + * @param <T>, + */, +public abstract class AbstractBuffer<T> {, +, +    protected int index = 0;, +    public final float[] buffer;, +, +    /**, +     * Initialization with buffer-size., +     * , +     * @param size, +     */]