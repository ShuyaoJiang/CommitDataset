[+++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java, +    /** if true, the slices of the piechart are rounded */, +    private boolean mDrawRoundedSlices = false;, +, +    /**, +     * Returns the size of the hole radius in percent of the total radius., +     * , +     * @return, +     */, +     * Returns true if the chart is set to draw each end of a pie-slice, +     * "rounded"., +     * , +     * @return, +     */, +    public boolean isDrawRoundedSlicesEnabled() {, +        return mDrawRoundedSlices;, +    }, +, +    /**, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java, +    /** if true, the slices of the piechart are rounded */, +    private boolean mDrawRoundedSlices = false;, +, +    /**, +     * Returns the size of the hole radius in percent of the total radius., +     * , +     * @return, +     */, +     * Returns true if the chart is set to draw each end of a pie-slice, +     * "rounded"., +     * , +     * @return, +     */, +    public boolean isDrawRoundedSlicesEnabled() {, +        return mDrawRoundedSlices;, +    }, +, +    /**, +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/PieChartRenderer.java, +            float newangle = drawAngles[j];, +                            (newangle - sliceSpace / 2f) * mAnimator.getPhaseY(),, +                            true, mRenderPaint);, +        // drawCircles(c);, +, +    /**, +     * This gives all pie-slices a rounded edge., +     * , +     * @param c, +     */, +    protected void drawRoundedSlices(Canvas c) {, +, +        if (!mChart.isDrawRoundedSlicesEnabled()), +            return;, +, +        PieDataSet dataSet = mChart.getData().getDataSet();, +, +        if (!dataSet.isVisible()), +            return;, +        , +        PointF center = mChart.getCenterCircleBox();, +        float r = mChart.getRadius();, +, +        // calculate the radius of the "slice-circle", +        float circleRadius = (r - (r * mChart.getHoleRadius() / 100f)) / 2f;, +, +        List<Entry> entries = dataSet.getYVals();, +        float[] drawAngles = mChart.getDrawAngles();, +        float angle = mChart.getRotationAngle();, +, +        for (int j = 0; j < entries.size(); j++) {, +, +            float newangle = drawAngles[j];, +, +            Entry e = entries.get(j);, +, +            // draw only if the value is greater than zero, +            if ((Math.abs(e.getVal()) > 0.000001)) {, +, +                float x = (float) ((r - circleRadius), +                        * Math.cos(Math.toRadians((angle + newangle), +                                * mAnimator.getPhaseY())) + center.x);, +                float y = (float) ((r - circleRadius), +                        * Math.sin(Math.toRadians((angle + newangle), +                                * mAnimator.getPhaseY())) + center.y);, +, +                mRenderPaint.setColor(dataSet.getColor(j));, +                mBitmapCanvas.drawCircle(x, y, circleRadius, mRenderPaint);, +            }, +, +            angle += newangle * mAnimator.getPhaseX();, +        }, +    }]