[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        mChart.animateX(2500);, +        ArrayList<Entry> values = new ArrayList<Entry>();, +            float val = (float) (Math.random() * range) + 3;, +            values.add(new Entry(i, val));, +            set1.setValues(values);, +            set1 = new LineDataSet(values, "DataSet 1");, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        mChart.animateX(2500);, +        ArrayList<Entry> values = new ArrayList<Entry>();, +            float val = (float) (Math.random() * range) + 3;, +            values.add(new Entry(i, val));, +            set1.setValues(values);, +            set1 = new LineDataSet(values, "DataSet 1");, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartTime.java, +        mChart.setHardwareAccelerationEnabled(true);, +        xAxis.setGranularity(60000L); // one minute in millis, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        mChart.animateX(2500);, +        ArrayList<Entry> values = new ArrayList<Entry>();, +            float val = (float) (Math.random() * range) + 3;, +            values.add(new Entry(i, val));, +            set1.setValues(values);, +            set1 = new LineDataSet(values, "DataSet 1");, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartTime.java, +        mChart.setHardwareAccelerationEnabled(true);, +        xAxis.setGranularity(60000L); // one minute in millis, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/data/CombinedData.java, +import com.github.mikephil.charting.interfaces.datasets.IDataSet;, +public class CombinedData extends BarLineScatterCandleBubbleData<IBarLineScatterCandleBubbleDataSet<? extends Entry>> {, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        mChart.animateX(2500);, +        ArrayList<Entry> values = new ArrayList<Entry>();, +            float val = (float) (Math.random() * range) + 3;, +            values.add(new Entry(i, val));, +            set1.setValues(values);, +            set1 = new LineDataSet(values, "DataSet 1");, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartTime.java, +        mChart.setHardwareAccelerationEnabled(true);, +        xAxis.setGranularity(60000L); // one minute in millis, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/data/CombinedData.java, +import com.github.mikephil.charting.interfaces.datasets.IDataSet;, +public class CombinedData extends BarLineScatterCandleBubbleData<IBarLineScatterCandleBubbleDataSet<? extends Entry>> {, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/LineChartRenderer.java, +        int minx = dataSet.getEntryIndex(entryFrom);, +        int maxx = dataSet.getEntryIndex(entryTo);, +        int count = (int) ((maxx - minx) * phaseX);, +            for (int j = minx; j <= count + minx; j++) {, +                if (j < maxx) {, +            if (mLineBuffer.length != Math.max((entryCount) * pointsPerEntryPair, pointsPerEntryPair) * 2), +                mLineBuffer = new float[Math.max((entryCount) * pointsPerEntryPair, pointsPerEntryPair) * 2];, +                for (int x = minx; x <= count + minx; x++) {, +                    final int size = Math.max((maxx - minx + 1) * pointsPerEntryPair, pointsPerEntryPair) * 2;, +                    canvas.drawLines(mLineBuffer, 0, size, mRenderPaint);, +        Path filled = generateFilledPath(dataSet, minx, maxx);, +    private Path generateFilledPath(ILineDataSet dataSet, int minx, int maxx) {, +        float phaseX = Math.max(0.f, Math.min(1.f, mAnimator.getPhaseX()));, +        final boolean isDrawSteppedEnabled = dataSet.getMode() == LineDataSet.Mode.STEPPED;, +, +        int count = (int) ((maxx - minx) * phaseX);, +        Entry entry = dataSet.getEntryForIndex(minx);, +        for (int x = minx + 1; x <= count + minx; x++) {, +        filled.lineTo(dataSet.getEntryForIndex(count + minx).getX(), fillMin);, +                int minx = dataSet.getEntryIndex(entryFrom);, +                int maxx = dataSet.getEntryIndex(entryTo);, +            int minx = dataSet.getEntryIndex(entryFrom);, +            int maxx = dataSet.getEntryIndex(entryTo);, +            int count = (int) ((maxx - minx) * phaseX);, +            for (int j = minx; j <= count + minx; j++) {, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        mChart.animateX(2500);, +        ArrayList<Entry> values = new ArrayList<Entry>();, +            float val = (float) (Math.random() * range) + 3;, +            values.add(new Entry(i, val));, +            set1.setValues(values);, +            set1 = new LineDataSet(values, "DataSet 1");, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartTime.java, +        mChart.setHardwareAccelerationEnabled(true);, +        xAxis.setGranularity(60000L); // one minute in millis, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/data/CombinedData.java, +import com.github.mikephil.charting.interfaces.datasets.IDataSet;, +public class CombinedData extends BarLineScatterCandleBubbleData<IBarLineScatterCandleBubbleDataSet<? extends Entry>> {, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/LineChartRenderer.java, +        int minx = dataSet.getEntryIndex(entryFrom);, +        int maxx = dataSet.getEntryIndex(entryTo);, +        int count = (int) ((maxx - minx) * phaseX);, +            for (int j = minx; j <= count + minx; j++) {, +                if (j < maxx) {, +            if (mLineBuffer.length != Math.max((entryCount) * pointsPerEntryPair, pointsPerEntryPair) * 2), +                mLineBuffer = new float[Math.max((entryCount) * pointsPerEntryPair, pointsPerEntryPair) * 2];, +                for (int x = minx; x <= count + minx; x++) {, +                    final int size = Math.max((maxx - minx + 1) * pointsPerEntryPair, pointsPerEntryPair) * 2;, +                    canvas.drawLines(mLineBuffer, 0, size, mRenderPaint);, +        Path filled = generateFilledPath(dataSet, minx, maxx);, +    private Path generateFilledPath(ILineDataSet dataSet, int minx, int maxx) {, +        float phaseX = Math.max(0.f, Math.min(1.f, mAnimator.getPhaseX()));, +        final boolean isDrawSteppedEnabled = dataSet.getMode() == LineDataSet.Mode.STEPPED;, +, +        int count = (int) ((maxx - minx) * phaseX);, +        Entry entry = dataSet.getEntryForIndex(minx);]