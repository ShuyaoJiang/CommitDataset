[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        leftAxis.setStartAtZero(false);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        leftAxis.setStartAtZero(false);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        mXAxisRenderer.computeAxis(mData.getXValMaximumLength(), mData.getXVals());, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        leftAxis.setStartAtZero(false);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        mXAxisRenderer.computeAxis(mData.getXValMaximumLength(), mData.getXVals());, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/RadarChart.java, +        mXAxisRenderer.computeAxis(mData.getXValMaximumLength(), mData.getXVals());, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        leftAxis.setStartAtZero(false);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        mXAxisRenderer.computeAxis(mData.getXValMaximumLength(), mData.getXVals());, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/RadarChart.java, +        mXAxisRenderer.computeAxis(mData.getXValMaximumLength(), mData.getXVals());, +++ b/MPChartLib/src/com/github/mikephil/charting/components/XAxis.java, +    protected float mLabelRotationAngle = 0f;, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        leftAxis.setStartAtZero(false);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        mXAxisRenderer.computeAxis(mData.getXValMaximumLength(), mData.getXVals());, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/RadarChart.java, +        mXAxisRenderer.computeAxis(mData.getXValMaximumLength(), mData.getXVals());, +++ b/MPChartLib/src/com/github/mikephil/charting/components/XAxis.java, +    protected float mLabelRotationAngle = 0f;, +++ b/MPChartLib/src/com/github/mikephil/charting/data/ChartData.java, +     * contains the maximum length (in characters) an entry in the x-vals array, +    private float mXValMaximumLength = 0;, +        calcXValMaximumLength();, +    private void calcXValMaximumLength() {, +            mXValMaximumLength = 1;, +        int max = 1;, +, +            int length = mXVals.get(i).length();, +, +            if(length > max), +                max = length;, +        mXValMaximumLength = max;, +     * returns the maximum length (in characters) across all values in the, +    public float getXValMaximumLength() {, +        return mXValMaximumLength;, +        mXValMaximumLength = (mXValMaximumLength + xVal.length()) / 2f;, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +        leftAxis.setStartAtZero(false);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        mXAxisRenderer.computeAxis(mData.getXValMaximumLength(), mData.getXVals());, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/RadarChart.java, +        mXAxisRenderer.computeAxis(mData.getXValMaximumLength(), mData.getXVals());, +++ b/MPChartLib/src/com/github/mikephil/charting/components/XAxis.java, +    protected float mLabelRotationAngle = 0f;, +++ b/MPChartLib/src/com/github/mikephil/charting/data/ChartData.java, +     * contains the maximum length (in characters) an entry in the x-vals array, +    private float mXValMaximumLength = 0;, +        calcXValMaximumLength();, +    private void calcXValMaximumLength() {, +            mXValMaximumLength = 1;, +        int max = 1;, +, +            int length = mXVals.get(i).length();, +, +            if(length > max), +                max = length;, +        mXValMaximumLength = max;, +     * returns the maximum length (in characters) across all values in the, +    public float getXValMaximumLength() {, +        return mXValMaximumLength;, +        mXValMaximumLength = (mXValMaximumLength + xVal.length()) / 2f;, +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/XAxisRenderer.java, +        int xValChars = Math.round(xValAverageLength);, +        for (int i = 0; i < xValChars; i++) {, +        StringBuilder space = new StringBuilder();, +        int xValSpaceChars = mXAxis.getSpaceBetweenLabels();, +, +        for (int i = 0; i < xValSpaceChars; i++) {, +            space.append('h');, +        }, +, +        final FSize spaceSize = Utils.calcTextSize(mAxisLabelPaint, space.toString());, +, +        mXAxis.mLabelWidth = Math.round(labelWidth + spaceSize.width);, +        mXAxis.mLabelRotatedWidth = Math.round(labelRotatedSize.width + spaceSize.width);]