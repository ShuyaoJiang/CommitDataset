[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +                mChart.spin(1000, mChart.getRotationAngle(), mChart.getRotationAngle() + 360, Easing.EasingOption, +                        .EaseInCubic);, +        ArrayList<PieEntry> values = new ArrayList<PieEntry>();, +            values.add(new PieEntry((float) ((Math.random() * mult) + mult / 5), mParties[i % mParties.length]));, +        PieDataSet dataSet = new PieDataSet(values, "Election Results");, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +                mChart.spin(1000, mChart.getRotationAngle(), mChart.getRotationAngle() + 360, Easing.EasingOption, +                        .EaseInCubic);, +        ArrayList<PieEntry> values = new ArrayList<PieEntry>();, +            values.add(new PieEntry((float) ((Math.random() * mult) + mult / 5), mParties[i % mParties.length]));, +        PieDataSet dataSet = new PieDataSet(values, "Election Results");, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/BarChartRenderer.java, +                                dataSet.getValueTextColor(j / 4));, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +                mChart.spin(1000, mChart.getRotationAngle(), mChart.getRotationAngle() + 360, Easing.EasingOption, +                        .EaseInCubic);, +        ArrayList<PieEntry> values = new ArrayList<PieEntry>();, +            values.add(new PieEntry((float) ((Math.random() * mult) + mult / 5), mParties[i % mParties.length]));, +        PieDataSet dataSet = new PieDataSet(values, "Election Results");, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/BarChartRenderer.java, +                                dataSet.getValueTextColor(j / 4));, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/PieChartRenderer.java, +    /**, +     * Calculates the sliceSpace to use based on visible values and their size compared to the set sliceSpace., +     *, +     * @param dataSet, +     * @return, +     */, +    protected float getSliceSpace(IPieDataSet dataSet) {, +, +        float spaceSizeRatio = dataSet.getSliceSpace() / mViewPortHandler.getSmallestContentExtension();, +        float minValueRatio = dataSet.getYMin() / mChart.getData().getYValueSum() * 2;, +, +        float sliceSpace = spaceSizeRatio > minValueRatio ? 0f : dataSet.getSliceSpace();, +, +        return sliceSpace;, +    }, +, +        final float sliceSpace = visibleAngleCount <= 1 ? 0.f : getSliceSpace(dataSet);, +            final float sliceSpace = getSliceSpace(dataSet);, +, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +                mChart.spin(1000, mChart.getRotationAngle(), mChart.getRotationAngle() + 360, Easing.EasingOption, +                        .EaseInCubic);, +        ArrayList<PieEntry> values = new ArrayList<PieEntry>();, +            values.add(new PieEntry((float) ((Math.random() * mult) + mult / 5), mParties[i % mParties.length]));, +        PieDataSet dataSet = new PieDataSet(values, "Election Results");, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/BarChartRenderer.java, +                                dataSet.getValueTextColor(j / 4));, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/renderer/PieChartRenderer.java, +    /**, +     * Calculates the sliceSpace to use based on visible values and their size compared to the set sliceSpace., +     *, +     * @param dataSet, +     * @return, +     */, +    protected float getSliceSpace(IPieDataSet dataSet) {, +, +        float spaceSizeRatio = dataSet.getSliceSpace() / mViewPortHandler.getSmallestContentExtension();, +        float minValueRatio = dataSet.getYMin() / mChart.getData().getYValueSum() * 2;, +, +        float sliceSpace = spaceSizeRatio > minValueRatio ? 0f : dataSet.getSliceSpace();, +, +        return sliceSpace;, +    }, +, +        final float sliceSpace = visibleAngleCount <= 1 ? 0.f : getSliceSpace(dataSet);, +            final float sliceSpace = getSliceSpace(dataSet);, +, +++ b/MPChartLib/src/main/java/com/github/mikephil/charting/utils/ViewPortHandler.java, + * Class that contains information about the charts current viewport settings, including offsets, scale & translation, + * levels, ..., +     * Returns the smallest extension of the content rect (width or height)., +     *, +     * @return, +     */, +    public float getSmallestContentExtension() {, +        return Math.min(mContentRect.width(), mContentRect.height());, +    }, +, +    /**]