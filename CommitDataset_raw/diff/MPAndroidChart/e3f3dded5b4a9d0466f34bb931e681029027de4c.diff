[+++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +, +                // calculate the maximum y-label width (including eventual offsets), +                float ylabelwidth = Utils.calcTextWidth(mAxisRendererLeft.getAxisPaint(),, +                        label + (mYChartMin < 0 ? "----" : "+++")); // offsets, +, +                // calculate the maximum y-label width (including eventual offsets), +                float ylabelwidth = Utils.calcTextWidth(mAxisRendererRight.getAxisPaint(),, +                        label + (mYChartMin < 0 ? "----" : "+++")); // offsets, +        float xlabelheight = Utils.calcTextHeight(mXAxisRenderer.getAxisPaint(), "Q") * 2f;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +, +                // calculate the maximum y-label width (including eventual offsets), +                float ylabelwidth = Utils.calcTextWidth(mAxisRendererLeft.getAxisPaint(),, +                        label + (mYChartMin < 0 ? "----" : "+++")); // offsets, +, +                // calculate the maximum y-label width (including eventual offsets), +                float ylabelwidth = Utils.calcTextWidth(mAxisRendererRight.getAxisPaint(),, +                        label + (mYChartMin < 0 ? "----" : "+++")); // offsets, +        float xlabelheight = Utils.calcTextHeight(mXAxisRenderer.getAxisPaint(), "Q") * 2f;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +//                mValuePaint = p;, +//                mXLabelPaint = p;, +//                mYLabelPaint = p;, +//                return mValuePaint;, +//                return mXLabelPaint;, +//                return mYLabelPaint;, +        mRenderer.getPaintValues().setColor(color);, +        mRenderer.getPaintValues().setTextSize(Utils.convertDpToPixel(size));, +        mRenderer.getPaintValues().setTypeface(t);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +, +                // calculate the maximum y-label width (including eventual offsets), +                float ylabelwidth = Utils.calcTextWidth(mAxisRendererLeft.getAxisPaint(),, +                        label + (mYChartMin < 0 ? "----" : "+++")); // offsets, +, +                // calculate the maximum y-label width (including eventual offsets), +                float ylabelwidth = Utils.calcTextWidth(mAxisRendererRight.getAxisPaint(),, +                        label + (mYChartMin < 0 ? "----" : "+++")); // offsets, +        float xlabelheight = Utils.calcTextHeight(mXAxisRenderer.getAxisPaint(), "Q") * 2f;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +//                mValuePaint = p;, +//                mXLabelPaint = p;, +//                mYLabelPaint = p;, +//                return mValuePaint;, +//                return mXLabelPaint;, +//                return mYLabelPaint;, +        mRenderer.getPaintValues().setColor(color);, +        mRenderer.getPaintValues().setTextSize(Utils.convertDpToPixel(size));, +        mRenderer.getPaintValues().setTypeface(t);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/HorizontalBarChart.java, +//        setDrawYLabels(true);, +//        mTrans = new HorizontalBarChartTransformer();, +        public XLabelsAsYLabels(AxisDependency position) {, +            super(position);, +            // TODO Auto-generated constructor stub, +        }, +, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +, +                // calculate the maximum y-label width (including eventual offsets), +                float ylabelwidth = Utils.calcTextWidth(mAxisRendererLeft.getAxisPaint(),, +                        label + (mYChartMin < 0 ? "----" : "+++")); // offsets, +, +                // calculate the maximum y-label width (including eventual offsets), +                float ylabelwidth = Utils.calcTextWidth(mAxisRendererRight.getAxisPaint(),, +                        label + (mYChartMin < 0 ? "----" : "+++")); // offsets, +        float xlabelheight = Utils.calcTextHeight(mXAxisRenderer.getAxisPaint(), "Q") * 2f;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +//                mValuePaint = p;, +//                mXLabelPaint = p;, +//                mYLabelPaint = p;, +//                return mValuePaint;, +//                return mXLabelPaint;, +//                return mYLabelPaint;, +        mRenderer.getPaintValues().setColor(color);, +        mRenderer.getPaintValues().setTextSize(Utils.convertDpToPixel(size));, +        mRenderer.getPaintValues().setTypeface(t);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/HorizontalBarChart.java, +//        setDrawYLabels(true);, +//        mTrans = new HorizontalBarChartTransformer();, +        public XLabelsAsYLabels(AxisDependency position) {, +            super(position);, +            // TODO Auto-generated constructor stub, +        }, +, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +, +                // calculate the maximum y-label width (including eventual offsets), +                float ylabelwidth = Utils.calcTextWidth(mAxisRendererLeft.getAxisPaint(),, +                        label + (mYChartMin < 0 ? "----" : "+++")); // offsets, +, +                // calculate the maximum y-label width (including eventual offsets), +                float ylabelwidth = Utils.calcTextWidth(mAxisRendererRight.getAxisPaint(),, +                        label + (mYChartMin < 0 ? "----" : "+++")); // offsets, +        float xlabelheight = Utils.calcTextHeight(mXAxisRenderer.getAxisPaint(), "Q") * 2f;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +//                mValuePaint = p;, +//                mXLabelPaint = p;]