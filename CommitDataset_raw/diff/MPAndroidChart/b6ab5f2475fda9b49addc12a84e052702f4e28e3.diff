[+++ b/MPChartLib/src/com/github/mikephil/charting/data/DataSet.java, +        mYMin = Float.MAX_VALUE;, +        mYMax = Float.MIN_VALUE;, +        for (int i = start; i <= endValue; i++) {, +            if (e != null && !Float.isNaN(e.getVal())) {, +++ b/MPChartLib/src/com/github/mikephil/charting/data/DataSet.java, +        mYMin = Float.MAX_VALUE;, +        mYMax = Float.MIN_VALUE;, +        for (int i = start; i <= endValue; i++) {, +            if (e != null && !Float.isNaN(e.getVal())) {, +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/RadarChartRenderer.java, +        boolean hasMovedToPoint = false;, +, +            if (Float.isNaN(p.x)), +                continue;, +, +            if (!hasMovedToPoint) {, +                hasMovedToPoint = true;, +            } else, +            if (Float.isNaN(y)), +                continue;, +, +++ b/MPChartLib/src/com/github/mikephil/charting/data/DataSet.java, +        mYMin = Float.MAX_VALUE;, +        mYMax = Float.MIN_VALUE;, +        for (int i = start; i <= endValue; i++) {, +            if (e != null && !Float.isNaN(e.getVal())) {, +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/RadarChartRenderer.java, +        boolean hasMovedToPoint = false;, +, +            if (Float.isNaN(p.x)), +                continue;, +, +            if (!hasMovedToPoint) {, +                hasMovedToPoint = true;, +            } else, +            if (Float.isNaN(y)), +                continue;, +, +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/YAxisRendererRadarChart.java, +, +            if (first == 0.0) // Fix for IEEE negative zero case (Where value == -0.0, and 0.0 == -0.0), +                first = 0.0;, +]