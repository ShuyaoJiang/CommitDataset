[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +import com.github.mikephil.charting.animation.Easing;, +        mChart.animateX(2500, Easing.EasingOption.EaseInOutQuart);, +                mChart.animateY(3000, Easing.EasingOption.EaseInCubic);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +import com.github.mikephil.charting.animation.Easing;, +        mChart.animateX(2500, Easing.EasingOption.EaseInOutQuart);, +                mChart.animateY(3000, Easing.EasingOption.EaseInCubic);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +import com.github.mikephil.charting.animation.Easing;, +        mChart.animateY(1500, Easing.EasingOption.EaseInOutQuad);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +import com.github.mikephil.charting.animation.Easing;, +        mChart.animateX(2500, Easing.EasingOption.EaseInOutQuart);, +                mChart.animateY(3000, Easing.EasingOption.EaseInCubic);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/PieChartActivity.java, +import com.github.mikephil.charting.animation.Easing;, +        mChart.animateY(1500, Easing.EasingOption.EaseInOutQuad);, +++ b/MPChartLib/src/com/github/mikephil/charting/animation/ChartAnimator.java, +     * ################ ################ ################ ################, +     */, +    /** METHODS FOR CUSTOM EASING */, +, +    /**, +     * @param easingX, +     * @param easingY, +    public void animateXY(int durationMillisX, int durationMillisY, EasingFunction easingX,, +            EasingFunction easingY) {, +        animatorY.setInterpolator(easingY);, +        animatorX.setInterpolator(easingX);, +     * Animates the rendering of the chart on the x-axis with the specified, +     * animation time. If animate(...) is called, no further calling of, +     * invalidate() is necessary to refresh the chart., +     *, +     * @param durationMillis, +     * @param easing, +     */, +    public void animateX(int durationMillis, EasingFunction easing) {, +, +        if (android.os.Build.VERSION.SDK_INT < 11), +            return;, +, +        ObjectAnimator animatorX = ObjectAnimator.ofFloat(this, "phaseX", 0f, 1f);, +        animatorX.setInterpolator(easing);, +        animatorX.setDuration(durationMillis);, +        animatorX.addUpdateListener(mListener);, +        animatorX.start();, +    }, +, +    /**, +     * Animates the rendering of the chart on the y-axis with the specified, +     * animation time. If animate(...) is called, no further calling of, +     * invalidate() is necessary to refresh the chart., +     *, +     * @param durationMillis, +     * @param easing, +     */, +    public void animateY(int durationMillis, EasingFunction easing) {, +, +        if (android.os.Build.VERSION.SDK_INT < 11), +            return;, +, +        ObjectAnimator animatorY = ObjectAnimator.ofFloat(this, "phaseY", 0f, 1f);, +        animatorY.setInterpolator(easing);, +        animatorY.setDuration(durationMillis);, +        animatorY.addUpdateListener(mListener);, +        animatorY.start();, +    }, +, +    /**, +     * ################ ################ ################ ################, +     */, +    /** METHODS FOR PREDEFINED EASING */, +, +    /**, +    public void animateXY(int durationMillisX, int durationMillisY, Easing.EasingOption easingX,, +            Easing.EasingOption easingY) {, +        animatorY.setInterpolator(Easing.getEasingFunctionFromOption(easingY));, +        animatorX.setInterpolator(Easing.getEasingFunctionFromOption(easingX));, +        animatorX.setDuration(, +                durationMillisX);, +, +        // make sure only one animator produces update-callbacks (which then, +        // call invalidate()), +        if (durationMillisX > durationMillisY) {, +            animatorX.addUpdateListener(mListener);, +        } else {, +            animatorY.addUpdateListener(mListener);, +        }, +, +        animatorX.start();, +        animatorY.start();, +    }, +, +    /**, +     * Animates the rendering of the chart on the x-axis with the specified, +     * animation time. If animate(...) is called, no further calling of, +     * invalidate() is necessary to refresh the chart., +     *, +     * @param durationMillis]