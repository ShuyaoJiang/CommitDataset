[+++ b/MPChartLib/src/com/github/mikephil/charting/buffer/ScatterBuffer.java, +import com.github.mikephil.charting.interfaces.datasets.IScatterDataSet;, +public class ScatterBuffer extends AbstractBuffer<IScatterDataSet> {, +    public void feed(IScatterDataSet data) {, +        float size = data.getEntryCount() * phaseX;, +            Entry e = data.getEntryForIndex(i);, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/ScatterBuffer.java, +import com.github.mikephil.charting.interfaces.datasets.IScatterDataSet;, +public class ScatterBuffer extends AbstractBuffer<IScatterDataSet> {, +    public void feed(IScatterDataSet data) {, +        float size = data.getEntryCount() * phaseX;, +            Entry e = data.getEntryForIndex(i);, +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/ScatterChartRenderer.java, +import com.github.mikephil.charting.interfaces.datasets.IScatterDataSet;, +        buffer.feed(dataSet);, +                        .generateTransformedValuesScatter(dataSet,, +                    Entry entry = dataSet.getEntryForIndex(j / 2);, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/ScatterBuffer.java, +import com.github.mikephil.charting.interfaces.datasets.IScatterDataSet;, +public class ScatterBuffer extends AbstractBuffer<IScatterDataSet> {, +    public void feed(IScatterDataSet data) {, +        float size = data.getEntryCount() * phaseX;, +            Entry e = data.getEntryForIndex(i);, +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/ScatterChartRenderer.java, +import com.github.mikephil.charting.interfaces.datasets.IScatterDataSet;, +        buffer.feed(dataSet);, +                        .generateTransformedValuesScatter(dataSet,, +                    Entry entry = dataSet.getEntryForIndex(j / 2);, +++ b/MPChartLib/src/com/github/mikephil/charting/utils/Transformer.java, +import com.github.mikephil.charting.interfaces.datasets.IScatterDataSet;, +     * @param data, +    public float[] generateTransformedValuesScatter(IScatterDataSet data,, +        float[] valuePoints = new float[data.getEntryCount() * 2];, +            Entry e = data.getEntryForIndex(j / 2);]