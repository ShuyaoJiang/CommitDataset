[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, +import android.widget.Toast;, +                if(mChart.saveToGallery("title"+System.currentTimeMillis(), 50)) {, +                    Toast.makeText(getApplicationContext(), "Saving SUCCESSFUL!", Toast.LENGTH_SHORT).show();, +                } else Toast.makeText(getApplicationContext(), "Saving FAILED!", Toast.LENGTH_SHORT).show();, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, +import android.widget.Toast;, +                if(mChart.saveToGallery("title"+System.currentTimeMillis(), 50)) {, +                    Toast.makeText(getApplicationContext(), "Saving SUCCESSFUL!", Toast.LENGTH_SHORT).show();, +                } else Toast.makeText(getApplicationContext(), "Saving FAILED!", Toast.LENGTH_SHORT).show();, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/BarChartActivity.java, +import android.widget.Toast;, +                if(mChart.saveToGallery("title"+System.currentTimeMillis(), 50)) {, +                    Toast.makeText(getApplicationContext(), "Saving SUCCESSFUL!", Toast.LENGTH_SHORT).show();, +                } else Toast.makeText(getApplicationContext(), "Saving FAILED!", Toast.LENGTH_SHORT).show();, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity.java, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +import java.io.File;, +import java.io.IOException;, +     * Returns the ChartData object the chart CURRENTLY represents (not, +     * dependant on zoom level). It contains all values and information the, +     * chart displays. If filtering algorithms have been applied, this returns, +     * the filtered state of data., +     * Saves the chart with the given name to the given path on the sdcard, +     * chart is saved as a PNG image, example: saveToPath("myfilename",, +    /**, +     * Saves the current state of the chart to the gallery as a JPEG image. The, +     * filename and compression can be set. 0 == maximum compression, 100 = low, +     * compression (high quality). NOTE: Needs permission WRITE_EXTERNAL_STORAGE, +     * , +     * @param fileName e.g. "my_image", +     * @param quality e.g. 50, min = 0, max = 100, +     * @return returns true if saving was successfull, false if not, +     */, +    public boolean saveToGallery(String fileName, int quality) {, +, +        // restrain quality, +        if (quality < 0 || quality > 100), +            quality = 50;, +, +        long currentTime = System.currentTimeMillis();, +, +        File extBaseDir = Environment.getExternalStorageDirectory();, +        File file = new File(extBaseDir.getAbsolutePath() + "/DCIM");, +        if (!file.exists()) {, +            if (!file.mkdirs()) {, +                return false;, +            }, +        }, +, +        String filePath = file.getAbsolutePath() + "/" + fileName;, +        FileOutputStream out = null;, +        try {, +            out = new FileOutputStream(filePath);, +, +            mDrawBitmap.compress(Bitmap.CompressFormat.JPEG, quality, out); // control, +            // the jpeg, +            // quality, +, +            out.flush();, +            out.close();, +, +        } catch (IOException e) {, +            e.printStackTrace();, +, +            return false;, +        }, +, +        long size = new File(filePath).length();, +, +        ContentValues values = new ContentValues(8);, +, +        values.put(Images.Media.TITLE, fileName);, +        values.put(Images.Media.DISPLAY_NAME, fileName);, +        values.put(Images.Media.DATE_ADDED, currentTime);, +        values.put(Images.Media.MIME_TYPE, "image/jpeg");, +        values.put(Images.Media.DESCRIPTION, "MPAndroidChart-Library Save");, +        values.put(Images.Media.ORIENTATION, 0);, +        values.put(Images.Media.DATA, filePath);, +        values.put(Images.Media.SIZE, size);, +, +        return getContext().getContentResolver().insert(Images.Media.EXTERNAL_CONTENT_URI, values) == null, +                ? false : true;, +    }, +]