[+++ b/MPChartLib/src/com/github/mikephil/charting/data/realm/RealmBarDataSet.java, +    }, +    @Override, +    public void build(RealmResults<T> results) {, +, +        for (T object : results) {, +            mValues.add(new BarEntry(dynamicObject.getFloat(mValuesField), dynamicObject.getInt(mIndexField)));, +        return 120;, +        return Color.BLACK;, +++ b/MPChartLib/src/com/github/mikephil/charting/data/realm/RealmBarDataSet.java, +    }, +    @Override, +    public void build(RealmResults<T> results) {, +, +        for (T object : results) {, +            mValues.add(new BarEntry(dynamicObject.getFloat(mValuesField), dynamicObject.getInt(mIndexField)));, +        return 120;, +        return Color.BLACK;, +++ b/MPChartLib/src/com/github/mikephil/charting/data/realm/RealmBaseDataSet.java, +    protected String mValuesField;, +    protected String mIndexField;, +        this.mValuesField = yValuesField;, +        this.mIndexField = xIndexField;, +        this.results.sort(mIndexField, true);, +, +        build(this.results);, +    /**, +     * Rebuilds the DataSet based on the given RealmResults., +     */, +    public abstract void build(RealmResults<T> results);, +, +        //return results.min(mValuesField).floatValue();, +        //return results.max(mValuesField).floatValue();, +        //DynamicRealmObject o = new DynamicRealmObject(results.where().equalTo(mIndexField, xIndex).findFirst());, +        //return new Entry(o.getFloat(mValuesField), o.getInt(mIndexField));, +        //return new Entry(o.getFloat(mValuesField), o.getInt(mIndexField));, +        //return new DynamicRealmObject(results.where().greaterThanOrEqualTo(mIndexField, xIndex).findFirst()).getFloat(mValuesField);, +        return mValuesField;, +    }, +, +    public void setValuesField(String yValuesField) {, +        this.mValuesField = yValuesField;, +        return mIndexField;, +    }, +, +    public void setIndexField(String xIndexField) {, +        this.mIndexField = xIndexField;, +++ b/MPChartLib/src/com/github/mikephil/charting/data/realm/RealmBarDataSet.java, +    }, +    @Override, +    public void build(RealmResults<T> results) {, +, +        for (T object : results) {, +            mValues.add(new BarEntry(dynamicObject.getFloat(mValuesField), dynamicObject.getInt(mIndexField)));, +        return 120;, +        return Color.BLACK;, +++ b/MPChartLib/src/com/github/mikephil/charting/data/realm/RealmBaseDataSet.java, +    protected String mValuesField;, +    protected String mIndexField;, +        this.mValuesField = yValuesField;, +        this.mIndexField = xIndexField;, +        this.results.sort(mIndexField, true);, +, +        build(this.results);, +    /**, +     * Rebuilds the DataSet based on the given RealmResults., +     */, +    public abstract void build(RealmResults<T> results);, +, +        //return results.min(mValuesField).floatValue();, +        //return results.max(mValuesField).floatValue();, +        //DynamicRealmObject o = new DynamicRealmObject(results.where().equalTo(mIndexField, xIndex).findFirst());, +        //return new Entry(o.getFloat(mValuesField), o.getInt(mIndexField));, +        //return new Entry(o.getFloat(mValuesField), o.getInt(mIndexField));, +        //return new DynamicRealmObject(results.where().greaterThanOrEqualTo(mIndexField, xIndex).findFirst()).getFloat(mValuesField);, +        return mValuesField;, +    }, +, +    public void setValuesField(String yValuesField) {, +        this.mValuesField = yValuesField;, +        return mIndexField;, +    }, +, +    public void setIndexField(String xIndexField) {, +        this.mIndexField = xIndexField;, +++ b/MPChartLib/src/com/github/mikephil/charting/data/realm/RealmBubbleDataSet.java, +import com.github.mikephil.charting.data.BubbleEntry;, +import com.github.mikephil.charting.interfaces.datasets.IBubbleDataSet;, +, +import io.realm.RealmObject;, +import io.realm.RealmResults;, +import io.realm.dynamic.DynamicRealmObject;, +, + * Created by Philipp Jahoda on 07/11/15., +public class RealmBubbleDataSet<T extends RealmObject> extends RealmBaseDataSet<T, BubbleEntry> implements IBubbleDataSet {, +, +    private String mSizeField;, +, +    public RealmBubbleDataSet(RealmResults<T> result, String yValuesField, String xIndexField, String sizeField) {, +        super(result, yValuesField, xIndexField);]