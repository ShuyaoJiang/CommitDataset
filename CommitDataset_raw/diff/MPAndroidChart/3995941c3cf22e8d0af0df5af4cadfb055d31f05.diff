[+++ b/MPChartExample/res/menu/line.xml, +++ b/MPChartExample/res/menu/line.xml, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +++ b/MPChartExample/res/menu/line.xml, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +++ b/MPChartExample/res/menu/line.xml, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CircleBuffer.java, +, +package com.github.mikephil.charting.buffer;, +, +import com.github.mikephil.charting.data.Entry;, +import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;, +, +public class CircleBuffer extends AbstractBuffer<ILineDataSet> {, +, +    public CircleBuffer(int size) {, +        super(size);, +    }, +, +    protected void addCircle(float x, float y) {, +        buffer[index++] = x;, +        buffer[index++] = y;, +    }, +, +    @Override, +    public void feed(ILineDataSet data) {, +, +        int size = (int)Math.ceil((mTo - mFrom) * phaseX + mFrom);, +, +        for (int i = mFrom; i < size; i++) {, +, +            Entry e = data.getEntryForIndex(i);, +            addCircle(e.getXIndex(), e.getVal() * phaseY);, +        }, +        , +        reset();, +    }, +}, +++ b/MPChartExample/res/menu/line.xml, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CircleBuffer.java, +, +package com.github.mikephil.charting.buffer;, +, +import com.github.mikephil.charting.data.Entry;, +import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;, +, +public class CircleBuffer extends AbstractBuffer<ILineDataSet> {, +, +    public CircleBuffer(int size) {, +        super(size);, +    }, +, +    protected void addCircle(float x, float y) {, +        buffer[index++] = x;, +        buffer[index++] = y;, +    }, +, +    @Override, +    public void feed(ILineDataSet data) {, +, +        int size = (int)Math.ceil((mTo - mFrom) * phaseX + mFrom);, +, +        for (int i = mFrom; i < size; i++) {, +, +            Entry e = data.getEntryForIndex(i);, +            addCircle(e.getXIndex(), e.getVal() * phaseY);, +        }, +        , +        reset();, +    }, +}, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/LineBuffer.java, +, +package com.github.mikephil.charting.buffer;, +, +import com.github.mikephil.charting.data.Entry;, +import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;, +, +public class LineBuffer extends AbstractBuffer<ILineDataSet> {, +, +    public LineBuffer(int size) {, +        super((size < 4) ? 4 : size);, +    }, +, +    public void moveTo(float x, float y) {, +, +        if (index != 0), +            return;, +, +        buffer[index++] = x;, +        buffer[index++] = y;, +, +        // in case just one entry, this is overwritten when lineTo is called, +        buffer[index] = x;, +        buffer[index + 1] = y;]