[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +        , +        mChart.setDragDecelerationFrictionCoef(0.95f);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +        , +        mChart.setDragDecelerationFrictionCoef(0.95f);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +            ((BarLineChartTouchListener<?>) mListener).computeScroll();, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +        , +        mChart.setDragDecelerationFrictionCoef(0.95f);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +            ((BarLineChartTouchListener<?>) mListener).computeScroll();, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +    /** If set to true, chart continues to scroll after touch up */, +    private boolean mDragDecelerationEnabled = true;, +, +    /**, +     * Decelaration friction coefficient in [0 ; 1] interval, higher values, +     * indicate that speed will decrease slowly, for example if it set to 0, it, +     * will stop immediately, if set to 1, it will scroll with constant speed,, +     * until the last point, +     */, +    private float mDragDecelerationFrictionCoef = 0.9f;, +, +        Utils.init(getContext());, +     * If set to true, chart continues to scroll after touch up default: true, +     */, +    public boolean isDragDecelerationEnabled() {, +        return mDragDecelerationEnabled;, +    }, +, +    /**, +     * If set to true, chart continues to scroll after touch up. Default: true., +     *, +     * @param enabled, +     */, +    public void setDragDecelerationEnabled(boolean enabled) {, +        mDragDecelerationEnabled = enabled;, +    }, +, +    /**, +     * Returns drag deceleration friction coefficient, +     * , +     * @return, +     */, +    public float getDragDecelerationFrictionCoef() {, +        return mDragDecelerationFrictionCoef;, +    }, +, +    /**, +     * Deceleration friction coefficient in [0 ; 1] interval, higher values, +     * indicate that speed will decrease slowly, for example if it set to 0, it, +     * will stop immediately. 1 is an invalid value, and will be converted to 0.999f, +     * automatically., +     *, +     * @param newValue, +     */, +    public void setDragDecelerationFrictionCoef(float newValue) {, +        , +        if (newValue < 0.f), +            newValue = 0.f;, +        , +        if(newValue >= 1f) , +            newValue = 0.999f;, +, +        mDragDecelerationFrictionCoef = newValue;, +    }, +, +    /**, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +        , +        mChart.setDragDecelerationFrictionCoef(0.95f);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +            ((BarLineChartTouchListener<?>) mListener).computeScroll();, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +    /** If set to true, chart continues to scroll after touch up */, +    private boolean mDragDecelerationEnabled = true;, +, +    /**, +     * Decelaration friction coefficient in [0 ; 1] interval, higher values, +     * indicate that speed will decrease slowly, for example if it set to 0, it, +     * will stop immediately, if set to 1, it will scroll with constant speed,, +     * until the last point, +     */, +    private float mDragDecelerationFrictionCoef = 0.9f;, +, +        Utils.init(getContext());, +     * If set to true, chart continues to scroll after touch up default: true, +     */, +    public boolean isDragDecelerationEnabled() {, +        return mDragDecelerationEnabled;, +    }, +, +    /**, +     * If set to true, chart continues to scroll after touch up. Default: true., +     *, +     * @param enabled, +     */, +    public void setDragDecelerationEnabled(boolean enabled) {]