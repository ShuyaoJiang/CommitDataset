[+++ b/MPChartLib/src/com/github/mikephil/charting/components/Legend.java, +    private float mYEntrySpace = 0f;, +        mYEntrySpace = Utils.convertDpToPixel(0f);, +            float labelLineHeight = Utils.getLineHeight(labelpaint);, +            float labelLineSpacing = Utils.getLineSpacing(labelpaint) + mYEntrySpace;, +            mCalculatedLabelSizes = calculatedLabelSizes.toArray(, +                    new FSize[calculatedLabelSizes.size()]);, +                    + labelLineSpacing *, +                    (float) (mCalculatedLineSizes.length == 0, +                            ? 0, +++ b/MPChartLib/src/com/github/mikephil/charting/components/Legend.java, +    private float mYEntrySpace = 0f;, +        mYEntrySpace = Utils.convertDpToPixel(0f);, +            float labelLineHeight = Utils.getLineHeight(labelpaint);, +            float labelLineSpacing = Utils.getLineSpacing(labelpaint) + mYEntrySpace;, +            mCalculatedLabelSizes = calculatedLabelSizes.toArray(, +                    new FSize[calculatedLabelSizes.size()]);, +                    + labelLineSpacing *, +                    (float) (mCalculatedLineSizes.length == 0, +                            ? 0, +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/LegendRenderer.java, +        float labelLineHeight = Utils.getLineHeight(mLegendLabelPaint);, +        float labelLineSpacing = Utils.getLineSpacing(mLegendLabelPaint) + mLegend.getYEntrySpace();, +        float formYOffset = labelLineHeight - Utils.calcTextHeight(mLegendLabelPaint, "ABC") / 2.f;, +                        posY += labelLineHeight + labelLineSpacing;, +                        drawForm(c, posX, posY + formYOffset, i, mLegend);, +                if (legendPosition == Legend.LegendPosition.PIECHART_CENTER) {, +                    posX = mViewPortHandler.getChartWidth() / 2f, +                            + (direction == Legend.LegendDirection.LEFT_TO_RIGHT ? -mLegend.mTextWidthMax / 2f, +                            : mLegend.mTextWidthMax / 2f);, +                    posY = mViewPortHandler.getChartHeight() / 2f - mLegend.mNeededHeight / 2f, +                            + mLegend.getYOffset();, +                } else {, +                }, +                        drawForm(c, x, posY + formYOffset, i, mLegend);, +                            drawLabel(c, x, posY + labelLineHeight, labels[i]);, +                            posY += labelLineHeight + labelLineSpacing;, +                            drawLabel(c, x, posY + labelLineHeight, labels[i]);, +                        posY += labelLineHeight + labelLineSpacing;, +++ b/MPChartLib/src/com/github/mikephil/charting/components/Legend.java, +    private float mYEntrySpace = 0f;, +        mYEntrySpace = Utils.convertDpToPixel(0f);, +            float labelLineHeight = Utils.getLineHeight(labelpaint);, +            float labelLineSpacing = Utils.getLineSpacing(labelpaint) + mYEntrySpace;, +            mCalculatedLabelSizes = calculatedLabelSizes.toArray(, +                    new FSize[calculatedLabelSizes.size()]);, +                    + labelLineSpacing *, +                    (float) (mCalculatedLineSizes.length == 0, +                            ? 0, +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/LegendRenderer.java, +        float labelLineHeight = Utils.getLineHeight(mLegendLabelPaint);, +        float labelLineSpacing = Utils.getLineSpacing(mLegendLabelPaint) + mLegend.getYEntrySpace();, +        float formYOffset = labelLineHeight - Utils.calcTextHeight(mLegendLabelPaint, "ABC") / 2.f;, +                        posY += labelLineHeight + labelLineSpacing;, +                        drawForm(c, posX, posY + formYOffset, i, mLegend);, +                if (legendPosition == Legend.LegendPosition.PIECHART_CENTER) {, +                    posX = mViewPortHandler.getChartWidth() / 2f, +                            + (direction == Legend.LegendDirection.LEFT_TO_RIGHT ? -mLegend.mTextWidthMax / 2f, +                            : mLegend.mTextWidthMax / 2f);, +                    posY = mViewPortHandler.getChartHeight() / 2f - mLegend.mNeededHeight / 2f, +                            + mLegend.getYOffset();, +                } else {, +                }, +                        drawForm(c, x, posY + formYOffset, i, mLegend);, +                            drawLabel(c, x, posY + labelLineHeight, labels[i]);, +                            posY += labelLineHeight + labelLineSpacing;, +                            drawLabel(c, x, posY + labelLineHeight, labels[i]);, +                        posY += labelLineHeight + labelLineSpacing;, +++ b/MPChartLib/src/com/github/mikephil/charting/utils/Utils.java, +    public static float getLineHeight(Paint paint) {, +        Paint.FontMetrics metrics = paint.getFontMetrics();, +        return metrics.descent - metrics.ascent;, +    }, +, +    public static float getLineSpacing(Paint paint) {, +        Paint.FontMetrics metrics = paint.getFontMetrics();, +        return metrics.ascent - metrics.top + metrics.bottom;, +    }, +]