[+++ b/MPChartLib/src/com/github/mikephil/charting/data/realm/base/RealmBaseDataSet.java, +, +        if (mIndexField != null), +, +        if (mIndexField != null) ;, +++ b/MPChartLib/src/com/github/mikephil/charting/data/realm/base/RealmBaseDataSet.java, +, +        if (mIndexField != null), +, +        if (mIndexField != null) ;, +++ b/MPChartLib/src/com/github/mikephil/charting/data/realm/base/RealmLineRadarDataSet.java, +import io.realm.dynamic.DynamicRealmObject;, +public abstract class RealmLineRadarDataSet<T extends RealmObject> extends RealmLineScatterCandleRadarDataSet<T, Entry> implements ILineRadarDataSet<Entry> {, +    public void build(RealmResults<T> results) {, +, +        if (mIndexField == null) { // x-index not available, +, +            int xIndex = 0;, +, +            for (T object : results) {, +, +                DynamicRealmObject dynamicObject = new DynamicRealmObject(object);, +                mValues.add(new Entry(dynamicObject.getFloat(mValuesField), xIndex));, +                xIndex++;, +            }, +, +        } else {, +, +            for (T object : results) {, +, +                DynamicRealmObject dynamicObject = new DynamicRealmObject(object);, +                mValues.add(new Entry(dynamicObject.getFloat(mValuesField), dynamicObject.getInt(mIndexField)));, +            }, +        }, +    }, +, +    @Override, +++ b/MPChartLib/src/com/github/mikephil/charting/data/realm/base/RealmBaseDataSet.java, +, +        if (mIndexField != null), +, +        if (mIndexField != null) ;, +++ b/MPChartLib/src/com/github/mikephil/charting/data/realm/base/RealmLineRadarDataSet.java, +import io.realm.dynamic.DynamicRealmObject;, +public abstract class RealmLineRadarDataSet<T extends RealmObject> extends RealmLineScatterCandleRadarDataSet<T, Entry> implements ILineRadarDataSet<Entry> {, +    public void build(RealmResults<T> results) {, +, +        if (mIndexField == null) { // x-index not available, +, +            int xIndex = 0;, +, +            for (T object : results) {, +, +                DynamicRealmObject dynamicObject = new DynamicRealmObject(object);, +                mValues.add(new Entry(dynamicObject.getFloat(mValuesField), xIndex));, +                xIndex++;, +            }, +, +        } else {, +, +            for (T object : results) {, +, +                DynamicRealmObject dynamicObject = new DynamicRealmObject(object);, +                mValues.add(new Entry(dynamicObject.getFloat(mValuesField), dynamicObject.getInt(mIndexField)));, +            }, +        }, +    }, +, +    @Override, +++ b/MPChartLib/src/com/github/mikephil/charting/data/realm/implementation/RealmBubbleDataSet.java, +    /**, +     * Constructor for creating a CandleDataSet with realm data., +     *, +     * @param result       the queried results from the realm database, +     * @param yValuesField the name of the field in your data object that represents the y-value, +     * @param sizeField    the name of the field in your data object that represents the bubble size, +     */, +    public RealmBubbleDataSet(RealmResults<T> result, String yValuesField, String sizeField) {, +        super(result, yValuesField);, +        this.mSizeField = sizeField;, +, +        build(this.results);, +        calcMinMax(0, results.size());, +    }, +, +    /**, +     * Constructor for creating a CandleDataSet with realm data., +     *, +     * @param result       the queried results from the realm database, +     * @param yValuesField the name of the field in your data object that represents the y-value, +     * @param xIndexField  the name of the field in your data object that represents the x-index, +     * @param sizeField    the name of the field in your data object that represents the bubble size, +     */, +        if(mIndexField == null) {, +, +            int xIndex = 0;, +, +            for (T object : results) {, +, +                DynamicRealmObject dynamicObject = new DynamicRealmObject(object);]