[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +import com.github.mikephil.charting.highlight.Highlight;, +, +, +        //mChart.centerViewToAnimated(e.getXIndex(), e.getVal(), mChart.getData().getDataSetByIndex(dataSetIndex).getAxisDependency(), 1000);, +        //mChart.zoomAndCenterAnimated(2.5f, 2.5f, e.getXIndex(), e.getVal(), mChart.getData().getDataSetByIndex(dataSetIndex).getAxisDependency(), 1000);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +import com.github.mikephil.charting.highlight.Highlight;, +, +, +        //mChart.centerViewToAnimated(e.getXIndex(), e.getVal(), mChart.getData().getDataSetByIndex(dataSetIndex).getAxisDependency(), 1000);, +        //mChart.zoomAndCenterAnimated(2.5f, 2.5f, e.getXIndex(), e.getVal(), mChart.getData().getDataSetByIndex(dataSetIndex).getAxisDependency(), 1000);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +import com.github.mikephil.charting.jobs.AnimatedMoveViewJob;, +import com.github.mikephil.charting.jobs.AnimatedZoomJob;, +        float minLeft = mData.getYMin(AxisDependency.LEFT);, +        float maxLeft = mData.getYMax(AxisDependency.LEFT);, +        float minRight = mData.getYMin(AxisDependency.RIGHT);, +        float maxRight = mData.getYMax(AxisDependency.RIGHT);, +        mAxisLeft.mAxisMinimum = !Float.isNaN(mAxisLeft.getAxisMinValue()) ? mAxisLeft.getAxisMinValue() : (minLeft - bottomSpaceLeft);, +        mAxisLeft.mAxisMaximum = !Float.isNaN(mAxisLeft.getAxisMaxValue()) ? mAxisLeft.getAxisMaxValue() : (maxLeft + topSpaceLeft);, +        mAxisRight.mAxisMinimum = !Float.isNaN(mAxisRight.getAxisMinValue()) ? mAxisRight.getAxisMinValue() : (minRight - bottomSpaceRight);, +        mAxisRight.mAxisMaximum = !Float.isNaN(mAxisRight.getAxisMaxValue()) ? mAxisRight.getAxisMaxValue() : (maxRight + topSpaceRight);, +     * Zooms by the specified scale factor to the specified values on the specified axis., +     * STILL WORK IN PROGRESS, +     *, +     * @param scaleX, +     * @param scaleY, +     * @param xValue, +     * @param yValue, +     * @param axis, +     * @param duration, +     */, +    private void zoomAndCenterAnimated(float scaleX, float scaleY, float xValue, float yValue, AxisDependency axis, long duration) {, +, +        PointD bounds = getValuesByTouchPoint(mViewPortHandler.contentLeft(), mViewPortHandler.contentTop(), axis);, +, +        float valsInView = getDeltaY(axis) / mViewPortHandler.getScaleY();, +        float xsInView = getXAxis().getValues().size() / mViewPortHandler.getScaleX();, +, +        Runnable job = new AnimatedZoomJob(mViewPortHandler, this, getTransformer(axis), scaleX, scaleY, mViewPortHandler.getScaleX(), mViewPortHandler.getScaleY(), xValue - xsInView / 2f, yValue + valsInView / 2f, (float) bounds.x, (float) bounds.y, duration);, +        postJob(job);, +    }, +, +    /**, +        postJob(job);, +        postJob(job);, +     * x-value on the x-axis, and center the viewport to the specified y-value, +        postJob(job);, +, +    /**, +     * This will move the left side of the current viewport to the specified x-position, +     * and center the viewport to the specified y-position animated., +     * This also refreshes the chart by calling invalidate()., +     *, +     * @param xIndex, +     * @param yValue, +     * @param axis, +     * @param duration the duration of the animation in milliseconds, +     */, +    public void moveViewToAnimated(float xIndex, float yValue, AxisDependency axis, long duration) {, +, +        PointD bounds = getValuesByTouchPoint(mViewPortHandler.contentLeft(), mViewPortHandler.contentTop(), axis);, +, +        float valsInView = getDeltaY(axis) / mViewPortHandler.getScaleY();, +, +        Runnable job = new AnimatedMoveViewJob(mViewPortHandler, xIndex, yValue + valsInView / 2f,, +                getTransformer(axis), this, (float) bounds.x, (float) bounds.y, duration);, +, +        postJob(job);, +     * x-value and y-value., +    public void centerViewTo(float xIndex, float yValue, AxisDependency axis) {, +        postJob(job);, +, +    /**, +     * This will move the center of the current viewport to the specified, +     * x-value and y-value animated., +     *, +     * @param xIndex, +     * @param yValue, +     * @param axis, +     * @param duration the duration of the animation in milliseconds, +     */, +    public void centerViewToAnimated(float xIndex, float yValue, AxisDependency axis, long duration) {, +, +        PointD bounds = getValuesByTouchPoint(mViewPortHandler.contentLeft(), mViewPortHandler.contentTop(), axis);, +, +        float valsInView = getDeltaY(axis) / mViewPortHandler.getScaleY();, +        float xsInView = getXAxis().getValues().size() / mViewPortHandler.getScaleX();, +, +        Runnable job = new AnimatedMoveViewJob(mViewPortHandler,, +                xIndex - xsInView / 2f, yValue + valsInView / 2f,, +                getTransformer(axis), this, (float) bounds.x, (float) bounds.y, duration);, +, +        postJob(job);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity2.java, +import com.github.mikephil.charting.highlight.Highlight;, +, +, +        //mChart.centerViewToAnimated(e.getXIndex(), e.getVal(), mChart.getData().getDataSetByIndex(dataSetIndex).getAxisDependency(), 1000);]