[+++ b/MPChartLib/src/com/github/mikephil/charting/BarLineChartBase.java, +/**, + * Baseclass of all LineChart and BarChart., + * , + * @author Philipp Jahoda, + */, +++ b/MPChartLib/src/com/github/mikephil/charting/BarLineChartBase.java, +/**, + * Baseclass of all LineChart and BarChart., + * , + * @author Philipp Jahoda, + */, +++ b/MPChartLib/src/com/github/mikephil/charting/Chart.java, + * Baseclass of all Chart-Views., +     * Prepares all the paint objects that are used for drawing the lines, bars, +     * or pie-slices. The number of paint objects used depends on the number of, +     * colors in the colortemplate. If more values than colors need to be drawn,, +     * colors are repeated., +     * Sets a colortemplate for the chart that defindes the colors used for, +     * drawing. If more values need to be drawn than provided colors available, +     * in the colortemplate, colors are repeated., +++ b/MPChartLib/src/com/github/mikephil/charting/BarLineChartBase.java, +/**, + * Baseclass of all LineChart and BarChart., + * , + * @author Philipp Jahoda, + */, +++ b/MPChartLib/src/com/github/mikephil/charting/Chart.java, + * Baseclass of all Chart-Views., +     * Prepares all the paint objects that are used for drawing the lines, bars, +     * or pie-slices. The number of paint objects used depends on the number of, +     * colors in the colortemplate. If more values than colors need to be drawn,, +     * colors are repeated., +     * Sets a colortemplate for the chart that defindes the colors used for, +     * drawing. If more values need to be drawn than provided colors available, +     * in the colortemplate, colors are repeated., +++ b/MPChartLib/src/com/github/mikephil/charting/ColorTemplate.java, +, +     * THE COLOR THEMES BELOW ARE PREDEFINED, FEEL FREE TO CREATE YOUR OWN WITH, +     * AS MANY DIFFERENT COLORS AS YOU WANT, +    public static final int[] FRESH_COLORS = {, +            R.color.fresh_1, R.color.fresh_2, R.color.fresh_3, R.color.fresh_4, R.color.fresh_5, +    };, +    public static final int[] MONO_COLORS = {, +            R.color.mono_1, R.color.mono_2, R.color.mono_3, R.color.mono_4, R.color.mono_5, +    };, +    public static final int[] LIBERTY_COLORS = {, +            R.color.liberty_1, R.color.liberty_2, R.color.liberty_3, R.color.liberty_4,, +            R.color.liberty_5, +    };, +    public static final int[] COLORFUL_COLORS = {, +            R.color.colorful_1, R.color.colorful_2, R.color.colorful_3, R.color.colorful_4,, +            R.color.colorful_5, +    };, +    public static final int[] GREEN_COLORS = {, +            R.color.greens_1, R.color.greens_2, R.color.greens_3, R.color.greens_4,, +            R.color.greens_5, +    };, +    public static final int[] JOYFUL_COLORS = {, +            R.color.joyful_1, R.color.joyful_2, R.color.joyful_3, R.color.joyful_4,, +            R.color.joyful_5, +    };, +    /** the array of colors the template represents */, +    /**, +     * constructor, +     * @param colors, +     */, +    public ColorTemplate(ArrayList<Integer> colors) {, +        this.mColors = colors;, +    /**, +     * constructor, +     * @param colors, +     * @param c, +     */, +    public ColorTemplate(int[] colors, Context c) {, +        this.mColors = getColors(c, colors);, +    }, +, +    /**, +     * returns an array of colors this template represents, +     * , +     * @return, +     */, +     * , +     * @param colors e.g. ColorTemplate.MONO_COLORS]