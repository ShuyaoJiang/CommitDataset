[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/StackedBarActivityNegative.java, +        set.setBarSpacePercent(40f);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/StackedBarActivityNegative.java, +        set.setBarSpacePercent(40f);, +++ b/MPChartLib/src/com/github/mikephil/charting/highlight/BarHighlighter.java, +, +            Range[] ranges = getRanges(entry);, +            int stackIndex = getClosestStackIndex(ranges, (float) yValue);, +, +            Highlight h = new Highlight(xIndex, dataSetIndex, stackIndex, ranges[stackIndex]);, +     * Returns the index of the closest value inside the values array / ranges (stacked barchart), +     * @param ranges, +    protected int getClosestStackIndex(Range[] ranges, float value) {, +    /**, +     * Splits up the stack-values of the given bar-entry into Range objects., +     * @param entry, +     * @return, +     */, +, +        if(values == null), +            return null;, +, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/StackedBarActivityNegative.java, +        set.setBarSpacePercent(40f);, +++ b/MPChartLib/src/com/github/mikephil/charting/highlight/BarHighlighter.java, +, +            Range[] ranges = getRanges(entry);, +            int stackIndex = getClosestStackIndex(ranges, (float) yValue);, +, +            Highlight h = new Highlight(xIndex, dataSetIndex, stackIndex, ranges[stackIndex]);, +     * Returns the index of the closest value inside the values array / ranges (stacked barchart), +     * @param ranges, +    protected int getClosestStackIndex(Range[] ranges, float value) {, +    /**, +     * Splits up the stack-values of the given bar-entry into Range objects., +     * @param entry, +     * @return, +     */, +, +        if(values == null), +            return null;, +, +++ b/MPChartLib/src/com/github/mikephil/charting/highlight/Highlight.java, +    /** the range of the bar that is selected (only for stacked-barchart) */, +    private Range mRange;, +, +     * Constructor, only used for stacked-barchart., +     *, +     * @param x the index of the highlighted value on the x-axis, +     * @param dataSet the index of the DataSet the highlighted value belongs to, +     * @param stackIndex references which value of a stacked-bar entry has been, +     *            selected, +     * @param range the range the selected stack-value is in, +     */, +    public Highlight(int x, int dataSet, int stackIndex, Range range) {, +        this(x, dataSet, stackIndex);, +        this.mRange = range;, +    }, +, +    /**, +     * Returns the range of values the selected value of a stacked bar is in. (this is only relevant for stacked-barchart), +     * @return, +     */, +    public Range getRange() {, +        return mRange;, +    }, +, +    /**, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/StackedBarActivityNegative.java, +        set.setBarSpacePercent(40f);, +++ b/MPChartLib/src/com/github/mikephil/charting/highlight/BarHighlighter.java, +, +            Range[] ranges = getRanges(entry);, +            int stackIndex = getClosestStackIndex(ranges, (float) yValue);, +, +            Highlight h = new Highlight(xIndex, dataSetIndex, stackIndex, ranges[stackIndex]);, +     * Returns the index of the closest value inside the values array / ranges (stacked barchart), +     * @param ranges, +    protected int getClosestStackIndex(Range[] ranges, float value) {, +    /**, +     * Splits up the stack-values of the given bar-entry into Range objects., +     * @param entry, +     * @return, +     */, +, +        if(values == null), +            return null;, +, +++ b/MPChartLib/src/com/github/mikephil/charting/highlight/Highlight.java, +    /** the range of the bar that is selected (only for stacked-barchart) */, +    private Range mRange;, +, +     * Constructor, only used for stacked-barchart., +     *, +     * @param x the index of the highlighted value on the x-axis, +     * @param dataSet the index of the DataSet the highlighted value belongs to, +     * @param stackIndex references which value of a stacked-bar entry has been, +     *            selected, +     * @param range the range the selected stack-value is in, +     */]