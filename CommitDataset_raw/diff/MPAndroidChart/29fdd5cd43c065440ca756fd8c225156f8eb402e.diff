[+++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CandleBodyBuffer.java, +        float size = entries.size() * phaseX;, +        for (int i = 0; i < size; i++) {, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CandleBodyBuffer.java, +        float size = entries.size() * phaseX;, +        for (int i = 0; i < size; i++) {, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CandleShadowBuffer.java, +        float size = entries.size() * phaseX;, +        for (int i = 0; i < size; i++) {, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CandleBodyBuffer.java, +        float size = entries.size() * phaseX;, +        for (int i = 0; i < size; i++) {, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CandleShadowBuffer.java, +        float size = entries.size() * phaseX;, +        for (int i = 0; i < size; i++) {, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CircleBuffer.java, +        float size = entries.size() * phaseX;, +        for (int i = 0; i < size; i++) {, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CandleBodyBuffer.java, +        float size = entries.size() * phaseX;, +        for (int i = 0; i < size; i++) {, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CandleShadowBuffer.java, +        float size = entries.size() * phaseX;, +        for (int i = 0; i < size; i++) {, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CircleBuffer.java, +        float size = entries.size() * phaseX;, +        for (int i = 0; i < size; i++) {, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/LineBuffer.java, +        moveTo(entries.get(0).getXIndex(), entries.get(0).getVal());, +        float size = entries.size() * phaseX;, +        for (int i = 1; i < size; i++) {, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CandleBodyBuffer.java, +        float size = entries.size() * phaseX;, +        for (int i = 0; i < size; i++) {, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CandleShadowBuffer.java, +        float size = entries.size() * phaseX;, +        for (int i = 0; i < size; i++) {, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CircleBuffer.java, +        float size = entries.size() * phaseX;, +        for (int i = 0; i < size; i++) {, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/LineBuffer.java, +        moveTo(entries.get(0).getXIndex(), entries.get(0).getVal());, +        float size = entries.size() * phaseX;, +        for (int i = 1; i < size; i++) {, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +		if (mXAxis.isDrawLimitLinesBehindDataEnabled()), +			mXAxisRenderer.renderLimitLines(canvas);, +, +		if (!mXAxis.isDrawLimitLinesBehindDataEnabled()), +			mXAxisRenderer.renderLimitLines(canvas);, +, +	/**, +	 * This will move the center of the current viewport to the specified, +	 * x-index and y-value., +	 *, +	 * @param xIndex, +	 * @param yValue, +	 * @param axis - which axis should be used as a reference for the y-axis, +	 */, +	public void centerViewTo(int xIndex, float yValue, AxisDependency axis) {, +, +		float valsInView = getDeltaY(axis) / mViewPortHandler.getScaleY();, +		float xsInView = getXAxis().getValues().size() / mViewPortHandler.getScaleX();, +, +		Runnable job = new MoveViewJob(mViewPortHandler,, +				xIndex - xsInView / 2f, yValue + valsInView / 2f,, +				getTransformer(axis), this);, +, +		if (mViewPortHandler.hasChartDimens()) {, +			post(job);, +		} else {, +			mJobs.add(job);, +		}, +	}, +, +, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CandleBodyBuffer.java, +        float size = entries.size() * phaseX;, +        for (int i = 0; i < size; i++) {, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CandleShadowBuffer.java, +        float size = entries.size() * phaseX;, +        for (int i = 0; i < size; i++) {, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/CircleBuffer.java, +        float size = entries.size() * phaseX;, +        for (int i = 0; i < size; i++) {, +++ b/MPChartLib/src/com/github/mikephil/charting/buffer/LineBuffer.java, +        moveTo(entries.get(0).getXIndex(), entries.get(0).getVal());, +        float size = entries.size() * phaseX;, +        for (int i = 1; i < size; i++) {, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +		if (mXAxis.isDrawLimitLinesBehindDataEnabled()), +			mXAxisRenderer.renderLimitLines(canvas);, +, +		if (!mXAxis.isDrawLimitLinesBehindDataEnabled()), +			mXAxisRenderer.renderLimitLines(canvas);, +, +	/**, +	 * This will move the center of the current viewport to the specified, +	 * x-index and y-value., +	 *]