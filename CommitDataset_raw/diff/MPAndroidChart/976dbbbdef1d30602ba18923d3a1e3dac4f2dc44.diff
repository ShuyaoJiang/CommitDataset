[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +import com.github.mikephil.charting.components.YAxis;, +        LimitLine ll1 = new LimitLine(130f, "Upper Limit");, +        ll1.setTextSize(10f);, +        LimitLine ll2 = new LimitLine(-30f, "Lower Limit");, +        ll2.setTextSize(10f);, +        YAxis leftAxis = mChart.getAxisLeft();, +        leftAxis.addLimitLine(ll1);, +        leftAxis.addLimitLine(ll2);, +        leftAxis.setAxisMaxValue(220f);, +        leftAxis.setAxisMinValue(-50f);, +, +        mChart.getAxisRight().setEnabled(false);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +import com.github.mikephil.charting.components.YAxis;, +        LimitLine ll1 = new LimitLine(130f, "Upper Limit");, +        ll1.setTextSize(10f);, +        LimitLine ll2 = new LimitLine(-30f, "Lower Limit");, +        ll2.setTextSize(10f);, +        YAxis leftAxis = mChart.getAxisLeft();, +        leftAxis.addLimitLine(ll1);, +        leftAxis.addLimitLine(ll2);, +        leftAxis.setAxisMaxValue(220f);, +        leftAxis.setAxisMinValue(-50f);, +, +        mChart.getAxisRight().setEnabled(false);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        mAxisRendererLeft.renderLimitLines(mDrawCanvas);, +        mAxisRendererRight.renderLimitLines(mDrawCanvas);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +import com.github.mikephil.charting.components.YAxis;, +        LimitLine ll1 = new LimitLine(130f, "Upper Limit");, +        ll1.setTextSize(10f);, +        LimitLine ll2 = new LimitLine(-30f, "Lower Limit");, +        ll2.setTextSize(10f);, +        YAxis leftAxis = mChart.getAxisLeft();, +        leftAxis.addLimitLine(ll1);, +        leftAxis.addLimitLine(ll2);, +        leftAxis.setAxisMaxValue(220f);, +        leftAxis.setAxisMinValue(-50f);, +, +        mChart.getAxisRight().setEnabled(false);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        mAxisRendererLeft.renderLimitLines(mDrawCanvas);, +        mAxisRendererRight.renderLimitLines(mDrawCanvas);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/RadarChart.java, +        mYAxisRenderer.renderLimitLines(mDrawCanvas);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/LineChartActivity1.java, +import com.github.mikephil.charting.components.YAxis;, +        LimitLine ll1 = new LimitLine(130f, "Upper Limit");, +        ll1.setTextSize(10f);, +        LimitLine ll2 = new LimitLine(-30f, "Lower Limit");, +        ll2.setTextSize(10f);, +        YAxis leftAxis = mChart.getAxisLeft();, +        leftAxis.addLimitLine(ll1);, +        leftAxis.addLimitLine(ll2);, +        leftAxis.setAxisMaxValue(220f);, +        leftAxis.setAxisMinValue(-50f);, +, +        mChart.getAxisRight().setEnabled(false);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        mAxisRendererLeft.renderLimitLines(mDrawCanvas);, +        mAxisRendererRight.renderLimitLines(mDrawCanvas);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/RadarChart.java, +        mYAxisRenderer.renderLimitLines(mDrawCanvas);, +++ b/MPChartLib/src/com/github/mikephil/charting/components/LimitLine.java, +    /** the size of the label text */, +    private float mTextSize = 13f;, +, +    /** label string that is drawn next to the limit line */, +    private String mLabel = "";, +     * @param limit - the position (the value) on the y-axis where this line, +     *            should appear, +     * Constructor with limit and label., +     * , +     * @param limit - the position (the value) on the y-axis where this line, +     *            should appear, +     * @param label - provide "" if no label is required, +     */, +    public LimitLine(float limit, String label) {, +        mLimit = limit;, +        mLabel = label;, +    }, +, +    /**, +, +    /**, +     * Sets the label that is drawn next to the limit line. Provide "" if no, +     * label is required., +     * , +     * @param label, +     */, +    public void setLabel(String label) {, +        mLabel = label;, +    }, +, +    /**, +     * Returns the label that is drawn next to the limit line., +     * , +     * @return]