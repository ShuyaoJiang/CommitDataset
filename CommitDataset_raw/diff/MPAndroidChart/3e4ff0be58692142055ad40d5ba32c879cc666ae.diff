[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/fragments/ScatterChartFrag.java, +      //  l.setWordWrapEnabled(true);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/fragments/ScatterChartFrag.java, +      //  l.setWordWrapEnabled(true);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +                    offsetRight += Math.min(mLegend.mNeededWidth, mViewPortHandler.getChartWidth(), +                            * mLegend.getMaxSizePercent()), +                            + mLegend.getXOffset() * 2f;, +                    offsetLeft += Math.min(mLegend.mNeededWidth, mViewPortHandler.getChartWidth(), +                            * mLegend.getMaxSizePercent()), +                            + mLegend.getXOffset() * 2f;, +                    float yOffset = mLegend.mTextHeightMax * 2.f; // It's, +                                                                  // possible, +                                                                  // that we do, +                                                                  // not need, +                                                                  // this offset, +                                                                  // anymore as, +                                                                  // it is, +                                                                  // available, +                                                                  // through the, +                                                                  // extraOffsets, +                    offsetBottom += Math.min(mLegend.mNeededHeight + yOffset,, +                            mViewPortHandler.getChartHeight() * mLegend.getMaxSizePercent());, +     * Flag that indicates if auto scaling on the y axis is enabled. This is, +     * especially interesting for charts displaying financial data., +     * , +     * @param If enabled the y axis automatically adjusts to the min and max y, +     *            values of the current x axis range whenever the viewport, +     *            changes, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/fragments/ScatterChartFrag.java, +      //  l.setWordWrapEnabled(true);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +                    offsetRight += Math.min(mLegend.mNeededWidth, mViewPortHandler.getChartWidth(), +                            * mLegend.getMaxSizePercent()), +                            + mLegend.getXOffset() * 2f;, +                    offsetLeft += Math.min(mLegend.mNeededWidth, mViewPortHandler.getChartWidth(), +                            * mLegend.getMaxSizePercent()), +                            + mLegend.getXOffset() * 2f;, +                    float yOffset = mLegend.mTextHeightMax * 2.f; // It's, +                                                                  // possible, +                                                                  // that we do, +                                                                  // not need, +                                                                  // this offset, +                                                                  // anymore as, +                                                                  // it is, +                                                                  // available, +                                                                  // through the, +                                                                  // extraOffsets, +                    offsetBottom += Math.min(mLegend.mNeededHeight + yOffset,, +                            mViewPortHandler.getChartHeight() * mLegend.getMaxSizePercent());, +     * Flag that indicates if auto scaling on the y axis is enabled. This is, +     * especially interesting for charts displaying financial data., +     * , +     * @param If enabled the y axis automatically adjusts to the min and max y, +     *            values of the current x axis range whenever the viewport, +     *            changes, +++ b/MPChartLib/src/com/github/mikephil/charting/components/Legend.java, +    /** the maximum relative size out of the whole chart view in percent */, +    private float mMaxSizePercent = 0.95f;, +    /** flag that indicates if word wrapping is enabled */, +    private boolean mWordWrapEnabled = false;, +    /**, +     * Should the legend word wrap? / this is currently supported only for:, +     * BelowChartLeft, BelowChartRight, BelowChartCenter. / note that word, +     * wrapping a legend takes a toll on performance. / you may want to set, +     * maxSizePercent when word wrapping, to set the point where the text wraps., +     * / default: false, +     * , +     * @param enabled, +     */, +    /**, +     * If this is set, then word wrapping the legend is enabled. This means the, +     * legend will not be cut off if too long., +     * , +     * @return, +     */, +    /**, +     * The maximum relative size out of the whole chart view. / If the legend is, +     * to the right/left of the chart, then this affects the width of the, +     * legend. / If the legend is to the top/bottom of the chart, then this, +     * affects the height of the legend. / If the legend is the center of the, +     * piechart, then this defines the size of the rectangular bounds out of the, +     * size of the "hole". / default: 0.95f (95%), +     * , +     * @return, +     */, +    /**, +     * The maximum relative size out of the whole chart view. / If, +     * the legend is to the right/left of the chart, then this affects the width, +     * of the legend. / If the legend is to the top/bottom of the chart, then, +     * this affects the height of the legend. / If the legend is the center of, +     * the PieChart, then this defines the size of the rectangular bounds out of, +     * the size of the "hole". / default: 0.95f (95%), +     * , +     * @param maxSize, +     */, +            ArrayList<FSize> calculatedLabelSizes = new ArrayList<FSize>(labelCount);, +            ArrayList<Boolean> calculatedLabelBreakPoints = new ArrayList<Boolean>(labelCount);, +            ArrayList<FSize> calculatedLineSizes = new ArrayList<FSize>();, +            for (int i = 0; i < labelCount; i++) {]