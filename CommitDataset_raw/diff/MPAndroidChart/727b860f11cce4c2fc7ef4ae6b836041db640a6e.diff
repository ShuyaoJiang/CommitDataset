[+++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        mAxisLeft.calculate(mData.getYMin(AxisDependency.LEFT), mData.getYMax(AxisDependency.LEFT));, +        mAxisRight.calculate(mData.getYMin(AxisDependency.RIGHT), mData.getYMax(AxisDependency, +                .RIGHT));, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        mAxisLeft.calculate(mData.getYMin(AxisDependency.LEFT), mData.getYMax(AxisDependency.LEFT));, +        mAxisRight.calculate(mData.getYMin(AxisDependency.RIGHT), mData.getYMax(AxisDependency, +                .RIGHT));, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/RadarChart.java, +        mYAxis.calculate(mData.getYMin(AxisDependency.LEFT), mData.getYMax(AxisDependency.LEFT));, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        mAxisLeft.calculate(mData.getYMin(AxisDependency.LEFT), mData.getYMax(AxisDependency.LEFT));, +        mAxisRight.calculate(mData.getYMin(AxisDependency.RIGHT), mData.getYMax(AxisDependency, +                .RIGHT));, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/RadarChart.java, +        mYAxis.calculate(mData.getYMin(AxisDependency.LEFT), mData.getYMax(AxisDependency.LEFT));, +++ b/MPChartLib/src/com/github/mikephil/charting/components/YAxis.java, + * Class representing the y-axis labels settings and its entries. Only use the setter methods to, + * modify it. Do not, + * access public variables directly. Be aware that not all features the YLabels class provides, + * are suitable for the, + * RadarChart. Customizations that affect the value range of the axis need to be applied before, + * setting data for the, +     * <p/>, +     * flag indicating if a custom-granularity was set - if false, granularity is auto calculated, +     */, +    protected boolean mCustomGranularity = false;, +, +    /**, +     *, +     *, +     * Enabled/disable granularity control on axis value intervals. If enabled, the axis, +     * interval is not allowed to go below a certain granularity (which is either, +     * auto-calculated, or custom set), +     *, +     * Set a custom minimum interval between axis values (instead of auto-calculation). The axis, +     * interval can then not go below, +     * the specified limit. Use resetGranularity() to re-enable auto calculation., +     * This can be used to avoid label duplicating when zooming in., +     *, +        mCustomGranularity = true;, +    }, +, +    /**, +     * Reset the custom-set granularity. If this method is called, granularity, +     * is again auto calculated., +     */, +    public void resetGranularity() {, +        mCustomGranularity = false;, +     * set this to true to enable drawing the top y-label entry. Disabling this can be helpful, +     * when the top y-label and, +     * sets the number of label entries for the y-axis max = 25, min = 2, default: 6, be aware, +     * that this number is not, +     * @param force if enabled, the set label count will be forced, meaning that the exact, +     *              specified count of labels will, +     *              be drawn and evenly distributed alongside the axis - this might cause labels, +     *              to have uneven values, +     * If enabled, the YLabels will only show the minimum and maximum value of the chart. This, +     * will ignore/override the, +     * If this is set to true, the y-axis is inverted which means that low values are on top of, +     * the chart, high values, +     * Returns the formatted y-label at the specified index. This will either use the, +     * auto-formatter or the custom, +     * Sets the formatter to be used for formatting the axis labels. If no formatter is set, the, +     * chart will, +     * automatically determine a reasonable formatting (concerning decimals) for all the values, +     * that are drawn inside, +     * If this component has no YAxisValueFormatter or is only equipped with the default one (no, +     * custom set), return true., +        if (isEnabled() && isDrawLabelsEnabled() && getLabelPosition() == YAxisLabelPosition, +                .OUTSIDE_CHART), +     * Calculates the minimum, maximum, granularity and range values of the YAxis with the given, +     *, +    public void calculate(float dataMin, float dataMax) {, +, +        // in case granularity is not customized, auto-calculate it, +        if (!mCustomGranularity && mGranularityEnabled) {, +, +            double granularity = Utils.granularity(mAxisRange, mLabelCount);, +            this.mGranularity = (float) granularity;, +        }, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        mAxisLeft.calculate(mData.getYMin(AxisDependency.LEFT), mData.getYMax(AxisDependency.LEFT));, +        mAxisRight.calculate(mData.getYMin(AxisDependency.RIGHT), mData.getYMax(AxisDependency, +                .RIGHT));, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/RadarChart.java, +        mYAxis.calculate(mData.getYMin(AxisDependency.LEFT), mData.getYMax(AxisDependency.LEFT));, +++ b/MPChartLib/src/com/github/mikephil/charting/components/YAxis.java, + * Class representing the y-axis labels settings and its entries. Only use the setter methods to, + * modify it. Do not, + * access public variables directly. Be aware that not all features the YLabels class provides, + * are suitable for the, + * RadarChart. Customizations that affect the value range of the axis need to be applied before, + * setting data for the, +     * <p/>, +     * flag indicating if a custom-granularity was set - if false, granularity is auto calculated, +     */, +    protected boolean mCustomGranularity = false;, +, +    /**]