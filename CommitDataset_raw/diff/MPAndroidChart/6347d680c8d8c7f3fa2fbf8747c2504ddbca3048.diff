[+++ b/MPChartExample/res/menu/radar.xml, +        android:id="@+id/actionToggleHighlightCircle", +        android:title="Toggle highlight circle">, +    </item>, +    <item, +++ b/MPChartExample/res/menu/radar.xml, +        android:id="@+id/actionToggleHighlightCircle", +        android:title="Toggle highlight circle">, +    </item>, +    <item, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/RadarChartActivitry.java, +            case R.id.actionToggleHighlightCircle: {, +, +                ArrayList<IRadarDataSet> sets = (ArrayList<IRadarDataSet>) mChart.getData(), +                        .getDataSets();, +, +                for (IRadarDataSet set : sets) {, +                    set.setDrawHighlightCircleEnabled(!set.isDrawHighlightCircleEnabled());, +                }, +                mChart.invalidate();, +                break;, +            }, +++ b/MPChartExample/res/menu/radar.xml, +        android:id="@+id/actionToggleHighlightCircle", +        android:title="Toggle highlight circle">, +    </item>, +    <item, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/RadarChartActivitry.java, +            case R.id.actionToggleHighlightCircle: {, +, +                ArrayList<IRadarDataSet> sets = (ArrayList<IRadarDataSet>) mChart.getData(), +                        .getDataSets();, +, +                for (IRadarDataSet set : sets) {, +                    set.setDrawHighlightCircleEnabled(!set.isDrawHighlightCircleEnabled());, +                }, +                mChart.invalidate();, +                break;, +            }, +++ b/MPChartLib/src/com/github/mikephil/charting/data/RadarDataSet.java, +import android.graphics.Color;, +, +import com.github.mikephil.charting.utils.ColorTemplate;, +    /// flag indicating whether highlight circle should be drawn or not, +    protected boolean mDrawHighlightCircleEnabled = false;, +, +    protected int mHighlightCircleFillColor = Color.WHITE;, +, +    /// The stroke color for highlight circle., +    /// If Utils.COLOR_NONE, the color of the dataset is taken., +    protected int mHighlightCircleStrokeColor = ColorTemplate.COLOR_NONE;, +, +    protected int mHighlightCircleStrokeAlpha = (int)(0.3 * 255);, +    protected float mHighlightCircleInnerRadius = 3.0f;, +    protected float mHighlightCircleOuterRadius = 4.0f;, +    protected float mHighlightCircleStrokeWidth = 2.0f;, +, +    /// Returns true if highlight circle should be drawn, false if not, +    @Override, +    public boolean isDrawHighlightCircleEnabled(), +    {, +        return mDrawHighlightCircleEnabled;, +    }, +, +    /// Sets whether highlight circle should be drawn or not, +    @Override, +    public void setDrawHighlightCircleEnabled(boolean enabled), +    {, +        mDrawHighlightCircleEnabled = enabled;, +    }, +, +    @Override, +    public int getHighlightCircleFillColor(), +    {, +        return mHighlightCircleFillColor;, +    }, +, +    public void setHighlightCircleFillColor(int color), +    {, +        mHighlightCircleFillColor = color;, +    }, +, +    /// Returns the stroke color for highlight circle., +    /// If Utils.COLOR_NONE, the color of the dataset is taken., +    @Override, +    public int getHighlightCircleStrokeColor(), +    {, +        return mHighlightCircleStrokeColor;, +    }, +, +    /// Sets the stroke color for highlight circle., +    /// Set to Utils.COLOR_NONE in order to use the color of the dataset;, +    public void setHighlightCircleStrokeColor(int color), +    {, +        mHighlightCircleStrokeColor = color;, +    }, +, +    @Override, +    public int getHighlightCircleStrokeAlpha(), +    {]