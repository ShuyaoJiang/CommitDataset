[+++ b/MPChartLib/src/com/github/mikephil/charting/animation/AnimationEasing.java, +, +public class AnimationEasing {, +    /**, +     * Interface for creating custom made easing functions., +     */, +, +        /**, +         * Called each time the animation state is updated., +         * , +         * @param elapsed - the time that has passed so far, +         * @param duration - the total animation duration, +         * @return, +         */, +    /**, +     * Returns the correct easing function depending on the EasingOption., +     * , +     * @param easing, +     * @return, +     */, +    /**, +     * ########## ########## ########## ########## ########## ##########, +     * PREDEFINED EASING FUNCTIONS BELOW THIS, +     */, +, +                return (elapsed == 0) ? 0.f : (float) Math.pow(2.f, 10.f * (elapsed, +                        / (float) duration - 1.f));, +                return (elapsed == duration) ? 1.f : (-(float) Math.pow(2.f, -10.f * elapsed, +                        / (float) duration) + 1.f);, +                return -((float) Math.pow(2.f, 10.f * (position -= 1.f)) * (float) Math, +                        .sin((position * duration - s) * (2.f * Math.PI) / p));, +                return (float) Math.pow(2, -10 * position), +                        * (float) Math.sin((position * duration - s) * (2.f * Math.PI) / p) + 1.f;, +                    return -.5f, +                            * ((float) Math.pow(2.f, 10.f * (position -= 1.f)) * (float) Math, +                                    .sin((position * duration - s) * (2.f * Math.PI) / p));, +                return (float) Math.pow(2.f, -10.f * (position -= 1.f)), +                        * (float) Math.sin((position * duration - s) * (2.f * Math.PI) / p) * .5f, +                        + 1.f;, +                return 0.5f * ((position -= 2.f) * position, +                        * (((s *= (1.525f)) + 1.f) * position + s) + 2.f);, +++ b/MPChartLib/src/com/github/mikephil/charting/animation/AnimationEasing.java, +, +public class AnimationEasing {, +    /**, +     * Interface for creating custom made easing functions., +     */, +, +        /**, +         * Called each time the animation state is updated., +         * , +         * @param elapsed - the time that has passed so far, +         * @param duration - the total animation duration, +         * @return, +         */, +    /**, +     * Returns the correct easing function depending on the EasingOption., +     * , +     * @param easing, +     * @return, +     */, +    /**, +     * ########## ########## ########## ########## ########## ##########, +     * PREDEFINED EASING FUNCTIONS BELOW THIS, +     */, +, +                return (elapsed == 0) ? 0.f : (float) Math.pow(2.f, 10.f * (elapsed, +                        / (float) duration - 1.f));, +                return (elapsed == duration) ? 1.f : (-(float) Math.pow(2.f, -10.f * elapsed, +                        / (float) duration) + 1.f);, +                return -((float) Math.pow(2.f, 10.f * (position -= 1.f)) * (float) Math, +                        .sin((position * duration - s) * (2.f * Math.PI) / p));, +                return (float) Math.pow(2, -10 * position), +                        * (float) Math.sin((position * duration - s) * (2.f * Math.PI) / p) + 1.f;, +                    return -.5f, +                            * ((float) Math.pow(2.f, 10.f * (position -= 1.f)) * (float) Math, +                                    .sin((position * duration - s) * (2.f * Math.PI) / p));, +                return (float) Math.pow(2.f, -10.f * (position -= 1.f)), +                        * (float) Math.sin((position * duration - s) * (2.f * Math.PI) / p) * .5f, +                        + 1.f;, +                return 0.5f * ((position -= 2.f) * position, +                        * (((s *= (1.525f)) + 1.f) * position + s) + 2.f);, +++ b/MPChartLib/src/com/github/mikephil/charting/animation/ChartAnimator.java, + * Object responsible for all animations in the Chart., +    public void animateXY(int durationMillisX, int durationMillisY,, +            final AnimationEasing.EasingFunction easing) {, +    public void animateXY(int durationMillisX, int durationMillisY,, +            AnimationEasing.EasingOption easing) {, +        animateXY(durationMillisX, durationMillisY,, +                AnimationEasing.getEasingFunctionFromOption(easing));, +    /**, +     * Listener for callbacks on animation update., +     * , +     * @author Philipp Jahoda, +     */, +    @SuppressLint("HandlerLeak"), +++ b/MPChartLib/src/com/github/mikephil/charting/animation/AnimationEasing.java, +, +public class AnimationEasing {, +    /**]