[+++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +            boolean hasText = !TextUtils.isEmpty(mNoDataText);, +            boolean hasDescription = !TextUtils.isEmpty(mNoDataTextDescription);, +            float line1height = hasText ? Utils.calcTextHeight(mInfoPaint, mNoDataText) : 0.f;, +            float line2height = hasDescription ? Utils.calcTextHeight(mInfoPaint, mNoDataTextDescription) : 0.f;, +            float lineSpacing = (hasText && hasDescription) ?, +                    (mInfoPaint.getFontSpacing() - line1height) : 0.f;, +            // if no data, inform the user, +, +            float y = (getHeight() -, +                    (line1height + lineSpacing + line2height)) / 2.f, +                    + line1height;, +, +            if (hasText) {, +                canvas.drawText(mNoDataText, getWidth() / 2, y, mInfoPaint);, +, +                if (hasDescription) {, +                    y = y + line1height + lineSpacing;, +                }, +            }, +, +            if (hasDescription) {, +                canvas.drawText(mNoDataTextDescription, getWidth() / 2, y, mInfoPaint);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +            boolean hasText = !TextUtils.isEmpty(mNoDataText);, +            boolean hasDescription = !TextUtils.isEmpty(mNoDataTextDescription);, +            float line1height = hasText ? Utils.calcTextHeight(mInfoPaint, mNoDataText) : 0.f;, +            float line2height = hasDescription ? Utils.calcTextHeight(mInfoPaint, mNoDataTextDescription) : 0.f;, +            float lineSpacing = (hasText && hasDescription) ?, +                    (mInfoPaint.getFontSpacing() - line1height) : 0.f;, +            // if no data, inform the user, +, +            float y = (getHeight() -, +                    (line1height + lineSpacing + line2height)) / 2.f, +                    + line1height;, +, +            if (hasText) {, +                canvas.drawText(mNoDataText, getWidth() / 2, y, mInfoPaint);, +, +                if (hasDescription) {, +                    y = y + line1height + lineSpacing;, +                }, +            }, +, +            if (hasDescription) {, +                canvas.drawText(mNoDataTextDescription, getWidth() / 2, y, mInfoPaint);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java, +    private float mCenterTextRadiusPercent = 1.f;, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +            boolean hasText = !TextUtils.isEmpty(mNoDataText);, +            boolean hasDescription = !TextUtils.isEmpty(mNoDataTextDescription);, +            float line1height = hasText ? Utils.calcTextHeight(mInfoPaint, mNoDataText) : 0.f;, +            float line2height = hasDescription ? Utils.calcTextHeight(mInfoPaint, mNoDataTextDescription) : 0.f;, +            float lineSpacing = (hasText && hasDescription) ?, +                    (mInfoPaint.getFontSpacing() - line1height) : 0.f;, +            // if no data, inform the user, +, +            float y = (getHeight() -, +                    (line1height + lineSpacing + line2height)) / 2.f, +                    + line1height;, +, +            if (hasText) {, +                canvas.drawText(mNoDataText, getWidth() / 2, y, mInfoPaint);, +, +                if (hasDescription) {, +                    y = y + line1height + lineSpacing;, +                }, +            }, +, +            if (hasDescription) {, +                canvas.drawText(mNoDataTextDescription, getWidth() / 2, y, mInfoPaint);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java, +    private float mCenterTextRadiusPercent = 1.f;, +++ b/MPChartLib/src/com/github/mikephil/charting/renderer/PieChartRenderer.java, +            // I wish we could make an ellipse clipping path on Android to clip to the hole..., +            // If we ever find out how, this is the place to add it, based on holeRect, +, +, +//            }, +//, +//        else {, +//, +//, +//                // get all lines from the text, +//                String[] lines = centerText.toString().split("\n");, +//, +//                float maxlineheight = 0f;, +//, +//                // calc the maximum line height, +//                for (String line : lines) {, +//                    float curHeight = Utils.calcTextHeight(mCenterTextPaint, line);, +//                    if (curHeight > maxlineheight), +//                        maxlineheight = curHeight;, +//                }, +//, +//                float linespacing = maxlineheight * 0.25f;, +//, +//                float totalheight = maxlineheight * lines.length - linespacing * (lines.length - 1);, +//, +//                int cnt = lines.length;]