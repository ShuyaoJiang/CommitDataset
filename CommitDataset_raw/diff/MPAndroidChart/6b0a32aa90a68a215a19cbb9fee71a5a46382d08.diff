[+++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ListViewBarChartActivity.java, +import com.github.mikephil.charting.animation.Easing;, +            holder.chart.animateY(700, Easing.EasingOption.EaseInCubic);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ListViewBarChartActivity.java, +import com.github.mikephil.charting.animation.Easing;, +            holder.chart.animateY(700, Easing.EasingOption.EaseInCubic);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/RadarChartActivitry.java, +import com.github.mikephil.charting.animation.Easing;, +                mChart.spin(2000, mChart.getRotationAngle(), mChart.getRotationAngle() + 360, Easing.EasingOption.EaseInCubic);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/ListViewBarChartActivity.java, +import com.github.mikephil.charting.animation.Easing;, +            holder.chart.animateY(700, Easing.EasingOption.EaseInCubic);, +++ b/MPChartExample/src/com/xxmassdeveloper/mpchartexample/RadarChartActivitry.java, +import com.github.mikephil.charting.animation.Easing;, +                mChart.spin(2000, mChart.getRotationAngle(), mChart.getRotationAngle() + 360, Easing.EasingOption.EaseInCubic);, +++ b/MPChartLib/src/com/github/mikephil/charting/animation/Easing.java, +                return Easing.EasingFunctions.Linear;, +                return Easing.EasingFunctions.EaseInQuad;, +                return Easing.EasingFunctions.EaseOutQuad;, +                return Easing.EasingFunctions.EaseInOutQuad;, +                return Easing.EasingFunctions.EaseInCubic;, +                return Easing.EasingFunctions.EaseOutCubic;, +                return Easing.EasingFunctions.EaseInOutCubic;, +                return Easing.EasingFunctions.EaseInQuart;, +                return Easing.EasingFunctions.EaseOutQuart;, +                return Easing.EasingFunctions.EaseInOutQuart;, +                return Easing.EasingFunctions.EaseInSine;, +                return Easing.EasingFunctions.EaseOutSine;, +                return Easing.EasingFunctions.EaseInOutSine;, +                return Easing.EasingFunctions.EaseInExpo;, +                return Easing.EasingFunctions.EaseOutExpo;, +                return Easing.EasingFunctions.EaseInOutExpo;, +                return Easing.EasingFunctions.EaseInCirc;, +                return Easing.EasingFunctions.EaseOutCirc;, +                return Easing.EasingFunctions.EaseInOutCirc;, +                return Easing.EasingFunctions.EaseInElastic;, +                return Easing.EasingFunctions.EaseOutElastic;, +                return Easing.EasingFunctions.EaseInOutElastic;, +                return Easing.EasingFunctions.EaseInBack;, +                return Easing.EasingFunctions.EaseOutBack;, +                return Easing.EasingFunctions.EaseInOutBack;, +                return Easing.EasingFunctions.EaseInBounce;, +                return Easing.EasingFunctions.EaseOutBounce;, +                return Easing.EasingFunctions.EaseInOutBounce;, +    , +    private static class EasingFunctions {, +        , +        /**, +         * ########## ########## ########## ########## ########## ##########, +         * PREDEFINED EASING FUNCTIONS BELOW THIS, +         */, +, +        public static final EasingFunction Linear = new EasingFunction() {, +            // @Override, +            // public float ease(long elapsed, long duration) {, +            // return elapsed / (float) duration;, +            // }, +, +            @Override, +            public float getInterpolation(float input) {, +                return input;, +            }, +        };, +, +        public static final EasingFunction EaseInQuad = new EasingFunction() {, +            // @Override, +            // public float ease(long elapsed, long duration) {, +            // float position = elapsed / (float) duration;, +            // return position * position;, +            // }, +, +            @Override, +            public float getInterpolation(float input) {, +                return input * input;, +            }, +        };, +, +        public static final EasingFunction EaseOutQuad = new EasingFunction() {, +            // @Override, +            // public float ease(long elapsed, long duration) {, +            // float position = elapsed / (float) duration;, +            // return -position * (position - 2.f);, +            // }, +, +            @Override, +            public float getInterpolation(float input) {, +                return -input * (input - 2f);, +            }, +        };, +, +        public static final EasingFunction EaseInOutQuad = new EasingFunction() {, +            // @Override, +            // public float ease(long elapsed, long duration) {, +            // float position = elapsed / (duration / 2.f);, +            // if (position < 1.f), +            // {, +            // return 0.5f * position * position;, +            // }, +            // return -0.5f * ((--position) * (position - 2.f) - 1.f);, +            // }]