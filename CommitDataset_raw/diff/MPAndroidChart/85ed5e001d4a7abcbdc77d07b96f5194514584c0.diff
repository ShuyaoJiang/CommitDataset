[+++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +    protected boolean mDrawBarShadow = true;, +    protected RectF mBarShadow = new RectF();, +    protected RectF mBarRect = new RectF();, +    protected void prepareBar(float x, float y, float barspace) {, +			posOffset = getPositiveYOffset(mDrawValueAboveBar);, +			negOffset = getNegativeYOffset(mDrawValueAboveBar);, +	protected float getPositiveYOffset(boolean drawAboveValueBar), +	{, +		return (mDrawValueAboveBar ? -Utils.convertDpToPixel(5) : Utils.calcTextHeight(mValuePaint, "8") * 1.5f);, +	}, +, +	protected float getNegativeYOffset(boolean drawAboveValueBar), +	{, +		return (mDrawValueAboveBar ? Utils.calcTextHeight(mValuePaint, "8") * 1.5f : -Utils.convertDpToPixel(5));, +	}, +, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +    protected boolean mDrawBarShadow = true;, +    protected RectF mBarShadow = new RectF();, +    protected RectF mBarRect = new RectF();, +    protected void prepareBar(float x, float y, float barspace) {, +			posOffset = getPositiveYOffset(mDrawValueAboveBar);, +			negOffset = getNegativeYOffset(mDrawValueAboveBar);, +	protected float getPositiveYOffset(boolean drawAboveValueBar), +	{, +		return (mDrawValueAboveBar ? -Utils.convertDpToPixel(5) : Utils.calcTextHeight(mValuePaint, "8") * 1.5f);, +	}, +, +	protected float getNegativeYOffset(boolean drawAboveValueBar), +	{, +		return (mDrawValueAboveBar ? Utils.calcTextHeight(mValuePaint, "8") * 1.5f : -Utils.convertDpToPixel(5));, +	}, +, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +        mOffsetBottom = calcOffsetBottom(min, xbottom + legendBottom);, +        mOffsetTop = calcOffsetTop(min, xtop);, +        mOffsetLeft = calcOffsetLeft(min, yleft);, +        mOffsetRight = calcOffsetRight(min, yright + legendRight);, +	 * returns the maximum of the two values.  Allows subclasses to independently change this offset, +	 * @param min, +	 * @param left, +	 * @return, +	 */, +	protected float calcOffsetLeft(float min, float left), +	{, +		return Math.max(min, left);, +	}, +, +, +	/**, +	 * returns the maximum of the two values.  Allows subclasses to independently change this offset, +	 * @param min, +	 * @param top, +	 * @return, +	 */	protected float calcOffsetTop(float min, float top), +	{, +		return Math.max(min, top);, +	}, +, +, +	/**, +	 * returns the maximum of the two values.  Allows subclasses to independently change this offset, +	 * @param min, +	 * @param right, +	 * @return, +	 */	protected float calcOffsetRight(float min, float right), +	{, +		return Math.max(min, right);, +	}, +, +, +	/**, +	 * returns the maximum of the two values.  Allows subclasses to independently change this offset, +	 * @param min, +	 * @param bottom, +	 * @return, +	 */	protected float calcOffsetBottom(float min, float bottom), +	{, +		return Math.max(min, bottom);, +	}, +, +    /**, +    protected void prepareYLabels() {, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarChart.java, +    protected boolean mDrawBarShadow = true;, +    protected RectF mBarShadow = new RectF();, +    protected RectF mBarRect = new RectF();, +    protected void prepareBar(float x, float y, float barspace) {, +			posOffset = getPositiveYOffset(mDrawValueAboveBar);, +			negOffset = getNegativeYOffset(mDrawValueAboveBar);, +	protected float getPositiveYOffset(boolean drawAboveValueBar), +	{, +		return (mDrawValueAboveBar ? -Utils.convertDpToPixel(5) : Utils.calcTextHeight(mValuePaint, "8") * 1.5f);, +	}, +, +	protected float getNegativeYOffset(boolean drawAboveValueBar), +	{, +		return (mDrawValueAboveBar ? Utils.calcTextHeight(mValuePaint, "8") * 1.5f : -Utils.convertDpToPixel(5));, +	}]