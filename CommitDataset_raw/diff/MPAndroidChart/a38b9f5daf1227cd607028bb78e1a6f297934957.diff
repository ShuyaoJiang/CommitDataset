[+++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +import com.github.mikephil.charting.interfaces.datainterfaces.datasets.IBarLineScatterCandleBubbleDataSet;, +public abstract class BarLineChartBase<T extends BarLineScatterCandleBubbleData<? extends IBarLineScatterCandleBubbleDataSet<? extends Entry>>>, +    public IBarLineScatterCandleBubbleDataSet getDataSetByTouchPoint(float x, float y) {, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +import com.github.mikephil.charting.interfaces.datainterfaces.datasets.IBarLineScatterCandleBubbleDataSet;, +public abstract class BarLineChartBase<T extends BarLineScatterCandleBubbleData<? extends IBarLineScatterCandleBubbleDataSet<? extends Entry>>>, +    public IBarLineScatterCandleBubbleDataSet getDataSetByTouchPoint(float x, float y) {, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +import com.github.mikephil.charting.interfaces.datainterfaces.datasets.IDataSet;, +public abstract class Chart<T extends ChartData<? extends IDataSet<? extends Entry>>> extends, +        for (IDataSet set : mData.getDataSets()) {, +            IDataSet set = mData.getDataSetByIndex(i);, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +import com.github.mikephil.charting.interfaces.datainterfaces.datasets.IBarLineScatterCandleBubbleDataSet;, +public abstract class BarLineChartBase<T extends BarLineScatterCandleBubbleData<? extends IBarLineScatterCandleBubbleDataSet<? extends Entry>>>, +    public IBarLineScatterCandleBubbleDataSet getDataSetByTouchPoint(float x, float y) {, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +import com.github.mikephil.charting.interfaces.datainterfaces.datasets.IDataSet;, +public abstract class Chart<T extends ChartData<? extends IDataSet<? extends Entry>>> extends, +        for (IDataSet set : mData.getDataSets()) {, +            IDataSet set = mData.getDataSetByIndex(i);, +++ b/MPChartLib/src/com/github/mikephil/charting/data/BarLineScatterCandleBubbleData.java, +        extends ChartData<T> {, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/BarLineChartBase.java, +import com.github.mikephil.charting.interfaces.datainterfaces.datasets.IBarLineScatterCandleBubbleDataSet;, +public abstract class BarLineChartBase<T extends BarLineScatterCandleBubbleData<? extends IBarLineScatterCandleBubbleDataSet<? extends Entry>>>, +    public IBarLineScatterCandleBubbleDataSet getDataSetByTouchPoint(float x, float y) {, +++ b/MPChartLib/src/com/github/mikephil/charting/charts/Chart.java, +import com.github.mikephil.charting.interfaces.datainterfaces.datasets.IDataSet;, +public abstract class Chart<T extends ChartData<? extends IDataSet<? extends Entry>>> extends, +        for (IDataSet set : mData.getDataSets()) {, +            IDataSet set = mData.getDataSetByIndex(i);, +++ b/MPChartLib/src/com/github/mikephil/charting/data/BarLineScatterCandleBubbleData.java, +        extends ChartData<T> {, +++ b/MPChartLib/src/com/github/mikephil/charting/data/BaseDataSet.java, +import android.graphics.Color;, +import android.graphics.Typeface;, +import com.github.mikephil.charting.formatter.DefaultValueFormatter;, +import com.github.mikephil.charting.formatter.ValueFormatter;, +import com.github.mikephil.charting.interfaces.datainterfaces.datasets.IDataSet;, +import com.github.mikephil.charting.utils.Utils;, +, +import java.util.ArrayList;, +    /**, +     * if true, value highlightning is enabled, +     */, +    protected boolean mHighlightEnabled = true;, +     * custom formatter that is used instead of the auto-formatter if set, +    protected transient ValueFormatter mValueFormatter;, +, +    /**, +     * the color used for the value-text, +     */, +    protected int mValueColor = Color.BLACK;, +, +    /**, +     * the typeface used for the value text, +     */, +    protected Typeface mValueTypeface;, +, +    /**, +     * if true, y-values are drawn on the chart, +     */, +    protected boolean mDrawValues = true;, +, +    /**, +     * the size of the value-text labels, +     */, +    protected float mValueTextSize = 17f;, +, +, +    @Override, +    public void calcMinMax(List<T> values, int start, int end) {, +    @Override, +    public void setHighlightEnabled(boolean enabled) {, +        mHighlightEnabled = enabled;, +    }, +    @Override, +    public boolean isHighlightEnabled() {, +        return mHighlightEnabled;, +    }, +, +    @Override, +    public void addEntry(T e) {, +, +        if (e == null), +            return;, +, +        float val = e.getVal();, +, +        List<T> yVals = getYVals();, +        if (yVals == null) {, +            yVals = new ArrayList<T>();, +        }, +, +        if (yVals.size() == 0) {, +            mYMax = val;, +            mYMin = val;, +        } else {]