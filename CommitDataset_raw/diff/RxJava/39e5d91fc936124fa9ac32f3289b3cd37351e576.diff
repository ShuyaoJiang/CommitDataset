[+++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableConcatMap.java, +                        disposed = true;, +            return cancelled;, +                            cancelled = true;, +                        cancelled = true;, +                        cancelled = true;, +                            cancelled = true;, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableConcatMap.java, +                        disposed = true;, +            return cancelled;, +                            cancelled = true;, +                        cancelled = true;, +                        cancelled = true;, +                            cancelled = true;, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableConcatMapTest.java, +import static org.junit.Assert.assertTrue;, +, +import io.reactivex.disposables.*;, +import io.reactivex.internal.functions.Functions;, +, +    @SuppressWarnings("unchecked"), +    @Test, +    public void concatReportsDisposedOnComplete() {, +        final Disposable[] disposable = { null };, +, +        Observable.fromArray(Observable.just(1), Observable.just(2)), +        .hide(), +        .concatMap(Functions.<Observable<Integer>>identity()), +        .subscribe(new Observer<Integer>() {, +, +            @Override, +            public void onSubscribe(Disposable d) {, +                disposable[0] = d;, +            }, +, +            @Override, +            public void onNext(Integer t) {, +            }, +, +            @Override, +            public void onError(Throwable e) {, +            }, +, +            @Override, +            public void onComplete() {, +            }, +        });, +, +        assertTrue(disposable[0].isDisposed());, +    }, +, +    @Test, +    @SuppressWarnings("unchecked"), +    public void concatReportsDisposedOnError() {, +        final Disposable[] disposable = { null };, +, +        Observable.fromArray(Observable.just(1), Observable.<Integer>error(new TestException())), +        .hide(), +        .concatMap(Functions.<Observable<Integer>>identity()), +        .subscribe(new Observer<Integer>() {, +, +            @Override, +            public void onSubscribe(Disposable d) {, +                disposable[0] = d;, +            }, +, +            @Override, +            public void onNext(Integer t) {, +            }, +, +            @Override, +            public void onError(Throwable e) {, +            }, +, +            @Override, +            public void onComplete() {, +            }, +        });, +, +        assertTrue(disposable[0].isDisposed());, +    }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableConcatMap.java, +                        disposed = true;, +            return cancelled;, +                            cancelled = true;, +                        cancelled = true;, +                        cancelled = true;, +                            cancelled = true;, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableConcatMapTest.java, +import static org.junit.Assert.assertTrue;, +, +import io.reactivex.disposables.*;, +import io.reactivex.internal.functions.Functions;, +, +    @SuppressWarnings("unchecked"), +    @Test, +    public void concatReportsDisposedOnComplete() {, +        final Disposable[] disposable = { null };, +, +        Observable.fromArray(Observable.just(1), Observable.just(2))]