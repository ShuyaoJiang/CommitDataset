[+++ b/src/main/java/io/reactivex/Completable.java, +     * Returns a Completable instance that subscribes to the given publisher, ignores all values and, +     * @param <T> the type of the publisher, +     * @param publisher the Publisher instance to subscribe to, not null, +     * @throws NullPointerException if publisher is null, +    public static <T> Completable fromPublisher(final Publisher<T> publisher) {, +        Objects.requireNonNull(publisher, "publisher is null");, +        return new CompletableFromPublisher<T>(publisher);, +        return fromPublisher(toFlowable().repeat());, +        return fromPublisher(toFlowable().repeat(times));, +        return fromPublisher(toFlowable().repeatUntil(stop));, +        return fromPublisher(toFlowable().repeatWhen(handler));, +        return fromPublisher(toFlowable().retry());, +        return fromPublisher(toFlowable().retry(predicate));, +        return fromPublisher(toFlowable().retry(times));, +        return fromPublisher(toFlowable().retry(predicate));, +        return fromPublisher(toFlowable().retryWhen(handler));, +++ b/src/main/java/io/reactivex/Completable.java, +     * Returns a Completable instance that subscribes to the given publisher, ignores all values and, +     * @param <T> the type of the publisher, +     * @param publisher the Publisher instance to subscribe to, not null, +     * @throws NullPointerException if publisher is null, +    public static <T> Completable fromPublisher(final Publisher<T> publisher) {, +        Objects.requireNonNull(publisher, "publisher is null");, +        return new CompletableFromPublisher<T>(publisher);, +        return fromPublisher(toFlowable().repeat());, +        return fromPublisher(toFlowable().repeat(times));, +        return fromPublisher(toFlowable().repeatUntil(stop));, +        return fromPublisher(toFlowable().repeatWhen(handler));, +        return fromPublisher(toFlowable().retry());, +        return fromPublisher(toFlowable().retry(predicate));, +        return fromPublisher(toFlowable().retry(times));, +        return fromPublisher(toFlowable().retry(predicate));, +        return fromPublisher(toFlowable().retryWhen(handler));, +++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.internal.operators.completable.CompletableFromPublisher;, +import io.reactivex.internal.operators.observable.ObservableFromPublisher;, +import io.reactivex.internal.operators.single.SingleFromPublisher;, +        return new CompletableFromPublisher<T>(this);, +        return new ObservableFromPublisher<T>(this);, +        return new SingleFromPublisher<T>(this);, +++ b/src/main/java/io/reactivex/Completable.java, +     * Returns a Completable instance that subscribes to the given publisher, ignores all values and, +     * @param <T> the type of the publisher, +     * @param publisher the Publisher instance to subscribe to, not null, +     * @throws NullPointerException if publisher is null, +    public static <T> Completable fromPublisher(final Publisher<T> publisher) {, +        Objects.requireNonNull(publisher, "publisher is null");, +        return new CompletableFromPublisher<T>(publisher);, +        return fromPublisher(toFlowable().repeat());, +        return fromPublisher(toFlowable().repeat(times));, +        return fromPublisher(toFlowable().repeatUntil(stop));, +        return fromPublisher(toFlowable().repeatWhen(handler));, +        return fromPublisher(toFlowable().retry());, +        return fromPublisher(toFlowable().retry(predicate));, +        return fromPublisher(toFlowable().retry(times));, +        return fromPublisher(toFlowable().retry(predicate));, +        return fromPublisher(toFlowable().retryWhen(handler));, +++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.internal.operators.completable.CompletableFromPublisher;, +import io.reactivex.internal.operators.observable.ObservableFromPublisher;, +import io.reactivex.internal.operators.single.SingleFromPublisher;, +        return new CompletableFromPublisher<T>(this);, +        return new ObservableFromPublisher<T>(this);, +        return new SingleFromPublisher<T>(this);, +++ b/src/main/java/io/reactivex/Observable.java, +import io.reactivex.internal.operators.completable.CompletableFromObservable;, +        return new CompletableFromObservable<T>(this);, +++ b/src/main/java/io/reactivex/Completable.java, +     * Returns a Completable instance that subscribes to the given publisher, ignores all values and, +     * @param <T> the type of the publisher, +     * @param publisher the Publisher instance to subscribe to, not null, +     * @throws NullPointerException if publisher is null, +    public static <T> Completable fromPublisher(final Publisher<T> publisher) {, +        Objects.requireNonNull(publisher, "publisher is null");, +        return new CompletableFromPublisher<T>(publisher);, +        return fromPublisher(toFlowable().repeat());, +        return fromPublisher(toFlowable().repeat(times));, +        return fromPublisher(toFlowable().repeatUntil(stop));, +        return fromPublisher(toFlowable().repeatWhen(handler));, +        return fromPublisher(toFlowable().retry());, +        return fromPublisher(toFlowable().retry(predicate));, +        return fromPublisher(toFlowable().retry(times));, +        return fromPublisher(toFlowable().retry(predicate));, +        return fromPublisher(toFlowable().retryWhen(handler));, +++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.internal.operators.completable.CompletableFromPublisher;, +import io.reactivex.internal.operators.observable.ObservableFromPublisher;, +import io.reactivex.internal.operators.single.SingleFromPublisher;, +        return new CompletableFromPublisher<T>(this);, +        return new ObservableFromPublisher<T>(this);, +        return new SingleFromPublisher<T>(this);, +++ b/src/main/java/io/reactivex/Observable.java, +import io.reactivex.internal.operators.completable.CompletableFromObservable;, +        return new CompletableFromObservable<T>(this);, +++ /dev/null, +++ b/src/main/java/io/reactivex/Completable.java, +     * Returns a Completable instance that subscribes to the given publisher, ignores all values and, +     * @param <T> the type of the publisher, +     * @param publisher the Publisher instance to subscribe to, not null]