[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Create an Observable which delays the events via another Observable on a per item-basis., +     * <p>, +     * Note: onError event is immediately propagated., +     * , +     * @param <U> the item delay value type (ignored), +     * @param itemDelay function that returns an Observable for each source item which is, +     *                  then used for delaying that particular item until the Observable, +     *                  fires its first onNext event., +     * @return an Observable which delays the events via another Observable on a per item-basis., +     */, +    public <U> Observable<T> delay(Func1<? super T, ? extends Observable<U>> itemDelay) {, +        return create(OperationDelay.delay(this, itemDelay));, +    }, +    /**, +     * Create an Observable which delays the subscription and events via another Observables on a per item-basis., +     * <p>, +     * Note: onError event is immediately propagated., +     * , +     * @param <U> the subscription delay value type (ignored), +     * @param <V> the item delay value type (ignored), +     * @param subscriptionDelay function that returns an Observable which will trigger, +     *                          the subscription to the source observable once it fires an, +     *                          onNext event., +     * @param itemDelay function that returns an Observable for each source item which is, +     *                  then used for delaying that particular item until the Observable, +     *                  fires its first onNext event., +     * @return an Observable which delays the events via another Observable on a per item-basis., +     */, +    public <U, V> Observable<T> delay(, +            Func0<? extends Observable<U>> subscriptionDelay,, +            Func1<? super T, ? extends Observable<V>> itemDelay) {, +        return create(OperationDelay.delay(this, subscriptionDelay, itemDelay));, +    }, +    , +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Create an Observable which delays the events via another Observable on a per item-basis., +     * <p>, +     * Note: onError event is immediately propagated., +     * , +     * @param <U> the item delay value type (ignored), +     * @param itemDelay function that returns an Observable for each source item which is, +     *                  then used for delaying that particular item until the Observable, +     *                  fires its first onNext event., +     * @return an Observable which delays the events via another Observable on a per item-basis., +     */, +    public <U> Observable<T> delay(Func1<? super T, ? extends Observable<U>> itemDelay) {, +        return create(OperationDelay.delay(this, itemDelay));, +    }, +    /**, +     * Create an Observable which delays the subscription and events via another Observables on a per item-basis., +     * <p>, +     * Note: onError event is immediately propagated., +     * , +     * @param <U> the subscription delay value type (ignored), +     * @param <V> the item delay value type (ignored), +     * @param subscriptionDelay function that returns an Observable which will trigger, +     *                          the subscription to the source observable once it fires an, +     *                          onNext event., +     * @param itemDelay function that returns an Observable for each source item which is, +     *                  then used for delaying that particular item until the Observable, +     *                  fires its first onNext event., +     * @return an Observable which delays the events via another Observable on a per item-basis., +     */, +    public <U, V> Observable<T> delay(, +            Func0<? extends Observable<U>> subscriptionDelay,, +            Func1<? super T, ? extends Observable<V>> itemDelay) {, +        return create(OperationDelay.delay(this, subscriptionDelay, itemDelay));, +    }, +    , +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationDelay.java, +import rx.subscriptions.CompositeSubscription;, +import rx.subscriptions.Subscriptions;, +import rx.util.functions.Func0;, +    /**, +     * Delay the emission of the source items by a per-item observable that fires its first element., +     */, +    public static <T, U> OnSubscribeFunc<T> delay(Observable<? extends T> source, , +            Func1<? super T, ? extends Observable<U>> itemDelay) {, +        return new DelayViaObservable<T, Object, U>(source, null, itemDelay);, +    }, +    /**, +     * Delay the subscription and emission of the source items by a per-item observable that fires its first element., +     */, +    public static <T, U, V> OnSubscribeFunc<T> delay(Observable<? extends T> source, , +            Func0<? extends Observable<U>> subscriptionDelay,, +            Func1<? super T, ? extends Observable<V>> itemDelay) {, +        return new DelayViaObservable<T, U, V>(source, subscriptionDelay, itemDelay);, +    }, +    /**, +     * Delay the emission of the source items by a per-item observable that fires its first element., +     */, +    private static final class DelayViaObservable<T, U, V> implements OnSubscribeFunc<T> {, +        final Observable<? extends T> source;, +        final Func0<? extends Observable<U>> subscriptionDelay;, +        final Func1<? super T, ? extends Observable<V>> itemDelay;, +, +        public DelayViaObservable(Observable<? extends T> source, ]