[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def dropExample() {, +    val o = List(1, 2, 3, 4).toObservable, +    assertEquals(List(3, 4), o.drop(2).toBlockingObservable.toList), +  }, +, +  @Test def dropWithTimeExample() {, +    val o = List(1, 2, 3, 4).toObservable.zip(, +      Observable.interval(500 millis, IOScheduler())).map(_._1) // emit every 500 millis, +    println(, +      o.drop(1250 millis, IOScheduler()).toBlockingObservable.toList // output List(3, 4), +    ), +  }, +, +  @Test def dropRightExample() {, +    val o = List(1, 2, 3, 4).toObservable, +    assertEquals(List(1, 2), o.dropRight(2).toBlockingObservable.toList), +  }, +, +  @Test def dropRightWithTimeExample() {, +    val o = List(1, 2, 3, 4).toObservable.zip(, +      Observable.interval(500 millis, IOScheduler())).map(_._1) // emit every 500 millis, +    println(, +      o.dropRight(750 millis, IOScheduler()).toBlockingObservable.toList // output List(1, 2), +    ), +  }, +, +    println(o.elementAt(2).toBlockingObservable.single), +, +  @Test def retryExample1(): Unit = {, +    val o : Observable[String] = List("alice", "bob", "carol").toObservable, +    assertEquals(List("alice", "bob", "carol"), o.retry.toBlockingObservable.toList), +  }, +, +  @Test def retryExample2(): Unit = {, +    val o : Observable[String] = List("alice", "bob", "carol").toObservable, +    assertEquals(List("alice", "bob", "carol"), o.retry(3).toBlockingObservable.toList), +  }, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def dropExample() {, +    val o = List(1, 2, 3, 4).toObservable, +    assertEquals(List(3, 4), o.drop(2).toBlockingObservable.toList), +  }, +, +  @Test def dropWithTimeExample() {, +    val o = List(1, 2, 3, 4).toObservable.zip(, +      Observable.interval(500 millis, IOScheduler())).map(_._1) // emit every 500 millis, +    println(, +      o.drop(1250 millis, IOScheduler()).toBlockingObservable.toList // output List(3, 4), +    ), +  }, +, +  @Test def dropRightExample() {, +    val o = List(1, 2, 3, 4).toObservable, +    assertEquals(List(1, 2), o.dropRight(2).toBlockingObservable.toList), +  }, +, +  @Test def dropRightWithTimeExample() {, +    val o = List(1, 2, 3, 4).toObservable.zip(, +      Observable.interval(500 millis, IOScheduler())).map(_._1) // emit every 500 millis, +    println(, +      o.dropRight(750 millis, IOScheduler()).toBlockingObservable.toList // output List(1, 2), +    ), +  }, +, +    println(o.elementAt(2).toBlockingObservable.single), +, +  @Test def retryExample1(): Unit = {, +    val o : Observable[String] = List("alice", "bob", "carol").toObservable, +    assertEquals(List("alice", "bob", "carol"), o.retry.toBlockingObservable.toList), +  }, +, +  @Test def retryExample2(): Unit = {, +    val o : Observable[String] = List("alice", "bob", "carol").toObservable, +    assertEquals(List("alice", "bob", "carol"), o.retry(3).toBlockingObservable.toList), +  }, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Returns an Observable that drops values emitted by the source Observable before a specified time window, +   * elapses., +   *, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/skip.t.png">, +   *, +   * @param time the length of the time window to drop, +   * @return an Observable that drops values emitted by the source Observable before the time window defined, +   *         by `time` elapses and emits the remainder, +   */, +  def drop(time: Duration): Observable[T] = {, +    toScalaObservable(asJavaObservable.skip(time.length, time.unit)), +  }, +, +  /**, +   * Returns an Observable that drops values emitted by the source Observable before a specified time window, +   * elapses., +   *, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/skip.t.png">, +   *, +   * @param time the length of the time window to drop, +   * @param scheduler the `Scheduler` on which the timed wait happens, +   * @return an Observable that drops values emitted by the source Observable before the time window defined, +   *         by `time` elapses and emits the remainder]