[+++ b/docs/Transforming-Observables.md, +This page shows operators with which you can transform items that are emitted by reactive sources, such as `Observable`s., +# Outline, +, +- [`buffer`](#buffer), +- [`cast`](#cast), +- [`concatMap`](#concatmap), +- [`concatMapCompletable`](#concatmapcompletable), +- [`concatMapCompletableDelayError`](#concatmapcompletabledelayerror), +- [`concatMapDelayError`](#concatmapdelayerror), +- [`concatMapEager`](#concatmapeager), +- [`concatMapEagerDelayError`](#concatmapeagerdelayerror), +- [`concatMapIterable`](#concatmapiterable), +- [`concatMapMaybe`](#concatmapmaybe), +- [`concatMapMaybeDelayError`](#concatmapmaybedelayerror), +- [`concatMapSingle`](#concatmapsingle), +- [`concatMapSingleDelayError`](#concatmapsingledelayerror), +- [`flatMap`](#flatmap), +- [`flatMapCompletable`](#flatmapcompletable), +- [`flatMapIterable`](#flatmapiterable), +- [`flatMapMaybe`](#flatmapmaybe), +- [`flatMapObservable`](#flatmapobservable), +- [`flatMapPublisher`](#flatmappublisher), +- [`flatMapSingle`](#flatmapsingle), +- [`flatMapSingleElement`](#flatmapsingleelement), +- [`flattenAsFlowable`](#flattenasflowable), +- [`flattenAsObservable`](#flattenasobservable), +- [`groupBy`](#groupby), +- [`map`](#map), +- [`scan`](#scan), +- [`switchMap`](#switchmap), +- [`window`](#window), +, +## buffer, +, +**Available in:** ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Flowable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Observable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Maybe`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Single`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Completable`, +, +**ReactiveX documentation:** [http://reactivex.io/documentation/operators/buffer.html](http://reactivex.io/documentation/operators/buffer.html), +, +Collects the items emitted by a reactive source into buffers, and emits these buffers., +, +### buffer example, +, +```java, +Observable.range(0, 10), +    .buffer(4), +    .subscribe((List<Integer> buffer) -> System.out.println(buffer));, +, +// prints:, +// [0, 1, 2, 3], +// [4, 5, 6, 7], +// [8, 9], +```, +, +## cast, +, +**Available in:** ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Flowable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Observable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Maybe`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Single`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Completable`, +, +**ReactiveX documentation:** [http://reactivex.io/documentation/operators/map.html](http://reactivex.io/documentation/operators/map.html), +, +Converts each item emitted by a reactive source to the specified type, and emits these items., +, +### cast example, +, +```java, +Observable<Number> numbers = Observable.just(1, 4.0, 3f, 7, 12, 4.6, 5);, +, +numbers.filter((Number x) -> Integer.class.isInstance(x)), +    .cast(Integer.class), +    .subscribe((Integer x) -> System.out.println(x));, +, +// prints:, +// 1, +// 7, +// 12, +// 5, +```, +, +## concatMap, +, +**Available in:** ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Flowable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Observable`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) `Maybe`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Single`, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) `Completable`, +, +**ReactiveX documentation:** [http://reactivex.io/documentation/operators/flatmap.html](http://reactivex.io/documentation/operators/flatmap.html), +, +Applies the given `io.reactivex.functions.Function` to each item emitted by a reactive source, where that function returns a reactive source, and emits the items that result from concatenating the results of these function applications., +, +### concatMap example, +, +```java, +Observable.range(0, 5), +    .concatMap(i -> {, +        long delay = Math.round(Math.random() * 2);, +, +        return Observable.timer(delay, TimeUnit.SECONDS).map(n -> i);, +    }), +    .blockingSubscribe(System.out::print);, +, +// prints 01234, +```, +]