[+++ b/src/main/java/io/reactivex/Observable.java, +    public static <T, R> Observable<R> combineLatest(Function<? super T[], ? extends R> combiner, boolean delayError, int bufferSize, ObservableConsumable<? extends T>... sources) {, +    public static <T, R> Observable<R> combineLatest(Iterable<? extends ObservableConsumable<? extends T>> sources, Function<? super T[], ? extends R> combiner) {, +    public static <T, R> Observable<R> combineLatest(Iterable<? extends ObservableConsumable<? extends T>> sources, Function<? super T[], ? extends R> combiner, boolean delayError) {, +    public static <T, R> Observable<R> combineLatest(Iterable<? extends ObservableConsumable<? extends T>> sources, Function<? super T[], ? extends R> combiner, boolean delayError, int bufferSize) {, +    public static <T, R> Observable<R> combineLatest(ObservableConsumable<? extends T>[] sources, Function<? super T[], ? extends R> combiner) {, +    public static <T, R> Observable<R> combineLatest(ObservableConsumable<? extends T>[] sources, Function<? super T[], ? extends R> combiner, boolean delayError) {, +    public static <T, R> Observable<R> combineLatest(ObservableConsumable<? extends T>[] sources, Function<? super T[], ? extends R> combiner, boolean delayError, int bufferSize) {, +    public static <T, R> Observable<R> zip(Iterable<? extends ObservableConsumable<? extends T>> sources, Function<? super T[], ? extends R> zipper) {, +    public static <T, R> Observable<R> zip(ObservableConsumable<? extends ObservableConsumable<? extends T>> sources, final Function<T[], R> zipper) {, +    public static <T, R> Observable<R> zipArray(Function<? super T[], ? extends R> zipper,, +    public static <T, R> Observable<R> zipIterable(Function<? super T[], ? extends R> zipper,, +++ b/src/main/java/io/reactivex/Observable.java, +    public static <T, R> Observable<R> combineLatest(Function<? super T[], ? extends R> combiner, boolean delayError, int bufferSize, ObservableConsumable<? extends T>... sources) {, +    public static <T, R> Observable<R> combineLatest(Iterable<? extends ObservableConsumable<? extends T>> sources, Function<? super T[], ? extends R> combiner) {, +    public static <T, R> Observable<R> combineLatest(Iterable<? extends ObservableConsumable<? extends T>> sources, Function<? super T[], ? extends R> combiner, boolean delayError) {, +    public static <T, R> Observable<R> combineLatest(Iterable<? extends ObservableConsumable<? extends T>> sources, Function<? super T[], ? extends R> combiner, boolean delayError, int bufferSize) {, +    public static <T, R> Observable<R> combineLatest(ObservableConsumable<? extends T>[] sources, Function<? super T[], ? extends R> combiner) {, +    public static <T, R> Observable<R> combineLatest(ObservableConsumable<? extends T>[] sources, Function<? super T[], ? extends R> combiner, boolean delayError) {, +    public static <T, R> Observable<R> combineLatest(ObservableConsumable<? extends T>[] sources, Function<? super T[], ? extends R> combiner, boolean delayError, int bufferSize) {, +    public static <T, R> Observable<R> zip(Iterable<? extends ObservableConsumable<? extends T>> sources, Function<? super T[], ? extends R> zipper) {, +    public static <T, R> Observable<R> zip(ObservableConsumable<? extends ObservableConsumable<? extends T>> sources, final Function<T[], R> zipper) {, +    public static <T, R> Observable<R> zipArray(Function<? super T[], ? extends R> zipper,, +    public static <T, R> Observable<R> zipIterable(Function<? super T[], ? extends R> zipper,, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableCombineLatest.java, +    final Function<? super T[], ? extends R> combiner;, +            Function<? super T[], ? extends R> combiner, int bufferSize,, +        final Function<? super T[], ? extends R> combiner;, +        final T[] latest;, +                Function<? super T[], ? extends R> combiner,, +            this.latest = (T[])new Object[count];, +                T o = latest[index];, +, +                    @SuppressWarnings("unchecked"), +                    T[] array = (T[])q.poll();, +++ b/src/main/java/io/reactivex/Observable.java, +    public static <T, R> Observable<R> combineLatest(Function<? super T[], ? extends R> combiner, boolean delayError, int bufferSize, ObservableConsumable<? extends T>... sources) {, +    public static <T, R> Observable<R> combineLatest(Iterable<? extends ObservableConsumable<? extends T>> sources, Function<? super T[], ? extends R> combiner) {, +    public static <T, R> Observable<R> combineLatest(Iterable<? extends ObservableConsumable<? extends T>> sources, Function<? super T[], ? extends R> combiner, boolean delayError) {, +    public static <T, R> Observable<R> combineLatest(Iterable<? extends ObservableConsumable<? extends T>> sources, Function<? super T[], ? extends R> combiner, boolean delayError, int bufferSize) {, +    public static <T, R> Observable<R> combineLatest(ObservableConsumable<? extends T>[] sources, Function<? super T[], ? extends R> combiner) {, +    public static <T, R> Observable<R> combineLatest(ObservableConsumable<? extends T>[] sources, Function<? super T[], ? extends R> combiner, boolean delayError) {, +    public static <T, R> Observable<R> combineLatest(ObservableConsumable<? extends T>[] sources, Function<? super T[], ? extends R> combiner, boolean delayError, int bufferSize) {, +    public static <T, R> Observable<R> zip(Iterable<? extends ObservableConsumable<? extends T>> sources, Function<? super T[], ? extends R> zipper) {, +    public static <T, R> Observable<R> zip(ObservableConsumable<? extends ObservableConsumable<? extends T>> sources, final Function<T[], R> zipper) {, +    public static <T, R> Observable<R> zipArray(Function<? super T[], ? extends R> zipper,, +    public static <T, R> Observable<R> zipIterable(Function<? super T[], ? extends R> zipper,, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableCombineLatest.java, +    final Function<? super T[], ? extends R> combiner;, +            Function<? super T[], ? extends R> combiner, int bufferSize,, +        final Function<? super T[], ? extends R> combiner;, +        final T[] latest;, +                Function<? super T[], ? extends R> combiner,, +            this.latest = (T[])new Object[count];, +                T o = latest[index];, +, +                    @SuppressWarnings("unchecked"), +                    T[] array = (T[])q.poll();, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableZip.java, +    final Function<? super T[], ? extends R> zipper;, +            Function<? super T[], ? extends R> zipper,, +        final Function<? super T[], ? extends R> zipper;, +        final T[] row;, +                Function<? super T[], ? extends R> zipper,, +            this.row = (T[])new Object[count];, +            final T[] os = row;]