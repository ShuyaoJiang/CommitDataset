[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a buffer., +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a buffer., +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a buffer., +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a window., +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a window., +   *            The [[rx.lang.scala.Scheduler]] to use when determining the end and start of a window., +   * Asynchronously subscribes and unsubscribes Observers on the specified [[rx.lang.scala.Scheduler]]., +   *            the [[rx.lang.scala.Scheduler]] to perform subscription and unsubscription actions on, +   *         on the specified [[rx.lang.scala.Scheduler]], +   * Asynchronously notify [[rx.lang.scala.Observer]]s on the specified [[rx.lang.scala.Scheduler]]., +   *            the [[rx.lang.scala.Scheduler]] to notify [[rx.lang.scala.Observer]]s on, +   *         specified [[rx.lang.scala.Scheduler]], +   *            the [[rx.lang.scala.Scheduler]] to use when sampling, +   *            The [[rx.lang.scala.Scheduler]] to use internally to manage the timers which handle timeout for each event., +   *            The [[rx.lang.scala.Scheduler]] to use internally to manage the timers which handle timeout for each event., +   *            The [[rx.lang.scala.Scheduler]] to use internally to manage the timers which handle timeout for each event., +   * [[rx.lang.scala.Scheduler]] and return an `Observable[R]` with the output., +   * @return an Observable with the output of the function executed on a [[rx.lang.scala.Scheduler]], +   * Perform work in parallel by sharding an `Observable[T]` on a [[rx.lang.scala.Scheduler]] and return an `Observable[R]` with the output., +   *            a [[rx.lang.scala.Scheduler]] to perform the work on., +   * @return an Observable with the output of the function executed on a [[rx.lang.scala.Scheduler]]]