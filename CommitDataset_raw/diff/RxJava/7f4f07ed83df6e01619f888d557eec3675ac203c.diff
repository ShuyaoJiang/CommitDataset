[+++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/core.clj, +(defn merge*, +  "Merge an Observable of Observables into a single Observable, +  See:, +    merge, +    merge-delay-error*, +    rx.Observable/merge, +  [^Observable xs], +  (Observable/merge xs)), +, +(defn ^Observable merge, +  "Merge one or more Observables into a single observable., +, +  If you want clojure.core/merge, it's just this:, +, +    (rx/reduce clojure.core/merge {} maps), +, +  See:, +    merge*, +    merge-delay-error, +    rx.Observable/merge, +  ", +  [& os], +  (merge* (seq->o os))), +, +(defn ^Observable merge-delay-error*, +  "Same as merge*, but all values are emitted before errors are propagated", +  [^Observable xs], +  (Observable/mergeDelayError xs)), +  "Same as merge, but all values are emitted before errors are propagated", +  [& os], +  (merge-delay-error* (seq->o os))), +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/core.clj, +(defn merge*, +  "Merge an Observable of Observables into a single Observable, +  See:, +    merge, +    merge-delay-error*, +    rx.Observable/merge, +  [^Observable xs], +  (Observable/merge xs)), +, +(defn ^Observable merge, +  "Merge one or more Observables into a single observable., +, +  If you want clojure.core/merge, it's just this:, +, +    (rx/reduce clojure.core/merge {} maps), +, +  See:, +    merge*, +    merge-delay-error, +    rx.Observable/merge, +  ", +  [& os], +  (merge* (seq->o os))), +, +(defn ^Observable merge-delay-error*, +  "Same as merge*, but all values are emitted before errors are propagated", +  [^Observable xs], +  (Observable/mergeDelayError xs)), +  "Same as merge, but all values are emitted before errors are propagated", +  [& os], +  (merge-delay-error* (seq->o os))), +++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/core_test.clj, +(let [expected-result [[1 3 5] [2 4 6]], +      sleepy-o        #(f/future-generator f/default-runner [o], +                                           (doseq [x %], +      make-inputs (fn [] (mapv sleepy-o expected-result)), +      make-output (fn [r] [(keep #{1 3 5} r), +                           (keep #{2 4 6} r)])], +  (deftest test-merge*, +    (is (= expected-result, +           (->> (make-inputs), +                (rx/seq->o), +                (rx/merge*), +                (b/into []), +                (make-output))))), +  (deftest test-merge, +    (is (= expected-result, +           (->> (make-inputs), +                (apply rx/merge), +                (b/into []), +                (make-output))))), +  (deftest test-merge-delay-error*, +    (is (= expected-result, +           (->> (make-inputs), +                (rx/seq->o), +                (rx/merge-delay-error*), +                (b/into []), +                (make-output))))), +  (deftest test-merge-delay-error, +    (is (= expected-result, +           (->> (make-inputs), +                (apply rx/merge-delay-error), +                (b/into []), +                (make-output))))))]