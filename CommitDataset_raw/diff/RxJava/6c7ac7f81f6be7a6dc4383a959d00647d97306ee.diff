[+++ b/rxjava-contrib/rxjava-quasar/src/main/java/rx/quasar/ChannelObservable.java, +import rx.util.OnErrorNotImplementedException;, +                throw new OnErrorNotImplementedException(e);, +++ b/rxjava-contrib/rxjava-quasar/src/main/java/rx/quasar/ChannelObservable.java, +import rx.util.OnErrorNotImplementedException;, +                throw new OnErrorNotImplementedException(e);, +++ b/rxjava-contrib/rxjava-quasar/src/main/resources/META-INF/suspendables, +rx.Observable.subscribe, +rx.observers.SafeSubscriber.onNext, +++ b/rxjava-contrib/rxjava-quasar/src/main/java/rx/quasar/ChannelObservable.java, +import rx.util.OnErrorNotImplementedException;, +                throw new OnErrorNotImplementedException(e);, +++ b/rxjava-contrib/rxjava-quasar/src/main/resources/META-INF/suspendables, +rx.Observable.subscribe, +rx.observers.SafeSubscriber.onNext, +++ b/rxjava-contrib/rxjava-quasar/src/test/java/rx/quasar/ChannelObservableTest.java, +import rx.Observable;, +        final Channel<String> c = Channels.newChannel(0);, +, +        System.out.println("===== " + c);, +        ChannelObservable.from(c, NewFiberScheduler.getDefaultInstance()).subscribe(new Observer<String>() {, +                try {, +                    Strand.sleep(100);, +                } catch (InterruptedException e) {, +                } catch (SuspendExecution e) {, +                    throw new AssertionError(e);, +                }, +, +    @Test, +    public void testObserverChannel() throws Exception {, +        final Channel<String> c = Channels.newChannel(10); // must use a buffer, otherwise will block on subscribe, +, +        System.out.println("===== " + c);, +, +        Observable.from(Arrays.asList("a", "b", "c")).subscribe(ChannelObservable.to(c));, +, +        assertThat(c.receive(), equalTo("a"));, +        assertThat(c.receive(), equalTo("b"));, +        assertThat(c.receive(), equalTo("c"));, +        assertThat(c.receive(), is(nullValue()));, +    }]