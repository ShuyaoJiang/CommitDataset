[+++ b/src/jmh/java/io/reactivex/MemoryPerf.java, +        org.reactivestreams.Subscription upstream;, +            this.upstream = s;, +        Disposable upstream;, +        public void onSubscribe(Disposable d) {, +            this.upstream = d;, +++ b/src/jmh/java/io/reactivex/MemoryPerf.java, +        org.reactivestreams.Subscription upstream;, +            this.upstream = s;, +        Disposable upstream;, +        public void onSubscribe(Disposable d) {, +            this.upstream = d;, +++ b/src/main/java/io/reactivex/Completable.java, +     *     public void onSubscribe(Disposable d) {, +     *             d.dispose();, +     *             upstream = d;, +++ b/src/jmh/java/io/reactivex/MemoryPerf.java, +        org.reactivestreams.Subscription upstream;, +            this.upstream = s;, +        Disposable upstream;, +        public void onSubscribe(Disposable d) {, +            this.upstream = d;, +++ b/src/main/java/io/reactivex/Completable.java, +     *     public void onSubscribe(Disposable d) {, +     *             d.dispose();, +     *             upstream = d;, +++ b/src/main/java/io/reactivex/CompletableEmitter.java, +     * Sets a Disposable on this emitter; any previous {@link Disposable}, +     * or {@link Cancellable} will be disposed/cancelled., +     * Sets a Cancellable on this emitter; any previous {@link Disposable}, +     * or {@link Cancellable} will be disposed/cancelled., +++ b/src/jmh/java/io/reactivex/MemoryPerf.java, +        org.reactivestreams.Subscription upstream;, +            this.upstream = s;, +        Disposable upstream;, +        public void onSubscribe(Disposable d) {, +            this.upstream = d;, +++ b/src/main/java/io/reactivex/Completable.java, +     *     public void onSubscribe(Disposable d) {, +     *             d.dispose();, +     *             upstream = d;, +++ b/src/main/java/io/reactivex/CompletableEmitter.java, +     * Sets a Disposable on this emitter; any previous {@link Disposable}, +     * or {@link Cancellable} will be disposed/cancelled., +     * Sets a Cancellable on this emitter; any previous {@link Disposable}, +     * or {@link Cancellable} will be disposed/cancelled., +++ b/src/main/java/io/reactivex/CompletableSource.java, +     * @param co the CompletableObserver, not null, +     * @throws NullPointerException if {@code co} is null, +    void subscribe(@NonNull CompletableObserver co);, +++ b/src/jmh/java/io/reactivex/MemoryPerf.java, +        org.reactivestreams.Subscription upstream;, +            this.upstream = s;, +        Disposable upstream;, +        public void onSubscribe(Disposable d) {, +            this.upstream = d;, +++ b/src/main/java/io/reactivex/Completable.java, +     *     public void onSubscribe(Disposable d) {, +     *             d.dispose();, +     *             upstream = d;, +++ b/src/main/java/io/reactivex/CompletableEmitter.java, +     * Sets a Disposable on this emitter; any previous {@link Disposable}, +     * or {@link Cancellable} will be disposed/cancelled., +     * Sets a Cancellable on this emitter; any previous {@link Disposable}, +     * or {@link Cancellable} will be disposed/cancelled., +++ b/src/main/java/io/reactivex/CompletableSource.java, +     * @param co the CompletableObserver, not null, +     * @throws NullPointerException if {@code co} is null, +    void subscribe(@NonNull CompletableObserver co);, +++ b/src/main/java/io/reactivex/Flowable.java, +     *     // Note that relaying the upstream's Subscription instance directly is not allowed in RxJava, +++ b/src/jmh/java/io/reactivex/MemoryPerf.java, +        org.reactivestreams.Subscription upstream;, +            this.upstream = s;, +        Disposable upstream;, +        public void onSubscribe(Disposable d) {, +            this.upstream = d;, +++ b/src/main/java/io/reactivex/Completable.java, +     *     public void onSubscribe(Disposable d) {, +     *             d.dispose();, +     *             upstream = d;, +++ b/src/main/java/io/reactivex/CompletableEmitter.java, +     * Sets a Disposable on this emitter; any previous {@link Disposable}, +     * or {@link Cancellable} will be disposed/cancelled., +     * Sets a Cancellable on this emitter; any previous {@link Disposable}, +     * or {@link Cancellable} will be disposed/cancelled., +++ b/src/main/java/io/reactivex/CompletableSource.java, +     * @param co the CompletableObserver, not null, +     * @throws NullPointerException if {@code co} is null, +    void subscribe(@NonNull CompletableObserver co);, +++ b/src/main/java/io/reactivex/Flowable.java, +     *     // Note that relaying the upstream's Subscription instance directly is not allowed in RxJava, +++ b/src/main/java/io/reactivex/FlowableEmitter.java, +     * Sets a Disposable on this emitter; any previous {@link Disposable}, +     * or {@link Cancellable} will be disposed/cancelled., +     * @param d the disposable, null is allowed, +    void setDisposable(@Nullable Disposable d);, +     * Sets a Cancellable on this emitter; any previous {@link Disposable}, +     * or {@link Cancellable} will be disposed/cancelled., +++ b/src/jmh/java/io/reactivex/MemoryPerf.java]