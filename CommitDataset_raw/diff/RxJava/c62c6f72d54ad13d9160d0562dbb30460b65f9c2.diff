[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +        Observable.timer(Duration(i, TimeUnit.SECONDS)), +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +        Observable.timer(Duration(i, TimeUnit.SECONDS)), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * {@code onError}. An {@code onError} notification from the source will result in the emission of a, +   * {@link Notification} to the Observable provided as an argument to the {@code notificationHandler}, +   * function. If the Observable returned {@code onCompletes} or {@code onErrors} then {@code retry} will call, +   * {@code onCompleted} or {@code onError} on the child subscription. Otherwise, this Observable will, +   * <pre> {@code, +   * } </pre>, +   * <pre> {@code, +   * } </pre>, +   *  <dd>{@code retryWhen} operates by default on the {@code trampoline} {@link Scheduler}.</dd>, +   * Returns an Observable that emits the same values as the source observable with the exception of an {@code onError}., +   * An onError will emit a {@link Notification} to the observable provided as an argument to the notificationHandler, +   * func. If the observable returned {@code onCompletes} or {@code onErrors} then retry will call {@code onCompleted}, +   * or {@code onError} on the child subscription. Otherwise, this observable will resubscribe to the source observable, on a particular Scheduler., +   *  <dd>you specify which {@link Scheduler} this operator will use</dd>, +  def retryWhen(notificationHandler: Observable[Notification[Any]] => Observable[Any], scheduler: Scheduler): Observable[T] = {, +    val f: Func1[_ >: rx.Observable[_ <: rx.Notification[_ <: Any]], _ <: rx.Observable[_ <: Any]] =, +        notificationHandler(on).asJavaObservable, +   * {@code onCompleted}. An {@code onCompleted} notification from the source will result in the emission of, +   * a {@link Notification} to the Observable provided as an argument to the {@code notificationHandler}, +   * function. If the Observable returned {@code onCompletes} or {@code onErrors} then {@code repeatWhen} will, +   * call {@code onCompleted} or {@code onError} on the child subscription. Otherwise, this Observable will, +   *  <dd>you specify which {@link Scheduler} this operator will use</dd>, +  def repeatWhen(notificationHandler: Observable[Notification[Any]] => Observable[Any], scheduler: Scheduler): Observable[T] = {, +    val f: Func1[_ >: rx.Observable[_ <: rx.Notification[_ <: Any]], _ <: rx.Observable[_ <: Any]] =, +        notificationHandler(on).asJavaObservable, +   * {@code onCompleted}. An {@code onCompleted} notification from the source will result in the emission of, +   * a {@link Notification} to the Observable provided as an argument to the {@code notificationHandler}, +   * function. If the Observable returned {@code onCompletes} or {@code onErrors} then {@code repeatWhen} will, +   * call {@code onCompleted} or {@code onError} on the child subscription. Otherwise, this Observable will, +   *  <dd>{@code repeatWhen} operates by default on the {@code trampoline} {@link Scheduler}.</dd>, +  def repeatWhen(notificationHandler: Observable[Notification[Any]] => Observable[Any]): Observable[T] = {, +    val f: Func1[_ >: rx.Observable[_ <: rx.Notification[_ <: Any]], _ <: rx.Observable[_ <: Any]] =]