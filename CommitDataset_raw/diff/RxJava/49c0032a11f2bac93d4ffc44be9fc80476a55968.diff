[+++ b/src/main/java/rx/internal/operators/OnSubscribeRedo.java, +            return ts.map(new Func1<Notification<?>, Notification<?>>() {, +                int num=0;, +                , +                public Notification<?> call(Notification<?> terminalNotification) {, +                    if(count == 0) {, +                        return terminalNotification;, +                    , +                    num++;, +                    if(num <= count) {, +                        return Notification.createOnNext(num);, +                    } else {, +                        return terminalNotification;, +                    }, +                }, +                , +        if(count == 0) {, +            return Observable.empty();, +        }, +++ b/src/main/java/rx/internal/operators/OnSubscribeRedo.java, +            return ts.map(new Func1<Notification<?>, Notification<?>>() {, +                int num=0;, +                , +                public Notification<?> call(Notification<?> terminalNotification) {, +                    if(count == 0) {, +                        return terminalNotification;, +                    , +                    num++;, +                    if(num <= count) {, +                        return Notification.createOnNext(num);, +                    } else {, +                        return terminalNotification;, +                    }, +                }, +                , +        if(count == 0) {, +            return Observable.empty();, +        }, +++ b/src/main/java/rx/internal/operators/OperatorScan.java, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import rx.Producer;, +    public Subscriber<? super T> call(final Subscriber<? super R> child) {, +        return new Subscriber<T>(child) {, +            boolean initialized = false;, +            public void onNext(T currentValue) {, +                emitInitialValueIfNeeded(child);, +, +                    this.value = (R) currentValue;, +                        this.value = accumulator.call(this.value, currentValue);, +                        child.onError(OnErrorThrowable.addValueAsLastCause(e, currentValue));, +                child.onNext(this.value);, +                child.onError(e);, +                emitInitialValueIfNeeded(child);, +                child.onCompleted();, +            }, +            , +            private void emitInitialValueIfNeeded(final Subscriber<? super R> child) {, +                if (!initialized) {, +                    initialized = true;, +                    // we emit first time through if we have an initial value, +                    if (initialValue != NO_INITIAL_VALUE) {, +                        child.onNext(initialValue);, +                    }, +                }, +            }, +            , +            /**, +             * We want to adjust the requested value by subtracting 1 if we have an initial value, +             */, +            @Override, +            public void setProducer(final Producer producer) {, +                child.setProducer(new Producer() {, +, +                    final AtomicBoolean once = new AtomicBoolean();, +, +                    @Override, +                    public void request(long n) {, +                        if (once.compareAndSet(false, true)) {, +                            if (initialValue == NO_INITIAL_VALUE) {, +                                producer.request(n);, +                            } else {, +                                producer.request(n - 1);, +                            }, +                        } else {, +                            // pass-thru after first time, +                            producer.request(n);, +                        }, +                    }, +                });, +++ b/src/main/java/rx/internal/operators/OnSubscribeRedo.java, +            return ts.map(new Func1<Notification<?>, Notification<?>>() {, +                int num=0;, +                , +                public Notification<?> call(Notification<?> terminalNotification) {, +                    if(count == 0) {, +                        return terminalNotification;, +                    , +                    num++;, +                    if(num <= count) {]