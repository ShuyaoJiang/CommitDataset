[+++ b/DESIGN.md, +This document explains the terminology, principles, contracts, and other aspects of the design of RxJava v2., +Its intended audience is the implementers of the library., +##### Interactive, +, +Producer obeys consumer-driven flow control., +Consumer manages capacity by requesting data., +, +, +##### Reactive, +, +Producer is in charge. Consumer has to do whatever it needs to keep up., +, +, +, +, +##### Reactive/Push, +Examples:, +, +- `Observable` (RxJS, Rx.Net, RxJava v1.x without backpressure, RxJava v2), +- Callbacks (the producer calls the function at its convenience), +- IRQ, mouse events, IO interrupts, +- 2.x `Flowable` (with `request(n)` credit always granted faster or in larger quantity than producer), +- Reactive Streams `Publisher` (with `request(n)` credit always granted faster or in larger quantity than producer), +- Java 9 `Flow.Publisher` (with `request(n)` credit always granted faster than or in larger quantity producer), +, +, +##### Synchronous Interactive/Pull, +Examples:, +- `Iterable`, +- 2.x/1.x `Observable` (without concurrency, producer and consumer on the same thread), +- 2.x `Flowable` (without concurrency, producer and consumer on the same thread), +- Reactive Streams `Publisher` (without concurrency, producer and consumer on the same thread), +- Java 9 `Flow.Publisher` (without concurrency, producer and consumer on the same thread), +##### Async Pull (Async Interactive), +Consumer requests data when it wishes, and the data is then pushed when the producer wishes to. , +Examples:, +, +- `Future` & `Promise`, +- `Single` (lazy `Future`), +- 2.x `Flowable`, +- Reactive Streams `Publisher`, +- Java 9 `Flow.Publisher`, +- 1.x `Observable` (with backpressure), +- `AsyncEnumerable`/`AsyncIterable`, +, +There is an overhead (performance and mental) for achieving this, which is why we also have the 2.x `Observable` without backpressure., +, +, +##### Flow Control, +, +Flow control is any mitigation strategies that a consumer applies to reduce the flow of data., +, +Examples:, +, +- Controlling the production of data, such as with `Iterator.next` or `Subscription.request(n)`, +- Preventing the delivery of data, such as buffer, drop, sample/throttle, and debounce., +, +, +##### Eager, +, +Containing object immediately start work when it is created., +, +Examples: , +, +- A `Future` once created has work being performed and represents the eventual value of that work. It can not be deferred once created., +, +, +##### Lazy, +, +Containing object does nothing until it is subscribed to or otherwise started., +, +Examples:, +, +- `Observable.create` does not start any work until `Observable.subscribe` starts the work., +, +Stream that supports async and synchronous push. It does *not* support interactive flow control (`request(n)`)., +*Type Signature*, +, +```java, +class Observable<T> {, +  void subscribe(Observer<T> observer);, +, +  interface Observer<T> {, +    void onNext(T t);, +    void onError(Throwable t);, +    void onComplete();, +    void onSubscribe(Disposable d);, +  }, +}, +```, +, +The rule for using this type signature is:, +, +> onSubscribe onNext* (onError | onComplete)?, +, +, +- pull sources, +- push Observables with backpressure strategy (ie. `Observable.toFlowable(onBackpressureStrategy)`), +	- for push-based sources, this allows backpressure signals to conditionally apply strategies (i.e. drop, first, buffer, sample, fail, etc)]