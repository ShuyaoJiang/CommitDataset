[+++ b/src/main/java/rx/Observable.java, +        return observables.lift(new OperatorConcat<T>());, +        return source.lift(new OperatorMerge<T>());, +        return source.lift(new OperatorMergeDelayError<T>());, +        return sequenceOfSequences.lift(new OperatorSwitch<T>());, +        return lift(new OperatorAsObservable<T>());, +    @SuppressWarnings({"unchecked", "rawtypes"}), +        return lift(new OperatorDematerialize());, +        return lift(new OperatorMaterialize<T>());, +        return lift(new OperatorOnBackpressureDrop<T>());, +        return lift(new OperatorSerialize<T>());, +        return lift(new OperatorToObservableList<T>());, +++ b/src/main/java/rx/Observable.java, +        return observables.lift(new OperatorConcat<T>());, +        return source.lift(new OperatorMerge<T>());, +        return source.lift(new OperatorMergeDelayError<T>());, +        return sequenceOfSequences.lift(new OperatorSwitch<T>());, +        return lift(new OperatorAsObservable<T>());, +    @SuppressWarnings({"unchecked", "rawtypes"}), +        return lift(new OperatorDematerialize());, +        return lift(new OperatorMaterialize<T>());, +        return lift(new OperatorOnBackpressureDrop<T>());, +        return lift(new OperatorSerialize<T>());, +        return lift(new OperatorToObservableList<T>());, +++ b/src/main/java/rx/internal/operators/BlockingOperatorLatest.java, +++ b/src/main/java/rx/Observable.java, +        return observables.lift(new OperatorConcat<T>());, +        return source.lift(new OperatorMerge<T>());, +        return source.lift(new OperatorMergeDelayError<T>());, +        return sequenceOfSequences.lift(new OperatorSwitch<T>());, +        return lift(new OperatorAsObservable<T>());, +    @SuppressWarnings({"unchecked", "rawtypes"}), +        return lift(new OperatorDematerialize());, +        return lift(new OperatorMaterialize<T>());, +        return lift(new OperatorOnBackpressureDrop<T>());, +        return lift(new OperatorSerialize<T>());, +        return lift(new OperatorToObservableList<T>());, +++ b/src/main/java/rx/internal/operators/BlockingOperatorLatest.java, +++ b/src/main/java/rx/internal/operators/BlockingOperatorNext.java, +++ b/src/main/java/rx/Observable.java, +        return observables.lift(new OperatorConcat<T>());, +        return source.lift(new OperatorMerge<T>());, +        return source.lift(new OperatorMergeDelayError<T>());, +        return sequenceOfSequences.lift(new OperatorSwitch<T>());, +        return lift(new OperatorAsObservable<T>());, +    @SuppressWarnings({"unchecked", "rawtypes"}), +        return lift(new OperatorDematerialize());, +        return lift(new OperatorMaterialize<T>());, +        return lift(new OperatorOnBackpressureDrop<T>());, +        return lift(new OperatorSerialize<T>());, +        return lift(new OperatorToObservableList<T>());, +++ b/src/main/java/rx/internal/operators/BlockingOperatorLatest.java, +++ b/src/main/java/rx/internal/operators/BlockingOperatorNext.java, +++ b/src/main/java/rx/internal/operators/BlockingOperatorToIterator.java, +        source.materialize().subscribe(new Subscriber<Notification<? extends T>>() {, +++ b/src/main/java/rx/Observable.java, +        return observables.lift(new OperatorConcat<T>());, +        return source.lift(new OperatorMerge<T>());, +        return source.lift(new OperatorMergeDelayError<T>());, +        return sequenceOfSequences.lift(new OperatorSwitch<T>());, +        return lift(new OperatorAsObservable<T>());, +    @SuppressWarnings({"unchecked", "rawtypes"}), +        return lift(new OperatorDematerialize());, +        return lift(new OperatorMaterialize<T>());, +        return lift(new OperatorOnBackpressureDrop<T>());, +        return lift(new OperatorSerialize<T>());, +        return lift(new OperatorToObservableList<T>());, +++ b/src/main/java/rx/internal/operators/BlockingOperatorLatest.java, +++ b/src/main/java/rx/internal/operators/BlockingOperatorNext.java, +++ b/src/main/java/rx/internal/operators/BlockingOperatorToIterator.java, +        source.materialize().subscribe(new Subscriber<Notification<? extends T>>() {, +++ b/src/main/java/rx/internal/operators/OnSubscribeCache.java, +            source.unsafeSubscribe(Subscribers.from(cache));, +             * Note that we will never unsubscribe from 'source' as we want to receive and cache all of its values., +++ b/src/main/java/rx/Observable.java, +        return observables.lift(new OperatorConcat<T>());, +        return source.lift(new OperatorMerge<T>());, +        return source.lift(new OperatorMergeDelayError<T>());, +        return sequenceOfSequences.lift(new OperatorSwitch<T>());, +        return lift(new OperatorAsObservable<T>());, +    @SuppressWarnings({"unchecked", "rawtypes"}), +        return lift(new OperatorDematerialize());, +        return lift(new OperatorMaterialize<T>());, +        return lift(new OperatorOnBackpressureDrop<T>());, +        return lift(new OperatorSerialize<T>());, +        return lift(new OperatorToObservableList<T>());, +++ b/src/main/java/rx/internal/operators/BlockingOperatorLatest.java, +++ b/src/main/java/rx/internal/operators/BlockingOperatorNext.java, +++ b/src/main/java/rx/internal/operators/BlockingOperatorToIterator.java, +        source.materialize().subscribe(new Subscriber<Notification<? extends T>>() {, +++ b/src/main/java/rx/internal/operators/OnSubscribeCache.java, +            source.unsafeSubscribe(Subscribers.from(cache));, +             * Note that we will never unsubscribe from 'source' as we want to receive and cache all of its values., +++ b/src/main/java/rx/internal/operators/OperatorAsObservable.java, +, +++ b/src/main/java/rx/Observable.java, +        return observables.lift(new OperatorConcat<T>());, +        return source.lift(new OperatorMerge<T>());, +        return source.lift(new OperatorMergeDelayError<T>());, +        return sequenceOfSequences.lift(new OperatorSwitch<T>());]