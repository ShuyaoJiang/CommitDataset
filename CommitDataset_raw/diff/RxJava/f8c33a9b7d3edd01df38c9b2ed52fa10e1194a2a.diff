[+++ b/src/main/java/io/reactivex/Flowable.java, +        FlowableBlockingSubscribe.subscribe(this, onNext, Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION);, +        return forEachWhile(onNext, Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION);, +        return subscribe(Functions.emptyConsumer(), Functions.ERROR_CONSUMER,, +        return subscribe(onNext, Functions.ERROR_CONSUMER,, +++ b/src/main/java/io/reactivex/Flowable.java, +        FlowableBlockingSubscribe.subscribe(this, onNext, Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION);, +        return forEachWhile(onNext, Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION);, +        return subscribe(Functions.emptyConsumer(), Functions.ERROR_CONSUMER,, +        return subscribe(onNext, Functions.ERROR_CONSUMER,, +++ b/src/main/java/io/reactivex/Observable.java, +        ObservableBlockingSubscribe.subscribe(this, onNext, Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION);, +        return forEachWhile(onNext, Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION);, +        return subscribe(Functions.emptyConsumer(), Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION, Functions.emptyConsumer());, +        return subscribe(onNext, Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION, Functions.emptyConsumer());, +++ b/src/main/java/io/reactivex/Flowable.java, +        FlowableBlockingSubscribe.subscribe(this, onNext, Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION);, +        return forEachWhile(onNext, Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION);, +        return subscribe(Functions.emptyConsumer(), Functions.ERROR_CONSUMER,, +        return subscribe(onNext, Functions.ERROR_CONSUMER,, +++ b/src/main/java/io/reactivex/Observable.java, +        ObservableBlockingSubscribe.subscribe(this, onNext, Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION);, +        return forEachWhile(onNext, Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION);, +        return subscribe(Functions.emptyConsumer(), Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION, Functions.emptyConsumer());, +        return subscribe(onNext, Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION, Functions.emptyConsumer());, +++ b/src/main/java/io/reactivex/Single.java, +        return subscribe(Functions.emptyConsumer(), Functions.ERROR_CONSUMER);, +        return subscribe(onSuccess, Functions.ERROR_CONSUMER);, +++ b/src/main/java/io/reactivex/Flowable.java, +        FlowableBlockingSubscribe.subscribe(this, onNext, Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION);, +        return forEachWhile(onNext, Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION);, +        return subscribe(Functions.emptyConsumer(), Functions.ERROR_CONSUMER,, +        return subscribe(onNext, Functions.ERROR_CONSUMER,, +++ b/src/main/java/io/reactivex/Observable.java, +        ObservableBlockingSubscribe.subscribe(this, onNext, Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION);, +        return forEachWhile(onNext, Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION);, +        return subscribe(Functions.emptyConsumer(), Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION, Functions.emptyConsumer());, +        return subscribe(onNext, Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION, Functions.emptyConsumer());, +++ b/src/main/java/io/reactivex/Single.java, +        return subscribe(Functions.emptyConsumer(), Functions.ERROR_CONSUMER);, +        return subscribe(onSuccess, Functions.ERROR_CONSUMER);, +++ b/src/main/java/io/reactivex/internal/functions/Functions.java, +import io.reactivex.plugins.RxJavaPlugins;, +    public static final Consumer<Throwable> ERROR_CONSUMER = new Consumer<Throwable>() {, +        @Override, +        public void accept(Throwable error) {, +            RxJavaPlugins.onError(error);, +        }, +    };, +, +++ b/src/main/java/io/reactivex/Flowable.java, +        FlowableBlockingSubscribe.subscribe(this, onNext, Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION);, +        return forEachWhile(onNext, Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION);, +        return subscribe(Functions.emptyConsumer(), Functions.ERROR_CONSUMER,, +        return subscribe(onNext, Functions.ERROR_CONSUMER,, +++ b/src/main/java/io/reactivex/Observable.java, +        ObservableBlockingSubscribe.subscribe(this, onNext, Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION);, +        return forEachWhile(onNext, Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION);, +        return subscribe(Functions.emptyConsumer(), Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION, Functions.emptyConsumer());, +        return subscribe(onNext, Functions.ERROR_CONSUMER, Functions.EMPTY_ACTION, Functions.emptyConsumer());, +++ b/src/main/java/io/reactivex/Single.java, +        return subscribe(Functions.emptyConsumer(), Functions.ERROR_CONSUMER);, +        return subscribe(onSuccess, Functions.ERROR_CONSUMER);, +++ b/src/main/java/io/reactivex/internal/functions/Functions.java, +import io.reactivex.plugins.RxJavaPlugins;, +    public static final Consumer<Throwable> ERROR_CONSUMER = new Consumer<Throwable>() {, +        @Override, +        public void accept(Throwable error) {, +            RxJavaPlugins.onError(error);, +        }, +    };, +, +++ b/src/main/java/io/reactivex/plugins/RxJavaPlugins.java]