[+++ b/src/main/java/io/reactivex/plugins/RxJavaPlugins.java, +    , +    static volatile Consumer<Throwable> errorHandler;, +    , +    static volatile Function<Subscriber<Object>, Subscriber<Object>> onSubscribeHandler;, +    , +    static volatile Function<Publisher<Object>, Publisher<Object>> onCreateHandler;, +, +    static volatile Function<Runnable, Runnable> onScheduleHandler;, +, +    static volatile Function<Scheduler, Scheduler> onInitComputationHandler;, +    , +    static volatile Function<Scheduler, Scheduler> onInitSingleHandler;, +    , +    static volatile Function<Scheduler, Scheduler> onInitIOHandler;, +    , +    static volatile Function<Scheduler, Scheduler> onComputationHandler;, +    , +    static volatile Function<Scheduler, Scheduler> onSingleHandler;, +    , +    static volatile Function<Scheduler, Scheduler> onIOHandler;, +    , +    /** Prevents changing the plugins. */, +    private static volatile boolean lockdown;, +    , +    /**, +     * Prevents changing the plugins from then on., +     * <p>This allows container-like environments to prevent clients, +     * messing with plugins. , +     */, +    public static void lockdown() {, +        lockdown = true;, +    /**, +     * Returns true if the plugins were locked down., +     * @return true if the plugins were locked down, +     */, +    public static boolean isLockdown() {, +        return lockdown;, +    }, +        Function<Scheduler, Scheduler> f = onInitComputationHandler;, +        if (f == null) {, +            return defaultScheduler;, +        }, +        return f.apply(defaultScheduler); // JIT will skip this, +        Function<Scheduler, Scheduler> f = onInitIOHandler;, +        if (f == null) {, +            return defaultScheduler;, +        }, +        return f.apply(defaultScheduler);, +        Function<Scheduler, Scheduler> f = onInitSingleHandler;, +        if (f == null) {, +            return defaultScheduler;, +        }, +        return f.apply(defaultScheduler);, +        Function<Scheduler, Scheduler> f = onComputationHandler;, +        if (f == null) {, +            return defaultScheduler;, +        }, +        return f.apply(defaultScheduler);, +        Function<Publisher<Object>, Publisher<Object>> f = onCreateHandler;, +        if (f == null) {, +            return publisher;, +        }, +        return (Publisher)((Function)f).apply(publisher);, +        Consumer<Throwable> f = errorHandler;, +        if (f != null) {, +                f.accept(error);, +                return;, +                if (error == null) {, +                    error = new NullPointerException();, +                error.addSuppressed(e);, +            }, +        } else {, +            if (error == null) {, +                error = new NullPointerException();, +            }, +        }, +        error.printStackTrace();, +        Function<Scheduler, Scheduler> f = onIOHandler;, +        if (f == null) {, +            return defaultScheduler;, +        }, +        return f.apply(defaultScheduler);, +        Function<Runnable, Runnable> f = onScheduleHandler;, +        if (f == null) {, +            return run;, +        }, +        return f.apply(run);, +        Function<Scheduler, Scheduler> f = onSingleHandler;, +        if (f == null) {, +            return defaultScheduler;, +        }, +        return f.apply(defaultScheduler);, +        Function<Subscriber<Object>, Subscriber<Object>> f = onSubscribeHandler;, +        if (f == null) {, +            return subscriber;, +        }, +        return (Subscriber)((Function)f).apply(subscriber);, +        if (lockdown) {, +            throw new IllegalStateException("Plugins can't be changed anymore");]