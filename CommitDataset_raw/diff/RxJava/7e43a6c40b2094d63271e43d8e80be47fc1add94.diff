[+++ b/rxjava-contrib/rxjava-string/build.gradle, +apply plugin: 'osgi', +, +sourceCompatibility = JavaVersion.VERSION_1_6, +targetCompatibility = JavaVersion.VERSION_1_6, +, +dependencies {, +    compile project(':rxjava-core'), +    provided 'junit:junit-dep:4.10', +    provided 'org.mockito:mockito-core:1.8.5', +}, +, +javadoc {, +    options {, +        doclet = "org.benjchristensen.doclet.DocletExclude", +        docletpath = [rootProject.file('./gradle/doclet-exclude.jar')], +        stylesheetFile = rootProject.file('./gradle/javadocStyleSheet.css'), +        windowTitle = "RxJava Javadoc ${project.version}", +    }, +    options.addStringOption('top').value = '<h2 class="title" style="padding-top:40px">RxJava</h2>', +}, +, +jar {, +    manifest {, +        name = 'rxjava-string', +        instruction 'Bundle-Vendor', 'Netflix', +        instruction 'Bundle-DocURL', 'https://github.com/Netflix/RxJava', +        instruction 'Import-Package', '!org.junit,!junit.framework,!org.mockito.*,*', +    }, +}, +++ b/rxjava-contrib/rxjava-string/build.gradle, +apply plugin: 'osgi', +, +sourceCompatibility = JavaVersion.VERSION_1_6, +targetCompatibility = JavaVersion.VERSION_1_6, +, +dependencies {, +    compile project(':rxjava-core'), +    provided 'junit:junit-dep:4.10', +    provided 'org.mockito:mockito-core:1.8.5', +}, +, +javadoc {, +    options {, +        doclet = "org.benjchristensen.doclet.DocletExclude", +        docletpath = [rootProject.file('./gradle/doclet-exclude.jar')], +        stylesheetFile = rootProject.file('./gradle/javadocStyleSheet.css'), +        windowTitle = "RxJava Javadoc ${project.version}", +    }, +    options.addStringOption('top').value = '<h2 class="title" style="padding-top:40px">RxJava</h2>', +}, +, +jar {, +    manifest {, +        name = 'rxjava-string', +        instruction 'Bundle-Vendor', 'Netflix', +        instruction 'Bundle-DocURL', 'https://github.com/Netflix/RxJava', +        instruction 'Import-Package', '!org.junit,!junit.framework,!org.mockito.*,*', +    }, +}, +++ b/rxjava-contrib/rxjava-string/src/main/java/rx/observables/StringObservable.java, +package rx.observables;, +, +import java.nio.ByteBuffer;, +import java.nio.CharBuffer;, +import java.nio.charset.CharacterCodingException;, +import java.nio.charset.Charset;, +import java.nio.charset.CharsetDecoder;, +import java.nio.charset.CharsetEncoder;, +import java.nio.charset.CoderResult;, +import java.nio.charset.CodingErrorAction;, +import java.util.Arrays;, +import java.util.regex.Pattern;, +, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +import rx.Observable.OnSubscribeFunc;, +import rx.util.functions.Func1;, +import rx.util.functions.Func2;, +, +public class StringObservable {, +    /**, +     * Decodes a stream the multibyte chunks into a stream of strings that works on infinite streams and where handles when a multibyte character spans two chunks., +     * , +     * @param src, +     * @param charsetName, +     * @return, +     */, +    public static Observable<String> decode(Observable<byte[]> src, String charsetName) {, +        return decode(src, Charset.forName(charsetName));, +    }, +, +    /**, +     * Decodes a stream the multibyte chunks into a stream of strings that works on infinite streams and where handles when a multibyte character spans two chunks., +     * , +     * @param src, +     * @param charset, +     * @return, +     */]