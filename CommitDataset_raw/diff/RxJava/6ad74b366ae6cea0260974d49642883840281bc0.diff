[+++ b/src/main/java/io/reactivex/observers/BaseTestConsumer.java, +        assertValueAt(0, valuePredicate);, +, +        if (values.size() > 1) {, +            throw fail("Value present but other values as well");, +        }, +, +        return (U)this;, +    }, +, +    /**, +     * Asserts that this TestObserver/TestSubscriber received an onNext value at the given index, +     * for the provided predicate returns true., +     * @param valuePredicate, +     *            the predicate that receives the onNext value, +     *            and should return true for the expected value., +     * @return this, +     */, +    @SuppressWarnings("unchecked"), +    public final U assertValueAt(int index, Predicate<T> valuePredicate) {, +        if (index >= values.size()) {, +            throw fail("Invalid index: " + index);, +        }, +, +            if (valuePredicate.test(values.get(index))) {, +        if (!found) {, +++ b/src/main/java/io/reactivex/observers/BaseTestConsumer.java, +        assertValueAt(0, valuePredicate);, +, +        if (values.size() > 1) {, +            throw fail("Value present but other values as well");, +        }, +, +        return (U)this;, +    }, +, +    /**, +     * Asserts that this TestObserver/TestSubscriber received an onNext value at the given index, +     * for the provided predicate returns true., +     * @param valuePredicate, +     *            the predicate that receives the onNext value, +     *            and should return true for the expected value., +     * @return this, +     */, +    @SuppressWarnings("unchecked"), +    public final U assertValueAt(int index, Predicate<T> valuePredicate) {, +        if (index >= values.size()) {, +            throw fail("Invalid index: " + index);, +        }, +, +            if (valuePredicate.test(values.get(index))) {, +        if (!found) {, +++ b/src/test/java/io/reactivex/observers/TestObserverTest.java, +, +    @Test, +    public void assertValueAtPredicateEmpty() {, +        TestObserver<Object> ts = new TestObserver<Object>();, +, +        Observable.empty().subscribe(ts);, +, +        thrown.expect(AssertionError.class);, +        thrown.expectMessage("No values");, +        ts.assertValueAt(0, new Predicate<Object>() {, +            @Override public boolean test(final Object o) throws Exception {, +                return false;, +            }, +        });, +    }, +, +    @Test, +    public void assertValueAtPredicateMatch() {, +        TestObserver<Integer> ts = new TestObserver<Integer>();, +, +        Observable.just(1, 2).subscribe(ts);, +, +        ts.assertValueAt(1, new Predicate<Integer>() {, +            @Override public boolean test(final Integer o) throws Exception {, +                return o == 2;, +            }, +        });, +    }, +, +    @Test, +    public void assertValueAtPredicateNoMatch() {, +        TestObserver<Integer> ts = new TestObserver<Integer>();, +, +        Observable.just(1, 2, 3).subscribe(ts);, +, +        thrown.expect(AssertionError.class);, +        thrown.expectMessage("Value not present");, +        ts.assertValueAt(2, new Predicate<Integer>() {, +            @Override public boolean test(final Integer o) throws Exception {, +                return o != 3;, +            }, +        });, +    }, +, +    @Test, +    public void assertValueAtInvalidIndex() {, +        TestObserver<Integer> ts = new TestObserver<Integer>();]