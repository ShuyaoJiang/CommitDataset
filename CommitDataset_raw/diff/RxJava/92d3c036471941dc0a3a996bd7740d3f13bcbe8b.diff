[+++ b/src/main/java/io/reactivex/Observable.java, +        Objects.requireNonNull(other);, +        Objects.requireNonNull(value);, +    , +    /*, +     * It doesn't add cancellation support by default like 1.x, +     * if necessary, one can use composition to achieve it:, +     * futureObservable.doOnCancel(() -> future.cancel(true));, +     */, +    public static <T> Observable<T> fromFuture(Future<? extends T> future) {, +        if (future instanceof CompletableFuture) {, +            return fromFuture((CompletableFuture<? extends T>)future);, +        }, +        Objects.requireNonNull(future);, +        Observable<T> o = create(new PublisherFutureSource<>(future, 0L, null));, +        , +        return o;, +    }, +, +    public static <T> Observable<T> fromFuture(Future<? extends T> future, long timeout, TimeUnit unit) {, +        Objects.requireNonNull(future);, +        Objects.requireNonNull(unit);, +        Observable<T> o = create(new PublisherFutureSource<>(future, timeout, unit));, +        return o;, +    }, +, +    public static <T> Observable<T> fromFuture(Future<? extends T> future, Scheduler scheduler) {, +        Objects.requireNonNull(scheduler);, +        Observable<T> o = fromFuture(future);, +        return o.subscribeOn(Schedulers.io());, +    }, +    , +    public static <T> Observable<T> fromFuture(Future<? extends T> future, long timeout, TimeUnit unit, Scheduler scheduler) {, +        Objects.requireNonNull(scheduler);, +        Observable<T> o = fromFuture(future, timeout, unit); , +        return o.subscribeOn(scheduler);, +    }, +++ b/src/main/java/io/reactivex/Observable.java, +        Objects.requireNonNull(other);, +        Objects.requireNonNull(value);, +    , +    /*, +     * It doesn't add cancellation support by default like 1.x, +     * if necessary, one can use composition to achieve it:, +     * futureObservable.doOnCancel(() -> future.cancel(true));, +     */, +    public static <T> Observable<T> fromFuture(Future<? extends T> future) {, +        if (future instanceof CompletableFuture) {, +            return fromFuture((CompletableFuture<? extends T>)future);, +        }, +        Objects.requireNonNull(future);, +        Observable<T> o = create(new PublisherFutureSource<>(future, 0L, null));, +        , +        return o;, +    }, +, +    public static <T> Observable<T> fromFuture(Future<? extends T> future, long timeout, TimeUnit unit) {, +        Objects.requireNonNull(future);, +        Objects.requireNonNull(unit);, +        Observable<T> o = create(new PublisherFutureSource<>(future, timeout, unit));, +        return o;, +    }, +, +    public static <T> Observable<T> fromFuture(Future<? extends T> future, Scheduler scheduler) {, +        Objects.requireNonNull(scheduler);, +        Observable<T> o = fromFuture(future);, +        return o.subscribeOn(Schedulers.io());, +    }, +    , +    public static <T> Observable<T> fromFuture(Future<? extends T> future, long timeout, TimeUnit unit, Scheduler scheduler) {, +        Objects.requireNonNull(scheduler);, +        Observable<T> o = fromFuture(future, timeout, unit); , +        return o.subscribeOn(scheduler);, +    }, +++ b/src/main/java/io/reactivex/internal/operators/PublisherFutureSource.java, +/**, + * Copyright 2015 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators;, +, +import java.util.concurrent.*;, +, +import org.reactivestreams.*;, +, +import io.reactivex.internal.subscriptions.ScalarAsyncSubscription;, +, +public final class PublisherFutureSource<T> implements Publisher<T> {, +    final Future<? extends T> future;, +    final long timeout;, +    final TimeUnit unit;]