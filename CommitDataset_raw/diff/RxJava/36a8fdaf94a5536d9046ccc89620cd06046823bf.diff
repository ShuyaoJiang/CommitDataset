[+++ b/src/main/java/io/reactivex/Observable.java, +    }, +, +    public final <U> Observable<U> collect(U initialValue, BiConsumer<? super U, ? super T> collector) {, +        return collect(() -> initialValue, collector);, +    }, +, +    public final <U> Observable<U> collect(Supplier<? extends U> initialValueSupplier, BiConsumer<? super U, ? super T> collector) {, +        Objects.requireNonNull(initialValueSupplier);, +        Objects.requireNonNull(collector);, +        return lift(new OperatorCollect<>(initialValueSupplier, collector));, +    }, +, +    /**, +     *, +     * @deprecated is this in use?, +     */, +    @Deprecated, +    public final <K> Observable<Map<K, T>> toMap(Function<? super T, ? extends K> keySelector) {, +        return collect(HashMap::new, (m, t) -> {, +            K key = keySelector.apply(t);, +            m.put(key, t);, +        });, +    }, +, +    /**, +     *, +     * @deprecated is this in use?, +     */, +    @Deprecated, +    public final <K, V> Observable<Map<K, V>> toMap(Function<? super T, ? extends K> keySelector, Function<? super T, ? extends V> valueSelector) {, +        return collect(HashMap::new, (m, t) -> {, +            K key = keySelector.apply(t);, +            V value = valueSelector.apply(t);, +            m.put(key, value);, +        });, +    }, +, +    /**, +     *, +     * @deprecated is this in use?, +     */, +    @Deprecated, +    public final <K, V> Observable<Map<K, V>> toMap(Function<? super T, ? extends K> keySelector, , +            Function<? super T, ? extends V> valueSelector,, +            Supplier<? extends Map<K, V>> mapSupplier) {, +        return collect(mapSupplier, (m, t) -> {, +            K key = keySelector.apply(t);, +            V value = valueSelector.apply(t);, +            m.put(key, value);, +        });, +    }, +, +    /**, +     *, +     * @deprecated is this in use?, +     */, +    @Deprecated, +    public final <K> Observable<Map<K, Collection<T>>> toMultimap(Function<? super T, ? extends K> keySelector) {, +        return toMultimap(keySelector, v -> v, ArrayList::new);, +    }, +, +    /**, +     *, +     * @deprecated is this in use?, +     */, +    @Deprecated, +    public final <K, V> Observable<Map<K, Collection<V>>> toMultimap(Function<? super T, ? extends K> keySelector, Function<? super T, ? extends V> valueSelector) {, +        return toMultimap(keySelector, valueSelector, ArrayList::new);, +    }, +, +    /**, +     *, +     * @deprecated is this in use?, +     */, +    @Deprecated, +    @SuppressWarnings("unchecked"), +    public final <K, V> Observable<Map<K, Collection<V>>> toMultimap(Function<? super T, ? extends K> keySelector, , +            Function<? super T, ? extends V> valueSelector, , +            Supplier<? extends Collection<? super V>> collectionSupplier) {, +        return collect(HashMap::new, (m, t) -> {, +            K key = keySelector.apply(t);, +, +            Collection<V> coll = m.get(key);, +            if (coll == null) {, +                coll = (Collection<V>)collectionSupplier.get();, +                m.put(key, coll);, +            }, +, +            V value = valueSelector.apply(t);, +, +            coll.add(value);, +        });, +++ b/src/main/java/io/reactivex/Observable.java, +    }, +, +    public final <U> Observable<U> collect(U initialValue, BiConsumer<? super U, ? super T> collector) {, +        return collect(() -> initialValue, collector);, +    }, +]