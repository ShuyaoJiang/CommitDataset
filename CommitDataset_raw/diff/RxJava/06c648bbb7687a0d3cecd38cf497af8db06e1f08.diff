[+++ b/rxjava-contrib/rxjava-apache-http/build.gradle, +apply plugin: 'osgi', +, +sourceCompatibility = JavaVersion.VERSION_1_6, +targetCompatibility = JavaVersion.VERSION_1_6, +, +dependencies {, +    compile project(':rxjava-core'), +    compile 'org.apache.httpcomponents:httpclient:4.3', +    compile 'org.apache.httpcomponents:httpcore-nio:4.3', +    compile 'org.apache.httpcomponents:httpasyncclient:4.0-beta4', +}, +, +jar {, +    manifest {, +        name = 'rxjava-apache-http', +        instruction 'Bundle-Vendor', 'Netflix', +        instruction 'Bundle-DocURL', 'https://github.com/Netflix/RxJava', +        instruction 'Import-Package', '!org.junit,!junit.framework,!org.mockito.*,*', +    }, +}, +++ b/rxjava-contrib/rxjava-apache-http/build.gradle, +apply plugin: 'osgi', +, +sourceCompatibility = JavaVersion.VERSION_1_6, +targetCompatibility = JavaVersion.VERSION_1_6, +, +dependencies {, +    compile project(':rxjava-core'), +    compile 'org.apache.httpcomponents:httpclient:4.3', +    compile 'org.apache.httpcomponents:httpcore-nio:4.3', +    compile 'org.apache.httpcomponents:httpasyncclient:4.0-beta4', +}, +, +jar {, +    manifest {, +        name = 'rxjava-apache-http', +        instruction 'Bundle-Vendor', 'Netflix', +        instruction 'Bundle-DocURL', 'https://github.com/Netflix/RxJava', +        instruction 'Import-Package', '!org.junit,!junit.framework,!org.mockito.*,*', +    }, +}, +++ b/rxjava-contrib/rxjava-apache-http/src/main/java/rx/apache/http/ObservableHttp.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.apache.http;, +, +import org.apache.http.HttpResponse;, +import org.apache.http.client.HttpClient;, +import org.apache.http.concurrent.FutureCallback;, +import org.apache.http.nio.client.HttpAsyncClient;, +import org.apache.http.nio.client.methods.HttpAsyncMethods;, +import org.apache.http.nio.protocol.HttpAsyncRequestProducer;, +, +import rx.Observable;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observer;, +import rx.Subscription;, +import rx.apache.http.consumers.ResponseConsumerDelegate;, +import rx.subscriptions.CompositeSubscription;, +import rx.subscriptions.Subscriptions;, +, +/**, + * An {@link Observable} interface to Apache {@link HttpAsyncClient}., + * <p>, + * The initial {@link HttpResponse} is returned via {@link Observer#onNext} wrapped in a {@link ObservableHttpResponse}., + * <p>, + * The content stream is retrieved from {@link ObservableHttpResponse#getContent()}., + * <p>, + * It is aware of Content-Type <i>text/event-stream</i> and will stream each event via {@link Observer#onNext}., + * <p>, + * Other Content-Types will be returned as a single call to {@link Observer#onNext}., + * <p>, + * Examples:, + * <p>, + * <pre> {@code, + * ObservableHttp.createGet("http://www.wikipedia.com", httpClient).toObservable();, + * } </pre>, + * <p>, + * <pre> {@code, + * ObservableHttp.createRequest(HttpAsyncMethods.createGet("http://www.wikipedia.com"), httpClient).toObservable();, + * } </pre>, + * , + * An {@link HttpClient} can be created like this:, + * , + * <pre> {@code, + * CloseableHttpAsyncClient httpClient = HttpAsyncClients.createDefault();]