[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationGroupJoin;, +import rx.operators.OperatorSampleWithObservable;, +import rx.operators.OperatorSampleWithTime;, +import rx.operators.OperatorTimerOnce;, +import rx.operators.OperatorTimerPeriodically;, +        return create(new OperatorTimerPeriodically(interval, interval, unit, Schedulers.computation()));, +        return create(new OperatorTimerPeriodically(interval, interval, unit, scheduler));, +        return create(new OperatorTimerPeriodically(initialDelay, period, unit, scheduler));, +     * @return an Observable that emits one item after a specified delay, and then completes, +     * @return Observable that emits one item after a specified delay, on a specified Scheduler, and then, +     * completes, +        return create(new OperatorTimerOnce(delay, unit, scheduler));, +        return create(new OperationGroupJoin<T, T2, D1, D2, R>(this, right, leftDuration, rightDuration, resultSelector));, +        return lift(new OperatorSampleWithTime<T>(period, unit, Schedulers.computation()));, +        return lift(new OperatorSampleWithTime<T>(period, unit, scheduler));, +        return lift(new OperatorSampleWithObservable<T, U>(sampler));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationGroupJoin;, +import rx.operators.OperatorSampleWithObservable;, +import rx.operators.OperatorSampleWithTime;, +import rx.operators.OperatorTimerOnce;, +import rx.operators.OperatorTimerPeriodically;, +        return create(new OperatorTimerPeriodically(interval, interval, unit, Schedulers.computation()));, +        return create(new OperatorTimerPeriodically(interval, interval, unit, scheduler));, +        return create(new OperatorTimerPeriodically(initialDelay, period, unit, scheduler));, +     * @return an Observable that emits one item after a specified delay, and then completes, +     * @return Observable that emits one item after a specified delay, on a specified Scheduler, and then, +     * completes, +        return create(new OperatorTimerOnce(delay, unit, scheduler));, +        return create(new OperationGroupJoin<T, T2, D1, D2, R>(this, right, leftDuration, rightDuration, resultSelector));, +        return lift(new OperatorSampleWithTime<T>(period, unit, Schedulers.computation()));, +        return lift(new OperatorSampleWithTime<T>(period, unit, scheduler));, +        return lift(new OperatorSampleWithObservable<T, U>(sampler));, +++ b/rxjava-core/src/main/java/rx/operators/OperationGroupJoin.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import rx.Observable;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observer;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.functions.Func1;, +import rx.functions.Func2;, +import rx.subjects.PublishSubject;, +import rx.subjects.Subject;, +import rx.subscriptions.CompositeSubscription;, +import rx.subscriptions.RefCountSubscription;, +import rx.subscriptions.SerialSubscription;, +, +/**, + * Corrrelates two sequences when they overlap and groups the results., + * , + * @see <a href="http://msdn.microsoft.com/en-us/library/hh244235.aspx">MSDN: Observable.GroupJoin</a>, + */, +public class OperationGroupJoin<T1, T2, D1, D2, R> implements OnSubscribeFunc<R> {, +    protected final Observable<T1> left;, +    protected final Observable<T2> right;, +    protected final Func1<? super T1, ? extends Observable<D1>> leftDuration;, +    protected final Func1<? super T2, ? extends Observable<D2>> rightDuration;, +    protected final Func2<? super T1, ? super Observable<T2>, ? extends R> resultSelector;, +, +    public OperationGroupJoin(, +            Observable<T1> left,, +            Observable<T2> right,, +            Func1<? super T1, ? extends Observable<D1>> leftDuration,, +            Func1<? super T2, ? extends Observable<D2>> rightDuration,, +            Func2<? super T1, ? super Observable<T2>, ? extends R> resultSelector) {, +        this.left = left;, +        this.right = right;, +        this.leftDuration = leftDuration;, +        this.rightDuration = rightDuration;, +        this.resultSelector = resultSelector;, +    }, +, +    @Override, +    public Subscription onSubscribe(Observer<? super R> t1) {, +        ResultManager ro = new ResultManager(t1);, +        ro.init();, +        return ro;]