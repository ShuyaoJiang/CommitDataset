[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCombineLatest.java, +            R r = ObjectHelper.requireNonNull(combiner.apply(a), "The combiner returned a null value");, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCombineLatest.java, +            R r = ObjectHelper.requireNonNull(combiner.apply(a), "The combiner returned a null value");, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableInternalHelper.java, +import io.reactivex.internal.functions.*;, +            Publisher<U> p = ObjectHelper.requireNonNull(itemDelay.apply(v), "The itemDelay returned a null Publisher");, +            return new FlowableTakePublisher<U>(p, 1).map(Functions.justFunction(v)).defaultIfEmpty(v);, +            Publisher<U> u = (Publisher<U>)ObjectHelper.requireNonNull(mapper.apply(t), "The mapper returned a null Publisher");, +            return new FlowableFromIterable<U>(ObjectHelper.requireNonNull(mapper.apply(t), "The mapper returned a null Iterable"));, +            Publisher<R> p = ObjectHelper.requireNonNull(selector.apply(t), "The selector returned a null Publisher");, +            return Flowable.fromPublisher(p).observeOn(scheduler);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCombineLatest.java, +            R r = ObjectHelper.requireNonNull(combiner.apply(a), "The combiner returned a null value");, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableInternalHelper.java, +import io.reactivex.internal.functions.*;, +            Publisher<U> p = ObjectHelper.requireNonNull(itemDelay.apply(v), "The itemDelay returned a null Publisher");, +            return new FlowableTakePublisher<U>(p, 1).map(Functions.justFunction(v)).defaultIfEmpty(v);, +            Publisher<U> u = (Publisher<U>)ObjectHelper.requireNonNull(mapper.apply(t), "The mapper returned a null Publisher");, +            return new FlowableFromIterable<U>(ObjectHelper.requireNonNull(mapper.apply(t), "The mapper returned a null Iterable"));, +            Publisher<R> p = ObjectHelper.requireNonNull(selector.apply(t), "The selector returned a null Publisher");, +            return Flowable.fromPublisher(p).observeOn(scheduler);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableMapNotification.java, +import io.reactivex.exceptions.*;, +                actual.onError(new CompositeException(t, e));, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCombineLatest.java, +            R r = ObjectHelper.requireNonNull(combiner.apply(a), "The combiner returned a null value");, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableInternalHelper.java, +import io.reactivex.internal.functions.*;, +            Publisher<U> p = ObjectHelper.requireNonNull(itemDelay.apply(v), "The itemDelay returned a null Publisher");, +            return new FlowableTakePublisher<U>(p, 1).map(Functions.justFunction(v)).defaultIfEmpty(v);, +            Publisher<U> u = (Publisher<U>)ObjectHelper.requireNonNull(mapper.apply(t), "The mapper returned a null Publisher");, +            return new FlowableFromIterable<U>(ObjectHelper.requireNonNull(mapper.apply(t), "The mapper returned a null Iterable"));, +            Publisher<R> p = ObjectHelper.requireNonNull(selector.apply(t), "The selector returned a null Publisher");, +            return Flowable.fromPublisher(p).observeOn(scheduler);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableMapNotification.java, +import io.reactivex.exceptions.*;, +                actual.onError(new CompositeException(t, e));, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableUsing.java, +import io.reactivex.internal.functions.ObjectHelper;, +            source = ObjectHelper.requireNonNull(sourceSupplier.apply(resource), "The sourceSupplier returned a null Publisher");, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCombineLatest.java, +            R r = ObjectHelper.requireNonNull(combiner.apply(a), "The combiner returned a null value");, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableInternalHelper.java, +import io.reactivex.internal.functions.*;, +            Publisher<U> p = ObjectHelper.requireNonNull(itemDelay.apply(v), "The itemDelay returned a null Publisher");, +            return new FlowableTakePublisher<U>(p, 1).map(Functions.justFunction(v)).defaultIfEmpty(v);, +            Publisher<U> u = (Publisher<U>)ObjectHelper.requireNonNull(mapper.apply(t), "The mapper returned a null Publisher");, +            return new FlowableFromIterable<U>(ObjectHelper.requireNonNull(mapper.apply(t), "The mapper returned a null Iterable"));, +            Publisher<R> p = ObjectHelper.requireNonNull(selector.apply(t), "The selector returned a null Publisher");, +            return Flowable.fromPublisher(p).observeOn(scheduler);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableMapNotification.java, +import io.reactivex.exceptions.*;, +                actual.onError(new CompositeException(t, e));, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableUsing.java, +import io.reactivex.internal.functions.ObjectHelper;, +            source = ObjectHelper.requireNonNull(sourceSupplier.apply(resource), "The sourceSupplier returned a null Publisher");, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableWithLatestFromMany.java, +                v = ObjectHelper.requireNonNull(combiner.apply(objects), "The combiner returned a null value");, +            return ObjectHelper.requireNonNull(combiner.apply(new Object[] { t }), "The combiner returned a null value");, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCombineLatest.java, +            R r = ObjectHelper.requireNonNull(combiner.apply(a), "The combiner returned a null value");, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableInternalHelper.java, +import io.reactivex.internal.functions.*;, +            Publisher<U> p = ObjectHelper.requireNonNull(itemDelay.apply(v), "The itemDelay returned a null Publisher");, +            return new FlowableTakePublisher<U>(p, 1).map(Functions.justFunction(v)).defaultIfEmpty(v);, +            Publisher<U> u = (Publisher<U>)ObjectHelper.requireNonNull(mapper.apply(t), "The mapper returned a null Publisher");, +            return new FlowableFromIterable<U>(ObjectHelper.requireNonNull(mapper.apply(t), "The mapper returned a null Iterable"));, +            Publisher<R> p = ObjectHelper.requireNonNull(selector.apply(t), "The selector returned a null Publisher");, +            return Flowable.fromPublisher(p).observeOn(scheduler);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableMapNotification.java, +import io.reactivex.exceptions.*;, +                actual.onError(new CompositeException(t, e));, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableUsing.java, +import io.reactivex.internal.functions.ObjectHelper;, +            source = ObjectHelper.requireNonNull(sourceSupplier.apply(resource), "The sourceSupplier returned a null Publisher");, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableWithLatestFromMany.java, +                v = ObjectHelper.requireNonNull(combiner.apply(objects), "The combiner returned a null value");, +            return ObjectHelper.requireNonNull(combiner.apply(new Object[] { t }), "The combiner returned a null value");, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeZipArray.java, +            return ObjectHelper.requireNonNull(zipper.apply(new Object[] { t }), "The zipper returned a null value");, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCombineLatest.java, +            R r = ObjectHelper.requireNonNull(combiner.apply(a), "The combiner returned a null value");, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableInternalHelper.java, +import io.reactivex.internal.functions.*;, +            Publisher<U> p = ObjectHelper.requireNonNull(itemDelay.apply(v), "The itemDelay returned a null Publisher");, +            return new FlowableTakePublisher<U>(p, 1).map(Functions.justFunction(v)).defaultIfEmpty(v);, +            Publisher<U> u = (Publisher<U>)ObjectHelper.requireNonNull(mapper.apply(t), "The mapper returned a null Publisher");, +            return new FlowableFromIterable<U>(ObjectHelper.requireNonNull(mapper.apply(t), "The mapper returned a null Iterable"));, +            Publisher<R> p = ObjectHelper.requireNonNull(selector.apply(t), "The selector returned a null Publisher");, +            return Flowable.fromPublisher(p).observeOn(scheduler);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableMapNotification.java, +import io.reactivex.exceptions.*;, +                actual.onError(new CompositeException(t, e));, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableUsing.java, +import io.reactivex.internal.functions.ObjectHelper;, +            source = ObjectHelper.requireNonNull(sourceSupplier.apply(resource), "The sourceSupplier returned a null Publisher");, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableWithLatestFromMany.java, +                v = ObjectHelper.requireNonNull(combiner.apply(objects), "The combiner returned a null value");, +            return ObjectHelper.requireNonNull(combiner.apply(new Object[] { t }), "The combiner returned a null value");]