[+++ b/src/main/java/io/reactivex/plugins/RxJavaPlugins.java, +    static volatile Consumer<? super Throwable> errorHandler;, +    public static Consumer<? super Throwable> getErrorHandler() {, +        Consumer<? super Throwable> f = errorHandler;, +    public static void setErrorHandler(@Nullable Consumer<? super Throwable> handler) {, +++ b/src/main/java/io/reactivex/plugins/RxJavaPlugins.java, +    static volatile Consumer<? super Throwable> errorHandler;, +    public static Consumer<? super Throwable> getErrorHandler() {, +        Consumer<? super Throwable> f = errorHandler;, +    public static void setErrorHandler(@Nullable Consumer<? super Throwable> handler) {, +++ b/src/test/java/io/reactivex/plugins/RxJavaPluginsTest.java, +    /**, +     * Ensure setErrorHandler() accepts a consumer with "? super Throwable", +     */, +    @Test, +    public void onErrorWithSuper() throws Exception {, +        try {, +            Consumer<? super Throwable> errorHandler = new Consumer<Throwable>() {, +                @Override, +                public void accept(Throwable t) {, +                    throw new TestException("Forced failure 2");, +                }, +            };, +            RxJavaPlugins.setErrorHandler(errorHandler);, +, +            Consumer<? super Throwable> errorHandler1 = RxJavaPlugins.getErrorHandler();, +            assertSame(errorHandler, errorHandler1);, +        } finally {, +            RxJavaPlugins.reset();, +        }, +    }, +]