[+++ b/src/main/java/io/reactivex/Observable.java, +    public static <T> Observable<T> generate(Consumer<Subscriber<T>> generator) {, +        return generate(() -> null, (s, o) -> {, +            generator.accept(o);, +            return s;, +        }, s -> { });, +    }, +, +    public static <T, S> Observable<T> generate(Supplier<S> initialState, BiConsumer<S, Subscriber<T>> generator) {, +        return generate(initialState, (s, o) -> {, +            generator.accept(s, o);, +            return s;, +        }, s -> { });, +    }, +, +    public static <T, S> Observable<T> generate(Supplier<S> initialState, BiConsumer<S, Subscriber<T>> generator, Consumer<? super S> disposeState) {, +        return generate(initialState, (s, o) -> {, +            generator.accept(s, o);, +            return s;, +        }, disposeState);, +    }, +, +    public static <T, S> Observable<T> generate(Supplier<S> initialState, BiFunction<S, Subscriber<T>, S> generator) {, +        return generate(initialState, generator, s -> { });, +    }, +, +    public static <T, S> Observable<T> generate(Supplier<S> initialState, BiFunction<S, Subscriber<T>, S> generator, Consumer<? super S> disposeState) {, +        Objects.requireNonNull(initialState);, +        Objects.requireNonNull(generator);, +        Objects.requireNonNull(disposeState);, +        return create(new PublisherGenerate<>(initialState, generator, disposeState));, +    }, +, +++ b/src/main/java/io/reactivex/Observable.java, +    public static <T> Observable<T> generate(Consumer<Subscriber<T>> generator) {, +        return generate(() -> null, (s, o) -> {, +            generator.accept(o);, +            return s;, +        }, s -> { });, +    }, +, +    public static <T, S> Observable<T> generate(Supplier<S> initialState, BiConsumer<S, Subscriber<T>> generator) {, +        return generate(initialState, (s, o) -> {, +            generator.accept(s, o);, +            return s;, +        }, s -> { });, +    }, +, +    public static <T, S> Observable<T> generate(Supplier<S> initialState, BiConsumer<S, Subscriber<T>> generator, Consumer<? super S> disposeState) {, +        return generate(initialState, (s, o) -> {, +            generator.accept(s, o);, +            return s;, +        }, disposeState);, +    }, +, +    public static <T, S> Observable<T> generate(Supplier<S> initialState, BiFunction<S, Subscriber<T>, S> generator) {, +        return generate(initialState, generator, s -> { });, +    }, +, +    public static <T, S> Observable<T> generate(Supplier<S> initialState, BiFunction<S, Subscriber<T>, S> generator, Consumer<? super S> disposeState) {, +        Objects.requireNonNull(initialState);, +        Objects.requireNonNull(generator);, +        Objects.requireNonNull(disposeState);, +        return create(new PublisherGenerate<>(initialState, generator, disposeState));, +    }, +, +++ b/src/main/java/io/reactivex/internal/operators/PublisherGenerate.java, +/**, + * Copyright 2015 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators;, +, +import java.util.concurrent.atomic.AtomicLong;, +import java.util.function.*;, +, +import org.reactivestreams.*;, +, +import io.reactivex.internal.subscriptions.*;, +import io.reactivex.internal.util.BackpressureHelper;, +import io.reactivex.plugins.RxJavaPlugins;, +, +public final class PublisherGenerate<T, S> implements Publisher<T> {, +    final Supplier<S> stateSupplier;, +    final BiFunction<S, Subscriber<T>, S> generator;, +    final Consumer<? super S> disposeState;, +    , +    public PublisherGenerate(Supplier<S> stateSupplier, BiFunction<S, Subscriber<T>, S> generator,, +            Consumer<? super S> disposeState) {, +        this.stateSupplier = stateSupplier;, +        this.generator = generator;]