[+++ b/src/main/java/io/reactivex/Flowable.java, +     * <p>, +     * Unlike 1.x, this operator doesn't emit the seed value unless the upstream signals an event., +++ b/src/main/java/io/reactivex/Flowable.java, +     * <p>, +     * Unlike 1.x, this operator doesn't emit the seed value unless the upstream signals an event., +++ b/src/main/java/io/reactivex/internal/observers/ForEachWhileObserver.java, +import io.reactivex.exceptions.*;, +            RxJavaPlugins.onError(new CompositeException(t, ex));, +++ b/src/main/java/io/reactivex/Flowable.java, +     * <p>, +     * Unlike 1.x, this operator doesn't emit the seed value unless the upstream signals an event., +++ b/src/main/java/io/reactivex/internal/observers/ForEachWhileObserver.java, +import io.reactivex.exceptions.*;, +            RxJavaPlugins.onError(new CompositeException(t, ex));, +++ b/src/main/java/io/reactivex/internal/observers/LambdaObserver.java, +import io.reactivex.exceptions.*;, +import io.reactivex.internal.disposables.DisposableHelper;, +                onError(ex);, +        if (!isDisposed()) {, +    }, +        if (!isDisposed()) {, +                RxJavaPlugins.onError(new CompositeException(t, e));, +            }, +        if (!isDisposed()) {, +    }, +++ b/src/main/java/io/reactivex/Flowable.java, +     * <p>, +     * Unlike 1.x, this operator doesn't emit the seed value unless the upstream signals an event., +++ b/src/main/java/io/reactivex/internal/observers/ForEachWhileObserver.java, +import io.reactivex.exceptions.*;, +            RxJavaPlugins.onError(new CompositeException(t, ex));, +++ b/src/main/java/io/reactivex/internal/observers/LambdaObserver.java, +import io.reactivex.exceptions.*;, +import io.reactivex.internal.disposables.DisposableHelper;, +                onError(ex);, +        if (!isDisposed()) {, +    }, +        if (!isDisposed()) {, +                RxJavaPlugins.onError(new CompositeException(t, e));, +            }, +        if (!isDisposed()) {, +    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableConcatMapEager.java, +        final AtomicThrowable errors;, +            this.errors = new AtomicThrowable();, +            if (errors.addThrowable(t)) {, +            if (errors.addThrowable(e)) {, +                        Throwable ex = errors.get();, +                            a.onError(errors.terminate());, +                        Throwable ex = errors.terminate();, +                                Throwable ex = errors.get();, +                                    a.onError(errors.terminate());, +                                Throwable ex = errors.get();, +                                    a.onError(errors.terminate());, +++ b/src/main/java/io/reactivex/Flowable.java, +     * <p>, +     * Unlike 1.x, this operator doesn't emit the seed value unless the upstream signals an event., +++ b/src/main/java/io/reactivex/internal/observers/ForEachWhileObserver.java, +import io.reactivex.exceptions.*;, +            RxJavaPlugins.onError(new CompositeException(t, ex));, +++ b/src/main/java/io/reactivex/internal/observers/LambdaObserver.java, +import io.reactivex.exceptions.*;, +import io.reactivex.internal.disposables.DisposableHelper;, +                onError(ex);, +        if (!isDisposed()) {, +    }, +        if (!isDisposed()) {, +                RxJavaPlugins.onError(new CompositeException(t, e));, +            }, +        if (!isDisposed()) {, +    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableConcatMapEager.java, +        final AtomicThrowable errors;, +            this.errors = new AtomicThrowable();, +            if (errors.addThrowable(t)) {, +            if (errors.addThrowable(e)) {, +                        Throwable ex = errors.get();, +                            a.onError(errors.terminate());, +                        Throwable ex = errors.terminate();, +                                Throwable ex = errors.get();, +                                    a.onError(errors.terminate());, +                                Throwable ex = errors.get();, +                                    a.onError(errors.terminate());, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCreate.java, +import io.reactivex.internal.fuseable.SimplePlainQueue;, +        final SimplePlainQueue<T> queue;, +                SimplePlainQueue<T> q = queue;, +            SimplePlainQueue<T> q = queue;, +                    T v = q.poll();, +++ b/src/main/java/io/reactivex/Flowable.java, +     * <p>, +     * Unlike 1.x, this operator doesn't emit the seed value unless the upstream signals an event., +++ b/src/main/java/io/reactivex/internal/observers/ForEachWhileObserver.java, +import io.reactivex.exceptions.*;, +            RxJavaPlugins.onError(new CompositeException(t, ex));, +++ b/src/main/java/io/reactivex/internal/observers/LambdaObserver.java, +import io.reactivex.exceptions.*;, +import io.reactivex.internal.disposables.DisposableHelper;, +                onError(ex);]