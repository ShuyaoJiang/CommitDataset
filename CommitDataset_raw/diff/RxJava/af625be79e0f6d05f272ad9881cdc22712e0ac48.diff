[+++ b/src/main/java/io/reactivex/Observable.java, +    , +    public final Observable<T> repeat() {, +        return repeat(Long.MAX_VALUE);, +    }, +    , +    public final Observable<T> repeat(long times) {, +        if (times < 0) {, +            throw new IllegalArgumentException("times >= 0 required but it was " + times);, +        }, +        if (times == 0) {, +            return empty();, +        }, +        return create(new PublisherRepeat<>(this, times));, +    }, +    , +    public final Observable<T> repeatUntil(BooleanSupplier stop) {, +        return create(new PublisherRepeatUntil<>(this, stop));, +    }, +    , +    public final Observable<T> retry() {, +        return retry(Long.MAX_VALUE, e -> true);, +    }, +, +    public final Observable<T> retry(long times) {, +        return retry(times, e -> true);, +    }, +    , +    public final Observable<T> retryUntil(BooleanSupplier stop) {, +        return retry(Long.MAX_VALUE, e -> !stop.getAsBoolean());, +    }, +    , +    public final Observable<T> retry(Predicate<? super Throwable> predicate) {, +        return retry(Long.MAX_VALUE, predicate);, +    }, +    , +    // Retries at most times or until the predicate returns false, whichever happens first, +    public final Observable<T> retry(long times, Predicate<? super Throwable> predicate) {, +        if (times < 0) {, +            throw new IllegalArgumentException("times >= 0 required but it was " + times);, +        }, +        Objects.requireNonNull(predicate);, +        return create(new PublisherRetryPredicate<>(this, times, predicate));, +    }, +++ b/src/main/java/io/reactivex/Observable.java, +    , +    public final Observable<T> repeat() {, +        return repeat(Long.MAX_VALUE);, +    }, +    , +    public final Observable<T> repeat(long times) {, +        if (times < 0) {, +            throw new IllegalArgumentException("times >= 0 required but it was " + times);, +        }, +        if (times == 0) {, +            return empty();, +        }, +        return create(new PublisherRepeat<>(this, times));, +    }, +    , +    public final Observable<T> repeatUntil(BooleanSupplier stop) {, +        return create(new PublisherRepeatUntil<>(this, stop));, +    }, +    , +    public final Observable<T> retry() {, +        return retry(Long.MAX_VALUE, e -> true);, +    }, +, +    public final Observable<T> retry(long times) {, +        return retry(times, e -> true);, +    }, +    , +    public final Observable<T> retryUntil(BooleanSupplier stop) {, +        return retry(Long.MAX_VALUE, e -> !stop.getAsBoolean());, +    }, +    , +    public final Observable<T> retry(Predicate<? super Throwable> predicate) {, +        return retry(Long.MAX_VALUE, predicate);, +    }, +    , +    // Retries at most times or until the predicate returns false, whichever happens first, +    public final Observable<T> retry(long times, Predicate<? super Throwable> predicate) {, +        if (times < 0) {, +            throw new IllegalArgumentException("times >= 0 required but it was " + times);, +        }, +        Objects.requireNonNull(predicate);, +        return create(new PublisherRetryPredicate<>(this, times, predicate));, +    }, +++ b/src/main/java/io/reactivex/internal/operators/PublisherRepeat.java, +/**, + * Copyright 2015 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License.]