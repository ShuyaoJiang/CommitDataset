[+++ b/src/main/java/io/reactivex/Flowable.java, +    @SchedulerSupport(SchedulerSupport.CUSTOM), +        return o.subscribeOn(scheduler);, +++ b/src/main/java/io/reactivex/Flowable.java, +    @SchedulerSupport(SchedulerSupport.CUSTOM), +        return o.subscribeOn(scheduler);, +++ b/src/main/java/io/reactivex/Observable.java, +    @SchedulerSupport(SchedulerSupport.CUSTOM), +        return o.subscribeOn(scheduler);, +++ b/src/main/java/io/reactivex/Flowable.java, +    @SchedulerSupport(SchedulerSupport.CUSTOM), +        return o.subscribeOn(scheduler);, +++ b/src/main/java/io/reactivex/Observable.java, +    @SchedulerSupport(SchedulerSupport.CUSTOM), +        return o.subscribeOn(scheduler);, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableToObservableFutureTest.java, +import io.reactivex.schedulers.*;, +    public void testSuccessOperatesOnSuppliedScheduler() throws Exception {, +        @SuppressWarnings("unchecked"), +        Future<Object> future = mock(Future.class);, +        Object value = new Object();, +        when(future.get()).thenReturn(value);, +, +        Subscriber<Object> o = TestHelper.mockSubscriber();, +, +        TestScheduler scheduler = new TestScheduler();, +        TestSubscriber<Object> ts = new TestSubscriber<Object>(o);, +, +        Flowable.fromFuture(future, scheduler).subscribe(ts);, +, +        verify(o, never()).onNext(value);, +, +        scheduler.triggerActions();, +, +        verify(o, times(1)).onNext(value);, +    }, +, +    @Test, +++ b/src/main/java/io/reactivex/Flowable.java, +    @SchedulerSupport(SchedulerSupport.CUSTOM), +        return o.subscribeOn(scheduler);, +++ b/src/main/java/io/reactivex/Observable.java, +    @SchedulerSupport(SchedulerSupport.CUSTOM), +        return o.subscribeOn(scheduler);, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableToObservableFutureTest.java, +import io.reactivex.schedulers.*;, +    public void testSuccessOperatesOnSuppliedScheduler() throws Exception {, +        @SuppressWarnings("unchecked"), +        Future<Object> future = mock(Future.class);, +        Object value = new Object();, +        when(future.get()).thenReturn(value);, +, +        Subscriber<Object> o = TestHelper.mockSubscriber();, +, +        TestScheduler scheduler = new TestScheduler();, +        TestSubscriber<Object> ts = new TestSubscriber<Object>(o);, +, +        Flowable.fromFuture(future, scheduler).subscribe(ts);, +, +        verify(o, never()).onNext(value);, +, +        scheduler.triggerActions();, +, +        verify(o, times(1)).onNext(value);, +    }, +, +    @Test, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableToFutureTest.java, +import io.reactivex.schedulers.*;, +    public void testSuccessOperatesOnSuppliedScheduler() throws Exception {, +        @SuppressWarnings("unchecked"), +        Future<Object> future = mock(Future.class);, +        Object value = new Object();, +        when(future.get()).thenReturn(value);, +, +        Observer<Object> o = TestHelper.mockObserver();, +, +        TestScheduler scheduler = new TestScheduler();, +        TestObserver<Object> ts = new TestObserver<Object>(o);, +, +        Observable.fromFuture(future, scheduler).subscribe(ts);, +, +        verify(o, never()).onNext(value);, +, +        scheduler.triggerActions();, +, +        verify(o, times(1)).onNext(value);, +    }, +, +    @Test]