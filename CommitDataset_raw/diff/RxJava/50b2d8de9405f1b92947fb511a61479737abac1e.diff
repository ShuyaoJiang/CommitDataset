[+++ b/src/main/java/rx/internal/operators/OperatorObserveOn.java, +                    if (failure) {, +                        // special handling to short-circuit an error propagation, +                        Object o = queue.poll();, +                        // completed so we will skip onNext if they exist and only emit terminal events, +                        if (on.isError(o)) {, +                            // only emit error, +                            on.accept(child, o);, +                            // we have emitted a terminal event so return (exit the loop we're in), +                            return;, +                        }, +                    } else {, +                }, +++ b/src/main/java/rx/internal/operators/OperatorObserveOn.java, +                    if (failure) {, +                        // special handling to short-circuit an error propagation, +                        Object o = queue.poll();, +                        // completed so we will skip onNext if they exist and only emit terminal events, +                        if (on.isError(o)) {, +                            // only emit error, +                            on.accept(child, o);, +                            // we have emitted a terminal event so return (exit the loop we're in), +                            return;, +                        }, +                    } else {, +                }, +++ b/src/test/java/rx/internal/operators/OperatorObserveOnTest.java, +import org.junit.Ignore;, +import rx.Notification;, +import rx.functions.Func2;, +        Observable.timer(0, 1, TimeUnit.MICROSECONDS), +        assertEquals(1, ts.getOnErrorEvents().size());, +        assertEquals(MissingBackpressureException.class, ts.getOnErrorEvents().get(0).getClass());, +    }, +, +    @Test, +    public void testErrorPropagatesWhenNoOutstandingRequests() {, +        Observable<Long> timer = Observable.timer(0, 1, TimeUnit.MICROSECONDS), +                .doOnEach(new Action1<Notification<? super Long>>() {, +, +                    @Override, +                    public void call(Notification<? super Long> n) {, +                        //                        System.out.println("BEFORE " + n);, +                    }, +, +                }), +                .observeOn(Schedulers.newThread()), +                .doOnEach(new Action1<Notification<? super Long>>() {, +, +                    @Override, +                    public void call(Notification<? super Long> n) {, +                        //                        System.out.println("AFTER " + n);, +                    }, +, +                });, +, +        TestSubscriber<Long> ts = new TestSubscriber<Long>();, +, +        Observable.combineLatest(timer, Observable.<Integer> never(), new Func2<Long, Integer, Long>() {, +, +            @Override, +            public Long call(Long t1, Integer t2) {, +                return t1;, +            }, +, +        }).take(RxRingBuffer.SIZE * 2).subscribe(ts);, +, +        ts.awaitTerminalEvent();, +        assertEquals(1, ts.getOnErrorEvents().size());]