[+++ b/build.gradle, +sourceCompatibility = JavaVersion.VERSION_1_6, +targetCompatibility = JavaVersion.VERSION_1_6, +++ b/build.gradle, +sourceCompatibility = JavaVersion.VERSION_1_6, +targetCompatibility = JavaVersion.VERSION_1_6, +++ b/src/main/java/io/reactivex/BackpressureStrategy.java, + * Copyright 2016 Netflix, Inc., +++ b/build.gradle, +sourceCompatibility = JavaVersion.VERSION_1_6, +targetCompatibility = JavaVersion.VERSION_1_6, +++ b/src/main/java/io/reactivex/BackpressureStrategy.java, + * Copyright 2016 Netflix, Inc., +++ b/src/main/java/io/reactivex/Completable.java, +/**, + * Copyright 2016 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +package io.reactivex;, +, +import java.util.Iterator;, +import java.util.concurrent.*;, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import org.reactivestreams.*;, +, +import io.reactivex.NbpObservable.*;, +import io.reactivex.Single.*;, +import io.reactivex.annotations.*;, +import io.reactivex.disposables.*;, +import io.reactivex.exceptions.CompositeException;, +import io.reactivex.functions.*;, +import io.reactivex.internal.disposables.*;, +import io.reactivex.internal.functions.*;, +import io.reactivex.internal.operators.completable.*;, +import io.reactivex.internal.subscriptions.DisposableSubscription;, +import io.reactivex.internal.util.Exceptions;, +import io.reactivex.plugins.RxJavaPlugins;, +import io.reactivex.schedulers.Schedulers;, +, +/**, + * Represents a deferred computation without any value but only indication for completion or exception., + * , + * The class follows a similar event pattern as Reactive-Streams: onSubscribe (onError|onComplete)?, + */, +public class Completable {, +    /**, +     * Callback used for building deferred computations that takes a CompletableSubscriber., +     */, +    public interface CompletableOnSubscribe extends Consumer<CompletableSubscriber> {, +        , +    }, +    , +    /**, +     * Convenience interface and callback used by the lift operator that given a child CompletableSubscriber,, +     * return a parent CompletableSubscriber that does any kind of lifecycle-related transformations., +     */, +    public interface CompletableOperator extends Function<CompletableSubscriber, CompletableSubscriber> {, +        , +    }, +    , +    /**, +     * Represents the subscription API callbacks when subscribing to a Completable instance., +     */, +    public interface CompletableSubscriber {, +        /**, +         * Called once the deferred computation completes normally., +         */, +        void onComplete();, +        , +        /**, +         * Called once if the deferred computation 'throws' an exception., +         * @param e the exception, not null., +         */, +        void onError(Throwable e);, +        , +        /**, +         * Called once by the Completable to set a Disposable on this instance which, +         * then can be used to cancel the subscription at any time., +         * @param d the Disposable instance to call dispose on for cancellation, not null, +         */, +        void onSubscribe(Disposable d);, +    }, +    , +    /**, +     * Convenience interface and callback used by the compose operator to turn a Completable into another, +     * Completable fluently., +     */, +    public interface CompletableTransformer extends Function<Completable, Completable> {, +        , +    }, +    ]