[+++ b/src/main/java/rx/Observable.java, +        return reduce(0, CountHolder.INSTANCE);, +    , +    private static final class CountHolder {, +        static final Func2<Integer, Object, Integer> INSTANCE = new Func2<Integer, Object, Integer>() {, +            @Override, +            public final Integer call(Integer count, Object o) {, +                return count + 1;, +            }, +        };, +        return reduce(0L, CountLongHolder.INSTANCE);, +, +    private static final class CountLongHolder {, +        static final Func2<Long, Object, Long> INSTANCE = new Func2<Long, Object, Long>() {, +            @Override, +            public final Long call(Long count, Object o) {, +                return count + 1;, +            }, +        };, +++ b/src/main/java/rx/Observable.java, +        return reduce(0, CountHolder.INSTANCE);, +    , +    private static final class CountHolder {, +        static final Func2<Integer, Object, Integer> INSTANCE = new Func2<Integer, Object, Integer>() {, +            @Override, +            public final Integer call(Integer count, Object o) {, +                return count + 1;, +            }, +        };, +        return reduce(0L, CountLongHolder.INSTANCE);, +, +    private static final class CountLongHolder {, +        static final Func2<Long, Object, Long> INSTANCE = new Func2<Long, Object, Long>() {, +            @Override, +            public final Long call(Long count, Object o) {, +                return count + 1;, +            }, +        };, +++ b/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +        if (!it.hasNext() && !o.isUnsubscribed()), +            o.onCompleted();, +        else , +++ b/src/main/java/rx/Observable.java, +        return reduce(0, CountHolder.INSTANCE);, +    , +    private static final class CountHolder {, +        static final Func2<Integer, Object, Integer> INSTANCE = new Func2<Integer, Object, Integer>() {, +            @Override, +            public final Integer call(Integer count, Object o) {, +                return count + 1;, +            }, +        };, +        return reduce(0L, CountLongHolder.INSTANCE);, +, +    private static final class CountLongHolder {, +        static final Func2<Long, Object, Long> INSTANCE = new Func2<Long, Object, Long>() {, +            @Override, +            public final Long call(Long count, Object o) {, +                return count + 1;, +            }, +        };, +++ b/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +        if (!it.hasNext() && !o.isUnsubscribed()), +            o.onCompleted();, +        else , +++ b/src/main/java/rx/internal/operators/OperatorConcat.java, +            request(1);, +++ b/src/main/java/rx/Observable.java, +        return reduce(0, CountHolder.INSTANCE);, +    , +    private static final class CountHolder {, +        static final Func2<Integer, Object, Integer> INSTANCE = new Func2<Integer, Object, Integer>() {, +            @Override, +            public final Integer call(Integer count, Object o) {, +                return count + 1;, +            }, +        };, +        return reduce(0L, CountLongHolder.INSTANCE);, +, +    private static final class CountLongHolder {, +        static final Func2<Long, Object, Long> INSTANCE = new Func2<Long, Object, Long>() {, +            @Override, +            public final Long call(Long count, Object o) {, +                return count + 1;, +            }, +        };, +++ b/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +        if (!it.hasNext() && !o.isUnsubscribed()), +            o.onCompleted();, +        else , +++ b/src/main/java/rx/internal/operators/OperatorConcat.java, +            request(1);, +++ b/src/test/java/rx/exceptions/ExceptionsTest.java, +import java.util.concurrent.atomic.AtomicInteger;, +, +    @Test, +    public void testStackOverflowWouldOccur() {, +        final int MAX_STACK_DEPTH = 1000;, +        final AtomicInteger depth = new AtomicInteger();, +            public void onNext(Integer n) {]