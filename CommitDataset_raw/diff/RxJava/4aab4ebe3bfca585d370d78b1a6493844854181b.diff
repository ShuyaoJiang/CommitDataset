[+++ /dev/null, +++ /dev/null, +++ b/src/main/java/io/reactivex/BackpressureOverflowStrategy.java, +/**, + * Copyright 2016 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package io.reactivex;, +, +/**, + * Options to deal with buffer overflow when using onBackpressureBuffer., + */, +public enum BackpressureOverflowStrategy {, +    /** Signal a MissingBackpressureException and terminate the sequence. */, +    ERROR,, +    /** Drop the oldest value from the buffer. */, +    DROP_OLDEST,, +    /** Drop the latest value from the buffer. */, +    DROP_LATEST, +}, +++ /dev/null, +++ b/src/main/java/io/reactivex/BackpressureOverflowStrategy.java, +/**, + * Copyright 2016 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package io.reactivex;, +, +/**, + * Options to deal with buffer overflow when using onBackpressureBuffer., + */, +public enum BackpressureOverflowStrategy {, +    /** Signal a MissingBackpressureException and terminate the sequence. */, +    ERROR,, +    /** Drop the oldest value from the buffer. */, +    DROP_OLDEST,, +    /** Drop the latest value from the buffer. */, +    DROP_LATEST, +}, +++ b/src/main/java/io/reactivex/Flowable.java, +        verifyPositive(bufferSize, "bufferSize");, +        verifyPositive(bufferSize, "bufferSize");, +        verifyPositive(bufferSize, "bufferSize");, +        verifyPositive(bufferSize, "bufferSize");, +        verifyPositive(bufferSize, "bufferSize");, +     * @param value the value to validate, +    private static void verifyPositive(int value, String paramName) {, +        if (value <= 0) {, +            throw new IllegalArgumentException(paramName + " > 0 required but it was " + value);, +        }, +    }, +, +    /**, +     * Validate that the given value is positive or report an IllegalArgumentException with, +     * the parameter name., +     * @param value the value to validate, +     * @param paramName the parameter name of the value, +     * @throws IllegalArgumentException if bufferSize &lt;= 0, +     */, +    private static void verifyPositive(long value, String paramName) {, +        if (value <= 0L) {, +            throw new IllegalArgumentException(paramName + " > 0 required but it was " + value);, +        verifyPositive(bufferSize, "bufferSize");, +        verifyPositive(bufferSize, "bufferSize");, +        verifyPositive(count, "count");, +        verifyPositive(initialCapacity, "initialCapacity");, +        verifyPositive(prefetch, "prefetch");, +        verifyPositive(prefetch, "prefetch");, +        verifyPositive(maxConcurrency, "maxConcurrency");, +        verifyPositive(prefetch, "prefetch");, +        verifyPositive(maxConcurrency, "maxConcurrency");, +        verifyPositive(bufferSize, "bufferSize");, +        verifyPositive(bufferSize, "bufferSize");, +        verifyPositive(bufferSize, "bufferSize");, +        verifyPositive(capacity, "bufferSize");, +    public final Publisher<T> onBackpressureBuffer(long capacity, Action onOverflow, BackpressureOverflowStrategy overflowStrategy) {, +        Objects.requireNonNull(overflowStrategy, "strategy is null");, +        verifyPositive(capacity, "capacity");]