[+++ b/src/main/java/io/reactivex/Notification.java, +import io.reactivex.annotations.*;, +    @Nullable, +    @Nullable, +    @NonNull, +    public static <T> Notification<T> createOnNext(@NonNull T value) {, +    @NonNull, +    public static <T> Notification<T> createOnError(@NonNull Throwable error) {, +    @NonNull, +++ b/src/main/java/io/reactivex/Notification.java, +import io.reactivex.annotations.*;, +    @Nullable, +    @Nullable, +    @NonNull, +    public static <T> Notification<T> createOnNext(@NonNull T value) {, +    @NonNull, +    public static <T> Notification<T> createOnError(@NonNull Throwable error) {, +    @NonNull, +++ b/src/main/java/io/reactivex/Observer.java, +import io.reactivex.annotations.NonNull;, +    void onSubscribe(@NonNull Disposable d);, +    void onNext(@NonNull T t);, +    void onError(@NonNull Throwable e);, +++ b/src/main/java/io/reactivex/Notification.java, +import io.reactivex.annotations.*;, +    @Nullable, +    @Nullable, +    @NonNull, +    public static <T> Notification<T> createOnNext(@NonNull T value) {, +    @NonNull, +    public static <T> Notification<T> createOnError(@NonNull Throwable error) {, +    @NonNull, +++ b/src/main/java/io/reactivex/Observer.java, +import io.reactivex.annotations.NonNull;, +    void onSubscribe(@NonNull Disposable d);, +    void onNext(@NonNull T t);, +    void onError(@NonNull Throwable e);, +++ b/src/main/java/io/reactivex/Single.java, +import org.reactivestreams.Publisher;, +    protected abstract void subscribeActual(@NonNull SingleObserver<? super T> observer);, +++ b/src/main/java/io/reactivex/Notification.java, +import io.reactivex.annotations.*;, +    @Nullable, +    @Nullable, +    @NonNull, +    public static <T> Notification<T> createOnNext(@NonNull T value) {, +    @NonNull, +    public static <T> Notification<T> createOnError(@NonNull Throwable error) {, +    @NonNull, +++ b/src/main/java/io/reactivex/Observer.java, +import io.reactivex.annotations.NonNull;, +    void onSubscribe(@NonNull Disposable d);, +    void onNext(@NonNull T t);, +    void onError(@NonNull Throwable e);, +++ b/src/main/java/io/reactivex/Single.java, +import org.reactivestreams.Publisher;, +    protected abstract void subscribeActual(@NonNull SingleObserver<? super T> observer);, +++ b/src/main/java/io/reactivex/disposables/ActionDisposable.java, +import io.reactivex.annotations.NonNull;, +    protected void onDisposed(@NonNull Action value) {, +++ b/src/main/java/io/reactivex/Notification.java, +import io.reactivex.annotations.*;, +    @Nullable, +    @Nullable, +    @NonNull, +    public static <T> Notification<T> createOnNext(@NonNull T value) {, +    @NonNull, +    public static <T> Notification<T> createOnError(@NonNull Throwable error) {, +    @NonNull, +++ b/src/main/java/io/reactivex/Observer.java, +import io.reactivex.annotations.NonNull;, +    void onSubscribe(@NonNull Disposable d);, +    void onNext(@NonNull T t);, +    void onError(@NonNull Throwable e);, +++ b/src/main/java/io/reactivex/Single.java, +import org.reactivestreams.Publisher;, +    protected abstract void subscribeActual(@NonNull SingleObserver<? super T> observer);, +++ b/src/main/java/io/reactivex/disposables/ActionDisposable.java, +import io.reactivex.annotations.NonNull;, +    protected void onDisposed(@NonNull Action value) {, +++ b/src/main/java/io/reactivex/disposables/CompositeDisposable.java, +import io.reactivex.annotations.NonNull;, +    public CompositeDisposable(@NonNull Disposable... resources) {, +    public CompositeDisposable(@NonNull Iterable<? extends Disposable> resources) {, +    public boolean add(@NonNull Disposable d) {, +    public boolean addAll(@NonNull Disposable... ds) {, +    public boolean remove(@NonNull Disposable d) {, +    public boolean delete(@NonNull Disposable d) {, +++ b/src/main/java/io/reactivex/Notification.java, +import io.reactivex.annotations.*;, +    @Nullable, +    @Nullable, +    @NonNull, +    public static <T> Notification<T> createOnNext(@NonNull T value) {, +    @NonNull, +    public static <T> Notification<T> createOnError(@NonNull Throwable error) {, +    @NonNull, +++ b/src/main/java/io/reactivex/Observer.java, +import io.reactivex.annotations.NonNull;, +    void onSubscribe(@NonNull Disposable d);]