[+++ b/rxjava-core/src/main/java/rx/Observable.java, + * This interface provides overloaded methods for subscribing as well as delegate methods to the, + * various operators., + * For more information see the <a href="https://github.com/Netflix/RxJava/wiki/Observable">RxJava, + * Wiki</a>, +//TODO use a consistent parameter naming scheme (for example: for all operators that modify a source Observable, the parameter representing that source Observable should have the same name, e.g. "source" -- currently such parameters are named any of "sequence", "that", "source", "items", or "observable"), +, +     * NOTE: Use {@link #create(Func1)} to create an Observable instead of this method unless you, +     * specifically have a need for inheritance., +     * receive items and notifications from the Observable. A typical implementation of, +     * <code>subscribe</code> does the following:, +     * It stores a reference to the Observer in a collection object, such as a, +     * <code>List&lt;T&gt;</code> object., +     * unsubscribe, that is, to stop receiving items and notifications before the Observable stops, +     * sending them, which also invokes the Observer's {@link Observer#onCompleted onCompleted}, +     * method., +     * An <code>Observable&lt;T&gt;</code> instance is responsible for accepting all subscriptions, +     * and notifying all Observers. Unless the documentation for a particular, +     * <code>Observable&lt;T&gt;</code> implementation indicates otherwise, Observers should make no, +     * assumptions about the order in which multiple Observers will receive their notifications., +     * For more information see the, +     * <a href="https://github.com/Netflix/RxJava/wiki/Observable">RxJava Wiki</a>, +     * @return a {@link Subscription} reference with which the Observer can stop receiving items, +     *         before the Observable has finished sending them, +     *             if the {@link Observer} provided as the argument to <code>subscribe()</code> is, +     *             <code>null</code>, +     * receive items and notifications from the Observable. A typical implementation of, +     * <code>subscribe</code> method does the following:, +     * It stores a reference to the Observer in a collection object, such as a, +     * <code>List&lt;T&gt;</code> object., +     * unsubscribe, that is, to stop receiving items and notifications before the Observable stops, +     * sending them, which also invokes the Observer's {@link Observer#onCompleted onCompleted}, +     * method., +     * An <code>Observable&lt;T&gt;</code> instance is responsible for accepting all subscriptions, +     * and notifying all Observers. Unless the documentation for a particular, +     * <code>Observable&lt;T&gt;</code> implementation indicates otherwise, Observers should make no, +     * assumptions about the order in which multiple Observers will receive their notifications., +     * For more information see the, +     * <a href="https://github.com/Netflix/RxJava/wiki/Observable">RxJava Wiki</a>, +     * @return a {@link Subscription} reference with which Observers can stop receiving items and, +     * Returns a {@link ConnectableObservable} that upon connection causes the source Observable to, +     *            the {@link Subject} for the {@link ConnectableObservable} to push source items, +     *            into, +     * @return a {@link ConnectableObservable} that upon connection causes the source Observable to, +     *         push results into the specified {@link Subject}, +     * an Observable that invokes {@link Observer#onError onError} when the {@link Observer}, +     * subscribes to it., +                 * Accepts an {@link Observer} and calls its {@link Observer#onError onError} method., +     * Creates an Observable that will execute the given function when an {@link Observer}, +     * should invoke the Observer's {@link Observer#onNext onNext},, +     * {@link Observer#onError onError}, and {@link Observer#onCompleted onCompleted} methods, +     * appropriately., +     * A well-formed Observable must invoke either the Observer's <code>onCompleted</code> method, +     * exactly once or its <code>onError</code> method exactly once., +     *            a function that accepts an <code>Observer&lt;T&gt;</code>, invokes its, +     *            as appropriate, and returns a {@link Subscription} to allow the Observer to, +     *            canceling the subscription, +     * Creates an Observable that will execute the given function when an {@link Observer}, +     * should invoke the Observer's {@link Observer#onNext onNext},, +     * {@link Observer#onError onError}, and {@link Observer#onCompleted onCompleted} methods, +     * appropriately., +     * A well-formed Observable must invoke either the Observer's <code>onCompleted</code> method, +     * exactly once or its <code>onError</code> method exactly once., +     *            a function that accepts an <code>Observer&lt;T&gt;</code>, invokes its, +     *            as appropriate, and returns a {@link Subscription} that allows the Observer to, +     *            cancel the subscription, +     * its {@link Observer#onCompleted onCompleted} method., +     *         the {@link Observer}'s {@link Observer#onCompleted() onCompleted} method, +     * Returns an Observable that invokes an {@link Observer}'s {@link Observer#onError onError}, +     * method when the Observer subscribes to it, +     *            the particular error to report, +     * @return an Observable that invokes the {@link Observer}'s, +     *         {@link Observer#onError onError} method when the Observer subscribes to it, +     * @return an Observable that emits only those items emitted by the source Observable that the, +     *         filter evaluates as <code>true</code>, +     * @return an Observable that emits only those items emitted by the source Observable that the, +     *         filter evaluates as <code>true</code>, +     * @return an Observable that emits only those items emitted by the source Observable that the, +     *         filter evaluates as <code>true</code>, +     * Converts an {@link Iterable} sequence into an Observable., +     *            the type of items in the {@link Iterable} sequence and the type of items to be, +     *            emitted by the resulting Observable, +     * Converts an Array into an Observable., +     *            the type of items in the Array, and the type of items to be emitted by the, +     *            resulting Observable, +     * Generates an Observable that emits a sequence of integers within a specified range., +     * Asynchronously subscribes and unsubscribes Observers on the specified {@link Scheduler}., +     *            the {@link Scheduler} to perform subscription and unsubscription actions on, +     *         on the specified {@link Scheduler}, +     * Asynchronously notify Observers on the specified {@link Scheduler}., +     *            the {@link Scheduler} to notify Observers on, +     *         {@link Scheduler}, +     * Returns an Observable that calls an Observable factory to create its Observable for each, +     * new Observer that subscribes., +     * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/defer.png">, +     * <p>, +     * The defer operator allows you to defer or delay emitting items from an Observable until such, +     * time as an Observer subscribes to the Observable. This allows an {@link Observer} to easily, +     * obtain updates or a refreshed version of the sequence., +     *            the Observable factory function to invoke for each {@link Observer} that]