[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.util.OnErrorNotImplementedException;, +        } catch (OnErrorNotImplementedException e) {, +            // special handling when onError is not implemented ... we just rethrow, +            throw e;, +            } catch (OnErrorNotImplementedException e2) {, +                // special handling when onError is not implemented ... we just rethrow, +                throw e2;, +                } else {, +                    throw new OnErrorNotImplementedException(e);, +                throw new OnErrorNotImplementedException(e);, +                throw new OnErrorNotImplementedException(e);, +        /**, +         * https://github.com/Netflix/RxJava/issues/198, +         * , +         * Rx Design Guidelines 5.2, +         * , +         * "when calling the Subscribe method that only has an onNext argument, the OnError behavior will be, +         * to rethrow the exception on the thread that the message comes out from the observable sequence., +         * The OnCompleted behavior in this case is to do nothing.", +         */, +        @Test, +        public void testErrorThrownWithoutErrorHandlerSynchronous() {, +            try {, +                error(new RuntimeException("failure")).subscribe(new Action1<Object>() {, +, +                    @Override, +                    public void call(Object t1) {, +                        // won't get anything, +                    }, +, +                });, +                fail("expected exception");, +            } catch (Exception e) {, +                assertEquals("failure", e.getMessage());, +            }, +        }, +, +        /**, +         * https://github.com/Netflix/RxJava/issues/198, +         * , +         * Rx Design Guidelines 5.2, +         * , +         * "when calling the Subscribe method that only has an onNext argument, the OnError behavior will be, +         * to rethrow the exception on the thread that the message comes out from the observable sequence., +         * The OnCompleted behavior in this case is to do nothing.", +         * , +         * @throws InterruptedException, +         */, +        @Test, +        public void testErrorThrownWithoutErrorHandlerAsynchronous() throws InterruptedException {, +            final CountDownLatch latch = new CountDownLatch(1);, +            final AtomicReference<Exception> exception = new AtomicReference<Exception>();, +            Observable.create(new Func1<Observer<String>, Subscription>() {, +, +                @Override, +                public Subscription call(final Observer<String> observer) {, +                    new Thread(new Runnable() {, +, +                        @Override, +                        public void run() {, +                            try {, +                                observer.onError(new RuntimeException("failure"));, +                            } catch (Exception e) {, +                                // without an onError handler it has to just throw on whatever thread invokes it, +                                exception.set(e);, +                            }, +                            latch.countDown();, +                        }, +                    }).start();, +                    return Subscriptions.empty();, +                }, +            }).subscribe(new Action1<Object>() {, +, +                @Override, +                public void call(Object t1) {, +, +                }, +, +            });, +            // wait for exception, +            latch.await(3000, TimeUnit.MILLISECONDS);, +            assertNotNull(exception.get());, +            assertEquals("failure", exception.get().getMessage());, +        }, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.util.OnErrorNotImplementedException;, +        } catch (OnErrorNotImplementedException e) {, +            // special handling when onError is not implemented ... we just rethrow, +            throw e;, +            } catch (OnErrorNotImplementedException e2) {, +                // special handling when onError is not implemented ... we just rethrow, +                throw e2;, +                } else {, +                    throw new OnErrorNotImplementedException(e);, +                throw new OnErrorNotImplementedException(e);, +                throw new OnErrorNotImplementedException(e);, +        /**, +         * https://github.com/Netflix/RxJava/issues/198, +         * ]