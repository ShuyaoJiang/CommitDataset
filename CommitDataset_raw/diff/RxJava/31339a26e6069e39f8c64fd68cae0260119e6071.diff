[+++ b/src/main/java/rx/internal/operators/BackpressureUtils.java, +public final class BackpressureUtils {, +    /** Utility class, no instances. */, +    private BackpressureUtils() {, +        throw new IllegalStateException("No instances!");, +    }, +    public static <T> long getAndAddRequest(AtomicLongFieldUpdater<T> requested, T object, long n) {, +            if (next < 0) {, +            }, +            if (requested.compareAndSet(object, current, next)) {, +    }, +    public static long getAndAddRequest(AtomicLong requested, long n) {, +            if (next < 0) {, +            }, +            if (requested.compareAndSet(current, next)) {, +}, +++ b/src/main/java/rx/internal/operators/BackpressureUtils.java, +public final class BackpressureUtils {, +    /** Utility class, no instances. */, +    private BackpressureUtils() {, +        throw new IllegalStateException("No instances!");, +    }, +    public static <T> long getAndAddRequest(AtomicLongFieldUpdater<T> requested, T object, long n) {, +            if (next < 0) {, +            }, +            if (requested.compareAndSet(object, current, next)) {, +    }, +    public static long getAndAddRequest(AtomicLong requested, long n) {, +            if (next < 0) {, +            }, +            if (requested.compareAndSet(current, next)) {, +}, +++ b/src/main/java/rx/internal/operators/OperatorDoOnRequest.java, +, +++ b/src/main/java/rx/internal/operators/BackpressureUtils.java, +public final class BackpressureUtils {, +    /** Utility class, no instances. */, +    private BackpressureUtils() {, +        throw new IllegalStateException("No instances!");, +    }, +    public static <T> long getAndAddRequest(AtomicLongFieldUpdater<T> requested, T object, long n) {, +            if (next < 0) {, +            }, +            if (requested.compareAndSet(object, current, next)) {, +    }, +    public static long getAndAddRequest(AtomicLong requested, long n) {, +            if (next < 0) {, +            }, +            if (requested.compareAndSet(current, next)) {, +}, +++ b/src/main/java/rx/internal/operators/OperatorDoOnRequest.java, +, +++ b/src/main/java/rx/observables/AbstractOnSubscribe.java, +import rx.internal.operators.BackpressureUtils;, +            if (n > 0 && BackpressureUtils.getAndAddRequest(state.requestCount, n) == 0) {, +                    // fast-path, +++ b/src/main/java/rx/internal/operators/BackpressureUtils.java, +public final class BackpressureUtils {, +    /** Utility class, no instances. */, +    private BackpressureUtils() {, +        throw new IllegalStateException("No instances!");, +    }, +    public static <T> long getAndAddRequest(AtomicLongFieldUpdater<T> requested, T object, long n) {, +            if (next < 0) {, +            }, +            if (requested.compareAndSet(object, current, next)) {, +    }, +    public static long getAndAddRequest(AtomicLong requested, long n) {, +            if (next < 0) {, +            }, +            if (requested.compareAndSet(current, next)) {, +}, +++ b/src/main/java/rx/internal/operators/OperatorDoOnRequest.java, +, +++ b/src/main/java/rx/observables/AbstractOnSubscribe.java, +import rx.internal.operators.BackpressureUtils;, +            if (n > 0 && BackpressureUtils.getAndAddRequest(state.requestCount, n) == 0) {, +                    // fast-path, +++ /dev/null, +++ b/src/main/java/rx/internal/operators/BackpressureUtils.java, +public final class BackpressureUtils {, +    /** Utility class, no instances. */, +    private BackpressureUtils() {, +        throw new IllegalStateException("No instances!");, +    }, +    public static <T> long getAndAddRequest(AtomicLongFieldUpdater<T> requested, T object, long n) {, +            if (next < 0) {, +            }, +            if (requested.compareAndSet(object, current, next)) {, +    }, +    public static long getAndAddRequest(AtomicLong requested, long n) {, +            if (next < 0) {, +            }, +            if (requested.compareAndSet(current, next)) {, +}, +++ b/src/main/java/rx/internal/operators/OperatorDoOnRequest.java, +, +++ b/src/main/java/rx/observables/AbstractOnSubscribe.java, +import rx.internal.operators.BackpressureUtils;, +            if (n > 0 && BackpressureUtils.getAndAddRequest(state.requestCount, n) == 0) {]