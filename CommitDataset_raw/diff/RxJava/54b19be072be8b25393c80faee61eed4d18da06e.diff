[+++ b/rxjava-core/src/test/java/rx/operators/OperatorSubscribeOnTest.java, +                    return group.nest().lift(new OperatorSubscribeOn<Integer>(Schedulers.newThread(), 0)), +                            .delay(400, TimeUnit.MILLISECONDS).map(new Func1<Integer, String>() {, +++ b/rxjava-core/src/test/java/rx/operators/OperatorSubscribeOnTest.java, +                    return group.nest().lift(new OperatorSubscribeOn<Integer>(Schedulers.newThread(), 0)), +                            .delay(400, TimeUnit.MILLISECONDS).map(new Func1<Integer, String>() {, +++ b/rxjava-core/src/test/java/rx/operators/OperatorTimeoutWithSelectorTest.java, +import rx.observers.TestSubscriber;, +                                        // if we are interrupted then we complete (as this can happen when unsubscribed), +                                        observerCompleted.countDown();, +                                }, +                            }));, +                                // if we are interrupted then we complete (as this can happen when unsubscribed), +                                observerCompleted.countDown();, +        final TestSubscriber<Integer> ts = new TestSubscriber<Integer>(o);, +, +                source.timeout(timeoutFunc, Observable.from(3)).subscribe(ts);]