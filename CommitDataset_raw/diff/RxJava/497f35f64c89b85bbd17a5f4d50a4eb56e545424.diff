[+++ b/src/main/java/io/reactivex/Maybe.java, +     * Wraps a CompletableSource into a Maybe., +     *, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code fromCompletable} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @param <T> the target type, +     * @param completableSource the CompletableSource to convert from, +     * @return the new Maybe instance, +     * @throws NullPointerException if completable is null, +     */, +    @SchedulerSupport(SchedulerSupport.NONE), +    public static <T> Maybe<T> fromCompletable(CompletableSource completableSource) {, +        ObjectHelper.requireNonNull(completableSource, "completableSource is null");, +        return RxJavaPlugins.onAssembly(new MaybeFromCompletable<T>(completableSource));, +    }, +, +    /**, +     * Wraps a SingleSource into a Maybe., +     *, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code fromSingle} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @param <T> the target type, +     * @param singleSource the SingleSource to convert from, +     * @return the new Maybe instance, +     * @throws NullPointerException if single is null, +     */, +    @SchedulerSupport(SchedulerSupport.NONE), +    public static <T> Maybe<T> fromSingle(SingleSource singleSource) {, +        ObjectHelper.requireNonNull(singleSource, "singleSource is null");, +        return RxJavaPlugins.onAssembly(new MaybeFromSingle<T>(singleSource));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/Maybe.java, +     * Wraps a CompletableSource into a Maybe., +     *, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code fromCompletable} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @param <T> the target type, +     * @param completableSource the CompletableSource to convert from, +     * @return the new Maybe instance, +     * @throws NullPointerException if completable is null, +     */, +    @SchedulerSupport(SchedulerSupport.NONE), +    public static <T> Maybe<T> fromCompletable(CompletableSource completableSource) {, +        ObjectHelper.requireNonNull(completableSource, "completableSource is null");, +        return RxJavaPlugins.onAssembly(new MaybeFromCompletable<T>(completableSource));, +    }, +, +    /**, +     * Wraps a SingleSource into a Maybe., +     *, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code fromSingle} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @param <T> the target type, +     * @param singleSource the SingleSource to convert from, +     * @return the new Maybe instance, +     * @throws NullPointerException if single is null, +     */, +    @SchedulerSupport(SchedulerSupport.NONE), +    public static <T> Maybe<T> fromSingle(SingleSource singleSource) {, +        ObjectHelper.requireNonNull(singleSource, "singleSource is null");, +        return RxJavaPlugins.onAssembly(new MaybeFromSingle<T>(singleSource));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableFromObservable.java, +        observable.subscribe(new CompletableFromObservableObserver<T>(s));, +    static final class CompletableFromObservableObserver<T> implements Observer<T> {, +        final CompletableObserver co;, +        CompletableFromObservableObserver(CompletableObserver co) {, +            this.co = co;, +            co.onSubscribe(d);, +        @Override, +        public void onNext(T value) {, +            // Deliberately ignored., +        }, +, +        @Override, +        public void onError(Throwable e) {, +            co.onError(e);, +        }, +, +        @Override, +        public void onComplete() {, +            co.onComplete();, +        }, +++ b/src/main/java/io/reactivex/Maybe.java, +     * Wraps a CompletableSource into a Maybe., +     *, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>]