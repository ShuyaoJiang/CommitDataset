[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferTimed.java, +                QueueDrainHelper.drainMaxLoop(queue, actual, false, null, this);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferTimed.java, +                QueueDrainHelper.drainMaxLoop(queue, actual, false, null, this);, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableBufferTimed.java, +                    QueueDrainHelper.drainLoop(queue, actual, false, null, this);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferTimed.java, +                QueueDrainHelper.drainMaxLoop(queue, actual, false, null, this);, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableBufferTimed.java, +                    QueueDrainHelper.drainLoop(queue, actual, false, null, this);, +++ b/src/main/java/io/reactivex/internal/util/QueueDrainHelper.java, +                    if (disposable != null) {, +                    }, +                    if (disposable != null) {, +                    }, +                    if (disposable != null) {, +                    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferTimed.java, +                QueueDrainHelper.drainMaxLoop(queue, actual, false, null, this);, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableBufferTimed.java, +                    QueueDrainHelper.drainLoop(queue, actual, false, null, this);, +++ b/src/main/java/io/reactivex/internal/util/QueueDrainHelper.java, +                    if (disposable != null) {, +                    }, +                    if (disposable != null) {, +                    }, +                    if (disposable != null) {, +                    }, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableBufferTest.java, +, +    @SuppressWarnings("unchecked"), +    @Test, +    public void noCompletionCancelExact() {, +        final AtomicInteger counter = new AtomicInteger();, +, +        Flowable.<Integer>empty(), +        .doOnCancel(new Action() {, +            @Override, +            public void run() throws Exception {, +                counter.getAndIncrement();, +            }, +        }), +        .buffer(5, TimeUnit.SECONDS), +        .test(), +        .awaitDone(5, TimeUnit.SECONDS), +        .assertResult(Collections.<Integer>emptyList());, +, +        assertEquals(0, counter.get());, +    }, +, +    @SuppressWarnings("unchecked"), +    @Test, +    public void noCompletionCancelSkip() {, +        final AtomicInteger counter = new AtomicInteger();, +, +        Flowable.<Integer>empty(), +        .doOnCancel(new Action() {, +            @Override, +            public void run() throws Exception {, +                counter.getAndIncrement();, +            }, +        }), +        .buffer(5, 10, TimeUnit.SECONDS), +        .test(), +        .awaitDone(5, TimeUnit.SECONDS), +        .assertResult(Collections.<Integer>emptyList());, +, +        assertEquals(0, counter.get());, +    }, +, +    @SuppressWarnings("unchecked"), +    @Test, +    public void noCompletionCancelOverlap() {, +        final AtomicInteger counter = new AtomicInteger();, +, +        Flowable.<Integer>empty(), +        .doOnCancel(new Action() {, +            @Override, +            public void run() throws Exception {, +                counter.getAndIncrement();, +            }, +        }), +        .buffer(10, 5, TimeUnit.SECONDS), +        .test(), +        .awaitDone(5, TimeUnit.SECONDS), +        .assertResult(Collections.<Integer>emptyList());, +, +        assertEquals(0, counter.get());, +    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferTimed.java, +                QueueDrainHelper.drainMaxLoop(queue, actual, false, null, this);, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableBufferTimed.java, +                    QueueDrainHelper.drainLoop(queue, actual, false, null, this);, +++ b/src/main/java/io/reactivex/internal/util/QueueDrainHelper.java, +                    if (disposable != null) {, +                    }, +                    if (disposable != null) {, +                    }, +                    if (disposable != null) {, +                    }]