[+++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/AsyncTest.java, +        assertEquals("one", Async.start(func).toBlocking().single());, +        Async.start(func).toBlocking().single();, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/AsyncTest.java, +        assertEquals("one", Async.start(func).toBlocking().single());, +        Async.start(func).toBlocking().single();, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperatorDeferFutureTest.java, +                            return Observable.just(1);, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/AsyncTest.java, +        assertEquals("one", Async.start(func).toBlocking().single());, +        Async.start(func).toBlocking().single();, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperatorDeferFutureTest.java, +                            return Observable.just(1);, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperatorForEachFutureTest.java, +            Observable<Integer> source = Observable.just(1, 2, 3), +        Observable<Integer> source = Observable.just(1, 2, 3), +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/AsyncTest.java, +        assertEquals("one", Async.start(func).toBlocking().single());, +        Async.start(func).toBlocking().single();, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperatorDeferFutureTest.java, +                            return Observable.just(1);, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperatorForEachFutureTest.java, +            Observable<Integer> source = Observable.just(1, 2, 3), +        Observable<Integer> source = Observable.just(1, 2, 3), +++ b/rxjava-contrib/rxjava-computation-expressions/src/main/java/rx/Statement.java, +        return switchCase(caseSelector, mapOfCases, Observable.<R> empty().subscribeOn(scheduler));, +        return ifThen(condition, then, Observable.<R> empty().subscribeOn(scheduler));, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/AsyncTest.java, +        assertEquals("one", Async.start(func).toBlocking().single());, +        Async.start(func).toBlocking().single();, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperatorDeferFutureTest.java, +                            return Observable.just(1);, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperatorForEachFutureTest.java, +            Observable<Integer> source = Observable.just(1, 2, 3), +        Observable<Integer> source = Observable.just(1, 2, 3), +++ b/rxjava-contrib/rxjava-computation-expressions/src/main/java/rx/Statement.java, +        return switchCase(caseSelector, mapOfCases, Observable.<R> empty().subscribeOn(scheduler));, +        return ifThen(condition, then, Observable.<R> empty().subscribeOn(scheduler));, +++ b/rxjava-contrib/rxjava-computation-expressions/src/test/java/rx/operators/OperatorConditionalsTest.java, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source2 = Observable.just(4, 5, 6);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source2 = Observable.just(4, 5, 6);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source2 = Observable.just(4, 5, 6);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source2 = Observable.just(4, 5, 6);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.concat(Observable.just(1, 2, 3),, +        Observable<Integer> source1 = Observable.just(1, 2, 3).subscribeOn(Schedulers.trampoline());, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.just(1, 2, 3).subscribeOn(Schedulers.trampoline());, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.concat(Observable.just(1, 2, 3),, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/AsyncTest.java, +        assertEquals("one", Async.start(func).toBlocking().single());, +        Async.start(func).toBlocking().single();, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperatorDeferFutureTest.java, +                            return Observable.just(1);, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperatorForEachFutureTest.java, +            Observable<Integer> source = Observable.just(1, 2, 3), +        Observable<Integer> source = Observable.just(1, 2, 3), +++ b/rxjava-contrib/rxjava-computation-expressions/src/main/java/rx/Statement.java, +        return switchCase(caseSelector, mapOfCases, Observable.<R> empty().subscribeOn(scheduler));, +        return ifThen(condition, then, Observable.<R> empty().subscribeOn(scheduler));, +++ b/rxjava-contrib/rxjava-computation-expressions/src/test/java/rx/operators/OperatorConditionalsTest.java, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source2 = Observable.just(4, 5, 6);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source2 = Observable.just(4, 5, 6);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source2 = Observable.just(4, 5, 6);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source2 = Observable.just(4, 5, 6);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.concat(Observable.just(1, 2, 3),, +        Observable<Integer> source1 = Observable.just(1, 2, 3).subscribeOn(Schedulers.trampoline());, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.just(1, 2, 3);, +        Observable<Integer> source1 = Observable.just(1, 2, 3).subscribeOn(Schedulers.trampoline());]