[+++ b/language-adaptors/rxjava-clojure/src/main/java/rx/lang/clojure/ClojureAdaptor.java, +import rx.Observer;, +++ b/language-adaptors/rxjava-clojure/src/main/java/rx/lang/clojure/ClojureAdaptor.java, +import rx.Observer;, +++ b/language-adaptors/rxjava-groovy/src/main/java/rx/lang/groovy/GroovyAdaptor.java, +import rx.Notification;, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +            binding.setVariable("o", rx.Observable.class);, +++ b/language-adaptors/rxjava-clojure/src/main/java/rx/lang/clojure/ClojureAdaptor.java, +import rx.Observer;, +++ b/language-adaptors/rxjava-groovy/src/main/java/rx/lang/groovy/GroovyAdaptor.java, +import rx.Notification;, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +            binding.setVariable("o", rx.Observable.class);, +++ b/language-adaptors/rxjava-jruby/src/main/java/rx/lang/jruby/JRubyAdaptor.java, +import rx.Notification;, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +++ b/language-adaptors/rxjava-clojure/src/main/java/rx/lang/clojure/ClojureAdaptor.java, +import rx.Observer;, +++ b/language-adaptors/rxjava-groovy/src/main/java/rx/lang/groovy/GroovyAdaptor.java, +import rx.Notification;, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +            binding.setVariable("o", rx.Observable.class);, +++ b/language-adaptors/rxjava-jruby/src/main/java/rx/lang/jruby/JRubyAdaptor.java, +import rx.Notification;, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +++ b/rxjava-core/src/main/java/rx/Notification.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx;, +, +/**, + * An object representing a notification sent to a Observable., + * , + * For the Microsoft Rx equivalent see: http://msdn.microsoft.com/en-us/library/hh229462(v=vs.103).aspx, + */, +public class Notification<T> {, +, +    private final Kind kind;, +    private final Exception exception;, +    private final T value;, +, +    /**, +     * A constructor used to represent an onNext notification., +     * , +     * @param value, +     *            The data passed to the onNext method., +     */, +    public Notification(T value) {, +        this.value = value;, +        this.exception = null;, +        this.kind = Kind.OnNext;, +    }, +, +    /**, +     * A constructor used to represent an onError notification., +     * , +     * @param exception, +     *            The exception passed to the onError notification., +     */, +    public Notification(Exception exception) {, +        this.exception = exception;, +        this.value = null;, +        this.kind = Kind.OnError;, +    }, +, +    /**, +     * A constructor used to represent an onCompleted notification., +     */, +    public Notification() {, +        this.exception = null;, +        this.value = null;, +        this.kind = Kind.OnCompleted;, +    }, +, +    /**, +     * Retrieves the exception associated with an onError notification.]