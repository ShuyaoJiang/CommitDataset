[+++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +import java.lang.reflect.Modifier, +    // TODO how can we filter out instance methods which were put into companion because , +    // of extends AnyVal in a way which does not depend on implementation-chosen name '$extension'?, +    .filter(! _.contains("$extension")), +  def getStaticJavaMethods(className: String): Iterable[String] = {, +    val c = Class.forName(className), +    for (method <- c.getMethods() if Modifier.isStatic(method.getModifiers)) yield {, +      method.getName + method.getParameterTypes().map(_.getSimpleName()).mkString("(", ", ", ")"), +    }, +  }, +  , +  def getObservableCompanionMethods: Iterable[String] = {, +    val tp = typeOf[rx.lang.scala.Observable.type], +    getPublicInstanceMethods(tp.typeSymbol.companionSymbol.typeSignature), +    // TODO how can we filter out instance methods which were put into companion because , +    // of extends AnyVal in a way which does not depend on implementation-chosen name '$extension'?, +    .filter(! _.contains("$extension")), +  }, +  , +  def printMethodSet(title: String, tp: Type) {, +    println("\n" + title), +    println(title.map(_ => '-') + "\n"), +    getPublicInstanceMethods(tp).toList.sorted.foreach(println(_)), +    printMethodSet("Instance methods of rx.Observable", , +                   typeOf[rx.Observable[_]]), +    printMethodSet("Instance methods of rx.lang.scala.Observable", , +                   typeOf[rx.lang.scala.Observable[_]]), +  }, +  , +  @Test def printJavaStaticMethods: Unit = {, +    printMethodSet("Static methods of rx.Observable", , +                   typeOf[rx.Observable[_]].typeSymbol.companionSymbol.typeSignature), +  }, +  , +  @Test def printScalaCompanionMethods: Unit = {, +    printMethodSet("Companion methods of rx.lang.scala.Observable",, +                   typeOf[rx.lang.scala.Observable.type])]