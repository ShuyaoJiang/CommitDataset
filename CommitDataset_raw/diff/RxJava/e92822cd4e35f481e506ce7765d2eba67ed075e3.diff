[+++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableFromCallable.java, +        return ObjectHelper.requireNonNull(callable.call(), "The callable returned a null value");, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableFromCallable.java, +        return ObjectHelper.requireNonNull(callable.call(), "The callable returned a null value");, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableFromCallableTest.java, +import static org.junit.Assert.*;, +import io.reactivex.functions.Function;, +, +    @Test, +    public void fusedFlatMapExecution() {, +        final int[] calls = { 0 };, +, +        Flowable.just(1).flatMap(new Function<Integer, Publisher<? extends Object>>() {, +            @Override, +            public Publisher<? extends Object> apply(Integer v), +                    throws Exception {, +                return Flowable.fromCallable(new Callable<Object>() {, +                    @Override, +                    public Object call() throws Exception {, +                        return ++calls[0];, +                    }, +                });, +            }, +        }), +        .test(), +        .assertResult(1);, +, +        assertEquals(1, calls[0]);, +    }, +, +    @Test, +    public void fusedFlatMapExecutionHidden() {, +        final int[] calls = { 0 };, +, +        Flowable.just(1).hide().flatMap(new Function<Integer, Publisher<? extends Object>>() {, +            @Override, +            public Publisher<? extends Object> apply(Integer v), +                    throws Exception {, +                return Flowable.fromCallable(new Callable<Object>() {, +                    @Override, +                    public Object call() throws Exception {, +                        return ++calls[0];, +                    }, +                });, +            }, +        }), +        .test(), +        .assertResult(1);, +, +        assertEquals(1, calls[0]);, +    }, +, +    @Test, +    public void fusedFlatMapNull() {, +        Flowable.just(1).flatMap(new Function<Integer, Publisher<? extends Object>>() {, +            @Override, +            public Publisher<? extends Object> apply(Integer v), +                    throws Exception {, +                return Flowable.fromCallable(new Callable<Object>() {, +                    @Override, +                    public Object call() throws Exception {, +                        return null;, +                    }, +                });, +            }, +        }), +        .test(), +        .assertFailure(NullPointerException.class);, +    }, +, +    @Test, +    public void fusedFlatMapNullHidden() {, +        Flowable.just(1).hide().flatMap(new Function<Integer, Publisher<? extends Object>>() {, +            @Override, +            public Publisher<? extends Object> apply(Integer v), +                    throws Exception {, +                return Flowable.fromCallable(new Callable<Object>() {, +                    @Override, +                    public Object call() throws Exception {, +                        return null;, +                    }, +                });, +            }, +        }), +        .test(), +        .assertFailure(NullPointerException.class);, +    }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableFromCallable.java, +        return ObjectHelper.requireNonNull(callable.call(), "The callable returned a null value");, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableFromCallableTest.java, +import static org.junit.Assert.*;, +import io.reactivex.functions.Function;, +, +    @Test, +    public void fusedFlatMapExecution() {, +        final int[] calls = { 0 };, +, +        Flowable.just(1).flatMap(new Function<Integer, Publisher<? extends Object>>() {, +            @Override, +            public Publisher<? extends Object> apply(Integer v)]