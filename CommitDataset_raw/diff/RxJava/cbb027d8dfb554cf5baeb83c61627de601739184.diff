[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java, +                    if (source instanceof Disposable) {, +                        ((Disposable)source).dispose();, +                    }, +                        if (source instanceof Disposable) {, +                            ((Disposable)source).dispose();, +                        }, +, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java, +                    if (source instanceof Disposable) {, +                        ((Disposable)source).dispose();, +                    }, +                        if (source instanceof Disposable) {, +                            ((Disposable)source).dispose();, +                        }, +, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java, +public final class FlowableReplay<T> extends ConnectableFlowable<T> implements HasUpstreamPublisher<T>, Disposable {, +    public void dispose() {, +        current.lazySet(null);, +    }, +, +    @Override, +    public boolean isDisposed() {, +        Disposable d = current.get();, +        return d == null || d.isDisposed();, +    }, +, +    @Override, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java, +                    if (source instanceof Disposable) {, +                        ((Disposable)source).dispose();, +                    }, +                        if (source instanceof Disposable) {, +                            ((Disposable)source).dispose();, +                        }, +, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java, +public final class FlowableReplay<T> extends ConnectableFlowable<T> implements HasUpstreamPublisher<T>, Disposable {, +    public void dispose() {, +        current.lazySet(null);, +    }, +, +    @Override, +    public boolean isDisposed() {, +        Disposable d = current.get();, +        return d == null || d.isDisposed();, +    }, +, +    @Override, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableRefCount.java, +                    if (source instanceof Disposable) {, +                        ((Disposable)source).dispose();, +                    }, +, +                        if (source instanceof Disposable) {, +                            ((Disposable)source).dispose();, +                        }, +, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java, +                    if (source instanceof Disposable) {, +                        ((Disposable)source).dispose();, +                    }, +                        if (source instanceof Disposable) {, +                            ((Disposable)source).dispose();, +                        }, +, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java, +public final class FlowableReplay<T> extends ConnectableFlowable<T> implements HasUpstreamPublisher<T>, Disposable {, +    public void dispose() {, +        current.lazySet(null);, +    }, +, +    @Override, +    public boolean isDisposed() {, +        Disposable d = current.get();, +        return d == null || d.isDisposed();, +    }, +, +    @Override, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableRefCount.java, +                    if (source instanceof Disposable) {, +                        ((Disposable)source).dispose();, +                    }, +, +                        if (source instanceof Disposable) {, +                            ((Disposable)source).dispose();, +                        }, +, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java, +public final class ObservableReplay<T> extends ConnectableObservable<T> implements HasUpstreamObservableSource<T>, Disposable {, +    public void dispose() {, +        current.lazySet(null);, +    }, +, +    @Override, +    public boolean isDisposed() {, +        Disposable d = current.get();, +        return d == null || d.isDisposed();, +    }]