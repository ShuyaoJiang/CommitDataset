[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorMergeMaxConcurrent;, +        return source.lift(new OperatorMergeMaxConcurrent(maxConcurrent)); // any idea how to get these generics working?!, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorMergeMaxConcurrent;, +        return source.lift(new OperatorMergeMaxConcurrent(maxConcurrent)); // any idea how to get these generics working?!, +++ b/rxjava-core/src/main/java/rx/operators/OperatorMerge.java, +            private volatile boolean completed = false;, +            private final AtomicInteger runningCount = new AtomicInteger();, +, +                completed = true;, +                if (runningCount.get() == 0) {, +                    o.onCompleted();, +                }, +                runningCount.incrementAndGet();, +                innerObservable.subscribe(new InnerObserver());, +                public InnerObserver() {, +                    super(o);, +                    if (runningCount.decrementAndGet() == 0 && completed) {, +                        o.onCompleted();, +                    }, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorMergeMaxConcurrent;, +        return source.lift(new OperatorMergeMaxConcurrent(maxConcurrent)); // any idea how to get these generics working?!, +++ b/rxjava-core/src/main/java/rx/operators/OperatorMerge.java, +            private volatile boolean completed = false;, +            private final AtomicInteger runningCount = new AtomicInteger();, +, +                completed = true;, +                if (runningCount.get() == 0) {, +                    o.onCompleted();, +                }, +                runningCount.incrementAndGet();, +                innerObservable.subscribe(new InnerObserver());, +                public InnerObserver() {, +                    super(o);, +                    if (runningCount.decrementAndGet() == 0 && completed) {, +                        o.onCompleted();, +                    }, +++ b/rxjava-core/src/main/java/rx/operators/OperatorMergeMaxConcurrent.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import java.util.concurrent.atomic.AtomicInteger;, +, +import rx.Observable;, +import rx.Scheduler;, +import rx.Scheduler.Inner;, +import rx.Subscriber;, +import rx.observers.SynchronizedSubscriber;, +import rx.schedulers.Schedulers;, +import rx.util.InterruptibleBlockingQueue;, +import rx.util.functions.Action1;, +, +/**, + * Flattens a list of Observables into one Observable sequence, without any transformation., + * <p>, + * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-Observers/merge.png">, + * <p>, + * You can combine the items emitted by multiple Observables so that they act like a single, + * Observable, by using the merge operation., + */, +public final class OperatorMergeMaxConcurrent<T> implements Operator<T, Observable<T>> {, +    private final int maxConcurrent;, +, +    public OperatorMergeMaxConcurrent(int maxConcurrent) {, +        if (maxConcurrent <= 0) {, +            throw new IllegalArgumentException("maxConcurrent must be positive");, +        }, +        this.maxConcurrent = maxConcurrent;, +    }, +, +    @Override, +    public Subscriber<Observable<T>> call(final Subscriber<? super T> outerOperation) {, +, +        final AtomicInteger concurrentCounter = new AtomicInteger(0);, +        final InterruptibleBlockingQueue<Observable<? extends T>> pending = new InterruptibleBlockingQueue<Observable<? extends T>>(maxConcurrent);, +        final Scheduler trampoline = Schedulers.trampoline();, +, +        final Subscriber<T> o = new SynchronizedSubscriber<T>(outerOperation);, +        return new Subscriber<Observable<T>>(outerOperation) {, +            private volatile boolean completed = false;, +, +            @Override, +            public void onCompleted() {, +                completed = true;]