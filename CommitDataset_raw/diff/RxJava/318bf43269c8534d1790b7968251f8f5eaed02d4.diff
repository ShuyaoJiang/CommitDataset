[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java, +            parent.innerCloseError(t);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java, +            parent.innerCloseError(t);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableInterval.java, +                    BackpressureHelper.produced(this, 1);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java, +            parent.innerCloseError(t);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableInterval.java, +                    BackpressureHelper.produced(this, 1);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java, +        JoinSubscription<TLeft, TRight, TLeftEnd, TRightEnd, R> parent =, +                new JoinSubscription<TLeft, TRight, TLeftEnd, TRightEnd, R>(s, leftEnd, rightEnd, resultSelector);, +    static final class JoinSubscription<TLeft, TRight, TLeftEnd, TRightEnd, R>, +        JoinSubscription(Subscriber<? super R> actual, Function<? super TLeft, ? extends Publisher<TLeftEnd>> leftEnd,, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java, +            parent.innerCloseError(t);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableInterval.java, +                    BackpressureHelper.produced(this, 1);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java, +        JoinSubscription<TLeft, TRight, TLeftEnd, TRightEnd, R> parent =, +                new JoinSubscription<TLeft, TRight, TLeftEnd, TRightEnd, R>(s, leftEnd, rightEnd, resultSelector);, +    static final class JoinSubscription<TLeft, TRight, TLeftEnd, TRightEnd, R>, +        JoinSubscription(Subscriber<? super R> actual, Function<? super TLeft, ? extends Publisher<TLeftEnd>> leftEnd,, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop.java, +                BackpressureHelper.produced(this, 1);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java, +            parent.innerCloseError(t);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableInterval.java, +                    BackpressureHelper.produced(this, 1);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java, +        JoinSubscription<TLeft, TRight, TLeftEnd, TRightEnd, R> parent =, +                new JoinSubscription<TLeft, TRight, TLeftEnd, TRightEnd, R>(s, leftEnd, rightEnd, resultSelector);, +    static final class JoinSubscription<TLeft, TRight, TLeftEnd, TRightEnd, R>, +        JoinSubscription(Subscriber<? super R> actual, Function<? super TLeft, ? extends Publisher<TLeftEnd>> leftEnd,, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop.java, +                BackpressureHelper.produced(this, 1);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableOnBackpressureError.java, +                BackpressureHelper.produced(this, 1);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java, +            parent.innerCloseError(t);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableInterval.java, +                    BackpressureHelper.produced(this, 1);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java, +        JoinSubscription<TLeft, TRight, TLeftEnd, TRightEnd, R> parent =, +                new JoinSubscription<TLeft, TRight, TLeftEnd, TRightEnd, R>(s, leftEnd, rightEnd, resultSelector);, +    static final class JoinSubscription<TLeft, TRight, TLeftEnd, TRightEnd, R>, +        JoinSubscription(Subscriber<? super R> actual, Function<? super TLeft, ? extends Publisher<TLeftEnd>> leftEnd,, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop.java, +                BackpressureHelper.produced(this, 1);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableOnBackpressureError.java, +                BackpressureHelper.produced(this, 1);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowablePublishMulticast.java, +            if (sourceMode == QueueSubscription.NONE && !queue.offer(t)) {, +                s.get().cancel();, +                BackpressureHelper.addCancel(this, n);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java, +            parent.innerCloseError(t);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableInterval.java, +                    BackpressureHelper.produced(this, 1);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java, +        JoinSubscription<TLeft, TRight, TLeftEnd, TRightEnd, R> parent =, +                new JoinSubscription<TLeft, TRight, TLeftEnd, TRightEnd, R>(s, leftEnd, rightEnd, resultSelector);, +    static final class JoinSubscription<TLeft, TRight, TLeftEnd, TRightEnd, R>, +        JoinSubscription(Subscriber<? super R> actual, Function<? super TLeft, ? extends Publisher<TLeftEnd>> leftEnd,, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop.java, +                BackpressureHelper.produced(this, 1);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableOnBackpressureError.java, +                BackpressureHelper.produced(this, 1);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowablePublishMulticast.java, +            if (sourceMode == QueueSubscription.NONE && !queue.offer(t)) {, +                s.get().cancel();, +                BackpressureHelper.addCancel(this, n);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java, +        final AtomicReference<InnerSubscription<T>[]> subscribers;, +        final AtomicInteger management;, +        @SuppressWarnings("unchecked"), +            this.management = new AtomicInteger();, +            this.subscribers = new AtomicReference<InnerSubscription<T>[]>(EMPTY);, +        @SuppressWarnings("unchecked"), +        @SuppressWarnings("unchecked"), +                InnerSubscription<T>[] c = subscribers.get();, +                InnerSubscription<T>[] u = new InnerSubscription[len + 1];, +        @SuppressWarnings("unchecked"), +                InnerSubscription<T>[] c = subscribers.get();, +                int len = c.length;, +                if (len == 0) {, +                InnerSubscription<T>[] u;, +            if (SubscriptionHelper.validate(subscription, p)) {, +                for (InnerSubscription<T> rp : subscribers.get()) {, +                    buffer.replay(rp);, +                }, +            }, +                for (InnerSubscription<T> rp : subscribers.get()) {, +                    buffer.replay(rp);, +        }, +, +        @SuppressWarnings("unchecked"), +                for (InnerSubscription<T> rp : subscribers.getAndSet(TERMINATED)) {, +                    buffer.replay(rp);]