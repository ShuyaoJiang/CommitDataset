[+++ b/DESIGN.md, +Terminology, principles, contracts, and other aspects of the design of RxJava v2., +##### Reactive, +##### Interactive, +##### Push, +Producer emits when it wishes to. Related to "reactive". Callbacks are an instance of push., +##### Pull, +Consumer requests data when it wishes to. Related to "interactive". An `Iterable` is an instance of pull., +##### Async Pull, +Consumer requests data when it wishes, and the data is then pushed when the producer wishes to. The Reactive Streams `Publisher` is an instance of "async pull", as is the 'AsyncEnumerable' in .Net., +Stream that supports async and synchronous push. It does not support interactive flow control (`request(n)`)., +- hot and cold sources, +- hot and cold sources, +- push, +- pull, +  - for push-based sources, this allows backpressure signals to conditionally apply strategies (i.e. drop, buffer, sample, fail, etc), +Consumer of events without flow control., +[Reactive Streams producer](https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.0/README.md#1-publisher-code) of data, +Relation to Reactive Streams, +- It can not implement Reactive Streams `Publisher` unless it is created with a default flow control strategy. , +- It can not implement `Processor` since a `Processor` must compose `request(n)` which can not be done with multicasting or pure push. , +Flow control support:, +- buffering, sampling, throttling, windowing, dropping, etc, +- temporal and count-based strategies, +- It does not support pull-based consumer-driven flow control., +### Behavior, +##### Creation, +Creation of a stream falls into the following use cases, all of which should be catered to in API design., +- async, hot, push (ie. system or user events), +- async, cold, push (ie. events resulting from remote system via network connection), +- sync, cold, pull (ie. iterable, file, range), +- async, cold, pull (ie. RPC/REST network call, cross-thread queue draining), +Unknown:, +- hot, pull (what is an example of this?), +Flow control support:, +- If `request(n)` behavior is supported in the stream implementation, then:, + - pull-based creation must support `request(n)` semantics, + - push-based creation must provide a default *onBackpressure* strategy, +- If `request(n)` behavior is not supported in the stream implementation, then:, + - push-based creation can push without consideration of a backpressure strategy, + - pull-based creation should be discouraged, +##### Destruction, +A producer can terminate a stream by emitting `onComplete` or `onError`. A consumer can terminate a stream by calling `cancel`., +Any resource cleanup of the source or operators must account for any of these three termination events. In other words, if an operator needs cleanup, then it should register the cleanup callback with `cancel`, `onError` and `onComplete`. , +The final `subscribe` will *not* invoke `cancel` after receiving an `onComplete` or `onError`., +++ b/DESIGN.md, +Terminology, principles, contracts, and other aspects of the design of RxJava v2., +##### Reactive, +##### Interactive, +##### Push, +Producer emits when it wishes to. Related to "reactive". Callbacks are an instance of push., +##### Pull, +Consumer requests data when it wishes to. Related to "interactive". An `Iterable` is an instance of pull., +##### Async Pull, +Consumer requests data when it wishes, and the data is then pushed when the producer wishes to. The Reactive Streams `Publisher` is an instance of "async pull", as is the 'AsyncEnumerable' in .Net., +Stream that supports async and synchronous push. It does not support interactive flow control (`request(n)`)., +- hot and cold sources, +- hot and cold sources, +- push, +- pull, +  - for push-based sources, this allows backpressure signals to conditionally apply strategies (i.e. drop, buffer, sample, fail, etc), +Consumer of events without flow control., +[Reactive Streams producer](https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.0/README.md#1-publisher-code) of data, +Relation to Reactive Streams, +- It can not implement Reactive Streams `Publisher` unless it is created with a default flow control strategy. , +- It can not implement `Processor` since a `Processor` must compose `request(n)` which can not be done with multicasting or pure push. , +Flow control support:, +- buffering, sampling, throttling, windowing, dropping, etc, +- temporal and count-based strategies, +- It does not support pull-based consumer-driven flow control., +### Behavior, +##### Creation, +Creation of a stream falls into the following use cases, all of which should be catered to in API design., +- async, hot, push (ie. system or user events), +- async, cold, push (ie. events resulting from remote system via network connection), +- sync, cold, pull (ie. iterable, file, range), +- async, cold, pull (ie. RPC/REST network call, cross-thread queue draining), +Unknown:, +- hot, pull (what is an example of this?), +Flow control support:, +- If `request(n)` behavior is supported in the stream implementation, then:, + - pull-based creation must support `request(n)` semantics, + - push-based creation must provide a default *onBackpressure* strategy, +- If `request(n)` behavior is not supported in the stream implementation, then:, + - push-based creation can push without consideration of a backpressure strategy, + - pull-based creation should be discouraged, +##### Destruction, +A producer can terminate a stream by emitting `onComplete` or `onError`. A consumer can terminate a stream by calling `cancel`., +Any resource cleanup of the source or operators must account for any of these three termination events. In other words, if an operator needs cleanup, then it should register the cleanup callback with `cancel`, `onError` and `onComplete`. , +The final `subscribe` will *not* invoke `cancel` after receiving an `onComplete` or `onError`., +++ b/build.gradle, +    perfCompile 'org.openjdk.jmh:jmh-core:1.11.3', +    perfCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.11.3', +++ b/DESIGN.md, +Terminology, principles, contracts, and other aspects of the design of RxJava v2., +##### Reactive, +##### Interactive, +##### Push, +Producer emits when it wishes to. Related to "reactive". Callbacks are an instance of push., +##### Pull]