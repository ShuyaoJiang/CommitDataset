[+++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +    static final class BehaviorObserver<T> {, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +    static final class BehaviorObserver<T> {, +++ b/rxjava-core/src/main/java/rx/subjects/PublishSubject.java, +import rx.operators.NotificationLite;, +import rx.subjects.BehaviorSubject.BehaviorOnSubscribe;, +import rx.subjects.BehaviorSubject.State;, +        State<T> state = new State<T>();, +        return new PublishSubject<T>(new BehaviorOnSubscribe<T>(state), state);, +    final State<T> state;, +    private final NotificationLite<T> nl = NotificationLite.instance();, +    protected PublishSubject(OnSubscribe<T> onSubscribe, State<T> state) {, +        this.state = state;, +        Object last = state.get();, +        if (last == null || state.active) {, +            Object n = nl.completed();, +            for (BehaviorSubject.BehaviorObserver<T> bo : state.terminate(n)) {, +                bo.emitNext(n);, +, +        Object last = state.get();, +        if (last == null || state.active) {, +            Object n = nl.error(e);, +            for (BehaviorSubject.BehaviorObserver<T> bo : state.terminate(n)) {, +                bo.emitNext(n);, +        for (BehaviorSubject.BehaviorObserver<T> bo : state.observers()) {, +            bo.emitNext(nl.next(v));]