[+++ b/src/main/java/rx/Subscriber.java, +    private final SubscriptionList cs;, +    private final Subscriber<?> op;, +    private Producer p;, +    private long requested = Long.MIN_VALUE; // default to not set, +    protected Subscriber(Subscriber<?> op) {, +        this(op, true);, +     * @param op, +    protected Subscriber(Subscriber<?> op, boolean shareSubscriptions) {, +        this.op = op;, +        this.cs = shareSubscriptions && op != null ? op.cs : new SubscriptionList();, +        cs.add(s);, +        cs.unsubscribe();, +        return cs.isUnsubscribed();, +        Producer shouldRequest = null;, +            if (p != null) {, +                shouldRequest = p;, +            } else if (requested == Long.MIN_VALUE) {, +        // after releasing lock, +        if (shouldRequest != null) {, +            shouldRequest.request(n);, +        }, +    }, +     * @param producer, +    public void setProducer(Producer producer) {, +        boolean setProducer = false;, +            p = producer;, +            if (op != null) {, +                if (toRequest == Long.MIN_VALUE) {, +                    setProducer = true;, +, +        if (setProducer) {, +            op.setProducer(p);, +            if (toRequest == Long.MIN_VALUE) {, +                p.request(Long.MAX_VALUE);, +                p.request(toRequest);, +++ b/src/main/java/rx/Subscriber.java, +    private final SubscriptionList cs;, +    private final Subscriber<?> op;, +    private Producer p;, +    private long requested = Long.MIN_VALUE; // default to not set, +    protected Subscriber(Subscriber<?> op) {, +        this(op, true);, +     * @param op, +    protected Subscriber(Subscriber<?> op, boolean shareSubscriptions) {, +        this.op = op;, +        this.cs = shareSubscriptions && op != null ? op.cs : new SubscriptionList();, +        cs.add(s);, +        cs.unsubscribe();, +        return cs.isUnsubscribed();, +        Producer shouldRequest = null;, +            if (p != null) {, +                shouldRequest = p;, +            } else if (requested == Long.MIN_VALUE) {, +        // after releasing lock, +        if (shouldRequest != null) {, +            shouldRequest.request(n);, +        }, +    }, +     * @param producer, +    public void setProducer(Producer producer) {, +        boolean setProducer = false;, +            p = producer;, +            if (op != null) {, +                if (toRequest == Long.MIN_VALUE) {, +                    setProducer = true;, +, +        if (setProducer) {, +            op.setProducer(p);, +            if (toRequest == Long.MIN_VALUE) {, +                p.request(Long.MAX_VALUE);, +                p.request(toRequest);, +++ b/src/main/java/rx/internal/operators/OperatorTakeUntilPredicate.java, +import rx.exceptions.Exceptions;, +import rx.exceptions.OnErrorThrowable;, +        public void onNext(T t) {, +            child.onNext(t);, +                stop = stopPredicate.call(t);, +                Exceptions.throwIfFatal(e);, +                child.onError(OnErrorThrowable.addValueAsLastCause(e, t));, +++ b/src/main/java/rx/Subscriber.java, +    private final SubscriptionList cs;, +    private final Subscriber<?> op;, +    private Producer p;, +    private long requested = Long.MIN_VALUE; // default to not set, +    protected Subscriber(Subscriber<?> op) {, +        this(op, true);, +     * @param op, +    protected Subscriber(Subscriber<?> op, boolean shareSubscriptions) {, +        this.op = op;, +        this.cs = shareSubscriptions && op != null ? op.cs : new SubscriptionList();, +        cs.add(s);, +        cs.unsubscribe();, +        return cs.isUnsubscribed();, +        Producer shouldRequest = null;, +            if (p != null) {, +                shouldRequest = p;, +            } else if (requested == Long.MIN_VALUE) {, +        // after releasing lock, +        if (shouldRequest != null) {]