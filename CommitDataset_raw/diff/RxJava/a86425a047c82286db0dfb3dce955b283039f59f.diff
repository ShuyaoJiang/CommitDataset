[+++ b/src/main/java/io/reactivex/internal/util/VolatileSizeArrayList.java, +/**, + * Copyright (c) 2016-present, RxJava Contributors., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.util;, +, +import java.util.*;, +import java.util.concurrent.atomic.AtomicInteger;, +, +/**, + * Tracks the current underlying array size in a volatile field., + *, + * @param <T> the element type, + * @since 2.0.7, + */, +public final class VolatileSizeArrayList<T> extends AtomicInteger implements List<T> {, +, +    private static final long serialVersionUID = 3972397474470203923L;, +, +    final ArrayList<T> list;, +, +    public VolatileSizeArrayList() {, +        list = new ArrayList<T>();, +    }, +, +    public VolatileSizeArrayList(int initialCapacity) {, +        list = new ArrayList<T>(initialCapacity);, +    }, +, +    @Override, +    public int size() {, +        return get();, +    }, +, +    @Override, +    public boolean isEmpty() {, +        return get() == 0;, +    }, +, +    @Override, +    public boolean contains(Object o) {, +        return list.contains(o);, +    }, +, +    @Override, +    public Iterator<T> iterator() {, +        return list.iterator();, +    }, +, +    @Override, +    public Object[] toArray() {, +        return list.toArray();, +    }, +, +    @Override, +    public <E> E[] toArray(E[] a) {, +        return list.toArray(a);, +    }, +, +    @Override, +    public boolean add(T e) {, +        boolean b = list.add(e);, +        lazySet(list.size());, +        return b;, +    }, +, +    @Override, +    public boolean remove(Object o) {, +        boolean b = list.remove(o);, +        lazySet(list.size());, +        return b;, +    }, +, +    @Override, +    public boolean containsAll(Collection<?> c) {, +        return list.containsAll(c);, +    }, +, +    @Override, +    public boolean addAll(Collection<? extends T> c) {, +        boolean b = list.addAll(c);, +        lazySet(list.size());, +        return b;, +    }, +, +    @Override, +    public boolean addAll(int index, Collection<? extends T> c) {, +        boolean b = list.addAll(index, c);, +        lazySet(list.size());, +        return b;]