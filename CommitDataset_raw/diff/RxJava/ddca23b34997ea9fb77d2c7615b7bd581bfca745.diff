[+++ b/rxjava-contrib/rxjava-android/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-android/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-apache-http/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-android/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-apache-http/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-async-util/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-android/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-apache-http/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-async-util/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-computation-expressions/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-android/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-apache-http/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-async-util/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-computation-expressions/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-string/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-android/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-apache-http/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-async-util/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-computation-expressions/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-string/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-swing/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-android/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-apache-http/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-async-util/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-computation-expressions/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-string/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-swing/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OnSubscribeFromIterable;, +import rx.operators.OperatorFilter;, +import rx.operators.OperationMergeMaxConcurrent;, +        return Observable.create(OperationMergeMaxConcurrent.merge(source, maxConcurrent));, +    public final Observable<Observable<T>> nest() {, +        if (count < 0) {, +            throw new IllegalArgumentException("Count can not be negative");, +        return lift(new OperatorFilter<T>(predicate));, +++ b/rxjava-contrib/rxjava-android/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-apache-http/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-async-util/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-computation-expressions/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-string/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-contrib/rxjava-swing/build.gradle, +        instruction 'Fragment-Host', 'com.netflix.rxjava.core', +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OnSubscribeFromIterable;, +import rx.operators.OperatorFilter;, +import rx.operators.OperationMergeMaxConcurrent;, +        return Observable.create(OperationMergeMaxConcurrent.merge(source, maxConcurrent));, +    public final Observable<Observable<T>> nest() {, +        if (count < 0) {, +            throw new IllegalArgumentException("Count can not be negative");, +        return lift(new OperatorFilter<T>(predicate));, +++ b/rxjava-core/src/main/java/rx/observers/TestSubscriber.java, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +    private final CountDownLatch latch = new CountDownLatch(1);, +    private volatile Thread lastSeenThread;, +        latch.countDown();, +        latch.countDown();, +        lastSeenThread = Thread.currentThread();, +    public void awaitTerminalEvent() {, +        try {, +            latch.await();, +        } catch (InterruptedException e) {, +            throw new RuntimeException("Interrupted", e);, +        }, +    }, +]