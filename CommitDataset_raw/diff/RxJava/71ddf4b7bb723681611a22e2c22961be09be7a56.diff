[+++ b/src/main/java/io/reactivex/Flowable.java, +        return fromPublisher(sources).toList().flatMapPublisher(FlowableInternalHelper.<T, R>zipIterable(zipper));, +     * Returns a Single that emits a Boolean that indicates whether all of the items emitted by the source, +     * Returns a Single that emits {@code true} if any item emitted by the source Publisher satisfies a, +     * Collects items emitted by the source Publisher into a single mutable data structure and returns, +     * a Single that emits this structure., +     * @return a Single that emits the result of collecting the values emitted by the source Publisher, +    public final <U> Single<U> collect(Callable<? extends U> initialItemSupplier, BiConsumer<? super U, ? super T> collector) {, +        return RxJavaPlugins.onAssembly(new FlowableCollectSingle<T, U>(this, initialItemSupplier, collector));, +     * Collects items emitted by the source Publisher into a single mutable data structure and returns, +     * a Single that emits this structure., +     * @return a Single that emits the result of collecting the values emitted by the source Publisher, +    public final <U> Single<U> collectInto(final U initialItem, BiConsumer<? super U, ? super T> collector) {, +     * Returns a Single that emits a Boolean that indicates whether the source Publisher emitted a, +     * Returns a Single that emits {@code true} if the source Publisher is empty, otherwise {@code false}., +     * Returns a Single that emits the last item emitted by the source Publisher or notifies Subscribers of, +     * Returns a Single that emits only the last item emitted by the source Publisher, or a default item, +     * Returns a Single that applies a specified accumulator function to the first item emitted by a source, +        return toList().toFlowable().map(Functions.listSorter(Functions.<T>naturalComparator())).flatMapIterable(Functions.<List<T>>identity());, +        return toList().toFlowable().map(Functions.listSorter(sortFunction)).flatMapIterable(Functions.<List<T>>identity());, +     * Returns a Single that emits a single item, a list composed of all the items emitted by the source, +     * @return a Single that emits a single item: a List containing all of the items emitted by the source, +    public final Single<List<T>> toList() {, +        return RxJavaPlugins.onAssembly(new FlowableToListSingle<T, List<T>>(this));, +     * Returns a Single that emits a single item, a list composed of all the items emitted by the source, +    public final Single<List<T>> toList(final int capacityHint) {, +        return RxJavaPlugins.onAssembly(new FlowableToListSingle<T, List<T>>(this, Functions.<T>createArrayList(capacityHint)));, +     * Returns a Single that emits a single HashMap containing all items emitted by the source Publisher,, +     * @return a Single that emits a single item: a HashMap containing the mapped items from the source, +    public final <K> Single<Map<K, T>> toMap(final Function<? super T, ? extends K> keySelector) {, +     * Returns a Single that emits a single HashMap containing values corresponding to items emitted by the, +     * @return a Single that emits a single item: a HashMap containing the mapped items from the source, +    public final <K, V> Single<Map<K, V>> toMap(final Function<? super T, ? extends K> keySelector, final Function<? super T, ? extends V> valueSelector) {, +     * Returns a Single that emits a single Map, returned by a specified {@code mapFactory} function, that, +    public final <K, V> Single<Map<K, V>> toMap(final Function<? super T, ? extends K> keySelector,, +     * Returns a Single that emits a single HashMap that contains an ArrayList of items emitted by the, +     * @return a Single that emits a single item: a HashMap that contains an ArrayList of items mapped from, +    public final <K> Single<Map<K, Collection<T>>> toMultimap(Function<? super T, ? extends K> keySelector) {, +     * Returns a Single that emits a single HashMap that contains an ArrayList of values extracted by a, +     * @return a Single that emits a single item: a HashMap that contains an ArrayList of items mapped from, +    public final <K, V> Single<Map<K, Collection<V>>> toMultimap(Function<? super T, ? extends K> keySelector, Function<? super T, ? extends V> valueSelector) {, +     * Returns a Single that emits a single Map, returned by a specified {@code mapFactory} function, that, +     * @return a Single that emits a single item: a Map that contains the collection of mapped items from, +    public final <K, V> Single<Map<K, Collection<V>>> toMultimap(, +     * Returns a Single that emits a single Map, returned by a specified {@code mapFactory} function, that, +     * @return a Single that emits a single item: a Map that contains a list items mapped from the source, +    public final <K, V> Single<Map<K, Collection<V>>> toMultimap(, +     * Returns a Single that emits a list that contains the items emitted by the source Publisher, in a, +     * @return a Single that emits a list that contains the items emitted by the source Publisher in, +    public final Single<List<T>> toSortedList() {, +     * Returns a Single that emits a list that contains the items emitted by the source Publisher, in a, +     * @return a Single that emits a list that contains the items emitted by the source Publisher in, +    public final Single<List<T>> toSortedList(final Comparator<? super T> comparator) {, +     * Returns a Single that emits a list that contains the items emitted by the source Publisher, in a, +     * @return a Single that emits a list that contains the items emitted by the source Publisher in, +    public final Single<List<T>> toSortedList(final Comparator<? super T> comparator, int capacityHint) {, +    public final Single<List<T>> toSortedList(int capacityHint) {, +++ b/src/main/java/io/reactivex/Flowable.java, +        return fromPublisher(sources).toList().flatMapPublisher(FlowableInternalHelper.<T, R>zipIterable(zipper));, +     * Returns a Single that emits a Boolean that indicates whether all of the items emitted by the source, +     * Returns a Single that emits {@code true} if any item emitted by the source Publisher satisfies a, +     * Collects items emitted by the source Publisher into a single mutable data structure and returns, +     * a Single that emits this structure., +     * @return a Single that emits the result of collecting the values emitted by the source Publisher, +    public final <U> Single<U> collect(Callable<? extends U> initialItemSupplier, BiConsumer<? super U, ? super T> collector) {, +        return RxJavaPlugins.onAssembly(new FlowableCollectSingle<T, U>(this, initialItemSupplier, collector));, +     * Collects items emitted by the source Publisher into a single mutable data structure and returns, +     * a Single that emits this structure., +     * @return a Single that emits the result of collecting the values emitted by the source Publisher, +    public final <U> Single<U> collectInto(final U initialItem, BiConsumer<? super U, ? super T> collector) {, +     * Returns a Single that emits a Boolean that indicates whether the source Publisher emitted a, +     * Returns a Single that emits {@code true} if the source Publisher is empty, otherwise {@code false}., +     * Returns a Single that emits the last item emitted by the source Publisher or notifies Subscribers of, +     * Returns a Single that emits only the last item emitted by the source Publisher, or a default item, +     * Returns a Single that applies a specified accumulator function to the first item emitted by a source, +        return toList().toFlowable().map(Functions.listSorter(Functions.<T>naturalComparator())).flatMapIterable(Functions.<List<T>>identity());, +        return toList().toFlowable().map(Functions.listSorter(sortFunction)).flatMapIterable(Functions.<List<T>>identity());, +     * Returns a Single that emits a single item, a list composed of all the items emitted by the source, +     * @return a Single that emits a single item: a List containing all of the items emitted by the source, +    public final Single<List<T>> toList() {, +        return RxJavaPlugins.onAssembly(new FlowableToListSingle<T, List<T>>(this));, +     * Returns a Single that emits a single item, a list composed of all the items emitted by the source, +    public final Single<List<T>> toList(final int capacityHint) {, +        return RxJavaPlugins.onAssembly(new FlowableToListSingle<T, List<T>>(this, Functions.<T>createArrayList(capacityHint)));, +     * Returns a Single that emits a single HashMap containing all items emitted by the source Publisher,, +     * @return a Single that emits a single item: a HashMap containing the mapped items from the source, +    public final <K> Single<Map<K, T>> toMap(final Function<? super T, ? extends K> keySelector) {, +     * Returns a Single that emits a single HashMap containing values corresponding to items emitted by the, +     * @return a Single that emits a single item: a HashMap containing the mapped items from the source, +    public final <K, V> Single<Map<K, V>> toMap(final Function<? super T, ? extends K> keySelector, final Function<? super T, ? extends V> valueSelector) {, +     * Returns a Single that emits a single Map, returned by a specified {@code mapFactory} function, that, +    public final <K, V> Single<Map<K, V>> toMap(final Function<? super T, ? extends K> keySelector,, +     * Returns a Single that emits a single HashMap that contains an ArrayList of items emitted by the, +     * @return a Single that emits a single item: a HashMap that contains an ArrayList of items mapped from, +    public final <K> Single<Map<K, Collection<T>>> toMultimap(Function<? super T, ? extends K> keySelector) {, +     * Returns a Single that emits a single HashMap that contains an ArrayList of values extracted by a, +     * @return a Single that emits a single item: a HashMap that contains an ArrayList of items mapped from, +    public final <K, V> Single<Map<K, Collection<V>>> toMultimap(Function<? super T, ? extends K> keySelector, Function<? super T, ? extends V> valueSelector) {, +     * Returns a Single that emits a single Map, returned by a specified {@code mapFactory} function, that, +     * @return a Single that emits a single item: a Map that contains the collection of mapped items from]