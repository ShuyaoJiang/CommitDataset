[+++ b/src/main/java/io/reactivex/Observable.java, +    , +    @SafeVarargs, +    public static <T> Observable<T> amb(Publisher<? extends T>... sources) {, +        Objects.requireNonNull(sources);, +        int len = sources.length;, +        if (len == 0) {, +            return empty();, +        } else, +        if (len == 1) {, +            return fromPublisher(sources[0]);, +        }, +        return create(new PublisherAmb<>(sources, null));, +    }, +    , +    public static <T> Observable<T> amb(Iterable<? extends Publisher<? extends T>> sources) {, +        Objects.requireNonNull(sources);, +        return create(new PublisherAmb<>(null, sources));, +    }, +    , +    public Observable<T> ambWith(Publisher<? extends T> other) {, +        return amb(this, other);, +    }, +++ b/src/main/java/io/reactivex/Observable.java, +    , +    @SafeVarargs, +    public static <T> Observable<T> amb(Publisher<? extends T>... sources) {, +        Objects.requireNonNull(sources);, +        int len = sources.length;, +        if (len == 0) {, +            return empty();, +        } else, +        if (len == 1) {, +            return fromPublisher(sources[0]);, +        }, +        return create(new PublisherAmb<>(sources, null));, +    }, +    , +    public static <T> Observable<T> amb(Iterable<? extends Publisher<? extends T>> sources) {, +        Objects.requireNonNull(sources);, +        return create(new PublisherAmb<>(null, sources));, +    }, +    , +    public Observable<T> ambWith(Publisher<? extends T> other) {, +        return amb(this, other);, +    }, +++ b/src/main/java/io/reactivex/internal/operators/PublisherAmb.java, +/**, + * Copyright 2015 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators;, +, +import java.util.concurrent.atomic.*;, +, +import org.reactivestreams.*;, +, +import io.reactivex.internal.subscriptions.*;, +import io.reactivex.internal.util.BackpressureHelper;, +import io.reactivex.plugins.RxJavaPlugins;, +, +public final class PublisherAmb<T> implements Publisher<T> {, +    final Publisher<? extends T>[] sources;, +    final Iterable<? extends Publisher<? extends T>> sourcesIterable;, +    , +    public PublisherAmb(Publisher<? extends T>[] sources, Iterable<? extends Publisher<? extends T>> sourcesIterable) {, +        this.sources = sources;, +        this.sourcesIterable = sourcesIterable;, +    }, +    , +    @Override, +    @SuppressWarnings("unchecked"), +    public void subscribe(Subscriber<? super T> s) {, +        Publisher<? extends T>[] sources = this.sources;, +        int count = 0;, +        if (sources == null) {, +            sources = new Publisher[8];, +            for (Publisher<? extends T> p : sourcesIterable) {, +                if (count == sources.length) {, +                    Publisher<? extends T>[] b = new Publisher[count + count >> 2];, +                    System.arraycopy(sources, 0, b, 0, count);, +                    sources = b;, +                }, +                sources[count++] = p;, +            }, +        } else {, +            count = sources.length;, +        }, +        , +        if (count == 0) {, +            s.onSubscribe(EmptySubscription.INSTANCE);]