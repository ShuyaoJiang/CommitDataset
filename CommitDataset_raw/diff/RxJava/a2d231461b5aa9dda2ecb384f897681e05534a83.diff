[+++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/blocking.clj, +  "The blocking ops wrap errors stuff in RuntimeException because of stupid Java., +  This tries to unwrap them so callers get the exceptions they expect.", +   An error is thrown if zero or more then one value is produced., +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/blocking.clj, +  "The blocking ops wrap errors stuff in RuntimeException because of stupid Java., +  This tries to unwrap them so callers get the exceptions they expect.", +   An error is thrown if zero or more then one value is produced., +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/chunk.clj, +  "EXTREMELY EXPERIMENTAL AND SUBJECT TO CHANGE OR DELETION, +, +  TODO RxJava's much bigger since this was written. Is there something built in?, +, +  Same as rx.Observable.merge(Observable<Observable<T>>) but the input Observables, +         (rx/map #(-> (GetUserCommand. %) .toObservable)), +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/blocking.clj, +  "The blocking ops wrap errors stuff in RuntimeException because of stupid Java., +  This tries to unwrap them so callers get the exceptions they expect.", +   An error is thrown if zero or more then one value is produced., +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/chunk.clj, +  "EXTREMELY EXPERIMENTAL AND SUBJECT TO CHANGE OR DELETION, +, +  TODO RxJava's much bigger since this was written. Is there something built in?, +, +  Same as rx.Observable.merge(Observable<Observable<T>>) but the input Observables, +         (rx/map #(-> (GetUserCommand. %) .toObservable)), +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/graph.clj, +  "EXTREMELY EXPERIMENTAL AND SUBJECT TO CHANGE OR DELETION, +, +  Given a graph description, returns an observable that emits a single, +  "EXTREMELY EXPERIMENTAL AND SUBJECT TO CHANGE OR DELETION, +, +  Similar to clojure.core/let, but bindings are Observables and the result of the body, +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/blocking.clj, +  "The blocking ops wrap errors stuff in RuntimeException because of stupid Java., +  This tries to unwrap them so callers get the exceptions they expect.", +   An error is thrown if zero or more then one value is produced., +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/chunk.clj, +  "EXTREMELY EXPERIMENTAL AND SUBJECT TO CHANGE OR DELETION, +, +  TODO RxJava's much bigger since this was written. Is there something built in?, +, +  Same as rx.Observable.merge(Observable<Observable<T>>) but the input Observables, +         (rx/map #(-> (GetUserCommand. %) .toObservable)), +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/graph.clj, +  "EXTREMELY EXPERIMENTAL AND SUBJECT TO CHANGE OR DELETION, +, +  Given a graph description, returns an observable that emits a single, +  "EXTREMELY EXPERIMENTAL AND SUBJECT TO CHANGE OR DELETION, +, +  Similar to clojure.core/let, but bindings are Observables and the result of the body, +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/realized.clj, +  "EXTREMELY EXPERIMENTAL AND SUBJECT TO CHANGE OR DELETION, +, +  See let-realized., +  "EXTREMELY EXPERIMENTAL AND SUBJECT TO CHANGE OR DELETION, +, +  Same as realized-map, but takes a map argument rather than key-value pairs.", +  "EXTREMELY EXPERIMENTAL AND SUBJECT TO CHANGE OR DELETION, +, +  'let' version of realized map.]