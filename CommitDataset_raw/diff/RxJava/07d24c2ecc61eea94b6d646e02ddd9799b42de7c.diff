[+++ b/src/main/java/io/reactivex/BackpressureStrategy.java, +    MISSING,, +++ b/src/main/java/io/reactivex/BackpressureStrategy.java, +    MISSING,, +++ b/src/main/java/io/reactivex/Observable.java, +            case MISSING:, +++ b/src/main/java/io/reactivex/BackpressureStrategy.java, +    MISSING,, +++ b/src/main/java/io/reactivex/Observable.java, +            case MISSING:, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCreate.java, +        case MISSING: {, +            emitter = new MissingEmitter<T>(t);, +    static final class MissingEmitter<T> extends BaseEmitter<T> {, +        MissingEmitter(Subscriber<? super T> actual) {, +++ b/src/main/java/io/reactivex/BackpressureStrategy.java, +    MISSING,, +++ b/src/main/java/io/reactivex/Observable.java, +            case MISSING:, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCreate.java, +        case MISSING: {, +            emitter = new MissingEmitter<T>(t);, +    static final class MissingEmitter<T> extends BaseEmitter<T> {, +        MissingEmitter(Subscriber<? super T> actual) {, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableCreateTest.java, +    public void createNullValueMissing() {, +        }, BackpressureStrategy.MISSING), +    public void createNullValueMissingSerialized() {, +        }, BackpressureStrategy.MISSING), +        Flowable.create(null, BackpressureStrategy.MISSING);, +++ b/src/main/java/io/reactivex/BackpressureStrategy.java, +    MISSING,, +++ b/src/main/java/io/reactivex/Observable.java, +            case MISSING:, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCreate.java, +        case MISSING: {, +            emitter = new MissingEmitter<T>(t);, +    static final class MissingEmitter<T> extends BaseEmitter<T> {, +        MissingEmitter(Subscriber<? super T> actual) {, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableCreateTest.java, +    public void createNullValueMissing() {, +        }, BackpressureStrategy.MISSING), +    public void createNullValueMissingSerialized() {, +        }, BackpressureStrategy.MISSING), +        Flowable.create(null, BackpressureStrategy.MISSING);, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableFromObservableTest.java, +        TestHelper.checkDisposed(Observable.just(1).toFlowable(BackpressureStrategy.MISSING));, +        .toFlowable(BackpressureStrategy.MISSING), +++ b/src/main/java/io/reactivex/BackpressureStrategy.java, +    MISSING,, +++ b/src/main/java/io/reactivex/Observable.java, +            case MISSING:, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCreate.java, +        case MISSING: {, +            emitter = new MissingEmitter<T>(t);, +    static final class MissingEmitter<T> extends BaseEmitter<T> {, +        MissingEmitter(Subscriber<? super T> actual) {, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableCreateTest.java, +    public void createNullValueMissing() {, +        }, BackpressureStrategy.MISSING), +    public void createNullValueMissingSerialized() {, +        }, BackpressureStrategy.MISSING), +        Flowable.create(null, BackpressureStrategy.MISSING);, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableFromObservableTest.java, +        TestHelper.checkDisposed(Observable.just(1).toFlowable(BackpressureStrategy.MISSING));, +        .toFlowable(BackpressureStrategy.MISSING), +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableFromSourceTest.java, +    public void normalMissing() {, +        Flowable.create(source, BackpressureStrategy.MISSING).subscribe(ts);, +    public void normalMissingRequested() {, +        Flowable.create(source, BackpressureStrategy.MISSING).subscribe(ts);, +    public void errorMissing() {, +        Flowable.create(source, BackpressureStrategy.MISSING).subscribe(ts);, +    public void unsubscribedMissing() {, +        Flowable.create(source, BackpressureStrategy.MISSING).subscribe(ts);, +    public void unsubscribedNoCancelMissing() {, +        Flowable.create(sourceNoCancel, BackpressureStrategy.MISSING).subscribe(ts);, +++ b/src/main/java/io/reactivex/BackpressureStrategy.java, +    MISSING,, +++ b/src/main/java/io/reactivex/Observable.java, +            case MISSING:, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCreate.java, +        case MISSING: {, +            emitter = new MissingEmitter<T>(t);, +    static final class MissingEmitter<T> extends BaseEmitter<T> {, +        MissingEmitter(Subscriber<? super T> actual) {, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableCreateTest.java, +    public void createNullValueMissing() {, +        }, BackpressureStrategy.MISSING), +    public void createNullValueMissingSerialized() {, +        }, BackpressureStrategy.MISSING), +        Flowable.create(null, BackpressureStrategy.MISSING);, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableFromObservableTest.java, +        TestHelper.checkDisposed(Observable.just(1).toFlowable(BackpressureStrategy.MISSING));, +        .toFlowable(BackpressureStrategy.MISSING), +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableFromSourceTest.java, +    public void normalMissing() {, +        Flowable.create(source, BackpressureStrategy.MISSING).subscribe(ts);, +    public void normalMissingRequested() {, +        Flowable.create(source, BackpressureStrategy.MISSING).subscribe(ts);]