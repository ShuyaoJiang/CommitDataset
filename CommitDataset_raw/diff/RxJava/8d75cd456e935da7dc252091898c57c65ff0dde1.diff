[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * item. If the source Observable emits more than one item or no items, notify of an `IllegalArgumentException`, +   * or `NoSuchElementException` respectively., +   * @throws IllegalArgumentException if the source emits more than one item, +   * @throws NoSuchElementException if the source emits no items, +    new BlockingObservable[T](this), +    new BlockingObservable[T](this), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * item. If the source Observable emits more than one item or no items, notify of an `IllegalArgumentException`, +   * or `NoSuchElementException` respectively., +   * @throws IllegalArgumentException if the source emits more than one item, +   * @throws NoSuchElementException if the source emits no items, +    new BlockingObservable[T](this), +    new BlockingObservable[T](this), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/observables/BlockingObservable.scala, +import rx.lang.scala.Observable, +import rx.observables.{BlockingObservable => JBlockingObservable}, + * You can obtain a BlockingObservable from an Observable using [[rx.lang.scala.Observable.toBlocking]], +// constructor is private because users should use Observable.toBlocking, +class BlockingObservable[+T] private[scala] (val o: Observable[T]), +  // This is def because "field definition is not allowed in value class", +  private def asJava: JBlockingObservable[_ <: T] = o.asJavaObservable.toBlocking, +   * Returns an `Option` with the last item emitted by the source Observable,, +   * or `None` if the source Observable completes without emitting any items., +   *, +   * @return an `Option` with the last item emitted by the source Observable,, +   *         or `None` if the source Observable is empty, +   */, +  def lastOption: Option[T] = {, +    o.lastOption.toBlocking.single, +  }, +, +  /**, +   * Returns the last item emitted by the source Observable, or a default item, +   * if the source Observable completes without emitting any items., +   *, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/lastOrDefault.png">, +   *, +   * @param default the default item to emit if the source Observable is empty., +   *                This is a by-name parameter, so it is only evaluated if the source Observable doesn't emit anything., +   * @return the last item emitted by the source Observable, or a default item if the source Observable is empty, +   */, +  def lastOrElse[U >: T](default: => U): U = {, +    lastOption match {, +      case Some(element) => element, +      case None => default, +    }, +  }, +, +  /**, +  /**, +   * Returns an `Option` with the very first item emitted by the source Observable,, +   * or `None` if the source Observable is empty., +   *, +   * @return an `Option` with the very first item from the source,, +   *         or `None` if the source Observable completes without emitting any item., +   */, +  def headOption: Option[T] = {, +    o.headOption.toBlocking.single, +  }, +, +  /**, +   * Returns the very first item emitted by the source Observable, or a default value if the source Observable is empty., +   *, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/firstOrDefault.png">, +   *, +   * @param default The default value to emit if the source Observable doesn't emit anything., +   *                This is a by-name parameter, so it is only evaluated if the source Observable doesn't emit anything., +   * @return the very first item from the source, or a default value if the source Observable completes without emitting any item., +   */, +  def headOrElse[U >: T](default: => U): U = {, +    headOption match {, +      case Some(element) => element, +      case None => default, +    }, +  }, +   * If the source Observable completes after emitting a single item, return that item. If the source Observable, +   * emits more than one item or no items, notify of an `IllegalArgumentException` or `NoSuchElementException` respectively., +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/single.png">, +   *, +   * @return an Observable that emits the single item emitted by the source Observable, +   * @throws IllegalArgumentException if the source emits more than one item, +   * @throws NoSuchElementException if the source emits no items, +   * If the source Observable completes after emitting a single item, return an `Option` with that item;, +   * if the source Observable is empty, return `None`. If the source Observable emits more than one item,, +   * throw an `IllegalArgumentException`., +   *, +   * @return an `Option` with the single item emitted by the source Observable, or, +   *         `None` if the source Observable is empty, +   * @throws IllegalArgumentException if the source Observable emits more than one item, +    o.singleOption.toBlocking.single, +, +  /**, +   * If the source Observable completes after emitting a single item, return that item;, +   * if the source Observable is empty, return a default item. If the source Observable, +   * emits more than one item, throw an `IllegalArgumentException`., +   *, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/singleOrDefault.png">, +   *, +   * @param default a default value to emit if the source Observable emits no item.]