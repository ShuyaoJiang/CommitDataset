[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OnSubscribeRange;, +        if ((start + count) > Integer.MAX_VALUE) {, +            throw new IllegalArgumentException("start + count can not exceed Integer.MAX_VALUE");, +        }, +        return Observable.create(new OnSubscribeRange(start, start + count));, +        if ((start + count) > Integer.MAX_VALUE) {, +            throw new IllegalArgumentException("start + count can not exceed Integer.MAX_VALUE");, +        }, +        return Observable.create(new OnSubscribeRange(start, start + count)).subscribeOn(scheduler);, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OnSubscribeRange;, +        if ((start + count) > Integer.MAX_VALUE) {, +            throw new IllegalArgumentException("start + count can not exceed Integer.MAX_VALUE");, +        }, +        return Observable.create(new OnSubscribeRange(start, start + count));, +        if ((start + count) > Integer.MAX_VALUE) {, +            throw new IllegalArgumentException("start + count can not exceed Integer.MAX_VALUE");, +        }, +        return Observable.create(new OnSubscribeRange(start, start + count)).subscribeOn(scheduler);, +++ b/rxjava-core/src/main/java/rx/operators/OnSubscribeRange.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import rx.Observable.OnSubscribe;, +import rx.Subscriber;, +, +/**, + */, +public final class OnSubscribeRange implements OnSubscribe<Integer> {, +, +    private final int start;, +    private final int end;, +, +    public OnSubscribeRange(int start, int end) {, +        this.start = start;, +        this.end = end;, +    }, +, +    @Override, +    public void call(Subscriber<? super Integer> o) {, +        for (int i = start; i < end; i++) {, +            if (o.isUnsubscribed()) {, +                return;, +            }, +            o.onNext(i);, +        }, +        o.onCompleted();, +    }, +, +}, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OnSubscribeRange;, +        if ((start + count) > Integer.MAX_VALUE) {, +            throw new IllegalArgumentException("start + count can not exceed Integer.MAX_VALUE");, +        }, +        return Observable.create(new OnSubscribeRange(start, start + count));, +        if ((start + count) > Integer.MAX_VALUE) {, +            throw new IllegalArgumentException("start + count can not exceed Integer.MAX_VALUE");, +        }, +        return Observable.create(new OnSubscribeRange(start, start + count)).subscribeOn(scheduler);, +++ b/rxjava-core/src/main/java/rx/operators/OnSubscribeRange.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import rx.Observable.OnSubscribe;, +import rx.Subscriber;, +, +/**, + */, +public final class OnSubscribeRange implements OnSubscribe<Integer> {, +]