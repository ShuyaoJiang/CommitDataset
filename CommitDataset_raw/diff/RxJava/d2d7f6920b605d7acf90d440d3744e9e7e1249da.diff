[+++ b/src/main/java/io/reactivex/Flowable.java, +     *  <dd>Backpressure is honored towards the downstream and the inner Publishers are, +     * <em>Important note:</em> This Publisher is blocking on the thread it gets subscribed on; you cannot unsubscribe from it., +     * return value of the {@link Future#get} method of that object, by passing the object into the {@code fromFuture}, +     * <em>Important note:</em> This Publisher is blocking on the thread it gets subscribed on; you cannot unsubscribe from it., +     * Flattens an array of Publishers into one Flowable, in a way that allows an Subscriber to receive all, +     * @return a Flowable that emits a Boolean value that indicates whether the two Publisher sequences, +     * @return a Flowable that emits a Boolean value that indicates whether the two Publisher sequences, +++ b/src/main/java/io/reactivex/Flowable.java, +     *  <dd>Backpressure is honored towards the downstream and the inner Publishers are, +     * <em>Important note:</em> This Publisher is blocking on the thread it gets subscribed on; you cannot unsubscribe from it., +     * return value of the {@link Future#get} method of that object, by passing the object into the {@code fromFuture}, +     * <em>Important note:</em> This Publisher is blocking on the thread it gets subscribed on; you cannot unsubscribe from it., +     * Flattens an array of Publishers into one Flowable, in a way that allows an Subscriber to receive all, +     * @return a Flowable that emits a Boolean value that indicates whether the two Publisher sequences, +     * @return a Flowable that emits a Boolean value that indicates whether the two Publisher sequences, +++ b/src/main/java/io/reactivex/Maybe.java, +import java.util.concurrent.*;, +import io.reactivex.schedulers.Schedulers;, +     * Concatenates a variable number of MaybeSource sources and delays errors from any of them, +     * till all terminate., +     * <p>, +     * <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concat.png" alt="">, +     * <dl>, +     *  <dt><b>Backpressure:</b></dt>, +     *  <dd>The operator honors backpressure from downstream. , +     *  If the {@code Publisher} violate this, it <em>may</em> throw an, +     *  {@code IllegalStateException} when the source {@code Publisher} completes.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code concat} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @param sources the array of sources, +     * @param <T> the common base value type, +     * @return the new Flowable instance, +     * @throws NullPointerException if sources is null, +     */, +    @SuppressWarnings("unchecked"), +    @BackpressureSupport(BackpressureKind.FULL), +    @SchedulerSupport(SchedulerSupport.NONE), +    public static <T> Flowable<T> concatArrayDelayError(MaybeSource<? extends T>... sources) {, +        if (sources.length == 0) {, +            return Flowable.empty();, +        } else, +        if (sources.length == 1) {, +            return RxJavaPlugins.onAssembly(new MaybeToFlowable<T>((MaybeSource<T>)sources[0]));, +        }, +        return RxJavaPlugins.onAssembly(new MaybeConcatArrayDelayError<T>(sources));, +    }, +, +    /**, +     * Concatenates a sequence of MaybeSource eagerly into a single stream of values., +     * <p>, +     * Eager concatenation means that once a subscriber subscribes, this operator subscribes to all of the, +     * source MaybeSources. The operator buffers the value emitted by these MaybeSources and then drains them, +     * in order, each one after the previous one completes., +     * <dl>, +     *  <dt><b>Backpressure:</b></dt>, +     *  <dd><dd>The operator honors backpressure from downstream.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>This method does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @param <T> the value type, +     * @param sources a sequence of MaybeSources that need to be eagerly concatenated, +     * @return the new Flowable instance with the specified concatenation behavior, +     */, +    @SuppressWarnings({ "rawtypes", "unchecked" }), +    @BackpressureSupport(BackpressureKind.FULL), +    @SchedulerSupport(SchedulerSupport.NONE), +    public static <T> Flowable<T> concatArrayEager(MaybeSource<? extends T>... sources) {, +        return Flowable.fromArray(sources).concatMapEager((Function)MaybeToPublisher.instance());, +    }, +    , +    /**, +     * Concatenates the Iterable sequence of Publishers into a single sequence by subscribing to each Publisher,, +     * one after the other, one at a time and delays any errors till the all inner Publishers terminate., +     * , +     * <dl>, +     *  <dt><b>Backpressure:</b></dt>, +     *  <dd>The operator honors backpressure from downstream. The inner {@code Publisher}, +     *  sources are expected to honor backpressure. If any of the inner {@code Publisher}s violates, +     *  this, it <em>may</em> throw an {@code IllegalStateException} when an , +     *  inner {@code Publisher} completes.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code concatDelayError} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @param <T> the common element base type, +     * @param sources the Iterable sequence of MaybeSources, +     * @return the new Publisher with the concatenating behavior, +     */, +    @SuppressWarnings({ "unchecked", "rawtypes" }), +    @BackpressureSupport(BackpressureKind.FULL), +    @SchedulerSupport(SchedulerSupport.NONE), +    public static <T> Flowable<T> concatDelayError(Iterable<? extends MaybeSource<? extends T>> sources) {, +        ObjectHelper.requireNonNull(sources, "sources is null");, +        return Flowable.fromIterable(sources).concatMapDelayError((Function)MaybeToPublisher.instance());, +    }, +, +    /**, +     * Concatenates the Publisher sequence of Publishers into a single sequence by subscribing to each inner Publisher,]