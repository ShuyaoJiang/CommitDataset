[+++ b/rxjava-core/src/main/java/rx/subscriptions/CompositeSubscription.java, +import java.util.Arrays;, +import java.util.List;, +, +    private final AtomicReference<State> state = new AtomicReference<State>();, +, +    private static final class State {, +        final boolean isUnsubscribed;, +        final List<Subscription> subscriptions;, +, +        State(boolean u, List<Subscription> s) {, +            this.isUnsubscribed = u;, +            this.subscriptions = s;, +        }, +, +        State unsubscribe() {, +            return new State(true, subscriptions);, +        }, +, +        State add(Subscription s) {, +            List<Subscription> newSubscriptions = new ArrayList<Subscription>();, +            newSubscriptions.addAll(subscriptions);, +            newSubscriptions.add(s);, +            return new State(isUnsubscribed, newSubscriptions);, +        }, +, +        State remove(Subscription s) {, +            List<Subscription> newSubscriptions = new ArrayList<Subscription>();, +            newSubscriptions.addAll(subscriptions);, +            newSubscriptions.remove(s); // only first occurrence, +            return new State(isUnsubscribed, newSubscriptions);, +        }, +, +        State clear() {, +            return new State(isUnsubscribed, new ArrayList<Subscription>());, +        }, +    }, +        state.set(new State(false, Arrays.asList(subscriptions)));, +        return state.get().isUnsubscribed;, +        State current;, +        State newState;, +            current = state.get();, +            if (current.isUnsubscribed) {, +                return;, +            } else {, +                newState = current.add(s);, +        } while (!state.compareAndSet(current, newState));, +        State current;, +        State newState;, +            current = state.get();, +            if (current.isUnsubscribed) {, +                return;, +            } else {, +                newState = current.remove(s);, +            }, +        } while (!state.compareAndSet(current, newState));, +        // if we removed successfully we then need to call unsubscribe on it, +        State current;, +        State newState;, +            current = state.get();, +            if (current.isUnsubscribed) {, +                return;, +            } else {, +                newState = current.clear();, +            }, +        } while (!state.compareAndSet(current, newState));, +        // if we cleared successfully we then need to call unsubscribe on all previous, +        // current is now "previous", +        unsubscribeFromAll(current.subscriptions);, +    @Override, +    public void unsubscribe() {, +        State current;, +        State newState;, +        do {, +            current = state.get();, +            if (current.isUnsubscribed) {, +                return;, +            } else {, +                newState = current.unsubscribe();, +            }, +        } while (!state.compareAndSet(current, newState));, +        // current is now "previous", +        unsubscribeFromAll(current.subscriptions);, +    private static void unsubscribeFromAll(Collection<Subscription> subscriptions) {, +        for (Subscription s : subscriptions) {, +            } catch (Throwable e) {]