[+++ b/language-adaptors/rxjava-scala/Rationale.md, +object Observer { …}, +++ b/language-adaptors/rxjava-scala/Rationale.md, +object Observer { …}, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/Rationale.md, +object Observer { …}, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import rx.lang.scala.concurrency._, +++ b/language-adaptors/rxjava-scala/Rationale.md, +object Observer { …}, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import rx.lang.scala.concurrency._, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/TestSchedulerExample.scala, +import scala.concurrent.duration._, +import scala.language.postfixOps, +import rx.lang.scala.{ Observable, Observer }, +import rx.lang.scala.concurrency.TestScheduler, +    import org.mockito.Matchers._, +    import org.mockito.Mockito._, +, +++ b/language-adaptors/rxjava-scala/Rationale.md, +object Observer { …}, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import rx.lang.scala.concurrency._, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/TestSchedulerExample.scala, +import scala.concurrent.duration._, +import scala.language.postfixOps, +import rx.lang.scala.{ Observable, Observer }, +import rx.lang.scala.concurrency.TestScheduler, +    import org.mockito.Matchers._, +    import org.mockito.Mockito._, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +  implicit def toJavaNotification[T](s: Notification[T]): rx.Notification[_ <: T] = s.asJava, +      def asJavaObservable = observable, +, +++ b/language-adaptors/rxjava-scala/Rationale.md, +object Observer { …}, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import rx.lang.scala.concurrency._, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/TestSchedulerExample.scala, +import scala.concurrent.duration._, +import scala.language.postfixOps, +import rx.lang.scala.{ Observable, Observer }, +import rx.lang.scala.concurrency.TestScheduler, +    import org.mockito.Matchers._, +    import org.mockito.Mockito._, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +  implicit def toJavaNotification[T](s: Notification[T]): rx.Notification[_ <: T] = s.asJava, +      def asJavaObservable = observable, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Notification.scala, +  def asJava: rx.Notification[_ <: T], +    case other: Notification[_] => asJava.equals(other.asJava), +  override def hashCode(): Int = asJava.hashCode(), +  def apply[T](n: rx.Notification[_ <: T]): Notification[T] = n.getKind match {, +  class OnNext[+T](val asJava: rx.Notification[_ <: T]) extends Notification[T] {, +    def value: T = asJava.getValue, +    override def toString = s"OnNext($value)", +  }, +  , +    def unapply[U](n: Notification[U]): Option[U] = n match {, +      case n2: OnNext[U] => Some(n.asJava.getValue), +  class OnError[+T](val asJava: rx.Notification[_ <: T]) extends Notification[T] {, +    def error: Throwable = asJava.getThrowable, +    override def toString = s"OnError($error)", +    def unapply[U](n: Notification[U]): Option[Throwable] = n match {, +      case n2: OnError[U] => Some(n2.asJava.getThrowable), +  class OnCompleted[T](val asJava: rx.Notification[_ <: T]) extends Notification[T] {, +    override def toString = "OnCompleted()", +    def unapply[U](n: Notification[U]): Option[Unit] = n match {, +      case n2: OnCompleted[U] => Some(), +++ b/language-adaptors/rxjava-scala/Rationale.md, +object Observer { …}, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import rx.lang.scala.concurrency._, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/TestSchedulerExample.scala, +import scala.concurrent.duration._, +import scala.language.postfixOps, +import rx.lang.scala.{ Observable, Observer }, +import rx.lang.scala.concurrency.TestScheduler, +    import org.mockito.Matchers._, +    import org.mockito.Mockito._, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +  implicit def toJavaNotification[T](s: Notification[T]): rx.Notification[_ <: T] = s.asJava, +      def asJavaObservable = observable, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Notification.scala, +  def asJava: rx.Notification[_ <: T], +    case other: Notification[_] => asJava.equals(other.asJava), +  override def hashCode(): Int = asJava.hashCode(), +  def apply[T](n: rx.Notification[_ <: T]): Notification[T] = n.getKind match {]