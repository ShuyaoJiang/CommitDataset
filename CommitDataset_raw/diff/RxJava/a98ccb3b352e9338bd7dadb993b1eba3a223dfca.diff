[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorJoin;, +        return create(new OperatorJoin<T, TRight, TLeftDuration, TRightDuration, R>(this, right, leftDurationSelector, rightDurationSelector, resultSelector));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorJoin;, +        return create(new OperatorJoin<T, TRight, TLeftDuration, TRightDuration, R>(this, right, leftDurationSelector, rightDurationSelector, resultSelector));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorJoin;, +        return create(new OperatorJoin<T, TRight, TLeftDuration, TRightDuration, R>(this, right, leftDurationSelector, rightDurationSelector, resultSelector));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperatorJoin.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import rx.Observable;, +import rx.Observable.OnSubscribe;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.functions.Func1;, +import rx.functions.Func2;, +import rx.observers.SerializedSubscriber;, +import rx.subscriptions.CompositeSubscription;, +import rx.subscriptions.SerialSubscription;, +, +/**, + * Correlates the elements of two sequences based on overlapping durations., + * , + * @param <TLeft> the left value type, + * @param <TRight> the right value type, + * @param <TLeftDuration> the left duration value type, + * @param <TRightDuration> the right duration type, + * @param <R> the result type, + */, +public final class OperatorJoin<TLeft, TRight, TLeftDuration, TRightDuration, R> implements OnSubscribe<R> {, +    final Observable<TLeft> left;, +    final Observable<TRight> right;, +    final Func1<TLeft, Observable<TLeftDuration>> leftDurationSelector;, +    final Func1<TRight, Observable<TRightDuration>> rightDurationSelector;, +    final Func2<TLeft, TRight, R> resultSelector;, +, +    public OperatorJoin(, +            Observable<TLeft> left,, +            Observable<TRight> right,, +            Func1<TLeft, Observable<TLeftDuration>> leftDurationSelector,, +            Func1<TRight, Observable<TRightDuration>> rightDurationSelector,, +            Func2<TLeft, TRight, R> resultSelector) {, +        this.left = left;, +        this.right = right;, +        this.leftDurationSelector = leftDurationSelector;, +        this.rightDurationSelector = rightDurationSelector;, +        this.resultSelector = resultSelector;, +    }, +, +    @Override, +    public void call(Subscriber<? super R> t1) {, +        ResultSink result = new ResultSink(new SerializedSubscriber<R>(t1));, +        result.run();, +    }, +, +    /** Manage the left and right sources. */, +    final class ResultSink {, +        final CompositeSubscription group;, +        final Subscriber<? super R> subscriber;, +        final Object guard = new Object();, +        /** Guarded by guard. */, +        boolean leftDone;, +        /** Guarded by guard. */, +        int leftId;, +        /** Guarded by guard. */, +        final Map<Integer, TLeft> leftMap;, +        /** Guarded by guard. */, +        boolean rightDone;, +        /** Guarded by guard. */, +        int rightId;, +        /** Guarded by guard. */, +        final Map<Integer, TRight> rightMap;, +, +        public ResultSink(Subscriber<? super R> subscriber) {, +            this.subscriber = subscriber;, +            this.group = new CompositeSubscription();]