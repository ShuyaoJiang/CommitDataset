[+++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +            innerError(e);, +        private void innerError(Throwable e) {, +                parentSubscriber.innerError(e);, +++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +            innerError(e);, +        private void innerError(Throwable e) {, +                parentSubscriber.innerError(e);, +++ b/src/main/java/rx/internal/schedulers/NewThreadWorker.java, +        run.add(f);, +++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +            innerError(e);, +        private void innerError(Throwable e) {, +                parentSubscriber.innerError(e);, +++ b/src/main/java/rx/internal/schedulers/NewThreadWorker.java, +        run.add(f);, +++ b/src/main/java/rx/internal/schedulers/ScheduledAction.java, +import java.util.concurrent.Future;, +import rx.subscriptions.Subscriptions;, +    /** Set by the run() method to avoid self interrupting at the end of the run method. */, +    volatile Thread runner;, +            runner = Thread.currentThread();, +     * Adds a general Subscription to this {@code ScheduledAction} that will be unsubscribed, +     * if the underlying {@code action} completes or the this scheduled action is cancelled., +     * @param s the Subscription to add, +     * Adds the given Future to the unsubscription composite in order to support, +     * cancelling the underlying task in the executor framework., +     * @param f the future to add, +     */, +    public void add(final Future<?> f) {, +        cancel.add(Subscriptions.create(new FutureCompleter(f)));, +    }, +    , +    /**, +    /**, +     * Cancels the captured future if the caller of the call method, +     * is not the same as the runner of the outer ScheduledAction to, +     * prevent unnecessary self-interrupting if the unsubscription, +     * happens from the same thread., +     */, +    private final class FutureCompleter implements Action0 {, +        private final Future<?> f;, +, +        private FutureCompleter(Future<?> f) {, +            this.f = f;, +        }, +, +        @Override, +        public void call() {, +            if (runner != Thread.currentThread()) {, +                f.cancel(true);, +            }, +        }, +    }, +, +        @SuppressWarnings("unused"), +++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +            innerError(e);, +        private void innerError(Throwable e) {, +                parentSubscriber.innerError(e);, +++ b/src/main/java/rx/internal/schedulers/NewThreadWorker.java, +        run.add(f);, +++ b/src/main/java/rx/internal/schedulers/ScheduledAction.java, +import java.util.concurrent.Future;, +import rx.subscriptions.Subscriptions;, +    /** Set by the run() method to avoid self interrupting at the end of the run method. */, +    volatile Thread runner;, +            runner = Thread.currentThread();, +     * Adds a general Subscription to this {@code ScheduledAction} that will be unsubscribed, +     * if the underlying {@code action} completes or the this scheduled action is cancelled., +     * @param s the Subscription to add, +     * Adds the given Future to the unsubscription composite in order to support, +     * cancelling the underlying task in the executor framework., +     * @param f the future to add, +     */, +    public void add(final Future<?> f) {, +        cancel.add(Subscriptions.create(new FutureCompleter(f)));, +    }, +    , +    /**, +    /**, +     * Cancels the captured future if the caller of the call method, +     * is not the same as the runner of the outer ScheduledAction to, +     * prevent unnecessary self-interrupting if the unsubscription, +     * happens from the same thread., +     */, +    private final class FutureCompleter implements Action0 {, +        private final Future<?> f;, +, +        private FutureCompleter(Future<?> f) {, +            this.f = f;, +        }, +, +        @Override, +        public void call() {, +            if (runner != Thread.currentThread()) {, +                f.cancel(true);, +            }, +        }, +    }]