[+++ b/src/main/java/rx/observers/TestSubscriber.java, +     * Subscriber from the Observable). If timeout expires then the Subscriber is unsubscribed from the Observable., +            boolean result = latch.await(timeout, unit);, +            if (!result) {, +                // timeout occurred, +                unsubscribe();, +            }, +        } catch (InterruptedException e) {, +++ b/src/main/java/rx/observers/TestSubscriber.java, +     * Subscriber from the Observable). If timeout expires then the Subscriber is unsubscribed from the Observable., +            boolean result = latch.await(timeout, unit);, +            if (!result) {, +                // timeout occurred, +                unsubscribe();, +            }, +        } catch (InterruptedException e) {, +++ b/src/test/java/rx/observers/TestSubscriberTest.java, +import static org.junit.Assert.assertTrue;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicBoolean;, +import org.junit.Assert;, +import rx.functions.Action0;, +        TestSubscriber<Object> subscriber = new TestSubscriber<Object>();, +    , +    @Test, +    public void testAwaitTerminalEventWithDuration() {, +        TestSubscriber<Object> ts = new TestSubscriber<Object>();, +        Observable.just(1).subscribe(ts);, +        ts.awaitTerminalEvent(1, TimeUnit.SECONDS);, +        ts.assertTerminalEvent();, +    }, +    , +    @Test, +    public void testAwaitTerminalEventWithDurationAndUnsubscribeOnTimeout() {, +        TestSubscriber<Object> ts = new TestSubscriber<Object>();, +        final AtomicBoolean unsub = new AtomicBoolean(false);, +        Observable.just(1), +        //, +                .doOnUnsubscribe(new Action0() {, +                    @Override, +                    public void call() {, +                        unsub.set(true);, +                    }, +                }), +                //, +                .delay(1000, TimeUnit.MILLISECONDS).subscribe(ts);, +        ts.awaitTerminalEventAndUnsubscribeOnTimeout(100, TimeUnit.MILLISECONDS);, +        assertTrue(unsub.get());, +    }, +]