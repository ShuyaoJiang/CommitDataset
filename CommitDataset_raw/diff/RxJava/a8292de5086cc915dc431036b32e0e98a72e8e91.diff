[+++ /dev/null, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/concurrency/Schedulers.java, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/concurrency/Schedulers.java, +++ b/rxjava-core/src/main/java/rx/operators/OperationObserveOn.java, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +, +            Scheduler scheduler = spy(Tester.UnitTest.forwardingScheduler(Schedulers.immediate()));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/concurrency/Schedulers.java, +++ b/rxjava-core/src/main/java/rx/operators/OperationObserveOn.java, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +, +            Scheduler scheduler = spy(Tester.UnitTest.forwardingScheduler(Schedulers.immediate()));, +++ b/rxjava-core/src/main/java/rx/operators/OperationSubscribeOn.java, +            Scheduler scheduler = spy(Tester.UnitTest.forwardingScheduler(Schedulers.immediate()));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/concurrency/Schedulers.java, +++ b/rxjava-core/src/main/java/rx/operators/OperationObserveOn.java, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +, +            Scheduler scheduler = spy(Tester.UnitTest.forwardingScheduler(Schedulers.immediate()));, +++ b/rxjava-core/src/main/java/rx/operators/OperationSubscribeOn.java, +            Scheduler scheduler = spy(Tester.UnitTest.forwardingScheduler(Schedulers.immediate()));, +++ b/rxjava-core/src/main/java/rx/operators/Tester.java, +import java.util.concurrent.TimeUnit;, +import rx.Scheduler;, +import rx.util.functions.Action0;, +import rx.util.functions.Func0;, +        /**, +         * Used for mocking of Schedulers since many Scheduler implementations are static/final., +         * , +         * @param underlying, +         * @return, +         */, +        public static Scheduler forwardingScheduler(Scheduler underlying) {, +            return new ForwardingScheduler(underlying);, +        }, +, +, +        public static class ForwardingScheduler implements Scheduler {, +            private final Scheduler underlying;, +, +            public ForwardingScheduler(Scheduler underlying) {, +                this.underlying = underlying;, +            }, +, +            @Override, +            public Subscription schedule(Action0 action) {, +                return underlying.schedule(action);, +            }, +, +            @Override, +            public Subscription schedule(Func0<Subscription> action) {, +                return underlying.schedule(action);, +            }, +, +            @Override, +            public Subscription schedule(Action0 action, long dueTime, TimeUnit unit) {, +                return underlying.schedule(action, dueTime, unit);, +            }, +, +            @Override, +            public Subscription schedule(Func0<Subscription> action, long dueTime, TimeUnit unit) {, +                return underlying.schedule(action, dueTime, unit);, +            }, +, +            @Override, +            public long now() {, +                return underlying.now();, +            }, +        }]