[+++ b/src/main/java/io/reactivex/exceptions/Exceptions.java, +        if (t instanceof StackOverflowError) {, +++ b/src/main/java/io/reactivex/exceptions/Exceptions.java, +        if (t instanceof StackOverflowError) {, +++ /dev/null, +++ b/src/main/java/io/reactivex/exceptions/Exceptions.java, +        if (t instanceof StackOverflowError) {, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/io/reactivex/exceptions/Exceptions.java, +        if (t instanceof StackOverflowError) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/io/reactivex/exceptions/Exceptions.java, +        if (t instanceof StackOverflowError) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/io/reactivex/exceptions/Exceptions.java, +        if (t instanceof StackOverflowError) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/test/java/io/reactivex/exceptions/ExceptionsNullTest.java, +    @Ignore("OnCompleteFailedException will likely not be ported"), +//        Throwable t = new OnCompleteFailedException(null);, +//, +//        Assert.assertTrue(t.getCause() instanceof NullPointerException);, +    @Ignore("OnCompleteFailedException will likely not be ported"), +//        Throwable t = new OnCompleteFailedException("Message", null);, +//, +//        Assert.assertTrue(t.getCause() instanceof NullPointerException);, +    @Ignore("OnErrorFailedException will likely not be ported"), +//        Throwable t = new OnErrorFailedException(null);, +//, +//        Assert.assertTrue(t.getCause() instanceof NullPointerException);, +    @Ignore("OnErrorFailedException will likely not be ported"), +//        Throwable t = new OnErrorFailedException("Message", null);, +//, +//        Assert.assertTrue(t.getCause() instanceof NullPointerException);, +    @Ignore("UnsubscribeFailedException will likely not be ported"), +//        Throwable t = new UnsubscribeFailedException(null);, +//, +//        Assert.assertTrue(t.getCause() instanceof NullPointerException);, +    @Ignore("OnErrorNotImplementedException will likely not be ported"), +//        Throwable t = new OnErrorNotImplementedException(null);, +//, +//        Assert.assertTrue(t.getCause() instanceof NullPointerException);, +    @Ignore("OnErrorNotImplementedException will likely not be ported"), +//        Throwable t = new OnErrorNotImplementedException("Message", null);, +//, +//        Assert.assertTrue(t.getCause() instanceof NullPointerException);, +++ b/src/main/java/io/reactivex/exceptions/Exceptions.java, +        if (t instanceof StackOverflowError) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/test/java/io/reactivex/exceptions/ExceptionsNullTest.java, +    @Ignore("OnCompleteFailedException will likely not be ported"), +//        Throwable t = new OnCompleteFailedException(null);, +//, +//        Assert.assertTrue(t.getCause() instanceof NullPointerException);, +    @Ignore("OnCompleteFailedException will likely not be ported"), +//        Throwable t = new OnCompleteFailedException("Message", null);, +//, +//        Assert.assertTrue(t.getCause() instanceof NullPointerException);, +    @Ignore("OnErrorFailedException will likely not be ported"), +//        Throwable t = new OnErrorFailedException(null);, +//, +//        Assert.assertTrue(t.getCause() instanceof NullPointerException);, +    @Ignore("OnErrorFailedException will likely not be ported"), +//        Throwable t = new OnErrorFailedException("Message", null);, +//, +//        Assert.assertTrue(t.getCause() instanceof NullPointerException);, +    @Ignore("UnsubscribeFailedException will likely not be ported"), +//        Throwable t = new UnsubscribeFailedException(null);, +//, +//        Assert.assertTrue(t.getCause() instanceof NullPointerException);, +    @Ignore("OnErrorNotImplementedException will likely not be ported"), +//        Throwable t = new OnErrorNotImplementedException(null);, +//, +//        Assert.assertTrue(t.getCause() instanceof NullPointerException);, +    @Ignore("OnErrorNotImplementedException will likely not be ported"), +//        Throwable t = new OnErrorNotImplementedException("Message", null);, +//, +//        Assert.assertTrue(t.getCause() instanceof NullPointerException);, +++ b/src/test/java/io/reactivex/exceptions/ExceptionsTest.java, +    @Test(expected = RuntimeException.class), +        } catch (RuntimeException t) {, +    @Test(expected = RuntimeException.class), +    @Test(expected = RuntimeException.class), +    @Test(expected = RuntimeException.class), +    @Test(expected = RuntimeException.class), +    @Test(expected = RuntimeException.class), +    @Test(expected = RuntimeException.class), +    @Test(expected = RuntimeException.class)]