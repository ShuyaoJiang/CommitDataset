[+++ b/src/main/java/io/reactivex/plugins/RxJavaPlugins.java, +    static volatile Function<? super Runnable, ? extends Runnable> onScheduleHandler;, +    static volatile Function<? super Callable<Scheduler>, ? extends Scheduler> onInitComputationHandler;, +    static volatile Function<? super Callable<Scheduler>, ? extends Scheduler> onInitSingleHandler;, +    static volatile Function<? super Callable<Scheduler>, ? extends Scheduler> onInitIoHandler;, +    static volatile Function<? super Callable<Scheduler>, ? extends Scheduler> onInitNewThreadHandler;, +    static volatile Function<? super Scheduler, ? extends Scheduler> onComputationHandler;, +    static volatile Function<? super Scheduler, ? extends Scheduler> onSingleHandler;, +    static volatile Function<? super Scheduler, ? extends Scheduler> onIoHandler;, +    static volatile Function<? super Scheduler, ? extends Scheduler> onNewThreadHandler;, +    static volatile Function<? super Flowable, ? extends Flowable> onFlowableAssembly;, +    static volatile Function<? super ConnectableFlowable, ? extends ConnectableFlowable> onConnectableFlowableAssembly;, +    static volatile Function<? super Observable, ? extends Observable> onObservableAssembly;, +    static volatile Function<? super ConnectableObservable, ? extends ConnectableObservable> onConnectableObservableAssembly;, +    static volatile Function<? super Maybe, ? extends Maybe> onMaybeAssembly;, +    static volatile Function<? super Single, ? extends Single> onSingleAssembly;, +    static volatile Function<? super Completable, ? extends Completable> onCompletableAssembly;, +    static volatile Function<? super ParallelFlowable, ? extends ParallelFlowable> onParallelAssembly;, +    static volatile BiFunction<? super Flowable, ? super Subscriber, ? extends Subscriber> onFlowableSubscribe;, +    static volatile BiFunction<? super Maybe, ? super MaybeObserver, ? extends MaybeObserver> onMaybeSubscribe;, +    static volatile BiFunction<? super Observable, ? super Observer, ? extends Observer> onObservableSubscribe;, +    static volatile BiFunction<? super Single, ? super SingleObserver, ? extends SingleObserver> onSingleSubscribe;, +    static volatile BiFunction<? super Completable, ? super CompletableObserver, ? extends CompletableObserver> onCompletableSubscribe;, +    public static Function<? super Scheduler, ? extends Scheduler> getComputationSchedulerHandler() {, +    public static Function<? super Callable<Scheduler>, ? extends Scheduler> getInitComputationSchedulerHandler() {, +    public static Function<? super Callable<Scheduler>, ? extends Scheduler> getInitIoSchedulerHandler() {, +    public static Function<? super Callable<Scheduler>, ? extends Scheduler> getInitNewThreadSchedulerHandler() {, +    public static Function<? super Callable<Scheduler>, ? extends Scheduler> getInitSingleSchedulerHandler() {, +    public static Function<? super Scheduler, ? extends Scheduler> getIoSchedulerHandler() {, +    public static Function<? super Scheduler, ? extends Scheduler> getNewThreadSchedulerHandler() {, +    public static Function<? super Runnable, ? extends Runnable> getScheduleHandler() {, +    public static Function<? super Scheduler, ? extends Scheduler> getSingleSchedulerHandler() {, +        Function<? super Callable<Scheduler>, ? extends Scheduler> f = onInitComputationHandler;, +        Function<? super Callable<Scheduler>, ? extends Scheduler> f = onInitIoHandler;, +        Function<? super Callable<Scheduler>, ? extends Scheduler> f = onInitNewThreadHandler;, +        Function<? super Callable<Scheduler>, ? extends Scheduler> f = onInitSingleHandler;, +        Function<? super Scheduler, ? extends Scheduler> f = onComputationHandler;, +        Function<? super Scheduler, ? extends Scheduler> f = onIoHandler;, +        Function<? super Scheduler, ? extends Scheduler> f = onNewThreadHandler;, +        Function<? super Runnable, ? extends Runnable> f = onScheduleHandler;, +        Function<? super Scheduler, ? extends Scheduler> f = onSingleHandler;, +    public static void setComputationSchedulerHandler(@Nullable Function<? super Scheduler, ? extends Scheduler> handler) {, +    public static void setInitComputationSchedulerHandler(@Nullable Function<? super Callable<Scheduler>, ? extends Scheduler> handler) {, +    public static void setInitIoSchedulerHandler(@Nullable Function<? super Callable<Scheduler>, ? extends Scheduler> handler) {, +    public static void setInitNewThreadSchedulerHandler(@Nullable Function<? super Callable<Scheduler>, ? extends Scheduler> handler) {, +    public static void setInitSingleSchedulerHandler(@Nullable Function<? super Callable<Scheduler>, ? extends Scheduler> handler) {, +    public static void setIoSchedulerHandler(@Nullable Function<? super Scheduler, ? extends Scheduler> handler) {, +    public static void setNewThreadSchedulerHandler(@Nullable Function<? super Scheduler, ? extends Scheduler> handler) {, +    public static void setScheduleHandler(@Nullable Function<? super Runnable, ? extends Runnable> handler) {, +    public static void setSingleSchedulerHandler(@Nullable Function<? super Scheduler, ? extends Scheduler> handler) {, +    public static Function<? super Completable, ? extends Completable> getOnCompletableAssembly() {, +    public static BiFunction<? super Completable, ? super CompletableObserver, ? extends CompletableObserver> getOnCompletableSubscribe() {, +    public static Function<? super Flowable, ? extends Flowable> getOnFlowableAssembly() {, +    public static Function<? super ConnectableFlowable, ? extends ConnectableFlowable> getOnConnectableFlowableAssembly() {, +    public static BiFunction<? super Flowable, ? super Subscriber, ? extends Subscriber> getOnFlowableSubscribe() {, +    public static BiFunction<? super Maybe, ? super MaybeObserver, ? extends MaybeObserver> getOnMaybeSubscribe() {, +    public static Function<? super Maybe, ? extends Maybe> getOnMaybeAssembly() {, +    public static Function<? super Single, ? extends Single> getOnSingleAssembly() {, +    public static BiFunction<? super Single, ? super SingleObserver, ? extends SingleObserver> getOnSingleSubscribe() {, +    public static Function<? super Observable, ? extends Observable> getOnObservableAssembly() {, +    public static Function<? super ConnectableObservable, ? extends ConnectableObservable> getOnConnectableObservableAssembly() {, +    public static BiFunction<? super Observable, ? super Observer, ? extends Observer> getOnObservableSubscribe() {, +    public static void setOnCompletableAssembly(@Nullable Function<? super Completable, ? extends Completable> onCompletableAssembly) {, +            @Nullable BiFunction<? super Completable, ? super CompletableObserver, ? extends CompletableObserver> onCompletableSubscribe) {, +    public static void setOnFlowableAssembly(@Nullable Function<? super Flowable, ? extends Flowable> onFlowableAssembly) {, +    public static void setOnMaybeAssembly(@Nullable Function<? super Maybe, ? extends Maybe> onMaybeAssembly) {, +    public static void setOnConnectableFlowableAssembly(@Nullable Function<? super ConnectableFlowable, ? extends ConnectableFlowable> onConnectableFlowableAssembly) {, +    public static void setOnFlowableSubscribe(@Nullable BiFunction<? super Flowable, ? super Subscriber, ? extends Subscriber> onFlowableSubscribe) {, +    public static void setOnMaybeSubscribe(@Nullable BiFunction<? super Maybe, MaybeObserver, ? extends MaybeObserver> onMaybeSubscribe) {, +    public static void setOnObservableAssembly(@Nullable Function<? super Observable, ? extends Observable> onObservableAssembly) {, +    public static void setOnConnectableObservableAssembly(@Nullable Function<? super ConnectableObservable, ? extends ConnectableObservable> onConnectableObservableAssembly) {, +            @Nullable BiFunction<? super Observable, ? super Observer, ? extends Observer> onObservableSubscribe) {, +    public static void setOnSingleAssembly(@Nullable Function<? super Single, ? extends Single> onSingleAssembly) {, +    public static void setOnSingleSubscribe(@Nullable BiFunction<? super Single, ? super SingleObserver, ? extends SingleObserver> onSingleSubscribe) {, +        BiFunction<? super Flowable, ? super Subscriber, ? extends Subscriber> f = onFlowableSubscribe;, +        BiFunction<? super Observable, ? super Observer, ? extends Observer> f = onObservableSubscribe;, +        BiFunction<? super Single, ? super SingleObserver, ? extends SingleObserver> f = onSingleSubscribe;, +        BiFunction<? super Completable, ? super CompletableObserver, ? extends CompletableObserver> f = onCompletableSubscribe;, +        BiFunction<? super Maybe, ? super MaybeObserver, ? extends MaybeObserver> f = onMaybeSubscribe;, +        Function<? super Maybe, ? extends Maybe> f = onMaybeAssembly;, +        Function<? super Flowable, ? extends Flowable> f = onFlowableAssembly;, +        Function<? super ConnectableFlowable, ? extends ConnectableFlowable> f = onConnectableFlowableAssembly;, +        Function<? super Observable, ? extends Observable> f = onObservableAssembly;, +        Function<? super ConnectableObservable, ? extends ConnectableObservable> f = onConnectableObservableAssembly;, +        Function<? super Single, ? extends Single> f = onSingleAssembly;, +        Function<? super Completable, ? extends Completable> f = onCompletableAssembly;, +    public static void setOnParallelAssembly(@Nullable Function<? super ParallelFlowable, ? extends ParallelFlowable> handler) {, +    public static Function<? super ParallelFlowable, ? extends ParallelFlowable> getOnParallelAssembly() {, +        Function<? super ParallelFlowable, ? extends ParallelFlowable> f = onParallelAssembly;, +    static Scheduler applyRequireNonNull(@NonNull Function<? super Callable<Scheduler>, ? extends Scheduler> f, Callable<Scheduler> s) {, +++ b/src/main/java/io/reactivex/plugins/RxJavaPlugins.java, +    static volatile Function<? super Runnable, ? extends Runnable> onScheduleHandler;, +    static volatile Function<? super Callable<Scheduler>, ? extends Scheduler> onInitComputationHandler;, +    static volatile Function<? super Callable<Scheduler>, ? extends Scheduler> onInitSingleHandler;, +    static volatile Function<? super Callable<Scheduler>, ? extends Scheduler> onInitIoHandler;, +    static volatile Function<? super Callable<Scheduler>, ? extends Scheduler> onInitNewThreadHandler;, +    static volatile Function<? super Scheduler, ? extends Scheduler> onComputationHandler;, +    static volatile Function<? super Scheduler, ? extends Scheduler> onSingleHandler;, +    static volatile Function<? super Scheduler, ? extends Scheduler> onIoHandler;, +    static volatile Function<? super Scheduler, ? extends Scheduler> onNewThreadHandler;]