[+++ b/src/main/java/io/reactivex/Observable.java, +        Objects.requireNonNull(debounceSelector);, +        Objects.requireNonNull(unit);, +        Objects.requireNonNull(scheduler);, +        Objects.requireNonNull(seed);, +        Objects.requireNonNull(seedSupplier);, +        Objects.requireNonNull(accumulator);, +    , +    public final Observable<T> throttleFirst(long windowDuration, TimeUnit unit) {, +        return throttleFirst(windowDuration, unit, Schedulers.computation());, +    }, +, +    public final Observable<T> throttleFirst(long skipDuration, TimeUnit unit, Scheduler scheduler) {, +        return lift(new OperatorThrottleFirstTimed<T>(skipDuration, unit, scheduler));, +    }, +    , +    public final Observable<T> throttleLast(long intervalDuration, TimeUnit unit) {, +        return sample(intervalDuration, unit);, +    }, +    , +    public final Observable<T> throttleLast(long intervalDuration, TimeUnit unit, Scheduler scheduler) {, +        return sample(intervalDuration, unit, scheduler);, +    }, +++ b/src/main/java/io/reactivex/Observable.java, +        Objects.requireNonNull(debounceSelector);, +        Objects.requireNonNull(unit);, +        Objects.requireNonNull(scheduler);, +        Objects.requireNonNull(seed);, +        Objects.requireNonNull(seedSupplier);, +        Objects.requireNonNull(accumulator);, +    , +    public final Observable<T> throttleFirst(long windowDuration, TimeUnit unit) {, +        return throttleFirst(windowDuration, unit, Schedulers.computation());, +    }, +, +    public final Observable<T> throttleFirst(long skipDuration, TimeUnit unit, Scheduler scheduler) {, +        return lift(new OperatorThrottleFirstTimed<T>(skipDuration, unit, scheduler));, +    }, +    , +    public final Observable<T> throttleLast(long intervalDuration, TimeUnit unit) {, +        return sample(intervalDuration, unit);, +    }, +    , +    public final Observable<T> throttleLast(long intervalDuration, TimeUnit unit, Scheduler scheduler) {, +        return sample(intervalDuration, unit, scheduler);, +    }, +++ b/src/main/java/io/reactivex/internal/operators/OperatorDebounce.java, +import io.reactivex.plugins.RxJavaPlugins;, +    static final class DebounceSubscriber<T, U> extends AtomicInteger implements Subscriber<T>, Subscription {, +        volatile long index;, +        , +        volatile long requested;, +        @SuppressWarnings("rawtypes"), +        static final AtomicLongFieldUpdater<DebounceSubscriber> REQUESTED =, +                AtomicLongFieldUpdater.newUpdater(DebounceSubscriber.class, "requested");, +, +        boolean done;, +, +            lazySet(1);, +            if (done) {, +                return;, +            }, +            , +            long idx = index + 1;, +            index = idx;, +            , +            Disposable d = debouncer;, +            if (d != null) {, +                d.dispose();, +            }, +                cancel();, +                cancel();, +                actual.onError(new NullPointerException("The publisher supplied is null"));, +            DebounceInnerSubscriber<T, U> dis = new DebounceInnerSubscriber<>(this, idx, t);, +            if (DEBOUNCER.compareAndSet(this, d, dis)) {, +                getAndIncrement();, +            if (done) {, +                return;, +            }, +            done = true;, +            if (decrementAndGet() == 0) {, +        }, +            BackpressureHelper.add(REQUESTED, this, n);, +        void emit(long idx, T value) {, +            if (idx == index) {, +                long r = requested;, +                if (r != 0L) {, +                    actual.onNext(value);, +                    if (r != Long.MAX_VALUE) {, +                        REQUESTED.decrementAndGet(this);, +                    }, +                } else {, +                    cancel();, +                    actual.onError(new IllegalStateException("Could not deliver value due to lack of requests"));, +                }, +            final long index;, +            final T value;, +            public DebounceInnerSubscriber(DebounceSubscriber<T, U> parent, long index, T value) {, +                this.index = index;, +                this.value = value;]