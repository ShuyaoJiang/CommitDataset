[+++ b/rxjava-core/src/main/java/rx/Observable.java, +        if (o instanceof SafeObserver), +        return p != null && p.getName().startsWith("rx.operators");, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        if (o instanceof SafeObserver), +        return p != null && p.getName().startsWith("rx.operators");, +++ b/rxjava-core/src/main/java/rx/operators/OperationTake.java, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.anyString;, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +import org.mockito.InOrder;, +import rx.util.functions.Func1;, +            private volatile boolean hasEmitedError = false;, +                if (hasEmitedError) {, +                    return;, +                }, +                if (hasEmitedError) {, +                    return;, +                }, +                if (hasEmitedError) {, +                    return;, +                }, +                    try {, +                    } catch (Throwable ex) {, +                        hasEmitedError = true;, +                        observer.onError(ex);, +                        subscription.unsubscribe();, +                        return;, +                    }, +        @Test(expected = IllegalArgumentException.class), +        public void testTakeWithError() {, +            Observable.from(1, 2, 3).take(1).map(new Func1<Integer, Integer>() {, +                public Integer call(Integer t1) {, +                    throw new IllegalArgumentException("some error");, +                }, +            }).toBlockingObservable().single();, +        }, +, +        @Test, +        public void testTakeWithErrorHappeningInOnNext() {, +            Observable<Integer> w = Observable.from(1, 2, 3).take(2).map(new Func1<Integer, Integer>() {, +                public Integer call(Integer t1) {, +                    throw new IllegalArgumentException("some error");, +                }, +            });, +, +            @SuppressWarnings("unchecked"), +            Observer<Integer> observer = mock(Observer.class);, +            w.subscribe(observer);, +            InOrder inOrder = inOrder(observer);, +            inOrder.verify(observer, times(1)).onError(any(IllegalArgumentException.class));, +            inOrder.verifyNoMoreInteractions();, +        }, +, +        @Test, +        public void testTakeWithErrorHappeningInTheLastOnNext() {, +            Observable<Integer> w = Observable.from(1, 2, 3).take(1).map(new Func1<Integer, Integer>() {, +                public Integer call(Integer t1) {, +                    throw new IllegalArgumentException("some error");, +                }, +            });, +, +            @SuppressWarnings("unchecked"), +            Observer<Integer> observer = mock(Observer.class);, +            w.subscribe(observer);, +            InOrder inOrder = inOrder(observer);, +            inOrder.verify(observer, times(1)).onError(any(IllegalArgumentException.class));, +            inOrder.verifyNoMoreInteractions();, +        }, +]