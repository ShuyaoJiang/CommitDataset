[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableWithLatestFrom.java, +import java.util.concurrent.atomic.*;, +import io.reactivex.internal.functions.ObjectHelper;, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +        serial.onSubscribe(wlf);, +, +        final AtomicLong requested = new AtomicLong();, +, +            SubscriptionHelper.deferredSetOnce(this.s, requested, s);, +                    r = ObjectHelper.requireNonNull(combiner.apply(t, u), "The combiner returned a null value");, +            SubscriptionHelper.deferredRequest(s, requested, n);, +            SubscriptionHelper.cancel(s);, +            SubscriptionHelper.cancel(s);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableWithLatestFrom.java, +import java.util.concurrent.atomic.*;, +import io.reactivex.internal.functions.ObjectHelper;, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +        serial.onSubscribe(wlf);, +, +        final AtomicLong requested = new AtomicLong();, +, +            SubscriptionHelper.deferredSetOnce(this.s, requested, s);, +                    r = ObjectHelper.requireNonNull(combiner.apply(t, u), "The combiner returned a null value");, +            SubscriptionHelper.deferredRequest(s, requested, n);, +            SubscriptionHelper.cancel(s);, +            SubscriptionHelper.cancel(s);, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableWithLatestFrom.java, +import io.reactivex.internal.functions.ObjectHelper;, +        serial.onSubscribe(wlf);, +                    r = ObjectHelper.requireNonNull(combiner.apply(t, u), "The combiner returned a null value");, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableWithLatestFrom.java, +import java.util.concurrent.atomic.*;, +import io.reactivex.internal.functions.ObjectHelper;, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +        serial.onSubscribe(wlf);, +, +        final AtomicLong requested = new AtomicLong();, +, +            SubscriptionHelper.deferredSetOnce(this.s, requested, s);, +                    r = ObjectHelper.requireNonNull(combiner.apply(t, u), "The combiner returned a null value");, +            SubscriptionHelper.deferredRequest(s, requested, n);, +            SubscriptionHelper.cancel(s);, +            SubscriptionHelper.cancel(s);, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableWithLatestFrom.java, +import io.reactivex.internal.functions.ObjectHelper;, +        serial.onSubscribe(wlf);, +                    r = ObjectHelper.requireNonNull(combiner.apply(t, u), "The combiner returned a null value");, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableWithLatestFromTest.java, +, +    @Test, +    public void combineToNull1() {, +        Flowable.just(1), +        .withLatestFrom(Flowable.just(2), new BiFunction<Integer, Integer, Object>() {, +            @Override, +            public Object apply(Integer a, Integer b) throws Exception {, +                return null;, +            }, +        }), +        .test(), +        .assertFailure(NullPointerException.class);, +    }, +, +    @SuppressWarnings("unchecked"), +    @Test, +    public void combineToNull2() {, +        Flowable.just(1), +        .withLatestFrom(Arrays.asList(Flowable.just(2), Flowable.just(3)), new Function<Object[], Object>() {, +            @Override, +            public Object apply(Object[] o) throws Exception {, +                return null;, +            }, +        }), +        .test(), +        .assertFailure(NullPointerException.class);, +    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableWithLatestFrom.java, +import java.util.concurrent.atomic.*;, +import io.reactivex.internal.functions.ObjectHelper;, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +        serial.onSubscribe(wlf);, +, +        final AtomicLong requested = new AtomicLong();, +, +            SubscriptionHelper.deferredSetOnce(this.s, requested, s);, +                    r = ObjectHelper.requireNonNull(combiner.apply(t, u), "The combiner returned a null value");, +            SubscriptionHelper.deferredRequest(s, requested, n);, +            SubscriptionHelper.cancel(s);, +            SubscriptionHelper.cancel(s);, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableWithLatestFrom.java, +import io.reactivex.internal.functions.ObjectHelper;, +        serial.onSubscribe(wlf);, +                    r = ObjectHelper.requireNonNull(combiner.apply(t, u), "The combiner returned a null value");, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableWithLatestFromTest.java, +, +    @Test, +    public void combineToNull1() {, +        Flowable.just(1), +        .withLatestFrom(Flowable.just(2), new BiFunction<Integer, Integer, Object>() {, +            @Override, +            public Object apply(Integer a, Integer b) throws Exception {]