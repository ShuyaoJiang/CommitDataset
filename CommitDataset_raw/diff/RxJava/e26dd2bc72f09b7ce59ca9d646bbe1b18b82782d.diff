[+++ b/src/main/java/rx/internal/operators/OnSubscribeCache.java, +            source.subscribe(cache);, +             * Note that we will never unsubscribe from 'source' unless we receive `onCompleted` or `onError`,, +             * as we want to receive and cache all of its values., +++ b/src/main/java/rx/internal/operators/OnSubscribeCache.java, +            source.subscribe(cache);, +             * Note that we will never unsubscribe from 'source' unless we receive `onCompleted` or `onError`,, +             * as we want to receive and cache all of its values., +++ b/src/main/java/rx/internal/operators/OperatorPublish.java, +                    Subscription s = requestHandler.state.getOrigin();, +        private final RxRingBuffer buffer = RxRingBuffer.getSpmcInstance();, +            drainQueue();, +                buffer.onCompleted();, +                buffer.onNext(notifier.getValue(t));, +            drainQueue();, +        public void drainQueue() {, +                        Object o = buffer.poll();, +++ b/src/main/java/rx/internal/operators/OnSubscribeCache.java, +            source.subscribe(cache);, +             * Note that we will never unsubscribe from 'source' unless we receive `onCompleted` or `onError`,, +             * as we want to receive and cache all of its values., +++ b/src/main/java/rx/internal/operators/OperatorPublish.java, +                    Subscription s = requestHandler.state.getOrigin();, +        private final RxRingBuffer buffer = RxRingBuffer.getSpmcInstance();, +            drainQueue();, +                buffer.onCompleted();, +                buffer.onNext(notifier.getValue(t));, +            drainQueue();, +        public void drainQueue() {, +                        Object o = buffer.poll();, +++ b/src/test/java/rx/internal/operators/OnSubscribeCacheTest.java, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import rx.functions.Action0;, +, +    @Test, +    public void testUnsubscribeSource() {, +        Action0 unsubscribe = mock(Action0.class);, +        Observable<Integer> o = Observable.just(1).doOnUnsubscribe(unsubscribe).cache();, +        o.subscribe();, +        o.subscribe();, +        o.subscribe();, +        verify(unsubscribe, times(1)).call();, +    }, +++ b/src/main/java/rx/internal/operators/OnSubscribeCache.java, +            source.subscribe(cache);, +             * Note that we will never unsubscribe from 'source' unless we receive `onCompleted` or `onError`,, +             * as we want to receive and cache all of its values., +++ b/src/main/java/rx/internal/operators/OperatorPublish.java, +                    Subscription s = requestHandler.state.getOrigin();, +        private final RxRingBuffer buffer = RxRingBuffer.getSpmcInstance();, +            drainQueue();, +                buffer.onCompleted();, +                buffer.onNext(notifier.getValue(t));, +            drainQueue();, +        public void drainQueue() {, +                        Object o = buffer.poll();, +++ b/src/test/java/rx/internal/operators/OnSubscribeCacheTest.java, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import rx.functions.Action0;, +, +    @Test, +    public void testUnsubscribeSource() {, +        Action0 unsubscribe = mock(Action0.class);, +        Observable<Integer> o = Observable.just(1).doOnUnsubscribe(unsubscribe).cache();, +        o.subscribe();, +        o.subscribe();, +        o.subscribe();, +        verify(unsubscribe, times(1)).call();, +    }, +++ b/src/test/java/rx/internal/operators/OnSubscribeRefCountTest.java, +        System.out.println("onNext: " + nextCount.get());]