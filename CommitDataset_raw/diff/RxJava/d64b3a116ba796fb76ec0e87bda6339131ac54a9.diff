[+++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/schedulers/SwingScheduler.java, +            long delay = Math.max(0, unit.toMillis(delayTime));, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/schedulers/SwingScheduler.java, +            long delay = Math.max(0, unit.toMillis(delayTime));, +++ b/rxjava-contrib/rxjava-swing/src/test/java/rx/schedulers/SwingSchedulerTest.java, +++ b/rxjava-contrib/rxjava-swing/src/main/java/rx/schedulers/SwingScheduler.java, +            long delay = Math.max(0, unit.toMillis(delayTime));, +++ b/rxjava-contrib/rxjava-swing/src/test/java/rx/schedulers/SwingSchedulerTest.java, +++ b/rxjava-core/src/main/java/rx/Scheduler.java, +         * <p>Note to implementors: non-positive {@code delayTime} should be regarded as, +         * undelayed schedule, i.e., as if the {@link #schedule(rx.functions.Action0)} was called., +         *            time to wait before executing the action, non-positive values indicate an undelayed schedule, +         * <p>Note to implementors: non-positive {@code initialTime} and {@code period} should be regarded as, +         * undelayed scheduling of the first and any subsequent executions., +         *            time to wait before executing the action for the first time, , +         *            non-positive values indicate an undelayed schedule, +         *            the time interval to wait each time in between executing the action,, +         *            non-positive values indicate no delay between repeated schedules]