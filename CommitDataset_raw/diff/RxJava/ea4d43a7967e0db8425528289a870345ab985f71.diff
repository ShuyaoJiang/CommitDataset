[+++ b/src/main/java/io/reactivex/Completable.java, +     * Nulls out references to the upstream producer and downstream CompletableObserver if, +     * the sequence is terminated or downstream calls dispose()., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code onTerminateDetach} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @return a Completable which nulls out references to the upstream producer and downstream CompletableObserver if, +     * the sequence is terminated or downstream calls dispose(), +     * @since 2.1.5 - experimental, +     */, +    @Experimental, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    public final Completable onTerminateDetach() {, +        return RxJavaPlugins.onAssembly(new CompletableDetach(this));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/Completable.java, +     * Nulls out references to the upstream producer and downstream CompletableObserver if, +     * the sequence is terminated or downstream calls dispose()., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code onTerminateDetach} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @return a Completable which nulls out references to the upstream producer and downstream CompletableObserver if, +     * the sequence is terminated or downstream calls dispose(), +     * @since 2.1.5 - experimental, +     */, +    @Experimental, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    public final Completable onTerminateDetach() {, +        return RxJavaPlugins.onAssembly(new CompletableDetach(this));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/Maybe.java, +, +     * @return a Maybe which nulls out references to the upstream producer and downstream MaybeObserver if, +++ b/src/main/java/io/reactivex/Completable.java, +     * Nulls out references to the upstream producer and downstream CompletableObserver if, +     * the sequence is terminated or downstream calls dispose()., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code onTerminateDetach} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @return a Completable which nulls out references to the upstream producer and downstream CompletableObserver if, +     * the sequence is terminated or downstream calls dispose(), +     * @since 2.1.5 - experimental, +     */, +    @Experimental, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    public final Completable onTerminateDetach() {, +        return RxJavaPlugins.onAssembly(new CompletableDetach(this));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/Maybe.java, +, +     * @return a Maybe which nulls out references to the upstream producer and downstream MaybeObserver if, +++ b/src/main/java/io/reactivex/Single.java, +     * Nulls out references to the upstream producer and downstream SingleObserver if, +     * the sequence is terminated or downstream calls dispose()., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code onTerminateDetach} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @return a Single which nulls out references to the upstream producer and downstream SingleObserver if, +     * the sequence is terminated or downstream calls dispose(), +     * @since 2.1.5 - experimental, +     */, +    @Experimental, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    public final Single<T> onTerminateDetach() {, +        return RxJavaPlugins.onAssembly(new SingleDetach<T>(this));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/Completable.java, +     * Nulls out references to the upstream producer and downstream CompletableObserver if, +     * the sequence is terminated or downstream calls dispose()., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code onTerminateDetach} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @return a Completable which nulls out references to the upstream producer and downstream CompletableObserver if, +     * the sequence is terminated or downstream calls dispose(), +     * @since 2.1.5 - experimental, +     */, +    @Experimental, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    public final Completable onTerminateDetach() {, +        return RxJavaPlugins.onAssembly(new CompletableDetach(this));, +    }, +]