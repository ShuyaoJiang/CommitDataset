[+++ /dev/null, +++ /dev/null, +++ b/rxjava-core/src/test/java/rx/util/AssertObservable.java, +package rx.util;, +, +import rx.Notification;, +import rx.Observable;, +import rx.util.functions.Func1;, +import rx.util.functions.Func2;, +, +public class AssertObservable {, +    /**, +     * Asserts that two Observables are equal. If they are not, an {@link AssertionError} is thrown, +     * with the given message. If <code>expecteds</code> and <code>actuals</code> are, +     * <code>null</code>, they are considered equal., +     * , +     * @param expected, +     *            Observable with expected values., +     * @param actual, +     *            Observable with actual values, +     */, +    public static <T> void assertObservableEqualsBlocking(Observable<T> expected, Observable<T> actual) {, +        assertObservableEqualsBlocking(null, expected, actual);, +    }, +, +    /**, +     * Asserts that two Observables are equal. If they are not, an {@link AssertionError} is thrown, +     * with the given message. If <code>expected</code> and <code>actual</code> are, +     * <code>null</code>, they are considered equal., +     * , +     * @param message, +     *            the identifying message for the {@link AssertionError} (<code>null</code> okay), +     * @param expected, +     *            Observable with expected values., +     * @param actual, +     *            Observable with actual values, +     */, +    public static <T> void assertObservableEqualsBlocking(String message, Observable<T> expected, Observable<T> actual) {, +        assertObservableEquals(expected, actual).toBlockingObservable().lastOrDefault(null);, +    }, +, +    /**, +     * Asserts that two {@link Observable}s are equal and returns an empty {@link Observable}. If, +     * they are not, an {@link Observable} is returned that calls onError with an, +     * {@link AssertionError} when subscribed to. If <code>expected</code> and <code>actual</code>, +     * are <code>null</code>, they are considered equal., +     * , +     * @param message, +     *            the identifying message for the {@link AssertionError} (<code>null</code> okay), +     * @param expected, +     *            Observable with expected values., +     * @param actual, +     *            Observable with actual values, +     */, +    public static <T> Observable<Void> assertObservableEquals(Observable<T> expected, Observable<T> actual) {, +        return assertObservableEquals(null, expected, actual);, +    }, +, +    /**, +     * Asserts that two {@link Observable}s are equal and returns an empty {@link Observable}. If, +     * they are not, an {@link Observable} is returned that calls onError with an, +     * {@link AssertionError} when subscribed to with the given message. If <code>expected</code>, +     * and <code>actual</code> are <code>null</code>, they are considered equal., +     * , +     * @param message, +     *            the identifying message for the {@link AssertionError} (<code>null</code> okay), +     * @param expected, +     *            Observable with expected values., +     * @param actual, +     *            Observable with actual values, +     */, +    public static <T> Observable<Void> assertObservableEquals(final String message, Observable<T> expected, Observable<T> actual) {, +        if (actual == null && expected != null) {, +            return Observable.error(new AssertionError((message != null ? message + ": " : "") + "Actual was null and expected was not"));, +        }, +        if (actual != null && expected == null) {, +            return Observable.error(new AssertionError((message != null ? message + ": " : "") + "Expected was null and actual was not"));, +        }, +        if (actual == null && expected == null) {, +            return Observable.empty();, +        }, +, +        Func2<? super Notification<T>, ? super Notification<T>, Notification<String>> zipFunction = new Func2<Notification<T>, Notification<T>, Notification<String>>() {, +            @Override, +            public Notification<String> call(Notification<T> expectedNotfication, Notification<T> actualNotification) {, +                if (expectedNotfication.equals(actualNotification)) {, +                    StringBuilder message = new StringBuilder();, +                    message.append(expectedNotfication.getKind());, +                    if (expectedNotfication.hasValue()), +                        message.append(" ").append(expectedNotfication.getValue());, +                    if (expectedNotfication.hasThrowable()), +                        message.append(" ").append(expectedNotfication.getThrowable());, +                    return new Notification<String>("equals " + message.toString());, +                }, +                else {, +                    StringBuilder error = new StringBuilder();, +                    error.append("expected:<").append(expectedNotfication.getKind());, +                    if (expectedNotfication.hasValue()), +                        error.append(" ").append(expectedNotfication.getValue());, +                    if (expectedNotfication.hasThrowable())]