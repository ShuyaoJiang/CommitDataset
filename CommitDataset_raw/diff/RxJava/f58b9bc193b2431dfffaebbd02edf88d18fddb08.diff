[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationDistinctUntilChanged;, +import rx.operators.OperatorFinally;, +        return create(OperationDistinctUntilChanged.distinctUntilChanged(this));, +        return create(OperationDistinctUntilChanged.distinctUntilChanged(this, keySelector));, +        return lift(new OperatorFinally<T>(action));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationDistinctUntilChanged;, +import rx.operators.OperatorFinally;, +        return create(OperationDistinctUntilChanged.distinctUntilChanged(this));, +        return create(OperationDistinctUntilChanged.distinctUntilChanged(this, keySelector));, +        return lift(new OperatorFinally<T>(action));, +++ b/rxjava-core/src/main/java/rx/operators/OperationDistinctUntilChanged.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import java.util.Comparator;, +, +import rx.Observable;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observer;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.functions.Action0;, +import rx.functions.Func1;, +import rx.functions.Functions;, +import rx.subscriptions.Subscriptions;, +, +/**, + * Returns an Observable that emits all sequentially distinct items emitted by the source., + */, +public final class OperationDistinctUntilChanged {, +, +    /**, +     * Returns an Observable that emits all sequentially distinct items emitted by the source., +     * , +     * @param source, +     *            The source Observable to emit the sequentially distinct items for., +     * @param equalityComparator, +     *            The comparator to use for deciding whether to consider two items as equal or not., +     * @return A subscription function for creating the target Observable., +     */, +    public static <T> OnSubscribeFunc<T> distinctUntilChanged(Observable<? extends T> source, Comparator<T> equalityComparator) {, +        return new DistinctUntilChanged<T, T>(source, Functions.<T> identity(), equalityComparator);, +    }, +, +    /**, +     * Returns an Observable that emits all sequentially distinct items emitted by the source., +     * , +     * @param source, +     *            The source Observable to emit the sequentially distinct items for., +     * @param keySelector, +     *            The function to select the key to use for the equality checks., +     * @param equalityComparator, +     *            The comparator to use for deciding whether to consider the two item keys as equal or not., +     * @return A subscription function for creating the target Observable., +     */, +    public static <T, U> OnSubscribeFunc<T> distinctUntilChanged(Observable<? extends T> source, Func1<? super T, ? extends U> keySelector, Comparator<U> equalityComparator) {, +        return new DistinctUntilChanged<T, U>(source, keySelector, equalityComparator);, +    }, +, +    /**, +     * Returns an Observable that emits all sequentially distinct items emitted by the source., +     * , +     * @param source, +     *            The source Observable to emit the sequentially distinct items for., +     * @param keySelector, +     *            The function to select the key to use for the equality checks., +     * @return A subscription function for creating the target Observable., +     */, +    public static <T, U> OnSubscribeFunc<T> distinctUntilChanged(Observable<? extends T> source, Func1<? super T, ? extends U> keySelector) {, +        return new DistinctUntilChanged<T, U>(source, keySelector, new DefaultEqualityComparator<U>());, +    }, +, +    /**, +     * Returns an Observable that emits all sequentially distinct items emitted by the source., +     * , +     * @param source, +     *            The source Observable to emit the sequentially distinct items for., +     * @return A subscription function for creating the target Observable., +     */, +    public static <T> OnSubscribeFunc<T> distinctUntilChanged(Observable<? extends T> source) {, +        return new DistinctUntilChanged<T, T>(source, Functions.<T> identity(), new DefaultEqualityComparator<T>());, +    }, +, +    // does not define a useful ordering; it's only used for equality tests here]