[+++ b/rxjava/src/main/java/rx/exceptions/CompositeException.java, + * An Exception that is a composite of one or more other Exceptions. A {@code CompositeException} does not, + * modify the structure of any exception it wraps, but at print-time it iterates through the list of, + * Throwables contained in the composit in order to print them all., + * Its invariant is to contain an immutable, ordered (by insertion order), unique list of non-composite, + * exceptions. You can retrieve individual exceptions in this list with {@link #getExceptions()}., + * The {@link #printStackTrace()} implementation handles the StackTrace in a customized way instead of using, + * {@code getCause()} so that it can avoid circular references., + * If you invoke {@link #getCause()}, it will lazily create the causal chain but will stop if it finds any, + * Throwable in the chain that it has already seen., +     * All of the following {@code printStackTrace} functionality is derived from JDK {@link Throwable}, +     * {@code printStackTrace}. In particular, the {@code PrintStreamOrWriter} abstraction is copied wholesale., +     * Changes from the official JDK implementation:<ul>, +     * <li>no infinite loop detection</li>, +     * <li>smaller critical section holding {@link PrintStream} lock</li>, +     * <li>explicit knowledge about the exceptions {@link List} that this loops through</li>, +     * </ul>, +     * Special handling for printing out a {@code CompositeException}., +     * Loops through all inner exceptions and prints them out.]