[+++ b/src/main/java/rx/Observable.java, +        return (Observable<R>) ((Transformer<T, ? extends R>) transformer).call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<T>, Observable<? extends R>> {, +++ b/src/main/java/rx/Observable.java, +        return (Observable<R>) ((Transformer<T, ? extends R>) transformer).call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<T>, Observable<? extends R>> {, +++ b/src/test/java/rx/CovarianceTest.java, +import java.util.Arrays;, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.Set;, +            public Observable<? extends Movie> call(Observable<Movie> t1) {, +            public Observable<? extends HorrorMovie> call(Observable<Movie> t1) {, +            public Observable<? extends HorrorMovie> call(Observable<Movie> t1) {, +            public Observable<? extends HorrorMovie> call(Observable<HorrorMovie> t1) {, +    @Test, +    public void testComposeWithDeltaLogic() {, +        List<Movie> list1 = Arrays.asList(new Movie(), new HorrorMovie(), new ActionMovie());, +        List<Movie> list2 = Arrays.asList(new ActionMovie(), new Movie(), new HorrorMovie(), new ActionMovie());, +        Observable<List<Movie>> movies = Observable.just(list1, list2);, +        movies.compose(deltaTransformer);, +    }, +, +    static Transformer<List<Movie>, Movie> deltaTransformer = new Transformer<List<Movie>, Movie>() {, +        @Override, +        public Observable<Movie> call(Observable<List<Movie>> movieList) {, +            return movieList, +                .startWith(new ArrayList<Movie>()), +                .buffer(2, 1), +                .skip(1), +                .flatMap(calculateDelta);, +        }, +    };, +, +    static Func1<List<List<Movie>>, Observable<Movie>> calculateDelta = new Func1<List<List<Movie>>, Observable<Movie>>() {, +        public Observable<Movie> call(List<List<Movie>> listOfLists) {, +            if (listOfLists.size() == 1) {, +                return Observable.from(listOfLists.get(0));, +            } else {, +                // diff the two, +                List<Movie> newList = listOfLists.get(1);, +                List<Movie> oldList = new ArrayList<Movie>(listOfLists.get(0));, +, +                Set<Movie> delta = new LinkedHashSet<Movie>();, +                delta.addAll(newList);, +                // remove all that match in old, +                delta.removeAll(oldList);, +, +                // filter oldList to those that aren't in the newList, +                oldList.removeAll(newList);, +, +                // for all left in the oldList we'll create DROP events, +                for (Movie old : oldList) {, +                    delta.add(new Movie());, +                }, +, +                return Observable.from(delta);, +            }, +        };, +    };, +, +++ b/src/main/java/rx/Observable.java, +        return (Observable<R>) ((Transformer<T, ? extends R>) transformer).call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<T>, Observable<? extends R>> {, +++ b/src/test/java/rx/CovarianceTest.java, +import java.util.Arrays;, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.Set;, +            public Observable<? extends Movie> call(Observable<Movie> t1) {, +            public Observable<? extends HorrorMovie> call(Observable<Movie> t1) {, +            public Observable<? extends HorrorMovie> call(Observable<Movie> t1) {, +            public Observable<? extends HorrorMovie> call(Observable<HorrorMovie> t1) {, +    @Test, +    public void testComposeWithDeltaLogic() {, +        List<Movie> list1 = Arrays.asList(new Movie(), new HorrorMovie(), new ActionMovie());, +        List<Movie> list2 = Arrays.asList(new ActionMovie(), new Movie(), new HorrorMovie(), new ActionMovie());, +        Observable<List<Movie>> movies = Observable.just(list1, list2);, +        movies.compose(deltaTransformer);, +    }, +, +    static Transformer<List<Movie>, Movie> deltaTransformer = new Transformer<List<Movie>, Movie>() {, +        @Override, +        public Observable<Movie> call(Observable<List<Movie>> movieList) {, +            return movieList, +                .startWith(new ArrayList<Movie>()), +                .buffer(2, 1), +                .skip(1), +                .flatMap(calculateDelta);, +        }, +    };, +, +    static Func1<List<List<Movie>>, Observable<Movie>> calculateDelta = new Func1<List<List<Movie>>, Observable<Movie>>() {, +        public Observable<Movie> call(List<List<Movie>> listOfLists) {, +            if (listOfLists.size() == 1) {, +                return Observable.from(listOfLists.get(0));, +            } else {, +                // diff the two, +                List<Movie> newList = listOfLists.get(1);, +                List<Movie> oldList = new ArrayList<Movie>(listOfLists.get(0));]