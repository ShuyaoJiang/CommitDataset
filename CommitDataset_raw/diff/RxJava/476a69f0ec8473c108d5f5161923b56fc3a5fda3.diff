[+++ b/src/main/java/io/reactivex/Scheduler.java, +import io.reactivex.annotations.*;, +import io.reactivex.internal.schedulers.*;, +        DisposeTask task = new DisposeTask(decoratedRun, w);, +        w.schedule(task, delay, unit);, +, +        return task;, +    static final class DisposeTask implements Runnable, Disposable {, +        Thread runner;, +, +            runner = Thread.currentThread();, +                dispose();, +                runner = null;, +            }, +        }, +, +        @Override, +        public void dispose() {, +            if (runner == Thread.currentThread() && w instanceof NewThreadWorker) {, +                ((NewThreadWorker)w).shutdown();, +            } else {, +, +        @Override, +        public boolean isDisposed() {, +            return w.isDisposed();, +        }, +++ b/src/main/java/io/reactivex/Scheduler.java, +import io.reactivex.annotations.*;, +import io.reactivex.internal.schedulers.*;, +        DisposeTask task = new DisposeTask(decoratedRun, w);, +        w.schedule(task, delay, unit);, +, +        return task;, +    static final class DisposeTask implements Runnable, Disposable {, +        Thread runner;, +, +            runner = Thread.currentThread();, +                dispose();, +                runner = null;, +            }, +        }, +, +        @Override, +        public void dispose() {, +            if (runner == Thread.currentThread() && w instanceof NewThreadWorker) {, +                ((NewThreadWorker)w).shutdown();, +            } else {, +, +        @Override, +        public boolean isDisposed() {, +            return w.isDisposed();, +        }, +++ b/src/main/java/io/reactivex/internal/schedulers/AbstractDirectTask.java, +/**, + * Copyright (c) 2016-present, RxJava Contributors., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package io.reactivex.internal.schedulers;, +, +import java.util.concurrent.*;, +import java.util.concurrent.atomic.AtomicReference;, +, +import io.reactivex.disposables.Disposable;, +import io.reactivex.internal.functions.Functions;, +, +/**, + * Base functionality for direct tasks that manage a runnable and cancellation/completion., + * @since 2.0.8, + */, +abstract class AbstractDirectTask, +extends AtomicReference<Future<?>>, +implements Disposable {, +, +    private static final long serialVersionUID = 1811839108042568751L;, +, +    protected final Runnable runnable;, +, +    protected Thread runner;, +, +    protected static final FutureTask<Void> FINISHED = new FutureTask<Void>(Functions.EMPTY_RUNNABLE, null);, +, +    protected static final FutureTask<Void> DISPOSED = new FutureTask<Void>(Functions.EMPTY_RUNNABLE, null);, +, +    public AbstractDirectTask(Runnable runnable) {, +        this.runnable = runnable;, +    }, +, +    @Override]