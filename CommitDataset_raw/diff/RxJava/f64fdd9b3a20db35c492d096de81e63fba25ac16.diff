[+++ b/src/test/java/io/reactivex/XFlatMapTest.java, +import io.reactivex.observers.*;, +    public Retry retry = new Retry(5, 1000, true);, +            long before = System.currentTimeMillis();, +            throw new IllegalStateException("Was not interrupted in time?! " + (System.currentTimeMillis() - before));, +    void beforeCancelSleep(BaseTestConsumer<?, ?> ts) throws Exception {, +        long before = System.currentTimeMillis();, +        Thread.sleep(50);, +        if (System.currentTimeMillis() - before > 100) {, +            ts.dispose();, +            throw new IllegalStateException("Overslept?" + (System.currentTimeMillis() - before));, +        }, +    }, +, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +++ b/src/test/java/io/reactivex/XFlatMapTest.java, +import io.reactivex.observers.*;, +    public Retry retry = new Retry(5, 1000, true);, +            long before = System.currentTimeMillis();, +            throw new IllegalStateException("Was not interrupted in time?! " + (System.currentTimeMillis() - before));, +    void beforeCancelSleep(BaseTestConsumer<?, ?> ts) throws Exception {, +        long before = System.currentTimeMillis();, +        Thread.sleep(50);, +        if (System.currentTimeMillis() - before > 100) {, +            ts.dispose();, +            throw new IllegalStateException("Overslept?" + (System.currentTimeMillis() - before));, +        }, +    }, +, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +            beforeCancelSleep(ts);, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableMergeMaxConcurrentTest.java, +    @Test(timeout = 30000), +    @Test(timeout = 30000), +    @Test(timeout = 30000)]