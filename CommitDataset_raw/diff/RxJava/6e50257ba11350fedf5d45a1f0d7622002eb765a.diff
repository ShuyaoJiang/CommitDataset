[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationGroupBy;, +import rx.operators.OperationTakeUntil;, +import rx.operators.OperationToIterator;, +        return OperationTakeUntil.takeUntil(source, other);, +        return create(OperationGroupBy.groupBy(source, keySelector, elementSelector));, +        return create(OperationGroupBy.groupBy(source, keySelector));, +        return OperationToIterator.toIterator(that);, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationGroupBy;, +import rx.operators.OperationTakeUntil;, +import rx.operators.OperationToIterator;, +        return OperationTakeUntil.takeUntil(source, other);, +        return create(OperationGroupBy.groupBy(source, keySelector, elementSelector));, +        return create(OperationGroupBy.groupBy(source, keySelector));, +        return OperationToIterator.toIterator(that);, +++ b/rxjava-core/src/main/java/rx/operators/OperationAll.java, +        private final AtomicBoolean status = new AtomicBoolean(true);, +            return subscription.wrap(sequence.subscribe(new Observer<T>() {, +                        observer.onNext(true);, +                        observer.onCompleted();, +                    observer.onError(e);, +                        observer.onNext(false);, +                        observer.onCompleted();, +            }));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationGroupBy;, +import rx.operators.OperationTakeUntil;, +import rx.operators.OperationToIterator;, +        return OperationTakeUntil.takeUntil(source, other);, +        return create(OperationGroupBy.groupBy(source, keySelector, elementSelector));, +        return create(OperationGroupBy.groupBy(source, keySelector));, +        return OperationToIterator.toIterator(that);, +++ b/rxjava-core/src/main/java/rx/operators/OperationAll.java, +        private final AtomicBoolean status = new AtomicBoolean(true);, +            return subscription.wrap(sequence.subscribe(new Observer<T>() {, +                        observer.onNext(true);, +                        observer.onCompleted();, +                    observer.onError(e);, +                        observer.onNext(false);, +                        observer.onCompleted();, +            }));, +++ b/rxjava-core/src/main/java/rx/operators/OperationGroupBy.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import static org.junit.Assert.*;, +, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +, +import org.junit.Test;, +, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +import rx.observables.GroupedObservable;, +import rx.util.functions.Func1;, +import rx.util.functions.Functions;, +, +public final class OperationGroupBy {, +, +    public static <K, T, R> Func1<Observer<GroupedObservable<K, R>>, Subscription> groupBy(Observable<T> source, final Func1<T, K> keySelector, final Func1<T, R> elementSelector) {, +, +        final Observable<KeyValue<K, R>> keyval = source.map(new Func1<T, KeyValue<K, R>>() {, +            @Override, +            public KeyValue<K, R> call(T t) {, +                K key = keySelector.call(t);, +                R value = elementSelector.call(t);, +, +                return new KeyValue<K, R>(key, value);, +            }, +        });, +, +        return new GroupBy<K, R>(keyval);, +    }, +, +    public static <K, T> Func1<Observer<GroupedObservable<K, T>>, Subscription> groupBy(Observable<T> source, final Func1<T, K> keySelector) {, +        return groupBy(source, keySelector, Functions.<T> identity());, +    }, +, +    private static class GroupBy<K, V> implements Func1<Observer<GroupedObservable<K, V>>, Subscription> {]