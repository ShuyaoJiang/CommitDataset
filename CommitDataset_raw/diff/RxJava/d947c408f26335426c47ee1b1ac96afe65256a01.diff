[+++ b/rxjava-contrib/rxjava-android/build.gradle, +++ b/rxjava-contrib/rxjava-android/build.gradle, +++ b/rxjava-contrib/rxjava-apache-http/build.gradle, +++ b/rxjava-contrib/rxjava-android/build.gradle, +++ b/rxjava-contrib/rxjava-apache-http/build.gradle, +++ b/rxjava-contrib/rxjava-async-util/build.gradle, +++ b/rxjava-contrib/rxjava-android/build.gradle, +++ b/rxjava-contrib/rxjava-apache-http/build.gradle, +++ b/rxjava-contrib/rxjava-async-util/build.gradle, +++ b/rxjava-contrib/rxjava-computation-expressions/build.gradle, +++ b/rxjava-contrib/rxjava-android/build.gradle, +++ b/rxjava-contrib/rxjava-apache-http/build.gradle, +++ b/rxjava-contrib/rxjava-async-util/build.gradle, +++ b/rxjava-contrib/rxjava-computation-expressions/build.gradle, +++ b/rxjava-contrib/rxjava-string/build.gradle, +++ b/rxjava-contrib/rxjava-android/build.gradle, +++ b/rxjava-contrib/rxjava-apache-http/build.gradle, +++ b/rxjava-contrib/rxjava-async-util/build.gradle, +++ b/rxjava-contrib/rxjava-computation-expressions/build.gradle, +++ b/rxjava-contrib/rxjava-string/build.gradle, +++ b/rxjava-contrib/rxjava-swing/build.gradle, +++ b/rxjava-contrib/rxjava-android/build.gradle, +++ b/rxjava-contrib/rxjava-apache-http/build.gradle, +++ b/rxjava-contrib/rxjava-async-util/build.gradle, +++ b/rxjava-contrib/rxjava-computation-expressions/build.gradle, +++ b/rxjava-contrib/rxjava-string/build.gradle, +++ b/rxjava-contrib/rxjava-swing/build.gradle, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationFilter;, +import rx.operators.OnSubscribeFromIterable;, +import rx.operators.OperatorTimeout;, +import rx.operators.OperatorTimeoutWithSelector;, +        return source.lift(new OperatorMerge(maxConcurrent)); // any idea how to get these generics working?!, +    private final Observable<Observable<T>> nest() {, +        if (count < 1) {, +            throw new IllegalArgumentException("Count must be positive");, +        return create(OperationFilter.filter(this, predicate));, +    public final <U, V> Observable<T> timeout(Func0<? extends Observable<U>> firstTimeoutSelector, Func1<? super T, ? extends Observable<V>> timeoutSelector) {, +        return timeout(firstTimeoutSelector, timeoutSelector, null);, +    public final <U, V> Observable<T> timeout(Func0<? extends Observable<U>> firstTimeoutSelector, Func1<? super T, ? extends Observable<V>> timeoutSelector, Observable<? extends T> other) {, +        if(timeoutSelector == null) {, +            throw new NullPointerException("timeoutSelector is null");, +        return lift(new OperatorTimeoutWithSelector<T, U, V>(firstTimeoutSelector, timeoutSelector, other));, +    public final <V> Observable<T> timeout(Func1<? super T, ? extends Observable<V>> timeoutSelector) {, +        return timeout(null, timeoutSelector, null);, +    public final <V> Observable<T> timeout(Func1<? super T, ? extends Observable<V>> timeoutSelector, Observable<? extends T> other) {, +        return timeout(null, timeoutSelector, other);, +        return timeout(timeout, timeUnit, null, Schedulers.computation());, +        return timeout(timeout, timeUnit, other, Schedulers.computation());, +        return lift(new OperatorTimeout<T>(timeout, timeUnit, other, scheduler));, +        return timeout(timeout, timeUnit, null, scheduler);, +++ b/rxjava-contrib/rxjava-android/build.gradle, +++ b/rxjava-contrib/rxjava-apache-http/build.gradle, +++ b/rxjava-contrib/rxjava-async-util/build.gradle, +++ b/rxjava-contrib/rxjava-computation-expressions/build.gradle, +++ b/rxjava-contrib/rxjava-string/build.gradle, +++ b/rxjava-contrib/rxjava-swing/build.gradle, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationFilter;, +import rx.operators.OnSubscribeFromIterable;, +import rx.operators.OperatorTimeout;, +import rx.operators.OperatorTimeoutWithSelector;, +        return source.lift(new OperatorMerge(maxConcurrent)); // any idea how to get these generics working?!, +    private final Observable<Observable<T>> nest() {, +        if (count < 1) {, +            throw new IllegalArgumentException("Count must be positive");, +        return create(OperationFilter.filter(this, predicate));, +    public final <U, V> Observable<T> timeout(Func0<? extends Observable<U>> firstTimeoutSelector, Func1<? super T, ? extends Observable<V>> timeoutSelector) {, +        return timeout(firstTimeoutSelector, timeoutSelector, null);, +    public final <U, V> Observable<T> timeout(Func0<? extends Observable<U>> firstTimeoutSelector, Func1<? super T, ? extends Observable<V>> timeoutSelector, Observable<? extends T> other) {, +        if(timeoutSelector == null) {, +            throw new NullPointerException("timeoutSelector is null");, +        return lift(new OperatorTimeoutWithSelector<T, U, V>(firstTimeoutSelector, timeoutSelector, other));, +    public final <V> Observable<T> timeout(Func1<? super T, ? extends Observable<V>> timeoutSelector) {, +        return timeout(null, timeoutSelector, null);, +    public final <V> Observable<T> timeout(Func1<? super T, ? extends Observable<V>> timeoutSelector, Observable<? extends T> other) {, +        return timeout(null, timeoutSelector, other);, +        return timeout(timeout, timeUnit, null, Schedulers.computation());, +        return timeout(timeout, timeUnit, other, Schedulers.computation());, +        return lift(new OperatorTimeout<T>(timeout, timeUnit, other, scheduler));, +        return timeout(timeout, timeUnit, null, scheduler);, +++ b/rxjava-core/src/main/java/rx/observers/TestSubscriber.java, +++ b/rxjava-contrib/rxjava-android/build.gradle, +++ b/rxjava-contrib/rxjava-apache-http/build.gradle, +++ b/rxjava-contrib/rxjava-async-util/build.gradle, +++ b/rxjava-contrib/rxjava-computation-expressions/build.gradle, +++ b/rxjava-contrib/rxjava-string/build.gradle, +++ b/rxjava-contrib/rxjava-swing/build.gradle, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationFilter;, +import rx.operators.OnSubscribeFromIterable;, +import rx.operators.OperatorTimeout;, +import rx.operators.OperatorTimeoutWithSelector;, +        return source.lift(new OperatorMerge(maxConcurrent)); // any idea how to get these generics working?!, +    private final Observable<Observable<T>> nest() {, +        if (count < 1) {, +            throw new IllegalArgumentException("Count must be positive");, +        return create(OperationFilter.filter(this, predicate));, +    public final <U, V> Observable<T> timeout(Func0<? extends Observable<U>> firstTimeoutSelector, Func1<? super T, ? extends Observable<V>> timeoutSelector) {, +        return timeout(firstTimeoutSelector, timeoutSelector, null);]