[+++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeToObservable.java, +import io.reactivex.annotations.Experimental;, +        source.subscribe(create(s));, +    /**, +     * Creates a {@link MaybeObserver} wrapper around a {@link Observer}., +     * @param <T> the value type, +     * @param downstream the downstream {@code Observer} to talk to, +     * @return the new MaybeObserver instance, +     * @since 2.1.11 - experimental, +     */, +    @Experimental, +    public static <T> MaybeObserver<T> create(Observer<? super T> downstream) {, +        return new MaybeToObservableObserver<T>(downstream);, +    }, +, +    static final class MaybeToObservableObserver<T> extends DeferredScalarDisposable<T>, +        MaybeToObservableObserver(Observer<? super T> actual) {, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeToObservable.java, +import io.reactivex.annotations.Experimental;, +        source.subscribe(create(s));, +    /**, +     * Creates a {@link MaybeObserver} wrapper around a {@link Observer}., +     * @param <T> the value type, +     * @param downstream the downstream {@code Observer} to talk to, +     * @return the new MaybeObserver instance, +     * @since 2.1.11 - experimental, +     */, +    @Experimental, +    public static <T> MaybeObserver<T> create(Observer<? super T> downstream) {, +        return new MaybeToObservableObserver<T>(downstream);, +    }, +, +    static final class MaybeToObservableObserver<T> extends DeferredScalarDisposable<T>, +        MaybeToObservableObserver(Observer<? super T> actual) {, +++ b/src/main/java/io/reactivex/internal/operators/mixed/ObservableConcatMapCompletable.java, +import io.reactivex.internal.disposables.DisposableHelper;, +        if (!ScalarXMapZHelper.tryAsCompletable(source, mapper, s)) {, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeToObservable.java, +import io.reactivex.annotations.Experimental;, +        source.subscribe(create(s));, +    /**, +     * Creates a {@link MaybeObserver} wrapper around a {@link Observer}., +     * @param <T> the value type, +     * @param downstream the downstream {@code Observer} to talk to, +     * @return the new MaybeObserver instance, +     * @since 2.1.11 - experimental, +     */, +    @Experimental, +    public static <T> MaybeObserver<T> create(Observer<? super T> downstream) {, +        return new MaybeToObservableObserver<T>(downstream);, +    }, +, +    static final class MaybeToObservableObserver<T> extends DeferredScalarDisposable<T>, +        MaybeToObservableObserver(Observer<? super T> actual) {, +++ b/src/main/java/io/reactivex/internal/operators/mixed/ObservableConcatMapCompletable.java, +import io.reactivex.internal.disposables.DisposableHelper;, +        if (!ScalarXMapZHelper.tryAsCompletable(source, mapper, s)) {, +++ b/src/main/java/io/reactivex/internal/operators/mixed/ObservableConcatMapMaybe.java, +        if (!ScalarXMapZHelper.tryAsMaybe(source, mapper, s)) {, +    }, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeToObservable.java, +import io.reactivex.annotations.Experimental;, +        source.subscribe(create(s));, +    /**, +     * Creates a {@link MaybeObserver} wrapper around a {@link Observer}., +     * @param <T> the value type, +     * @param downstream the downstream {@code Observer} to talk to, +     * @return the new MaybeObserver instance, +     * @since 2.1.11 - experimental, +     */, +    @Experimental, +    public static <T> MaybeObserver<T> create(Observer<? super T> downstream) {, +        return new MaybeToObservableObserver<T>(downstream);, +    }, +, +    static final class MaybeToObservableObserver<T> extends DeferredScalarDisposable<T>, +        MaybeToObservableObserver(Observer<? super T> actual) {, +++ b/src/main/java/io/reactivex/internal/operators/mixed/ObservableConcatMapCompletable.java, +import io.reactivex.internal.disposables.DisposableHelper;, +        if (!ScalarXMapZHelper.tryAsCompletable(source, mapper, s)) {, +++ b/src/main/java/io/reactivex/internal/operators/mixed/ObservableConcatMapMaybe.java, +        if (!ScalarXMapZHelper.tryAsMaybe(source, mapper, s)) {, +    }, +++ b/src/main/java/io/reactivex/internal/operators/mixed/ObservableConcatMapSingle.java, +        if (!ScalarXMapZHelper.tryAsSingle(source, mapper, s)) {, +    }, +++ b/src/main/java/io/reactivex/internal/operators/maybe/MaybeToObservable.java, +import io.reactivex.annotations.Experimental;, +        source.subscribe(create(s));, +    /**, +     * Creates a {@link MaybeObserver} wrapper around a {@link Observer}., +     * @param <T> the value type, +     * @param downstream the downstream {@code Observer} to talk to, +     * @return the new MaybeObserver instance, +     * @since 2.1.11 - experimental, +     */, +    @Experimental, +    public static <T> MaybeObserver<T> create(Observer<? super T> downstream) {, +        return new MaybeToObservableObserver<T>(downstream);, +    }]