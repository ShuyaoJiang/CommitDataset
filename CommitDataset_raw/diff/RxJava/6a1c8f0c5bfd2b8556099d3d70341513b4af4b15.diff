[+++ b/rxjava-contrib/rxjava-android/src/test/java/rx/android/observables/AndroidObservableTest.java, +, +import rx.observers.TestObserver;, +        AndroidObservable.fromFragment(supportFragment, Observable.just("success")).subscribe(new TestObserver<String>(observer));, +        AndroidObservable.fromFragment(fragment, Observable.just("success")).subscribe(new TestObserver<String>(observer));, +++ b/rxjava-contrib/rxjava-android/src/test/java/rx/android/observables/AndroidObservableTest.java, +, +import rx.observers.TestObserver;, +        AndroidObservable.fromFragment(supportFragment, Observable.just("success")).subscribe(new TestObserver<String>(observer));, +        AndroidObservable.fromFragment(fragment, Observable.just("success")).subscribe(new TestObserver<String>(observer));, +++ b/rxjava-contrib/rxjava-android/src/test/java/rx/android/operators/OperationObserveFromAndroidComponentTest.java, +import rx.observers.TestObserver;, +        OperationObserveFromAndroidComponent.observeFromAndroidComponent(source, mockFragment).subscribe(new TestObserver<Integer>(mockObserver));, +        OperationObserveFromAndroidComponent.observeFromAndroidComponent(source, mockFragment).subscribe(new TestObserver<Integer>(mockObserver));, +        OperationObserveFromAndroidComponent.observeFromAndroidComponent(source.toObservable(), mockFragment).subscribe(new TestObserver<Integer>(mockObserver));, +        OperationObserveFromAndroidComponent.observeFromAndroidComponent(source.toObservable(), mockFragment).subscribe(new TestObserver<Integer>(mockObserver));, +                testObservable, mockActivity).subscribe(new TestObserver<Integer>(mockObserver));, +++ b/rxjava-contrib/rxjava-android/src/test/java/rx/android/observables/AndroidObservableTest.java, +, +import rx.observers.TestObserver;, +        AndroidObservable.fromFragment(supportFragment, Observable.just("success")).subscribe(new TestObserver<String>(observer));, +        AndroidObservable.fromFragment(fragment, Observable.just("success")).subscribe(new TestObserver<String>(observer));, +++ b/rxjava-contrib/rxjava-android/src/test/java/rx/android/operators/OperationObserveFromAndroidComponentTest.java, +import rx.observers.TestObserver;, +        OperationObserveFromAndroidComponent.observeFromAndroidComponent(source, mockFragment).subscribe(new TestObserver<Integer>(mockObserver));, +        OperationObserveFromAndroidComponent.observeFromAndroidComponent(source, mockFragment).subscribe(new TestObserver<Integer>(mockObserver));, +        OperationObserveFromAndroidComponent.observeFromAndroidComponent(source.toObservable(), mockFragment).subscribe(new TestObserver<Integer>(mockObserver));, +        OperationObserveFromAndroidComponent.observeFromAndroidComponent(source.toObservable(), mockFragment).subscribe(new TestObserver<Integer>(mockObserver));, +                testObservable, mockActivity).subscribe(new TestObserver<Integer>(mockObserver));, +++ b/rxjava-contrib/rxjava-android/src/test/java/rx/android/schedulers/HandlerThreadSchedulerTest.java, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +import java.util.concurrent.TimeUnit;, +import android.os.Handler;, +++ b/rxjava-contrib/rxjava-android/src/test/java/rx/android/observables/AndroidObservableTest.java, +, +import rx.observers.TestObserver;, +        AndroidObservable.fromFragment(supportFragment, Observable.just("success")).subscribe(new TestObserver<String>(observer));, +        AndroidObservable.fromFragment(fragment, Observable.just("success")).subscribe(new TestObserver<String>(observer));, +++ b/rxjava-contrib/rxjava-android/src/test/java/rx/android/operators/OperationObserveFromAndroidComponentTest.java, +import rx.observers.TestObserver;, +        OperationObserveFromAndroidComponent.observeFromAndroidComponent(source, mockFragment).subscribe(new TestObserver<Integer>(mockObserver));, +        OperationObserveFromAndroidComponent.observeFromAndroidComponent(source, mockFragment).subscribe(new TestObserver<Integer>(mockObserver));, +        OperationObserveFromAndroidComponent.observeFromAndroidComponent(source.toObservable(), mockFragment).subscribe(new TestObserver<Integer>(mockObserver));, +        OperationObserveFromAndroidComponent.observeFromAndroidComponent(source.toObservable(), mockFragment).subscribe(new TestObserver<Integer>(mockObserver));, +                testObservable, mockActivity).subscribe(new TestObserver<Integer>(mockObserver));, +++ b/rxjava-contrib/rxjava-android/src/test/java/rx/android/schedulers/HandlerThreadSchedulerTest.java, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +import java.util.concurrent.TimeUnit;, +import android.os.Handler;, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/AsyncTest.java, +import rx.observers.TestObserver;, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +                .subscribe(new TestObserver<Object>(observer));, +        observable.subscribe(new TestObserver<String>(observer));, +        observable.subscribe(new TestObserver<String>(observer));, +        observable.subscribe(new TestObserver<String>(observer1));, +        observable.subscribe(new TestObserver<String>(observer2));, +        observable.subscribe(new TestObserver<String>(observer3));, +++ b/rxjava-contrib/rxjava-android/src/test/java/rx/android/observables/AndroidObservableTest.java, +, +import rx.observers.TestObserver;, +        AndroidObservable.fromFragment(supportFragment, Observable.just("success")).subscribe(new TestObserver<String>(observer));, +        AndroidObservable.fromFragment(fragment, Observable.just("success")).subscribe(new TestObserver<String>(observer));, +++ b/rxjava-contrib/rxjava-android/src/test/java/rx/android/operators/OperationObserveFromAndroidComponentTest.java, +import rx.observers.TestObserver;]