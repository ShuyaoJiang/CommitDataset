[+++ b/src/main/java/io/reactivex/Single.java, +     * Registers an {@link Action} to be called after this Single invokes either onSuccess or onError., +     * * <p>Note that the {@code doAfterSuccess} action is shared between subscriptions and as such, +     * should be thread-safe.</p>, +     * <p>, +     * <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doAfterTerminate.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code doAfterTerminate} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param onAfterTerminate, +     *            an {@link Action} to be invoked when the source Single finishes, +     * @return a Single that emits the same items as the source Single, then invokes the, +     *         {@link Action}, +     * @see <a href="http://reactivex.io/documentation/operators/do.html">ReactiveX operators documentation: Do</a>, +     * @since 2.0.6 - experimental, +     */, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    @Experimental, +    public final Single<T> doAfterTerminate(Action onAfterTerminate) {, +        ObjectHelper.requireNonNull(onAfterTerminate, "onAfterTerminate is null");, +        return RxJavaPlugins.onAssembly(new SingleDoAfterTerminate<T>(this, onAfterTerminate));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/Single.java, +     * Registers an {@link Action} to be called after this Single invokes either onSuccess or onError., +     * * <p>Note that the {@code doAfterSuccess} action is shared between subscriptions and as such, +     * should be thread-safe.</p>, +     * <p>, +     * <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doAfterTerminate.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code doAfterTerminate} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param onAfterTerminate, +     *            an {@link Action} to be invoked when the source Single finishes, +     * @return a Single that emits the same items as the source Single, then invokes the, +     *         {@link Action}, +     * @see <a href="http://reactivex.io/documentation/operators/do.html">ReactiveX operators documentation: Do</a>, +     * @since 2.0.6 - experimental, +     */, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    @Experimental, +    public final Single<T> doAfterTerminate(Action onAfterTerminate) {, +        ObjectHelper.requireNonNull(onAfterTerminate, "onAfterTerminate is null");, +        return RxJavaPlugins.onAssembly(new SingleDoAfterTerminate<T>(this, onAfterTerminate));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/internal/operators/single/SingleDoAfterTerminate.java, +/**, + * Copyright (c) 2016-present, RxJava Contributors., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators.single;, +, +import io.reactivex.Single;, +import io.reactivex.SingleObserver;, +import io.reactivex.SingleSource;, +import io.reactivex.disposables.Disposable;, +import io.reactivex.exceptions.Exceptions;, +import io.reactivex.functions.Action;, +import io.reactivex.internal.disposables.DisposableHelper;, +import io.reactivex.plugins.RxJavaPlugins;, +, +/**, + * Calls an action after pushing the current item or an error to the downstream., + * @param <T> the value type, + * @since 2.0.6 - experimental, + */, +public final class SingleDoAfterTerminate<T> extends Single<T> {, +, +    final SingleSource<T> source;, +, +    final Action onAfterTerminate;, +, +    public SingleDoAfterTerminate(SingleSource<T> source, Action onAfterTerminate) {, +        this.source = source;, +        this.onAfterTerminate = onAfterTerminate;, +    }, +, +    @Override, +    protected void subscribeActual(SingleObserver<? super T> s) {, +        source.subscribe(new DoAfterTerminateObserver<T>(s, onAfterTerminate));, +    }, +]