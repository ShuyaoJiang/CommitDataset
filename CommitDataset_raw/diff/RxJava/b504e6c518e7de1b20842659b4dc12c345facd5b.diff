[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +import rx.Observable.OnSubscribeFunc, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +import rx.Observable.OnSubscribeFunc, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +import rx.Observable.OnSubscribeFunc, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +import rx.Observable.OnSubscribeFunc, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, + * Provides a mechanism for receiving push-based notifications from Observables, and permits manual, + * unsubscribing from these Observables., +     * Adds a {@link Subscription} to this Subscriber's list of subscriptions if this list is not marked as, +     * unsubscribed. If the list <em>is</em> marked as unsubscribed, {@code add} will indicate this by, +     * explicitly unsubscribing the new {@code Subscription} as well., +     * @param s the {@code Subscription} to add, +     * Indicates whether this Subscriber has unsubscribed from its list of subscriptions., +     * @return {@code true} if this Subscriber has unsubscribed from its subscriptions, {@code false} otherwise, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +import rx.Observable.OnSubscribeFunc, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, + * Provides a mechanism for receiving push-based notifications from Observables, and permits manual, + * unsubscribing from these Observables., +     * Adds a {@link Subscription} to this Subscriber's list of subscriptions if this list is not marked as, +     * unsubscribed. If the list <em>is</em> marked as unsubscribed, {@code add} will indicate this by, +     * explicitly unsubscribing the new {@code Subscription} as well., +     * @param s the {@code Subscription} to add, +     * Indicates whether this Subscriber has unsubscribed from its list of subscriptions., +     * @return {@code true} if this Subscriber has unsubscribed from its subscriptions, {@code false} otherwise, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorMerge.java, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +import rx.Observable.OnSubscribeFunc, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, + * Provides a mechanism for receiving push-based notifications from Observables, and permits manual, + * unsubscribing from these Observables., +     * Adds a {@link Subscription} to this Subscriber's list of subscriptions if this list is not marked as, +     * unsubscribed. If the list <em>is</em> marked as unsubscribed, {@code add} will indicate this by, +     * explicitly unsubscribing the new {@code Subscription} as well., +     * @param s the {@code Subscription} to add, +     * Indicates whether this Subscriber has unsubscribed from its list of subscriptions., +     * @return {@code true} if this Subscriber has unsubscribed from its subscriptions, {@code false} otherwise, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorMerge.java, +++ b/rxjava-core/src/main/java/rx/internal/util/MpscPaddedQueue.java, +import java.io.Serializable;, +import java.util.concurrent.atomic.AtomicReference;, + * but using {@code AtomicReferenceFieldUpdater} instead of {@code Unsafe}., +public final class MpscPaddedQueue<E> extends AtomicReference<MpscPaddedQueue.Node<E>> {, +    /** */, +    private static final long serialVersionUID = 1L;, +    /** The padded tail reference. */, +    final PaddedNode<E> tail;, +, +        Node<E> first = new Node<E>(null);, +        tail = new PaddedNode<E>();, +        tail.node = first;, +        set(first);, +        getAndSet(n).set(n);, +        tail.lazySet(n);, +            @SuppressWarnings(value = "unchecked"), +            Node<E> t = tail.node;, +            Node<E> n = t.get();, +            if (n != null || get() == t) {, +, +    /** The front-padded node class housing the actual value. */, +    static abstract class PaddedNodeBase<E> extends FrontPadding {, +        private static final long serialVersionUID = 2L;, +        volatile Node<E> node;, +        @SuppressWarnings(value = "rawtypes"), +        static final AtomicReferenceFieldUpdater<PaddedNodeBase, Node> NODE_UPDATER = AtomicReferenceFieldUpdater.newUpdater(PaddedNodeBase.class, Node.class, "node");, +        public void lazySet(Node<E> newValue) {, +            NODE_UPDATER.lazySet(this, newValue);, +        }, +    }, +    /** Post-padding of the padded node base class.  */, +    static final class PaddedNode<E> extends PaddedNodeBase<E> {, +        private static final long serialVersionUID = 3L;, +        /** Padding. */, +        public transient long p16, p17, p18, p19, p20, p21, p22;      // 56 bytes (the remaining 8 is in the base), +        /** Padding. */, +        public transient long p24, p25, p26, p27, p28, p29, p30, p31; // 64 bytes, +    }, +    static final class Node<E> implements Serializable {, +        private static final long serialVersionUID = 4L;, +        volatile Node<E> tail;, +        public Node(E value) {, +        public void set(Node<E> newTail) {, +            TAIL_UPDATER.lazySet(this, newTail);, +        @SuppressWarnings(value = "unchecked"), +        public Node<E> get() {, +            return TAIL_UPDATER.get(this);, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +import rx.Observable.OnSubscribeFunc]