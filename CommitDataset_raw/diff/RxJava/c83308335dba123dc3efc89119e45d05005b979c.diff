[+++ b/src/main/java/rx/Observable.java, +import rx.internal.producers.SingleProducer;, +    public final Observable<T> defaultIfEmpty(final T defaultValue) {, +        //if empty switch to an observable that emits defaultValue and supports backpressure, +        return switchIfEmpty(Observable.create(new OnSubscribe<T>() {, +, +            @Override, +            public void call(Subscriber<? super T> subscriber) {, +                subscriber.setProducer(new SingleProducer<T>(subscriber, defaultValue));, +            }}));, +++ b/src/main/java/rx/Observable.java, +import rx.internal.producers.SingleProducer;, +    public final Observable<T> defaultIfEmpty(final T defaultValue) {, +        //if empty switch to an observable that emits defaultValue and supports backpressure, +        return switchIfEmpty(Observable.create(new OnSubscribe<T>() {, +, +            @Override, +            public void call(Subscriber<? super T> subscriber) {, +                subscriber.setProducer(new SingleProducer<T>(subscriber, defaultValue));, +            }}));, +++ /dev/null, +++ b/src/main/java/rx/Observable.java, +import rx.internal.producers.SingleProducer;, +    public final Observable<T> defaultIfEmpty(final T defaultValue) {, +        //if empty switch to an observable that emits defaultValue and supports backpressure, +        return switchIfEmpty(Observable.create(new OnSubscribe<T>() {, +, +            @Override, +            public void call(Subscriber<? super T> subscriber) {, +                subscriber.setProducer(new SingleProducer<T>(subscriber, defaultValue));, +            }}));, +++ /dev/null, +++ b/src/test/java/rx/internal/operators/OperatorDefaultIfEmptyTest.java, +import rx.observers.TestSubscriber;, +    , +    @Test, +    public void testBackpressureEmpty() {, +        TestSubscriber<Integer> ts = TestSubscriber.create(0);, +        Observable.<Integer>empty().defaultIfEmpty(1).subscribe(ts);, +        ts.assertNoValues();, +        ts.assertNoTerminalEvent();, +        ts.requestMore(1);, +        ts.assertValue(1);, +        ts.assertCompleted();, +    }, +    , +    @Test, +    public void testBackpressureNonEmpty() {, +        TestSubscriber<Integer> ts = TestSubscriber.create(0);, +        Observable.just(1,2,3).defaultIfEmpty(1).subscribe(ts);, +        ts.assertNoValues();, +        ts.assertNoTerminalEvent();, +        ts.requestMore(2);, +        ts.assertValues(1, 2);, +        ts.requestMore(1);, +        ts.assertValues(1, 2, 3);, +        ts.assertCompleted();, +    }]