[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationAny;, +    /**, +     * Returns an {@link Observable} that emits <code>true</code> if the source, +     * {@link Observable} is not empty, otherwise <code>false</code>., +     * , +     * @return A subscription function for creating the target Observable., +     * @see <a href=, +     *      "http://msdn.microsoft.com/en-us/library/hh229905(v=vs.103).aspx", +     *      >MSDN: Observable.Any</a>, +     */, +    public Observable<Boolean> any() {, +        return create(OperationAny.any(this));, +    }, +, +    /**, +     * Returns an {@link Observable} that emits <code>true</code> if any element, +     * of the source {@link Observable} satisfies the given condition, otherwise, +     * <code>false</code>. Note: always emit <code>false</code> if the source, +     * {@link Observable} is empty., +     * , +     * @param predicate, +     *            The condition to test every element., +     * @return A subscription function for creating the target Observable., +     * @see <a href=, +     *      "http://msdn.microsoft.com/en-us/library/hh211993(v=vs.103).aspx", +     *      >MSDN: Observable.Any</a> Note: the description in this page is, +     *      wrong., +     */, +    public Observable<Boolean> any(Func1<? super T, Boolean> predicate) {, +        return create(OperationAny.any(this, predicate));, +    }, +, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationAny;, +    /**, +     * Returns an {@link Observable} that emits <code>true</code> if the source, +     * {@link Observable} is not empty, otherwise <code>false</code>., +     * , +     * @return A subscription function for creating the target Observable., +     * @see <a href=, +     *      "http://msdn.microsoft.com/en-us/library/hh229905(v=vs.103).aspx", +     *      >MSDN: Observable.Any</a>, +     */, +    public Observable<Boolean> any() {, +        return create(OperationAny.any(this));, +    }, +, +    /**, +     * Returns an {@link Observable} that emits <code>true</code> if any element, +     * of the source {@link Observable} satisfies the given condition, otherwise, +     * <code>false</code>. Note: always emit <code>false</code> if the source, +     * {@link Observable} is empty., +     * , +     * @param predicate, +     *            The condition to test every element., +     * @return A subscription function for creating the target Observable., +     * @see <a href=, +     *      "http://msdn.microsoft.com/en-us/library/hh211993(v=vs.103).aspx", +     *      >MSDN: Observable.Any</a> Note: the description in this page is, +     *      wrong., +     */, +    public Observable<Boolean> any(Func1<? super T, Boolean> predicate) {, +        return create(OperationAny.any(this, predicate));, +    }, +, +++ b/rxjava-core/src/main/java/rx/operators/OperationAny.java, +package rx.operators;, +, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static rx.util.functions.Functions.alwaysTrue;, +, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import org.junit.Test;, +, +import rx.Observable;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observer;, +import rx.Subscription;, +import rx.util.functions.Func1;, +, +/**, + * Returns an {@link Observable} that emits <code>true</code> if any element of, + * an observable sequence satisfies a condition, otherwise <code>false</code>., + */, +public final class OperationAny {, +, +    /**, +     * Returns an {@link Observable} that emits <code>true</code> if the source, +     * {@link Observable} is not empty, otherwise <code>false</code>., +     * , +     * @param source, +     *            The source {@link Observable} to check if not empty., +     * @return A subscription function for creating the target Observable., +     */, +    public static <T> OnSubscribeFunc<Boolean> any(]