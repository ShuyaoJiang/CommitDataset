[+++ b/rxjava-core/src/main/java/rx/operators/OperationDematerialize.java, +                    observer.onCompleted();, +                    observer.onError(e);, +++ b/rxjava-core/src/main/java/rx/operators/OperationDematerialize.java, +                    observer.onCompleted();, +                    observer.onError(e);, +++ b/rxjava-core/src/main/java/rx/operators/OperationParallelMerge.java, +        return parallelMerge(source, parallelObservables, Schedulers.currentThread());, +++ b/rxjava-core/src/main/java/rx/operators/OperationDematerialize.java, +                    observer.onCompleted();, +                    observer.onError(e);, +++ b/rxjava-core/src/main/java/rx/operators/OperationParallelMerge.java, +        return parallelMerge(source, parallelObservables, Schedulers.currentThread());, +++ b/rxjava-core/src/test/java/rx/operators/OperationDematerializeTest.java, +import static org.mockito.Matchers.any;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static rx.operators.OperationDematerialize.dematerialize;, +import rx.observers.TestSubscriber;, +, +    @Test, +    public void testErrorPassThru() {, +        Exception exception = new Exception("test");, +        Observable<Integer> observable = Observable.error(exception);, +        Observable<Integer> dematerialize = observable.dematerialize();, +, +        Observer<Integer> observer = mock(Observer.class);, +        dematerialize.subscribe(observer);, +, +        verify(observer, times(1)).onError(exception);, +        verify(observer, times(0)).onCompleted();, +        verify(observer, times(0)).onNext(any(Integer.class));, +    }, +, +    @Test, +    public void testCompletePassThru() {, +        Observable<Integer> observable = Observable.empty();, +        Observable<Integer> dematerialize = observable.dematerialize();, +, +        Observer<Integer> observer = mock(Observer.class);, +        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(observer);, +        dematerialize.subscribe(ts);, +, +        System.out.println(ts.getOnErrorEvents());, +, +        verify(observer, never()).onError(any(Throwable.class));, +        verify(observer, times(1)).onCompleted();, +        verify(observer, times(0)).onNext(any(Integer.class));, +    }, +, +++ b/rxjava-core/src/main/java/rx/operators/OperationDematerialize.java, +                    observer.onCompleted();, +                    observer.onError(e);, +++ b/rxjava-core/src/main/java/rx/operators/OperationParallelMerge.java, +        return parallelMerge(source, parallelObservables, Schedulers.currentThread());, +++ b/rxjava-core/src/test/java/rx/operators/OperationDematerializeTest.java, +import static org.mockito.Matchers.any;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static rx.operators.OperationDematerialize.dematerialize;, +import rx.observers.TestSubscriber;, +, +    @Test, +    public void testErrorPassThru() {, +        Exception exception = new Exception("test");, +        Observable<Integer> observable = Observable.error(exception);, +        Observable<Integer> dematerialize = observable.dematerialize();, +, +        Observer<Integer> observer = mock(Observer.class);, +        dematerialize.subscribe(observer);, +, +        verify(observer, times(1)).onError(exception);, +        verify(observer, times(0)).onCompleted();, +        verify(observer, times(0)).onNext(any(Integer.class));, +    }, +, +    @Test, +    public void testCompletePassThru() {, +        Observable<Integer> observable = Observable.empty();, +        Observable<Integer> dematerialize = observable.dematerialize();, +, +        Observer<Integer> observer = mock(Observer.class);, +        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(observer);, +        dematerialize.subscribe(ts);, +, +        System.out.println(ts.getOnErrorEvents());, +, +        verify(observer, never()).onError(any(Throwable.class));, +        verify(observer, times(1)).onCompleted();, +        verify(observer, times(0)).onNext(any(Integer.class));, +    }, +, +++ b/rxjava-core/src/test/java/rx/operators/OperationParallelMergeTest.java, +import static org.junit.Assert.*;, +        assertEquals(3, threads.keySet().size());, +        assertEquals(3, threads.keySet().size());]