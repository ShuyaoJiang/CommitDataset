[+++ b/rxjava-core/src/main/java/rx/Observable.java, +    public final <R> ConnectableObservable<R> multicast(final Subject<? super T, ? extends R> subject) {, +        return new OperatorMulticast<T, R>(this, new Func0<Subject<? super T, ? extends R>>() {, +, +            @Override, +            public Subject<? super T, ? extends R> call() {, +                // same one every time, no factory behavior, +                return subject;, +            }, +            , +        });, +    }, +    , +    /**, +     * Returns a {@link ConnectableObservable} that upon connection causes the source Observable to push results, +     * into the specified subject. A Connectable Observable resembles an ordinary Observable, except that it, +     * does not begin emitting items when it is subscribed to, but only when its {@code connect} method, +     * is called., +     * <dl>, +     *  <dt><b>Backpressure Support:</b></dt>, +     *  <dd>This operator does not support backpressure because multicasting means the stream is "hot" with, +     *      multiple subscribers. Each child will need to manage backpressure independently using operators such, +     *      as {@link #onBackpressureDrop} and {@link #onBackpressureBuffer}.</dd>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code multicast} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @param subjectFactory, +     *            Func that creates a new {@link Subject} for the {@link ConnectableObservable} to push source items into, +     * @param <R>, +     *            the type of items emitted by the resulting {@code ConnectableObservable}, +     * @return a {@link ConnectableObservable} that upon connection causes the source Observable to push results, +     *         into the specified {@link Subject}, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Connectable-Observable-Operators#observablepublish-and-observablemulticast">RxJava wiki: Observable.publish and Observable.multicast</a>, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229708.aspx">MSDN: Observable.Multicast</a>, +     */, +    public final <R> ConnectableObservable<R> multicast(Func0<? extends Subject<? super T, ? extends R>> subjectFactory) {, +        return new OperatorMulticast<T, R>(this, subjectFactory);, +        return new OperatorMulticast<T, T>(this, new Func0<Subject<? super T, ? extends T>>() {, +, +            @Override, +            public Subject<? super T, ? extends T> call() {, +                return PublishSubject.<T> create();, +            }, +            , +        });, +    public final ConnectableObservable<T> publish(final T initialValue) {, +        return new OperatorMulticast<T, T>(this, new Func0<Subject<? super T, ? extends T>>() {, +, +            @Override, +            public Subject<? super T, ? extends T> call() {, +                return BehaviorSubject.<T> create(initialValue);, +            }, +            , +        });, +        return new OperatorMulticast<T, T>(this, new Func0<Subject<? super T, ? extends T>>() {, +, +            @Override, +            public Subject<? super T, ? extends T> call() {, +                return AsyncSubject.<T> create();, +            }, +            , +        });, +        return new OperatorMulticast<T, T>(this, new Func0<Subject<? super T, ? extends T>>() {, +, +            @Override, +            public Subject<? super T, ? extends T> call() {, +                return ReplaySubject.<T> create();, +            }, +            , +        });, +    public final ConnectableObservable<T> replay(final int bufferSize) {, +        return new OperatorMulticast<T, T>(this, new Func0<Subject<? super T, ? extends T>>() {, +, +            @Override, +            public Subject<? super T, ? extends T> call() {, +                return ReplaySubject.<T>createWithSize(bufferSize);, +            }, +            , +        });, +    public final ConnectableObservable<T> replay(final int bufferSize, final long time, final TimeUnit unit, final Scheduler scheduler) {, +        return new OperatorMulticast<T, T>(this, new Func0<Subject<? super T, ? extends T>>() {, +, +            @Override, +            public Subject<? super T, ? extends T> call() {, +                return ReplaySubject.<T>createWithTimeAndSize(time, unit, bufferSize, scheduler);, +            }, +            , +        });, +    public final ConnectableObservable<T> replay(final int bufferSize, final Scheduler scheduler) {, +        return new OperatorMulticast<T, T>(this, new Func0<Subject<? super T, ? extends T>>() {, +, +            @Override, +            public Subject<? super T, ? extends T> call() {, +                return OperatorReplay.createScheduledSubject(ReplaySubject.<T>createWithSize(bufferSize), scheduler);, +            }, +            , +        });, +    public final ConnectableObservable<T> replay(final long time, final TimeUnit unit, final Scheduler scheduler) {, +        return new OperatorMulticast<T, T>(this, new Func0<Subject<? super T, ? extends T>>() {]