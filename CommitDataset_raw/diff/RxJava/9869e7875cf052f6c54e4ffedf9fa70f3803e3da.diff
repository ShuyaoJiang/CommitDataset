[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationSwitch;, +     * Accepts an {@link Observable} sequence of {@link Observable} sequences, and transforms it into a single, +     * {@link Observable} sequence, which publishes the values of the most recently published {@link Observable} sequence., +     *  , +     * @param sequenceOfSequences, +     *            the {@link Observable} sequence of {@link Observable} sequences., +     * @return an {@link Observable} which publishes only the values of the most recently published , +     *         {@link Observable} sequence., +     */, +    public static <T> Observable<T> switchDo(Observable<Observable<T>> sequenceOfSequences) {, +        return create(OperationSwitch.switchDo(sequenceOfSequences));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationSwitch;, +     * Accepts an {@link Observable} sequence of {@link Observable} sequences, and transforms it into a single, +     * {@link Observable} sequence, which publishes the values of the most recently published {@link Observable} sequence., +     *  , +     * @param sequenceOfSequences, +     *            the {@link Observable} sequence of {@link Observable} sequences., +     * @return an {@link Observable} which publishes only the values of the most recently published , +     *         {@link Observable} sequence., +     */, +    public static <T> Observable<T> switchDo(Observable<Observable<T>> sequenceOfSequences) {, +        return create(OperationSwitch.switchDo(sequenceOfSequences));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationSwitch.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicReference;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.InOrder;, +, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +import rx.concurrency.TestScheduler;, +import rx.subscriptions.Subscriptions;, +import rx.util.functions.Action0;, +import rx.util.functions.Func1;, +, +, +/**, + * This operation transforms an {@link Observable} sequence of {@link Observable} sequences into a single , + * {@link Observable} sequence which only produces values from the most recently published {@link Observable} , + * sequence in the sequence. , + */, +public final class OperationSwitch {, +, +    /**, +     * This function transforms an {@link Observable} sequence of {@link Observable} sequences into a single , +     * {@link Observable} sequence which produces values from the most recently published {@link Observable}., +     * , +     * @param sequences   The {@link Observable} sequence consisting of {@link Observable} sequences., +     * @return A {@link Func1} which does this transformation., +     */, +    public static <T> Func1<Observer<T>, Subscription> switchDo(final Observable<Observable<T>> sequences) {, +        return new Func1<Observer<T>, Subscription>() {, +            @Override, +            public Subscription call(Observer<T> observer) {, +                return new Switch<T>(sequences).call(observer);, +            }, +        };, +    }, +, +    private static class Switch<T> implements Func1<Observer<T>, Subscription> {, +, +        private final Observable<Observable<T>> sequences;, +, +        public Switch(Observable<Observable<T>> sequences) {, +            this.sequences = sequences;, +        }, +, +        @Override, +        public Subscription call(Observer<T> observer) {]