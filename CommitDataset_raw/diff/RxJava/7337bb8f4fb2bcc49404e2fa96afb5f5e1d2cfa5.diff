[+++ b/src/main/java/rx/Observable.java, +++ b/src/main/java/rx/Observable.java, +++ b/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +++ b/src/main/java/rx/Observable.java, +++ b/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +                    return;, +                    if (releaseEmitLock()) {, +                }, +                        return;, +                    if (releaseEmitLock()) {, +                        boolean moreToDrain = releaseEmitLock();, +                    }, +++ b/src/main/java/rx/Observable.java, +++ b/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +                    return;, +                    if (releaseEmitLock()) {, +                }, +                        return;, +                    if (releaseEmitLock()) {, +                        boolean moreToDrain = releaseEmitLock();, +                    }, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBuffer.java, +        // TODO start with size hint, +                    pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +    private void pollQueue(AtomicLong wip, AtomicLong requested, Queue<Object> queue, Subscriber<? super T> child) {, +++ b/src/main/java/rx/Observable.java, +++ b/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +                    return;, +                    if (releaseEmitLock()) {, +                }, +                        return;, +                    if (releaseEmitLock()) {, +                        boolean moreToDrain = releaseEmitLock();, +                    }, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBuffer.java, +        // TODO start with size hint, +                    pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +    private void pollQueue(AtomicLong wip, AtomicLong requested, Queue<Object> queue, Subscriber<? super T> child) {, +++ b/src/main/java/rx/internal/schedulers/NewThreadWorker.java, +import rx.Scheduler;, +import rx.Subscription;, +import rx.plugins.RxJavaPlugins;, +import rx.plugins.RxJavaSchedulersHook;, +import java.util.concurrent.*;, +, +++ b/src/main/java/rx/Observable.java, +++ b/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +                    return;, +                    if (releaseEmitLock()) {, +                }, +                        return;, +                    if (releaseEmitLock()) {, +                        boolean moreToDrain = releaseEmitLock();, +                    }, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBuffer.java, +        // TODO start with size hint, +                    pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +    private void pollQueue(AtomicLong wip, AtomicLong requested, Queue<Object> queue, Subscriber<? super T> child) {, +++ b/src/main/java/rx/internal/schedulers/NewThreadWorker.java, +import rx.Scheduler;, +import rx.Subscription;, +import rx.plugins.RxJavaPlugins;, +import rx.plugins.RxJavaSchedulersHook;, +import java.util.concurrent.*;, +, +++ /dev/null, +++ b/src/main/java/rx/Observable.java, +++ b/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +                    return;, +                    if (releaseEmitLock()) {, +                }, +                        return;, +                    if (releaseEmitLock()) {, +                        boolean moreToDrain = releaseEmitLock();, +                    }, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBuffer.java, +        // TODO start with size hint, +                    pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +                pollQueue(wip, requested, queue, child);, +    private void pollQueue(AtomicLong wip, AtomicLong requested, Queue<Object> queue, Subscriber<? super T> child) {, +++ b/src/main/java/rx/internal/schedulers/NewThreadWorker.java, +import rx.Scheduler;, +import rx.Subscription;, +import rx.plugins.RxJavaPlugins;]