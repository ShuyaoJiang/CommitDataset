[+++ b/src/main/java/rx/Observable.java, +     * Instructs an Observable that is emitting items faster than its observer can consume them to , +     * hold onto the latest value and emit that on request., +     * <p>, +     * Its behavior is logically equivalent to toBlocking().latest() with the exception that, +     * the downstream is not blocking while requesting more values., +     * <p>, +     * Note that if the upstream Observable does support backpressure, this operator ignores that capability, +     * and doesn't propagate any backpressure requests from downstream., +     * <p>, +     * Note that due to the nature of how backpressure requests are propagated through subscribeOn/observeOn,, +     * requesting more than 1 from downstream doesn't guarantee a continuous delivery of onNext events., +     * @return, +     * @Experimental The behavior of this can change at any time. , +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +     */, +    @Experimental, +    public final Observable<T> onBackpressureLatest() {, +        return lift(OperatorOnBackpressureLatest.<T>instance());, +    }, +    , +    /**, +++ b/src/main/java/rx/Observable.java, +     * Instructs an Observable that is emitting items faster than its observer can consume them to , +     * hold onto the latest value and emit that on request., +     * <p>, +     * Its behavior is logically equivalent to toBlocking().latest() with the exception that, +     * the downstream is not blocking while requesting more values., +     * <p>, +     * Note that if the upstream Observable does support backpressure, this operator ignores that capability, +     * and doesn't propagate any backpressure requests from downstream., +     * <p>, +     * Note that due to the nature of how backpressure requests are propagated through subscribeOn/observeOn,, +     * requesting more than 1 from downstream doesn't guarantee a continuous delivery of onNext events., +     * @return, +     * @Experimental The behavior of this can change at any time. , +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +     */, +    @Experimental, +    public final Observable<T> onBackpressureLatest() {, +        return lift(OperatorOnBackpressureLatest.<T>instance());, +    }, +    , +    /**, +++ b/src/main/java/rx/internal/operators/OperatorObserveOn.java, +import java.util.concurrent.atomic.*;, +import rx.*;, +import rx.internal.util.*;, +import rx.internal.util.unsafe.*;, +import rx.schedulers.*;, +            return new ObserveOnSubscriber<T>(scheduler, child);, +                    REQUESTED.getAndAdd(ObserveOnSubscriber.this, n);, +++ b/src/main/java/rx/Observable.java, +     * Instructs an Observable that is emitting items faster than its observer can consume them to , +     * hold onto the latest value and emit that on request., +     * <p>, +     * Its behavior is logically equivalent to toBlocking().latest() with the exception that, +     * the downstream is not blocking while requesting more values., +     * <p>, +     * Note that if the upstream Observable does support backpressure, this operator ignores that capability, +     * and doesn't propagate any backpressure requests from downstream., +     * <p>, +     * Note that due to the nature of how backpressure requests are propagated through subscribeOn/observeOn,, +     * requesting more than 1 from downstream doesn't guarantee a continuous delivery of onNext events., +     * @return, +     * @Experimental The behavior of this can change at any time. , +     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number), +     */, +    @Experimental, +    public final Observable<T> onBackpressureLatest() {, +        return lift(OperatorOnBackpressureLatest.<T>instance());, +    }, +    , +    /**, +++ b/src/main/java/rx/internal/operators/OperatorObserveOn.java, +import java.util.concurrent.atomic.*;, +import rx.*;, +import rx.internal.util.*;, +import rx.internal.util.unsafe.*;, +import rx.schedulers.*;, +            return new ObserveOnSubscriber<T>(scheduler, child);, +                    REQUESTED.getAndAdd(ObserveOnSubscriber.this, n);, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureLatest.java, +/**, + * Copyright 2014 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not, + * use this file except in compliance with the License. You may obtain a copy of, + * the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations under, + * the License., + */, +package rx.internal.operators;, +]