[+++ b/src/main/java/rx/Observable.java, +     * Merges the specified observable sequence into this Observable sequence by using the resultSelector , +     * function only when the source observable sequence (this instance) produces an element., +     * <code><pre>, +     * ----A-------B------C----->  o1, +     *, +     * --0----1-2----3-4-------->  o2, +     *, +     *     |       |      |, +     *     V       V      V, +     *, +     *   (A,0)   (B,2)  (C,4), +     * </pre></code>, +     * @param other the other observable sequence, +     * @param resultSelector the function to call when this Observable emits an element and the other, +     *            observable sequence has already emitted a value., +     * @return an Observable that merges the specified observable sequence into this Observable sequence , +     *            by using the resultSelector function only when the source observable sequence , +     *            (this instance) produces an element, +     */, +    @Experimental, +    public final <U, R> Observable<R> withLatestFrom(Observable<? extends U> other, Func2<? super T, ? super U, ? extends R> resultSelector) {, +        return lift(new OperatorWithLatestFrom<T, U, R>(other, resultSelector));, +    }, +    , +    /**, +++ b/src/main/java/rx/Observable.java, +     * Merges the specified observable sequence into this Observable sequence by using the resultSelector , +     * function only when the source observable sequence (this instance) produces an element., +     * <code><pre>, +     * ----A-------B------C----->  o1, +     *, +     * --0----1-2----3-4-------->  o2, +     *, +     *     |       |      |, +     *     V       V      V, +     *, +     *   (A,0)   (B,2)  (C,4), +     * </pre></code>, +     * @param other the other observable sequence, +     * @param resultSelector the function to call when this Observable emits an element and the other, +     *            observable sequence has already emitted a value., +     * @return an Observable that merges the specified observable sequence into this Observable sequence , +     *            by using the resultSelector function only when the source observable sequence , +     *            (this instance) produces an element, +     */, +    @Experimental, +    public final <U, R> Observable<R> withLatestFrom(Observable<? extends U> other, Func2<? super T, ? super U, ? extends R> resultSelector) {, +        return lift(new OperatorWithLatestFrom<T, U, R>(other, resultSelector));, +    }, +    , +    /**, +++ b/src/main/java/rx/internal/operators/OperatorWithLatestFrom.java, +/**, + * Copyright 2014 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not, + * use this file except in compliance with the License. You may obtain a copy of, + * the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations under, + * the License., + */, +package rx.internal.operators;, +, +import java.util.concurrent.atomic.AtomicReference;, +, +import rx.*;, +import rx.Observable.Operator;, +import rx.functions.Func2;, +import rx.observers.SerializedSubscriber;, +, +/**, + * Combines values from two sources only when the main source emits., + * @param <T> the element type of the main observable, + * @param <U> the element type of the other observable that is merged into the main, + * @param <R> the result element type, + */, +public final class OperatorWithLatestFrom<T, U, R> implements Operator<R, T>  {, +    final Func2<? super T, ? super U, ? extends R> resultSelector;, +    final Observable<? extends U> other;, +    /** Indicates the other has not yet emitted a value. */, +    static final Object EMPTY = new Object();, +    , +    public OperatorWithLatestFrom(Observable<? extends U> other, Func2<? super T, ? super U, ? extends R> resultSelector) {, +        this.other = other;, +        this.resultSelector = resultSelector;, +    }, +    @Override, +    public Subscriber<? super T> call(Subscriber<? super R> child) {, +        // onError and onCompleted may happen either from the main or from other., +        final SerializedSubscriber<R> s = new SerializedSubscriber<R>(child, false);, +        child.add(s);, +        , +        final AtomicReference<Object> current = new AtomicReference<Object>(EMPTY);]