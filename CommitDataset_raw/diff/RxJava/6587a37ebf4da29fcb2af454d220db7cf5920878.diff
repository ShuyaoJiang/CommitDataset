[+++ b/language-adaptors/rxjava-jruby/build.gradle, +apply plugin: 'java', +dependencies {, +    compile project(':rxjava-core'), +    compile 'org.jruby:jruby:1.7.2', +    provided 'junit:junit:4.10', +    provided 'org.mockito:mockito-core:1.9.5', +}, +++ b/language-adaptors/rxjava-jruby/build.gradle, +apply plugin: 'java', +dependencies {, +    compile project(':rxjava-core'), +    compile 'org.jruby:jruby:1.7.2', +    provided 'junit:junit:4.10', +    provided 'org.mockito:mockito-core:1.9.5', +}, +++ b/language-adaptors/rxjava-jruby/src/main/java/org/rx/lang/jruby/JRubyAdaptor.java, +package org.rx.lang.jruby;, +, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +import java.util.Arrays;, +, +import org.jruby.Ruby;, +import org.jruby.RubyProc;, +import org.jruby.embed.ScriptingContainer;, +import org.jruby.javasupport.JavaEmbedUtils;, +import org.jruby.runtime.builtin.IRubyObject;, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +import org.rx.functions.FunctionLanguageAdaptor;, +import org.rx.reactive.Notification;, +import org.rx.reactive.Observable;, +import org.rx.reactive.Observer;, +import org.rx.reactive.Subscription;, +, +public class JRubyAdaptor implements FunctionLanguageAdaptor {, +, +    @Override, +    public Object call(Object function, Object[] args) {, +        RubyProc rubyProc = ((RubyProc) function);, +        Ruby ruby = rubyProc.getRuntime();, +        IRubyObject rubyArgs[] = new IRubyObject[args.length];, +        for (int i = 0; i < args.length; i++) {, +            rubyArgs[i] = JavaEmbedUtils.javaToRuby(ruby, args[i]);, +        }, +        return rubyProc.getBlock().call(ruby.getCurrentContext(), rubyArgs);, +    }, +, +    @Override, +    public Class<?> getFunctionClass() {, +        return RubyProc.class;, +    }, +, +    public static class UnitTest {, +, +        @Mock, +        ScriptAssertion assertion;, +, +        @Mock, +        Observer<Integer> w;, +, +        @Before, +        public void before() {, +            MockitoAnnotations.initMocks(this);, +        }, +, +        @Test, +        public void testCreateViaGroovy() {, +            runGroovyScript("Observable.create(lambda{|it| it.onNext('hello');it.onCompleted();}).subscribe(lambda{|result| a.received(result)});");, +            verify(assertion, times(1)).received("hello");, +        }, +, +        @Test, +        public void testFilterViaGroovy() {, +            runGroovyScript("Observable.filter(Observable.toObservable(1, 2, 3), lambda{|it| it >= 2}).subscribe(lambda{|result| a.received(result)});");, +            verify(assertion, times(0)).received(1L);, +            verify(assertion, times(1)).received(2L);, +            verify(assertion, times(1)).received(3L);, +        }, +, +        @Test, +        public void testLast() {, +            String script = "mockApiCall.getObservable().last().subscribe(lambda{|result| a.received(result)})";, +            runGroovyScript(script);, +            verify(assertion, times(1)).received("hello_1");, +        }, +, +        @Test, +        public void testMap() {, +            String script = "mockApiCall.getObservable().map(lambda{|v| 'say' + v}).subscribe(lambda{|result| a.received(result)});";, +            runGroovyScript(script);, +            verify(assertion, times(1)).received("sayhello_1");, +        }, +, +        @Test, +        public void testMaterializeViaGroovy() {]