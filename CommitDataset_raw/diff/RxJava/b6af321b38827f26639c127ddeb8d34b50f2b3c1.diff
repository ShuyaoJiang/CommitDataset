[+++ b/rxjava-core/src/main/java/rx/Notification.java, + * For the Microsoft Rx equivalent see: http://msdn.microsoft.com/en-us/library/hh229462(v=vs.103).aspx, +     * Retrieves the exception associated with an onError notification., +     * @return Throwable associated with an onError notification., +     * Retrieves the data associated with an onNext notification., +     * @return The data associated with an onNext notification., +     * Retrieves a value indicating whether this notification has a value., +     * @return a value indicating whether this notification has a value., +     * Retrieves a value indicating whether this notification has an exception., +     * @return a value indicating whether this notification has an exception., +     * Retrieves the kind of the notification: OnNext, OnError, OnCompleted, +     * @return the kind of the notification: OnNext, OnError, OnCompleted, +++ b/rxjava-core/src/main/java/rx/Notification.java, + * For the Microsoft Rx equivalent see: http://msdn.microsoft.com/en-us/library/hh229462(v=vs.103).aspx, +     * Retrieves the exception associated with an onError notification., +     * @return Throwable associated with an onError notification., +     * Retrieves the data associated with an onNext notification., +     * @return The data associated with an onNext notification., +     * Retrieves a value indicating whether this notification has a value., +     * @return a value indicating whether this notification has a value., +     * Retrieves a value indicating whether this notification has an exception., +     * @return a value indicating whether this notification has an exception., +     * Retrieves the kind of the notification: OnNext, OnError, OnCompleted, +     * @return the kind of the notification: OnNext, OnError, OnCompleted, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     *             if {@code count} is less than zero, +        if ((start + count) > Integer.MAX_VALUE) {, +     * new buffer when the Observable produced by the specified {@code bufferClosingSelector} emits an item. It, +     * then uses the {@code bufferClosingSelector} to create a new Observable to observe to indicate the end of, +     * the next buffer., +     *            a {@link Func0} that produces an Observable for each buffer created. When this, +     *            {@code Observable} emits an item, {@code buffer} emits the associated buffer and replaces it, +     *            with a new one, +     *         each time the current Observable created with the {@code bufferClosingSelector} argument emits an, +     *         item, +     * Forces an Observable to make synchronous calls and to be well-behaved., +     * It is possible for an Observable to invoke its Subscribers' methods asynchronously, perhaps in different, +     * threads. This could make an Observable poorly-behaved, in that it might invoke {@code onCompleted} or, +     * {@code onError} before one of its {@code onNext} invocations. You can force such an Observable to be, +     * well-behaved and synchronous by applying the {@code serialize} method to it., +     * @return a {@link Observable} that is guaranteed to be well-behaved and synchronous, +     * Observable emits connected, non-overlapping windows. It emits the current window and opens a new one when, +     * the Observable produced by the specified {@code closingSelector} emits an item. The, +     * {@code closingSelector} then creates a new Observable to generate the closer of the next window., +     *            a {@link Func0} that produces an Observable for every window created. When this Observable, +     *            emits an item, {@code window} emits the associated window and begins a new one., +     *         when {@code closingSelector} emits an item, +++ b/rxjava-core/src/main/java/rx/Notification.java, + * For the Microsoft Rx equivalent see: http://msdn.microsoft.com/en-us/library/hh229462(v=vs.103).aspx, +     * Retrieves the exception associated with an onError notification., +     * @return Throwable associated with an onError notification., +     * Retrieves the data associated with an onNext notification., +     * @return The data associated with an onNext notification., +     * Retrieves a value indicating whether this notification has a value., +     * @return a value indicating whether this notification has a value., +     * Retrieves a value indicating whether this notification has an exception., +     * @return a value indicating whether this notification has an exception., +     * Retrieves the kind of the notification: OnNext, OnError, OnCompleted, +     * @return the kind of the notification: OnNext, OnError, OnCompleted, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     *             if {@code count} is less than zero, +        if ((start + count) > Integer.MAX_VALUE) {, +     * new buffer when the Observable produced by the specified {@code bufferClosingSelector} emits an item. It, +     * then uses the {@code bufferClosingSelector} to create a new Observable to observe to indicate the end of, +     * the next buffer., +     *            a {@link Func0} that produces an Observable for each buffer created. When this, +     *            {@code Observable} emits an item, {@code buffer} emits the associated buffer and replaces it, +     *            with a new one, +     *         each time the current Observable created with the {@code bufferClosingSelector} argument emits an, +     *         item, +     * Forces an Observable to make synchronous calls and to be well-behaved., +     * It is possible for an Observable to invoke its Subscribers' methods asynchronously, perhaps in different, +     * threads. This could make an Observable poorly-behaved, in that it might invoke {@code onCompleted} or, +     * {@code onError} before one of its {@code onNext} invocations. You can force such an Observable to be, +     * well-behaved and synchronous by applying the {@code serialize} method to it., +     * @return a {@link Observable} that is guaranteed to be well-behaved and synchronous, +     * Observable emits connected, non-overlapping windows. It emits the current window and opens a new one when, +     * the Observable produced by the specified {@code closingSelector} emits an item. The, +     * {@code closingSelector} then creates a new Observable to generate the closer of the next window., +     *            a {@link Func0} that produces an Observable for every window created. When this Observable, +     *            emits an item, {@code window} emits the associated window and begins a new one., +     *         when {@code closingSelector} emits an item, +++ b/rxjava-core/src/main/java/rx/Observer.java, + * After an Observer calls an {@link Observable}'s <code>Observable.subscribe</code> method, the, + * {@link Observable} calls the Observer's <code>onNext</code> method to provide notifications. A well-behaved, + * {@link Observable} will call an Observer's <code>onCompleted</code> closure exactly once or the Observer's, + * <code>onError</code> closure exactly once., + * <p>, + * For more information see the <a href="https://github.com/Netflix/RxJava/wiki/Observable">RxJava Wiki</a>, +     * The {@link Observable} will not call this closure if it calls <code>onError</code>., +     * If the {@link Observable} calls this closure, it will not thereafter call <code>onNext</code> or, +     * <code>onCompleted</code>., +     * Provides the Observer with new data., +     * The {@link Observable} calls this closure 1 or more times, unless it calls <code>onError</code> in which, +     * case this closure may never be called., +     * The {@link Observable} will not call this closure again after it calls either <code>onCompleted</code> or, +     * <code>onError</code>., +++ b/rxjava-core/src/main/java/rx/Notification.java, + * For the Microsoft Rx equivalent see: http://msdn.microsoft.com/en-us/library/hh229462(v=vs.103).aspx, +     * Retrieves the exception associated with an onError notification.]