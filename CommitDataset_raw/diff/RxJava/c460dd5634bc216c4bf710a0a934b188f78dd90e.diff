[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCreate.java, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCreate.java, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableDematerialize.java, +                if (t.isOnError()) {, +                    RxJavaPlugins.onError(t.getError());, +                }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCreate.java, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableDematerialize.java, +                if (t.isOnError()) {, +                    RxJavaPlugins.onError(t.getError());, +                }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableFromFuture.java, +import io.reactivex.internal.functions.ObjectHelper;, +import io.reactivex.internal.observers.DeferredScalarDisposable;, +        DeferredScalarDisposable<T> d = new DeferredScalarDisposable<T>(s);, +            d.complete(v);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCreate.java, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableDematerialize.java, +                if (t.isOnError()) {, +                    RxJavaPlugins.onError(t.getError());, +                }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableFromFuture.java, +import io.reactivex.internal.functions.ObjectHelper;, +import io.reactivex.internal.observers.DeferredScalarDisposable;, +        DeferredScalarDisposable<T> d = new DeferredScalarDisposable<T>(s);, +            d.complete(v);, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableSkipLastTimed.java, +            if (!cancelled) {, +                s.dispose();, +                for (;;) {, +                    if (cancelled) {, +                        queue.clear();, +                    if (d) {, +                        if (delayError) {, +                            if (empty) {, +                                Throwable e = error;, +                                if (e != null) {, +                                    a.onError(e);, +                                } else {, +                                    a.onComplete();, +                                }, +                        } else {, +                            Throwable e = error;, +                            if (e != null) {, +                                queue.clear();, +                                a.onError(e);, +                                return;, +                            } else, +                            if (empty) {, +                                a.onComplete();, +                                return;, +                            }, +                        }, +                    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCreate.java, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableDematerialize.java, +                if (t.isOnError()) {, +                    RxJavaPlugins.onError(t.getError());, +                }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableFromFuture.java, +import io.reactivex.internal.functions.ObjectHelper;, +import io.reactivex.internal.observers.DeferredScalarDisposable;, +        DeferredScalarDisposable<T> d = new DeferredScalarDisposable<T>(s);, +            d.complete(v);, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableSkipLastTimed.java, +            if (!cancelled) {, +                s.dispose();, +                for (;;) {, +                    if (cancelled) {, +                        queue.clear();, +                    if (d) {, +                        if (delayError) {, +                            if (empty) {, +                                Throwable e = error;, +                                if (e != null) {, +                                    a.onError(e);, +                                } else {, +                                    a.onComplete();, +                                }, +                        } else {, +                            Throwable e = error;, +                            if (e != null) {, +                                queue.clear();, +                                a.onError(e);, +                                return;, +                            } else, +                            if (empty) {, +                                a.onComplete();, +                                return;, +                            }, +                        }, +                    }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableWithLatestFrom.java, +import io.reactivex.internal.disposables.DisposableHelper;, +        t.onSubscribe(wlf);, +, +, +            DisposableHelper.setOnce(this.s, s);, +            DisposableHelper.dispose(s);, +        @Override]