[+++ b/language-adaptors/rxjava-scala/TODO.md, +This is a (probably incomplete) list of what still needs to be done in the Scala adaptor:, +*    Implicit schedulers?, +*    other small TODOs, +(Implicit) schedulers for interval: Options:, +```scala, +def interval(duration: Duration)(implicit scheduler: Scheduler): Observable[Long], +def interval(duration: Duration)(scheduler: Scheduler): Observable[Long], +def interval(scheduler: Scheduler)(duration: Duration): Observable[Long], +def interval(duration: Duration, scheduler: Scheduler): Observable[Long] && def interval(duration: Duration): Observable[Long] , +````, +++ b/language-adaptors/rxjava-scala/TODO.md, +This is a (probably incomplete) list of what still needs to be done in the Scala adaptor:, +*    Implicit schedulers?, +*    other small TODOs, +(Implicit) schedulers for interval: Options:, +```scala, +def interval(duration: Duration)(implicit scheduler: Scheduler): Observable[Long], +def interval(duration: Duration)(scheduler: Scheduler): Observable[Long], +def interval(scheduler: Scheduler)(duration: Duration): Observable[Long], +def interval(duration: Duration, scheduler: Scheduler): Observable[Long] && def interval(duration: Duration): Observable[Long] , +````, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +import scala.reflect.runtime.universe._, +import org.scalatest.junit.JUnitSuite, +import org.junit.Test, +import rx.util.functions._, +import scala.collection.SortedSet, +import scala.collection.SortedMap, +import org.junit.Ignore, +import java.lang.reflect.Modifier, +import java.util.Date, +    , +    , +     , +    , +  val correspondence = defaultMethodCorrespondence ++ Map(, +  , +  def defaultMethodCorrespondence: Map[String, String] = {, +    val allMethods = getPublicInstanceAndCompanionMethods(typeOf[rx.Observable[_]])      , +    val tuples = for (javaM <- allMethods) yield (javaM, javaMethodSignatureToScala(javaM)), +    tuples.toMap, +  }, +  , +++ b/language-adaptors/rxjava-scala/TODO.md, +This is a (probably incomplete) list of what still needs to be done in the Scala adaptor:, +*    Implicit schedulers?, +*    other small TODOs, +(Implicit) schedulers for interval: Options:, +```scala, +def interval(duration: Duration)(implicit scheduler: Scheduler): Observable[Long], +def interval(duration: Duration)(scheduler: Scheduler): Observable[Long], +def interval(scheduler: Scheduler)(duration: Duration): Observable[Long], +def interval(duration: Duration, scheduler: Scheduler): Observable[Long] && def interval(duration: Duration): Observable[Long] , +````, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +import scala.reflect.runtime.universe._, +import org.scalatest.junit.JUnitSuite, +import org.junit.Test, +import rx.util.functions._, +import scala.collection.SortedSet, +import scala.collection.SortedMap, +import org.junit.Ignore, +import java.lang.reflect.Modifier, +import java.util.Date, +    , +    , +     , +    , +  val correspondence = defaultMethodCorrespondence ++ Map(, +  , +  def defaultMethodCorrespondence: Map[String, String] = {, +    val allMethods = getPublicInstanceAndCompanionMethods(typeOf[rx.Observable[_]])      , +    val tuples = for (javaM <- allMethods) yield (javaM, javaMethodSignatureToScala(javaM)), +    tuples.toMap, +  }, +  , +++ b/rxjava-core/src/main/java/rx/subscriptions/Subscriptions.java, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +, +import org.junit.Test;, +, +import rx.operators.SafeObservableSubscription;, +        return new SafeObservableSubscription(new Subscription() {, +        });, +, +    public static class UnitTest {, +        @Test, +        public void testUnsubscribeOnlyOnce() {, +            Action0 unsubscribe = mock(Action0.class);, +            Subscription subscription = create(unsubscribe);, +            subscription.unsubscribe();, +            subscription.unsubscribe();, +            verify(unsubscribe, times(1)).call();, +        }, +    }]