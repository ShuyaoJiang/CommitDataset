[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableSingle.java, +import java.util.NoSuchElementException;, +, +    final boolean failOnEmpty;, +, +    public FlowableSingle(Flowable<T> source, T defaultValue, boolean failOnEmpty) {, +        this.failOnEmpty = failOnEmpty;, +        source.subscribe(new SingleElementSubscriber<T>(s, defaultValue, failOnEmpty));, +        final boolean failOnEmpty;, +, +        SingleElementSubscriber(Subscriber<? super T> actual, T defaultValue, boolean failOnEmpty) {, +            this.failOnEmpty = failOnEmpty;, +                if (failOnEmpty) {, +                    actual.onError(new NoSuchElementException());, +                } else {, +                }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableSingle.java, +import java.util.NoSuchElementException;, +, +    final boolean failOnEmpty;, +, +    public FlowableSingle(Flowable<T> source, T defaultValue, boolean failOnEmpty) {, +        this.failOnEmpty = failOnEmpty;, +        source.subscribe(new SingleElementSubscriber<T>(s, defaultValue, failOnEmpty));, +        final boolean failOnEmpty;, +, +        SingleElementSubscriber(Subscriber<? super T> actual, T defaultValue, boolean failOnEmpty) {, +            this.failOnEmpty = failOnEmpty;, +                if (failOnEmpty) {, +                    actual.onError(new NoSuchElementException());, +                } else {, +                }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableSingleMaybe.java, +        return RxJavaPlugins.onAssembly(new FlowableSingle<T>(source, null, false));, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableSingle.java, +import java.util.NoSuchElementException;, +, +    final boolean failOnEmpty;, +, +    public FlowableSingle(Flowable<T> source, T defaultValue, boolean failOnEmpty) {, +        this.failOnEmpty = failOnEmpty;, +        source.subscribe(new SingleElementSubscriber<T>(s, defaultValue, failOnEmpty));, +        final boolean failOnEmpty;, +, +        SingleElementSubscriber(Subscriber<? super T> actual, T defaultValue, boolean failOnEmpty) {, +            this.failOnEmpty = failOnEmpty;, +                if (failOnEmpty) {, +                    actual.onError(new NoSuchElementException());, +                } else {, +                }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableSingleMaybe.java, +        return RxJavaPlugins.onAssembly(new FlowableSingle<T>(source, null, false));, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableSingleSingle.java, +        return RxJavaPlugins.onAssembly(new FlowableSingle<T>(source, defaultValue, true));, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableSingle.java, +import java.util.NoSuchElementException;, +, +    final boolean failOnEmpty;, +, +    public FlowableSingle(Flowable<T> source, T defaultValue, boolean failOnEmpty) {, +        this.failOnEmpty = failOnEmpty;, +        source.subscribe(new SingleElementSubscriber<T>(s, defaultValue, failOnEmpty));, +        final boolean failOnEmpty;, +, +        SingleElementSubscriber(Subscriber<? super T> actual, T defaultValue, boolean failOnEmpty) {, +            this.failOnEmpty = failOnEmpty;, +                if (failOnEmpty) {, +                    actual.onError(new NoSuchElementException());, +                } else {, +                }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableSingleMaybe.java, +        return RxJavaPlugins.onAssembly(new FlowableSingle<T>(source, null, false));, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableSingleSingle.java, +        return RxJavaPlugins.onAssembly(new FlowableSingle<T>(source, defaultValue, true));, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableSingleTest.java, +, +    @Test, +    public void singleOrError() {, +        Flowable.empty(), +        .singleOrError(), +        .toFlowable(), +        .test(), +        .assertFailure(NoSuchElementException.class);, +    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableSingle.java, +import java.util.NoSuchElementException;, +, +    final boolean failOnEmpty;, +, +    public FlowableSingle(Flowable<T> source, T defaultValue, boolean failOnEmpty) {, +        this.failOnEmpty = failOnEmpty;, +        source.subscribe(new SingleElementSubscriber<T>(s, defaultValue, failOnEmpty));, +        final boolean failOnEmpty;, +, +        SingleElementSubscriber(Subscriber<? super T> actual, T defaultValue, boolean failOnEmpty) {, +            this.failOnEmpty = failOnEmpty;, +                if (failOnEmpty) {, +                    actual.onError(new NoSuchElementException());, +                } else {, +                }]