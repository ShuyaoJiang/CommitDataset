[+++ b/src/test/java/rx/internal/operators/OnSubscribeRefCountTest.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.internal.operators;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicInteger;, +, +import org.junit.Test;, +, +import rx.Observable;, +import rx.Observable.OnSubscribe;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.functions.Action0;, +import rx.functions.Action1;, +import rx.observers.TestSubscriber;, +import rx.schedulers.Schedulers;, +, +public class OnSubscribeRefCountTest {, +, +    @Test, +    public void testRefCountAsync() {, +        final AtomicInteger subscribeCount = new AtomicInteger();, +        final AtomicInteger nextCount = new AtomicInteger();, +        Observable<Long> r = Observable.timer(0, 1, TimeUnit.MILLISECONDS), +                .doOnSubscribe(new Action0() {, +, +                    @Override, +                    public void call() {, +                        subscribeCount.incrementAndGet();, +                    }, +, +                }), +                .doOnNext(new Action1<Long>() {, +, +                    @Override, +                    public void call(Long l) {, +                        nextCount.incrementAndGet();, +                    }, +, +                }), +                .publish().refCount();, +, +        final AtomicInteger receivedCount = new AtomicInteger();, +        Subscription s1 = r.subscribe(new Action1<Long>() {, +, +            @Override, +            public void call(Long l) {, +                receivedCount.incrementAndGet();, +            }, +, +        });, +        Subscription s2 = r.subscribe();, +, +        // give time to emit, +        try {, +            Thread.sleep(50);, +        } catch (InterruptedException e) {, +        }, +, +        // now unsubscribe, +        s2.unsubscribe(); // unsubscribe s2 first as we're counting in 1 and there can be a race between unsubscribe and one subscriber getting a value but not the other, +        s1.unsubscribe();, +, +        System.out.println("onNext: " + nextCount.get());, +, +        // should emit once for both subscribers, +        assertEquals(nextCount.get(), receivedCount.get());, +        // only 1 subscribe, +        assertEquals(1, subscribeCount.get());, +    }, +, +    @Test, +    public void testRefCountSynchronous() {, +        final AtomicInteger subscribeCount = new AtomicInteger();, +        final AtomicInteger nextCount = new AtomicInteger();, +        Observable<Integer> r = Observable.just(1, 2, 3, 4, 5, 6, 7, 8, 9), +                .doOnSubscribe(new Action0() {, +, +                    @Override, +                    public void call() {]