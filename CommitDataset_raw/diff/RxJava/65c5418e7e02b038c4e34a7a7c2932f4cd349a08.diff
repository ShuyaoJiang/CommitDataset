[+++ b/rxjava/src/main/java/rx/exceptions/CompositeException.java, +import java.io.PrintStream;, +import java.io.PrintWriter;, +import java.util.LinkedHashSet;, + * A CompositeException does not modify the structure of any exception it wraps, but at print-time, + * iterates through the list of contained Throwables to print them all., + *, + * Its invariant is to contains an immutable, ordered (by insertion order), unique list of non-composite exceptions., + * This list may be queried by {@code #getExceptions()}, + * , + * The `printStackTrace()` implementation does custom handling of the StackTrace instead of using `getCause()` so it, + * can avoid circular references., + * , + * If `getCause()` is invoked, it will lazily create the causal chain but stop if it finds any Throwable in the chain, + * that it has already seen., +    public CompositeException(String messagePrefix, Collection<? extends Throwable> errors) {, +        Set<Throwable> deDupedExceptions = new LinkedHashSet<Throwable>();, +        for (Throwable ex : errors) {, +            if (ex instanceof CompositeException) {, +                deDupedExceptions.addAll(((CompositeException) ex).getExceptions());, +            } else {, +                deDupedExceptions.add(ex);, +        }, +, +        _exceptions.addAll(deDupedExceptions);, +        this.message = exceptions.size() + " exceptions occurred. ";, +    public CompositeException(Collection<? extends Throwable> errors) {, +     * @return the exceptions that make up the {@code CompositeException}, as a {@link List} of {@link Throwable}s, +    private Throwable cause = null;, +, +        if (cause == null) {, +            // we lazily generate this causal chain if this is called, +            CompositeExceptionCausalChain _cause = new CompositeExceptionCausalChain();, +            Throwable chain = _cause;, +            for (Throwable e : exceptions) {, +                if (seenCauses.contains(e)) {, +                    // already seen this outer Throwable so skip, +                    continue;, +                seenCauses.add(e);, +                , +                List<Throwable> listOfCauses = getListOfCauses(e);, +                // check if any of them have been seen before, +                for(Throwable child : listOfCauses) {, +                    if (seenCauses.contains(child)) {, +                        // already seen this outer Throwable so skip, +                        e = new RuntimeException("Duplicate found in causal chain so cropping to prevent loop ...");, +                        continue;, +                    seenCauses.add(child);, +                }, +, +                    chain.initCause(e);, +                chain = chain.getCause();, +            }, +            cause = _cause;, +        }, +        return cause;, +    }, +, +    /**, +     * All of the following printStackTrace functionality is derived from JDK Throwable printStackTrace., +     * In particular, the PrintStreamOrWriter abstraction is copied wholesale., +     *, +     * Changes from the official JDK implementation:, +     * * No infinite loop detection, +     * * Smaller critical section holding printStream lock, +     * * Explicit knowledge about exceptions List that this loops through, +     */, +    @Override, +    public void printStackTrace() {, +        printStackTrace(System.err);, +    }, +, +    @Override, +    public void printStackTrace(PrintStream s) {, +        printStackTrace(new WrappedPrintStream(s));, +    }, +, +    @Override, +    public void printStackTrace(PrintWriter s) {, +        printStackTrace(new WrappedPrintWriter(s));, +    }, +, +    /**, +     * Special handling for printing out a CompositeException, +     * Loop through all inner exceptions and print them out, +     * , +     * @param s, +     *            stream to print to, +     */, +    private void printStackTrace(PrintStreamOrWriter s) {, +        StringBuilder bldr = new StringBuilder();, +        bldr.append(this).append("\n");, +        for (StackTraceElement myStackElement : getStackTrace()) {, +            bldr.append("\tat ").append(myStackElement).append("\n");, +        }, +        int i = 1;, +        for (Throwable ex : exceptions) {, +            bldr.append("  ComposedException ").append(i).append(" :").append("\n");, +            appendStackTrace(bldr, ex, "\t");, +            i++;]