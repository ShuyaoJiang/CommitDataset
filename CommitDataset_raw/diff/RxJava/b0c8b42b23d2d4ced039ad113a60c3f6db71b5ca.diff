[+++ b/src/main/java/rx/Observable.java, +     * <p>, +     * Warning! Using a chain like {@code source.onBackpressureBlock().subscribeOn(scheduler)} is prone to, +     * deadlocks because the consumption of the internal queue is scheduled behind a blocked emission by, +     * the subscribeOn. In order to avoid this, the operators have to be swapped in the chain: , +     * {@code source.subscribeOn(scheduler).onBackpressureBlock()} and in general, no subscribeOn operator should follow, +     * this operator., +     * @deprecated The operator doesn't work properly with {@link #subscribeOn(Scheduler)} and is prone to, +     *             deadlocks. It will be removed/unavailable starting from 1.1., +    @Deprecated, +     * <p>, +     * Warning! Using a chain like {@code source.onBackpressureBlock().subscribeOn(scheduler)} is prone to, +     * deadlocks because the consumption of the internal queue is scheduled behind a blocked emission by, +     * the subscribeOn. In order to avoid this, the operators have to be swapped in the chain: , +     * {@code source.subscribeOn(scheduler).onBackpressureBlock()} and in general, no subscribeOn operator should follow, +     * this operator., +     * @deprecated The operator doesn't work properly with {@link #subscribeOn(Scheduler)} and is prone to, +     *             deadlocks. It will be removed/unavailable starting from 1.1., +    @Deprecated, +++ b/src/main/java/rx/Observable.java, +     * <p>, +     * Warning! Using a chain like {@code source.onBackpressureBlock().subscribeOn(scheduler)} is prone to, +     * deadlocks because the consumption of the internal queue is scheduled behind a blocked emission by, +     * the subscribeOn. In order to avoid this, the operators have to be swapped in the chain: , +     * {@code source.subscribeOn(scheduler).onBackpressureBlock()} and in general, no subscribeOn operator should follow, +     * this operator., +     * @deprecated The operator doesn't work properly with {@link #subscribeOn(Scheduler)} and is prone to, +     *             deadlocks. It will be removed/unavailable starting from 1.1., +    @Deprecated, +     * <p>, +     * Warning! Using a chain like {@code source.onBackpressureBlock().subscribeOn(scheduler)} is prone to, +     * deadlocks because the consumption of the internal queue is scheduled behind a blocked emission by, +     * the subscribeOn. In order to avoid this, the operators have to be swapped in the chain: , +     * {@code source.subscribeOn(scheduler).onBackpressureBlock()} and in general, no subscribeOn operator should follow, +     * this operator., +     * @deprecated The operator doesn't work properly with {@link #subscribeOn(Scheduler)} and is prone to, +     *             deadlocks. It will be removed/unavailable starting from 1.1., +    @Deprecated, +++ b/src/main/java/rx/observers/TestSubscriber.java, +     * Assert if the received onNext events, in order, are the specified values., +     * @param values the values to check, +     * Assert if there is only a single received onNext event., +     * @param values the values to check]