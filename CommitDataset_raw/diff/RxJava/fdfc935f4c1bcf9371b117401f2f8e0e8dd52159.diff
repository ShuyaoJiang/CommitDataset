[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Note: mapMany and flatMap are equivalent., +     * <p>, +     * @see {@link #flatMap(Observable, Func1)}, +     * Creates a new Observable sequence by applying a function that you supply to each object in the, +     * original Observable sequence, where that function is itself an Observable that emits objects,, +     * and then merges the results of that function applied to every item emitted by the original, +     * Observable, emitting these merged results as its own sequence., +     * <p>, +     * Note: mapMany and flatMap are equivalent., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/mapMany.png">, +     * , +     * @param sequence, +     *            the source Observable, +     * @param func, +     *            a function to apply to each item emitted by the source Observable, generating a, +     *            Observable, +     * @param <T>, +     *            the type emitted by the source Observable, +     * @param <R>, +     *            the type emitted by the Observables emitted by <code>func</code>, +     * @return an Observable that emits a sequence that is the result of applying the transformation, +     *         function to each item emitted by the source Observable and merging the results of, +     *         the Observables obtained from this transformation, +     * @see {@link #mapMany(Observable, Func1)}, +     */, +    public static <T, R> Observable<R> flatMap(Observable<T> sequence, Func1<T, Observable<R>> func) {, +        return mapMany(sequence, func);, +    }, +, +    /**, +     * Creates a new Observable sequence by applying a function that you supply to each object in the, +     * original Observable sequence, where that function is itself an Observable that emits objects,, +     * and then merges the results of that function applied to every item emitted by the original, +     * Observable, emitting these merged results as its own sequence., +     * <p>, +     * Note: mapMany and flatMap are equivalent., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/mapMany.png">, +     * , +     * @param sequence, +     *            the source Observable, +     * @param func, +     *            a function to apply to each item emitted by the source Observable, generating a, +     *            Observable, +     * @param <T>, +     *            the type emitted by the source Observable, +     * @param <R>, +     *            the type emitted by the Observables emitted by <code>func</code>, +     * @return an Observable that emits a sequence that is the result of applying the transformation, +     *         function to each item emitted by the source Observable and merging the results of, +     *         the Observables obtained from this transformation, +     * @see {@link #mapMany(Observable, Func1)}, +     */, +    public static <T, R> Observable<R> flatMap(Observable<T> sequence, final Object func) {, +        return mapMany(sequence, func);, +    }, +, +    /**, +     * Creates a new Observable sequence by applying a function that you supply to each item in the, +     * original Observable sequence, where that function is itself an Observable that emits items, and, +     * then merges the results of that function applied to every item emitted by the original, +     * Observable, emitting these merged results as its own sequence., +     * <p>, +     * Note: mapMany and flatMap are equivalent., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/mapMany.png">, +     * , +     * @param func, +     *            a function to apply to each item in the sequence, that returns an Observable., +     * @return an Observable that emits a sequence that is the result of applying the transformation, +     *         function to each item in the input sequence and merging the results of the, +     *         Observables obtained from this transformation., +     * @see {@link #mapMany(Func1)}, +     */, +    public <R> Observable<R> flatMap(Func1<T, Observable<R>> func) {, +        return mapMany(func);, +    }, +, +    /**, +     * Creates a new Observable sequence by applying a function that you supply to each item in the, +     * original Observable sequence, where that function is itself an Observable that emits items, and, +     * then merges the results of that function applied to every item emitted by the original, +     * Observable, emitting these merged results as its own sequence., +     * <p>, +     * Note: mapMany and flatMap are equivalent., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/mapMany.png">, +     * , +     * @param callback, +     *            a function to apply to each item in the sequence that returns an Observable., +     * @return an Observable that emits a sequence that is the result of applying the transformation', +     *         function to each item in the input sequence and merging the results of the, +     *         Observables obtained from this transformation., +     * @see {@link #mapMany(Object)}, +     */, +    public <R> Observable<R> flatMap(final Object callback) {, +        return mapMany(callback);, +    }]