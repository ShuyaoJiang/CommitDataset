[+++ b/rxjava-contrib/rxjava-computation-expressions/build.gradle, +apply plugin: 'osgi', +, +sourceCompatibility = JavaVersion.VERSION_1_6, +targetCompatibility = JavaVersion.VERSION_1_6, +, +dependencies {, +    compile project(':rxjava-core'), +    testCompile project(":rxjava-core").sourceSets.test.output , +    provided 'junit:junit-dep:4.10', +    provided 'org.mockito:mockito-core:1.8.5', +}, +, +jar {, +    manifest {, +        name = 'rxjava-computation-expressions', +        instruction 'Bundle-Vendor', 'Netflix', +        instruction 'Bundle-DocURL', 'https://github.com/Netflix/RxJava', +        instruction 'Import-Package', '!org.junit,!junit.framework,!org.mockito.*,*', +    }, +}, +++ b/rxjava-contrib/rxjava-computation-expressions/build.gradle, +apply plugin: 'osgi', +, +sourceCompatibility = JavaVersion.VERSION_1_6, +targetCompatibility = JavaVersion.VERSION_1_6, +, +dependencies {, +    compile project(':rxjava-core'), +    testCompile project(":rxjava-core").sourceSets.test.output , +    provided 'junit:junit-dep:4.10', +    provided 'org.mockito:mockito-core:1.8.5', +}, +, +jar {, +    manifest {, +        name = 'rxjava-computation-expressions', +        instruction 'Bundle-Vendor', 'Netflix', +        instruction 'Bundle-DocURL', 'https://github.com/Netflix/RxJava', +        instruction 'Import-Package', '!org.junit,!junit.framework,!org.mockito.*,*', +    }, +}, +++ b/rxjava-contrib/rxjava-computation-expressions/src/main/java/rx/Statement.java, +package rx;, +, +import java.util.Map;, +, +import rx.operators.OperationConditionals;, +import rx.util.functions.Func0;, +, +/**, + * Imperative statements expressed as Observable operators., + */, +public class Statement {, +, +    /**, +     * Return a particular one of several possible Observables based on a case, +     * selector., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/switchCase.png">, +     * , +     * @param <K>, +     *            the case key type, +     * @param <R>, +     *            the result value type, +     * @param caseSelector, +     *            the function that produces a case key when an, +     *            Observer subscribes, +     * @param mapOfCases, +     *            a map that maps a case key to an Observable, +     * @return a particular Observable chosen by key from the map of, +     *         Observables, or an empty Observable if no Observable matches the, +     *         key, +     */, +    public static <K, R> Observable<R> switchCase(Func0<? extends K> caseSelector,, +            Map<? super K, ? extends Observable<? extends R>> mapOfCases) {, +        return switchCase(caseSelector, mapOfCases, Observable.<R> empty());, +    }, +, +    /**, +     * Return a particular one of several possible Observables based on a case, +     * selector and run it on the designated scheduler., +     * <p>, +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/switchCase.s.png">, +     * , +     * @param <K>, +     *            the case key type, +     * @param <R>, +     *            the result value type, +     * @param caseSelector, +     *            the function that produces a case key when an, +     *            Observer subscribes, +     * @param mapOfCases, +     *            a map that maps a case key to an Observable, +     * @param scheduler, +     *            the scheduler where the empty observable is observed, +     * @return a particular Observable chosen by key from the map of, +     *         Observables, or an empty Observable if no Observable matches the, +     *         key, but one that runs on the designated scheduler in either case, +     */]