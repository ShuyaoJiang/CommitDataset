[+++ b/rxjava-core/src/main/java/rx/operators/OperationObserveOn.java, +            Scheduler scheduler = spy(OperatorTester.UnitTest.forwardingScheduler(Schedulers.immediate()));, +++ b/rxjava-core/src/main/java/rx/operators/OperationObserveOn.java, +            Scheduler scheduler = spy(OperatorTester.UnitTest.forwardingScheduler(Schedulers.immediate()));, +++ b/rxjava-core/src/main/java/rx/operators/OperationSubscribeOn.java, +            Scheduler scheduler = spy(OperatorTester.UnitTest.forwardingScheduler(Schedulers.immediate()));, +++ b/rxjava-core/src/main/java/rx/operators/OperationObserveOn.java, +            Scheduler scheduler = spy(OperatorTester.UnitTest.forwardingScheduler(Schedulers.immediate()));, +++ b/rxjava-core/src/main/java/rx/operators/OperationSubscribeOn.java, +            Scheduler scheduler = spy(OperatorTester.UnitTest.forwardingScheduler(Schedulers.immediate()));, +++ b/rxjava-core/src/main/java/rx/operators/OperationTake.java, +import static rx.operators.OperatorTester.UnitTest.*;, +++ b/rxjava-core/src/main/java/rx/operators/OperationObserveOn.java, +            Scheduler scheduler = spy(OperatorTester.UnitTest.forwardingScheduler(Schedulers.immediate()));, +++ b/rxjava-core/src/main/java/rx/operators/OperationSubscribeOn.java, +            Scheduler scheduler = spy(OperatorTester.UnitTest.forwardingScheduler(Schedulers.immediate()));, +++ b/rxjava-core/src/main/java/rx/operators/OperationTake.java, +import static rx.operators.OperatorTester.UnitTest.*;, +++ b/rxjava-core/src/main/java/rx/operators/OperatorTester.java, +/**, + * Copyright 2013 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import static org.junit.Assert.*;, +, +import java.lang.Thread.UncaughtExceptionHandler;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicReference;, +, +import org.junit.Test;, +, +import rx.Observable;, +import rx.Observer;, +import rx.Scheduler;, +import rx.Subscription;, +import rx.subscriptions.Subscriptions;, +import rx.util.functions.Action0;, +import rx.util.functions.Func0;, +import rx.util.functions.Func1;, +import rx.util.functions.Func2;, +, +/**, + * Common utility functions for testing operator implementations., + */, +/* package */class OperatorTester {, +    /*, +     * This is purposefully package-only so it does not leak into the public API outside of this package., +     * , +     * This package is implementation details and not part of the Javadocs and thus can change without breaking backwards compatibility., +     * , +     * benjchristensen => I'm procrastinating the decision of where and how these types of classes (see rx.subjects.UnsubscribeTester) should exist., +     * If they are only for internal implementations then I don't want them as part of the API., +     * If they are truly useful for everyone to use then an "rx.testing" package may make sense., +     */, +, +    private OperatorTester() {, +    }, +, +    public static class UnitTest {, +, +        public static <T> Func1<Observer<T>, Subscription> assertTrustedObservable(final Func1<Observer<T>, Subscription> source), +        {, +            return new Func1<Observer<T>, Subscription>(), +            {, +                @Override, +                public Subscription call(Observer<T> observer), +                {, +                    return source.call(new TestingObserver<T>(observer));, +                }, +            };, +        }, +, +        /**, +         * Used for mocking of Schedulers since many Scheduler implementations are static/final., +         * , +         * @param underlying, +         * @return, +         */, +        public static Scheduler forwardingScheduler(Scheduler underlying) {, +            return new ForwardingScheduler(underlying);, +        }, +, +        public static class TestingObserver<T> implements Observer<T> {, +]