[+++ b/CHANGES.md, +++ b/CHANGES.md, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.*;, +    public static <T> Observable<T> subscribeOn(Observable<T> source, Scheduler scheduler) {, +        return _create(OperationSubscribeOn.subscribeOn(source, scheduler));, +    }, +, +    public static <T> Observable<T> observeOn(Observable<T> source, Scheduler scheduler) {, +        return _create(OperationObserveOn.observeOn(source, scheduler));, +    }, +, +    public Observable<T> subscribeOn(Scheduler scheduler) {, +        return subscribeOn(this, scheduler);, +    }, +, +    public Observable<T> observeOn(Scheduler scheduler) {, +        return observeOn(this, scheduler);, +    }, +, +    public Observable<T> dematerialize() {, +        return dematerialize((Observable<Notification<T>>) this);, +++ b/CHANGES.md, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.*;, +    public static <T> Observable<T> subscribeOn(Observable<T> source, Scheduler scheduler) {, +        return _create(OperationSubscribeOn.subscribeOn(source, scheduler));, +    }, +, +    public static <T> Observable<T> observeOn(Observable<T> source, Scheduler scheduler) {, +        return _create(OperationObserveOn.observeOn(source, scheduler));, +    }, +, +    public Observable<T> subscribeOn(Scheduler scheduler) {, +        return subscribeOn(this, scheduler);, +    }, +, +    public Observable<T> observeOn(Scheduler scheduler) {, +        return observeOn(this, scheduler);, +    }, +, +    public Observable<T> dematerialize() {, +        return dematerialize((Observable<Notification<T>>) this);, +++ b/rxjava-core/src/main/java/rx/Scheduler.java, +package rx;, +, +import rx.util.functions.Action0;, +import rx.util.functions.Func0;, +, +import java.util.concurrent.TimeUnit;, +, +public interface Scheduler {, +, +    Subscription schedule(Action0 action);, +, +    Subscription schedule(Func0<Subscription> action);, +, +    Subscription schedule(Action0 action, long timespan, TimeUnit unit);, +, +    Subscription schedule(Func0<Subscription> action, long timespan, TimeUnit unit);, +, +    long now();, +, +}, +++ b/CHANGES.md, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.*;, +    public static <T> Observable<T> subscribeOn(Observable<T> source, Scheduler scheduler) {, +        return _create(OperationSubscribeOn.subscribeOn(source, scheduler));, +    }, +, +    public static <T> Observable<T> observeOn(Observable<T> source, Scheduler scheduler) {, +        return _create(OperationObserveOn.observeOn(source, scheduler));, +    }, +, +    public Observable<T> subscribeOn(Scheduler scheduler) {, +        return subscribeOn(this, scheduler);, +    }, +, +    public Observable<T> observeOn(Scheduler scheduler) {, +        return observeOn(this, scheduler);, +    }, +, +    public Observable<T> dematerialize() {, +        return dematerialize((Observable<Notification<T>>) this);, +++ b/rxjava-core/src/main/java/rx/Scheduler.java, +package rx;, +, +import rx.util.functions.Action0;, +import rx.util.functions.Func0;, +, +import java.util.concurrent.TimeUnit;, +, +public interface Scheduler {, +, +    Subscription schedule(Action0 action);, +, +    Subscription schedule(Func0<Subscription> action);, +, +    Subscription schedule(Action0 action, long timespan, TimeUnit unit);]