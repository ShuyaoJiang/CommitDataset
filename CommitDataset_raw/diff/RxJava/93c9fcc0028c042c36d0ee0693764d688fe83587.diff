[+++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Applies a timeout policy for each item emitted by the Observable, using, +   * the specified scheduler to run timeout timers. If the next item isn't, +   * observed within the specified timeout duration starting from its, +   * predecessor, observers are notified of a `TimeoutException`., +   * <p>, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/timeout.1.png">, +   *, +   * @param timeout maximum duration between items before a timeout occurs, +   * @return the source Observable modified to notify observers of a, +   *         `TimeoutException` in case of a timeout, +   */, +  def timeout(timeout: Duration): Observable[T] = {, +    toScalaObservable[T](asJavaObservable.timeout(timeout.length, timeout.unit)), +  }, +, +  /**, +   * Applies a timeout policy for each item emitted by the Observable, using, +   * the specified scheduler to run timeout timers. If the next item isn't, +   * observed within the specified timeout duration starting from its, +   * predecessor, a specified fallback Observable produces future items and, +   * notifications from that point on., +   * <p>, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/timeout.2.png">, +   *, +   * @param timeout maximum duration between items before a timeout occurs, +   * @param other fallback Observable to use in case of a timeout, +   * @return the source Observable modified to switch to the fallback, +   *         Observable in case of a timeout, +   */, +  def timeout[U >: T](timeout: Duration, other: Observable[U]): Observable[U] = {, +    val otherJava: rx.Observable[_ <: U] = other.asJavaObservable, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[U]], +    toScalaObservable[U](thisJava.timeout(timeout.length, timeout.unit, otherJava)), +  }, +, +  /**, +   * Applies a timeout policy for each item emitted by the Observable, using, +   * the specified scheduler to run timeout timers. If the next item isn't, +   * observed within the specified timeout duration starting from its, +   * predecessor, the observer is notified of a `TimeoutException`., +   * <p>, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/timeout.1s.png">, +   *, +   * @param timeout maximum duration between items before a timeout occurs, +   * @param scheduler Scheduler to run the timeout timers on, +   * @return the source Observable modified to notify observers of a, +   *         `TimeoutException` in case of a timeout, +   */, +  def timeout(timeout: Duration, scheduler: Scheduler): Observable[T] = {, +    toScalaObservable[T](asJavaObservable.timeout(timeout.length, timeout.unit, scheduler.asJavaScheduler)), +  }, +, +  /**, +   * Applies a timeout policy for each item emitted by the Observable, using, +   * the specified scheduler to run timeout timers. If the next item isn't, +   * observed within the specified timeout duration starting from its, +   * predecessor, a specified fallback Observable sequence produces future, +   * items and notifications from that point on., +   * <p>, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/timeout.2s.png">, +   *, +   * @param timeout maximum duration between items before a timeout occurs, +   * @param other Observable to use as the fallback in case of a timeout, +   * @param scheduler Scheduler to run the timeout timers on, +   * @return the source Observable modified so that it will switch to the, +   *         fallback Observable in case of a timeout, +   */, +  def timeout[U >: T](timeout: Duration, other: Observable[U], scheduler: Scheduler): Observable[U] = {, +    val otherJava: rx.Observable[_ <: U] = other.asJavaObservable, +    val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[U]], +    toScalaObservable[U](thisJava.timeout(timeout.length, timeout.unit, otherJava, scheduler.asJavaScheduler)), +  }, +, +, +  /**, +   * Invokes an action if the source Observable calls `onError`., +   *                `onError`, +   * Invokes an action when the source Observable calls `onCompleted`., +   *                    `onCompleted`, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * Applies a timeout policy for each item emitted by the Observable, using, +   * the specified scheduler to run timeout timers. If the next item isn't, +   * observed within the specified timeout duration starting from its, +   * predecessor, observers are notified of a `TimeoutException`., +   * <p>, +   * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/timeout.1.png">, +   *, +   * @param timeout maximum duration between items before a timeout occurs, +   * @return the source Observable modified to notify observers of a, +   *         `TimeoutException` in case of a timeout, +   */, +  def timeout(timeout: Duration): Observable[T] = {, +    toScalaObservable[T](asJavaObservable.timeout(timeout.length, timeout.unit)), +  }, +, +  /**, +   * Applies a timeout policy for each item emitted by the Observable, using, +   * the specified scheduler to run timeout timers. If the next item isn't, +   * observed within the specified timeout duration starting from its]