[+++ b/build.gradle, +, +    testCompile 'org.reactivestreams:reactive-streams-tck:1.0.0', +    testCompile group: 'org.testng', name: 'testng', version: '6.9.10', +task testng(type: Test) { , +     useTestNG() , +} , +, +check.dependsOn testng , +, +++ b/build.gradle, +, +    testCompile 'org.reactivestreams:reactive-streams-tck:1.0.0', +    testCompile group: 'org.testng', name: 'testng', version: '6.9.10', +task testng(type: Test) { , +     useTestNG() , +} , +, +check.dependsOn testng , +, +++ b/src/main/java/io/reactivex/internal/util/HalfSerializer.java, +    /**, +     * Emits the given value if possible and terminates if there was an onComplete or onError, +     * while emitting, drops the value otherwise., +     * @param <T> the value type, +     * @param subscriber the target Subscriber to emit to, +     * @param value the value to emit, +     * @param wip the serialization work-in-progress counter/indicator, +     * @param error the holder of Throwables, +     */, +    /**, +     * Emits the given exception if possible or adds it to the given error container to, +     * be emitted by a concurrent onNext if one is running., +     * Undeliverable exceptions are sent to the RxJavaPlugins.onError., +     * @param subscriber the target Subscriber to emit to, +     * @param ex the Throwable to emit, +     * @param wip the serialization work-in-progress counter/indicator, +     * @param error the holder of Throwables, +     */, +, +    /**, +     * Emits an onComplete signal or an onError signal with the given error or indicates, +     * the concurrently running onNext should do that., +     * @param subscriber the target Subscriber to emit to, +     * @param wip the serialization work-in-progress counter/indicator, +     * @param error the holder of Throwables, +     */, +    /**, +     * Emits the given value if possible and terminates if there was an onComplete or onError, +     * while emitting, drops the value otherwise., +     * @param <T> the value type, +     * @param observer the target Observer to emit to, +     * @param value the value to emit, +     * @param wip the serialization work-in-progress counter/indicator, +     * @param error the holder of Throwables, +     */, +    public static <T> void onNext(Observer<? super T> observer, T value,, +            observer.onNext(value);, +                    observer.onError(ex);, +                    observer.onComplete();, +    /**, +     * Emits the given exception if possible or adds it to the given error container to, +     * be emitted by a concurrent onNext if one is running., +     * Undeliverable exceptions are sent to the RxJavaPlugins.onError., +     * @param observer the target Subscriber to emit to, +     * @param ex the Throwable to emit, +     * @param wip the serialization work-in-progress counter/indicator, +     * @param error the holder of Throwables, +     */, +    public static void onError(Observer<?> observer, Throwable ex,, +                observer.onError(error.terminate());, +    /**, +     * Emits an onComplete signal or an onError signal with the given error or indicates, +     * the concurrently running onNext should do that., +     * @param observer the target Subscriber to emit to, +     * @param wip the serialization work-in-progress counter/indicator, +     * @param error the holder of Throwables, +     */, +    public static void onComplete(Observer<?> observer, AtomicInteger wip, AtomicThrowable error) {, +                observer.onError(ex);, +                observer.onComplete();, +++ b/build.gradle, +, +    testCompile 'org.reactivestreams:reactive-streams-tck:1.0.0', +    testCompile group: 'org.testng', name: 'testng', version: '6.9.10', +task testng(type: Test) { , +     useTestNG() , +} , +, +check.dependsOn testng , +, +++ b/src/main/java/io/reactivex/internal/util/HalfSerializer.java, +    /**, +     * Emits the given value if possible and terminates if there was an onComplete or onError, +     * while emitting, drops the value otherwise., +     * @param <T> the value type, +     * @param subscriber the target Subscriber to emit to, +     * @param value the value to emit, +     * @param wip the serialization work-in-progress counter/indicator, +     * @param error the holder of Throwables]