[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationMulticast;, +import rx.operators.OperationReplay;, +import rx.operators.OperatorOnErrorResumeNextViaObservable;, +        return OperationMulticast.multicast(this, subjectFactory, selector);, +        return OperationMulticast.multicast(this, subject);, +        return lift(new OperatorOnErrorResumeNextViaObservable<T>(resumeSequence));, +        return OperationMulticast.multicast(this, PublishSubject.<T> create());, +        return OperationMulticast.multicast(this, BehaviorSubject.<T> create(initialValue));, +        return OperationMulticast.multicast(this, AsyncSubject.<T> create());, +        return OperationMulticast.multicast(this, ReplaySubject.<T> create());, +        return OperationMulticast.multicast(this, new Func0<Subject<T, T>>() {, +        }, selector);, +        return OperationMulticast.multicast(this, new Func0<Subject<T, T>>() {, +                return OperationReplay.replayBuffered(bufferSize);, +        }, selector);, +        return OperationMulticast.multicast(this, new Func0<Subject<T, T>>() {, +                return OperationReplay.replayWindowed(time, unit, bufferSize, scheduler);, +        }, selector);, +        return OperationMulticast.multicast(this, new Func0<Subject<T, T>>() {, +                return OperationReplay.<T> createScheduledSubject(OperationReplay.<T> replayBuffered(bufferSize), scheduler);, +        }, selector);, +        return OperationMulticast.multicast(this, new Func0<Subject<T, T>>() {, +                return OperationReplay.replayWindowed(time, unit, -1, scheduler);, +        }, selector);, +        return OperationMulticast.multicast(this, new Func0<Subject<T, T>>() {, +                return OperationReplay.createScheduledSubject(ReplaySubject.<T> create(), scheduler);, +        }, selector);, +        return OperationMulticast.multicast(this, OperationReplay.<T> replayBuffered(bufferSize));, +        return OperationMulticast.multicast(this, OperationReplay.<T> replayWindowed(time, unit, bufferSize, scheduler));, +        return OperationMulticast.multicast(this,, +                OperationReplay.createScheduledSubject(, +                        OperationReplay.<T> replayBuffered(bufferSize), scheduler));, +        return OperationMulticast.multicast(this, OperationReplay.<T> replayWindowed(time, unit, -1, scheduler));, +        return OperationMulticast.multicast(this, OperationReplay.createScheduledSubject(ReplaySubject.<T> create(), scheduler));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationMulticast;, +import rx.operators.OperationReplay;, +import rx.operators.OperatorOnErrorResumeNextViaObservable;, +        return OperationMulticast.multicast(this, subjectFactory, selector);, +        return OperationMulticast.multicast(this, subject);, +        return lift(new OperatorOnErrorResumeNextViaObservable<T>(resumeSequence));, +        return OperationMulticast.multicast(this, PublishSubject.<T> create());, +        return OperationMulticast.multicast(this, BehaviorSubject.<T> create(initialValue));, +        return OperationMulticast.multicast(this, AsyncSubject.<T> create());, +        return OperationMulticast.multicast(this, ReplaySubject.<T> create());, +        return OperationMulticast.multicast(this, new Func0<Subject<T, T>>() {, +        }, selector);, +        return OperationMulticast.multicast(this, new Func0<Subject<T, T>>() {, +                return OperationReplay.replayBuffered(bufferSize);, +        }, selector);, +        return OperationMulticast.multicast(this, new Func0<Subject<T, T>>() {, +                return OperationReplay.replayWindowed(time, unit, bufferSize, scheduler);, +        }, selector);, +        return OperationMulticast.multicast(this, new Func0<Subject<T, T>>() {, +                return OperationReplay.<T> createScheduledSubject(OperationReplay.<T> replayBuffered(bufferSize), scheduler);, +        }, selector);, +        return OperationMulticast.multicast(this, new Func0<Subject<T, T>>() {, +                return OperationReplay.replayWindowed(time, unit, -1, scheduler);, +        }, selector);, +        return OperationMulticast.multicast(this, new Func0<Subject<T, T>>() {, +                return OperationReplay.createScheduledSubject(ReplaySubject.<T> create(), scheduler);, +        }, selector);, +        return OperationMulticast.multicast(this, OperationReplay.<T> replayBuffered(bufferSize));, +        return OperationMulticast.multicast(this, OperationReplay.<T> replayWindowed(time, unit, bufferSize, scheduler));, +        return OperationMulticast.multicast(this,, +                OperationReplay.createScheduledSubject(, +                        OperationReplay.<T> replayBuffered(bufferSize), scheduler));, +        return OperationMulticast.multicast(this, OperationReplay.<T> replayWindowed(time, unit, -1, scheduler));, +        return OperationMulticast.multicast(this, OperationReplay.createScheduledSubject(ReplaySubject.<T> create(), scheduler));, +++ b/rxjava-core/src/main/java/rx/operators/OperationMulticast.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import rx.Observable;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observer;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.functions.Action0;, +import rx.functions.Func0;, +import rx.functions.Func1;, +import rx.observables.ConnectableObservable;, +import rx.subjects.Subject;, +import rx.subscriptions.CompositeSubscription;, +import rx.subscriptions.Subscriptions;]