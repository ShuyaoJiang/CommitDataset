[+++ b/rxjava-core/src/main/java/rx/subscriptions/BooleanSubscription.java, +public final class BooleanSubscription implements Subscription {, +++ b/rxjava-core/src/main/java/rx/subscriptions/BooleanSubscription.java, +public final class BooleanSubscription implements Subscription {, +++ b/rxjava-core/src/main/java/rx/subscriptions/CompositeSubscription.java, +public final class CompositeSubscription implements Subscription {, +        State oldState;, +            oldState = state.get();, +            if (oldState.isUnsubscribed) {, +                newState = oldState.add(s);, +        } while (!state.compareAndSet(oldState, newState));, +        State oldState;, +            oldState = state.get();, +            if (oldState.isUnsubscribed) {, +                newState = oldState.remove(s);, +        } while (!state.compareAndSet(oldState, newState));, +        State oldState;, +            oldState = state.get();, +            if (oldState.isUnsubscribed) {, +                newState = oldState.clear();, +        } while (!state.compareAndSet(oldState, newState));, +        unsubscribeFromAll(oldState.subscriptions);, +        State oldState;, +            oldState = state.get();, +            if (oldState.isUnsubscribed) {, +                newState = oldState.unsubscribe();, +        } while (!state.compareAndSet(oldState, newState));, +        unsubscribeFromAll(oldState.subscriptions);, +++ b/rxjava-core/src/main/java/rx/subscriptions/BooleanSubscription.java, +public final class BooleanSubscription implements Subscription {, +++ b/rxjava-core/src/main/java/rx/subscriptions/CompositeSubscription.java, +public final class CompositeSubscription implements Subscription {, +        State oldState;, +            oldState = state.get();, +            if (oldState.isUnsubscribed) {, +                newState = oldState.add(s);, +        } while (!state.compareAndSet(oldState, newState));, +        State oldState;, +            oldState = state.get();, +            if (oldState.isUnsubscribed) {, +                newState = oldState.remove(s);, +        } while (!state.compareAndSet(oldState, newState));, +        State oldState;, +            oldState = state.get();, +            if (oldState.isUnsubscribed) {, +                newState = oldState.clear();, +        } while (!state.compareAndSet(oldState, newState));, +        unsubscribeFromAll(oldState.subscriptions);, +        State oldState;, +            oldState = state.get();, +            if (oldState.isUnsubscribed) {, +                newState = oldState.unsubscribe();, +        } while (!state.compareAndSet(oldState, newState));, +        unsubscribeFromAll(oldState.subscriptions);, +++ b/rxjava-core/src/main/java/rx/subscriptions/RefCountSubscription.java, +public final class RefCountSubscription implements Subscription {, +    @Deprecated, +    public Subscription getSubscription() {, +        return get();, +    }, +, +    public Subscription get() {, +        State oldState;, +            oldState = state.get();, +            if (oldState.isUnsubscribed) {, +                newState = oldState.addChild();, +        } while (!state.compareAndSet(oldState, newState));, +        State oldState;, +            oldState = state.get();, +            if (oldState.isUnsubscribed) {, +            newState = oldState.unsubscribe();, +        } while (!state.compareAndSet(oldState, newState));, +    private final class InnerSubscription implements Subscription {, +                State oldState;, +                    oldState = state.get();, +                    newState = oldState.removeChild();, +                } while (!state.compareAndSet(oldState, newState));, +++ b/rxjava-core/src/main/java/rx/subscriptions/BooleanSubscription.java, +public final class BooleanSubscription implements Subscription {, +++ b/rxjava-core/src/main/java/rx/subscriptions/CompositeSubscription.java, +public final class CompositeSubscription implements Subscription {, +        State oldState;, +            oldState = state.get();, +            if (oldState.isUnsubscribed) {, +                newState = oldState.add(s);, +        } while (!state.compareAndSet(oldState, newState));, +        State oldState;, +            oldState = state.get();, +            if (oldState.isUnsubscribed) {, +                newState = oldState.remove(s);, +        } while (!state.compareAndSet(oldState, newState));, +        State oldState;, +            oldState = state.get();, +            if (oldState.isUnsubscribed) {, +                newState = oldState.clear();, +        } while (!state.compareAndSet(oldState, newState));, +        unsubscribeFromAll(oldState.subscriptions);, +        State oldState;, +            oldState = state.get();, +            if (oldState.isUnsubscribed) {]