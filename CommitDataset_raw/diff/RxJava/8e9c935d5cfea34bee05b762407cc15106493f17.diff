[+++ b/src/main/java/io/reactivex/Completable.java, +     * This overload disposes eagerly before the terminal event is emitted., +     * If this overload performs a lazy cancellation after the terminal event is emitted., +        return RxJavaPlugins.onAssembly(new CompletableDisposeOn(this, scheduler));, +++ b/src/main/java/io/reactivex/Completable.java, +     * This overload disposes eagerly before the terminal event is emitted., +     * If this overload performs a lazy cancellation after the terminal event is emitted., +        return RxJavaPlugins.onAssembly(new CompletableDisposeOn(this, scheduler));, +++ b/src/main/java/io/reactivex/CompletableEmitter.java, +     * or Cancellation will be disposed/cancelled., +     * or Cancellation will be disposed/cancelled., +++ b/src/main/java/io/reactivex/Completable.java, +     * This overload disposes eagerly before the terminal event is emitted., +     * If this overload performs a lazy cancellation after the terminal event is emitted., +        return RxJavaPlugins.onAssembly(new CompletableDisposeOn(this, scheduler));, +++ b/src/main/java/io/reactivex/CompletableEmitter.java, +     * or Cancellation will be disposed/cancelled., +     * or Cancellation will be disposed/cancelled., +++ b/src/main/java/io/reactivex/Flowable.java, +     * Constructs a Publisher that creates a dependent resource object which is disposed of on cancellation., +     * termination if you have set {@code disposeEagerly} to {@code true} and cancellation does not occur, +     * before termination. Otherwise resource disposal will occur on cancellation.  Eager disposal is, +     *            if {@code true} then disposal will happen either on cancellation or just before emission of, +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * The cancellation and backpressure is composed through., +     * Calls the unsubscribe {@code Action} if the downstream cancels the sequence., +     * {@link Subscriber} during its lifetime and if this {@code Subscriber} cancels before the, +     * {@link Subscriber} during its lifetime and if this {@code Subscriber} cancels before the, +     * {@link Subscriber} during its lifetime and if this {@code Subscriber} cancels before the, +     * {@link Subscriber} during its lifetime and if this {@code Subscriber} cancels before the, +     * {@link Subscriber} during its lifetime and if this {@code Subscriber} cancels before the, +     * the sequence is terminated or downstream cancels., +     * the sequence is terminated or downstream cancels, +        Function<T, T> valueSelector = Functions.identity();, +     *            the {@link Scheduler} to perform cancellation actions on, +     * @return the source Publisher modified so that its cancellations happen on the specified, +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +++ b/src/main/java/io/reactivex/Completable.java, +     * This overload disposes eagerly before the terminal event is emitted., +     * If this overload performs a lazy cancellation after the terminal event is emitted., +        return RxJavaPlugins.onAssembly(new CompletableDisposeOn(this, scheduler));, +++ b/src/main/java/io/reactivex/CompletableEmitter.java, +     * or Cancellation will be disposed/cancelled., +     * or Cancellation will be disposed/cancelled., +++ b/src/main/java/io/reactivex/Flowable.java, +     * Constructs a Publisher that creates a dependent resource object which is disposed of on cancellation., +     * termination if you have set {@code disposeEagerly} to {@code true} and cancellation does not occur, +     * before termination. Otherwise resource disposal will occur on cancellation.  Eager disposal is, +     *            if {@code true} then disposal will happen either on cancellation or just before emission of, +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion, +     * or cancellation., +     * use {@link #doOnCancel(Action)} as well or use {@code using()} to do cleanup in case of completion]