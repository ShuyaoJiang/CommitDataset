[+++ b/rxjava-core/src/main/java/rx/operators/OperationNext.java, +            return !observer.isCompleted(false);, +            if (observer.isCompleted(true)) {, +        public boolean isCompleted(boolean rethrowExceptionIfExists) {, +                if (rethrowExceptionIfExists) {, +                } else {, +                    return true;, +                }, +        @Test, +        public void testOnErrorViaHasNext() throws Throwable {, +            Subscription s = mock(Subscription.class);, +            final TestObservable obs = new TestObservable(s);, +, +            Iterator<String> it = next(obs).iterator();, +, +            assertTrue(it.hasNext());, +, +            Future<String> next = nextAsync(it);, +            Thread.sleep(100);, +            obs.sendOnNext("one");, +            assertEquals("one", next.get());, +, +            assertTrue(it.hasNext());, +, +            next = nextAsync(it);, +            Thread.sleep(100);, +            obs.sendOnError(new TestException());, +, +            // this should not throw an exception but instead just return false, +            try {, +                assertFalse(it.hasNext());, +            } catch (Exception e) {, +                fail("should not have received exception");, +                e.printStackTrace();, +            }, +        }, +]