[+++ b/src/main/java/rx/internal/operators/OperatorDelayWithSelector.java, +import rx.observers.Subscribers;, +        _child.add(Observable.merge(delayedEmissions).unsafeSubscribe(Subscribers.from(child)));, +++ b/src/main/java/rx/internal/operators/OperatorDelayWithSelector.java, +import rx.observers.Subscribers;, +        _child.add(Observable.merge(delayedEmissions).unsafeSubscribe(Subscribers.from(child)));, +++ b/src/main/java/rx/internal/operators/OperatorMulticast.java, +import rx.observers.Subscribers;, +                subscription = Subscribers.from(subject);, +++ b/src/main/java/rx/internal/operators/OperatorDelayWithSelector.java, +import rx.observers.Subscribers;, +        _child.add(Observable.merge(delayedEmissions).unsafeSubscribe(Subscribers.from(child)));, +++ b/src/main/java/rx/internal/operators/OperatorMulticast.java, +import rx.observers.Subscribers;, +                subscription = Subscribers.from(subject);, +++ b/src/main/java/rx/observers/TestSubscriber.java, +            throw new AssertionError("Multiple errors: " + err.size(), new CompositeException(err));, +            throw new AssertionError("Exceptions differ; expected: " + clazz + ", actual: " + err.get(0), err.get(0));, +            throw new AssertionError("Multiple errors: " + err.size(), new CompositeException(err));, +            throw new AssertionError("Exceptions differ; expected: " + throwable + ", actual: " + err.get(0), err.get(0));, +                throw new AssertionError("Found " + err.size() + " errors and " + s + " completion events instead of none", err.get(0));, +                throw new AssertionError("Found " + err.size() + " errors and " + s + " completion events instead of none", new CompositeException(err));, +++ b/src/main/java/rx/internal/operators/OperatorDelayWithSelector.java, +import rx.observers.Subscribers;, +        _child.add(Observable.merge(delayedEmissions).unsafeSubscribe(Subscribers.from(child)));, +++ b/src/main/java/rx/internal/operators/OperatorMulticast.java, +import rx.observers.Subscribers;, +                subscription = Subscribers.from(subject);, +++ b/src/main/java/rx/observers/TestSubscriber.java, +            throw new AssertionError("Multiple errors: " + err.size(), new CompositeException(err));, +            throw new AssertionError("Exceptions differ; expected: " + clazz + ", actual: " + err.get(0), err.get(0));, +            throw new AssertionError("Multiple errors: " + err.size(), new CompositeException(err));, +            throw new AssertionError("Exceptions differ; expected: " + throwable + ", actual: " + err.get(0), err.get(0));, +                throw new AssertionError("Found " + err.size() + " errors and " + s + " completion events instead of none", err.get(0));, +                throw new AssertionError("Found " + err.size() + " errors and " + s + " completion events instead of none", new CompositeException(err));, +++ b/src/main/java/rx/subjects/ReplaySubject.java, +                        int idx = o.index();]