[+++ b/rxjava-core/src/main/java/rx/Observable.java, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +     * @param <R>, +     *            the type returned for each item of the target observable, +    public static <T, R> Observable<R> scan(Observable<T> sequence, R initialValue, Func2<R, T, R> accumulator) {, +     * @param <R>, +     *            the type returned for each item of the target observable, +    public static <T, R> Observable<R> scan(final Observable<T> sequence, final R initialValue, final Object accumulator) {, +        return scan(sequence, initialValue, new Func2<R, T, R>() {, +            public R call(R r, T t) {, +                return (R) _f.call(r, t);, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +    public <R> Observable<R> scan(R initialValue, Func2<R, T, R> accumulator) {, +    public <R> Observable<R> scan(final R initialValue, final Object accumulator) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +     * @param <R>, +     *            the type returned for each item of the target observable, +    public static <T, R> Observable<R> scan(Observable<T> sequence, R initialValue, Func2<R, T, R> accumulator) {, +     * @param <R>, +     *            the type returned for each item of the target observable, +    public static <T, R> Observable<R> scan(final Observable<T> sequence, final R initialValue, final Object accumulator) {, +        return scan(sequence, initialValue, new Func2<R, T, R>() {, +            public R call(R r, T t) {, +                return (R) _f.call(r, t);, +            @Override, +            @Override, +            @Override, +            @Override, +            @Override, +    public <R> Observable<R> scan(R initialValue, Func2<R, T, R> accumulator) {, +    public <R> Observable<R> scan(final R initialValue, final Object accumulator) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationScan.java, +            Accumulator<T, T> scan = new Accumulator<T, T>(sequence.skip(1), initialValue, accumlatorFunction);, +            observer.onNext(initialValue);, +            , +            Observer<String> observer = mock(Observer.class);, +            Observable<String> m = Observable.create(scan(observable, "", new Func2<String, Integer, String>() {, +                public String call(String s, Integer n) {, +                    return s + n.toString();, +            m.subscribe(observer);, +            verify(observer, never()).onError(any(Exception.class));, +            verify(observer, times(1)).onNext("");, +            verify(observer, times(1)).onNext("1");, +            verify(observer, times(1)).onNext("12");, +            verify(observer, times(1)).onNext("123");, +            verify(observer, times(4)).onNext(anyString());, +            verify(observer, times(1)).onCompleted();]