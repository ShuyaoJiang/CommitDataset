[+++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/observables/AndroidObservable.java, +import rx.functions.Func1;, +    private static final Func1<Activity, Boolean> ACTIVITY_VALIDATOR = new Func1<Activity, Boolean>() {, +        @Override, +        public Boolean call(Activity activity) {, +            return !activity.isFinishing();, +        }, +    };, +, +    private static final Func1<Fragment, Boolean> FRAGMENT_VALIDATOR = new Func1<Fragment, Boolean>() {, +        @Override, +        public Boolean call(Fragment fragment) {, +            return fragment.isAdded();, +        }, +    };, +, +    private static final Func1<android.support.v4.app.Fragment, Boolean> FRAGMENTV4_VALIDATOR =, +            new Func1<android.support.v4.app.Fragment, Boolean>() {, +                @Override, +                public Boolean call(android.support.v4.app.Fragment fragment) {, +                    return fragment.isAdded();, +                }, +            };, +, +    private AndroidObservable() {, +    }, +     * @deprecated Use {@link #bindActivity(android.app.Activity, rx.Observable)} instead, +     * @deprecated Use {@link #bindFragment(Object, rx.Observable)} instead, +    /**, +     * Binds the given source sequence to the life-cycle of an activity., +     * <p/>, +     * This helper will schedule the given sequence to be observed on the main UI thread and ensure, +     * that no notifications will be forwarded to the activity in case it gets destroyed by the Android runtime, +     * or garbage collected by the VM., +     *, +     * @param activity the activity to bind the source sequence to, +     * @param source   the source sequence, +     */, +    public static <T> Observable<T> bindActivity(Activity activity, Observable<T> source) {, +        return source.observeOn(mainThread()).lift(new OperatorWeakBinding<T, Activity>(activity, ACTIVITY_VALIDATOR));, +    /**, +     * Binds the given source sequence to the life-cycle of a fragment (native or support-v4)., +     * <p/>, +     * This helper will schedule the given sequence to be observed on the main UI thread and ensure, +     * that no notifications will be forwarded to the fragment in case it gets detached from its, +     * activity or garbage collected by the VM., +     *, +     * @param fragment the fragment to bind the source sequence to, +     * @param source   the source sequence, +     */, +            return source.lift(new OperatorWeakBinding<T, android.support.v4.app.Fragment>(f, FRAGMENTV4_VALIDATOR));, +            return source.lift(new OperatorWeakBinding<T, Fragment>(f, FRAGMENT_VALIDATOR));, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/observables/AndroidObservable.java, +import rx.functions.Func1;, +    private static final Func1<Activity, Boolean> ACTIVITY_VALIDATOR = new Func1<Activity, Boolean>() {, +        @Override, +        public Boolean call(Activity activity) {, +            return !activity.isFinishing();, +        }, +    };, +, +    private static final Func1<Fragment, Boolean> FRAGMENT_VALIDATOR = new Func1<Fragment, Boolean>() {, +        @Override, +        public Boolean call(Fragment fragment) {, +            return fragment.isAdded();, +        }, +    };, +, +    private static final Func1<android.support.v4.app.Fragment, Boolean> FRAGMENTV4_VALIDATOR =, +            new Func1<android.support.v4.app.Fragment, Boolean>() {, +                @Override, +                public Boolean call(android.support.v4.app.Fragment fragment) {, +                    return fragment.isAdded();, +                }, +            };, +, +    private AndroidObservable() {, +    }, +     * @deprecated Use {@link #bindActivity(android.app.Activity, rx.Observable)} instead, +     * @deprecated Use {@link #bindFragment(Object, rx.Observable)} instead, +    /**, +     * Binds the given source sequence to the life-cycle of an activity., +     * <p/>, +     * This helper will schedule the given sequence to be observed on the main UI thread and ensure, +     * that no notifications will be forwarded to the activity in case it gets destroyed by the Android runtime, +     * or garbage collected by the VM., +     *, +     * @param activity the activity to bind the source sequence to, +     * @param source   the source sequence, +     */, +    public static <T> Observable<T> bindActivity(Activity activity, Observable<T> source) {, +        return source.observeOn(mainThread()).lift(new OperatorWeakBinding<T, Activity>(activity, ACTIVITY_VALIDATOR));, +    /**, +     * Binds the given source sequence to the life-cycle of a fragment (native or support-v4)., +     * <p/>, +     * This helper will schedule the given sequence to be observed on the main UI thread and ensure, +     * that no notifications will be forwarded to the fragment in case it gets detached from its, +     * activity or garbage collected by the VM., +     *, +     * @param fragment the fragment to bind the source sequence to]