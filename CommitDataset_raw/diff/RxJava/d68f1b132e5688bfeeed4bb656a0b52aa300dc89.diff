[+++ b/rxjava-examples/src/main/clojure/rx/examples/clojure/rx_examples.clj, +    (.map #(str % "_transformed")), +++ b/rxjava-examples/src/main/clojure/rx/examples/clojure/rx_examples.clj, +    (.map #(str % "_transformed")), +++ b/rxjava-examples/src/main/groovy/rx/examples/groovy/RxExamples.groovy, +    , +++ b/rxjava-examples/src/main/clojure/rx/examples/clojure/rx_examples.clj, +    (.map #(str % "_transformed")), +++ b/rxjava-examples/src/main/groovy/rx/examples/groovy/RxExamples.groovy, +    , +++ b/rxjava-examples/src/main/groovy/rx/examples/groovy/VideoExample.groovy, +package rx.examples.groovy;, +, +import rx.observables.Observable, +import rx.observables.Observer;, +import rx.observables.Subscription;, +import rx.util.functions.Func1;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.LinkedBlockingQueue;, +import java.util.concurrent.ThreadPoolExecutor;, +import java.util.concurrent.TimeUnit;, +, +class VideoExample {, +, +static void main(String[] args) {, +    VideoExample v = new VideoExample();, +    println("---- sequence of video dictionaries ----"), +    v.getVideoGridForDisplay(1).subscribe(, +        { videoDictionary -> // onNext, +            // this will print the dictionary for each video, +            // and is a good representation of how progressive rendering could work, +            println(videoDictionary) }, , +        { exception -> // onError, +            println("Error: " + exception) }, , +        { // onCompleted, +            v.executor.shutdownNow();, +        });, +    , +    v = new VideoExample();, +    v.getVideoGridForDisplay(1).toList().subscribe(, +        { videoDictionaryList -> // onNext, +            // this will be called once with a list, +            // and demonstrates how a sequence can be combined, +            // for document style responses (most webservices), +            println("\n ---- single list of video dictionaries ----\n" + videoDictionaryList) },, +        { exception -> // onError, +            println("Error: " + exception) },, +        { // onCompleted, +            v.executor.shutdownNow();, +        });, +}, +/**, + * Demonstrate how Rx is used to compose Observables together such as, + * how a web service would to generate a JSON response., + * , + * The simulated methods for the metadata represent different services, + * that are often backed by network calls., + * , + * This will return a sequence of dictionaries such as this:, + * , + *  [id:1000, title:video-1000-title, length:5428, bookmark:0, , + *      rating:[actual:4, average:3, predicted:0]], + */, +def Observable getVideoGridForDisplay(userId) {, +    getListOfLists(userId).mapMany({ VideoList list ->, +        // for each VideoList we want to fetch the videos, +        list.getVideos(), +            .take(10) // we only want the first 10 of each list, +            .mapMany({ Video video -> , +                // for each video we want to fetch metadata, +                def m = video.getMetadata().map({ Map<String, String> md -> , +                    // transform to the data and format we want, +                    return [title: md.get("title"),, +                            length: md.get("duration")], +                }), +                def b = video.getBookmark(userId).map({ position -> , +                    return [bookmark: position], +                }), +                def r = video.getRating(userId).map({ VideoRating rating -> , +                    return [rating: , +                        [actual: rating.getActualStarRating(),, +                         average: rating.getAverageStarRating(),, +                         predicted: rating.getPredictedStarRating()]], +                }), +                // compose these together, +                return Observable.zip(m, b, r, {, +                        metadata, bookmark, rating -> , +                    // now transform to complete dictionary of data, +                    // we want for each Video, +                    return [id: video.videoId] << metadata << bookmark << rating, +                }), +            })   , +    }), +}, +, +/**, + * Retrieve a list of lists of videos (grid)., + * , + * Observable<VideoList> is the "push" equivalent to List<VideoList>, + */]