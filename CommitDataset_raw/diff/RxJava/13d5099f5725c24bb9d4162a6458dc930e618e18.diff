[+++ b/language-adaptors/rxjava-scala/src/examples/java/rx/lang/scala/examples/MovieLibUsage.java, +import static rx.lang.scala.ImplicitFunctionConversions.toScalaObservable;, +++ b/language-adaptors/rxjava-scala/src/examples/java/rx/lang/scala/examples/MovieLibUsage.java, +import static rx.lang.scala.ImplicitFunctionConversions.toScalaObservable;, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import rx.lang.scala.Notification, +import rx.lang.scala.Observable, +import rx.lang.scala.observable, +    val o = Observable(1 to 18), +    // this will be nicer once we have zipWithIndex, +    (for ((o, i) <- Observable(1 to 18).window(5) zip Observable(0 until 4); n <- o), +    yield s"Observable#$i emits $n"), +      .subscribe(output(_)), +    Observable(1 to 10).parallel(work(_)).toBlockingObservable.foreach(println(_)), +    work(Observable(1 to 10)).toBlockingObservable.foreach(println(_)), +    val o2 = Observable(new IOException("Oops")), +    //waitFor(o1), +    //waitFor(o2), +++ b/language-adaptors/rxjava-scala/src/examples/java/rx/lang/scala/examples/MovieLibUsage.java, +import static rx.lang.scala.ImplicitFunctionConversions.toScalaObservable;, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import rx.lang.scala.Notification, +import rx.lang.scala.Observable, +import rx.lang.scala.observable, +    val o = Observable(1 to 18), +    // this will be nicer once we have zipWithIndex, +    (for ((o, i) <- Observable(1 to 18).window(5) zip Observable(0 until 4); n <- o), +    yield s"Observable#$i emits $n"), +      .subscribe(output(_)), +    Observable(1 to 10).parallel(work(_)).toBlockingObservable.foreach(println(_)), +    work(Observable(1 to 10)).toBlockingObservable.foreach(println(_)), +    val o2 = Observable(new IOException("Oops")), +    //waitFor(o1), +    //waitFor(o2), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +import scala.language.implicitConversions, +  import language.implicitConversions, +  implicit def toJavaNotification[T](s: Notification[T]): rx.Notification[_ <: T] = s.asJava, +  implicit def toScalaNotification[T](s: rx.Notification[_ <: T]): Notification[T] = Notification(s), +, +  implicit def toJavaSubscription(s: Subscription): rx.Subscription = s.asJavaSubscription, +  implicit def toScalaSubscription(s: rx.Subscription): Subscription = Subscription(s), +, +  implicit def scalaSchedulerToJavaScheduler(s: Scheduler): rx.Scheduler = s.asJavaScheduler, +  implicit def javaSchedulerToScalaScheduler(s: rx.Scheduler): Scheduler = Scheduler(s), +, +  implicit def toJavaObserver[T](s: Observer[T]): rx.Observer[_ >: T] = s.asJavaObserver, +  implicit def toScalaObserver[T](s: rx.Observer[_ >: T]): Observer[T] = Observer(s), +, +  implicit def toJavaObservable[T](s: Observable[T]): rx.Observable[_ <: T] = s.asJavaObservable, +  implicit def toScalaObservable[T](s: rx.Observable[_ <: T]): Observable[T] = Observable(s), +, +        f(Observer(obs)), +++ b/language-adaptors/rxjava-scala/src/examples/java/rx/lang/scala/examples/MovieLibUsage.java, +import static rx.lang.scala.ImplicitFunctionConversions.toScalaObservable;, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import rx.lang.scala.Notification, +import rx.lang.scala.Observable, +import rx.lang.scala.observable, +    val o = Observable(1 to 18), +    // this will be nicer once we have zipWithIndex, +    (for ((o, i) <- Observable(1 to 18).window(5) zip Observable(0 until 4); n <- o), +    yield s"Observable#$i emits $n"), +      .subscribe(output(_)), +    Observable(1 to 10).parallel(work(_)).toBlockingObservable.foreach(println(_)), +    work(Observable(1 to 10)).toBlockingObservable.foreach(println(_)), +    val o2 = Observable(new IOException("Oops")), +    //waitFor(o1), +    //waitFor(o2), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +import scala.language.implicitConversions, +  import language.implicitConversions, +  implicit def toJavaNotification[T](s: Notification[T]): rx.Notification[_ <: T] = s.asJava, +  implicit def toScalaNotification[T](s: rx.Notification[_ <: T]): Notification[T] = Notification(s), +, +  implicit def toJavaSubscription(s: Subscription): rx.Subscription = s.asJavaSubscription, +  implicit def toScalaSubscription(s: rx.Subscription): Subscription = Subscription(s), +, +  implicit def scalaSchedulerToJavaScheduler(s: Scheduler): rx.Scheduler = s.asJavaScheduler, +  implicit def javaSchedulerToScalaScheduler(s: rx.Scheduler): Scheduler = Scheduler(s), +, +  implicit def toJavaObserver[T](s: Observer[T]): rx.Observer[_ >: T] = s.asJavaObserver, +  implicit def toScalaObserver[T](s: rx.Observer[_ >: T]): Observer[T] = Observer(s), +, +  implicit def toJavaObservable[T](s: Observable[T]): rx.Observable[_ <: T] = s.asJavaObservable, +  implicit def toScalaObservable[T](s: rx.Observable[_ <: T]): Observable[T] = Observable(s), +, +        f(Observer(obs)), +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/examples/java/rx/lang/scala/examples/MovieLibUsage.java, +import static rx.lang.scala.ImplicitFunctionConversions.toScalaObservable;, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import rx.lang.scala.Notification, +import rx.lang.scala.Observable, +import rx.lang.scala.observable, +    val o = Observable(1 to 18), +    // this will be nicer once we have zipWithIndex, +    (for ((o, i) <- Observable(1 to 18).window(5) zip Observable(0 until 4); n <- o), +    yield s"Observable#$i emits $n"), +      .subscribe(output(_))]