[+++ b/CHANGES.md, +++ b/CHANGES.md, +++ b/src/main/java/rx/Observable.java, +     * termination if <code>disposeEagerly</code> is set to true and unsubscription does not occur before termination. Otherwise, +     * resource disposal will occur on unsubscription.  Eager disposal is particularly appropriate for a synchronous observable, +     * that resuses resources. <code>disposeAction</code> will only be called once per subscription., +     *            if true then disposal will happen either on unsubscription or just before emission of , +     *            a terminal event (onComplete or onError)., +     * @param onDrop the action to invoke for each item dropped. onDrop action should be fast and should never block., +     * @return the source Observable modified to drop {@code onNext} notifications on overflow, +     * @see <a href="http://reactivex.io/documentation/operators/backpressure.html">ReactiveX operators documentation: backpressure operators</a>, +     */, +    public final Observable<T> onBackpressureDrop(Action1<? super T> onDrop) {, +        return lift(new OperatorOnBackpressureDrop<T>(onDrop));, +    }, +, +    /**, +     * Instructs an Observable that is emitting items faster than its observer can consume them to discard,, +     * rather than emit, those items that its observer is not prepared to observe., +     * <p>, +     * <img width="640" height="245" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/bp.obp.drop.png" alt="">, +     * <p>, +     * If the downstream request count hits 0 then the Observable will refrain from calling {@code onNext} until, +     * the observer invokes {@code request(n)} again to increase the request count., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code onBackpressureDrop} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * Merges the specified observable sequence into this Observable sequence by using the resultSelector , +     * function only when the source observable sequence (this instance) produces an element., +     * <code><pre>, +     * ----A-------B------C----->  o1, +     * --0----1-2----3-4-------->  o2, +     *, +     *     |       |      |, +     *     V       V      V, +     *, +     *   (A,0)   (B,2)  (C,4), +     * </pre></code>, +     * @param other the other observable sequence, +     * @param resultSelector the function to call when this Observable emits an element and the other, +     *            observable sequence has already emitted a value., +     * @return an Observable that merges the specified observable sequence into this Observable sequence , +     *            by using the resultSelector function only when the source observable sequence , +     *            (this instance) produces an element, +++ b/CHANGES.md, +++ b/src/main/java/rx/Observable.java, +     * termination if <code>disposeEagerly</code> is set to true and unsubscription does not occur before termination. Otherwise, +     * resource disposal will occur on unsubscription.  Eager disposal is particularly appropriate for a synchronous observable, +     * that resuses resources. <code>disposeAction</code> will only be called once per subscription., +     *            if true then disposal will happen either on unsubscription or just before emission of , +     *            a terminal event (onComplete or onError)., +     * @param onDrop the action to invoke for each item dropped. onDrop action should be fast and should never block., +     * @return the source Observable modified to drop {@code onNext} notifications on overflow, +     * @see <a href="http://reactivex.io/documentation/operators/backpressure.html">ReactiveX operators documentation: backpressure operators</a>, +     */, +    public final Observable<T> onBackpressureDrop(Action1<? super T> onDrop) {, +        return lift(new OperatorOnBackpressureDrop<T>(onDrop));, +    }, +, +    /**, +     * Instructs an Observable that is emitting items faster than its observer can consume them to discard,, +     * rather than emit, those items that its observer is not prepared to observe., +     * <p>, +     * <img width="640" height="245" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/bp.obp.drop.png" alt="">, +     * <p>, +     * If the downstream request count hits 0 then the Observable will refrain from calling {@code onNext} until, +     * the observer invokes {@code request(n)} again to increase the request count., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code onBackpressureDrop} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * Merges the specified observable sequence into this Observable sequence by using the resultSelector , +     * function only when the source observable sequence (this instance) produces an element., +     * <code><pre>, +     * ----A-------B------C----->  o1, +     * --0----1-2----3-4-------->  o2, +     *, +     *     |       |      |, +     *     V       V      V, +     *, +     *   (A,0)   (B,2)  (C,4), +     * </pre></code>, +     * @param other the other observable sequence, +     * @param resultSelector the function to call when this Observable emits an element and the other, +     *            observable sequence has already emitted a value., +     * @return an Observable that merges the specified observable sequence into this Observable sequence , +     *            by using the resultSelector function only when the source observable sequence , +     *            (this instance) produces an element, +++ b/src/main/java/rx/internal/operators/OnSubscribeCombineLatest.java, +            requested.getAndAdd(n);, +++ b/CHANGES.md, +++ b/src/main/java/rx/Observable.java, +     * termination if <code>disposeEagerly</code> is set to true and unsubscription does not occur before termination. Otherwise, +     * resource disposal will occur on unsubscription.  Eager disposal is particularly appropriate for a synchronous observable, +     * that resuses resources. <code>disposeAction</code> will only be called once per subscription., +     *            if true then disposal will happen either on unsubscription or just before emission of , +     *            a terminal event (onComplete or onError).]