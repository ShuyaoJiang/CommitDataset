[+++ b/src/main/java/io/reactivex/subjects/CompletableSubject.java, +/**, + * Copyright 2016 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.subjects;, +, +import java.util.concurrent.atomic.*;, +, +import io.reactivex.*;, +import io.reactivex.annotations.*;, +import io.reactivex.disposables.Disposable;, +import io.reactivex.plugins.RxJavaPlugins;, +, +/**, + * Represents a hot Completable-like source and consumer of events similar to Subjects., + * <p>, + * All methods are thread safe. Calling onComplete multiple, + * times has no effect. Calling onError multiple times relays the Throwable to, + * the RxJavaPlugins' error handler., + * <p>, + * The CompletableSubject doesn't store the Disposables coming through onSubscribe but, + * disposes them once the other onXXX methods were called (terminal state reached)., + * @since 2.0.5 - experimental, + */, +@Experimental, +public final class CompletableSubject extends Completable implements CompletableObserver {, +, +    final AtomicReference<CompletableDisposable[]> observers;, +, +    static final CompletableDisposable[] EMPTY = new CompletableDisposable[0];, +, +    static final CompletableDisposable[] TERMINATED = new CompletableDisposable[0];, +, +    final AtomicBoolean once;, +    Throwable error;, +, +    /**, +     * Creates a fresh CompletableSubject., +     * @return the new CompletableSubject instance, +     */, +    @CheckReturnValue, +    public static CompletableSubject create() {, +        return new CompletableSubject();, +    }, +, +    CompletableSubject() {, +        once = new AtomicBoolean();, +        observers = new AtomicReference<CompletableDisposable[]>(EMPTY);, +    }, +, +    @Override, +    public void onSubscribe(Disposable d) {, +        if (observers.get() == TERMINATED) {, +            d.dispose();, +        }, +    }, +, +    @Override, +    public void onError(Throwable e) {, +        if (e == null) {, +            e = new NullPointerException("Null errors are not allowed in 2.x");, +        }, +        if (once.compareAndSet(false, true)) {, +            this.error = e;, +            for (CompletableDisposable md : observers.getAndSet(TERMINATED)) {, +                md.actual.onError(e);, +            }, +        } else {, +            RxJavaPlugins.onError(e);, +        }, +    }, +, +    @Override, +    public void onComplete() {, +        if (once.compareAndSet(false, true)) {, +            for (CompletableDisposable md : observers.getAndSet(TERMINATED)) {, +                md.actual.onComplete();, +            }, +        }, +    }, +, +    @Override, +    protected void subscribeActual(CompletableObserver observer) {, +        CompletableDisposable md = new CompletableDisposable(observer, this);, +        observer.onSubscribe(md);, +        if (add(md)) {, +            if (md.isDisposed()) {, +                remove(md);, +            }, +        } else {]