[+++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/schedulers/HandlerThreadScheduler.java, +import rx.internal.schedulers.ScheduledAction;, +import rx.subscriptions.CompositeSubscription;, +, +        private final CompositeSubscription compositeSubscription = new CompositeSubscription();, +            compositeSubscription.unsubscribe();, +            return compositeSubscription.isUnsubscribed();, +            final ScheduledAction scheduledAction = new ScheduledAction(action);, +            scheduledAction.add(Subscriptions.create(new Action0() {, +                    handler.removeCallbacks(scheduledAction);, +            }));, +            scheduledAction.addParent(compositeSubscription);, +            compositeSubscription.add(scheduledAction);, +            handler.postDelayed(scheduledAction, unit.toMillis(delayTime));, +, +            return scheduledAction;, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/schedulers/HandlerThreadScheduler.java, +import rx.internal.schedulers.ScheduledAction;, +import rx.subscriptions.CompositeSubscription;, +, +        private final CompositeSubscription compositeSubscription = new CompositeSubscription();, +            compositeSubscription.unsubscribe();, +            return compositeSubscription.isUnsubscribed();, +            final ScheduledAction scheduledAction = new ScheduledAction(action);, +            scheduledAction.add(Subscriptions.create(new Action0() {, +                    handler.removeCallbacks(scheduledAction);, +            }));, +            scheduledAction.addParent(compositeSubscription);, +            compositeSubscription.add(scheduledAction);, +            handler.postDelayed(scheduledAction, unit.toMillis(delayTime));, +, +            return scheduledAction;, +++ b/rxjava-contrib/rxjava-android/src/test/java/rx/android/schedulers/HandlerThreadSchedulerTest.java, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.spy;, +import static org.mockito.Mockito.when;, +import org.mockito.Matchers;, +import org.robolectric.Robolectric;, +import rx.Observable;, +import rx.Subscriber;, +import rx.Subscription;, +, +    @Test, +    public void shouldRemoveCallbacksFromHandlerWhenUnsubscribedSubscription() {, +        final Handler handler = spy(new Handler());, +        final Observable.OnSubscribe<Integer> onSubscribe = mock(Observable.OnSubscribe.class);, +        final Subscription subscription = Observable.create(onSubscribe).subscribeOn(, +                new HandlerThreadScheduler(handler)).subscribe();, +, +        verify(onSubscribe).call(Matchers.any(Subscriber.class));, +, +        subscription.unsubscribe();, +, +        verify(handler).removeCallbacks(Matchers.any(Runnable.class));, +    }, +, +    @Test, +    public void shouldNotCallOnSubscribeWhenSubscriptionUnsubscribedBeforeDelay() {, +        final Observable.OnSubscribe<Integer> onSubscribe = mock(Observable.OnSubscribe.class);, +        final Handler handler = spy(new Handler());, +, +        final Scheduler scheduler = new HandlerThreadScheduler(handler);, +        final Worker worker = spy(scheduler.createWorker());, +, +        final Scheduler spyScheduler = spy(scheduler);, +        when(spyScheduler.createWorker()).thenReturn(worker);, +, +        final Subscription subscription = Observable.create(onSubscribe), +                .delaySubscription(1, TimeUnit.MINUTES, spyScheduler), +                .subscribe();, +, +        verify(worker).schedule(Matchers.any(Action0.class),, +                Matchers.eq(1L), Matchers.eq(TimeUnit.MINUTES));, +        verify(handler).postDelayed(Matchers.any(Runnable.class),, +                Matchers.eq(TimeUnit.MINUTES.toMillis(1L)));, +, +        subscription.unsubscribe();, +, +        Robolectric.runUiThreadTasksIncludingDelayedTasks();, +, +        verify(onSubscribe, never()).call(Matchers.any(Subscriber.class));, +        verify(handler).removeCallbacks(Matchers.any(Runnable.class));, +    }, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/schedulers/HandlerThreadScheduler.java, +import rx.internal.schedulers.ScheduledAction;, +import rx.subscriptions.CompositeSubscription;, +, +        private final CompositeSubscription compositeSubscription = new CompositeSubscription();, +            compositeSubscription.unsubscribe();, +            return compositeSubscription.isUnsubscribed();, +            final ScheduledAction scheduledAction = new ScheduledAction(action);, +            scheduledAction.add(Subscriptions.create(new Action0() {, +                    handler.removeCallbacks(scheduledAction);, +            }));, +            scheduledAction.addParent(compositeSubscription);, +            compositeSubscription.add(scheduledAction);, +            handler.postDelayed(scheduledAction, unit.toMillis(delayTime));, +, +            return scheduledAction;, +++ b/rxjava-contrib/rxjava-android/src/test/java/rx/android/schedulers/HandlerThreadSchedulerTest.java]