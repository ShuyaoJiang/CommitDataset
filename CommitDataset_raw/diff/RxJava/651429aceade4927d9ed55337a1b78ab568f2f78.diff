[+++ b/src/main/java/rx/Observable.java, +        return delaySubscription(subscriptionDelay).lift(new OperatorDelayWithSelector<T, V>(this, itemDelay));, +        return lift(new OperatorDelayWithSelector<T, U>(this, itemDelay));, +        return lift(new OperatorDelay<T>(this, delay, unit, scheduler));, +     * Returns an Observable that delays the subscription to the source Observable by a given amount of time., +     * <p>, +     * <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/delaySubscription.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>This version of {@code delay} operates by default on the {@code compuation} {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @param delay, +     *            the time to delay the subscription, +     * @param unit, +     *            the time unit of {@code delay}, +     * @return an Observable that delays the subscription to the source Observable by the given amount, +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators#delaysubscription">RxJava wiki: delaySubscription</a>, +     */, +    public final <U> Observable<T> delaySubscription(Func0<? extends Observable<U>> subscriptionDelay) {, +        return create(new OnSubscribeDelaySubscriptionWithSelector<T, U>(this, subscriptionDelay));, +    }, +, +    /**, +++ b/src/main/java/rx/Observable.java, +        return delaySubscription(subscriptionDelay).lift(new OperatorDelayWithSelector<T, V>(this, itemDelay));, +        return lift(new OperatorDelayWithSelector<T, U>(this, itemDelay));, +        return lift(new OperatorDelay<T>(this, delay, unit, scheduler));, +     * Returns an Observable that delays the subscription to the source Observable by a given amount of time., +     * <p>, +     * <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/delaySubscription.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>This version of {@code delay} operates by default on the {@code compuation} {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @param delay, +     *            the time to delay the subscription, +     * @param unit, +     *            the time unit of {@code delay}, +     * @return an Observable that delays the subscription to the source Observable by the given amount, +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators#delaysubscription">RxJava wiki: delaySubscription</a>, +     */, +    public final <U> Observable<T> delaySubscription(Func0<? extends Observable<U>> subscriptionDelay) {, +        return create(new OnSubscribeDelaySubscriptionWithSelector<T, U>(this, subscriptionDelay));, +    }, +, +    /**, +++ /dev/null, +++ b/src/main/java/rx/Observable.java, +        return delaySubscription(subscriptionDelay).lift(new OperatorDelayWithSelector<T, V>(this, itemDelay));, +        return lift(new OperatorDelayWithSelector<T, U>(this, itemDelay));, +        return lift(new OperatorDelay<T>(this, delay, unit, scheduler));, +     * Returns an Observable that delays the subscription to the source Observable by a given amount of time., +     * <p>, +     * <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/delaySubscription.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>This version of {@code delay} operates by default on the {@code compuation} {@link Scheduler}.</dd>, +     * </dl>, +     * , +     * @param delay, +     *            the time to delay the subscription, +     * @param unit, +     *            the time unit of {@code delay}, +     * @return an Observable that delays the subscription to the source Observable by the given amount, +     * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Observable-Utility-Operators#delaysubscription">RxJava wiki: delaySubscription</a>, +     */, +    public final <U> Observable<T> delaySubscription(Func0<? extends Observable<U>> subscriptionDelay) {, +        return create(new OnSubscribeDelaySubscriptionWithSelector<T, U>(this, subscriptionDelay));, +    }, +, +    /**, +++ /dev/null, +++ b/src/main/java/rx/internal/operators/OnSubscribeDelaySubscriptionWithSelector.java, +/**, + * Copyright 2014 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not, + * use this file except in compliance with the License. You may obtain a copy of, + * the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations under, + * the License., + */, +package rx.internal.operators;, +, +import rx.Observable;, +import rx.Observable.OnSubscribe;, +import rx.Subscriber;, +import rx.functions.Func0;, +, +/**, + * Delays the subscription until the Observable<U> emits an event., + * ]