[+++ b/rxjava-core/src/main/java/rx/operators/OperationReplay.java, +import rx.Observable.OnSubscribeFunc;, +import rx.subscriptions.Subscriptions;, +        final Observable<T> observedOn = subject.observeOn(scheduler);, +        SubjectWrapper<T> s = new SubjectWrapper<T>(new Action1<Operator<? super T>>() {, +, +            @Override, +            public void call(Operator<? super T> o) {, +                // TODO HACK between OnSubscribeFunc and Action1, +                subscriberOf(observedOn).onSubscribe(o);, +            }, +, +        }, subject);, +                new CustomReplaySubjectSubscribeFunc<Timestamped<T>, T>(state), state, timestamp, +                );, +    public static <T> OnSubscribeFunc<T> subscriberOf(final Observable<T> target) {, +        return new OnSubscribeFunc<T>() {, +            public Subscription onSubscribe(Observer<? super T> t1) {, +                return target.subscribe(t1);, +                final Observable.OnSubscribeFunc<TResult> onSubscribe,, +            super(new Action1<Operator<? super TResult>>() {, +, +                @Override, +                public void call(Operator<? super TResult> o) {, +                    //TODO hack from OnSubscribeFunc to Action0, +                    onSubscribe.onSubscribe(o);, +                }, +            });, +            implements Observable.OnSubscribeFunc<TResult> {, +        public Subscription onSubscribe(Observer<? super TResult> t1) {, +                    return state.addReplayer(t1);, +                    t1.onNext(state.resultSelector.call(values.get(i)));, +                    t1.onError(t);, +                    return Subscriptions.empty();, +                t1.onError(error);, +                t1.onCompleted();, +            return Subscriptions.empty();]