[+++ b/CHANGES.md, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.20.0-RC3-SNAPSHOT, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.20.0-RC3-SNAPSHOT, +++ b/rxjava-core/src/test/java/rx/internal/util/RxRingBufferWithoutUnsafeTest.java, +    @Test, +        final CountDownLatch emitLatch = new CountDownLatch(255);, +        final CountDownLatch drainLatch = new CountDownLatch(2);, +                //                System.out.println("request[" + c.incrementAndGet() + "]: " + n + "  Thread: " + Thread.currentThread());, +                        if (emitLatch.getCount() == 0) {, +                                emit.incrementAndGet();, +                        emitLatch.countDown();, +        Action0 drainer = new Action0() {, +                            if (emitLatch.getCount() == 0) {, +                                // this works with SynchronizedQueue, if changing to a non-blocking Queue, +                                // then this will likely need to change like the SpmcTest version, +                                drainLatch.countDown();, +                                return;, +            }, +        };, +, +        w2.schedule(drainer);, +        w3.schedule(drainer);, +, +        emitLatch.await();, +        drainLatch.await();, +, +        w1.unsubscribe(); // put this one last as unsubscribing from it can cause Exceptions to be throw in w2/w3, +++ b/CHANGES.md, +++ b/gradle.properties, +version=0.20.0-RC3-SNAPSHOT, +++ b/rxjava-core/src/test/java/rx/internal/util/RxRingBufferWithoutUnsafeTest.java, +    @Test, +        final CountDownLatch emitLatch = new CountDownLatch(255);, +        final CountDownLatch drainLatch = new CountDownLatch(2);, +                //                System.out.println("request[" + c.incrementAndGet() + "]: " + n + "  Thread: " + Thread.currentThread());, +                        if (emitLatch.getCount() == 0) {, +                                emit.incrementAndGet();, +                        emitLatch.countDown();, +        Action0 drainer = new Action0() {, +                            if (emitLatch.getCount() == 0) {, +                                // this works with SynchronizedQueue, if changing to a non-blocking Queue, +                                // then this will likely need to change like the SpmcTest version, +                                drainLatch.countDown();, +                                return;, +            }, +        };, +, +        w2.schedule(drainer);, +        w3.schedule(drainer);, +, +        emitLatch.await();, +        drainLatch.await();, +, +        w1.unsubscribe(); // put this one last as unsubscribing from it can cause Exceptions to be throw in w2/w3, +++ b/settings.gradle]