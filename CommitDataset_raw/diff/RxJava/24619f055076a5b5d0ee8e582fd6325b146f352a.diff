[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationAmb;, +     * Propagates the observable sequence that reacts first., +     *, +     * @param sources, +     *            observable sources competing to react first., +     *, +     * @return, +     *            an observable sequence that surfaces any of the given sequences, whichever reacted first., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229733(v=vs.103).aspx">MSDN: Observable.Amb</a>, +     */, +    public static <T> Observable<T> amb(Observable<? extends T>... sources) {, +        return create(OperationAmb.amb(sources));, +    }, +, +    /**, +     * Propagates the observable sequence that reacts first., +     *, +     * @param sources, +     *            observable sources competing to react first., +     *, +     * @return, +     *            an observable sequence that surfaces any of the given sequences, whichever reacted first., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229115(v=vs.103).aspx">MSDN: Observable.Amb</a>, +     */, +    public static <T> Observable<T> amb(Iterable<? extends Observable<? extends T>> sources) {, +        return create(OperationAmb.amb(sources));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationAmb;, +     * Propagates the observable sequence that reacts first., +     *, +     * @param sources, +     *            observable sources competing to react first., +     *, +     * @return, +     *            an observable sequence that surfaces any of the given sequences, whichever reacted first., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229733(v=vs.103).aspx">MSDN: Observable.Amb</a>, +     */, +    public static <T> Observable<T> amb(Observable<? extends T>... sources) {, +        return create(OperationAmb.amb(sources));, +    }, +, +    /**, +     * Propagates the observable sequence that reacts first., +     *, +     * @param sources, +     *            observable sources competing to react first., +     *, +     * @return, +     *            an observable sequence that surfaces any of the given sequences, whichever reacted first., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229115(v=vs.103).aspx">MSDN: Observable.Amb</a>, +     */, +    public static <T> Observable<T> amb(Iterable<? extends Observable<? extends T>> sources) {, +        return create(OperationAmb.amb(sources));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationAmb.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicInteger;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.InOrder;, +, +import rx.Observable;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observer;, +import rx.Subscription;, +import rx.concurrency.TestScheduler;, +import rx.subscriptions.CompositeSubscription;, +import rx.util.functions.Action0;, +, +/**]