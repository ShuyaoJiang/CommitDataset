[+++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +import java.util.concurrent.atomic.AtomicBoolean;, +    private final AtomicBoolean hasValue = new AtomicBoolean();, +            if (hasValue.get()) {, +        hasValue.set(true);, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +import java.util.concurrent.atomic.AtomicBoolean;, +    private final AtomicBoolean hasValue = new AtomicBoolean();, +            if (hasValue.get()) {, +        hasValue.set(true);, +++ b/rxjava-core/src/test/java/rx/subjects/AsyncSubjectTest.java, +import org.mockito.InOrder;, +, +        verify(aObserver, Mockito.never()).onNext(anyString());, +        verify(aObserver, Mockito.never()).onError(any(Throwable.class));, +        verify(aObserver, Mockito.never()).onCompleted();, +, +    @Test, +    public void testEmptySubjectCompleted() {, +        AsyncSubject<String> subject = AsyncSubject.create();, +, +        @SuppressWarnings("unchecked"), +        Observer<String> aObserver = mock(Observer.class);, +        subject.subscribe(aObserver);, +, +        subject.onCompleted();, +, +        InOrder inOrder = inOrder(aObserver);, +        inOrder.verify(aObserver, never()).onNext(null);, +        inOrder.verify(aObserver, never()).onNext(any(String.class));, +        inOrder.verify(aObserver, times(1)).onCompleted();, +        inOrder.verifyNoMoreInteractions();, +    }]