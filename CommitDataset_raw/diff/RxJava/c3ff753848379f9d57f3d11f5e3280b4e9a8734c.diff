[+++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +    @Test, +    public void testDefer() {, +        def obs = Observable.toObservable(1, 2), +        Observable.defer({-> obs }).subscribe({ result -> a.received(result)}), +        verify(a, times(1)).received(1);, +        verify(a, times(1)).received(2);, +, +    }, +, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +    @Test, +    public void testDefer() {, +        def obs = Observable.toObservable(1, 2), +        Observable.defer({-> obs }).subscribe({ result -> a.received(result)}), +        verify(a, times(1)).received(1);, +        verify(a, times(1)).received(2);, +, +    }, +, +++ /dev/null, +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +    @Test, +    public void testDefer() {, +        def obs = Observable.toObservable(1, 2), +        Observable.defer({-> obs }).subscribe({ result -> a.received(result)}), +        verify(a, times(1)).received(1);, +        verify(a, times(1)).received(2);, +, +    }, +, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.util.functions.*;, +     * Returns an observable sequence that invokes the observable factory whenever a new observer subscribes., +     * The Defer operator allows you to defer or delay the creation of the sequence until the time when an observer, +     * subscribes to the sequence. This is useful to allow an observer to easily obtain an updates or refreshed version, +     * of the sequence., +     *, +     * @param observableFactory the observable factory function to invoke for each observer that subscribes to the resulting sequence., +     * @param <T> the type of the observable., +     * @return the observable sequence whose observers trigger an invocation of the given observable factory function., +     */, +    public static <T> Observable<T> defer(Func0<Observable<T>> observableFactory) {, +        return _create(OperationDefer.defer(observableFactory));, +    }, +, +    /**, +     * Returns an observable sequence that invokes the observable factory whenever a new observer subscribes., +     * The Defer operator allows you to defer or delay the creation of the sequence until the time when an observer, +     * subscribes to the sequence. This is useful to allow an observer to easily obtain an updates or refreshed version, +     * of the sequence., +     *, +     * @param observableFactory the observable factory function to invoke for each observer that subscribes to the resulting sequence., +     * @param <T> the type of the observable., +     * @return the observable sequence whose observers trigger an invocation of the given observable factory function., +     */, +    public static <T> Observable<T> defer(Object observableFactory) {, +        @SuppressWarnings("rawtypes"), +        final FuncN _f = Functions.from(observableFactory);, +, +        return _create(OperationDefer.defer(new Func0<Observable<T>>() {, +, +            @Override, +            @SuppressWarnings("unchecked"), +            public Observable<T> call() {, +                return (Observable<T>) _f.call();, +            }, +, +        }));, +    }, +, +    /**, +     * Dematerializes the explicit notification values of an observable sequence as implicit notifications., +     *, +     * @param sequence, +     *            An observable sequence containing explicit notification values which have to be turned into implicit notifications., +     * @return An observable sequence exhibiting the behavior corresponding to the source sequence's notification values., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229047(v=vs.103).aspx">MSDN: Observable.Dematerialize</a>, +     */, +    public static <T> Observable<T> dematerialize(final Observable<Notification<T>> sequence) {, +        return _create(OperationDematerialize.dematerialize(sequence));, +    }, +, +    /**, +     * Returns the values from the source observable sequence until the other observable sequence produces a value., +     *, +     * @param source the source sequence to propagate elements for., +     * @param other  the observable sequence that terminates propagation of elements of the source sequence., +     * @param <T>    the type of source., +     * @param <E>    the other type., +     * @return An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation., +     */, +    public static <T, E> Observable<T> takeUntil(final Observable<T> source, final Observable<E> other) {, +        return OperatorTakeUntil.takeUntil(source, other);, +    }, +, +, +    /**, +                return getIterator(that);]