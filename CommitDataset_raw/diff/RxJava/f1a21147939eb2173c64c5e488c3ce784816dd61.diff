[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @throws IllegalArgumentException, +     *             if Observable sequence is empty., +        /*, +         * Discussion and confirmation of implementation at https://github.com/Netflix/RxJava/issues/423#issuecomment-27642532, +         * , +         * It should use last() not takeLast(1) since it needs to emit an error if the sequence is empty., +         */, +        return create(OperationScan.scan(this, accumulator)).last();, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @throws IllegalArgumentException, +     *             if Observable sequence is empty., +        /*, +         * Discussion and confirmation of implementation at https://github.com/Netflix/RxJava/issues/423#issuecomment-27642532, +         * , +         * It should use last() not takeLast(1) since it needs to emit an error if the sequence is empty., +         */, +        return create(OperationScan.scan(this, accumulator)).last();, +++ b/rxjava-core/src/test/java/rx/ObservableTests.java, +import rx.util.functions.Action0;, +    , +    /**, +     * A reduce should fail with an IllegalArgumentException if done on an empty Observable., +     */, +    @Test(expected = IllegalArgumentException.class), +    public void testReduceWithEmptyObservable() {, +        Observable<Integer> observable = Observable.range(1, 0);, +        observable.reduce(new Func2<Integer, Integer, Integer>() {, +, +            @Override, +            public Integer call(Integer t1, Integer t2) {, +                return t1 + t2;, +            }, +, +        }).toBlockingObservable().forEach(new Action1<Integer>() {, +, +            @Override, +            public void call(Integer t1) {, +                // do nothing ... we expect an exception instead, +            }, +        });, +, +        fail("Expected an exception to be thrown");, +    }, +    ]