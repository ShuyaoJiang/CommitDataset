[+++ b/language-adaptors/rxjava-scala/README.md, +Observable(1, 2, 3, 4).reduce(_ + _), +val first = Observable(10, 11, 12), +val second = Observable(10, 11, 12), +++ b/language-adaptors/rxjava-scala/README.md, +Observable(1, 2, 3, 4).reduce(_ + _), +val first = Observable(10, 11, 12), +val second = Observable(10, 11, 12), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/README.md, +Observable(1, 2, 3, 4).reduce(_ + _), +val first = Observable(10, 11, 12), +val second = Observable(10, 11, 12), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * @tparam T, +++ b/language-adaptors/rxjava-scala/README.md, +Observable(1, 2, 3, 4).reduce(_ + _), +val first = Observable(10, 11, 12), +val second = Observable(10, 11, 12), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * @tparam T, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        return just(t1);, +     * This is an alias for {@link #publish()}.{@link ConnectableObservable#refCount()}., +            return hook.onSubscribeReturn(subscriber);, +++ b/language-adaptors/rxjava-scala/README.md, +Observable(1, 2, 3, 4).reduce(_ + _), +val first = Observable(10, 11, 12), +val second = Observable(10, 11, 12), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * @tparam T, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        return just(t1);, +     * This is an alias for {@link #publish()}.{@link ConnectableObservable#refCount()}., +            return hook.onSubscribeReturn(subscriber);, +++ b/rxjava-core/src/main/java/rx/observers/SafeSubscriber.java, +import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;, +    /** Terminal state indication if not zero. */, +    volatile int done;, +    @SuppressWarnings("rawtypes"), +    static final AtomicIntegerFieldUpdater<SafeSubscriber> DONE_UPDATER, +            = AtomicIntegerFieldUpdater.newUpdater(SafeSubscriber.class, "done");, +        if (DONE_UPDATER.getAndSet(this, 1) == 0) {, +        if (DONE_UPDATER.getAndSet(this, 1) == 0) {, +            if (done == 0) {, +++ b/language-adaptors/rxjava-scala/README.md, +Observable(1, 2, 3, 4).reduce(_ + _), +val first = Observable(10, 11, 12), +val second = Observable(10, 11, 12), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * @tparam T, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        return just(t1);, +     * This is an alias for {@link #publish()}.{@link ConnectableObservable#refCount()}., +            return hook.onSubscribeReturn(subscriber);, +++ b/rxjava-core/src/main/java/rx/observers/SafeSubscriber.java, +import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;, +    /** Terminal state indication if not zero. */, +    volatile int done;, +    @SuppressWarnings("rawtypes"), +    static final AtomicIntegerFieldUpdater<SafeSubscriber> DONE_UPDATER, +            = AtomicIntegerFieldUpdater.newUpdater(SafeSubscriber.class, "done");, +        if (DONE_UPDATER.getAndSet(this, 1) == 0) {, +        if (DONE_UPDATER.getAndSet(this, 1) == 0) {, +            if (done == 0) {, +++ b/rxjava-core/src/main/java/rx/operators/BlockingOperatorLatest.java, +import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;, +        volatile Notification<? extends T> value;, +        /** Updater for the value field. */, +        @SuppressWarnings("rawtypes"), +        static final AtomicReferenceFieldUpdater<LatestObserverIterator, Notification> REFERENCE_UPDATER, +                = AtomicReferenceFieldUpdater.newUpdater(LatestObserverIterator.class, Notification.class, "value");, +            boolean wasntAvailable = REFERENCE_UPDATER.getAndSet(this, args) == null;, +                    @SuppressWarnings("unchecked"), +                    Notification<? extends T> n = (Notification<? extends T>)REFERENCE_UPDATER.getAndSet(this, null);, +                    iNotif = n;, +++ b/language-adaptors/rxjava-scala/README.md, +Observable(1, 2, 3, 4).reduce(_ + _), +val first = Observable(10, 11, 12), +val second = Observable(10, 11, 12), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * @tparam T, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        return just(t1);, +     * This is an alias for {@link #publish()}.{@link ConnectableObservable#refCount()}., +            return hook.onSubscribeReturn(subscriber);, +++ b/rxjava-core/src/main/java/rx/observers/SafeSubscriber.java, +import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;, +    /** Terminal state indication if not zero. */, +    volatile int done;, +    @SuppressWarnings("rawtypes"), +    static final AtomicIntegerFieldUpdater<SafeSubscriber> DONE_UPDATER, +            = AtomicIntegerFieldUpdater.newUpdater(SafeSubscriber.class, "done");, +        if (DONE_UPDATER.getAndSet(this, 1) == 0) {, +        if (DONE_UPDATER.getAndSet(this, 1) == 0) {]