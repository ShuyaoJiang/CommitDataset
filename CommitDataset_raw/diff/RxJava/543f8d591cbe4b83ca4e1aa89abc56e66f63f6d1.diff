[+++ b/rxjava-contrib/rxjava-quasar/build.gradle, +    compile 'co.paralleluniverse:quasar-core:0.5.0', +    quasar  'co.paralleluniverse:quasar-core:0.5.0', +++ b/rxjava-contrib/rxjava-quasar/build.gradle, +    compile 'co.paralleluniverse:quasar-core:0.5.0', +    quasar  'co.paralleluniverse:quasar-core:0.5.0', +++ b/rxjava-contrib/rxjava-quasar/src/main/java/rx/quasar/ChannelObservable.java, +    private static class AsyncObservable<T> extends FiberAsync<T, Void, ExecutionException> implements Observer<T> {, +        protected Void requestAsync() {, +            return null;, +++ b/rxjava-contrib/rxjava-quasar/build.gradle, +    compile 'co.paralleluniverse:quasar-core:0.5.0', +    quasar  'co.paralleluniverse:quasar-core:0.5.0', +++ b/rxjava-contrib/rxjava-quasar/src/main/java/rx/quasar/ChannelObservable.java, +    private static class AsyncObservable<T> extends FiberAsync<T, Void, ExecutionException> implements Observer<T> {, +        protected Void requestAsync() {, +            return null;, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        return OnSubscribeRedo.<T>repeat(this);, +        return OnSubscribeRedo.<T>repeat(this, scheduler);, +    public final Observable<T> repeat(final long count) {, +        return OnSubscribeRedo.<T>repeat(this, count);, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#wiki-repeat">RxJava Wiki: repeat()</a>, +    public final Observable<T> repeat(final long count, Scheduler scheduler) {, +        return OnSubscribeRedo.<T>repeat(this, count, scheduler);, +    }, +, +    /**, +     * Returns an Observable that emits the same values as the source observable with the exception of an {@code onCompleted}., +     * An onCompleted will emit a {@link Notification} to the observable provided as an argument to the notificationHandler , +     * func. If the observable returned {@code onCompletes} or {@code onErrors} then repeat will call {@code onCompleted} , +     * or {@code onError} on the child subscription. Otherwise, this observable will resubscribe to the source observable, on a particular Scheduler., +     * <p>, +     * <img width="640" height="430" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/repeatWhen.f.png" alt="">, +     * , +     * @param notificationHandler, +     *            recieves an Observable of notifications with which a user can complete or error, aborting the repeat. , +     * @param scheduler, +     *            the {@link Scheduler} to emit the items on, +     * @return the source Observable modified with repeat logic, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#wiki-repeat">RxJava Wiki: repeatWhen()</a>, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229428.aspx">MSDN: Observable.Repeat</a>, +     */, +    public final Observable<T> repeatWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<? extends Notification<?>>> notificationHandler, Scheduler scheduler) {, +        return OnSubscribeRedo.repeat(this, notificationHandler, scheduler);, +    }, +, +    /**, +     * Returns an Observable that emits the same values as the source observable with the exception of an {@code onCompleted}., +     * An onCompleted will emit a {@link Notification} to the observable provided as an argument to the notificationHandler , +     * func. If the observable returned {@code onCompletes} or {@code onErrors} then repeat will call {@code onCompleted} , +     * or {@code onError} on the child subscription. Otherwise, this observable will resubscribe to the source observable., +     * <p>, +     * <img width="640" height="430" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/repeatWhen.f.png" alt="">, +     * , +     * @param notificationHandler, +     *            recieves an Observable of notifications with which a user can complete or error, aborting the repeat. , +     * @return the source Observable modified with repeat logic, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Creating-Observables#wiki-repeat">RxJava Wiki: repeatWhen()</a>, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229428.aspx">MSDN: Observable.Repeat</a>, +     */, +    public final Observable<T> repeatWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<? extends Notification<?>>> notificationHandler) {, +        return OnSubscribeRedo.repeat(this, notificationHandler);, +        return OnSubscribeRedo.<T>retry(this);, +    public final Observable<T> retry(final long count) {, +        return OnSubscribeRedo.<T>retry(this, count);, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Error-Handling-Operators#retry">RxJava Wiki: retry()</a>, +     * Returns an Observable that emits the same values as the source observable with the exception of an {@code onError}., +     * An onError will emit a {@link Notification} to the observable provided as an argument to the notificationHandler , +     * func. If the observable returned {@code onCompletes} or {@code onErrors} then retry will call {@code onCompleted} , +     * or {@code onError} on the child subscription. Otherwise, this observable will resubscribe to the source observable.    , +     * <p>, +     * <img width="640" height="430" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/retryWhen.f.png" alt="">, +     * <p>, +     * {@code retryWhen} operates by default on the {@code trampoline} {@link Scheduler}., +     *, +     * @param notificationHandler, +     *            recieves an Observable of notifications with which a user can complete or error, aborting the retry. , +     * @return the source Observable modified with retry logic, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Error-Handling-Operators#wiki-retry">RxJava Wiki: retryWhen()</a>, +     */, +    public final Observable<T> retryWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<?>> notificationHandler) {, +        return OnSubscribeRedo.<T> retry(this, notificationHandler);, +    }, +, +    /**, +     * Returns an Observable that emits the same values as the source observable with the exception of an {@code onError}., +     * An onError will emit a {@link Notification} to the observable provided as an argument to the notificationHandler , +     * func. If the observable returned {@code onCompletes} or {@code onErrors} then retry will call {@code onCompleted} , +     * or {@code onError} on the child subscription. Otherwise, this observable will resubscribe to the source observable, on a particular Scheduler.    , +     * <p>, +     * <img width="640" height="430" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/retryWhen.f.png" alt="">, +     * <p>, +     *, +     * @param notificationHandler, +     *            recieves an Observable of notifications with which a user can complete or error, aborting the retry. , +     * @return the source Observable modified with retry logic, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Error-Handling-Operators#wiki-retry">RxJava Wiki: retryWhen()</a>, +     */, +    public final Observable<T> retryWhen(Func1<? super Observable<? extends Notification<?>>, ? extends Observable<? extends Notification<?>>> notificationHandler, Scheduler scheduler) {]