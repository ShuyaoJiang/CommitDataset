[+++ b/rxjava-contrib/rxjava-string/src/main/java/rx/observables/StringObservable.java, +                    int n = i.read(buffer);, +                        if (!o.isUnsubscribed()), +++ b/rxjava-contrib/rxjava-string/src/main/java/rx/observables/StringObservable.java, +                    int n = i.read(buffer);, +                        if (!o.isUnsubscribed()), +++ b/rxjava-contrib/rxjava-string/src/test/java/rx/observables/StringObservableTest.java, +import java.util.concurrent.atomic.AtomicInteger;, +    public void testFromInputStreamWillUnsubscribeBeforeCallingNextRead() {, +        final byte[] inBytes = "test".getBytes();, +        final AtomicInteger numReads = new AtomicInteger(0);, +        ByteArrayInputStream is = new ByteArrayInputStream(inBytes) {, +, +            @Override, +            public synchronized int read(byte[] b, int off, int len) {, +                numReads.incrementAndGet();, +                return super.read(b, off, len);, +            }, +        };, +        StringObservable.from(is).first().toBlockingObservable().single();, +        assertEquals(1, numReads.get());, +    }, +    , +    @Test]