[+++ b/src/main/java/io/reactivex/internal/subscribers/flowable/LambdaSubscriber.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +public final class LambdaSubscriber<T> extends AtomicReference<Subscription> implements Subscriber<T>, Subscription, Disposable {, +        if (SubscriptionHelper.setOnce(this, s)) {, +        get().request(n);, +        SubscriptionHelper.dispose(this);, +++ b/src/main/java/io/reactivex/internal/subscribers/flowable/LambdaSubscriber.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +public final class LambdaSubscriber<T> extends AtomicReference<Subscription> implements Subscriber<T>, Subscription, Disposable {, +        if (SubscriptionHelper.setOnce(this, s)) {, +        get().request(n);, +        SubscriptionHelper.dispose(this);, +++ b/src/main/java/io/reactivex/internal/subscribers/flowable/SubscriberResourceWrapper.java, +    static final Object TERMINATED = new Object();, +            if (current == SubscriptionHelper.CANCELLED) {, +        SubscriptionHelper.dispose(subscription);]