[+++ b/src/main/java/io/reactivex/flowables/ConnectableFlowable.java, +     * @param connection the callback Consumer that will receive the Subscription representing the, +++ b/src/main/java/io/reactivex/flowables/ConnectableFlowable.java, +     * @param connection the callback Consumer that will receive the Subscription representing the, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java, +                // outside of this class thus preventing the Consumer passed, +                    // Consumer passed to source.connect was not called, +++ b/src/main/java/io/reactivex/flowables/ConnectableFlowable.java, +     * @param connection the callback Consumer that will receive the Subscription representing the, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java, +                // outside of this class thus preventing the Consumer passed, +                    // Consumer passed to source.connect was not called, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableRefCount.java, +                // outside of this class thus preventing the Consumer passed, +                    // Consumer passed to source.connect was not called, +++ b/src/main/java/io/reactivex/flowables/ConnectableFlowable.java, +     * @param connection the callback Consumer that will receive the Subscription representing the, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java, +                // outside of this class thus preventing the Consumer passed, +                    // Consumer passed to source.connect was not called, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableRefCount.java, +                // outside of this class thus preventing the Consumer passed, +                    // Consumer passed to source.connect was not called, +++ b/src/main/java/io/reactivex/observables/ConnectableObservable.java, +     * @param connection the callback Consumer that will receive the Subscription representing the]