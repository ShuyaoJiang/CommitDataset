[+++ b/src/main/java/io/reactivex/Observable.java, +import io.reactivex.plugins.RxJavaPlugins;, +import io.reactivex.subscribers.SafeSubscriber;, +        onSubscribe = RxJavaPlugins.onCreate(onSubscribe);, +    private void subscribeActual(Subscriber<? super T> s) {, +            s = RxJavaPlugins.onSubscribe(s);, +            , +            // TODO throw if fatal?, +            RxJavaPlugins.onError(e);, +        }, +    }, +    , +    // TODO decide if safe subscription or unsafe should be the default, +    @Override, +    public final void subscribe(Subscriber<? super T> s) {, +        subscribeActual(s);, +    }, +    , +    // TODO decide if safe subscription or unsafe should be the default, +    public final void unsafeSubscribe(Subscriber<? super T> s) {, +        subscribeActual(s);, +    }, +    , +    // TODO decide if safe subscription or unsafe should be the default, +    public final void safeSubscribe(Subscriber<? super T> s) {, +        if (s instanceof SafeSubscriber) {, +            subscribeActual(s);, +        } else {, +            subscribeActual(new SafeSubscriber<>(s));, +                , +                st = RxJavaPlugins.onSubscribe(st);, +                , +                // TODO throw if fatal?, +                RxJavaPlugins.onError(e);, +++ b/src/main/java/io/reactivex/Observable.java, +import io.reactivex.plugins.RxJavaPlugins;, +import io.reactivex.subscribers.SafeSubscriber;, +        onSubscribe = RxJavaPlugins.onCreate(onSubscribe);, +    private void subscribeActual(Subscriber<? super T> s) {, +            s = RxJavaPlugins.onSubscribe(s);, +            , +            // TODO throw if fatal?, +            RxJavaPlugins.onError(e);, +        }, +    }, +    , +    // TODO decide if safe subscription or unsafe should be the default, +    @Override, +    public final void subscribe(Subscriber<? super T> s) {, +        subscribeActual(s);, +    }, +    , +    // TODO decide if safe subscription or unsafe should be the default, +    public final void unsafeSubscribe(Subscriber<? super T> s) {, +        subscribeActual(s);, +    }, +    , +    // TODO decide if safe subscription or unsafe should be the default, +    public final void safeSubscribe(Subscriber<? super T> s) {, +        if (s instanceof SafeSubscriber) {, +            subscribeActual(s);, +        } else {, +            subscribeActual(new SafeSubscriber<>(s));, +                , +                st = RxJavaPlugins.onSubscribe(st);, +                , +                // TODO throw if fatal?, +                RxJavaPlugins.onError(e);, +++ b/src/main/java/io/reactivex/plugins/RxJavaPlugins.java, +/**, + * Copyright 2015 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +package io.reactivex.plugins;, +, +import org.reactivestreams.*;, +, +public final class RxJavaPlugins {, +    private RxJavaPlugins() {, +        throw new IllegalStateException("No instances!");, +    }, +    , +    /**, +     * Called when an undeliverable error occurs., +     * @param error the error to report, +     */, +    public static void onError(Throwable error) {, +        // TODO dispatch to the appropriate plugin, +        if (error != null) {, +            error.printStackTrace();, +        } else {, +            new NullPointerException().printStackTrace();]