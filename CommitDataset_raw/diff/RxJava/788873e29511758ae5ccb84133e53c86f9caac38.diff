[+++ b/src/main/java/io/reactivex/Observable.java, +     * Returns a Single that emits a Boolean value that indicates whether two ObservableSource sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two sequences are the same, +    public static <T> Single<Boolean> sequenceEqual(ObservableSource<? extends T> source1, ObservableSource<? extends T> source2) {, +     * Returns a Single that emits a Boolean value that indicates whether two ObservableSource sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two ObservableSource two sequences, +    public static <T> Single<Boolean> sequenceEqual(ObservableSource<? extends T> source1, ObservableSource<? extends T> source2,, +     * Returns a Single that emits a Boolean value that indicates whether two ObservableSource sequences are the, +    public static <T> Single<Boolean> sequenceEqual(ObservableSource<? extends T> source1, ObservableSource<? extends T> source2,, +        return RxJavaPlugins.onAssembly(new ObservableSequenceEqualSingle<T>(source1, source2, isEqual, bufferSize));, +     * Returns a Single that emits a Boolean value that indicates whether two ObservableSource sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two sequences are the same, +    public static <T> Single<Boolean> sequenceEqual(ObservableSource<? extends T> source1, ObservableSource<? extends T> source2,, +        return new ObservableDistinct<T, K>(this, keySelector, collectionSupplier);, +        return new ObservableDistinctUntilChanged<T>(this, Functions.equalsPredicate());, +        return new ObservableDistinctUntilChanged<T>(this, Functions.equalsPredicate(keySelector));, +++ b/src/main/java/io/reactivex/Observable.java, +     * Returns a Single that emits a Boolean value that indicates whether two ObservableSource sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two sequences are the same, +    public static <T> Single<Boolean> sequenceEqual(ObservableSource<? extends T> source1, ObservableSource<? extends T> source2) {, +     * Returns a Single that emits a Boolean value that indicates whether two ObservableSource sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two ObservableSource two sequences, +    public static <T> Single<Boolean> sequenceEqual(ObservableSource<? extends T> source1, ObservableSource<? extends T> source2,, +     * Returns a Single that emits a Boolean value that indicates whether two ObservableSource sequences are the, +    public static <T> Single<Boolean> sequenceEqual(ObservableSource<? extends T> source1, ObservableSource<? extends T> source2,, +        return RxJavaPlugins.onAssembly(new ObservableSequenceEqualSingle<T>(source1, source2, isEqual, bufferSize));, +     * Returns a Single that emits a Boolean value that indicates whether two ObservableSource sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two sequences are the same, +    public static <T> Single<Boolean> sequenceEqual(ObservableSource<? extends T> source1, ObservableSource<? extends T> source2,, +        return new ObservableDistinct<T, K>(this, keySelector, collectionSupplier);, +        return new ObservableDistinctUntilChanged<T>(this, Functions.equalsPredicate());, +        return new ObservableDistinctUntilChanged<T>(this, Functions.equalsPredicate(keySelector));, +++ b/src/main/java/io/reactivex/internal/disposables/ObserverFullArbiter.java, +        Disposable d = resource;, +        return d != null ? d.isDisposed() : cancelled;, +++ b/src/main/java/io/reactivex/Observable.java, +     * Returns a Single that emits a Boolean value that indicates whether two ObservableSource sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two sequences are the same, +    public static <T> Single<Boolean> sequenceEqual(ObservableSource<? extends T> source1, ObservableSource<? extends T> source2) {, +     * Returns a Single that emits a Boolean value that indicates whether two ObservableSource sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two ObservableSource two sequences, +    public static <T> Single<Boolean> sequenceEqual(ObservableSource<? extends T> source1, ObservableSource<? extends T> source2,, +     * Returns a Single that emits a Boolean value that indicates whether two ObservableSource sequences are the, +    public static <T> Single<Boolean> sequenceEqual(ObservableSource<? extends T> source1, ObservableSource<? extends T> source2,, +        return RxJavaPlugins.onAssembly(new ObservableSequenceEqualSingle<T>(source1, source2, isEqual, bufferSize));, +     * Returns a Single that emits a Boolean value that indicates whether two ObservableSource sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two sequences are the same, +    public static <T> Single<Boolean> sequenceEqual(ObservableSource<? extends T> source1, ObservableSource<? extends T> source2,, +        return new ObservableDistinct<T, K>(this, keySelector, collectionSupplier);, +        return new ObservableDistinctUntilChanged<T>(this, Functions.equalsPredicate());, +        return new ObservableDistinctUntilChanged<T>(this, Functions.equalsPredicate(keySelector));, +++ b/src/main/java/io/reactivex/internal/disposables/ObserverFullArbiter.java, +        Disposable d = resource;, +        return d != null ? d.isDisposed() : cancelled;, +++ b/src/main/java/io/reactivex/internal/functions/Functions.java, +    static final BiPredicate<Object, Object> DEFAULT_EQUALS_PREDICATE = equalsPredicate(Functions.identity());, +, +    @SuppressWarnings("unchecked"), +    public static <T> BiPredicate<T, T> equalsPredicate() {, +        return (BiPredicate<T, T>)DEFAULT_EQUALS_PREDICATE;, +    }, +, +    static final class KeyedEqualsPredicate<T, K> implements BiPredicate<T, T> {, +        final Function<? super T, K> keySelector;, +, +        KeyedEqualsPredicate(Function<? super T, K> keySelector) {, +            this.keySelector = keySelector;, +        }, +, +        @Override, +        public boolean test(T t1, T t2) throws Exception {, +            K k1 = ObjectHelper.requireNonNull(keySelector.apply(t1), "The keySelector returned a null key");, +            K k2 = ObjectHelper.requireNonNull(keySelector.apply(t2), "The keySelector returned a null key");, +            return ObjectHelper.equals(k1, k2);, +        }, +    }, +, +    public static <T, K> BiPredicate<T, T> equalsPredicate(Function<? super T, K> keySelector) {, +        return new KeyedEqualsPredicate<T, K>(keySelector);, +    }, +++ b/src/main/java/io/reactivex/Observable.java, +     * Returns a Single that emits a Boolean value that indicates whether two ObservableSource sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two sequences are the same, +    public static <T> Single<Boolean> sequenceEqual(ObservableSource<? extends T> source1, ObservableSource<? extends T> source2) {, +     * Returns a Single that emits a Boolean value that indicates whether two ObservableSource sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two ObservableSource two sequences, +    public static <T> Single<Boolean> sequenceEqual(ObservableSource<? extends T> source1, ObservableSource<? extends T> source2,, +     * Returns a Single that emits a Boolean value that indicates whether two ObservableSource sequences are the, +    public static <T> Single<Boolean> sequenceEqual(ObservableSource<? extends T> source1, ObservableSource<? extends T> source2,, +        return RxJavaPlugins.onAssembly(new ObservableSequenceEqualSingle<T>(source1, source2, isEqual, bufferSize));, +     * Returns a Single that emits a Boolean value that indicates whether two ObservableSource sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two sequences are the same, +    public static <T> Single<Boolean> sequenceEqual(ObservableSource<? extends T> source1, ObservableSource<? extends T> source2,, +        return new ObservableDistinct<T, K>(this, keySelector, collectionSupplier);, +        return new ObservableDistinctUntilChanged<T>(this, Functions.equalsPredicate());, +        return new ObservableDistinctUntilChanged<T>(this, Functions.equalsPredicate(keySelector));, +++ b/src/main/java/io/reactivex/internal/disposables/ObserverFullArbiter.java, +        Disposable d = resource;, +        return d != null ? d.isDisposed() : cancelled;, +++ b/src/main/java/io/reactivex/internal/functions/Functions.java]