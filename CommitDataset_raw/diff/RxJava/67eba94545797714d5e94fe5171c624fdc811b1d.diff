[+++ b/src/main/java/io/reactivex/internal/operators/OperatorScanSeed.java, +            s.request(n);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorScanSeed.java, +            s.request(n);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorSingle.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateRequest(n)) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorScanSeed.java, +            s.request(n);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorSingle.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateRequest(n)) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorTakeLastOne.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateSubscription(this.s, s)) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorScanSeed.java, +            s.request(n);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorSingle.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateRequest(n)) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorTakeLastOne.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateSubscription(this.s, s)) {, +++ b/src/main/java/io/reactivex/internal/subscribers/QueueDrainSubscriber.java, +import io.reactivex.internal.util.*;, +        BackpressureHelper.add(REQUESTED, this, n);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorScanSeed.java, +            s.request(n);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorSingle.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateRequest(n)) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorTakeLastOne.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateSubscription(this.s, s)) {, +++ b/src/main/java/io/reactivex/internal/subscribers/QueueDrainSubscriber.java, +import io.reactivex.internal.util.*;, +        BackpressureHelper.add(REQUESTED, this, n);, +++ b/src/main/java/io/reactivex/subscribers/TestSubscriber.java, +     * Constructs a forwarding TestSubscriber but leaves the requesting to the wrapped subscriber., +        this(actual, null);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorScanSeed.java, +            s.request(n);, +++ b/src/main/java/io/reactivex/internal/operators/OperatorSingle.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateRequest(n)) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorTakeLastOne.java, +import io.reactivex.internal.subscriptions.SubscriptionHelper;, +            if (SubscriptionHelper.validateSubscription(this.s, s)) {, +++ b/src/main/java/io/reactivex/internal/subscribers/QueueDrainSubscriber.java, +import io.reactivex.internal.util.*;, +        BackpressureHelper.add(REQUESTED, this, n);, +++ b/src/main/java/io/reactivex/subscribers/TestSubscriber.java, +     * Constructs a forwarding TestSubscriber but leaves the requesting to the wrapped subscriber., +        this(actual, null);, +++ b/src/test/java/io/reactivex/ObservableConversionTest.java, +package io.reactivex;, +, +import java.util.*;, +import java.util.concurrent.ConcurrentLinkedQueue;, +import java.util.concurrent.atomic.*;, +import java.util.function.*;, +, +import org.junit.*;, +import org.reactivestreams.*;, +, +import io.reactivex.Observable.Operator;, +import io.reactivex.internal.operators.*;, +import io.reactivex.schedulers.Schedulers;, +import io.reactivex.subscribers.TestSubscriber;, +, +public class ObservableConversionTest {, +    , +    public static class Cylon {}, +    , +    public static class Jail {, +        Object cylon;, +        , +        Jail(Object cylon) {, +            this.cylon = cylon;, +        }, +    }, +    , +    public static class CylonDetectorObservable<T> {, +        protected Publisher<T> onSubscribe;, +        , +        public static <T> CylonDetectorObservable<T> create(Publisher<T> onSubscribe) {, +            return new CylonDetectorObservable<>(onSubscribe);, +        }, +, +        protected CylonDetectorObservable(Publisher<T> onSubscribe) {, +            this.onSubscribe = onSubscribe;, +        }, +, +        public void subscribe(Subscriber<T> subscriber) {, +            onSubscribe.subscribe(subscriber);, +        }, +, +        public <R> CylonDetectorObservable<R> lift(Operator<? extends R, ? super T> operator) {, +            return x(new RobotConversionFunc<T, R>(operator));, +        }]