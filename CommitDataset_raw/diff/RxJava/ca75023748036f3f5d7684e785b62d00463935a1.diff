[+++ b/language-adaptors/rxjava-clojure/build.gradle, +    provided 'org.clojure:clojure:1.5.+', +++ b/language-adaptors/rxjava-clojure/build.gradle, +    provided 'org.clojure:clojure:1.5.+', +++ b/language-adaptors/rxjava-groovy/build.gradle, +    provided 'org.codehaus.groovy:groovy:1.8.8', +++ b/language-adaptors/rxjava-clojure/build.gradle, +    provided 'org.clojure:clojure:1.5.+', +++ b/language-adaptors/rxjava-groovy/build.gradle, +    provided 'org.codehaus.groovy:groovy:1.8.8', +++ b/language-adaptors/rxjava-scala/build.gradle, +    provided 'org.scala-lang:scala-library:2.10.0', +    provided 'org.scala-lang:scala-reflect:2.10.0', +    provided 'org.scalatest:scalatest_2.10:1.9.1', +++ b/language-adaptors/rxjava-clojure/build.gradle, +    provided 'org.clojure:clojure:1.5.+', +++ b/language-adaptors/rxjava-groovy/build.gradle, +    provided 'org.codehaus.groovy:groovy:1.8.8', +++ b/language-adaptors/rxjava-scala/build.gradle, +    provided 'org.scala-lang:scala-library:2.10.0', +    provided 'org.scala-lang:scala-reflect:2.10.0', +    provided 'org.scalatest:scalatest_2.10:1.9.1', +++ b/rxjava-core/src/main/java/rx/observables/Observable.java, +import java.util.concurrent.Future;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.TimeoutException;, +import rx.observables.operations.OperationToObservableFuture;, +     * //TODO should this be moved to a Subscriptions utility class?, +     * , +     * A Subscription implemented via a Func, +     * , +     * //TODO should this be moved to a Subscriptions utility class?, +     * , +     * @return, +     */, +    public static Subscription createSubscription(final Action0 unsubscribe) {, +        return new Subscription() {, +, +            @Override, +            public void unsubscribe() {, +                unsubscribe.call();, +            }, +, +        };, +    }, +, +    /**, +     * A Subscription implemented via an anonymous function (such as closures from other languages)., +     * , +     * //TODO should this be moved to a Subscriptions utility class?, +     * , +     * @return, +     */, +    public static Subscription createSubscription(final Object unsubscribe) {, +        final FuncN f = Functions.from(unsubscribe);, +        return new Subscription() {, +, +            @Override, +            public void unsubscribe() {, +                f.call();, +            }, +, +        };, +    }, +, +    /**, +     * Converts an Future to a Observable sequence., +     * , +     * Any object that supports the {@link Future} interface can be converted into a Observable that emits, +     * the return value of the get() method in the object, by passing the object into the <code>toObservable</code> method., +     * The subscribe method on this synchronously so the Subscription returned doesn't nothing., +     * , +     * @param future, +     *            the source {@link Future}, +     * @param <T>, +     *            the type of of object that the future's returns and the type emitted by the resulting, +     *            Observable, +     * @return a Observable that emits the item from the source Future, +     */, +    public static <T> Observable<T> toObservable(Future<T> future) {, +        return create(OperationToObservableFuture.toObservableFuture(future));, +    }, +    , +    /**, +     * Converts an Future to a Observable sequence., +     * , +     * Any object that supports the {@link Future} interface can be converted into a Observable that emits, +     * the return value of the get() method in the object, by passing the object into the <code>toObservable</code> method., +     * The subscribe method on this synchronously so the Subscription returned doesn't nothing., +     * If the future timesout the {@link TimeoutException} exception is passed to the onError. , +     * , +     * @param future, +     *            the source {@link Future}, +     * @param time the maximum time to wait, +     * @param unit the time unit of the time argument, +     * @param <T>, +     *            the type of of object that the future's returns and the type emitted by the resulting, +     *            Observable, +     * @return a Observable that emits the item from the source Future, +     */]