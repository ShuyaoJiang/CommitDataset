[+++ b/rxjava-core/src/main/java/rx/operators/OperationWhere.java, +/**, + * Copyright 2013 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import org.junit.Test;, +import org.mockito.Mockito;, +, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +import rx.util.functions.Func1;, +, +import static org.mockito.Matchers.any;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +, +public final class OperationWhere {, +, +    public static <T> Func1<Observer<T>, Subscription> where(Observable<T> that, Func1<T, Boolean> predicate) {, +        return OperationFilter.filter(that, predicate);, +    }, +, +    public static class UnitTest {, +, +        @Test, +        public void testWhere() {, +            Observable<String> w = Observable.toObservable("one", "two", "three");, +            Observable<String> observable = Observable.create(where(w, new Func1<String, Boolean>() {, +, +                @Override, +                public Boolean call(String t1) {, +                    return t1.equals("two");, +                }, +            }));, +, +            @SuppressWarnings("unchecked"), +            Observer<String> aObserver = mock(Observer.class);, +            observable.subscribe(aObserver);, +            verify(aObserver, Mockito.never()).onNext("one");, +            verify(aObserver, times(1)).onNext("two");, +            verify(aObserver, Mockito.never()).onNext("three");, +            verify(aObserver, Mockito.never()).onError(any(Exception.class));, +            verify(aObserver, times(1)).onCompleted();, +        }, +    }, +, +}]