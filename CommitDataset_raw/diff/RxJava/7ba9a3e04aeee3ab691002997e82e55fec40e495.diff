[+++ b/src/main/java/io/reactivex/processors/AsyncProcessor.java, +import org.reactivestreams.*;, +, +import io.reactivex.internal.functions.ObjectHelper;, +        ObjectHelper.requireNonNull(t, "onNext called with null. Null values are generally not allowed in 2.x operators and sources.");, +        ObjectHelper.requireNonNull(t, "onError called with null. Null values are generally not allowed in 2.x operators and sources.");, +++ b/src/main/java/io/reactivex/processors/AsyncProcessor.java, +import org.reactivestreams.*;, +, +import io.reactivex.internal.functions.ObjectHelper;, +        ObjectHelper.requireNonNull(t, "onNext called with null. Null values are generally not allowed in 2.x operators and sources.");, +        ObjectHelper.requireNonNull(t, "onError called with null. Null values are generally not allowed in 2.x operators and sources.");, +++ b/src/main/java/io/reactivex/processors/BehaviorProcessor.java, +        ObjectHelper.requireNonNull(t, "onNext called with null. Null values are generally not allowed in 2.x operators and sources.");, +, +        ObjectHelper.requireNonNull(t, "onError called with null. Null values are generally not allowed in 2.x operators and sources.");, +++ b/src/main/java/io/reactivex/processors/AsyncProcessor.java, +import org.reactivestreams.*;, +, +import io.reactivex.internal.functions.ObjectHelper;, +        ObjectHelper.requireNonNull(t, "onNext called with null. Null values are generally not allowed in 2.x operators and sources.");, +        ObjectHelper.requireNonNull(t, "onError called with null. Null values are generally not allowed in 2.x operators and sources.");, +++ b/src/main/java/io/reactivex/processors/BehaviorProcessor.java, +        ObjectHelper.requireNonNull(t, "onNext called with null. Null values are generally not allowed in 2.x operators and sources.");, +, +        ObjectHelper.requireNonNull(t, "onError called with null. Null values are generally not allowed in 2.x operators and sources.");, +++ b/src/main/java/io/reactivex/processors/FlowableProcessor.java, +import io.reactivex.*;, +import io.reactivex.annotations.*;, +, +     * Returns true if the FlowableProcessor has subscribers., +     * @return true if the FlowableProcessor has subscribers, +     * Returns true if the FlowableProcessor has reached a terminal state through an error event., +     * @return true if the FlowableProcessor has reached a terminal state through an error event, +     * Returns true if the FlowableProcessor has reached a terminal state through a complete event., +     * @return true if the FlowableProcessor has reached a terminal state through a complete event, +     * Returns the error that caused the FlowableProcessor to terminate or null if the FlowableProcessor, +     * @return the error that caused the FlowableProcessor to terminate or null if the FlowableProcessor, +    @Nullable, +     * Wraps this FlowableProcessor and serializes the calls to the onSubscribe, onNext, onError and, +     * @return the wrapped and serialized FlowableProcessor, +    @CheckReturnValue, +++ b/src/main/java/io/reactivex/processors/AsyncProcessor.java, +import org.reactivestreams.*;, +, +import io.reactivex.internal.functions.ObjectHelper;, +        ObjectHelper.requireNonNull(t, "onNext called with null. Null values are generally not allowed in 2.x operators and sources.");, +        ObjectHelper.requireNonNull(t, "onError called with null. Null values are generally not allowed in 2.x operators and sources.");, +++ b/src/main/java/io/reactivex/processors/BehaviorProcessor.java, +        ObjectHelper.requireNonNull(t, "onNext called with null. Null values are generally not allowed in 2.x operators and sources.");, +, +        ObjectHelper.requireNonNull(t, "onError called with null. Null values are generally not allowed in 2.x operators and sources.");, +++ b/src/main/java/io/reactivex/processors/FlowableProcessor.java, +import io.reactivex.*;, +import io.reactivex.annotations.*;, +, +     * Returns true if the FlowableProcessor has subscribers., +     * @return true if the FlowableProcessor has subscribers, +     * Returns true if the FlowableProcessor has reached a terminal state through an error event., +     * @return true if the FlowableProcessor has reached a terminal state through an error event, +     * Returns true if the FlowableProcessor has reached a terminal state through a complete event., +     * @return true if the FlowableProcessor has reached a terminal state through a complete event, +     * Returns the error that caused the FlowableProcessor to terminate or null if the FlowableProcessor, +     * @return the error that caused the FlowableProcessor to terminate or null if the FlowableProcessor, +    @Nullable, +     * Wraps this FlowableProcessor and serializes the calls to the onSubscribe, onNext, onError and, +     * @return the wrapped and serialized FlowableProcessor, +    @CheckReturnValue, +++ b/src/main/java/io/reactivex/processors/PublishProcessor.java, +import io.reactivex.internal.functions.ObjectHelper;, +        ObjectHelper.requireNonNull(t, "onNext called with null. Null values are generally not allowed in 2.x operators and sources.");, +        ObjectHelper.requireNonNull(t, "onError called with null. Null values are generally not allowed in 2.x operators and sources.");, +++ b/src/main/java/io/reactivex/processors/AsyncProcessor.java, +import org.reactivestreams.*;, +, +import io.reactivex.internal.functions.ObjectHelper;, +        ObjectHelper.requireNonNull(t, "onNext called with null. Null values are generally not allowed in 2.x operators and sources.");, +        ObjectHelper.requireNonNull(t, "onError called with null. Null values are generally not allowed in 2.x operators and sources.");, +++ b/src/main/java/io/reactivex/processors/BehaviorProcessor.java, +        ObjectHelper.requireNonNull(t, "onNext called with null. Null values are generally not allowed in 2.x operators and sources.");, +, +        ObjectHelper.requireNonNull(t, "onError called with null. Null values are generally not allowed in 2.x operators and sources.");, +++ b/src/main/java/io/reactivex/processors/FlowableProcessor.java, +import io.reactivex.*;, +import io.reactivex.annotations.*;, +, +     * Returns true if the FlowableProcessor has subscribers., +     * @return true if the FlowableProcessor has subscribers, +     * Returns true if the FlowableProcessor has reached a terminal state through an error event., +     * @return true if the FlowableProcessor has reached a terminal state through an error event, +     * Returns true if the FlowableProcessor has reached a terminal state through a complete event., +     * @return true if the FlowableProcessor has reached a terminal state through a complete event, +     * Returns the error that caused the FlowableProcessor to terminate or null if the FlowableProcessor, +     * @return the error that caused the FlowableProcessor to terminate or null if the FlowableProcessor, +    @Nullable, +     * Wraps this FlowableProcessor and serializes the calls to the onSubscribe, onNext, onError and, +     * @return the wrapped and serialized FlowableProcessor, +    @CheckReturnValue, +++ b/src/main/java/io/reactivex/processors/PublishProcessor.java, +import io.reactivex.internal.functions.ObjectHelper;]