[+++ /dev/null, +++ /dev/null, +++ b/src/test/java/rx/internal/operators/OperatorReplayTest.java, +import static org.mockito.Matchers.notNull;, +import static org.mockito.Mockito.*;, +, +import rx.Scheduler;, +import rx.Scheduler.Worker;, +import rx.Subscription;, +, +, +    /**, +     * test the basic expectation of OperatorMulticast via replay, +     */, +    @Test, +    public void testIssue2191_UnsubscribeSource() {, +        // setup mocks, +        Action1 sourceNext = mock(Action1.class);, +        Action0 sourceCompleted = mock(Action0.class);, +        Action0 sourceUnsubscribed = mock(Action0.class);, +        Observer spiedSubscriberBeforeConnect = mock(Observer.class);, +        Observer spiedSubscriberAfterConnect = mock(Observer.class);, +, +        // Observable under test, +        Observable<Integer> source = Observable.just(1,2);, +, +        ConnectableObservable<Integer> replay = source, +                .doOnNext(sourceNext), +                .doOnUnsubscribe(sourceUnsubscribed), +                .doOnCompleted(sourceCompleted), +                .replay();, +, +        replay.subscribe(spiedSubscriberBeforeConnect);, +        replay.subscribe(spiedSubscriberBeforeConnect);, +        replay.connect();, +        replay.subscribe(spiedSubscriberAfterConnect);, +        replay.subscribe(spiedSubscriberAfterConnect);, +, +, +        // verify interactions, +        verify(sourceNext, times(1)).call(1);, +        verify(sourceNext, times(1)).call(2);, +        verify(sourceCompleted, times(1)).call();, +        verifyObserverMock(spiedSubscriberBeforeConnect, 2, 4);, +        verifyObserverMock(spiedSubscriberAfterConnect, 2, 4);, +, +        verify(sourceUnsubscribed, times(1)).call();, +, +        verifyNoMoreInteractions(sourceNext);, +        verifyNoMoreInteractions(sourceCompleted);, +        verifyNoMoreInteractions(sourceUnsubscribed);, +        verifyNoMoreInteractions(spiedSubscriberBeforeConnect);, +        verifyNoMoreInteractions(spiedSubscriberAfterConnect);, +, +    }, +, +    /**, +     * Specifically test interaction with a Scheduler with subscribeOn, +     *, +     * @throws Exception, +     */, +    @Test, +    public void testIssue2191_SchedulerUnsubscribe() throws Exception {, +        // setup mocks, +        Action1 sourceNext = mock(Action1.class);, +        Action0 sourceCompleted = mock(Action0.class);, +        Action0 sourceUnsubscribed = mock(Action0.class);, +        final Scheduler mockScheduler = mock(Scheduler.class);, +        final Subscription mockSubscription = mock(Subscription.class);, +        Worker spiedWorker = workerSpy(mockSubscription);, +        Observer mockObserverBeforeConnect = mock(Observer.class);, +        Observer mockObserverAfterConnect = mock(Observer.class);, +, +        when(mockScheduler.createWorker()).thenReturn(spiedWorker);, +, +        // Observable under test, +        ConnectableObservable<Integer> replay = Observable.just(1, 2, 3), +                .doOnNext(sourceNext), +                .doOnUnsubscribe(sourceUnsubscribed), +                .doOnCompleted(sourceCompleted), +                .subscribeOn(mockScheduler).replay();, +, +        replay.subscribe(mockObserverBeforeConnect);, +        replay.subscribe(mockObserverBeforeConnect);, +        replay.connect();, +        replay.subscribe(mockObserverAfterConnect);, +        replay.subscribe(mockObserverAfterConnect);, +, +        // verify interactions, +        verify(sourceNext, times(1)).call(1);, +        verify(sourceNext, times(1)).call(2);, +        verify(sourceNext, times(1)).call(3);, +        verify(sourceCompleted, times(1)).call();, +        verify(mockScheduler, times(1)).createWorker();, +        verify(spiedWorker, times(1)).schedule((Action0)notNull());, +        verifyObserverMock(mockObserverBeforeConnect, 2, 6);, +        verifyObserverMock(mockObserverAfterConnect, 2, 6);, +, +        verify(spiedWorker, times(1)).unsubscribe();, +        verify(sourceUnsubscribed, times(1)).call();]