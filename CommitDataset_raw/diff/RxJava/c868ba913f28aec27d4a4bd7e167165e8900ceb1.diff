[+++ b/src/main/java/rx/internal/operators/OperatorDelay.java, +            // indicates an error cut ahead, +            // accessed from the worker thread only, +            boolean done;, +                        if (!done) {, +                            done = true;, +                    }, +            public void onError(final Throwable e) {, +                worker.schedule(new Action0() {, +                    @Override, +                    public void call() {, +                        if (!done) {, +                            done = true;, +                            worker.unsubscribe();, +                        }, +                    }, +                });, +                        if (!done) {, +                    }, +++ b/src/main/java/rx/internal/operators/OperatorDelay.java, +            // indicates an error cut ahead, +            // accessed from the worker thread only, +            boolean done;, +                        if (!done) {, +                            done = true;, +                    }, +            public void onError(final Throwable e) {, +                worker.schedule(new Action0() {, +                    @Override, +                    public void call() {, +                        if (!done) {, +                            done = true;, +                            worker.unsubscribe();, +                        }, +                    }, +                });, +                        if (!done) {, +                    }, +++ b/src/test/java/rx/internal/operators/OperatorDelayTest.java, +    , +    @Test, +    public void testErrorRunsBeforeOnNext() {, +        TestScheduler test = Schedulers.test();, +        , +        PublishSubject<Integer> ps = PublishSubject.create();, +        , +        TestSubscriber<Integer> ts = TestSubscriber.create();, +        , +        ps.delay(1, TimeUnit.SECONDS, test).subscribe(ts);, +        , +        ps.onNext(1);, +        , +        test.advanceTimeBy(500, TimeUnit.MILLISECONDS);, +        , +        ps.onError(new TestException());, +        , +        test.advanceTimeBy(1, TimeUnit.SECONDS);, +        , +        ts.assertNoValues();, +        ts.assertError(TestException.class);, +        ts.assertNotCompleted();, +    }]