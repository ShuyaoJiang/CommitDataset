[+++ /dev/null, +++ /dev/null, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperationDeferFutureTest.java, +            Observable<Integer> result = Async.deferFuture(func, Schedulers.computation());, +++ /dev/null, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperationDeferFutureTest.java, +            Observable<Integer> result = Async.deferFuture(func, Schedulers.computation());, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperationForEachFutureTest.java, +                    .subscribeOn(Schedulers.computation());, +                    .subscribeOn(Schedulers.computation());, +                .subscribeOn(Schedulers.computation());, +                .subscribeOn(Schedulers.computation());, +++ /dev/null, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperationDeferFutureTest.java, +            Observable<Integer> result = Async.deferFuture(func, Schedulers.computation());, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperationForEachFutureTest.java, +                    .subscribeOn(Schedulers.computation());, +                    .subscribeOn(Schedulers.computation());, +                .subscribeOn(Schedulers.computation());, +                .subscribeOn(Schedulers.computation());, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperationStartFutureTest.java, +            Observable<Integer> result = Async.startFuture(func, Schedulers.computation());, +++ /dev/null, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperationDeferFutureTest.java, +            Observable<Integer> result = Async.deferFuture(func, Schedulers.computation());, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperationForEachFutureTest.java, +                    .subscribeOn(Schedulers.computation());, +                    .subscribeOn(Schedulers.computation());, +                .subscribeOn(Schedulers.computation());, +                .subscribeOn(Schedulers.computation());, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperationStartFutureTest.java, +            Observable<Integer> result = Async.startFuture(func, Schedulers.computation());, +++ b/rxjava-contrib/rxjava-computation-expressions/src/test/java/rx/operators/OperationConditionalsTest.java, +        Observable<Integer> source1 = Observable.from(1, 2, 3).subscribeOn(Schedulers.trampoline());, +++ /dev/null, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperationDeferFutureTest.java, +            Observable<Integer> result = Async.deferFuture(func, Schedulers.computation());, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperationForEachFutureTest.java, +                    .subscribeOn(Schedulers.computation());, +                    .subscribeOn(Schedulers.computation());, +                .subscribeOn(Schedulers.computation());, +                .subscribeOn(Schedulers.computation());, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperationStartFutureTest.java, +            Observable<Integer> result = Async.startFuture(func, Schedulers.computation());, +++ b/rxjava-contrib/rxjava-computation-expressions/src/test/java/rx/operators/OperationConditionalsTest.java, +        Observable<Integer> source1 = Observable.from(1, 2, 3).subscribeOn(Schedulers.trampoline());, +++ b/rxjava-core/src/main/java/rx/operators/OperationBuffer.java, +        return buffer(source, timespan, unit, Schedulers.computation());, +        return buffer(source, timespan, unit, count, Schedulers.computation());, +        return buffer(source, timespan, timeshift, unit, Schedulers.computation());, +++ /dev/null, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperationDeferFutureTest.java, +            Observable<Integer> result = Async.deferFuture(func, Schedulers.computation());, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperationForEachFutureTest.java, +                    .subscribeOn(Schedulers.computation());, +                    .subscribeOn(Schedulers.computation());, +                .subscribeOn(Schedulers.computation());, +                .subscribeOn(Schedulers.computation());, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperationStartFutureTest.java, +            Observable<Integer> result = Async.startFuture(func, Schedulers.computation());, +++ b/rxjava-contrib/rxjava-computation-expressions/src/test/java/rx/operators/OperationConditionalsTest.java, +        Observable<Integer> source1 = Observable.from(1, 2, 3).subscribeOn(Schedulers.trampoline());, +++ b/rxjava-core/src/main/java/rx/operators/OperationBuffer.java, +        return buffer(source, timespan, unit, Schedulers.computation());, +        return buffer(source, timespan, unit, count, Schedulers.computation());, +        return buffer(source, timespan, timeshift, unit, Schedulers.computation());, +++ b/rxjava-core/src/main/java/rx/operators/OperationWindow.java, +        return window(source, timespan, unit, Schedulers.computation());, +        return window(source, timespan, unit, count, Schedulers.computation());, +        return window(source, timespan, timeshift, unit, Schedulers.computation());, +++ /dev/null, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperationDeferFutureTest.java, +            Observable<Integer> result = Async.deferFuture(func, Schedulers.computation());, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperationForEachFutureTest.java, +                    .subscribeOn(Schedulers.computation());, +                    .subscribeOn(Schedulers.computation());, +                .subscribeOn(Schedulers.computation());, +                .subscribeOn(Schedulers.computation());, +++ b/rxjava-contrib/rxjava-async-util/src/test/java/rx/util/async/operators/OperationStartFutureTest.java, +            Observable<Integer> result = Async.startFuture(func, Schedulers.computation());, +++ b/rxjava-contrib/rxjava-computation-expressions/src/test/java/rx/operators/OperationConditionalsTest.java, +        Observable<Integer> source1 = Observable.from(1, 2, 3).subscribeOn(Schedulers.trampoline());, +++ b/rxjava-core/src/main/java/rx/operators/OperationBuffer.java, +        return buffer(source, timespan, unit, Schedulers.computation());, +        return buffer(source, timespan, unit, count, Schedulers.computation());, +        return buffer(source, timespan, timeshift, unit, Schedulers.computation());, +++ b/rxjava-core/src/main/java/rx/operators/OperationWindow.java, +        return window(source, timespan, unit, Schedulers.computation());, +        return window(source, timespan, unit, count, Schedulers.computation());, +        return window(source, timespan, timeshift, unit, Schedulers.computation());, +++ b/rxjava-core/src/main/java/rx/schedulers/ComputationScheduler.java, +package rx.schedulers;, +, +import java.util.concurrent.ThreadFactory;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicInteger;, +, +import rx.Scheduler;, +import rx.Subscription;, +import rx.functions.Action0;]