[+++ b/src/main/java/rx/Subscriber.java, +        this.op = null;, +        this.cs = new SubscriptionList();, +        this.cs = op.cs;, +++ b/src/main/java/rx/Subscriber.java, +        this.op = null;, +        this.cs = new SubscriptionList();, +        this.cs = op.cs;, +++ b/src/main/java/rx/internal/operators/OperatorTakeWhile.java, +        return new Subscriber<T>(subscriber) {, +++ b/src/main/java/rx/Subscriber.java, +        this.op = null;, +        this.cs = new SubscriptionList();, +        this.cs = op.cs;, +++ b/src/main/java/rx/internal/operators/OperatorTakeWhile.java, +        return new Subscriber<T>(subscriber) {, +++ b/src/main/java/rx/schedulers/EventLoopsScheduler.java, +    /** , +     * Key to setting the maximum number of computation scheduler threads., +     * Zero or less is interpreted as use available. Capped by available., +     */, +    static final String KEY_MAX_THREADS = "rx.scheduler.max-computation-threads";, +    /** The maximum number of computation scheduler threads. */, +    static final int MAX_THREADS;, +    static {, +        int maxThreads = Integer.getInteger(KEY_MAX_THREADS, 0);, +        int ncpu = Runtime.getRuntime().availableProcessors();, +        int max;, +        if (maxThreads <= 0 || maxThreads > ncpu) {, +            max = ncpu;, +        } else {, +            max = maxThreads;, +        }, +        MAX_THREADS = max;, +    }, +            this.cores = MAX_THREADS;, +++ b/src/main/java/rx/Subscriber.java, +        this.op = null;, +        this.cs = new SubscriptionList();, +        this.cs = op.cs;, +++ b/src/main/java/rx/internal/operators/OperatorTakeWhile.java, +        return new Subscriber<T>(subscriber) {, +++ b/src/main/java/rx/schedulers/EventLoopsScheduler.java, +    /** , +     * Key to setting the maximum number of computation scheduler threads., +     * Zero or less is interpreted as use available. Capped by available., +     */, +    static final String KEY_MAX_THREADS = "rx.scheduler.max-computation-threads";, +    /** The maximum number of computation scheduler threads. */, +    static final int MAX_THREADS;, +    static {, +        int maxThreads = Integer.getInteger(KEY_MAX_THREADS, 0);, +        int ncpu = Runtime.getRuntime().availableProcessors();, +        int max;, +        if (maxThreads <= 0 || maxThreads > ncpu) {, +            max = ncpu;, +        } else {, +            max = maxThreads;, +        }, +        MAX_THREADS = max;, +    }, +            this.cores = MAX_THREADS;, +++ b/src/test/java/rx/internal/operators/OperatorTakeWhileTest.java, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import org.junit.Test;, +import rx.Observable;, +import rx.Observer;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.functions.Func2;, +import rx.subjects.PublishSubject;, +import rx.subjects.Subject;]