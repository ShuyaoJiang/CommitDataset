[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableConcatMapEager.java, +            InnerQueuedSubscriber<R> inner = current;, +            current = null;, +, +            if (inner != null) {, +                inner.cancel();, +            }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableConcatMapEager.java, +            InnerQueuedSubscriber<R> inner = current;, +            current = null;, +, +            if (inner != null) {, +                inner.cancel();, +            }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableConcatMapEager.java, +            if (cancelled) {, +                return;, +            }, +            upstream.dispose();, +, +            drainAndDispose();, +        }, +, +        void drainAndDispose() {, +                do {, +                } while (decrementAndGet() != 0);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableConcatMapEager.java, +            InnerQueuedSubscriber<R> inner = current;, +            current = null;, +, +            if (inner != null) {, +                inner.cancel();, +            }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableConcatMapEager.java, +            if (cancelled) {, +                return;, +            }, +            upstream.dispose();, +, +            drainAndDispose();, +        }, +, +        void drainAndDispose() {, +                do {, +                } while (decrementAndGet() != 0);, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableConcatMapEagerTest.java, +, +    @Test, +    public void cancelActive() {, +        PublishProcessor<Integer> pp1 = PublishProcessor.create();, +        PublishProcessor<Integer> pp2 = PublishProcessor.create();, +, +        TestSubscriber<Integer> ts = Flowable, +                .concatEager(Flowable.just(pp1, pp2)), +                .test();, +, +        assertTrue(pp1.hasSubscribers());, +        assertTrue(pp2.hasSubscribers());, +, +        ts.cancel();, +, +        assertFalse(pp1.hasSubscribers());, +        assertFalse(pp2.hasSubscribers());, +    }, +, +    @Test, +    public void cancelNoInnerYet() {, +        PublishProcessor<Flowable<Integer>> pp1 = PublishProcessor.create();, +, +        TestSubscriber<Integer> ts = Flowable, +                .concatEager(pp1), +                .test();, +, +        assertTrue(pp1.hasSubscribers());, +, +        ts.cancel();, +, +        assertFalse(pp1.hasSubscribers());, +    }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableConcatMapEager.java, +            InnerQueuedSubscriber<R> inner = current;, +            current = null;, +, +            if (inner != null) {, +                inner.cancel();, +            }, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableConcatMapEager.java, +            if (cancelled) {, +                return;, +            }, +            upstream.dispose();, +, +            drainAndDispose();, +        }, +, +        void drainAndDispose() {, +                do {, +                } while (decrementAndGet() != 0);, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableConcatMapEagerTest.java, +]