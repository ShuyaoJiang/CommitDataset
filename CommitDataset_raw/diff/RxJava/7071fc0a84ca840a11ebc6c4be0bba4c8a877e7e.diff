[+++ b/src/main/java/rx/internal/operators/OperatorObserveOn.java, +                for (;;) {, +                    if (child.isUnsubscribed()), +                        return;, +++ b/src/main/java/rx/internal/operators/OperatorObserveOn.java, +                for (;;) {, +                    if (child.isUnsubscribed()), +                        return;, +++ b/src/test/java/rx/internal/operators/OperatorObserveOnTest.java, +import java.util.ArrayList;, +import java.util.Collections;, +    @Test, +    public void testNoMoreRequestsAfterUnsubscribe() throws InterruptedException {, +        final CountDownLatch latch = new CountDownLatch(1);, +        final List<Long> requests = Collections.synchronizedList(new ArrayList<Long>());, +        Observable.range(1, 1000000), +                .doOnRequest(new Action1<Long>() {, +, +                    @Override, +                    public void call(Long n) {, +                        requests.add(n);, +                    }, +                }), +                .observeOn(Schedulers.io()), +                .subscribe(new Subscriber<Integer>() {, +, +                    @Override, +                    public void onStart() {, +                        request(1);, +                    }, +, +                    @Override, +                    public void onCompleted() {, +                    }, +, +                    @Override, +                    public void onError(Throwable e) {, +                    }, +, +                    @Override, +                    public void onNext(Integer t) {, +                        unsubscribe();, +                        latch.countDown();, +                    }, +                });, +        assertTrue(latch.await(10, TimeUnit.SECONDS));, +        assertEquals(1, requests.size());, +    }, +    ]