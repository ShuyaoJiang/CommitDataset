[+++ b/src/main/java/rx/internal/operators/OnSubscribeRefCount.java, +                // handle unsubscribing from the base subscription, +                subscriber.add(disconnect());, +, +                source.unsafeSubscribe(subscriber);, +, +                    // handle unsubscribing from the base subscription, +                    subscriber.add(disconnect());, +, +                    source.unsafeSubscribe(subscriber);, +    private Subscription disconnect() {, +++ b/src/main/java/rx/internal/operators/OnSubscribeRefCount.java, +                // handle unsubscribing from the base subscription, +                subscriber.add(disconnect());, +, +                source.unsafeSubscribe(subscriber);, +, +                    // handle unsubscribing from the base subscription, +                    subscriber.add(disconnect());, +, +                    source.unsafeSubscribe(subscriber);, +    private Subscription disconnect() {, +++ b/src/test/java/rx/BackpressureTests.java, +import static org.junit.Assert.*;, +import java.util.concurrent.*;, +import java.util.concurrent.atomic.*;, +import org.junit.*;, +import rx.functions.*;, +import rx.test.TestObstructionDetection;, +    @After, +    public void doAfterTest() {, +        TestObstructionDetection.checkObstruction();, +    }, +    , +    @Ignore // the test is non-deterministic and can't be made deterministic, +++ b/src/main/java/rx/internal/operators/OnSubscribeRefCount.java, +                // handle unsubscribing from the base subscription, +                subscriber.add(disconnect());, +, +                source.unsafeSubscribe(subscriber);, +, +                    // handle unsubscribing from the base subscription, +                    subscriber.add(disconnect());, +, +                    source.unsafeSubscribe(subscriber);, +    private Subscription disconnect() {, +++ b/src/test/java/rx/BackpressureTests.java, +import static org.junit.Assert.*;, +import java.util.concurrent.*;, +import java.util.concurrent.atomic.*;, +import org.junit.*;, +import rx.functions.*;, +import rx.test.TestObstructionDetection;, +    @After, +    public void doAfterTest() {, +        TestObstructionDetection.checkObstruction();, +    }, +    , +    @Ignore // the test is non-deterministic and can't be made deterministic, +++ b/src/test/java/rx/internal/operators/OnSubscribeRefCountTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.verify;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.InOrder;, +import org.mockito.MockitoAnnotations;, +import rx.Observable.OnSubscribe;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.functions.Action0;, +import rx.functions.Action1;, +import rx.functions.Func2;, +import rx.observers.Subscribers;, +import rx.observers.TestSubscriber;, +import rx.schedulers.Schedulers;, +import rx.schedulers.TestScheduler;, +++ b/src/main/java/rx/internal/operators/OnSubscribeRefCount.java, +                // handle unsubscribing from the base subscription, +                subscriber.add(disconnect());, +, +                source.unsafeSubscribe(subscriber);, +, +                    // handle unsubscribing from the base subscription, +                    subscriber.add(disconnect());, +, +                    source.unsafeSubscribe(subscriber);, +    private Subscription disconnect() {, +++ b/src/test/java/rx/BackpressureTests.java, +import static org.junit.Assert.*;, +import java.util.concurrent.*;]