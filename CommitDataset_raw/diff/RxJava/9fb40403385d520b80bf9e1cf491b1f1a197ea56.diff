[+++ b/src/main/java/io/reactivex/Flowable.java, +    public static <T> Flowable<T> mergeArray(int maxConcurrency, int bufferSize, Publisher<? extends T>... sources) {, +    public static <T> Flowable<T> mergeArray(Publisher<? extends T>... sources) {, +    public static <T> Flowable<T> mergeArrayDelayError(int maxConcurrency, int bufferSize, Publisher<? extends T>... sources) {, +    public static <T> Flowable<T> mergeArrayDelayError(Publisher<? extends T>... sources) {, +++ b/src/main/java/io/reactivex/Flowable.java, +    public static <T> Flowable<T> mergeArray(int maxConcurrency, int bufferSize, Publisher<? extends T>... sources) {, +    public static <T> Flowable<T> mergeArray(Publisher<? extends T>... sources) {, +    public static <T> Flowable<T> mergeArrayDelayError(int maxConcurrency, int bufferSize, Publisher<? extends T>... sources) {, +    public static <T> Flowable<T> mergeArrayDelayError(Publisher<? extends T>... sources) {, +++ b/src/main/java/io/reactivex/Observable.java, +    public static <T> Observable<T> mergeArray(int maxConcurrency, int bufferSize, ObservableSource<? extends T>... sources) {, +    public static <T> Observable<T> mergeArray(ObservableSource<? extends T>... sources) {, +    public static <T> Observable<T> mergeArrayDelayError(int maxConcurrency, int bufferSize, ObservableSource<? extends T>... sources) {, +    public static <T> Observable<T> mergeArrayDelayError(ObservableSource<? extends T>... sources) {, +++ b/src/main/java/io/reactivex/Flowable.java, +    public static <T> Flowable<T> mergeArray(int maxConcurrency, int bufferSize, Publisher<? extends T>... sources) {, +    public static <T> Flowable<T> mergeArray(Publisher<? extends T>... sources) {, +    public static <T> Flowable<T> mergeArrayDelayError(int maxConcurrency, int bufferSize, Publisher<? extends T>... sources) {, +    public static <T> Flowable<T> mergeArrayDelayError(Publisher<? extends T>... sources) {, +++ b/src/main/java/io/reactivex/Observable.java, +    public static <T> Observable<T> mergeArray(int maxConcurrency, int bufferSize, ObservableSource<? extends T>... sources) {, +    public static <T> Observable<T> mergeArray(ObservableSource<? extends T>... sources) {, +    public static <T> Observable<T> mergeArrayDelayError(int maxConcurrency, int bufferSize, ObservableSource<? extends T>... sources) {, +    public static <T> Observable<T> mergeArrayDelayError(ObservableSource<? extends T>... sources) {, +++ b/src/main/java/io/reactivex/Single.java, +++ b/src/main/java/io/reactivex/Flowable.java, +    public static <T> Flowable<T> mergeArray(int maxConcurrency, int bufferSize, Publisher<? extends T>... sources) {, +    public static <T> Flowable<T> mergeArray(Publisher<? extends T>... sources) {, +    public static <T> Flowable<T> mergeArrayDelayError(int maxConcurrency, int bufferSize, Publisher<? extends T>... sources) {, +    public static <T> Flowable<T> mergeArrayDelayError(Publisher<? extends T>... sources) {, +++ b/src/main/java/io/reactivex/Observable.java, +    public static <T> Observable<T> mergeArray(int maxConcurrency, int bufferSize, ObservableSource<? extends T>... sources) {, +    public static <T> Observable<T> mergeArray(ObservableSource<? extends T>... sources) {, +    public static <T> Observable<T> mergeArrayDelayError(int maxConcurrency, int bufferSize, ObservableSource<? extends T>... sources) {, +    public static <T> Observable<T> mergeArrayDelayError(ObservableSource<? extends T>... sources) {, +++ b/src/main/java/io/reactivex/Single.java, +++ b/src/test/java/io/reactivex/flowable/FlowableNullTests.java, +        Flowable.mergeArray(128, 128, (Publisher<Object>[])null);, +        Flowable.mergeArray(128, 128, just1, null).blockingLast();, +        Flowable.mergeArrayDelayError(128, 128, (Publisher<Object>[])null);, +        Flowable.mergeArrayDelayError(128, 128, just1, null).blockingLast();, +++ b/src/main/java/io/reactivex/Flowable.java, +    public static <T> Flowable<T> mergeArray(int maxConcurrency, int bufferSize, Publisher<? extends T>... sources) {, +    public static <T> Flowable<T> mergeArray(Publisher<? extends T>... sources) {, +    public static <T> Flowable<T> mergeArrayDelayError(int maxConcurrency, int bufferSize, Publisher<? extends T>... sources) {, +    public static <T> Flowable<T> mergeArrayDelayError(Publisher<? extends T>... sources) {, +++ b/src/main/java/io/reactivex/Observable.java, +    public static <T> Observable<T> mergeArray(int maxConcurrency, int bufferSize, ObservableSource<? extends T>... sources) {, +    public static <T> Observable<T> mergeArray(ObservableSource<? extends T>... sources) {, +    public static <T> Observable<T> mergeArrayDelayError(int maxConcurrency, int bufferSize, ObservableSource<? extends T>... sources) {, +    public static <T> Observable<T> mergeArrayDelayError(ObservableSource<? extends T>... sources) {, +++ b/src/main/java/io/reactivex/Single.java, +++ b/src/test/java/io/reactivex/flowable/FlowableNullTests.java, +        Flowable.mergeArray(128, 128, (Publisher<Object>[])null);, +        Flowable.mergeArray(128, 128, just1, null).blockingLast();, +        Flowable.mergeArrayDelayError(128, 128, (Publisher<Object>[])null);, +        Flowable.mergeArrayDelayError(128, 128, just1, null).blockingLast();, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableMergeTest.java, +        Flowable.mergeArray(1, 128, new Flowable[] { ps1, ps2 }).subscribe(ts);, +++ b/src/main/java/io/reactivex/Flowable.java, +    public static <T> Flowable<T> mergeArray(int maxConcurrency, int bufferSize, Publisher<? extends T>... sources) {, +    public static <T> Flowable<T> mergeArray(Publisher<? extends T>... sources) {, +    public static <T> Flowable<T> mergeArrayDelayError(int maxConcurrency, int bufferSize, Publisher<? extends T>... sources) {, +    public static <T> Flowable<T> mergeArrayDelayError(Publisher<? extends T>... sources) {, +++ b/src/main/java/io/reactivex/Observable.java, +    public static <T> Observable<T> mergeArray(int maxConcurrency, int bufferSize, ObservableSource<? extends T>... sources) {, +    public static <T> Observable<T> mergeArray(ObservableSource<? extends T>... sources) {, +    public static <T> Observable<T> mergeArrayDelayError(int maxConcurrency, int bufferSize, ObservableSource<? extends T>... sources) {, +    public static <T> Observable<T> mergeArrayDelayError(ObservableSource<? extends T>... sources) {, +++ b/src/main/java/io/reactivex/Single.java, +++ b/src/test/java/io/reactivex/flowable/FlowableNullTests.java, +        Flowable.mergeArray(128, 128, (Publisher<Object>[])null);, +        Flowable.mergeArray(128, 128, just1, null).blockingLast();, +        Flowable.mergeArrayDelayError(128, 128, (Publisher<Object>[])null);, +        Flowable.mergeArrayDelayError(128, 128, just1, null).blockingLast();, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableMergeTest.java, +        Flowable.mergeArray(1, 128, new Flowable[] { ps1, ps2 }).subscribe(ts);, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableWithLatestFromTest.java, +++ b/src/main/java/io/reactivex/Flowable.java, +    public static <T> Flowable<T> mergeArray(int maxConcurrency, int bufferSize, Publisher<? extends T>... sources) {, +    public static <T> Flowable<T> mergeArray(Publisher<? extends T>... sources) {, +    public static <T> Flowable<T> mergeArrayDelayError(int maxConcurrency, int bufferSize, Publisher<? extends T>... sources) {, +    public static <T> Flowable<T> mergeArrayDelayError(Publisher<? extends T>... sources) {, +++ b/src/main/java/io/reactivex/Observable.java, +    public static <T> Observable<T> mergeArray(int maxConcurrency, int bufferSize, ObservableSource<? extends T>... sources) {, +    public static <T> Observable<T> mergeArray(ObservableSource<? extends T>... sources) {, +    public static <T> Observable<T> mergeArrayDelayError(int maxConcurrency, int bufferSize, ObservableSource<? extends T>... sources) {, +    public static <T> Observable<T> mergeArrayDelayError(ObservableSource<? extends T>... sources) {, +++ b/src/main/java/io/reactivex/Single.java, +++ b/src/test/java/io/reactivex/flowable/FlowableNullTests.java, +        Flowable.mergeArray(128, 128, (Publisher<Object>[])null);, +        Flowable.mergeArray(128, 128, just1, null).blockingLast();, +        Flowable.mergeArrayDelayError(128, 128, (Publisher<Object>[])null);, +        Flowable.mergeArrayDelayError(128, 128, just1, null).blockingLast();, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableMergeTest.java, +        Flowable.mergeArray(1, 128, new Flowable[] { ps1, ps2 }).subscribe(ts);, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableWithLatestFromTest.java, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableWithLatestFromTest.java, +++ b/src/main/java/io/reactivex/Flowable.java]