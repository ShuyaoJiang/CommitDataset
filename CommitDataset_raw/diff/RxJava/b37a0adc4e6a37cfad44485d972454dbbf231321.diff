[+++ b/language-adaptors/rxjava-scala/src/examples/java/rx/lang/scala/examples/MovieLibUsage.java, +import static rx.lang.scala.JavaConversions.toScalaObservable;, +++ b/language-adaptors/rxjava-scala/src/examples/java/rx/lang/scala/examples/MovieLibUsage.java, +import static rx.lang.scala.JavaConversions.toScalaObservable;, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import rx.lang.scala._, +    val o = Observable.from(1 to 18), +    (for ((o, i) <- Observable.from(1 to 18).window(5).zipWithIndex; n <- o), +      yield s"Observable#$i emits $n", +    ).subscribe(output(_)), +  @Ignore // TODO something's bad here, +    Observable.from(1 to 10).parallel(work(_)).toBlockingObservable.foreach(println(_)), +    work(Observable.from(1 to 10)).toBlockingObservable.foreach(println(_)), +    val o2 = Observable.error(new IOException("Oops")), +    Thread.sleep(500), +  @Test def createExample() {, +    val o = Observable.create[String](observer => {, +      // this is bad because you cannot unsubscribe!, +      observer.onNext("a"), +      observer.onNext("b"), +      observer.onCompleted(), +      Subscription {}, +    }), +    o.subscribe(println(_)), +  }, +, +++ b/language-adaptors/rxjava-scala/src/examples/java/rx/lang/scala/examples/MovieLibUsage.java, +import static rx.lang.scala.JavaConversions.toScalaObservable;, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import rx.lang.scala._, +    val o = Observable.from(1 to 18), +    (for ((o, i) <- Observable.from(1 to 18).window(5).zipWithIndex; n <- o), +      yield s"Observable#$i emits $n", +    ).subscribe(output(_)), +  @Ignore // TODO something's bad here, +    Observable.from(1 to 10).parallel(work(_)).toBlockingObservable.foreach(println(_)), +    work(Observable.from(1 to 10)).toBlockingObservable.foreach(println(_)), +    val o2 = Observable.error(new IOException("Oops")), +    Thread.sleep(500), +  @Test def createExample() {, +    val o = Observable.create[String](observer => {, +      // this is bad because you cannot unsubscribe!, +      observer.onNext("a"), +      observer.onNext("b"), +      observer.onCompleted(), +      Subscription {}, +    }), +    o.subscribe(println(_)), +  }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +import language.implicitConversions, +import rx.lang.scala.JavaConversions._, + * This object only contains conversions between functions. For conversions between types,, + * use [[rx.lang.scala.JavaConversions]]., +        f(obs), +++ b/language-adaptors/rxjava-scala/src/examples/java/rx/lang/scala/examples/MovieLibUsage.java, +import static rx.lang.scala.JavaConversions.toScalaObservable;, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import rx.lang.scala._, +    val o = Observable.from(1 to 18), +    (for ((o, i) <- Observable.from(1 to 18).window(5).zipWithIndex; n <- o), +      yield s"Observable#$i emits $n", +    ).subscribe(output(_)), +  @Ignore // TODO something's bad here, +    Observable.from(1 to 10).parallel(work(_)).toBlockingObservable.foreach(println(_)), +    work(Observable.from(1 to 10)).toBlockingObservable.foreach(println(_)), +    val o2 = Observable.error(new IOException("Oops")), +    Thread.sleep(500), +  @Test def createExample() {, +    val o = Observable.create[String](observer => {, +      // this is bad because you cannot unsubscribe!, +      observer.onNext("a"), +      observer.onNext("b"), +      observer.onCompleted(), +      Subscription {}, +    }), +    o.subscribe(println(_)), +  }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/ImplicitFunctionConversions.scala, +import language.implicitConversions, +import rx.lang.scala.JavaConversions._, + * This object only contains conversions between functions. For conversions between types,, + * use [[rx.lang.scala.JavaConversions]]., +        f(obs), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +package rx.lang.scala, +, +/**, + * These functions convert between RxScala types RxJava types., + * Pure Scala projects won't need them, but they will be useful for polyglot projects., + * This object only contains conversions between types. For conversions between functions,, + * use [[rx.lang.scala.ImplicitFunctionConversions]]., + */, +object JavaConversions {, +  import language.implicitConversions, +  , +  implicit def toJavaNotification[T](s: Notification[T]): rx.Notification[_ <: T] = s.asJava, +  ]