[+++ b/src/main/java/rx/internal/util/SubscriptionIndexedRingBuffer.java, +    public SubscriptionIndexedRingBuffer(final T... subscriptions) {, +        for (T t : subscriptions) {, +            this.subscriptions.add(t);, +        }, +    }, +, +++ b/src/main/java/rx/internal/util/SubscriptionIndexedRingBuffer.java, +    public SubscriptionIndexedRingBuffer(final T... subscriptions) {, +        for (T t : subscriptions) {, +            this.subscriptions.add(t);, +        }, +    }, +, +++ b/src/main/java/rx/internal/util/SubscriptionRandomList.java, +import java.util.Arrays;, +import rx.exceptions.*;, +    public SubscriptionRandomList(final T... subscriptions) {, +        this.subscriptions = new HashSet<T>(Arrays.asList(subscriptions));, +    }, +, +++ b/src/main/java/rx/internal/util/SubscriptionIndexedRingBuffer.java, +    public SubscriptionIndexedRingBuffer(final T... subscriptions) {, +        for (T t : subscriptions) {, +            this.subscriptions.add(t);, +        }, +    }, +, +++ b/src/main/java/rx/internal/util/SubscriptionRandomList.java, +import java.util.Arrays;, +import rx.exceptions.*;, +    public SubscriptionRandomList(final T... subscriptions) {, +        this.subscriptions = new HashSet<T>(Arrays.asList(subscriptions));, +    }, +, +++ b/src/main/java/rx/plugins/RxJavaErrorHandler.java, +import rx.exceptions.OnErrorThrowable;, +++ b/src/main/java/rx/internal/util/SubscriptionIndexedRingBuffer.java, +    public SubscriptionIndexedRingBuffer(final T... subscriptions) {, +        for (T t : subscriptions) {, +            this.subscriptions.add(t);, +        }, +    }, +, +++ b/src/main/java/rx/internal/util/SubscriptionRandomList.java, +import java.util.Arrays;, +import rx.exceptions.*;, +    public SubscriptionRandomList(final T... subscriptions) {, +        this.subscriptions = new HashSet<T>(Arrays.asList(subscriptions));, +    }, +, +++ b/src/main/java/rx/plugins/RxJavaErrorHandler.java, +import rx.exceptions.OnErrorThrowable;, +++ b/src/test/java/rx/internal/operators/OperatorRetryTest.java, +                        int i = count.getAndIncrement();, +                        if (i < numFailures) {, +                            o.onError(new RuntimeException("forced failure: " + (i + 1)));, +                            o.onError(new RuntimeException("forced failure: " + (i + 1)));, +    , +        ExecutorService exec = Executors.newFixedThreadPool(Math.max(ncpu / 2, 2));, +        int m = 5000;, +                        origin.retry(), +                        .observeOn(Schedulers.computation()).unsafeSubscribe(ts);, +                        ts.awaitTerminalEvent(2500, TimeUnit.MILLISECONDS);, +                        if (ts.getOnCompletedEvents().size() != 1) {, +                            completions.put(j, ts.getOnCompletedEvents().size());, +                        if (ts.getOnNextEvents().size() != NUM_RETRIES + 2) {, +                            data.put(j, ts.getOnNextEvents());, +            System.out.println(allSequenceFrequency(data));, +        }, +        if (exceptions.size() > 0) {, +            System.out.println(exceptions);, +        }, +        if (completions.size() > 0) {, +            System.out.println(completions);, +        }, +        if (data.size() > 0) {, +            fail("Data content mismatch: " + allSequenceFrequency(data));, +    static <T> StringBuilder allSequenceFrequency(Map<Integer, List<T>> its) {, +        StringBuilder b = new StringBuilder();, +        for (Map.Entry<Integer, List<T>> e : its.entrySet()) {, +            if (b.length() > 0) {, +                b.append(", ");, +            }, +            b.append(e.getKey()).append("={");, +            b.append(sequenceFrequency(e.getValue()));, +            b.append("}");, +        }, +        return b;, +    }, +    static <T> StringBuilder sequenceFrequency(Iterable<T> it) {, +        StringBuilder sb = new StringBuilder();, +        , +        Object prev = null;, +        int cnt = 0;, +        , +        for (Object curr : it) {, +            if (sb.length() > 0) {, +                if (!curr.equals(prev)) {, +                    if (cnt > 1) {]