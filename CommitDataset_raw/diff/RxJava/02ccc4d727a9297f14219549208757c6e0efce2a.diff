[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorGroupBy;, +    final Action1<Operator<? super T>> f;, +    protected Observable(Action1<Operator<? super T>> f) {, +    public final static <T> Observable<T> create(final Action1<Operator<? super T>> f) {, +        return new Observable<T>(new Action1<Operator<? super T>>() {, +            public void call(Operator<? super T> o) {, +                o.add(func.onSubscribe(o));, +    public <R> Observable<R> bind(final Func1<Operator<? super R>, Operator<? super T>> bind) {, +        return new Observable<R>(new Action1<Operator<? super R>>() {, +            public void call(Operator<? super R> o) {, +                subscribe(bind.call(o));, +        return timer(initialDelay, period, unit, Schedulers.computation());, +        return timer(delay, unit, Schedulers.computation());, +        return OperationDelay.delay(this, delay, unit, Schedulers.computation());, +        return delaySubscription(delay, unit, Schedulers.computation());, +        return bind(new OperatorGroupBy<K, T>(keySelector));, +        return null;, +        return replay(selector, bufferSize, time, unit, Schedulers.computation());, +        return replay(selector, time, unit, Schedulers.computation());, +        return replay(bufferSize, time, unit, Schedulers.computation());, +        return replay(time, unit, Schedulers.computation());, +        return skip(time, unit, Schedulers.computation());, +        return skipLast(time, unit, Schedulers.computation());, +    public final void subscribe(Operator<? super T> o) {, +        f.call(o);, +        Action1<Operator<? super T>> onSubscribeFunction = hook.onSubscribeStart(this, f);, +            Operator<? super T> op = null;, +                op = Operator.create(observer, new CompositeSubscription());, +                onSubscribeFunction.call(op);, +                // TODO this doesn't seem correct any longer with the Operator and injecting of CompositeSubscription, +                SafeObservableSubscription subscription = new SafeObservableSubscription(op);, +                op = Operator.create(new SafeObserver<T>(subscription, observer), new CompositeSubscription());, +                onSubscribeFunction.call(op);, +            return hook.onSubscribeReturn(this, op);, +        return take(time, unit, Schedulers.computation());, +        return takeLast(count, time, unit, Schedulers.computation());, +        return takeLast(time, unit, Schedulers.computation());, +            super(new Action1<Operator<? super T>>() {, +                public void call(Operator<? super T> observer) {, +            super(new Action1<Operator<? super T>>() {, +                public void call(Operator<? super T> observer) {, +    @SuppressWarnings("rawtypes"), +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorGroupBy;, +    final Action1<Operator<? super T>> f;, +    protected Observable(Action1<Operator<? super T>> f) {, +    public final static <T> Observable<T> create(final Action1<Operator<? super T>> f) {, +        return new Observable<T>(new Action1<Operator<? super T>>() {, +            public void call(Operator<? super T> o) {, +                o.add(func.onSubscribe(o));, +    public <R> Observable<R> bind(final Func1<Operator<? super R>, Operator<? super T>> bind) {, +        return new Observable<R>(new Action1<Operator<? super R>>() {, +            public void call(Operator<? super R> o) {, +                subscribe(bind.call(o));, +        return timer(initialDelay, period, unit, Schedulers.computation());, +        return timer(delay, unit, Schedulers.computation());, +        return OperationDelay.delay(this, delay, unit, Schedulers.computation());, +        return delaySubscription(delay, unit, Schedulers.computation());, +        return bind(new OperatorGroupBy<K, T>(keySelector));, +        return null;, +        return replay(selector, bufferSize, time, unit, Schedulers.computation());, +        return replay(selector, time, unit, Schedulers.computation());, +        return replay(bufferSize, time, unit, Schedulers.computation());, +        return replay(time, unit, Schedulers.computation());, +        return skip(time, unit, Schedulers.computation());, +        return skipLast(time, unit, Schedulers.computation());, +    public final void subscribe(Operator<? super T> o) {, +        f.call(o);, +        Action1<Operator<? super T>> onSubscribeFunction = hook.onSubscribeStart(this, f);, +            Operator<? super T> op = null;, +                op = Operator.create(observer, new CompositeSubscription());, +                onSubscribeFunction.call(op);, +                // TODO this doesn't seem correct any longer with the Operator and injecting of CompositeSubscription, +                SafeObservableSubscription subscription = new SafeObservableSubscription(op);, +                op = Operator.create(new SafeObserver<T>(subscription, observer), new CompositeSubscription());, +                onSubscribeFunction.call(op);, +            return hook.onSubscribeReturn(this, op);, +        return take(time, unit, Schedulers.computation());, +        return takeLast(count, time, unit, Schedulers.computation());, +        return takeLast(time, unit, Schedulers.computation());, +            super(new Action1<Operator<? super T>>() {, +                public void call(Operator<? super T> observer) {, +            super(new Action1<Operator<? super T>>() {, +                public void call(Operator<? super T> observer) {, +    @SuppressWarnings("rawtypes"), +++ b/rxjava-core/src/main/java/rx/observables/ConnectableObservable.java, +import rx.Operator;, +import rx.util.functions.Action1;, +    protected ConnectableObservable(Action1<Operator<? super T>> onSubscribe) {, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorGroupBy;, +    final Action1<Operator<? super T>> f;, +    protected Observable(Action1<Operator<? super T>> f) {, +    public final static <T> Observable<T> create(final Action1<Operator<? super T>> f) {, +        return new Observable<T>(new Action1<Operator<? super T>>() {, +            public void call(Operator<? super T> o) {, +                o.add(func.onSubscribe(o));, +    public <R> Observable<R> bind(final Func1<Operator<? super R>, Operator<? super T>> bind) {, +        return new Observable<R>(new Action1<Operator<? super R>>() {]