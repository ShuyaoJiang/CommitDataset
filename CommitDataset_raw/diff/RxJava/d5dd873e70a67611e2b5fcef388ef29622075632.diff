[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns an {@link Observable} that emits <code>true</code> if any element of the source {@link Observable} satisfies , +     * the given condition, otherwise <code>false</code>. Note: always emit <code>false</code> if the source {@link Observable} is empty., +     * <p>, +     * In Rx.Net this is the <code>any</code> operator but renamed in RxJava to better match Java naming idioms., +     * , +     * @param predicate, +     *            The condition to test every element., +     * @return A subscription function for creating the target Observable., +     * @see <a href= "http://msdn.microsoft.com/en-us/library/hh211993(v=vs.103).aspx" >MSDN: Observable.Any</a> Note: the description in this page is, +     *      wrong., +     */, +    public Observable<Boolean> exists(Func1<? super T, Boolean> predicate) {, +        return create(OperationAny.exists(this, predicate));, +    }, +    , +    /**, +     * Returns an {@link Observable} that emits <code>true</code> if the source {@link Observable} is empty, otherwise <code>false</code>., +     * <p>, +     * In Rx.Net this is negated as the <code>any</code> operator but renamed in RxJava to better match Java naming idioms., +     * , +     * @return A subscription function for creating the target Observable., +     * @see <a href= "http://msdn.microsoft.com/en-us/library/hh229905(v=vs.103).aspx" >MSDN: Observable.Any</a>, +     */, +    public Observable<Boolean> isEmpty() {, +        return create(OperationAny.isEmpty(this));, +    }, +    , +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns an {@link Observable} that emits <code>true</code> if any element of the source {@link Observable} satisfies , +     * the given condition, otherwise <code>false</code>. Note: always emit <code>false</code> if the source {@link Observable} is empty., +     * <p>, +     * In Rx.Net this is the <code>any</code> operator but renamed in RxJava to better match Java naming idioms., +     * , +     * @param predicate, +     *            The condition to test every element., +     * @return A subscription function for creating the target Observable., +     * @see <a href= "http://msdn.microsoft.com/en-us/library/hh211993(v=vs.103).aspx" >MSDN: Observable.Any</a> Note: the description in this page is, +     *      wrong., +     */, +    public Observable<Boolean> exists(Func1<? super T, Boolean> predicate) {, +        return create(OperationAny.exists(this, predicate));, +    }, +    , +    /**, +     * Returns an {@link Observable} that emits <code>true</code> if the source {@link Observable} is empty, otherwise <code>false</code>., +     * <p>, +     * In Rx.Net this is negated as the <code>any</code> operator but renamed in RxJava to better match Java naming idioms., +     * , +     * @return A subscription function for creating the target Observable., +     * @see <a href= "http://msdn.microsoft.com/en-us/library/hh229905(v=vs.103).aspx" >MSDN: Observable.Any</a>, +     */, +    public Observable<Boolean> isEmpty() {, +        return create(OperationAny.isEmpty(this));, +    }, +    , +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationAny.java, +import static org.mockito.Mockito.*;, +import static rx.util.functions.Functions.*;, +     * Returns an {@link Observable} that emits <code>true</code> if the source {@link Observable} is not empty, otherwise <code>false</code>., +    public static <T> OnSubscribeFunc<Boolean> any(Observable<? extends T> source) {, +        return new Any<T>(source, alwaysTrue(), false);, +    }, +    , +    public static <T> OnSubscribeFunc<Boolean> isEmpty(Observable<? extends T> source) {, +        return new Any<T>(source, alwaysTrue(), true);, +     * <code>false</code>. Note: always emit <code>false</code> if the source {@link Observable} is empty., +    public static <T> OnSubscribeFunc<Boolean> any(Observable<? extends T> source, Func1<? super T, Boolean> predicate) {, +        return new Any<T>(source, predicate, false);, +    }, +    , +    public static <T> OnSubscribeFunc<Boolean> exists(Observable<? extends T> source, Func1<? super T, Boolean> predicate) {, +        return any(source, predicate);, +        private final boolean returnOnEmpty;, +        private Any(Observable<? extends T> source, Func1<? super T, Boolean> predicate, boolean returnOnEmpty) {, +            this.returnOnEmpty = returnOnEmpty;, +                private final AtomicBoolean hasEmitted = new AtomicBoolean(false);, +                                observer.onNext(!returnOnEmpty);, +                                // this will work if the sequence is asynchronous, it, +                                // will have no effect on a synchronous observable, +                        observer.onNext(returnOnEmpty);, +            verify(aObserver, never()).onError(org.mockito.Matchers.any(Throwable.class));, +            verify(aObserver, times(1)).onCompleted();, +        }, +        , +        @Test, +        public void testIsEmptyWithTwoItems() {, +            Observable<Integer> w = Observable.from(1, 2);, +            Observable<Boolean> observable = Observable.create(isEmpty(w));, +, +            @SuppressWarnings("unchecked"), +            Observer<Boolean> aObserver = mock(Observer.class);, +            observable.subscribe(aObserver);, +            verify(aObserver, never()).onNext(true);, +            verify(aObserver, times(1)).onNext(false);, +            verify(aObserver, never()).onError(org.mockito.Matchers.any(Throwable.class));, +            verify(aObserver, never()).onError(org.mockito.Matchers.any(Throwable.class));, +            verify(aObserver, times(1)).onCompleted();]