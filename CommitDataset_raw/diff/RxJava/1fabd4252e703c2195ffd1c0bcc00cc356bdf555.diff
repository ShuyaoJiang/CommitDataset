[+++ b/rxjava-core/src/main/java/rx/operators/OperationCombineLatest.java, +import java.util.List;, +import java.util.Set;, +        private Set<CombineObserver<R, ?>> completed = new HashSet<CombineObserver<R, ?>>();, +        private Map<CombineObserver<R, ?>, Object> lastValue = new HashMap<CombineObserver<R, ?>, Object>();, +        , +        private Set<CombineObserver<R, ?>> hasLastValue = new HashSet<CombineObserver<R, ?>>();, +        private List<CombineObserver<R, ?>> observers = new LinkedList<CombineObserver<R, ?>>();, +        synchronized <T> void addObserver(CombineObserver<R, T> w) {, +          observers.add(w);, +        synchronized <T> void complete(CombineObserver<R, T> w) {, +            // store that this CombineLatestObserver is completed, +            if (completed.size() == observers.size()) {, +        synchronized <T> void error(CombineObserver<R, T> w, Exception e) {, +            Object[] argsToCombineLatest = new Object[observers.size()];, +                hasLastValue.add(w);, +                for (CombineObserver<R, ?> rw : observers) {, +                    if (!hasLastValue.contains(rw)) {, +                        // we don't have a value yet for each observer to combine, so we don't have a combined value yet either, +                // if we get to here this means all the queues have data, +                for (CombineObserver<R, ?> _w : observers) {, +            for (CombineObserver<R, ?> rw : observers) {, +            for (CombineObserver<R, ?> rw : observers) {, +            w2.Observer.onNext("2a");, +            w3.Observer.onNext("3a");, +            inOrder.verify(w).onNext("1a2a3a");, +            inOrder.verify(w, never()).onNext(anyString());, +            inOrder.verify(w, times(1)).onNext("1d2b3a");, +            @SuppressWarnings("unchecked"), +            inOrder.verify(w, never()).onNext(anyString());, +            verify(aObserver, times(1)).onNext("threeA");, +            verify(aObserver, times(1)).onNext("fourB");, +            verify(aObserver, times(1)).onNext("fourC");, +            InOrder inOrder = inOrder(aObserver);, +            , +            inOrder.verify(aObserver, never()).onError(any(Exception.class));, +            inOrder.verify(aObserver, never()).onCompleted();, +            inOrder.verify(aObserver, times(1)).onNext("twoA");, +            inOrder.verify(aObserver, never()).onError(any(Exception.class));, +            inOrder.verify(aObserver, times(1)).onCompleted();, +            inOrder.verify(aObserver, never()).onNext(anyString());, +            verify(aObserver, times(1)).onNext("two2");, +            verify(aObserver, times(1)).onNext("two2[4, 5, 6]");]