[+++ b/src/main/java/io/reactivex/Completable.java, +     * Returns a Completable instance that fires its onComplete event after the given delay elapsed., +     * Returns a Completable instance that fires its onComplete event after the given delay elapsed, +     * false if the timeout elapsed before this Completable terminated., +     * elapses, then returns null for normal termination or the emitted exception if any., +     * TimeoutException if the specified timeout elapsed before it, +     * Returns a Completable which calls the given onDispose callback if the child subscriber cancels, +        return doOnLifecycle(, +                Functions.emptyConsumer(),, +                Functions.emptyConsumer(),, +                Functions.EMPTY_ACTION,, +                Functions.EMPTY_ACTION,, +                onAfterTerminate,, +                Functions.EMPTY_ACTION);, +     * Converts this Completable into a Single which when this Completable completes normally,, +     * Converts this Completable into a Single which when this Completable completes normally,, +++ b/src/main/java/io/reactivex/Completable.java, +     * Returns a Completable instance that fires its onComplete event after the given delay elapsed., +     * Returns a Completable instance that fires its onComplete event after the given delay elapsed, +     * false if the timeout elapsed before this Completable terminated., +     * elapses, then returns null for normal termination or the emitted exception if any., +     * TimeoutException if the specified timeout elapsed before it, +     * Returns a Completable which calls the given onDispose callback if the child subscriber cancels, +        return doOnLifecycle(, +                Functions.emptyConsumer(),, +                Functions.emptyConsumer(),, +                Functions.EMPTY_ACTION,, +                Functions.EMPTY_ACTION,, +                onAfterTerminate,, +                Functions.EMPTY_ACTION);, +     * Converts this Completable into a Single which when this Completable completes normally,, +     * Converts this Completable into a Single which when this Completable completes normally,, +++ b/src/main/java/io/reactivex/Flowable.java, + * Reactive-Streams operates with {@code Publisher}s which {@code Flowable} extends. Many operators, +     * @param source1, +     * @param source2, +            Publisher<? extends T1> source1, Publisher<? extends T2> source2, , +        return combineLatest(f, source1, source2);, +     * @param source1, +     * @param source2, +     * @param source3, +            Publisher<? extends T1> source1, Publisher<? extends T2> source2, , +            Publisher<? extends T3> source3, , +        return combineLatest(Functions.toFunction(combiner), source1, source2, source3);, +     * @param source1, +     * @param source2, +     * @param source3, +     * @param source4, +            Publisher<? extends T1> source1, Publisher<? extends T2> source2, , +            Publisher<? extends T3> source3, Publisher<? extends T4> source4,, +        return combineLatest(Functions.toFunction(combiner), source1, source2, source3, source4);, +     * @param source1, +     * @param source2, +     * @param source3, +     * @param source4, +     * @param source5, +            Publisher<? extends T1> source1, Publisher<? extends T2> source2, , +            Publisher<? extends T3> source3, Publisher<? extends T4> source4,, +            Publisher<? extends T5> source5,, +        return combineLatest(Functions.toFunction(combiner), source1, source2, source3, source4, source5);, +     * @param source1, +     * @param source2, +     * @param source3, +     * @param source4, +     * @param source5, +     * @param source6, +            Publisher<? extends T1> source1, Publisher<? extends T2> source2, , +            Publisher<? extends T3> source3, Publisher<? extends T4> source4,, +            Publisher<? extends T5> source5, Publisher<? extends T6> source6,, +        return combineLatest(Functions.toFunction(combiner), source1, source2, source3, source4, source5, source6);, +     * @param source1, +     * @param source2, +     * @param source3, +     * @param source4, +     * @param source5, +     * @param source6, +     * @param source7, +            Publisher<? extends T1> source1, Publisher<? extends T2> source2, , +            Publisher<? extends T3> source3, Publisher<? extends T4> source4,, +            Publisher<? extends T5> source5, Publisher<? extends T6> source6,, +            Publisher<? extends T7> source7,, +        return combineLatest(Functions.toFunction(combiner), source1, source2, source3, source4, source5, source6, source7);, +     * @param source1, +     * @param source2, +     * @param source3, +     * @param source4, +     * @param source5, +     * @param source6, +     * @param source7, +     * @param source8, +            Publisher<? extends T1> source1, Publisher<? extends T2> source2, , +            Publisher<? extends T3> source3, Publisher<? extends T4> source4,, +            Publisher<? extends T5> source5, Publisher<? extends T6> source6,, +            Publisher<? extends T7> source7, Publisher<? extends T8> source8,, +        return combineLatest(Functions.toFunction(combiner), source1, source2, source3, source4, source5, source6, source7, source8);, +     * @param source1, +     * @param source2, +     * @param source3, +     * @param source4, +     * @param source5]