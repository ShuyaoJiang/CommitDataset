[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationTakeWhile;, +import rx.operators.OperatorOnExceptionResumeNextViaObservable;, +        return lift(new OperatorOnExceptionResumeNextViaObservable<T>(resumeSequence));, +        return create(OperationTakeWhile.takeWhile(this, predicate));, +        return create(OperationTakeWhile.takeWhileWithIndex(this, predicate));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationTakeWhile;, +import rx.operators.OperatorOnExceptionResumeNextViaObservable;, +        return lift(new OperatorOnExceptionResumeNextViaObservable<T>(resumeSequence));, +        return create(OperationTakeWhile.takeWhile(this, predicate));, +        return create(OperationTakeWhile.takeWhileWithIndex(this, predicate));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationTakeWhile;, +import rx.operators.OperatorOnExceptionResumeNextViaObservable;, +        return lift(new OperatorOnExceptionResumeNextViaObservable<T>(resumeSequence));, +        return create(OperationTakeWhile.takeWhile(this, predicate));, +        return create(OperationTakeWhile.takeWhileWithIndex(this, predicate));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperationTakeWhile.java, +/**, + * Copyright 2014 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import java.util.concurrent.atomic.AtomicInteger;, +, +import rx.Observable;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observer;, +import rx.Subscriber;, +import rx.Subscription;, +import rx.functions.Func1;, +import rx.functions.Func2;, +, +/**, + * Returns an Observable that emits items emitted by the source Observable as long as a specified, + * condition is true., + * <p>, + * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/takeWhile.png">, + */, +public final class OperationTakeWhile {, +, +    /**, +     * Returns values from an observable sequence as long as a specified condition is true, and then skips the remaining values., +     * , +     * @param items, +     * @param predicate, +     *            a function to test each source element for a condition, +     * @return sequence of observable values from the start as long as the predicate is true, +     */, +    public static <T> OnSubscribeFunc<T> takeWhile(final Observable<? extends T> items, final Func1<? super T, Boolean> predicate) {, +        return takeWhileWithIndex(items, OperationTakeWhile.<T> skipIndex(predicate));, +    }, +, +    /**, +     * Returns values from an observable sequence as long as a specified condition is true, and then skips the remaining values., +     * , +     * @param items, +     * @param predicate, +     *            a function to test each element for a condition; the second parameter of the function represents the index of the source element; otherwise, false., +     * @return sequence of observable values from the start as long as the predicate is true, +     */, +    public static <T> OnSubscribeFunc<T> takeWhileWithIndex(final Observable<? extends T> items, final Func2<? super T, ? super Integer, Boolean> predicate) {, +        // wrap in a Func so that if a chain is built up, then asynchronously subscribed to twice we will have 2 instances of Take<T> rather than 1 handing both, which is not thread-safe., +        return new OnSubscribeFunc<T>() {, +, +            @Override, +            public Subscription onSubscribe(Observer<? super T> observer) {, +                return new TakeWhile<T>(items, predicate).onSubscribe(observer);, +            }, +, +        };, +    }, +, +    private static <T> Func2<T, Integer, Boolean> skipIndex(final Func1<? super T, Boolean> underlying) {, +        return new Func2<T, Integer, Boolean>() {, +            @Override, +            public Boolean call(T input, Integer index) {, +                return underlying.call(input);, +            }, +        };, +    }, +, +    /**, +     * This class is NOT thread-safe if invoked and referenced multiple times. In other words, don't subscribe to it multiple times from different threads., +     * <p>]