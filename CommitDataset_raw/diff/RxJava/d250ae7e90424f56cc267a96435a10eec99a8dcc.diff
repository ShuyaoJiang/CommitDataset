[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableElementAt.java, +            if (!done) {, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableElementAt.java, +            if (!done) {, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableElementAtTest.java, +import io.reactivex.*;, +import io.reactivex.exceptions.TestException;, +import io.reactivex.functions.Function;, +import io.reactivex.internal.subscriptions.BooleanSubscription;, +import io.reactivex.plugins.RxJavaPlugins;, +import java.util.List;, +import org.reactivestreams.*;, +, +, +    @Test, +    public void doubleOnSubscribe() {, +        TestHelper.checkDoubleOnSubscribeFlowable(new Function<Flowable<Object>, Publisher<Object>>() {, +            @Override, +            public Publisher<Object> apply(Flowable<Object> o) throws Exception {, +                return o.elementAt(0).toFlowable();, +            }, +        });, +    }, +, +    @Test, +    public void elementAtIndex1WithDefaultOnEmptySourceObservable() {, +        Flowable.empty(), +            .elementAt(1, 10), +            .toFlowable(), +            .test(), +            .assertResult(10);, +    }, +, +    @Test, +    public void errorFlowable() {, +        Flowable.error(new TestException()), +            .elementAt(1, 10), +            .toFlowable(), +            .test(), +            .assertFailure(TestException.class);, +    }, +, +    @Test, +    public void badSource() {, +        List<Throwable> errors = TestHelper.trackPluginErrors();, +        try {, +            new Flowable<Integer>() {, +                @Override, +                protected void subscribeActual(Subscriber<? super Integer> subscriber) {, +                    subscriber.onSubscribe(new BooleanSubscription());, +, +                    subscriber.onNext(1);, +                    subscriber.onNext(2);, +                    subscriber.onError(new TestException());, +                    subscriber.onComplete();, +                }, +            }, +            .elementAt(0), +            .toFlowable(), +            .test(), +            .assertResult(1);, +, +            TestHelper.assertError(errors, 0, TestException.class);, +        } finally {, +            RxJavaPlugins.reset();, +        }, +    }]