[+++ b/rxjava-core/src/main/java/rx/concurrency/AbstractScheduler.java, +        return schedule(new SleepingAction(action, this, timespan, unit));, +++ b/rxjava-core/src/main/java/rx/concurrency/AbstractScheduler.java, +        return schedule(new SleepingAction(action, this, timespan, unit));, +++ b/rxjava-core/src/main/java/rx/concurrency/CurrentThreadScheduler.java, +import org.mockito.InOrder;, +, +import static org.mockito.Mockito.*;, +, +        boolean exec = queue == null;, +        if (exec) {, +        if (exec) {, +            while (!queue.isEmpty()) {, +, +            QUEUE.set(null);, +        }, +        public void testOrdering() {, +            final Action0 firstStepStart = mock(Action0.class);, +            final Action0 firstStepEnd = mock(Action0.class);, +, +            final Action0 secondStepStart = mock(Action0.class);, +            final Action0 secondStepEnd = mock(Action0.class);, +, +            final Action0 thirdStepStart = mock(Action0.class);, +            final Action0 thirdStepEnd = mock(Action0.class);, +, +                    firstStepStart.call();, +                    firstStepEnd.call();, +                    secondStepStart.call();, +                    secondStepEnd.call();, +                    thirdStepStart.call();, +                    thirdStepEnd.call();, +            InOrder inOrder = inOrder(firstStepStart, firstStepEnd, secondStepStart, secondStepEnd, thirdStepStart, thirdStepEnd);, +, +, +            inOrder.verify(thirdStepStart, times(1)).call();, +            inOrder.verify(thirdStepEnd, times(1)).call();, +            inOrder.verify(secondStepStart, times(1)).call();, +            inOrder.verify(secondStepEnd, times(1)).call();, +            inOrder.verify(firstStepStart, times(1)).call();, +            inOrder.verify(firstStepEnd, times(1)).call();, +        }, +, +        @Test, +        public void testSequenceOfActions() {, +            final CurrentThreadScheduler scheduler = new CurrentThreadScheduler();, +, +            final Action0 first = mock(Action0.class);, +            final Action0 second = mock(Action0.class);, +, +            scheduler.schedule(first);, +            scheduler.schedule(second);, +, +            verify(first, times(1)).call();, +            verify(second, times(1)).call();, +, +++ b/rxjava-core/src/main/java/rx/concurrency/AbstractScheduler.java, +        return schedule(new SleepingAction(action, this, timespan, unit));, +++ b/rxjava-core/src/main/java/rx/concurrency/CurrentThreadScheduler.java, +import org.mockito.InOrder;, +, +import static org.mockito.Mockito.*;, +, +        boolean exec = queue == null;, +        if (exec) {, +        if (exec) {, +            while (!queue.isEmpty()) {, +, +            QUEUE.set(null);, +        }, +        public void testOrdering() {, +            final Action0 firstStepStart = mock(Action0.class);, +            final Action0 firstStepEnd = mock(Action0.class);, +, +            final Action0 secondStepStart = mock(Action0.class);, +            final Action0 secondStepEnd = mock(Action0.class);, +, +            final Action0 thirdStepStart = mock(Action0.class);, +            final Action0 thirdStepEnd = mock(Action0.class);, +, +                    firstStepStart.call();, +                    firstStepEnd.call();, +                    secondStepStart.call();, +                    secondStepEnd.call();, +                    thirdStepStart.call();, +                    thirdStepEnd.call();, +            InOrder inOrder = inOrder(firstStepStart, firstStepEnd, secondStepStart, secondStepEnd, thirdStepStart, thirdStepEnd);, +, +, +            inOrder.verify(thirdStepStart, times(1)).call();, +            inOrder.verify(thirdStepEnd, times(1)).call();, +            inOrder.verify(secondStepStart, times(1)).call();, +            inOrder.verify(secondStepEnd, times(1)).call();, +            inOrder.verify(firstStepStart, times(1)).call();, +            inOrder.verify(firstStepEnd, times(1)).call();, +        }, +, +        @Test, +        public void testSequenceOfActions() {, +            final CurrentThreadScheduler scheduler = new CurrentThreadScheduler();]