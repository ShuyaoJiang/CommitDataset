[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationReplay;, +     * Returns an observable sequence that contains the elements of a sequence , +     * produced by multicasting the source sequence within a selector function., +     * , +     * @param subjectFactory the subject factory, +     * @param selector The selector function which can use the multicasted , +     *                 source sequence subject to the policies enforced by the , +     *                 created subject., +     * @return the Observable sequence that contains the elements of a sequence, +     *         produced by multicasting the source sequence within a selector function., +     * , +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229708.aspx'>MSDN: Observable.Multicast</a>, +     */, +    public <TIntermediate, TResult> Observable<TResult> multicast(, +            final Func0<? extends Subject<? super T, ? extends TIntermediate>> subjectFactory, , +            final Func1<? super Observable<TIntermediate>, ? extends Observable<TResult>> selector) {, +        return OperationMulticast.multicast(this, subjectFactory, selector);, +    }, +    /**, +     * notifications to any future {@link Observer} on the given scheduler., +     * @param scheduler the scheduler where the Observers will receive the events, +     * @return a {@link ConnectableObservable} that shares a single subscription, +     *         to the underlying Observable that will replay all of its items and, +     *         notifications to any future {@link Observer} on the given scheduler, +         return OperationMulticast.multicast(this, OperationReplay.createScheduledSubject(ReplaySubject.<T>create(), scheduler));, +, +    /**, +     * Returns a connectable observable sequence that shares a single subscription , +     * to the underlying sequence replaying bufferSize notifications., +     * , +     * @param bufferSize the buffer size, +     * @return a connectable observable sequence that shares a single subscription , +     *         to the underlying sequence replaying bufferSize notifications, +     * , +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh211976.aspx'>MSDN: Observable.Replay</a>, +     */, +    public ConnectableObservable<T> replay(int bufferSize) {, +        return OperationMulticast.multicast(this, OperationReplay.<T>replayBuffered(bufferSize));, +    }, +, +    /**, +     * Returns a connectable observable sequence that shares a single , +     * subscription to the underlying sequence replaying bufferSize notifications., +     * , +     * @param bufferSize the buffer size, +     * @param scheduler the scheduler where the Observers will receive the events, +     * @return a connectable observable sequence that shares a single , +     *         subscription to the underlying sequence replaying bufferSize notifications, +     * , +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229814.aspx'>MSDN: Observable.Replay</a>, +     */, +    public ConnectableObservable<T> replay(int bufferSize, Scheduler scheduler) {, +        return OperationMulticast.multicast(this, , +                OperationReplay.createScheduledSubject(, +                OperationReplay.<T>replayBuffered(bufferSize), scheduler));, +    }, +    , +    /**, +     * Returns a connectable observable sequence that shares a single , +     * subscription to the underlying sequence replaying all notifications within window., +     * , +     * @param time the window length, +     * @param unit the window length time unit, +     * @return a connectable observable sequence that shares a single , +     *         subscription to the underlying sequence replaying all notifications within window, +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229232.aspx'>MSDN: Observable.Replay</a>, +     */, +    public ConnectableObservable<T> replay(long time, TimeUnit unit) {, +        return replay(time, unit, Schedulers.threadPoolForComputation());, +    }, +, +    /**, +     * Returns a connectable observable sequence that shares a single , +     * subscription to the underlying sequence replaying all notifications within window., +     * , +     * @param time the window length, +     * @param unit the window length time unit, +     * @param scheduler the scheduler which is used as a time source for the window, +     * @return a connectable observable sequence that shares a single , +     *         subscription to the underlying sequence replaying all notifications within window, +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh211811.aspx'>MSDN: Observable.Replay</a>, +     */, +    public ConnectableObservable<T> replay(long time, TimeUnit unit, Scheduler scheduler) {, +        return OperationMulticast.multicast(this, OperationReplay.<T>replayWindowed(time, unit, -1, scheduler));, +    }, +, +    /**, +     * Returns a connectable observable sequence that shares a single , +     * subscription to the underlying sequence replaying bufferSize notifications within window., +     * , +     * @param bufferSize the buffer size, +     * @param time the window length, +     * @param unit the window length time unit, +     * @return Returns a connectable observable sequence that shares a single , +     *         subscription to the underlying sequence replaying bufferSize notifications within window, +     * , +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229874.aspx'>MSDN: Observable.Replay</a>, +     */, +    public ConnectableObservable<T> replay(int bufferSize, long time, TimeUnit unit) {]