[+++ b/rxjava-core/src/main/java/rx/operators/OperationNext.java, +    private static class NextIterator<T> implements Iterator<T> {, +++ b/rxjava-core/src/main/java/rx/operators/OperationNext.java, +    private static class NextIterator<T> implements Iterator<T> {, +++ b/rxjava-core/src/main/java/rx/operators/OperationZip.java, +        return new ManyObservables<Object, R>(ws, zipFunction);, +                runCollector();, +            }, +, +            @Override, +            public void onError(Throwable ex) {, +                rwLock.writeLock().lock();, +                try {, +                    if (done) {, +                        return;, +                    }, +                    done = true;, +                    observer.onError(ex);, +                } finally {, +                    rwLock.writeLock().unlock();, +                }, +                cancel.unsubscribe();, +                unsubscribe();, +            }, +, +            @Override, +            public void onCompleted() {, +                rwLock.readLock().lock();, +                try {, +                    done = true;, +                } finally {, +                    rwLock.readLock().unlock();, +                }, +                runCollector();, +                unsubscribe();, +            }, +, +            /** Connect to the source observable. */, +            public void connect() {, +                toSource.set(source.subscribe(this));, +            }, +, +            @Override, +            public void unsubscribe() {, +                toSource.unsubscribe();, +            }, +, +            @SuppressWarnings("unchecked"), +            private void runCollector() {, +++ b/rxjava-core/src/main/java/rx/operators/OperationNext.java, +    private static class NextIterator<T> implements Iterator<T> {, +++ b/rxjava-core/src/main/java/rx/operators/OperationZip.java, +        return new ManyObservables<Object, R>(ws, zipFunction);, +                runCollector();, +            }, +, +            @Override, +            public void onError(Throwable ex) {, +                rwLock.writeLock().lock();, +                try {, +                    if (done) {, +                        return;, +                    }, +                    done = true;, +                    observer.onError(ex);, +                } finally {, +                    rwLock.writeLock().unlock();, +                }, +                cancel.unsubscribe();, +                unsubscribe();, +            }, +, +            @Override, +            public void onCompleted() {, +                rwLock.readLock().lock();, +                try {, +                    done = true;, +                } finally {, +                    rwLock.readLock().unlock();, +                }, +                runCollector();, +                unsubscribe();, +            }, +, +            /** Connect to the source observable. */, +            public void connect() {, +                toSource.set(source.subscribe(this));, +            }, +, +            @Override, +            public void unsubscribe() {, +                toSource.unsubscribe();, +            }, +, +            @SuppressWarnings("unchecked"), +            private void runCollector() {, +++ b/rxjava-core/src/test/java/rx/operators/OperationNextTest.java, +    @Test(timeout = 8000), +        BlockingObservable<Long> source = Observable.interval(200, TimeUnit.MILLISECONDS).take(10).toBlockingObservable();, +            Iterator<Long> it = iter.iterator();]