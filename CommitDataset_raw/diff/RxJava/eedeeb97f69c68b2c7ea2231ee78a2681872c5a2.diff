[+++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +      "ambWith(Observable[_ <: T])" -> "amb(Observable[U])",, +      "concatWith(Observable[_ <: T])" -> "[use `o1 ++ o2`]",, +      "doOnCompleted(Action0)" -> "doOnCompleted(=> Unit)",, +      "doOnTerminate(Action0)" -> "doOnTerminate(=> Unit)",, +      "finallyDo(Action0)" -> "finallyDo(=> Unit)",, +      "mergeWith(Observable[_ <: T])" -> "merge(Observable[U])",, +      "publish(Func1[_ >: Observable[T], _ <: Observable[R]])" -> "publish(Observable[T] => Observable[R])",, +      "publish(Func1[_ >: Observable[T], _ <: Observable[R]], T)" -> "publish(Observable[T] => Observable[R], T @uncheckedVariance)",, +      "replay(Func1[_ >: Observable[T], _ <: Observable[R]])" -> "replay(Observable[T] => Observable[R])",, +      "replay(Func1[_ >: Observable[T], _ <: Observable[R]], Int)" -> "replay(Observable[T] => Observable[R], Int)",, +      "replay(Func1[_ >: Observable[T], _ <: Observable[R]], Int, Long, TimeUnit)" -> "replay(Observable[T] => Observable[R], Int, Duration)",, +      "replay(Func1[_ >: Observable[T], _ <: Observable[R]], Int, Long, TimeUnit, Scheduler)" -> "replay(Observable[T] => Observable[R], Int, Duration, Scheduler)",, +      "replay(Func1[_ >: Observable[T], _ <: Observable[R]], Int, Scheduler)" -> "replay(Observable[T] => Observable[R], Int, Scheduler)",, +      "replay(Func1[_ >: Observable[T], _ <: Observable[R]], Long, TimeUnit)" -> "replay(Observable[T] => Observable[R], Duration)",, +      "replay(Func1[_ >: Observable[T], _ <: Observable[R]], Long, TimeUnit, Scheduler)" -> "replay(Observable[T] => Observable[R], Duration, Scheduler)",, +      "replay(Func1[_ >: Observable[T], _ <: Observable[R]], Scheduler)" -> "replay(Observable[T] => Observable[R], Scheduler)",, +      "skipUntil(Observable[U])" -> "dropUntil(Observable[Any])",, +      "takeUntil(Observable[_ <: E])" -> "takeUntil(Observable[Any])",, +      "timeout(Func0[_ <: Observable[U]], Func1[_ >: T, _ <: Observable[V]], Observable[_ <: T])" -> "timeout(() => Observable[Any], T => Observable[Any], Observable[U])",, +      "timeout(Func1[_ >: T, _ <: Observable[V]], Observable[_ <: T])" -> "timeout(T => Observable[Any], Observable[U])",, +      "timeout(Func0[_ <: Observable[U]], Func1[_ >: T, _ <: Observable[V]])" -> "timeout(() => Observable[Any], T => Observable[Any])",, +      "timeout(Func1[_ >: T, _ <: Observable[V]])" -> "timeout(T => Observable[Any])",]