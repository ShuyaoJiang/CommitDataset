[+++ b/language-adaptors/rxjava-scala/ReleaseNotes.md, +To create an instance of say `Observer[SensorEvent]` in user code, you can create a new instance of the `Observer` trait, +   val printObserver = new Observer[SensorEvent] {, +      override def onNext(value: SensorEvent): Unit = {...value.toString...}, +The `Subject` trait now also hides the underlying Java `asJavaSubject: rx.subjects.Subject[_ >: T, _<: T]`, +and takes only a single *invariant* type parameter `T`. all existing implementations of `Subject` are parametrized, +by a single type, and this reflects that reality., +trait Subject[T] extends Observable[T] with Observer[T] {, +  private [scala] val asJavaSubject: rx.subjects.Subject[_ >: T, _<: T], +making `asJavaSubject` private, and collapsing its type parameters. Neither of these should cause trouble.]