[+++ b/language-adaptors/rxjava-scala/README.md, +For more examples, see [RxScalaDemo.scala](https://github.com/Netflix/RxJava/blob/master/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/examples/RxScalaDemo.scala)., +++ b/language-adaptors/rxjava-scala/README.md, +For more examples, see [RxScalaDemo.scala](https://github.com/Netflix/RxJava/blob/master/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/examples/RxScalaDemo.scala)., +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.*;, +     * Returns either the observable sequence or an TimeoutException if timeout elapses., +     * @param timeout, +     *                  The timeout duration, +     * @param timeUnit, +     *                  The time unit of the timeout, +     * @param scheduler, +     *                  The scheduler to run the timeout timers on., +     * @return The source sequence with a TimeoutException in case of a timeout., +     */, +    public Observable<T> timeout(long timeout, TimeUnit timeUnit, Scheduler scheduler) {, +        return create(OperationTimeout.timeout(this, timeout, timeUnit, scheduler));, +    }, +, +    /**, +     * Returns either the observable sequence or an TimeoutException if timeout elapses., +     * @param timeout, +     *                  The timeout duration, +     * @param timeUnit, +     *                  The time unit of the timeout, +     * @return The source sequence with a TimeoutException in case of a timeout., +     */, +    public Observable<T> timeout(long timeout, TimeUnit timeUnit) {, +        return create(OperationTimeout.timeout(this, timeout, timeUnit, Schedulers.threadPoolForComputation()));, +    }, +, +    /**, +++ b/language-adaptors/rxjava-scala/README.md, +For more examples, see [RxScalaDemo.scala](https://github.com/Netflix/RxJava/blob/master/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/examples/RxScalaDemo.scala)., +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.*;, +     * Returns either the observable sequence or an TimeoutException if timeout elapses., +     * @param timeout, +     *                  The timeout duration, +     * @param timeUnit, +     *                  The time unit of the timeout, +     * @param scheduler, +     *                  The scheduler to run the timeout timers on., +     * @return The source sequence with a TimeoutException in case of a timeout., +     */, +    public Observable<T> timeout(long timeout, TimeUnit timeUnit, Scheduler scheduler) {, +        return create(OperationTimeout.timeout(this, timeout, timeUnit, scheduler));, +    }, +, +    /**, +     * Returns either the observable sequence or an TimeoutException if timeout elapses., +     * @param timeout, +     *                  The timeout duration, +     * @param timeUnit, +     *                  The time unit of the timeout, +     * @return The source sequence with a TimeoutException in case of a timeout., +     */, +    public Observable<T> timeout(long timeout, TimeUnit timeUnit) {, +        return create(OperationTimeout.timeout(this, timeout, timeUnit, Schedulers.threadPoolForComputation()));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationTimeout.java, +/**, + * Copyright 2013 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import rx.Observable;, +import rx.Observer;, +import rx.Scheduler;, +import rx.Subscription;, +import rx.subscriptions.CompositeSubscription;, +import rx.subscriptions.SerialSubscription;, +import rx.util.functions.Action0;, +import rx.util.functions.Func0;, +, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.TimeoutException;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicLong;, +, +public final class OperationTimeout {, +    public static <T> Observable.OnSubscribeFunc<T> timeout(Observable<? extends T> source, long timeout, TimeUnit timeUnit, Scheduler scheduler) {, +        return new Timeout<T>(source, timeout, timeUnit, scheduler);, +    }, +, +    private static class Timeout<T> implements Observable.OnSubscribeFunc<T> {]