[+++ b/src/main/java/rx/internal/schedulers/ScheduledAction.java, +import rx.Subscription;, +import rx.exceptions.OnErrorNotImplementedException;, +import rx.functions.Action0;, +import rx.plugins.RxJavaPlugins;, +import rx.subscriptions.CompositeSubscription;, +, + * A {@code Runnable} that executes an {@code Action0} and can be cancelled. The analog is the, +        } catch (Throwable e) {, +            // nothing to do but print a System error as this is fatal and there is nowhere else to throw this, +            IllegalStateException ie = null;, +            if (e instanceof OnErrorNotImplementedException) {, +                ie = new IllegalStateException("Exception thrown on Scheduler.Worker thread. Add `onError` handling.", e);, +            } else {, +                ie = new IllegalStateException("Fatal Exception thrown on Scheduler.Worker thread.", e);, +            }, +            ie.printStackTrace();, +            RxJavaPlugins.getInstance().getErrorHandler().handleError(ie);, +++ b/src/main/java/rx/internal/schedulers/ScheduledAction.java, +import rx.Subscription;, +import rx.exceptions.OnErrorNotImplementedException;, +import rx.functions.Action0;, +import rx.plugins.RxJavaPlugins;, +import rx.subscriptions.CompositeSubscription;, +, + * A {@code Runnable} that executes an {@code Action0} and can be cancelled. The analog is the, +        } catch (Throwable e) {, +            // nothing to do but print a System error as this is fatal and there is nowhere else to throw this, +            IllegalStateException ie = null;, +            if (e instanceof OnErrorNotImplementedException) {, +                ie = new IllegalStateException("Exception thrown on Scheduler.Worker thread. Add `onError` handling.", e);, +            } else {, +                ie = new IllegalStateException("Fatal Exception thrown on Scheduler.Worker thread.", e);, +            }, +            ie.printStackTrace();, +            RxJavaPlugins.getInstance().getErrorHandler().handleError(ie);, +++ /dev/null, +++ b/src/main/java/rx/internal/schedulers/ScheduledAction.java, +import rx.Subscription;, +import rx.exceptions.OnErrorNotImplementedException;, +import rx.functions.Action0;, +import rx.plugins.RxJavaPlugins;, +import rx.subscriptions.CompositeSubscription;, +, + * A {@code Runnable} that executes an {@code Action0} and can be cancelled. The analog is the, +        } catch (Throwable e) {, +            // nothing to do but print a System error as this is fatal and there is nowhere else to throw this, +            IllegalStateException ie = null;, +            if (e instanceof OnErrorNotImplementedException) {, +                ie = new IllegalStateException("Exception thrown on Scheduler.Worker thread. Add `onError` handling.", e);, +            } else {, +                ie = new IllegalStateException("Fatal Exception thrown on Scheduler.Worker thread.", e);, +            }, +            ie.printStackTrace();, +            RxJavaPlugins.getInstance().getErrorHandler().handleError(ie);, +++ /dev/null, +++ /dev/null]