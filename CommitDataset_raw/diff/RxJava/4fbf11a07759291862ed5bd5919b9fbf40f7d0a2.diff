[+++ b/src/main/java/rx/Observable.java, +        return observables.lift(OperatorConcat.<T>instance());, +        return source.lift(OperatorMerge.<T>instance(false));, +        return source.lift(OperatorMerge.<T>instance(true));, +        return sequenceOfSequences.lift(OperatorSwitch.<T>instance());, +        return lift(OperatorAsObservable.<T>instance());, +    @SuppressWarnings({"unchecked"}), +        return lift(OperatorDematerialize.instance());, +        return lift(OperatorMaterialize.<T>instance());, +        return lift(OperatorOnBackpressureDrop.<T>instance());, +        return lift(OperatorSerialize.<T>instance());, +        return lift(OperatorToObservableList.<T>instance());, +++ b/src/main/java/rx/Observable.java, +        return observables.lift(OperatorConcat.<T>instance());, +        return source.lift(OperatorMerge.<T>instance(false));, +        return source.lift(OperatorMerge.<T>instance(true));, +        return sequenceOfSequences.lift(OperatorSwitch.<T>instance());, +        return lift(OperatorAsObservable.<T>instance());, +    @SuppressWarnings({"unchecked"}), +        return lift(OperatorDematerialize.instance());, +        return lift(OperatorMaterialize.<T>instance());, +        return lift(OperatorOnBackpressureDrop.<T>instance());, +        return lift(OperatorSerialize.<T>instance());, +        return lift(OperatorToObservableList.<T>instance());, +++ b/src/main/java/rx/internal/operators/BlockingOperatorLatest.java, +                        unsubscribe();, +++ b/src/main/java/rx/Observable.java, +        return observables.lift(OperatorConcat.<T>instance());, +        return source.lift(OperatorMerge.<T>instance(false));, +        return source.lift(OperatorMerge.<T>instance(true));, +        return sequenceOfSequences.lift(OperatorSwitch.<T>instance());, +        return lift(OperatorAsObservable.<T>instance());, +    @SuppressWarnings({"unchecked"}), +        return lift(OperatorDematerialize.instance());, +        return lift(OperatorMaterialize.<T>instance());, +        return lift(OperatorOnBackpressureDrop.<T>instance());, +        return lift(OperatorSerialize.<T>instance());, +        return lift(OperatorToObservableList.<T>instance());, +++ b/src/main/java/rx/internal/operators/BlockingOperatorLatest.java, +                        unsubscribe();, +++ b/src/main/java/rx/internal/operators/BlockingOperatorNext.java, +                observer.unsubscribe();, +++ b/src/main/java/rx/Observable.java, +        return observables.lift(OperatorConcat.<T>instance());, +        return source.lift(OperatorMerge.<T>instance(false));, +        return source.lift(OperatorMerge.<T>instance(true));, +        return sequenceOfSequences.lift(OperatorSwitch.<T>instance());, +        return lift(OperatorAsObservable.<T>instance());, +    @SuppressWarnings({"unchecked"}), +        return lift(OperatorDematerialize.instance());, +        return lift(OperatorMaterialize.<T>instance());, +        return lift(OperatorOnBackpressureDrop.<T>instance());, +        return lift(OperatorSerialize.<T>instance());, +        return lift(OperatorToObservableList.<T>instance());, +++ b/src/main/java/rx/internal/operators/BlockingOperatorLatest.java, +                        unsubscribe();, +++ b/src/main/java/rx/internal/operators/BlockingOperatorNext.java, +                observer.unsubscribe();, +++ b/src/main/java/rx/internal/operators/BlockingOperatorToIterator.java, +import rx.Subscription;, +        final Subscription subscription = source.materialize().subscribe(new Subscriber<Notification<? extends T>>() {, +                    subscription.unsubscribe();, +++ b/src/main/java/rx/Observable.java, +        return observables.lift(OperatorConcat.<T>instance());, +        return source.lift(OperatorMerge.<T>instance(false));, +        return source.lift(OperatorMerge.<T>instance(true));, +        return sequenceOfSequences.lift(OperatorSwitch.<T>instance());, +        return lift(OperatorAsObservable.<T>instance());, +    @SuppressWarnings({"unchecked"}), +        return lift(OperatorDematerialize.instance());, +        return lift(OperatorMaterialize.<T>instance());, +        return lift(OperatorOnBackpressureDrop.<T>instance());, +        return lift(OperatorSerialize.<T>instance());, +        return lift(OperatorToObservableList.<T>instance());, +++ b/src/main/java/rx/internal/operators/BlockingOperatorLatest.java, +                        unsubscribe();, +++ b/src/main/java/rx/internal/operators/BlockingOperatorNext.java, +                observer.unsubscribe();, +++ b/src/main/java/rx/internal/operators/BlockingOperatorToIterator.java, +import rx.Subscription;, +        final Subscription subscription = source.materialize().subscribe(new Subscriber<Notification<? extends T>>() {, +                    subscription.unsubscribe();, +++ b/src/main/java/rx/internal/operators/OnSubscribeCache.java, +            source.subscribe(cache);, +             * Note that we will never unsubscribe from 'source' unless we receive `onCompleted` or `onError`,, +             * as we want to receive and cache all of its values., +++ b/src/main/java/rx/Observable.java, +        return observables.lift(OperatorConcat.<T>instance());, +        return source.lift(OperatorMerge.<T>instance(false));, +        return source.lift(OperatorMerge.<T>instance(true));, +        return sequenceOfSequences.lift(OperatorSwitch.<T>instance());, +        return lift(OperatorAsObservable.<T>instance());, +    @SuppressWarnings({"unchecked"}), +        return lift(OperatorDematerialize.instance());, +        return lift(OperatorMaterialize.<T>instance());, +        return lift(OperatorOnBackpressureDrop.<T>instance());, +        return lift(OperatorSerialize.<T>instance());, +        return lift(OperatorToObservableList.<T>instance());, +++ b/src/main/java/rx/internal/operators/BlockingOperatorLatest.java, +                        unsubscribe();]