[+++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/future.clj, +  "Exerimental/Possibly a bad idea, +, +  Execute (f & args) in a separate thread and pass the result to onNext., +, +  Examples:, +, +    (subscribe (rx/future future-call, +                  #(slurp \"input.txt\")), +               (fn [v] (println \"Got: \" v))), +    ; eventually outputs content of input.txt, +(defn future-generator*, +  "Exerimental/Possibly a bad idea, +  Same as rx/generator* except f is invoked in a separate thread., +  Returns an Observable. If the subscriber unsubscribes, the future will be canceled, +  with clojure.core/future-cancel, +  Example:, +, +    (future-generator* future-call, +      (fn [o], +        (rx/on-next o 1), +        (Thread/sleep 1000), +        (rx/on-next o 2))), +, +  See:, +    rx.lang.clojure.core/generator*, +  [runner f & args], +  {:pre [(ifn? runner) (ifn? f)]}, +  (rx/observable* (fn [^rx.Subscriber observer], +                    (let [wrapped (-> (fn [o], +                                        (apply f o args)), +                                      rx/wrap-on-completed, +                                      rx/wrap-on-error), +                          fu      (runner #(wrapped observer))], +                      (.add observer, +                            (rx/subscription #(future-cancel fu))))))), +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/future.clj, +  "Exerimental/Possibly a bad idea, +, +  Execute (f & args) in a separate thread and pass the result to onNext., +, +  Examples:, +, +    (subscribe (rx/future future-call, +                  #(slurp \"input.txt\")), +               (fn [v] (println \"Got: \" v))), +    ; eventually outputs content of input.txt, +(defn future-generator*, +  "Exerimental/Possibly a bad idea, +  Same as rx/generator* except f is invoked in a separate thread., +  Returns an Observable. If the subscriber unsubscribes, the future will be canceled, +  with clojure.core/future-cancel, +  Example:, +, +    (future-generator* future-call, +      (fn [o], +        (rx/on-next o 1), +        (Thread/sleep 1000), +        (rx/on-next o 2))), +, +  See:, +    rx.lang.clojure.core/generator*, +  [runner f & args], +  {:pre [(ifn? runner) (ifn? f)]}, +  (rx/observable* (fn [^rx.Subscriber observer], +                    (let [wrapped (-> (fn [o], +                                        (apply f o args)), +                                      rx/wrap-on-completed, +                                      rx/wrap-on-error), +                          fu      (runner #(wrapped observer))], +                      (.add observer, +                            (rx/subscription #(future-cancel fu))))))), +++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/chunk_test.clj, +        factory (rx-future/future-generator*, +                  future-call, +                  (fn[o], +                      (rx/on-next o (rx-future/future*, +                                      future-call, +                                      #(let [t (rand-int 500)], +                                         (Thread/sleep t), +                                         i))))))], +          factory (rx-future/future-generator*, +                    future-call, +                    (fn [o], +                        (rx/on-next o (rx-future/future*, +                                        future-call, +                                        #(let [t (rand-int 1000)], +                                           (Thread/sleep t), +                                           i)))), +                      (throw (IllegalArgumentException. "hi"))))], +          factory (rx-future/future-generator*, +                    future-call, +                    (fn [o], +                        (rx/on-next o (rx-future/future*, +                                        future-call, +                                        #(let [t (rand-int 1000)], +                                           (Thread/sleep t), +                                           i))))))], +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/future.clj, +  "Exerimental/Possibly a bad idea]