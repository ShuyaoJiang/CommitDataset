[+++ b/build.gradle, +javadoc {, +    exclude "**/rx/internal/**", +}, +, +++ b/build.gradle, +javadoc {, +    exclude "**/rx/internal/**", +}, +, +++ b/src/main/java/rx/Observable.java, +        return ((Transformer<T, R>) transformer).call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<T>, Observable<R>> {, +++ b/build.gradle, +javadoc {, +    exclude "**/rx/internal/**", +}, +, +++ b/src/main/java/rx/Observable.java, +        return ((Transformer<T, R>) transformer).call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<T>, Observable<R>> {, +++ /dev/null, +++ b/build.gradle, +javadoc {, +    exclude "**/rx/internal/**", +}, +, +++ b/src/main/java/rx/Observable.java, +        return ((Transformer<T, R>) transformer).call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<T>, Observable<R>> {, +++ /dev/null, +++ b/src/main/java/rx/plugins/RxJavaPlugins.java, +    static final RxJavaErrorHandler DEFAULT_ERROR_HANDLER = new RxJavaErrorHandler() {, +    };, +, +                errorHandler.compareAndSet(null, DEFAULT_ERROR_HANDLER);, +++ b/build.gradle, +javadoc {, +    exclude "**/rx/internal/**", +}, +, +++ b/src/main/java/rx/Observable.java, +        return ((Transformer<T, R>) transformer).call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<T>, Observable<R>> {, +++ /dev/null, +++ b/src/main/java/rx/plugins/RxJavaPlugins.java, +    static final RxJavaErrorHandler DEFAULT_ERROR_HANDLER = new RxJavaErrorHandler() {, +    };, +, +                errorHandler.compareAndSet(null, DEFAULT_ERROR_HANDLER);, +++ b/src/test/java/rx/CovarianceTest.java, +                    public Observable<Movie> call(Observable<Movie> m) {, +            public Observable<Movie> call(Observable<Movie> t1) {, +            public Observable<HorrorMovie> call(Observable<Movie> t1) {, +            public Observable<HorrorMovie> call(Observable<Movie> t1) {, +            public Observable<HorrorMovie> call(Observable<HorrorMovie> t1) {, +++ b/build.gradle, +javadoc {, +    exclude "**/rx/internal/**", +}, +, +++ b/src/main/java/rx/Observable.java, +        return ((Transformer<T, R>) transformer).call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<T>, Observable<R>> {, +++ /dev/null, +++ b/src/main/java/rx/plugins/RxJavaPlugins.java, +    static final RxJavaErrorHandler DEFAULT_ERROR_HANDLER = new RxJavaErrorHandler() {, +    };, +, +                errorHandler.compareAndSet(null, DEFAULT_ERROR_HANDLER);, +++ b/src/test/java/rx/CovarianceTest.java, +                    public Observable<Movie> call(Observable<Movie> m) {, +            public Observable<Movie> call(Observable<Movie> t1) {, +            public Observable<HorrorMovie> call(Observable<Movie> t1) {, +            public Observable<HorrorMovie> call(Observable<Movie> t1) {, +            public Observable<HorrorMovie> call(Observable<HorrorMovie> t1) {, +++ b/src/test/java/rx/plugins/RxJavaPluginsTest.java, +import static org.junit.Assert.assertSame;, +        assertSame(RxJavaPlugins.DEFAULT_ERROR_HANDLER, impl);]