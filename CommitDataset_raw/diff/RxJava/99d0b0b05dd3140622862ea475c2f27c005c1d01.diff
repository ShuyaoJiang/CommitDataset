[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +  /*, +   val observer = mock(classOf[Observer[Int]]), +   val o = Observable().head, +   val sub = o.subscribe(observer), +   verify(observer, never).onNext(any(classOf[Int])), +   verify(observer, never).onCompleted(), +   verify(observer, times(1)).onError(any(classOf[NoSuchElementException])), + */, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +  /*, +   val observer = mock(classOf[Observer[Int]]), +   val o = Observable().head, +   val sub = o.subscribe(observer), +   verify(observer, never).onNext(any(classOf[Int])), +   verify(observer, never).onCompleted(), +   verify(observer, times(1)).onError(any(classOf[NoSuchElementException])), + */, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorGroupByUntil;, +import rx.operators.OperatorDebounceWithSelector;, +import rx.operators.OperatorDebounceWithTime;, +        return lift(new OperatorDebounceWithSelector<T, U>(debounceSelector));, +        return lift(new OperatorDebounceWithTime<T>(timeout, unit, Schedulers.computation()));, +        return lift(new OperatorDebounceWithTime<T>(timeout, unit, scheduler));, +        return lift(new OperatorGroupByUntil<T, TKey, TValue, TDuration>(keySelector, valueSelector, durationSelector));, +        return debounce(timeout, unit);, +        return debounce(timeout, unit, scheduler);, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +  /*, +   val observer = mock(classOf[Observer[Int]]), +   val o = Observable().head, +   val sub = o.subscribe(observer), +   verify(observer, never).onNext(any(classOf[Int])), +   verify(observer, never).onCompleted(), +   verify(observer, times(1)).onError(any(classOf[NoSuchElementException])), + */, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorGroupByUntil;, +import rx.operators.OperatorDebounceWithSelector;, +import rx.operators.OperatorDebounceWithTime;, +        return lift(new OperatorDebounceWithSelector<T, U>(debounceSelector));, +        return lift(new OperatorDebounceWithTime<T>(timeout, unit, Schedulers.computation()));, +        return lift(new OperatorDebounceWithTime<T>(timeout, unit, scheduler));, +        return lift(new OperatorGroupByUntil<T, TKey, TValue, TDuration>(keySelector, valueSelector, durationSelector));, +        return debounce(timeout, unit);, +        return debounce(timeout, unit, scheduler);, +++ /dev/null, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/JavaConversions.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subscriber.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +  /*, +   val observer = mock(classOf[Observer[Int]]), +   val o = Observable().head, +   val sub = o.subscribe(observer), +   verify(observer, never).onNext(any(classOf[Int])), +   verify(observer, never).onCompleted(), +   verify(observer, times(1)).onError(any(classOf[NoSuchElementException])), + */, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperatorGroupByUntil;, +import rx.operators.OperatorDebounceWithSelector;, +import rx.operators.OperatorDebounceWithTime;, +        return lift(new OperatorDebounceWithSelector<T, U>(debounceSelector));, +        return lift(new OperatorDebounceWithTime<T>(timeout, unit, Schedulers.computation()));, +        return lift(new OperatorDebounceWithTime<T>(timeout, unit, scheduler));, +        return lift(new OperatorGroupByUntil<T, TKey, TValue, TDuration>(keySelector, valueSelector, durationSelector));]