[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableScan.java, +import io.reactivex.plugins.RxJavaPlugins;, +        boolean done;, +, +            if (done) {, +                return;, +            }, +                    onError(e);, +            if (done) {, +                RxJavaPlugins.onError(t);, +                return;, +            }, +            done = true;, +            if (done) {, +                return;, +            }, +            done = true;, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableScan.java, +import io.reactivex.plugins.RxJavaPlugins;, +        boolean done;, +, +            if (done) {, +                return;, +            }, +                    onError(e);, +            if (done) {, +                RxJavaPlugins.onError(t);, +                return;, +            }, +            done = true;, +            if (done) {, +                return;, +            }, +            done = true;, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableScanSeed.java, +import io.reactivex.plugins.RxJavaPlugins;, +                RxJavaPlugins.onError(t);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableScan.java, +import io.reactivex.plugins.RxJavaPlugins;, +        boolean done;, +, +            if (done) {, +                return;, +            }, +                    onError(e);, +            if (done) {, +                RxJavaPlugins.onError(t);, +                return;, +            }, +            done = true;, +            if (done) {, +                return;, +            }, +            done = true;, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableScanSeed.java, +import io.reactivex.plugins.RxJavaPlugins;, +                RxJavaPlugins.onError(t);, +++ b/src/test/java/io/reactivex/flowable/FlowableScanTests.java, +import java.util.Arrays;, +import java.util.List;, +import java.util.concurrent.CopyOnWriteArrayList;, +import java.util.concurrent.atomic.AtomicReference;, +import io.reactivex.plugins.RxJavaPlugins;, +    , +    public void testScanWithSeedDoesNotEmitErrorTwiceIfScanFunctionThrows() {, +        final List<Throwable> list = new CopyOnWriteArrayList<Throwable>();, +        Consumer<Throwable> errorConsumer = new Consumer<Throwable>() {, +            public void accept(Throwable t) throws Exception {, +                 list.add(t);, +            }};, +        try {, +            RxJavaPlugins.setErrorHandler(errorConsumer);, +            final RuntimeException e = new RuntimeException();, +            final RuntimeException e2 = new RuntimeException();, +            Burst.items(1).error(e2), +              .scan(0, throwingBiFunction(e)), +              .test(), +              .assertNoValues(), +              .assertError(e);, +            assertEquals(Arrays.asList(e2), list);, +        } finally {, +            RxJavaPlugins.reset();, +        }, +    }, +    , +    @Test, +    public void testScanWithSeedDoesNotEmitTerminalEventTwiceIfScanFunctionThrows() {, +        final RuntimeException e = new RuntimeException();, +        Burst.item(1).create(), +          .scan(0, throwingBiFunction(e)), +    public void testScanWithSeedDoesNotProcessOnNextAfterTerminalEventIfScanFunctionThrows() {, +    public void testScanWithSeedCompletesNormally() {, +        Flowable.just(1,2,3).scan(0, SUM), +    public void testScanWithSeedWhenScanSeedProviderThrows() {, +        Flowable.just(1,2,3).scanWith(throwingCallable(e),, +            SUM), +          .test(), +          .assertError(e), +          .assertNoValues();, +    }]