[+++ b/rxjava-core/src/main/java/rx/plugins/RxJavaDefaultSchedulers.java, +     * Scheduler to return from {@link Schedulers.computation()} or null if default should be used., +     * , +     * This instance should be or behave like a stateless singleton;, +    public abstract Scheduler getComputationScheduler();, +     * Scheduler to return from {@link Schedulers.io()} or null if default should be used., +     * , +     * This instance should be or behave like a stateless singleton;, +    public abstract Scheduler getIOScheduler();, +     * Scheduler to return from {@link Schedulers.newThread()} or null if default should be used., +     * , +     * This instance should be or behave like a stateless singleton;, +    public abstract Scheduler getNewThreadScheduler();, +++ b/rxjava-core/src/main/java/rx/plugins/RxJavaDefaultSchedulers.java, +     * Scheduler to return from {@link Schedulers.computation()} or null if default should be used., +     * , +     * This instance should be or behave like a stateless singleton;, +    public abstract Scheduler getComputationScheduler();, +     * Scheduler to return from {@link Schedulers.io()} or null if default should be used., +     * , +     * This instance should be or behave like a stateless singleton;, +    public abstract Scheduler getIOScheduler();, +     * Scheduler to return from {@link Schedulers.newThread()} or null if default should be used., +     * , +     * This instance should be or behave like a stateless singleton;, +    public abstract Scheduler getNewThreadScheduler();, +++ b/rxjava-core/src/main/java/rx/plugins/RxJavaDefaultSchedulersDefault.java, +    @Override, +    public Scheduler getComputationScheduler() {, +        return null;, +    }, +, +    @Override, +    public Scheduler getIOScheduler() {, +        return null;, +    }, +, +    @Override, +    public Scheduler getNewThreadScheduler() {, +        return null;, +    }, +, +++ b/rxjava-core/src/main/java/rx/plugins/RxJavaDefaultSchedulers.java, +     * Scheduler to return from {@link Schedulers.computation()} or null if default should be used., +     * , +     * This instance should be or behave like a stateless singleton;, +    public abstract Scheduler getComputationScheduler();, +     * Scheduler to return from {@link Schedulers.io()} or null if default should be used., +     * , +     * This instance should be or behave like a stateless singleton;, +    public abstract Scheduler getIOScheduler();, +     * Scheduler to return from {@link Schedulers.newThread()} or null if default should be used., +     * , +     * This instance should be or behave like a stateless singleton;, +    public abstract Scheduler getNewThreadScheduler();, +++ b/rxjava-core/src/main/java/rx/plugins/RxJavaDefaultSchedulersDefault.java, +    @Override, +    public Scheduler getComputationScheduler() {, +        return null;, +    }, +, +    @Override, +    public Scheduler getIOScheduler() {, +        return null;, +    }, +, +    @Override, +    public Scheduler getNewThreadScheduler() {, +        return null;, +    }, +, +++ b/rxjava-core/src/main/java/rx/schedulers/Schedulers.java, +    private final Scheduler computationScheduler;, +    private final Scheduler ioScheduler;, +    private final Scheduler newThreadScheduler;, +        Scheduler c = RxJavaPlugins.getInstance().getDefaultSchedulers().getComputationScheduler();, +            computationScheduler = executor(createComputationExecutor());, +        Scheduler io = RxJavaPlugins.getInstance().getDefaultSchedulers().getIOScheduler();, +            ioScheduler = executor(createIOExecutor());, +        Scheduler nt = RxJavaPlugins.getInstance().getDefaultSchedulers().getNewThreadScheduler();, +            newThreadScheduler = NewThreadScheduler.instance();, +        return INSTANCE.newThreadScheduler;, +        return INSTANCE.computationScheduler;, +        return INSTANCE.ioScheduler;]