[+++ b/src/main/java/io/reactivex/Observable.java, +import io.reactivex.observables.*;, +    , +    public final <K> Observable<GroupedObservable<T, K>> groupBy(Function<? super T, ? extends K> keySelector) {, +        return groupBy(keySelector, v -> v, false, bufferSize());, +    }, +, +    public final <K> Observable<GroupedObservable<T, K>> groupBy(Function<? super T, ? extends K> keySelector, boolean delayError) {, +        return groupBy(keySelector, v -> v, delayError, bufferSize());, +    }, +, +    public final <K, V> Observable<GroupedObservable<V, K>> groupBy(Function<? super T, ? extends K> keySelector, , +            Function<? super T, ? extends V> valueSelector) {, +        return groupBy(keySelector, valueSelector, false, bufferSize());, +    }, +, +    public final <K, V> Observable<GroupedObservable<V, K>> groupBy(Function<? super T, ? extends K> keySelector, , +            Function<? super T, ? extends V> valueSelector, boolean delayError) {, +        return groupBy(keySelector, valueSelector, false, bufferSize());, +    }, +, +    public final <K, V> Observable<GroupedObservable<V, K>> groupBy(Function<? super T, ? extends K> keySelector, , +            Function<? super T, ? extends V> valueSelector, , +            boolean delayError, int bufferSize) {, +        Objects.requireNonNull(keySelector);, +        Objects.requireNonNull(valueSelector);, +        if (bufferSize <= 0) {, +            throw new IllegalArgumentException("bufferSize > 0 required but it was " + bufferSize);, +        }, +        , +        return lift(new OperatorGroupBy<>(keySelector, valueSelector, bufferSize, delayError));, +    }, +++ b/src/main/java/io/reactivex/Observable.java, +import io.reactivex.observables.*;, +    , +    public final <K> Observable<GroupedObservable<T, K>> groupBy(Function<? super T, ? extends K> keySelector) {, +        return groupBy(keySelector, v -> v, false, bufferSize());, +    }, +, +    public final <K> Observable<GroupedObservable<T, K>> groupBy(Function<? super T, ? extends K> keySelector, boolean delayError) {, +        return groupBy(keySelector, v -> v, delayError, bufferSize());, +    }, +, +    public final <K, V> Observable<GroupedObservable<V, K>> groupBy(Function<? super T, ? extends K> keySelector, , +            Function<? super T, ? extends V> valueSelector) {, +        return groupBy(keySelector, valueSelector, false, bufferSize());, +    }, +, +    public final <K, V> Observable<GroupedObservable<V, K>> groupBy(Function<? super T, ? extends K> keySelector, , +            Function<? super T, ? extends V> valueSelector, boolean delayError) {, +        return groupBy(keySelector, valueSelector, false, bufferSize());, +    }, +, +    public final <K, V> Observable<GroupedObservable<V, K>> groupBy(Function<? super T, ? extends K> keySelector, , +            Function<? super T, ? extends V> valueSelector, , +            boolean delayError, int bufferSize) {, +        Objects.requireNonNull(keySelector);, +        Objects.requireNonNull(valueSelector);, +        if (bufferSize <= 0) {, +            throw new IllegalArgumentException("bufferSize > 0 required but it was " + bufferSize);, +        }, +        , +        return lift(new OperatorGroupBy<>(keySelector, valueSelector, bufferSize, delayError));, +    }, +++ b/src/main/java/io/reactivex/internal/operators/OperatorGroupBy.java, +/**, + * Copyright 2015 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators;, +, +import java.util.*;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.atomic.*;, +import java.util.function.Function;, +, +import org.reactivestreams.*;, +, +import io.reactivex.Observable.Operator;, +import io.reactivex.internal.queue.SpscLinkedArrayQueue;, +import io.reactivex.internal.subscriptions.EmptySubscription;, +import io.reactivex.internal.util.BackpressureHelper;, +import io.reactivex.observables.GroupedObservable;, +import io.reactivex.plugins.RxJavaPlugins;, +, +public final class OperatorGroupBy<T, K, V> implements Operator<GroupedObservable<V, K>, T>{, +    final Function<? super T, ? extends K> keySelector;, +    final Function<? super T, ? extends V> valueSelector;, +    final int bufferSize;, +    final boolean delayError;, +    ]