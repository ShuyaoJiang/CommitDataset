[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/Olympics.scala, +  def mountainBikeMedals: Observable[Medal] = Observable.from(, +    Observable.from(, +    Observable.from(, +    Observable.from(, +    Observable.from(, +    Observable.from(, +    Observable.from(), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/Olympics.scala, +  def mountainBikeMedals: Observable[Medal] = Observable.from(, +    Observable.from(, +    Observable.from(, +    Observable.from(, +    Observable.from(, +    Observable.from(, +    Observable.from(), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +    val first = Observable.from(10, 11, 12), +    val second = Observable.from(10, 11, 12), +    val first = Observable.from(10, 11, 12), +    val second = Observable.from(10, 11, 12), +    val before = Observable.from(-2, -1, 0), +    val source = Observable.from(1, 2, 3), +    Observable.from(, +    assertEquals(10, Observable.from(1, 2, 3, 4).reduce(_ + _).toBlockingObservable.single), +    val observables = Observable.from(Observable.from(1, 2, 3), Observable.from(10, 20, 30)), +    val m = Observable.from(1, 2, 3, 4), +    val m = Observable.from(1, 2, 3, 4), +    assertEquals(None,    Observable.from(1, 2).toBlockingObservable.singleOption), +    assertEquals(Some(1), Observable.from(1)   .toBlockingObservable.singleOption), +    assertEquals(None,    Observable.from()    .toBlockingObservable.singleOption), +    println(doubleAverage(Observable.from()).toBlockingObservable.single), +    println(doubleAverage(Observable.from(0)).toBlockingObservable.single), +    println(doubleAverage(Observable.from(4.44)).toBlockingObservable.single), +    println(doubleAverage(Observable.from(1, 2, 3.5)).toBlockingObservable.single), +    assertEquals(10, Observable.from(1, 2, 3, 4).sum.toBlockingObservable.single), +    assertEquals(6, Observable.from(4, 2).sum.toBlockingObservable.single), +    assertEquals(0, Observable.from[Int]().sum.toBlockingObservable.single), +    assertEquals(24, Observable.from(1, 2, 3, 4).product.toBlockingObservable.single), +    assertEquals(8, Observable.from(4, 2).product.toBlockingObservable.single), +    assertEquals(1, Observable.from[Int]().product.toBlockingObservable.single), +    Observable.from("a", "b", "c").zipWithIndex.map(pair => pair._1 + " has index " + pair._2), +    (for ((letter, index) <- Observable.from("a", "b", "c").zipWithIndex) yield letter + " has index " + index), +    val o = Observable.zip(Observable.from(1, 2), Observable.from(10, 20), Observable.from(100, 200)), +    val observables = Observable.from(Observable.from(1, 2), Observable.from(10, 20), Observable.from(100, 200)), +    assertEquals(3, Observable.from(1, 2, 3, 4).filter(condition).first.toBlockingObservable.single), +    assertEquals(3, Observable.from(1, 2, 3, 4).filter(condition).firstOrElse(10).toBlockingObservable.single), +    assertEquals(10, Observable.from(-1, 0, 1).filter(condition).firstOrElse(10).toBlockingObservable.single), +    assertEquals(Seq(7, 8, 9, 10), Observable.from(10, 7, 8, 9).toSeq.map(_.sorted).toBlockingObservable.single), +    assertEquals(Seq(10, 9, 8, 7), Observable.from(10, 7, 8, 9).toSeq.map(_.sortWith(f)).toBlockingObservable.single), +    Observable.from(1, 2, 3).materialize.subscribe(n => n match {, +    assertEquals("b", Observable.from("a", "b", "c").drop(1).first.toBlockingObservable.single), +    assertEquals("b", Observable.from("a", "b", "c").drop(1).firstOrElse("!").toBlockingObservable.single), +    assertEquals("!!", Observable.from("a", "b", "c").drop(10).firstOrElse("!!").toBlockingObservable.single), +    Observable.from("a", "b").zipWithIndex.takeWhile{case (elem, index) => condition}.map(_._1), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/Olympics.scala, +  def mountainBikeMedals: Observable[Medal] = Observable.from(, +    Observable.from(, +    Observable.from(, +    Observable.from(, +    Observable.from(, +    Observable.from(, +    Observable.from(), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +    val first = Observable.from(10, 11, 12), +    val second = Observable.from(10, 11, 12), +    val first = Observable.from(10, 11, 12), +    val second = Observable.from(10, 11, 12), +    val before = Observable.from(-2, -1, 0), +    val source = Observable.from(1, 2, 3), +    Observable.from(, +    assertEquals(10, Observable.from(1, 2, 3, 4).reduce(_ + _).toBlockingObservable.single), +    val observables = Observable.from(Observable.from(1, 2, 3), Observable.from(10, 20, 30)), +    val m = Observable.from(1, 2, 3, 4), +    val m = Observable.from(1, 2, 3, 4), +    assertEquals(None,    Observable.from(1, 2).toBlockingObservable.singleOption), +    assertEquals(Some(1), Observable.from(1)   .toBlockingObservable.singleOption), +    assertEquals(None,    Observable.from()    .toBlockingObservable.singleOption), +    println(doubleAverage(Observable.from()).toBlockingObservable.single), +    println(doubleAverage(Observable.from(0)).toBlockingObservable.single), +    println(doubleAverage(Observable.from(4.44)).toBlockingObservable.single), +    println(doubleAverage(Observable.from(1, 2, 3.5)).toBlockingObservable.single), +    assertEquals(10, Observable.from(1, 2, 3, 4).sum.toBlockingObservable.single), +    assertEquals(6, Observable.from(4, 2).sum.toBlockingObservable.single), +    assertEquals(0, Observable.from[Int]().sum.toBlockingObservable.single), +    assertEquals(24, Observable.from(1, 2, 3, 4).product.toBlockingObservable.single), +    assertEquals(8, Observable.from(4, 2).product.toBlockingObservable.single), +    assertEquals(1, Observable.from[Int]().product.toBlockingObservable.single), +    Observable.from("a", "b", "c").zipWithIndex.map(pair => pair._1 + " has index " + pair._2), +    (for ((letter, index) <- Observable.from("a", "b", "c").zipWithIndex) yield letter + " has index " + index), +    val o = Observable.zip(Observable.from(1, 2), Observable.from(10, 20), Observable.from(100, 200)), +    val observables = Observable.from(Observable.from(1, 2), Observable.from(10, 20), Observable.from(100, 200)), +    assertEquals(3, Observable.from(1, 2, 3, 4).filter(condition).first.toBlockingObservable.single), +    assertEquals(3, Observable.from(1, 2, 3, 4).filter(condition).firstOrElse(10).toBlockingObservable.single), +    assertEquals(10, Observable.from(-1, 0, 1).filter(condition).firstOrElse(10).toBlockingObservable.single), +    assertEquals(Seq(7, 8, 9, 10), Observable.from(10, 7, 8, 9).toSeq.map(_.sorted).toBlockingObservable.single), +    assertEquals(Seq(10, 9, 8, 7), Observable.from(10, 7, 8, 9).toSeq.map(_.sortWith(f)).toBlockingObservable.single), +    Observable.from(1, 2, 3).materialize.subscribe(n => n match {, +    assertEquals("b", Observable.from("a", "b", "c").drop(1).first.toBlockingObservable.single), +    assertEquals("b", Observable.from("a", "b", "c").drop(1).firstOrElse("!").toBlockingObservable.single)]