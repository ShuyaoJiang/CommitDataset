[+++ b/src/main/java/io/reactivex/Completable.java, + * Note that by design, subscriptions via {@link #subscribe(CompletableObserver)} can't be disposed, +     * terminates (normally or with an error) and disposes all other Completables., +     * terminates (normally or with an error) and disposes all other Completables., +     * to downstream disposal</strong>., +     * Note that if any of the observers to this Completable call dispose, this Completable will cancel the future., +     *  {@code Completable} terminates with that {@code Throwable} and all other source {@code CompletableSource}s are disposed., +     *  signaled by source(s) after the returned {@code Completable} has been disposed or terminated with a, +     *  {@code Completable} terminates with that {@code Throwable} and all other source {@code CompletableSource}s are disposed., +     *  signaled by source(s) after the returned {@code Completable} has been disposed or terminated with a, +     *  {@code Completable} terminates with that {@code Throwable} and all other source {@code CompletableSource}s are disposed., +     *  signaled by source(s) after the returned {@code Completable} has been disposed or terminated with a, +     *  {@code Completable} terminates with that {@code Throwable} and all other source {@code CompletableSource}s are disposed., +     *  signaled by source(s) after the returned {@code Completable} has been disposed or terminated with a, +     * If this overload performs a lazy disposal after the terminal event is emitted., +     * @param onFinally the action called when this Completable terminates or gets disposed, +     * Returns a Completable that repeatedly subscribes to this Completable until disposed., +     * Subscribes to this CompletableConsumable and returns a Disposable which can be used to dispose, +     * @return the Disposable that allows disposing the subscription, +     * @return the Disposable that can be used for disposing the subscription asynchronously, +     * @return the Disposable that allows disposing the subscription, +     * Returns a Completable which makes sure when a subscriber disposes the subscription, the, +     * @param scheduler the target scheduler where to execute the disposing, +++ b/src/main/java/io/reactivex/Completable.java, + * Note that by design, subscriptions via {@link #subscribe(CompletableObserver)} can't be disposed, +     * terminates (normally or with an error) and disposes all other Completables., +     * terminates (normally or with an error) and disposes all other Completables., +     * to downstream disposal</strong>., +     * Note that if any of the observers to this Completable call dispose, this Completable will cancel the future., +     *  {@code Completable} terminates with that {@code Throwable} and all other source {@code CompletableSource}s are disposed., +     *  signaled by source(s) after the returned {@code Completable} has been disposed or terminated with a, +     *  {@code Completable} terminates with that {@code Throwable} and all other source {@code CompletableSource}s are disposed., +     *  signaled by source(s) after the returned {@code Completable} has been disposed or terminated with a, +     *  {@code Completable} terminates with that {@code Throwable} and all other source {@code CompletableSource}s are disposed., +     *  signaled by source(s) after the returned {@code Completable} has been disposed or terminated with a, +     *  {@code Completable} terminates with that {@code Throwable} and all other source {@code CompletableSource}s are disposed., +     *  signaled by source(s) after the returned {@code Completable} has been disposed or terminated with a, +     * If this overload performs a lazy disposal after the terminal event is emitted., +     * @param onFinally the action called when this Completable terminates or gets disposed, +     * Returns a Completable that repeatedly subscribes to this Completable until disposed., +     * Subscribes to this CompletableConsumable and returns a Disposable which can be used to dispose, +     * @return the Disposable that allows disposing the subscription, +     * @return the Disposable that can be used for disposing the subscription asynchronously, +     * @return the Disposable that allows disposing the subscription, +     * Returns a Completable which makes sure when a subscriber disposes the subscription, the, +     * @param scheduler the target scheduler where to execute the disposing, +++ b/src/main/java/io/reactivex/Maybe.java, + * Note that by design, subscriptions via {@link #subscribe(MaybeObserver)} can't be disposed, +     * Runs multiple MaybeSources and signals the events of the first one that signals (disposing, +     * Runs multiple MaybeSources and signals the events of the first one that signals (disposing, +     * Unlike 1.x, disposing the Maybe won't cancel the future. If necessary, one can use composition to achieve the, +     * Unlike 1.x, disposing the Maybe won't cancel the future. If necessary, one can use composition to achieve the, +     *  {@code Flowable} terminates with that {@code Throwable} and all other source {@code MaybeSource}s are disposed., +     *  {@code Flowable} terminates with that {@code Throwable} and all other source {@code MaybeSource}s are disposed., +     *  {@code Flowable} terminates with that {@code Throwable} and all other source {@code MaybeSource}s are disposed., +     *  {@code Flowable} terminates with that {@code Throwable} and all other source {@code MaybeSource}s are disposed., +     *  {@code Flowable} terminates with that {@code Throwable} and all other source {@code MaybeSource}s are disposed., +     *  {@code Flowable} terminates with that {@code Throwable} and all other source {@code MaybeSource}s are disposed., +     *  {@code Flowable} terminates with that {@code Throwable} and all other source {@code MaybeSource}s are disposed., +     * @param onFinally the action called when this Maybe terminates or gets disposed, +     * @param onDispose the action called when the subscription is disposed, +     * Converts this Maybe into an Observable instance composing disposal, +     * Converts this Maybe into a Single instance composing disposal, +     * Converts this Maybe into a Single instance composing disposal, +     * the current {@code Maybe} is disposed and the {@code fallback} {@code MaybeSource} subscribed to, +     * the current {@code Maybe} is disposed and the {@code fallback} {@code MaybeSource} subscribed to, +     * @param scheduler the target scheduler where to execute the disposal, +++ b/src/main/java/io/reactivex/Completable.java, + * Note that by design, subscriptions via {@link #subscribe(CompletableObserver)} can't be disposed, +     * terminates (normally or with an error) and disposes all other Completables., +     * terminates (normally or with an error) and disposes all other Completables., +     * to downstream disposal</strong>., +     * Note that if any of the observers to this Completable call dispose, this Completable will cancel the future., +     *  {@code Completable} terminates with that {@code Throwable} and all other source {@code CompletableSource}s are disposed., +     *  signaled by source(s) after the returned {@code Completable} has been disposed or terminated with a, +     *  {@code Completable} terminates with that {@code Throwable} and all other source {@code CompletableSource}s are disposed., +     *  signaled by source(s) after the returned {@code Completable} has been disposed or terminated with a, +     *  {@code Completable} terminates with that {@code Throwable} and all other source {@code CompletableSource}s are disposed., +     *  signaled by source(s) after the returned {@code Completable} has been disposed or terminated with a, +     *  {@code Completable} terminates with that {@code Throwable} and all other source {@code CompletableSource}s are disposed., +     *  signaled by source(s) after the returned {@code Completable} has been disposed or terminated with a, +     * If this overload performs a lazy disposal after the terminal event is emitted., +     * @param onFinally the action called when this Completable terminates or gets disposed, +     * Returns a Completable that repeatedly subscribes to this Completable until disposed., +     * Subscribes to this CompletableConsumable and returns a Disposable which can be used to dispose, +     * @return the Disposable that allows disposing the subscription, +     * @return the Disposable that can be used for disposing the subscription asynchronously, +     * @return the Disposable that allows disposing the subscription, +     * Returns a Completable which makes sure when a subscriber disposes the subscription, the, +     * @param scheduler the target scheduler where to execute the disposing, +++ b/src/main/java/io/reactivex/Maybe.java, + * Note that by design, subscriptions via {@link #subscribe(MaybeObserver)} can't be disposed, +     * Runs multiple MaybeSources and signals the events of the first one that signals (disposing, +     * Runs multiple MaybeSources and signals the events of the first one that signals (disposing, +     * Unlike 1.x, disposing the Maybe won't cancel the future. If necessary, one can use composition to achieve the, +     * Unlike 1.x, disposing the Maybe won't cancel the future. If necessary, one can use composition to achieve the, +     *  {@code Flowable} terminates with that {@code Throwable} and all other source {@code MaybeSource}s are disposed., +     *  {@code Flowable} terminates with that {@code Throwable} and all other source {@code MaybeSource}s are disposed., +     *  {@code Flowable} terminates with that {@code Throwable} and all other source {@code MaybeSource}s are disposed., +     *  {@code Flowable} terminates with that {@code Throwable} and all other source {@code MaybeSource}s are disposed.]