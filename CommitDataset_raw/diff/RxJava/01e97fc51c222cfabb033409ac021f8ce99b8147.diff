[+++ b/src/main/java/rx/internal/operators/OnSubscribeRedo.java, +                long c = consumerCapacity.getAndAdd(n);, +++ b/src/main/java/rx/internal/operators/OnSubscribeRedo.java, +                long c = consumerCapacity.getAndAdd(n);, +++ b/src/main/java/rx/internal/operators/OperatorZip.java, +    @SuppressWarnings("rawtypes"), +        /** */, +        private static final long serialVersionUID = -1216676403723546796L;, +            BackpressureUtils.getAndAddRequest(this, n);, +        @SuppressWarnings("unused"), +++ b/src/main/java/rx/internal/operators/OnSubscribeRedo.java, +                long c = consumerCapacity.getAndAdd(n);, +++ b/src/main/java/rx/internal/operators/OperatorZip.java, +    @SuppressWarnings("rawtypes"), +        /** */, +        private static final long serialVersionUID = -1216676403723546796L;, +            BackpressureUtils.getAndAddRequest(this, n);, +        @SuppressWarnings("unused"), +++ b/src/test/java/rx/internal/operators/OperatorRepeatTest.java, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +++ b/src/main/java/rx/internal/operators/OnSubscribeRedo.java, +                long c = consumerCapacity.getAndAdd(n);, +++ b/src/main/java/rx/internal/operators/OperatorZip.java, +    @SuppressWarnings("rawtypes"), +        /** */, +        private static final long serialVersionUID = -1216676403723546796L;, +            BackpressureUtils.getAndAddRequest(this, n);, +        @SuppressWarnings("unused"), +++ b/src/test/java/rx/internal/operators/OperatorRepeatTest.java, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +++ b/src/test/java/rx/internal/operators/OperatorZipTest.java, +    @Test, +    public void testUnboundedDownstreamOverrequesting() {, +        Observable<Integer> source = Observable.range(1, 2).zipWith(Observable.range(1, 2), new Func2<Integer, Integer, Integer>() {, +            @Override, +            public Integer call(Integer t1, Integer t2) {, +                return t1 + 10 * t2;, +            }, +        });, +        , +        TestSubscriber<Integer> ts = new TestSubscriber<Integer>() {, +            @Override, +            public void onNext(Integer t) {, +                super.onNext(t);, +                requestMore(5);, +            }, +        };, +        , +        source.subscribe(ts);, +        , +        ts.assertNoErrors();, +        ts.assertTerminalEvent();, +        ts.assertReceivedOnNext(Arrays.asList(11, 22));, +    }]