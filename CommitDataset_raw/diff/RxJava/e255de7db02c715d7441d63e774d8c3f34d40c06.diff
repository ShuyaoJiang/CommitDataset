[+++ b/src/main/java/io/reactivex/CompletableOperator.java, +     * @throws Exception on failure, +++ b/src/main/java/io/reactivex/CompletableOperator.java, +     * @throws Exception on failure, +++ b/src/main/java/io/reactivex/Flowable.java, +     * Returns a Single that emits a Boolean value that indicates whether two Publisher sequences are the, +    public static <T> Single<Boolean> sequenceEqual(Publisher<? extends T> source1, Publisher<? extends T> source2) {, +     * Returns a Single that emits a Boolean value that indicates whether two Publisher sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two Publisher sequences, +    public static <T> Single<Boolean> sequenceEqual(Publisher<? extends T> source1, Publisher<? extends T> source2,, +     * Returns a Single that emits a Boolean value that indicates whether two Publisher sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two Publisher sequences, +    public static <T> Single<Boolean> sequenceEqual(Publisher<? extends T> source1, Publisher<? extends T> source2,, +        return RxJavaPlugins.onAssembly(new FlowableSequenceEqualSingle<T>(source1, source2, isEqual, bufferSize));, +     * Returns a Single that emits a Boolean value that indicates whether two Publisher sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two sequences are the same, +    public static <T> Single<Boolean> sequenceEqual(Publisher<? extends T> source1, Publisher<? extends T> source2, int bufferSize) {, +        return new BlockingFlowableLatest<T>(this);, +        return new BlockingFlowableMostRecent<T>(this, initialItem);, +        return new BlockingFlowableNext<T>(this);, +        return singleOrError().blockingGet();, +        return RxJavaPlugins.onAssembly(new FlowableDistinct<T, K>(this, keySelector, collectionSupplier));, +        return new FlowableDistinctUntilChanged<T>(this, Functions.equalsPredicate());, +        return new FlowableDistinctUntilChanged<T>(this, Functions.equalsPredicate(keySelector));, +     * Returns a Single that emits a single item, a list composed of all the items emitted by the source, +     * @return a Single that emits a single item: a List containing all of the items emitted by the source, +    public final <U extends Collection<? super T>> Single<U> toList(Callable<U> collectionSupplier) {, +        return RxJavaPlugins.onAssembly(new FlowableToListSingle<T, U>(this, collectionSupplier));, +++ b/src/main/java/io/reactivex/CompletableOperator.java, +     * @throws Exception on failure, +++ b/src/main/java/io/reactivex/Flowable.java, +     * Returns a Single that emits a Boolean value that indicates whether two Publisher sequences are the, +    public static <T> Single<Boolean> sequenceEqual(Publisher<? extends T> source1, Publisher<? extends T> source2) {, +     * Returns a Single that emits a Boolean value that indicates whether two Publisher sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two Publisher sequences, +    public static <T> Single<Boolean> sequenceEqual(Publisher<? extends T> source1, Publisher<? extends T> source2,, +     * Returns a Single that emits a Boolean value that indicates whether two Publisher sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two Publisher sequences, +    public static <T> Single<Boolean> sequenceEqual(Publisher<? extends T> source1, Publisher<? extends T> source2,, +        return RxJavaPlugins.onAssembly(new FlowableSequenceEqualSingle<T>(source1, source2, isEqual, bufferSize));, +     * Returns a Single that emits a Boolean value that indicates whether two Publisher sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two sequences are the same, +    public static <T> Single<Boolean> sequenceEqual(Publisher<? extends T> source1, Publisher<? extends T> source2, int bufferSize) {, +        return new BlockingFlowableLatest<T>(this);, +        return new BlockingFlowableMostRecent<T>(this, initialItem);, +        return new BlockingFlowableNext<T>(this);, +        return singleOrError().blockingGet();, +        return RxJavaPlugins.onAssembly(new FlowableDistinct<T, K>(this, keySelector, collectionSupplier));, +        return new FlowableDistinctUntilChanged<T>(this, Functions.equalsPredicate());, +        return new FlowableDistinctUntilChanged<T>(this, Functions.equalsPredicate(keySelector));, +     * Returns a Single that emits a single item, a list composed of all the items emitted by the source, +     * @return a Single that emits a single item: a List containing all of the items emitted by the source, +    public final <U extends Collection<? super T>> Single<U> toList(Callable<U> collectionSupplier) {, +        return RxJavaPlugins.onAssembly(new FlowableToListSingle<T, U>(this, collectionSupplier));, +++ b/src/main/java/io/reactivex/FlowableOperator.java, +     * @throws Exception on failure, +++ b/src/main/java/io/reactivex/CompletableOperator.java, +     * @throws Exception on failure, +++ b/src/main/java/io/reactivex/Flowable.java, +     * Returns a Single that emits a Boolean value that indicates whether two Publisher sequences are the, +    public static <T> Single<Boolean> sequenceEqual(Publisher<? extends T> source1, Publisher<? extends T> source2) {, +     * Returns a Single that emits a Boolean value that indicates whether two Publisher sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two Publisher sequences, +    public static <T> Single<Boolean> sequenceEqual(Publisher<? extends T> source1, Publisher<? extends T> source2,, +     * Returns a Single that emits a Boolean value that indicates whether two Publisher sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two Publisher sequences, +    public static <T> Single<Boolean> sequenceEqual(Publisher<? extends T> source1, Publisher<? extends T> source2,, +        return RxJavaPlugins.onAssembly(new FlowableSequenceEqualSingle<T>(source1, source2, isEqual, bufferSize));, +     * Returns a Single that emits a Boolean value that indicates whether two Publisher sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two sequences are the same, +    public static <T> Single<Boolean> sequenceEqual(Publisher<? extends T> source1, Publisher<? extends T> source2, int bufferSize) {, +        return new BlockingFlowableLatest<T>(this);, +        return new BlockingFlowableMostRecent<T>(this, initialItem);, +        return new BlockingFlowableNext<T>(this);, +        return singleOrError().blockingGet();, +        return RxJavaPlugins.onAssembly(new FlowableDistinct<T, K>(this, keySelector, collectionSupplier));, +        return new FlowableDistinctUntilChanged<T>(this, Functions.equalsPredicate());, +        return new FlowableDistinctUntilChanged<T>(this, Functions.equalsPredicate(keySelector));, +     * Returns a Single that emits a single item, a list composed of all the items emitted by the source, +     * @return a Single that emits a single item: a List containing all of the items emitted by the source, +    public final <U extends Collection<? super T>> Single<U> toList(Callable<U> collectionSupplier) {, +        return RxJavaPlugins.onAssembly(new FlowableToListSingle<T, U>(this, collectionSupplier));, +++ b/src/main/java/io/reactivex/FlowableOperator.java, +     * @throws Exception on failure, +++ b/src/main/java/io/reactivex/MaybeOperator.java, +     * @throws Exception on failure, +++ b/src/main/java/io/reactivex/CompletableOperator.java, +     * @throws Exception on failure, +++ b/src/main/java/io/reactivex/Flowable.java, +     * Returns a Single that emits a Boolean value that indicates whether two Publisher sequences are the, +    public static <T> Single<Boolean> sequenceEqual(Publisher<? extends T> source1, Publisher<? extends T> source2) {, +     * Returns a Single that emits a Boolean value that indicates whether two Publisher sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two Publisher sequences, +    public static <T> Single<Boolean> sequenceEqual(Publisher<? extends T> source1, Publisher<? extends T> source2,, +     * Returns a Single that emits a Boolean value that indicates whether two Publisher sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two Publisher sequences, +    public static <T> Single<Boolean> sequenceEqual(Publisher<? extends T> source1, Publisher<? extends T> source2,, +        return RxJavaPlugins.onAssembly(new FlowableSequenceEqualSingle<T>(source1, source2, isEqual, bufferSize));, +     * Returns a Single that emits a Boolean value that indicates whether two Publisher sequences are the, +     * @return a Single that emits a Boolean value that indicates whether the two sequences are the same]