[+++ b/rxjava-core/src/main/java/rx/Observable.java, +        return singleOrDefault(that, false, null);, +        return single(that.filter(predicate));, +        return singleOrDefault(that, true, defaultValue);, +        return singleOrDefault(that.filter(predicate), defaultValue);, +    private static <T> T singleOrDefault(Observable<T> that, boolean hasDefault, T defaultVal) {, +        public void testSingleDefaultWithMoreThanOne() {, +            Observable<String> observable = toObservable("one", "two", "three");, +            observable.singleOrDefault("default");, +        }, +, +        @Test, +        public void testSingleWithPredicateDefault() {, +            Observable<String> observable = toObservable("one", "two", "four");, +            assertEquals("four", observable.single(new Func1<String, Boolean>() {, +                @Override, +                public Boolean call(String s) {, +                    return s.length() == 4;, +                }, +            }));, +        }, +, +        @Test(expected = IllegalStateException.class), +        public void testSingleDefaultPredicateMatchesNothing() {, +            Observable<String> observable = toObservable("one", "two");, +                    return args.length() == 4;, +        @Test(expected = IllegalStateException.class), +        public void testSingleDefaultPredicateMatchesMoreThanOne() {, +            Observable<String> observable = toObservable("one", "two");, +            String result = observable.singleOrDefault("default", new Func1<String, Boolean>() {, +                @Override, +                public Boolean call(String args) {, +                    return args.length() == 3;, +                }, +            });, +        }, +]