[+++ b/CHANGES.md, +++ b/CHANGES.md, +++ b/src/main/java/rx/Observable.java, +        return (Observable<R>) ((Transformer<T, ? extends R>) transformer).call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<T>, Observable<? extends R>> {, +++ b/CHANGES.md, +++ b/src/main/java/rx/Observable.java, +        return (Observable<R>) ((Transformer<T, ? extends R>) transformer).call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<T>, Observable<? extends R>> {, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaFunction.java, +++ b/CHANGES.md, +++ b/src/main/java/rx/Observable.java, +        return (Observable<R>) ((Transformer<T, ? extends R>) transformer).call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<T>, Observable<? extends R>> {, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaFunction.java, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaObservable.java, +++ b/CHANGES.md, +++ b/src/main/java/rx/Observable.java, +        return (Observable<R>) ((Transformer<T, ? extends R>) transformer).call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<T>, Observable<? extends R>> {, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaFunction.java, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaObservable.java, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorReturn.java, +++ b/CHANGES.md, +++ b/src/main/java/rx/Observable.java, +        return (Observable<R>) ((Transformer<T, ? extends R>) transformer).call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<T>, Observable<? extends R>> {, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaFunction.java, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaObservable.java, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorReturn.java, +++ b/src/main/java/rx/internal/operators/OperatorOnExceptionResumeNextViaObservable.java, +++ b/CHANGES.md, +++ b/src/main/java/rx/Observable.java, +        return (Observable<R>) ((Transformer<T, ? extends R>) transformer).call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<T>, Observable<? extends R>> {, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaFunction.java, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaObservable.java, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorReturn.java, +++ b/src/main/java/rx/internal/operators/OperatorOnExceptionResumeNextViaObservable.java, +++ b/src/main/java/rx/internal/schedulers/ScheduledAction.java, +            ie.printStackTrace();, +++ b/CHANGES.md, +++ b/src/main/java/rx/Observable.java, +        return (Observable<R>) ((Transformer<T, ? extends R>) transformer).call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<T>, Observable<? extends R>> {, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaFunction.java, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaObservable.java, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorReturn.java, +++ b/src/main/java/rx/internal/operators/OperatorOnExceptionResumeNextViaObservable.java, +++ b/src/main/java/rx/internal/schedulers/ScheduledAction.java, +            ie.printStackTrace();, +++ b/src/main/java/rx/schedulers/ExecutorScheduler.java, +++ b/CHANGES.md, +++ b/src/main/java/rx/Observable.java, +        return (Observable<R>) ((Transformer<T, ? extends R>) transformer).call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<T>, Observable<? extends R>> {, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaFunction.java, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaObservable.java, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorReturn.java, +++ b/src/main/java/rx/internal/operators/OperatorOnExceptionResumeNextViaObservable.java, +++ b/src/main/java/rx/internal/schedulers/ScheduledAction.java, +            ie.printStackTrace();, +++ b/src/main/java/rx/schedulers/ExecutorScheduler.java, +++ b/src/main/java/rx/schedulers/Schedulers.java, +++ b/CHANGES.md, +++ b/src/main/java/rx/Observable.java, +        return (Observable<R>) ((Transformer<T, ? extends R>) transformer).call(this);, +    public static interface Transformer<T, R> extends Func1<Observable<T>, Observable<? extends R>> {, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaFunction.java, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaObservable.java, +++ b/src/main/java/rx/internal/operators/OperatorOnErrorReturn.java, +++ b/src/main/java/rx/internal/operators/OperatorOnExceptionResumeNextViaObservable.java, +++ b/src/main/java/rx/internal/schedulers/ScheduledAction.java, +            ie.printStackTrace();, +++ b/src/main/java/rx/schedulers/ExecutorScheduler.java, +++ b/src/main/java/rx/schedulers/Schedulers.java, +++ b/src/test/java/rx/CovarianceTest.java, +import static org.junit.Assert.assertEquals;, +, +import java.util.Arrays;, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.Set;, +import rx.observables.GroupedObservable;, +import rx.observers.TestSubscriber;, +    @Test, +    public void testGroupByCompose() {, +        Observable<Movie> movies = Observable.just(new HorrorMovie(), new ActionMovie(), new Movie());, +        TestSubscriber<String> ts = new TestSubscriber<String>();, +        movies.groupBy(new Func1<Movie, Class<? extends Movie>>() {, +, +            @Override, +            public Class<? extends Movie> call(Movie m) {, +                return m.getClass();, +            }, +, +        }).flatMap(new Func1<GroupedObservable<Class<? extends Movie>, Movie>, Observable<String>>() {, +, +            @Override, +            public Observable<String> call(GroupedObservable<Class<? extends Movie>, Movie> g) {]