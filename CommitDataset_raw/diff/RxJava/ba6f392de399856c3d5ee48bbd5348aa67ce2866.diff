[+++ b/src/main/java/io/reactivex/Observable.java, +        return RxJavaPlugins.onAssembly(new ObservableRedo<T>(this, ObservableInternalHelper.repeatWhenHandler(handler), false));, +        return RxJavaPlugins.onAssembly(new ObservableRedo<T>(this, ObservableInternalHelper.retryWhenHandler(handler), true));, +++ b/src/main/java/io/reactivex/Observable.java, +        return RxJavaPlugins.onAssembly(new ObservableRedo<T>(this, ObservableInternalHelper.repeatWhenHandler(handler), false));, +        return RxJavaPlugins.onAssembly(new ObservableRedo<T>(this, ObservableInternalHelper.retryWhenHandler(handler), true));, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableRedo.java, +    final boolean retryMode;, +, +            Function<? super Observable<Notification<Object>>, ? extends ObservableSource<?>> manager,, +                    boolean retryMode) {, +        this.retryMode = retryMode;, +        final RedoObserver<T> parent = new RedoObserver<T>(s, subject, source, retryMode);, +        final boolean retryMode;, +, +        RedoObserver(Observer<? super T> actual, Subject<Notification<Object>> subject, ObservableSource<? extends T> source, boolean retryMode) {, +            this.retryMode = retryMode;, +                if (retryMode) {, +                } else {, +                    subject.onError(t);, +                }, +                if (retryMode) {, +                    subject.onComplete();, +                } else {, +        }, +++ b/src/main/java/io/reactivex/Observable.java, +        return RxJavaPlugins.onAssembly(new ObservableRedo<T>(this, ObservableInternalHelper.repeatWhenHandler(handler), false));, +        return RxJavaPlugins.onAssembly(new ObservableRedo<T>(this, ObservableInternalHelper.retryWhenHandler(handler), true));, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableRedo.java, +    final boolean retryMode;, +, +            Function<? super Observable<Notification<Object>>, ? extends ObservableSource<?>> manager,, +                    boolean retryMode) {, +        this.retryMode = retryMode;, +        final RedoObserver<T> parent = new RedoObserver<T>(s, subject, source, retryMode);, +        final boolean retryMode;, +, +        RedoObserver(Observer<? super T> actual, Subject<Notification<Object>> subject, ObservableSource<? extends T> source, boolean retryMode) {, +            this.retryMode = retryMode;, +                if (retryMode) {, +                } else {, +                    subject.onError(t);, +                }, +                if (retryMode) {, +                    subject.onComplete();, +                } else {, +        }, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableRepeatTest.java, +, +    @Test, +    public void testRepeatWhen() {, +        Flowable.error(new TestException()), +        .repeatWhen(new Function<Flowable<Object>, Flowable<Object>>() {, +            @Override, +            public Flowable<Object> apply(Flowable<Object> v) throws Exception {, +                return v.delay(10, TimeUnit.SECONDS);, +            }, +        }), +        .test(), +        .awaitDone(5, TimeUnit.SECONDS), +        .assertFailure(TestException.class);, +    }, +++ b/src/main/java/io/reactivex/Observable.java, +        return RxJavaPlugins.onAssembly(new ObservableRedo<T>(this, ObservableInternalHelper.repeatWhenHandler(handler), false));, +        return RxJavaPlugins.onAssembly(new ObservableRedo<T>(this, ObservableInternalHelper.retryWhenHandler(handler), true));, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableRedo.java, +    final boolean retryMode;, +, +            Function<? super Observable<Notification<Object>>, ? extends ObservableSource<?>> manager,, +                    boolean retryMode) {, +        this.retryMode = retryMode;, +        final RedoObserver<T> parent = new RedoObserver<T>(s, subject, source, retryMode);, +        final boolean retryMode;, +, +        RedoObserver(Observer<? super T> actual, Subject<Notification<Object>> subject, ObservableSource<? extends T> source, boolean retryMode) {, +            this.retryMode = retryMode;, +                if (retryMode) {, +                } else {, +                    subject.onError(t);, +                }, +                if (retryMode) {, +                    subject.onComplete();, +                } else {, +        }, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableRepeatTest.java, +, +    @Test, +    public void testRepeatWhen() {, +        Flowable.error(new TestException()), +        .repeatWhen(new Function<Flowable<Object>, Flowable<Object>>() {, +            @Override, +            public Flowable<Object> apply(Flowable<Object> v) throws Exception {, +                return v.delay(10, TimeUnit.SECONDS);, +            }, +        }), +        .test(), +        .awaitDone(5, TimeUnit.SECONDS), +        .assertFailure(TestException.class);, +    }, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableRepeatTest.java]