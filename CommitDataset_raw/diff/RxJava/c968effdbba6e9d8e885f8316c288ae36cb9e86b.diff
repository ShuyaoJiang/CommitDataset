[+++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/interop.clj, +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/interop.clj, +++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/interop_test.clj, +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/interop.clj, +++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/interop_test.clj, +++ b/rxjava-core/src/main/java/rx/Observable.java, + * For more information see the <a href="https://github.com/Netflix/RxJava/wiki/Observable">RxJava Wiki</a>, +    /**, +     * Executed when 'subscribe' is invoked., +     */, +    private final static RxJavaObservableExecutionHook hook = RxJavaPlugins.getInstance().getObservableExecutionHook();, +, +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/interop.clj, +++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/interop_test.clj, +++ b/rxjava-core/src/main/java/rx/Observable.java, + * For more information see the <a href="https://github.com/Netflix/RxJava/wiki/Observable">RxJava Wiki</a>, +    /**, +     * Executed when 'subscribe' is invoked., +     */, +    private final static RxJavaObservableExecutionHook hook = RxJavaPlugins.getInstance().getObservableExecutionHook();, +, +++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/interop.clj, +++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/interop_test.clj, +++ b/rxjava-core/src/main/java/rx/Observable.java, + * For more information see the <a href="https://github.com/Netflix/RxJava/wiki/Observable">RxJava Wiki</a>, +    /**, +     * Executed when 'subscribe' is invoked., +     */, +    private final static RxJavaObservableExecutionHook hook = RxJavaPlugins.getInstance().getObservableExecutionHook();, +, +++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, +++ b/rxjava-core/src/main/java/rx/operators/OperationCombineLatest.java, +            Observable<String> combined = Observable.create(combineLatest(Observable.create(w1), Observable.create(w2), new Func2<String, String, String>() {, +            Observable<String> combineLatestW = Observable.create(combineLatest(Observable.create(w1), Observable.create(w2), Observable.create(w3), getConcat3StringsCombineLatestFunction()));, +            Observable<String> combineLatestW = Observable.create(combineLatest(Observable.create(w1), Observable.create(w2), Observable.create(w3), getConcat3StringsCombineLatestFunction()));, +            Observable<String> combineLatestW = Observable.create(combineLatest(Observable.create(w1), Observable.create(w2), Observable.create(w3), getConcat3StringsCombineLatestFunction()));, +        private static class TestObservable implements OnSubscribeFunc<String> {, +            public Subscription onSubscribe(Observer<? super String> observer) {, +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/interop.clj, +++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/interop_test.clj, +++ b/rxjava-core/src/main/java/rx/Observable.java, + * For more information see the <a href="https://github.com/Netflix/RxJava/wiki/Observable">RxJava Wiki</a>, +    /**, +     * Executed when 'subscribe' is invoked., +     */, +    private final static RxJavaObservableExecutionHook hook = RxJavaPlugins.getInstance().getObservableExecutionHook();, +, +++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, +++ b/rxjava-core/src/main/java/rx/operators/OperationCombineLatest.java, +            Observable<String> combined = Observable.create(combineLatest(Observable.create(w1), Observable.create(w2), new Func2<String, String, String>() {, +            Observable<String> combineLatestW = Observable.create(combineLatest(Observable.create(w1), Observable.create(w2), Observable.create(w3), getConcat3StringsCombineLatestFunction()));, +            Observable<String> combineLatestW = Observable.create(combineLatest(Observable.create(w1), Observable.create(w2), Observable.create(w3), getConcat3StringsCombineLatestFunction()));, +            Observable<String> combineLatestW = Observable.create(combineLatest(Observable.create(w1), Observable.create(w2), Observable.create(w3), getConcat3StringsCombineLatestFunction()));, +        private static class TestObservable implements OnSubscribeFunc<String> {, +            public Subscription onSubscribe(Observer<? super String> observer) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationConcat.java, +            Observable.concat(Observable.create(o1), Observable.create(o2)).subscribe(observer);, +                                    observer.onNext(Observable.create(o1));, +                                    observer.onNext(Observable.create(o2));, +                                    observer.onNext(Observable.create(o3));, +            OnSubscribeFunc<String> concatF = concat(Observable.create(observableOfObservables));, +            TestObservable<Observable<String>> observableOfObservables = new TestObservable<Observable<String>>(Observable.create(w1), Observable.create(w2));, +            OnSubscribeFunc<String> concatF = concat(Observable.create(observableOfObservables));, +                    observer.onNext(Observable.create(w1));, +                    observer.onNext(Observable.create(w2));, +            final Observable<String> concat = Observable.create(concat(Observable.create(w1), Observable.create(w2)));, +            TestObservable<Observable<String>> observableOfObservables = new TestObservable<Observable<String>>(Observable.create(w1), Observable.create(w2));, +            OnSubscribeFunc<String> concatF = concat(Observable.create(observableOfObservables));, +        private static class TestObservable<T> implements OnSubscribeFunc<T> {, +            public Subscription onSubscribe(final Observer<? super T> observer) {, +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/interop.clj, +++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/interop_test.clj, +++ b/rxjava-core/src/main/java/rx/Observable.java, + * For more information see the <a href="https://github.com/Netflix/RxJava/wiki/Observable">RxJava Wiki</a>, +    /**, +     * Executed when 'subscribe' is invoked., +     */, +    private final static RxJavaObservableExecutionHook hook = RxJavaPlugins.getInstance().getObservableExecutionHook();, +, +++ b/rxjava-core/src/main/java/rx/observables/BlockingObservable.java, +++ b/rxjava-core/src/main/java/rx/operators/OperationCombineLatest.java, +            Observable<String> combined = Observable.create(combineLatest(Observable.create(w1), Observable.create(w2), new Func2<String, String, String>() {, +            Observable<String> combineLatestW = Observable.create(combineLatest(Observable.create(w1), Observable.create(w2), Observable.create(w3), getConcat3StringsCombineLatestFunction()));, +            Observable<String> combineLatestW = Observable.create(combineLatest(Observable.create(w1), Observable.create(w2), Observable.create(w3), getConcat3StringsCombineLatestFunction()));, +            Observable<String> combineLatestW = Observable.create(combineLatest(Observable.create(w1), Observable.create(w2), Observable.create(w3), getConcat3StringsCombineLatestFunction()));, +        private static class TestObservable implements OnSubscribeFunc<String> {, +            public Subscription onSubscribe(Observer<? super String> observer) {, +++ b/rxjava-core/src/main/java/rx/operators/OperationConcat.java, +            Observable.concat(Observable.create(o1), Observable.create(o2)).subscribe(observer);, +                                    observer.onNext(Observable.create(o1));, +                                    observer.onNext(Observable.create(o2));, +                                    observer.onNext(Observable.create(o3));, +            OnSubscribeFunc<String> concatF = concat(Observable.create(observableOfObservables));, +            TestObservable<Observable<String>> observableOfObservables = new TestObservable<Observable<String>>(Observable.create(w1), Observable.create(w2));, +            OnSubscribeFunc<String> concatF = concat(Observable.create(observableOfObservables));, +                    observer.onNext(Observable.create(w1));, +                    observer.onNext(Observable.create(w2));, +            final Observable<String> concat = Observable.create(concat(Observable.create(w1), Observable.create(w2)));, +            TestObservable<Observable<String>> observableOfObservables = new TestObservable<Observable<String>>(Observable.create(w1), Observable.create(w2));]