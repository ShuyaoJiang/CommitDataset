[+++ b/src/main/java/io/reactivex/Completable.java, +        return wrap(ObjectHelper.requireNonNull(transformer, "transformer is null").apply(this));, +            return ObjectHelper.requireNonNull(converter, "converter is null").apply(this);, +++ b/src/main/java/io/reactivex/Completable.java, +        return wrap(ObjectHelper.requireNonNull(transformer, "transformer is null").apply(this));, +            return ObjectHelper.requireNonNull(converter, "converter is null").apply(this);, +++ b/src/main/java/io/reactivex/Flowable.java, +        return fromPublisher(((FlowableTransformer<T, R>) ObjectHelper.requireNonNull(composer, "composer is null")).apply(this));, +            return ObjectHelper.requireNonNull(converter, "converter is null").apply(this);, +++ b/src/main/java/io/reactivex/Completable.java, +        return wrap(ObjectHelper.requireNonNull(transformer, "transformer is null").apply(this));, +            return ObjectHelper.requireNonNull(converter, "converter is null").apply(this);, +++ b/src/main/java/io/reactivex/Flowable.java, +        return fromPublisher(((FlowableTransformer<T, R>) ObjectHelper.requireNonNull(composer, "composer is null")).apply(this));, +            return ObjectHelper.requireNonNull(converter, "converter is null").apply(this);, +++ b/src/main/java/io/reactivex/Maybe.java, +        return wrap(((MaybeTransformer<T, R>) ObjectHelper.requireNonNull(transformer, "transformer is null")).apply(this));, +            return ObjectHelper.requireNonNull(convert, "convert is null").apply(this);, +++ b/src/main/java/io/reactivex/Completable.java, +        return wrap(ObjectHelper.requireNonNull(transformer, "transformer is null").apply(this));, +            return ObjectHelper.requireNonNull(converter, "converter is null").apply(this);, +++ b/src/main/java/io/reactivex/Flowable.java, +        return fromPublisher(((FlowableTransformer<T, R>) ObjectHelper.requireNonNull(composer, "composer is null")).apply(this));, +            return ObjectHelper.requireNonNull(converter, "converter is null").apply(this);, +++ b/src/main/java/io/reactivex/Maybe.java, +        return wrap(((MaybeTransformer<T, R>) ObjectHelper.requireNonNull(transformer, "transformer is null")).apply(this));, +            return ObjectHelper.requireNonNull(convert, "convert is null").apply(this);, +++ b/src/main/java/io/reactivex/Observable.java, +        return wrap(((ObservableTransformer<T, R>) ObjectHelper.requireNonNull(composer, "composer is null")).apply(this));, +            return ObjectHelper.requireNonNull(converter, "converter is null").apply(this);, +++ b/src/main/java/io/reactivex/Completable.java, +        return wrap(ObjectHelper.requireNonNull(transformer, "transformer is null").apply(this));, +            return ObjectHelper.requireNonNull(converter, "converter is null").apply(this);, +++ b/src/main/java/io/reactivex/Flowable.java, +        return fromPublisher(((FlowableTransformer<T, R>) ObjectHelper.requireNonNull(composer, "composer is null")).apply(this));, +            return ObjectHelper.requireNonNull(converter, "converter is null").apply(this);, +++ b/src/main/java/io/reactivex/Maybe.java, +        return wrap(((MaybeTransformer<T, R>) ObjectHelper.requireNonNull(transformer, "transformer is null")).apply(this));, +            return ObjectHelper.requireNonNull(convert, "convert is null").apply(this);, +++ b/src/main/java/io/reactivex/Observable.java, +        return wrap(((ObservableTransformer<T, R>) ObjectHelper.requireNonNull(composer, "composer is null")).apply(this));, +            return ObjectHelper.requireNonNull(converter, "converter is null").apply(this);, +++ b/src/main/java/io/reactivex/Single.java, +        return wrap(((SingleTransformer<T, R>) ObjectHelper.requireNonNull(transformer, "transformer is null")).apply(this));, +            return ObjectHelper.requireNonNull(convert, "convert is null").apply(this);, +++ b/src/main/java/io/reactivex/Completable.java, +        return wrap(ObjectHelper.requireNonNull(transformer, "transformer is null").apply(this));, +            return ObjectHelper.requireNonNull(converter, "converter is null").apply(this);, +++ b/src/main/java/io/reactivex/Flowable.java, +        return fromPublisher(((FlowableTransformer<T, R>) ObjectHelper.requireNonNull(composer, "composer is null")).apply(this));, +            return ObjectHelper.requireNonNull(converter, "converter is null").apply(this);, +++ b/src/main/java/io/reactivex/Maybe.java, +        return wrap(((MaybeTransformer<T, R>) ObjectHelper.requireNonNull(transformer, "transformer is null")).apply(this));, +            return ObjectHelper.requireNonNull(convert, "convert is null").apply(this);, +++ b/src/main/java/io/reactivex/Observable.java, +        return wrap(((ObservableTransformer<T, R>) ObjectHelper.requireNonNull(composer, "composer is null")).apply(this));, +            return ObjectHelper.requireNonNull(converter, "converter is null").apply(this);, +++ b/src/main/java/io/reactivex/Single.java, +        return wrap(((SingleTransformer<T, R>) ObjectHelper.requireNonNull(transformer, "transformer is null")).apply(this));, +            return ObjectHelper.requireNonNull(convert, "convert is null").apply(this);, +++ b/src/main/java/io/reactivex/parallel/ParallelFlowable.java, +    public abstract void subscribe(@NonNull Subscriber<? super T>[] subscribers);, +    protected final boolean validate(@NonNull Subscriber<?>[] subscribers) {, +    public static <T> ParallelFlowable<T> from(@NonNull Publisher<? extends T> source) {, +    public static <T> ParallelFlowable<T> from(@NonNull Publisher<? extends T> source, int parallelism) {, +    public static <T> ParallelFlowable<T> from(@NonNull Publisher<? extends T> source,, +    public final <R> ParallelFlowable<R> map(@NonNull Function<? super T, ? extends R> mapper) {, +    public final ParallelFlowable<T> filter(@NonNull Predicate<? super T> predicate) {, +    public final ParallelFlowable<T> runOn(@NonNull Scheduler scheduler) {, +    public final ParallelFlowable<T> runOn(@NonNull Scheduler scheduler, int prefetch) {, +    public final Flowable<T> reduce(@NonNull BiFunction<T, T, T> reducer) {, +    public final <R> ParallelFlowable<R> reduce(@NonNull Callable<R> initialSupplier, @NonNull BiFunction<R, ? super T, R> reducer) {, +    public final Flowable<T> sorted(@NonNull Comparator<? super T> comparator) {, +    public final Flowable<T> sorted(@NonNull Comparator<? super T> comparator, int capacityHint) {, +    public final Flowable<List<T>> toSortedList(@NonNull Comparator<? super T> comparator) {, +    public final Flowable<List<T>> toSortedList(@NonNull Comparator<? super T> comparator, int capacityHint) {, +    public final ParallelFlowable<T> doOnNext(@NonNull Consumer<? super T> onNext) {, +    public final ParallelFlowable<T> doAfterNext(@NonNull Consumer<? super T> onAfterNext) {, +    public final ParallelFlowable<T> doOnError(@NonNull Consumer<Throwable> onError) {, +    public final ParallelFlowable<T> doOnComplete(@NonNull Action onComplete) {, +    public final ParallelFlowable<T> doAfterTerminated(@NonNull Action onAfterTerminate) {, +    public final ParallelFlowable<T> doOnSubscribe(@NonNull Consumer<? super Subscription> onSubscribe) {, +    public final ParallelFlowable<T> doOnRequest(@NonNull LongConsumer onRequest) {, +    public final ParallelFlowable<T> doOnCancel(@NonNull Action onCancel) {, +    public final <C> ParallelFlowable<C> collect(@NonNull Callable<? extends C> collectionSupplier, @NonNull BiConsumer<? super C, ? super T> collector) {, +    public static <T> ParallelFlowable<T> fromArray(@NonNull Publisher<T>... publishers) {, +    public final <U> U to(@NonNull Function<? super ParallelFlowable<T>, U> converter) {, +            return ObjectHelper.requireNonNull(converter, "converter is null").apply(this);, +    public final <U> ParallelFlowable<U> compose(@NonNull ParallelTransformer<T, U> composer) {, +        return RxJavaPlugins.onAssembly(ObjectHelper.requireNonNull(composer, "composer is null").apply(this));, +    public final <R> ParallelFlowable<R> flatMap(@NonNull Function<? super T, ? extends Publisher<? extends R>> mapper) {, +            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper, boolean delayError) {, +            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper, boolean delayError, int maxConcurrency) {, +            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper,, +            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper) {, +            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper,, +            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper,, +            @NonNull Function<? super T, ? extends Publisher<? extends R>> mapper,, +++ b/src/main/java/io/reactivex/Completable.java, +        return wrap(ObjectHelper.requireNonNull(transformer, "transformer is null").apply(this));]