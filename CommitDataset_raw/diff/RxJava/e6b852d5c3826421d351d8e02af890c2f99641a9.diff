[+++ b/src/main/java/io/reactivex/Flowable.java, +     *  <dd>{@code debounce} operates by default on the {@code computation} {@link Scheduler}.</dd>, +     *            the length of the window of time that must pass after the emission of an item from the source, +     *            Publisher in which that Publisher emits no items in order for the item to be emitted by the, +     *            resulting Publisher, +     *            the unit of time for the specified {@code timeout}, +     *            the unit of time for the specified {@code timeout}, +     * Returns a Flowable that mirrors the source Publisher, except that it drops items emitted by the, +     * source Publisher that are followed by newer items before a timeout value expires. The timer resets on, +     * each emission (alias to {@link #debounce(long, TimeUnit)})., +     * <em>Note:</em> If items keep being emitted by the source Publisher faster than the timeout then no items, +     * will be emitted by the resulting Publisher., +     *            the unit of time for the specified {@code timeout}, +     * @return a Flowable that filters out items from the source Publisher that are too quickly followed by, +     *         newer items, +     * Returns a Flowable that mirrors the source Publisher, except that it drops items emitted by the, +     * source Publisher that are followed by newer items before a timeout value expires on a specified, +     * Scheduler. The timer resets on each emission (alias to {@link #debounce(long, TimeUnit, Scheduler)})., +     * <em>Note:</em> If items keep being emitted by the source Publisher faster than the timeout then no items, +     * will be emitted by the resulting Publisher., +     *            the unit of time for the specified {@code timeout}, +     * @return a Flowable that filters out items from the source Publisher that are too quickly followed by, +     *         newer items, +++ b/src/main/java/io/reactivex/Flowable.java, +     *  <dd>{@code debounce} operates by default on the {@code computation} {@link Scheduler}.</dd>, +     *            the length of the window of time that must pass after the emission of an item from the source, +     *            Publisher in which that Publisher emits no items in order for the item to be emitted by the, +     *            resulting Publisher, +     *            the unit of time for the specified {@code timeout}, +     *            the unit of time for the specified {@code timeout}, +     * Returns a Flowable that mirrors the source Publisher, except that it drops items emitted by the, +     * source Publisher that are followed by newer items before a timeout value expires. The timer resets on, +     * each emission (alias to {@link #debounce(long, TimeUnit)})., +     * <em>Note:</em> If items keep being emitted by the source Publisher faster than the timeout then no items, +     * will be emitted by the resulting Publisher., +     *            the unit of time for the specified {@code timeout}, +     * @return a Flowable that filters out items from the source Publisher that are too quickly followed by, +     *         newer items, +     * Returns a Flowable that mirrors the source Publisher, except that it drops items emitted by the, +     * source Publisher that are followed by newer items before a timeout value expires on a specified, +     * Scheduler. The timer resets on each emission (alias to {@link #debounce(long, TimeUnit, Scheduler)})., +     * <em>Note:</em> If items keep being emitted by the source Publisher faster than the timeout then no items, +     * will be emitted by the resulting Publisher., +     *            the unit of time for the specified {@code timeout}, +     * @return a Flowable that filters out items from the source Publisher that are too quickly followed by, +     *         newer items, +++ b/src/main/java/io/reactivex/Observable.java, +     *  <dd>{@code debounce} operates by default on the {@code computation} {@link Scheduler}.</dd>, +     *            the length of the window of time that must pass after the emission of an item from the source, +     *            ObservableSource in which that ObservableSource emits no items in order for the item to be emitted by the, +     *            resulting ObservableSource, +     *            the unit of time for the specified {@code timeout}, +     *            the unit of time for the specified {@code timeout}, +     * Returns an Observable that mirrors the source ObservableSource, except that it drops items emitted by the, +     * source ObservableSource that are followed by newer items before a timeout value expires. The timer resets on, +     * each emission (alias to {@link #debounce(long, TimeUnit, Scheduler)})., +     * <em>Note:</em> If items keep being emitted by the source ObservableSource faster than the timeout then no items, +     * will be emitted by the resulting ObservableSource., +     *            the unit of time for the specified {@code timeout}, +     * @return an Observable that filters out items from the source ObservableSource that are too quickly followed by, +     *         newer items, +     * Returns an Observable that mirrors the source ObservableSource, except that it drops items emitted by the, +     * source ObservableSource that are followed by newer items before a timeout value expires on a specified, +     * Scheduler. The timer resets on each emission (Alias to {@link #debounce(long, TimeUnit, Scheduler)})., +     * <em>Note:</em> If items keep being emitted by the source ObservableSource faster than the timeout then no items, +     * will be emitted by the resulting ObservableSource., +     *            the unit of time for the specified {@code timeout}, +     * @return an Observable that filters out items from the source ObservableSource that are too quickly followed by, +     *         newer items]