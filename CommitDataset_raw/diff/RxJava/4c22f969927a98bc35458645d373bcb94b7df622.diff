[+++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableAmb.java, +        CompletableObserver inner = new Amb(once, set, s);, +, +    static final class Amb implements CompletableObserver {, +        private final AtomicBoolean once;, +        private final CompositeDisposable set;, +        private final CompletableObserver s;, +, +        Amb(AtomicBoolean once, CompositeDisposable set, CompletableObserver s) {, +            this.once = once;, +            this.set = set;, +            this.s = s;, +        }, +, +        @Override, +        public void onComplete() {, +            if (once.compareAndSet(false, true)) {, +                set.dispose();, +                s.onComplete();, +            }, +        }, +, +        @Override, +        public void onError(Throwable e) {, +            if (once.compareAndSet(false, true)) {, +                set.dispose();, +                s.onError(e);, +            } else {, +                RxJavaPlugins.onError(e);, +            }, +        }, +, +        @Override, +        public void onSubscribe(Disposable d) {, +            set.add(d);, +        }, +, +    }, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableAmb.java, +        CompletableObserver inner = new Amb(once, set, s);, +, +    static final class Amb implements CompletableObserver {, +        private final AtomicBoolean once;, +        private final CompositeDisposable set;, +        private final CompletableObserver s;, +, +        Amb(AtomicBoolean once, CompositeDisposable set, CompletableObserver s) {, +            this.once = once;, +            this.set = set;, +            this.s = s;, +        }, +, +        @Override, +        public void onComplete() {, +            if (once.compareAndSet(false, true)) {, +                set.dispose();, +                s.onComplete();, +            }, +        }, +, +        @Override, +        public void onError(Throwable e) {, +            if (once.compareAndSet(false, true)) {, +                set.dispose();, +                s.onError(e);, +            } else {, +                RxJavaPlugins.onError(e);, +            }, +        }, +, +        @Override, +        public void onSubscribe(Disposable d) {, +            set.add(d);, +        }, +, +    }, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableDelay.java, +        source.subscribe(new Delay(set, s));, +    }, +    final class Delay implements CompletableObserver {, +, +        private final CompositeDisposable set;, +        private final CompletableObserver s;, +, +        Delay(CompositeDisposable set, CompletableObserver s) {, +            this.set = set;, +            this.s = s;, +        }, +            set.add(scheduler.scheduleDirect(new OnComplete(), delay, unit));, +            set.add(scheduler.scheduleDirect(new OnError(e), delayError ? delay : 0, unit));, +        final class OnComplete implements Runnable {, +            @Override, +            public void run() {, +                s.onComplete();, +            }, +        final class OnError implements Runnable {, +            private final Throwable e;, +, +            OnError(Throwable e) {, +                this.e = e;]