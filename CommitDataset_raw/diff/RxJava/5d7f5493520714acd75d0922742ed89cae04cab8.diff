[+++ b/src/main/java/io/reactivex/Completable.java, +import io.reactivex.observers.TestObserver;, +     * Creates a TestObserver and subscribes, +     * @return the new TestObserver instance, +    public final TestObserver<Void> test() {, +        TestObserver<Void> ts = new TestObserver<Void>();, +        subscribe(ts);, +     * Creates a TestObserver optionally in cancelled state, then subscribes it to this Completable., +     * @param cancelled if true, the TestObserver will be cancelled before subscribing to this, +     * @return the new TestObserver instance, +    public final TestObserver<Void> test(boolean cancelled) {, +        TestObserver<Void> ts = new TestObserver<Void>();, +        subscribe(ts);, +++ b/src/main/java/io/reactivex/Completable.java, +import io.reactivex.observers.TestObserver;, +     * Creates a TestObserver and subscribes, +     * @return the new TestObserver instance, +    public final TestObserver<Void> test() {, +        TestObserver<Void> ts = new TestObserver<Void>();, +        subscribe(ts);, +     * Creates a TestObserver optionally in cancelled state, then subscribes it to this Completable., +     * @param cancelled if true, the TestObserver will be cancelled before subscribing to this, +     * @return the new TestObserver instance, +    public final TestObserver<Void> test(boolean cancelled) {, +        TestObserver<Void> ts = new TestObserver<Void>();, +        subscribe(ts);, +++ b/src/main/java/io/reactivex/Flowable.java, +     * @return a Single that emits {@code true} if all items emitted by the source Publisher satisfy the, +    public final Single<Boolean> all(Predicate<? super T> predicate) {, +        return RxJavaPlugins.onAssembly(new FlowableAllSingle<T>(this, predicate));, +     * @return a Single that emits a Boolean that indicates whether any item emitted by the source, +    public final Single<Boolean> any(Predicate<? super T> predicate) {, +        return RxJavaPlugins.onAssembly(new FlowableAnySingle<T>(this, predicate));, +    public final Single<Boolean> contains(final Object item) {, +    public final Single<Boolean> isEmpty() {, +++ b/src/main/java/io/reactivex/Completable.java, +import io.reactivex.observers.TestObserver;, +     * Creates a TestObserver and subscribes, +     * @return the new TestObserver instance, +    public final TestObserver<Void> test() {, +        TestObserver<Void> ts = new TestObserver<Void>();, +        subscribe(ts);, +     * Creates a TestObserver optionally in cancelled state, then subscribes it to this Completable., +     * @param cancelled if true, the TestObserver will be cancelled before subscribing to this, +     * @return the new TestObserver instance, +    public final TestObserver<Void> test(boolean cancelled) {, +        TestObserver<Void> ts = new TestObserver<Void>();, +        subscribe(ts);, +++ b/src/main/java/io/reactivex/Flowable.java, +     * @return a Single that emits {@code true} if all items emitted by the source Publisher satisfy the, +    public final Single<Boolean> all(Predicate<? super T> predicate) {, +        return RxJavaPlugins.onAssembly(new FlowableAllSingle<T>(this, predicate));, +     * @return a Single that emits a Boolean that indicates whether any item emitted by the source, +    public final Single<Boolean> any(Predicate<? super T> predicate) {, +        return RxJavaPlugins.onAssembly(new FlowableAnySingle<T>(this, predicate));, +    public final Single<Boolean> contains(final Object item) {, +    public final Single<Boolean> isEmpty() {, +++ b/src/main/java/io/reactivex/Maybe.java, +import io.reactivex.observers.TestObserver;, +     * Creates a TestObserver and subscribes, +     * @return the new TestObserver instance, +    public final TestObserver<T> test() {, +        TestObserver<T> ts = new TestObserver<T>();, +        subscribe(ts);, +     * Creates a TestObserver optionally in cancelled state, then subscribes it to this Maybe., +     * @param cancelled if true, the TestObserver will be cancelled before subscribing to this, +     * @return the new TestObserver instance, +    public final TestObserver<T> test(boolean cancelled) {, +        TestObserver<T> ts = new TestObserver<T>();, +        subscribe(ts);, +++ b/src/main/java/io/reactivex/Completable.java, +import io.reactivex.observers.TestObserver;, +     * Creates a TestObserver and subscribes, +     * @return the new TestObserver instance, +    public final TestObserver<Void> test() {, +        TestObserver<Void> ts = new TestObserver<Void>();, +        subscribe(ts);, +     * Creates a TestObserver optionally in cancelled state, then subscribes it to this Completable., +     * @param cancelled if true, the TestObserver will be cancelled before subscribing to this, +     * @return the new TestObserver instance, +    public final TestObserver<Void> test(boolean cancelled) {, +        TestObserver<Void> ts = new TestObserver<Void>();, +        subscribe(ts);, +++ b/src/main/java/io/reactivex/Flowable.java, +     * @return a Single that emits {@code true} if all items emitted by the source Publisher satisfy the, +    public final Single<Boolean> all(Predicate<? super T> predicate) {, +        return RxJavaPlugins.onAssembly(new FlowableAllSingle<T>(this, predicate));, +     * @return a Single that emits a Boolean that indicates whether any item emitted by the source, +    public final Single<Boolean> any(Predicate<? super T> predicate) {, +        return RxJavaPlugins.onAssembly(new FlowableAnySingle<T>(this, predicate));, +    public final Single<Boolean> contains(final Object item) {, +    public final Single<Boolean> isEmpty() {, +++ b/src/main/java/io/reactivex/Maybe.java, +import io.reactivex.observers.TestObserver;, +     * Creates a TestObserver and subscribes, +     * @return the new TestObserver instance, +    public final TestObserver<T> test() {, +        TestObserver<T> ts = new TestObserver<T>();, +        subscribe(ts);, +     * Creates a TestObserver optionally in cancelled state, then subscribes it to this Maybe.]