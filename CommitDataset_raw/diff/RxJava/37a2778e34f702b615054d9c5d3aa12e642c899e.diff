[+++ b/rxjava-core/src/main/java/rx/GroupedObservable.java, +/**, + * Copyright 2013 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx;, +, +import rx.util.functions.*;, +, +import java.util.List;, +import java.util.Map;, +, +public class GroupedObservable<K, T> extends Observable<T> {, +    private final K key;, +    private final Observable<T> delegate;, +, +    public GroupedObservable(K key, Observable<T> delegate) {, +        this.key = key;, +        this.delegate = delegate;, +    }, +, +    public K getKey() {, +        return key;, +    }, +, +    public Subscription subscribe(Observer<T> observer) {, +        return delegate.subscribe(observer);, +    }, +, +    @Override, +    @SuppressWarnings({ "rawtypes", "unchecked" }), +    public Subscription subscribe(Map<String, Object> callbacks) {, +        return delegate.subscribe(callbacks);, +    }, +, +    @Override, +    @SuppressWarnings({ "rawtypes", "unchecked" }), +    public Subscription subscribe(Object o) {, +        return delegate.subscribe(o);, +    }, +, +    public Subscription subscribe(Action1<T> onNext) {, +        return delegate.subscribe(onNext);, +    }, +, +    @Override, +    @SuppressWarnings({ "rawtypes", "unchecked" }), +    public Subscription subscribe(Object onNext, Object onError) {, +        return delegate.subscribe(onNext, onError);, +    }, +, +    public Subscription subscribe(Action1<T> onNext, Action1<Exception> onError) {, +        return delegate.subscribe(onNext, onError);, +    }, +, +    @Override, +    @SuppressWarnings({ "rawtypes", "unchecked" }), +    public Subscription subscribe(Object onNext, Object onError, Object onComplete) {, +        return delegate.subscribe(onNext, onError, onComplete);, +    }, +, +    public Subscription subscribe(Action1<T> onNext, Action1<Exception> onError, Action0 onComplete) {, +        return delegate.subscribe(onNext, onError, onComplete);, +    }, +, +    public void forEach(Action1<T> onNext) {, +        delegate.forEach(onNext);, +    }, +, +    @Override, +    @SuppressWarnings({ "rawtypes", "unchecked" }), +    public void forEach(Object o) {, +        delegate.forEach(o);, +    }, +, +    @Override, +    public T single() {, +        return delegate.single();, +    }, +, +    public T single(Func1<T, Boolean> predicate) {, +        return delegate.single(predicate);, +    }, +, +    @Override, +    public T single(Object predicate) {, +        return delegate.single(predicate);, +    }, +]