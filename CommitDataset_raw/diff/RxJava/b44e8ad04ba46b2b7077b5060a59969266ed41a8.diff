[+++ b/rxjava-core/src/main/java/rx/Producer.java, +    public void request(long n);, +++ b/rxjava-core/src/main/java/rx/Producer.java, +    public void request(long n);, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +    private long requested = Long.MIN_VALUE; // default to not set, +    public final void request(long n) {, +        long toRequest;, +                if (toRequest == Long.MIN_VALUE) {, +            if (toRequest == Long.MIN_VALUE) {, +++ b/rxjava-core/src/main/java/rx/Producer.java, +    public void request(long n);, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +    private long requested = Long.MIN_VALUE; // default to not set, +    public final void request(long n) {, +        long toRequest;, +                if (toRequest == Long.MIN_VALUE) {, +            if (toRequest == Long.MIN_VALUE) {, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +import java.util.concurrent.atomic.AtomicLongFieldUpdater;, +        private volatile long requested = 0;, +        private static final AtomicLongFieldUpdater<IterableProducer> REQUESTED_UPDATER = AtomicLongFieldUpdater.newUpdater(IterableProducer.class, "requested");, +        public void request(long n) {, +                long _c = REQUESTED_UPDATER.getAndAdd(this, n);, +                        long r = requested;, +                        long numToEmit = r;, +++ b/rxjava-core/src/main/java/rx/Producer.java, +    public void request(long n);, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +    private long requested = Long.MIN_VALUE; // default to not set, +    public final void request(long n) {, +        long toRequest;, +                if (toRequest == Long.MIN_VALUE) {, +            if (toRequest == Long.MIN_VALUE) {, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +import java.util.concurrent.atomic.AtomicLongFieldUpdater;, +        private volatile long requested = 0;, +        private static final AtomicLongFieldUpdater<IterableProducer> REQUESTED_UPDATER = AtomicLongFieldUpdater.newUpdater(IterableProducer.class, "requested");, +        public void request(long n) {, +                long _c = REQUESTED_UPDATER.getAndAdd(this, n);, +                        long r = requested;, +                        long numToEmit = r;, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeRange.java, +import java.util.concurrent.atomic.AtomicLongFieldUpdater;, +        private volatile long requested;, +        private static final AtomicLongFieldUpdater<RangeProducer> REQUESTED_UPDATER = AtomicLongFieldUpdater.newUpdater(RangeProducer.class, "requested");, +        private long index;, +        public void request(long n) {, +                for (long i = index; i <= end; i++) {, +                    o.onNext((int) i);, +                long _c = REQUESTED_UPDATER.getAndAdd(this, n);, +                        long r = requested;, +                        long idx = index;, +                        long numLeft = end - idx + 1;, +                        long e = Math.min(numLeft, r);, +                        long stopAt = e + idx;, +                        for (long i = idx; i < stopAt; i++) {, +                            o.onNext((int) i);, +++ b/rxjava-core/src/main/java/rx/Producer.java, +    public void request(long n);, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +    private long requested = Long.MIN_VALUE; // default to not set, +    public final void request(long n) {, +        long toRequest;, +                if (toRequest == Long.MIN_VALUE) {, +            if (toRequest == Long.MIN_VALUE) {, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java, +import java.util.concurrent.atomic.AtomicLongFieldUpdater;, +        private volatile long requested = 0;, +        private static final AtomicLongFieldUpdater<IterableProducer> REQUESTED_UPDATER = AtomicLongFieldUpdater.newUpdater(IterableProducer.class, "requested");, +        public void request(long n) {, +                long _c = REQUESTED_UPDATER.getAndAdd(this, n);, +                        long r = requested;, +                        long numToEmit = r;, +++ b/rxjava-core/src/main/java/rx/internal/operators/OnSubscribeRange.java, +import java.util.concurrent.atomic.AtomicLongFieldUpdater;, +        private volatile long requested;, +        private static final AtomicLongFieldUpdater<RangeProducer> REQUESTED_UPDATER = AtomicLongFieldUpdater.newUpdater(RangeProducer.class, "requested");, +        private long index;, +        public void request(long n) {, +                for (long i = index; i <= end; i++) {, +                    o.onNext((int) i);, +                long _c = REQUESTED_UPDATER.getAndAdd(this, n);, +                        long r = requested;, +                        long idx = index;, +                        long numLeft = end - idx + 1;, +                        long e = Math.min(numLeft, r);, +                        long stopAt = e + idx;, +                        for (long i = idx; i < stopAt; i++) {, +                            o.onNext((int) i);, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorMerge.java, +        public void request(long n) {, +++ b/rxjava-core/src/main/java/rx/Producer.java, +    public void request(long n);, +++ b/rxjava-core/src/main/java/rx/Subscriber.java, +    private long requested = Long.MIN_VALUE; // default to not set, +    public final void request(long n) {, +        long toRequest;, +                if (toRequest == Long.MIN_VALUE) {, +            if (toRequest == Long.MIN_VALUE) {]