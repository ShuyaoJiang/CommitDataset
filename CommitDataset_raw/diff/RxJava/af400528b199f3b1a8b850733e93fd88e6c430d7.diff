[+++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +import rx.operators.NotificationLite;, +        final SubjectSubscriptionManager<T> state = new SubjectSubscriptionManager<T>();, +        state.onTerminated = new Action1<SubjectObserver<T>>() {, +            public void call(SubjectObserver<T> o) {, +                Object v = state.get();, +                o.accept(v);, +                o.completeSingle(v);, +        };, +        return new AsyncSubject<T>(state, state);, +    final SubjectSubscriptionManager<T> state;, +    volatile Object lastValue;, +    private final NotificationLite<T> nl = NotificationLite.instance();, +    protected AsyncSubject(OnSubscribe<T> onSubscribe, SubjectSubscriptionManager<T> state) {, +        this.state = state;, +        if (state.active) {, +            Object last = lastValue;, +            if (last == null) {, +                last = nl.completed();, +            for (SubjectObserver<T> bo : state.terminate(last)) {, +                if (last == nl.completed()) {, +                    bo.onCompleted();, +                } else {, +                    bo.onNext(nl.getValue(last));, +                    bo.onCompleted();, +                }, +        if (state.active) {, +            Object n = nl.error(e);, +            for (SubjectObserver<T> bo : state.terminate(n)) {, +                bo.onError(e);, +        lastValue = nl.next(v);, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +import rx.operators.NotificationLite;, +        final SubjectSubscriptionManager<T> state = new SubjectSubscriptionManager<T>();, +        state.onTerminated = new Action1<SubjectObserver<T>>() {, +            public void call(SubjectObserver<T> o) {, +                Object v = state.get();, +                o.accept(v);, +                o.completeSingle(v);, +        };, +        return new AsyncSubject<T>(state, state);, +    final SubjectSubscriptionManager<T> state;, +    volatile Object lastValue;, +    private final NotificationLite<T> nl = NotificationLite.instance();, +    protected AsyncSubject(OnSubscribe<T> onSubscribe, SubjectSubscriptionManager<T> state) {, +        this.state = state;, +        if (state.active) {, +            Object last = lastValue;, +            if (last == null) {, +                last = nl.completed();, +            for (SubjectObserver<T> bo : state.terminate(last)) {, +                if (last == nl.completed()) {, +                    bo.onCompleted();, +                } else {, +                    bo.onNext(nl.getValue(last));, +                    bo.onCompleted();, +                }, +        if (state.active) {, +            Object n = nl.error(e);, +            for (SubjectObserver<T> bo : state.terminate(n)) {, +                bo.onError(e);, +        lastValue = nl.next(v);, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +import rx.Subscriber;, +import rx.operators.NotificationLite;, +import rx.subscriptions.Subscriptions;, +@SuppressWarnings({ "unchecked", "rawtypes" }), +    /**, +     * Create a {@link BehaviorSubject} without a default value., +     * @param <T> the value type, +     * @return the constructed {@link BehaviorSubject}, +     */, +    public static <T> BehaviorSubject<T> create() {, +        return create(null, false);, +    }, +     * @param <T> the value type, +        return create(defaultValue, true);, +    }, +    private static <T> BehaviorSubject<T> create(T defaultValue, boolean hasDefault) {, +        final SubjectSubscriptionManager<T> state = new SubjectSubscriptionManager<T>();, +        if (hasDefault) {, +            state.set(NotificationLite.instance().next(defaultValue));, +        }, +        state.onAdded = new Action1<SubjectObserver<T>>() {, +            public void call(SubjectObserver<T> o) {, +                o.emitFirst(state.get());, +        };, +        state.onTerminated = state.onAdded;, +        return new BehaviorSubject<T>(state, state); , +    }, +    private final SubjectSubscriptionManager<T> state;, +    private final NotificationLite<T> nl = NotificationLite.instance();, +, +    protected BehaviorSubject(OnSubscribe<T> onSubscribe, SubjectSubscriptionManager<T> state) {, +        this.state = state;, +        Object last = state.get();, +        if (last == null || state.active) {, +            Object n = nl.completed();, +            for (SubjectObserver<T> bo : state.terminate(n)) {, +                bo.emitNext(n);]