[+++ b/rxjava-core/src/main/java/rx/observables/ConnectableObservable.java, +import rx.functions.Action1;, +     * <p>To disconnect from a synchronous source, use the {@link #connect(rx.functions.Action1)}, +     * method., +    public final Subscription connect() {, +        final Subscription[] out = new Subscription[1];, +        connect(new Action1<Subscription>() {, +            @Override, +            public void call(Subscription t1) {, +                out[0] = t1;, +            }, +        });, +        return out[0];, +    }, +    /**, +     * Call a ConnectableObservable's connect() method to instruct it to begin emitting the, +     * items from its underlying {@link Observable} to its {@link Subscriber}s., +     * @param connection the action that receives the connection subscription, +     * before the subscription to source happens allowing the caller, +     * to synchronously disconnect a synchronous source., +     */, +    public abstract void connect(Action1<? super Subscription> connection);, +++ b/rxjava-core/src/main/java/rx/observables/ConnectableObservable.java, +import rx.functions.Action1;, +     * <p>To disconnect from a synchronous source, use the {@link #connect(rx.functions.Action1)}, +     * method., +    public final Subscription connect() {, +        final Subscription[] out = new Subscription[1];, +        connect(new Action1<Subscription>() {, +            @Override, +            public void call(Subscription t1) {, +                out[0] = t1;, +            }, +        });, +        return out[0];, +    }, +    /**, +     * Call a ConnectableObservable's connect() method to instruct it to begin emitting the, +     * items from its underlying {@link Observable} to its {@link Subscriber}s., +     * @param connection the action that receives the connection subscription, +     * before the subscription to source happens allowing the caller, +     * to synchronously disconnect a synchronous source., +     */, +    public abstract void connect(Action1<? super Subscription> connection);, +++ b/rxjava-core/src/main/java/rx/operators/OperatorMulticast.java, +import rx.functions.Action1;, +    public void connect(Action1<? super Subscription> connection) {, +        connection.call(Subscriptions.create(new Action0() {, +            @Override, +            public void call() {, +                Subscription s;, +                synchronized (guard) {, +                    s = subscription;, +                    subscription = null;, +                }, +                if (s != null) {, +                    s.unsubscribe();, +                }, +            }, +        }));, +++ b/rxjava-core/src/main/java/rx/observables/ConnectableObservable.java, +import rx.functions.Action1;, +     * <p>To disconnect from a synchronous source, use the {@link #connect(rx.functions.Action1)}, +     * method., +    public final Subscription connect() {, +        final Subscription[] out = new Subscription[1];, +        connect(new Action1<Subscription>() {, +            @Override, +            public void call(Subscription t1) {, +                out[0] = t1;, +            }, +        });, +        return out[0];, +    }, +    /**, +     * Call a ConnectableObservable's connect() method to instruct it to begin emitting the, +     * items from its underlying {@link Observable} to its {@link Subscriber}s., +     * @param connection the action that receives the connection subscription, +     * before the subscription to source happens allowing the caller, +     * to synchronously disconnect a synchronous source., +     */, +    public abstract void connect(Action1<? super Subscription> connection);, +++ b/rxjava-core/src/main/java/rx/operators/OperatorMulticast.java, +import rx.functions.Action1;, +    public void connect(Action1<? super Subscription> connection) {, +        connection.call(Subscriptions.create(new Action0() {, +            @Override, +            public void call() {, +                Subscription s;, +                synchronized (guard) {, +                    s = subscription;, +                    subscription = null;, +                }, +                if (s != null) {, +                    s.unsubscribe();, +                }, +            }, +        }));, +++ b/rxjava-core/src/main/java/rx/operators/OperatorMulticastSelector.java, +import rx.Subscription;]