[+++ b/src/main/java/io/reactivex/processors/AsyncProcessor.java, +public final class AsyncProcessor<T> extends FlowProcessor<T> {, +++ b/src/main/java/io/reactivex/processors/AsyncProcessor.java, +public final class AsyncProcessor<T> extends FlowProcessor<T> {, +++ b/src/main/java/io/reactivex/processors/BehaviorProcessor.java, +public final class BehaviorProcessor<T> extends FlowProcessor<T> {, +++ b/src/main/java/io/reactivex/processors/AsyncProcessor.java, +public final class AsyncProcessor<T> extends FlowProcessor<T> {, +++ b/src/main/java/io/reactivex/processors/BehaviorProcessor.java, +public final class BehaviorProcessor<T> extends FlowProcessor<T> {, +++ b/src/main/java/io/reactivex/processors/FlowProcessor.java, + * @param <T> the item value type, +public abstract class FlowProcessor<T> extends Flowable<T> implements Processor<T, T> {, +    public T getValue() {, +    public final FlowProcessor<T> toSerialized() {, +        return new SerializedProcessor<T>(this);, +        T[] a = (T[])EMPTY;, +        T[] b = getValues(a);, +    public T[] getValues(T[] array) {, +++ b/src/main/java/io/reactivex/processors/AsyncProcessor.java, +public final class AsyncProcessor<T> extends FlowProcessor<T> {, +++ b/src/main/java/io/reactivex/processors/BehaviorProcessor.java, +public final class BehaviorProcessor<T> extends FlowProcessor<T> {, +++ b/src/main/java/io/reactivex/processors/FlowProcessor.java, + * @param <T> the item value type, +public abstract class FlowProcessor<T> extends Flowable<T> implements Processor<T, T> {, +    public T getValue() {, +    public final FlowProcessor<T> toSerialized() {, +        return new SerializedProcessor<T>(this);, +        T[] a = (T[])EMPTY;, +        T[] b = getValues(a);, +    public T[] getValues(T[] array) {, +++ b/src/main/java/io/reactivex/processors/PublishProcessor.java, +public final class PublishProcessor<T> extends FlowProcessor<T> {, +++ b/src/main/java/io/reactivex/processors/AsyncProcessor.java, +public final class AsyncProcessor<T> extends FlowProcessor<T> {, +++ b/src/main/java/io/reactivex/processors/BehaviorProcessor.java, +public final class BehaviorProcessor<T> extends FlowProcessor<T> {, +++ b/src/main/java/io/reactivex/processors/FlowProcessor.java, + * @param <T> the item value type, +public abstract class FlowProcessor<T> extends Flowable<T> implements Processor<T, T> {, +    public T getValue() {, +    public final FlowProcessor<T> toSerialized() {, +        return new SerializedProcessor<T>(this);, +        T[] a = (T[])EMPTY;, +        T[] b = getValues(a);, +    public T[] getValues(T[] array) {, +++ b/src/main/java/io/reactivex/processors/PublishProcessor.java, +public final class PublishProcessor<T> extends FlowProcessor<T> {, +++ b/src/main/java/io/reactivex/processors/ReplayProcessor.java, +public final class ReplayProcessor<T> extends FlowProcessor<T> {, +++ b/src/main/java/io/reactivex/processors/AsyncProcessor.java, +public final class AsyncProcessor<T> extends FlowProcessor<T> {, +++ b/src/main/java/io/reactivex/processors/BehaviorProcessor.java, +public final class BehaviorProcessor<T> extends FlowProcessor<T> {, +++ b/src/main/java/io/reactivex/processors/FlowProcessor.java, + * @param <T> the item value type, +public abstract class FlowProcessor<T> extends Flowable<T> implements Processor<T, T> {, +    public T getValue() {, +    public final FlowProcessor<T> toSerialized() {, +        return new SerializedProcessor<T>(this);, +        T[] a = (T[])EMPTY;, +        T[] b = getValues(a);, +    public T[] getValues(T[] array) {, +++ b/src/main/java/io/reactivex/processors/PublishProcessor.java, +public final class PublishProcessor<T> extends FlowProcessor<T> {, +++ b/src/main/java/io/reactivex/processors/ReplayProcessor.java, +public final class ReplayProcessor<T> extends FlowProcessor<T> {, +++ b/src/main/java/io/reactivex/processors/SerializedProcessor.java, + * @param <T> the item value type, +/* public */ final class SerializedProcessor<T> extends FlowProcessor<T> {, +    final FlowProcessor<T> actual;, +    public SerializedProcessor(final FlowProcessor<T> actual) {, +    protected void subscribeActual(Subscriber<? super T> s) {, +    public T getValue() {, +    public T[] getValues(T[] array) {, +++ b/src/main/java/io/reactivex/processors/AsyncProcessor.java, +public final class AsyncProcessor<T> extends FlowProcessor<T> {, +++ b/src/main/java/io/reactivex/processors/BehaviorProcessor.java, +public final class BehaviorProcessor<T> extends FlowProcessor<T> {, +++ b/src/main/java/io/reactivex/processors/FlowProcessor.java, + * @param <T> the item value type, +public abstract class FlowProcessor<T> extends Flowable<T> implements Processor<T, T> {, +    public T getValue() {, +    public final FlowProcessor<T> toSerialized() {, +        return new SerializedProcessor<T>(this);, +        T[] a = (T[])EMPTY;, +        T[] b = getValues(a);, +    public T[] getValues(T[] array) {, +++ b/src/main/java/io/reactivex/processors/PublishProcessor.java, +public final class PublishProcessor<T> extends FlowProcessor<T> {, +++ b/src/main/java/io/reactivex/processors/ReplayProcessor.java, +public final class ReplayProcessor<T> extends FlowProcessor<T> {, +++ b/src/main/java/io/reactivex/processors/SerializedProcessor.java, + * @param <T> the item value type, +/* public */ final class SerializedProcessor<T> extends FlowProcessor<T> {, +    final FlowProcessor<T> actual;, +    public SerializedProcessor(final FlowProcessor<T> actual) {, +    protected void subscribeActual(Subscriber<? super T> s) {, +    public T getValue() {]