[+++ b/src/main/java/rx/Observable.java, +++ b/src/main/java/rx/Observable.java, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBlock.java, +import rx.Producer;, +    static final class BlockingSubscriber<T> extends Subscriber<T> {, +        /** Guarded by this. */, +        long requestedCount;, +        /** Guarded by this. */, +        boolean emitting;, +        volatile boolean terminated;, +        /** Set before terminated, read after terminated. */, +        Throwable exception;, +            child.setProducer(new Producer() {, +                @Override, +                public void request(long n) {, +                    synchronized (BlockingSubscriber.this) {, +                        if (n == Long.MAX_VALUE || requestedCount == Long.MAX_VALUE) {, +                            requestedCount = Long.MAX_VALUE;, +                        } else {, +                            requestedCount += n;, +                        }, +                    }, +                    drain();, +                }, +            });, +                drain();, +            if (!terminated) {, +                exception = e;, +                terminated = true;, +                drain();, +            }, +            terminated = true;, +            drain();, +        void drain() {, +            long n;, +            synchronized (this) {, +                if (emitting) {, +                    return;, +                emitting = true;, +                n = requestedCount;, +            }, +            boolean skipFinal = false;, +            try {, +                while (true) {, +                    int emitted = 0;, +                    while (n > 0) {, +                        Object o = queue.poll();, +                        if (o == null) {, +                            if (terminated) {, +                                return;, +                            break;, +                        } else {, +                            child.onNext(nl.getValue(o));, +                            n--;, +                            emitted++;, +                    }, +                    synchronized (this) {, +                        // if no backpressure below, +                        if (requestedCount == Long.MAX_VALUE) {, +                            // no new data arrived since the last poll, +                            if (queue.peek() == null) {, +                                skipFinal = true;, +                                emitting = false;, +                                return;, +                            }, +                            n = Long.MAX_VALUE;, +                        } else {, +                            if (emitted == 0) {, +                                skipFinal = true;, +                                emitting = false;, +                                return;, +                            }, +                            requestedCount -= emitted;, +                            n = requestedCount;, +                        }, +                    }, +                }, +            } finally {, +                if (!skipFinal) {, +                    synchronized (this) {, +                        emitting = false;, +                    }, +                }, +            }, +++ b/src/main/java/rx/Observable.java, +++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBlock.java, +import rx.Producer;, +    static final class BlockingSubscriber<T> extends Subscriber<T> {, +        /** Guarded by this. */, +        long requestedCount;, +        /** Guarded by this. */, +        boolean emitting;, +        volatile boolean terminated;, +        /** Set before terminated, read after terminated. */, +        Throwable exception;, +            child.setProducer(new Producer() {, +                @Override, +                public void request(long n) {, +                    synchronized (BlockingSubscriber.this) {, +                        if (n == Long.MAX_VALUE || requestedCount == Long.MAX_VALUE) {]