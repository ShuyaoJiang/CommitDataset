[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Create an Observable that projects the notification of an observable sequence to an observable, +     * sequence and merges the results into one., +     * @param <R> the result type, +     * @param onNext function returning a collection to merge for each onNext event of the source, +     * @param onError function returning a collection to merge for an onError event, +     * @param onCompleted function returning a collection to merge for an onCompleted event, +     * @return an Observable that projects the notification of an observable sequence to an observable, +     * sequence and merges the results into one., +     */, +    public <R> Observable<R> mergeMap(, +            Func1<? super T, ? extends Observable<? extends R>> onNext, , +            Func1<? super Throwable, ? extends Observable<? extends R>> onError, , +            Func0<? extends Observable<? extends R>> onCompleted) {, +        return create(OperationFlatMap.flatMap(this, onNext, onError, onCompleted));, +    }, +    , +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Create an Observable that projects the notification of an observable sequence to an observable, +     * sequence and merges the results into one., +     * @param <R> the result type, +     * @param onNext function returning a collection to merge for each onNext event of the source, +     * @param onError function returning a collection to merge for an onError event, +     * @param onCompleted function returning a collection to merge for an onCompleted event, +     * @return an Observable that projects the notification of an observable sequence to an observable, +     * sequence and merges the results into one., +     */, +    public <R> Observable<R> mergeMap(, +            Func1<? super T, ? extends Observable<? extends R>> onNext, , +            Func1<? super Throwable, ? extends Observable<? extends R>> onError, , +            Func0<? extends Observable<? extends R>> onCompleted) {, +        return create(OperationFlatMap.flatMap(this, onNext, onError, onCompleted));, +    }, +    , +    /**, +++ b/rxjava-core/src/main/java/rx/operators/OperationFlatMap.java, +import rx.util.functions.Func0;, +    , +    /**, +     * Projects the notification of an observable sequence to an observable, +     * sequence and merges the results into one., +     */, +    public static <T, R> OnSubscribeFunc<R> flatMap(Observable<? extends T> source, , +            Func1<? super T, ? extends Observable<? extends R>> onNext, , +            Func1<? super Throwable, ? extends Observable<? extends R>> onError, , +            Func0<? extends Observable<? extends R>> onCompleted) {, +        return new FlatMapTransform<T, R>(source, onNext, onError, onCompleted);, +    }, +    , +    /**, +     * Projects the notification of an observable sequence to an observable, +     * sequence and merges the results into one., +     * @param <T> the source value type, +     * @param <R> the result value type, +     */, +    private static final class FlatMapTransform<T, R> implements OnSubscribeFunc<R> {, +        final Observable<? extends T> source;, +        final Func1<? super T, ? extends Observable<? extends R>> onNext;, +        final Func1<? super Throwable, ? extends Observable<? extends R>> onError;, +        final Func0<? extends Observable<? extends R>> onCompleted;, +, +        public FlatMapTransform(Observable<? extends T> source, Func1<? super T, ? extends Observable<? extends R>> onNext, Func1<? super Throwable, ? extends Observable<? extends R>> onError, Func0<? extends Observable<? extends R>> onCompleted) {, +            this.source = source;, +            this.onNext = onNext;, +            this.onError = onError;, +            this.onCompleted = onCompleted;, +        }, +, +        @Override, +        public Subscription onSubscribe(Observer<? super R> t1) {, +            CompositeSubscription csub = new CompositeSubscription();, +            , +            csub.add(source.subscribe(new SourceObserver<T, R>(t1, onNext, onError, onCompleted, csub)));, +            , +            return csub;, +        }, +        /**, +         * Observe the source and merge the values., +         * @param <T> the source value type, +         * @param <R> the result value type, +         */, +        private static final class SourceObserver<T, R> implements Observer<T> {, +            final Observer<? super R> observer;, +            final Func1<? super T, ? extends Observable<? extends R>> onNext;, +            final Func1<? super Throwable, ? extends Observable<? extends R>> onError;, +            final Func0<? extends Observable<? extends R>> onCompleted;, +            final CompositeSubscription csub;, +            final AtomicInteger wip;, +            volatile boolean done;, +            final Object guard;, +, +            public SourceObserver(Observer<? super R> observer, Func1<? super T, ? extends Observable<? extends R>> onNext, Func1<? super Throwable, ? extends Observable<? extends R>> onError, Func0<? extends Observable<? extends R>> onCompleted, CompositeSubscription csub) {, +                this.observer = observer;, +                this.onNext = onNext;, +                this.onError = onError;, +                this.onCompleted = onCompleted;, +                this.csub = csub;, +                this.guard = new Object();, +                this.wip = new AtomicInteger(1);]