[+++ b/rxjava-core/src/main/java/rx/operators/OperationAll.java, +            return subscription.wrap(sequence.subscribe(new AllObserver(observer)));, +, +        }, +, +        private class AllObserver implements Observer<T> {, +            private final Observer<Boolean> underlying;, +, +            private final AtomicBoolean status = new AtomicBoolean(true);, +, +            public AllObserver(Observer<Boolean> underlying) {, +                this.underlying = underlying;, +            }, +, +                    underlying.onNext(true);, +                    underlying.onCompleted();, +                underlying.onError(e);, +                    underlying.onNext(false);, +                    underlying.onCompleted();, +, +++ b/rxjava-core/src/main/java/rx/operators/OperationAll.java, +            return subscription.wrap(sequence.subscribe(new AllObserver(observer)));, +, +        }, +, +        private class AllObserver implements Observer<T> {, +            private final Observer<Boolean> underlying;, +, +            private final AtomicBoolean status = new AtomicBoolean(true);, +, +            public AllObserver(Observer<Boolean> underlying) {, +                this.underlying = underlying;, +            }, +, +                    underlying.onNext(true);, +                    underlying.onCompleted();, +                underlying.onError(e);, +                    underlying.onNext(false);, +                    underlying.onCompleted();, +, +++ b/rxjava-core/src/main/java/rx/operators/OperationGroupBy.java, +            return source.subscribe(new GroupByObserver(observer));, +        }, +        private class GroupByObserver implements Observer<KeyValue<K, V>> {, +            private final Observer<GroupedObservable<K, V>> underlying;, +, +            private final ConcurrentHashMap<K, Boolean> keys = new ConcurrentHashMap<K, Boolean>();, +, +            private GroupByObserver(Observer<GroupedObservable<K, V>> underlying) {, +                this.underlying = underlying;, +            }, +                underlying.onCompleted();, +                underlying.onError(e);, +                    underlying.onNext(buildObservableFor(source, key));, +++ b/rxjava-core/src/main/java/rx/operators/OperationAll.java, +            return subscription.wrap(sequence.subscribe(new AllObserver(observer)));, +, +        }, +, +        private class AllObserver implements Observer<T> {, +            private final Observer<Boolean> underlying;, +, +            private final AtomicBoolean status = new AtomicBoolean(true);, +, +            public AllObserver(Observer<Boolean> underlying) {, +                this.underlying = underlying;, +            }, +, +                    underlying.onNext(true);, +                    underlying.onCompleted();, +                underlying.onError(e);, +                    underlying.onNext(false);, +                    underlying.onCompleted();, +, +++ b/rxjava-core/src/main/java/rx/operators/OperationGroupBy.java, +            return source.subscribe(new GroupByObserver(observer));, +        }, +        private class GroupByObserver implements Observer<KeyValue<K, V>> {, +            private final Observer<GroupedObservable<K, V>> underlying;, +, +            private final ConcurrentHashMap<K, Boolean> keys = new ConcurrentHashMap<K, Boolean>();, +, +            private GroupByObserver(Observer<GroupedObservable<K, V>> underlying) {, +                this.underlying = underlying;, +            }, +                underlying.onCompleted();, +                underlying.onError(e);, +                    underlying.onNext(buildObservableFor(source, key));, +++ b/rxjava-core/src/main/java/rx/operators/OperationTake.java, +            private final AtomicInteger counter = new AtomicInteger();, +, +++ b/rxjava-core/src/main/java/rx/operators/OperationAll.java, +            return subscription.wrap(sequence.subscribe(new AllObserver(observer)));, +, +        }, +, +        private class AllObserver implements Observer<T> {, +            private final Observer<Boolean> underlying;, +, +            private final AtomicBoolean status = new AtomicBoolean(true);]