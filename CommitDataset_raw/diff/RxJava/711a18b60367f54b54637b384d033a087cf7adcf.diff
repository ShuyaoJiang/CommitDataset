[+++ b/.gitattributes, +# Set default behaviour, in case users don't have core.autocrlf set., +* text=auto, +, +# Explicitly declare text files we want to always be normalized and converted , +# to native line endings on checkout., +*.java text, +*.groovy text, +*.scala text, +*.clj text, +*.txt text, +*.md text, +, +# Denote all files that are truly binary and should not be modified., +*.png binary, +*.jpg binary, +++ b/.gitattributes, +# Set default behaviour, in case users don't have core.autocrlf set., +* text=auto, +, +# Explicitly declare text files we want to always be normalized and converted , +# to native line endings on checkout., +*.java text, +*.groovy text, +*.scala text, +*.clj text, +*.txt text, +*.md text, +, +# Denote all files that are truly binary and should not be modified., +*.png binary, +*.jpg binary, +++ b/gradlew.bat, +++ b/.gitattributes, +# Set default behaviour, in case users don't have core.autocrlf set., +* text=auto, +, +# Explicitly declare text files we want to always be normalized and converted , +# to native line endings on checkout., +*.java text, +*.groovy text, +*.scala text, +*.clj text, +*.txt text, +*.md text, +, +# Denote all files that are truly binary and should not be modified., +*.png binary, +*.jpg binary, +++ b/gradlew.bat, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * emitted and replaced with a new buffer when the Observable produced by the specified function produces an object. The function will then, +   *            When this [[rx.lang.scala.Observable]] produces an object, the associated buffer, +   *         when the current [[rx.lang.scala.Observable]] created with the function argument produces an object., +  def buffer[Closing](closings: () => Observable[_ <: Closing]) : Observable[Seq[T]] = {, +    val jObs: rx.Observable[_ <: java.util.List[_]] = asJavaObservable.buffer[Closing](f), +   * Observable produces an object. Additionally the function argument, +   *            The [[rx.lang.scala.Observable]] which, when it produces an object, will cause, +   *            When this [[rx.lang.scala.Observable]] produces an object, the associated buffer, +  def buffer[Opening, Closing](openings: Observable[Opening], closings: Opening => Observable[Closing]): Observable[Seq[T]] = {, +    val closing: Func1[_ >: Opening, _ <: rx.Observable[_ <: Closing]] = (o: Opening) => closings(o).asJavaObservable, +    val jObs: rx.Observable[_ <: java.util.List[_]] = asJavaObservable.buffer[Opening, Closing](opening, closing), +   * Observable produced by the specified function produces an object. , +   *            When this [[rx.lang.scala.Observable]] produces an object, the associated window, +   *         when the current [[rx.lang.scala.Observable]] created with the function argument produces an object., +  def window[Closing](closings: () => Observable[Closing]): Observable[Observable[T]] = {, +    val o1: rx.Observable[_ <: rx.Observable[_]] = asJavaObservable.window[Closing](func), +    val o2 = Observable[rx.Observable[_]](o1).map((x: rx.Observable[_]) => {, +   * Chunks are created when the specified `openings` Observable produces an object., +   *            The [[rx.lang.scala.Observable]] which when it produces an object, will cause, +   *            When this [[rx.lang.scala.Observable]] produces an object, the associated window, +  def window[Opening, Closing](openings: Observable[Opening], closings: Opening => Observable[Closing]) = {, +      asJavaObservable.window[Opening, Closing](openings.asJavaObservable, (op: Opening) => closings(op).asJavaObservable)), +   * When you call `cache`, it does not yet subscribe to the, +   * source Observable. This only happens when `subscribe` is called, +   * the first time on the Observable returned by `cache()`., +   * , +   * Note: You sacrifice the ability to unsubscribe from the origin when you use the, +++ b/.gitattributes, +# Set default behaviour, in case users don't have core.autocrlf set., +* text=auto, +, +# Explicitly declare text files we want to always be normalized and converted , +# to native line endings on checkout., +*.java text, +*.groovy text, +*.scala text, +*.clj text, +*.txt text, +*.md text, +, +# Denote all files that are truly binary and should not be modified., +*.png binary, +*.jpg binary, +++ b/gradlew.bat, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +   * emitted and replaced with a new buffer when the Observable produced by the specified function produces an object. The function will then, +   *            When this [[rx.lang.scala.Observable]] produces an object, the associated buffer, +   *         when the current [[rx.lang.scala.Observable]] created with the function argument produces an object., +  def buffer[Closing](closings: () => Observable[_ <: Closing]) : Observable[Seq[T]] = {]