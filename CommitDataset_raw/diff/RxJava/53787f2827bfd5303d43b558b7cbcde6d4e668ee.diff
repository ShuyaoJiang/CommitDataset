[+++ b/rxjava-core/src/main/java/rx/Observable.java, +    /**, +     * Return an Observable that emits the results of sampling the items, +     * emitted by this Observable when the <code>sampler</code>, +     * Observable produces an item or completes., +     * , +     * @param sampler the Observable to use for sampling this, +     * , +     * @return an Observable that emits the results of sampling the items, +     *         emitted by this Observable when the <code>sampler</code>, +     *         Observable produces an item or completes., +     */, +    public <U> Observable<T> sample(Observable<U> sampler) {, +        return create(new OperationSample.SampleWithObservable<T, U>(this, sampler));, +    }, +    , +++ b/rxjava-core/src/main/java/rx/Observable.java, +    /**, +     * Return an Observable that emits the results of sampling the items, +     * emitted by this Observable when the <code>sampler</code>, +     * Observable produces an item or completes., +     * , +     * @param sampler the Observable to use for sampling this, +     * , +     * @return an Observable that emits the results of sampling the items, +     *         emitted by this Observable when the <code>sampler</code>, +     *         Observable produces an item or completes., +     */, +    public <U> Observable<T> sample(Observable<U> sampler) {, +        return create(new OperationSample.SampleWithObservable<T, U>(this, sampler));, +    }, +    , +++ b/rxjava-core/src/main/java/rx/operators/OperationSample.java, +import rx.subscriptions.CompositeSubscription;, +import rx.subscriptions.SerialSubscription;, +    /** , +     * Sample with the help of another observable. , +     * @see <a href='http://msdn.microsoft.com/en-us/library/hh229742.aspx'>MSDN: Observable.Sample</a>, +     */, +    public static class SampleWithObservable<T, U> implements OnSubscribeFunc<T> {, +        final Observable<T> source;, +        final Observable<U> sampler;, +        public SampleWithObservable(Observable<T> source, Observable<U> sampler) {, +            this.source = source;, +            this.sampler = sampler;, +        }, +        @Override, +        public Subscription onSubscribe(Observer<? super T> t1) {, +            return new ResultManager(t1).init();, +        }, +        /** Observe source values. */, +        class ResultManager implements Observer<T> {, +            final Observer<? super T> observer;, +            final CompositeSubscription cancel;, +            T value;, +            boolean valueTaken = true;, +            boolean done;, +            final Object guard;, +            public ResultManager(Observer<? super T> observer) {, +                this.observer = observer;, +                cancel = new CompositeSubscription();, +                guard = new Object();, +            }, +            public Subscription init() {, +                cancel.add(source.subscribe(this));, +                cancel.add(sampler.subscribe(new Sampler()));, +                , +                return cancel;, +            }, +            @Override, +            public void onNext(T args) {, +                synchronized (guard) {, +                    valueTaken = false;, +                    value = args;, +                }, +            }, +, +            @Override, +            public void onError(Throwable e) {, +                synchronized (guard) {, +                    if (!done) {, +                        done = true;, +                        observer.onError(e);, +                        cancel.unsubscribe();, +                    }, +                }, +            }, +            , +            @Override, +            public void onCompleted() {, +                synchronized (guard) {, +                    if (!done) {, +                        done = true;, +                        observer.onCompleted();, +                        cancel.unsubscribe();, +                    }, +                }, +            }, +            /** Take the latest value, but only once. */, +            class Sampler implements Observer<U> {]