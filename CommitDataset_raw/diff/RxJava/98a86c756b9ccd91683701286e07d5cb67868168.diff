[+++ b/language-adaptors/rxjava-groovy/build.gradle, +// include /src/examples folder, +sourceSets {, +    examples, +}, +, +// make 'examples' use the same classpath, +configurations {, +    examplesCompile.extendsFrom compile, +    examplesRuntime.extendsFrom runtime, +}, +, +// include 'examples' in build task, +build.dependsOn examplesClasses, +, +// setup Eclipse, +++ b/language-adaptors/rxjava-groovy/build.gradle, +// include /src/examples folder, +sourceSets {, +    examples, +}, +, +// make 'examples' use the same classpath, +configurations {, +    examplesCompile.extendsFrom compile, +    examplesRuntime.extendsFrom runtime, +}, +, +// include 'examples' in build task, +build.dependsOn examplesClasses, +, +// setup Eclipse, +++ b/language-adaptors/rxjava-groovy/src/examples/groovy/rx/lang/groovy/examples/RxExamples.groovy, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.lang.groovy.examples;, +, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +import rx.util.functions.Func1;, +, +// --------------------------------------------------, +// Hello World!, +// --------------------------------------------------, +, +def hello(String[] names) {, +    Observable.toObservable(names), +        .subscribe({ println "Hello " + it + "!"}), +}, +, +hello("Ben", "George"), +, +, +// --------------------------------------------------, +// Create Observables from Existing Data, +// --------------------------------------------------, +, +def existingDataFromNumbers() {, +    Observable<Integer> o = Observable.toObservable(1, 2, 3, 4, 5, 6);, +}, +, +def existingDataFromNumbersUsingFrom() {, +    Observable<Integer> o2 = Observable.from(1, 2, 3, 4, 5, 6);, +}, +, +def existingDataFromObjects() {, +    Observable<String> o = Observable.toObservable("a", "b", "c");, +}, +, +def existingDataFromObjectsUsingFrom() {, +    Observable<String> o = Observable.from("a", "b", "c");, +}, +, +def existingDataFromList() {, +    def list = [5, 6, 7, 8], +    Observable<Integer> o = Observable.toObservable(list);, +}, +, +def existingDataFromListUsingFrom() {, +    def list = [5, 6, 7, 8], +    Observable<Integer> o2 = Observable.from(list);, +}, +, +def existingDataWithJust() {, +    Observable<String> o = Observable.just("one object");, +}]