[+++ b/rxjava-core/src/main/java/rx/Notification.java, + * An object representing a notification sent to an {@link Observable}., +++ b/rxjava-core/src/main/java/rx/Notification.java, + * An object representing a notification sent to an {@link Observable}., +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.util.functions.FunctionLanguageAdaptor;, + * It provides overloaded methods for subscribing as well as delegate methods to the various operators., + * <p>, + * <img width="640" src="https://github.com/Netflix/RxJava/wiki/images/rx-operators/legend.png">, + * For more information see the <a href="https://github.com/Netflix/RxJava/wiki/Observable">RxJava Wiki</a>, +     * an {@link Observer} must call an Observable's <code>subscribe</code> method in order to register itself, +     * <p>, +     * <p>, +     * It returns a reference to the {@link Subscription} interface. This enables, +     * finished sending them and has called the Observer's {@link Observer#onCompleted()} method., +     * <p>, +     * For more information see the <a href="https://github.com/Netflix/RxJava/wiki/Observable">RxJava Wiki</a>, +     * , +     * @return a {@link Subscription} reference that allows observers, +        // lookup and memoize onNext, +        Object _onNext = callbacks.get("onNext");, +        if (_onNext == null) {, +            throw new RuntimeException("onNext must be implemented");, +        }, +        final FuncN onNext = Functions.from(_onNext);, +, +                Object onComplete = callbacks.get("onCompleted");, +                if (onComplete != null) {, +                    Functions.from(onComplete).call();, +                    Functions.from(onError).call(e);, +                onNext.call(args);, +        // lookup and memoize onNext, +        if (o == null) {, +            throw new RuntimeException("onNext must be implemented");, +        }, +        final FuncN onNext = Functions.from(o);, +, +                onNext.call(args);, +        // lookup and memoize onNext, +        if (onNext == null) {, +            throw new RuntimeException("onNext must be implemented");, +        }, +        final FuncN onNextFunction = Functions.from(onNext);, +, +                    Functions.from(onError).call(e);, +                onNextFunction.call(args);, +        // lookup and memoize onNext, +        if (onNext == null) {, +            throw new RuntimeException("onNext must be implemented");, +        }, +        final FuncN onNextFunction = Functions.from(onNext);, +, +                    Functions.from(onComplete).call();, +                    Functions.from(onError).call(e);, +                onNextFunction.call(args);, +    private void handleError(Exception e) {, +        // not implemented yet since open-sourcing, +        // intended for plugins to capture and log all errors, +        // even if Observers drop them on the floor, +     * An Observable that never sends any information to an {@link Observer}., +     * A {@link Subscription} that does nothing when its unsubscribe method is called., +     * an Observable that calls {@link Observer#onError(Exception)} when the Observer subscribes., +                 * Accepts an {@link Observer} and calls its <code>onError</code> method., +                 *            an {@link Observer} of this Observable, +     * Creates an Observable that will execute the given function when a {@link Observer} subscribes to it., +     * Write the function you pass to <code>create</code> so that it behaves as an Observable - calling the passed-in, +     * <code>onNext</code>, <code>onError</code>, and <code>onCompleted</code> methods appropriately., +     * A well-formed Observable must call either the {@link Observer}'s <code>onCompleted</code> method exactly once or its <code>onError</code> method exactly once., +     * <p>, +     * See <a href="http://go.microsoft.com/fwlink/?LinkID=205219">Rx Design Guidelines (PDF)</a> for detailed information., +     *            a function that accepts an <code>Observer<T></code> and calls its <code>onNext</code>, <code>onError</code>, and <code>onCompleted</code> methods, +     *            as appropriate, and returns a {@link Subscription} to allow canceling the subscription (if applicable), +     * @return an Observable that, when an {@link Observer} subscribes to it, will execute the given function, +     * Creates an Observable that will execute the given function when a {@link Observer} subscribes to it., +     * This method accept {@link Object} to allow different languages to pass in closures using {@link FunctionLanguageAdaptor}., +     * Write the function you pass to <code>create</code> so that it behaves as an Observable - calling the passed-in, +     * <code>onNext</code>, <code>onError</code>, and <code>onCompleted</code> methods appropriately., +     * <p>, +     * A well-formed Observable must call either the {@link Observer}'s <code>onCompleted</code> method exactly once or its <code>onError</code> method exactly once., +     * <p>, +     * See <a href="http://go.microsoft.com/fwlink/?LinkID=205219">Rx Design Guidelines (PDF)</a> for detailed information., +     *            the type emitted by the Observable sequence, +     *            a function that accepts an <code>Observer<T></code> and calls its <code>onNext</code>, <code>onError</code>, and <code>onCompleted</code> methods, +     *            as appropriate, and returns a {@link Subscription} to allow canceling the subscription (if applicable), +     * @return an Observable that, when an {@link Observer} subscribes to it, will execute the given function, +        return create(new Func1<Observer<T>, Subscription>() {, +     * Returns an Observable that returns no data to the {@link Observer} and immediately invokes its <code>onCompleted</code> method., +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/empty.png">, +     * @return an Observable that returns no data to the {@link Observer} and immediately invokes the {@link Observer}'s <code>onCompleted</code> method, +     * Returns an Observable that calls <code>onError</code> when an {@link Observer} subscribes to it., +     * @return an Observable object that calls <code>onError</code> when an {@link Observer} subscribes, +     * Filters an Observable by discarding any of its emissions that do not meet some test., +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/filter.png">, +     *            a function that evaluates the items emitted by the source Observable, returning <code>true</code> if they pass the filter, +     * @return an Observable that emits only those items in the original Observable that the filter evaluates as true, +        return create(OperationFilter.filter(that, predicate));, +     * Filters an Observable by discarding any of its emissions that do not meet some test., +     * <img width="640" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/filter.png">, +     *            a function that evaluates the items emitted by the source Observable, returning <code>true</code> if they pass the filter, +     * @return an Observable that emits only those items in the original Observable that the filter evaluates as true]