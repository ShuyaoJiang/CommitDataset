[+++ b/src/main/java/rx/Subscriber.java, +    // represents requested not set yet, +    private static final Long NOT_SET = Long.MIN_VALUE;, +, +    private final SubscriptionList subscriptions;, +    private final Subscriber<?> subscriber;, +    private Producer producer;, +    private long requested = NOT_SET; // default to not set, +    protected Subscriber(Subscriber<?> subscriber) {, +        this(subscriber, true);, +     * @param subscriber, +    protected Subscriber(Subscriber<?> subscriber, boolean shareSubscriptions) {, +        this.subscriber = subscriber;, +        this.subscriptions = shareSubscriptions && subscriber != null ? subscriber.subscriptions : new SubscriptionList();, +        subscriptions.add(s);, +        subscriptions.unsubscribe();, +        return subscriptions.isUnsubscribed();, +        , +        // if producer is set then we will request from it, +        // otherwise we increase the requested count by n, +        Producer producerToRequestFrom = null;, +            if (producer != null) {, +                producerToRequestFrom = producer;, +            } else {, +                addToRequested(n);, +                return;, +            }, +        }, +        // after releasing lock (we should not make requests holding a lock), +        producerToRequestFrom.request(n);, +    }, +, +    private void addToRequested(long n) {, +        if (requested == NOT_SET) {, +     * @param p, +    public void setProducer(Producer p) {, +        boolean passToSubscriber = false;, +            producer = p;, +            if (subscriber != null) {, +                if (toRequest == NOT_SET) {, +                    passToSubscriber = true;, +        if (passToSubscriber) {, +            subscriber.setProducer(producer);, +            if (toRequest == NOT_SET) {, +                producer.request(Long.MAX_VALUE);, +                producer.request(toRequest);, +++ b/src/main/java/rx/Subscriber.java, +    // represents requested not set yet, +    private static final Long NOT_SET = Long.MIN_VALUE;, +, +    private final SubscriptionList subscriptions;, +    private final Subscriber<?> subscriber;, +    private Producer producer;, +    private long requested = NOT_SET; // default to not set, +    protected Subscriber(Subscriber<?> subscriber) {, +        this(subscriber, true);, +     * @param subscriber, +    protected Subscriber(Subscriber<?> subscriber, boolean shareSubscriptions) {, +        this.subscriber = subscriber;, +        this.subscriptions = shareSubscriptions && subscriber != null ? subscriber.subscriptions : new SubscriptionList();, +        subscriptions.add(s);, +        subscriptions.unsubscribe();, +        return subscriptions.isUnsubscribed();, +        , +        // if producer is set then we will request from it, +        // otherwise we increase the requested count by n, +        Producer producerToRequestFrom = null;, +            if (producer != null) {, +                producerToRequestFrom = producer;, +            } else {, +                addToRequested(n);, +                return;, +            }, +        }, +        // after releasing lock (we should not make requests holding a lock), +        producerToRequestFrom.request(n);, +    }, +, +    private void addToRequested(long n) {, +        if (requested == NOT_SET) {, +     * @param p, +    public void setProducer(Producer p) {, +        boolean passToSubscriber = false;, +            producer = p;, +            if (subscriber != null) {, +                if (toRequest == NOT_SET) {, +                    passToSubscriber = true;, +        if (passToSubscriber) {, +            subscriber.setProducer(producer);, +            if (toRequest == NOT_SET) {, +                producer.request(Long.MAX_VALUE);, +                producer.request(toRequest);, +++ b/src/main/java/rx/internal/operators/OperatorAny.java, +                boolean result = predicate.call(t);, +                    child.onNext(!returnOnEmpty);, +                    child.onCompleted();, +                } else {, +                    // if we drop values we must replace them upstream as downstream won't receive and request more, +                    request(1);, +                        child.onNext(false);]