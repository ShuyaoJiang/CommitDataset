[+++ b/src/main/java/io/reactivex/Observable.java, +    , +    public final Observable<T> onBackpressureDrop() {, +        return lift(OperatorOnBackpressureDrop.instance());, +    }, +    , +    public final Observable<T> onBackpressureDrop(Consumer<? super T> onDrop) {, +        return lift(new OperatorOnBackpressureDrop<>(onDrop));, +    }, +    , +    public final Observable<T> onBackpressureBuffer() {, +        return onBackpressureBuffer(bufferSize(), false, true);, +    }, +    , +    public final Observable<T> onBackpressureBuffer(int bufferSize) {, +        return onBackpressureBuffer(bufferSize, false, false);, +    }, +    , +    public final Observable<T> onBackpressureBuffer(boolean delayError) {, +        return onBackpressureBuffer(bufferSize(), true, true);, +    }, +    , +    public final Observable<T> onBackpressureBuffer(int bufferSize, boolean delayError) {, +        return onBackpressureBuffer(bufferSize, true, false);, +    }, +    , +    public final Observable<T> onBackpressureBuffer(int bufferSize, boolean delayError, boolean unbounded) {, +        return lift(new OperatorOnBackpressureBuffer<>(bufferSize, unbounded, delayError));, +    }, +    , +    public final Observable<T> onBackpressureLatest() {, +        return lift(OperatorOnBackpressureLatest.instance());, +    }, +++ b/src/main/java/io/reactivex/Observable.java, +    , +    public final Observable<T> onBackpressureDrop() {, +        return lift(OperatorOnBackpressureDrop.instance());, +    }, +    , +    public final Observable<T> onBackpressureDrop(Consumer<? super T> onDrop) {, +        return lift(new OperatorOnBackpressureDrop<>(onDrop));, +    }, +    , +    public final Observable<T> onBackpressureBuffer() {, +        return onBackpressureBuffer(bufferSize(), false, true);, +    }, +    , +    public final Observable<T> onBackpressureBuffer(int bufferSize) {, +        return onBackpressureBuffer(bufferSize, false, false);, +    }, +    , +    public final Observable<T> onBackpressureBuffer(boolean delayError) {, +        return onBackpressureBuffer(bufferSize(), true, true);, +    }, +    , +    public final Observable<T> onBackpressureBuffer(int bufferSize, boolean delayError) {, +        return onBackpressureBuffer(bufferSize, true, false);, +    }, +    , +    public final Observable<T> onBackpressureBuffer(int bufferSize, boolean delayError, boolean unbounded) {, +        return lift(new OperatorOnBackpressureBuffer<>(bufferSize, unbounded, delayError));, +    }, +    , +    public final Observable<T> onBackpressureLatest() {, +        return lift(OperatorOnBackpressureLatest.instance());, +    }, +++ b/src/main/java/io/reactivex/internal/operators/OperatorOnBackpressureBuffer.java, +/**, + * Copyright 2015 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators;, +, +import java.util.Queue;, +import java.util.concurrent.atomic.*;, +, +import org.reactivestreams.*;, +, +import io.reactivex.Observable.Operator;, +import io.reactivex.internal.queue.*;, +import io.reactivex.internal.util.*;, +import io.reactivex.plugins.RxJavaPlugins;, +, +public final class OperatorOnBackpressureBuffer<T> implements Operator<T, T> {, +    final int bufferSize;, +    final boolean unbounded;, +    final boolean delayError;, +    , +    public OperatorOnBackpressureBuffer(int bufferSize, boolean unbounded, boolean delayError) {, +        this.bufferSize = bufferSize;, +        this.unbounded = unbounded;]