[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * <p>, +     * If the operator you are creating is designed to act on the individual items emitted by a source, +     * Observable, use {@code lift}. If your operator is designed to transform the source Observable as a whole, +     * (for instance, by applying a particular set of existing RxJava operators to it) use {@link #compose}., +     * Transform an Observable by applying a particular Transformer function to it., +     * <p>, +     * This method operates on the Observable itself whereas {@link #lift} operates on the Observable's, +     * Subscribers or Observers., +     * <p>, +     * If the operator you are creating is designed to act on the individual items emitted by a source, +     * Observable, use {@link #lift}. If your operator is designed to transform the source Observable as a whole, +     * (for instance, by applying a particular set of existing RxJava operators to it) use {@code compose}., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code compose} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @param transformer implements the function that transforms the source Observable, +     * @return the source Observable, transformed by the transformer function, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Implementing-Your-Own-Operators">RxJava wiki: Implementing Your Own Operators</a>]