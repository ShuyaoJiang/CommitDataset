[+++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +     * @param <T> the result value type, +                NotificationLite<T> nl = state.nl;, +                o.accept(v, nl);, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +     * @param <T> the result value type, +                NotificationLite<T> nl = state.nl;, +                o.accept(v, nl);, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +                o.emitFirst(state.get(), state.nl);, +                bo.emitNext(n, state.nl);, +                bo.emitNext(n, state.nl);, +                bo.emitNext(n, state.nl);, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +     * @param <T> the result value type, +                NotificationLite<T> nl = state.nl;, +                o.accept(v, nl);, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +                o.emitFirst(state.get(), state.nl);, +                bo.emitNext(n, state.nl);, +                bo.emitNext(n, state.nl);, +                bo.emitNext(n, state.nl);, +++ b/rxjava-core/src/main/java/rx/subjects/PublishSubject.java, +     * @param <T> the value type, +        state.onTerminated = new Action1<SubjectObserver<T>>() {, +                o.emitFirst(state.get(), state.nl);, +                bo.emitNext(n, state.nl);, +                bo.emitNext(n, state.nl);, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +     * @param <T> the result value type, +                NotificationLite<T> nl = state.nl;, +                o.accept(v, nl);, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +                o.emitFirst(state.get(), state.nl);, +                bo.emitNext(n, state.nl);, +                bo.emitNext(n, state.nl);, +                bo.emitNext(n, state.nl);, +++ b/rxjava-core/src/main/java/rx/subjects/PublishSubject.java, +     * @param <T> the value type, +        state.onTerminated = new Action1<SubjectObserver<T>>() {, +                o.emitFirst(state.get(), state.nl);, +                bo.emitNext(n, state.nl);, +                bo.emitNext(n, state.nl);, +++ b/rxjava-core/src/main/java/rx/subjects/ReplaySubject.java, +                o.index(lastIndex);, +                Integer idx = o.index();, +                NodeList.Node<Object> l = t1.index();, +        return ssm.state.observers.length;, +            Integer lastEmittedLink = observer.index();, +                observer.index(l);, +            NodeList.Node<Object> lastEmittedLink = observer.index();, +            observer.index(l);, +        /**, +         * Replay contents to the given observer., +         * @param observer the receiver of events, +         */, +            t1.index(l);, +            t1.index(l);, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +     * @param <T> the result value type, +                NotificationLite<T> nl = state.nl;, +                o.accept(v, nl);, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +                o.emitFirst(state.get(), state.nl);, +                bo.emitNext(n, state.nl);, +                bo.emitNext(n, state.nl);, +                bo.emitNext(n, state.nl);, +++ b/rxjava-core/src/main/java/rx/subjects/PublishSubject.java, +     * @param <T> the value type, +        state.onTerminated = new Action1<SubjectObserver<T>>() {, +                o.emitFirst(state.get(), state.nl);, +                bo.emitNext(n, state.nl);, +                bo.emitNext(n, state.nl);, +++ b/rxjava-core/src/main/java/rx/subjects/ReplaySubject.java, +                o.index(lastIndex);, +                Integer idx = o.index();, +                NodeList.Node<Object> l = t1.index();, +        return ssm.state.observers.length;, +            Integer lastEmittedLink = observer.index();, +                observer.index(l);, +            NodeList.Node<Object> lastEmittedLink = observer.index();, +            observer.index(l);, +        /**, +         * Replay contents to the given observer., +         * @param observer the receiver of events, +         */, +            t1.index(l);, +            t1.index(l);, +++ b/rxjava-core/src/main/java/rx/subjects/SubjectSubscriptionManager.java, +    /** The notification lite. */, +    public final NotificationLite<T> nl = NotificationLite.instance();, +        /** Indicate that the observer has caught up. */, +        /** Indicate where the observer is at replaying. */, +        private volatile Object index;, +         * @param nl the type-appropriate notification lite object, +        protected void emitNext(Object n, final NotificationLite<T> nl) {, +         * @param nl the type-appropriate notification lite object, +        protected void emitFirst(Object n, final NotificationLite<T> nl) {, +                emitLoop(null, n, nl);, +         * @param nl the type-appropriate notification lite object]