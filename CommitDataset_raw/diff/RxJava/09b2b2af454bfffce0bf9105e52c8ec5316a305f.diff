[+++ b/gradle.properties, +version=0.8.5, +++ b/gradle.properties, +version=0.8.5, +++ b/language-adaptors/README.md, +, +NOTE: Changes are coming in regards to static and dynamic typing and how language adaptors are used., +, +See https://github.com/Netflix/RxJava/issues/208 and https://github.com/Netflix/RxJava/issues/204, +++ b/gradle.properties, +version=0.8.5, +++ b/language-adaptors/README.md, +, +NOTE: Changes are coming in regards to static and dynamic typing and how language adaptors are used., +, +See https://github.com/Netflix/RxJava/issues/208 and https://github.com/Netflix/RxJava/issues/204, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/gradle.properties, +version=0.8.5, +++ b/language-adaptors/README.md, +, +NOTE: Changes are coming in regards to static and dynamic typing and how language adaptors are used., +, +See https://github.com/Netflix/RxJava/issues/208 and https://github.com/Netflix/RxJava/issues/204, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/concurrency/DiscardableAction.java, +import rx.operators.AtomicObservableSubscription;, +++ b/gradle.properties, +version=0.8.5, +++ b/language-adaptors/README.md, +, +NOTE: Changes are coming in regards to static and dynamic typing and how language adaptors are used., +, +See https://github.com/Netflix/RxJava/issues/208 and https://github.com/Netflix/RxJava/issues/204, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/concurrency/DiscardableAction.java, +import rx.operators.AtomicObservableSubscription;, +++ b/rxjava-core/src/main/java/rx/concurrency/NewThreadScheduler.java, +import rx.operators.AtomicObservableSubscription;, +++ b/gradle.properties, +version=0.8.5, +++ b/language-adaptors/README.md, +, +NOTE: Changes are coming in regards to static and dynamic typing and how language adaptors are used., +, +See https://github.com/Netflix/RxJava/issues/208 and https://github.com/Netflix/RxJava/issues/204, +++ b/rxjava-core/src/main/java/rx/Observable.java, +++ b/rxjava-core/src/main/java/rx/concurrency/DiscardableAction.java, +import rx.operators.AtomicObservableSubscription;, +++ b/rxjava-core/src/main/java/rx/concurrency/NewThreadScheduler.java, +import rx.operators.AtomicObservableSubscription;, +++ b/rxjava-core/src/main/java/rx/operators/AtomicObservableSubscription.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import org.junit.Test;, +import rx.Subscription;, +, +import java.util.concurrent.atomic.AtomicReference;, +, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +, +/**, + * Thread-safe wrapper around Observable Subscription that ensures unsubscribe can be called only once., + * <p>, + * Also used to:, + * <p>, + * <ul>, + * <li>allow the AtomicObserver to have access to the subscription in asynchronous execution for checking if unsubscribed occurred without onComplete/onError.</li>, + * <li>handle both synchronous and asynchronous subscribe() execution flows</li>, + * </ul>, + */, +public final class AtomicObservableSubscription implements Subscription {, +, +    private static final Subscription UNSUBSCRIBED = new Subscription(), +    {, +        @Override, +        public void unsubscribe(), +        {, +        }, +    };, +    private final AtomicReference<Subscription> actualSubscription = new AtomicReference<Subscription>();, +, +    public AtomicObservableSubscription() {]