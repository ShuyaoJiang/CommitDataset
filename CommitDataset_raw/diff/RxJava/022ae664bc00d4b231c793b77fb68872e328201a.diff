[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def fattenSomeExample() {, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def fattenSomeExample() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def fattenSomeExample() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +      "from(Array[T])" -> "[use `items(T*)`]",, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def fattenSomeExample() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +      "from(Array[T])" -> "[use `items(T*)`]",, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def fattenSomeExample() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +      "from(Array[T])" -> "[use `items(T*)`]",, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns an Observable that emits only the very first item emitted by the source Observable, or notifies, +     * of an {@code NoSuchElementException} if the source Observable is empty., +     * a specified condition, or notifies of an {@code NoSuchElementException} if no such items are emitted., +     * a {@code NoSuchElementException} if the source Observable is empty., +     * given condition, or notifies of a {@code NoSuchElementException} if no such items are emitted., +     * emits only a single item. If the source Observable emits more than one item or no items, notify of an, +     * {@code IllegalArgumentException} or {@code NoSuchElementException} respectively., +     * such item or no such items, notify of an {@code IllegalArgumentException} or, +     * {@code NoSuchElementException} respectively., +     * @throws IndexOutOfBoundsException, +     *             if {@code count} is less than zero, +     * @throws IndexOutOfBoundsException, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def fattenSomeExample() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +      "from(Array[T])" -> "[use `items(T*)`]",, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns an Observable that emits only the very first item emitted by the source Observable, or notifies, +     * of an {@code NoSuchElementException} if the source Observable is empty., +     * a specified condition, or notifies of an {@code NoSuchElementException} if no such items are emitted., +     * a {@code NoSuchElementException} if the source Observable is empty., +     * given condition, or notifies of a {@code NoSuchElementException} if no such items are emitted., +     * emits only a single item. If the source Observable emits more than one item or no items, notify of an, +     * {@code IllegalArgumentException} or {@code NoSuchElementException} respectively., +     * such item or no such items, notify of an {@code IllegalArgumentException} or, +     * {@code NoSuchElementException} respectively., +     * @throws IndexOutOfBoundsException, +     *             if {@code count} is less than zero, +     * @throws IndexOutOfBoundsException, +++ b/rxjava-core/src/main/java/rx/internal/operators/BlockingOperatorLatest.java, + * Wait for and iterate over the latest values of the source observable. If the source works faster than the, + * iterator, values may be skipped, but not the {@code onError} or {@code onCompleted} events., +    /**, +     * Returns an {@code Iterable} that blocks until or unless the {@code Observable} emits an item that has not, +     * been returned by the {@code Iterable}, then returns that item, +     *, +     * @param source, +     *            the source {@code Observable}, +     * @return an {@code Iterable} that blocks until or unless the {@code Observable} emits an item that has not, +     *         been returned by the {@code Iterable}, then returns that item, +     */, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def fattenSomeExample() {, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala, +      "from(Array[T])" -> "[use `items(T*)`]",, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/ObservableTest.scala, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns an Observable that emits only the very first item emitted by the source Observable, or notifies, +     * of an {@code NoSuchElementException} if the source Observable is empty., +     * a specified condition, or notifies of an {@code NoSuchElementException} if no such items are emitted., +     * a {@code NoSuchElementException} if the source Observable is empty., +     * given condition, or notifies of a {@code NoSuchElementException} if no such items are emitted., +     * emits only a single item. If the source Observable emits more than one item or no items, notify of an, +     * {@code IllegalArgumentException} or {@code NoSuchElementException} respectively., +     * such item or no such items, notify of an {@code IllegalArgumentException} or, +     * {@code NoSuchElementException} respectively., +     * @throws IndexOutOfBoundsException, +     *             if {@code count} is less than zero, +     * @throws IndexOutOfBoundsException, +++ b/rxjava-core/src/main/java/rx/internal/operators/BlockingOperatorLatest.java, + * Wait for and iterate over the latest values of the source observable. If the source works faster than the, + * iterator, values may be skipped, but not the {@code onError} or {@code onCompleted} events., +    /**, +     * Returns an {@code Iterable} that blocks until or unless the {@code Observable} emits an item that has not, +     * been returned by the {@code Iterable}, then returns that item, +     *, +     * @param source, +     *            the source {@code Observable}, +     * @return an {@code Iterable} that blocks until or unless the {@code Observable} emits an item that has not, +     *         been returned by the {@code Iterable}, then returns that item, +     */, +++ b/rxjava-core/src/main/java/rx/internal/operators/BlockingOperatorMostRecent.java, +    /**, +     * Returns an {@code Iterable} that always returns the item most recently emitted by the {@code Observable}.]