[+++ b/language-adaptors/rxjava-kotlin/README.md, +Observable.create(OnSubscribeFunc<String> {, +    it!!.onNext("Hello"), +    it.onCompleted(), +import rx.lang.kotlin.*, +, +{(observer: Observer<in String>) ->, +    observer.onNext("Hello"), +    observer.onCompleted(), +    Subscriptions.empty()!!, +}.asObservableFunc().subscribe { result ->, +++ b/language-adaptors/rxjava-kotlin/README.md, +Observable.create(OnSubscribeFunc<String> {, +    it!!.onNext("Hello"), +    it.onCompleted(), +import rx.lang.kotlin.*, +, +{(observer: Observer<in String>) ->, +    observer.onNext("Hello"), +    observer.onCompleted(), +    Subscriptions.empty()!!, +}.asObservableFunc().subscribe { result ->, +++ b/language-adaptors/rxjava-kotlin/build.gradle, +        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.6.1673', +    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.6.1673', +++ b/language-adaptors/rxjava-kotlin/README.md, +Observable.create(OnSubscribeFunc<String> {, +    it!!.onNext("Hello"), +    it.onCompleted(), +import rx.lang.kotlin.*, +, +{(observer: Observer<in String>) ->, +    observer.onNext("Hello"), +    observer.onCompleted(), +    Subscriptions.empty()!!, +}.asObservableFunc().subscribe { result ->, +++ b/language-adaptors/rxjava-kotlin/build.gradle, +        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.6.1673', +    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.6.1673', +++ b/language-adaptors/rxjava-kotlin/src/main/kotlin/rx/lang/kotlin/namespace.kt, +public fun<T> Function1<Observer<in T>, Unit>.asObservable(): Observable<T> {, +    return Observable.create(OnSubscribe<T>{ t1 ->, +        this(t1!!), +++ b/language-adaptors/rxjava-kotlin/README.md, +Observable.create(OnSubscribeFunc<String> {, +    it!!.onNext("Hello"), +    it.onCompleted(), +import rx.lang.kotlin.*, +, +{(observer: Observer<in String>) ->, +    observer.onNext("Hello"), +    observer.onCompleted(), +    Subscriptions.empty()!!, +}.asObservableFunc().subscribe { result ->, +++ b/language-adaptors/rxjava-kotlin/build.gradle, +        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.6.1673', +    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.6.1673', +++ b/language-adaptors/rxjava-kotlin/src/main/kotlin/rx/lang/kotlin/namespace.kt, +public fun<T> Function1<Observer<in T>, Unit>.asObservable(): Observable<T> {, +    return Observable.create(OnSubscribe<T>{ t1 ->, +        this(t1!!), +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +import org.mockito.Mock, +import org.junit.Before, +import org.mockito.MockitoAnnotations, +, +        Observable.create(OnSubscribeFunc<String> {, +            it!!.onNext("Hello"), +            it.onCompleted(), +            Subscriptions.empty(), +    class AsyncObservable : OnSubscribeFunc<Int>{, +        override fun onSubscribe(op: Observer<in Int>?): Subscription? {, +            return Subscriptions.empty(), +    class TestOnSubscribe(val count: Int) : OnSubscribeFunc<String>{, +        override fun onSubscribe(op: Observer<in String>?): Subscription? {, +            return Subscriptions.empty()!!, +++ b/language-adaptors/rxjava-kotlin/README.md, +Observable.create(OnSubscribeFunc<String> {, +    it!!.onNext("Hello"), +    it.onCompleted(), +import rx.lang.kotlin.*, +, +{(observer: Observer<in String>) ->, +    observer.onNext("Hello"), +    observer.onCompleted(), +    Subscriptions.empty()!!, +}.asObservableFunc().subscribe { result ->, +++ b/language-adaptors/rxjava-kotlin/build.gradle, +        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.6.1673', +    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.6.1673', +++ b/language-adaptors/rxjava-kotlin/src/main/kotlin/rx/lang/kotlin/namespace.kt, +public fun<T> Function1<Observer<in T>, Unit>.asObservable(): Observable<T> {, +    return Observable.create(OnSubscribe<T>{ t1 ->, +        this(t1!!), +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +import org.mockito.Mock, +import org.junit.Before, +import org.mockito.MockitoAnnotations, +, +        Observable.create(OnSubscribeFunc<String> {]