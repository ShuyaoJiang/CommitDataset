[+++ b/src/main/java/io/reactivex/disposables/BooleanDisposable.java, +import io.reactivex.internal.functions.Objects;, +    private static final Runnable EMPTY = new Runnable() {, +    private final AtomicReference<Runnable> run;, +        Objects.requireNonNull(run, "run is null");, +        this.run = new AtomicReference<Runnable>(run);, +        if (r != null) {, +            r = run.getAndSet(null);, +            if (r != null) {, +        return run.get() == null;, +++ b/src/main/java/io/reactivex/disposables/BooleanDisposable.java, +import io.reactivex.internal.functions.Objects;, +    private static final Runnable EMPTY = new Runnable() {, +    private final AtomicReference<Runnable> run;, +        Objects.requireNonNull(run, "run is null");, +        this.run = new AtomicReference<Runnable>(run);, +        if (r != null) {, +            r = run.getAndSet(null);, +            if (r != null) {, +        return run.get() == null;, +++ b/src/main/java/io/reactivex/disposables/Disposables.java, +        return new BooleanDisposable(run);, +    public static Disposable from(Future<?> future, boolean allowInterrupt) {, +        Objects.requireNonNull(future, "future is null");, +        return new FutureDisposable(future, allowInterrupt);, +    }, +]