[+++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +import rx.functions.Action0;, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +import rx.functions.Action0;, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +import rx.functions.Action0;, +     * Creates a {@link BehaviorSubject} which publishes the last and all subsequent events to each {@link Observer} that subscribes to it., +     *            the value which will be published to any {@link Observer} as long as the {@link BehaviorSubject} has not yet received any events, +     * Creates a {@link BehaviorSubject} which publishes the last and all subsequent events to each {@link Observer} that subscribes to it., +     *            the value which will be published to any {@link Observer} as long as the {@link BehaviorSubject} has not yet received any events, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +import rx.functions.Action0;, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +import rx.functions.Action0;, +     * Creates a {@link BehaviorSubject} which publishes the last and all subsequent events to each {@link Observer} that subscribes to it., +     *            the value which will be published to any {@link Observer} as long as the {@link BehaviorSubject} has not yet received any events, +     * Creates a {@link BehaviorSubject} which publishes the last and all subsequent events to each {@link Observer} that subscribes to it., +     *            the value which will be published to any {@link Observer} as long as the {@link BehaviorSubject} has not yet received any events, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +++ b/rxjava-core/src/main/java/rx/subjects/PublishSubject.java, +import rx.functions.Action0;, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +import rx.functions.Action0;, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +import rx.functions.Action0;, +     * Creates a {@link BehaviorSubject} which publishes the last and all subsequent events to each {@link Observer} that subscribes to it., +     *            the value which will be published to any {@link Observer} as long as the {@link BehaviorSubject} has not yet received any events, +     * Creates a {@link BehaviorSubject} which publishes the last and all subsequent events to each {@link Observer} that subscribes to it., +     *            the value which will be published to any {@link Observer} as long as the {@link BehaviorSubject} has not yet received any events, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +++ b/rxjava-core/src/main/java/rx/subjects/PublishSubject.java, +import rx.functions.Action0;, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +++ b/rxjava-core/src/main/java/rx/subjects/ReplaySubject.java, +import rx.functions.Action0;, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +, +++ b/rxjava-core/src/main/java/rx/subjects/AsyncSubject.java, +import rx.functions.Action0;, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +import rx.functions.Action0;, +     * Creates a {@link BehaviorSubject} which publishes the last and all subsequent events to each {@link Observer} that subscribes to it., +     *            the value which will be published to any {@link Observer} as long as the {@link BehaviorSubject} has not yet received any events, +     * Creates a {@link BehaviorSubject} which publishes the last and all subsequent events to each {@link Observer} that subscribes to it., +     *            the value which will be published to any {@link Observer} as long as the {@link BehaviorSubject} has not yet received any events, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +++ b/rxjava-core/src/main/java/rx/subjects/PublishSubject.java, +import rx.functions.Action0;, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +++ b/rxjava-core/src/main/java/rx/subjects/ReplaySubject.java, +import rx.functions.Action0;, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {, +            public void call() {, +        Collection<SubjectObserver<? super T>> observers = subscriptionManager.terminate(new Action0() {]