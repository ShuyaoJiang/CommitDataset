[+++ b/src/main/java/io/reactivex/Completable.java, +     * Subscribes to this Completable only once, when the first CompletableObserver, +     * subscribes to the result Completable, caches its terminal event, +     * and relays/replays it to observers., +     * <p>, +     * Note that this operator doesn't allow disposing the connection, +     * of the upstream source., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code cache} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @return the new Completable instance, +     * @since 2.0.4 - experimental, +     */, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    @Experimental, +    public final Completable cache() {, +        return RxJavaPlugins.onAssembly(new CompletableCache(this));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/Completable.java, +     * Subscribes to this Completable only once, when the first CompletableObserver, +     * subscribes to the result Completable, caches its terminal event, +     * and relays/replays it to observers., +     * <p>, +     * Note that this operator doesn't allow disposing the connection, +     * of the upstream source., +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code cache} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     * @return the new Completable instance, +     * @since 2.0.4 - experimental, +     */, +    @CheckReturnValue, +    @SchedulerSupport(SchedulerSupport.NONE), +    @Experimental, +    public final Completable cache() {, +        return RxJavaPlugins.onAssembly(new CompletableCache(this));, +    }, +, +    /**, +++ b/src/main/java/io/reactivex/internal/operators/completable/CompletableCache.java, +/**, + * Copyright 2016 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex.internal.operators.completable;, +, +import java.util.concurrent.atomic.*;, +, +import io.reactivex.*;, +import io.reactivex.annotations.Experimental;, +import io.reactivex.disposables.Disposable;, +, +/**, + * Consume the upstream source exactly once and cache its terminal event., + * , + * @since 2.0.4 - experimental, + */, +@Experimental, +public final class CompletableCache extends Completable implements CompletableObserver {, +, +    static final InnerCompletableCache[] EMPTY = new InnerCompletableCache[0];, +, +    static final InnerCompletableCache[] TERMINATED = new InnerCompletableCache[0];, +, +    final CompletableSource source;, +, +    final AtomicReference<InnerCompletableCache[]> observers;, +, +    final AtomicBoolean once;, +, +    Throwable error;, +, +    public CompletableCache(CompletableSource source) {, +        this.source = source;, +        this.observers = new AtomicReference<InnerCompletableCache[]>(EMPTY);, +        this.once = new AtomicBoolean();, +    }, +, +    @Override, +    protected void subscribeActual(CompletableObserver s) {, +        InnerCompletableCache inner = new InnerCompletableCache(s);, +        s.onSubscribe(inner);, +, +        if (add(inner)) {, +            if (inner.isDisposed()) {, +                remove(inner);]