[+++ b/src/main/java/rx/observers/TestSubscriber.java, +import java.util.*;, +import rx.Observer;, +import rx.annotations.Experimental;, +import rx.exceptions.CompositeException;, +    /** Holds the initial request value. */, +    private final long initialRequest;, +    /** The shared no-op observer. */, +    private static final Observer<Object> INERT = new Observer<Object>() {, +        public void onNext(Object t) {, +    };, +, +    /**, +     * Constructs a TestSubscriber with the initial request to be requested from upstream., +     * @param initialRequest the initial request value, negative value will revert to the default unbounded behavior, +     */, +    @SuppressWarnings("unchecked"), +    @Experimental, +    public TestSubscriber(long initialRequest) {, +        this((Observer<T>)INERT, initialRequest);, +    }, +    , +    /**, +     * Constructs a TestSubscriber with the initial request to be requested from upstream, +     * and a delegate Observer to wrap., +     * @param initialRequest the initial request value, negative value will revert to the default unbounded behavior, +     * @param delegate the Observer instance to wrap, +     */, +    @Experimental, +    public TestSubscriber(Observer<T> delegate, long initialRequest) {, +        if (delegate == null) {, +            throw new NullPointerException();, +        }, +        this.testObserver = new TestObserver<T>(delegate);, +        this.initialRequest = initialRequest;, +    }, +    , +    public TestSubscriber(Subscriber<T> delegate) {, +        this(delegate, -1);, +    }, +, +    public TestSubscriber(Observer<T> delegate) {, +        this(delegate, -1);, +    }, +, +    public TestSubscriber() {, +        this(-1);, +    }, +    , +    @Override, +    public void onStart() {, +        if  (initialRequest >= 0) {, +            requestMore(initialRequest);, +        } else {, +            super.onStart();, +        }, +    , +    /**, +     * Assert if there is exactly a single completion event., +     */, +    @Experimental, +    public void assertCompleted() {, +        int s = testObserver.getOnCompletedEvents().size();, +        if (s == 0) {, +            throw new AssertionError("Not completed!");, +        } else, +        if (s > 1) {, +            throw new AssertionError("Completed multiple times: " + s);, +        }, +    }, +    /**, +     * Assert if there is no completion event., +     */, +    @Experimental, +    public void assertNotCompleted() {, +        int s = testObserver.getOnCompletedEvents().size();, +        if (s == 1) {, +            throw new AssertionError("Completed!");, +        } else, +        if (s > 1) {, +            throw new AssertionError("Completed multiple times: " + s);, +        }, +    }, +    /**, +     * Assert if there is exactly one error event which is a subclass of the given class., +     * @param clazz the class to check the error against., +     */, +    @Experimental, +    public void assertError(Class<? extends Throwable> clazz) {, +        List<Throwable> err = testObserver.getOnErrorEvents();, +        if (err.size() == 0) {, +            throw new AssertionError("No errors");, +        } else, +        if (err.size() > 1) {, +            throw new AssertionError("Multiple errors: " + err.size(), new CompositeException(err));, +        } else, +        if (!clazz.isInstance(err.get(0))) {, +            throw new AssertionError("Exceptions differ; expected: " + clazz + ", actual: " + err.get(0), err.get(0));, +        }, +    }]