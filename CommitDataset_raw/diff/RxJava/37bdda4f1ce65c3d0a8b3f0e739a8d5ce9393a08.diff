[+++ b/rxjava-contrib/rxjava-string/src/main/java/rx/observables/StringObservable.java, +import rx.Observable;, +import rx.Observable.OnSubscribe;, +import rx.Observable.Operator;, +import rx.Subscriber;, +import rx.functions.Func1;, +import rx.functions.Func2;, +, +        return src.reduce(new Func2<String, String, String>() {, +            public String call(String a, String b) {, +                return a + b;, +    public static <T> Observable<String> join(final Observable<T> source, final CharSequence separator) {, +        return source.lift(new Operator<String, T>() {, +            public Subscriber<T> call(final Subscriber<? super String> o) {, +                return new Subscriber<T>(o) {, +                    public void onNext(Object t) {, +                        b.append(String.valueOf(t));, +++ b/rxjava-contrib/rxjava-string/src/main/java/rx/observables/StringObservable.java, +import rx.Observable;, +import rx.Observable.OnSubscribe;, +import rx.Observable.Operator;, +import rx.Subscriber;, +import rx.functions.Func1;, +import rx.functions.Func2;, +, +        return src.reduce(new Func2<String, String, String>() {, +            public String call(String a, String b) {, +                return a + b;, +    public static <T> Observable<String> join(final Observable<T> source, final CharSequence separator) {, +        return source.lift(new Operator<String, T>() {, +            public Subscriber<T> call(final Subscriber<? super String> o) {, +                return new Subscriber<T>(o) {, +                    public void onNext(Object t) {, +                        b.append(String.valueOf(t));, +++ b/rxjava-contrib/rxjava-string/src/test/java/rx/observables/StringObservableTest.java, +import org.junit.Test;, +, +import rx.Observable;, +import rx.Observer;, +import rx.observables.StringObservable.Line;, +import rx.observers.TestObserver;, +import rx.util.AssertObservable;, +, +        String out = StringObservable.decode(src, "UTF-8").toBlockingObservable().single();, +        String out = StringObservable.decode(src, "UTF-8").toBlockingObservable().single();, +        StringObservable.decode(src, charsetDecoder).toBlockingObservable().single();, +        StringObservable.decode(src, charsetDecoder).toBlockingObservable().single();, +            StringObservable.decode(Observable.concat(src, err), charsetDecoder).toList().toBlockingObservable().single();, +            StringObservable.decode(Observable.concat(src, err), charsetDecoder).toList().toBlockingObservable().single();, +                new byte[] { (byte) 0xc2, (byte) 0xa1 },, +                StringObservable.encode(Observable.just("\u00A1"), "UTF-8").toBlockingObservable().single());, +        Observable<String> act = StringObservable.split(src, regex);, +        Observable<Object> source = Observable.<Object> from(Arrays.<Object>asList("a", 1, "c"));, +        Observable<String> result = StringObservable.join(source, ", ");, +        Observable<String> result = StringObservable.join(source, ", ");, +        Observable<String> result = StringObservable.join(source, ", ");, +        Observable<String> result = StringObservable.join(source, ", ");, +        Observable<String> result = StringObservable.join(source, ", ");, +        Observable<String> source = Observable.concat(Observable.just("a"), Observable.<String> error(new RuntimeException("Forced failure")));, +        Observable<String> result = StringObservable.join(source, ", ");, +        final byte[] outBytes = StringObservable.from(new ByteArrayInputStream(inBytes)).toBlockingObservable().single();, +        final String outStr = StringObservable.from(new StringReader(inStr)).toBlockingObservable().single();, +        List<Line> lines = StringObservable.byLine(Observable.from(Arrays.asList("qwer", newLine + "asdf" + newLine, "zx", "cv"))).toList().toBlockingObservable().single();, +++ b/rxjava-contrib/rxjava-string/src/main/java/rx/observables/StringObservable.java, +import rx.Observable;, +import rx.Observable.OnSubscribe;, +import rx.Observable.Operator;, +import rx.Subscriber;, +import rx.functions.Func1;, +import rx.functions.Func2;, +, +        return src.reduce(new Func2<String, String, String>() {, +            public String call(String a, String b) {, +                return a + b;, +    public static <T> Observable<String> join(final Observable<T> source, final CharSequence separator) {, +        return source.lift(new Operator<String, T>() {, +            public Subscriber<T> call(final Subscriber<? super String> o) {, +                return new Subscriber<T>(o) {, +                    public void onNext(Object t) {, +                        b.append(String.valueOf(t));, +++ b/rxjava-contrib/rxjava-string/src/test/java/rx/observables/StringObservableTest.java, +import org.junit.Test;, +, +import rx.Observable;, +import rx.Observer;, +import rx.observables.StringObservable.Line;, +import rx.observers.TestObserver;, +import rx.util.AssertObservable;, +, +        String out = StringObservable.decode(src, "UTF-8").toBlockingObservable().single();, +        String out = StringObservable.decode(src, "UTF-8").toBlockingObservable().single();, +        StringObservable.decode(src, charsetDecoder).toBlockingObservable().single();, +        StringObservable.decode(src, charsetDecoder).toBlockingObservable().single();, +            StringObservable.decode(Observable.concat(src, err), charsetDecoder).toList().toBlockingObservable().single();, +            StringObservable.decode(Observable.concat(src, err), charsetDecoder).toList().toBlockingObservable().single();, +                new byte[] { (byte) 0xc2, (byte) 0xa1 },, +                StringObservable.encode(Observable.just("\u00A1"), "UTF-8").toBlockingObservable().single());, +        Observable<String> act = StringObservable.split(src, regex);, +        Observable<Object> source = Observable.<Object> from(Arrays.<Object>asList("a", 1, "c"));, +        Observable<String> result = StringObservable.join(source, ", ");]