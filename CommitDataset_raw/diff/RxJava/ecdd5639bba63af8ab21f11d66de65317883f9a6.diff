[+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCache.java, +        private static final long CANCELLED = -1;, +                if (r == CANCELLED) {, +            return get() == CANCELLED;, +            if (r != CANCELLED) {, +                r = getAndSet(CANCELLED);, +                if (r != CANCELLED) {, +                                if (get() == CANCELLED) {, +                            if (get() == CANCELLED) {, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCache.java, +        private static final long CANCELLED = -1;, +                if (r == CANCELLED) {, +            return get() == CANCELLED;, +            if (r != CANCELLED) {, +                r = getAndSet(CANCELLED);, +                if (r != CANCELLED) {, +                                if (get() == CANCELLED) {, +                            if (get() == CANCELLED) {, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableInterval.java, +            if (resource.get() != DisposableHelper.DISPOSED) {, +                        DisposableHelper.dispose(resource);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCache.java, +        private static final long CANCELLED = -1;, +                if (r == CANCELLED) {, +            return get() == CANCELLED;, +            if (r != CANCELLED) {, +                r = getAndSet(CANCELLED);, +                if (r != CANCELLED) {, +                                if (get() == CANCELLED) {, +                            if (get() == CANCELLED) {, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableInterval.java, +            if (resource.get() != DisposableHelper.DISPOSED) {, +                        DisposableHelper.dispose(resource);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java, +            return producers.get() == TERMINATED;, +            producers.set(TERMINATED);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCache.java, +        private static final long CANCELLED = -1;, +                if (r == CANCELLED) {, +            return get() == CANCELLED;, +            if (r != CANCELLED) {, +                r = getAndSet(CANCELLED);, +                if (r != CANCELLED) {, +                                if (get() == CANCELLED) {, +                            if (get() == CANCELLED) {, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableInterval.java, +            if (resource.get() != DisposableHelper.DISPOSED) {, +                        DisposableHelper.dispose(resource);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java, +            return producers.get() == TERMINATED;, +            producers.set(TERMINATED);, +++ b/src/main/java/io/reactivex/internal/operators/observable/NbpOperatorReplay.java, +            return producers.get() == TERMINATED;, +            producers.set(TERMINATED);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableCache.java, +        private static final long CANCELLED = -1;, +                if (r == CANCELLED) {, +            return get() == CANCELLED;, +            if (r != CANCELLED) {, +                r = getAndSet(CANCELLED);, +                if (r != CANCELLED) {, +                                if (get() == CANCELLED) {, +                            if (get() == CANCELLED) {, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableInterval.java, +            if (resource.get() != DisposableHelper.DISPOSED) {, +                        DisposableHelper.dispose(resource);, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java, +            return producers.get() == TERMINATED;, +            producers.set(TERMINATED);, +++ b/src/main/java/io/reactivex/internal/operators/observable/NbpOperatorReplay.java, +            return producers.get() == TERMINATED;, +            producers.set(TERMINATED);, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableInterval.java, +    extends AtomicReference<Disposable>, +            DisposableHelper.dispose(this);, +            return get() == DisposableHelper.DISPOSED;, +            if (get() != DisposableHelper.DISPOSED) {, +            DisposableHelper.setOnce(this, d);]