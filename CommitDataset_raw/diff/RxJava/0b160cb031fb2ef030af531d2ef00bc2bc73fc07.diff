[+++ b/CHANGES.md, +### Version 0.14.9 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.14.9%22)) ###, +, +* [Pull 477](https://github.com/Netflix/RxJava/pull/477) BugFix: CompositeSubscription, +* [Pull 476](https://github.com/Netflix/RxJava/pull/476) BugFix: Don't emit null onComplete when no onNext received in AsyncSubject, +* [Pull 474](https://github.com/Netflix/RxJava/pull/474) BugFix: Reduce an empty observable, +* [Pull 474](https://github.com/Netflix/RxJava/pull/474) BugFix: non-deterministic unit test, +* [Pull 472](https://github.com/Netflix/RxJava/pull/472) BugFix: Issue 431 Unsubscribe with Schedulers.newThread, +* [Pull 470](https://github.com/Netflix/RxJava/pull/470) Operator: Last, +, +++ b/CHANGES.md, +### Version 0.14.9 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.14.9%22)) ###, +, +* [Pull 477](https://github.com/Netflix/RxJava/pull/477) BugFix: CompositeSubscription, +* [Pull 476](https://github.com/Netflix/RxJava/pull/476) BugFix: Don't emit null onComplete when no onNext received in AsyncSubject, +* [Pull 474](https://github.com/Netflix/RxJava/pull/474) BugFix: Reduce an empty observable, +* [Pull 474](https://github.com/Netflix/RxJava/pull/474) BugFix: non-deterministic unit test, +* [Pull 472](https://github.com/Netflix/RxJava/pull/472) BugFix: Issue 431 Unsubscribe with Schedulers.newThread, +* [Pull 470](https://github.com/Netflix/RxJava/pull/470) Operator: Last, +, +++ b/gradle.properties, +version=0.14.10-SNAPSHOT, +++ b/CHANGES.md, +### Version 0.14.9 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.14.9%22)) ###, +, +* [Pull 477](https://github.com/Netflix/RxJava/pull/477) BugFix: CompositeSubscription, +* [Pull 476](https://github.com/Netflix/RxJava/pull/476) BugFix: Don't emit null onComplete when no onNext received in AsyncSubject, +* [Pull 474](https://github.com/Netflix/RxJava/pull/474) BugFix: Reduce an empty observable, +* [Pull 474](https://github.com/Netflix/RxJava/pull/474) BugFix: non-deterministic unit test, +* [Pull 472](https://github.com/Netflix/RxJava/pull/472) BugFix: Issue 431 Unsubscribe with Schedulers.newThread, +* [Pull 470](https://github.com/Netflix/RxJava/pull/470) Operator: Last, +, +++ b/gradle.properties, +version=0.14.10-SNAPSHOT, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/CHANGES.md, +### Version 0.14.9 ([Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.netflix.rxjava%22%20AND%20v%3A%220.14.9%22)) ###, +, +* [Pull 477](https://github.com/Netflix/RxJava/pull/477) BugFix: CompositeSubscription, +* [Pull 476](https://github.com/Netflix/RxJava/pull/476) BugFix: Don't emit null onComplete when no onNext received in AsyncSubject, +* [Pull 474](https://github.com/Netflix/RxJava/pull/474) BugFix: Reduce an empty observable, +* [Pull 474](https://github.com/Netflix/RxJava/pull/474) BugFix: non-deterministic unit test, +* [Pull 472](https://github.com/Netflix/RxJava/pull/472) BugFix: Issue 431 Unsubscribe with Schedulers.newThread, +* [Pull 470](https://github.com/Netflix/RxJava/pull/470) Operator: Last, +, +++ b/gradle.properties, +version=0.14.10-SNAPSHOT, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @throws IllegalArgumentException, +     *             if Observable sequence is empty., +        /*, +         * Discussion and confirmation of implementation at https://github.com/Netflix/RxJava/issues/423#issuecomment-27642532, +         * , +         * It should use last() not takeLast(1) since it needs to emit an error if the sequence is empty., +         */, +        return create(OperationScan.scan(this, accumulator)).last();, +     * Applies a timeout policy for each element in the observable sequence,, +     * using the specified scheduler to run timeout timers. If the next element, +     * isn't received within the specified timeout duration starting from its, +     * predecessor, a TimeoutException is propagated to the observer., +     *            Maximum duration between values before a timeout occurs., +     *            The unit of time which applies to the "timeout" argument., +     *, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh244283(v=vs.103).aspx">MSDN: Observable.Timeout</a>, +     */, +    public Observable<T> timeout(long timeout, TimeUnit timeUnit) {, +        return create(OperationTimeout.timeout(this, timeout, timeUnit));, +    }, +, +    /**, +     * Applies a timeout policy for each element in the observable sequence,, +     * using the specified scheduler to run timeout timers. If the next element, +     * isn't received within the specified timeout duration starting from its, +     * predecessor, the other observable sequence is used to produce future, +     * messages from that point on., +     *, +     * @param timeout, +     *            Maximum duration between values before a timeout occurs., +     * @param timeUnit, +     *            The unit of time which applies to the "timeout" argument., +     * @param other, +     *            Sequence to return in case of a timeout., +     *, +     * @return The source sequence switching to the other sequence in case of a timeout., +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh229512(v=vs.103).aspx">MSDN: Observable.Timeout</a>, +     */, +    public Observable<T> timeout(long timeout, TimeUnit timeUnit, Observable<? extends T> other) {, +        return create(OperationTimeout.timeout(this, timeout, timeUnit, other));, +    }, +, +    /**, +     * Applies a timeout policy for each element in the observable sequence,, +     * using the specified scheduler to run timeout timers. If the next element, +     * isn't received within the specified timeout duration starting from its, +     * predecessor, a TimeoutException is propagated to the observer., +     *, +     * @param timeout, +     *            Maximum duration between values before a timeout occurs., +     * @param timeUnit]