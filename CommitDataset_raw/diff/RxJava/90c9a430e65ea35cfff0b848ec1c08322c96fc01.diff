[+++ b/src/main/java/io/reactivex/Observable.java, +        return distinct(v -> v, HashSet::new);, +    public final <K> Observable<T> distinct(Function<? super T, K> keySelector) {, +        return distinct(keySelector, HashSet::new);, +    }, +, +    public final <K> Observable<T> distinct(Function<? super T, K> keySelector, Supplier<? extends Collection<? super K>> collectionSupplier) {, +        return lift(OperatorDistinct.withCollection(keySelector, collectionSupplier));, +    public final <K> Observable<T> distinctUntilChanged(Function<? super T, K> keySelector) {, +        return lift(OperatorDistinct.untilChanged(keySelector));, +    }, +, +    public final Observable<T> doOnEach(Subscriber<? super T> observer) {, +++ b/src/main/java/io/reactivex/Observable.java, +        return distinct(v -> v, HashSet::new);, +    public final <K> Observable<T> distinct(Function<? super T, K> keySelector) {, +        return distinct(keySelector, HashSet::new);, +    }, +, +    public final <K> Observable<T> distinct(Function<? super T, K> keySelector, Supplier<? extends Collection<? super K>> collectionSupplier) {, +        return lift(OperatorDistinct.withCollection(keySelector, collectionSupplier));, +    public final <K> Observable<T> distinctUntilChanged(Function<? super T, K> keySelector) {, +        return lift(OperatorDistinct.untilChanged(keySelector));, +    }, +, +    public final Observable<T> doOnEach(Subscriber<? super T> observer) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorDistinct.java, +public final class OperatorDistinct<T, K> implements Operator<T, T> {, +    final Function<? super T, K> keySelector;, +    final Supplier<? extends Predicate<? super K>> predicateSupplier;, +    public OperatorDistinct(Function<? super T, K> keySelector, Supplier<? extends Predicate<? super K>> predicateSupplier) {, +        this.keySelector = keySelector;, +    public static <T, K> OperatorDistinct<T, K> withCollection(Function<? super T, K> keySelector, Supplier<? extends Collection<? super K>> collectionSupplier) {, +        Supplier<? extends Predicate<? super K>> p = () -> {, +            Collection<? super K> coll = collectionSupplier.get();, +        return new OperatorDistinct<>(keySelector, p);, +    static final OperatorDistinct<Object, Object> UNTIL_CHANGED;, +        UNTIL_CHANGED = new OperatorDistinct<>(v -> v, p);, +    public static <T> OperatorDistinct<T, T> untilChanged() {, +        return (OperatorDistinct<T, T>)UNTIL_CHANGED;, +    public static <T, K> OperatorDistinct<T, K> untilChanged(Function<? super T, K> keySelector) {, +        Supplier<? extends Predicate<? super K>> p = () -> {, +            Object[] last = { null };, +            , +            return t -> {, +                if (t == null) {, +                    last[0] = null;, +                    return true;, +                }, +                Object o = last[0];, +                last[0] = t;, +                return !Objects.equals(o, t);, +            };, +        };, +        return new OperatorDistinct<>(keySelector, p);, +    }, +, +    , +        Predicate<? super K> coll;, +        return new DistinctSubscriber<>(t, keySelector, coll);, +    static final class DistinctSubscriber<T, K> implements Subscriber<T> {, +        final Predicate<? super K> predicate;, +        final Function<? super T, K> keySelector;, +        public DistinctSubscriber(Subscriber<? super T> actual, Function<? super T, K> keySelector, Predicate<? super K> predicate) {, +            this.keySelector = keySelector;, +            K key;, +            , +            try {, +                key = keySelector.apply(t);, +            } catch (Throwable e) {, +                s.cancel();, +                actual.onError(e);, +                return;, +            }, +            , +            if (key == null) {, +                s.cancel();, +                actual.onError(new NullPointerException("Null key supplied"));, +                return;, +            }, +            , +            , +                b = predicate.test(key);, +++ b/src/main/java/io/reactivex/Observable.java, +        return distinct(v -> v, HashSet::new);, +    public final <K> Observable<T> distinct(Function<? super T, K> keySelector) {, +        return distinct(keySelector, HashSet::new);, +    }, +, +    public final <K> Observable<T> distinct(Function<? super T, K> keySelector, Supplier<? extends Collection<? super K>> collectionSupplier) {, +        return lift(OperatorDistinct.withCollection(keySelector, collectionSupplier));, +    public final <K> Observable<T> distinctUntilChanged(Function<? super T, K> keySelector) {, +        return lift(OperatorDistinct.untilChanged(keySelector));, +    }, +, +    public final Observable<T> doOnEach(Subscriber<? super T> observer) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorDistinct.java, +public final class OperatorDistinct<T, K> implements Operator<T, T> {, +    final Function<? super T, K> keySelector;, +    final Supplier<? extends Predicate<? super K>> predicateSupplier;]