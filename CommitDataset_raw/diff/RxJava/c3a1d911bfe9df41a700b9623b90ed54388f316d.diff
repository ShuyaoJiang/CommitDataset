[+++ b/src/main/java/io/reactivex/exceptions/CompositeException.java, +     *, +     * @throws IllegalArgumentException if <code>exceptions</code> is empty., +        this(exceptions == null ?, +            Arrays.asList(new NullPointerException("exceptions was null")) : Arrays.asList(exceptions));, +     *, +     * @throws IllegalArgumentException if <code>errors</code> is empty., +                    deDupedExceptions.add(new NullPointerException("Throwable was null!"));, +            deDupedExceptions.add(new NullPointerException("errors was null"));, +        if (deDupedExceptions.isEmpty()) {, +            throw new IllegalArgumentException("errors is empty");, +        }, +        if (root == null || root == ex) {, +                Throwable cause = root.getCause();, +                if (cause == null || cause == root) {, +                    root = cause;, +        if (root == null || cause == root) {, +            if (cause == null || cause == root) {, +            root = cause;, +++ b/src/main/java/io/reactivex/exceptions/CompositeException.java, +     *, +     * @throws IllegalArgumentException if <code>exceptions</code> is empty., +        this(exceptions == null ?, +            Arrays.asList(new NullPointerException("exceptions was null")) : Arrays.asList(exceptions));, +     *, +     * @throws IllegalArgumentException if <code>errors</code> is empty., +                    deDupedExceptions.add(new NullPointerException("Throwable was null!"));, +            deDupedExceptions.add(new NullPointerException("errors was null"));, +        if (deDupedExceptions.isEmpty()) {, +            throw new IllegalArgumentException("errors is empty");, +        }, +        if (root == null || root == ex) {, +                Throwable cause = root.getCause();, +                if (cause == null || cause == root) {, +                    root = cause;, +        if (root == null || cause == root) {, +            if (cause == null || cause == root) {, +            root = cause;, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlatMap.java, +, +import java.util.ArrayList;, +import java.util.List;, +            List<Throwable> composite = null;, +                Throwable t;, +                    if (ex == null) {, +                        ex = exc;, +                    } else {, +                            composite = new ArrayList<Throwable>();, +                            composite.add(ex);, +                        composite.add(exc);, +                    }, +                if (ex == null) {, +                        composite = new ArrayList<Throwable>();, +                        composite.add(ex);, +                    composite.add(t);, +                actual.onError(new CompositeException(composite));, +++ b/src/main/java/io/reactivex/exceptions/CompositeException.java, +     *, +     * @throws IllegalArgumentException if <code>exceptions</code> is empty., +        this(exceptions == null ?, +            Arrays.asList(new NullPointerException("exceptions was null")) : Arrays.asList(exceptions));, +     *, +     * @throws IllegalArgumentException if <code>errors</code> is empty., +                    deDupedExceptions.add(new NullPointerException("Throwable was null!"));, +            deDupedExceptions.add(new NullPointerException("errors was null"));, +        if (deDupedExceptions.isEmpty()) {, +            throw new IllegalArgumentException("errors is empty");, +        }, +        if (root == null || root == ex) {, +                Throwable cause = root.getCause();, +                if (cause == null || cause == root) {, +                    root = cause;, +        if (root == null || cause == root) {, +            if (cause == null || cause == root) {, +            root = cause;, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlatMap.java, +, +import java.util.ArrayList;, +import java.util.List;, +            List<Throwable> composite = null;, +                Throwable t;, +                    if (ex == null) {, +                        ex = exc;, +                    } else {, +                            composite = new ArrayList<Throwable>();, +                            composite.add(ex);, +                        composite.add(exc);, +                    }, +                if (ex == null) {, +                        composite = new ArrayList<Throwable>();, +                        composite.add(ex);, +                    composite.add(t);, +                actual.onError(new CompositeException(composite));, +++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableCombineLatest.java, +                if (curr != null) {, +                    CompositeException ce = new CompositeException(curr, e);, +++ b/src/main/java/io/reactivex/exceptions/CompositeException.java, +     *, +     * @throws IllegalArgumentException if <code>exceptions</code> is empty., +        this(exceptions == null ?]