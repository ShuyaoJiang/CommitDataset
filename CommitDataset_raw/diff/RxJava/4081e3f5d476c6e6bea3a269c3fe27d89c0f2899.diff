[+++ b/src/main/java/rx/internal/operators/OperatorMulticast.java, +    final AtomicReference<Subject<? super T, ? extends R>> connectedSubject;, +    final List<Subscriber<? super R>> waitingForConnect;, +    private Subscriber<T> subscription;, +    // wraps subscription above for unsubscription using guard, +    private Subscription guardedSubscription;, +                // already connected, +                connection.call(guardedSubscription);, +                final AtomicReference<Subscription> gs = new AtomicReference<Subscription>();, +                gs.set(Subscriptions.create(new Action0() {, +                    @Override, +                    public void call() {, +                        Subscription s;, +                        synchronized (guard) {, +                            if ( guardedSubscription == gs.get()) {, +                                s = subscription;, +                                subscription = null;, +                                guardedSubscription = null;, +                                connectedSubject.set(null);, +                            } else , +                                return;, +                        }, +                        if (s != null) {, +                            s.unsubscribe();, +                        }, +                    }, +                }));, +                guardedSubscription = gs.get();, +            , +        connection.call(guardedSubscription);, +        Subscriber<T> sub; , +            sub = subscription;, +        if (sub != null), +            source.subscribe(sub);, +++ b/src/main/java/rx/internal/operators/OperatorMulticast.java, +    final AtomicReference<Subject<? super T, ? extends R>> connectedSubject;, +    final List<Subscriber<? super R>> waitingForConnect;, +    private Subscriber<T> subscription;, +    // wraps subscription above for unsubscription using guard, +    private Subscription guardedSubscription;, +                // already connected, +                connection.call(guardedSubscription);, +                final AtomicReference<Subscription> gs = new AtomicReference<Subscription>();, +                gs.set(Subscriptions.create(new Action0() {, +                    @Override, +                    public void call() {, +                        Subscription s;, +                        synchronized (guard) {, +                            if ( guardedSubscription == gs.get()) {, +                                s = subscription;, +                                subscription = null;, +                                guardedSubscription = null;, +                                connectedSubject.set(null);, +                            } else , +                                return;, +                        }, +                        if (s != null) {, +                            s.unsubscribe();, +                        }, +                    }, +                }));, +                guardedSubscription = gs.get();, +            , +        connection.call(guardedSubscription);, +        Subscriber<T> sub; , +            sub = subscription;, +        if (sub != null), +            source.subscribe(sub);, +++ b/src/main/java/rx/internal/operators/OperatorPublish.java, +            if (emitted > 0 && origin != null) {, +                    while (true) {, +++ b/src/main/java/rx/internal/operators/OperatorMulticast.java, +    final AtomicReference<Subject<? super T, ? extends R>> connectedSubject;, +    final List<Subscriber<? super R>> waitingForConnect;, +    private Subscriber<T> subscription;, +    // wraps subscription above for unsubscription using guard, +    private Subscription guardedSubscription;, +                // already connected, +                connection.call(guardedSubscription);, +                final AtomicReference<Subscription> gs = new AtomicReference<Subscription>();, +                gs.set(Subscriptions.create(new Action0() {, +                    @Override, +                    public void call() {, +                        Subscription s;, +                        synchronized (guard) {, +                            if ( guardedSubscription == gs.get()) {, +                                s = subscription;, +                                subscription = null;, +                                guardedSubscription = null;, +                                connectedSubject.set(null);, +                            } else , +                                return;, +                        }, +                        if (s != null) {, +                            s.unsubscribe();, +                        }, +                    }, +                }));, +                guardedSubscription = gs.get();, +            ]