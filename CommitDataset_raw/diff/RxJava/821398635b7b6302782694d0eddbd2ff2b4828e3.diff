[+++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/schedulers/HandlerThreadScheduler.java, +        private BooleanSubscription innerSubscription = new BooleanSubscription();, +            innerSubscription.unsubscribe();, +            return innerSubscription.isUnsubscribed();, +            final Runnable runnable = new Runnable() {, +                @Override, +                public void run() {, +                    if (isUnsubscribed()) {, +                        return;, +                    }, +                    action.call();, +                }, +            };, +            handler.postDelayed(runnable, unit.toMillis(delayTime));, +            return Subscriptions.create(new Action0() {, +, +                    handler.removeCallbacks(runnable);, +                    , +            });, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/schedulers/HandlerThreadScheduler.java, +        private BooleanSubscription innerSubscription = new BooleanSubscription();, +            innerSubscription.unsubscribe();, +            return innerSubscription.isUnsubscribed();, +            final Runnable runnable = new Runnable() {, +                @Override, +                public void run() {, +                    if (isUnsubscribed()) {, +                        return;, +                    }, +                    action.call();, +                }, +            };, +            handler.postDelayed(runnable, unit.toMillis(delayTime));, +            return Subscriptions.create(new Action0() {, +, +                    handler.removeCallbacks(runnable);, +                    , +            });, +++ b/rxjava-contrib/rxjava-android/src/test/java/rx/android/schedulers/HandlerThreadSchedulerTest.java, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/schedulers/HandlerThreadScheduler.java, +        private BooleanSubscription innerSubscription = new BooleanSubscription();, +            innerSubscription.unsubscribe();, +            return innerSubscription.isUnsubscribed();, +            final Runnable runnable = new Runnable() {, +                @Override, +                public void run() {, +                    if (isUnsubscribed()) {, +                        return;, +                    }, +                    action.call();, +                }, +            };, +            handler.postDelayed(runnable, unit.toMillis(delayTime));, +            return Subscriptions.create(new Action0() {, +, +                    handler.removeCallbacks(runnable);, +                    , +            });, +++ b/rxjava-contrib/rxjava-android/src/test/java/rx/android/schedulers/HandlerThreadSchedulerTest.java, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns an Observable that emits only the very first item emitted by the source Observable, or notifies, +     * of an {@code NoSuchElementException} if the source Observable is empty., +     * a specified condition, or notifies of an {@code NoSuchElementException} if no such items are emitted., +     * a {@code NoSuchElementException} if the source Observable is empty., +     * given condition, or notifies of a {@code NoSuchElementException} if no such items are emitted., +     * emits only a single item. If the source Observable emits more than one item or no items, notify of an, +     * {@code IllegalArgumentException} or {@code NoSuchElementException} respectively., +     * such item or no such items, notify of an {@code IllegalArgumentException} or, +     * {@code NoSuchElementException} respectively., +     * @throws IndexOutOfBoundsException, +     *             if {@code count} is less than zero, +     * @throws IndexOutOfBoundsException, +++ b/rxjava-contrib/rxjava-android/src/main/java/rx/android/schedulers/HandlerThreadScheduler.java, +        private BooleanSubscription innerSubscription = new BooleanSubscription();, +            innerSubscription.unsubscribe();, +            return innerSubscription.isUnsubscribed();, +            final Runnable runnable = new Runnable() {, +                @Override, +                public void run() {, +                    if (isUnsubscribed()) {, +                        return;, +                    }, +                    action.call();, +                }, +            };, +            handler.postDelayed(runnable, unit.toMillis(delayTime));, +            return Subscriptions.create(new Action0() {, +, +                    handler.removeCallbacks(runnable);, +                    , +            });, +++ b/rxjava-contrib/rxjava-android/src/test/java/rx/android/schedulers/HandlerThreadSchedulerTest.java, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Returns an Observable that emits only the very first item emitted by the source Observable, or notifies, +     * of an {@code NoSuchElementException} if the source Observable is empty., +     * a specified condition, or notifies of an {@code NoSuchElementException} if no such items are emitted., +     * a {@code NoSuchElementException} if the source Observable is empty., +     * given condition, or notifies of a {@code NoSuchElementException} if no such items are emitted., +     * emits only a single item. If the source Observable emits more than one item or no items, notify of an, +     * {@code IllegalArgumentException} or {@code NoSuchElementException} respectively.]