[+++ b/rxjava-core/src/main/java/rx/Observable.java, +        return OperationSum.sumIntegers(source);, +        return scan(accumulator).last();, +        return scan(initialValue, accumulator).takeLast(1);, +        return lift(OperationScan.scan(accumulator));, +        return lift(OperationScan.scan(initialValue, accumulator));, +        return OperationSum.sumAtLeastOneDoubles(map(valueExtractor));, +        return OperationSum.sumAtLeastOneFloats(map(valueExtractor));, +        return OperationSum.sumAtLeastOneIntegers(map(valueExtractor));, +        return OperationSum.sumAtLeastOneLongs(map(valueExtractor));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        return OperationSum.sumIntegers(source);, +        return scan(accumulator).last();, +        return scan(initialValue, accumulator).takeLast(1);, +        return lift(OperationScan.scan(accumulator));, +        return lift(OperationScan.scan(initialValue, accumulator));, +        return OperationSum.sumAtLeastOneDoubles(map(valueExtractor));, +        return OperationSum.sumAtLeastOneFloats(map(valueExtractor));, +        return OperationSum.sumAtLeastOneIntegers(map(valueExtractor));, +        return OperationSum.sumAtLeastOneLongs(map(valueExtractor));, +++ b/rxjava-core/src/main/java/rx/operators/OperationScan.java, +import rx.Observable.Operator;, +import rx.Subscriber;, +     * Applies an accumulator function over an observable sequence and returns each intermediate, +     * result with the specified source and accumulator., +     * @return An observable sequence whose elements are the result of accumulating the output from, +     *         the list of Observables., +     * @see <a, +     *      href="http://msdn.microsoft.com/en-us/library/hh212007%28v=vs.103%29.aspx">Observable.Scan(TSource,, +     *      TAccumulate) Method (IObservable(TSource), TAccumulate, Func(TAccumulate, TSource,, +    public static <T, R> Operator<R, T> scan(final R initialValue, final Func2<R, ? super T, R> accumulator) {, +        return new Operator<R, T>() {, +            @Override, +            public Subscriber<T> call(final Subscriber<? super R> observer) {, +                observer.onNext(initialValue);, +                return new Subscriber<T>(observer) {, +                    private R value = initialValue;, +, +                    @Override, +                    public void onNext(T value) {, +                        try {, +                            this.value = accumulator.call(this.value, value);, +                        } catch (Throwable e) {, +                            observer.onError(e);, +                            observer.unsubscribe();, +                        }, +                        observer.onNext(this.value);, +                    }, +, +                    @Override, +                    public void onError(Throwable e) {, +                        observer.onError(e);, +                    }, +, +                    @Override, +                    public void onCompleted() {, +                        observer.onCompleted();, +                    }, +                };, +            }, +        };, +     * Applies an accumulator function over an observable sequence and returns each intermediate, +     * result with the specified source and accumulator., +     * @return An observable sequence whose elements are the result of accumulating the output from, +     *         the list of Observables., +     * @see <a, +     *      href="http://msdn.microsoft.com/en-us/library/hh211665(v=vs.103).aspx">Observable.Scan(TSource), +     *      Method (IObservable(TSource), Func(TSource, TSource, TSource))</a>, +    public static <T> Operator<T, T> scan(final Func2<T, T, T> accumulator) {, +        return new Operator<T, T>() {, +            @Override, +            public Subscriber<T> call(final Subscriber<? super T> observer) {, +                return new Subscriber<T>(observer) {, +                    private boolean first = true;, +                    private T value;, +                    public void onNext(T value) {, +                        if (first) {, +                            this.value = value;, +                            first = false;, +                        else {, +                                this.value = accumulator.call(this.value, value);, +                            } catch (Throwable e) {, +                                observer.onError(e);, +                                observer.unsubscribe();, +                        observer.onNext(this.value);, +                    }, +                };, +            }, +        };, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        return OperationSum.sumIntegers(source);, +        return scan(accumulator).last();, +        return scan(initialValue, accumulator).takeLast(1);, +        return lift(OperationScan.scan(accumulator));, +        return lift(OperationScan.scan(initialValue, accumulator));, +        return OperationSum.sumAtLeastOneDoubles(map(valueExtractor));, +        return OperationSum.sumAtLeastOneFloats(map(valueExtractor));, +        return OperationSum.sumAtLeastOneIntegers(map(valueExtractor));, +        return OperationSum.sumAtLeastOneLongs(map(valueExtractor));, +++ b/rxjava-core/src/main/java/rx/operators/OperationScan.java]