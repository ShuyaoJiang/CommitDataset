[+++ b/language-adaptors/rxjava-groovy/src/examples/groovy/rx/lang/groovy/examples/VideoExample.groovy, +import java.util.concurrent.atomic.AtomicBoolean;, +        AtomicBoolean isRunning = new AtomicBoolean(true); , +                    if(!isRunning.get()) {, +                        // we have received an unsubscribe, +                        break;, +                    }, +                    //println("****** emitting list: " + i), +        return Observable.createSubscription({, +            // see https://github.com/Netflix/RxJava/issues/173 for a possibly simpler way of doing this, +            isRunning.set(false);, +        });, +            // NOTE: This will always execute all 50 even if take(2) asks for only 2, +            //       as it performs synchronously and is not lazy., +                //println("emitting video: " + i), +++ b/language-adaptors/rxjava-groovy/src/examples/groovy/rx/lang/groovy/examples/VideoExample.groovy, +import java.util.concurrent.atomic.AtomicBoolean;, +        AtomicBoolean isRunning = new AtomicBoolean(true); , +                    if(!isRunning.get()) {, +                        // we have received an unsubscribe, +                        break;, +                    }, +                    //println("****** emitting list: " + i), +        return Observable.createSubscription({, +            // see https://github.com/Netflix/RxJava/issues/173 for a possibly simpler way of doing this, +            isRunning.set(false);, +        });, +            // NOTE: This will always execute all 50 even if take(2) asks for only 2, +            //       as it performs synchronously and is not lazy., +                //println("emitting video: " + i), +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +++ b/language-adaptors/rxjava-groovy/src/examples/groovy/rx/lang/groovy/examples/VideoExample.groovy, +import java.util.concurrent.atomic.AtomicBoolean;, +        AtomicBoolean isRunning = new AtomicBoolean(true); , +                    if(!isRunning.get()) {, +                        // we have received an unsubscribe, +                        break;, +                    }, +                    //println("****** emitting list: " + i), +        return Observable.createSubscription({, +            // see https://github.com/Netflix/RxJava/issues/173 for a possibly simpler way of doing this, +            isRunning.set(false);, +        });, +            // NOTE: This will always execute all 50 even if take(2) asks for only 2, +            //       as it performs synchronously and is not lazy., +                //println("emitting video: " + i), +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationConcat;, +import rx.operators.OperationFilter;, +import rx.operators.OperationLast;, +import rx.operators.OperationMap;, +import rx.operators.OperationMaterialize;, +import rx.operators.OperationMerge;, +import rx.operators.OperationMergeDelayError;, +import rx.operators.OperationNext;, +import rx.operators.OperationOnErrorResumeNextViaFunction;, +import rx.operators.OperationOnErrorResumeNextViaObservable;, +import rx.operators.OperationOnErrorReturn;, +import rx.operators.OperationScan;, +import rx.operators.OperationSkip;, +import rx.operators.OperationSynchronize;, +import rx.operators.OperationTake;, +import rx.operators.OperationTakeLast;, +import rx.operators.OperationToObservableFuture;, +import rx.operators.OperationToObservableIterable;, +import rx.operators.OperationToObservableList;, +import rx.operators.OperationToObservableSortedList;, +import rx.operators.OperationZip;, +import rx.util.functions.Action0;, +import rx.util.functions.Action1;, +import rx.util.functions.Func1;, +import rx.util.functions.Func2;, +import rx.util.functions.Func3;, +import rx.util.functions.Func4;, +import rx.util.functions.FuncN;, +import rx.util.functions.FunctionLanguageAdaptor;, +import rx.util.functions.Functions;, +++ b/language-adaptors/rxjava-groovy/src/examples/groovy/rx/lang/groovy/examples/VideoExample.groovy, +import java.util.concurrent.atomic.AtomicBoolean;, +        AtomicBoolean isRunning = new AtomicBoolean(true); , +                    if(!isRunning.get()) {, +                        // we have received an unsubscribe, +                        break;, +                    }, +                    //println("****** emitting list: " + i), +        return Observable.createSubscription({, +            // see https://github.com/Netflix/RxJava/issues/173 for a possibly simpler way of doing this, +            isRunning.set(false);, +        });, +            // NOTE: This will always execute all 50 even if take(2) asks for only 2, +            //       as it performs synchronously and is not lazy., +                //println("emitting video: " + i), +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationConcat;, +import rx.operators.OperationFilter;, +import rx.operators.OperationLast;, +import rx.operators.OperationMap;, +import rx.operators.OperationMaterialize;]