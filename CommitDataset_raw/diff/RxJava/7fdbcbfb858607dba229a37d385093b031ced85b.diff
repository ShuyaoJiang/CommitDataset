[+++ b/src/main/java/rx/Observable.java, +     * Returns an Observable that emits only the first {@code count} items emitted by the source Observable., +     * {@link Observer#onNext onNext} function a maximum of {@code count} times before invoking, +     * @param count, +     * @return an Observable that emits only the first {@code count} items emitted by the source Observable, or, +     *         all of the items from the source Observable if that Observable emits fewer than {@code count} items, +    public final Observable<T> limit(int count) {, +        return take(count);, +     * Returns an Observable that skips the first {@code count} items emitted by the source Observable and emits, +     * @param count, +     *         {@code count} items that the source Observable emits, +    public final Observable<T> skip(int count) {, +        return lift(new OperatorSkip<T>(count));, +     * Returns an Observable that emits only the first {@code count} items emitted by the source Observable. If the source emits fewer than , +     * {@code count} items then all of its items are emitted., +     * {@link Observer#onNext onNext} function a maximum of {@code count} times before invoking, +     * @param count, +     * @return an Observable that emits only the first {@code count} items emitted by the source Observable, or, +     *         all of the items from the source Observable if that Observable emits fewer than {@code count} items, +    public final Observable<T> take(final int count) {, +        return lift(new OperatorTake<T>(count));, +     * Returns an Observable that emits at most the last {@code count} items emitted by the source Observable. If the source emits fewer than , +     * {@code count} items then all of its items are emitted., +     *            the maximum number of items to emit from the end of the sequence of items emitted by the source, +     * @return an Observable that emits at most the last {@code count} items emitted by the source Observable, +     * Returns an Observable that emits a single List containing at most the last {@code count} elements emitted by the, +     * source Observable. If the source emits fewer than {@code count} items then the emitted List will contain all of the source emissions., +     *            the maximum number of items to emit in the list, +     * @return an Observable that emits a single list containing at most the last {@code count} elements emitted by the, +        return lift(new OperatorWindowWithObservable<T, TClosing>(closingSelector));, +++ b/src/main/java/rx/Observable.java, +     * Returns an Observable that emits only the first {@code count} items emitted by the source Observable., +     * {@link Observer#onNext onNext} function a maximum of {@code count} times before invoking, +     * @param count, +     * @return an Observable that emits only the first {@code count} items emitted by the source Observable, or, +     *         all of the items from the source Observable if that Observable emits fewer than {@code count} items, +    public final Observable<T> limit(int count) {, +        return take(count);, +     * Returns an Observable that skips the first {@code count} items emitted by the source Observable and emits, +     * @param count, +     *         {@code count} items that the source Observable emits, +    public final Observable<T> skip(int count) {, +        return lift(new OperatorSkip<T>(count));, +     * Returns an Observable that emits only the first {@code count} items emitted by the source Observable. If the source emits fewer than , +     * {@code count} items then all of its items are emitted., +     * {@link Observer#onNext onNext} function a maximum of {@code count} times before invoking, +     * @param count, +     * @return an Observable that emits only the first {@code count} items emitted by the source Observable, or, +     *         all of the items from the source Observable if that Observable emits fewer than {@code count} items, +    public final Observable<T> take(final int count) {, +        return lift(new OperatorTake<T>(count));, +     * Returns an Observable that emits at most the last {@code count} items emitted by the source Observable. If the source emits fewer than , +     * {@code count} items then all of its items are emitted., +     *            the maximum number of items to emit from the end of the sequence of items emitted by the source, +     * @return an Observable that emits at most the last {@code count} items emitted by the source Observable, +     * Returns an Observable that emits a single List containing at most the last {@code count} elements emitted by the, +     * source Observable. If the source emits fewer than {@code count} items then the emitted List will contain all of the source emissions., +     *            the maximum number of items to emit in the list, +     * @return an Observable that emits a single list containing at most the last {@code count} elements emitted by the, +        return lift(new OperatorWindowWithObservable<T, TClosing>(closingSelector));, +++ b/src/main/java/rx/internal/operators/OperatorTakeLast.java, + * Returns an Observable that emits the at most the last <code>count</code> items emitted by the source Observable., +            throw new IndexOutOfBoundsException("count cannot be negative");, +++ b/src/main/java/rx/Observable.java, +     * Returns an Observable that emits only the first {@code count} items emitted by the source Observable., +     * {@link Observer#onNext onNext} function a maximum of {@code count} times before invoking, +     * @param count, +     * @return an Observable that emits only the first {@code count} items emitted by the source Observable, or, +     *         all of the items from the source Observable if that Observable emits fewer than {@code count} items, +    public final Observable<T> limit(int count) {, +        return take(count);, +     * Returns an Observable that skips the first {@code count} items emitted by the source Observable and emits, +     * @param count, +     *         {@code count} items that the source Observable emits, +    public final Observable<T> skip(int count) {, +        return lift(new OperatorSkip<T>(count));, +     * Returns an Observable that emits only the first {@code count} items emitted by the source Observable. If the source emits fewer than , +     * {@code count} items then all of its items are emitted., +     * {@link Observer#onNext onNext} function a maximum of {@code count} times before invoking, +     * @param count, +     * @return an Observable that emits only the first {@code count} items emitted by the source Observable, or, +     *         all of the items from the source Observable if that Observable emits fewer than {@code count} items, +    public final Observable<T> take(final int count) {, +        return lift(new OperatorTake<T>(count));, +     * Returns an Observable that emits at most the last {@code count} items emitted by the source Observable. If the source emits fewer than , +     * {@code count} items then all of its items are emitted., +     *            the maximum number of items to emit from the end of the sequence of items emitted by the source, +     * @return an Observable that emits at most the last {@code count} items emitted by the source Observable, +     * Returns an Observable that emits a single List containing at most the last {@code count} elements emitted by the, +     * source Observable. If the source emits fewer than {@code count} items then the emitted List will contain all of the source emissions., +     *            the maximum number of items to emit in the list, +     * @return an Observable that emits a single list containing at most the last {@code count} elements emitted by the, +        return lift(new OperatorWindowWithObservable<T, TClosing>(closingSelector));, +++ b/src/main/java/rx/internal/operators/OperatorTakeLast.java, + * Returns an Observable that emits the at most the last <code>count</code> items emitted by the source Observable., +            throw new IndexOutOfBoundsException("count cannot be negative");, +++ b/src/main/java/rx/internal/operators/OperatorWindowWithObservable.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;]