[+++ b/rxjava-core/src/main/java/rx/internal/operators/BlockingOperatorNext.java, +import java.util.concurrent.atomic.AtomicBoolean;, +                return new NextIterator<T>(items, nextObserver);, +        private final NextObserver<T> observer;, +        private final Observable<? extends T> items;, +        private boolean started = false;, +        private NextIterator(Observable<? extends T> items, NextObserver<T> observer) {, +            this.items = items;, +                if (!started) {, +                    started = true;, +                    // if not started, start now, +                    observer.setWaiting(1);, +                    items.materialize().subscribe(observer);, +                }, +                , +++ b/rxjava-core/src/main/java/rx/internal/operators/BlockingOperatorNext.java, +import java.util.concurrent.atomic.AtomicBoolean;, +                return new NextIterator<T>(items, nextObserver);, +        private final NextObserver<T> observer;, +        private final Observable<? extends T> items;, +        private boolean started = false;, +        private NextIterator(Observable<? extends T> items, NextObserver<T> observer) {, +            this.items = items;, +                if (!started) {, +                    started = true;, +                    // if not started, start now, +                    observer.setWaiting(1);, +                    items.materialize().subscribe(observer);, +                }, +                , +++ b/rxjava-core/src/test/java/rx/internal/operators/BlockingOperatorNextTest.java, +import rx.subjects.BehaviorSubject;, +        Observable<Long> o = Observable.interval(10, TimeUnit.MILLISECONDS);, +        PublishSubject<Void> terminal = PublishSubject.create();, +        BlockingObservable<Long> source = o.takeUntil(terminal).toBlocking();, +            for (long i = 0; i < 10; i++) {, +                Assert.assertEquals(j + "th iteration next", Long.valueOf(i), it.next());, +            terminal.onNext(null);, +        }, +    @Test, +    public void testSynchronousNext() {, +        assertEquals(1, BehaviorSubject.create(1).take(1).toBlocking().single().intValue());, +        assertEquals(2, BehaviorSubject.create(2).toBlocking().toIterable().iterator().next().intValue());, +        assertEquals(3, BehaviorSubject.create(3).toBlocking().next().iterator().next().intValue());]