[+++ b/build.gradle, +    repositories {, +        mavenLocal(), +        mavenCentral() // maven { url 'http://jcenter.bintray.com' }, +    }, +    repositories { , +        mavenLocal(), +        mavenCentral() // maven { url: 'http://jcenter.bintray.com' }, +    }, +++ b/build.gradle, +    repositories {, +        mavenLocal(), +        mavenCentral() // maven { url 'http://jcenter.bintray.com' }, +    }, +    repositories { , +        mavenLocal(), +        mavenCentral() // maven { url: 'http://jcenter.bintray.com' }, +    }, +++ b/codequality/checkstyle.xml, +++ b/build.gradle, +    repositories {, +        mavenLocal(), +        mavenCentral() // maven { url 'http://jcenter.bintray.com' }, +    }, +    repositories { , +        mavenLocal(), +        mavenCentral() // maven { url: 'http://jcenter.bintray.com' }, +    }, +++ b/codequality/checkstyle.xml, +++ b/gradle/buildscript.gradle, +    repositories { maven { url 'http://dl.bintray.com/content/netflixoss/external-gradle-plugins/' } } // For gradle-release, +    classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.6.1', +    classpath 'gradle-release:gradle-release:1.1.5', +    classpath 'org.ajoberstar:gradle-git:0.5.0', +++ b/build.gradle, +    repositories {, +        mavenLocal(), +        mavenCentral() // maven { url 'http://jcenter.bintray.com' }, +    }, +    repositories { , +        mavenLocal(), +        mavenCentral() // maven { url: 'http://jcenter.bintray.com' }, +    }, +++ b/codequality/checkstyle.xml, +++ b/gradle/buildscript.gradle, +    repositories { maven { url 'http://dl.bintray.com/content/netflixoss/external-gradle-plugins/' } } // For gradle-release, +    classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.6.1', +    classpath 'gradle-release:gradle-release:1.1.5', +    classpath 'org.ajoberstar:gradle-git:0.5.0', +++ b/gradle/check.gradle, +    ignoreFailures = true , +findbugs {, +    ignoreFailures = true, +}, +++ b/build.gradle, +    repositories {, +        mavenLocal(), +        mavenCentral() // maven { url 'http://jcenter.bintray.com' }, +    }, +    repositories { , +        mavenLocal(), +        mavenCentral() // maven { url: 'http://jcenter.bintray.com' }, +    }, +++ b/codequality/checkstyle.xml, +++ b/gradle/buildscript.gradle, +    repositories { maven { url 'http://dl.bintray.com/content/netflixoss/external-gradle-plugins/' } } // For gradle-release, +    classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.6.1', +    classpath 'gradle-release:gradle-release:1.1.5', +    classpath 'org.ajoberstar:gradle-git:0.5.0', +++ b/gradle/check.gradle, +    ignoreFailures = true , +findbugs {, +    ignoreFailures = true, +}, +++ b/gradle/convention.gradle, +// GRADLE-2087 workaround, perform after java plugin, +status = project.hasProperty('preferredStatus')?project.preferredStatus:(version.contains('SNAPSHOT')?'snapshot':'release'), +    // Restore status after Java plugin, +apply plugin: 'github-pages' // Used to create publishGhPages task, +, +def docTasks = [:], +[Javadoc,ScalaDoc,Groovydoc].each{ Class docClass ->, +    def allSources = allprojects.tasks*.withType(docClass).flatten()*.source , +    if (allSources) {, +        def shortName = docClass.simpleName.toLowerCase(), +        def docTask = task "aggregate${shortName.capitalize()}"(type: docClass, description: "Aggregate subproject ${shortName}s") {, +            source = allSources, +            destinationDir = file("${project.buildDir}/docs/${shortName}"), +            doFirst {, +                def classpaths = allprojects.findAll { it.plugins.hasPlugin(JavaPlugin) }.collect { it.sourceSets.main.compileClasspath }, +                classpath = files(classpaths), +            }, +        }, +        docTasks[shortName] = docTask, +        processGhPages.dependsOn(docTask), +    }, +}, +, +githubPages {, +    repoUri = "git@github.com:Netflix/${rootProject.githubProjectName}.git"]