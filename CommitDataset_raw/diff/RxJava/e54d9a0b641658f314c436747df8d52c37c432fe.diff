[+++ b/src/main/java/rx/exceptions/OnErrorThrowable.java, +                return ((Enum) value).name();, +++ b/src/main/java/rx/exceptions/OnErrorThrowable.java, +                return ((Enum) value).name();, +++ b/src/main/java/rx/functions/Actions.java, +import rx.Observer;, +, +++ b/src/main/java/rx/exceptions/OnErrorThrowable.java, +                return ((Enum) value).name();, +++ b/src/main/java/rx/functions/Actions.java, +import rx.Observer;, +, +++ b/src/main/java/rx/internal/operators/BlockingOperatorNext.java, +++ b/src/main/java/rx/exceptions/OnErrorThrowable.java, +                return ((Enum) value).name();, +++ b/src/main/java/rx/functions/Actions.java, +import rx.Observer;, +, +++ b/src/main/java/rx/internal/operators/BlockingOperatorNext.java, +++ b/src/main/java/rx/internal/operators/OnSubscribeCache.java, +import rx.observers.Subscribers;, +++ b/src/main/java/rx/exceptions/OnErrorThrowable.java, +                return ((Enum) value).name();, +++ b/src/main/java/rx/functions/Actions.java, +import rx.Observer;, +, +++ b/src/main/java/rx/internal/operators/BlockingOperatorNext.java, +++ b/src/main/java/rx/internal/operators/OnSubscribeCache.java, +import rx.observers.Subscribers;, +++ b/src/main/java/rx/internal/operators/OperatorGroupBy.java, +import java.util.Map;, +import java.util.concurrent.atomic.AtomicInteger;, +++ b/src/main/java/rx/exceptions/OnErrorThrowable.java, +                return ((Enum) value).name();, +++ b/src/main/java/rx/functions/Actions.java, +import rx.Observer;, +, +++ b/src/main/java/rx/internal/operators/BlockingOperatorNext.java, +++ b/src/main/java/rx/internal/operators/OnSubscribeCache.java, +import rx.observers.Subscribers;, +++ b/src/main/java/rx/internal/operators/OperatorGroupBy.java, +import java.util.Map;, +import java.util.concurrent.atomic.AtomicInteger;, +++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +import java.util.concurrent.atomic.*;, +import rx.*;, +import rx.exceptions.*;, +import rx.internal.util.*;, +        private volatile RxRingBuffer scalarValueQueue = null;, +                    getOrCreateScalarValueQueue().onNext(value);, +                getOrCreateScalarValueQueue().onNext(t.get());, +        private RxRingBuffer getOrCreateScalarValueQueue() {, +            RxRingBuffer svq = scalarValueQueue;, +            if (svq == null) {, +                svq = RxRingBuffer.getSpmcInstance();, +                scalarValueQueue = svq;, +            return svq;, +            RxRingBuffer svq = scalarValueQueue;, +            if (svq != null) {, +                    while ((o = svq.poll()) != null) {, +                        Object o = svq.poll();, +                if (wip == 0) {, +            boolean moreToDrain = true;, +            while (moreToDrain) {, +                synchronized (this) {, +                    missedEmitting = 0;, +                }, +                drainScalarValueQueue();, +                drainChildrenQueues();, +                synchronized (this) {, +                    moreToDrain = missedEmitting > 0;, +                }, +            }, +            RxRingBuffer svq = scalarValueQueue;, +            if (svq == null || svq.isEmpty()) {, +        }, +++ b/src/main/java/rx/exceptions/OnErrorThrowable.java, +                return ((Enum) value).name();, +++ b/src/main/java/rx/functions/Actions.java, +import rx.Observer;, +, +++ b/src/main/java/rx/internal/operators/BlockingOperatorNext.java, +++ b/src/main/java/rx/internal/operators/OnSubscribeCache.java, +import rx.observers.Subscribers;, +++ b/src/main/java/rx/internal/operators/OperatorGroupBy.java, +import java.util.Map;, +import java.util.concurrent.atomic.AtomicInteger;, +++ b/src/main/java/rx/internal/operators/OperatorMerge.java, +import java.util.concurrent.atomic.*;, +import rx.*;, +import rx.exceptions.*;, +import rx.internal.util.*;, +        private volatile RxRingBuffer scalarValueQueue = null;, +                    getOrCreateScalarValueQueue().onNext(value);, +                getOrCreateScalarValueQueue().onNext(t.get());, +        private RxRingBuffer getOrCreateScalarValueQueue() {, +            RxRingBuffer svq = scalarValueQueue;, +            if (svq == null) {, +                svq = RxRingBuffer.getSpmcInstance();, +                scalarValueQueue = svq;]