[+++ /dev/null, +++ /dev/null, +++ b/src/main/java/io/reactivex/internal/subscribers/flowable/EmptySubscriber.java, + * A subscriber that ignores all events., +    INSTANCE(true, false),, +    INSTANCE_NOERROR(false, false),, +    /** Empty instance that cancels subscriptions. */, +    CANCELLED(true, true);, +    private final boolean reportError;, +    private final boolean cancelSubscription;, +    EmptySubscriber(boolean reportError, boolean cancelSubscription) {, +        this.cancelSubscription = cancelSubscription;, +        if (cancelSubscription) {, +            s.cancel();, +        }, +++ /dev/null, +++ b/src/main/java/io/reactivex/internal/subscribers/flowable/EmptySubscriber.java, + * A subscriber that ignores all events., +    INSTANCE(true, false),, +    INSTANCE_NOERROR(false, false),, +    /** Empty instance that cancels subscriptions. */, +    CANCELLED(true, true);, +    private final boolean reportError;, +    private final boolean cancelSubscription;, +    EmptySubscriber(boolean reportError, boolean cancelSubscription) {, +        this.cancelSubscription = cancelSubscription;, +        if (cancelSubscription) {, +            s.cancel();, +        }, +++ b/src/main/java/io/reactivex/subscribers/Subscribers.java, +        return (Subscriber<T>)EmptySubscriber.CANCELLED;, +++ /dev/null, +++ b/src/main/java/io/reactivex/internal/subscribers/flowable/EmptySubscriber.java, + * A subscriber that ignores all events., +    INSTANCE(true, false),, +    INSTANCE_NOERROR(false, false),, +    /** Empty instance that cancels subscriptions. */, +    CANCELLED(true, true);, +    private final boolean reportError;, +    private final boolean cancelSubscription;, +    EmptySubscriber(boolean reportError, boolean cancelSubscription) {, +        this.cancelSubscription = cancelSubscription;, +        if (cancelSubscription) {, +            s.cancel();, +        }, +++ b/src/main/java/io/reactivex/subscribers/Subscribers.java, +        return (Subscriber<T>)EmptySubscriber.CANCELLED;, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableRefCountTest.java, +import io.reactivex.subscribers.*;, +        Subscriber<Integer> done = Subscribers.cancelled();, +        Subscriber<Integer> done = Subscribers.cancelled();]