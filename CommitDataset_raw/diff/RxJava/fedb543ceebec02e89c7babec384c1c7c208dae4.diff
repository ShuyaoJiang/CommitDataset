[+++ b/src/main/java/io/reactivex/Flowable.java, +    @SuppressWarnings({ "unchecked", "cast" }), +        return fromFuture((Future<T>)future, timeout, unit).subscribeOn(scheduler);, +    @SuppressWarnings({ "cast", "unchecked" }), +        return fromFuture((Future<T>)future).subscribeOn(scheduler);, +    @SuppressWarnings({ "rawtypes", "unchecked", "cast" }), +        return fromPublisher(sources).toList().flatMapPublisher((Function)FlowableInternalHelper.<T, R>zipIterable(zipper));, +++ b/src/main/java/io/reactivex/Flowable.java, +    @SuppressWarnings({ "unchecked", "cast" }), +        return fromFuture((Future<T>)future, timeout, unit).subscribeOn(scheduler);, +    @SuppressWarnings({ "cast", "unchecked" }), +        return fromFuture((Future<T>)future).subscribeOn(scheduler);, +    @SuppressWarnings({ "rawtypes", "unchecked", "cast" }), +        return fromPublisher(sources).toList().flatMapPublisher((Function)FlowableInternalHelper.<T, R>zipIterable(zipper));, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableGroupByTest.java, +        .groupBy(Functions.<Integer>identity(), true), +        .flatMap(new Function<GroupedFlowable<Integer, Integer>, Flowable<Integer>>() {, +            public Flowable<Integer> apply(GroupedFlowable<Integer, Integer> g) throws Exception {, +        .groupBy(Functions.<Integer>identity(), Functions.<Integer>identity(), true), +        .flatMap(new Function<GroupedFlowable<Integer, Integer>, Flowable<Integer>>() {, +            public Flowable<Integer> apply(GroupedFlowable<Integer, Integer> g) throws Exception {, +++ b/src/main/java/io/reactivex/Flowable.java, +    @SuppressWarnings({ "unchecked", "cast" }), +        return fromFuture((Future<T>)future, timeout, unit).subscribeOn(scheduler);, +    @SuppressWarnings({ "cast", "unchecked" }), +        return fromFuture((Future<T>)future).subscribeOn(scheduler);, +    @SuppressWarnings({ "rawtypes", "unchecked", "cast" }), +        return fromPublisher(sources).toList().flatMapPublisher((Function)FlowableInternalHelper.<T, R>zipIterable(zipper));, +++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableGroupByTest.java, +        .groupBy(Functions.<Integer>identity(), true), +        .flatMap(new Function<GroupedFlowable<Integer, Integer>, Flowable<Integer>>() {, +            public Flowable<Integer> apply(GroupedFlowable<Integer, Integer> g) throws Exception {, +        .groupBy(Functions.<Integer>identity(), Functions.<Integer>identity(), true), +        .flatMap(new Function<GroupedFlowable<Integer, Integer>, Flowable<Integer>>() {, +            public Flowable<Integer> apply(GroupedFlowable<Integer, Integer> g) throws Exception {, +++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableGroupByTest.java, +        .groupBy(Functions.<Integer>identity(), true), +        .flatMap(new Function<GroupedObservable<Integer, Integer>, ObservableSource<Integer>>() {, +            public ObservableSource<Integer> apply(GroupedObservable<Integer, Integer> g) throws Exception {, +        .groupBy(Functions.<Integer>identity(), Functions.<Integer>identity(), true), +        .flatMap(new Function<GroupedObservable<Integer, Integer>, ObservableSource<Integer>>() {, +            public ObservableSource<Integer> apply(GroupedObservable<Integer, Integer> g) throws Exception {]