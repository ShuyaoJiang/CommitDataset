[+++ b/rxjava-core/src/main/java/rx/operators/OperationNext.java, +import java.util.NoSuchElementException;, +        private boolean isNextConsumed = true;, +                // the iterator has reached the end., +            if(isNextConsumed == false) {, +                // next has not been used yet., +                return true;, +            }, +            return moveToNext();, +        }, +, +        private boolean moveToNext() {, +                    isNextConsumed = false;, +                // hasNext() always return false., +                if(nextNotification.isOnError()) {, +                }, +                throw new IllegalStateException("Should not reach here");, +            if(hasNext()) {, +                isNextConsumed = true;, +            else {, +                throw new NoSuchElementException("No more elements");, +            }, +        }, +            try {, +                it.next();, +                fail("At the end of an iterator should throw a NoSuchElementException");, +            }, +            catch(NoSuchElementException e){, +            }, +            // If the observable is completed, hasNext always returns false and next always throw a NoSuchElementException., +            try {, +                it.next();, +                fail("At the end of an iterator should throw a NoSuchElementException");, +            }, +            catch(NoSuchElementException e){, +            }, +            // After the observable fails, hasNext always returns false and next always throw a NoSuchElementException., +            try {, +                it.next();, +                fail("At the end of an iterator should throw a NoSuchElementException");, +            }, +            catch(NoSuchElementException e){, +            }, +           try {, +               it.next();, +               fail("At the end of an iterator should throw a NoSuchElementException");, +           }, +           catch(NoSuchElementException e){, +           }, +           // If the observable is completed, hasNext always returns false and next always throw a NoSuchElementException., +           try {, +               it.next();, +               fail("At the end of an iterator should throw a NoSuchElementException");, +           }, +           catch(NoSuchElementException e){, +           }, +            // After the observable fails, hasNext always returns false and next always throw a NoSuchElementException., +            try {, +                it.next();, +                fail("At the end of an iterator should throw a NoSuchElementException");, +            }, +            catch(NoSuchElementException e){, +            }, +            // After the observable fails, hasNext always returns false and next always throw a NoSuchElementException., +            try {, +                it.next();, +                fail("At the end of an iterator should throw a NoSuchElementException");, +            }, +            catch(NoSuchElementException e){, +            }, +        }, +, +        @Test, +        public void testNextWithOnlyUsingNextMethod() {, +            Subject<String, String> obs = PublishSubject.create();, +            Iterator<String> it = next(obs).iterator();, +            fireOnNextInNewThread(obs, "one");, +            assertEquals("one", it.next());, +, +            fireOnNextInNewThread(obs, "two");, +            assertEquals("two", it.next());, +, +            obs.onCompleted();, +            try {, +                it.next();, +                fail("At the end of an iterator should throw a NoSuchElementException");, +            }, +            catch(NoSuchElementException e){, +            }, +        }, +, +        @Test, +        public void testNextWithCallingHasNextMultipleTimes() {, +            Subject<String, String> obs = PublishSubject.create();, +            Iterator<String> it = next(obs).iterator();, +            fireOnNextInNewThread(obs, "one");, +            assertTrue(it.hasNext());, +            assertTrue(it.hasNext());, +            assertTrue(it.hasNext());, +            assertTrue(it.hasNext());]