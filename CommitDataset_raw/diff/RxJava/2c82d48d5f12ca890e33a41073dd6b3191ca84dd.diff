[+++ b/rxjava-core/src/main/java/rx/subjects/SubjectSubscriptionManager.java, +                        if (subscription.isUnsubscribed()) {, +                            addedObserver = false;, +                            break;, +                        }, +            } else, +            if (this.observers.length == 1) {, +                if (this.subscriptions[0].equals(s)) {, +                    return createNewWith(EMPTY_S, EMPTY_O);, +                return this;, +            }, +            int n = this.observers.length - 1;, +            Subscription[] newsubscriptions = new Subscription[n];, +            SubjectObserver[] newobservers = new SubjectObserver[n];, +                if (!s0.equals(s)) {, +                Subscription[] newsubscriptions2 = new Subscription[copied];, +                System.arraycopy(newsubscriptions, 0, newsubscriptions2, 0, copied);, +                , +                SubjectObserver[] newobservers2 = new SubjectObserver[copied];, +                System.arraycopy(newobservers, 0, newobservers2, 0, copied);, +, +                return createNewWith(newsubscriptions2, newobservers2);, +++ b/rxjava-core/src/main/java/rx/subjects/SubjectSubscriptionManager.java, +                        if (subscription.isUnsubscribed()) {, +                            addedObserver = false;, +                            break;, +                        }, +            } else, +            if (this.observers.length == 1) {, +                if (this.subscriptions[0].equals(s)) {, +                    return createNewWith(EMPTY_S, EMPTY_O);, +                return this;, +            }, +            int n = this.observers.length - 1;, +            Subscription[] newsubscriptions = new Subscription[n];, +            SubjectObserver[] newobservers = new SubjectObserver[n];, +                if (!s0.equals(s)) {, +                Subscription[] newsubscriptions2 = new Subscription[copied];, +                System.arraycopy(newsubscriptions, 0, newsubscriptions2, 0, copied);, +                , +                SubjectObserver[] newobservers2 = new SubjectObserver[copied];, +                System.arraycopy(newobservers, 0, newobservers2, 0, copied);, +, +                return createNewWith(newsubscriptions2, newobservers2);, +++ b/rxjava-core/src/test/java/rx/subjects/BehaviorSubjectTest.java, +import rx.Observable;, +import rx.util.functions.Func1;, +    @Test(timeout = 1000), +    public void testUnsubscriptionCase() {, +        BehaviorSubject<String> src = BehaviorSubject.create((String)null);, +        , +        for (int i = 0; i < 10; i++) {, +            @SuppressWarnings("unchecked"), +            final Observer<Object> o = mock(Observer.class);, +            InOrder inOrder = inOrder(o);, +            String v = "" + i;, +            src.onNext(v);, +            System.out.printf("Turn: %d%n", i);, +            src.first(), +                .flatMap(new Func1<String, Observable<String>>() {, +, +                    @Override, +                    public Observable<String> call(String t1) {, +                        return Observable.from(t1 + ", " + t1);, +                    }, +                }), +                .subscribe(new Observer<String>() {, +                    @Override, +                    public void onNext(String t) {, +                        o.onNext(t);, +                    }, +, +                    @Override, +                    public void onError(Throwable e) {, +                        o.onError(e);, +                    }, +, +                    @Override, +                    public void onCompleted() {, +                        o.onCompleted();, +                    }, +                });, +            inOrder.verify(o).onNext(v + ", " + v);, +            inOrder.verify(o).onCompleted();, +            verify(o, never()).onError(any(Throwable.class));, +        }, +    }, +++ b/rxjava-core/src/main/java/rx/subjects/SubjectSubscriptionManager.java, +                        if (subscription.isUnsubscribed()) {, +                            addedObserver = false;, +                            break;, +                        }, +            } else, +            if (this.observers.length == 1) {, +                if (this.subscriptions[0].equals(s)) {, +                    return createNewWith(EMPTY_S, EMPTY_O);, +                return this;, +            }, +            int n = this.observers.length - 1;, +            Subscription[] newsubscriptions = new Subscription[n];]