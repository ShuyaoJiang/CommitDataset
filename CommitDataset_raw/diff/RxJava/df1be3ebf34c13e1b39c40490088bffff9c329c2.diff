[+++ b/src/main/java/io/reactivex/Observable.java, +    public final Observable<List<T>> buffer(long timespan, long timeskip, TimeUnit unit) {, +        return buffer(timespan, timeskip, unit, Schedulers.computation(), ArrayList::new);, +    }, +    , +    public final Observable<List<T>> buffer(long timespan, long timeskip, TimeUnit unit, Scheduler scheduler) {, +        return buffer(timespan, timeskip, unit, scheduler, ArrayList::new);, +    }, +    , +    public final <B> Observable<List<T>> buffer(Supplier<? extends Observable<B>> boundarySupplier) {, +        Objects.requireNonNull(boundarySupplier);, +        // TODO implement, +        throw new UnsupportedOperationException();, +    }, +, +++ b/src/main/java/io/reactivex/Observable.java, +    public final Observable<List<T>> buffer(long timespan, long timeskip, TimeUnit unit) {, +        return buffer(timespan, timeskip, unit, Schedulers.computation(), ArrayList::new);, +    }, +    , +    public final Observable<List<T>> buffer(long timespan, long timeskip, TimeUnit unit, Scheduler scheduler) {, +        return buffer(timespan, timeskip, unit, scheduler, ArrayList::new);, +    }, +    , +    public final <B> Observable<List<T>> buffer(Supplier<? extends Observable<B>> boundarySupplier) {, +        Objects.requireNonNull(boundarySupplier);, +        // TODO implement, +        throw new UnsupportedOperationException();, +    }, +, +++ b/src/main/java/io/reactivex/internal/operators/OperatorBuffer.java, +        return new BufferSkipSubscriber<>(t, count, skip, bufferSupplier);, +            if (b != null && !b.isEmpty()) {, +                if (count <= b.size()) {, +++ b/src/main/java/io/reactivex/Observable.java, +    public final Observable<List<T>> buffer(long timespan, long timeskip, TimeUnit unit) {, +        return buffer(timespan, timeskip, unit, Schedulers.computation(), ArrayList::new);, +    }, +    , +    public final Observable<List<T>> buffer(long timespan, long timeskip, TimeUnit unit, Scheduler scheduler) {, +        return buffer(timespan, timeskip, unit, scheduler, ArrayList::new);, +    }, +    , +    public final <B> Observable<List<T>> buffer(Supplier<? extends Observable<B>> boundarySupplier) {, +        Objects.requireNonNull(boundarySupplier);, +        // TODO implement, +        throw new UnsupportedOperationException();, +    }, +, +++ b/src/main/java/io/reactivex/internal/operators/OperatorBuffer.java, +        return new BufferSkipSubscriber<>(t, count, skip, bufferSupplier);, +            if (b != null && !b.isEmpty()) {, +                if (count <= b.size()) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorBufferBoundary.java, +            if (WINDOWS.decrementAndGet(this) == 0) {, +                complete();, +            }, +        }, +        , +        void complete() {, +                if (WINDOWS.decrementAndGet(this) == 0) {, +                    complete();, +                if (WINDOWS.decrementAndGet(this) == 0) {, +                    complete();, +++ b/src/main/java/io/reactivex/Observable.java, +    public final Observable<List<T>> buffer(long timespan, long timeskip, TimeUnit unit) {, +        return buffer(timespan, timeskip, unit, Schedulers.computation(), ArrayList::new);, +    }, +    , +    public final Observable<List<T>> buffer(long timespan, long timeskip, TimeUnit unit, Scheduler scheduler) {, +        return buffer(timespan, timeskip, unit, scheduler, ArrayList::new);, +    }, +    , +    public final <B> Observable<List<T>> buffer(Supplier<? extends Observable<B>> boundarySupplier) {, +        Objects.requireNonNull(boundarySupplier);, +        // TODO implement, +        throw new UnsupportedOperationException();, +    }, +, +++ b/src/main/java/io/reactivex/internal/operators/OperatorBuffer.java, +        return new BufferSkipSubscriber<>(t, count, skip, bufferSupplier);, +            if (b != null && !b.isEmpty()) {, +                if (count <= b.size()) {, +++ b/src/main/java/io/reactivex/internal/operators/OperatorBufferBoundary.java, +            if (WINDOWS.decrementAndGet(this) == 0) {, +                complete();, +            }, +        }, +        , +        void complete() {, +                if (WINDOWS.decrementAndGet(this) == 0) {, +                    complete();, +                if (WINDOWS.decrementAndGet(this) == 0) {, +                    complete();, +++ b/src/main/java/io/reactivex/internal/operators/OperatorBufferTimed.java, +            buffer = b;, +            , +                if (!TIMER.compareAndSet(this, null, d)) {, +            , +            w.schedule(() -> {]