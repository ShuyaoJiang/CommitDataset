[+++ b/rxjava-core/src/main/java/rx/operators/OperatorGroupBy.java, +/**, + * Copyright 2013 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +import java.util.concurrent.ConcurrentHashMap;, +        return new GroupBy<K, R>(keyval);, +    public static <K, T> Func1<Observer<GroupedObservable<K, T>>, Subscription> groupBy(Observable<T> source, final Func1<T, K> keySelector) {, +        return groupBy(source, keySelector, Functions.<T>identity());, +    }, +    private static class GroupBy<K, V> implements Func1<Observer<GroupedObservable<K, V>>, Subscription> {, +        private final Observable<KeyValue<K, V>> source;, +        private final ConcurrentHashMap<K, Boolean> keys = new ConcurrentHashMap<K, Boolean>();, +, +        private GroupBy(Observable<KeyValue<K, V>> source) {, +        public Subscription call(final Observer<GroupedObservable<K, V>> observer) {, +            return source.subscribe(new Observer<KeyValue<K, V>>() {, +                public void onNext(final KeyValue<K, V> args) {, +                    K key = args.key;, +                    boolean newGroup = keys.putIfAbsent(key, true) == null;, +                    if (newGroup) {, +                        observer.onNext(buildObservableFor(source, key));, +    private static <K, R> GroupedObservable<K, R> buildObservableFor(Observable<KeyValue<K, R>> source, final K key) {, +                return key.equals(pair.key);, +        return new GroupedObservable<K, R>(key, observable);, +            Observable<GroupedObservable<Integer, String>> grouped = Observable.create(groupBy(source, length));]