[+++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/core.clj, +                            merge next nth partition-all reduce reductions, +(defn ^Observable partition-all, +  "Returns an Observable of Observables of n items each, at offsets step, +  apart. If step is not supplied, defaults to n, i.e. the partitions, +  do not overlap. May include partitions with fewer than n items at the end., +, +  See:, +    clojure.core/partition-all, +    rx.Observable/window, +  ", +  ([n ^Observable xs] (.window xs (int n))), +  ([n step ^Observable xs] (.window xs (int n) (int step)))), +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/core.clj, +                            merge next nth partition-all reduce reductions, +(defn ^Observable partition-all, +  "Returns an Observable of Observables of n items each, at offsets step, +  apart. If step is not supplied, defaults to n, i.e. the partitions, +  do not overlap. May include partitions with fewer than n items at the end., +, +  See:, +    clojure.core/partition-all, +    rx.Observable/window, +  ", +  ([n ^Observable xs] (.window xs (int n))), +  ([n step ^Observable xs] (.window xs (int n) (int step)))), +++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/core_test.clj, +(deftest test-partition-all, +  (are [input-size part-size step] (= (->> (range input-size), +                                           (partition-all part-size step)), +                                      (->> (range input-size), +                                           (rx/seq->o), +                                           (rx/partition-all part-size step), +                                           (rx/map #(rx/into [] %)), +                                           (rx/concat*), +                                           (b/into []))), +       0 1 1, +       10 2 2, +       10 3 2, +       15 30 4), +, +  (are [input-size part-size] (= (->> (range input-size), +                                      (partition-all part-size)), +                                 (->> (range input-size), +                                      (rx/seq->o), +                                      (rx/partition-all part-size), +                                      (rx/map #(rx/into [] %)), +                                      (rx/concat*), +                                      (b/into []))), +       0 1, +       10 2, +       10 3, +       15 30)), +]