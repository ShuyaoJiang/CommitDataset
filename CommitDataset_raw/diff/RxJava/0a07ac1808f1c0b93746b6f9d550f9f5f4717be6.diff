[+++ b/src/main/java/io/reactivex/Flowable.java, +     * <em>Important note:</em> This Publisher is blocking on the thread it gets subscribed on; you cannot cancel it., +     * <em>Important note:</em> This Publisher is blocking on the thread it gets subscribed on; you cannot cancel it., +     * <em>Important note:</em> This Publisher is blocking; you cannot cancel it., +     * If the outer Publisher signals an onError, the inner Publisher is cancelled and the error delivered in-sequence., +     * If the outer Publisher signals an onError, the inner Publisher is cancelled and the error delivered in-sequence., +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancel the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * subscribe/cancel behavior of all the {@link Subscriber}s., +     * <em>Note:</em> You sacrifice the ability to cancel the origin when you use the {@code cache}, +     * subscribe/cancel behavior of all the {@link Subscriber}s., +     * <em>Note:</em> You sacrifice the ability to cancel the origin when you use the {@code cache}, +     * Calls the cancel {@code Action} if the downstream cancels the sequence., +     * If the action throws a runtime exception, that exception is rethrown by the {@code onCancel()} call,, +     *  <dd>{@code doOnCancel} does not interact with backpressure requests or value delivery; backpressure, +     * items, and cancelling the source., +     * items, and cancelling the source., +     * items, and cancelling the source., +     * items, cancelling the source, and notifying the producer with {@code onOverflow}., +     * items, cancelling the source, and notifying the producer with {@code onOverflow}., +     *     cancelling the source, and notifying the producer with {@code onOverflow}. </li>, +     * When all subscribers have cancelled it will cancel the source {@link Publisher}., +     * If the upstream Publisher signals an onError, the inner Publisher is cancelled and the error delivered in-sequence., +     * If the upstream Publisher signals an onError, the inner Publisher is cancelled and the error delivered in-sequence., +     * you do not have the option to cancel., +     * you do not have the option to cancel., +     * you do not have the option to cancel., +     * Modifies the source Publisher so that subscribers will cancel it on a specified, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +++ b/src/main/java/io/reactivex/Flowable.java, +     * <em>Important note:</em> This Publisher is blocking on the thread it gets subscribed on; you cannot cancel it., +     * <em>Important note:</em> This Publisher is blocking on the thread it gets subscribed on; you cannot cancel it., +     * <em>Important note:</em> This Publisher is blocking; you cannot cancel it., +     * If the outer Publisher signals an onError, the inner Publisher is cancelled and the error delivered in-sequence., +     * If the outer Publisher signals an onError, the inner Publisher is cancelled and the error delivered in-sequence., +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancel the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * one of the sources is shorter than the rest while cancelling the other sources. Therefore, it, +     * be sending further values and it will cancel B immediately. For example:, +     * subscribe/cancel behavior of all the {@link Subscriber}s., +     * <em>Note:</em> You sacrifice the ability to cancel the origin when you use the {@code cache}, +     * subscribe/cancel behavior of all the {@link Subscriber}s., +     * <em>Note:</em> You sacrifice the ability to cancel the origin when you use the {@code cache}, +     * Calls the cancel {@code Action} if the downstream cancels the sequence., +     * If the action throws a runtime exception, that exception is rethrown by the {@code onCancel()} call,]