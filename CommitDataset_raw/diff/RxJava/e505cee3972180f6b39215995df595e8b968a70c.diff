[+++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/core.clj, +(defn serialize, +  "Serialize execution., +    rx.Observable/serialize, +  (.serialize xs))), +    rx.Observable/take(1), +  (.take xs 1)), +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/core.clj, +(defn serialize, +  "Serialize execution., +    rx.Observable/serialize, +  (.serialize xs))), +    rx.Observable/take(1), +  (.take xs 1)), +++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/core_test.clj, +(deftest test-serialize, +  ; I'm going to believe serialize works and just exercise it, +              (rx/serialize), +              (b/into []))))), +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/core.clj, +(defn serialize, +  "Serialize execution., +    rx.Observable/serialize, +  (.serialize xs))), +    rx.Observable/take(1), +  (.take xs 1)), +++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/core_test.clj, +(deftest test-serialize, +  ; I'm going to believe serialize works and just exercise it, +              (rx/serialize), +              (b/into []))))), +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +        .flatMap({, +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/core.clj, +(defn serialize, +  "Serialize execution., +    rx.Observable/serialize, +  (.serialize xs))), +    rx.Observable/take(1), +  (.take xs 1)), +++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/core_test.clj, +(deftest test-serialize, +  ; I'm going to believe serialize works and just exercise it, +              (rx/serialize), +              (b/into []))))), +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +        .flatMap({, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  def serialize: Observable[T] = {, +    toScalaObservable[T](asJavaObservable.serialize), +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/core.clj, +(defn serialize, +  "Serialize execution., +    rx.Observable/serialize, +  (.serialize xs))), +    rx.Observable/take(1), +  (.take xs 1)), +++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/core_test.clj, +(deftest test-serialize, +  ; I'm going to believe serialize works and just exercise it, +              (rx/serialize), +              (b/into []))))), +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +        .flatMap({, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  def serialize: Observable[T] = {, +    toScalaObservable[T](asJavaObservable.serialize), +++ b/rxjava-core/src/main/java/rx/Notification.java, +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/core.clj, +(defn serialize, +  "Serialize execution., +    rx.Observable/serialize, +  (.serialize xs))), +    rx.Observable/take(1), +  (.take xs 1)), +++ b/language-adaptors/rxjava-clojure/src/test/clojure/rx/lang/clojure/core_test.clj, +(deftest test-serialize, +  ; I'm going to believe serialize works and just exercise it, +              (rx/serialize), +              (b/into []))))), +++ b/language-adaptors/rxjava-groovy/src/test/groovy/rx/lang/groovy/ObservableTests.groovy, +        .flatMap({, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  def serialize: Observable[T] = {, +    toScalaObservable[T](asJavaObservable.serialize), +++ b/rxjava-core/src/main/java/rx/Notification.java, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @deprecated use {@link #OnSubscribe}, +    @Deprecated, +    @SuppressWarnings("unchecked"), +    @SuppressWarnings("unchecked"), +    @SuppressWarnings("unchecked"), +    @SuppressWarnings("unchecked"), +    @SuppressWarnings("unchecked"), +    @SuppressWarnings("unchecked"), +    @SuppressWarnings("unchecked"), +    @SuppressWarnings("unchecked"), +    @SuppressWarnings("unchecked"), +    @SuppressWarnings("unchecked"), +    @SuppressWarnings("unchecked")]