[+++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/blocking.clj, +  rx land back to sync land. For example, to produce a servlet response., +, +  If you use these, you're a bad person., +  ", +  (:refer-clojure :exclude [first into doseq last]), +  (:require [rx.lang.clojure.interop :as iop] [rx.lang.clojure.core :as rx]), +(defmacro ^:private with-ex-unwrap, +  [& body], +  `(try, +    ~@body, +    (catch RuntimeException e#, +      (throw (or, +               (and (identical? RuntimeException (class e#)), +                    (.getCause e#)), +               e#))))), +, +  "Convert an Observable to a BlockingObservable., +, +  If o is already a BlockingObservable it's returned unchanged., +  ", +  [o], +  (if (instance? BlockingObservable o), +    o, +    (.toBlockingObservable ^Observable o))), +, +(defn o->seq, +  "Returns a lazy sequence of the items emitted by o, +, +  See:, +    rx.observables.BlockingObservable/getIterator, +    rx.lang.clojure.core/seq->o, +  ", +  [o], +  (-> (->blocking o), +      (.getIterator), +      (iterator-seq))), +  If the Observable is empty, returns nil, +, +    rx.observables.BlockingObservable/first, +  (with-ex-unwrap, +    (.firstOrDefault (->blocking observable) nil))), +, +(defn last, +  "*Blocks* and waits for the last value emitted by the given observable., +, +  If the Observable is empty, returns nil, +, +  If an error is produced it is thrown., +, +  See:, +    clojure.core/last, +    rx/last, +    rx.observable.BlockingObservable/last, +  ", +  [observable], +  (with-ex-unwrap, +    (.lastOrDefault (->blocking observable) nil))), +  (with-ex-unwrap, +    (.single (->blocking observable)))), +, +(defn doseq*, +  "*Blocks* and executes (f x) for each x emitted by xs, +, +  Returns nil., +, +  See:, +    doseq, +    clojure.core/doseq, +  ", +  [xs f], +  (with-ex-unwrap, +    (-> (->blocking xs), +        (.forEach (rx.lang.clojure.interop/action* f))))), +, +(defmacro doseq, +  "Like clojure.core/doseq except iterates over an observable in a blocking manner., +, +  Unlike clojure.core/doseq, only supports a single binding, +, +  Returns nil., +, +  Example:, +, +    (rx-blocking/doseq [{:keys [name]} users-observable], +      (println \"User:\" name)), +, +  See:, +    doseq*, +    clojure.core/doseq, +  ", +  [bindings & body], +  (when (not= (count bindings) 2), +    (throw (IllegalArgumentException. (str "sorry, rx/doseq only supports one binding")))), +  (let [[k v] bindings], +    `(doseq* ~v (fn [~k] ~@body)))), +, +++ b/language-adaptors/rxjava-clojure/src/main/clojure/rx/lang/clojure/blocking.clj, +  rx land back to sync land. For example, to produce a servlet response., +]