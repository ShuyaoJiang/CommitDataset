[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import scala.collection.mutable, +    val mapFactory: () => mutable.Map[Char, mutable.Buffer[String]] = () => mutable.Map('d' -> mutable.ListBuffer("oug")), +    val mapFactory: () => mutable.Map[Char, mutable.Buffer[String]] = () => mutable.Map('d' -> mutable.ListBuffer("oug")), +    val valueFactory = (k: Char) => mutable.ListBuffer[String](), +    val m = o.toMultimap(keySelector, valueSelector, mapFactory, valueFactory), +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import scala.collection.mutable, +    val mapFactory: () => mutable.Map[Char, mutable.Buffer[String]] = () => mutable.Map('d' -> mutable.ListBuffer("oug")), +    val mapFactory: () => mutable.Map[Char, mutable.Buffer[String]] = () => mutable.Map('d' -> mutable.ListBuffer("oug")), +    val valueFactory = (k: Char) => mutable.ListBuffer[String](), +    val m = o.toMultimap(keySelector, valueSelector, mapFactory, valueFactory), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  import scala.collection.mutable, +  def toMultimap[K](keySelector: T => K): Observable[scala.collection.Map[K, Seq[T]]] = {, +    toMultimap(keySelector, k => k), +  def toMultimap[K, V](keySelector: T => K, valueSelector: T => V): Observable[scala.collection.Map[K, Seq[V]]] = {, +    toMultimap(keySelector, valueSelector, () => mutable.Map[K, mutable.Buffer[V]]()), +  def toMultimap[K, V](keySelector: T => K, valueSelector: T => V, mapFactory: () => mutable.Map[K, mutable.Buffer[V]]): Observable[scala.collection.Map[K, Seq[V]]] = {, +    toMultimap(keySelector, valueSelector, mapFactory, k => mutable.ListBuffer[V]()), +  def toMultimap[K, V](keySelector: T => K, valueSelector: T => V, mapFactory: () => mutable.Map[K, mutable.Buffer[V]], collectionFactory: K => mutable.Buffer[V]): Observable[scala.collection.Map[K, Seq[V]]] = {, +    lift {, +      (subscriber: Subscriber[scala.collection.Map[K, Seq[V]]]) => {, +        val map = mapFactory().withDefault(collectionFactory), +        Subscriber[T](, +          subscriber,, +          (t: T) => {, +            val key = keySelector(t), +            val value = map(key), +            value += valueSelector(t), +            map += key -> value: Unit, +          },, +          e => subscriber.onError(e),, +          () => {, +            subscriber.onNext(map), +            subscriber.onCompleted(), +          }, +        )]