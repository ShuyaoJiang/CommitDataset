[+++ b/rxjava-core/src/main/java/rx/subjects/BehaviorSubject.java, +import rx.operators.NotificationLite;, +            state.set(NotificationLite.instance().next(defaultValue));, +        final AtomicReference<Object> latest = new AtomicReference<Object>();, +        void set(Object value) {, +        Object get() {, +        BehaviorObserver<T>[] next(Object n) {, +        BehaviorObserver<T>[] terminate(Object n) {, +        boolean isActive() {, +            return !observers.get().terminated;, +        }, +    private final NotificationLite<T> nl = NotificationLite.instance();, +        Object last = state.get();, +        if (last == null || state.isActive()) {, +            Object n = nl.completed();, +        Object last = state.get();, +        if (last == null || state.isActive()) {, +            Object n = nl.error(e);, +        Object last = state.get();, +        if (last == null || state.isActive()) {, +            Object n = nl.next(v);, +        final NotificationLite<T> nl = NotificationLite.instance();, +        List<Object> queue;, +        /* volatile */boolean fastPath;, +        void emitNext(Object n) {, +            if (!fastPath) {, +                            queue = new ArrayList<Object>();, +            nl.accept(actual, n);, +        }, +        void emitFirst(Object n) {, +            emitLoop(null, n);, +        void emitLoop(List<Object> localQueue, Object current) {, +                        for (Object n : localQueue) {, +        void accept(Object n) {, +                if (nl.isCompleted(n) || nl.isError(n)) {, +                nl.accept(actual, n);]