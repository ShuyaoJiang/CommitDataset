[+++ b/src/jmh/java/io/reactivex/BinaryFlatMapPerf.java, +/**, + * Copyright (c) 2016-present, RxJava Contributors., + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in, + * compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License is, + * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See, + * the License for the specific language governing permissions and limitations under the License., + */, +, +package io.reactivex;, +, +import java.util.*;, +import java.util.concurrent.TimeUnit;, +, +import org.openjdk.jmh.annotations.*;, +import org.openjdk.jmh.infra.Blackhole;, +import org.reactivestreams.Publisher;, +, +import io.reactivex.Observable;, +import io.reactivex.functions.Function;, +, +@BenchmarkMode(Mode.Throughput), +@Warmup(iterations = 5), +@Measurement(iterations = 5, time = 5, timeUnit = TimeUnit.SECONDS), +@OutputTimeUnit(TimeUnit.SECONDS), +@Fork(value = 1), +@State(Scope.Thread), +public class BinaryFlatMapPerf {, +    @Param({ "1", "1000", "1000000" }), +    public int times;, +, +    Flowable<Integer> singleFlatMapPublisher;, +, +    Flowable<Integer> singleFlatMapHidePublisher;, +, +    Flowable<Integer> singleFlattenAsPublisher;, +, +    Flowable<Integer> maybeFlatMapPublisher;, +, +    Flowable<Integer> maybeFlatMapHidePublisher;, +, +    Flowable<Integer> maybeFlattenAsPublisher;, +, +    Flowable<Integer> completableFlatMapPublisher;, +, +    Flowable<Integer> completableFlattenAsPublisher;, +, +    Observable<Integer> singleFlatMapObservable;, +, +    Observable<Integer> singleFlatMapHideObservable;, +, +    Observable<Integer> singleFlattenAsObservable;, +, +    Observable<Integer> maybeFlatMapObservable;, +, +    Observable<Integer> maybeFlatMapHideObservable;, +, +    Observable<Integer> maybeFlattenAsObservable;, +, +    Observable<Integer> completableFlatMapObservable;, +, +    Observable<Integer> completableFlattenAsObservable;, +, +    @Setup, +    public void setup() {, +, +        // --------------------------------------------------------------------------, +, +        final Integer[] array = new Integer[times];, +        Arrays.fill(array, 777);, +, +        final List<Integer> list = Arrays.asList(array);, +, +        final Flowable<Integer> arrayFlowable = Flowable.fromArray(array);, +        final Flowable<Integer> arrayFlowableHide = Flowable.fromArray(array).hide();, +        final Flowable<Integer> listFlowable = Flowable.fromIterable(list);, +, +        final Observable<Integer> arrayObservable = Observable.fromArray(array);, +        final Observable<Integer> arrayObservableHide = Observable.fromArray(array).hide();, +        final Observable<Integer> listObservable = Observable.fromIterable(list);, +, +        // --------------------------------------------------------------------------, +, +        singleFlatMapPublisher = Single.just(1).flatMapPublisher(new Function<Integer, Publisher<? extends Integer>>() {, +            @Override, +            public Publisher<? extends Integer> apply(Integer v), +                    throws Exception {, +                return arrayFlowable;, +            }, +        });, +, +        singleFlatMapHidePublisher = Single.just(1).flatMapPublisher(new Function<Integer, Publisher<? extends Integer>>() {, +            @Override, +            public Publisher<? extends Integer> apply(Integer v), +                    throws Exception {]