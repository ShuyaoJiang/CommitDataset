[+++ b/language-adaptors/rxjava-scala/ReleaseNotes.md, + `onError` or `onCompleted` methods., +++ b/language-adaptors/rxjava-scala/ReleaseNotes.md, + `onError` or `onCompleted` methods., +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  private [scala] val asJavaObservable: rx.Observable[_ <: T], +++ b/language-adaptors/rxjava-scala/ReleaseNotes.md, + `onError` or `onCompleted` methods., +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  private [scala] val asJavaObservable: rx.Observable[_ <: T], +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observer.scala, +import java.util.concurrent.atomic.AtomicBoolean, +  private [scala] val asJavaObserver: rx.Observer[_ >: T], +  def onNext(value: T): Unit, +  def onError(error: Throwable): Unit, +  def onCompleted(): Unit, +, +   * Scala calls XXX; Java receives XXX., +       val asJavaObserver = observer, +       def onNext(value: T): Unit = asJavaObserver.onNext(value), +       def onError(error: Throwable): Unit = asJavaObserver.onError(error), +       def onCompleted(): Unit = asJavaObserver.onCompleted(), +, +  def apply[T](n: T=>Unit, e: Throwable=>Unit, c: ()=>Unit): Observer[T] = {, +      // Java calls XXX; Scala receives XXX., +      Observer(new rx.Observer[T]{, +         def onNext(value: T): Unit = n(value), +         def onError(error: Throwable): Unit = e(error), +         def onCompleted(): Unit = c(), +       }), +++ b/language-adaptors/rxjava-scala/ReleaseNotes.md, + `onError` or `onCompleted` methods., +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  private [scala] val asJavaObservable: rx.Observable[_ <: T], +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observer.scala, +import java.util.concurrent.atomic.AtomicBoolean, +  private [scala] val asJavaObserver: rx.Observer[_ >: T], +  def onNext(value: T): Unit, +  def onError(error: Throwable): Unit, +  def onCompleted(): Unit, +, +   * Scala calls XXX; Java receives XXX., +       val asJavaObserver = observer, +       def onNext(value: T): Unit = asJavaObserver.onNext(value), +       def onError(error: Throwable): Unit = asJavaObserver.onError(error), +       def onCompleted(): Unit = asJavaObserver.onCompleted(), +, +  def apply[T](n: T=>Unit, e: Throwable=>Unit, c: ()=>Unit): Observer[T] = {, +      // Java calls XXX; Scala receives XXX., +      Observer(new rx.Observer[T]{, +         def onNext(value: T): Unit = n(value), +         def onError(error: Throwable): Unit = e(error), +         def onCompleted(): Unit = c(), +       }), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subject.scala, +  val asJavaObservable: rx.Observable[_ <: R] = asJavaSubject, +  val asJavaObserver: rx.Observer[_ >: T] = asJavaSubject, +  def onNext(value: T): Unit = { asJavaObserver.onNext(value)}, +  def onError(error: Throwable): Unit = { asJavaObserver.onError(error)  }, +  def onCompleted() { asJavaObserver.onCompleted() }, +++ b/language-adaptors/rxjava-scala/ReleaseNotes.md, + `onError` or `onCompleted` methods., +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +  private [scala] val asJavaObservable: rx.Observable[_ <: T], +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observer.scala, +import java.util.concurrent.atomic.AtomicBoolean, +  private [scala] val asJavaObserver: rx.Observer[_ >: T], +  def onNext(value: T): Unit, +  def onError(error: Throwable): Unit, +  def onCompleted(): Unit, +, +   * Scala calls XXX; Java receives XXX., +       val asJavaObserver = observer, +       def onNext(value: T): Unit = asJavaObserver.onNext(value), +       def onError(error: Throwable): Unit = asJavaObserver.onError(error), +       def onCompleted(): Unit = asJavaObserver.onCompleted(), +, +  def apply[T](n: T=>Unit, e: Throwable=>Unit, c: ()=>Unit): Observer[T] = {, +      // Java calls XXX; Scala receives XXX., +      Observer(new rx.Observer[T]{, +         def onNext(value: T): Unit = n(value), +         def onError(error: Throwable): Unit = e(error), +         def onCompleted(): Unit = c(), +       }), +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Subject.scala, +  val asJavaObservable: rx.Observable[_ <: R] = asJavaSubject, +  val asJavaObserver: rx.Observer[_ >: T] = asJavaSubject, +  def onNext(value: T): Unit = { asJavaObserver.onNext(value)}, +  def onError(error: Throwable): Unit = { asJavaObserver.onError(error)  }, +  def onCompleted() { asJavaObserver.onCompleted() }, +++ b/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/SubjectTests.scala, +import org.junit.{Assert, Test}, +import org.scalatest.junit.JUnitSuite, +import scala.concurrent.duration._, +import scala.language.postfixOps, +import rx.lang.scala.schedulers.TestScheduler, +import rx.lang.scala.subjects.BehaviorSubject, +import org.mockito.Mockito._, +import org.mockito.Matchers._, +]