[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def combineLatestExample() {, +    val first_counter = Observable.interval(250 millis), +    val second_counter = Observable.interval(550 millis), +    val combined_counter = first_counter.combineLatest(second_counter,, +      (x: Long, y: Long) => List(x,y)) take 10, +, +    combined_counter subscribe {x => println(s"Emitted group: $x")}, +  }, +, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +  @Test def combineLatestExample() {, +    val first_counter = Observable.interval(250 millis), +    val second_counter = Observable.interval(550 millis), +    val combined_counter = first_counter.combineLatest(second_counter,, +      (x: Long, y: Long) => List(x,y)) take 10, +, +    combined_counter subscribe {x => println(s"Emitted group: $x")}, +  }, +, +++ b/language-adaptors/rxjava-scala/src/main/scala/rx/lang/scala/Observable.scala, +, +  /**, +   * Combines two observables, emitting some type `R` specified in the function f,, +   * each time an event is received from one of the source observables, where the aggregation, +   * is defined by the given function., +   *, +   *@param that, +   *           The second source observable., +   *@param f, +               The function that is used combine the emissions of the two observables., +   *@return An Observable that combines the source Observables according to the function f., +   */, +  def combineLatest[U,R](that: Observable[U], f: (T, U) => R): Observable[R] = {, +    toScalaObservable[R](rx.Observable.combineLatest[T, U, R](this.asJavaObservable, that.asJavaObservable, f)), +  }, +]