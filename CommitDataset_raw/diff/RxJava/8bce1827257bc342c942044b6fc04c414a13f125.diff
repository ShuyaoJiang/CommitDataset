[+++ b/language-adaptors/rxjava-kotlin/build.gradle, +        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.8.11', +    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.8.11', +++ b/language-adaptors/rxjava-kotlin/build.gradle, +        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.8.11', +    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.8.11', +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +        assertEquals("three", Observable.from(listOf("one", "two", "three"))!!.toBlocking()!!.last()), +        assertEquals("two", Observable.from(listOf("one", "two", "three"))!!.toBlocking()!!.last { x -> x!!.length == 3 }), +        assertEquals(5, Observable.from(list)!!.count()!!.toBlocking()!!.single()), +        assertEquals(2, Observable.from(listOf(list, 6))!!.count()!!.toBlocking()!!.single()), +        assertEquals(6, Observable.from(list)!!.startWith(0)!!.count()!!.toBlocking()!!.single()), +        assertEquals(10, Observable.from(list)!!.startWith(startList)!!.count()!!.toBlocking()!!.single()), +        Observable.create(AsyncObservable())!!.toBlocking()!!.forEach(received()), +        Observable.create(AsyncObservable())!!.toBlocking()!!.forEach { throw RuntimeException("err") }, +        assertEquals("two", Observable.from(listOf("one", "two"))!!.toBlocking()!!.lastOrDefault("default") { x -> x!!.length == 3 }), +        assertEquals("default", Observable.from(listOf("one", "two"))!!.toBlocking()!!.lastOrDefault("default") { x -> x!!.length > 3 }), +        assertEquals("one", Observable.from("one")!!.toBlocking()!!.single { x -> x!!.length == 3 }), +        Observable.from(listOf("one", "two"))!!.toBlocking()!!.single { x -> x!!.length == 3 }, +        val values = Observable.zip(o1, o2, o3) { a, b, c -> listOf(a, b, c) }!!.toList()!!.toBlocking()!!.single()!!, +        val values = Observable.zip(listOf(o1, o2, o3)) { args -> listOf(*args) }!!.toList()!!.toBlocking()!!.single()!!, +                }!!.toBlocking()!!.forEach { s ->, +++ b/language-adaptors/rxjava-kotlin/build.gradle, +        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.8.11', +    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.8.11', +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/BasicKotlinTests.kt, +        assertEquals("three", Observable.from(listOf("one", "two", "three"))!!.toBlocking()!!.last()), +        assertEquals("two", Observable.from(listOf("one", "two", "three"))!!.toBlocking()!!.last { x -> x!!.length == 3 }), +        assertEquals(5, Observable.from(list)!!.count()!!.toBlocking()!!.single()), +        assertEquals(2, Observable.from(listOf(list, 6))!!.count()!!.toBlocking()!!.single()), +        assertEquals(6, Observable.from(list)!!.startWith(0)!!.count()!!.toBlocking()!!.single()), +        assertEquals(10, Observable.from(list)!!.startWith(startList)!!.count()!!.toBlocking()!!.single()), +        Observable.create(AsyncObservable())!!.toBlocking()!!.forEach(received()), +        Observable.create(AsyncObservable())!!.toBlocking()!!.forEach { throw RuntimeException("err") }, +        assertEquals("two", Observable.from(listOf("one", "two"))!!.toBlocking()!!.lastOrDefault("default") { x -> x!!.length == 3 }), +        assertEquals("default", Observable.from(listOf("one", "two"))!!.toBlocking()!!.lastOrDefault("default") { x -> x!!.length > 3 }), +        assertEquals("one", Observable.from("one")!!.toBlocking()!!.single { x -> x!!.length == 3 }), +        Observable.from(listOf("one", "two"))!!.toBlocking()!!.single { x -> x!!.length == 3 }, +        val values = Observable.zip(o1, o2, o3) { a, b, c -> listOf(a, b, c) }!!.toList()!!.toBlocking()!!.single()!!, +        val values = Observable.zip(listOf(o1, o2, o3)) { args -> listOf(*args) }!!.toList()!!.toBlocking()!!.single()!!, +                }!!.toBlocking()!!.forEach { s ->, +++ b/language-adaptors/rxjava-kotlin/src/test/kotlin/rx/lang/kotlin/ExtensionTests.kt, +        assertEquals("three", listOf("one", "two", "three").asObservable().toBlocking()!!.last()), +        assertEquals("two", listOf("one", "two", "three").asObservable().toBlocking()!!.last { x -> x!!.length == 3 }), +        assertEquals(5, listOf(1, 2, 3, 4, 5).asObservable().count()!!.toBlocking()!!.single()), +        assertEquals(6, list.asObservable().startWith(0)!!.count()!!.toBlocking()!!.single()), +        assertEquals(10, list.asObservable().startWith(startList)!!.count()!!.toBlocking()!!.single()), +        asyncObservable.asObservable().toBlocking()!!.forEach(received()), +        asyncObservable.asObservable().toBlocking()!!.forEach { throw RuntimeException("err") }, +        assertEquals("two", ("one" to"two").asObservable().toBlocking()!!.lastOrDefault("default") { x -> x!!.length == 3 }), +        assertEquals("default", ("one" to"two").asObservable().toBlocking()!!.lastOrDefault("default") { x -> x!!.length > 3 }), +        val values = Observable.zip(o1, o2, o3) { a, b, c -> listOf(a, b, c) }!!.toList()!!.toBlocking()!!.single()!!]