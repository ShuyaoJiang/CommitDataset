[+++ b/src/main/java/rx/Observable.java, +     * <p/>, +     *  <dt><b>Beta:</b></dt>, +     *  <dd>{@code switchIfEmpty} is currently in {@link rx.annotations.Beta} and subject to change.</dd>, +    @Beta, +++ b/src/main/java/rx/Observable.java, +     * <p/>, +     *  <dt><b>Beta:</b></dt>, +     *  <dd>{@code switchIfEmpty} is currently in {@link rx.annotations.Beta} and subject to change.</dd>, +    @Beta, +++ b/src/main/java/rx/internal/operators/OperatorSwitchIfEmpty.java, +        final SwitchIfEmptySubscriber parent = new SwitchIfEmptySubscriber(child);, +        child.add(parent);, +        return parent;, +                unsubscribe();, +            child.add(alternate.unsafeSubscribe(new Subscriber<T>() {, +++ b/src/main/java/rx/Observable.java, +     * <p/>, +     *  <dt><b>Beta:</b></dt>, +     *  <dd>{@code switchIfEmpty} is currently in {@link rx.annotations.Beta} and subject to change.</dd>, +    @Beta, +++ b/src/main/java/rx/internal/operators/OperatorSwitchIfEmpty.java, +        final SwitchIfEmptySubscriber parent = new SwitchIfEmptySubscriber(child);, +        child.add(parent);, +        return parent;, +                unsubscribe();, +            child.add(alternate.unsafeSubscribe(new Subscriber<T>() {, +++ b/src/test/java/rx/internal/operators/OperatorSwitchIfEmptyTest.java, +, +    @Test, +    public void testSwitchShouldTriggerUnsubscribe() {, +        final Subscription s = Subscriptions.empty();, +, +        Observable.create(new Observable.OnSubscribe<Long>() {, +            @Override, +            public void call(final Subscriber<? super Long> subscriber) {, +                subscriber.add(s);, +                subscriber.onCompleted();, +            }, +        }).switchIfEmpty(Observable.<Long>never()).subscribe();, +        assertTrue(s.isUnsubscribed());, +    }]