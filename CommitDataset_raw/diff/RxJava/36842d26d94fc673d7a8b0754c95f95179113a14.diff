[+++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Modifies the source {@code Observable} so that it invokes the given action when it is subscribed from, +     * its subscribers. Each subscription will result in an invocation of the given action except when the, +     * source {@code Observable} is reference counted, in which case the source {@code Observable} will invoke, +     * the given action for the first subscription., +     *, +     *, +     * @param unsubscribe The action that gets called when this {@code Observable} is subscribed., +     *, +     * @return That modified {@code Observable}, +     */, +    public final Observable<T> doOnSubscribe(final Action0 subscribe) {, +        return lift(new OperatorDoOnSubscribe<T>(subscribe));, +    }, +    , +    /**, +     * Modifies the source {@code Observable} so that it invokes the given action when it is unsubscribed from, +     * its subscribers. Each un-subscription will result in an invocation of the given action except when the, +     * source {@code Observable} is reference counted, in which case the source {@code Observable} will invoke, +     * the given action for the very last un-subscription., +     * <p>, +     * <img width="640" height="310" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/doOnUnsubscribe.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code doOnUnsubscribe} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param unsubscribe the action that gets called when this {@code Observable} is unsubscribed, +     * @return the source {@code Observable} modified so as to call this Action when appropriate, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Observable-Utility-Operators#doonunsubscribe">RxJava wiki: doOnUnsubscribe</a>, +     */, +    public final Observable<T> doOnUnsubscribe(final Action0 unsubscribe) {, +        return lift(new OperatorDoOnUnsubscribe<T>(unsubscribe));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * Modifies the source {@code Observable} so that it invokes the given action when it is subscribed from, +     * its subscribers. Each subscription will result in an invocation of the given action except when the, +     * source {@code Observable} is reference counted, in which case the source {@code Observable} will invoke, +     * the given action for the first subscription., +     *, +     *, +     * @param unsubscribe The action that gets called when this {@code Observable} is subscribed., +     *, +     * @return That modified {@code Observable}, +     */, +    public final Observable<T> doOnSubscribe(final Action0 subscribe) {, +        return lift(new OperatorDoOnSubscribe<T>(subscribe));, +    }, +    , +    /**, +     * Modifies the source {@code Observable} so that it invokes the given action when it is unsubscribed from, +     * its subscribers. Each un-subscription will result in an invocation of the given action except when the, +     * source {@code Observable} is reference counted, in which case the source {@code Observable} will invoke, +     * the given action for the very last un-subscription., +     * <p>, +     * <img width="640" height="310" src="https://raw.github.com/wiki/Netflix/RxJava/images/rx-operators/doOnUnsubscribe.png" alt="">, +     * <dl>, +     *  <dt><b>Scheduler:</b></dt>, +     *  <dd>{@code doOnUnsubscribe} does not operate by default on a particular {@link Scheduler}.</dd>, +     * </dl>, +     *, +     * @param unsubscribe the action that gets called when this {@code Observable} is unsubscribed, +     * @return the source {@code Observable} modified so as to call this Action when appropriate, +     * @see <a href="https://github.com/Netflix/RxJava/wiki/Observable-Utility-Operators#doonunsubscribe">RxJava wiki: doOnUnsubscribe</a>, +     */, +    public final Observable<T> doOnUnsubscribe(final Action0 unsubscribe) {, +        return lift(new OperatorDoOnUnsubscribe<T>(unsubscribe));, +    }, +, +    /**, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorDoOnSubscribe.java, +/**, + * Copyright 2014 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.internal.operators;, +, +import rx.Observable.Operator;, +import rx.Subscriber;, +import rx.functions.Action0;, +, +/**, + * This operator modifies an {@link rx.Observable} so a given action is invoked when the {@link rx.Observable} is subscribed., + * @param <T> The type of the elements in the {@link rx.Observable} that this operator modifies, + */, +public class OperatorDoOnSubscribe<T> implements Operator<T, T> {, +    private final Action0 subscribe;]