[+++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.internal.fuseable.ScalarCallable;, +        if (this instanceof ScalarCallable) {, +            @SuppressWarnings("unchecked"), +            T v = ((ScalarCallable<T>)this).call();, +            if (v == null) {, +                return empty();, +            }, +            return ScalarXMap.scalarXMap(v, mapper);, +        }, +        if (this instanceof ScalarCallable) {, +            @SuppressWarnings("unchecked"), +            T v = ((ScalarCallable<T>)this).call();, +            if (v == null) {, +                return empty();, +            }, +            return ScalarXMap.scalarXMap(v, mapper);, +        }, +        if (this instanceof ScalarCallable) {, +            @SuppressWarnings("unchecked"), +            T v = ((ScalarCallable<T>)this).call();, +            if (v == null) {, +                return empty();, +            }, +            return ScalarXMap.scalarXMap(v, mapper);, +        }, +++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.internal.fuseable.ScalarCallable;, +        if (this instanceof ScalarCallable) {, +            @SuppressWarnings("unchecked"), +            T v = ((ScalarCallable<T>)this).call();, +            if (v == null) {, +                return empty();, +            }, +            return ScalarXMap.scalarXMap(v, mapper);, +        }, +        if (this instanceof ScalarCallable) {, +            @SuppressWarnings("unchecked"), +            T v = ((ScalarCallable<T>)this).call();, +            if (v == null) {, +                return empty();, +            }, +            return ScalarXMap.scalarXMap(v, mapper);, +        }, +        if (this instanceof ScalarCallable) {, +            @SuppressWarnings("unchecked"), +            T v = ((ScalarCallable<T>)this).call();, +            if (v == null) {, +                return empty();, +            }, +            return ScalarXMap.scalarXMap(v, mapper);, +        }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableAll.java, +import io.reactivex.internal.subscriptions.*;, +    static final class AllSubscriber<T> extends DeferredScalarSubscription<Boolean> implements Subscriber<T> {, +            super(actual);, +                s.request(Long.MAX_VALUE);, +                complete(false);, +            complete(true);, +            super.cancel();, +++ b/src/main/java/io/reactivex/Flowable.java, +import io.reactivex.internal.fuseable.ScalarCallable;, +        if (this instanceof ScalarCallable) {, +            @SuppressWarnings("unchecked"), +            T v = ((ScalarCallable<T>)this).call();, +            if (v == null) {, +                return empty();, +            }, +            return ScalarXMap.scalarXMap(v, mapper);, +        }, +        if (this instanceof ScalarCallable) {, +            @SuppressWarnings("unchecked"), +            T v = ((ScalarCallable<T>)this).call();, +            if (v == null) {, +                return empty();, +            }, +            return ScalarXMap.scalarXMap(v, mapper);, +        }, +        if (this instanceof ScalarCallable) {, +            @SuppressWarnings("unchecked"), +            T v = ((ScalarCallable<T>)this).call();, +            if (v == null) {, +                return empty();, +            }, +            return ScalarXMap.scalarXMap(v, mapper);, +        }, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableAll.java, +import io.reactivex.internal.subscriptions.*;, +    static final class AllSubscriber<T> extends DeferredScalarSubscription<Boolean> implements Subscriber<T> {, +            super(actual);, +                s.request(Long.MAX_VALUE);, +                complete(false);, +            complete(true);, +            super.cancel();, +++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableAny.java, +import io.reactivex.internal.subscriptions.*;, +    static final class AnySubscriber<T> extends DeferredScalarSubscription<Boolean> implements Subscriber<T> {, +            super(actual);, +                s.request(Long.MAX_VALUE);, +                complete(true);]