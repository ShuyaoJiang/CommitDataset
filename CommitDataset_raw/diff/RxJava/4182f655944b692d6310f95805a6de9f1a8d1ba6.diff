[+++ b/src/main/java/rx/Observable.java, +import rx.annotations.*;, +import rx.internal.util.*;, +    /** An empty observable which just emits onCompleted to any subscriber. */, +    private static final Observable<Object> EMPTY = create(new OnSubscribe<Object>() {, +        @Override, +        public void call(Subscriber<? super Object> t1) {, +            t1.onCompleted();, +        }, +    });, +    , +    @SuppressWarnings("unchecked"), +        return (Observable<T>)EMPTY;, +++ b/src/main/java/rx/Observable.java, +import rx.annotations.*;, +import rx.internal.util.*;, +    /** An empty observable which just emits onCompleted to any subscriber. */, +    private static final Observable<Object> EMPTY = create(new OnSubscribe<Object>() {, +        @Override, +        public void call(Subscriber<? super Object> t1) {, +            t1.onCompleted();, +        }, +    });, +    , +    @SuppressWarnings("unchecked"), +        return (Observable<T>)EMPTY;, +++ b/src/test/java/rx/ObservableTests.java, +    @Test, +    public void testEmptyIdentity() {, +        assertEquals(Observable.empty(), Observable.empty());, +    }, +    , +    @Test, +    public void testEmptyIsEmpty() {, +        Observable.<Integer>empty().subscribe(w);, +        , +        verify(w).onCompleted();, +        verify(w, never()).onNext(any(Integer.class));, +        verify(w, never()).onError(any(Throwable.class));, +    }]