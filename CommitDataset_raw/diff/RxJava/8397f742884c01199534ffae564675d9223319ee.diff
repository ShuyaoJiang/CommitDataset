[+++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import org.junit.Assert.assertFalse, +  @Test def exampleWithPublish2() {, +    val unshared = Observable.from(1 to 4), +    val shared = unshared.publish(0), +    shared.subscribe(n => println(s"subscriber 1 gets $n")), +    shared.subscribe(n => println(s"subscriber 2 gets $n")), +    shared.connect, +  }, +, +  @Test def exampleWithPublish3() {, +    val o = Observable.interval(100 millis).take(5).publish((o: Observable[Long]) => o.map(_ * 2)), +    o.subscribe(n => println(s"subscriber 1 gets $n")), +    o.subscribe(n => println(s"subscriber 2 gets $n")), +    Thread.sleep(1000), +  }, +, +  @Test def exampleWithPublish4() {, +    val o = Observable.interval(100 millis).take(5).publish((o: Observable[Long]) => o.map(_ * 2), -1L), +    o.subscribe(n => println(s"subscriber 1 gets $n")), +    o.subscribe(n => println(s"subscriber 2 gets $n")), +    Thread.sleep(1000), +  }, +, +  @Test def dropUntilExample() {, +    val o = List("Alice", "Bob", "Carlos").toObservable.zip(, +      Observable.interval(700 millis, IOScheduler())).map(_._1) // emit every 700 millis, +    val other = List(1).toObservable.delay(1 seconds), +    println(, +      o.dropUntil(other).toBlockingObservable.toList // output List("Bob", "Carlos"), +    ), +  }, +, +  @Test def doOnTerminateExample(): Unit = {, +    val o = List("red", "green", "blue").toObservable.doOnTerminate(() => println("terminate")), +    o.subscribe(v => println(v), e => e.printStackTrace, () => println("onCompleted")), +    // red, +    // green, +    // blud, +    // terminate, +    // onCompleted, +  }, +, +  @Test def finallyDoExample(): Unit = {, +    val o = List("red", "green", "blue").toObservable.finallyDo(() => println("finally")), +    o.subscribe(v => println(v), e => e.printStackTrace, () => println("onCompleted")), +    // red, +    // green, +    // blud, +    // onCompleted, +    // finally, +  }, +, +  @Test def containsExample(): Unit = {, +    val o1 = List(1, 2, 3).toObservable.contains(2), +    assertTrue(o1.toBlockingObservable.single), +, +    val o2 = List(1, 2, 3).toObservable.contains(4), +    assertFalse(o2.toBlockingObservable.single), +  }, +, +  @Test def repeatExample1(): Unit = {, +    val o : Observable[String] = List("alice", "bob", "carol").toObservable.repeat().take(6), +    assertEquals(List("alice", "bob", "carol", "alice", "bob", "carol"), o.toBlockingObservable.toList), +  }, +, +  @Test def repeatExample2(): Unit = {, +    val o : Observable[String] = List("alice", "bob", "carol").toObservable.repeat(2), +    assertEquals(List("alice", "bob", "carol", "alice", "bob", "carol"), o.toBlockingObservable.toList), +  }, +, +, +  @Test def startWithExample1(): Unit = {, +    val o1 = List(3, 4).toObservable, +    val o2 = 1 :: 2 :: o1, +    assertEquals(List(1, 2, 3, 4), o2.toBlockingObservable.toList), +  }, +, +  @Test def startWithExample2(): Unit = {, +    val prepended = List(2, 4).toObservable, +    val o = List(5, 6, 7, 8).toObservable.filter(_ % 2 == 0).startWith(prepended), +    assertEquals(List(2, 4, 6, 8), o.toBlockingObservable.toList), +  }, +, +  @Test def startWithExample3(): Unit = {, +    val o = List(5, 6, 7, 8).toObservable.filter(_ % 2 == 0).startWith(List(2, 4)), +    assertEquals(List(2, 4, 6, 8), o.toBlockingObservable.toList), +  }, +, +  @Test def startWithExample4(): Unit = {, +    val o = List(5, 6, 7, 8).toObservable.filter(_ % 2 == 0).startWith(Array(2, 4)), +    assertEquals(List(2, 4, 6, 8), o.toBlockingObservable.toList), +  }, +, +++ b/language-adaptors/rxjava-scala/src/examples/scala/rx/lang/scala/examples/RxScalaDemo.scala, +import org.junit.Assert.assertFalse, +  @Test def exampleWithPublish2() {, +    val unshared = Observable.from(1 to 4), +    val shared = unshared.publish(0), +    shared.subscribe(n => println(s"subscriber 1 gets $n"))]