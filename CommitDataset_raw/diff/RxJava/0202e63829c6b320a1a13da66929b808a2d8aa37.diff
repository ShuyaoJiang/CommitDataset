[+++ b/rxjava-core/src/main/java/rx/operators/OperationNext.java, +    // test needs to access the observer.waiting flag non-blockingly., +    /* private */static final class NextIterator<T> implements Iterator<T> {, +        // in tests, set the waiting flag without blocking for the next value to , +        // allow lockstepping instead of multi-threading, +        void setWaiting(boolean value) {, +            observer.waiting.set(value);, +        }, +        , +++ b/rxjava-core/src/main/java/rx/operators/OperationNext.java, +    // test needs to access the observer.waiting flag non-blockingly., +    /* private */static final class NextIterator<T> implements Iterator<T> {, +        // in tests, set the waiting flag without blocking for the next value to , +        // allow lockstepping instead of multi-threading, +        void setWaiting(boolean value) {, +            observer.waiting.set(value);, +        }, +        , +++ b/rxjava-core/src/test/java/rx/operators/OperationNextTest.java, +    @Test /* (timeout = 8000) */, +        PublishSubject<Long> ps = PublishSubject.create();, +        BlockingObservable<Long> source = ps.take(10).toBlockingObservable();, +            OperationNext.NextIterator<Long> it = (OperationNext.NextIterator<Long>)iter.iterator();, +            for (long i = 0; i < 9; i++) {, +                it.setWaiting(true);, +                ps.onNext(i);, +                Assert.assertEquals(j + "th iteration", Long.valueOf(i), it.next());, +            it.setWaiting(true);, +            ps.onNext(9L);, +            Assert.assertEquals(j + "th iteration", false, it.hasNext());]