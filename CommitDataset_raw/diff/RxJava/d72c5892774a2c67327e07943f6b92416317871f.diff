[+++ b/rxjava-core/src/main/java/rx/operators/OperationNext.java, +/**, + * Copyright 2013 Netflix, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import org.junit.Test;, +import rx.Notification;, +import rx.Observable;, +import rx.Observer;, +import rx.Subscription;, +import rx.util.Exceptions;, +, +import java.util.Iterator;, +import java.util.concurrent.*;, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import static org.junit.Assert.*;, +import static org.mockito.Mockito.mock;, +, +, +/**, + * Samples the next value (blocking without buffering) from in an observable sequence., + */, +public final class OperationNext {, +, +    public static <T> Iterable<T> next(final Observable<T> items) {, +, +        NextObserver<T> nextObserver = new NextObserver<T>();, +        final NextIterator<T> nextIterator = new NextIterator<T>(nextObserver);, +, +        items.materialize().subscribe(nextObserver);, +, +        return new Iterable<T>() {, +            @Override, +            public Iterator<T> iterator() {, +                return nextIterator;, +            }, +        };, +, +    }, +, +    private static class NextIterator<T> implements Iterator<T> {, +, +        private final NextObserver<T> observer;, +, +        private NextIterator(NextObserver<T> observer) {, +            this.observer = observer;, +        }, +, +        @Override, +        public boolean hasNext() {, +            return !observer.isCompleted();, +        }, +, +        @Override, +        public T next() {, +            if (observer.isCompleted()) {, +                throw new IllegalStateException("Observable is completed");, +            }, +, +            observer.await();, +, +            try {, +                return observer.takeNext();, +            } catch (InterruptedException e) {, +                Thread.currentThread().interrupt();, +                throw Exceptions.propagate(e);, +            }, +, +        }, +, +        @Override, +        public void remove() {, +            throw new UnsupportedOperationException("Read only iterator");, +        }, +    }, +, +, +    private static class NextObserver<T> implements Observer<Notification<T>> {, +        private final BlockingQueue<Notification<T>> buf = new ArrayBlockingQueue<Notification<T>>(1);, +        private final AtomicBoolean waiting = new AtomicBoolean(false);, +, +        @Override, +        public void onCompleted() {, +            // ignore, +        }, +]