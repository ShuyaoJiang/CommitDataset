[+++ b/rxjava-core/build.gradle, +++ b/rxjava-core/build.gradle, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @param lift, +     * @param t1, +     * @deprecated use rxjava-math module instead, +     * @see #switchOnNext(Observable), +     * @param onNotification, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh211993.aspx">MSDN: Observable.Any (Note: the description in this page was wrong at the time of this writing)</a>, +     * @see "MSDN: Observable.firstAsync()", +     * @see "MSDN: Observable.firstAsync()", +     * @see "MSDN: Observable.firstOrDefaultAsync()", +     * @see "MSDN: Observable.firstOrDefaultAsync()", +     * @see "MSDN: Observable.lastAsync()", +     * @see "MSDN: Observable.lastAsync()", +     * @see "MSDN: Observable.lastOrDefaultAsync()", +     * @see "MSDN: Observable.lastOrDefaultAsync()", +     * @return an Observable that emits the results of applying {@code f} to the items emitted by the source, +     * @return an Observable that emits the results of applying {@code f} to the items emitted by the source, +     *         on a {@link ConnectableObservable} that shares a single subscription to the underlying Observable, +     * @see "MSDN: Observable.singleAsync()", +     * @see "MSDN: Observable.singleAsync()", +     * @see "MSDN: Observable.singleOrDefaultAsync()", +     * @see "MSDN: Observable.singleOrDefaultAsync()", +     * Asynchronously subscribes Observers to this Observable on the specified {@link Scheduler}., +     * @see "MSDN: Observable.firstAsync()", +     * @see "MSDN: Observable.firstAsync()", +     * @return a {@link Plan0} that produces the projected results, to be fed (with other Plans) to the, +++ b/rxjava-core/build.gradle, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @param lift, +     * @param t1, +     * @deprecated use rxjava-math module instead, +     * @see #switchOnNext(Observable), +     * @param onNotification, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh211993.aspx">MSDN: Observable.Any (Note: the description in this page was wrong at the time of this writing)</a>, +     * @see "MSDN: Observable.firstAsync()", +     * @see "MSDN: Observable.firstAsync()", +     * @see "MSDN: Observable.firstOrDefaultAsync()", +     * @see "MSDN: Observable.firstOrDefaultAsync()", +     * @see "MSDN: Observable.lastAsync()", +     * @see "MSDN: Observable.lastAsync()", +     * @see "MSDN: Observable.lastOrDefaultAsync()", +     * @see "MSDN: Observable.lastOrDefaultAsync()", +     * @return an Observable that emits the results of applying {@code f} to the items emitted by the source, +     * @return an Observable that emits the results of applying {@code f} to the items emitted by the source, +     *         on a {@link ConnectableObservable} that shares a single subscription to the underlying Observable, +     * @see "MSDN: Observable.singleAsync()", +     * @see "MSDN: Observable.singleAsync()", +     * @see "MSDN: Observable.singleOrDefaultAsync()", +     * @see "MSDN: Observable.singleOrDefaultAsync()", +     * Asynchronously subscribes Observers to this Observable on the specified {@link Scheduler}., +     * @see "MSDN: Observable.firstAsync()", +     * @see "MSDN: Observable.firstAsync()", +     * @return a {@link Plan0} that produces the projected results, to be fed (with other Plans) to the, +++ b/rxjava-core/src/main/java/rx/Observer.java, + * After an Observer calls an {@link Observable}'s <code>Observable.subscribe</code> method, the, + * {@link Observable} calls the Observer's <code>onNext</code> method to provide notifications. A well-behaved, + * {@link Observable} will call an Observer's <code>onCompleted</code> closure exactly once or the Observer's, + * <code>onError</code> closure exactly once., +     * If the {@link Observable} calls this closure, it will not thereafter call <code>onNext</code> or, +     * <code>onCompleted</code>., +     * The {@link Observable} calls this closure 1 or more times, unless it calls <code>onError</code> in which, +     * case this closure may never be called., +     * The {@link Observable} will not call this closure again after it calls either <code>onCompleted</code> or, +     * <code>onError</code>., +     * @param t, +++ b/rxjava-core/build.gradle, +++ b/rxjava-core/src/main/java/rx/Observable.java, +     * @param lift, +     * @param t1, +     * @deprecated use rxjava-math module instead, +     * @see #switchOnNext(Observable), +     * @param onNotification, +     * @see <a href="http://msdn.microsoft.com/en-us/library/hh211993.aspx">MSDN: Observable.Any (Note: the description in this page was wrong at the time of this writing)</a>, +     * @see "MSDN: Observable.firstAsync()", +     * @see "MSDN: Observable.firstAsync()", +     * @see "MSDN: Observable.firstOrDefaultAsync()", +     * @see "MSDN: Observable.firstOrDefaultAsync()", +     * @see "MSDN: Observable.lastAsync()", +     * @see "MSDN: Observable.lastAsync()", +     * @see "MSDN: Observable.lastOrDefaultAsync()", +     * @see "MSDN: Observable.lastOrDefaultAsync()", +     * @return an Observable that emits the results of applying {@code f} to the items emitted by the source, +     * @return an Observable that emits the results of applying {@code f} to the items emitted by the source, +     *         on a {@link ConnectableObservable} that shares a single subscription to the underlying Observable, +     * @see "MSDN: Observable.singleAsync()", +     * @see "MSDN: Observable.singleAsync()", +     * @see "MSDN: Observable.singleOrDefaultAsync()", +     * @see "MSDN: Observable.singleOrDefaultAsync()", +     * Asynchronously subscribes Observers to this Observable on the specified {@link Scheduler}., +     * @see "MSDN: Observable.firstAsync()", +     * @see "MSDN: Observable.firstAsync()", +     * @return a {@link Plan0} that produces the projected results, to be fed (with other Plans) to the, +++ b/rxjava-core/src/main/java/rx/Observer.java, + * After an Observer calls an {@link Observable}'s <code>Observable.subscribe</code> method, the, + * {@link Observable} calls the Observer's <code>onNext</code> method to provide notifications. A well-behaved, + * {@link Observable} will call an Observer's <code>onCompleted</code> closure exactly once or the Observer's, + * <code>onError</code> closure exactly once., +     * If the {@link Observable} calls this closure, it will not thereafter call <code>onNext</code> or]