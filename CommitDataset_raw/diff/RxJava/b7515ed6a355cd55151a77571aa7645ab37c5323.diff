[+++ b/gradle.properties, +version=0.17.0-RC5-SNAPSHOT, +++ b/gradle.properties, +version=0.17.0-RC5-SNAPSHOT, +++ b/rxjava-contrib/rxjava-debug/src/main/java/rx/operators/DebugSubscriber.java, +import rx.functions.Action2;, +public final class DebugSubscriber<T, C> extends Subscriber<T> {, +    private final Func1<DebugNotification, C> start;, +    private final Action1<C> complete;, +    private final Action2<C, Throwable> error;, +    private final Observer<? super T> o;, +    private Operator<? extends T, ?> from = null;, +    private Operator<?, ? super T> to = null;, +            Func1<DebugNotification, C> start,, +            Action1<C> complete,, +            Action2<C, Throwable> error,, +        this.start = start;, +        this.complete = complete;, +        this.error = error;, +        this.add(new DebugSubscription<T, C>(this, start, complete, error));, +        final DebugNotification<T, C> n = DebugNotification.createOnCompleted(o, from, to);, +        C context = start.call(n);, +        try {, +            complete.call(context);, +        } catch (Throwable e) {, +            error.call(context, e);, +        }, +        final DebugNotification<T, C> n = DebugNotification.createOnError(o, from, e, to);, +        C context = start.call(n);, +        try {, +            complete.call(context);, +        } catch (Throwable e2) {, +            error.call(context, e2);, +        }, +        final DebugNotification<T, C> n = DebugNotification.createOnNext(o, from, t, to);, +        C context = start.call(n);, +        try {, +            complete.call(context);, +        } catch (Throwable e) {, +            error.call(context, e);, +        }, +++ b/gradle.properties, +version=0.17.0-RC5-SNAPSHOT, +++ b/rxjava-contrib/rxjava-debug/src/main/java/rx/operators/DebugSubscriber.java, +import rx.functions.Action2;, +public final class DebugSubscriber<T, C> extends Subscriber<T> {, +    private final Func1<DebugNotification, C> start;, +    private final Action1<C> complete;, +    private final Action2<C, Throwable> error;, +    private final Observer<? super T> o;, +    private Operator<? extends T, ?> from = null;, +    private Operator<?, ? super T> to = null;, +            Func1<DebugNotification, C> start,, +            Action1<C> complete,, +            Action2<C, Throwable> error,, +        this.start = start;, +        this.complete = complete;, +        this.error = error;, +        this.add(new DebugSubscription<T, C>(this, start, complete, error));, +        final DebugNotification<T, C> n = DebugNotification.createOnCompleted(o, from, to);, +        C context = start.call(n);, +        try {, +            complete.call(context);, +        } catch (Throwable e) {, +            error.call(context, e);, +        }, +        final DebugNotification<T, C> n = DebugNotification.createOnError(o, from, e, to);, +        C context = start.call(n);, +        try {, +            complete.call(context);, +        } catch (Throwable e2) {, +            error.call(context, e2);, +        }, +        final DebugNotification<T, C> n = DebugNotification.createOnNext(o, from, t, to);, +        C context = start.call(n);, +        try {, +            complete.call(context);, +        } catch (Throwable e) {, +            error.call(context, e);, +        }, +++ b/rxjava-contrib/rxjava-debug/src/main/java/rx/operators/DebugSubscription.java, +import rx.functions.Action1;, +import rx.functions.Action2;, +import rx.functions.Func1;, +final class DebugSubscription<T, C> implements Subscription {, +    private final DebugSubscriber<T, C> debugObserver;, +    private final Func1<DebugNotification, C> start;, +    private final Action1<C> complete;, +    private final Action2<C, Throwable> error;, +    DebugSubscription(DebugSubscriber<T, C> debugObserver, Func1<DebugNotification, C> start, Action1<C> complete, Action2<C, Throwable> error) {, +        this.start = start;, +        this.complete = complete;, +        this.error = error;, +        final DebugNotification<T, C> n = DebugNotification.<T, C> createUnsubscribe(debugObserver.getActual(), debugObserver.getFrom(), debugObserver.getTo());, +        C context = start.call(n);, +        try {, +            complete.call(context);, +        } catch (Throwable e) {, +            error.call(context, e);, +        }]