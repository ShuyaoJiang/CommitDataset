[+++ b/rxjava-core/src/main/java/rx/subjects/ReplaySubject.java, +        return create(16);, +    }, +    public static <T> ReplaySubject<T> create(int initialCapacity) {, +        final ReplayState<T> state = new ReplayState<T>(initialCapacity);, +        final History<T> history;, +        final ConcurrentHashMap<Observer<? super T>, Integer> replayState;, +        public ReplayState(int initialCapacity) {, +            history = new History<T>(initialCapacity);, +            replayState = new ConcurrentHashMap<Observer<? super T>, Integer>();, +        }, +        private final AtomicInteger index;, +        private final ArrayList<T> list;, +        private final AtomicReference<Notification<T>> terminalValue;, +        public History(int initialCapacity) {, +             index = new AtomicInteger(0);, +             list = new ArrayList<T>(initialCapacity);, +             terminalValue = new AtomicReference<Notification<T>>();, +        }, +++ b/rxjava-core/src/main/java/rx/subjects/ReplaySubject.java, +        return create(16);, +    }, +    public static <T> ReplaySubject<T> create(int initialCapacity) {, +        final ReplayState<T> state = new ReplayState<T>(initialCapacity);, +        final History<T> history;, +        final ConcurrentHashMap<Observer<? super T>, Integer> replayState;, +        public ReplayState(int initialCapacity) {, +            history = new History<T>(initialCapacity);, +            replayState = new ConcurrentHashMap<Observer<? super T>, Integer>();, +        }, +        private final AtomicInteger index;, +        private final ArrayList<T> list;, +        private final AtomicReference<Notification<T>> terminalValue;, +        public History(int initialCapacity) {, +             index = new AtomicInteger(0);, +             list = new ArrayList<T>(initialCapacity);, +             terminalValue = new AtomicReference<Notification<T>>();, +        }, +++ b/rxjava-core/src/main/java/rx/subjects/SubjectSubscriptionManager.java, +                State<T> current;, +        State<T> current;]