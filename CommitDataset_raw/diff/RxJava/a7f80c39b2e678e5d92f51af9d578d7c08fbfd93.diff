[+++ b/rxjava-core/src/main/java/rx/Observable.java, +        return lift(new OperatorTakeUntil<T, E>(other));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        return lift(new OperatorTakeUntil<T, E>(other));, +++ b/rxjava-core/src/main/java/rx/internal/operators/NotificationLite.java, +        , +        public String toString() {, +            return "Notification=>Completed";, +        }, +        , +        public String toString() {, +            return "Notification=>NULL";, +        }, +        , +        public String toString() {, +            return "Notification=>Error:" + e.getMessage();, +        }, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        return lift(new OperatorTakeUntil<T, E>(other));, +++ b/rxjava-core/src/main/java/rx/internal/operators/NotificationLite.java, +        , +        public String toString() {, +            return "Notification=>Completed";, +        }, +        , +        public String toString() {, +            return "Notification=>NULL";, +        }, +        , +        public String toString() {, +            return "Notification=>Error:" + e.getMessage();, +        }, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorTakeUntil.java, +import rx.Observable.Operator;, +public final class OperatorTakeUntil<T, E> implements Operator<T, T> {, +    private final Observable<? extends E> other;, +    public OperatorTakeUntil(final Observable<? extends E> other) {, +        this.other = other;, +, +    public Subscriber<? super T> call(final Subscriber<? super T> child) {, +        final Subscriber<T> parent = new Subscriber<T>(child) {, +, +            @Override, +            public void onCompleted() {, +                child.onCompleted();, +, +            @Override, +            public void onError(Throwable e) {, +                child.onError(e);, +            }, +, +            @Override, +            public void onNext(T t) {, +                child.onNext(t);, +            }, +, +        };, +, +        other.unsafeSubscribe(new Subscriber<E>(child) {, +, +            @Override, +            public void onCompleted() {, +                parent.onCompleted();, +            }, +, +            @Override, +            public void onError(Throwable e) {, +                parent.onError(e);, +            }, +, +            @Override, +            public void onNext(E t) {, +                parent.onCompleted();, +            }, +, +, +        return parent;, +++ b/rxjava-core/src/main/java/rx/Observable.java, +        return lift(new OperatorTakeUntil<T, E>(other));, +++ b/rxjava-core/src/main/java/rx/internal/operators/NotificationLite.java, +        , +        public String toString() {, +            return "Notification=>Completed";, +        }, +        , +        public String toString() {, +            return "Notification=>NULL";, +        }, +        , +        public String toString() {, +            return "Notification=>Error:" + e.getMessage();, +        }, +++ b/rxjava-core/src/main/java/rx/internal/operators/OperatorTakeUntil.java, +import rx.Observable.Operator;, +public final class OperatorTakeUntil<T, E> implements Operator<T, T> {, +    private final Observable<? extends E> other;, +    public OperatorTakeUntil(final Observable<? extends E> other) {, +        this.other = other;, +, +    public Subscriber<? super T> call(final Subscriber<? super T> child) {]