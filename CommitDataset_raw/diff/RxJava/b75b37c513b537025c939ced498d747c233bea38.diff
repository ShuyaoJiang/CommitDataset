[+++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationThrottleLast;, +     * Throttles to last value in each window., +    public Observable<T> throttleLast(long timeout, TimeUnit unit) {, +        return create(OperationThrottleLast.throttleLast(this, timeout, unit));, +     * Throttles to last value in each window., +    public Observable<T> throttleLast(long timeout, TimeUnit unit, Scheduler scheduler) {, +        return create(OperationThrottleLast.throttleLast(this, timeout, unit, scheduler));, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationThrottleLast;, +     * Throttles to last value in each window., +    public Observable<T> throttleLast(long timeout, TimeUnit unit) {, +        return create(OperationThrottleLast.throttleLast(this, timeout, unit));, +     * Throttles to last value in each window., +    public Observable<T> throttleLast(long timeout, TimeUnit unit, Scheduler scheduler) {, +        return create(OperationThrottleLast.throttleLast(this, timeout, unit, scheduler));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/Observable.java, +import rx.operators.OperationThrottleLast;, +     * Throttles to last value in each window., +    public Observable<T> throttleLast(long timeout, TimeUnit unit) {, +        return create(OperationThrottleLast.throttleLast(this, timeout, unit));, +     * Throttles to last value in each window., +    public Observable<T> throttleLast(long timeout, TimeUnit unit, Scheduler scheduler) {, +        return create(OperationThrottleLast.throttleLast(this, timeout, unit, scheduler));, +++ /dev/null, +++ b/rxjava-core/src/main/java/rx/operators/OperationThrottleLast.java, +/**, + * Copyright 2013 Netflix, Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package rx.operators;, +, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +import java.util.concurrent.TimeUnit;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.InOrder;, +, +import rx.Observable;, +import rx.Observable.OnSubscribeFunc;, +import rx.Observer;, +import rx.Scheduler;, +import rx.Subscription;, +import rx.concurrency.Schedulers;, +import rx.concurrency.TestScheduler;, +import rx.subscriptions.Subscriptions;, +import rx.util.functions.Action0;, +import rx.util.functions.Func1;, +, +/**, + * This operation is used to filter out bursts of events. This is done by ignoring the events from an observable which are too, + * quickly followed up with other values. Values which are not followed up by other values within the specified timeout are published, + * as soon as the timeout expires., + */, +public final class OperationThrottleLast {, +, +    /**, +     * This operation filters out events which are published too quickly in succession. This is done by dropping events which are, +     * followed up by other events before a specified timer has expired. If the timer expires and no follow up event was published (yet), +     * the last received event is published., +     * , +     * @param items, +     *            The {@link Observable} which is publishing events., +     * @param timeout, +     *            How long each event has to be the 'last event' before it gets published., +     * @param unit, +     *            The unit of time for the specified timeout., +     * @return A {@link Func1} which performs the throttle operation., +     */, +    public static <T> OnSubscribeFunc<T> throttleLast(Observable<T> items, long timeout, TimeUnit unit) {, +        return throttleLast(items, timeout, unit, Schedulers.threadPoolForComputation());, +    }, +, +    /**, +     * This operation filters out events which are published too quickly in succession. This is done by dropping events which are, +     * followed up by other events before a specified timer has expired. If the timer expires and no follow up event was published (yet), +     * the last received event is published., +     * , +     * @param items, +     *            The {@link Observable} which is publishing events., +     * @param timeout, +     *            How long each event has to be the 'last event' before it gets published., +     * @param unit, +     *            The unit of time for the specified timeout., +     * @param scheduler]