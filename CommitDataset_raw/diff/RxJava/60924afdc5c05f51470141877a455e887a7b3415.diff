[+++ b/src/main/java/rx/Observable.java, +import rx.internal.producers.SingleProducer;, +    public final Observable<T> defaultIfEmpty(final T defaultValue) {, +        //if empty switch to an observable that emits defaultValue and supports backpressure, +        return switchIfEmpty(Observable.create(new OnSubscribe<T>() {, +, +            @Override, +            public void call(Subscriber<? super T> subscriber) {, +                subscriber.setProducer(new SingleProducer<T>(subscriber, defaultValue));, +            }}));, +++ b/src/main/java/rx/Observable.java, +import rx.internal.producers.SingleProducer;, +    public final Observable<T> defaultIfEmpty(final T defaultValue) {, +        //if empty switch to an observable that emits defaultValue and supports backpressure, +        return switchIfEmpty(Observable.create(new OnSubscribe<T>() {, +, +            @Override, +            public void call(Subscriber<? super T> subscriber) {, +                subscriber.setProducer(new SingleProducer<T>(subscriber, defaultValue));, +            }}));, +++ /dev/null, +++ b/src/main/java/rx/Observable.java, +import rx.internal.producers.SingleProducer;, +    public final Observable<T> defaultIfEmpty(final T defaultValue) {, +        //if empty switch to an observable that emits defaultValue and supports backpressure, +        return switchIfEmpty(Observable.create(new OnSubscribe<T>() {, +, +            @Override, +            public void call(Subscriber<? super T> subscriber) {, +                subscriber.setProducer(new SingleProducer<T>(subscriber, defaultValue));, +            }}));, +++ /dev/null, +++ b/src/main/java/rx/observers/TestSubscriber.java, +     * Get the {@link Notification}s representing each time this {@link Subscriber} was notified of sequence, +     * Get the {@link Throwable}s this {@link Subscriber} was notified of via {@link #onError} as a, +     * Allow calling the protected {@link #request(long)} from unit tests., +     * Get the sequence of items observed by this {@link Subscriber}, as an ordered {@link List}., +     * Assert that a particular sequence of items was received by this {@link Subscriber} in order., +     * Assert that a single terminal event occurred, either {@link #onCompleted} or {@link #onError}., +     * Assert that this {@code Subscriber} is unsubscribed., +     * Assert that this {@code Subscriber} has received no {@code onError} notifications., +     * Assert if there is exactly a single completion event., +     * Assert if there is no completion event., +     * Assert if there is exactly one error event which is a subclass of the given class., +     * Assert there is a single onError event with the exact exception., +     * Assert for no onError and onCompleted events., +     * Assert if there are no onNext events received., +     * Assert if the given number of onNext events are received., +     * Assert if the received onNext events, in order, are the specified items., +     * Assert if there is only a single received onNext event and that it marks the emission of a specific item., +++ b/src/main/java/rx/Observable.java, +import rx.internal.producers.SingleProducer;, +    public final Observable<T> defaultIfEmpty(final T defaultValue) {, +        //if empty switch to an observable that emits defaultValue and supports backpressure, +        return switchIfEmpty(Observable.create(new OnSubscribe<T>() {, +, +            @Override, +            public void call(Subscriber<? super T> subscriber) {, +                subscriber.setProducer(new SingleProducer<T>(subscriber, defaultValue));, +            }}));, +++ /dev/null, +++ b/src/main/java/rx/observers/TestSubscriber.java, +     * Get the {@link Notification}s representing each time this {@link Subscriber} was notified of sequence, +     * Get the {@link Throwable}s this {@link Subscriber} was notified of via {@link #onError} as a, +     * Allow calling the protected {@link #request(long)} from unit tests., +     * Get the sequence of items observed by this {@link Subscriber}, as an ordered {@link List}., +     * Assert that a particular sequence of items was received by this {@link Subscriber} in order., +     * Assert that a single terminal event occurred, either {@link #onCompleted} or {@link #onError}., +     * Assert that this {@code Subscriber} is unsubscribed., +     * Assert that this {@code Subscriber} has received no {@code onError} notifications., +     * Assert if there is exactly a single completion event., +     * Assert if there is no completion event., +     * Assert if there is exactly one error event which is a subclass of the given class., +     * Assert there is a single onError event with the exact exception., +     * Assert for no onError and onCompleted events., +     * Assert if there are no onNext events received., +     * Assert if the given number of onNext events are received., +     * Assert if the received onNext events, in order, are the specified items., +     * Assert if there is only a single received onNext event and that it marks the emission of a specific item., +++ b/src/test/java/rx/internal/operators/OperatorDefaultIfEmptyTest.java, +import rx.observers.TestSubscriber;, +    , +    @Test, +    public void testBackpressureEmpty() {, +        TestSubscriber<Integer> ts = TestSubscriber.create(0);, +        Observable.<Integer>empty().defaultIfEmpty(1).subscribe(ts);, +        ts.assertNoValues();, +        ts.assertNoTerminalEvent();, +        ts.requestMore(1);, +        ts.assertValue(1);, +        ts.assertCompleted();, +    }, +    , +    @Test, +    public void testBackpressureNonEmpty() {, +        TestSubscriber<Integer> ts = TestSubscriber.create(0);, +        Observable.just(1,2,3).defaultIfEmpty(1).subscribe(ts);, +        ts.assertNoValues();, +        ts.assertNoTerminalEvent();, +        ts.requestMore(2);]